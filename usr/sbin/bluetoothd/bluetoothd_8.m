void sub_10049EB80(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)(v1 - 144);
  if (v3)
  {
    *(void *)(v1 - 136) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(v1 - 240);
  if (v4)
  {
    *(void *)(v1 - 232) = v4;
    operator delete(v4);
  }
  sub_10003AFB4((uint64_t)&STACK[0x270]);
  _Unwind_Resume(a1);
}

void sub_10049EFB0(uint64_t a1)
{
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009AFE88);
  }
  sub_1006D4BEC((uint64_t)off_1009F85C0, *(void *)(a1 + 32) + 77, *(void *)(a1 + 40) + 152 * *(int *)(a1 + 48) + 58);
  if (qword_1009F7ED0 != -1) {
    dispatch_once(&qword_1009F7ED0, &stru_1009AFEA8);
  }
  uint64_t v2 = qword_1009F7EC8;
  v3 = (unsigned __int8 *)(*(void *)(a1 + 32) + 77);
  uint64_t v4 = *(void *)(a1 + 40) + 152 * *(int *)(a1 + 48) + 42;

  sub_1007071C4(v2, v3, v4);
}

void sub_10049F078(uint64_t a1)
{
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009AFE88);
  }
  sub_1006D4BEC((uint64_t)off_1009F85C0, *(void *)(a1 + 32) + 77, *(void *)(a1 + 40) + 152 * *(int *)(a1 + 48) + 58);
  if (qword_1009F7ED0 != -1) {
    dispatch_once(&qword_1009F7ED0, &stru_1009AFEA8);
  }
  uint64_t v2 = qword_1009F7EC8;
  v3 = (unsigned __int8 *)(*(void *)(a1 + 32) + 77);
  uint64_t v4 = *(void *)(a1 + 40) + 152 * *(int *)(a1 + 48) + 42;

  sub_1007071C4(v2, v3, v4);
}

void sub_10049F13C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v7 = qword_100A19ED8;
  BOOL v8 = os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT);
  if (!v5 || v6)
  {
    if (v8)
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 138412546;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "After legacy magic pairing, unable to fetch magic setting record: %@, Error: %@", (uint8_t *)&buf, 0x16u);
    }
  }
  else
  {
    if (v8)
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 138412290;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "After legacy magic pairing, fetched magic setting record: %@", (uint8_t *)&buf, 0xCu);
    }
    v9 = [v5 deviceIDFeatureBitsV1];
    BOOL v10 = [v9 length] == 0;

    if (!v10)
    {
      LODWORD(v23) = 0;
      id v11 = [v5 deviceIDFeatureBitsV1];
      sub_10004191C(&buf, (char *)[v11 UTF8String]);
      int v12 = std::stoul(&buf, 0, 0);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }

      BOOL v13 = sub_10047D434(*(void *)(a1 + 32), &v23);
      if (v23 != v12 || !v13)
      {
        v15 = (id)qword_100A19ED8;
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          sub_1004A82EC((unsigned __int8 *)(*(void *)(a1 + 32) + 128), &buf);
          v16 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &buf
              : (std::string *)buf.__r_.__value_.__r.__words[0];
          *(_DWORD *)v24 = 136446466;
          *(void *)&v24[4] = v16;
          __int16 v25 = 1024;
          int v26 = v12;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Fetched iCloud update for DID supported feature bits version 1, address: %{public}s, supported feature bits 0x%x", v24, 0x12u);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
        }

        sub_10047CC64(*(void *)(a1 + 32), v12, 0);
      }
    }
    v17 = [v5 deviceIDFeatureBitsV2];
    BOOL v18 = [v17 length] == 0;

    if (!v18)
    {
      unint64_t v23 = 0;
      id v19 = [v5 deviceIDFeatureBitsV2];
      sub_10004191C(&buf, (char *)[v19 UTF8String]);
      unint64_t v20 = std::stoull(&buf, 0, 0);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }

      if (!sub_10047D4F0(*(void *)(a1 + 32), &v23) || v23 != (HIDWORD(v20) | (v20 << 32)))
      {
        v21 = (id)qword_100A19ED8;
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          sub_1004A82EC((unsigned __int8 *)(*(void *)(a1 + 32) + 128), v24);
          if (v27 >= 0) {
            v22 = v24;
          }
          else {
            v22 = *(unsigned char **)v24;
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136446722;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v22;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = HIDWORD(v20);
          WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(buf.__r_.__value_.__r.__words[2]) = v20;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Apply Fetched iCloud update for DID extended supported feature bits version 2, address: %{public}s, extended supported feature bits I1: 0x%x, I2: 0x%x", (uint8_t *)&buf, 0x18u);
          if (v27 < 0) {
            operator delete(*(void **)v24);
          }
        }

        HIDWORD(v23) |= v20;
        sub_10047CF64(*(void *)(a1 + 32), v23, 0);
      }
    }
  }
}

void sub_10049F4E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_10049F580(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (id)qword_100A19ED8;
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      sub_100474E18(*(void *)(a1 + 32), __p);
      sub_10076D9F8();
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(*(void *)(a1 + 32), __p);
    id v6 = v8 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446210;
    BOOL v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[MP] Removed cloud device for %{public}s", buf, 0xCu);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_10049F6A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10049F6C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (id)qword_100A19ED8;
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      sub_100474E18(*(void *)(a1 + 32), __p);
      sub_10076DA48();
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(*(void *)(a1 + 32), __p);
    id v6 = v8 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446210;
    BOOL v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[MP] Removed new cloud magic settings for %{public}s", buf, 0xCu);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_10049F7E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10049F808(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (id)qword_100A19ED8;
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      sub_100474E18(*(void *)(a1 + 32), __p);
      sub_10076DA98();
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(*(void *)(a1 + 32), __p);
    id v6 = v8 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446210;
    BOOL v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[MP] Removed cloud info settings for %{public}s", buf, 0xCu);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_10049F92C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10049F94C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return sub_10049C64C(a1 - 8, a2, a3);
}

void sub_10049F954(uint64_t a1, int a2, const std::string *a3)
{
  char v6 = sub_1004962BC();
  v7 = qword_100A19ED8;
  BOOL v8 = os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      v9 = "Signed in";
      if (!a2) {
        v9 = "Not Signed in";
      }
      BOOL v10 = a3;
      if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0) {
        BOOL v10 = (const std::string *)a3->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136446723;
      *(void *)&uint8_t buf[4] = v9;
      *(_WORD *)&buf[12] = 2160;
      *(void *)&buf[14] = 1752392040;
      __int16 v17 = 2081;
      BOOL v18 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Received Cloud Sign in status as %{public}s for %{private, mask.hash}s", buf, 0x20u);
    }
    *(unsigned char *)(a1 + 241) = a2;
    if (a2)
    {
      std::string::operator=((std::string *)(a1 + 216), a3);
      (*(void (**)(void))(**(void **)(a1 + 168) + 16))(*(void *)(a1 + 168));
      if (*(_OWORD *)(a1 + 49) != 0)
      {
        *(void *)std::string buf = 0;
        *(void *)&buf[8] = 0;
        sub_10003AED0((uint64_t)buf, a1 + 104);
        uint64_t v11 = *(void *)(a1 + 176);
        uint64_t v12 = *(void *)(a1 + 184);
        sub_10003AFB4((uint64_t)buf);
        if (v11 == v12 && !*(unsigned char *)(a1 + 240)) {
          (*(void (**)(void))(**(void **)(a1 + 168) + 32))(*(void *)(a1 + 168));
        }
      }
      sub_10049FBFC(a1);
    }
    else
    {
      sub_100496CE0(a1, 0);
    }
    sub_10049FD24(a1);
    if (qword_1009FB068 != -1) {
      dispatch_once(&qword_1009FB068, &stru_1009AFF28);
    }
    uint64_t v13 = qword_1009FB060;
    int v14 = *(unsigned __int8 *)(a1 + 241);
    if (*(char *)(a1 + 239) < 0) {
      sub_10003B098(&__p, *(void **)(a1 + 216), *(void *)(a1 + 224));
    }
    else {
      std::string __p = *(std::string *)(a1 + 216);
    }
    sub_10026F1A0(v13, v14 != 0, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else if (v8)
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "cloudSignStatusChanged, Magic Pairing not supported", buf, 2u);
  }
}

void sub_10049FBD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10049FBFC(uint64_t a1)
{
  uint64_t v2 = qword_100A19ED8;
  if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 245);
    *(_DWORD *)std::string buf = 67109120;
    int v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Resync Local Records to Cloud, in-progress - %d", buf, 8u);
  }
  if (!*(unsigned char *)(a1 + 245))
  {
    if (*(void *)(a1 + 208))
    {
      *(unsigned char *)(a1 + 245) = 1;
      dispatch_time_t v4 = dispatch_time(0, 120000000000);
      id v5 = *(NSObject **)(a1 + 208);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1004A2960;
      block[3] = &unk_100997528;
      block[4] = a1;
      dispatch_after(v4, v5, block);
    }
  }
}

void sub_10049FD24(uint64_t a1)
{
  CFStringRef v1 = @"SignedOut";
  if (!*(unsigned char *)(a1 + 241))
  {
    CFStringRef v4 = 0;
    goto LABEL_15;
  }
  int v3 = (const char *)(a1 + 216);
  if (*(char *)(a1 + 239) < 0)
  {
    if (!*(void *)(a1 + 224))
    {
LABEL_14:
      CFStringRef v4 = 0;
      CFStringRef v1 = @"SignedIn";
      goto LABEL_15;
    }
    int v3 = *(const char **)v3;
  }
  else if (!*(unsigned char *)(a1 + 239))
  {
    goto LABEL_14;
  }
  CFStringRef v5 = CFStringCreateWithCString(0, v3, 0x8000100u);
  if (v5) {
    CFStringRef v4 = v5;
  }
  else {
    CFStringRef v4 = 0;
  }
  if (*(unsigned char *)(a1 + 241)) {
    CFStringRef v1 = @"SignedIn";
  }
LABEL_15:
  CFPreferencesSetAppValue(@"SignInstatus", v1, @"com.apple.BTServer");
  CFPreferencesSetAppValue(@"CloudAccountID", v4, @"com.apple.BTServer");
  CFPreferencesAppSynchronize(@"com.apple.BTServer");
  if (v4)
  {
    CFRelease(v4);
  }
}

void sub_10049FE20(uint64_t a1, int a2, const std::string *a3)
{
}

void sub_10049FE28(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  *a2 = *(unsigned char *)(a1 + 241);
  CFStringRef v5 = (_OWORD *)(a1 + 216);
  if (*(char *)(a1 + 239) < 0)
  {
    sub_10003B098(v8, *(void **)(a1 + 216), *(void *)(a1 + 224));
  }
  else
  {
    *(_OWORD *)int v8 = *v5;
    *(void *)&v8[16] = *(void *)(a1 + 232);
  }
  if (*(char *)(a3 + 23) < 0) {
    operator delete(*(void **)a3);
  }
  *(_OWORD *)a3 = *(_OWORD *)v8;
  *(void *)(a3 + 16) = *(void *)&v8[16];
  char v6 = qword_100A19ED8;
  if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = "Signed in";
    if (!*(unsigned char *)(a1 + 241)) {
      v7 = "Not Signed in";
    }
    if (*(char *)(a1 + 239) < 0) {
      CFStringRef v5 = *(_OWORD **)v5;
    }
    *(_DWORD *)int v8 = 136446723;
    *(void *)&v8[4] = v7;
    *(_WORD *)&v8[12] = 2160;
    *(void *)&v8[14] = 1752392040;
    *(_WORD *)&v8[22] = 2081;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Current Cloud Sign in status as %{public}s with login %{private, mask.hash}s", v8, 0x20u);
  }
}

uint64_t sub_10049FF74(uint64_t result, uint64_t a2, int a3)
{
  if (a3 > 4096)
  {
    uint64_t v5 = result;
    v50[0] = 0;
    v50[1] = 0;
    sub_10003AED0((uint64_t)v50, result + 104);
    char v6 = *(void ***)(v5 + 176);
    v7 = *(void ***)(v5 + 184);
    if (v6 == v7) {
      return sub_10003AFB4((uint64_t)v50);
    }
    while (1)
    {
      int v8 = *v6;
      if (**v6 == a2) {
        break;
      }
      if (++v6 == v7) {
        return sub_10003AFB4((uint64_t)v50);
      }
    }
    v9 = (id)qword_100A19ED8;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a2, v52);
      BOOL v10 = v53 >= 0 ? v52 : *(uint8_t **)v52;
      uint64_t v11 = *(unsigned char *)(v5 + 242) ? "in" : "not in";
      *(_DWORD *)std::string buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = a3;
      *(_WORD *)&buf[8] = 2082;
      *(void *)&buf[10] = v10;
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Local Magic device info changed (%d) for device %{public}s with cloud sync is %{public}s progress", buf, 0x1Cu);
      if (v53 < 0) {
        operator delete(*(void **)v52);
      }
    }

    if (*(unsigned char *)(v5 + 242)) {
      return sub_10003AFB4((uint64_t)v50);
    }
    switch(a3)
    {
      case 4102:
        if ((sub_10047ECFC(a2) & 2) != 0)
        {
          __int16 v17 = (id)qword_100A19ED8;
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            sub_100474E18(a2, buf);
            BOOL v18 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
            *(_DWORD *)v52 = 136446210;
            *(void *)&v52[4] = v18;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Fake magic paired device %{public}s", v52, 0xCu);
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
          }

          int v19 = *((_DWORD *)v8 + 21);
          if (v19 != 1)
          {
            if (!v19)
            {
              sub_100475F84(a2, (uint64_t)buf);
              sub_1004776CC(a2, (uint64_t)buf, 0);
              if ((buf[23] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
              sub_1004983FC((uint64_t *)(v5 + 176), a2);
              uint64_t v20 = sub_100370758();
              (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 104))(v20, a2);
            }
            return sub_10003AFB4((uint64_t)v50);
          }
          if (qword_1009F80A0 != -1) {
            dispatch_once(&qword_1009F80A0, &stru_1009AFEC8);
          }
          if (!sub_1002898E0((uint64_t)off_1009F8098, (_DWORD *)a2)) {
            return sub_10003AFB4((uint64_t)v50);
          }
          BOOL v27 = v8[3] != 0x101010101010101 || v8[4] != 0x101010101010101;
          v8[1] = 0x101010101010101;
          v8[2] = 0x101010101010101;
          *((unsigned char *)v8 + 77) = 0;
          __int16 v28 = *(_WORD *)(*v8 + 132);
          *(_DWORD *)((char *)v8 + 78) = *(_DWORD *)(*v8 + 128);
          *((_WORD *)v8 + 41) = v28;
          v8[3] = 0x101010101010101;
          v8[4] = 0x101010101010101;
          if (*(unsigned char *)(v5 + 48)
            && ((unint64_t)*((unsigned __int8 *)v8 + 78) << 40) | ((unint64_t)*((unsigned __int8 *)v8 + 79) << 32) | ((unint64_t)*((unsigned __int8 *)v8 + 80) << 24) | ((unint64_t)*((unsigned __int8 *)v8 + 81) << 16) | ((unint64_t)*((unsigned __int8 *)v8 + 82) << 8) | *((unsigned __int8 *)v8 + 83))
          {
            uint64_t v29 = sub_100019878();
            v41[0] = _NSConcreteStackBlock;
            v41[1] = 3221225472;
            v41[2] = sub_1004A0980;
            v41[3] = &unk_100997528;
            v41[4] = v8;
            sub_100013018(v29, v41);
          }
          if (!v27) {
            return sub_10003AFB4((uint64_t)v50);
          }
        }
        else
        {
          if (*((_DWORD *)v8 + 21)) {
            return sub_10003AFB4((uint64_t)v50);
          }
          if ((sub_10047ECFC(a2) & 2) != 0)
          {
            if (qword_1009F80A0 != -1) {
              dispatch_once(&qword_1009F80A0, &stru_1009AFEC8);
            }
            if (!sub_10028AD00((uint64_t)off_1009F8098, a2)) {
              return sub_10003AFB4((uint64_t)v50);
            }
          }
          if (qword_1009F80A0 != -1) {
            dispatch_once(&qword_1009F80A0, &stru_1009AFEC8);
          }
          if (sub_1002898E0((uint64_t)off_1009F8098, (_DWORD *)a2)) {
            return sub_10003AFB4((uint64_t)v50);
          }
          uint64_t v12 = (id)qword_100A19ED8;
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            sub_100474E18(a2, buf);
            uint64_t v13 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
            *(_DWORD *)v52 = 136446210;
            *(void *)&v52[4] = v13;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Seems like genuine magic paired device %{public}s, needs to be synced", v52, 0xCu);
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
          }
        }
        break;
      case 4099:
        __dst[0] = 0;
        BOOL v14 = sub_10047D4F0(a2, __dst);
        if (HIDWORD(__dst[0]) == -1 && v14)
        {
          v16 = (id)qword_100A19ED8;
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            sub_1004A82EC((unsigned __int8 *)(a2 + 128), v52);
            v30 = v53 >= 0 ? v52 : *(uint8_t **)v52;
            *(_DWORD *)std::string buf = 136446722;
            *(void *)&uint8_t buf[4] = v30;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = __dst[0];
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = HIDWORD(__dst[0]);
            _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Dropping iCloud update for DID extended supported feature bits version 2, address: %{public}s, extended supported feature bits I1: 0x%x, I2: 0x%x", buf, 0x18u);
            if (v53 < 0) {
              operator delete(*(void **)v52);
            }
          }

          return sub_10003AFB4((uint64_t)v50);
        }
        break;
      case 4098:
        sub_100475EE0(a2, (uint64_t)buf);
        if ((buf[23] & 0x80000000) != 0)
        {
          uint64_t v21 = *(void *)&buf[8];
          operator delete(*(void **)buf);
          if (!v21) {
            goto LABEL_58;
          }
        }
        else if (!buf[23])
        {
LABEL_58:
          int v48 = 1;
          int v49 = 0;
          uint64_t v47 = 0;
          if (sub_10047B7A8(a2, &v49, (_DWORD *)&v47 + 1, &v47, &v48))
          {
            v22 = +[CBProductInfo productInfoWithProductID:v47];
            unint64_t v23 = [v22 productName];

            if (v23)
            {
              v24 = (id)qword_100A19ED8;
              if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
              {
                __int16 v25 = v52;
                sub_100474E18(a2, v52);
                if (v53 < 0) {
                  __int16 v25 = *(uint8_t **)v52;
                }
                if (*((char *)v8 + 111) < 0)
                {
                  sub_10003B098(__dst, (void *)v8[11], v8[12]);
                }
                else
                {
                  *(_OWORD *)__dst = *(_OWORD *)(v8 + 11);
                  uint64_t v46 = v8[13];
                }
                int v31 = SHIBYTE(v46);
                v32 = (void **)__dst[0];
                sub_100475EE0(a2, (uint64_t)__p);
                v33 = __dst;
                if (v31 < 0) {
                  v33 = v32;
                }
                v34 = __p;
                if (v44 < 0) {
                  v34 = (void **)__p[0];
                }
                *(_DWORD *)std::string buf = 136446722;
                *(void *)&uint8_t buf[4] = v25;
                *(_WORD *)&buf[12] = 2080;
                *(void *)&buf[14] = v33;
                *(_WORD *)&unsigned char buf[22] = 2080;
                *(void *)&buf[24] = v34;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Device name changed to default for %{public}s, Old Name: %s, New Name: %s", buf, 0x20u);
                if (v44 < 0) {
                  operator delete(__p[0]);
                }
                if (SHIBYTE(v46) < 0) {
                  operator delete(__dst[0]);
                }
                if (v53 < 0) {
                  operator delete(*(void **)v52);
                }
              }

              sub_10004191C(buf, (char *)[v23 utf8ValueSafe]);
              __dst[0] = 0;
              *(void *)v52 = 0;
              *(void *)&v52[8] = 0;
              sub_100026C30((uint64_t)__dst);
              *(void *)v52 = SLODWORD(__dst[0]);
              *(void *)&v52[8] = SWORD2(__dst[0]);
              sub_100476E14(a2, (uint64_t)buf, v52);
              if ((buf[23] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
            }
          }
        }
        v35 = (id)qword_100A19ED8;
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
          v36 = v52;
          sub_100474E18(a2, v52);
          if (v53 < 0) {
            v36 = *(uint8_t **)v52;
          }
          if (*((char *)v8 + 111) < 0)
          {
            sub_10003B098(__dst, (void *)v8[11], v8[12]);
          }
          else
          {
            *(_OWORD *)__dst = *(_OWORD *)(v8 + 11);
            uint64_t v46 = v8[13];
          }
          int v37 = SHIBYTE(v46);
          v38 = (void **)__dst[0];
          sub_100475EE0(a2, (uint64_t)__p);
          v39 = __dst;
          if (v37 < 0) {
            v39 = v38;
          }
          if (v44 >= 0) {
            v40 = __p;
          }
          else {
            v40 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136446722;
          *(void *)&uint8_t buf[4] = v36;
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = v39;
          *(_WORD *)&unsigned char buf[22] = 2080;
          *(void *)&buf[24] = v40;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Magic device name changed for %{public}s, Old Name: %s, New Name: %s", buf, 0x20u);
          if (v44 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v46) < 0) {
            operator delete(__dst[0]);
          }
          if (v53 < 0) {
            operator delete(*(void **)v52);
          }
        }

        sub_100475EE0(a2, (uint64_t)&__str);
        std::string::operator=((std::string *)(v8 + 11), &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        break;
    }
    if (*(_OWORD *)(v8 + 3) != 0 && *(_OWORD *)(v8 + 1) != 0) {
      sub_100498994(v5);
    }
    return sub_10003AFB4((uint64_t)v50);
  }
  return result;
}

void sub_1004A0848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (*(char *)(v42 - 105) < 0) {
    operator delete(*(void **)(v42 - 128));
  }

  sub_10003AFB4((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_1004A0980(uint64_t a1)
{
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009AFE88);
  }
  sub_1006D4BEC((uint64_t)off_1009F85C0, *(void *)(a1 + 32) + 77, *(void *)(a1 + 32) + 24);
  if (qword_1009F7ED0 != -1) {
    dispatch_once(&qword_1009F7ED0, &stru_1009AFEA8);
  }
  uint64_t v2 = qword_1009F7EC8;
  uint64_t v3 = *(void *)(a1 + 32);

  sub_1007071C4(v2, (unsigned __int8 *)(v3 + 77), v3 + 8);
}

void sub_1004A0A2C(uint64_t a1, int a2)
{
  CFStringRef v4 = qword_100A19ED8;
  if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(a1 + 244);
    *(_DWORD *)std::string buf = 67109376;
    int v10 = v5;
    __int16 v11 = 1024;
    int v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "deviceOnlineStatusChanged from [%d] to [%d]", buf, 0xEu);
  }
  char v6 = *(NSObject **)(a1 + 208);
  if (v6)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1004A0B48;
    v7[3] = &unk_100998A58;
    v7[4] = a1;
    char v8 = a2;
    dispatch_async(v6, v7);
  }
}

void sub_1004A0B48(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v2 + 244) && *(unsigned char *)(a1 + 40)) {
    sub_10049FBFC(*(void *)(a1 + 32));
  }
  *(unsigned char *)(v2 + 244) = *(unsigned char *)(a1 + 40);
}

void sub_1004A0B8C(uint64_t a1, int a2)
{
}

void sub_1004A0B94(uint64_t a1, uint64_t a2)
{
  if (a2 && *(unsigned char *)(a1 + 241) && (!*(unsigned char *)(a2 + 988) || (sub_100497A84(a1, a2) & 1) != 0))
  {
    CFStringRef v4 = (id)qword_100A19ED8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a2, __p);
      int v5 = v21 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136446210;
      unint64_t v23 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "updateAACPVersionInfo: Updating %{public}s", buf, 0xCu);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }

    sub_1004A82EC((unsigned __int8 *)(a2 + 128), __p);
    if (v21 >= 0) {
      char v6 = __p;
    }
    else {
      char v6 = (void **)__p[0];
    }
    v7 = +[NSString stringWithUTF8String:v6];
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    char v8 = +[CloudPairing sharedInstance];
    v9 = [v8 cloudClient];
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_1004A0EBC;
    v17[3] = &unk_1009AFCD8;
    id v10 = v7;
    id v18 = v10;
    uint64_t v19 = a2;
    [v9 deviceRecord:v10 completion:v17];

    __int16 v11 = +[CloudPairing sharedInstance];
    int v12 = [v11 cloudClient];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_1004A163C;
    v15[3] = &unk_1009AFD40;
    id v13 = v10;
    id v16 = v13;
    [v12 deviceSupportInformationRecord:v13 completion:v15];
  }
  else
  {
    BOOL v14 = qword_100A19ED8;
    if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEBUG)) {
      sub_10076DAE8(a1, v14);
    }
  }
}

void sub_1004A0E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  _Unwind_Resume(a1);
}

void sub_1004A0EBC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
      sub_10076DC8C();
    }
LABEL_4:

    goto LABEL_5;
  }
  unint64_t v7 = sub_1006ADA24(*(void **)(a1 + 32));
  if (!v7)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
      sub_10076DB64();
    }
    goto LABEL_4;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AFE48);
  }
  uint64_t v8 = sub_100030F10((uint64_t)off_1009F7EF8, v7, 0);
  if (!v8)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
      sub_10076DB98();
    }
    goto LABEL_4;
  }
  v9 = qword_100A19ED8;
  BOOL v10 = os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v10)
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "updateAACPVersionInfo: updating pid/vid for cloudDevice", buf, 2u);
    }
    *(_DWORD *)std::string buf = 0;
    LODWORD(v32) = 0;
    LODWORD(__p[0]) = 0;
    LODWORD(v35) = 0;
    if (sub_10047B7A8(*(void *)(a1 + 40), buf, &v32, __p, &v35))
    {
      __int16 v11 = +[NSString stringWithFormat:@"%u", LODWORD(__p[0])];
      [v5 setProductID:v11];

      int v12 = +[NSString stringWithFormat:@"%u", v32];
      [v5 setVendorID:v12];
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR))
    {
      sub_10076DC58();
    }
LABEL_28:
    v32 = 0;
    v33 = 0;
    uint64_t v34 = 0;
    if (sub_10047FF14(v8, (uint64_t)&v32))
    {
      if (qword_1009F80A0 != -1) {
        dispatch_once(&qword_1009F80A0, &stru_1009AFEC8);
      }
      id v13 = off_1009F8098;
      memset(v31, 0, sizeof(v31));
      sub_1002B3390((char *)v31, v32, v33, 0xAAAAAAAAAAAAAAABLL * (((char *)v33 - (char *)v32) >> 3));
      LODWORD(v13) = sub_10029E064((uint64_t)v13, v31, 1u);
      *(void *)std::string buf = v31;
      sub_100051568((void ***)buf);
      if (v13)
      {
        BOOL v14 = (void *)v32 + 3;
        if (*((char *)v32 + 47) < 0) {
          BOOL v14 = (void *)*v14;
        }
        v15 = +[NSString stringWithUTF8String:v14];
        [v5 setModelNumber:v15];
      }
      if (qword_1009F80A0 != -1) {
        dispatch_once(&qword_1009F80A0, &stru_1009AFEC8);
      }
      id v16 = off_1009F8098;
      memset(v30, 0, sizeof(v30));
      sub_1002B3390((char *)v30, v32, v33, 0xAAAAAAAAAAAAAAABLL * (((char *)v33 - (char *)v32) >> 3));
      LODWORD(v16) = sub_10029E064((uint64_t)v16, v30, 2u);
      *(void *)std::string buf = v30;
      sub_100051568((void ***)buf);
      if (v16)
      {
        __int16 v17 = v32 + 3;
        if (*((char *)v32 + 71) < 0) {
          __int16 v17 = *(long long **)v17;
        }
        id v18 = +[NSString stringWithUTF8String:v17];
        [v5 setManufacturer:v18];
      }
      uint64_t v19 = (id)qword_100A19ED8;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(v8, __p);
        if (v37 >= 0) {
          uint64_t v20 = __p;
        }
        else {
          uint64_t v20 = (void **)__p[0];
        }
        id v21 = [v5 vendorID];
        id v22 = [v5 productID];
        unint64_t v23 = [v5 modelNumber];
        v24 = [v5 manufacturer];
        *(_DWORD *)std::string buf = 136447234;
        *(void *)&uint8_t buf[4] = v20;
        __int16 v39 = 2112;
        id v40 = v21;
        __int16 v41 = 2112;
        id v42 = v22;
        __int16 v43 = 2112;
        char v44 = v23;
        __int16 v45 = 2112;
        uint64_t v46 = v24;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "updateAACPVersionInfo: cloudDevice for %{public}s vendorId = %@ productId = %@ model = %@ manufacturer = %@ ", buf, 0x34u);

        if (v37 < 0) {
          operator delete(__p[0]);
        }
      }
      __int16 v25 = +[CloudPairing sharedInstance];
      int v26 = [v25 cloudClient];
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472;
      v28[2] = sub_1004A15DC;
      v28[3] = &unk_1009AFCB0;
      uint64_t v29 = 0;
      [v26 createDeviceRecord:v5 completion:v28];

      BOOL v27 = v29;
    }
    else
    {
      BOOL v27 = (id)qword_100A19ED8;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        sub_100474E18(v8, buf);
        sub_10076DC00();
      }
    }

    v35 = &v32;
    sub_100051568((void ***)&v35);

    goto LABEL_5;
  }
  if (v10)
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "updateAACPVersionInfo: Creating new cloudDevice", buf, 2u);
  }
  sub_100497774(v8);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  if (v5) {
    goto LABEL_28;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
    sub_10076DBCC();
  }
LABEL_5:
}

void sub_1004A14D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  *(void *)(v32 - 144) = &a21;
  sub_100051568((void ***)(v32 - 144));

  _Unwind_Resume(a1);
}

void sub_1004A15DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 32) && os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
    sub_10076DCF8();
  }
}

void sub_1004A163C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = v5;
  id v7 = a3;
  if (v7)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
      sub_10076DD64();
    }
  }
  else
  {
    unint64_t v8 = sub_1006ADA24(*(void **)(a1 + 32));
    if (v8)
    {
      if (qword_1009F7F00 != -1) {
        dispatch_once(&qword_1009F7F00, &stru_1009AFE48);
      }
      uint64_t v9 = sub_100030F10((uint64_t)off_1009F7EF8, v8, 0);
      if (v9)
      {
        if (!v5)
        {
          BOOL v10 = qword_100A19ED8;
          if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "updateAACPVersionInfo: Creating new deviceSupportInformation", buf, 2u);
          }
          id v6 = [objc_alloc((Class)BTCloudDeviceSupportInformation) initWithBluetoothAddress:*(void *)(a1 + 32)];
        }
        *(void *)std::string buf = 0;
        id v40 = 0;
        uint64_t v41 = 0;
        if (sub_10047FF14(v9, (uint64_t)buf))
        {
          if (qword_1009F80A0 != -1) {
            dispatch_once(&qword_1009F80A0, &stru_1009AFEC8);
          }
          __int16 v11 = off_1009F8098;
          memset(v37, 0, sizeof(v37));
          sub_1002B3390((char *)v37, *(long long **)buf, v40, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v40 - *(void *)buf) >> 3));
          LODWORD(v11) = sub_10029E064((uint64_t)v11, v37, 3u);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
          sub_100051568((void ***)&__p);
          if (v11)
          {
            int v12 = (void *)(*(void *)buf + 72);
            if (*(char *)(*(void *)buf + 95) < 0) {
              int v12 = (void *)*v12;
            }
            id v13 = +[NSString stringWithUTF8String:v12];
            [v6 setCaseSerialNumber:v13];
          }
          if (qword_1009F80A0 != -1) {
            dispatch_once(&qword_1009F80A0, &stru_1009AFEC8);
          }
          BOOL v14 = off_1009F8098;
          memset(v36, 0, sizeof(v36));
          sub_1002B3390((char *)v36, *(long long **)buf, v40, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v40 - *(void *)buf) >> 3));
          LODWORD(v14) = sub_10029E064((uint64_t)v14, v36, 6u);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
          sub_100051568((void ***)&__p);
          if (v14)
          {
            v15 = (void *)(*(void *)buf + 144);
            if (*(char *)(*(void *)buf + 167) < 0) {
              v15 = (void *)*v15;
            }
            id v16 = +[NSString stringWithUTF8String:v15];
            [v6 setHardwareVersion:v16];
          }
          if (qword_1009F80A0 != -1) {
            dispatch_once(&qword_1009F80A0, &stru_1009AFEC8);
          }
          __int16 v17 = off_1009F8098;
          memset(v35, 0, sizeof(v35));
          sub_1002B3390((char *)v35, *(long long **)buf, v40, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v40 - *(void *)buf) >> 3));
          LODWORD(v17) = sub_10029E064((uint64_t)v17, v35, 8u);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
          sub_100051568((void ***)&__p);
          if (v17)
          {
            id v18 = (void *)(*(void *)buf + 192);
            if (*(char *)(*(void *)buf + 215) < 0) {
              id v18 = (void *)*v18;
            }
            uint64_t v19 = +[NSString stringWithUTF8String:v18];
            [v6 setLeftBudSerialNumber:v19];
          }
          if (qword_1009F80A0 != -1) {
            dispatch_once(&qword_1009F80A0, &stru_1009AFEC8);
          }
          uint64_t v20 = off_1009F8098;
          memset(v34, 0, sizeof(v34));
          sub_1002B3390((char *)v34, *(long long **)buf, v40, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v40 - *(void *)buf) >> 3));
          LODWORD(v20) = sub_10029E064((uint64_t)v20, v34, 9u);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
          sub_100051568((void ***)&__p);
          if (v20)
          {
            id v21 = (void *)(*(void *)buf + 216);
            if (*(char *)(*(void *)buf + 239) < 0) {
              id v21 = (void *)*v21;
            }
            id v22 = +[NSString stringWithUTF8String:v21];
            [v6 setRightBudSerialNumber:v22];
          }
          if (qword_1009F80A0 != -1) {
            dispatch_once(&qword_1009F80A0, &stru_1009AFEC8);
          }
          unint64_t v23 = off_1009F8098;
          memset(v33, 0, sizeof(v33));
          sub_1002B3390((char *)v33, *(long long **)buf, v40, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v40 - *(void *)buf) >> 3));
          LODWORD(v23) = sub_10029E064((uint64_t)v23, v33, 0xAu);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
          sub_100051568((void ***)&__p);
          if (v23)
          {
            v24 = (void *)(*(void *)buf + 240);
            if (*(char *)(*(void *)buf + 263) < 0) {
              v24 = (void *)*v24;
            }
            __int16 v25 = +[NSString stringWithUTF8String:v24];
            [v6 setBudsFirmwareVersion:v25];
          }
          memset(&__p, 0, sizeof(__p));
          if (sub_100480604(v9, &__p))
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            BOOL v27 = +[NSString stringWithUTF8String:p_p];
            [v6 setAncAssetVersion:v27];
          }
          __int16 v28 = (id)qword_100A19ED8;
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            sub_100474E18(v9, v42);
            uint64_t v29 = v43 >= 0 ? v42 : (void **)v42[0];
            *(_DWORD *)char v44 = 136446210;
            *(void *)&v44[4] = v29;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "updateAACPVersionInfo: Writing cloud record for %{public}s", v44, 0xCu);
            if (v43 < 0) {
              operator delete(v42[0]);
            }
          }

          +[CloudPairing sharedInstance];
          if (v5) {
            v30 = {;
          }
            int v31 = [v30 cloudClient];
            [v31 modifyDeviceSupportInformationRecord:v6 completion:&stru_1009AFD18];
          }
          else {
            v30 = {;
          }
            int v31 = [v30 cloudClient];
            [v31 createDeviceSupportInformationRecord:v6 completion:&stru_1009AFCF8];
          }

          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          uint64_t v32 = (id)qword_100A19ED8;
          if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          {
            sub_100474E18(v9, &__p);
            sub_10076DC00();
          }
        }
        *(void *)char v44 = buf;
        sub_100051568((void ***)v44);
      }
      else if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR))
      {
        sub_10076DB98();
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR))
    {
      sub_10076DB64();
    }
  }
}

void sub_1004A1D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  std::string __p = &a30;
  sub_100051568((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_1004A1E48(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2 && os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
    sub_10076DDD0();
  }
}

void sub_1004A1EA0(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2 && os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
    sub_10076DE3C();
  }
}

void sub_1004A1EF8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = (id)qword_100A19ED8;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a2, __p);
      CFStringRef v4 = v13 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136446210;
      v15 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "updateCaseInfo: Updating %{public}s", buf, 0xCu);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }

    sub_1004A82EC((unsigned __int8 *)(a2 + 128), __p);
    if (v13 >= 0) {
      id v5 = __p;
    }
    else {
      id v5 = (void **)__p[0];
    }
    id v6 = +[NSString stringWithUTF8String:v5];
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    id v7 = +[CloudPairing sharedInstance];
    unint64_t v8 = [v7 cloudClient];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1004A2118;
    v10[3] = &unk_1009AFD40;
    id v9 = v6;
    id v11 = v9;
    [v8 deviceSupportInformationRecord:v9 completion:v10];
  }
}

void sub_1004A20BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  _Unwind_Resume(a1);
}

void sub_1004A2118(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = v5;
  id v7 = a3;
  if (v7)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
      sub_10076DF00();
    }
    goto LABEL_34;
  }
  if (!v5)
  {
    unint64_t v8 = qword_100A19ED8;
    if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "updateCaseInfo: Creating new deviceSupportInformation", buf, 2u);
    }
    id v6 = [objc_alloc((Class)BTCloudDeviceSupportInformation) initWithBluetoothAddress:*(void *)(a1 + 32)];
  }
  id v9 = [v6 bluetoothAddress];
  unint64_t v10 = sub_1006ADA24(v9);

  if (v10)
  {
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AFE48);
    }
    uint64_t v11 = sub_100030F10((uint64_t)off_1009F7EF8, v10, 0);
    if (v11)
    {
      int v12 = v23;
      uint64_t v24 = 0;
      long long v22 = 0u;
      *(_OWORD *)unint64_t v23 = 0u;
      *(_OWORD *)std::string buf = 0u;
      sub_10004191C(v23, "");
      if (!sub_100480790(v11, (uint64_t)buf))
      {
        BOOL v14 = (id)qword_100A19ED8;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          sub_100474E18(v11, v27);
          sub_10076DEA8();
        }
        goto LABEL_32;
      }
      char v13 = +[NSString stringWithFormat:@"%llu", (void)v22];
      [v6 setCaseFirmwareVersion:v13];

      if (SHIBYTE(v24) < 0)
      {
        if (v23[1] <= (void *)1)
        {
LABEL_21:
          id v16 = (id)qword_100A19ED8;
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            sub_100474E18(v11, __p);
            if (v26 >= 0) {
              __int16 v17 = __p;
            }
            else {
              __int16 v17 = (void **)__p[0];
            }
            id v18 = [v6 caseFirmwareVersion];
            uint64_t v19 = [v6 caseName];
            *(_DWORD *)BOOL v27 = 136446722;
            __int16 v28 = v17;
            __int16 v29 = 2112;
            v30 = v18;
            __int16 v31 = 2112;
            uint64_t v32 = v19;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "updateCaseInfo: Writing cloud record for %{public}s: caseVersion %@, caseName %@", v27, 0x20u);
            if (v26 < 0) {
              operator delete(__p[0]);
            }
          }
          +[CloudPairing sharedInstance];
          if (v5) {
            BOOL v14 = {;
          }
            uint64_t v20 = [v14 cloudClient];
            [v20 modifyDeviceSupportInformationRecord:v6 completion:&stru_1009AFD80];
          }
          else {
            BOOL v14 = {;
          }
            uint64_t v20 = [v14 cloudClient];
            [v20 createDeviceSupportInformationRecord:v6 completion:&stru_1009AFD60];
          }

LABEL_32:
          if (SHIBYTE(v24) < 0) {
            operator delete(v23[0]);
          }
          goto LABEL_34;
        }
        int v12 = (void **)v23[0];
      }
      else if (HIBYTE(v24) <= 1u)
      {
        goto LABEL_21;
      }
      v15 = +[NSString stringWithUTF8String:v12];
      [v6 setCaseName:v15];

      goto LABEL_21;
    }
  }
LABEL_34:
}

void sub_1004A24D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a20 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1004A25A0(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2 && os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
    sub_10076DF6C();
  }
}

void sub_1004A25F8(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2 && os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
    sub_10076DFD8();
  }
}

void sub_1004A2650(uint64_t a1)
{
  char v2 = sub_1004962BC();
  id v3 = qword_100A19ED8;
  BOOL v4 = os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "UpdateCloudDeviceInformation triggered", (uint8_t *)__p, 2u);
    }
    if (*(_OWORD *)(a1 + 49) == 0)
    {
      id v9 = qword_100A19ED8;
      if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "UpdateCloudDeviceInformation trigger, no master key found, pull from cloud", (uint8_t *)__p, 2u);
      }
      (*(void (**)(void))(**(void **)(a1 + 168) + 16))(*(void *)(a1 + 168));
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
      sub_10003AED0((uint64_t)__p, a1 + 104);
      uint64_t v5 = *(void *)(a1 + 176);
      uint64_t v6 = *(void *)(a1 + 184);
      sub_10003AFB4((uint64_t)__p);
      if (v5 == v6 && !*(unsigned char *)(a1 + 240))
      {
        unint64_t v10 = qword_100A19ED8;
        if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "UpdateCloudDeviceInformation triggers, Master key is available but no Magic Paired Devices. Let's fetch if any available.", (uint8_t *)__p, 2u);
        }
        (*(void (**)(void))(**(void **)(a1 + 168) + 32))(*(void *)(a1 + 168));
      }
      else
      {
        v15[0] = 0;
        v15[1] = 0;
        sub_10003AED0((uint64_t)v15, a1 + 104);
        for (i = *(uint64_t **)(a1 + 176); i != *(uint64_t **)(a1 + 184); ++i)
        {
          uint64_t v8 = *i;
          if (*(_DWORD *)(*i + 84) != 1 && *(_OWORD *)(v8 + 24) != 0 && *(_OWORD *)(v8 + 8) != 0)
          {
            uint64_t v11 = (id)qword_100A19ED8;
            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
            {
              sub_100474E18(*(void *)v8, __p);
              if (v14 >= 0) {
                int v12 = __p;
              }
              else {
                int v12 = (void **)__p[0];
              }
              *(_DWORD *)std::string buf = 136446210;
              __int16 v17 = v12;
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Local device info for device %{public}s needs to be pushed again", buf, 0xCu);
              if (v14 < 0) {
                operator delete(__p[0]);
              }
            }

            goto LABEL_30;
          }
        }
        if (!*(unsigned char *)(a1 + 243)) {
          goto LABEL_31;
        }
LABEL_30:
        *(unsigned char *)(a1 + 243) = 0;
        sub_100498994(a1);
LABEL_31:
        sub_10003AFE8((uint64_t)v15);
        sub_10003AFB4((uint64_t)v15);
      }
    }
  }
  else if (v4)
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Skipping UpdateCloudDeviceInformation for Magic Pairing, not supported on this platform", (uint8_t *)__p, 2u);
  }
}

void sub_1004A2938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);

  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004A2960(uint64_t a1)
{
  CFStringRef v1 = *(unsigned __int8 **)(a1 + 32);
  char v2 = qword_100A19ED8;
  if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = v1[241];
    int v4 = v1[244];
    v5[0] = 67109376;
    v5[1] = v3;
    __int16 v6 = 1024;
    int v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Initiate Sync, Signed in - %d, Network available - %d", (uint8_t *)v5, 0xEu);
  }
  if (v1[241] && v1[244]) {
    sub_1004A2650((uint64_t)v1);
  }
  v1[245] = 0;
}

void sub_1004A2A34(uint64_t a1, uint64_t a2)
{
  if (sub_1004962BC() && *(unsigned char *)(a1 + 240))
  {
    if (!a2 || !*(unsigned char *)(a1 + 241)) {
      return;
    }
    uint64_t v4 = *(void *)a2;
    uint64_t v5 = (id)qword_100A19ED8;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(v4, &v81);
      __int16 v6 = (v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &v81
         : (std::string *)v81.__r_.__value_.__r.__words[0];
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "writeMagicPairingSettingToCloud Update cloud device information, write magic pairing setting to cloud for %{public}s", buf, 0xCu);
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v81.__r_.__value_.__l.__data_);
      }
    }

    int v75 = 1;
    int v76 = 0;
    uint64_t v74 = 0;
    if (!sub_10047B7A8(v4, &v76, (_DWORD *)&v74 + 1, &v74, &v75))
    {
      int v7 = (id)qword_100A19ED8;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(v4, buf);
        uint64_t v8 = v80 >= 0 ? buf : *(unsigned char **)buf;
        LODWORD(v81.__r_.__value_.__l.__data_) = 136446722;
        *(std::string::size_type *)((char *)v81.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
        WORD2(v81.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&v81.__r_.__value_.__r.__words[1] + 6) = v74;
        WORD1(v81.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v81.__r_.__value_.__r.__words[2]) = HIDWORD(v74);
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "writeMagicPairingSettingToCloud Error fetching DeviceId for magic paired device %{public}s with pid: %x, vid: %x", (uint8_t *)&v81, 0x18u);
        if (v80 < 0) {
          operator delete(*(void **)buf);
        }
      }
    }
    int v9 = sub_10048741C(v4);
    if (v9 == 2) {
      unsigned __int8 v10 = 2;
    }
    else {
      unsigned __int8 v10 = v9 == 1;
    }
    if (sub_100487464(v4)) {
      v10 |= 4u;
    }
    uint64_t v11 = (id)qword_100A19ED8;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(v4, &v81);
      int v12 = SHIBYTE(v81.__r_.__value_.__r.__words[2]);
      std::string::size_type v13 = v81.__r_.__value_.__r.__words[0];
      int v14 = sub_100487464(v4);
      v15 = &v81;
      id v16 = "disabled";
      if (v12 < 0) {
        v15 = (std::string *)v13;
      }
      if (v14) {
        id v16 = "Enabled";
      }
      *(_DWORD *)std::string buf = 136446466;
      *(void *)&uint8_t buf[4] = v15;
      __int16 v78 = 2080;
      v79 = v16;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "In Ear Detection  state for device  %{public}s is %s", buf, 0x16u);
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v81.__r_.__value_.__l.__data_);
      }
    }

    if (sub_100478B2C(v4, 14)) {
      v10 |= 8u;
    }
    if (sub_100478B2C(v4, 22)) {
      v10 |= 0x10u;
    }
    unsigned __int8 v69 = sub_10047C698(v4);
    unsigned int v17 = sub_10047C698(v4);
    int v68 = sub_100487714(v4);
    char v67 = sub_100487714(v4);
    char v66 = sub_1004875AC(v4);
    char v64 = sub_1004875AC(v4);
    int v18 = sub_100478B2C(v4, 32);
    char v65 = sub_1004877EC(v4);
    char v63 = sub_10047ECFC(v4);
    if (v18) {
      int v19 = 64;
    }
    else {
      int v19 = 0;
    }
    int v62 = v19;
    int v20 = _os_feature_enabled_impl();
    if (v20)
    {
      id v21 = sub_100489828(v4);
      BOOL v22 = v21 == 0;

      if (v22)
      {
        v70 = 0;
      }
      else
      {
        id v23 = objc_alloc_init((Class)NSDateFormatter);
        uint64_t v24 = +[NSTimeZone localTimeZone];
        [v23 setTimeZone:v24];

        [v23 setDateFormat:@"yyyy-MM-dd'T'HH:mm:ss.SSSSSSSZZZZZ"];
        __int16 v25 = sub_100489828(v4);
        v70 = [v23 stringFromDate:v25];
      }
      if (sub_1004897E0(v4) != -1)
      {
        v71 = +[NSString stringWithFormat:@"%lu", sub_1004897E0(v4)];
LABEL_52:
        id v29 = objc_alloc((Class)BTMagicPairingSettings);
        sub_1004A82EC((unsigned __int8 *)(v4 + 128), &v81);
        if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v30 = &v81;
        }
        else {
          v30 = (std::string *)v81.__r_.__value_.__r.__words[0];
        }
        __int16 v31 = +[NSString stringWithUTF8String:v30];
        id v32 = [v29 initWithBluetoothAddress:v31];

        if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v81.__r_.__value_.__l.__data_);
        }
        v33 = +[NSString stringWithFormat:@"%u", HIDWORD(v74)];
        [v32 setVendorID:v33];

        uint64_t v34 = +[NSString stringWithFormat:@"%u", v74];
        [v32 setProductID:v34];

        v35 = +[NSData dataWithBytes:a1 + 49 length:16];
        [v32 setMasterKey:v35];

        v36 = +[NSData dataWithBytes:a1 + 65 length:16];
        [v32 setMasterHint:v36];

        char v37 = +[NSData dataWithBytes:a2 + 40 length:16];
        [v32 setAccessoryKey:v37];

        v38 = +[NSData dataWithBytes:a2 + 56 length:16];
        [v32 setAccessoryHint:v38];

        __int16 v39 = +[NSData dataWithBytes:a2 + 24 length:16];
        [v32 setEncryptionKey:v39];

        id v40 = +[NSData dataWithBytes:a2 + 8 length:16];
        [v32 setIrk:v40];

        uint64_t v41 = +[NSString stringWithFormat:@"%u", *(unsigned int *)(a2 + 72)];
        [v32 setRatchet:v41];

        id v42 = +[NSString stringWithFormat:@"%d", v10];
        [v32 setSettingsMask:v42];

        char v43 = +[NSString stringWithFormat:@"%d", (v17 >> 4) & 0xFF0 | v69];
        [v32 setButtonModes:v43];

        char v44 = +[NSString stringWithFormat:@"%u", sub_100489318(v4)];
        [v32 setColor:v44];

        __int16 v45 = +[NSString stringWithFormat:@"%d", 2];
        [v32 setVersion:v45];

        if (qword_1009F8090 != -1) {
          dispatch_once(&qword_1009F8090, &stru_1009AFEE8);
        }
        uint64_t v46 = +[NSString stringWithFormat:@"%u", sub_1004D6124((uint64_t)off_1009F8088, v4)];
        [v32 setSupportedServices:v46];

        uint64_t v47 = +[NSString stringWithFormat:@"%u", (32 * v68) & 0xE000 | ((v67 & 7) << 10) | ((v66 & 7) << 7) | v62 & 0xFFFFFFF1 | (4 * (v65 & 3)) | (2 * (v63 & 1))];
        [v32 setListeningServices:v47];

        int v48 = +[NSString stringWithFormat:@"%u", v64 & 0xF];
        [v32 setListeningServicesV2:v48];

        if (v20)
        {
          if (v71) {
            [v32 setOptimizedBatteryCharging:v71];
          }
          if (v70) {
            [v32 setOptimizedBatteryFullChargeDeadline:v70];
          }
        }
        unsigned int __val = 0;
        *(void *)std::string buf = 0;
        if (sub_10047D434(v4, &__val))
        {
          int v49 = qword_100A19ED8;
          if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(v81.__r_.__value_.__l.__data_) = 67109120;
            HIDWORD(v81.__r_.__value_.__r.__words[0]) = __val;
            _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "DID supported fetaure bits (version 1) is updated to 0x%x. Sync to iCloud", (uint8_t *)&v81, 8u);
          }
          std::to_string(&v81, __val);
          if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v50 = &v81;
          }
          else {
            v50 = (std::string *)v81.__r_.__value_.__r.__words[0];
          }
          v51 = +[NSString stringWithUTF8String:v50];
          [v32 setDeviceIDFeatureBitsV1:v51];

          if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v81.__r_.__value_.__l.__data_);
          }
          BOOL v52 = sub_10047D4F0(v4, buf);
          if (*(_DWORD *)&buf[4] != -1 && v52)
          {
            v54 = qword_100A19ED8;
            if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(v81.__r_.__value_.__l.__data_) = 67109376;
              HIDWORD(v81.__r_.__value_.__r.__words[0]) = *(_DWORD *)buf;
              LOWORD(v81.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&v81.__r_.__value_.__r.__words[1] + 2) = *(_DWORD *)&buf[4];
              _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "DID extended supported fetaure bits (version 2) is updated to I1 0x%x I2 0x%x. Sync to iCloud", (uint8_t *)&v81, 0xEu);
            }
            std::to_string(&v81, *(unsigned int *)&buf[4] | ((unint64_t)*(unsigned int *)buf << 32));
            if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v55 = &v81;
            }
            else {
              v55 = (std::string *)v81.__r_.__value_.__r.__words[0];
            }
            v56 = +[NSString stringWithUTF8String:v55];
            [v32 setDeviceIDFeatureBitsV2:v56];

            if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v81.__r_.__value_.__l.__data_);
            }
          }
        }
        v57 = sub_100497774(v4);
        if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEBUG)) {
          sub_10076E0B8();
        }
        if (v57)
        {
          v58 = +[CloudPairing sharedInstance];
          v59 = [v58 cloudClient];
          [v59 createDeviceRecord:v57 completion:&stru_1009AFDA0];
        }
        if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEBUG)) {
          sub_10076E044();
        }
        v60 = +[CloudPairing sharedInstance];
        v61 = [v60 cloudClient];
        v72[0] = _NSConcreteStackBlock;
        v72[1] = 3221225472;
        v72[2] = sub_1004A384C;
        v72[3] = &unk_1009AFC68;
        v72[4] = v4;
        [v61 createMagicSettingsRecord:v32 completion:v72];

        return;
      }
    }
    else
    {
      v70 = 0;
    }
    v71 = 0;
    goto LABEL_52;
  }
  char v26 = (id)qword_100A19ED8;
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    int v27 = sub_1004962BC();
    __int16 v28 = "supported";
    if (v27) {
      __int16 v28 = "initialized";
    }
    LODWORD(v81.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v81.__r_.__value_.__r.__words + 4) = (std::string::size_type)v28;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "writeMagicPairingSettingToCloud, Magic Pairing not %s.", (uint8_t *)&v81, 0xCu);
  }
}

void sub_1004A35CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  if (*(char *)(v18 - 105) < 0) {
    operator delete(*(void **)(v18 - 128));
  }

  _Unwind_Resume(a1);
}

void sub_1004A37F4(id a1, NSError *a2)
{
  char v2 = a2;
  if (v2 && os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
    sub_10076E12C();
  }
}

void sub_1004A384C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
      sub_10076E198();
    }
  }
  else
  {
    uint64_t v4 = (id)qword_100A19ED8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(*(void *)(a1 + 32), __p);
      uint64_t v5 = v7 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136446210;
      int v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Magic Setting created cloud device %{public}s", buf, 0xCu);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_1004A3960(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004A3978(uint64_t a1, uint64_t a2, int a3)
{
  __int16 v6 = (id)qword_100A19ED8;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a2, __p);
    char v7 = v19 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446466;
    id v21 = v7;
    __int16 v22 = 1024;
    int v23 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Pairing Completed for device: %{public}s with result - %d", buf, 0x12u);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
  }

  if (!a3)
  {
    uint64_t v8 = +[CloudPairing sharedInstance];
    int v9 = [v8 cloudClient];
    sub_1004A82EC((unsigned __int8 *)(a2 + 128), __p);
    if (v19 >= 0) {
      unsigned __int8 v10 = __p;
    }
    else {
      unsigned __int8 v10 = (void **)__p[0];
    }
    uint64_t v11 = +[NSString stringWithUTF8String:v10];
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_1004A3CA0;
    v17[3] = &unk_1009AFC88;
    void v17[4] = a2;
    [v9 magicSettingsRecord:v11 completion:v17];

    if (v19 < 0) {
      operator delete(__p[0]);
    }

    int v12 = +[CloudPairing sharedInstance];
    std::string::size_type v13 = [v12 cloudClient];
    sub_1004A82EC((unsigned __int8 *)(a2 + 128), __p);
    if (v19 >= 0) {
      int v14 = __p;
    }
    else {
      int v14 = (void **)__p[0];
    }
    v15 = +[NSString stringWithUTF8String:v14];
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_1004A3FF8;
    v16[3] = &unk_1009AFDC0;
    v16[4] = a1;
    v16[5] = a2;
    [v13 deviceRecord:v15 completion:v16];

    if (v19 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1004A3C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1004A3CA0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  char v7 = v6;
  if (!v5 || v6)
  {
    id v16 = (id)qword_100A19ED8;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      sub_100474E18(*(void *)(a1 + 32), &__p);
      sub_10076E204();
    }
    goto LABEL_20;
  }
  uint64_t v8 = [v5 supportedServices];
  id v9 = [v8 length];

  if (v9)
  {
    unsigned __int8 v10 = (id)qword_100A19ED8;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(*(void *)(a1 + 32), &__p);
      uint64_t v11 = v24 >= 0 ? &__p : (long long *)__p;
      *(_DWORD *)std::string buf = 138412546;
      *(void *)&uint8_t buf[4] = v5;
      __int16 v26 = 2082;
      int v27 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[Pairing] fetched magic settings: %@ for device: %{public}s", buf, 0x16u);
      if (v24 < 0) {
        operator delete((void *)__p);
      }
    }

    for (int i = 0; i != 31; ++i)
    {
      std::string::size_type v13 = [v5 supportedServices];
      BOOL v14 = ([v13 integerValue] & (1 << i)) == 0;

      if (!v14)
      {
        uint64_t v15 = *(void *)(a1 + 32);
        *(void *)std::string buf = 0;
        long long __p = 0uLL;
        sub_100026C30((uint64_t)buf);
        *(void *)&long long __p = *(int *)buf;
        *((void *)&__p + 1) = *(__int16 *)&buf[4];
        sub_100477F4C(v15, 1 << i, 4, &__p, 1);
      }
    }
    id v16 = (id)qword_100A19ED8;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v17 = [v5 supportedServices];
      unsigned int v18 = [v17 intValue];
      if (qword_1009F8090 != -1) {
        dispatch_once(&qword_1009F8090, &stru_1009AFEE8);
      }
      int v19 = sub_1004D6124((uint64_t)off_1009F8088, *(void *)(a1 + 32));
      int v20 = [v5 version];
      unsigned int v21 = [v20 intValue];
      LODWORD(__p) = 67109632;
      DWORD1(__p) = v18;
      WORD4(__p) = 1024;
      *(_DWORD *)((char *)&__p + 10) = v19;
      HIWORD(__p) = 1024;
      unsigned int v23 = v21;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Cloud: Device service capability details: received service mask %x, device service mask after update %x, blob version %d", (uint8_t *)&__p, 0x14u);
    }
LABEL_20:
  }
}

void sub_1004A3F78(_Unwind_Exception *a1)
{
  id v6 = v3;

  _Unwind_Resume(a1);
}

void sub_1004A3FF8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = (id)qword_100A19ED8;
  id v9 = v8;
  if (!v5 || v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      sub_100474E18(*(void *)(a1 + 40), __p);
      sub_10076E254();
    }
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(*(void *)(a1 + 40), __p);
      unsigned __int8 v10 = v17 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 138412546;
      id v19 = v5;
      __int16 v20 = 2082;
      unsigned int v21 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[Pairing] fetched cloud record: %@ for device: %{public}s", buf, 0x16u);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
    }

    id v9 = [v5 bluetoothAddress];
    sub_10004191C(v14, (char *)[v9 UTF8String]);
    id v11 = [v5 nickname];
    sub_10004191C(v12, (char *)[v11 UTF8String]);
    (*(void (**)(uint64_t, void **, void **))(*(void *)v7 + 96))(v7, v14, v12);
    if (v13 < 0) {
      operator delete(v12[0]);
    }

    if (v15 < 0) {
      operator delete(v14[0]);
    }
  }
}

void sub_1004A41F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  _Unwind_Resume(a1);
}

void sub_1004A426C(uint64_t a1, uint64_t a2, int a3)
{
}

void sub_1004A4284(uint64_t a1, int a2)
{
  id v3 = qword_100A19ED8;
  if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Airplane mode is now %d", (uint8_t *)v4, 8u);
  }
}

uint64_t sub_1004A4334(uint64_t a1, int a2)
{
  uint64_t v4 = qword_100A19ED8;
  if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = "fail";
    if (a2) {
      id v5 = "success";
    }
    LODWORD(v10) = 136446210;
    *(void *)((char *)&v10 + 4) = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Device info upload status from cloud with status = %{public}s", (uint8_t *)&v10, 0xCu);
  }
  long long v10 = 0uLL;
  sub_10003AED0((uint64_t)&v10, a1 + 104);
  if (a2)
  {
    id v6 = *(uint64_t **)(a1 + 176);
    for (int i = *(uint64_t **)(a1 + 184); v6 != i; *(_DWORD *)(v8 + 84) = 1)
      uint64_t v8 = *v6++;
    *(unsigned char *)(a1 + 243) = 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
      sub_10076E2A4();
    }
    *(unsigned char *)(a1 + 243) = *(void *)(a1 + 176) == *(void *)(a1 + 184);
  }
  sub_1004984B4(a1);
  return sub_10003AFB4((uint64_t)&v10);
}

void sub_1004A4474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004A4490(uint64_t a1, int a2)
{
  return sub_1004A4334(a1 - 8, a2);
}

void sub_1004A4498(void *a1, char *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a3 + 23)) {
      goto LABEL_3;
    }
LABEL_23:
    if (a2[23] < 0)
    {
      sub_10003B098(__dst, *(void **)a2, *((void *)a2 + 1));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)a2;
      uint64_t v23 = *((void *)a2 + 2);
    }
    (*(void (**)(void *, void **))(*a1 + 104))(a1, __dst);
    if (SHIBYTE(v23) < 0) {
      operator delete(__dst[0]);
    }
    return;
  }
  if (!*(void *)(a3 + 8)) {
    goto LABEL_23;
  }
LABEL_3:
  int v6 = a2[23];
  __int16 v21 = 0;
  int v20 = 0;
  if (v6 < 0) {
    a2 = *(char **)a2;
  }
  if (!sub_1004A82DC((uint64_t)&v20, (unsigned __int8 *)a2))
  {
LABEL_32:
    if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
      sub_10076E2D8();
    }
    return;
  }
  if (!(_BYTE)v20)
  {
    uint64_t v15 = 1;
    while (v15 != 6)
    {
      if (*((unsigned __int8 *)&v20 + v15++))
      {
        if ((unint64_t)(v15 - 2) < 5) {
          goto LABEL_7;
        }
        goto LABEL_32;
      }
    }
    goto LABEL_32;
  }
LABEL_7:
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AFE48);
  }
  uint64_t v7 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v20, 0);
  uint64_t v8 = qword_100A19ED8;
  if (v7)
  {
    id v9 = (id)qword_100A19ED8;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(v7, __p);
      if (v19 >= 0) {
        long long v10 = __p;
      }
      else {
        long long v10 = (void **)__p[0];
      }
      id v11 = (void *)a3;
      if (*(char *)(a3 + 23) < 0) {
        id v11 = *(void **)a3;
      }
      *(_DWORD *)std::string buf = 136446466;
      __int16 v25 = v10;
      __int16 v26 = 2080;
      int v27 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Device's user-defined name changing for %{public}s, new nickname: %s", buf, 0x16u);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
    }

    sub_1004776CC(v7, a3, 0);
    __p[0] = 0;
    __p[1] = 0;
    sub_10003AED0((uint64_t)__p, (uint64_t)(a1 + 13));
    int v12 = (void *)a1[22];
    char v13 = (void *)a1[23];
    while (v12 != v13)
    {
      BOOL v14 = (void *)*v12;
      if (*(void *)*v12 == v7)
      {
        if (*(char *)(a3 + 23) < 0) {
          sub_10003B098(&v17, *(void **)a3, *(void *)(a3 + 8));
        }
        else {
          std::string v17 = *(std::string *)a3;
        }
        std::string::operator=((std::string *)(v14 + 11), &v17);
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v17.__r_.__value_.__l.__data_);
        }
        break;
      }
      ++v12;
    }
    sub_10003AFB4((uint64_t)__p);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR))
  {
    sub_10076E30C(v4 + 23, v4, v8);
  }
}

void sub_1004A47A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
}

void sub_1004A47F8(uint64_t a1, char *a2, uint64_t a3)
{
}

uint64_t sub_1004A4800(uint64_t a1, uint64_t a2)
{
  v35[0] = 0;
  v35[1] = 0;
  sub_10003AED0((uint64_t)v35, a1 + 104);
  __int16 v34 = 0;
  int v33 = 0;
  uint64_t v4 = (unsigned __int8 *)a2;
  if (*(char *)(a2 + 23) < 0) {
    uint64_t v4 = *(unsigned __int8 **)a2;
  }
  if (!sub_1004A82DC((uint64_t)&v33, v4)) {
    goto LABEL_56;
  }
  if (!(_BYTE)v33)
  {
    uint64_t v22 = 1;
    do
    {
      if (v22 == 6) {
        goto LABEL_56;
      }
    }
    while (!*((unsigned __int8 *)&v33 + v22++));
    if ((unint64_t)(v22 - 2) >= 5)
    {
LABEL_56:
      if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
        sub_10076E2D8();
      }
      return sub_10003AFB4((uint64_t)v35);
    }
  }
  v30 = 0;
  __int16 v31 = 0;
  uint64_t v32 = 0;
  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_1009AFE28);
  }
  sub_10060C508((uint64_t)off_1009F8760, (uint64_t **)&v30);
  id v5 = (uint64_t *)v30;
  if (v31 != v30)
  {
    while (1)
    {
      uint64_t v6 = *v5;
      sub_1004A82EC((unsigned __int8 *)(*v5 + 128), __p);
      int v7 = *(char *)(a2 + 23);
      int v8 = (char)v29;
      id v9 = __p[0];
      if ((v29 & 0x80u) == 0) {
        size_t v10 = v29;
      }
      else {
        size_t v10 = (size_t)__p[1];
      }
      if ((v29 & 0x80u) == 0) {
        id v11 = __p;
      }
      else {
        id v11 = (void **)__p[0];
      }
      if (v7 >= 0) {
        size_t v12 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        size_t v12 = *(void *)(a2 + 8);
      }
      if (v7 >= 0) {
        char v13 = (const void *)a2;
      }
      else {
        char v13 = *(const void **)a2;
      }
      if (v12 >= v10) {
        size_t v14 = v10;
      }
      else {
        size_t v14 = v12;
      }
      BOOL v15 = memcmp(v11, v13, v14) == 0;
      BOOL v16 = v12 == v10 && v15;
      if (v8 < 0)
      {
        operator delete(v9);
        if (v16)
        {
LABEL_30:
          for (int i = *(void ***)(a1 + 176); i != *(void ***)(a1 + 184); ++i)
          {
            if (**i == v6)
            {
              int v20 = (id)qword_100A19ED8;
              if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
              {
                sub_100474E18(v6, __p);
                __int16 v21 = (v29 & 0x80u) == 0 ? __p : (void **)__p[0];
                *(_DWORD *)std::string buf = 136446210;
                char v37 = v21;
                _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Magic Device do not set empty nickname - %{public}s", buf, 0xCu);
                if ((char)v29 < 0) {
                  operator delete(__p[0]);
                }
              }

              goto LABEL_49;
            }
          }
          unsigned int v18 = (id)qword_100A19ED8;
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            sub_100474E18(v6, __p);
            char v19 = (v29 & 0x80u) == 0 ? __p : (void **)__p[0];
            *(_DWORD *)std::string buf = 136446210;
            char v37 = v19;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Device nickname being set to empty for %{public}s", buf, 0xCu);
            if ((char)v29 < 0) {
              operator delete(__p[0]);
            }
          }

          sub_10004191C(__p, "");
          sub_1004776CC(v6, (uint64_t)__p, 0);
          if ((char)v29 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      else if (v16)
      {
        goto LABEL_30;
      }
LABEL_49:
      if (++v5 == v31) {
        goto LABEL_50;
      }
    }
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AFE48);
  }
  uint64_t v25 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v33, 0);
  if (v25)
  {
    __int16 v26 = (id)qword_100A19ED8;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(v25, __p);
      int v27 = (v29 & 0x80u) == 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136446210;
      char v37 = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Non-paired device nickname being set to empty for %{public}s", buf, 0xCu);
      if ((char)v29 < 0) {
        operator delete(__p[0]);
      }
    }

    sub_10004191C(__p, "");
    sub_1004776CC(v25, (uint64_t)__p, 0);
    if ((char)v29 < 0) {
      operator delete(__p[0]);
    }
  }
LABEL_50:
  if (v30)
  {
    __int16 v31 = (uint64_t *)v30;
    operator delete(v30);
  }
  return sub_10003AFB4((uint64_t)v35);
}

void sub_1004A4C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_1004A4CD0(uint64_t a1, uint64_t a2)
{
  return sub_1004A4800(a1 - 8, a2);
}

void sub_1004A4CD8(uint64_t a1, uint64_t a2)
{
  if (sub_1004962BC())
  {
    sub_10047609C(a2, (uint64_t)__p);
    if (v21 >= 0) {
      id v3 = __p;
    }
    else {
      id v3 = (void **)__p[0];
    }
    uint64_t v4 = +[NSString stringWithUTF8String:v3];
    if (SHIBYTE(v21) < 0) {
      operator delete(__p[0]);
    }
    if ([v4 hasSuffix:@" - Find My"])
    {
      id v5 = (id)qword_100A19ED8;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(a2, __p);
        uint64_t v6 = v21 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)std::string buf = 136446210;
        uint64_t v23 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Device has FM suffix: %{public}s", buf, 0xCu);
        if (SHIBYTE(v21) < 0) {
          operator delete(__p[0]);
        }
      }

      *(_DWORD *)std::string buf = *(_DWORD *)(a2 + 128);
      LOWORD(v23) = *(_WORD *)(a2 + 132);
      int v7 = +[NSData dataWithBytes:buf length:6];
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v21 = 0;
      sub_1004A82EC(buf, __p);
      int v8 = [v4 substringToIndex:[@" - Find My" length]];
      id v9 = objc_alloc_init((Class)SPOwnerInterface);
      size_t v10 = [v9 ownerSession];
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_1004A5024;
      v14[3] = &unk_1009AFDE8;
      id v11 = v9;
      id v15 = v11;
      id v16 = v10;
      uint64_t v19 = a2;
      id v12 = v8;
      id v17 = v12;
      id v18 = v4;
      id v13 = v10;
      [v13 fetchFindMyNetworkStatusForMACAddress:v7 completion:v14];

      if (SHIBYTE(v21) < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_1004A4F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  _Unwind_Resume(a1);
}

void sub_1004A5024(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = (id)qword_100A19ED8;
  int v7 = v6;
  if (v5)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      sub_100474E18(*(void *)(a1 + 64), __p);
      sub_10076E38C();
    }
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(*(void *)(a1 + 64), __p);
      int v8 = v16 >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)std::string buf = 136446466;
      id v18 = v8;
      __int16 v19 = 1024;
      int v20 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "FM Status for %{public}s device is: %d", buf, 0x12u);
      if (v16 < 0) {
        operator delete(*(void **)__p);
      }
    }

    if (a2 && *(void *)(a1 + 48))
    {
      id v9 = qword_100A19ED8;
      if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a1 + 48);
        uint64_t v10 = *(void *)(a1 + 56);
        *(_DWORD *)long long __p = 138412546;
        *(void *)&__p[4] = v10;
        __int16 v14 = 2112;
        uint64_t v15 = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Renaming '%@' -> '%@'", __p, 0x16u);
      }
      uint64_t v12 = *(void *)(a1 + 64);
      sub_10004191C(__p, (char *)[*(id *)(a1 + 48) UTF8String]);
      sub_1004776CC(v12, (uint64_t)__p, 1);
      if (v16 < 0) {
        operator delete(*(void **)__p);
      }
    }
  }
}

void sub_1004A5204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1004A524C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = sub_1004AF8EC();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1004A52DC;
  v7[3] = &unk_100998280;
  v7[4] = a1;
  void v7[5] = a2;
  int v8 = a3;
  sub_100013018(v6, v7);
}

void sub_1004A52DC(uint64_t a1)
{
}

void sub_1004A52EC(uint64_t a1, unsigned __int8 *a2, int a3)
{
  if (*(unsigned char *)(a1 + 241))
  {
    uint64_t v6 = (id)qword_100A19ED8;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18((uint64_t)a2, __p);
      int v7 = v41 >= 0 ? __p : *(unsigned char **)__p;
      int v8 = *(unsigned char *)(a1 + 242) ? "in" : "not in";
      *(_DWORD *)std::string buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = a3;
      *(_WORD *)char v43 = 2082;
      *(void *)&v43[2] = v7;
      __int16 v44 = 2082;
      __int16 v45 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Device info changed (%d) for device %{public}s with cloud sync is %{public}s progress", buf, 0x1Cu);
      if (v41 < 0) {
        operator delete(*(void **)__p);
      }
    }

    if (a3 > 4096)
    {
      v33[0] = 0;
      v33[1] = 0;
      sub_10003AED0((uint64_t)v33, a1 + 104);
      for (int i = *(unsigned __int8 ****)(a1 + 176); i != *(unsigned __int8 ****)(a1 + 184); ++i)
      {
        uint64_t v10 = *i;
        if (**i == a2) {
          goto LABEL_19;
        }
      }
      uint64_t v10 = 0;
LABEL_19:
      sub_10003AFE8((uint64_t)v33);
      if (v10)
      {
        if (a3 == 4101) {
          sub_1004A2A34(a1, (uint64_t)v10);
        }
        else {
          sub_10049FF74(a1, (uint64_t)a2, a3);
        }
        goto LABEL_80;
      }
      if (a3 == 4102)
      {
        if (qword_1009F8080 != -1) {
          dispatch_once(&qword_1009F8080, &stru_1009AFF48);
        }
        uint64_t v21 = off_1009F8078;
        if (sub_1004962BC())
        {
          if (v21[240])
          {
            if (!a2[988]
              && !a2[989]
              && !sub_1004764A0((uint64_t)a2)
              && sub_100475E4C((uint64_t)a2, 0x80000u) == 4)
            {
              uint64_t v22 = sub_10047ECFC((uint64_t)a2);
              if ((v22 & 2) == 0)
              {
                if (qword_1009F8080 != -1) {
                  dispatch_once(&qword_1009F8080, &stru_1009AFF48);
                }
                if ((sub_100497A84(v22, (uint64_t)a2) & 1) == 0)
                {
                  uint64_t v23 = (id)qword_100A19ED8;
                  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
                  {
                    int v24 = sub_10047ECFC((uint64_t)a2);
                    sub_100475EE0((uint64_t)a2, (uint64_t)__p);
                    uint64_t v25 = v41 >= 0 ? __p : *(char **)__p;
                    *(_DWORD *)std::string buf = 67109635;
                    *(_DWORD *)&uint8_t buf[4] = v24;
                    strcpy(v43, "p\bhash");
                    v43[7] = 0;
                    *(_WORD *)&v43[8] = 0;
                    __int16 v44 = 2081;
                    __int16 v45 = v25;
                    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "GAPA Flags - %d, sending magic keys and renaming genuine device %{private, mask.hash}s", buf, 0x1Cu);
                    if (v41 < 0) {
                      operator delete(*(void **)__p);
                    }
                  }

                  if (qword_1009F80A0 != -1) {
                    dispatch_once(&qword_1009F80A0, &stru_1009AFEC8);
                  }
                  sub_10028F9A8((uint64_t)off_1009F8098, a2);
                  if (qword_1009F7F00 != -1) {
                    dispatch_once(&qword_1009F7F00, &stru_1009AFE48);
                  }
                  sub_1004ABED0((uint64_t)off_1009F7EF8, (uint64_t)a2);
                }
              }
            }
          }
        }
        goto LABEL_80;
      }
      if (a3 != 4098)
      {
LABEL_80:
        sub_10003AFB4((uint64_t)v33);
        return;
      }
      uint64_t v11 = (id)qword_100A19ED8;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        sub_100475F84((uint64_t)a2, (uint64_t)buf);
        int v12 = SBYTE3(v45);
        id v13 = *(uint8_t **)buf;
        sub_100475EE0((uint64_t)a2, (uint64_t)__p);
        __int16 v14 = buf;
        if (v12 < 0) {
          __int16 v14 = v13;
        }
        if (v41 >= 0) {
          uint64_t v15 = __p;
        }
        else {
          uint64_t v15 = *(unsigned char **)__p;
        }
        *(_DWORD *)__int16 v34 = 136315394;
        v35 = v14;
        __int16 v36 = 2080;
        char v37 = v15;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[3rd] Nickname info changed from %s to %s", v34, 0x16u);
        if (v41 < 0) {
          operator delete(*(void **)__p);
        }
        if (SBYTE3(v45) < 0) {
          operator delete(*(void **)buf);
        }
      }

      sub_10047609C((uint64_t)a2, (uint64_t)buf);
      if (SBYTE3(v45) < 0)
      {
        uint64_t v26 = *(void *)v43;
        operator delete(*(void **)buf);
        if (v26) {
          goto LABEL_36;
        }
      }
      else if (BYTE3(v45))
      {
LABEL_36:
        char v16 = sub_100497774((uint64_t)a2);
        id v17 = (id)qword_100A19ED8;
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          sub_100474E18((uint64_t)a2, buf);
          if (SBYTE3(v45) >= 0) {
            id v18 = buf;
          }
          else {
            id v18 = *(uint8_t **)buf;
          }
          *(_DWORD *)long long __p = 136446466;
          *(void *)&__p[4] = v18;
          __int16 v39 = 2112;
          id v40 = v16;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "[3rd] Add nickname info from %{public}s with record: %@", __p, 0x16u);
          if (SBYTE3(v45) < 0) {
            operator delete(*(void **)buf);
          }
        }

        __int16 v19 = +[CloudPairing sharedInstance];
        int v20 = [v19 cloudClient];
        v31[0] = _NSConcreteStackBlock;
        v31[1] = 3221225472;
        v31[2] = sub_1004A5C14;
        void v31[3] = &unk_1009AFC68;
        v31[4] = a2;
        [v20 createDeviceRecord:v16 completion:v31];

LABEL_79:
        goto LABEL_80;
      }
      int v27 = (id)qword_100A19ED8;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18((uint64_t)a2, buf);
        __int16 v28 = SBYTE3(v45) >= 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)long long __p = 136446210;
        *(void *)&__p[4] = v28;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "[3rd] Remove nickname info from %{public}s", __p, 0xCu);
        if (SBYTE3(v45) < 0) {
          operator delete(*(void **)buf);
        }
      }

      char v16 = +[CloudPairing sharedInstance];
      __int16 v19 = [v16 cloudClient];
      sub_1004A82EC(a2 + 128, buf);
      if (SBYTE3(v45) >= 0) {
        unsigned __int8 v29 = buf;
      }
      else {
        unsigned __int8 v29 = *(uint8_t **)buf;
      }
      v30 = +[NSString stringWithUTF8String:v29];
      v32[0] = _NSConcreteStackBlock;
      v32[1] = 3221225472;
      v32[2] = sub_1004A5AD0;
      v32[3] = &unk_1009AFC68;
      v32[4] = a2;
      [v19 deleteDeviceRecord:v30 completion:v32];

      if (SBYTE3(v45) < 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_79;
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR))
  {
    sub_10076E3DC();
  }
}

void sub_1004A59EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);

  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004A5AC8(uint64_t a1, uint64_t a2, int a3)
{
}

void sub_1004A5AD0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (id)qword_100A19ED8;
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      sub_100474E18(*(void *)(a1 + 32), __p);
      sub_10076E410();
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(*(void *)(a1 + 32), __p);
    uint64_t v6 = v8 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446210;
    uint64_t v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[3rd] Removed cloud device %{public}s", buf, 0xCu);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1004A5BF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004A5C14(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (id)qword_100A19ED8;
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      sub_100474E18(*(void *)(a1 + 32), __p);
      sub_10076E460();
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(*(void *)(a1 + 32), __p);
    uint64_t v6 = v8 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446210;
    uint64_t v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[3rd] Create cloud device %{public}s", buf, 0xCu);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1004A5D38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004A5D58(uint64_t a1)
{
  char v2 = qword_100A19ED8;
  if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: ----------------- Magic Pairing Manager ------------------", buf, 2u);
  }
  id v3 = qword_100A19ED8;
  if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump: Magic Paired devices:", buf, 2u);
  }
  uint64_t v4 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 8))(v4))
  {
    id v5 = (id)qword_100A19ED8;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = (void *)(a1 + 216);
      if (*(char *)(a1 + 239) < 0) {
        uint64_t v6 = (void *)*v6;
      }
      int v7 = *(unsigned __int8 *)(a1 + 241);
      if (sub_1004962BC()) {
        int v8 = *(unsigned __int8 *)(a1 + 240);
      }
      else {
        int v8 = 0;
      }
      *(_DWORD *)std::string buf = 136315650;
      *(void *)char v37 = v6;
      *(_WORD *)&v37[8] = 1024;
      *(_DWORD *)&v37[10] = v7;
      __int16 v38 = 1024;
      int v39 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Cloud Account ID: %s, Cloud Signed in: %d, Initialized: %d", buf, 0x18u);
    }

    id v9 = qword_100A19ED8;
    if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 68157954;
      *(_DWORD *)char v37 = 16;
      *(_WORD *)&v37[4] = 2096;
      *(void *)&v37[6] = a1 + 49;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Acc Master Key:%.16P", buf, 0x12u);
    }
    uint64_t v10 = qword_100A19ED8;
    if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 68157954;
      *(_DWORD *)char v37 = 16;
      *(_WORD *)&v37[4] = 2096;
      *(void *)&v37[6] = a1 + 65;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Acc Master Hint:%.16P", buf, 0x12u);
    }
    uint64_t v11 = qword_100A19ED8;
    if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 68157954;
      *(_DWORD *)char v37 = 16;
      *(_WORD *)&v37[4] = 2096;
      *(void *)&v37[6] = a1 + 81;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Acc Master Cloud IRK:%.16P", buf, 0x12u);
    }
    int v12 = qword_100A19ED8;
    if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 68157954;
      *(_DWORD *)char v37 = 6;
      *(_WORD *)&v37[4] = 2096;
      *(void *)&v37[6] = a1 + 97;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Acc Master Cloud Addr:%.6P", buf, 0x12u);
    }
    id v13 = *(uint64_t ***)(a1 + 176);
    if (v13 != *(uint64_t ***)(a1 + 184))
    {
      __int16 v14 = (mach_header_64 *)&_mh_execute_header;
      do
      {
        uint64_t v15 = **v13;
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        sub_10047B7A8(v15, (_DWORD *)&v35 + 1, &v35, (_DWORD *)&v34 + 1, &v34);
        ccsha256_di();
        memset(v45, 0, sizeof(v45));
        memset(v44, 0, sizeof(v44));
        char v16 = (id)qword_100A19ED8;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          id v17 = v14;
          sub_100474E18(v15, __p);
          int v18 = v33;
          __int16 v19 = (void **)__p[0];
          int v20 = HIDWORD(v34);
          int v21 = v35;
          char v22 = sub_10047ECFC(v15);
          *(_DWORD *)std::string buf = 136446978;
          uint64_t v23 = __p;
          if (v18 < 0) {
            uint64_t v23 = v19;
          }
          *(void *)char v37 = v23;
          *(_WORD *)&v37[8] = 1024;
          *(_DWORD *)&v37[10] = v21;
          __int16 v38 = 1024;
          int v39 = v20;
          __int16 v40 = 1024;
          LODWORD(v41) = v22 & 2;
          __int16 v14 = v17;
          _os_log_impl(v17, v16, OS_LOG_TYPE_DEFAULT, "statedump: Device %{public}s, vid: %x, pid: %x, Fake: %d", buf, 0x1Eu);
          if (v33 < 0) {
            operator delete(__p[0]);
          }
        }

        int v24 = qword_100A19ED8;
        if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v25 = (uint64_t)(*v13 + 5);
          uint64_t v26 = (uint64_t)(*v13 + 7);
          int v27 = *((_DWORD *)*v13 + 18);
          *(_DWORD *)std::string buf = 68158722;
          *(_DWORD *)char v37 = 16;
          *(_WORD *)&v37[4] = 2096;
          *(void *)&v37[6] = v25;
          __int16 v38 = 1040;
          int v39 = 16;
          __int16 v40 = 2096;
          char v41 = (_OWORD *)v26;
          __int16 v42 = 1024;
          int v43 = v27;
          _os_log_impl(v14, v24, OS_LOG_TYPE_DEFAULT, "Acc Key %.16P for Hint %.16P  and Ratchet %d ", buf, 0x28u);
        }
        __int16 v28 = qword_100A19ED8;
        if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v29 = (uint64_t)(*v13 + 1);
          uint64_t v30 = (uint64_t)(*v13 + 3);
          *(_DWORD *)std::string buf = 68158466;
          *(_DWORD *)char v37 = 16;
          *(_WORD *)&v37[4] = 2096;
          *(void *)&v37[6] = v29;
          __int16 v38 = 1040;
          int v39 = 16;
          __int16 v40 = 2096;
          char v41 = (_OWORD *)v30;
          _os_log_impl(v14, v28, OS_LOG_TYPE_DEFAULT, "IRK %.16P and Encryption key %.16P", buf, 0x22u);
        }
        ccdigest();
        ccdigest();
        __int16 v31 = qword_100A19ED8;
        if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 68158466;
          *(_DWORD *)char v37 = 32;
          *(_WORD *)&v37[4] = 2096;
          *(void *)&v37[6] = v45;
          __int16 v38 = 1040;
          int v39 = 32;
          __int16 v40 = 2096;
          char v41 = v44;
          _os_log_impl(v14, v31, OS_LOG_TYPE_DEFAULT, "Hashed IRK %.32P and Hashed Encryption key %.32P", buf, 0x22u);
        }
        ++v13;
      }
      while (v13 != *(uint64_t ***)(a1 + 184));
    }
  }
}

void sub_1004A6320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  _Unwind_Resume(a1);
}

void sub_1004A635C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5, uint64_t a6, _OWORD *a7)
{
  int v12 = (id)qword_100A19ED8;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a2, &v52);
    int v13 = v54;
    unint64_t v14 = v52.n128_u64[0];
    uint64_t v15 = sub_10022EA04(a3);
    char v16 = &v52;
    *(_DWORD *)std::string buf = 136446722;
    if (v13 < 0) {
      char v16 = (__n128 *)v14;
    }
    *(void *)&uint8_t buf[4] = v16;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = a3;
    *(_WORD *)&buf[18] = 2080;
    *(void *)&buf[20] = v15;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Magic pairing completed with device %{public}s status:%d, %s", buf, 0x1Cu);
    if (v54 < 0) {
      operator delete((void *)v52.n128_u64[0]);
    }
  }

  v45[0] = 0;
  v45[1] = 0;
  sub_10003AED0((uint64_t)v45, a1 + 104);
  for (int i = *(void ***)(a1 + 176); i != *(void ***)(a1 + 184); ++i)
  {
    int v18 = *i;
    if (**i == a2) {
      goto LABEL_11;
    }
  }
  int v18 = 0;
LABEL_11:
  switch((int)a3)
  {
    case 0:
      __n128 v52 = 0uLL;
      int v53 = 0;
      sub_100600E5C((uint64_t)&v52, a7, 4u);
      if (qword_1009F8778 != -1) {
        dispatch_once(&qword_1009F8778, &stru_1009AFE68);
      }
      sub_100618730((uint64_t)off_1009F8770, (unsigned __int8 *)a2, &v52, 1);
      if (v18)
      {
        if (a5) {
          *(_OWORD *)(v18 + 5) = *a5;
        }
        if (a6) {
          *((_DWORD *)v18 + 18) = a6;
        }
        if (*(unsigned char *)(a1 + 48))
        {
          buf[0] = 0;
          sub_10001B8E0(buf);
          sub_10049729C(a1);
          sub_10001B8AC(buf);
        }
        sub_100499B8C(a1, a2);
        nullsub_95(&v52);
        int v20 = @"Success";
        goto LABEL_40;
      }
      __int16 v28 = (id)qword_100A19ED8;
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        sub_100474E18(a2, buf);
        sub_10076E570();
      }

      nullsub_95(&v52);
      int v20 = @"Success";
      goto LABEL_71;
    case 1:
    case 7:
      __int16 v19 = "BT_MAGIC_PAIRING_FAILED_VERIFICATION";
      if (a3 == 1) {
        __int16 v19 = "BT_MAGIC_PAIRING_INTERNAL_ERROR";
      }
      int v20 = +[NSString stringWithFormat:@"Magic Pairing failed due to %s", v19];
      int v21 = qword_100A19ED8;
      if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 138412290;
        *(void *)&uint8_t buf[4] = v20;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
      }
      sub_1004997A8(a1, (uint64_t)v18);
      goto LABEL_28;
    case 2:
      uint64_t v23 = qword_100A19ED8;
      if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 138412290;
        *(void *)&uint8_t buf[4] = @"Peer device has no pairing keys BT_MAGIC_PAIRING_KEY_NOT_FOUND";
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
      }
      *(void *)std::string buf = 0;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&uint8_t buf[16] = 0x3812000000;
      *(void *)&buf[24] = sub_10004D074;
      int v49 = nullsub_24;
      v50 = "";
      *(_DWORD *)((char *)v51 + 3) = 0;
      v51[0] = 0;
      *(_WORD *)((char *)&v51[1] + 1) = *(_WORD *)(a2 + 132);
      *(_DWORD *)((char *)v51 + 1) = *(_DWORD *)(a2 + 128);
      uint64_t v24 = sub_100019878();
      v44[0] = _NSConcreteStackBlock;
      v44[1] = 3221225472;
      _OWORD v44[2] = sub_1004A6D30;
      v44[3] = &unk_1009995E0;
      v44[4] = buf;
      sub_100013018(v24, v44);
      _Block_object_dispose(buf, 8);
      int v20 = @"Peer device has no pairing keys BT_MAGIC_PAIRING_KEY_NOT_FOUND";
      goto LABEL_40;
    case 8:
      uint64_t v25 = qword_100A19ED8;
      int v20 = @"We dont have keys for the peer device BT_MAGIC_PAIRING_NO_KEYS_FOR_PEER";
      if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 138412290;
        *(void *)&uint8_t buf[4] = @"We dont have keys for the peer device BT_MAGIC_PAIRING_NO_KEYS_FOR_PEER";
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
      }
      goto LABEL_40;
    default:
      int v20 = +[NSString stringWithFormat:@"Magic Pairing failed due to %s", sub_10022EA04(a3)];
LABEL_28:
      char v22 = (id)qword_100A19ED8;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        sub_100474E18(a2, buf);
        sub_10076E518();
      }

      v52.n128_u8[0] = 0;
      sub_10001B8E0(&v52);
      if (sub_10017C380(a2 + 128))
      {

        int v20 = @"Magic Pairing error disconnect failed";
      }
      if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
        sub_10076E4B0();
      }
      sub_10001B8AC(&v52);
LABEL_40:
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      sub_10047B7A8(a2, (_DWORD *)&v43 + 1, &v43, (_DWORD *)&v42 + 1, &v42);
      if (v18)
      {
        uint64_t v26 = *((unsigned __int8 *)v18 + 112);
        if (v26 != a3) {
          *((unsigned char *)v18 + 112) = a3;
        }
        if (a6 <= 0x3A98)
        {
          if ((a6 - 10001) >> 3 > 0x270)
          {
            if ((a6 - 7501) >= 0x9C4)
            {
              if ((a6 - 5001) >= 0x9C4)
              {
                if ((a6 - 2501) >= 0x9C4)
                {
                  if ((a6 - 1001) >= 0x5DC)
                  {
                    if ((a6 - 501) >= 0x1F4)
                    {
                      if ((a6 - 251) >= 0xFA)
                      {
                        if ((a6 - 1) >= 0xFA) {
                          uint64_t v27 = 0;
                        }
                        else {
                          uint64_t v27 = 250;
                        }
                      }
                      else
                      {
                        uint64_t v27 = 500;
                      }
                    }
                    else
                    {
                      uint64_t v27 = 1000;
                    }
                  }
                  else
                  {
                    uint64_t v27 = 2500;
                  }
                }
                else
                {
                  uint64_t v27 = 5000;
                }
              }
              else
              {
                uint64_t v27 = 7500;
              }
            }
            else
            {
              uint64_t v27 = 10000;
            }
          }
          else
          {
            uint64_t v27 = 15000;
          }
        }
        else
        {
          uint64_t v27 = 0xFFFFFFFFLL;
        }
        v46[0] = @"FWVersion";
        sub_100480344(a2, 0xAu, &v52);
        if (v54 >= 0) {
          uint64_t v29 = &v52;
        }
        else {
          uint64_t v29 = (__n128 *)v52.n128_u64[0];
        }
        int v39 = +[NSString stringWithUTF8String:v29];
        v47[0] = v39;
        v46[1] = @"PID";
        uint64_t v30 = +[NSNumber numberWithUnsignedInt:HIDWORD(v42)];
        v47[1] = v30;
        v46[2] = @"PreviousStatus";
        __int16 v31 = +[NSNumber numberWithUnsignedChar:v26];
        v47[2] = v31;
        v46[3] = @"RatchetRange";
        uint64_t v32 = +[NSNumber numberWithUnsignedInt:v27];
        v47[3] = v32;
        v46[4] = @"RatchetInternal";
        char v33 = +[NSNumber numberWithUnsignedInt:a6];
        v47[4] = v33;
        v47[5] = v20;
        v46[5] = @"Reason";
        v46[6] = @"RepeatingStatus";
        uint64_t v34 = +[NSNumber numberWithBool:v26 == a3];
        v47[6] = v34;
        v46[7] = @"Status";
        uint64_t v35 = +[NSNumber numberWithUnsignedChar:a3];
        v47[7] = v35;
        v46[8] = @"VID";
        __int16 v36 = +[NSNumber numberWithUnsignedInt:v43];
        v47[8] = v36;
        char v37 = +[NSDictionary dictionaryWithObjects:v47 forKeys:v46 count:9];

        if (v54 < 0) {
          operator delete((void *)v52.n128_u64[0]);
        }
        __int16 v38 = *(NSObject **)(a1 + 208);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1004A6DDC;
        block[3] = &unk_100998A38;
        block[4] = v37;
        void block[5] = a2;
        dispatch_async(v38, block);
      }
LABEL_71:
      sub_10003AFB4((uint64_t)v45);

      return;
  }
}

void sub_1004A6BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);

  nullsub_95(v18 - 128);
  sub_10003AFB4((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t sub_1004A6D30(uint64_t a1)
{
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009AFE88);
  }
  sub_1006F4278((uint64_t)off_1009F85C0, *(void *)(*(void *)(a1 + 32) + 8) + 48);
  if (qword_1009F7ED0 != -1) {
    dispatch_once(&qword_1009F7ED0, &stru_1009AFEA8);
  }
  uint64_t v2 = qword_1009F7EC8;
  id v3 = (_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 48);

  return sub_10071170C(v2, v3);
}

uint64_t sub_1004A6DDC()
{
  v0 = *(uint64_t (**)(void))(*(void *)sub_100050530() + 336);

  return v0();
}

uint64_t sub_1004A6E3C(uint64_t a1, uint64_t a2, _OWORD *a3, _OWORD *a4, _OWORD *a5, _OWORD *a6, int a7)
{
  *(void *)(a1 + 88) = 0;
  uint64_t v8 = a1 + 88;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 112) = -1;
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = *a3;
  *(_OWORD *)(a1 + 24) = *a4;
  *(_DWORD *)(a1 + 72) = a7;
  *(_DWORD *)(a1 + 84) = 0;
  *(_OWORD *)(a1 + 40) = *a5;
  *(_OWORD *)(a1 + 56) = *a6;
  *(unsigned char *)(a1 + 77) = 0;
  int v9 = *(_DWORD *)(a2 + 128);
  *(_WORD *)(a1 + 82) = *(_WORD *)(a2 + 132);
  *(_DWORD *)(a1 + 78) = v9;
  sub_100475EE0(a2, (uint64_t)&v11);
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)v8);
  }
  *(_OWORD *)uint64_t v8 = v11;
  *(void *)(v8 + 16) = v12;
  return a1;
}

void sub_1004A6EF0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 111) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004A6F0C(uint64_t a1)
{
  if ((sub_1004962BC() & 1) == 0)
  {
    uint64_t v10 = qword_100A19ED8;
    if (!os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    LOWORD(buf) = 0;
    long long v11 = "upgradeToManatee, Magic Pairing not supported";
LABEL_17:
    uint64_t v12 = v10;
    uint32_t v13 = 2;
    goto LABEL_18;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AFE48);
  }
  if ((sub_1004AB1F0((uint64_t)off_1009F7EF8) & 1) == 0)
  {
    uint64_t v10 = qword_100A19ED8;
    if (!os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    LOWORD(buf) = 0;
    long long v11 = "upgradeToManatee System has not passed first unlock (or device prefs not read yet). Do not write DeviceList to Cloud";
    goto LABEL_17;
  }
  uint64_t v19 = a1;
  if (*(_OWORD *)(a1 + 49) != 0 && *(_OWORD *)(a1 + 65) != 0)
  {
    uint64_t v17 = a1 + 65;
    uint64_t v18 = a1 + 49;
    __int16 v20 = 0;
    uint64_t v2 = sub_10003FFD4();
    (*(void (**)(uint64_t, char *))(*(void *)v2 + 72))(v2, (char *)&v20 + 1);
    uint64_t v3 = sub_10003FFD4();
    (*(void (**)(uint64_t, __int16 *))(*(void *)v3 + 80))(v3, &v20);
    int v4 = *(unsigned __int8 *)(a1 + 241);
    int v5 = HIBYTE(v20);
    uint64_t v6 = qword_100A19ED8;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT);
    if (v4 && !v5)
    {
      if (v7)
      {
        uint64_t v8 = (uint64_t)(*(void *)(v19 + 184) - *(void *)(v19 + 176)) >> 3;
        int buf = 134217984;
        *(void *)buf_4 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "upgradeToManatee information for %lu devices to cloud", (uint8_t *)&buf, 0xCu);
      }
      uint64_t v9 = *(void *)(v19 + 184) - *(void *)(v19 + 176);
      if (v9)
      {
        is_mul_ok(v9 >> 3, 0x98uLL);
        operator new[]();
      }
      (*(void (**)(void, void, void, uint64_t, uint64_t))(**(void **)(v19 + 168) + 168))(*(void *)(v19 + 168), 0, 0, v18, v17);
      return;
    }
    if (!v7) {
      return;
    }
    if (*(unsigned char *)(v19 + 241)) {
      char v16 = "online";
    }
    else {
      char v16 = "signed in";
    }
    int buf = 136446210;
    *(void *)buf_4 = v16;
    long long v11 = "Warning: Device is not %{public}s";
    uint64_t v12 = v6;
    uint32_t v13 = 12;
LABEL_18:
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&buf, v13);
    return;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
    sub_10076E6DC();
  }
  unint64_t v14 = qword_100A19ED8;
  if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
    sub_10076E654(a1 + 49, v14);
  }
  uint64_t v15 = qword_100A19ED8;
  if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
    sub_10076E5C8(a1, v15);
  }
}

void sub_1004A794C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  _Unwind_Resume(a1);
}

void sub_1004A79DC(uint64_t a1)
{
}

void sub_1004A79EC(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  int v4 = *(char **)(a1 + 8);
  int v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    uint64_t v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  uint64_t v6 = *(char **)(a1 + 8);
  while (*(void *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      uint64_t v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      uint64_t v7 = a2;
      sub_1004A7ABC(a1 + 8, v6, (char *)&v7);
      sub_100061554(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(void, uint64_t))(a1 + 32))(*(void *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_1004A7ABC(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  int v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    uint32_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      uint64_t v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    __int16 v20 = &v19[8 * v16];
    long long __p = v19;
    uint64_t v27 = v20;
    __int16 v28 = v20;
    uint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        uint64_t v23 = (char *)sub_1000405F8(v8, v22);
        __int16 v20 = &v23[8 * (v22 >> 2)];
        long long __p = v23;
        uint64_t v27 = v20;
        uint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        uint64_t v27 = v20;
      }
    }
    *(void *)__int16 v20 = *(void *)v3;
    __int16 v28 = v20 + 8;
    int v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    uint64_t v9 = __src + 8;
    uint64_t v10 = v6 - 8;
    long long v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)int v4 = *(void *)v3;
  }
  return v4;
}

void sub_1004A7CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004A7CFC(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  int v5 = *(char **)(a1 + 8);
  int v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        int v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 != v4)
  {
    int64_t v6 = v4 - (v5 + 8);
    if (v4 != v5 + 8) {
      memmove(v5, v5 + 8, v4 - (v5 + 8));
    }
    *(void *)(a1 + 16) = &v5[v6];
    sub_100061554(a1 + 8);
    if (*(void *)(a1 + 8) == *(void *)(a1 + 16)) {
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 32) + 8))(*(void *)(a1 + 32), a1);
    }
  }

  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_1004A7DD4(id a1)
{
}

void sub_1004A7E18()
{
}

void sub_1004A7E3C(id a1)
{
}

void sub_1004A7E80()
{
}

void sub_1004A7EA4(id a1)
{
}

void sub_1004A7EE8()
{
}

void sub_1004A7F0C(id a1)
{
}

void sub_1004A7F50()
{
}

void sub_1004A7F74(id a1)
{
}

void sub_1004A7FB8()
{
}

void sub_1004A7FDC(id a1)
{
}

void sub_1004A8020()
{
}

void sub_1004A8044(id a1)
{
}

void sub_1004A8088()
{
}

void sub_1004A80AC(id a1)
{
}

void sub_1004A80F0()
{
}

void sub_1004A8114(id a1)
{
}

void sub_1004A8158()
{
}

void sub_1004A817C(id a1)
{
}

void sub_1004A81C0()
{
}

void sub_1004A81E4(id a1)
{
}

void sub_1004A8228()
{
}

void *sub_1004A824C(void *result, uint64_t a2, uint64_t a3, float a4)
{
  if (v4 >= 0) {
    int v5 = result;
  }
  else {
    int v5 = (void *)*result;
  }
  *(float *)a3 = a4;
  *(void *)(a3 + 4) = v5;
  *(_WORD *)(a3 + 12) = 2112;
  *(void *)(a3 + 14) = a2;
  return result;
}

void sub_1004A8270(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_error_impl(a1, a4, OS_LOG_TYPE_ERROR, a2, a3, 0x16u);
}

void sub_1004A82BC(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x22u);
}

BOOL sub_1004A82DC(uint64_t a1, unsigned __int8 *a2)
{
  return sub_100263120(a2, a1);
}

void *sub_1004A82EC@<X0>(unsigned __int8 *a1@<X0>, void *a2@<X8>)
{
  *(void *)std::string __str = 0;
  uint64_t v5 = 0;
  char v6 = 0;
  snprintf(__str, 0x12uLL, "%02X:%02X:%02X:%02X:%02X:%02X", *a1, a1[1], a1[2], a1[3], a1[4], a1[5]);
  char v7 = 0;
  return sub_10004191C(a2, __str);
}

BOOL sub_1004A8390(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(a1 + 8);
  if (*(void **)a1 != v3)
  {
    while (*v2 != a2)
    {
      if (++v2 == v3)
      {
        uint64_t v2 = *(void **)(a1 + 8);
        return v2 != v3;
      }
    }
  }
  return v2 != v3;
}

BOOL sub_1004A83C4(char **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    while (*(void *)v3 != a2)
    {
      v3 += 8;
      if (v3 == v4)
      {
        uint64_t v3 = a1[1];
        break;
      }
    }
  }
  if (v3 != v4)
  {
    if (v4 != v3 + 8) {
      memmove(v3, v3 + 8, v4 - (v3 + 8));
    }
    a1[1] = v4 - 8;
  }
  return v3 != v4;
}

uint64_t sub_1004A8444(uint64_t a1)
{
  *(void *)a1 = off_1009AFF78;
  *(void *)(a1 + 8) = off_1009B0000;
  *(void *)(a1 + 16) = off_1009B0020;
  *(void *)(a1 + 24) = off_1009B0058;
  *(void *)(a1 + 32) = &off_1009B0080;
  *(void *)(a1 + 40) = off_1009B0098;
  sub_100052DA8(a1 + 48);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = a1 + 120;
  *(unsigned char *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  sub_100052DA8(a1 + 168);
  *(_DWORD *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = a1 + 280;
  *(unsigned char *)(a1 + 305) = 0;
  return a1;
}

void sub_1004A8584(_Unwind_Exception *a1)
{
  char v6 = v4;
  uint64_t v8 = *v6;
  if (*v6)
  {
    *(void *)(v1 + 152) = v8;
    operator delete(v8);
  }
  sub_1000486F0(v3, *v5);
  sub_100052DA4(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1004A85BC(uint64_t a1)
{
  *(void *)a1 = off_1009AFF78;
  *(void *)(a1 + 8) = off_1009B0000;
  *(void *)(a1 + 16) = off_1009B0020;
  *(void *)(a1 + 24) = off_1009B0058;
  *(void *)(a1 + 32) = &off_1009B0080;
  *(void *)(a1 + 40) = off_1009B0098;
  sub_1000486F0(a1 + 272, *(void **)(a1 + 280));
  uint64_t v2 = *(void **)(a1 + 248);
  if (v2)
  {
    *(void *)(a1 + 256) = v2;
    operator delete(v2);
  }
  sub_100052DA4(a1 + 168);
  uint64_t v3 = *(void **)(a1 + 144);
  if (v3)
  {
    *(void *)(a1 + 152) = v3;
    operator delete(v3);
  }
  sub_1000486F0(a1 + 112, *(void **)(a1 + 120));
  sub_100052DA4(a1 + 48);
  return a1;
}

uint64_t sub_1004A86E8(uint64_t a1)
{
  return sub_1004A85BC(a1 - 16);
}

void sub_1004A86F0(uint64_t a1)
{
  sub_1004A85BC(a1);

  operator delete();
}

void sub_1004A8728(uint64_t a1)
{
  sub_1004A85BC(a1 - 16);

  operator delete();
}

uint64_t sub_1004A8764(uint64_t a1)
{
  v33[0] = 0;
  v33[1] = 0;
  sub_10003AED0((uint64_t)v33, a1 + 168);
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009B0120);
  }
  sub_100457490(qword_1009F8160 + 8, a1 + 8);
  if (qword_1009F8778 != -1) {
    dispatch_once(&qword_1009F8778, &stru_1009B0140);
  }
  sub_100619088(off_1009F8770, a1 + 16);
  if (qword_1009F87A8 != -1) {
    dispatch_once(&qword_1009F87A8, &stru_1009B0160);
  }
  sub_1000CED0C((uint64_t)off_1009F87A0 + 24, a1 + 24);
  if (qword_1009F8748 != -1) {
    dispatch_once(&qword_1009F8748, &stru_1009B0180);
  }
  sub_1002C3EBC((uint64_t)off_1009F8740 + 80, a1 + 32);
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B01A0);
  }
  sub_10026B36C((uint64_t)off_1009F8068 + 64, a1 + 40);
  atomic_store(0, (unsigned __int8 *)(a1 + 232));
  if (MKBDeviceUnlockedSinceBoot())
  {
    uint64_t v2 = (void (***)(void))sub_1003708B0();
    (**v2)(v2);
    uint64_t v3 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "DeviceManager init, system already unlocked, allow read/write device settings", buf, 2u);
    }
    atomic_store(1u, (unsigned __int8 *)(a1 + 232));
    uint64_t v4 = *(uint64_t **)(a1 + 144);
    uint64_t v5 = *(uint64_t **)(a1 + 152);
    while (v4 != v5)
      sub_100471F00(*v4++);
    sub_1004A8D9C((os_unfair_lock_s *)a1);
    if (qword_1009F7EB0 != -1) {
      dispatch_once(&qword_1009F7EB0, &stru_1009B01C0);
    }
    sub_1004B5364((uint64_t)off_1009F7EA8);
  }
  else
  {
    int out_token = 0;
    uint64_t v8 = *(NSObject **)(sub_1004AF8EC() + 8);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1004A8FE0;
    handler[3] = &unk_1009A7640;
    handler[4] = a1;
    uint32_t v9 = notify_register_dispatch("com.apple.mobile.keybagd.first_unlock", &out_token, v8, handler);
    if (v9)
    {
      if (IsAppleInternalBuild())
      {
        uint64_t v30 = 0;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        *(_OWORD *)unint64_t v18 = 0u;
        long long v19 = 0u;
        memset(v17, 0, sizeof(v17));
        *(_OWORD *)int buf = 0u;
        sub_10004C67C((uint64_t)buf);
        uint64_t v10 = sub_10003AB28((uint64_t)v17);
        std::to_string(&__p, v9);
        sub_10003AB28(v10);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::stringbuf::str();
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        sub_10011631C((const char *)p_p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        *(void *)&v17[0] = v12;
        if (SHIBYTE(v19) < 0) {
          operator delete(v18[1]);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        std::ios::~ios();
      }
      else
      {
        unint64_t v14 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
          sub_10076E710(v9, v14);
        }
      }
    }
    else
    {
      uint32_t v13 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Successfully registered for MKB first unlock notification", buf, 2u);
      }
    }
  }
  *(_DWORD *)(a1 + 296) = 0;
  uint64_t v6 = sub_100017768();
  sub_10004191C(buf, "A2DP");
  sub_10004191C(&__p, "WirelessSplitterLinkKeyTimeout");
  (*(void (**)(uint64_t, uint8_t *, std::string *, uint64_t))(*(void *)v6 + 88))(v6, buf, &__p, a1 + 296);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v17[0]) < 0) {
    operator delete(*(void **)buf);
  }
  *(_DWORD *)(a1 + 300) = 0;
  *(unsigned char *)(a1 + 304) = 1;
  return sub_10003AFB4((uint64_t)v33);
}

void sub_1004A8D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_100742518((uint64_t)&a16);
  sub_10003AFB4(v21 - 64);
  _Unwind_Resume(a1);
}

uint64_t sub_1004A8D9C(os_unfair_lock_s *a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Device Database has been updated, update device info for all paired devices", buf, 2u);
  }
  v14[0] = 0;
  v14[1] = 0;
  sub_10003AED0((uint64_t)v14, (uint64_t)&a1[42]);
  *(void *)int buf = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  sub_100040550(buf, (uint64_t)&a1[36]);
  sub_10003AFE8((uint64_t)v14);
  uint64_t v4 = *(uint64_t **)buf;
  uint64_t v3 = v12;
  if (*(uint64_t **)buf != v12)
  {
    do
    {
      uint64_t v5 = *v4;
      if (*v4)
      {
        uint64_t v6 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          sub_100474E18(v5, __p);
          char v7 = v10 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)uint64_t v15 = 136446210;
          uint64_t v16 = v7;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Sending 'name changed' event for device %{public}s", v15, 0xCu);
          if (v10 < 0) {
            operator delete(__p[0]);
          }
        }
        sub_1004AA04C(a1, v5, 6);
        if (qword_1009F8090 != -1) {
          dispatch_once(&qword_1009F8090, &stru_1009B01E0);
        }
        sub_1004D55B8((uint64_t)off_1009F8088, v5, 0xFFFFFFFFLL, 0, 701, 0);
        uint64_t v3 = v12;
      }
      ++v4;
    }
    while (v4 != v3);
    uint64_t v4 = *(uint64_t **)buf;
  }
  if (v4)
  {
    uint64_t v12 = v4;
    operator delete(v4);
  }
  return sub_10003AFB4((uint64_t)v14);
}

void sub_1004A8FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_1004A8FE0(uint64_t a1)
{
}

void sub_1004A8FE8(uint64_t a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 67109120;
    int v7 = MKBDeviceUnlockedSinceBoot();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "DeviceManager: Received MKB first unlock notification. MKBDeviceUnlockedSinceBoot returns : %d", buf, 8u);
  }
  if (MKBDeviceUnlockedSinceBoot() != 1
    && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT))
  {
    sub_10076E788();
  }
  uint64_t v3 = (void (***)(void))sub_1003708B0();
  (**v3)(v3);
  uint64_t v4 = sub_1004AF8EC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1004AD594;
  v5[3] = &unk_100997528;
  v5[4] = a1;
  sub_1004AFF58(v4, 2000, v5);
  *(unsigned char *)(a1 + 305) = 1;
}

void sub_1004A914C(void *a1)
{
  if (qword_1009F87A8 != -1) {
    dispatch_once(&qword_1009F87A8, &stru_1009B0160);
  }
  sub_100052718((uint64_t)off_1009F87A0 + 24, (uint64_t)(a1 + 3));
  if (qword_1009F8778 != -1) {
    dispatch_once(&qword_1009F8778, &stru_1009B0140);
  }
  sub_1006191C4((uint64_t)off_1009F8770, (uint64_t)(a1 + 2));
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009B0120);
  }
  sub_100052718(qword_1009F8160 + 8, (uint64_t)(a1 + 1));
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B01A0);
  }
  sub_100052718((uint64_t)off_1009F8068 + 64, (uint64_t)(a1 + 5));
  uint64_t v2 = (void *)a1[14];
  uint64_t v3 = a1 + 15;
  if (v2 != a1 + 15)
  {
    do
    {
      if (qword_1009F8168 != -1) {
        dispatch_once(&qword_1009F8168, &stru_1009B0120);
      }
      sub_1005536D8(qword_1009F8160, v2[4]);
      uint64_t v4 = (void *)v2[1];
      if (v4)
      {
        do
        {
          uint64_t v5 = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v5 = (void *)v2[2];
          BOOL v6 = *v5 == (void)v2;
          uint64_t v2 = v5;
        }
        while (!v6);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  sub_1000486F0((uint64_t)(a1 + 14), (void *)a1[15]);
  a1[15] = 0;
  a1[16] = 0;
  a1[14] = v3;
}

unint64_t sub_1004A930C(uint64_t a1, unint64_t a2)
{
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, a1 + 48);
  if (a2)
  {
    BOOL v6 = *(void **)(a1 + 120);
    uint64_t v5 = (void *)(a1 + 120);
    uint64_t v4 = v6;
    if (!v6) {
      goto LABEL_13;
    }
    int v7 = v5;
    do
    {
      unint64_t v8 = v4[4];
      BOOL v9 = v8 >= a2;
      if (v8 >= a2) {
        char v10 = v4;
      }
      else {
        char v10 = v4 + 1;
      }
      if (v9) {
        int v7 = v4;
      }
      uint64_t v4 = (void *)*v10;
    }
    while (*v10);
    if (v7 != v5 && v7[4] <= a2) {
      a2 = v7[5];
    }
    else {
LABEL_13:
    }
      a2 = 0;
  }
  sub_10003AFB4((uint64_t)v12);
  return a2;
}

unint64_t sub_1004A93A0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  v16[0] = 0;
  v16[1] = 0;
  sub_10003AED0((uint64_t)v16, a1 + 48);
  unint64_t v6 = 0;
  if (a2 && a3)
  {
    if (qword_1009F8168 != -1) {
      dispatch_once(&qword_1009F8168, &stru_1009B0120);
    }
    unint64_t v7 = sub_1000181D0(qword_1009F8160, a2);
    if (!v7) {
      goto LABEL_22;
    }
    char v10 = *(uint64_t ***)(a1 + 112);
    unint64_t v8 = (uint64_t **)(a1 + 112);
    BOOL v9 = (uint64_t *)v10;
    if (v10 != v8 + 1)
    {
      do
      {
        if (v9[5] == a3)
        {
          unint64_t v6 = v9[4];
          if (v6 == a2)
          {
            unint64_t v6 = a2;
            goto LABEL_23;
          }
          if (qword_1009F8168 != -1) {
            dispatch_once(&qword_1009F8168, &stru_1009B0120);
          }
          if (sub_1000181D0(qword_1009F8160, v6) == v7) {
            goto LABEL_23;
          }
        }
        long long v11 = (uint64_t *)v9[1];
        if (v11)
        {
          do
          {
            uint64_t v12 = (uint64_t **)v11;
            long long v11 = (uint64_t *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            uint64_t v12 = (uint64_t **)v9[2];
            BOOL v13 = *v12 == v9;
            BOOL v9 = (uint64_t *)v12;
          }
          while (!v13);
        }
        BOOL v9 = (uint64_t *)v12;
      }
      while (v12 != v8 + 1);
    }
    if (qword_1009F8168 != -1) {
      dispatch_once(&qword_1009F8168, &stru_1009B0120);
    }
    unint64_t v15 = sub_1005532C4(qword_1009F8160, v7);
    if (v15)
    {
      uint64_t v17 = &v15;
      sub_1000097B0(v8, &v15, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v17)[5] = a3;
      unint64_t v6 = v15;
    }
    else
    {
LABEL_22:
      unint64_t v6 = 0;
    }
  }
LABEL_23:
  sub_10003AFB4((uint64_t)v16);
  return v6;
}

void sub_1004A956C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004A958C(uint64_t a1, uint64_t a2)
{
}

void sub_1004A9594(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1004A959C(uint64_t a1, unsigned __int8 *a2)
{
  sub_100474D08(a2);
  uint64_t result = sub_1004764A0((uint64_t)a2);
  if ((result & 1) == 0)
  {
    uint64_t v4 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18((uint64_t)a2, __p);
      if (v7 >= 0) {
        uint64_t v5 = __p;
      }
      else {
        uint64_t v5 = (void **)__p[0];
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Device %{public}s is fully disconnected and now unpaired, resetting it", buf, 0xCu);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
    }
    return sub_10048C764((uint64_t)a2);
  }
  return result;
}

uint64_t sub_1004A9698(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v5 = result;
  int v6 = 0;
  if (*(unsigned char *)(a2 + 960))
  {
    sub_100486A68(a2, &v6);
    uint64_t result = (uint64_t)sub_1004A972C(v5, a2);
  }
  if (!a3)
  {
    sub_10010BB74(&v6, 0);
    sub_10048B9E4(a2, &v6);
    uint64_t result = sub_100476054(a2);
    *(_DWORD *)(v5 + 300) |= 1 << result;
  }
  return result;
}

uint64_t **sub_1004A972C(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a2;
  uint64_t v2 = (uint64_t **)(a1 + 272);
  if (*(void *)(a1 + 288))
  {
    uint64_t v4 = (unsigned __int8 *)(*v2)[4];
    if (v4 == (unsigned __int8 *)a2)
    {
      if (*((unsigned char *)*v2 + 40))
      {
        char v7 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          sub_100474E18(a2, &__p);
          unint64_t v8 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
             ? &__p
             : (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = v8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Wireless Splitter cancelling linkkey timeout for guest device %{public}s", buf, 0xCu);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        sub_1004AD6A4(a1, 0, 0);
        *(_DWORD *)(a2 + 972) = 3;
      }
    }
    else
    {
      memset(&__p, 0, sizeof(__p));
      uint64_t v5 = sub_10004191C(&__p, "WS_ERROR_OTHER_DELETE_GUEST_ONLY_ONE_ALLOWED");
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        uint64_t v5 = sub_10003B098(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string __dst = __p;
      }
      sub_1004A9D60((uint64_t)v5, &__dst);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      BOOL v9 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18((uint64_t)v4, buf);
        int v10 = v21;
        long long v11 = *(unsigned char **)buf;
        sub_100474E18(a2, v15);
        uint64_t v12 = buf;
        if (v10 < 0) {
          uint64_t v12 = v11;
        }
        if (v16 >= 0) {
          BOOL v13 = v15;
        }
        else {
          BOOL v13 = (void **)v15[0];
        }
        *(_DWORD *)long long v22 = 136446466;
        long long v23 = v12;
        __int16 v24 = 2082;
        long long v25 = v13;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Wireless Splitter deleting guest device %{public}s, to only allow one guest at a time. New guest device will be %{public}s", v22, 0x16u);
        if (v16 < 0) {
          operator delete(v15[0]);
        }
        if (v21 < 0) {
          operator delete(*(void **)buf);
        }
      }
      if (qword_1009F8768 != -1) {
        dispatch_once(&qword_1009F8768, &stru_1009B0260);
      }
      sub_100611000((uint64_t)off_1009F8760, v4);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  uint64_t result = sub_1004AEFA8(v2, (unint64_t *)&v19, (uint64_t)&unk_1007BE9D0, &__p);
  *((unsigned char *)result + 40) = 0;
  return result;
}

void sub_1004A99E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004A9A38(uint64_t a1, uint64_t a2, int a3)
{
  return sub_1004A9698(a1 - 24, a2, a3);
}

uint64_t sub_1004A9A40(uint64_t a1, unint64_t a2, int a3, int a4)
{
  uint64_t result = sub_1004764A0(a2);
  if (result & 1) != 0 || (uint64_t result = sub_100040630((unsigned __int8 *)a2), (result))
  {
    if (!a3)
    {
      int v15 = 0;
      sub_10010BB74(&v15, 0);
      sub_10048B9E4(a2, &v15);
      *(_DWORD *)(a1 + 300) &= ~(1 << sub_100476054(a2));
      if (*(unsigned char *)(a2 + 960))
      {
        BOOL v9 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          sub_100474E18(a2, &__p);
          int v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = a4;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Wireless Splitter guest device %{public}s disconnected with reason %u", (uint8_t *)&buf, 0x12u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        memset(&__p, 0, sizeof(__p));
        std::to_string(&__p, a4);
        memset(&buf, 0, sizeof(buf));
        uint64_t v11 = std::operator+<char>();
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          uint64_t v11 = (uint64_t)sub_10003B098(&v14, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
        }
        else {
          std::string v14 = buf;
        }
        sub_1004A9D60(v11, &v14);
        if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v14.__r_.__value_.__l.__data_);
        }
        sub_100486A68(a2, &v15);
        sub_1004A9ED4(a1, a2);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      sub_10004191C(&__p, "");
      *(unsigned char *)(a2 + 1435) = 0;
      std::string::operator=((std::string *)(a2 + 1480), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      return sub_100477B24(a2, 0);
    }
  }
  else
  {
    uint64_t v12 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a2, &__p);
      BOOL v13 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Device %{public}s is unpaired and now fully disconnected, resetting it", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    return sub_10048C764(a2);
  }
  return result;
}

void sub_1004A9D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004A9D60(uint64_t a1, const std::string *a2)
{
  *(_OWORD *)std::string __p = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  *(_OWORD *)int v10 = 0u;
  *(_OWORD *)char v7 = 0u;
  *(_OWORD *)unint64_t v8 = 0u;
  memset(v6, 0, sizeof(v6));
  sub_10041E0F0((uint64_t)v6);
  std::string::operator=((std::string *)&__p[1], a2);
  uint64_t v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (v12 >= 0) {
      uint64_t v4 = &__p[1];
    }
    else {
      uint64_t v4 = (void **)__p[1];
    }
    *(_DWORD *)std::string buf = 136315138;
    std::string v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Wireless Splitter submitting following error metric: fErrorCode %s", buf, 0xCu);
  }
  uint64_t v5 = sub_100050530();
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v5 + 168))(v5, v6);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v10[0]);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(v8[1]);
  }
  if (SHIBYTE(v8[0]) < 0) {
    operator delete(v7[0]);
  }
}

void sub_1004A9EB8(_Unwind_Exception *exception_object)
{
}

void sub_1004A9ED4(uint64_t a1, unint64_t a2)
{
  unint64_t v15 = a2;
  uint64_t v2 = *(void **)(a1 + 280);
  if (v2)
  {
    uint64_t v4 = a1 + 272;
    uint64_t v5 = a1 + 280;
    do
    {
      unint64_t v6 = v2[4];
      BOOL v7 = v6 >= a2;
      if (v6 >= a2) {
        unint64_t v8 = v2;
      }
      else {
        unint64_t v8 = v2 + 1;
      }
      if (v7) {
        uint64_t v5 = (uint64_t)v2;
      }
      uint64_t v2 = (void *)*v8;
    }
    while (*v8);
    if (v5 != a1 + 280 && *(void *)(v5 + 32) <= a2)
    {
      *(unsigned char *)sub_1004AD7B8(a1 + 272, &v15) = 1;
      int v9 = *(_DWORD *)(a1 + 296);
      if (!v9) {
        int v9 = 480000;
      }
      uint64_t v10 = v9;
      uint64_t v11 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(*(void *)(*(void *)v4 + 32), __p);
        if (v14 >= 0) {
          long long v12 = __p;
        }
        else {
          long long v12 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136446466;
        uint64_t v17 = v12;
        __int16 v18 = 2048;
        uint64_t v19 = v10;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Wireless Splitter starting linkkey timeout for guest device %{public}s with timeout %llums", buf, 0x16u);
        if (v14 < 0) {
          operator delete(__p[0]);
        }
      }
      sub_1004AD6A4(a1, 1, v10);
    }
  }
}

uint64_t sub_1004AA044(uint64_t a1, unint64_t a2, int a3, int a4)
{
  return sub_1004A9A40(a1 - 24, a2, a3, a4);
}

uint64_t sub_1004AA04C(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  if (a3 != 18
    || (uint64_t v6 = sub_100035F54(), !(*(unsigned int (**)(uint64_t))(*(void *)v6 + 384))(v6))
    || (uint64_t result = sub_1004AB988((uint64_t)a1), result))
  {
    unint64_t v8 = (sqlite3 **)sub_100370804();
    sub_100357C9C(v8, a2);
    if (qword_1009F8090 != -1) {
      dispatch_once(&qword_1009F8090, &stru_1009B01E0);
    }
    sub_1004D9218((uint64_t)off_1009F8088, a2);
    v11[0] = 0;
    v11[1] = 0;
    sub_10003AED0((uint64_t)v11, (uint64_t)&a1[42]);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1004ABC44;
    v9[3] = &unk_1009B00E0;
    v9[4] = a2;
    int v10 = a3;
    sub_1004ABB78(a1 + 60, v9);
    return sub_10003AFB4((uint64_t)v11);
  }
  return result;
}

void sub_1004AA180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004AA194(uint64_t a1, uint64_t a2, int a3)
{
  if (!*(unsigned char *)a2)
  {
    uint64_t v6 = 1;
    while (v6 != 6)
    {
      if (*(unsigned __int8 *)(a2 + v6++))
      {
        if ((unint64_t)(v6 - 2) < 5) {
          goto LABEL_8;
        }
        break;
      }
    }
    unint64_t v8 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
      sub_10076E7C8(v8);
    }
  }
LABEL_8:
  v13[0] = 0;
  v13[1] = 0;
  sub_10003AED0((uint64_t)v13, a1 + 168);
  for (int i = *(uint64_t **)(a1 + 144); i != *(uint64_t **)(a1 + 152); ++i)
  {
    uint64_t v10 = *i;
    if (*(_DWORD *)(*i + 128) == *(_DWORD *)a2 && *(unsigned __int16 *)(*i + 132) == *(unsigned __int16 *)(a2 + 4)) {
      goto LABEL_18;
    }
  }
  if (a3) {
    operator new();
  }
  uint64_t v10 = 0;
LABEL_18:
  sub_10003AFB4((uint64_t)v13);
  return v10;
}

void sub_1004AA350()
{
}

unsigned __int8 *sub_1004AA384(uint64_t a1, uint64_t a2, _OWORD *a3, BOOL *a4, char *a5)
{
  memset(__len, 0, sizeof(__len));
  *a4 = 0;
  *a5 = 0;
  v31[0] = 0;
  v31[1] = 0;
  sub_10003AED0((uint64_t)v31, a1 + 168);
  LODWORD(v29.__r_.__value_.__l.__data_) = *(_DWORD *)a2;
  WORD2(v29.__r_.__value_.__r.__words[0]) = *(_WORD *)(a2 + 4);
  uint64_t v10 = (unsigned __int8 *)sub_1004AA194(a1, (uint64_t)&v29, 1);
  int v11 = v10[641];
  sub_100476AB8((uint64_t)v10, a3);
  sub_100476BA0((uint64_t)v10, *(unsigned char *)(a2 + 13), a3);
  sub_1004AA7FC(a1, (uint64_t)v10, *(unsigned int *)(a2 + 8));
  if (sub_100040630(v10))
  {
    LODWORD(v29.__r_.__value_.__l.__data_) = 0;
    sub_10010BB74(&v29, 0);
    sub_10048B9E4((uint64_t)v10, &v29);
  }
  sub_10003AFE8((uint64_t)v31);
  long long v12 = *(unsigned char **)(a2 + 16);
  if (v12 && *v12)
  {
    char v30 = 0;
    sub_10001B8E0(&v30);
    int v13 = sub_10018BD24(*(unsigned __int8 **)(a2 + 16), &__len[1], __len, a5);
    sub_10001B910(&v30);
    *a4 = sub_100489C38((uint64_t)v10, *(void **)(a2 + 16), 0xF0u);
    if (v13 || !*(void *)&__len[1] || !__len[0])
    {
LABEL_43:
      sub_10001B8AC(&v30);
      goto LABEL_44;
    }
    memset(&v29, 0, sizeof(v29));
    sub_1002E5698(&v29, *(void **)&__len[1], __len[0]);
    if (!*a5)
    {
      sub_100476CB0((uint64_t)v10, &v29, a3);
      goto LABEL_41;
    }
    sub_100475F84((uint64_t)v10, (uint64_t)&__p);
    if ((v36 & 0x80u) == 0) {
      uint64_t v14 = v36;
    }
    else {
      uint64_t v14 = *((void *)&__p + 1);
    }
    std::string::size_type size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v29.__r_.__value_.__l.__size_;
    }
    if (v14 == size)
    {
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v16 = &v29;
      }
      else {
        char v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
      }
      if ((v36 & 0x80) != 0)
      {
        char v21 = (void *)__p;
        int v22 = memcmp((const void *)__p, v16, *((size_t *)&__p + 1));
        operator delete(v21);
        if (!v22) {
          goto LABEL_41;
        }
      }
      else
      {
        if (!v36) {
          goto LABEL_41;
        }
        uint64_t v17 = 0;
        do
        {
          int v18 = *((unsigned __int8 *)&__p + v17);
          int v19 = v16->__r_.__value_.__s.__data_[v17];
        }
        while (v18 == v19 && v36 - 1 != v17++);
        if (v18 == v19)
        {
LABEL_41:
          if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v29.__r_.__value_.__l.__data_);
          }
          goto LABEL_43;
        }
      }
    }
    else if ((v36 & 0x80) != 0)
    {
      operator delete((void *)__p);
    }
    sub_100476E14((uint64_t)v10, (uint64_t)&v29, a3);
    long long v23 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18((uint64_t)v10, &__p);
      __int16 v24 = (v36 & 0x80u) == 0 ? &__p : (long long *)__p;
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v34 = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Sending 'name changed' event for device %{public}s", buf, 0xCu);
      if ((char)v36 < 0) {
        operator delete((void *)__p);
      }
    }
    if (qword_1009F8090 != -1) {
      dispatch_once(&qword_1009F8090, &stru_1009B01E0);
    }
    sub_1004D55B8((uint64_t)off_1009F8088, (uint64_t)v10, 0xFFFFFFFFLL, 0, 701, 0);
    goto LABEL_41;
  }
LABEL_44:
  long long v25 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18((uint64_t)v10, &v29);
    long long v26 = (v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v29
        : (std::string *)v29.__r_.__value_.__r.__words[0];
    LODWORD(__p) = 136446210;
    *(void *)((char *)&__p + 4) = v26;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Discovered device %{public}s", (uint8_t *)&__p, 0xCu);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
  }
  if (qword_1009F8090 != -1) {
    dispatch_once(&qword_1009F8090, &stru_1009B01E0);
  }
  sub_1004D9218((uint64_t)off_1009F8088, (uint64_t)v10);
  if (v11)
  {
    long long v27 = (sqlite3 **)sub_100370804();
    sub_100357C9C(v27, (uint64_t)v10);
  }
  sub_10003AFB4((uint64_t)v31);
  return v10;
}

void sub_1004AA79C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_10001B8AC(&a18);
  sub_10003AFB4((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_1004AA7FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v20 = 0;
  int v21 = a3;
  uint64_t v5 = sub_100476250(a2, &v20);
  uint64_t v6 = sub_1004AAEA4(v5, &v20, a2);
  int v19 = v6;
  int v7 = sub_1004AAEA4(v6, &v21, a2);
  int v18 = v7;
  *(void *)std::string buf = 0;
  sub_100026C30((uint64_t)buf);
  *(void *)&long long v17 = *(int *)buf;
  *((void *)&v17 + 1) = *(__int16 *)&buf[4];
  if (a3 && v7)
  {
    int v8 = v20;
    if (v20 != a3)
    {
      int v9 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = sub_1004ABEA8(&v18);
        int v11 = sub_1004ABEA8(&v19);
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = a3;
        __int16 v23 = 2080;
        __int16 v24 = v10;
        __int16 v25 = 1024;
        LODWORD(v26[0]) = v8;
        WORD2(v26[0]) = 2080;
        *(void *)((char *)v26 + 6) = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Attempting to set new class of device: %u, type: %s. Prior cached value is %u, %s", buf, 0x22u);
      }
      sub_100476C08(a2, v7, &v17);
      sub_10047B350(a2, a3, &v17);
      sub_1004AB7C0(v7, (std::string *)buf);
      sub_100476CB0(a2, (std::string *)buf, &v17);
      if (SBYTE3(v26[0]) < 0) {
        operator delete(*(void **)buf);
      }
      sub_100479B4C(a2, a3);
    }
  }
  else
  {
    long long v12 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
    {
      int v13 = sub_1004ABEA8(&v18);
      sub_100474E18(a2, __p);
      uint64_t v14 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = a3;
      __int16 v23 = 2080;
      __int16 v24 = v13;
      __int16 v25 = 2082;
      v26[0] = v14;
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Not setting new class of %u, type %s for device %{public}s because it is invalid", buf, 0x1Cu);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_1004AAA4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004AAA70(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = 0;
  long long v28 = 0u;
  memset(v27, 0, sizeof(v27));
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  sub_1006161E0((uint64_t)&v21 + 1);
  BYTE2(v22) = 0;
  BYTE4(v22) = 0;
  BYTE2(v24) = 0;
  BYTE4(v24) = 0;
  HIDWORD(v27[2]) = 0;
  long long v23 = 0uLL;
  *((void *)&v22 + 1) = 0;
  LOBYTE(v24) = 0;
  long long v25 = 0uLL;
  *((void *)&v24 + 1) = 0;
  LOBYTE(v26) = 0;
  v27[0] = 0;
  v27[1] = 0;
  *((void *)&v26 + 1) = 0;
  *(_DWORD *)((char *)&v27[1] + 7) = 0;
  LOBYTE(v27[3]) = 1;
  BYTE2(v29) = 0;
  *(void *)((char *)&v27[3] + 6) = 0;
  *(void *)((char *)&v27[3] + 1) = 0;
  long long v28 = 0uLL;
  v27[5] = 0;
  LOBYTE(v29) = 0;
  BOOL v3 = sub_1004783B8(a2, (uint64_t)&v21);
  if (BYTE7(v28)) {
    BOOL v4 = v3;
  }
  else {
    BOOL v4 = 0;
  }
  if (!v4)
  {
    sub_100475F84(a2, (uint64_t)buf);
    uint64_t v6 = BYTE1(v20);
    if ((v20 & 0x8000) != 0) {
      uint64_t v6 = v17;
    }
    if (v6)
    {
      sub_100475F84(a2, (uint64_t)&v15);
      if (!std::string::compare(&v15, 0, 0xBuLL, "FLEXSMART X"))
      {
        BOOL v7 = 1;
      }
      else
      {
        sub_100475F84(a2, (uint64_t)&v14);
        if (!std::string::compare(&v14, "Car Kit"))
        {
          BOOL v7 = 1;
        }
        else
        {
          sub_100475F84(a2, (uint64_t)&v13);
          if (!std::string::compare(&v13, 0, 5uLL, "BTC45"))
          {
            BOOL v7 = 1;
          }
          else
          {
            sub_100475F84(a2, (uint64_t)&v12);
            BOOL v7 = std::string::compare(&v12, "Land Rover") == 0;
            if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v12.__r_.__value_.__l.__data_);
            }
          }
          if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v13.__r_.__value_.__l.__data_);
          }
        }
        if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v14.__r_.__value_.__l.__data_);
        }
      }
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
      if ((v20 & 0x8000) == 0)
      {
LABEL_28:
        if (v7) {
          goto LABEL_29;
        }
        goto LABEL_17;
      }
    }
    else
    {
      BOOL v7 = 0;
      if ((v20 & 0x8000) == 0) {
        goto LABEL_28;
      }
    }
    operator delete(*(void **)buf);
    if (v7)
    {
LABEL_29:
      int v9 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        sub_100475F84(a2, (uint64_t)buf);
        uint64_t v10 = (v20 & 0x8000) == 0 ? buf : *(uint8_t **)buf;
        LODWORD(v15.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v15.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Car Stereo Type override due to name match (%s)", (uint8_t *)&v15, 0xCu);
        if (SBYTE1(v20) < 0) {
          operator delete(*(void **)buf);
        }
      }
      goto LABEL_35;
    }
LABEL_17:
    uint64_t v8 = 0;
    goto LABEL_36;
  }
  LODWORD(v15.__r_.__value_.__l.__data_) = 0;
  LODWORD(v14.__r_.__value_.__l.__data_) = 0;
  LODWORD(v13.__r_.__value_.__l.__data_) = 0;
  LODWORD(v12.__r_.__value_.__l.__data_) = 0;
  sub_10047B7A8(a2, &v15, &v14, &v13, &v12);
  uint64_t v5 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109888;
    *(_DWORD *)&uint8_t buf[4] = v15.__r_.__value_.__l.__data_;
    LOWORD(v17) = 1024;
    *(_DWORD *)((char *)&v17 + 2) = v14.__r_.__value_.__l.__data_;
    HIWORD(v17) = 1024;
    int data = (int)v13.__r_.__value_.__l.__data_;
    __int16 v19 = 1024;
    int v20 = (int)v12.__r_.__value_.__l.__data_;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Car Stereo Type override due to VID/PID. [VidSrc 0x%x, VID 0x%x, PID 0x%x, version 0x%x]", buf, 0x1Au);
  }
LABEL_35:
  uint64_t v8 = 22;
LABEL_36:
  if (SHIBYTE(v27[1]) < 0) {
    operator delete(*((void **)&v26 + 1));
  }
  if (SHIBYTE(v25) < 0) {
    operator delete(*((void **)&v24 + 1));
  }
  if (SHIBYTE(v23) < 0) {
    operator delete(*((void **)&v22 + 1));
  }
  nullsub_95((char *)&v21 + 1);
  return v8;
}

void sub_1004AAE14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,char a39)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  sub_100276384((uint64_t)&a39);
  _Unwind_Resume(a1);
}

uint64_t sub_1004AAEA4(uint64_t a1, int *a2, uint64_t a3)
{
  int v3 = *a2;
  uint64_t result = sub_1004AAA70(a1, a3);
  if (!result)
  {
    int v5 = v3 & 0xFC;
    uint64_t result = 15;
    switch(((v3 & 0x1F00u) - 256) >> 8)
    {
      case 0u:
        unsigned int v6 = v5 - 4;
        if (v6 < 0x18)
        {
          BOOL v7 = (char *)&unk_1007BED34;
          goto LABEL_17;
        }
        uint64_t result = 1;
        break;
      case 1u:
        unsigned int v6 = v5 - 4;
        if (v6 < 0x14)
        {
          BOOL v7 = (char *)&unk_1007BED4C;
          goto LABEL_17;
        }
        uint64_t result = 2;
        break;
      case 2u:
        return result;
      case 3u:
        unsigned int v6 = v5 - 4;
        if (v6 < 0x48)
        {
          BOOL v7 = (char *)&unk_1007BED60;
          goto LABEL_17;
        }
        uint64_t result = 3;
        break;
      case 4u:
        uint64_t v8 = sub_100035F54();
        if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 384))(v8)) {
          BOOL v9 = (v3 & 0x24) == 0;
        }
        else {
          BOOL v9 = 1;
        }
        if (v9)
        {
          if ((v3 & 0x40) != 0)
          {
            uint64_t result = 24;
          }
          else
          {
            unsigned int v6 = (v3 & 0x3C) - 4;
            if (v6 >= 0x18)
            {
              if ((v3 & 0x80) != 0) {
                uint64_t result = 25;
              }
              else {
                uint64_t result = 4;
              }
            }
            else
            {
              BOOL v7 = (char *)&unk_1007BEDA8;
LABEL_17:
              uint64_t result = *(unsigned int *)&v7[v6];
            }
          }
        }
        else
        {
          uint64_t result = 49;
        }
        break;
      case 5u:
        if ((v3 & 0x10) != 0) {
          int v10 = 35;
        }
        else {
          int v10 = 5;
        }
        if ((v3 & 0x20) != 0) {
          int v11 = 33;
        }
        else {
          int v11 = v10;
        }
        if ((v3 & 0x40) != 0) {
          unsigned int v12 = 32;
        }
        else {
          unsigned int v12 = v11;
        }
        if ((v3 & 0x80) != 0) {
          uint64_t result = 31;
        }
        else {
          uint64_t result = v12;
        }
        break;
      case 6u:
        unsigned int v13 = v5 - 4;
        if (v13 >= 0x14) {
          goto LABEL_32;
        }
        uint64_t result = (v13 >> 2) + 42;
        break;
      case 7u:
        int v14 = v5 - 4;
        if (v14 == 16) {
          unsigned int v15 = 40;
        }
        else {
          unsigned int v15 = 6;
        }
        if (v14 == 12) {
          uint64_t result = 41;
        }
        else {
          uint64_t result = v15;
        }
        break;
      default:
LABEL_32:
        uint64_t result = 0;
        break;
    }
  }
  return result;
}

uint64_t sub_1004AB094(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  if (qword_1009F8748 != -1) {
    dispatch_once(&qword_1009F8748, &stru_1009B0180);
  }
  if (sub_100028CB4((uint64_t)off_1009F8740) != 1) {
    return 202;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009B0200);
  }
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)off_1009F7EF8 + 232);
  if (v5)
  {
    uint64_t v7 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 800))(v7) == 1)
    {
      if (qword_1009F8070 != -1) {
        dispatch_once(&qword_1009F8070, &stru_1009B01A0);
      }
      int v8 = sub_1004DB12C((uint64_t)off_1009F8068);
    }
    else
    {
      int v8 = sub_10048751C(a2);
    }
    int v9 = v8;
    uint64_t result = 0;
    *a3 = v9;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076E8D0();
    }
    return 1;
  }
  return result;
}

uint64_t sub_1004AB1F0(uint64_t a1)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(a1 + 232));
  return v1 & 1;
}

uint64_t sub_1004AB200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1009F8748 != -1) {
    dispatch_once(&qword_1009F8748, &stru_1009B0180);
  }
  if (sub_100028CB4((uint64_t)off_1009F8740) != 1) {
    return 202;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009B0200);
  }
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)off_1009F7EF8 + 232);
  if (v5)
  {
    uint64_t v7 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 800))(v7) == 1)
    {
      if (qword_1009F8070 != -1) {
        dispatch_once(&qword_1009F8070, &stru_1009B01A0);
      }
      sub_1004E5AB8((uint64_t)off_1009F8068, a3);
    }
    else
    {
      sub_1004852A8(a2, a3);
    }
    return 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076E904();
    }
    return 1;
  }
}

uint64_t sub_1004AB358(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v8 = a3;
  int v22 = 0;
  unsigned __int8 v21 = 1;
  if (v8)
  {
    if (qword_1009F80B0 != -1) {
      dispatch_once(&qword_1009F80B0, &stru_1009B0220);
    }
    sub_100572D64((std::string *)off_1009F80A8, v8, &v21, &v22);
    int v9 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 138412802;
      id v24 = v8;
      __int16 v25 = 1024;
      int v26 = a4;
      __int16 v27 = 1024;
      int v28 = a5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "DeviceManager Set Spatial Mode: bundleID: %@, mode: %u head Tracking %d", buf, 0x18u);
    }
    if (qword_1009F80B0 != -1) {
      dispatch_once(&qword_1009F80B0, &stru_1009B0220);
    }
    sub_100572A6C((uint64_t)off_1009F80A8, v8, a4, a5);
    *(_DWORD *)std::string buf = 0;
    uint64_t v20 = 0;
    int v19 = 0;
    sub_10047B7A8(a2, buf, (_DWORD *)&v20 + 1, &v20, &v19);
    if (qword_1009F80B0 != -1) {
      dispatch_once(&qword_1009F80B0, &stru_1009B0220);
    }
    int v10 = *((void *)off_1009F80A8 + 32);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_1004AB5B0;
    v12[3] = &unk_1009B00C0;
    id v13 = v8;
    int v14 = v22;
    int v15 = a4;
    unsigned __int8 v17 = v21;
    char v18 = a5;
    int v16 = v20;
    dispatch_async(v10, v12);
  }
  return 0;
}

void sub_1004AB594(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004AB5B0(uint64_t a1)
{
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009B0220);
  }
  uint64_t v2 = off_1009F80A8;
  int v3 = *(void **)(a1 + 32);
  int v4 = *(_DWORD *)(a1 + 40);
  int v5 = *(_DWORD *)(a1 + 44);
  int v6 = *(unsigned __int8 *)(a1 + 52);
  int v7 = *(unsigned __int8 *)(a1 + 53);

  sub_1005723BC((uint64_t)v2, v3, v4, v5, v6, v7);
}

uint64_t sub_1004AB624(uint64_t a1, uint64_t a2, void *a3, int *a4, unsigned char *a5)
{
  id v7 = a3;
  if (v7)
  {
    unsigned __int8 v16 = 1;
    unsigned __int8 v15 = 1;
    uint64_t v8 = sub_10003FFD4();
    (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v8 + 240))(v8, &v15);
    if (qword_1009F80B0 != -1) {
      dispatch_once(&qword_1009F80B0, &stru_1009B0220);
    }
    sub_100572D64((std::string *)off_1009F80A8, v7, &v16, a4);
    int v9 = v16;
    int v10 = v15;
    if (v15) {
      int v11 = v16;
    }
    else {
      int v11 = 0;
    }
    *a5 = v11;
    unsigned int v12 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEBUG))
    {
      int v14 = *a4;
      *(_DWORD *)std::string buf = 138413314;
      id v18 = v7;
      __int16 v19 = 1024;
      int v20 = v14;
      __int16 v21 = 1024;
      int v22 = v9;
      __int16 v23 = 1024;
      int v24 = v10;
      __int16 v25 = 1024;
      int v26 = v11;
      _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "DeviceManager Get Spatial Mode: bundleID: %@, mode: %u, headtracking: %u Accessibility Head tracking %d, returning: %u", buf, 0x24u);
    }
  }

  return 0;
}

void sub_1004AB7A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

std::string *sub_1004AB7C0@<X0>(int a1@<W1>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  sub_10004191C(a2, "Misc");
  int v4 = "Laptop";
  switch(a1)
  {
    case 1:
    case 7:
      int v4 = "Computer";
      break;
    case 2:
      int v4 = "Phone";
      break;
    case 3:
      int v4 = "Audio";
      break;
    case 4:
      int v4 = "Peripheral";
      break;
    case 5:
      int v4 = "Imaging";
      break;
    case 6:
      int v4 = "Toy";
      break;
    case 8:
      return std::string::assign(a2, v4);
    case 9:
    case 10:
    case 14:
    case 15:
    case 18:
    case 21:
    case 22:
    case 23:
      goto LABEL_5;
    case 11:
      int v4 = "PDA";
      break;
    case 12:
      int v4 = "Mobile Phone";
      break;
    case 13:
      int v4 = "Cordless Phone";
      break;
    case 16:
      int v4 = "Headset";
      break;
    case 17:
      int v4 = "Handsfree";
      break;
    case 19:
      int v4 = "Speaker";
      break;
    case 20:
      int v4 = "Headphones";
      break;
    case 24:
      int v4 = "Keyboard";
      break;
    case 25:
      int v4 = "Mouse";
      break;
    default:
      if (a1 == 49) {
        int v4 = "Trackpad";
      }
      else {
LABEL_5:
      }
        int v4 = "Misc";
      break;
  }
  return std::string::assign(a2, v4);
}

void sub_1004AB908(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1004AB988(uint64_t a1)
{
  uint64_t v2 = sub_100035F54();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v2 + 384))(v2)) {
    return 0;
  }
  v16[0] = 0;
  v16[1] = 0;
  sub_10003AED0((uint64_t)v16, a1 + 168);
  long long __p = 0;
  int v14 = 0;
  uint64_t v15 = 0;
  sub_100040550(&__p, a1 + 144);
  sub_10003AFE8((uint64_t)v16);
  int v3 = (unsigned __int8 **)__p;
  int v4 = v14;
  while (1)
  {
    if (v3 == v4)
    {
      int v7 = 0;
      goto LABEL_10;
    }
    int v5 = *v3;
    if (sub_100040630(*v3))
    {
      if (sub_10048C5E0((uint64_t)v5)) {
        break;
      }
    }
    ++v3;
  }
  int v7 = 1;
LABEL_10:
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, a1 + 168);
  uint64_t v8 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = *(unsigned __int8 *)(a1 + 136);
    *(_DWORD *)std::string buf = 67109376;
    int v18 = v9;
    __int16 v19 = 1024;
    int v20 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "DeviceManager:: compute Classic incompatible device: curr %u, new %u", buf, 0xEu);
  }
  int v10 = *(unsigned __int8 *)(a1 + 136);
  BOOL v6 = v10 != v7;
  if (v10 != v7) {
    *(unsigned char *)(a1 + 136) = v7;
  }
  sub_10003AFB4((uint64_t)v12);
  if (__p)
  {
    int v14 = (unsigned __int8 **)__p;
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)v16);
  return v6;
}

void sub_1004ABB3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1004ABB78(os_unfair_lock_s *a1, void *a2)
{
  int v3 = a2;
  os_unfair_lock_lock(a1);
  int v5 = 0;
  BOOL v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  int v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    int v4 = v5;
  }
  if (v4)
  {
    BOOL v6 = v4;
    operator delete(v4);
  }
}

void sub_1004ABC1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1004ABC44(uint64_t a1, uint64_t (***a2)(void, void, void))
{
  return (**a2)(a2, *(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

BOOL sub_1004ABC78(uint64_t a1)
{
  uint64_t v2 = sub_100035F54();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v2 + 384))(v2)) {
    return 0;
  }
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1 + 168);
  int v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEBUG)) {
    sub_10076E938(a1, v3);
  }
  BOOL v4 = *(unsigned char *)(a1 + 136) != 0;
  sub_10003AFB4((uint64_t)v6);
  return v4;
}

uint64_t sub_1004ABD30(uint64_t a1, int a2)
{
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, a1 + 168);
  if (*(unsigned __int8 *)(a1 + 304) != a2)
  {
    *(unsigned char *)(a1 + 304) = a2;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    sub_100040550(&v7, a1 + 144);
    sub_10003AFE8((uint64_t)v10);
    BOOL v4 = v7;
    if (v7 != v8)
    {
      do
      {
        uint64_t v5 = *v4;
        if (sub_100478B2C(*v4, 32))
        {
          if (sub_1004874AC(v5) != 2) {
            sub_100484DC4(v5, 1);
          }
          sub_100485154(v5);
        }
        ++v4;
      }
      while (v4 != v8);
      BOOL v4 = v7;
    }
    if (v4)
    {
      uint64_t v8 = v4;
      operator delete(v4);
    }
  }
  return sub_10003AFB4((uint64_t)v10);
}

void sub_1004ABE08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1004ABE38(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5, char a6, int a7)
{
  return 0;
}

const char *sub_1004ABEA8(int *a1)
{
  uint64_t v1 = *a1;
  if (v1 > 0x31) {
    return "Unknown";
  }
  else {
    return off_1009B0280[v1];
  }
}

void sub_1004ABED0(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1004ABED8(uint64_t result, int a2, int a3)
{
  if (a2 == 1)
  {
    uint64_t v4 = result;
    v11[0] = 0;
    v11[1] = 0;
    sub_10003AED0((uint64_t)v11, result + 168);
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    sub_100040550(&v8, v4 + 144);
    sub_10003AFE8((uint64_t)v11);
    uint64_t v5 = v8;
    BOOL v6 = v9;
    if (v8 != v9)
    {
      do
      {
        uint64_t v7 = (unsigned __int8 *)*v5;
        if (!sub_100478AF4(*v5) && (sub_1004829FC((uint64_t)v7) & 1) == 0) {
          v7[578] = a3 == 1;
        }
        if (v7[960]) {
          sub_1004ABFEC(v4, a3, v7);
        }
        ++v5;
      }
      while (v5 != v6);
      uint64_t v5 = v8;
    }
    if (v5)
    {
      uint64_t v9 = v5;
      operator delete(v5);
    }
    return sub_10003AFB4((uint64_t)v11);
  }
  return result;
}

void sub_1004ABFBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_1004ABFEC(uint64_t a1, int a2, unsigned __int8 *a3)
{
  char v30 = a3;
  int v29 = 0;
  sub_10010BB74(&v29, 0);
  uint64_t v6 = v29;
  int v7 = sub_100486A20((uint64_t)a3);
  if (a2 == 1)
  {
    int v8 = v7;
    uint64_t v9 = a1 + 272;
    uint64_t v10 = a1 + 280;
    int v11 = *(void **)(a1 + 280);
    if (!v11) {
      goto LABEL_16;
    }
    uint64_t v12 = a1 + 280;
    do
    {
      unint64_t v13 = v11[4];
      BOOL v14 = v13 >= (unint64_t)a3;
      if (v13 >= (unint64_t)a3) {
        uint64_t v15 = v11;
      }
      else {
        uint64_t v15 = v11 + 1;
      }
      if (v14) {
        uint64_t v12 = (uint64_t)v11;
      }
      int v11 = (void *)*v15;
    }
    while (*v15);
    if (v12 == v10 || *(void *)(v12 + 32) > (unint64_t)a3)
    {
LABEL_16:
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
      *((unsigned char *)sub_1004AEFA8((uint64_t **)(a1 + 272), (unint64_t *)&v30, (uint64_t)&unk_1007BE9D0, &buf) + 40) = 0;
      unsigned __int8 v16 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Wireless Splitter repopulating fGuestDevices after boot up", (uint8_t *)&buf, 2u);
      }
    }
    unint64_t v17 = v6 - v8;
    int v18 = *(_DWORD *)(a1 + 296);
    if (v18) {
      unint64_t v19 = v18 / 1000;
    }
    else {
      unint64_t v19 = 480;
    }
    uint64_t v20 = v19 - v17;
    if (v19 >= v17)
    {
      if (!sub_1004764A0((uint64_t)v30) && *(void *)v9 != v10)
      {
        uint64_t v23 = *(void *)(*(void *)v9 + 32);
        int v24 = qword_100A19E50;
        if (v23)
        {
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
          {
            sub_100474E18(v23, &buf);
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_std::string buf = &buf;
            }
            else {
              p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
            }
            uint64_t v26 = 1000 * v20;
            *(_DWORD *)__int16 v31 = 136446466;
            uint64_t v32 = p_buf;
            __int16 v33 = 2048;
            uint64_t v34 = 1000 * v20;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Wireless Splitter starting linkkey timeout for guest device %{public}s with timeout %llums", v31, 0x16u);
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            uint64_t v26 = 1000 * v20;
          }
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
          *((unsigned char *)sub_1004AEFA8((uint64_t **)(a1 + 272), (unint64_t *)&v30, (uint64_t)&unk_1007BE9D0, &buf) + 40) = 1;
          sub_1004AD6A4(a1, 1, v26);
        }
        else if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
        {
          sub_10076E9B4();
        }
      }
    }
    else
    {
      __int16 v21 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Wireless Splitter bt powered on, guest device needs to be deleted", (uint8_t *)&buf, 2u);
      }
      memset(&buf, 0, sizeof(buf));
      int v22 = sub_10004191C(&buf, "WS_ERROR_DISCONNECTION_GUEST_NEEDS_DELETION");
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        int v22 = sub_10003B098(&__p, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = buf;
      }
      sub_1004A9D60((uint64_t)v22, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (qword_1009F8768 != -1) {
        dispatch_once(&qword_1009F8768, &stru_1009B0260);
      }
      sub_100611000((uint64_t)off_1009F8760, v30);
      sub_1000517A4(v9, (unint64_t *)&v30);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
    }
  }
  else if (!a2 && sub_1004764A0((uint64_t)a3))
  {
    sub_100486A68((uint64_t)v30, &v29);
  }
}

void sub_1004AC394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004AC3D0(uint64_t a1, int a2, int a3)
{
  return sub_1004ABED8(a1 - 32, a2, a3);
}

uint64_t sub_1004AC3D8(uint64_t a1)
{
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, a1 + 168);
  std::string __p = 0;
  int v8 = 0;
  uint64_t v9 = 0;
  sub_100040550(&__p, a1 + 144);
  sub_10003AFE8((uint64_t)v10);
  uint64_t v2 = (unsigned __int8 **)__p;
  int v3 = v8;
  if (__p == v8)
  {
    uint64_t v4 = 0;
    if (!__p) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v4 = 0;
  do
  {
    uint64_t v5 = *v2;
    if (sub_100040630(*v2)) {
      uint64_t v4 = v4 + sub_100478B2C((uint64_t)v5, 12);
    }
    ++v2;
  }
  while (v2 != v3);
  uint64_t v2 = (unsigned __int8 **)__p;
  if (__p)
  {
LABEL_7:
    int v8 = v2;
    operator delete(v2);
  }
LABEL_8:
  sub_10003AFB4((uint64_t)v10);
  return v4;
}

void sub_1004AC49C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1004AC4CC(uint64_t a1)
{
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, a1 + 168);
  std::string __p = 0;
  int v8 = 0;
  uint64_t v9 = 0;
  sub_100040550(&__p, a1 + 144);
  sub_10003AFE8((uint64_t)v10);
  uint64_t v2 = (unsigned __int8 **)__p;
  int v3 = v8;
  if (__p == v8)
  {
    uint64_t v4 = 0;
    if (!__p) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  uint64_t v4 = 0;
  do
  {
    uint64_t v5 = *v2;
    if (sub_100040630(*v2) && sub_100478B2C((uint64_t)v5, 12)) {
      uint64_t v4 = (v4 + sub_1004764A0((uint64_t)v5));
    }
    ++v2;
  }
  while (v2 != v3);
  uint64_t v2 = (unsigned __int8 **)__p;
  if (__p)
  {
LABEL_8:
    int v8 = v2;
    operator delete(v2);
  }
LABEL_9:
  sub_10003AFB4((uint64_t)v10);
  return v4;
}

void sub_1004AC59C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1004AC5CC(uint64_t a1)
{
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 168);
  uint64_t v6 = 0;
  int v7 = 0;
  uint64_t v8 = 0;
  sub_100040550(&v6, a1 + 144);
  sub_10003AFE8((uint64_t)v9);
  if (v6 == v7)
  {
    uint64_t v2 = 0;
    if (!v6) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  LODWORD(v2) = 0;
  int v3 = v6;
  do
  {
    uint64_t v4 = *v3++;
    uint64_t v2 = v2 + *(unsigned __int8 *)(v4 + 1122);
  }
  while (v3 != v7);
  if (v6)
  {
LABEL_5:
    int v7 = v6;
    operator delete(v6);
  }
LABEL_6:
  sub_10003AFB4((uint64_t)v9);
  return v2;
}

void sub_1004AC66C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1004AC698(uint64_t a1)
{
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 168);
  uint64_t v6 = 0;
  int v7 = 0;
  uint64_t v8 = 0;
  sub_100040550(&v6, a1 + 144);
  sub_10003AFE8((uint64_t)v9);
  if (v6 == v7)
  {
    unsigned __int8 v2 = 0;
    if (!v6) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  unsigned __int8 v2 = 0;
  int v3 = v6;
  do
  {
    uint64_t v4 = *v3++;
    v2 += *(unsigned char *)(v4 + 1332);
  }
  while (v3 != v7);
  if (v6)
  {
LABEL_5:
    int v7 = v6;
    operator delete(v6);
  }
LABEL_6:
  sub_10003AFB4((uint64_t)v9);
  return v2;
}

void sub_1004AC738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1004AC764(uint64_t a1)
{
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, a1 + 168);
  std::string __p = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  sub_100040550(&__p, a1 + 144);
  sub_10003AFE8((uint64_t)v10);
  unsigned __int8 v2 = (unsigned __int8 **)__p;
  int v3 = v8;
  if (__p == v8)
  {
    uint64_t v4 = 0;
    if (!__p) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  uint64_t v4 = 0;
  do
  {
    uint64_t v5 = *v2;
    if (sub_100040630(*v2) && sub_1004764A0((uint64_t)v5) && sub_10047B784((uint64_t)v5)) {
      uint64_t v4 = (v4 + sub_10047B8FC((uint64_t)v5));
    }
    ++v2;
  }
  while (v2 != v3);
  unsigned __int8 v2 = (unsigned __int8 **)__p;
  if (__p)
  {
LABEL_9:
    uint64_t v8 = v2;
    operator delete(v2);
  }
LABEL_10:
  sub_10003AFB4((uint64_t)v10);
  return v4;
}

void sub_1004AC83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1004AC86C(uint64_t a1)
{
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, a1 + 168);
  std::string __p = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  sub_100040550(&__p, a1 + 144);
  sub_10003AFE8((uint64_t)v10);
  unsigned __int8 v2 = (unsigned __int8 **)__p;
  int v3 = v8;
  if (__p == v8)
  {
    uint64_t v4 = 0;
    if (!__p) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  uint64_t v4 = 0;
  do
  {
    uint64_t v5 = *v2;
    if (sub_100040630(*v2)
      && sub_1004764A0((uint64_t)v5)
      && sub_10047B784((uint64_t)v5)
      && ((sub_10047B8CC((uint64_t)v5) & 1) != 0 || sub_10047B8D8((uint64_t)v5)))
    {
      uint64_t v4 = (v4 + 1);
    }
    ++v2;
  }
  while (v2 != v3);
  unsigned __int8 v2 = (unsigned __int8 **)__p;
  if (__p)
  {
LABEL_11:
    uint64_t v8 = v2;
    operator delete(v2);
  }
LABEL_12:
  sub_10003AFB4((uint64_t)v10);
  return v4;
}

void sub_1004AC954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1004AC984@<X0>(uint64_t a1@<X0>, int a2@<W1>, void **a3@<X8>)
{
  v34[0] = 0;
  v34[1] = 0;
  sub_10003AED0((uint64_t)v34, a1 + 168);
  __int16 v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  sub_100040550(&v31, a1 + 144);
  sub_10003AFE8((uint64_t)v34);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = v31;
  int v7 = v32;
  if (v31 != v32)
  {
    do
    {
      uint64_t v8 = *v6;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      BOOL v9 = sub_10047B7A8(v8, (_DWORD *)&v30 + 1, &v30, (_DWORD *)&v29 + 1, &v29);
      BOOL v10 = v30 == 76 && v9;
      if (v10 && HIDWORD(v29) == a2)
      {
        uint64_t v12 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEBUG))
        {
          sub_100474E18(v8, __p);
          __int16 v25 = __p;
          if (v28 < 0) {
            __int16 v25 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136446210;
          unsigned __int8 v36 = v25;
          _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "getDevicesForAppleProductID for CaseSerial adding %{public}s", buf, 0xCu);
          if (v28 < 0) {
            operator delete(__p[0]);
          }
        }
        BOOL v14 = (uint64_t *)a3[1];
        unint64_t v13 = (unint64_t)a3[2];
        if ((unint64_t)v14 >= v13)
        {
          uint64_t v16 = ((char *)v14 - (unsigned char *)*a3) >> 3;
          if ((unint64_t)(v16 + 1) >> 61) {
            abort();
          }
          uint64_t v17 = v13 - (void)*a3;
          uint64_t v18 = v17 >> 2;
          if (v17 >> 2 <= (unint64_t)(v16 + 1)) {
            uint64_t v18 = v16 + 1;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v19 = v18;
          }
          if (v19) {
            uint64_t v20 = (char *)sub_1000405F8((uint64_t)(a3 + 2), v19);
          }
          else {
            uint64_t v20 = 0;
          }
          __int16 v21 = (uint64_t *)&v20[8 * v16];
          uint64_t *v21 = v8;
          uint64_t v15 = v21 + 1;
          uint64_t v23 = (char *)*a3;
          int v22 = (char *)a3[1];
          if (v22 != *a3)
          {
            do
            {
              uint64_t v24 = *((void *)v22 - 1);
              v22 -= 8;
              *--__int16 v21 = v24;
            }
            while (v22 != v23);
            int v22 = (char *)*a3;
          }
          *a3 = v21;
          a3[1] = v15;
          a3[2] = &v20[8 * v19];
          if (v22) {
            operator delete(v22);
          }
        }
        else
        {
          *BOOL v14 = v8;
          uint64_t v15 = v14 + 1;
        }
        a3[1] = v15;
      }
      ++v6;
    }
    while (v6 != v7);
    uint64_t v6 = v31;
  }
  if (v6)
  {
    uint64_t v32 = v6;
    operator delete(v6);
  }
  return sub_10003AFB4((uint64_t)v34);
}

void sub_1004ACBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_1004ACC38(const void **a1@<X1>, void *a2@<X8>)
{
  uint64_t v30 = 0;
  v31[0] = 0;
  v31[1] = 0;
  sub_10004191C(v28, "Bluetooth Mouse M336/M337/M535");
  uint64_t v4 = operator new(0x14uLL);
  uint64_t v26 = v4 + 5;
  __int16 v27 = (char *)(v4 + 5);
  v4[4] = 325704422;
  *(_OWORD *)uint64_t v4 = xmmword_1007BECF8;
  __int16 v25 = v4;
  sub_1004AE2CC(__dst, (long long *)v28, (uint64_t)&v25);
  sub_10004191C(v23, "Bluetooth Mouse M557");
  uint64_t v5 = operator new(0x14uLL);
  __int16 v21 = v5 + 5;
  int v22 = (char *)(v5 + 5);
  v5[4] = 601617057;
  *(_OWORD *)uint64_t v5 = xmmword_1007BED0C;
  uint64_t v20 = v5;
  sub_1004AE2CC(v33, (long long *)v23, (uint64_t)&v20);
  sub_10004191C(v18, "Microsoft Sculpt Comfort Mouse");
  uint64_t v6 = operator new(0x14uLL);
  uint64_t v16 = v6 + 5;
  uint64_t v17 = (char *)(v6 + 5);
  v6[4] = 2014317364;
  *(_OWORD *)uint64_t v6 = xmmword_1007BED20;
  std::string __p = v6;
  sub_1004AE2CC(v34, (long long *)v18, (uint64_t)&__p);
  sub_1004AEA3C((uint64_t)&v30, __dst, 3);
  for (uint64_t i = 0; i != -18; i -= 6)
  {
    uint64_t v8 = &__dst[i];
    BOOL v9 = (void *)v34[i + 3];
    if (v9)
    {
      v8[16] = v9;
      operator delete(v9);
    }
    if (*((char *)v8 + 119) < 0) {
      operator delete((void *)v8[12]);
    }
  }
  if (__p)
  {
    uint64_t v16 = __p;
    operator delete(__p);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  if (v20)
  {
    __int16 v21 = v20;
    operator delete(v20);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  if (v25)
  {
    uint64_t v26 = v25;
    operator delete(v25);
  }
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  uint64_t v10 = sub_10003156C((uint64_t)&v30, a1);
  if (v31 == (void **)v10)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    uint64_t v12 = *(unsigned char **)(v10 + 56);
    int v11 = *(unsigned char **)(v10 + 64);
    size_t v13 = v11 - v12;
    if (v11 != v12)
    {
      sub_1002B1BCC(a2, v11 - v12);
      BOOL v14 = (char *)a2[1];
      memmove(v14, v12, v13);
      a2[1] = &v14[v13];
    }
  }
  sub_1004AED38((uint64_t)&v30, v31[0]);
}

void sub_1004ACED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,uint64_t a40,char a41)
{
  for (uint64_t i = 96; i != -48; i -= 48)
    sub_1004ACFFC(v41 + i);
  if (__p) {
    operator delete(__p);
  }
  if (a19 < 0) {
    operator delete(a14);
  }
  if (a20) {
    operator delete(a20);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a29) {
    operator delete(a29);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1004ACFFC(uint64_t a1)
{
  unsigned __int8 v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

BOOL sub_1004AD040(uint64_t a1, uint64_t a2)
{
  int v3 = (char *)operator new(0x14uLL);
  *((_DWORD *)v3 + 4) = 325704422;
  *(_OWORD *)int v3 = xmmword_1007BECF8;
  v14[0] = (void **)v3;
  v14[1] = (void **)(v3 + 20);
  void v14[2] = (void **)(v3 + 20);
  uint64_t v4 = (char *)operator new(0x14uLL);
  *((_DWORD *)v4 + 4) = 601617057;
  *(_OWORD *)uint64_t v4 = xmmword_1007BED0C;
  v14[3] = (void **)v4;
  void v14[4] = (void **)(v4 + 20);
  v14[5] = (void **)(v4 + 20);
  uint64_t v5 = (char *)operator new(0x14uLL);
  v14[7] = (void **)(v5 + 20);
  v14[8] = (void **)(v5 + 20);
  *((_DWORD *)v5 + 4) = 2014317364;
  *(_OWORD *)uint64_t v5 = xmmword_1007BED20;
  v14[6] = (void **)v5;
  uint64_t v10 = operator new(0x48uLL);
  uint64_t v12 = v10 + 9;
  uint64_t v6 = 0;
  int v11 = sub_1004AED94((int)&v12, (uint64_t)v14, (uint64_t)&v15, v10);
  do
  {
    int v7 = v14[v6 + 6];
    if (v7)
    {
      v14[v6 + 7] = v7;
      operator delete(v7);
    }
    v6 -= 3;
  }
  while (v6 != -9);
  char v13 = 0;
  BOOL v8 = sub_1004AEED0((uint64_t)v10, (uint64_t)v11, a2) != (void)v11;
  v14[0] = (void **)&v10;
  sub_1004AEE24(v14);
  return v8;
}

void sub_1004AD1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a9;
  sub_1004AEE24(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1004AD268(uint64_t a1)
{
  unsigned __int8 v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v6) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: ------------------ Device Manager -------------------", (uint8_t *)&v6, 2u);
    unsigned __int8 v2 = qword_100A19E50;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v6) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Devices:", (uint8_t *)&v6, 2u);
  }
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 168);
  uint64_t v6 = 0;
  int v7 = 0;
  uint64_t v8 = 0;
  sub_100040550(&v6, a1 + 144);
  sub_10003AFE8((uint64_t)v9);
  int v3 = v6;
  uint64_t v4 = v7;
  if (v6 != v7)
  {
    do
      sub_10048CB40(*v3++);
    while (v3 != v4);
    int v3 = v6;
  }
  if (v3)
  {
    int v7 = v3;
    operator delete(v3);
  }
  return sub_10003AFB4((uint64_t)v9);
}

void sub_1004AD380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1004AD3B0(uint64_t a1)
{
  v16[0] = 0;
  v16[1] = 0;
  sub_10003AED0((uint64_t)v16, a1 + 168);
  char v13 = 0;
  BOOL v14 = 0;
  uint64_t v15 = 0;
  sub_100040550(&v13, a1 + 144);
  sub_10003AFE8((uint64_t)v16);
  unsigned __int8 v2 = v13;
  int v3 = v14;
  if (v13 != v14)
  {
    do
    {
      uint64_t v4 = *v2;
      if (sub_1004764A0(*v2))
      {
        if (qword_1009FB058 != -1) {
          dispatch_once(&qword_1009FB058, &stru_1009B0240);
        }
        uint64_t v5 = sub_100512018((uint64_t)off_1009FB050, v4);
        if (v5) {
          unsigned __int16 v6 = sub_1002766EC(v5 + 400);
        }
        else {
          unsigned __int16 v6 = 0;
        }
        uint64_t v12 = 0;
        int v11 = 0;
        if (sub_10047936C(v4))
        {
          LODWORD(__p[0]) = 0;
          sub_10047B7A8(v4, __p, (_DWORD *)&v12 + 1, &v12, &v11);
        }
        sub_100475F84(v4, (uint64_t)__p);
        if (v10 >= 0) {
          int v7 = __p;
        }
        else {
          int v7 = (void **)__p[0];
        }
        sub_100116360(v4 + 128, (const char *)v7, v6, WORD2(v12), (unsigned __int16)v12, v11);
        if (v10 < 0) {
          operator delete(__p[0]);
        }
      }
      ++v2;
    }
    while (v2 != v3);
    unsigned __int8 v2 = v13;
  }
  if (v2)
  {
    BOOL v14 = v2;
    operator delete(v2);
  }
  return sub_10003AFB4((uint64_t)v16);
}

void sub_1004AD53C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_1004AD594(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unsigned __int8 v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v6[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "DeviceManager init, first unlock delay expired, allow read/write device settings", (uint8_t *)v6, 2u);
  }
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, v1 + 168);
  atomic_store(1u, (unsigned __int8 *)(v1 + 232));
  int v3 = *(uint64_t **)(v1 + 144);
  uint64_t v4 = *(uint64_t **)(v1 + 152);
  while (v3 != v4)
    sub_100471F00(*v3++);
  sub_10003AFE8((uint64_t)v6);
  sub_1004A8D9C((os_unfair_lock_s *)v1);
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009B01C0);
  }
  sub_1004B5364((uint64_t)off_1009F7EA8);
  return sub_10003AFB4((uint64_t)v6);
}

void sub_1004AD68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1004AD6A4(uint64_t a1, int a2, uint64_t a3)
{
  if (!a2 || qword_100A131D8)
  {
    if (a2)
    {
      uint64_t v7 = sub_1004AF8EC();
      uint64_t v8 = (void *)qword_100A131D8;
      sub_1004AFF58(v7, a3, v8);
    }
    else
    {
      if (qword_100A131D8)
      {
        dispatch_block_cancel((dispatch_block_t)qword_100A131D8);
        BOOL v9 = (void *)qword_100A131D8;
      }
      else
      {
        BOOL v9 = 0;
      }
      qword_100A131D8 = 0;
    }
  }
  else
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1004AD8C4;
    block[3] = &unk_100997528;
    block[4] = a1;
    dispatch_block_t v4 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, block);
    uint64_t v5 = (void *)qword_100A131D8;
    qword_100A131D8 = (uint64_t)v4;

    uint64_t v6 = sub_1004AF8EC();
    sub_1004AFF58(v6, a3, (void *)qword_100A131D8);
  }
}

void *sub_1004AD7B8(uint64_t a1, unint64_t *a2)
{
  unsigned __int8 v2 = *(void **)(a1 + 8);
  if (!v2) {
LABEL_8:
  }
    abort();
  unint64_t v3 = *a2;
  while (1)
  {
    while (1)
    {
      unint64_t v4 = v2[4];
      if (v3 >= v4) {
        break;
      }
      unsigned __int8 v2 = (void *)*v2;
      if (!v2) {
        goto LABEL_8;
      }
    }
    if (v4 >= v3) {
      return v2 + 5;
    }
    unsigned __int8 v2 = (void *)v2[1];
    if (!v2) {
      goto LABEL_8;
    }
  }
}

void sub_1004AD808(uint64_t a1)
{
  sub_1000486F0(a1 + 272, *(void **)(a1 + 280));
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 272) = a1 + 280;
  unsigned __int8 v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 134217984;
    uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Wireless Splitter cleanUpGuestDevice due to unpairing  fGuestDevicesSize is %lu", (uint8_t *)&v3, 0xCu);
  }
}

void sub_1004AD8C4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unsigned __int8 v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    std::string::size_type v3 = *(void *)(v1 + 288);
    LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Wireless Splitter linkkey timeout check, fGuestDevicesSize is %lu", (uint8_t *)&buf, 0xCu);
  }
  if (*(void *)(v1 + 288))
  {
    uint64_t v4 = *(void *)(v1 + 272);
    if (*(unsigned char *)(v4 + 40))
    {
      uint64_t v5 = *(unsigned __int8 **)(v4 + 32);
      uint64_t v6 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18((uint64_t)v5, &buf);
        uint64_t v7 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? &buf
           : (std::string *)buf.__r_.__value_.__r.__words[0];
        *(_DWORD *)int v11 = 136446210;
        uint64_t v12 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Wireless Splitter linkkey timeout reached, guest device %{public}s needs to be deleted", v11, 0xCu);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
      }
      memset(&buf, 0, sizeof(buf));
      uint64_t v8 = sub_10004191C(&buf, "WS_ERROR_DISCONNECTION_LINK_KEY_TIMEOUT_REACHED");
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        uint64_t v8 = sub_10003B098(&__p, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = buf;
      }
      sub_1004A9D60((uint64_t)v8, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (qword_1009F8768 != -1) {
        dispatch_once(&qword_1009F8768, &stru_1009B0260);
      }
      sub_100611000((uint64_t)off_1009F8760, v5);
      sub_1004AD808(v1);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_1004ADAAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004ADAE8(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = sub_100030F10((uint64_t)a1, a3, 1);
  if (v7)
  {
    uint64_t v8 = v7;
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009B01A0);
    }
    int v9 = sub_1004E2340((uint64_t)off_1009F8068, a2, 10000);
    char v10 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_100475EE0(v8, (uint64_t)__p);
      if (v15 >= 0) {
        int v11 = __p;
      }
      else {
        int v11 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315394;
      uint64_t v17 = v11;
      __int16 v18 = 1024;
      int v19 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "ACL connected aclConnectCfm for device %s status %d", buf, 0x12u);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
    }
    sub_100480AE4(v8, v9, a4);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_1004ADCA4;
    v12[3] = &unk_1009B00E0;
    void v12[4] = v8;
    int v13 = v9;
    sub_1004ABB78(a1 + 60, v12);
  }
}

uint64_t sub_1004ADCA4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, *(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void sub_1004ADCD8(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_100030F10((uint64_t)a1, a3, 0);
  if (v7)
  {
    uint64_t v8 = v7;
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009B01A0);
    }
    int v9 = sub_1004E2340((uint64_t)off_1009F8068, a2, 10000);
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009B01A0);
    }
    int v10 = sub_1004E2340((uint64_t)off_1009F8068, a4, 10000);
    sub_100480C5C(v8, v9, v10);
    if (qword_1009F87A8 != -1) {
      dispatch_once(&qword_1009F87A8, &stru_1009B0160);
    }
    if (sub_10046EB8C((uint64_t)off_1009F87A0, v8)) {
      sub_10048C058(v8, 0);
    }
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    void v11[2] = sub_1004ADE54;
    v11[3] = &unk_1009B0100;
    uint8_t v11[4] = v8;
    int v12 = v9;
    int v13 = v10;
    sub_1004ABB78(a1 + 60, v11);
  }
}

uint64_t sub_1004ADE54(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void, void))(*(void *)a2 + 16))(a2, *(void *)(a1 + 32), *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44));
}

unsigned char *sub_1004ADE88(uint64_t a1)
{
  char v19 = 0;
  sub_10001B8E0(&v19);
  int v2 = sub_10017DFC4((uint64_t)&unk_1009FB900);
  if (v2)
  {
    std::string::size_type v3 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076E9E8(v2, v3);
    }
  }
  sub_10001B910(&v19);
  v18[0] = 0;
  v18[1] = 0;
  sub_10003AED0((uint64_t)v18, a1 + 168);
  char v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  sub_100040550(&v15, a1 + 144);
  sub_10003AFE8((uint64_t)v18);
  int v4 = _os_feature_enabled_impl();
  uint64_t v5 = (uint64_t *)v15;
  if (v4)
  {
    uint64_t v6 = v16;
    if (v15 != v16)
    {
      while (1)
      {
        uint64_t v7 = *v5;
        unsigned __int8 v14 = 0;
        uint64_t v8 = sub_1003708B0();
        sub_10004191C(__p, "_DENY_INCOMING_CLASSIC_CONNECTION_");
        BOOL v9 = !(*(unsigned int (**)(uint64_t, uint64_t, void **, unsigned __int8 *))(*(void *)v8 + 784))(v8, v7, __p, &v14)|| v14 == 0;
        BOOL v10 = !v9;
        if ((v13 & 0x80000000) == 0) {
          break;
        }
        operator delete(__p[0]);
        if (v10) {
          goto LABEL_16;
        }
LABEL_17:
        if (++v5 == v6)
        {
          uint64_t v5 = (uint64_t *)v15;
          goto LABEL_19;
        }
      }
      if (!v10) {
        goto LABEL_17;
      }
LABEL_16:
      sub_10048E36C(v7, v14);
      goto LABEL_17;
    }
  }
LABEL_19:
  if (v5)
  {
    uint64_t v16 = v5;
    operator delete(v5);
  }
  sub_10003AFB4((uint64_t)v18);
  return sub_10001B8AC(&v19);
}

void sub_1004AE030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  sub_10003AFB4((uint64_t)&a19);
  sub_10001B8AC((unsigned char *)(v19 - 49));
  _Unwind_Resume(a1);
}

unsigned char *sub_1004AE090(uint64_t a1)
{
  return sub_1004ADE88(a1 - 40);
}

unsigned char *sub_1004AE098(uint64_t a1)
{
  int v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "DeviceManager::stackWillStop enter", buf, 2u);
  }
  char v15 = 0;
  sub_10001B8E0(&v15);
  int v3 = sub_10017E0B8((uint64_t)&unk_1009FB900);
  if (v3)
  {
    int v4 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076EA60(v3, v4);
    }
  }
  sub_10017EFC0();
  sub_10001B910(&v15);
  *(void *)std::string buf = 0;
  uint64_t v14 = 0;
  sub_10003AED0((uint64_t)buf, a1 + 168);
  uint64_t v6 = *(void *)(a1 + 144);
  for (uint64_t i = *(void *)(a1 + 152); v6 != i; v6 += 8)
  {
    unint64_t v7 = ((unint64_t)*(unsigned __int8 *)(*(void *)v6 + 128) << 40) | ((unint64_t)*(unsigned __int8 *)(*(void *)v6 + 129) << 32) | ((unint64_t)*(unsigned __int8 *)(*(void *)v6 + 130) << 24) | ((unint64_t)*(unsigned __int8 *)(*(void *)v6 + 131) << 16) | ((unint64_t)*(unsigned __int8 *)(*(void *)v6 + 132) << 8) | *(unsigned __int8 *)(*(void *)v6 + 133);
    if (v7)
    {
      uint64_t v8 = sub_1004AF8EC();
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      void v12[2] = sub_1004AE2A0;
      v12[3] = &unk_100998260;
      void v12[4] = a1;
      void v12[5] = v7;
      sub_100013018(v8, v12);
      uint64_t i = *(void *)(a1 + 152);
    }
  }
  BOOL v9 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "DeviceManager::stackWillStop exit", v11, 2u);
  }
  sub_10003AFB4((uint64_t)buf);
  return sub_10001B8AC(&v15);
}

void sub_1004AE278(_Unwind_Exception *a1)
{
  sub_10001B8AC((unsigned char *)(v1 - 81));
  _Unwind_Resume(a1);
}

void sub_1004AE2A0(uint64_t a1)
{
}

unsigned char *sub_1004AE2B4(uint64_t a1)
{
  return sub_1004AE098(a1 - 40);
}

void *sub_1004AE2CC(void *__dst, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10003B098(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v5;
  }
  __dst[3] = 0;
  __dst[4] = 0;
  __dst[5] = 0;
  uint64_t v6 = *(const void **)a3;
  size_t v7 = *(void *)(a3 + 8) - *(void *)a3;
  if (v7)
  {
    sub_1002B1BCC(__dst + 3, v7);
    uint64_t v8 = (char *)__dst[4];
    memmove(v8, v6, v7);
    __dst[4] = &v8[v7];
  }
  return __dst;
}

void sub_1004AE364(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004AE380(int a1, uint64_t a2, unsigned __int8 *a3)
{
  unint64_t v4 = ((unint64_t)*a3 << 40) | ((unint64_t)a3[1] << 32) | ((unint64_t)a3[2] << 24) | ((unint64_t)a3[3] << 16) | ((unint64_t)a3[4] << 8) | a3[5];
  char v5 = *(unsigned char *)(a2 + 327);
  uint64_t v6 = sub_1004AF8EC();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1004AE544;
  v7[3] = &unk_1009A6D98;
  int v8 = a1;
  v7[4] = v4;
  char v9 = v5;
  sub_100013018(v6, v7);
}

void sub_1004AE440(int a1, uint64_t a2, int a3)
{
  __int16 v13 = 0;
  int v12 = 0;
  if (sub_10017E37C(a2, (uint64_t)&v12))
  {
    uint64_t v6 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076EAD8(a2, v6);
    }
  }
  else
  {
    unint64_t v7 = ((unint64_t)v12 << 40) | ((unint64_t)BYTE1(v12) << 32) | ((unint64_t)BYTE2(v12) << 24) | ((unint64_t)HIBYTE(v12) << 16) | ((unint64_t)v13 << 8) | HIBYTE(v13);
    uint64_t v8 = sub_1004AF8EC();
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_1004AE62C;
    v9[3] = &unk_100998260;
    v9[4] = v7;
    int v10 = a1;
    int v11 = a3;
    sub_100013018(v8, v9);
  }
}

void sub_1004AE544(uint64_t a1)
{
  int v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 40);
    v4[0] = 67109120;
    v4[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Device connected connectCfmCb status %d", (uint8_t *)v4, 8u);
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009B0200);
  }
  sub_1004ADAE8((os_unfair_lock_s *)off_1009F7EF8, *(unsigned int *)(a1 + 40), *(void *)(a1 + 32), *(unsigned char *)(a1 + 44));
}

void sub_1004AE62C(uint64_t a1)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009B0200);
  }
  int v2 = (os_unfair_lock_s *)off_1009F7EF8;
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(unsigned int *)(a1 + 40);
  uint64_t v5 = *(unsigned int *)(a1 + 44);

  sub_1004ADCD8(v2, v4, v3, v5);
}

void sub_1004AE694(id a1)
{
}

void sub_1004AE6D8()
{
}

void sub_1004AE6FC(id a1)
{
}

void sub_1004AE740()
{
}

void sub_1004AE764(id a1)
{
}

void sub_1004AE7A8()
{
}

void sub_1004AE7CC(id a1)
{
}

void sub_1004AE810()
{
}

void sub_1004AE834(id a1)
{
}

void sub_1004AE878()
{
}

void sub_1004AE89C(id a1)
{
}

void sub_1004AE8E0()
{
}

void sub_1004AE904(id a1)
{
}

void sub_1004AE948()
{
}

void sub_1004AE96C(id a1)
{
}

void sub_1004AE9B0()
{
}

void sub_1004AE9D4(id a1)
{
}

void sub_1004AEA18()
{
}

uint64_t sub_1004AEA3C(uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 48 * a3;
    do
    {
      sub_1004AEAC0((uint64_t **)a1, v4, a2, (long long *)a2);
      a2 += 6;
      v6 -= 48;
    }
    while (v6);
  }
  return a1;
}

void sub_1004AEAA8(_Unwind_Exception *a1)
{
  sub_1004AED38(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1004AEAC0(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  uint64_t v11 = 0;
  int v12 = 0;
  uint64_t v6 = sub_1002B360C(a1, a2, &v12, &v11, a3);
  unint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    sub_1004AEB64((uint64_t)a1, a4, v10);
    sub_100036CA0(a1, (uint64_t)v12, v8, v10[0]);
    unint64_t v7 = v10[0];
    v10[0] = 0;
    sub_1004AEC88((uint64_t)v10, 0);
  }
  return v7;
}

void *sub_1004AEB64@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t result = sub_1004AEBD8(v6 + 4, a2);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_1004AEBC0(_Unwind_Exception *a1)
{
  sub_1004AEC88(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_1004AEBD8(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10003B098(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v4;
  }
  __dst[3] = 0;
  __dst[4] = 0;
  __dst[5] = 0;
  uint64_t v6 = (unsigned char *)*((void *)a2 + 3);
  uint64_t v5 = (unsigned char *)*((void *)a2 + 4);
  size_t v7 = v5 - v6;
  if (v5 != v6)
  {
    sub_1002B1BCC(__dst + 3, v5 - v6);
    uint64_t v8 = (char *)__dst[4];
    memmove(v8, v6, v7);
    __dst[4] = &v8[v7];
  }
  return __dst;
}

void sub_1004AEC6C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004AEC88(uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1004AECE0((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_1004AECE0(uint64_t a1)
{
  int v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void sub_1004AED38(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1004AED38(a1, *a2);
    sub_1004AED38(a1, a2[1]);
    sub_1004AECE0((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void *sub_1004AED94(int a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      uint64_t v8 = *(const void **)v6;
      uint64_t v7 = *(void *)(v6 + 8);
      size_t v9 = v7 - *(void *)v6;
      if (v7 != *(void *)v6)
      {
        sub_1002B1BCC(a4, v7 - *(void *)v6);
        int v10 = (char *)a4[1];
        memmove(v10, v8, v9);
        a4[1] = &v10[v9];
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_1004AEE24(void ***a1)
{
  int v2 = *a1;
  if (*v2)
  {
    sub_1004AEE78((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_1004AEE78(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      uint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

uint64_t sub_1004AEED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    uint64_t v5 = *(const void **)a3;
    size_t v6 = *(void *)(a3 + 8) - *(void *)a3;
    while (*(void *)(v3 + 8) - *(void *)v3 != v6 || memcmp(*(const void **)v3, v5, v6))
    {
      v3 += 24;
      if (v3 == a2) {
        return a2;
      }
    }
  }
  return v3;
}

void sub_1004AEF40(id a1)
{
}

void sub_1004AEF84()
{
}

uint64_t **sub_1004AEFA8(uint64_t **a1, unint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = a1 + 1;
  size_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        size_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        size_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      size_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    size_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x30uLL);
    uint8_t v11[4] = **a4;
    *((unsigned char *)v11 + 40) = 0;
    sub_100036CA0(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_1004AF06C(id a1)
{
}

void sub_1004AF0B0()
{
}

uint64_t sub_1004AF0D4(unsigned __int8 *a1, unsigned char *a2, unsigned char *a3)
{
  long long v17 = 0uLL;
  int v6 = *a1;
  if (v6 == 16)
  {
LABEL_6:
    uint64_t result = sub_10071D240(a1, &v17);
    goto LABEL_7;
  }
  if (v6 != 2)
  {
    unint64_t v8 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
      sub_10076EB50((uint64_t)a1, v8);
    }
    goto LABEL_6;
  }
  __int16 v16 = 0;
  uint64_t result = sub_10071D240(a1, &v16);
  long long v17 = xmmword_1007B9570;
  WORD1(v17) = v16;
LABEL_7:
  unsigned int v9 = 0;
  unint64_t v10 = &v17;
  int v11 = 15;
  do
  {
    int v12 = v11;
    v9 ^= *(unsigned __int8 *)v10;
    int v13 = 8;
    do
    {
      int v14 = 2 * v9;
      int v15 = (char)v9;
      unsigned int v9 = (2 * v9) ^ 9;
      if (v15 >= 0) {
        unsigned int v9 = v14;
      }
      --v13;
    }
    while (v13);
    unint64_t v10 = (long long *)((char *)v10 + 1);
    int v11 = v12 - 1;
  }
  while (v12);
  *a2 = (v9 >> 3) & 0xF;
  *a3 = v9 & 7;
  return result;
}

uint64_t sub_1004AF20C(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  for (unsigned int i = 0; a4; --a4)
  {
    char v5 = *a3++;
    unsigned int i = byte_1007BEDC0[(v5 ^ i)];
  }
  return (*(unsigned __int8 *)(a1 + ((unint64_t)i >> 3)) >> (i & 7)) & 1;
}

uint64_t sub_1004AF250(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  for (unsigned int i = 0; a4; --a4)
  {
    char v5 = *a3++;
    unsigned int i = byte_1007BEDC0[(v5 ^ i)];
  }
  unint64_t v6 = (unint64_t)i >> 3;
  char v7 = i & 7;
  int v8 = *(unsigned __int8 *)(a1 + v6);
  int v9 = 1 << v7;
  if ((v9 & v8) != 0) {
    return 0;
  }
  *(unsigned char *)(a1 + v6) = v8 | v9;
  return 1;
}

void *sub_1004AF2B0(void *a1, int a2, unsigned int a3, unsigned int a4)
{
  *a1 = &off_1009B0420;
  uint64_t v8 = (uint64_t)(a1 + 1);
  global_queue = dispatch_get_global_queue(21, 0);
  sub_10027710C(v8, (int)a1, "com.apple.BTServer.pbap", global_queue);
  int v10 = a2 - 3;
  if ((a2 - 3) >= 7 || ((0x5Fu >> v10) & 1) == 0)
  {
    uint64_t v14 = sub_100017768();
    sub_1005C99C8(v14, 0);
  }
  int v11 = (&off_1009B0448)[v10];
  sub_10027714C(v8);
  xpc_object_t v12 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_string(v12, "kArgType", v11);
  xpc_dictionary_set_uint64(v12, "kArgOffset", a3);
  xpc_dictionary_set_uint64(v12, "kArgCount", a4);
  sub_100277398(v8, "Open", v12, 0);
  return a1;
}

void sub_1004AF3D4(_Unwind_Exception *a1)
{
  sub_100277148(v1);
  _Unwind_Resume(a1);
}

void *sub_1004AF3F0(void *a1)
{
  *a1 = &off_1009B0420;
  sub_100277148(a1 + 1);
  return a1;
}

void sub_1004AF434(void *a1)
{
  *a1 = &off_1009B0420;
  sub_100277148(a1 + 1);

  operator delete();
}

void sub_1004AF498(uint64_t a1)
{
  v1[0] = _NSConcreteStackBlock;
  v1[1] = 3221225472;
  v1[2] = sub_1004AF50C;
  v1[3] = &unk_100997528;
  v1[4] = a1;
  sub_1002771FC(a1 + 8, v1);
}

uint64_t sub_1004AF50C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  return result;
}

uint64_t sub_1004AF53C(uint64_t a1)
{
  uint64_t v4 = 0;
  char v5 = &v4;
  uint64_t v6 = 0x2020000000;
  int v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1004AF608;
  v3[3] = &unk_100997508;
  v3[4] = &v4;
  sub_1002774C0(a1 + 8, "GetSize", 0, v3);
  uint64_t v1 = *((unsigned int *)v5 + 6);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1004AF5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1004AF608(uint64_t a1, xpc_object_t xdict)
{
  uint64_t result = xpc_dictionary_get_uint64(xdict, "kValue");
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_1004AF648(uint64_t a1, unsigned int a2)
{
  uint64_t v8 = 0;
  int v9 = &v8;
  uint64_t v10 = 0x2020000000;
  uint64_t v11 = 0;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_uint64(v4, "kArgIndex", a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1004AF74C;
  v7[3] = &unk_100997508;
  v7[4] = &v8;
  sub_1002774C0(a1 + 8, "GetRecentCall", v4, v7);
  uint64_t v5 = v9[3];
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1004AF734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1004AF74C()
{
}

void sub_1004AF8D4()
{
  uint64_t v0 = sub_100017768();
  sub_1005C99C8(v0, 0);
}

uint64_t sub_1004AF8EC()
{
  if (qword_100A131E8 != -1) {
    dispatch_once(&qword_100A131E8, &stru_1009B0480);
  }
  return qword_100A131E0;
}

void sub_1004AF930(id a1)
{
}

void *sub_1004AF984(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  result[1] = 0;
  return result;
}

void sub_1004AF98C(uint64_t a1, dispatch_qos_class_t a2)
{
  if (*(void *)(a1 + 8))
  {
    xpc_object_t v4 = qword_100A19FD8;
    if (os_log_type_enabled((os_log_t)qword_100A19FD8, OS_LOG_TYPE_FAULT)) {
      sub_10076EC0C(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }
  xpc_object_t v12 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  int v13 = dispatch_queue_attr_make_with_qos_class(v12, a2, 0);
  *(void *)(a1 + 8) = dispatch_queue_create(*(const char **)a1, v13);
  if (qword_1009FB920 != -1) {
    dispatch_once(&qword_1009FB920, &stru_1009B05F8);
  }
  sub_1004B009C((NSObject **)qword_1009FB918, *(dispatch_queue_t *)(a1 + 8));
}

void sub_1004AFA48(id a1)
{
}

uint64_t sub_1004AFA9C()
{
  if (qword_100A13208 != -1) {
    dispatch_once(&qword_100A13208, &stru_1009B04C0);
  }
  return qword_100A13200;
}

void sub_1004AFAE0(id a1)
{
}

uint64_t sub_1004AFB34()
{
  if (qword_100A13218 != -1) {
    dispatch_once(&qword_100A13218, &stru_1009B04E0);
  }
  return qword_100A13210;
}

void sub_1004AFB78(id a1)
{
}

uint64_t sub_1004AFBCC()
{
  if (qword_100A13228 != -1) {
    dispatch_once(&qword_100A13228, &stru_1009B0500);
  }
  return qword_100A13220;
}

void sub_1004AFC10(id a1)
{
}

uint64_t sub_1004AFC64()
{
  if (qword_100A13238 != -1) {
    dispatch_once(&qword_100A13238, &stru_1009B0520);
  }
  return qword_100A13230;
}

void sub_1004AFCA8(id a1)
{
}

uint64_t sub_1004AFCFC()
{
  if (qword_100A13248 != -1) {
    dispatch_once(&qword_100A13248, &stru_1009B0540);
  }
  return qword_100A13240;
}

void sub_1004AFD40(id a1)
{
}

uint64_t sub_1004AFD94()
{
  if (qword_100A13258 != -1) {
    dispatch_once(&qword_100A13258, &stru_1009B0560);
  }
  return qword_100A13250;
}

void sub_1004AFDD8(id a1)
{
}

uint64_t sub_1004AFE2C()
{
  if (qword_100A13268 != -1) {
    dispatch_once(&qword_100A13268, &stru_1009B0580);
  }
  return qword_100A13260;
}

void sub_1004AFE70(id a1)
{
}

void sub_1004AFEC4(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    if (qword_1009FB920 != -1) {
      dispatch_once(&qword_1009FB920, &stru_1009B05F8);
    }
    sub_1004B0164((NSObject **)qword_1009FB918, *(dispatch_queue_t *)(a1 + 8));
    dispatch_release(*(dispatch_object_t *)(a1 + 8));
    *(void *)(a1 + 8) = 0;
  }
}

uint64_t sub_1004AFF30(uint64_t a1)
{
  return a1;
}

void sub_1004AFF58(uint64_t a1, uint64_t a2, void *a3)
{
  int64_t v4 = 1000000 * a2;
  dispatch_block_t block = a3;
  dispatch_time_t v5 = dispatch_time(0, v4);
  dispatch_after(v5, *(dispatch_queue_t *)(a1 + 8), block);
}

void sub_1004AFFC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (qword_100A131E8 != -1) {
    dispatch_once(&qword_100A131E8, &stru_1009B0480);
  }
  if (qword_100A131E0 == a1)
  {
    int64_t v4 = qword_100A19FD8;
    if (os_log_type_enabled((os_log_t)qword_100A19FD8, OS_LOG_TYPE_FAULT)) {
      sub_10076EC84(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }
  dispatch_async_and_wait(*(dispatch_queue_t *)(a1 + 8), v3);
}

const char *sub_1004B0060(const char **a1)
{
  uint64_t result = dispatch_queue_get_label(0);
  if (result) {
    return (const char *)(strcmp(result, *a1) == 0);
  }
  return result;
}

void sub_1004B009C(NSObject **a1, dispatch_queue_t queue)
{
  if (dispatch_queue_get_qos_class(queue, 0) >= QOS_CLASS_DEFAULT)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19FD8, OS_LOG_TYPE_DEBUG)) {
      sub_10076ECFC(queue);
    }
    int64_t v4 = *a1;
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    _DWORD v5[2] = sub_1004B081C;
    v5[3] = &unk_100998260;
    v5[4] = a1;
    void v5[5] = queue;
    dispatch_async(v4, v5);
  }
}

void sub_1004B0164(NSObject **a1, dispatch_queue_t queue)
{
  if (dispatch_queue_get_qos_class(queue, 0) >= QOS_CLASS_DEFAULT)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19FD8, OS_LOG_TYPE_DEBUG)) {
      sub_10076ED78(queue);
    }
    int64_t v4 = *a1;
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    _DWORD v5[2] = sub_1004B085C;
    v5[3] = &unk_100998260;
    v5[4] = a1;
    void v5[5] = queue;
    dispatch_sync(v4, v5);
  }
}

BOOL sub_1004B022C(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    (*(void (**)(unsigned char *, uint64_t))(*(void *)a2 + 24))(a2, v2);
  }
  else if (a2 && a2[8])
  {
    (*(void (**)(unsigned char *))(*(void *)a2 + 8))(a2);
  }
  return v2 != 0;
}

void sub_1004B02BC(void *a1, NSObject *a2)
{
  int64_t v4 = (void (__cdecl *)(void *))(*(uint64_t (**)(void *))(*(void *)a1 + 32))(a1);

  dispatch_async_f(a2, a1, v4);
}

void sub_1004B0320(void *a1, NSObject *a2)
{
  dispatch_time_t v4 = dispatch_time(0, 1000000 * a1[2]);
  uint64_t v5 = (void (__cdecl *)(void *))(*(uint64_t (**)(void *))(*a1 + 32))(a1);

  dispatch_after_f(v4, a2, a1, v5);
}

unsigned char *sub_1004B03B0(unsigned char *result)
{
  uint64_t v1 = result;
  if (!result[9]) {
    uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)result + 16))(result);
  }
  if (v1[8])
  {
    uint64_t v2 = *(uint64_t (**)(unsigned char *))(*(void *)v1 + 8);
    return (unsigned char *)v2(v1);
  }
  return result;
}

void sub_1004B0448(uint64_t a1, NSObject *a2)
{
  if (!atomic_fetch_add((atomic_uint *volatile)(a1 + 56), 1u))
  {
    sub_10036FC10(&v6, (void *)(a1 + 24));
    long long v4 = v6;
    long long v6 = 0uLL;
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 48);
    *(_OWORD *)(a1 + 40) = v4;
    if (v5)
    {
      sub_10008A294(v5);
      if (*((void *)&v6 + 1)) {
        sub_10008A294(*((std::__shared_weak_count **)&v6 + 1));
      }
    }
  }
  sub_1004B0320((void *)a1, a2);
}

void sub_1004B04C0(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    long long v4 = std::__shared_weak_count::lock(v2);
    if (v4 && v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    long long v4 = 0;
  }
  if (atomic_fetch_add((atomic_uint *volatile)(a1 + 56), 0xFFFFFFFF) == 1)
  {
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 48);
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    if (v5) {
      sub_10008A294(v5);
    }
  }
  if (v4) {
    sub_10008A294(v4);
  }
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1004B059C(_Unwind_Exception *a1)
{
  sub_10008A294(v2);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void *sub_1004B05B8(void *a1)
{
  a1[2] = 0;
  a1[1] = a1 + 2;
  a1[6] = 0;
  a1[7] = 0;
  a1[5] = 0;
  a1[3] = 0;
  a1[4] = a1 + 5;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1004B066C;
  block[3] = &unk_100997528;
  block[4] = a1;
  if (qword_100A13270 != -1) {
    dispatch_once(&qword_100A13270, block);
  }
  return a1;
}

void sub_1004B066C(uint64_t a1)
{
  uint64_t v1 = *(dispatch_queue_t **)(a1 + 32);
  uint64_t v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  uint64_t v3 = dispatch_queue_attr_make_with_qos_class(v2, QOS_CLASS_DEFAULT, 0);
  dispatch_queue_t *v1 = dispatch_queue_create("com.apple.bluetooth.DispatcherWatchdog", v3);

  sub_1004B06CC((uint64_t)v1);
}

void sub_1004B06CC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = (void *)(a1 + 16);
  if (v2 != (void *)(a1 + 16))
  {
    do
    {
      long long v4 = v2[4];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1004B0D38;
      block[3] = &unk_100998260;
      block[4] = a1;
      void block[5] = v4;
      dispatch_async(v4, block);
      uint64_t v5 = (void *)v2[1];
      if (v5)
      {
        do
        {
          long long v6 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          long long v6 = (void *)v2[2];
          BOOL v7 = *v6 == (void)v2;
          uint64_t v2 = v6;
        }
        while (!v7);
      }
      uint64_t v2 = v6;
    }
    while (v6 != v3);
  }
  dispatch_time_t v8 = dispatch_time(0, 300000000000);
  uint64_t v9 = *(NSObject **)a1;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_1004B0E24;
  v10[3] = &unk_100997528;
  void v10[4] = a1;
  dispatch_after(v8, v9, v10);
}

uint64_t *sub_1004B081C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t result = sub_100051620((uint64_t **)(v1 + 8), (unint64_t *)(a1 + 40), (uint64_t *)(a1 + 40));
  ++*(void *)(v1 + 56);
  return result;
}

uint64_t sub_1004B085C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t result = sub_1000517A4(v1 + 8, (unint64_t *)(a1 + 40));
  --*(void *)(v1 + 56);
  return result;
}

void sub_1004B0898(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)a1);
  if (os_log_type_enabled((os_log_t)qword_100A19FD8, OS_LOG_TYPE_ERROR)) {
    sub_10076EF2C();
  }
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 16))
  {
    uint64_t v3 = qword_100A19FD8;
    do
    {
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        label = dispatch_queue_get_label((dispatch_queue_t)v2[4]);
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)label;
        _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
        uint64_t v3 = qword_100A19FD8;
      }
      long long v4 = (void *)v2[1];
      if (v4)
      {
        do
        {
          uint64_t v5 = v4;
          long long v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v5 = (void *)v2[2];
          BOOL v6 = *v5 == (void)v2;
          uint64_t v2 = v5;
        }
        while (!v6);
      }
      uint64_t v2 = v5;
    }
    while (v5 != (void *)(a1 + 16));
  }
  memset(&buf, 0, sizeof(buf));
  sub_10004191C(&buf, "BT Stuck on ");
  if (os_log_type_enabled((os_log_t)qword_100A19FD8, OS_LOG_TYPE_ERROR)) {
    sub_10076EEEC();
  }
  dispatch_time_t v8 = *(void **)(a1 + 32);
  if (v8 != (void *)(a1 + 40))
  {
    do
    {
      uint64_t v9 = v8[4];
      uint64_t v10 = qword_100A19FD8;
      if (os_log_type_enabled((os_log_t)qword_100A19FD8, OS_LOG_TYPE_ERROR)) {
        sub_10076EE80(v23, v9, &v24, v10);
      }
      uint64_t v11 = dispatch_queue_get_label(v9);
      std::string::append(&buf, v11);
      std::string::append(&buf, " ");
      xpc_object_t v12 = (void *)v8[1];
      if (v12)
      {
        do
        {
          int v13 = v12;
          xpc_object_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          int v13 = (void *)v8[2];
          BOOL v6 = *v13 == (void)v8;
          dispatch_time_t v8 = v13;
        }
        while (!v6);
      }
      dispatch_time_t v8 = v13;
    }
    while (v13 != (void *)(a1 + 40));
  }
  WriteStackshotReport_stdc();
  if (qword_1009FB088 != -1) {
    dispatch_once(&qword_1009FB088, &stru_1009B0618);
  }
  uint64_t v14 = qword_1009FB080;
  sub_10004191C(v21, "DispatcherWatchdog");
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_std::string buf = &buf;
  }
  else {
    p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
  }
  sub_10004191C(__p, (char *)p_buf);
  sub_1004B7DA8(0.0, v14, (uint64_t *)v21, (uint64_t *)__p);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  if (qword_100A13280 != -1) {
    dispatch_once(&qword_100A13280, &stru_1009B05A0);
  }
  if (byte_100A13278)
  {
    sub_10025B8C0();
    long long v17 = &buf;
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      long long v17 = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    qword_1009FC078 = (uint64_t)v17;
    uint64_t v18 = sub_100017768();
    sub_1005C99C8(v18, 0);
  }
  __int16 v16 = qword_100A19FD8;
  if (os_log_type_enabled((os_log_t)qword_100A19FD8, OS_LOG_TYPE_FAULT)) {
    sub_10076EDF4((char *)&buf.__r_.__value_.__r.__words[2] + 7, &buf, v16);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
}

void sub_1004B0C04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004B0C60(id a1)
{
  uint64_t v1 = sub_100017768();
  sub_10004191C(v4, "DispatcherWatchdog");
  sub_10004191C(__p, "enableCrash");
  (*(void (**)(uint64_t, void **, void **, char *))(*(void *)v1 + 72))(v1, v4, __p, &byte_100A13278);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_1004B0D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004B0D38(uint64_t a1)
{
  long long v1 = *(_OWORD *)(a1 + 32);
  uint64_t v2 = **(NSObject ***)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1004B0DB4;
  v3[3] = &unk_100998260;
  long long v4 = v1;
  dispatch_async(v2, v3);
}

uint64_t sub_1004B0DB4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (os_log_type_enabled((os_log_t)qword_100A19FD8, OS_LOG_TYPE_DEBUG)) {
    sub_10076EF6C(a1);
  }
  ++*(void *)(v2 + 56);
  return sub_1000517A4(v2 + 32, (unint64_t *)(a1 + 40));
}

void sub_1004B0E24(uint64_t a1)
{
}

void sub_1004B0E2C(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)a1);
  if (os_log_type_enabled((os_log_t)qword_100A19FD8, OS_LOG_TYPE_DEBUG)) {
    sub_10076EFEC();
  }
  if (*(void *)(a1 + 56) != *(void *)(a1 + 24)) {
    sub_1004B0898(a1);
  }
  uint64_t v2 = *(NSObject **)a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1004B0EF0;
  block[3] = &unk_100997528;
  block[4] = a1;
  dispatch_async(v2, block);
}

uint64_t sub_1004B0EF0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (os_log_type_enabled((os_log_t)qword_100A19FD8, OS_LOG_TYPE_DEBUG)) {
    sub_10076F02C();
  }
  *(void *)(v1 + 56) = 0;
  sub_1004B0FD0((uint64_t **)(v1 + 32), *(void **)(v1 + 8), (void *)(v1 + 16));
  return sub_1004B06CC(v1);
}

void sub_1004B0F54(id a1)
{
}

void sub_1004B0F8C(id a1)
{
}

uint64_t **sub_1004B0FD0(uint64_t **result, void *a2, void *a3)
{
  char v5 = result;
  if (result[2])
  {
    BOOL v6 = *result;
    BOOL v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      dispatch_time_t v8 = (uint64_t *)v6[1];
    }
    else {
      dispatch_time_t v8 = v6;
    }
    uint64_t v14 = result;
    int v15 = v8;
    __int16 v16 = v8;
    if (v8)
    {
      int v15 = sub_1002D8040((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          v8[4] = v9[4];
          sub_1002E6C1C(v5, v8);
          dispatch_time_t v8 = v15;
          __int16 v16 = v15;
          if (v15) {
            int v15 = sub_1002D8040((uint64_t)v15);
          }
          uint64_t v10 = (void *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              uint64_t v10 = (void *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v11 = *a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          uint64_t v9 = a2;
        }
        while (a2 != a3);
      }
    }
    uint64_t result = (uint64_t **)sub_1002D8094((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)sub_1002E6C8C(v5, a2 + 4);
      xpc_object_t v12 = (void *)a2[1];
      if (v12)
      {
        do
        {
          int v13 = v12;
          xpc_object_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          int v13 = (void *)a2[2];
          BOOL v11 = *v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1004B1120(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002D8094((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004B1134(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

uint64_t sub_1004B1154(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 96);
  if (a2)
  {
    char v5 = *(void **)(v3 + 160);
    long long v4 = *(void **)(v3 + 168);
    if (v5 != v4)
    {
      while (*v5 != a2)
      {
        if (++v5 == v4)
        {
          char v5 = *(void **)(v3 + 168);
          break;
        }
      }
    }
    if (v5 == v4) {
      uint64_t v3 = 0;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  sub_10003AFB4((uint64_t)v7);
  return v3;
}

unint64_t sub_1004B11D8(void *a1, unint64_t a2)
{
  v22[0] = 0;
  v22[1] = 0;
  sub_10003AED0((uint64_t)v22, (uint64_t)(a1 + 12));
  if (!a2) {
    goto LABEL_12;
  }
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009B0958);
  }
  unint64_t v4 = sub_1000181D0(qword_1009F8160, a2);
  if (v4)
  {
    char v5 = (unint64_t *)a1[20];
    if (v5 == (unint64_t *)a1[21])
    {
LABEL_14:
      if (qword_1009F8168 != -1) {
        dispatch_once(&qword_1009F8168, &stru_1009B0958);
      }
      unint64_t v6 = sub_1005532C4(qword_1009F8160, v4);
      if (v6)
      {
        unint64_t v8 = a1[22];
        uint64_t v9 = (unint64_t *)a1[21];
        if ((unint64_t)v9 >= v8)
        {
          uint64_t v11 = a1[20];
          uint64_t v12 = ((uint64_t)v9 - v11) >> 3;
          if ((unint64_t)(v12 + 1) >> 61) {
            abort();
          }
          uint64_t v13 = v8 - v11;
          uint64_t v14 = v13 >> 2;
          if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
            uint64_t v14 = v12 + 1;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v14;
          }
          if (v15) {
            __int16 v16 = (char *)sub_1000405F8((uint64_t)(a1 + 22), v15);
          }
          else {
            __int16 v16 = 0;
          }
          long long v17 = (unint64_t *)&v16[8 * v12];
          uint64_t v18 = &v16[8 * v15];
          unint64_t *v17 = v6;
          uint64_t v10 = v17 + 1;
          char v20 = (char *)a1[20];
          uint64_t v19 = (char *)a1[21];
          if (v19 != v20)
          {
            do
            {
              unint64_t v21 = *((void *)v19 - 1);
              v19 -= 8;
              *--long long v17 = v21;
            }
            while (v19 != v20);
            uint64_t v19 = (char *)a1[20];
          }
          a1[20] = v17;
          a1[21] = v10;
          a1[22] = v18;
          if (v19) {
            operator delete(v19);
          }
        }
        else
        {
          unint64_t *v9 = v6;
          uint64_t v10 = v9 + 1;
        }
        a1[21] = v10;
      }
    }
    else
    {
      while (1)
      {
        unint64_t v6 = *v5;
        if (*v5 == a2) {
          break;
        }
        if (qword_1009F8168 != -1) {
          dispatch_once(&qword_1009F8168, &stru_1009B0958);
        }
        if (sub_1000181D0(qword_1009F8160, v6) == v4) {
          goto LABEL_13;
        }
        if (++v5 == (unint64_t *)a1[21]) {
          goto LABEL_14;
        }
      }
      unint64_t v6 = a2;
    }
  }
  else
  {
LABEL_12:
    unint64_t v6 = 0;
  }
LABEL_13:
  sub_10003AFB4((uint64_t)v22);
  return v6;
}

void sub_1004B13E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1004B1408(uint64_t a1, void *a2)
{
  v10[0] = (uint64_t)v10;
  v10[1] = (uint64_t)v10;
  void v10[2] = 0;
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2 != (void *)a1)
  {
    do
    {
      unint64_t v6 = (void *)v2[1];
      uint64_t v5 = v2[2];
      if (v5 == *a2)
      {
        if (v6 == (void *)a1)
        {
          BOOL v8 = 1;
LABEL_8:
          unint64_t v6 = (void *)a1;
        }
        else
        {
          while (1)
          {
            uint64_t v7 = v6[2];
            BOOL v8 = v7 == v5;
            if (v7 != v5) {
              break;
            }
            unint64_t v6 = (void *)v6[1];
            if (v6 == (void *)a1) {
              goto LABEL_8;
            }
          }
        }
        sub_1004B6F90((uint64_t)v10, v10, a1, v2, v6);
        if (!v8) {
          unint64_t v6 = (void *)v6[1];
        }
      }
      uint64_t v2 = v6;
    }
    while (v6 != (void *)a1);
  }
  return sub_1002B308C(v10);
}

void sub_1004B14C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002B308C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004B14D8(void *a1, unint64_t a2, int a3)
{
  v18[1] = 0;
  unint64_t v19 = a2;
  v18[0] = 0;
  sub_10003AED0((uint64_t)v18, (uint64_t)(a1 + 72));
  unint64_t v6 = a1 + 80;
  if (a3)
  {
    for (unsigned int i = (void *)a1[81]; i != v6; unsigned int i = (void *)i[1])
    {
      if (i[2] == a2)
      {
        if (i != v6) {
          goto LABEL_9;
        }
        break;
      }
    }
    BOOL v8 = operator new(0x18uLL);
    v8[1] = v6;
    v8[2] = a2;
    uint64_t v9 = a1[80];
    *BOOL v8 = v9;
    *(void *)(v9 + 8) = v8;
    a1[80] = v8;
    ++a1[82];
  }
  else
  {
    sub_1004B45D4((uint64_t)(a1 + 80), &v19);
  }
LABEL_9:
  sub_10003AFE8((uint64_t)v18);
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009B0958);
  }
  uint64_t v10 = sub_100019C0C((void *)qword_1009F8160, v19);
  if (v10)
  {
    uint64_t v11 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_10003AE4C(v10, (uint64_t)__p);
      uint64_t v12 = (void **)__p[0];
      uint64_t v13 = "off";
      if (v17 >= 0) {
        uint64_t v12 = __p;
      }
      if (a3) {
        uint64_t v13 = "on";
      }
      *(_DWORD *)std::string buf = 136446466;
      unint64_t v21 = v12;
      __int16 v22 = 2082;
      uint64_t v23 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" wants connectability %{public}s", buf, 0x16u);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B0978);
  }
  uint64_t v14 = sub_1004E10DC((uint64_t)off_1009F8068);
  sub_10003AFB4((uint64_t)v18);
  return v14;
}

void sub_1004B16E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004B170C(void *a1, unint64_t a2, int a3)
{
  v18[1] = 0;
  unint64_t v19 = a2;
  v18[0] = 0;
  sub_10003AED0((uint64_t)v18, (uint64_t)(a1 + 72));
  unint64_t v6 = a1 + 83;
  if (a3)
  {
    for (unsigned int i = (void *)a1[84]; i != v6; unsigned int i = (void *)i[1])
    {
      if (i[2] == a2)
      {
        if (i != v6) {
          goto LABEL_9;
        }
        break;
      }
    }
    BOOL v8 = operator new(0x18uLL);
    v8[1] = v6;
    v8[2] = a2;
    uint64_t v9 = a1[83];
    *BOOL v8 = v9;
    *(void *)(v9 + 8) = v8;
    a1[83] = v8;
    ++a1[85];
  }
  else
  {
    sub_1004B45D4((uint64_t)(a1 + 83), &v19);
  }
LABEL_9:
  sub_10003AFE8((uint64_t)v18);
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009B0958);
  }
  uint64_t v10 = sub_100019C0C((void *)qword_1009F8160, v19);
  if (v10)
  {
    uint64_t v11 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_10003AE4C(v10, (uint64_t)__p);
      uint64_t v12 = (void **)__p[0];
      uint64_t v13 = "off";
      if (v17 >= 0) {
        uint64_t v12 = __p;
      }
      if (a3) {
        uint64_t v13 = "on";
      }
      *(_DWORD *)std::string buf = 136446466;
      unint64_t v21 = v12;
      __int16 v22 = 2082;
      uint64_t v23 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" wants discoverability %{public}s", buf, 0x16u);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B0978);
  }
  uint64_t v14 = sub_1004E2070(off_1009F8068);
  sub_10003AFB4((uint64_t)v18);
  return v14;
}

void sub_1004B191C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004B1940(uint64_t a1, uint64_t a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1 + 504);
  unint64_t v4 = *(void **)(a1 + 568);
  if (v4 && *v4 == a2) {
    operator delete();
  }
  sub_10003AFB4((uint64_t)v6);
  return 7;
}

uint64_t sub_1004B19C0(uint64_t a1)
{
  *(void *)a1 = off_1009B0648;
  *(void *)(a1 + 8) = off_1009B06F0;
  *(void *)(a1 + 16) = off_1009B0718;
  *(void *)(a1 + 24) = off_1009B0758;
  *(void *)(a1 + 32) = &off_1009B0778;
  *(void *)(a1 + 40) = off_1009B0790;
  *(void *)(a1 + 48) = off_1009B07B8;
  *(void *)(a1 + 56) = off_1009B0868;
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  sub_100052DA8(a1 + 96);
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  sub_100052DA8(a1 + 184);
  *(void *)(a1 + 248) = a1 + 248;
  *(void *)(a1 + 256) = a1 + 248;
  *(void *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 272) = 0;
  sub_100052DA8(a1 + 280);
  *(void *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  sub_100052DA8(a1 + 416);
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  sub_100052DA8(a1 + 504);
  *(void *)(a1 + 568) = 0;
  sub_100052DA8(a1 + 576);
  *(void *)(a1 + 640) = a1 + 640;
  *(void *)(a1 + 648) = a1 + 640;
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 664) = a1 + 664;
  *(void *)(a1 + 672) = a1 + 664;
  *(void *)(a1 + 680) = 0;
  return a1;
}

void sub_1004B1BB0(_Unwind_Exception *a1)
{
  uint64_t v11 = v5;
  sub_100052DA4(v11);
  uint64_t v13 = *(void **)(v1 + 480);
  if (v13)
  {
    *(void *)(v1 + 488) = v13;
    operator delete(v13);
  }
  sub_100052DA4(v7);
  if (*(char *)(v1 + 415) < 0) {
    operator delete(*(void **)(v1 + 392));
  }
  if (*(char *)(v1 + 391) < 0) {
    operator delete(*(void **)(v1 + 368));
  }
  if (*(char *)(v1 + 367) < 0) {
    operator delete(*v10);
  }
  sub_100052DA4(v6);
  sub_1002B308C(v4);
  sub_100052DA4(v3);
  uint64_t v14 = *v9;
  if (*v9)
  {
    *(void *)(v1 + 168) = v14;
    operator delete(v14);
  }
  sub_100052DA4(v2);
  unint64_t v15 = *v8;
  if (*v8)
  {
    *(void *)(v1 + 80) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(a1);
}

void sub_1004B1C74()
{
}

uint64_t sub_1004B1C80(uint64_t a1)
{
  *(void *)a1 = off_1009B0648;
  *(void *)(a1 + 8) = off_1009B06F0;
  *(void *)(a1 + 16) = off_1009B0718;
  *(void *)(a1 + 24) = off_1009B0758;
  *(void *)(a1 + 32) = &off_1009B0778;
  *(void *)(a1 + 40) = off_1009B0790;
  *(void *)(a1 + 48) = off_1009B07B8;
  *(void *)(a1 + 56) = off_1009B0868;
  sub_1002B308C((void *)(a1 + 664));
  sub_1002B308C((void *)(a1 + 640));
  sub_100052DA4(a1 + 576);
  sub_100052DA4(a1 + 504);
  uint64_t v2 = *(void **)(a1 + 480);
  if (v2)
  {
    *(void *)(a1 + 488) = v2;
    operator delete(v2);
  }
  sub_100052DA4(a1 + 416);
  if (*(char *)(a1 + 415) < 0) {
    operator delete(*(void **)(a1 + 392));
  }
  if (*(char *)(a1 + 391) < 0) {
    operator delete(*(void **)(a1 + 368));
  }
  if (*(char *)(a1 + 367) < 0) {
    operator delete(*(void **)(a1 + 344));
  }
  sub_100052DA4(a1 + 280);
  sub_1002B308C((void *)(a1 + 248));
  sub_100052DA4(a1 + 184);
  uint64_t v3 = *(void **)(a1 + 160);
  if (v3)
  {
    *(void *)(a1 + 168) = v3;
    operator delete(v3);
  }
  sub_100052DA4(a1 + 96);
  unint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1004B1E4C(uint64_t a1)
{
  return sub_1004B1C80(a1 - 16);
}

void sub_1004B1E54(uint64_t a1)
{
  sub_1004B1C80(a1);

  operator delete();
}

void sub_1004B1E8C(uint64_t a1)
{
  sub_1004B1C80(a1 - 16);

  operator delete();
}

uint64_t sub_1004B1EC8(uint64_t a1)
{
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009B0958);
  }
  sub_100457490(qword_1009F8160 + 8, a1 + 24);
  if (qword_1009F87A8 != -1) {
    dispatch_once(&qword_1009F87A8, &stru_1009B09B8);
  }
  sub_1000CED0C((uint64_t)off_1009F87A0 + 24, a1 + 8);
  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_1009B09D8);
  }
  sub_10060C070(off_1009F8760, a1 + 16);
  if (qword_1009F8748 != -1) {
    dispatch_once(&qword_1009F8748, &stru_1009B09F8);
  }
  sub_1002C3EBC((uint64_t)off_1009F8740 + 80, a1 + 32);
  if (qword_1009F8248 != -1) {
    dispatch_once(&qword_1009F8248, &stru_1009B0A18);
  }
  sub_10065B134((uint64_t)off_1009F8240, a1 + 40);
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009B0A38);
  }
  sub_100680938((uint64_t)off_1009F7EB8, a1 + 48, 0);
  uint64_t v2 = sub_10003FFD4();
  sub_1004A79EC(v2 + 328, a1 + 56);
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, a1 + 280);
  uint64_t v3 = sub_100035F54();
  unint64_t v4 = (const char *)(a1 + 344);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v3 + 8))(v3, a1 + 344)) {
    std::string::assign((std::string *)(a1 + 344), "Unknown");
  }
  uint64_t v5 = sub_100035F54();
  uint64_t v6 = (void *)(a1 + 368);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, a1 + 368, 1)) {
    std::string::assign((std::string *)(a1 + 368), "Unknown");
  }
  uint64_t v7 = (void *)(a1 + 392);
  std::string::assign((std::string *)(a1 + 392), "Apple Inc.");
  BOOL v8 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a1 + 367) < 0) {
      unint64_t v4 = *(const char **)v4;
    }
    if (*(char *)(a1 + 391) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    if (*(char *)(a1 + 415) < 0) {
      uint64_t v7 = (void *)*v7;
    }
    *(_DWORD *)std::string buf = 136446722;
    uint64_t v12 = v4;
    __int16 v13 = 2082;
    uint64_t v14 = v6;
    __int16 v15 = 2082;
    __int16 v16 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Model: %{public}s, Version: %{public}s, Manufacturer: %{public}s", buf, 0x20u);
    BOOL v8 = qword_100A19E50;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136446210;
    uint64_t v12 = "/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/core/LocalDevice.mm";
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
  }
  return sub_10003AFB4((uint64_t)v10);
}

void sub_1004B222C(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1004B2248(uint64_t a1)
{
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009B0958);
  }
  sub_100052718(qword_1009F8160 + 8, a1 + 24);
  if (qword_1009F87A8 != -1) {
    dispatch_once(&qword_1009F87A8, &stru_1009B09B8);
  }
  sub_100052718((uint64_t)off_1009F87A0 + 24, a1 + 8);
  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_1009B09D8);
  }
  sub_10060C1AC((uint64_t)off_1009F8760, a1 + 16);
  if (qword_1009F8748 != -1) {
    dispatch_once(&qword_1009F8748, &stru_1009B09F8);
  }
  sub_100052718((uint64_t)off_1009F8740 + 80, a1 + 32);
  if (qword_1009F8248 != -1) {
    dispatch_once(&qword_1009F8248, &stru_1009B0A18);
  }
  sub_10065B1A0((uint64_t)off_1009F8240, a1 + 40);
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009B0A38);
  }
  sub_100680A44((uint64_t)off_1009F7EB8, a1 + 48);
  uint64_t v2 = sub_10003FFD4();
  sub_1004A7CFC(v2 + 328, a1 + 56);
  sub_1004B24B4(v3, 0);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 280);
  unint64_t v4 = *(unint64_t **)(a1 + 160);
  if (v4 != *(unint64_t **)(a1 + 168))
  {
    do
    {
      unint64_t v5 = *v4;
      if (qword_1009F8168 != -1) {
        dispatch_once(&qword_1009F8168, &stru_1009B0958);
      }
      sub_1005536D8(qword_1009F8160, v5);
      if (qword_1009F8168 != -1) {
        dispatch_once(&qword_1009F8168, &stru_1009B0958);
      }
      sub_100553B9C(qword_1009F8160, v5);
      ++v4;
    }
    while (v4 != *(unint64_t **)(a1 + 168));
    unint64_t v4 = *(unint64_t **)(a1 + 160);
  }
  *(void *)(a1 + 168) = v4;
  return sub_10003AFB4((uint64_t)v7);
}

void sub_1004B24A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004B24B4(uint64_t a1, char a2)
{
  if (qword_1009F8748 != -1) {
    dispatch_once(&qword_1009F8748, &stru_1009B09F8);
  }
  uint64_t v3 = off_1009F8740;

  return sub_1004B98DC((uint64_t)v3, a2);
}

uint64_t sub_1004B2518(uint64_t *a1, uint64_t a2, long long *a3, uint64_t a4)
{
  v15[0] = 0;
  v15[1] = 0;
  sub_10003AED0((uint64_t)v15, (uint64_t)(a1 + 52));
  uint64_t v9 = (void *)a1[60];
  unint64_t v8 = a1[61];
  long long v21 = *a3;
  uint64_t v22 = *((void *)a3 + 2);
  if (v9 != (void *)v8)
  {
    while (1)
    {
      if (*v9 == a2)
      {
        BOOL v10 = (void)v21 == v9[1] && *((void *)&v21 + 1) == v9[2];
        if (v10 && v22 == v9[3]) {
          break;
        }
      }
      v9 += 6;
      if (v9 == (void *)v8) {
        goto LABEL_13;
      }
    }
  }
  if (v9 == (void *)v8)
  {
LABEL_13:
    long long v17 = *a3;
    uint64_t v18 = *((void *)a3 + 2);
    uint64_t v16 = a2;
    int v19 = -1;
    uint64_t v20 = a4;
    if (v8 >= a1[62])
    {
      uint64_t v13 = sub_1004B7388(a1 + 60, (uint64_t)&v16);
    }
    else
    {
      *(void *)unint64_t v8 = a2;
      long long v12 = v17;
      *(void *)(v8 + 24) = v18;
      *(_OWORD *)(v8 + 8) = v12;
      *(_DWORD *)(v8 + 32) = -1;
      *(void *)(v8 + 40) = a4;
      uint64_t v13 = v8 + 48;
    }
    a1[61] = v13;
  }
  sub_10003AFB4((uint64_t)v15);
  return 0;
}

void sub_1004B2634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004B2648(uint64_t a1, uint64_t a2, long long *a3)
{
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, a1 + 416);
  long long v12 = *a3;
  uint64_t v13 = *((void *)a3 + 2);
  uint64_t v6 = *(void *)(a1 + 480);
  uint64_t v7 = *(void *)(a1 + 488);
  uint64_t v11 = a2;
  uint64_t v8 = sub_1004B757C(v6, v7, &v11);
  sub_1004B7070(a1 + 480, v8, *(void *)(a1 + 488));
  sub_10003AFB4((uint64_t)v10);
  return 0;
}

void sub_1004B26CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004B26E0(uint64_t a1)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 504);
  if (!*(void *)(a1 + 568))
  {
    int v4 = 0;
    uint64_t v2 = sub_10003FB34();
    (*(void (**)(uint64_t, int *))(*(void *)v2 + 192))(v2, &v4);
    operator new();
  }
  sub_10003AFB4((uint64_t)v5);
  return 101;
}

void sub_1004B27AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004B27C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, a1 + 504);
  uint64_t v6 = *(void **)(a1 + 568);
  if (v6 && *v6 == a2)
  {
    uint64_t v8 = sub_10003FB34();
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 192))(v8, a3);
  }
  else
  {
    uint64_t v7 = 7;
  }
  sub_10003AFB4((uint64_t)v10);
  return v7;
}

void sub_1004B2860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004B2874(uint64_t a1)
{
  v3[0] = 0;
  v3[1] = 0;
  sub_10003AED0((uint64_t)v3, a1 + 504);
  if (!*(void *)(a1 + 568)) {
    operator new();
  }
  sub_10003AFB4((uint64_t)v3);
  return 101;
}

void sub_1004B2910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004B2924(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v19[0] = 0;
  v19[1] = 0;
  sub_10003AED0((uint64_t)v19, a1 + 504);
  uint64_t v14 = *(void **)(a1 + 568);
  if (v14 && *v14 == a2)
  {
    uint64_t v17 = sub_10003FFD4();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v17 + 176))(v17, a3))
    {
      uint64_t v18 = sub_10003FB34();
      uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v18 + 1160))(v18, a3, a4, a5, a6, a7);
    }
    else
    {
      uint64_t v15 = 205;
    }
  }
  else
  {
    uint64_t v15 = 7;
  }
  sub_10003AFB4((uint64_t)v19);
  return v15;
}

void sub_1004B2A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004B2A48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v17[0] = 0;
  v17[1] = 0;
  sub_10003AED0((uint64_t)v17, a1 + 504);
  uint64_t v8 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "(BTPowerLog): readEnhancedPowerProfileStatistics", v16, 2u);
  }
  uint64_t v9 = *(void **)(a1 + 568);
  if (v9 && *v9 == a2)
  {
    uint64_t v13 = sub_10003FFD4();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v13 + 176))(v13, a3))
    {
      uint64_t v14 = sub_10003FB34();
      uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14 + 1168))(v14, a3, a4);
    }
    else
    {
      uint64_t v15 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v16 = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "(BTPowerLog): (readEnhancedPowerProfileStatistics) can't read power profile stats: BT_ERROR_LOCAL_DEVICE_NOT_READY", v16, 2u);
      }
      uint64_t v11 = 205;
    }
  }
  else
  {
    BOOL v10 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "(BTPowerLog): (readEnhancedPowerProfileStatistics) BT_ERROR_INVALID_HANDLE", v16, 2u);
    }
    uint64_t v11 = 7;
  }
  sub_10003AFB4((uint64_t)v17);
  return v11;
}

void sub_1004B2BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004B2C08(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v19[0] = 0;
  v19[1] = 0;
  sub_10003AED0((uint64_t)v19, a1 + 504);
  uint64_t v14 = *(void **)(a1 + 568);
  if (v14 && *v14 == a2)
  {
    if (a3 == 1)
    {
      uint64_t v16 = sub_10003FB34();
      (*(void (**)(uint64_t))(*(void *)v16 + 1184))(v16);
    }
    uint64_t v17 = sub_10003FB34();
    uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v17 + 1176))(v17, a4, a5, a6, a7);
  }
  else
  {
    uint64_t v15 = 7;
  }
  sub_10003AFB4((uint64_t)v19);
  return v15;
}

void sub_1004B2D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004B2D28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  v35[0] = 0;
  v35[1] = 0;
  sub_10003AED0((uint64_t)v35, a1 + 504);
  __int16 v25 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "(BTPowerLog): readDetailedPowerProfileStatistics", buf, 2u);
  }
  uint64_t v26 = *(void **)(a1 + 568);
  if (v26 && *v26 == a2)
  {
    uint64_t v30 = sub_10003FFD4();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v30 + 176))(v30, a3))
    {
      uint64_t v31 = sub_10003FB34();
      uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v31 + 1192))(v31, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
      if (a3)
      {
        uint64_t v32 = sub_10003FB34();
        (*(void (**)(uint64_t))(*(void *)v32 + 1200))(v32);
      }
    }
    else
    {
      uint64_t v33 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "(BTPowerLog): (readDetailedPowerProfileStatistics) can't read power profile stats: BT_ERROR_LOCAL_DEVICE_NOT_READY", buf, 2u);
      }
      uint64_t v28 = 205;
    }
  }
  else
  {
    __int16 v27 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "(BTPowerLog): (readDetailedPowerProfileStatistics) BT_ERROR_INVALID_HANDLE", buf, 2u);
    }
    uint64_t v28 = 7;
  }
  sub_10003AFB4((uint64_t)v35);
  return v28;
}

void sub_1004B2F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004B2F6C(uint64_t a1, uint64_t a2, _WORD *a3)
{
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, a1 + 184);
  *(unsigned char *)(a2 + 35) = 0;
  *(_OWORD *)(a2 + 19) = 0u;
  *(_OWORD *)(a2 + 3) = 0u;
  *(_WORD *)a2 = 9218;
  *(unsigned char *)(a2 + 2) = 2;
  *(unsigned char *)(a2 + 3) = *(unsigned char *)(a1 + 272);
  uint64_t v6 = a1 + 248;
  uint64_t v7 = *(void *)(a1 + 256);
  if (v7 != v6)
  {
    uint64_t v8 = a2 + 4;
    do
    {
      sub_1004AF250(v8, 256, *(char **)(*(void *)(v7 + 16) + 8), *(void *)(*(void *)(v7 + 16) + 16));
      uint64_t v7 = *(void *)(v7 + 8);
    }
    while (v7 != v6);
  }
  *a3 = 36;
  sub_10003AFB4((uint64_t)v10);
  return 1;
}

void sub_1004B3024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004B3038(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1 + 184);
  uint64_t v2 = *(void *)(a1 + 264);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_1004B3080(uint64_t a1, uint64_t *a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 184);
  if ((uint64_t *)(a1 + 248) != a2) {
    sub_1004B763C(a2, *(void *)(a1 + 256), a1 + 248);
  }
  return sub_10003AFB4((uint64_t)v5);
}

void sub_1004B30DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004B30F0(uint64_t a1, unsigned char *a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 184);
  *a2 = *(unsigned char *)(a1 + 272);
  return sub_10003AFB4((uint64_t)v5);
}

uint64_t sub_1004B313C(uint64_t a1, uint64_t a2, const void *a3, size_t a4, const void *a5, unint64_t a6)
{
  uint64_t v6 = 3;
  if (a6 && a4 && a3 && a5)
  {
    v17[0] = 0;
    v17[1] = 0;
    sub_10003AED0((uint64_t)v17, a1 + 184);
    for (uint64_t i = *(void *)(a1 + 256); i != a1 + 248; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v13 = *(void *)(i + 16);
      if (*(void *)(v13 + 16) >= a4) {
        size_t v14 = a4;
      }
      else {
        size_t v14 = *(void *)(v13 + 16);
      }
      if (!memcmp(*(const void **)(v13 + 8), a3, v14))
      {
        size_t v15 = *(void *)(v13 + 32) >= a6 ? a6 : *(void *)(v13 + 32);
        if (!memcmp(*(const void **)(v13 + 24), a5, v15)) {
          goto LABEL_20;
        }
      }
    }
    if (*(void *)(a1 + 264) < 0x1FuLL)
    {
      ++*(unsigned char *)(a1 + 272);
      operator new();
    }
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076F06C();
    }
LABEL_20:
    uint64_t v6 = 1;
    sub_10003AFB4((uint64_t)v17);
  }
  return v6;
}

void sub_1004B33EC()
{
}

uint64_t sub_1004B3420(uint64_t a1, uint64_t a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  v17[0] = 0;
  v17[1] = 0;
  sub_10003AED0((uint64_t)v17, a1 + 184);
  for (uint64_t i = *(void *)(a1 + 256); i != a1 + 248; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v13 = *(void *)(i + 16);
    uint64_t v16 = v13;
    if (*(void *)v13 == a2
      && *(void *)(v13 + 16) == a4
      && !memcmp(*(const void **)(v13 + 8), a3, a4)
      && *(void *)(v13 + 32) == a6
      && !memcmp(*(const void **)(v13 + 24), a5, a6))
    {
      sub_1004B1408(a1 + 248, &v16);
      uint64_t v14 = v16;
      if (v16)
      {
        *(void *)(v16 + 16) = 0;
        free(*(void **)(v14 + 8));
        *(void *)(v14 + 8) = 0;
        *(void *)(v14 + 32) = 0;
        free(*(void **)(v14 + 24));
        *(void *)(v14 + 24) = 0;
        operator delete();
      }
      break;
    }
  }
  ++*(unsigned char *)(a1 + 272);
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B0978);
  }
  if (sub_1004E420C((uint64_t)off_1009F8068)
    && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
  {
    sub_10076F0D4();
  }
  if (qword_1009F8090 != -1) {
    dispatch_once(&qword_1009F8090, &stru_1009B0998);
  }
  if (sub_1004D9508() && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
    sub_10076F0A0();
  }
  sub_10003AFB4((uint64_t)v17);
  return 0;
}

void sub_1004B3614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004B3630(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  __int16 v13 = 0;
  int v12 = 0;
  __int16 v15 = 0;
  uint64_t v14 = 255;
  if (sub_10017E37C(a2, (uint64_t)&v12))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076F13C();
    }
  }
  else
  {
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009B0A58);
    }
    int v10 = v12;
    __int16 v11 = v13;
    uint64_t v7 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v10, 0);
    if (v7)
    {
      uint64_t v8 = v7;
      if (a3)
      {
        uint64_t v14 = *(void *)a4;
        __int16 v15 = *(_WORD *)(a4 + 8);
      }
      if (qword_1009F7EB0 != -1)
      {
        uint64_t v9 = v7;
        dispatch_once(&qword_1009F7EB0, &stru_1009B0A78);
        uint64_t v8 = v9;
      }
      sub_1004B37BC((uint64_t)off_1009F7EA8, a1, v8, (uint64_t)&v14);
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
    {
      sub_10076F108();
    }
  }
}

uint64_t sub_1004B37BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v16[0] = 0;
  v16[1] = 0;
  sub_10003AED0((uint64_t)v16, a1 + 416);
  uint64_t v7 = *(void *)(a1 + 480);
  uint64_t v8 = *(void *)(a1 + 488);
  if (v7 != v8)
  {
    __int16 v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    sub_1004B79DC((char *)&v13, v7, v8, 0xAAAAAAAAAAAAAAABLL * ((v8 - v7) >> 4));
    sub_10003AFE8((uint64_t)v16);
    uint64_t v9 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 68157954;
      int v18 = 10;
      __int16 v19 = 2096;
      uint64_t v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Sending AFH map changed event to local device listeners %{AFHMap}.10P", buf, 0x12u);
    }
    int v10 = v13;
    if (v13 != v14)
    {
      while (1)
      {
        if (v10[3])
        {
          if (!a3) {
            goto LABEL_18;
          }
          if (qword_1009F7F00 != -1) {
            dispatch_once(&qword_1009F7F00, &stru_1009B0A58);
          }
          if (!sub_1004A93A0((uint64_t)off_1009F7EF8, *v10, a3))
          {
LABEL_18:
            int v10 = v13;
            break;
          }
          if (qword_1009F8168 != -1) {
            dispatch_once(&qword_1009F8168, &stru_1009B0958);
          }
          if (sub_1000181D0(qword_1009F8160, *v10))
          {
            if (qword_1009FB160 != -1) {
              dispatch_once(&qword_1009FB160, &stru_1009B0AD8);
            }
            operator new();
          }
          sub_10003AF00((uint64_t)v16);
          uint64_t v11 = sub_1004B70B8(*(void *)(a1 + 480), *(void *)(a1 + 488), *v10);
          sub_1004B7070(a1 + 480, v11, *(void *)(a1 + 488));
          sub_10003AFE8((uint64_t)v16);
        }
        v10 += 6;
        if (v10 == v14) {
          goto LABEL_18;
        }
      }
    }
    if (v10)
    {
      uint64_t v14 = v10;
      operator delete(v10);
    }
  }
  return sub_10003AFB4((uint64_t)v16);
}

void sub_1004B3A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1004B3AC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1009F8748 != -1) {
    dispatch_once(&qword_1009F8748, &stru_1009B09F8);
  }
  if (sub_100028CB4((uint64_t)off_1009F8740) != 1) {
    return 202;
  }
  char v12 = 0;
  sub_10001B8E0(&v12);
  uint64_t v10 = sub_10018F088((uint64_t)nullsub_333, a3, v4, v5, v6, v7, v8, v9);
  sub_10001B910(&v12);
  if (v10)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076F170();
    }
    uint64_t v10 = 1;
  }
  sub_10001B8AC(&v12);
  return v10;
}

void sub_1004B3B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_1004B3BB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = 0;
  if (qword_1009F8748 != -1) {
    dispatch_once(&qword_1009F8748, &stru_1009B09F8);
  }
  if (sub_100028CB4((uint64_t)off_1009F8740) != 1) {
    return 202;
  }
  char v12 = 0;
  sub_10001B8E0(&v12);
  if (sub_10017E2D4(a3 + 128, &v13))
  {
    uint64_t v10 = 312;
  }
  else if (sub_10018F0B8((uint64_t)sub_1004B3630, v13, v4, v5, v6, v7, v8, v9))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076F170();
    }
    uint64_t v10 = 1;
  }
  else
  {
    sub_10001B910(&v12);
    uint64_t v10 = 0;
  }
  sub_10001B8AC(&v12);
  return v10;
}

void sub_1004B3CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_1004B3CC0(uint64_t a1, char a2)
{
  sub_1004B3D30(a1, 0, 0);
  if (qword_1009F8748 != -1) {
    dispatch_once(&qword_1009F8748, &stru_1009B09F8);
  }
  uint64_t v3 = off_1009F8740;

  return sub_1004B94E4((uint64_t)v3, a2);
}

uint64_t sub_1004B3D30(uint64_t a1, unint64_t a2, int a3)
{
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009B0958);
  }
  uint64_t v6 = sub_100019C0C((void *)qword_1009F8160, a2);
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_10003AE4C(v7, (uint64_t)__p);
      uint64_t v9 = (void **)__p[0];
      uint64_t v10 = "off";
      if (v13 >= 0) {
        uint64_t v9 = __p;
      }
      if (a3) {
        uint64_t v10 = "on";
      }
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v15 = v9;
      __int16 v16 = 2082;
      uint64_t v17 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" wants denylisting %{public}s", buf, 0x16u);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  if (sub_1004B4758() != a3)
  {
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009B0978);
    }
    sub_1004E05D4((uint64_t)off_1009F8068, a3);
    sub_1004B47AC(a1, 10, 0);
  }
  return 0;
}

uint64_t sub_1004B3ED8(uint64_t a1, _DWORD *a2)
{
  if (qword_1009F8748 != -1) {
    dispatch_once(&qword_1009F8748, &stru_1009B09F8);
  }
  *a2 = sub_100028CB4((uint64_t)off_1009F8740);
  return 0;
}

uint64_t sub_1004B3F34()
{
  if (qword_1009F8748 != -1) {
    dispatch_once(&qword_1009F8748, &stru_1009B09F8);
  }
  uint64_t v0 = off_1009F8740;

  return sub_1004B9B88((uint64_t)v0);
}

uint64_t sub_1004B3F88()
{
  if (qword_1009F8748 != -1) {
    dispatch_once(&qword_1009F8748, &stru_1009B09F8);
  }
  uint64_t v0 = off_1009F8740;

  return sub_1004B9CC4((uint64_t)v0);
}

uint64_t sub_1004B3FDC(uint64_t a1, uint64_t a2, char *a3)
{
  if (qword_1009F8748 != -1) {
    dispatch_once(&qword_1009F8748, &stru_1009B09F8);
  }
  if (sub_100028CB4((uint64_t)off_1009F8740)) {
    return 201;
  }
  uint64_t v5 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string __p = 136315138;
    *(void *)&__p[4] = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Displaying power prompt on behalf of application \"%s\"", __p, 0xCu);
  }
  uint64_t v6 = sub_100052E70();
  sub_10004191C(__p, a3);
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v6 + 32))(v6, __p);
  if (v8 < 0) {
    operator delete(*(void **)__p);
  }
  return 0;
}

void sub_1004B4114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004B4138(uint64_t a1, unsigned char *a2)
{
  if (qword_1009F8748 != -1) {
    dispatch_once(&qword_1009F8748, &stru_1009B09F8);
  }
  *a2 = sub_1004B9FE0((uint64_t)off_1009F8740);
  return 0;
}

uint64_t sub_1004B4194()
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B0978);
  }
  uint64_t v0 = off_1009F8068;

  return sub_1004E8CC4((uint64_t)v0);
}

uint64_t sub_1004B41E8(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B0978);
  }
  uint64_t v7 = off_1009F8068;

  return sub_1004E90B8((uint64_t)v7, a2, a3, a4);
}

uint64_t sub_1004B4264(uint64_t a1, int a2)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B0978);
  }
  uint64_t v3 = off_1009F8068;

  return sub_1004E9264((uint64_t)v3, a2);
}

uint64_t sub_1004B42C8()
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B0978);
  }
  uint64_t v0 = off_1009F8068;

  return sub_1004E9560((uint64_t)v0);
}

uint64_t sub_1004B431C(uint64_t a1, unsigned char *a2)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B0978);
  }
  uint64_t v3 = off_1009F8068;

  return sub_1004E9068((uint64_t)v3, a2);
}

uint64_t sub_1004B4380(uint64_t a1, uint64_t a2)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B0978);
  }
  uint64_t v3 = off_1009F8068;

  return sub_1004E219C((uint64_t)v3, a2);
}

uint64_t sub_1004B43E4(uint64_t a1, std::string *a2)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B0978);
  }
  uint64_t v3 = off_1009F8068;

  return sub_1004E2268((uint64_t)v3, a2);
}

uint64_t sub_1004B4448@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 280);
  if (*(char *)(a1 + 367) < 0)
  {
    sub_10003B098((unsigned char *)a2, *(void **)(a1 + 344), *(void *)(a1 + 352));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 344);
    *(void *)(a2 + 16) = *(void *)(a1 + 360);
  }
  return sub_10003AFB4((uint64_t)v5);
}

void sub_1004B44B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004B44CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 280);
  if (*(char *)(a1 + 391) < 0)
  {
    sub_10003B098((unsigned char *)a2, *(void **)(a1 + 368), *(void *)(a1 + 376));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 368);
    *(void *)(a2 + 16) = *(void *)(a1 + 384);
  }
  return sub_10003AFB4((uint64_t)v5);
}

void sub_1004B453C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004B4550@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 280);
  if (*(char *)(a1 + 415) < 0)
  {
    sub_10003B098((unsigned char *)a2, *(void **)(a1 + 392), *(void *)(a1 + 400));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 392);
    *(void *)(a2 + 16) = *(void *)(a1 + 408);
  }
  return sub_10003AFB4((uint64_t)v5);
}

void sub_1004B45C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1004B45D4(uint64_t a1, void *a2)
{
  v10[0] = (uint64_t)v10;
  v10[1] = (uint64_t)v10;
  void v10[2] = 0;
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2 != (void *)a1)
  {
    do
    {
      uint64_t v6 = (void *)v2[1];
      uint64_t v5 = v2[2];
      if (v5 == *a2)
      {
        if (v6 == (void *)a1)
        {
          BOOL v8 = 1;
LABEL_8:
          uint64_t v6 = (void *)a1;
        }
        else
        {
          while (1)
          {
            uint64_t v7 = v6[2];
            BOOL v8 = v7 == v5;
            if (v7 != v5) {
              break;
            }
            uint64_t v6 = (void *)v6[1];
            if (v6 == (void *)a1) {
              goto LABEL_8;
            }
          }
        }
        sub_1004B6F90((uint64_t)v10, v10, a1, v2, v6);
        if (!v8) {
          uint64_t v6 = (void *)v6[1];
        }
      }
      uint64_t v2 = v6;
    }
    while (v6 != (void *)a1);
  }
  return sub_1002B308C(v10);
}

void sub_1004B4690(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002B308C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004B46A4(uint64_t a1, unsigned char *a2)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B0978);
  }
  uint64_t v3 = off_1009F8068;

  return sub_1004E4370((uint64_t)v3, a2);
}

BOOL sub_1004B4708(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1 + 576);
  BOOL v2 = *(void *)(a1 + 656) != 0;
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_1004B4758()
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B0978);
  }
  uint64_t v0 = off_1009F8068;

  return sub_1004E1EE0((uint64_t)v0);
}

uint64_t sub_1004B47AC(uint64_t a1, int a2, int a3)
{
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  void v18[2] = sub_1004B5C9C;
  v18[3] = &unk_1009B0878;
  int v19 = a2;
  int v20 = a3;
  sub_1004B5BD0((os_unfair_lock_s *)(a1 + 64), v18);
  v17[0] = 0;
  v17[1] = 0;
  sub_10003AED0((uint64_t)v17, a1 + 416);
  uint64_t v6 = *(unint64_t **)(a1 + 480);
  uint64_t v5 = *(unint64_t **)(a1 + 488);
  if (v6 != v5)
  {
    switch(a2)
    {
      case 0:
        int v7 = 1;
        BOOL v8 = "power changed";
        goto LABEL_15;
      case 1:
        int v7 = 2;
        BOOL v8 = "device name changed";
        goto LABEL_15;
      case 2:
        int v7 = 4;
        BOOL v8 = "discoverability changed";
        goto LABEL_15;
      case 3:
        int v7 = 8;
        BOOL v8 = "connectability changed";
        goto LABEL_15;
      case 4:
        int v7 = 16;
        BOOL v8 = "pairing status changed";
        goto LABEL_15;
      case 5:
        int v7 = 32;
        BOOL v8 = "connection status changed";
        goto LABEL_15;
      case 6:
        int v7 = 64;
        BOOL v8 = "discovery started";
        goto LABEL_15;
      case 7:
        int v7 = 128;
        BOOL v8 = "discovery stopped";
        goto LABEL_15;
      case 8:
        return sub_10003AFB4((uint64_t)v17);
      case 9:
        int v7 = 512;
        BOOL v8 = "airplane mode status changed";
        goto LABEL_15;
      case 10:
        int v7 = 1024;
        BOOL v8 = "denylist mode changed";
        goto LABEL_15;
      case 11:
        int v7 = 2048;
        BOOL v8 = "first unlock completed";
        goto LABEL_15;
      default:
        int v7 = 0;
        BOOL v8 = "unknown";
LABEL_15:
        __int16 v16 = v8;
        uint64_t v9 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 136446210;
          *(void *)&uint8_t buf[4] = v16;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Sending '%{public}s' event to local device listeners", buf, 0xCu);
          uint64_t v6 = *(unint64_t **)(a1 + 480);
          uint64_t v5 = *(unint64_t **)(a1 + 488);
        }
        if (v6 != v5)
        {
          do
          {
            if (v6[1])
            {
              if (qword_1009F8168 != -1) {
                dispatch_once(&qword_1009F8168, &stru_1009B0958);
              }
              unint64_t v10 = sub_1000181D0(qword_1009F8160, *v6);
              if (v10)
              {
                if (qword_1009F8168 != -1) {
                  dispatch_once(&qword_1009F8168, &stru_1009B0958);
                }
                if ((sub_100554640(qword_1009F8160, *v6) & v7) == 0)
                {
                  if (qword_1009FB160 != -1) {
                    dispatch_once(&qword_1009FB160, &stru_1009B0AD8);
                  }
                  operator new();
                }
                if (qword_1009F8168 != -1) {
                  dispatch_once(&qword_1009F8168, &stru_1009B0958);
                }
                uint64_t v11 = sub_100019C0C((void *)qword_1009F8160, v10);
                if (!v11) {
                  __assert_rtn("notifyStatusEvent", "LocalDevice.mm", 1078, "session");
                }
                char v12 = qword_100A19E50;
                if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
                {
                  sub_10003AE4C(v11, (uint64_t)buf);
                  char v13 = buf;
                  if (v22 < 0) {
                    char v13 = *(unsigned char **)buf;
                  }
                  *(_DWORD *)uint64_t v23 = 136446466;
                  char v24 = v16;
                  __int16 v25 = 2080;
                  uint64_t v26 = v13;
                  _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Masking '%{public}s' event from local device listener : %s", v23, 0x16u);
                  if (v22 < 0) {
                    operator delete(*(void **)buf);
                  }
                }
              }
              else
              {
                uint64_t v14 = sub_1004B70B8(*(void *)(a1 + 480), *(void *)(a1 + 488), *v6);
                sub_1004B7070(a1 + 480, v14, *(void *)(a1 + 488));
              }
            }
            v6 += 6;
          }
          while (v6 != *(unint64_t **)(a1 + 488));
        }
        break;
    }
  }
  return sub_10003AFB4((uint64_t)v17);
}

void sub_1004B4C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004B4C80(uint64_t a1, char *a2, unint64_t *a3, unint64_t a4)
{
  __int16 v44 = 0;
  __int16 v45 = 0;
  uint64_t v46 = 0;
  if (qword_1009F87A8 != -1) {
    dispatch_once(&qword_1009F87A8, &stru_1009B09B8);
  }
  sub_10046E85C((uint64_t)off_1009F87A0, &v44);
  uint64_t v6 = (uint64_t *)v44;
  if (v44 == v45)
  {
    unint64_t v10 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    BOOL v8 = a2;
    while (a4 + v7)
    {
      sub_100475EE0(*v6, (uint64_t)&buf);
      if ((v49 & 0x80u) == 0) {
        p_long long buf = (const char *)&buf;
      }
      else {
        p_long long buf = (const char *)buf;
      }
      strlcpy(v8, p_buf, 0xF8uLL);
      if ((char)v49 < 0) {
        operator delete((void *)buf);
      }
      ++v6;
      --v7;
      v8 += 248;
      if (v6 == v45)
      {
        unint64_t v10 = -v7;
        goto LABEL_16;
      }
    }
    uint64_t v11 = qword_100A19E50;
    unint64_t v10 = a4;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 134217984;
      *(void *)((char *)&buf + 4) = a4;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Warning: More than %zu classic devices connected", (uint8_t *)&buf, 0xCu);
      unint64_t v10 = a4;
    }
  }
LABEL_16:
  long long v42 = 0u;
  long long v43 = 0u;
  long long v41 = 0u;
  long long v40 = 0u;
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009B0A38);
  }
  char v12 = sub_10004034C((uint64_t)off_1009F7EB8);
  id v13 = [v12 countByEnumeratingWithState:&v40 objects:v47 count:16];
  if (!v13) {
    goto LABEL_80;
  }
  uint64_t v14 = *(void *)v41;
  id obj = v12;
  while (2)
  {
    uint64_t v15 = 0;
    do
    {
      if (*(void *)v41 != v14) {
        objc_enumerationMutation(obj);
      }
      __int16 v16 = *(void **)(*((void *)&v40 + 1) + 8 * (void)v15);
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009B0A98);
      }
      uint64_t v17 = off_1009F7ED8;
      sub_10004191C(__p, "IsAppleWatch");
      if (sub_100030A04((uint64_t)v17, v16, (uint64_t)__p)) {
        goto LABEL_29;
      }
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009B0A98);
      }
      if (sub_1006BDD68((uint64_t)off_1009F7ED8, v16))
      {
LABEL_29:
        BOOL v18 = 1;
      }
      else
      {
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009B0A98);
        }
        int v20 = off_1009F7ED8;
        sub_10004191C(v36, "A1603");
        if (sub_100030A04((uint64_t)v20, v16, (uint64_t)v36))
        {
          BOOL v18 = 1;
        }
        else
        {
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009B0A98);
          }
          long long v21 = off_1009F7ED8;
          sub_10004191C(v34, "A2051");
          if (sub_100030A04((uint64_t)v21, v16, (uint64_t)v34))
          {
            BOOL v18 = 1;
          }
          else
          {
            if (qword_1009F7EE0 != -1) {
              dispatch_once(&qword_1009F7EE0, &stru_1009B0A98);
            }
            char v22 = off_1009F7ED8;
            sub_10004191C(v32, "A3085");
            if (sub_100030A04((uint64_t)v22, v16, (uint64_t)v32))
            {
              BOOL v18 = 1;
            }
            else
            {
              if (qword_1009F7EE0 != -1) {
                dispatch_once(&qword_1009F7EE0, &stru_1009B0A98);
              }
              uint64_t v23 = off_1009F7ED8;
              sub_10004191C(v30, "A2538");
              if (sub_100030A04((uint64_t)v23, v16, (uint64_t)v30))
              {
                BOOL v18 = 1;
              }
              else
              {
                if (qword_1009F7EE0 != -1) {
                  dispatch_once(&qword_1009F7EE0, &stru_1009B0A98);
                }
                sub_1006BE7F4((uint64_t)off_1009F7ED8, v16, (uint64_t)&buf);
                uint64_t v24 = *((void *)&buf + 1);
                if ((v49 & 0x80u) == 0) {
                  uint64_t v24 = v49;
                }
                BOOL v18 = v24 != 0;
                if ((char)v49 < 0) {
                  operator delete((void *)buf);
                }
              }
              if (v31 < 0) {
                operator delete(v30[0]);
              }
            }
            if (v33 < 0) {
              operator delete(v32[0]);
            }
          }
          if (v35 < 0) {
            operator delete(v34[0]);
          }
        }
        if (v37 < 0) {
          operator delete(v36[0]);
        }
      }
      if (v39 < 0)
      {
        operator delete(__p[0]);
        if (v18) {
          goto LABEL_43;
        }
      }
      else if (v18)
      {
        goto LABEL_43;
      }
      if (v10 >= a4)
      {
        uint64_t v26 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf) = 134217984;
          *(void *)((char *)&buf + 4) = a4;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Warning: More than %zu classic and/or LE devices connected", (uint8_t *)&buf, 0xCu);
        }
        char v12 = obj;
        goto LABEL_80;
      }
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009B0A98);
      }
      sub_10003093C((uint64_t)off_1009F7ED8, v16, (uint64_t)&buf);
      if ((v49 & 0x80u) == 0) {
        int v19 = (const char *)&buf;
      }
      else {
        int v19 = (const char *)buf;
      }
      strlcpy(&a2[248 * v10], v19, 0xF8uLL);
      if ((char)v49 < 0) {
        operator delete((void *)buf);
      }
      ++v10;
LABEL_43:
      uint64_t v15 = (char *)v15 + 1;
    }
    while (v13 != v15);
    char v12 = obj;
    id v25 = [obj countByEnumeratingWithState:&v40 objects:v47 count:16];
    id v13 = v25;
    if (v25) {
      continue;
    }
    break;
  }
LABEL_80:

  *a3 = v10;
  if (v44)
  {
    __int16 v45 = v44;
    operator delete(v44);
  }
  return 0;
}

void sub_1004B5270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a41 < 0) {
    operator delete(a36);
  }

  if (a51) {
    operator delete(a51);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1004B5364(uint64_t a1)
{
  return sub_1004B47AC(a1, 11, 0);
}

uint64_t sub_1004B5370(uint64_t a1, unsigned char *a2)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B0978);
  }
  uint64_t v3 = off_1009F8068;

  return sub_1004E3008((uint64_t)v3, a2);
}

BOOL sub_1004B53D4(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1 + 576);
  BOOL v2 = *(void *)(a1 + 680) != 0;
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_1004B5424(uint64_t a1, BOOL *a2)
{
  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_1009B09D8);
  }
  *a2 = sub_100611D0C();
  if (qword_1009F7ED0 != -1) {
    dispatch_once(&qword_1009F7ED0, &stru_1009B0AB8);
  }
  *a2 |= sub_1007000D4(qword_1009F7EC8);
  return 0;
}

uint64_t sub_1004B54C0(uint64_t a1, uint64_t **a2)
{
  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_1009B09D8);
  }
  uint64_t v3 = off_1009F8760;

  return sub_10060C508((uint64_t)v3, a2);
}

uint64_t sub_1004B5524(uint64_t a1, unsigned char *a2)
{
  if (qword_1009F87A8 != -1) {
    dispatch_once(&qword_1009F87A8, &stru_1009B09B8);
  }
  *a2 = sub_10046E768((uint64_t)off_1009F87A0);
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009B0A38);
  }
  *a2 |= sub_100685F64((uint64_t)off_1009F7EB8);
  return 0;
}

uint64_t sub_1004B55C0(uint64_t a1, void **a2)
{
  if (qword_1009F87A8 != -1) {
    dispatch_once(&qword_1009F87A8, &stru_1009B09B8);
  }
  sub_10046E85C((uint64_t)off_1009F87A0, a2);
  return 0;
}

uint64_t sub_1004B561C(uint64_t a1, char **a2)
{
  if (qword_1009F87A8 != -1) {
    dispatch_once(&qword_1009F87A8, &stru_1009B09B8);
  }
  sub_10046E9BC((uint64_t)off_1009F87A0, a2);
  return 0;
}

uint64_t sub_1004B5678(uint64_t a1, BOOL *a2)
{
  if (qword_1009F8248 != -1) {
    dispatch_once(&qword_1009F8248, &stru_1009B0A18);
  }
  *a2 = sub_10065EED8((uint64_t)off_1009F8240);
  return 0;
}

uint64_t sub_1004B56D4()
{
  if (qword_1009F8748 != -1) {
    dispatch_once(&qword_1009F8748, &stru_1009B09F8);
  }
  if (sub_100028CB4((uint64_t)off_1009F8740) == 1)
  {
    char v5 = 0;
    sub_10001B8E0(&v5);
    char v0 = sub_100115A40();
    uint64_t v1 = qword_100A19E50;
    if (v0)
    {
      uint64_t v2 = 0;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v4 = 0;
        _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Successfully started HCI tracing", v4, 2u);
        uint64_t v2 = 0;
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_10076F1A4();
      }
      uint64_t v2 = 1;
    }
    sub_10001B8AC(&v5);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076F1D8();
    }
    return 1;
  }
  return v2;
}

void sub_1004B57F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_1004B5808(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4, uint64_t a5)
{
  if (qword_1009F8748 != -1) {
    dispatch_once(&qword_1009F8748, &stru_1009B09F8);
  }
  if (sub_100028CB4((uint64_t)off_1009F8740) == 1)
  {
    if (a3 && *a3)
    {
      uint64_t v9 = sub_100370758();
      uint64_t v10 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v9 + 72))(v9, a3);
      if (v10 < 0)
      {
        uint64_t v11 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
          sub_10076F240(v10, v11);
        }
      }
    }
    else
    {
      uint64_t v10 = -1;
    }
    if (!a5) {
      a4 = 0;
    }
    char v17 = 0;
    sub_10001B8E0(&v17);
    if (sub_100115C94(a2, a4))
    {
      uint64_t v12 = 0;
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_10076F20C();
      }
      uint64_t v12 = 1;
    }
    sub_10001B910(&v17);
    id v13 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int16 v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Successfully stopped HCI tracing", v16, 2u);
    }
    if ((v10 & 0x8000000000000000) == 0)
    {
      uint64_t v14 = sub_100370758();
      (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 80))(v14, v10);
    }
    sub_10001B8AC(&v17);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076F1D8();
    }
    return 1;
  }
  return v12;
}

void sub_1004B5A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_1004B5A24(uint64_t a1, uint64_t a2, int a3)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B0978);
  }
  uint64_t result = sub_1004E10DC((uint64_t)off_1009F8068);
  if (!a3)
  {
    return sub_1004B47AC(a1, 4, 0);
  }
  return result;
}

uint64_t sub_1004B5AA8(uint64_t a1, uint64_t a2, int a3)
{
  return sub_1004B5A24(a1 - 16, a2, a3);
}

uint64_t sub_1004B5AB0(uint64_t a1, uint64_t a2, int a3)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B0978);
  }
  uint64_t result = sub_1004E10DC((uint64_t)off_1009F8068);
  if (!a3)
  {
    return sub_1004B47AC(a1, 4, 0);
  }
  return result;
}

uint64_t sub_1004B5B34(uint64_t a1, uint64_t a2, int a3)
{
  return sub_1004B5AB0(a1 - 16, a2, a3);
}

uint64_t sub_1004B5B3C(uint64_t a1)
{
  return sub_1004B47AC(a1, 5, 0);
}

uint64_t sub_1004B5B48(uint64_t a1)
{
  return sub_1004B47AC(a1 - 8, 5, 0);
}

uint64_t sub_1004B5B58(uint64_t a1)
{
  return sub_1004B47AC(a1, 5, 0);
}

uint64_t sub_1004B5B64(uint64_t a1)
{
  return sub_1004B47AC(a1 - 8, 5, 0);
}

uint64_t sub_1004B5B7C(uint64_t a1)
{
  return sub_1004B47AC(a1, 5, 0);
}

uint64_t sub_1004B5B88(uint64_t a1)
{
  return sub_1004B47AC(a1 - 48, 5, 0);
}

uint64_t sub_1004B5B98(uint64_t a1)
{
  return sub_1004B47AC(a1, 5, 0);
}

uint64_t sub_1004B5BA4(uint64_t a1)
{
  return sub_1004B47AC(a1 - 48, 5, 0);
}

uint64_t sub_1004B5BB4(uint64_t a1)
{
  return sub_1004B47AC(a1, 8, 0);
}

uint64_t sub_1004B5BC0(uint64_t a1)
{
  return sub_1004B47AC(a1 - 40, 8, 0);
}

void sub_1004B5BD0(os_unfair_lock_s *a1, void *a2)
{
  uint64_t v3 = a2;
  os_unfair_lock_lock(a1);
  char v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }
  if (v4)
  {
    uint64_t v6 = v4;
    operator delete(v4);
  }
}

void sub_1004B5C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1004B5C9C(uint64_t a1, uint64_t (***a2)(void, void, void))
{
  return (**a2)(a2, *(unsigned int *)(a1 + 32), *(unsigned int *)(a1 + 36));
}

uint64_t sub_1004B5CCC(uint64_t a1)
{
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, a1 + 416);
  uint64_t v2 = *(void *)(a1 + 480);
  uint64_t v3 = *(void *)(a1 + 488);
  if (v2 != v3)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    sub_1004B79DC((char *)&v9, v2, v3, 0xAAAAAAAAAAAAAAABLL * ((v3 - v2) >> 4));
    sub_10003AFE8((uint64_t)v12);
    uint64_t v4 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending LE Test mode stopped event to local device listeners", v8, 2u);
    }
    char v5 = v9;
    if (v9 != v10)
    {
      do
      {
        if (v5[2])
        {
          if (qword_1009F8168 != -1) {
            dispatch_once(&qword_1009F8168, &stru_1009B0958);
          }
          if (sub_1000181D0(qword_1009F8160, *v5))
          {
            if (qword_1009FB160 != -1) {
              dispatch_once(&qword_1009FB160, &stru_1009B0AD8);
            }
            operator new();
          }
          sub_10003AF00((uint64_t)v12);
          uint64_t v6 = sub_1004B70B8(*(void *)(a1 + 480), *(void *)(a1 + 488), *v5);
          sub_1004B7070(a1 + 480, v6, *(void *)(a1 + 488));
          sub_10003AFE8((uint64_t)v12);
        }
        v5 += 6;
      }
      while (v5 != v10);
      char v5 = v9;
    }
    if (v5)
    {
      uint64_t v10 = v5;
      operator delete(v5);
    }
  }
  return sub_10003AFB4((uint64_t)v12);
}

void sub_1004B5EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1004B5F20(uint64_t a1)
{
  return sub_1004B47AC(a1, 0, 0);
}

uint64_t sub_1004B5F2C(uint64_t a1)
{
  return sub_1004B47AC(a1 - 32, 0, 0);
}

uint64_t sub_1004B5F3C(uint64_t a1)
{
  return sub_1004B47AC(a1, 9, 0);
}

uint64_t sub_1004B5F48(uint64_t a1)
{
  return sub_1004B47AC(a1 - 56, 9, 0);
}

uint64_t sub_1004B5F60(uint64_t a1, int a2)
{
  return sub_1004B47AC(a1, a2, 0);
}

uint64_t sub_1004B5F68()
{
  if (qword_1009F8398 != -1) {
    dispatch_once(&qword_1009F8398, &stru_1009B0AF8);
  }
  if (sub_100505780((uint64_t)off_1009F8390)) {
    return 1;
  }
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009B0B18);
  }
  uint64_t v1 = off_1009F85C0;

  return sub_1006E47C0((uint64_t)v1);
}

uint64_t sub_1004B6000()
{
  if (qword_1009F8398 != -1) {
    dispatch_once(&qword_1009F8398, &stru_1009B0AF8);
  }
  char v0 = off_1009F8390;

  return sub_100505780((uint64_t)v0);
}

uint64_t sub_1004B6054()
{
  uint64_t v47 = 0;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v36 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v33 = 0u;
  memset(v34, 0, sizeof(v34));
  sub_10004C67C((uint64_t)&v33);
  __int16 v32 = 0;
  int v31 = 0;
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B0978);
  }
  sub_1004E219C((uint64_t)off_1009F8068, (uint64_t)&v31);
  uint64_t v0 = sub_10003AB28((uint64_t)v34);
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B0978);
  }
  uint64_t v1 = (char *)off_1009F8068 + 280;
  if (*((char *)off_1009F8068 + 303) < 0) {
    uint64_t v1 = *(const char **)v1;
  }
  strlen(v1);
  uint64_t v2 = (void *)sub_10003AB28(v0);
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)));
  uint64_t v3 = std::locale::use_facet(&v28, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale(&v28);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v4 = sub_10003AB28((uint64_t)v34);
  char v5 = (void *)sub_10003AB28(v4);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
  uint64_t v6 = std::locale::use_facet(&v28, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(&v28);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v7 = sub_10003AB28((uint64_t)v34);
  BOOL v8 = (void *)sub_10003AB28(v7);
  std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24)));
  uint64_t v9 = std::locale::use_facet(&v28, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
  std::locale::~locale(&v28);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v10 = sub_10003AB28((uint64_t)v34);
  locale = (const char *)&v28;
  sub_1004A82EC((unsigned __int8 *)&v31, &v28);
  if (v30 < 0) {
    locale = (const char *)v28.__locale_;
  }
  strlen(locale);
  uint64_t v12 = (void *)sub_10003AB28(v10);
  std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  id v13 = std::locale::use_facet(&v48, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
  std::locale::~locale(&v48);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v30) < 0) {
    operator delete(v28.__locale_);
  }
  v28.__locale_ = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v14 = sub_1003705E4();
  if (!(*(unsigned int (**)(uint64_t, std::locale *))(*(void *)v14 + 64))(v14, &v28))
  {
    uint64_t v15 = HIBYTE(v30);
    if (v30 < 0) {
      uint64_t v15 = v29;
    }
    if (v15)
    {
      uint64_t v16 = sub_10003AB28((uint64_t)v34);
      char v17 = (void *)sub_10003AB28(v16);
      std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
      BOOL v18 = std::locale::use_facet(&v48, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
      std::locale::~locale(&v48);
      std::ostream::put();
      std::ostream::flush();
    }
  }
  char v27 = 0;
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B0978);
  }
  sub_1004E3008((uint64_t)off_1009F8068, &v27);
  char v26 = 0;
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B0978);
  }
  sub_1004E4370((uint64_t)off_1009F8068, &v26);
  uint64_t v19 = sub_10003AB28((uint64_t)v34);
  uint64_t v20 = sub_10003AB28(v19);
  uint64_t v21 = sub_10003AB28(v20);
  char v22 = (void *)sub_10003AB28(v21);
  std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(void *)(*v22 - 24)));
  uint64_t v23 = std::locale::use_facet(&v48, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
  std::locale::~locale(&v48);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  if (SHIBYTE(v30) < 0) {
    operator delete(v28.__locale_);
  }
  *(void *)((char *)&v34[-1]
  *(void *)&v34[0] = v24;
  if (SHIBYTE(v36) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1004B67AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  std::locale::~locale((std::locale *)(v18 - 72));
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_100742518((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_1004B6818()
{
}

void sub_1004B6A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004B6A38(uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  int v15 = a2;
  __int16 v16 = WORD2(a2);
  uint64_t v14 = 0;
  char v13 = 0;
  sub_10001B8E0(&v13);
  if (sub_10017E2D4((uint64_t)&v15, &v14))
  {
    uint64_t v10 = 312;
  }
  else
  {
    if (*(unsigned char *)(v14 + 278)) {
      int v11 = sub_1001FE1B8();
    }
    else {
      int v11 = sub_10018EF4C(v14, a3, v4, v5, v6, v7, v8, v9);
    }
    if (v11)
    {
      uint64_t v10 = 1;
    }
    else
    {
      sub_10001B910(&v13);
      uint64_t v10 = 0;
    }
  }
  sub_10001B8AC(&v13);
  return v10;
}

void sub_1004B6AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void *sub_1004B6B00(void *result)
{
  *uint64_t result = off_1009B08A8;
  return result;
}

void sub_1004B6B20(void *a1)
{
  *a1 = off_1009B08A8;
  operator delete();
}

uint64_t sub_1004B6B50(unint64_t *a1)
{
  uint64_t result = sub_1004B6C1C((uint64_t)a1, a1[2]);
  if (result)
  {
    unint64_t v3 = a1[2];
    unint64_t v4 = a1[3];
    unint64_t v5 = a1[4];
    uint64_t v6 = *(uint64_t (**)(unint64_t *, unint64_t, unint64_t, unint64_t))(*a1 + 40);
    return v6(a1, v3, v4, v5);
  }
  return result;
}

uint64_t sub_1004B6BC4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result = sub_1004B6C1C(a1, *(void *)(a1 + 40));
  if (result) {
    return sub_10046A7A0(a2, a3, *(void *)(a1 + 40), *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52), a4);
  }
  return result;
}

BOOL sub_1004B6C1C(uint64_t a1, unint64_t a2)
{
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009B0958);
  }
  uint64_t v3 = qword_1009F8160;

  return sub_10055363C(v3, a2);
}

void *sub_1004B6C80(void *result)
{
  *uint64_t result = off_1009B08E8;
  return result;
}

void sub_1004B6CA0(void *a1)
{
  *a1 = off_1009B08E8;
  operator delete();
}

uint64_t sub_1004B6CD0(unint64_t *a1)
{
  uint64_t result = sub_1004B6C1C((uint64_t)a1, a1[2]);
  if (result)
  {
    unint64_t v3 = a1[2];
    unint64_t v4 = a1[3];
    unint64_t v5 = a1[4];
    uint64_t v6 = *(uint64_t (**)(unint64_t *, unint64_t, unint64_t, unint64_t))(*a1 + 40);
    return v6(a1, v3, v4, v5);
  }
  return result;
}

uint64_t sub_1004B6D44(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result = sub_1004B6C1C(a1, *(void *)(a1 + 40));
  if (result) {
    return sub_10046A7A0(a2, a3, *(void *)(a1 + 40), *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52), a4);
  }
  return result;
}

void *sub_1004B6D9C(void *result)
{
  *uint64_t result = &off_1009B0928;
  return result;
}

void sub_1004B6DBC(void *a1)
{
  *a1 = &off_1009B0928;
  operator delete();
}

uint64_t sub_1004B6DEC(unint64_t *a1)
{
  uint64_t result = sub_1004B6C1C((uint64_t)a1, a1[2]);
  if (result)
  {
    unint64_t v3 = a1[2];
    unint64_t v4 = a1[3];
    unint64_t v5 = a1[4];
    uint64_t v6 = *(uint64_t (**)(unint64_t *, unint64_t, unint64_t, unint64_t))(*a1 + 40);
    return v6(a1, v3, v4, v5);
  }
  return result;
}

uint64_t sub_1004B6E60(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t), uint64_t a4)
{
  uint64_t result = sub_1004B6C1C(a1, *(void *)(a1 + 40));
  if (result) {
    return sub_10046A7B8(a2, a3, *(void *)(a1 + 40), *(unsigned int *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(_WORD *)(a1 + 72), a4);
  }
  return result;
}

void sub_1004B6EC0(id a1)
{
}

void sub_1004B6F04()
{
}

void sub_1004B6F28(id a1)
{
}

void sub_1004B6F6C()
{
}

uint64_t sub_1004B6F90(uint64_t result, uint64_t *a2, uint64_t a3, void *a4, void *a5)
{
  if (a4 != a5)
  {
    unint64_t v5 = (void *)*a5;
    if (result != a3)
    {
      uint64_t v6 = 1;
      if (v5 != a4)
      {
        uint64_t v7 = a4;
        do
        {
          uint64_t v7 = (void *)v7[1];
          ++v6;
        }
        while (v7 != v5);
      }
      *(void *)(a3 + 16) -= v6;
      *(void *)(result + 16) += v6;
    }
    uint64_t v8 = *a4;
    *(void *)(v8 + 8) = v5[1];
    *(void *)v5[1] = v8;
    uint64_t v9 = *a2;
    *(void *)(v9 + 8) = a4;
    *a4 = v9;
    *a2 = (uint64_t)v5;
    v5[1] = a2;
  }
  return result;
}

void sub_1004B7008(id a1)
{
}

void sub_1004B704C()
{
}

uint64_t sub_1004B7070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    sub_1004B712C(a3, *(void *)(a1 + 8), a2);
    *(void *)(a1 + 8) = v5;
  }
  return a2;
}

uint64_t sub_1004B70B8(uint64_t result, uint64_t a2, uint64_t a3)
{
  while (1)
  {
    if (result == a2) {
      return a2;
    }
    if (*(void *)result == a3) {
      break;
    }
    result += 48;
  }
  if (result != a2)
  {
    for (uint64_t i = result + 48; i != a2; i += 48)
    {
      if (*(void *)i != a3)
      {
        *(void *)uint64_t result = *(void *)i;
        long long v4 = *(_OWORD *)(i + 8);
        *(void *)(result + 24) = *(void *)(i + 24);
        *(_OWORD *)(result + 8) = v4;
        *(_DWORD *)(result + 32) = *(_DWORD *)(i + 32);
        *(void *)(result + 40) = *(void *)(i + 40);
        result += 48;
      }
    }
  }
  return result;
}

uint64_t sub_1004B712C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 == a2) {
    return a1;
  }
  do
  {
    *(void *)a3 = *(void *)a1;
    long long v3 = *(_OWORD *)(a1 + 8);
    *(void *)(a3 + 24) = *(void *)(a1 + 24);
    *(_OWORD *)(a3 + 8) = v3;
    *(_DWORD *)(a3 + 32) = *(_DWORD *)(a1 + 32);
    *(void *)(a3 + 40) = *(void *)(a1 + 40);
    a3 += 48;
    a1 += 48;
  }
  while (a1 != a2);
  return a2;
}

void sub_1004B7180(id a1)
{
}

void sub_1004B71C4()
{
}

void sub_1004B71E8(id a1)
{
}

void sub_1004B722C()
{
}

void sub_1004B7250(id a1)
{
}

void sub_1004B7294()
{
}

void sub_1004B72B8(id a1)
{
}

void sub_1004B72FC()
{
}

void sub_1004B7320(id a1)
{
}

void sub_1004B7364()
{
}

uint64_t sub_1004B7388(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    abort();
  }
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v2) >> 4);
  if (2 * v9 > v4) {
    unint64_t v4 = 2 * v9;
  }
  if (v9 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v21 = v7;
  int v11 = (char *)sub_1002C50E8(v7, v10);
  uint64_t v12 = &v11[48 * v3];
  std::string __p = v11;
  uint64_t v18 = v12;
  uint64_t v20 = &v11[48 * v13];
  *(void *)uint64_t v12 = *(void *)a2;
  long long v14 = *(_OWORD *)(a2 + 8);
  *((void *)v12 + 3) = *(void *)(a2 + 24);
  *(_OWORD *)(v12 + 8) = v14;
  *((_DWORD *)v12 + 8) = *(_DWORD *)(a2 + 32);
  *((void *)v12 + 5) = *(void *)(a2 + 40);
  uint64_t v19 = v12 + 48;
  sub_1004B7504(a1, &__p);
  uint64_t v15 = a1[1];
  if (v19 != v18) {
    uint64_t v19 = &v18[(v19 - v18 - 48) % 0x30uLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v15;
}

void sub_1004B74B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1004B7504(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    uint64_t v5 = *(void *)(v2 - 48);
    v2 -= 48;
    *(void *)(v4 - 48) = v5;
    v4 -= 48;
    long long v6 = *(_OWORD *)(v2 + 8);
    *(void *)(v4 + 24) = *(void *)(v2 + 24);
    *(_OWORD *)(v4 + 8) = v6;
    *(_DWORD *)(v4 + 32) = *(_DWORD *)(v2 + 32);
    *(void *)(v4 + 40) = *(void *)(v2 + 40);
  }
  a2[1] = v4;
  uint64_t v7 = *result;
  *uint64_t result = v4;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1004B757C(uint64_t result, uint64_t a2, void *a3)
{
  if (result == a2) {
    return a2;
  }
  while (1)
  {
    if (*a3 == *(void *)result)
    {
      BOOL v3 = a3[1] == *(void *)(result + 8) && a3[2] == *(void *)(result + 16);
      if (v3 && a3[3] == *(void *)(result + 24)) {
        break;
      }
    }
    result += 48;
    if (result == a2) {
      return a2;
    }
  }
  if (result != a2)
  {
    for (uint64_t i = result + 48; i != a2; i += 48)
    {
      if (*a3 == *(void *)i)
      {
        BOOL v6 = a3[1] == *(void *)(i + 8) && a3[2] == *(void *)(i + 16);
        if (v6 && a3[3] == *(void *)(i + 24)) {
          continue;
        }
      }
      *(void *)uint64_t result = *(void *)i;
      long long v8 = *(_OWORD *)(i + 8);
      *(void *)(result + 24) = *(void *)(i + 24);
      *(_OWORD *)(result + 8) = v8;
      *(_DWORD *)(result + 32) = *(_DWORD *)(i + 32);
      *(void *)(result + 40) = *(void *)(i + 40);
      result += 48;
    }
  }
  return result;
}

uint64_t *sub_1004B763C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = (uint64_t *)a1[1]; a2 != a3 && i != a1; uint64_t i = (uint64_t *)i[1])
  {
    i[2] = *(void *)(a2 + 16);
    a2 = *(void *)(a2 + 8);
  }
  if (i == a1) {
    return sub_1004B768C((uint64_t)a1, a1, a2, a3);
  }
  else {
    return sub_1004B7760((uint64_t)a1, i, a1);
  }
}

uint64_t *sub_1004B768C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    long long v8 = operator new(0x18uLL);
    uint64_t v9 = v8;
    *long long v8 = 0;
    v8[1] = 0;
    v8[2] = *(void *)(a3 + 16);
    uint64_t v10 = *(void *)(a3 + 8);
    uint64_t v11 = 1;
    if (v10 != a4)
    {
      uint64_t v12 = v8;
      do
      {
        long long v8 = operator new(0x18uLL);
        *long long v8 = v12;
        v8[1] = 0;
        v8[2] = *(void *)(v10 + 16);
        v12[1] = v8;
        ++v11;
        uint64_t v10 = *(void *)(v10 + 8);
        uint64_t v12 = v8;
      }
      while (v10 != a4);
    }
    uint64_t v13 = *a2;
    *(void *)(v13 + 8) = v9;
    void *v9 = v13;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(void *)(a1 + 16) += v11;
    return v9;
  }
  return a2;
}

uint64_t *sub_1004B7760(uint64_t a1, uint64_t *__p, uint64_t *a3)
{
  if (__p != a3)
  {
    uint64_t v5 = *a3;
    uint64_t v6 = *__p;
    *(void *)(v6 + 8) = *(void *)(*a3 + 8);
    **(void **)(v5 + 8) = v6;
    do
    {
      uint64_t v7 = (uint64_t *)__p[1];
      --*(void *)(a1 + 16);
      operator delete(__p);
      std::string __p = v7;
    }
    while (v7 != a3);
  }
  return a3;
}

void sub_1004B77D4(id a1)
{
}

void sub_1004B7818()
{
}

void sub_1004B783C(id a1)
{
}

void sub_1004B7880()
{
}

void sub_1004B78A4(id a1)
{
}

void sub_1004B78E8()
{
}

void sub_1004B790C(id a1)
{
}

void sub_1004B7950()
{
}

void sub_1004B7974(id a1)
{
}

void sub_1004B79B8()
{
}

char *sub_1004B79DC(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_1004B7A60(result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      *(void *)uint64_t v7 = *(void *)a2;
      long long v8 = *(_OWORD *)(a2 + 8);
      *(void *)(v7 + 24) = *(void *)(a2 + 24);
      *(_OWORD *)(v7 + 8) = v8;
      *(_DWORD *)(v7 + 32) = *(_DWORD *)(a2 + 32);
      *(void *)(v7 + 40) = *(void *)(a2 + 40);
      v7 += 48;
      a2 += 48;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

char *sub_1004B7A60(void *a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    abort();
  }
  uint64_t result = (char *)sub_1002C50E8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

void sub_1004B7AB0(id a1)
{
}

void sub_1004B7AF4()
{
}

void sub_1004B7B18(id a1)
{
}

void sub_1004B7B5C()
{
}

void sub_1004B7B80(uint64_t a1)
{
  uint64_t v2 = sub_100017768();
  sub_10004191C(buf, "TTRUI");
  sub_10004191C(__p, "Disable");
  (*(void (**)(uint64_t, uint8_t *, void **, uint64_t))(*(void *)v2 + 72))(v2, buf, __p, a1 + 12);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v3 = sub_100017768();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3) & 1) == 0) {
    *(unsigned char *)(a1 + 12) = 1;
  }
  uint64_t v4 = sub_100017768();
  sub_10004191C(buf, "TTRUIDisabledByUser");
  sub_10004191C(__p, "Disable");
  uint64_t v5 = (int *)(a1 + 16);
  (*(void (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v4 + 128))(v4, buf, __p, v5);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v6 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *v5;
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "TTRUIDisabledByUser %d", buf, 8u);
  }
}

void sub_1004B7D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004B7DA8(double a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  id v12 = objc_alloc_init((Class)SDRDiagnosticReporter);
  if (*((char *)a3 + 23) >= 0) {
    int v7 = a3;
  }
  else {
    int v7 = (uint64_t *)*a3;
  }
  long long v8 = +[NSString stringWithUTF8String:v7];
  if (*((char *)a4 + 23) >= 0) {
    char v9 = a4;
  }
  else {
    char v9 = (uint64_t *)*a4;
  }
  uint64_t v10 = +[NSString stringWithUTF8String:v9];
  char v11 = [v12 signatureWithDomain:@"Bluetooth" type:@"Networking" subType:v8 subtypeContext:v10 detectedProcess:@"bluetoothd" triggerThresholdValues:0];

  [v12 snapshotWithSignature:v11 duration:0 events:0 payload:0 actions:&stru_1009B0B58 reply:a1];
}

void sub_1004B7EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1004B7EF0(id a1, NSDictionary *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = [(NSDictionary *)v2 objectForKeyedSubscript:kSymptomDiagnosticReplySuccess];
  unsigned int v4 = [v3 BOOLValue];

  if (v4)
  {
    id v5 = [(NSDictionary *)v2 objectForKeyedSubscript:kSymptomDiagnosticReplySessionID];
    uint64_t v6 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = v5;
      int v10 = 136315138;
      id v11 = [v5 UTF8String];
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "ABC Snapshot successful with SessionID %s", (uint8_t *)&v10, 0xCu);
    }
  }
  else
  {
    int v7 = [(NSDictionary *)v2 objectForKeyedSubscript:kSymptomDiagnosticReplyReason];
    signed int v8 = [v7 intValue];

    id v5 = [(NSDictionary *)v2 objectForKeyedSubscript:kSymptomDiagnosticReplyReasonString];
    char v9 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
    {
      id v5 = v5;
      sub_10076F2B8((uint64_t)[v5 UTF8String], (uint8_t *)&v10, v8, v9);
    }
  }
}

void sub_1004B8080(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004B80BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1004AF8EC();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1004B813C;
  v6[3] = &unk_100998260;
  v6[4] = a1;
  _OWORD v6[5] = a3;
  sub_100013018(v5, v6);
}

void sub_1004B813C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = "unknown";
    if (v4 == 1) {
      uint64_t v5 = "Cancel";
    }
    if (!v4) {
      uint64_t v5 = "File a Radar";
    }
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = v5;
    __int16 v13 = 2048;
    uint64_t v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "BluetoothDiagnosticsManager: User responded with %{public}s (%ld) button ", buf, 0x16u);
  }
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6 == 2)
  {
    *(_DWORD *)(v2 + 16) |= 1 << *(_DWORD *)(v2 + 8);
    uint64_t v7 = sub_100017768();
    sub_10004191C(buf, "TTRUIDisabledByUser");
    sub_10004191C(__p, "Disable");
    (*(void (**)(uint64_t, unsigned char *, void **, void))(*(void *)v7 + 136))(v7, buf, __p, *(unsigned int *)(v2 + 16));
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    if (v15 < 0) {
      operator delete(*(void **)buf);
    }
    signed int v8 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *(_DWORD *)(v2 + 16);
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "set TTRUIDisabledByUser %d", buf, 8u);
    }
  }
  else if (!v6)
  {
    sub_1004B836C(v2);
  }
  CFRelease(*(CFTypeRef *)v2);
  *(void *)uint64_t v2 = 0;
  *(_DWORD *)(v2 + 8) = 0;
}

void sub_1004B8330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004B836C(uint64_t a1)
{
  uint64_t v1 = +[NSString stringWithFormat:@"Bluetooth TTR %i", *(unsigned int *)(a1 + 8)];
  v19[0] = @"Classification";
  v19[1] = @"ComponentID";
  v20[0] = @"Other Bug";
  v20[1] = @"1335920";
  void v19[2] = @"ComponentName";
  v19[3] = @"ComponentVersion";
  v20[2] = @"CoreBluetooth - Auto TTR";
  v20[3] = @"iOS";
  v19[4] = @"ExtensionIdentifiers";
  v19[5] = @"Reproducibility";
  v20[4] = @"com.apple.DiagnosticExtensions.Bluetooth";
  v20[5] = @"I Didn't Try";
  v19[6] = @"Description";
  v19[7] = @"Title";
  v20[6] = @"\n 1. Were you attempting to connect out to a device? \n2. Were you expecting an incoming connection? \n3. Is the remote device that you were trying to connect to/from an Apple Device? \n4. Was this a Bluetooth Classic connection or a Bluetooth Low Energy Connection(BLE) connection? \n5. What is the Make/Model/Year of the remote device?\n6. Did you encounter a UI issue? \n7. Did you encounter an issue while trying to discover devices from Bluetooth Settings? \n\n Please provide a brief description of the issue...";
  v20[7] = v1;
  __int16 v13 = +[NSDictionary dictionaryWithObjects:v20 forKeys:v19 count:8];
  uint64_t v2 = +[NSMutableArray array];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v3 = v13;
  id v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v15;
    do
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v5) {
          objc_enumerationMutation(v3);
        }
        uint64_t v7 = *(void *)(*((void *)&v14 + 1) + 8 * i);
        signed int v8 = [v3 objectForKeyedSubscript:v7];
        int v9 = +[NSURLQueryItem queryItemWithName:v7 value:v8];
        [v2 addObject:v9];
      }
      id v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v4);
  }

  int v10 = +[NSURLComponents componentsWithString:@"tap-to-radar://new"];
  [v10 setQueryItems:v2];
  char v11 = +[LSApplicationWorkspace defaultWorkspace];
  id v12 = [v10 URL];
  [v11 openURL:v12 configuration:0 completionHandler:0];
}

void sub_1004B8614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  long long v15 = v12;

  _Unwind_Resume(a1);
}

void sub_1004B869C(uint64_t a1, int a2)
{
  if (*(unsigned char *)(a1 + 12))
  {
    uint64_t v2 = qword_100A19E50;
    if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    id v3 = "BluetoothDiagnosticsManager: Skipping TTR Alert UI";
LABEL_7:
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, v3, buf, 2u);
    return;
  }
  if ((*(_DWORD *)(a1 + 16) >> a2))
  {
    uint64_t v2 = qword_100A19E50;
    if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    id v3 = "BluetoothDiagnosticsManager: Skipping TTR Alert UI By user";
    goto LABEL_7;
  }
  uint64_t v6 = sub_1004AF8EC();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1004B87B0;
  v7[3] = &unk_100997570;
  v7[4] = a1;
  int v8 = a2;
  sub_100013018(v6, v7);
}

void sub_1004B87B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "BluetoothDiagnosticsManager: Show TTR Alert", buf, 2u);
  }
  if (!*(void *)v2)
  {
    *(_DWORD *)long long buf = 0;
    CFStringRef v5 = @"Bluetooth Issue detected. Please file a radar.";
    int v6 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(v2 + 8) = v6;
    if (v6 == 2) {
      CFStringRef v5 = @"Bluetooth maximum connection request number exceeded. Please file a radar.";
    }
    if (v6 == 1) {
      CFStringRef v5 = @"Bluetooth toggle detected. Is Bluetooth working as expected?";
    }
    v15[0] = kCFUserNotificationAlertTopMostKey;
    v15[1] = SBUserNotificationAllowMenuButtonDismissal;
    v16[0] = &__kCFBooleanTrue;
    v16[1] = &__kCFBooleanTrue;
    void v15[2] = SBUserNotificationDismissOnLock;
    v15[3] = kCFUserNotificationAlertHeaderKey;
    void v16[2] = &__kCFBooleanTrue;
    v16[3] = @"Bluetooth Issue?";
    uint8_t v15[4] = kCFUserNotificationAlertMessageKey;
    v15[5] = kCFUserNotificationDefaultButtonTitleKey;
    v16[4] = v5;
    v16[5] = @"File a Radar";
    v15[6] = kCFUserNotificationAlternateButtonTitleKey;
    v15[7] = kCFUserNotificationOtherButtonTitleKey;
    void v16[6] = @"Cancel";
    v16[7] = @"Do not ask again.";
    uint64_t v7 = +[NSDictionary dictionaryWithObjects:v16 forKeys:v15 count:8];
    CFDictionaryRef v8 = (const __CFDictionary *)[v7 mutableCopy];

    int v9 = CFUserNotificationCreate(kCFAllocatorDefault, 0.0, 3uLL, (SInt32 *)buf, v8);
    *(void *)uint64_t v2 = v9;
    RunLoopSource = CFUserNotificationCreateRunLoopSource(kCFAllocatorDefault, v9, (CFUserNotificationCallBack)sub_1004B8AA0, 0);
    if (RunLoopSource)
    {
      Main = CFRunLoopGetMain();
      CFRunLoopAddSource(Main, RunLoopSource, kCFRunLoopCommonModes);
    }
    else
    {
      if (!v9)
      {
        id v12 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int16 v13 = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "BluetoothDiagnosticsManager: notification is null", v13, 2u);
        }
        goto LABEL_15;
      }
      CFUserNotificationCancel(v9);
      RunLoopSource = v9;
    }
    CFRelease(RunLoopSource);
LABEL_15:

    return;
  }
  id v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BluetoothDiagnosticsManager: Already busy with another notification, waiting for the current one to complete", buf, 2u);
  }
}

void sub_1004B8A78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004B8AA0(uint64_t a1, uint64_t a2)
{
  if (qword_1009FB088 != -1) {
    dispatch_once(&qword_1009FB088, &stru_1009B0B78);
  }
  uint64_t v3 = qword_1009FB080;

  sub_1004B80BC(v3, a2, a2);
}

void sub_1004B8B04(char *__s, char *a2, double a3)
{
  if (qword_1009FB088 != -1) {
    dispatch_once(&qword_1009FB088, &stru_1009B0B78);
  }
  sub_10004191C(v9, __s);
  int v6 = sub_10004191C(__p, a2);
  sub_1004B7DA8(a3, (uint64_t)v6, (uint64_t *)v9, (uint64_t *)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
}

void sub_1004B8BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004B8BE0(id a1)
{
}

uint64_t sub_1004B8C24(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)uint64_t result = a2;
  *(void *)(result + 8) = a3;
  return result;
}

_DWORD *sub_1004B8C30(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

uint64_t sub_1004B8C38(uint64_t a1, int a2, long long *a3, char a4, void *a5)
{
  id v9 = a5;
  *(_DWORD *)a1 = a2;
  char v10 = (unsigned char *)(a1 + 8);
  if (*((char *)a3 + 23) < 0)
  {
    sub_10003B098(v10, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v11 = *a3;
    *(void *)(a1 + 24) = *((void *)a3 + 2);
    *(_OWORD *)char v10 = v11;
  }
  *(unsigned char *)(a1 + 32) = a4;
  *(void *)(a1 + 40) = v9;
  return a1;
}

void sub_1004B8CB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1004B8CC4(uint64_t a1, long long *a2, char a3, uint64_t a4, char a5, char a6)
{
  *(_DWORD *)a1 = 2;
  uint64_t v11 = a1 + 8;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10003B098((unsigned char *)v11, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v12 = *a2;
    *(void *)(v11 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v11 = v12;
  }
  *(unsigned char *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = a4;
  *(unsigned char *)(a1 + 48) = a5;
  *(unsigned char *)(a1 + 49) = a6;
  return a1;
}

uint64_t sub_1004B8D4C(uint64_t a1, long long *a2, char a3, int a4)
{
  *(_DWORD *)a1 = 3;
  uint64_t v7 = a1 + 8;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10003B098((unsigned char *)v7, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v7 = v8;
  }
  *(unsigned char *)(a1 + 32) = a3;
  *(_DWORD *)(a1 + 36) = a4;
  return a1;
}

uint64_t sub_1004B8DB8(uint64_t a1, long long *a2, char a3, char a4, char a5, char a6, char a7, long long *a8, long long *a9)
{
  *(_DWORD *)a1 = 4;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10003B098((unsigned char *)(a1 + 8), *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v16 = *a2;
    *(void *)(a1 + 24) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v16;
  }
  *(unsigned char *)(a1 + 32) = a3;
  *(unsigned char *)(a1 + 33) = a4;
  *(unsigned char *)(a1 + 34) = a5;
  *(unsigned char *)(a1 + 35) = a6;
  *(unsigned char *)(a1 + 36) = a7;
  if (*((char *)a8 + 23) < 0)
  {
    sub_10003B098((unsigned char *)(a1 + 40), *(void **)a8, *((void *)a8 + 1));
  }
  else
  {
    long long v17 = *a8;
    *(void *)(a1 + 56) = *((void *)a8 + 2);
    *(_OWORD *)(a1 + 40) = v17;
  }
  uint64_t v18 = (unsigned char *)(a1 + 64);
  if (*((char *)a9 + 23) < 0)
  {
    sub_10003B098(v18, *(void **)a9, *((void *)a9 + 1));
  }
  else
  {
    long long v19 = *a9;
    *(void *)(a1 + 80) = *((void *)a9 + 2);
    *(_OWORD *)uint64_t v18 = v19;
  }
  return a1;
}

void sub_1004B8EB0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004B8EE4(uint64_t a1, long long *a2, char a3, char a4, char a5, char a6, char a7, long long *a8, long long *a9)
{
  return sub_1004B8DB8(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_1004B8EF0(uint64_t a1, long long *a2, char a3, void *a4)
{
  return sub_1004B8C38(a1, 5, a2, a3, a4);
}

uint64_t sub_1004B8F04(uint64_t a1, long long *a2, char a3, void *a4, int a5, int a6)
{
  uint64_t result = sub_1004B8C38(a1, 6, a2, a3, a4);
  *(_DWORD *)(result + 48) = a5;
  *(_DWORD *)(result + 52) = a6;
  return result;
}

uint64_t sub_1004B8F40(uint64_t a1, long long *a2, char a3, void *a4)
{
  return sub_1004B8C38(a1, 7, a2, a3, a4);
}

uint64_t sub_1004B8F54(uint64_t a1, long long *a2, char a3, void *a4, int a5)
{
  uint64_t result = sub_1004B8C38(a1, 8, a2, a3, a4);
  *(_DWORD *)(result + 48) = a5;
  return result;
}

uint64_t sub_1004B8F8C(uint64_t a1, long long *a2, char a3, void *a4, uint64_t a5)
{
  uint64_t result = sub_1004B8C38(a1, 9, a2, a3, a4);
  *(void *)(result + 48) = a5;
  return result;
}

uint64_t sub_1004B8FC4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  *(_DWORD *)a1 = 10;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = a3;
  return a1;
}

uint64_t sub_1004B8FFC(uint64_t a1, void *a2, int a3, char a4)
{
  id v7 = a2;
  *(_DWORD *)a1 = 11;
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = a3;
  *(unsigned char *)(a1 + 20) = a4;
  return a1;
}

uint64_t sub_1004B9048(uint64_t a1, void *a2)
{
  id v3 = a2;
  *(_DWORD *)a1 = 12;
  *(void *)(a1 + 8) = v3;
  return a1;
}

uint64_t sub_1004B907C(uint64_t a1)
{
  *(void *)a1 = off_1009B0BA8;
  *(void *)(a1 + 8) = &off_1009B0BE8;
  sub_100052DA8(a1 + 16);
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 144) = a1 + 144;
  *(void *)(a1 + 152) = a1 + 144;
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 112) = 2;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  return a1;
}

void sub_1004B9110(uint64_t a1)
{
  uint64_t v2 = sub_10003FFD4();
  sub_1004A79EC(v2 + 328, a1 + 8);
  uint64_t v3 = sub_1004AF8EC();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_1004B919C;
  v4[3] = &unk_100997528;
  v4[4] = a1;
  sub_100013018(v3, v4);
}

void sub_1004B919C(uint64_t a1)
{
}

void sub_1004B91A4(uint64_t a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Beginning asynchronous power init", buf, 2u);
  }
  if (!sub_1004B9FE8(a1))
  {
    *(_DWORD *)(a1 + 112) = 3;
    return;
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B0C38);
  }
  (*(void (**)(void *))(*(void *)off_1009F8068 + 32))(off_1009F8068);
  uint64_t v3 = sub_10003FFD4();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 72))(v3, a1 + 116);
  uint64_t v4 = sub_10003FFD4();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 80))(v4, a1 + 117);
  int v5 = *(unsigned __int8 *)(a1 + 116);
  uint64_t v6 = *(void *)sub_1003705E4();
  if (v5)
  {
    if ((*(unsigned int (**)(void))(v6 + 104))()) {
      goto LABEL_8;
    }
LABEL_24:
    *(_DWORD *)(a1 + 112) = 0;
    sub_1004B9628((os_unfair_lock_s *)a1);
    sub_1004B9A20(a1);
    sub_1004BA538((os_unfair_lock_s *)a1, 0);
    return;
  }
  if ((*(unsigned int (**)(void))(v6 + 88))() != 1) {
    goto LABEL_24;
  }
LABEL_8:
  sub_1004B9628((os_unfair_lock_s *)a1);
  if (!*(unsigned char *)(a1 + 116)) {
    goto LABEL_18;
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B0C38);
  }
  if (sub_1004E67E0((uint64_t)off_1009F8068) == 2)
  {
    id v7 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Airplane mode is ON and airplane mode default grant list state is enabled on power init", v11, 2u);
    }
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009B0C38);
    }
    int v8 = 1;
  }
  else
  {
LABEL_18:
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009B0C38);
    }
    int v8 = 0;
  }
  sub_1004E05D4((uint64_t)off_1009F8068, v8);
  uint64_t v9 = sub_100017768();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9) & 1) == 0)
  {
    uint64_t v10 = sub_100050530();
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 152))(v10, 4);
  }
}

void sub_1004B94A0(uint64_t a1)
{
  uint64_t v2 = sub_10003FFD4() + 328;

  sub_1004A7CFC(v2, a1 + 8);
}

uint64_t sub_1004B94DC(uint64_t a1)
{
  return sub_1004B94E4(a1, 0);
}

uint64_t sub_1004B94E4(uint64_t a1, char a2)
{
  if (*(_DWORD *)(a1 + 112) == 3) {
    return 2;
  }
  int v5 = +[MCProfileConnection sharedConnection];
  char v6 = [v5 isBluetoothModificationAllowed] | a2;

  if ((v6 & 1) == 0) {
    return 200;
  }
  int v7 = *(unsigned __int8 *)(a1 + 116);
  uint64_t v8 = *(void *)sub_1003705E4();
  if (v7) {
    (*(void (**)(void))(v8 + 112))();
  }
  else {
    (*(void (**)(void))(v8 + 96))();
  }
  uint64_t v9 = sub_1004AF8EC();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_1004B9620;
  uint64_t v10[3] = &unk_100997528;
  void v10[4] = a1;
  sub_100013018(v9, v10);
  return 0;
}

void sub_1004B9610(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004B9620(uint64_t a1)
{
}

void sub_1004B9628(os_unfair_lock_s *a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Beginning asynchronous power on", buf, 2u);
  }
  if (a1[28]._os_unfair_lock_opaque == 1) {
    goto LABEL_16;
  }
  a1[28]._os_unfair_lock_opaque = 2;
  uint64_t v3 = sub_1003705E4();
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
  if (v4)
  {
    int v5 = v4;
    do
    {
      char v6 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67109120;
        int v11 = v5;
        _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Power on failed - %{bluetooth:OI_STATUS}u", buf, 8u);
      }
      sub_1004B9FE8((uint64_t)a1);
      uint64_t v7 = sub_1003705E4();
      int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    while (v5);
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B0C38);
  }
  if (!sub_1004DDF3C((uint64_t)off_1009F8068))
  {
LABEL_16:
    a1[28]._os_unfair_lock_opaque = 1;
    mach_absolute_time();
    if ((unint64_t)UpTicksToSeconds() <= 2)
    {
      if (qword_1009FB088 != -1) {
        dispatch_once(&qword_1009FB088, &stru_1009B0C58);
      }
      sub_1004B869C(qword_1009FB080, 1);
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076F378();
    }
    uint64_t v8 = sub_1003705E4();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 16))(v8))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_10076F310();
      }
      uint64_t v9 = sub_100017768();
      sub_1005C99C8(v9, 1);
    }
    a1[28]._os_unfair_lock_opaque = 0;
  }
  sub_1004BA538(a1, a1[28]._os_unfair_lock_opaque);
}

uint64_t sub_1004B98D4(uint64_t a1)
{
  return sub_1004B98DC(a1, 0);
}

uint64_t sub_1004B98DC(uint64_t a1, char a2)
{
  if (*(_DWORD *)(a1 + 112) == 3) {
    return 2;
  }
  int v5 = +[MCProfileConnection sharedConnection];
  char v6 = [v5 isBluetoothModificationAllowed] | a2;

  if ((v6 & 1) == 0) {
    return 200;
  }
  int v7 = *(unsigned __int8 *)(a1 + 116);
  uint64_t v8 = *(void *)sub_1003705E4();
  if (v7) {
    (*(void (**)(void))(v8 + 112))();
  }
  else {
    (*(void (**)(void))(v8 + 96))();
  }
  uint64_t v9 = sub_1004AF8EC();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_1004B9A18;
  uint64_t v10[3] = &unk_100997528;
  void v10[4] = a1;
  sub_100013018(v9, v10);
  return 0;
}

void sub_1004B9A08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004B9A18(uint64_t a1)
{
}

void sub_1004B9A20(uint64_t a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)char v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Beginning asynchronous power off", v6, 2u);
  }
  if (*(_DWORD *)(a1 + 112) != 1) {
    goto LABEL_11;
  }
  *(_DWORD *)(a1 + 112) = 2;
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B0C38);
  }
  if (!sub_1004E16EC((uint64_t)off_1009F8068))
  {
    uint64_t v4 = sub_1003705E4();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 16))(v4))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_10076F310();
      }
      uint64_t v5 = sub_100017768();
      sub_1005C99C8(v5, 1);
    }
LABEL_11:
    *(_DWORD *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = mach_absolute_time();
    unsigned int v3 = *(_DWORD *)(a1 + 112);
    goto LABEL_12;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
    sub_10076F3E0();
  }
  unsigned int v3 = 1;
  *(_DWORD *)(a1 + 112) = 1;
LABEL_12:
  sub_1004BA538((os_unfair_lock_s *)a1, v3);
}

uint64_t sub_1004B9B88(uint64_t a1)
{
  uint64_t v2 = sub_1004AF8EC();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_1004B9C08;
  v4[3] = &unk_100997528;
  v4[4] = a1;
  sub_100013018(v2, v4);
  return 0;
}

void sub_1004B9C08(uint64_t a1)
{
}

void sub_1004B9C10(os_unfair_lock_s *a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Beginning asynchronous power shutdown", v3, 2u);
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B0C38);
  }
  sub_1004E16EC((uint64_t)off_1009F8068);
  a1[28]._os_unfair_lock_opaque = 4;
  sub_1004BA538(a1, 4u);
}

uint64_t sub_1004B9CC4(uint64_t a1)
{
  uint64_t v2 = sub_1004AF8EC();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_1004B9D44;
  v4[3] = &unk_100997528;
  v4[4] = a1;
  sub_100013018(v2, v4);
  return 0;
}

void sub_1004B9D44(uint64_t a1)
{
}

void sub_1004B9D4C(os_unfair_lock_s *a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Beginning asynchronous power reset", v7, 2u);
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B0C38);
  }
  int v3 = sub_1004E16EC((uint64_t)off_1009F8068);
  if (v3 && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
    sub_10076F3E0();
  }
  uint64_t v4 = sub_1003705E4();
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  if (v5 && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
    sub_10076F448();
  }
  if (!(v5 | v3))
  {
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009B0C38);
    }
    if (sub_1004DDF3C((uint64_t)off_1009F8068))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_10076F378();
      }
      uint64_t v6 = sub_1003705E4();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 16))(v6))
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
          sub_10076F310();
        }
      }
    }
    else
    {
      sub_1004BA538(a1, 1u);
    }
  }
}

uint64_t sub_1004B9F48(uint64_t a1)
{
  *(_DWORD *)(a1 + 112) = 2;
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B0C38);
  }
  uint64_t v2 = sub_1004E11D4((uint64_t)off_1009F8068);
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076F4B0();
    }
  }
  else
  {
    *(_DWORD *)(a1 + 112) = 0;
  }
  return v2;
}

uint64_t sub_1004B9FE0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 116);
}

BOOL sub_1004B9FE8(uint64_t a1)
{
  uint64_t v2 = sub_10003FFD4();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 264))(v2))
  {
    int v3 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Bluetooth is running inside a Virtual Machine, so skipping chip initialization", buf, 2u);
    }
    return sub_10016B718() == 10;
  }
  uint64_t v37 = 0;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  *(_OWORD *)long long buf = 0u;
  long long v22 = 0u;
  sub_1000419CC((uint64_t)buf);
  while (1)
  {
    int v5 = (uint64_t (***)(void))sub_1003705E4();
    uint64_t v6 = (**v5)(v5);
    uint64_t v7 = v6;
    if (v6 != 2 && v6 != 213) {
      break;
    }
    sub_10003AB28((uint64_t)buf);
    int v9 = 1;
LABEL_15:
    sub_1004BB194(a1, 2);
    uint64_t v10 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
    {
      std::stringbuf::str();
      int v11 = v17;
      if (v18 < 0) {
        int v11 = (void **)v17[0];
      }
      *(_DWORD *)long long v38 = 136315394;
      *(void *)&v38[4] = v11;
      __int16 v39 = 1024;
      int v40 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%s - %{bluetooth:OI_STATUS}u", v38, 0x12u);
      if (v18 < 0) {
        operator delete(v17[0]);
      }
      if (v9)
      {
LABEL_27:
        sub_10010B390();
        uint64_t v12 = sub_100050530();
        std::stringbuf::str();
        if (v41 >= 0) {
          __int16 v13 = v38;
        }
        else {
          __int16 v13 = *(char **)v38;
        }
        sub_10004191C(v17, v13);
        (*(void (**)(uint64_t, void, void **))(*(void *)v12 + 112))(v12, (unsigned __int16)v7, v17);
        if (v18 < 0) {
          operator delete(v17[0]);
        }
        if (v41 < 0) {
          operator delete(*(void **)v38);
        }
        if (qword_1009F8070 != -1) {
          dispatch_once(&qword_1009F8070, &stru_1009B0C38);
        }
        long long v14 = off_1009F8068;
        std::stringbuf::str();
        sub_1004E4FB0((uint64_t)v14, v7, 0, (uint64_t)&v15);
        if (v16 < 0) {
          operator delete(v15);
        }
        usleep(0xF4240u);
        _exit(1);
      }
    }
    else if (v9)
    {
      goto LABEL_27;
    }
  }
  if (v6)
  {
    sub_10003AB28((uint64_t)buf);
    std::ostream::operator<<();
    sub_1004BB194(a1, 2);
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009B0C38);
    }
    uint64_t v8 = off_1009F8068;
    std::stringbuf::str();
    sub_1004E4FB0((uint64_t)v8, v7, 1, (uint64_t)&__p);
    if (v20 < 0) {
      operator delete(__p);
    }
    int v9 = 0;
    goto LABEL_15;
  }
  sub_1004BB194(a1, 1);
  if (SHIBYTE(v26) < 0) {
    operator delete(*((void **)&v25 + 1));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return 1;
}

void sub_1004BA4B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_10027E318((uint64_t)&a30);
  _Unwind_Resume(a1);
}

void sub_1004BA538(os_unfair_lock_s *a1, unsigned int a2)
{
  uint64_t v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    unsigned int v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending 'power state changed' event for local device - {powerstate: %d}", buf, 8u);
  }
  int v5 = qword_100A19F50;
  if (os_log_type_enabled((os_log_t)qword_100A19F50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    unsigned int v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Power state change - {powerstate: %d}", buf, 8u);
  }
  if (a2 <= 1)
  {
    uint64_t v6 = sub_1004AF8EC();
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_1004BB2B8;
    v9[3] = &unk_100998300;
    unsigned int v10 = a2;
    sub_100013018(v6, v9);
  }
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1004BB41C;
  v7[3] = &unk_1009B0C18;
  unsigned int v8 = a2;
  sub_1004BB350(a1 + 20, v7);
}

void sub_1004BA6E0(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 116) == a2) {
    return;
  }
  uint64_t v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = "false";
    if (a2) {
      int v5 = "true";
    }
    int v29 = 136446210;
    long long v30 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Setting airplane mode to %{public}s", (uint8_t *)&v29, 0xCu);
  }
  *(unsigned char *)(a1 + 116) = a2;
  uint64_t v6 = +[MCProfileConnection sharedConnection];
  unsigned __int8 v7 = [v6 isBluetoothModificationAllowed];

  if (v7)
  {
    int v8 = *(_DWORD *)(a1 + 112);
    if (a2)
    {
      if (!v8)
      {
        int v9 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v29) = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Override power state transition : Don't turn on bluetooth in airplane mode if current power state is off", (uint8_t *)&v29, 2u);
        }
        uint64_t v10 = sub_1003705E4();
        (*(void (**)(uint64_t, void))(*(void *)v10 + 112))(v10, 0);
LABEL_21:
        char v15 = 1;
LABEL_23:
        uint64_t v16 = sub_1003705E4();
        int v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 104))(v16);
        uint64_t v18 = sub_1003705E4();
        int v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 88))(v18);
        if (qword_1009F8070 != -1) {
          dispatch_once(&qword_1009F8070, &stru_1009B0C38);
        }
        int v20 = sub_1004E67E0((uint64_t)off_1009F8068);
        if (a2)
        {
          if ((v15 & 1) == 0)
          {
            int v21 = *(_DWORD *)(a1 + 112);
            if (v17 == 1)
            {
              int v22 = v20;
              if (v21 != 1)
              {
                long long v23 = qword_100A19E50;
                if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
                {
                  LOWORD(v29) = 0;
                  _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Turn power on for airplane mode", (uint8_t *)&v29, 2u);
                }
                sub_1004B9628((os_unfair_lock_s *)a1);
              }
              if (v22 == 2)
              {
                long long v24 = qword_100A19E50;
                if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
                {
                  LOWORD(v29) = 0;
                  _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Default airplane mode denylist state is enabled. Entering grant list mode for AirplaneMode", (uint8_t *)&v29, 2u);
                }
                if (qword_1009F8070 != -1) {
                  dispatch_once(&qword_1009F8070, &stru_1009B0C38);
                }
                sub_1004E05D4((uint64_t)off_1009F8068, 1);
              }
            }
            else if (!v17 && v21)
            {
              long long v27 = qword_100A19E50;
              if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
              {
                LOWORD(v29) = 0;
                _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Turn power off for airplane mode", (uint8_t *)&v29, 2u);
              }
              sub_1004B9A20(a1);
            }
          }
        }
        else
        {
          if (*(_DWORD *)(a1 + 112) == v19) {
            char v25 = 1;
          }
          else {
            char v25 = v15;
          }
          if ((v25 & 1) == 0)
          {
            if (v19)
            {
              if (v19 == 1)
              {
                long long v26 = qword_100A19E50;
                if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
                {
                  LOWORD(v29) = 0;
                  _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Exiting airplane mode : Turn power on", (uint8_t *)&v29, 2u);
                }
                sub_1004B9628((os_unfair_lock_s *)a1);
              }
            }
            else
            {
              long long v28 = qword_100A19E50;
              if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
              {
                LOWORD(v29) = 0;
                _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Exiting airplane mode : Turn power off", (uint8_t *)&v29, 2u);
              }
              sub_1004B9A20(a1);
            }
          }
          if (qword_1009F8070 != -1) {
            dispatch_once(&qword_1009F8070, &stru_1009B0C38);
          }
          sub_1004E05D4((uint64_t)off_1009F8068, 0);
        }
        return;
      }
    }
    else if (v8)
    {
      __int16 v13 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v29) = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Override power state transition : Don't turn off bluetooth in normal mode if current airplane mode power is on", (uint8_t *)&v29, 2u);
      }
      uint64_t v14 = sub_1003705E4();
      (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 96))(v14, 1);
      goto LABEL_21;
    }
    char v15 = 0;
    goto LABEL_23;
  }
  int v11 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v12 = "false";
    if (a2) {
      unsigned int v12 = "true";
    }
    int v29 = 136446210;
    long long v30 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Bluetooth modification is not allowed. Ignore airplane mode change to %{public}s", (uint8_t *)&v29, 0xCu);
  }
}

void sub_1004BABDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004BABF4(uint64_t a1, int a2)
{
}

uint64_t sub_1004BAC04(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  *a2 = CFPrefs_GetInt64();
  *a3 = CFPrefs_GetInt64();
  *a4 = CFPrefs_GetInt64();
  uint64_t result = CFPrefs_GetInt64();
  *a5 = result;
  if (!result)
  {
    *a5 = sub_1004BAD14();
    return CFPrefs_SetInt64();
  }
  return result;
}

uint64_t sub_1004BAD14()
{
  uint64_t result = qword_100A13288;
  if (!qword_100A13288)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    size_t v4 = 16;
    if (sysctlbyname("kern.boottime", &v5, &v4, 0, 0) == -1)
    {
      qword_100A13288 = 0;
      uint64_t v1 = qword_100A19E50;
      BOOL v2 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR);
      uint64_t result = 0;
      if (v2)
      {
        *(_WORD *)int v3 = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "Unable to read kern.boottime", v3, 2u);
        return qword_100A13288;
      }
    }
    else
    {
      uint64_t result = (int)v6 + 1000000 * v5;
      qword_100A13288 = result;
    }
  }
  return result;
}

uint64_t sub_1004BADE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  CFPrefs_SetInt64();
  CFPrefs_SetInt64();
  uint64_t result = CFPrefs_SetInt64();
  if (a5)
  {
    sub_1004BAD14();
    return CFPrefs_SetInt64();
  }
  return result;
}

BOOL sub_1004BAE98(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1004BAD14();
  size_t v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 134218240;
    uint64_t v8 = v3;
    __int16 v9 = 2048;
    uint64_t v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Check device boot time: current: %llu last: %llu", (uint8_t *)&v7, 0x16u);
  }
  if (v3) {
    BOOL v5 = v3 == a2;
  }
  else {
    BOOL v5 = 1;
  }
  return !v5;
}

void sub_1004BAF64(uint64_t a1, uint64_t *a2, char *a3)
{
  uint64_t v15 = 0;
  unint64_t v16 = 0;
  unint64_t v14 = 0;
  __uint64_t v6 = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
  uint64_t v13 = 0;
  uint64_t v7 = sub_1004BAC04(a1, (uint64_t *)&v16, &v15, (uint64_t *)&v14, &v13);
  if ((unint64_t)*a2 < 2)
  {
    if (v16 >= 2) {
      sub_1004BADE8(v7, 0, 0, 0, 0);
    }
    goto LABEL_15;
  }
  if (v16 < 2)
  {
LABEL_6:
    char v10 = 1;
    sub_1004BADE8(v7, *a2, v6, 1, 1);
    *a2 = 0;
    goto LABEL_16;
  }
  BOOL v8 = sub_1004BAE98(v7, v13);
  if (v8)
  {
    __int16 v9 = qword_100A19E50;
    uint64_t v7 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Device was rebooted since last reported bluetooth Hardware Status sent.", buf, 2u);
    }
    goto LABEL_6;
  }
  if (v14 <= 2)
  {
    sub_1004BADE8(v8, *a2, v6, v14 + 1, 0);
    *a2 = 0;
LABEL_15:
    char v10 = 1;
    goto LABEL_16;
  }
  if (v14 == 3)
  {
    sub_1004BADE8(v8, *a2, v6, 4, 0);
    int v11 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *a2;
      *(_DWORD *)long long buf = 134217984;
      uint64_t v18 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Sending %llu state to mobilerepaird", buf, 0xCu);
    }
    goto LABEL_15;
  }
  if (v6 - v15 >= 0xD18C2E28000) {
    sub_1004BADE8(v8, 0, 0, 0, 0);
  }
  char v10 = 0;
LABEL_16:
  *a3 = v10;
}

void sub_1004BB194(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  char v3 = 0;
  sub_1004BAF64(a1, &v4, &v3);
  if (v3)
  {
    id v2 = (id)objc_opt_new();
    [v2 postComponentStatusEventFor:5 status:v4 withReply:&stru_1009B0BF8];
  }
}

void sub_1004BB21C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1004BB230(id a1, BOOL a2, NSError *a3)
{
  uint64_t v4 = a3;
  BOOL v5 = qword_100A19E50;
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076F594(a2, (uint64_t)v4, v5);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEBUG))
  {
    sub_10076F518(a2, v5);
  }
}

uint64_t sub_1004BB2B8(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 32);
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_1009B0C78);
  }
  sub_1004FA2D8((uint64_t)off_1009F8150, v1 == 1);
  id v2 = *(uint64_t (**)(void))(*(void *)sub_100050530() + 144);

  return v2();
}

void sub_1004BB350(os_unfair_lock_s *a1, void *a2)
{
  char v3 = a2;
  os_unfair_lock_lock(a1);
  BOOL v5 = 0;
  __uint64_t v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }
  if (v4)
  {
    __uint64_t v6 = v4;
    operator delete(v4);
  }
}

void sub_1004BB3F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1004BB41C(uint64_t a1, uint64_t (***a2)(void, uint64_t, void))
{
  return (**a2)(a2, 1, *(unsigned int *)(a1 + 32));
}

uint64_t sub_1004BB44C(uint64_t a1)
{
  v24[0] = 0;
  v24[1] = 0;
  sub_10003AED0((uint64_t)v24, a1 + 16);
  id v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Power Assertion History:", buf, 2u);
  }
  double Current = CFAbsoluteTimeGetCurrent();
  id v21 = objc_alloc_init((Class)NSDateFormatter);
  [v21 setDateFormat:@"yyyy-MM-dd H:mm:ss"];
  uint64_t v4 = *(void *)(a1 + 152);
  for (i = a1 + 144; v4 != i; uint64_t v4 = *(void *)(v4 + 8))
  {
    int v5 = *(_DWORD *)(v4 + 20);
    uint64_t v6 = *(int *)(v4 + 16);
    int v7 = *(_DWORD *)(v4 + 24);
    double v8 = *(double *)(v4 + 32);
    int v9 = *(_DWORD *)(v4 + 40);
    char v10 = *(unsigned char *)(v4 + 44);
    int v11 = *(_DWORD *)(v4 + 48);
    long long v23 = +[NSDate dateWithTimeIntervalSinceReferenceDate:v8];
    uint64_t v12 = [v21 stringFromDate:x0];
    LODWORD(v13) = llround((v8 - floor(v8)) * 1000.0);
    unint64_t v14 = +[NSString stringWithFormat:@"%@.%000d", v12, v13];
    log = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      id v15 = [v14 UTF8String];
      unint64_t v16 = "Unknown";
      if (v6 <= 6) {
        unint64_t v16 = off_1009B0C98[v6];
      }
      int v17 = "Unknown";
      if (v5 == 1) {
        int v17 = "Destroy";
      }
      if (!v5) {
        int v17 = "Create";
      }
      CFStringRef v18 = @"com.apple.bluetooth.LeBroadcaster.AdvertisingConfigAssertion";
      if ((v7 - 1) <= 0xA) {
        CFStringRef v18 = off_1009B0CD0[v7 - 1];
      }
      *(_DWORD *)long long buf = 136317186;
      id v26 = v15;
      __int16 v27 = 2048;
      double v28 = v8;
      __int16 v29 = 2048;
      double v30 = Current - v8;
      __int16 v31 = 2080;
      long long v32 = v16;
      __int16 v33 = 2080;
      long long v34 = v17;
      __int16 v35 = 2112;
      CFStringRef v36 = v18;
      __int16 v37 = 1024;
      int v38 = v9;
      __int16 v39 = 1024;
      int v40 = v10 & 1;
      __int16 v41 = 1024;
      int v42 = v11;
      _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEFAULT, "statedump: time:%s %.3f secs(%-12.2f secs ago) source:%-22s event:%-7s %@ ret:%d fw:%d ID:%08X", buf, 0x50u);
    }
  }
  return sub_10003AFB4((uint64_t)v24);
}

void sub_1004BB730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004BB78C(uint64_t a1)
{
  id v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v7) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: ------------------- Power Manager -------------------", (uint8_t *)&v7, 2u);
    id v2 = qword_100A19E50;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 116)) {
      char v3 = "On";
    }
    else {
      char v3 = "Off";
    }
    int v7 = 136446210;
    double v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Airplane Mode: %{public}s", (uint8_t *)&v7, 0xCu);
    id v2 = qword_100A19E50;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 117)) {
      uint64_t v4 = "On";
    }
    else {
      uint64_t v4 = "Off";
    }
    int v7 = 136446210;
    double v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Low Power Mode: %{public}s", (uint8_t *)&v7, 0xCu);
    id v2 = qword_100A19E50;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a1 + 112)) {
      int v5 = "On";
    }
    else {
      int v5 = "Off";
    }
    int v7 = 136446210;
    double v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Power State: %{public}s", (uint8_t *)&v7, 0xCu);
  }
  return sub_1004BB44C(a1);
}

uint64_t sub_1004BB940(uint64_t a1, int *a2)
{
  v21[0] = 0;
  v21[1] = 0;
  sub_10003AED0((uint64_t)v21, a1 + 16);
  unint64_t v4 = *(void *)(a1 + 160);
  if (v4 >= 0x1F4)
  {
    int v5 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEBUG)) {
      sub_10076F620(v4 - 499, v4, v5);
    }
    if ((_WORD)v4 == 499)
    {
      int v7 = *(uint64_t **)(a1 + 152);
    }
    else
    {
      unint64_t v6 = (unsigned __int16)(v4 - 499) + 1;
      int v7 = *(uint64_t **)(a1 + 152);
      do
      {
        int v7 = (uint64_t *)v7[1];
        --v6;
      }
      while (v6 > 1);
    }
    sub_1004B7760(a1 + 144, *(uint64_t **)(a1 + 152), v7);
  }
  double v8 = operator new(0x38uLL);
  long long v9 = *((_OWORD *)a2 + 1);
  v8[1] = *(_OWORD *)a2;
  v8[2] = v9;
  *((void *)v8 + 6) = *((void *)a2 + 4);
  uint64_t v10 = *(void *)(a1 + 144);
  *(void *)double v8 = v10;
  *((void *)v8 + 1) = a1 + 144;
  *(void *)(v10 + 8) = v8;
  *(void *)(a1 + 144) = v8;
  ++*(void *)(a1 + 160);
  int v11 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = *a2;
    uint64_t v13 = "Unknown";
    unint64_t v14 = "Unknown";
    if (v12 <= 6) {
      unint64_t v14 = off_1009B0C98[v12];
    }
    uint64_t v15 = *((void *)a2 + 2);
    int v16 = a2[1];
    int v17 = a2[2];
    if (v16 == 1) {
      uint64_t v13 = "Destroy";
    }
    if (!v16) {
      uint64_t v13 = "Create";
    }
    if ((v17 - 1) > 0xA) {
      CFStringRef v18 = @"com.apple.bluetooth.LeBroadcaster.AdvertisingConfigAssertion";
    }
    else {
      CFStringRef v18 = off_1009B0CD0[v17 - 1];
    }
    int v19 = a2[8];
    *(_DWORD *)long long buf = 134219010;
    uint64_t v23 = v15;
    __int16 v24 = 2080;
    char v25 = v14;
    __int16 v26 = 2080;
    __int16 v27 = v13;
    __int16 v28 = 2112;
    CFStringRef v29 = v18;
    __int16 v30 = 1024;
    int v31 = v19;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "PowerAssertionHistory push time:%.2f source:%s event:%s %@ ID:%08X", buf, 0x30u);
  }
  return sub_10003AFB4((uint64_t)v21);
}

void sub_1004BBB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1004BBB7C(uint64_t a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  v27[0] = 0;
  v27[1] = 0;
  __int16 v26 = (uint64_t *)v27;
  if (*(unsigned char *)(a1 + 136))
  {
    uint64_t v3 = *(void *)(a1 + 152);
    if (v3 != a1 + 144)
    {
      double v4 = Current;
      char v5 = 0;
      do
      {
        uint64_t v25 = 0;
        long long v24 = 0u;
        long long v6 = *(_OWORD *)(v3 + 16);
        long long v7 = *(_OWORD *)(v3 + 32);
        uint64_t v25 = *(void *)(v3 + 48);
        *(_OWORD *)uint64_t v23 = v6;
        long long v24 = v7;
        int v8 = DWORD1(v6);
        if (!DWORD1(v6))
        {
          sub_1004BC194(&v26, (unsigned int *)&v25, &v25, (uint64_t)v23);
          int v8 = HIDWORD(v23[0]);
        }
        if (v8 == 1)
        {
          long long v9 = v27[0];
          if (v27[0])
          {
            uint64_t v10 = (double *)v27;
            do
            {
              int v11 = (double *)v9;
              uint64_t v12 = v10;
              unsigned int v13 = *((_DWORD *)v9 + 8);
              if (v13 >= v25) {
                uint64_t v10 = (double *)v9;
              }
              else {
                ++v9;
              }
              long long v9 = (void *)*v9;
            }
            while (v9);
            if (v10 != (double *)v27)
            {
              if (v13 < v25) {
                int v11 = v12;
              }
              if (v25 >= *((_DWORD *)v11 + 8))
              {
                BOOL v14 = v10[7] - *(double *)&v24 > 5400.0;
                sub_1004BC268((uint64_t)&v26, (unsigned int *)&v25);
                v5 |= v14;
              }
            }
          }
        }
        uint64_t v3 = *(void *)(v3 + 8);
      }
      while (v3 != a1 + 144);
      uint64_t v15 = v26;
      if (v26 != (uint64_t *)v27)
      {
        do
        {
          BOOL v16 = v4 - *((double *)v15 + 7) > 5400.0;
          int v17 = (uint64_t *)v15[1];
          if (v17)
          {
            do
            {
              CFStringRef v18 = v17;
              int v17 = (uint64_t *)*v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              CFStringRef v18 = (uint64_t *)v15[2];
              BOOL v19 = *v18 == (void)v15;
              uint64_t v15 = v18;
            }
            while (!v19);
          }
          v5 |= v16;
          uint64_t v15 = v18;
        }
        while (v18 != (uint64_t *)v27);
      }
      if (v5)
      {
        if (qword_1009FB088 != -1) {
          dispatch_once(&qword_1009FB088, &stru_1009B0C58);
        }
        uint64_t v20 = qword_1009FB080;
        sub_10004191C(v23, "Assertion");
        sub_10004191C(__p, "MAX_ASSERTION_TIME_SECONDS");
        sub_1004B7DA8(0.0, v20, (uint64_t *)v23, (uint64_t *)__p);
        if (v22 < 0) {
          operator delete(__p[0]);
        }
        if (SBYTE7(v24) < 0) {
          operator delete(v23[0]);
        }
        *(CFAbsoluteTime *)(a1 + 128) = CFAbsoluteTimeGetCurrent();
      }
    }
  }
  sub_1000486F0((uint64_t)&v26, v27[0]);
}

void sub_1004BBDC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,void *a25)
{
}

void *sub_1004BBE14(void *a1)
{
  *a1 = off_1009B0BA8;
  a1[1] = &off_1009B0BE8;
  sub_1002B308C(a1 + 18);
  id v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  sub_100052DA4(a1 + 2);
  return a1;
}

void sub_1004BBE94(void *a1)
{
  *a1 = off_1009B0BA8;
  a1[1] = &off_1009B0BE8;
  sub_1002B308C(a1 + 18);
  id v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  sub_100052DA4(a1 + 2);

  operator delete();
}

void sub_1004BBF34(id a1)
{
}

void sub_1004BBF78()
{
}

void sub_1004BBF9C(id a1)
{
}

void sub_1004BBFE0(id a1)
{
}

void sub_1004BC170()
{
}

uint64_t **sub_1004BC194(uint64_t **a1, unsigned int *a2, _DWORD *a3, uint64_t a4)
{
  int v8 = a1 + 1;
  long long v7 = a1[1];
  if (v7)
  {
    unsigned int v9 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v10 = (uint64_t **)v7;
        unsigned int v11 = *((_DWORD *)v7 + 8);
        if (v9 >= v11) {
          break;
        }
        long long v7 = *v10;
        int v8 = v10;
        if (!*v10) {
          goto LABEL_10;
        }
      }
      if (v11 >= v9) {
        break;
      }
      long long v7 = v10[1];
      if (!v7)
      {
        int v8 = v10 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v10 = a1 + 1;
LABEL_10:
    uint64_t v12 = (char *)operator new(0x50uLL);
    *((_DWORD *)v12 + 8) = *a3;
    long long v13 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)(v12 + 40) = *(_OWORD *)a4;
    *(_OWORD *)(v12 + 56) = v13;
    *((void *)v12 + 9) = *(void *)(a4 + 32);
    sub_100036CA0(a1, (uint64_t)v10, v8, (uint64_t *)v12);
    return (uint64_t **)v12;
  }
  return v10;
}

uint64_t sub_1004BC268(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unsigned int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    unsigned int v5 = *(_DWORD *)(v2 + 32);
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      long long v7 = (uint64_t *)v2;
    }
    else {
      long long v7 = (uint64_t *)(v2 + 8);
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32)) {
    return 0;
  }
  sub_10004D3B8((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

uint64_t sub_1004BC2E4(uint64_t a1, int a2, uint64_t a3)
{
  *(_DWORD *)a1 = a2;
  uint64_t v4 = *(void *)(a3 + 8);
  *(void *)(a1 + 8) = &off_100998428;
  *(void *)(a1 + 16) = v4;
  if (v4) {
    sub_100037354(v4);
  }
  *(void *)(a1 + 24) = 0;
  return a1;
}

size_t sub_1004BC33C(uint64_t a1, void *a2, size_t __n)
{
  size_t result = sub_1000522C0(a1 + 8, a2, *(void *)(a1 + 24), __n);
  *(void *)(a1 + 24) += result;
  return result;
}

uint64_t sub_1004BC378(uint64_t a1)
{
  unsigned __int8 __dst = 0;
  *(void *)(a1 + 24) += sub_1000522C0(a1 + 8, &__dst, *(void *)(a1 + 24), 1uLL);
  return __dst;
}

uint64_t sub_1004BC3C8(uint64_t a1)
{
  unsigned __int16 __dst = 0;
  *(void *)(a1 + 24) += sub_1000522C0(a1 + 8, &__dst, *(void *)(a1 + 24), 2uLL);
  unsigned int v2 = bswap32(__dst) >> 16;
  if (*(_DWORD *)a1 == 1) {
    return (unsigned __int16)v2;
  }
  else {
    return __dst;
  }
}

uint64_t sub_1004BC430(uint64_t a1)
{
  unsigned int __dst = 0;
  *(void *)(a1 + 24) += sub_1000522C0(a1 + 8, &__dst, *(void *)(a1 + 24), 4uLL);
  unsigned int v2 = bswap32(__dst);
  if (*(_DWORD *)a1 == 1) {
    return v2;
  }
  else {
    return __dst;
  }
}

unint64_t sub_1004BC490(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a1 + 24) + a2;
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = a1 + 8;
  unint64_t result = sub_100045F00(a1 + 8);
  if (v3 > result)
  {
    unint64_t result = sub_100045F00(v4);
    *(void *)(a1 + 24) = result;
  }
  return result;
}

char *sub_1004BC4E4(uint64_t a1, char *__src, int64_t a3)
{
  return sub_1000119B0(a1 + 8, *(char **)(a1 + 16), __src, &__src[a3], a3);
}

char *sub_1004BC500(uint64_t a1, unsigned int a2)
{
  unsigned int __src = a2;
  if (*(_DWORD *)a1 == 1) {
    unsigned int __src = bswap32(a2);
  }
  return sub_1000119B0(a1 + 8, *(char **)(a1 + 16), (char *)&__src, (char *)&vars0, 4);
}

char *sub_1004BC554(uint64_t a1, unint64_t a2)
{
  unint64_t __src = a2;
  if (*(_DWORD *)a1 == 1) {
    unint64_t __src = bswap64(a2);
  }
  return sub_1000119B0(a1 + 8, *(char **)(a1 + 16), (char *)&__src, (char *)&vars0, 8);
}

uint64_t sub_1004BC5A8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    v6[0] = 0;
    v6[1] = 0;
    sub_10003AED0((uint64_t)v6, a1 + 16);
    if (*(_DWORD *)(a1 + 80))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_10076F808(a1);
      }
      goto LABEL_5;
    }
    *(_DWORD *)(a1 + 80) = 3;
    *(void *)(a1 + 8) = a2;
    sub_10003AFE8((uint64_t)v6);
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    if (v4)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_10076F794();
      }
    }
    else
    {
      uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
      if (!v4)
      {
        sub_10003AF00((uint64_t)v6);
        *(_DWORD *)(a1 + 80) = 1;
        sub_10003AFE8((uint64_t)v6);
LABEL_5:
        uint64_t v4 = 0;
LABEL_17:
        sub_10003AFB4((uint64_t)v6);
        return v4;
      }
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_10076F720();
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 64))(a1);
    }
    *(_DWORD *)(a1 + 80) = 0;
    goto LABEL_17;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
    sub_10076F6AC(a1);
  }
  return 1;
}

void sub_1004BC788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

const char *sub_1004BC79C(unsigned int a1)
{
  if (a1 > 0x19) {
    return "Unknown";
  }
  else {
    return off_1009B0E80[a1];
  }
}

uint64_t sub_1004BC7C0(uint64_t a1, int a2)
{
  v27[0] = 0;
  v27[1] = 0;
  sub_10003AED0((uint64_t)v27, a1 + 16);
  if (*(_DWORD *)(a1 + 80) == 2)
  {
    sub_10003AFE8((uint64_t)v27);
    v26[0] = 0;
    v26[1] = 0;
    sub_10003AED0((uint64_t)v26, a1 + 88);
    uint64_t v4 = *(char **)(a1 + 152);
    unsigned int v5 = *(char **)(a1 + 160);
    if (v4 == v5 && *(void *)(a1 + 176) == *(void *)(a1 + 184) && *(void *)(a1 + 200) == *(void *)(a1 + 208))
    {
      sub_10003AFE8((uint64_t)v26);
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1))
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
          sub_10076F8F0();
        }
        uint64_t v17 = sub_100017768();
        CFStringRef v18 = (char *)sub_1004BC79C(*(_DWORD *)(a1 + 248));
        sub_10004191C(v22, v18);
        sub_1005C8AF4(v17, 9504, (uint64_t)v22, 1);
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 64))(a1))
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
          sub_10076F87C();
        }
        uint64_t v19 = sub_100017768();
        uint64_t v20 = (char *)sub_1004BC79C(*(_DWORD *)(a1 + 248));
        sub_10004191C(v21, v20);
        sub_1005C8AF4(v19, 9505, (uint64_t)v21, 1);
      }
      sub_10003AF00((uint64_t)v27);
      *(_DWORD *)(a1 + 80) = 0;
      sub_10003AFE8((uint64_t)v27);
      if (a2) {
        sub_1004CA17C(*(void *)(a1 + 8));
      }
    }
    else
    {
      BOOL v6 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        long long v7 = sub_1004BC79C(*(_DWORD *)(a1 + 248));
        uint64_t v8 = (uint64_t)(*(void *)(a1 + 184) - *(void *)(a1 + 176)) >> 3;
        uint64_t v9 = (uint64_t)(*(void *)(a1 + 208) - *(void *)(a1 + 200)) >> 3;
        *(_DWORD *)long long buf = 136446978;
        *(void *)&uint8_t buf[4] = v7;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = (v5 - v4) >> 3;
        *(_WORD *)&unsigned char buf[22] = 2048;
        uint64_t v31 = v8;
        __int16 v32 = 2048;
        uint64_t v33 = v9;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Can't stop \"%{public}s\" profile - there are still devices attached: connecting %lu connected %lu disconnecting %lu", buf, 0x2Au);
        uint64_t v4 = *(char **)(a1 + 152);
        unsigned int v5 = *(char **)(a1 + 160);
      }
      memset(buf, 0, sizeof(buf));
      sub_1004BE988((uint64_t)buf, 0, v4, v5, (v5 - v4) >> 3);
      sub_1004BE988((uint64_t)buf, *(uint64_t *)&buf[8], *(char **)(a1 + 176), *(char **)(a1 + 184), (uint64_t)(*(void *)(a1 + 184) - *(void *)(a1 + 176)) >> 3);
      sub_1004BE988((uint64_t)buf, *(uint64_t *)&buf[8], *(char **)(a1 + 200), *(char **)(a1 + 208), (uint64_t)(*(void *)(a1 + 208) - *(void *)(a1 + 200)) >> 3);
      uint64_t v10 = *(uint64_t **)buf;
      for (uint64_t i = *(uint64_t **)&buf[8]; v10 != i; ++v10)
      {
        uint64_t v12 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
        {
          sub_100474E18(*v10, __p);
          long long v13 = v25 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)__int16 v28 = 136446210;
          CFStringRef v29 = v13;
          _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Still attached device: %{public}s", v28, 0xCu);
          if (v25 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      if ((a2 & 1) == 0)
      {
        if (qword_1009F8748 != -1) {
          dispatch_once(&qword_1009F8748, &stru_1009B0E40);
        }
        if (sub_100028CB4((uint64_t)off_1009F8740) == 1)
        {
          uint64_t v15 = sub_100017768();
          BOOL v16 = (char *)sub_1004BC79C(*(_DWORD *)(a1 + 248));
          sub_10004191C(v23, v16);
          sub_1005C8AF4(v15, 9503, (uint64_t)v23, 1);
        }
      }
      if (*(void *)buf)
      {
        *(void *)&uint8_t buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
      }
    }
    sub_10003AFB4((uint64_t)v26);
  }
  return sub_10003AFB4((uint64_t)v27);
}

void sub_1004BCC08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a32);
  sub_10003AFB4((uint64_t)&a34);
  _Unwind_Resume(a1);
}

uint64_t sub_1004BCCA0(uint64_t a1)
{
  __int16 v32 = 0;
  unsigned int __dst = 0;
  uint64_t v34 = 0;
  CFStringRef v29 = 0;
  __int16 v30 = 0;
  uint64_t v31 = 0;
  v28[0] = 0;
  v28[1] = 0;
  sub_10003AED0((uint64_t)v28, a1 + 16);
  if (*(_DWORD *)(a1 + 80) == 1)
  {
    *(_DWORD *)(a1 + 80) = 2;
    sub_10003AFE8((uint64_t)v28);
    v27[0] = 0;
    v27[1] = 0;
    sub_10003AED0((uint64_t)v27, a1 + 88);
    sub_1004BE988((uint64_t)&v32, (uint64_t)__dst, *(char **)(a1 + 152), *(char **)(a1 + 160), (uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 3);
    sub_1004BE988((uint64_t)&v32, (uint64_t)__dst, *(char **)(a1 + 176), *(char **)(a1 + 184), (uint64_t)(*(void *)(a1 + 184) - *(void *)(a1 + 176)) >> 3);
    if (&v29 != (void **)(a1 + 176)) {
      sub_1002B5F74((char *)&v29, *(char **)(a1 + 176), *(void *)(a1 + 184), (uint64_t)(*(void *)(a1 + 184) - *(void *)(a1 + 176)) >> 3);
    }
    sub_10003AFE8((uint64_t)v27);
    unsigned int v2 = (uint64_t *)v32;
    unint64_t v3 = (uint64_t *)__dst;
    if (v32 == __dst) {
      goto LABEL_41;
    }
    do
    {
      uint64_t v4 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v5 = *(_DWORD *)(a1 + 248);
        sub_100474E18(*v2, __p);
        BOOL v6 = sub_1004BC79C(v5);
        long long v7 = v26 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)long long buf = 136446466;
        CFStringRef v36 = (void *)v6;
        __int16 v37 = 2082;
        int v38 = v7;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "\"%{public}s\" profile waiting for device %{public}s to disconnect", buf, 0x16u);
        if (v26 < 0) {
          operator delete(__p[0]);
        }
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v9 = (uint64_t *)v29;
    uint64_t v8 = v30;
    if (v29 != v30)
    {
      do
      {
        uint64_t v10 = *v9;
        unsigned int v11 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v12 = *(_DWORD *)(a1 + 248);
          sub_100474E18(v10, __p);
          long long v13 = sub_1004BC79C(v12);
          BOOL v14 = v26 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)long long buf = 136446466;
          CFStringRef v36 = (void *)v13;
          __int16 v37 = 2082;
          int v38 = v14;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "\"%{public}s\" profile is disconnecting device %{public}s", buf, 0x16u);
          if (v26 < 0) {
            operator delete(__p[0]);
          }
        }
        if (sub_1004BD184(a1, v10))
        {
          uint64_t v15 = qword_100A19E50;
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
          {
            unsigned int v18 = *(_DWORD *)(a1 + 248);
            sub_100474E18(v10, __p);
            uint64_t v19 = sub_1004BC79C(v18);
            uint64_t v20 = v26 >= 0 ? __p : (void **)__p[0];
            *(_DWORD *)long long buf = 136446466;
            CFStringRef v36 = (void *)v19;
            __int16 v37 = 2082;
            int v38 = v20;
            _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "\"%{public}s\" profile failed to disconnect device %{public}s, forcing disconnection", buf, 0x16u);
            if (v26 < 0) {
              operator delete(__p[0]);
            }
          }
          char v24 = 0;
          sub_10001B8E0(&v24);
          int v16 = sub_10017C380(v10 + 128);
          sub_10001B910(&v24);
          if (v16)
          {
            uint64_t v17 = qword_100A19E50;
            if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
            {
              sub_100474E18(v10, __p);
              id v21 = v26 >= 0 ? __p : (void **)__p[0];
              *(_DWORD *)long long buf = 136446466;
              CFStringRef v36 = v21;
              __int16 v37 = 1024;
              LODWORD(v38) = v16;
              _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Force disconnect for device %{public}s failed with reason %{bluetooth:OI_STATUS}u", buf, 0x12u);
              if (v26 < 0) {
                operator delete(__p[0]);
              }
            }
          }
          sub_1004A83C4((char **)&v32, v10);
          sub_10001B8AC(&v24);
        }
        ++v9;
      }
      while (v9 != v8);
    }
    if (v32 == __dst)
    {
LABEL_41:
      sub_1004BC7C0(a1, 0);
      uint64_t v22 = 0;
    }
    else
    {
      uint64_t v22 = 113;
    }
    sub_10003AFB4((uint64_t)v27);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076F964(a1);
    }
    uint64_t v22 = 0;
  }
  sub_10003AFB4((uint64_t)v28);
  if (v29)
  {
    __int16 v30 = (uint64_t *)v29;
    operator delete(v29);
  }
  if (v32)
  {
    unsigned int __dst = v32;
    operator delete(v32);
  }
  return v22;
}

void sub_1004BD0FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
}

uint64_t sub_1004BD184(uint64_t a1, uint64_t a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1 + 88);
  if (!sub_1004A8390(a1 + 176, a2))
  {
LABEL_5:
    uint64_t v4 = 306;
    goto LABEL_6;
  }
  if (!sub_1004A8390(a1 + 200, a2))
  {
    sub_10003AFE8((uint64_t)v6);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2)) {
      sub_1004BD858(a1, a2);
    }
    goto LABEL_5;
  }
  uint64_t v4 = 0;
LABEL_6:
  sub_10003AFB4((uint64_t)v6);
  return v4;
}

void sub_1004BD248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004BD260(uint64_t a1, uint64_t a2)
{
  v13[0] = 0;
  v13[1] = 0;
  sub_10003AED0((uint64_t)v13, a1 + 16);
  if (*(_DWORD *)(a1 + 80) == 1)
  {
    sub_10003AFE8((uint64_t)v13);
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    sub_10003AED0((uint64_t)buf, a1 + 88);
    if (!sub_1004A8390(a1 + 152, a2))
    {
      if (sub_1004A8390(a1 + 176, a2)) {
        operator new();
      }
      sub_10003AFE8((uint64_t)buf);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 72))(a1, a2);
      sub_1004BD554((void *)a1, a2);
    }
    uint64_t v4 = 0;
    sub_10003AFB4((uint64_t)buf);
  }
  else
  {
    unsigned int v5 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
    {
      sub_100474E18(a2, __p);
      if (v12 >= 0) {
        long long v7 = __p;
      }
      else {
        long long v7 = (void **)__p[0];
      }
      uint64_t v8 = sub_1004BC79C(*(_DWORD *)(a1 + 248));
      uint64_t v9 = "starting";
      int v10 = *(_DWORD *)(a1 + 80);
      if (v10 == 2) {
        uint64_t v9 = "stopping";
      }
      *(_DWORD *)long long buf = 136446722;
      *(void *)&uint8_t buf[4] = v7;
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v8;
      if (!v10) {
        uint64_t v9 = "stopped";
      }
      __int16 v15 = 2082;
      int v16 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Can't connect to device %{public}s as \"%{public}s\" profile state is %{public}s, not started", buf, 0x20u);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v4 = 105;
  }
  sub_10003AFB4((uint64_t)v13);
  return v4;
}

void sub_1004BD51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_10003AFB4((uint64_t)va1);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004BD554(void *a1, uint64_t a2)
{
  v18[0] = 0;
  v18[1] = 0;
  sub_10003AED0((uint64_t)v18, (uint64_t)(a1 + 11));
  unint64_t v4 = a1[21];
  unsigned int v5 = (void *)a1[20];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = a1[19];
    uint64_t v8 = ((uint64_t)v5 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61) {
      abort();
    }
    uint64_t v9 = v4 - v7;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11) {
      char v12 = (char *)sub_1000405F8((uint64_t)(a1 + 21), v11);
    }
    else {
      char v12 = 0;
    }
    long long v13 = &v12[8 * v8];
    BOOL v14 = &v12[8 * v11];
    *(void *)long long v13 = a2;
    uint64_t v6 = v13 + 8;
    int v16 = (char *)a1[19];
    __int16 v15 = (char *)a1[20];
    if (v15 != v16)
    {
      do
      {
        uint64_t v17 = *((void *)v15 - 1);
        v15 -= 8;
        *((void *)v13 - 1) = v17;
        v13 -= 8;
      }
      while (v15 != v16);
      __int16 v15 = (char *)a1[19];
    }
    a1[19] = v13;
    a1[20] = v6;
    a1[21] = v14;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *unsigned int v5 = a2;
    uint64_t v6 = v5 + 1;
  }
  a1[20] = v6;
  operator new();
}

void sub_1004BD6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1004BD6C8(uint64_t a1, uint64_t a2, int a3)
{
  v20[1] = 0;
  uint64_t v21 = a2;
  v20[0] = 0;
  sub_10003AED0((uint64_t)v20, a1 + 88);
  sub_1004A83C4((char **)(a1 + 152), a2);
  if (a3)
  {
    sub_1000517A4(a1 + 224, (unint64_t *)&v21);
  }
  else
  {
    unint64_t v6 = *(void *)(a1 + 192);
    uint64_t v7 = *(uint64_t **)(a1 + 184);
    if ((unint64_t)v7 >= v6)
    {
      uint64_t v9 = *(void *)(a1 + 176);
      uint64_t v10 = ((uint64_t)v7 - v9) >> 3;
      if ((unint64_t)(v10 + 1) >> 61) {
        abort();
      }
      uint64_t v11 = v6 - v9;
      uint64_t v12 = v11 >> 2;
      if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
        uint64_t v12 = v10 + 1;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13) {
        BOOL v14 = (char *)sub_1000405F8(a1 + 192, v13);
      }
      else {
        BOOL v14 = 0;
      }
      __int16 v15 = (uint64_t *)&v14[8 * v10];
      int v16 = &v14[8 * v13];
      uint64_t *v15 = a2;
      uint64_t v8 = v15 + 1;
      unsigned int v18 = *(char **)(a1 + 176);
      uint64_t v17 = *(char **)(a1 + 184);
      if (v17 != v18)
      {
        do
        {
          uint64_t v19 = *((void *)v17 - 1);
          v17 -= 8;
          *--__int16 v15 = v19;
        }
        while (v17 != v18);
        uint64_t v17 = *(char **)(a1 + 176);
      }
      *(void *)(a1 + 176) = v15;
      *(void *)(a1 + 184) = v8;
      *(void *)(a1 + 192) = v16;
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      uint64_t *v7 = a2;
      uint64_t v8 = v7 + 1;
    }
    *(void *)(a1 + 184) = v8;
  }
  operator new();
}

void sub_1004BD844(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004BD858(uint64_t a1, uint64_t a2)
{
  v22[0] = 0;
  v22[1] = 0;
  sub_10003AED0((uint64_t)v22, a1 + 88);
  unint64_t v4 = *(void *)(a1 + 216);
  unsigned int v5 = *(uint64_t **)(a1 + 208);
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = *(void *)(a1 + 200);
    uint64_t v8 = ((uint64_t)v5 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61) {
      abort();
    }
    uint64_t v9 = v4 - v7;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11) {
      uint64_t v12 = (char *)sub_1000405F8(a1 + 216, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    unint64_t v13 = (uint64_t *)&v12[8 * v8];
    BOOL v14 = &v12[8 * v11];
    *unint64_t v13 = a2;
    unint64_t v6 = v13 + 1;
    int v16 = *(char **)(a1 + 200);
    __int16 v15 = *(char **)(a1 + 208);
    if (v15 != v16)
    {
      do
      {
        uint64_t v17 = *((void *)v15 - 1);
        v15 -= 8;
        *--unint64_t v13 = v17;
      }
      while (v15 != v16);
      __int16 v15 = *(char **)(a1 + 200);
    }
    *(void *)(a1 + 200) = v13;
    *(void *)(a1 + 208) = v6;
    *(void *)(a1 + 216) = v14;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *unsigned int v5 = a2;
    unint64_t v6 = v5 + 1;
  }
  *(void *)(a1 + 208) = v6;
  if (*(_DWORD *)(a1 + 248) == 24)
  {
    unsigned int v18 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a2, __p);
      if (v21 >= 0) {
        uint64_t v19 = __p;
      }
      else {
        uint64_t v19 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136446210;
      char v24 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "AACPClient reportDisconnectionAttempt for %{public}s", buf, 0xCu);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  operator new();
}

void sub_1004BDA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004BDA98(void *a1)
{
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, (uint64_t)(a1 + 11));
  unsigned int v2 = (uint64_t *)a1[22];
  unint64_t v3 = (uint64_t *)a1[23];
  if (v2 == v3)
  {
    char v4 = 0;
  }
  else
  {
    char v4 = 0;
    do
    {
      uint64_t v5 = *v2;
      if (!sub_1004A8390((uint64_t)(a1 + 25), *v2))
      {
        if (!(*(unsigned int (**)(void *, uint64_t))(*a1 + 80))(a1, v5)) {
          sub_1004BD858((uint64_t)a1, v5);
        }
        char v4 = 1;
      }
      ++v2;
    }
    while (v2 != v3);
  }
  sub_10003AFB4((uint64_t)v7);
  return v4 & 1;
}

void sub_1004BDB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_1004BDB84(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1 + 88);
  BOOL v2 = *(void *)(a1 + 176) != *(void *)(a1 + 184);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

BOOL sub_1004BDBD4(uint64_t a1, uint64_t a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1 + 88);
  BOOL v4 = sub_1004A8390(a1 + 176, a2);
  sub_10003AFB4((uint64_t)v6);
  return v4;
}

void sub_1004BDC2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004BDC40(uint64_t a1)
{
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 88);
  BOOL v2 = *(uint64_t **)(a1 + 176);
  unint64_t v3 = *(uint64_t **)(a1 + 184);
  if (v2 == v3)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    int v5 = 0;
    do
    {
      uint64_t v6 = *v2;
      if (!v5 || v5 > (int)sub_10048B99C(*v2))
      {
        int v5 = sub_10048B99C(v6);
        uint64_t v4 = v6;
      }
      ++v2;
    }
    while (v2 != v3);
  }
  sub_10003AFB4((uint64_t)v8);
  return v4;
}

void sub_1004BDCE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004BDCF8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 88);
  sub_100040550(a2, a1 + 176);
  return sub_10003AFB4((uint64_t)v5);
}

void sub_1004BDD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004BDD5C(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1 + 88);
  uint64_t v2 = (uint64_t)(*(void *)(a1 + 184) - *(void *)(a1 + 176)) >> 3;
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_1004BDDAC(uint64_t a1, uint64_t a2)
{
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, a1 + 16);
  if (!a2 || *(_DWORD *)(a1 + 80) != 1)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076F9D8();
    }
    goto LABEL_10;
  }
  sub_10003AFE8((uint64_t)v12);
  if (qword_1009F8748 != -1) {
    dispatch_once(&qword_1009F8748, &stru_1009B0E40);
  }
  if (sub_100028CB4((uint64_t)off_1009F8740) != 1)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076FAF4(a1);
    }
LABEL_10:
    uint64_t v6 = 0;
    goto LABEL_11;
  }
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, a1 + 88);
  uint64_t v5 = *(void *)(a1 + 176);
  uint64_t v4 = *(void *)(a1 + 184);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) <= (unint64_t)((v4 - v5) >> 3))
  {
    uint64_t v8 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
    {
      unsigned int v9 = *(_DWORD *)(a1 + 248);
      int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      sub_10076FA80(v9, (uint64_t)v13, v10, v8);
    }
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 8) + 128))(*(void *)(a1 + 8), a2, *(unsigned int *)(a1 + 248));
  }
  sub_10003AFB4((uint64_t)v11);
LABEL_11:
  sub_10003AFB4((uint64_t)v12);
  return v6;
}

void sub_1004BDFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_1004BE000(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 136))();
}

uint64_t sub_1004BE028(uint64_t a1, unint64_t a2, __int16 a3)
{
  v22[1] = 0;
  unint64_t v23 = a2;
  v22[0] = 0;
  sub_10003AED0((uint64_t)v22, a1 + 88);
  uint64_t v8 = *(void **)(a1 + 232);
  uint64_t v7 = (void *)(a1 + 232);
  uint64_t v6 = v8;
  if (v8)
  {
    unsigned int v9 = v7;
    do
    {
      unint64_t v10 = v6[4];
      BOOL v11 = v10 >= a2;
      if (v10 >= a2) {
        uint64_t v12 = v6;
      }
      else {
        uint64_t v12 = v6 + 1;
      }
      if (v11) {
        unsigned int v9 = v6;
      }
      uint64_t v6 = (void *)*v12;
    }
    while (*v12);
    if (v9 != v7 && v9[4] <= a2)
    {
      unint64_t v13 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
        sub_10076FB68(v13, v14, v15, v16, v17, v18, v19, v20);
      }
    }
  }
  char v24 = &v23;
  *((_WORD *)sub_1004BEBFC((uint64_t **)v7 - 1, &v23, (uint64_t)&unk_1007BE9D0, &v24) + 20) = a3;
  return sub_10003AFB4((uint64_t)v22);
}

void sub_1004BE10C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004BE120(void *a1, unint64_t a2)
{
  v19[0] = 0;
  v19[1] = 0;
  sub_10003AED0((uint64_t)v19, (uint64_t)(a1 + 11));
  if (a2)
  {
    uint64_t v4 = (void *)a1[29];
    if (!v4) {
      goto LABEL_20;
    }
    uint64_t v5 = a1 + 29;
    do
    {
      unint64_t v6 = v4[4];
      BOOL v7 = v6 >= a2;
      if (v6 >= a2) {
        uint64_t v8 = v4;
      }
      else {
        uint64_t v8 = v4 + 1;
      }
      if (v7) {
        uint64_t v5 = v4;
      }
      uint64_t v4 = (void *)*v8;
    }
    while (*v8);
    if (v5 == a1 + 29 || v5[4] > a2) {
      goto LABEL_20;
    }
  }
  else
  {
    if ((*(unsigned int (**)(void *))(*a1 + 16))(a1) >= 2)
    {
      unsigned int v9 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
        sub_10076FBE0(v9, v10, v11, v12, v13, v14, v15, v16);
      }
    }
    uint64_t v5 = (void *)a1[28];
  }
  if (v5 == a1 + 29)
  {
LABEL_20:
    uint64_t v17 = 0;
    goto LABEL_21;
  }
  uint64_t v17 = *((unsigned __int16 *)v5 + 20);
LABEL_21:
  sub_10003AFB4((uint64_t)v19);
  return v17;
}

void sub_1004BE224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004BE238(void *a1, int a2)
{
  v18[0] = 0;
  v18[1] = 0;
  sub_10003AED0((uint64_t)v18, (uint64_t)(a1 + 11));
  if (a2)
  {
    uint64_t v4 = (void *)a1[28];
    if (v4 != a1 + 29)
    {
      while (*((unsigned __int16 *)v4 + 20) != a2)
      {
        uint64_t v5 = (void *)v4[1];
        if (v5)
        {
          do
          {
            unint64_t v6 = v5;
            uint64_t v5 = (void *)*v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            unint64_t v6 = (void *)v4[2];
            BOOL v7 = *v6 == (void)v4;
            uint64_t v4 = v6;
          }
          while (!v7);
        }
        uint64_t v4 = v6;
        if (v6 == a1 + 29) {
          goto LABEL_16;
        }
      }
      goto LABEL_15;
    }
LABEL_16:
    uint64_t v16 = 0;
    goto LABEL_17;
  }
  if ((*(unsigned int (**)(void *))(*a1 + 16))(a1) >= 2)
  {
    uint64_t v8 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
      sub_10076FBE0(v8, v9, v10, v11, v12, v13, v14, v15);
    }
  }
  uint64_t v4 = (void *)a1[28];
  if (v4 == a1 + 29) {
    goto LABEL_16;
  }
LABEL_15:
  uint64_t v16 = v4[4];
LABEL_17:
  sub_10003AFB4((uint64_t)v18);
  return v16;
}

void sub_1004BE350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004BE364(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = a3;
  (*(void (**)(void, uint64_t, void, uint64_t))(**(void **)(a1 + 8) + 160))(*(void *)(a1 + 8), a2, *(unsigned int *)(a1 + 248), a3);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 16);
  if (*(_DWORD *)(a1 + 80) == 2)
  {
    sub_10003AFE8((uint64_t)v7);
    if (v3) {
      sub_1004BC7C0(a1, 1);
    }
    else {
      sub_1004BD184(a1, a2);
    }
  }
  return sub_10003AFB4((uint64_t)v7);
}

void sub_1004BE418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004BE42C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(unsigned int *)(a1 + 248);
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B0E60);
  }
  uint64_t v10 = sub_1004E2340((uint64_t)off_1009F8068, a4, 10000);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 168))(v8, a2, v9, a3, v10);
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, a1 + 16);
  if (*(_DWORD *)(a1 + 80) == 2)
  {
    sub_10003AFE8((uint64_t)v12);
    sub_1004BC7C0(a1, 1);
  }
  return sub_10003AFB4((uint64_t)v12);
}

void sub_1004BE524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004BE538(uint64_t a1, uint64_t a2, int a3)
{
  v14[1] = 0;
  uint64_t v15 = a2;
  v14[0] = 0;
  sub_10003AED0((uint64_t)v14, a1 + 88);
  if (*(_DWORD *)(a1 + 248) == 24
    && (unint64_t v6 = qword_100A19E50, os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    && ((sub_100474E18(a2, __p), v13 >= 0) ? (BOOL v7 = __p) : (BOOL v7 = (void **)__p[0]),
        *(_DWORD *)long long buf = 136446210,
        uint64_t v17 = v7,
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "AACPClient reportDisconnectionResult for %{public}s", buf, 0xCu), v13 < 0))
  {
    operator delete(__p[0]);
    if (a3) {
      return sub_10003AFB4((uint64_t)v14);
    }
  }
  else if (a3)
  {
    return sub_10003AFB4((uint64_t)v14);
  }
  BOOL v8 = sub_1004A83C4((char **)(a1 + 152), a2);
  BOOL v9 = sub_1004A83C4((char **)(a1 + 176), a2);
  if (v8 && v9)
  {
    uint64_t v10 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
      sub_10076FC58((unsigned int *)(a1 + 248), v10);
    }
  }
  sub_1004A83C4((char **)(a1 + 200), a2);
  sub_1000517A4(a1 + 224, (unint64_t *)&v15);
  if (v8) {
    operator new();
  }
  if (v9) {
    operator new();
  }
  return sub_10003AFB4((uint64_t)v14);
}

void sub_1004BE78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004BE7AC()
{
}

uint64_t sub_1004BE854(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(**(void **)(a1 + 16) + 144))(*(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned int *)(a1 + 32), *(unsigned __int8 *)(a1 + 36));
}

uint64_t sub_1004BE888(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(**(void **)(a1 + 16) + 152))(*(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned int *)(a1 + 32), *(unsigned __int8 *)(a1 + 36));
}

uint64_t sub_1004BE8BC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void, void))(**(void **)(a1 + 16) + 176))(*(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned int *)(a1 + 32), *(unsigned int *)(a1 + 36), *(unsigned int *)(a1 + 40));
}

void sub_1004BE8F4()
{
}

void sub_1004BE90C()
{
}

void sub_1004BE924()
{
}

void sub_1004BE93C()
{
}

uint64_t sub_1004BE950(uint64_t a1)
{
  return sub_1004BE364(*(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned int *)(a1 + 32));
}

void sub_1004BE964()
{
}

uint64_t sub_1004BE978(uint64_t a1)
{
  return sub_1004BE42C(*(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned int *)(a1 + 32), *(unsigned int *)(a1 + 36));
}

char *sub_1004BE988(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  BOOL v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    char v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 3);
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 3;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 2 > v14) {
      unint64_t v14 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      uint64_t v18 = (char *)sub_1000405F8(v9, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    __int16 v28 = &v18[8 * v15];
    std::string __p = v18;
    uint64_t v34 = v28;
    CFStringRef v36 = &v18[8 * v17];
    uint64_t v29 = 8 * a5;
    __int16 v30 = &v28[8 * a5];
    do
    {
      uint64_t v31 = *(void *)v7;
      v7 += 8;
      *(void *)__int16 v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    __int16 v35 = v30;
    uint64_t v5 = sub_100061614((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    char v21 = &__src[8 * a5];
    unint64_t v23 = *(char **)(v9 - 8);
LABEL_17:
    char v24 = &v5[8 * a5];
    char v25 = &v23[-8 * a5];
    char v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      char v26 = v23;
      do
      {
        uint64_t v27 = *(void *)v25;
        v25 += 8;
        *(void *)char v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  char v21 = &__src[8 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  }
  unint64_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_1004BEB5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004BEB94(id a1)
{
}

void sub_1004BEBD8()
{
}

uint64_t **sub_1004BEBFC(uint64_t **a1, unint64_t *a2, uint64_t a3, void **a4)
{
  BOOL v7 = a1 + 1;
  unint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        unint64_t v6 = *v9;
        BOOL v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      unint64_t v6 = v9[1];
      if (!v6)
      {
        BOOL v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x30uLL);
    uint8_t v11[4] = **a4;
    *((_WORD *)v11 + 20) = 0;
    sub_100036CA0(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_1004BECC0(id a1)
{
}

void sub_1004BED04()
{
}

const char *sub_1004BED28(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 248);
  return sub_1004BC79C(v2);
}

uint64_t sub_1004BED40(uint64_t result)
{
  *(void *)unint64_t result = off_1009B0F60;
  *(unsigned char *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 64) = 0;
  *(void *)(result + 72) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = result + 56;
  return result;
}

void sub_1004BED7C(uint64_t a1)
{
  uint64_t v2 = +[NSMutableDictionary dictionary];
  int v3 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = v2;

  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B1078);
  }
  sub_10026B36C((uint64_t)off_1009F8068 + 64, a1);
  unsigned int v12 = 0;
  uint64_t v4 = sub_100017768();
  sub_10004191C(buf, "ATT");
  sub_10004191C(__p, "ResponseTimeout");
  int v5 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, unsigned int *))(*(void *)v4 + 88))(v4, buf, __p, &v12);
  if (v12) {
    int v6 = v5;
  }
  else {
    int v6 = 0;
  }
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0)
  {
    operator delete(*(void **)buf);
    if (!v6) {
      return;
    }
  }
  else if (!v6)
  {
    return;
  }
  BOOL v7 = qword_100A19E88;
  BOOL v8 = os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT);
  uint64_t v9 = v12;
  if (v8)
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Overriding the ATT Response timeout to %d", buf, 8u);
    uint64_t v9 = v12;
  }
  sub_10022DE30(v9);
}

void sub_1004BEF20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004BEF5C(unsigned __int8 *a1, __int16 a2, uint64_t a3, int a4, int a5)
{
  if (a4 == 1)
  {
    unint64_t v10 = ((unint64_t)a1[48] << 40) | ((unint64_t)a1[49] << 32) | ((unint64_t)a1[50] << 24) | ((unint64_t)a1[51] << 16) | ((unint64_t)a1[52] << 8) | a1[53];
  }
  else
  {
    if (a1[55])
    {
      unint64_t v11 = ((unint64_t)a1[57] << 40) | ((unint64_t)a1[58] << 32) | ((unint64_t)a1[59] << 24) | ((unint64_t)a1[60] << 16) | ((unint64_t)a1[61] << 8) | a1[62];
      uint64_t v12 = a1[56];
    }
    else
    {
      unint64_t v11 = ((unint64_t)a1[49] << 40) | ((unint64_t)a1[50] << 32) | ((unint64_t)a1[51] << 24) | ((unint64_t)a1[52] << 16) | ((unint64_t)a1[53] << 8) | a1[54];
      uint64_t v12 = a1[48];
    }
    unint64_t v10 = v11 | (v12 << 48);
  }
  uint64_t v13 = sub_100019878();
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  void v14[2] = sub_1004C0CC4;
  v14[3] = &unk_1009B1058;
  void v14[4] = a1;
  v14[5] = v10;
  __int16 v17 = a2;
  v14[6] = a3;
  int v15 = a4;
  int v16 = a5;
  sub_100013018(v13, v14);
}

void sub_1004BF0B8(uint64_t a1, int a2)
{
  uint64_t v4 = sub_100019878();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1004C0D5C;
  v5[3] = &unk_100997570;
  v5[4] = a1;
  int v6 = a2;
  sub_100013018(v4, v5);
}

void sub_1004BF13C(__int16 *a1, char a2, __int16 a3, int a4)
{
  __int16 v8 = *a1;
  uint64_t v9 = sub_100019878();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_1004C0DC4;
  uint64_t v10[3] = &unk_1009A0160;
  void v10[4] = a1;
  char v14 = a2;
  __int16 v12 = a3;
  __int16 v13 = v8;
  int v11 = a4;
  sub_100013018(v9, v10);
}

double sub_1004BF1E8(uint64_t a1)
{
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)&double result = sub_10022DDC8((__n128 *)off_1009B0F90).n128_u64[0];
  return result;
}

void sub_1004BF1FC(uint64_t a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B1078);
  }
  uint64_t v2 = (char *)off_1009F8068 + 64;

  sub_100052718((uint64_t)v2, a1);
}

void sub_1004BF264(uint64_t a1)
{
  uint64_t v2 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Gatt::stackWillStop enter", buf, 2u);
  }
  uint64_t v4 = *(void **)(a1 + 56);
  int v3 = (void *)(a1 + 56);
  *((unsigned char *)v3 - 48) = 0;
  sub_1000486F0((uint64_t)(v3 - 1), v4);
  *(v3 - 1) = v3;
  void *v3 = 0;
  v3[1] = 0;
  sub_10022DE1C();
  int v5 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Gatt::stackWillStop exit", v6, 2u);
  }
}

id sub_1004BF330(uint64_t a1)
{
  return [*(id *)(a1 + 72) removeAllObjects];
}

void sub_1004BF338(uint64_t a1, uint64_t a2, unint64_t a3, int a4, uint64_t a5, int a6, int a7)
{
  if (*(unsigned char *)(a1 + 8))
  {
    memset(uu, 0, sizeof(uu));
    uuid_clear(uu);
    if (a6 == 1) {
      sub_1006ACEAC();
    }
    else {
    char v14 = sub_1006AD3F0();
    }
    if (a7)
    {
      int v15 = qword_100A19E88;
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138543618;
        *(void *)int v40 = v14;
        *(_WORD *)&v40[8] = 1024;
        *(_DWORD *)&v40[10] = a7;
        _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Gatt device %{public}@ connected with error %{bluetooth:OI_STATUS}u", buf, 0x12u);
        int v15 = qword_100A19E88;
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT)) {
        sub_10076FCE4(a7, v15);
      }
LABEL_37:

      return;
    }
    int v16 = qword_100A19E88;
    if (!a5 && os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)int v40 = "pAttDBSession";
      _os_log_fault_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", buf, 0xCu);
      int v16 = qword_100A19E88;
      if (a4) {
        goto LABEL_15;
      }
    }
    else if (a4)
    {
      goto LABEL_15;
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)int v40 = "gattHandle != LE_GATT_INVALID_SESSION_HANDLE";
      _os_log_fault_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", buf, 0xCu);
      int v16 = qword_100A19E88;
    }
LABEL_15:
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109890;
      *(_DWORD *)int v40 = a6;
      *(_WORD *)&v40[4] = 2048;
      *(void *)&v40[6] = a2;
      *(_WORD *)&v40[14] = 2114;
      *(void *)&v40[16] = v14;
      __int16 v41 = 1024;
      int v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Gatt device connected on transport %d on handle %p address:%{public}@ with status %{bluetooth:OI_STATUS}u", buf, 0x22u);
    }
    if (a6 == 2)
    {
      if (qword_1009F7EC0 != -1) {
        dispatch_once(&qword_1009F7EC0, &stru_1009B1098);
      }
      if (!sub_10067F618((uint64_t)off_1009F7EB8, a2, uu) || uuid_is_null(uu))
      {
        __int16 v17 = qword_100A19E88;
        if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v18 = sub_1006AD3F0();
          *(_DWORD *)long long buf = 138543362;
          *(void *)int v40 = v18;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Warning: Device %{public}@ wasn't being tracked by le device manager, ignoring connection indication", buf, 0xCu);
        }
        goto LABEL_37;
      }
    }
    else if (a6 == 1)
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009B10B8);
      }
      sub_100014B58((uint64_t)off_1009F7ED8, a3, 1u, 0, 0, 0, buf);
      uuid_copy(uu, buf);
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009B10B8);
      }
      uint64_t v19 = off_1009F7ED8;
      uint64_t v20 = sub_100031234(uu);
      sub_1006C13D4((uint64_t)v19, v20, 1, a3);

      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009B10B8);
      }
      char v21 = off_1009F7ED8;
      int64_t v22 = sub_100031234(uu);
      sub_1006C27E0((uint64_t)v21, v22, 1, 1, 0);
    }
    unint64_t v23 = sub_100031234(uu);
    int v24 = sub_1004BF960(a1, v23, a6);

    if (v24)
    {
      char v25 = qword_100A19E88;
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
      {
        char v26 = sub_100031234(uu);
        *(_DWORD *)long long buf = 138543618;
        *(void *)int v40 = v26;
        *(_WORD *)&v40[8] = 2114;
        *(void *)&v40[10] = v14;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Waiting on disconnection of BR/EDR GATT L2CAP for device %{public}@ %{public}@", buf, 0x16u);
      }
      sub_100031234(uu);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1004BFC64;
      block[3] = &unk_1009B0FB0;
      uint64_t v34 = a1;
      id v27 = (id)objc_claimAutoreleasedReturnValue();
      id v33 = v27;
      uint64_t v35 = a2;
      uint64_t v36 = a5;
      int v37 = a6;
      __int16 v38 = a4;
      dispatch_block_t v28 = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, block);
      uint64_t v29 = *(void **)(a1 + 72);
      id v30 = objc_retainBlock(v28);
      [v29 setObject:v30 forKey:v27];
    }
    else
    {
      uint64_t v31 = sub_100031234(uu);
      sub_1004BFC7C(a1, v31, a2, a6, a4, a5);
    }
    goto LABEL_37;
  }
}

void sub_1004BF8E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1004BF960(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  if (!sub_1004C063C(a1, v5)) {
    goto LABEL_27;
  }
  int v6 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string __p = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "GATT is connected on 2 transports! Serializing disconnection of prev in favor of current.", __p, 2u);
  }
  sub_1000305AC(uu2, v5);
  if (!*(unsigned char *)(a1 + 8)) {
    goto LABEL_27;
  }
  uint64_t v7 = sub_1000308C0(a1 + 48, uu2);
  if (a1 + 56 == v7) {
    goto LABEL_27;
  }
  int v8 = *(_DWORD *)(v7 + 56);
  if (a3 != 2 || v8 != 1)
  {
    char v14 = qword_100A19E88;
    BOOL v15 = os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT);
    if (a3 == 1 && v8 == 2)
    {
      if (v15) {
        sub_10076FD5C((uint64_t)v5, v14);
      }
    }
    else if (v15)
    {
      *(_DWORD *)std::string __p = 138543874;
      *(void *)&__p[4] = v5;
      __int16 v18 = 1024;
      int v19 = v8;
      __int16 v20 = 1024;
      int v21 = a3;
      _os_log_fault_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Gatt device %{public}@ connected twice with previousTransport %d and currentTransport %d", __p, 0x18u);
    }
LABEL_27:
    uint64_t v13 = 0;
    goto LABEL_28;
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009B10B8);
  }
  uint64_t v9 = sub_100030DCC((uint64_t)off_1009F7ED8, v5, 0);
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009B10D8);
  }
  uint64_t v10 = sub_100030F10((uint64_t)off_1009F7EF8, v9, 0);
  int v11 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(v10, __p);
    __int16 v12 = v21 >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)long long buf = 136446466;
    unint64_t v23 = v12;
    __int16 v24 = 2114;
    id v25 = v5;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Disconnecting classic device %{public}s because LE GATT connected for device %{public}@", buf, 0x16u);
    if (SHIBYTE(v21) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (qword_1009F8090 != -1) {
    dispatch_once(&qword_1009F8090, &stru_1009B10F8);
  }
  sub_1004D76C0((uint64_t)off_1009F8088, v10, 0x100000);
  uint64_t v13 = 1;
LABEL_28:

  return v13;
}

void sub_1004BFC3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004BFC64(uint64_t a1)
{
}

void sub_1004BFC7C(uint64_t a1, void *a2, uint64_t a3, int a4, int a5, uint64_t a6)
{
  id v11 = a2;
  char v21 = 0;
  sub_10001B8E0(&v21);
  int v12 = sub_10022B8F4(a3);
  sub_10001B910(&v21);
  if (v12 == a5 && v12)
  {
    sub_1000305AC(buf, v11);
    int64_t v22 = buf;
    uint64_t v13 = sub_1004C124C((uint64_t **)(a1 + 48), buf, (uint64_t)&unk_1007BE9D0, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v22);
    v13[6] = a3;
    *((_DWORD *)v13 + 14) = a4;
    *((_DWORD *)v13 + 15) = 0;
    char v14 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v15 = "CLASSIC";
      *(_DWORD *)long long buf = 138543874;
      id v24 = v11;
      if (a4 == 2) {
        BOOL v15 = "LE";
      }
      __int16 v25 = 2080;
      *(void *)char v26 = v15;
      *(_WORD *)&v26[8] = 2048;
      *(void *)&v26[10] = a3;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Notify gattDeviceConnected %{public}@ transport=%s handle=%p", buf, 0x20u);
    }
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    void v17[2] = sub_1004C073C;
    v17[3] = &unk_1009B1038;
    __int16 v20 = a5;
    id v18 = v11;
    uint64_t v19 = a6;
    sub_1004C0ED4((os_unfair_lock_s *)(a1 + 16), v17);
  }
  else
  {
    int v16 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543874;
      id v24 = v11;
      __int16 v25 = 1024;
      *(_DWORD *)char v26 = a5;
      *(_WORD *)&v26[4] = 2048;
      *(void *)&v26[6] = a6;
      _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Gatt device %{public}@ with gattHandle %d ATT_DB_Session %p is no longer connected, not notifying of connection", buf, 0x1Cu);
    }
  }
  sub_10001B8AC(&v21);
}

void sub_1004BFEC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17)
{
  sub_10001B8AC(&a17);
  _Unwind_Resume(a1);
}

void sub_1004BFF00(uint64_t a1, void *a2, int a3)
{
  if (*(unsigned char *)(a1 + 8))
  {
    int v6 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
    {
      int v24 = 134218240;
      __int16 v25 = a2;
      __int16 v26 = 1024;
      LODWORD(v27) = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Gatt device disconnected on handle %p with status %{bluetooth:OI_STATUS}u", (uint8_t *)&v24, 0x12u);
    }
    uint64_t v7 = *(unsigned __int8 **)(a1 + 48);
    if (v7 == (unsigned __int8 *)(a1 + 56))
    {
LABEL_12:
      id v11 = qword_100A19E88;
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
        sub_10076FDD4(v11);
      }
    }
    else
    {
      while (*((void **)v7 + 6) != a2)
      {
        int v8 = (unsigned __int8 *)*((void *)v7 + 1);
        if (v8)
        {
          do
          {
            uint64_t v9 = v8;
            int v8 = *(unsigned __int8 **)v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            uint64_t v9 = (unsigned __int8 *)*((void *)v7 + 2);
            BOOL v10 = *(void *)v9 == (void)v7;
            uint64_t v7 = v9;
          }
          while (!v10);
        }
        uint64_t v7 = v9;
        if (v9 == (unsigned __int8 *)(a1 + 56)) {
          goto LABEL_12;
        }
      }
      uint64_t v12 = *((void *)v7 + 7);
      memset(dst, 0, sizeof(dst));
      uuid_copy(dst, v7 + 32);
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009B10B8);
      }
      uint64_t v13 = off_1009F7ED8;
      char v14 = sub_100031234(dst);
      sub_1006C1634((uint64_t)v13, v14, 0);

      sub_10004D3B8((uint64_t **)(a1 + 48), (uint64_t *)v7);
      operator delete(v7);
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3321888768;
      void v28[2] = sub_1004C0244;
      v28[3] = &unk_1009B0FD0;
      uuid_copy(v29, dst);
      uint8_t v28[4] = a2;
      v28[5] = v12;
      sub_1004C0ED4((os_unfair_lock_s *)(a1 + 16), v28);
      BOOL v15 = *(void **)(a1 + 72);
      int v16 = sub_100031234(dst);
      __int16 v17 = [v15 objectForKey:v16];

      if (v17)
      {
        id v18 = *(void **)(a1 + 72);
        uint64_t v19 = sub_100031234(dst);
        [v18 removeObjectForKey:v19];

        __int16 v20 = qword_100A19E88;
        if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
        {
          char v21 = sub_100031234(dst);
          id v22 = [*(id *)(a1 + 72) count];
          int v24 = 138543618;
          __int16 v25 = v21;
          __int16 v26 = 2048;
          id v27 = v22;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Found pending connection to be processed for device %{public}@. transitioningGattDevices size: %lu", (uint8_t *)&v24, 0x16u);
        }
        uint64_t v23 = sub_100019878();
        sub_100013018(v23, v17);
      }
    }
  }
}

void sub_1004C0200(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004C0244(uint64_t a1, uint64_t a2)
{
  sub_100031234((const unsigned __int8 *)(a1 + 48));
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t))(*(void *)a2 + 8))(a2);
}

void sub_1004C02C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1004C02D8(uint64_t a1, uint64_t a2)
{
}

void sub_1004C02E8(uint64_t a1, uint64_t a2, unsigned __int8 a3, int a4, __int16 a5, int a6)
{
  memset(uu, 0, sizeof(uu));
  uuid_clear(uu);
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v12 = qword_100A19E88;
    if (a6)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 67109120;
        int v24 = a6;
        _os_log_fault_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Gatt callback connected with error %{bluetooth:OI_STATUS}u", buf, 8u);
        uint64_t v12 = qword_100A19E88;
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        sub_10076FE5C(a6, v12);
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109376;
        int v24 = a4;
        __int16 v25 = 1024;
        int v26 = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Gatt device ready with mtu %d and status %{bluetooth:OI_STATUS}u", buf, 0xEu);
      }
      uint64_t v13 = *(const unsigned __int8 **)(a1 + 48);
      if (v13 == (const unsigned __int8 *)(a1 + 56))
      {
LABEL_17:
        __int16 v17 = qword_100A19E88;
        if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT)) {
          sub_10076FE18(v17);
        }
      }
      else
      {
        while (*((void *)v13 + 6) != a2)
        {
          char v14 = (unsigned __int8 *)*((void *)v13 + 1);
          if (v14)
          {
            do
            {
              BOOL v15 = (const unsigned __int8 **)v14;
              char v14 = *(unsigned __int8 **)v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              BOOL v15 = (const unsigned __int8 **)*((void *)v13 + 2);
              BOOL v16 = *v15 == v13;
              uint64_t v13 = (const unsigned __int8 *)v15;
            }
            while (!v16);
          }
          uint64_t v13 = (const unsigned __int8 *)v15;
          if (v15 == (const unsigned __int8 **)(a1 + 56)) {
            goto LABEL_17;
          }
        }
        uuid_copy(uu, v13 + 32);
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009B10B8);
        }
        id v18 = off_1009F7ED8;
        uint64_t v19 = sub_100031234(uu);
        sub_1006BED18((uint64_t)v18, v19, a5);

        v20[0] = _NSConcreteStackBlock;
        v20[1] = 3321888768;
        void v20[2] = sub_1004C0594;
        v20[3] = &unk_1009B1000;
        uuid_copy(v22, uu);
        v22[16] = a3;
        __int16 v21 = a4;
        sub_1004C0ED4((os_unfair_lock_s *)(a1 + 16), v20);
      }
    }
  }
}

void sub_1004C057C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004C0594(uint64_t a1, uint64_t a2)
{
  sub_100031234((const unsigned __int8 *)(a1 + 34));
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t))(*(void *)a2 + 16))(a2);
}

void sub_1004C0618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1004C062C(uint64_t a1, uint64_t a2)
{
}

BOOL sub_1004C063C(uint64_t a1, void *a2)
{
  id v3 = a2;
  sub_1000305AC(uu2, v3);
  BOOL v4 = a1 + 56 != sub_1000308C0(a1 + 48, uu2);

  return v4;
}

void sub_1004C06C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1004C06DC(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  if (!*(unsigned char *)(a1 + 8)) {
    return 408;
  }
  uint64_t v5 = sub_1000308C0(a1 + 48, a2);
  if (a1 + 56 == v5) {
    return 1;
  }
  uint64_t v6 = v5;
  uint64_t result = 0;
  *a3 = *(_DWORD *)(v6 + 56);
  return result;
}

uint64_t sub_1004C073C(uint64_t a1, uint64_t (***a2)(void, void, void, void))
{
  return (**a2)(a2, *(void *)(a1 + 32), *(unsigned __int16 *)(a1 + 48), *(void *)(a1 + 40));
}

BOOL sub_1004C0770(uint64_t a1, unsigned __int8 *a2)
{
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009B10B8);
  }
  *(void *)uu2 = 0;
  uint64_t v6 = 0;
  sub_100014B58((uint64_t)off_1009F7ED8, ((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133], 0, 1u, 0, 0, uu2);
  return a1 + 56 != sub_1000308C0(a1 + 48, uu2);
}

uint64_t sub_1004C085C(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (qword_1009F7ED0 != -1) {
    dispatch_once(&qword_1009F7ED0, &stru_1009B1118);
  }
  if (sub_100008DC4(qword_1009F7EC8, v2))
  {
    uint64_t v3 = 1;
  }
  else
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B10B8);
    }
    uint64_t v4 = sub_100030DCC((uint64_t)off_1009F7ED8, v2, 0);
    if ((v4 & 0xFFFFFFFFFFFFLL) != 0)
    {
      if (qword_1009F7F00 != -1) {
        dispatch_once(&qword_1009F7F00, &stru_1009B10D8);
      }
      uint64_t v3 = sub_100030F10((uint64_t)off_1009F7EF8, v4, 0);
      if (v3)
      {
        if (qword_1009F8768 != -1) {
          dispatch_once(&qword_1009F8768, &stru_1009B1138);
        }
        uint64_t v3 = sub_100610F9C((uint64_t)off_1009F8760, (unsigned __int8 *)v3);
      }
    }
    else
    {
      uint64_t v3 = 0;
    }
  }

  return v3;
}

void sub_1004C099C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1004C09B4(uint64_t a1)
{
  return *(void *)(a1 + 64) != 0;
}

id sub_1004C09C4(uint64_t a1)
{
  return [*(id *)(a1 + 72) allKeys];
}

void sub_1004C09CC(uint64_t a1, const unsigned __int8 *a2, uint64_t a3, unsigned int a4)
{
  int v8 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = a3 ? "Enabling" : "Disabling";
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(a2, out);
    sub_10004191C(__p, out);
    BOOL v10 = v20 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)uuid_string_t out = 136446722;
    *(void *)&out[4] = v9;
    *(_WORD *)&out[12] = 1024;
    *(_DWORD *)&out[14] = a4;
    *(_WORD *)&out[18] = 2082;
    *(void *)&out[20] = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}s high priority stream for %d ms for device UUID %{public}s", (uint8_t *)out, 0x1Cu);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
  }
  uuid_copy(dst, a2);
  if (!*(unsigned char *)(a1 + 8) || (uint64_t v11 = sub_1000308C0(a1 + 48, dst), a1 + 56 == v11))
  {
    BOOL v16 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
    {
      memset(out, 0, sizeof(out));
      uuid_unparse_upper(a2, out);
      sub_10004191C(__p, out);
      __int16 v17 = v20 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)uuid_string_t out = 136446210;
      *(void *)&out[4] = v17;
      _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Unable to find acl connection handle for %{public}s", (uint8_t *)out, 0xCu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  else
  {
    uint64_t v12 = *(void *)(v11 + 48);
    if (a3)
    {
      if (qword_1009F8158 != -1) {
        dispatch_once(&qword_1009F8158, &stru_1009B1158);
      }
      ++*((void *)off_1009F8150 + 26);
    }
    if (*(_DWORD *)(sub_10003FB34() + 712) < 0x7D0u || *(_DWORD *)(sub_10003FB34() + 712) > 0xF9Fu)
    {
      uint64_t v18 = sub_10003FB34();
      (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v18 + 72))(v18, *(unsigned int *)(v12 + 48) | ((unint64_t)*(unsigned __int16 *)(v12 + 52) << 32), 17, 4, a3, 1, 1, 0);
    }
    else
    {
      uint64_t v13 = sub_10003FB34();
      if (a3) {
        uint64_t v14 = 4;
      }
      else {
        uint64_t v14 = 0;
      }
      if (a3) {
        uint64_t v15 = a4;
      }
      else {
        uint64_t v15 = 0;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v13 + 1664))(v13, v12, v14, v15);
    }
  }
}

void sub_1004C0CC4(uint64_t a1)
{
  if (qword_1009FB240 != -1) {
    dispatch_once(&qword_1009FB240, &stru_1009B1178);
  }
  sub_1004BF338(qword_1009FB238, *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned __int16 *)(a1 + 64), *(void *)(a1 + 48), *(_DWORD *)(a1 + 56), *(_DWORD *)(a1 + 60));
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_1009B1158);
  }
  *((void *)off_1009F8150 + 26) = 0;
}

void sub_1004C0D5C(uint64_t a1)
{
  if (qword_1009FB240 != -1) {
    dispatch_once(&qword_1009FB240, &stru_1009B1178);
  }
  uint64_t v2 = qword_1009FB238;
  uint64_t v3 = *(void **)(a1 + 32);
  int v4 = *(_DWORD *)(a1 + 40);

  sub_1004BFF00(v2, v3, v4);
}

void sub_1004C0DC4(uint64_t a1)
{
  if (qword_1009FB240 != -1) {
    dispatch_once(&qword_1009FB240, &stru_1009B1178);
  }
  uint64_t v2 = qword_1009FB238;
  uint64_t v3 = *(void *)(a1 + 32);
  unsigned __int8 v4 = *(unsigned char *)(a1 + 48);
  int v5 = *(unsigned __int16 *)(a1 + 44);
  __int16 v6 = *(_WORD *)(a1 + 46);
  int v7 = *(_DWORD *)(a1 + 40);

  sub_1004C02E8(v2, v3, v4, v5, v6, v7);
}

void sub_1004C0E38(uint64_t a1, uint64_t a2)
{
}

void sub_1004C0E40(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  int v5 = *(char **)(a1 + 8);
  unsigned __int8 v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        int v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    uint64_t v6 = a2;
    sub_1004C165C(a1 + 8, v4, (char *)&v6);
    sub_100061554(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_1004C0ECC(uint64_t a1, uint64_t a2)
{
}

void sub_1004C0ED4(os_unfair_lock_s *a1, void *a2)
{
  uint64_t v3 = a2;
  os_unfair_lock_lock(a1);
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  unsigned __int8 v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    unsigned __int8 v4 = v5;
  }
  if (v4)
  {
    uint64_t v6 = v4;
    operator delete(v4);
  }
}

void sub_1004C0F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

void sub_1004C0FA8(uint64_t a1)
{
  sub_1004C0FE0(a1);

  operator delete();
}

uint64_t sub_1004C0FE0(uint64_t a1)
{
  *(void *)a1 = off_1009B0F60;

  sub_1000486F0(a1 + 48, *(void **)(a1 + 56));
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1004C1044(id a1)
{
}

void sub_1004C1088()
{
}

void sub_1004C10AC(id a1)
{
}

void sub_1004C10F0()
{
}

void sub_1004C1114(id a1)
{
}

void sub_1004C1158()
{
}

void sub_1004C117C(id a1)
{
}

void sub_1004C11C0()
{
}

void sub_1004C11E4(id a1)
{
}

void sub_1004C1228()
{
}

uint64_t *sub_1004C124C(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t v9 = 0;
  uint64_t v6 = (uint64_t **)sub_10004A0BC((uint64_t)a1, &v9, uu1);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1004C12F0((uint64_t)a1, a4, v8);
    sub_100036CA0(a1, v9, v6, (uint64_t *)v8[0]);
    return (uint64_t *)v8[0];
  }
  return result;
}

void sub_1004C12F0(uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  int v5 = (unsigned __int8 *)(a1 + 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = (unsigned __int8 *)operator new(0x40uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uuid_copy(v6 + 32, *a2);
  *((void *)v6 + 6) = 0;
  *((void *)v6 + 7) = 0;
  *((unsigned char *)a3 + 16) = 1;
}

void sub_1004C1354(_Unwind_Exception *a1)
{
  void *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1004C136C(id a1)
{
}

void sub_1004C13B0()
{
}

void sub_1004C13D4(id a1)
{
}

void sub_1004C1418()
{
}

void sub_1004C143C(id a1)
{
}

void sub_1004C15CC()
{
}

void sub_1004C15F0(id a1)
{
}

char *sub_1004C165C(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  unsigned __int8 v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      uint64_t v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    char v20 = &v19[8 * v16];
    std::string __p = v19;
    id v27 = v20;
    dispatch_block_t v28 = v20;
    uint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        uint64_t v23 = (char *)sub_1000405F8(v8, v22);
        char v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        id v27 = v20;
        uint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        id v27 = v20;
      }
    }
    *(void *)char v20 = *(void *)v3;
    dispatch_block_t v28 = v20 + 8;
    unsigned __int8 v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)unint64_t __src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    uint64_t v9 = __src + 8;
    BOOL v10 = v6 - 8;
    uint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)unsigned __int8 v4 = *(void *)v3;
  }
  return v4;
}

void sub_1004C1864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004C18A0(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1004C18D4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1004C1900(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  sub_100052DA8(a1 + 48);
  *(void *)(a1 + 112) = a2;
  *(_DWORD *)(a1 + 132) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 140) = -1;
  *(void *)(a1 + 148) = 0;
  *(unsigned char *)(a1 + 156) = 2;
  return a1;
}

void sub_1004C1954(_Unwind_Exception *a1)
{
  sub_10042C680(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004C196C(void *a1)
{
  sub_100052DA4(a1 + 6);

  return sub_10042C680(a1);
}

uint64_t sub_1004C19A8()
{
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, (uint64_t)&unk_100A19B28);
  qword_100A19B68 = 0;
  sub_10003AFE8((uint64_t)v7);
  uint64_t v0 = qword_100A132C0;
  if (qword_100A132C0)
  {
    free((void *)qword_100A132C0);
    qword_100A132C0 = 0;
  }
  sub_1004C1BDC(v0, 0);
  uint64_t v1 = sub_100017768();
  sub_10004191C(buf, "SDPMirroring");
  sub_10004191C(__p, "DisableSDPMirroring");
  (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v1 + 72))(v1, buf, __p, &byte_100A132C8);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v2 = qword_100A19EB0;
  if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = byte_100A132C8;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "SDP Mirroring is disabled: %d", buf, 8u);
  }
  buf[0] = 0;
  sub_10001B8E0(buf);
  int v3 = sub_10025095C((uint64_t)&off_1009B1198);
  sub_10024F3CC(byte_100A132C8);
  sub_10001B910(buf);
  if (v3 && os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_ERROR)) {
    sub_10076FED4();
  }
  sub_10001B8AC(buf);
  return sub_10003AFB4((uint64_t)v7);
}

void sub_1004C1B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

uint64_t sub_1004C1BDC(uint64_t a1, char a2)
{
  long long v12 = 0u;
  memset(v11, 0, sizeof(v11));
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, (uint64_t)&unk_100A19B28);
  uint64_t v3 = *((void *)&xmmword_100A19B90 + 1);
  if (*((void *)&xmmword_100A19B90 + 1))
  {
    unsigned __int8 v4 = qword_100A19EB0;
    if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v14 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Clearing the client queue (had %lu queries)", buf, 0xCu);
    }
    sub_1004C6CAC(v11, &qword_100A19B70);
    while (*((void *)&xmmword_100A19B90 + 1))
    {
      *(void *)&xmmword_100A19B90 = xmmword_100A19B90 + 1;
      --*((void *)&xmmword_100A19B90 + 1);
      sub_1002CBC00((uint64_t)&qword_100A19B70, 1);
    }
  }
  if ((a2 & 1) == 0)
  {
    uint64_t v5 = qword_100A19B68;
    if (qword_100A19B68)
    {
      char v6 = qword_100A19EB0;
      if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "We don't want to keep the current query alive", buf, 2u);
        uint64_t v5 = qword_100A19B68;
      }
      *(void *)(v5 + 120) = 0;
    }
  }
  sub_10003AFE8((uint64_t)v10);
  if (*((void *)&v12 + 1))
  {
    unint64_t v7 = *(void **)(*(void *)(*((void *)&v11[0] + 1) + (((unint64_t)v12 >> 6) & 0x3FFFFFFFFFFFFF8))
                    + 8 * (v12 & 0x1FF));
    uint64_t v8 = v7[15];
    if (v8) {
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v8 + 16))(v8, v7, 308);
    }
    sub_100052DA4(v7 + 6);
    sub_10042C680(v7);
    operator delete();
  }
  sub_10003AFB4((uint64_t)v10);
  return sub_1002B5410(v11);
}

void sub_1004C1E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1002B5410((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004C1E50()
{
  uint64_t v0 = qword_100A19EB0;
  if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "SdpClient::stackWillStop enter", buf, 2u);
  }
  *(void *)long long buf = 0;
  uint64_t v5 = 0;
  sub_10003AED0((uint64_t)buf, (uint64_t)&unk_100A19B28);
  if (qword_100A132C0) {
    *(unsigned char *)(qword_100A132C0 + 212) = 1;
  }
  sub_10003AFE8((uint64_t)buf);
  uint64_t v1 = qword_100A19EB0;
  if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "SdpClient::stackWillStop exit", v3, 2u);
  }
  return sub_10003AFB4((uint64_t)buf);
}

void sub_1004C1F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004C1F40(uint64_t a1, uint64_t a2)
{
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, (uint64_t)&unk_100A19BA0);
  if (byte_1009FB928)
  {
    sub_10003AFE8((uint64_t)v9);
    *(void *)(a1 + 120) = a2;
    *(_DWORD *)(a1 + 128) = 1;
    v8[0] = 0;
    v8[1] = 0;
    sub_10003AED0((uint64_t)v8, (uint64_t)&unk_100A19B28);
    if (qword_100A19B68)
    {
      *(void *)long long buf = a1;
      sub_1004C68A4(&qword_100A19B70, buf);
    }
    else
    {
      if (*((void *)&xmmword_100A19B90 + 1)) {
        sub_10025B8C0();
      }
      qword_100A19B68 = a1;
    }
    uint64_t v5 = *((void *)&xmmword_100A19B90 + 1);
    sub_10003AFE8((uint64_t)v8);
    if (v5)
    {
      char v6 = qword_100A19EB0;
      if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134217984;
        *(void *)&uint8_t buf[4] = v5;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Waiting for %zu queries ahead of us", buf, 0xCu);
      }
    }
    else
    {
      sub_1004C2140(a1, 0);
    }
    sub_10003AFB4((uint64_t)v8);
    uint64_t v4 = 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_ERROR)) {
      sub_10076FF3C();
    }
    sub_10003AFE8((uint64_t)v9);
    uint64_t v4 = 17;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16))(a2, a1, 17);
  }
  sub_10003AFB4((uint64_t)v9);
  return v4;
}

void sub_1004C210C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_1004C2140(uint64_t a1, int a2)
{
  uint64_t v3 = (_DWORD *)qword_100A132C0;
  if (qword_100A132C0)
  {
    uint64_t v4 = *(void *)qword_100A132C0;
  }
  else
  {
    uint64_t v3 = malloc_type_malloc(0xD8uLL, 0x1020040C4BBD58BuLL);
    qword_100A132C0 = (uint64_t)v3;
    uint64_t v4 = *(void *)(a1 + 112);
    *(void *)uint64_t v3 = v4;
    v3[52] = 0;
    *((unsigned char *)v3 + 212) = 0;
  }
  char v6 = qword_100A19EB0;
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
    {
      if (v3[52]) {
        unint64_t v7 = "Retrying connection to";
      }
      else {
        unint64_t v7 = "Connecting to";
      }
      sub_100474E18(v4, __p);
      if (v20 >= 0) {
        uint64_t v8 = __p;
      }
      else {
        uint64_t v8 = *(unsigned char **)__p;
      }
      *(_DWORD *)long long buf = 136446466;
      unint64_t v22 = v7;
      __int16 v23 = 2082;
      uint64_t v24 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}s SDP server for device %{public}s", buf, 0x16u);
      if (v20 < 0) {
        operator delete(*(void **)__p);
      }
      char v6 = qword_100A19EB0;
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(int *)(qword_100A19B68 + 132);
      if (v9 > 0xA) {
        BOOL v10 = "unknown sdp state";
      }
      else {
        BOOL v10 = off_1009B13C8[v9];
      }
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = v10;
      *(_WORD *)&unsigned char __p[12] = 2080;
      *(void *)&__p[14] = "SDP_CONNECT_STATE";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "SDP Client State Change: %s -> %s\n", __p, 0x16u);
    }
    *(_DWORD *)(qword_100A19B68 + 132) = 1;
    if (sub_1004776C0(*(void *)qword_100A132C0))
    {
      uint64_t v11 = qword_100A19EB0;
      if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(*(void *)qword_100A132C0, __p);
        long long v12 = v20 >= 0 ? __p : *(const char **)__p;
        *(_DWORD *)long long buf = 136446210;
        unint64_t v22 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Applying SDP workaround for Type S Game Controllers to device %{public}s", buf, 0xCu);
        if (v20 < 0) {
          operator delete(*(void **)__p);
        }
      }
      sub_10024BFCC();
    }
    if (a2)
    {
      int v13 = sub_10024BFDC((uint64_t)sub_1004C25F8, (uint64_t)sub_1004C2690, *(void *)qword_100A132C0 + 128);
      if (v13) {
        goto LABEL_32;
      }
    }
    else
    {
      __p[0] = 0;
      sub_10001B8E0(__p);
      int v13 = sub_10024BFDC((uint64_t)sub_1004C25F8, (uint64_t)sub_1004C2690, *(void *)qword_100A132C0 + 128);
      sub_10001B8AC(__p);
      if (v13)
      {
LABEL_32:
        uint64_t v14 = qword_100A19EB0;
        if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_ERROR)) {
          sub_100770030(v13, v14);
        }
        *(void *)std::string __p = 0;
        *(void *)&__p[8] = 0;
        sub_10003AED0((uint64_t)__p, (uint64_t)&unk_100A19B28);
        uint64_t v15 = (void *)qword_100A19B68;
        if (!qword_100A19B68)
        {
          sub_10025B8C0();
          uint64_t v15 = (void *)qword_100A19B68;
        }
        qword_100A19B68 = 0;
        if (*((void *)&xmmword_100A19B90 + 1))
        {
          uint64_t v16 = *(void *)(*(void *)(qword_100A19B78
                                      + (((unint64_t)xmmword_100A19B90 >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * (xmmword_100A19B90 & 0x1FF));
          *(void *)&xmmword_100A19B90 = xmmword_100A19B90 + 1;
          --*((void *)&xmmword_100A19B90 + 1);
          sub_1002CBC00((uint64_t)&qword_100A19B70, 1);
          qword_100A19B68 = v16;
        }
        sub_10003AFE8((uint64_t)__p);
        uint64_t v18 = v15[15];
        if (v18) {
          (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v18 + 16))(v18, v15, 309);
        }
        sub_100052DA4(v15 + 6);
        sub_10042C680(v15);
        operator delete();
      }
    }
    return 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_ERROR)) {
      sub_10076FF74();
    }
    return 1;
  }
}

void sub_1004C25A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

const char *sub_1004C25D4(unsigned int a1)
{
  if (a1 > 0xA) {
    return "unknown sdp state";
  }
  else {
    return off_1009B13C8[a1];
  }
}

void sub_1004C25F8(uint64_t a1)
{
  if (a1)
  {
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009B12D8);
    }
    *(_DWORD *)(qword_100A19B68 + 128) = sub_1004E2340((uint64_t)off_1009F8068, a1, 10000);
    uint64_t v3 = sub_1004AF8EC();
    sub_100013018(v3, &stru_1009B11E8);
  }
  else
  {
    sub_1004C26C0();
  }
}

void sub_1004C2690()
{
  uint64_t v0 = sub_1004AF8EC();

  sub_100013018(v0, &stru_1009B11E8);
}

void sub_1004C26C0()
{
  long long v27 = xmmword_1007BEF80;
  BOOL v0 = sub_10047B21C(*(void *)qword_100A132C0, &v27);
  uint64_t v1 = qword_100A19EB0;
  if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
  {
    if (qword_100A19B68)
    {
      uint64_t v2 = *(int *)(qword_100A19B68 + 132);
      if (v2 > 0xA) {
        uint64_t v3 = "unknown sdp state";
      }
      else {
        uint64_t v3 = off_1009B13C8[v2];
      }
    }
    else
    {
      uint64_t v3 = "";
    }
    int v4 = *(unsigned __int8 *)(*(void *)qword_100A132C0 + 784);
    BOOL v5 = sub_100478AF4(*(void *)qword_100A132C0);
    int v6 = *(unsigned __int8 *)(*(void *)qword_100A132C0 + 578);
    *(_DWORD *)long long buf = 136316162;
    uint64_t v29 = v3;
    __int16 v30 = 1024;
    *(_DWORD *)uint64_t v31 = v4;
    *(_WORD *)&uint8_t v31[4] = 1024;
    *(_DWORD *)&v31[6] = v0;
    __int16 v32 = 1024;
    BOOL v33 = v5;
    __int16 v34 = 1024;
    int v35 = v6;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Statemachine start: %s, d2d %d, isLocalServiceDiscoveryClassExist %d, AppleBT %d isFullSDPRequired %d", buf, 0x24u);
  }
  uint64_t v7 = *(void *)qword_100A132C0;
  if (*(unsigned char *)(*(void *)qword_100A132C0 + 784))
  {
    *(unsigned char *)(v7 + 784) = 0;
    long long v26 = unk_1009B11A8;
    int v8 = sub_10024C7C8((uint64_t)sub_1004C2C08, 0x30u, (unsigned __int8 *)&v26);
    if (v8) {
      goto LABEL_37;
    }
    uint64_t v9 = qword_100A19EB0;
    if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(int *)(qword_100A19B68 + 132);
      if (v10 > 0xA) {
        uint64_t v11 = "unknown sdp state";
      }
      else {
        uint64_t v11 = off_1009B13C8[v10];
      }
      *(_DWORD *)long long buf = 136315394;
      uint64_t v29 = v11;
      __int16 v30 = 2080;
      *(void *)uint64_t v31 = "SDP_SEARCH_D2D_STATE";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "SDP Client State Change: %s -> %s\n", buf, 0x16u);
    }
    uint64_t v20 = qword_100A19B68;
    int v21 = 3;
    goto LABEL_36;
  }
  if (v0
    && sub_100478F30(v7, &v27, 0x201u)
    && *(_DWORD *)(qword_100A19B68 + 132) != 7
    && !*(unsigned char *)(*(void *)qword_100A132C0 + 578))
  {
    unint64_t v22 = qword_100A19EB0;
    if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Executing Service Database State lookup", buf, 2u);
    }
    long long v26 = unk_1009B11B8;
    int v8 = sub_10024CB4C((uint64_t)sub_1004C2DC0, 0, (unsigned __int8 *)&v26);
    __int16 v23 = qword_100A19EB0;
    if (!v8)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v24 = sub_1004C25D4(*(_DWORD *)(qword_100A19B68 + 132));
        *(_DWORD *)long long buf = 136315394;
        uint64_t v29 = v24;
        __int16 v30 = 2080;
        *(void *)uint64_t v31 = "SDP_DATABASE_QUERY_STATE";
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "SDP Client State Change: %s -> %s\n", buf, 0x16u);
      }
      uint64_t v20 = qword_100A19B68;
      int v21 = 5;
      goto LABEL_36;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_ERROR)) {
      sub_100770174();
    }
  }
  else
  {
    long long v12 = qword_100A19EB0;
    if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Executing full SDP", buf, 2u);
    }
    *(unsigned char *)(*(void *)qword_100A132C0 + 578) = 0;
    long long v26 = 0uLL;
    __int16 v25 = 0;
    uint64_t v13 = *(void *)(qword_100A19B68 + 112);
    int v14 = sub_10017ED08(v13 + 128, &v25);
    uint64_t v15 = &unk_1007BEFC0;
    if (!v14 && v25 == 97)
    {
      if (sub_1004776C0(v13))
      {
        uint64_t v16 = qword_100A19EB0;
        if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Overriding SDP search for unauthorized Type S controller", buf, 2u);
        }
        uint64_t v15 = &unk_1007BEFB0;
      }
      else
      {
        uint64_t v15 = &unk_1007BEFC0;
      }
    }
    LOBYTE(v26) = 6;
    WORD1(v26) = 1;
    *((void *)&v26 + 1) = v15;
    int v8 = sub_10024C7C8((uint64_t)sub_1004C2C08, 0x30u, (unsigned __int8 *)&v26);
    if (!v8)
    {
      uint64_t v17 = qword_100A19EB0;
      if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = *(int *)(qword_100A19B68 + 132);
        if (v18 > 0xA) {
          uint64_t v19 = "unknown sdp state";
        }
        else {
          uint64_t v19 = off_1009B13C8[v18];
        }
        *(_DWORD *)long long buf = 136315394;
        uint64_t v29 = v19;
        __int16 v30 = 2080;
        *(void *)uint64_t v31 = "SDP_SEARCH_STATE";
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "SDP Client State Change: %s -> %s\n", buf, 0x16u);
      }
      uint64_t v20 = qword_100A19B68;
      int v21 = 2;
LABEL_36:
      *(_DWORD *)(v20 + 132) = v21;
    }
  }
LABEL_37:
  if (v8)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_ERROR)) {
      sub_10077010C();
    }
    *(_DWORD *)(qword_100A19B68 + 128) = 0;
    sub_1004C35E0();
  }
}

void sub_1004C2C08(int *a1, unsigned int a2, int a3)
{
  int v6 = qword_100A19EB0;
  if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(int *)(qword_100A19B68 + 132);
    if (v7 > 0xA) {
      int v8 = "unknown sdp state";
    }
    else {
      int v8 = off_1009B13C8[v7];
    }
    v14[0] = 67109634;
    v14[1] = a2;
    __int16 v15 = 1024;
    int v16 = a3;
    __int16 v17 = 2080;
    uint64_t v18 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Service search response with %d records, status %{bluetooth:OI_STATUS}u with state %s", (uint8_t *)v14, 0x18u);
  }
  if (a3)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_ERROR)) {
      sub_1007701DC();
    }
    *(_DWORD *)(qword_100A19B68 + 128) = 1;
LABEL_10:
    sub_1004C35E0();
    return;
  }
  if (!a2)
  {
    uint64_t v13 = qword_100A19EB0;
    if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v14[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Service search yields no records, we're done", (uint8_t *)v14, 2u);
    }
    *(_DWORD *)(qword_100A19B68 + 128) = 0;
    goto LABEL_10;
  }
  uint64_t v9 = qword_100A132C0;
  *(_DWORD *)(qword_100A132C0 + 200) = a2;
  uint64_t v10 = a2;
  uint64_t v11 = (_DWORD *)(v9 + 8);
  do
  {
    int v12 = *a1++;
    *v11++ = v12;
    --v10;
  }
  while (v10);
  *(_DWORD *)(v9 + 204) = 0;
  sub_1004C3E14();
}

void sub_1004C2DC0(unsigned __int8 *a1, int a2, int a3)
{
  int v6 = qword_100A19EB0;
  if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(int *)(qword_100A19B68 + 132);
    if (v7 > 0xA) {
      int v8 = "unknown sdp state";
    }
    else {
      int v8 = off_1009B13C8[v7];
    }
    *(_DWORD *)long long buf = 136315650;
    *(void *)&uint8_t buf[4] = v8;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = a2;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Service database state response with state %s, more %d, status %{bluetooth:OI_STATUS}u", buf, 0x18u);
  }
  if (a3)
  {
    if (a3 == 802)
    {
      uint64_t v9 = qword_100A19B68;
      uint64_t v10 = qword_100A19EB0;
      if (*(_DWORD *)(qword_100A19B68 + 132) == 5)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Remote device does not support ServiceDataBaseState restarting full SDP", buf, 2u);
          uint64_t v10 = qword_100A19EB0;
          uint64_t v9 = qword_100A19B68;
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v11 = *(int *)(v9 + 132);
          if (v11 > 0xA) {
            int v12 = "unknown sdp state";
          }
          else {
            int v12 = off_1009B13C8[v11];
          }
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = v12;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "SDP_DATABASE_CACHE_UPDATE_REQUIRED";
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "SDP Client State Change: %s -> %s\n", buf, 0x16u);
          uint64_t v9 = qword_100A19B68;
        }
        *(_DWORD *)(v9 + 132) = 7;
        uint64_t v26 = sub_1004AF8EC();
        sub_100013018(v26, &stru_1009B1258);
        return;
      }
    }
    else
    {
      uint64_t v10 = qword_100A19EB0;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_100770244();
    }
    *(_DWORD *)(qword_100A19B68 + 128) = 1;
    sub_1004C35E0();
  }
  else if ((*a1 & 0xFE) == 6)
  {
    uint64_t v13 = qword_100A19B68;
    if (*(_DWORD *)(qword_100A19B68 + 132) == 5)
    {
      long long v46 = xmmword_1007BEF80;
      int v14 = qword_100A19EB0;
      if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Starting SDP database state matching", buf, 2u);
      }
      sub_1004C4F10(a1);
      uint64_t v15 = qword_100A19B68;
      if (*(_DWORD *)(qword_100A19B68 + 140) == -1)
      {
        long long v27 = qword_100A19EB0;
        if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
        {
          dispatch_block_t v28 = sub_1004C25D4(*(_DWORD *)(v15 + 132));
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = v28;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "SDP_DATABASE_REMOTE_STATE_NOT_FOUND";
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "SDP Client State Change: %s -> %s\n", buf, 0x16u);
          uint64_t v15 = qword_100A19B68;
        }
        unsigned int v29 = 6;
        *(_DWORD *)(v15 + 132) = 6;
LABEL_49:
        uint64_t v32 = qword_100A19EB0;
        if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
        {
          BOOL v33 = sub_1004C25D4(v29);
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = v33;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "SDP_DATABASE_RFCOMM_UPDATE_STATE";
          __int16 v34 = v32;
LABEL_51:
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "SDP Client State Change: %s -> %s\n", buf, 0x16u);
          uint64_t v15 = qword_100A19B68;
        }
      }
      else
      {
        memset(buf, 0, sizeof(buf));
        uint64_t v16 = sub_10047AE08(*(void *)(qword_100A19B68 + 112), (uint64_t)&v46, 0x201u, (void **)buf);
        if (v16 && **(unsigned char **)buf == 1)
        {
          int v18 = *(_DWORD *)(*(void *)buf + 8);
          uint64_t v19 = qword_100A19EB0;
          if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
          {
            int v20 = *(_DWORD *)(qword_100A19B68 + 140);
            *(_DWORD *)uint64_t v47 = 67109376;
            *(_DWORD *)&v47[4] = v18;
            *(_WORD *)&v47[8] = 1024;
            *(_DWORD *)&v47[10] = v20;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "SdpServiceDataBaseState [local 0x%x, remote 0x%x]", v47, 0xEu);
          }
          uint64_t v21 = qword_100A19B68;
          int v22 = *(_DWORD *)(qword_100A19B68 + 140);
          __int16 v23 = qword_100A19EB0;
          uint64_t v16 = os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT);
          if (v18 == v22)
          {
            if (v16)
            {
              uint64_t v24 = sub_1004C25D4(*(_DWORD *)(v21 + 132));
              *(_DWORD *)uint64_t v47 = 136315394;
              *(void *)&v47[4] = v24;
              *(_WORD *)&v47[12] = 2080;
              *(void *)&v47[14] = "SDP_DATABASE_VERIFY_COMPLETE_STATE";
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "SDP Client State Change: %s -> %s\n", v47, 0x16u);
              uint64_t v21 = qword_100A19B68;
            }
            int v25 = 8;
          }
          else
          {
            if (v16)
            {
              __int16 v30 = sub_1004C25D4(*(_DWORD *)(v21 + 132));
              *(_DWORD *)uint64_t v47 = 136315394;
              *(void *)&v47[4] = v30;
              *(_WORD *)&v47[12] = 2080;
              *(void *)&v47[14] = "SDP_DATABASE_CACHE_UPDATE_REQUIRED";
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "SDP Client State Change: %s -> %s\n", v47, 0x16u);
              uint64_t v21 = qword_100A19B68;
            }
            int v25 = 7;
          }
          *(_DWORD *)(v21 + 132) = v25;
        }
        uint64_t v31 = *(_OWORD **)buf;
        if (*(void *)buf != *(void *)&buf[8])
        {
          do
          {
            *(void *)uint64_t v47 = 0;
            *(void *)&v47[8] = 0;
            *(_OWORD *)uint64_t v47 = *v31;
            sub_1002D5394(v47);
            ++v31;
          }
          while (v31 != *(_OWORD **)&buf[8]);
          uint64_t v31 = *(_OWORD **)buf;
        }
        if (v31)
        {
          *(void *)&uint8_t buf[8] = v31;
          operator delete(v31);
        }
        uint64_t v15 = qword_100A19B68;
        unsigned int v29 = *(_DWORD *)(qword_100A19B68 + 132);
        switch(v29)
        {
          case 5u:
            int v39 = *(_DWORD *)(qword_100A19B68 + 140);
            int v40 = qword_100A19EB0;
            BOOL v41 = os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT);
            if (v39 != -1)
            {
              if (v41)
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Local database state not found, but remote state exists, full SDP", buf, 2u);
                int v40 = qword_100A19EB0;
                uint64_t v15 = qword_100A19B68;
              }
              if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
              {
                int v42 = sub_1004C25D4(*(_DWORD *)(v15 + 132));
                *(_DWORD *)long long buf = 136315394;
                *(void *)&uint8_t buf[4] = v42;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = "SDP_DATABASE_CACHE_UPDATE_REQUIRED";
                _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "SDP Client State Change: %s -> %s\n", buf, 0x16u);
                uint64_t v15 = qword_100A19B68;
              }
              *(_DWORD *)(v15 + 132) = 7;
              uint64_t v43 = sub_1004AF8EC();
              sub_100013018(v43, &stru_1009B1278);
              goto LABEL_53;
            }
            if (v41)
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Local database state not found and remote state does not exist, move onto RFCOMM", buf, 2u);
              int v40 = qword_100A19EB0;
              uint64_t v15 = qword_100A19B68;
            }
            if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
            {
              long long v45 = sub_1004C25D4(*(_DWORD *)(v15 + 132));
              *(_DWORD *)long long buf = 136315394;
              *(void *)&uint8_t buf[4] = v45;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "SDP_DATABASE_RFCOMM_UPDATE_STATE";
              __int16 v34 = v40;
              goto LABEL_51;
            }
            break;
          case 6u:
          case 8u:
            goto LABEL_49;
          case 7u:
            sub_1004C26C0(v16, v17);
            goto LABEL_53;
          default:
            long long v44 = qword_100A19EB0;
            if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_ERROR)) {
              sub_1007702AC(v29, v44);
            }
            goto LABEL_53;
        }
      }
      *(_DWORD *)(v15 + 132) = 9;
LABEL_53:
      if (*(_DWORD *)(qword_100A19B68 + 132) == 9)
      {
        int v35 = sub_10048B154(*(void *)(qword_100A19B68 + 112), (void *)qword_100A19B68);
        uint64_t v36 = qword_100A19EB0;
        BOOL v37 = os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT);
        if (v35)
        {
          if (v37)
          {
            uint64_t v38 = *(void *)(qword_100A19B68 + 40);
            *(_DWORD *)long long buf = 134217984;
            *(void *)&uint8_t buf[4] = v38;
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Found %lu services supported RFCOMM, starting channel query", buf, 0xCu);
          }
          byte_1009FB929 = 0;
          sub_1004C531C();
        }
        else
        {
          if (v37)
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "No RFCOMM services, we're done", buf, 2u);
          }
          *(_DWORD *)(qword_100A19B68 + 128) = 0;
          sub_1004C35E0();
        }
      }
      uint64_t v13 = qword_100A19B68;
    }
    *(_DWORD *)(v13 + 140) = -1;
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_ERROR))
  {
    sub_100770338();
  }
}

void sub_1004C35A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004C35E0()
{
  BOOL v0 = qword_100A19EB0;
  if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v1 = *(int *)(qword_100A19B68 + 132);
    if (v1 > 0xA) {
      uint64_t v2 = "unknown sdp state";
    }
    else {
      uint64_t v2 = off_1009B13C8[v1];
    }
    int v4 = 136315394;
    BOOL v5 = v2;
    __int16 v6 = 2080;
    uint64_t v7 = "SDP_DISCONNECT_STATE";
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "SDP Client State Change: %s -> %s\n", (uint8_t *)&v4, 0x16u);
  }
  *(_DWORD *)(qword_100A19B68 + 132) = 10;
  if (sub_10024C674())
  {
    uint64_t v3 = sub_1004AF8EC();
    sub_100013018(v3, &stru_1009B11E8);
  }
}

void sub_1004C36E4()
{
  uint64_t v0 = *(void *)qword_100A132C0;
  unsigned int v24 = *(_DWORD *)(*(void *)qword_100A132C0 + 128);
  unsigned __int16 v25 = *(_WORD *)(*(void *)qword_100A132C0 + 132);
  unsigned int v1 = bswap32(v24);
  if (v1 != 693561)
  {
    unsigned int v2 = 693561;
LABEL_5:
    if (v1 < v2) {
      int v3 = -1;
    }
    else {
      int v3 = 1;
    }
    goto LABEL_8;
  }
  unsigned int v1 = bswap32(v25) >> 16;
  unsigned int v2 = 0xFFFF;
  if (v1 != 0xFFFF) {
    goto LABEL_5;
  }
  int v3 = 0;
LABEL_8:
  if (v3 >= 1)
  {
    unsigned int v4 = bswap32(v24);
    unsigned int v5 = 693586;
    if (v4 != 693586 || (v5 = 0, v6 = 0, (unsigned int v4 = bswap32(v25) >> 16) != 0))
    {
      if (v4 < v5) {
        int v6 = -1;
      }
      else {
        int v6 = 1;
      }
    }
    if (v6 < 0)
    {
      uint64_t v7 = qword_100A19B68;
      int v8 = *(_DWORD *)(qword_100A19B68 + 128);
      if (v8 == 307 || (v8 - 316) <= 0x12)
      {
        uint64_t v10 = qword_100A19EB0;
        if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
        {
          sub_100474E18(v0, __p);
          if (v29 >= 0) {
            uint64_t v11 = __p;
          }
          else {
            uint64_t v11 = *(unsigned char **)__p;
          }
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Unsupported legacy Q6 keyboard discovered in device %{public}s", buf, 0xCu);
          if (SHIBYTE(v29) < 0) {
            operator delete(*(void **)__p);
          }
          uint64_t v7 = qword_100A19B68;
        }
        *(_DWORD *)(v7 + 128) = 109;
LABEL_28:
        if (qword_100A132C0)
        {
          free((void *)qword_100A132C0);
          qword_100A132C0 = 0;
        }
        *(void *)std::string __p = 0;
        *(void *)&__p[8] = 0;
        sub_10003AED0((uint64_t)__p, (uint64_t)&unk_100A19B28);
        uint64_t v12 = qword_100A19B68;
        if (!qword_100A19B68)
        {
          sub_10025B8C0();
          uint64_t v12 = qword_100A19B68;
        }
        qword_100A19B68 = 0;
        if (*((void *)&xmmword_100A19B90 + 1))
        {
          uint64_t v13 = *(void *)(*(void *)(qword_100A19B78
                                      + (((unint64_t)xmmword_100A19B90 >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * (xmmword_100A19B90 & 0x1FF));
          *(void *)&xmmword_100A19B90 = xmmword_100A19B90 + 1;
          --*((void *)&xmmword_100A19B90 + 1);
          sub_1002CBC00((uint64_t)&qword_100A19B70, 1);
          qword_100A19B68 = v13;
        }
        sub_10003AFE8((uint64_t)__p);
        uint64_t v22 = *(void *)(v12 + 120);
        if (v22) {
          (*(void (**)(uint64_t, uint64_t, void))(*(void *)v22 + 16))(v22, v12, *(unsigned int *)(v12 + 128));
        }
        sub_100052DA4(v12 + 48);
        sub_10042C680((void *)v12);
        operator delete();
      }
    }
  }
  if (*(unsigned char *)(qword_100A132C0 + 212)) {
    goto LABEL_28;
  }
  int v14 = *(_DWORD *)(qword_100A132C0 + 208);
  uint64_t v15 = qword_100A19B68;
  int v16 = *(unsigned __int8 *)(qword_100A19B68 + 156);
  uint64_t v17 = qword_100A19EB0;
  if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(v0, buf);
    if (v27 >= 0) {
      int v18 = buf;
    }
    else {
      int v18 = *(unsigned char **)buf;
    }
    int v19 = *(_DWORD *)(qword_100A19B68 + 128);
    *(_DWORD *)std::string __p = 136316162;
    *(void *)&__p[4] = "handleDisconnectInd";
    *(_WORD *)&unsigned char __p[12] = 2082;
    *(void *)&__p[14] = v18;
    __int16 v29 = 1024;
    int v30 = v19;
    __int16 v31 = 1024;
    int v32 = v14;
    __int16 v33 = 1024;
    int v34 = v16;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%s: device %{public}s, result %d, attempts %d, totalRetries %d", __p, 0x28u);
    if (v27 < 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v15 = qword_100A19B68;
  }
  int v20 = *(_DWORD *)(v15 + 128);
  if (v20 != 307 && (v20 - 316) > 0x12)
  {
    if (v20 != 314 && v20 != 310 || v14 >= v16 && (v14 || v16)) {
      goto LABEL_28;
    }
    ++*(_DWORD *)(qword_100A132C0 + 208);
    uint64_t v23 = sub_1004AF8EC();
    sub_1004AFF58(v23, 500, &stru_1009B11C8);
  }
  else
  {
    if (v14 >= v16) {
      goto LABEL_28;
    }
    ++*(_DWORD *)(qword_100A132C0 + 208);
    sub_1004C2140(v15, 1);
  }
}

void sub_1004C3B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_1004C3B38(id a1)
{
}

void sub_1004C3B48()
{
  uint64_t v0 = qword_100A19EB0;
  if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(*(void *)qword_100A132C0, __p);
    unsigned int v1 = (void **)__p[0];
    if (v15 >= 0) {
      unsigned int v1 = __p;
    }
    int v2 = *(_DWORD *)(qword_100A132C0 + 208);
    int v3 = *(_DWORD *)(qword_100A19B68 + 128);
    uint64_t v4 = *(int *)(qword_100A19B68 + 132);
    if (v4 > 0xA) {
      unsigned int v5 = "unknown sdp state";
    }
    else {
      unsigned int v5 = off_1009B13C8[v4];
    }
    *(_DWORD *)long long buf = 136446978;
    uint64_t v17 = v1;
    __int16 v18 = 1024;
    *(_DWORD *)int v19 = v3;
    *(_WORD *)&v19[4] = 1024;
    *(_DWORD *)&v19[6] = v2;
    __int16 v20 = 2080;
    uint64_t v21 = v5;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "SDP disconnected from device %{public}s with result %d, outstanding attempts %d, state %s", buf, 0x22u);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v6 = qword_100A19B68;
  if ((*(_DWORD *)(qword_100A19B68 + 132) - 2) <= 2)
  {
    uint64_t v7 = qword_100A19EB0;
    if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *(_DWORD *)(*(void *)(v6 + 112) + 608);
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v17) = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "SDP disconnected during query states, version %d", buf, 8u);
      uint64_t v6 = qword_100A19B68;
    }
    uint64_t v9 = *(void *)(v6 + 112);
    if (!*(_DWORD *)(v9 + 608))
    {
      sub_100474B30(v9);
      uint64_t v6 = qword_100A19B68;
    }
  }
  uint64_t v10 = qword_100A19EB0;
  if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(int *)(v6 + 132);
    if (v11 > 0xA) {
      uint64_t v12 = "unknown sdp state";
    }
    else {
      uint64_t v12 = off_1009B13C8[v11];
    }
    *(_DWORD *)long long buf = 136315394;
    uint64_t v17 = (void *)v12;
    __int16 v18 = 2080;
    *(void *)int v19 = "SDP_IDLE_STATE";
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "SDP Client State Change: %s -> %s\n", buf, 0x16u);
    uint64_t v6 = qword_100A19B68;
  }
  *(_DWORD *)(v6 + 132) = 0;
  if (*(unsigned char *)(qword_100A132C0 + 212))
  {
    uint64_t v13 = qword_100A19EB0;
    if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "SDPClient Disconnect dispatch called during system shut down, clean up", buf, 2u);
    }
    sub_1004C36E4();
  }
  else
  {
    buf[0] = 0;
    sub_10001B8E0(buf);
    sub_1004C36E4();
    sub_10001B8AC(buf);
  }
}

void sub_1004C3DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10001B8AC(va);
  _Unwind_Resume(a1);
}

void sub_1004C3E14()
{
  long long v26 = unk_1009B1208;
  uint64_t v0 = qword_100A132C0;
  uint64_t v1 = *(int *)(qword_100A132C0 + 204);
  int v2 = qword_100A19EB0;
  if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(v0 + 200);
    if (qword_100A19B68)
    {
      uint64_t v4 = *(int *)(qword_100A19B68 + 132);
      if (v4 > 0xA) {
        unsigned int v5 = "unknown sdp state";
      }
      else {
        unsigned int v5 = off_1009B13C8[v4];
      }
    }
    else
    {
      unsigned int v5 = "";
    }
    *(_DWORD *)long long buf = 67109634;
    *(_DWORD *)dispatch_block_t v28 = v1;
    *(_WORD *)&uint8_t v28[4] = 1024;
    *(_DWORD *)&void v28[6] = v3;
    *(_WORD *)__int16 v29 = 2080;
    *(void *)&v29[2] = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Issuing attribute request service-index [current %d, total %d], state %s", buf, 0x18u);
    uint64_t v7 = qword_100A132C0;
    int v6 = *(_DWORD *)(qword_100A132C0 + 204);
  }
  else
  {
    int v6 = v1;
    uint64_t v7 = v0;
  }
  if (v6 == *(_DWORD *)(v7 + 200))
  {
    uint64_t v8 = qword_100A19B68;
    unsigned int v9 = *(_DWORD *)(qword_100A19B68 + 132);
    if (v9 == 3)
    {
      uint64_t v13 = qword_100A19EB0;
      if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        int v14 = "D2D look up complete";
LABEL_25:
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v14, buf, 2u);
        uint64_t v8 = qword_100A19B68;
      }
    }
    else
    {
      if (v9 != 5)
      {
        if (v9 == 4)
        {
          long long v25 = unk_1009B1218;
          uint64_t v10 = qword_100A19EB0;
          if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "DID complete, start service discovery class search", buf, 2u);
          }
          int v11 = sub_10024C7C8((uint64_t)sub_1004C2C08, 0x30u, (unsigned __int8 *)&v25);
          uint64_t v12 = qword_100A19EB0;
          if (v11)
          {
            if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_ERROR)) {
              sub_10077045C();
            }
LABEL_38:
            *(_DWORD *)(qword_100A19B68 + 128) = 0;
            goto LABEL_39;
          }
          if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v17 = *(int *)(qword_100A19B68 + 132);
            if (v17 > 0xA) {
              __int16 v18 = "unknown sdp state";
            }
            else {
              __int16 v18 = off_1009B13C8[v17];
            }
            *(_DWORD *)long long buf = 136315394;
            *(void *)dispatch_block_t v28 = v18;
            *(_WORD *)&v28[8] = 2080;
            *(void *)__int16 v29 = "SDP_DATABASE_QUERY_STATE";
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "SDP Client State Change: %s -> %s\n", buf, 0x16u);
          }
          uint64_t v23 = qword_100A19B68;
          int v24 = 5;
        }
        else
        {
          char v15 = qword_100A19EB0;
          if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
          {
            if (v9 > 0xA) {
              int v16 = "unknown sdp state";
            }
            else {
              int v16 = off_1009B12F8[v9];
            }
            *(_DWORD *)long long buf = 136315138;
            *(void *)dispatch_block_t v28 = v16;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Found all services, starting DID while in state %s", buf, 0xCu);
          }
          long long v25 = unk_1009B1228;
          int v19 = sub_10024C7C8((uint64_t)sub_1004C2C08, 0x30u, (unsigned __int8 *)&v25);
          __int16 v20 = qword_100A19EB0;
          if (v19)
          {
            if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_ERROR)) {
              sub_1007703F4();
            }
            goto LABEL_38;
          }
          if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v21 = *(int *)(qword_100A19B68 + 132);
            if (v21 > 0xA) {
              uint64_t v22 = "unknown sdp state";
            }
            else {
              uint64_t v22 = off_1009B13C8[v21];
            }
            *(_DWORD *)long long buf = 136315394;
            *(void *)dispatch_block_t v28 = v22;
            *(_WORD *)&v28[8] = 2080;
            *(void *)__int16 v29 = "SDP_DID_STATE";
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "SDP Client State Change: %s -> %s\n", buf, 0x16u);
          }
          uint64_t v23 = qword_100A19B68;
          int v24 = 4;
        }
        *(_DWORD *)(v23 + 132) = v24;
        return;
      }
      uint64_t v13 = qword_100A19EB0;
      if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        int v14 = "Database state lookup complete";
        goto LABEL_25;
      }
    }
    *(_DWORD *)(v8 + 128) = 0;
LABEL_39:
    sub_1004C35E0();
    return;
  }
  if (sub_10024CB4C((uint64_t)sub_1004C42B8, *(_DWORD *)(v0 + 4 * v1 + 8), (unsigned __int8 *)&v26)
    && os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_ERROR))
  {
    sub_1007704C4();
  }
}

void sub_1004C42B8(uint64_t a1, int a2, int a3)
{
  int v6 = qword_100A19EB0;
  if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(int *)(qword_100A19B68 + 132);
    if (v7 > 0xA) {
      uint64_t v8 = "unknown sdp state";
    }
    else {
      uint64_t v8 = off_1009B13C8[v7];
    }
    *(_DWORD *)long long buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = a2;
    *(_WORD *)&uint8_t buf[8] = 2080;
    *(void *)&buf[10] = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Service attribute response, more %d, state is %s", buf, 0x12u);
  }
  if (a3)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_ERROR)) {
      sub_100770624();
    }
    uint64_t v9 = qword_100A19B68;
    uint64_t v10 = *(void *)(qword_100A19B68 + 112);
    if (v10)
    {
      if (a3 == 802 && *(_DWORD *)(qword_100A19B68 + 132) == 5)
      {
        *(_DWORD *)(qword_100A19B68 + 128) = 0;
        sub_1004C35E0();
      }
      else
      {
        if (!*(_DWORD *)(v10 + 608))
        {
          sub_100474B30(v10);
          uint64_t v9 = qword_100A19B68;
        }
        *(_DWORD *)(v9 + 128) = 1;
        sub_1004C35E0();
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_ERROR))
    {
      sub_1007705EC();
    }
    return;
  }
  if ((*(unsigned char *)a1 & 0xFE) == 6)
  {
    int v64 = a2;
    int v11 = *(unsigned __int16 *)(a1 + 2);
    if (v11)
    {
      int v42 = qword_100A19EB0;
      if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v11;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "This is weird, there are an odd number of elements in this sdp query %d", buf, 8u);
      }
    }
    else if (*(_WORD *)(a1 + 2))
    {
      unint64_t v12 = 0;
      while (1)
      {
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v13 = *(void *)(a1 + 8);
        *(_OWORD *)std::string __p = *(_OWORD *)(v13 + 16 * v12);
        long long v79 = 0uLL;
        long long v79 = *(_OWORD *)(v13 + ((16 * v12) | 0x10));
        long long v78 = 0uLL;
        if (LOBYTE(__p[0]) != 1)
        {
          if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_ERROR)) {
            sub_1007705BC(&v76, v77);
          }
          goto LABEL_80;
        }
        int v14 = (int)__p[1];
        if (LODWORD(__p[1]) == 9) {
          break;
        }
        if (LODWORD(__p[1]) != 1) {
          goto LABEL_58;
        }
        if (v79 == 6 && WORD1(v79))
        {
          unint64_t v15 = 0;
          do
          {
            int v16 = (unsigned char *)(*((void *)&v79 + 1) + 16 * v15);
            if (*v16 == 3 && sub_1002D66C8(&v78, (uint64_t)v16))
            {
              uint64_t v17 = qword_100A13298;
              if (qword_100A13298 >= (unint64_t)qword_100A132A0)
              {
                uint64_t v19 = (qword_100A13298 - qword_100A13290) >> 4;
                unint64_t v20 = v19 + 1;
                if ((unint64_t)(v19 + 1) >> 60) {
                  abort();
                }
                uint64_t v21 = qword_100A132A0 - qword_100A13290;
                if ((qword_100A132A0 - qword_100A13290) >> 3 > v20) {
                  unint64_t v20 = v21 >> 3;
                }
                if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v22 = v20;
                }
                if (v22) {
                  uint64_t v23 = (char *)sub_10036C440((uint64_t)&qword_100A132A0, v22);
                }
                else {
                  uint64_t v23 = 0;
                }
                int v24 = &v23[16 * v19];
                *(_OWORD *)int v24 = v78;
                uint64_t v26 = qword_100A13290;
                long long v25 = (char *)qword_100A13298;
                uint64_t v27 = (uint64_t)v24;
                if (qword_100A13298 != qword_100A13290)
                {
                  do
                  {
                    *(_OWORD *)(v27 - 16) = *((_OWORD *)v25 - 1);
                    v27 -= 16;
                    v25 -= 16;
                  }
                  while (v25 != (char *)v26);
                  long long v25 = (char *)qword_100A13290;
                }
                uint64_t v18 = (uint64_t)(v24 + 16);
                qword_100A13290 = v27;
                qword_100A13298 = (uint64_t)(v24 + 16);
                qword_100A132A0 = (uint64_t)&v23[16 * v22];
                if (v25) {
                  operator delete(v25);
                }
              }
              else
              {
                *(_OWORD *)qword_100A13298 = v78;
                uint64_t v18 = v17 + 16;
              }
              qword_100A13298 = v18;
              dispatch_block_t v28 = qword_100A19EB0;
              if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
              {
                __int16 v29 = sub_100258E24(*(unsigned int *)(*((void *)&v79 + 1) + 16 * v15 + 8));
                *(_DWORD *)long long buf = 136446466;
                *(void *)&uint8_t buf[4] = v29;
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1;
                _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Found service class %{public}s HFP: %d", buf, 0x12u);
              }
            }
            ++v15;
          }
          while (v15 < WORD1(v79));
        }
LABEL_80:
        v12 += 2;
        if (v12 >= *(unsigned __int16 *)(a1 + 2)) {
          goto LABEL_91;
        }
      }
      if (v79 != 6)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_ERROR)) {
          sub_10077058C(&v74, v75);
        }
        goto LABEL_80;
      }
      unsigned __int16 v30 = WORD1(v79);
      if (WORD1(v79))
      {
        uint64_t v31 = 0;
        unint64_t v32 = 0;
        do
        {
          if (*(unsigned char *)(*((void *)&v79 + 1) + v31) == 6)
          {
            uint64_t v33 = *((void *)&v79 + 1) + v31;
            uint64_t v34 = qword_100A19B68;
            *(_DWORD *)(qword_100A19B68 + 148) = *(_DWORD *)(*(void *)(*((void *)&v79 + 1) + v31 + 8) + 8);
            *(_WORD *)(v34 + 152) = *(_DWORD *)(*(void *)(v33 + 8) + 24);
          }
          else
          {
            int v35 = qword_100A19EB0;
            if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)long long buf = 0;
              _os_log_error_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "AttributeValue inside OI_ATTRID_BluetoothProfileDescriptorList wasn't a OI_DATAELEM_SEQ, skipping", buf, 2u);
              unsigned __int16 v30 = WORD1(v79);
            }
          }
          ++v32;
          v31 += 16;
        }
        while (v32 < v30);
        int v14 = (int)__p[1];
LABEL_58:
        if (v14 != 4) {
          goto LABEL_71;
        }
        if (v79 != 6)
        {
          if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_ERROR)) {
            sub_10077058C(&v72, v73);
          }
          goto LABEL_80;
        }
        if (WORD1(v79))
        {
          uint64_t v36 = 0;
          unint64_t v37 = 0;
          do
          {
            if (*(unsigned char *)(*((void *)&v79 + 1) + v36) == 6)
            {
              uint64_t v38 = *(void *)(*((void *)&v79 + 1) + v36 + 8);
              int v39 = *(unsigned __int16 *)(v38 + 8);
              int v40 = *(_DWORD *)(v38 + 24);
              if (v39 == 25)
              {
                sub_1004826F0(*(void *)(qword_100A19B68 + 112), v40);
              }
              else if (v39 == 23)
              {
                sub_1004827F0(*(void *)(qword_100A19B68 + 112), v40);
              }
            }
            else if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_ERROR))
            {
              sub_10077055C(&v70, v71);
            }
            ++v37;
            v36 += 16;
          }
          while (v37 < WORD1(v79));
          int v14 = (int)__p[1];
LABEL_71:
          if (v14 == 785)
          {
            if (v79 != 1)
            {
              if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_ERROR)) {
                sub_10077052C(&v68, v69);
              }
              goto LABEL_80;
            }
            *(_WORD *)(qword_100A19B68 + 154) = WORD4(v79);
          }
        }
      }
      if (sub_1002D66C8(&v78, (uint64_t)&v79))
      {
        *(void *)long long buf = &__p[1];
        BOOL v41 = sub_100360408((uint64_t **)&qword_100A132A8, (unsigned int *)&__p[1], (uint64_t)&unk_1007BE9D0, (_DWORD **)buf);
        *(_OWORD *)(v41 + 5) = v78;
      }
      goto LABEL_80;
    }
LABEL_91:
    if (v64)
    {
      if (!sub_10024D124()) {
        return;
      }
      goto LABEL_143;
    }
    *(void *)&long long v79 = 0;
    int v43 = sub_10017E2D4(*(void *)(qword_100A19B68 + 112) + 128, (uint64_t *)&v79);
    uint64_t v45 = qword_100A13290;
    uint64_t v44 = qword_100A13298;
    if (!v43)
    {
      if (qword_100A13290 == qword_100A13298)
      {
        *(void *)(qword_100A19B68 + 148) = 0;
LABEL_135:
        uint64_t v59 = qword_100A132A8;
        if ((uint64_t *)qword_100A132A8 != &qword_100A132B0)
        {
          do
          {
            *(_OWORD *)long long buf = *(_OWORD *)(v59 + 40);
            sub_1002D5394(buf);
            v60 = *(uint64_t **)(v59 + 8);
            if (v60)
            {
              do
              {
                v61 = v60;
                v60 = (uint64_t *)*v60;
              }
              while (v60);
            }
            else
            {
              do
              {
                v61 = *(uint64_t **)(v59 + 16);
                BOOL v47 = *v61 == v59;
                uint64_t v59 = (uint64_t)v61;
              }
              while (!v47);
            }
            uint64_t v59 = (uint64_t)v61;
          }
          while (v61 != &qword_100A132B0);
        }
        sub_1000486F0((uint64_t)&qword_100A132A8, (void *)qword_100A132B0);
        qword_100A132A8 = (uint64_t)&qword_100A132B0;
        qword_100A132B8 = 0;
        qword_100A132B0 = 0;
        qword_100A13298 = qword_100A13290;
LABEL_143:
        uint64_t v62 = qword_100A19B68;
        if (*(_DWORD *)(qword_100A19B68 + 132) == 5)
        {
          char v63 = qword_100A19EB0;
          if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "Database state lookup complete", buf, 2u);
            uint64_t v62 = qword_100A19B68;
          }
          *(_DWORD *)(v62 + 128) = 0;
          sub_1004C35E0();
        }
        else
        {
          ++*(_DWORD *)(qword_100A132C0 + 204);
          sub_1004C3E14();
        }
        return;
      }
      do
      {
        unint64_t v46 = *(unsigned int *)(v45 + 8);
        BOOL v47 = (v46 - 4364) > 0x12 || ((1 << (v46 - 12)) & 0x4000D) == 0;
        if (v47)
        {
          int v53 = qword_100A19EB0;
          if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
          {
            char v54 = sub_100258E24(v46);
            int v55 = *(unsigned __int16 *)(qword_100A19B68 + 152);
            int v56 = *(unsigned __int16 *)(qword_100A19B68 + 154);
            sub_100474E18(*(void *)(qword_100A19B68 + 112), __p);
            v57 = __p;
            if (v67 < 0) {
              v57 = (void **)__p[0];
            }
            *(_DWORD *)long long buf = 136447234;
            *(void *)&uint8_t buf[4] = v54;
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v55;
            __int16 v81 = 1024;
            int v82 = v56;
            __int16 v83 = 2082;
            v84 = v57;
            __int16 v85 = 2048;
            uint64_t v86 = v79;
            _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "Found service class %{public}s with profile version: %x, supported features: %x. Not creating remote SDP record for device \"%{public}s\" with hci handle: %p", buf, 0x2Cu);
            if (v67 < 0) {
              operator delete(__p[0]);
            }
          }
        }
        else
        {
          std::locale v48 = qword_100A19EB0;
          if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
          {
            unsigned __int8 v49 = sub_100258E24(v46);
            int v50 = *(unsigned __int16 *)(qword_100A19B68 + 152);
            int v51 = *(unsigned __int16 *)(qword_100A19B68 + 154);
            sub_100474E18(*(void *)(qword_100A19B68 + 112), __p);
            __n128 v52 = __p;
            if (v67 < 0) {
              __n128 v52 = (void **)__p[0];
            }
            *(_DWORD *)long long buf = 136447234;
            *(void *)&uint8_t buf[4] = v49;
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v50;
            __int16 v81 = 1024;
            int v82 = v51;
            __int16 v83 = 2082;
            v84 = v52;
            __int16 v85 = 2048;
            uint64_t v86 = v79;
            _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "Found service class %{public}s with profile version: %x, supported features: %x. Creating/Updating remote SDP record for device \"%{public}s\" with hci handle: %p", buf, 0x2Cu);
            if (v67 < 0) {
              operator delete(__p[0]);
            }
          }
          sub_10024F074(v79, v46, *(_WORD *)(qword_100A19B68 + 152), *(_WORD *)(qword_100A19B68 + 154));
        }
        if ((int)v46 > 4381)
        {
          if ((int)v46 <= 4402)
          {
            if (v46 == 4382)
            {
              sub_100481CA8(*(void *)(qword_100A19B68 + 112), *(unsigned __int16 *)(qword_100A19B68 + 152));
              sub_100481DEC(*(void *)(qword_100A19B68 + 112), *(unsigned __int16 *)(qword_100A19B68 + 154));
            }
            else if (v46 == 4388)
            {
              sub_1004823F0(*(void *)(qword_100A19B68 + 112), *(_WORD *)(qword_100A19B68 + 152));
            }
          }
          else
          {
            switch(v46)
            {
              case 0x1133:
                sub_100481FF0(*(void *)(qword_100A19B68 + 112), *(_WORD *)(qword_100A19B68 + 152));
                break;
              case 0x1200:
                sub_1004821F0(*(void *)(qword_100A19B68 + 112), *(_WORD *)(qword_100A19B68 + 152));
                break;
              case 0x1801:
                sub_1004824F0(*(void *)(qword_100A19B68 + 112), *(_WORD *)(qword_100A19B68 + 152));
                break;
            }
          }
        }
        else
        {
          switch((int)v46)
          {
            case 4353:
              sub_1004822F0(*(void *)(qword_100A19B68 + 112), *(_WORD *)(qword_100A19B68 + 152));
              break;
            case 4357:
              sub_1004820F0(*(void *)(qword_100A19B68 + 112), *(_WORD *)(qword_100A19B68 + 152));
              break;
            case 4363:
              sub_100481E6C(*(void *)(qword_100A19B68 + 112), *(_WORD *)(qword_100A19B68 + 152));
              sub_100481F6C(*(void *)(qword_100A19B68 + 112), *(_WORD *)(qword_100A19B68 + 154));
              break;
            case 4364:
              sub_100481A9C(*(void *)(qword_100A19B68 + 112), *(unsigned __int16 *)(qword_100A19B68 + 152));
              sub_100481BE0(*(void *)(qword_100A19B68 + 112), *(unsigned __int16 *)(qword_100A19B68 + 154));
              break;
            case 4366:
            case 4367:
              sub_100481890(*(void *)(qword_100A19B68 + 112), *(unsigned __int16 *)(qword_100A19B68 + 152));
              sub_1004819D4(*(void *)(qword_100A19B68 + 112), *(unsigned __int16 *)(qword_100A19B68 + 154));
              break;
            default:
              break;
          }
        }
        v45 += 16;
      }
      while (v45 != qword_100A13298);
      uint64_t v44 = v45;
      uint64_t v45 = qword_100A13290;
    }
    *(void *)(qword_100A19B68 + 148) = 0;
    if (v45 != v44)
    {
      do
      {
        *(_OWORD *)long long buf = *(_OWORD *)v45;
        uint64_t v58 = *(void *)(qword_100A19B68 + 112);
        sub_100360748((uint64_t)v65, (uint64_t)&qword_100A132A8);
        sub_10047A22C(v58, (uint64_t)buf, v65);
        sub_1000486F0((uint64_t)v65, (void *)v65[1]);
        sub_1002D5394(buf);
        v45 += 16;
      }
      while (v45 != qword_100A13298);
    }
    goto LABEL_135;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_ERROR)) {
    sub_100770338();
  }
}

void sub_1004C4EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,void *a21)
{
}

void sub_1004C4F10(unsigned __int8 *a1)
{
  int v2 = *a1;
  if ((v2 - 1) < 2)
  {
    uint64_t v4 = qword_100A19B68;
    int v5 = *(_DWORD *)(qword_100A19B68 + 136);
    if (v5 == 2)
    {
      *(_DWORD *)(qword_100A19B68 + 14sub_1004C2140(qword_100A19B68, 0) = *((_DWORD *)a1 + 2);
      uint64_t v10 = qword_100A19EB0;
      if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315394;
        uint64_t v13 = "SDP_PARSER_FOUND_ATTRIBUTE_ID_STATE";
        __int16 v14 = 2080;
        unint64_t v15 = "SDP_PARSER_IDLE_STATE";
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "SDP Client Parser State Change: %s -> %s\n", buf, 0x16u);
        uint64_t v4 = qword_100A19B68;
      }
      *(_DWORD *)(v4 + 136) = 0;
    }
    else if (v5 == 1 && *((_DWORD *)a1 + 2) == 513)
    {
      int v6 = qword_100A19EB0;
      if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315394;
        uint64_t v13 = "SDP_PARSER_FOUND_SERVICE_CLASS_STATE";
        __int16 v14 = 2080;
        unint64_t v15 = "SDP_PARSER_FOUND_ATTRIBUTE_ID_STATE";
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "SDP Client Parser State Change: %s -> %s\n", buf, 0x16u);
        uint64_t v4 = qword_100A19B68;
      }
      *(_DWORD *)(v4 + 136) = 2;
    }
  }
  else if ((v2 - 6) >= 2)
  {
    if (v2 == 3)
    {
      long long v11 = xmmword_1007BEEE0;
      if (sub_1002D65C8((uint64_t)a1, (uint64_t)&v11))
      {
        uint64_t v7 = qword_100A19EB0;
        if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v8 = *(int *)(qword_100A19B68 + 136);
          if (v8 > 3) {
            uint64_t v9 = "unknown sdp parser state";
          }
          else {
            uint64_t v9 = off_1009B1350[v8];
          }
          *(_DWORD *)long long buf = 136315394;
          uint64_t v13 = v9;
          __int16 v14 = 2080;
          unint64_t v15 = "SDP_PARSER_FOUND_SERVICE_CLASS_STATE";
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "SDP Client Parser State Change: %s -> %s\n", buf, 0x16u);
        }
        *(_DWORD *)(qword_100A19B68 + 136) = 1;
      }
    }
  }
  else if (*((_WORD *)a1 + 1))
  {
    int v3 = 0;
    do
      sub_1004C4F10(*((void *)a1 + 1) + 16 * v3++);
    while (*((unsigned __int16 *)a1 + 1) > v3);
  }
}

void sub_1004C519C(unsigned __int8 *a1)
{
  int v2 = *a1;
  if ((v2 - 1) < 2)
  {
    if (*(_DWORD *)(qword_100A19B68 + 136) == 3) {
      *(_DWORD *)(qword_100A19B68 + 144) = *((_DWORD *)a1 + 2);
    }
  }
  else if ((v2 - 6) >= 2)
  {
    if (v2 == 3)
    {
      long long v7 = xmmword_1007BABC0;
      if (sub_1002D65C8((uint64_t)a1, (uint64_t)&v7))
      {
        uint64_t v4 = qword_100A19EB0;
        if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v5 = *(int *)(qword_100A19B68 + 136);
          if (v5 > 3) {
            int v6 = "unknown sdp parser state";
          }
          else {
            int v6 = off_1009B1350[v5];
          }
          *(_DWORD *)long long buf = 136315394;
          uint64_t v9 = v6;
          __int16 v10 = 2080;
          long long v11 = "SDP_PARSER_FOUND_RFCOMM_UUID_STATE";
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "SDP Client Parser State Change: %s -> %s\n", buf, 0x16u);
        }
        *(_DWORD *)(qword_100A19B68 + 136) = 3;
      }
    }
  }
  else if (*((_WORD *)a1 + 1))
  {
    int v3 = 0;
    do
      sub_1004C519C(*((void *)a1 + 1) + 16 * v3++);
    while (*((unsigned __int16 *)a1 + 1) > v3);
  }
}

void sub_1004C531C()
{
  uint64_t v0 = qword_100A19B68;
  unsigned int v1 = *(_DWORD *)(qword_100A19B68 + 132);
  if (v1 != 9)
  {
    uint64_t v4 = qword_100A19EB0;
    if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_ERROR)) {
      sub_10077068C(v1, v4);
    }
    return;
  }
  if (*(void *)(qword_100A19B68 + 40))
  {
    while (1)
    {
      long long v42 = xmmword_1007BEF00;
      long long v43 = xmmword_1007BEEF0;
      long long v40 = xmmword_1007BEF20;
      long long v41 = xmmword_1007BEF10;
      long long v39 = xmmword_1007BEF30;
      long long v37 = xmmword_1007BEF50;
      long long v38 = xmmword_1007BEF40;
      long long v35 = unk_1009B1238;
      long long v36 = xmmword_1007BEF60;
      long long v34 = unk_1009B1248;
      long long v33 = 0uLL;
      long long v33 = *(_OWORD *)(*(void *)(*(void *)(v0 + 8) + ((*(void *)(v0 + 32) >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * *(void *)(v0 + 32));
      if (!sub_1002D65C8((uint64_t)&v33, (uint64_t)&v43)
        && !sub_1002D65C8((uint64_t)&v33, (uint64_t)&v42)
        && !sub_1002D65C8((uint64_t)&v33, (uint64_t)&v41)
        && !sub_1002D65C8((uint64_t)&v33, (uint64_t)&v40)
        && !sub_1002D65C8((uint64_t)&v33, (uint64_t)&v39)
        && !sub_1002D65C8((uint64_t)&v33, (uint64_t)&v37)
        && !sub_1002D65C8((uint64_t)&v33, (uint64_t)&v36)
        && !sub_1002D65C8((uint64_t)&v33, (uint64_t)&v38))
      {
        if (!byte_1009FB929) {
          goto LABEL_24;
        }
        if (!sub_1002D65C8((uint64_t)&v33, (uint64_t)&v35))
        {
          if (!byte_1009FB929)
          {
LABEL_24:
            BOOL v5 = 1;
            goto LABEL_26;
          }
          if (!sub_1002D65C8((uint64_t)&v33, (uint64_t)&v34)) {
            break;
          }
        }
      }
      uint64_t v2 = qword_100A19B68;
      *(int64x2_t *)(qword_100A19B68 + 32) = vaddq_s64(*(int64x2_t *)(qword_100A19B68 + 32), (int64x2_t)xmmword_1007BB7F0);
      sub_10042CD58(v2, 1);
      uint64_t v0 = qword_100A19B68;
      if (!*(void *)(qword_100A19B68 + 40)) {
        goto LABEL_16;
      }
    }
    BOOL v5 = byte_1009FB929 == 0;
LABEL_26:
    v52[0] = 0;
    v52[1] = 0;
    *(void *)long long buf = 1048579;
    unsigned __int8 v49 = v52;
    uint64_t v50 = 131075;
    uint64_t v51 = 3;
    v47[0] = xmmword_1007BF020;
    v47[1] = unk_1007BF030;
    long long v46 = xmmword_1007BEF70;
    uint64_t v31 = 0;
    unint64_t v32 = 0;
    v30[0] = 0;
    if (!v5 || sub_1002D65C8((uint64_t)&v33, (uint64_t)&v35) || sub_1002D65C8((uint64_t)&v33, (uint64_t)&v34)) {
      byte_1009FB929 = 1;
    }
    if (v33 != 3)
    {
LABEL_43:
      LOBYTE(v30[0]) = 6;
      WORD1(v30[0]) = 1;
      v30[1] = &v46;
      int v27 = sub_10024CE58((uint64_t)sub_1004C586C, (unsigned __int8 *)&v31, (unsigned __int8 *)v30);
      if (v27)
      {
        int v28 = v27;
        __int16 v29 = qword_100A19EB0;
        if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t v44 = 67109120;
          LODWORD(v45) = v28;
          _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "Service+RFCOMM search failed with %{bluetooth:OI_STATUS}u", v44, 8u);
        }
        *(_DWORD *)(qword_100A19B68 + 128) = 0;
        goto LABEL_20;
      }
      return;
    }
    unsigned int v6 = WORD1(v33);
    int v7 = sub_100058654();
    if (v6 > 4)
    {
      if (v7)
      {
        uint64_t v17 = sub_100258B24(*((unsigned int **)&v33 + 1));
        sub_100056E24((uint64_t)"Querying RFCOMM Service : %s", v18, v19, v20, v21, v22, v23, v24, (uint64_t)v17);
        int v16 = sub_100050B4C(0x5Cu);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_37;
        }
      }
    }
    else if (v7)
    {
      uint64_t v8 = sub_100258E24(DWORD2(v33));
      sub_100056E24((uint64_t)"Querying RFCOMM Service : %s", v9, v10, v11, v12, v13, v14, v15, (uint64_t)v8);
      int v16 = sub_100050B4C(0x5Cu);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
LABEL_37:
        long long v25 = sub_100050714();
        *(_DWORD *)uint64_t v44 = 136446210;
        uint64_t v45 = v25;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, " %{public}s", v44, 0xCu);
      }
    }
    if (v33 == 3)
    {
      if (WORD1(v33) == 16)
      {
        *unsigned __int8 v49 = **((_OWORD **)&v33 + 1);
        uint64_t v26 = buf;
      }
      else
      {
        DWORD2(v47[0]) = DWORD2(v33);
        uint64_t v26 = (uint8_t *)v47;
      }
      LOBYTE(v31) = 6;
      WORD1(v31) = 2;
      unint64_t v32 = v26;
    }
    goto LABEL_43;
  }
LABEL_16:
  if (*(_DWORD *)(v0 + 132) == 9)
  {
    int v3 = qword_100A19EB0;
    if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "RFCOMM channel update complete", buf, 2u);
      uint64_t v0 = qword_100A19B68;
    }
    *(_DWORD *)(v0 + 128) = 0;
LABEL_20:
    sub_1004C35E0();
  }
}

void sub_1004C586C(unsigned __int8 *a1, int a2, int a3)
{
  unsigned int v6 = qword_100A19EB0;
  if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(int *)(qword_100A19B68 + 132);
    if (v7 > 0xA) {
      uint64_t v8 = "unknown sdp state";
    }
    else {
      uint64_t v8 = off_1009B13C8[v7];
    }
    uint64_t v9 = *(void *)(qword_100A19B68 + 40);
    LODWORD(v12) = 67109890;
    DWORD1(v12) = a2;
    WORD4(v12) = 1024;
    *(_DWORD *)((char *)&v12 + 1sub_1004C2140(qword_100A19B68, 0) = a3;
    HIWORD(v12) = 2080;
    uint64_t v13 = v8;
    __int16 v14 = 2048;
    uint64_t v15 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "RFCOMM service attribute response: more %d, status %{bluetooth:OI_STATUS}u, state %s RFCOMM service size %lu", (uint8_t *)&v12, 0x22u);
  }
  if (a3)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_ERROR)) {
      sub_100770724();
    }
    *(_DWORD *)(qword_100A19B68 + 128) = 1;
    sub_1004C35E0();
  }
  else if ((*a1 & 0xFE) == 6)
  {
    if (*(void *)(qword_100A19B68 + 40))
    {
      long long v12 = *(_OWORD *)(*(void *)(*(void *)(qword_100A19B68 + 8)
                                  + ((*(void *)(qword_100A19B68 + 32) >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * *(void *)(qword_100A19B68 + 32));
      *(_DWORD *)(qword_100A19B68 + 144) = -1;
      sub_1004C519C(a1);
      uint64_t v10 = (int64x2_t *)qword_100A19B68;
      if (*(_DWORD *)(qword_100A19B68 + 144) != -1)
      {
        sub_10048AFE4(*(void *)(qword_100A19B68 + 112), (uint64_t)&v12, (unsigned __int16)*(_DWORD *)(qword_100A19B68 + 144));
        uint64_t v10 = (int64x2_t *)qword_100A19B68;
      }
      void v10[2] = vaddq_s64(v10[2], (int64x2_t)xmmword_1007BB7F0);
      uint64_t v11 = sub_10042CD58((uint64_t)v10, 1);
      sub_1004C531C(v11);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_ERROR))
  {
    sub_100770338();
  }
}

void sub_1004C5A6C(id a1)
{
  char v1 = 0;
  sub_10001B8E0(&v1);
  sub_1004C26C0();
  sub_10001B8AC(&v1);
}

void sub_1004C5AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_1004C5ABC(id a1)
{
  char v1 = 0;
  sub_10001B8E0(&v1);
  sub_1004C26C0();
  sub_10001B8AC(&v1);
}

void sub_1004C5AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_1004C5B0C(uint64_t a1, char a2)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, (uint64_t)&unk_100A19BA0);
  byte_1009FB928 = a2;
  sub_10003AFE8((uint64_t)v4);
  return sub_10003AFB4((uint64_t)v4);
}

void sub_1004C5B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_1004C5B74()
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, (uint64_t)&unk_100A19B28);
  if (qword_100A19B68)
  {
    int v0 = *(_DWORD *)(qword_100A19B68 + 132);
    BOOL v2 = v0 != 10 && v0 != 0;
  }
  else
  {
    BOOL v2 = 0;
  }
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_1004C5BDC(uint64_t a1, uint64_t a2)
{
  v19[0] = 0;
  v19[1] = 0;
  sub_10003AED0((uint64_t)v19, (uint64_t)&unk_100A19B28);
  if (qword_100A19B68)
  {
    uint64_t v3 = *(void *)(qword_100A19B68 + 112);
    if (v3)
    {
      int v4 = *(_DWORD *)(v3 + 128);
      int v5 = *(unsigned __int16 *)(v3 + 132);
      if (v4 == *(_DWORD *)(a2 + 128) && v5 == *(unsigned __int16 *)(a2 + 132))
      {
LABEL_22:
        uint64_t v15 = 1;
        goto LABEL_23;
      }
    }
  }
  if (*((void *)&xmmword_100A19B90 + 1))
  {
    long long v18 = 0u;
    memset(v17, 0, sizeof(v17));
    sub_1004C7528((uint64_t)v17, &qword_100A19B70);
    uint64_t v7 = *((void *)&v18 + 1);
    if (*((void *)&v18 + 1))
    {
      uint64_t v8 = (void **)*((void *)&v17[0] + 1);
      unint64_t v9 = v18;
      while (1)
      {
        uint64_t v10 = (*(void **)((char *)v8 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)))[v9 & 0x1FF];
        if (v10)
        {
          uint64_t v11 = *(void *)(v10 + 112);
          if (v11)
          {
            int v12 = *(_DWORD *)(v11 + 128);
            int v13 = *(unsigned __int16 *)(v11 + 132);
            if (v12 == *(_DWORD *)(a2 + 128) && v13 == *(unsigned __int16 *)(a2 + 132)) {
              break;
            }
          }
        }
        --v7;
        *(void *)&long long v18 = ++v9;
        *((void *)&v18 + 1) = v7;
        if (v9 >= 0x400)
        {
          operator delete(*v8);
          uint64_t v8 = (void **)(*((void *)&v17[0] + 1) + 8);
          unint64_t v9 = v18 - 512;
          *((void *)&v17[0] + 1) += 8;
          *(void *)&long long v18 = v18 - 512;
          uint64_t v7 = *((void *)&v18 + 1);
        }
        if (!v7) {
          goto LABEL_19;
        }
      }
      sub_1002B5410(v17);
      goto LABEL_22;
    }
LABEL_19:
    sub_1002B5410(v17);
  }
  uint64_t v15 = 0;
LABEL_23:
  sub_10003AFB4((uint64_t)v19);
  return v15;
}

void sub_1004C5D20(_Unwind_Exception *a1)
{
  sub_10003AFB4(v1 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_1004C5D34(uint64_t a1, int a2)
{
  uint64_t v4 = qword_100A19B68;
  int v5 = qword_100A19EB0;
  if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 141558531;
    *(void *)&uint8_t buf[4] = 1752392040;
    *(_WORD *)&unsigned char buf[12] = 1041;
    *(_DWORD *)&buf[14] = 6;
    *(_WORD *)&unsigned char buf[18] = 2097;
    *(void *)&buf[20] = a1;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Incoming SDP request from %{private,bluetooth:BD_ADDR,mask.hash}.6P", buf, 0x1Cu);
  }
  if (v4
    && (uint64_t v6 = *(void *)(v4 + 112)) != 0
    && ((v7 = *(_DWORD *)(v6 + 128), int v8 = *(unsigned __int16 *)(v6 + 132), v7 == *(_DWORD *)a1)
      ? (BOOL v9 = v8 == *(unsigned __int16 *)(a1 + 4))
      : (BOOL v9 = 0),
        v9))
  {
    long long v18 = qword_100A19EB0;
    if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 141558531;
      *(void *)&uint8_t buf[4] = 1752392040;
      *(_WORD *)&unsigned char buf[12] = 1041;
      *(_DWORD *)&buf[14] = 6;
      *(_WORD *)&unsigned char buf[18] = 2097;
      *(void *)&buf[20] = a1;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Already have outgoing SDP with %{private,bluetooth:BD_ADDR,mask.hash}.6P", buf, 0x1Cu);
    }
  }
  else
  {
    if (!byte_100A132C8)
    {
      if (qword_1009F7F00 != -1) {
        dispatch_once(&qword_1009F7F00, &stru_1009B1298);
      }
      *(_DWORD *)long long buf = *(_DWORD *)a1;
      *(_WORD *)&uint8_t buf[4] = *(_WORD *)(a1 + 4);
      uint64_t v13 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)buf, 0);
      uint64_t v14 = v13;
      if (v13)
      {
        if (sub_10048442C(v13))
        {
          uint64_t v15 = qword_100A19EB0;
          if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 141558787;
            *(void *)&uint8_t buf[4] = 1752392040;
            *(_WORD *)&unsigned char buf[12] = 1041;
            *(_DWORD *)&buf[14] = 6;
            *(_WORD *)&unsigned char buf[18] = 2097;
            *(void *)&buf[20] = a1;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = a2;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "stalling incoming SDP request from %{private,bluetooth:BD_ADDR,mask.hash}.6P for cid: %d. Initiating an outgoing SDP request for SDP Mirroring", buf, 0x22u);
          }
          sub_10047F380(v14, 1);
          sub_10047F410(v14, a2);
          if (qword_1009FB698 != -1) {
            dispatch_once(&qword_1009FB698, &stru_1009B12B8);
          }
          sub_1004C8250(qword_1009FB690, v14);
        }
        uint64_t v51 = 0;
        if (!sub_10017E2D4(v14 + 128, &v51))
        {
          uint64_t v20 = qword_100A19EB0;
          if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 141558787;
            *(void *)&uint8_t buf[4] = 1752392040;
            *(_WORD *)&unsigned char buf[12] = 1041;
            *(_DWORD *)&buf[14] = 6;
            *(_WORD *)&unsigned char buf[18] = 2097;
            *(void *)&buf[20] = a1;
            *(_WORD *)&buf[28] = 2048;
            *(void *)&buf[30] = v51;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "No need to stall incoming SDP request from %{private,bluetooth:BD_ADDR,mask.hash}.6P with handle %p", buf, 0x26u);
          }
          uint64_t v21 = v51;
          __int16 v22 = sub_100481C60(v14);
          __int16 v23 = sub_100481DA4(v14);
          sub_10024F074(v21, 4382, v22, v23);
          if (sub_1004797D4(v14))
          {
            uint64_t v24 = qword_100A19EB0;
            if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
            {
              sub_100475F84(v14, (uint64_t)buf);
              long long v25 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
              *(_DWORD *)__n128 v52 = 136315138;
              *(void *)&v52[4] = v25;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Forcing legacy AVRCP SDP for device %s", v52, 0xCu);
              if ((char)buf[23] < 0) {
                operator delete(*(void **)buf);
              }
            }
            sub_10024F074(v51, 4364, 260, 0);
            sub_10024F074(v51, 4367, 260, 0);
          }
          else
          {
            uint64_t v26 = v51;
            __int16 v27 = sub_100481A54(v14);
            __int16 v28 = sub_100481B98(v14);
            sub_10024F074(v26, 4364, v27, v28);
            uint64_t v29 = v51;
            __int16 v30 = sub_100481848(v14);
            __int16 v31 = sub_10048198C(v14);
            sub_10024F074(v29, 4367, v30, v31);
          }
          uint64_t v64 = 0;
          long long v63 = 0u;
          memset(v62, 0, sizeof(v62));
          long long v60 = 0u;
          *(_OWORD *)std::string __p = 0u;
          *(_OWORD *)uint64_t v59 = 0u;
          memset(buf, 0, sizeof(buf));
          sub_1006161E0((uint64_t)&buf[1]);
          unsigned char buf[18] = 0;
          buf[20] = 0;
          BYTE2(v59[0]) = 0;
          BYTE4(v59[0]) = 0;
          DWORD1(v62[1]) = 0;
          memset(&buf[24], 0, 24);
          LOBYTE(v59[0]) = 0;
          long long v60 = 0uLL;
          v59[1] = 0;
          LOBYTE(__p[0]) = 0;
          memset(v62, 0, 19);
          __p[1] = 0;
          BYTE8(v62[1]) = 1;
          BYTE2(v64) = 0;
          *(void *)((char *)&v62[1] + 14) = 0;
          *(void *)((char *)&v62[1] + 9) = 0;
          long long v63 = 0uLL;
          *((void *)&v62[2] + 1) = 0;
          LOBYTE(v64) = 0;
          BOOL v32 = sub_1004783B8(v14, (uint64_t)buf);
          if (BYTE1(v63)) {
            BOOL v33 = v32;
          }
          else {
            BOOL v33 = 0;
          }
          if (v33 || sub_1004795B0(v14))
          {
            long long v34 = qword_100A19EB0;
            if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
            {
              sub_100475F84(v14, (uint64_t)v52);
              long long v35 = v55 >= 0 ? v52 : *(unsigned char **)v52;
              *(_DWORD *)int v56 = 136315138;
              v57 = v35;
              _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Forcing legacy PBAP SDP for device %s", v56, 0xCu);
              if (v55 < 0) {
                operator delete(*(void **)v52);
              }
            }
            sub_10024F074(v51, 4398, 256, 0);
          }
          BOOL v36 = sub_1004783B8(v14, (uint64_t)buf);
          if (BYTE2(v63)) {
            BOOL v37 = v36;
          }
          else {
            BOOL v37 = 0;
          }
          if (v37)
          {
            long long v38 = qword_100A19EB0;
            if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
            {
              sub_100475F84(v14, (uint64_t)v52);
              long long v39 = v55 >= 0 ? v52 : *(unsigned char **)v52;
              *(_DWORD *)int v56 = 136315138;
              v57 = v39;
              _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Forcing legacy MAP SDP for device %s", v56, 0xCu);
              if (v55 < 0) {
                operator delete(*(void **)v52);
              }
            }
            sub_10024F074(v51, 4404, 257, 0);
          }
          if (SHIBYTE(v62[0]) < 0) {
            operator delete(__p[1]);
          }
          if (SHIBYTE(v60) < 0) {
            operator delete(v59[1]);
          }
          if ((char)buf[47] < 0) {
            operator delete(*(void **)&buf[24]);
          }
          nullsub_95(&buf[1]);
        }
        long long v40 = qword_100A19EB0;
        if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
        {
          int v41 = *(unsigned __int8 *)(v14 + 976);
          *(_DWORD *)long long buf = 136315907;
          if (v41) {
            long long v42 = "true";
          }
          else {
            long long v42 = "false";
          }
          *(void *)&uint8_t buf[4] = v42;
          *(_WORD *)&unsigned char buf[12] = 2160;
          *(void *)&buf[14] = 1752392040;
          *(_WORD *)&unsigned char buf[22] = 1041;
          *(_DWORD *)&uint8_t buf[24] = 6;
          *(_WORD *)&buf[28] = 2097;
          *(void *)&buf[30] = a1;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Wireless Splitter set guest device not in contacts to '%s ' into the remote SDP record for %{private,bluetooth:BD_ADDR,mask.hash}.6P ", buf, 0x26u);
        }
        sub_10024ED84(v51, *(unsigned char *)(v14 + 976));
        int v43 = sub_100478B2C(v14, 12);
        uint64_t v44 = qword_100A19EB0;
        if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v45 = v43 ? "false" : "true";
          sub_100475F84(v14, (uint64_t)buf);
          long long v46 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
          *(_DWORD *)__n128 v52 = 136315394;
          *(void *)&v52[4] = v45;
          __int16 v53 = 2080;
          char v54 = v46;
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "Setting requiresLegacyPnPInformationRecord to %s for device %s", v52, 0x16u);
          if ((char)buf[23] < 0) {
            operator delete(*(void **)buf);
          }
        }
        sub_10024EEFC(v51, v43 ^ 1);
      }
    }
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009B12D8);
    }
    sub_1004E7804((uint64_t)off_1009F8068, a1);
    int v10 = sub_100181E20(a1);
    *(_DWORD *)__n128 v52 = *(_DWORD *)a1;
    *(_WORD *)&v52[4] = *(_WORD *)(a1 + 4);
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009B1298);
    }
    *(_DWORD *)long long buf = *(_DWORD *)v52;
    *(_WORD *)&uint8_t buf[4] = *(_WORD *)&v52[4];
    uint64_t v11 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)buf, 1);
    if ((v10 & 0x1FFC) == 0x41C || (v10 & 0x1FFC) == 0x20C)
    {
      int v12 = qword_100A19EB0;
      if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 141558531;
        *(void *)&uint8_t buf[4] = 1752392040;
        *(_WORD *)&unsigned char buf[12] = 1041;
        *(_DWORD *)&buf[14] = 6;
        *(_WORD *)&unsigned char buf[18] = 2097;
        *(void *)&buf[20] = a1;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Received incoming SDP connection from possible iPhone/iPod %{private,bluetooth:BD_ADDR,mask.hash}.6P", buf, 0x1Cu);
      }
      if (qword_1009FB698 != -1) {
        dispatch_once(&qword_1009FB698, &stru_1009B12B8);
      }
      sub_1004C87B0();
    }
    uint64_t v16 = v11;
    uint64_t v17 = sub_1004AF8EC();
    v47[0] = _NSConcreteStackBlock;
    v47[1] = 3221225472;
    _OWORD v47[2] = sub_1004C672C;
    v47[3] = &unk_1009988A0;
    v47[4] = v16;
    int v48 = v10;
    int v49 = *(_DWORD *)v52;
    __int16 v50 = *(_WORD *)&v52[4];
    sub_100013018(v17, v47);
  }
  return 845;
}

void sub_1004C6708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_100276384((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004C672C(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009B1298);
    }
    BOOL v2 = off_1009F7EF8;
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(unsigned int *)(a1 + 40);
    sub_1004AA7FC((uint64_t)v2, v3, v4);
  }
  else
  {
    int v5 = qword_100A19EB0;
    if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_ERROR)) {
      sub_10077078C(a1, v5);
    }
  }
}

void sub_1004C67D4(id a1)
{
}

void sub_1004C6818()
{
}

void sub_1004C683C(id a1)
{
}

void sub_1004C6880()
{
}

void sub_1004C68A4(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1004C692C(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_1004C692C(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    BOOL v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      long long v34 = (char *)sub_1000405F8(v5, v33);
      long long v35 = &v34[8 * (v33 >> 2)];
      BOOL v37 = &v34[8 * v36];
      long long v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      BOOL v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_1002B4FA4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1002B50BC((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    BOOL v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      long long v34 = (char *)sub_1000405F8((uint64_t)(a1 + 3), v46);
      long long v35 = &v34[8 * (v46 >> 2)];
      BOOL v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      int v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  int v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000405F8((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  __int16 v53 = operator new(0x1000uLL);
  sub_1002B51DC(&v54, &v53);
  __int16 v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002B52F4((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1004C6BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1004C6C44(id a1)
{
}

void sub_1004C6C88()
{
}

void *sub_1004C6CAC(void *a1, void *a2)
{
  if (a1 != a2)
  {
    unint64_t v4 = a2[4];
    uint64_t v5 = a2[1];
    uint64_t v6 = a2[2];
    uint64_t v7 = (char **)(v5 + 8 * (v4 >> 9));
    if (v6 == v5)
    {
      unint64_t v8 = 0;
      uint64_t v11 = 0;
      uint64_t v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 9));
    }
    else
    {
      unint64_t v8 = &(*v7)[8 * (v4 & 0x1FF)];
      unint64_t v9 = a2[5] + v4;
      uint64_t v10 = (char *)(v5 + 8 * (v9 >> 9));
      uint64_t v11 = (char *)(*(void *)v10 + 8 * (v9 & 0x1FF));
    }
    sub_1004C6D40(a1, v7, v8, v10, v11);
  }
  return a1;
}

void *sub_1004C6D40(void *a1, char **a2, char *a3, char *a4, char *a5)
{
  if (a5 == a3) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = ((uint64_t)&a5[-*(void *)a4] >> 3) + ((a4 - (char *)a2) << 6) - ((a3 - *a2) >> 3);
  }
  return sub_1004C6D74(a1, a2, a3, v5);
}

void *sub_1004C6D74(void *a1, char **a2, char *a3, unint64_t a4)
{
  int64_t v20 = a2;
  uint64_t v21 = a3;
  unint64_t v7 = a1[5];
  if (v7 >= a4)
  {
    uint64_t v14 = a1[1];
    uint64_t v15 = (char *)(v14 + 8 * (a1[4] >> 9));
    if (a1[2] == v14) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = *(void *)v15 + 8 * (a1[4] & 0x1FFLL);
    }
    v22[0] = a2;
    v22[1] = a3;
    uint64_t v18 = (char **)sub_1002B4F40((uint64_t)v22, a4);
    uint64_t v23 = v15;
    uint64_t v24 = v16;
    sub_1002B6DE4(a2, a3, v18, v19, (uint64_t)&v23);
    return (void *)sub_1002B6CE8((uint64_t)a1, v23, v24);
  }
  else
  {
    unint64_t v9 = (char **)sub_1002B4F40((uint64_t)&v20, v7);
    uint64_t v10 = (uint64_t *)v8;
    uint64_t v11 = a1[1];
    if (a1[2] == v11) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = *(void *)(v11 + 8 * (a1[4] >> 9)) + 8 * (a1[4] & 0x1FFLL);
    }
    uint64_t v23 = (char *)(v11 + 8 * (a1[4] >> 9));
    uint64_t v24 = v12;
    sub_1002B6DE4(v20, v21, v9, v8, (uint64_t)&v23);
    return sub_1004C6E9C(a1, v9, v10, a4 - a1[5]);
  }
}

void *sub_1004C6E9C(void *a1, void *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  if (v9 == v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = ((v9 - v8) << 6) - 1;
  }
  unint64_t v11 = a1[5] + a1[4];
  unint64_t v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_1004C6FD0(a1, a4 - v12);
    uint64_t v8 = a1[1];
    uint64_t v9 = a1[2];
    unint64_t v11 = a1[4] + a1[5];
  }
  uint64_t v13 = (void *)(v8 + 8 * (v11 >> 9));
  if (v9 == v8) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = *v13 + 8 * (v11 & 0x1FF);
  }
  v23[0] = v8 + 8 * (v11 >> 9);
  v23[1] = v14;
  uint64_t result = sub_1002B4F40((uint64_t)v23, a4);
  if (v14 != v16)
  {
    uint64_t v17 = a1[5];
    do
    {
      if (v13 == result) {
        uint64_t v18 = v16;
      }
      else {
        uint64_t v18 = *v13 + 4096;
      }
      if (v14 == v18)
      {
        uint64_t v18 = v14;
      }
      else
      {
        uint64_t v19 = (void *)v14;
        do
        {
          uint64_t v20 = *a3++;
          *v19++ = v20;
          if ((uint64_t *)((char *)a3 - *a2) == (uint64_t *)4096)
          {
            uint64_t v21 = (uint64_t *)a2[1];
            ++a2;
            a3 = v21;
          }
        }
        while (v19 != (void *)v18);
      }
      v17 += (v18 - v14) >> 3;
      if (v13 == result) {
        break;
      }
      uint64_t v22 = v13[1];
      ++v13;
      uint64_t v14 = v22;
    }
    while (v22 != v16);
    a1[5] = v17;
  }
  return result;
}

void sub_1004C6FD0(void *a1, unint64_t a2)
{
  BOOL v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((v5 & 0x1FF) != 0) {
    unint64_t v6 = (v5 >> 9) + 1;
  }
  else {
    unint64_t v6 = v5 >> 9;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 >> 9) {
    unint64_t v8 = v7 >> 9;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 9)
  {
    for (a1[4] = v7 - (v8 << 9); v8; --v8)
    {
      uint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      uint64_t v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          uint64_t v29 = (char *)sub_1000405F8((uint64_t)(a1 + 3), v28);
          long long v31 = &v29[8 * (v28 >> 2)];
          long long v32 = (uint64_t *)a1[1];
          BOOL v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            BOOL v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v34 = 8 * (v33 >> 3);
            long long v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)long long v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          BOOL v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            BOOL v3 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          unint64_t v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            BOOL v3 = (char *)a1[1];
          }
          __int16 v27 = &v3[-8 * (v24 >> 1)];
          BOOL v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(void *)BOOL v3 = v18;
      BOOL v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_1002B4FA4(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_1002B50BC((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8) {
            uint64_t v64 = 511;
          }
          else {
            uint64_t v64 = 512;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }
        unint64_t v8 = v6;
      }
      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 9);
      if (v8)
      {
        char v66 = (char *)a1[2];
        do
        {
          char v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          char v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1) {
                unint64_t v78 = 1;
              }
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              long long v79 = (char *)sub_1000405F8((uint64_t)(a1 + 3), v78);
              __int16 v81 = &v79[8 * (v78 >> 2)];
              int v82 = (uint64_t *)a1[1];
              char v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                char v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v84 = 8 * (v83 >> 3);
                __int16 v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)__int16 v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                char v66 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              int v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                char v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              char v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(void *)char v66 = v69;
          char v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13) {
        uint64_t v15 = (char *)sub_1000405F8((uint64_t)(a1 + 3), v13);
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v38 = v8 << 9;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&long long v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0x1000uLL);
        sub_1002B51DC(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        uint64_t v39 = (void *)a1[1];
        uint64_t v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              uint64_t v49 = (char *)sub_1000405F8((uint64_t)v91, v48);
              uint64_t v51 = (uint64_t *)__p[1];
              uint64_t v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                uint64_t v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v53 = 8 * (v52 >> 3);
                long long v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)long long v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              int v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&long long v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                uint64_t v40 = (char *)v90;
              }
            }
            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              uint64_t v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                uint64_t v40 = (char *)__p[1];
              }
              uint64_t v47 = &v40[-8 * (v44 >> 1)];
              uint64_t v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&long long v90 = &v45[v46];
            }
          }
          *(void *)uint64_t v40 = *v39;
          uint64_t v40 = (char *)(v90 + 8);
          *(void *)&long long v90 = v90 + 8;
          uint64_t v39 = (void *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (void *)a1[2];
      uint64_t v58 = -7 - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1002B52F4((uint64_t)__p, v57);
      }
      uint64_t v59 = (char *)*a1;
      long long v60 = *(_OWORD *)__p;
      long long v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      long long v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      long long v90 = v62;
      a1[4] -= v38;
      if (v57 != (void *)v62) {
        *(void *)&long long v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }
}

void sub_1004C74E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004C7528(uint64_t a1, void *a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  unint64_t v4 = a2[4];
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  unint64_t v7 = (char *)(v5 + 8 * (v4 >> 9));
  if (v6 == v5)
  {
    unint64_t v8 = 0;
    uint64_t v11 = 0;
    uint64_t v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 9));
  }
  else
  {
    unint64_t v8 = (uint64_t *)(*(void *)v7 + 8 * (v4 & 0x1FF));
    unint64_t v9 = a2[5] + v4;
    uint64_t v10 = (char *)(v5 + 8 * (v9 >> 9));
    uint64_t v11 = (uint64_t *)(*(void *)v10 + 8 * (v9 & 0x1FF));
  }
  sub_1004C75D4((void *)a1, v7, v8, v10, v11);
  return a1;
}

void sub_1004C75C0(_Unwind_Exception *a1)
{
  sub_1002B303C(v1);
  _Unwind_Resume(a1);
}

void *sub_1004C75D4(void *a1, char *a2, uint64_t *a3, char *a4, uint64_t *a5)
{
  if (a5 == a3) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = (((uint64_t)a5 - *(void *)a4) >> 3) + ((a4 - a2) << 6) - (((uint64_t)a3 - *(void *)a2) >> 3);
  }
  return sub_1004C6E9C(a1, a2, a3, v5);
}

void sub_1004C7608()
{
  sub_100052DA8(&unk_100A19B28);
  __cxa_atexit((void (*)(void *))sub_100052DA4, &unk_100A19B28, (void *)&_mh_execute_header);
  *(_OWORD *)&qword_100A19B70 = 0u;
  unk_100A19B80 = 0u;
  xmmword_100A19B90 = 0u;
  __cxa_atexit((void (*)(void *))sub_1004C189C, &qword_100A19B70, (void *)&_mh_execute_header);
  sub_100052DA8(&unk_100A19BA0);
  __cxa_atexit((void (*)(void *))sub_100052DA4, &unk_100A19BA0, (void *)&_mh_execute_header);
  qword_100A13298 = 0;
  qword_100A132A0 = 0;
  qword_100A13290 = 0;
  __cxa_atexit((void (*)(void *))sub_1004C18A0, &qword_100A13290, (void *)&_mh_execute_header);
  qword_100A132B8 = 0;
  qword_100A132B0 = 0;
  qword_100A132A8 = (uint64_t)&qword_100A132B0;
  __cxa_atexit((void (*)(void *))sub_1004C18D4, &qword_100A132A8, (void *)&_mh_execute_header);
}

void *sub_1004C7724(void *a1)
{
  *a1 = off_1009B1430;
  sub_100052DA8(a1 + 1);
  a1[9] = 0;
  return a1;
}

void *sub_1004C776C(void *a1)
{
  *a1 = off_1009B1430;
  unint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "SDP Manager deconstructor", v5, 2u);
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B1530);
  }
  sub_100052718((uint64_t)off_1009F8068 + 64, (uint64_t)a1);
  uint64_t v3 = a1[9];
  if (v3)
  {
    sub_1004AFF30(v3);
    operator delete();
  }
  sub_100052DA4(a1 + 1);
  return a1;
}

void sub_1004C785C(_Unwind_Exception *a1)
{
  sub_100052DA4(v1 + 8);
  _Unwind_Resume(a1);
}

void sub_1004C7874(void *a1)
{
  sub_1004C776C(a1);

  operator delete();
}

void sub_1004C78AC()
{
}

void sub_1004C7940()
{
}

void sub_1004C7964(uint64_t a1)
{
  unint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v3[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "SDP Manager stackDidStart", (uint8_t *)v3, 2u);
  }
  v3[0] = 0;
  v3[1] = 0;
  sub_10003AED0((uint64_t)v3, a1 + 8);
  sub_1004AF98C(*(void *)(a1 + 72), QOS_CLASS_USER_INITIATED);
  *(unsigned char *)(a1 + 8sub_1004C2140(qword_100A19B68, 0) = 1;
  operator new();
}

void sub_1004C7A50()
{
}

void sub_1004C7A88(uint64_t a1)
{
  unint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "SdpManager::stackWillStop enter", buf, 2u);
  }
  *(void *)long long buf = 0;
  uint64_t v4 = 0;
  sub_10003AED0((uint64_t)buf, a1 + 8);
  sub_1004AFEC4(*(void *)(a1 + 72));
  *(unsigned char *)(a1 + 8sub_1004C2140(qword_100A19B68, 0) = 0;
  operator new();
}

void sub_1004C7BB0()
{
}

uint64_t sub_1004C7BE8(uint64_t a1, unsigned char *a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 8);
  sub_1004B022C(*(void *)(a1 + 72), a2);
  return sub_10003AFB4((uint64_t)v5);
}

void sub_1004C7C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1004C7C4C()
{
}

void sub_1004C7D0C()
{
}

void sub_1004C7D30(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int8 **)(a2 + 8);
  uint64_t v3 = qword_100A19E50;
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18((uint64_t)v2, __p);
      unint64_t v5 = v27 >= 0 ? __p : (void **)__p[0];
      unsigned int v6 = *(_DWORD *)(a2 + 24);
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = v5;
      __int16 v23 = 1024;
      unsigned int v24 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "SDP query has completed for device %{public}s with status %d", buf, 0x12u);
      if (v27 < 0) {
        operator delete(__p[0]);
      }
    }
    int v21 = 0;
    sub_100476250((uint64_t)v2, &v21);
    if (!*(_DWORD *)(a2 + 24))
    {
      sub_10048BB94((uint64_t)v2, 1);
      if (sub_100040630(v2))
      {
        unint64_t v7 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          sub_100474E18((uint64_t)v2, __p);
          unint64_t v8 = v27 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = v8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Identification - SDP complete. Checking if we need to generate hash for device %{public}s", buf, 0xCu);
          if (v27 < 0) {
            operator delete(__p[0]);
          }
        }
        sub_100477298((uint64_t)v2);
        sub_100484594((uint64_t)v2);
      }
    }
    char v20 = 0;
    uint64_t v9 = sub_100017768();
    sub_10004191C(__p, "SDPMirroring");
    sub_10004191C(buf, "DisableSDPMirroring");
    (*(void (**)(uint64_t, void **, unsigned char *, char *))(*(void *)v9 + 72))(v9, __p, buf, &v20);
    if (v25 < 0) {
      operator delete(*(void **)buf);
    }
    if (v27 < 0) {
      operator delete(__p[0]);
    }
    char v19 = 0;
    sub_10001B8E0(&v19);
    if (sub_10047F3C8((uint64_t)v2))
    {
      unsigned int v10 = sub_10047F458((uint64_t)v2);
      uint64_t v11 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18((uint64_t)v2, __p);
        unint64_t v12 = v27 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = v12;
        __int16 v23 = 1024;
        unsigned int v24 = v10;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "We have a stalled incoming SDP request from device %{public}s with cid: %d. Responding to stalled request", buf, 0x12u);
        if (v27 < 0) {
          operator delete(__p[0]);
        }
      }
      sub_100250988(*(_DWORD *)(a2 + 24) == 0, v10);
      sub_10047F380((uint64_t)v2, 0);
      sub_10047F410((uint64_t)v2, 0);
    }
    int v13 = sub_100181EA0((uint64_t)(v2 + 128), v21);
    if (v13)
    {
      unint64_t v14 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(__p[0]) = 67109120;
        HIDWORD(__p[0]) = v13;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Set Remote Device class failed with %{bluetooth:OI_STATUS}u", (uint8_t *)__p, 8u);
      }
    }
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009B1530);
    }
    sub_1004E7804((uint64_t)off_1009F8068, (uint64_t)(v2 + 128));
    sub_10001B910(&v19);
    if (!v20) {
      sub_100484474((uint64_t)v2, 0);
    }
    uint64_t v15 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v15 + 384))(v15))
    {
      int v16 = sub_100475178((uint64_t)v2);
      uint64_t v17 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(__p[0]) = 67109120;
        HIDWORD(__p[0]) = v16;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Number of services %d found using PSM/RFCOMM", (uint8_t *)__p, 8u);
      }
    }
    uint64_t v18 = *(void *)(a2 + 16);
    if (v18) {
      (*(void (**)(uint64_t, void, void))(*(void *)v18 + 16))(v18, *(void *)(a2 + 8), *(unsigned int *)(a2 + 24));
    }
    (*(void (**)(uint64_t))(*(void *)a2 + 8))(a2);
    sub_10001B8AC(&v19);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT))
  {
    sub_10077082C(v3);
  }
}

void sub_1004C81F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
}

void sub_1004C8250(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a2, __p);
    if (v6 >= 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136446210;
    unint64_t v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Running SDP on device %{public}s", buf, 0xCu);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }
  operator new();
}

void sub_1004C83E0()
{
}

void sub_1004C8468()
{
}

void sub_1004C848C()
{
}

void sub_1004C8500()
{
}

void sub_1004C8524()
{
}

void sub_1004C8590()
{
}

void sub_1004C85B4()
{
}

void sub_1004C8628()
{
}

void sub_1004C864C()
{
  if (qword_1009FB698 != -1) {
    dispatch_once(&qword_1009FB698, &stru_1009B1550);
  }

  sub_1004C7C4C();
}

void sub_1004C86A8(uint64_t a1)
{
  if (qword_1009FB698 != -1) {
    dispatch_once(&qword_1009FB698, &stru_1009B1550);
  }
  uint64_t v2 = *(void *)(a1 + 16);

  sub_1004C7D30(a1, v2);
}

void sub_1004C8704(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)(a1 + 24) = a3;
  if (qword_1009FB698 != -1) {
    dispatch_once(&qword_1009FB698, &stru_1009B1550);
  }
  operator new();
}

void sub_1004C87B0()
{
}

unsigned char *sub_1004C882C(uint64_t a1)
{
  char v9 = 0;
  sub_10001B8E0(&v9);
  uint64_t v2 = sub_100181E20(*(void *)(a1 + 16));
  sub_10001B910(&v9);
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009B1570);
  }
  uint64_t v3 = *(int **)(a1 + 16);
  __int16 v4 = *((_WORD *)v3 + 2);
  int v7 = *v3;
  __int16 v8 = v4;
  uint64_t v5 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v7, 1);
  if (v5)
  {
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009B1570);
    }
    sub_1004AA7FC((uint64_t)off_1009F7EF8, v5, v2);
    if (!sub_10047B300(v5))
    {
      *(unsigned char *)(v5 + 784) = 1;
      if (qword_1009F8090 != -1) {
        dispatch_once(&qword_1009F8090, &stru_1009B1590);
      }
      sub_1004D9218((uint64_t)off_1009F8088, v5);
      operator new();
    }
  }
  return sub_10001B8AC(&v9);
}

void sub_1004C8A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_1004C8A7C()
{
}

void sub_1004C8A94()
{
}

void sub_1004C8AAC()
{
}

void sub_1004C8AC4()
{
}

void sub_1004C8AD8(id a1)
{
}

void sub_1004C8B1C()
{
}

void sub_1004C8B40(id a1)
{
}

void sub_1004C8BA4()
{
}

void sub_1004C8BC8(id a1)
{
}

void sub_1004C8C0C()
{
}

void sub_1004C8C30(id a1)
{
}

void sub_1004C8C74()
{
}

void sub_1004C8C98(id a1)
{
}

void sub_1004C8CDC()
{
}

uint64_t sub_1004C8D00(uint64_t a1)
{
  return a1;
}

uint64_t sub_1004C8D2C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1004C8D58(uint64_t a1)
{
  return a1;
}

void **sub_1004C8D84(void **a1)
{
  uint64_t v3 = a1;
  sub_1004C9204(&v3);
  return a1;
}

uint64_t sub_1004C8DBC(uint64_t a1, int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  __int16 v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 8 * a3;
    do
    {
      sub_1004C8E3C((uint64_t **)a1, v4, a2, (uint64_t *)a2);
      a2 += 2;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_1004C8E24(_Unwind_Exception *a1)
{
  sub_1000486F0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1004C8E3C(uint64_t **a1, uint64_t *a2, int *a3, uint64_t *a4)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v6 = sub_1004C8EC8(a1, a2, &v11, &v10, a3);
  int v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    __int16 v8 = (uint64_t **)v6;
    int v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = *a4;
    sub_100036CA0(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_1004C8EC8(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (int v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    __int16 v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      char v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        char v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      int v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        int v13 = v10;
      }
      while (v14);
    }
    int v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = (uint64_t *)v16;
          int v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      uint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    unint64_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      unint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    char v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      char v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          int v21 = (uint64_t *)v20;
          int v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      int v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t sub_1004C9070(uint64_t a1, int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  __int16 v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 8 * a3;
    do
    {
      sub_1004C8E3C((uint64_t **)a1, v4, a2, (uint64_t *)a2);
      a2 += 2;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_1004C90D8(_Unwind_Exception *a1)
{
  sub_1000486F0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_1004C90F0(uint64_t a1, int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  __int16 v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 8 * a3;
    do
    {
      sub_1004C8E3C((uint64_t **)a1, v4, a2, (uint64_t *)a2);
      a2 += 2;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_1004C9158(_Unwind_Exception *a1)
{
  sub_1000486F0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void *sub_1004C9170(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = result[1];
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a2 + v7;
      *(void *)(v4 + v7) = *(void *)(a2 + v7);
      uint64_t result = sub_1002EACE8((void *)(v4 + v7 + 8), a2 + v7 + 8);
      *(_DWORD *)(v4 + v7 + 32) = *(_DWORD *)(a2 + v7 + 32);
      v7 += 40;
    }
    while (v8 + 40 != a3);
    v4 += v7;
  }
  v3[1] = v4;
  return result;
}

void sub_1004C91FC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1004C9204(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_1004C9258((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_1004C9258(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 40)
  {
    uint64_t v4 = *(void **)(i - 32);
    if (v4)
    {
      *(void *)(i - 24) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void sub_1004C92A8()
{
  LODWORD(__dst[0]) = 0;
  WORD2(__dst[0]) = 1;
  DWORD2(__dst[0]) = 1;
  WORD6(__dst[0]) = 2;
  sub_1004C8DBC((uint64_t)&unk_100A19BE0, (int *)__dst, 2);
  __cxa_atexit((void (*)(void *))sub_1004C8D00, &unk_100A19BE0, (void *)&_mh_execute_header);
  __dst[0] = xmmword_1007BF0A0;
  __dst[1] = unk_1007BF0B0;
  *(void *)&__dst[2] = 0x57E00000004;
  sub_1004C9070((uint64_t)&unk_100A19BF8, (int *)__dst, 5);
  __cxa_atexit((void (*)(void *))sub_1004C8D2C, &unk_100A19BF8, (void *)&_mh_execute_header);
  memcpy(__dst, &unk_1007BF0C8, sizeof(__dst));
  sub_1004C90F0((uint64_t)&unk_100A19C10, (int *)__dst, 42);
  __cxa_atexit((void (*)(void *))sub_1004C8D58, &unk_100A19C10, (void *)&_mh_execute_header);
  memset(__dst, 0, 36);
  *((void *)&__dst[2] + 1) = 0x100000001;
  memset(&__dst[3], 0, 28);
  __dst[5] = 0x100000001uLL;
  __dst[6] = 0uLL;
  uint64_t v1 = operator new(0x10uLL);
  *((void *)&__dst[5] + 1) = v1;
  _OWORD *v1 = xmmword_1007BF040;
  *(void *)&__dst[6] = v1 + 1;
  *((void *)&__dst[6] + 1) = v1 + 1;
  LODWORD(__dst[7]) = 1;
  *(_OWORD *)((char *)&__dst[7] + 8) = 0u;
  *(_OWORD *)((char *)&__dst[8] + 8) = 0u;
  uint64_t v2 = operator new(0x30uLL);
  *((void *)&__dst[8] + 1) = v2 + 3;
  *(void *)&__dst[9] = v2 + 3;
  *uint64_t v2 = xmmword_1007BF218;
  v2[1] = unk_1007BF228;
  v2[2] = xmmword_1007BF238;
  *(void *)&__dst[8] = v2;
  DWORD2(__dst[9]) = 2;
  memset(&__dst[10], 0, 32);
  uint64_t v3 = operator new(0x38uLL);
  *(void *)&__dst[11] = v3 + 7;
  *((void *)&__dst[11] + 1) = v3 + 7;
  v3[6] = 0x1200000011;
  *(_OWORD *)uint64_t v3 = xmmword_1007BF248;
  *((_OWORD *)v3 + 1) = unk_1007BF258;
  *((_OWORD *)v3 + 2) = xmmword_1007BF268;
  *((void *)&__dst[10] + 1) = v3;
  LODWORD(__dst[12]) = 3;
  *((void *)&__dst[12] + 1) = 0x100000001;
  memset(&__dst[13], 0, 24);
  uint64_t v4 = operator new(0x38uLL);
  *((void *)&__dst[13] + 1) = v4 + 7;
  *(void *)&__dst[14] = v4 + 7;
  v4[6] = 0x1200000011;
  *(_OWORD *)uint64_t v4 = xmmword_1007BF248;
  *((_OWORD *)v4 + 1) = unk_1007BF258;
  *((_OWORD *)v4 + 2) = xmmword_1007BF268;
  *(void *)&__dst[13] = v4;
  DWORD2(__dst[14]) = 3;
  memset(&__dst[15], 0, 32);
  uint64_t v5 = operator new(0x20uLL);
  *(void *)&__dst[16] = v5 + 2;
  *((void *)&__dst[16] + 1) = v5 + 2;
  *uint64_t v5 = xmmword_1007BF280;
  v5[1] = unk_1007BF290;
  *((void *)&__dst[15] + 1) = v5;
  LODWORD(__dst[17]) = 4;
  *((void *)&__dst[17] + 1) = 0x100000001;
  memset(&__dst[18], 0, 24);
  uint64_t v6 = operator new(0x20uLL);
  *((void *)&__dst[18] + 1) = v6 + 2;
  *(void *)&__dst[19] = v6 + 2;
  *uint64_t v6 = xmmword_1007BF280;
  v6[1] = unk_1007BF290;
  *(void *)&__dst[18] = v6;
  DWORD2(__dst[19]) = 4;
  __dst[20] = 0u;
  long long v28 = 0u;
  uint64_t v7 = operator new(0x10uLL);
  *((void *)&__dst[20] + 1) = v7;
  _OWORD *v7 = xmmword_1007BF050;
  *(void *)&long long v28 = v7 + 1;
  *((void *)&v28 + 1) = v7 + 1;
  int v29 = 5;
  uint64_t v30 = 0x100000001;
  long long v32 = 0;
  uint64_t v33 = 0;
  long long v31 = 0;
  uint64_t v8 = operator new(0x10uLL);
  long long v31 = v8;
  *uint64_t v8 = xmmword_1007BF050;
  long long v32 = v8 + 1;
  uint64_t v33 = v8 + 1;
  int v34 = 5;
  long long v35 = 0u;
  long long v36 = 0u;
  char v9 = operator new(0x10uLL);
  *((void *)&v35 + 1) = v9;
  _OWORD *v9 = xmmword_1007BF060;
  *(void *)&long long v36 = v9 + 1;
  *((void *)&v36 + 1) = v9 + 1;
  int v37 = 6;
  uint64_t v38 = 0x100000001;
  uint64_t v40 = 0;
  int64_t v41 = 0;
  uint64_t v39 = 0;
  uint64_t v10 = operator new(0x10uLL);
  uint64_t v39 = v10;
  *uint64_t v10 = xmmword_1007BF060;
  uint64_t v40 = v10 + 1;
  int64_t v41 = v10 + 1;
  int v42 = 6;
  long long v43 = 0u;
  long long v44 = 0u;
  uint64_t v11 = operator new(0xCuLL);
  *(void *)&long long v44 = v11 + 3;
  *((void *)&v44 + 1) = v11 + 3;
  *(void *)uint64_t v11 = 0x1700000016;
  _OWORD v11[2] = 24;
  *((void *)&v43 + 1) = v11;
  int v45 = 7;
  long long v46 = 0u;
  long long v47 = 0u;
  unint64_t v12 = operator new(8uLL);
  *((void *)&v46 + 1) = v12;
  *unint64_t v12 = 0x1800000017;
  *((void *)&v47 + 1) = v12 + 1;
  *(void *)&long long v47 = v12 + 1;
  int v48 = 8;
  long long v49 = 0u;
  long long v50 = 0u;
  int v13 = operator new(8uLL);
  *((void *)&v49 + 1) = v13;
  *int v13 = 0x1500000014;
  *((void *)&v50 + 1) = v13 + 1;
  *(void *)&long long v50 = v13 + 1;
  int v51 = 9;
  uint64_t v52 = 0x200000001;
  uint64_t v53 = 0;
  uint64_t v55 = 0;
  long long v54 = 0;
  BOOL v14 = operator new(8uLL);
  uint64_t v53 = v14;
  *BOOL v14 = 0x1D0000001CLL;
  uint64_t v55 = v14 + 1;
  long long v54 = v14 + 1;
  int v56 = 11;
  uint64_t v57 = 0x200000001;
  uint64_t v58 = 0;
  long long v60 = 0;
  uint64_t v59 = 0;
  int v15 = operator new(4uLL);
  uint64_t v58 = v15;
  _DWORD *v15 = 29;
  long long v60 = v15 + 1;
  uint64_t v59 = v15 + 1;
  int v61 = 12;
  uint64_t v62 = 0x200000001;
  long long v63 = 0;
  uint64_t v65 = 0;
  uint64_t v64 = 0;
  uint64_t v16 = operator new(4uLL);
  long long v63 = v16;
  _DWORD *v16 = 30;
  uint64_t v65 = v16 + 1;
  uint64_t v64 = v16 + 1;
  int v66 = 13;
  uint64_t v67 = 0x200000001;
  char v68 = 0;
  uint64_t v70 = 0;
  uint64_t v69 = 0;
  uint64_t v17 = operator new(4uLL);
  char v68 = v17;
  _DWORD *v17 = 31;
  uint64_t v70 = v17 + 1;
  uint64_t v69 = v17 + 1;
  int v71 = 14;
  uint64_t v72 = 0x200000001;
  uint64_t v73 = 0;
  int v75 = 0;
  uint64_t v74 = 0;
  int v18 = operator new(8uLL);
  uint64_t v73 = v18;
  *int v18 = 0x2100000020;
  int v75 = v18 + 1;
  uint64_t v74 = v18 + 1;
  int v76 = 15;
  uint64_t v77 = 0x200000001;
  unint64_t v78 = 0;
  uint64_t v80 = 0;
  long long v79 = 0;
  char v19 = operator new(0x18uLL);
  unint64_t v78 = v19;
  uint64_t v80 = (char *)(v19 + 3);
  void v19[2] = 0x2100000020;
  *(_OWORD *)char v19 = xmmword_1007BF2A0;
  long long v79 = (char *)(v19 + 3);
  int v81 = 16;
  uint64_t v82 = 0x300000001;
  uint64_t v83 = 0;
  __int16 v85 = 0;
  uint64_t v84 = 0;
  uint64_t v20 = operator new(0x14uLL);
  uint64_t v83 = v20;
  __int16 v85 = (char *)(v20 + 5);
  void v20[4] = 38;
  *(_OWORD *)uint64_t v20 = xmmword_1007BF2B8;
  uint64_t v84 = (char *)(v20 + 5);
  int v86 = 17;
  uint64_t v87 = 0x300000001;
  v88 = 0;
  long long v90 = 0;
  v89 = 0;
  int v21 = operator new(0xCuLL);
  v88 = v21;
  long long v90 = (char *)(v21 + 3);
  *(void *)int v21 = 0x2500000024;
  void v21[2] = 38;
  v89 = (char *)(v21 + 3);
  int v91 = 18;
  uint64_t v92 = 0x400000001;
  v93 = 0;
  v95 = 0;
  v94 = 0;
  int v22 = operator new(0xCuLL);
  v93 = v22;
  v95 = (char *)(v22 + 3);
  *(void *)int v22 = 0x2800000027;
  void v22[2] = 41;
  v94 = (char *)(v22 + 3);
  int v96 = 19;
  uint64_t v97 = 0x300000001;
  v98 = 0;
  v100 = 0;
  v99 = 0;
  __int16 v23 = operator new(8uLL);
  v98 = v23;
  *__int16 v23 = 0x2300000022;
  v100 = v23 + 1;
  v99 = v23 + 1;
  int v101 = 20;
  uint64_t v102 = 0x300000001;
  v103 = 0;
  v105 = 0;
  v104 = 0;
  unsigned int v24 = operator new(0xCuLL);
  v103 = v24;
  v105 = (char *)(v24 + 3);
  *(void *)unsigned int v24 = 0x2500000024;
  void v24[2] = 38;
  v104 = (char *)(v24 + 3);
  int v106 = 21;
  qword_100A19C30 = 0;
  qword_100A19C38 = 0;
  qword_100A19C28 = 0;
  qword_100A19C28 = (uint64_t)operator new(0x410uLL);
  qword_100A19C30 = qword_100A19C28;
  qword_100A19C38 = qword_100A19C28 + 1040;
  sub_1004C9170(&qword_100A19C28, (uint64_t)__dst, (uint64_t)&v107);
  uint64_t v25 = 1040;
  do
  {
    int64_t v26 = *(void **)((char *)&__dst[-2] + v25);
    if (v26)
    {
      *(void *)((char *)&__dst[-1] + v25 - 8) = v26;
      operator delete(v26);
    }
    v25 -= 40;
  }
  while (v25);
  __cxa_atexit((void (*)(void *))sub_1004C8D84, &qword_100A19C28, (void *)&_mh_execute_header);
}

void sub_1004C9AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  while (1)
  {
    char v19 = (void *)*((void *)v17 - 4);
    if (v19)
    {
      *((void *)v17 - 3) = v19;
      operator delete(v19);
    }
    v17 -= 40;
    if (v17 == &a17) {
      _Unwind_Resume(exception_object);
    }
  }
}

void sub_1004C9B48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17 = 1040;
  while (1)
  {
    int v18 = *(void **)(&a17 + v17 - 32);
    if (v18)
    {
      *(void *)(&a17 + v17 - 24) = v18;
      operator delete(v18);
    }
    v17 -= 40;
    if (!v17) {
      JUMPOUT(0x1004C9B40);
    }
  }
}

void sub_1004C9B74()
{
}

uint64_t sub_1004C9B7C(uint64_t a1, char *a2, int a3)
{
  *(void *)a1 = off_1009B15E0;
  sub_10004191C((void *)(a1 + 8), a2);
  *(_OWORD *)(a1 + 4sub_1004C2140(qword_100A19B68, 0) = 0u;
  *(_DWORD *)(a1 + 32) = a3;
  *(_OWORD *)(a1 + 56) = 0u;
  sub_100052DA8(a1 + 72);
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  sub_100052DA8(a1 + 184);
  *(void *)(a1 + 248) = 0;
  sub_100052DA8(a1 + 256);
  *(unsigned char *)(a1 + 32sub_1004C2140(qword_100A19B68, 0) = 0;
  return a1;
}

void sub_1004C9C28(_Unwind_Exception *a1)
{
  uint64_t v7 = v4;
  sub_100052DA4(v7);
  sub_1004CC664(v5);
  sub_100052DA4(v3);
  char v9 = *v6;
  if (*v6)
  {
    *(void *)(v1 + 48) = v9;
    operator delete(v9);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1004C9C80(uint64_t a1)
{
  *(void *)a1 = off_1009B15E0;
  uint64_t v2 = *(void *)(a1 + 248);
  if (v2)
  {
    sub_1004AFF30(v2);
    operator delete();
  }
  sub_100052DA4(a1 + 256);
  sub_100052DA4(a1 + 184);
  sub_1004CC664((void *)(a1 + 136));
  sub_100052DA4(a1 + 72);
  uint64_t v3 = *(void **)(a1 + 40);
  if (v3)
  {
    *(void *)(a1 + 48) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_1004C9D28(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1 + 184);
  uint64_t v2 = *(void *)(a1 + 248);
  if (!v2) {
    operator new();
  }
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

void sub_1004C9DBC()
{
}

void sub_1004C9DF0(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v3 = sub_1004C9D28(a1);
  sub_100013018(v3, v4);
}

void sub_1004C9E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL sub_1004C9E58(uint64_t a1, unsigned char *a2)
{
  uint64_t v3 = sub_1004C9D28(a1);

  return sub_1004B022C(v3, a2);
}

void sub_1004C9E90(uint64_t a1, uint64_t a2)
{
  id v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = sub_1004BC79C(*(_DWORD *)(a2 + 248));
    uint64_t v6 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    int v22 = 136446466;
    __int16 v23 = v5;
    __int16 v24 = 2082;
    uint64_t v25 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Registering \"%{public}s\" profile in %{public}s", (uint8_t *)&v22, 0x16u);
  }
  uint64_t v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(void **)(a1 + 48);
  char v9 = v7;
  if (v7 != v8)
  {
    while (*v9 != a2)
    {
      if (++v9 == v8)
      {
        char v9 = *(void **)(a1 + 48);
        break;
      }
    }
  }
  if (v9 == v8)
  {
    unint64_t v10 = *(void *)(a1 + 56);
    if ((unint64_t)v8 >= v10)
    {
      uint64_t v12 = v8 - v7;
      if ((unint64_t)(v12 + 1) >> 61) {
        abort();
      }
      uint64_t v13 = v10 - (void)v7;
      uint64_t v14 = v13 >> 2;
      if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
        uint64_t v14 = v12 + 1;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v14;
      }
      if (v15) {
        uint64_t v16 = (char *)sub_1000405F8(a1 + 56, v15);
      }
      else {
        uint64_t v16 = 0;
      }
      uint64_t v17 = &v16[8 * v12];
      int v18 = &v16[8 * v15];
      *(void *)uint64_t v17 = a2;
      uint64_t v11 = v17 + 8;
      uint64_t v20 = *(char **)(a1 + 40);
      char v19 = *(char **)(a1 + 48);
      if (v19 != v20)
      {
        do
        {
          uint64_t v21 = *((void *)v19 - 1);
          v19 -= 8;
          *((void *)v17 - 1) = v21;
          v17 -= 8;
        }
        while (v19 != v20);
        char v19 = *(char **)(a1 + 40);
      }
      *(void *)(a1 + 4sub_1004C2140(qword_100A19B68, 0) = v17;
      *(void *)(a1 + 48) = v11;
      *(void *)(a1 + 56) = v18;
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      *uint64_t v8 = a2;
      uint64_t v11 = v8 + 1;
    }
    *(void *)(a1 + 48) = v11;
  }
}

uint64_t sub_1004CA044(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 32))(a1))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_100770870();
    }
    return 0;
  }
  else
  {
    v7[0] = 0;
    v7[1] = 0;
    sub_10003AED0((uint64_t)v7, a1 + 256);
    *(unsigned char *)(a1 + 32sub_1004C2140(qword_100A19B68, 0) = 1;
    v6[0] = 0;
    v6[1] = 0;
    sub_10003AED0((uint64_t)v6, a1 + 184);
    uint64_t v3 = *(void *)(a1 + 248);
    if (v3) {
      sub_1004AF98C(v3, QOS_CLASS_USER_INITIATED);
    }
    sub_10003AFE8((uint64_t)v6);
    for (uint64_t i = *(uint64_t **)(a1 + 40); i != *(uint64_t **)(a1 + 48); ++i)
    {
      uint64_t v2 = sub_1004BC5A8(*i, a1);
      if (v2) {
        goto LABEL_12;
      }
    }
    uint64_t v2 = 0;
LABEL_12:
    sub_10003AFB4((uint64_t)v6);
    sub_10003AFB4((uint64_t)v7);
  }
  return v2;
}

void sub_1004CA154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004CA17C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64) - 1;
  *(void *)(a1 + 64) = v2;
  uint64_t v3 = qword_100A19E50;
  BOOL v4 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      uint64_t v5 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v5 = (void *)*v5;
      }
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = v5;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}s still has %zu profile(s) pending disconnection", buf, 0x16u);
    }
  }
  else
  {
    if (v4)
    {
      uint64_t v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v6 = (void *)*v6;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}s has stopped", buf, 0xCu);
    }
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    sub_10003AED0((uint64_t)buf, a1 + 256);
    *(unsigned char *)(a1 + 32sub_1004C2140(qword_100A19B68, 0) = 0;
    sub_10003AFE8((uint64_t)buf);
    v8[0] = 0;
    v8[1] = 0;
    sub_10003AED0((uint64_t)v8, a1 + 184);
    uint64_t v7 = *(void *)(a1 + 248);
    if (v7) {
      sub_1004AFEC4(v7);
    }
    sub_10003AFE8((uint64_t)v8);
    if (qword_1009F8090 != -1) {
      dispatch_once(&qword_1009F8090, &stru_1009B1740);
    }
    sub_1004D10C0((uint64_t)off_1009F8088, a1);
    sub_10003AFB4((uint64_t)v8);
    sub_10003AFB4((uint64_t)buf);
  }
}

void sub_1004CA328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004CA358(uint64_t a1)
{
  v24[0] = 0;
  v24[1] = 0;
  sub_10003AED0((uint64_t)v24, a1 + 256);
  uint64_t v2 = qword_100A19E50;
  if (*(unsigned char *)(a1 + 320))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Stopping %{public}s and its registered profiles", buf, 0xCu);
    }
    sub_10003AFE8((uint64_t)v24);
    v23[0] = 0;
    v23[1] = 0;
    sub_10003AED0((uint64_t)v23, a1 + 72);
    BOOL v4 = *(void ***)(a1 + 144);
    uint64_t v5 = *(void *)(a1 + 152);
    *(void *)(a1 + 176) = 0;
    unint64_t v6 = v5 - (void)v4;
    if (v6 >= 0x11)
    {
      do
      {
        operator delete(*v4);
        uint64_t v7 = *(void *)(a1 + 152);
        BOOL v4 = (void **)(*(void *)(a1 + 144) + 8);
        *(void *)(a1 + 144) = v4;
        unint64_t v6 = v7 - (void)v4;
      }
      while (v6 > 0x10);
    }
    if (v6 >> 3 == 1)
    {
      uint64_t v8 = 51;
    }
    else
    {
      if (v6 >> 3 != 2)
      {
LABEL_16:
        sub_10003AFE8((uint64_t)v23);
        unint64_t v10 = *(uint64_t **)(a1 + 40);
        uint64_t v11 = *(void *)(a1 + 48) - (void)v10;
        uint64_t v12 = v11 >> 3;
        *(void *)(a1 + 64) = v11 >> 3;
        if (v11)
        {
          do
          {
            int v13 = sub_1004BCCA0(*v10);
            int v14 = v13;
            if (v13 != 113)
            {
              if (v13)
              {
                unint64_t v15 = qword_100A19E50;
                if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v16 = a1 + 8;
                  if (*(char *)(a1 + 31) < 0) {
                    uint64_t v16 = *(void *)(a1 + 8);
                  }
                  *(_DWORD *)long long buf = 136446466;
                  *(void *)&uint8_t buf[4] = v16;
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v14;
                  _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Failed to stop %{public}s with result %d", buf, 0x12u);
                }
              }
              else
              {
                --*(void *)(a1 + 64);
              }
            }
            ++v10;
          }
          while (v10 != *(uint64_t **)(a1 + 48));
          uint64_t v12 = *(void *)(a1 + 64);
        }
        if (v12)
        {
          uint64_t v17 = qword_100A19E50;
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
          {
            int v18 = (void *)(a1 + 8);
            if (*(char *)(a1 + 31) < 0) {
              int v18 = (void *)*v18;
            }
            *(_DWORD *)long long buf = 136446466;
            *(void *)&uint8_t buf[4] = v18;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&buf[14] = v12;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%{public}s still has %zu profile(s) pending disconnection - delaying stop", buf, 0x16u);
          }
          uint64_t v9 = 113;
        }
        else
        {
          sub_10003AF00((uint64_t)v24);
          *(unsigned char *)(a1 + 32sub_1004C2140(qword_100A19B68, 0) = 0;
          sub_10003AFE8((uint64_t)v24);
          *(void *)long long buf = 0;
          *(void *)&uint8_t buf[8] = 0;
          sub_10003AED0((uint64_t)buf, a1 + 184);
          uint64_t v19 = *(void *)(a1 + 248);
          if (v19) {
            sub_1004AFEC4(v19);
          }
          sub_10003AFE8((uint64_t)buf);
          uint64_t v20 = qword_100A19E50;
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v21 = (void *)(a1 + 8);
            if (*(char *)(a1 + 31) < 0) {
              uint64_t v21 = (void *)*v21;
            }
            *(_DWORD *)uint64_t v25 = 136446210;
            int64_t v26 = v21;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "%{public}s has stopped", v25, 0xCu);
          }
          sub_10003AFB4((uint64_t)buf);
          uint64_t v9 = 0;
        }
        sub_10003AFB4((uint64_t)v23);
        goto LABEL_40;
      }
      uint64_t v8 = 102;
    }
    *(void *)(a1 + 168) = v8;
    goto LABEL_16;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
    sub_1007708E0();
  }
  uint64_t v9 = 0;
LABEL_40:
  sub_10003AFB4((uint64_t)v24);
  return v9;
}

void sub_1004CA6CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_10003AFB4((uint64_t)va);
  sub_10003AFB4((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004CA714(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1 + 256);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 320);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

BOOL sub_1004CA75C(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v4 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
      sub_100770950(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }
  return sub_100475E4C(a2, *(_DWORD *)(a1 + 32)) == 4;
}

uint64_t sub_1004CA7C8(uint64_t a1, void *a2)
{
  if (!a2)
  {
    uint64_t v4 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
      sub_100770950(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1))
  {
    if ((*(uint64_t (**)(uint64_t, void *))(*(void *)a1 + 48))(a1, a2))
    {
      if ((*(uint64_t (**)(uint64_t, void *))(*(void *)a1 + 56))(a1, a2))
      {
        v45[0] = 0;
        v45[1] = 0;
        sub_10003AED0((uint64_t)v45, a1 + 72);
        uint64_t v12 = *(void *)(a1 + 176);
        if (v12)
        {
          unint64_t v13 = *(void *)(a1 + 168);
          uint64_t v14 = *(void *)(a1 + 144);
          uint64_t v15 = *(void *)(a1 + 152);
          uint64_t v16 = (void ***)(v14 + 8 * (v13 / 0x66));
          if (v15 == v14) {
            uint64_t v17 = 0;
          }
          else {
            uint64_t v17 = &(*v16)[5 * (v13 % 0x66)];
          }
          unint64_t v23 = v13 + v12;
          unint64_t v24 = v23 / 0x66;
          unint64_t v25 = v23 % 0x66;
LABEL_26:
          int64_t v26 = v17 - 510;
          while (1)
          {
            uint64_t v27 = v15 == v14 ? 0 : *(void *)(v14 + 8 * v24) + 40 * v25;
            if (v17 == (void **)v27) {
              break;
            }
            if (*v17 == a2)
            {
              uint64_t v33 = qword_100A19E50;
              if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
              {
                int v34 = (void *)(a1 + 8);
                if (*(char *)(a1 + 31) < 0) {
                  int v34 = (void *)*v34;
                }
                sub_100474E18((uint64_t)a2, &__p);
                if (v41 >= 0) {
                  p_p = &__p;
                }
                else {
                  p_p = __p;
                }
                *(_DWORD *)long long buf = 136446466;
                long long v47 = v34;
                __int16 v48 = 2082;
                long long v49 = p_p;
                _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "%{public}s is currently processing another connection for device %{public}s - ignoring duplicate request", buf, 0x16u);
                if (SHIBYTE(v41) < 0) {
                  operator delete(__p);
                }
              }
              uint64_t v18 = 302;
              goto LABEL_54;
            }
            v17 += 5;
            v26 += 5;
            if (*v16 == v26)
            {
              long long v28 = v16[1];
              ++v16;
              uint64_t v17 = v28;
              goto LABEL_26;
            }
          }
        }
        int v29 = *(_DWORD *)(a1 + 32);
        std::string __p = a2;
        int v40 = 0;
        uint64_t v41 = 0;
        int v42 = v29;
        char v43 = 2;
        uint64_t v44 = mach_continuous_time();
        sub_1004CACF0((void *)(a1 + 136), (uint64_t)&__p);
        if (*(void *)(a1 + 176) < 2uLL)
        {
          sub_10003AFE8((uint64_t)v45);
          uint64_t v18 = sub_1004CADA8(a1);
        }
        else
        {
          uint64_t v30 = qword_100A19E50;
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
          {
            long long v31 = (void *)(a1 + 8);
            if (*(char *)(a1 + 31) < 0) {
              long long v31 = (void *)*v31;
            }
            sub_100474E18((uint64_t)a2, &__p);
            if (v41 >= 0) {
              long long v32 = &__p;
            }
            else {
              long long v32 = __p;
            }
            *(_DWORD *)long long buf = 136446466;
            long long v47 = v31;
            __int16 v48 = 2082;
            long long v49 = v32;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "%{public}s is currently processing another connection - queueing connection to device %{public}s", buf, 0x16u);
            if (SHIBYTE(v41) < 0) {
              operator delete(__p);
            }
          }
          uint64_t v18 = 303;
        }
LABEL_54:
        sub_10003AFB4((uint64_t)v45);
      }
      else
      {
        int v22 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
        {
          int v37 = (void *)(a1 + 8);
          if (*(char *)(a1 + 31) < 0) {
            int v37 = (void *)*v37;
          }
          sub_100474E18((uint64_t)a2, &__p);
          if (v41 >= 0) {
            uint64_t v38 = &__p;
          }
          else {
            uint64_t v38 = __p;
          }
          *(_DWORD *)long long buf = 136446466;
          long long v47 = v37;
          __int16 v48 = 2082;
          long long v49 = v38;
          _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%{public}s is not available on device %{public}s", buf, 0x16u);
          if (SHIBYTE(v41) < 0) {
            operator delete(__p);
          }
        }
        return 114;
      }
    }
    else
    {
      uint64_t v19 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
      {
        uint64_t v20 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          uint64_t v20 = (void *)*v20;
        }
        sub_100474E18((uint64_t)a2, &__p);
        if (v41 >= 0) {
          uint64_t v21 = &__p;
        }
        else {
          uint64_t v21 = __p;
        }
        *(_DWORD *)long long buf = 136446466;
        long long v47 = v20;
        __int16 v48 = 2082;
        long long v49 = v21;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "%{public}s is not supported by device %{public}s", buf, 0x16u);
        if (SHIBYTE(v41) < 0) {
          operator delete(__p);
        }
      }
      return 108;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_1007709C8();
    }
    return 105;
  }
  return v18;
}

void sub_1004CACC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_1004CACF0(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 102 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1004CC774(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x66)) + 40 * (v7 % 0x66);
  __n128 result = *(__n128 *)a2;
  long long v10 = *(_OWORD *)(a2 + 16);
  *(void *)(v8 + 32) = *(void *)(a2 + 32);
  *(__n128 *)unint64_t v8 = result;
  *(_OWORD *)(v8 + 16) = v10;
  ++a1[5];
  return result;
}

uint64_t sub_1004CADA8(uint64_t a1)
{
  v20[0] = 0;
  v20[1] = 0;
  sub_10003AED0((uint64_t)v20, a1 + 72);
  if (*(void *)(a1 + 176)
    && (unint64_t v2 = *(void *)(a1 + 168),
        uint64_t v3 = *(void *)(*(void *)(a1 + 144) + 8 * (v2 / 0x66)),
        unint64_t v4 = v2 % 0x66,
        !*(_DWORD *)(v3 + 40 * (v2 % 0x66) + 8)))
  {
    uint64_t v7 = *(void *)(v3 + 40 * v4);
    unint64_t v8 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v9 = (void *)*v9;
      }
      sub_100474E18(v7, __p);
      if (v19 >= 0) {
        long long v10 = __p;
      }
      else {
        long long v10 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136446466;
      int v22 = v9;
      __int16 v23 = 2082;
      unint64_t v24 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}s - handling connection that was pending for device %{public}s", buf, 0x16u);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
      unint64_t v11 = *(void *)(a1 + 168);
      uint64_t v3 = *(void *)(*(void *)(a1 + 144) + 8 * (v11 / 0x66));
      unint64_t v4 = v11 % 0x66;
    }
    *(_DWORD *)(v3 + 40 * v4 + 8) = 3;
    for (uint64_t i = *(void **)(a1 + 40); i != *(void **)(a1 + 48); ++i)
    {
      uint64_t v13 = *i;
      if ((*(unsigned int (**)(void, uint64_t))(*(void *)*i + 24))(*i, v7))
      {
        *(void *)(*(void *)(*(void *)(a1 + 144) + 8 * (*(void *)(a1 + 168) / 0x66uLL))
                  + 40 * (*(void *)(a1 + 168) % 0x66uLL)
                  + 16) = v13;
        sub_10003AFE8((uint64_t)v20);
        operator new();
      }
    }
    sub_10003AFE8((uint64_t)v20);
    uint64_t v14 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v15 = (void *)*v15;
      }
      sub_100474E18(v7, __p);
      if (v19 >= 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136446466;
      int v22 = v15;
      __int16 v23 = 2082;
      unint64_t v24 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%{public}s found no connectable profiles on device %{public}s", buf, 0x16u);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v17 = a1 + 136;
    *(int64x2_t *)(a1 + 168) = vaddq_s64(*(int64x2_t *)(a1 + 168), (int64x2_t)xmmword_1007BB7F0);
    uint64_t v5 = 1;
    sub_1004CCA8C(v17, 1);
  }
  else
  {
    uint64_t v5 = 0;
  }
  sub_10003AFB4((uint64_t)v20);
  return v5;
}

void sub_1004CB0FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004CB128(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    unint64_t v4 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
      sub_100770950(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1) & 1) == 0
    && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
  {
    sub_1007709C8();
  }
  v22[0] = 0;
  v22[1] = 0;
  sub_10003AED0((uint64_t)v22, a1 + 72);
  if (*(void *)(a1 + 176)) {
    uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 144) + 8 * (*(void *)(a1 + 168) / 0x66uLL))
  }
                    + 40 * (*(void *)(a1 + 168) % 0x66uLL)
                    + 16);
  else {
    uint64_t v12 = 0;
  }
  sub_10003AFE8((uint64_t)v22);
  if (v12)
  {
    unint64_t v13 = sub_1004BDD5C(v12);
    if (v13 >= (*(unsigned int (**)(uint64_t))(*(void *)v12 + 16))(v12)
      && (uint64_t v14 = sub_1004BDC40(v12)) != 0
      && ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2) & 1) == 0)
    {
      sub_10003AF00((uint64_t)v22);
      if (*(void *)(a1 + 176))
      {
        *(_DWORD *)(*(void *)(*(void *)(a1 + 144) + 8 * (*(void *)(a1 + 168) / 0x66uLL))
                  + 40 * (*(void *)(a1 + 168) % 0x66uLL)
                  + 8) = 2;
        sub_10003AFE8((uint64_t)v22);
        uint64_t v15 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v16 = (void *)(a1 + 8);
          if (*(char *)(a1 + 31) < 0) {
            uint64_t v16 = (void *)*v16;
          }
          int v17 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
          sub_100474E18(v14, __p);
          if (v21 >= 0) {
            uint64_t v18 = __p;
          }
          else {
            uint64_t v18 = (void **)__p[0];
          }
          *(_DWORD *)long long buf = 136446722;
          unint64_t v24 = v16;
          __int16 v25 = 1024;
          int v26 = v17;
          __int16 v27 = 2082;
          long long v28 = v18;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%{public}s connection would exceed maximum allowed connections (%d) - disconnecting device %{public}s", buf, 0x1Cu);
          if (v21 < 0) {
            operator delete(__p[0]);
          }
        }
        sub_1004BD184(v12, v14);
      }
    }
    else
    {
      sub_1004BD260(v12, a2);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
  {
    sub_100770A38();
  }
  return sub_10003AFB4((uint64_t)v22);
}

void sub_1004CB464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1004CB48C(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    unint64_t v4 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
      sub_100770950(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }
  v19[0] = 0;
  v19[1] = 0;
  sub_10003AED0((uint64_t)v19, a1 + 72);
  uint64_t v12 = *(void *)(a1 + 176);
  if (v12)
  {
    unint64_t v13 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v14 = (void *)*v14;
      }
      sub_100474E18(a2, __p);
      if (v18 >= 0) {
        uint64_t v15 = __p;
      }
      else {
        uint64_t v15 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136446466;
      char v21 = v14;
      __int16 v22 = 2082;
      __int16 v23 = v15;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%{public}s already has a pending outgoing connection to device %{public}s", buf, 0x16u);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  else
  {
    sub_10003AFE8((uint64_t)v19);
  }
  sub_10003AFB4((uint64_t)v19);
  return v12 == 0;
}

void sub_1004CB5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004CB610(void *a1, uint64_t a2)
{
  if (!a2)
  {
    unint64_t v4 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
      sub_100770950(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }
  v26[0] = 0;
  v26[1] = 0;
  sub_10003AED0((uint64_t)v26, (uint64_t)(a1 + 9));
  uint64_t v12 = a1[22];
  if (v12)
  {
    unint64_t v13 = a1[21];
    uint64_t v14 = a1[18];
    uint64_t v15 = a1[19];
    uint64_t v16 = (void *)(v14 + 8 * (v13 / 0x66));
    if (v15 == v14) {
      int v17 = 0;
    }
    else {
      int v17 = (void *)(*v16 + 40 * (v13 % 0x66));
    }
    unint64_t v18 = v13 + v12;
    unint64_t v19 = v18 / 0x66;
    unint64_t v20 = v18 % 0x66;
LABEL_9:
    char v21 = v17 - 510;
    while (1)
    {
      uint64_t v22 = v15 == v14 ? 0 : *(void *)(v14 + 8 * v19) + 40 * v20;
      if (v17 == (void *)v22) {
        break;
      }
      if (*v17 == a2)
      {
        uint64_t v24 = 1;
        goto LABEL_19;
      }
      v17 += 5;
      v21 += 5;
      if ((void *)*v16 == v21)
      {
        __int16 v23 = (void *)v16[1];
        ++v16;
        int v17 = v23;
        goto LABEL_9;
      }
    }
  }
  sub_10003AFE8((uint64_t)v26);
  uint64_t v24 = 0;
LABEL_19:
  sub_10003AFB4((uint64_t)v26);
  return v24;
}

void sub_1004CB754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004CB768(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = qword_100A19E50;
  if (!a2 && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT))
  {
    LODWORD(__p[0]) = 136446210;
    *(void **)((char *)__p + 4) = "device != NULL";
    _os_log_fault_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", (uint8_t *)__p, 0xCu);
    unint64_t v4 = qword_100A19E50;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v5 = (void *)*v5;
    }
    sub_100474E18(a2, __p);
    if (v22 >= 0) {
      uint64_t v6 = __p;
    }
    else {
      uint64_t v6 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136446466;
    uint64_t v24 = v5;
    __int16 v25 = 2082;
    int v26 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}s is disconnecting device %{public}s", buf, 0x16u);
    if (v22 < 0) {
      operator delete(__p[0]);
    }
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1))
  {
    *(_OWORD *)std::string __p = 0uLL;
    sub_10003AED0((uint64_t)__p, a1 + 72);
    uint64_t v7 = (int64x2_t *)(a1 + 136);
    unint64_t v8 = *(void *)(a1 + 168);
    uint64_t v9 = *(void *)(a1 + 144);
    uint64_t v10 = *(void *)(a1 + 152);
    uint64_t v11 = (void *)(v9 + 8 * (v8 / 0x66));
    if (v10 == v9) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = *v11 + 40 * (v8 % 0x66);
    }
LABEL_19:
    uint64_t v14 = (void *)v12;
    while (1)
    {
      unint64_t v15 = v10 == v9
          ? 0
          : *(void *)(v9 + 8 * ((*(void *)(a1 + 176) + v8) / 0x66)) + 40 * ((*(void *)(a1 + 176) + v8) % 0x66);
      if (v14 == (void *)v15) {
        break;
      }
      if (*v14 == a2)
      {
        unint64_t v19 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Connection was still pending - cancelling", buf, 2u);
        }
        sub_1004CBAB4(v7, v11, v12);
        uint64_t v13 = 0;
        goto LABEL_36;
      }
      v14 += 5;
      v12 += 40;
      if (*v11 + 4080 == v12)
      {
        uint64_t v16 = v11[1];
        ++v11;
        uint64_t v12 = v16;
        goto LABEL_19;
      }
    }
    sub_10003AFE8((uint64_t)__p);
    for (uint64_t i = *(uint64_t **)(a1 + 40); ; ++i)
    {
      if (i == *(uint64_t **)(a1 + 48))
      {
        uint64_t v13 = 1;
        goto LABEL_36;
      }
      uint64_t v18 = *i;
      if (sub_1004BDBD4(*i, a2)) {
        break;
      }
    }
    uint64_t v13 = sub_1004BD184(v18, a2);
LABEL_36:
    sub_10003AFB4((uint64_t)__p);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_1007709C8();
    }
    return 105;
  }
  return v13;
}

void sub_1004CBA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t sub_1004CBAB4(int64x2_t *a1, void *a2, uint64_t a3)
{
  unint64_t v4 = a1[2].u64[0];
  uint64_t v5 = a1->i64[1];
  uint64_t v6 = (uint64_t *)(v5 + 8 * (v4 / 0x66));
  if (a1[1].i64[0] == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *v6 + 40 * (v4 % 0x66);
  }
  if (a3 == v7) {
    unint64_t v8 = 0;
  }
  else {
    unint64_t v8 = 102 * (a2 - v6) - 0x3333333333333333 * ((a3 - *a2) >> 3) + 0x3333333333333333 * ((v7 - *v6) >> 3);
  }
  v28.n128_u64[0] = v5 + 8 * (v4 / 0x66);
  v28.n128_u64[1] = v7;
  sub_1004CCB64(&v28, v8);
  __n128 v9 = v28;
  uint64_t v10 = a1[2].i64[1];
  int64_t v11 = v28.n128_u64[1] - *(void *)v28.n128_u64[0];
  unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * (v11 >> 3);
  if (v8 <= (unint64_t)(v10 - 1) >> 1)
  {
    if (v11 < -39)
    {
      uint64_t v16 = (uint64_t *)(v28.n128_u64[0] - 8 * ((100 - v12) / 0x66));
      uint64_t v17 = *v16 + 40 * (102 * ((100 - v12) / 0x66) - (100 - v12)) + 4040;
    }
    else
    {
      uint64_t v16 = (uint64_t *)(v28.n128_u64[0] + 8 * ((v12 + 1) / 0x66));
      uint64_t v17 = *v16 + 40 * ((v12 + 1) % 0x66);
    }
    memset(&v28, 0, 32);
    sub_1004CCC10(v6, v7, (uint64_t *)v9.n128_u64[0], v9.n128_i64[1], v16, v17, &v28);
    a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1007BB7F0);
    sub_1004CCA8C((uint64_t)a1, 1);
  }
  else
  {
    if (v11 < -39)
    {
      unint64_t v18 = 100 - v12;
      uint64_t v14 = (long long **)(v28.n128_u64[0] - 8 * (v18 / 0x66));
      unint64_t v15 = (long long *)((char *)*v14 + 40 * (102 * (v18 / 0x66) - v18) + 4040);
    }
    else
    {
      unint64_t v13 = v12 + 1;
      uint64_t v14 = (long long **)(v28.n128_u64[0] + 8 * (v13 / 0x66));
      unint64_t v15 = (long long *)((char *)*v14 + 40 * (v13 % 0x66));
    }
    unint64_t v19 = a1[2].i64[0] + v10;
    uint64_t v20 = a1->i64[1];
    char v21 = (long long **)(v20 + 8 * (v19 / 0x66));
    if (a1[1].i64[0] == v20) {
      char v22 = 0;
    }
    else {
      char v22 = (char *)*v21 + 40 * (v19 % 0x66);
    }
    sub_1004CCDC4(v14, v15, v21, v22, (uint64_t)&v28);
    --a1[2].i64[1];
    sub_1004CCAEC(a1, 1);
  }
  unint64_t v23 = a1[2].u64[0];
  uint64_t v24 = a1->i64[1];
  __int16 v25 = (void *)(v24 + 8 * (v23 / 0x66));
  if (a1[1].i64[0] == v24) {
    unint64_t v26 = 0;
  }
  else {
    unint64_t v26 = *v25 + 40 * (v23 % 0x66);
  }
  v28.n128_u64[0] = (unint64_t)v25;
  v28.n128_u64[1] = v26;
  sub_1004CCB64(&v28, v8);
  return v28.n128_u64[0];
}

uint64_t sub_1004CBDC4(void *a1)
{
  if (!(*(unsigned int (**)(void *))(*a1 + 32))(a1) || (unint64_t v2 = (void **)a1[5], v2 == (void **)a1[6]))
  {
    LOBYTE(v3) = 0;
  }
  else
  {
    int v3 = 0;
    do
    {
      unint64_t v4 = *v2++;
      v3 |= sub_1004BDA98(v4);
    }
    while (v2 != (void **)a1[6]);
  }
  return v3 & 1;
}

uint64_t sub_1004CBE48(void *a1)
{
  if ((*(unsigned int (**)(void *))(*a1 + 32))(a1))
  {
    for (uint64_t i = (uint64_t *)a1[5]; i != (uint64_t *)a1[6]; ++i)
    {
      uint64_t v3 = *i;
      if (sub_1004BDB84(*i))
      {
        return sub_1004BDC40(v3);
      }
    }
  }
  return 0;
}

uint64_t sub_1004CBEE8(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 32))(a1);
  if (result)
  {
    uint64_t v3 = (uint64_t *)a1[5];
    if (v3 == (uint64_t *)a1[6])
    {
      return 0;
    }
    else
    {
      do
      {
        uint64_t result = sub_1004BDB84(*v3);
        if (result) {
          break;
        }
        ++v3;
      }
      while (v3 != (uint64_t *)a1[6]);
    }
  }
  return result;
}

uint64_t sub_1004CBF60(void *a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 32))(a1);
  if (result)
  {
    uint64_t v5 = (uint64_t *)a1[5];
    if (v5 == (uint64_t *)a1[6])
    {
      return 0;
    }
    else
    {
      do
      {
        uint64_t result = sub_1004BDBD4(*v5, a2);
        if (result) {
          break;
        }
        ++v5;
      }
      while (v5 != (uint64_t *)a1[6]);
    }
  }
  return result;
}

uint64_t sub_1004CBFE8(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  if (qword_1009F8090 != -1) {
    dispatch_once(&qword_1009F8090, &stru_1009B1740);
  }
  unint64_t v8 = off_1009F8088;
  uint64_t v9 = *(unsigned int *)(a1 + 32);

  return sub_1004D3A08((uint64_t)v8, a2, v9, a3, a4);
}

uint64_t sub_1004CC06C(uint64_t a1, uint64_t a2)
{
  if (qword_1009F8090 != -1) {
    dispatch_once(&qword_1009F8090, &stru_1009B1740);
  }
  unint64_t v4 = off_1009F8088;
  uint64_t v5 = *(unsigned int *)(a1 + 32);

  return sub_1004D471C((uint64_t)v4, a2, v5);
}

uint64_t sub_1004CC0F0(uint64_t a1, unsigned __int8 *a2, unsigned int a3, uint64_t a4)
{
  v15[0] = 0;
  v15[1] = 0;
  sub_10003AED0((uint64_t)v15, a1 + 72);
  uint64_t v8 = *(void *)(a1 + 176);
  if (v8)
  {
    unint64_t v9 = *(void *)(a1 + 168);
    if (*(unsigned __int8 **)(*(void *)(*(void *)(a1 + 144) + 8 * (v9 / 0x66)) + 40 * (v9 % 0x66)) == a2)
    {
      *(void *)(a1 + 168) = v9 + 1;
      *(void *)(a1 + 176) = v8 - 1;
      sub_1004CCA8C(a1 + 136, 1);
    }
  }
  sub_10003AFE8((uint64_t)v15);
  if (qword_1009F8090 != -1) {
    dispatch_once(&qword_1009F8090, &stru_1009B1740);
  }
  sub_1004D2654((uint64_t)off_1009F8088, (uint64_t)a2, *(unsigned int *)(a1 + 32), a3, a4);
  if (!a4)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 72))(a1) && (sub_100040630(a2) & 1) == 0)
    {
      uint64_t v10 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
      {
        sub_100474E18((uint64_t)a2, v14);
        sub_100770AA8((char *)v14, a1, buf, v10);
      }
      operator new();
    }
    unsigned int v11 = *(_DWORD *)(a1 + 32);
    uint64_t v16 = 0;
    sub_100026C30((uint64_t)&v16);
    *(void *)&long long v13 = (int)v16;
    *((void *)&v13 + 1) = SWORD2(v16);
    sub_100477F4C((uint64_t)a2, v11, 4, &v13, 0);
  }
  sub_1004CADA8(a1);
  return sub_10003AFB4((uint64_t)v15);
}

void sub_1004CC324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004CC34C(uint64_t a1, unsigned __int8 *a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  if (qword_1009F8090 != -1) {
    dispatch_once(&qword_1009F8090, &stru_1009B1740);
  }
  uint64_t result = sub_1004D47A0((uint64_t)off_1009F8088, a2, *(unsigned int *)(a1 + 32), a3, a4, a5);
  if (!a4)
  {
    v13[0] = 0;
    v13[1] = 0;
    sub_10003AED0((uint64_t)v13, a1 + 72);
    if (*(void *)(a1 + 176)
      && *(_DWORD *)(*(void *)(*(void *)(a1 + 144) + 8 * (*(void *)(a1 + 168) / 0x66uLL))
                   + 40 * (*(void *)(a1 + 168) % 0x66uLL)
                   + 8) == 2)
    {
      sub_10003AFE8((uint64_t)v13);
      unsigned int v11 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          unint64_t v12 = (void *)*v12;
        }
        *(_DWORD *)long long buf = 136446210;
        unint64_t v15 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%{public}s had a queued connection pending this disconnection", buf, 0xCu);
      }
      operator new();
    }
    return sub_10003AFB4((uint64_t)v13);
  }
  return result;
}

void sub_1004CC534(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1004CC550()
{
  return 2;
}

uint64_t sub_1004CC558()
{
  return 2;
}

uint64_t sub_1004CC560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (qword_1009F8090 != -1) {
    dispatch_once(&qword_1009F8090, &stru_1009B1740);
  }
  uint64_t v10 = off_1009F8088;
  uint64_t v11 = *(unsigned int *)(a1 + 32);

  return sub_1004D55B8((uint64_t)v10, a2, v11, a3, a4, a5);
}

void sub_1004CC5F4(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  *a3 = 0;
}

void sub_1004CC600()
{
}

uint64_t sub_1004CC614(uint64_t a1)
{
  return sub_1004CB128(*(void *)(a1 + 16), *(void *)(a1 + 24));
}

void sub_1004CC624()
{
}

uint64_t sub_1004CC638(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 88))(*(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t sub_1004CC664(void *a1)
{
  unint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 51;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 102;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_1002B303C((uint64_t)a1);
}

void sub_1004CC70C(id a1)
{
}

void sub_1004CC750()
{
}

void sub_1004CC774(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x66;
  unint64_t v4 = v2 - 102;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)sub_1000405F8(v5, v33);
      long long v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      sub_1002B4FA4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    sub_1002B50BC((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)sub_1000405F8((uint64_t)(a1 + 3), v46);
      long long v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      __int16 v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      char v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  int v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000405F8((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0xFF0uLL);
  sub_1002B51DC(&v54, &v53);
  __int16 v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002B52F4((uint64_t)&v54, v27);
  }
  int v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1004CCA40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1004CCA8C(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x66) {
    a2 = 1;
  }
  if (v2 < 0xCC) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 102;
  }
  return v4 ^ 1u;
}

uint64_t sub_1004CCAEC(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 102 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x66) {
    a2 = 1;
  }
  if (v5 < 0xCC) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void *sub_1004CCB64(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = (void *)*result;
    unint64_t v3 = a2 - 0x3333333333333333 * ((uint64_t)(result[1] - *(void *)*result) >> 3);
    if ((uint64_t)v3 < 1)
    {
      unint64_t v5 = 101 - v3;
      uint64_t v6 = &v2[-(v5 / 0x66)];
      *uint64_t result = v6;
      unint64_t v4 = *v6 + 40 * (102 * (v5 / 0x66) - v5) + 4040;
    }
    else
    {
      *uint64_t result = &v2[v3 / 0x66];
      unint64_t v4 = v2[v3 / 0x66] + 40 * (v3 % 0x66);
    }
    result[1] = v4;
  }
  return result;
}

__n128 sub_1004CCC10@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X5>, uint64_t a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    uint64_t v21 = 0;
    __n128 v22 = 0uLL;
    uint64_t v19 = a2;
    uint64_t v18 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
  }
  else
  {
    uint64_t v13 = a3 - 1;
    uint64_t v12 = *a3;
    uint64_t v21 = 0;
    __n128 v22 = 0uLL;
    uint64_t v14 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      sub_1004CCD00(v12, v14, v15, v16, &v21);
      uint64_t v16 = v22.n128_i64[1];
      uint64_t v15 = (uint64_t *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      uint64_t v17 = *v13--;
      uint64_t v12 = v17;
      uint64_t v14 = v17 + 4080;
      uint64_t v21 = 0;
      __n128 v22 = 0uLL;
    }
    uint64_t v18 = *a1 + 4080;
    uint64_t v21 = 0;
    __n128 v22 = 0uLL;
    uint64_t v19 = a2;
  }
  sub_1004CCD00(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = a4;
  a7[1] = result;
  return result;
}

void sub_1004CCD00(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  if (a1 == a2)
  {
    a2 = a1;
  }
  else
  {
    uint64_t v5 = *a3;
    uint64_t v6 = a4;
    uint64_t v7 = a2;
    while (1)
    {
      int64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - v5) >> 3);
      if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v7 - a1) >> 3)) < v8) {
        int64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - a1) >> 3);
      }
      if (v8)
      {
        uint64_t v9 = -40 * v8;
        uint64_t v10 = (long long *)(v7 - 40);
        do
        {
          a4 = v6 - 40;
          long long v11 = *v10;
          long long v12 = v10[1];
          *(void *)(v6 - 8) = *((void *)v10 + 4);
          *(_OWORD *)(v6 - 24) = v12;
          *(_OWORD *)(v6 - 4sub_1004C2140(qword_100A19B68, 0) = v11;
          uint64_t v10 = (long long *)((char *)v10 - 40);
          v6 -= 40;
          v9 += 40;
        }
        while (v9);
      }
      else
      {
        a4 = v6;
      }
      v7 -= 40 * v8;
      if (v7 == a1) {
        break;
      }
      uint64_t v13 = *--a3;
      uint64_t v5 = v13;
      uint64_t v6 = v13 + 4080;
    }
    if (*a3 + 4080 == a4)
    {
      uint64_t v14 = a3[1];
      ++a3;
      a4 = v14;
    }
  }
  *a5 = a2;
  a5[1] = a3;
  a5[2] = a4;
}

double sub_1004CCDC4(long long **a1, long long *a2, long long **a3, char *a4, uint64_t a5)
{
  uint64_t v7 = *(uint64_t **)a5;
  uint64_t v8 = *(void *)(a5 + 8);
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (uint64_t i = (char *)(*a1 + 255); ; uint64_t i = (char *)(v12 + 4080))
    {
      uint64_t v14 = 0;
      long long v15 = 0uLL;
      sub_1004CCE68(a2, i, v7, v8, &v14);
      uint64_t v8 = *((void *)&v15 + 1);
      uint64_t v7 = (uint64_t *)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + 8) = v8;
      if (v10 == a3) {
        break;
      }
      uint64_t v12 = (uint64_t)*v10++;
      a2 = (long long *)v12;
    }
    a2 = *a3;
  }
  uint64_t v14 = 0;
  long long v15 = 0uLL;
  sub_1004CCE68(a2, a4, v7, v8, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void sub_1004CCE68(long long *a1@<X1>, char *a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, char **a5@<X8>)
{
  if (a1 == (long long *)a2)
  {
    a2 = (char *)a1;
  }
  else
  {
    uint64_t v5 = *a3;
    while (1)
    {
      int64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - a4 + 4080) >> 3);
      int64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - (char *)a1) >> 3);
      if (v7 >= v6) {
        int64_t v7 = v6;
      }
      if (v7)
      {
        uint64_t v8 = (long long *)((char *)a1 + 40 * v7);
        uint64_t v9 = 40 * v7;
        do
        {
          long long v10 = *a1;
          long long v11 = a1[1];
          *(void *)(a4 + 32) = *((void *)a1 + 4);
          *(_OWORD *)a4 = v10;
          *(_OWORD *)(a4 + 16) = v11;
          a1 = (long long *)((char *)a1 + 40);
          a4 += 40;
          v9 -= 40;
        }
        while (v9);
        a1 = v8;
      }
      if (a1 == (long long *)a2) {
        break;
      }
      uint64_t v12 = a3[1];
      ++a3;
      uint64_t v5 = v12;
      a4 = v12;
    }
    if (*a3 + 4080 == a4)
    {
      uint64_t v13 = a3[1];
      ++a3;
      a4 = v13;
    }
  }
  *a5 = a2;
  a5[1] = (char *)a3;
  a5[2] = (char *)a4;
}

void sub_1004CCF14(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

uint64_t sub_1004CCF28(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5)
{
  v20[0] = 0;
  v20[1] = 0;
  sub_10003AED0((uint64_t)v20, a1 + 8);
  long long v10 = *(void **)(a1 + 80);
  long long v11 = (void *)(a1 + 88);
  if (v10 != (void *)(a1 + 88))
  {
    uint64_t v12 = a5;
    do
    {
      uint64_t v13 = v10[4];
      if (v13)
      {
        if (*(unsigned char *)(*(void *)(v13 + 64) + 160))
        {
          xpc_object_t v14 = xpc_dictionary_create(0, 0, 0);
          long long v15 = v14;
          if (v14)
          {
            xpc_dictionary_set_uint64(v14, "kCBMsgArgID", *(void *)(v13 + 48));
            xpc_dictionary_set_uint64(v15, "kCBMsgArgPairingAgentID", a2);
            xpc_dictionary_set_uint64(v15, "kCBMsgArgResult", v12);
            xpc_dictionary_set_uint64(v15, "kCBMsgArgEvent", a3);
            xpc_dictionary_set_uint64(v15, "kCBMsgArgBTDevice", a4);
            sub_1002D7B48(*(void *)(v13 + 64), "kCBMsgIdPairingAgentStatusEvent", v15, 1);
          }
        }
      }
      uint64_t v16 = (void *)v10[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          uint64_t v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (void *)v10[2];
          BOOL v18 = *v17 == (void)v10;
          long long v10 = v17;
        }
        while (!v18);
      }
      long long v10 = v17;
    }
    while (v17 != v11);
  }
  return sub_10003AFB4((uint64_t)v20);
}

void sub_1004CD098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004CD0AC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  v17[0] = 0;
  v17[1] = 0;
  sub_10003AED0((uint64_t)v17, a1 + 8);
  uint64_t v8 = *(void **)(a1 + 80);
  uint64_t v9 = (void *)(a1 + 88);
  if (v8 != (void *)(a1 + 88))
  {
    do
    {
      uint64_t v10 = v8[4];
      if (v10)
      {
        if (*(unsigned char *)(*(void *)(v10 + 64) + 160))
        {
          xpc_object_t v11 = xpc_dictionary_create(0, 0, 0);
          uint64_t v12 = v11;
          if (v11)
          {
            xpc_dictionary_set_uint64(v11, "kCBMsgArgID", *(void *)(v10 + 48));
            xpc_dictionary_set_uint64(v12, "kCBMsgArgPairingAgentID", a2);
            xpc_dictionary_set_uint64(v12, "kCBMsgArgBTDevice", a3);
            xpc_dictionary_set_uint64(v12, "kCBMsgArgMinLength", a4);
            sub_1002D7B48(*(void *)(v10 + 64), "kCBMsgIdPairingAgentPincode", v12, 1);
          }
        }
      }
      uint64_t v13 = (void *)v8[1];
      if (v13)
      {
        do
        {
          xpc_object_t v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          xpc_object_t v14 = (void *)v8[2];
          BOOL v15 = *v14 == (void)v8;
          uint64_t v8 = v14;
        }
        while (!v15);
      }
      uint64_t v8 = v14;
    }
    while (v14 != v9);
  }
  return sub_10003AFB4((uint64_t)v17);
}

void sub_1004CD204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004CD218(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  v17[0] = 0;
  v17[1] = 0;
  sub_10003AED0((uint64_t)v17, a1 + 8);
  uint64_t v8 = *(void **)(a1 + 80);
  uint64_t v9 = (void *)(a1 + 88);
  if (v8 != (void *)(a1 + 88))
  {
    do
    {
      uint64_t v10 = v8[4];
      if (v10)
      {
        if (*(unsigned char *)(*(void *)(v10 + 64) + 160))
        {
          xpc_object_t v11 = xpc_dictionary_create(0, 0, 0);
          uint64_t v12 = v11;
          if (v11)
          {
            xpc_dictionary_set_uint64(v11, "kCBMsgArgID", *(void *)(v10 + 48));
            xpc_dictionary_set_uint64(v12, "kCBMsgArgPairingAgentID", a2);
            xpc_dictionary_set_uint64(v12, "kCBMsgArgBTDevice", a3);
            xpc_dictionary_set_uint64(v12, "kCBMsgArgServices", a4);
            sub_1002D7B48(*(void *)(v10 + 64), "kCBMsgIdPairingAgentAuthorization", v12, 1);
          }
        }
      }
      uint64_t v13 = (void *)v8[1];
      if (v13)
      {
        do
        {
          xpc_object_t v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          xpc_object_t v14 = (void *)v8[2];
          BOOL v15 = *v14 == (void)v8;
          uint64_t v8 = v14;
        }
        while (!v15);
      }
      uint64_t v8 = v14;
    }
    while (v14 != v9);
  }
  return sub_10003AFB4((uint64_t)v17);
}

void sub_1004CD370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004CD384(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  v20[0] = 0;
  v20[1] = 0;
  sub_10003AED0((uint64_t)v20, a1 + 8);
  uint64_t v10 = *(void **)(a1 + 80);
  xpc_object_t v11 = (void *)(a1 + 88);
  if (v10 != (void *)(a1 + 88))
  {
    uint64_t v12 = a5;
    do
    {
      uint64_t v13 = v10[4];
      if (v13)
      {
        if (*(unsigned char *)(*(void *)(v13 + 64) + 160))
        {
          xpc_object_t v14 = xpc_dictionary_create(0, 0, 0);
          BOOL v15 = v14;
          if (v14)
          {
            xpc_dictionary_set_uint64(v14, "kCBMsgArgID", *(void *)(v13 + 48));
            xpc_dictionary_set_uint64(v15, "kCBMsgArgPairingAgentID", a2);
            xpc_dictionary_set_uint64(v15, "kCBMsgArgBTDevice", a3);
            xpc_dictionary_set_uint64(v15, "kCBMsgArgValue", a4);
            xpc_dictionary_set_uint64(v15, "kCBMsgArgMITM", v12);
            sub_1002D7B48(*(void *)(v13 + 64), "kCBMsgIdPairingAgentUserConfirmation", v15, 1);
          }
        }
      }
      uint64_t v16 = (void *)v10[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          uint64_t v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (void *)v10[2];
          BOOL v18 = *v17 == (void)v10;
          uint64_t v10 = v17;
        }
        while (!v18);
      }
      uint64_t v10 = v17;
    }
    while (v17 != v11);
  }
  return sub_10003AFB4((uint64_t)v20);
}

void sub_1004CD4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004CD508(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  v17[0] = 0;
  v17[1] = 0;
  sub_10003AED0((uint64_t)v17, a1 + 8);
  uint64_t v8 = *(void **)(a1 + 80);
  uint64_t v9 = (void *)(a1 + 88);
  if (v8 != (void *)(a1 + 88))
  {
    do
    {
      uint64_t v10 = v8[4];
      if (v10)
      {
        if (*(unsigned char *)(*(void *)(v10 + 64) + 160))
        {
          xpc_object_t v11 = xpc_dictionary_create(0, 0, 0);
          uint64_t v12 = v11;
          if (v11)
          {
            xpc_dictionary_set_uint64(v11, "kCBMsgArgID", *(void *)(v10 + 48));
            xpc_dictionary_set_uint64(v12, "kCBMsgArgPairingAgentID", a2);
            xpc_dictionary_set_uint64(v12, "kCBMsgArgBTDevice", a3);
            xpc_dictionary_set_uint64(v12, "kCBMsgArgValue", a4);
            sub_1002D7B48(*(void *)(v10 + 64), "kCBMsgIdPairingAgentPassKeyDisplay", v12, 1);
          }
        }
      }
      uint64_t v13 = (void *)v8[1];
      if (v13)
      {
        do
        {
          xpc_object_t v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          xpc_object_t v14 = (void *)v8[2];
          BOOL v15 = *v14 == (void)v8;
          uint64_t v8 = v14;
        }
        while (!v15);
      }
      uint64_t v8 = v14;
    }
    while (v14 != v9);
  }
  return sub_10003AFB4((uint64_t)v17);
}

void sub_1004CD660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004CD674(uint64_t a1, uint64_t a2, const void *a3, const void *a4, const void *a5, const void *a6)
{
  v21[0] = 0;
  v21[1] = 0;
  sub_10003AED0((uint64_t)v21, a1 + 8);
  uint64_t v12 = *(void **)(a1 + 80);
  uint64_t v13 = (void *)(a1 + 88);
  if (v12 != (void *)(a1 + 88))
  {
    do
    {
      uint64_t v14 = v12[4];
      if (v14)
      {
        if (*(unsigned char *)(*(void *)(v14 + 64) + 160))
        {
          xpc_object_t v15 = xpc_dictionary_create(0, 0, 0);
          uint64_t v16 = v15;
          if (v15)
          {
            xpc_dictionary_set_uint64(v15, "kCBMsgArgID", *(void *)(v14 + 48));
            xpc_dictionary_set_uint64(v16, "kCBMsgArgPairingAgentID", a2);
            if (a3) {
              xpc_dictionary_set_data(v16, "kCBMsgArgC192", a3, 0x10uLL);
            }
            if (a4) {
              xpc_dictionary_set_data(v16, "kCBMsgArgR192", a4, 0x10uLL);
            }
            if (a5) {
              xpc_dictionary_set_data(v16, "kCBMsgArgC256", a5, 0x10uLL);
            }
            if (a6) {
              xpc_dictionary_set_data(v16, "kCBMsgArgR256", a6, 0x10uLL);
            }
            sub_1002D7B48(*(void *)(v14 + 64), "kCBMsgIdPairingAgentOOBDataReady", v16, 1);
          }
        }
      }
      uint64_t v17 = (void *)v12[1];
      if (v17)
      {
        do
        {
          BOOL v18 = v17;
          uint64_t v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          BOOL v18 = (void *)v12[2];
          BOOL v19 = *v18 == (void)v12;
          uint64_t v12 = v18;
        }
        while (!v19);
      }
      uint64_t v12 = v18;
    }
    while (v18 != v13);
  }
  return sub_10003AFB4((uint64_t)v21);
}

void sub_1004CD810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004CD824(uint64_t result, unsigned int a2, uint64_t a3, int a4, uint64_t a5)
{
  if (a5) {
    return sub_1004CCF28(a5, result, a2, a3, a4);
  }
  return result;
}

uint64_t sub_1004CD848(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a4) {
    return sub_1004CD0AC(a4, result, a2, a3);
  }
  return result;
}

uint64_t sub_1004CD868(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a4) {
    return sub_1004CD218(a4, result, a2, a3);
  }
  return result;
}

uint64_t sub_1004CD888(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  if (a5) {
    return sub_1004CD384(a5, result, a2, a3, a4);
  }
  return result;
}

uint64_t sub_1004CD8AC(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a4) {
    return sub_1004CD508(a4, result, a2, a3);
  }
  return result;
}

uint64_t sub_1004CD8CC(uint64_t result, const void *a2, const void *a3, const void *a4, const void *a5, uint64_t a6)
{
  if (a6) {
    return sub_1004CD674(a6, result, a2, a3, a4, a5);
  }
  return result;
}

void *sub_1004CD8F4(void *a1, uint64_t a2)
{
  unint64_t v3 = sub_1004EEEA8(a1, a2);
  void *v3 = &off_1009B1770;
  v3[12] = 0;
  v3[11] = 0;
  v3[10] = v3 + 11;
  if (qword_100A132D0 != -1) {
    dispatch_once(&qword_100A132D0, &stru_1009B1790);
  }
  return a1;
}

void sub_1004CD970(id a1)
{
  uint64_t v13 = "kCBMsgIdPairingAgentCreateMsg";
  uint64_t v14 = 29;
  xpc_object_t v15 = &v13;
  uint64_t v1 = sub_1004CEDA8((uint64_t)&xmmword_100A19C40, (uint64_t)&v13, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v15);
  v1[4] = sub_1004CDCAC;
  void v1[5] = 0;
  uint64_t v13 = "kCBMsgIdPairingAgentDestroyMsg";
  uint64_t v14 = 30;
  xpc_object_t v15 = &v13;
  uint64_t v2 = sub_1004CEDA8((uint64_t)&xmmword_100A19C40, (uint64_t)&v13, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v15);
  v2[4] = sub_1004CDF10;
  v2[5] = 0;
  uint64_t v13 = "kCBMsgIdPairingAgentStartMsg";
  uint64_t v14 = 28;
  xpc_object_t v15 = &v13;
  unint64_t v3 = sub_1004CEDA8((uint64_t)&xmmword_100A19C40, (uint64_t)&v13, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v15);
  void v3[4] = sub_1004CE140;
  void v3[5] = 0;
  uint64_t v13 = "kCBMsgIdPairingAgentStopMsg";
  uint64_t v14 = 27;
  xpc_object_t v15 = &v13;
  unint64_t v4 = sub_1004CEDA8((uint64_t)&xmmword_100A19C40, (uint64_t)&v13, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v15);
  v4[4] = sub_1004CE208;
  void v4[5] = 0;
  uint64_t v13 = "kCBMsgIdPairingAgentCancelPairingMsg";
  uint64_t v14 = 36;
  xpc_object_t v15 = &v13;
  uint64_t v5 = sub_1004CEDA8((uint64_t)&xmmword_100A19C40, (uint64_t)&v13, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v15);
  v5[4] = sub_1004CE2D0;
  void v5[5] = 0;
  uint64_t v13 = "kCBMsgIdPairingAgentSetPincodeMsg";
  uint64_t v14 = 33;
  xpc_object_t v15 = &v13;
  int64_t v6 = sub_1004CEDA8((uint64_t)&xmmword_100A19C40, (uint64_t)&v13, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v15);
  v6[4] = sub_1004CE398;
  _OWORD v6[5] = 0;
  uint64_t v13 = "kCBMsgIdPairingAgentAcceptSSPMsg";
  uint64_t v14 = 32;
  xpc_object_t v15 = &v13;
  int64_t v7 = sub_1004CEDA8((uint64_t)&xmmword_100A19C40, (uint64_t)&v13, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v15);
  void v7[4] = sub_1004CE49C;
  void v7[5] = 0;
  uint64_t v13 = "kCBMsgIdPairingAgentDeletePairedDeviceMsg";
  uint64_t v14 = 41;
  xpc_object_t v15 = &v13;
  uint64_t v8 = sub_1004CEDA8((uint64_t)&xmmword_100A19C40, (uint64_t)&v13, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v15);
  v8[4] = sub_1004CE5A0;
  v8[5] = 0;
  uint64_t v13 = "kCBMsgIdPairingAgentSetIOCapabilityMsg";
  uint64_t v14 = 38;
  xpc_object_t v15 = &v13;
  uint64_t v9 = sub_1004CEDA8((uint64_t)&xmmword_100A19C40, (uint64_t)&v13, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v15);
  void v9[4] = sub_1004CE68C;
  void v9[5] = 0;
  uint64_t v13 = "kCBMsgIdPairingAgentClearOOBDataForDeviceMsg";
  uint64_t v14 = 44;
  xpc_object_t v15 = &v13;
  uint64_t v10 = sub_1004CEDA8((uint64_t)&xmmword_100A19C40, (uint64_t)&v13, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v15);
  void v10[4] = sub_1004CE778;
  void v10[5] = 0;
  uint64_t v13 = "kCBMsgIdPairingAgentSetOOBDataForDeviceMsg";
  uint64_t v14 = 42;
  xpc_object_t v15 = &v13;
  xpc_object_t v11 = sub_1004CEDA8((uint64_t)&xmmword_100A19C40, (uint64_t)&v13, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v15);
  uint8_t v11[4] = sub_1004CE864;
  void v11[5] = 0;
  uint64_t v13 = "kCBMsgIdPairingAgentGetLocalOOBDataMsg";
  uint64_t v14 = 38;
  xpc_object_t v15 = &v13;
  uint64_t v12 = sub_1004CEDA8((uint64_t)&xmmword_100A19C40, (uint64_t)&v13, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v15);
  void v12[4] = sub_1004CEAF4;
  void v12[5] = 0;
}

uint64_t sub_1004CDCAC(uint64_t a1, xpc_object_t xdict)
{
  uint64_t value = 0;
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgSessionID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgID");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG)) {
    sub_100770B3C();
  }
  v15[0] = 0;
  v15[1] = 0;
  sub_10003AED0((uint64_t)v15, a1 + 8);
  if (uint64)
  {
    uint64_t v7 = *(void *)(a1 + 72);
    int v8 = *(_DWORD *)(v7 + 40);
    au_asid_t asid = xpc_connection_get_asid(*(xpc_connection_t *)(v7 + 16));
    if (qword_1009F8168 != -1) {
      dispatch_once(&qword_1009F8168, &stru_1009B17B0);
    }
    if (sub_100553F34(qword_1009F8160, uint64, v8, asid))
    {
      uint64_t v10 = malloc_type_calloc(1uLL, 0x48uLL, 0x10A00405596F149uLL);
      uint64_t v14 = v10;
      *uint64_t v10 = sub_1004CD824;
      v10[1] = sub_1004CD848;
      void v10[2] = sub_1004CD868;
      uint64_t v10[3] = sub_1004CD888;
      void v10[5] = sub_1004CD8CC;
      v10[6] = v6;
      void v10[4] = sub_1004CD8AC;
      v10[8] = *(void *)(a1 + 72);
      LODWORD(uint64) = sub_1005FFEAC(uint64, v10, a1, &value);
      if (uint64)
      {
        free(v10);
      }
      else
      {
        v10[7] = value;
        sub_100051620((uint64_t **)(a1 + 80), (unint64_t *)&v14, (uint64_t *)&v14);
      }
      uint64_t uint64 = (int)uint64;
    }
    else
    {
      uint64_t uint64 = 7;
    }
  }
  else
  {
    uint64_t uint64 = 1;
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  uint64_t v12 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgPairingAgentID", value);
    xpc_dictionary_set_uint64(v12, "kCBMsgArgResult", uint64);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v12);
    xpc_release(v12);
  }
  return sub_10003AFB4((uint64_t)v15);
}

void sub_1004CDEF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004CDF10(void *a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgPairingAgentID");
  uint64_t v6 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG)) {
    sub_100770BA4(uint64, v6, v7, v8, v9, v10, v11, v12);
  }
  if (uint64)
  {
    v22[1] = 0;
    uint64_t v23 = uint64;
    v22[0] = 0;
    sub_10003AED0((uint64_t)v22, (uint64_t)(a1 + 1));
    uint64_t v13 = (void *)a1[10];
    if (v13 != a1 + 11)
    {
      int v14 = 0;
      while (1)
      {
        uint64_t v21 = (void *)v13[4];
        if (v23 == *((void *)v21 + 7))
        {
          int v14 = sub_1005FFF4C(&v23);
          if (!v14)
          {
            sub_1000517A4((uint64_t)(a1 + 10), (unint64_t *)&v21);
            free(v21);
            break;
          }
          xpc_object_t v15 = qword_100A19EC8;
          if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 134217984;
            uint64_t v25 = uint64;
            _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Could not destroy pairing agent %llx", buf, 0xCu);
          }
        }
        uint64_t v16 = (void *)v13[1];
        if (v16)
        {
          do
          {
            uint64_t v17 = v16;
            uint64_t v16 = (void *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            uint64_t v17 = (void *)v13[2];
            BOOL v18 = *v17 == (void)v13;
            uint64_t v13 = v17;
          }
          while (!v18);
        }
        uint64_t v13 = v17;
        if (v17 == a1 + 11) {
          goto LABEL_20;
        }
      }
    }
    int v14 = 0;
LABEL_20:
    sub_10003AFB4((uint64_t)v22);
  }
  else
  {
    int v14 = 0;
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  int64_t v20 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v14);
    xpc_connection_send_message(*(xpc_connection_t *)(a1[9] + 16), v20);
    xpc_release(v20);
  }
}

void sub_1004CE120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004CE140(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgPairingAgentID");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100770C14();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1005FFFAC(uint64);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1004CE208(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgPairingAgentID");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100770C7C();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_10060002C(uint64);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1004CE2D0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgPairingAgentID");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100770CE4();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1006000AC(uint64);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1004CE398(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgPairingAgentID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  string = (char *)xpc_dictionary_get_string(value, "kCBMsgIdPairingAgentPincode");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100770D4C();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v8 = (int)sub_100600128(uint64, v6, string);
    goto LABEL_6;
  }
  uint64_t v8 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1004CE49C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgPairingAgentID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  int v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgError");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100770DB4();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v8 = (int)sub_100600274(uint64, v6, v7);
    goto LABEL_6;
  }
  uint64_t v8 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1004CE5A0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgPairingAgentID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100770E1C();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_100600350(uint64, v6);
    goto LABEL_6;
  }
  uint64_t v7 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1004CE68C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgPairingAgentID");
  int v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgIOCapabilities");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100770E84();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_100600758(uint64, v6);
    goto LABEL_6;
  }
  uint64_t v7 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1004CE778(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgPairingAgentID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100770EEC();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_10060081C(uint64, v6);
    goto LABEL_6;
  }
  uint64_t v7 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1004CE864(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgPairingAgentID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  size_t length = 0;
  int data = xpc_dictionary_get_data(value, "kCBMsgArgC192", &length);
  if (length == 16)
  {
    unsigned int v8 = 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_FAULT)) {
      sub_100771058();
    }
    unsigned int v8 = 3;
  }
  size_t v19 = 0;
  uint64_t v9 = xpc_dictionary_get_data(value, "kCBMsgArgR192", &v19);
  if (v19 != 16)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_FAULT)) {
      sub_100771024();
    }
    unsigned int v8 = 3;
  }
  size_t v18 = 0;
  uint64_t v10 = xpc_dictionary_get_data(value, "kCBMsgArgC256", &v18);
  if (v18 != 16)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_FAULT)) {
      sub_100770FF0();
    }
    unsigned int v8 = 3;
  }
  size_t v17 = 0;
  uint64_t v11 = xpc_dictionary_get_data(value, "kCBMsgArgR256", &v17);
  if (v17 != 16)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_FAULT)) {
      sub_100770FBC();
    }
    unsigned int v8 = 3;
    goto LABEL_22;
  }
  if (v8)
  {
LABEL_22:
    xpc_object_t reply = xpc_dictionary_create_reply(xdict);
    if (!reply) {
      return;
    }
    xpc_object_t v15 = reply;
    uint64_t v16 = v8;
    goto LABEL_24;
  }
  uint64_t v12 = (uint64_t)v11;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100770F54();
    if (uint64) {
      goto LABEL_18;
    }
  }
  else if (uint64)
  {
LABEL_18:
    uint64_t v13 = (int)sub_100600914(uint64, v6, (uint64_t)data, (uint64_t)v9, (uint64_t)v10, v12);
    goto LABEL_28;
  }
  uint64_t v13 = 1;
LABEL_28:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    xpc_object_t v15 = reply;
    uint64_t v16 = v13;
LABEL_24:
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v16);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v15);
    xpc_release(v15);
  }
}

void sub_1004CEAF4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgPairingAgentID");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10077108C();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_100600B20(uint64);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    unsigned int v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1004CEBC4(void *a1)
{
  sub_1003EB750(a1);

  operator delete();
}

BOOL sub_1004CEBFC(uint64_t a1, xpc_object_t xdict)
{
  string = xpc_dictionary_get_string(xdict, "kCBMsgId");
  uint64_t v11 = string;
  size_t v12 = strlen(string);
  uint64_t v5 = sub_1003C2560(&xmmword_100A19C40, (uint64_t)&v11);
  if (v5)
  {
    uint64_t v11 = string;
    size_t v12 = strlen(string);
    uint64_t v13 = &v11;
    uint64_t v6 = sub_1004CEDA8((uint64_t)&xmmword_100A19C40, (uint64_t)&v11, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v13);
    uint64_t v7 = (void (*)(void *, xpc_object_t))v6[4];
    uint64_t v8 = v6[5];
    uint64_t v9 = (void *)(a1 + (v8 >> 1));
    if (v8) {
      uint64_t v7 = *(void (**)(void *, xpc_object_t))(*v9 + v7);
    }
    v7(v9, xdict);
  }
  return v5 != 0;
}

uint64_t sub_1004CECF8(void *a1)
{
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, (uint64_t)(a1 + 1));
  uint64_t v2 = (void *)a1[10];
  unint64_t v3 = a1 + 11;
  if (v2 != a1 + 11)
  {
    do
    {
      free((void *)v2[4]);
      xpc_object_t v4 = (void *)v2[1];
      if (v4)
      {
        do
        {
          uint64_t v5 = v4;
          xpc_object_t v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v5 = (void *)v2[2];
          BOOL v6 = *v5 == (void)v2;
          uint64_t v2 = v5;
        }
        while (!v6);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  sub_1000486F0((uint64_t)(a1 + 10), (void *)a1[11]);
  a1[11] = 0;
  a1[12] = 0;
  a1[10] = v3;
  return sub_10003AFB4((uint64_t)v8);
}

void *sub_1004CEDA8(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = sub_1003C208C((uint64_t)&v29, *(uint64_t **)a2, *(void *)(a2 + 8));
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v12 = v7;
      if (v7 >= v9) {
        unint64_t v12 = v7 % v9;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v7;
    }
    uint64_t v13 = *(void ***)(*(void *)a1 + 8 * v12);
    if (v13)
    {
      int v14 = *v13;
      if (*v13)
      {
        uint64_t v17 = a2;
        xpc_object_t v15 = *(uint64_t **)a2;
        size_t v16 = *(void *)(v17 + 8);
        do
        {
          unint64_t v18 = *((void *)v14 + 1);
          if (v18 == v8)
          {
            if (*((void *)v14 + 3) == v16 && !memcmp(*((const void **)v14 + 2), v15, v16)) {
              return v14;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v18 >= v9) {
                v18 %= v9;
              }
            }
            else
            {
              v18 &= v9 - 1;
            }
            if (v18 != v12) {
              break;
            }
          }
          int v14 = *(void **)v14;
        }
        while (v14);
      }
    }
  }
  else
  {
    unint64_t v12 = 0;
  }
  int v14 = operator new(0x30uLL);
  *(void *)int v14 = 0;
  *((void *)v14 + 1) = v8;
  *((_OWORD *)v14 + 1) = **a4;
  *((void *)v14 + 4) = 0;
  *((void *)v14 + 5) = 0;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    BOOL v21 = 1;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    sub_1000A9204(a1, v24);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v12 = v8 % v9;
      }
      else {
        unint64_t v12 = v8;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v8;
    }
  }
  uint64_t v25 = *(void *)a1;
  uint64_t v26 = *(void **)(*(void *)a1 + 8 * v12);
  if (v26)
  {
    *(void *)int v14 = *v26;
LABEL_40:
    *uint64_t v26 = v14;
    goto LABEL_41;
  }
  *(void *)int v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v25 + 8 * v12) = a1 + 16;
  if (*(void *)v14)
  {
    unint64_t v27 = *(void *)(*(void *)v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9) {
        v27 %= v9;
      }
    }
    else
    {
      v27 &= v9 - 1;
    }
    uint64_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_40;
  }
LABEL_41:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1004CF000(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1004CF014(id a1)
{
}

void sub_1004CF058()
{
}

void sub_1004CF07C()
{
  xmmword_100A19C40 = 0u;
  *(_OWORD *)algn_100A19C50 = 0u;
  dword_100A19C60 = 1065353216;
  __cxa_atexit((void (*)(void *))sub_1004CCF24, &xmmword_100A19C40, (void *)&_mh_execute_header);
}

uint64_t sub_1004CF0E8(uint64_t a1)
{
  return a1;
}

void sub_1004CF114(uint64_t a1)
{
  *(void *)a1 = off_1009B17E0;
  *(void *)(a1 + 8) = off_1009B1850;
  *(void *)(a1 + 16) = off_1009B1880;
  *(void *)(a1 + 24) = off_1009B18B0;
  *(void *)(a1 + 32) = &off_1009B18D0;
  sub_100052DA8(a1 + 40);
  *(_WORD *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 114) = 0;
  sub_100052DA8(a1 + 120);
  uint64_t v2 = a1 + 184;
  *(void *)(a1 + 184) = a1 + 184;
  *(void *)(a1 + 192) = a1 + 184;
  *(void *)(a1 + 20sub_1004C2140(qword_100A19B68, 0) = 0;
  sub_100052DA8(a1 + 208);
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  sub_100052DA8(a1 + 320);
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 40sub_1004C2140(qword_100A19B68, 0) = 0;
  sub_100052DA8(a1 + 408);
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 48sub_1004C2140(qword_100A19B68, 0) = 0;
  *(void *)(a1 + 488) = 0;
  sub_100052DA8(a1 + 496);
  sub_1002B80C0((pthread_cond_t *)(a1 + 560));
  *(void *)(a1 + 608) = a1 + 608;
  *(void *)(a1 + 616) = a1 + 608;
  *(void *)(a1 + 624) = 0;
  sub_100052DA8(a1 + 632);
  *(_WORD *)(a1 + 70sub_1004C2140(qword_100A19B68, 0) = 0;
  *(_DWORD *)(a1 + 696) = 0;
  char v78 = 0;
  uint64_t v3 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 8))(v3))
  {
    uint64_t v4 = sub_100017768();
    sub_10004191C(v76, "WiAP");
    sub_10004191C(__p, "enableSink");
    (*(void (**)(uint64_t, void **, void **, char *))(*(void *)v4 + 72))(v4, v76, __p, &v78);
    if (v75 < 0) {
      operator delete(__p[0]);
    }
    if (v77 < 0) {
      operator delete(v76[0]);
    }
  }
  uint64_t v5 = sub_100035F54();
  v76[0] = 0;
  v76[1] = 0;
  sub_10003AED0((uint64_t)v76, a1 + 120);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v5 + 48))(v5, 1))
  {
    BOOL v6 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Supporting service handsfree", (uint8_t *)__p, 2u);
    }
    if (qword_1009FB938 != -1) {
      dispatch_once(&qword_1009FB938, &stru_1009B1968);
    }
    uint64_t v7 = qword_1009FB930;
    unint64_t v8 = operator new(0x18uLL);
    v8[1] = v2;
    void v8[2] = v7;
    uint64_t v9 = *(void *)(a1 + 184);
    *unint64_t v8 = v9;
    *(void *)(v9 + 8) = v8;
    *(void *)(a1 + 184) = v8;
    ++*(void *)(a1 + 200);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v5 + 48))(v5, 2))
  {
    uint8x8_t v10 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Supporting service phonebook", (uint8_t *)__p, 2u);
    }
    if (qword_1009FB948 != -1) {
      dispatch_once(&qword_1009FB948, &stru_1009B1988);
    }
    unint64_t v11 = off_1009FB940;
    unint64_t v12 = operator new(0x18uLL);
    v12[1] = v2;
    void v12[2] = v11;
    uint64_t v13 = *(void *)(a1 + 184);
    *unint64_t v12 = v13;
    *(void *)(v13 + 8) = v12;
    *(void *)(a1 + 184) = v12;
    ++*(void *)(a1 + 200);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v5 + 48))(v5, 32))
  {
    int v14 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Supporting service HID", (uint8_t *)__p, 2u);
    }
    if (qword_1009FB7C8 != -1) {
      dispatch_once(&qword_1009FB7C8, &stru_1009B19A8);
    }
    xpc_object_t v15 = off_1009FB7C0;
    size_t v16 = operator new(0x18uLL);
    v16[1] = v2;
    void v16[2] = v15;
    uint64_t v17 = *(void *)(a1 + 184);
    void *v16 = v17;
    *(void *)(v17 + 8) = v16;
    *(void *)(a1 + 184) = v16;
    ++*(void *)(a1 + 200);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v5 + 48))(v5, 16))
  {
    unint64_t v18 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Supporting service A2DP", (uint8_t *)__p, 2u);
    }
    if (qword_1009FB958 != -1) {
      dispatch_once(&qword_1009FB958, &stru_1009B19C8);
    }
    float v19 = off_1009FB950;
    float v20 = operator new(0x18uLL);
    v20[1] = v2;
    void v20[2] = v19;
    uint64_t v21 = *(void *)(a1 + 184);
    *float v20 = v21;
    *(void *)(v21 + 8) = v20;
    *(void *)(a1 + 184) = v20;
    ++*(void *)(a1 + 200);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v5 + 48))(v5, 8))
  {
    unint64_t v22 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Supporting service Remote", (uint8_t *)__p, 2u);
    }
    if (qword_1009FB968 != -1) {
      dispatch_once(&qword_1009FB968, &stru_1009B19E8);
    }
    unint64_t v23 = off_1009FB960;
    size_t v24 = operator new(0x18uLL);
    v24[1] = v2;
    void v24[2] = v23;
    uint64_t v25 = *(void *)(a1 + 184);
    void *v24 = v25;
    *(void *)(v25 + 8) = v24;
    *(void *)(a1 + 184) = v24;
    ++*(void *)(a1 + 200);
  }
  int v26 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 48))(v5, 128);
  if (v78) {
    int v27 = 0;
  }
  else {
    int v27 = v26;
  }
  if (v27 == 1)
  {
    uint64_t v28 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Supporting service WirelessiAP", (uint8_t *)__p, 2u);
    }
    if (qword_1009FB150 != -1) {
      dispatch_once(&qword_1009FB150, &stru_1009B1A08);
    }
    char v29 = off_1009FB148;
    long long v30 = operator new(0x18uLL);
    v30[1] = v2;
    void v30[2] = v29;
    uint64_t v31 = *(void *)(a1 + 184);
    void *v30 = v31;
    *(void *)(v31 + 8) = v30;
    *(void *)(a1 + 184) = v30;
    ++*(void *)(a1 + 200);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v5 + 48))(v5, 256))
  {
    long long v32 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Supporting service NetSharing", (uint8_t *)__p, 2u);
    }
    if (qword_1009FB978 != -1) {
      dispatch_once(&qword_1009FB978, &stru_1009B1A28);
    }
    uint64_t v33 = qword_1009FB970;
    int v34 = operator new(0x18uLL);
    v34[1] = v2;
    void v34[2] = v33;
    uint64_t v35 = *(void *)(a1 + 184);
    *int v34 = v35;
    *(void *)(v35 + 8) = v34;
    *(void *)(a1 + 184) = v34;
    ++*(void *)(a1 + 200);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v5 + 48))(v5, 4096))
  {
    uint64_t v36 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Supporting service NetConsumer", (uint8_t *)__p, 2u);
    }
    if (qword_1009FB988 != -1) {
      dispatch_once(&qword_1009FB988, &stru_1009B1A48);
    }
    uint64_t v37 = qword_1009FB980;
    uint64_t v38 = operator new(0x18uLL);
    v38[1] = v2;
    v38[2] = v37;
    uint64_t v39 = *(void *)(a1 + 184);
    void *v38 = v39;
    *(void *)(v39 + 8) = v38;
    *(void *)(a1 + 184) = v38;
    ++*(void *)(a1 + 200);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v5 + 48))(v5, 2048))
  {
    uint64_t v40 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Supporting service Gaming", (uint8_t *)__p, 2u);
    }
    if (qword_1009FB998 != -1) {
      dispatch_once(&qword_1009FB998, &stru_1009B1A68);
    }
    uint64_t v41 = off_1009FB990;
    uint64_t v42 = operator new(0x18uLL);
    v42[1] = v2;
    v42[2] = v41;
    uint64_t v43 = *(void *)(a1 + 184);
    *uint64_t v42 = v43;
    *(void *)(v43 + 8) = v42;
    *(void *)(a1 + 184) = v42;
    ++*(void *)(a1 + 200);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v5 + 48))(v5, 0x2000))
  {
    uint64_t v44 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "Supporting service Braille", (uint8_t *)__p, 2u);
    }
    if (qword_1009FB9A8 != -1) {
      dispatch_once(&qword_1009FB9A8, &stru_1009B1A88);
    }
    uint64_t v45 = qword_1009FB9A0;
    unint64_t v46 = operator new(0x18uLL);
    v46[1] = v2;
    v46[2] = v45;
    uint64_t v47 = *(void *)(a1 + 184);
    *unint64_t v46 = v47;
    *(void *)(v47 + 8) = v46;
    *(void *)(a1 + 184) = v46;
    ++*(void *)(a1 + 200);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v5 + 48))(v5, 512))
  {
    __int16 v48 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "Supporting service MAP", (uint8_t *)__p, 2u);
    }
    if (qword_1009FB398 != -1) {
      dispatch_once(&qword_1009FB398, &stru_1009B1AA8);
    }
    uint64_t v49 = qword_1009FB390;
    uint64_t v50 = operator new(0x18uLL);
    v50[1] = v2;
    void v50[2] = v49;
    uint64_t v51 = *(void *)(a1 + 184);
    void *v50 = v51;
    *(void *)(v51 + 8) = v50;
    *(void *)(a1 + 184) = v50;
    ++*(void *)(a1 + 200);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v5 + 48))(v5, 0x10000))
  {
    uint64_t v52 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "Supporting service LE Audio", (uint8_t *)__p, 2u);
    }
    if (qword_1009FB9B8 != -1) {
      dispatch_once(&qword_1009FB9B8, &stru_1009B1AC8);
    }
    uint64_t v53 = qword_1009FB9B0;
    long long v54 = operator new(0x18uLL);
    v54[1] = v2;
    v54[2] = v53;
    uint64_t v55 = *(void *)(a1 + 184);
    void *v54 = v55;
    *(void *)(v55 + 8) = v54;
    *(void *)(a1 + 184) = v54;
    ++*(void *)(a1 + 200);
  }
  int v56 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 48))(v5, 0x20000);
  if (v78) {
    int v57 = v56;
  }
  else {
    int v57 = 0;
  }
  if (v57 == 1)
  {
    uint64_t v58 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "Supporting service WirelessiAPSink", (uint8_t *)__p, 2u);
    }
    if (qword_1009FB9C8 != -1) {
      dispatch_once(&qword_1009FB9C8, &stru_1009B1AE8);
    }
    uint64_t v59 = qword_1009FB9C0;
    long long v60 = operator new(0x18uLL);
    v60[1] = v2;
    v60[2] = v59;
    uint64_t v61 = *(void *)(a1 + 184);
    void *v60 = v61;
    *(void *)(v61 + 8) = v60;
    *(void *)(a1 + 184) = v60;
    ++*(void *)(a1 + 200);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v5 + 48))(v5, 0x40000))
  {
    uint64_t v62 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "Supporting service WirelessCarPlay", (uint8_t *)__p, 2u);
    }
    if (qword_1009FB9D8 != -1) {
      dispatch_once(&qword_1009FB9D8, &stru_1009B1B08);
    }
    uint64_t v63 = qword_1009FB9D0;
    uint64_t v64 = operator new(0x18uLL);
    v64[1] = v2;
    v64[2] = v63;
    uint64_t v65 = *(void *)(a1 + 184);
    *uint64_t v64 = v65;
    *(void *)(v65 + 8) = v64;
    *(void *)(a1 + 184) = v64;
    ++*(void *)(a1 + 200);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v5 + 48))(v5, 0x80000))
  {
    int v66 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "Supporting service AACP Client", (uint8_t *)__p, 2u);
    }
    if (qword_1009FB140 != -1) {
      dispatch_once(&qword_1009FB140, &stru_1009B1B28);
    }
    uint64_t v67 = off_1009FB138;
    char v68 = operator new(0x18uLL);
    v68[1] = v2;
    v68[2] = v67;
    uint64_t v69 = *(void *)(a1 + 184);
    *char v68 = v69;
    *(void *)(v69 + 8) = v68;
    *(void *)(a1 + 184) = v68;
    ++*(void *)(a1 + 200);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v5 + 48))(v5, 0x100000))
  {
    uint64_t v70 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "Supporting service GATT", (uint8_t *)__p, 2u);
    }
    if (qword_1009FB9E8 != -1) {
      dispatch_once(&qword_1009FB9E8, &stru_1009B1B48);
    }
    uint64_t v71 = qword_1009FB9E0;
    uint64_t v72 = operator new(0x18uLL);
    v72[1] = v2;
    v72[2] = v71;
    uint64_t v73 = *(void *)(a1 + 184);
    *uint64_t v72 = v73;
    *(void *)(v73 + 8) = v72;
    *(void *)(a1 + 184) = v72;
    ++*(void *)(a1 + 200);
  }
  sub_10003AFE8((uint64_t)v76);
  operator new();
}

void sub_1004D008C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  sub_10003AFB4((uint64_t)&a20);
  sub_100052DA4(v25);
  sub_1002B308C(v32);
  sub_1002B812C(v31);
  sub_100052DA4(v30);
  int v34 = (void *)v26[59];
  if (v34)
  {
    v26[60] = v34;
    operator delete(v34);
  }
  sub_100052DA4(v29);
  uint64_t v35 = (void *)v26[48];
  if (v35)
  {
    v26[49] = v35;
    operator delete(v35);
  }
  sub_100052DA4(a10);
  sub_1004CC664(v26 + 34);
  sub_100052DA4(a11);
  sub_1002B308C(v28);
  sub_100052DA4(v27);
  sub_100052DA4(a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1004D01FC(uint64_t a1)
{
  *(void *)a1 = off_1009B17E0;
  *(void *)(a1 + 8) = off_1009B1850;
  *(void *)(a1 + 16) = off_1009B1880;
  *(void *)(a1 + 24) = off_1009B18B0;
  *(void *)(a1 + 32) = &off_1009B18D0;
  v8[0] = 0;
  v8[1] = 0;
  uint64_t v2 = a1 + 120;
  sub_10003AED0((uint64_t)v8, a1 + 120);
  sub_1002B308C((void *)(a1 + 184));
  *(_WORD *)(a1 + 70sub_1004C2140(qword_100A19B68, 0) = 0;
  *(_DWORD *)(a1 + 696) = 0;
  sub_10003AFE8((uint64_t)v8);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 40);
  uint64_t v3 = *(void *)(a1 + 104);
  if (v3)
  {
    sub_1004AFF30(v3);
    operator delete();
  }
  sub_10003AFB4((uint64_t)v7);
  sub_10003AFB4((uint64_t)v8);
  sub_100052DA4(a1 + 632);
  sub_1002B308C((void *)(a1 + 608));
  sub_1002B812C(a1 + 560);
  sub_100052DA4(a1 + 496);
  uint64_t v4 = *(void **)(a1 + 472);
  if (v4)
  {
    *(void *)(a1 + 48sub_1004C2140(qword_100A19B68, 0) = v4;
    operator delete(v4);
  }
  sub_100052DA4(a1 + 408);
  uint64_t v5 = *(void **)(a1 + 384);
  if (v5)
  {
    *(void *)(a1 + 392) = v5;
    operator delete(v5);
  }
  sub_100052DA4(a1 + 320);
  sub_1004CC664((void *)(a1 + 272));
  sub_100052DA4(a1 + 208);
  sub_1002B308C((void *)(a1 + 184));
  sub_100052DA4(v2);
  sub_100052DA4(a1 + 40);
  return a1;
}

void sub_1004D03B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  sub_100052DA4(v3 + 79);
  sub_1002B308C(v3 + 76);
  sub_1002B812C(v3 + 70);
  sub_100052DA4(v3 + 62);
  BOOL v6 = (void *)v3[59];
  if (v6)
  {
    v3[60] = v6;
    operator delete(v6);
  }
  sub_100052DA4(v3 + 51);
  uint64_t v7 = (void *)v3[48];
  if (v7)
  {
    v3[49] = v7;
    operator delete(v7);
  }
  sub_100052DA4(v3 + 40);
  sub_1004CC664(v3 + 34);
  sub_100052DA4(v3 + 26);
  sub_1002B308C(v3 + 23);
  sub_100052DA4(v4);
  sub_100052DA4(v3 + 5);
  _Unwind_Resume(a1);
}

uint64_t sub_1004D0454(uint64_t a1)
{
  return sub_1004D01FC(a1 - 32);
}

void sub_1004D045C(uint64_t a1)
{
  sub_1004D01FC(a1);

  operator delete();
}

void sub_1004D0494(uint64_t a1)
{
  sub_1004D01FC(a1 - 32);

  operator delete();
}

uint64_t sub_1004D04D0(uint64_t a1)
{
  v3[0] = 0;
  v3[1] = 0;
  sub_10003AED0((uint64_t)v3, a1 + 40);
  sub_1004AF98C(*(void *)(a1 + 104), QOS_CLASS_USER_INITIATED);
  sub_10003AFE8((uint64_t)v3);
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009B1B68);
  }
  sub_100457490(qword_1009F8160 + 8, a1 + 24);
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B1B88);
  }
  sub_10026B36C((uint64_t)off_1009F8068 + 64, a1 + 8);
  return sub_10003AFB4((uint64_t)v3);
}

void sub_1004D059C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004D05B0(uint64_t a1)
{
  *(_WORD *)(a1 + 70sub_1004C2140(qword_100A19B68, 0) = 0;
  *(_DWORD *)(a1 + 696) = 0;
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B1B88);
  }
  sub_100052718((uint64_t)off_1009F8068 + 64, a1 + 8);
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009B1B68);
  }
  sub_100052718(qword_1009F8160 + 8, a1 + 24);
  v3[0] = 0;
  v3[1] = 0;
  sub_10003AED0((uint64_t)v3, a1 + 40);
  sub_1004AFEC4(*(void *)(a1 + 104));
  return sub_10003AFB4((uint64_t)v3);
}

void sub_1004D0678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004D068C(uint64_t a1)
{
  v15[0] = 0;
  v15[1] = 0;
  sub_10003AED0((uint64_t)v15, a1 + 40);
  *(unsigned char *)(a1 + 112) = 1;
  *(_DWORD *)(a1 + 696) = 0;
  *(_WORD *)(a1 + 70sub_1004C2140(qword_100A19B68, 0) = 0;
  sub_10003AFE8((uint64_t)v15);
  v14[0] = 0;
  v14[1] = 0;
  sub_10003AED0((uint64_t)v14, a1 + 120);
  uint64_t v11 = 0;
  unint64_t v12 = 0;
  uint64_t v13 = 0;
  sub_1004DA374(&v11, a1 + 184);
  sub_10003AFE8((uint64_t)v14);
  uint64_t v2 = sub_10003FFD4();
  sub_10026B638(v2 + 368, a1 + 16);
  for (uint64_t i = v12; i != &v11; uint64_t i = (uint64_t *)i[1])
  {
    uint64_t v4 = i[2];
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    if (v5)
    {
      BOOL v6 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v4 + 192))(__p, v4);
        if (v10 >= 0) {
          uint64_t v7 = __p;
        }
        else {
          uint64_t v7 = (void **)__p[0];
        }
        *(_DWORD *)long long buf = 136446466;
        uint64_t v17 = v7;
        __int16 v18 = 1024;
        int v19 = v5;
        _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Could not start service %{public}s - result was %d", buf, 0x12u);
        if (v10 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  sub_1002B308C(&v11);
  sub_10003AFB4((uint64_t)v14);
  return sub_10003AFB4((uint64_t)v15);
}

void sub_1004D0890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_10003AFB4((uint64_t)va);
  sub_10003AFB4((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004D08D8(uint64_t a1)
{
  return sub_1004D068C(a1 - 8);
}

uint64_t sub_1004D08E0(uint64_t a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "ServiceManager::stackWillStop enter", buf, 2u);
  }
  v32[0] = 0;
  v32[1] = 0;
  sub_10003AED0((uint64_t)v32, a1 + 120);
  *(void *)long long buf = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  sub_1004DA374(buf, a1 + 184);
  sub_10003AFE8((uint64_t)v32);
  uint64_t v3 = sub_10003FFD4();
  sub_1002C4188(v3 + 368, a1 + 16);
  for (uint64_t i = v30; (uint8_t *)i != buf; uint64_t i = *(void *)(i + 8))
  {
    __p[0] = *(void **)(i + 16);
    if ((*(unsigned int (**)(void *))(*(void *)__p[0] + 32))(__p[0]))
    {
      *(_OWORD *)&v27.__r_.__value_.__l.__data_ = 0uLL;
      sub_10003AED0((uint64_t)&v27, a1 + 496);
      int v5 = operator new(0x18uLL);
      BOOL v6 = __p[0];
      v5[1] = a1 + 608;
      void v5[2] = v6;
      uint64_t v7 = *(void *)(a1 + 608);
      *int v5 = v7;
      *(void *)(v7 + 8) = v5;
      *(void *)(a1 + 608) = v5;
      ++*(void *)(a1 + 624);
      sub_10003AFE8((uint64_t)&v27);
      if ((*(unsigned int (**)(void *))(*(void *)__p[0] + 24))(__p[0]) != 113)
      {
        sub_10003AF00((uint64_t)&v27);
        sub_1004D0D90(a1 + 608, __p);
        sub_10003AFE8((uint64_t)&v27);
      }
      sub_10003AFB4((uint64_t)&v27);
    }
  }
  v28[0] = 0;
  v28[1] = 0;
  sub_10003AED0((uint64_t)v28, a1 + 496);
  while (*(void *)(a1 + 624))
  {
    if (!sub_10001BCA8((pthread_cond_t *)(a1 + 560), v28, 0x2710uLL))
    {
      unint64_t v8 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_1007710F4((uint64_t *)(a1 + 624), v8);
      }
      memset(&v27, 0, sizeof(v27));
      sub_10004191C(&v27, "ServiceManager shutdown failure, waiting for ");
      uint64_t v9 = *(void *)(*(void *)(a1 + 616) + 16);
      if (*(char *)(v9 + 31) < 0)
      {
        sub_10003B098(__p, *(void **)(v9 + 8), *(void *)(v9 + 16));
      }
      else
      {
        long long v18 = *(_OWORD *)(v9 + 8);
        uint64_t v26 = *(void *)(v9 + 24);
        *(_OWORD *)std::string __p = v18;
      }
      if (v26 >= 0) {
        int v19 = __p;
      }
      else {
        int v19 = (void **)__p[0];
      }
      if (v26 >= 0) {
        std::string::size_type v20 = HIBYTE(v26);
      }
      else {
        std::string::size_type v20 = (std::string::size_type)__p[1];
      }
      std::string::append(&v27, (const std::string::value_type *)v19, v20);
      if (SHIBYTE(v26) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v21 = sub_100017768();
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v22 = &v27;
      }
      else {
        unint64_t v22 = (std::string *)v27.__r_.__value_.__r.__words[0];
      }
      sub_10004191C(v24, (char *)v22);
      sub_1005C8AF4(v21, 3715, (uint64_t)v24, 1);
    }
  }
  sub_1002B308C((void *)(a1 + 608));
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = 0uLL;
  sub_10003AED0((uint64_t)&v27, a1 + 40);
  *(unsigned char *)(a1 + 112) = 0;
  sub_10003AFE8((uint64_t)&v27);
  __p[0] = 0;
  __p[1] = 0;
  sub_10003AED0((uint64_t)__p, a1 + 208);
  uint64_t v10 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "stack will stop, clearing the connection request queue", v23, 2u);
  }
  uint64_t v11 = *(void ***)(a1 + 280);
  uint64_t v12 = *(void *)(a1 + 288);
  *(void *)(a1 + 312) = 0;
  unint64_t v13 = v12 - (void)v11;
  if (v13 >= 0x11)
  {
    do
    {
      operator delete(*v11);
      uint64_t v14 = *(void *)(a1 + 288);
      uint64_t v11 = (void **)(*(void *)(a1 + 280) + 8);
      *(void *)(a1 + 28sub_1004C2140(qword_100A19B68, 0) = v11;
      unint64_t v13 = v14 - (void)v11;
    }
    while (v13 > 0x10);
  }
  if (v13 >> 3 == 1)
  {
    uint64_t v15 = 51;
  }
  else
  {
    if (v13 >> 3 != 2) {
      goto LABEL_25;
    }
    uint64_t v15 = 102;
  }
  *(void *)(a1 + 304) = v15;
LABEL_25:
  sub_1004D0E60((void *)a1);
  sub_10003AFE8((uint64_t)__p);
  size_t v16 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "ServiceManager::stackWillStop exit", v23, 2u);
  }
  sub_10003AFB4((uint64_t)__p);
  sub_10003AFB4((uint64_t)&v27);
  sub_10003AFB4((uint64_t)v28);
  sub_1002B308C(buf);
  return sub_10003AFB4((uint64_t)v32);
}

void sub_1004D0CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30)
{
  sub_10003AFB4((uint64_t)&a22);
  sub_10003AFB4((uint64_t)&a28);
  sub_1002B308C(&a30);
  sub_10003AFB4(v30 - 64);
  _Unwind_Resume(a1);
}

void *sub_1004D0D90(uint64_t a1, void *a2)
{
  v10[0] = (uint64_t)v10;
  v10[1] = (uint64_t)v10;
  void v10[2] = 0;
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2 != (void *)a1)
  {
    do
    {
      BOOL v6 = (void *)v2[1];
      uint64_t v5 = v2[2];
      if (v5 == *a2)
      {
        if (v6 == (void *)a1)
        {
          BOOL v8 = 1;
LABEL_8:
          BOOL v6 = (void *)a1;
        }
        else
        {
          while (1)
          {
            uint64_t v7 = v6[2];
            BOOL v8 = v7 == v5;
            if (v7 != v5) {
              break;
            }
            BOOL v6 = (void *)v6[1];
            if (v6 == (void *)a1) {
              goto LABEL_8;
            }
          }
        }
        sub_1004B6F90((uint64_t)v10, v10, a1, v2, v6);
        if (!v8) {
          BOOL v6 = (void *)v6[1];
        }
      }
      uint64_t v2 = v6;
    }
    while (v6 != (void *)a1);
  }
  return sub_1002B308C(v10);
}

void sub_1004D0E4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002B308C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004D0E60(void *a1)
{
  v19[0] = 0;
  v19[1] = 0;
  sub_10003AED0((uint64_t)v19, (uint64_t)(a1 + 26));
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "------------ Connection Requests ------------", buf, 2u);
  }
  unint64_t v3 = a1[38];
  uint64_t v4 = a1[35];
  uint64_t v5 = a1[36];
  BOOL v6 = (void *)(v4 + 8 * (v3 / 0x66));
  if (v5 == v4) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = *v6 + 40 * (v3 % 0x66);
  }
  while (1)
  {
    if (v5 == v4)
    {
      unint64_t v9 = 0;
    }
    else
    {
      unint64_t v8 = a1[39] + a1[38];
      unint64_t v9 = *(void *)(v4 + 8 * (v8 / 0x66)) + 40 * (v8 % 0x66);
    }
    uint64_t v10 = qword_100A19E50;
    BOOL v11 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT);
    if (v7 == v9) {
      break;
    }
    if (v11)
    {
      sub_100474E18(*(void *)v7, __p);
      uint64_t v12 = __p;
      if (v18 < 0) {
        uint64_t v12 = (void **)__p[0];
      }
      int v13 = *(_DWORD *)(v7 + 24);
      int v14 = *(_DWORD *)(v7 + 8);
      *(_DWORD *)long long buf = 136446722;
      uint64_t v21 = v12;
      __int16 v22 = 1024;
      int v23 = v13;
      __int16 v24 = 1024;
      int v25 = v14;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Device: %{public}s with Services: 0x%x and in state %d ", buf, 0x18u);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
    }
    v7 += 40;
    if (v7 - *v6 == 4080)
    {
      unint64_t v15 = v6[1];
      ++v6;
      unint64_t v7 = v15;
    }
    uint64_t v4 = a1[35];
    uint64_t v5 = a1[36];
  }
  if (v11)
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "----------------------------------------------", buf, 2u);
  }
  return sub_10003AFB4((uint64_t)v19);
}

void sub_1004D109C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

uint64_t sub_1004D10B8(uint64_t a1)
{
  return sub_1004D08E0(a1 - 8);
}

uint64_t sub_1004D10C0(uint64_t a1, uint64_t a2)
{
  v4[1] = 0;
  uint64_t v5 = a2;
  v4[0] = 0;
  sub_10003AED0((uint64_t)v4, a1 + 496);
  sub_1004D0D90(a1 + 608, &v5);
  sub_1002B818C((pthread_cond_t *)(a1 + 560));
  return sub_10003AFB4((uint64_t)v4);
}

void sub_1004D1118(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004D1130(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  v14[0] = 0;
  v14[1] = 0;
  sub_10003AED0((uint64_t)v14, (uint64_t)(a1 + 40));
  BOOL v11 = (void *)a1[48];
  unint64_t v10 = a1[49];
  uint64_t v16 = a3;
  if (v11 != (void *)v10)
  {
    while (*v11 != a2 || v16 != v11[1])
    {
      v11 += 4;
      if (v11 == (void *)v10) {
        goto LABEL_7;
      }
    }
  }
  if (v11 == (void *)v10)
  {
LABEL_7:
    uint64_t v15 = a2;
    uint64_t v16 = a3;
    int v17 = a4;
    uint64_t v18 = a5;
    if (v10 >= a1[50])
    {
      uint64_t v12 = sub_1004DA410(a1 + 48, (uint64_t)&v15);
    }
    else
    {
      *(void *)unint64_t v10 = a2;
      *(void *)(v10 + 8) = a3;
      *(_DWORD *)(v10 + 16) = a4;
      uint64_t v12 = v10 + 32;
      *(void *)(v10 + 24) = a5;
    }
    a1[49] = v12;
  }
  sub_10003AFB4((uint64_t)v14);
  return 0;
}

void sub_1004D1214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004D1228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 320);
  uint64_t v6 = sub_1004DA5B8(*(void *)(a1 + 384), *(void *)(a1 + 392), a2, a3);
  sub_1000515BC(a1 + 384, v6, *(void *)(a1 + 392));
  sub_10003AFB4((uint64_t)v8);
  return 0;
}

void sub_1004D129C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004D12B0(void *a1, uint64_t a2)
{
  v19[0] = 0;
  v19[1] = 0;
  sub_10003AED0((uint64_t)v19, (uint64_t)(a1 + 51));
  uint64_t v5 = (void *)a1[60];
  unint64_t v4 = a1[61];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = a1[59];
    uint64_t v8 = ((uint64_t)v5 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61) {
      abort();
    }
    uint64_t v9 = v4 - v7;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11) {
      uint64_t v12 = (char *)sub_1000405F8((uint64_t)(a1 + 61), v11);
    }
    else {
      uint64_t v12 = 0;
    }
    int v13 = &v12[8 * v8];
    int v14 = &v12[8 * v11];
    *(void *)int v13 = a2;
    uint64_t v6 = v13 + 8;
    uint64_t v16 = (char *)a1[59];
    uint64_t v15 = (char *)a1[60];
    if (v15 != v16)
    {
      do
      {
        uint64_t v17 = *((void *)v15 - 1);
        v15 -= 8;
        *((void *)v13 - 1) = v17;
        v13 -= 8;
      }
      while (v15 != v16);
      uint64_t v15 = (char *)a1[59];
    }
    a1[59] = v13;
    a1[60] = v6;
    a1[61] = v14;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *uint64_t v5 = a2;
    uint64_t v6 = v5 + 1;
  }
  a1[60] = v6;
  return sub_10003AFB4((uint64_t)v19);
}

void sub_1004D13A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004D13BC(uint64_t a1, uint64_t a2)
{
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 408);
  uint64_t v5 = *(char **)(a1 + 472);
  unint64_t v4 = *(char **)(a1 + 480);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 480);
        break;
      }
    }
  }
  if (v5 != v4)
  {
    int64_t v6 = v4 - (v5 + 8);
    if (v4 != v5 + 8) {
      memmove(v5, v5 + 8, v4 - (v5 + 8));
    }
    *(void *)(a1 + 48sub_1004C2140(qword_100A19B68, 0) = &v5[v6];
  }
  return sub_10003AFB4((uint64_t)v8);
}

uint64_t sub_1004D1458(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  v28[0] = 0;
  v28[1] = 0;
  sub_10003AED0((uint64_t)v28, a1 + 408);
  std::string __p = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  sub_100040550(&__p, a1 + 472);
  sub_10003AFE8((uint64_t)v28);
  uint64_t v12 = __p;
  if (__p != v26)
  {
    if (a5 == 12) {
      uint64_t v13 = a7;
    }
    else {
      uint64_t v13 = a6;
    }
    do
    {
      uint64_t v14 = v13;
      if ((a5 - 105) >= 0xFFFFFFFE)
      {
        sub_1002B7BC8(4);
        uint64_t v14 = a6;
      }
      (**(void (***)(void, uint64_t, uint64_t, uint64_t, uint64_t))*v12)(*v12, a2, a3, a5, v14);
      ++v12;
    }
    while (v12 != v26);
  }
  v24[0] = 0;
  v24[1] = 0;
  sub_10003AED0((uint64_t)v24, a1 + 320);
  for (uint64_t i = *(void *)(a1 + 384); i != *(void *)(a1 + 392); i += 32)
  {
    if ((a3 & ~*(_DWORD *)(i + 16)) == 0)
    {
      if (qword_1009F8168 != -1) {
        dispatch_once(&qword_1009F8168, &stru_1009B1B68);
      }
      if (sub_1000181D0(qword_1009F8160, *(void *)i))
      {
        if (*(void *)(i + 8))
        {
          if (qword_1009F7F00 != -1) {
            dispatch_once(&qword_1009F7F00, &stru_1009B1BA8);
          }
          if (!sub_1004A93A0((uint64_t)off_1009F7EF8, *(void *)i, a2))
          {
            uint64_t v16 = qword_100A19E50;
            if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
              sub_100771170(&v22, v23, v16);
            }
          }
          if (qword_1009FB160 != -1) {
            dispatch_once(&qword_1009FB160, &stru_1009B1BC8);
          }
          operator new();
        }
        uint64_t v18 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 67110144;
          int v30 = a3;
          __int16 v31 = 1024;
          int v32 = a4;
          __int16 v33 = 1024;
          int v34 = a5;
          __int16 v35 = 1024;
          int v36 = a6;
          __int16 v37 = 1024;
          unsigned int v38 = a7;
          _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Invalid fCallback: service %d, eventType %d, event %d, result %d, reason %d", buf, 0x20u);
        }
      }
      else
      {
        uint64_t v17 = sub_100051300(*(void *)(a1 + 384), *(void *)(a1 + 392), *(void *)i);
        sub_1000515BC(a1 + 384, v17, *(void *)(a1 + 392));
      }
    }
  }
  sub_10003AFB4((uint64_t)v24);
  if (__p)
  {
    uint64_t v26 = __p;
    operator delete(__p);
  }
  return sub_10003AFB4((uint64_t)v28);
}

void sub_1004D1878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_1004D18C8(int64x2_t *a1, uint64_t a2)
{
  v34[0] = 0;
  v34[1] = 0;
  sub_10003AED0((uint64_t)v34, (uint64_t)a1[13].i64);
  sub_1004D0E60(a1);
  if (a1[19].i64[1]) {
    uint64_t v4 = *(void *)(*(void *)(a1[17].i64[1] + 8 * (a1[19].i64[0] / 0x66uLL)) + 40 * (a1[19].i64[0] % 0x66uLL));
  }
  else {
    uint64_t v4 = 0;
  }
  sub_10003AFE8((uint64_t)v34);
  if (!v4) {
    return sub_10003AFB4((uint64_t)v34);
  }
  if (v4 == a2)
  {
    uint64_t v10 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a2, __p);
      unint64_t v11 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Removing stalled device %{public}s from connection request queue and processing next conenction.", (uint8_t *)&buf, 0xCu);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    sub_1004D2074(a1, a2);
LABEL_32:
    v33[0] = 0;
    v33[1] = 0;
    sub_10003AED0((uint64_t)v33, (uint64_t)&a1[7].i64[1]);
    long long buf = 0uLL;
    uint64_t v42 = 0;
    sub_1004DA374(&buf, (uint64_t)&a1[11].i64[1]);
    sub_10003AFE8((uint64_t)v33);
    if (qword_1009F87A8 != -1) {
      dispatch_once(&qword_1009F87A8, &stru_1009B1BE8);
    }
    int v17 = sub_10046ED10((uint64_t)off_1009F87A0, a2);
    if (v17)
    {
      uint64_t v18 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(a2, __p);
        int v19 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)__int16 v35 = 136446466;
        *(void *)&v35[4] = v19;
        __int16 v36 = 1024;
        int v37 = v17;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Device %{public}s has pending services:0x%x for a stalled connection request in the queue. Reporting conenction result for the pending services.", v35, 0x12u);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      for (uint64_t i = *((void *)&buf + 1); (long long *)i != &buf; uint64_t i = *(void *)(i + 8))
      {
        if ((*(_DWORD *)(*(void *)(i + 16) + 32) & v17) != 0) {
          sub_1004D2654(a1, a2);
        }
      }
    }
    if (sub_1004764A0(a2))
    {
      uint64_t v21 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(a2, __p);
        uint8_t v22 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)__int16 v35 = 136446210;
        *(void *)&v35[4] = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Force Disconnect %{public}s since it had a stalled connection request in the queue.", v35, 0xCu);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      uint64_t v23 = a1[6].i64[1];
      *(void *)std::string __p = _NSConcreteStackBlock;
      *(void *)&__p[8] = 3221225472;
      *(void *)&__p[16] = sub_1004D8038;
      *(void *)&__p[24] = &unk_1009A0160;
      *(void *)&__p[32] = a1;
      uint64_t v44 = a2;
      char v45 = 1;
      sub_100013018(v23, __p);
    }
    __int16 v24 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a2, __p);
      int v25 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)__int16 v35 = 136446210;
      *(void *)&v35[4] = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Check if we can inititate a reconnection for the stalled device %{public}s.", v35, 0xCu);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    *(void *)uuid_t uu = 0;
    uint64_t v40 = 0;
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B1C08);
    }
    sub_1006C0414((uint64_t)off_1009F7ED8, (unsigned __int8 *)(a2 + 128), uu);
    if (!uuid_is_null(uu))
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009B1C08);
      }
      uint64_t v27 = off_1009F7ED8;
      uint64_t v28 = sub_100031234(uu);
      double v29 = sub_1006C6448((uint64_t)v27, v28);

      double Current = CFAbsoluteTimeGetCurrent();
      if (Current > v29 && Current - v29 <= 1.0)
      {
        __int16 v31 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          sub_100474E18(a2, v35);
          int v32 = v38 >= 0 ? v35 : *(unsigned char **)v35;
          *(_DWORD *)std::string __p = 136446978;
          *(void *)&__p[4] = v32;
          *(_WORD *)&unsigned char __p[12] = 1024;
          *(_DWORD *)&__p[14] = 1;
          *(_WORD *)&__p[18] = 2048;
          *(double *)&__p[20] = Current;
          *(_WORD *)&__p[28] = 2048;
          *(double *)&__p[30] = v29;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "LE Adv for the stalled device %{public}s was last seen within %d second(s). CurrentTimeStamp: %f, lastSeenTimeStamp: %f. Initiating reconnection.", __p, 0x26u);
          if (v38 < 0) {
            operator delete(*(void **)v35);
          }
        }
        memset(__p, 0, 24);
        sub_1004D2DCC(a1, a2, -1, (const std::string *)__p, 2);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
    }
    sub_1002B308C(&buf);
    sub_10003AFB4((uint64_t)v33);
    return sub_10003AFB4((uint64_t)v34);
  }
  sub_10003AF00((uint64_t)v34);
  unint64_t v5 = a1[19].u64[0];
  uint64_t v6 = a1[17].i64[1];
  uint64_t v7 = a1[18].i64[0];
  uint64_t v8 = (void *)(v6 + 8 * (v5 / 0x66));
  if (v7 == v6) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *v8 + 40 * (v5 % 0x66);
  }
LABEL_16:
  uint64_t v12 = (void *)v9;
  while (1)
  {
    unint64_t v13 = v7 == v6 ? 0 : *(void *)(v6 + 8 * ((a1[19].i64[1] + v5) / 0x66)) + 40 * ((a1[19].i64[1] + v5) % 0x66);
    if (v12 == (void *)v13) {
      break;
    }
    if (*v12 == a2)
    {
      uint64_t v15 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(a2, __p);
        uint64_t v16 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
        LODWORD(buf) = 136446210;
        *(void *)((char *)&buf + 4) = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Removing stalled device %{public}s from connection request queue.", (uint8_t *)&buf, 0xCu);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      sub_10048C058(a2, 0);
      sub_1004CBAB4(a1 + 17, v8, v9);
      break;
    }
    v12 += 5;
    v9 += 40;
    if (*v8 + 4080 == v9)
    {
      uint64_t v14 = v8[1];
      ++v8;
      uint64_t v9 = v14;
      goto LABEL_16;
    }
  }
  sub_1004D0E60(a1);
  sub_10003AFE8((uint64_t)v34);
  if (v12 != (void *)v13) {
    goto LABEL_32;
  }
  return sub_10003AFB4((uint64_t)v34);
}

void sub_1004D1FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
}

uint64_t sub_1004D2074(int64x2_t *a1, uint64_t a2)
{
  v26[0] = 0;
  v26[1] = 0;
  sub_10003AED0((uint64_t)v26, (uint64_t)a1[13].i64);
  uint64_t v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "processing next connection", (uint8_t *)__p, 2u);
  }
  sub_1004D0E60(a1);
  unint64_t v5 = a1[19].u64[0];
  uint64_t v6 = a1[17].i64[1];
  uint64_t v7 = a1[18].i64[0];
  uint64_t v8 = (void *)(v6 + 8 * (v5 / 0x66));
  if (v7 == v6) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *v8 + 40 * (v5 % 0x66);
  }
LABEL_6:
  uint64_t v10 = v9;
  while (1)
  {
    unint64_t v11 = v7 == v6 ? 0 : *(void *)(v6 + 8 * ((a1[19].i64[1] + v5) / 0x66)) + 40 * ((a1[19].i64[1] + v5) % 0x66);
    if (v10 == v11) {
      break;
    }
    if (*(void *)v10 == a2)
    {
      int v13 = sub_1004D41B4((uint64_t)a1, a2);
      if (v13)
      {
        if (sub_100475E4C(a2, 0x80000u) == 4 && (v13 & 0x80000) == 0 && (*(unsigned char *)(v10 + 26) & 8) != 0)
        {
          uint64_t v14 = qword_100A19E50;
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
          {
            sub_100474E18(a2, __p);
            uint64_t v15 = v25 >= 0 ? __p : (void **)__p[0];
            *(_DWORD *)long long buf = 136446210;
            uint64_t v28 = v15;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "AACP is not being connected to %{public}s", buf, 0xCu);
            if (v25 < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }
      uint64_t v16 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(a2, __p);
        int v17 = v25 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)long long buf = 136446210;
        uint64_t v28 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Removing device %{public}s from connection request queue", buf, 0xCu);
        if (v25 < 0) {
          operator delete(__p[0]);
        }
      }
      sub_10048C058(a2, 0);
      if (sub_10048C590(a2)) {
        sub_10048C460(a2);
      }
      sub_1004CBAB4(a1 + 17, v8, v9);
      sub_1004D0E60(a1);
      break;
    }
    v10 += 40;
    v9 += 40;
    if (*v8 + 4080 == v9)
    {
      uint64_t v12 = v8[1];
      ++v8;
      uint64_t v9 = v12;
      goto LABEL_6;
    }
  }
  if (a1[19].i64[1])
  {
    uint64_t v18 = *(void *)(*(void *)(a1[17].i64[1] + 8 * (a1[19].i64[0] / 0x66uLL)) + 40 * (a1[19].i64[0] % 0x66uLL));
    uint64_t v19 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v19 + 384))(v19) && sub_10047B7DC(v18))
    {
      if (qword_1009FB698 != -1) {
        dispatch_once(&qword_1009FB698, &stru_1009B1C48);
      }
      sub_1004C85B4();
    }
    std::string::size_type v20 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(v18, __p);
      uint64_t v21 = v25 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)long long buf = 136446210;
      uint64_t v28 = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Connecting to device %{public}s", buf, 0xCu);
      if (v25 < 0) {
        operator delete(__p[0]);
      }
    }
    if (qword_1009F87A8 != -1) {
      dispatch_once(&qword_1009F87A8, &stru_1009B1BE8);
    }
    sub_10046F158((uint64_t)off_1009F87A0, v18);
    sub_1004D1458((uint64_t)a1, v18, 0xFFFFFFFFLL, 0, 0, 0, 0);
    sub_10048C058(v18, 1);
    if (qword_1009FB698 != -1) {
      dispatch_once(&qword_1009FB698, &stru_1009B1C48);
    }
    sub_1004C8250(qword_1009FB690, v18);
  }
  uint8_t v22 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "No pending connection to process", (uint8_t *)__p, 2u);
  }
  return sub_10003AFB4((uint64_t)v26);
}

void sub_1004D2620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004D2654(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  v19[0] = 0;
  v19[1] = 0;
  sub_10003AED0((uint64_t)v19, a1 + 40);
  if (qword_1009F87A8 != -1) {
    dispatch_once(&qword_1009F87A8, &stru_1009B1BE8);
  }
  int v10 = sub_10046F97C((uint64_t)off_1009F87A0, a2, a3, a4, a5);
  sub_1004D1458(a1, a2, a3, 0, 11, a5, 0);
  if (a3 == 2 && !a5 && !*(unsigned char *)(a2 + 1316))
  {
    LODWORD(__p) = 0;
    if (qword_1009FB9F8 != -1) {
      dispatch_once(&qword_1009FB9F8, &stru_1009B1C28);
    }
    (*(void (**)(void *, uint64_t, void **))(*(void *)off_1009FB9F0 + 88))(off_1009FB9F0, a2, &__p);
    sub_100480AD4(a2, (int)__p);
  }
  if (v10)
  {
    unint64_t v11 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a2, &__p);
      int v12 = v18;
      int v13 = (void **)__p;
      int v14 = sub_100478B2C(a2, 40);
      p_p = &__p;
      if (v12 < 0) {
        p_p = v13;
      }
      *(_DWORD *)long long buf = 136446466;
      uint64_t v21 = p_p;
      __int16 v22 = 1024;
      int v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Received all connection results for device %{public}s AACP incoming %d", buf, 0x12u);
      if (v18 < 0) {
        operator delete(__p);
      }
    }
    sub_10047D63C(a2);
    if (qword_1009FB698 != -1) {
      dispatch_once(&qword_1009FB698, &stru_1009B1C48);
    }
    sub_1004C848C();
  }
  return sub_10003AFB4((uint64_t)v19);
}

void sub_1004D2CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_1004D2D54(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3 = *(void *)(a1 + 104);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_1004D8038;
  v4[3] = &unk_1009A0160;
  v4[4] = a1;
  void v4[5] = a2;
  char v5 = a3;
  sub_100013018(v3, v4);
}

uint64_t sub_1004D2DCC(int64x2_t *a1, uint64_t a2, int a3, const std::string *a4, uint64_t a5)
{
  if (!sub_100478B2C(a2, 12)) {
    goto LABEL_22;
  }
  if ((SHIBYTE(a4->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    int v10 = a4;
    if (!*((unsigned char *)&a4->__r_.__value_.__s + 23)) {
      goto LABEL_8;
    }
LABEL_7:
    unint64_t v11 = +[NSString stringWithUTF8String:v10];
    goto LABEL_9;
  }
  if (a4->__r_.__value_.__l.__size_)
  {
    int v10 = (const std::string *)a4->__r_.__value_.__r.__words[0];
    goto LABEL_7;
  }
LABEL_8:
  unint64_t v11 = @"Unknown";
LABEL_9:
  *(void *)uuid_t uu = 0;
  *(void *)&unsigned __int8 uu[8] = 0;
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009B1C08);
  }
  sub_1006C0414((uint64_t)off_1009F7ED8, (unsigned __int8 *)(a2 + 128), uu);
  if (uuid_is_null(uu))
  {
    int v12 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
    {
      sub_100474E18(a2, v87);
      sub_100771244((char *)v87, v94, v12);
    }
LABEL_18:
    uint64_t v16 = -1;
    goto LABEL_19;
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009B1C08);
  }
  int v13 = off_1009F7ED8;
  int v14 = sub_100031234(uu);
  double v15 = sub_1006C6448((uint64_t)v13, v14);

  if (v15 <= 0.0) {
    goto LABEL_18;
  }
  uint64_t v16 = (uint64_t)(CFAbsoluteTimeGetCurrent() - v15);
LABEL_19:
  uint64_t v17 = sub_100050530();
  sub_100474E18(a2, __p);
  (*(void (**)(uint64_t, void **, __CFString *, uint64_t, void, uint64_t))(*(void *)v17 + 392))(v17, __p, v11, v16, 0, a5);
  if (v86 < 0) {
    operator delete(__p[0]);
  }

LABEL_22:
  v84[0] = 0;
  v84[1] = 0;
  sub_10003AED0((uint64_t)v84, (uint64_t)&a1[2].i64[1]);
  char v18 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a2, buf);
    int v19 = v93;
    std::string::size_type v20 = *(unsigned char **)buf;
    int v21 = sub_100040630((unsigned __int8 *)a2);
    __int16 v22 = buf;
    *(_DWORD *)uuid_t uu = 67109634;
    if (v19 < 0) {
      __int16 v22 = v20;
    }
    *(_DWORD *)&uu[4] = a3;
    *(_WORD *)&unsigned __int8 uu[8] = 2082;
    *(void *)&uu[10] = v22;
    *(_WORD *)&uu[18] = 1024;
    *(_DWORD *)&uu[20] = v21;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Connecting 0x%x services to device %{public}s, paired %d", uu, 0x18u);
    if (v93 < 0) {
      operator delete(*(void **)buf);
    }
  }
  if (a1[7].i8[0])
  {
    sub_10003AFE8((uint64_t)v84);
    if (qword_1009F8748 != -1) {
      dispatch_once(&qword_1009F8748, &stru_1009B1C88);
    }
    if (sub_100028CB4((uint64_t)off_1009F8740) == 1)
    {
      if (*(unsigned char *)(a2 + 976))
      {
        a3 &= 0xFFEFFFFE;
        int v23 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uuid_t uu = 67109120;
          *(_DWORD *)&uu[4] = a3;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Wireless Splitter Guest Not In Contacts connecting with services 0x%x", uu, 8u);
        }
      }
      int v24 = SHIBYTE(a4->__r_.__value_.__r.__words[2]);
      if (v24 >= 0) {
        int64_t size = HIBYTE(a4->__r_.__value_.__r.__words[2]);
      }
      else {
        int64_t size = a4->__r_.__value_.__l.__size_;
      }
      if (size)
      {
        BOOL v26 = *(unsigned char *)(a2 + 1435) != 0;
        uint64_t v27 = qword_100A19C68;
        if ((_UNKNOWN *)qword_100A19C68 != &unk_100A19C70)
        {
          BOOL v78 = *(unsigned char *)(a2 + 1435) != 0;
          char v80 = a5;
          uint64_t v81 = (uint64_t)a1;
          long long v79 = a4;
          if (v24 >= 0) {
            uint64_t v28 = a4;
          }
          else {
            uint64_t v28 = (const std::string *)a4->__r_.__value_.__r.__words[0];
          }
          double v29 = (char *)v28 + size;
          while (1)
          {
            int v30 = *(char *)(v27 + 55);
            __int16 v31 = v30 >= 0 ? (unsigned __int8 *)(v27 + 32) : *(unsigned __int8 **)(v27 + 32);
            int64_t v32 = v30 >= 0 ? *(unsigned __int8 *)(v27 + 55) : *(void *)(v27 + 40);
            if (!v32) {
              break;
            }
            if (size >= v32)
            {
              int v35 = *v31;
              int64_t v36 = size;
              int v37 = (std::string *)v28;
              do
              {
                int64_t v38 = v36 - v32;
                if (v38 == -1) {
                  break;
                }
                uint64_t v39 = (char *)memchr(v37, v35, v38 + 1);
                if (!v39) {
                  break;
                }
                uint64_t v40 = v39;
                if (!memcmp(v39, v31, v32))
                {
                  if (v40 == v29 || v40 - (char *)v28 == -1) {
                    break;
                  }
                  goto LABEL_66;
                }
                int v37 = (std::string *)(v40 + 1);
                int64_t v36 = v29 - (v40 + 1);
              }
              while (v36 >= v32);
            }
            __int16 v33 = *(void **)(v27 + 8);
            if (v33)
            {
              do
              {
                int v34 = v33;
                __int16 v33 = (void *)*v33;
              }
              while (v33);
            }
            else
            {
              do
              {
                int v34 = *(void **)(v27 + 16);
                BOOL v68 = *v34 == v27;
                uint64_t v27 = (uint64_t)v34;
              }
              while (!v68);
            }
            uint64_t v27 = (uint64_t)v34;
            if (v34 == (void *)&unk_100A19C70)
            {
              a1 = (int64x2_t *)v81;
              LOBYTE(a5) = v80;
              a4 = v79;
              BOOL v26 = v78;
              goto LABEL_70;
            }
          }
LABEL_66:
          a1 = (int64x2_t *)v81;
          sub_1004D1458(v81, a2, 0, 3, 901, 0, 0);
          BOOL v26 = 1;
          LOBYTE(a5) = v80;
          a4 = v79;
        }
LABEL_70:
        *(unsigned char *)(a2 + 1435) = v26;
        std::string::operator=((std::string *)(a2 + 1480), a4);
      }
      v83[0] = 0;
      v83[1] = 0;
      sub_10003AED0((uint64_t)v83, (uint64_t)a1[13].i64);
      unint64_t v50 = a1[19].u64[0];
      uint64_t v51 = a1[17].i64[1];
      uint64_t v52 = a1[18].i64[0];
      uint64_t v53 = (void *)(v51 + 8 * (v50 / 0x66));
      if (v52 == v51) {
        unint64_t v54 = 0;
      }
      else {
        unint64_t v54 = *v53 + 40 * (v50 % 0x66);
      }
LABEL_74:
      unint64_t v55 = v54 - 4080;
      while (1)
      {
        unint64_t v56 = v52 == v51
            ? 0
            : *(void *)(v51 + 8 * ((a1[19].i64[1] + v50) / 0x66)) + 40 * ((a1[19].i64[1] + v50) % 0x66);
        if (v54 == v56) {
          break;
        }
        if (*(void *)v54 == a2)
        {
          int v57 = *(_DWORD *)(v54 + 24);
          if ((v57 & a3) != 0)
          {
            uint64_t v59 = qword_100A19E50;
            if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
            {
              sub_100474E18(a2, uu);
              if (uu[23] >= 0) {
                long long v60 = uu;
              }
              else {
                long long v60 = *(unsigned char **)uu;
              }
              *(_DWORD *)long long buf = 67109378;
              *(_DWORD *)&uint8_t buf[4] = v57;
              *(_WORD *)&uint8_t buf[8] = 2082;
              *(void *)&buf[10] = v60;
              _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "Connection request for 0x%x to device %{public}s already queued, ignoring duplicate request", buf, 0x12u);
              if ((uu[23] & 0x80000000) != 0) {
                operator delete(*(void **)uu);
              }
              int v57 = *(_DWORD *)(v54 + 24);
            }
            sub_1004D0E60(a1);
            a3 &= ~v57;
            uint64_t v51 = a1[17].i64[1];
            uint64_t v52 = a1[18].i64[0];
            break;
          }
        }
        v54 += 40;
        v55 += 40;
        if (*v53 == v55)
        {
          unint64_t v58 = v53[1];
          ++v53;
          unint64_t v54 = v58;
          goto LABEL_74;
        }
      }
      if (v52 == v51)
      {
        unint64_t v62 = 0;
      }
      else
      {
        unint64_t v61 = a1[19].i64[1] + a1[19].i64[0];
        unint64_t v62 = *(void *)(v51 + 8 * (v61 / 0x66)) + 40 * (v61 % 0x66);
      }
      if (v54 == v62)
      {
        uint64_t v69 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          sub_100474E18(a2, uu);
          uint64_t v70 = uu[23] >= 0 ? uu : *(unsigned char **)uu;
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = v70;
          _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "No connection request for the device %{public}s, adding to connection request queue", buf, 0xCu);
          if ((uu[23] & 0x80000000) != 0) {
            operator delete(*(void **)uu);
          }
        }
        *(void *)uuid_t uu = a2;
        *(_DWORD *)&unsigned __int8 uu[8] = 0;
        *(void *)&uu[16] = 0;
        int v89 = a3;
        char v90 = a5;
        uint64_t v91 = mach_continuous_time();
        sub_1004CACF0((int64x2_t *)a1[17].i64, (uint64_t)uu);
        uint64_t v71 = sub_100017768();
        if ((*(unsigned int (**)(uint64_t))(*(void *)v71 + 8))(v71))
        {
          uint64_t v72 = a1[6].i64[1];
          v82[0] = _NSConcreteStackBlock;
          v82[1] = 3221225472;
          v82[2] = sub_1004D564C;
          v82[3] = &unk_100998260;
          v82[4] = a1;
          v82[5] = a2;
          sub_1004AFF58(v72, 60000, v82);
        }
        sub_1004D0E60(a1);
        unint64_t v73 = a1[19].u64[1];
        if (v73 < 2)
        {
          sub_10003AFE8((uint64_t)v83);
          sub_1004D1458((uint64_t)a1, a2, 0xFFFFFFFFLL, 0, 0, 0, 0);
          sub_10048C058(a2, 1);
          if (sub_100040630((unsigned __int8 *)a2)
            && !sub_1004764A0(a2)
            && sub_100478B2C(a2, 19))
          {
            char v75 = (uint64_t (***)(void *, uint64_t))sub_100373558();
            uint64_t v49 = (**v75)(v75, a2);
            if (v49)
            {
              if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
              {
                sub_100474E18(a2, uu);
                sub_1007711B0();
              }
              sub_1004D2074(a1, a2);
            }
            goto LABEL_135;
          }
          if (sub_100040630((unsigned __int8 *)a2)) {
            int v76 = sub_100478B2C(a2, 21);
          }
          else {
            int v76 = 0;
          }
          sub_1004D5838((uint64_t)a1, a2, v76);
        }
        else
        {
          uint64_t v74 = qword_100A19E50;
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)uuid_t uu = 134217984;
            *(void *)&uu[4] = v73;
            _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "Queued up connection request - queue size is %lu", uu, 0xCu);
          }
          sub_1004D0E60(a1);
        }
      }
      else
      {
        if (a3)
        {
          uint64_t v63 = qword_100A19E50;
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
          {
            sub_100474E18(a2, buf);
            uint64_t v64 = v93 >= 0 ? buf : *(unsigned char **)buf;
            int v65 = *(_DWORD *)(v54 + 24);
            *(_DWORD *)uuid_t uu = 136446722;
            *(void *)&uu[4] = v64;
            *(_WORD *)&uu[12] = 1024;
            *(_DWORD *)&uu[14] = v65;
            *(_WORD *)&uu[18] = 1024;
            *(_DWORD *)&uu[20] = a3;
            _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "There is an existing connection request for the device %{public}s, but current service mask 0x%x and new service mask 0x%x are different. Appening new service to existing service mask", uu, 0x18u);
            if (v93 < 0) {
              operator delete(*(void **)buf);
            }
          }
          int v66 = sub_1004D41B4((uint64_t)a1, *(void *)v54);
          for (int i = 0; i != 31; ++i)
          {
            BOOL v68 = ((1 << i) & a3) != 0 && (v66 & a3) == 0;
            if (v68) {
              *(_DWORD *)(v54 + 24) |= 1 << i;
            }
          }
        }
        sub_1004D0E60(a1);
      }
      uint64_t v49 = 0;
LABEL_135:
      sub_10003AFB4((uint64_t)v83);
      goto LABEL_136;
    }
    uint64_t v41 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10077120C(v41, v42, v43, v44, v45, v46, v47, v48);
    }
  }
  uint64_t v49 = 202;
LABEL_136:
  sub_10003AFB4((uint64_t)v84);
  return v49;
}

void sub_1004D3880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
}

uint64_t sub_1004D392C(uint64_t a1, unsigned char *a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 40);
  sub_1004B022C(*(void *)(a1 + 104), a2);
  return sub_10003AFB4((uint64_t)v5);
}

void sub_1004D397C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1004D3990(uint64_t a1, void *a2)
{
  id v3 = a2;
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1 + 40);
  sub_100013018(*(void *)(a1 + 104), v3);
  sub_10003AFB4((uint64_t)v4);
}

void sub_1004D39E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_1004D3A08(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, a1 + 40);
  if (qword_1009F87A8 != -1) {
    dispatch_once(&qword_1009F87A8, &stru_1009B1BE8);
  }
  sub_10046F420((uint64_t)off_1009F87A0, a2, a3, a4, a5);
  sub_1004D1458(a1, a2, a3, 0, 1, 0, 0);
  return sub_10003AFB4((uint64_t)v11);
}

void sub_1004D3ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004D3AE0(int64x2_t *a1, uint64_t a2, int a3)
{
  uint64_t v6 = sub_100035F54();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 48))(v6, 0x80000);
  if (result)
  {
    if (sub_100475E4C(a2, 0x80000u) != 4) {
      return 0;
    }
    if (qword_1009FB140 != -1) {
      dispatch_once(&qword_1009FB140, &stru_1009B1B28);
    }
    if ((*(uint64_t (**)(void *, uint64_t))(*(void *)off_1009FB138 + 136))(off_1009FB138, a2)) {
      return 0;
    }
    if (qword_1009FB140 != -1) {
      dispatch_once(&qword_1009FB140, &stru_1009B1B28);
    }
    char v8 = (*(uint64_t (**)(void *, uint64_t))(*(void *)off_1009FB138 + 120))(off_1009FB138, a2);
    uint64_t result = 0;
    if (a3 != 0x80000 && (v8 & 1) == 0)
    {
      if (qword_1009FB140 != -1) {
        dispatch_once(&qword_1009FB140, &stru_1009B1B28);
      }
      if (sub_1002837D0((uint64_t)off_1009FB138, a2))
      {
        uint64_t v9 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          sub_100474E18(a2, &__p);
          int v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          LODWORD(buf) = 136446210;
          *(void *)((char *)&buf + 4) = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Remove %{public}s from stale AACP connection device list and return false", (uint8_t *)&buf, 0xCu);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        if (qword_1009FB140 != -1) {
          dispatch_once(&qword_1009FB140, &stru_1009B1B28);
        }
        sub_100283804(off_1009FB138, a2);
        return 0;
      }
      v34[0] = 0;
      v34[1] = 0;
      sub_10003AED0((uint64_t)v34, (uint64_t)a1[13].i64);
      unint64_t v11 = a1[19].u64[0];
      uint64_t v12 = a1[17].i64[1];
      uint64_t v13 = a1[18].i64[0];
      int v14 = (void *)(v12 + 8 * (v11 / 0x66));
      if (v13 == v12) {
        unint64_t v15 = 0;
      }
      else {
        unint64_t v15 = *v14 + 40 * (v11 % 0x66);
      }
LABEL_27:
      unint64_t v16 = v15 - 4080;
      while (1)
      {
        if (v13 == v12) {
          unint64_t v17 = 0;
        }
        else {
          unint64_t v17 = *(void *)(v12 + 8 * ((a1[19].i64[1] + v11) / 0x66)) + 40 * ((a1[19].i64[1] + v11) % 0x66);
        }
        if (v15 == v17) {
          goto LABEL_48;
        }
        if (*(void *)v15 == a2 && (*(unsigned char *)(v15 + 26) & 8) != 0) {
          break;
        }
        v15 += 40;
        v16 += 40;
        if (*v14 == v16)
        {
          unint64_t v18 = v14[1];
          ++v14;
          unint64_t v15 = v18;
          goto LABEL_27;
        }
      }
      if (qword_1009F87A8 != -1) {
        dispatch_once(&qword_1009F87A8, &stru_1009B1BE8);
      }
      if ((sub_10046ED10((uint64_t)off_1009F87A0, a2) & 0x80000) == 0)
      {
        if (qword_1009F87A8 != -1) {
          dispatch_once(&qword_1009F87A8, &stru_1009B1BE8);
        }
        if (sub_10046EC84((uint64_t)off_1009F87A0, a2, 0x80000))
        {
          int v19 = qword_100A19E50;
          int v20 = 0;
          if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_56;
          }
          sub_100474E18(a2, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          LODWORD(buf) = 136446210;
          *(void *)((char *)&buf + 4) = p_p;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Connection request list for %{public}s has AACP -- Condition for waiting not met", (uint8_t *)&buf, 0xCu);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
LABEL_48:
          int v20 = 0;
          goto LABEL_56;
        }
      }
      __int16 v22 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(a2, &__p);
        int v23 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        LODWORD(buf) = 136446210;
        *(void *)((char *)&buf + 4) = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Connection request list for %{public}s has AACP pending -- Wait for it to complete", (uint8_t *)&buf, 0xCu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      int v20 = 1;
LABEL_56:
      uint64_t v24 = a1[17].i64[1];
      if (a1[18].i64[0] == v24)
      {
        unint64_t v26 = 0;
      }
      else
      {
        unint64_t v25 = a1[19].i64[1] + a1[19].i64[0];
        unint64_t v26 = *(void *)(v24 + 8 * (v25 / 0x66)) + 40 * (v25 % 0x66);
      }
      if (v15 == v26)
      {
        long long buf = 0uLL;
        uint64_t v38 = 0;
        if (qword_1009FB170 != -1) {
          dispatch_once(&qword_1009FB170, &stru_1009B1CA8);
        }
        sub_100670C60((uint64_t)off_1009FB168, (void **)&buf);
        unsigned int v27 = 16;
        if (!sub_1004A8390((uint64_t)&buf, a2))
        {
          std::string::size_type v28 = a1[19].u64[1];
          if (v28) {
            unsigned int v27 = 16;
          }
          else {
            unsigned int v27 = 8;
          }
          double v29 = qword_100A19E50;
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
          {
            sub_100474E18(a2, v32);
            int v30 = v33 >= 0 ? v32 : (void **)v32[0];
            LODWORD(__p.__r_.__value_.__l.__data_) = 134218498;
            *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v28;
            WORD2(__p.__r_.__value_.__r.__words[1]) = 2082;
            *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v30;
            HIWORD(__p.__r_.__value_.__r.__words[2]) = 1024;
            unsigned int v36 = v27;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Connection request queue size is %luu. Initite AACP client connection request for %{public}s using watchdog stall timeout as %d seconds", (uint8_t *)&__p, 0x1Cu);
            if (v33 < 0) {
              operator delete(v32[0]);
            }
          }
          memset(&__p, 0, sizeof(__p));
          int v31 = sub_1004D2DCC(a1, a2, 0x80000, &__p, 2);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (!v31) {
            int v20 = 1;
          }
        }
        if ((void)buf)
        {
          *((void *)&buf + 1) = buf;
          operator delete((void *)buf);
        }
      }
      else
      {
        unsigned int v27 = 16;
      }
      sub_10003AFB4((uint64_t)v34);
      if (!v20) {
        return 0;
      }
      if (!sub_10048C590(a2)) {
        sub_10048C0E4(a2, v27);
      }
      return 1;
    }
  }
  return result;
}

void sub_1004D415C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23)
{
}

uint64_t sub_1004D41B4(uint64_t a1, uint64_t a2)
{
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, a1 + 120);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  sub_1004DA374(&v8, a1 + 184);
  sub_10003AFE8((uint64_t)v11);
  uint64_t v4 = v9;
  if (v9 == &v8)
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = (_DWORD *)v4[2];
      if ((*(unsigned int (**)(_DWORD *, uint64_t))(*(void *)v6 + 120))(v6, a2)) {
        uint64_t v5 = v6[8] | v5;
      }
      uint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4 != &v8);
  }
  sub_1002B308C(&v8);
  sub_10003AFB4((uint64_t)v11);
  return v5;
}

void sub_1004D4294(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1002B308C((uint64_t *)va);
  sub_10003AFB4((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004D42BC(uint64_t a1)
{
  if (qword_1009F8090 != -1) {
    dispatch_once(&qword_1009F8090, &stru_1009B1C68);
  }
  uint64_t v2 = (int64x2_t *)off_1009F8088;
  uint64_t v3 = *(void *)(a1 + 32);

  return sub_1004D4320(v2, v3);
}

uint64_t sub_1004D4320(int64x2_t *a1, uint64_t a2)
{
  char v4 = sub_1004D41B4((uint64_t)a1, a2);
  int v5 = 25;
  uint64_t result = sub_10047B300(a2);
  if (result)
  {
    uint64_t result = sub_1004D6124((uint64_t)a1, a2);
    int v5 = result & 0x19;
  }
  if ((v4 & 0x19) != 0)
  {
    unsigned int v7 = v5 & ~(v4 & 0x19);
    if (v7)
    {
      uint64_t v8 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        if (v7) {
          uint64_t v9 = " HFP";
        }
        else {
          uint64_t v9 = "";
        }
        if (v7 >= 0x10) {
          uint64_t v10 = " A2DP";
        }
        else {
          uint64_t v10 = "";
        }
        if ((v7 & 8) != 0) {
          unint64_t v11 = " AVRCP";
        }
        else {
          unint64_t v11 = "";
        }
        if (v4) {
          uint64_t v12 = " HFP";
        }
        else {
          uint64_t v12 = "";
        }
        if ((v4 & 0x10) != 0) {
          uint64_t v13 = " A2DP";
        }
        else {
          uint64_t v13 = "";
        }
        if ((v4 & 8) != 0) {
          int v14 = " AVRCP";
        }
        else {
          int v14 = "";
        }
        sub_100474E18(a2, __p);
        unint64_t v15 = __p;
        if (v23 < 0) {
          unint64_t v15 = *(unsigned char **)__p;
        }
        *(_DWORD *)long long buf = 136448003;
        *(void *)&uint8_t buf[4] = v9;
        __int16 v25 = 2082;
        *(void *)unint64_t v26 = v10;
        *(_WORD *)&v26[8] = 2082;
        unsigned int v27 = v11;
        *(_WORD *)std::string::size_type v28 = 2082;
        *(void *)&void v28[2] = v12;
        __int16 v29 = 2082;
        int v30 = v13;
        __int16 v31 = 2082;
        int64_t v32 = v14;
        __int16 v33 = 2160;
        uint64_t v34 = 1752392040;
        __int16 v35 = 2081;
        unsigned int v36 = v15;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Forcing connection of%{public}s%{public}s%{public}s after incoming connection of only%{public}s%{public}s%{public}s for device %{private, mask.hash}s", buf, 0x52u);
        if (v23 < 0) {
          operator delete(*(void **)__p);
        }
      }
      v19[0] = 0;
      v19[1] = 0;
      sub_10003AED0((uint64_t)v19, (uint64_t)a1[13].i64);
      *(void *)long long buf = a2;
      *(_DWORD *)&uint8_t buf[8] = 0;
      *(void *)&void v26[2] = 0;
      LODWORD(v27) = v7;
      BYTE4(v27) = 2;
      *(void *)std::string::size_type v28 = mach_continuous_time();
      sub_1004CACF0((int64x2_t *)a1[17].i64, (uint64_t)buf);
      unint64_t v16 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(a2, buf);
        unint64_t v17 = v26[9] >= 0 ? buf : *(unsigned char **)buf;
        *(_DWORD *)std::string __p = 136446466;
        *(void *)&__p[4] = v17;
        __int16 v21 = 1024;
        unsigned int v22 = v7;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Added device %{public}s to the connction request queue for the missing services 0x%x", __p, 0x12u);
        if ((v26[9] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }
      sub_1004D0E60(a1);
      sub_10003AFE8((uint64_t)v19);
      if (qword_1009F87A8 != -1) {
        dispatch_once(&qword_1009F87A8, &stru_1009B1BE8);
      }
      if ((sub_10046E7E4((uint64_t)off_1009F87A0) & 1) == 0)
      {
        unint64_t v18 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "No device currently connecting. lets process nexct connection", buf, 2u);
        }
        sub_1004D2074(a1, 0);
      }
      return sub_10003AFB4((uint64_t)v19);
    }
  }
  return result;
}

void sub_1004D464C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004D4674()
{
  int v0 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 64);

  return v0();
}

void sub_1004D46CC(id a1)
{
  uint64_t v1 = *(void (**)(void))(*(void *)sub_10003FB34() + 200);

  v1();
}

uint64_t sub_1004D471C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 40);
  sub_1004D1458(a1, a2, a3, 1, 2, 0, 0);
  return sub_10003AFB4((uint64_t)v7);
}

void sub_1004D478C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004D47A0(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned int a4, uint64_t a5, unsigned int a6)
{
  int v76 = a3;
  v75[0] = 0;
  v75[1] = 0;
  sub_10003AED0((uint64_t)v75, a1 + 40);
  if (qword_1009F87A8 != -1) {
    dispatch_once(&qword_1009F87A8, &stru_1009B1BE8);
  }
  sub_100470174((uint64_t)off_1009F87A0, (uint64_t)a2, a3, a4, a5, a6);
  sub_1004D1458(a1, (uint64_t)a2, a3, 1, 12, a5, a6);
  int v69 = a3;
  if (a3 == 1)
  {
    uint64_t v19 = *(void *)(a1 + 104);
    v74[0] = _NSConcreteStackBlock;
    v74[1] = 3221225472;
    v74[2] = sub_1004D5238;
    v74[3] = &unk_100997528;
    v74[4] = a2;
    sub_100013018(v19, v74);
LABEL_10:
    int v18 = 0;
    goto LABEL_27;
  }
  if (a3 == 16)
  {
    uint64_t v17 = *(void *)(a1 + 104);
    v73[0] = _NSConcreteStackBlock;
    v73[1] = 3221225472;
    v73[2] = sub_1004D52BC;
    v73[3] = &unk_100997528;
    v73[4] = a2;
    sub_100013018(v17, v73);
    int v18 = 1;
    goto LABEL_27;
  }
  if (a3 != 0x80000) {
    goto LABEL_10;
  }
  int v68 = a5;
  unint64_t v12 = *(void *)(a1 + 304);
  uint64_t v13 = *(void *)(a1 + 280);
  uint64_t v14 = *(void *)(a1 + 288);
  unint64_t v15 = (void *)(v13 + 8 * (v12 / 0x66));
  if (v14 == v13) {
    unint64_t v16 = 0;
  }
  else {
    unint64_t v16 = *v15 + 40 * (v12 % 0x66);
  }
  while (1)
  {
    if (v14 == v13)
    {
      unint64_t v21 = 0;
    }
    else
    {
      unint64_t v20 = *(void *)(a1 + 312) + *(void *)(a1 + 304);
      unint64_t v21 = *(void *)(v13 + 8 * (v20 / 0x66)) + 40 * (v20 % 0x66);
    }
    if (v16 == v21) {
      break;
    }
    if (*(unsigned __int8 **)v16 == a2 && *(_DWORD *)(v16 + 24) == 0x80000)
    {
      unsigned int v22 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Stale request for service connection request (AACP only), add device to staleAACPConnReqDevList", (uint8_t *)&buf, 2u);
      }
      if (qword_1009FB140 != -1) {
        dispatch_once(&qword_1009FB140, &stru_1009B1B28);
      }
      sub_1002836AC(off_1009FB138, (uint64_t)a2);
    }
    v16 += 40;
    if (v16 - *v15 == 4080)
    {
      unint64_t v23 = v15[1];
      ++v15;
      unint64_t v16 = v23;
    }
    uint64_t v13 = *(void *)(a1 + 280);
    uint64_t v14 = *(void *)(a1 + 288);
  }
  int v18 = 0;
  LODWORD(a5) = v68;
LABEL_27:
  uint64_t v24 = sub_100035F54();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v24 + 48))(v24, 16)) {
    goto LABEL_47;
  }
  if (qword_1009FB958 != -1) {
    dispatch_once(&qword_1009FB958, &stru_1009B19C8);
  }
  if ((*(unsigned int (**)(void *))(*(void *)off_1009FB950 + 112))(off_1009FB950))
  {
    memset(&buf, 0, sizeof(buf));
    unsigned int v25 = a4;
    if (qword_1009F87A8 != -1) {
      dispatch_once(&qword_1009F87A8, &stru_1009B1BE8);
    }
    int v26 = a5;
    sub_10046E85C((uint64_t)off_1009F87A0, (void **)&buf.__r_.__value_.__l.__data_);
    unsigned int v27 = (void *)buf.__r_.__value_.__r.__words[0];
    if (buf.__r_.__value_.__r.__words[0] == buf.__r_.__value_.__l.__size_)
    {
      int v28 = 0;
      if (buf.__r_.__value_.__r.__words[0])
      {
LABEL_39:
        buf.__r_.__value_.__l.__size_ = (std::string::size_type)v27;
        operator delete(v27);
      }
    }
    else
    {
      int v28 = 0;
      do
      {
        if ((sub_1004D41B4(a1, *v27) & 0x10) == 0) {
          v28 += sub_100181D84(*v27 + 128) ^ 1;
        }
        ++v27;
      }
      while (v27 != (void *)buf.__r_.__value_.__l.__size_);
      unsigned int v27 = (void *)buf.__r_.__value_.__r.__words[0];
      if (buf.__r_.__value_.__r.__words[0]) {
        goto LABEL_39;
      }
    }
    LODWORD(a5) = v26;
    a4 = v25;
    if (v28) {
      goto LABEL_42;
    }
  }
  uint64_t v29 = *(void *)(a1 + 104);
  v71[0] = _NSConcreteStackBlock;
  v71[1] = 3221225472;
  v71[2] = sub_1004D5340;
  v71[3] = &unk_100998300;
  int v72 = 0;
  sub_100013018(v29, v71);
LABEL_42:
  if (v18)
  {
    if (qword_1009FB958 != -1) {
      dispatch_once(&qword_1009FB958, &stru_1009B19C8);
    }
    if (((*(uint64_t (**)(void *))(*(void *)off_1009FB950 + 112))(off_1009FB950) & 1) == 0)
    {
      uint64_t v30 = sub_1004AF8EC();
      sub_100013018(v30, &stru_1009B1908);
    }
  }
LABEL_47:
  int v31 = a5;
  int64_t v32 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v70 = a6;
    __int16 v33 = __p;
    sub_100474E18((uint64_t)a2, __p);
    if (v78 < 0) {
      __int16 v33 = *(unsigned char **)__p;
    }
    uint64_t v34 = sub_1004D53E8(&v76);
    if (sub_100040630(a2)) {
      __int16 v35 = "paired";
    }
    else {
      __int16 v35 = "not paired";
    }
    if (sub_100478B2C((uint64_t)a2, 0)) {
      unsigned int v36 = "yes";
    }
    else {
      unsigned int v36 = "no";
    }
    int v37 = sub_100478B2C((uint64_t)a2, 1);
    int v38 = sub_100478B2C((uint64_t)a2, 3);
    uint64_t v39 = "not supported";
    LODWORD(buf.__r_.__value_.__l.__data_) = 136448514;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v33;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
    if (v37) {
      uint64_t v40 = "supported";
    }
    else {
      uint64_t v40 = "not supported";
    }
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v34;
    if (v38) {
      uint64_t v39 = "supported";
    }
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
    int v80 = v69;
    __int16 v81 = 1024;
    unsigned int v82 = a4;
    __int16 v83 = 1024;
    int v84 = v31;
    __int16 v85 = 1024;
    unsigned int v86 = v70;
    __int16 v87 = 2080;
    v88 = v35;
    __int16 v89 = 2080;
    char v90 = v36;
    __int16 v91 = 2080;
    uint64_t v92 = v40;
    __int16 v93 = 2080;
    v94 = v39;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "ServiceManager disconnection result for device %{public}s with service %{public}s (%d), profile 0x%x, result %d, reason %d, isPaired %s, bs %s, inear %s, unt %s", (uint8_t *)&buf, 0x56u);
    if (v78 < 0) {
      operator delete(*(void **)__p);
    }
    a6 = v70;
  }
  if (qword_1009F87A8 != -1) {
    dispatch_once(&qword_1009F87A8, &stru_1009B1BE8);
  }
  if (!sub_10046EC14((uint64_t)off_1009F87A0, (uint64_t)a2))
  {
    if (*(unsigned char *)(a1 + 696))
    {
LABEL_68:
      uint64_t v41 = a1 + 696;
      if (qword_1009F7F00 != -1) {
        dispatch_once(&qword_1009F7F00, &stru_1009B1BA8);
      }
      uint64_t v42 = (unsigned __int8 *)sub_1004AA194((uint64_t)off_1009F7EF8, a1 + 696, 1);
      uint64_t v43 = (uint64_t)v42;
      if (v42 && sub_100040630(v42))
      {
        uint64_t v44 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          sub_1004A82EC((unsigned __int8 *)v41, &buf);
          uint64_t v45 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &buf
              : (std::string *)buf.__r_.__value_.__r.__words[0];
          *(_DWORD *)std::string __p = 136446210;
          *(void *)&__p[4] = v45;
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "quickDisconnect reconnection attempt for device %{public}s", __p, 0xCu);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
        }
        if (qword_1009F8090 != -1) {
          dispatch_once(&qword_1009F8090, &stru_1009B1C68);
        }
        memset(&buf, 0, sizeof(buf));
        uint64_t v46 = sub_1004D2DCC((int64x2_t *)off_1009F8088, v43, -1, &buf, 2);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        if (v46)
        {
          uint64_t v47 = qword_100A19E50;
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
            sub_100771324(v46, v47, v48, v49, v50, v51, v52, v53);
          }
        }
      }
      else
      {
        unint64_t v54 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "QuickDisconnect device not found or not paired", (uint8_t *)&buf, 2u);
        }
      }
      *(_WORD *)(v41 + 4) = 0;
      *(_DWORD *)uint64_t v41 = 0;
    }
    else
    {
      uint64_t v56 = 0;
      while (v56 != 5)
      {
        if (*(unsigned __int8 *)(a1 + 697 + v56++))
        {
          if ((unint64_t)(v56 - 1) <= 4) {
            goto LABEL_68;
          }
          break;
        }
      }
      if (a6 == 10721
        && sub_100040630(a2)
        && sub_100478B2C((uint64_t)a2, 0)
        && sub_100478B2C((uint64_t)a2, 1)
        && sub_100478B2C((uint64_t)a2, 3))
      {
        unint64_t v58 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          sub_100474E18((uint64_t)a2, &buf);
          uint64_t v59 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &buf
              : (std::string *)buf.__r_.__value_.__r.__words[0];
          *(_DWORD *)std::string __p = 136446210;
          *(void *)&__p[4] = v59;
          _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "Post-swap reconnection attempt for device %{public}s", __p, 0xCu);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
        }
        if (qword_1009F8090 != -1) {
          dispatch_once(&qword_1009F8090, &stru_1009B1C68);
        }
        memset(&buf, 0, sizeof(buf));
        uint64_t v60 = sub_1004D2DCC((int64x2_t *)off_1009F8088, (uint64_t)a2, -1, &buf, 2);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        if (v60)
        {
          unint64_t v61 = qword_100A19E50;
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
            sub_1007712B8(v60, v61, v62, v63, v64, v65, v66, v67);
          }
        }
      }
    }
  }
  return sub_10003AFB4((uint64_t)v75);
}

void sub_1004D51BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
}

uint64_t sub_1004D5238()
{
  if (qword_1009FB948 != -1) {
    dispatch_once(&qword_1009FB948, &stru_1009B1988);
  }
  int v0 = *(uint64_t (**)(void))(*(void *)off_1009FB940 + 88);

  return v0();
}

uint64_t sub_1004D52BC()
{
  if (qword_1009FB968 != -1) {
    dispatch_once(&qword_1009FB968, &stru_1009B19E8);
  }
  int v0 = *(uint64_t (**)(void))(*(void *)off_1009FB960 + 88);

  return v0();
}

uint64_t sub_1004D5340()
{
  int v0 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 64);

  return v0();
}

void sub_1004D5398(id a1)
{
  uint64_t v1 = *(void (**)(void))(*(void *)sub_10003FB34() + 200);

  v1();
}

const char *sub_1004D53E8(int *a1)
{
  int v1 = *a1;
  if (*a1 > 2047)
  {
    if (v1 < 0x8000)
    {
      if (v1 >= 0x2000)
      {
        if (v1 == 0x2000) {
          return "Braille";
        }
        if (v1 == 0x4000) {
          return "Passive Multi Stream";
        }
      }
      else
      {
        if (v1 == 2048) {
          return "Gaming";
        }
        if (v1 == 4096) {
          return "Network (Client)";
        }
      }
    }
    else if (v1 < 0x20000)
    {
      if (v1 == 0x8000) {
        return "GATT (Client)";
      }
      if (v1 == 0x10000) {
        return "LE Audio";
      }
    }
    else
    {
      switch(v1)
      {
        case 0x20000:
          return "WirelessiAPSink";
        case 0x80000:
          return "AACP";
        case 0x100000:
          return "GATT";
      }
    }
    return "Unknown";
  }
  if (v1 > 31)
  {
    if (v1 > 255)
    {
      if (v1 == 256) {
        return "Network (Server)";
      }
      if (v1 == 512) {
        return "MAP";
      }
    }
    else
    {
      if (v1 == 32) {
        return "HID";
      }
      if (v1 == 128) {
        return "WirelessiAP";
      }
    }
    return "Unknown";
  }
  uint64_t result = "Handsfree";
  switch(v1)
  {
    case -1:
      uint64_t result = "ALL";
      break;
    case 0:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return "Unknown";
    case 1:
      return result;
    case 2:
      uint64_t result = "Phonebook";
      break;
    case 8:
      uint64_t result = "Remote";
      break;
    default:
      if (v1 != 16) {
        return "Unknown";
      }
      uint64_t result = "A2DP";
      break;
  }
  return result;
}

uint64_t sub_1004D55B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, a1 + 40);
  sub_1004D1458(a1, a2, a3, 2, a5, a6, 0);
  return sub_10003AFB4((uint64_t)v12);
}

void sub_1004D5638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1004D564C(uint64_t a1)
{
}

void sub_1004D5658(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 114))
  {
    uint64_t v2 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_100771390(v2, v3, v4, v5, v6, v7, v8, v9);
    }
  }
  else
  {
    v23[0] = 0;
    v23[1] = 0;
    sub_10003AED0((uint64_t)v23, a1 + 208);
    uint64_t v12 = *(void *)(a1 + 312);
    if (v12)
    {
      uint64_t v13 = *(void *)(a1 + 280);
      if (*(void *)(a1 + 288) != v13)
      {
        unint64_t v14 = *(void *)(a1 + 304);
        unint64_t v15 = (void *)(v13 + 8 * (v14 / 0x66));
        unint64_t v16 = (void *)(*v15 + 40 * (v14 % 0x66));
        unint64_t v17 = *(void *)(v13 + 8 * ((v14 + v12) / 0x66)) + 40 * ((v14 + v12) % 0x66);
        while (v16 != (void *)v17)
        {
          if (*v16 == a2)
          {
            mach_continuous_time();
            if ((unint64_t)UpTicksToSeconds() >= 0x3C)
            {
              uint64_t v20 = *(void *)(a1 + 104);
              v22[0] = _NSConcreteStackBlock;
              v22[1] = 3221225472;
              void v22[2] = sub_1004D970C;
              void v22[3] = &unk_100998260;
              uint8_t v22[4] = a1;
              v22[5] = a2;
              sub_100013018(v20, v22);
              goto LABEL_14;
            }
          }
          v16 += 5;
          if ((void *)((char *)v16 - *v15) == (void *)4080)
          {
            int v18 = (void *)v15[1];
            ++v15;
            unint64_t v16 = v18;
          }
        }
      }
    }
    uint64_t v19 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)unint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "No device stalls detected in Service Manager", v21, 2u);
    }
LABEL_14:
    sub_10003AFB4((uint64_t)v23);
  }
}

void sub_1004D5820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004D5838(uint64_t a1, uint64_t a2, int a3)
{
  if (!a3) {
    goto LABEL_47;
  }
  unsigned __int8 v31 = 0;
  uint64_t v4 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 8))(v4))
  {
    uint64_t v5 = sub_100017768();
    sub_10004191C(buf, "FastConnect");
    sub_10004191C(&__p, "DisableFastConnect");
    (*(void (**)(uint64_t, unsigned char *, void **, unsigned __int8 *))(*(void *)v5 + 72))(v5, buf, &__p, &v31);
    if (SHIBYTE(v30) < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v38) < 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v6 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v31;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Outgoing Connection, disableFastConnect = %d", buf, 8u);
    }
  }
  uint64_t v7 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = sub_100478B2C(a2, 21);
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "startConnectServices supportsProfileFastConnect:%d", buf, 8u);
  }
  long long v27 = xmmword_1007BEF80;
  std::string __p = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  if (sub_10047AE08(a2, (uint64_t)&v27, 0x201u, &__p))
  {
    if (*(unsigned char *)__p == 1) {
      int v9 = *((_DWORD *)__p + 2);
    }
    else {
      int v9 = 0;
    }
  }
  else
  {
    int v9 = 0;
  }
  if (v31) {
    goto LABEL_17;
  }
  if (!sub_100478B2C(a2, 21)) {
    goto LABEL_92;
  }
  if (qword_1009F87A8 != -1) {
    dispatch_once(&qword_1009F87A8, &stru_1009B1BE8);
  }
  if (sub_10046EC14((uint64_t)off_1009F87A0, a2))
  {
LABEL_92:
    if (qword_1009FB170 != -1) {
      dispatch_once(&qword_1009FB170, &stru_1009B1CA8);
    }
    if (!sub_100669338((uint64_t)off_1009FB168, a2)) {
      goto LABEL_17;
    }
    if (qword_1009F87A8 != -1) {
      dispatch_once(&qword_1009F87A8, &stru_1009B1BE8);
    }
    if (sub_10046ED88((uint64_t)off_1009F87A0, a2)) {
      goto LABEL_17;
    }
  }
  int v20 = sub_100478B2C(a2, 12);
  int v21 = v9 ? v20 : 0;
  if (v21 != 1)
  {
LABEL_17:
    uint64_t v10 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a2, v32);
      if (v33 >= 0) {
        unint64_t v11 = v32;
      }
      else {
        unint64_t v11 = *(unsigned char **)v32;
      }
      if (qword_1009F87A8 != -1) {
        dispatch_once(&qword_1009F87A8, &stru_1009B1BE8);
      }
      BOOL v12 = sub_10046EC14((uint64_t)off_1009F87A0, a2) != 0;
      if (qword_1009F87A8 != -1) {
        dispatch_once(&qword_1009F87A8, &stru_1009B1BE8);
      }
      int v13 = sub_10046ED88((uint64_t)off_1009F87A0, a2);
      if (qword_1009FB170 != -1) {
        dispatch_once(&qword_1009FB170, &stru_1009B1CA8);
      }
      int v14 = sub_100669338((uint64_t)off_1009FB168, a2);
      *(_DWORD *)std::string buf = 136447234;
      *(void *)&uint8_t buf[4] = v11;
      __int16 v35 = 1024;
      BOOL v36 = v12;
      __int16 v37 = 1024;
      int v38 = v9;
      __int16 v39 = 1024;
      int v40 = v13;
      __int16 v41 = 1024;
      int v42 = v14;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Did not do PFC for device %{public}s. Connection for device exits: %d, SDP service database state: %d, service connected:%d, PFCALL:%d", buf, 0x24u);
      if (v33 < 0) {
        operator delete(*(void **)v32);
      }
    }
    if (!v31)
    {
      if (qword_1009FB170 != -1) {
        dispatch_once(&qword_1009FB170, &stru_1009B1CA8);
      }
      int v15 = sub_100669338((uint64_t)off_1009FB168, a2);
      int v16 = v9 ? 0 : v15;
      if (v16 == 1)
      {
        unint64_t v17 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "No SDP record but both supports PFC all, start PFC after SDP", buf, 2u);
        }
        if (qword_1009FB170 != -1) {
          dispatch_once(&qword_1009FB170, &stru_1009B1CA8);
        }
        char v18 = 1;
        goto LABEL_43;
      }
    }
    if (qword_1009FB170 == -1)
    {
      char v18 = 0;
LABEL_43:
      *((unsigned char *)off_1009FB168 + 682) = v18;
      char v19 = 1;
      goto LABEL_44;
    }
LABEL_89:
    dispatch_once(&qword_1009FB170, &stru_1009B1CA8);
    char v18 = 0;
    goto LABEL_43;
  }
  if (qword_1009FB170 != -1) {
    dispatch_once(&qword_1009FB170, &stru_1009B1CA8);
  }
  int v22 = sub_100669190((uint64_t)off_1009FB168, a2);
  char v19 = v22;
  if (v22)
  {
    if (v22 == 4506)
    {
      unsigned int v25 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(a2, buf);
        int v26 = v38 >= 0 ? buf : *(unsigned char **)buf;
        *(_DWORD *)int64_t v32 = 136446210;
        *(void *)&v32[4] = v26;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "PFC device %{public}s already connected!", v32, 0xCu);
        if (SHIBYTE(v38) < 0) {
          operator delete(*(void **)buf);
        }
      }
    }
    else
    {
      if (v22 == 4508)
      {
        unint64_t v23 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          sub_100474E18(a2, buf);
          uint64_t v24 = v38 >= 0 ? buf : *(unsigned char **)buf;
          *(_DWORD *)int64_t v32 = 136446210;
          *(void *)&v32[4] = v24;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "PFC connection for device %{public}s already in progress", v32, 0xCu);
          if (SHIBYTE(v38) < 0) {
            operator delete(*(void **)buf);
          }
        }
        sub_10048C058(a2, 0);
        char v19 = 0;
        goto LABEL_44;
      }
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
      {
        sub_100474E18(a2, buf);
        sub_1007713C8();
      }
    }
    if (qword_1009FB170 == -1)
    {
      char v18 = 0;
      goto LABEL_43;
    }
    goto LABEL_89;
  }
LABEL_44:
  if (__p)
  {
    uint64_t v29 = __p;
    operator delete(__p);
  }
  if (v19)
  {
LABEL_47:
    if (qword_1009F87A8 != -1) {
      dispatch_once(&qword_1009F87A8, &stru_1009B1BE8);
    }
    sub_10046F158((uint64_t)off_1009F87A0, a2);
    if (qword_1009FB698 != -1) {
      dispatch_once(&qword_1009FB698, &stru_1009B1C48);
    }
    sub_1004C8250(qword_1009FB690, a2);
  }
}

void sub_1004D5FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004D6030(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    sub_1004A82EC(a2, __p);
    if (v9 >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136446210;
    unint64_t v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "delayedConnectServices addr %{public}s", buf, 0xCu);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }
  int v6 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 70sub_1004C2140(qword_100A19B68, 0) = *((_WORD *)a2 + 2);
  *(_DWORD *)(a1 + 696) = v6;
  return 0;
}

uint64_t sub_1004D6124(uint64_t a1, uint64_t a2)
{
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, a1 + 120);
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  sub_1004DA374(&v8, a1 + 184);
  sub_10003AFE8((uint64_t)v11);
  uint64_t v4 = v9;
  if (v9 == &v8)
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    do
    {
      int v6 = (_DWORD *)v4[2];
      if ((*(unsigned int (**)(_DWORD *, uint64_t))(*(void *)v6 + 48))(v6, a2)) {
        uint64_t v5 = v6[8] | v5;
      }
      uint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4 != &v8);
  }
  sub_1002B308C(&v8);
  sub_10003AFB4((uint64_t)v11);
  return v5;
}

void sub_1004D6204(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1002B308C((uint64_t *)va);
  sub_10003AFB4((uint64_t)va1);
  _Unwind_Resume(a1);
}

unsigned char *sub_1004D622C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, int a4)
{
  char v10 = 1;
  char v9 = 0;
  sub_10001B8E0(&v9);
  sub_1002531B4((uint64_t)(a2 + 128), (BOOL *)&v10);
  sub_10001B910(&v9);
  if (((a4 & 1) != 0 || !v10) && (sub_100040630(a2) & 1) == 0 && !sub_100478AF4((uint64_t)a2))
  {
    uint64_t v7 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109376;
      int v12 = a4;
      __int16 v13 = 1024;
      int v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Sleep workaround after SDP due device-database %d, remote ssp %d", buf, 0xEu);
    }
    sub_10010BDB0(1800);
  }
  if (qword_1009F8090 != -1) {
    dispatch_once(&qword_1009F8090, &stru_1009B1C68);
  }
  sub_1004D63A4((int64x2_t *)off_1009F8088, a2, a3);
  return sub_10001B8AC(&v9);
}

void sub_1004D6388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12)
{
}

uint64_t sub_1004D63A4(int64x2_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (!a3)
  {
    v86[0] = 0;
    v86[1] = 0;
    sub_10003AED0((uint64_t)v86, (uint64_t)a1[13].i64);
    uint64_t v7 = a1[19].i64[1];
    if (!v7)
    {
      if (qword_1009F87A8 != -1) {
        dispatch_once(&qword_1009F87A8, &stru_1009B1BE8);
      }
      sub_10046F2CC((uint64_t)off_1009F87A0, (uint64_t)a2, 0);
      if (qword_1009FB698 != -1) {
        dispatch_once(&qword_1009FB698, &stru_1009B1C48);
      }
      sub_1004C848C();
    }
    unint64_t v8 = a1[19].u64[0];
    uint64_t v9 = a1[17].i64[1];
    uint64_t v10 = a1[18].i64[0];
    unint64_t v11 = (void *)(v9 + 8 * (v8 / 0x66));
    if (v10 == v9) {
      unint64_t v12 = 0;
    }
    else {
      unint64_t v12 = *v11 + 40 * (v8 % 0x66);
    }
    unint64_t v13 = v8 + v7;
    unint64_t v14 = v13 / 0x66;
    unint64_t v15 = v13 % 0x66;
LABEL_21:
    unint64_t v16 = v12 - 4080;
    while (1)
    {
      uint64_t v17 = v10 == v9 ? 0 : *(void *)(v9 + 8 * v14) + 40 * v15;
      if (v12 == v17 || *(unsigned __int8 **)v12 == a2) {
        break;
      }
      v12 += 40;
      v16 += 40;
      if (*v11 == v16)
      {
        unint64_t v18 = v11[1];
        ++v11;
        unint64_t v12 = v18;
        goto LABEL_21;
      }
    }
    if (v10 == v9) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = *(void *)(v9 + 8 * v14) + 40 * v15;
    }
    if (v12 == v19)
    {
      unsigned int v25 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18((uint64_t)a2, v92);
        int v26 = v92[23] >= 0 ? v92 : *(unsigned char **)v92;
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = v26;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Got an SDP response without a connection in progress for device %{public}s - was there a successful incoming connection during the outgoing one?", buf, 0xCu);
        if ((v92[23] & 0x80000000) != 0) {
          operator delete(*(void **)v92);
        }
      }
      if (qword_1009F87A8 != -1) {
        dispatch_once(&qword_1009F87A8, &stru_1009B1BE8);
      }
      sub_10046F2CC((uint64_t)off_1009F87A0, (uint64_t)a2, 0);
      if (qword_1009FB698 != -1) {
        dispatch_once(&qword_1009FB698, &stru_1009B1C48);
      }
      sub_1004C848C();
    }
    sub_10003AFE8((uint64_t)v86);
    if (qword_1009FB170 != -1) {
      dispatch_once(&qword_1009FB170, &stru_1009B1CA8);
    }
    if (sub_100669338((uint64_t)off_1009FB168, (uint64_t)a2))
    {
      if (qword_1009FB170 != -1) {
        dispatch_once(&qword_1009FB170, &stru_1009B1CA8);
      }
      if (*((unsigned char *)off_1009FB168 + 682))
      {
        if (qword_1009F87A8 != -1) {
          dispatch_once(&qword_1009F87A8, &stru_1009B1BE8);
        }
        if (sub_10046EC14((uint64_t)off_1009F87A0, (uint64_t)a2)
          && !sub_1004D41B4((uint64_t)a1, (uint64_t)a2))
        {
          int v20 = qword_100A19E50;
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
          {
            sub_100474E18((uint64_t)a2, v92);
            int v21 = v92[23];
            int v22 = *(unsigned char **)v92;
            int v23 = sub_100040630(a2);
            uint64_t v24 = v92;
            if (v21 < 0) {
              uint64_t v24 = v22;
            }
            *(_DWORD *)std::string buf = 136446466;
            *(void *)&uint8_t buf[4] = v24;
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v23;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Fast connect after SDP, device %{public}s, paired:%d", buf, 0x12u);
            if ((v92[23] & 0x80000000) != 0) {
              operator delete(*(void **)v92);
            }
          }
          if (qword_1009FB698 != -1) {
            dispatch_once(&qword_1009FB698, &stru_1009B1C48);
          }
          sub_1004C848C();
        }
LABEL_73:
        v85[0] = 0;
        v85[1] = 0;
        sub_10003AED0((uint64_t)v85, (uint64_t)&a1[7].i64[1]);
        memset(buf, 0, 24);
        sub_1004DA374(buf, (uint64_t)&a1[11].i64[1]);
        sub_10003AFE8((uint64_t)v85);
        int v33 = *(_DWORD *)(v12 + 24);
        uint64_t v83 = 0;
        uint64_t v84 = 0;
        BOOL v34 = sub_10047B7A8((uint64_t)a2, (_DWORD *)&v84 + 1, &v84, &v83, (_DWORD *)&v83 + 1);
        __int16 v35 = qword_100A19E50;
        uint64_t v36 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT);
        if (v36)
        {
          sub_100474E18((uint64_t)a2, __p);
          __int16 v37 = v90 >= 0 ? __p : *(unsigned char **)__p;
          int v38 = sub_100040630(a2);
          int v39 = v83;
          BOOL v40 = sub_100478AF4((uint64_t)a2);
          *(_DWORD *)uint64_t v92 = 136447490;
          *(void *)&v92[4] = v37;
          *(_WORD *)&v92[12] = 1024;
          *(_DWORD *)&v92[14] = v38;
          *(_WORD *)&v92[18] = 1024;
          *(_DWORD *)&v92[20] = v34;
          *(_WORD *)&v92[24] = 1024;
          *(_DWORD *)&v92[26] = v39;
          *(_WORD *)&v92[30] = 1024;
          LODWORD(v93) = v40;
          WORD2(v93) = 1024;
          *(_DWORD *)((char *)&v93 + 6) = v33;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Handle query complete for device %{public}s isPaired %d deviceIDStatus %d pid 0x%x isAppleBluetooth %d mask 0x%x", v92, 0x2Au);
          if (v90 < 0) {
            operator delete(*(void **)__p);
          }
        }
        if (!v34) {
          goto LABEL_89;
        }
        if (!sub_10047C0D0((uint64_t)a2))
        {
          uint64_t v67 = qword_100A19E50;
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
          {
            sub_100475EE0((uint64_t)a2, (uint64_t)v92);
            int v68 = v92[23] >= 0 ? v92 : *(unsigned char **)v92;
            *(_DWORD *)std::string __p = 136446466;
            *(void *)&__p[4] = "void BT::ServiceManager::handleQueryComplete(Device *, BTResult)";
            __int16 v88 = 2082;
            __int16 v89 = v68;
            _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "%{public}s - Device “%{public}s” not supported on this platform, disconnecting", __p, 0x16u);
            if ((v92[23] & 0x80000000) != 0) {
              operator delete(*(void **)v92);
            }
          }
          sub_1004D1458((uint64_t)a1, (uint64_t)a2, 0, 0, 11, 0, 0);
          uint64_t v69 = a1[6].i64[1];
          *(void *)uint64_t v92 = _NSConcreteStackBlock;
          *(void *)&v92[8] = 3221225472;
          *(void *)&v92[16] = sub_1004D8038;
          *(void *)&v92[24] = &unk_1009A0160;
          *(void *)&long long v93 = a1;
          *((void *)&v93 + 1) = a2;
          char v94 = 1;
          sub_100013018(v69, v92);
          goto LABEL_158;
        }
        uint64_t v36 = sub_100478AF4((uint64_t)a2);
        int v41 = v83 == 8207 ? v36 : 0;
        if (v41 == 1 && ((v36 = sub_100040630(a2), !v33) ? (char v42 = 1) : (char v42 = v36), (v42 & 1) == 0))
        {
          uint64_t v71 = *(void *)&buf[8];
          char v72 = 0;
          if (*(uint8_t **)&buf[8] == buf)
          {
            unsigned int v80 = 109;
          }
          else
          {
            unsigned int v80 = 109;
            do
            {
              uint64_t v36 = *(void *)(v71 + 16);
              int v73 = *(_DWORD *)(v36 + 32);
              if (v73 == 0x80000 && (v33 & 0x80000) != 0)
              {
                unsigned int v75 = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(void *)v36 + 80))(v36, a2);
                int v76 = qword_100A19E50;
                uint64_t v36 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT);
                if (v36)
                {
                  sub_100474E18((uint64_t)a2, __p);
                  char v77 = __p;
                  if (v90 < 0) {
                    char v77 = *(unsigned char **)__p;
                  }
                  *(_DWORD *)uint64_t v92 = 136315650;
                  *(void *)&v92[4] = v77;
                  *(_WORD *)&v92[12] = 1024;
                  *(_DWORD *)&v92[14] = v33;
                  *(_WORD *)&v92[18] = 1024;
                  *(_DWORD *)&v92[20] = v75;
                  _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEFAULT, "AACPFirst: Connecting AACP first for %s mask 0x%x with result %d", v92, 0x18u);
                  if (v90 < 0) {
                    operator delete(*(void **)__p);
                  }
                }
                if (v75 - 107 >= 2)
                {
                  if (v75 == 303 || v75 == 0)
                  {
                    unsigned int v80 = 0;
                  }
                  else
                  {
                    unsigned int v79 = v80;
                    if (v80 == 109) {
                      unsigned int v79 = v75;
                    }
                    unsigned int v80 = v79;
                  }
                }
                char v72 = 1;
              }
              uint64_t v71 = *(void *)(v71 + 8);
            }
            while ((uint8_t *)v71 != buf);
          }
          char v43 = v72 & 1;
        }
        else
        {
LABEL_89:
          char v43 = 0;
          unsigned int v80 = 109;
        }
        uint64_t v44 = *(void *)&buf[8];
        if (*(uint8_t **)&buf[8] != buf)
        {
          char v45 = v43 ^ 1;
          do
          {
            uint64_t v46 = *(void *)(v44 + 16);
            int v47 = *(_DWORD *)(v46 + 32);
            if ((v47 & v33) == 0) {
              goto LABEL_136;
            }
            if (v47 == 0x80000) {
              char v48 = v45;
            }
            else {
              char v48 = 1;
            }
            if ((v48 & 1) == 0)
            {
              uint64_t v49 = qword_100A19E50;
              uint64_t v36 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT);
              if (v36)
              {
                *(_DWORD *)uint64_t v92 = 67109120;
                *(_DWORD *)&v92[4] = v33;
                _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "AACPFirst: Skipping AACP Connection mask 0x%x", v92, 8u);
              }
              goto LABEL_136;
            }
            if (v47 == 0x100000)
            {
              if (sub_1004D738C(v36, a2))
              {
                uint64_t v50 = qword_100A19E50;
                uint64_t v36 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT);
                if (v36)
                {
                  sub_100474E18((uint64_t)a2, v92);
                  uint64_t v51 = v92;
                  if (v92[23] < 0) {
                    uint64_t v51 = *(unsigned char **)v92;
                  }
                  *(_DWORD *)std::string __p = 136315394;
                  *(void *)&__p[4] = v51;
                  __int16 v88 = 1024;
                  LODWORD(v89) = v33;
                  uint64_t v52 = v50;
                  uint64_t v53 = "Skipping CATT Connection for device %s with mask 0x%x";
LABEL_111:
                  _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, v53, __p, 0x12u);
                  if ((v92[23] & 0x80000000) != 0) {
                    operator delete(*(void **)v92);
                  }
                  goto LABEL_136;
                }
                goto LABEL_136;
              }
              int v47 = *(_DWORD *)(v46 + 32);
            }
            if (v47 != 512)
            {
              unsigned int v56 = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(void *)v46 + 80))(v46, a2);
              int v57 = qword_100A19E50;
              uint64_t v36 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT);
              if (v36)
              {
                sub_100475EE0((uint64_t)a2, (uint64_t)__p);
                if (v90 >= 0) {
                  unint64_t v58 = __p;
                }
                else {
                  unint64_t v58 = *(unsigned char **)__p;
                }
                if (*(char *)(v46 + 31) < 0)
                {
                  sub_10003B098(__dst, *(void **)(v46 + 8), *(void *)(v46 + 16));
                }
                else
                {
                  long long v59 = *(_OWORD *)(v46 + 8);
                  uint64_t v82 = *(void *)(v46 + 24);
                  *(_OWORD *)unsigned int __dst = v59;
                }
                uint64_t v60 = __dst;
                if (v82 < 0) {
                  uint64_t v60 = (void **)__dst[0];
                }
                *(_DWORD *)uint64_t v92 = 67109634;
                *(_DWORD *)&v92[4] = v56;
                *(_WORD *)&v92[8] = 2080;
                *(void *)&v92[10] = v58;
                *(_WORD *)&v92[18] = 2080;
                *(void *)&v92[20] = v60;
                _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "Connection Result %d for device %s for service %s", v92, 0x1Cu);
                if (SHIBYTE(v82) < 0) {
                  operator delete(__dst[0]);
                }
                if (v90 < 0) {
                  operator delete(*(void **)__p);
                }
              }
              if (v56 - 107 >= 2)
              {
                if (v56 == 303 || v56 == 0)
                {
                  unsigned int v80 = 0;
                }
                else
                {
                  unsigned int v62 = v80;
                  if (v80 == 109) {
                    unsigned int v62 = v56;
                  }
                  unsigned int v80 = v62;
                }
              }
              goto LABEL_136;
            }
            uint64_t v54 = qword_100A19E50;
            uint64_t v36 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT);
            if (v36)
            {
              sub_100474E18((uint64_t)a2, v92);
              unint64_t v55 = v92;
              if (v92[23] < 0) {
                unint64_t v55 = *(unsigned char **)v92;
              }
              *(_DWORD *)std::string __p = 136315394;
              *(void *)&__p[4] = v55;
              __int16 v88 = 1024;
              LODWORD(v89) = v33;
              uint64_t v52 = v54;
              uint64_t v53 = "Skipping outgoing MAP Connection for device %s with mask 0x%x";
              goto LABEL_111;
            }
LABEL_136:
            uint64_t v44 = *(void *)(v44 + 8);
          }
          while ((uint8_t *)v44 != buf);
        }
        if (v80)
        {
          if (v80 != 109) {
            goto LABEL_145;
          }
          sub_100475F84((uint64_t)a2, (uint64_t)v92);
          int v63 = v92[23];
          uint64_t v64 = *(void **)v92;
          if (v92[23] >= 0) {
            uint64_t v65 = v92;
          }
          else {
            uint64_t v65 = *(const char **)v92;
          }
          int v66 = strncmp(v65, "MB Bluetooth", 0xCuLL);
          if (v63 < 0) {
            operator delete(v64);
          }
          if (!v66)
          {
            sub_1004D1458((uint64_t)a1, (uint64_t)a2, 0, 0, 11, 0, 0);
            unsigned int v70 = qword_100A19E50;
            if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)uint64_t v92 = 0;
              _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "This device reports no services supported and then makes incoming connection :( ", v92, 2u);
            }
          }
          else
          {
LABEL_145:
            if (qword_1009F87A8 != -1) {
              dispatch_once(&qword_1009F87A8, &stru_1009B1BE8);
            }
            sub_10046F2CC((uint64_t)off_1009F87A0, (uint64_t)a2, v80);
            sub_1004D1458((uint64_t)a1, (uint64_t)a2, 0xFFFFFFFFLL, 0, 11, v80, 0);
          }
          if (qword_1009FB698 != -1) {
            dispatch_once(&qword_1009FB698, &stru_1009B1C48);
          }
          sub_1004C848C();
        }
LABEL_158:
        sub_1002B308C(buf);
        sub_10003AFB4((uint64_t)v85);
        return sub_10003AFB4((uint64_t)v86);
      }
    }
    else if (qword_1009FB170 != -1)
    {
      dispatch_once(&qword_1009FB170, &stru_1009B1CA8);
    }
    uint64_t v27 = *((void *)off_1009FB168 + 84);
    int v28 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18((uint64_t)a2, buf);
      int v29 = (char)buf[23];
      uint64_t v30 = *(uint8_t **)buf;
      int v31 = sub_100040630(a2);
      int64_t v32 = buf;
      *(_DWORD *)uint64_t v92 = 136446722;
      if (v29 < 0) {
        int64_t v32 = v30;
      }
      *(void *)&v92[4] = v32;
      *(_WORD *)&v92[12] = 1024;
      *(_DWORD *)&v92[14] = v31;
      *(_WORD *)&v92[18] = 2048;
      *(void *)&v92[20] = v27;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Lagacy profile connection after SDP, device %{public}s, paired:%d, FC features:%llx", v92, 0x1Cu);
      if ((char)buf[23] < 0) {
        operator delete(*(void **)buf);
      }
    }
    if ((v27 & 0x10) != 0)
    {
      if (qword_1009FB170 != -1) {
        dispatch_once(&qword_1009FB170, &stru_1009B1CA8);
      }
      *((unsigned char *)off_1009FB168 + 682) = 1;
    }
    goto LABEL_73;
  }
  if (qword_1009F87A8 != -1) {
    dispatch_once(&qword_1009F87A8, &stru_1009B1BE8);
  }
  sub_10046F2CC((uint64_t)off_1009F87A0, (uint64_t)a2, a3);
  sub_1004D1458((uint64_t)a1, (uint64_t)a2, 0xFFFFFFFFLL, 0, 11, a3, 0);
  if (a3 != 17)
  {
    if (qword_1009FB698 != -1) {
      dispatch_once(&qword_1009FB698, &stru_1009B1C48);
    }
    sub_1004C848C();
  }

  return sub_1004D2074(a1, (uint64_t)a2);
}

void sub_1004D72C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (*(char *)(v39 - 137) < 0) {
    operator delete(*(void **)(v39 - 160));
  }
  sub_10003AFB4((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_1004D738C(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = a2[128];
  uint64_t v4 = a2[129];
  uint64_t v5 = a2[130];
  uint64_t v6 = a2[131];
  uint64_t v7 = a2[132];
  uint64_t v8 = a2[133];
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009B1C08);
  }
  v10[0] = 0;
  v10[1] = 0;
  sub_100014B58((uint64_t)off_1009F7ED8, (v3 << 40) | (v4 << 32) | (v5 << 24) | (v6 << 16) | (v7 << 8) | v8, 0, 1u, 0, 0, (unsigned __int8 *)v10);
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009B1CE8);
  }
  if (sub_1000307A4((uint64_t)off_1009F7EB8, (unsigned __int8 *)v10)) {
    return 1;
  }
  else {
    return sub_1004784AC((uint64_t)a2) ^ 1;
  }
}

uint64_t sub_1004D74C4(uint64_t a1, uint64_t a2, int a3)
{
  if (!a2)
  {
    uint64_t v6 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
      sub_100771424(v6);
    }
  }
  uint64_t v22 = 0;
  long long v21 = 0u;
  memset(v20, 0, sizeof(v20));
  long long v19 = 0u;
  *(_OWORD *)uint64_t v17 = 0u;
  long long v18 = 0u;
  *(_OWORD *)unint64_t v15 = 0u;
  long long v16 = 0u;
  long long v14 = 0u;
  sub_1006161E0((uint64_t)&v14 + 1);
  BYTE2(v15[0]) = 0;
  BYTE4(v15[0]) = 0;
  BYTE2(v17[0]) = 0;
  BYTE4(v17[0]) = 0;
  HIDWORD(v20[2]) = 0;
  long long v16 = 0uLL;
  v15[1] = 0;
  LOBYTE(v17[0]) = 0;
  long long v18 = 0uLL;
  v17[1] = 0;
  LOBYTE(v19) = 0;
  v20[0] = 0;
  v20[1] = 0;
  *((void *)&v19 + 1) = 0;
  *(_DWORD *)((char *)&v20[1] + 7) = 0;
  LOBYTE(v20[3]) = 1;
  BYTE2(v22) = 0;
  *(void *)((char *)&v20[3] + 6) = 0;
  *(void *)((char *)&v20[3] + 1) = 0;
  long long v21 = 0uLL;
  v20[5] = 0;
  LOBYTE(v22) = 0;
  BOOL v7 = sub_1004783B8(a2, (uint64_t)&v14);
  if (BYTE1(v20[2])) {
    BOOL v8 = v7;
  }
  else {
    BOOL v8 = 0;
  }
  uint64_t v9 = *(void *)(a1 + 104);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_1004D76A8;
  v11[3] = &unk_1009A28D8;
  uint8_t v11[4] = a1;
  void v11[5] = a2;
  int v12 = a3;
  BOOL v13 = v8;
  sub_100013018(v9, v11);
  if (SHIBYTE(v20[1]) < 0) {
    operator delete(*((void **)&v19 + 1));
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(v17[1]);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[1]);
  }
  return nullsub_95((char *)&v14 + 1);
}

void sub_1004D768C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

unsigned char *sub_1004D76A8(uint64_t a1)
{
  return sub_1004D622C(a1, *(unsigned __int8 **)(a1 + 40), *(unsigned int *)(a1 + 48), *(unsigned __int8 *)(a1 + 52));
}

uint64_t sub_1004D76B8(uint64_t a1, uint64_t a2, int a3)
{
  return sub_1004D74C4(a1 - 32, a2, a3);
}

uint64_t sub_1004D76C0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a2, &__p);
    BOOL v7 = v10 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)std::string buf = 136446466;
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Disconnecting services from device %{public}s with mask 0x%x", buf, 0x12u);
    if (v10 < 0) {
      operator delete(__p);
    }
  }
  *(void *)std::string buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  sub_10003AED0((uint64_t)buf, a1 + 40);
  if (*(unsigned char *)(a1 + 112))
  {
    sub_10003AFE8((uint64_t)buf);
    if (qword_1009F8748 != -1) {
      dispatch_once(&qword_1009F8748, &stru_1009B1C88);
    }
    if (sub_100028CB4((uint64_t)off_1009F8740))
    {
      if (qword_1009FB698 != -1) {
        dispatch_once(&qword_1009FB698, &stru_1009B1C48);
      }
      sub_1004C848C();
    }
  }
  sub_10003AFB4((uint64_t)buf);
  return 202;
}

void sub_1004D7968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  sub_1002B308C((uint64_t *)va1);
  sub_10003AFB4((uint64_t)va);
  sub_10003AFB4((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_1004D79AC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 32) + 88))(*(void *)(a1 + 32), *(void *)(a1 + 40));
}

uint64_t sub_1004D79D8(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 3;
  }
  v25[0] = 0;
  v25[1] = 0;
  sub_10003AED0((uint64_t)v25, a1 + 40);
  if (!*(unsigned char *)(a1 + 112)) {
    goto LABEL_29;
  }
  sub_10003AFE8((uint64_t)v25);
  if (qword_1009F8748 != -1) {
    dispatch_once(&qword_1009F8748, &stru_1009B1C88);
  }
  if (sub_100028CB4((uint64_t)off_1009F8740))
  {
    int v23 = *(_DWORD *)(a2 + 128);
    __int16 v24 = *(_WORD *)(a2 + 132);
    *(void *)uuid_t uu = 0;
    uint64_t v29 = 0;
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B1C08);
    }
    sub_1006C0414((uint64_t)off_1009F7ED8, (unsigned __int8 *)&v23, uu);
    if (!uuid_is_null(uu))
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009B1C08);
      }
      uint64_t v4 = off_1009F7ED8;
      uint64_t v5 = sub_100031234(uu);
      sub_10004191C(__p, "_CTKD_");
      int v6 = sub_100030A04((uint64_t)v4, v5, (uint64_t)__p);
      if (v22 < 0) {
        operator delete(__p[0]);
      }

      if (v6)
      {
        if (qword_1009F7EC0 != -1) {
          dispatch_once(&qword_1009F7EC0, &stru_1009B1CE8);
        }
        if (sub_1000307A4((uint64_t)off_1009F7EB8, uu))
        {
          BOOL v7 = qword_100A19E50;
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
          {
            memset(out, 0, 37);
            uuid_unparse_upper(uu, out);
            sub_10004191C(v19, out);
            BOOL v8 = v20 >= 0 ? v19 : (void **)v19[0];
            *(_DWORD *)std::string buf = 136315138;
            uint64_t v27 = v8;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "LE device %s is connected, forcing disconnection", buf, 0xCu);
            if (v20 < 0) {
              operator delete(v19[0]);
            }
          }
          if (qword_1009F7EC0 != -1) {
            dispatch_once(&qword_1009F7EC0, &stru_1009B1CE8);
          }
          uint64_t v9 = sub_100683CFC((uint64_t)off_1009F7EB8, uu, 4u);
          if (v9)
          {
            char v10 = qword_100A19E50;
            if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
              sub_1007714A8(v9, v10, v11, v12, v13, v14, v15, v16);
            }
          }
        }
      }
    }
    uint64_t v17 = 0;
  }
  else
  {
LABEL_29:
    uint64_t v17 = 202;
  }
  sub_10003AFB4((uint64_t)v25);
  return v17;
}

void sub_1004D7CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
}

void sub_1004D7D08(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 104);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1004D7D7C;
  v3[3] = &unk_100998260;
  void v3[4] = a1;
  void v3[5] = a2;
  sub_100013018(v2, v3);
}

void sub_1004D7D7C(uint64_t a1)
{
  uint64_t v2 = *(int64x2_t **)(a1 + 32);
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009B1BA8);
  }
  uint64_t v3 = sub_100030F10((uint64_t)off_1009F7EF8, *(void *)(a1 + 40), 1);
  if (v3)
  {
    uint64_t v4 = v3;
    if (sub_1004764A0(v3))
    {
      uint64_t v5 = qword_100A19E50;
      if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = sub_1004D41B4((uint64_t)v2, v4);
      int v6 = "CTKD le device connected, not bridging classic services because services %x is already connected";
      BOOL v7 = v5;
      uint32_t v8 = 8;
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&__p, v8);
      return;
    }
    if (qword_1009F8158 != -1) {
      dispatch_once(&qword_1009F8158, &stru_1009B1CC8);
    }
    if (*((unsigned char *)off_1009F8150 + 198) || *((unsigned char *)off_1009F8150 + 197) || *((unsigned char *)off_1009F8150 + 199))
    {
      uint64_t v17 = qword_100A19E50;
      if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      int v6 = "Device is currently streaming, not bridging";
      BOOL v7 = v17;
      uint32_t v8 = 2;
      goto LABEL_16;
    }
    if ((sub_1004761A4(v4) & 0x19) != 0 || !sub_10047B300(v4))
    {
      long long v18 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(v4, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string buf = 136446210;
        char v22 = p_p;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "This is a disconnected CTKD device (%{public}s) that connected over LE, bringing up classic audio services as well", buf, 0xCu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      memset(&__p, 0, sizeof(__p));
      sub_1004D2DCC(v2, v4, -1048577, &__p, 2);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  else
  {
    uint64_t v9 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_100771514(v9, v10, v11, v12, v13, v14, v15, v16);
    }
  }
}

void sub_1004D8014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004D8038(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, v2 + 40);
  if (*(unsigned char *)(v2 + 112))
  {
    char v4 = 0;
    sub_10001B8E0(&v4);
    sub_10017C380(*(void *)(a1 + 40) + 128);
    sub_10001B910(&v4);
    if (*(unsigned char *)(a1 + 48)) {
      sub_1004D79D8(v2, *(void *)(a1 + 40));
    }
    sub_10001B8AC(&v4);
  }
  return sub_10003AFB4((uint64_t)v5);
}

void sub_1004D80C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004D80E4(uint64_t a1, uint64_t a2, int a3, unsigned char *a4, _DWORD *a5)
{
  int v29 = 0;
  char v28 = 0;
  v27[0] = 0;
  v27[1] = 0;
  sub_10003AED0((uint64_t)v27, a1 + 120);
  uint64_t v24 = 0;
  unsigned int v25 = 0;
  uint64_t v26 = 0;
  sub_1004DA374(&v24, a1 + 184);
  sub_10003AFE8((uint64_t)v27);
  *a4 = 0;
  uint64_t v10 = v25;
  if (v25 != &v24)
  {
    uint64_t v11 = (os_log_t *)&qword_100A19E50;
    do
    {
      uint64_t v12 = (_DWORD *)v10[2];
      if ((v12[8] & a3) != 0)
      {
        int v29 = 0;
        char v28 = 0;
        (*(void (**)(_DWORD *, uint64_t, char *, int *))(*(void *)v12 + 64))(v12, a2, &v28, &v29);
        *a5 |= v29;
        if (v28)
        {
          uint64_t v13 = *v11;
          if (os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v14 = v11;
            (*(void (**)(void **__return_ptr, _DWORD *))(*(void *)v12 + 192))(v22, v12);
            int v15 = v23;
            uint64_t v16 = (void **)v22[0];
            sub_100474E18(a2, __p);
            uint64_t v17 = v22;
            if (v15 < 0) {
              uint64_t v17 = v16;
            }
            long long v18 = __p;
            if (v21 < 0) {
              long long v18 = (void **)__p[0];
            }
            *(_DWORD *)std::string buf = 136446466;
            int v31 = v17;
            __int16 v32 = 2082;
            int v33 = v18;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%{public}s supports device %{public}s", buf, 0x16u);
            if (v21 < 0) {
              operator delete(__p[0]);
            }
            uint64_t v11 = v14;
            if (v23 < 0) {
              operator delete(v22[0]);
            }
          }
          *a4 = 1;
        }
      }
      uint64_t v10 = (uint64_t *)v10[1];
    }
    while (v10 != &v24);
  }
  sub_1002B308C(&v24);
  return sub_10003AFB4((uint64_t)v27);
}

void sub_1004D8328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
}

uint64_t sub_1004D8374(uint64_t a1)
{
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 120);
  uint64_t v6 = 0;
  BOOL v7 = 0;
  uint64_t v8 = 0;
  sub_1004DA374(&v6, a1 + 184);
  sub_10003AFE8((uint64_t)v9);
  uint64_t v2 = v7;
  if (v7 == &v6)
  {
    uint64_t v3 = 0;
  }
  else
  {
    LODWORD(v3) = 0;
    do
    {
      char v4 = v2 + 1;
      uint64_t v2 = (uint64_t *)v2[1];
      uint64_t v3 = *(_DWORD *)(v4[1] + 32) | v3;
    }
    while (v2 != &v6);
  }
  sub_1002B308C(&v6);
  sub_10003AFB4((uint64_t)v9);
  return v3;
}

void sub_1004D840C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1002B308C((uint64_t *)va);
  sub_10003AFB4((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004D8430(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  v16[0] = 0;
  v16[1] = 0;
  sub_10003AED0((uint64_t)v16, a1 + 120);
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  sub_1004DA374(&v13, a1 + 184);
  sub_10003AFE8((uint64_t)v16);
  for (int i = v14; i != &v13; int i = (uint64_t *)i[1])
  {
    uint64_t v11 = (_DWORD *)i[2];
    if ((v11[8] & a3) != 0) {
      (*(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 208))(v11, a2, a4, a5);
    }
  }
  sub_1002B308C(&v13);
  sub_10003AFB4((uint64_t)v16);
  return 0;
}

void sub_1004D8510(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1002B308C((uint64_t *)va);
  sub_10003AFB4((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004D8538(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  v17[0] = 0;
  v17[1] = 0;
  sub_10003AED0((uint64_t)v17, a1 + 120);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  sub_1004DA374(&v14, a1 + 184);
  sub_10003AFE8((uint64_t)v17);
  for (int i = v15; ; int i = (uint64_t *)i[1])
  {
    if (i == &v14)
    {
      uint64_t v12 = 1;
      goto LABEL_7;
    }
    uint64_t v11 = (_DWORD *)i[2];
    if (v11[8] == a3) {
      break;
    }
  }
  uint64_t v12 = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 216))(v11, a2, a4, a5);
LABEL_7:
  sub_1002B308C(&v14);
  sub_10003AFB4((uint64_t)v17);
  return v12;
}

void sub_1004D8624(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1002B308C((uint64_t *)va);
  sub_10003AFB4((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004D864C(uint64_t a1, uint64_t a2, int a3, char *a4, size_t a5)
{
  v20[0] = 0;
  v20[1] = 0;
  sub_10003AED0((uint64_t)v20, a1 + 120);
  uint64_t v17 = 0;
  long long v18 = 0;
  uint64_t v19 = 0;
  sub_1004DA374(&v17, a1 + 184);
  sub_10003AFE8((uint64_t)v20);
  for (int i = v18; ; int i = (uint64_t *)i[1])
  {
    if (i == &v17) {
      goto LABEL_8;
    }
    uint64_t v11 = (_DWORD *)i[2];
    if (v11[8] == a3) {
      break;
    }
  }
  uint64_t v12 = (*(void (**)(_DWORD *, uint64_t))(*(void *)v11 + 184))(v11, a2);
  if (!v12)
  {
LABEL_8:
    uint64_t v15 = 800;
    goto LABEL_9;
  }
  id v13 = v12;
  uint64_t v14 = (const char *)[v13 UTF8String];
  if (strlen(v14) >= a5)
  {
    uint64_t v15 = 5;
  }
  else
  {
    strlcpy(a4, v14, a5);
    uint64_t v15 = 0;
  }

LABEL_9:
  sub_1002B308C(&v17);
  sub_10003AFB4((uint64_t)v20);
  return v15;
}

void sub_1004D8770(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);

  sub_1002B308C((uint64_t *)va);
  sub_10003AFB4((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004D87A4(uint64_t a1)
{
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 120);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  sub_1004DA374(&v5, a1 + 184);
  sub_10003AFE8((uint64_t)v8);
  uint64_t v2 = v6;
  uint64_t v3 = 1;
  while ((uint64_t *)v2 != &v5)
  {
    uint64_t v3 = v3 & (*(unsigned int (**)(void))(**(void **)(v2 + 16) + 224))(*(void *)(v2 + 16));
    uint64_t v2 = *(void *)(v2 + 8);
  }
  sub_1002B308C(&v5);
  sub_10003AFB4((uint64_t)v8);
  return v3;
}

void sub_1004D885C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1002B308C((uint64_t *)va);
  sub_10003AFB4((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004D8884(uint64_t a1)
{
  return sub_1004D87A4(a1 - 16);
}

uint64_t sub_1004D888C(uint64_t a1)
{
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 120);
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  sub_1004DA374(&v4, a1 + 184);
  sub_10003AFE8((uint64_t)v7);
  for (uint64_t i = v5; (uint64_t *)i != &v4; uint64_t i = *(void *)(i + 8))
    (*(void (**)(void))(**(void **)(i + 16) + 232))(*(void *)(i + 16));
  *(unsigned char *)(a1 + 113) = 1;
  sub_1002B308C(&v4);
  return sub_10003AFB4((uint64_t)v7);
}

void sub_1004D8940(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1002B308C((uint64_t *)va);
  sub_10003AFB4((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004D8968(uint64_t a1)
{
  return sub_1004D888C(a1 - 16);
}

uint64_t sub_1004D8970(uint64_t result)
{
  *(unsigned char *)(result + 113) = 0;
  return result;
}

uint64_t sub_1004D8978(uint64_t result)
{
  *(unsigned char *)(result + 97) = 0;
  return result;
}

uint64_t sub_1004D8980(_DWORD *a1)
{
  uint64_t v25 = 0;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v14 = 0u;
  memset(v12, 0, sizeof(v12));
  long long v11 = 0u;
  sub_10004C67C((uint64_t)&v11);
  int v2 = 1;
  do
  {
    LODWORD(v9[0]) = *a1 & v2;
    if (LODWORD(v9[0]))
    {
      uint64_t v3 = sub_10003AB28((uint64_t)v12);
      uint64_t v4 = sub_1004D53E8((int *)v9);
      strlen(v4);
      uint64_t v5 = sub_10003AB28(v3);
      sub_10003AB28(v5);
    }
    v2 *= 2;
  }
  while ((v2 & 0x80000000) == 0);
  std::stringbuf::str();
  if (v10 < 0)
  {
    uint64_t v6 = v9[1];
    operator delete(v9[0]);
    if (v6) {
      goto LABEL_10;
    }
  }
  else if (v10)
  {
    goto LABEL_10;
  }
  sub_10003AB28((uint64_t)v12);
LABEL_10:
  std::stringbuf::str();
  *(void *)((char *)&v12[-1]
  *(void *)&v12[0] = v7;
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1004D8BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100742518((uint64_t)va);
  _Unwind_Resume(a1);
}

const char *sub_1004D8BE8(int *a1)
{
  int v1 = *a1;
  if (*a1 > 1023)
  {
    if (v1 < 0x8000)
    {
      if (v1 <= 4095)
      {
        if (v1 == 1024) {
          return "BT_SERVICE_PASSTHROUGH";
        }
        if (v1 == 2048) {
          return "BT_SERVICE_GAMING";
        }
      }
      else
      {
        switch(v1)
        {
          case 0x1000:
            return "BT_SERVICE_NETWORK_CONSUMER";
          case 0x2000:
            return "BT_SERVICE_BRAILLE";
          case 0x4000:
            return "BT_SERVICE_PASSIVE_MULTI_STREAM";
        }
      }
    }
    else if (v1 >= 0x40000)
    {
      switch(v1)
      {
        case 0x40000:
          return "BT_SERVICE_WIRELESS_CARPLAY";
        case 0x80000:
          return "BT_SERVICE_AACP";
        case 0x100000:
          return "BT_SERVICE_GATT";
      }
    }
    else
    {
      switch(v1)
      {
        case 0x8000:
          return "BT_SERVICE_LE_GATT_CLIENT";
        case 0x10000:
          return "BT_SERVICE_LEA";
        case 0x20000:
          return "BT_SERVICE_WIRELESS_IAP_SINK";
      }
    }
    return "Unknown";
  }
  if (v1 > 15)
  {
    if (v1 > 127)
    {
      switch(v1)
      {
        case 128:
          return "BT_SERVICE_WIRELESS_IAP";
        case 256:
          return "BT_SERVICE_NET_SHARING";
        case 512:
          return "BT_SERVICE_MAP";
      }
    }
    else
    {
      switch(v1)
      {
        case 16:
          return "BT_SERVICE_A2DP";
        case 32:
          return "BT_SERVICE_HID";
        case 64:
          return "BT_SERVICE_SENSOR";
      }
    }
    return "Unknown";
  }
  uint64_t result = "BT_SERVICE_NONE";
  switch(v1)
  {
    case -1:
      uint64_t result = "BT_SERVICE_ALL";
      break;
    case 0:
      return result;
    case 1:
      uint64_t result = "BT_SERVICE_HANDSFREE";
      break;
    case 2:
      uint64_t result = "BT_SERVICE_PHONEBOOK";
      break;
    case 8:
      uint64_t result = "BT_SERVICE_REMOTE";
      break;
    default:
      return "Unknown";
  }
  return result;
}

const char *sub_1004D8E04(int *a1)
{
  int v1 = *a1;
  if (*a1 <= 300)
  {
    if (v1 > 101)
    {
      if (v1 <= 110)
      {
        if (v1 == 102) {
          return "BT_SERVICE_HANDSFREE_AUDIO_DISCONNECTED";
        }
        if (v1 == 110) {
          return "BT_SERVICE_A2DP_LOW_LATENCY_ON";
        }
      }
      else
      {
        switch(v1)
        {
          case 111:
            return "BT_SERVICE_A2DP_LOW_LATENCY_OFF";
          case 201:
            return "BT_SERVICE_A2DP_AUDIO_CONNECTED";
          case 202:
            return "BT_SERVICE_A2DP_AUDIO_DISCONNECTED";
        }
      }
    }
    else if (v1 <= 10)
    {
      if (v1 == 1) {
        return "BT_SERVICE_CONNECTION_ATTEMPT";
      }
      if (v1 == 2) {
        return "BT_SERVICE_DISCONNECTION_ATTEMPT";
      }
    }
    else
    {
      switch(v1)
      {
        case 11:
          return "BT_SERVICE_CONNECTION_RESULT";
        case 12:
          return "BT_SERVICE_DISCONNECTION_RESULT";
        case 101:
          return "BT_SERVICE_HANDSFREE_AUDIO_CONNECTED";
      }
    }
    return "Unknown";
  }
  if (v1 <= 700)
  {
    if (v1 <= 500)
    {
      if (v1 == 301) {
        return "BT_SERVICE_PHONE_BOOK_SEND_INITIATED";
      }
      if (v1 == 302) {
        return "BT_SERVICE_PHONE_BOOK_SEND_COMPLETE";
      }
    }
    else
    {
      switch(v1)
      {
        case 501:
          return "BT_SERVICE_REMOTE_PLAY";
        case 502:
          return "BT_SERVICE_REMOTE_PAUSE";
        case 601:
          return "BT_SERVICE_SENSOR_RSSI";
      }
    }
    return "Unknown";
  }
  if (v1 > 702)
  {
    switch(v1)
    {
      case 703:
        return "BT_SERVICE_HIGH_POWER_DISABLED";
      case 901:
        return "BT_UI_INITIATED_CONNECTION_REQUEST";
      case 902:
        return "BT_CONNECTION_RESULT_PROCESSED";
    }
    return "Unknown";
  }
  if (v1 == 701) {
    return "BT_SERVICE_LMP_NAME_CHANGED";
  }
  else {
    return "BT_SERVICE_HIGH_POWER_ENABLED";
  }
}

void sub_1004D8FDC(uint64_t a1)
{
  int v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: ------------------ Service Manager ------------------", buf, 2u);
    int v2 = qword_100A19E50;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Supported services:", buf, 2u);
    int v2 = qword_100A19E50;
  }
  for (uint64_t i = *(void *)(a1 + 192); i != a1 + 184; uint64_t i = *(void *)(i + 8))
  {
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *(_DWORD *)(*(void *)(i + 16) + 32);
      uint64_t v4 = sub_1004D53E8(&v9);
      *(_DWORD *)std::string buf = 136446210;
      long long v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s", buf, 0xCu);
      int v2 = qword_100A19E50;
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Services pending stop:", buf, 2u);
  }
  uint64_t v5 = a1 + 608;
  uint64_t v6 = *(void *)(a1 + 616);
  if (v6 != a1 + 608)
  {
    uint64_t v7 = qword_100A19E50;
    do
    {
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = *(_DWORD *)(*(void *)(v6 + 16) + 32);
        uint64_t v8 = sub_1004D53E8(&v9);
        *(_DWORD *)std::string buf = 136446210;
        long long v11 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s", buf, 0xCu);
        uint64_t v7 = qword_100A19E50;
      }
      uint64_t v6 = *(void *)(v6 + 8);
    }
    while (v6 != v5);
  }
}

uint64_t sub_1004D9218(uint64_t a1, uint64_t a2)
{
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 120);
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_1004DA374(&v6, a1 + 184);
  sub_10003AFE8((uint64_t)v9);
  for (uint64_t i = v7; (uint64_t *)i != &v6; uint64_t i = *(void *)(i + 8))
    (*(void (**)(void, uint64_t))(**(void **)(i + 16) + 40))(*(void *)(i + 16), a2);
  sub_1002B308C(&v6);
  return sub_10003AFB4((uint64_t)v9);
}

void sub_1004D92CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1002B308C((uint64_t *)va);
  sub_10003AFB4((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004D92F4(uint64_t a1, char *a2, _WORD *a3)
{
  v14[0] = 0;
  v14[1] = 0;
  sub_10003AED0((uint64_t)v14, a1 + 120);
  *(void *)&__len[1] = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  sub_1004DA374(&__len[1], a1 + 184);
  sub_10003AFE8((uint64_t)v14);
  *a3 = 0;
  uint64_t v6 = v12;
  if (v12 == &__len[1]) {
    goto LABEL_9;
  }
  while (1)
  {
    memset(v23, 0, sizeof(v23));
    __len[0] = 0;
    (*(void (**)(void, _OWORD *, _WORD *))(**((void **)v6 + 2) + 200))(*((void *)v6 + 2), v23, __len);
    int v7 = __len[0];
    if (__len[0]) {
      break;
    }
LABEL_5:
    uint64_t v6 = (_WORD *)*((void *)v6 + 1);
    if (v6 == &__len[1]) {
      goto LABEL_9;
    }
  }
  int v8 = (unsigned __int16)*a3;
  if (v8 + __len[0] <= 8)
  {
    memmove(&a2[(unsigned __int16)*a3], a2, __len[0]);
    *a3 += v7;
    goto LABEL_5;
  }
  int v9 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 67109888;
    int v16 = v7;
    __int16 v17 = 1024;
    int v18 = v8;
    __int16 v19 = 1024;
    int v20 = v8 + v7;
    __int16 v21 = 2048;
    uint64_t v22 = 8;
    _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "EIR data length: %d + data length: %d = %d > %lu", buf, 0x1Eu);
  }
LABEL_9:
  sub_1002B308C(&__len[1]);
  sub_10003AFB4((uint64_t)v14);
  return 1;
}

void sub_1004D94D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1002B308C((uint64_t *)va);
  sub_10003AFB4((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004D9508()
{
  uint64_t v0 = sub_100035F54();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v0 + 48))(v0, 2048)) {
    return 1;
  }
  if (qword_1009FB998 != -1) {
    dispatch_once(&qword_1009FB998, &stru_1009B1A68);
  }
  int v1 = *(uint64_t (**)(void))(*(void *)off_1009FB990 + 240);

  return v1();
}

uint64_t sub_1004D95B8(int64x2_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
    sub_10077154C(a2, v6);
  }
  if (qword_1009F87A8 != -1) {
    dispatch_once(&qword_1009F87A8, &stru_1009B1BE8);
  }
  int v7 = (_DWORD *)sub_10046EC14((uint64_t)off_1009F87A0, a2);
  if (a3 && v7 && *v7 == 3)
  {
    if (qword_1009F87A8 != -1) {
      dispatch_once(&qword_1009F87A8, &stru_1009B1BE8);
    }
    sub_10046F2CC((uint64_t)off_1009F87A0, a2, a3);
    int v8 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)char v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Removed device tracking for fast connect after SDP", v10, 2u);
    }
  }
  sub_1004D1458((uint64_t)a1, a2, 0, 0, 11, a3, 0);
  return sub_1004D2074(a1, a2);
}

uint64_t sub_1004D970C(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 114) = 1;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  sub_10047B7A8(*(void *)(a1 + 40), (_DWORD *)&v29 + 1, &v29, (_DWORD *)&v28 + 1, &v28);
  uint64_t v27 = 0;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  *(_OWORD *)long long v15 = 0u;
  long long v16 = 0u;
  memset(v14, 0, sizeof(v14));
  sub_1000419CC((uint64_t)v14);
  uint64_t v2 = sub_10003AB28((uint64_t)v14);
  std::to_string(&v13, v29);
  uint64_t v3 = sub_10003AB28(v2);
  uint64_t v4 = sub_10003AB28(v3);
  std::to_string(&__p, HIDWORD(v28));
  sub_10003AB28(v4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (qword_1009FB088 != -1) {
    dispatch_once(&qword_1009FB088, &stru_1009B1D08);
  }
  uint64_t v5 = qword_1009FB080;
  sub_10004191C(&v13, "Service Manager Stall");
  std::stringbuf::str();
  sub_1004B7DA8(0.0, v5, (uint64_t *)&v13, (uint64_t *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
  {
    sub_100474E18(*(void *)(a1 + 40), &v13);
    int v8 = SHIBYTE(v13.__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = v13.__r_.__value_.__r.__words[0];
    std::stringbuf::str();
    char v10 = &v13;
    if (v8 < 0) {
      char v10 = (std::string *)v9;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136446466;
    int v31 = v10;
    __int16 v32 = 2080;
    int v33 = p_p;
    _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Service Manager Stalled due to %{public}s. Triggering ABC for %s", buf, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1004D9A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_10027E318((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_1004D9AF8()
{
}

void sub_1004D9B04()
{
}

uint64_t sub_1004D9B18(unint64_t *a1)
{
  uint64_t result = sub_1004D9BC0((uint64_t)a1, a1[2]);
  if (result)
  {
    unint64_t v3 = a1[2];
    unint64_t v4 = a1[3];
    unint64_t v5 = a1[4];
    uint64_t v6 = *(uint64_t (**)(unint64_t *, unint64_t, unint64_t, unint64_t))(*a1 + 40);
    return v6(a1, v3, v4, v5);
  }
  return result;
}

uint64_t sub_1004D9B8C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  return sub_100458288(a2, a3, *(void *)(a1 + 40), *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52), *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 60), a4);
}

BOOL sub_1004D9BC0(uint64_t a1, unint64_t a2)
{
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009B1B68);
  }
  uint64_t v3 = qword_1009F8160;

  return sub_10055363C(v3, a2);
}

void sub_1004D9C24(id a1)
{
}

void sub_1004D9C68()
{
}

void sub_1004D9C8C(id a1)
{
}

void sub_1004D9CD0()
{
}

void sub_1004D9CF4(id a1)
{
}

void sub_1004D9D38()
{
}

void sub_1004D9D5C(id a1)
{
}

void sub_1004D9DA0()
{
}

void sub_1004D9DC4(id a1)
{
}

void sub_1004D9E08()
{
}

void sub_1004D9E2C(id a1)
{
}

void sub_1004D9E70()
{
}

void sub_1004D9E94(id a1)
{
}

void sub_1004D9ED8()
{
}

void sub_1004D9EFC(id a1)
{
}

void sub_1004D9F40()
{
}

void sub_1004D9F64(id a1)
{
}

void sub_1004D9FA8()
{
}

void sub_1004D9FCC(id a1)
{
}

void sub_1004DA010()
{
}

void sub_1004DA034(id a1)
{
}

void sub_1004DA078()
{
}

void sub_1004DA09C(id a1)
{
}

void sub_1004DA0E0()
{
}

void sub_1004DA104(id a1)
{
}

void sub_1004DA148()
{
}

void sub_1004DA16C(id a1)
{
}

void sub_1004DA1B0()
{
}

void sub_1004DA1D4(id a1)
{
}

void sub_1004DA218()
{
}

void sub_1004DA23C(id a1)
{
}

void sub_1004DA280()
{
}

void sub_1004DA2A4(id a1)
{
}

void sub_1004DA2E8()
{
}

void sub_1004DA30C(id a1)
{
}

void sub_1004DA350()
{
}

void *sub_1004DA374(void *a1, uint64_t a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != a2)
  {
    uint64_t v5 = 1;
    uint64_t v6 = a1;
    do
    {
      int v7 = operator new(0x18uLL);
      uint64_t v8 = *(void *)(v3 + 16);
      v7[1] = a1;
      void v7[2] = v8;
      void *v7 = v6;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = v5;
      uint64_t v3 = *(void *)(v3 + 8);
      ++v5;
      uint64_t v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1004DA3FC(_Unwind_Exception *a1)
{
  sub_1002B308C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004DA410(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (a1[1] - *a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    abort();
  }
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v9 = v8 - v2;
  if (v9 >> 4 > v4) {
    unint64_t v4 = v9 >> 4;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v10 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v20 = v7;
  long long v11 = (char *)sub_1002B6234(v7, v10);
  uint64_t v12 = &v11[32 * v3];
  std::string __p = v11;
  long long v17 = v12;
  long long v19 = &v11[32 * v13];
  *(_OWORD *)uint64_t v12 = *(_OWORD *)a2;
  *((_DWORD *)v12 + 4) = *(_DWORD *)(a2 + 16);
  *((void *)v12 + 3) = *(void *)(a2 + 24);
  long long v18 = v12 + 32;
  sub_1004DA534(a1, &__p);
  uint64_t v14 = a1[1];
  if (v18 != v17) {
    v18 += (v17 - v18 + 31) & 0xFFFFFFFFFFFFFFE0;
  }
  if (__p) {
    operator delete(__p);
  }
  return v14;
}

void sub_1004DA4FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1004DA534(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      *(_OWORD *)(v6 - 32) = *(_OWORD *)(v2 + v5 - 32);
      *(_DWORD *)(v6 - 16) = *(_DWORD *)(v2 + v5 - 16);
      *(void *)(v6 - 8) = *(void *)(v2 + v5 - 8);
      v5 -= 32;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v7 = *result;
  *uint64_t result = v4;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1004DA5B8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result != a2)
  {
    while (*(void *)result != a3 || a4 != *(void *)(result + 8))
    {
      result += 32;
      if (result == a2) {
        return a2;
      }
    }
  }
  if (result == a2) {
    return a2;
  }
  for (uint64_t i = result + 32; i != a2; i += 32)
  {
    if (*(void *)i != a3 || a4 != *(void *)(i + 8))
    {
      uint64_t v5 = *(void *)(i + 8);
      *(void *)uint64_t result = *(void *)i;
      *(void *)(result + 8) = v5;
      *(_DWORD *)(result + 16) = *(_DWORD *)(i + 16);
      *(void *)(result + 24) = *(void *)(i + 24);
      result += 32;
    }
  }
  return result;
}

void sub_1004DA650(id a1)
{
}

void sub_1004DA694()
{
}

void sub_1004DA6B8(id a1)
{
}

void sub_1004DA6FC()
{
}

void sub_1004DA720(id a1)
{
}

void sub_1004DA764()
{
}

void sub_1004DA788(id a1)
{
}

void sub_1004DA7CC()
{
}

void sub_1004DA7F0(id a1)
{
}

void sub_1004DA834()
{
}

void sub_1004DA858(id a1)
{
}

void sub_1004DA89C()
{
}

void sub_1004DA8C0(id a1)
{
}

void sub_1004DA904()
{
}

void sub_1004DA928(id a1)
{
}

void sub_1004DA96C()
{
}

void sub_1004DA990(id a1)
{
}

void sub_1004DA9D4()
{
}

void sub_1004DA9F8(id a1)
{
}

void sub_1004DAB88()
{
}

void sub_1004DABAC(id a1)
{
}

void sub_1004DABF0()
{
}

void sub_1004DAC14(id a1)
{
}

void sub_1004DAC58()
{
  sub_10004191C(v2, "com.apple.springboard");
  sub_10004191C(v3, "com.apple.Preferences");
  sub_10004191C(v4, "com.apple.preferences");
  sub_10004191C(v5, "com.apple.figEndpoint");
  sub_10004191C(v6, "SFBluetoothPairingSession");
  sub_10004191C(v7, "com.apple.NanoSettings");
  sub_10004191C(v8, "com.apple.NanoMusic");
  sub_1003B9544((uint64_t)&qword_100A19C68, v2, 7);
  for (uint64_t i = 0; i != -21; i -= 3)
  {
    if (SHIBYTE(v8[i + 2]) < 0) {
      operator delete((void *)v8[i]);
    }
  }
  __cxa_atexit((void (*)(void *))sub_1004CF0E8, &qword_100A19C68, (void *)&_mh_execute_header);
}

void sub_1004DADBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v13 = 0;
  while (1)
  {
    if (*(char *)(v11 + v13 + 167) < 0) {
      operator delete(*(void **)(v11 + v13 + 144));
    }
    v13 -= 24;
    if (v13 == -168) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t sub_1004DAE1C(uint64_t a1)
{
  *(void *)a1 = off_1009B1D38;
  *(void *)(a1 + 8) = &off_1009B1DD0;
  *(void *)(a1 + 16) = off_1009B1DE8;
  *(void *)(a1 + 24) = &off_1009B1E18;
  *(void *)(a1 + 32) = &off_1009B1E30;
  *(void *)(a1 + 4sub_1004C2140(qword_100A19B68, 0) = &off_1009B1E48;
  *(void *)(a1 + 48) = off_1009B1E60;
  *(_DWORD *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 6sub_1004C2140(qword_100A19B68, 0) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12sub_1004C2140(qword_100A19B68, 0) = 0;
  *(void *)(a1 + 8sub_1004C2140(qword_100A19B68, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  sub_100052DA8(a1 + 128);
  *(unsigned char *)(a1 + 199) = 0;
  *(_WORD *)(a1 + 202) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(unsigned char *)(a1 + 196) = 0;
  sub_100052DA8(a1 + 208);
  *(_WORD *)(a1 + 276) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 28sub_1004C2140(qword_100A19B68, 0) = 0;
  *(_DWORD *)(a1 + 352) = 0xFFFF;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 36sub_1004C2140(qword_100A19B68, 0) = 0;
  sub_100052DA8(a1 + 392);
  *(void *)(a1 + 464) = 0;
  sub_100052DA8(a1 + 472);
  *(unsigned char *)(a1 + 54sub_1004C2140(qword_100A19B68, 0) = 0;
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_1009B2150);
  }
  *(unsigned char *)(a1 + 203) = sub_1004FB118() != 0.0;
  return a1;
}

void sub_1004DB00C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v8 = v5;
  sub_100052DA4(v8);

  sub_100052DA4(v6);
  if (*(char *)(v2 + 383) < 0) {
    operator delete(*(void **)(v2 + 360));
  }
  if (*(char *)(v2 + 303) < 0) {
    operator delete(*(void **)(v2 + 280));
  }
  sub_100052DA4(v4);
  sub_100052DA4(v3);
  sub_1004E98C8((void ***)va);
  unint64_t v10 = *v7;
  if (*v7)
  {
    *(void *)(v2 + 8sub_1004C2140(qword_100A19B68, 0) = v10;
    operator delete(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1004DB0AC(uint64_t a1)
{
  *(unsigned char *)(a1 + 384) = 0;
  *(unsigned char *)(a1 + 384) = sub_1004DB12C(a1);
  *(unsigned char *)(a1 + 456) = 0;
  *(unsigned char *)(a1 + 456) = sub_1004DB198(a1);
  *(_DWORD *)(a1 + 536) = 0;
  uint64_t v2 = *(void *)sub_100017768();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 656))();
  *(unsigned char *)(a1 + 202) = result;
  return result;
}

uint64_t sub_1004DB12C(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1 + 392);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 384);
  if (!*(unsigned char *)(a1 + 384)) {
    uint64_t v2 = sub_1004E5A30(a1);
  }
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

void sub_1004DB184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004DB198(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1 + 392);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 456);
  if (!*(unsigned char *)(a1 + 456)) {
    uint64_t v2 = sub_1004E5858(a1);
  }
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

void sub_1004DB1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1004DB204()
{
  if (qword_100A132D8 != -1) {
    dispatch_once(&qword_100A132D8, &stru_1009B1E90);
  }
}

void sub_1004DB22C(id a1)
{
  if (sub_10016B718() == 7)
  {
    char v1 = sub_1000D6030((uint64_t (*)(void, void))sub_1004DB378, (uint64_t)sub_1004DB4B8, (uint64_t (*)(void, void))sub_1004DB67C);
    uint64_t v2 = sub_100017768();
    uint64_t v3 = v2;
    if ((v1 & 1) == 0)
    {
      sub_10004191C(v6, "StackManager::initTransport");
      sub_1005C8AF4(v3, 3713, (uint64_t)v6, 1);
    }
    (*(void (**)(uint64_t, void))(*(void *)v2 + 488))(v2, 0);
    if ((sub_1000D625C((uint64_t)sub_1004DB738) & 1) == 0)
    {
      uint64_t v4 = sub_100017768();
      sub_10004191C(v5, "StackManager::initTransport");
      sub_1005C8AF4(v4, 3714, (uint64_t)v5, 1);
    }
  }
}

void sub_1004DB344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004DB378(char *a1, int a2)
{
  if (a2)
  {
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009B20D0);
    }
    sub_1004E2B18((uint64_t)a1, 8, 0, (uint64_t)a1);
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009B20D0);
    }
    uint64_t v4 = off_1009F8068;
    sub_10004191C(&v7, a1);
    sub_1004E258C((uint64_t)v4, 1214, &v7);
  }
  if (sub_100050530())
  {
    uint64_t v3 = sub_100050530();
    sub_10004191C(__p, a1);
    (*(void (**)(uint64_t, uint64_t, void, void **))(*(void *)v3 + 104))(v3, 9, 0, __p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1004DB488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004DB4B8(char *a1, unsigned char *a2)
{
  if (qword_1009F8748 != -1) {
    dispatch_once(&qword_1009F8748, &stru_1009B2130);
  }
  int v4 = sub_100028CB4((uint64_t)off_1009F8740);
  uint64_t v5 = qword_100A19E50;
  BOOL v6 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    long long v7 = "non-";
    if (v4 == 1) {
      long long v7 = "";
    }
    *(_DWORD *)std::string buf = 67109378;
    int v11 = v4;
    __int16 v12 = 2080;
    uint64_t v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Controller is resetting in power state %d, treating as %sfatal", buf, 0x12u);
  }
  if (v4 == 1)
  {
    *a2 = 1;
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009B20D0);
    }
    sub_1004E2B18(v6, 10, 0, (uint64_t)a1);
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009B20D0);
    }
    uint64_t v8 = off_1009F8068;
    sub_10004191C(&v9, a1);
    sub_1004E258C((uint64_t)v8, 1214, &v9);
  }
}

void sub_1004DB658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004DB67C(int a1, uint64_t a2)
{
  int v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109376;
    v5[1] = a1;
    __int16 v6 = 2048;
    uint64_t v7 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "driverMetricsCb: type %u arg %llu", (uint8_t *)v5, 0x12u);
  }
}

void sub_1004DB738(long long *a1)
{
  long long v3 = *a1;
  uint64_t v4 = *((void *)a1 + 2);
  uint64_t v1 = sub_1004AF8EC();
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1004E6990;
  v2[3] = &unk_1009A12D0;
  sub_100013018(v1, v2);
}

uint64_t sub_1004DB7B4(uint64_t a1, unsigned int a2, int a3)
{
  __int16 v6 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(int *)(a1 + 56);
    if (v7 > 2) {
      uint64_t v8 = "Unknown State";
    }
    else {
      uint64_t v8 = off_1009B2290[v7];
    }
    long long v9 = "StackStarted";
    if (*(unsigned char *)(a1 + 60)) {
      unint64_t v10 = "StackStarted";
    }
    else {
      unint64_t v10 = "StackStopped";
    }
    if (a2 > 2) {
      int v11 = "Unknown State";
    }
    else {
      int v11 = off_1009B2290[a2];
    }
    if (!a3) {
      long long v9 = "StackStopped";
    }
    int v14 = 136446978;
    long long v15 = v8;
    __int16 v16 = 2082;
    long long v17 = v10;
    __int16 v18 = 2082;
    long long v19 = v11;
    __int16 v20 = 2082;
    long long v21 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Stack: %{public}s/%{public}s -> %{public}s/%{public}s", (uint8_t *)&v14, 0x2Au);
  }
  *(_DWORD *)(a1 + 56) = a2;
  if (a2 == 1) {
    char v12 = a3;
  }
  else {
    char v12 = 0;
  }
  *(unsigned char *)(a1 + 6sub_1004C2140(qword_100A19B68, 0) = v12;
  return 0;
}

unsigned char *sub_1004DB8F8()
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009B2170);
  }
  sub_1004AD3B0((uint64_t)off_1009F7EF8);
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009B2190);
  }
  sub_1006CF09C((uint64_t)off_1009F7ED8);
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B20D0);
  }
  if (*((unsigned char *)off_1009F8068 + 60))
  {
    char v3 = 0;
    sub_10001B8E0(&v3);
    sub_1000EAD3C();
    uint64_t v0 = sub_10003FFD4();
    (*(void (**)(uint64_t))(*(void *)v0 + 56))(v0);
    return sub_10001B8AC(&v3);
  }
  else
  {
    sub_1000EAD3C();
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)sub_10003FFD4() + 56);
    return (unsigned char *)v2();
  }
}

void sub_1004DBA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_1004DBA58(uint64_t a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136446466;
    *(void *)&uint8_t buf[4] = "Nov 21 2024";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)v158 = "21:04:03";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Starting bluetooth core stack (BUILD %{public}s %{public}s)", buf, 0x16u);
  }
  v156[0] = 0;
  v156[1] = 0;
  sub_10003AED0((uint64_t)v156, a1 + 208);
  *(_WORD *)(a1 + 276) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  if (*(char *)(a1 + 303) < 0)
  {
    **(unsigned char **)(a1 + 28sub_1004C2140(qword_100A19B68, 0) = 0;
    *(void *)(a1 + 288) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 28sub_1004C2140(qword_100A19B68, 0) = 0;
    *(unsigned char *)(a1 + 303) = 0;
  }
  *(unsigned char *)(a1 + 54sub_1004C2140(qword_100A19B68, 0) = 0;
  sub_10003AFE8((uint64_t)v156);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v155 = 0;
  uint64_t v3 = sub_10003FFD4();
  sub_10042AE74(v3 + 208, a1 + 8);
  uint64_t v4 = sub_10003FFD4();
  if (!(*(unsigned int (**)(uint64_t, void **))(*(void *)v4 + 16))(v4, __p))
  {
    if (v155 >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    strlcpy("iOS", (const char *)v5, 0x82uLL);
  }
  uint64_t v6 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v6 + 48))(v6, 256))
  {
    uint64_t v7 = sub_10003FFD4();
    sub_1004E9968(v7 + 248, a1 + 24);
  }
  uint64_t v8 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v8 + 48))(v8, 0x40000))
  {
    uint64_t v9 = sub_10003FFD4();
    sub_1004E9C78(v9 + 688, a1 + 40);
  }
  v153 = sub_1004DD8C4;
  sub_10016AC68((void **)&v153, a1);
  char v152 = 0;
  uint64_t v10 = sub_100017768();
  sub_10004191C(buf, "Stack");
  sub_10004191C(v162, "force1M");
  int v11 = (*(uint64_t (**)(uint64_t, unsigned char *, unsigned char *, char *))(*(void *)v10 + 72))(v10, buf, v162, &v152);
  if (v152) {
    int v12 = v11;
  }
  else {
    int v12 = 0;
  }
  int v138 = v12;
  if (v165 < 0) {
    operator delete(*(void **)v162);
  }
  if ((v158[9] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (v138)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_100771A00();
    }
    sub_10018F5F4();
  }
  unsigned __int8 v151 = 0;
  uint64_t v13 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(v162, "enableLELRInSetDefaultPhy");
  int v14 = (*(uint64_t (**)(uint64_t, unsigned char *, unsigned char *, unsigned __int8 *))(*(void *)v13 + 72))(v13, buf, v162, &v151);
  if (v165 < 0) {
    operator delete(*(void **)v162);
  }
  if ((v158[9] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v14) {
      goto LABEL_35;
    }
  }
  else if (!v14)
  {
    goto LABEL_35;
  }
  long long v15 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v151;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "LELR for testing enableLELR=%d", buf, 8u);
  }
  LOBYTE(v138) = 1;
LABEL_35:
  sub_10018F610(v151);
  char v150 = 0;
  uint64_t v16 = sub_100017768();
  sub_10004191C(buf, "Stack");
  sub_10004191C(v162, "disableConnUpdateWAR");
  int v17 = (*(uint64_t (**)(uint64_t, unsigned char *, unsigned char *, char *))(*(void *)v16 + 72))(v16, buf, v162, &v150);
  if (v150) {
    int v18 = v17;
  }
  else {
    int v18 = 0;
  }
  if (v165 < 0) {
    operator delete(*(void **)v162);
  }
  if ((v158[9] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v18) {
      goto LABEL_47;
    }
  }
  else if (!v18)
  {
    goto LABEL_47;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
    sub_1007719CC();
  }
  LOBYTE(v138) = 1;
LABEL_47:
  char v149 = 0;
  uint64_t v19 = sub_100017768();
  sub_10004191C(buf, "Stack");
  sub_10004191C(v162, "disableWriteCODWAR");
  int v20 = (*(uint64_t (**)(uint64_t, unsigned char *, unsigned char *, char *))(*(void *)v19 + 72))(v19, buf, v162, &v149);
  if (v149) {
    int v21 = v20;
  }
  else {
    int v21 = 0;
  }
  if (v165 < 0) {
    operator delete(*(void **)v162);
  }
  if ((v158[9] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v21) {
      goto LABEL_59;
    }
  }
  else if (!v21)
  {
    goto LABEL_59;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
    sub_100771998();
  }
  LOBYTE(v138) = 1;
LABEL_59:
  uint64_t v22 = sub_100017768();
  char v23 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 656))(v22);
  *(unsigned char *)(a1 + 202) = v23;
  if ((v23 & 1) == 0 && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
    sub_100771964();
  }
  unsigned __int8 v148 = 0;
  uint64_t v24 = sub_100017768();
  sub_10004191C(buf, "Stack");
  sub_10004191C(v162, "disableClassicSecureConnections");
  int v25 = (*(uint64_t (**)(uint64_t, unsigned char *, unsigned char *, unsigned __int8 *))(*(void *)v24 + 72))(v24, buf, v162, &v148);
  if (v148) {
    int v26 = v25;
  }
  else {
    int v26 = 0;
  }
  if (v165 < 0) {
    operator delete(*(void **)v162);
  }
  if ((v158[9] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v26) {
      goto LABEL_74;
    }
  }
  else if (!v26)
  {
    goto LABEL_74;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
    sub_100771930();
  }
  LOBYTE(v138) = 1;
LABEL_74:
  sub_100253960(v148);
  sub_10019AE78(sub_1004DD960);
  uint64_t v27 = sub_100035F54();
  unsigned int v136 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 560))(v27);
  uint64_t v28 = sub_100035F54();
  uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 480))(v28);
  uint64_t v30 = sub_100035F54();
  unsigned int v31 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 568))(v30);
  uint64_t v32 = sub_100035F54();
  uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 576))(v32);
  uint64_t v34 = sub_100035F54();
  unsigned int v135 = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 584))(v34);
  uint64_t v35 = sub_100035F54();
  unsigned int v134 = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 592))(v35);
  uint64_t v36 = sub_100035F54();
  uint64_t v37 = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 608))(v36);
  uint64_t v38 = sub_100035F54();
  unsigned int v130 = (*(uint64_t (**)(uint64_t))(*(void *)v38 + 616))(v38);
  uint64_t v39 = sub_100035F54();
  unsigned int v40 = (*(uint64_t (**)(uint64_t))(*(void *)v39 + 640))(v39);
  uint64_t v41 = sub_100035F54();
  unsigned int v137 = (*(uint64_t (**)(uint64_t))(*(void *)v41 + 680))(v41);
  unsigned int v129 = v40;
  uint64_t v42 = sub_100035F54();
  unsigned int v128 = (*(uint64_t (**)(uint64_t))(*(void *)v42 + 648))(v42);
  uint64_t v43 = sub_100035F54();
  unsigned int v44 = (*(uint64_t (**)(uint64_t))(*(void *)v43 + 488))(v43);
  char v45 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v44;
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "initCoreStack enablePeriodicAdvertisingAdv=%d", buf, 8u);
  }
  uint64_t v46 = sub_100035F54();
  unsigned int v133 = (*(uint64_t (**)(uint64_t))(*(void *)v46 + 496))(v46);
  unsigned int v127 = v44;
  int v47 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v133;
    _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "initCoreStack enablePeriodicAdvertisingSync=%d", buf, 8u);
  }
  uint64_t v48 = sub_100035F54();
  int v49 = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 504))(v48);
  uint64_t v50 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v49;
    _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "initCoreStack enablePeriodidAdvSyncTranSender=%d", buf, 8u);
  }
  uint64_t v51 = sub_100035F54();
  int v52 = (*(uint64_t (**)(uint64_t))(*(void *)v51 + 512))(v51);
  uint64_t v53 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v52;
    _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "initCoreStack enablePeriodidAdvSyncTranRecipient=%d", buf, 8u);
  }
  uint64_t v54 = sub_100035F54();
  int v55 = (*(uint64_t (**)(uint64_t))(*(void *)v54 + 744))(v54);
  uint64_t v56 = sub_100035F54();
  int v57 = (*(uint64_t (**)(uint64_t))(*(void *)v56 + 752))(v56);
  unint64_t v58 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v57;
    _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "enable ABC logs for Magnet Timer: %d", buf, 8u);
  }
  if (qword_1009F8748 != -1) {
    dispatch_once(&qword_1009F8748, &stru_1009B2130);
  }
  sub_100275928((uint64_t)off_1009F8740, v57);
  if (v29)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_1007718FC();
    }
    unsigned int v136 = 1;
  }
  uint64_t v59 = sub_10003FB34();
  unsigned int v132 = (*(uint64_t (**)(uint64_t))(*(void *)v59 + 2688))(v59);
  uint64_t v60 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (v132) {
      unint64_t v61 = "supports";
    }
    else {
      unint64_t v61 = "does not support";
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v61;
    _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "This platform %s address rotation while scanning or connecting", buf, 0xCu);
    uint64_t v60 = qword_100A19E50;
  }
  uint64_t v131 = a1;
  if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
  {
    if (v55) {
      unsigned int v62 = "supports";
    }
    else {
      unsigned int v62 = "does not support";
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v62;
    _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "This platform %s rssi connection statistics and detection", buf, 0xCu);
  }
  uint64_t v63 = sub_100035F54();
  uint64_t v64 = (*(uint64_t (**)(uint64_t))(*(void *)v63 + 824))(v63);
  sub_10020AD70(v29);
  sub_10020AD64(v136);
  sub_10021CC60(v33);
  sub_10021CC6C(v135);
  int v65 = v130 | v31;
  sub_1002320E8(v130 | v31);
  sub_100232140(v134);
  sub_10023214C(v37);
  sub_100232158(v130);
  sub_10023216C(v129);
  sub_100232178(v128);
  uint64_t v66 = sub_10003FB34();
  uint64_t v67 = (*(uint64_t (**)(uint64_t))(*(void *)v66 + 3336))(v66);
  int v68 = v67;
  sub_10020AD8C(v67);
  nullsub_95(v137);
  sub_100232228(v137);
  nullsub_95(v137);
  sub_100229D28(v132);
  sub_10020C394(v127);
  sub_100109774(v133);
  uint64_t v69 = sub_10003FB34();
  int v70 = (*(uint64_t (**)(uint64_t))(*(void *)v69 + 3504))(v69);
  uint64_t v71 = sub_10003FB34();
  int v72 = (*(uint64_t (**)(uint64_t))(*(void *)v71 + 3496))(v71);
  sub_10021CF28(v72, v70);
  sub_100232184(v64);
  int v73 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67110400;
    *(_DWORD *)&uint8_t buf[4] = v136;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v29;
    *(_WORD *)v158 = 1024;
    *(_DWORD *)&v158[2] = v65;
    *(_WORD *)&v158[6] = 1024;
    *(_DWORD *)&v158[8] = v134;
    *(_WORD *)&v158[12] = 1024;
    int v159 = v68;
    __int16 v160 = 1024;
    unsigned int v161 = v135;
    _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "enableBTSpecAdvertisingSets=%d enableExtendedAdvertising=%d enableExtendedScanning=%d enableExtendedScanHCI=%d maxAdvHandles=%d enableEnhancedConnectionsV2=%d", buf, 0x26u);
  }
  uint64_t v74 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v74 + 2744))(v74)) {
    uint64_t v75 = 16;
  }
  else {
    uint64_t v75 = 8;
  }
  sub_10022A898(v75);
  if (*(_DWORD *)(sub_10003FB34() + 712))
  {
    int v76 = (int *)sub_10003FB34();
    if (sub_100353D70(v76)) {
      goto LABEL_116;
    }
  }
  if (*(_DWORD *)(sub_10003FB34() + 712) == 6000)
  {
    char v77 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = "initCoreStack";
      _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "%s: register BTVirtualController callbacks", buf, 0xCu);
    }
    if (qword_1009FBAA0 != -1) {
      dispatch_once(&qword_1009FBAA0, &stru_1009B21B0);
    }
    sub_100737C8C();
  }
  if (sub_10010362C(1, sub_1004DD9FC, 0))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_100771894();
    }
LABEL_116:
    uint64_t v78 = 110;
    goto LABEL_209;
  }
  int v147 = 0;
  uint64_t v79 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(v162, "overridePrivateAddressRotationInterval");
  int v80 = (*(uint64_t (**)(uint64_t, unsigned char *, unsigned char *, int *))(*(void *)v79 + 88))(v79, buf, v162, &v147);
  if (v165 < 0) {
    operator delete(*(void **)v162);
  }
  if ((v158[9] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v80) {
      goto LABEL_126;
    }
  }
  else if (!v80)
  {
    goto LABEL_126;
  }
  __int16 v81 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
    sub_100771824((uint64_t)&v147, v81, v82, v83, v84, v85, v86, v87);
  }
  sub_100229D14((unsigned __int16)v147);
LABEL_126:
  uint64_t v88 = sub_100017768();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v88 + 8))(v88)) {
    goto LABEL_148;
  }
  int v143 = 0;
  uint64_t v89 = sub_100017768();
  sub_10004191C(buf, "FastR1ScanInterval");
  sub_10004191C(v162, "interval");
  int v90 = (*(uint64_t (**)(uint64_t, unsigned char *, unsigned char *, int *))(*(void *)v89 + 88))(v89, buf, v162, &v143);
  if (v165 < 0) {
    operator delete(*(void **)v162);
  }
  if ((v158[9] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v90) {
      goto LABEL_134;
    }
    goto LABEL_133;
  }
  if (v90)
  {
LABEL_133:
    buf[0] = 0;
    sub_10001B8E0(buf);
    sub_100183AB0((unsigned __int16)v143);
    sub_10001B8AC(buf);
  }
LABEL_134:
  int v146 = 0;
  uint64_t v91 = sub_100017768();
  sub_10004191C(buf, "FastR1ScanType");
  sub_10004191C(v162, "scanType");
  int v92 = (*(uint64_t (**)(uint64_t, unsigned char *, unsigned char *, int *))(*(void *)v91 + 88))(v91, buf, v162, &v146);
  if (v165 < 0) {
    operator delete(*(void **)v162);
  }
  if ((v158[9] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v92) {
      goto LABEL_141;
    }
    goto LABEL_140;
  }
  if (v92)
  {
LABEL_140:
    buf[0] = 0;
    sub_10001B8E0(buf);
    sub_100183ABC(v146);
    sub_10001B8AC(buf);
  }
LABEL_141:
  int v145 = 0;
  uint64_t v93 = sub_100017768();
  sub_10004191C(buf, "MediumR1ScanInterval");
  sub_10004191C(v162, "interval");
  int v94 = (*(uint64_t (**)(uint64_t, unsigned char *, unsigned char *, int *))(*(void *)v93 + 88))(v93, buf, v162, &v145);
  if (v165 < 0) {
    operator delete(*(void **)v162);
  }
  if ((v158[9] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v94) {
      goto LABEL_148;
    }
    goto LABEL_147;
  }
  if (v94)
  {
LABEL_147:
    buf[0] = 0;
    sub_10001B8E0(buf);
    sub_100183AC8((unsigned __int16)v145);
    sub_10001B8AC(buf);
  }
LABEL_148:
  dword_100A19D20 = 0;
  byte_100A19D25 = 0;
  __int16 v144 = 0;
  int v143 = 0;
  LOBYTE(v146) = 0;
  sub_10001B8E0(&v146);
  int v95 = sub_100183EF4((uint64_t)&v143);
  sub_10001B910(&v146);
  if (v95)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_1007717BC();
    }
    sub_1004DDA24(v131);
  }
  else
  {
    sub_1002B804C(&v146);
    uint64_t v96 = sub_100035F54();
    uint64_t v97 = (*(uint64_t (**)(uint64_t))(*(void *)v96 + 184))(v96);
    sub_1000E0D24(v97);
    sub_10001B910(&v146);
    sub_10003AF00((uint64_t)v156);
    v98 = (void *)(v131 + 280);
    *(_DWORD *)(v131 + 272) = v143;
    *(_WORD *)(v131 + 276) = v144;
    std::string::assign((std::string *)(v131 + 280), "iOS");
    v99 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      v100 = (void *)(v131 + 280);
      if (*(char *)(v131 + 303) < 0) {
        v100 = (void *)*v98;
      }
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = v100;
      *(_WORD *)&unsigned char buf[12] = 1040;
      *(_DWORD *)v158 = 6;
      *(_WORD *)&v158[4] = 2096;
      *(void *)&v158[6] = v131 + 272;
      _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEFAULT, "statedump: Local device is \"%s\" (%{bluetooth:BD_ADDR}.6P)", buf, 0x1Cu);
    }
    int v101 = qword_100A19F50;
    if (os_log_type_enabled((os_log_t)qword_100A19F50, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(v131 + 303) < 0) {
        v98 = (void *)*v98;
      }
      sub_1004A82EC((unsigned __int8 *)(v131 + 272), buf);
      if (v158[9] >= 0) {
        uint64_t v102 = buf;
      }
      else {
        uint64_t v102 = *(unsigned char **)buf;
      }
      *(_DWORD *)v162 = 136315394;
      *(void *)&v162[4] = v98;
      __int16 v163 = 2080;
      v164 = v102;
      _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEFAULT, "Init Core Stack - {localname: %s, local-addr: %s}", v162, 0x16u);
      if ((v158[9] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    sub_10003AFE8((uint64_t)v156);
    sub_1002B804C(&v146);
    sub_10003FB34();
    sub_100353EF4();
    if (*(_DWORD *)(sub_10003FB34() + 712) >= 0x7D0u && *(_DWORD *)(sub_10003FB34() + 712) <= 0xF9Fu)
    {
      sub_10003FB34();
      sub_100353E10();
    }
    BOOL v103 = *(_DWORD *)(sub_10003FB34() + 712) && *(_DWORD *)(sub_10003FB34() + 712) < 0x7D0u;
    sub_10019C518(v103);
    sub_10001B910(&v146);
    *(_OWORD *)(v131 + 32sub_1004C2140(qword_100A19B68, 0) = 0u;
    *(_OWORD *)(v131 + 336) = 0u;
    *(_OWORD *)(v131 + 304) = 0u;
    *(_WORD *)(v131 + 304) = sub_1003FAF50();
    *(_WORD *)(v131 + 306) = sub_1003FAF58();
    *(_WORD *)(v131 + 308) = sub_1003FAE78();
    *(unsigned char *)(v131 + 31sub_1004C2140(qword_100A19B68, 0) = 1;
    *(_WORD *)(v131 + 312) = sub_100058654();
    *(void *)(v131 + 328) = 0;
    *(void *)(v131 + 336) = aPnpInformation;
    *(void *)(v131 + 344) = 0;
    *(_DWORD *)(v131 + 316) = 10495684;
    *(_WORD *)(v131 + 314) = 1;
    *(void *)(v131 + 32sub_1004C2140(qword_100A19B68, 0) = 0x7D0C0D00000000;
    sub_1002B804C(&v146);
    unsigned __int16 v104 = sub_1003FAF50();
    __int16 v105 = getpid();
    __int16 v106 = sub_1003FAE78();
    uint64_t v107 = sub_10003FB34();
    sub_1000EB064(v104, v105, v106, *(_WORD *)(v107 + 712));
    uint64_t v108 = sub_100035F54();
    uint64_t v109 = (*(uint64_t (**)(uint64_t))(*(void *)v108 + 72))(v108);
    sub_1000EB414(v109);
    sub_10001B910(&v146);
    LOBYTE(v145) = 0;
    char v142 = 0;
    uint64_t v110 = sub_100017768();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v110 + 8))(v110))
    {
      uint64_t v111 = sub_100017768();
      sub_10004191C(buf, "FastConnect");
      sub_10004191C(v162, "DisableFastConnect");
      (*(void (**)(uint64_t, unsigned char *, unsigned char *, int *))(*(void *)v111 + 72))(v111, buf, v162, &v145);
      if (v165 < 0) {
        operator delete(*(void **)v162);
      }
      if ((v158[9] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      uint64_t v112 = sub_100017768();
      sub_10004191C(buf, "FastConnect");
      sub_10004191C(v162, "DisableFastConnectAll");
      (*(void (**)(uint64_t, unsigned char *, unsigned char *, char *))(*(void *)v112 + 72))(v112, buf, v162, &v142);
      if (v165 < 0) {
        operator delete(*(void **)v162);
      }
      if ((v158[9] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if ((_BYTE)v145) {
        *(_DWORD *)(v131 + 316) &= ~0x200000u;
      }
      if (v142) {
        *(_DWORD *)(v131 + 324) &= ~0x40000u;
      }
    }
    uint64_t v113 = sub_100035F54();
    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v113 + 792))(v113, 11) & 1) == 0) {
      *(_DWORD *)(v131 + 324) &= ~0x800u;
    }
    if ((_os_feature_enabled_impl() & 1) == 0) {
      *(_DWORD *)(v131 + 324) &= ~0x400u;
    }
    uint64_t v114 = sub_10003FB34();
    if ((sub_100350CA0(v114, 1u) & 1) == 0) {
      *(_DWORD *)(v131 + 324) &= ~0x10000u;
    }
    sub_10003FB34();
    if (sub_1003511E0()) {
      *(_DWORD *)(v131 + 324) |= 0x20000u;
    }
    if ((_os_feature_enabled_impl() & 1) == 0) {
      *(_DWORD *)(v131 + 324) &= ~0x80000u;
    }
    uint64_t v115 = sub_100035F54();
    if (((*(uint64_t (**)(uint64_t))(*(void *)v115 + 240))(v115) & 1) == 0) {
      *(_DWORD *)(v131 + 324) &= ~0x100000u;
    }
    uint64_t v116 = sub_10003FB34();
    if (((*(uint64_t (**)(uint64_t))(*(void *)v116 + 2504))(v116) & 1) == 0) {
      *(_DWORD *)(v131 + 324) &= ~0x200000u;
    }
    uint64_t v117 = sub_10003FB34();
    if (((*(uint64_t (**)(uint64_t))(*(void *)v117 + 2512))(v117) & 1) == 0) {
      *(_DWORD *)(v131 + 324) &= ~0x400000u;
    }
    sub_1002B804C(&v146);
    int v118 = sub_10018244C((uint64_t)sub_1004DDC20, 0);
    sub_10001B910(&v146);
    if (v118)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_100771754();
      }
    }
    else
    {
      sub_1002B804C(&v146);
      int v119 = sub_10018245C((uint64_t)nullsub_361, 0);
      sub_10001B910(&v146);
      if (v119)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
          sub_1007716EC();
        }
      }
      else
      {
        sub_1002B804C(&v146);
        int v121 = sub_10014EB20((__int16 *)(v131 + 304), (unsigned int *)&dword_100A132E0);
        sub_100116748(sub_1004DB8F8);
        sub_10001B910(&v146);
        if (!v121)
        {
          unsigned __int8 v141 = 0;
          __int16 v140 = 0;
          uint64_t v122 = sub_10003FFD4();
          (*(void (**)(uint64_t, unsigned __int8 *, char *, __int16 *))(*(void *)v122 + 24))(v122, &v141, (char *)&v140 + 1, &v140);
          if (v141)
          {
            sub_1002B804C(&v146);
            sub_100188C08(HIBYTE(v140) != 0);
            sub_10001B910(&v146);
          }
          uint64_t v123 = sub_100017768();
          if ((*(unsigned int (**)(uint64_t))(*(void *)v123 + 8))(v123))
          {
            unsigned __int8 v139 = 0;
            uint64_t v124 = sub_100017768();
            sub_10004191C(buf, "Stack");
            sub_10004191C(v162, "IOTDataCollection");
            (*(void (**)(uint64_t, unsigned char *, unsigned char *, unsigned __int8 *))(*(void *)v124 + 72))(v124, buf, v162, &v139);
            if (v165 < 0) {
              operator delete(*(void **)v162);
            }
            if ((v158[9] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
            if (v139)
            {
              sub_1002B804C(&v146);
              nullsub_95(v139);
              sub_10001B910(&v146);
            }
          }
          uint64_t v125 = sub_100017768();
          sub_10004191C(buf, "Stack");
          sub_10004191C(v162, "PacketAggregation");
          int v126 = (*(uint64_t (**)(uint64_t, unsigned char *, unsigned char *, unsigned __int8 *))(*(void *)v125 + 72))(v125, buf, v162, &v141);
          if (v165 < 0) {
            operator delete(*(void **)v162);
          }
          if ((v158[9] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          if (v126)
          {
            sub_1001E6940(v141);
            if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
              sub_100771600();
            }
          }
          sub_1004DDCA8();
          sub_10003AF00((uint64_t)v156);
          uint64_t v78 = 0;
          *(unsigned char *)(v131 + 54sub_1004C2140(qword_100A19B68, 0) = v138;
          goto LABEL_208;
        }
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
          sub_100771684();
        }
      }
    }
    sub_1004DDA24(v131);
  }
  uint64_t v78 = 110;
LABEL_208:
  sub_10001B8AC(&v146);
LABEL_209:
  if (SHIBYTE(v155) < 0) {
    operator delete(__p[0]);
  }
  sub_10003AFB4((uint64_t)v156);
  return v78;
}

void sub_1004DD6D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v35 - 105) < 0) {
    operator delete(*(void **)(v35 - 128));
  }
  if (a35 < 0) {
    operator delete(__p);
  }
  sub_10001B8AC(&a19);
  if (a27 < 0) {
    operator delete(a22);
  }
  sub_10003AFB4((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_1004DD8C4(void *a1)
{
  off_100A137F0 = a1;
  xmmword_100A137F8 = xmmword_1007BF330;
  *(void *)((char *)&xmmword_100A137F8 + 14) = 0x101020100000000;
  uint64_t v1 = sub_100183F24((void (*)(int))sub_1004EA720, (uint64_t)&xmmword_100A137F8);
  if (v1)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_100771A34();
    }
    off_100A137F0 = 0;
  }
  return v1;
}

void sub_1004DD960(int a1, __int16 a2, char a3)
{
  global_queue = dispatch_get_global_queue(0, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1004E4D20;
  block[3] = &unk_1009B1ED0;
  int v8 = a1;
  __int16 v9 = a2;
  char v10 = a3;
  dispatch_async(global_queue, block);
}

void sub_1004DD9FC()
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B20D0);
  }
}

uint64_t sub_1004DDA24(uint64_t a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Terminating core stack", buf, 2u);
  }
  *(void *)std::string buf = 0;
  uint64_t v11 = 0;
  sub_10003AED0((uint64_t)buf, a1 + 208);
  *(_WORD *)(a1 + 276) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  if (*(char *)(a1 + 303) < 0)
  {
    **(unsigned char **)(a1 + 28sub_1004C2140(qword_100A19B68, 0) = 0;
    *(void *)(a1 + 288) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 28sub_1004C2140(qword_100A19B68, 0) = 0;
    *(unsigned char *)(a1 + 303) = 0;
  }
  sub_10003AFE8((uint64_t)buf);
  char v9 = 0;
  sub_10001B8E0(&v9);
  if (sub_10014F270(dword_100A132E0) && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
    sub_100771A9C();
  }
  sub_10001B910(&v9);
  sub_100103ABC();
  dword_100A19D20 = 103;
  byte_100A19D25 = 0;
  sub_100026264(&stru_100A19CC0);
  sub_100026264(&stru_100A19CF0);
  uint64_t v3 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v3 + 48))(v3, 256))
  {
    uint64_t v4 = sub_10003FFD4();
    sub_1004E9F88(v4 + 248, a1 + 24);
  }
  uint64_t v5 = sub_10003FFD4();
  sub_1004EA060(v5 + 208, a1 + 8);
  uint64_t v6 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v6 + 48))(v6, 0x40000))
  {
    uint64_t v7 = sub_10003FFD4();
    sub_1004EA138(v7 + 688, a1 + 40);
  }
  sub_10001B8AC(&v9);
  sub_10003AFB4((uint64_t)buf);
  return 0;
}

void sub_1004DDBF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004DDC20(char a1)
{
  global_queue = dispatch_get_global_queue(2, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1004E72F4;
  block[3] = &unk_1009A7758;
  char v4 = a1;
  dispatch_async(global_queue, block);
}

uint64_t sub_1004DDCA8()
{
  unsigned __int8 v8 = 0;
  uint64_t v0 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "enableLEPowerControl");
  int v1 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, unsigned __int8 *))(*(void *)v0 + 72))(v0, buf, __p, &v8);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0)
  {
    operator delete(*(void **)buf);
    if (!v1) {
      goto LABEL_9;
    }
  }
  else if (!v1)
  {
    goto LABEL_9;
  }
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "LE Power Control enableLEPowerControl=%d", buf, 8u);
  }
LABEL_9:
  if (sub_10017E704())
  {
    if (v8) {
      goto LABEL_16;
    }
    *(void *)std::string buf = *(void *)((char *)&xmmword_100A195E0 + 4);
    uint8_t buf[4] = BYTE8(xmmword_100A195E0) & 0xF9;
    LOBYTE(__p[0]) = 0;
    sub_10001B8E0(__p);
    sub_10017E4B4(buf);
    sub_10001B910(__p);
    goto LABEL_15;
  }
  if (v8)
  {
    uint64_t v3 = sub_10003FB34();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 2296))(v3))
    {
      *(void *)std::string buf = *(void *)((char *)&xmmword_100A195E0 + 4);
      uint8_t buf[4] = BYTE8(xmmword_100A195E0) | 6;
      LOBYTE(__p[0]) = 0;
      sub_10001B8E0(__p);
      sub_10017E4B4(buf);
      sub_10001B910(__p);
LABEL_15:
      sub_10001B8AC(__p);
    }
  }
LABEL_16:
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B20D0);
  }
  char v4 = off_1009F8068;
  *(void *)std::string buf = 0;
  uint64_t v10 = 0;
  sub_10003AED0((uint64_t)buf, (uint64_t)off_1009F8068 + 208);
  v4[540] = v1;
  return sub_10003AFB4((uint64_t)buf);
}

void sub_1004DDEEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

uint64_t sub_1004DDF3C(uint64_t a1)
{
  int v142 = 0;
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Starting up StackManager", (uint8_t *)&buf, 2u);
  }
  v141[0] = 0;
  v141[1] = 0;
  sub_10003AED0((uint64_t)v141, a1 + 128);
  int v3 = *(_DWORD *)(a1 + 56);
  if (v3)
  {
    if (v3 == 2)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_100771B04();
      }
      uint64_t v4 = 111;
    }
    else
    {
      uint64_t v5 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "StackManager is already running", (uint8_t *)&buf, 2u);
      }
      uint64_t v4 = 110;
    }
    goto LABEL_228;
  }
  sub_1004DB7B4(a1, 2u, 0);
  *(unsigned char *)(a1 + 193) = 0;
  sub_10003AFE8((uint64_t)v141);
  uint64_t v4 = sub_1004DBA58(a1);
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_100771BEC();
    }
    sub_10003AF00((uint64_t)v141);
    sub_1004DB7B4(a1, 0, 0);
    sub_10003AFE8((uint64_t)v141);
    goto LABEL_228;
  }
  uint64_t v6 = sub_10003FB34();
  sub_100352900(v6);
  sub_1004E0380((os_unfair_lock_s *)a1);
  sub_10003AF00((uint64_t)v141);
  sub_1004DB7B4(a1, 1u, 0);
  *(unsigned char *)(a1 + 192) = 0;
  *(_WORD *)(a1 + 194) = 0;
  *(unsigned char *)(a1 + 196) = 0;
  *(unsigned char *)(a1 + 199) = 0;
  sub_10003AFE8((uint64_t)v141);
  if (*(unsigned char *)(a1 + 193))
  {
    LOBYTE(__p[0]) = 0;
    LOBYTE(v136) = 0;
    LOBYTE(v132) = 0;
    uint64_t v7 = sub_10003FFD4();
    if (!(*(unsigned int (**)(uint64_t, void **, unsigned int *, int *))(*(void *)v7 + 24))(v7, __p, &v136, &v132))(*(void (**)(uint64_t, void, void, void))(*(void *)a1 + 72))(a1, LOBYTE(__p[0]), v136, v132); {
    long long buf = 0uLL;
    }
    *(void *)&long long v144 = 0;
    uint64_t v8 = sub_10003FFD4();
    if (!(*(unsigned int (**)(uint64_t, long long *))(*(void *)v8 + 16))(v8, &buf))
    {
      if (SBYTE7(v144) < 0)
      {
        sub_10003B098(&__dst, (void *)buf, *((unint64_t *)&buf + 1));
      }
      else
      {
        long long __dst = buf;
        uint64_t v140 = v144;
      }
      (*(void (**)(uint64_t, long long *))(*(void *)a1 + 40))(a1, &__dst);
      if (SHIBYTE(v140) < 0) {
        operator delete((void *)__dst);
      }
    }
    if (SBYTE7(v144) < 0) {
      operator delete((void *)buf);
    }
  }
  char v9 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Done starting up stack", (uint8_t *)&buf, 2u);
  }
  uint64_t v10 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 408))(v10))
  {
    LOBYTE(buf) = 0;
    sub_10001B8E0(&buf);
    sub_100188C08(1);
    sub_10001B8AC(&buf);
  }
  uint64_t v11 = sub_10003FFD4();
  sub_10026B638(v11 + 368, a1 + 16);
  uint64_t v12 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 104))(v12))
  {
    uint64_t v13 = sub_10003FFD4();
    sub_1004EA210(v13 + 568, a1 + 32);
    LOBYTE(buf) = 0;
    uint64_t v14 = sub_10003FFD4();
    if ((*(unsigned int (**)(uint64_t, long long *))(*(void *)v14 + 128))(v14, &buf)) {
      (*(void (**)(uint64_t, void))(*(void *)a1 + 80))(a1, buf);
    }
  }
  uint64_t v15 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v15 + 112))(v15))
  {
    uint64_t v16 = sub_1004AFA9C();
    v138[0] = _NSConcreteStackBlock;
    v138[1] = 3221225472;
    v138[2] = sub_1004E03FC;
    v138[3] = &unk_100997528;
    v138[4] = a1;
    sub_1000197D8(v16, v138);
  }
  if (*(unsigned char *)(a1 + 203))
  {
    if (qword_1009F8158 != -1) {
      dispatch_once(&qword_1009F8158, &stru_1009B2150);
    }
    double v17 = sub_1004FB118();
    double v18 = sub_1004E04C8(v17);
    if (v17 == 0.0
      || (double v19 = v18,
          +[NSDate timeIntervalSinceReferenceDate],
          v20 >= v19))
    {
      uint64_t v22 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Disabling denylist on expiration", (uint8_t *)&buf, 2u);
      }
      sub_1004E05D4(a1, 0);
    }
    else
    {
      LOBYTE(__p[0]) = 0;
      sub_10001B8E0(__p);
      int v21 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Re-enabling the denylist mode", (uint8_t *)&buf, 2u);
      }
      *(unsigned char *)(a1 + 203) = 1;
      sub_1004E0A04(1, v19);
      if (qword_1009F8788 != -1) {
        dispatch_once(&qword_1009F8788, &stru_1009B21F0);
      }
      sub_1002FAC44((uint64_t)off_1009F8780, *(unsigned char *)(a1 + 203));
      sub_10001B8AC(__p);
    }
  }
  if (qword_100A132E8 != -1) {
    dispatch_once(&qword_100A132E8, &stru_1009B1EB0);
  }
  char v137 = 0;
  unsigned int v136 = 0;
  uint64_t v23 = sub_100017768();
  sub_10004191C(&buf, "Device");
  sub_10004191C(__p, "HDRForcePkt");
  int v24 = (*(uint64_t (**)(uint64_t, long long *, void **, char *))(*(void *)v23 + 72))(v23, &buf, __p, &v137);
  if (v135 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v144) < 0)
  {
    operator delete((void *)buf);
    if (!v24) {
      goto LABEL_59;
    }
  }
  else if (!v24)
  {
    goto LABEL_59;
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B20D0);
  }
  int v25 = off_1009F8068;
  long long buf = 0uLL;
  uint64_t v26 = sub_10003AED0((uint64_t)&buf, (uint64_t)off_1009F8068 + 208);
  v25[540] = 1;
  sub_10003AFB4(v26);
LABEL_59:
  uint64_t v27 = sub_100017768();
  sub_10004191C(&buf, "Device");
  sub_10004191C(__p, "HDRPktTypeMask");
  int v28 = (*(uint64_t (**)(uint64_t, long long *, void **, unsigned int *))(*(void *)v27 + 128))(v27, &buf, __p, &v136);
  if (v135 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v144) < 0)
  {
    operator delete((void *)buf);
    if (!v28) {
      goto LABEL_68;
    }
  }
  else if (!v28)
  {
    goto LABEL_68;
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B20D0);
  }
  uint64_t v29 = off_1009F8068;
  long long buf = 0uLL;
  uint64_t v30 = sub_10003AED0((uint64_t)&buf, (uint64_t)off_1009F8068 + 208);
  v29[540] = 1;
  sub_10003AFB4(v30);
LABEL_68:
  unsigned __int8 v133 = 1;
  uint64_t v31 = sub_100017768();
  sub_10004191C(&buf, "Device");
  sub_10004191C(__p, "EnableHDR");
  int v32 = (*(uint64_t (**)(uint64_t, long long *, void **, unsigned __int8 *))(*(void *)v31 + 72))(v31, &buf, __p, &v133);
  if (v135 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v144) < 0)
  {
    operator delete((void *)buf);
    if (!v32) {
      goto LABEL_77;
    }
  }
  else if (!v32)
  {
    goto LABEL_77;
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B20D0);
  }
  uint64_t v33 = off_1009F8068;
  long long buf = 0uLL;
  uint64_t v34 = sub_10003AED0((uint64_t)&buf, (uint64_t)off_1009F8068 + 208);
  v33[540] = 1;
  sub_10003AFB4(v34);
LABEL_77:
  uint64_t v35 = sub_10003FB34();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)v35 + 1296))(v35, v133, 1);
  uint64_t v36 = sub_10003FB34();
  int v37 = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 2544))(v36);
  if (v133) {
    int v38 = v37;
  }
  else {
    int v38 = 0;
  }
  if (v38 == 1)
  {
    uint64_t v39 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)&long long buf = 0x16804000200;
      WORD4(buf) = 1024;
      *(_DWORD *)((char *)&buf + 1sub_1004C2140(qword_100A19B68, 0) = 1;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Adjust sco hci buffer length bufferSize %d numBuffer %d", (uint8_t *)&buf, 0xEu);
    }
    uint64_t v40 = sub_10003FB34();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v40 + 1344))(v40, 1, 360, 1, 1);
  }
  uint64_t v41 = sub_10003FB34();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v41 + 2904))(v41, 20, 1, 1);
  uint64_t v42 = sub_10003FB34();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v42 + 1304))(v42, 1);
  if (v137)
  {
    uint64_t v43 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "Forcing HDR packet type", (uint8_t *)&buf, 2u);
    }
    sub_10017F00C(1);
    sub_10017F018(v136);
  }
  uint64_t v44 = sub_10003FB34();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v44 + 360))(v44, 1);
  if (*(unsigned char *)(a1 + 202))
  {
    if (*(_DWORD *)(sub_10003FB34() + 712) >= 0x7D0u && *(_DWORD *)(sub_10003FB34() + 712) <= 0xF9Fu)
    {
      uint64_t v45 = sub_10003FB34();
      (*(void (**)(uint64_t, uint64_t))(*(void *)v45 + 1264))(v45, 1);
    }
    if (*(_DWORD *)(sub_10003FB34() + 712) && *(_DWORD *)(sub_10003FB34() + 712) <= 0x7CFu)
    {
      if (*(_DWORD *)(sub_10003FB34() + 712) < 0x13u)
      {
        uint64_t v48 = sub_10003FB34();
        if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v48 + 1264))(v48, 1))
        {
          LOBYTE(buf) = 0;
          sub_10001B8E0(&buf);
          sub_10018F434();
          sub_10001B910(&buf);
          sub_10001B8AC(&buf);
        }
      }
      else
      {
        uint64_t v46 = sub_10003FB34();
        (*(void (**)(uint64_t, uint64_t))(*(void *)v46 + 1280))(v46, 1);
        uint64_t v47 = sub_10003FB34();
        (*(void (**)(uint64_t, uint64_t))(*(void *)v47 + 1752))(v47, 1);
      }
    }
  }
  if (*(_DWORD *)(sub_10003FB34() + 712) && *(_DWORD *)(sub_10003FB34() + 712) <= 0x7CFu)
  {
    if (*(_DWORD *)(sub_10003FB34() + 712) >= 0x13u)
    {
      uint64_t v49 = sub_10003FB34();
      (*(void (**)(uint64_t, uint64_t))(*(void *)v49 + 1696))(v49, 1);
    }
    uint64_t v50 = sub_100017768();
    uint64_t v51 = (*(uint64_t (**)(uint64_t))(*(void *)v50 + 8))(v50);
    uint64_t v52 = sub_10003FB34();
    (*(void (**)(uint64_t, uint64_t))(*(void *)v52 + 1048))(v52, v51);
  }
  uint64_t v53 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v53 + 2080))(v53))
  {
    LOBYTE(v129) = 0;
    unsigned int v131 = 1;
    int v132 = 0;
    uint64_t v54 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v54 + 424))(v54)) {
      uint64_t v55 = 5;
    }
    else {
      uint64_t v55 = 1;
    }
    uint64_t v56 = sub_100017768();
    sub_10004191C(&buf, "LE");
    sub_10004191C(__p, "PowerTagV2ForceHandleEnable");
    (*(void (**)(uint64_t, long long *, void **, int *))(*(void *)v56 + 72))(v56, &buf, __p, &v129);
    if (v135 < 0) {
      operator delete(__p[0]);
    }
    if (SBYTE7(v144) < 0) {
      operator delete((void *)buf);
    }
    uint64_t v57 = sub_100017768();
    sub_10004191C(&buf, "LE");
    sub_10004191C(__p, "PowerTagV2ForceHandleValue");
    (*(void (**)(uint64_t, long long *, void **, int *))(*(void *)v57 + 128))(v57, &buf, __p, &v132);
    if (v135 < 0) {
      operator delete(__p[0]);
    }
    if (SBYTE7(v144) < 0) {
      operator delete((void *)buf);
    }
    uint64_t v58 = sub_100017768();
    sub_10004191C(&buf, "LE");
    sub_10004191C(__p, "PowerTagV2ForceEnableFeatureSet");
    (*(void (**)(uint64_t, long long *, void **, unsigned int *))(*(void *)v58 + 128))(v58, &buf, __p, &v131);
    if (v135 < 0) {
      operator delete(__p[0]);
    }
    if (SBYTE7(v144) < 0) {
      operator delete((void *)buf);
    }
    if ((_BYTE)v129)
    {
      uint64_t v59 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 67109632;
        DWORD1(buf) = v131;
        WORD4(buf) = 1024;
        *(_DWORD *)((char *)&buf + 1sub_1004C2140(qword_100A19B68, 0) = v132;
        HIWORD(buf) = 1024;
        LODWORD(v144) = v132;
        _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "Force PowerTagV2 %d:  %d (0x%04x)", (uint8_t *)&buf, 0x14u);
      }
      uint64_t v55 = v131;
      unsigned __int16 v60 = v132;
      if ((v131 & 4) == 0) {
        goto LABEL_130;
      }
    }
    else
    {
      unsigned __int16 v60 = 0;
      if ((v55 & 4) == 0)
      {
LABEL_130:
        uint64_t v65 = sub_10003FB34();
        int v66 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v65 + 1728))(v65, v55, 1, v60);
        if (v66)
        {
          uint64_t v67 = qword_100A19E50;
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(buf) = 67109120;
            DWORD1(buf) = v66;
            _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "PowerTag BTCLK V2 error configuring %d ", (uint8_t *)&buf, 8u);
          }
        }
        goto LABEL_133;
      }
    }
    uint64_t v63 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "PowerTag V2 BTCLK is enable ", (uint8_t *)&buf, 2u);
    }
    uint64_t v64 = sub_100035F54();
    (*(void (**)(uint64_t, uint64_t))(*(void *)v64 + 872))(v64, 1);
    goto LABEL_130;
  }
  uint64_t v61 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v61 + 2072))(v61))
  {
    uint64_t v62 = sub_10003FB34();
    (*(void (**)(uint64_t, uint64_t))(*(void *)v62 + 1704))(v62, 1);
  }
LABEL_133:
  if (*(_DWORD *)(sub_10003FB34() + 712) == 15)
  {
    int v132 = 0;
    uint64_t v68 = sub_100017768();
    sub_10004191C(&buf, "CoEx");
    sub_10004191C(__p, "EnableDebugCounters");
    int v69 = (*(uint64_t (**)(uint64_t, long long *, void **, int *))(*(void *)v68 + 128))(v68, &buf, __p, &v132);
    if (v132) {
      int v70 = v69;
    }
    else {
      int v70 = 0;
    }
    if (v135 < 0) {
      operator delete(__p[0]);
    }
    if (SBYTE7(v144) < 0) {
      operator delete((void *)buf);
    }
    if (v70)
    {
      uint64_t v71 = sub_10003FB34();
      (*(void (**)(uint64_t, void))(*(void *)v71 + 1248))(v71, v132);
    }
  }
  uint64_t v72 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v72 + 2088))(v72))
  {
    uint64_t v73 = sub_10003FB34();
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v73 + 1712))(v73, 1, 0);
  }
  if (*(_DWORD *)(sub_10003FB34() + 712) < 0x7D0u || *(_DWORD *)(sub_10003FB34() + 712) > 0xF9Fu) {
    goto LABEL_162;
  }
  uint64_t v74 = sub_100017768();
  sub_10004191C(&buf, "fw");
  sub_10004191C(__p, "TraceMode");
  int v75 = (*(uint64_t (**)(uint64_t, long long *, void **, int *))(*(void *)v74 + 88))(v74, &buf, __p, &v142);
  if (v135 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v144) < 0) {
    operator delete((void *)buf);
  }
  if (v142 >= 0) {
    int v76 = v75;
  }
  else {
    int v76 = 0;
  }
  if (v76 == 1 && v142 <= 6)
  {
    uint64_t v77 = sub_10003FB34();
    (*(void (**)(uint64_t, void))(*(void *)v77 + 1272))(v77, v142);
    uint64_t v78 = sub_100017768();
    if (((*(uint64_t (**)(uint64_t))(*(void *)v78 + 8))(v78) & 1) == 0)
    {
      uint64_t v79 = sub_100017768();
      BOOL v80 = v142 != 0;
LABEL_161:
      (*(void (**)(uint64_t, BOOL))(*(void *)v79 + 504))(v79, v80);
    }
  }
  else
  {
    uint64_t v81 = sub_100017768();
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v81 + 8))(v81))
    {
      uint64_t v83 = sub_10003FB34();
      (*(void (**)(uint64_t, void))(*(void *)v83 + 1272))(v83, 0);
      uint64_t v79 = sub_100017768();
      BOOL v80 = 0;
      goto LABEL_161;
    }
    uint64_t v82 = sub_10003FB34();
    (*(void (**)(uint64_t, uint64_t))(*(void *)v82 + 1272))(v82, 6);
  }
LABEL_162:
  char v130 = 0;
  uint64_t v84 = sub_100017768();
  sub_10004191C(&buf, "hci");
  sub_10004191C(__p, "AssertOnFlowErrors");
  (*(void (**)(uint64_t, long long *, void **, char *))(*(void *)v84 + 72))(v84, &buf, __p, &v130);
  if (v135 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v144) < 0) {
    operator delete((void *)buf);
  }
  if (v130) {
    sub_10019F7E0();
  }
  uint64_t v85 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v85 + 320))(v85))
  {
    uint64_t v86 = sub_10003FB34();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v86 + 1624))(v86, 1, 1);
  }
  unsigned int v131 = 2;
  int v132 = 124;
  int v128 = 2;
  int v129 = 10;
  int v127 = 50;
  uint64_t v87 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v87 + 680))(v87)) {
    v131 |= 4u;
  }
  uint64_t v88 = sub_100017768();
  sub_10004191C(&buf, "LE");
  sub_10004191C(__p, "AElengthAllowed");
  (*(void (**)(uint64_t, long long *, void **, int *))(*(void *)v88 + 128))(v88, &buf, __p, &v132);
  if (v135 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v144) < 0) {
    operator delete((void *)buf);
  }
  uint64_t v89 = sub_100017768();
  sub_10004191C(&buf, "LE");
  sub_10004191C(__p, "AEAuxPhyMask");
  (*(void (**)(uint64_t, long long *, void **, unsigned int *))(*(void *)v89 + 128))(v89, &buf, __p, &v131);
  if (v135 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v144) < 0) {
    operator delete((void *)buf);
  }
  uint64_t v90 = sub_100017768();
  sub_10004191C(&buf, "LE");
  sub_10004191C(__p, "AEMaxAuxOffset");
  (*(void (**)(uint64_t, long long *, void **, int *))(*(void *)v90 + 128))(v90, &buf, __p, &v129);
  if (v135 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v144) < 0) {
    operator delete((void *)buf);
  }
  uint64_t v91 = sub_100017768();
  sub_10004191C(&buf, "LE");
  sub_10004191C(__p, "AEMaxChanins");
  (*(void (**)(uint64_t, long long *, void **, int *))(*(void *)v91 + 128))(v91, &buf, __p, &v128);
  if (v135 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v144) < 0) {
    operator delete((void *)buf);
  }
  uint64_t v92 = sub_10003FB34();
  (*(void (**)(uint64_t, uint64_t, void, void, void, void))(*(void *)v92 + 1008))(v92, 1, (unsigned __int16)v132, v131, (unsigned __int16)v129, v128);
  uint64_t v93 = sub_100017768();
  sub_10004191C(&buf, "LE");
  sub_10004191C(__p, "AEMaxScanBuffers");
  (*(void (**)(uint64_t, long long *, void **, int *))(*(void *)v93 + 128))(v93, &buf, __p, &v127);
  if (v135 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v144) < 0) {
    operator delete((void *)buf);
  }
  uint64_t v94 = sub_10003FB34();
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)v94 + 1016))(v94, 1, (unsigned __int16)v127, 0);
  int v132 = 10;
  uint64_t v95 = sub_100017768();
  sub_10004191C(&buf, "LE");
  sub_10004191C(__p, "AEMaxAuxOffset");
  (*(void (**)(uint64_t, long long *, void **, int *))(*(void *)v95 + 128))(v95, &buf, __p, &v132);
  if (v135 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v144) < 0) {
    operator delete((void *)buf);
  }
  uint64_t v96 = sub_10003FB34();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v96 + 1032))(v96, 1, (unsigned __int16)v132);
  sub_10003FB34();
  int v97 = sub_100350934();
  BOOL v98 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEBUG);
  if (v97)
  {
    if (v98) {
      sub_100771B6C();
    }
    uint64_t v99 = sub_10003FB34();
    *(_DWORD *)&v121[100] = 10000;
    *(void *)&v121[92] = 0x500000004;
    *(void *)&v121[84] = 0x300000002;
    *(void *)&v121[76] = 20;
    *(void *)&v121[68] = 0xF0000000ALL;
    *(void *)&v121[60] = 0x50000C350;
    *(void *)&v121[52] = 171798691870000;
    *(void *)&v121[44] = 0x3A9800000005;
    *(void *)&v121[36] = 0x400000003;
    *(void *)&v121[28] = 0x200000000;
    *(void *)&v121[20] = 0x3200000028;
    *(void *)&v121[12] = 0x140000000ALL;
    *(void *)&v121[4] = 0x5A00000050;
    *(_DWORD *)int v121 = 60;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, _BYTE, void, void, void, void, void, void, void, void, void, void, void, void, void, char))(*(void *)v99 + 3424))(v99, 0, 29, 29, 29, 29, 0, 0, 1929379840, 0, *(void *)v121, *(void *)&v121[8], *(void *)&v121[16], *(void *)&v121[24], *(void *)&v121[32], *(void *)&v121[40], *(void *)&v121[48], *(void *)&v121[56], *(void *)&v121[64],
      *(void *)&v121[72],
      *(void *)&v121[80],
      *(void *)&v121[88],
      *(void *)&v121[96],
      115);
    uint64_t v100 = sub_10003FB34();
    LOBYTE(v122) = 115;
    *(_DWORD *)&v116[108] = 10000;
    *(void *)&v116[100] = 0x500000004;
    *(void *)&v116[92] = 0x300000002;
    *(void *)&v116[84] = 20;
    *(void *)&v116[76] = 0xF0000000ALL;
    *(void *)&v116[68] = 0x50000C350;
    *(void *)&v116[60] = 171798691870000;
    *(void *)&v116[52] = 0x3A9800000005;
    *(void *)&v116[44] = 0x400000003;
    *(void *)&v116[36] = 0x200000000;
    *(void *)&v116[28] = 0x3200000028;
    *(void *)&v116[20] = 0x140000000ALL;
    *(void *)&v116[12] = 0x5A00000050;
    *(void *)&v116[4] = 0x3C00000032;
    v116[0] = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))(*(void *)v100 + 3424))(v100, 1, 29, 49, 75, 149, 1, 1, 0x101000073000001, *(void *)v116, *(void *)&v116[8], *(void *)&v116[16], *(void *)&v116[24], *(void *)&v116[32], *(void *)&v116[40], *(void *)&v116[48], *(void *)&v116[56], *(void *)&v116[64], *(void *)&v116[72],
      *(void *)&v116[80],
      *(void *)&v116[88],
      *(void *)&v116[96],
      *(void *)&v116[104],
      v122);
    uint64_t v101 = sub_10003FB34();
    LOBYTE(v123) = -123;
    *(_DWORD *)&v117[108] = 10000;
    *(void *)&v117[100] = 0x500000004;
    *(void *)&v117[92] = 0x300000002;
    *(void *)&v117[84] = 20;
    *(void *)&v117[76] = 0xF0000000ALL;
    *(void *)&v117[68] = 0x50000C350;
    *(void *)&v117[60] = 171798691870000;
    *(void *)&v117[52] = 0x3A9800000005;
    *(void *)&v117[44] = 0x400000003;
    *(void *)&v117[36] = 0x200000000;
    *(void *)&v117[28] = 0x1E00000014;
    *(void *)&v117[20] = 0xA00000005;
    *(void *)&v117[12] = 0x5F00000055;
    *(void *)&v117[4] = 0x4B00000032;
    v117[0] = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))(*(void *)v101 + 3424))(v101, 2, 49, 75, 115, 163, 1, 1, 0x1010000A3010101, *(void *)v117, *(void *)&v117[8], *(void *)&v117[16], *(void *)&v117[24], *(void *)&v117[32], *(void *)&v117[40], *(void *)&v117[48], *(void *)&v117[56], *(void *)&v117[64], *(void *)&v117[72],
      *(void *)&v117[80],
      *(void *)&v117[88],
      *(void *)&v117[96],
      *(void *)&v117[104],
      v123);
    uint64_t v102 = sub_10003FB34();
    LOBYTE(v124) = -105;
    *(_DWORD *)&v118[108] = 10000;
    *(void *)&v118[100] = 0x500000004;
    *(void *)&v118[92] = 0x300000002;
    *(void *)&v118[84] = 20;
    *(void *)&v118[76] = 0xF0000000ALL;
    *(void *)&v118[68] = 0x50000C350;
    *(void *)&v118[60] = 171798691870000;
    *(void *)&v118[52] = 0x3A9800000005;
    *(void *)&v118[44] = 0x400000003;
    *(void *)&v118[36] = 0x200000000;
    *(void *)&v118[28] = 0x1000000008;
    *(void *)&v118[20] = 0x400000002;
    *(void *)&v118[12] = 0x5F00000055;
    *(void *)&v118[4] = 0x4B00000032;
    v118[0] = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))(*(void *)v102 + 3424))(v102, 3, 75, 115, 163, 167, 1, 1, 0x1010000A7010101, *(void *)v118, *(void *)&v118[8], *(void *)&v118[16], *(void *)&v118[24], *(void *)&v118[32], *(void *)&v118[40], *(void *)&v118[48], *(void *)&v118[56], *(void *)&v118[64], *(void *)&v118[72],
      *(void *)&v118[80],
      *(void *)&v118[88],
      *(void *)&v118[96],
      *(void *)&v118[104],
      v124);
    uint64_t v103 = sub_10003FB34();
    LOBYTE(v125) = -105;
    *(_DWORD *)&v119[108] = 10000;
    *(void *)&v119[100] = 0x500000004;
    *(void *)&v119[92] = 0x300000002;
    *(void *)&v119[84] = 20;
    *(void *)&v119[76] = 0xF0000000ALL;
    *(void *)&v119[68] = 0x50000C350;
    *(void *)&v119[60] = 171798691870000;
    *(void *)&v119[52] = 0x3A9800000005;
    *(void *)&v119[44] = 0x400000003;
    *(void *)&v119[36] = 0x200000000;
    *(void *)&v119[28] = 0x1000000008;
    *(void *)&v119[20] = 0x400000002;
    *(void *)&v119[12] = 0x5F00000055;
    *(void *)&v119[4] = 0x4B00000032;
    v119[0] = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))(*(void *)v103 + 3424))(v103, 4, 29, 29, 29, 29, 1, 1, 0x1010000A7010101, *(void *)v119, *(void *)&v119[8], *(void *)&v119[16], *(void *)&v119[24], *(void *)&v119[32], *(void *)&v119[40], *(void *)&v119[48], *(void *)&v119[56], *(void *)&v119[64], *(void *)&v119[72],
      *(void *)&v119[80],
      *(void *)&v119[88],
      *(void *)&v119[96],
      *(void *)&v119[104],
      v125);
    uint64_t v104 = sub_10003FB34();
    LOBYTE(v126) = -105;
    *(_DWORD *)&v120[108] = 10000;
    *(void *)&v120[100] = 0x500000004;
    *(void *)&v120[92] = 0x300000002;
    *(void *)&v120[84] = 20;
    *(void *)&v120[76] = 0xF0000000ALL;
    *(void *)&v120[68] = 0x50000C350;
    *(void *)&v120[60] = 171798691870000;
    *(void *)&v120[52] = 0x3A9800000005;
    *(void *)&v120[44] = 0x400000003;
    *(void *)&v120[36] = 0x200000000;
    *(void *)&v120[28] = 0x3200000032;
    *(void *)&v120[20] = 0x3200000032;
    *(void *)&v120[12] = 0x6400000064;
    *(void *)&v120[4] = 0x6400000064;
    v120[0] = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))(*(void *)v104 + 3424))(v104, 5, 17, 17, 17, 17, 0, 0, 2801795072, *(void *)v120, *(void *)&v120[8], *(void *)&v120[16], *(void *)&v120[24], *(void *)&v120[32], *(void *)&v120[40], *(void *)&v120[48], *(void *)&v120[56], *(void *)&v120[64], *(void *)&v120[72],
      *(void *)&v120[80],
      *(void *)&v120[88],
      *(void *)&v120[96],
      *(void *)&v120[104],
      v126);
  }
  else if (v98)
  {
    sub_100771BAC();
  }
  LOBYTE(v131) = 0;
  uint64_t v105 = sub_100017768();
  sub_10004191C(&buf, "HRB");
  sub_10004191C(__p, "SwitchToHRB");
  (*(void (**)(uint64_t, long long *, void **, unsigned int *))(*(void *)v105 + 72))(v105, &buf, __p, &v131);
  if (v135 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v144) < 0) {
    operator delete((void *)buf);
  }
  sub_10017F024(v131);
  int v132 = 1;
  uint64_t v106 = sub_100017768();
  sub_10004191C(&buf, "HRB");
  sub_10004191C(__p, "HRBBand");
  (*(void (**)(uint64_t, long long *, void **, int *))(*(void *)v106 + 128))(v106, &buf, __p, &v132);
  if (v135 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v144) < 0) {
    operator delete((void *)buf);
  }
  sub_10017F030(v132);
  uint64_t v107 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v107 + 2608))(v107))
  {
    unint64_t v145 = 0xFFFF0000FFFF0046;
    long long buf = xmmword_1007BF308;
    long long v144 = unk_1007BF318;
    uint64_t v108 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v108 + 264))(v108)) {
      unsigned __int8 v109 = 5;
    }
    else {
      unsigned __int8 v109 = 4;
    }
    uint64_t v110 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_DEFAULT, "stackManager sending Apple LE Feature Set Vendor List", (uint8_t *)__p, 2u);
    }
    uint64_t v111 = sub_10003FB34();
    (*(void (**)(uint64_t, void, long long *))(*(void *)v111 + 1928))(v111, v109, &buf);
  }
  sub_10003AF00((uint64_t)v141);
  sub_1004DB7B4(a1, 1u, 1);
  sub_10003AFE8((uint64_t)v141);
  sub_1004E1060((os_unfair_lock_s *)a1);
  sub_1004E10DC(a1);
  if (*(_DWORD *)(sub_10003FB34() + 712)
    && *(_DWORD *)(sub_10003FB34() + 712) <= 0x7CFu
    && *(_DWORD *)(sub_10003FB34() + 712) == 23)
  {
    uint64_t v112 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_DEFAULT, "Disable antenna switch VSE for unsupported platforms!", (uint8_t *)&buf, 2u);
    }
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009B2170);
    }
    uint64_t v113 = sub_100030F10((uint64_t)off_1009F7EF8, 1, 1);
    uint64_t v114 = sub_10003FB34();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v114 + 168))(v114, 255, v113)
      && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
    {
      sub_100771B38();
    }
  }
  uint64_t v4 = 0;
LABEL_228:
  sub_10003AFB4((uint64_t)v141);
  return v4;
}

void sub_1004E01DC(_Unwind_Exception *a1)
{
  sub_10003AFB4(v1 - 152);
  _Unwind_Resume(a1);
}

void sub_1004E0380(os_unfair_lock_s *a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Notifying stack listeners that the stack will start", v3, 2u);
  }
  sub_1004E96E4(a1 + 16, &stru_1009B1F60);
}

uint64_t sub_1004E03FC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1009FB120 != -1) {
    dispatch_once(&qword_1009FB120, &stru_1009B21D0);
  }
  sub_10062ECC4((uint64_t)off_1009FB118, v1 + 48);
  if (qword_1009FB120 != -1) {
    dispatch_once(&qword_1009FB120, &stru_1009B21D0);
  }
  uint64_t result = sub_10062F184((uint64_t)off_1009FB118);
  if (!result) {
    return (*(uint64_t (**)(uint64_t, void))(*(void *)v1 + 128))(v1, 0);
  }
  return result;
}

double sub_1004E04C8(double a1)
{
  int v3 = +[NSDate dateWithTimeIntervalSinceReferenceDate:a1];
  uint64_t v4 = +[NSCalendar currentCalendar];
  uint64_t v5 = [v4 components:60 fromDate:v3];
  [v5 setHour:5];
  [v5 setDay:((char *)[v5 day] + 1)];
  uint64_t v6 = [v4 dateFromComponents:v5];
  [v6 timeIntervalSinceReferenceDate];
  double v8 = v7;

  return v8;
}

void sub_1004E059C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004E05D4(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 203) == a2)
  {
    uint64_t v3 = qword_100A19E50;
    if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    uint64_t v4 = "disabled";
    if (a2) {
      uint64_t v4 = "enabled";
    }
    LODWORD(v19) = 136315138;
    *(void *)((char *)&v19 + 4) = v4;
    uint64_t v5 = "Denylist already %s";
    uint64_t v6 = v3;
    uint32_t v7 = 12;
LABEL_28:
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)&v19, v7);
    return;
  }
  int v9 = *(_DWORD *)(a1 + 56);
  uint64_t v10 = qword_100A19E50;
  BOOL v11 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT);
  if (v9 != 1)
  {
    if (!v11) {
      return;
    }
    LOWORD(v19) = 0;
    uint64_t v5 = "Ignore set denylist mode due to stack not ready";
    uint64_t v6 = v10;
    uint32_t v7 = 2;
    goto LABEL_28;
  }
  if (v11)
  {
    uint64_t v12 = "disabled";
    if (a2) {
      uint64_t v12 = "enabled";
    }
    LODWORD(v19) = 136315138;
    *(void *)((char *)&v19 + 4) = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "denylist mode %s", (uint8_t *)&v19, 0xCu);
  }
  *(unsigned char *)(a1 + 203) = a2;
  if (qword_1009F8748 != -1) {
    dispatch_once(&qword_1009F8748, &stru_1009B2130);
  }
  if (sub_1004B9FE0((uint64_t)off_1009F8740))
  {
    if (a2) {
      int v13 = 2;
    }
    else {
      int v13 = 1;
    }
    sub_1004E1EE8(a1, v13);
  }
  if (*(unsigned char *)(a1 + 203))
  {
    long long v19 = 0uLL;
    uint64_t v20 = 0;
    if (qword_1009F87A8 != -1) {
      dispatch_once(&qword_1009F87A8, &stru_1009B2210);
    }
    sub_10046E85C((uint64_t)off_1009F87A0, (void **)&v19);
    uint64_t v14 = (uint64_t *)v19;
    if ((void)v19 != *((void *)&v19 + 1))
    {
      do
      {
        uint64_t v15 = *v14;
        if (qword_1009F8090 != -1) {
          dispatch_once(&qword_1009F8090, &stru_1009B2110);
        }
        sub_1004D2D54((uint64_t)off_1009F8088, v15, 1);
        ++v14;
      }
      while (v14 != *((uint64_t **)&v19 + 1));
      uint64_t v14 = (uint64_t *)v19;
    }
    if (v14)
    {
      *((void *)&v19 + 1) = v14;
      operator delete(v14);
    }
  }
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009B20F0);
  }
  sub_1004B47AC((uint64_t)off_1009F7EA8, 10, 0);
  LOBYTE(v19) = 0;
  sub_10001B8E0(&v19);
  if (*(unsigned char *)(a1 + 203))
  {
    if (qword_1009F8158 != -1) {
      dispatch_once(&qword_1009F8158, &stru_1009B2150);
    }
    +[NSDate timeIntervalSinceReferenceDate];
    sub_1004FB090(v16);
    +[NSDate timeIntervalSinceReferenceDate];
    double v18 = sub_1004E04C8(v17);
    sub_1004E0A04(1, v18);
  }
  else
  {
    if (qword_1009F8158 != -1) {
      dispatch_once(&qword_1009F8158, &stru_1009B2150);
    }
    sub_1004FB090(0.0);
    sub_10017F000();
  }
  sub_10001B910(&v19);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B21F0);
  }
  sub_1002FAC44((uint64_t)off_1009F8780, *(unsigned char *)(a1 + 203));
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009B2190);
  }
  sub_1006BEDAC((uint64_t)off_1009F7ED8, *(unsigned char *)(a1 + 203));
  sub_1004E2070((unsigned char *)a1);
  sub_10001B8AC(&v19);
}

void sub_1004E09CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004E0A04(int a1, double a2)
{
  if (a1)
  {
    sub_10017EFB0();
    xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
    +[NSDate timeIntervalSinceReferenceDate];
    xpc_dictionary_set_double(v4, XPC_ACTIVITY_DELAY, a2 - v5);
    xpc_dictionary_set_int64(v4, XPC_ACTIVITY_GRACE_PERIOD, XPC_ACTIVITY_INTERVAL_1_MIN);
    xpc_dictionary_set_string(v4, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
    xpc_activity_register("com.apple.bluetooth.denylist.autoExpire", v4, &stru_1009B2038);
    xpc_release(v4);
  }
  else
  {
    sub_10017F000();
  }
}

void sub_1004E0AE8(id a1)
{
  uint64_t v1 = sub_1003705E4();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v1 + 136))(v1) && sub_10016B718() != 10)
  {
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009B20D0);
    }
    sub_1004E0BFC();
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009B20D0);
    }
    sub_1004E0E2C();
    uint64_t v2 = sub_10003FB34();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v2 + 536))(v2, 1)
      && sub_10016B718() == 7
      && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT))
    {
      sub_100771C20();
    }
  }
}

void sub_1004E0BFC()
{
  uint64_t v6 = 0;
  unsigned __int16 v5 = 0;
  bzero(__str, 0x400uLL);
  size_t v4 = 1024;
  if (sysctlbyname("kern.bootargs", __str, &v4, 0, 0) || (uint64_t v1 = strtok(__str, " ")) == 0)
  {
LABEL_2:
    uint64_t v0 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "Load and send calibration data to host controller", v3, 2u);
    }
    if (sub_1004E5088(@"bluetooth-taurus-calibration-bf", (UInt8 **)&v6, &v5)
      && sub_1004E5088(@"bluetooth-taurus-calibration", (UInt8 **)&v6, &v5)
      && sub_1004E524C((UInt8 **)&v6, &v5))
    {
      if (sub_1003FAF7C() != 239
        && sub_1003FAF7C() != 262
        && sub_1003FAF7C() != 263)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
          sub_100771C88();
        }
        return;
      }
      sub_1004E5480((uint64_t)&v6, &v5);
    }
    if (sub_1004E5630((char *)v6, v5, 0xE6u)
      && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT))
    {
      sub_100771C54();
    }
    if (v6) {
      free(v6);
    }
    return;
  }
  while (!strstr(v1, "wifibt-external"))
  {
    uint64_t v1 = strtok(0, " ");
    if (!v1) {
      goto LABEL_2;
    }
  }
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Thunderbolt to PCIe expansion chassis, so skip loading calibration data", v3, 2u);
  }
}

void sub_1004E0E2C()
{
  uint64_t v14 = 0;
  int v13 = 0;
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v12 = 0;
  v9[0] = 0;
  v9[1] = 0;
  uint64_t v10 = 0;
  sub_10004191C(v9, ".ptb");
  uint64_t v0 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "Load and send regulatory data to host controller", buf, 2u);
  }
  uint64_t v1 = sub_10003FFD4();
  if (SHIBYTE(v10) < 0)
  {
    sub_10003B098(__p, v9[0], (unint64_t)v9[1]);
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)v9;
    uint64_t v7 = v10;
  }
  int v2 = (*(uint64_t (**)(uint64_t, void **, char **, int *, void **))(*(void *)v1 + 408))(v1, __p, &v14, &v13, v11);
  int v3 = v2;
  if (SHIBYTE(v7) < 0)
  {
    operator delete(__p[0]);
    if (v3)
    {
LABEL_8:
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
        sub_100771CF0();
      }
      goto LABEL_19;
    }
  }
  else if (v2)
  {
    goto LABEL_8;
  }
  if (v13 < 251)
  {
    uint64_t v5 = sub_10003FB34();
    int v4 = (*(uint64_t (**)(uint64_t, char *, void, uint64_t))(*(void *)v5 + 3608))(v5, v14, (unsigned __int16)v13, 1);
  }
  else
  {
    int v4 = sub_1004E5630(v14, (unsigned __int16)v13, 0xCFu);
  }
  if (v4 && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
    sub_100771CBC();
  }
  if (v14) {
    free(v14);
  }
LABEL_19:
  if (SHIBYTE(v10) < 0) {
    operator delete(v9[0]);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(v11[0]);
  }
}

void sub_1004E1014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 33) < 0) {
    operator delete(*(void **)(v23 - 56));
  }
  _Unwind_Resume(exception_object);
}

void sub_1004E1060(os_unfair_lock_s *a1)
{
  int v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Notifying stack listeners that the stack did start", v3, 2u);
  }
  sub_1004E96E4(a1 + 16, &stru_1009B1F80);
}

uint64_t sub_1004E10DC(uint64_t a1)
{
  v3[0] = 0;
  v3[1] = 0;
  sub_10003AED0((uint64_t)v3, a1 + 128);
  if ((*(_DWORD *)(a1 + 56) | 2) != 2)
  {
    *(unsigned char *)(a1 + 20sub_1004C2140(qword_100A19B68, 0) = sub_1004E4294();
    sub_1004AF8EC();
    operator new();
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
    sub_100771D24();
  }
  sub_10003AFB4((uint64_t)v3);
  return 111;
}

void sub_1004E11C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004E11D4(uint64_t a1)
{
  int v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "StackManager halting stack", buf, 2u);
  }
  *(void *)long long buf = 0;
  uint64_t v29 = 0;
  sub_10003AED0((uint64_t)buf, a1 + 128);
  int v3 = *(_DWORD *)(a1 + 56);
  if (v3)
  {
    if (v3 == 2)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_100771DD8();
      }
      uint64_t v4 = 111;
      goto LABEL_36;
    }
    sub_1004DB7B4(a1, 2u, 0);
    sub_10003AFE8((uint64_t)buf);
    uint64_t v6 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v25[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Starting event un-registerations", (uint8_t *)v25, 2u);
    }
    uint64_t v7 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 112))(v7))
    {
      uint64_t v8 = sub_1004AFA9C();
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472;
      void v27[2] = sub_1004E1620;
      v27[3] = &unk_100997528;
      uint8_t v27[4] = a1;
      sub_1000197D8(v8, v27);
    }
    uint64_t v9 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 104))(v9))
    {
      uint64_t v10 = sub_10003FFD4();
      sub_1004EA648(v10 + 568, a1 + 32);
    }
    uint64_t v11 = sub_10003FFD4();
    sub_1002C4188(v11 + 368, a1 + 16);
    char v26 = 0;
    sub_10001B8E0(&v26);
    int v12 = sub_10016B718();
    int v13 = qword_100A19E50;
    BOOL v14 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT);
    if (v12 == 7)
    {
      if (v14)
      {
        LOWORD(v25[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Hard reset transport...", (uint8_t *)v25, 2u);
      }
      if (sub_10016ABB0())
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
          sub_100771DA4();
        }
        uint64_t v4 = 1;
LABEL_35:
        sub_10001B8AC(&v26);
        goto LABEL_36;
      }
    }
    else
    {
      if (v14)
      {
        LOWORD(v25[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Sending HCI reset", (uint8_t *)v25, 2u);
      }
      byte_100A19D98 = 1;
      sub_10001BDE0(55, (uint64_t)sub_1004E1684, v15, v16, v17, v18, v19, v20, (uint64_t)v25[0]);
      sub_10001B910(&v26);
      int v21 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v25[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Waiting for controller reset complete", (uint8_t *)v25, 2u);
      }
      v25[0] = 0;
      v25[1] = 0;
      sub_10003AED0((uint64_t)v25, (uint64_t)&unk_100A19D58);
      if (byte_100A19D98) {
        sub_1002B8184(&stru_100A19D28, v25);
      }
      sub_10003AFB4((uint64_t)v25);
    }
    uint64_t v22 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v25[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Configuring stack to halt", (uint8_t *)v25, 2u);
    }
    sub_10017B9B4();
    uint64_t v23 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v25[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Halting core stack", (uint8_t *)v25, 2u);
    }
    sub_10016AB08();
    sub_10016AAF8();
    uint64_t v4 = 0;
    goto LABEL_35;
  }
  uint64_t v5 = qword_100A19E50;
  uint64_t v4 = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v25[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "StackManager is already stopped", (uint8_t *)v25, 2u);
    uint64_t v4 = 0;
  }
LABEL_36:
  sub_10003AFB4((uint64_t)buf);
  return v4;
}

void sub_1004E15E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  sub_10003AFB4((uint64_t)&a9);
  sub_10001B8AC(&a14);
  sub_10003AFB4(v14 - 48);
  _Unwind_Resume(a1);
}

void sub_1004E1620(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1009FB120 != -1) {
    dispatch_once(&qword_1009FB120, &stru_1009B21D0);
  }
  int v2 = off_1009FB118;

  sub_10062ED9C((uint64_t)v2, v1 + 48);
}

uint64_t sub_1004E1684()
{
  v1[0] = 0;
  v1[1] = 0;
  sub_10003AED0((uint64_t)v1, (uint64_t)&unk_100A19D58);
  byte_100A19D98 = 0;
  sub_100026264(&stru_100A19D28);
  return sub_10003AFB4((uint64_t)v1);
}

void sub_1004E16D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004E16EC(uint64_t a1)
{
  int v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "StackManager shutting down", buf, 2u);
  }
  *(void *)long long buf = 0;
  uint64_t v27 = 0;
  sub_10003AED0((uint64_t)buf, a1 + 128);
  int v3 = *(_DWORD *)(a1 + 56);
  if (!v3)
  {
    uint64_t v5 = qword_100A19E50;
    uint64_t v4 = 0;
    if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_39;
    }
    *(_WORD *)int v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "StackManager is already stopped", v25, 2u);
LABEL_38:
    uint64_t v4 = 0;
    goto LABEL_39;
  }
  if (v3 != 2)
  {
    sub_1004DB7B4(a1, 2u, 0);
    sub_10003AFE8((uint64_t)buf);
    if (*(unsigned char *)(a1 + 202) && *(_DWORD *)(sub_10003FB34() + 712) && *(_DWORD *)(sub_10003FB34() + 712) <= 0x7CFu)
    {
      uint64_t v6 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "StackManager preparing for chip power down", v25, 2u);
      }
      if (*(_DWORD *)(sub_10003FB34() + 712) <= 0x12u)
      {
        uint64_t v7 = sub_10003FB34();
        if ((*(unsigned int (**)(uint64_t, void))(*(void *)v7 + 1264))(v7, 0))
        {
          v25[0] = 0;
          sub_10001B8E0(v25);
          sub_10018F434();
          sub_10001B910(v25);
          sub_10001B8AC(v25);
        }
      }
    }
    uint64_t v8 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Starting event un-registerations", v25, 2u);
    }
    uint64_t v9 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 112))(v9))
    {
      uint64_t v10 = sub_1004AFA9C();
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      void v24[2] = sub_1004E1BE0;
      void v24[3] = &unk_100997528;
      v24[4] = a1;
      sub_1000197D8(v10, v24);
    }
    uint64_t v11 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 104))(v11))
    {
      uint64_t v12 = sub_10003FFD4();
      sub_1004EA648(v12 + 568, a1 + 32);
    }
    uint64_t v13 = sub_10003FFD4();
    sub_1002C4188(v13 + 368, a1 + 16);
    uint64_t v14 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Configuring stack to stop", v25, 2u);
    }
    v25[0] = 0;
    sub_10001B8E0(v25);
    sub_10017B998();
    sub_10001B910(v25);
    sub_1004E1C44((os_unfair_lock_s *)a1);
    sub_1002B804C(v25);
    byte_100A19D25 = 1;
    int v22 = sub_10018F1B8((uint64_t)sub_1004E1CC0, v15, v16, v17, v18, v19, v20, v21);
    sub_10001B910(v25);
    if (v22)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_100771E74();
      }
      byte_100A19D25 = 0;
    }
    else if (sub_1004E1D34(a1) && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
    {
      sub_100771E0C();
    }
    sub_1004DDA24(a1);
    sub_10017B6D8(0);
    sub_10003AF00((uint64_t)buf);
    sub_1004DB7B4(a1, 0, 0);
    *(unsigned char *)(a1 + 192) = 0;
    *(_WORD *)(a1 + 194) = 0;
    *(unsigned char *)(a1 + 196) = 0;
    *(unsigned char *)(a1 + 199) = 0;
    *(unsigned char *)(a1 + 203) = 0;
    sub_10003AFE8((uint64_t)buf);
    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009B21F0);
    }
    sub_1002FAC44((uint64_t)off_1009F8780, *(unsigned char *)(a1 + 203));
    if (qword_1009F8158 != -1) {
      dispatch_once(&qword_1009F8158, &stru_1009B2150);
    }
    sub_1004FB090(0.0);
    sub_100116880();
    sub_1004E1E64((os_unfair_lock_s *)a1);
    sub_10001B8AC(v25);
    goto LABEL_38;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
    sub_100771B04();
  }
  uint64_t v4 = 111;
LABEL_39:
  sub_10003AFB4((uint64_t)buf);
  return v4;
}

void sub_1004E1BA4(_Unwind_Exception *a1)
{
  sub_10003AFB4(v1 - 48);
  _Unwind_Resume(a1);
}

void sub_1004E1BE0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1009FB120 != -1) {
    dispatch_once(&qword_1009FB120, &stru_1009B21D0);
  }
  int v2 = off_1009FB118;

  sub_10062ED9C((uint64_t)v2, v1 + 48);
}

void sub_1004E1C44(os_unfair_lock_s *a1)
{
  int v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Notifying stack listeners that the stack will stop", v3, 2u);
  }
  sub_1004E96E4(a1 + 16, &stru_1009B1FA0);
}

uint64_t sub_1004E1CC0(int a1)
{
  v3[0] = 0;
  v3[1] = 0;
  sub_10003AED0((uint64_t)v3, (uint64_t)&unk_100A19C80);
  byte_100A19D25 = 0;
  dword_100A19D20 = a1;
  sub_100026264(&stru_100A19CC0);
  return sub_10003AFB4((uint64_t)v3);
}

void sub_1004E1D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004E1D34(uint64_t a1)
{
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, (uint64_t)&unk_100A19C80);
  if (byte_100A19D25 && !sub_10001BCA8(&stru_100A19CC0, v8, 0x3A98uLL))
  {
    if (sub_100050530())
    {
      uint64_t v4 = sub_100050530();
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v7 = 0;
      (*(void (**)(uint64_t, uint64_t, void, void **))(*(void *)v4 + 104))(v4, 4, 0, __p);
      if (SHIBYTE(v7) < 0) {
        operator delete(__p[0]);
      }
    }
    sub_10004191C(&v5, "");
    sub_1004E258C(a1, 9500, &v5);
  }
  uint64_t v2 = dword_100A19D20;
  sub_10003AFB4((uint64_t)v8);
  return v2;
}

void sub_1004E1E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_10003AFB4(v20 - 32);
  _Unwind_Resume(a1);
}

void sub_1004E1E64(os_unfair_lock_s *a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Notifying stack listeners that the stack did stop", v3, 2u);
  }
  sub_1004E96E4(a1 + 16, &stru_1009B1FC0);
}

uint64_t sub_1004E1EE0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 203);
}

uint64_t sub_1004E1EE8(uint64_t a1, int a2)
{
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 472);
  if (*(_DWORD *)(a1 + 536) == a2)
  {
    uint64_t v4 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109376;
      int v10 = a2;
      __int16 v11 = 1024;
      int v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Not writing default airplane mode grant list state. As current state (%d) == new state (%d)", buf, 0xEu);
    }
  }
  else
  {
    if (a2 == 2) {
      CFStringRef v5 = @"on";
    }
    else {
      CFStringRef v5 = 0;
    }
    *(_DWORD *)(a1 + 536) = a2;
    uint64_t v6 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      int v10 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Write default airplane mode grant list state: %d to CFPrefs", buf, 8u);
    }
    CFPreferencesSetAppValue(@"defaultAirplaneModeDenylistState", v5, @"com.apple.BTServer");
    CFPreferencesAppSynchronize(@"com.apple.BTServer");
  }
  return sub_10003AFB4((uint64_t)v8);
}

void sub_1004E2054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004E2070(unsigned char *a1)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, (uint64_t)(a1 + 128));
  if (a1[60])
  {
    if (qword_1009F7EB0 != -1) {
      dispatch_once(&qword_1009F7EB0, &stru_1009B20F0);
    }
    BOOL v2 = sub_1004B53D4((uint64_t)off_1009F7EA8);
    if (a1[203]) {
      BOOL v3 = 0;
    }
    else {
      BOOL v3 = v2;
    }
    a1[197] = v3;
    sub_1004AF8EC();
    operator new();
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
    sub_100771EDC();
  }
  sub_10003AFB4((uint64_t)v5);
  return 111;
}

void sub_1004E2188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004E219C(uint64_t a1, uint64_t a2)
{
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 128);
  if (*(unsigned char *)(a1 + 60))
  {
    sub_10003AFE8((uint64_t)v8);
    v7[0] = 0;
    v7[1] = 0;
    sub_10003AED0((uint64_t)v7, a1 + 208);
    int v4 = *(_DWORD *)(a1 + 272);
    *(_WORD *)(a2 + 4) = *(_WORD *)(a1 + 276);
    *(_DWORD *)a2 = v4;
    sub_10003AFB4((uint64_t)v7);
    uint64_t v5 = 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_100771F60();
    }
    uint64_t v5 = 111;
  }
  sub_10003AFB4((uint64_t)v8);
  return v5;
}

void sub_1004E2250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004E2268(uint64_t a1, std::string *a2)
{
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 128);
  if (*(unsigned char *)(a1 + 60))
  {
    sub_10003AFE8((uint64_t)v7);
    v6[0] = 0;
    v6[1] = 0;
    sub_10003AED0((uint64_t)v6, a1 + 208);
    std::string::operator=(a2, (const std::string *)(a1 + 280));
    sub_10003AFB4((uint64_t)v6);
    uint64_t v4 = 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_100771F60();
    }
    uint64_t v4 = 111;
  }
  sub_10003AFB4((uint64_t)v7);
  return v4;
}

void sub_1004E2318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_1004E2340(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = a2;
  if ((int)a2 > 733)
  {
    if ((int)a2 <= 1338)
    {
      if ((int)a2 > 924)
      {
        switch(a2)
        {
          case 0x39D:
            return 118;
          case 0x4C1:
            return 323;
          case 0x536:
            return 334;
        }
      }
      else
      {
        switch(a2)
        {
          case 0x2DE:
            return 327;
          case 0x340:
            return 332;
          case 0x342:
            return 333;
        }
      }
    }
    else if ((int)a2 <= 2042)
    {
      switch(a2)
      {
        case 0x53B:
          return 310;
        case 0x586:
          return 181;
        case 0x716:
          return 319;
      }
    }
    else if ((int)a2 > 3311)
    {
      if (a2 == 3312) {
        return 317;
      }
      if (a2 == 5014) {
        return 320;
      }
    }
    else
    {
      if (a2 == 2043) {
        return 318;
      }
      if (a2 == 2604) {
        return 326;
      }
    }
    return (a3 + a2);
  }
  if ((int)a2 <= 557)
  {
    if ((int)a2 > 149)
    {
      switch(a2)
      {
        case 0x96:
          return 322;
        case 0x97:
          return 324;
        case 0x1B5:
          return 331;
      }
    }
    else
    {
      switch(a2)
      {
        case 0:
          return result;
        case 0x70:
          return 316;
        case 0x7A:
          return 312;
      }
    }
    return (a3 + a2);
  }
  switch((int)a2)
  {
    case 704:
      return 329;
    case 705:
      return 158;
    case 706:
      return 151;
    case 707:
    case 709:
    case 710:
    case 712:
    case 713:
    case 715:
    case 717:
    case 718:
    case 719:
    case 720:
    case 721:
    case 722:
      return (a3 + a2);
    case 708:
      return 328;
    case 711:
      return 314;
    case 714:
    case 724:
      return 162;
    case 716:
      return 330;
    case 723:
      return 166;
    default:
      if (a2 == 558)
      {
        uint64_t result = 321;
      }
      else
      {
        if (a2 != 559) {
          return (a3 + a2);
        }
        uint64_t result = 325;
      }
      break;
  }
  return result;
}

void sub_1004E258C(uint64_t a1, int a2, long long *a3)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1004E6B90;
  block[3] = &unk_1009B1F10;
  void block[4] = a1;
  int v9 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10003B098(&v7, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    uint64_t v8 = *((void *)a3 + 2);
  }
  if (qword_100A137E8 != -1) {
    dispatch_once(&qword_100A137E8, block);
  }
  sleep(0x384u);
  BOOL v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 67109120;
    int v11 = 15;
    _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "We've been sleeping for %d minutes during a coredump, restarting", buf, 8u);
  }
  uint64_t v4 = sub_100017768();
  sub_10004191C(v5, "");
  sub_1005C8AF4(v4, 3706, (uint64_t)v5, 1);
}

void sub_1004E26D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004E2710(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = sub_1004AF8EC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1004E278C;
  void v5[3] = &unk_1009A7758;
  char v6 = a3;
  sub_100013018(v4, v5);
}

void sub_1004E278C(uint64_t a1)
{
  if (sub_100050530())
  {
    uint64_t v2 = sub_100050530();
    uint64_t v3 = *(unsigned __int8 *)(a1 + 32);
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v5 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)v2 + 104))(v2, 2, v3, __p);
    if (SHIBYTE(v5) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1004E2808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004E2824(uint64_t a1, int a2)
{
  if (a2 == 1)
  {
    if (qword_1009FB088 != -1) {
      dispatch_once(&qword_1009FB088, &stru_1009B2230);
    }
    uint64_t v3 = qword_1009FB080;
    sub_10004191C(v6, "TransportError");
    sub_10004191C(__p, "TransportErrorDeviceOfflineError");
    sub_1004B7DA8(0.0, v3, (uint64_t *)v6, (uint64_t *)__p);
  }
  else
  {
    if (a2) {
      return;
    }
    if (qword_1009FB088 != -1) {
      dispatch_once(&qword_1009FB088, &stru_1009B2230);
    }
    uint64_t v2 = qword_1009FB080;
    sub_10004191C(v6, "TransportError");
    sub_10004191C(__p, "TransportErrorNoMemError");
    sub_1004B7DA8(0.0, v2, (uint64_t *)v6, (uint64_t *)__p);
  }
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1004E2940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004E297C(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  snprintf(byte_100A132F0, 0x200uLL, "AppleBT Device Error (Recovery)\n Code: %llu\n Reason: %s\n", a3, a4);
  snprintf(byte_100A134F0, 0x200uLL, "AppleBT Device Error (Recovery) Code: %llu Reason: %s", a3, a4);
  qword_1009FC078 = (uint64_t)byte_100A132F0;
  qword_1009FC0A8 = a3;
  if (sub_100050530())
  {
    uint64_t v7 = sub_100050530();
    sub_10004191C(__p, a4);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)v7 + 104))(v7, a2, a3, __p);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
  if (qword_1009FB088 != -1) {
    dispatch_once(&qword_1009FB088, &stru_1009B2230);
  }
  uint64_t v8 = qword_1009FB080;
  sub_10004191C(__p, "FWErrorDeviceError");
  sub_10004191C(v9, a4);
  sub_1004B7DA8(0.0, v8, (uint64_t *)__p, (uint64_t *)v9);
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1004E2AE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004E2B18(uint64_t a1, int a2, int a3, uint64_t a4)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_1004E2BA4;
  void v4[3] = &unk_100998260;
  int v5 = a2;
  int v6 = a3;
  v4[4] = a4;
  if (qword_100A136F0 != -1) {
    dispatch_once(&qword_100A136F0, v4);
  }
}

void sub_1004E2BA4(uint64_t a1)
{
  if (sub_100050530())
  {
    uint64_t v2 = sub_100050530();
    uint64_t v3 = *(unsigned int *)(a1 + 40);
    uint64_t v4 = *(unsigned int *)(a1 + 44);
    sub_10004191C(__p, *(char **)(a1 + 32));
    (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)v2 + 104))(v2, v3, v4, __p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1004E2C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004E2C54(uint64_t a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B20D0);
  }
  uint64_t result = sub_1004E2CE0((uint64_t)off_1009F8068);
  if (result)
  {
    *(unsigned char *)(a1 + 8) = 1;
  }
  else
  {
    *(void *)(a1 + 16) = 100;
    uint64_t v3 = sub_1004AF8EC();
    return sub_1004B022C(v3, (unsigned char *)a1);
  }
  return result;
}

uint64_t sub_1004E2CE0(uint64_t a1)
{
  v18[0] = 0;
  v18[1] = 0;
  sub_10003AED0((uint64_t)v18, a1 + 128);
  int v2 = *(_DWORD *)(a1 + 56);
  if (v2 != 2)
  {
    if (!v2)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_100772010();
      }
      sub_10003AFE8((uint64_t)v18);
      if (qword_1009F7EB0 != -1) {
        dispatch_once(&qword_1009F7EB0, &stru_1009B20F0);
      }
      int v3 = 111;
      goto LABEL_8;
    }
    if (!*(unsigned char *)(a1 + 192))
    {
      int v8 = *(unsigned __int8 *)(a1 + 196);
      if (v8 != *(unsigned __int8 *)(a1 + 197))
      {
        buf[0] = 0;
        sub_10001B8E0(buf);
        int v17 = sub_100184B74(sub_1004E31D8, 2 * *(unsigned __int8 *)(a1 + 197), v11, v12, v13, v14, v15, v16);
        sub_10001B910(buf);
        if (v17)
        {
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
            sub_100771F94();
          }
          sub_10003AFE8((uint64_t)v18);
          if (qword_1009F7EB0 != -1) {
            dispatch_once(&qword_1009F7EB0, &stru_1009B20F0);
          }
          sub_1004B47AC((uint64_t)off_1009F7EA8, 2, 1);
        }
        else
        {
          *(unsigned char *)(a1 + 192) = 1;
          *(unsigned char *)(a1 + 198) = *(unsigned char *)(a1 + 197);
        }
        sub_10001B8AC(buf);
        goto LABEL_9;
      }
      int v9 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        char v10 = "discoverable";
        if (!v8) {
          char v10 = "not discoverable";
        }
        *(_DWORD *)long long buf = 136446210;
        uint64_t v20 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Local device state is already %{public}s", buf, 0xCu);
      }
      sub_10003AFE8((uint64_t)v18);
      if (qword_1009F7EB0 != -1) {
        dispatch_once(&qword_1009F7EB0, &stru_1009B20F0);
      }
      if (*(unsigned char *)(a1 + 196)) {
        int v3 = 122;
      }
      else {
        int v3 = 123;
      }
LABEL_8:
      sub_1004B47AC((uint64_t)off_1009F7EA8, 2, v3);
LABEL_9:
      uint64_t v4 = 1;
      goto LABEL_15;
    }
  }
  int v5 = qword_100A19E50;
  uint64_t v4 = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    char v6 = "busy";
    if (v2 == 2) {
      char v6 = "in flux";
    }
    *(_DWORD *)long long buf = 136446210;
    uint64_t v20 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Delaying discoverability change event as stack is %{public}s", buf, 0xCu);
    uint64_t v4 = 0;
  }
LABEL_15:
  sub_10003AFB4((uint64_t)v18);
  return v4;
}

void sub_1004E2FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004E3008(uint64_t a1, unsigned char *a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 128);
  *a2 = *(unsigned char *)(a1 + 196);
  sub_10003AFB4((uint64_t)v5);
  return 0;
}

uint64_t sub_1004E3058(unsigned char *a1, int a2)
{
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, (uint64_t)(a1 + 128));
  if (a2)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_100772044();
    }
  }
  else
  {
    int v4 = a1[198];
    a1[196] = v4;
    int v5 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      char v6 = "discoverable";
      if (!v4) {
        char v6 = "not discoverable";
      }
      *(_DWORD *)long long buf = 136446210;
      char v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Local device is now %{public}s", buf, 0xCu);
    }
  }
  a1[192] = 0;
  sub_10003AFE8((uint64_t)v8);
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009B20F0);
  }
  sub_1004B47AC((uint64_t)off_1009F7EA8, 2, a2 != 0);
  return sub_10003AFB4((uint64_t)v8);
}

void sub_1004E31BC(_Unwind_Exception *exception_object)
{
}

void sub_1004E31D8(int a1)
{
  uint64_t v2 = sub_1004AF8EC();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1004EAB80;
  void v3[3] = &unk_100998300;
  int v4 = a1;
  sub_100013018(v2, v3);
}

uint64_t sub_1004E3254(uint64_t a1)
{
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 128);
  if (*(unsigned char *)(a1 + 60) && sub_100183F14() >= 4)
  {
    sub_1004E3344();
    sub_10003AFE8((uint64_t)v9);
    char v8 = 0;
    sub_10001B8E0(&v8);
    if (sub_10018F230((uint64_t)sub_1004E41B8, 1u, (uint64_t)byte_100A136F8, v2, v3, v4, v5, v6)
      && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
    {
      sub_1007720C8();
    }
    sub_10001B8AC(&v8);
  }
  return sub_10003AFB4((uint64_t)v9);
}

void sub_1004E331C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14)
{
}

void sub_1004E3344()
{
  bzero(byte_100A136F8, dword_100A13810);
  char v0 = strlen("iOS");
  byte_100A136F8[0] = v0 + 1;
  byte_100A136F9 = 9;
  uint64_t v1 = (v0 + 1);
  memcpy(&unk_100A136FA, "iOS", v1 - 1);
  uint64_t v2 = v1 + 1;
  dword_100A13810 = v2;
  LOBYTE(__n[0]) = 0;
  char v80 = 0;
  uint64_t v3 = sub_100017768();
  sub_10004191C(buf, "WiAP");
  sub_10004191C(&__n[1], "enableSink");
  (*(void (**)(uint64_t, uint8_t *, _WORD *, _WORD *))(*(void *)v3 + 72))(v3, buf, &__n[1], __n);
  if (SBYTE1(v87) < 0) {
    operator delete(*(void **)&__n[1]);
  }
  if (SBYTE7(v89) < 0) {
    operator delete(*(void **)buf);
  }
  if (LOBYTE(__n[0]))
  {
    uint64_t v4 = sub_100017768();
    sub_10004191C(buf, "CarPlay");
    sub_10004191C(&__n[1], "enableLeCarPlay");
    (*(void (**)(uint64_t, uint8_t *, _WORD *, char *))(*(void *)v4 + 72))(v4, buf, &__n[1], &v80);
    if (SBYTE1(v87) < 0) {
      operator delete(*(void **)&__n[1]);
    }
    if (SBYTE7(v89) < 0) {
      operator delete(*(void **)buf);
    }
  }
  int v5 = dword_100A13810;
  *(_DWORD *)&byte_100A136F8[dword_100A13810] = 301990656;
  dword_100A13810 = v5 + 4;
  uint64_t v6 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v6 + 48))(v6, 1))
  {
    int v7 = dword_100A13810;
    *(_WORD *)&byte_100A136F8[dword_100A13810] = 4383;
    dword_100A13810 = v7 + 2;
    char v8 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Advertising HFP AG", buf, 2u);
    }
  }
  uint64_t v9 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v9 + 48))(v9, 2))
  {
    int v10 = dword_100A13810;
    *(_WORD *)&byte_100A136F8[dword_100A13810] = 4399;
    dword_100A13810 = v10 + 2;
    uint64_t v11 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Advertising PBAP Server", buf, 2u);
    }
  }
  uint64_t v12 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v12 + 48))(v12, 16))
  {
    int v13 = dword_100A13810;
    *(_WORD *)&byte_100A136F8[dword_100A13810] = 4362;
    dword_100A13810 = v13 + 2;
    uint64_t v14 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Advertising A2DP Source", buf, 2u);
    }
  }
  uint64_t v15 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v15 + 48))(v15, 8))
  {
    int v16 = dword_100A13810;
    *(_WORD *)&byte_100A136F8[dword_100A13810] = 4364;
    dword_100A13810 = v16 + 2;
    int v17 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Advertising AVRCP Target", buf, 2u);
    }
  }
  uint64_t v18 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v18 + 48))(v18, 256))
  {
    LOBYTE(__n[1]) = 0;
    char v79 = 0;
    char v78 = 0;
    uint64_t v19 = sub_10003FFD4();
    (*(void (**)(uint64_t, _WORD *, char *, char *))(*(void *)v19 + 24))(v19, &__n[1], &v79, &v78);
    if (LOBYTE(__n[1]))
    {
      int v20 = dword_100A13810;
      *(_WORD *)&byte_100A136F8[dword_100A13810] = 4374;
      dword_100A13810 = v20 + 2;
      uint64_t v21 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Advertising PAN-NAP", buf, 2u);
      }
    }
  }
  uint64_t v22 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v22 + 48))(v22, 2048))
  {
    if (qword_1009F7EB0 != -1) {
      dispatch_once(&qword_1009F7EB0, &stru_1009B20F0);
    }
    if (sub_1004B3038((uint64_t)off_1009F7EA8))
    {
      int v23 = dword_100A13810;
      *(_WORD *)&byte_100A136F8[dword_100A13810] = 4373;
      dword_100A13810 = v23 + 2;
      int v24 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "Advertising PAN-U", buf, 2u);
      }
    }
  }
  uint64_t v25 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v25 + 48))(v25, 512))
  {
    int v26 = dword_100A13810;
    *(_WORD *)&byte_100A136F8[dword_100A13810] = 4402;
    dword_100A13810 = v26 + 2;
    uint64_t v27 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "Advertising MAP Server", buf, 2u);
    }
  }
  char v79 = 0;
  uint64_t v28 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v28 + 8))(v28))
  {
    uint64_t v29 = sub_100017768();
    sub_10004191C(buf, "CATT");
    sub_10004191C(&__n[1], "DisableSdp");
    (*(void (**)(uint64_t, uint8_t *, _WORD *, char *))(*(void *)v29 + 72))(v29, buf, &__n[1], &v79);
    if (SBYTE1(v87) < 0) {
      operator delete(*(void **)&__n[1]);
    }
    if (SBYTE7(v89) < 0) {
      operator delete(*(void **)buf);
    }
  }
  if (!v79)
  {
    uint64_t v30 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v30 + 48))(v30, 0x100000))
    {
      int v31 = dword_100A13810;
      *(_WORD *)&byte_100A136F8[dword_100A13810] = 6145;
      dword_100A13810 = v31 + 2;
      int v32 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "Advertising GATT Source", buf, 2u);
      }
    }
  }
  uint64_t v33 = sub_100035F54();
  int v34 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v33 + 48))(v33, 0x20000);
  int v35 = dword_100A13810;
  if (v34)
  {
    if (LOBYTE(__n[0]))
    {
      if (v80)
      {
        byte_100A136F8[dword_100A13810] = -108;
        byte_100A136F8[v35 + 1] = -4;
        v35 += 2;
        dword_100A13810 = v35;
        uint64_t v36 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "Advertising LE CarPlay", buf, 2u);
          int v35 = dword_100A13810;
        }
      }
    }
  }
  byte_100A136F8[v2] = v35 - v0 - 3;
  *(_DWORD *)&byte_100A136F8[v35] = 117441793;
  dword_100A13810 = v35 + 4;
  uint64_t v37 = sub_100035F54();
  int v38 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v37 + 48))(v37, 128);
  if (LOBYTE(__n[0])) {
    int v39 = 0;
  }
  else {
    int v39 = v38;
  }
  if (v39 == 1)
  {
    char v78 = 0;
    uint64_t v40 = sub_100017768();
    sub_10004191C(buf, "IAP");
    sub_10004191C(&__n[1], "enableIAP");
    (*(void (**)(uint64_t, uint8_t *, _WORD *, char *))(*(void *)v40 + 72))(v40, buf, &__n[1], &v78);
    if (SBYTE1(v87) < 0) {
      operator delete(*(void **)&__n[1]);
    }
    if (SBYTE7(v89) < 0) {
      operator delete(*(void **)buf);
    }
    if (v78 || (uint64_t v41 = sub_100035F54(), ((*(uint64_t (**)(uint64_t))(*(void *)v41 + 384))(v41) & 1) == 0))
    {
      int v42 = dword_100A13810;
      uint64_t v43 = &dword_10000000C + 3;
      int v44 = dword_100A13810;
      do
        byte_100A136F8[v44++] = byte_1007BF346[v43--];
      while (v43 != -1);
      int v45 = v42 + 16;
      dword_100A13810 = v42 + 16;
      for (uint64_t i = &dword_10000000C + 3; i != -1; --i)
        byte_100A136F8[v45++] = byte_1007BF356[i];
      dword_100A13810 = v42 + 32;
      uint64_t v47 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_INFO, "Advertising WiAP", buf, 2u);
      }
    }
  }
  uint64_t v48 = sub_100035F54();
  int v49 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v48 + 48))(v48, 0x20000);
  if (LOBYTE(__n[0])) {
    int v50 = v49;
  }
  else {
    int v50 = 0;
  }
  if (v50 == 1)
  {
    int v51 = dword_100A13810;
    uint64_t v52 = &dword_10000000C + 3;
    int v53 = dword_100A13810;
    do
      byte_100A136F8[v53++] = byte_1007BF366[v52--];
    while (v52 != -1);
    int v54 = v51 + 16;
    dword_100A13810 = v51 + 16;
    for (uint64_t j = &dword_10000000C + 3; j != -1; --j)
      byte_100A136F8[v54++] = byte_1007BF376[j];
    dword_100A13810 = v51 + 32;
    uint64_t v56 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_INFO, "Advertising WiAP Sink and Classic CarPlay", buf, 2u);
    }
  }
  uint64_t v57 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v57 + 48))(v57, 0x40000))
  {
    LOBYTE(__n[1]) = 0;
    uint64_t v58 = sub_10003FFD4();
    if (!(*(unsigned int (**)(uint64_t, _WORD *))(*(void *)v58 + 144))(v58, &__n[1])
      && LOBYTE(__n[1]) != 0)
    {
      int v60 = dword_100A13810;
      uint64_t v61 = &dword_10000000C + 3;
      int v62 = dword_100A13810;
      do
        byte_100A136F8[v62++] = byte_1007BF386[v61--];
      while (v61 != -1);
      dword_100A13810 = v60 + 16;
      uint64_t v63 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_INFO, "Advertising  CarPlay Gateway", buf, 2u);
      }
    }
  }
  uint64_t v64 = dword_100A13810;
  byte_100A136F8[v35 + 2] = dword_100A13810 - v35 - 3;
  long long v118 = 0u;
  long long v119 = 0u;
  long long v116 = 0u;
  long long v117 = 0u;
  long long v114 = 0u;
  long long v115 = 0u;
  long long v112 = 0u;
  long long v113 = 0u;
  long long v110 = 0u;
  long long v111 = 0u;
  long long v108 = 0u;
  long long v109 = 0u;
  long long v106 = 0u;
  long long v107 = 0u;
  long long v104 = 0u;
  long long v105 = 0u;
  long long v102 = 0u;
  long long v103 = 0u;
  long long v100 = 0u;
  long long v101 = 0u;
  long long v98 = 0u;
  long long v99 = 0u;
  long long v96 = 0u;
  long long v97 = 0u;
  long long v94 = 0u;
  long long v95 = 0u;
  long long v92 = 0u;
  long long v93 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  *(_OWORD *)long long buf = 0u;
  long long v89 = 0u;
  __n[0] = 0;
  *(_DWORD *)&byte_100A136F8[v64] = 1275133696;
  dword_100A13810 = v64 + 4;
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009B20F0);
  }
  int v65 = sub_1004B2F6C((uint64_t)off_1009F7EA8, (uint64_t)buf, __n);
  unsigned int v66 = __n[0];
  if (__n[0]) {
    int v67 = v65;
  }
  else {
    int v67 = 0;
  }
  if (v67 == 1)
  {
    int v68 = dword_100A13810;
    int v69 = dword_100A13810 + __n[0];
    if (v69 > 240)
    {
      int v70 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
      {
        *(void *)&__n[1] = __PAIR64__(v66, 67109888);
        __int16 v82 = 1024;
        int v83 = v68;
        __int16 v84 = 1024;
        int v85 = v69;
        __int16 v86 = 1024;
        int v87 = 240;
        _os_log_error_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_ERROR, "EIR data length: %d + constEirLen: %d = %d > %d", (uint8_t *)&__n[1], 0x1Au);
      }
    }
    else
    {
      memcpy(&byte_100A136F8[dword_100A13810], buf, __n[0]);
      dword_100A13810 = v69;
    }
  }
  if (qword_1009F8090 != -1) {
    dispatch_once(&qword_1009F8090, &stru_1009B2110);
  }
  int v71 = sub_1004D92F4((uint64_t)off_1009F8088, (char *)buf, __n);
  unsigned int v72 = __n[0];
  if (__n[0]) {
    int v73 = v71;
  }
  else {
    int v73 = 0;
  }
  int v74 = dword_100A13810;
  if (v73 != 1) {
    goto LABEL_103;
  }
  int v75 = dword_100A13810 + __n[0];
  if (v75 <= 240)
  {
    memcpy(&byte_100A136F8[dword_100A13810], buf, __n[0]);
    dword_100A13810 = v75;
    goto LABEL_104;
  }
  int v76 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
  {
    *(void *)&__n[1] = __PAIR64__(v72, 67109888);
    __int16 v82 = 1024;
    int v83 = v74;
    __int16 v84 = 1024;
    int v85 = v75;
    __int16 v86 = 1024;
    int v87 = 240;
    _os_log_error_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_ERROR, "Service specific EIR data length: %d + constEirLen: %d = %d > %d", (uint8_t *)&__n[1], 0x1Au);
    int v75 = dword_100A13810;
  }
  else
  {
LABEL_103:
    int v75 = v74;
  }
LABEL_104:
  byte_100A136F8[v64] = v75 + ~(_BYTE)v64;
  if (v75 >= 240)
  {
    uint64_t v77 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
      sub_100772130(v77);
    }
  }
}

void sub_1004E4164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004E41B8(int a1)
{
  if (a1)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_1007721B4();
    }
  }
}

uint64_t sub_1004E420C(uint64_t a1)
{
  uint64_t v2 = sub_1004AF8EC();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_1004E428C;
  void v4[3] = &unk_100997528;
  v4[4] = a1;
  sub_100013018(v2, v4);
  return 0;
}

uint64_t sub_1004E428C(uint64_t a1)
{
  return sub_1004E3254(*(void *)(a1 + 32));
}

uint64_t sub_1004E4294()
{
  uint64_t v4 = 0;
  int v5 = 0;
  uint64_t v6 = 0;
  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_1009B2250);
  }
  sub_10060C508((uint64_t)off_1009F8760, &v4);
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009B20F0);
  }
  BOOL v0 = sub_1004B4708((uint64_t)off_1009F7EA8);
  uint64_t v1 = v4;
  uint64_t v2 = v5;
  if (v4)
  {
    int v5 = v4;
    operator delete(v4);
  }
  return v1 != v2 || v0;
}

void sub_1004E4354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004E4370(uint64_t a1, unsigned char *a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 128);
  *a2 = *(unsigned char *)(a1 + 199);
  sub_10003AFB4((uint64_t)v5);
  return 0;
}

uint64_t sub_1004E43C0(uint64_t a1, int a2, int a3)
{
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 128);
  if (a2)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10077221C();
    }
  }
  else
  {
    *(unsigned char *)(a1 + 199) = a3;
    uint64_t v6 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = "not connectable";
      if (a3) {
        int v7 = "connectable";
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Local device is now %{public}s", buf, 0xCu);
    }
  }
  *(unsigned char *)(a1 + 192) = 0;
  sub_10003AFE8((uint64_t)v9);
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009B20F0);
  }
  sub_1004B47AC((uint64_t)off_1009F7EA8, 3, a2 != 0);
  return sub_10003AFB4((uint64_t)v9);
}

void sub_1004E4524(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1004E4540(uint64_t a1)
{
  v18[0] = 0;
  v18[1] = 0;
  sub_10003AED0((uint64_t)v18, a1 + 128);
  int v2 = *(_DWORD *)(a1 + 56);
  if (v2 != 2)
  {
    if (!v2)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_10077231C();
      }
      sub_10003AFE8((uint64_t)v18);
      if (qword_1009F7EB0 != -1) {
        dispatch_once(&qword_1009F7EB0, &stru_1009B20F0);
      }
      int v3 = 111;
      goto LABEL_8;
    }
    if (!*(unsigned char *)(a1 + 192))
    {
      int v8 = *(unsigned __int8 *)(a1 + 199);
      if (v8 != *(unsigned __int8 *)(a1 + 200))
      {
        buf[0] = 0;
        sub_10001B8E0(buf);
        int v17 = sub_100184F58((void (*)(int))sub_1004E485C, *(unsigned __int8 *)(a1 + 200), v11, v12, v13, v14, v15, v16);
        sub_10001B910(buf);
        if (v17)
        {
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
            sub_1007722A0();
          }
          sub_10003AFE8((uint64_t)v18);
          if (qword_1009F7EB0 != -1) {
            dispatch_once(&qword_1009F7EB0, &stru_1009B20F0);
          }
          sub_1004B47AC((uint64_t)off_1009F7EA8, 3, 1);
        }
        else
        {
          *(unsigned char *)(a1 + 192) = 1;
        }
        sub_10001B8AC(buf);
        goto LABEL_9;
      }
      uint64_t v9 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = "connectable";
        if (!v8) {
          int v10 = "not connectable";
        }
        *(_DWORD *)long long buf = 136446210;
        int v20 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Local device state is already %{public}s", buf, 0xCu);
      }
      sub_10003AFE8((uint64_t)v18);
      if (qword_1009F7EB0 != -1) {
        dispatch_once(&qword_1009F7EB0, &stru_1009B20F0);
      }
      if (*(unsigned char *)(a1 + 199)) {
        int v3 = 120;
      }
      else {
        int v3 = 121;
      }
LABEL_8:
      sub_1004B47AC((uint64_t)off_1009F7EA8, 3, v3);
LABEL_9:
      uint64_t v4 = 1;
      goto LABEL_15;
    }
  }
  int v5 = qword_100A19E50;
  uint64_t v4 = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = "busy";
    if (v2 == 2) {
      uint64_t v6 = "in flux";
    }
    *(_DWORD *)long long buf = 136446210;
    int v20 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Delaying connectability change event as stack is %{public}s", buf, 0xCu);
    uint64_t v4 = 0;
  }
LABEL_15:
  sub_10003AFB4((uint64_t)v18);
  return v4;
}

void sub_1004E482C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1004E485C(int a1, char a2)
{
  uint64_t v4 = sub_1004AF8EC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1004EAC88;
  void v5[3] = &unk_1009B20B0;
  int v6 = a1;
  char v7 = a2;
  sub_100013018(v4, v5);
}

void sub_1004E48E0(uint64_t a1, uint64_t a2)
{
  v20[0] = 0;
  v20[1] = 0;
  sub_10003AED0((uint64_t)v20, a1 + 128);
  long long v19 = 0uLL;
  sub_1004B8C30(&v19, 17);
  *(void *)((char *)&v19 + 4) = 0xDA20000003ALL;
  HIDWORD(v19) = a2;
  if ((a2 + 16) <= 0x10u) {
    sub_10010CE74();
  }
  switch((int)a2)
  {
    case 240:
      uint64_t v4 = "received invalid data from BT chip";
      int v5 = 643;
      break;
    case 241:
      uint64_t v4 = "Timed out while waiting for data from BT Chip";
      int v5 = 644;
      break;
    case 242:
      uint64_t v4 = "Invalid receive state from BT Chip";
      int v5 = 645;
      break;
    case 243:
      uint64_t v4 = "Timed out in invalid receive state from BT Chip";
      int v5 = 646;
      break;
    case 244:
      uint64_t v4 = "Invalid packet length received from BT Chip";
      int v5 = 647;
      break;
    case 245:
      uint64_t v4 = "Core dump";
      int v5 = 3703;
      break;
    default:
      if (a2)
      {
        if (a2 == 8)
        {
          uint64_t v4 = "Bt chip timed out while trying to transfer data to SPMI master";
          int v5 = 652;
        }
        else
        {
          uint64_t v4 = "unknown";
          int v5 = 648;
        }
      }
      else
      {
        uint64_t v4 = "BT chip received invalid data from iOS";
        int v5 = 642;
      }
      break;
  }
  int v6 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = v4;
    __int16 v22 = 1024;
    int v23 = a2;
    _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Hardware error - %{public}s (%u)", buf, 0x12u);
  }
  int v7 = *(unsigned __int8 *)(a1 + 194);
  if (*(unsigned char *)(a1 + 194) || *(unsigned char *)(a1 + 195))
  {
    int v8 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = "DUT";
      if (!v7) {
        uint64_t v9 = "LE Test";
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Can not restore state while in %{public}s mode", buf, 0xCu);
    }
  }
  if (a2 == 245)
  {
    if (sub_100050530())
    {
      uint64_t v14 = sub_100050530();
      sub_10004191C(buf, v4);
      (*(void (**)(uint64_t, uint64_t, void, unsigned char *))(*(void *)v14 + 104))(v14, 1, 0, buf);
      if (v24 < 0) {
        operator delete(*(void **)buf);
      }
    }
    uint64_t v10 = sub_100017768();
    (*(void (**)(uint64_t, const char *))(*(void *)v10 + 496))(v10, "UART core dump");
    uint64_t v11 = sub_100017768();
    uint64_t v12 = *(unsigned int *)(a1 + 352);
    if (*(char *)(a1 + 383) < 0)
    {
      sub_10003B098(&__dst, *(void **)(a1 + 360), *(void *)(a1 + 368));
    }
    else
    {
      long long __dst = *(_OWORD *)(a1 + 360);
      uint64_t v18 = *(void *)(a1 + 376);
    }
    sub_1005C8AF4(v11, v12, (uint64_t)&__dst, 1);
  }
  if (sub_100050530())
  {
    uint64_t v15 = sub_100050530();
    sub_10004191C(buf, v4);
    (*(void (**)(uint64_t, void, uint64_t, unsigned char *))(*(void *)v15 + 104))(v15, 0, a2, buf);
    if (v24 < 0) {
      operator delete(*(void **)buf);
    }
  }
  uint64_t v13 = sub_100050530();
  (*(void (**)(uint64_t, long long *))(*(void *)v13 + 40))(v13, &v19);
  sub_10003AFE8((uint64_t)v20);
  sub_10004191C(&v16, "");
  sub_1004E258C(a1, v5, &v16);
}

void sub_1004E4C9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a25);
  _Unwind_Resume(a1);
}

float sub_1004E4D20(uint64_t a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B20D0);
  }
  int v2 = off_1009F8068;
  int v3 = *(_DWORD *)(a1 + 32);
  int v4 = *(unsigned __int16 *)(a1 + 36);
  int v5 = *(unsigned __int8 *)(a1 + 38);

  return sub_1004E4D8C((uint64_t)v2, v3, v4, v5);
}

float sub_1004E4D8C(uint64_t a1, int a2, int a3, int a4)
{
  int v6 = *(_DWORD *)(a1 + 56);
  if (v6 == 1)
  {
    if (sub_100017A14())
    {
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      *(_OWORD *)long long buf = 0u;
      long long v22 = 0u;
      char v20 = 0;
      sub_10001B8E0(&v20);
      uint64_t v10 = sub_1001DA4C8(a3);
      sub_10025B74C((uint64_t)buf, 256, (uint64_t)"HCI stall detected, %s (0x%x)", v11, v12, v13, v14, v15, (uint64_t)v10);
      sub_10011631C((const char *)buf);
      sub_10001B910(&v20);
      sub_10001B8AC(&v20);
    }
    if (sub_100050530())
    {
      uint64_t v17 = sub_100050530();
      memset(buf, 0, sizeof(buf));
      *(void *)&long long v22 = 0;
      (*(void (**)(uint64_t, uint64_t, void, uint8_t *))(*(void *)v17 + 104))(v17, 5, a3 | (a4 << 16), buf);
      if (SBYTE7(v22) < 0) {
        operator delete(*(void **)buf);
      }
    }
    long long v16 = (char *)sub_1001DA4C8(a3);
    sub_10004191C(&v19, v16);
    sub_1004E258C(a1, 621, &v19);
  }
  int v8 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 67109888;
    *(_DWORD *)&uint8_t buf[4] = v6;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = a3;
    *(_WORD *)&unsigned char buf[14] = 1024;
    LODWORD(v22) = a4;
    WORD2(v22) = 1024;
    *(_DWORD *)((char *)&v22 + 6) = a2;
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "HCI event timeout occured during state %d on opcode 0x%x with subopcode 0x%x due to %{bluetooth:OI_STATUS}u, ignoring", buf, 0x1Au);
  }
  return result;
}

void sub_1004E4F68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004E4FB0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7 = sub_10016B718();
  int v8 = *(char *)(a4 + 23);
  if (v7 == 7 && a3)
  {
    if (v8 < 0) {
      a4 = *(void *)a4;
    }
    sub_1004E2B18(v7, 11, 0, a4);
    sub_10004191C(&v9, "chip boot failure");
    sub_1004E258C(a1, 1214, &v9);
  }
  if (v8 < 0) {
    a4 = *(void *)a4;
  }

  sub_1004E2B18(v7, 12, 0, a4);
}

void sub_1004E505C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004E5078(uint64_t a1)
{
  return *(unsigned int *)(a1 + 316);
}

uint64_t sub_1004E5080(uint64_t a1)
{
  return *(void *)(a1 + 320);
}

uint64_t sub_1004E5088(const __CFString *a1, UInt8 **a2, _WORD *a3)
{
  CFDictionaryRef v6 = IOServiceNameMatching("bluetooth");
  if (!v6) {
    return 131;
  }
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v6);
  if (!MatchingService) {
    return 131;
  }
  io_object_t v8 = MatchingService;
  CFDataRef v9 = (const __CFData *)IORegistryEntrySearchCFProperty(MatchingService, "IODeviceTree", a1, kCFAllocatorDefault, 1u);
  if (v9)
  {
    CFDataRef v10 = v9;
    CFTypeID TypeID = CFDataGetTypeID();
    if (TypeID == CFGetTypeID(v10))
    {
      CFIndex Length = CFDataGetLength(v10);
      CFIndex v13 = Length;
      if (Length)
      {
        uint64_t v14 = (UInt8 *)malloc_type_malloc(Length, 0x100004077774924uLL);
        *a2 = v14;
        v17.location = 0;
        v17.size_t length = v13;
        CFDataGetBytes(v10, v17, v14);
      }
      *a3 = v13;
    }
    CFRelease(v10);
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = 131;
  }
  IOObjectRelease(v8);
  return v15;
}

uint64_t sub_1004E5198(const void **a1)
{
  CFDictionaryRef v2 = (const __CFDictionary *)AMFDRSealingMapCopyLocalDictForClass();
  CFDictionaryRef v3 = v2;
  if (!a1 || !v2)
  {
    if (!a1) {
      goto LABEL_8;
    }
    Value = *a1;
    if (!*a1) {
      goto LABEL_8;
    }
LABEL_7:
    CFRetain(Value);
    uint64_t v5 = 0;
    goto LABEL_9;
  }
  Value = CFDictionaryGetValue(v2, @"BTBF");
  *a1 = Value;
  if (Value) {
    goto LABEL_7;
  }
LABEL_8:
  uint64_t v5 = 131;
LABEL_9:
  if (v3) {
    CFRelease(v3);
  }
  return v5;
}

uint64_t sub_1004E524C(UInt8 **a1, _WORD *a2)
{
  CFDataRef theData = 0;
  CFTypeRef cf = 0;
  int v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Loading calibration of FATP stage", buf, 2u);
  }
  if (!sub_1004E5198((const void **)&theData)) {
    goto LABEL_12;
  }
  uint64_t v5 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "FATP stage calibration not found, looking for Golden calibration from SMT", buf, 2u);
  }
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v6 = sub_1004E5198((const void **)&theData);
  if (v6)
  {
    uint64_t v7 = v6;
    io_object_t v8 = (__CFError *)cf;
    if (cf)
    {
      CFDataRef v9 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        CFIndex Code = CFErrorGetCode(v8);
        *(_DWORD *)long long buf = 134217984;
        CFIndex v19 = Code;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Loading FDR data got error %ld", buf, 0xCu);
      }
    }
  }
  else
  {
LABEL_12:
    CFIndex Length = CFDataGetLength(theData);
    CFIndex v12 = Length;
    if (Length)
    {
      CFIndex v13 = (UInt8 *)malloc_type_malloc(Length, 0x100004077774924uLL);
      *a1 = v13;
      v20.location = 0;
      v20.size_t length = v12;
      CFDataGetBytes(theData, v20, v13);
      uint64_t v14 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134217984;
        CFIndex v19 = v12;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "btbf length %ld", buf, 0xCu);
      }
    }
    uint64_t v7 = 0;
    *a2 = v12;
  }
  if (theData) {
    CFRelease(theData);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v7;
}

uint64_t sub_1004E5480(uint64_t a1, _WORD *a2)
{
  v14[0] = 0;
  v14[1] = 0;
  uint64_t v15 = 0;
  int v13 = 0;
  int v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Looking for fail safe calibration file", buf, 2u);
  }
  uint64_t v5 = sub_10003FFD4();
  sub_10004191C(__p, ".msf");
  uint64_t v6 = (*(uint64_t (**)(uint64_t, void **, uint64_t, int *, void **))(*(void *)v5 + 408))(v5, __p, a1, &v13, v14);
  uint64_t v7 = v6;
  if (v11 < 0)
  {
    operator delete(__p[0]);
    if (v7) {
      goto LABEL_5;
    }
  }
  else if (v6)
  {
LABEL_5:
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10077247C();
    }
    uint64_t v7 = 131;
    goto LABEL_11;
  }
  *a2 = v13;
  io_object_t v8 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Found fail safe calibration file", buf, 2u);
    uint64_t v7 = 0;
  }
LABEL_11:
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[0]);
  }
  return v7;
}

void sub_1004E55FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004E5630(char *a1, uint64_t a2, unsigned int a3)
{
  unsigned int v4 = a2;
  uint64_t v5 = a1;
  size_t v6 = a3;
  __chkstk_darwin(a1, a2);
  io_object_t v8 = &buf[-v7];
  bzero(&buf[-v7], v6);
  CFDataRef v9 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    unsigned int v22 = v4;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Calibration/Regulatory data size %d", buf, 8u);
  }
  int v10 = v4 % a3;
  if ((((v4 / a3) - ((unsigned __int16)(v4 % a3) == 0)) & 0x80) != 0) {
    return 1;
  }
  char v11 = v4 / a3 - ((unsigned __int16)(v4 % a3) == 0);
  size_t v12 = (unsigned __int16)(v4 % a3);
  size_t v13 = v6 - (unsigned __int16)v10;
  uint64_t v14 = &v8[(unsigned __int16)v10];
  while (1)
  {
    size_t v15 = v6;
    if (!v11)
    {
      bzero(v14, v13);
      size_t v15 = v12;
    }
    memcpy(v8, v5, v15);
    uint64_t v16 = *(void *)sub_10003FB34();
    uint64_t v17 = a3 == 230 ? (*(uint64_t (**)(void))(v16 + 3600))() : (*(uint64_t (**)(void))(v16 + 3616))();
    uint64_t v18 = v17;
    if (v17) {
      break;
    }
    int v19 = v11--;
    v5 += v6;
    if (v19 < 1) {
      return 0;
    }
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
    sub_1007724B0();
  }
  return v18;
}

uint64_t sub_1004E5858(uint64_t a1)
{
  CFDictionaryRef v2 = (void *)CFPreferencesCopyAppValue(@"GlobalAllowSoundProfile", @"com.apple.BTServer");
  unsigned __int8 v3 = 1;
  *(unsigned char *)(a1 + 456) = 1;
  if (v2)
  {
    if ([@"on" isEqualToString:v2]) {
      unsigned __int8 v3 = 1;
    }
    else {
      unsigned __int8 v3 = 2;
    }
    *(unsigned char *)(a1 + 456) = v3;
  }

  return v3;
}

void sub_1004E58CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1004E58DC(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 456) = a2;
  unsigned __int8 v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Spatial Spatial Profile Global Allowed Written:  %d", (uint8_t *)v6, 8u);
  }
  if (a2 == 1) {
    CFStringRef v4 = @"on";
  }
  else {
    CFStringRef v4 = @"off";
  }
  CFPreferencesSetAppValue(@"GlobalAllowSoundProfile", v4, @"com.apple.BTServer");
  return CFPreferencesAppSynchronize(@"com.apple.BTServer");
}

uint64_t sub_1004E59C0(uint64_t a1, int a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 392);
  if (*(unsigned __int8 *)(a1 + 456) != a2) {
    sub_1004E58DC(a1, a2);
  }
  return sub_10003AFB4((uint64_t)v5);
}

void sub_1004E5A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004E5A30(uint64_t a1)
{
  CFDictionaryRef v2 = (void *)CFPreferencesCopyAppValue(@"GlobalAllowSpatial", @"com.apple.BTServer");
  if (v2)
  {
    if ([@"on" isEqualToString:v2]) {
      uint64_t v3 = 1;
    }
    else {
      uint64_t v3 = 2;
    }
    *(unsigned char *)(a1 + 384) = v3;
  }
  else
  {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 384);
  }

  return v3;
}

void sub_1004E5AA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1004E5AB8(uint64_t a1, int a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 392);
  if (*(unsigned __int8 *)(a1 + 384) != a2) {
    sub_1004E5B28(a1, a2);
  }
  return sub_10003AFB4((uint64_t)v5);
}

void sub_1004E5B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004E5B28(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 384) = a2;
  uint64_t v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Spatial Audio Global Allowed Written:  %d", (uint8_t *)v6, 8u);
  }
  if (a2 == 1) {
    CFStringRef v4 = @"on";
  }
  else {
    CFStringRef v4 = @"off";
  }
  CFPreferencesSetAppValue(@"GlobalAllowSpatial", v4, @"com.apple.BTServer");
  return CFPreferencesAppSynchronize(@"com.apple.BTServer");
}

void sub_1004E5C0C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  io_object_t v8 = qword_100A19E50;
  if (v7)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412802;
      id v17 = v7;
      __int16 v18 = 1024;
      int v19 = a3;
      __int16 v20 = 1024;
      int v21 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "StackManager setSpatialModeWithBundleID：%@, mode:%u, headtrack:%u", buf, 0x18u);
    }
    if (!*(void *)(a1 + 464))
    {
      uint64_t v9 = sub_1004E5DF8(a1);
      int v10 = *(void **)(a1 + 464);
      *(void *)(a1 + 464) = v9;
    }
    char v11 = +[NSNumber numberWithBool:a4, @"kCBMsgArgParamSpatialHeadTracking"];
    v14[1] = @"kCBMsgArgParamSpatialMode";
    v15[0] = v11;
    size_t v12 = +[NSNumber numberWithUnsignedInt:a3];
    v15[1] = v12;
    size_t v13 = +[NSDictionary dictionaryWithObjects:v15 forKeys:v14 count:2];

    [*(id *)(a1 + 464) setObject:v13 forKey:v7];
    sub_1004E6464(a1, *(void **)(a1 + 464));
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
  {
    sub_100772518();
  }
}

void sub_1004E5DB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1004E5DF8(uint64_t a1)
{
  v47[0] = 0;
  v47[1] = 0;
  sub_10003AED0((uint64_t)v47, a1 + 392);
  uint64_t v1 = *(void **)(a1 + 464);
  if (v1)
  {
    id v2 = v1;
    goto LABEL_35;
  }
  long long v33 = (void *)CFPreferencesCopyAppValue(@"SpatialModeDict", @"com.apple.BTServer");
  id v32 = [v33 mutableCopy];
  if (v32)
  {
    id v36 = objc_alloc_init((Class)NSMutableDictionary);
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    id v3 = v32;
    id v4 = [v3 countByEnumeratingWithState:&v43 objects:v55 count:16];
    if (!v4)
    {
      char v35 = 0;
      goto LABEL_24;
    }
    char v35 = 0;
    uint64_t v37 = *(void *)v44;
    while (1)
    {
      id v38 = v4;
      for (uint64_t i = 0; i != v38; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v44 != v37) {
          objc_enumerationMutation(v3);
        }
        uint64_t v6 = *(void *)(*((void *)&v43 + 1) + 8 * i);
        id v7 = [v3 objectForKeyedSubscript:v6];
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {

LABEL_12:
          int v10 = qword_100A19E50;
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
          {
            char v11 = [v3 objectForKeyedSubscript:v6];
            size_t v12 = [v11 objectForKeyedSubscript:@"kCBMsgArgParamSpatialMode"];
            unsigned int v13 = [v12 unsignedIntValue];
            uint64_t v14 = [v3 objectForKeyedSubscript:v6];
            size_t v15 = [v14 objectForKeyedSubscript:@"kCBMsgArgParamSpatialHeadTracking"];
            unsigned int v16 = [v15 BOOLValue];
            *(_DWORD *)long long buf = 138412802;
            uint64_t v50 = v6;
            __int16 v51 = 1024;
            unsigned int v52 = v13;
            __int16 v53 = 1024;
            unsigned int v54 = v16;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "StackManager Get Spatial Mode Bundle ID Dict, key: %@, value: %u headtrack: %u", buf, 0x18u);
          }
          continue;
        }
        io_object_t v8 = [v3 objectForKeyedSubscript:v6];
        objc_opt_class();
        char isKindOfClass = objc_opt_isKindOfClass();

        if (isKindOfClass) {
          goto LABEL_12;
        }
        id v17 = objc_alloc_init((Class)NSMutableDictionary);
        __int16 v18 = [v3 objectForKeyedSubscript:v6];
        int v19 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [v18 unsignedIntValue]);

        [v17 setObject:v19 forKey:@"kCBMsgArgParamSpatialMode"];
        __int16 v20 = +[NSNumber numberWithBool:1];
        [v17 setObject:v20 forKey:@"kCBMsgArgParamSpatialHeadTracking"];
        [v36 setObject:v17 forKey:v6];
        int v21 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v22 = [v3 objectForKeyedSubscript:v6];
          unsigned int v23 = [v22 unsignedIntValue];
          *(_DWORD *)long long buf = 138412546;
          uint64_t v50 = v6;
          __int16 v51 = 1024;
          unsigned int v52 = v23;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "StackManager Converting Bundle ID Dict, key: %@, value: %u", buf, 0x12u);
        }
        char v35 = 1;
      }
      id v4 = [v3 countByEnumeratingWithState:&v43 objects:v55 count:16];
      if (!v4)
      {
LABEL_24:

        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        id v25 = v36;
        id v26 = [v25 countByEnumeratingWithState:&v39 objects:v48 count:16];
        if (v26)
        {
          uint64_t v27 = *(void *)v40;
          do
          {
            for (uint64_t j = 0; j != v26; uint64_t j = (char *)j + 1)
            {
              if (*(void *)v40 != v27) {
                objc_enumerationMutation(v25);
              }
              uint64_t v29 = *(void *)(*((void *)&v39 + 1) + 8 * (void)j);
              [v3 removeObjectForKey:v29];
              long long v30 = [v25 objectForKeyedSubscript:v29];
              [v3 setObject:v30 forKey:v29];
            }
            id v26 = [v25 countByEnumeratingWithState:&v39 objects:v48 count:16];
          }
          while (v26);
        }

        if (v35) {
          sub_1004E6464(a1, v3);
        }
        id v2 = v3;

        goto LABEL_34;
      }
    }
  }
  long long v24 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "StackManager create a new dict", buf, 2u);
  }
  id v2 = objc_alloc_init((Class)NSMutableDictionary);
LABEL_34:

LABEL_35:
  sub_10003AFB4((uint64_t)v47);

  return v2;
}

void sub_1004E634C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  sub_10003AFB4((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_1004E6464(uint64_t a1, void *a2)
{
  id v3 = a2;
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1 + 392);
  CFPreferencesSetAppValue(@"SpatialModeDict", v3, @"com.apple.BTServer");
  CFPreferencesAppSynchronize(@"com.apple.BTServer");
  sub_10003AFB4((uint64_t)v4);
}

void sub_1004E64D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004E64F4(uint64_t a1, void *a2, unsigned char *a3, int *a4)
{
  id v7 = a2;
  if (!v7)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_1007725E8();
    }
    *a3 = 1;
    *a4 = 1;
  }
  io_object_t v8 = *(void **)(a1 + 464);
  if (!v8)
  {
    uint64_t v9 = sub_1004E5DF8(a1);
    int v10 = *(void **)(a1 + 464);
    *(void *)(a1 + 464) = v9;

    io_object_t v8 = *(void **)(a1 + 464);
  }
  char v11 = [v8 objectForKey:v7];
  size_t v12 = v11;
  if (v11)
  {
    unsigned int v13 = [v11 objectForKey:@"kCBMsgArgParamSpatialMode"];
    uint64_t v14 = v13;
    if (v13)
    {
      *a4 = [v13 unsignedIntValue];
      size_t v15 = [v12 objectForKey:@"kCBMsgArgParamSpatialHeadTracking"];
      unsigned int v16 = v15;
      if (v15)
      {
        *a3 = [v15 BOOLValue];
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
          sub_1007725B4();
        }
        *a3 = 1;
        *a4 = 1;
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_100772580();
      }
      if ([v7 caseInsensitiveCompare:@"com.apple.facetime"])
      {
        int v18 = 1;
        *a3 = 1;
      }
      else
      {
        *a3 = 0;
        *a3 = _os_feature_enabled_impl();
        int v18 = 2;
      }
      *a4 = v18;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10077254C();
    }
    if ([v7 caseInsensitiveCompare:@"com.apple.facetime"])
    {
      int v17 = 1;
      *a3 = 1;
    }
    else
    {
      *a3 = 0;
      *a3 = _os_feature_enabled_impl();
      int v17 = 2;
    }
    *a4 = v17;
  }
  int v19 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v20 = *a4;
    int v21 = *a3;
    int v22 = 138412802;
    id v23 = v7;
    __int16 v24 = 1024;
    int v25 = v20;
    __int16 v26 = 1024;
    int v27 = v21;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "StackManager Get Spatial Mode with Bundle ID: %@=>%u,%u", (uint8_t *)&v22, 0x18u);
  }
}

void sub_1004E6798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1004E67E0(uint64_t a1)
{
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 472);
  uint64_t v2 = *(unsigned int *)(a1 + 536);
  if (v2)
  {
    id v3 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      int v11 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Default airplane mode denylist state is %d", buf, 8u);
      uint64_t v2 = *(unsigned int *)(a1 + 536);
    }
    goto LABEL_13;
  }
  id v4 = (void *)CFPreferencesCopyAppValue(@"defaultAirplaneModeDenylistState", @"com.apple.BTServer");
  if (v4)
  {
    if ([@"on" isEqualToString:v4])
    {
      int v5 = 2;
LABEL_9:
      *(_DWORD *)(a1 + 536) = v5;
      goto LABEL_10;
    }
    if ([@"off" isEqualToString:v4])
    {
      int v5 = 1;
      goto LABEL_9;
    }
  }
LABEL_10:
  uint64_t v6 = qword_100A19E50;
  BOOL v7 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT);
  uint64_t v2 = *(unsigned int *)(a1 + 536);
  if (v7)
  {
    *(_DWORD *)long long buf = 67109120;
    int v11 = v2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Read from CFPRefs. Default airplane mode grant list state is %d", buf, 8u);
    uint64_t v2 = *(unsigned int *)(a1 + 536);
  }

LABEL_13:
  sub_10003AFB4((uint64_t)v9);
  return v2;
}

void sub_1004E6968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1004E6990(uint64_t a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B20D0);
  }
  long long v3 = *(_OWORD *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 48);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1004E6B5C;
  v2[3] = &unk_1009B1EF0;
  sub_1004E6A48((uint64_t)off_1009F8068 + 96, v2);
}

void sub_1004E6A48(uint64_t a1, void *a2)
{
  long long v3 = a2;
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  sub_1004EB4D0((char *)&v10, *(void **)(a1 + 8), *(void **)(a1 + 16), (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 4);
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
  uint64_t v4 = v10;
  uint64_t v5 = v11;
  if (v10 != v11)
  {
    while (1)
    {
      io_object_t v8 = 0;
      uint64_t v9 = 0;
      uint64_t v6 = *(std::__shared_weak_count **)(v4 + 8);
      if (v6) {
        break;
      }
LABEL_10:
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_11;
      }
    }
    BOOL v7 = std::__shared_weak_count::lock(v6);
    uint64_t v9 = v7;
    if (v7)
    {
      io_object_t v8 = *(void ***)v4;
      if (!v8)
      {
LABEL_8:
        if (v7) {
          sub_10008A294(v7);
        }
        goto LABEL_10;
      }
    }
    else if (!v8)
    {
      goto LABEL_8;
    }
    v3[2](v3, &v8);
    BOOL v7 = v9;
    goto LABEL_8;
  }
LABEL_11:
  io_object_t v8 = (void **)&v10;
  sub_1004E98C8(&v8);
}

void sub_1004E6B28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1004E6B5C(uint64_t a1, void *a2)
{
  return (**(uint64_t (***)(void, void, void, void))*a2)(*a2, *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned int *)(a1 + 48));
}

void sub_1004E6B90(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(a1 + 64) == 3703)
  {
    buf[0] = 0;
    sub_10001B8E0(buf);
    sub_10011631C("Host Initiated Core Dump");
    sub_10001B910(buf);
    sub_10001B8AC(buf);
  }
  uint64_t v3 = sub_100017768();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v3 + 8))(v3))
  {
LABEL_22:
    uint64_t v9 = sub_100017768();
    uint64_t v10 = *(unsigned int *)(a1 + 64);
    uint64_t v11 = (char *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0)
    {
      if (*(void *)(a1 + 48))
      {
        uint64_t v12 = *(char **)v11;
LABEL_27:
        if ((*(unsigned int (**)(uint64_t, uint64_t, char *))(*(void *)v9 + 512))(v9, v10, v12))
        {
          uint64_t v14 = sub_100017768();
          if (*(char *)(a1 + 63) < 0) {
            uint64_t v11 = *(char **)v11;
          }
          uint64_t v15 = *(unsigned int *)(a1 + 64);
          sub_10004191C(v34, v11);
          sub_1005C8AF4(v14, v15, (uint64_t)v34, 1);
        }
        if ((sub_10010D1C4() & 1) == 0)
        {
          uint64_t v19 = sub_100017768();
          if (*(char *)(a1 + 63) < 0) {
            uint64_t v11 = *(char **)v11;
          }
          uint64_t v20 = *(unsigned int *)(a1 + 64);
          sub_10004191C(v33, v11);
          sub_1005C8AF4(v19, v20, (uint64_t)v33, 1);
        }
        *(_DWORD *)(v2 + 352) = *(_DWORD *)(a1 + 64);
        std::string::operator=((std::string *)(v2 + 360), (const std::string *)(a1 + 40));
        uint64_t v16 = sub_10003FB34();
        if ((*(unsigned int (**)(uint64_t))(*(void *)v16 + 1208))(v16))
        {
          uint64_t v21 = sub_100017768();
          if (*(char *)(a1 + 63) < 0) {
            uint64_t v11 = *(char **)v11;
          }
          uint64_t v22 = *(unsigned int *)(a1 + 64);
          sub_10004191C(v32, v11);
          sub_1005C8AF4(v21, v22, (uint64_t)v32, 1);
        }
        int v17 = 0;
        while (1)
        {
          int v18 = v17;
          sleep(0xAu);
          int v17 = sub_10010D220();
          if (v17 == v18) {
            break;
          }
          if ((sub_100023020() & 1) == 0) {
            goto LABEL_49;
          }
        }
        int v17 = v18;
LABEL_49:
        __int16 v24 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 67109632;
          *(_DWORD *)&uint8_t buf[4] = v17;
          LOWORD(v4sub_1004C2140(qword_100A19B68, 0) = 1024;
          *(_DWORD *)((char *)&v40 + 2) = v18;
          HIWORD(v4sub_1004C2140(qword_100A19B68, 0) = 1024;
          LODWORD(v41) = 10;
          _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "coreDumpPacketCounter:%d coreDumpLastPacketCounter:%d no change detected for %d seconds, aborting", buf, 0x14u);
        }
        uint64_t v25 = sub_100017768();
        uint64_t v26 = *(unsigned int *)(a1 + 64);
        if (*(char *)(a1 + 63) >= 0) {
          size_t v27 = *(unsigned __int8 *)(a1 + 63);
        }
        else {
          size_t v27 = *(void *)(a1 + 48);
        }
        uint64_t v40 = 0;
        uint64_t v41 = 0;
        *(void *)long long buf = 0;
        long long v28 = buf;
        sub_1002EA240((uint64_t)buf, v27 + 21);
        if (v41 < 0) {
          long long v28 = *(uint8_t **)buf;
        }
        if (v27)
        {
          if (*(char *)(a1 + 63) >= 0) {
            uint64_t v29 = (const void *)(a1 + 40);
          }
          else {
            uint64_t v29 = *(const void **)(a1 + 40);
          }
          memmove(v28, v29, v27);
        }
        strcpy((char *)&v28[v27], " BD_COREDUMP_TOO_LONG");
        if (v41 >= 0) {
          long long v30 = (char *)buf;
        }
        else {
          long long v30 = *(char **)buf;
        }
        sub_10004191C(v31, v30);
        sub_1005C8AF4(v25, v26, (uint64_t)v31, 1);
      }
    }
    else
    {
      uint64_t v12 = (char *)(a1 + 40);
      if (*(unsigned char *)(a1 + 63)) {
        goto LABEL_27;
      }
    }
    sub_10025E0A8(*(unsigned int *)(a1 + 64));
    uint64_t v12 = v13;
    goto LABEL_27;
  }
  uint64_t v37 = 0;
  v38[0] = 0;
  v38[1] = 0;
  sub_10004191C(buf, "Firmware crash detected :(pc = 0xc6dce, lr = 0xc6de5, bcsReason = 0x0, trapReason = 0x5)");
  sub_10004191C(v42, "Firmware crash detected :(pc = 0x82c, lr = 0x7bf, bcsReason = 0x0, trapReason = 0x25)");
  sub_10004191C(v43, "pci error: kACIPCEnterLowPowerFailed: (0x2, 0x0)");
  sub_10004191C(v44, "chip boot failure");
  sub_10004191C(v45, "BD_VSC_LE_META_ADD_IRK_TO_LIST");
  sub_1003B9544((uint64_t)&v37, (const void **)buf, 5);
  for (uint64_t i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v45[i + 2]) < 0) {
      operator delete((void *)v45[i]);
    }
  }
  if (v38 == (char **)sub_10003156C((uint64_t)&v37, (const void **)(a1 + 40)))
  {
    int v5 = *(_DWORD *)(a1 + 64);
    if (v5 == 133)
    {
      if (qword_1009FB088 != -1) {
        dispatch_once(&qword_1009FB088, &stru_1009B2230);
      }
      uint64_t v23 = qword_1009FB080;
      sub_10004191C(buf, "FW Crash");
      sub_10004191C(__p, "OI_STATUS_ALREADY_CONNECTED");
      sub_1004B7DA8(0.0, v23, (uint64_t *)buf, (uint64_t *)__p);
    }
    else
    {
      if (v5 != 652)
      {
LABEL_21:
        sub_10004BA28((uint64_t)&v37, v38[0]);
        goto LABEL_22;
      }
      if (qword_1009FB088 != -1) {
        dispatch_once(&qword_1009FB088, &stru_1009B2230);
      }
      uint64_t v6 = qword_1009FB080;
      sub_10004191C(buf, "FW Crash");
      sub_10004191C(__p, "OI_HCI_HW_ERROR_SPMI_TIMEOUT");
      sub_1004B7DA8(0.0, v6, (uint64_t *)buf, (uint64_t *)__p);
    }
    if (v36 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    BOOL v7 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Targetted FW Crash signature found, filing ABC Snapshot", buf, 2u);
    }
    if (qword_1009FB088 != -1) {
      dispatch_once(&qword_1009FB088, &stru_1009B2230);
    }
    uint64_t v8 = qword_1009FB080;
    sub_10004191C(buf, "FW Crash");
    sub_1004B7DA8(60.0, v8, (uint64_t *)buf, (uint64_t *)(a1 + 40));
  }
  if (SHIBYTE(v41) < 0) {
    operator delete(*(void **)buf);
  }
  goto LABEL_21;
}

void sub_1004E7174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1004E72B0(uint64_t a1, uint64_t a2)
{
  float result = (void *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0) {
    return sub_10003B098(result, *(void **)(a2 + 40), *(void *)(a2 + 48));
  }
  long long v3 = *(_OWORD *)(a2 + 40);
  result[2] = *(void *)(a2 + 56);
  *(_OWORD *)float result = v3;
  return result;
}

void sub_1004E72E0(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

void sub_1004E72F4(uint64_t a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B20D0);
  }
  sub_1004E48E0((uint64_t)off_1009F8068, *(unsigned __int8 *)(a1 + 32));
}

uint64_t sub_1004E7340(uint64_t a1, unsigned __int8 *a2)
{
  v24[0] = 0;
  v24[1] = 0;
  sub_10003AED0((uint64_t)v24, a1 + 128);
  if (*(unsigned char *)(a1 + 60))
  {
    sub_10003AFE8((uint64_t)v24);
    v23[0] = 0;
    v23[1] = 0;
    sub_10003AED0((uint64_t)v23, a1 + 208);
    uint64_t v4 = (unsigned __int8 **)(a1 + 280);
    uint64_t v5 = a2[23];
    if ((v5 & 0x80u) == 0) {
      uint64_t v6 = a2[23];
    }
    else {
      uint64_t v6 = *((void *)a2 + 1);
    }
    uint64_t v7 = *(unsigned __int8 *)(a1 + 303);
    int v8 = (char)v7;
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = *(void *)(a1 + 288);
    }
    if (v6 == v7)
    {
      if (v8 >= 0) {
        uint64_t v9 = (unsigned __int8 *)(a1 + 280);
      }
      else {
        uint64_t v9 = *v4;
      }
      if ((v5 & 0x80) == 0)
      {
        if (a2[23])
        {
          uint64_t v10 = a2;
          while (*v10 == *v9)
          {
            ++v10;
            ++v9;
            if (!--v5) {
              goto LABEL_32;
            }
          }
          goto LABEL_20;
        }
LABEL_32:
        sub_10003AFB4((uint64_t)v23);
        return sub_10003AFB4((uint64_t)v24);
      }
      if (!memcmp(*(const void **)a2, v9, *((void *)a2 + 1))) {
        goto LABEL_32;
      }
    }
LABEL_20:
    sub_10003AFE8((uint64_t)v23);
    if ((char)a2[23] < 0) {
      a2 = *(unsigned __int8 **)a2;
    }
    strlcpy("iOS", (const char *)a2, 0x82uLL);
    char v22 = 0;
    sub_10001B8E0(&v22);
    byte_100A19D25 = 1;
    int v17 = sub_10018EFB8((uint64_t)sub_1004E1CC0, (uint64_t)"iOS", v11, v12, v13, v14, v15, v16);
    sub_10001B910(&v22);
    if (v17)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_10077261C();
      }
    }
    else if (!sub_1004E1D34(a1))
    {
      uint64_t v18 = sub_1004AF8EC();
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472;
      void v21[2] = sub_1004E764C;
      void v21[3] = &unk_100997528;
      v21[4] = a1;
      sub_100013018(v18, v21);
      sub_10003AF00((uint64_t)v23);
      std::string::assign((std::string *)(a1 + 280), "iOS");
      uint64_t v19 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a1 + 303) < 0) {
          uint64_t v4 = (unsigned __int8 **)*v4;
        }
        *(_DWORD *)long long buf = 136446210;
        uint64_t v26 = v4;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Local device name changed to \"%{public}s\"", buf, 0xCu);
      }
      sub_10003AFE8((uint64_t)v23);
    }
    sub_10001B8AC(&v22);
    goto LABEL_32;
  }
  *(unsigned char *)(a1 + 193) = 1;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
    sub_100771F60();
  }
  return sub_10003AFB4((uint64_t)v24);
}

void sub_1004E7608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_10003AFB4((uint64_t)va);
  sub_10003AFB4((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004E764C(uint64_t a1)
{
  return sub_1004E3254(*(void *)(a1 + 32));
}

uint64_t sub_1004E7654(uint64_t a1, unsigned __int8 *a2)
{
  return sub_1004E7340(a1 - 8, a2);
}

uint64_t sub_1004E765C(int a1, uint64_t a2, char a3)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, (uint64_t)&unk_100A19C80);
  dword_100A19D20 = a1;
  byte_100A19D24 = a3;
  byte_100A19D25 = 0;
  sub_100026264(&stru_100A19CC0);
  return sub_10003AFB4((uint64_t)v6);
}

void sub_1004E76C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004E76DC(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t result = 1;
  if (a2 && a3)
  {
    uint64_t v6 = a2;
    char v13 = 0;
    sub_10001B8E0(&v13);
    byte_100A19D25 = 1;
    LODWORD(v6) = sub_10018F028((uint64_t)sub_1004E765C, v6, v7, v8, v9, v10, v11, v12);
    sub_10001B910(&v13);
    if (v6)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_1007726EC();
      }
    }
    else
    {
      if (!sub_1004E1D34(a1))
      {
        *a3 = byte_100A19D24;
        sub_10001B8AC(&v13);
        return 0;
      }
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_100772684();
      }
    }
    sub_10001B8AC(&v13);
    return 1;
  }
  return result;
}

void sub_1004E77F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_1004E7804(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = 0;
  long long v26 = 0u;
  memset(v25, 0, sizeof(v25));
  long long v23 = 0u;
  *(_OWORD *)__int16 v24 = 0u;
  long long v21 = 0u;
  *(_OWORD *)char v22 = 0u;
  long long v19 = 0u;
  *(_OWORD *)uint64_t v20 = 0u;
  sub_1006161E0((uint64_t)&v19 + 1);
  BYTE2(v20[0]) = 0;
  BYTE4(v20[0]) = 0;
  BYTE2(v22[0]) = 0;
  BYTE4(v22[0]) = 0;
  DWORD1(v25[1]) = 0;
  long long v21 = 0uLL;
  v20[1] = 0;
  LOBYTE(v22[0]) = 0;
  long long v23 = 0uLL;
  v22[1] = 0;
  LOBYTE(v24[0]) = 0;
  memset(v25, 0, 19);
  v24[1] = 0;
  BYTE8(v25[1]) = 1;
  BYTE2(v27) = 0;
  *(void *)((char *)&v25[1] + 14) = 0;
  *(void *)((char *)&v25[1] + 9) = 0;
  long long v26 = 0uLL;
  *((void *)&v25[2] + 1) = 0;
  LOBYTE(v27) = 0;
  int v15 = 0;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009B2170);
  }
  *(_DWORD *)long long buf = *(_DWORD *)a2;
  *(_WORD *)&uint8_t buf[4] = *(_WORD *)(a2 + 4);
  uint64_t v3 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)buf, 1);
  if (sub_1004783B8(v3, (uint64_t)&v19))
  {
    if (BYTE5(v26))
    {
      uint64_t v4 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 68157954;
        *(_DWORD *)&uint8_t buf[4] = 6;
        *(_WORD *)&uint8_t buf[8] = 2096;
        *(void *)&buf[10] = a2;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Invoking roleswitch disable for %{bluetooth:BD_ADDR}.6P", buf, 0x12u);
      }
      if (sub_1001876F0(v3 + 128, 1) && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_10077288C();
      }
    }
    if (BYTE6(v26))
    {
      uint64_t v5 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 141558531;
        *(void *)&uint8_t buf[4] = 1752392040;
        *(_WORD *)&unsigned char buf[12] = 1041;
        *(_DWORD *)&unsigned char buf[14] = 6;
        __int16 v17 = 2097;
        uint64_t v18 = a2;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting extended LSTO for %{private,bluetooth:BD_ADDR,mask.hash}.6P to 10000ms", buf, 0x1Cu);
      }
      if (sub_10018768C(v3 + 128, 10000)
        && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
      {
        sub_10077295C();
      }
    }
    if (BYTE1(v27))
    {
      uint64_t v6 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 68157954;
        *(_DWORD *)&uint8_t buf[4] = 6;
        *(_WORD *)&uint8_t buf[8] = 2096;
        *(void *)&buf[10] = a2;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Invoking reduced QoS Latency for %{bluetooth:BD_ADDR}.6P", buf, 0x12u);
      }
      if (sub_100187740(v3 + 128, 1) && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_1007728F4();
      }
    }
  }
  sub_100475F84(v3, (uint64_t)buf);
  uint64_t v7 = BYTE3(v18);
  if ((v18 & 0x80000000) != 0) {
    uint64_t v7 = *(void *)&buf[8];
  }
  if (v7)
  {
    sub_100475F84(v3, (uint64_t)&__p);
    BOOL v8 = std::string::compare(&__p, "INTEGRATED HANDSFREE") == 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((v18 & 0x80000000) == 0)
    {
LABEL_28:
      if (!v8) {
        goto LABEL_37;
      }
      goto LABEL_32;
    }
  }
  else
  {
    BOOL v8 = 0;
    if ((v18 & 0x80000000) == 0) {
      goto LABEL_28;
    }
  }
  operator delete(*(void **)buf);
  if (!v8) {
    goto LABEL_37;
  }
LABEL_32:
  uint64_t v9 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68157954;
    *(_DWORD *)&uint8_t buf[4] = 6;
    *(_WORD *)&uint8_t buf[8] = 2096;
    *(void *)&buf[10] = a2;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Name matched, invoking roleswitch disable for %{bluetooth:BD_ADDR}.6P", buf, 0x12u);
  }
  if (sub_1001876F0(v3 + 128, 1) && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
    sub_10077288C();
  }
LABEL_37:
  if (qword_1009F8090 != -1) {
    dispatch_once(&qword_1009F8090, &stru_1009B2110);
  }
  int v10 = sub_1004D6124((uint64_t)off_1009F8088, v3);
  uint64_t v11 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68158210;
    *(_DWORD *)&uint8_t buf[4] = 6;
    *(_WORD *)&uint8_t buf[8] = 2096;
    *(void *)&buf[10] = a2;
    __int16 v17 = 1024;
    LODWORD(v18) = v10;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Device %{bluetooth:BD_ADDR}.6P services are %x", buf, 0x18u);
  }
  if ((v10 & 0x20080) != 0
    && sub_10017E8E0(a2, 1)
    && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
  {
    sub_100772824();
  }
  if (sub_100478AF4(v3))
  {
    sub_100476250(v3, &v15);
    int v12 = v15 & 0x1F00;
    if ((v12 == 512 || v12 == 256)
      && sub_10017EAFC(a2, 1)
      && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
    {
      sub_1007727BC();
    }
  }
  if (sub_100476054(v3) == 26
    && sub_1004776C0(v3)
    && sub_10017EC08(a2, 2)
    && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
  {
    sub_100772754();
  }
  if (SHIBYTE(v25[0]) < 0) {
    operator delete(v24[1]);
  }
  if (SHIBYTE(v23) < 0) {
    operator delete(v22[1]);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete(v20[1]);
  }
  return nullsub_95((char *)&v19 + 1);
}

void sub_1004E7E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_100276384((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_1004E7E70()
{
  char v2 = 0;
  sub_10001B8E0(&v2);
  uint64_t v0 = sub_100183A34();
  sub_10001B8AC(&v2);
  return v0;
}

void sub_1004E7EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

unsigned char *sub_1004E7ECC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 202))
  {
    if (*(_DWORD *)(sub_10003FB34() + 712))
    {
      if (*(_DWORD *)(sub_10003FB34() + 712) <= 0x7CFu && *(_DWORD *)(sub_10003FB34() + 712) <= 0x12u)
      {
        uint64_t v1 = sub_10003FB34();
        if ((*(unsigned int (**)(uint64_t, void))(*(void *)v1 + 1264))(v1, 0))
        {
          char v8 = 0;
          sub_10001B8E0(&v8);
          sub_10018F434();
          sub_10001B910(&v8);
          sub_10001B8AC(&v8);
        }
      }
    }
  }
  if (qword_1009F8398 != -1) {
    dispatch_once(&qword_1009F8398, &stru_1009B2270);
  }
  sub_100508690((uint64_t)off_1009F8390, 3, 1u);
  char v7 = 0;
  sub_10001B8E0(&v7);
  int v2 = sub_100103CE4();
  sub_10001B910(&v7);
  uint64_t v3 = sub_10003FB34();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)v3 + 560))(v3, 0, 1);
  if (v2 == 118)
  {
    uint64_t v4 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Waiting for 'YOU MAY SLEEP'", v6, 2u);
    }
    sub_10010BDB0(500);
  }
  return sub_10001B8AC(&v7);
}

void sub_1004E806C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

unsigned char *sub_1004E808C(uint64_t a1)
{
  return sub_1004E7ECC(a1 - 16);
}

unsigned char *sub_1004E8094(uint64_t a1)
{
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  *(_OWORD *)__big = 0u;
  long long v17 = 0u;
  size_t v9 = 256;
  sysctlbyname("kern.wakereason", __big, &v9, 0, 0);
  if (strnstr(__big, "bluetooth", 0x100uLL)) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = strnstr(__big, "BT.Ou", 0x100uLL) != 0;
  }
  HIBYTE(v31) = 0;
  if (*(unsigned char *)(a1 + 202))
  {
    if (*(_DWORD *)(sub_10003FB34() + 712))
    {
      if (*(_DWORD *)(sub_10003FB34() + 712) <= 0x7CFu && *(_DWORD *)(sub_10003FB34() + 712) <= 0x12u)
      {
        uint64_t v3 = sub_10003FB34();
        if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v3 + 1264))(v3, 1))
        {
          buf[0] = 0;
          sub_10001B8E0(buf);
          sub_10018F434();
          sub_10001B910(buf);
          sub_10001B8AC(buf);
        }
      }
    }
  }
  char v8 = 0;
  sub_10001B8E0(&v8);
  sub_100103D0C(v2);
  sub_10001B910(&v8);
  uint64_t v4 = sub_10003FB34();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 560))(v4, 1, 1);
  if (v2)
  {
    int v5 = *sub_1001998DC(0);
    IOPMClaimSystemWakeEvent();
  }
  else
  {
    int v5 = 0;
  }
  uint64_t v6 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315650;
    uint64_t v11 = __big;
    __int16 v12 = 1024;
    BOOL v13 = v2;
    __int16 v14 = 1024;
    int v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "wakeReason:%s reasonWasBluetooth:%d controllerPacketType:%d", buf, 0x18u);
  }
  return sub_10001B8AC(&v8);
}

void sub_1004E8320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10001B8AC(va);
  _Unwind_Resume(a1);
}

unsigned char *sub_1004E8350(uint64_t a1)
{
  return sub_1004E8094(a1 - 16);
}

uint64_t sub_1004E8358(uint64_t a1, unsigned int a2, int a3)
{
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, a1 + 128);
  if (*(unsigned char *)(a1 + 60))
  {
    sub_10003AFE8((uint64_t)v11);
    uint64_t v6 = sub_1004AF8EC();
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_1004E8488;
    uint64_t v10[3] = &unk_100997528;
    void v10[4] = a1;
    sub_100013018(v6, v10);
    char v9 = 0;
    sub_10001B8E0(&v9);
    if (a3) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = 0;
    }
    sub_100188C08(v7);
    sub_10001B8AC(&v9);
  }
  else
  {
    *(unsigned char *)(a1 + 193) = 1;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_100771F60();
    }
  }
  return sub_10003AFB4((uint64_t)v11);
}

void sub_1004E8460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

uint64_t sub_1004E8488(uint64_t a1)
{
  return sub_1004E3254(*(void *)(a1 + 32));
}

uint64_t sub_1004E8490(uint64_t a1, unsigned int a2, int a3)
{
  return sub_1004E8358(a1 - 24, a2, a3);
}

uint64_t sub_1004E849C()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 1144);

  return v0();
}

uint64_t sub_1004E84FC(uint64_t a1)
{
  v8[0] = 0;
  v8[1] = 0;
  uint64_t v2 = sub_10003AED0((uint64_t)v8, a1 + 128);
  if (*(unsigned char *)(a1 + 60))
  {
    sub_10003AFE8(v2);
    uint64_t v3 = sub_1004AF8EC();
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    void v6[2] = sub_1004E85F8;
    void v6[3] = &unk_100997528;
    v6[4] = a1;
    sub_100013018(v3, v6);
  }
  else
  {
    uint64_t v4 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Ignoring CarPlay state change notification as stack is not ready", buf, 2u);
    }
  }
  return sub_10003AFB4((uint64_t)v8);
}

void sub_1004E85E4(_Unwind_Exception *a1)
{
  sub_10003AFB4(v1 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_1004E85F8(uint64_t a1)
{
  return sub_1004E3254(*(void *)(a1 + 32));
}

uint64_t sub_1004E8600(uint64_t a1)
{
  return sub_1004E84FC(a1 - 40);
}

uint64_t sub_1004E860C(uint64_t a1, char a2)
{
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_1009B2150);
  }
  sub_1004FAFB8((uint64_t)off_1009F8150, a2);
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 568);

  return v3();
}

uint64_t sub_1004E86B8(uint64_t a1, uint64_t a2, __int16 *a3)
{
  v25[0] = 0;
  v25[1] = 0;
  sub_10003AED0((uint64_t)v25, a1 + 128);
  long long v34 = 0u;
  long long v33 = 0u;
  long long v32 = 0u;
  long long v31 = 0u;
  long long v30 = 0u;
  long long v29 = 0u;
  uint64_t v5 = sub_10003FB34();
  if ((*(_DWORD *)(a1 + 56) | 2) == 2)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_100771F60();
    }
    uint64_t v6 = 111;
  }
  else
  {
    int v7 = *(_DWORD *)(v5 + 712);
    sub_10003AFE8((uint64_t)v25);
    if ((v7 - 2000) < 0x7D0 || (uint64_t v6 = 1, v7 != 6) && (v7 - 1) <= 0x7CE)
    {
      __int16 v26 = *a3;
      int v27 = *(_DWORD *)(a3 + 1);
      unsigned __int8 v28 = *((unsigned char *)a3 + 6);
      uint64_t v8 = v28;
      if (v28)
      {
        char v9 = a3 + 4;
        int v10 = 7;
        uint64_t v11 = v28;
        do
        {
          __int16 v12 = *v9++;
          *(__int16 *)((char *)&v26 + v1sub_1004C2140(qword_100A19B68, 0) = v12;
          v10 += 2;
          --v11;
        }
        while (v11);
        int v13 = 2 * v8 + 7;
        __int16 v14 = (char *)(a3 + 36);
        uint64_t v15 = v8;
        do
        {
          char v16 = *v14++;
          *((unsigned char *)&v26 + v13++) = v16;
          --v15;
        }
        while (v15);
      }
      char v24 = 0;
      sub_10001B8E0(&v24);
      int v22 = sub_10018F264(0, (3 * v8 + 7), (uint64_t)&v26, v17, v18, v19, v20, v21);
      sub_10001B910(&v24);
      sub_10001B8AC(&v24);
      uint64_t v6 = v22 != 0;
    }
  }
  sub_10003AFB4((uint64_t)v25);
  return v6;
}

void sub_1004E8870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004E88A0(uint64_t a1, uint64_t a2, __int16 *a3)
{
  v24[0] = 0;
  v24[1] = 0;
  sub_10003AED0((uint64_t)v24, a1 + 128);
  uint64_t v5 = sub_10003FB34();
  if ((*(_DWORD *)(a1 + 56) | 2) == 2)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_100771F60();
    }
    uint64_t v6 = 111;
  }
  else
  {
    int v8 = *(_DWORD *)(v5 + 712);
    sub_10003AFE8((uint64_t)v24);
    if ((v8 - 1) > 0xF9E)
    {
      uint64_t v6 = 1;
    }
    else
    {
      *(_OWORD *)std::string __p = 0u;
      long long v23 = 0u;
      sub_100053710((uint64_t)__p, 0);
      sub_10001195C((uint64_t)__p, *a3);
      sub_10001195C((uint64_t)__p, a3[1]);
      sub_10001195C((uint64_t)__p, a3[2]);
      sub_10001195C((uint64_t)__p, a3[3]);
      sub_10001195C((uint64_t)__p, a3[4]);
      sub_10001195C((uint64_t)__p, a3[5]);
      sub_10001195C((uint64_t)__p, a3[6]);
      sub_10001195C((uint64_t)__p, a3[7]);
      sub_10001195C((uint64_t)__p, a3[8]);
      sub_10001195C((uint64_t)__p, a3[9]);
      sub_10001195C((uint64_t)__p, a3[10]);
      sub_10001195C((uint64_t)__p, a3[11]);
      sub_10001195C((uint64_t)__p, a3[12]);
      sub_10001195C((uint64_t)__p, a3[13]);
      sub_10001195C((uint64_t)__p, a3[14]);
      char v21 = 0;
      sub_10001B8E0(&v21);
      sub_1000335D8(&v19, __p[1], v23 - (unint64_t)__p[1]);
      unsigned __int8 v9 = sub_100045F00((uint64_t)&v19);
      sub_1000335D8(&v17, __p[1], v23 - (unint64_t)__p[1]);
      uint64_t v10 = sub_10004A6E4((uint64_t)&v17);
      int v16 = sub_10018F298(0, v9, v10, v11, v12, v13, v14, v15);
      uint64_t v17 = &off_100998428;
      if (v18) {
        sub_1000368F4(v18);
      }
      uint64_t v19 = &off_100998428;
      if (v20) {
        sub_1000368F4(v20);
      }
      sub_10001B910(&v21);
      sub_10001B8AC(&v21);
      if (__p[1])
      {
        *(void **)&long long v23 = __p[1];
        operator delete(__p[1]);
      }
      uint64_t v6 = v16 != 0;
    }
  }
  sub_10003AFB4((uint64_t)v24);
  return v6;
}

void sub_1004E8AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20)
{
  sub_10001B8AC(&a17);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_10003AFB4(v20 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_1004E8B9C(uint64_t a1, uint64_t a2, char *a3)
{
  v15[0] = 0;
  v15[1] = 0;
  sub_10003AED0((uint64_t)v15, a1 + 128);
  char v5 = *a3;
  uint64_t v6 = sub_10003FB34();
  if ((*(_DWORD *)(a1 + 56) | 2) == 2)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_100771F60();
    }
    uint64_t v7 = 111;
  }
  else
  {
    int v9 = *(_DWORD *)(v6 + 712);
    sub_10003AFE8((uint64_t)v15);
    if ((v9 - 1) > 0xF9E)
    {
      uint64_t v7 = 1;
    }
    else
    {
      char v14 = 0;
      sub_10001B8E0(&v14);
      int v13 = sub_10018F2CC(0, (4 * v5) | 1u, *a3, (uint64_t)(a3 + 2), (uint64_t)(a3 + 34), v10, v11, v12);
      sub_10001B910(&v14);
      sub_10001B8AC(&v14);
      uint64_t v7 = v13 != 0;
    }
  }
  sub_10003AFB4((uint64_t)v15);
  return v7;
}

void sub_1004E8C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004E8CC4(uint64_t a1)
{
  char v36 = 2;
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Putting device into test mode", buf, 2u);
  }
  *(void *)long long buf = 0;
  uint64_t v35 = 0;
  sub_10003AED0((uint64_t)buf, a1 + 128);
  if (*(_DWORD *)(a1 + 56) != 1)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_100771F60();
    }
    uint64_t v30 = 111;
    goto LABEL_16;
  }
  sub_10003AFE8((uint64_t)buf);
  char v33 = 0;
  sub_10001B8E0(&v33);
  byte_100A19D25 = 1;
  int v10 = sub_10018F1B8((uint64_t)sub_1004E1CC0, v3, v4, v5, v6, v7, v8, v9);
  sub_10001B910(&v33);
  if (v10)
  {
    if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      goto LABEL_33;
    }
    goto LABEL_18;
  }
  if (!sub_1004E1D34(a1))
  {
    sub_1002B804C(&v33);
    sub_10022A3FC(1);
    sub_10001B910(&v33);
    sub_1002B804C(&v33);
    byte_100A19D25 = 1;
    int v17 = sub_10001BDE0(71, (uint64_t)sub_1004E1CC0, v11, v12, v13, v14, v15, v16, 3);
    sub_10001B910(&v33);
    if (v17)
    {
      if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        goto LABEL_33;
      }
    }
    else
    {
      if (sub_1004E1D34(a1))
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
          sub_100772B64();
        }
        goto LABEL_33;
      }
      sub_1002B804C(&v33);
      byte_100A19D25 = 1;
      int v21 = sub_10018EF78((uint64_t)sub_1004E1CC0, 2u, 0, 1, (uint64_t)&v36, v18, v19, v20);
      sub_10001B910(&v33);
      if (!v21)
      {
        if (sub_1004E1D34(a1))
        {
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
            sub_100772A94();
          }
          goto LABEL_33;
        }
        sub_1002B804C(&v33);
        byte_100A19D25 = 1;
        int v29 = sub_10018F5E8((uint64_t)sub_1004E1CC0, v22, v23, v24, v25, v26, v27, v28, v32);
        sub_10001B910(&v33);
        if (!v29)
        {
          if (!sub_1004E1D34(a1))
          {
            sub_1002B804C(&v33);
            sub_10017B6D8(1);
            sub_10001B910(&v33);
            sub_10003AF00((uint64_t)buf);
            *(unsigned char *)(a1 + 194) = 1;
            sub_10001B8AC(&v33);
            uint64_t v30 = 0;
LABEL_16:
            sub_10003AFB4((uint64_t)buf);
            return v30;
          }
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
            goto LABEL_32;
          }
          goto LABEL_33;
        }
        if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
          goto LABEL_33;
        }
LABEL_18:
        sub_100772A2C();
        goto LABEL_33;
      }
      if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        goto LABEL_33;
      }
    }
    sub_100772AFC();
    goto LABEL_33;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
LABEL_32:
  }
    sub_1007729C4();
LABEL_33:
  uint64_t result = sub_10010B394(408);
  __break(1u);
  return result;
}

void sub_1004E9040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004E9068(uint64_t a1, unsigned char *a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 128);
  *a2 = *(unsigned char *)(a1 + 194);
  sub_10003AFB4((uint64_t)v5);
  return 0;
}

uint64_t sub_1004E90B8(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Putting device into LE TX test mode", buf, 2u);
  }
  *(void *)long long buf = 0;
  uint64_t v19 = 0;
  sub_10003AED0((uint64_t)buf, a1 + 128);
  if (*(_DWORD *)(a1 + 56) == 1)
  {
    if (*(unsigned char *)(a1 + 195))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_100772C34();
      }
      uint64_t v9 = 1;
    }
    else
    {
      sub_10003AFE8((uint64_t)buf);
      char v17 = 0;
      sub_10001B8E0(&v17);
      unsigned int v15 = a2 - 2402;
      if (a2 < 2402) {
        unsigned int v15 = a2 - 2401;
      }
      uint64_t v9 = sub_100240E68((v15 >> 1), a3, a4, v10, v11, v12, v13, v14);
      sub_10001B910(&v17);
      if (v9)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
          sub_100772BCC();
        }
        uint64_t v9 = 111;
      }
      else
      {
        *(unsigned char *)(a1 + 195) = 1;
      }
      sub_10001B8AC(&v17);
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_100771F60();
    }
    uint64_t v9 = 111;
  }
  sub_10003AFB4((uint64_t)buf);
  return v9;
}

void sub_1004E923C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004E9264(uint64_t a1, int a2)
{
  uint64_t v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Putting device into LE RX test mode", buf, 2u);
  }
  *(void *)long long buf = 0;
  uint64_t v17 = 0;
  sub_10003AED0((uint64_t)buf, a1 + 128);
  if (*(_DWORD *)(a1 + 56) == 1)
  {
    if (*(unsigned char *)(a1 + 195))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_100772C34();
      }
      uint64_t v5 = 1;
    }
    else
    {
      sub_10003AFE8((uint64_t)buf);
      char v15 = 0;
      sub_10001B8E0(&v15);
      unsigned int v13 = a2 - 2402;
      if (a2 < 2402) {
        unsigned int v13 = a2 - 2401;
      }
      uint64_t v5 = sub_100240CC0((v13 >> 1), v6, v7, v8, v9, v10, v11, v12);
      sub_10001B910(&v15);
      if (v5)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
          sub_100772BCC();
        }
        uint64_t v5 = 111;
      }
      else
      {
        *(unsigned char *)(a1 + 195) = 1;
      }
      sub_10001B8AC(&v15);
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_100771F60();
    }
    uint64_t v5 = 111;
  }
  sub_10003AFB4((uint64_t)buf);
  return v5;
}

void sub_1004E93D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004E93F8(int a1, int a2)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B20D0);
  }
  uint64_t v4 = off_1009F8068;

  return sub_1004E9464((uint64_t)v4, a1, a2);
}

uint64_t sub_1004E9464(uint64_t a1, int a2, int a3)
{
  *(unsigned char *)(a1 + 195) = 0;
  uint64_t v5 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109376;
    v7[1] = a2;
    __int16 v8 = 1024;
    int v9 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "LE test mode stopped : %{bluetooth:OI_STATUS}u, packets = %d", (uint8_t *)v7, 0xEu);
  }
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009B20F0);
  }
  return sub_1004B5CCC((uint64_t)off_1009F7EA8);
}

uint64_t sub_1004E9560(uint64_t a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Stopping LE test mode", buf, 2u);
  }
  *(void *)long long buf = 0;
  uint64_t v14 = 0;
  sub_10003AED0((uint64_t)buf, a1 + 128);
  if (*(_DWORD *)(a1 + 56) == 1)
  {
    if (*(unsigned char *)(a1 + 195))
    {
      sub_10003AFE8((uint64_t)buf);
      char v12 = 0;
      sub_10001B8E0(&v12);
      uint64_t v10 = sub_1002410CC(sub_1004E93F8, v3, v4, v5, v6, v7, v8, v9);
      sub_10001B910(&v12);
      if (v10)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
          sub_100772C9C();
        }
        uint64_t v10 = 111;
      }
      sub_10001B8AC(&v12);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_100772C68();
      }
      uint64_t v10 = 1;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_100771F60();
    }
    uint64_t v10 = 111;
  }
  sub_10003AFB4((uint64_t)buf);
  return v10;
}

void sub_1004E96BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004E96E4(os_unfair_lock_s *a1, void *a2)
{
  uint64_t v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }
  if (v4)
  {
    uint64_t v6 = v4;
    operator delete(v4);
  }
}

void sub_1004E9788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

void sub_1004E97B0(id a1, StackEventListener *a2)
{
}

void sub_1004E97D8(id a1, StackEventListener *a2)
{
}

void sub_1004E9800(id a1, StackEventListener *a2)
{
}

void sub_1004E9828(id a1, StackEventListener *a2)
{
}

void sub_1004E9854()
{
}

void sub_1004E9870(uint64_t a1)
{
  sub_1004EACF0(a1);

  operator delete();
}

void sub_1004E98C8(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_1004E991C((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_1004E991C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  a1[1] = v2;
}

void sub_1004E9968(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    uint64_t v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  uint64_t v6 = *(char **)(a1 + 8);
  while (*(void *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      uint64_t v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      uint64_t v7 = a2;
      sub_1004E9A38(a1 + 8, v6, (char *)&v7);
      sub_100061554(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(void, uint64_t))(a1 + 32))(*(void *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_1004E9A38(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    unsigned int v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      uint64_t v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v20 = &v19[8 * v16];
    std::string __p = v19;
    uint64_t v27 = v20;
    uint64_t v28 = v20;
    int v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        uint64_t v23 = (char *)sub_1000405F8(v8, v22);
        uint64_t v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        uint64_t v27 = v20;
        int v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        uint64_t v27 = v20;
      }
    }
    *(void *)uint64_t v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    uint64_t v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)unint64_t __src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    uint64_t v9 = __src + 8;
    uint64_t v10 = v6 - 8;
    uint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_1004E9C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004E9C78(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    uint64_t v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  uint64_t v6 = *(char **)(a1 + 8);
  while (*(void *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      uint64_t v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      uint64_t v7 = a2;
      sub_1004E9D48(a1 + 8, v6, (char *)&v7);
      sub_100061554(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(void, uint64_t))(a1 + 32))(*(void *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_1004E9D48(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    unsigned int v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      uint64_t v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v20 = &v19[8 * v16];
    std::string __p = v19;
    uint64_t v27 = v20;
    uint64_t v28 = v20;
    int v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        uint64_t v23 = (char *)sub_1000405F8(v8, v22);
        uint64_t v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        uint64_t v27 = v20;
        int v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        uint64_t v27 = v20;
      }
    }
    *(void *)uint64_t v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    uint64_t v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)unint64_t __src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    uint64_t v9 = __src + 8;
    uint64_t v10 = v6 - 8;
    uint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_1004E9F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004E9F88(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 != v4)
  {
    int64_t v6 = v4 - (v5 + 8);
    if (v4 != v5 + 8) {
      memmove(v5, v5 + 8, v4 - (v5 + 8));
    }
    *(void *)(a1 + 16) = &v5[v6];
    sub_100061554(a1 + 8);
    if (*(void *)(a1 + 8) == *(void *)(a1 + 16)) {
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 32) + 8))(*(void *)(a1 + 32), a1);
    }
  }

  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_1004EA060(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 != v4)
  {
    int64_t v6 = v4 - (v5 + 8);
    if (v4 != v5 + 8) {
      memmove(v5, v5 + 8, v4 - (v5 + 8));
    }
    *(void *)(a1 + 16) = &v5[v6];
    sub_100061554(a1 + 8);
    if (*(void *)(a1 + 8) == *(void *)(a1 + 16)) {
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 32) + 8))(*(void *)(a1 + 32), a1);
    }
  }

  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_1004EA138(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 != v4)
  {
    int64_t v6 = v4 - (v5 + 8);
    if (v4 != v5 + 8) {
      memmove(v5, v5 + 8, v4 - (v5 + 8));
    }
    *(void *)(a1 + 16) = &v5[v6];
    sub_100061554(a1 + 8);
    if (*(void *)(a1 + 8) == *(void *)(a1 + 16)) {
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 32) + 8))(*(void *)(a1 + 32), a1);
    }
  }

  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_1004EA210(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    int64_t v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  int64_t v6 = *(char **)(a1 + 8);
  while (*(void *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      int64_t v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      uint64_t v7 = a2;
      sub_1004EA2E0(a1 + 8, v6, (char *)&v7);
      sub_100061554(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(void, uint64_t))(a1 + 32))(*(void *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_1004EA2E0(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  int64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    unsigned int v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      uint64_t v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v20 = &v19[8 * v16];
    std::string __p = v19;
    uint64_t v27 = v20;
    uint64_t v28 = v20;
    int v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        uint64_t v23 = (char *)sub_1000405F8(v8, v22);
        uint64_t v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        uint64_t v27 = v20;
        int v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        uint64_t v27 = v20;
      }
    }
    *(void *)uint64_t v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    uint64_t v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)unint64_t __src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    uint64_t v9 = __src + 8;
    uint64_t v10 = v6 - 8;
    uint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_1004EA4E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004EA520(id a1, _xpc_activity_s *a2)
{
  if (qword_1009F8748 != -1) {
    dispatch_once(&qword_1009F8748, &stru_1009B2130);
  }
  int v2 = sub_1004B9FE0((uint64_t)off_1009F8740);
  uint64_t v3 = qword_100A19E50;
  BOOL v4 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Timeout passed. Not Resetting the denylist since Airplane mode is enabled", buf, 2u);
    }
    +[NSDate timeIntervalSinceReferenceDate];
    double v6 = sub_1004E04C8(v5);
    sub_1004E0A04(1, v6);
  }
  else
  {
    if (v4)
    {
      *(_WORD *)unint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Timeout passed. Resetting the denylist", v7, 2u);
    }
    if (qword_1009F8158 != -1) {
      dispatch_once(&qword_1009F8158, &stru_1009B2150);
    }
    sub_1004FB090(0.0);
    sub_10017F000();
  }
}

void sub_1004EA648(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  double v5 = *(char **)(a1 + 8);
  BOOL v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        double v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 != v4)
  {
    int64_t v6 = v4 - (v5 + 8);
    if (v4 != v5 + 8) {
      memmove(v5, v5 + 8, v4 - (v5 + 8));
    }
    *(void *)(a1 + 16) = &v5[v6];
    sub_100061554(a1 + 8);
    if (*(void *)(a1 + 8) == *(void *)(a1 + 16)) {
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 32) + 8))(*(void *)(a1 + 32), a1);
    }
  }

  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_1004EA720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a1;
  if ((a1 - 701) > 0x44)
  {
    if (a1)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_100772D6C();
      }
      goto LABEL_10;
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
  {
    sub_100772D04();
  }
  uint64_t v9 = sub_10018EFB8((uint64_t)sub_1004EA810, (uint64_t)"iOS", a3, a4, a5, a6, a7, a8);
  if (!v9) {
    return;
  }
  uint64_t v8 = v9;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
    sub_10077261C();
  }
LABEL_10:
  uint64_t v10 = (void (*)(uint64_t))off_100A137F0;
  if (off_100A137F0)
  {
    off_100A137F0 = 0;
    v10(v8);
  }
}

void sub_1004EA810(uint64_t a1)
{
  if (sub_100183F14() < 4)
  {
    sub_1004EA8CC(a1);
  }
  else
  {
    sub_1004E3344();
    uint64_t v7 = sub_10018F230((uint64_t)sub_1004EA8CC, 1u, (uint64_t)byte_100A136F8, v2, v3, v4, v5, v6);
    if (v7)
    {
      uint64_t v8 = v7;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_100772DD4();
      }
      uint64_t v9 = (void (*)(uint64_t))off_100A137F0;
      if (off_100A137F0)
      {
        off_100A137F0 = 0;
        v9(v8);
      }
    }
  }
}

void sub_1004EA8CC(uint64_t a1)
{
  uint64_t v2 = sub_100035F54();
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 72))(v2);
  if (a1)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_100772F74();
    }
LABEL_31:
    uint64_t v10 = (void (*)(uint64_t))off_100A137F0;
    if (off_100A137F0)
    {
      off_100A137F0 = 0;
      v10(a1);
    }
    return;
  }
  if (v3 <= 20)
  {
    if (v3 != 7)
    {
      if (v3 == 8)
      {
        __int16 v4 = 256;
        char v5 = 16;
      }
      else
      {
        if (v3 != 12) {
          goto LABEL_21;
        }
        __int16 v4 = 512;
        char v5 = 12;
      }
      goto LABEL_18;
    }
    __int16 v4 = 256;
    goto LABEL_14;
  }
  switch(v3)
  {
    case 21:
      __int16 v4 = 1024;
      char v5 = 28;
      break;
    case 40:
      __int16 v4 = 1024;
      char v5 = 72;
      break;
    case 42:
      __int16 v4 = 1792;
LABEL_14:
      char v5 = 4;
      break;
    default:
      goto LABEL_21;
  }
LABEL_18:
  a1 = sub_10018540C(v4, v5);
  if (a1)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_100772F0C();
    }
    goto LABEL_31;
  }
LABEL_21:
  if (qword_1009F8778 != -1) {
    dispatch_once(&qword_1009F8778, &stru_1009B2058);
  }
  uint64_t v6 = sub_10061AFDC();
  uint64_t v7 = sub_10025396C(v6);
  if (v7)
  {
    a1 = v7;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_100772EA4();
    }
    goto LABEL_31;
  }
  if (qword_1009F8778 != -1) {
    dispatch_once(&qword_1009F8778, &stru_1009B2058);
  }
  uint64_t v8 = sub_10061AFE8();
  uint64_t v9 = sub_100253BCC(v8);
  if (v9)
  {
    a1 = v9;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_100772E3C();
    }
    goto LABEL_31;
  }
  uint64_t v11 = (void (*)(void))off_100A137F0;
  if (off_100A137F0)
  {
    off_100A137F0 = 0;
    v11(0);
  }
}

void sub_1004EAB18(id a1)
{
}

void sub_1004EAB5C()
{
}

uint64_t sub_1004EAB80(uint64_t a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B20D0);
  }
  uint64_t v2 = off_1009F8068;
  int v3 = *(_DWORD *)(a1 + 32);

  return sub_1004E3058(v2, v3);
}

void sub_1004EABE8()
{
}

uint64_t sub_1004EABFC(uint64_t a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B20D0);
  }
  uint64_t result = sub_1004E4540((uint64_t)off_1009F8068);
  if (result)
  {
    *(unsigned char *)(a1 + 8) = 1;
  }
  else
  {
    *(void *)(a1 + 16) = 100;
    uint64_t v3 = sub_1004AF8EC();
    return sub_1004B022C(v3, (unsigned char *)a1);
  }
  return result;
}

uint64_t sub_1004EAC88(uint64_t a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B20D0);
  }
  uint64_t v2 = off_1009F8068;
  int v3 = *(_DWORD *)(a1 + 32);
  int v4 = *(unsigned __int8 *)(a1 + 36);

  return sub_1004E43C0((uint64_t)v2, v3, v4);
}

uint64_t sub_1004EACF0(uint64_t a1)
{
  *(void *)a1 = off_1009B1D38;
  *(void *)(a1 + 8) = &off_1009B1DD0;
  *(void *)(a1 + 16) = off_1009B1DE8;
  *(void *)(a1 + 24) = &off_1009B1E18;
  *(void *)(a1 + 32) = &off_1009B1E30;
  *(void *)(a1 + 4sub_1004C2140(qword_100A19B68, 0) = &off_1009B1E48;
  *(void *)(a1 + 48) = off_1009B1E60;
  sub_100052DA4(a1 + 472);

  sub_100052DA4(a1 + 392);
  if (*(char *)(a1 + 383) < 0) {
    operator delete(*(void **)(a1 + 360));
  }
  if (*(char *)(a1 + 303) < 0) {
    operator delete(*(void **)(a1 + 280));
  }
  sub_100052DA4(a1 + 208);
  sub_100052DA4(a1 + 128);
  int v4 = (void **)(a1 + 104);
  sub_1004E98C8(&v4);
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 8sub_1004C2140(qword_100A19B68, 0) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1004EAE60(id a1)
{
}

void sub_1004EAEA4()
{
}

void sub_1004EAEC8(id a1)
{
}

void sub_1004EAF0C()
{
}

void sub_1004EAF30(id a1)
{
}

void sub_1004EAF74()
{
}

void sub_1004EAF98(id a1)
{
}

void sub_1004EAFDC()
{
}

void sub_1004EB000(id a1)
{
}

void sub_1004EB190()
{
}

void sub_1004EB1B4(id a1)
{
}

void sub_1004EB1F8()
{
}

void sub_1004EB21C(id a1)
{
}

void sub_1004EB260()
{
}

void sub_1004EB284(id a1)
{
}

void sub_1004EB2C8()
{
}

void sub_1004EB2EC(id a1)
{
}

void sub_1004EB330()
{
}

void sub_1004EB354(id a1)
{
}

void sub_1004EB398()
{
}

void sub_1004EB3BC(id a1)
{
}

void sub_1004EB400()
{
}

void sub_1004EB424(id a1)
{
}

void sub_1004EB468(id a1)
{
}

void sub_1004EB4AC()
{
}

char *sub_1004EB4D0(char *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_10036C400(result, a4);
    for (uint64_t i = (void *)*((void *)v6 + 1); a2 != a3; a2 += 2)
    {
      uint64_t v8 = a2[1];
      void *i = *a2;
      i[1] = v8;
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
      }
      i += 2;
    }
    *((void *)v6 + 1) = i;
  }
  return result;
}

void sub_1004EB548(id a1)
{
}

void sub_1004EB58C()
{
}

void sub_1004EB5F8()
{
  sub_100052DA8(&unk_100A19C80);
  __cxa_atexit((void (*)(void *))sub_100052DA4, &unk_100A19C80, (void *)&_mh_execute_header);
  sub_1002B80C0(&stru_100A19CC0);
  __cxa_atexit((void (*)(void *))sub_1002B812C, &stru_100A19CC0, (void *)&_mh_execute_header);
  sub_1002B80C0(&stru_100A19CF0);
  __cxa_atexit((void (*)(void *))sub_1002B812C, &stru_100A19CF0, (void *)&_mh_execute_header);
  sub_1002B80C0(&stru_100A19D28);
  __cxa_atexit((void (*)(void *))sub_1002B812C, &stru_100A19D28, (void *)&_mh_execute_header);
  sub_100052DA8(&unk_100A19D58);
  __cxa_atexit((void (*)(void *))sub_100052DA4, &unk_100A19D58, (void *)&_mh_execute_header);
}

uint64_t sub_1004EB714(unint64_t a1, uint64_t *a2, uint64_t a3, unint64_t *a4)
{
  if (qword_1009F8398 != -1) {
    dispatch_once(&qword_1009F8398, &stru_1009B22E0);
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  sub_100504BC4((uint64_t)off_1009F8390, a1, a4, (uint64_t *)&v10);
  if (v10)
  {
    sub_100500908(v10, *a4, a2, a3);
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 7;
  }
  if (v11) {
    sub_10008A294(v11);
  }
  return v8;
}

void sub_1004EB7C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10008A294(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004EB7E0(unint64_t *a1)
{
  if (qword_1009F8398 != -1) {
    dispatch_once(&qword_1009F8398, &stru_1009B22E0);
  }
  sub_100504FC0((uint64_t)off_1009F8390, *a1);
  *a1 = 0;
  return 0;
}

uint64_t sub_1004EB840(unint64_t a1, unsigned int a2, int a3)
{
  if (qword_1009F8398 != -1) {
    dispatch_once(&qword_1009F8398, &stru_1009B22E0);
  }
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  sub_100504E18((uint64_t)off_1009F8390, a1, &v16);
  if (v16)
  {
    if (qword_1009F8168 != -1) {
      dispatch_once(&qword_1009F8168, &stru_1009B22C0);
    }
    uint64_t v6 = sub_100019C0C((void *)qword_1009F8160, a1);
    if (v6)
    {
      uint64_t v7 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        sub_10003AE4C(v6, (uint64_t)__p);
        uint64_t v8 = v15 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)long long buf = 136446210;
        uint64_t v19 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" is asking to start classic scan", buf, 0xCu);
        if (v15 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    if (qword_1009F8398 != -1) {
      dispatch_once(&qword_1009F8398, &stru_1009B22E0);
    }
    uint64_t v9 = off_1009F8390;
    uint64_t v12 = v16;
    unsigned int v13 = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = sub_1005057C8((uint64_t)v9, &v12, a2, a3);
    if (v13) {
      sub_10008A294(v13);
    }
  }
  else
  {
    uint64_t v10 = 7;
  }
  if (v17) {
    sub_10008A294(v17);
  }
  return v10;
}

void sub_1004EBA34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_10008A294(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004EBA6C(unint64_t a1)
{
  if (qword_1009F8398 != -1) {
    dispatch_once(&qword_1009F8398, &stru_1009B22E0);
  }
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_100504E18((uint64_t)off_1009F8390, a1, &v7);
  if (v7)
  {
    if (qword_1009F8398 != -1) {
      dispatch_once(&qword_1009F8398, &stru_1009B22E0);
    }
    uint64_t v2 = off_1009F8390;
    uint64_t v5 = v7;
    uint64_t v6 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v3 = sub_1005057C8((uint64_t)v2, &v5, 2u, 2048);
    if (v6) {
      sub_10008A294(v6);
    }
  }
  else
  {
    uint64_t v3 = 7;
  }
  if (v8) {
    sub_10008A294(v8);
  }
  return v3;
}

void sub_1004EBB5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    sub_10008A294(a10);
  }
  if (a12) {
    sub_10008A294(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004EBB80(unint64_t a1)
{
  if (qword_1009F8398 != -1) {
    dispatch_once(&qword_1009F8398, &stru_1009B22E0);
  }
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_100504E18((uint64_t)off_1009F8390, a1, &v7);
  if (v7)
  {
    if (qword_1009F8398 != -1) {
      dispatch_once(&qword_1009F8398, &stru_1009B22E0);
    }
    uint64_t v2 = off_1009F8390;
    uint64_t v5 = v7;
    uint64_t v6 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v3 = sub_10050542C(v2, &v5);
    if (v6) {
      sub_10008A294(v6);
    }
  }
  else
  {
    uint64_t v3 = 7;
  }
  if (v8) {
    sub_10008A294(v8);
  }
  return v3;
}

void sub_1004EBC68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    sub_10008A294(a10);
  }
  if (a12) {
    sub_10008A294(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004EBC8C(unint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t a4)
{
  if (qword_1009F8398 != -1) {
    dispatch_once(&qword_1009F8398, &stru_1009B22E0);
  }
  uint64_t v20 = 0;
  unint64_t v21 = 0;
  sub_100504E18((uint64_t)off_1009F8390, a1, &v20);
  if (v20)
  {
    std::string __p = 0;
    unint64_t v18 = 0;
    uint64_t v19 = 0;
    if ((void **)(v20 + 256) == &__p)
    {
      unint64_t v8 = 0;
    }
    else
    {
      sub_1002B5F74((char *)&__p, *(char **)(v20 + 256), *(void *)(v20 + 264), (uint64_t)(*(void *)(v20 + 264) - *(void *)(v20 + 256)) >> 3);
      unint64_t v8 = 0;
      if (a4 && __p != v18)
      {
        uint64_t v9 = (char *)__p + 8;
        unint64_t v10 = 1;
        do
        {
          uint64_t v11 = *((void *)v9 - 1);
          if (qword_1009F7F00 != -1) {
            dispatch_once(&qword_1009F7F00, &stru_1009B2300);
          }
          unint64_t v12 = sub_1004A93A0((uint64_t)off_1009F7EF8, a1, v11);
          if (!v12)
          {
            uint64_t v15 = 7;
            goto LABEL_20;
          }
          *a2++ = v12;
          unint64_t v13 = v10 + 1;
          if (v10 >= a4) {
            break;
          }
          ++v10;
          BOOL v14 = v9 == v18;
          v9 += 8;
        }
        while (!v14);
        unint64_t v8 = v13 - 1;
      }
    }
    uint64_t v15 = 0;
    *a3 = v8;
LABEL_20:
    if (__p)
    {
      unint64_t v18 = (char *)__p;
      operator delete(__p);
    }
  }
  else
  {
    uint64_t v15 = 7;
  }
  if (v21) {
    sub_10008A294(v21);
  }
  return v15;
}

void sub_1004EBE28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    sub_10008A294(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004EBE54(unint64_t a1, const void *a2, size_t a3)
{
  if (qword_1009F8398 != -1) {
    dispatch_once(&qword_1009F8398, &stru_1009B22E0);
  }
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  sub_100504E18((uint64_t)off_1009F8390, a1, &v8);
  if (v8) {
    uint64_t v6 = sub_1005015D8(v8, a2, a3);
  }
  else {
    uint64_t v6 = 7;
  }
  if (v9) {
    sub_10008A294(v9);
  }
  return v6;
}

void sub_1004EBEFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10008A294(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004EBF14(unint64_t a1, const void *a2, size_t a3)
{
  if (qword_1009F8398 != -1) {
    dispatch_once(&qword_1009F8398, &stru_1009B22E0);
  }
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  sub_100504E18((uint64_t)off_1009F8390, a1, &v8);
  if (v8) {
    uint64_t v6 = sub_10050182C(v8, a2, a3);
  }
  else {
    uint64_t v6 = 7;
  }
  if (v9) {
    sub_10008A294(v9);
  }
  return v6;
}

void sub_1004EBFBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10008A294(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004EBFD4(id a1)
{
}

void sub_1004EC018()
{
}

void sub_1004EC03C(id a1)
{
}

void sub_1004EC080()
{
}

void sub_1004EC0A4(id a1)
{
}

void sub_1004EC0E8()
{
}

uint64_t sub_1004EC10C(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t v4 = sub_100277890(a1, a2, a3);
  *(void *)uint64_t v4 = off_1009B2330;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_DWORD *)(v4 + 224) = 1065353216;
  sub_100052DA8(v4 + 232);
  *(void *)(a1 + 296) = 0;
  uint64_t v5 = +[NSMutableData dataWithLength:0];
  uint64_t v6 = *(void **)(a1 + 296);
  *(void *)(a1 + 296) = v5;

  return a1;
}

void sub_1004EC1A0(_Unwind_Exception *a1)
{
  sub_100052DA4(v3);
  sub_1000A9450(v2);
  sub_10027797C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004EC1D4(uint64_t a1)
{
  *(void *)a1 = off_1009B2330;
  for (uint64_t i = *(void **)(a1 + 208); i; uint64_t i = (void *)*i)
  {
    if (!i[3])
    {
      uint64_t v3 = qword_100A1A018;
      if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_FAULT)) {
        sub_100772FDC(v5, &v6, v3);
      }
    }
  }

  sub_100052DA4(a1 + 232);
  sub_1000A9450(a1 + 192);
  sub_10027797C(a1);
  return a1;
}

void sub_1004EC2D8(uint64_t a1)
{
  sub_1004EC1D4(a1);

  operator delete();
}

void sub_1004EC310(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 42))
  {
    uint64_t v1 = qword_100A1A018;
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Keyholed input device is already scheduled", v3, 2u);
    }
  }
  else
  {
    *(unsigned char *)(a1 + 42) = 1;
    for (uint64_t i = *(void **)(a1 + 208); i; uint64_t i = (void *)*i)
      IOHIDUserDeviceScheduleWithDispatchQueue();
  }
}

void sub_1004EC3AC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 42))
  {
    *(unsigned char *)(a1 + 42) = 0;
    for (uint64_t i = *(void *)(a1 + 208); i; uint64_t i = sub_1004ECFFC((void *)(a1 + 192), (uint64_t *)i))
    {
      IOHIDUserDeviceUnscheduleFromDispatchQueue();
      CFRelease(*(CFTypeRef *)(i + 24));
    }
    sub_100278384(a1, 0, -536870212, 0);
  }
  else
  {
    uint64_t v3 = qword_100A1A018;
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Keyholed input device is not scheduled", v4, 2u);
    }
  }
}

uint64_t sub_1004EC498(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v11 = [a2 mutableCopy];
  unint64_t v12 = +[NSData dataWithBytes:a3 length:a4];
  [v11 setObject:v12 forKeyedSubscript:@"ReportDescriptor"];
  unint64_t v13 = +[NSNumber numberWithUnsignedChar:a5];
  [v11 setObject:v13 forKeyedSubscript:@"KeyholeReportID"];

  BOOL v14 = +[NSNumber numberWithUnsignedChar:a6];
  [v11 setObject:v14 forKeyedSubscript:@"bInterfaceNumber"];

  uint64_t v15 = IOHIDUserDeviceCreateWithOptions();
  if (v15)
  {
    LOBYTE(v18) = a5;
    *((void *)&v18 + 1) = v15;
    sub_1004ED040(a1 + 192, (unsigned __int8 *)&v18, &v18);
  }
  else
  {
    uint64_t v16 = qword_100A1A018;
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
      sub_10077302C((uint64_t)v11, v16);
    }
  }

  return v15;
}

void sub_1004EC5F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1004EC630(uint64_t a1, void *a2)
{
  *(_OWORD *)uint64_t v9 = xmmword_1007BF396;
  *(void *)&v9[14] = 0xC002810125001503;
  id v3 = [a2 mutableCopy];
  uint64_t v4 = +[NSData dataWithBytes:v9 length:22];
  [v3 setObject:v4 forKeyedSubscript:@"ReportDescriptor"];
  [v3 setObject:&off_1009E1948 forKeyedSubscript:@"ExtendedData"];
  uint64_t v5 = IOHIDUserDeviceCreateWithOptions();
  if (v5)
  {
    LOBYTE(v8) = 0;
    *((void *)&v8 + 1) = v5;
    sub_1004ED040(a1 + 192, (unsigned __int8 *)&v8, &v8);
    IOHIDUserDeviceRegisterGetReportWithReturnLengthCallback();
    IOHIDUserDeviceRegisterSetReportCallback();
  }
  else
  {
    uint64_t v6 = qword_100A1A018;
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
      sub_1007730A4((uint64_t)v3, v6);
    }
  }

  return v5;
}

void sub_1004EC7A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004EC7CC(id *a1, unsigned __int8 *a2, uint64_t a3)
{
  int v6 = *a2;
  switch(v6)
  {
    case 254:
      if (![a1[37] length])
      {
        uint64_t v15 = qword_100A1A018;
        if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
          sub_1007731F4(v15, v16, v17, v18, v19, v20, v21, v22);
        }
      }
      [a1[37] appendBytes:a2 + 1 length:a3 - 1];
      [a1[37] mutableBytes:objc_msgSend(a1[37], "length")];
      [a1[37] setLength:0];
      break;
    case 253:
      if (![a1[37] length])
      {
        uint64_t v23 = qword_100A1A018;
        if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
          sub_1007731BC(v23, v24, v25, v26, v27, v28, v29, v30);
        }
      }
      goto LABEL_15;
    case 252:
      if ([a1[37] length])
      {
        uint64_t v7 = qword_100A1A018;
        if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
          sub_100773184(v7, v8, v9, v10, v11, v12, v13, v14);
        }
        [a1[37] setLength:0];
      }
LABEL_15:
      [a1[37] appendBytes:a2 + 1 length:a3 - 1];
      return;
    default:
      if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
        sub_10077311C();
      }
      break;
  }
}

uint64_t sub_1004EC968(uint64_t a1, int a2, int a3, void *a4, uint64_t *a5, int a6)
{
  v26[0] = 0;
  v26[1] = 0;
  sub_10003AED0((uint64_t)v26, a1 + 232);
  uint64_t v12 = qword_100A1A018;
  if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = *a5;
    *(_DWORD *)long long buf = 67109888;
    int v28 = a2;
    __int16 v29 = 1024;
    int v30 = a3;
    __int16 v31 = 2048;
    uint64_t v32 = v13;
    __int16 v33 = 1024;
    int v34 = a6;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "getReportWithKeyhole type = %u, reportID = 0x%x, max reportCFIndex Length = %lu, keyholeID = 0x%x", buf, 0x1Eu);
  }
  if (a4 && a5)
  {
    uint64_t v14 = *a5;
    *a5 = 0;
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    void v24[2] = sub_1004ECCB4;
    void v24[3] = &unk_1009B23B0;
    v24[4] = a1;
    int v25 = a3;
    uint64_t v15 = sub_1002788FC(a1, v24);
    if (v15)
    {
      if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
        sub_1007732B0();
      }
    }
    else
    {
      int64_t v16 = v14 + 1;
      uint64_t v23 = v16;
      *(void *)(a1 + 32) = &v23;
      *(void *)(a1 + 24) = malloc_type_malloc(v16, 0xD37D7DCuLL);
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      void v20[2] = sub_1004ECD1C;
      v20[3] = &unk_1009B23D0;
      void v20[4] = a1;
      int v21 = a2;
      char v22 = a6;
      uint64_t v15 = sub_1002788FC(a1, v20);
      if (v15)
      {
        uint64_t v17 = qword_100A1A018;
        if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 67109632;
          int v28 = a3;
          __int16 v29 = 1024;
          int v30 = a6;
          __int16 v31 = 1024;
          LODWORD(v32) = v15;
          _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "getReportWithKeyhole 0x%x with keyholeID 0x%x failed: 0x%x", buf, 0x14u);
        }
      }
      else
      {
        uint64_t v18 = v23;
        if (v23 < 2 || v23 > v16)
        {
          if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
            sub_10077322C();
          }
        }
        else
        {
          memcpy(a4, (const void *)(*(void *)(a1 + 24) + 1), v23 - 1);
          *a5 = v18 - 1;
        }
      }
      *(void *)(a1 + 32) = 0;
      free(*(void **)(a1 + 24));
      *(void *)(a1 + 24) = 0;
    }
  }
  else
  {
    uint64_t v15 = 3758097090;
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
      sub_100773334();
    }
  }
  sub_10003AFB4((uint64_t)v26);
  return v15;
}

void sub_1004ECC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004ECCB4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  __int16 v3 = 255;
  HIBYTE(v3) = *(_DWORD *)(a1 + 40);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, __int16 *, uint64_t))(**(void **)(v1 + 8) + 8))(*(void *)(v1 + 8), v1, 3, 255, &v3, 2);
}

uint64_t sub_1004ECD1C(uint64_t a1)
{
  return (***(uint64_t (****)(void))(*(void *)(a1 + 32) + 8))(*(void *)(*(void *)(a1 + 32) + 8));
}

uint64_t sub_1004ECD5C(uint64_t a1, int a2, int a3, const void *a4, size_t a5, int a6)
{
  v20[0] = 0;
  v20[1] = 0;
  sub_10003AED0((uint64_t)v20, a1 + 232);
  uint64_t v12 = qword_100A1A018;
  if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109888;
    int v22 = a2;
    __int16 v23 = 1024;
    int v24 = a3;
    __int16 v25 = 2048;
    size_t v26 = a5;
    __int16 v27 = 1024;
    int v28 = a6;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "setReportWithKeyhole type = %u, reportID = 0x%x, reportCFIndex Length = %lu, keyholeID = 0x%x", buf, 0x1Eu);
  }
  if (a4 && a5)
  {
    uint64_t v13 = malloc_type_malloc(a5 + 1, 0x97671842uLL);
    *uint64_t v13 = a6;
    memcpy(v13 + 1, a4, a5);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    void v17[2] = sub_1004ECFB8;
    v17[3] = &unk_1009B23F0;
    int v18 = a2;
    char v19 = a6;
    void v17[4] = a1;
    void v17[5] = v13;
    v17[6] = a5 + 1;
    uint64_t v14 = sub_1002788FC(a1, v17);
    if (v14)
    {
      uint64_t v15 = qword_100A1A018;
      if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67109632;
        int v22 = a3;
        __int16 v23 = 1024;
        int v24 = a6;
        __int16 v25 = 1024;
        LODWORD(v26) = v14;
        _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "setReportWithKeyhole 0x%x with keyholeID 0x%x failed: 0x%x", buf, 0x14u);
      }
    }
    free(v13);
  }
  else
  {
    uint64_t v14 = 3758097090;
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
      sub_10077339C();
    }
  }
  sub_10003AFB4((uint64_t)v20);
  return v14;
}

void sub_1004ECF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004ECFB8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 32) + 8) + 8))(*(void *)(*(void *)(a1 + 32) + 8));
}

uint64_t sub_1004ECFFC(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_1002B55F4(a1, a2, (uint64_t)&__p);
  __int16 v3 = __p;
  std::string __p = 0;
  if (v3) {
    operator delete(v3);
  }
  return v2;
}

void *sub_1004ED040(uint64_t a1, unsigned __int8 *a2, _OWORD *a3)
{
  unint64_t v5 = *a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v8 = *a2;
      if (v6 <= v5) {
        unint64_t v8 = v5 % v6;
      }
    }
    else
    {
      unint64_t v8 = (v6 - 1) & v5;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v8);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v5)
          {
            if (*((unsigned __int8 *)v10 + 16) == v5) {
              return v10;
            }
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v11 >= v6) {
                v11 %= v6;
              }
            }
            else
            {
              v11 &= v6 - 1;
            }
            if (v11 != v8) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    unint64_t v8 = 0;
  }
  uint64_t v10 = operator new(0x20uLL);
  *uint64_t v10 = 0;
  v10[1] = v5;
  *((_OWORD *)v10 + 1) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    BOOL v14 = 1;
    if (v6 >= 3) {
      BOOL v14 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v6);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_1000A9204(a1, v17);
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5) {
        unint64_t v8 = v5 % v6;
      }
      else {
        unint64_t v8 = v5;
      }
    }
    else
    {
      unint64_t v8 = (v6 - 1) & v5;
    }
  }
  uint64_t v18 = *(void *)a1;
  char v19 = *(void **)(*(void *)a1 + 8 * v8);
  if (v19)
  {
    *uint64_t v10 = *v19;
LABEL_38:
    *char v19 = v10;
    goto LABEL_39;
  }
  *uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v8) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v20 >= v6) {
        v20 %= v6;
      }
    }
    else
    {
      v20 &= v6 - 1;
    }
    char v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1004ED250(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004ED264(uint64_t a1, uint64_t a2, int a3, int a4)
{
  *(void *)a1 = off_1009B2480;
  sub_100052DA8(a1 + 8);
  *(unsigned char *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 76) = a4;
  *(void *)a1 = off_1009B2420;
  *(void *)(a1 + 8sub_1004C2140(qword_100A19B68, 0) = a2;
  *(void *)(a1 + 88) = off_1009B2458;
  sub_100052DA8(a1 + 96);
  *(_DWORD *)(a1 + 16sub_1004C2140(qword_100A19B68, 0) = 0;
  *(_DWORD *)(a1 + 164) = a3;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0;
  return a1;
}

void sub_1004ED328(_Unwind_Exception *a1)
{
  void *v1 = v2;
  sub_100052DA4(v3);
  _Unwind_Resume(a1);
}

void *sub_1004ED344(void *a1)
{
  *a1 = off_1009B2420;
  a1[11] = off_1009B2458;
  uint64_t v2 = (void *)a1[21];
  if (v2)
  {
    a1[22] = v2;
    operator delete(v2);
  }
  sub_100052DA4(a1 + 12);
  *a1 = off_1009B2480;
  sub_100052DA4(a1 + 1);
  return a1;
}

void *sub_1004ED3E4(uint64_t a1)
{
  return sub_1004ED344((void *)(a1 - 88));
}

void sub_1004ED3EC(void *a1)
{
  sub_1004ED344(a1);

  operator delete();
}

void sub_1004ED424(uint64_t a1)
{
  sub_1004ED344((void *)(a1 - 88));

  operator delete();
}

uint64_t sub_1004ED460(uint64_t a1, uint64_t a2, int a3)
{
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 96);
  sub_1004A83C4((char **)(a1 + 168), a2);
  sub_10003AFE8((uint64_t)v8);
  if (!a3)
  {
    int v7 = 0;
    sub_10010BB74(&v7, 0);
    v7 += 120;
    sub_10048B9E4(a2, &v7);
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 80) + 24))(*(void *)(a1 + 80), a2);
  }
  sub_1004ED53C(a1);
  return sub_10003AFB4((uint64_t)v8);
}

void sub_1004ED524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004ED53C(uint64_t a1)
{
  v18[0] = 0;
  v18[1] = 0;
  sub_10003AED0((uint64_t)v18, a1 + 96);
  uint64_t v2 = qword_100A19E68;
  if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_INFO))
  {
    int v3 = *(_DWORD *)(a1 + 160);
    *(_DWORD *)long long buf = 67109120;
    int v20 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Stepping scan with mode %u", buf, 8u);
  }
  int v4 = *(_DWORD *)(a1 + 160);
  if (v4 == 16)
  {
LABEL_11:
    if (sub_1004EDBF0(a1)) {
      return sub_10003AFB4((uint64_t)v18);
    }
    goto LABEL_12;
  }
  if (!v4)
  {
    if (sub_1004ED988(a1) && sub_1004EDBF0(a1))
    {
      buf[0] = 0;
      sub_10001B8E0(buf);
      if (sub_10018EFF4((uint64_t)sub_1004EDC88, 0x870u, v5, v6, v7, v8, v9, v10)
        && os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_ERROR))
      {
        sub_100773440();
      }
      sub_10001B8AC(buf);
      return sub_10003AFB4((uint64_t)v18);
    }
    goto LABEL_11;
  }
LABEL_12:
  buf[0] = 0;
  sub_10001B8E0(buf);
  if (sub_10018EFF4((uint64_t)sub_1004EDC88, 0x2000u, v11, v12, v13, v14, v15, v16)
    && os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_ERROR))
  {
    sub_10077340C();
  }
  sub_10001B8AC(buf);
  sub_10003AFE8((uint64_t)v18);
  sub_1004EDCD4(a1, 0);
  return sub_10003AFB4((uint64_t)v18);
}

void sub_1004ED6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_1004ED720(uint64_t a1, uint64_t a2, int a3)
{
  return sub_1004ED460(a1 - 88, a2, a3);
}

void sub_1004ED728(uint64_t a1)
{
  v3[0] = 0;
  v3[1] = 0;
  sub_10003AED0((uint64_t)v3, a1 + 8);
  int v2 = *(unsigned __int8 *)(a1 + 72);
  sub_10003AFB4((uint64_t)v3);
  if (v2)
  {
    sub_10025B8C0();
  }
  else
  {
    sub_1004ED788(a1);
    sub_1004ED53C(a1);
  }
}

uint64_t sub_1004ED788(uint64_t a1)
{
  v3[0] = 0;
  v3[1] = 0;
  sub_10003AED0((uint64_t)v3, a1 + 8);
  *(unsigned char *)(a1 + 72) = 1;
  sub_10003AFB4((uint64_t)v3);
  return (***(uint64_t (****)(void))(a1 + 80))();
}

uint64_t sub_1004ED810(uint64_t a1)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1 + 96);
  int v2 = qword_100A19E68;
  if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 160);
    *(_DWORD *)long long buf = 67109120;
    int v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Stopping scan with mode %u", buf, 8u);
  }
  int v4 = *(_DWORD *)(a1 + 160);
  if (v4 != 128)
  {
    if (v4 == 16)
    {
      *(void *)(a1 + 176) = *(void *)(a1 + 168);
      *(_DWORD *)(a1 + 16sub_1004C2140(qword_100A19B68, 0) = 128;
      sub_10003AFE8((uint64_t)v6);
      if (qword_1009FB698 != -1) {
        dispatch_once(&qword_1009FB698, &stru_1009B24A0);
      }
      sub_1004C83E0();
    }
    if (v4)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_ERROR)) {
        sub_100773474();
      }
    }
    else
    {
      *(_DWORD *)(a1 + 16sub_1004C2140(qword_100A19B68, 0) = 128;
    }
  }
  return sub_10003AFB4((uint64_t)v6);
}

void sub_1004ED96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004ED988(uint64_t a1)
{
  std::string __p = 0;
  size_t v17 = 0;
  uint64_t v18 = 0;
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009B24C0);
  }
  int v2 = sub_1004B54C0((uint64_t)off_1009F7EA8, (uint64_t **)&__p);
  int v3 = (char *)__p;
  if (v2 || v17 == __p)
  {
    uint64_t v4 = 0;
    goto LABEL_5;
  }
  v14[0] = sub_1004EDD48;
  sub_1004EDF38((uint64_t)__p, v17, (uint64_t (**)(uint64_t, uint64_t))v14, 126 - 2 * __clz((v17 - (unsigned char *)__p) >> 3), 1);
  int v3 = (char *)__p;
  if (__p != v17)
  {
    while (1)
    {
      unsigned int v6 = *(_DWORD *)(a1 + 164);
      if (!v6) {
        goto LABEL_23;
      }
      uint64_t v7 = *(void *)v3;
      unsigned int v8 = 1;
      while ((v6 & v8) == 0)
      {
LABEL_15:
        v8 *= 2;
        if (v8 > v6) {
          goto LABEL_23;
        }
      }
      if (sub_100475E4C(v7, v6 & v8)) {
        break;
      }
      uint64_t v9 = qword_100A19E68;
      if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(v7, v14);
        int v10 = v15;
        uint64_t v11 = (void **)v14[0];
        int v12 = sub_10048B99C(v7);
        *(_DWORD *)long long buf = 136446466;
        uint64_t v13 = v14;
        if (v10 < 0) {
          uint64_t v13 = v11;
        }
        int v20 = v13;
        __int16 v21 = 1024;
        int v22 = v12;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Checking device %{public}s with last seen time %u", buf, 0x12u);
        if (v15 < 0) {
          operator delete(v14[0]);
        }
      }
      sub_1004EDD80((void *)a1, v7);
LABEL_23:
      v3 += 8;
      if (v3 == v17)
      {
        uint64_t v4 = 1;
        int v3 = (char *)__p;
        goto LABEL_5;
      }
    }
    unsigned int v6 = *(_DWORD *)(a1 + 164);
    goto LABEL_15;
  }
  uint64_t v4 = 1;
LABEL_5:
  if (v3)
  {
    size_t v17 = v3;
    operator delete(v3);
  }
  return v4;
}

void sub_1004EDBB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1004EDBF0(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 168);
  int v2 = *(uint64_t **)(a1 + 176);
  if (v1 != v2)
  {
    uint64_t v3 = *v1;
    *(_DWORD *)(a1 + 16sub_1004C2140(qword_100A19B68, 0) = 16;
    if (qword_1009FB698 != -1) {
      dispatch_once(&qword_1009FB698, &stru_1009B24A0);
    }
    sub_1004C8250(qword_1009FB690, v3);
  }
  *(_DWORD *)(a1 + 16sub_1004C2140(qword_100A19B68, 0) = 128;
  return v1 != v2;
}

void sub_1004EDC88(int a1)
{
  if (a1)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_ERROR)) {
      sub_1007734A8();
    }
  }
}

uint64_t sub_1004EDCD4(uint64_t a1, uint64_t a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 8);
  *(unsigned char *)(a1 + 72) = 0;
  sub_10003AFB4((uint64_t)v5);
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 80) + 40))(*(void *)(a1 + 80), a2);
}

BOOL sub_1004EDD48(uint64_t a1, uint64_t a2)
{
  int v3 = sub_10048B99C(a1);
  return v3 > (int)sub_10048B99C(a2);
}

void sub_1004EDD80(void *a1, uint64_t a2)
{
  uint64_t v4 = (char **)(a1 + 21);
  if (!sub_1004A8390((uint64_t)(a1 + 21), a2))
  {
    unint64_t v5 = a1[23];
    unsigned int v6 = (uint64_t *)a1[22];
    if ((unint64_t)v6 >= v5)
    {
      uint64_t v8 = ((char *)v6 - *v4) >> 3;
      if ((unint64_t)(v8 + 1) >> 61) {
        abort();
      }
      uint64_t v9 = v5 - (void)*v4;
      uint64_t v10 = v9 >> 2;
      if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
        uint64_t v10 = v8 + 1;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v11 = v10;
      }
      if (v11) {
        int v12 = (char *)sub_1000405F8((uint64_t)(a1 + 23), v11);
      }
      else {
        int v12 = 0;
      }
      uint64_t v13 = (uint64_t *)&v12[8 * v8];
      uint64_t v14 = &v12[8 * v11];
      *uint64_t v13 = a2;
      uint64_t v7 = v13 + 1;
      uint64_t v16 = (char *)a1[21];
      char v15 = (char *)a1[22];
      if (v15 != v16)
      {
        do
        {
          uint64_t v17 = *((void *)v15 - 1);
          v15 -= 8;
          *--uint64_t v13 = v17;
        }
        while (v15 != v16);
        char v15 = *v4;
      }
      a1[21] = v13;
      a1[22] = v7;
      a1[23] = v14;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *unsigned int v6 = a2;
      uint64_t v7 = v6 + 1;
    }
    a1[22] = v7;
  }
}

void sub_1004EDE68(id a1)
{
}

void sub_1004EDEAC()
{
}

void sub_1004EDED0(id a1)
{
}

void sub_1004EDF14()
{
}

uint64_t sub_1004EDF38(uint64_t result, char *a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4, char a5)
{
  uint64_t v10 = (char *)result;
LABEL_2:
  unint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = a2 - v11;
    unint64_t v15 = (a2 - v11) >> 3;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t result = (*a3)(*((void *)a2 - 1), *(void *)v11);
          if (result)
          {
            uint64_t v22 = *(void *)v11;
            *(void *)unint64_t v11 = *((void *)a2 - 1);
            *((void *)a2 - 1) = v22;
          }
          break;
        case 3uLL:
          uint64_t result = sub_1004EE460(v11, (void *)v11 + 1, (void *)a2 - 1, (unsigned int (**)(void))a3);
          break;
        case 4uLL:
          uint64_t result = sub_1004EE944(v11, (void *)v11 + 1, (void *)v11 + 2, (void *)a2 - 1, (unsigned int (**)(void))a3);
          break;
        case 5uLL:
          uint64_t result = sub_1004EE9F8(v11, (void *)v11 + 1, (void *)v11 + 2, (void *)v11 + 3, (void *)a2 - 1, (unsigned int (**)(void))a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)sub_1004EEAD4(v11, a2, (uint64_t *)a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v11[8 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x401)
    {
      sub_1004EE460(v11, &v11[8 * (v15 >> 1)], (void *)a2 - 1, (unsigned int (**)(void))a3);
      sub_1004EE460((void *)v11 + 1, (void *)v17 - 1, (void *)a2 - 2, (unsigned int (**)(void))a3);
      sub_1004EE460((void *)v11 + 2, &v11[8 * v16 + 8], (void *)a2 - 3, (unsigned int (**)(void))a3);
      sub_1004EE460((void *)v17 - 1, v17, &v11[8 * v16 + 8], (unsigned int (**)(void))a3);
      uint64_t v18 = *(void *)v11;
      *(void *)unint64_t v11 = *(void *)v17;
      *(void *)uint64_t v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_1004EE460(&v11[8 * (v15 >> 1)], v11, (void *)a2 - 1, (unsigned int (**)(void))a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (((*a3)(*((void *)v11 - 1), *(void *)v11) & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1004EE550((uint64_t *)v11, (uint64_t *)a2, a3);
      unint64_t v11 = (char *)result;
      goto LABEL_19;
    }
LABEL_14:
    char v19 = sub_1004EE660((uint64_t *)v11, (uint64_t *)a2, a3);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = sub_1004EE77C(v11, v19, (unsigned int (**)(void))a3);
    unint64_t v11 = (char *)(v19 + 1);
    uint64_t result = sub_1004EE77C(v19 + 1, a2, (unsigned int (**)(void))a3);
    if (result)
    {
      a4 = -v13;
      a2 = (char *)v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      uint64_t result = sub_1004EDF38(v10, v19, a3, -v13, a5 & 1);
      unint64_t v11 = (char *)(v19 + 1);
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return sub_1004EE2FC((uint64_t)v11, (uint64_t *)a2, a3);
  }
  else
  {
    return sub_1004EE3C4((uint64_t)v11, a2, a3);
  }
}

uint64_t sub_1004EE2FC(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  if ((uint64_t *)result != a2)
  {
    uint64_t v4 = (void *)result;
    char v5 = (uint64_t *)(result + 8);
    if ((uint64_t *)(result + 8) != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = (uint64_t *)result;
      do
      {
        uint64_t v10 = *v8;
        uint64_t v9 = v8[1];
        uint64_t v8 = v5;
        uint64_t result = (*a3)(v9, v10);
        if (result)
        {
          uint64_t v11 = *v8;
          uint64_t v12 = v7;
          while (1)
          {
            *(void *)((char *)v4 + v12 + 8) = *(void *)((char *)v4 + v12);
            if (!v12) {
              break;
            }
            uint64_t result = (*a3)(v11, *(void *)((char *)v4 + v12 - 8));
            v12 -= 8;
            if ((result & 1) == 0)
            {
              uint64_t v13 = (void *)((char *)v4 + v12 + 8);
              goto LABEL_10;
            }
          }
          uint64_t v13 = v4;
LABEL_10:
          *uint64_t v13 = v11;
        }
        char v5 = v8 + 1;
        v7 += 8;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t sub_1004EE3C4(uint64_t result, void *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  if ((void *)result != a2)
  {
    uint64_t v4 = (void *)result;
    for (uint64_t i = (void *)(result + 8); v4 + 1 != a2; uint64_t i = v4 + 1)
    {
      uint64_t v8 = *v4;
      uint64_t v7 = v4[1];
      uint64_t v4 = i;
      uint64_t result = (*a3)(v7, v8);
      if (result)
      {
        uint64_t v9 = *v4;
        uint64_t v10 = v4;
        do
        {
          uint64_t v11 = v10;
          uint64_t v12 = *--v10;
          *uint64_t v11 = v12;
          uint64_t result = (*a3)(v9, *(v11 - 2));
        }
        while ((result & 1) != 0);
        *uint64_t v10 = v9;
      }
    }
  }
  return result;
}

uint64_t sub_1004EE460(void *a1, void *a2, void *a3, unsigned int (**a4)(void))
{
  char v8 = ((uint64_t (*)(void, void))*a4)(*a2, *a1);
  uint64_t result = ((uint64_t (*)(void, void))*a4)(*a3, *a2);
  if ((v8 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    uint64_t v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    if (!((unsigned int (*)(void, void))*a4)(*a2, *a1)) {
      return 1;
    }
    uint64_t v12 = *a1;
    *a1 = *a2;
    *a2 = v12;
    return 2;
  }
  uint64_t v10 = *a1;
  if (!result)
  {
    *a1 = *a2;
    *a2 = v10;
    if (!(*a4)(*a3)) {
      return 1;
    }
    uint64_t v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    return 2;
  }
  *a1 = *a3;
  *a3 = v10;
  return 1;
}

uint64_t *sub_1004EE550(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v4 = a2;
  uint64_t v6 = *a1;
  if ((*a3)(*a1, *(a2 - 1)))
  {
    uint64_t v7 = a1;
    do
    {
      uint64_t v8 = v7[1];
      ++v7;
    }
    while (((*a3)(v6, v8) & 1) == 0);
  }
  else
  {
    uint64_t v9 = a1 + 1;
    do
    {
      uint64_t v7 = v9;
      if (v9 >= v4) {
        break;
      }
      ++v9;
    }
    while (!(*a3)(v6, *v7));
  }
  if (v7 < v4)
  {
    do
      uint64_t v10 = *--v4;
    while (((*a3)(v6, v10) & 1) != 0);
  }
  while (v7 < v4)
  {
    uint64_t v11 = *v7;
    uint64_t *v7 = *v4;
    *uint64_t v4 = v11;
    do
    {
      uint64_t v12 = v7[1];
      ++v7;
    }
    while (!(*a3)(v6, v12));
    do
      uint64_t v13 = *--v4;
    while (((*a3)(v6, v13) & 1) != 0);
  }
  if (v7 - 1 != a1) {
    *a1 = *(v7 - 1);
  }
  *(v7 - 1) = v6;
  return v7;
}

uint64_t *sub_1004EE660(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v6 = 0;
  uint64_t v7 = *a1;
  do
    char v8 = (*a3)(a1[++v6], v7);
  while ((v8 & 1) != 0);
  uint64_t v9 = &a1[v6];
  uint64_t v10 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= a2) {
        break;
      }
      uint64_t v12 = *--a2;
    }
    while (((*a3)(v12, v7) & 1) == 0);
  }
  else
  {
    do
      uint64_t v11 = *--a2;
    while (!(*a3)(v11, v7));
  }
  if (v9 < a2)
  {
    uint64_t v13 = a2;
    uint64_t v14 = v9;
    do
    {
      uint64_t v15 = *v14;
      *uint64_t v14 = *v13;
      *uint64_t v13 = v15;
      do
      {
        uint64_t v16 = v14[1];
        ++v14;
      }
      while (((*a3)(v16, v7) & 1) != 0);
      do
        uint64_t v17 = *--v13;
      while (!(*a3)(v17, v7));
    }
    while (v14 < v13);
    uint64_t v10 = v14 - 1;
  }
  if (v10 != a1) {
    *a1 = *v10;
  }
  *uint64_t v10 = v7;
  return v10;
}

BOOL sub_1004EE77C(void *a1, void *a2, unsigned int (**a3)(void))
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(void, void))*a3)(*(a2 - 1), *a1))
      {
        uint64_t v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      sub_1004EE460(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1004EE944(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1004EE9F8(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v9 = a1 + 2;
      sub_1004EE460(a1, a1 + 1, a1 + 2, a3);
      uint64_t v10 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (((unsigned int (*)(void, void))*a3)(*v10, *v9))
    {
      uint64_t v13 = *v10;
      uint64_t v14 = v11;
      while (1)
      {
        uint64_t v15 = (char *)a1 + v14;
        *(void *)((char *)a1 + v14 + 24) = *(void *)((char *)a1 + v14 + 16);
        if (v14 == -16) {
          break;
        }
        v14 -= 8;
        if ((((uint64_t (*)(uint64_t, void))*a3)(v13, *((void *)v15 + 1)) & 1) == 0)
        {
          uint64_t v16 = (void *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      uint64_t v16 = a1;
LABEL_12:
      void *v16 = v13;
      if (++v12 == 8) {
        return v10 + 1 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 8;
    if (++v10 == a2) {
      return 1;
    }
  }
}

uint64_t sub_1004EE944(void *a1, void *a2, void *a3, void *a4, unsigned int (**a5)(void))
{
  sub_1004EE460(a1, a2, a3, a5);
  uint64_t result = ((uint64_t (*)(void, void))*a5)(*a4, *a3);
  if (result)
  {
    uint64_t v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    uint64_t result = ((uint64_t (*)(void, void))*a5)(*a3, *a2);
    if (result)
    {
      uint64_t v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      uint64_t result = ((uint64_t (*)(void, void))*a5)(*a2, *a1);
      if (result)
      {
        uint64_t v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t sub_1004EE9F8(void *a1, void *a2, void *a3, void *a4, void *a5, unsigned int (**a6)(void))
{
  sub_1004EE944(a1, a2, a3, a4, a6);
  uint64_t result = ((uint64_t (*)(void, void))*a6)(*a5, *a4);
  if (result)
  {
    uint64_t v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    uint64_t result = ((uint64_t (*)(void, void))*a6)(*a4, *a3);
    if (result)
    {
      uint64_t v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      uint64_t result = ((uint64_t (*)(void, void))*a6)(*a3, *a2);
      if (result)
      {
        uint64_t v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        uint64_t result = ((uint64_t (*)(void, void))*a6)(*a2, *a1);
        if (result)
        {
          uint64_t v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1004EEAD4(char *a1, char *a2, uint64_t *a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 3;
    if (a2 - a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[8 * v10];
      do
      {
        sub_1004EEC2C((uint64_t)a1, (unsigned int (**)(void, void))a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != (char *)a3)
    {
      uint64_t v14 = (uint64_t *)a2;
      do
      {
        if ((*a4)(*v14, *(void *)a1))
        {
          uint64_t v15 = *v14;
          *uint64_t v14 = *(void *)a1;
          *(void *)a1 = v15;
          sub_1004EEC2C((uint64_t)a1, (unsigned int (**)(void, void))a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      uint64_t v13 = (char *)a3;
    }
    if (v8 >= 9)
    {
      uint64_t v16 = (unint64_t)v8 >> 3;
      uint64_t v17 = a2 - 8;
      do
      {
        uint64_t v18 = *(void *)a1;
        char v19 = (char *)sub_1004EED54(a1, (unsigned int (**)(void, void))a4, v16);
        if (v17 == v19)
        {
          *(void *)char v19 = v18;
        }
        else
        {
          *(void *)char v19 = *(void *)v17;
          *(void *)uint64_t v17 = v18;
          sub_1004EEE04((uint64_t)a1, (uint64_t)(v19 + 8), a4, (v19 + 8 - a1) >> 3);
        }
        v17 -= 8;
      }
      while (v16-- > 2);
    }
    return (uint64_t *)v13;
  }
  return a3;
}

uint64_t sub_1004EEC2C(uint64_t result, unsigned int (**a2)(void, void), uint64_t a3, void *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    char v5 = a4;
    uint64_t v6 = result;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v10 = ((uint64_t)a4 - result) >> 2;
      uint64_t v11 = v10 + 1;
      uint64_t v12 = (void *)(result + 8 * (v10 + 1));
      uint64_t v13 = v10 + 2;
      if (v10 + 2 < a3 && (*a2)(*v12, v12[1]))
      {
        ++v12;
        uint64_t v11 = v13;
      }
      uint64_t result = ((uint64_t (*)(void, void))*a2)(*v12, *v5);
      if ((result & 1) == 0)
      {
        uint64_t v14 = *v5;
        do
        {
          uint64_t v15 = v12;
          *char v5 = *v12;
          if (v7 < v11) {
            break;
          }
          uint64_t v16 = (2 * v11) | 1;
          uint64_t v12 = (void *)(v6 + 8 * v16);
          if (2 * v11 + 2 < a3)
          {
            if ((*a2)(*v12, v12[1]))
            {
              ++v12;
              uint64_t v16 = 2 * v11 + 2;
            }
          }
          uint64_t result = ((uint64_t (*)(void, uint64_t))*a2)(*v12, v14);
          char v5 = v15;
          uint64_t v11 = v16;
        }
        while (!result);
        void *v15 = v14;
      }
    }
  }
  return result;
}

void *sub_1004EED54(void *a1, unsigned int (**a2)(void, void), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = &a1[v6 + 1];
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1[v6 + 1], a1[v6 + 2]))
    {
      ++v9;
      uint64_t v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t sub_1004EEE04(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (uint64_t *)(result + 8 * (v4 >> 1));
    uint64_t v9 = (uint64_t *)(a2 - 8);
    uint64_t result = (*a3)(*v8, *(void *)(a2 - 8));
    if (result)
    {
      uint64_t v10 = *v9;
      do
      {
        uint64_t v11 = v8;
        uint64_t *v9 = *v8;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (uint64_t *)(v6 + 8 * v7);
        uint64_t result = (*a3)(*v8, v10);
        uint64_t v9 = v11;
      }
      while ((result & 1) != 0);
      *uint64_t v11 = v10;
    }
  }
  return result;
}

void *sub_1004EEEA8(void *a1, uint64_t a2)
{
  *a1 = &off_1009AB480;
  sub_100052DA8(a1 + 1);
  a1[9] = a2;
  return a1;
}

void *sub_1004EEEF4(void *a1, const std::string *a2)
{
  *a1 = &off_1009B24F0;
  a1[1] = 30000;
  a1[2] = 0;
  unint64_t v4 = (std::string *)sub_10004191C(a1 + 3, "");
  a1[6] = a1[1];
  std::string::operator=(v4, a2);
  uint64_t v13 = 0;
  uint64_t v5 = sub_100017768();
  sub_10004191C(buf, "ManagerStateWatchdog");
  sub_10004191C(__p, "WatchdogDuration");
  int v6 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, uint64_t *))(*(void *)v5 + 144))(v5, buf, __p, &v13);
  if (v13) {
    int v7 = v6;
  }
  else {
    int v7 = 0;
  }
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v15 < 0)
  {
    operator delete(*(void **)buf);
    if (!v7) {
      return a1;
    }
  }
  else if (!v7)
  {
    return a1;
  }
  uint64_t v8 = v13;
  a1[6] = v13;
  uint64_t v9 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Overriding fWatchdogDuration %llu.", buf, 0xCu);
  }
  return a1;
}

void sub_1004EF090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 + 47) < 0) {
    operator delete(*v22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004EF0E4(uint64_t a1)
{
  *(void *)a1 = &off_1009B24F0;
  sub_1004EF138(a1);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void sub_1004EF138(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 16);
  if (v1)
  {
    int v3 = qword_100A19E78;
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v4 = (void *)(a1 + 24);
      if (*(char *)(a1 + 47) < 0) {
        unint64_t v4 = (void *)*v4;
      }
      int v5 = 136315138;
      int v6 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "ManagerStateWatchdog %s destroyed!", (uint8_t *)&v5, 0xCu);
      uint64_t v1 = *(NSObject **)(a1 + 16);
    }
    dispatch_source_cancel(v1);
    dispatch_release(*(dispatch_object_t *)(a1 + 16));
    *(void *)(a1 + 16) = 0;
  }
}

void sub_1004EF214(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    int v2 = qword_100A19E78;
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = (void *)(a1 + 24);
      if (*(char *)(a1 + 47) < 0) {
        int v3 = (void *)*v3;
      }
      uint64_t v4 = *(void *)(a1 + 48);
      *(_DWORD *)long long buf = 136315394;
      uint64_t v11 = v3;
      __int16 v12 = 2048;
      uint64_t v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "ManagerStateWatchdog %s %llu ms Armed!", buf, 0x16u);
    }
    uint64_t v5 = sub_100019878();
    int v6 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(v5 + 8));
    *(void *)(a1 + 16) = v6;
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1004EF388;
    handler[3] = &unk_100997528;
    handler[4] = a1;
    dispatch_source_set_event_handler(v6, handler);
    int v7 = *(NSObject **)(a1 + 16);
    dispatch_time_t v8 = dispatch_time(0x8000000000000000, 1000000 * *(void *)(a1 + 48));
    dispatch_source_set_timer(v7, v8, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_activate(*(dispatch_object_t *)(a1 + 16));
  }
}

void sub_1004EF388(uint64_t a1)
{
}

void sub_1004EF39C(uint64_t a1)
{
  uint64_t v1 = a1;
  sub_1004EF138(a1);
  int v2 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR))
  {
    int v3 = (void *)(v1 + 24);
    if (*(char *)(v1 + 47) < 0) {
      int v3 = (void *)*v3;
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v3;
    _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "ManagerStateWatchdog %s timer expired", (uint8_t *)&buf, 0xCu);
    int v2 = qword_100A19E78;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
  {
    LOWORD(buf) = 0;
    _os_log_fault_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "Bad state watchdog", (uint8_t *)&buf, 2u);
  }
  if (qword_1009FB088 != -1) {
    goto LABEL_13;
  }
  while (1)
  {
    uint64_t v4 = qword_1009FB080;
    sub_10004191C(&buf, "ManagerStateWatchdog");
    sub_1004B7DA8(0.0, v4, (uint64_t *)&buf, (uint64_t *)(v1 + 24));
    if (SHIBYTE(v8) < 0) {
      operator delete((void *)buf);
    }
    long long buf = 0uLL;
    uint64_t v8 = 0;
    (**(void (***)(long long *__return_ptr, uint64_t))v1)(&buf, v1);
    uint64_t v1 = _os_log_pack_size();
    __chkstk_darwin();
    __error();
    uint64_t v5 = _os_log_pack_fill();
    p_long long buf = &buf;
    if (v8 < 0) {
      p_long long buf = (long long *)buf;
    }
    *(_DWORD *)uint64_t v5 = 136446210;
    *(void *)(v5 + 4) = p_buf;
    os_log_create("com.apple.bluetooth", "CBCrash");
    qword_1009FC078 = os_log_pack_send_and_compose();
    abort_with_payload();
    __break(1u);
LABEL_13:
    dispatch_once(&qword_1009FB088, &stru_1009B24F8);
  }
}

void sub_1004EF5DC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 41) < 0) {
    operator delete(*(void **)(v1 - 64));
  }
  _Unwind_Resume(exception_object);
}

void sub_1004EF608(id a1)
{
}

uint64_t sub_1004EF64C(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = off_1009B2480;
  sub_100052DA8(a1 + 8);
  *(unsigned char *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 76) = a3;
  *(void *)a1 = off_1009B2528;
  *(void *)(a1 + 8sub_1004C2140(qword_100A19B68, 0) = a2;
  *(void *)(a1 + 88) = off_1009B2568;
  *(void *)(a1 + 96) = 0;
  sub_100052DA8(a1 + 104);
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 172) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(void *)(a1 + 96) = sub_1004AFE2C();
  return a1;
}

void sub_1004EF728(_Unwind_Exception *a1)
{
  int v7 = (void *)v1[25];
  if (v7)
  {
    v1[26] = v7;
    operator delete(v7);
  }
  uint64_t v8 = *v5;
  if (*v5)
  {
    v1[23] = v8;
    operator delete(v8);
  }
  sub_100052DA4(v4);
  void *v1 = v2;
  sub_100052DA4(v3);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1004EF774(uint64_t a1, uint64_t a2)
{
  int v13 = 0;
  __int16 v12 = 0;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009B2660);
  }
  uint64_t v4 = off_1009F7EF8;
  uint64_t v14 = 0;
  sub_100026C30((uint64_t)&v14);
  *(void *)&long long v11 = (int)v14;
  *((void *)&v11 + 1) = SWORD2(v14);
  uint64_t result = sub_1004AA384((uint64_t)v4, a2, &v11, (BOOL *)&v12 + 1, (char *)&v12);
  if (result)
  {
    uint64_t v6 = (uint64_t)result;
    int v7 = (*(uint64_t (**)(void, unsigned __int8 *, int *, void))(**(void **)(a1 + 80) + 48))(*(void *)(a1 + 80), result, &v13, HIBYTE(v12));
    long long v11 = 0uLL;
    sub_10003AED0((uint64_t)&v11, a1 + 104);
    char v8 = v13;
    if ((v13 & 4) != 0 && !(_BYTE)v12)
    {
      sub_1004EF904((void *)a1, v6);
      char v8 = v13;
    }
    if ((v8 & 0x10) != 0) {
      sub_1004EF9EC((void *)a1, v6);
    }
    sub_10003AFE8((uint64_t)&v11);
    uint64_t v9 = **(void **)(a1 + 80);
    if (v7) {
      uint64_t v10 = (void (**)(void))(v9 + 24);
    }
    else {
      uint64_t v10 = (void (**)(void))(v9 + 32);
    }
    (*v10)();
    return (unsigned __int8 *)sub_10003AFB4((uint64_t)&v11);
  }
  return result;
}

void sub_1004EF8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1004EF904(void *a1, uint64_t a2)
{
  uint64_t v4 = (char **)(a1 + 25);
  if (!sub_1004A8390((uint64_t)(a1 + 25), a2))
  {
    unint64_t v5 = a1[27];
    uint64_t v6 = (uint64_t *)a1[26];
    if ((unint64_t)v6 >= v5)
    {
      uint64_t v8 = ((char *)v6 - *v4) >> 3;
      if ((unint64_t)(v8 + 1) >> 61) {
        abort();
      }
      uint64_t v9 = v5 - (void)*v4;
      uint64_t v10 = v9 >> 2;
      if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
        uint64_t v10 = v8 + 1;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v11 = v10;
      }
      if (v11) {
        __int16 v12 = (char *)sub_1000405F8((uint64_t)(a1 + 27), v11);
      }
      else {
        __int16 v12 = 0;
      }
      int v13 = (uint64_t *)&v12[8 * v8];
      uint64_t v14 = &v12[8 * v11];
      *int v13 = a2;
      int v7 = v13 + 1;
      uint64_t v16 = (char *)a1[25];
      char v15 = (char *)a1[26];
      if (v15 != v16)
      {
        do
        {
          uint64_t v17 = *((void *)v15 - 1);
          v15 -= 8;
          *--int v13 = v17;
        }
        while (v15 != v16);
        char v15 = *v4;
      }
      a1[25] = v13;
      a1[26] = v7;
      a1[27] = v14;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *uint64_t v6 = a2;
      int v7 = v6 + 1;
    }
    a1[26] = v7;
  }
}

void sub_1004EF9EC(void *a1, uint64_t a2)
{
  uint64_t v4 = (char **)(a1 + 22);
  if (!sub_1004A8390((uint64_t)(a1 + 22), a2))
  {
    unint64_t v5 = a1[24];
    uint64_t v6 = (uint64_t *)a1[23];
    if ((unint64_t)v6 >= v5)
    {
      uint64_t v8 = ((char *)v6 - *v4) >> 3;
      if ((unint64_t)(v8 + 1) >> 61) {
        abort();
      }
      uint64_t v9 = v5 - (void)*v4;
      uint64_t v10 = v9 >> 2;
      if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
        uint64_t v10 = v8 + 1;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v11 = v10;
      }
      if (v11) {
        __int16 v12 = (char *)sub_1000405F8((uint64_t)(a1 + 24), v11);
      }
      else {
        __int16 v12 = 0;
      }
      int v13 = (uint64_t *)&v12[8 * v8];
      uint64_t v14 = &v12[8 * v11];
      *int v13 = a2;
      int v7 = v13 + 1;
      uint64_t v16 = (char *)a1[22];
      char v15 = (char *)a1[23];
      if (v15 != v16)
      {
        do
        {
          uint64_t v17 = *((void *)v15 - 1);
          v15 -= 8;
          *--int v13 = v17;
        }
        while (v15 != v16);
        char v15 = *v4;
      }
      a1[22] = v13;
      a1[23] = v7;
      a1[24] = v14;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *uint64_t v6 = a2;
      int v7 = v6 + 1;
    }
    a1[23] = v7;
  }
}

uint64_t sub_1004EFAD4(uint64_t a1)
{
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 104);
  uint64_t v2 = qword_100A19E68;
  if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_INFO))
  {
    int v3 = *(_DWORD *)(a1 + 168);
    *(_DWORD *)long long buf = 67109120;
    int v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Stepping scan with mode %u", buf, 8u);
  }
  int v4 = *(_DWORD *)(a1 + 168);
  if (v4 > 3)
  {
    if (v4 != 4)
    {
      if (v4 != 16)
      {
LABEL_12:
        if (*(unsigned char *)(a1 + 172))
        {
          *(unsigned char *)(a1 + 172) = 0;
        }
        else
        {
          sub_10003AFE8((uint64_t)v8);
          uint64_t v6 = qword_100A19E68;
          if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 67109120;
            int v10 = 250;
            _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Sleeping %u ms before ending scan", buf, 8u);
          }
          j__usleep(0x3D090u);
          sub_1004EDCD4(a1, 0);
        }
        return sub_10003AFB4((uint64_t)v8);
      }
LABEL_11:
      if (sub_1004F0478(a1)) {
        return sub_10003AFB4((uint64_t)v8);
      }
      goto LABEL_12;
    }
LABEL_10:
    if (sub_1004EFCA8(a1)) {
      return sub_10003AFB4((uint64_t)v8);
    }
    goto LABEL_11;
  }
  if (v4)
  {
    if (v4 != 1) {
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  uint64_t v5 = sub_1004F0348(a1);
  if (v5)
  {
    sub_10003AFE8((uint64_t)v8);
    sub_1004EDCD4(a1, v5);
  }
  return sub_10003AFB4((uint64_t)v8);
}

void sub_1004EFC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_1004EFCA8(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 200);
  uint64_t v2 = *(uint64_t **)(a1 + 208);
  if (v1 != v2)
  {
    uint64_t v4 = *v1;
    char v7 = 0;
    sub_10001B8E0(&v7);
    uint64_t v5 = sub_10017DC04((uint64_t)sub_1004F05D4, v4 + 128, 4, a1);
    sub_10001B910(&v7);
    if (v5)
    {
      *(_DWORD *)(a1 + 168) = 128;
      sub_1004EDCD4(a1, v5);
    }
    else
    {
      *(_DWORD *)(a1 + 168) = 4;
    }
    sub_10001B8AC(&v7);
  }
  return v1 != v2;
}

void sub_1004EFD54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_1004EFD68(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v11 = 0;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009B2660);
  }
  WORD2(v1sub_1004C2140(qword_100A19B68, 0) = WORD2(a3);
  LODWORD(v1sub_1004C2140(qword_100A19B68, 0) = a3;
  uint64_t v8 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v10, 1);
  if (!a2)
  {
    uint64_t v12 = 0;
    sub_100026C30((uint64_t)&v12);
    *(void *)&long long v10 = (int)v12;
    *((void *)&v10 + 1) = SWORD2(v12);
    sub_100476E14(v8, a4, &v10);
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v8);
  }
  (*(void (**)(void, uint64_t, int *, void))(**(void **)(a1 + 80) + 48))(*(void *)(a1 + 80), v8, &v11, 0);
  long long v10 = 0uLL;
  sub_10003AED0((uint64_t)&v10, a1 + 104);
  sub_1004A83C4((char **)(a1 + 200), v8);
  if ((v11 & 0x10) != 0) {
    sub_1004EF9EC((void *)a1, v8);
  }
  sub_10003AFE8((uint64_t)&v10);
  sub_1004EFAD4(a1);
  return sub_10003AFB4((uint64_t)&v10);
}

void sub_1004EFEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1004EFEDC()
{
}

void sub_1004EFF8C()
{
}

uint64_t sub_1004EFF94(uint64_t a1, uint64_t a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 104);
  sub_1004A83C4((char **)(a1 + 176), a2);
  sub_10003AFE8((uint64_t)v5);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 80) + 24))(*(void *)(a1 + 80), a2);
  sub_1004EFAD4(a1);
  return sub_10003AFB4((uint64_t)v5);
}

void sub_1004F0020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1004F0034(uint64_t a1)
{
  v3[0] = 0;
  v3[1] = 0;
  sub_10003AED0((uint64_t)v3, a1 + 8);
  int v2 = *(unsigned __int8 *)(a1 + 72);
  sub_10003AFB4((uint64_t)v3);
  if (v2)
  {
    sub_10025B8C0();
  }
  else
  {
    sub_1004ED788(a1);
    sub_1004EFAD4(a1);
  }
}

uint64_t sub_1004F0094(uint64_t a1)
{
  v21[0] = 0;
  v21[1] = 0;
  sub_10003AED0((uint64_t)v21, a1 + 104);
  int v2 = qword_100A19E68;
  if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 168);
    *(_DWORD *)long long buf = 67109120;
    int v23 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Stopping scan with mode %u", buf, 8u);
  }
  int v4 = *(_DWORD *)(a1 + 168);
  if (v4 > 3)
  {
    if (v4 == 4)
    {
      int v11 = *(uint64_t **)(a1 + 200);
      if (v11 != *(uint64_t **)(a1 + 208))
      {
        uint64_t v12 = *v11;
        *(void *)(a1 + 208) = v11;
        *(_DWORD *)(a1 + 168) = 128;
        sub_10003AFE8((uint64_t)v21);
        buf[0] = 0;
        sub_10001B8E0(buf);
        sub_10017DCBC(v12 + 128, v13, v14, v15, v16, v17, v18, v19);
        sub_10001B910(buf);
        goto LABEL_15;
      }
    }
    else if (v4 == 16)
    {
      *(void *)(a1 + 184) = *(void *)(a1 + 176);
      *(_DWORD *)(a1 + 168) = 128;
      sub_10003AFE8((uint64_t)v21);
      if (qword_1009FB698 != -1) {
        dispatch_once(&qword_1009FB698, &stru_1009B2680);
      }
      sub_1004C83E0();
    }
  }
  else if (v4)
  {
    if (v4 == 1)
    {
      *(_DWORD *)(a1 + 168) = 128;
      sub_10003AFE8((uint64_t)v21);
      buf[0] = 0;
      sub_10001B8E0(buf);
      sub_100182FAC((uint64_t (*)(void, void))sub_1004F02A0, a1, v5, v6, v7, v8, v9, v10);
      sub_10001B910(buf);
LABEL_15:
      sub_10001B8AC(buf);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 168) = 128;
  }
  return sub_10003AFB4((uint64_t)v21);
}

void sub_1004F0264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1004F02A0(uint64_t a1, uint64_t a2)
{
  if (a2) {
    operator new();
  }
}

uint64_t sub_1004F0348(uint64_t a1)
{
  int v2 = qword_100A19E68;
  if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_INFO))
  {
    v7[0] = 67109376;
    v7[1] = 4;
    __int16 v8 = 1024;
    int v9 = 4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Scanning for %u scan periods (%u x 1.28s)", (uint8_t *)v7, 0xEu);
  }
  LOBYTE(v7[0]) = 0;
  sub_10001B8E0(v7);
  uint64_t v5 = sub_100182F00(10390323, 4, 64, (uint64_t (*)(void, void))sub_1004F0510, sub_1004F02A0, a1, v3, v4);
  if (!v5) {
    *(_DWORD *)(a1 + 168) = 1;
  }
  sub_10001B8AC(v7);
  return v5;
}

void sub_1004F045C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

BOOL sub_1004F0478(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 176);
  int v2 = *(uint64_t **)(a1 + 184);
  if (v1 != v2)
  {
    uint64_t v3 = *v1;
    *(_DWORD *)(a1 + 168) = 16;
    if (qword_1009FB698 != -1) {
      dispatch_once(&qword_1009FB698, &stru_1009B2680);
    }
    sub_1004C8250(qword_1009FB690, v3);
  }
  *(_DWORD *)(a1 + 168) = 128;
  return v1 != v2;
}

uint64_t sub_1004F0510(uint64_t result)
{
  if (result) {
    operator new();
  }
  return result;
}

void sub_1004F05B0()
{
}

void sub_1004F05D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4) {
    operator new();
  }
}

void sub_1004F0690()
{
}

uint64_t sub_1004F06B4(uint64_t a1, uint64_t a2, long long *a3)
{
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = off_1009B2590;
  *(void *)(a1 + 16) = a2;
  long long v4 = *a3;
  *(void *)(a1 + 4sub_1004C2140(qword_100A19B68, 0) = *((void *)a3 + 2);
  *(_OWORD *)(a1 + 24) = v4;
  if (*((void *)a3 + 2))
  {
    uint64_t v6 = malloc_type_malloc(0xF0uLL, 0x100004077774924uLL);
    *(void *)(a1 + 4sub_1004C2140(qword_100A19B68, 0) = v6;
    uint64_t v7 = (long long *)*((void *)a3 + 2);
    long long v8 = *v7;
    long long v9 = v7[2];
    v6[1] = v7[1];
    void v6[2] = v9;
    *uint64_t v6 = v8;
    long long v10 = v7[3];
    long long v11 = v7[4];
    long long v12 = v7[6];
    void v6[5] = v7[5];
    void v6[6] = v12;
    void v6[3] = v10;
    v6[4] = v11;
    long long v13 = v7[7];
    long long v14 = v7[8];
    long long v15 = v7[10];
    v6[9] = v7[9];
    v6[10] = v15;
    v6[7] = v13;
    v6[8] = v14;
    long long v16 = v7[11];
    long long v17 = v7[12];
    long long v18 = v7[14];
    v6[13] = v7[13];
    uint8_t v6[14] = v18;
    v6[11] = v16;
    v6[12] = v17;
  }
  else
  {
    *(void *)(a1 + 4sub_1004C2140(qword_100A19B68, 0) = 0;
  }
  return a1;
}

unsigned __int8 *sub_1004F0784(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  long long v3 = *(_OWORD *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 40);
  return sub_1004EF774(v1, (uint64_t)&v3);
}

uint64_t sub_1004F07C0(uint64_t a1)
{
  return sub_1004EFF94(*(void *)(a1 + 16), *(void *)(a1 + 32));
}

uint64_t sub_1004F07D0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(unsigned int *)(a1 + 24);
  if (v3) {
    return sub_1004EDCD4(v2, v3);
  }
  else {
    return sub_1004EFAD4(v2);
  }
}

uint64_t sub_1004F07E8(uint64_t a1, uint64_t a2, int a3, int *a4, std::string::value_type *__s)
{
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = off_1009B25C8;
  *(void *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 24) = a3;
  *(void *)(a1 + 4sub_1004C2140(qword_100A19B68, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  if (a4)
  {
    int v6 = *a4;
    *(_WORD *)(a1 + 32) = *((_WORD *)a4 + 2);
    *(_DWORD *)(a1 + 28) = v6;
  }
  if (__s) {
    std::string::assign((std::string *)(a1 + 40), __s);
  }
  return a1;
}

void sub_1004F0870(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004F088C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v2 = *(_DWORD *)(a1 + 24);
  unint64_t v3 = *(unsigned int *)(a1 + 28) | ((unint64_t)*(unsigned __int16 *)(a1 + 32) << 32);
  if (*(char *)(a1 + 63) < 0)
  {
    sub_10003B098(__p, *(void **)(a1 + 40), *(void *)(a1 + 48));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 56);
  }
  sub_1004EFD68(v1, v2, v3 & 0xFFFFFFFFFFFFLL, (uint64_t)__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1004F0918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1004F0934(void *a1)
{
  *a1 = off_1009B2590;
  int v2 = (void *)a1[5];
  if (v2) {
    free(v2);
  }
  return a1;
}

void sub_1004F0980(void *a1)
{
  *a1 = off_1009B2590;
  uint64_t v1 = (void *)a1[5];
  if (v1) {
    free(v1);
  }

  operator delete();
}

void sub_1004F09F0()
{
}

void sub_1004F0A08()
{
}

uint64_t sub_1004F0A1C(uint64_t a1)
{
  *(void *)a1 = off_1009B25C8;
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  return a1;
}

void sub_1004F0A6C(uint64_t a1)
{
  *(void *)a1 = off_1009B25C8;
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }

  operator delete();
}

void *sub_1004F0ADC(void *a1)
{
  *a1 = off_1009B2528;
  a1[11] = off_1009B2568;
  int v2 = (void *)a1[25];
  if (v2)
  {
    a1[26] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[22];
  if (v3)
  {
    a1[23] = v3;
    operator delete(v3);
  }
  sub_100052DA4(a1 + 13);
  *a1 = off_1009B2480;
  sub_100052DA4(a1 + 1);
  return a1;
}

void sub_1004F0B88(void *a1)
{
  *a1 = off_1009B2528;
  a1[11] = off_1009B2568;
  int v2 = (void *)a1[25];
  if (v2)
  {
    a1[26] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[22];
  if (v3)
  {
    a1[23] = v3;
    operator delete(v3);
  }
  sub_100052DA4(a1 + 13);
  *a1 = off_1009B2480;
  sub_100052DA4(a1 + 1);

  operator delete();
}

BOOL sub_1004F0C54(uint64_t a1, unsigned char *a2)
{
  return sub_1004B022C(*(void *)(a1 + 96), a2);
}

uint64_t sub_1004F0C5C(void *a1)
{
  *(a1 - 11) = off_1009B2528;
  *a1 = off_1009B2568;
  int v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  sub_100052DA4(a1 + 2);
  *(a1 - 11) = off_1009B2480;

  return sub_100052DA4(a1 - 10);
}

void sub_1004F0D10(void *a1)
{
  *(a1 - 11) = off_1009B2528;
  *a1 = off_1009B2568;
  int v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  sub_100052DA4(a1 + 2);
  *(a1 - 11) = off_1009B2480;
  sub_100052DA4(a1 - 10);

  operator delete();
}

void sub_1004F0DDC(id a1)
{
}

void sub_1004F0E20()
{
}

void sub_1004F0E44(id a1)
{
}

void sub_1004F0E88()
{
}

id sub_1004F0EB4(void *a1)
{
  size_t count = xpc_array_get_count(a1);
  size_t v3 = 8 * count;
  __chkstk_darwin();
  bzero((char *)applier - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  applier[0] = _NSConcreteStackBlock;
  applier[1] = 3221225472;
  applier[2] = sub_1004F1A14;
  applier[3] = &unk_1009A3318;
  applier[4] = (char *)applier - ((8 * count + 15) & 0xFFFFFFFFFFFFFFF0);
  xpc_array_apply(a1, applier);
  id v4 = [objc_alloc((Class)NSArray) initWithObjects:(char *)applier - ((8 * count + 15) & 0xFFFFFFFFFFFFFFF0) count:count];
  if (count)
  {
    do
    {

      v3 -= 8;
    }
    while (v3);
  }

  return v4;
}

void sub_1004F0FFC(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    do
    {

      v1 -= 8;
    }
    while (v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004F1028(uint64_t a1, int64_t a2, xpc_object_t xdict, int a4)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (value)
  {
    long long v8 = value;
    xpc_dictionary_set_int64(value, "kCBMsgArgResult", a4);
    sub_1000173FC(a1, a2, v8, 0);
  }
}

void sub_1004F10B0(uint64_t a1, unsigned int a2)
{
  int v2 = *(_DWORD *)(a1 + 136);
  if (v2 != 2 && v2 != a2)
  {
    xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
    uint64_t v7 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
    {
      if (a2 - 1 > 9) {
        long long v8 = "Unknown";
      }
      else {
        long long v8 = off_1009B27B0[a2 - 1];
      }
      long long v9 = (void *)(a1 + 56);
      if (*(char *)(a1 + 79) < 0) {
        long long v9 = (void *)*v9;
      }
      int v10 = 136446466;
      long long v11 = v8;
      __int16 v12 = 2082;
      long long v13 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Sending 'state updated' event with state \"%{public}s\" to session \"%{public}s\"", (uint8_t *)&v10, 0x16u);
    }
    *(_DWORD *)(a1 + 136) = a2;
    xpc_dictionary_set_int64(v6, "kCBMsgArgState", a2);
    sub_1000173FC(a1, 6, v6, 1);
  }
}

void sub_1004F11F0(uint64_t a1, unsigned int a2, unsigned int a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  uint64_t v7 = v6;
  if (*(_DWORD *)(a1 + 140) != a3)
  {
    long long v11 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v12 = (void *)(a1 + 56);
      if (*(char *)(a1 + 79) < 0) {
        __int16 v12 = (void *)*v12;
      }
      int v17 = 67109378;
      *(_DWORD *)long long v18 = a2;
      *(_WORD *)&void v18[4] = 2082;
      *(void *)&v18[6] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Sending 'power updated' event with state \"%d\" to session \"%{public}s\"", (uint8_t *)&v17, 0x12u);
    }
    *(_DWORD *)(a1 + 14sub_1004C2140(qword_100A19B68, 0) = a3;
    xpc_dictionary_set_int64(v7, "kCBMsgArgBTPowerState", a3);
    long long v9 = (unsigned int *)(a1 + 136);
    int v13 = *(_DWORD *)(a1 + 136);
    if (v13 == 2 || v13 == a2) {
      goto LABEL_24;
    }
    goto LABEL_16;
  }
  long long v9 = (unsigned int *)(a1 + 136);
  int v8 = *(_DWORD *)(a1 + 136);
  if (v8 != 2 && v8 != a2)
  {
LABEL_16:
    long long v14 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
    {
      if (a2 - 1 > 9) {
        long long v15 = "Unknown";
      }
      else {
        long long v15 = off_1009B27B0[a2 - 1];
      }
      long long v16 = (void *)(a1 + 56);
      if (*(char *)(a1 + 79) < 0) {
        long long v16 = (void *)*v16;
      }
      int v17 = 136446466;
      *(void *)long long v18 = v15;
      *(_WORD *)&v18[8] = 2082;
      *(void *)&v18[10] = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Sending 'state updated' event with state \"%{public}s\" to session \"%{public}s\"", (uint8_t *)&v17, 0x16u);
    }
    unsigned int *v9 = a2;
    xpc_dictionary_set_int64(v7, "kCBMsgArgState", a2);
LABEL_24:
    sub_1000173FC(a1, 6, v7, 1);
    return;
  }

  xpc_release(v6);
}

void sub_1004F142C(uint64_t a1, int a2)
{
  if (a2) {
    unsigned int v2 = 4;
  }
  else {
    unsigned int v2 = 5;
  }
  sub_1004F10B0(a1, v2);
}

void sub_1004F143C(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  *(void *)uuid = 0;
  uint64_t v7 = 0;
  [v4 getUUIDBytes:uuid];
  xpc_dictionary_set_uuid(a2, "kCBMsgArgDeviceUUID", uuid);
  if (qword_1009FB230 != -1) {
    dispatch_once(&qword_1009FB230, &stru_1009B2790);
  }
  unsigned int v5 = sub_100031120(qword_1009FB228, v4);
  xpc_dictionary_set_int64(a2, "kCBMsgArgATTMTU", v5);
}

void sub_1004F1508(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

xpc_object_t sub_1004F1520(unsigned __int8 **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  id v4 = a1[1];
  __chkstk_darwin();
  xpc_object_t v6 = (xpc_object_t *)((char *)&bytes[-1] - v5);
  bzero((char *)&bytes[-1] - v5, v7);
  if (v4 == v3) {
    return xpc_array_create(v6, 0);
  }
  size_t v8 = 0;
  do
  {
    if (sub_1004F1B90(a2, v3) != 1)
    {
      bytes[0] = 0;
      bytes[1] = 0;
      unsigned int v9 = sub_10071D240(v3, bytes);
      v6[v8++] = xpc_data_create(bytes, v9);
    }
    v3 += 20;
  }
  while (v3 != v4);
  xpc_object_t v10 = xpc_array_create(v6, v8);
  if (v8)
  {
    long long v11 = v6 - 1;
    do
      xpc_release(v11[v8--]);
    while (v8);
  }
  return v10;
}

xpc_object_t sub_1004F1660(void *a1)
{
  id v1 = a1;
  v22[1] = v1;
  id v2 = [v1 count];
  void v22[2] = v22;
  __chkstk_darwin(v2, 8 * (void)v2);
  id v4 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v4, v3);
  long long v26 = 0u;
  long long v27 = 0u;
  long long v25 = 0u;
  long long v24 = 0u;
  id v5 = v1;
  id v6 = [v5 countByEnumeratingWithState:&v24 objects:v28 count:16];
  int v23 = (xpc_object_t *)v4;
  if (v6)
  {
    size_t v7 = 0;
    uint64_t v8 = *(void *)v25;
    do
    {
      unsigned int v9 = 0;
      xpc_object_t v10 = v7;
      long long v11 = &v23[(void)v7];
      do
      {
        if (*(void *)v25 != v8) {
          objc_enumerationMutation(v5);
        }
        id v12 = *(id *)(*((void *)&v24 + 1) + 8 * (void)v9);
        id v13 = [v12 length];
        long long v15 = (char *)v22 - ((__chkstk_darwin(v13, v14) + 15) & 0xFFFFFFFFFFFFFFF0);
        bzero(v15, (size_t)v13);
        [v12 getBytes:v15 length:v13];
        v11[(void)v9] = xpc_data_create(v15, (size_t)v13);

        unsigned int v9 = (char *)v9 + 1;
      }
      while (v6 != v9);
      id v6 = [v5 countByEnumeratingWithState:&v24 objects:v28 count:16];
      size_t v7 = (char *)v9 + (void)v10;
    }
    while (v6);
    long long v16 = (char *)v9 + (void)v10;
  }
  else
  {
    long long v16 = 0;
  }

  id v17 = [v5 count];
  long long v18 = v23;
  xpc_object_t v19 = xpc_array_create(v23, (size_t)v17);
  char v20 = v18 - 1;
  while (v16)
    xpc_release(v20[(void)v16--]);

  return v19;
}

void sub_1004F18AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1004F18F4(int a1, xpc_object_t xdict)
{
  xpc_object_t dictionary = xpc_dictionary_get_dictionary(xdict, "kCBMsgArgs");
  if (!dictionary) {
    return 0;
  }
  size_t v3 = dictionary;
  if (!xpc_dictionary_get_dictionary(dictionary, "kCBMsgArgTimeXpcTimestampsTracking")) {
    return 0;
  }
  id v4 = sub_10002EF7C(v3);
  id v5 = +[NSDictionary dictionaryWithDictionary:v4];

  if (v5)
  {
    uint64_t v6 = CBOptionUseCase;
    size_t v7 = [v5 objectForKeyedSubscript:CBOptionUseCase];
    if (v7)
    {
      uint64_t v8 = [v5 objectForKeyedSubscript:v6];
      BOOL v9 = [v8 unsignedLongValue] == (id)22;
    }
    else
    {
      BOOL v9 = 0;
    }
  }
  else
  {
    BOOL v9 = 0;
  }

  return v9;
}

void sub_1004F19E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1004F1A14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_10002E040(a3);
  uint64_t v6 = *(void *)(a1 + 32);
  size_t v7 = *(void **)(v6 + 8 * a2);
  *(void *)(v6 + 8 * a2) = v5;

  return 1;
}

void sub_1004F1A58(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  *(void *)(*(void *)(a1 + 32) + 8 * a3) = sub_1000432B8();
}

void sub_1004F1AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1004F1AC0(id a1)
{
}

void sub_1004F1B04()
{
}

void sub_1004F1B28(id a1)
{
}

void sub_1004F1B6C()
{
}

uint64_t sub_1004F1B90(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = 1;
    do
    {
      if (!sub_10071D284(a2, v2 + 28))
      {
        if (!sub_10071D284(v2 + 28, a2)) {
          return v4;
        }
        v2 += 8;
      }
      uint64_t v2 = *(unsigned __int8 **)v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t sub_1004F1BFC(uint64_t a1)
{
  *(void *)a1 = off_1009B2810;
  size_t v3 = *(void **)(a1 + 72);
  uint64_t v2 = *(void **)(a1 + 80);
  while (v3 != v2)
  {
    if (*v3)
    {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
      uint64_t v2 = *(void **)(a1 + 80);
    }
    ++v3;
  }
  uint64_t v4 = *(void **)(a1 + 120);
  if (v4)
  {
    *(void *)(a1 + 128) = v4;
    operator delete(v4);
  }
  sub_1000486F0(a1 + 96, *(void **)(a1 + 104));
  id v5 = *(void **)(a1 + 72);
  if (v5)
  {
    *(void *)(a1 + 8sub_1004C2140(qword_100A19B68, 0) = v5;
    operator delete(v5);
  }
  sub_100052DA4(a1 + 8);
  return a1;
}

void sub_1004F1CB8(uint64_t a1)
{
  sub_1004F1BFC(a1);

  operator delete();
}

uint64_t sub_1004F1CF0(uint64_t a1, unsigned __int8 **a2)
{
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, a1 + 8);
  id v5 = *(uint64_t **)(a1 + 72);
  uint64_t v4 = *(uint64_t **)(a1 + 80);
  if (v5 == v4)
  {
LABEL_8:
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v6 = a2[1];
    while (1)
    {
      size_t v7 = *a2;
      if (*a2 != v6) {
        break;
      }
LABEL_7:
      if (++v5 == v4) {
        goto LABEL_8;
      }
    }
    while (1)
    {
      uint64_t v8 = *v5;
      __n128 v13 = *(__n128 *)(*v5 + 72);
      int v14 = *(_DWORD *)(v8 + 88);
      sub_100035F98(&v12, &v13);
      if (sub_10022A44C((unsigned __int8 *)&v12, v7)) {
        break;
      }
      v7 += 20;
      if (v7 == a2[1])
      {
        uint64_t v4 = *(uint64_t **)(a1 + 80);
        uint64_t v6 = v7;
        goto LABEL_7;
      }
    }
    uint64_t v9 = 1;
  }
  sub_10003AFB4((uint64_t)v11);
  return v9;
}

void sub_1004F1DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_1004F1E04(uint64_t a1, void **a2)
{
  v20[0] = 0;
  v20[1] = 0;
  sub_10003AED0((uint64_t)v20, a1 + 8);
  for (uint64_t i = *(void *)(a1 + 72); i != *(void *)(a1 + 80); i += 8)
  {
    uint64_t v5 = (*(uint64_t (**)(void))(**(void **)i + 16))();
    uint64_t v6 = v5;
    uint64_t v8 = (uint64_t *)a2[1];
    unint64_t v7 = (unint64_t)a2[2];
    if ((unint64_t)v8 >= v7)
    {
      uint64_t v10 = ((char *)v8 - (unsigned char *)*a2) >> 3;
      if ((unint64_t)(v10 + 1) >> 61) {
        abort();
      }
      uint64_t v11 = v7 - (void)*a2;
      uint64_t v12 = v11 >> 2;
      if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
        uint64_t v12 = v10 + 1;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13) {
        int v14 = (char *)sub_1000405F8((uint64_t)(a2 + 2), v13);
      }
      else {
        int v14 = 0;
      }
      long long v15 = (uint64_t *)&v14[8 * v10];
      uint64_t *v15 = v6;
      uint64_t v9 = v15 + 1;
      id v17 = (char *)*a2;
      long long v16 = (char *)a2[1];
      if (v16 != *a2)
      {
        do
        {
          uint64_t v18 = *((void *)v16 - 1);
          v16 -= 8;
          *--long long v15 = v18;
        }
        while (v16 != v17);
        long long v16 = (char *)*a2;
      }
      *a2 = v15;
      a2[1] = v9;
      a2[2] = &v14[8 * v13];
      if (v16) {
        operator delete(v16);
      }
    }
    else
    {
      *uint64_t v8 = v5;
      uint64_t v9 = v8 + 1;
    }
    a2[1] = v9;
  }
  return sub_10003AFB4((uint64_t)v20);
}

void sub_1004F1F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004F1F74(uint64_t a1, unsigned __int8 *a2, void **a3)
{
  v37[0] = 0;
  v37[1] = 0;
  sub_10003AED0((uint64_t)v37, a1 + 8);
  char v36 = 0;
  sub_10001B8E0(&v36);
  int v6 = sub_100115C6C();
  if ((v6 & 1) == 0) {
    sub_10001B910(&v36);
  }
  if (*(unsigned char *)(a1 + 144)) {
    goto LABEL_4;
  }
  if (!a2) {
    goto LABEL_37;
  }
  uint64_t v32 = *(unsigned __int8 **)(a1 + 120);
  __int16 v33 = *(unsigned __int8 **)(a1 + 128);
  if (v32 == v33)
  {
    int v34 = *(unsigned __int8 **)(a1 + 120);
  }
  else
  {
    while (!sub_10022A44C(v32, a2))
    {
      v32 += 20;
      if (v32 == v33)
      {
        uint64_t v32 = v33;
        break;
      }
    }
    int v34 = v32;
    uint64_t v32 = *(unsigned __int8 **)(a1 + 128);
  }
  if (v34 != v32)
  {
LABEL_4:
    for (uint64_t i = *(uint64_t **)(a1 + 72); i != *(uint64_t **)(a1 + 80); ++i)
    {
      if (a2)
      {
        uint64_t v8 = *i;
        *(_OWORD *)long long buf = *(_OWORD *)(*i + 72);
        LODWORD(v41) = *(_DWORD *)(v8 + 88);
        sub_100035F98(&v55, (__n128 *)buf);
        if (!sub_10022A44C(v9, a2)) {
          continue;
        }
      }
      uint64_t v10 = (*(uint64_t (**)(void))(*(void *)*i + 16))();
      uint64_t v11 = v10;
      unint64_t v13 = (uint64_t *)a3[1];
      unint64_t v12 = (unint64_t)a3[2];
      if ((unint64_t)v13 >= v12)
      {
        uint64_t v15 = ((char *)v13 - (unsigned char *)*a3) >> 3;
        if ((unint64_t)(v15 + 1) >> 61) {
          abort();
        }
        uint64_t v16 = v12 - (void)*a3;
        uint64_t v17 = v16 >> 2;
        if (v16 >> 2 <= (unint64_t)(v15 + 1)) {
          uint64_t v17 = v15 + 1;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v17;
        }
        if (v18) {
          xpc_object_t v19 = (char *)sub_1000405F8((uint64_t)(a3 + 2), v18);
        }
        else {
          xpc_object_t v19 = 0;
        }
        char v20 = (uint64_t *)&v19[8 * v15];
        *char v20 = v11;
        int v14 = v20 + 1;
        uint64_t v22 = (char *)*a3;
        uint64_t v21 = (char *)a3[1];
        if (v21 != *a3)
        {
          do
          {
            uint64_t v23 = *((void *)v21 - 1);
            v21 -= 8;
            *--char v20 = v23;
          }
          while (v21 != v22);
          uint64_t v21 = (char *)*a3;
        }
        *a3 = v20;
        a3[1] = v14;
        a3[2] = &v19[8 * v18];
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        *unint64_t v13 = v10;
        int v14 = v13 + 1;
      }
      a3[1] = v14;
      if (v6)
      {
        long long v53 = 0u;
        memset(v54, 0, sizeof(v54));
        long long v51 = 0u;
        long long v52 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        *(_OWORD *)long long buf = 0u;
        *(_WORD *)&buf[1] = *(_WORD *)(a1 + 146);
        buf[3] = **(unsigned char **)(*i + 8);
        uint8_t buf[4] = *(unsigned char *)(*(void *)(*i + 8) + 1);
        uint64_t v24 = *(void *)(*i + 8);
        int v25 = *(_DWORD *)(v24 + 20);
        __n128 v55 = *(__n128 *)(v24 + 4);
        int v56 = v25;
        sub_100035F98(&v39, &v55);
        buf[5] = v39.n128_u8[4];
        uint64_t v26 = *(void *)(*i + 8);
        int v27 = *(_DWORD *)(v26 + 20);
        __n128 v55 = *(__n128 *)(v26 + 4);
        int v56 = v27;
        sub_100035F98(&v39, &v55);
        buf[6] = v39.n128_u8[5];
        __src[0] = 0;
        __src[1] = 0;
        uint64_t v28 = *i;
        __n128 v55 = *(__n128 *)(*i + 72);
        int v56 = *(_DWORD *)(v28 + 88);
        sub_100035F98(&v39, &v55);
        unsigned int v29 = sub_10071D240((unsigned __int8 *)&v39, __src);
        buf[7] = v29;
        memcpy(&buf[8], __src, v29);
        sub_100116698(buf, v29 + 8);
      }
    }
    int v30 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "Cached service hit!", buf, 2u);
    }
    uint64_t v31 = 0;
  }
  else
  {
LABEL_37:
    uint64_t v31 = 1;
  }
  sub_10001B8AC(&v36);
  sub_10003AFB4((uint64_t)v37);
  return v31;
}

void sub_1004F230C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004F2358(uint64_t a1, int a2, int a3, void **a4)
{
  v32[0] = 0;
  v32[1] = 0;
  sub_10003AED0((uint64_t)v32, a1 + 8);
  for (uint64_t i = *(uint64_t **)(a1 + 72); ; ++i)
  {
    if (i == *(uint64_t **)(a1 + 80)) {
      goto LABEL_30;
    }
    uint64_t v9 = *i;
    if (**(unsigned __int16 **)(*i + 8) == a2 && *(unsigned __int16 *)(v9 + 48) == a3) {
      break;
    }
  }
  if (!*(unsigned char *)(v9 + 128))
  {
LABEL_30:
    uint64_t v26 = 1;
    goto LABEL_31;
  }
  std::string __p = 0;
  int v30 = 0;
  uint64_t v31 = 0;
  sub_100040550(&__p, v9 + 104);
  uint64_t v10 = (char *)__p;
  if (__p != v30)
  {
    do
    {
      uint64_t v11 = (*(uint64_t (**)(void))(**(void **)v10 + 16))();
      uint64_t v12 = v11;
      int v14 = (uint64_t *)a4[1];
      unint64_t v13 = (unint64_t)a4[2];
      if ((unint64_t)v14 >= v13)
      {
        uint64_t v16 = ((char *)v14 - (unsigned char *)*a4) >> 3;
        if ((unint64_t)(v16 + 1) >> 61) {
          abort();
        }
        uint64_t v17 = v13 - (void)*a4;
        uint64_t v18 = v17 >> 2;
        if (v17 >> 2 <= (unint64_t)(v16 + 1)) {
          uint64_t v18 = v16 + 1;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v18;
        }
        if (v19) {
          char v20 = (char *)sub_1000405F8((uint64_t)(a4 + 2), v19);
        }
        else {
          char v20 = 0;
        }
        uint64_t v21 = (uint64_t *)&v20[8 * v16];
        uint64_t *v21 = v12;
        uint64_t v15 = v21 + 1;
        uint64_t v23 = (char *)*a4;
        uint64_t v22 = (char *)a4[1];
        if (v22 != *a4)
        {
          do
          {
            uint64_t v24 = *((void *)v22 - 1);
            v22 -= 8;
            *--uint64_t v21 = v24;
          }
          while (v22 != v23);
          uint64_t v22 = (char *)*a4;
        }
        *a4 = v21;
        a4[1] = v15;
        a4[2] = &v20[8 * v19];
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        *int v14 = v11;
        uint64_t v15 = v14 + 1;
      }
      a4[1] = v15;
      v10 += 8;
    }
    while (v10 != v30);
  }
  int v25 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_INFO))
  {
    __int16 v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "Cached service hit!", (uint8_t *)&v28, 2u);
  }
  if (__p)
  {
    int v30 = (char *)__p;
    operator delete(__p);
  }
  uint64_t v26 = 0;
LABEL_31:
  sub_10003AFB4((uint64_t)v32);
  return v26;
}

void sub_1004F256C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t sub_1004F259C(uint64_t a1, unsigned __int8 *a2, int a3, int a4, void **a5)
{
  v48[0] = 0;
  v48[1] = 0;
  sub_10003AED0((uint64_t)v48, a1 + 8);
  char v47 = 0;
  sub_10001B8E0(&v47);
  int v10 = sub_100115C6C();
  if ((v10 & 1) == 0) {
    sub_10001B910(&v47);
  }
  uint64_t v11 = *(uint64_t **)(a1 + 72);
  uint64_t v12 = *(uint64_t **)(a1 + 80);
  if (v11 == v12) {
    goto LABEL_7;
  }
  while (1)
  {
    uint64_t v13 = *v11;
    if (**(unsigned __int16 **)(*v11 + 8) == a3 && *(unsigned __int16 *)(v13 + 48) == a4) {
      break;
    }
    if (++v11 == v12) {
      goto LABEL_7;
    }
  }
  int v16 = *(unsigned __int8 *)(v13 + 160);
  if (a2)
  {
    BOOL v17 = sub_1004F2A18(*v11, a2);
    if (v16) {
      char v18 = 1;
    }
    else {
      char v18 = v17;
    }
    if (v18) {
      goto LABEL_16;
    }
LABEL_7:
    uint64_t v14 = 1;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v13 + 160)) {
    goto LABEL_7;
  }
LABEL_16:
  unint64_t v19 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Cached characteristics hit!", buf, 2u);
  }
  std::string __p = 0;
  long long v45 = 0;
  uint64_t v46 = 0;
  sub_100040550(&__p, v13 + 136);
  char v20 = (char *)__p;
  if (__p != v45)
  {
    do
    {
      if (!a2
        || (uint64_t v21 = *(void *)v20,
            *(_OWORD *)long long buf = *(_OWORD *)(*(void *)v20 + 76),
            LODWORD(v52) = *(_DWORD *)(v21 + 92),
            sub_100035F98(&v66, (__n128 *)buf),
            sub_10022A44C(v22, a2)))
      {
        uint64_t v23 = (*(uint64_t (**)(void))(**(void **)v20 + 16))();
        uint64_t v24 = v23;
        uint64_t v26 = (uint64_t *)a5[1];
        unint64_t v25 = (unint64_t)a5[2];
        if ((unint64_t)v26 >= v25)
        {
          uint64_t v28 = ((char *)v26 - (unsigned char *)*a5) >> 3;
          if ((unint64_t)(v28 + 1) >> 61) {
            abort();
          }
          uint64_t v29 = v25 - (void)*a5;
          uint64_t v30 = v29 >> 2;
          if (v29 >> 2 <= (unint64_t)(v28 + 1)) {
            uint64_t v30 = v28 + 1;
          }
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v30;
          }
          if (v31) {
            uint64_t v32 = (char *)sub_1000405F8((uint64_t)(a5 + 2), v31);
          }
          else {
            uint64_t v32 = 0;
          }
          __int16 v33 = (uint64_t *)&v32[8 * v28];
          uint64_t *v33 = v24;
          int v27 = v33 + 1;
          uint64_t v35 = (char *)*a5;
          int v34 = (char *)a5[1];
          if (v34 != *a5)
          {
            do
            {
              uint64_t v36 = *((void *)v34 - 1);
              v34 -= 8;
              *--__int16 v33 = v36;
            }
            while (v34 != v35);
            int v34 = (char *)*a5;
          }
          *a5 = v33;
          a5[1] = v27;
          a5[2] = &v32[8 * v31];
          if (v34) {
            operator delete(v34);
          }
        }
        else
        {
          *uint64_t v26 = v23;
          int v27 = v26 + 1;
        }
        a5[1] = v27;
        if (v10)
        {
          long long v64 = 0u;
          memset(v65, 0, sizeof(v65));
          long long v62 = 0u;
          long long v63 = 0u;
          long long v60 = 0u;
          long long v61 = 0u;
          long long v58 = 0u;
          long long v59 = 0u;
          long long v56 = 0u;
          long long v57 = 0u;
          long long v54 = 0u;
          long long v55 = 0u;
          long long v52 = 0u;
          long long v53 = 0u;
          *(_OWORD *)long long buf = 0u;
          *(_WORD *)&buf[1] = *(_WORD *)(a1 + 146);
          buf[3] = **(unsigned char **)(*(void *)v20 + 8);
          uint8_t buf[4] = *(unsigned char *)(*(void *)(*(void *)v20 + 8) + 1);
          uint64_t v37 = *(void *)(*(void *)v20 + 8);
          int v38 = *(_DWORD *)(v37 + 20);
          __n128 v66 = *(__n128 *)(v37 + 4);
          int v67 = v38;
          sub_100035F98(&v50, &v66);
          buf[5] = v50.n128_u8[4];
          uint64_t v39 = *(void *)(*(void *)v20 + 8);
          int v40 = *(_DWORD *)(v39 + 20);
          __n128 v66 = *(__n128 *)(v39 + 4);
          int v67 = v40;
          sub_100035F98(&v50, &v66);
          buf[6] = v50.n128_u8[5];
          __src[0] = 0;
          __src[1] = 0;
          uint64_t v41 = *(void *)v20;
          __n128 v66 = *(__n128 *)(*(void *)v20 + 76);
          int v67 = *(_DWORD *)(v41 + 92);
          sub_100035F98(&v50, &v66);
          unsigned int v42 = sub_10071D240((unsigned __int8 *)&v50, __src);
          buf[7] = v42;
          memcpy(&buf[8], __src, v42);
          sub_100116698(buf, v42 + 8);
        }
      }
      v20 += 8;
    }
    while (v20 != v45);
  }
  long long v43 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "Cached service hit!", buf, 2u);
  }
  if (__p)
  {
    long long v45 = (char *)__p;
    operator delete(__p);
  }
  uint64_t v14 = 0;
LABEL_8:
  sub_10001B8AC(&v47);
  sub_10003AFB4((uint64_t)v48);
  return v14;
}

void sub_1004F29B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
}

BOOL sub_1004F2A18(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a1 + 168);
  size_t v3 = *(unsigned __int8 **)(a1 + 176);
  if (v2 == v3)
  {
    int v6 = *(unsigned __int8 **)(a1 + 168);
  }
  else
  {
    while (!sub_10022A44C(v2, a2))
    {
      v2 += 20;
      if (v2 == v3)
      {
        uint64_t v2 = v3;
        break;
      }
    }
    int v6 = v2;
    uint64_t v2 = *(unsigned __int8 **)(a1 + 176);
  }
  return v6 != v2;
}

uint64_t sub_1004F2A88(uint64_t a1, __int16 a2, uint64_t a3, void **a4)
{
  v36[0] = 0;
  v36[1] = 0;
  sub_10003AED0((uint64_t)v36, a1 + 8);
  uint64_t v9 = *(void *)(a1 + 104);
  uint64_t v8 = a1 + 104;
  uint64_t v7 = v9;
  if (!v9) {
    goto LABEL_38;
  }
  unsigned __int16 v10 = a2 - 2;
  uint64_t v11 = v8;
  do
  {
    unsigned int v12 = *(unsigned __int16 *)(v7 + 32);
    BOOL v13 = v12 >= v10;
    if (v12 >= v10) {
      uint64_t v14 = (uint64_t *)v7;
    }
    else {
      uint64_t v14 = (uint64_t *)(v7 + 8);
    }
    if (v13) {
      uint64_t v11 = v7;
    }
    uint64_t v7 = *v14;
  }
  while (*v14);
  if (v11 == v8) {
    goto LABEL_38;
  }
  if (*(unsigned __int16 *)(v11 + 32) > v10) {
    goto LABEL_38;
  }
  uint64_t v15 = *(void *)(*(void *)(v11 + 40) + 8);
  int v16 = *(_DWORD *)(v15 + 20);
  *(_OWORD *)long long buf = *(_OWORD *)(v15 + 4);
  LODWORD(v38) = v16;
  sub_100035F98(&v41, (__n128 *)buf);
  int v40 = 0;
  long long v39 = xmmword_1007BF3AC;
  if (!sub_10022A44C((unsigned __int8 *)&v41, (unsigned __int8 *)&v39)) {
    goto LABEL_38;
  }
  uint64_t v17 = *(void *)(v11 + 40);
  if (*(unsigned char *)(v17 + 128))
  {
    char v18 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Cached descriptors hit!", buf, 2u);
    }
    memset(buf, 0, sizeof(buf));
    uint64_t v38 = 0;
    sub_100040550(buf, v17 + 104);
    unint64_t v19 = *(char **)buf;
    if (*(void *)buf != *(void *)&buf[8])
    {
      do
      {
        uint64_t v20 = (*(uint64_t (**)(void))(**(void **)v19 + 16))();
        uint64_t v21 = v20;
        uint64_t v23 = (uint64_t *)a4[1];
        unint64_t v22 = (unint64_t)a4[2];
        if ((unint64_t)v23 >= v22)
        {
          uint64_t v25 = ((char *)v23 - (unsigned char *)*a4) >> 3;
          if ((unint64_t)(v25 + 1) >> 61) {
            abort();
          }
          uint64_t v26 = v22 - (void)*a4;
          uint64_t v27 = v26 >> 2;
          if (v26 >> 2 <= (unint64_t)(v25 + 1)) {
            uint64_t v27 = v25 + 1;
          }
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v27;
          }
          if (v28) {
            uint64_t v29 = (char *)sub_1000405F8((uint64_t)(a4 + 2), v28);
          }
          else {
            uint64_t v29 = 0;
          }
          uint64_t v30 = (uint64_t *)&v29[8 * v25];
          uint64_t *v30 = v21;
          uint64_t v24 = v30 + 1;
          uint64_t v32 = (char *)*a4;
          unint64_t v31 = (char *)a4[1];
          if (v31 != *a4)
          {
            do
            {
              uint64_t v33 = *((void *)v31 - 1);
              v31 -= 8;
              *--uint64_t v30 = v33;
            }
            while (v31 != v32);
            unint64_t v31 = (char *)*a4;
          }
          *a4 = v30;
          a4[1] = v24;
          a4[2] = &v29[8 * v28];
          if (v31) {
            operator delete(v31);
          }
        }
        else
        {
          *uint64_t v23 = v20;
          uint64_t v24 = v23 + 1;
        }
        a4[1] = v24;
        v19 += 8;
      }
      while (v19 != *(char **)&buf[8]);
      unint64_t v19 = *(char **)buf;
    }
    if (v19)
    {
      *(void *)&uint8_t buf[8] = v19;
      operator delete(v19);
    }
    uint64_t v34 = 0;
  }
  else
  {
LABEL_38:
    uint64_t v34 = 1;
  }
  sub_10003AFB4((uint64_t)v36);
  return v34;
}

void sub_1004F2D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
}

uint64_t sub_1004F2D5C(uint64_t a1, long long *a2, uint64_t **a3)
{
  v27[0] = 0;
  v27[1] = 0;
  sub_10003AED0((uint64_t)v27, a1 + 8);
  for (uint64_t i = *a3; i != a3[1]; ++i)
  {
    __n128 v34 = 0uLL;
    int v35 = 0;
    uint64_t v7 = *(void *)(*i + 8);
    int v8 = *(_DWORD *)(v7 + 20);
    __n128 v36 = *(__n128 *)(v7 + 4);
    int v37 = v8;
    sub_100035F98(&v34, &v36);
    int v33 = 0;
    long long v32 = xmmword_1007BF3C0;
    if (!sub_10022A44C((unsigned __int8 *)&v34, (unsigned __int8 *)&v32))
    {
      uint64_t v9 = qword_100A19E88;
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT)) {
        sub_100773754(v30, &v31, v9);
      }
    }
    int v29 = 0;
    long long v28 = xmmword_1007BF3C0;
    if (sub_10022A44C((unsigned __int8 *)&v34, (unsigned __int8 *)&v28)) {
      sub_1004F2FEC(a1, *i);
    }
  }
  if (a2 && !*(unsigned char *)(a1 + 144))
  {
    unint64_t v10 = *(void *)(a1 + 136);
    unint64_t v11 = *(void *)(a1 + 128);
    if (v11 >= v10)
    {
      uint64_t v14 = *(void *)(a1 + 120);
      unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - v14) >> 2);
      unint64_t v16 = v15 + 1;
      if (v15 + 1 > 0xCCCCCCCCCCCCCCCLL) {
        abort();
      }
      unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - v14) >> 2);
      if (2 * v17 > v16) {
        unint64_t v16 = 2 * v17;
      }
      if (v17 >= 0x666666666666666) {
        unint64_t v18 = 0xCCCCCCCCCCCCCCCLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18) {
        unint64_t v19 = (char *)sub_10003767C(a1 + 136, v18);
      }
      else {
        unint64_t v19 = 0;
      }
      uint64_t v20 = &v19[20 * v15];
      uint64_t v21 = &v19[20 * v18];
      long long v22 = *a2;
      *((_DWORD *)v20 + 4) = *((_DWORD *)a2 + 4);
      *(_OWORD *)uint64_t v20 = v22;
      BOOL v13 = v20 + 20;
      uint64_t v24 = *(char **)(a1 + 120);
      uint64_t v23 = *(char **)(a1 + 128);
      if (v23 != v24)
      {
        do
        {
          long long v25 = *(_OWORD *)(v23 - 20);
          *((_DWORD *)v20 - 1) = *((_DWORD *)v23 - 1);
          *(_OWORD *)(v20 - 2sub_1004C2140(qword_100A19B68, 0) = v25;
          v20 -= 20;
          v23 -= 20;
        }
        while (v23 != v24);
        uint64_t v23 = *(char **)(a1 + 120);
      }
      *(void *)(a1 + 12sub_1004C2140(qword_100A19B68, 0) = v20;
      *(void *)(a1 + 128) = v13;
      *(void *)(a1 + 136) = v21;
      if (v23) {
        operator delete(v23);
      }
    }
    else
    {
      long long v12 = *a2;
      *(_DWORD *)(v11 + 16) = *((_DWORD *)a2 + 4);
      *(_OWORD *)unint64_t v11 = v12;
      BOOL v13 = (char *)(v11 + 20);
    }
    *(void *)(a1 + 128) = v13;
  }
  else
  {
    *(unsigned char *)(a1 + 144) = 1;
  }
  return sub_10003AFB4((uint64_t)v27);
}

void sub_1004F2FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004F2FEC(uint64_t a1, uint64_t a2)
{
  v40[0] = 0;
  v40[1] = 0;
  sub_10003AED0((uint64_t)v40, a1 + 8);
  uint64_t v5 = a1 + 104;
  uint64_t v4 = *(void *)(a1 + 104);
  int v6 = (unsigned __int16 **)(a2 + 8);
  unsigned int v7 = **(unsigned __int16 **)(a2 + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v8 = a1 + 104;
  do
  {
    unsigned int v9 = *(unsigned __int16 *)(v4 + 32);
    BOOL v10 = v9 >= v7;
    if (v9 >= v7) {
      unint64_t v11 = (uint64_t *)v4;
    }
    else {
      unint64_t v11 = (uint64_t *)(v4 + 8);
    }
    if (v10) {
      uint64_t v8 = v4;
    }
    uint64_t v4 = *v11;
  }
  while (*v11);
  if (v8 == v5 || v7 < *(unsigned __int16 *)(v8 + 32)) {
LABEL_12:
  }
    uint64_t v8 = a1 + 104;
  BOOL v13 = *(char **)(a1 + 72);
  long long v12 = *(char **)(a1 + 80);
  if (v13 == v12)
  {
LABEL_17:
    int v16 = 1;
  }
  else
  {
    uint64_t v14 = *(char **)(a1 + 72);
    while (1)
    {
      uint64_t v15 = *(void *)v14;
      if (**(unsigned __int16 **)(*(void *)v14 + 8) == v7) {
        break;
      }
      v14 += 8;
      v13 += 8;
      if (v14 == v12) {
        goto LABEL_17;
      }
    }
    if (*(unsigned __int16 *)(v15 + 48) == *(unsigned __int16 *)(a2 + 48))
    {
      *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)(v15 + 72);
      LODWORD(v42.__r_.__value_.__r.__words[2]) = *(_DWORD *)(v15 + 88);
      sub_100035F98((__n128 *)&__p, (__n128 *)&v42);
      *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 72);
      LODWORD(v42.__r_.__value_.__r.__words[2]) = *(_DWORD *)(a2 + 88);
      sub_100035F98((__n128 *)buf, (__n128 *)&v42);
      if (sub_10022A44C((unsigned __int8 *)&__p, buf))
      {
        LOBYTE(v16) = 0;
        goto LABEL_46;
      }
    }
    unint64_t v17 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
    {
      sub_100613B58(*(void **)v14, &v42);
      int v36 = SHIBYTE(v42.__r_.__value_.__r.__words[2]);
      std::string::size_type v37 = v42.__r_.__value_.__r.__words[0];
      sub_100613B58((void *)a2, &__p);
      uint64_t v38 = &v42;
      if (v36 < 0) {
        uint64_t v38 = (std::string *)v37;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 136446466;
      long long v44 = v38;
      __int16 v45 = 2082;
      uint64_t v46 = p_p;
      _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Service changed while cached (was: \"%{public}s\", now: \"%{public}s\") - removing it", buf, 0x16u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v42.__r_.__value_.__l.__data_);
      }
    }
    sub_1004F5A9C(a1, v13);
    int v16 = 0;
  }
  unint64_t v18 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  unint64_t v19 = *(void *)(a1 + 88);
  uint64_t v20 = *(uint64_t ***)(a1 + 80);
  if ((unint64_t)v20 >= v19)
  {
    uint64_t v22 = *(void *)(a1 + 72);
    uint64_t v23 = ((uint64_t)v20 - v22) >> 3;
    if ((unint64_t)(v23 + 1) >> 61) {
      abort();
    }
    uint64_t v24 = v19 - v22;
    uint64_t v25 = v24 >> 2;
    if (v24 >> 2 <= (unint64_t)(v23 + 1)) {
      uint64_t v25 = v23 + 1;
    }
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v26 = v25;
    }
    if (v26) {
      uint64_t v27 = (char *)sub_1000405F8(a1 + 88, v26);
    }
    else {
      uint64_t v27 = 0;
    }
    long long v28 = (uint64_t **)&v27[8 * v23];
    int v29 = &v27[8 * v26];
    *long long v28 = v18;
    uint64_t v21 = v28 + 1;
    uint64_t v31 = *(char **)(a1 + 72);
    uint64_t v30 = *(char **)(a1 + 80);
    if (v30 != v31)
    {
      do
      {
        long long v32 = (uint64_t *)*((void *)v30 - 1);
        v30 -= 8;
        *--long long v28 = v32;
      }
      while (v30 != v31);
      uint64_t v30 = *(char **)(a1 + 72);
    }
    *(void *)(a1 + 72) = v28;
    *(void *)(a1 + 8sub_1004C2140(qword_100A19B68, 0) = v21;
    *(void *)(a1 + 88) = v29;
    if (v30) {
      operator delete(v30);
    }
  }
  else
  {
    *uint64_t v20 = v18;
    uint64_t v21 = v20 + 1;
  }
  *(void *)(a1 + 8sub_1004C2140(qword_100A19B68, 0) = v21;
  LOWORD(__p.__r_.__value_.__l.__data_) = **v6;
  v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  sub_1002CBD28((uint64_t **)(a1 + 96), (unsigned __int16 *)&__p, (uint64_t)&unk_1007BE9D0, &v42)[5] = v18;
  if (v8 == v5) {
    int v33 = 0;
  }
  else {
    int v33 = v16;
  }
  if (v33 == 1)
  {
    __n128 v34 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT)) {
      sub_100773798(v6, v34);
    }
    LOWORD(v42.__r_.__value_.__l.__data_) = **v6;
    sub_1003BA1D0(a1 + 96, (unsigned __int16 *)&v42);
    return sub_10003AFB4((uint64_t)v40);
  }
LABEL_46:
  if ((v16 & 1) == 0 && v8 == v5 && os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT))
  {
    sub_100613B58((void *)a2, &v42);
    sub_100773818();
  }
  return sub_10003AFB4((uint64_t)v40);
}

void sub_1004F33E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

uint64_t sub_1004F3434(void *a1, uint64_t **a2, unsigned int a3, unsigned int a4)
{
  v20[0] = 0;
  v20[1] = 0;
  sub_10003AED0((uint64_t)v20, (uint64_t)(a1 + 1));
  uint64_t v8 = *a2;
  unsigned int v9 = a2[1];
  if (*a2 != v9)
  {
    do
    {
      uint64_t v10 = *v8;
      __n128 v29 = 0uLL;
      int v30 = 0;
      uint64_t v11 = *(void *)(v10 + 8);
      int v12 = *(_DWORD *)(v11 + 20);
      __n128 buf = *(__n128 *)(v11 + 4);
      int v32 = v12;
      sub_100035F98(&v29, &buf);
      int v28 = 0;
      long long v27 = xmmword_1007BF3D4;
      if (!sub_10022A44C((unsigned __int8 *)&v29, (unsigned __int8 *)&v27))
      {
        BOOL v13 = qword_100A19E88;
        if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT)) {
          sub_10077386C(v25, &v26, v13);
        }
      }
      int v24 = 0;
      long long v23 = xmmword_1007BF3D4;
      if (sub_10022A44C((unsigned __int8 *)&v29, (unsigned __int8 *)&v23))
      {
        sub_1004F3778(a1, v10);
        for (uint64_t i = a1[9]; ; i += 8)
        {
          if (i == a1[10])
          {
            uint64_t v15 = qword_100A19E88;
            if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_INFO))
            {
              buf.n128_u16[0] = 0;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Adding New Service Declaration For An Recently Discovered Included Service", (uint8_t *)&buf, 2u);
            }
            __n128 v21 = 0uLL;
            int v22 = 0;
            __n128 buf = *(__n128 *)(v10 + 76);
            int v32 = *(_DWORD *)(v10 + 92);
            sub_100035F98(&v21, &buf);
            operator new();
          }
          if (**(unsigned __int16 **)(*(void *)i + 8) == *(unsigned __int16 *)(v10 + 72)) {
            break;
          }
        }
      }
      ++v8;
    }
    while (v8 != v9);
  }
  int v16 = (uint64_t *)a1[9];
  for (uint64_t j = (uint64_t *)a1[10]; v16 != j; ++v16)
  {
    uint64_t v18 = *v16;
    if (**(unsigned __int16 **)(*v16 + 8) >= a3 && *(unsigned __int16 *)(v18 + 48) <= a4) {
      *(unsigned char *)(v18 + 128) = 1;
    }
  }
  return sub_10003AFB4((uint64_t)v20);
}

void sub_1004F3750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

uint64_t sub_1004F3778(void *a1, uint64_t a2)
{
  v35[0] = 0;
  v35[1] = 0;
  sub_10003AED0((uint64_t)v35, (uint64_t)(a1 + 1));
  uint64_t v5 = a1 + 13;
  uint64_t v4 = a1[13];
  int v6 = (uint64_t **)(a1 + 12);
  unsigned int v7 = **(unsigned __int16 **)(a2 + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v8 = a1 + 13;
  do
  {
    unsigned int v9 = *(unsigned __int16 *)(v4 + 32);
    BOOL v10 = v9 >= v7;
    if (v9 >= v7) {
      uint64_t v11 = (uint64_t *)v4;
    }
    else {
      uint64_t v11 = (uint64_t *)(v4 + 8);
    }
    if (v10) {
      uint64_t v8 = (void *)v4;
    }
    uint64_t v4 = *v11;
  }
  while (*v11);
  if (v8 == v5 || v7 < *((unsigned __int16 *)v8 + 16)) {
LABEL_12:
  }
    uint64_t v8 = a1 + 13;
  BOOL v13 = (void **)a1[9];
  int v12 = (void **)a1[10];
  if (v13 != v12)
  {
    while (v7 <= *(unsigned __int16 *)(*v13)[1] || v7 > *((unsigned __int16 *)*v13 + 24))
    {
      if (++v13 == v12) {
        goto LABEL_33;
      }
    }
  }
  if (v13 == v12)
  {
LABEL_33:
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
    {
      sub_100613B58((void *)a2, &v34);
      sub_100773904();
    }
    int v21 = 0;
    goto LABEL_45;
  }
  uint64_t v14 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_INFO))
  {
    sub_100613B58(*v13, &v34);
    int v15 = SHIBYTE(v34.__r_.__value_.__r.__words[2]);
    std::string::size_type v16 = v34.__r_.__value_.__r.__words[0];
    sub_100613B58((void *)a2, &__p);
    unint64_t v17 = &v34;
    if (v15 < 0) {
      unint64_t v17 = (std::string *)v16;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_p;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Found service \"%{public}s\" for included service \"%{public}s\"", (uint8_t *)&buf, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
  }
  memset(&v34, 0, sizeof(v34));
  sub_100040550(&v34, (uint64_t)(*v13 + 13));
  unint64_t v19 = (uint64_t *)v34.__r_.__value_.__r.__words[0];
  if (v34.__r_.__value_.__r.__words[0] == v34.__r_.__value_.__l.__size_)
  {
LABEL_32:
    int v21 = 0;
  }
  else
  {
    while (1)
    {
      uint64_t v20 = *v19;
      if (**(unsigned __int16 **)(*v19 + 8) == **(unsigned __int16 **)(a2 + 8)) {
        break;
      }
      if (++v19 == (uint64_t *)v34.__r_.__value_.__l.__size_) {
        goto LABEL_32;
      }
    }
    if (*(unsigned __int16 *)(v20 + 72) == *(unsigned __int16 *)(a2 + 72)
      && *(unsigned __int16 *)(v20 + 74) == *(unsigned __int16 *)(a2 + 74))
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)(v20 + 76);
      LODWORD(__p.__r_.__value_.__r.__words[2]) = *(_DWORD *)(v20 + 92);
      sub_100035F98((__n128 *)&buf, (__n128 *)&__p);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 76);
      LODWORD(__p.__r_.__value_.__r.__words[2]) = *(_DWORD *)(a2 + 92);
      sub_100035F98((__n128 *)v37, (__n128 *)&__p);
      if (sub_10022A44C((unsigned __int8 *)&buf, v37))
      {
        int v21 = 1;
        goto LABEL_43;
      }
    }
    int v22 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
    {
      sub_100613B58((void *)*v19, &__p);
      int v30 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      std::string::size_type v31 = __p.__r_.__value_.__r.__words[0];
      sub_100613B58((void *)a2, &buf);
      int v32 = &__p;
      if (v30 < 0) {
        int v32 = (std::string *)v31;
      }
      p_std::string buf = &buf;
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string::size_type v37 = 136446466;
      uint64_t v38 = v32;
      __int16 v39 = 2082;
      int v40 = p_buf;
      _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Included service changed while cached (was: \"%{public}s\", now: \"%{public}s\") - removing it", v37, 0x16u);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    LOWORD(__p.__r_.__value_.__l.__data_) = **(_WORD **)(a2 + 8);
    sub_1003BA1D0((uint64_t)v6, (unsigned __int16 *)&__p);
    sub_1002F9F28(*v13, *v19);
    int v21 = 1;
  }
  long long v23 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  sub_100421324(*v13, (uint64_t)v23);
  LOWORD(buf.__r_.__value_.__l.__data_) = **(_WORD **)(a2 + 8);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
  sub_1002CBD28(v6, (unsigned __int16 *)&buf, (uint64_t)&unk_1007BE9D0, &__p)[5] = v23;
LABEL_43:
  if (v34.__r_.__value_.__r.__words[0])
  {
    v34.__r_.__value_.__l.__size_ = v34.__r_.__value_.__r.__words[0];
    operator delete(v34.__r_.__value_.__l.__data_);
  }
LABEL_45:
  if ((v21 & 1) != 0 || v8 == v5)
  {
    if (v8 == v5) {
      int v27 = v21;
    }
    else {
      int v27 = 0;
    }
    if (v27 == 1 && os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT))
    {
      sub_100613B58((void *)a2, &__p);
      sub_1007738B0();
    }
  }
  else
  {
    int v24 = qword_100A19E88;
    BOOL v25 = os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT);
    uint64_t v26 = *(_WORD **)(a2 + 8);
    if (v25)
    {
      int v29 = (unsigned __int16)*v26;
      LODWORD(__p.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = v29;
      _os_log_fault_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "Found orphaned handle 0x%04x in handle map", (uint8_t *)&__p, 8u);
      uint64_t v26 = *(_WORD **)(a2 + 8);
    }
    LOWORD(__p.__r_.__value_.__l.__data_) = *v26;
    sub_1003BA1D0((uint64_t)v6, (unsigned __int16 *)&__p);
  }
  return sub_10003AFB4((uint64_t)v35);
}

void sub_1004F3C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1004F3CF4(void *a1, long long *a2, uint64_t **a3, unsigned int a4, unsigned int a5)
{
  v18[0] = 0;
  v18[1] = 0;
  sub_10003AED0((uint64_t)v18, (uint64_t)(a1 + 1));
  for (uint64_t i = *a3; i != a3[1]; ++i)
  {
    __n128 v25 = 0uLL;
    int v26 = 0;
    uint64_t v11 = *(void *)(*i + 8);
    int v12 = *(_DWORD *)(v11 + 20);
    __n128 v27 = *(__n128 *)(v11 + 4);
    int v28 = v12;
    sub_100035F98(&v25, &v27);
    int v24 = 0;
    long long v23 = xmmword_1007BF3AC;
    if (!sub_10022A44C((unsigned __int8 *)&v25, (unsigned __int8 *)&v23))
    {
      BOOL v13 = qword_100A19E88;
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT)) {
        sub_100773958(v21, &v22, v13);
      }
    }
    int v20 = 0;
    long long v19 = xmmword_1007BF3AC;
    if (sub_10022A44C((unsigned __int8 *)&v25, (unsigned __int8 *)&v19)) {
      sub_1004F3ED0(a1, *i);
    }
  }
  int v15 = (uint64_t *)a1[9];
  for (uint64_t j = (uint64_t *)a1[10]; v15 != j; ++v15)
  {
    uint64_t v16 = *v15;
    if (**(unsigned __int16 **)(*v15 + 8) >= a4 && *(unsigned __int16 *)(v16 + 48) <= a5)
    {
      if (a2)
      {
        sub_1004F4448((void *)v16, a2);
        uint64_t j = (uint64_t *)a1[10];
      }
      else
      {
        *(unsigned char *)(v16 + 16sub_1004C2140(qword_100A19B68, 0) = 1;
      }
    }
  }
  return sub_10003AFB4((uint64_t)v18);
}

void sub_1004F3EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004F3ED0(void *a1, uint64_t a2)
{
  v35[0] = 0;
  v35[1] = 0;
  sub_10003AED0((uint64_t)v35, (uint64_t)(a1 + 1));
  uint64_t v5 = a1 + 13;
  uint64_t v4 = a1[13];
  int v6 = (uint64_t **)(a1 + 12);
  unsigned int v7 = **(unsigned __int16 **)(a2 + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v8 = a1 + 13;
  do
  {
    unsigned int v9 = *(unsigned __int16 *)(v4 + 32);
    BOOL v10 = v9 >= v7;
    if (v9 >= v7) {
      uint64_t v11 = (uint64_t *)v4;
    }
    else {
      uint64_t v11 = (uint64_t *)(v4 + 8);
    }
    if (v10) {
      uint64_t v8 = (void *)v4;
    }
    uint64_t v4 = *v11;
  }
  while (*v11);
  if (v8 == v5 || v7 < *((unsigned __int16 *)v8 + 16)) {
LABEL_12:
  }
    uint64_t v8 = a1 + 13;
  BOOL v13 = (void **)a1[9];
  int v12 = (void **)a1[10];
  if (v13 != v12)
  {
    while (v7 <= *(unsigned __int16 *)(*v13)[1] || v7 > *((unsigned __int16 *)*v13 + 24))
    {
      if (++v13 == v12) {
        goto LABEL_33;
      }
    }
  }
  if (v13 == v12)
  {
LABEL_33:
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
    {
      sub_100613B58((void *)a2, &v34);
      sub_10077399C();
    }
    int v21 = 0;
    goto LABEL_45;
  }
  uint64_t v14 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_INFO))
  {
    sub_100613B58(*v13, &v34);
    int v15 = SHIBYTE(v34.__r_.__value_.__r.__words[2]);
    std::string::size_type v16 = v34.__r_.__value_.__r.__words[0];
    sub_100613B58((void *)a2, &__p);
    unint64_t v17 = &v34;
    if (v15 < 0) {
      unint64_t v17 = (std::string *)v16;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_p;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Found service \"%{public}s\" for characteristic \"%{public}s\"", (uint8_t *)&buf, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
  }
  memset(&v34, 0, sizeof(v34));
  sub_100040550(&v34, (uint64_t)(*v13 + 17));
  long long v19 = (uint64_t *)v34.__r_.__value_.__r.__words[0];
  if (v34.__r_.__value_.__r.__words[0] == v34.__r_.__value_.__l.__size_)
  {
LABEL_32:
    int v21 = 0;
  }
  else
  {
    while (1)
    {
      uint64_t v20 = *v19;
      if (**(unsigned __int16 **)(*v19 + 8) == **(unsigned __int16 **)(a2 + 8)) {
        break;
      }
      if (++v19 == (uint64_t *)v34.__r_.__value_.__l.__size_) {
        goto LABEL_32;
      }
    }
    if (*(unsigned __int16 *)(v20 + 74) == *(unsigned __int16 *)(a2 + 74))
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)(v20 + 76);
      LODWORD(__p.__r_.__value_.__r.__words[2]) = *(_DWORD *)(v20 + 92);
      sub_100035F98((__n128 *)&buf, (__n128 *)&__p);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 76);
      LODWORD(__p.__r_.__value_.__r.__words[2]) = *(_DWORD *)(a2 + 92);
      sub_100035F98((__n128 *)v37, (__n128 *)&__p);
      if (sub_10022A44C((unsigned __int8 *)&buf, v37)
        && *(unsigned __int8 *)(*v19 + 72) == *(unsigned __int8 *)(a2 + 72))
      {
        int v21 = 1;
        goto LABEL_43;
      }
    }
    uint64_t v22 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
    {
      sub_100613B58((void *)*v19, &__p);
      int v30 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      std::string::size_type v31 = __p.__r_.__value_.__r.__words[0];
      sub_100613B58((void *)a2, &buf);
      int v32 = &__p;
      if (v30 < 0) {
        int v32 = (std::string *)v31;
      }
      p_std::string buf = &buf;
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string::size_type v37 = 136446466;
      uint64_t v38 = v32;
      __int16 v39 = 2082;
      int v40 = p_buf;
      _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Characteristic changed while cached (was: \"%{public}s\", now: \"%{public}s\") - removing it", v37, 0x16u);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    sub_1004F5C78((uint64_t)a1, *v13, *v19);
    int v21 = 1;
  }
  long long v23 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  sub_100420830(*v13, (uint64_t)v23);
  LOWORD(buf.__r_.__value_.__l.__data_) = **(_WORD **)(a2 + 8);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
  sub_1002CBD28(v6, (unsigned __int16 *)&buf, (uint64_t)&unk_1007BE9D0, &__p)[5] = v23;
LABEL_43:
  if (v34.__r_.__value_.__r.__words[0])
  {
    v34.__r_.__value_.__l.__size_ = v34.__r_.__value_.__r.__words[0];
    operator delete(v34.__r_.__value_.__l.__data_);
  }
LABEL_45:
  if ((v21 & 1) != 0 || v8 == v5)
  {
    if (v8 == v5) {
      int v27 = v21;
    }
    else {
      int v27 = 0;
    }
    if (v27 == 1 && os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT))
    {
      sub_100613B58((void *)a2, &__p);
      sub_1007738B0();
    }
  }
  else
  {
    int v24 = qword_100A19E88;
    BOOL v25 = os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT);
    int v26 = *(_WORD **)(a2 + 8);
    if (v25)
    {
      int v29 = (unsigned __int16)*v26;
      LODWORD(__p.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = v29;
      _os_log_fault_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "Found orphaned handle 0x%04x in handle map", (uint8_t *)&__p, 8u);
      int v26 = *(_WORD **)(a2 + 8);
    }
    LOWORD(__p.__r_.__value_.__l.__data_) = *v26;
    sub_1003BA1D0((uint64_t)v6, (unsigned __int16 *)&__p);
  }
  return sub_10003AFB4((uint64_t)v35);
}

void sub_1004F43C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1004F4448(void *a1, long long *a2)
{
  unint64_t v6 = a1[23];
  uint64_t v4 = (uint64_t)(a1 + 23);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = a1[21];
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - v10) >> 2);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0xCCCCCCCCCCCCCCCLL) {
      abort();
    }
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - v10) >> 2);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x666666666666666) {
      unint64_t v14 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14) {
      int v15 = (char *)sub_10003767C(v4, v14);
    }
    else {
      int v15 = 0;
    }
    std::string::size_type v16 = &v15[20 * v11];
    unint64_t v17 = &v15[20 * v14];
    long long v18 = *a2;
    *((_DWORD *)v16 + 4) = *((_DWORD *)a2 + 4);
    *(_OWORD *)std::string::size_type v16 = v18;
    unsigned int v9 = v16 + 20;
    uint64_t v20 = (char *)a1[21];
    long long v19 = (char *)a1[22];
    if (v19 != v20)
    {
      do
      {
        long long v21 = *(_OWORD *)(v19 - 20);
        *((_DWORD *)v16 - 1) = *((_DWORD *)v19 - 1);
        *(_OWORD *)(v16 - 2sub_1004C2140(qword_100A19B68, 0) = v21;
        v16 -= 20;
        v19 -= 20;
      }
      while (v19 != v20);
      long long v19 = (char *)a1[21];
    }
    a1[21] = v16;
    a1[22] = v9;
    a1[23] = v17;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    long long v8 = *a2;
    *(_DWORD *)(v7 + 16) = *((_DWORD *)a2 + 4);
    *(_OWORD *)unint64_t v7 = v8;
    unsigned int v9 = (char *)(v7 + 20);
  }
  a1[22] = v9;
}

uint64_t sub_1004F456C(uint64_t a1, uint64_t a2, int a3)
{
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 8);
  sub_1004F45E0(a1, a2, a3);
  return sub_10003AFB4((uint64_t)v7);
}

void sub_1004F45CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004F45E0(uint64_t a1, uint64_t a2, int a3)
{
  v20[0] = 0;
  v20[1] = 0;
  sub_10003AED0((uint64_t)v20, a1 + 8);
  unint64_t v7 = *(void ***)(a1 + 72);
  unint64_t v6 = *(void ***)(a1 + 80);
  if (v7 != v6)
  {
    unsigned int v8 = **(unsigned __int16 **)(a2 + 8);
    while (v8 <= *(unsigned __int16 *)(*v7)[1] || v8 > *((unsigned __int16 *)*v7 + 24))
    {
      if (++v7 == v6) {
        goto LABEL_24;
      }
    }
  }
  if (v7 == v6)
  {
LABEL_24:
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
    {
      sub_100613B58((void *)a2, &v19);
      sub_1007739F0();
    }
  }
  else
  {
    unsigned int v9 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_INFO))
    {
      sub_100613B58(*v7, &v19);
      int v10 = SHIBYTE(v19.__r_.__value_.__r.__words[2]);
      std::string::size_type v11 = v19.__r_.__value_.__r.__words[0];
      sub_100613B58((void *)a2, &__p);
      unint64_t v12 = &v19;
      if (v10 < 0) {
        unint64_t v12 = (std::string *)v11;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136446466;
      long long v23 = v12;
      __int16 v24 = 2082;
      BOOL v25 = p_p;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Found service \"%{public}s\" for value \"%{public}s\"", buf, 0x16u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19.__r_.__value_.__l.__data_);
      }
    }
    memset(&v19, 0, sizeof(v19));
    sub_100040550(&v19, (uint64_t)(*v7 + 17));
    std::string::size_type v14 = v19.__r_.__value_.__r.__words[0];
    if (v19.__r_.__value_.__r.__words[0] == v19.__r_.__value_.__l.__size_)
    {
LABEL_21:
      if (a3 && os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
      {
        sub_100613B58((void *)a2, &__p);
        sub_100773A44();
      }
    }
    else
    {
      while (**(unsigned __int16 **)(a2 + 8) - 1 != **(unsigned __int16 **)(*(void *)v14 + 8))
      {
        v14 += 8;
        if (v14 == v19.__r_.__value_.__l.__size_) {
          goto LABEL_21;
        }
      }
      int v15 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      uint64_t v16 = *(void *)v14;
      uint64_t v17 = *(void *)(v16 + 96);
      if (v17) {
        (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
      }
      *(void *)(v16 + 96) = v15;
      *(_WORD *)std::string buf = **(_WORD **)(a2 + 8);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
      sub_1002CBD28((uint64_t **)(a1 + 96), (unsigned __int16 *)buf, (uint64_t)&unk_1007BE9D0, &__p)[5] = v15;
    }
    if (v19.__r_.__value_.__r.__words[0])
    {
      v19.__r_.__value_.__l.__size_ = v19.__r_.__value_.__r.__words[0];
      operator delete(v19.__r_.__value_.__l.__data_);
    }
  }
  return sub_10003AFB4((uint64_t)v20);
}

void sub_1004F48DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1004F4934(void *a1, uint64_t **a2, __int16 a3)
{
  v18[0] = 0;
  v18[1] = 0;
  sub_10003AED0((uint64_t)v18, (uint64_t)(a1 + 1));
  for (uint64_t i = *a2; i != a2[1]; ++i)
    sub_1004F4A88(a1, *i);
  uint64_t v9 = a1[13];
  unsigned int v8 = a1 + 13;
  uint64_t v7 = v9;
  if (v9)
  {
    unsigned __int16 v10 = a3 - 2;
    std::string::size_type v11 = v8;
    do
    {
      unsigned int v12 = *(unsigned __int16 *)(v7 + 32);
      BOOL v13 = v12 >= v10;
      if (v12 >= v10) {
        std::string::size_type v14 = (uint64_t *)v7;
      }
      else {
        std::string::size_type v14 = (uint64_t *)(v7 + 8);
      }
      if (v13) {
        std::string::size_type v11 = (void *)v7;
      }
      uint64_t v7 = *v14;
    }
    while (*v14);
    if (v11 != v8 && *((unsigned __int16 *)v11 + 16) <= v10)
    {
      uint64_t v15 = *(void *)(v11[5] + 8);
      int v16 = *(_DWORD *)(v15 + 20);
      __n128 v22 = *(__n128 *)(v15 + 4);
      int v23 = v16;
      sub_100035F98(&v21, &v22);
      int v20 = 0;
      long long v19 = xmmword_1007BF3AC;
      if (sub_10022A44C((unsigned __int8 *)&v21, (unsigned __int8 *)&v19)) {
        *(unsigned char *)(v11[5] + 128) = 1;
      }
    }
  }
  return sub_10003AFB4((uint64_t)v18);
}

void sub_1004F4A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004F4A88(void *a1, uint64_t a2)
{
  v59[0] = 0;
  v59[1] = 0;
  sub_10003AED0((uint64_t)v59, (uint64_t)(a1 + 1));
  unint64_t v5 = a1 + 13;
  uint64_t v4 = a1[13];
  unint64_t v6 = (uint64_t **)(a1 + 12);
  unsigned int v7 = **(unsigned __int16 **)(a2 + 8);
  if (!v4) {
    goto LABEL_12;
  }
  unsigned int v8 = a1 + 13;
  do
  {
    unsigned int v9 = *(unsigned __int16 *)(v4 + 32);
    BOOL v10 = v9 >= v7;
    if (v9 >= v7) {
      std::string::size_type v11 = (uint64_t *)v4;
    }
    else {
      std::string::size_type v11 = (uint64_t *)(v4 + 8);
    }
    if (v10) {
      unsigned int v8 = (void *)v4;
    }
    uint64_t v4 = *v11;
  }
  while (*v11);
  if (v8 == v5 || v7 < *((unsigned __int16 *)v8 + 16)) {
LABEL_12:
  }
    unsigned int v8 = a1 + 13;
  BOOL v13 = (void **)a1[9];
  unsigned int v12 = (void **)a1[10];
  if (v13 != v12)
  {
    while (v7 <= *(unsigned __int16 *)(*v13)[1] || v7 > *((unsigned __int16 *)*v13 + 24))
    {
      if (++v13 == v12) {
        goto LABEL_52;
      }
    }
  }
  if (v13 == v12)
  {
LABEL_52:
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
    {
      sub_100613B58((void *)a2, &__p);
      sub_100773AEC();
    }
    int v33 = 0;
    goto LABEL_92;
  }
  std::string::size_type v14 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_INFO))
  {
    sub_100613B58(*v13, &__p);
    int v15 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    std::string::size_type v16 = __p.__r_.__value_.__r.__words[0];
    sub_100613B58((void *)a2, &v68);
    p_p = &__p;
    if (v15 < 0) {
      p_p = (std::string *)v16;
    }
    if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v18 = &v68;
    }
    else {
      long long v18 = (std::string *)v68.__r_.__value_.__r.__words[0];
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v18;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Found service \"%{public}s\" for descriptor \"%{public}s\"", (uint8_t *)&buf, 0x16u);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v68.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  memset(&__p, 0, sizeof(__p));
  sub_100040550(&__p, (uint64_t)(*v13 + 17));
  long long v19 = (void **)__p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
  {
    while (1)
    {
      memset(&v68, 0, sizeof(v68));
      sub_100040550(&v68, (uint64_t)(*v19 + 13));
      int v20 = (void *)v68.__r_.__value_.__r.__words[0];
      if (v68.__r_.__value_.__r.__words[0] != v68.__r_.__value_.__l.__size_) {
        break;
      }
LABEL_34:
      char v23 = 1;
      if (v68.__r_.__value_.__r.__words[0]) {
        goto LABEL_35;
      }
LABEL_36:
      if ((v23 & 1) == 0)
      {
        int v33 = 1;
        goto LABEL_90;
      }
      if (++v19 == (void **)__p.__r_.__value_.__l.__size_) {
        goto LABEL_55;
      }
    }
    __n128 v21 = (uint64_t *)v68.__r_.__value_.__r.__words[0];
    while (1)
    {
      __n128 v22 = *(unsigned __int16 **)(*v21 + 8);
      if (*v22 == **(unsigned __int16 **)(a2 + 8)) {
        break;
      }
      if (++v21 == (uint64_t *)v68.__r_.__value_.__l.__size_) {
        goto LABEL_34;
      }
    }
    long long v24 = *(_OWORD *)(v22 + 2);
    LODWORD(buf.__r_.__value_.__r.__words[2]) = *((_DWORD *)v22 + 5);
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v24;
    sub_100035F98((__n128 *)&v62, (__n128 *)&buf);
    uint64_t v25 = *(void *)(a2 + 8);
    int v26 = *(_DWORD *)(v25 + 20);
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = *(_OWORD *)(v25 + 4);
    LODWORD(buf.__r_.__value_.__r.__words[2]) = v26;
    sub_100035F98((__n128 *)v64, (__n128 *)&buf);
    if (!sub_10022A44C((unsigned __int8 *)&v62, v64))
    {
      int v27 = qword_100A19E88;
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
      {
        sub_100613B58((void *)*v21, &buf);
        int v29 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
        std::string::size_type v30 = buf.__r_.__value_.__r.__words[0];
        sub_100613B58((void *)a2, &v62);
        p_std::string buf = &buf;
        if (v29 < 0) {
          p_std::string buf = (std::string *)v30;
        }
        if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v32 = &v62;
        }
        else {
          int v32 = (std::string *)v62.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)long long v64 = 136446466;
        int v65 = p_buf;
        __int16 v66 = 2082;
        int v67 = v32;
        _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "Replacing cached descriptor \"%{public}s\" with descriptor of different type \"%{public}s\"", v64, 0x16u);
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v62.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
      }
    }
    sub_1002F9F28(*v19, *v21);
    int v28 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    sub_100421324(*v19, (uint64_t)v28);
    LOWORD(v62.__r_.__value_.__l.__data_) = **(_WORD **)(a2 + 8);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v62;
    char v23 = 0;
    sub_1002CBD28(v6, (unsigned __int16 *)&v62, (uint64_t)&unk_1007BE9D0, &buf)[5] = v28;
    int v20 = (void *)v68.__r_.__value_.__r.__words[0];
    if (!v68.__r_.__value_.__r.__words[0]) {
      goto LABEL_36;
    }
LABEL_35:
    v68.__r_.__value_.__l.__size_ = (std::string::size_type)v20;
    operator delete(v20);
    goto LABEL_36;
  }
LABEL_55:
  int v34 = **(unsigned __int16 **)(a2 + 8);
  int v35 = v34 - 1;
  unsigned int v36 = *(unsigned __int16 *)(*v13)[1];
  if (v36 >= (unsigned __int16)(v34 - 1)) {
    goto LABEL_89;
  }
  while (1)
  {
    __int16 v37 = v34;
    int v34 = v35;
    uint64_t v38 = *v5;
    if (*v5) {
      break;
    }
    if ((unsigned __int16)v36 + 1 < (unsigned __int16)v34) {
      goto LABEL_87;
    }
LABEL_84:
    int v35 = v34 - 1;
    if ((unsigned __int16)(v34 - 1) <= (unsigned __int16)v36) {
      goto LABEL_89;
    }
  }
  __int16 v39 = v5;
  uint64_t v40 = *v5;
  do
  {
    unsigned int v41 = *(unsigned __int16 *)(v40 + 32);
    BOOL v42 = v41 >= (unsigned __int16)v34;
    if (v41 >= (unsigned __int16)v34) {
      long long v43 = (uint64_t *)v40;
    }
    else {
      long long v43 = (uint64_t *)(v40 + 8);
    }
    if (v42) {
      __int16 v39 = (void *)v40;
    }
    uint64_t v40 = *v43;
  }
  while (*v43);
  if (v39 != v5 && *((unsigned __int16 *)v39 + 16) <= (unsigned __int16)v34)
  {
    uint64_t v49 = *(void *)(v39[5] + 8);
    int v50 = *(_DWORD *)(v49 + 20);
    *(_OWORD *)&v68.__r_.__value_.__l.__data_ = *(_OWORD *)(v49 + 4);
    LODWORD(v68.__r_.__value_.__r.__words[2]) = v50;
    sub_100035F98((__n128 *)&buf, (__n128 *)&v68);
    int v61 = 0;
    long long v60 = xmmword_1007BF3AC;
    if (sub_10022A44C((unsigned __int8 *)&buf, (unsigned __int8 *)&v60))
    {
      long long v57 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      sub_100421324((void *)v39[5], (uint64_t)v57);
      LOWORD(buf.__r_.__value_.__l.__data_) = **(_WORD **)(a2 + 8);
      v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
      int v33 = 0;
      sub_1002CBD28(v6, (unsigned __int16 *)&buf, (uint64_t)&unk_1007BE9D0, &v68)[5] = v57;
      goto LABEL_90;
    }
    LOWORD(v36) = *(_WORD *)(*v13)[1];
    goto LABEL_84;
  }
  if ((unsigned __int16)v36 + 1 >= (unsigned __int16)v34) {
    goto LABEL_84;
  }
  if (v38)
  {
    unsigned __int16 v44 = v37 - 2;
    __int16 v45 = v5;
    do
    {
      unsigned int v46 = *(unsigned __int16 *)(v38 + 32);
      BOOL v47 = v46 >= v44;
      if (v46 >= v44) {
        long long v48 = (uint64_t *)v38;
      }
      else {
        long long v48 = (uint64_t *)(v38 + 8);
      }
      if (v47) {
        __int16 v45 = (void *)v38;
      }
      uint64_t v38 = *v48;
    }
    while (*v48);
    if (v45 != v5 && *((unsigned __int16 *)v45 + 16) <= v44) {
      goto LABEL_84;
    }
  }
LABEL_87:
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
  {
    sub_100613B58((void *)a2, &v68);
    sub_100773B40();
  }
LABEL_89:
  int v33 = 0;
LABEL_90:
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_92:
  if ((v33 & 1) != 0 || v8 == v5)
  {
    if (v8 == v5) {
      int v54 = v33;
    }
    else {
      int v54 = 0;
    }
    if (v54 == 1 && os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT))
    {
      sub_100613B58((void *)a2, &buf);
      sub_100773A98();
    }
  }
  else
  {
    long long v51 = qword_100A19E88;
    BOOL v52 = os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT);
    long long v53 = *(_WORD **)(a2 + 8);
    if (v52)
    {
      int v56 = (unsigned __int16)*v53;
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v56;
      _os_log_fault_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_FAULT, "Found orphaned handle 0x%04x in handle map", (uint8_t *)&buf, 8u);
      long long v53 = *(_WORD **)(a2 + 8);
    }
    LOWORD(buf.__r_.__value_.__l.__data_) = *v53;
    sub_1003BA1D0((uint64_t)v6, (unsigned __int16 *)&buf);
  }
  return sub_10003AFB4((uint64_t)v59);
}

void sub_1004F51AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_1004F5258(void *a1, uint64_t a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, (uint64_t)(a1 + 1));
  sub_1004F4A88(a1, a2);
  return sub_10003AFB4((uint64_t)v5);
}

void sub_1004F52A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_1004F52BC(uint64_t a1, unsigned int a2)
{
  unsigned __int16 v14 = a2;
  v13[0] = 0;
  v13[1] = 0;
  sub_10003AED0((uint64_t)v13, a1 + 8);
  uint64_t v6 = *(void *)(a1 + 104);
  uint64_t v5 = a1 + 104;
  uint64_t v4 = v6;
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = v5;
  do
  {
    unsigned int v8 = *(unsigned __int16 *)(v4 + 32);
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      BOOL v10 = (uint64_t *)v4;
    }
    else {
      BOOL v10 = (uint64_t *)(v4 + 8);
    }
    if (v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }
  while (*v10);
  if (v7 != v5 && *(unsigned __int16 *)(v7 + 32) <= a2)
  {
    int v15 = &v14;
    std::string::size_type v11 = sub_1002CBD28((uint64_t **)(v5 - 8), &v14, (uint64_t)&unk_1007BE9D0, &v15)[5];
  }
  else
  {
LABEL_12:
    std::string::size_type v11 = 0;
  }
  sub_10003AFB4((uint64_t)v13);
  return v11;
}

void sub_1004F5374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004F5388(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  v14[0] = 0;
  v14[1] = 0;
  sub_10003AED0((uint64_t)v14, a1 + 8);
  uint64_t v7 = *(uint64_t **)(a1 + 72);
  if (v7 != *(uint64_t **)(a1 + 80))
  {
    while (1)
    {
      uint64_t v8 = *v7;
      __n128 v16 = *(__n128 *)(*v7 + 72);
      LODWORD(v17) = *(_DWORD *)(v8 + 88);
      sub_100035F98(&v18, &v16);
      if (sub_10022A44C((unsigned __int8 *)&v18, a2)) {
        break;
      }
LABEL_14:
      if (++v7 == *(uint64_t **)(a1 + 80)) {
        goto LABEL_15;
      }
    }
    if (!*a3)
    {
      uint64_t v3 = *v7;
      goto LABEL_16;
    }
    __n128 v16 = 0uLL;
    uint64_t v17 = 0;
    sub_100040550(&v16, *v7 + 136);
    BOOL v9 = (char *)v16.n128_u64[0];
    if (v16.n128_u64[0] == v16.n128_u64[1])
    {
      char v12 = 1;
      if (v16.n128_u64[0])
      {
LABEL_12:
        v16.n128_u64[1] = (unint64_t)v9;
        operator delete(v9);
      }
    }
    else
    {
      while (1)
      {
        uint64_t v10 = *(void *)v9;
        __n128 v18 = *(__n128 *)(*(void *)v9 + 76);
        int v19 = *(_DWORD *)(v10 + 92);
        sub_100035F98(&v15, &v18);
        BOOL v11 = sub_10022A44C((unsigned __int8 *)&v15, a3);
        if (v11) {
          break;
        }
        v9 += 8;
        if (v9 == (char *)v16.n128_u64[1]) {
          goto LABEL_11;
        }
      }
      uint64_t v3 = *(void *)v9;
LABEL_11:
      char v12 = !v11;
      BOOL v9 = (char *)v16.n128_u64[0];
      if (v16.n128_u64[0]) {
        goto LABEL_12;
      }
    }
    if ((v12 & 1) == 0) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
LABEL_15:
  uint64_t v3 = 0;
LABEL_16:
  sub_10003AFB4((uint64_t)v14);
  return v3;
}

void sub_1004F550C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
}

uint64_t sub_1004F5544(uint64_t a1, unsigned int a2)
{
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, a1 + 8);
  uint64_t v4 = sub_1004F52BC(a1, a2);
  uint64_t v5 = (uint64_t)v4;
  if (v4)
  {
    __n128 v19 = 0uLL;
    int v20 = 0;
    uint64_t v6 = v4[1];
    int v7 = *(_DWORD *)(v6 + 20);
    __n128 v21 = *(__n128 *)(v6 + 4);
    int v22 = v7;
    sub_100035F98(&v19, &v21);
    int v18 = 0;
    long long v17 = xmmword_1007BF3C0;
    if (sub_10022A44C(v8, (unsigned __int8 *)&v17)
      || (int v16 = 0, v15 = xmmword_1007BF3E8, sub_10022A44C((unsigned __int8 *)&v19, (unsigned __int8 *)&v15))
      || (v14 = 0, long long v13 = xmmword_1007BF3D4, sub_10022A44C((unsigned __int8 *)&v19, (unsigned __int8 *)&v13))
      || (v12 = 0, long long v11 = xmmword_1007BF3AC, sub_10022A44C((unsigned __int8 *)&v19, (unsigned __int8 *)&v11)))
    {
      uint64_t v5 = 0;
    }
    else
    {
      uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
    }
  }
  sub_10003AFB4((uint64_t)v10);
  return v5;
}

void sub_1004F56B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004F56D4(uint64_t a1, unsigned int a2)
{
  v16[0] = 0;
  v16[1] = 0;
  sub_10003AED0((uint64_t)v16, a1 + 8);
  uint64_t v4 = *(void *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 80);
  if (v4 != v5)
  {
    while (**(unsigned __int16 **)(*(void *)v4 + 8) >= a2 || *(unsigned __int16 *)(*(void *)v4 + 48) < a2)
    {
      v4 += 8;
      if (v4 == v5) {
        goto LABEL_18;
      }
    }
  }
  if (v4 == v5)
  {
LABEL_18:
    long long v11 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
      sub_100773B94(a2, v11);
    }
    unsigned __int16 v6 = 0;
  }
  else
  {
    unsigned __int16 v6 = *(_WORD *)(*(void *)v4 + 48);
    long long v13 = 0;
    int v14 = 0;
    uint64_t v15 = 0;
    sub_100040550(&v13, *(void *)v4 + 136);
    if (v13 != v14)
    {
      int v7 = v13;
      do
      {
        uint64_t v8 = *v7++;
        unsigned int v9 = **(unsigned __int16 **)(v8 + 8);
        if (v9 <= v6 && v9 > a2) {
          unsigned __int16 v6 = v9 - 1;
        }
      }
      while (v7 != v14);
    }
    if (v13)
    {
      int v14 = v13;
      operator delete(v13);
    }
  }
  sub_10003AFB4((uint64_t)v16);
  return v6;
}

void sub_1004F57F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004F5808@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, __n128 *a3@<X8>)
{
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 8);
  for (uint64_t i = *(uint64_t **)(a1 + 72); ; ++i)
  {
    if (i == *(uint64_t **)(a1 + 80))
    {
      sub_10071D13C(a3);
      return sub_10003AFB4((uint64_t)v9);
    }
    uint64_t v7 = *i;
    if (**(unsigned __int16 **)(*i + 8) <= a2 && *(unsigned __int16 *)(v7 + 48) >= a2) {
      break;
    }
  }
  __n128 v10 = *(__n128 *)(v7 + 72);
  int v11 = *(_DWORD *)(v7 + 88);
  sub_100035F98(a3, &v10);
  return sub_10003AFB4((uint64_t)v9);
}

void sub_1004F58E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004F5900(uint64_t a1, unsigned int a2, unsigned int a3)
{
  v13[0] = 0;
  v13[1] = 0;
  sub_10003AED0((uint64_t)v13, a1 + 8);
  uint64_t v7 = *(char **)(a1 + 72);
  unsigned __int16 v6 = *(char **)(a1 + 80);
  while (v7 != v6)
  {
    uint64_t v8 = *(void *)v7;
    if (*(unsigned __int16 *)(*(void *)v7 + 48) >= a2 && **(unsigned __int16 **)(v8 + 8) <= a3)
    {
      unsigned int v9 = qword_100A19E88;
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_INFO))
      {
        sub_100613B58((void *)v8, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string buf = 136446210;
        uint64_t v15 = p_p;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Invalidating service %{public}s", buf, 0xCu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      sub_1004F5A9C(a1, v7);
      uint64_t v7 = *(char **)(a1 + 72);
      unsigned __int16 v6 = *(char **)(a1 + 80);
    }
    else
    {
      v7 += 8;
    }
  }
  *(void *)(a1 + 128) = *(void *)(a1 + 120);
  *(unsigned char *)(a1 + 144) = 0;
  return sub_10003AFB4((uint64_t)v13);
}

void sub_1004F5A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

uint64_t sub_1004F5A9C(uint64_t a1, char *a2)
{
  v16[0] = 0;
  v16[1] = 0;
  sub_10003AED0((uint64_t)v16, a1 + 8);
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)a2 + 104;
  while (1)
  {
    sub_100040550(&__p, v5);
    unsigned __int16 v6 = __p;
    uint64_t v7 = v15;
    if (__p)
    {
      uint64_t v15 = __p;
      operator delete(__p);
    }
    if (v7 == v6) {
      break;
    }
    sub_100040550(&__p, v5);
    uint64_t v8 = *(void *)__p;
    uint64_t v15 = __p;
    operator delete(__p);
    LOWORD(__p) = **(_WORD **)(v8 + 8);
    sub_1003BA1D0(a1 + 96, (unsigned __int16 *)&__p);
    sub_1002F9F28((void *)v4, v8);
  }
  while (1)
  {
    sub_100040550(&__p, v4 + 136);
    unsigned int v9 = __p;
    __n128 v10 = v15;
    if (__p)
    {
      uint64_t v15 = __p;
      operator delete(__p);
    }
    if (v10 == v9) {
      break;
    }
    sub_100040550(&__p, v4 + 136);
    sub_1004F5C78(a1, (void *)v4, *(void *)__p);
    if (__p)
    {
      uint64_t v15 = __p;
      operator delete(__p);
    }
  }
  LOWORD(__p) = **(_WORD **)(v4 + 8);
  sub_1003BA1D0(a1 + 96, (unsigned __int16 *)&__p);
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  int v11 = *(char **)(a1 + 80);
  int64_t v12 = v11 - (a2 + 8);
  if (v11 != a2 + 8) {
    memmove(a2, a2 + 8, v11 - (a2 + 8));
  }
  *(void *)(a1 + 8sub_1004C2140(qword_100A19B68, 0) = &a2[v12];
  return sub_10003AFB4((uint64_t)v16);
}

void sub_1004F5C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t sub_1004F5C78(uint64_t a1, void *a2, uint64_t a3)
{
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, a1 + 8);
  if (*(void *)(a3 + 96))
  {
    LOWORD(__p) = *(_WORD *)(a3 + 74);
    sub_1003BA1D0(a1 + 96, (unsigned __int16 *)&__p);
  }
  std::string __p = 0;
  __n128 v10 = 0;
  uint64_t v11 = 0;
  sub_100040550(&__p, a3 + 104);
  unsigned __int16 v6 = (char *)__p;
  if (__p != v10)
  {
    do
    {
      unsigned __int16 v8 = **(_WORD **)(*(void *)v6 + 8);
      sub_1003BA1D0(a1 + 96, &v8);
      v6 += 8;
    }
    while (v6 != v10);
  }
  unsigned __int16 v8 = **(_WORD **)(a3 + 8);
  sub_1003BA1D0(a1 + 96, &v8);
  sub_1004F5DA8(a2, a3);
  if (__p)
  {
    __n128 v10 = (char *)__p;
    operator delete(__p);
  }
  return sub_10003AFB4((uint64_t)v12);
}

void sub_1004F5D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
}

void *sub_1004F5DA8(void *result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v5 = (char *)result[17];
  uint64_t v4 = (char *)result[18];
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = (char *)result[18];
        break;
      }
    }
  }
  if (v5 != v4)
  {
    int64_t v6 = v4 - (v5 + 8);
    if (v4 != v5 + 8) {
      uint64_t result = memmove(v5, v5 + 8, v4 - (v5 + 8));
    }
    v3[18] = &v5[v6];
    if (a2)
    {
      uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 8);
      return (void *)v7(a2);
    }
  }
  return result;
}

uint64_t sub_1004F5E6C(uint64_t a1, uint64_t a2)
{
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, a1 + 8);
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = *(void **)(a1 + 96);
    if (v4 != (void *)(a1 + 104))
    {
      do
      {
        uint64_t v5 = qword_100A19E88;
        if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
        {
          sub_100613B58((void *)v4[5], &__p);
          int64_t v6 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
             ? &__p
             : (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)std::string buf = 136446466;
          uint64_t v14 = a2;
          __int16 v15 = 2082;
          int v16 = v6;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: %{public}s%{public}s", buf, 0x16u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        uint64_t v7 = (void *)v4[1];
        if (v7)
        {
          do
          {
            unsigned __int16 v8 = v7;
            uint64_t v7 = (void *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            unsigned __int16 v8 = (void *)v4[2];
            BOOL v9 = *v8 == (void)v4;
            uint64_t v4 = v8;
          }
          while (!v9);
        }
        uint64_t v4 = v8;
      }
      while (v8 != (void *)(a1 + 104));
    }
  }
  return sub_10003AFB4((uint64_t)v12);
}

void sub_1004F5FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_1004F600C(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, a5, 0xCu);
}

void sub_1004F61E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004F63A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  objc_destroyWeak(v22);
  _Block_object_dispose(&a17, 8);

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1004F63E0(uint64_t a1, int a2, void *a3)
{
  int64_t v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v8 = WeakRetained;
  if (WeakRetained)
  {
    BOOL v9 = [WeakRetained connection];
    __n128 v10 = nw_connection_copy_endpoint(v9);

    if (v6) {
      int error_code = nw_error_get_error_code(v6);
    }
    else {
      int error_code = 0;
    }
    *__error() = error_code;
    int64_t v12 = (id)qword_100A19FE8;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      hostname = nw_endpoint_get_hostname(v10);
      int port = nw_endpoint_get_port(v10);
      int v15 = *__error();
      int v39 = 67109890;
      *(_DWORD *)uint64_t v40 = a2;
      *(_WORD *)&v40[4] = 2080;
      *(void *)&v40[6] = hostname;
      *(_WORD *)&v40[14] = 1024;
      *(_DWORD *)&v40[16] = port;
      LOWORD(v41[0]) = 1024;
      *(_DWORD *)((char *)v41 + 2) = v15;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[BTVCBonjourEndpoint] Connection state changed to %d (host %s port %u error %d)", (uint8_t *)&v39, 0x1Eu);
    }

    if (a2 == 5)
    {
      int v26 = (id)qword_100A19FE8;
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v27 = *((void *)v8 + 6);
        int v28 = nw_endpoint_get_hostname(v10);
        int v29 = nw_endpoint_get_port(v10);
        int v39 = 138412802;
        *(void *)uint64_t v40 = v27;
        *(_WORD *)&v40[8] = 2080;
        *(void *)&v40[10] = v28;
        *(_WORD *)&v40[18] = 1024;
        v41[0] = v29;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "[BTVCBonjourEndpoint] Connection (%@) to %s port %u cancelled", (uint8_t *)&v39, 0x1Cu);
      }

      std::string::size_type v30 = [v8 didDisconnectHandler];
      BOOL v31 = v30 == 0;

      if (!v31)
      {
        int v32 = *(NSObject **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
        if (v32) {
          CFErrorRef v33 = nw_error_copy_cf_error(v32);
        }
        else {
          CFErrorRef v33 = 0;
        }
        int v35 = [v8 didDisconnectHandler];
        ((void (**)(void, CFErrorRef))v35)[2](v35, v33);
      }
      unsigned int v36 = (void *)*((void *)v8 + 6);
      *((void *)v8 + 6) = 0;

      __int16 v37 = (void *)*((void *)v8 + 5);
      *((void *)v8 + 5) = 0;

      uint64_t v38 = *(void *)(*(void *)(a1 + 40) + 8);
      int v34 = *(NSObject **)(v38 + 40);
      *(void *)(v38 + 4sub_1004C2140(qword_100A19B68, 0) = 0;
    }
    else
    {
      if (a2 != 4)
      {
        if (a2 == 3)
        {
          int v16 = (id)qword_100A19FE8;
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v17 = *((void *)v8 + 6);
            int v18 = nw_endpoint_get_hostname(v10);
            int v19 = nw_endpoint_get_port(v10);
            int v39 = 138412802;
            *(void *)uint64_t v40 = v17;
            *(_WORD *)&v40[8] = 2080;
            *(void *)&v40[10] = v18;
            *(_WORD *)&v40[18] = 1024;
            v41[0] = v19;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[BTVCBonjourEndpoint] Connection (%@) to %s port %u succeeded! begin receiving messages", (uint8_t *)&v39, 0x1Cu);
          }

          if (([v8 isAdvToBrowserConnection] & 1) == 0)
          {
            int v20 = [v8 _getServerRemoteUUIDFromConnectionMetadata:*(void *)(*(void *)(a1 + 32) + 48) isAdvToBrowserConnection:objc_msgSend(*(id *)(a1 + 32), "isAdvToBrowserConnection")];
            [v8 setRemoteUniqueIDString:v20];
          }
          __n128 v21 = [v8 remoteUniqueIDString];
          BOOL v22 = v21 == 0;

          if (v22)
          {
            if (os_log_type_enabled((os_log_t)qword_100A19FE8, OS_LOG_TYPE_ERROR)) {
              sub_100773C10();
            }
            nw_connection_cancel(*((nw_connection_t *)v8 + 6));
          }
          else
          {
            char v23 = [v8 didConnectHandler];
            BOOL v24 = v23 == 0;

            if (!v24)
            {
              uint64_t v25 = [v8 didConnectHandler];
              v25[2]();
            }
            [v8 receiveNextMessage];
          }
        }
        goto LABEL_31;
      }
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
      int v34 = [v8 connection];
      nw_connection_cancel(v34);
    }

LABEL_31:
  }
}

void sub_1004F67F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004F6A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1004F6A64(uint64_t a1, char *__s1, uint64_t a3)
{
  if (!strcmp(__s1, "BTVCBonjourEndpointServerUUIDHeader"))
  {
    uint64_t v5 = +[NSString stringWithUTF8String:a3];
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 4sub_1004C2140(qword_100A19B68, 0) = v5;
  }
  return 1;
}

void sub_1004F6CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  int v29 = v28;
  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a21, 8);

  _Unwind_Resume(a1);
}

void sub_1004F6CF8(uint64_t a1, void *a2)
{
  options = a2;
  uint64_t v4 = nw_protocol_copy_ws_definition();
  uint64_t v5 = nw_protocol_options_copy_definition(options);
  BOOL is_equal = nw_protocol_definition_is_equal(v4, v5);

  if (is_equal) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
  }
}

void sub_1004F6D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

NSObject *sub_1004F6DC0(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v5 = WeakRetained;
  if (WeakRetained)
  {
    enumerator[0] = _NSConcreteStackBlock;
    enumerator[1] = 3221225472;
    enumerator[2] = sub_1004F6EE0;
    enumerator[3] = &unk_1009B28A0;
    enumerator[4] = WeakRetained;
    nw_ws_request_enumerate_additional_headers(v3, enumerator);
    uint64_t v6 = nw_ws_response_create(nw_ws_response_status_accept, 0);
    nw_ws_response_add_additional_header(v6, "BTVCBonjourEndpointServerUUIDHeader", (const char *)[v5[7] UTF8String]);
  }
  else
  {
    uint64_t v6 = nw_ws_response_create(nw_ws_response_status_reject, 0);
  }

  return v6;
}

void sub_1004F6EB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1004F6EE0(uint64_t a1, char *__s1, uint64_t a3)
{
  if (!strcmp(__s1, "BTVCBonjourEndpointClientUUIDHeader"))
  {
    uint64_t v5 = +[NSString stringWithUTF8String:a3];
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void **)(v6 + 64);
    *(void *)(v6 + 64) = v5;
  }
  return 1;
}

void sub_1004F70A0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1004F70BC(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v8 = a2;
  BOOL v9 = a3;
  id v10 = a5;
  id WeakRetained = (nw_connection_t *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    int64_t v12 = qword_100A19FE8;
    if (os_log_type_enabled((os_log_t)qword_100A19FE8, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = 138412546;
      nw_connection_t v21 = v8;
      __int16 v22 = 2112;
      id v23 = v10;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[BTVCBonjourEndpoint] receiveNextMessage data %@ error:%@", (uint8_t *)&v20, 0x16u);
    }
    long long v13 = v8;
    if (v9 && nw_content_context_get_is_final(v9))
    {
      uint64_t v14 = qword_100A19FE8;
      if (os_log_type_enabled((os_log_t)qword_100A19FE8, OS_LOG_TYPE_DEFAULT))
      {
        nw_connection_t v15 = WeakRetained[6];
        int v20 = 138412290;
        nw_connection_t v21 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[BTVCBonjourEndpoint] receiveNextMessage got connection closed %@", (uint8_t *)&v20, 0xCu);
      }
      nw_connection_cancel(WeakRetained[6]);
    }
    else if (!v10)
    {
      int v16 = [(nw_connection_t *)WeakRetained didReceiveDataHandler];
      if (v13) {
        BOOL v17 = v16 == 0;
      }
      else {
        BOOL v17 = 1;
      }
      int v18 = !v17;

      if (v18)
      {
        int v19 = [(nw_connection_t *)WeakRetained didReceiveDataHandler];
        ((void (**)(void, NSObject *))v19)[2](v19, v13);
      }
      [(nw_connection_t *)WeakRetained receiveNextMessage];
    }
  }
}

void sub_1004F7280(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004F74B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004F752C(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = (id)qword_100A19FE8;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = [*(id *)(a1 + 32) length];
    int v9 = 138412546;
    id v10 = v3;
    __int16 v11 = 2048;
    id v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[BTVCBonjourEndpoint] nw_connection_send completed with error: %@, bytes :%lu", (uint8_t *)&v9, 0x16u);
  }

  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    if (v3)
    {
      CFErrorRef v7 = nw_error_copy_cf_error(v3);
      uint64_t v6 = *(void *)(a1 + 40);
      CFErrorRef v8 = v7;
    }
    else
    {
      CFErrorRef v8 = 0;
    }
    (*(void (**)(uint64_t, CFErrorRef))(v6 + 16))(v6, v8);
  }
}

void sub_1004F7640(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004F772C(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1004F7768(id a1, OS_nw_protocol_options *a2)
{
  options = a2;
  nw_tcp_options_set_enable_keepalive((nw_protocol_options_t)options, 1);
  nw_tcp_options_set_keepalive_idle_time((nw_protocol_options_t)options, 2u);
  nw_tcp_options_set_no_delay((nw_protocol_options_t)options, 1);
  nw_tcp_options_set_enable_fast_open((nw_protocol_options_t)options, 1);
}

void sub_1004F77D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1004F794C(uint64_t a1, uint64_t a2, char a3, int a4)
{
  *(void *)a1 = off_1009B2480;
  sub_100052DA8(a1 + 8);
  *(unsigned char *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 76) = a4;
  *(void *)a1 = off_1009B2988;
  *(void *)(a1 + 8sub_1004C2140(qword_100A19B68, 0) = a2;
  *(void *)(a1 + 88) = off_1009B29C8;
  *(unsigned char *)(a1 + 96) = a3;
  *(unsigned char *)(a1 + 97) = 0;
  *(_OWORD *)(a1 + 10sub_1004C2140(qword_100A19B68, 0) = xmmword_1007BF400;
  *(_DWORD *)(a1 + 116) = 1000;
  *(void *)(a1 + 12sub_1004C2140(qword_100A19B68, 0) = 0;
  sub_100052DA8(a1 + 128);
  *(_OWORD *)(a1 + 20sub_1004C2140(qword_100A19B68, 0) = 0u;
  *(_DWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(void *)(a1 + 12sub_1004C2140(qword_100A19B68, 0) = sub_1004AFE2C();
  return a1;
}

void sub_1004F7A44(_Unwind_Exception *a1)
{
  CFErrorRef v7 = *v5;
  if (*v5)
  {
    v1[26] = v7;
    operator delete(v7);
  }
  sub_100052DA4(v4);
  void *v1 = v2;
  sub_100052DA4(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_1004F7A80(uint64_t a1, uint64_t a2)
{
  int v24 = 0;
  __int16 v23 = 0;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009B2AF8);
  }
  uint64_t v4 = off_1009F7EF8;
  uint64_t v25 = 0;
  sub_100026C30((uint64_t)&v25);
  *(void *)&long long v22 = (int)v25;
  *((void *)&v22 + 1) = SWORD2(v25);
  id v5 = sub_1004AA384((uint64_t)v4, a2, &v22, (BOOL *)&v23 + 1, (char *)&v23);
  if ((*(unsigned int (**)(void, unsigned __int8 *, int *, void))(**(void **)(a1 + 80) + 48))(*(void *)(a1 + 80), v5, &v24, HIBYTE(v23)))
  {
    (*(void (**)(void, unsigned __int8 *))(**(void **)(a1 + 80) + 24))(*(void *)(a1 + 80), v5);
  }
  long long v22 = 0uLL;
  sub_10003AED0((uint64_t)&v22, a1 + 128);
  if (*(_DWORD *)(a1 + 192) != 128 && (v24 & 0x10) != 0)
  {
    v5[784] = 1;
    uint64_t v6 = (char **)(a1 + 200);
    if (!sub_1004A8390(a1 + 200, (uint64_t)v5))
    {
      unint64_t v7 = *(void *)(a1 + 216);
      CFErrorRef v8 = *(unsigned __int8 ***)(a1 + 208);
      if ((unint64_t)v8 >= v7)
      {
        uint64_t v10 = ((char *)v8 - *v6) >> 3;
        if ((unint64_t)(v10 + 1) >> 61) {
          abort();
        }
        uint64_t v11 = v7 - (void)*v6;
        uint64_t v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
          uint64_t v12 = v10 + 1;
        }
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v12;
        }
        if (v13) {
          uint64_t v14 = (char *)sub_1000405F8(a1 + 216, v13);
        }
        else {
          uint64_t v14 = 0;
        }
        nw_connection_t v15 = (unsigned __int8 **)&v14[8 * v10];
        int v16 = &v14[8 * v13];
        void *v15 = v5;
        int v9 = v15 + 1;
        int v18 = *(char **)(a1 + 200);
        BOOL v17 = *(char **)(a1 + 208);
        if (v17 != v18)
        {
          do
          {
            int v19 = (unsigned __int8 *)*((void *)v17 - 1);
            v17 -= 8;
            *--nw_connection_t v15 = v19;
          }
          while (v17 != v18);
          BOOL v17 = *v6;
        }
        *(void *)(a1 + 20sub_1004C2140(qword_100A19B68, 0) = v15;
        *(void *)(a1 + 208) = v9;
        *(void *)(a1 + 216) = v16;
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        *CFErrorRef v8 = v5;
        int v9 = v8 + 1;
      }
      *(void *)(a1 + 208) = v9;
    }
    uint64_t v20 = *(void *)(a1 + 224);
    if (!v20) {
      operator new();
    }
    *(void *)(v20 + 16) = 500;
  }
  return sub_10003AFB4((uint64_t)&v22);
}

void sub_1004F7D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004F7D14(uint64_t a1)
{
  v13[0] = 0;
  v13[1] = 0;
  sub_10003AED0((uint64_t)v13, a1 + 128);
  uint64_t v2 = qword_100A19E68;
  if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_INFO))
  {
    int v3 = *(_DWORD *)(a1 + 192);
    *(_DWORD *)std::string buf = 67109120;
    int v15 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Stepping scan with mode %u", buf, 8u);
  }
  int v4 = *(_DWORD *)(a1 + 192);
  if (v4 == 16 || v4 == 1)
  {
    if (sub_1004F8144(a1)) {
      return sub_10003AFB4((uint64_t)v13);
    }
  }
  else if (!v4)
  {
    sub_10003AFE8((uint64_t)v13);
    if (*(unsigned char *)(a1 + 96))
    {
      uint64_t v6 = qword_100A19E68;
      if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = *(_DWORD *)(a1 + 100);
        *(_DWORD *)std::string buf = 67109120;
        int v15 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Sleeping %u ms before starting first scan", buf, 8u);
      }
      j__usleep(1000 * *(_DWORD *)(a1 + 100));
    }
    sub_10003AF00((uint64_t)v13);
    sub_1004F863C(a1);
    return sub_10003AFB4((uint64_t)v13);
  }
  if (*(unsigned char *)(a1 + 97))
  {
    *(unsigned char *)(a1 + 97) = 0;
  }
  else
  {
    sub_10003AFE8((uint64_t)v13);
    CFErrorRef v8 = qword_100A19E68;
    if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = 108;
      if (!*(unsigned char *)(a1 + 96)) {
        uint64_t v9 = 116;
      }
      int v10 = *(_DWORD *)(a1 + v9);
      *(_DWORD *)std::string buf = 67109120;
      int v15 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Sleeping %u ms before ending scan", buf, 8u);
    }
    uint64_t v11 = 108;
    if (!*(unsigned char *)(a1 + 96)) {
      uint64_t v11 = 116;
    }
    j__usleep(1000 * *(_DWORD *)(a1 + v11));
    sub_1004EDCD4(a1, 0);
  }
  return sub_10003AFB4((uint64_t)v13);
}

void sub_1004F7F28(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1004F7F44(uint64_t a1)
{
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, a1 + 128);
  if (*(_DWORD *)(a1 + 192) == 1)
  {
    *(unsigned char *)(a1 + 97) = 1;
    char v9 = 0;
    sub_10001B8E0(&v9);
    if (sub_100182FAC((uint64_t (*)(void, void))sub_1004F7FF4, a1, v2, v3, v4, v5, v6, v7)) {
      *(unsigned char *)(a1 + 97) = 0;
    }
    sub_10001B910(&v9);
    sub_10001B8AC(&v9);
  }
  return sub_10003AFB4((uint64_t)v10);
}

void sub_1004F7FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004F7FF4()
{
}

uint64_t sub_1004F8094(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1 + 128);
  uint64_t v2 = *(void *)(a1 + 224);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 224) = 0;
  }
  if (*(unsigned char *)(a1 + 97))
  {
    *(unsigned char *)(a1 + 97) = 0;
    sub_1004F8144(a1);
  }
  else
  {
    sub_10003AFE8((uint64_t)v4);
    sub_1004EDCD4(a1, 0);
  }
  return sub_10003AFB4((uint64_t)v4);
}

void sub_1004F8130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_1004F8144(uint64_t a1)
{
  id v1 = *(uint64_t **)(a1 + 200);
  uint64_t v2 = *(uint64_t **)(a1 + 208);
  if (v1 != v2)
  {
    uint64_t v3 = *v1;
    *(_DWORD *)(a1 + 192) = 16;
    if (qword_1009FB698 != -1) {
      dispatch_once(&qword_1009FB698, &stru_1009B2B18);
    }
    sub_1004C8250(qword_1009FB690, v3);
  }
  *(_DWORD *)(a1 + 192) = 128;
  return v1 != v2;
}

void sub_1004F81DC()
{
}

void sub_1004F828C()
{
}

uint64_t sub_1004F8294(uint64_t a1, uint64_t a2)
{
  int v8 = 0;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 128);
  sub_1004A83C4((char **)(a1 + 200), a2);
  sub_10003AFE8((uint64_t)v7);
  int v4 = (*(uint64_t (**)(void, uint64_t, int *, void))(**(void **)(a1 + 80) + 48))(*(void *)(a1 + 80), a2, &v8, 0);
  if (v8) {
    int v5 = 0;
  }
  else {
    int v5 = v4;
  }
  if (v5 == 1) {
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 80) + 8))(*(void *)(a1 + 80), a2);
  }
  sub_1004F7D14(a1);
  return sub_10003AFB4((uint64_t)v7);
}

void sub_1004F836C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004F8380(uint64_t a1)
{
  v3[0] = 0;
  v3[1] = 0;
  sub_10003AED0((uint64_t)v3, a1 + 8);
  int v2 = *(unsigned __int8 *)(a1 + 72);
  sub_10003AFB4((uint64_t)v3);
  if (v2)
  {
    sub_10025B8C0();
  }
  else
  {
    sub_1004ED788(a1);
    sub_1004F7D14(a1);
  }
}

uint64_t sub_1004F83E0(uint64_t a1)
{
  v15[0] = 0;
  v15[1] = 0;
  sub_10003AED0((uint64_t)v15, a1 + 128);
  int v2 = qword_100A19E68;
  if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 192);
    *(_DWORD *)std::string buf = 67109120;
    int v17 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Stopping scan with mode %u", buf, 8u);
  }
  int v4 = *(uint64_t **)(a1 + 200);
  int v5 = *(uint64_t **)(a1 + 208);
  while (v4 != v5)
  {
    uint64_t v6 = *v4++;
    *(unsigned char *)(v6 + 784) = 0;
  }
  int v7 = *(_DWORD *)(a1 + 192);
  if (v7)
  {
    if (v7 == 1)
    {
      *(_DWORD *)(a1 + 192) = 128;
      sub_10003AFE8((uint64_t)v15);
      buf[0] = 0;
      sub_10001B8E0(buf);
      sub_100182FAC((uint64_t (*)(void, void))sub_1004F859C, a1, v8, v9, v10, v11, v12, v13);
      sub_10001B910(buf);
      sub_10001B8AC(buf);
    }
    else if (v7 == 16)
    {
      *(_DWORD *)(a1 + 192) = 128;
      sub_10003AFE8((uint64_t)v15);
      if (qword_1009FB698 != -1) {
        dispatch_once(&qword_1009FB698, &stru_1009B2B18);
      }
      sub_1004C83E0();
    }
  }
  else
  {
    *(_DWORD *)(a1 + 192) = 128;
  }
  return sub_10003AFB4((uint64_t)v15);
}

void sub_1004F856C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1004F859C()
{
}

unsigned char *sub_1004F863C(uint64_t a1)
{
  int v2 = qword_100A19E68;
  if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = 104;
    if (!*(unsigned char *)(a1 + 96)) {
      uint64_t v3 = 112;
    }
    int v4 = *(_DWORD *)(a1 + v3);
    v11[0] = 67109376;
    v11[1] = v4;
    __int16 v12 = 1024;
    int v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Scanning for %u scan periods (%u x 1.28s)", (uint8_t *)v11, 0xEu);
  }
  LOBYTE(v11[0]) = 0;
  sub_10001B8E0(v11);
  uint64_t v7 = 104;
  if (!*(unsigned char *)(a1 + 96)) {
    uint64_t v7 = 112;
  }
  uint64_t v8 = sub_100182F00(10390323, *(unsigned __int8 *)(a1 + v7), 64, (uint64_t (*)(void, void))sub_1004F87D0, sub_1004F859C, a1, v5, v6);
  sub_10001B910(v11);
  if (v8)
  {
    uint64_t v9 = qword_100A19E68;
    if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_ERROR)) {
      sub_100773D14(v8, v9);
    }
    sub_1004EDCD4(a1, v8);
  }
  else
  {
    *(_DWORD *)(a1 + 192) = 1;
  }
  return sub_10001B8AC(v11);
}

void sub_1004F87B4(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1004F87D0(uint64_t result)
{
  if (result) {
    operator new();
  }
  return result;
}

void sub_1004F8870()
{
}

uint64_t sub_1004F8894(uint64_t a1, uint64_t a2, long long *a3)
{
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = off_1009B29F0;
  *(void *)(a1 + 16) = a2;
  long long v4 = *a3;
  *(void *)(a1 + 4sub_1004C2140(qword_100A19B68, 0) = *((void *)a3 + 2);
  *(_OWORD *)(a1 + 24) = v4;
  if (*((void *)a3 + 2))
  {
    uint64_t v6 = malloc_type_malloc(0xF0uLL, 0x100004077774924uLL);
    *(void *)(a1 + 4sub_1004C2140(qword_100A19B68, 0) = v6;
    uint64_t v7 = (long long *)*((void *)a3 + 2);
    long long v8 = *v7;
    long long v9 = v7[2];
    v6[1] = v7[1];
    void v6[2] = v9;
    *uint64_t v6 = v8;
    long long v10 = v7[3];
    long long v11 = v7[4];
    long long v12 = v7[6];
    void v6[5] = v7[5];
    void v6[6] = v12;
    void v6[3] = v10;
    v6[4] = v11;
    long long v13 = v7[7];
    long long v14 = v7[8];
    long long v15 = v7[10];
    v6[9] = v7[9];
    v6[10] = v15;
    v6[7] = v13;
    v6[8] = v14;
    long long v16 = v7[11];
    long long v17 = v7[12];
    long long v18 = v7[14];
    v6[13] = v7[13];
    uint8_t v6[14] = v18;
    v6[11] = v16;
    v6[12] = v17;
  }
  return a1;
}

void *sub_1004F895C(void *a1)
{
  *a1 = off_1009B29F0;
  int v2 = (void *)a1[5];
  if (v2) {
    free(v2);
  }
  return a1;
}

void sub_1004F89A8(void *a1)
{
  *a1 = off_1009B29F0;
  id v1 = (void *)a1[5];
  if (v1) {
    free(v1);
  }

  operator delete();
}

void *sub_1004F8A14(void *a1)
{
  *a1 = off_1009B2988;
  a1[11] = off_1009B29C8;
  int v2 = (void *)a1[25];
  if (v2)
  {
    a1[26] = v2;
    operator delete(v2);
  }
  sub_100052DA4(a1 + 16);
  *a1 = off_1009B2480;
  sub_100052DA4(a1 + 1);
  return a1;
}

void sub_1004F8AB0(void *a1)
{
  *a1 = off_1009B2988;
  a1[11] = off_1009B29C8;
  int v2 = (void *)a1[25];
  if (v2)
  {
    a1[26] = v2;
    operator delete(v2);
  }
  sub_100052DA4(a1 + 16);
  *a1 = off_1009B2480;
  sub_100052DA4(a1 + 1);

  operator delete();
}

BOOL sub_1004F8B6C(uint64_t a1, unsigned char *a2)
{
  return sub_1004B022C(*(void *)(a1 + 120), a2);
}

uint64_t sub_1004F8B74(void *a1)
{
  *(a1 - 11) = off_1009B2988;
  *a1 = off_1009B29C8;
  int v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  sub_100052DA4(a1 + 5);
  *(a1 - 11) = off_1009B2480;

  return sub_100052DA4(a1 - 10);
}

void sub_1004F8C18(void *a1)
{
  *(a1 - 11) = off_1009B2988;
  *a1 = off_1009B29C8;
  int v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  sub_100052DA4(a1 + 5);
  *(a1 - 11) = off_1009B2480;
  sub_100052DA4(a1 - 10);

  operator delete();
}

uint64_t sub_1004F8CD4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  long long v3 = *(_OWORD *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 40);
  return sub_1004F7A80(v1, (uint64_t)&v3);
}

void sub_1004F8D14()
{
}

uint64_t sub_1004F8D28(uint64_t a1)
{
  return sub_1004F7F44(*(void *)(a1 + 24));
}

void sub_1004F8D34()
{
}

uint64_t sub_1004F8D48(uint64_t a1)
{
  return sub_1004F8094(*(void *)(a1 + 16));
}

void sub_1004F8D54()
{
}

uint64_t sub_1004F8D68(uint64_t a1)
{
  return sub_1004F8294(*(void *)(a1 + 16), *(void *)(a1 + 32));
}

void sub_1004F8D7C()
{
}

uint64_t sub_1004F8D90(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(unsigned int *)(a1 + 24);
  if (v3) {
    return sub_1004EDCD4(v2, v3);
  }
  else {
    return sub_1004F7D14(v2);
  }
}

void sub_1004F8DA8(id a1)
{
}

void sub_1004F8DEC()
{
}

void sub_1004F8E10(id a1)
{
}

void sub_1004F8E54()
{
}

uint64_t sub_1004F8E78(uint64_t a1)
{
  if (notify_register_check("com.apple.bluetooth.power", (int *)(a1 + 168))
    && os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_ERROR))
  {
    sub_100773EC4();
  }
  if (notify_register_check("com.apple.bluetooth.connection", (int *)(a1 + 172))
    && os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_ERROR))
  {
    sub_100773E90();
  }
  if (notify_register_check("com.apple.bluetooth.pairing", (int *)(a1 + 176))
    && os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_ERROR))
  {
    sub_100773E5C();
  }
  if (notify_register_check("com.apple.bluetooth.pairingWithReason", (int *)(a1 + 180))
    && os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_ERROR))
  {
    sub_100773E28();
  }
  if (notify_register_check("com.apple.bluetooth.audio-stream", (int *)(a1 + 184))
    && os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_ERROR))
  {
    sub_100773DF4();
  }
  if (notify_register_check("com.apple.bluetooth.outgoing-le-fast-scan-level", (int *)(a1 + 188))
    && os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_ERROR))
  {
    sub_100773DC0();
  }
  if (notify_register_check("com.apple.bluetooth.outgoing-classic-connection-state", (int *)(a1 + 192))
    && os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_ERROR))
  {
    sub_100773D8C();
  }
  sub_1004F90DC((os_unfair_lock_s *)a1);
  notify_set_state(*(_DWORD *)(a1 + 168), *(unsigned __int8 *)(a1 + 155));
  notify_post("com.apple.bluetooth.power");
  sub_1004F9174((unsigned char *)a1);
  sub_1004F9294(a1);
  sub_1004F9374(a1);
  sub_1004F9434(a1);
  uint64_t v2 = qword_100A1A048;
  if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138412290;
    CFStringRef v5 = @"Unknown";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Bluetooth server started (%@)", (uint8_t *)&v4, 0xCu);
  }
  return 1;
}

void sub_1004F90DC(os_unfair_lock_s *a1)
{
  notify_set_state(a1[43]._os_unfair_lock_opaque, (int)a1[39]._os_unfair_lock_opaque + (uint64_t)(int)a1[40]._os_unfair_lock_opaque);
  notify_post("com.apple.bluetooth.connection");
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1004FA558;
  v2[3] = &unk_1009B2B38;
  void v2[4] = a1;
  sub_1000144B0(a1 + 30, v2);
}

unsigned char *sub_1004F9174(unsigned char *result)
{
  uint64_t v1 = (uint64_t)result;
  unsigned int v2 = result[197] || result[198] || result[199] || result[204] != 0;
  if (result[200] != v2)
  {
    uint64_t v3 = qword_100A1A048;
    if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = "off";
      if (v2) {
        int v4 = "on";
      }
      int v5 = 136315138;
      uint64_t v6 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Bluetooth Daemon: BT streaming: %s", (uint8_t *)&v5, 0xCu);
    }
    *(unsigned char *)(v1 + 20sub_1004C2140(qword_100A19B68, 0) = v2;
    notify_set_state(*(_DWORD *)(v1 + 184), v2);
    notify_post("com.apple.bluetooth.audio-stream");
    return (unsigned char *)sub_1000100D8(v1);
  }
  return result;
}

uint64_t sub_1004F9294(uint64_t a1)
{
  unsigned int v2 = qword_100A1A048;
  if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(int *)(a1 + 164);
    if (v3 > 2) {
      int v4 = "NA";
    }
    else {
      int v4 = off_1009B2EF0[v3];
    }
    int v6 = 136315138;
    uint64_t v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Bluetooth Daemon: LE Connection scan state: %s", (uint8_t *)&v6, 0xCu);
  }
  notify_set_state(*(_DWORD *)(a1 + 188), *(unsigned int *)(a1 + 164));
  return notify_post("com.apple.bluetooth.outgoing-le-fast-scan-level");
}

uint64_t sub_1004F9374(uint64_t a1)
{
  unsigned int v2 = qword_100A1A048;
  if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 216);
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Notify outgoing classic connection state isConnecting: %d", (uint8_t *)v5, 8u);
  }
  notify_set_state(*(_DWORD *)(a1 + 192), *(unsigned __int8 *)(a1 + 216));
  return notify_post("com.apple.bluetooth.outgoing-classic-connection-state");
}

void sub_1004F9434(uint64_t a1)
{
  unsigned int v2 = (void *)MGCopyAnswer();
  int v3 = v2;
  if (v2)
  {
    int v4 = [v2 componentsSeparatedByString:@"."];
    int v5 = [v4 objectAtIndexedSubscript:0];
    int v6 = +[NSString stringWithFormat:@"%@", v5];

    uint64_t v7 = (void *)CFPreferencesCopyAppValue(@"MajorOSVersion", @"com.apple.BTServer");
    if (([v7 isEqualToString:v6] & 1) == 0)
    {
      long long v8 = +[MCProfileConnection sharedConnection];
      unsigned __int8 v9 = [v8 isBluetoothModificationAllowed];

      long long v10 = qword_100A1A048;
      BOOL v11 = os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_DEFAULT);
      if (v9)
      {
        if (v11)
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Major version update, setting default power state to ON", buf, 2u);
        }
        uint64_t v12 = sub_1003705E4();
        (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 96))(v12, 1);
        uint64_t v13 = sub_1003705E4();
        (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 112))(v13, 1);
      }
      else if (v11)
      {
        *(_WORD *)long long v15 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Major version update but bluetooth modification is not allowed", v15, 2u);
      }
      CFPreferencesSetAppValue(@"MajorOSVersion", v6, @"com.apple.BTServer");
      CFPreferencesSynchronize(@"com.apple.BTServer", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
      *(unsigned char *)(a1 + 152) = 1;
    }
  }
}

void sub_1004F9644(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1004F9694()
{
  char v8 = 0;
  uint64_t v0 = sub_100017768();
  sub_10004191C(v6, "BT");
  sub_10004191C(__p, "EraseAllPairedAndCachedDevice");
  int v1 = (*(uint64_t (**)(uint64_t, void **, void **, char *))(*(void *)v0 + 72))(v0, v6, __p, &v8);
  if (v8) {
    int v2 = v1;
  }
  else {
    int v2 = 0;
  }
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if ((v7 & 0x80000000) == 0)
  {
    if (v2) {
      goto LABEL_8;
    }
LABEL_14:
    if (qword_1009FB1A0 != -1) {
      dispatch_once(&qword_1009FB1A0, &stru_1009B2DF0);
    }
    BOOL result = sub_1006163A4((void *)qword_1009FB198);
    if (result)
    {
      sub_1000816A0();
      return 1;
    }
    return result;
  }
  operator delete(v6[0]);
  if (!v2) {
    goto LABEL_14;
  }
LABEL_8:
  if (MKBDeviceUnlockedSinceBoot())
  {
    sub_100313980();
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B2DD0);
    }
    sub_1006C43FC((uint64_t)off_1009F7ED8);
    BOOL result = os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_100773F2C();
      return 0;
    }
  }
  else
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_100773EF8();
      return 0;
    }
  }
  return result;
}

void sub_1004F9824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004F9858(uint64_t a1)
{
  *(unsigned char *)(a1 + 104) = 0;
  *(void *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 16sub_1004C2140(qword_100A19B68, 0) = 0;
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B2E10);
  }
  sub_10026B36C((uint64_t)off_1009F8068 + 64, a1);
  uint64_t v2 = *(void *)sub_100035F54();
  *(unsigned char *)(a1 + 32sub_1004C2140(qword_100A19B68, 0) = (*(uint64_t (**)(void))(v2 + 840))();
  sub_1004F99FC(a1);
  *(unsigned char *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 276) = 0;
  *(unsigned char *)(a1 + 28sub_1004C2140(qword_100A19B68, 0) = 0;
  *(_DWORD *)(a1 + 284) = 0;
  uint64_t v3 = sub_10003FFD4();
  sub_10026B948(v3 + 288, a1 + 8);
  uint64_t v4 = sub_100052EB4();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 128))(v4, a1 + 16);
  if (qword_1009FB3D0 != -1) {
    dispatch_once(&qword_1009FB3D0, &stru_1009B2E30);
  }
  sub_1005442CC(qword_1009FB3C8, a1 + 32);
  *(unsigned char *)(a1 + 488) = 0;
  *(void *)(a1 + 386) = 0;
  *(void *)(a1 + 394) = 0;
  *(void *)(a1 + 378) = 0;
  *(void *)(a1 + 399) = 0;
  uint64_t v5 = sub_1004AF8EC();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1004F9DD0;
  void v6[3] = &unk_100997528;
  v6[4] = a1;
  sub_100013018(v5, v6);
}

void sub_1004F99FC(uint64_t a1)
{
  uint64_t v2 = (void *)MGCopyAnswer();
  if (v2)
  {
    uint64_t v3 = (void *)CFPreferencesCopyAppValue(@"OSBuildVersion", @"com.apple.BTServer");
    uint64_t v4 = qword_100A1A048;
    if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 138412546;
      int v26 = v3;
      __int16 v27 = 2112;
      int v28 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Identification - OS build last %@, current %@", buf, 0x16u);
    }
    if (([v3 isEqualToString:v2] & 1) == 0)
    {
      uint64_t v5 = qword_100A1A048;
      if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Identification - OS build updated", buf, 2u);
      }
      CFPreferencesSetAppValue(@"OSBuildVersion", v2, @"com.apple.BTServer");
      CFPreferencesSynchronize(@"com.apple.BTServer", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
      *(unsigned char *)(a1 + 153) = 1;
      if (v3 && [v3 hasPrefix:@"22A"])
      {
        id v23 = 0;
        long long v18 = +[NSRegularExpression regularExpressionWithPattern:@"([0-9]+)[A-Z]([0-9]+)([a-z]*)" options:1 error:&v23];
        id v17 = v23;
        [v18 matchesInString:v3 options:0 range:NSMakeRange(0, [v3 length])];
        long long v21 = 0u;
        long long v22 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        id v6 = (id)objc_claimAutoreleasedReturnValue();
        id v7 = [v6 countByEnumeratingWithState:&v19 objects:v24 count:16];
        if (v7)
        {
          int v8 = 0;
          uint64_t v9 = *(void *)v20;
          do
          {
            for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v20 != v9) {
                objc_enumerationMutation(v6);
              }
              BOOL v11 = *(void **)(*((void *)&v19 + 1) + 8 * i);
              if ((unint64_t)[v11 numberOfRanges] >= 3)
              {
                id v12 = [v11 rangeAtIndex:2];
                long long v14 = [v3 substringWithRange:v12, v13];
                int v8 = [v14 intValue];
              }
            }
            id v7 = [v6 countByEnumeratingWithState:&v19 objects:v24 count:16];
          }
          while (v7);

          unsigned int v15 = v8 % 0x3E8u;
          if (v8 <= 1000) {
            unsigned int v15 = v8;
          }
          if (v15 - 238 < 0x53)
          {
            long long v16 = qword_100A1A048;
            if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)std::string buf = 138412290;
              int v26 = v3;
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "LE deivce name origin reset - OS build updated from %@", buf, 0xCu);
            }
            *(unsigned char *)(a1 + 154) = 1;
          }
        }
        else
        {
        }
      }
    }
  }
}

void sub_1004F9D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1004F9DD0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  __int16 v8 = 0;
  __int16 v7 = 0;
  char v6 = 0;
  int v5 = 0;
  uint64_t v2 = sub_10003FFD4();
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, __int16 *, char *, __int16 *, char *, int *))(*(void *)v2 + 48))(v2, (char *)&v8 + 1, &v8, (char *)&v7 + 1, &v7, &v6, &v5);
  if (!result)
  {
    *(unsigned char *)(v1 + 272) = v7;
    if (HIBYTE(v8))
    {
      int v4 = 1;
    }
    else if ((_BYTE)v8)
    {
      int v4 = 2;
    }
    else
    {
      if (!HIBYTE(v7))
      {
        *(_DWORD *)(v1 + 276) = 0;
        goto LABEL_9;
      }
      int v4 = 3;
    }
    *(_DWORD *)(v1 + 276) = v4;
LABEL_9:
    *(unsigned char *)(v1 + 28sub_1004C2140(qword_100A19B68, 0) = v6;
  }
  return result;
}

void sub_1004F9E94(uint64_t a1, uint64_t a2)
{
}

void sub_1004F9E9C(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  int v5 = *(char **)(a1 + 8);
  int v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        int v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    uint64_t v6 = a2;
    sub_1004FF8C4(a1 + 8, v4, (char *)&v6);
    sub_100061554(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_1004F9F28(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1004F9F30(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1 + 40);
  *(unsigned char *)(a1 + 104) = 1;
  *(void *)(a1 + 388) = 0;
  *(void *)(a1 + 396) = 0;
  *(void *)(a1 + 38sub_1004C2140(qword_100A19B68, 0) = 0;
  *(_DWORD *)(a1 + 403) = 0;
  sub_10003AFE8((uint64_t)v4);
  char v3 = 0;
  sub_10001B8E0(&v3);
  sub_10024D204(sub_1004F9FE0);
  sub_10001B8AC(&v3);
  return sub_10003AFB4((uint64_t)v4);
}

void sub_1004F9FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14)
{
}

void sub_1004F9FE0(char a1)
{
  uint64_t v2 = sub_1004AF8EC();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1004FE62C;
  void v3[3] = &unk_1009A7758;
  char v4 = a1;
  sub_100013018(v2, v3);
}

uint64_t sub_1004FA05C(uint64_t a1)
{
  uint64_t v2 = qword_100A1A048;
  if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "BluetoothDaemon::stackWillStop enter", buf, 2u);
  }
  *(void *)std::string buf = 0;
  uint64_t v10 = 0;
  sub_10003AED0((uint64_t)buf, a1 + 40);
  *(unsigned char *)(a1 + 104) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  sub_10003AFE8((uint64_t)buf);
  sub_1004FA1D8(a1);
  char v4 = *(void **)(a1 + 232);
  uint64_t v3 = a1 + 232;
  sub_1004FFB04(v3 - 8, v4);
  *(void *)(v3 - 8) = v3;
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  sub_1004FFBB8(v3 + 16, *(void **)(v3 + 24));
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 16) = v3 + 24;
  sub_1000486F0(v3 + 200, *(void **)(v3 + 208));
  *(void *)(v3 + 208) = 0;
  *(void *)(v3 + 216) = 0;
  *(void *)(v3 + 20sub_1004C2140(qword_100A19B68, 0) = v3 + 208;
  char v8 = 0;
  sub_10001B8E0(&v8);
  sub_10024D230(sub_1004F9FE0);
  sub_10001B910(&v8);
  int v5 = qword_100A1A048;
  if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int16 v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "BluetoothDaemon::stackWillStop exit", v7, 2u);
  }
  sub_10001B8AC(&v8);
  return sub_10003AFB4((uint64_t)buf);
}

void sub_1004FA1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004FA1D8(uint64_t a1)
{
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 40);
  uint64_t v2 = qword_100A1A048;
  if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "cancelSoftwareScanRxTimer", v6, 2u);
  }
  if (!*(unsigned char *)(a1 + 320))
  {
    uint64_t v3 = *(NSObject **)(a1 + 328);
    if (v3)
    {
      char v4 = qword_100A1A048;
      if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v6 = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "fSoftwareScanRxTimer destroyed!", v6, 2u);
        uint64_t v3 = *(NSObject **)(a1 + 328);
      }
      dispatch_source_cancel(v3);
      dispatch_release(*(dispatch_object_t *)(a1 + 328));
      *(void *)(a1 + 328) = 0;
    }
  }
  return sub_10003AFB4((uint64_t)v7);
}

uint64_t sub_1004FA2C8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 153);
}

uint64_t sub_1004FA2D0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 154);
}

void sub_1004FA2D8(uint64_t a1, uint64_t state64)
{
  if (*(unsigned __int8 *)(a1 + 155) != state64)
  {
    char v2 = state64;
    *(unsigned char *)(a1 + 155) = state64;
    notify_set_state(*(_DWORD *)(a1 + 168), state64);
    notify_post("com.apple.bluetooth.power");
    if (sub_10054019C())
    {
      char v4 = *(void **)(a1 + 112);
      if (v4)
      {
        id v5 = v4;
      }
      else
      {
        uint64_t v6 = BiomeLibrary();
        __int16 v7 = [v6 Device];
        char v8 = [v7 Wireless];
        uint64_t v9 = [v8 BluetoothPowerEnabled];
        uint64_t v10 = *(void **)(a1 + 112);
        *(void *)(a1 + 112) = v9;

        id v5 = *(id *)(a1 + 112);
        if (!v5) {
          return;
        }
      }
      uint64_t v11 = sub_1004AFD94();
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      void v13[2] = sub_1004FA464;
      v13[3] = &unk_100998BB0;
      char v15 = v2;
      id v12 = v5;
      id v14 = v12;
      sub_100013018(v11, v13);
    }
  }
}

void sub_1004FA420(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004FA464(uint64_t a1)
{
  id v2 = objc_alloc((Class)BMDeviceBluetoothPowerEnabled);
  uint64_t v3 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 40)];
  id v5 = [v2 initWithStarting:v3];

  char v4 = [*(id *)(a1 + 32) source];
  [v4 sendEvent:v5];
}

void sub_1004FA500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1004FA528(os_unfair_lock_s *a1, uint32_t a2)
{
  if (a1[39]._os_unfair_lock_opaque != a2)
  {
    a1[39]._os_unfair_lock_opaque = a2;
    sub_1004F90DC(a1);
  }
}

void sub_1004FA540(os_unfair_lock_s *a1, uint32_t a2)
{
  if (a1[40]._os_unfair_lock_opaque != a2)
  {
    a1[40]._os_unfair_lock_opaque = a2;
    sub_1004F90DC(a1);
  }
}

uint64_t sub_1004FA558(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 48))(a2, *(unsigned __int16 *)(*(void *)(a1 + 32) + 156));
}

uint64_t sub_1004FA58C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 152);
}

uint64_t sub_1004FA594(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = 0x1000000000000;
  if (!a2) {
    uint64_t v7 = 0;
  }
  notify_set_state(*(_DWORD *)(a1 + 176), v7 | a3);
  notify_post("com.apple.bluetooth.pairing");
  notify_set_state(*(_DWORD *)(a1 + 180), a3 | (a4 << 56));
  char v8 = qword_100A1A048;
  if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_DEFAULT))
  {
    switch((int)a4)
    {
      case 200:
        uint64_t v9 = "CBPairingReasonUnpairDefault";
        break;
      case 201:
        uint64_t v9 = "CBPairingReasonUnpairUserSwitch";
        break;
      case 202:
        uint64_t v9 = "CBPairingReasonUnpairCloud";
        break;
      case 203:
        uint64_t v9 = "CBPairingReasonUnpairMagnet";
        break;
      default:
        uint64_t v10 = "?";
        if (a4 == 1) {
          uint64_t v10 = "CBPairingReasonPairingDefault";
        }
        if (a4) {
          uint64_t v9 = v10;
        }
        else {
          uint64_t v9 = "CBPairingReasonUnknown";
        }
        break;
    }
    sub_1006ACEAC();
    id v11 = objc_claimAutoreleasedReturnValue();
    int v13 = 136315394;
    id v14 = v9;
    __int16 v15 = 2080;
    id v16 = [v11 UTF8String];
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Bluetooth Daemon: pairingReason %s, addr %s", (uint8_t *)&v13, 0x16u);
  }
  return notify_post("com.apple.bluetooth.pairingWithReason");
}

void sub_1004FA730(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1004FA758(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 196) = a2;
  id v2 = *(uint64_t (**)(void))(*(void *)sub_100050530() + 616);

  return v2();
}

uint64_t sub_1004FA7BC(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 216) != a2)
  {
    *(unsigned char *)(a1 + 216) = a2;
    return sub_1004F9374(a1);
  }
  return a1;
}

os_unfair_lock_s *sub_1004FA7D4(os_unfair_lock_s *result, int a2, uint64_t a3)
{
  if (BYTE1(result[49]._os_unfair_lock_opaque) != a2)
  {
    id v5 = result;
    uint64_t v6 = qword_100A1A048;
    if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = sub_1006ACEAC();
      char v8 = (void *)v7;
      uint64_t v9 = "off";
      if (a2) {
        uint64_t v9 = "on";
      }
      *(_DWORD *)std::string buf = 138543618;
      uint64_t v13 = v7;
      __int16 v14 = 2080;
      __int16 v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Bluetooth Daemon: A2DP streaming to device %{public}@: %s", buf, 0x16u);
    }
    BYTE1(v5[49]._os_unfair_lock_opaque) = a2;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_1004FA938;
    uint64_t v10[3] = &unk_1009B2B58;
    void v10[4] = a3;
    char v11 = a2;
    sub_1000144B0(v5 + 30, v10);
    return (os_unfair_lock_s *)sub_1004F9174(v5);
  }
  return result;
}

uint64_t sub_1004FA938(uint64_t a1, uint64_t (***a2)(void, void, void, uint64_t))
{
  return (**a2)(a2, *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), 2);
}

void sub_1004FA970(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v5 = qword_100A1A048;
  if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 138412290;
    id v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Bluetooth Daemon: Country code changed: %@", buf, 0xCu);
  }
  objc_storeStrong((id *)(a1 + 480), a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1004FAAC0;
  void v7[3] = &unk_1009B2B80;
  id v8 = v4;
  id v6 = v4;
  sub_1000144B0((os_unfair_lock_s *)(a1 + 120), v7);
}

void sub_1004FAAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1004FAAC0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 56))(a2, *(void *)(a1 + 32));
}

os_unfair_lock_s *sub_1004FAAF0(os_unfair_lock_s *result, int a2, uint64_t a3)
{
  if (BYTE2(result[49]._os_unfair_lock_opaque) != a2)
  {
    id v5 = result;
    id v6 = qword_100A1A048;
    if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = sub_1006ACEAC();
      id v8 = (void *)v7;
      uint64_t v9 = "off";
      if (a2) {
        uint64_t v9 = "on";
      }
      *(_DWORD *)std::string buf = 138543618;
      uint64_t v13 = v7;
      __int16 v14 = 2080;
      __int16 v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Bluetooth Daemon: HFP streaming to device %{public}@: %s", buf, 0x16u);
    }
    BYTE2(v5[49]._os_unfair_lock_opaque) = a2;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_1004FAC54;
    uint64_t v10[3] = &unk_1009B2B58;
    void v10[4] = a3;
    char v11 = a2;
    sub_1000144B0(v5 + 30, v10);
    return (os_unfair_lock_s *)sub_1004F9174(v5);
  }
  return result;
}

uint64_t sub_1004FAC54(uint64_t a1, uint64_t (***a2)(void, void, void, uint64_t))
{
  return (**a2)(a2, *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), 1);
}

os_unfair_lock_s *sub_1004FAC8C(os_unfair_lock_s *result, int a2, uint64_t a3)
{
  if (HIBYTE(result[49]._os_unfair_lock_opaque) != a2)
  {
    id v5 = result;
    id v6 = qword_100A1A048;
    if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = sub_1006AD3F0();
      id v8 = (void *)v7;
      uint64_t v9 = "off";
      if (a2) {
        uint64_t v9 = "on";
      }
      *(_DWORD *)std::string buf = 138543618;
      uint64_t v13 = v7;
      __int16 v14 = 2080;
      __int16 v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Bluetooth Daemon: LEA streaming to device: %{public}@  %s", buf, 0x16u);
    }
    HIBYTE(v5[49]._os_unfair_lock_opaque) = a2;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_1004FADF0;
    uint64_t v10[3] = &unk_1009B2B58;
    void v10[4] = a3;
    char v11 = a2;
    sub_1000144B0(v5 + 30, v10);
    return (os_unfair_lock_s *)sub_1004F9174(v5);
  }
  return result;
}

uint64_t sub_1004FADF0(uint64_t a1, uint64_t (***a2)(void, void, void, uint64_t))
{
  return (**a2)(a2, *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), 3);
}

void sub_1004FAE28(uint64_t a1, int a2, uint64_t a3)
{
  if (*(unsigned __int8 *)(a1 + 201) != a2)
  {
    id v6 = qword_100A1A048;
    if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = sub_1006ACEAC();
      id v8 = (void *)v7;
      uint64_t v9 = "off";
      if (a2) {
        uint64_t v9 = "on";
      }
      *(_DWORD *)std::string buf = 138543618;
      uint64_t v13 = v7;
      __int16 v14 = 2080;
      __int16 v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "BT ACL protect mode to device %{public}@: %s", buf, 0x16u);
    }
    *(unsigned char *)(a1 + 201) = a2;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_1004FAF84;
    uint64_t v10[3] = &unk_1009B2B58;
    void v10[4] = a3;
    char v11 = a2;
    sub_1000144B0((os_unfair_lock_s *)(a1 + 120), v10);
  }
}

uint64_t sub_1004FAF84(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 16))(a2, *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_1004FAFB8(uint64_t result, char a2)
{
  *(unsigned char *)(result + 203) = a2;
  return result;
}

uint64_t sub_1004FAFC0(uint64_t result, char a2)
{
  *(unsigned char *)(result + 202) = a2;
  return result;
}

unsigned char *sub_1004FAFC8(unsigned char *result, int a2)
{
  if (result[204] != a2)
  {
    id v2 = result;
    result[204] = a2;
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    void v3[2] = sub_1004FB05C;
    void v3[3] = &unk_1009B2BA0;
    char v4 = a2;
    sub_1000144B0((os_unfair_lock_s *)result + 30, v3);
    return sub_1004F9174(v2);
  }
  return result;
}

uint64_t sub_1004FB05C(uint64_t a1, uint64_t (***a2)(void, void, void, uint64_t))
{
  return (**a2)(a2, 0, *(unsigned __int8 *)(a1 + 32), 4);
}

void sub_1004FB090(double a1)
{
  if (a1 <= 0.0)
  {
    uint64_t v1 = 0;
  }
  else
  {
    uint64_t v1 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:");
  }
  id v2 = v1;
  CFPreferencesSetAppValue(@"DenylistEnabledTime", v1, @"com.apple.BTServer");
}

void sub_1004FB104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

double sub_1004FB118()
{
  uint64_t v0 = (void *)CFPreferencesCopyAppValue(@"DenylistEnabledTime", @"com.apple.BTServer");
  double v1 = 0.0;
  if (v0)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      [v0 timeIntervalSinceReferenceDate];
      double v1 = v2;
    }
  }

  return v1;
}

void sub_1004FB18C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1004FB19C(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 164) != a2)
  {
    *(_DWORD *)(a1 + 164) = a2;
    return sub_1004F9294(a1);
  }
  return a1;
}

BOOL sub_1004FB1B4(unsigned char *a1)
{
  return !a1[198] && !a1[199] && a1[204] == 0;
}

BOOL sub_1004FB1DC(unsigned char *a1)
{
  if (IsAppleInternalBuild())
  {
    if (qword_100A13820 != -1) {
      dispatch_once(&qword_100A13820, &stru_1009B2BC0);
    }
    if (byte_100A13818) {
      return 1;
    }
  }
  sub_10003FB34();
  return (sub_1000262C4() || !a1[197] && !a1[198]) && !a1[199] && a1[204] == 0;
}

void sub_1004FB278(id a1)
{
  uint64_t v1 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "AllowConnScanPrioritizationAlways");
  int v2 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v1 + 72))(v1, buf, __p, &byte_100A13818);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0)
  {
    operator delete(*(void **)buf);
    if (!v2) {
      return;
    }
  }
  else if (!v2)
  {
    return;
  }
  uint64_t v3 = qword_100A1A048;
  if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A13818) {
      char v4 = "Yes";
    }
    else {
      char v4 = "No";
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Warning: AllowConnScanPrioritizationAlways: %s", buf, 0xCu);
  }
}

void sub_1004FB3C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1004FB404(unsigned char *a1)
{
  return a1[197] || a1[198] || a1[200] || a1[204] != 0;
}

void sub_1004FB434(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  if (*(unsigned char *)a2)
  {
    int v9 = *(_DWORD *)(a2 + 20) + a4;
    *(_DWORD *)(a2 + 16) += a3;
    *(_DWORD *)(a2 + 2sub_1004C2140(qword_100A19B68, 0) = v9;
    *(_DWORD *)(a2 + 28) += a5;
  }
  *(unsigned char *)a2 = 1;
  id v10 = qword_100A1A048;
  if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_DEBUG))
  {
    sub_1004FB574(a2);
    if (v13 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)std::string buf = 67109890;
    int v15 = a3;
    __int16 v16 = 1024;
    int v17 = a4;
    __int16 v18 = 1024;
    int v19 = a5;
    __int16 v20 = 2080;
    long long v21 = p_p;
    _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "updateActualRxForRequest totalRx:%d btMCRx:%d duration:%d rxThreshold:%s", buf, 0x1Eu);
    if (v13 < 0) {
      operator delete(__p);
    }
  }
}

uint64_t sub_1004FB574(uint64_t a1)
{
  uint64_t v27 = 0;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v16 = 0u;
  memset(v14, 0, sizeof(v14));
  sub_1000419CC((uint64_t)v14);
  uint64_t v2 = sub_10003AB28((uint64_t)v14);
  uint64_t v3 = sub_10003AB28(v2);
  char v4 = sub_10003C014(*(_DWORD *)(a1 + 4));
  strlen(v4);
  uint64_t v5 = sub_10003AB28(v3);
  sub_10003AB28(v5);
  uint64_t v6 = std::ostream::operator<<();
  sub_10003AB28(v6);
  sub_10003AB28((uint64_t)v14);
  uint64_t v7 = std::ostream::operator<<();
  sub_10003AB28(v7);
  sub_10003AB28((uint64_t)v14);
  uint64_t v8 = std::ostream::operator<<();
  sub_10003AB28(v8);
  sub_10003AB28((uint64_t)v14);
  uint64_t v9 = std::ostream::operator<<();
  sub_10003AB28(v9);
  sub_10003AB28((uint64_t)v14);
  uint64_t v10 = std::ostream::operator<<();
  sub_10003AB28(v10);
  sub_10003AB28((uint64_t)v14);
  uint64_t v11 = std::ostream::operator<<();
  sub_10003AB28(v11);
  sub_10003AB28((uint64_t)v14);
  uint64_t v12 = std::ostream::operator<<();
  sub_10003AB28(v12);
  std::stringbuf::str();
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1004FB858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004FB86C(uint64_t a1)
{
  v16[0] = 0;
  v16[1] = 0;
  sub_10003AED0((uint64_t)v16, a1 + 40);
  uint64_t v2 = qword_100A1A048;
  BOOL v3 = os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_INFO);
  if (v3)
  {
    int v4 = *(_DWORD *)(a1 + 344);
    int v5 = *(_DWORD *)(a1 + 348);
    int v6 = *(_DWORD *)(a1 + 356);
    int v7 = *(_DWORD *)(a1 + 360);
    *(_DWORD *)std::string buf = 67109888;
    int v18 = v4;
    __int16 v19 = 1024;
    int v20 = v5;
    __int16 v21 = 1024;
    int v22 = v6;
    __int16 v23 = 1024;
    int v24 = v7;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "updateActualRx fLastScan: TotalRx=%u BtMCRx=%u fLastConnectionScan: TotalRx=%u BtMCRx=%u", buf, 0x1Au);
  }
  uint64_t v8 = *(void **)(a1 + 224);
  if (v8 != (void *)(a1 + 232))
  {
    do
    {
      sub_1004FB434(v3, (uint64_t)(v8 + 5), *(_DWORD *)(a1 + 344), *(_DWORD *)(a1 + 348), *(_DWORD *)(a1 + 352));
      uint64_t v9 = (void *)v8[1];
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          uint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (void *)v8[2];
          BOOL v11 = *v10 == (void)v8;
          uint64_t v8 = v10;
        }
        while (!v11);
      }
      uint64_t v8 = v10;
    }
    while (v10 != (void *)(a1 + 232));
  }
  uint64_t v12 = *(void **)(a1 + 248);
  if (v12 != (void *)(a1 + 256))
  {
    do
    {
      sub_1004FB434(v3, (uint64_t)(v12 + 7), *(_DWORD *)(a1 + 356), *(_DWORD *)(a1 + 360), *(_DWORD *)(a1 + 364));
      char v13 = (void *)v12[1];
      if (v13)
      {
        do
        {
          __int16 v14 = v13;
          char v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          __int16 v14 = (void *)v12[2];
          BOOL v11 = *v14 == (void)v12;
          uint64_t v12 = v14;
        }
        while (!v11);
      }
      uint64_t v12 = v14;
    }
    while (v14 != (void *)(a1 + 256));
  }
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 36sub_1004C2140(qword_100A19B68, 0) = 0;
  return sub_10003AFB4((uint64_t)v16);
}

void sub_1004FBA18(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1004FBA38(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  if (*(unsigned char *)(a4 + 1))
  {
    int v7 = qword_100A1A048;
    if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_INFO))
    {
      sub_1004FB574(a4);
      uint64_t v8 = v25 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v27 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s was cancelled , notifying", buf, 0xCu);
      if (v25 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v9 = *(void *)(a4 + 64);
    if (v9) {
      (*(void (**)(uint64_t, uint64_t, void, void, void, uint64_t))(v9 + 16))(v9, a2, *(unsigned int *)(a4 + 16), *(unsigned int *)(a4 + 20), *(unsigned int *)(a4 + 28), 2);
    }
    uint64_t v10 = *(void *)(a4 + 72);
    if (!v10) {
      return 1;
    }
    if (*((char *)a3 + 23) < 0)
    {
      sub_10003B098(&__dst, *(void **)a3, *((void *)a3 + 1));
    }
    else
    {
      long long __dst = *a3;
      uint64_t v23 = *((void *)a3 + 2);
    }
    (*(void (**)(uint64_t, long long *, void, void, void, uint64_t))(v10 + 16))(v10, &__dst, *(unsigned int *)(a4 + 16), *(unsigned int *)(a4 + 20), *(unsigned int *)(a4 + 28), 2);
    if ((SHIBYTE(v23) & 0x80000000) == 0) {
      return 1;
    }
    p_uuid_t dst = (void **)&__dst;
    goto LABEL_37;
  }
  unsigned int v11 = *(_DWORD *)(a4 + 8);
  if (!v11 || v11 > *(_DWORD *)(a4 + 16))
  {
    unsigned int v12 = *(_DWORD *)(a4 + 12);
    if (!v12 || v12 > *(_DWORD *)(a4 + 20))
    {
      unsigned int v13 = *(_DWORD *)(a4 + 24);
      if (!v13 || v13 > *(_DWORD *)(a4 + 28)) {
        return 0;
      }
    }
  }
  int v15 = qword_100A1A048;
  if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_INFO))
  {
    sub_1004FB574(a4);
    long long v16 = v25 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v27 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "%s has completed, notifying", buf, 0xCu);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v17 = *(void *)(a4 + 64);
  if (v17) {
    (*(void (**)(uint64_t, uint64_t, void, void, void, uint64_t))(v17 + 16))(v17, a2, *(unsigned int *)(a4 + 16), *(unsigned int *)(a4 + 20), *(unsigned int *)(a4 + 28), 1);
  }
  uint64_t v18 = *(void *)(a4 + 72);
  if (v18)
  {
    if (*((char *)a3 + 23) < 0)
    {
      sub_10003B098(&v20, *(void **)a3, *((void *)a3 + 1));
    }
    else
    {
      long long v20 = *a3;
      uint64_t v21 = *((void *)a3 + 2);
    }
    (*(void (**)(uint64_t, long long *, void, void, void, uint64_t))(v18 + 16))(v18, &v20, *(unsigned int *)(a4 + 16), *(unsigned int *)(a4 + 20), *(unsigned int *)(a4 + 28), 1);
    if (SHIBYTE(v21) < 0)
    {
      p_uuid_t dst = (void **)&v20;
LABEL_37:
      operator delete(*p_dst);
    }
  }
  return 1;
}

void sub_1004FBD00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004FBD3C(uint64_t a1)
{
  v58[0] = 0;
  v58[1] = 0;
  sub_10003AED0((uint64_t)v58, a1 + 40);
  uint64_t v2 = qword_100A1A048;
  if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 240);
    uint64_t v4 = *(void *)(a1 + 264);
    int v5 = *(unsigned __int8 *)(a1 + 104);
    *(_DWORD *)std::string buf = 134218496;
    *(void *)&uint8_t buf[4] = v3;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&unsigned char buf[14] = v4;
    *(_WORD *)&unsigned char buf[22] = 1024;
    int v61 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "checkForExpired fSessionThresholds:%lu fConnectScanThresholds:%lu fStackStarted:%d", buf, 0x1Cu);
  }
  if (!*(unsigned char *)(a1 + 104)) {
    return sub_10003AFB4((uint64_t)v58);
  }
  memset(buf, 0, sizeof(buf));
  int v6 = *(void **)(a1 + 224);
  long long v55 = 0;
  int v56 = 0;
  unint64_t v57 = 0;
  if (v6 == (void *)(a1 + 232)) {
    goto LABEL_40;
  }
  do
  {
    uint64_t v7 = v6[4];
    sub_10004191C(v53, "");
    long long v8 = *(_OWORD *)(v6 + 7);
    v47[0] = *(_OWORD *)(v6 + 5);
    v47[1] = v8;
    if (*((char *)v6 + 95) < 0)
    {
      sub_10003B098(&__p, (void *)v6[9], v6[10]);
    }
    else
    {
      long long __p = *(_OWORD *)(v6 + 9);
      uint64_t v49 = v6[11];
    }
    int v50 = *((_DWORD *)v6 + 24);
    id v51 = objc_retainBlock((id)v6[13]);
    id v52 = objc_retainBlock((id)v6[14]);
    int v9 = sub_1004FBA38((uint64_t)v52, v7, (long long *)v53, (uint64_t)v47);

    if (SHIBYTE(v49) < 0) {
      operator delete((void *)__p);
    }
    if (v54 < 0)
    {
      operator delete(v53[0]);
      if (!v9) {
        goto LABEL_31;
      }
    }
    else if (!v9)
    {
      goto LABEL_31;
    }
    uint64_t v10 = *(void *)&buf[8];
    if (*(void *)&buf[8] >= *(void *)&buf[16])
    {
      uint64_t v12 = (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3;
      if ((unint64_t)(v12 + 1) >> 61) {
        abort();
      }
      unint64_t v13 = (uint64_t)(*(void *)&buf[16] - *(void *)buf) >> 2;
      if (v13 <= v12 + 1) {
        unint64_t v13 = v12 + 1;
      }
      if (*(void *)&buf[16] - *(void *)buf >= 0x7FFFFFFFFFFFFFF8uLL) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v13;
      }
      if (v14) {
        int v15 = (char *)sub_1000405F8((uint64_t)&buf[16], v14);
      }
      else {
        int v15 = 0;
      }
      long long v16 = &v15[8 * v12];
      *(void *)long long v16 = v6[4];
      unsigned int v11 = v16 + 8;
      uint64_t v18 = *(char **)buf;
      uint64_t v17 = *(char **)&buf[8];
      if (*(void *)&buf[8] != *(void *)buf)
      {
        do
        {
          uint64_t v19 = *((void *)v17 - 1);
          v17 -= 8;
          *((void *)v16 - 1) = v19;
          v16 -= 8;
        }
        while (v17 != v18);
        uint64_t v17 = *(char **)buf;
      }
      *(void *)std::string buf = v16;
      *(void *)&uint8_t buf[8] = v11;
      *(void *)&uint8_t buf[16] = &v15[8 * v14];
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      **(void **)&uint8_t buf[8] = v6[4];
      unsigned int v11 = (void *)(v10 + 8);
    }
    *(void *)&uint8_t buf[8] = v11;
LABEL_31:
    long long v20 = (void *)v6[1];
    if (v20)
    {
      do
      {
        uint64_t v21 = v20;
        long long v20 = (void *)*v20;
      }
      while (v20);
    }
    else
    {
      do
      {
        uint64_t v21 = (void *)v6[2];
        BOOL v22 = *v21 == (void)v6;
        int v6 = v21;
      }
      while (!v22);
    }
    int v6 = v21;
  }
  while (v21 != (void *)(a1 + 232));
  uint64_t v23 = *(unint64_t **)buf;
  int v24 = *(unint64_t **)&buf[8];
  while (v23 != v24)
    sub_1004FFD4C(a1 + 224, v23++);
LABEL_40:
  uint64_t v27 = *(uint64_t ***)(a1 + 248);
  char v25 = (uint64_t **)(a1 + 248);
  long long v26 = v27;
  if (v27 != v25 + 1)
  {
    while (2)
    {
      int v28 = v26 + 4;
      if (*((char *)v26 + 55) < 0)
      {
        sub_10003B098(__dst, v26[4], (unint64_t)v26[5]);
      }
      else
      {
        *(_OWORD *)long long __dst = *v28;
        unsigned int v46 = v26[6];
      }
      long long v29 = *(_OWORD *)(v26 + 9);
      v39[0] = *(_OWORD *)(v26 + 7);
      v39[1] = v29;
      if (*((char *)v26 + 111) < 0)
      {
        sub_10003B098(&v40, v26[11], (unint64_t)v26[12]);
      }
      else
      {
        long long v40 = *(_OWORD *)(v26 + 11);
        unsigned int v41 = v26[13];
      }
      int v42 = *((_DWORD *)v26 + 28);
      long long v43 = objc_retainBlock(v26[15]);
      unsigned __int16 v44 = objc_retainBlock(v26[16]);
      int v30 = sub_1004FBA38((uint64_t)v44, 0, (long long *)__dst, (uint64_t)v39);

      if (SHIBYTE(v41) < 0) {
        operator delete((void *)v40);
      }
      if (SHIBYTE(v46) < 0)
      {
        operator delete(__dst[0]);
        if (!v30) {
          goto LABEL_60;
        }
      }
      else if (!v30)
      {
        goto LABEL_60;
      }
      BOOL v31 = v56;
      if ((unint64_t)v56 >= v57)
      {
        CFErrorRef v33 = sub_1002B42D4((char **)&v55, (long long *)v26 + 2);
      }
      else
      {
        if (*((char *)v26 + 55) < 0)
        {
          sub_10003B098(v56, v26[4], (unint64_t)v26[5]);
        }
        else
        {
          long long v32 = *v28;
          *((void *)v56 + 2) = v26[6];
          *BOOL v31 = v32;
        }
        CFErrorRef v33 = (char *)v31 + 24;
      }
      int v56 = v33;
LABEL_60:
      int v34 = v26[1];
      if (v34)
      {
        do
        {
          int v35 = (uint64_t **)v34;
          int v34 = (uint64_t *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          int v35 = (uint64_t **)v26[2];
          BOOL v22 = *v35 == (uint64_t *)v26;
          long long v26 = v35;
        }
        while (!v22);
      }
      long long v26 = v35;
      if (v35 == v25 + 1) {
        break;
      }
      continue;
    }
  }
  unsigned int v36 = v55;
  __int16 v37 = (const void **)v56;
  while (v36 != v37)
  {
    sub_1004FFDD4(v25, v36);
    v36 += 3;
  }
  long long v59 = (char **)&v55;
  sub_100051568((void ***)&v59);
  if (*(void *)buf)
  {
    *(void *)&uint8_t buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
  return sub_10003AFB4((uint64_t)v58);
}

void sub_1004FC1FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  *(void *)(v43 - 184) = v42;
  *(void *)(v43 - 152) = v43 - 192;
  sub_100051568((void ***)(v43 - 152));
  __int16 v45 = *(void **)(v43 - 144);
  if (v45)
  {
    *(void *)(v43 - 136) = v45;
    operator delete(v45);
  }
  sub_10003AFB4(v43 - 168);
  _Unwind_Resume(a1);
}

uint64_t sub_1004FC2A0(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

uint64_t sub_1004FC2E4(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  int v6 = *(_DWORD *)(a2 + 24);
  int v8 = *(_DWORD *)(a2 + 8);
  int v7 = *(_DWORD *)(a2 + 12);
  if (v8) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = v6 == 0;
  }
  if (v9 && v7 == 0)
  {
    long long v32 = qword_100A1A048;
    if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_INFO))
    {
      uint64_t v35 = *(void *)(a2 + 32);
      uint64_t v34 = a2 + 32;
      uint64_t v33 = v35;
      if (*(char *)(v34 + 23) >= 0) {
        uint64_t v33 = v34;
      }
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v40 = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "%s ignoring invalid threshold request for minimum calculation", buf, 0xCu);
    }
    return 0;
  }
  else
  {
    if (v8) {
      unsigned int v14 = v8 - *(_DWORD *)(a2 + 16);
    }
    else {
      unsigned int v14 = 0;
    }
    if (v7) {
      unsigned int v15 = v7 - *(_DWORD *)(a2 + 20);
    }
    else {
      unsigned int v15 = 0;
    }
    if (v6) {
      unsigned int v16 = v6 - *(_DWORD *)(a2 + 28);
    }
    else {
      unsigned int v16 = 0;
    }
    uint64_t v17 = qword_100A1A048;
    if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_INFO))
    {
      sub_1004FB574(a2);
      if (v38 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      unsigned int v19 = *a3;
      unsigned int v20 = *a4;
      *(_DWORD *)std::string buf = 136316418;
      uint64_t v40 = (uint64_t)p_p;
      __int16 v41 = 1024;
      unsigned int v42 = v14;
      __int16 v43 = 1024;
      unsigned int v44 = v15;
      __int16 v45 = 1024;
      unsigned int v46 = v19;
      __int16 v47 = 1024;
      unsigned int v48 = v20;
      __int16 v49 = 1024;
      unsigned int v50 = v16;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "%s sessionTotalRxDelta=%u sessionBtMCRxDelta=%u totalRxDeltaMs=%u btMCRxDelta=%u sessionTimeoutDelta=%u", buf, 0x2Au);
      if (v38 < 0) {
        operator delete(__p);
      }
      int v6 = *(_DWORD *)(a2 + 24);
    }
    if (v6) {
      BOOL v21 = v16 == 0;
    }
    else {
      BOOL v21 = 1;
    }
    uint64_t v23 = !v21 && v16 < *a5;
    if (v23 == 1)
    {
      *a5 = v16;
      int v24 = qword_100A1A048;
      if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_INFO))
      {
        uint64_t v25 = a2 + 32;
        if (*(char *)(a2 + 55) < 0) {
          uint64_t v25 = *(void *)(a2 + 32);
        }
        *(_DWORD *)std::string buf = 136315394;
        uint64_t v40 = v25;
        __int16 v41 = 1024;
        unsigned int v42 = v16;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "%s set new minimal timeout=%u", buf, 0x12u);
      }
    }
    if (*(_DWORD *)(a2 + 8))
    {
      if (v14)
      {
        if (*a3 > v14)
        {
          *a3 = v14;
          long long v26 = qword_100A1A048;
          uint64_t v23 = 1;
          if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_INFO))
          {
            uint64_t v27 = a2 + 32;
            if (*(char *)(a2 + 55) < 0) {
              uint64_t v27 = *(void *)(a2 + 32);
            }
            *(_DWORD *)std::string buf = 136315394;
            uint64_t v40 = v27;
            __int16 v41 = 1024;
            unsigned int v42 = v14;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "%s set new minimal totalRxDeltaMs=%u", buf, 0x12u);
          }
        }
      }
    }
    if (*(_DWORD *)(a2 + 12))
    {
      if (v15)
      {
        if (*a4 > v15)
        {
          *a4 = v15;
          int v28 = qword_100A1A048;
          uint64_t v23 = 1;
          if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_INFO))
          {
            uint64_t v31 = *(void *)(a2 + 32);
            uint64_t v30 = a2 + 32;
            uint64_t v29 = v31;
            if (*(char *)(v30 + 23) >= 0) {
              uint64_t v29 = v30;
            }
            *(_DWORD *)std::string buf = 136315394;
            uint64_t v40 = v29;
            __int16 v41 = 1024;
            unsigned int v42 = v15;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "%s set new minimal btMCRxDeltaMs=%u", buf, 0x12u);
          }
        }
      }
    }
  }
  return v23;
}

BOOL sub_1004FC660(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 376)) {
    return 1;
  }
  if (*(_DWORD *)(a2 + 4)) {
    BOOL v6 = *(void *)(a2 + 64) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    goto LABEL_13;
  }
  uint64_t v13 = 0;
  *(_OWORD *)long long __p = 0u;
  long long v12 = 0u;
  long long v10 = 0u;
  memset(v9, 0, sizeof(v9));
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009B2E90);
  }
  sub_100033820((uint64_t)off_1009F85C0, *(_DWORD *)(a2 + 4), (uint64_t)v9);
  int v7 = BYTE8(v9[0]);
  uint64_t v2 = BYTE7(v9[0]) != 0;
  if (__p[1])
  {
    *(void **)&long long v12 = __p[1];
    operator delete(__p[1]);
  }
  unsigned int v14 = (void **)&v10;
  sub_100035EAC(&v14);
  if (!v7)
  {
LABEL_13:
    switch(*(_DWORD *)(a2 + 56))
    {
      case 1:
        goto LABEL_32;
      case 2:
        goto LABEL_37;
      case 3:
        if (*(unsigned char *)(a1 + 197) || *(unsigned char *)(a1 + 198) || *(unsigned char *)(a1 + 200)) {
          return 1;
        }
        return *(unsigned char *)(a1 + 204) != 0;
      case 4:
        if (!*(unsigned char *)(a1 + 197) && !*(unsigned char *)(a1 + 198) && !*(unsigned char *)(a1 + 200) && !*(unsigned char *)(a1 + 204)) {
          goto LABEL_27;
        }
        goto LABEL_32;
      case 5:
        if (!*(unsigned char *)(a1 + 197) && !*(unsigned char *)(a1 + 198) && !*(unsigned char *)(a1 + 200) && !*(unsigned char *)(a1 + 204)) {
          goto LABEL_27;
        }
        goto LABEL_37;
      case 6:
        if (*(unsigned char *)(a1 + 197) || *(unsigned char *)(a1 + 198) || *(unsigned char *)(a1 + 200) || *(unsigned char *)(a1 + 204)) {
          return 1;
        }
LABEL_32:
        uint64_t v2 = *(_DWORD *)(a1 + 276) == 1;
        break;
      case 7:
        if (*(unsigned char *)(a1 + 197) || *(unsigned char *)(a1 + 198) || *(unsigned char *)(a1 + 200) || *(unsigned char *)(a1 + 204)) {
          return 1;
        }
LABEL_37:
        uint64_t v8 = sub_100052EB4();
        uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 96))(v8);
        break;
      default:
LABEL_27:
        uint64_t v2 = 0;
        break;
    }
  }
  return v2;
}

uint64_t sub_1004FC888(uint64_t a1)
{
  v47[0] = 0;
  v47[1] = 0;
  sub_10003AED0((uint64_t)v47, a1 + 40);
  uint64_t v2 = qword_100A1A048;
  if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 240);
    uint64_t v4 = *(void *)(a1 + 264);
    int v5 = *(unsigned __int8 *)(a1 + 104);
    *(_DWORD *)std::string buf = 134218496;
    *(void *)&uint8_t buf[4] = v3;
    *(_WORD *)&unsigned char buf[12] = 2048;
    uint64_t v49 = v4;
    *(_WORD *)unsigned int v50 = 1024;
    *(_DWORD *)&void v50[2] = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "configureNextThreshold fDiscoveryScanThresholds:%lu fConnectScanThresholds:%lu fStackStarted:%d", buf, 0x1Cu);
  }
  if (*(unsigned char *)(a1 + 104))
  {
    unsigned int v45 = -1;
    unsigned int v46 = -1;
    unsigned int v43 = -1;
    unsigned int v44 = -1;
    unsigned int v42 = -1;
    BOOL v6 = *(void **)(a1 + 224);
    if (v6 == (void *)(a1 + 232))
    {
      char v7 = 0;
    }
    else
    {
      char v7 = 0;
      do
      {
        BOOL v8 = sub_1004FC660(a1, (uint64_t)(v6 + 5));
        if (v8 && !(*(unsigned __int8 *)(a1 + 320) | *((unsigned __int8 *)v6 + 41)))
        {
          int v9 = *((_DWORD *)v6 + 16);
          if (v9)
          {
            int v10 = *((_DWORD *)v6 + 13);
            if (v10 != v9)
            {
              if (v10)
              {
                *((_DWORD *)v6 + 12) = v9;
                *((_DWORD *)v6 + 13) = v9;
                unsigned int v11 = qword_100A1A048;
                char v7 = 1;
                BOOL v8 = os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_INFO);
                if (v8)
                {
                  sub_1004FB574((uint64_t)(v6 + 5));
                  long long v12 = v50[1] >= 0 ? buf : *(unsigned char **)buf;
                  *(_DWORD *)std::string v62 = 136315138;
                  long long v63 = v12;
                  _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "New coex actuals for scanRequest %s", v62, 0xCu);
                  if ((v50[1] & 0x80000000) != 0) {
                    operator delete(*(void **)buf);
                  }
                }
              }
            }
          }
        }
        char v13 = sub_1004FC2E4(v8, (uint64_t)(v6 + 5), &v46, &v45, &v42);
        unsigned int v14 = (void *)v6[1];
        if (v14)
        {
          do
          {
            unsigned int v15 = v14;
            unsigned int v14 = (void *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            unsigned int v15 = (void *)v6[2];
            BOOL v16 = *v15 == (void)v6;
            BOOL v6 = v15;
          }
          while (!v16);
        }
        v7 |= v13;
        BOOL v6 = v15;
      }
      while (v15 != (void *)(a1 + 232));
    }
    uint64_t v17 = *(void **)(a1 + 248);
    if (v17 != (void *)(a1 + 256))
    {
      do
      {
        BOOL v18 = sub_1004FC660(a1, (uint64_t)(v17 + 7));
        if (v18 && !(*(unsigned __int8 *)(a1 + 320) | *((unsigned __int8 *)v17 + 57)))
        {
          int v19 = *((_DWORD *)v17 + 20);
          if (v19)
          {
            int v20 = *((_DWORD *)v17 + 17);
            if (v20 != v19)
            {
              if (v20)
              {
                *((_DWORD *)v17 + 16) = v19;
                *((_DWORD *)v17 + 17) = v19;
                BOOL v21 = qword_100A1A048;
                char v7 = 1;
                BOOL v18 = os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_INFO);
                if (v18)
                {
                  sub_1004FB574((uint64_t)(v17 + 7));
                  BOOL v22 = v50[1] >= 0 ? buf : *(unsigned char **)buf;
                  *(_DWORD *)std::string v62 = 136315138;
                  long long v63 = v22;
                  _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "New coex actuals for connection %s", v62, 0xCu);
                  if ((v50[1] & 0x80000000) != 0) {
                    operator delete(*(void **)buf);
                  }
                }
              }
            }
          }
        }
        char v23 = sub_1004FC2E4(v18, (uint64_t)(v17 + 7), &v44, &v43, &v42);
        int v24 = (void *)v17[1];
        if (v24)
        {
          do
          {
            uint64_t v25 = v24;
            int v24 = (void *)*v24;
          }
          while (v24);
        }
        else
        {
          do
          {
            uint64_t v25 = (void *)v17[2];
            BOOL v16 = *v25 == (void)v17;
            uint64_t v17 = v25;
          }
          while (!v16);
        }
        v7 |= v23;
        uint64_t v17 = v25;
      }
      while (v25 != (void *)(a1 + 256));
    }
    if (*(unsigned char *)(a1 + 320))
    {
      if (v46 == -1) {
        unsigned int v26 = 0;
      }
      else {
        unsigned int v26 = v46;
      }
      unsigned int v27 = v45;
      if (v45 == -1) {
        unsigned int v27 = 0;
      }
      unsigned int v45 = v27;
      unsigned int v46 = v26;
      if (v44 == -1) {
        unsigned int v28 = 0;
      }
      else {
        unsigned int v28 = v44;
      }
      unsigned int v29 = v43;
      if (v43 == -1) {
        unsigned int v29 = 0;
      }
      unsigned int v43 = v29;
      unsigned int v44 = v28;
      unsigned int v30 = v42;
      if (v42 == -1) {
        unsigned int v30 = 0;
      }
      unsigned int v42 = v30;
    }
    uint64_t v31 = qword_100A1A048;
    if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v7 & 1;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "configChanged=%d deltas:", buf, 8u);
      uint64_t v31 = qword_100A1A048;
    }
    if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v46;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v45;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "scanTotalRxDeltaMs=%u scanBtMCRxDeltaMs=%u", buf, 0xEu);
      uint64_t v31 = qword_100A1A048;
    }
    if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v44;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v43;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "connectTotalRxDeltaMs=%u connectBtMCRxDeltaMs=%u", buf, 0xEu);
    }
    if (*(void *)(a1 + 240) || *(void *)(a1 + 264))
    {
      if ((v7 & 1) == 0) {
        return sub_10003AFB4((uint64_t)v47);
      }
    }
    else
    {
      *(void *)(a1 + 288) = 0;
      *(void *)(a1 + 296) = 0;
      if ((v7 & 1) == 0) {
        return sub_10003AFB4((uint64_t)v47);
      }
    }
    *(void *)std::string buf = 0;
    sub_100026C30((uint64_t)buf);
    int v32 = *(_DWORD *)buf;
    uint64_t v33 = *(__int16 *)&buf[4];
    *(void *)(a1 + 288) = *(int *)buf;
    *(void *)(a1 + 296) = v33;
    if (*(unsigned char *)(a1 + 320))
    {
      uint64_t v34 = qword_100A1A048;
      if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 134217984;
        *(void *)&uint8_t buf[4] = v33 + 1000 * v32;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "configChanged! Configuring controller at time %llu", buf, 0xCu);
        uint64_t v34 = qword_100A1A048;
      }
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67111424;
        *(_DWORD *)&uint8_t buf[4] = 1;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = 0;
        LOWORD(v49) = 1024;
        *(_DWORD *)((char *)&v49 + 2) = v42;
        HIWORD(v49) = 1024;
        *(_DWORD *)unsigned int v50 = v46;
        *(_WORD *)&v50[4] = 1024;
        unsigned int v51 = v45;
        __int16 v52 = 1024;
        unsigned int v53 = v44;
        __int16 v54 = 1024;
        unsigned int v55 = v43;
        __int16 v56 = 1024;
        int v57 = 0;
        __int16 v58 = 1024;
        int v59 = 0;
        __int16 v60 = 1024;
        int v61 = 1;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "getScanStatsWithThreshold reset %u ver %u duration %u discovery %u %u conn %u %u numAdvs %u %u canWakeupAP %u", buf, 0x3Eu);
      }
      uint64_t v35 = sub_10003FB34();
      int v36 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, void, void, void, void, void, char))(*(void *)v35 + 3568))(v35, 1, 0, v42, v46, v45, v44, v43, 0, 1);
      if (v36)
      {
        __int16 v37 = qword_100A1A048;
        if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_ERROR)) {
          sub_100773F60(v36, v37);
        }
      }
    }
    else
    {
      unsigned int v38 = v43;
      if (v43 >= v45) {
        unsigned int v38 = v45;
      }
      if (v42 >= v38) {
        unsigned int v39 = v38;
      }
      else {
        unsigned int v39 = v42;
      }
      uint64_t v40 = qword_100A1A048;
      if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "configChanged! Setting soft timer", buf, 2u);
      }
      sub_1004FCFAC(a1, v39);
    }
    sub_1000144B0((os_unfair_lock_s *)(a1 + 120), &stru_1009B2C00);
  }
  return sub_10003AFB4((uint64_t)v47);
}

void sub_1004FCF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004FCFAC(uint64_t a1, unsigned int a2)
{
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, a1 + 40);
  uint64_t v4 = qword_100A1A048;
  if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    unsigned int v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "armSoftwareScanRxTimer duration=%u", buf, 8u);
  }
  if (!*(unsigned char *)(a1 + 320) && !*(void *)(a1 + 328))
  {
    int v5 = qword_100A1A048;
    if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 67109120;
      unsigned int v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "fSoftwareScanRxTimer %u ms Armed!", buf, 8u);
    }
    uint64_t v6 = sub_1004AF8EC();
    char v7 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(v6 + 8));
    *(void *)(a1 + 328) = v7;
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1004FE19C;
    handler[3] = &unk_100997528;
    handler[4] = a1;
    dispatch_source_set_event_handler(v7, handler);
    BOOL v8 = *(NSObject **)(a1 + 328);
    dispatch_time_t v9 = dispatch_time(0x8000000000000000, 1000000 * a2);
    dispatch_source_set_timer(v8, v9, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_activate(*(dispatch_object_t *)(a1 + 328));
  }
  return sub_10003AFB4((uint64_t)v12);
}

void sub_1004FD170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004FD18C(id a1, BluetoothDaemonListener *a2)
{
}

uint64_t sub_1004FD1B4(uint64_t a1)
{
  uint64_t v2 = qword_100A1A048;
  if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 240);
    uint64_t v4 = *(void *)(a1 + 264);
    int v6 = 134218240;
    uint64_t v7 = v3;
    __int16 v8 = 2048;
    uint64_t v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "evaluateScanRxThresholds fDiscoveryScanThresholds:%lu fConnectScanThresholds:%lu", (uint8_t *)&v6, 0x16u);
  }
  sub_1004FB86C(a1);
  sub_1004FBD3C(a1);
  return sub_1004FC888(a1);
}

uint64_t sub_1004FD284(uint64_t a1, uint64_t *a2)
{
  v48[0] = 0;
  v48[1] = 0;
  sub_10003AED0((uint64_t)v48, a1 + 40);
  if (*(void *)(a1 + 240)) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = *(void *)(a1 + 264) != 0;
  }
  char v40 = v3;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    int v6 = (uint64_t **)(a1 + 248);
    do
    {
      long long v46 = 0u;
      v47[0] = 0;
      *(_OWORD *)long long __p = 0u;
      memset(v44, 0, sizeof(v44));
      v47[1] = 0;

      BYTE1(v44[0]) = 0;
      DWORD1(v44[0]) = 0;
      uint64_t v7 = (const unsigned __int8 *)sub_1000305AC(buf, *(void *)v4);
      memset(out, 0, sizeof(out));
      uuid_unparse_upper(v7, out);
      sub_10004191C(v42, out);
      if (SBYTE7(v46) < 0) {
        operator delete(__p[0]);
      }
      *(_OWORD *)long long __p = *(_OWORD *)v42;
      *(void *)&long long v46 = v43;
      std::string::append((std::string *)__p, "-connectionScan");
      __int16 v8 = qword_100A1A048;
      if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_INFO))
      {
        if ((SBYTE7(v46) & 0x80u) == 0) {
          uint64_t v9 = __p;
        }
        else {
          uint64_t v9 = (void **)__p[0];
        }
        int v10 = *(_DWORD *)(v4 + 8);
        int v11 = *(_DWORD *)(v4 + 12);
        int v12 = *(_DWORD *)(v4 + 16);
        *(_DWORD *)uuid_string_t out = 136315906;
        *(void *)&out[4] = v9;
        *(_WORD *)&out[12] = 1024;
        *(_DWORD *)&out[14] = v10;
        *(_WORD *)&out[18] = 1024;
        *(_DWORD *)&out[20] = v11;
        *(_WORD *)&out[24] = 1024;
        *(_DWORD *)&out[26] = v12;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "requestConnectionScanRxThreshold device=%s totalRx=%u btMCRx=%u timeout=%u", (uint8_t *)out, 0x1Eu);
      }
      memset(out, 0, 24);
      id v13 = [*(id *)v4 UUIDString];
      sub_10004191C(out, (char *)[v13 UTF8String]);

      uint64_t v14 = sub_10003156C((uint64_t)v6, (const void **)out);
      unsigned int v15 = *(_DWORD *)(v4 + 8);
      unsigned int v16 = *(_DWORD *)(v4 + 12);
      int v17 = *(_DWORD *)(v4 + 16);
      if (!__PAIR64__(v16, v15) && !v17)
      {
        uint64_t v18 = v14;
        if (a1 + 256 != v14)
        {
          LOBYTE(v44[0]) = 0;
          memset((char *)v44 + 8, 0, 24);
          id v19 = v47[0];
          v47[0] = 0;

          id v20 = v47[1];
          v47[1] = 0;

          *(void *)((char *)&v44[1] + 4) = *(void *)(v18 + 76);
          LOWORD(v44[0]) = *(_WORD *)(v18 + 56);
          int v21 = *(_DWORD *)(v18 + 112);
          *(_OWORD *)((char *)v44 + 4) = *(_OWORD *)(v18 + 60);
          int v22 = *(_DWORD *)(v18 + 84);
          DWORD2(v46) = v21;
          HIDWORD(v44[1]) = v22;
          char v23 = *(void **)(v18 + 120);
          if (v23)
          {
            id v24 = objc_retainBlock(v23);
            id v25 = v47[0];
            v47[0] = v24;
          }
          unsigned int v26 = *(void **)(v18 + 128);
          if (v26)
          {
            id v27 = objc_retainBlock(v26);
            id v28 = v47[1];
            v47[1] = v27;
          }
          BYTE1(v44[0]) = 1;
          unsigned int v15 = *(_DWORD *)(v4 + 8);
          unsigned int v16 = *(_DWORD *)(v4 + 12);
          int v17 = *(_DWORD *)(v4 + 16);
        }
      }
      *((void *)&v44[0] + 1) = __PAIR64__(v16, v15);
      DWORD2(v44[1]) = v17;
      id v29 = objc_retainBlock(*(id *)(v4 + 32));
      id v30 = v47[1];
      v47[1] = v29;

      DWORD2(v46) = *(_DWORD *)(v4 + 20);
      v42[0] = out;
      uint64_t v31 = sub_1004FFE98(v6, (const void **)out, (uint64_t)&unk_1007BE9D0, (long long **)v42);
      long long v32 = v44[1];
      *(_OWORD *)(v31 + 7) = v44[0];
      *(_OWORD *)(v31 + 9) = v32;
      std::string::operator=((std::string *)(v31 + 11), (const std::string *)__p);
      *((_DWORD *)v31 + 28) = DWORD2(v46);
      id v33 = objc_retainBlock(v47[0]);
      uint64_t v34 = (void *)v31[15];
      v31[15] = (uint64_t)v33;

      id v35 = objc_retainBlock(v47[1]);
      int v36 = (void *)v31[16];
      v31[16] = (uint64_t)v35;

      if (BYTE1(v44[0]))
      {
        __int16 v37 = qword_100A1A048;
        if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_INFO))
        {
          sub_1004FB574((uint64_t)v44);
          unsigned int v38 = v42;
          if (v43 < 0) {
            unsigned int v38 = (void **)v42[0];
          }
          *(_DWORD *)std::string buf = 136315138;
          unsigned int v50 = v38;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "Session %s cancelled", buf, 0xCu);
          if (SHIBYTE(v43) < 0) {
            operator delete(v42[0]);
          }
        }
      }
      if (out[23] < 0) {
        operator delete(*(void **)out);
      }

      if (SBYTE7(v46) < 0) {
        operator delete(__p[0]);
      }
      v4 += 40;
    }
    while (v4 != v5);
  }
  sub_1004FD720(a1, v40);
  return sub_10003AFB4((uint64_t)v48);
}

void sub_1004FD6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_1004FD720(uint64_t a1, char a2)
{
  *(void *)std::string buf = 0;
  sub_100026C30((uint64_t)buf);
  uint64_t v4 = *(int *)buf;
  uint64_t v5 = *(__int16 *)&buf[4];
  uint64_t v6 = *(void *)(a1 + 288);
  uint64_t v7 = *(void *)(a1 + 296);
  *(_WORD *)&buf[6] = 0;
  v20[0] = v6;
  v20[1] = (unsigned __int16)v7;
  if ((sub_100262894((uint64_t)buf, (uint64_t)v20) & 0x80000000) != 0 || (unint64_t v8 = v5 - v7 + 1000 * (v4 - v6), HIDWORD(v8)))
  {
    uint64_t v9 = qword_100A1A048;
    if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = *(void *)(a1 + 296) + 1000 * *(void *)(a1 + 288);
      *(_DWORD *)std::string buf = 134218240;
      *(void *)&uint8_t buf[4] = v5 + 1000 * (int)v4;
      __int16 v22 = 2048;
      uint64_t v23 = v18;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "readControllerStats: currentTime %llu fSetRxThresholdVSCTime %llu", buf, 0x16u);
    }
    unint64_t v10 = 0;
    unint64_t v11 = 0;
  }
  else
  {
    unint64_t v10 = v8 / 0x3E8;
    unint64_t v11 = v8 % 0x3E8;
  }
  sub_1004FA1D8(a1);
  if (a2)
  {
    if (*(unsigned char *)(a1 + 320) && (*(void *)(a1 + 240) || *(void *)(a1 + 264)))
    {
      int v12 = qword_100A1A048;
      if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "readScanStatsWithThreshold", buf, 2u);
      }
      uint64_t v13 = sub_10003FB34();
      int v14 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v13 + 3576))(v13, 0, 1);
      if (v14)
      {
        unsigned int v15 = qword_100A1A048;
        if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_ERROR)) {
          sub_100773FD8(v14, v15);
        }
      }
    }
    else
    {
      unsigned int v16 = qword_100A1A048;
      if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 134217984;
        *(void *)&uint8_t buf[4] = v11 + 1000 * v10;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Host generates scanRxThresholdVSE with values %llu", buf, 0xCu);
      }
      uint64_t v17 = sub_1004AF8EC();
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3321888768;
      void v19[2] = sub_1004FE018;
      v19[3] = &unk_1009B2C20;
      v19[4] = a1;
      v19[5] = v10;
      v19[6] = v11;
      sub_100013018(v17, v19);
    }
  }
  else
  {
    sub_1004FD1B4(a1);
  }
}

uint64_t sub_1004FDA04(uint64_t a1, uint64_t *a2)
{
  v49[0] = 0;
  v49[1] = 0;
  sub_10003AED0((uint64_t)v49, a1 + 40);
  if (*(void *)(a1 + 240)) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = *(void *)(a1 + 264) != 0;
  }
  char v41 = v3;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    uint64_t v6 = (void *)(a1 + 232);
    do
    {
      long long v47 = 0u;
      v48[0] = 0;
      *(_OWORD *)long long __p = 0u;
      memset(v45, 0, sizeof(v45));
      v48[1] = 0;

      BYTE1(v45[0]) = 0;
      DWORD1(v45[0]) = 0;
      if (qword_1009F8168 != -1) {
        dispatch_once(&qword_1009F8168, &stru_1009B2EB0);
      }
      if (sub_100553210(qword_1009F8160, *(void *)v4))
      {
        sub_10003AE4C(*(void *)v4, (uint64_t)buf);
        if (SBYTE7(v47) < 0) {
          operator delete(__p[0]);
        }
        *(_OWORD *)long long __p = *(_OWORD *)buf;
        *(void *)&long long v47 = *(void *)&buf[16];
      }
      else
      {
        uint64_t v67 = 0;
        long long v65 = 0u;
        long long v66 = 0u;
        long long v63 = 0u;
        long long v64 = 0u;
        long long v61 = 0u;
        long long v62 = 0u;
        long long v59 = 0u;
        long long v60 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        *(_OWORD *)unsigned int v55 = 0u;
        long long v56 = 0u;
        long long v53 = 0u;
        long long v54 = 0u;
        memset(buf, 0, sizeof(buf));
        sub_1000419CC((uint64_t)buf);
        std::ostream::operator<<();
        std::stringbuf::str();
        if (SBYTE7(v47) < 0) {
          operator delete(__p[0]);
        }
        *(_OWORD *)long long __p = *(_OWORD *)v50;
        *(void *)&long long v47 = v51;
        *(void *)std::string buf = v44;
        *(void *)&buf[*(void *)(v44 - 24)] = v43;
        if (SHIBYTE(v56) < 0) {
          operator delete(v55[1]);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      std::string::append((std::string *)__p, "-scan");
      uint64_t v7 = qword_100A1A048;
      if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_INFO))
      {
        if ((SBYTE7(v47) & 0x80u) == 0) {
          unint64_t v8 = __p;
        }
        else {
          unint64_t v8 = (void **)__p[0];
        }
        int v9 = *(_DWORD *)(v4 + 8);
        int v10 = *(_DWORD *)(v4 + 12);
        int v11 = *(_DWORD *)(v4 + 16);
        *(_DWORD *)std::string buf = 136315906;
        *(void *)&uint8_t buf[4] = v8;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = v9;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = v10;
        *(_WORD *)&uint8_t buf[24] = 1024;
        *(_DWORD *)&buf[26] = v11;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "requestScanRxThreshold session=%s totalRx=%u btMCRx=%u timeout=%u", buf, 0x1Eu);
      }
      int v12 = (void *)*v6;
      if (!*v6) {
        goto LABEL_33;
      }
      unint64_t v13 = *(void *)v4;
      uint64_t v14 = a1 + 232;
      do
      {
        unint64_t v15 = v12[4];
        BOOL v16 = v15 >= v13;
        if (v15 >= v13) {
          uint64_t v17 = v12;
        }
        else {
          uint64_t v17 = v12 + 1;
        }
        if (v16) {
          uint64_t v14 = (uint64_t)v12;
        }
        int v12 = (void *)*v17;
      }
      while (*v17);
      if ((void *)v14 == v6 || v13 < *(void *)(v14 + 32)) {
LABEL_33:
      }
        uint64_t v14 = a1 + 232;
      unsigned int v18 = *(_DWORD *)(v4 + 8);
      unsigned int v19 = *(_DWORD *)(v4 + 12);
      int v20 = *(_DWORD *)(v4 + 16);
      if (!__PAIR64__(v19, v18) && !v20 && (void *)v14 != v6)
      {
        LOBYTE(v45[0]) = 0;
        memset((char *)v45 + 8, 0, 24);
        id v21 = v48[0];
        v48[0] = 0;

        id v22 = v48[1];
        v48[1] = 0;

        *(void *)((char *)&v45[1] + 4) = *(void *)(v14 + 60);
        LOWORD(v45[0]) = *(_WORD *)(v14 + 40);
        int v23 = *(_DWORD *)(v14 + 68);
        DWORD2(v47) = *(_DWORD *)(v14 + 96);
        *(_OWORD *)((char *)v45 + 4) = *(_OWORD *)(v14 + 44);
        HIDWORD(v45[1]) = v23;
        id v24 = *(void **)(v14 + 104);
        if (v24)
        {
          id v25 = objc_retainBlock(v24);
          id v26 = v48[0];
          v48[0] = v25;
        }
        id v27 = *(void **)(v14 + 112);
        if (v27)
        {
          id v28 = objc_retainBlock(v27);
          id v29 = v48[1];
          v48[1] = v28;
        }
        BYTE1(v45[0]) = 1;
        unsigned int v18 = *(_DWORD *)(v4 + 8);
        unsigned int v19 = *(_DWORD *)(v4 + 12);
        int v20 = *(_DWORD *)(v4 + 16);
      }
      *((void *)&v45[0] + 1) = __PAIR64__(v19, v18);
      DWORD2(v45[1]) = v20;
      id v30 = objc_retainBlock(*(id *)(v4 + 32));
      id v31 = v48[0];
      v48[0] = v30;

      DWORD2(v47) = *(_DWORD *)(v4 + 20);
      DWORD1(v45[0]) = *(_DWORD *)(v4 + 24);
      *(void *)std::string buf = v4;
      long long v32 = sub_1005000C0((uint64_t **)(a1 + 224), (unint64_t *)v4, (uint64_t)&unk_1007BE9D0, (void **)buf);
      long long v33 = v45[1];
      *(_OWORD *)(v32 + 5) = v45[0];
      *(_OWORD *)(v32 + 7) = v33;
      std::string::operator=((std::string *)v32 + 3, (const std::string *)__p);
      *((_DWORD *)v32 + 24) = DWORD2(v47);
      uint64_t v34 = (uint64_t *)objc_retainBlock(v48[0]);
      id v35 = v32[13];
      v32[13] = v34;

      int v36 = (uint64_t *)objc_retainBlock(v48[1]);
      __int16 v37 = v32[14];
      v32[14] = v36;

      if (BYTE1(v45[0]))
      {
        unsigned int v38 = qword_100A1A048;
        if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_INFO))
        {
          sub_1004FB574((uint64_t)v45);
          unsigned int v39 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
          *(_DWORD *)unsigned int v50 = 136315138;
          *(void *)&v50[4] = v39;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "Session %s cancelled", v50, 0xCu);
          if ((char)buf[23] < 0) {
            operator delete(*(void **)buf);
          }
        }
      }

      if (SBYTE7(v47) < 0) {
        operator delete(__p[0]);
      }
      v4 += 40;
    }
    while (v4 != v5);
  }
  sub_1004FD720(a1, v41);
  return sub_10003AFB4((uint64_t)v49);
}

void sub_1004FDFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t sub_1004FE018(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 48) + 1000 * *(_DWORD *)(a1 + 40);
  return sub_1004FE044(*(_DWORD **)(a1 + 32), v1, v1, v1, v1, v1);
}

uint64_t sub_1004FE044(_DWORD *a1, int a2, int a3, int a4, int a5, int a6)
{
  v14[0] = 0;
  v14[1] = 0;
  sub_10003AED0((uint64_t)v14, (uint64_t)(a1 + 10));
  int v12 = qword_100A1A048;
  if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67110144;
    int v16 = a2;
    __int16 v17 = 1024;
    int v18 = a3;
    __int16 v19 = 1024;
    int v20 = a4;
    __int16 v21 = 1024;
    int v22 = a5;
    __int16 v23 = 1024;
    int v24 = a6;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "scanRxThresholdVSE totalRx=%u totalBTMCRx=%u, totalConnRx=%u, totalConnBTMCRx=%u totalTime=%u", buf, 0x20u);
  }
  a1[86] = a2;
  a1[87] = a3;
  a1[88] = a6;
  a1[89] = a4;
  a1[90] = a5;
  a1[91] = a6;
  sub_1004FD1B4(a1);
  return sub_10003AFB4((uint64_t)v14);
}

void sub_1004FE170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__n128 sub_1004FE18C(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 4sub_1004C2140(qword_100A19B68, 0) = result;
  return result;
}

uint64_t sub_1004FE19C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = qword_100A1A048;
  if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "fSoftwareScanRxTimer Timer expired!", buf, 2u);
  }
  sub_1004FA1D8(v1);
  *(void *)std::string buf = 0;
  sub_100026C30((uint64_t)buf);
  uint64_t v3 = *(int *)buf;
  uint64_t v4 = *(__int16 *)&buf[4];
  uint64_t v5 = *(void *)(v1 + 288);
  uint64_t v6 = *(void *)(v1 + 296);
  *(_WORD *)&buf[6] = 0;
  v13[0] = v5;
  v13[1] = (unsigned __int16)v6;
  if ((sub_100262894((uint64_t)buf, (uint64_t)v13) & 0x80000000) != 0 || (unint64_t v7 = v4 - v6 + 1000 * (v3 - v5), HIDWORD(v7)))
  {
    unint64_t v8 = qword_100A1A048;
    if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = *(void *)(v1 + 296) + 1000 * *(void *)(v1 + 288);
      *(_DWORD *)std::string buf = 134218240;
      *(void *)&uint8_t buf[4] = v4 + 1000 * (int)v3;
      __int16 v15 = 2048;
      uint64_t v16 = v12;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "armSoftwareScanRxTimer: currentTime %llu fSetRxThresholdVSCTime %llu", buf, 0x16u);
    }
    LODWORD(v9) = 0;
    LODWORD(v1sub_1004C2140(qword_100A19B68, 0) = 0;
  }
  else
  {
    unint64_t v9 = v7 / 0x3E8;
    unint64_t v10 = v7 % 0x3E8;
  }
  return sub_1004FE044((_DWORD *)v1, (int)v10 + 1000 * (int)v9, (int)v10 + 1000 * (int)v9, (int)v10 + 1000 * (int)v9, (int)v10 + 1000 * (int)v9, (int)v10 + 1000 * (int)v9);
}

void sub_1004FE358(uint64_t a1, unint64_t a2, uint64_t a3)
{
  *(void *)&long long v14 = a2;
  *((void *)&v14 + 1) = a3;
  uint64_t v5 = qword_100A1A048;
  if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_DEFAULT))
  {
    sub_10001A260(a1 + 272);
    sub_10001A260((uint64_t)&v14);
    uint64_t v6 = &v12;
    if (v13 < 0) {
      uint64_t v6 = v12;
    }
    if (v11 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)std::string buf = 136315394;
    uint64_t v16 = v6;
    __int16 v17 = 2080;
    int v18 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "wifiStateChanged: from %s to %s", buf, 0x16u);
    if (v11 < 0) {
      operator delete(__p);
    }
    if (v13 < 0) {
      operator delete(v12);
    }
    LODWORD(v8) = DWORD1(v14);
  }
  else
  {
    unint64_t v8 = HIDWORD(a2);
  }
  unint64_t v9 = (unsigned __int8 *)(a1 + 272);
  if (*(_DWORD *)(a1 + 276) != v8
    || *v9 != v14
    || *(unsigned __int8 *)(a1 + 280) != BYTE8(v14))
  {
    *(_OWORD *)unint64_t v9 = v14;
    sub_1000100D8(a1);
  }
}

void sub_1004FE4CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004FE4F0(uint64_t a1, unint64_t a2, uint64_t a3)
{
}

void sub_1004FE4F8(os_unfair_lock_s *a1, int a2)
{
  uint64_t v4 = qword_100A1A048;
  if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "SDP in progress changed to %d", buf, 8u);
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1004FE5FC;
  void v5[3] = &unk_1009B2BA0;
  char v6 = a2;
  sub_1000144B0(a1 + 30, v5);
}

uint64_t sub_1004FE5FC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 32))(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_1004FE62C(uint64_t a1)
{
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_1009B2ED0);
  }
  uint64_t v2 = (os_unfair_lock_s *)off_1009F8150;
  int v3 = *(unsigned __int8 *)(a1 + 32);

  sub_1004FE4F8(v2, v3);
}

uint64_t sub_1004FE690(uint64_t a1, long long *a2, int a3, uint64_t a4)
{
  v44[0] = 0;
  v44[1] = 0;
  sub_10003AED0((uint64_t)v44, a1 + 40);
  if (!a3)
  {
    int v8 = (_OWORD *)(a1 + 380);
    if (*(unsigned char *)(a1 + 380)) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  if (!*(unsigned char *)a2 && *(unsigned char *)(a1 + 380))
  {
    *(CFAbsoluteTime *)(a1 + 496) = CFAbsoluteTimeGetCurrent();
    ++*(_DWORD *)(a1 + 504);
  }
  int v8 = (_OWORD *)(a1 + 380);
  if (!*(unsigned char *)(a1 + 380) && *(unsigned char *)a2)
  {
LABEL_9:
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B2DD0);
    }
    sub_1006CC818((uint64_t)off_1009F7ED8);
  }
LABEL_12:
  long long v9 = *a2;
  *(_OWORD *)((char *)v8 + 1sub_1004C2140(qword_100A19B68, 0) = *(long long *)((char *)a2 + 10);
  *int v8 = v9;
  *(unsigned char *)(a1 + 406) = a3;
  if (a1 + 408 != a4) {
    sub_1005003CC((uint64_t **)(a1 + 408), *(unsigned int **)a4, (unsigned int *)(a4 + 8));
  }
  uint64_t v43 = 0;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  *(_OWORD *)id v31 = 0u;
  long long v32 = 0u;
  memset(v30, 0, sizeof(v30));
  long long v29 = 0u;
  sub_10004C67C((uint64_t)&v29);
  uint64_t v10 = sub_10003AB28((uint64_t)v30);
  sub_10003AB28(v10);
  if (a3)
  {
    sub_10003AB28((uint64_t)v30);
    uint64_t v11 = sub_10003AB28((uint64_t)v30);
    uint64_t v12 = sub_10003AB28(v11);
    sub_10003AB28(v12);
    uint64_t v13 = std::ostream::operator<<();
    sub_10003AB28(v13);
    uint64_t v14 = std::ostream::operator<<();
    sub_10003AB28(v14);
    uint64_t v15 = std::ostream::operator<<();
    sub_10003AB28(v15);
    uint64_t v16 = std::ostream::operator<<();
    sub_10003AB28(v16);
    std::ostream::operator<<();
    sub_10003AB28((uint64_t)v30);
    __int16 v17 = *(void **)(a1 + 408);
    if (v17 != (void *)(a1 + 416))
    {
      do
      {
        int v18 = sub_10003C014(*((_DWORD *)v17 + 7));
        strlen(v18);
        uint64_t v19 = sub_10003AB28((uint64_t)v30);
        sub_10003AB28(v19);
        int v20 = (void *)v17[1];
        if (v20)
        {
          do
          {
            __int16 v21 = v20;
            int v20 = (void *)*v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            __int16 v21 = (void *)v17[2];
            BOOL v22 = *v21 == (void)v17;
            __int16 v17 = v21;
          }
          while (!v22);
        }
        __int16 v17 = v21;
      }
      while (v21 != (void *)(a1 + 416));
    }
  }
  __int16 v23 = qword_100A1A048;
  if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_DEFAULT))
  {
    std::stringbuf::str();
    int v24 = v28 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)std::string buf = 136315138;
    long long v46 = v24;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
    if (v28 < 0) {
      operator delete(__p);
    }
  }
  *(void *)((char *)&v30[-1]
  *(void *)&v30[0] = v25;
  if (SHIBYTE(v32) < 0) {
    operator delete(v31[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return sub_10003AFB4((uint64_t)v44);
}

void sub_1004FEB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100742518((uint64_t)va);
  sub_10003AFB4(v5 - 96);
  _Unwind_Resume(a1);
}

void sub_1004FED7C(uint64_t a1, long long *a2)
{
  long long v3 = a2[1];
  long long v24 = *a2;
  long long v25 = v3;
  char v4 = *((unsigned char *)a2 + 32);
  __int16 v22 = *(_WORD *)((char *)a2 + 33);
  char v23 = *((unsigned char *)a2 + 35);
  *(void *)std::string buf = 0;
  sub_100026C30((uint64_t)buf);
  uint64_t v5 = *(int *)buf;
  uint64_t v6 = *(__int16 *)&buf[4];
  uint64_t v7 = *(void *)(a1 + 288);
  uint64_t v8 = *(void *)(a1 + 296);
  *(_WORD *)&buf[6] = 0;
  v26[0] = v7;
  v26[1] = (unsigned __int16)v8;
  if ((sub_100262894((uint64_t)buf, (uint64_t)v26) & 0x80000000) != 0 || (unint64_t v9 = v6 - v8 + 1000 * (v5 - v7), HIDWORD(v9)))
  {
    uint64_t v10 = qword_100A1A048;
    if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = *(void *)(a1 + 296) + 1000 * *(void *)(a1 + 288);
      *(_DWORD *)std::string buf = 134218240;
      *(void *)&uint8_t buf[4] = v6 + 1000 * (int)v5;
      __int16 v28 = 2048;
      uint64_t v29 = v14;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "handleCriticalBLEStats: currentTime %llu fSetRxThresholdVSCTime %llu", buf, 0x16u);
    }
    unint64_t v11 = 0;
    unint64_t v12 = 0;
  }
  else
  {
    unint64_t v11 = v9 / 0x3E8;
    unint64_t v12 = v9 % 0x3E8;
  }
  uint64_t v13 = sub_100019878();
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3321888768;
  long long v16 = v24;
  long long v17 = v25;
  void v15[2] = sub_1004FEF6C;
  v15[3] = &unk_1009B2C70;
  char v18 = v4;
  __int16 v19 = v22;
  char v20 = v23;
  char v21 = v4;
  uint8_t v15[4] = a1;
  v15[5] = v11;
  v15[6] = v12;
  sub_100013018(v13, v15);
}

uint64_t sub_1004FEF6C(uint64_t a1)
{
  uint64_t v2 = *(_DWORD **)(a1 + 32);
  long long v3 = qword_100A1A048;
  if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(a1 + 56);
    int v5 = *(_DWORD *)(a1 + 60);
    int v6 = *(_DWORD *)(a1 + 64);
    int v7 = *(_DWORD *)(a1 + 68);
    int v8 = *(_DWORD *)(a1 + 72);
    int v9 = *(_DWORD *)(a1 + 76);
    int v10 = *(_DWORD *)(a1 + 80);
    int v11 = *(_DWORD *)(a1 + 84);
    int v12 = *(unsigned __int8 *)(a1 + 92);
    int v13 = *(_DWORD *)(a1 + 48) + 1000 * *(_DWORD *)(a1 + 40);
    v15[0] = 67111424;
    v15[1] = v4;
    __int16 v16 = 1024;
    int v17 = v5;
    __int16 v18 = 1024;
    int v19 = v6;
    __int16 v20 = 1024;
    int v21 = v7;
    __int16 v22 = 1024;
    int v23 = v8;
    __int16 v24 = 1024;
    int v25 = v9;
    __int16 v26 = 1024;
    int v27 = v10;
    __int16 v28 = 1024;
    int v29 = v11;
    __int16 v30 = 1024;
    int v31 = v12;
    __int16 v32 = 1024;
    int v33 = v13;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "handleCriticalBLEStats: scan time %u MC %u numADVs %u MC %u conn scan time %u MC %u numPassUpAdvs %u MC %u reportReason %u sinceLastVSC %u", (uint8_t *)v15, 0x3Eu);
  }
  return sub_1004FE044(v2, *(_DWORD *)(a1 + 56), *(_DWORD *)(a1 + 60), *(_DWORD *)(a1 + 72), *(_DWORD *)(a1 + 76), *(_DWORD *)(a1 + 48) + 1000 * *(_DWORD *)(a1 + 40));
}

uint64_t sub_1004FF0AC(uint64_t a1, int a2)
{
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 40);
  *(unsigned char *)(a1 + 488) = a2;
  int v4 = qword_100A1A048;
  if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = "no";
    if (a2) {
      int v5 = "yes";
    }
    *(_DWORD *)std::string buf = 136315138;
    int v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Game mode enabled: '%s'", buf, 0xCu);
  }
  return sub_10003AFB4((uint64_t)v7);
}

uint64_t sub_1004FF188(uint64_t a1, int a2)
{
  return sub_1004FF0AC(a1 - 24, a2);
}

uint64_t sub_1004FF190(uint64_t result, unsigned int a2)
{
  unsigned int v6 = a2;
  if (a2 != 0x20000)
  {
    uint64_t v2 = result;
    v5[0] = 0;
    v5[1] = 0;
    sub_10003AED0((uint64_t)v5, result + 40);
    if (*(unsigned char *)(v2 + 104) && !*(unsigned char *)(v2 + 488))
    {
      long long v3 = (uint64_t **)(v2 + 432);
      int v7 = &v6;
      int v4 = sub_100360348(v3, &v6, (uint64_t)&unk_1007BE9D0, &v7);
      ++*((_DWORD *)v4 + 8);
      int v7 = &v6;
      if (*((_DWORD *)sub_100360348(v3, &v6, (uint64_t)&unk_1007BE9D0, &v7) + 8) == 1) {
        [gCBDaemonServer recordEventWithStarting:1 useCase:v6];
      }
    }
    return sub_10003AFB4((uint64_t)v5);
  }
  return result;
}

void sub_1004FF264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004FF278(uint64_t result, unsigned int a2)
{
  unsigned int v6 = a2;
  if (a2 != 0x20000)
  {
    uint64_t v2 = result;
    v5[0] = 0;
    v5[1] = 0;
    sub_10003AED0((uint64_t)v5, result + 40);
    if (*(unsigned char *)(v2 + 104))
    {
      long long v3 = (uint64_t **)(v2 + 432);
      int v7 = &v6;
      if (*((_DWORD *)sub_100360348(v3, &v6, (uint64_t)&unk_1007BE9D0, &v7) + 8))
      {
        int v7 = &v6;
        int v4 = *((_DWORD *)sub_100360348(v3, &v6, (uint64_t)&unk_1007BE9D0, &v7) + 8);
        int v7 = &v6;
        *((_DWORD *)sub_100360348(v3, &v6, (uint64_t)&unk_1007BE9D0, &v7) + 8) = v4 - 1;
        int v7 = &v6;
        if (!*((_DWORD *)sub_100360348(v3, &v6, (uint64_t)&unk_1007BE9D0, &v7) + 8)) {
          [gCBDaemonServer recordEventWithStarting:0 useCase:v6];
        }
      }
    }
    return sub_10003AFB4((uint64_t)v5);
  }
  return result;
}

void sub_1004FF398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1004FF3AC(uint64_t a1, void *a2, unsigned int a3, int a4)
{
  id v8 = a2;
  unsigned int v14 = a3;
  v13[0] = 0;
  v13[1] = 0;
  sub_10003AED0((uint64_t)v13, a1 + 40);
  if (v8 && *(unsigned char *)(a1 + 104))
  {
    if (a4)
    {
      uint64_t v15 = &v14;
      if (!sub_1005005C0((uint64_t **)(a1 + 456), &v14, (uint64_t)&unk_1007BE9D0, &v15)[5] && !*(unsigned char *)(a1 + 488))
      {
        uint64_t v15 = &v14;
        int v9 = sub_1005005C0((uint64_t **)(a1 + 456), &v14, (uint64_t)&unk_1007BE9D0, &v15);
        objc_storeStrong((id *)v9 + 5, a2);
        int v10 = (void *)gCBDaemonServer;
        int v11 = [v8 UUIDString];
        [v10 recordEventWithDeviceIdentifier:v11 initiator:1 starting:1 useCase:v14];
LABEL_9:
      }
    }
    else
    {
      uint64_t v15 = &v14;
      if (sub_1005005C0((uint64_t **)(a1 + 456), &v14, (uint64_t)&unk_1007BE9D0, &v15)[5])
      {
        sub_100500684(a1 + 456, &v14);
        int v12 = (void *)gCBDaemonServer;
        int v11 = [v8 UUIDString];
        [v12 recordEventWithDeviceIdentifier:v11 initiator:1 starting:0 useCase:v14];
        goto LABEL_9;
      }
    }
  }
  sub_10003AFB4((uint64_t)v13);
}

void sub_1004FF534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1004FF564(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  if ((a3 + a2) < 4u) {
    int v8 = a8;
  }
  else {
    int v8 = 0;
  }
  if (*(unsigned __int8 *)(a1 + 217) != v8)
  {
    int v10 = qword_100A1A048;
    if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_INFO))
    {
      int v11 = "False";
      if (v8) {
        int v11 = "True";
      }
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v15 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Bluetooth Daemon: AoSStateChanged, isAoSAllowed: %s", buf, 0xCu);
    }
    *(unsigned char *)(a1 + 217) = v8;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_1004FF69C;
    v12[3] = &unk_1009B2BA0;
    char v13 = v8;
    sub_1000144B0((os_unfair_lock_s *)(a1 + 120), v12);
  }
}

uint64_t sub_1004FF69C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 40))(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_1004FF6CC(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
}

void sub_1004FF724(id a1)
{
}

void sub_1004FF768()
{
}

void sub_1004FF78C(id a1)
{
}

void sub_1004FF7D0()
{
}

void sub_1004FF7F4(id a1)
{
}

void sub_1004FF838()
{
}

void sub_1004FF85C(id a1)
{
}

void sub_1004FF8A0()
{
}

char *sub_1004FF8C4(uint64_t a1, char *__src, char *a3)
{
  long long v3 = a3;
  int v4 = __src;
  unsigned int v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    char v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      int v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      int v19 = 0;
    }
    __int16 v20 = &v19[8 * v16];
    long long __p = v19;
    int v27 = v20;
    __int16 v28 = v20;
    int v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        int v23 = (char *)sub_1000405F8(v8, v22);
        __int16 v20 = &v23[8 * (v22 >> 2)];
        long long __p = v23;
        int v27 = v20;
        int v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        int v27 = v20;
      }
    }
    *(void *)__int16 v20 = *(void *)v3;
    __int16 v28 = v20 + 8;
    int v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)unint64_t __src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    int v9 = __src + 8;
    int v10 = v6 - 8;
    int v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)int v4 = *(void *)v3;
  }
  return v4;
}

void sub_1004FFACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004FFB04(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1004FFB04(a1, *a2);
    sub_1004FFB04(a1, a2[1]);
    sub_1004FFB60((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_1004FFB60(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 40);
    operator delete(v2);
  }
}

void sub_1004FFBB8(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1004FFBB8(a1, *a2);
    sub_1004FFBB8(a1, a2[1]);
    sub_1004FFC14((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_1004FFC14(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void sub_1004FFC7C(id a1)
{
}

void sub_1004FFCC0()
{
}

void sub_1004FFCE4(id a1)
{
}

void sub_1004FFD28()
{
}

uint64_t sub_1004FFD4C(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  int v4 = (uint64_t *)(a1 + 8);
  do
  {
    unint64_t v5 = v2[4];
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      unint64_t v7 = v2;
    }
    else {
      unint64_t v7 = v2 + 1;
    }
    if (v6) {
      int v4 = v2;
    }
    uint64_t v2 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4]) {
    return 0;
  }
  sub_10004D3B8((uint64_t **)a1, v4);
  sub_1004FFB60((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

uint64_t sub_1004FFDD4(uint64_t **a1, const void **a2)
{
  unint64_t v3 = (uint64_t *)sub_10003156C((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  int v4 = v3;
  sub_10004D3B8(a1, v3);
  sub_1004FFC14((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

void sub_1004FFE30(id a1)
{
}

void sub_1004FFE74()
{
}

uint64_t *sub_1004FFE98(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v11 = 0;
  BOOL v6 = (uint64_t **)sub_1000314CC((uint64_t)a1, &v11, a2);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    memset(v10, 0, sizeof(v10));
    sub_1004FFF50((uint64_t)a1, a4, v10);
    sub_100036CA0(a1, v11, v8, v10[0]);
    unint64_t v7 = v10[0];
    v10[0] = 0;
    sub_100500000((uint64_t)v10, 0);
  }
  return v7;
}

double sub_1004FFF50@<D0>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  BOOL v6 = (char *)operator new(0x88uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  unint64_t v7 = v6 + 32;
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    sub_10003B098(v7, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)unint64_t v7 = v9;
  }
  double result = 0.0;
  *(_OWORD *)(v6 + 12sub_1004C2140(qword_100A19B68, 0) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_1004FFFE8(_Unwind_Exception *a1)
{
  sub_100500000(v1, 0);
  _Unwind_Resume(a1);
}

void sub_100500000(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1004FFC14((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_100500058(id a1)
{
}

void sub_10050009C()
{
}

uint64_t **sub_1005000C0(uint64_t **a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = a1 + 1;
  BOOL v6 = a1[1];
  uint64_t v8 = a1 + 1;
  long long v9 = a1 + 1;
  if (v6)
  {
    unint64_t v10 = *a2;
    while (1)
    {
      while (1)
      {
        long long v9 = (uint64_t **)v6;
        unint64_t v11 = v6[4];
        if (v10 >= v11) {
          break;
        }
        BOOL v6 = *v9;
        uint64_t v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v11 >= v10) {
        break;
      }
      BOOL v6 = v9[1];
      if (!v6)
      {
        uint64_t v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    uint64_t v15 = 0;
    uint64_t v12 = (char *)operator new(0x78uLL);
    v14[1] = v7;
    *((void *)v12 + 4) = **a4;
    *(_OWORD *)(v12 + 104) = 0u;
    *(_OWORD *)(v12 + 88) = 0u;
    *(_OWORD *)(v12 + 72) = 0u;
    *(_OWORD *)(v12 + 56) = 0u;
    *(_OWORD *)(v12 + 4sub_1004C2140(qword_100A19B68, 0) = 0u;
    LOBYTE(v15) = 1;
    sub_100036CA0(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0;
    sub_1005001C0((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

void sub_1005001C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1004FFB60((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_100500218(id a1)
{
}

void sub_1005003A8()
{
}

uint64_t **sub_1005003CC(uint64_t **result, unsigned int *a2, unsigned int *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    BOOL v6 = *result;
    unint64_t v7 = result[1];
    *double result = (uint64_t *)(result + 1);
    void v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    unint64_t v14 = result;
    uint64_t v15 = v8;
    uint64_t v16 = v8;
    if (v8)
    {
      uint64_t v15 = sub_1002D8040((uint64_t)v8);
      if (a2 != a3)
      {
        long long v9 = a2;
        do
        {
          *((_DWORD *)v8 + 7) = v9[7];
          sub_10048EAE0(v5, (uint64_t)v8);
          uint64_t v8 = v15;
          uint64_t v16 = v15;
          if (v15) {
            uint64_t v15 = sub_1002D8040((uint64_t)v15);
          }
          unint64_t v10 = (unsigned int *)*((void *)v9 + 1);
          if (v10)
          {
            do
            {
              a2 = v10;
              unint64_t v10 = *(unsigned int **)v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (unsigned int *)*((void *)v9 + 2);
              BOOL v11 = *(void *)a2 == (void)v9;
              long long v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          long long v9 = a2;
        }
        while (a2 != a3);
      }
    }
    double result = (uint64_t **)sub_1002D8094((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      double result = (uint64_t **)sub_100500530(v5, a2 + 7);
      uint64_t v12 = (unsigned int *)*((void *)a2 + 1);
      if (v12)
      {
        do
        {
          char v13 = v12;
          uint64_t v12 = *(unsigned int **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          char v13 = (unsigned int *)*((void *)a2 + 2);
          BOOL v11 = *(void *)v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_10050051C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002D8094((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100500530(uint64_t **a1, unsigned int *a2)
{
  int v4 = (uint64_t *)operator new(0x20uLL);
  unsigned int v5 = *a2;
  *((_DWORD *)v4 + 7) = *a2;
  BOOL v6 = a1 + 1;
  unint64_t v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        BOOL v6 = (uint64_t **)v7;
        if (v5 >= *((_DWORD *)v7 + 7)) {
          break;
        }
        unint64_t v7 = (uint64_t *)*v7;
        uint64_t v8 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      unint64_t v7 = (uint64_t *)v7[1];
    }
    while (v7);
    uint64_t v8 = v6 + 1;
  }
  else
  {
    uint64_t v8 = a1 + 1;
  }
LABEL_8:
  sub_100036CA0(a1, (uint64_t)v6, v8, v4);
  return v4;
}

uint64_t **sub_1005005C0(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = a1 + 1;
  BOOL v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        long long v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        BOOL v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      BOOL v6 = v9[1];
      if (!v6)
      {
        unint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    long long v9 = a1 + 1;
LABEL_10:
    BOOL v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((void *)v11 + 5) = 0;
    sub_100036CA0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t sub_100500684(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unsigned int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    unsigned int v5 = *(_DWORD *)(v2 + 32);
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      unint64_t v7 = (uint64_t *)v2;
    }
    else {
      unint64_t v7 = (uint64_t *)(v2 + 8);
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32)) {
    return 0;
  }
  sub_1005006EC((uint64_t **)a1, v4);
  return 1;
}

uint64_t *sub_1005006EC(uint64_t **a1, uint64_t a2)
{
  unsigned int v3 = sub_10004D3B8(a1, (uint64_t *)a2);

  operator delete((void *)a2);
  return v3;
}

uint64_t sub_100500728(uint64_t a1)
{
  *(void *)a1 = off_1009B2F18;
  *(unsigned char *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 12) = 0;
  sub_100052DA8(a1 + 16);
  *(void *)(a1 + 8sub_1004C2140(qword_100A19B68, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_100052DA8(a1 + 104);
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  sub_100052DA8(a1 + 192);
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 28sub_1004C2140(qword_100A19B68, 0) = a1 + 288;
  *(unsigned char *)(a1 + 304) = 0;
  return a1;
}

void sub_1005007D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v15 = v13;
  uint64_t v16 = v12;
  a10 = v15;
  sub_100502BDC(&a10);
  sub_100052DA4(v16);
  unint64_t v18 = *v14;
  if (*v14)
  {
    *(void *)(v10 + 88) = v18;
    operator delete(v18);
  }
  sub_100052DA4(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_100500824(uint64_t a1)
{
  *(void *)a1 = off_1009B2F18;
  uint64_t v2 = (void **)(a1 + 168);
  sub_100502C30(a1 + 168, *(void *)(a1 + 168));
  sub_1000486F0(a1 + 280, *(void **)(a1 + 288));
  unsigned int v3 = *(void **)(a1 + 256);
  if (v3)
  {
    *(void *)(a1 + 264) = v3;
    operator delete(v3);
  }
  sub_100052DA4(a1 + 192);
  BOOL v6 = v2;
  sub_100502BDC(&v6);
  sub_100052DA4(a1 + 104);
  uint64_t v4 = *(void **)(a1 + 80);
  if (v4)
  {
    *(void *)(a1 + 88) = v4;
    operator delete(v4);
  }
  sub_100052DA4(a1 + 16);
  return a1;
}

void sub_1005008D0(uint64_t a1)
{
  sub_100500824(a1);

  operator delete();
}

uint64_t sub_100500908(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  v15[0] = 0;
  v15[1] = 0;
  sub_10003AED0((uint64_t)v15, (uint64_t)(a1 + 2));
  uint64_t v8 = *a3;
  uint64_t v9 = a3[1];
  uint64_t v11 = (void *)a1[10];
  unint64_t v10 = a1[11];
  uint64_t v20 = *a3;
  uint64_t v21 = v9;
  if (v11 != (void *)v10)
  {
    while (*v11 != a2 || v20 != v11[1] || v21 != v11[2])
    {
      v11 += 5;
      if (v11 == (void *)v10) {
        goto LABEL_10;
      }
    }
  }
  if (v11 == (void *)v10)
  {
LABEL_10:
    uint64_t v16 = a2;
    *(void *)&long long v17 = v8;
    *((void *)&v17 + 1) = v9;
    int v18 = -1;
    uint64_t v19 = a4;
    if (v10 >= a1[12])
    {
      uint64_t v13 = sub_100502CA4(a1 + 10, (uint64_t)&v16);
    }
    else
    {
      *(void *)unint64_t v10 = a2;
      *(_OWORD *)(v10 + 8) = v17;
      *(_DWORD *)(v10 + 24) = -1;
      *(void *)(v10 + 32) = a4;
      uint64_t v13 = v10 + 40;
    }
    a1[11] = v13;
  }
  sub_10003AFB4((uint64_t)v15);
  return 0;
}

void sub_1005009FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100500A10(uint64_t a1, uint64_t a2, _DWORD *a3, int a4)
{
  int v6 = *(_DWORD *)(a1 + 12);
  if (v6 != 2048)
  {
    if (v6 == -1)
    {
      sub_100475F84(a2, (uint64_t)&v42);
      if (SHIBYTE(v44) < 0)
      {
        uint64_t v24 = v43;
        operator delete(v42);
        if (v24) {
          return 1;
        }
      }
      else if (HIBYTE(v44))
      {
        return 1;
      }
      *a3 |= 4u;
      return 1;
    }
    return 0;
  }
  if (!sub_10047B300(a2))
  {
    if ((sub_1005013DC(a1, a2) & 1) == 0 && !*(unsigned char *)(a2 + 785)) {
      return 0;
    }
    int v19 = sub_1005013DC(a1, a2);
    uint64_t v20 = qword_100A19E68;
    BOOL v21 = os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT);
    if (v19)
    {
      if (v21)
      {
        sub_100474E18(a2, &v42);
        if (v44 >= 0) {
          unint64_t v22 = &v42;
        }
        else {
          unint64_t v22 = v42;
        }
        *(_DWORD *)long long __p = 136446210;
        *(void *)&__p[4] = v22;
        int v23 = "EIR matched for device %{public}s, requesting SDP";
        goto LABEL_52;
      }
    }
    else if (v21)
    {
      sub_100474E18(a2, &v42);
      if (v44 >= 0) {
        int v27 = &v42;
      }
      else {
        int v27 = v42;
      }
      *(_DWORD *)long long __p = 136446210;
      *(void *)&__p[4] = v27;
      int v23 = "EIR previously matched for device %{public}s, requesting SDP for deadvertised service(s)";
LABEL_52:
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, v23, __p, 0xCu);
      if (SHIBYTE(v44) < 0) {
        operator delete(v42);
      }
    }
    uint64_t v7 = 0;
    *a3 |= 0x10u;
    return v7;
  }
  long long v41 = xmmword_1007BECB0;
  unsigned __int8 v40 = 0;
  long long v42 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  if (sub_10047AE08(a2, (uint64_t)&v41, 0xF000u, &v42) && v43 - (unsigned char *)v42 == 16)
  {
    int v10 = *(unsigned __int8 *)v42;
    int v11 = *((unsigned __int16 *)v42 + 1);
    uint64_t v12 = qword_100A19E68;
    if (v10 == 1 && v11 == 1)
    {
      int v30 = *((unsigned __int16 *)v42 + 4);
      if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_INFO))
      {
        sub_100474E18(a2, __p);
        int v31 = v46 >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)std::string buf = 136446210;
        unsigned int v48 = v31;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Device %{public}s supports SDP dirty byte caching", buf, 0xCu);
        if (v46 < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (sub_10048A340(a2, &v40))
      {
        __int16 v32 = qword_100A19E68;
        if (v30 != v40)
        {
          if (a4)
          {
            if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT))
            {
              sub_100474E18(a2, __p);
              long long v38 = v46 >= 0 ? __p : *(unsigned char **)__p;
              *(_DWORD *)std::string buf = 136446210;
              unsigned int v48 = v38;
              _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "EIR is newer than SDP for device %{public}s, re-requesting SDP", buf, 0xCu);
              if (v46 < 0) {
                operator delete(*(void **)__p);
              }
            }
            goto LABEL_30;
          }
          if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_INFO))
          {
            sub_100474E18(a2, __p);
            long long v39 = v46 >= 0 ? __p : *(unsigned char **)__p;
            *(_DWORD *)std::string buf = 136446210;
            unsigned int v48 = v39;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "SDP is newer than EIR for device %{public}s, clearing EIR", buf, 0xCu);
            if (v46 < 0) {
              operator delete(*(void **)__p);
            }
          }
          sub_100489888(a2);
          goto LABEL_62;
        }
        if (!os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_INFO)) {
          goto LABEL_62;
        }
        sub_100474E18(a2, __p);
        if (v46 >= 0) {
          int v33 = __p;
        }
        else {
          int v33 = *(unsigned char **)__p;
        }
        *(_DWORD *)std::string buf = 136446210;
        unsigned int v48 = v33;
        long long v34 = "Both EIR and SDP are up-to-date for device %{public}s";
        long long v35 = v32;
      }
      else
      {
        uint64_t v36 = qword_100A19E68;
        if (!os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_INFO)) {
          goto LABEL_62;
        }
        sub_100474E18(a2, __p);
        if (v46 >= 0) {
          long long v37 = __p;
        }
        else {
          long long v37 = *(unsigned char **)__p;
        }
        *(_DWORD *)std::string buf = 136446210;
        unsigned int v48 = v37;
        long long v34 = "We have SDP but not EIR for device %{public}s";
        long long v35 = v36;
      }
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, v34, buf, 0xCu);
      if ((v46 & 0x80000000) == 0) {
        goto LABEL_62;
      }
      goto LABEL_61;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_ERROR)) {
      sub_100774050(v10, v11, v12);
    }
  }
  unint64_t v14 = qword_100A19E68;
  if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_INFO))
  {
    sub_100474E18(a2, __p);
    uint64_t v15 = v46 >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)std::string buf = 136446210;
    unsigned int v48 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Device %{public}s does not support SDP dirty byte caching", buf, 0xCu);
    if (v46 < 0) {
      operator delete(*(void **)__p);
    }
  }
  int v16 = sub_10048A340(a2, &v40);
  long long v17 = qword_100A19E68;
  if (v16)
  {
    if (a4)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(a2, __p);
        int v18 = v46 >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)std::string buf = 136446210;
        unsigned int v48 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "EIR is newer than SDP for device %{public}s, re-requesting SDP", buf, 0xCu);
        if (v46 < 0) {
          operator delete(*(void **)__p);
        }
      }
LABEL_30:
      sub_100474B30(a2);
      uint64_t v7 = 0;
      *a3 |= 0x10u;
      goto LABEL_63;
    }
    if (!os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_INFO)) {
      goto LABEL_62;
    }
    sub_100474E18(a2, __p);
    if (v46 >= 0) {
      __int16 v28 = __p;
    }
    else {
      __int16 v28 = *(unsigned char **)__p;
    }
    *(_DWORD *)std::string buf = 136446210;
    unsigned int v48 = v28;
    __int16 v26 = "Both EIR and SDP are up-to-date for device %{public}s";
  }
  else
  {
    if (!os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_INFO)) {
      goto LABEL_62;
    }
    sub_100474E18(a2, __p);
    if (v46 >= 0) {
      int v25 = __p;
    }
    else {
      int v25 = *(unsigned char **)__p;
    }
    *(_DWORD *)std::string buf = 136446210;
    unsigned int v48 = v25;
    __int16 v26 = "We have SDP but not EIR for device %{public}s";
  }
  _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, v26, buf, 0xCu);
  if (v46 < 0) {
LABEL_61:
  }
    operator delete(*(void **)__p);
LABEL_62:
  uint64_t v7 = sub_10050114C(a1, a2);
LABEL_63:
  if (v42)
  {
    uint64_t v43 = v42;
    operator delete(v42);
  }
  return v7;
}

void sub_100501100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10050114C(uint64_t a1, uint64_t a2)
{
  v20[0] = 0;
  v20[1] = 0;
  sub_10003AED0((uint64_t)v20, a1 + 104);
  uint64_t v4 = *(void *)(a1 + 168);
  uint64_t v5 = *(void *)(a1 + 176);
  if (v4 == v5)
  {
LABEL_8:
    if (*(unsigned char *)(a2 + 785))
    {
      int v10 = qword_100A19E68;
      if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(a2, &__p);
        if (v19 >= 0) {
          p_p = (const char *)&__p;
        }
        else {
          p_p = (const char *)__p;
        }
        *(_DWORD *)std::string buf = 136446210;
        unint64_t v22 = p_p;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "SDP previously matched for device %{public}s, but no longer does", buf, 0xCu);
        if (v19 < 0) {
          operator delete(__p);
        }
      }
      *(unsigned char *)(a2 + 785) = 0;
      uint64_t v12 = 1;
      goto LABEL_26;
    }
    uint64_t v12 = 0;
  }
  else
  {
    while (1)
    {
      long long __p = &off_100998428;
      int v6 = *(atomic_uint **)(v4 + 8);
      int v18 = v6;
      if (v6) {
        sub_100037354((uint64_t)v6);
      }
      uint64_t v7 = (void *)sub_10004A6E4((uint64_t)&__p);
      size_t v8 = sub_100045F00((uint64_t)&__p);
      char v9 = sub_10048B98C(a2, v7, v8);
      long long __p = &off_100998428;
      if (v18) {
        sub_1000368F4(v18);
      }
      if (v9) {
        break;
      }
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_8;
      }
    }
    uint64_t v12 = 1;
    *(unsigned char *)(a2 + 785) = 1;
  }
  uint64_t v13 = qword_100A19E68;
  if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a2, &__p);
    unint64_t v14 = "did not match";
    if (v12) {
      unint64_t v14 = "matched";
    }
    if (v19 >= 0) {
      uint64_t v15 = &__p;
    }
    else {
      uint64_t v15 = __p;
    }
    *(_DWORD *)std::string buf = 136446466;
    unint64_t v22 = v14;
    __int16 v23 = 2082;
    uint64_t v24 = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "SDP %{public}s for device %{public}s", buf, 0x16u);
    if (v19 < 0) {
      operator delete(__p);
    }
  }
LABEL_26:
  sub_10003AFB4((uint64_t)v20);
  return v12;
}

void sub_1005013A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005013DC(uint64_t a1, uint64_t a2)
{
  v15[0] = 0;
  v15[1] = 0;
  sub_10003AED0((uint64_t)v15, a1 + 104);
  uint64_t v4 = *(void *)(a1 + 168);
  uint64_t v5 = *(void *)(a1 + 176);
  if (v4 == v5)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v6 = v4 + 16;
    do
    {
      uint64_t v13 = &off_100998428;
      uint64_t v7 = *(atomic_uint **)(v6 - 8);
      unint64_t v14 = v7;
      if (v7) {
        sub_100037354((uint64_t)v7);
      }
      size_t v8 = (char *)sub_10004A6E4((uint64_t)&v13);
      uint64_t v9 = sub_100045F00((uint64_t)&v13);
      uint64_t v10 = sub_10048A590(a2, v8, v9);
      uint64_t v13 = &off_100998428;
      if (v14) {
        sub_1000368F4(v14);
      }
      if (v6 == v5) {
        char v11 = 1;
      }
      else {
        char v11 = v10;
      }
      v6 += 16;
    }
    while ((v11 & 1) == 0);
  }
  sub_10003AFB4((uint64_t)v15);
  return v10;
}

void sub_1005014C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1005014F4(uint64_t a1)
{
  uint64_t v2 = qword_100A19E68;
  if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Enabling Reporting Duplicates.", v3, 2u);
  }
  *(unsigned char *)(a1 + 304) = 1;
}

void sub_100501568(uint64_t a1)
{
  uint64_t v2 = qword_100A19E68;
  if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Disabling Reporting Duplicates.", v3, 2u);
  }
  *(unsigned char *)(a1 + 304) = 0;
}

uint64_t sub_1005015D8(uint64_t *a1, const void *a2, size_t a3)
{
  uint64_t v3 = 3;
  if (a2 && a3 - 2049 >= 0xFFFFFFFFFFFFF800)
  {
    v19[0] = 0;
    v19[1] = 0;
    sub_10003AED0((uint64_t)v19, (uint64_t)(a1 + 13));
    if ((unint64_t)(a1[22] - a1[21]) < 0x1F1)
    {
      long long v17 = 0;
      int v18 = 0;
      sub_1000335D8(&v17, a2, a3);
      unint64_t v8 = a1[21];
      uint64_t v9 = a1[22];
      if (v8 == v9)
      {
LABEL_15:
        if (v8 >= a1[23])
        {
          uint64_t v11 = sub_100502F78(a1 + 21, (uint64_t)&v17);
        }
        else
        {
          sub_100502F1C((uint64_t)(a1 + 21), (uint64_t)&v17);
          uint64_t v11 = v8 + 16;
        }
        a1[22] = v11;
      }
      else
      {
        while (1)
        {
          uint64_t v15 = &off_100998428;
          uint64_t v10 = *(atomic_uint **)(v8 + 8);
          int v16 = v10;
          if (v10) {
            sub_100037354((uint64_t)v10);
          }
          if (sub_100653904((uint64_t)&v15, (uint64_t)&v17)) {
            break;
          }
          uint64_t v15 = &off_100998428;
          if (v16) {
            sub_1000368F4(v16);
          }
          v8 += 16;
          if (v8 == v9)
          {
            unint64_t v8 = a1[22];
            goto LABEL_15;
          }
        }
        uint64_t v12 = qword_100A19E68;
        if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)unint64_t v14 = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Key already exists", v14, 2u);
        }
        uint64_t v15 = &off_100998428;
        if (v16) {
          sub_1000368F4(v16);
        }
      }
      long long v17 = &off_100998428;
      if (v18) {
        sub_1000368F4(v18);
      }
      uint64_t v3 = 0;
    }
    else
    {
      uint64_t v7 = qword_100A19E68;
      if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_ERROR)) {
        sub_1007740D8(v7);
      }
      uint64_t v3 = 4;
    }
    sub_10003AFB4((uint64_t)v19);
  }
  return v3;
}

void sub_1005017C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, atomic_uint *a7, ...)
{
  va_start(va, a7);
  if (a7) {
    sub_1000368F4(a7);
  }
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10050182C(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t result = 3;
  if (a2 && a3 - 2049 >= 0xFFFFFFFFFFFFF800)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    sub_1000335D8(&v7, a2, a3);
    v6[0] = 0;
    v6[1] = 0;
    sub_10003AED0((uint64_t)v6, a1 + 104);
    uint64_t v5 = sub_1005019B4(*(void *)(a1 + 168), *(void *)(a1 + 176), (uint64_t)&v7);
    sub_100501928(a1 + 168, v5, *(void *)(a1 + 176));
    sub_10003AFB4((uint64_t)v6);
    uint64_t v7 = &off_100998428;
    if (v8) {
      sub_1000368F4(v8);
    }
    return 0;
  }
  return result;
}

void sub_1005018DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t (**a11)(), atomic_uint *a12)
{
  a11 = &off_100998428;
  if (a12) {
    sub_1000368F4(a12);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100501928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = a2;
    if (a3 != v5)
    {
      uint64_t v7 = 16 * ((a3 - a2) >> 4);
      uint64_t v6 = a2;
      do
      {
        sub_100049EE0(v6, v6 + v7);
        v6 += 16;
      }
      while (v6 + v7 != v5);
    }
    sub_100502C30(a1, v6);
  }
  return a2;
}

uint64_t sub_1005019B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 == a2)
  {
LABEL_5:
    uint64_t v5 = a2;
  }
  else
  {
    uint64_t v5 = a1;
    while (!sub_100653904(v5, a3))
    {
      v5 += 16;
      if (v5 == a2) {
        goto LABEL_5;
      }
    }
  }
  if (v5 != a2)
  {
    for (uint64_t i = v5 + 16; i != a2; i += 16)
    {
      if (!sub_100653904(i, a3))
      {
        sub_100049EE0(v5, i);
        v5 += 16;
      }
    }
  }
  return v5;
}

uint64_t sub_100501A4C(uint64_t a1)
{
  *(unsigned char *)(a1 + 8) = 0;
  sub_100501A9C(a1, 0, 0);

  return sub_100501DEC((uint64_t **)a1, 0x4E20u);
}

uint64_t sub_100501A9C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (a2 > 3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = off_1009B3030[a2];
  }
  uint64_t v7 = qword_100A19E68;
  if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 136446210;
    *(void *)((char *)&buf + 4) = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Sending '%{public}s' event", (uint8_t *)&buf, 0xCu);
  }
  v17[0] = 0;
  v17[1] = 0;
  sub_10003AED0((uint64_t)v17, a1 + 16);
  uint64_t v8 = *(void *)(a1 + 80);
  uint64_t v9 = *(void *)(a1 + 88);
  if (v8 != v9)
  {
    long long buf = 0uLL;
    uint64_t v19 = 0;
    sub_1005032A4((char *)&buf, v8, v9, 0xCCCCCCCCCCCCCCCDLL * ((v9 - v8) >> 3));
    sub_10003AFE8((uint64_t)v17);
    uint64_t v10 = (unint64_t *)buf;
    if ((void)buf != *((void *)&buf + 1))
    {
      do
      {
        if (v10[1])
        {
          if (a3)
          {
            if (qword_1009F7F00 != -1) {
              dispatch_once(&qword_1009F7F00, &stru_1009B2FF0);
            }
            unint64_t v11 = sub_1004A93A0((uint64_t)off_1009F7EF8, *v10, a3);
          }
          else
          {
            unint64_t v11 = 4294901761;
          }
          if (qword_1009F8168 != -1) {
            dispatch_once(&qword_1009F8168, &stru_1009B2FD0);
          }
          if (sub_1000181D0(qword_1009F8160, *v10) && v11)
          {
            if (qword_1009FB160 != -1) {
              dispatch_once(&qword_1009FB160, &stru_1009B3010);
            }
            operator new();
          }
          if (a2 != 1)
          {
            uint64_t v12 = qword_100A19E68;
            if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_ERROR)) {
              sub_10077411C(&v15, v16, v12);
            }
          }
          sub_10003AF00((uint64_t)v17);
          uint64_t v13 = sub_1005033D8(*(void *)(a1 + 80), *(void *)(a1 + 88), *v10);
          sub_100502E88(a1 + 80, v13, *(void *)(a1 + 88));
          sub_10003AFE8((uint64_t)v17);
        }
        v10 += 5;
      }
      while (v10 != *((unint64_t **)&buf + 1));
      uint64_t v10 = (unint64_t *)buf;
    }
    if (v10)
    {
      *((void *)&buf + 1) = v10;
      operator delete(v10);
    }
  }
  return sub_10003AFB4((uint64_t)v17);
}

void sub_100501DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100501DEC(uint64_t **a1, unsigned int a2)
{
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, (uint64_t)(a1 + 24));
  uint64_t v4 = a1[32];
  if (v4 != a1[33])
  {
    do
    {
      uint64_t v8 = 0;
      uint64_t v8 = *v4;
      long long v7 = 0uLL;
      sub_100476008(v8, &v7);
      *(void *)&long long v7 = v7 + (*((void *)&v7 + 1) + (unint64_t)a2) / 0x3E8;
      *((void *)&v7 + 1) = (*((void *)&v7 + 1) + (unint64_t)a2) % 0x3E8;
      LODWORD(v1sub_1004C2140(qword_100A19B68, 0) = v7;
      HIDWORD(v1sub_1004C2140(qword_100A19B68, 0) = WORD4(v7);
      if (sub_100262A50((uint64_t)&v10)
        && (uint64_t v10 = &v8, *((int *)sub_1005031E0(a1 + 35, (unint64_t *)&v8, (uint64_t)&unk_1007BE9D0, &v10) + 10) >= 1))
      {
        sub_10003AFE8((uint64_t)v9);
        ((void (*)(uint64_t **, uint64_t))(*a1)[6])(a1, v8);
        sub_10003AF00((uint64_t)v9);
        uint64_t v4 = a1[32];
      }
      else
      {
        uint64_t v10 = &v8;
        uint64_t v5 = sub_1005031E0(a1 + 35, (unint64_t *)&v8, (uint64_t)&unk_1007BE9D0, &v10);
        ++*((_DWORD *)v5 + 10);
        ++v4;
      }
    }
    while (v4 != a1[33]);
    sub_10003AFE8((uint64_t)v9);
  }
  return sub_10003AFB4((uint64_t)v9);
}

void sub_100501F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100501F94(uint64_t a1)
{
  return sub_100501A9C(a1, 1u, 0);
}

uint64_t sub_100501FA4(uint64_t a1, void *a2)
{
  v24[1] = 0;
  int v25 = a2;
  v24[0] = 0;
  sub_10003AED0((uint64_t)v24, a1 + 192);
  __p[0] = &v25;
  *((_DWORD *)sub_1005031E0((uint64_t **)(a1 + 280), (unint64_t *)&v25, (uint64_t)&unk_1007BE9D0, (void **)__p)
  + 1sub_1004C2140(qword_100A19B68, 0) = 0;
  uint64_t v3 = (char **)(a1 + 256);
  if (sub_1004A8390(a1 + 256, (uint64_t)v25))
  {
    if (*(unsigned char *)(a1 + 304))
    {
      uint64_t v4 = v25;
      sub_1004762BC(v25);
      sub_100502200(a1, 0, (uint64_t)v4);
      uint64_t v5 = qword_100A19E68;
      if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18((uint64_t)v25, __p);
        if (v23 >= 0) {
          uint64_t v6 = __p;
        }
        else {
          uint64_t v6 = (void **)__p[0];
        }
        *(_DWORD *)long long buf = 136446210;
        int v27 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Reporting discovery of previously reported device %{public}s.", buf, 0xCu);
        if (v23 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  else
  {
    uint64_t v8 = *(void **)(a1 + 264);
    unint64_t v7 = *(void *)(a1 + 272);
    if ((unint64_t)v8 >= v7)
    {
      uint64_t v10 = ((char *)v8 - *v3) >> 3;
      if ((unint64_t)(v10 + 1) >> 61) {
        abort();
      }
      uint64_t v11 = v7 - (void)*v3;
      uint64_t v12 = v11 >> 2;
      if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
        uint64_t v12 = v10 + 1;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13) {
        unint64_t v14 = (char *)sub_1000405F8(a1 + 272, v13);
      }
      else {
        unint64_t v14 = 0;
      }
      uint8_t v15 = &v14[8 * v10];
      int v16 = &v14[8 * v13];
      *(void *)uint8_t v15 = v25;
      uint64_t v9 = v15 + 8;
      int v18 = *(char **)(a1 + 256);
      long long v17 = *(char **)(a1 + 264);
      if (v17 != v18)
      {
        do
        {
          uint64_t v19 = *((void *)v17 - 1);
          v17 -= 8;
          *((void *)v15 - 1) = v19;
          v15 -= 8;
        }
        while (v17 != v18);
        long long v17 = *v3;
      }
      *(void *)(a1 + 256) = v15;
      *(void *)(a1 + 264) = v9;
      *(void *)(a1 + 272) = v16;
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *uint64_t v8 = v25;
      uint64_t v9 = v8 + 1;
    }
    *(void *)(a1 + 264) = v9;
    sub_10003AFE8((uint64_t)v24);
    uint64_t v20 = v25;
    sub_1004762BC(v25);
    sub_100502200(a1, 0, (uint64_t)v20);
  }
  return sub_10003AFB4((uint64_t)v24);
}

void sub_1005021E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100502200(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a3)
  {
    uint64_t v6 = qword_100A19E68;
    if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_FAULT)) {
      sub_10077415C(v6);
    }
  }
  if (a2 > 2) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = off_1009B3050[a2];
  }
  uint64_t v8 = qword_100A19E68;
  if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a3, &__p);
    uint64_t v9 = v21 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&unsigned char buf[14] = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Sending '%{public}s' event for device %{public}s", buf, 0x16u);
    if (SHIBYTE(v21) < 0) {
      operator delete(__p);
    }
  }
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  sub_10003AED0((uint64_t)buf, a1 + 16);
  uint64_t v10 = *(void *)(a1 + 80);
  uint64_t v11 = *(void *)(a1 + 88);
  if (v10 != v11)
  {
    long long __p = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    sub_1005032A4((char *)&__p, v10, v11, 0xCCCCCCCCCCCCCCCDLL * ((v11 - v10) >> 3));
    sub_10003AFE8((uint64_t)buf);
    uint64_t v12 = (unint64_t *)__p;
    if (__p != v20)
    {
      do
      {
        if (v12[2])
        {
          if (a3)
          {
            if (qword_1009F7F00 != -1) {
              dispatch_once(&qword_1009F7F00, &stru_1009B2FF0);
            }
            unint64_t v13 = sub_1004A93A0((uint64_t)off_1009F7EF8, *v12, a3);
          }
          else
          {
            unint64_t v13 = 4294901761;
          }
          if (qword_1009F8168 != -1) {
            dispatch_once(&qword_1009F8168, &stru_1009B2FD0);
          }
          if (sub_1000181D0(qword_1009F8160, *v12) && v13)
          {
            if (qword_1009FB160 != -1) {
              dispatch_once(&qword_1009FB160, &stru_1009B3010);
            }
            operator new();
          }
          unint64_t v14 = qword_100A19E68;
          if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_ERROR)) {
            sub_10077411C(&v17, v18, v14);
          }
          sub_10003AF00((uint64_t)buf);
          uint64_t v15 = sub_1005033D8(*(void *)(a1 + 80), *(void *)(a1 + 88), *v12);
          sub_100502E88(a1 + 80, v15, *(void *)(a1 + 88));
          sub_10003AFE8((uint64_t)buf);
        }
        v12 += 5;
      }
      while (v12 != v20);
      uint64_t v12 = (unint64_t *)__p;
    }
    if (v12)
    {
      uint64_t v20 = v12;
      operator delete(v12);
    }
  }
  return sub_10003AFB4((uint64_t)buf);
}

void sub_100502574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1005025B0(uint64_t a1, void *a2)
{
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, a1 + 192);
  BOOL v4 = sub_1004A8390(a1 + 256, (uint64_t)a2);
  sub_10003AFE8((uint64_t)v12);
  if (*(_DWORD *)(a1 + 12) == 2048)
  {
    if (v4)
    {
      LODWORD(__p[0]) = 0;
      if ((sub_100500A10(a1, (uint64_t)a2, __p, 0) & 1) == 0)
      {
        uint64_t v5 = qword_100A19E68;
        if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT))
        {
          sub_100474E18((uint64_t)a2, __p);
          if (v11 >= 0) {
            uint64_t v6 = __p;
          }
          else {
            uint64_t v6 = (void **)__p[0];
          }
          *(_DWORD *)long long buf = 136446210;
          unint64_t v14 = v6;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Device %{public}s no longer matches our service list", buf, 0xCu);
          if (v11 < 0) {
            operator delete(__p[0]);
          }
        }
        unint64_t v7 = (void (**)(uint64_t, void *))(*(void *)a1 + 48);
        goto LABEL_16;
      }
LABEL_17:
      sub_1004762BC(a2);
      sub_100502200(a1, 2u, (uint64_t)a2);
      return sub_10003AFB4((uint64_t)v12);
    }
    LODWORD(__p[0]) = 0;
    if (!sub_100500A10(a1, (uint64_t)a2, __p, 0)) {
      goto LABEL_17;
    }
  }
  else
  {
    if (v4) {
      goto LABEL_17;
    }
    uint64_t v8 = qword_100A19E68;
    if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_INFO))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Got a device changed call for one we haven't found yet...", (uint8_t *)__p, 2u);
    }
  }
  unint64_t v7 = (void (**)(uint64_t, void *))(*(void *)a1 + 32);
LABEL_16:
  (*v7)(a1, a2);
  return sub_10003AFB4((uint64_t)v12);
}

void sub_1005027E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100502808(uint64_t a1, void *a2)
{
  v6[1] = 0;
  unint64_t v7 = a2;
  v6[0] = 0;
  sub_10003AED0((uint64_t)v6, a1 + 192);
  if (sub_1004A83C4((char **)(a1 + 256), (uint64_t)a2))
  {
    sub_1000517A4(a1 + 280, (unint64_t *)&v7);
    sub_10003AFE8((uint64_t)v6);
    BOOL v4 = v7;
    sub_1004762BC(v7);
    sub_100502200(a1, 1u, (uint64_t)v4);
  }
  return sub_10003AFB4((uint64_t)v6);
}

void sub_100502894(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1005028A8(void *result)
{
  *uint64_t result = off_1009B2F60;
  return result;
}

void sub_1005028C8(void *a1)
{
  *a1 = off_1009B2F60;
  operator delete();
}

uint64_t sub_1005028F8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result = sub_100502968(a1, *(void *)(a1 + 40));
  if (result)
  {
    uint64_t result = sub_100502968(a1, *(void *)(a1 + 56));
    if (result) {
      return sub_10045821C(a2, a3, *(void *)(a1 + 40), *(unsigned int *)(a1 + 48), *(void *)(a1 + 56), *(unsigned int *)(a1 + 64), a4);
    }
  }
  return result;
}

BOOL sub_100502968(uint64_t a1, unint64_t a2)
{
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009B2FD0);
  }
  uint64_t v3 = qword_1009F8160;

  return sub_10055363C(v3, a2);
}

void *sub_1005029CC(void *result)
{
  *uint64_t result = &off_1009B2FA0;
  return result;
}

void sub_1005029EC(void *a1)
{
  *a1 = &off_1009B2FA0;
  operator delete();
}

uint64_t sub_100502A1C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result = sub_100502968(a1, *(void *)(a1 + 40));
  if (result)
  {
    uint64_t result = sub_100502968(a1, *(void *)(a1 + 56));
    if (result) {
      return sub_10045821C(a2, a3, *(void *)(a1 + 40), *(unsigned int *)(a1 + 48), *(void *)(a1 + 56), *(unsigned int *)(a1 + 64), a4);
    }
  }
  return result;
}

uint64_t sub_100502A8C(unint64_t *a1)
{
  uint64_t result = sub_100502968((uint64_t)a1, a1[2]);
  if (result)
  {
    unint64_t v3 = a1[2];
    unint64_t v4 = a1[3];
    unint64_t v5 = a1[4];
    uint64_t v6 = *(uint64_t (**)(unint64_t *, unint64_t, unint64_t, unint64_t))(*a1 + 40);
    return v6(a1, v3, v4, v5);
  }
  return result;
}

uint64_t sub_100502B00(unint64_t *a1)
{
  uint64_t result = sub_100502968((uint64_t)a1, a1[2]);
  if (result)
  {
    unint64_t v3 = a1[2];
    unint64_t v4 = a1[3];
    unint64_t v5 = a1[4];
    uint64_t v6 = *(uint64_t (**)(unint64_t *, unint64_t, unint64_t, unint64_t))(*a1 + 40);
    return v6(a1, v3, v4, v5);
  }
  return result;
}

void sub_100502B74(id a1)
{
}

void sub_100502BB8()
{
}

void sub_100502BDC(void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    sub_100502C30((uint64_t)v2, *v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_100502C30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 != a2)
  {
    uint64_t v5 = v4 - 16;
    do
    {
      *(void *)(v4 - 16) = &off_100998428;
      v4 -= 16;
      uint64_t v6 = *(atomic_uint **)(v4 + 8);
      if (v6) {
        sub_1000368F4(v6);
      }
      v5 -= 16;
    }
    while (v4 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t sub_100502CA4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666) {
    abort();
  }
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v2) >> 3);
  if (2 * v9 > v4) {
    unint64_t v4 = 2 * v9;
  }
  if (v9 >= 0x333333333333333) {
    unint64_t v10 = 0x666666666666666;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v20 = v7;
  char v11 = (char *)sub_10026C508(v7, v10);
  uint64_t v12 = &v11[40 * v3];
  long long __p = v11;
  uint8_t v17 = v12;
  uint64_t v19 = &v11[40 * v13];
  *(void *)uint64_t v12 = *(void *)a2;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)(a2 + 8);
  *((_DWORD *)v12 + 6) = *(_DWORD *)(a2 + 24);
  *((void *)v12 + 4) = *(void *)(a2 + 32);
  int v18 = v12 + 40;
  sub_100502E18(a1, &__p);
  uint64_t v14 = a1[1];
  if (v18 != v17) {
    int v18 = &v17[(v18 - v17 - 40) % 0x28uLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v14;
}

void sub_100502DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100502E18(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    uint64_t v5 = *(void *)(v2 - 40);
    v2 -= 40;
    *(void *)(v4 - 4sub_1004C2140(qword_100A19B68, 0) = v5;
    v4 -= 40;
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(v2 + 8);
    *(_DWORD *)(v4 + 24) = *(_DWORD *)(v2 + 24);
    *(void *)(v4 + 32) = *(void *)(v2 + 32);
  }
  a2[1] = v4;
  uint64_t v6 = *result;
  *uint64_t result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100502E88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    sub_100502ED0(a3, *(void *)(a1 + 8), a2);
    *(void *)(a1 + 8) = v5;
  }
  return a2;
}

uint64_t sub_100502ED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 == a2) {
    return a1;
  }
  do
  {
    *(void *)a3 = *(void *)a1;
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(a1 + 8);
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(a1 + 24);
    *(void *)(a3 + 32) = *(void *)(a1 + 32);
    a3 += 40;
    a1 += 40;
  }
  while (a1 != a2);
  return a2;
}

void sub_100502F1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = *(void *)(a2 + 8);
  void *v3 = &off_100998428;
  v3[1] = v4;
  if (v4) {
    sub_100037354(v4);
  }
  *(void *)(a1 + 8) = v3 + 2;
}

void sub_100502F70(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100502F78(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (a1[1] - *a1) >> 4;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60) {
    abort();
  }
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v9 = v8 - v2;
  if (v9 >> 3 > v4) {
    unint64_t v4 = v9 >> 3;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v19 = v7;
  if (v10) {
    char v11 = (char *)sub_10036C440(v7, v10);
  }
  else {
    char v11 = 0;
  }
  uint64_t v12 = &v11[16 * v3];
  v16[0] = v11;
  v16[1] = v12;
  uint8_t v17 = v12;
  int v18 = &v11[16 * v10];
  *(void *)uint64_t v12 = &off_100998428;
  uint64_t v13 = *(void *)(a2 + 8);
  *((void *)v12 + 1) = v13;
  if (v13)
  {
    sub_100037354(v13);
    uint64_t v12 = v17;
  }
  uint8_t v17 = v12 + 16;
  sub_100503078(a1, v16);
  uint64_t v14 = a1[1];
  sub_100503134((uint64_t)v16);
  return v14;
}

void sub_100503064(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100503134((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100503078(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a2[1];
  if (v4 != *a1)
  {
    uint64_t v7 = v6 - 16;
    do
    {
      *(void *)(v6 - 16) = &off_100998428;
      v6 -= 16;
      uint64_t v8 = *(void *)(v4 - 8);
      *(void *)(v6 + 8) = v8;
      if (v8) {
        sub_100037354(v8);
      }
      v4 -= 16;
      v7 -= 16;
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  uint64_t v9 = *a1;
  *a1 = v6;
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
}

uint64_t sub_100503134(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10050316C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    *(void *)(a1 + 16) = v2 - 16;
    *(void *)(v2 - 16) = &off_100998428;
    uint64_t v5 = *(atomic_uint **)(v2 - 8);
    if (v5)
    {
      sub_1000368F4(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 16;
    }
  }
}

uint64_t **sub_1005031E0(uint64_t **a1, unint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x30uLL);
    uint8_t v11[4] = **a4;
    *((_DWORD *)v11 + 1sub_1004C2140(qword_100A19B68, 0) = 0;
    sub_100036CA0(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

char *sub_1005032A4(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_100503320(result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      *(void *)uint64_t v7 = *(void *)a2;
      *(_OWORD *)(v7 + 8) = *(_OWORD *)(a2 + 8);
      *(_DWORD *)(v7 + 24) = *(_DWORD *)(a2 + 24);
      *(void *)(v7 + 32) = *(void *)(a2 + 32);
      v7 += 40;
      a2 += 40;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

char *sub_100503320(void *a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    abort();
  }
  uint64_t result = (char *)sub_10026C508((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

void sub_100503370(id a1)
{
}

void sub_1005033B4()
{
}

uint64_t sub_1005033D8(uint64_t result, uint64_t a2, uint64_t a3)
{
  while (1)
  {
    if (result == a2) {
      return a2;
    }
    if (*(void *)result == a3) {
      break;
    }
    result += 40;
  }
  if (result != a2)
  {
    for (uint64_t i = result + 40; i != a2; i += 40)
    {
      if (*(void *)i != a3)
      {
        *(void *)uint64_t result = *(void *)i;
        *(_OWORD *)(result + 8) = *(_OWORD *)(i + 8);
        *(_DWORD *)(result + 24) = *(_DWORD *)(i + 24);
        *(void *)(result + 32) = *(void *)(i + 32);
        result += 40;
      }
    }
  }
  return result;
}

void sub_100503444(id a1)
{
}

void sub_100503488()
{
}

uint64_t sub_1005034AC(uint64_t a1)
{
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 4sub_1004C2140(qword_100A19B68, 0) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = off_1009A5288;
  sub_100052DA8(a1 + 8);
  *(void *)(a1 + 72) = 0;
  *(void *)a1 = off_1009B3078;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 8sub_1004C2140(qword_100A19B68, 0) = 1;
  return a1;
}

uint64_t sub_100503538@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 8);
  if (*(char *)(a1 + 111) < 0)
  {
    sub_10003B098((unsigned char *)a2, *(void **)(a1 + 88), *(void *)(a1 + 96));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 88);
    *(void *)(a2 + 16) = *(void *)(a1 + 104);
  }
  return sub_10003AFB4((uint64_t)v5);
}

void sub_1005035A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1005035BC(std::string *a1, void *a2)
{
  id v4 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, (uint64_t)&a1->__r_.__value_.__l.__size_);
  objc_storeStrong((id *)&a1[3].__r_.__value_.__l.__data_, a2);
  uint64_t v5 = [a1[3].__r_.__value_.__l.__data_ getLocalUrl];
  id v6 = [v5 absoluteString];
  a1 = (std::string *)((char *)a1 + 88);
  std::string::assign(a1, (const std::string::value_type *)[v6 UTF8String]);

  std::string::append(a1, "device_workarounds.db");
  sub_10003AFB4((uint64_t)v7);
}

void sub_10050366C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1005036A4(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  *(void *)a1 = off_1009A5288;

  sub_100052DA4(a1 + 8);
  return a1;
}

void sub_100503704(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  *(void *)a1 = off_1009A5288;

  sub_100052DA4(a1 + 8);

  operator delete();
}

uint64_t sub_100503784(uint64_t a1)
{
  *(void *)a1 = off_1009B30A0;
  *(void *)(a1 + 8) = off_1009B3160;
  *(void *)(a1 + 16) = off_1009B3180;
  *(void *)(a1 + 24) = off_1009B31A8;
  *(void *)(a1 + 32) = off_1009B31D0;
  *(void *)(a1 + 4sub_1004C2140(qword_100A19B68, 0) = &off_1009B3200;
  sub_100052DA8(a1 + 48);
  *(unsigned char *)(a1 + 112) = 0;
  sub_100052DA8(a1 + 120);
  *(_WORD *)(a1 + 184) = 0;
  sub_100052DA8(a1 + 192);
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 256) = a1 + 264;
  sub_100052DA8(a1 + 280);
  *(_OWORD *)(a1 + 36sub_1004C2140(qword_100A19B68, 0) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  sub_100052DA8(a1 + 392);
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 456) = a1 + 464;
  *(_DWORD *)(a1 + 48sub_1004C2140(qword_100A19B68, 0) = 0;
  *(void *)(a1 + 488) = 0;
  *(_WORD *)(a1 + 496) = 0;
  sub_100052DA8(a1 + 520);
  *(void *)(a1 + 60sub_1004C2140(qword_100A19B68, 0) = 0;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 584) = a1 + 592;
  return a1;
}

void sub_100503920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v19 = v17;
  uint64_t v20 = v14;
  sub_1000486F0(v16, *v19);
  sub_100052DA4(v20);
  a10 = (void **)(v11 + 368);
  sub_100508DE0(&a10);
  unint64_t v22 = *(std::__shared_weak_count **)(v11 + 360);
  if (v22) {
    sub_10008A294(v22);
  }
  sub_100052DA4(v15);
  sub_100508D80(v11 + 256, *v18);
  sub_100052DA4(v13);
  sub_100052DA4(v12);
  sub_100052DA4(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_1005039B4(uint64_t a1)
{
  *(void *)a1 = off_1009B30A0;
  *(void *)(a1 + 8) = off_1009B3160;
  *(void *)(a1 + 16) = off_1009B3180;
  *(void *)(a1 + 24) = off_1009B31A8;
  *(void *)(a1 + 32) = off_1009B31D0;
  *(void *)(a1 + 4sub_1004C2140(qword_100A19B68, 0) = &off_1009B3200;
  sub_1000486F0(a1 + 584, *(void **)(a1 + 592));
  sub_100052DA4(a1 + 520);
  sub_1000486F0(a1 + 456, *(void **)(a1 + 464));
  sub_100052DA4(a1 + 392);
  id v4 = (void **)(a1 + 368);
  sub_100508DE0(&v4);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 360);
  if (v2) {
    sub_10008A294(v2);
  }
  sub_100052DA4(a1 + 280);
  sub_100508D80(a1 + 256, *(void **)(a1 + 264));
  sub_100052DA4(a1 + 192);
  sub_100052DA4(a1 + 120);
  sub_100052DA4(a1 + 48);
  return a1;
}

uint64_t sub_100503B10(uint64_t a1)
{
  return sub_1005039B4(a1 - 16);
}

void sub_100503B18(uint64_t a1)
{
  sub_1005039B4(a1);

  operator delete();
}

void sub_100503B50(uint64_t a1)
{
  sub_1005039B4(a1 - 16);

  operator delete();
}

uint64_t sub_100503B8C(uint64_t a1)
{
  if (qword_1009F87A8 != -1) {
    dispatch_once(&qword_1009F87A8, &stru_1009B32F0);
  }
  sub_1000CED0C((uint64_t)off_1009F87A0 + 24, a1 + 24);
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009B3310);
  }
  sub_1000A7BDC((uint64_t)off_1009F85C0 + 1872, a1 + 40);
  v27[0] = 0;
  v27[1] = 0;
  uint64_t v2 = sub_10003AED0((uint64_t)v27, a1 + 48);
  *(unsigned char *)(a1 + 112) = 1;
  sub_10003AFE8(v2);
  sub_100504268(a1);
  uint64_t v3 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 648))(v3))
  {
    uint64_t v4 = sub_100017768();
    sub_10004191C(buf, "ScanCorePageScan");
    sub_10004191C(__p, "ScanCorePageScanDebugEnabled");
    int v5 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, uint64_t))(*(void *)v4 + 72))(v4, buf, __p, a1 + 497);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    if (v26 < 0)
    {
      operator delete(*(void **)buf);
      if (!v5) {
        goto LABEL_45;
      }
    }
    else if (!v5)
    {
LABEL_45:
      uint64_t v14 = sub_100017768();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v14 + 624))(v14))
      {
        LOBYTE(__p[0]) = 0;
        sub_10001B8E0(__p);
        uint64_t v15 = qword_100A19E68;
        if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Disabling BT Page Scans", buf, 2u);
        }
        sub_10001BDE0(71, 0, v16, v17, v18, v19, v20, v21, 1);
        sub_10001B8AC(__p);
      }
      return sub_10003AFB4((uint64_t)v27);
    }
    if (*(unsigned char *)(a1 + 497))
    {
      uint64_t v6 = sub_100017768();
      sub_10004191C(buf, "ScanCorePageScan");
      sub_10004191C(__p, "ScanCorePageScanInterval");
      (*(void (**)(uint64_t, uint8_t *, void **, uint64_t))(*(void *)v6 + 128))(v6, buf, __p, a1 + 500);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
      if (v26 < 0) {
        operator delete(*(void **)buf);
      }
      uint64_t v7 = sub_100017768();
      sub_10004191C(buf, "ScanCorePageScan");
      sub_10004191C(__p, "ScanCorePageScanWindow");
      (*(void (**)(uint64_t, uint8_t *, void **, uint64_t))(*(void *)v7 + 128))(v7, buf, __p, a1 + 504);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
      if (v26 < 0) {
        operator delete(*(void **)buf);
      }
      uint64_t v8 = sub_100017768();
      sub_10004191C(buf, "ScanCorePageScan");
      sub_10004191C(__p, "ScanCorePageScanInterlaced");
      (*(void (**)(uint64_t, uint8_t *, void **, uint64_t))(*(void *)v8 + 72))(v8, buf, __p, a1 + 508);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
      if (v26 < 0) {
        operator delete(*(void **)buf);
      }
      uint64_t v9 = sub_100017768();
      sub_10004191C(buf, "ScanCorePageScan");
      sub_10004191C(__p, "ScanCorePageScanDebugElnaMode");
      (*(void (**)(uint64_t, uint8_t *, void **, uint64_t))(*(void *)v9 + 72))(v9, buf, __p, a1 + 509);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
      if (v26 < 0) {
        operator delete(*(void **)buf);
      }
      uint64_t v10 = sub_100017768();
      sub_10004191C(buf, "ScanCorePageScan");
      sub_10004191C(__p, "ScanCorePageScanUseAuxScanParams");
      (*(void (**)(uint64_t, uint8_t *, void **, uint64_t))(*(void *)v10 + 72))(v10, buf, __p, a1 + 510);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
      if (v26 < 0) {
        operator delete(*(void **)buf);
      }
      uint64_t v11 = sub_100017768();
      sub_10004191C(buf, "ScanCorePageScan");
      sub_10004191C(__p, "ScanCorePageScanEnableAuxScan");
      (*(void (**)(uint64_t, uint8_t *, void **, uint64_t))(*(void *)v11 + 72))(v11, buf, __p, a1 + 511);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
      if (v26 < 0) {
        operator delete(*(void **)buf);
      }
      uint64_t v12 = sub_100017768();
      sub_10004191C(buf, "ScanCorePageScan");
      sub_10004191C(__p, "ScanCorePageScanPreemptAuxScan");
      (*(void (**)(uint64_t, uint8_t *, void **, uint64_t))(*(void *)v12 + 72))(v12, buf, __p, a1 + 512);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
      if (v26 < 0) {
        operator delete(*(void **)buf);
      }
      uint64_t v13 = sub_100017768();
      sub_10004191C(buf, "ScanCorePageScan");
      sub_10004191C(__p, "ScanCorePageScanAuxScanDurationInMs");
      (*(void (**)(uint64_t, uint8_t *, void **, uint64_t))(*(void *)v13 + 128))(v13, buf, __p, a1 + 516);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
      if (v26 < 0) {
        operator delete(*(void **)buf);
      }
    }
    goto LABEL_45;
  }
  return sub_10003AFB4((uint64_t)v27);
}

void sub_1005041AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  sub_10003AFB4(v21 - 48);
  _Unwind_Resume(a1);
}

BOOL sub_100504268(uint64_t a1)
{
  v35[0] = 0;
  v35[1] = 0;
  sub_10003AED0((uint64_t)v35, a1 + 120);
  v34[0] = 0;
  v34[1] = 0;
  sub_10003AED0((uint64_t)v34, a1 + 280);
  int v2 = *(unsigned __int8 *)(a1 + 184);
  if (*(unsigned char *)(a1 + 184))
  {
    uint64_t v3 = *(void *)(a1 + 368);
    if (v3 == *(void *)(a1 + 376) || *(_DWORD *)(*(void *)v3 + 76) != 2)
    {
      uint64_t v11 = qword_100A19E68;
      if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v2;
        uint64_t v8 = "Scanning is paused with a count of %d - returning";
        uint64_t v9 = v11;
        uint32_t v10 = 8;
LABEL_13:
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, v8, buf, v10);
      }
LABEL_14:
      uint64_t v12 = 0;
      BOOL v13 = 0;
      goto LABEL_15;
    }
    uint64_t v4 = qword_100A19E68;
    if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Name requests can't be paused. FULL STEAM AHEAD!", buf, 2u);
    }
  }
  uint64_t v5 = *(void *)(a1 + 344);
  if (v5 || *(void *)(a1 + 368) == *(void *)(a1 + 376))
  {
    uint64_t v6 = qword_100A19E68;
    if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = "Scan in progress";
      if (!v5) {
        uint64_t v7 = "No scans queued";
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v7;
      uint64_t v8 = "%{public}s - returning";
      uint64_t v9 = v6;
      uint32_t v10 = 12;
      goto LABEL_13;
    }
    goto LABEL_14;
  }
  v33[0] = 0;
  v33[1] = 0;
  sub_10003AED0((uint64_t)v33, a1 + 48);
  BOOL v13 = *(unsigned char *)(a1 + 112) != 0;
  if (*(unsigned char *)(a1 + 112))
  {
    uint64_t v15 = 0;
    uint64_t v16 = *(uint64_t **)(a1 + 368);
    while (1)
    {
      uint64_t v17 = *v16;
      uint64_t v18 = v16[1];
      uint64_t v12 = (std::__shared_weak_count *)v16[2];
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v15) {
        sub_10008A294(v15);
      }
      sub_1005095E4((uint64_t)buf, *(void *)(a1 + 368) + 24, *(void *)(a1 + 376), *(void *)(a1 + 368));
      uint64_t v20 = v19;
      for (uint64_t i = *(void *)(a1 + 376); i != v20; i -= 24)
      {
        unint64_t v22 = *(std::__shared_weak_count **)(i - 8);
        if (v22) {
          sub_10008A294(v22);
        }
      }
      *(void *)(a1 + 376) = v20;
      if (v17)
      {
        *(void *)(a1 + 344) = v17;
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        char v23 = *(std::__shared_weak_count **)(a1 + 360);
        *(void *)(a1 + 352) = v18;
        *(void *)(a1 + 36sub_1004C2140(qword_100A19B68, 0) = v12;
        if (v23) {
          sub_10008A294(v23);
        }
      }
      else if (v18)
      {
        if (qword_1009F8168 != -1) {
          dispatch_once(&qword_1009F8168, &stru_1009B3290);
        }
        char v24 = (void *)qword_1009F8160;
        v32[0] = v18;
        v32[1] = (uint64_t)v12;
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t v25 = sub_100504ECC(a1, v32);
        uint64_t v26 = sub_100019C0C(v24, v25);
        if (v12) {
          sub_10008A294(v12);
        }
        int v27 = qword_100A19E68;
        if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_ERROR))
        {
          if (v26)
          {
            sub_10003AE4C(v26, (uint64_t)buf);
            __int16 v28 = buf;
            if (v37 < 0) {
              __int16 v28 = *(unsigned char **)buf;
            }
            *(_DWORD *)long long v38 = 136446210;
            long long v39 = v28;
            _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "Had no object for the scan from %{public}s", v38, 0xCu);
            if (v37 < 0) {
              operator delete(*(void **)buf);
            }
          }
          else
          {
            sub_1007741E0(v38, &v39, v27);
          }
        }
        (*(void (**)(uint64_t))(*(void *)v18 + 16))(v18);
        (*(void (**)(uint64_t))(*(void *)v18 + 24))(v18);
      }
      if (*(void *)(a1 + 344)) {
        break;
      }
      uint64_t v16 = *(uint64_t **)(a1 + 368);
      uint64_t v15 = v12;
      if (v16 == *(uint64_t **)(a1 + 376)) {
        goto LABEL_57;
      }
    }
    uint64_t v30 = sub_1004AF8EC();
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472;
    void v31[2] = sub_1005063EC;
    void v31[3] = &unk_100997528;
    uint8_t v31[4] = a1;
    sub_100013018(v30, v31);
LABEL_57:
    sub_10003AFE8((uint64_t)v33);
    sub_10003AFE8((uint64_t)v34);
  }
  else
  {
    int v29 = qword_100A19E68;
    if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "Stack wasn't started - returning", buf, 2u);
    }
    uint64_t v12 = 0;
  }
  sub_10003AFB4((uint64_t)v33);
LABEL_15:
  sub_10003AFB4((uint64_t)v34);
  sub_10003AFB4((uint64_t)v35);
  if (v12) {
    sub_10008A294(v12);
  }
  return v13;
}

void sub_10050473C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va2, a11);
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  sub_10003AFB4((uint64_t)va);
  sub_10003AFB4((uint64_t)va1);
  sub_10003AFB4((uint64_t)va2);
  if (v11) {
    sub_10008A294(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1005047B0(uint64_t a1)
{
  return sub_100503B8C(a1 - 32);
}

uint64_t sub_1005047B8(uint64_t a1)
{
  int v2 = qword_100A19E68;
  if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "DManager::stackWillStop enter", buf, 2u);
  }
  if (qword_1009F87A8 != -1) {
    dispatch_once(&qword_1009F87A8, &stru_1009B32F0);
  }
  sub_100052718((uint64_t)off_1009F87A0 + 24, a1 + 24);
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009B3310);
  }
  sub_100052718((uint64_t)off_1009F85C0 + 1872, a1 + 40);
  *(void *)long long buf = 0;
  uint64_t v18 = 0;
  sub_10003AED0((uint64_t)buf, a1 + 48);
  *(unsigned char *)(a1 + 112) = 0;
  sub_10003AFE8((uint64_t)buf);
  v16[0] = 0;
  v16[1] = 0;
  sub_10003AED0((uint64_t)v16, a1 + 280);
  uint64_t v3 = *(int **)(a1 + 344);
  if (v3)
  {
    uint64_t v4 = qword_100A19E68;
    if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = v3[19];
      if (v5 > 3) {
        uint64_t v6 = 0;
      }
      else {
        uint64_t v6 = off_1009B33E8[v5];
      }
      *(_DWORD *)uint64_t v19 = 136446210;
      *(void *)&v19[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Stopping current %{public}s scan", v19, 0xCu);
      uint64_t v3 = *(int **)(a1 + 344);
    }
    (*(void (**)(int *))(*(void *)v3 + 24))(v3);
  }
  int v7 = 101;
  while (*(void *)(a1 + 344))
  {
    if (!--v7)
    {
      uint64_t v11 = sub_100017768();
      uint64_t v12 = *(unsigned int *)(*(void *)(a1 + 344) + 76);
      sub_10004191C(v15, "");
      sub_1005C8AF4(v11, v12, (uint64_t)v15, 1);
    }
    sub_10003AFE8((uint64_t)v16);
    j__usleep(0x186A0u);
    sub_10003AF00((uint64_t)v16);
  }
  sub_10003AFE8((uint64_t)v16);
  *(_OWORD *)uint64_t v19 = 0uLL;
  uint64_t v8 = sub_10003AED0((uint64_t)v19, a1 + 120);
  *(unsigned char *)(a1 + 184) = 0;
  sub_10003AFE8(v8);
  v14[0] = 0;
  v14[1] = 0;
  sub_10003AED0((uint64_t)v14, a1 + 392);
  sub_100504B10(a1);
  uint64_t v9 = qword_100A19E68;
  if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "DManager::stackWillStop exit", v13, 2u);
  }
  sub_10003AFB4((uint64_t)v14);
  sub_10003AFB4((uint64_t)v19);
  sub_10003AFB4((uint64_t)v16);
  return sub_10003AFB4((uint64_t)buf);
}

void sub_100504A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20)
{
}

uint64_t sub_100504B10(uint64_t a1)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1 + 392);
  int v2 = *(NSObject **)(a1 + 488);
  if (v2)
  {
    uint64_t v3 = qword_100A19E68;
    if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Stopping Scan Core Page Scan timer", v5, 2u);
      int v2 = *(NSObject **)(a1 + 488);
    }
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 488));
    *(void *)(a1 + 488) = 0;
  }
  return sub_10003AFB4((uint64_t)v6);
}

uint64_t sub_100504BBC(uint64_t a1)
{
  return sub_1005047B8(a1 - 32);
}

uint64_t sub_100504BC4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009B3290);
  }
  uint64_t v8 = sub_100019C0C((void *)qword_1009F8160, a2);
  v19[0] = 0;
  v19[1] = 0;
  sub_10003AED0((uint64_t)v19, a1 + 192);
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009B3290);
  }
  unint64_t v9 = sub_1005532C4(qword_1009F8160, a2);
  *a3 = v9;
  *a4 = 0;
  a4[1] = 0;
  if (v9)
  {
    sub_100508F50(a4);
    __p[0] = a3;
    uint32_t v10 = sub_100509094((uint64_t **)(a1 + 256), a3, (uint64_t)&unk_1007BE9D0, (uint64_t **)__p);
    uint64_t v12 = *a4;
    uint64_t v11 = a4[1];
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = (std::__shared_weak_count *)v10[6];
    void v10[5] = v12;
    v10[6] = v11;
    if (v13) {
      sub_10008A294(v13);
    }
    uint64_t v14 = qword_100A19E68;
    if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT))
    {
      if (v8)
      {
        sub_10003AE4C(v8, (uint64_t)__p);
        if (v18 >= 0) {
          uint64_t v15 = __p;
        }
        else {
          uint64_t v15 = (void **)__p[0];
        }
        *(_DWORD *)long long buf = 136446210;
        uint64_t v21 = (const char *)v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Creating discovery agent %{public}s", buf, 0xCu);
        if (v18 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v21 = "(NULL)";
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Creating discovery agent %{public}s", buf, 0xCu);
      }
    }
  }
  return sub_10003AFB4((uint64_t)v19);
}

void sub_100504DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  int v7 = *(std::__shared_weak_count **)(v5 + 8);
  if (v7) {
    sub_10008A294(v7);
  }
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100504E18@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  v14[0] = 0;
  v14[1] = 0;
  sub_10003AED0((uint64_t)v14, a1 + 192);
  if (!a2) {
    goto LABEL_13;
  }
  uint64_t v6 = *(void **)(a1 + 264);
  if (!v6) {
    goto LABEL_13;
  }
  int v7 = (void *)(a1 + 264);
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      uint32_t v10 = v6;
    }
    else {
      uint32_t v10 = v6 + 1;
    }
    if (v9) {
      int v7 = v6;
    }
    uint64_t v6 = (void *)*v10;
  }
  while (*v10);
  if (v7 != (void *)(a1 + 264) && v7[4] <= a2)
  {
    uint64_t v13 = v7[5];
    uint64_t v12 = v7[6];
    *a3 = v13;
    a3[1] = v12;
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_13:
    *a3 = 0;
    a3[1] = 0;
  }
  return sub_10003AFB4((uint64_t)v14);
}

uint64_t sub_100504ECC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a1;
  v13[0] = 0;
  v13[1] = 0;
  sub_10003AED0((uint64_t)v13, a1 + 192);
  if (*a2)
  {
    uint64_t v4 = *(void **)(v3 + 256);
    uint64_t v5 = (void *)(v3 + 264);
    if (v4 != (void *)(v3 + 264))
    {
      while (1)
      {
        uint64_t v7 = v4[5];
        uint64_t v6 = (std::__shared_weak_count *)v4[6];
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v8 = *a2;
        if (v7 == *a2) {
          break;
        }
        if (v6) {
          goto LABEL_7;
        }
LABEL_8:
        if (v7 == v8) {
          goto LABEL_19;
        }
        BOOL v9 = (void *)v4[1];
        if (v9)
        {
          do
          {
            uint32_t v10 = v9;
            BOOL v9 = (void *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            uint32_t v10 = (void *)v4[2];
            BOOL v11 = *v10 == (void)v4;
            uint64_t v4 = v10;
          }
          while (!v11);
        }
        uint64_t v4 = v10;
        if (v10 == v5) {
          goto LABEL_18;
        }
      }
      uint64_t v3 = v4[4];
      if (!v6) {
        goto LABEL_8;
      }
LABEL_7:
      sub_10008A294(v6);
      goto LABEL_8;
    }
  }
LABEL_18:
  uint64_t v3 = 0;
LABEL_19:
  sub_10003AFB4((uint64_t)v13);
  return v3;
}

uint64_t sub_100504FC0(uint64_t a1, unint64_t a2)
{
  unint64_t v25 = a2;
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009B3290);
  }
  uint64_t v4 = sub_100019C0C((void *)qword_1009F8160, a2);
  uint64_t v5 = qword_100A19E68;
  if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT))
  {
    if (v4)
    {
      sub_10003AE4C(v4, (uint64_t)__p);
      if (v24 >= 0) {
        uint64_t v6 = __p;
      }
      else {
        uint64_t v6 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Destroying discovery agent %{public}s", buf, 0xCu);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "(NULL)";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Destroying discovery agent %{public}s", buf, 0xCu);
    }
  }
  *(_OWORD *)long long buf = 0uLL;
  sub_10003AED0((uint64_t)buf, a1 + 192);
  if (v25)
  {
    uint64_t v7 = *(void **)(a1 + 264);
    if (v7)
    {
      uint64_t v8 = (uint64_t *)(a1 + 264);
      do
      {
        unint64_t v9 = v7[4];
        BOOL v10 = v9 >= v25;
        if (v9 >= v25) {
          BOOL v11 = v7;
        }
        else {
          BOOL v11 = v7 + 1;
        }
        if (v10) {
          uint64_t v8 = v7;
        }
        uint64_t v7 = (void *)*v11;
      }
      while (*v11);
      if (v8 != (uint64_t *)(a1 + 264) && v25 >= v8[4])
      {
        uint64_t v12 = v8[5];
        uint64_t v13 = (std::__shared_weak_count *)v8[6];
        if (v13)
        {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v22[0] = v12;
        v22[1] = (uint64_t)v13;
        sub_10050542C((void *)a1, v22);
        if (v13) {
          sub_10008A294(v13);
        }
        __p[0] = &v25;
        uint64_t v14 = sub_100509094((uint64_t **)(a1 + 256), &v25, (uint64_t)&unk_1007BE9D0, (uint64_t **)__p);
        uint64_t v15 = (std::__shared_weak_count *)v14[6];
        v14[5] = 0;
        v14[6] = 0;
        if (v15) {
          sub_10008A294(v15);
        }
        sub_100509158((uint64_t **)(a1 + 256), v8);
        if (sub_10053FF64())
        {
          CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle();
          uint64_t v17 = CTGreenTeaOsLogHandle;
          if (CTGreenTeaOsLogHandle)
          {
            if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
            {
              if (v4)
              {
                sub_10003AE4C(v4, (uint64_t)__p);
                if (v24 >= 0) {
                  char v18 = __p;
                }
                else {
                  char v18 = (void **)__p[0];
                }
                *(_DWORD *)uint64_t v26 = 136446210;
                int v27 = (const char *)v18;
                _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Session \"%{public}s\" is asking to destroy scan agent", v26, 0xCu);
                if (v24 < 0) {
                  operator delete(__p[0]);
                }
              }
              else
              {
                *(_DWORD *)uint64_t v26 = 136446210;
                int v27 = "(NULL)";
                _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Session \"%{public}s\" is asking to destroy scan agent", v26, 0xCu);
              }
            }
          }
        }
        uint64_t v19 = qword_100A19E68;
        if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT))
        {
          if (v4)
          {
            sub_10003AE4C(v4, (uint64_t)__p);
            if (v24 >= 0) {
              uint64_t v20 = __p;
            }
            else {
              uint64_t v20 = (void **)__p[0];
            }
            *(_DWORD *)uint64_t v26 = 136446210;
            int v27 = (const char *)v20;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" is asking to destroy scan agent", v26, 0xCu);
            if (v24 < 0) {
              operator delete(__p[0]);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v26 = 136446210;
            int v27 = "(NULL)";
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" is asking to destroy scan agent", v26, 0xCu);
          }
        }
        if (qword_1009F8168 != -1) {
          dispatch_once(&qword_1009F8168, &stru_1009B3290);
        }
        sub_1005536D8(qword_1009F8160, v25);
        if (v13) {
          sub_10008A294(v13);
        }
      }
    }
  }
  return sub_10003AFB4((uint64_t)buf);
}

void sub_1005053E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  if (v9) {
    sub_10008A294(v9);
  }
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10050542C(void *a1, uint64_t *a2)
{
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009B3290);
  }
  uint64_t v4 = (void *)qword_1009F8160;
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  v26[0] = *a2;
  v26[1] = (uint64_t)v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v6 = sub_100504ECC((uint64_t)a1, v26);
  uint64_t v7 = sub_100019C0C(v4, v6);
  if (v5) {
    sub_10008A294(v5);
  }
  v25[0] = 0;
  v25[1] = 0;
  sub_10003AED0((uint64_t)v25, (uint64_t)(a1 + 35));
  uint64_t v8 = (uint64_t *)a1[46];
  if (v8 != (uint64_t *)a1[47])
  {
    while (1)
    {
      uint64_t v9 = *v8;
      uint64_t v10 = v8[1];
      BOOL v11 = (std::__shared_weak_count *)v8[2];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v10 == *a2) {
        break;
      }
      v8 += 3;
      if (v11) {
        goto LABEL_12;
      }
LABEL_13:
      if (v8 == (uint64_t *)a1[47]) {
        goto LABEL_24;
      }
    }
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    sub_1005095E4((uint64_t)__p, (uint64_t)(v8 + 3), a1[47], (uint64_t)v8);
    uint64_t v13 = v12;
    for (uint64_t i = a1[47]; i != v13; i -= 24)
    {
      uint64_t v15 = *(std::__shared_weak_count **)(i - 8);
      if (v15) {
        sub_10008A294(v15);
      }
    }
    a1[47] = v13;
    uint64_t v8 = (uint64_t *)a1[46];
    if (!v11) {
      goto LABEL_13;
    }
LABEL_12:
    sub_10008A294(v11);
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v16 = (int *)a1[43];
  if (v16 && a1[44] == *a2)
  {
    char v18 = qword_100A19E68;
    if (!os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT))
    {
LABEL_38:
      (*(void (**)(int *))(*(void *)v16 + 24))(v16);
      uint64_t v17 = 400;
      goto LABEL_39;
    }
    uint64_t v19 = v16[19];
    if (v19 > 3)
    {
      uint64_t v20 = 0;
      if (v7) {
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v20 = off_1009B33E8[v19];
      if (v7)
      {
LABEL_30:
        sub_10003AE4C(v7, (uint64_t)__p);
        if (v24 >= 0) {
          uint64_t v21 = __p;
        }
        else {
          uint64_t v21 = (void **)__p[0];
        }
        *(_DWORD *)long long buf = 136446466;
        __int16 v28 = v20;
        __int16 v29 = 2082;
        uint64_t v30 = (const char *)v21;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Stopping current %{public}s scan on behalf of %{public}s", buf, 0x16u);
        if (v24 < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_37;
      }
    }
    *(_DWORD *)long long buf = 136446466;
    __int16 v28 = v20;
    __int16 v29 = 2082;
    uint64_t v30 = "(NULL)";
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Stopping current %{public}s scan on behalf of %{public}s", buf, 0x16u);
LABEL_37:
    uint64_t v16 = (int *)a1[43];
    goto LABEL_38;
  }
  uint64_t v17 = 0;
LABEL_39:
  sub_10003AFB4((uint64_t)v25);
  return v17;
}

void sub_100505734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100505780(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1 + 48);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 185);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_1005057C8(uint64_t a1, void *a2, unsigned int a3, int a4)
{
  *(_DWORD *)(*a2 + 12) = a4;
  if (a3 < 2)
  {
    uint64_t v7 = (std::__shared_weak_count *)a2[1];
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = sub_100505940(a1);
    goto LABEL_16;
  }
  if (a3 - 2 >= 2)
  {
    if (a3 == 4)
    {
      if (qword_1009F8398 != -1) {
        dispatch_once(&qword_1009F8398, &stru_1009B32D0);
      }
      uint64_t v9 = off_1009F8390;
      uint64_t v7 = (std::__shared_weak_count *)a2[1];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = sub_100505D78((uint64_t)v9);
      goto LABEL_16;
    }
    return 412;
  }
  uint64_t v6 = sub_100035F54();
  if ((*(uint64_t (**)(uint64_t))(*(void *)v6 + 344))(v6)) {
    return 412;
  }
  uint64_t v7 = (std::__shared_weak_count *)a2[1];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = sub_100505B58(a1);
LABEL_16:
  uint64_t v10 = v8;
  if (v7) {
    sub_10008A294(v7);
  }
  return v10;
}

void sub_100505920(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10008A294(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100505940(uint64_t a1)
{
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  char v18 = 0;
  char v15 = 0;
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009B3368);
  }
  if (sub_1004B431C((uint64_t)off_1009F7EA8, &v15)) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v15 == 0;
  }
  if (v2)
  {
    v14[0] = 0;
    v14[1] = 0;
    sub_10003AED0((uint64_t)v14, a1 + 48);
    if (*(unsigned char *)(a1 + 112))
    {
      sub_10003AFE8((uint64_t)v14);
      operator new();
    }
    uint64_t v12 = 111;
    sub_10003AFB4((uint64_t)v14);
    if (v18) {
      sub_10008A294(v18);
    }
  }
  else
  {
    uint64_t v3 = qword_100A19E68;
    if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_ERROR)) {
      sub_100774230(v3, v5, v6, v7, v8, v9, v10, v11);
    }
    return 211;
  }
  return v12;
}

void sub_100505B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_10008A294(a16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100505B58(uint64_t a1)
{
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  char v18 = 0;
  char v15 = 0;
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009B3368);
  }
  if (sub_1004B431C((uint64_t)off_1009F7EA8, &v15)) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v15 == 0;
  }
  if (v2)
  {
    v14[0] = 0;
    v14[1] = 0;
    sub_10003AED0((uint64_t)v14, a1 + 48);
    if (*(unsigned char *)(a1 + 112))
    {
      sub_10003AFE8((uint64_t)v14);
      operator new();
    }
    uint64_t v12 = 111;
    sub_10003AFB4((uint64_t)v14);
    if (v18) {
      sub_10008A294(v18);
    }
  }
  else
  {
    uint64_t v3 = qword_100A19E68;
    if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_ERROR)) {
      sub_100774230(v3, v5, v6, v7, v8, v9, v10, v11);
    }
    return 211;
  }
  return v12;
}

void sub_100505D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_10008A294(a16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100505D78(uint64_t a1)
{
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  char v18 = 0;
  char v15 = 0;
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009B3368);
  }
  if (sub_1004B431C((uint64_t)off_1009F7EA8, &v15)) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v15 == 0;
  }
  if (v2)
  {
    v14[0] = 0;
    v14[1] = 0;
    sub_10003AED0((uint64_t)v14, a1 + 48);
    if (*(unsigned char *)(a1 + 112))
    {
      sub_10003AFE8((uint64_t)v14);
      operator new();
    }
    uint64_t v12 = 111;
    sub_10003AFB4((uint64_t)v14);
    if (v18) {
      sub_10008A294(v18);
    }
  }
  else
  {
    uint64_t v3 = qword_100A19E68;
    if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_ERROR)) {
      sub_100774230(v3, v5, v6, v7, v8, v9, v10, v11);
    }
    return 211;
  }
  return v12;
}

void sub_100505F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_10008A294(a16);
  }
  _Unwind_Resume(a1);
}

void **sub_100505F98(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = (unint64_t)*(result - 1);
  if (v7 >= v6)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    void v18[4] = result;
    uint64_t v14 = (char *)sub_1002B3440((uint64_t)result, v13);
    char v15 = &v14[24 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[24 * v16];
    *(_OWORD *)char v15 = *(_OWORD *)a2;
    uint64_t v17 = *(void *)(a2 + 16);
    *((void *)v15 + 2) = v17;
    if (v17) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
    }
    void v18[2] = v15 + 24;
    sub_100509200(a1, v18);
    uint64_t v9 = a1[1];
    uint64_t result = sub_100509264(v18);
  }
  else
  {
    *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
    uint64_t v8 = *(void *)(a2 + 16);
    *(void *)(v7 + 16) = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 24;
    a1[1] = v7 + 24;
  }
  a1[1] = v9;
  return result;
}

void sub_1005060C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100509264((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005060D4(uint64_t a1)
{
  uint64_t v4 = 0;
  memset(v3, 0, sizeof(v3));
  sub_10003AED0((uint64_t)v3, a1 + 48);
  if (*(unsigned char *)(a1 + 112))
  {
    sub_10003AFE8((uint64_t)v3);
    operator new();
  }
  sub_10003AFB4((uint64_t)v3);
  if (v4) {
    sub_10008A294(v4);
  }
  return 111;
}

void sub_1005061C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_10008A294(a16);
  }
  _Unwind_Resume(a1);
}

void *sub_10050621C(uint64_t *a1, _OWORD *a2, unint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v8 = ((uint64_t)a2 - *a1) >> 3;
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * v8;
  unint64_t v12 = a1[2];
  uint64_t v10 = (uint64_t)(a1 + 2);
  unint64_t v11 = v12;
  if (v6 >= v12)
  {
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v7) >> 3) + 1;
    if (v17 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v7) >> 3);
    if (2 * v18 > v17) {
      unint64_t v17 = 2 * v18;
    }
    if (v18 >= 0x555555555555555) {
      unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v19 = v17;
    }
    uint64_t v28 = v10;
    if (v19) {
      uint64_t v20 = (char *)sub_1002B3440(v10, v19);
    }
    else {
      uint64_t v20 = 0;
    }
    char v24 = v20;
    unint64_t v25 = &v20[24 * v9];
    uint64_t v26 = v25;
    int v27 = &v20[24 * v19];
    sub_100509360(&v24, a3);
    uint64_t v4 = (void *)sub_1005094C4(a1, &v24, (uint64_t)v4);
    sub_100509264(&v24);
  }
  else if (a2 == (_OWORD *)v6)
  {
    *a2 = *(_OWORD *)a3;
    uint64_t v21 = v7 + 8 * v8;
    uint64_t v22 = *(void *)(a3 + 16);
    *(void *)(v21 + 16) = v22;
    if (v22) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
    }
    a1[1] = (uint64_t)a2 + 24;
  }
  else
  {
    sub_1005092EC((uint64_t)a1, (uint64_t)a2, v6, (uint64_t)a2 + 24);
    if ((unint64_t)v4 <= a3) {
      a3 += 24 * (a1[1] > a3);
    }
    *uint64_t v4 = *(void *)a3;
    uint64_t v14 = *(void *)(a3 + 8);
    uint64_t v13 = *(void *)(a3 + 16);
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(v7 + 24 * v9 + 8) = v14;
    unint64_t v15 = v7 + 24 * v9;
    uint64_t v16 = *(std::__shared_weak_count **)(v15 + 16);
    *(void *)(v15 + 16) = v13;
    if (v16) {
      sub_10008A294(v16);
    }
  }
  return v4;
}

void sub_1005063D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100509264((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005063EC(uint64_t a1)
{
  return sub_1005063F4(*(void *)(a1 + 32));
}

uint64_t sub_1005063F4(uint64_t a1)
{
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 280);
  BOOL v2 = *(int **)(a1 + 344);
  if (v2)
  {
    sub_10003AFE8((uint64_t)v7);
    uint64_t v3 = qword_100A19E68;
    if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = v2[19];
      if (v4 > 3) {
        unint64_t v5 = 0;
      }
      else {
        unint64_t v5 = off_1009B33E8[v4];
      }
      *(_DWORD *)long long buf = 136446210;
      unint64_t v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Running new %{public}s scan", buf, 0xCu);
    }
    (*(void (**)(int *))(*(void *)v2 + 16))(v2);
  }
  return sub_10003AFB4((uint64_t)v7);
}

void sub_100506508(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100506524(uint64_t a1)
{
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, a1 + 120);
  int v2 = *(unsigned __int8 *)(a1 + 184);
  unsigned __int8 v3 = v2 + 1;
  *(unsigned char *)(a1 + 184) = v2 + 1;
  if (v2)
  {
    uint64_t v4 = qword_100A19E68;
    if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Pausing an already paused scan - new count is %d", buf, 8u);
    }
  }
  else
  {
    *(void *)long long buf = 0;
    uint64_t v15 = 0;
    sub_10003AED0((uint64_t)buf, a1 + 280);
    unint64_t v5 = *(int **)(a1 + 344);
    unint64_t v6 = qword_100A19E68;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_INFO);
    if (v5)
    {
      if (v7)
      {
        uint64_t v8 = v5[19];
        if (v8 > 3) {
          unint64_t v9 = 0;
        }
        else {
          unint64_t v9 = off_1009B33E8[v8];
        }
        *(_DWORD *)unint64_t v12 = 136446210;
        uint64_t v13 = v9;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Pausing current %{public}s scan", v12, 0xCu);
        unint64_t v5 = *(int **)(a1 + 344);
      }
      (*(void (**)(int *))(*(void *)v5 + 24))(v5);
    }
    else if (v7)
    {
      *(_WORD *)unint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Pausing DManager", v12, 2u);
    }
    sub_10003AFB4((uint64_t)buf);
  }
  return sub_10003AFB4((uint64_t)v11);
}

void sub_1005066EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t sub_100506718(uint64_t a1)
{
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 120);
  char v2 = *(unsigned char *)(a1 + 184);
  if (v2)
  {
    unsigned __int8 v3 = v2 - 1;
    *(unsigned char *)(a1 + 184) = v2 - 1;
    uint64_t v4 = qword_100A19E68;
    if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 67109120;
      int v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Resuming a scan - new count is %d", buf, 8u);
      unsigned __int8 v3 = *(unsigned char *)(a1 + 184);
    }
    if (!v3)
    {
      sub_10003AFE8((uint64_t)v7);
      sub_100504268(a1);
    }
  }
  else
  {
    unint64_t v5 = qword_100A19E68;
    if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Tried to resume a scan that wasn't paused!", buf, 2u);
    }
  }
  return sub_10003AFB4((uint64_t)v7);
}

void sub_100506854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100506870(uint64_t a1, uint64_t a2)
{
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 280);
  uint64_t v4 = qword_100A19E68;
  if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(int *)(a2 + 76);
    if (v5 > 3) {
      unint64_t v6 = 0;
    }
    else {
      unint64_t v6 = off_1009B33E8[v5];
    }
    *(_DWORD *)long long buf = 136446210;
    unint64_t v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%{public}s scan started", buf, 0xCu);
  }
  if (*(void *)(a1 + 344) == a2)
  {
    uint64_t v7 = *(void *)(a1 + 352);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
    }
  }
  sub_10003AFE8((uint64_t)v9);
  *(unsigned char *)(a1 + 185) = 1;
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009B3368);
  }
  sub_1004B5F60((uint64_t)off_1009F7EA8, 6);
  return sub_10003AFB4((uint64_t)v9);
}

void sub_1005069D8(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1005069F4(uint64_t a1, uint64_t a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1 + 280);
  if (*(void *)(a1 + 344))
  {
    uint64_t v4 = *(void *)(a1 + 352);
    if (v4) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 40))(v4, a2);
    }
  }
  sub_10003AFE8((uint64_t)v6);
  return sub_10003AFB4((uint64_t)v6);
}

void sub_100506A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100506A8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = qword_100A19E68;
  if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a2, __p);
    uint64_t v5 = v8 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)long long buf = 136446210;
    uint64_t v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending 'name changed' event for device %{public}s", buf, 0xCu);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  if (qword_1009F8090 != -1) {
    dispatch_once(&qword_1009F8090, &stru_1009B3388);
  }
  sub_1004D55B8((uint64_t)off_1009F8088, a2, 0xFFFFFFFFLL, 0, 701, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 8))(a1, a2);
}

uint64_t sub_100506BE0(uint64_t a1, uint64_t a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1 + 280);
  if (*(void *)(a1 + 344))
  {
    uint64_t v4 = *(void *)(a1 + 352);
    if (v4) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 32))(v4, a2);
    }
  }
  sub_10003AFE8((uint64_t)v6);
  return sub_10003AFB4((uint64_t)v6);
}

void sub_100506C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100506C78(uint64_t a1, uint64_t a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1 + 280);
  if (*(void *)(a1 + 344))
  {
    uint64_t v4 = *(void *)(a1 + 352);
    if (v4) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 48))(v4, a2);
    }
  }
  sub_10003AFE8((uint64_t)v6);
  return sub_10003AFB4((uint64_t)v6);
}

void sub_100506CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100506D10(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 112)) {
    goto LABEL_6;
  }
  if (qword_1009F8748 != -1) {
    dispatch_once(&qword_1009F8748, &stru_1009B33A8);
  }
  if (sub_100028CB4((uint64_t)off_1009F8740) == 1)
  {
    uint64_t v2 = sub_1004AF8EC();
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    void v3[2] = sub_100506DF4;
    void v3[3] = &unk_100997528;
    void v3[4] = a1;
    sub_100013018(v2, v3);
  }
  else
  {
LABEL_6:
    sub_100506DFC(a1);
  }
}

uint64_t sub_100506DF4(uint64_t a1)
{
  return sub_100506DFC(*(void *)(a1 + 32));
}

uint64_t sub_100506DFC(uint64_t a1)
{
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 280);
  uint64_t v2 = *(void *)(a1 + 352);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
    unsigned __int8 v3 = *(std::__shared_weak_count **)(a1 + 360);
    *(void *)(a1 + 352) = 0;
    *(void *)(a1 + 36sub_1004C2140(qword_100A19B68, 0) = 0;
    if (v3) {
      sub_10008A294(v3);
    }
  }
  uint64_t v4 = *(int **)(a1 + 344);
  uint64_t v5 = qword_100A19E68;
  if (v4)
  {
    if (!os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT)
      || ((uint64_t v6 = v4[19], v6 > 3) ? (v7 = 0) : (v7 = off_1009B33E8[v6]),
          *(_DWORD *)long long buf = 136446210,
          unint64_t v11 = v7,
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}s scan completed", buf, 0xCu),
          (uint64_t v4 = *(int **)(a1 + 344)) != 0))
    {
      (*(void (**)(int *))(*(void *)v4 + 8))(v4);
    }
    *(void *)(a1 + 344) = 0;
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Scan completed", buf, 2u);
  }
  sub_10003AFE8((uint64_t)v9);
  if (!sub_100504268(a1))
  {
    *(unsigned char *)(a1 + 185) = 0;
    if (qword_1009F7EB0 != -1) {
      dispatch_once(&qword_1009F7EB0, &stru_1009B3368);
    }
    sub_1004B5F60((uint64_t)off_1009F7EA8, 7);
  }
  return sub_10003AFB4((uint64_t)v9);
}

void sub_100506FE0(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100506FFC(uint64_t a1, uint64_t a2, _DWORD *a3, int a4)
{
  int v20 = 0;
  unsigned __int8 v19 = 0;
  v18[0] = 0;
  v18[1] = 0;
  sub_10003AED0((uint64_t)v18, a1 + 280);
  if (*(void *)(a1 + 344))
  {
    uint64_t v8 = *(void *)(a1 + 352);
    if (v8)
    {
      unsigned __int8 v19 = sub_100500A10(v8, a2, &v20, a4);
      if ((v19 & 1) == 0)
      {
        uint64_t v9 = sub_100035F54();
        if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 352))(v9) && *(_DWORD *)(a2 + 1508) == 2)
        {
          uint64_t v10 = qword_100A19E68;
          if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT))
          {
            sub_100474E18(a2, __p);
            if ((v17 & 0x80u) == 0) {
              unint64_t v11 = __p;
            }
            else {
              unint64_t v11 = (void **)__p[0];
            }
            *(_DWORD *)long long buf = 136446210;
            uint64_t v22 = v11;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Received LE CarPlay in EIR from %{public}s, ignore it", buf, 0xCu);
            if ((char)v17 < 0) {
              operator delete(__p[0]);
            }
          }
        }
        else
        {
          unsigned int v12 = *(_DWORD *)(*(void *)(a1 + 352) + 12) & 0xFFFFF7FF;
          if (qword_1009F8090 != -1) {
            dispatch_once(&qword_1009F8090, &stru_1009B3388);
          }
          sub_1004D80E4((uint64_t)off_1009F8088, a2, v12, &v19, &v20);
          if (v19)
          {
            sub_100475F84(a2, (uint64_t)__p);
            if ((v17 & 0x80u) == 0) {
              unint64_t v13 = v17;
            }
            else {
              unint64_t v13 = (unint64_t)__p[1];
            }
            if ((char)v17 < 0) {
              operator delete(__p[0]);
            }
            if (!v13) {
              v20 |= 4u;
            }
          }
        }
      }
    }
  }
  sub_10003AFE8((uint64_t)v18);
  *a3 = v20;
  uint64_t v14 = v19;
  sub_10003AFB4((uint64_t)v18);
  return v14;
}

void sub_10050721C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100507248(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1004AF8EC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1005072C8;
  void v5[3] = &unk_100998260;
  void v5[4] = a1;
  void v5[5] = a2;
  sub_100013018(v4, v5);
}

void sub_1005072C8(uint64_t a1)
{
}

void sub_1005072E0(uint64_t a1, unsigned int a2, unsigned __int8 *a3, int a4, int a5)
{
  long long v101 = a3;
  uint64_t v9 = sub_100035F54();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v9 + 648))(v9)) {
    return;
  }
  uint64_t v10 = qword_100A19E68;
  if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v11 = "unknown";
    unsigned int v12 = "unknown";
    if (a2 <= 2) {
      unsigned int v12 = off_1009B3408[a2];
    }
    int v13 = *(_DWORD *)(a1 + 480);
    if (v13 == 1) {
      unint64_t v11 = "SCAN_CORE_PAGE_SCAN_ENABLE";
    }
    if (!v13) {
      unint64_t v11 = "SCAN_CORE_PAGE_SCAN_IDLE";
    }
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v12;
    *(_WORD *)&unsigned char buf[12] = 2080;
    uint64_t v107 = (uint64_t)v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Received Scan Core Page Scan Request for event: %s, scanCorePageScanState: %s", buf, 0x16u);
  }
  if (*(unsigned char *)(a1 + 497))
  {
    int v14 = *(_DWORD *)(a1 + 500);
    a4 = *(_DWORD *)(a1 + 504);
    int v15 = *(unsigned __int8 *)(a1 + 508);
    int v16 = *(unsigned __int8 *)(a1 + 509);
    int v17 = *(unsigned __int8 *)(a1 + 510);
    int v18 = *(unsigned __int8 *)(a1 + 511);
    int v19 = *(unsigned __int8 *)(a1 + 512);
    int v20 = *(_DWORD *)(a1 + 516);
  }
  else
  {
    int v16 = 0;
    int v15 = 0;
    LOWORD(v14) = word_1007BF410[5 * a4];
    LOWORD(a4) = 18;
    int v19 = 1;
    LOBYTE(v2sub_1004C2140(qword_100A19B68, 0) = 50;
    int v18 = 1;
    int v17 = 1;
  }
  int v21 = *(_DWORD *)(a1 + 480);
  if (v21 == 1)
  {
    if (a2 == 2)
    {
      int v48 = v17;
      int v49 = v15;
      unsigned int v50 = qword_100A19E68;
      if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "Scan Core Page Scan timer expired. Clearing Scan Core Page Scan device set.", buf, 2u);
      }
      sub_1000486F0(a1 + 456, *(void **)(a1 + 464));
      *(void *)(a1 + 464) = 0;
      *(void *)(a1 + 472) = 0;
      *(void *)(a1 + 456) = a1 + 464;
      uint64_t v51 = sub_10003FB34();
      HIBYTE(v91) = v20;
      LOBYTE(v91) = v19 != 0;
      (*(void (**)(uint64_t, void, void, void, BOOL, BOOL, BOOL, BOOL, __int16))(*(void *)v51 + 3408))(v51, 0, (unsigned __int16)v14, (unsigned __int16)a4, v49 != 0, v16 != 0, v48 != 0, v18 != 0, v91);
      sub_100504B10(a1);
    }
    else
    {
      if (a2 != 1)
      {
        if (a2
          || !sub_100040630(v101)
          || sub_1004764A0((uint64_t)v101)
          || !sub_100478B2C((uint64_t)v101, 12))
        {
          return;
        }
        __int16 v32 = *(void **)(a1 + 464);
        if (!v32) {
          goto LABEL_60;
        }
        uint64_t v33 = a1 + 464;
        do
        {
          unint64_t v34 = v32[4];
          BOOL v35 = v34 >= (unint64_t)v101;
          if (v34 >= (unint64_t)v101) {
            uint64_t v36 = v32;
          }
          else {
            uint64_t v36 = v32 + 1;
          }
          if (v35) {
            uint64_t v33 = (uint64_t)v32;
          }
          __int16 v32 = (void *)*v36;
        }
        while (*v36);
        if (v33 != a1 + 464 && (unint64_t)v101 >= *(void *)(v33 + 32))
        {
          __int16 v82 = qword_100A19E68;
          if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT))
          {
            sub_100474E18((uint64_t)v101, buf);
            int v83 = v108[1] >= 0 ? buf : *(unsigned char **)buf;
            *(_DWORD *)long long v102 = 136315138;
            *(void *)&v102[4] = v83;
            _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEFAULT, "'%s' already present in Scan Core Page Scan device set.", v102, 0xCu);
            if ((v108[1] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
          }
        }
        else
        {
LABEL_60:
          if (sub_10048BC6C((uint64_t)v101) > 4)
          {
            int v70 = *(char *)(a1 + 496);
            int v71 = qword_100A19E68;
            BOOL v72 = os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT);
            if (a5 - v70 < 10)
            {
              if (v72)
              {
                sub_100474E18((uint64_t)v101, v102);
                if (v105 >= 0) {
                  char v79 = v102;
                }
                else {
                  char v79 = *(unsigned char **)v102;
                }
                char v80 = "unknown";
                int v81 = *(_DWORD *)(a1 + 480);
                if (v81 == 1) {
                  char v80 = "SCAN_CORE_PAGE_SCAN_ENABLE";
                }
                *(_DWORD *)long long buf = 136315650;
                *(void *)&uint8_t buf[4] = v79;
                *(_WORD *)&unsigned char buf[12] = 2080;
                uint64_t v107 = (uint64_t)"DEVICE_ADV_RECEIVED_EVENT";
                if (!v81) {
                  char v80 = "SCAN_CORE_PAGE_SCAN_IDLE";
                }
                *(_WORD *)long long v108 = 2080;
                *(void *)&v108[2] = v80;
                _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "Reached maximum Scan Core Page Scan retries for Device '%s', Event: %s, State: %s.", buf, 0x20u);
                if (v105 < 0) {
                  operator delete(*(void **)v102);
                }
              }
              if (!sub_10048C008((uint64_t)v101)) {
                goto LABEL_146;
              }
            }
            else
            {
              if (v72)
              {
                sub_100474E18((uint64_t)v101, v102);
                int v73 = v105 >= 0 ? v102 : *(unsigned char **)v102;
                *(_DWORD *)long long buf = 67109890;
                *(_DWORD *)&uint8_t buf[4] = a5;
                *(_WORD *)&uint8_t buf[8] = 1024;
                *(_DWORD *)&buf[10] = v70;
                uint64_t v107 = 0x8200000000A0400;
                *(void *)long long v108 = v73;
                _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "Difference between currentLEAdvRSSI: %d and previousLEAdvRSSI:%d is greater than %d dB for device '%s'", buf, 0x1Eu);
                if (v105 < 0) {
                  operator delete(*(void **)v102);
                }
              }
              BOOL v74 = sub_10048C008((uint64_t)v101);
              int v75 = v101;
              if (v74)
              {
                sub_10048BEB8((uint64_t)v101);
                int v75 = v101;
                ++*((_WORD *)v101 + 703);
              }
              sub_10048BC28((uint64_t)v75);
              sub_100051620((uint64_t **)(a1 + 456), (unint64_t *)&v101, (uint64_t *)&v101);
              sub_100504B10(a1);
              sub_100508410(a1, 60);
              sub_10048BBDC((uint64_t)v101);
            }
          }
          else
          {
            char v37 = qword_100A19E68;
            if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT))
            {
              sub_100474E18((uint64_t)v101, buf);
              long long v38 = v108[1] >= 0 ? buf : *(unsigned char **)buf;
              *(_DWORD *)long long v102 = 136315394;
              *(void *)&v102[4] = v38;
              __int16 v103 = 1024;
              int v104 = 60;
              _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "'%s' not present in Scan Core Page Scan device set. Inserting it and resetting timer for %d seconds.", v102, 0x12u);
              if ((v108[1] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
            }
            if (sub_10048BC6C((uint64_t)v101) <= 3) {
              *(unsigned char *)(a1 + 496) = a5;
            }
            sub_100051620((uint64_t **)(a1 + 456), (unint64_t *)&v101, (uint64_t *)&v101);
            sub_100504B10(a1);
            sub_100508410(a1, 60);
            sub_10048BBDC((uint64_t)v101);
          }
        }
        return;
      }
      int v100 = v17;
      int v52 = v15;
      unsigned __int16 v97 = v14;
      if (!sub_100478B2C((uint64_t)v101, 12)) {
        return;
      }
      sub_10048BC28((uint64_t)v101);
      if (sub_10048C008((uint64_t)v101))
      {
        sub_10048BEB8((uint64_t)v101);
        ++*((_WORD *)v101 + 703);
      }
      long long v53 = *(void **)(a1 + 464);
      if (!v53) {
        return;
      }
      int v54 = v19;
      unsigned int v55 = (uint64_t *)(a1 + 464);
      do
      {
        unint64_t v56 = v53[4];
        BOOL v57 = v56 >= (unint64_t)v101;
        if (v56 >= (unint64_t)v101) {
          long long v58 = v53;
        }
        else {
          long long v58 = v53 + 1;
        }
        if (v57) {
          unsigned int v55 = v53;
        }
        long long v53 = (void *)*v58;
      }
      while (*v58);
      if (v55 == (uint64_t *)(a1 + 464) || (unint64_t)v101 < v55[4]) {
        return;
      }
      log = qword_100A19E68;
      if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18((uint64_t)v101, buf);
        if (v108[1] >= 0) {
          long long v59 = buf;
        }
        else {
          long long v59 = *(unsigned char **)buf;
        }
        *(_DWORD *)long long v102 = 136315138;
        *(void *)&v102[4] = v59;
        _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEFAULT, "'%s' connected. Removing it from Scan Core Page Scan device set.", v102, 0xCu);
        if ((v108[1] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        int v54 = v19;
      }
      sub_10004D3B8((uint64_t **)(a1 + 456), v55);
      operator delete(v55);
      ++*((_WORD *)v101 + 705);
      if (*(void *)(a1 + 472)) {
        return;
      }
      long long v60 = qword_100A19E68;
      if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "Scan Core Page Scan device list is empty.", buf, 2u);
      }
      uint64_t v61 = sub_10003FB34();
      HIBYTE(v92) = v20;
      LOBYTE(v92) = v54 != 0;
      (*(void (**)(uint64_t, void, void, void, BOOL, BOOL, BOOL, BOOL, __int16))(*(void *)v61 + 3408))(v61, 0, v97, (unsigned __int16)a4, v52 != 0, v16 != 0, v100 != 0, v18 != 0, v92);
      sub_100504B10(a1);
    }
    sub_100508564(a1, 0);
    return;
  }
  int v98 = v15;
  int v99 = v17;
  if (v21) {
    return;
  }
  switch(a2)
  {
    case 2u:
      long long v39 = qword_100A19E68;
      if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_FAULT)) {
        sub_100774268(v39);
      }
      break;
    case 1u:
      unsigned __int8 v40 = *(void **)(a1 + 464);
      long long v41 = v101;
      if (v40)
      {
        uint64_t v42 = a1 + 464;
        do
        {
          unint64_t v43 = v40[4];
          BOOL v44 = v43 >= (unint64_t)v101;
          if (v43 >= (unint64_t)v101) {
            unsigned int v45 = v40;
          }
          else {
            unsigned int v45 = v40 + 1;
          }
          if (v44) {
            uint64_t v42 = (uint64_t)v40;
          }
          unsigned __int8 v40 = (void *)*v45;
        }
        while (*v45);
        if (v42 != a1 + 464 && (unint64_t)v101 >= *(void *)(v42 + 32))
        {
          char v46 = qword_100A19E68;
          if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_FAULT))
          {
            sub_100474E18((uint64_t)v101, v102);
            if (v105 >= 0) {
              int v87 = v102;
            }
            else {
              int v87 = *(unsigned char **)v102;
            }
            uint64_t v88 = "unknown";
            int v89 = *(_DWORD *)(a1 + 480);
            if (v89 == 1) {
              uint64_t v88 = "SCAN_CORE_PAGE_SCAN_ENABLE";
            }
            *(_DWORD *)long long buf = 136315650;
            *(void *)&uint8_t buf[4] = v87;
            *(_WORD *)&unsigned char buf[12] = 2080;
            uint64_t v107 = (uint64_t)"DEVICE_CONNECTED_EVENT";
            if (!v89) {
              uint64_t v88 = "SCAN_CORE_PAGE_SCAN_IDLE";
            }
            *(_WORD *)long long v108 = 2080;
            *(void *)&v108[2] = v88;
            _os_log_fault_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_FAULT, "'%s' present in Scan Core Page Scan device set. Event: %s, State: %s.", buf, 0x20u);
            if (v105 < 0) {
              operator delete(*(void **)v102);
            }
            long long v41 = v101;
          }
        }
      }
      sub_10048BC28((uint64_t)v41);
      long long v47 = v101;
      ++*((_WORD *)v101 + 706);
      if (sub_10048C008((uint64_t)v47))
      {
        sub_10048BEB8((uint64_t)v101);
        ++*((_WORD *)v101 + 703);
      }
      break;
    case 0u:
      uint64_t v22 = *(void **)(a1 + 464);
      char v23 = v101;
      if (v22)
      {
        uint64_t v24 = a1 + 464;
        do
        {
          unint64_t v25 = v22[4];
          BOOL v26 = v25 >= (unint64_t)v101;
          if (v25 >= (unint64_t)v101) {
            int v27 = v22;
          }
          else {
            int v27 = v22 + 1;
          }
          if (v26) {
            uint64_t v24 = (uint64_t)v22;
          }
          uint64_t v22 = (void *)*v27;
        }
        while (*v27);
        if (v24 != a1 + 464 && (unint64_t)v101 >= *(void *)(v24 + 32))
        {
          long long v96 = qword_100A19E68;
          if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_FAULT))
          {
            sub_100474E18((uint64_t)v101, v102);
            __int16 v84 = v102;
            if (v105 < 0) {
              __int16 v84 = *(unsigned char **)v102;
            }
            int v85 = "unknown";
            int v86 = *(_DWORD *)(a1 + 480);
            if (v86 == 1) {
              int v85 = "SCAN_CORE_PAGE_SCAN_ENABLE";
            }
            *(_DWORD *)long long buf = 136315650;
            *(void *)&uint8_t buf[4] = v84;
            *(_WORD *)&unsigned char buf[12] = 2080;
            uint64_t v107 = (uint64_t)"DEVICE_ADV_RECEIVED_EVENT";
            if (!v86) {
              int v85 = "SCAN_CORE_PAGE_SCAN_IDLE";
            }
            *(_WORD *)long long v108 = 2080;
            *(void *)&v108[2] = v85;
            _os_log_fault_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_FAULT, "'%s' present in Scan Core Page Scan device set. Event: %s, State: %s.", buf, 0x20u);
            if (v105 < 0) {
              operator delete(*(void **)v102);
            }
            char v23 = v101;
          }
        }
      }
      if (sub_100040630(v23))
      {
        int v28 = v19;
        if (!sub_1004764A0((uint64_t)v101))
        {
          if (sub_100478B2C((uint64_t)v101, 12))
          {
            long long v95 = (uint64_t **)(a1 + 456);
            if (sub_10048BC6C((uint64_t)v101) <= 4)
            {
              __int16 v29 = qword_100A19E68;
              if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT))
              {
                sub_100474E18((uint64_t)v101, buf);
                uint64_t v30 = v108[1] >= 0 ? buf : *(unsigned char **)buf;
                *(_DWORD *)long long v102 = 136315138;
                *(void *)&v102[4] = v30;
                _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Adding '%s' into Scan Core Page Scan device set.", v102, 0xCu);
                if ((v108[1] & 0x80000000) != 0) {
                  operator delete(*(void **)buf);
                }
              }
              if (sub_10048BC6C((uint64_t)v101) <= 3) {
                *(unsigned char *)(a1 + 496) = a5;
              }
              sub_100051620(v95, (unint64_t *)&v101, (uint64_t *)&v101);
              uint64_t v31 = sub_10003FB34();
              HIBYTE(v9sub_1004C2140(qword_100A19B68, 0) = v20;
              LOBYTE(v9sub_1004C2140(qword_100A19B68, 0) = v28 != 0;
              (*(void (**)(uint64_t, uint64_t, void, void, BOOL, BOOL, BOOL, BOOL, __int16))(*(void *)v31 + 3408))(v31, 1, (unsigned __int16)v14, (unsigned __int16)a4, v98 != 0, v16 != 0, v99 != 0, v18 != 0, v90);
              sub_100508410(a1, 60);
              sub_100508564(a1, 1);
              sub_10048BBDC((uint64_t)v101);
              ++*((_WORD *)v101 + 694);
              return;
            }
            int v62 = *(char *)(a1 + 496);
            long long v63 = qword_100A19E68;
            BOOL v64 = os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT);
            if (a5 - v62 >= 10)
            {
              if (v64)
              {
                sub_100474E18((uint64_t)v101, v102);
                long long v65 = v105 >= 0 ? v102 : *(unsigned char **)v102;
                *(_DWORD *)long long buf = 67109890;
                *(_DWORD *)&uint8_t buf[4] = a5;
                *(_WORD *)&uint8_t buf[8] = 1024;
                *(_DWORD *)&buf[10] = v62;
                uint64_t v107 = 0x8200000000A0400;
                *(void *)long long v108 = v65;
                _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "Difference between currentLEAdvRSSI: %d and previousLEAdvRSSI:%d is greater than %d dB for device '%s'", buf, 0x1Eu);
                if (v105 < 0) {
                  operator delete(*(void **)v102);
                }
              }
              BOOL v66 = sub_10048C008((uint64_t)v101);
              uint64_t v67 = v101;
              if (v66)
              {
                sub_10048BEB8((uint64_t)v101);
                uint64_t v67 = v101;
                ++*((_WORD *)v101 + 703);
              }
              sub_10048BC28((uint64_t)v67);
              sub_100051620(v95, (unint64_t *)&v101, (uint64_t *)&v101);
              uint64_t v68 = sub_10003FB34();
              HIBYTE(v93) = v20;
              LOBYTE(v93) = v28 != 0;
              (*(void (**)(uint64_t, uint64_t, void, void, BOOL, BOOL, BOOL, BOOL, __int16))(*(void *)v68 + 3408))(v68, 1, (unsigned __int16)v14, (unsigned __int16)a4, v98 != 0, v16 != 0, v99 != 0, v18 != 0, v93);
              sub_100508410(a1, 60);
              sub_100508564(a1, 1);
              sub_10048BBDC((uint64_t)v101);
              int v69 = v101;
              ++*((_WORD *)v101 + 694);
              ++*((_WORD *)v69 + 701);
              return;
            }
            if (v64)
            {
              sub_100474E18((uint64_t)v101, v102);
              if (v105 >= 0) {
                int v76 = v102;
              }
              else {
                int v76 = *(unsigned char **)v102;
              }
              uint64_t v77 = "unknown";
              int v78 = *(_DWORD *)(a1 + 480);
              if (v78 == 1) {
                uint64_t v77 = "SCAN_CORE_PAGE_SCAN_ENABLE";
              }
              *(_DWORD *)long long buf = 136315650;
              *(void *)&uint8_t buf[4] = v76;
              *(_WORD *)&unsigned char buf[12] = 2080;
              uint64_t v107 = (uint64_t)"DEVICE_ADV_RECEIVED_EVENT";
              if (!v78) {
                uint64_t v77 = "SCAN_CORE_PAGE_SCAN_IDLE";
              }
              *(_WORD *)long long v108 = 2080;
              *(void *)&v108[2] = v77;
              _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "Reached max Scan Core Page Scan retries for Device '%s', Event: %s, State: %s.", buf, 0x20u);
              if (v105 < 0) {
                operator delete(*(void **)v102);
              }
            }
            if (!sub_10048C008((uint64_t)v101)) {
LABEL_146:
            }
              sub_10048BCB4((uint64_t)v101);
          }
        }
      }
      break;
  }
}

void sub_100508200(uint64_t a1, uint64_t a2)
{
}

void sub_100508208(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  int v8 = *(char *)(*(void *)(a4 + 8) + 216);
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B32B0);
  }
  if ((sub_1004E1EE0((uint64_t)off_1009F8068) & 1) != 0
    || (uint64_t v9 = *(void *)(a4 + 8), !*(unsigned char *)(v9 + 363))
    || *(unsigned char *)(v9 + 217)
    || v8 < -85)
  {
    if (v8 <= -85)
    {
      if (qword_1009F7F00 != -1) {
        dispatch_once(&qword_1009F7F00, &stru_1009B33C8);
      }
      uint64_t v11 = sub_100030F10((uint64_t)off_1009F7EF8, a2, 0);
      if (v11) {
        ++*(_WORD *)(v11 + 1404);
      }
    }
  }
  else
  {
    uint64_t v10 = sub_1004AF8EC();
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_100508374;
    v12[3] = &unk_1009A0160;
    uint8_t v12[4] = a1;
    void v12[5] = a2;
    char v13 = v8;
    sub_100013018(v10, v12);
  }
}

void sub_100508360(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100508374(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009B33C8);
  }
  unsigned __int8 v3 = (unsigned __int8 *)sub_100030F10((uint64_t)off_1009F7EF8, *(void *)(a1 + 40), 0);
  if (v3)
  {
    int v4 = *(char *)(a1 + 48);
    sub_1005072E0(v2, 0, v3, 1, v4);
  }
}

void sub_100508408(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
}

uint64_t sub_100508410(uint64_t a1, uint64_t a2)
{
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, a1 + 392);
  int v4 = *(NSObject **)(a1 + 488);
  if (v4
    || (uint64_t v5 = sub_1004AF8EC(),
        v6 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(v5 + 8)), *(void *)(a1 + 488) = v6, dispatch_source_set_event_handler(v6, &stru_1009B3250), (int v4 = *(NSObject **)(a1 + 488)) != 0))
  {
    id v7 = qword_100A19E68;
    if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Start Scan Core Page Scan timer of %llu seconds", buf, 0xCu);
      int v4 = *(NSObject **)(a1 + 488);
    }
    dispatch_time_t v8 = dispatch_time(0, 1000000000 * a2);
    dispatch_source_set_timer(v4, v8, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_resume(*(dispatch_object_t *)(a1 + 488));
  }
  return sub_10003AFB4((uint64_t)v10);
}

void sub_100508548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100508564(uint64_t a1, int a2)
{
  int v4 = qword_100A19E68;
  if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = "unknown";
    int v6 = *(_DWORD *)(a1 + 480);
    if (v6 == 1) {
      id v7 = "SCAN_CORE_PAGE_SCAN_ENABLE";
    }
    else {
      id v7 = "unknown";
    }
    if (v6) {
      dispatch_time_t v8 = v7;
    }
    else {
      dispatch_time_t v8 = "SCAN_CORE_PAGE_SCAN_IDLE";
    }
    if (a2 == 1) {
      uint64_t v5 = "SCAN_CORE_PAGE_SCAN_ENABLE";
    }
    if (!a2) {
      uint64_t v5 = "SCAN_CORE_PAGE_SCAN_IDLE";
    }
    int v9 = 136315394;
    uint64_t v10 = v8;
    __int16 v11 = 2080;
    uint64_t v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Scan Core Page Scan State:  %s => %s", (uint8_t *)&v9, 0x16u);
  }
  *(_DWORD *)(a1 + 48sub_1004C2140(qword_100A19B68, 0) = a2;
}

void sub_100508660(id a1)
{
  uint64_t v1 = sub_1004AF8EC();

  sub_100013018(v1, &stru_1009B3270);
}

uint64_t sub_100508690(uint64_t a1, int a2, unsigned int a3)
{
  unsigned int v36 = a3;
  v35[0] = 0;
  v35[1] = 0;
  sub_10003AED0((uint64_t)v35, a1 + 520);
  int v34 = 0;
  *(void *)long long buf = &v36;
  *((_DWORD *)sub_1002EE82C((uint64_t **)(a1 + 584), (int *)&v36, (uint64_t)&unk_1007BE9D0, (unsigned int **)buf) + 8) = a2;
  uint64_t v5 = qword_100A19E68;
  if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT))
  {
    if (v36 > 3) {
      int v6 = "unknown";
    }
    else {
      int v6 = off_1009B3420[v36];
    }
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v6;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&unsigned char buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Event \"%s\" is requesting to set Device Connectability Speed Scenario to %d", buf, 0x12u);
  }
  char v37 = 0;
  sub_10001B8E0(&v37);
  uint64_t v7 = sub_100183AD4(&v34);
  sub_10001B910(&v37);
  if (v7)
  {
    dispatch_time_t v8 = qword_100A19E68;
    if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_ERROR)) {
      sub_10077436C(v7, v8, v9, v10, v11, v12, v13, v14);
    }
  }
  else
  {
    int v15 = *(void **)(a1 + 584);
    int v16 = (void *)(a1 + 592);
    int v17 = a2;
    if (v15 != v16)
    {
      int v17 = a2;
      do
      {
        if (*((_DWORD *)v15 + 8) > v17) {
          int v17 = *((_DWORD *)v15 + 8);
        }
        int v18 = (void *)v15[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            int v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v15[2];
            BOOL v20 = *v19 == (void)v15;
            int v15 = v19;
          }
          while (!v20);
        }
        int v15 = v19;
      }
      while (v19 != v16);
    }
    int v21 = v34;
    uint64_t v22 = qword_100A19E68;
    BOOL v23 = os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT);
    if (v21 == v17)
    {
      if (v23)
      {
        if (v36 > 3) {
          uint64_t v24 = "unknown";
        }
        else {
          uint64_t v24 = off_1009B3420[v36];
        }
        *(_DWORD *)long long buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = a2;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = v24;
        __int16 v39 = 1024;
        int v40 = v17;
        __int16 v41 = 1024;
        int v42 = v17;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Did not set Device Connectability Speed Scenario to %d for event \"%s\". fastestScenario: %d, Current Scenario: %d", buf, 0x1Eu);
      }
    }
    else
    {
      if (v23)
      {
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v17;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Setting Device Connectability Speed Scenario: %d", buf, 8u);
      }
      sub_1002B804C(&v37);
      uint64_t v25 = sub_100183B0C((uint64_t (*)(void, void))sub_1005089C0, v17);
      sub_10001B910(&v37);
      if (v25)
      {
        BOOL v26 = qword_100A19E68;
        if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_ERROR)) {
          sub_100774300(v25, v26, v27, v28, v29, v30, v31, v32);
        }
      }
    }
  }
  sub_10001B8AC(&v37);
  return sub_10003AFB4((uint64_t)v35);
}

void sub_100508990(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1005089C0(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = qword_100A19E68;
    if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_ERROR)) {
      sub_1007743D8(a1, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

void sub_100508A14(uint64_t a1)
{
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009B3290);
  }
  sub_100457490(qword_1009F8160 + 8, a1 + 8);
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B32B0);
  }
  uint64_t v2 = (char *)off_1009F8068 + 64;

  sub_10026B36C((uint64_t)v2, a1 + 32);
}

void sub_100508AB8(uint64_t a1)
{
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009B3290);
  }
  sub_100052718(qword_1009F8160 + 8, a1 + 8);
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B32B0);
  }
  uint64_t v2 = (char *)off_1009F8068 + 64;

  sub_100052718((uint64_t)v2, a1 + 32);
}

uint64_t sub_100508B5C(uint64_t result, uint64_t a2, int a3)
{
  if (!a3) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_100508B8C(uint64_t a1, int a2)
{
  if (a2) {
    return sub_100506524(a1);
  }
  else {
    return sub_100506718(a1);
  }
}

uint64_t sub_100508BA0(uint64_t result, uint64_t a2, int a3)
{
  if (!a3) {
    return (*(uint64_t (**)(void))(*(void *)(result - 16) + 8))();
  }
  return result;
}

uint64_t sub_100508BD0(uint64_t a1, int a2)
{
  uint64_t v2 = a1 - 24;
  if (a2) {
    return sub_100506524(v2);
  }
  else {
    return sub_100506718(v2);
  }
}

void sub_100508BE4(id a1)
{
  if (qword_1009F8398 != -1) {
    dispatch_once(&qword_1009F8398, &stru_1009B32D0);
  }
  uint64_t v1 = off_1009F8390;

  sub_1005072E0((uint64_t)v1, 2u, 0, 1, 0);
}

void sub_100508C48(id a1)
{
}

void sub_100508C8C()
{
}

void sub_100508CB0(id a1)
{
}

void sub_100508CF4()
{
}

void sub_100508D18(id a1)
{
}

void sub_100508D5C()
{
}

void sub_100508D80(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100508D80(a1, *a2);
    sub_100508D80(a1, a2[1]);
    uint64_t v4 = (std::__shared_weak_count *)a2[6];
    if (v4) {
      sub_10008A294(v4);
    }
    operator delete(a2);
  }
}

void sub_100508DE0(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_100508E34((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_100508E34(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      sub_10008A294(v4);
    }
  }
  a1[1] = v2;
}

void sub_100508E80(id a1)
{
}

void sub_100508EC4()
{
}

void sub_100508EE8(id a1)
{
}

void sub_100508F2C()
{
}

void *sub_100508F50@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x150uLL);
  uint64_t result = sub_100508F9C(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100508F88(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100508F9C(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1009B3340;
  sub_100500820((uint64_t)(a1 + 3));
  return a1;
}

void sub_100508FE4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100508FF8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1009B3340;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100509018(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1009B3340;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10050906C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t *sub_100509094(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (uint64_t *)operator new(0x38uLL);
    uint8_t v11[4] = **a4;
    void v11[5] = 0;
    void v11[6] = 0;
    sub_100036CA0(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t *sub_100509158(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = sub_10004D3B8(a1, a2);
  uint64_t v4 = (std::__shared_weak_count *)a2[6];
  if (v4) {
    sub_10008A294(v4);
  }
  operator delete(a2);
  return v3;
}

void sub_100509198(id a1)
{
}

void sub_1005091DC()
{
}

uint64_t *sub_100509200(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    long long v5 = *(_OWORD *)(v2 - 24);
    v2 -= 24;
    *(_OWORD *)(v4 - 24) = v5;
    v4 -= 24;
    *(void *)(v4 + 16) = *(void *)(v2 + 16);
    *(void *)(v2 + 8) = 0;
    *(void *)(v2 + 16) = 0;
  }
  a2[1] = v4;
  uint64_t v6 = *result;
  *uint64_t result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void **sub_100509264(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100509298(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 24;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      sub_10008A294(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 24;
    }
  }
}

uint64_t sub_1005092EC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      *(void *)(v8 + 16) = *(void *)(v9 + 16);
      *(void *)(v9 + 8) = 0;
      *(void *)(v9 + 16) = 0;
      v8 += 24;
      v9 += 24;
    }
    while (v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_100509578((uint64_t)&v11, a2, v7, v6);
}

void *sub_100509360(void *result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = result[2];
  if (v4 == result[3])
  {
    unint64_t v5 = result[1];
    if (v5 <= *result)
    {
      if (v4 == *result) {
        unint64_t v10 = 1;
      }
      else {
        unint64_t v10 = 0x5555555555555556 * ((v4 - *result) >> 3);
      }
      unint64_t v11 = v10 >> 2;
      uint64_t v12 = result[4];
      uint64_t v26 = v3[4];
      uint64_t v13 = (char *)sub_1002B3440(v12, v10);
      int v15 = &v13[24 * v11];
      unint64_t v16 = v3[1];
      unint64_t v17 = v3[2] - v16;
      if (v17)
      {
        int v18 = &v15[v17];
        int v19 = &v13[24 * v11];
        do
        {
          *(_OWORD *)int v19 = *(_OWORD *)v16;
          *((void *)v19 + 2) = *(void *)(v16 + 16);
          *(void *)(v16 + 8) = 0;
          *(void *)(v16 + 16) = 0;
          v19 += 24;
          v16 += 24;
        }
        while (v19 != v18);
        int64x2_t v20 = *(int64x2_t *)(v3 + 1);
      }
      else
      {
        int64x2_t v20 = vdupq_n_s64(v16);
        int v18 = &v13[24 * v11];
      }
      BOOL v23 = (void *)*v3;
      void *v3 = v13;
      v3[1] = v15;
      int64x2_t v24 = v20;
      uint64_t v21 = v3[3];
      void v3[2] = v18;
      void v3[3] = &v13[24 * v14];
      uint64_t v25 = v21;
      uint64_t result = sub_100509264(&v23);
      uint64_t v4 = v3[2];
    }
    else
    {
      int64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *result) >> 3);
      if (v6 >= -1) {
        uint64_t v7 = v6 + 1;
      }
      else {
        uint64_t v7 = v6 + 2;
      }
      uint64_t v8 = -3 * (v7 >> 1);
      uint64_t result = (void *)sub_1005095E4((uint64_t)&v23, v5, v4, v5 - 24 * (v7 >> 1));
      uint64_t v4 = v9;
      v3[1] += 8 * v8;
      void v3[2] = v9;
    }
  }
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  uint64_t v22 = *(void *)(a2 + 16);
  *(void *)(v4 + 16) = v22;
  if (v22)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
    uint64_t v4 = v3[2];
  }
  void v3[2] = v4 + 24;
  return result;
}

uint64_t sub_1005094C4(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t result = a2[1];
  uint64_t v5 = *a1;
  uint64_t v6 = result;
  if (*a1 != a3)
  {
    uint64_t v7 = a3;
    uint64_t v6 = a2[1];
    do
    {
      long long v8 = *(_OWORD *)(v7 - 24);
      v7 -= 24;
      *(_OWORD *)(v6 - 24) = v8;
      v6 -= 24;
      *(void *)(v6 + 16) = *(void *)(v7 + 16);
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  uint64_t v9 = a1[1];
  uint64_t v10 = a2[2];
  if (v9 != a3)
  {
    do
    {
      *(_OWORD *)uint64_t v10 = *(_OWORD *)a3;
      *(void *)(v10 + 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      v10 += 24;
      a3 += 24;
    }
    while (a3 != v9);
    uint64_t v6 = a2[1];
  }
  a2[2] = v10;
  uint64_t v11 = *a1;
  *a1 = v6;
  a2[1] = v11;
  uint64_t v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100509578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = a3;
    do
    {
      uint64_t v8 = *(void *)(v7 - 24);
      v7 -= 24;
      *(void *)(a4 - 24) = v8;
      a4 -= 24;
      long long v9 = *(_OWORD *)(v7 + 8);
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
      uint64_t v10 = *(std::__shared_weak_count **)(a4 + 16);
      *(_OWORD *)(a4 + 8) = v9;
      if (v10) {
        sub_10008A294(v10);
      }
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t sub_1005095E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    *(void *)a4 = *(void *)v5;
    long long v7 = *(_OWORD *)(v5 + 8);
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0;
    uint64_t v8 = *(std::__shared_weak_count **)(a4 + 16);
    *(_OWORD *)(a4 + 8) = v7;
    if (v8) {
      sub_10008A294(v8);
    }
    a4 += 24;
    v5 += 24;
  }
  while (v5 != v6);
  return v6;
}

void sub_10050965C(id a1)
{
}

void sub_1005096A0()
{
}

void sub_1005096C4(id a1)
{
}

void sub_100509708()
{
}

void sub_10050972C(id a1)
{
}

void sub_100509770()
{
}

NSObject **sub_100509794(NSObject **a1)
{
  a1[1] = os_nexus_controller_create();
  uint64_t v2 = os_log_create("com.apple.bluetooth", "BTAudioSkywalk");
  uint64_t v3 = v2;
  *a1 = v2;
  if (a1[1])
  {
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v5[0]) = 134219008;
      *(void *)((char *)v5 + 4) = 2048;
      WORD2(v5[1]) = 2048;
      *(void *)((char *)&v5[1] + 6) = 1;
      HIWORD(v5[2]) = 2048;
      void v5[3] = 1;
      LOWORD(v5[4]) = 2048;
      *(void *)((char *)&v5[4] + 2) = 8;
      WORD1(v5[5]) = 2048;
      *(void *)((char *)&v5[5] + 4) = 8;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Creating skywalk nexus with NEXUS_ATTR_SLOT_BUF_SIZE: %llu, NEXUS_ATTR_RX_RINGS: %llu, NEXUS_ATTR_TX_RINGS: %llu, NEXUS_ATTR_TX_SLOTS: %llu, NEXUS_ATTR_RX_SLOTS: %llu", (uint8_t *)v5, 0x34u);
    }
    os_nexus_attr_create();
    os_nexus_attr_set();
    os_nexus_attr_set();
    os_nexus_attr_set();
    os_nexus_attr_set();
    os_nexus_attr_set();
    os_nexus_attr_set();
    strcpy((char *)v5, "com.apple.bluetooth.AudioPipe");
    HIWORD(v5[3]) = 0;
    memset(&v5[4], 0, 32);
    os_nexus_controller_register_provider();
    os_nexus_attr_destroy();
  }
  else if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    sub_100774444();
  }
  return a1;
}

uint64_t sub_100509948(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)a1 = off_1009B3450;
  *(void *)(a1 + 8) = -1;
  *(void *)(a1 + 20sub_1004C2140(qword_100A19B68, 0) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 208) = a3;
  mach_timebase_info((mach_timebase_info_t)(a1 + 192));
  *(void *)(a1 + 20sub_1004C2140(qword_100A19B68, 0) = a2;
  *(void *)(a1 + 16) = os_log_create("com.apple.bluetooth", "BTAudioSkywalk");
  return a1;
}

void sub_1005099D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1005099F4(uint64_t a1)
{
  *(void *)a1 = off_1009B3450;
  uint64_t v2 = *(NSObject **)(a1 + 16);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v9.ident) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tearing down AudioSkywalkPipe", (uint8_t *)&v9, 2u);
  }
  atomic_store(1u, (unsigned __int8 *)(a1 + 144));
  int v3 = *(_DWORD *)(a1 + 12);
  if (v3 != -1 || *(_DWORD *)(a1 + 8) != -1)
  {
    v9.ident = a1 + 144;
    *(void *)&v9.filter = 0x10000000000FFF6;
    v9.int data = 0;
    v9.uint data = 0;
    kevent(v3, &v9, 1, 0, 0, 0);
    kevent(*(_DWORD *)(a1 + 8), &v9, 1, 0, 0, 0);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 32));
    while (!atomic_load((unsigned __int8 *)(a1 + 145)))
      pthread_cond_wait((pthread_cond_t *)(a1 + 96), (pthread_mutex_t *)(a1 + 32));
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 32));
    pthread_cond_destroy((pthread_cond_t *)(a1 + 96));
    pthread_mutex_destroy((pthread_mutex_t *)(a1 + 32));
    int v5 = *(_DWORD *)(a1 + 8);
    if (v5 != -1) {
      close(v5);
    }
  }
  int v6 = *(_DWORD *)(a1 + 12);
  if (v6 != -1) {
    close(v6);
  }
  if (*(void *)(a1 + 176)) {
    os_channel_destroy();
  }
  long long v7 = *(NSObject **)(a1 + 16);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v9.ident) = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "AudioSkywalkPipe torn down", (uint8_t *)&v9, 2u);
  }

  return a1;
}

void sub_100509BAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100509BDC(uint64_t a1)
{
  sub_1005099F4(a1);

  operator delete();
}

void sub_100509C14(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a4;
  id v8 = a3;
  id v9 = objc_retainBlock(a2);
  uint64_t v10 = *(void **)(a1 + 152);
  *(void *)(a1 + 152) = v9;

  id v11 = objc_retainBlock(v8);
  uint64_t v12 = *(void **)(a1 + 160);
  *(void *)(a1 + 16sub_1004C2140(qword_100A19B68, 0) = v11;

  id v13 = objc_retainBlock(v7);
  uint64_t v14 = *(void **)(a1 + 168);
  *(void *)(a1 + 168) = v13;

  atomic_store(0, (unsigned __int8 *)(a1 + 144));
  atomic_store(0, (unsigned __int8 *)(a1 + 145));
  if (*(void *)(a1 + 152)) {
    *(_DWORD *)(a1 + 12) = kqueue();
  }
  if (*(void *)(a1 + 160)) {
    *(_DWORD *)(a1 + 8) = kqueue();
  }
  uint64_t fd = os_channel_get_fd();
  v17.ident = (int)__chkstk_darwin(fd, v16);
  *(_DWORD *)&v17.filter = 393215;
  memset(&v17.fflags, 0, 20);
  uint64_t v18 = a1 + 144;
  int v19 = 393206;
  uint64_t v21 = 0;
  uint64_t v20 = 0;
  int v22 = 0;
  if (kevent(*(_DWORD *)(a1 + 12), &v17, 2, 0, 0, 0) == -1)
  {
    if (os_log_type_enabled(*(os_log_t *)(a1 + 16), OS_LOG_TYPE_ERROR)) {
      sub_100774478();
    }
  }
  else if (*(void *)(a1 + 152))
  {
    pthread_mutex_init((pthread_mutex_t *)(a1 + 32), 0);
    pthread_cond_init((pthread_cond_t *)(a1 + 96), 0);
    memset(&v23, 0, sizeof(v23));
    pthread_attr_init(&v23);
    pthread_attr_setdetachstate(&v23, 2);
    pthread_create((pthread_t *)(a1 + 24), &v23, (void *(__cdecl *)(void *))sub_100509E08, (void *)a1);
  }
}

uint64_t sub_100509E08(uint64_t a1)
{
  pthread_setname_np("AudioSkywalkPipeReadLoop");
  uint64_t v2 = os_log_create("com.apple.bluetooth", "BTAudioSkywalk");
  int v3 = v2;
  uint64_t v4 = *(void *)(a1 + 200);
  if (!v4)
  {
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_1007744AC(v3);
    }
    uint64_t v4 = 22000;
    *(void *)(a1 + 20sub_1004C2140(qword_100A19B68, 0) = 22000;
  }
  unint64_t v5 = 1000 * v4 * (unint64_t)*(unsigned int *)(a1 + 196) / *(unsigned int *)(a1 + 192);
  integer_t policy_info = v5;
  int v16 = v5 >> 2;
  int v17 = v16;
  int v18 = 0;
  thread_act_t v6 = mach_thread_self();
  thread_policy_set(v6, 2u, &policy_info, 4u);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v14.ident) = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Starting AudioSkywalk read loop", (uint8_t *)&v14, 2u);
  }
  mach_absolute_time();
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  id v7 = (void *)(a1 + 216);
  if (!atomic_load((unsigned __int8 *)(a1 + 144)))
  {
    unint64_t v9 = 20000000 * (unint64_t)*(unsigned int *)(a1 + 196) / *(unsigned int *)(a1 + 192);
    do
    {
      memset(&v14, 0, sizeof(v14));
      kevent(*(_DWORD *)(a1 + 12), 0, 0, &v14, 1, 0);
      if (v14.filter != -1) {
        break;
      }
      uint64_t v10 = mach_absolute_time();
      uint64_t v11 = v10;
      if (*v7 && *(void *)(a1 + 224) && v10 > *v7 + v9) {
        (*(void (**)(void))(*(void *)(a1 + 168) + 16))();
      }
      sub_10050A074(a1);
      *(void *)(a1 + 216) = v11 + v5;
      *(void *)(a1 + 224) = v11;
    }
    while (!atomic_load((unsigned __int8 *)(a1 + 144)));
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v14.ident) = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Stopping AudioSkywalk read loop", (uint8_t *)&v14, 2u);
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 32));
  atomic_store(1u, (unsigned __int8 *)(a1 + 145));
  pthread_cond_signal((pthread_cond_t *)(a1 + 96));
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 32));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v14.ident) = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "AudioSkywalk read loop stopped", (uint8_t *)&v14, 2u);
  }
  return 0;
}

void sub_10050A074(uint64_t a1)
{
  if (*(void *)(a1 + 176))
  {
    os_channel_ring_id();
    os_channel_rx_ring();
    if (os_channel_get_next_slot())
    {
      if (*(unsigned char *)(a1 + 208))
      {
        if (os_log_type_enabled(*(os_log_t *)(a1 + 16), OS_LOG_TYPE_DEBUG)) {
          sub_10077455C();
        }
      }
      (*(void (**)(void, void))(*(void *)(a1 + 152) + 16))(*(void *)(a1 + 152), 0);
      os_channel_get_next_slot();
      os_channel_advance_slot();
    }
    os_channel_sync();
  }
  else if (os_log_type_enabled(*(os_log_t *)(a1 + 16), OS_LOG_TYPE_ERROR))
  {
    sub_100774528();
  }
}

uint64_t sub_10050A178(uint64_t result)
{
  *(void *)(result + 216) = 0;
  return result;
}

uint64_t sub_10050A180(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  thread_act_t v6 = (void *)sub_100509948(a1, a3, a4);
  *thread_act_t v6 = off_1009B3470;
  v6[30] = 0;
  id v7 = v6 + 30;
  v6[31] = 0;
  v6[32] = 0;
  v6[29] = *(void *)(a2 + 8);
  id v8 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:a2 + 16];
  unint64_t v9 = *(void **)(a1 + 248);
  *(void *)(a1 + 248) = v8;

  v21[0] = 0;
  v21[1] = 0;
  [*(id *)(a1 + 248) getUUIDBytes:v21];
  v20[0] = 0;
  v20[1] = 0;
  if (os_nexus_controller_alloc_provider_instance())
  {
    if (os_log_type_enabled(*(os_log_t *)(a1 + 16), OS_LOG_TYPE_ERROR)) {
      sub_10077460C();
    }
  }
  else
  {
    id v10 = objc_alloc_init((Class)NSUUID);
    uint64_t v11 = *(void **)(a1 + 256);
    *(void *)(a1 + 256) = v10;

    v19[0] = 0;
    v19[1] = 0;
    [*(id *)(a1 + 256) getUUIDBytes:v19];
    os_nexus_controller_bind_provider_instance();
    os_nexus_controller_bind_provider_instance();
    id v12 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:v20];
    id v13 = *(void **)(a1 + 240);
    *(void *)(a1 + 24sub_1004C2140(qword_100A19B68, 0) = v12;

    kevent v14 = *(NSObject **)(a1 + 16);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *v7;
      int v17 = 138412290;
      uint64_t v18 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Registering Audio skywalk server channel to %@", (uint8_t *)&v17, 0xCu);
    }
    os_channel_attr_create();
    os_channel_attr_set();
    os_channel_attr_set_key();
    *(void *)(a1 + 176) = os_channel_create_extended();
    os_channel_attr_destroy();
    if (!*(void *)(a1 + 176) && os_log_type_enabled(*(os_log_t *)(a1 + 16), OS_LOG_TYPE_ERROR)) {
      sub_1007745D8();
    }
  }
  return a1;
}

void sub_10050A3CC(_Unwind_Exception *a1)
{
  sub_1005099F4((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10050A418(uint64_t a1)
{
  *(void *)a1 = off_1009B3470;
  v3[0] = 0;
  v3[1] = 0;
  [*(id *)(a1 + 240) getUUIDBytes:v3];
  os_nexus_controller_free_provider_instance();

  sub_1005099F4(a1);
  return a1;
}

void sub_10050A4C8(_Unwind_Exception *a1)
{
  sub_1005099F4((uint64_t)v1);
  _Unwind_Resume(a1);
}

void sub_10050A500(uint64_t a1)
{
  sub_10050A418(a1);

  operator delete();
}

id sub_10050A538(uint64_t a1)
{
  return *(id *)(a1 + 240);
}

id sub_10050A540(uint64_t a1)
{
  return *(id *)(a1 + 256);
}

void sub_10050A548(uint64_t a1)
{
  if (qword_1009FBAB0 != -1) {
    dispatch_once(&qword_1009FBAB0, &stru_1009B34C8);
  }
  uint64_t v2 = qword_1009FBAA8;

  sub_100444484(v2, a1 + 48);
}

void sub_10050A5AC(uint64_t a1)
{
  if (qword_1009FBAB0 != -1) {
    dispatch_once(&qword_1009FBAB0, &stru_1009B34C8);
  }
  uint64_t v2 = qword_1009FBAA8;

  sub_1004445C0(v2, a1 + 48);
}

uint64_t sub_10050A610(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(unsigned __int16 *))
{
  if (!a2)
  {
    id v12 = qword_100A19FE8;
    if (os_log_type_enabled((os_log_t)qword_100A19FE8, OS_LOG_TYPE_ERROR)) {
      sub_1007746D0(v12);
    }
  }
  int v13 = *a2;
  kevent v14 = qword_100A19FE8;
  BOOL v15 = os_log_type_enabled((os_log_t)qword_100A19FE8, OS_LOG_TYPE_DEFAULT);
  if (v15)
  {
    int v22 = 136315394;
    pthread_attr_t v23 = "TransportWrite";
    __int16 v24 = 1024;
    int v25 = v13;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%s: opCode 0x%04X", (uint8_t *)&v22, 0x12u);
  }
  int v16 = sub_10050A7C0(v15, v13);
  if (v17 & 1 | (unint64_t)v16)
  {
    uint64_t v18 = (void (*)(void *, unsigned __int16 *, uint64_t, uint64_t, uint64_t))v16;
    int v19 = (void *)(a1 + (v17 >> 1));
    if (v17) {
      uint64_t v18 = *(void (**)(void *, unsigned __int16 *, uint64_t, uint64_t, uint64_t))(*v19 + v18);
    }
    v18(v19, a2, a3, a4, a5);
  }
  else
  {
    uint64_t v20 = qword_100A19FE8;
    if (os_log_type_enabled((os_log_t)qword_100A19FE8, OS_LOG_TYPE_ERROR)) {
      sub_100774640(v13, v20);
    }
  }
  if (a6) {
    a6(a2);
  }
  return 1;
}

void (*sub_10050A7C0(uint64_t a1, int a2))(uint64_t a1, uint64_t a2)
{
  uint64_t result = (void (*)(uint64_t, uint64_t))sub_10050AB28;
  if (a2 > 8194)
  {
    if (a2 <= 8238)
    {
      if (a2 > 8206)
      {
        if (a2 == 8207)
        {
          return (void (*)(uint64_t, uint64_t))sub_10050BEBC;
        }
        else
        {
          if (a2 != 8220) {
            return result;
          }
          return (void (*)(uint64_t, uint64_t))sub_10050C050;
        }
      }
      else if (a2 == 8195)
      {
        return (void (*)(uint64_t, uint64_t))sub_10050BB80;
      }
      else
      {
        if (a2 != 8199) {
          return result;
        }
        return (void (*)(uint64_t, uint64_t))sub_10050BD28;
      }
    }
    else
    {
      switch(a2)
      {
        case 8245:
          return sub_10050C3A8;
        case 8246:
          return sub_10050C474;
        case 8247:
          return (void (*)(uint64_t, uint64_t))sub_10050C724;
        case 8248:
        case 8251:
        case 8252:
        case 8253:
        case 8254:
        case 8255:
        case 8256:
        case 8257:
          return result;
        case 8249:
          return (void (*)(uint64_t, uint64_t))sub_10050C888;
        case 8250:
          return (void (*)(uint64_t, uint64_t))sub_10050C9B4;
        case 8258:
          return sub_10050CB48;
        default:
          if (a2 == 8239)
          {
            int v3 = sub_10050C1F0;
          }
          else
          {
            if (a2 != 8288) {
              return result;
            }
            int v3 = sub_10050CC04;
          }
          break;
      }
    }
  }
  else if (a2 <= 3096)
  {
    if (a2 > 3074)
    {
      if (a2 == 3075)
      {
        return (void (*)(uint64_t, uint64_t))sub_10050AC00;
      }
      else
      {
        if (a2 != 3085) {
          return result;
        }
        return (void (*)(uint64_t, uint64_t))sub_10050AC84;
      }
    }
    else if (a2 == 1025)
    {
      return (void (*)(uint64_t, uint64_t))sub_10050AB34;
    }
    else
    {
      if (a2 != 1029) {
        return result;
      }
      return sub_10050AB78;
    }
  }
  else
  {
    switch(a2)
    {
      case 4097:
        return (void (*)(uint64_t, uint64_t))sub_10050AF90;
      case 4098:
        return (void (*)(uint64_t, uint64_t))sub_10050B140;
      case 4099:
        return (void (*)(uint64_t, uint64_t))sub_10050B2F0;
      case 4100:
        return (void (*)(uint64_t, uint64_t))sub_10050B49C;
      case 4101:
        return (void (*)(uint64_t, uint64_t))sub_10050B654;
      case 4102:
      case 4103:
      case 4104:
        return result;
      case 4105:
        return (void (*)(uint64_t, uint64_t))sub_10050B80C;
      default:
        if (a2 == 3097)
        {
          int v3 = sub_10050AE10;
        }
        else
        {
          if (a2 != 8194) {
            return result;
          }
          int v3 = sub_10050B9E0;
        }
        break;
    }
  }
  return (void (*)(uint64_t, uint64_t))v3;
}

void sub_10050AB28()
{
}

void sub_10050AB34()
{
}

void sub_10050AB78(uint64_t a1, uint64_t a2)
{
  __int16 v3 = 0;
  int v2 = 0;
  if (a2)
  {
    sub_100008A18((uint64_t)&v2, a2 + 3, 6uLL);
    sub_10050CF50();
  }
  sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/VirtualController/BTVirtualHciCommandChannel.mm", 205, "(uint8_t *)buff");
}

void sub_10050AC00()
{
  if (qword_1009FBAB0 != -1) {
    dispatch_once(&qword_1009FBAB0, &stru_1009B34C8);
  }
  sub_100444670((id *)qword_1009FBAA8);

  sub_10050CDBC();
}

void sub_10050AC84()
{
}

void sub_10050ADE4()
{
}

void sub_10050AE10()
{
}

void sub_10050AF64()
{
}

void sub_10050AF90()
{
}

void sub_10050B114()
{
}

void sub_10050B140()
{
}

void sub_10050B2C4()
{
}

void sub_10050B2F0()
{
}

void sub_10050B470()
{
}

void sub_10050B49C()
{
}

void sub_10050B628()
{
}

void sub_10050B654()
{
}

void sub_10050B7E0()
{
}

void sub_10050B80C()
{
}

void sub_10050B9B4()
{
}

void sub_10050B9E0()
{
}

void sub_10050BB54()
{
}

void sub_10050BB80()
{
}

void sub_10050BCFC()
{
}

void sub_10050BD28()
{
}

void sub_10050BE90()
{
}

void sub_10050BEBC()
{
}

void sub_10050C024()
{
}

void sub_10050C050()
{
}

void sub_10050C1C4()
{
}

void sub_10050C1F0()
{
}

void sub_10050C37C()
{
}

void sub_10050C3A8(uint64_t a1, uint64_t a2)
{
  unsigned __int16 v4 = 0;
  unsigned int v3 = 0;
  if (a2)
  {
    uint64_t v2 = *(unsigned __int8 *)(a2 + 3);
    sub_100008A18((uint64_t)&v3, a2 + 4, 6uLL);
    if (qword_1009FBAB0 != -1) {
      dispatch_once(&qword_1009FBAB0, &stru_1009B34C8);
    }
    sub_10044472C((id *)qword_1009FBAA8, v2, v3 | ((unint64_t)v4 << 32));
    sub_10050CDBC();
  }
  sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/VirtualController/BTVirtualHciCommandChannel.mm", 537, "(uint8_t *)buff");
}

void sub_10050C474(uint64_t a1, uint64_t a2)
{
  unsigned __int16 v21 = 0;
  unsigned int v20 = 0;
  if (a2)
  {
    int v3 = *(unsigned __int8 *)(a2 + 8);
    int v4 = *(unsigned __int16 *)(a2 + 6);
    int v5 = *(unsigned __int8 *)(a2 + 11);
    int v6 = *(unsigned __int16 *)(a2 + 9);
    unsigned int v18 = *(unsigned __int8 *)(a2 + 12);
    unsigned int v19 = *(unsigned __int8 *)(a2 + 3);
    unsigned __int16 v16 = *(_WORD *)(a2 + 4);
    unsigned int v17 = *(unsigned __int8 *)(a2 + 13);
    unsigned int v15 = *(unsigned __int8 *)(a2 + 14);
    sub_100008A18((uint64_t)&v20, a2 + 15, 6uLL);
    uint64_t v7 = v4 | (v3 << 16);
    uint64_t v8 = v6 | (v5 << 16);
    char v9 = *(unsigned char *)(a2 + 21);
    unsigned __int8 v10 = *(unsigned char *)(a2 + 22);
    unsigned __int8 v11 = *(unsigned char *)(a2 + 23);
    char v12 = *(unsigned char *)(a2 + 24);
    unsigned __int8 v13 = *(unsigned char *)(a2 + 25);
    unsigned __int8 v14 = *(unsigned char *)(a2 + 26);
    if (qword_1009FBAB0 != -1) {
      dispatch_once(&qword_1009FBAB0, &stru_1009B34C8);
    }
    sub_100444818((id *)qword_1009FBAA8, v19, v16, v7, v8, v18, v17, v15, v20 | ((unint64_t)v21 << 32), v9, v10, v11, v12, v13, v14);
    operator new();
  }
  sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/VirtualController/BTVirtualHciCommandChannel.mm", 578, "(uint8_t *)buff");
}

void sub_10050C6F8()
{
}

void sub_10050C724(uint64_t a1, unsigned __int8 *a2)
{
  if (a2)
  {
    memset(v6, 0, 251);
    size_t v2 = a2[6];
    if (v2 <= 0xFB)
    {
      if (v2 == 251) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/VirtualController/BTVirtualHciCommandChannel.mm", 662, "ByteStream_NumReadBytesAvail(bs) >= (advertisingDataLength)");
      }
      uint64_t v3 = a2[3];
      uint64_t v4 = a2[4];
      uint64_t v5 = a2[5];
      memcpy(v6, a2 + 7, v2);
      if (qword_1009FBAB0 != -1) {
        dispatch_once(&qword_1009FBAB0, &stru_1009B34C8);
      }
      sub_100444AB0((id *)qword_1009FBAA8, v3, v4, v5, v2, (uint64_t)v6);
    }
    sub_10050CDBC();
  }
  sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/VirtualController/BTVirtualHciCommandChannel.mm", 652, "(uint8_t *)buff");
}

void sub_10050C888(uint64_t a1, unsigned __int8 *a2)
{
  if (!a2) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/VirtualController/BTVirtualHciCommandChannel.mm", 695, "(uint8_t *)buff");
  }
  __int16 v10 = 0;
  int __dst = 0;
  int v7 = 0;
  __int16 v8 = 0;
  int v5 = 0;
  __int16 v6 = 0;
  int v3 = a2[3];
  size_t v4 = a2[4];
  if (a2[4])
  {
    if (v4 > 6) {
      goto LABEL_8;
    }
    memcpy(&__dst, a2 + 5, v4);
    memcpy(&v7, &a2[v4 + 5], v4);
    memcpy(&v5, &a2[(v4 + 5 + v4)], v4);
  }
  if (qword_1009FBAB0 != -1) {
    dispatch_once(&qword_1009FBAB0, &stru_1009B34C8);
  }
  sub_100444BBC((id *)qword_1009FBAA8, v3, v4, (unsigned __int8 *)&__dst);
LABEL_8:
  sub_10050CDBC();
}

void sub_10050C9B4()
{
}

void sub_10050CB1C()
{
}

void sub_10050CB48(uint64_t a1, uint64_t a2)
{
  if (a2) {
    sub_10050CDBC();
  }
  sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/VirtualController/BTVirtualHciCommandChannel.mm", 738, "(uint8_t *)buff");
}

void sub_10050CC04()
{
}

void sub_10050CD90()
{
}

void sub_10050CDBC()
{
}

void sub_10050CF24()
{
}

void sub_10050CF50()
{
}

void sub_10050D0B8()
{
}

void sub_10050D0E4()
{
}

void sub_10050D220()
{
}

void sub_10050D24C()
{
}

void sub_10050D3C8()
{
}

uint64_t *sub_10050D3F4(uint64_t *result, char a2)
{
  if (*((unsigned char *)result + 15))
  {
    sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/VirtualCon"
                           "troller/include/BTVirtualHciPacket.h");
    goto LABEL_6;
  }
  uint64_t v2 = *((unsigned __int16 *)result + 6);
  if (*((unsigned __int16 *)result + 5) <= v2)
  {
LABEL_6:
    size_t v4 = "ByteStream_NumReadBytesAvail(fBs) >= 1";
    goto LABEL_8;
  }
  if (*((unsigned char *)result + 14) != 2)
  {
    size_t v4 = "(fBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_8:
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/VirtualController/include/BTVirtualHciPacket.h", 30, v4);
  }
  uint64_t v3 = *result;
  *((_WORD *)result + 6) = v2 + 1;
  *(unsigned char *)(v3 + v2) = a2;
  return result;
}

uint64_t sub_10050D480(uint64_t result, __int16 a2)
{
  if (*(unsigned char *)(result + 15))
  {
    sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/VirtualCon"
                           "troller/include/BTVirtualHciPacket.h");
    goto LABEL_6;
  }
  uint64_t v2 = *(unsigned __int16 *)(result + 12);
  if (*(unsigned __int16 *)(result + 10) - (int)v2 <= 1)
  {
LABEL_6:
    uint64_t v3 = "ByteStream_NumReadBytesAvail(fBs) >= 2";
    goto LABEL_8;
  }
  if (*(unsigned char *)(result + 14) != 2)
  {
    uint64_t v3 = "(fBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_8:
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/VirtualController/include/BTVirtualHciPacket.h", 31, v3);
  }
  *(unsigned char *)(*(void *)result + v2) = a2;
  *(unsigned char *)(*(void *)result + *(unsigned __int16 *)(result + 12) + 1) = HIBYTE(a2);
  *(_WORD *)(result + 12) += 2;
  return result;
}

void *sub_10050D528(uint64_t *a1, const void *a2, unsigned int a3)
{
  uint64_t v6 = *a1;
  unsigned int v7 = *((unsigned __int16 *)a1 + 6);
  if (*((unsigned char *)a1 + 15))
  {
    sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/VirtualCon"
                           "troller/include/BTVirtualHciPacket.h");
    unsigned int v8 = 0;
  }
  else
  {
    unsigned int v8 = *((unsigned __int16 *)a1 + 5) - v7;
  }
  if (v8 < a3)
  {
    __int16 v10 = "ByteStream_NumReadBytesAvail(fBs) >= (N)";
    goto LABEL_9;
  }
  if (*((unsigned char *)a1 + 14) != 2)
  {
    __int16 v10 = "(fBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_9:
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/VirtualController/include/BTVirtualHciPacket.h", 34, v10);
  }
  uint64_t result = memmove((void *)(v6 + v7), a2, a3);
  *((_WORD *)a1 + 6) += a3;
  return result;
}

uint64_t sub_10050D5F4(uint64_t a1, uint64_t a2)
{
  int v6 = a2;
  __int16 v7 = WORD2(a2);
  if (*(unsigned char *)(a1 + 15))
  {
    sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/VirtualCon"
                           "troller/include/BTVirtualHciPacket.h");
    goto LABEL_6;
  }
  uint64_t v3 = *(unsigned __int16 *)(a1 + 12);
  if (*(unsigned __int16 *)(a1 + 10) - (int)v3 <= 5)
  {
LABEL_6:
    int v5 = "ByteStream_NumReadBytesAvail(fBs) >= OI_BD_ADDR_BYTE_SIZE";
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 14) != 2)
  {
    int v5 = "(fBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_8:
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/VirtualController/include/BTVirtualHciPacket.h", 33, v5);
  }
  uint64_t result = sub_100008A18(*(void *)a1 + v3, (uint64_t)&v6, 6uLL);
  *(_WORD *)(a1 + 12) += 6;
  return result;
}

void sub_10050D6B4()
{
}

void sub_10050D8E0()
{
}

void sub_10050D90C()
{
}

void sub_10050D948(id *a1)
{
  sub_10036FC6C(a1);

  operator delete();
}

void sub_10050D980(id a1)
{
}

void sub_10050D9C4()
{
}

void sub_10050D9E8(id a1)
{
}

void sub_10050DA2C()
{
}

uint64_t sub_10050DA50(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)a1 = off_1009B2480;
  sub_100052DA8(a1 + 8);
  *(unsigned char *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 76) = a4;
  *(void *)(a1 + 8sub_1004C2140(qword_100A19B68, 0) = a2;
  *(void *)(a1 + 88) = 0;
  *(void *)a1 = off_1009B3518;
  sub_100052DA8(a1 + 96);
  *(_DWORD *)(a1 + 16sub_1004C2140(qword_100A19B68, 0) = 0;
  *(void *)(a1 + 168) = a3;
  *(void *)(a1 + 88) = sub_1004AFE2C();
  return a1;
}

void sub_10050DB00(_Unwind_Exception *a1)
{
  sub_100052DA4(v4);
  void *v1 = v2;
  sub_100052DA4(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_10050DB2C(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009B3578);
  }
  WORD2(v11) = WORD2(a3);
  LODWORD(v11) = a3;
  uint64_t v8 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v11, 1);
  if (!a2)
  {
    uint64_t v9 = v8;
    if (v8)
    {
      uint64_t v12 = 0;
      sub_100026C30((uint64_t)&v12);
      *(void *)&long long v11 = (int)v12;
      *((void *)&v11 + 1) = SWORD2(v12);
      sub_100476E14(v9, a4, &v11);
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v9);
    }
  }
  return sub_1004EDCD4(a1, 0);
}

void sub_10050DC1C(uint64_t a1)
{
  v3[0] = 0;
  v3[1] = 0;
  sub_10003AED0((uint64_t)v3, a1 + 8);
  int v2 = *(unsigned __int8 *)(a1 + 72);
  sub_10003AFB4((uint64_t)v3);
  if (v2)
  {
    sub_10025B8C0();
  }
  else
  {
    sub_1004ED788(a1);
    sub_10050DC7C(a1);
  }
}

uint64_t sub_10050DC7C(uint64_t a1)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1 + 96);
  int v2 = qword_100A19E68;
  if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_INFO))
  {
    int v3 = *(_DWORD *)(a1 + 160);
    *(_DWORD *)long long buf = 67109120;
    int v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Stepping scan with mode %u", buf, 8u);
  }
  if (*(_DWORD *)(a1 + 160))
  {
    uint64_t v4 = 114;
LABEL_6:
    *(_DWORD *)(a1 + 16sub_1004C2140(qword_100A19B68, 0) = 128;
    sub_10003AFE8((uint64_t)v6);
    sub_1004EDCD4(a1, v4);
    return sub_10003AFB4((uint64_t)v6);
  }
  *(_DWORD *)(a1 + 16sub_1004C2140(qword_100A19B68, 0) = 4;
  buf[0] = 0;
  sub_10001B8E0(buf);
  uint64_t v4 = sub_10017DC04((uint64_t)sub_10050DF24, *(void *)(a1 + 168) + 128, 4, a1);
  sub_10001B8AC(buf);
  if (v4) {
    goto LABEL_6;
  }
  return sub_10003AFB4((uint64_t)v6);
}

void sub_10050DDB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_10050DDE0(uint64_t a1)
{
  v14[0] = 0;
  v14[1] = 0;
  sub_10003AED0((uint64_t)v14, a1 + 96);
  int v2 = qword_100A19E68;
  if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 160);
    *(_DWORD *)long long buf = 67109120;
    int v16 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Stopping scan with mode %u", buf, 8u);
  }
  int v4 = *(_DWORD *)(a1 + 160);
  if (v4 == 4)
  {
    uint64_t v5 = *(void *)(a1 + 168);
    *(_DWORD *)(a1 + 16sub_1004C2140(qword_100A19B68, 0) = 128;
    sub_10003AFE8((uint64_t)v14);
    buf[0] = 0;
    sub_10001B8E0(buf);
    sub_10017DCBC(v5 + 128, v6, v7, v8, v9, v10, v11, v12);
    sub_10001B910(buf);
    sub_10001B8AC(buf);
  }
  else if (!v4)
  {
    *(_DWORD *)(a1 + 16sub_1004C2140(qword_100A19B68, 0) = 128;
  }
  return sub_10003AFB4((uint64_t)v14);
}

void sub_10050DEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10050DF24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4) {
    operator new();
  }
}

void sub_10050DFE0()
{
}

uint64_t sub_10050E004(uint64_t a1, uint64_t a2, int a3, int *a4, std::string::value_type *__s)
{
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = &off_1009B3550;
  *(void *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 24) = a3;
  *(void *)(a1 + 4sub_1004C2140(qword_100A19B68, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  if (a4)
  {
    int v6 = *a4;
    *(_WORD *)(a1 + 32) = *((_WORD *)a4 + 2);
    *(_DWORD *)(a1 + 28) = v6;
  }
  if (__s) {
    std::string::assign((std::string *)(a1 + 40), __s);
  }
  return a1;
}

void sub_10050E08C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_10050E0A8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v2 = *(_DWORD *)(a1 + 24);
  unint64_t v3 = *(unsigned int *)(a1 + 28) | ((unint64_t)*(unsigned __int16 *)(a1 + 32) << 32);
  if (*(char *)(a1 + 63) < 0)
  {
    sub_10003B098(__p, *(void **)(a1 + 40), *(void *)(a1 + 48));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 56);
  }
  sub_10050DB2C(v1, v2, v3 & 0xFFFFFFFFFFFFLL, (uint64_t)__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10050E134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10050E150(uint64_t a1)
{
  *(void *)a1 = &off_1009B3550;
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  return a1;
}

void sub_10050E1A0(uint64_t a1)
{
  *(void *)a1 = &off_1009B3550;
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }

  operator delete();
}

void *sub_10050E210(void *a1)
{
  *a1 = off_1009B3518;
  sub_100052DA4(a1 + 12);
  *a1 = off_1009B2480;
  sub_100052DA4(a1 + 1);
  return a1;
}

void sub_10050E278(void *a1)
{
  *a1 = off_1009B3518;
  sub_100052DA4(a1 + 12);
  *a1 = off_1009B2480;
  sub_100052DA4(a1 + 1);

  operator delete();
}

BOOL sub_10050E300(uint64_t a1, unsigned char *a2)
{
  return sub_1004B022C(*(void *)(a1 + 88), a2);
}

void sub_10050E308(id a1)
{
}

void sub_10050E34C()
{
}

uint64_t sub_10050E374(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5)
{
  v20[0] = 0;
  v20[1] = 0;
  sub_10003AED0((uint64_t)v20, a1 + 8);
  uint64_t v10 = *(void **)(a1 + 80);
  uint64_t v11 = (void *)(a1 + 88);
  if (v10 != (void *)(a1 + 88))
  {
    uint64_t v12 = a5;
    do
    {
      uint64_t v13 = v10[4];
      if (v13)
      {
        if (*(unsigned char *)(*(void *)(v13 + 32) + 160))
        {
          xpc_object_t v14 = xpc_dictionary_create(0, 0, 0);
          unsigned int v15 = v14;
          if (v14)
          {
            xpc_dictionary_set_uint64(v14, "kCBMsgArgID", *(void *)(v13 + 16));
            xpc_dictionary_set_uint64(v15, "kCBMsgArgDiscoveryAgentID", a2);
            xpc_dictionary_set_uint64(v15, "kCBMsgArgStatus", a3);
            xpc_dictionary_set_uint64(v15, "kCBMsgArgBTDevice", a4);
            xpc_dictionary_set_uint64(v15, "kCBMsgArgResult", v12);
            sub_1002D7B48(*(void *)(v13 + 32), "kCBMsgIdDiscoveryAgentStatusEvent", v15, 1);
          }
        }
      }
      int v16 = (void *)v10[1];
      if (v16)
      {
        do
        {
          unsigned int v17 = v16;
          int v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          unsigned int v17 = (void *)v10[2];
          BOOL v18 = *v17 == (void)v10;
          uint64_t v10 = v17;
        }
        while (!v18);
      }
      uint64_t v10 = v17;
    }
    while (v17 != v11);
  }
  return sub_10003AFB4((uint64_t)v20);
}

void sub_10050E4E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10050E4F8(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  v20[0] = 0;
  v20[1] = 0;
  sub_10003AED0((uint64_t)v20, a1 + 8);
  uint64_t v10 = *(void **)(a1 + 80);
  uint64_t v11 = (void *)(a1 + 88);
  if (v10 != (void *)(a1 + 88))
  {
    uint64_t v12 = a5;
    do
    {
      uint64_t v13 = v10[4];
      if (v13)
      {
        if (*(unsigned char *)(*(void *)(v13 + 32) + 160))
        {
          xpc_object_t v14 = xpc_dictionary_create(0, 0, 0);
          unsigned int v15 = v14;
          if (v14)
          {
            xpc_dictionary_set_uint64(v14, "kCBMsgArgID", *(void *)(v13 + 16));
            xpc_dictionary_set_uint64(v15, "kCBMsgArgDiscoveryAgentID", a2);
            xpc_dictionary_set_uint64(v15, "kCBMsgArgEvent", a3);
            xpc_dictionary_set_uint64(v15, "kCBMsgArgBTDevice", a4);
            xpc_dictionary_set_uint64(v15, "kCBMsgArgAttributes", v12);
            sub_1002D7B48(*(void *)(v13 + 32), "kCBMsgIdDiscoveryAgentDiscoveryEvent", v15, 1);
          }
        }
      }
      int v16 = (void *)v10[1];
      if (v16)
      {
        do
        {
          unsigned int v17 = v16;
          int v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          unsigned int v17 = (void *)v10[2];
          BOOL v18 = *v17 == (void)v10;
          uint64_t v10 = v17;
        }
        while (!v18);
      }
      uint64_t v10 = v17;
    }
    while (v17 != v11);
  }
  return sub_10003AFB4((uint64_t)v20);
}

void sub_10050E668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10050E67C(uint64_t result, unsigned int a2, uint64_t a3, int a4, uint64_t a5)
{
  if (a5) {
    return sub_10050E374(a5, result, a2, a3, a4);
  }
  return result;
}

uint64_t sub_10050E6A0(uint64_t result, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  if (a5) {
    return sub_10050E4F8(a5, result, a2, a3, a4);
  }
  return result;
}

void *sub_10050E6C4(void *a1, uint64_t a2)
{
  unint64_t v3 = sub_1004EEEA8(a1, a2);
  void *v3 = &off_1009B35A8;
  v3[12] = 0;
  v3[11] = 0;
  v3[10] = v3 + 11;
  if (qword_100A13828 != -1) {
    dispatch_once(&qword_100A13828, &stru_1009B35C8);
  }
  return a1;
}

void sub_10050E740(id a1)
{
  uint64_t v9 = "kCBMsgIdDiscoveryAgentCreateMsg";
  uint64_t v10 = 31;
  uint64_t v11 = &v9;
  uint64_t v1 = sub_10050F6A4((uint64_t)&xmmword_100A19DA0, (uint64_t)&v9, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v11);
  v1[4] = sub_10050E980;
  void v1[5] = 0;
  uint64_t v9 = "kCBMsgIdDiscoveryAgentDestroyMsg";
  uint64_t v10 = 32;
  uint64_t v11 = &v9;
  int v2 = sub_10050F6A4((uint64_t)&xmmword_100A19DA0, (uint64_t)&v9, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v11);
  void v2[4] = sub_10050EBA4;
  void v2[5] = 0;
  uint64_t v9 = "kCBMsgIdDiscoveryAgentStartScanMsg";
  uint64_t v10 = 34;
  uint64_t v11 = &v9;
  unint64_t v3 = sub_10050F6A4((uint64_t)&xmmword_100A19DA0, (uint64_t)&v9, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v11);
  void v3[4] = sub_10050EDD0;
  void v3[5] = 0;
  uint64_t v9 = "kCBMsgIdDiscoveryAgentStartScanForAdvertizedDataMsg";
  uint64_t v10 = 51;
  uint64_t v11 = &v9;
  int v4 = sub_10050F6A4((uint64_t)&xmmword_100A19DA0, (uint64_t)&v9, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v11);
  v4[4] = sub_10050EF44;
  void v4[5] = 0;
  uint64_t v9 = "kCBMsgIdDiscoveryAgentStopScanMsg";
  uint64_t v10 = 33;
  uint64_t v11 = &v9;
  uint64_t v5 = sub_10050F6A4((uint64_t)&xmmword_100A19DA0, (uint64_t)&v9, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v11);
  void v5[4] = sub_10050F00C;
  void v5[5] = 0;
  uint64_t v9 = "kCBMsgIdDiscoveryAgentGetDevicesMsg";
  uint64_t v10 = 35;
  uint64_t v11 = &v9;
  int v6 = sub_10050F6A4((uint64_t)&xmmword_100A19DA0, (uint64_t)&v9, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v11);
  v6[4] = sub_10050F0D4;
  void v6[5] = 0;
  uint64_t v9 = "kCBMsgIdDiscoveryAgentAddKeyMsg";
  uint64_t v10 = 31;
  uint64_t v11 = &v9;
  uint64_t v7 = sub_10050F6A4((uint64_t)&xmmword_100A19DA0, (uint64_t)&v9, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v11);
  void v7[4] = sub_10050F2B8;
  void v7[5] = 0;
  uint64_t v9 = "kCBMsgIdDiscoveryAgentRemoveKeyMsg";
  uint64_t v10 = 34;
  uint64_t v11 = &v9;
  uint64_t v8 = sub_10050F6A4((uint64_t)&xmmword_100A19DA0, (uint64_t)&v9, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v11);
  v8[4] = sub_10050F3B8;
  v8[5] = 0;
}

uint64_t sub_10050E980(uint64_t a1, xpc_object_t xdict)
{
  uint64_t value = 0;
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgSessionID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgID");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG)) {
    sub_100774754();
  }
  v15[0] = 0;
  v15[1] = 0;
  sub_10003AED0((uint64_t)v15, a1 + 8);
  if (uint64)
  {
    uint64_t v7 = *(void *)(a1 + 72);
    int v8 = *(_DWORD *)(v7 + 40);
    au_asid_t asid = xpc_connection_get_asid(*(xpc_connection_t *)(v7 + 16));
    if (qword_1009F8168 != -1) {
      dispatch_once(&qword_1009F8168, &stru_1009B35E8);
    }
    if (sub_100553F34(qword_1009F8160, uint64, v8, asid))
    {
      uint64_t v10 = (uint64_t *)malloc_type_calloc(1uLL, 0x28uLL, 0x10A0040DFBAE579uLL);
      xpc_object_t v14 = v10;
      v10[1] = (uint64_t)sub_10050E6A0;
      void v10[2] = v6;
      *uint64_t v10 = (uint64_t)sub_10050E67C;
      void v10[4] = *(void *)(a1 + 72);
      LODWORD(uint64) = sub_1004EB714(uint64, v10, a1, &value);
      if (uint64)
      {
        free(v10);
      }
      else
      {
        uint64_t v10[3] = value;
        sub_100051620((uint64_t **)(a1 + 80), (unint64_t *)&v14, (uint64_t *)&v14);
      }
      uint64_t uint64 = (int)uint64;
    }
    else
    {
      uint64_t uint64 = 7;
    }
  }
  else
  {
    uint64_t uint64 = 1;
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  uint64_t v12 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgDiscoveryAgentID", value);
    xpc_dictionary_set_uint64(v12, "kCBMsgArgResult", uint64);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v12);
    xpc_release(v12);
  }
  return sub_10003AFB4((uint64_t)v15);
}

void sub_10050EB88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10050EBA4(void *a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgDiscoveryAgentID");
  uint64_t v6 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG)) {
    sub_1007747BC(uint64, v6, v7, v8, v9, v10, v11, v12);
  }
  v24[0] = 0;
  v24[1] = 0;
  sub_10003AED0((uint64_t)v24, (uint64_t)(a1 + 1));
  if (!uint64 || (v23 = uint64, uint64_t v13 = (void *)a1[10], v13 == a1 + 11))
  {
    int v14 = 0;
  }
  else
  {
    int v14 = 0;
    do
    {
      int v22 = (void *)v13[4];
      if (v23 == *((void *)v22 + 3))
      {
        int v14 = sub_1004EB7E0(&v23);
        if (v14)
        {
          unsigned int v15 = qword_100A19EC8;
          if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 134217984;
            uint64_t v26 = uint64;
            _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Could not destroy discovery agent %llx", buf, 0xCu);
          }
        }
        else
        {
          sub_1000517A4((uint64_t)(a1 + 10), (unint64_t *)&v22);
          free(v22);
          int v14 = 0;
        }
      }
      int v16 = (void *)v13[1];
      if (v16)
      {
        do
        {
          unsigned int v17 = v16;
          int v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          unsigned int v17 = (void *)v13[2];
          BOOL v18 = *v17 == (void)v13;
          uint64_t v13 = v17;
        }
        while (!v18);
      }
      uint64_t v13 = v17;
    }
    while (v17 != a1 + 11);
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  unsigned int v20 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v14);
    xpc_connection_send_message(*(xpc_connection_t *)(a1[9] + 16), v20);
    xpc_release(v20);
  }
  return sub_10003AFB4((uint64_t)v24);
}

void sub_10050EDB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_10050EDD0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgDiscoveryAgentID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgDiscoveryMode");
  uint64_t v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgServices");
  uint64_t v8 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    int v12 = 134218496;
    uint64_t v13 = uint64;
    __int16 v14 = 2048;
    uint64_t v15 = v6;
    __int16 v16 = 2048;
    uint64_t v17 = v7;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "BTDiscoveryMsgHandler::handleBTDiscoveryAgentStartScanMsg discvoveryAgentID:%llx mode:%llx services:%llx", (uint8_t *)&v12, 0x20u);
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v9 = (int)sub_1004EB840(uint64, v6, v7);
    goto LABEL_6;
  }
  uint64_t v9 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v11);
    xpc_release(v11);
  }
}

void sub_10050EF44(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgDiscoveryAgentID");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10077482C();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1004EBA6C(uint64);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_10050F00C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgDiscoveryAgentID");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100774894();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1004EBB80(uint64);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_10050F0D4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgDiscoveryAgentID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCbMsgArgDeviceArrayMaxSize");
  uint64_t v15 = 0;
  __chkstk_darwin(v6, 8 * v6);
  uint64_t v8 = (uint64_t *)((char *)&v15 - v7);
  bzero((char *)&v15 - v7, v9);
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG)) {
    sub_1007748FC();
  }
  int v10 = 1;
  if (uint64 && v6 <= 0x100) {
    int v10 = sub_1004EBC8C(uint64, v8, &v15, v6);
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v10);
    xpc_dictionary_set_uint64(v12, "kCbMsgArgDeviceArrayMaxSize", v15);
    xpc_object_t v13 = xpc_array_create(0, 0);
    if (!v10 && v15)
    {
      for (uint64_t i = 0; i < v15; ++i)
        xpc_array_set_uint64(v13, 0xFFFFFFFFFFFFFFFFLL, v8[i]);
    }
    xpc_dictionary_set_value(v12, "kCBMsgArgDeviceArray", v13);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v12);
    xpc_release(v13);
    xpc_release(v12);
  }
}

void sub_10050F2B8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgDiscoveryAgentID");
  size_t length = 0;
  int data = xpc_dictionary_get_data(value, "kCBMsgArgKey", &length);
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100774964();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1004EBE54(uint64, data, length);
    goto LABEL_6;
  }
  uint64_t v7 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    size_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_10050F3B8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgDiscoveryAgentID");
  size_t length = 0;
  int data = xpc_dictionary_get_data(value, "kCBMsgArgKey", &length);
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_1007749CC();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1004EBF14(uint64, data, length);
    goto LABEL_6;
  }
  uint64_t v7 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    size_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

BOOL sub_10050F4BC(uint64_t a1, xpc_object_t xdict)
{
  string = xpc_dictionary_get_string(xdict, "kCBMsgId");
  uint64_t v11 = string;
  size_t v12 = strlen(string);
  uint64_t v5 = sub_1003C2560(&xmmword_100A19DA0, (uint64_t)&v11);
  if (v5)
  {
    uint64_t v11 = string;
    size_t v12 = strlen(string);
    xpc_object_t v13 = &v11;
    uint64_t v6 = sub_10050F6A4((uint64_t)&xmmword_100A19DA0, (uint64_t)&v11, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v13);
    uint64_t v7 = (void (*)(void *, xpc_object_t))v6[4];
    uint64_t v8 = v6[5];
    size_t v9 = (void *)(a1 + (v8 >> 1));
    if (v8) {
      uint64_t v7 = *(void (**)(void *, xpc_object_t))(*v9 + v7);
    }
    v7(v9, xdict);
  }
  return v5 != 0;
}

void sub_10050F5BC(void *a1)
{
  sub_1003EB750(a1);

  operator delete();
}

uint64_t sub_10050F5F4(void *a1)
{
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, (uint64_t)(a1 + 1));
  int v2 = (void *)a1[10];
  unint64_t v3 = a1 + 11;
  if (v2 != a1 + 11)
  {
    do
    {
      free((void *)v2[4]);
      xpc_object_t v4 = (void *)v2[1];
      if (v4)
      {
        do
        {
          uint64_t v5 = v4;
          xpc_object_t v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v5 = (void *)v2[2];
          BOOL v6 = *v5 == (void)v2;
          int v2 = v5;
        }
        while (!v6);
      }
      int v2 = v5;
    }
    while (v5 != v3);
  }
  sub_1000486F0((uint64_t)(a1 + 10), (void *)a1[11]);
  a1[11] = 0;
  a1[12] = 0;
  a1[10] = v3;
  return sub_10003AFB4((uint64_t)v8);
}

void *sub_10050F6A4(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = sub_1003C208C((uint64_t)&v29, *(uint64_t **)a2, *(void *)(a2 + 8));
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v12 = v7;
      if (v7 >= v9) {
        unint64_t v12 = v7 % v9;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v7;
    }
    xpc_object_t v13 = *(void ***)(*(void *)a1 + 8 * v12);
    if (v13)
    {
      __int16 v14 = *v13;
      if (*v13)
      {
        uint64_t v17 = a2;
        uint64_t v15 = *(uint64_t **)a2;
        size_t v16 = *(void *)(v17 + 8);
        do
        {
          unint64_t v18 = *((void *)v14 + 1);
          if (v18 == v8)
          {
            if (*((void *)v14 + 3) == v16 && !memcmp(*((const void **)v14 + 2), v15, v16)) {
              return v14;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v18 >= v9) {
                v18 %= v9;
              }
            }
            else
            {
              v18 &= v9 - 1;
            }
            if (v18 != v12) {
              break;
            }
          }
          __int16 v14 = *(void **)v14;
        }
        while (v14);
      }
    }
  }
  else
  {
    unint64_t v12 = 0;
  }
  __int16 v14 = operator new(0x30uLL);
  *(void *)__int16 v14 = 0;
  *((void *)v14 + 1) = v8;
  *((_OWORD *)v14 + 1) = **a4;
  *((void *)v14 + 4) = 0;
  *((void *)v14 + 5) = 0;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    BOOL v21 = 1;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    sub_1000A9204(a1, v24);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v12 = v8 % v9;
      }
      else {
        unint64_t v12 = v8;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v8;
    }
  }
  uint64_t v25 = *(void *)a1;
  uint64_t v26 = *(void **)(*(void *)a1 + 8 * v12);
  if (v26)
  {
    *(void *)__int16 v14 = *v26;
LABEL_40:
    *uint64_t v26 = v14;
    goto LABEL_41;
  }
  *(void *)__int16 v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v25 + 8 * v12) = a1 + 16;
  if (*(void *)v14)
  {
    unint64_t v27 = *(void *)(*(void *)v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9) {
        v27 %= v9;
      }
    }
    else
    {
      v27 &= v9 - 1;
    }
    uint64_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_40;
  }
LABEL_41:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_10050F8FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10050F910(id a1)
{
}

void sub_10050F954()
{
}

void sub_10050F978()
{
  xmmword_100A19DA0 = 0u;
  *(_OWORD *)algn_100A19DB0 = 0u;
  dword_100A19DC0 = 1065353216;
  __cxa_atexit((void (*)(void *))sub_10050E370, &xmmword_100A19DA0, (void *)&_mh_execute_header);
}

uint64_t sub_10050F9E4(uint64_t a1)
{
  *(void *)sub_1004C9B7C(a1, "GamingService", 2048) = &off_1009B3618;
  if (qword_1009FBAC0 != -1) {
    dispatch_once(&qword_1009FBAC0, &stru_1009B3710);
  }
  sub_1004C9E90(a1, (uint64_t)off_1009FBAB8);
  return a1;
}

void sub_10050FA6C(_Unwind_Exception *a1)
{
  sub_1004C9C80(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10050FA88()
{
  if (qword_1009FBAC0 != -1) {
    dispatch_once(&qword_1009FBAC0, &stru_1009B3710);
  }
  uint64_t v0 = off_1009FBAB8;

  return sub_1005100AC((uint64_t)v0);
}

uint64_t sub_10050FADC(uint64_t a1, uint64_t a2)
{
  long long v11 = xmmword_1007BECB0;
  uint64_t result = sub_10047B300(a2);
  if (result)
  {
    BOOL v5 = sub_100478F30(a2, &v11, 4u);
    unsigned int v6 = *(_DWORD *)(a1 + 32);
    uint64_t v12 = 0;
    if (v5)
    {
      sub_100026C30((uint64_t)&v12);
      *(void *)&long long v10 = (int)v12;
      *((void *)&v10 + 1) = SWORD2(v12);
      uint64_t v7 = a2;
      unsigned int v8 = v6;
      int v9 = 4;
    }
    else
    {
      sub_100026C30((uint64_t)&v12);
      *(void *)&long long v10 = (int)v12;
      *((void *)&v10 + 1) = SWORD2(v12);
      uint64_t v7 = a2;
      unsigned int v8 = v6;
      int v9 = 1;
    }
    return sub_100477F4C(v7, v8, v9, &v10, 0);
  }
  return result;
}

uint64_t sub_10050FB98(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 112))(a1))
  {
    uint64_t v1 = sub_1003705E4();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1 + 120))(v1, 120, 10);
  }
  return 1;
}

void sub_10050FC0C(uint64_t a1)
{
  sub_1004C9C80(a1);

  operator delete();
}

uint64_t sub_10050FC44()
{
  return 0;
}

void sub_10050FC4C(uint64_t a1, uint64_t a2, _WORD *a3)
{
  *a3 = 0;
}

void sub_10050FC54(id a1)
{
}

void sub_10050FC98()
{
}

uint64_t sub_10050FCBC(uint64_t a1)
{
  uint64_t result = sub_100283C88(a1, 18);
  *(void *)uint64_t result = off_1009B3740;
  *(void *)(result + 288) = 0;
  *(_DWORD *)(result + 276) = 0;
  *(void *)(result + 252) = 0;
  *(void *)(result + 26sub_1004C2140(qword_100A19B68, 0) = 0;
  *(void *)(result + 268) = 0;
  return result;
}

uint64_t sub_10050FD08(void *a1)
{
  *a1 = off_1009B3740;
  int v2 = (std::__shared_weak_count *)a1[34];
  if (v2) {
    sub_10008A294(v2);
  }

  return sub_100283DC8((uint64_t)a1);
}

void sub_10050FD68(void *a1)
{
  sub_10050FD08(a1);

  operator delete();
}

uint64_t sub_10050FDA0(uint64_t a1)
{
  *(_DWORD *)(a1 + 28sub_1004C2140(qword_100A19B68, 0) = 0;
  return 0;
}

uint64_t sub_10050FDAC(uint64_t a1)
{
  *(_DWORD *)(a1 + 252) = 0;
  char v3 = 0;
  sub_10001B8E0(&v3);
  if (sub_1001666A4((uint64_t)sub_10050FE84, (uint64_t)sub_10050FF00, (uint64_t)&off_1009B3798, (uint64_t)sub_10050FF58, (uint64_t)&off_1009B37A8, 0, 0))
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A000, OS_LOG_TYPE_ERROR)) {
      sub_100774A34();
    }
    uint64_t v1 = 1;
  }
  else
  {
    uint64_t v1 = 0;
  }
  sub_10001B8AC(&v3);
  return v1;
}

void sub_10050FE70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_10050FE84(unsigned int a1, int *a2, int a3)
{
  if (qword_1009FBAC0 != -1) {
    dispatch_once(&qword_1009FBAC0, &stru_1009B3830);
  }
  unsigned int v6 = off_1009FBAB8;

  return sub_100510854(v6, a2, a1, a3);
}

void sub_10050FF00(unsigned int a1)
{
  if (sub_1001641E0(a1, 0))
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A000, OS_LOG_TYPE_ERROR)) {
      sub_100774A68();
    }
  }
}

void sub_10050FF58(unsigned int a1)
{
  if (sub_100164228(a1, 0))
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A000, OS_LOG_TYPE_ERROR)) {
      sub_100774AD0();
    }
  }
}

uint64_t sub_10050FFB0(uint64_t a1)
{
  char v6 = 0;
  sub_10001B8E0(&v6);
  int v2 = *(_DWORD *)(a1 + 252);
  if (v2)
  {
    sub_10024E448(v2);
    *(_DWORD *)(a1 + 252) = 0;
  }
  char v3 = *(void **)(a1 + 256);
  if (v3)
  {
    free(v3);
    *(void *)(a1 + 256) = 0;
  }
  if (sub_10016415C(2))
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A000, OS_LOG_TYPE_ERROR)) {
      sub_100774B38();
    }
    uint64_t v4 = 1;
  }
  else
  {
    uint64_t v4 = 0;
  }
  sub_10001B8AC(&v6);
  return v4;
}

void sub_100510050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_100510068(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 264);
  if (v2)
  {
    sub_10036EAFC(v2);
    char v3 = *(std::__shared_weak_count **)(a1 + 272);
    *(void *)(a1 + 264) = 0;
    *(void *)(a1 + 272) = 0;
    if (v3) {
      sub_10008A294(v3);
    }
  }
  return 0;
}

uint64_t sub_1005100AC(uint64_t a1)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009B3850);
  }
  long long v19 = 0u;
  long long v20 = 0u;
  unsigned int v2 = sub_1004B3038((uint64_t)off_1009F7EA8);
  uint64_t v16 = (uint64_t)&v16;
  uint64_t v17 = &v16;
  uint64_t v18 = 0;
  unsigned __int8 v15 = 0;
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009B3850);
  }
  sub_1004B3080((uint64_t)off_1009F7EA8, &v16);
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009B3850);
  }
  sub_1004B30F0((uint64_t)off_1009F7EA8, &v15);
  if (*(_DWORD *)(a1 + 80) == 1)
  {
    char v14 = 0;
    sub_10001B8E0(&v14);
    char v3 = *(void **)(a1 + 256);
    if (v3)
    {
      free(v3);
      *(void *)(a1 + 256) = 0;
    }
    int v4 = *(_DWORD *)(a1 + 252);
    if (v4)
    {
      sub_10024E448(v4);
      *(_DWORD *)(a1 + 252) = 0;
    }
    if (v2)
    {
      BOOL v5 = (char *)malloc_type_calloc(2 * v2 + 6, 0x18uLL, 0x10F20406C095635uLL);
      char v6 = v5;
      if (!v5)
      {
        if (os_log_type_enabled((os_log_t)qword_100A1A000, OS_LOG_TYPE_ERROR)) {
          sub_100774B6C();
        }
        goto LABEL_26;
      }
      *(_WORD *)BOOL v5 = 1;
      v5[8] = 6;
      *((_WORD *)v5 + 5) = 1;
      *((void *)v5 + 2) = &unk_1007BF4A8;
      *((_WORD *)v5 + 12) = 4;
      v5[32] = 6;
      *((_WORD *)v5 + 17) = 2;
      *((void *)v5 + 5) = &unk_1009B37B8;
      *((_WORD *)v5 + 24) = 9;
      v5[56] = 6;
      *((_WORD *)v5 + 29) = 1;
      *((void *)v5 + 8) = &unk_1009B37D8;
      *((_WORD *)v5 + 36) = 778;
      v5[80] = 1;
      *((_WORD *)v5 + 41) = 4;
      *((_DWORD *)v5 + 22) = 0;
      *((_WORD *)v5 + 48) = -4096;
      v5[104] = 1;
      *((_WORD *)v5 + 53) = 1;
      *((_DWORD *)v5 + 28) = v15;
      *((_WORD *)v5 + 6sub_1004C2140(qword_100A19B68, 0) = 512;
      v5[128] = 1;
      *((_WORD *)v5 + 65) = 4;
      *((_DWORD *)v5 + 34) = v2;
      uint64_t v7 = v17;
      if (v17 != &v16)
      {
        int v8 = 0;
        do
        {
          int v9 = (void *)v7[2];
          long long v10 = &v5[24 * (v8 + 6)];
          *(_WORD *)long long v10 = v8 + 513;
          v10[8] = 4;
          *((_WORD *)v10 + 5) = v9[2];
          *((void *)v10 + 2) = v9[1];
          long long v11 = &v5[24 * (v8 + 7)];
          *(_WORD *)long long v11 = v8 + 514;
          v11[8] = 4;
          *((_WORD *)v11 + 5) = v9[4];
          *((void *)v11 + 2) = v9[3];
          uint64_t v7 = (uint64_t *)v7[1];
          v8 += 2;
        }
        while (v7 != &v16);
      }
      *(void *)&long long v19 = v5;
      WORD4(v19) = 2 * v2 + 6;
      *(void *)&long long v20 = &unk_1009B37E8;
      WORD4(v2sub_1004C2140(qword_100A19B68, 0) = 1;
      if (sub_10024E258((uint64_t)&v19, (int *)(a1 + 252)))
      {
        if (os_log_type_enabled((os_log_t)qword_100A1A000, OS_LOG_TYPE_ERROR)) {
          sub_100774BA0();
        }
        free(v6);
LABEL_26:
        uint64_t v12 = 1;
        goto LABEL_27;
      }
    }
    else
    {
      char v6 = 0;
    }
    uint64_t v12 = 0;
    *(void *)(a1 + 256) = v6;
    *(void *)(a1 + 288) = v2;
LABEL_27:
    sub_10001B8AC(&v14);
    goto LABEL_28;
  }
  uint64_t v12 = 105;
LABEL_28:
  sub_1002B308C(&v16);
  return v12;
}

void sub_1005103D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002B308C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005103FC(uint64_t a1, uint64_t a2)
{
  char v5 = 0;
  sub_10001B8E0(&v5);
  uint64_t v3 = sub_100163F78(2, 2, a2 + 128, 4111, (uint64_t)sub_1005104FC, (uint64_t (*)(uint64_t (*)(int *, unsigned int)))sub_1005105C4, (void (*)(void))sub_100510628, (uint64_t)sub_10051067C, (uint64_t)sub_100510700, (uint64_t)sub_100510764);
  if (v3)
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A000, OS_LOG_TYPE_ERROR)) {
      sub_100774C08();
    }
    uint64_t v3 = 305;
  }
  sub_10001B8AC(&v5);
  return v3;
}

void sub_1005104E8(_Unwind_Exception *a1)
{
  sub_10001B8AC((unsigned char *)(v1 - 17));
  _Unwind_Resume(a1);
}

void sub_1005104FC(__int16 a1, int *a2, uint64_t a3)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009B3870);
  }
  int v7 = *a2;
  __int16 v8 = *((_WORD *)a2 + 2);
  unint64_t v6 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v7, 1);
  if (qword_1009FBAC0 != -1) {
    dispatch_once(&qword_1009FBAC0, &stru_1009B3830);
  }
  sub_1005109C0((uint64_t)off_1009FBAB8, v6, a1, a3);
}

uint64_t sub_1005105C4(uint64_t a1)
{
  if (qword_1009FBAC0 != -1) {
    dispatch_once(&qword_1009FBAC0, &stru_1009B3830);
  }
  unsigned int v2 = off_1009FBAB8;

  return sub_100510ACC((uint64_t)v2, a1);
}

uint64_t sub_100510628()
{
  if (qword_1009FBAC0 != -1) {
    dispatch_once(&qword_1009FBAC0, &stru_1009B3830);
  }
  uint64_t v0 = off_1009FBAB8;

  return sub_100510BAC((uint64_t)v0);
}

uint64_t sub_10051067C(const void *a1, unsigned int a2)
{
  if (qword_1009FBAC0 != -1) {
    dispatch_once(&qword_1009FBAC0, &stru_1009B3830);
  }
  uint64_t v4 = *((void *)off_1009FBAB8 + 33);
  if (!v4) {
    return 3404;
  }

  return sub_10036EE7C(v4, a1, a2);
}

pthread_cond_t *sub_100510700()
{
  if (qword_1009FBAC0 != -1) {
    dispatch_once(&qword_1009FBAC0, &stru_1009B3830);
  }
  uint64_t result = (pthread_cond_t *)*((void *)off_1009FBAB8 + 33);
  if (result)
  {
    return (pthread_cond_t *)sub_10036EE08(result);
  }
  return result;
}

uint64_t sub_100510764(int a1)
{
  if (qword_1009FBAC0 != -1) {
    dispatch_once(&qword_1009FBAC0, &stru_1009B3830);
  }
  unsigned int v2 = off_1009FBAB8;
  uint64_t v3 = sub_1004BE238(off_1009FBAB8, a1);

  return sub_1004BE538((uint64_t)v2, v3, 0);
}

BOOL sub_1005107EC(void *a1, unint64_t a2)
{
  unsigned int v2 = sub_1004BE120(a1, a2);
  char v5 = 0;
  sub_10001B8E0(&v5);
  BOOL v3 = sub_100164158(v2) != 0;
  sub_10001B8AC(&v5);
  return v3;
}

void sub_100510840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_100510854(void *a1, int *a2, unsigned int a3, int a4)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009B3870);
  }
  int v11 = *a2;
  __int16 v12 = *((_WORD *)a2 + 2);
  uint64_t v8 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v11, 1);
  if (a1[36])
  {
    uint64_t v9 = v8;
    if (sub_1004BDDAC((uint64_t)a1, v8)) {
      sub_1004BD554(a1, v9);
    }
  }
  uint64_t result = sub_100163EB0(a3, a4, (uint64_t)sub_1005104FC, (uint64_t (*)(uint64_t (*)(int *, unsigned int)))sub_1005105C4, (uint64_t)sub_100510628, (uint64_t)sub_10051067C, (uint64_t)sub_100510700, (uint64_t)sub_100510764, 0);
  if (result)
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A000, OS_LOG_TYPE_ERROR)) {
      sub_100774C70();
    }
    return sub_100164158(a3);
  }
  return result;
}

void sub_1005109C0(uint64_t a1, unint64_t a2, __int16 a3, uint64_t a4)
{
  if (a4)
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A000, OS_LOG_TYPE_ERROR)) {
      sub_100774CD8();
    }
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009B3890);
    }
    int v7 = sub_1004E2340((uint64_t)off_1009F8068, a4, 20000);
    sub_1004BD6C8(a1, a2, v7);
  }
  sub_1004BE028(a1, a2, a3);
  sub_1004BD6C8(a1, a2, 0);
}

uint64_t sub_100510ACC(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 280);
  *(_DWORD *)(a1 + 28sub_1004C2140(qword_100A19B68, 0) = v2 + 1;
  if (v2 > 0) {
    return 0;
  }
  int v7 = (uint64_t *)(a1 + 264);
  uint64_t v8 = *(void *)(a1 + 264);
  if (!v8)
  {
    unsigned int v12 = 1;
    unsigned int v13 = 2;
    sub_100510DE4(&v13, &v12, (void *)(a1 + 8), &v14);
    long long v9 = v14;
    long long v14 = 0uLL;
    long long v10 = *(std::__shared_weak_count **)(a1 + 272);
    *(_OWORD *)int v7 = v9;
    if (v10)
    {
      sub_10008A294(v10);
      if (*((void *)&v14 + 1)) {
        sub_10008A294(*((std::__shared_weak_count **)&v14 + 1));
      }
      uint64_t v8 = *v7;
      if (*v7) {
        goto LABEL_9;
      }
      return 3403;
    }
    uint64_t v8 = v9;
    if (!(void)v9) {
      return 3403;
    }
  }
LABEL_9:
  uint64_t v3 = sub_10036E55C(v8, a2);
  if (v3)
  {
    int v11 = *(std::__shared_weak_count **)(a1 + 272);
    uint64_t *v7 = 0;
    v7[1] = 0;
    if (v11) {
      sub_10008A294(v11);
    }
  }
  return v3;
}

uint64_t sub_100510BAC(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 280);
  BOOL v2 = __OFSUB__(v1--, 1);
  *(_DWORD *)(a1 + 28sub_1004C2140(qword_100A19B68, 0) = v1;
  if (!((v1 < 0) ^ v2 | (v1 == 0))) {
    return 0;
  }
  *(_DWORD *)(a1 + 28sub_1004C2140(qword_100A19B68, 0) = 0;
  uint64_t v5 = sub_10036EAFC(*(void *)(a1 + 264));
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 272);
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  if (v4) {
    sub_10008A294(v4);
  }
  return v5;
}

uint64_t sub_100510C08()
{
  return 6;
}

void sub_100510C10(id a1)
{
}

void sub_100510C88()
{
}

void sub_100510CAC(id a1)
{
}

void sub_100510CF0()
{
}

void sub_100510D14(id a1)
{
}

void sub_100510D58()
{
}

void sub_100510D7C(id a1)
{
}

void sub_100510DC0()
{
}

void sub_100510DE4(unsigned int *a1@<X1>, unsigned int *a2@<X2>, void *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x61C0uLL);
  sub_100510E70(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;

  sub_1002EEC08((uint64_t)a4, v8 + 3, (uint64_t)(v8 + 3));
}

void sub_100510E5C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100510E70(void *a1, unsigned int *a2, unsigned int *a3, void *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1009B38C0;
  sub_10036E458(a1 + 3, *a2, *a3, *a4);
  return a1;
}

void sub_100510EC4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100510ED8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1009B38C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100510EF8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1009B38C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100510F4C(uint64_t a1)
{
  return sub_10036E4C8(a1 + 24);
}

void sub_100510F58()
{
  uint64_t v0 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "ScoDataBufferOverflowCB", v1, 2u);
  }
}

void sub_100510FC0(os_unfair_lock_s *a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5)
{
  int v56 = 0;
  if (*(unsigned char *)(a5 + 8))
  {
    long long v10 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109632;
      unsigned int v58 = a2;
      __int16 v59 = 1024;
      int v60 = a3;
      __int16 v61 = 2048;
      *(void *)int v62 = sub_100045F00(a4);
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "HandsfreeGateway::ScoReceiveDataCB: wakeupCause SCO Packet from BT Controller (hfpHandle=0x%hX erroneous=%hhu len=%zu)\n", buf, 0x18u);
    }
  }
  int v11 = sub_100511724((uint64_t)a1, a2);
  if (v11)
  {
    v55[0] = 0;
    v55[1] = 0;
    sub_10003AED0((uint64_t)v55, (uint64_t)&a1[190]);
    if (!sub_10027678C((uint64_t)(v11 + 50))) {
      goto LABEL_20;
    }
    if (sub_100028CB4((uint64_t)(v11 + 50)) == 256
      || sub_100028CB4((uint64_t)(v11 + 50)) == 127)
    {
      if ((unint64_t)sub_100045F00(a4) > 1)
      {
        unsigned __int8 v13 = sub_100045F00(a4);
        sub_1005D0D4C((uint64_t)v11, v13);
        long long v14 = (unsigned __int8 *)sub_10004A6E4(a4);
        uint64_t v15 = v14[1];
        unsigned __int8 v16 = sub_10027675C((uint64_t)(v11 + 50));
        if (a3 || sub_100045F00(a4) != v16 || sub_100045F00(a4) < (unint64_t)(v15 + 2))
        {
          int v17 = v14[1];
          int v18 = *v14;
          char v19 = sub_100045F00(a4);
          v14[1] = 0;
          sub_1005D0DD4((uint64_t)v11);
          LOBYTE(v15) = v19 - 2;
          if (!a3)
          {
            long long v20 = qword_100A19E70;
            if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
            {
              uint64_t v51 = sub_100045F00(a4);
              *(_DWORD *)long long buf = 67110400;
              unsigned int v58 = 0;
              __int16 v59 = 1024;
              int v60 = v15;
              __int16 v61 = 1024;
              *(_DWORD *)int v62 = v16;
              *(_WORD *)&uint8_t v62[4] = 2048;
              *(void *)&v62[6] = v51;
              __int16 v63 = 1024;
              int v64 = v18;
              __int16 v65 = 1024;
              int v66 = v17;
              _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Clearing UL voice data err:%d, length to codec:%d, maxPacketSize:%d, data.getSize():%zu, seq %d, length in payload %d", buf, 0x2Au);
            }
          }
        }
        BOOL v21 = (char *)sub_10004A6E4(a4);
        sub_1002E81FC((uint64_t)v11, v21, v15 + 2, *(unsigned __int8 *)(a5 + 8));
        goto LABEL_20;
      }
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
      {
LABEL_10:
        uint64_t v12 = sub_100045F00(a4);
        sub_100774DAC((uint64_t)buf, v12);
      }
LABEL_20:
      sub_10003AFB4((uint64_t)v55);
      return;
    }
    if (sub_100028CB4((uint64_t)(v11 + 50)) != 128
      && sub_100028CB4((uint64_t)(v11 + 50)) != 129
      && sub_100028CB4((uint64_t)(v11 + 50)) != 255
      && sub_100028CB4((uint64_t)(v11 + 50)) != 130)
    {
      long long v47 = (char *)sub_10004A6E4(a4);
      unint64_t v48 = sub_100045F00(a4);
      sub_1002E7E88((uint64_t)v11, v47, v48, *(unsigned __int8 *)(a5 + 8));
      goto LABEL_20;
    }
    if ((unint64_t)sub_100045F00(a4) <= 1)
    {
      if (!os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
        goto LABEL_20;
      }
      goto LABEL_10;
    }
    unsigned __int8 v22 = sub_100045F00(a4);
    sub_1005D0D4C((uint64_t)v11, v22);
    long long v53 = (unsigned __int8 *)sub_10004A6E4(a4);
    uint64_t v23 = sub_10027653C((uint64_t)(v11 + 50));
    if (a3)
    {
      if (sub_10027653C((uint64_t)(v11 + 50)))
      {
        uint64_t v24 = sub_10027653C((uint64_t)(v11 + 50));
        if (sub_100478B2C(v24, 44))
        {
          uint64_t v25 = qword_100A19E70;
          if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "Generate two PLC for mono UL in stereo config", buf, 2u);
          }
          v53[1] = 0;
          sub_1005D0DD4((uint64_t)v11);
          if ((unint64_t)sub_100045F00(a4) < 0x3C)
          {
            int v49 = qword_100A19E70;
            if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
            {
              uint64_t v50 = sub_100045F00(a4);
              sub_100774F8C((uint64_t)buf, v50, v49);
            }
          }
          else
          {
            uint64_t v26 = (char *)sub_10004A6E4(a4);
            sub_1002E81FC((uint64_t)v11, v26, 0x3CuLL, *(unsigned __int8 *)(a5 + 8));
            unint64_t v27 = (char *)sub_10004A6E4(a4);
            sub_1002E81FC((uint64_t)v11, v27, 0x3CuLL, *(unsigned __int8 *)(a5 + 8));
          }
        }
      }
      goto LABEL_20;
    }
    uint64_t v28 = v23;
    int v29 = *v53;
    if (v23
      && sub_100478B2C(v23, 41)
      && (uint64_t v30 = sub_100035F54(), (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v30 + 792))(v30, 11)))
    {
      *(_WORD *)long long buf = 0;
      __int16 v54 = 0;
      uint64_t v31 = (unsigned __int8 *)sub_10004A6E4(a4);
      uint64_t v32 = sub_100045F00(a4);
      if (!sub_100511820(v32, v31, v32, (_WORD *)&v56 + 1, &v56, buf, &v54)) {
        goto LABEL_20;
      }
      __int16 v33 = v54;
      if (v54)
      {
        uint64_t v34 = sub_10004A6E4(a4);
        sub_100511AD4(a1, v28, v34 + *(unsigned __int16 *)buf, v33);
      }
      uint64_t v35 = sub_10004A6E4(a4);
      uint64_t v52 = HIWORD(v56);
      long long v53 = (unsigned __int8 *)(v35 + HIWORD(v56));
      unsigned __int8 v36 = v56;
      if ((_WORD)v56)
      {
LABEL_46:
        unsigned int v37 = 0;
        unsigned int v38 = v36;
        while (v38 > v37)
        {
          unint64_t v39 = sub_100045F00(a4);
          uint64_t v40 = v39;
          if (v39 < v37)
          {
            if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
              sub_100774DE8(v40);
            }
            goto LABEL_20;
          }
          unint64_t v41 = v39 - v37;
          if (v41 <= 1)
          {
            if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
              sub_100774E60();
            }
            goto LABEL_20;
          }
          int v42 = v53[v37];
          uint64_t v43 = v53[v37 + 1];
          if (v37 && v29 + 1 != v42) {
            goto LABEL_20;
          }
          size_t v44 = v43 + 2;
          if (v41 < v43 + 2)
          {
            if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
              sub_100774ED4(v41);
            }
            goto LABEL_20;
          }
          uint64_t v45 = sub_10004A6E4(a4);
          sub_1002E81FC((uint64_t)v11, (char *)(v45 + v52 + v37), v44, *(unsigned __int8 *)(a5 + 8));
          unsigned int v46 = v44 + v37;
          unsigned int v37 = (unsigned __int16)(v44 + v37);
          int v29 = v42;
          if (v46 >= 0x10000)
          {
            if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEBUG)) {
              sub_100774F4C();
            }
            goto LABEL_20;
          }
        }
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v52 = 0;
    }
    unsigned __int8 v36 = sub_10027675C((uint64_t)(v11 + 50));
    goto LABEL_46;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
    sub_100774D40();
  }
}

void sub_1005116D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100511724(uint64_t a1, unsigned int a2)
{
  unsigned __int16 v12 = a2;
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, a1 + 760);
  uint64_t v4 = *(void *)(a1 + 832);
  if (!v4) {
    goto LABEL_19;
  }
  uint64_t v5 = a1 + 832;
  do
  {
    unsigned int v6 = *(unsigned __int16 *)(v4 + 32);
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      uint64_t v8 = (uint64_t *)v4;
    }
    else {
      uint64_t v8 = (uint64_t *)(v4 + 8);
    }
    if (v7) {
      uint64_t v5 = v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 832 && *(unsigned __int16 *)(v5 + 32) <= a2)
  {
    unsigned __int8 v13 = &v12;
    long long v9 = sub_1002CBD28((uint64_t **)(a1 + 824), &v12, (uint64_t)&unk_1007BE9D0, &v13)[5];
  }
  else
  {
LABEL_19:
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
      sub_100774FDC();
    }
    long long v9 = 0;
  }
  sub_10003AFB4((uint64_t)v11);
  return v9;
}

void sub_10051180C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_100511820(uint64_t a1, unsigned __int8 *a2, unint64_t a3, _WORD *a4, _WORD *a5, _WORD *a6, _WORD *a7)
{
  int v8 = *a2;
  int v9 = v8 & 0xF;
  if ((v8 & 0xF0) == 0x80) {
    int v10 = v8 & 0xF;
  }
  else {
    int v10 = 0;
  }
  if ((v10 - 4) < 0xFFFFFFFD)
  {
    int v11 = qword_100A19E70;
    BOOL result = os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      int v13 = a2[1];
      int v14 = a2[2];
      int v15 = a2[3];
      int v16 = a2[4];
      int v17 = a2[5];
      int v18 = a2[6];
      int v19 = a2[7];
      v35[0] = 67111168;
      v35[1] = v10;
      __int16 v36 = 1024;
      int v37 = v8;
      __int16 v38 = 1024;
      int v39 = v13;
      __int16 v40 = 1024;
      int v41 = v14;
      __int16 v42 = 1024;
      int v43 = v15;
      __int16 v44 = 1024;
      int v45 = v16;
      __int16 v46 = 1024;
      int v47 = v17;
      __int16 v48 = 1024;
      int v49 = v18;
      __int16 v50 = 1024;
      int v51 = v19;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "uplink frame total chunk invalid :%u, %02x,%02x,%02x,%02x,%02x,%02x,%02x,%02x", (uint8_t *)v35, 0x38u);
      return 0;
    }
    return result;
  }
  if ((v8 & 0xF) == 0 || a3 == 0) {
    return 1;
  }
  __int16 v21 = 0;
  uint64_t v22 = 1;
  int v23 = 1;
  BOOL result = 1;
  while (1)
  {
    unsigned int v24 = a2[v22];
    if (v24 >> 4 == 10) {
      break;
    }
    if (v24 >> 4 != 9)
    {
      BOOL result = os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      sub_100775048();
      return 0;
    }
    int v25 = v24 & 0xF0;
    unsigned int v26 = v24 & 0xF;
    if (v25 != 144) {
      unsigned int v26 = 0;
    }
    unsigned int v27 = v26;
    if (v26 >= 3)
    {
      BOOL result = os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      sub_1007750B4();
      return 0;
    }
    ++v23;
    if (*a4)
    {
      if (v26) {
        goto LABEL_22;
      }
    }
    else
    {
      *a4 = v23;
      if (v26)
      {
        do
        {
LABEL_22:
          int v28 = a2[(unsigned __int16)(v23 + 1)];
          v21 += v28;
          v23 += v28 + 2;
          --v27;
        }
        while (v27);
      }
    }
    *a5 = v21 + 2 * v26;
LABEL_31:
    if ((_BYTE)--v9)
    {
      uint64_t v22 = (unsigned __int16)v23;
      if ((unsigned __int16)v23 <= a3) {
        continue;
      }
    }
    return result;
  }
  int v29 = v24 & 0xF0;
  int v30 = v24 & 0xF;
  if (v29 == 160) {
    unsigned int v31 = v30;
  }
  else {
    unsigned int v31 = 0;
  }
  if (v31 < 2)
  {
    int v32 = *(unsigned __int16 *)&a2[(unsigned __int16)(v23 + 1)];
    int v33 = v23 + 3;
    if (!*a6) {
      *a6 = v33;
    }
    int v34 = (unsigned __int16)*a7 + v32;
    *a7 = v34;
    int v23 = v34 + v33;
    goto LABEL_31;
  }
  BOOL result = os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR);
  if (!result) {
    return result;
  }
  sub_10077511C();
  return 0;
}

void sub_100511AD4(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_10052A7C4;
  void v4[3] = &unk_1009B3D60;
  v4[4] = a2;
  void v4[5] = a3;
  __int16 v5 = a4;
  sub_10052A6C0(a1 + 82, v4);
}

void sub_100511B48()
{
  uint64_t v0 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "ScoTransportReadyCB", v1, 2u);
  }
}

void sub_100511BB0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "ScoTxPacketCompletedCB: numCompletedPackets %d", (uint8_t *)v5, 8u);
  }
}

uint64_t sub_100511C54(uint64_t a1, int a2, unsigned int a3, uint64_t a4, int a5, int a6, int a7, int a8, unsigned __int8 a9)
{
  v22[0] = 0;
  v22[1] = 0;
  sub_10003AED0((uint64_t)v22, a1 + 760);
  int v17 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "eSCO parameters:", buf, 2u);
    int v17 = qword_100A19E70;
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 67109120;
    int v24 = a2;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "\t\tstatus:\t\t\t%{bluetooth:OI_STATUS}u", buf, 8u);
    int v17 = qword_100A19E70;
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 67109120;
    int v24 = a5;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "\t\ttxInterval:\t\t%d", buf, 8u);
    int v17 = qword_100A19E70;
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 67109120;
    int v24 = a6;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "\t\treTxWindow:\t\t%d", buf, 8u);
    int v17 = qword_100A19E70;
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 67109120;
    int v24 = a7;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "\t\trxPacketLength: %d", buf, 8u);
    int v17 = qword_100A19E70;
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 67109120;
    int v24 = a8;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "\t\ttxPacketLength: %d", buf, 8u);
    int v17 = qword_100A19E70;
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 67109120;
    int v24 = a9;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "\t\tairMode:\t\t%2x", buf, 8u);
  }
  int v18 = sub_100511724(a1, a3);
  uint64_t v19 = (uint64_t)v18;
  if (v18)
  {
    sub_100276754((uint64_t)(v18 + 50), a8);
    sub_100276764(v19 + 400, a7);
    sub_100276774(v19 + 400, a5);
    sub_100276794(v19 + 400, 0);
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009B3FE0);
    }
    sub_10069D31C((uint64_t)off_1009F7EB8);
    sub_100276544(v19 + 400, a4);
    if (sub_1005D038C(v19))
    {
      sub_1005D1258(v19);
      long long v20 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "IO already started from audio layer, now that we have a connection handle, triggering sendthread to start", buf, 2u);
      }
      sub_1005D144C(v19);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
  {
    sub_100775188();
  }
  return sub_10003AFB4((uint64_t)v22);
}

void sub_100511FFC(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100512018(uint64_t a1, uint64_t a2)
{
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, a1 + 760);
  uint64_t v4 = *(void **)(a1 + 824);
  __int16 v5 = (void *)(a1 + 832);
  if (v4 == v5)
  {
LABEL_9:
    uint64_t v9 = 0;
  }
  else
  {
    while (sub_10027653C(v4[5] + 400) != a2)
    {
      unsigned int v6 = (void *)v4[1];
      if (v6)
      {
        do
        {
          BOOL v7 = v6;
          unsigned int v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          BOOL v7 = (void *)v4[2];
          BOOL v8 = *v7 == (void)v4;
          uint64_t v4 = v7;
        }
        while (!v8);
      }
      uint64_t v4 = v7;
      if (v7 == v5) {
        goto LABEL_9;
      }
    }
    uint64_t v9 = v4[5];
  }
  sub_10003AFB4((uint64_t)v11);
  return v9;
}

void sub_1005120D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1005120E4(uint64_t a1, uint64_t a2)
{
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 760);
  uint64_t v4 = sub_100512018(a1, a2);
  if (v4) {
    uint64_t v5 = sub_1002766EC(v4 + 400);
  }
  else {
    uint64_t v5 = 0;
  }
  sub_10003AFB4((uint64_t)v7);
  return v5;
}

void sub_100512150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_100512164(uint64_t a1, uint64_t a2, __n128 *a3)
{
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, a1 + 760);
  uint64_t v6 = sub_100512018(a1, a2);
  uint64_t v7 = v6;
  if (v6)
  {
    sub_1005D0D20(v6, a3);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
  {
    sub_100475EE0(a2, (uint64_t)v9);
    sub_1007751F4();
  }
  sub_10003AFB4((uint64_t)v10);
  return v7 != 0;
}

void sub_100512248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100512268(uint64_t a1, uint64_t a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1 + 760);
  if (a2 && sub_100512018(a1, a2))
  {
    uint64_t v4 = sub_100512018(a1, a2);
    sub_1005D0D38(v4);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
  {
    sub_100775248();
  }
  return sub_10003AFB4((uint64_t)v6);
}

void sub_1005122FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100512310(uint64_t a1, uint64_t a2, int a3)
{
  unsigned __int16 v17 = a3;
  v16[0] = 0;
  v16[1] = 0;
  sub_10003AED0((uint64_t)v16, a1 + 760);
  uint64_t v30 = 0;
  long long v29 = 0u;
  memset(v28, 0, sizeof(v28));
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  *(_OWORD *)int v23 = 0u;
  sub_1006161E0((uint64_t)&v22 + 1);
  BYTE2(v23[0]) = 0;
  BYTE4(v23[0]) = 0;
  BYTE2(v25) = 0;
  BYTE4(v25) = 0;
  HIDWORD(v28[2]) = 0;
  long long v24 = 0uLL;
  v23[1] = 0;
  LOBYTE(v25) = 0;
  long long v26 = 0uLL;
  *((void *)&v25 + 1) = 0;
  LOBYTE(v27) = 0;
  v28[0] = 0;
  v28[1] = 0;
  *((void *)&v27 + 1) = 0;
  *(_DWORD *)((char *)&v28[1] + 7) = 0;
  LOBYTE(v28[3]) = 1;
  BYTE2(v3sub_1004C2140(qword_100A19B68, 0) = 0;
  *(void *)((char *)&v28[3] + 6) = 0;
  *(void *)((char *)&v28[3] + 1) = 0;
  long long v29 = 0uLL;
  v28[5] = 0;
  LOBYTE(v3sub_1004C2140(qword_100A19B68, 0) = 0;
  uint64_t v6 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a2, &__p);
    uint64_t v7 = v19 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)long long buf = 67109378;
    LODWORD(v21[0]) = a3;
    WORD2(v21[0]) = 2082;
    *(void *)((char *)v21 + 6) = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Now tracking handle %d for device %{public}s", buf, 0x12u);
    if (v19 < 0) {
      operator delete(__p);
    }
  }
  uint64_t v8 = *(void *)(a1 + 832);
  if (!v8) {
    goto LABEL_18;
  }
  uint64_t v9 = a1 + 832;
  do
  {
    unsigned int v10 = *(unsigned __int16 *)(v8 + 32);
    BOOL v11 = v10 >= v17;
    if (v10 >= v17) {
      unsigned __int16 v12 = (uint64_t *)v8;
    }
    else {
      unsigned __int16 v12 = (uint64_t *)(v8 + 8);
    }
    if (v11) {
      uint64_t v9 = v8;
    }
    uint64_t v8 = *v12;
  }
  while (*v12);
  if (v9 == a1 + 832 || v17 < *(unsigned __int16 *)(v9 + 32))
  {
LABEL_18:
    int v13 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a2, &__p);
      if (v19 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      *(_DWORD *)long long buf = 136446210;
      v21[0] = p_p;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Creating HFPAudioDevice for device %{public}s", buf, 0xCu);
      if (v19 < 0) {
        operator delete(__p);
      }
    }
    operator new();
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
    sub_1007752E4();
  }
  if (SHIBYTE(v28[1]) < 0) {
    operator delete(*((void **)&v27 + 1));
  }
  if (SHIBYTE(v26) < 0) {
    operator delete(*((void **)&v25 + 1));
  }
  if (SHIBYTE(v24) < 0) {
    operator delete(v23[1]);
  }
  nullsub_95((char *)&v22 + 1);
  return sub_10003AFB4((uint64_t)v16);
}

void sub_100512DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

uint64_t sub_100512E48(os_unfair_lock_s *a1, unsigned __int8 *a2, unint64_t *a3)
{
  uint64_t v87 = 0;
  uint64_t v88 = 0;
  v86[0] = 0;
  v86[1] = 0;
  sub_10003AED0((uint64_t)v86, (uint64_t)&a1[190]);
  if (sub_10027667C((uint64_t)(a3 + 50)))
  {
    int v6 = 127;
    sub_1002766F4((uint64_t)(a3 + 50), 127);
  }
  else if (sub_10027663C((uint64_t)(a3 + 50)))
  {
    int v6 = 256;
    sub_1002766F4((uint64_t)(a3 + 50), 256);
  }
  else if (sub_10027661C((uint64_t)(a3 + 50)))
  {
    int v6 = 2;
    sub_1002766F4((uint64_t)(a3 + 50), 2);
  }
  else
  {
    int v6 = 1;
    sub_1002766F4((uint64_t)(a3 + 50), 1);
  }
  uint64_t v7 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    p_p = &__p;
    sub_100474E18((uint64_t)a2, &__p);
    if (v90 < 0) {
      p_p = *(CFUUIDBytes **)&__p.byte0;
    }
    unsigned int v10 = sub_100513D34(v9, v6);
    uint64_t v11 = sub_100512018((uint64_t)a1, (uint64_t)a2);
    if (v11) {
      LODWORD(v11) = sub_1002766AC(v11 + 400);
    }
    *(_DWORD *)long long buf = 136446722;
    *(void *)&uint8_t buf[4] = p_p;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&unsigned char buf[14] = v10;
    *(_WORD *)&unsigned char buf[22] = 1024;
    LODWORD(v92) = v11;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Creating HFPAudioDevice for device %{public}s with codec: %s, HandsfreeAoS %d", buf, 0x1Cu);
    if (v90 < 0) {
      operator delete(*(void **)&__p.byte0);
    }
  }
  sub_1004A82EC(a2 + 128, &__p);
  if (v90 >= 0) {
    unsigned __int16 v12 = &__p;
  }
  else {
    unsigned __int16 v12 = *(CFUUIDBytes **)&__p.byte0;
  }
  sub_10004191C(buf, (char *)v12);
  sub_1002E7A48((uint64_t)a3, (const void **)buf);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (v90 < 0) {
    operator delete(*(void **)&__p.byte0);
  }
  sub_100475EE0((uint64_t)a2, (uint64_t)&__p);
  if (v90 >= 0) {
    int v13 = &__p;
  }
  else {
    int v13 = *(CFUUIDBytes **)&__p.byte0;
  }
  sub_10004191C(buf, (char *)v13);
  sub_1002E7BD4((uint64_t)a3, (uint64_t)buf);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (v90 < 0) {
    operator delete(*(void **)&__p.byte0);
  }
  sub_1004A82EC(a2 + 128, &__p);
  if (v90 >= 0) {
    int v14 = &__p;
  }
  else {
    int v14 = *(CFUUIDBytes **)&__p.byte0;
  }
  sub_10004191C(buf, (char *)v14);
  sub_1002E79BC((uint64_t)a3, (uint64_t)buf);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (v90 < 0) {
    operator delete(*(void **)&__p.byte0);
  }
  sub_1002E7BCC((uint64_t)a3, (uint64_t)a2);
  int v15 = sub_100513E14((uint64_t)a1, (uint64_t)a2);
  sub_1002E857C((uint64_t)a3, v15);
  int v17 = sub_100514160(v16, (uint64_t)a2);
  sub_1005D0EF4((uint64_t)a3, v17);
  int v19 = sub_100514228(v18, (uint64_t)a2);
  sub_1005D0F04((uint64_t)a3, v19);
  uint64_t v20 = sub_100512018((uint64_t)a1, (uint64_t)a2);
  if (v20) {
    int v21 = sub_100276614(v20 + 400);
  }
  else {
    int v21 = 0;
  }
  sub_1005D0F14((uint64_t)a3, v21);
  uint64_t v22 = sub_100512018((uint64_t)a1, (uint64_t)a2);
  if (v22) {
    int v23 = sub_10027661C(v22 + 400);
  }
  else {
    int v23 = 0;
  }
  sub_1005D0F84((uint64_t)a3, v23);
  uint64_t v24 = sub_100512018((uint64_t)a1, (uint64_t)a2);
  if (v24) {
    int v25 = sub_10027667C(v24 + 400);
  }
  else {
    int v25 = 0;
  }
  sub_1005D0F24((uint64_t)a3, v25);
  uint64_t v26 = sub_100512018((uint64_t)a1, (uint64_t)a2);
  if (v26) {
    int v27 = sub_10027668C(v26 + 400);
  }
  else {
    int v27 = 0;
  }
  sub_1005D0F34((uint64_t)a3, v27);
  uint64_t v28 = sub_100512018((uint64_t)a1, (uint64_t)a2);
  if (v28) {
    int v29 = sub_10027663C(v28 + 400);
  }
  else {
    int v29 = 0;
  }
  sub_1005D0FA4((uint64_t)a3, v29);
  uint64_t v30 = sub_100512018((uint64_t)a1, (uint64_t)a2);
  if (v30) {
    int v31 = sub_10027664C(v30 + 400);
  }
  else {
    int v31 = 0;
  }
  sub_1005D0FB4((uint64_t)a3, v31);
  uint64_t v32 = sub_100512018((uint64_t)a1, (uint64_t)a2);
  if (v32) {
    int v33 = sub_10027665C(v32 + 400);
  }
  else {
    int v33 = 0;
  }
  sub_1005D0F44((uint64_t)a3, v33);
  uint64_t v34 = sub_100512018((uint64_t)a1, (uint64_t)a2);
  if (v34) {
    int v35 = sub_10027666C(v34 + 400);
  }
  else {
    int v35 = 0;
  }
  sub_1005D0F54((uint64_t)a3, v35);
  uint64_t v36 = sub_100512018((uint64_t)a1, (uint64_t)a2);
  if (v36) {
    int v37 = sub_1002766AC(v36 + 400);
  }
  else {
    int v37 = 0;
  }
  sub_1005D0F74((uint64_t)a3, v37);
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009B4000);
  }
  if (sub_1004ABC78((uint64_t)off_1009F7EF8))
  {
    BOOL v38 = 1;
  }
  else
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B4020);
    }
    BOOL v38 = sub_1006BC5E4((uint64_t)off_1009F7ED8);
  }
  sub_1005D1078((uint64_t)a3, v38);
  uint64_t v39 = sub_100512018((uint64_t)a1, (uint64_t)a2);
  if (v39) {
    int v40 = sub_100276594(v39 + 400);
  }
  else {
    int v40 = 0;
  }
  sub_1002EAA34((uint64_t)a3, v40);
  int v42 = sub_100514444(v41, (uint64_t)a2);
  sub_1005D0EE4((uint64_t)a3, v42);
  unsigned int v43 = sub_100514594((uint64_t)a1, (uint64_t)a2);
  sub_1002E786C((uint64_t)a3, (float)v43 / 15.0);
  int v44 = sub_1002765B4((uint64_t)(a3 + 50));
  sub_1002E837C((uint64_t)a3, v44);
  int v45 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    int v46 = sub_100478B2C((uint64_t)a2, 32);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v46;
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "HFP setSupportsTipi %d", buf, 8u);
  }
  int v47 = sub_100478B2C((uint64_t)a2, 32);
  sub_1002E83C4((uint64_t)a3, v47);
  int v48 = sub_10048153C((uint64_t)a2);
  sub_1005D0F94((uint64_t)a3, v48);
  int v49 = sub_100478B2C((uint64_t)a2, 5);
  __int16 v50 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    int v51 = "disabled";
    if (v49) {
      int v51 = "enabled";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v51;
    _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "Offloading Host DSL %s", buf, 0xCu);
  }
  sub_1005D113C((uint64_t)a3, v49);
  int v52 = sub_1004761A4((uint64_t)a2);
  sub_1002E8B38((uint64_t)a3, v52);
  if ((sub_100478B2C((uint64_t)a2, 12) & 1) == 0)
  {
    BOOL v53 = sub_100478AF4((uint64_t)a2);
    if (!v53)
    {
      int v54 = sub_1005145D0(v53, (uint64_t)a2);
      sub_1005D114C((uint64_t)a3, v54);
    }
  }
  int v55 = sub_100478B2C((uint64_t)a2, 12);
  sub_1002E85F8((uint64_t)a3, v55);
  if (qword_1009F80A0 != -1) {
    dispatch_once(&qword_1009F80A0, &stru_1009B4040);
  }
  int v56 = sub_10028CB30((uint64_t)off_1009F8098, (uint64_t)a2);
  sub_1002E8620((uint64_t)a3, v56);
  if (qword_1009F80A0 != -1) {
    dispatch_once(&qword_1009F80A0, &stru_1009B4040);
  }
  if (sub_10028CB30((uint64_t)off_1009F8098, (uint64_t)a2))
  {
    *(_DWORD *)long long buf = 0;
    *(_DWORD *)&__p.byte0 = 0;
    if (qword_1009F80A0 != -1) {
      dispatch_once(&qword_1009F80A0, &stru_1009B4040);
    }
    sub_10028FEDC((uint64_t)off_1009F8098, (uint64_t)a2, (int *)buf, (int *)&__p);
    sub_1002E8670((uint64_t)a3, buf[0], __p.byte0);
    int v85 = 3;
    if (qword_1009F80A0 != -1) {
      dispatch_once(&qword_1009F80A0, &stru_1009B4040);
    }
    sub_100290170((uint64_t)off_1009F8098, (uint64_t)a2, &v85);
    sub_1002E8680((uint64_t)a3, v85);
    unsigned __int8 v57 = sub_10048741C((uint64_t)a2);
    sub_1002E8690((uint64_t)a3, v57);
    if (qword_1009F80A0 != -1) {
      dispatch_once(&qword_1009F80A0, &stru_1009B4040);
    }
    int v58 = sub_10028FDB0((uint64_t)off_1009F8098, (uint64_t)a2);
    sub_1002E8648((uint64_t)a3, v58);
  }
  if ((sub_100478B2C((uint64_t)a2, 12) & 1) != 0 || sub_100478AF4((uint64_t)a2))
  {
    if (qword_1009F80A0 != -1) {
      dispatch_once(&qword_1009F80A0, &stru_1009B4040);
    }
    unsigned __int8 v59 = sub_10028C1C0((uint64_t)off_1009F8098, (uint64_t)a2);
    sub_1002E86A0((uint64_t)a3, v59);
  }
  sub_10047B7A8((uint64_t)a2, (_DWORD *)&v88 + 1, &v88, (_DWORD *)&v87 + 1, &v87);
  int v60 = sub_100478B2C((uint64_t)a2, 41);
  __int16 v61 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    int v62 = "Disabled";
    if (v60) {
      int v62 = "Enabled";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v62;
    _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "High Quality BiDirectional Audio %s", buf, 0xCu);
  }
  sub_1002E8DA0((uint64_t)a3, v60);
  if (sub_10047F4E8((uint64_t)a2))
  {
    unsigned __int8 v63 = sub_100487564((uint64_t)a2);
    sub_1002E86C0((uint64_t)a3, v63);
  }
  if (sub_1004875F4((uint64_t)a2))
  {
    int v64 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18((uint64_t)a2, buf);
      __int16 v65 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
      *(_DWORD *)&__p.byte0 = 136315138;
      *(void *)&__p.byte4 = v65;
      _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "Applying DontAutoRoute: %s", &__p.byte0, 0xCu);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    sub_100485998((uint64_t)a2, 0);
    sub_1002E908C((uint64_t)a3, 0);
  }
  if (sub_10048763C((uint64_t)a2))
  {
    int v66 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18((uint64_t)a2, buf);
      uint64_t v67 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
      *(_DWORD *)&__p.byte0 = 136315138;
      *(void *)&__p.byte4 = v67;
      _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "Applying AudioRouteHidden: %s", &__p.byte0, 0xCu);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    sub_1004859E0((uint64_t)a2, 0);
    sub_1002E9100((uint64_t)a3, 1);
  }
  int v68 = sub_100478B2C((uint64_t)a2, 25);
  sub_1002E8A98((uint64_t)a3, v68);
  int v69 = sub_100478B2C((uint64_t)a2, 37);
  sub_1005D115C((uint64_t)a3, v69);
  int v70 = sub_100478B2C((uint64_t)a2, 35);
  sub_1005D118C((uint64_t)a3, v70);
  *(void *)&__p.byte0 = 0;
  *(void *)&__p.byte8 = 0;
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009B4020);
  }
  sub_100014B58((uint64_t)off_1009F7ED8, ((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133], 1u, 1u, 0, 0, buf);
  int v71 = sub_100031234(buf);
  [v71 getUUIDBytes:&__p];

  sub_1002E8A58((uint64_t)a3, &__p);
  sub_10047B7A8((uint64_t)a2, (_DWORD *)&v88 + 1, &v88, (_DWORD *)&v87 + 1, &v87);
  sub_1002E8A68((uint64_t)a3, SHIDWORD(v87));
  sub_1002E8A78((uint64_t)a3, v87);
  sub_1002E8A88((uint64_t)a3, v88);
  float v72 = sub_1004893FC((uint64_t)a2);
  sub_1002E8AC0((uint64_t)a3, v72);
  sub_1002EACE8(buf, (uint64_t)(a2 + 1128));
  sub_1002E8B48((uint64_t)a3, (int **)buf);
  if (*(void *)buf)
  {
    *(void *)&uint8_t buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
  int v73 = sub_100489494((uint64_t)a2);
  sub_1002E8CA0((uint64_t)a3, v73);
  int v74 = sub_1004877EC((uint64_t)a2);
  sub_1002E89FC((uint64_t)a3, v74);
  int v75 = sub_100478B2C((uint64_t)a2, 44);
  sub_1005D117C((uint64_t)a3, v75);
  int v76 = sub_100487DD4((uint64_t)a2, 11);
  sub_1005D116C((uint64_t)a3, v76);
  if (sub_100478B2C((uint64_t)a2, 51))
  {
    uint64_t v77 = sub_10003FB34();
    int v78 = (*(uint64_t (**)(uint64_t))(*(void *)v77 + 2512))(v77);
  }
  else
  {
    int v78 = 0;
  }
  sub_1005D119C((uint64_t)a3, v78);
  sub_1002E8D00((uint64_t)a3, a2[960]);
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009B4060);
  }
  if (*((void *)off_1009F80A8 + 28))
  {
    int v79 = sub_10007FBE8(*((void *)off_1009F80A8 + 28));
    if (qword_1009F80B0 != -1) {
      dispatch_once(&qword_1009F80B0, &stru_1009B4060);
    }
  }
  else
  {
    int v79 = 0;
  }
  if (off_1009F80A8) {
    BOOL v80 = sub_10056B940((uint64_t)off_1009F80A8);
  }
  else {
    BOOL v80 = 0;
  }
  int v81 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v80;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v79;
    _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEFAULT, "Publish HFP device, notify BTHAL low Latency Game: %d, HID Allow AoS: %d", buf, 0xEu);
  }
  if ((v80 & v79) == 1) {
    sub_100514A14((uint64_t)a1, (uint64_t)a2, 1);
  }
  __int16 v82 = sub_100276534((uint64_t)(a3 + 50));
  *(void *)long long buf = _NSConcreteStackBlock;
  *(void *)&uint8_t buf[8] = 3221225472;
  *(void *)&uint8_t buf[16] = sub_10052A78C;
  __int16 v92 = &unk_1009B3D40;
  __int16 v93 = a2;
  __int16 v94 = v82;
  char v95 = 1;
  sub_10052A6C0(a1 + 82, buf);
  BOOL v83 = (sub_10047ECFC((uint64_t)a2) & 2) == 0;
  sub_1002E9FF8((uint64_t)a3, v83);
  sub_1002E6F28(a3);
  return sub_10003AFB4((uint64_t)v86);
}

void sub_100513C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
}

const char *sub_100513D34(uint64_t a1, int a2)
{
  if (a2 <= 126)
  {
    if (a2)
    {
      if (a2 == 1)
      {
        return "CSVD";
      }
      else if (a2 == 2)
      {
        return "mSBC";
      }
      else
      {
        return "Unknown";
      }
    }
    else
    {
      return "None";
    }
  }
  else
  {
    switch(a2)
    {
      case 127:
        BOOL result = "LC3";
        break;
      case 128:
        BOOL result = "AAC-ELD-Stereo";
        break;
      case 129:
        BOOL result = "AAC-ELD-Stereo48K";
        break;
      case 130:
        BOOL result = "AAC-ELD-Stereo48K-10ms";
        break;
      default:
        if (a2 == 255)
        {
          BOOL result = "LC3-Stereo";
        }
        else
        {
          if (a2 != 256) {
            return "Unknown";
          }
          BOOL result = "AAC-ELD";
        }
        break;
    }
  }
  return result;
}

uint64_t sub_100513E14(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100512018(a1, a2);
  int v4 = sub_100514160(v3, a2);
  uint64_t v5 = v3 + 400;
  if (((v4 == 1) & sub_10027669C(v3 + 400)) != 0) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 1000;
  }
  if (sub_100478B2C(a2, 12))
  {
    *(_DWORD *)long long buf = 0;
    LODWORD(__p[0]) = 0;
    uint64_t v17 = 0;
    sub_10047B7A8(a2, buf, __p, (_DWORD *)&v17 + 1, &v17);
    if ((HIDWORD(v17) - 8194) > 0x1D) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = dword_1007BF530[HIDWORD(v17) - 8194];
    }
  }
  uint64_t v7 = sub_1002763E0(v5);
  HIDWORD(v17) = v7;
  if (v7)
  {
    uint64_t v8 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Modified default sco delay to: %d", buf, 8u);
    }
    uint64_t v6 = v7;
  }
  uint64_t v9 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 8))(v9))
  {
    uint64_t v10 = sub_100017768();
    sub_10004191C(buf, "VoiceCommand");
    sub_10004191C(__p, "DelayInMsec");
    int v11 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v10 + 88))(v10, buf, __p, (char *)&v17 + 4);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v21 < 0)
    {
      operator delete(*(void **)buf);
      if (!v11) {
        goto LABEL_22;
      }
    }
    else if (!v11)
    {
      goto LABEL_22;
    }
    unsigned __int16 v12 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = HIDWORD(v17);
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Default write modified default sco delay to %dms", buf, 8u);
    }
    uint64_t v6 = HIDWORD(v17);
  }
LABEL_22:
  int v13 = qword_100A19E70;
  if ((int)v6 >= 2501)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v6;
      __int16 v19 = 1024;
      int v20 = 2500;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Sco delay is too large %d, set max delay to %dms", buf, 0xEu);
      int v13 = qword_100A19E70;
    }
    uint64_t v6 = 2500;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Delay between sco and audio activation is %dms", buf, 8u);
  }
  return v6;
}

void sub_100514124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100514160(uint64_t a1, uint64_t a2)
{
  int v3 = sub_100476458(a2);
  LOBYTE(v4) = 1;
  switch(v3)
  {
    case 0:
      int v5 = sub_100476054(a2);
      unint64_t v4 = 0x302030103010201uLL >> (8 * (v5 - 16));
      if ((v5 - 16) > 7) {
        LOBYTE(v4) = 0;
      }
      break;
    case 1:
      LOBYTE(v4) = 2;
      break;
    case 2:
      return v4;
    case 3:
      LOBYTE(v4) = 4;
      break;
    case 4:
      LOBYTE(v4) = 3;
      break;
    case 5:
      LOBYTE(v4) = 5;
      break;
    default:
      LOBYTE(v4) = 0;
      break;
  }
  return v4;
}

uint64_t sub_100514228(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = 0;
  long long v13 = 0u;
  memset(v12, 0, sizeof(v12));
  long long v10 = 0u;
  *(_OWORD *)CFUUIDBytes __p = 0u;
  long long v8 = 0u;
  *(_OWORD *)uint64_t v9 = 0u;
  long long v6 = 0u;
  *(_OWORD *)uint64_t v7 = 0u;
  sub_1006161E0((uint64_t)&v6 + 1);
  BYTE2(v7[0]) = 0;
  BYTE4(v7[0]) = 0;
  BYTE2(v9[0]) = 0;
  BYTE4(v9[0]) = 0;
  DWORD1(v12[1]) = 0;
  long long v8 = 0uLL;
  v7[1] = 0;
  LOBYTE(v9[0]) = 0;
  long long v10 = 0uLL;
  v9[1] = 0;
  LOBYTE(__p[0]) = 0;
  memset(v12, 0, 19);
  __p[1] = 0;
  BYTE8(v12[1]) = 1;
  BYTE2(v14) = 0;
  *(void *)((char *)&v12[1] + 14) = 0;
  *(void *)((char *)&v12[1] + 9) = 0;
  long long v13 = 0uLL;
  *((void *)&v12[2] + 1) = 0;
  LOBYTE(v14) = 0;
  if (a2)
  {
    if (sub_1004783B8(a2, (uint64_t)&v6))
    {
      a2 = DWORD2(v12[2]);
      if (DWORD2(v12[2]))
      {
        int v3 = qword_100A19E70;
        if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_INFO))
        {
          v5[0] = 67109120;
          v5[1] = a2;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "DSPTuning: %d", (uint8_t *)v5, 8u);
        }
      }
    }
    else
    {
      a2 = 0;
    }
  }
  if (SHIBYTE(v12[0]) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(v9[1]);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[1]);
  }
  nullsub_95((char *)&v6 + 1);
  return a2;
}

void sub_1005143B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100276384((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005143D4(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100512018(a1, a2);
  if (result)
  {
    uint64_t v3 = result + 400;
    return sub_10027661C(v3);
  }
  return result;
}

uint64_t sub_10051440C(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100512018(a1, a2);
  if (result)
  {
    uint64_t v3 = result + 400;
    return sub_10027663C(v3);
  }
  return result;
}

uint64_t sub_100514444(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = 0;
  long long v11 = 0u;
  memset(v10, 0, sizeof(v10));
  long long v8 = 0u;
  *(_OWORD *)CFUUIDBytes __p = 0u;
  long long v6 = 0u;
  *(_OWORD *)uint64_t v7 = 0u;
  long long v4 = 0u;
  *(_OWORD *)int v5 = 0u;
  sub_1006161E0((uint64_t)&v4 + 1);
  BYTE2(v5[0]) = 0;
  BYTE4(v5[0]) = 0;
  BYTE2(v7[0]) = 0;
  BYTE4(v7[0]) = 0;
  DWORD1(v10[1]) = 0;
  long long v6 = 0uLL;
  v5[1] = 0;
  LOBYTE(v7[0]) = 0;
  long long v8 = 0uLL;
  v7[1] = 0;
  LOBYTE(__p[0]) = 0;
  memset(v10, 0, 19);
  __p[1] = 0;
  BYTE8(v10[1]) = 1;
  BYTE2(v12) = 0;
  *(void *)((char *)&v10[1] + 14) = 0;
  *(void *)((char *)&v10[1] + 9) = 0;
  long long v11 = 0uLL;
  *((void *)&v10[2] + 1) = 0;
  LOBYTE(v12) = 0;
  if (a2)
  {
    if (sub_1004783B8(a2, (uint64_t)&v4)) {
      a2 = LODWORD(v10[2]);
    }
    else {
      a2 = 0;
    }
  }
  if (SHIBYTE(v10[0]) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[1]);
  }
  if (SHIBYTE(v6) < 0) {
    operator delete(v5[1]);
  }
  nullsub_95((char *)&v4 + 1);
  return a2;
}

void sub_100514578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100514594(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_100512018(a1, a2);
  uint64_t v3 = 12;
  if (v2)
  {
    unsigned int v4 = sub_100276584(v2 + 400);
    if (v4) {
      return v4;
    }
    else {
      return 12;
    }
  }
  return v3;
}

uint64_t sub_1005145D0(uint64_t a1, uint64_t a2)
{
  switch(sub_100476458(a2))
  {
    case 0u:
      uint64_t v3 = qword_100A19E70;
      BOOL v4 = os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (v4)
      {
        sub_100474E18(a2, __p);
        if (v21 >= 0) {
          long long v6 = __p;
        }
        else {
          long long v6 = (void **)__p[0];
        }
        *(_DWORD *)long long buf = 136446210;
        int v23 = v6;
        uint64_t v7 = "User selected device type is unknown. Returning user selected device type as kBluetoothAudioDeviceCategoryU"
             "nknown for device %{public}s.";
        goto LABEL_12;
      }
      break;
    case 1u:
      long long v10 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(a2, __p);
        long long v11 = v21 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)long long buf = 136446210;
        int v23 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Returning user selected device type as kBluetoothAudioDeviceCategoryCarkit for device %{public}s.", buf, 0xCu);
        if (v21 < 0) {
          operator delete(__p[0]);
        }
      }
      uint64_t result = 2;
      break;
    case 2u:
      uint64_t v12 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(a2, __p);
        long long v13 = v21 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)long long buf = 136446210;
        int v23 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Returning user selected device type as kBluetoothAudioDeviceCategoryHeadphone for device %{public}s.", buf, 0xCu);
        if (v21 < 0) {
          operator delete(__p[0]);
        }
      }
      uint64_t result = 1;
      break;
    case 3u:
      uint64_t v14 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(a2, __p);
        int v15 = v21 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)long long buf = 136446210;
        int v23 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "User selected device type is hearing aid. Returning user selected device type as kBluetoothAudioDeviceCategoryHearingAid for device %{public}s.", buf, 0xCu);
        if (v21 < 0) {
          operator delete(__p[0]);
        }
      }
      uint64_t result = 4;
      break;
    case 4u:
      char v16 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(a2, __p);
        uint64_t v17 = v21 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)long long buf = 136446210;
        int v23 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Returning user selected device type as kBluetoothAudioDeviceCategorySpeaker for device %{public}s.", buf, 0xCu);
        if (v21 < 0) {
          operator delete(__p[0]);
        }
      }
      uint64_t result = 3;
      break;
    case 5u:
      uint64_t v18 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(a2, __p);
        __int16 v19 = v21 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)long long buf = 136446210;
        int v23 = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "User selected device type is other. Returning user selected device type as kBluetoothAudioDeviceCategoryOther for device %{public}s.", buf, 0xCu);
        if (v21 < 0) {
          operator delete(__p[0]);
        }
      }
      uint64_t result = 5;
      break;
    default:
      uint64_t v3 = qword_100A19E70;
      BOOL v8 = os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (v8)
      {
        sub_100474E18(a2, __p);
        if (v21 >= 0) {
          uint64_t v9 = __p;
        }
        else {
          uint64_t v9 = (void **)__p[0];
        }
        *(_DWORD *)long long buf = 136446210;
        int v23 = v9;
        uint64_t v7 = "Returning user selected device type as kBluetoothAudioDeviceCategoryUnknown for device %{public}s.";
LABEL_12:
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, v7, buf, 0xCu);
        if (v21 < 0) {
          operator delete(__p[0]);
        }
        uint64_t result = 0;
      }
      break;
  }
  return result;
}

uint64_t sub_100514A14(uint64_t result, uint64_t a2, int a3)
{
  if (a2)
  {
    uint64_t v5 = result;
    if ((_os_feature_enabled_impl() & 1) != 0 || (uint64_t result = _os_feature_enabled_impl(), result))
    {
      uint64_t v6 = sub_100035F54();
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 240))(v6);
      if (result)
      {
        uint64_t result = sub_100478B2C(a2, 49);
        if (result)
        {
          uint64_t v7 = qword_100A19E70;
          if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
          {
            BOOL v8 = "off";
            if (a3) {
              BOOL v8 = "on";
            }
            LODWORD(v1sub_1004C2140(qword_100A19B68, 0) = 136315138;
            *(void *)((char *)&v10 + 4) = v8;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Notify BTHAL Low Latency Game is %s", (uint8_t *)&v10, 0xCu);
          }
          long long v10 = 0uLL;
          sub_10003AED0((uint64_t)&v10, v5 + 760);
          uint64_t v9 = sub_100512018(v5, a2);
          if (v9) {
            sub_1005D0F64(v9, a3);
          }
          return sub_10003AFB4((uint64_t)&v10);
        }
      }
    }
  }
  return result;
}

void sub_100514B80(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100514B9C(uint64_t a1, uint64_t a2, int a3)
{
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 760);
  uint64_t v6 = sub_100512018(a1, a2);
  if (v6)
  {
    sub_1005D116C(v6, a3);
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 7;
  }
  sub_10003AFB4((uint64_t)v9);
  return v7;
}

void sub_100514C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100514C28(uint64_t a1, uint64_t a2, int a3)
{
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 760);
  uint64_t v6 = sub_100512018(a1, a2);
  if (v6)
  {
    sub_1005D117C(v6, a3);
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 7;
  }
  sub_10003AFB4((uint64_t)v9);
  return v7;
}

void sub_100514CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100514CB4(uint64_t a1, uint64_t a2, unsigned __int8 a3, void *a4, unsigned __int8 a5, unsigned __int8 a6)
{
  id v10 = a4;
  if (a2 && (uint64_t v11 = sub_10027653C(a2 + 400)) != 0)
  {
    v12[0] = 3;
    v12[1] = sub_1002E7C4C(a2, v10);
    void v12[2] = a3;
    _OWORD v12[3] = a5;
    uint8_t v12[4] = a6;
    if (qword_1009F80A0 != -1) {
      dispatch_once(&qword_1009F80A0, &stru_1009B4040);
    }
    if (sub_1002939C0((uint64_t)off_1009F8098, v11, 5u, v12)
      && os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
    {
      sub_10077534C();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
  {
    sub_100775318();
  }
}

void sub_100514DD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100514DF4(uint64_t a1, uint64_t a2)
{
  v44[0] = 0;
  v44[1] = 0;
  sub_10003AED0((uint64_t)v44, a1 + 760);
  if (!sub_1005D038C(a2))
  {
    int v43 = 0;
    char v42 = 0;
    sub_10001B8E0(&v42);
    int v4 = sub_1001899FC((_WORD *)&v43 + 1, &v43);
    sub_10001B910(&v42);
    if (v4 && os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
      sub_1007753B4();
    }
    if (!a2 || (uint64_t v5 = sub_10027653C(a2 + 400)) == 0)
    {
LABEL_48:
      if (sub_1002766EC(a2 + 400) == 256 || sub_1002766EC(a2 + 400) == 127 || v4)
      {
        unsigned int v26 = HIWORD(v43);
        if (sub_10027675C(a2 + 400)) {
          unsigned int v27 = sub_10027675C(a2 + 400);
        }
        else {
          unsigned int v27 = 60;
        }
        if (v27 <= v26)
        {
          if (!sub_10027675C(a2 + 400))
          {
            __int16 v30 = 60;
            goto LABEL_66;
          }
          goto LABEL_60;
        }
      }
      else
      {
        if (sub_1002766EC(a2 + 400) != 128) {
          goto LABEL_67;
        }
        unsigned int v28 = HIWORD(v43);
        if (sub_10027675C(a2 + 400)) {
          unsigned int v29 = sub_10027675C(a2 + 400);
        }
        else {
          unsigned int v29 = 240;
        }
        if (v29 <= v28)
        {
          if (!sub_10027675C(a2 + 400))
          {
            __int16 v30 = 240;
            goto LABEL_66;
          }
LABEL_60:
          __int16 v30 = sub_10027675C(a2 + 400);
          goto LABEL_66;
        }
      }
      __int16 v30 = HIWORD(v43);
LABEL_66:
      HIWORD(v43) = v30;
LABEL_67:
      int v31 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        int v32 = HIWORD(v43);
        int v33 = sub_10027677C(a2 + 400);
        int v34 = sub_10027675C(a2 + 400);
        int v35 = sub_1002767A4(a2 + 400);
        *(_DWORD *)long long buf = 67110144;
        int v46 = v32;
        __int16 v47 = 1024;
        int v48 = 625 * v33;
        __int16 v49 = 1024;
        *(_DWORD *)__int16 v50 = v34;
        *(_WORD *)&v50[4] = 1024;
        *(_DWORD *)&unsigned char v50[6] = v35;
        __int16 v51 = 1024;
        int v52 = (unsigned __int16)v43;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Creating HF SendThread: HCI %d length, OTA interval %d us, %d bytes, and bt clk 0x%x numScoBuffers %d", buf, 0x20u);
      }
      uint64_t v36 = sub_100276534(a2 + 400);
      uint64_t v37 = HIWORD(v43);
      unsigned int v38 = sub_10027675C(a2 + 400);
      uint64_t v39 = (unsigned __int16)v43;
      int v40 = sub_1002766EC(a2 + 400);
      sub_1005D1288(a2, a1, v36, v37, v38, v39, v40);
    }
    uint64_t v6 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = HIWORD(v43);
      int v8 = (unsigned __int16)v43;
      uint64_t v9 = sub_1002766EC(a2 + 400);
      id v10 = sub_100513D34(v9, v9);
      *(_DWORD *)long long buf = 67109634;
      int v46 = v7;
      __int16 v47 = 1024;
      int v48 = v8;
      __int16 v49 = 2080;
      *(void *)__int16 v50 = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "ReadScoBuffer size:%hu, count:%u, codec:%s", buf, 0x18u);
    }
    uint64_t v11 = sub_100035F54();
    if (((*(uint64_t (**)(uint64_t))(*(void *)v11 + 328))(v11) & 1) != 0
      || (uint64_t v12 = sub_100035F54(), (*(unsigned int (**)(uint64_t))(*(void *)v12 + 336))(v12)))
    {
      if (sub_1002766EC(a2 + 400) == 2)
      {
        sub_10003FB34();
        if (sub_1000262C4()) {
          int v13 = 240;
        }
        else {
          int v13 = 192;
        }
        HIWORD(v43) = v13;
        uint64_t v14 = qword_100A19E70;
        if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 67109120;
          int v46 = v13;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Restore maxScoPacketSize for mSBC - %hu", buf, 8u);
        }
        goto LABEL_28;
      }
      uint64_t v15 = sub_100512018(a1, v5);
      if (v15 && sub_10027664C(v15 + 400) && sub_1002766EC(a2 + 400) == 128)
      {
        char v16 = qword_100A19E70;
        if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Restore maxScoPacketSize for AAC-ELD Stereo", buf, 2u);
        }
        __int16 v17 = 240;
LABEL_27:
        HIWORD(v43) = v17;
        goto LABEL_28;
      }
      if (sub_1002766EC(a2 + 400) == 1)
      {
        uint64_t v18 = qword_100A19E70;
        if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Restore maxScoPacketSize for CVSD", buf, 2u);
        }
        __int16 v17 = 120;
        goto LABEL_27;
      }
    }
LABEL_28:
    uint64_t v19 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v19 + 384))(v19))
    {
      if (sub_1002766EC(a2 + 400) == 1)
      {
        int v20 = qword_100A19E70;
        if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Restore macOS maxScoPacketSize for CVSD", buf, 2u);
        }
        HIWORD(v43) = 60;
      }
      else if (sub_1002766EC(a2 + 400) == 2)
      {
        sub_10003FB34();
        int v21 = sub_1000262C4() ? 240 : 120;
        HIWORD(v43) = v21;
        uint64_t v22 = qword_100A19E70;
        if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 67109120;
          int v46 = v21;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Restore macOS maxScoPacketSize for mSBC - %hu", buf, 8u);
        }
      }
    }
    if (sub_1002766EC(a2 + 400) == 255)
    {
      HIWORD(v43) = 360;
      int v23 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109120;
        int v46 = 360;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Max SCO packet size of LC3 stereo - %hu", buf, 8u);
      }
    }
    if (sub_1002766EC(a2 + 400) == 129)
    {
      HIWORD(v43) = 360;
      uint64_t v24 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109120;
        int v46 = 360;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Max SCO packet size of AAC-ELD stereo - %hu", buf, 8u);
      }
    }
    if (sub_1002766EC(a2 + 400) == 130)
    {
      HIWORD(v43) = 240;
      int v25 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109120;
        int v46 = 240;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Max SCO packet size of AAC-ELD stereo 10ms - %hu", buf, 8u);
      }
    }
    goto LABEL_48;
  }
  return sub_10003AFB4((uint64_t)v44);
}

void sub_1005154F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int16 a10, char a11, char a12, int a13, char a14)
{
}

uint64_t sub_100515530(uint64_t a1, uint64_t a2, int a3)
{
  unsigned __int16 v20 = a3;
  v19[0] = 0;
  v19[1] = 0;
  sub_10003AED0((uint64_t)v19, a1 + 760);
  uint64_t v6 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Removing HFP device %d from tracked audio devices", buf, 8u);
  }
  uint64_t v7 = *(void *)(a1 + 832);
  if (!v7) {
    goto LABEL_46;
  }
  uint64_t v8 = a1 + 832;
  do
  {
    unsigned int v9 = *(unsigned __int16 *)(v7 + 32);
    BOOL v10 = v9 >= v20;
    if (v9 >= v20) {
      uint64_t v11 = (uint64_t *)v7;
    }
    else {
      uint64_t v11 = (uint64_t *)(v7 + 8);
    }
    if (v10) {
      uint64_t v8 = v7;
    }
    uint64_t v7 = *v11;
  }
  while (*v11);
  if (v8 != a1 + 832 && v20 >= *(unsigned __int16 *)(v8 + 32))
  {
    *(void *)long long buf = &v20;
    uint64_t v12 = sub_1002CBD28((uint64_t **)(a1 + 824), &v20, (uint64_t)&unk_1007BE9D0, (_WORD **)buf)[5];
    if (v12 && (sub_10027662C((uint64_t)(v12 + 50)) & 1) == 0)
    {
      if (sub_1005D038C((uint64_t)v12)) {
        sub_1005D039C((uint64_t)v12);
      }
      if (sub_100276934((uint64_t)(v12 + 50)))
      {
        int v13 = qword_100A19E70;
        if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
        {
          sub_100474E18(a2, buf);
          uint64_t v14 = SHIBYTE(v25) >= 0 ? buf : *(uint8_t **)buf;
          *(_DWORD *)int v21 = 136446210;
          uint64_t v22 = v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Device %{public}s is in Expanse over A2DP. Clean up expanse A2DP states since device is unpublishing", v21, 0xCu);
          if (SHIBYTE(v25) < 0) {
            operator delete(*(void **)buf);
          }
        }
        (*(void (**)(uint64_t, uint64_t *, void))(*(void *)a1 + 192))(a1, v12, 0);
      }
      *(void *)long long buf = _NSConcreteStackBlock;
      uint64_t v24 = 3221225472;
      int v25 = sub_10052A78C;
      unsigned int v26 = &unk_1009B3D40;
      uint64_t v27 = a2;
      unsigned __int16 v28 = v20;
      char v29 = 0;
      sub_10052A6C0((os_unfair_lock_s *)(a1 + 328), buf);
      sub_1002E7878((uint64_t)v12);
    }
    char v18 = 0;
    sub_10001B8E0(&v18);
    if (sub_10018963C(a2 + 128) && os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
      sub_1007754F0();
    }
    if (sub_100478AF4(a2))
    {
      uint64_t v15 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(a2, buf);
        char v16 = SHIBYTE(v25) >= 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)int v21 = 136446210;
        uint64_t v22 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Disabling SCO Buffer Flush as %{public}s is disconnecting HFP", v21, 0xCu);
        if (SHIBYTE(v25) < 0) {
          operator delete(*(void **)buf);
        }
      }
      if (sub_10017F048(a2 + 128, 0) && os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
        sub_100775488();
      }
    }
    sub_10001B910(&v18);
    sub_1003BA1D0(a1 + 824, &v20);
    sub_10001B8AC(&v18);
  }
  else
  {
LABEL_46:
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
      sub_10077541C();
    }
  }
  return sub_10003AFB4((uint64_t)v19);
}

void sub_1005158FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100515934(uint64_t a1, uint64_t a2, unsigned int a3)
{
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 760);
  sub_10003FB34();
  if (!sub_1003541E8())
  {
LABEL_5:
    sub_100515B2C(a1, a2);
    return sub_10003AFB4((uint64_t)v9);
  }
  if (a3 <= 9)
  {
    char v8 = 0;
    sub_10001B8E0(&v8);
    BOOL v6 = sub_10019C4F8();
    if (!v6) {
      sub_100515A10(v6, a2, 10);
    }
    sub_10001B910(&v8);
    sub_10001B8AC(&v8);
    goto LABEL_5;
  }
  return sub_10003AFB4((uint64_t)v9);
}

void sub_1005159E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100515A10(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Delaying SCO connection by %d milliseconds", (uint8_t *)v5, 8u);
  }
  operator new();
}

void sub_100515B00()
{
}

uint64_t sub_100515B2C(uint64_t a1, unsigned int a2)
{
  int v4 = sub_100511724(a1, a2);
  if (!v4)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
      sub_100775558();
    }
    return 0;
  }
  uint64_t v5 = (uint64_t)v4;
  uint64_t v6 = sub_1005160B8(a1, a2);
  uint64_t v7 = v5 + 400;
  int v8 = sub_100276564(v5 + 400);
  unsigned int v9 = qword_100A19E70;
  BOOL v10 = os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT);
  if (v8 != 3)
  {
    if (v10)
    {
      sub_100474E18(v6, __p);
      uint64_t v15 = v25 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)long long buf = 136446210;
      uint64_t v27 = v15;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Making outgoing audio connection to device %{public}s", buf, 0xCu);
      if (v25 < 0) {
        operator delete(__p[0]);
      }
    }
    sub_1002B7CFC(11);
    uint64_t v16 = mach_absolute_time();
    if (qword_1009F80B0 != -1) {
      dispatch_once(&qword_1009F80B0, &stru_1009B4060);
    }
    *((void *)off_1009F80A8 + 23) = v16;
    if (sub_1002766FC(v5 + 400))
    {
      if (sub_100276564(v5 + 400) == 1)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
          sub_10077562C();
        }
        goto LABEL_41;
      }
      int v17 = sub_1005230E0(a1, v6);
      if (!v17)
      {
LABEL_41:
        sub_10027656C(v5 + 400, 1);
        return 1;
      }
    }
    else
    {
      LOBYTE(__p[0]) = 0;
      sub_10001B8E0(__p);
      int v17 = sub_100151C1C(a2);
      if (!v17)
      {
        uint64_t v18 = sub_10027653C(v5 + 400);
        int v17 = sub_10018F0E8((uint64_t)sub_100523038, v18 + 128);
      }
      sub_10001B910(__p);
      sub_10001B8AC(__p);
      if (!v17) {
        goto LABEL_41;
      }
    }
    if (v17 == 1806)
    {
      uint64_t v19 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(v6, __p);
        unsigned __int16 v20 = v25 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)long long buf = 136446210;
        uint64_t v27 = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Audio is already connected to device %{public}s", buf, 0xCu);
        if (v25 < 0) {
          operator delete(__p[0]);
        }
      }
      sub_1005D0DE4(v5, 1, 1806);
      sub_10051EBF4(a1, a2);
      return 1;
    }
    int v21 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
    {
      sub_100474E18(v6, __p);
      int v23 = v25 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)long long buf = 136446466;
      uint64_t v27 = v23;
      __int16 v28 = 1024;
      int v29 = v17;
      _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Audio connection to device %{public}s failed with result %{bluetooth:OI_STATUS}u", buf, 0x12u);
      if (v25 < 0) {
        operator delete(__p[0]);
      }
    }
    return 0;
  }
  if (v10)
  {
    sub_100474E18(v6, __p);
    uint64_t v11 = v25 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)long long buf = 136446210;
    uint64_t v27 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Accepting incoming audio connection from device %{public}s", buf, 0xCu);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
  }
  LOBYTE(__p[0]) = 0;
  sub_10001B8E0(__p);
  int v12 = sub_100151CAC(a2, 1);
  uint64_t v13 = sub_10027653C(v7);
  sub_10018F0E8((uint64_t)sub_100523038, v13 + 128);
  sub_10001B910(__p);
  BOOL v14 = v12 == 0;
  if (v12)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
      sub_1007755C4();
    }
    sub_10027656C(v7, 0);
    sub_10051F224(a1, a2, 0, v12);
  }
  else
  {
    sub_10027656C(v7, 0);
  }
  sub_10001B8AC(__p);
  return v14;
}

void sub_100515FBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10001B8AC(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100515FDC(uint64_t a1, uint64_t a2)
{
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, a1 + 760);
  int v4 = *(void **)(a1 + 824);
  uint64_t v5 = (void *)(a1 + 832);
  if (v4 == v5)
  {
LABEL_9:
    uint64_t v9 = 0;
  }
  else
  {
    while (sub_10027653C(v4[5] + 400) != a2)
    {
      uint64_t v6 = (void *)v4[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v4[2];
          BOOL v8 = *v7 == (void)v4;
          int v4 = v7;
        }
        while (!v8);
      }
      int v4 = v7;
      if (v7 == v5) {
        goto LABEL_9;
      }
    }
    uint64_t v9 = sub_100276534(v4[5] + 400);
  }
  sub_10003AFB4((uint64_t)v11);
  return v9;
}

void sub_1005160A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1005160B8(uint64_t a1, unsigned int a2)
{
  unsigned __int16 v13 = a2;
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, a1 + 760);
  uint64_t v4 = *(void *)(a1 + 832);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = a1 + 832;
  do
  {
    unsigned int v6 = *(unsigned __int16 *)(v4 + 32);
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      BOOL v8 = (uint64_t *)v4;
    }
    else {
      BOOL v8 = (uint64_t *)(v4 + 8);
    }
    if (v7) {
      uint64_t v5 = v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 832 && *(unsigned __int16 *)(v5 + 32) <= a2)
  {
    BOOL v14 = &v13;
    uint64_t v11 = sub_1002CBD28((uint64_t **)(a1 + 824), &v13, (uint64_t)&unk_1007BE9D0, &v14);
    uint64_t v9 = sub_10027653C((uint64_t)(v11[5] + 50));
  }
  else
  {
LABEL_12:
    uint64_t v9 = 0;
  }
  sub_10003AFB4((uint64_t)v12);
  return v9;
}

void sub_100516180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100516194(uint64_t a1, uint64_t a2)
{
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, a1 + 760);
  uint64_t v4 = *(void **)(a1 + 824);
  uint64_t v5 = (void *)(a1 + 832);
  if (v4 == v5)
  {
LABEL_12:
    uint64_t v10 = 0;
  }
  else
  {
    while (1)
    {
      unint64_t v6 = sub_100276554(v4[5] + 400);
      BOOL v7 = v6 == *(_DWORD *)a2 && WORD2(v6) == *(unsigned __int16 *)(a2 + 4);
      if (v7) {
        break;
      }
      BOOL v8 = (void *)v4[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          BOOL v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void *)v4[2];
          BOOL v7 = *v9 == (void)v4;
          uint64_t v4 = v9;
        }
        while (!v7);
      }
      uint64_t v4 = v9;
      if (v9 == v5) {
        goto LABEL_12;
      }
    }
    uint64_t v10 = sub_100276534(v4[5] + 400);
  }
  sub_10003AFB4((uint64_t)v12);
  return v10;
}

void sub_100516274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10051628C@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, std::string *a3@<X8>)
{
  v13[0] = 0;
  v13[1] = 0;
  sub_10003AED0((uint64_t)v13, a1 + 760);
  uint64_t v6 = *(void *)(a1 + 832);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = a1 + 832;
  do
  {
    unsigned int v8 = *(unsigned __int16 *)(v6 + 32);
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      uint64_t v10 = (uint64_t *)v6;
    }
    else {
      uint64_t v10 = (uint64_t *)(v6 + 8);
    }
    if (v9) {
      uint64_t v7 = v6;
    }
    uint64_t v6 = *v10;
  }
  while (*v10);
  if (v7 != a1 + 832 && *(unsigned __int16 *)(v7 + 32) <= a2)
  {
    uint64_t v12 = sub_1005160B8(a1, a2);
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
    sub_1004A82EC((unsigned __int8 *)(v12 + 128), a3);
    std::string::append(a3, "-tsco");
  }
  else
  {
LABEL_12:
    sub_10004191C(a3, "null");
  }
  return sub_10003AFB4((uint64_t)v13);
}

void sub_100516360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v9 + 23) < 0) {
    operator delete(*(void **)v9);
  }
  sub_10003AFB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100516390(uint64_t a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  if (v4)
  {
    switch(a2)
    {
      case 1:
      case 4:
        operator new();
      case 2:
        operator new();
      case 3:
      case 5:
      case 6:
      case 7:
        break;
      case 8:
        operator new();
      default:
        if (a2 == 16) {
          operator new();
        }
        if (a2 == 32) {
          operator new();
        }
        return;
    }
    sub_1002E53B8(0, (const char *)a1, &v5);
    *a3 = v5;
  }
}

void sub_100516544()
{
}

void sub_100516598(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  int v6 = *(_DWORD *)(a2 + 768);
  if (v6 == 32)
  {
    uint64_t v15 = 0;
    long long v14 = 0u;
    memset(v13, 0, sizeof(v13));
    long long v11 = 0u;
    *(_OWORD *)CFUUIDBytes __p = 0u;
    long long v9 = 0u;
    *(_OWORD *)uint64_t v10 = 0u;
    long long v7 = 0u;
    *(_OWORD *)unsigned int v8 = 0u;
    sub_1006161E0((uint64_t)&v7 + 1);
    BYTE2(v8[0]) = 0;
    BYTE4(v8[0]) = 0;
    BYTE2(v10[0]) = 0;
    BYTE4(v10[0]) = 0;
    DWORD1(v13[1]) = 0;
    long long v9 = 0uLL;
    v8[1] = 0;
    LOBYTE(v10[0]) = 0;
    long long v11 = 0uLL;
    v10[1] = 0;
    LOBYTE(__p[0]) = 0;
    memset(v13, 0, 19);
    __p[1] = 0;
    BYTE8(v13[1]) = 1;
    BYTE2(v15) = 0;
    *(void *)((char *)&v13[1] + 14) = 0;
    *(void *)((char *)&v13[1] + 9) = 0;
    long long v14 = 0uLL;
    *((void *)&v13[2] + 1) = 0;
    LOBYTE(v15) = 0;
    sub_1004783B8(a2, (uint64_t)&v7);
    if (SHIBYTE(v13[0]) < 0) {
      operator delete(__p[1]);
    }
    if (SHIBYTE(v11) < 0) {
      operator delete(v10[1]);
    }
    if (SHIBYTE(v9) < 0) {
      operator delete(v8[1]);
    }
    nullsub_95((char *)&v7 + 1);
    int v6 = *(_DWORD *)(a2 + 768);
  }
  sub_100516390(a1, v6, a3);
}

void sub_100516700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10051671C(uint64_t a1, int a2)
{
  if ((a2 - 129) >= 2 && a2 != 255) {
    return 0;
  }
  char v4 = 0;
  sub_10001B8E0(&v4);
  uint64_t v2 = sub_10017E73C();
  sub_10001B8AC(&v4);
  return v2;
}

void sub_10051677C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_100516790(uint64_t a1)
{
  sub_100283C88(a1, 2);
  *(void *)a1 = off_1009B38F8;
  *(void *)(a1 + 256) = off_1009B3A88;
  *(void *)(a1 + 264) = off_1009B3AC8;
  *(void *)(a1 + 272) = &off_1009B3AF8;
  *(void *)(a1 + 28sub_1004C2140(qword_100A19B68, 0) = off_1009B3B10;
  *(void *)(a1 + 288) = &off_1009B3BA8;
  *(void *)(a1 + 296) = off_1009B3BD0;
  *(void *)(a1 + 304) = off_1009B3C38;
  *(void *)(a1 + 312) = off_1009B3C78;
  *(void *)(a1 + 32sub_1004C2140(qword_100A19B68, 0) = &off_1009B3CA8;
  *(_DWORD *)(a1 + 328) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 336) = 0;
  sub_100275378(a1 + 360);
  *(unsigned char *)(a1 + 752) = 0;
  sub_100052DA8(a1 + 760);
  *(void *)(a1 + 84sub_1004C2140(qword_100A19B68, 0) = 0;
  *(void *)(a1 + 832) = 0;
  *(void *)(a1 + 824) = a1 + 832;
  uint64_t v2 = sub_100017768();
  sub_10004191C(buf, "PTS");
  sub_10004191C(__p, "PhoneNumberHack");
  (*(void (**)(uint64_t, uint8_t *, void **, uint64_t))(*(void *)v2 + 72))(v2, buf, __p, a1 + 752);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(*(void **)buf);
  }
  if (*(unsigned char *)(a1 + 752))
  {
    uint64_t v3 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "PTS phone number hack enabled", buf, 2u);
    }
  }
  return a1;
}

void sub_100516A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  sub_1000486F0(v21 + 824, *v24);
  sub_100052DA4(v23);
  sub_100275590(v22);
  unsigned int v26 = *(void **)(v21 + 336);
  if (v26)
  {
    *(void *)(v21 + 344) = v26;
    operator delete(v26);
  }
  sub_100283DC8(v21);
  _Unwind_Resume(a1);
}

void sub_100516A94()
{
}

uint64_t sub_100516AA0(uint64_t a1)
{
  uint64_t v2 = sub_100017768();
  sub_10004191C(v10, "Handsfree");
  sub_10004191C(__p, "VVMSleep");
  (*(void (**)(uint64_t, void **, void **, int *))(*(void *)v2 + 88))(v2, v10, __p, &dword_1009FBAC8);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B3FA0);
  }
  sub_10026B36C((uint64_t)off_1009F8068 + 64, a1 + 264);
  uint64_t v3 = sub_10003FFD4();
  sub_10052B99C(v3 + 408, a1 + 272);
  uint64_t v4 = sub_1004AFA9C();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_100516D14;
  void v7[3] = &unk_100997528;
  void v7[4] = a1;
  sub_1000197D8(v4, v7);
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009B4000);
  }
  sub_100061288((uint64_t)off_1009F7EF8 + 240, a1 + 312);
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009B4020);
  }
  sub_1006CF2B4((uint64_t)off_1009F7ED8, a1 + 320);
  if (qword_1009F87A8 != -1) {
    dispatch_once(&qword_1009F87A8, &stru_1009B40A0);
  }
  sub_1000CED0C((uint64_t)off_1009F87A0 + 24, a1 + 288);
  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_1009B40C0);
  }
  sub_10060C070(off_1009F8760, a1 + 304);
  uint64_t v5 = sub_10003FB34();
  sub_100353FC0(v5, a1 + 296);
  return 0;
}

void sub_100516CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v20 - 17) < 0) {
    operator delete(*(void **)(v20 - 40));
  }
  _Unwind_Resume(exception_object);
}

void sub_100516D14(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1009FB120 != -1) {
    dispatch_once(&qword_1009FB120, &stru_1009B4080);
  }
  sub_10062ECC4((uint64_t)off_1009FB118, v1 + 256);
  sub_100516D90(v1);
  sub_100516EC4(v1);

  sub_10051715C(v1);
}

uint64_t sub_100516D90(uint64_t a1)
{
  uint64_t v2 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 64))(v2)) {
    __int16 v3 = 3947;
  }
  else {
    __int16 v3 = 3939;
  }
  uint64_t v4 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 56))(v4)) {
    v3 |= 4u;
  }
  uint64_t v5 = *(void *)sub_100035F54();
  if (((*(uint64_t (**)(void))(v5 + 384))() & 1) == 0)
  {
    if (qword_1009FB120 != -1) {
      dispatch_once(&qword_1009FB120, &stru_1009B4080);
    }
    if (sub_10062F6A4((uint64_t)off_1009FB118)) {
      v3 |= 0x80u;
    }
  }
  uint64_t v6 = a1 + 360;
  sub_10027561C(v6, v3);

  return sub_10027562C(v6, 15);
}

void sub_100516EC4(uint64_t a1)
{
  memset(v10, 0, sizeof(v10));
  sub_10004191C(&v10[1], "");
  int v9 = 0;
  if (qword_1009FB120 != -1) {
    dispatch_once(&qword_1009FB120, &stru_1009B4080);
  }
  if (sub_10062F044((uint64_t)off_1009FB118))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
      sub_1007756C8();
    }
  }
  else
  {
    int v6 = (int)v10[0];
    if (SHIBYTE(v10[3]) < 0)
    {
      sub_10003B098(&__p, v10[1], (unint64_t)v10[2]);
    }
    else
    {
      long long __p = *(_OWORD *)&v10[1];
      char v8 = v10[3];
    }
    sub_100275670(a1 + 360, (uint64_t)&v6);
    if (SHIBYTE(v8) < 0) {
      operator delete((void *)__p);
    }
  }
  if (qword_1009FB120 != -1) {
    dispatch_once(&qword_1009FB120, &stru_1009B4080);
  }
  uint64_t v2 = sub_10062F06C((uint64_t)off_1009FB118);
  if (v2)
  {
    sub_1002756B8(a1 + 360, v2);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
  {
    sub_100775694();
  }
  if (qword_1009FB120 != -1) {
    dispatch_once(&qword_1009FB120, &stru_1009B4080);
  }
  if (sub_10062F094((uint64_t)off_1009FB118))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
      sub_100775660();
    }
  }
  else
  {
    sub_100275928(a1 + 360, v9);
  }
  __int16 v5 = 0;
  uint64_t v3 = sub_10003FFD4();
  (*(void (**)(uint64_t, char *, __int16 *))(*(void *)v3 + 96))(v3, (char *)&v5 + 1, &v5);
  if (v5 == 100) {
    LOBYTE(v4) = 5;
  }
  else {
    unsigned int v4 = v5 / 0x14u + 1;
  }
  sub_100275938(a1 + 360, v4);

  if (SHIBYTE(v10[3]) < 0) {
    operator delete(v10[1]);
  }
}

void sub_100517114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

void sub_10051715C(uint64_t a1)
{
  memset(v3, 0, sizeof(v3));
  sub_10061F99C(v3);
  if (qword_1009FB120 != -1) {
    dispatch_once(&qword_1009FB120, &stru_1009B4080);
  }
  if (sub_10062F0BC((uint64_t)off_1009FB118))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
      sub_1007756FC();
    }
  }
  else
  {
    sub_10061FA28((int)v2);
    sub_1002759CC(a1 + 360, v2);
    unsigned int v4 = (void **)v2;
    sub_10027696C(&v4);
  }
  unsigned int v4 = (void **)v3;
  sub_10027696C(&v4);
}

void sub_100517230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  *(void *)(v13 - 24) = &a10;
  sub_10027696C((void ***)(v13 - 24));
  *(void *)(v13 - 24) = &a13;
  sub_10027696C((void ***)(v13 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_100517264(uint64_t a1)
{
  uint64_t v2 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 8))(v2))
  {
    LOBYTE(v34[0]) = 0;
    uint64_t v3 = sub_100017768();
    sub_10004191C(buf, "CATT");
    sub_10004191C(__p, "AudioSinkSdp");
    (*(void (**)(uint64_t, uint8_t *, void **, void *))(*(void *)v3 + 72))(v3, buf, __p, v34);
    if (v32 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v36) < 0) {
      operator delete(*(void **)buf);
    }
    if (LOBYTE(v34[0]))
    {
      unsigned int v4 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Adding HF role into SDP", buf, 2u);
      }
      *(_OWORD *)long long buf = xmmword_1009B3CB8;
      uint64_t v36 = "Handsfree";
      __p[0] = buf;
      __p[1] = (void *)1;
      LOBYTE(v33) = 0;
      sub_10001B8E0(&v33);
      if (sub_1001004E0((uint64_t)__p, 0, 511, 387, (uint64_t)sub_1005179AC)
        && os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
      {
        sub_100775800();
      }
      sub_10001B8AC(&v33);
    }
  }
  *(_OWORD *)long long __p = off_1009B3CE8;
  uint64_t v5 = sub_100035F54();
  if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 792))(v5, 6))
  {
    int v6 = 3;
  }
  else
  {
    long long v7 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "WBS / mSBC for HFP disabled by defaults write", buf, 2u);
    }
    int v6 = 1;
  }
  uint64_t v8 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v8 + 792))(v8, 7))
  {
    v6 |= 0x100u;
    int v9 = qword_100A19E70;
    if (!os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_24;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v10 = "UWBS / AAC-ELD for HFP enabled";
  }
  else
  {
    int v9 = qword_100A19E70;
    if (!os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_24;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v10 = "UWBS / AAC-ELD for HFP disabled by defaults write";
  }
  _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v10, buf, 2u);
LABEL_24:
  uint64_t v11 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v11 + 792))(v11, 8))
  {
    v6 |= 0x80u;
    uint64_t v12 = qword_100A19E70;
    if (!os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_30;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v13 = "UWBSStereo for HFP enabled";
  }
  else
  {
    uint64_t v12 = qword_100A19E70;
    if (!os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_30;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v13 = "UWBSStereo for HFP disabled by defaults write";
  }
  _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v13, buf, 2u);
LABEL_30:
  uint64_t v14 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v14 + 792))(v14, 9)) {
    int v15 = v6 | 4;
  }
  else {
    int v15 = v6;
  }
  sub_10003FB34();
  if (sub_1000262C4()) {
    v15 |= 0x10u;
  }
  uint64_t v16 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v16 + 792))(v16, 10)) {
    v15 |= 0x200u;
  }
  uint64_t v17 = sub_10003FB34();
  if (sub_100350D94(v17)) {
    v15 |= 0x400u;
  }
  uint64_t v18 = sub_10003FB34();
  int v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 2504))(v18);
  char v30 = 0;
  sub_10001B8E0(&v30);
  uint64_t v20 = a1 + 360;
  unsigned int v21 = sub_100275624(v20);
  int v22 = sub_10014F328((uint64_t)__p, 0, v21, v15, (uint64_t)sub_100517A14, 0);
  if (!v22) {
    goto LABEL_43;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
    sub_100775798();
  }
  if (v22 == 140)
  {
LABEL_43:
    if (v19)
    {
      uint64_t v23 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Registering Handsfree AoS", buf, 2u);
      }
      sub_100264548((uint64_t)sub_100517AA4);
    }
    char v24 = sub_100275634(v20);
    sub_10014F800(v24);
    if (!sub_10014F828((uint64_t)sub_100517CD8, 0))
    {
      char v25 = sub_1002756A8(v20);
      char v26 = sub_1002756B0(v20);
      unsigned int v27 = sub_100275930(v20);
      unsigned int v28 = sub_100275940(v20);
      sub_10015173C(v25, v26, v27, v28);
      v34[0] = 0;
      v34[1] = 0;
      [objc_alloc((Class)NSUUID) initWithUUIDBytes:v34];
      sub_100276160(v20, v15);
      sub_100276170(v20, v19);
      operator new();
    }
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
      sub_100775730();
    }
    sub_10014F784();
  }
  sub_10001B8AC(&v30);
  return 1;
}

void sub_1005178F8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
}

void sub_1005179AC()
{
  uint64_t v0 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "Received hf event", v1, 2u);
  }
}

void sub_100517A14()
{
}

void sub_100517A80()
{
}

void sub_100517AA4(uint64_t a1, const void *a2, unsigned int a3, char a4)
{
  uint64_t v7 = sub_100197A30(a1);
  __int16 v8 = sub_100156DD0(v7);
  uint64_t v20 = &off_100998428;
  unsigned int v21 = 0;
  if (a3)
  {
    sub_1000335D8(&v17, a2, a3);
    sub_100049EE0((uint64_t)&v20, (uint64_t)&v17);
    uint64_t v17 = &off_100998428;
    if (v18) {
      sub_1000368F4(v18);
    }
    char v9 = 0;
  }
  else
  {
    __int16 v19 = 0;
    sub_1000335D8(&v17, &v19, 2uLL);
    sub_100049EE0((uint64_t)&v20, (uint64_t)&v17);
    uint64_t v17 = &off_100998428;
    if (v18) {
      sub_1000368F4(v18);
    }
    char v9 = 2;
  }
  uint64_t v10 = sub_1004AFA9C();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3321888768;
  void v11[2] = sub_10052BF3C;
  v11[3] = &unk_1009B3DD8;
  char v15 = a4;
  __int16 v14 = v8;
  char v16 = v9;
  uint64_t v12 = &off_100998428;
  uint64_t v13 = v21;
  if (v21) {
    sub_100037354((uint64_t)v21);
  }
  sub_100013018(v10, v11);
  uint64_t v12 = &off_100998428;
  if (v13) {
    sub_1000368F4(v13);
  }
  uint64_t v20 = &off_100998428;
  if (v21) {
    sub_1000368F4(v21);
  }
}

void sub_100517C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, atomic_uint *a17)
{
  if (a17) {
    sub_1000368F4(a17);
  }
  *(void *)(v18 - 64) = v17;
  uint64_t v20 = *(atomic_uint **)(v18 - 56);
  if (v20) {
    sub_1000368F4(v20);
  }
  _Unwind_Resume(exception_object);
}

void sub_100517CD8()
{
}

void sub_100517D4C()
{
}

uint64_t sub_100517D70()
{
  char v3 = 0;
  sub_10001B8E0(&v3);
  if (sub_10014F784())
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
      sub_1007758D0();
    }
LABEL_4:
    uint64_t v0 = 1;
    goto LABEL_10;
  }
  uint64_t v1 = sub_10003FB34();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v1 + 2504))(v1))
  {
    uint64_t v0 = 0;
    goto LABEL_10;
  }
  uint64_t v0 = sub_100264E20();
  if (v0)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
      sub_100775868();
    }
    goto LABEL_4;
  }
LABEL_10:
  sub_10001B8AC(&v3);
  return v0;
}

void sub_100517E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_100517E74(uint64_t a1)
{
  uint64_t v2 = sub_1004AFA9C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_100517FF0;
  void v5[3] = &unk_100997528;
  _DWORD v5[4] = a1;
  sub_1000197D8(v2, v5);
  uint64_t v3 = sub_10003FFD4();
  sub_10052BE64(v3 + 408, a1 + 272);
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B3FA0);
  }
  sub_100052718((uint64_t)off_1009F8068 + 64, a1 + 264);
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009B4000);
  }
  sub_100052718((uint64_t)off_1009F7EF8 + 240, a1 + 312);
  if (qword_1009F87A8 != -1) {
    dispatch_once(&qword_1009F87A8, &stru_1009B40A0);
  }
  sub_100052718((uint64_t)off_1009F87A0 + 24, a1 + 288);
  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_1009B40C0);
  }
  sub_10060C1AC((uint64_t)off_1009F8760, a1 + 304);
  return 0;
}

void sub_100517FF0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1009FB120 != -1) {
    dispatch_once(&qword_1009FB120, &stru_1009B4080);
  }
  uint64_t v2 = off_1009FB118;

  sub_10062ED9C((uint64_t)v2, v1 + 256);
}

uint64_t sub_100518054()
{
  return 3;
}

BOOL sub_10051805C(uint64_t a1, uint64_t a2)
{
  return sub_100518080(a2) != -1;
}

uint64_t sub_100518080(uint64_t a1)
{
  long long v14 = xmmword_1007BF640;
  long long __p = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  if (!sub_10047AE08(a1, (uint64_t)&v14, 4u, &__p)) {
    goto LABEL_29;
  }
  uint64_t v3 = (long long *)__p;
  uint64_t v2 = v12;
  if (__p == v12) {
    goto LABEL_29;
  }
  unsigned int v4 = (long long *)__p;
  while (1)
  {
    if (*(unsigned char *)v4 == 6 && *((_WORD *)v4 + 1) == 2)
    {
      uint64_t v6 = *((void *)v4 + 1);
      BOOL v7 = *(unsigned char *)v6 == 3 && *(_DWORD *)(v6 + 8) == 3;
      if (v7 && *(unsigned char *)(v6 + 16) == 1) {
        break;
      }
    }
    if (++v4 == v12)
    {
      uint64_t v8 = 0xFFFFFFFFLL;
      goto LABEL_19;
    }
  }
  uint64_t v8 = *(unsigned int *)(v6 + 24);
LABEL_19:
  while (v3 != v2)
  {
    long long v10 = *v3;
    sub_1002D5394(&v10);
    ++v3;
    uint64_t v2 = v12;
  }
  if (v8 == -1)
  {
LABEL_29:
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
    {
      sub_100474E18(a1, &v10);
      sub_100775938();
    }
    uint64_t v8 = 0xFFFFFFFFLL;
  }
  if (__p)
  {
    uint64_t v12 = (long long *)__p;
    operator delete(__p);
  }
  return v8;
}

void sub_1005181E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t sub_100518210(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a2, __p);
    unsigned int v4 = v11 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)long long buf = 136446210;
    uint64_t v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Attempting to connect handsfree to device %{public}s", buf, 0xCu);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
  LOBYTE(__p[0]) = 0;
  sub_10001B8E0(__p);
  int v5 = sub_100518080(a2);
  int v6 = v5;
  if (v5 == -1)
  {
    uint64_t v7 = 1;
  }
  else
  {
    if (sub_1001564C8(a2 + 128, v5))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
        sub_1007759F4(v6);
      }
      uint64_t v7 = 305;
    }
    else
    {
      uint64_t v7 = 0;
    }
    uint64_t v8 = sub_10003FB34();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 2504))(v8)
      && sub_10048DD90(a2)
      && sub_100264630(a2 + 128)
      && os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
    {
      sub_10077598C();
    }
  }
  sub_10001B8AC(__p);
  return v7;
}

void sub_1005183E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_100518404(uint64_t a1, uint64_t a2)
{
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, a1 + 760);
  unsigned int v4 = sub_100516194(a1, a2 + 128);
  uint64_t v5 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 2504))(v5) && sub_10048DD90(a2))
  {
    int v6 = sub_100511724(a1, v4);
    uint64_t v7 = sub_100276944((uint64_t)(v6 + 50));
    if (v7) {
      sub_1005185B8(v7, a2 + 128);
    }
    char v10 = 0;
    sub_10001B8E0(&v10);
    if (sub_100264CF8(a2 + 128) && os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
      sub_100775AD8(v4);
    }
    sub_10001B8AC(&v10);
  }
  char v10 = 0;
  sub_10001B8E0(&v10);
  if (sub_1001566A8(v4, 1818))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
      sub_100775A64(v4);
    }
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v8 = 0;
  }
  sub_10001B8AC(&v10);
  sub_10003AFB4((uint64_t)v11);
  return v8;
}

void sub_100518580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14)
{
}

unsigned char *sub_1005185B8(uint64_t a1, uint64_t a2)
{
  char v7 = 0;
  sub_10001B8E0(&v7);
  uint64_t v3 = (unsigned __int16 *)sub_100197A30(a2);
  sub_10001B910(&v7);
  uint64_t v4 = *v3;
  uint64_t v5 = sub_10003FB34();
  (*(void (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)v5 + 1568))(v5, v4, 0, 1);
  return sub_10001B8AC(&v7);
}

void sub_100518648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_100518660(uint64_t a1, unsigned int a2, int a3)
{
  int v6 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v12) = 67109376;
    DWORD1(v12) = a2;
    WORD4(v12) = 1024;
    *(_DWORD *)((char *)&v12 + 1sub_1004C2140(qword_100A19B68, 0) = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Handsfree device handle %d disconnected with status %{bluetooth:OI_STATUS}u", (uint8_t *)&v12, 0xEu);
  }
  uint64_t v7 = sub_1005160B8(a1, a2);
  sub_100515530(a1, v7, a2);
  if (qword_1009FB130 != -1) {
    dispatch_once(&qword_1009FB130, &stru_1009B40E0);
  }
  sub_1002DE8D0(qword_1009FB128, v7);
  if (v7)
  {
    uint64_t v20 = 0;
    long long v19 = 0u;
    memset(v18, 0, sizeof(v18));
    long long v16 = 0u;
    *(_OWORD *)long long __p = 0u;
    long long v14 = 0u;
    *(_OWORD *)char v15 = 0u;
    long long v12 = 0u;
    *(_OWORD *)uint64_t v13 = 0u;
    sub_1006161E0((uint64_t)&v12 + 1);
    BYTE2(v13[0]) = 0;
    BYTE4(v13[0]) = 0;
    BYTE2(v15[0]) = 0;
    BYTE4(v15[0]) = 0;
    DWORD1(v18[1]) = 0;
    long long v14 = 0uLL;
    v13[1] = 0;
    LOBYTE(v15[0]) = 0;
    long long v16 = 0uLL;
    v15[1] = 0;
    LOBYTE(__p[0]) = 0;
    memset(v18, 0, 19);
    __p[1] = 0;
    BYTE8(v18[1]) = 1;
    BYTE2(v2sub_1004C2140(qword_100A19B68, 0) = 0;
    *(void *)((char *)&v18[1] + 14) = 0;
    *(void *)((char *)&v18[1] + 9) = 0;
    long long v19 = 0uLL;
    *((void *)&v18[2] + 1) = 0;
    LOBYTE(v2sub_1004C2140(qword_100A19B68, 0) = 0;
    BOOL v8 = sub_1004783B8(v7, (uint64_t)&v12);
    if (BYTE5(v18[2])) {
      BOOL v9 = v8;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9)
    {
      uint64_t v10 = sub_10003FB34();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)v10 + 216))(v10, 0, 1);
    }
    sub_1004BE538(a1, v7, 0);
    if (SHIBYTE(v18[0]) < 0) {
      operator delete(__p[1]);
    }
    if (SHIBYTE(v16) < 0) {
      operator delete(v15[1]);
    }
    if (SHIBYTE(v14) < 0) {
      operator delete(v13[1]);
    }
    nullsub_95((char *)&v12 + 1);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
  {
    sub_100775B4C();
  }
  uint64_t result = sub_1004BDB84(a1);
  if ((result & 1) == 0)
  {
    sub_10027577C(a1 + 360);
    if (sub_10027574C(a1 + 360)) {
      sub_10051892C(a1);
    }
    uint64_t result = sub_100275948(a1 + 360);
    if (result) {
      return sub_100275950(a1 + 360, 0);
    }
  }
  return result;
}

void sub_100518910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10051892C(uint64_t a1)
{
  memset(v5, 0, sizeof(v5));
  sub_10061F99C(v5);
  uint64_t v2 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Cleaning up virtual call", buf, 2u);
  }
  if (qword_1009FB120 != -1) {
    dispatch_once(&qword_1009FB120, &stru_1009B4080);
  }
  sub_10062F67C((uint64_t)off_1009FB118);
  if (qword_1009FB120 != -1) {
    dispatch_once(&qword_1009FB120, &stru_1009B4080);
  }
  sub_10062F0BC((uint64_t)off_1009FB118);
  sub_100275A54(a1 + 360, v5);
  sub_100275754(a1 + 360, 1);
  *(void *)long long buf = 0;
  uint64_t v7 = 0;
  id v3 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:buf];
  sub_10051944C(a1, v5, v3);

  *(void *)long long buf = v5;
  sub_10027696C((void ***)buf);
  return 0;
}

void sub_100518AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a10;
  sub_10027696C(&a13);
  _Unwind_Resume(a1);
}

void sub_100518AD4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = sub_1004AFA9C();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_100518B64;
  void v7[3] = &unk_100998280;
  int v8 = a3;
  void v7[4] = a1;
  void v7[5] = a2;
  sub_100013018(v6, v7);
}

uint64_t sub_100518B64(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(_DWORD *)(a1 + 48) == 18)
  {
    uint64_t v2 = *(void *)(a1 + 32);
    return sub_100518CA8(v2);
  }
  else
  {
    v13[0] = 0;
    v13[1] = 0;
    sub_10003AED0((uint64_t)v13, v1 + 760);
    uint64_t v5 = sub_100512018(v1, *(void *)(a1 + 40));
    if (v5)
    {
      sub_100475EE0(*(void *)(a1 + 40), (uint64_t)v9);
      if (v10 >= 0) {
        uint64_t v6 = (char *)v9;
      }
      else {
        uint64_t v6 = (char *)v9[0];
      }
      sub_10004191C(__p, v6);
      sub_1002E7BD4(v5, (uint64_t)__p);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      if (v10 < 0) {
        operator delete(v9[0]);
      }
      int v8 = sub_100514160(v7, *(void *)(a1 + 40));
      sub_1005D0EF4(v5, v8);
    }
    return sub_10003AFB4((uint64_t)v13);
  }
}

void sub_100518C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  sub_10003AFB4((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_100518CA8(uint64_t a1)
{
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, a1 + 760);
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009B4000);
  }
  BOOL v2 = sub_1004ABC78((uint64_t)off_1009F7EF8);
  id v3 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    BOOL v14 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Device info change for incompatible classic hid %u", buf, 8u);
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009B4020);
  }
  BOOL v4 = sub_1006BC5E4((uint64_t)off_1009F7ED8);
  uint64_t v5 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    BOOL v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Device info change for incompatible LE hid %u", buf, 8u);
  }
  uint64_t v6 = *(void **)(a1 + 824);
  if (v6 != (void *)(a1 + 832))
  {
    do
    {
      uint64_t v7 = v6[5];
      if (v7) {
        sub_1002E83A4(v7, "kBTAudioMsgPropertyIncompatibleHidConnected", v2 || v4);
      }
      int v8 = (void *)v6[1];
      if (v8)
      {
        do
        {
          BOOL v9 = v8;
          int v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          BOOL v9 = (void *)v6[2];
          BOOL v10 = *v9 == (void)v6;
          uint64_t v6 = v9;
        }
        while (!v10);
      }
      uint64_t v6 = v9;
    }
    while (v9 != (void *)(a1 + 832));
  }
  return sub_10003AFB4((uint64_t)v12);
}

void sub_100518E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100518EB8(uint64_t a1, uint64_t a2, int a3)
{
}

void sub_100518EC0(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 == 4)
  {
    v7[7] = v3;
    v7[8] = v4;
    uint64_t v6 = sub_1004AFA9C();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    void v7[2] = sub_100518F48;
    void v7[3] = &unk_100997528;
    void v7[4] = a1;
    sub_100013018(v6, v7);
  }
}

uint64_t sub_100518F48(uint64_t a1)
{
  return sub_100518CA8(*(void *)(a1 + 32));
}

void sub_100518F50(uint64_t a1, uint64_t a2, int a3)
{
}

void sub_100518F58(uint64_t a1, uint64_t a2, int a3)
{
  if (!a3 && sub_100478B2C(a2, 12))
  {
    if (qword_1009F8398 != -1) {
      dispatch_once(&qword_1009F8398, &stru_1009B4100);
    }
    uint64_t v3 = off_1009F8390;
    sub_100508690((uint64_t)v3, 3, 3u);
  }
}

uint64_t sub_100518FD4(uint64_t result, uint64_t a2, int a3)
{
  if (!a3)
  {
    uint64_t v3 = result;
    uint64_t result = sub_100478B2C(a2, 12);
    if (result)
    {
      uint64_t v4 = v3 + 360;
      if ((sub_1002756F8(v4) & 1) == 0 && (sub_100275918(v4, 2) || sub_100275918(v4, 1)))
      {
        if (qword_1009F8398 != -1) {
          dispatch_once(&qword_1009F8398, &stru_1009B4100);
        }
        int v5 = 5;
      }
      else
      {
        uint64_t result = sub_1002756F8(v4);
        if (!result) {
          return result;
        }
        uint64_t result = sub_100275918(v4, 0);
        if (!result) {
          return result;
        }
        if (qword_1009F8398 != -1) {
          dispatch_once(&qword_1009F8398, &stru_1009B4100);
        }
        int v5 = 4;
      }
      uint64_t v6 = off_1009F8390;
      return sub_100508690((uint64_t)v6, v5, 3u);
    }
  }
  return result;
}

uint64_t sub_1005190D8(uint64_t a1, uint64_t a2, int a3)
{
  return sub_100518FD4(a1 - 288, a2, a3);
}

void sub_1005190E0(uint64_t a1, uint64_t a2, int a3)
{
  if (!a3 && sub_100478B2C(a2, 12))
  {
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009B4000);
    }
    if (!sub_1004AC3D8((uint64_t)off_1009F7EF8))
    {
      if (qword_1009F8398 != -1) {
        dispatch_once(&qword_1009F8398, &stru_1009B4100);
      }
      uint64_t v3 = off_1009F8390;
      sub_100508690((uint64_t)v3, 3, 3u);
    }
  }
}

uint64_t sub_100519194(uint64_t a1)
{
  memset(v15, 0, sizeof(v15));
  sub_10061F99C(v15);
  uint64_t v2 = a1 + 360;
  if (sub_100275948(a1 + 360))
  {
    uint64_t v3 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v4 = "Could not set up virtual call, voice session is already active.";
      int v5 = v3;
      uint32_t v6 = 2;
LABEL_19:
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v4, buf, v6);
    }
  }
  else if ((sub_1002756F8(a1 + 360) & 1) != 0 || !sub_100275918(a1 + 360, 0))
  {
    uint64_t v9 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = sub_1002756F8(v2);
      BOOL v11 = sub_100275918(v2, 0);
      char v12 = "";
      uint64_t v13 = "a call is present";
      if (!v10) {
        uint64_t v13 = "";
      }
      if (!v11) {
        char v12 = "a call is being set up";
      }
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = v13;
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&unsigned char buf[14] = v12;
      uint64_t v4 = "Could not set up virtual call because: %{public}s, %{public}s";
      int v5 = v9;
      uint32_t v6 = 22;
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v7 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Setting up virtual call", buf, 2u);
    }
    sub_100275754(a1 + 360, 0);
    if (qword_1009FB120 != -1) {
      dispatch_once(&qword_1009FB120, &stru_1009B4080);
    }
    sub_10062F654((uint64_t)off_1009FB118);
    if (qword_1009FB120 != -1) {
      dispatch_once(&qword_1009FB120, &stru_1009B4080);
    }
    sub_10062F0BC((uint64_t)off_1009FB118);
    sub_100275A54(a1 + 360, v15);
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    id v8 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:buf];
    sub_10051944C(a1, v15, v8);
  }
  *(void *)long long buf = v15;
  sub_10027696C((void ***)buf);
  return 0;
}

void sub_100519414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a10;
  sub_10027696C(&a13);
  _Unwind_Resume(a1);
}

void sub_10051944C(uint64_t a1, uint64_t *a2, void *a3)
{
  id v5 = a3;
  v74[0] = 0;
  v74[1] = 0;
  sub_10003AED0((uint64_t)v74, a1 + 760);
  unsigned __int8 v73 = 0;
  uint64_t v72 = 0;
  memset(v71, 0, sizeof(v71));
  sub_10062E4F0(v71);
  memset(&__src, 0, sizeof(__src));
  __int16 v69 = 0;
  int v68 = 0;
  int v67 = 0;
  unsigned __int8 v66 = 0;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  sub_10061F99C(&v63);
  uint64_t v6 = a1 + 360;
  int v60 = 0;
  __int16 v61 = 0;
  uint64_t v62 = 0;
  sub_10027606C(a1 + 360, (int)&v60);
  unsigned __int8 v57 = 0;
  int v58 = 0;
  uint64_t v59 = 0;
  sub_10061F99C(&v57);
  if (qword_1009FB120 != -1) {
    dispatch_once(&qword_1009FB120, &stru_1009B4080);
  }
  sub_10062F134((uint64_t)off_1009FB118);
  for (uint64_t i = (id *)*a2; i != (id *)a2[1]; i += 13)
  {
    id v8 = *i;
    uint64_t v9 = sub_10061FB58(&v60, v8);

    id v10 = *i;
    BOOL v11 = sub_10061FB58(&v57, v10);

    if (v61 == v9 && v58 == v11) {
      sub_10061FA2C(&v63, (uint64_t)i);
    }
  }
  uint64_t v13 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    sub_10061FC64((uint64_t *)&v60, (std::string *)v77);
    if (SBYTE3(v81) >= 0) {
      BOOL v14 = v77;
    }
    else {
      BOOL v14 = *(unsigned char **)v77;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Call(s) in A2DP Expanse: %s", buf, 0xCu);
    if (SBYTE3(v81) < 0) {
      operator delete(*(void **)v77);
    }
    uint64_t v13 = qword_100A19E70;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    sub_10061FC64((uint64_t *)&v57, (std::string *)v77);
    if (SBYTE3(v81) >= 0) {
      char v15 = v77;
    }
    else {
      char v15 = *(unsigned char **)v77;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Call(s) in Screening: %s", buf, 0xCu);
    if (SBYTE3(v81) < 0) {
      operator delete(*(void **)v77);
    }
    uint64_t v13 = qword_100A19E70;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    sub_10061FC64(a2, (std::string *)v77);
    if (SBYTE3(v81) >= 0) {
      long long v16 = v77;
    }
    else {
      long long v16 = *(unsigned char **)v77;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v16;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Current Call(s): %s", buf, 0xCu);
    if (SBYTE3(v81) < 0) {
      operator delete(*(void **)v77);
    }
    uint64_t v13 = qword_100A19E70;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    sub_10061FC64(&v63, (std::string *)v77);
    uint64_t v17 = SBYTE3(v81) >= 0 ? v77 : *(unsigned char **)v77;
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v17;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Filtered Call(s): %s", buf, 0xCu);
    if (SBYTE3(v81) < 0) {
      operator delete(*(void **)v77);
    }
  }
  sub_10052428C(a1, &v63, (unsigned char *)&v69 + 1, &v66, (BOOL *)&v69, &v73, &v68, &v67, v71, &__src);
  uint64_t v18 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    sub_10061FC64(&v63, (std::string *)v77);
    if (SBYTE3(v81) >= 0) {
      long long v19 = v77;
    }
    else {
      long long v19 = *(unsigned char **)v77;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Updating call status for call(s): %s", buf, 0xCu);
    if (SBYTE3(v81) < 0) {
      operator delete(*(void **)v77);
    }
    uint64_t v18 = qword_100A19E70;
  }
  BOOL v20 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
  int v21 = v66;
  int v22 = v69;
  if (v20)
  {
    int v23 = v66;
    id v41 = v5;
    if ((_BYTE)v69) {
      char v24 = "yes";
    }
    else {
      char v24 = "no";
    }
    sub_1002755C4(&v67, buf);
    int v25 = v76;
    char v26 = *(unsigned char **)buf;
    sub_100275594(&v68, __p);
    unsigned int v27 = buf;
    if (v25 < 0) {
      unsigned int v27 = v26;
    }
    if (v56 >= 0) {
      unsigned int v28 = __p;
    }
    else {
      unsigned int v28 = (void **)__p[0];
    }
    if (v73) {
      int v29 = "yes";
    }
    else {
      int v29 = "no";
    }
    if (HIBYTE(v69)) {
      char v30 = "yes";
    }
    else {
      char v30 = "no";
    }
    *(_DWORD *)uint64_t v77 = 136447490;
    *(void *)&v77[4] = v24;
    __int16 v78 = 1024;
    int v21 = v23;
    int v79 = v23;
    __int16 v80 = 2082;
    int v81 = v27;
    __int16 v82 = 2082;
    BOOL v83 = v28;
    __int16 v84 = 2082;
    int v85 = v29;
    __int16 v86 = 2082;
    uint64_t v87 = v30;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "callPresent: %{public}s, callState: %d, callSetup: %{public}s, heldStatus: %{public}s, heldChanged: %{public}s, visualVoicemail: %{public}s", v77, 0x3Au);
    if (v56 < 0) {
      operator delete(__p[0]);
    }
    id v5 = v41;
    if (v76 < 0) {
      operator delete(*(void **)buf);
    }
  }
  char v31 = 1;
  if (!v21 && !v22) {
    char v31 = HIBYTE(v69) != 0;
  }
  if (qword_1009FB218 != -1) {
    dispatch_once(&qword_1009FB218, &stru_1009B4120);
  }
  sub_1005F3578((uint64_t)off_1009FB210, v31);
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009B4000);
  }
  int v32 = sub_1004AC3D8((uint64_t)off_1009F7EF8);
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009B4000);
  }
  int v33 = sub_1004AC4CC((uint64_t)off_1009F7EF8);
  if (v22)
  {
    if (!v67 && v32 && !v33)
    {
      if (qword_1009F8398 != -1) {
        dispatch_once(&qword_1009F8398, &stru_1009B4100);
      }
      int v34 = 4;
LABEL_91:
      sub_100508690((uint64_t)off_1009F8390, v34, 3u);
    }
  }
  else
  {
    if ((v67 - 1) > 1)
    {
      if (v67) {
        goto LABEL_92;
      }
      if (qword_1009F8398 != -1) {
        dispatch_once(&qword_1009F8398, &stru_1009B4100);
      }
      int v34 = 3;
      goto LABEL_91;
    }
    if (v32 && !v33)
    {
      if (qword_1009F8398 != -1) {
        dispatch_once(&qword_1009F8398, &stru_1009B4100);
      }
      int v34 = 5;
      goto LABEL_91;
    }
  }
LABEL_92:
  sub_100275880(v6, v68);
  sub_100275888(v6, v67);
  sub_10061FA28((int)v54);
  sub_1002759CC(v6, v54);
  *(void *)uint64_t v77 = v54;
  sub_10027696C((void ***)v77);
  if (v22 != sub_1002756F8(v6))
  {
    if (sub_10027574C(v6)) {
      sub_100275764(v6, 1);
    }
    sub_10052D79C(v53, a1 + 824);
    sub_100524960(a1, v53, v22);
    sub_1000486F0((uint64_t)v53, (void *)v53[1]);
    sub_100275700(v6, v22 != 0);
  }
  if (sub_10027574C(v6))
  {
    sub_100275754(v6, 0);
    sub_100275700(v6, v22 != 0);
    if ((v67 - 1) <= 2)
    {
      sub_10027576C(v6, 1);
      operator new();
    }
    sub_10003AFE8((uint64_t)v74);
    j__usleep(0x1D4C0u);
    sub_10003AF00((uint64_t)v74);
    sub_100275764(v6, 0);
  }
  else if (HIBYTE(v69))
  {
    sub_100275700(v6, 1);
    sub_100275754(v6, 1);
    LOBYTE(v21) = v21 & 0xFE;
    unsigned __int8 v66 = v21;
    int v67 = 0;
    sub_100275888(v6, 0);
    sub_10052D79C(v52, a1 + 824);
    sub_100524B30(a1, v52, (void (*)(void, void))sub_100524CFC);
    sub_1000486F0((uint64_t)v52, (void *)v52[1]);
  }
  BOOL v35 = sub_100275814(v6, 1);
  BOOL v36 = (v21 & 4) == 0 && v35;
  if (v36 || ((BOOL v37 = sub_100275814(v6, 2), (v21 & 8) == 0) ? (v38 = v37) : (v38 = 0), v38)) {
    sub_10027577C(v6);
  }
  else {
    sub_100275834(v6, 0);
  }
  v77[0] = 0;
  sub_10001B8E0(v77);
  sub_100151664((v22 | HIBYTE(v69)) != 0, v67, v68);
  sub_10001B910(v77);
  if ((v21 & 4) != 0)
  {
    sub_10052D79C(v51, a1 + 824);
    sub_100525060(a1, v51, v67 | (v68 << 8) | 0x10000);
    sub_1000486F0((uint64_t)v51, (void *)v51[1]);
    if (!v22 && !sub_10027583C(v6))
    {
      sub_10062E8E4(v50);
      if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
        sub_10003B098(&v49, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
      }
      else {
        std::string v49 = __src;
      }
      sub_1002757CC(v6, (uint64_t)v50, &v49, 1);
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v49.__r_.__value_.__l.__data_);
      }
      sub_10062E8E8(v50);
      sub_100525238(a1);
    }
  }
  else
  {
    if ((v21 & 8) != 0)
    {
      if (sub_10027583C(v6)) {
        goto LABEL_133;
      }
      sub_10062E8E4(v48);
      if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
        sub_10003B098(&__dst, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
      }
      else {
        std::string __dst = __src;
      }
      sub_1002757CC(v6, (uint64_t)v48, &__dst, 2);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      sub_10062E8E8(v48);
      sub_100525424(a1);
      sub_10052D79C(v46, a1 + 824);
      uint64_t v39 = v46;
      sub_100525060(a1, v46, v67 | (v68 << 8));
      goto LABEL_132;
    }
    if (v21)
    {
      sub_10052D79C(v45, a1 + 824);
      uint64_t v39 = v45;
      sub_10052550C(a1, v45, (v73 << 16) | ((-991146299 * ((unint64_t)(v64 - v63) >> 3) == 1) << 24) | (v68 << 8) | v67);
      goto LABEL_132;
    }
    if ((v21 & 2) != 0)
    {
      sub_10052D79C(v44, a1 + 824);
      uint64_t v39 = v44;
      sub_100525060(a1, v44, v67 | (v68 << 8) | ((-991146299* ((unint64_t)(v64 - v63) >> 3) == 1) << 16));
      goto LABEL_132;
    }
    if (v22 && !v67)
    {
      sub_10052D79C(v43, a1 + 824);
      uint64_t v39 = v43;
      sub_10052550C(a1, v43, (v68 << 8) | (v73 << 16) | v67 | 0x1000000);
LABEL_132:
      sub_1000486F0((uint64_t)v39, (void *)v39[1]);
      goto LABEL_133;
    }
    if (!v22 && !v67)
    {
      sub_10052D79C(v42, a1 + 824);
      uint64_t v39 = v42;
      sub_1005256DC(a1, v42, v67);
      goto LABEL_132;
    }
  }
LABEL_133:
  int v40 = (void ***)sub_10001B8AC(v77);
  *(void *)uint64_t v77 = &v57;
  sub_10027696C(v40);
  *(void *)uint64_t v77 = &v60;
  sub_10027696C((void ***)v77);
  *(void *)uint64_t v77 = &v63;
  sub_10027696C((void ***)v77);
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__src.__r_.__value_.__l.__data_);
  }
  sub_10062E8E8(v71);
  sub_10003AFB4((uint64_t)v74);
}

void sub_10051A09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_1000486F0((uint64_t)&a14, (void *)a15);
  sub_10001B8AC((unsigned char *)(v72 - 176));
  *(void *)(v72 - 176) = &a65;
  sub_10027696C((void ***)(v72 - 176));
  *(void *)(v72 - 176) = &a68;
  sub_10027696C((void ***)(v72 - 176));
  *(void *)(v72 - 176) = &a71;
  sub_10027696C((void ***)(v72 - 176));
  if (SLOBYTE(STACK[0x22F]) < 0) {
    operator delete((void *)STACK[0x218]);
  }
  sub_10062E8E8(&STACK[0x230]);
  sub_10003AFB4(v72 - 224);

  _Unwind_Resume(a1);
}

uint64_t sub_10051A2DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a2, __p);
    if (v9 >= 0) {
      uint64_t v6 = __p;
    }
    else {
      uint64_t v6 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136446466;
    BOOL v11 = v6;
    __int16 v12 = 2082;
    uint64_t v13 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Received set voice command external event for device %{public}s with value %{public}s", buf, 0x16u);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }
  return 0;
}

uint64_t sub_10051A3CC(void *a1, uint64_t a2)
{
  v86[0] = 0;
  v86[1] = 0;
  sub_10003AED0((uint64_t)v86, (uint64_t)(a1 + 95));
  uint64_t v4 = (unsigned __int16 *)(a2 + 4);
  uint64_t v5 = sub_1005160B8((uint64_t)a1, *(unsigned __int16 *)(a2 + 4));
  if (!v5)
  {
    if (*(_DWORD *)a2 >= 2u)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
        sub_100776094();
      }
      LOBYTE(__p[0]) = 0;
      sub_10001B8E0(__p);
      sub_10014FCB0(*v4, 2701);
LABEL_28:
      uint64_t v17 = __p;
      goto LABEL_29;
    }
    uint64_t v6 = *(void *)(a2 + 8);
    LODWORD(__p[0]) = *(_DWORD *)v6;
    WORD2(__p[0]) = *(_WORD *)(v6 + 4);
    if (!LOBYTE(__p[0]))
    {
      uint64_t v7 = 1;
      while (v7 != 6)
      {
        if (*((unsigned __int8 *)__p + v7++))
        {
          if ((unint64_t)(v7 - 2) < 5) {
            goto LABEL_10;
          }
          break;
        }
      }
      char v9 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_FAULT)) {
        sub_100776010(v9);
      }
LABEL_10:
      uint64_t v19 = 1;
      do
      {
        if (v19 == 6) {
          goto LABEL_34;
        }
      }
      while (!*((unsigned __int8 *)__p + v19++));
      if ((unint64_t)(v19 - 2) >= 5)
      {
LABEL_34:
        if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
          sub_100775BB8();
        }
        buf[0] = 0;
        sub_10001B8E0(buf);
        sub_10014FCB0(*v4, 2701);
        uint64_t v17 = buf;
LABEL_29:
        sub_10001B8AC(v17);
        return sub_10003AFB4((uint64_t)v86);
      }
    }
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009B4000);
    }
    uint64_t v10 = *(void *)(a2 + 8);
    __int16 v11 = *(_WORD *)(v10 + 4);
    *(_DWORD *)long long buf = *(_DWORD *)v10;
    *(_WORD *)unsigned __int16 v97 = v11;
    uint64_t v5 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)buf, 1);
  }
  int v12 = *(_DWORD *)a2;
  switch(*(_DWORD *)a2)
  {
    case 0:
      int v42 = sub_1004BDDAC((uint64_t)a1, v5);
      int v43 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        if (v5)
        {
          sub_100474E18(v5, __p);
          int v44 = (void **)__p[0];
          int v45 = "denying";
          if ((SBYTE7(v90) & 0x80u) == 0) {
            int v44 = __p;
          }
          if (v42) {
            int v45 = "accepting";
          }
          *(_DWORD *)long long buf = 136446466;
          *(void *)unsigned __int16 v97 = v44;
          *(_WORD *)&v97[8] = 2082;
          *(void *)&v97[10] = v45;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "Received incoming handsfree connection request for device %{public}s - %{public}s request", buf, 0x16u);
          if (SBYTE7(v90) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          __int16 v78 = "denying";
          if (v42) {
            __int16 v78 = "accepting";
          }
          *(_DWORD *)long long buf = 136446466;
          *(void *)unsigned __int16 v97 = "NULL";
          *(_WORD *)&v97[8] = 2082;
          *(void *)&v97[10] = v78;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "Received incoming handsfree connection request for device %{public}s - %{public}s request", buf, 0x16u);
        }
      }
      uint64_t v79 = sub_10003FB34();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v79 + 2504))(v79)) {
        int v80 = sub_10048DD90(v5);
      }
      else {
        int v80 = 0;
      }
      LOBYTE(v83[0]) = 0;
      sub_10001B8E0(v83);
      int v81 = sub_100155FBC(*v4, v42);
      if (v81) {
        int v82 = 0;
      }
      else {
        int v82 = v80;
      }
      if (v82 == 1
        && sub_100264630(v5 + 128)
        && os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
      {
        sub_100474E18(v5, __p);
        sub_100775D1C();
      }
      sub_10001B910(v83);
      if (v81 && os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
        sub_100775C8C(v42);
      }
      if (v42) {
        sub_1004BD554(a1, v5);
      }
      uint64_t v17 = v83;
      goto LABEL_29;
    case 1:
      if (*(void *)(a2 + 8))
      {
        uint64_t v46 = *(unsigned int *)(a2 + 16);
        __int16 v47 = qword_100A19E70;
        if (v46)
        {
          if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
          {
            sub_100474E18(v5, buf);
            sub_100775DA4();
          }
          __int16 v48 = sub_100275624((uint64_t)(a1 + 45));
          char v85 = 0;
          sub_10001B8E0(&v85);
          __int16 v49 = sub_10014FBB0(*v4);
          sub_10001B910(&v85);
          if (v46 == 1814 && (v48 & 0x400) != 0 && (v49 & 0x100) != 0)
          {
            uint64_t v95 = 0;
            long long v93 = 0u;
            long long v94 = 0u;
            long long v91 = 0u;
            long long v92 = 0u;
            *(_OWORD *)long long __p = 0u;
            long long v90 = 0u;
            if (sub_10048103C(v5, 1, 413, 1814, (uint64_t)__p))
            {
              __int16 v50 = qword_100A19E70;
              if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
              {
                sub_100474E18(v5, v83);
                __int16 v51 = v84 >= 0 ? v83 : (void **)v83[0];
                *(_DWORD *)uint64_t v87 = 136315138;
                uint64_t v88 = v51;
                _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "Submitting contextual metric for event 'BT_HANDSFREE_TIMEOUT_SLC_BIND_RED_FLAG' for %s", v87, 0xCu);
                if (v84 < 0) {
                  operator delete(v83[0]);
                }
              }
              uint64_t v52 = sub_100050530();
              (*(void (**)(uint64_t, void **, void))(*(void *)v52 + 248))(v52, __p, *(unsigned __int8 *)(v5 + 1316));
            }
          }
          sub_10001B8AC(&v85);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
          {
            sub_100474E18(v5, __p);
            int v71 = (SBYTE7(v90) & 0x80u) == 0 ? __p : (void **)__p[0];
            *(_DWORD *)long long buf = 136446210;
            *(void *)unsigned __int16 v97 = v71;
            _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "Received SLC connection complete event for device %{public}s", buf, 0xCu);
            if (SBYTE7(v90) < 0) {
              operator delete(__p[0]);
            }
          }
          sub_100512310((uint64_t)a1, v5, *v4);
        }
        if (qword_1009F8070 != -1) {
          dispatch_once(&qword_1009F8070, &stru_1009B3FA0);
        }
        int v72 = sub_1004E2340((uint64_t)off_1009F8068, v46, 20000);
        sub_1004BD6C8((uint64_t)a1, v5, v72);
      }
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
        sub_100775D70();
      }
      return sub_10003AFB4((uint64_t)v86);
    case 2:
      int v21 = *(_DWORD *)(a2 + 8);
      int v22 = qword_100A19E70;
      if ((v21 & 0xFFFFFFFE) == 0x39E)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
        {
          if (v5)
          {
            sub_100474E18(v5, __p);
            if ((SBYTE7(v90) & 0x80u) == 0) {
              int v23 = __p;
            }
            else {
              int v23 = (void **)__p[0];
            }
            *(_DWORD *)long long buf = 136446210;
            *(void *)unsigned __int16 v97 = v23;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Received handsfree disconnection event for device %{public}s", buf, 0xCu);
            if (SBYTE7(v90) < 0) {
              operator delete(__p[0]);
            }
          }
          else
          {
            *(_DWORD *)long long buf = 136446210;
            *(void *)unsigned __int16 v97 = "NULL";
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Received handsfree disconnection event for device %{public}s", buf, 0xCu);
          }
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
      {
        if (v5)
        {
          sub_100474E18(v5, __p);
          sub_100775E40();
        }
        else
        {
          sub_100775DF8(buf, v21);
        }
      }
      sub_100518660((uint64_t)a1, *v4, v21);
      return sub_10003AFB4((uint64_t)v86);
    case 3:
    case 4:
    case 5:
    case 6:
    case 0x11:
    case 0x12:
    case 0x1B:
    case 0x1C:
      sub_10051B888((uint64_t)a1, a2);
      return sub_10003AFB4((uint64_t)v86);
    case 8:
    case 9:
    case 0xF:
    case 0x16:
      uint64_t v13 = sub_10051DC90((uint64_t)a1, a2);
      goto LABEL_21;
    case 0xA:
    case 0xB:
    case 0xC:
    case 0x13:
      uint64_t v13 = sub_10051D6D0((uint64_t)a1, (int *)a2);
      goto LABEL_21;
    case 0xD:
      char v24 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        if (v5)
        {
          sub_100474E18(v5, __p);
          if ((SBYTE7(v90) & 0x80u) == 0) {
            int v25 = __p;
          }
          else {
            int v25 = (void **)__p[0];
          }
          *(_DWORD *)long long buf = 136446210;
          *(void *)unsigned __int16 v97 = v25;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Received voice recognition event from device %{public}s", buf, 0xCu);
          if (SBYTE7(v90) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)unsigned __int16 v97 = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Received voice recognition event from device %{public}s", buf, 0xCu);
        }
      }
      sub_1002B7BC8(3);
      uint64_t v13 = sub_10051E7E8((uint64_t)a1, *(unsigned __int16 *)(a2 + 4), *(unsigned __int8 *)(a2 + 8));
      goto LABEL_21;
    case 0xE:
      int v58 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        if (v5)
        {
          sub_100474E18(v5, __p);
          if ((SBYTE7(v90) & 0x80u) == 0) {
            uint64_t v59 = __p;
          }
          else {
            uint64_t v59 = (void **)__p[0];
          }
          *(_DWORD *)long long buf = 136446210;
          *(void *)unsigned __int16 v97 = v59;
          _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "Received unsupported handsfree event (voice tag retrieval) from device %{public}s", buf, 0xCu);
          if (SBYTE7(v90) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)unsigned __int16 v97 = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "Received unsupported handsfree event (voice tag retrieval) from device %{public}s", buf, 0xCu);
        }
      }
      LOBYTE(__p[0]) = 0;
      sub_10001B8E0(__p);
      if (sub_100150D9C(*v4, 0))
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
          sub_100775E94();
        }
        uint64_t v14 = 0;
      }
      else
      {
        uint64_t v14 = 255;
      }
      sub_10001B8AC(__p);
      goto LABEL_22;
    case 0x10:
      char v26 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        if (v5)
        {
          sub_100474E18(v5, __p);
          if ((SBYTE7(v90) & 0x80u) == 0) {
            unsigned int v27 = __p;
          }
          else {
            unsigned int v27 = (void **)__p[0];
          }
          *(_DWORD *)long long buf = 136446210;
          *(void *)unsigned __int16 v97 = v27;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Received EC/NR disable event from device %{public}s", buf, 0xCu);
          if (SBYTE7(v90) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)unsigned __int16 v97 = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Received EC/NR disable event from device %{public}s", buf, 0xCu);
        }
      }
      uint64_t v13 = sub_10051E7A4((uint64_t)a1, *v4);
      goto LABEL_21;
    case 0x14:
      unsigned int v28 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        if (*(unsigned char *)(a2 + 8)) {
          int v29 = "enable";
        }
        else {
          int v29 = "disable";
        }
        if (v5)
        {
          sub_100474E18(v5, __p);
          if ((SBYTE7(v90) & 0x80u) == 0) {
            char v30 = __p;
          }
          else {
            char v30 = (void **)__p[0];
          }
          *(_DWORD *)long long buf = 136446466;
          *(void *)unsigned __int16 v97 = v29;
          *(_WORD *)&v97[8] = 2082;
          *(void *)&v97[10] = v30;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Received call waiting %{public}s event from device %{public}s", buf, 0x16u);
          if (SBYTE7(v90) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          *(_DWORD *)long long buf = 136446466;
          *(void *)unsigned __int16 v97 = v29;
          *(_WORD *)&v97[8] = 2082;
          *(void *)&v97[10] = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Received call waiting %{public}s event from device %{public}s", buf, 0x16u);
        }
      }
      int v73 = *(unsigned __int8 *)(a2 + 8);
      int v74 = sub_100511724((uint64_t)a1, *(unsigned __int16 *)(a2 + 4));
      if (v74)
      {
        sub_1002765AC((uint64_t)(v74 + 50), v73 != 0);
        uint64_t v14 = 255;
      }
      else
      {
        uint64_t v14 = 0;
      }
      goto LABEL_22;
    case 0x15:
      char v31 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
        sub_100775EFC(a2, v31);
      }
      LOBYTE(__p[0]) = 0;
      sub_10001B8E0(__p);
      sub_1001566A8(*(unsigned __int16 *)(a2 + 4), *(_DWORD *)(a2 + 12));
      goto LABEL_28;
    case 0x17:
      int v60 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        if (v5)
        {
          sub_100474E18(v5, __p);
          if ((SBYTE7(v90) & 0x80u) == 0) {
            __int16 v61 = __p;
          }
          else {
            __int16 v61 = (void **)__p[0];
          }
          *(_DWORD *)long long buf = 136446210;
          *(void *)unsigned __int16 v97 = v61;
          _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "Received network operator request event from device %{public}s", buf, 0xCu);
          if (SBYTE7(v90) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)unsigned __int16 v97 = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "Received network operator request event from device %{public}s", buf, 0xCu);
        }
      }
      uint64_t v13 = sub_10051E544((uint64_t)a1, *v4);
      goto LABEL_21;
    case 0x18:
      int v32 = qword_100A19E70;
      BOOL v33 = os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT);
      if (v33)
      {
        if (v5)
        {
          sub_100474E18(v5, __p);
          if ((SBYTE7(v90) & 0x80u) == 0) {
            int v34 = __p;
          }
          else {
            int v34 = (void **)__p[0];
          }
          *(_DWORD *)long long buf = 136446210;
          *(void *)unsigned __int16 v97 = v34;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Received subscriber number request event from device %{public}s", buf, 0xCu);
          if (SBYTE7(v90) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)unsigned __int16 v97 = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Received subscriber number request event from device %{public}s", buf, 0xCu);
        }
      }
      uint64_t v13 = sub_10051E2CC(v33, *v4);
      goto LABEL_21;
    case 0x19:
      uint64_t v62 = qword_100A19E70;
      if (!os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_201;
      }
      if (!v5)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)unsigned __int16 v97 = "NULL";
        int v75 = "Received unsupported handsfree event (response and hold query) from device %{public}s";
        goto LABEL_199;
      }
      sub_100474E18(v5, __p);
      if ((SBYTE7(v90) & 0x80u) == 0) {
        uint64_t v63 = __p;
      }
      else {
        uint64_t v63 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)unsigned __int16 v97 = v63;
      int v55 = "Received unsupported handsfree event (response and hold query) from device %{public}s";
      goto LABEL_152;
    case 0x1A:
      uint64_t v62 = qword_100A19E70;
      if (!os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_201;
      }
      if (!v5)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)unsigned __int16 v97 = "NULL";
        int v75 = "Received unsupported handsfree event (response and hold) from device %{public}s";
LABEL_199:
        char v76 = v62;
        uint32_t v77 = 12;
        goto LABEL_200;
      }
      sub_100474E18(v5, __p);
      if ((SBYTE7(v90) & 0x80u) == 0) {
        uint64_t v64 = __p;
      }
      else {
        uint64_t v64 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)unsigned __int16 v97 = v64;
      int v55 = "Received unsupported handsfree event (response and hold) from device %{public}s";
LABEL_152:
      char v56 = v62;
      uint32_t v57 = 12;
      goto LABEL_153;
    case 0x1D:
      BOOL v35 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        if (v5)
        {
          sub_100474E18(v5, __p);
          if ((SBYTE7(v90) & 0x80u) == 0) {
            BOOL v36 = __p;
          }
          else {
            BOOL v36 = (void **)__p[0];
          }
          *(_DWORD *)long long buf = 136446210;
          *(void *)unsigned __int16 v97 = v36;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Received HF indicator event from device %{public}s", buf, 0xCu);
          if (SBYTE7(v90) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)unsigned __int16 v97 = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Received HF indicator event from device %{public}s", buf, 0xCu);
        }
      }
      uint64_t v13 = sub_10051EA3C((uint64_t)a1, a2);
LABEL_21:
      uint64_t v14 = v13;
      goto LABEL_22;
    case 0x1E:
      BOOL v37 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(v5, __p);
        BOOL v38 = (SBYTE7(v90) & 0x80u) == 0 ? __p : (void **)__p[0];
        *(_DWORD *)long long buf = 136446210;
        *(void *)unsigned __int16 v97 = v38;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Received AOS Setup Complete from device %{public}s", buf, 0xCu);
        if (SBYTE7(v90) < 0) {
          operator delete(__p[0]);
        }
      }
      uint64_t v39 = sub_100197A30(v5 + 128);
      uint64_t v40 = sub_1005120E4((uint64_t)a1, v5);
      switch(v40)
      {
        case 0x7F:
          unsigned __int8 v65 = 0;
          int v66 = 60;
          int v67 = 4;
          int v68 = 12;
          int v69 = 60;
LABEL_162:
          sub_100511C54((uint64_t)a1, 0, *v4, v39, v68, v67, v66, v69, v65);
          return sub_10003AFB4((uint64_t)v86);
        case 0x81:
          unsigned __int8 v65 = 3;
          int v69 = 360;
          int v66 = 240;
          int v67 = 6;
          int v68 = 24;
          goto LABEL_162;
        case 0x82:
          id v41 = sub_100511724((uint64_t)a1, *v4);
          *((_WORD *)v41 + 286) = 0;
          v41[72] = 0;
          sub_100511C54((uint64_t)a1, 0, *v4, v39, 24, 6, 240, 360, 3u);
          break;
        default:
          int v70 = qword_100A19E70;
          if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
            sub_100775F84(v40, v70);
          }
          break;
      }
      return sub_10003AFB4((uint64_t)v86);
    default:
      uint64_t v53 = qword_100A19E70;
      if (!os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_201;
      }
      if (v5)
      {
        sub_100474E18(v5, __p);
        if ((SBYTE7(v90) & 0x80u) == 0) {
          int v54 = __p;
        }
        else {
          int v54 = (void **)__p[0];
        }
        *(_DWORD *)long long buf = 67109378;
        *(_DWORD *)unsigned __int16 v97 = v12;
        *(_WORD *)&v97[4] = 2082;
        *(void *)&v97[6] = v54;
        int v55 = "Received unsupported handsfree event (%d) from device %{public}s";
        char v56 = v53;
        uint32_t v57 = 18;
LABEL_153:
        _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, v55, buf, v57);
        if (SBYTE7(v90) < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        *(_DWORD *)long long buf = 67109378;
        *(_DWORD *)unsigned __int16 v97 = v12;
        *(_WORD *)&v97[4] = 2082;
        *(void *)&v97[6] = "NULL";
        int v75 = "Received unsupported handsfree event (%d) from device %{public}s";
        char v76 = v53;
        uint32_t v77 = 18;
LABEL_200:
        _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEFAULT, v75, buf, v77);
      }
LABEL_201:
      uint64_t v14 = 4;
LABEL_22:
      LOBYTE(__p[0]) = 0;
      sub_10001B8E0(__p);
      unsigned int v15 = *v4;
      if (v14 == 255) {
        int v16 = sub_10014FCB0(v15, 0);
      }
      else {
        int v16 = sub_10014FD40(v15, 2707, v14);
      }
      if (v16 && os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
        sub_100775C24();
      }
      goto LABEL_28;
  }
}

void sub_10051B704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
}

void sub_10051B888(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100511724(a1, *(unsigned __int16 *)(a2 + 4));
  uint64_t v5 = (uint64_t)(v4 + 50);
  uint64_t v6 = sub_10027653C((uint64_t)(v4 + 50));
  uint64_t v7 = v6;
  int v8 = *(_DWORD *)a2;
  if (*(int *)a2 <= 16)
  {
    int v9 = v8 - 3;
    int v8 = a1 + 360;
    switch(v9)
    {
      case 0:
        uint64_t v10 = qword_100A19E70;
        if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
        {
          if (v7)
          {
            sub_100474E18(v7, __p);
            if (SHIBYTE(v101[0]) >= 0) {
              __int16 v11 = __p;
            }
            else {
              __int16 v11 = (void **)__p[0];
            }
            *(_DWORD *)long long buf = 136446210;
            *(void *)&uint8_t buf[4] = v11;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Received audio connection request event from device %{public}s", buf, 0xCu);
            if (SHIBYTE(v101[0]) < 0) {
              operator delete(__p[0]);
            }
          }
          else
          {
            *(_DWORD *)long long buf = 136446210;
            *(void *)&uint8_t buf[4] = "NULL";
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Received audio connection request event from device %{public}s", buf, 0xCu);
          }
        }
        sub_10027656C(v5, 3);
        uint64_t v108 = 0;
        long long v107 = 0u;
        memset(v106, 0, sizeof(v106));
        long long v104 = 0u;
        long long v105 = 0u;
        long long v103 = 0u;
        *(_OWORD *)long long v101 = 0u;
        long long v102 = 0u;
        *(_OWORD *)long long __p = 0u;
        sub_1006161E0((uint64_t)__p + 1);
        BYTE2(v101[0]) = 0;
        BYTE4(v101[0]) = 0;
        BYTE2(v103) = 0;
        BYTE4(v103) = 0;
        HIDWORD(v106[2]) = 0;
        long long v102 = 0uLL;
        v101[1] = 0;
        LOBYTE(v103) = 0;
        long long v104 = 0uLL;
        *((void *)&v103 + 1) = 0;
        LOBYTE(v105) = 0;
        v106[0] = 0;
        v106[1] = 0;
        *((void *)&v105 + 1) = 0;
        *(_DWORD *)((char *)&v106[1] + 7) = 0;
        LOBYTE(v106[3]) = 1;
        BYTE2(v108) = 0;
        *(void *)((char *)&v106[3] + 6) = 0;
        *(void *)((char *)&v106[3] + 1) = 0;
        long long v107 = 0uLL;
        v106[5] = 0;
        LOBYTE(v108) = 0;
        BOOL v63 = sub_1004783B8(v7, (uint64_t)__p);
        if (BYTE1(v106[3])) {
          BOOL v64 = v63;
        }
        else {
          BOOL v64 = 0;
        }
        if (v64 && sub_1002758D0(a1 + 360))
        {
          unsigned __int8 v65 = qword_100A19E70;
          if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "Hack for Mercedes kicking in... auto-accepting then pulling back audio", buf, 2u);
          }
          sub_10027670C(v5, 1);
          j__usleep(0x2710u);
          buf[0] = 0;
          sub_10001B8E0(buf);
          int v66 = sub_100151CAC(*(unsigned __int16 *)(a2 + 4), 1);
          sub_10001B910(buf);
LABEL_130:
          sub_10001B8AC(buf);
          goto LABEL_198;
        }
        if (sub_10027574C(a1 + 360))
        {
          int v67 = qword_100A19E70;
          if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "Denying audio request as we are in a virtual call", buf, 2u);
          }
          buf[0] = 0;
          sub_10001B8E0(buf);
          int v66 = sub_100151CAC(*(unsigned __int16 *)(a2 + 4), 0);
          sub_10001B910(buf);
          goto LABEL_130;
        }
        if ((sub_1002756F8(a1 + 360) & 1) != 0
          || sub_1002756D0(a1 + 360)
          || sub_1002756D8(a1 + 360)
          || sub_1002756C0(a1 + 360))
        {
          int v68 = qword_100A19E70;
          if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
          {
            if (v7)
            {
              sub_100474E18(v7, buf);
              if (v97 >= 0) {
                int v69 = buf;
              }
              else {
                int v69 = *(const char **)buf;
              }
              *(_DWORD *)int v98 = 136446210;
              int v99 = v69;
              _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "Call is present, notify CoreAudio to accept audio request from device %{public}s", v98, 0xCu);
              if (v97 < 0) {
                operator delete(*(void **)buf);
              }
            }
            else
            {
              *(_DWORD *)int v98 = 136446210;
              int v99 = "NULL";
              _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "Call is present, notify CoreAudio to accept audio request from device %{public}s", v98, 0xCu);
            }
          }
          sub_1005D0DE4((uint64_t)v4, 1, 0);
          int v66 = 0;
        }
        else
        {
          __int16 v86 = qword_100A19E70;
          if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
          {
            if (v7)
            {
              sub_100474E18(v7, buf);
              if (v97 >= 0) {
                uint64_t v87 = buf;
              }
              else {
                uint64_t v87 = *(const char **)buf;
              }
              *(_DWORD *)int v98 = 136446210;
              int v99 = v87;
              _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEFAULT, "We're not in a call, rejecting audio request from device %{public}s", v98, 0xCu);
              if (v97 < 0) {
                operator delete(*(void **)buf);
              }
            }
            else
            {
              *(_DWORD *)int v98 = 136446210;
              int v99 = "NULL";
              _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEFAULT, "We're not in a call, rejecting audio request from device %{public}s", v98, 0xCu);
            }
          }
          sub_10051EEB4(a1, v7);
          sub_10027656C(v5, 0);
          int v66 = 0;
        }
LABEL_198:
        if (SHIBYTE(v106[1]) < 0) {
          operator delete(*((void **)&v105 + 1));
        }
        if (SHIBYTE(v104) < 0) {
          operator delete(*((void **)&v103 + 1));
        }
        if (SHIBYTE(v102) < 0) {
          operator delete(v101[1]);
        }
        nullsub_95((char *)__p + 1);
        if (v66) {
          goto LABEL_205;
        }
        return;
      case 1:
        BOOL v35 = qword_100A19E70;
        if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
        {
          if (v7)
          {
            sub_100474E18(v7, __p);
            if (SHIBYTE(v101[0]) >= 0) {
              BOOL v36 = __p;
            }
            else {
              BOOL v36 = (void **)__p[0];
            }
            *(_DWORD *)long long buf = 136446210;
            *(void *)&uint8_t buf[4] = v36;
            _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Received audio codec connection request event from device %{public}s", buf, 0xCu);
            if (SHIBYTE(v101[0]) < 0) {
              operator delete(__p[0]);
            }
          }
          else
          {
            *(_DWORD *)long long buf = 136446210;
            *(void *)&uint8_t buf[4] = "NULL";
            _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Received audio codec connection request event from device %{public}s", buf, 0xCu);
          }
        }
        sub_10027656C(v5, 4);
        if (sub_10027574C(a1 + 360))
        {
          int v74 = qword_100A19E70;
          if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "Denying audio request as we are in a virtual call", (uint8_t *)__p, 2u);
          }
          goto LABEL_154;
        }
        if ((sub_1002756F8(a1 + 360) & 1) != 0
          || sub_1002756D0(a1 + 360)
          || sub_1002756D8(a1 + 360)
          || sub_1002756C0(a1 + 360))
        {
          int v75 = qword_100A19E70;
          if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
          {
            if (v7)
            {
              sub_100474E18(v7, __p);
              if (SHIBYTE(v101[0]) >= 0) {
                char v76 = __p;
              }
              else {
                char v76 = (void **)__p[0];
              }
              *(_DWORD *)long long buf = 136446210;
              *(void *)&uint8_t buf[4] = v76;
              _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "Call is present, notify CoreAudio to accept audio request from device %{public}s", buf, 0xCu);
              if (SHIBYTE(v101[0]) < 0) {
                operator delete(__p[0]);
              }
            }
            else
            {
              *(_DWORD *)long long buf = 136446210;
              *(void *)&uint8_t buf[4] = "NULL";
              _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "Call is present, notify CoreAudio to accept audio request from device %{public}s", buf, 0xCu);
            }
          }
          LOBYTE(__p[0]) = 0;
          sub_10001B8E0(__p);
          int v71 = sub_10014FCB0(*(unsigned __int16 *)(a2 + 4), 0);
          sub_10001B910(__p);
          sub_1005D0DE4((uint64_t)v4, 1, v71);
          goto LABEL_194;
        }
        char v84 = qword_100A19E70;
        if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
        {
          if (v7)
          {
            sub_100474E18(v7, __p);
            if (SHIBYTE(v101[0]) >= 0) {
              char v85 = __p;
            }
            else {
              char v85 = (void **)__p[0];
            }
            *(_DWORD *)long long buf = 136446210;
            *(void *)&uint8_t buf[4] = v85;
            _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "We're not in a call, rejecting audio request from device %{public}s", buf, 0xCu);
            if (SHIBYTE(v101[0]) < 0) {
              operator delete(__p[0]);
            }
          }
          else
          {
            *(_DWORD *)long long buf = 136446210;
            *(void *)&uint8_t buf[4] = "NULL";
            _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "We're not in a call, rejecting audio request from device %{public}s", buf, 0xCu);
          }
        }
        sub_10051EEB4(a1, v7);
        sub_10027656C(v5, 0);
        return;
      case 2:
        if (!sub_100276714(v5))
        {
          int v91 = *(_DWORD *)(a2 + 8);
          uint64_t v40 = sub_100275CD0(a1 + 360);
          if (v40)
          {
            uint64_t v41 = sub_100275CD0(a1 + 360);
            int v42 = sub_100275B00(v41);
          }
          else
          {
            int v42 = 0;
          }
          int v90 = *(unsigned __int16 *)(a2 + 4);
          uint32_t v77 = qword_100A19E70;
          if (v4 && !v91 && v7)
          {
            if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
            {
              sub_100474E18(v7, __p);
              __int16 v78 = SHIBYTE(v101[0]) >= 0 ? __p : (void **)__p[0];
              *(_DWORD *)long long buf = 136446210;
              *(void *)&uint8_t buf[4] = v78;
              _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "Received voice audio connected event for device %{public}s", buf, 0xCu);
              if (SHIBYTE(v101[0]) < 0) {
                operator delete(__p[0]);
              }
            }
            sub_10027656C(v5, 5);
            if (v40)
            {
              uint64_t v79 = qword_100A19E70;
              if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(__p[0]) = 67109376;
                HIDWORD(__p[0]) = v42;
                LOWORD(__p[1]) = 1024;
                *(_DWORD *)((char *)&__p[1] + 2) = v90;
                _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "A route change was pending on hfpHandle %d and we got an audio connected event on hfpHandle %d, clearing pending route change", (uint8_t *)__p, 0xEu);
              }
              sub_10027547C(a1 + 360);
            }
            sub_1002766E4(v5, 1);
            uint64_t v80 = *(unsigned __int16 *)(v7 + 132);
            uint64_t v81 = *(unsigned int *)(v7 + 128);
            uint64_t v82 = sub_10003FB34();
            uint64_t v83 = sub_100476054(v7);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v82 + 72))(v82, (v81 | (v80 << 32)) & 0xFFFFFFFFFFFFLL, v83, 1, 1, 1, 1, 0);
            *(_DWORD *)(v7 + 1320) |= 1u;
            *(unsigned char *)(v7 + 136sub_1004C2140(qword_100A19B68, 0) = 0;
            __p[0] = 0;
            sub_100026C30((uint64_t)__p);
            v95.n128_u64[0] = SLODWORD(__p[0]);
            v95.n128_u64[1] = SWORD2(__p[0]);
            sub_100276908(v5, &v95);
            sub_10027653C(v5);
            sub_1004BE7AC();
          }
          if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
          {
            if (v7)
            {
              sub_100474E18(v7, __p);
              if (SHIBYTE(v101[0]) >= 0) {
                uint64_t v88 = __p;
              }
              else {
                uint64_t v88 = (void **)__p[0];
              }
              *(_DWORD *)long long buf = 136446466;
              *(void *)&uint8_t buf[4] = v88;
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&unsigned char buf[14] = v91;
              _os_log_error_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_ERROR, "Received audio connection failure event for device %{public}s with result %{bluetooth:OI_STATUS}u", buf, 0x12u);
              if (SHIBYTE(v101[0]) < 0) {
                operator delete(__p[0]);
              }
            }
            else
            {
              sub_1007761DC(buf, v91);
            }
          }
          sub_10051F058();
          sub_10027656C(v5, 0);
          ++*(unsigned char *)(v7 + 1360);
          sub_10027653C(v5);
          if (qword_1009F8070 != -1) {
            dispatch_once(&qword_1009F8070, &stru_1009B3FA0);
          }
          sub_1004E2340((uint64_t)off_1009F8068, *(unsigned int *)(a2 + 8), 10000);
          sub_1004BE7AC();
        }
        j__usleep(0x4E20u);
        LOBYTE(__p[0]) = 0;
        sub_10001B8E0(__p);
        int v28 = sub_100156A04(*(unsigned __int16 *)(a2 + 4));
        sub_10001B910(__p);
        if (v28 && os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
          sub_100776174();
        }
        unsigned int v27 = __p;
        goto LABEL_30;
      case 3:
        sub_100276544(v5, 0);
        sub_100276754(v5, 0);
        sub_100276764(v5, 0);
        if (sub_100276714(v5))
        {
          BOOL v37 = qword_100A19E70;
          if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Hack for Mercedes finished", (uint8_t *)__p, 2u);
          }
          sub_10027670C(v5, 0);
          return;
        }
        if (sub_1002766CC(v5) && sub_100276230(v5))
        {
          int v43 = qword_100A19E70;
          if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
          {
            if (v7)
            {
              sub_100474E18(v7, __p);
              if (SHIBYTE(v101[0]) >= 0) {
                int v44 = __p;
              }
              else {
                int v44 = (void **)__p[0];
              }
              *(_DWORD *)long long buf = 136446210;
              *(void *)&uint8_t buf[4] = v44;
              _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "Device %{public}s routed away audio after ending call. Ignore route away and allowing audio layer to close session on its own.", buf, 0xCu);
              if (SHIBYTE(v101[0]) < 0) {
                operator delete(__p[0]);
              }
            }
            else
            {
              *(_DWORD *)long long buf = 136446210;
              *(void *)&uint8_t buf[4] = "NULL";
              _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "Device %{public}s routed away audio after ending call. Ignore route away and allowing audio layer to close session on its own.", buf, 0xCu);
            }
          }
          sub_1002766D4(v5, 0);
          return;
        }
        sub_10027656C(v5, 0);
        int v45 = qword_100A19E70;
        if (v7)
        {
          if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
          {
            sub_100474E18(v7, __p);
            uint64_t v46 = SHIBYTE(v101[0]) >= 0 ? __p : (void **)__p[0];
            *(_DWORD *)long long buf = 136446210;
            *(void *)&uint8_t buf[4] = v46;
            _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "Received voice disconnection event for device %{public}s", buf, 0xCu);
            if (SHIBYTE(v101[0]) < 0) {
              operator delete(__p[0]);
            }
          }
          uint64_t v89 = *(unsigned __int8 *)(v7 + 128);
          uint64_t v92 = *(unsigned __int8 *)(v7 + 129);
          uint64_t v47 = *(unsigned __int8 *)(v7 + 130);
          uint64_t v48 = *(unsigned __int8 *)(v7 + 131);
          uint64_t v49 = *(unsigned __int8 *)(v7 + 132);
          uint64_t v50 = *(unsigned __int8 *)(v7 + 133);
          uint64_t v51 = sub_10003FB34();
          uint64_t v52 = sub_100476054(v7);
          uint64_t v53 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, void))(*(void *)v51 + 72))(v51, ((unint64_t)v92 << 8) | ((unint64_t)v47 << 16) | ((unint64_t)v48 << 24) | (v49 << 32) | (v50 << 40) | v89, v52, 1, 0, 1, 1, 0);
          sub_10051F0D0(v53, (v89 << 40) | (v92 << 32) | (v47 << 24) | (v48 << 16) | (v49 << 8) | v50, 0);
          uint64_t v54 = sub_100035F54();
          if ((*(unsigned int (**)(uint64_t))(*(void *)v54 + 328))(v54)
            && sub_100478B2C(v7, 0)
            && sub_100478B2C(v7, 1)
            && sub_100478B2C(v7, 3))
          {
            int v55 = qword_100A19E70;
            if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
            {
              sub_100474E18(v7, __p);
              char v56 = SHIBYTE(v101[0]) >= 0 ? __p : (void **)__p[0];
              *(_DWORD *)long long buf = 136446210;
              *(void *)&uint8_t buf[4] = v56;
              _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "Notify gizmo to reform triangle for device %{public}s if warranted", buf, 0xCu);
              if (SHIBYTE(v101[0]) < 0) {
                operator delete(__p[0]);
              }
            }
            if (qword_1009F80A0 != -1) {
              dispatch_once(&qword_1009F80A0, &stru_1009B4040);
            }
            sub_1002925C4((uint64_t)off_1009F8098, v7);
          }
          uint64_t v57 = sub_10003FB34();
          (*(void (**)(uint64_t))(*(void *)v57 + 1232))(v57);
          *(_DWORD *)int v98 = 0;
          int v94 = 0;
          uint64_t v58 = sub_100017768();
          sub_10004191C(__p, "HFP");
          sub_10004191C(buf, "DisableWBS");
          (*(void (**)(uint64_t, void **, unsigned char *, uint8_t *))(*(void *)v58 + 88))(v58, __p, buf, v98);
          if (v97 < 0) {
            operator delete(*(void **)buf);
          }
          if (SHIBYTE(v101[0]) < 0) {
            operator delete(__p[0]);
          }
          uint64_t v59 = sub_100017768();
          sub_10004191C(__p, "HFP");
          sub_10004191C(buf, "DisableUWBS");
          (*(void (**)(uint64_t, void **, unsigned char *, int *))(*(void *)v59 + 88))(v59, __p, buf, &v94);
          if (v97 < 0) {
            operator delete(*(void **)buf);
          }
          if (SHIBYTE(v101[0]) < 0) {
            operator delete(__p[0]);
          }
          if (!*(_DWORD *)v98 || !v94)
          {
            if (sub_10027661C(v5))
            {
              sub_10003FB34();
              if (sub_1003509A0())
              {
                uint64_t v60 = sub_10003FB34();
                (*(void (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)v60 + 296))(v60, v7, 0, 1);
              }
            }
          }
          sub_10051F058();
          *(_DWORD *)(v7 + 1320) &= ~1u;
          if (sub_100276900(v5) == 1919115628)
          {
            __p[0] = 0;
            sub_100026C30((uint64_t)__p);
            uint64_t v61 = SLODWORD(__p[0]);
            sub_100276920(v5, (__n128 *)__p);
            if (v61 - (unint64_t)__p[0] > 0x3C)
            {
              *((unsigned char *)v4 + 568) = 0;
            }
            else
            {
              unsigned int v62 = ++*((unsigned char *)v4 + 568);
              if (v62 >= 5)
              {
                sub_10027653C(v5);
                if (qword_1009F8070 != -1) {
                  dispatch_once(&qword_1009F8070, &stru_1009B3FA0);
                }
                sub_1004E2340((uint64_t)off_1009F8068, *(unsigned int *)(a2 + 8), 10000);
                sub_1004BE7AC();
              }
            }
          }
          __n128 v93 = 0uLL;
          sub_100276908(v5, &v93);
          sub_10027653C(v5);
          if (qword_1009F8070 != -1) {
            dispatch_once(&qword_1009F8070, &stru_1009B3FA0);
          }
          sub_1004E2340((uint64_t)off_1009F8068, *(unsigned int *)(a2 + 8), 10000);
          sub_1004BE7AC();
        }
        if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
          sub_100776224();
        }
        goto LABEL_205;
      default:
        goto LABEL_56;
    }
  }
  if (v8 > 26)
  {
    if (v8 == 27)
    {
      if (*(_DWORD *)(a2 + 8) == 2)
      {
        uint64_t v6 = sub_10027661C(v5);
        if (v6)
        {
          uint64_t v32 = sub_100035F54();
          uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v32 + 792))(v32, 6);
          if (v6)
          {
            uint64_t v33 = sub_10003FB34();
            uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v33 + 296))(v33, v7, 1, 1);
          }
        }
      }
      uint64_t v34 = *(unsigned __int16 *)(a2 + 4);
      sub_100515A10(v6, v34, 0);
    }
    if (v8 == 28)
    {
      LOBYTE(v94) = 0;
      sub_10001B8E0(&v94);
      *(_WORD *)long long buf = *(_WORD *)(a2 + 4);
      int v16 = *(unsigned __int16 *)buf;
      unsigned int v17 = sub_10014FC30(*(unsigned __int16 *)buf);
      sub_10001B910(&v94);
      uint64_t v18 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        int v19 = *(_DWORD *)(a2 + 8);
        LODWORD(__p[0]) = 67109632;
        HIDWORD(__p[0]) = v19;
        LOWORD(__p[1]) = 1024;
        *(_DWORD *)((char *)&__p[1] + 2) = v16;
        HIWORD(__p[1]) = 1024;
        LODWORD(v101[0]) = (unsigned __int16)v17;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Got new list of available codecs 0x%x for handle %d, customCodecMask 0x%x", (uint8_t *)__p, 0x14u);
      }
      __p[0] = buf;
      BOOL v20 = sub_1002CBD28((uint64_t **)(a1 + 824), (unsigned __int16 *)buf, (uint64_t)&unk_1007BE9D0, (_WORD **)__p);
      sub_100276654((uint64_t)(v20[5] + 50), (v17 & 4) != 0);
      sub_1005D0FB4((uint64_t)v4, (v17 >> 2) & 1);
      __p[0] = buf;
      int v21 = sub_1002CBD28((uint64_t **)(a1 + 824), (unsigned __int16 *)buf, (uint64_t)&unk_1007BE9D0, (_WORD **)__p);
      sub_100276684((uint64_t)(v21[5] + 50), (v17 & 8) != 0);
      sub_1005D0F24((uint64_t)v4, (v17 >> 3) & 1);
      __p[0] = buf;
      int v22 = sub_1002CBD28((uint64_t **)(a1 + 824), (unsigned __int16 *)buf, (uint64_t)&unk_1007BE9D0, (_WORD **)__p);
      sub_100276694((uint64_t)(v22[5] + 50), (v17 & 0x10) != 0);
      sub_1005D0F34((uint64_t)v4, (v17 >> 4) & 1);
      __p[0] = buf;
      int v23 = sub_1002CBD28((uint64_t **)(a1 + 824), (unsigned __int16 *)buf, (uint64_t)&unk_1007BE9D0, (_WORD **)__p);
      sub_100276664((uint64_t)(v23[5] + 50), (v17 & 0x20) != 0);
      sub_1005D0F44((uint64_t)v4, (v17 >> 5) & 1);
      __p[0] = buf;
      char v24 = sub_1002CBD28((uint64_t **)(a1 + 824), (unsigned __int16 *)buf, (uint64_t)&unk_1007BE9D0, (_WORD **)__p);
      sub_100276674((uint64_t)(v24[5] + 50), (v17 & 0x40) != 0);
      sub_1005D0F54((uint64_t)v4, (v17 >> 6) & 1);
      __p[0] = buf;
      int v25 = sub_1002CBD28((uint64_t **)(a1 + 824), (unsigned __int16 *)buf, (uint64_t)&unk_1007BE9D0, (_WORD **)__p);
      sub_100276644((uint64_t)(v25[5] + 50), v17 & 1);
      sub_1005D0FA4((uint64_t)v4, v17 & 1);
      __p[0] = buf;
      char v26 = sub_1002CBD28((uint64_t **)(a1 + 824), (unsigned __int16 *)buf, (uint64_t)&unk_1007BE9D0, (_WORD **)__p);
      sub_100276624((uint64_t)(v26[5] + 50), (v17 & 2) != 0);
      sub_1005D0F84((uint64_t)v4, (v17 >> 1) & 1);
      unsigned int v27 = (void **)&v94;
LABEL_30:
      sub_10001B8AC(v27);
      return;
    }
  }
  else
  {
    if (v8 == 17)
    {
      int v29 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        if (v7)
        {
          sub_100474E18(v7, __p);
          if (SHIBYTE(v101[0]) >= 0) {
            char v30 = __p;
          }
          else {
            char v30 = (void **)__p[0];
          }
          int v31 = *(unsigned __int8 *)(a2 + 8);
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = v30;
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&unsigned char buf[14] = v31;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Received mic gain event from device %{public}s - new gain is %d", buf, 0x12u);
          if (SHIBYTE(v101[0]) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          int v72 = *(unsigned __int8 *)(a2 + 8);
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "NULL";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&unsigned char buf[14] = v72;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Received mic gain event from device %{public}s - new gain is %d", buf, 0x12u);
        }
      }
      sub_10027657C(v5, *(unsigned char *)(a2 + 8));
      if (v4)
      {
        LOBYTE(v73) = *(unsigned char *)(a2 + 8);
        sub_1002E8468((uint64_t)v4, (float)v73 / 15.0);
      }
      goto LABEL_145;
    }
    if (v8 == 18)
    {
      sub_10027658C(v5, *(unsigned char *)(a2 + 8));
      int v12 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        if (v7)
        {
          sub_100474E18(v7, __p);
          if (SHIBYTE(v101[0]) >= 0) {
            uint64_t v14 = __p;
          }
          else {
            uint64_t v14 = (void **)__p[0];
          }
          int v15 = *(unsigned __int8 *)(a2 + 8);
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = v14;
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&unsigned char buf[14] = v15;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Received speaker gain event from device %{public}s - new gain is %d", buf, 0x12u);
          if (SHIBYTE(v101[0]) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          int v70 = *(unsigned __int8 *)(a2 + 8);
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "NULL";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&unsigned char buf[14] = v70;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Received speaker gain event from device %{public}s - new gain is %d", buf, 0x12u);
        }
      }
      if (v4)
      {
        LOBYTE(v13) = *(unsigned char *)(a2 + 8);
        sub_1002E786C((uint64_t)v4, (float)v13 / 15.0);
      }
LABEL_145:
      LOBYTE(__p[0]) = 0;
      sub_10001B8E0(__p);
      int v71 = sub_10014FCB0(*(unsigned __int16 *)(a2 + 4), 0);
      sub_10001B910(__p);
      goto LABEL_194;
    }
  }
LABEL_56:
  BOOL v38 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    if (v7)
    {
      sub_100474E18(v7, __p);
      if (SHIBYTE(v101[0]) >= 0) {
        uint64_t v39 = __p;
      }
      else {
        uint64_t v39 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = v39;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Received unhandled handsfree audio event from stack (%d) for device %{public}s", buf, 0x12u);
      if (SHIBYTE(v101[0]) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      *(_DWORD *)long long buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "NULL";
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Received unhandled handsfree audio event from stack (%d) for device %{public}s", buf, 0x12u);
    }
  }
LABEL_154:
  LOBYTE(__p[0]) = 0;
  sub_10001B8E0(__p);
  int v71 = sub_10014FCB0(*(unsigned __int16 *)(a2 + 4), 2701);
  sub_10001B910(__p);
LABEL_194:
  sub_10001B8AC(__p);
  if (v71)
  {
LABEL_205:
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
      sub_100776100((_DWORD *)a2);
    }
  }
}

void sub_10051D610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
}

uint64_t sub_10051D6D0(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_1005160B8(a1, *((unsigned __int16 *)a2 + 2));
  int v5 = *a2;
  switch(*a2)
  {
    case 10:
      uint64_t v6 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        if (v4)
        {
          sub_100474E18(v4, __p);
          if (v24 >= 0) {
            uint64_t v7 = __p;
          }
          else {
            uint64_t v7 = (void **)__p[0];
          }
          *(_DWORD *)long long buf = 136446210;
          v26[0] = v7;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received dial event from device %{public}s", buf, 0xCu);
          if (v24 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          *(_DWORD *)long long buf = 136446210;
          v26[0] = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received dial event from device %{public}s", buf, 0xCu);
        }
      }
      unsigned int v17 = (unsigned char *)*((void *)a2 + 1);
      if (*v17)
      {
        unsigned int v18 = *((unsigned __int16 *)a2 + 2);
        sub_10062E840(__p, v17);
        uint64_t v19 = sub_10051FBD4(a1, v18, (uint64_t)__p);
        sub_10062E8E8(__p);
        goto LABEL_52;
      }
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
        sub_100776258();
      }
      return 27;
    case 11:
      int v8 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        if (v4)
        {
          sub_100474E18(v4, __p);
          if (v24 >= 0) {
            int v9 = __p;
          }
          else {
            int v9 = (void **)__p[0];
          }
          *(_DWORD *)long long buf = 136446210;
          v26[0] = v9;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received memory dial event from device %{public}s", buf, 0xCu);
          if (v24 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          *(_DWORD *)long long buf = 136446210;
          v26[0] = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received memory dial event from device %{public}s", buf, 0xCu);
        }
      }
      uint64_t v20 = sub_10051FED4(a1, *((unsigned __int16 *)a2 + 2), *((unsigned __int16 *)a2 + 4));
      goto LABEL_51;
    case 12:
      uint64_t v10 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        if (v4)
        {
          sub_100474E18(v4, __p);
          if (v24 >= 0) {
            __int16 v11 = __p;
          }
          else {
            __int16 v11 = (void **)__p[0];
          }
          *(_DWORD *)long long buf = 136446210;
          v26[0] = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Received redial event from device %{public}s", buf, 0xCu);
          if (v24 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          *(_DWORD *)long long buf = 136446210;
          v26[0] = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Received redial event from device %{public}s", buf, 0xCu);
        }
      }
      uint64_t v20 = sub_10051FD6C(a1, *((unsigned __int16 *)a2 + 2));
      goto LABEL_51;
    case 19:
      uint64_t v14 = qword_100A19E70;
      BOOL v15 = os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT);
      if (v15)
      {
        if (v4)
        {
          sub_100474E18(v4, __p);
          if (v24 >= 0) {
            int v16 = __p;
          }
          else {
            int v16 = (void **)__p[0];
          }
          *(_DWORD *)long long buf = 136446210;
          v26[0] = v16;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Received DTMF generation event from device %{public}s", buf, 0xCu);
          if (v24 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          *(_DWORD *)long long buf = 136446210;
          v26[0] = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Received DTMF generation event from device %{public}s", buf, 0xCu);
        }
      }
      uint64_t v20 = sub_1005200E4(v15, 0, *((unsigned __int8 *)a2 + 8));
LABEL_51:
      uint64_t v19 = v20;
LABEL_52:
      if (v19 == 255 && (*a2 - 13) >= 0xFFFFFFFD)
      {
        if (qword_1009FB218 != -1) {
          dispatch_once(&qword_1009FB218, &stru_1009B4120);
        }
        sub_1005F3578((uint64_t)off_1009FB210, 1);
        uint64_t v19 = 255;
      }
      break;
    default:
      int v12 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        if (v4)
        {
          sub_100474E18(v4, __p);
          if (v24 >= 0) {
            unsigned int v13 = __p;
          }
          else {
            unsigned int v13 = (void **)__p[0];
          }
          *(_DWORD *)long long buf = 67109378;
          LODWORD(v26[0]) = v5;
          WORD2(v26[0]) = 2082;
          *(void *)((char *)v26 + 6) = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Received unhandled handsfree dialing event from stack (%d) for device %{public}s", buf, 0x12u);
          if (v24 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          *(_DWORD *)long long buf = 67109378;
          LODWORD(v26[0]) = v5;
          WORD2(v26[0]) = 2082;
          *(void *)((char *)v26 + 6) = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Received unhandled handsfree dialing event from stack (%d) for device %{public}s", buf, 0x12u);
        }
      }
      uint64_t v19 = 4;
      break;
  }
  return v19;
}

void sub_10051DC4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10062E8E8(va);
  _Unwind_Resume(a1);
}

uint64_t sub_10051DC90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1005160B8(a1, *(unsigned __int16 *)(a2 + 4));
  int v5 = *(_DWORD *)a2;
  if (*(int *)a2 > 14)
  {
    if (v5 == 15)
    {
      uint64_t v14 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        if (v4)
        {
          sub_100474E18(v4, __p);
          if (v22 >= 0) {
            BOOL v15 = __p;
          }
          else {
            BOOL v15 = (void **)__p[0];
          }
          *(_DWORD *)long long buf = 136446210;
          v24[0] = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Received call hold event (AT+CHLD) from device %{public}s", buf, 0xCu);
          if (v22 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          *(_DWORD *)long long buf = 136446210;
          v24[0] = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Received call hold event (AT+CHLD) from device %{public}s", buf, 0xCu);
        }
      }
      return sub_100520B68(a1, a2);
    }
    if (v5 == 22)
    {
      int v8 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        if (v4)
        {
          sub_100474E18(v4, __p);
          if (v22 >= 0) {
            int v9 = __p;
          }
          else {
            int v9 = (void **)__p[0];
          }
          *(_DWORD *)long long buf = 136446210;
          v24[0] = v9;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received list calls request (AT+CLCC) from device %{public}s", buf, 0xCu);
          if (v22 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          *(_DWORD *)long long buf = 136446210;
          v24[0] = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received list calls request (AT+CLCC) from device %{public}s", buf, 0xCu);
        }
      }
      sub_100521294(a1, *(unsigned __int16 *)(a2 + 4));
      return 255;
    }
LABEL_20:
    uint64_t v10 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      if (v4)
      {
        sub_100474E18(v4, __p);
        if (v22 >= 0) {
          __int16 v11 = __p;
        }
        else {
          __int16 v11 = (void **)__p[0];
        }
        *(_DWORD *)long long buf = 67109378;
        LODWORD(v24[0]) = v5;
        WORD2(v24[0]) = 2082;
        *(void *)((char *)v24 + 6) = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Received unhandled handsfree call control event from stack (%d) for device %{public}s", buf, 0x12u);
        if (v22 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        *(_DWORD *)long long buf = 67109378;
        LODWORD(v24[0]) = v5;
        WORD2(v24[0]) = 2082;
        *(void *)((char *)v24 + 6) = "NULL";
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Received unhandled handsfree call control event from stack (%d) for device %{public}s", buf, 0x12u);
      }
    }
    return 4;
  }
  if (v5 == 8)
  {
    int v12 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      if (v4)
      {
        sub_100474E18(v4, __p);
        if (v22 >= 0) {
          unsigned int v13 = __p;
        }
        else {
          unsigned int v13 = (void **)__p[0];
        }
        *(_DWORD *)long long buf = 136446210;
        v24[0] = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Received call answer event from device %{public}s", buf, 0xCu);
        if (v22 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        *(_DWORD *)long long buf = 136446210;
        v24[0] = "NULL";
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Received call answer event from device %{public}s", buf, 0xCu);
      }
    }
    return sub_100520290(a1, *(unsigned __int16 *)(a2 + 4));
  }
  if (v5 != 9) {
    goto LABEL_20;
  }
  uint64_t v6 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    if (v4)
    {
      sub_100474E18(v4, __p);
      if (v22 >= 0) {
        uint64_t v7 = __p;
      }
      else {
        uint64_t v7 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136446210;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received call hangup event (AT+CHUP) from device %{public}s", buf, 0xCu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      *(_DWORD *)long long buf = 136446210;
      v24[0] = "NULL";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received call hangup event (AT+CHUP) from device %{public}s", buf, 0xCu);
    }
  }
  if (sub_100275774(a1 + 360))
  {
    int v16 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Ignoring call hangup event as we are transitioning from Virtual Call", (uint8_t *)__p, 2u);
    }
    return 255;
  }
  uint64_t result = sub_1005206B8(a1, *(unsigned __int16 *)(a2 + 4));
  if (result == 255)
  {
    unsigned int v18 = sub_100511724(a1, *(unsigned __int16 *)(a2 + 4));
    if (sub_100276230((uint64_t)(v18 + 50)))
    {
      uint64_t v19 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        if (v4)
        {
          sub_100474E18(v4, __p);
          if (v22 >= 0) {
            uint64_t v20 = __p;
          }
          else {
            uint64_t v20 = (void **)__p[0];
          }
          *(_DWORD *)long long buf = 136446210;
          v24[0] = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Disconnecting sco early w/o notifying audio layer as device %{public}s is a noisy carkit", buf, 0xCu);
          if (v22 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          *(_DWORD *)long long buf = 136446210;
          v24[0] = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Disconnecting sco early w/o notifying audio layer as device %{public}s is a noisy carkit", buf, 0xCu);
        }
      }
      LOBYTE(__p[0]) = 0;
      sub_10001B8E0(__p);
      sub_100156A04(*(unsigned __int16 *)(a2 + 4));
      sub_10001B910(__p);
      sub_10001B8AC(__p);
    }
    return 255;
  }
  return result;
}

void sub_10051E2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

uint64_t sub_10051E2CC(uint64_t a1, unsigned int a2)
{
  uint64_t v14 = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v11 = 0u;
  sub_10062E4F0(&v11);
  if (qword_1009FB120 != -1) {
    dispatch_once(&qword_1009FB120, &stru_1009B4080);
  }
  if (sub_10062EFCC((uint64_t)off_1009FB118) || sub_10062E8EC((uint64_t)&v11)) {
    goto LABEL_26;
  }
  uint64_t v3 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    if (SBYTE7(v12) < 0)
    {
      sub_10003B098(__p, (void *)v11, *((unint64_t *)&v11 + 1));
    }
    else
    {
      *(_OWORD *)long long __p = v11;
      uint64_t v10 = v12;
    }
    uint64_t v4 = __p;
    if (v10 < 0) {
      uint64_t v4 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136315394;
    int v16 = v4;
    __int16 v17 = 1024;
    int v18 = BYTE8(v12);
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Subscriber number is %s and type of address is %d", buf, 0x12u);
    if (SHIBYTE(v10) < 0) {
      operator delete(__p[0]);
    }
  }
  buf[0] = 0;
  sub_10001B8E0(buf);
  if (SBYTE7(v12) < 0)
  {
    sub_10003B098(__p, (void *)v11, *((unint64_t *)&v11 + 1));
  }
  else
  {
    *(_OWORD *)long long __p = v11;
    uint64_t v10 = v12;
  }
  if (v10 >= 0) {
    int v5 = __p;
  }
  else {
    int v5 = (void **)__p[0];
  }
  int v6 = sub_10015110C(a2, (const char *)v5);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  sub_10001B910(buf);
  if (!v6)
  {
    sub_10001B8AC(buf);
LABEL_26:
    uint64_t v7 = 255;
    goto LABEL_27;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
    sub_10077628C();
  }
  sub_10001B8AC(buf);
  uint64_t v7 = 0;
LABEL_27:
  sub_10062E8E8(&v11);
  return v7;
}

void sub_10051E4F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
}

uint64_t sub_10051E544(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = (char *)(a1 + 360);
  memset(&v15, 0, sizeof(v15));
  uint64_t v4 = sub_100275668(a1 + 360);
  uint64_t v5 = v4;
  if (v4 >= 5)
  {
    uint64_t v5 = 0;
    int v6 = 0;
  }
  else
  {
    int v6 = off_1009B4180[(int)v4];
  }
  sub_10027563C(v3, (uint64_t)__p);
  sub_100516390((uint64_t)__p, 4, &buf);
  std::string v15 = buf;
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = v15.__r_.__value_.__l.__size_;
    if (v15.__r_.__value_.__l.__size_ <= 0x10) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  if (HIBYTE(v15.__r_.__value_.__r.__words[2]) >= 0x11u) {
LABEL_10:
  }
    std::string::erase(&v15, 0x10uLL, size - 16);
LABEL_11:
  int v8 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = &v15;
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v9 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Network operator is \"%s\" and mode is %s", (uint8_t *)&buf, 0x16u);
  }
  buf.__r_.__value_.__s.__data_[0] = 0;
  sub_10001B8E0(&buf);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v15.__r_.__value_.__l.__size_) {
      uint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    else {
      uint64_t v10 = 0;
    }
  }
  else if (*((unsigned char *)&v15.__r_.__value_.__s + 23))
  {
    uint64_t v10 = &v15;
  }
  else
  {
    uint64_t v10 = 0;
  }
  if (sub_1001513C4(a2, v5, (const char *)v10))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
      sub_1007762F4();
    }
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = 255;
  }
  sub_10001B8AC(&buf);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  return v11;
}

void sub_10051E750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
}

uint64_t sub_10051E7A4(uint64_t a1, unsigned int a2)
{
  uint64_t result = (uint64_t)sub_100511724(a1, a2);
  if (result)
  {
    uint64_t v3 = result;
    sub_10027659C(result + 400, 1);
    sub_1002EAA34(v3, 1);
    return 255;
  }
  return result;
}

uint64_t sub_10051E7E8(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v6 = sub_1005160B8(a1, a2);
  sub_100511724(a1, a2);
  uint64_t v7 = qword_100A19E70;
  if (!os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_11;
  }
  if (a3) {
    int v8 = "start";
  }
  else {
    int v8 = "end";
  }
  if (v6)
  {
    sub_100474E18(v6, __p);
    if (v14 >= 0) {
      int v9 = __p;
    }
    else {
      int v9 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136446466;
    int v16 = v8;
    __int16 v17 = 2082;
    int v18 = (const char *)v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Received '%{public}s voice command' event for device %{public}s", buf, 0x16u);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
LABEL_11:
    if (a3) {
      goto LABEL_12;
    }
    goto LABEL_15;
  }
  *(_DWORD *)std::string buf = 136446466;
  int v16 = v8;
  __int16 v17 = 2082;
  int v18 = "NULL";
  _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Received '%{public}s voice command' event for device %{public}s", buf, 0x16u);
  if (a3)
  {
LABEL_12:
    if (sub_1002756F8(a1 + 360)) {
      goto LABEL_16;
    }
  }
LABEL_15:
  if (!sub_1002758D0(a1 + 360)) {
    sub_1004BE7AC();
  }
LABEL_16:
  uint64_t v10 = qword_100A19E70;
  BOOL v11 = os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v11)
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Call in progress, denying voice rec session.", (uint8_t *)__p, 2u);
    return 0;
  }
  return result;
}

uint64_t sub_10051EA3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1005160B8(a1, *(unsigned __int16 *)(a2 + 4));
  int v5 = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(unsigned int *)(a2 + 12);
  if (v5 == 2)
  {
    uint64_t v7 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 67109120;
      int v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Received battery level HF indicator with value: %d", (uint8_t *)&v9, 8u);
    }
    sub_10047E170(v3, v4);
    if (qword_1009F7EF0 != -1) {
      dispatch_once(&qword_1009F7EF0, &stru_1009B4160);
    }
    if (sub_1004552FC((uint64_t)off_1009F7EE8, v3)) {
      return 0;
    }
    else {
      return 255;
    }
  }
  else
  {
    if (v5 == 1)
    {
      uint64_t v6 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = 67109120;
        int v10 = v4;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received enhanced safety HF indicator with value: %d", (uint8_t *)&v9, 8u);
      }
      sub_1004BE7AC();
    }
    uint64_t result = os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1007763EC();
      return 0;
    }
  }
  return result;
}

void sub_10051EBF4(uint64_t a1, unsigned int a2)
{
  __int16 v2 = a2;
  uint64_t v4 = sub_100511724(a1, a2);
  if (v4)
  {
    uint64_t v5 = (uint64_t)v4;
    uint64_t v6 = (uint64_t)(v4 + 50);
    uint64_t v7 = sub_10027653C((uint64_t)(v4 + 50));
    BOOL v8 = sub_100514160(v7, v7) == 2 && sub_100276900(v6) == 1918989668;
    int v9 = sub_10027574C(a1 + 360);
    if (v7
      && (int v10 = v9, (v11 = sub_100513E14(a1, v7)) != 0)
      && ((unsigned int v12 = v11, sub_100276900(v6) == 1920364387) || (v8 & v10) != 0))
    {
      long long v13 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        char v14 = "NO";
        *(_DWORD *)std::string buf = 67109634;
        unsigned int v19 = v12;
        if (v8) {
          char v14 = "YES";
        }
        __int16 v20 = 2082;
        int v21 = v14;
        __int16 v22 = 1024;
        int v23 = v10;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Notify HFP Transport Ready in %dMsec Carkit Doing IO = %{public}s, isInVirtualCall:%d", buf, 0x18u);
      }
      uint64_t v15 = sub_1004AFA9C();
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      void v16[2] = sub_10051EE20;
      v16[3] = &unk_1009A0B58;
      v16[4] = a1;
      __int16 v17 = v2;
      sub_1004AFF58(v15, v12, v16);
    }
    else
    {
      sub_1002E8300(v5);
    }
  }
}

void sub_10051EE20(uint64_t a1)
{
  uint64_t v1 = sub_100511724(*(void *)(a1 + 32), *(unsigned __int16 *)(a1 + 40));
  if (v1)
  {
    uint64_t v2 = (uint64_t)v1;
    if (sub_100276564((uint64_t)(v1 + 50)))
    {
      uint64_t v3 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v4 = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Notify HFP Transport Ready", v4, 2u);
      }
      sub_1002E8300(v2);
    }
  }
}

void sub_10051EEB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_100512018(a1, a2);
  if (v2)
  {
    uint64_t v3 = v2 + 400;
    int v4 = sub_100276564(v2 + 400);
    if (v4 == 4)
    {
      char v8 = 0;
      sub_10001B8E0(&v8);
      unsigned int v7 = sub_100276534(v3);
      sub_10014FCB0(v7, 2701);
      sub_10001B910(&v8);
      uint64_t v6 = &v8;
      goto LABEL_6;
    }
    if (v4 == 3)
    {
      char v9 = 0;
      sub_10001B8E0(&v9);
      unsigned int v5 = sub_100276534(v3);
      sub_100151CAC(v5, 0);
      sub_10001B910(&v9);
      uint64_t v6 = &v9;
LABEL_6:
      sub_10001B8AC(v6);
      return;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
      sub_100776454();
    }
  }
}

void sub_10051EF80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12)
{
}

void sub_10051EFA0(os_unfair_lock_s *a1, uint64_t a2, __int16 a3, int a4)
{
  uint64_t v8 = sub_100512018((uint64_t)a1, a2);
  uint64_t v9 = v8;
  if (v8) {
    sub_1002E86B0(v8, a4);
  }
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_10052A7F8;
  _OWORD v10[3] = &unk_1009B3D80;
  __int16 v11 = a3;
  char v12 = a4;
  void v10[4] = a2;
  void v10[5] = v9;
  sub_10052A6C0(a1 + 82, v10);
}

void sub_10051F058()
{
  sub_10003FB34();
  if (sub_1003541E8())
  {
    uint64_t v0 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v1 = 0;
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "Free Voice Buf", v1, 2u);
    }
    sub_10019C4CC();
  }
}

unsigned char *sub_10051F0D0(uint64_t a1, unint64_t a2, int a3)
{
  __int16 v17 = 0;
  unint64_t v4 = sub_10022A5E0(a2);
  int v15 = v4;
  __int16 v16 = WORD2(v4);
  char v14 = 0;
  sub_10001B8E0(&v14);
  sub_10017E2D4((uint64_t)&v15, (uint64_t *)&v17);
  uint64_t v5 = sub_100197960(v17);
  sub_10001B910(&v14);
  if (v17 && *((unsigned char *)v17 + 278))
  {
    int v6 = *((_DWORD *)v17 + 70);
    unsigned int v7 = qword_100A19E70;
    BOOL v8 = os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT);
    if (a3)
    {
      uint64_t v9 = v6 | 0x3F0000u;
      if (v8)
      {
        *(_WORD *)long long v13 = 0;
        int v10 = "Update connection packet types with HDR packets removed";
LABEL_8:
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v10, v13, 2u);
      }
    }
    else
    {
      uint64_t v9 = v6 & 0xFFC0FFFF;
      if (v8)
      {
        *(_WORD *)long long v13 = 0;
        int v10 = "Update connection packet types with HDR packets included";
        goto LABEL_8;
      }
    }
    uint64_t v11 = sub_10003FB34();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 1320))(v11, v5, v9, 1);
  }
  return sub_10001B8AC(&v14);
}

void sub_10051F208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_10051F224(uint64_t a1, unsigned int a2, char a3, int a4)
{
  v26[0] = 0;
  v26[1] = 0;
  sub_10003AED0((uint64_t)v26, a1 + 760);
  uint64_t v8 = sub_1005160B8(a1, a2);
  uint64_t v9 = sub_100512018(a1, v8);
  int v10 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    if (v8)
    {
      sub_100474E18(v8, __p);
      if (v25 >= 0) {
        uint64_t v11 = __p;
      }
      else {
        uint64_t v11 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446466;
      int v28 = (const char *)v11;
      __int16 v29 = 1024;
      int v30 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Disconnecting audio from device %{public}s status %d", buf, 0x12u);
      if (v25 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      *(_DWORD *)std::string buf = 136446466;
      int v28 = "NULL";
      __int16 v29 = 1024;
      int v30 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Disconnecting audio from device %{public}s status %d", buf, 0x12u);
    }
  }
  uint64_t v12 = a1 + 360;
  if (sub_10027574C(v12))
  {
    if (qword_1009FB058 != -1) {
      dispatch_once(&qword_1009FB058, &stru_1009B3FC0);
    }
    sub_10051892C((uint64_t)off_1009FB050);
  }
  if (v9 && sub_1002765DC(v9 + 400))
  {
    long long v13 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Voice command was active, sco will be closed", (uint8_t *)__p, 2u);
    }
    LOBYTE(__p[0]) = 0;
    sub_10001B8E0(__p);
    sub_100150CC4(a2, 0);
    sub_10001B910(__p);
    sub_1002765E4(v9 + 400, 0);
    sub_10001B8AC(__p);
    char v14 = 1;
  }
  else
  {
    char v14 = 0;
  }
  if (sub_100275948(v12)) {
    sub_100275950(v12, 0);
  }
  if (v9)
  {
    sub_10003FB34();
    if (sub_100350E68()
      && sub_10027671C(v9 + 400)
      && sub_1002756F8(v12)
      && sub_100276900(v9 + 400) == 1918989668
      && sub_1002766EC(v9 + 400) != 127
      && sub_1002766EC(v9 + 400) != 256
      && sub_1002766EC(v9 + 400) != 128
      && sub_1002766EC(v9 + 400) != 129
      && sub_1002766EC(v9 + 400) != 130)
    {
      char v20 = sub_1002766EC(v9 + 400) == 255 ? 1 : v14;
      if ((v20 & 1) == 0 && (a3 & 1) == 0)
      {
        int v21 = qword_100A19E70;
        if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Faking SCO disconnection here, but actually letting it stay open since we're answering an incoming call", (uint8_t *)__p, 2u);
        }
        sub_1005D0DE4(v9, 0, a4);
        sub_10026E5DC(v9 + 400, 0);
        sub_100275880(v9 + 400, 0);
        uint64_t v18 = 0;
        goto LABEL_59;
      }
    }
  }
  char v23 = 0;
  sub_10001B8E0(&v23);
  int v15 = sub_100156A04(a2);
  sub_10001B910(&v23);
  uint64_t v16 = sub_1004AFA9C();
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  void v22[2] = sub_100523030;
  void v22[3] = &unk_100997528;
  uint8_t v22[4] = v12;
  sub_100013018(v16, v22);
  if (v9)
  {
    sub_100276754(v9 + 400, 0);
    sub_100276764(v9 + 400, 0);
    if (!a4)
    {
LABEL_46:
      sub_1005D0DE4(v9, 0, a4);
      goto LABEL_47;
    }
    if (a4 != 116)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
      {
        if (v8)
        {
          sub_100474E18(v8, __p);
          sub_10077656C();
        }
        else
        {
          sub_100776524((uint64_t)buf, a4);
        }
      }
      if ((a3 & 1) == 0)
      {
        if (qword_1009F80B0 != -1) {
          dispatch_once(&qword_1009F80B0, &stru_1009B4060);
        }
        sub_100569134((uint64_t)off_1009F80A8, v8, a4);
      }
      goto LABEL_46;
    }
    if ((sub_100157140() & 1) == 0)
    {
      a4 = 0;
      goto LABEL_46;
    }
    if (sub_100478B2C(v8, 12))
    {
      a4 = 116;
      goto LABEL_46;
    }
  }
LABEL_47:
  if (v15)
  {
    if (v15 == 1807)
    {
      __int16 v17 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Audio was already disconnected", buf, 2u);
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
      {
        if (v8)
        {
          sub_100474E18(v8, buf);
          sub_1007764D0();
        }
        else
        {
          sub_100776488((uint64_t)v31, v15);
        }
      }
      sub_1002B804C(&v23);
      sub_1001566A8(a2, v15);
      sub_10001B910(&v23);
    }
  }
  if (v9) {
    sub_10026E5DC(v9 + 400, 0);
  }
  sub_10001B8AC(&v23);
  uint64_t v18 = 1;
LABEL_59:
  sub_10003AFB4((uint64_t)v26);
  return v18;
}

void sub_10051F7F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
}

unsigned char *sub_10051F854(uint64_t a1, int a2)
{
  char v11 = 0;
  sub_10001B8E0(&v11);
  uint64_t v4 = sub_1001517B0(a2);
  sub_10001B910(&v11);
  if (!v4)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
      sub_1007765C0();
    }
    goto LABEL_9;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009B4000);
  }
  __int16 v5 = *(_WORD *)(v4 + 4);
  LODWORD(v9[0]) = *(_DWORD *)v4;
  WORD2(v9[0]) = v5;
  uint64_t v6 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)v9, 1);
  if (!v6)
  {
LABEL_9:
    sub_1002B804C(&v11);
    sub_10014FCB0(a2, 2701);
    sub_10001B910(&v11);
    return sub_10001B8AC(&v11);
  }
  v9[0] = 0;
  v9[1] = 0;
  uint64_t v10 = 0;
  if (sub_100512018(a1, v6)) {
    operator new();
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
  {
    sub_100475EE0(v6, (uint64_t)__p);
    sub_1007751F4();
  }
  return sub_10001B8AC(&v11);
}

void sub_10051FB64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20,char a21,char a22)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_10001B8AC(&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_10051FBD4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  v14[0] = 0;
  v14[1] = 0;
  sub_10003AED0((uint64_t)v14, a1 + 760);
  memset(&v13, 0, sizeof(v13));
  sub_10051628C(a1, a2, &v13);
  uint64_t v6 = a1 + 360;
  if (sub_100275948(a1 + 360))
  {
    sub_100275950(a1 + 360, 0);
    sub_1005232E0(*(void **)(a1 + 824), (void *)(a1 + 832), (void (*)(void, void))sub_100523360);
  }
  if (qword_1009FB120 != -1) {
    dispatch_once(&qword_1009FB120, &stru_1009B4080);
  }
  unsigned int v7 = off_1009FB118;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    sub_10003B098(&__p, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v13;
  }
  int v8 = sub_10062F4C0((uint64_t)v7, a3, (uint64_t)&__p);
  int v9 = v8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v9) {
      goto LABEL_10;
    }
  }
  else if (v8)
  {
LABEL_10:
    uint64_t v10 = 0;
    goto LABEL_13;
  }
  sub_100275958(v6, 1);
  uint64_t v10 = 255;
LABEL_13:
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  sub_10003AFB4((uint64_t)v14);
  return v10;
}

void sub_10051FD24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_10051FD6C(uint64_t a1, unsigned int a2)
{
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, a1 + 760);
  memset(&v10, 0, sizeof(v10));
  sub_10051628C(a1, a2, &v10);
  if (qword_1009FB120 != -1) {
    dispatch_once(&qword_1009FB120, &stru_1009B4080);
  }
  uint64_t v4 = off_1009FB118;
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    sub_10003B098(&__p, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v10;
  }
  int v5 = sub_10062F578((uint64_t)v4, (uint64_t)&__p);
  int v6 = v5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v6) {
      goto LABEL_8;
    }
LABEL_12:
    uint64_t v7 = 255;
    goto LABEL_13;
  }
  if (!v5) {
    goto LABEL_12;
  }
LABEL_8:
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
    sub_10077662C();
  }
  uint64_t v7 = 23;
LABEL_13:
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  sub_10003AFB4((uint64_t)v11);
  return v7;
}

void sub_10051FE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_10003AFB4(v20 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_10051FED4(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v6 = sub_1005160B8(a1, a2);
  v22[0] = 0;
  v22[1] = 0;
  uint64_t v7 = sub_1005DA858(v22, v6);
  uint64_t v21 = 0;
  long long v19 = 0u;
  *(_OWORD *)uint64_t v20 = 0u;
  *(_OWORD *)std::string __p = 0u;
  if (!a3)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
      sub_100776660();
    }
    goto LABEL_11;
  }
  int v8 = (void *)sub_1005DB02C(v7);
  int v9 = v8;
  if (!v8)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
      sub_100776694();
    }
LABEL_11:
    uint64_t v10 = 21;
    goto LABEL_18;
  }
  sub_10036C478(v8, 0, (uint64_t)v13);
  if (SBYTE7(v19) < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)std::string __p = *(_OWORD *)v13;
  *(void *)&long long v19 = v14;
  HIBYTE(v14) = 0;
  LOBYTE(v13[0]) = 0;
  DWORD2(v19) = v15;
  if (SHIBYTE(v21) < 0)
  {
    operator delete(v20[0]);
    *(_OWORD *)uint64_t v20 = v16;
    uint64_t v21 = v17;
    HIBYTE(v17) = 0;
    LOBYTE(v16) = 0;
    if (SHIBYTE(v14) < 0) {
      operator delete(v13[0]);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v20 = v16;
    uint64_t v21 = v17;
  }
  (*(void (**)(void *))(*v9 + 8))(v9);
  if ((SBYTE7(v19) & 0x80u) == 0) {
    char v11 = __p;
  }
  else {
    char v11 = (void **)__p[0];
  }
  sub_10062E840(v13, v11);
  uint64_t v10 = sub_10051FBD4(a1, a2, (uint64_t)v13);
  sub_10062E8E8(v13);
LABEL_18:
  if (SHIBYTE(v21) < 0) {
    operator delete(v20[0]);
  }
  if (SBYTE7(v19) < 0) {
    operator delete(__p[0]);
  }
  return v10;
}

void sub_1005200B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_10062E8E8((uint64_t *)va);
  sub_100376850((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1005200E4(uint64_t a1, uint64_t a2, int a3)
{
  char v4 = a3 - 35;
  if (a3 - 35) < 0x17 && ((0x7FE081u >> v4))
  {
    uint64_t v6 = dword_1007BF5A8[v4];
    uint64_t v7 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      v11[0] = 67109120;
      v11[1] = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Playing DTMF tone %c", (uint8_t *)v11, 8u);
    }
    CFURLRef v8 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, @"/System/Library/Frameworks/AudioToolbox.framework", kCFURLPOSIXPathStyle, 1u);
    uint64_t v9 = CFBundleCreate(kCFAllocatorDefault, v8);
    FunctionPointerForName = (void (*)(uint64_t))CFBundleGetFunctionPointerForName(v9, @"AudioServicesPlaySystemSound");
    FunctionPointerForName(v6);
    CFRelease(v9);
    CFRelease(v8);
    if (qword_1009FB120 != -1) {
      dispatch_once(&qword_1009FB120, &stru_1009B4080);
    }
    if (sub_10062F62C((uint64_t)off_1009FB118)) {
      return 0;
    }
    else {
      return 255;
    }
  }
  else
  {
    uint64_t result = os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1007766C8();
      return 0;
    }
  }
  return result;
}

uint64_t sub_100520290(uint64_t a1, unsigned int a2)
{
  memset(&v30, 0, sizeof(v30));
  sub_10051628C(a1, a2, &v30);
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  sub_100275968(a1 + 360, (int)&v27);
  if (sub_1004BDD5C(a1) == 1)
  {
    char v4 = sub_100511724(a1, a2);
    if (v4) {
      sub_10026E5DC((uint64_t)(v4 + 50), 1);
    }
  }
  sub_10027577C(a1 + 360);
  if (!sub_10061FEFC(&v27) && !sub_10061FEC8(&v27))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
      sub_100776764();
    }
    goto LABEL_28;
  }
  if (!sub_100275918(a1 + 360, 1))
  {
    uint64_t v5 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
    {
      int v24 = sub_1002758D0(a1 + 360);
      sub_1002755C4(&v24, buf);
      int v16 = v26;
      uint64_t v17 = *(uint8_t **)buf;
      int v21 = 1;
      sub_1002755C4(&v21, v22);
      uint64_t v18 = buf;
      if (v16 < 0) {
        uint64_t v18 = v17;
      }
      if (v23 >= 0) {
        long long v19 = v22;
      }
      else {
        long long v19 = (void **)v22[0];
      }
      *(_DWORD *)int v31 = 136446466;
      uint64_t v32 = v18;
      __int16 v33 = 2082;
      uint64_t v34 = v19;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Unexpected answer event as our call setup state is \"%{public}s\", not \"%{public}s\"", v31, 0x16u);
      if (v23 < 0) {
        operator delete(v22[0]);
      }
      if (v26 < 0) {
        operator delete(*(void **)buf);
      }
    }
  }
  if (v27 == v28)
  {
LABEL_21:
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
      sub_100776730();
    }
    goto LABEL_28;
  }
  uint64_t v6 = v27 + 104;
  while (1)
  {
    int v7 = *(_DWORD *)(v6 - 88);
    if (v7 == 5) {
      break;
    }
    BOOL v8 = v7 == 6 || v6 == v28;
    v6 += 104;
    if (v8)
    {
      if (v7 != 6) {
        goto LABEL_21;
      }
      break;
    }
  }
  if (qword_1009FB120 != -1) {
    dispatch_once(&qword_1009FB120, &stru_1009B4080);
  }
  uint64_t v9 = off_1009FB118;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    sub_10003B098(&__p, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v30;
  }
  int v10 = sub_10062F1B4((uint64_t)v9, (uint64_t)&__p);
  int v11 = v10;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v11) {
      goto LABEL_28;
    }
  }
  else if (v10)
  {
LABEL_28:
    uint64_t v12 = 0;
    goto LABEL_29;
  }
  uint64_t v14 = sub_100511724(a1, a2);
  if (sub_1002767AC((uint64_t)(v14 + 50)))
  {
    LOBYTE(v22[0]) = 0;
    v31[0] = 0;
    LOBYTE(v24) = 0;
    int v15 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "This kit requires a hack to answer incoming calls.", buf, 2u);
    }
    buf[0] = 0;
    sub_10001B8E0(buf);
    sub_1001516D0((BOOL *)v22, v31, &v24);
    sub_100150184(a2, 1);
    sub_1001502AC(a2, 0);
    sub_10001B910(buf);
    sub_10001B8AC(buf);
  }
  uint64_t v12 = 255;
LABEL_29:
  *(void *)std::string buf = &v27;
  sub_10027696C((void ***)buf);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  return v12;
}

void sub_100520634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27)
{
  std::string __p = &a27;
  sub_10027696C((void ***)&__p);
  if (*(char *)(v27 - 81) < 0) {
    operator delete(*(void **)(v27 - 104));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1005206B8(uint64_t a1, unsigned int a2)
{
  v25[0] = 0;
  v25[1] = 0;
  sub_10003AED0((uint64_t)v25, a1 + 760);
  char v4 = sub_100511724(a1, a2);
  sub_1005160B8(a1, a2);
  if (v4) {
    sub_10026E5DC((uint64_t)(v4 + 50), 0);
  }
  uint64_t v5 = a1 + 360;
  if (sub_1002756C0(a1 + 360) || sub_1002756C8(a1 + 360))
  {
    int v6 = sub_1002756E0(a1 + 360);
    int v7 = qword_100A19E70;
    BOOL v8 = os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT);
    if (!v6)
    {
      if (v8)
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Found incoming call to reject", buf, 2u);
      }
      uint64_t v11 = sub_100523410(a1, a2);
      goto LABEL_23;
    }
    if (v8)
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "We have both an incoming and active call, hanging up the active call.", buf, 2u);
    }
  }
  if (sub_1002756E0(a1 + 360) || sub_1002756E8(a1 + 360))
  {
    uint64_t v9 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Found active call to hang up", buf, 2u);
    }
    if (v4) {
      sub_1002766D4((uint64_t)(v4 + 50), 1);
    }
    if (qword_1009FB120 != -1) {
      dispatch_once(&qword_1009FB120, &stru_1009B4080);
    }
    int v10 = sub_10062F290((uint64_t)off_1009FB118);
LABEL_17:
    if (v10) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = 255;
    }
    goto LABEL_23;
  }
  if (sub_10027574C(a1 + 360))
  {
    std::string v13 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Found ongoing virtual call - Acking device and notifying upper layers.", buf, 2u);
    }
    sub_1004BE7AC();
  }
  int v14 = sub_1002756F0(a1 + 360);
  int v15 = qword_100A19E70;
  if (v14)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Hanging up held call.", buf, 2u);
    }
    if (qword_1009FB120 != -1) {
      dispatch_once(&qword_1009FB120, &stru_1009B4080);
    }
    int v10 = sub_10062F2B8((uint64_t)off_1009FB118);
    goto LABEL_17;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Hangup event was unexpected - dumping state and call list...", buf, 2u);
    int v15 = qword_100A19E70;
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    int v22 = sub_1002758D0(v5);
    int v16 = v23;
    sub_1002755C4(&v22, v23);
    if (v24 < 0) {
      int v16 = (void **)v23[0];
    }
    uint64_t v17 = "no";
    if (sub_1002756C0(v5)) {
      uint64_t v18 = "yes";
    }
    else {
      uint64_t v18 = "no";
    }
    if (sub_1002756C8(v5)) {
      uint64_t v17 = "yes";
    }
    sub_100275968(v5, (int)v20);
    sub_10061FC64(v20, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136446978;
    uint64_t v28 = v16;
    __int16 v29 = 2082;
    std::string v30 = v18;
    __int16 v31 = 2082;
    uint64_t v32 = v17;
    __int16 v33 = 2082;
    uint64_t v34 = p_p;
    _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "callSetup: %{public}s, callRinging: %{public}s, callWaiting: %{public}s, calls: %{public}s", buf, 0x2Au);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    char v26 = (void **)v20;
    sub_10027696C(&v26);
    if (v24 < 0) {
      operator delete(v23[0]);
    }
  }
  uint64_t v11 = 0;
LABEL_23:
  sub_10003AFB4((uint64_t)v25);
  return v11;
}

void sub_100520B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_100520B68(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  uint64_t v5 = sub_1005160B8(a1, *(unsigned __int16 *)(a2 + 4));
  switch(v4)
  {
    case 0:
      int v6 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        if (v5)
        {
          sub_100474E18(v5, __p);
          if (v26 >= 0) {
            int v7 = __p;
          }
          else {
            int v7 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136446210;
          v28[0] = v7;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received release held calls event from device %{public}s", buf, 0xCu);
          if (v26 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          *(_DWORD *)std::string buf = 136446210;
          v28[0] = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received release held calls event from device %{public}s", buf, 0xCu);
        }
      }
      return sub_1005216F8(a1, *(unsigned __int16 *)(a2 + 4));
    case 1:
      int v14 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        if (v5)
        {
          sub_100474E18(v5, __p);
          if (v26 >= 0) {
            int v15 = __p;
          }
          else {
            int v15 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136446210;
          v28[0] = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Received release active calls and answer incoming call event from device %{public}s", buf, 0xCu);
          if (v26 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          *(_DWORD *)std::string buf = 136446210;
          v28[0] = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Received release active calls and answer incoming call event from device %{public}s", buf, 0xCu);
        }
      }
      return sub_100521908(a1, *(unsigned __int16 *)(a2 + 4));
    case 2:
      int v16 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        if (v5)
        {
          sub_100474E18(v5, __p);
          if (v26 >= 0) {
            uint64_t v17 = __p;
          }
          else {
            uint64_t v17 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136446210;
          v28[0] = v17;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Received hold active calls event from device %{public}s", buf, 0xCu);
          if (v26 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          *(_DWORD *)std::string buf = 136446210;
          v28[0] = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Received hold active calls event from device %{public}s", buf, 0xCu);
        }
      }
      return sub_100521CB4(a1, *(unsigned __int16 *)(a2 + 4));
    case 3:
      uint64_t v18 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        if (v5)
        {
          sub_100474E18(v5, __p);
          if (v26 >= 0) {
            long long v19 = __p;
          }
          else {
            long long v19 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136446210;
          v28[0] = v19;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Received add held call event from device %{public}s", buf, 0xCu);
          if (v26 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          *(_DWORD *)std::string buf = 136446210;
          v28[0] = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Received add held call event from device %{public}s", buf, 0xCu);
        }
      }
      return sub_100522014(a1);
    case 4:
      uint64_t v20 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        if (v5)
        {
          sub_100474E18(v5, __p);
          if (v26 >= 0) {
            int v21 = __p;
          }
          else {
            int v21 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136446210;
          v28[0] = v21;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Received call transfer event from device %{public}s", buf, 0xCu);
          if (v26 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          *(_DWORD *)std::string buf = 136446210;
          v28[0] = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Received call transfer event from device %{public}s", buf, 0xCu);
        }
      }
      sub_1005220AC();
      return 4;
    default:
      if (v4 < 10) {
        goto LABEL_49;
      }
      int v8 = 1;
      unsigned int v9 = v4;
      do
      {
        unsigned int v10 = v9;
        v9 /= 0xAu;
        v8 *= 10;
      }
      while (v10 > 0x63);
      int v11 = v4 - v8 * v9;
      if (v9 == 2)
      {
        char v23 = qword_100A19E70;
        if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
        {
          if (v5)
          {
            sub_100474E18(v5, __p);
            if (v26 >= 0) {
              char v24 = __p;
            }
            else {
              char v24 = (void **)__p[0];
            }
            *(_DWORD *)std::string buf = 67109378;
            LODWORD(v28[0]) = v11;
            WORD2(v28[0]) = 2082;
            *(void *)((char *)v28 + 6) = v24;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Received private conference event for call index %d from device %{public}s", buf, 0x12u);
            if (v26 < 0) {
              operator delete(__p[0]);
            }
          }
          else
          {
            *(_DWORD *)std::string buf = 67109378;
            LODWORD(v28[0]) = v11;
            WORD2(v28[0]) = 2082;
            *(void *)((char *)v28 + 6) = "NULL";
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Received private conference event for call index %d from device %{public}s", buf, 0x12u);
          }
        }
        return sub_1005226B0(a1, 0, v11);
      }
      else if (v9 == 1)
      {
        uint64_t v12 = qword_100A19E70;
        if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
        {
          if (v5)
          {
            sub_100474E18(v5, __p);
            if (v26 >= 0) {
              std::string v13 = __p;
            }
            else {
              std::string v13 = (void **)__p[0];
            }
            *(_DWORD *)std::string buf = 67109378;
            LODWORD(v28[0]) = v11;
            WORD2(v28[0]) = 2082;
            *(void *)((char *)v28 + 6) = v13;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Received release active call event for call index %d from device %{public}s", buf, 0x12u);
            if (v26 < 0) {
              operator delete(__p[0]);
            }
          }
          else
          {
            *(_DWORD *)std::string buf = 67109378;
            LODWORD(v28[0]) = v11;
            WORD2(v28[0]) = 2082;
            *(void *)((char *)v28 + 6) = "NULL";
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Received release active call event for call index %d from device %{public}s", buf, 0x12u);
          }
        }
        return sub_1005220F4(a1, 0, v11);
      }
      else
      {
LABEL_49:
        if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
          sub_100776798();
        }
        return 4;
      }
  }
}

uint64_t sub_100521294(uint64_t a1, unsigned int a2)
{
  memset(v29, 0, sizeof(v29));
  sub_10061F99C(v29);
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  sub_10061F99C(&v26);
  memset(&__p, 0, sizeof(__p));
  uint64_t v24 = 0;
  long long v23 = 0u;
  memset(v22, 0, sizeof(v22));
  sub_10062E4F0(v22);
  uint64_t v4 = sub_1005160B8(a1, a2);
  uint64_t v5 = a1 + 360;
  if (sub_10027575C(v5) & 1) != 0 || (sub_100275774(v5)) {
    goto LABEL_35;
  }
  sub_100275968(v5, (int)&v21);
  sub_100276A50((uint64_t)&v26, (uint64_t)v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v21.__r_.__value_.__l.__size_ - v21.__r_.__value_.__r.__words[0]) >> 3));
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
  sub_10027696C((void ***)&v20);
  uint64_t v6 = v26;
  if (v26 == v27) {
    goto LABEL_34;
  }
  while (1)
  {
    int v7 = *(_DWORD *)(v6 + 16) - 1;
    if (v7 >= 7)
    {
      int v14 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
      {
        sub_100523624(v6, &v21);
        int v15 = &v21;
        if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          int v15 = (std::string *)v21.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string buf = 136315138;
        __int16 v31 = v15;
        _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Found invalid call status - skipping call: %s", buf, 0xCu);
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v21.__r_.__value_.__l.__data_);
        }
      }
      goto LABEL_29;
    }
    unsigned int v8 = dword_1007BF604[v7];
    sub_10062E90C((std::string *)v22, v6 + 24);
    uint64_t v9 = *(unsigned int *)(v6 + 8);
    int v10 = *(unsigned __int8 *)(v6 + 12);
    int v11 = *(unsigned __int8 *)(v6 + 13);
    sub_100516598(v6 + 80, v4, &v21);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v21;
    v21.__r_.__value_.__s.__data_[0] = 0;
    sub_10001B8E0(&v21);
    BOOL v12 = sub_10062E8EC((uint64_t)v22);
    if (v12)
    {
      std::string v13 = 0;
    }
    else
    {
      sub_10062EA4C((uint64_t)v22, &v20);
      std::string v13 = (v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v20
          : (std::string *)v20.__r_.__value_.__r.__words[0];
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      p_p = __p.__r_.__value_.__l.__size_ ? (std::string *)__p.__r_.__value_.__r.__words[0] : 0;
    }
    else
    {
      p_p = &__p;
      if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
        p_p = 0;
      }
    }
    int v17 = sub_1001511F0(a2, v9, v10 == 0, v8, 0, v11 != 0, (const char *)v13, v22[24], (const char *)p_p);
    if (!v12 && SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    sub_10001B910(&v21);
    if (v17) {
      break;
    }
    sub_10061FA2C(v29, v6);
    sub_10001B8AC(&v21);
LABEL_29:
    v6 += 104;
    if (v6 == v27) {
      goto LABEL_34;
    }
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
    sub_100776800();
  }
  sub_10001B8AC(&v21);
LABEL_34:
  sub_10061FA28((int)v19);
  sub_100275714(v5, v19);
  v21.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
  sub_10027696C((void ***)&v21);
LABEL_35:
  sub_10062E8E8(v22);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)int v22 = &v26;
  sub_10027696C((void ***)v22);
  *(void *)int v22 = v29;
  sub_10027696C((void ***)v22);
  return 255;
}

void sub_100521630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  sub_10027696C((void ***)&a23);
  sub_10062E8E8(&a26);
  if (a39 < 0) {
    operator delete(__p);
  }
  a26 = v39 - 176;
  sub_10027696C((void ***)&a26);
  a26 = v39 - 152;
  sub_10027696C((void ***)&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_1005216F8(uint64_t a1, unsigned int a2)
{
  memset(v10, 0, sizeof(v10));
  sub_10061F99C(v10);
  sub_100275968(a1 + 360, (int)&v8);
  sub_100276A50((uint64_t)v10, v8, v9, 0x4EC4EC4EC4EC4EC5 * ((v9 - v8) >> 3));
  BOOL v12 = (void **)&v8;
  sub_10027696C(&v12);
  int v4 = sub_1002758D0(a1 + 360);
  if (sub_10061FEFC(v10) || sub_10061FEC8(v10))
  {
    uint64_t v5 = sub_100523410(a1, a2);
    goto LABEL_14;
  }
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
    {
      int v7 = sub_1002758D0(a1 + 360);
      sub_1002755C4(&v7, &v8);
      sub_10077689C();
    }
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_14;
  }
  if (!sub_10061FE28(v10))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
      sub_100776868();
    }
    goto LABEL_7;
  }
  if (qword_1009FB120 != -1) {
    dispatch_once(&qword_1009FB120, &stru_1009B4080);
  }
  if (sub_10062F2B8((uint64_t)off_1009FB118)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 255;
  }
LABEL_14:
  int v11 = (void **)v10;
  sub_10027696C(&v11);
  return v5;
}

void sub_1005218C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  a10 = (void **)&a13;
  sub_10027696C(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_100521908(uint64_t a1, unsigned int a2)
{
  memset(&v22, 0, sizeof(v22));
  sub_10051628C(a1, a2, &v22);
  uint64_t v3 = a1 + 360;
  if (sub_1002756C8(v3))
  {
    if (!sub_100275918(v3, 1))
    {
      int v4 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
      {
        int v19 = sub_1002758D0(v3);
        sub_1002755C4(&v19, v20);
        int v10 = v21;
        int v11 = (void **)v20[0];
        int v16 = 1;
        sub_1002755C4(&v16, v17);
        BOOL v12 = v20;
        if (v10 < 0) {
          BOOL v12 = v11;
        }
        if (v18 >= 0) {
          std::string v13 = v17;
        }
        else {
          std::string v13 = (void **)v17[0];
        }
        *(_DWORD *)std::string buf = 136446466;
        uint64_t v24 = v12;
        __int16 v25 = 2082;
        uint64_t v26 = v13;
        _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unexpected release active calls event as our call setup state is \"%{public}s\", not \"%{public}s\"", buf, 0x16u);
        if (v18 < 0) {
          operator delete(v17[0]);
        }
        if (v21 < 0) {
          operator delete(v20[0]);
        }
      }
    }
    if (qword_1009FB120 != -1) {
      dispatch_once(&qword_1009FB120, &stru_1009B4080);
    }
    uint64_t v5 = off_1009FB118;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      sub_10003B098(&__dst, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    }
    else {
      std::string __dst = v22;
    }
    if (sub_10062F2E0((uint64_t)v5, (uint64_t)&__dst)) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = 255;
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v8 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_35:
      operator delete(v8);
      goto LABEL_39;
    }
    goto LABEL_39;
  }
  if (!sub_100275918(v3, 0))
  {
    if (sub_1002756E8(v3))
    {
      if (qword_1009FB120 != -1) {
        dispatch_once(&qword_1009FB120, &stru_1009B4080);
      }
      if (sub_10062F290((uint64_t)off_1009FB118)) {
        uint64_t v7 = 0;
      }
      else {
        uint64_t v7 = 255;
      }
      goto LABEL_39;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
      sub_100776924();
    }
LABEL_38:
    uint64_t v7 = 0;
    goto LABEL_39;
  }
  if (!sub_1002756E0(v3) && !sub_1002756F0(v3))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
      sub_1007768F0();
    }
    goto LABEL_38;
  }
  if (qword_1009FB120 != -1) {
    dispatch_once(&qword_1009FB120, &stru_1009B4080);
  }
  uint64_t v6 = off_1009FB118;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    sub_10003B098(&__p, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v22;
  }
  if (sub_10062F2E0((uint64_t)v6, (uint64_t)&__p)) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 255;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v8 = (void *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_35;
  }
LABEL_39:
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  return v7;
}

void sub_100521C4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 65) < 0) {
    operator delete(*(void **)(v32 - 88));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100521CB4(uint64_t a1, unsigned int a2)
{
  memset(&v22, 0, sizeof(v22));
  sub_10051628C(a1, a2, &v22);
  uint64_t v3 = a1 + 360;
  if (sub_1002756C8(a1 + 360))
  {
    if (!sub_100275918(a1 + 360, 1))
    {
      int v4 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
      {
        int v19 = sub_1002758D0(v3);
        sub_1002755C4(&v19, v20);
        int v10 = v21;
        int v11 = (void **)v20[0];
        int v16 = 1;
        sub_1002755C4(&v16, v17);
        BOOL v12 = v20;
        if (v10 < 0) {
          BOOL v12 = v11;
        }
        if (v18 >= 0) {
          std::string v13 = v17;
        }
        else {
          std::string v13 = (void **)v17[0];
        }
        *(_DWORD *)std::string buf = 136446466;
        uint64_t v24 = v12;
        __int16 v25 = 2082;
        uint64_t v26 = v13;
        _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unexpected hold active calls event as our call setup state is \"%{public}s\", not \"%{public}s\"", buf, 0x16u);
        if (v18 < 0) {
          operator delete(v17[0]);
        }
        if (v21 < 0) {
          operator delete(v20[0]);
        }
      }
    }
    if (qword_1009FB120 != -1) {
      dispatch_once(&qword_1009FB120, &stru_1009B4080);
    }
    uint64_t v5 = off_1009FB118;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      sub_10003B098(&__dst, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    }
    else {
      std::string __dst = v22;
    }
    if (sub_10062F394((uint64_t)v5, (uint64_t)&__dst)) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = 255;
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v8 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_30:
      operator delete(v8);
    }
  }
  else if (sub_100275918(a1 + 360, 0))
  {
    if (sub_1002756E0(a1 + 360) || sub_1002756F0(a1 + 360))
    {
      if (qword_1009FB120 != -1) {
        dispatch_once(&qword_1009FB120, &stru_1009B4080);
      }
      uint64_t v6 = off_1009FB118;
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        sub_10003B098(&__p, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v22;
      }
      if (sub_10062F394((uint64_t)v6, (uint64_t)&__p)) {
        uint64_t v7 = 0;
      }
      else {
        uint64_t v7 = 255;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v8 = (void *)__p.__r_.__value_.__r.__words[0];
        goto LABEL_30;
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
        sub_100776958();
      }
      uint64_t v7 = 0;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
      sub_10077698C();
    }
    uint64_t v7 = 3;
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  return v7;
}

void sub_100521FAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 65) < 0) {
    operator delete(*(void **)(v32 - 88));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100522014(uint64_t a1)
{
  if (sub_1002756F0(a1 + 360))
  {
    if (qword_1009FB120 != -1) {
      dispatch_once(&qword_1009FB120, &stru_1009B4080);
    }
    if (sub_10062F448((uint64_t)off_1009FB118)) {
      return 0;
    }
    else {
      return 255;
    }
  }
  else
  {
    uint64_t result = os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1007769C0();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1005220AC()
{
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
    sub_1007769F4();
  }
  return 4;
}

uint64_t sub_1005220F4(uint64_t a1, uint64_t a2, int a3)
{
  __int16 v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v4 = a1 + 360;
  sub_100275708((int)&v31);
  uint64_t v28 = 0;
  __int16 v29 = 0;
  uint64_t v30 = 0;
  sub_100275968(v4, (int)&v28);
  memset(uu, 0, sizeof(uu));
  uuid_clear(uu);
  if (qword_1009FB120 != -1) {
    dispatch_once(&qword_1009FB120, &stru_1009B4080);
  }
  if (sub_10062F6A4((uint64_t)off_1009FB118))
  {
    if (a3)
    {
      uint64_t v5 = (id *)sub_10061FBE8((uint64_t *)&v31, a3);
      uint64_t v6 = (uint64_t)v5;
      if (v32 == v5)
      {
        int v16 = (id *)sub_10061FBE8((uint64_t *)&v28, a3);
        uint64_t v17 = (uint64_t)v16;
        if (v29 != v16)
        {
          id v18 = *v16;
          sub_1000305AC(src, v18);
          uuid_copy(uu, src);

          if (uuid_is_null(uu))
          {
            if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
            {
              sub_100523624(v17, src);
              sub_100776A90();
            }
          }
        }
      }
      else
      {
        id v7 = *v5;
        sub_1000305AC(src, v7);
        uuid_copy(uu, src);

        if (uuid_is_null(uu) && os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
        {
          sub_100523624(v6, src);
          sub_100776AE4();
        }
      }
    }
    else
    {
      uint64_t v9 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)src = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Allowing zero index release active call command - finding index of oldest call", src, 2u);
      }
      uint64_t v10 = (uint64_t)v31;
      if (v31 == v32) {
        goto LABEL_30;
      }
      int v11 = 0;
      do
      {
        int v12 = *(_DWORD *)(v10 + 8);
        if (!v11 || v12 < v11)
        {
          id v13 = *(id *)v10;
          sub_1000305AC(src, v13);
          uuid_copy(uu, src);

          if (uuid_is_null(uu))
          {
            int v14 = qword_100A19E70;
            if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
            {
              sub_100523624(v10, src);
              int v15 = src;
              if (v35 < 0) {
                int v15 = *(unsigned __int8 **)src;
              }
              *(_DWORD *)std::string buf = 67109378;
              int v37 = v12;
              __int16 v38 = 2080;
              uint64_t v39 = v15;
              _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Found invalid call in sent calls at index %d (call: %s)", buf, 0x12u);
              if (v35 < 0) {
                operator delete(*(void **)src);
              }
            }
          }
          int v11 = v12;
        }
        v10 += 104;
      }
      while ((id *)v10 != v32);
      if (!v11)
      {
LABEL_30:
        int v19 = v28;
        if (v28 != v29)
        {
          int v20 = 0;
          do
          {
            int v21 = *((_DWORD *)v19 + 2);
            if (!v20 || v21 < v20)
            {
              id v22 = *v19;
              sub_1000305AC(src, v22);
              uuid_copy(uu, src);

              if (uuid_is_null(uu))
              {
                long long v23 = qword_100A19E70;
                if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
                {
                  sub_100523624((uint64_t)v19, src);
                  uint64_t v24 = v35 >= 0 ? src : *(unsigned __int8 **)src;
                  *(_DWORD *)std::string buf = 67109378;
                  int v37 = v21;
                  __int16 v38 = 2080;
                  uint64_t v39 = v24;
                  _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "Found invalid call in current calls at index %d (call: %s)", buf, 0x12u);
                  if (v35 < 0) {
                    operator delete(*(void **)src);
                  }
                }
              }
              int v20 = v21;
            }
            v19 += 13;
          }
          while (v19 != v29);
        }
      }
    }
    if (uuid_is_null(uu))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
        sub_100776A28();
      }
      uint64_t v8 = 21;
    }
    else
    {
      if (qword_1009FB120 != -1) {
        dispatch_once(&qword_1009FB120, &stru_1009B4080);
      }
      __int16 v25 = off_1009FB118;
      uint64_t v26 = sub_100031234(uu);
      if (sub_10062F470((uint64_t)v25)) {
        uint64_t v8 = 0;
      }
      else {
        uint64_t v8 = 255;
      }
    }
  }
  else
  {
    uint64_t v8 = 4;
  }
  *(void *)uuid_t uu = &v28;
  sub_10027696C((void ***)uu);
  uint64_t v28 = (void **)&v31;
  sub_10027696C(&v28);
  return v8;
}

void sub_100522608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, char a14)
{
  *(void *)(v14 - 104) = &a11;
  sub_10027696C((void ***)(v14 - 104));
  a11 = (void **)&a14;
  sub_10027696C(&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_1005226B0(uint64_t a1, uint64_t a2, int a3)
{
  __int16 v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v4 = a1 + 360;
  sub_100275708((int)&v31);
  uint64_t v28 = 0;
  __int16 v29 = 0;
  uint64_t v30 = 0;
  sub_100275968(v4, (int)&v28);
  memset(uu, 0, sizeof(uu));
  uuid_clear(uu);
  if (qword_1009FB120 != -1) {
    dispatch_once(&qword_1009FB120, &stru_1009B4080);
  }
  if (sub_10062F6A4((uint64_t)off_1009FB118))
  {
    if (a3)
    {
      uint64_t v5 = (id *)sub_10061FBE8((uint64_t *)&v31, a3);
      uint64_t v6 = (uint64_t)v5;
      if (v32 == v5)
      {
        int v16 = (id *)sub_10061FBE8((uint64_t *)&v28, a3);
        uint64_t v17 = (uint64_t)v16;
        if (v29 != v16)
        {
          id v18 = *v16;
          sub_1000305AC(src, v18);
          uuid_copy(uu, src);

          if (uuid_is_null(uu))
          {
            if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
            {
              sub_100523624(v17, src);
              sub_100776A90();
            }
          }
        }
      }
      else
      {
        id v7 = *v5;
        sub_1000305AC(src, v7);
        uuid_copy(uu, src);

        if (uuid_is_null(uu) && os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
        {
          sub_100523624(v6, src);
          sub_100776AE4();
        }
      }
    }
    else
    {
      uint64_t v9 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)src = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Allowing zero index private conference command - finding index of oldest call", src, 2u);
      }
      uint64_t v10 = (uint64_t)v31;
      if (v31 == v32) {
        goto LABEL_30;
      }
      int v11 = 0;
      do
      {
        int v12 = *(_DWORD *)(v10 + 8);
        if (!v11 || v12 < v11)
        {
          id v13 = *(id *)v10;
          sub_1000305AC(src, v13);
          uuid_copy(uu, src);

          if (uuid_is_null(uu))
          {
            uint64_t v14 = qword_100A19E70;
            if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
            {
              sub_100523624(v10, src);
              int v15 = src;
              if (v35 < 0) {
                int v15 = *(unsigned __int8 **)src;
              }
              *(_DWORD *)std::string buf = 67109378;
              int v37 = v12;
              __int16 v38 = 2080;
              uint64_t v39 = v15;
              _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Found invalid call in sent calls at index %d (call: %s)", buf, 0x12u);
              if (v35 < 0) {
                operator delete(*(void **)src);
              }
            }
          }
          int v11 = v12;
        }
        v10 += 104;
      }
      while ((id *)v10 != v32);
      if (!v11)
      {
LABEL_30:
        int v19 = v28;
        if (v28 != v29)
        {
          int v20 = 0;
          do
          {
            int v21 = *((_DWORD *)v19 + 2);
            if (!v20 || v21 < v20)
            {
              id v22 = *v19;
              sub_1000305AC(src, v22);
              uuid_copy(uu, src);

              if (uuid_is_null(uu))
              {
                long long v23 = qword_100A19E70;
                if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
                {
                  sub_100523624((uint64_t)v19, src);
                  uint64_t v24 = v35 >= 0 ? src : *(unsigned __int8 **)src;
                  *(_DWORD *)std::string buf = 67109378;
                  int v37 = v21;
                  __int16 v38 = 2080;
                  uint64_t v39 = v24;
                  _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "Found invalid call in current calls at index %d (call: %s)", buf, 0x12u);
                  if (v35 < 0) {
                    operator delete(*(void **)src);
                  }
                }
              }
              int v20 = v21;
            }
            v19 += 13;
          }
          while (v19 != v29);
        }
      }
    }
    if (uuid_is_null(uu))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
        sub_100776B38();
      }
      uint64_t v8 = 21;
    }
    else
    {
      if (qword_1009FB120 != -1) {
        dispatch_once(&qword_1009FB120, &stru_1009B4080);
      }
      __int16 v25 = off_1009FB118;
      uint64_t v26 = sub_100031234(uu);
      if (sub_10062F498((uint64_t)v25)) {
        uint64_t v8 = 0;
      }
      else {
        uint64_t v8 = 255;
      }
    }
  }
  else
  {
    uint64_t v8 = 4;
  }
  *(void *)uuid_t uu = &v28;
  sub_10027696C((void ***)uu);
  uint64_t v28 = (void **)&v31;
  sub_10027696C(&v28);
  return v8;
}

void sub_100522BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, char a14)
{
  *(void *)(v14 - 104) = &a11;
  sub_10027696C((void ***)(v14 - 104));
  a11 = (void **)&a14;
  sub_10027696C(&a11);
  _Unwind_Resume(a1);
}

void sub_100522C6C(uint64_t a1, int a2, unsigned int a3, int a4)
{
  if (a2)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
      sub_100776BA0();
    }
  }
  else if (a3)
  {
    uint64_t v5 = sub_100511724(a1, a3);
    if (v5)
    {
      uint64_t v6 = (uint64_t)(v5 + 50);
      sub_10027679C(v6, a4);
    }
  }
}

unsigned char *sub_100522CF4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unsigned int a5)
{
  char v34 = 0;
  sub_10001B8E0(&v34);
  uint64_t v6 = a2 + 400;
  int v7 = sub_100276534(v6);
  char v8 = sub_10014FBB0(v7);
  sub_10001B910(&v34);
  uint64_t v9 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = sub_10027674C(v6);
    *(_DWORD *)std::string buf = 67109632;
    int v36 = a3;
    __int16 v37 = 1024;
    unsigned int v38 = a5;
    __int16 v39 = 1024;
    int v40 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Initiating SCO connection with delay of %d milliseconds, codec %d, lastCodec %d", buf, 0x14u);
  }
  if (sub_10027674C(v6) == a5)
  {
    BOOL v11 = 0;
    if ((v8 & 0x80) == 0)
    {
LABEL_5:
      int v12 = 0;
      goto LABEL_10;
    }
  }
  else
  {
    BOOL v11 = sub_10027674C(v6) != 0;
    if ((v8 & 0x80) == 0) {
      goto LABEL_5;
    }
  }
  int v12 = sub_100276564(v6) != 5 || v11;
LABEL_10:
  id v13 = (unsigned __int8 *)sub_10027653C(v6);
  uint64_t v14 = v13[128];
  uint64_t v15 = v13[129];
  uint64_t v16 = v13[130];
  uint64_t v17 = v13[131];
  uint64_t v18 = v13[132];
  uint64_t v19 = v13[133];
  uint64_t v20 = sub_10003FB34();
  sub_100476054((uint64_t)v13);
  uint64_t v31 = (v16 << 16) | (v15 << 8) | (v17 << 24) | (v18 << 32) | (v19 << 40) | v14;
  uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 72))(v20);
  uint64_t v22 = sub_10051671C(v21, a5);
  unint64_t v23 = (v14 << 40) | (v15 << 32) | (v16 << 24) | (v17 << 16) | (v18 << 8) | v19;
  sub_10051F0D0(v22, v23, v22 ^ 1);
  if (!v12)
  {
    uint64_t v29 = sub_100276534(v6);
    sub_100515A10(v29, v29, a3);
  }
  sub_1002B804C(&v34);
  unsigned int v24 = sub_100276534(v6);
  int v25 = sub_1001514C0(v24, a5);
  sub_10001B910(&v34);
  if (v25)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
      sub_100776C08();
    }
    uint64_t v26 = sub_10003FB34();
    uint64_t v27 = sub_100476054((uint64_t)v13);
    uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, void))(*(void *)v26 + 72))(v26, v31, v27, 1, 0, 0, 1, 0);
    sub_10051F0D0(v28, v23, 0);
  }
  if (sub_10027674C(v6) != a5) {
    sub_100276744(v6, a5);
  }
  return sub_10001B8AC(&v34);
}

void sub_100523000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void sub_100523030(uint64_t a1)
{
}

void sub_100523038(int a1, uint64_t a2, int a3, __int16 a4)
{
  if (a2)
  {
    __int16 v7 = sub_100156DD0(a2);
    uint64_t v8 = sub_1004AFA9C();
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_10052C790;
    _OWORD v9[3] = &unk_100997570;
    __int16 v12 = v7;
    int v10 = a1;
    int v11 = a3;
    __int16 v13 = a4;
    sub_100013018(v8, v9);
  }
}

uint64_t sub_1005230E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100512018(a1, a2);
  int v5 = sub_100276944(v4 + 400);
  uint64_t v6 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a2, __p);
    __int16 v7 = v17 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446466;
    uint64_t v19 = v7;
    __int16 v20 = 1024;
    int v21 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Transitioning to HandsfreeAoS - device:%{public}s isInAdvancedSniff:%d", buf, 0x12u);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
  }
  LOBYTE(__p[0]) = 0;
  sub_10001B8E0(__p);
  uint64_t v8 = a2 + 128;
  uint64_t v9 = (unsigned __int16 *)sub_100197A30(a2 + 128);
  sub_10001B910(__p);
  if (v5)
  {
    unsigned int v10 = sub_100516194(a1, v8);
    sub_1002B804C(__p);
    uint64_t v11 = sub_1001517F4(v10);
  }
  else
  {
    uint64_t v12 = sub_100264CDC(v8);
    uint64_t v13 = sub_10003FB34();
    BYTE2(v15) = 1;
    LOWORD(v15) = 2;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, int))(*(void *)v13 + 1528))(v13, *v9, 24, 20, 8, 1, 0, v12, 0x2D000000001, v15);
    uint64_t v11 = 0;
  }
  sub_10001B8AC(__p);
  return v11;
}

void sub_1005232B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10001B8AC(va);
  _Unwind_Resume(a1);
}

void (*sub_1005232E0(void *a1, void *a2, void (*a3)(void, void)))(void, void)
{
  if (a1 != a2)
  {
    int v5 = a1;
    do
    {
      a3(*((unsigned __int16 *)v5 + 16), v5[5]);
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          __int16 v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          __int16 v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          int v5 = v7;
        }
        while (!v8);
      }
      int v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

unsigned char *sub_100523360(unsigned __int16 a1, uint64_t a2)
{
  uint64_t v3 = a2 + 400;
  uint64_t result = (unsigned char *)sub_1002765DC(a2 + 400);
  if (result)
  {
    sub_1002765E4(v3, 0);
    char v6 = 0;
    sub_10001B8E0(&v6);
    int v5 = sub_100150CC4(a1, 0);
    sub_10001B910(&v6);
    if (v5)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
        sub_100776C70();
      }
    }
    return sub_10001B8AC(&v6);
  }
  return result;
}

void sub_1005233FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_100523410(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = a1 + 360;
  sub_10027577C(a1 + 360);
  int v5 = sub_100511724(a1, a2);
  if (v5) {
    sub_10026E5DC((uint64_t)(v5 + 50), 0);
  }
  if (sub_1002756C0(v4) || sub_1002756C8(v4))
  {
    if (!sub_100275918(v4, 1))
    {
      char v6 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
      {
        int v15 = sub_1002758D0(v4);
        sub_1002755C4(&v15, v16);
        int v8 = v17;
        uint64_t v9 = (void **)v16[0];
        int v12 = 1;
        sub_1002755C4(&v12, __p);
        unsigned int v10 = v16;
        if (v8 < 0) {
          unsigned int v10 = v9;
        }
        if (v14 >= 0) {
          uint64_t v11 = __p;
        }
        else {
          uint64_t v11 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136446466;
        uint64_t v19 = v10;
        __int16 v20 = 2082;
        int v21 = v11;
        _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Attempting to reject incoming call but call setup is \"%{public}s\" instead of \"%{public}s\"", buf, 0x16u);
        if (v14 < 0) {
          operator delete(__p[0]);
        }
        if (v17 < 0) {
          operator delete(v16[0]);
        }
      }
    }
    if (qword_1009FB120 != -1) {
      dispatch_once(&qword_1009FB120, &stru_1009B4080);
    }
    if (sub_10062F268((uint64_t)off_1009FB118)) {
      return 0;
    }
    else {
      return 255;
    }
  }
  else
  {
    uint64_t result = os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_100776CA4();
      return 0;
    }
  }
  return result;
}

void sub_100523600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100523624@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v29 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  *(_OWORD *)std::string __str = 0u;
  int v4 = *(_DWORD *)(a1 + 8);
  int v5 = *(unsigned __int8 *)(a1 + 12);
  char v6 = __p;
  sub_10062EA20((char *)(a1 + 24), (uint64_t)__p);
  if (v21 < 0) {
    char v6 = (void **)__p[0];
  }
  __int16 v7 = (const char *)(a1 + 80);
  if (*(char *)(a1 + 103) < 0) {
    __int16 v7 = *(const char **)v7;
  }
  unsigned int v8 = *(_DWORD *)(a1 + 16) - 1;
  if (v8 > 6) {
    uint64_t v9 = "unknown";
  }
  else {
    uint64_t v9 = off_1009B41A8[v8];
  }
  int v10 = *(unsigned __int8 *)(a1 + 13);
  int v11 = *(unsigned __int8 *)(a1 + 14);
  int v12 = *(unsigned __int8 *)(a1 + 15);
  id v13 = [*(id *)a1 UUIDString];
  char v14 = (const char *)[v13 UTF8String];
  int v15 = " (CallScreening)";
  uint64_t v16 = "";
  if (!v12) {
    int v15 = "";
  }
  char v17 = " (Expanse)";
  if (!v11) {
    char v17 = "";
  }
  if (v10) {
    uint64_t v16 = ", conf";
  }
  uint64_t v18 = "Outgoing to";
  if (!v5) {
    uint64_t v18 = "Incoming from";
  }
  snprintf(__str, 0x100uLL, "[#%d: %s %s \"%s\" (%s%s%s%s ID:%s)]", v4, v18, (const char *)v6, v7, v9, v16, v17, v15, v14);

  if (v21 < 0) {
    operator delete(__p[0]);
  }
  return sub_10004191C(a2, __str);
}

void sub_1005237E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100523814(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = sub_100512018(a1, a2);
  char v6 = qword_100A19E70;
  if (!os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_8;
  }
  __int16 v7 = a3;
  if (a3[23] < 0) {
    __int16 v7 = *(char **)a3;
  }
  sub_100474E18(a2, __p);
  unsigned int v8 = v13 >= 0 ? __p : (void **)__p[0];
  *(_DWORD *)std::string buf = 136446466;
  int v15 = v7;
  __int16 v16 = 2082;
  char v17 = v8;
  _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Sending '%{public}s Siri status event for device %{public}s", buf, 0x16u);
  if (v13 < 0)
  {
    operator delete(__p[0]);
    if (!v5) {
      return;
    }
  }
  else
  {
LABEL_8:
    if (!v5) {
      return;
    }
  }
  LOBYTE(__p[0]) = 0;
  sub_10001B8E0(__p);
  unsigned int v9 = sub_100276534(v5 + 400);
  if (a3[23] < 0)
  {
    int v11 = a3;
    a3 = *(char **)a3;
    uint64_t v10 = *((void *)v11 + 1);
  }
  else
  {
    LOWORD(v1sub_1004C2140(qword_100A19B68, 0) = a3[23];
  }
  sub_10014F880(v9, a3, (unsigned __int16)v10);
  sub_10001B910(__p);
  sub_10001B8AC(__p);
}

void sub_100523970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_10052398C(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v12 = 0;
  char v13 = 0;
  uint64_t v14 = 0;
  sub_10061F99C(&v12);
  memset(v11, 0, sizeof(v11));
  sub_10061F99C(v11);
  if (qword_1009FB120 != -1) {
    dispatch_once(&qword_1009FB120, &stru_1009B4080);
  }
  if (sub_10062F0BC((uint64_t)off_1009FB118))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
      sub_1007756FC();
    }
  }
  else
  {
    uint64_t v4 = a1 + 360;
    sub_100275968(a1 + 360, (int)&v9);
    sub_100276A50((uint64_t)v11, (uint64_t)v9, v10, 0x4EC4EC4EC4EC4EC5 * ((v10 - (uint64_t)v9) >> 3));
    int v15 = (void ***)&v9;
    sub_10027696C((void ***)&v15);
    if ((sub_100275A54(a1 + 360, (uint64_t *)&v12) & 1) == 0)
    {
      if (sub_10061FF98((uint64_t *)v11, (uint64_t *)&v12))
      {
        sub_10051944C(a1, (uint64_t *)&v12, v3);
      }
      else
      {
        uint64_t v5 = sub_10061FB58(&v12, v3);
        char v6 = v5;
        if (v13 != v5 && *((_DWORD *)v5 + 4) == 5)
        {
          sub_10062E8E4(__dst);
          if (*((char *)v6 + 103) < 0) {
            sub_10003B098(&__p, v6[10], (unint64_t)v6[11]);
          }
          else {
            std::string __p = *(std::string *)(v6 + 10);
          }
          sub_1002757CC(v4, (uint64_t)__dst, &__p, 1);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          sub_10062E8E8(__dst);
        }
      }
    }
  }
  unsigned int v9 = v11;
  sub_10027696C((void ***)&v9);
  v11[0] = (void **)&v12;
  sub_10027696C(v11);
}

void sub_100523B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_10062E8E8(&a15);
  a22 = v23 - 88;
  sub_10027696C((void ***)&a22);
  *(void *)(v23 - 88) = v23 - 64;
  sub_10027696C((void ***)(v23 - 88));

  _Unwind_Resume(a1);
}

void sub_100523C00(uint64_t a1, void *a2)
{
}

void sub_100523C08(uint64_t a1)
{
  memset(v5, 0, sizeof(v5));
  sub_10004191C(&v5[1], "");
  if (qword_1009FB120 != -1) {
    dispatch_once(&qword_1009FB120, &stru_1009B4080);
  }
  if (sub_10062F044((uint64_t)off_1009FB118))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
      sub_1007756C8();
    }
  }
  else
  {
    int v2 = (int)v5[0];
    if (SHIBYTE(v5[3]) < 0)
    {
      sub_10003B098(&__p, v5[1], (unint64_t)v5[2]);
    }
    else
    {
      long long __p = *(_OWORD *)&v5[1];
      uint64_t v4 = v5[3];
    }
    sub_100275670(a1 + 360, (uint64_t)&v2);
    if (SHIBYTE(v4) < 0) {
      operator delete((void *)__p);
    }
  }
  if (SHIBYTE(v5[3]) < 0) {
    operator delete(v5[1]);
  }
}

void sub_100523D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_100523D48(uint64_t a1)
{
}

unsigned char *sub_100523D50(uint64_t a1)
{
  uint64_t v1 = a1;
  sub_100516D90(a1);
  char v5 = 0;
  sub_10001B8E0(&v5);
  v1 += 360;
  __int16 v2 = sub_100275624(v1);
  sub_10014F7DC(v2);
  char v3 = sub_100275634(v1);
  sub_10014F800(v3);
  return sub_10001B8AC(&v5);
}

void sub_100523DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

unsigned char *sub_100523DC0(uint64_t a1)
{
  return sub_100523D50(a1 - 256);
}

void sub_100523DC8(void *a1)
{
  if (qword_1009FB120 != -1) {
    dispatch_once(&qword_1009FB120, &stru_1009B4080);
  }
  __int16 v2 = sub_10062F06C((uint64_t)off_1009FB118);
  if (v2)
  {
    sub_100523E7C(a1, 0, 0, v2);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
  {
    sub_100775694();
  }
}

void sub_100523E6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100523E7C(void *a1, char *a2, unsigned char *a3, void *a4)
{
  id v7 = a4;
  v38[0] = 0;
  v38[1] = 0;
  sub_10003AED0((uint64_t)v38, (uint64_t)(a1 + 95));
  uint64_t v8 = (uint64_t)(a1 + 45);
  if (a2)
  {
    int v9 = *a2;
    BOOL v10 = v9 != sub_100275930((uint64_t)(a1 + 45));
    sub_100275928((uint64_t)(a1 + 45), *a2);
    if (a3) {
      goto LABEL_3;
    }
  }
  else
  {
    BOOL v10 = 0;
    if (a3)
    {
LABEL_3:
      if (*a3 == 100) {
        unsigned int v11 = 5;
      }
      else {
        unsigned int v11 = *a3 / 0x14u + 1;
      }
      int v12 = sub_100275940((uint64_t)(a1 + 45));
      sub_100275938((uint64_t)(a1 + 45), v11);
      BOOL v13 = v11 != v12;
      if (v7) {
        goto LABEL_7;
      }
LABEL_10:
      int v18 = 0;
      int v19 = 0;
      goto LABEL_11;
    }
  }
  BOOL v13 = 0;
  if (!v7) {
    goto LABEL_10;
  }
LABEL_7:
  unsigned int v14 = [v7 service];
  unsigned int v15 = sub_1002756A8((uint64_t)(a1 + 45));
  unsigned int v16 = [v7 roaming];
  unsigned int v17 = sub_1002756B0((uint64_t)(a1 + 45));
  sub_1002756B8((uint64_t)(a1 + 45), v7);
  int v18 = v14 ^ v15;
  int v19 = v16 ^ v17;
LABEL_11:
  if (v10 || v13 || (v18 & 1) != 0 || v19)
  {
    char v37 = 0;
    sub_10001B8E0(&v37);
    if (a1[105])
    {
      __int16 v20 = (void *)a1[103];
      char v21 = a1 + 104;
      if (v20 != a1 + 104)
      {
        do
        {
          if (v10)
          {
            unsigned int v22 = *((unsigned __int16 *)v20 + 16);
            uint64_t v23 = sub_100275930(v8);
            sub_100150734(v22, v23);
          }
          if (v13)
          {
            unsigned int v24 = *((unsigned __int16 *)v20 + 16);
            uint64_t v25 = sub_100275940(v8);
            sub_1001505EC(v24, v25);
          }
          if (v18)
          {
            unsigned int v26 = *((unsigned __int16 *)v20 + 16);
            int v27 = sub_1002756A8(v8);
            sub_100150064(v26, v27);
          }
          if (v19)
          {
            unsigned int v28 = *((unsigned __int16 *)v20 + 16);
            int v29 = sub_1002756B0(v8);
            sub_1001508B8(v28, v29);
          }
          long long v30 = (void *)v20[1];
          if (v30)
          {
            do
            {
              long long v31 = v30;
              long long v30 = (void *)*v30;
            }
            while (v30);
          }
          else
          {
            do
            {
              long long v31 = (void *)v20[2];
              BOOL v32 = *v31 == (void)v20;
              __int16 v20 = v31;
            }
            while (!v32);
          }
          __int16 v20 = v31;
        }
        while (v31 != v21);
      }
    }
    else
    {
      if (v10)
      {
        uint64_t v33 = sub_100275930((uint64_t)(a1 + 45));
        sub_100150734(0, v33);
      }
      if (v13)
      {
        uint64_t v34 = sub_100275940((uint64_t)(a1 + 45));
        sub_1001505EC(0, v34);
      }
      if (v18)
      {
        int v35 = sub_1002756A8((uint64_t)(a1 + 45));
        sub_100150064(0, v35);
      }
      if (v19)
      {
        int v36 = sub_1002756B0((uint64_t)(a1 + 45));
        sub_1001508B8(0, v36);
      }
    }
    sub_10001B8AC(&v37);
  }
  sub_10003AFB4((uint64_t)v38);
}

void sub_100524104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_100524140(uint64_t a1)
{
}

void sub_100524148(void *a1, char a2)
{
  char v2 = a2;
  sub_100523E7C(a1, &v2, 0, 0);
}

void sub_100524178(uint64_t a1, char a2)
{
  char v2 = a2;
  sub_100523E7C((void *)(a1 - 256), &v2, 0, 0);
}

void sub_1005241AC(uint64_t a1, uint64_t a2, char a3)
{
  v6[0] = 0;
  v6[1] = v6;
  void v6[2] = 0x2020000000;
  char v7 = a3;
  uint64_t v4 = sub_1004AFA9C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_100524264;
  uint64_t v5[3] = &unk_100999720;
  _DWORD v5[4] = v6;
  void v5[5] = a1;
  sub_100013018(v4, v5);
  _Block_object_dispose(v6, 8);
}

void sub_10052424C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100524264(uint64_t a1)
{
}

void sub_100524280(uint64_t a1, uint64_t a2, char a3)
{
}

void sub_10052428C(uint64_t a1, uint64_t *a2, unsigned char *a3, unsigned char *a4, BOOL *a5, unsigned char *a6, int *a7, int *a8, std::string *a9, std::string *a10)
{
  int v55 = 0;
  char v56 = 0;
  uint64_t v57 = 0;
  uint64_t v52 = a1 + 360;
  sub_100275968(a1 + 360, (int)&v55);
  v60[0] = 0;
  v60[1] = 0;
  id v12 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:v60];
  *a4 = 0;
  uint64_t v13 = *a2;
  if (*a2 == a2[1])
  {
    int v16 = 0;
    int v15 = 0;
    int v14 = 0;
LABEL_59:
    BOOL v41 = v15 > 0;
    if (v14 > 0) {
      BOOL v41 = 1;
    }
    BOOL v42 = !v41;
    int v43 = 1;
    if (v42) {
      int v44 = 2;
    }
    else {
      int v44 = 1;
    }
    if (v16 <= 0) {
      int v44 = 0;
    }
    *a7 = v44;
    BOOL v45 = v15 > 0 || v16 > 0;
    *a5 = v45;
    if ((*a4 & 0xC) == 0)
    {
      if ((*a4 & 1) != 0 || *a3)
      {
        int v43 = 2;
      }
      else
      {
        if ((*a4 & 2) == 0) {
          goto LABEL_76;
        }
        int v43 = 3;
      }
    }
    *a8 = v43;
    goto LABEL_76;
  }
  int v14 = 0;
  int v15 = 0;
  int v16 = 0;
  while (2)
  {
    id v17 = *(id *)v13;
    if ([v17 isEqual:v12])
    {
      BOOL v18 = *(_DWORD *)(v13 + 16) == 7;

      if (!v18)
      {
        uint64_t v19 = qword_100A19E70;
        if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
        {
          sub_100523624(v13, __p);
          __int16 v20 = __p;
          if (v54 < 0) {
            __int16 v20 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136315138;
          uint64_t v59 = v20;
          char v21 = v19;
          unsigned int v22 = "Invalid call status - empty identifier is reserved for virtual calls: %s";
LABEL_54:
          _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, v22, buf, 0xCu);
          if (v54 < 0) {
            operator delete(__p[0]);
          }
        }
        goto LABEL_56;
      }
    }
    else
    {
    }
    switch(*(_DWORD *)(v13 + 16))
    {
      case 1:
        id v23 = *(id *)v13;
        unsigned int v24 = sub_10061FB58(&v55, v23);

        ++v15;
        if (v56 == v24 || *((_DWORD *)v24 + 4) != 2) {
          goto LABEL_56;
        }
        goto LABEL_28;
      case 2:
        id v29 = *(id *)v13;
        long long v30 = sub_10061FB58(&v55, v29);

        ++v16;
        if (v56 == v30 || *((_DWORD *)v30 + 4) != 1) {
          goto LABEL_56;
        }
        if (!sub_100275960(v52))
        {
LABEL_28:
          *a6 = 1;
LABEL_56:
          v13 += 104;
          if (v13 == a2[1]) {
            goto LABEL_59;
          }
          continue;
        }
        sub_100275958(v52, 0);
        uint64_t v46 = qword_100A19E70;
        if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_INFO))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "We're actually dialing a call and putting another one on hold. This is TC_AG_TWC_BV_05_I!", (uint8_t *)__p, 2u);
        }
LABEL_76:

        __p[0] = &v55;
        sub_10027696C((void ***)__p);
        return;
      case 3:
        ++v14;
        if (*(unsigned char *)(v13 + 12))
        {
          *a4 |= 1u;
          sub_100275958(v52, 0);
          goto LABEL_56;
        }
        uint64_t v34 = qword_100A19E70;
        if (!os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
          goto LABEL_56;
        }
        sub_100523624(v13, __p);
        int v35 = __p;
        if (v54 < 0) {
          int v35 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136315138;
        uint64_t v59 = v35;
        char v21 = v34;
        unsigned int v22 = "Invalid call status - dialed calls should be outgoing only: %s";
        goto LABEL_54;
      case 4:
        ++v14;
        if (*(unsigned char *)(v13 + 12))
        {
          char v31 = *a4 | 2;
          goto LABEL_38;
        }
        uint64_t v37 = qword_100A19E70;
        if (!os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
          goto LABEL_56;
        }
        sub_100523624(v13, __p);
        unsigned int v38 = __p;
        if (v54 < 0) {
          unsigned int v38 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136315138;
        uint64_t v59 = v38;
        char v21 = v37;
        unsigned int v22 = "Invalid call status - alerting calls should be outgoing only: %s";
        goto LABEL_54;
      case 5:
        if (!*(unsigned char *)(v13 + 12))
        {
          char v36 = 4;
          goto LABEL_49;
        }
        uint64_t v25 = qword_100A19E70;
        if (!os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
          goto LABEL_56;
        }
        sub_100523624(v13, __p);
        unsigned int v26 = __p;
        if (v54 < 0) {
          unsigned int v26 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136315138;
        uint64_t v59 = v26;
        char v21 = v25;
        unsigned int v22 = "Invalid call status - found incoming call tagged as outgoing: %s";
        goto LABEL_54;
      case 6:
        if (!*(unsigned char *)(v13 + 12))
        {
          char v36 = 8;
LABEL_49:
          *a4 |= v36;
          sub_10062E90C(a9, v13 + 24);
          std::string::operator=(a10, (const std::string *)(v13 + 80));
          goto LABEL_56;
        }
        uint64_t v32 = qword_100A19E70;
        if (!os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
          goto LABEL_56;
        }
        sub_100523624(v13, __p);
        uint64_t v33 = __p;
        if (v54 < 0) {
          uint64_t v33 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136315138;
        uint64_t v59 = v33;
        char v21 = v32;
        unsigned int v22 = "Invalid call status - waiting calls should be incoming only: %s";
        goto LABEL_54;
      case 7:
        if (*(unsigned char *)(v13 + 12))
        {
          *a3 = 1;
          char v31 = *a4 | 1;
LABEL_38:
          *a4 = v31;
          goto LABEL_56;
        }
        uint64_t v39 = qword_100A19E70;
        if (!os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
          goto LABEL_56;
        }
        sub_100523624(v13, __p);
        int v40 = __p;
        if (v54 < 0) {
          int v40 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136315138;
        uint64_t v59 = v40;
        char v21 = v39;
        unsigned int v22 = "Invalid call status - visualVoicemail calls should be outgoing only: %s";
        goto LABEL_54;
      default:
        uint64_t v27 = qword_100A19E70;
        if (!os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
          goto LABEL_56;
        }
        sub_100523624(v13, __p);
        unsigned int v28 = __p;
        if (v54 < 0) {
          unsigned int v28 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136315138;
        uint64_t v59 = v28;
        char v21 = v27;
        unsigned int v22 = "Invalid call status - unknown type: %s";
        goto LABEL_54;
    }
  }
}

void sub_1005248CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,uint64_t a21,char a22)
{
  a19 = (void **)&a22;
  sub_10027696C(&a19);
  _Unwind_Resume(a1);
}

void sub_100524960(uint64_t a1, void *a2, char a3)
{
  char v16 = a3;
  char v3 = a2 + 1;
  uint64_t v4 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    uint64_t v5 = a1 + 360;
    do
    {
      uint64_t v6 = sub_10027653C(v4[5] + 400);
      if (sub_100275814(v5, 1))
      {
        if (*(unsigned char *)(v6 + 128))
        {
LABEL_5:
          if (*(unsigned char *)(v6 + 984))
          {
            char v7 = qword_100A19E70;
            if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
            {
              sub_100475EE0(v6, (uint64_t)__p);
              uint64_t v8 = __p;
              if (v15 < 0) {
                uint64_t v8 = (void **)__p[0];
              }
              *(_DWORD *)std::string buf = 141558275;
              uint64_t v18 = 1752392040;
              __int16 v19 = 2081;
              __int16 v20 = v8;
              _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Wireless Splitter suppressing UpdateCallStatus for device %{private, mask.hash}s due to WS being enabled", buf, 0x16u);
              if (v15 < 0) {
                operator delete(__p[0]);
              }
            }
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v9 = 0;
          while (v9 != 5)
          {
            if (*(unsigned __int8 *)(v6 + 129 + v9++))
            {
              if ((unint64_t)(v9 - 1) <= 4) {
                goto LABEL_5;
              }
              break;
            }
          }
        }
      }
      sub_10052D580(&v16, *((_WORD *)v4 + 16), v4[5]);
LABEL_16:
      unsigned int v11 = (void *)v4[1];
      if (v11)
      {
        do
        {
          id v12 = v11;
          unsigned int v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          id v12 = (void *)v4[2];
          BOOL v13 = *v12 == (void)v4;
          uint64_t v4 = v12;
        }
        while (!v13);
      }
      uint64_t v4 = v12;
    }
    while (v12 != v3);
  }
}

void sub_100524B30(uint64_t a1, void *a2, void (*a3)(void, void))
{
  char v3 = a2 + 1;
  uint64_t v4 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    uint64_t v6 = a1 + 360;
    do
    {
      uint64_t v7 = sub_10027653C(v4[5] + 400);
      if (sub_100275814(v6, 1))
      {
        if (*(unsigned char *)(v7 + 128))
        {
LABEL_5:
          if (*(unsigned char *)(v7 + 984))
          {
            uint64_t v8 = qword_100A19E70;
            if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
            {
              sub_100475EE0(v7, (uint64_t)__p);
              uint64_t v9 = __p;
              if (v16 < 0) {
                uint64_t v9 = (void **)__p[0];
              }
              *(_DWORD *)std::string buf = 141558275;
              uint64_t v18 = 1752392040;
              __int16 v19 = 2081;
              __int16 v20 = v9;
              _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Wireless Splitter suppressing UpdateCallStatus for device %{private, mask.hash}s due to WS being enabled", buf, 0x16u);
              if (v16 < 0) {
                operator delete(__p[0]);
              }
            }
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v10 = 0;
          while (v10 != 5)
          {
            if (*(unsigned __int8 *)(v7 + 129 + v10++))
            {
              if ((unint64_t)(v10 - 1) <= 4) {
                goto LABEL_5;
              }
              break;
            }
          }
        }
      }
      a3(*((unsigned __int16 *)v4 + 16), v4[5]);
LABEL_16:
      id v12 = (void *)v4[1];
      if (v12)
      {
        do
        {
          BOOL v13 = v12;
          id v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          BOOL v13 = (void *)v4[2];
          BOOL v14 = *v13 == (void)v4;
          uint64_t v4 = v13;
        }
        while (!v14);
      }
      uint64_t v4 = v13;
    }
    while (v13 != v3);
  }
}

void sub_100524CFC(unsigned __int16 a1, uint64_t a2)
{
  if (sub_100276604(a2 + 400))
  {
    if (qword_1009FB058 != -1) {
      dispatch_once(&qword_1009FB058, &stru_1009B3FC0);
    }
    uint64_t v3 = sub_1005160B8((uint64_t)off_1009FB050, a1);
    uint64_t v4 = *(void *)sub_100035F54();
    if (((*(uint64_t (**)(void))(v4 + 384))() & 1) == 0)
    {
      uint64_t v5 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = 2;
        uint64_t v6 = v13;
        sub_1002755C4(&v12, v13);
        if (v14 < 0) {
          uint64_t v6 = (void **)v13[0];
        }
        if (v3)
        {
          sub_100474E18(v3, __p);
          if (v16 >= 0) {
            uint64_t v7 = __p;
          }
          else {
            uint64_t v7 = *(const char **)__p;
          }
          *(_DWORD *)std::string buf = 136446466;
          uint64_t v18 = v6;
          __int16 v19 = 2082;
          __int16 v20 = v7;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Sending call setup \"%{public}s\" to device %{public}s", buf, 0x16u);
          if (v16 < 0) {
            operator delete(*(void **)__p);
          }
        }
        else
        {
          *(_DWORD *)std::string buf = 136446466;
          uint64_t v18 = v6;
          __int16 v19 = 2082;
          __int16 v20 = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Sending call setup \"%{public}s\" to device %{public}s", buf, 0x16u);
        }
        if (v14 < 0) {
          operator delete(v13[0]);
        }
      }
      LOBYTE(v13[0]) = 0;
      sub_10001B8E0(v13);
      int v8 = sub_1001502AC(a1, 2u);
      sub_10001B8AC(v13);
      if (v8) {
        goto LABEL_31;
      }
    }
    uint64_t v9 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      if (v3)
      {
        sub_100474E18(v3, v13);
        if (v14 >= 0) {
          uint64_t v10 = v13;
        }
        else {
          uint64_t v10 = (void **)v13[0];
        }
        *(_DWORD *)long long __p = 136446210;
        *(void *)&__p[4] = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Sending call status \"call active\" to device %{public}s", __p, 0xCu);
        if (v14 < 0) {
          operator delete(v13[0]);
        }
      }
      else
      {
        *(_DWORD *)long long __p = 136446210;
        *(void *)&__p[4] = "NULL";
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Sending call status \"call active\" to device %{public}s", __p, 0xCu);
      }
    }
    LOBYTE(v13[0]) = 0;
    sub_10001B8E0(v13);
    int v11 = sub_100150184(a1, 1);
    sub_10001B8AC(v13);
    if (v11)
    {
LABEL_31:
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
        sub_100776CD8();
      }
    }
  }
}

void sub_100525028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100525060(uint64_t a1, void *a2, int a3)
{
  __int16 v16 = a3;
  char v17 = BYTE2(a3);
  uint64_t v3 = a2 + 1;
  uint64_t v4 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    uint64_t v5 = a1 + 360;
    do
    {
      uint64_t v6 = sub_10027653C(v4[5] + 400);
      if (sub_100275814(v5, 1))
      {
        if (*(unsigned char *)(v6 + 128))
        {
LABEL_5:
          if (*(unsigned char *)(v6 + 984))
          {
            uint64_t v7 = qword_100A19E70;
            if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
            {
              sub_100475EE0(v6, (uint64_t)__p);
              int v8 = __p;
              if (v15 < 0) {
                int v8 = (void **)__p[0];
              }
              *(_DWORD *)std::string buf = 141558275;
              uint64_t v19 = 1752392040;
              __int16 v20 = 2081;
              char v21 = v8;
              _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Wireless Splitter suppressing UpdateCallStatus for device %{private, mask.hash}s due to WS being enabled", buf, 0x16u);
              if (v15 < 0) {
                operator delete(__p[0]);
              }
            }
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v9 = 0;
          while (v9 != 5)
          {
            if (*(unsigned __int8 *)(v6 + 129 + v9++))
            {
              if ((unint64_t)(v9 - 1) <= 4) {
                goto LABEL_5;
              }
              break;
            }
          }
        }
      }
      sub_10052DAB4((unsigned __int8 *)&v16, *((_WORD *)v4 + 16), v4[5]);
LABEL_16:
      int v11 = (void *)v4[1];
      if (v11)
      {
        do
        {
          int v12 = v11;
          int v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          int v12 = (void *)v4[2];
          BOOL v13 = *v12 == (void)v4;
          uint64_t v4 = v12;
        }
        while (!v13);
      }
      uint64_t v4 = v12;
    }
    while (v12 != v3);
  }
}

uint64_t sub_100525238(uint64_t a1)
{
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 760);
  if (sub_100275814(a1 + 360, 0))
  {
    char v2 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      uint64_t v3 = "Cannot send ring because ring status is not ringing";
LABEL_13:
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, v3, buf, 2u);
    }
  }
  else if (sub_100275918(a1 + 360, 1))
  {
    if (sub_1004BDB84(a1))
    {
      if (sub_100275814(a1 + 360, 1))
      {
        sub_10052D79C(v5, a1 + 824);
        sub_100524B30(a1, v5, (void (*)(void, void))sub_100525D88);
        sub_1000486F0((uint64_t)v5, (void *)v5[1]);
      }
      sub_100275824(a1 + 360);
      operator new();
    }
    char v2 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      uint64_t v3 = "Cannot send ring because we are not connected";
      goto LABEL_13;
    }
  }
  else
  {
    char v2 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      uint64_t v3 = "Cannot send ring because is not incoming";
      goto LABEL_13;
    }
  }
  return sub_10003AFB4((uint64_t)v7);
}

void sub_1005253D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
  sub_1000486F0((uint64_t)&a10, a11);
  sub_10003AFB4(v11 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_100525424(uint64_t a1)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1 + 760);
  char v2 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Sending call waiting notification to all connected devices", buf, 2u);
  }
  sub_10052D79C(v4, a1 + 824);
  sub_100524B30(a1, v4, (void (*)(void, void))sub_1005258AC);
  sub_1000486F0((uint64_t)v4, (void *)v4[1]);
  sub_100275824(a1 + 360);
  return sub_10003AFB4((uint64_t)v6);
}

void sub_1005254E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
  sub_1000486F0((uint64_t)&a10, a11);
  sub_10003AFB4(v11 - 32);
  _Unwind_Resume(a1);
}

void sub_10052550C(uint64_t a1, void *a2, int a3)
{
  int v16 = a3;
  uint64_t v3 = a2 + 1;
  uint64_t v4 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    uint64_t v5 = a1 + 360;
    do
    {
      uint64_t v6 = sub_10027653C(v4[5] + 400);
      if (sub_100275814(v5, 1))
      {
        if (*(unsigned char *)(v6 + 128))
        {
LABEL_5:
          if (*(unsigned char *)(v6 + 984))
          {
            uint64_t v7 = qword_100A19E70;
            if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
            {
              sub_100475EE0(v6, (uint64_t)__p);
              int v8 = __p;
              if (v15 < 0) {
                int v8 = (void **)__p[0];
              }
              *(_DWORD *)std::string buf = 141558275;
              uint64_t v18 = 1752392040;
              __int16 v19 = 2081;
              __int16 v20 = v8;
              _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Wireless Splitter suppressing UpdateCallStatus for device %{private, mask.hash}s due to WS being enabled", buf, 0x16u);
              if (v15 < 0) {
                operator delete(__p[0]);
              }
            }
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v9 = 0;
          while (v9 != 5)
          {
            if (*(unsigned __int8 *)(v6 + 129 + v9++))
            {
              if ((unint64_t)(v9 - 1) <= 4) {
                goto LABEL_5;
              }
              break;
            }
          }
        }
      }
      sub_10052DFA4((unsigned __int8 *)&v16, *((_WORD *)v4 + 16), v4[5]);
LABEL_16:
      uint64_t v11 = (void *)v4[1];
      if (v11)
      {
        do
        {
          int v12 = v11;
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          int v12 = (void *)v4[2];
          BOOL v13 = *v12 == (void)v4;
          uint64_t v4 = v12;
        }
        while (!v13);
      }
      uint64_t v4 = v12;
    }
    while (v12 != v3);
  }
}

void sub_1005256DC(uint64_t a1, void *a2, unsigned __int8 a3)
{
  unsigned __int8 v16 = a3;
  uint64_t v3 = a2 + 1;
  uint64_t v4 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    uint64_t v5 = a1 + 360;
    do
    {
      uint64_t v6 = sub_10027653C(v4[5] + 400);
      if (sub_100275814(v5, 1))
      {
        if (*(unsigned char *)(v6 + 128))
        {
LABEL_5:
          if (*(unsigned char *)(v6 + 984))
          {
            uint64_t v7 = qword_100A19E70;
            if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
            {
              sub_100475EE0(v6, (uint64_t)__p);
              int v8 = __p;
              if (v15 < 0) {
                int v8 = (void **)__p[0];
              }
              *(_DWORD *)std::string buf = 141558275;
              uint64_t v18 = 1752392040;
              __int16 v19 = 2081;
              __int16 v20 = v8;
              _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Wireless Splitter suppressing UpdateCallStatus for device %{private, mask.hash}s due to WS being enabled", buf, 0x16u);
              if (v15 < 0) {
                operator delete(__p[0]);
              }
            }
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v9 = 0;
          while (v9 != 5)
          {
            if (*(unsigned __int8 *)(v6 + 129 + v9++))
            {
              if ((unint64_t)(v9 - 1) <= 4) {
                goto LABEL_5;
              }
              break;
            }
          }
        }
      }
      sub_10052E4F4(&v16, *((_WORD *)v4 + 16), v4[5]);
LABEL_16:
      uint64_t v11 = (void *)v4[1];
      if (v11)
      {
        do
        {
          int v12 = v11;
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          int v12 = (void *)v4[2];
          BOOL v13 = *v12 == (void)v4;
          uint64_t v4 = v12;
        }
        while (!v13);
      }
      uint64_t v4 = v12;
    }
    while (v12 != v3);
  }
}

void sub_1005258AC(unsigned __int16 a1, uint64_t a2)
{
  if (qword_1009FB058 != -1) {
    dispatch_once(&qword_1009FB058, &stru_1009B3FC0);
  }
  uint64_t v4 = (char *)off_1009FB050;
  if (sub_100276604(a2 + 400))
  {
    if (qword_1009FB058 != -1) {
      dispatch_once(&qword_1009FB058, &stru_1009B3FC0);
    }
    uint64_t v5 = sub_1005160B8((uint64_t)off_1009FB050, a1);
    if (qword_1009FB058 != -1) {
      dispatch_once(&qword_1009FB058, &stru_1009B3FC0);
    }
    uint64_t v6 = sub_100511724((uint64_t)off_1009FB050, a1);
    if (sub_1002765A4((uint64_t)(v6 + 50))) {
      goto LABEL_12;
    }
    if (qword_1009FB058 != -1) {
      dispatch_once(&qword_1009FB058, &stru_1009B3FC0);
    }
    uint64_t v7 = sub_100511724((uint64_t)off_1009FB050, a1);
    if (sub_1002765C4((uint64_t)(v7 + 50)))
    {
LABEL_12:
      int v8 = v4 + 360;
      uint64_t v9 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = &v27;
        sub_100275844((uint64_t)v8, &v27);
        if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v10 = (std::string *)v27.__r_.__value_.__r.__words[0];
        }
        uint64_t v11 = v24;
        sub_10027584C(v8, (uint64_t)v24);
        if (v25 < 0) {
          uint64_t v11 = (void **)v24[0];
        }
        if (v5)
        {
          sub_100474E18(v5, __p);
          if (v23 >= 0) {
            int v12 = __p;
          }
          else {
            int v12 = (void **)__p[0];
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v11;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2082;
          id v29 = (const char *)v12;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Sending call waiting notification for call %s \"%s\" to device %{public}s", (uint8_t *)&buf, 0x20u);
          if (v23 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v11;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2082;
          id v29 = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Sending call waiting notification for call %s \"%s\" to device %{public}s", (uint8_t *)&buf, 0x20u);
        }
        if (v25 < 0) {
          operator delete(v24[0]);
        }
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v27.__r_.__value_.__l.__data_);
        }
      }
      sub_10027584C(v8, (uint64_t)&v27);
      sub_100516598((uint64_t)&v27, v5, &buf);
      std::string v26 = buf;
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v27.__r_.__value_.__l.__data_);
      }
      v27.__r_.__value_.__s.__data_[0] = 0;
      sub_10001B8E0(&v27);
      sub_100275844((uint64_t)v8, &buf);
      int v16 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
      std::string::size_type v17 = buf.__r_.__value_.__r.__words[0];
      uint64_t v18 = sub_100275878((uint64_t)v8);
      if (v16 >= 0) {
        p_std::string buf = &buf;
      }
      else {
        p_std::string buf = (std::string *)v17;
      }
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        __int16 v20 = &v26;
      }
      else {
        __int16 v20 = (std::string *)v26.__r_.__value_.__r.__words[0];
      }
      int v21 = sub_100150E8C(a1, (const char *)p_buf, v18, (const char *)v20);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      sub_10001B910(&v27);
      if (v21)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
          sub_100776D40();
        }
      }
      sub_10001B8AC(&v27);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      {
        char v15 = (void *)v26.__r_.__value_.__r.__words[0];
        goto LABEL_50;
      }
    }
    else
    {
      BOOL v13 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        if (!v5)
        {
          LODWORD(v27.__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)v27.__r_.__value_.__r.__words + 4) = (std::string::size_type)"NULL";
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Device %{public}s does not support call waiting!", (uint8_t *)&v27, 0xCu);
          return;
        }
        sub_100474E18(v5, &buf);
        char v14 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &buf
            : (std::string *)buf.__r_.__value_.__r.__words[0];
        LODWORD(v27.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v27.__r_.__value_.__r.__words + 4) = (std::string::size_type)v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Device %{public}s does not support call waiting!", (uint8_t *)&v27, 0xCu);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        {
          char v15 = (void *)buf.__r_.__value_.__r.__words[0];
LABEL_50:
          operator delete(v15);
        }
      }
    }
  }
}

void sub_100525D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

void sub_100525D88(unsigned __int16 a1, uint64_t a2)
{
  if (qword_1009FB058 != -1) {
    dispatch_once(&qword_1009FB058, &stru_1009B3FC0);
  }
  uint64_t v4 = (char *)off_1009FB050;
  uint64_t v5 = a2 + 400;
  if (sub_100276604(v5))
  {
    uint64_t v6 = v4 + 360;
    if (qword_1009FB058 != -1) {
      dispatch_once(&qword_1009FB058, &stru_1009B3FC0);
    }
    uint64_t v7 = sub_1005160B8((uint64_t)off_1009FB050, a1);
    int v8 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = &v23;
      sub_100275844((uint64_t)v6, &v23);
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v9 = (std::string *)v23.__r_.__value_.__r.__words[0];
      }
      uint64_t v10 = v21;
      sub_10027584C(v6, (uint64_t)v21);
      if (v22 < 0) {
        uint64_t v10 = (void **)v21[0];
      }
      if (v7)
      {
        sub_100474E18(v7, __p);
        if (v20 >= 0) {
          uint64_t v11 = __p;
        }
        else {
          uint64_t v11 = (void **)__p[0];
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v10;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2082;
        std::string v26 = (const char *)v11;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Sending ring notification for call %s \"%s\" to device %{public}s", (uint8_t *)&buf, 0x20u);
        if (v20 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v10;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2082;
        std::string v26 = "NULL";
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Sending ring notification for call %s \"%s\" to device %{public}s", (uint8_t *)&buf, 0x20u);
      }
      if (v22 < 0) {
        operator delete(v21[0]);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
    }
    sub_10027584C(v6, (uint64_t)&v23);
    sub_100516598((uint64_t)&v23, v7, &buf);
    std::string v24 = buf;
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    v23.__r_.__value_.__s.__data_[0] = 0;
    sub_10001B8E0(&v23);
    p_std::string buf = &buf;
    sub_100275844((uint64_t)v6, &buf);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    uint64_t v13 = sub_100275878((uint64_t)v6);
    int v14 = SHIBYTE(v24.__r_.__value_.__r.__words[2]);
    std::string::size_type v15 = v24.__r_.__value_.__r.__words[0];
    int v16 = sub_10027662C(v5);
    if (v14 >= 0) {
      std::string::size_type v17 = &v24;
    }
    else {
      std::string::size_type v17 = (std::string *)v15;
    }
    int v18 = sub_100150A6C(a1, (const char *)p_buf, v13, (const char *)v17, v16);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    sub_10001B910(&v23);
    if (v18 && os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
      sub_100776DA8();
    }
    sub_10001B8AC(&v23);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1005260C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
}

void sub_100526150()
{
  sub_10003FB34();
  if (sub_1003541E8())
  {
    uint64_t v0 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v1 = 0;
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "Reserve Voice Buf", v1, 2u);
    }
    sub_10019C49C();
  }
}

unsigned char *sub_1005261C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3 + 400;
  if (sub_100276230(a3 + 400))
  {
    char v9 = 0;
    sub_10001B8E0(&v9);
    sub_10018354C(a2 + 128);
    sub_10001B8AC(&v9);
    int v6 = 2000;
  }
  else
  {
    int v6 = 0;
  }
  if (sub_100276564(v5) == 5) {
    int v6 = 0;
  }
  uint64_t v7 = sub_1002766EC(v5);
  return sub_100522CF4(v7, a3, v6, 0, v7);
}

void sub_100526260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

unsigned char *sub_100526274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = sub_1002765DC(a3 + 400);
    uint64_t v7 = "ringtones";
    if (v6) {
      uint64_t v7 = "voice-command";
    }
    int v11 = 136446210;
    int v12 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Making sco connection for playing %{public}s", (uint8_t *)&v11, 0xCu);
  }
  uint64_t v8 = a1 + 360;
  if (sub_1002758D0(v8) != 1 && (sub_100275948(v8) & 1) == 0 && (sub_1002765DC(a3 + 400) & 1) == 0)
  {
    if (qword_1009FB058 != -1) {
      dispatch_once(&qword_1009FB058, &stru_1009B3FC0);
    }
    sub_100519194((uint64_t)off_1009FB050);
  }
  uint64_t v9 = sub_1002766EC(a3 + 400);
  return sub_100522CF4(v9, a3, 0, 0, v9);
}

unsigned char *sub_1005263C0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unsigned int v6 = sub_100515FDC(a1, a2);
  if (qword_1009FB130 != -1) {
    dispatch_once(&qword_1009FB130, &stru_1009B40E0);
  }
  BOOL v8 = !sub_1002DE840(qword_1009FB128, a2)
    && (uint64_t v7 = sub_1002765FC(a3 + 400), (v7 & 1) == 0)
    && sub_100514160(v7, a2) == 2;
  if (!sub_10027669C(a3 + 400) || v8)
  {
    sub_100519194(a1);
  }
  else
  {
    uint64_t v9 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a2, __p);
      uint64_t v10 = v14 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136446210;
      int v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Starting voice command session for device %{public}s", buf, 0xCu);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }
    if ((sub_1002765DC(a3 + 400) & 1) == 0)
    {
      LOBYTE(__p[0]) = 0;
      sub_10001B8E0(__p);
      sub_100150CC4(v6, 1);
      sub_10001B910(__p);
      sub_1002765E4(a3 + 400, 1);
      sub_10001B8AC(__p);
    }
  }
  sub_1002B7BC8(6);
  uint64_t v11 = sub_1002766EC(a3 + 400);
  return sub_100522CF4(v11, a3, 0, 0, v11);
}

void sub_100526598(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10001B8AC(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005265B4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  v20[0] = 0;
  v20[1] = 0;
  sub_10003AED0((uint64_t)v20, a1 + 760);
  uint64_t v7 = qword_100A19E70;
  BOOL v8 = os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    uint64_t v9 = sub_100513D34(v8, a3);
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "RegisterScoChannel codecID: %s\n", (uint8_t *)&buf, 0xCu);
  }
  if (a3 <= 254)
  {
    uint64_t v10 = &off_1009FBAD0;
    uint64_t v11 = &unk_1009FBAE8;
    switch(a3)
    {
      case 127:
        goto LABEL_32;
      case 128:
        uint64_t v10 = (_UNKNOWN **)&unk_1009FBB48;
        uint64_t v11 = &unk_1009FBB60;
        goto LABEL_32;
      case 129:
        uint64_t v10 = (_UNKNOWN **)&unk_1009FBB70;
        uint64_t v11 = &unk_1009FBB88;
        goto LABEL_14;
      case 130:
        uint64_t v10 = (_UNKNOWN **)&unk_1009FBB98;
        uint64_t v11 = &unk_1009FBBB0;
        goto LABEL_14;
      default:
        if (a3 != 2) {
          goto LABEL_27;
        }
        uint64_t v10 = &off_1009FBBC0;
        uint64_t v11 = &unk_1009FBBD8;
        goto LABEL_28;
    }
  }
  if (a3 != 255)
  {
    if (a3 == 256)
    {
      uint64_t v10 = (_UNKNOWN **)&unk_1009FBB20;
      uint64_t v11 = &unk_1009FBB38;
      goto LABEL_32;
    }
LABEL_27:
    uint64_t v10 = (_UNKNOWN **)&unk_1009FBBE8;
    uint64_t v11 = &unk_1009FBC00;
    goto LABEL_28;
  }
  uint64_t v10 = (_UNKNOWN **)&unk_1009FBAF8;
  uint64_t v11 = &unk_1009FBB10;
LABEL_14:
  memset(&buf, 0, sizeof(buf));
  sub_10004191C(&buf, "4-EV5");
  int v12 = sub_10027672C(a4 + 400);
  if ((v12 & 1) == 0)
  {
    *((_WORD *)v10 + 11) = 16064;
    std::string::assign(&buf, "2-EV5");
  }
  uint64_t v13 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    p_std::string buf = &buf;
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    std::string::size_type v15 = "";
    if (!v12) {
      std::string::size_type v15 = " not";
    }
    *(_DWORD *)int v21 = 136315394;
    char v22 = p_buf;
    __int16 v23 = 2080;
    std::string v24 = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Setting up call using %s packets as HDR eSCO is%s supported", v21, 0x16u);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if ((a3 - 129) >= 2 && a3 != 255)
  {
LABEL_28:
    if (sub_100275668(a4 + 400) == 2)
    {
      void v11[4] = 28;
      char v16 = 1;
    }
    else
    {
      void v11[4] = -1;
      char v16 = -1;
    }
    *((unsigned char *)v11 + 12) = v16;
  }
LABEL_32:
  sub_10027673C(a4 + 400, a3);
  buf.__r_.__value_.__s.__data_[0] = 0;
  sub_10001B8E0(&buf);
  uint64_t v17 = a2 + 128;
  int v18 = sub_10018943C((uint64_t)off_1009B3CF8, v17, a4);
  if (v18 && v18 != 1327 && os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
    sub_100776EE0();
  }
  if (sub_1001894D0((uint64_t)v10, (uint64_t)v11, v17))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
      sub_100776E78();
    }
    if (sub_100189548(v17) && os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
      sub_100776E10();
    }
  }
  sub_10001B910(&buf);
  sub_10001B8AC(&buf);
  return sub_10003AFB4((uint64_t)v20);
}

void sub_100526968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

uint64_t sub_1005269C4(uint64_t a1, char a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 760);
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
    sub_100776F48();
  }
  sub_10027576C(a1 + 360, a2);
  return sub_10003AFB4((uint64_t)v5);
}

void sub_100526A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100526A5C(uint64_t a1, uint64_t a2)
{
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 760);
  uint64_t v4 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "HFP stream will start", v7, 2u);
  }
  if (sub_1002E9368(a2))
  {
    sub_100276784(a2 + 400, 1);
    sub_100514DF4(a1, a2);
    sub_1005D144C(a2);
  }
  else
  {
    uint64_t v5 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Audio device is not valid, not handling streamWillStart", v7, 2u);
    }
  }
  return sub_10003AFB4((uint64_t)v8);
}

void sub_100526B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100526B6C(uint64_t a1, uint64_t a2)
{
  return sub_100526A5C(a1 - 280, a2);
}

uint64_t sub_100526B74(uint64_t a1, uint64_t a2)
{
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 760);
  char v3 = sub_1002E9368(a2);
  uint64_t v4 = qword_100A19E70;
  if (v3)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEBUG))
    {
      sub_100776FE8();
      if (a2) {
        goto LABEL_4;
      }
    }
    else if (a2)
    {
LABEL_4:
      sub_1005D1664(a2);
      return sub_10003AFB4((uint64_t)v7);
    }
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
      sub_100776FB4();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Audio device is not valid, not handling streamAudioAvailable", v6, 2u);
  }
  return sub_10003AFB4((uint64_t)v7);
}

void sub_100526C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100526C70(uint64_t a1, uint64_t a2)
{
  return sub_100526B74(a1 - 280, a2);
}

uint64_t sub_100526C78(uint64_t a1, uint64_t a2)
{
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 760);
  char v3 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Stream did stop!", v6, 2u);
  }
  if (sub_1002E9368(a2))
  {
    if (a2)
    {
      sub_1005D039C(a2);
      sub_100276784(a2 + 400, 0);
    }
  }
  else
  {
    uint64_t v4 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned int v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Audio device is not valid, not handling streamDidStop", v6, 2u);
    }
  }
  return sub_10003AFB4((uint64_t)v7);
}

void sub_100526D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100526D7C(uint64_t a1, uint64_t a2)
{
  return sub_100526C78(a1 - 280, a2);
}

void sub_100526D84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1004AFA9C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_100526E04;
  uint64_t v5[3] = &unk_100998260;
  _DWORD v5[4] = a1;
  void v5[5] = a2;
  sub_100013018(v4, v5);
}

uint64_t sub_100526E04(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, v2 + 760);
  char v3 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)BOOL v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Stream reset, closing SCO if it wasn't closed", v8, 2u);
  }
  if (sub_1002E9368(*(void *)(a1 + 40)))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    if (v4 && sub_10027653C(v4 + 400) && sub_100276564(*(void *)(a1 + 40) + 400))
    {
      unsigned int v5 = sub_100276534(*(void *)(a1 + 40) + 400);
      sub_10051F224(v2, v5, 0, 0);
    }
  }
  else
  {
    unsigned int v6 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Audio device is not valid, not handling streamDidReset", v8, 2u);
    }
  }
  return sub_10003AFB4((uint64_t)v9);
}

void sub_100526F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100526F3C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100526F44(uint64_t a1, uint64_t a2, float a3)
{
  v17[0] = 0;
  v17[1] = 0;
  sub_10003AED0((uint64_t)v17, a1 + 760);
  if (sub_1002E9368(a2))
  {
    if (a2)
    {
      uint64_t v5 = a2 + 400;
      unsigned int v6 = sub_100276534(v5);
      uint64_t v7 = sub_10027653C(v5);
      if (v7 && sub_1004879E4(v7) == 1) {
        float v8 = roundf(a3 * 15.0);
      }
      else {
        float v8 = a3 * 15.0;
      }
      int v13 = sub_100276584(v5);
      char v14 = qword_100A19E70;
      BOOL v15 = os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT);
      if (v13 == (int)v8)
      {
        if (v15)
        {
          *(_DWORD *)std::string buf = 67109120;
          int v19 = (int)v8;
          uint64_t v10 = "Speaker volume is a duplicate value %d, not sending to external device";
          uint64_t v11 = v14;
          uint32_t v12 = 8;
          goto LABEL_12;
        }
      }
      else
      {
        if (v15)
        {
          *(_DWORD *)std::string buf = 67109120;
          int v19 = (int)v8;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Volume did update to %d", buf, 8u);
        }
        buf[0] = 0;
        sub_10001B8E0(buf);
        sub_10014FF8C(v6, (int)v8);
        sub_10001B910(buf);
        sub_10027658C(v5, (int)v8);
        sub_10001B8AC(buf);
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
    {
      sub_100777028();
    }
  }
  else
  {
    uint64_t v9 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      uint64_t v10 = "Audio device is not valid, not handling volumeDidUpdate";
      uint64_t v11 = v9;
      uint32_t v12 = 2;
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v10, buf, v12);
    }
  }
  return sub_10003AFB4((uint64_t)v17);
}

void sub_100527160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10052719C(uint64_t a1, uint64_t a2, float a3)
{
  return sub_100526F44(a1 - 280, a2, a3);
}

uint64_t sub_1005271A4(uint64_t a1, uint64_t a2, float a3)
{
  v17[0] = 0;
  v17[1] = 0;
  sub_10003AED0((uint64_t)v17, a1 + 760);
  if (sub_1002E9368(a2))
  {
    if (a2)
    {
      uint64_t v5 = a2 + 400;
      unsigned int v6 = sub_100276534(v5);
      uint64_t v7 = sub_10027653C(v5);
      if (v7 && sub_1004879E4(v7) == 1) {
        float v8 = roundf(a3 * 15.0);
      }
      else {
        float v8 = a3 * 15.0;
      }
      int v13 = sub_100276574(v5);
      char v14 = qword_100A19E70;
      BOOL v15 = os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT);
      if (v13 == (int)v8)
      {
        if (v15)
        {
          *(_DWORD *)std::string buf = 67109120;
          int v19 = (int)v8;
          uint64_t v10 = "Input volume is a duplicate value %d, not sending to external device";
          uint64_t v11 = v14;
          uint32_t v12 = 8;
          goto LABEL_12;
        }
      }
      else
      {
        if (v15)
        {
          *(_DWORD *)std::string buf = 67109120;
          int v19 = (int)v8;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Input volume did update to %d", buf, 8u);
        }
        buf[0] = 0;
        sub_10001B8E0(buf);
        sub_10014FEB4(v6, (int)v8);
        sub_10001B910(buf);
        sub_10027657C(v5, (int)v8);
        sub_10001B8AC(buf);
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
    {
      sub_100777028();
    }
  }
  else
  {
    uint64_t v9 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      uint64_t v10 = "Audio device is not valid, not handling inputVolumeDidUpdate";
      uint64_t v11 = v9;
      uint32_t v12 = 2;
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v10, buf, v12);
    }
  }
  return sub_10003AFB4((uint64_t)v17);
}

void sub_1005273C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1005273FC(uint64_t a1, uint64_t a2, float a3)
{
  return sub_1005271A4(a1 - 280, a2, a3);
}

void sub_100527404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 67109120;
    v8[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "SCO sample Rate updated to %d ", (uint8_t *)v8, 8u);
  }
  if (sub_1002E9368(a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, void, void))(*(void *)a1 + 264))(a1, a2, a3, 0, 0);
  }
  else
  {
    uint64_t v7 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Audio device is not valid, not handling scoSampleRateDidUpdate", (uint8_t *)v8, 2u);
    }
  }
}

void sub_10052754C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_100527554(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = sub_1004AFA9C();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1005275E4;
  void v7[3] = &unk_1009A0160;
  void v7[4] = a1;
  void v7[5] = a2;
  char v8 = a3;
  sub_100013018(v6, v7);
}

uint64_t sub_1005275E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, v2 + 760);
  if (sub_1002E9368(*(void *)(a1 + 40)))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    if (v3)
    {
      uint64_t v4 = sub_10027653C(v3 + 400);
      if (v4)
      {
        uint64_t v5 = qword_100A19E70;
        if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
        {
          int v6 = *(unsigned __int8 *)(a1 + 48);
          sub_100474E18(v4, __p);
          if (v11 >= 0) {
            uint64_t v7 = __p;
          }
          else {
            uint64_t v7 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 67109378;
          int v14 = v6;
          __int16 v15 = 2082;
          char v16 = v7;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting allowScoForTBT to %d for device %{public}s", buf, 0x12u);
          if (v11 < 0) {
            operator delete(__p[0]);
          }
        }
        sub_100481544(v4, *(unsigned __int8 *)(a1 + 48));
      }
    }
  }
  else
  {
    char v8 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Audio device is not valid, not handling allowSCOForTBTDidUpdate", (uint8_t *)__p, 2u);
    }
  }
  return sub_10003AFB4((uint64_t)v12);
}

void sub_10052776C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100527790(uint64_t a1, uint64_t a2, char a3)
{
}

void sub_100527798(uint64_t a1, uint64_t a2, char a3)
{
  __int16 v5 = sub_100276534(a2 + 400);
  uint64_t v6 = sub_1004AFA9C();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_100527834;
  void v7[3] = &unk_1009ACD50;
  void v7[4] = a1;
  __int16 v8 = v5;
  char v9 = a3;
  sub_100013018(v6, v7);
}

uint64_t sub_100527834(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v34[0] = 0;
  v34[1] = 0;
  sub_10003AED0((uint64_t)v34, v2 + 760);
  uint64_t v3 = sub_100511724(v2, *(unsigned __int16 *)(a1 + 40));
  if (v3)
  {
    uint64_t v4 = (uint64_t)(v3 + 50);
    uint64_t v5 = sub_10027653C((uint64_t)(v3 + 50));
    if (sub_100478B2C(v5, 12))
    {
      uint64_t v6 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(v5, v39);
        if (v41 >= 0) {
          uint64_t v7 = v39;
        }
        else {
          uint64_t v7 = *(uint8_t **)v39;
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received expanseInA2DP for Apple audio device %{public}s", (uint8_t *)&buf, 0xCu);
        if (SHIBYTE(v41) < 0) {
          operator delete(*(void **)v39);
        }
      }
    }
    else
    {
      int v8 = sub_100276024(v2 + 360);
      sub_100275FDC(v2 + 360, *(unsigned char *)(a1 + 42));
      char v9 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = *(unsigned __int8 *)(a1 + 42);
        *(_DWORD *)uint64_t v39 = 67109376;
        *(_DWORD *)&v39[4] = v8;
        LOWORD(v4sub_1004C2140(qword_100A19B68, 0) = 1024;
        *(_DWORD *)((char *)&v40 + 2) = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Expanse in A2DP state changed from %d to %d", v39, 0xEu);
      }
      int v11 = *(unsigned __int8 *)(a1 + 42);
      uint32_t v12 = qword_100A19E70;
      BOOL v13 = os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT);
      if (v11)
      {
        if (v13)
        {
          sub_100474E18(v5, v39);
          int v14 = v41 >= 0 ? v39 : *(uint8_t **)v39;
          LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v14;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Setting IsInExpanseOverA2DP to true for device %{public}s", (uint8_t *)&buf, 0xCu);
          if (SHIBYTE(v41) < 0) {
            operator delete(*(void **)v39);
          }
        }
        sub_10027692C(v4, 1);
        *(void *)uint64_t v39 = 0;
        int v40 = 0;
        uint64_t v41 = 0;
        sub_10061F99C(v39);
        if (qword_1009FB120 != -1) {
          dispatch_once(&qword_1009FB120, &stru_1009B4080);
        }
        sub_10062F0E4((uint64_t)off_1009FB118);
        __int16 v15 = qword_100A19E70;
        if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
        {
          sub_10061FC64((uint64_t *)v39, &buf);
          char v16 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &buf
              : (std::string *)buf.__r_.__value_.__r.__words[0];
          LODWORD(v35.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v35.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Current Call(s) in expanse: %s", (uint8_t *)&v35, 0xCu);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
        }
        sub_10061FA28((int)v33);
        sub_1002760D0(v2 + 360, v33);
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
        sub_10027696C((void ***)&buf);
        for (uint64_t i = *(uint8_t **)v39; i != (uint8_t *)v40; i += 104)
        {
          if (*((_DWORD *)i + 4) == 1)
          {
            std::string v27 = qword_100A19E70;
            if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(buf.__r_.__value_.__l.__data_) = 0;
              _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Update overall call(s) status after a current active call has entered expanse", (uint8_t *)&buf, 2u);
            }
            memset(&buf, 0, sizeof(buf));
            sub_10061F99C(&buf);
            if (qword_1009FB120 != -1) {
              dispatch_once(&qword_1009FB120, &stru_1009B4080);
            }
            sub_10062F0BC((uint64_t)off_1009FB118);
            *(_OWORD *)&v35.__r_.__value_.__l.__data_ = 0uLL;
            id v28 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:&v35];
            sub_10051944C(v2, (uint64_t *)&buf, v28);

            goto LABEL_71;
          }
        }
      }
      else
      {
        if (v13)
        {
          sub_100474E18(v5, v39);
          int v18 = v41 >= 0 ? v39 : *(uint8_t **)v39;
          LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v18;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Setting IsInExpanseOverA2DP to false for device %{public}s", (uint8_t *)&buf, 0xCu);
          if (SHIBYTE(v41) < 0) {
            operator delete(*(void **)v39);
          }
        }
        sub_10027692C(v4, 0);
        *(void *)uint64_t v39 = 0;
        int v40 = 0;
        uint64_t v41 = 0;
        sub_10061F99C(v39);
        if (qword_1009FB120 != -1) {
          dispatch_once(&qword_1009FB120, &stru_1009B4080);
        }
        sub_10062F0BC((uint64_t)off_1009FB118);
        memset(&buf, 0, sizeof(buf));
        sub_10027606C(v2 + 360, (int)&buf);
        int v19 = qword_100A19E70;
        if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
        {
          sub_10061FC64((uint64_t *)&buf, &v35);
          if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v20 = &v35;
          }
          else {
            char v20 = (std::string *)v35.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)char v36 = 136315138;
          uint64_t v37 = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Call(s) in A2DP expanse: %s", v36, 0xCu);
          if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v35.__r_.__value_.__l.__data_);
          }
          int v19 = qword_100A19E70;
        }
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          sub_10061FC64((uint64_t *)v39, &v35);
          int v21 = (v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v35
              : (std::string *)v35.__r_.__value_.__r.__words[0];
          *(_DWORD *)char v36 = 136315138;
          uint64_t v37 = v21;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Current Call(s): %s", v36, 0xCu);
          if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v35.__r_.__value_.__l.__data_);
          }
        }
        if (buf.__r_.__value_.__r.__words[0] == buf.__r_.__value_.__l.__size_)
        {
          BOOL v25 = 1;
        }
        else
        {
          std::string::size_type v22 = buf.__r_.__value_.__r.__words[0] + 104;
          do
          {
            id v23 = *(id *)(v22 - 104);
            std::string v24 = sub_10061FB58((id **)v39, v23);

            BOOL v25 = v40 == v24;
            BOOL v26 = v40 != v24 || v22 == buf.__r_.__value_.__l.__size_;
            v22 += 104;
          }
          while (!v26);
        }
        sub_10061FA80((uint64_t *)&buf);
        sub_10061FA28((int)v32);
        sub_1002760D0(v2 + 360, v32);
        v35.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
        sub_10027696C((void ***)&v35);
        if (!v25)
        {
          id v29 = qword_100A19E70;
          if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v35.__r_.__value_.__l.__data_) = 0;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Update overall call(s) status since a current active call has exited expanse", (uint8_t *)&v35, 2u);
          }
          *(_OWORD *)&v35.__r_.__value_.__l.__data_ = 0uLL;
          id v30 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:&v35];
          sub_10051944C(v2, (uint64_t *)v39, v30);
        }
LABEL_71:
        v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
        sub_10027696C((void ***)&v35);
      }
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
      sub_10027696C((void ***)&buf);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
  {
    sub_10077705C();
  }
  return sub_10003AFB4((uint64_t)v34);
}

void sub_100527F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void ***a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  a17 = &a23;
  sub_10027696C((void ***)&a17);
  a23 = (void **)(v24 - 112);
  sub_10027696C(&a23);
  sub_10003AFB4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_10052800C(uint64_t a1, uint64_t a2, char a3)
{
}

void sub_100528014(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = qword_100A19E70;
  BOOL v5 = os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT);
  if (a3)
  {
    if (!v5) {
      return;
    }
    __int16 v9 = 0;
    uint64_t v6 = "Call Screening Property is set.";
    uint64_t v7 = (uint8_t *)&v9;
  }
  else
  {
    if (!v5) {
      return;
    }
    __int16 v8 = 0;
    uint64_t v6 = "Call Screening Property is cleared.";
    uint64_t v7 = (uint8_t *)&v8;
  }
  _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v6, v7, 2u);
}

void sub_1005280A8()
{
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
    sub_1007770C8();
  }
}

unsigned char *sub_1005280F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 400;
  uint64_t v3 = sub_10027653C(a2 + 400);
  uint64_t v4 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(v3, __p);
    if (v9 >= 0) {
      BOOL v5 = __p;
    }
    else {
      BOOL v5 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136446210;
    int v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Transitioning HFP audio to unidirectional for device %{public}s", buf, 0xCu);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }
  unsigned int v6 = sub_100276534(v2);
  LOBYTE(__p[0]) = 0;
  sub_10001B8E0(__p);
  sub_100151AE8(v6);
  return sub_10001B8AC(__p);
}

void sub_100528200(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10001B8AC(va);
  _Unwind_Resume(a1);
}

void sub_100528220(uint64_t a1, uint64_t a2, int a3)
{
  sub_100276704(a2 + 400, a3);
  uint64_t v4 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "HandsfreeGateway setAudioTransport to advanced sniff %d", (uint8_t *)v5, 8u);
  }
}

void sub_1005282D4(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  int v10 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109888;
    int v29 = a4;
    __int16 v30 = 1024;
    *(_DWORD *)char v31 = a5;
    *(_WORD *)&uint8_t v31[4] = 1024;
    *(_DWORD *)&v31[6] = sub_1002766EC(a2 + 400);
    *(_WORD *)uint64_t v32 = 1024;
    *(_DWORD *)&uint64_t v32[2] = sub_1002766FC(a2 + 400);
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "setAudioCodec updateStereoCodec %d, inputCodecID %d callcodec %d AoS %d", buf, 0x1Au);
  }
  if (a2)
  {
    uint64_t v11 = a2 + 400;
    uint64_t v12 = sub_10027653C(a2 + 400);
    if (v12)
    {
      uint64_t v13 = v12;
      int v14 = a5;
      if ((a4 & 1) == 0) {
        int v14 = sub_1002766EC(v11);
      }
      if (a3 == 48000 && v14 == 130)
      {
        char v15 = 0;
        int v16 = 130;
      }
      else if (a3 == 48000 && v14 == 129)
      {
        char v15 = 0;
        int v16 = 129;
      }
      else if (a3 == 48000 && v14 == 255)
      {
        char v15 = 0;
        int v16 = 255;
      }
      else if (a3 == 24000 && v14 == 128)
      {
        char v15 = 0;
        int v16 = 128;
      }
      else
      {
        uint64_t v17 = sub_100512018(a1, v13);
        if (v17 && (char v18 = sub_10027667C(v17 + 400), a3 == 24000) && (v18 & 1) != 0)
        {
          char v15 = 0;
          int v16 = 127;
        }
        else
        {
          char v19 = sub_10051440C(a1, v13);
          if (a3 == 24000 && (v19 & 1) != 0)
          {
            char v15 = 0;
            int v16 = 256;
          }
          else
          {
            char v20 = sub_1005143D4(a1, v13);
            if (a3 == 16000 && (v20 & 1) != 0)
            {
              char v15 = 0;
              int v16 = 2;
            }
            else if (a3 == 8000)
            {
              char v15 = 0;
              int v16 = 1;
            }
            else
            {
              if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
                sub_100777164();
              }
              int v16 = 0;
              char v15 = 1;
            }
          }
        }
      }
      if (a5 || (a4 & 1) != 0 || (int v21 = sub_1002766FC(v11), a3 != 48000) || !v21)
      {
        if (v15)
        {
          int v16 = 0;
          goto LABEL_46;
        }
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
          sub_100777130();
        }
        int v16 = 130;
      }
      sub_1002766F4(v11, v16);
LABEL_46:
      std::string::size_type v22 = qword_100A19E70;
      BOOL v23 = os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT);
      if (v23)
      {
        uint64_t v24 = sub_100513D34(v23, v16);
        sub_100475EE0(v13, (uint64_t)__p);
        if (v27 >= 0) {
          BOOL v25 = __p;
        }
        else {
          BOOL v25 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 67110147;
        int v29 = v14;
        __int16 v30 = 2080;
        *(void *)char v31 = v24;
        *(_WORD *)&v31[8] = 1024;
        *(_DWORD *)uint64_t v32 = a3;
        *(_WORD *)&v32[4] = 2160;
        uint64_t v33 = 1752392040;
        __int16 v34 = 2081;
        std::string v35 = v25;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "setAudioCodec stereoCodecID %d, new codec %s sampleRate %d for device %{private, mask.hash}s", buf, 0x2Cu);
        if (v27 < 0) {
          operator delete(__p[0]);
        }
      }
      return;
    }
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
    sub_1007770FC();
  }
}

void sub_100528684(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
}

void sub_10052868C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = a2 + 400;
  uint64_t v7 = sub_10027653C(a2 + 400);
  if (a3 > 1935827570)
  {
    if (a3 != 1935827571)
    {
      if (a3 == 1936221033)
      {
        uint64_t v12 = qword_100A19E70;
        if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
        {
          sub_100475EE0(v7, (uint64_t)&__p);
          uint64_t v13 = SBYTE3(v31) >= 0 ? &__p : (void **)__p;
          *(_DWORD *)BOOL v23 = 141558275;
          *(void *)&uint8_t v23[4] = 1752392040;
          __int16 v24 = 2081;
          BOOL v25 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Sco data source selected for HCI for device %{private, mask.hash}s", v23, 0x16u);
          if (SBYTE3(v31) < 0) {
            operator delete(__p);
          }
        }
        int v10 = 2;
        int v11 = 2;
        goto LABEL_38;
      }
      goto LABEL_40;
    }
    int v16 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      sub_100475EE0(v7, (uint64_t)&__p);
      if (SBYTE3(v31) >= 0) {
        p_p = &__p;
      }
      else {
        p_p = (void **)__p;
      }
      *(_DWORD *)BOOL v23 = 141558275;
      *(void *)&uint8_t v23[4] = 1752392040;
      __int16 v24 = 2081;
      BOOL v25 = p_p;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Sco data source selected for baseband to PCM for device %{private, mask.hash}s", v23, 0x16u);
      if (SBYTE3(v31) < 0) {
        operator delete(__p);
      }
      int v16 = qword_100A19E70;
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Highland Park I2S to PCM route selected. Forcing CVSD.", (uint8_t *)&__p, 2u);
    }
    int v10 = 1;
    sub_1002766F4(v6, 1);
LABEL_37:
    int v11 = 3;
LABEL_38:
    char v18 = (_DWORD *)sub_10003FB34();
    sub_10035408C(v18, v7, v10);
    sub_100276734(v6, v11);
    int v19 = sub_1002766EC(v6);
    sub_1005265B4(a1, v7, v19, a2);
    return;
  }
  if (a3 == 1935765619)
  {
    int v14 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      sub_100475EE0(v7, (uint64_t)&__p);
      char v15 = SBYTE3(v31) >= 0 ? &__p : (void **)__p;
      *(_DWORD *)BOOL v23 = 141558275;
      *(void *)&uint8_t v23[4] = 1752392040;
      __int16 v24 = 2081;
      BOOL v25 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Sco data source selected for AP I2S 8kHz for device %{private, mask.hash}s", v23, 0x16u);
      if (SBYTE3(v31) < 0) {
        operator delete(__p);
      }
    }
    int v10 = 3;
    goto LABEL_37;
  }
  if (a3 == 1935765620)
  {
    __int16 v8 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      sub_100475EE0(v7, (uint64_t)&__p);
      if (SBYTE3(v31) >= 0) {
        char v9 = &__p;
      }
      else {
        char v9 = (void **)__p;
      }
      *(_DWORD *)BOOL v23 = 141558275;
      *(void *)&uint8_t v23[4] = 1752392040;
      __int16 v24 = 2081;
      BOOL v25 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Sco data source selected for AP I2S 16kHz for device %{private, mask.hash}s", v23, 0x16u);
      if (SBYTE3(v31) < 0) {
        operator delete(__p);
      }
    }
    int v10 = 4;
    int v11 = 4;
    goto LABEL_38;
  }
LABEL_40:
  char v20 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
  {
    sub_100475EE0(v7, (uint64_t)&__p);
    if (SBYTE3(v31) >= 0) {
      std::string::size_type v22 = &__p;
    }
    else {
      std::string::size_type v22 = (void **)__p;
    }
    *(_DWORD *)BOOL v23 = 141558275;
    *(void *)&uint8_t v23[4] = 1752392040;
    __int16 v24 = 2081;
    BOOL v25 = v22;
    _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Unknown SCO data source selected for device %{private, mask.hash}s", v23, 0x16u);
    if (SBYTE3(v31) < 0) {
      operator delete(__p);
    }
    char v20 = qword_100A19E70;
  }
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    sub_100475EE0(v7, (uint64_t)v23);
    int v21 = v26 >= 0 ? v23 : *(unsigned char **)v23;
    LODWORD(__p) = 67109635;
    HIDWORD(__p) = a3;
    __int16 v28 = 2160;
    uint64_t v29 = 1752392040;
    __int16 v30 = 2081;
    char v31 = v21;
    _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Sco route and audio channel not set because an unknown datasource of %d selected for device %{private, mask.hash}s", (uint8_t *)&__p, 0x1Cu);
    if (v26 < 0) {
      operator delete(*(void **)v23);
    }
  }
}

void sub_100528B8C(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  __int16 v9 = sub_100276534(a2 + 400);
  uint64_t v10 = sub_1004AFA9C();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  _DWORD v11[2] = sub_100528C3C;
  v11[3] = &unk_1009B3D20;
  void v11[4] = a1;
  __int16 v15 = v9;
  int v12 = a4;
  int v13 = a5;
  int v14 = a3;
  sub_100013018(v10, v11);
}

uint64_t sub_100528C3C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v30[0] = 0;
  v30[1] = 0;
  sub_10003AED0((uint64_t)v30, v2 + 760);
  uint64_t v3 = sub_100511724(v2, *(unsigned __int16 *)(a1 + 52));
  uint64_t v4 = v3;
  if (!v3)
  {
    uint64_t v15 = qword_100A19E70;
    if (!os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT)) {
      return sub_10003AFB4((uint64_t)v30);
    }
    int v16 = *(unsigned __int16 *)(a1 + 52);
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v16;
    uint64_t v17 = "No AudioDevice found for handle %d, not handling selectScoDataSource";
    char v18 = v15;
    uint32_t v19 = 8;
LABEL_8:
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v17, buf, v19);
    return sub_10003AFB4((uint64_t)v30);
  }
  uint64_t v5 = (uint64_t)(v3 + 50);
  uint64_t v6 = sub_10027653C((uint64_t)(v3 + 50));
  if (!v6) {
    return sub_10003AFB4((uint64_t)v30);
  }
  int v7 = *(_DWORD *)(a1 + 40);
  if (!v7)
  {
    char v20 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(v6, buf);
      int v21 = (SBYTE7(v40) & 0x80u) == 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)char v31 = 136446210;
      uint64_t v32 = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Sco route is disabled for device %{public}s", v31, 0xCu);
      if (SBYTE7(v40) < 0) {
        operator delete(*(void **)buf);
      }
    }
    if (sub_100276564(v5))
    {
      unsigned int v22 = sub_100276534(v5);
      sub_10051F224(v2, v22, 0, 116);
      return sub_10003AFB4((uint64_t)v30);
    }
    uint64_t v26 = qword_100A19E70;
    if (!os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT)) {
      return sub_10003AFB4((uint64_t)v30);
    }
    *(_WORD *)std::string buf = 0;
    uint64_t v17 = "already disconnected no need disconnect audio";
    char v18 = v26;
    uint32_t v19 = 2;
    goto LABEL_8;
  }
  sub_100275880((uint64_t)(v4 + 50), v7);
  unsigned int v8 = sub_100276534((uint64_t)(v4 + 50));
  char v29 = 0;
  sub_10001B8E0(&v29);
  BOOL v9 = sub_10018A0F8(0);
  BOOL v10 = sub_100156B44(v8);
  int v11 = sub_1001569D8(v8);
  sub_10001B910(&v29);
  uint64_t v41 = 0;
  *(_OWORD *)std::string buf = 0u;
  long long v40 = 0u;
  int v12 = *(_DWORD *)(a1 + 44);
  uint64_t v13 = sub_100512018(v2, v6);
  if (v13) {
    int v14 = sub_10027664C(v13 + 400);
  }
  else {
    int v14 = 0;
  }
  sub_1005290E0(v12, v14, (uint64_t)buf);
  if (v10)
  {
    *(_DWORD *)char v31 = sub_1002766EC((uint64_t)(v4 + 50));
    BOOL v10 = sub_10052E744(buf, (unsigned int *)v31) == 0;
  }
  if (v9 || v10 || v11 == 4)
  {
    BOOL v23 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      sub_100475EE0(v6, (uint64_t)__p);
      if (v28 >= 0) {
        __int16 v24 = __p;
      }
      else {
        __int16 v24 = (void **)__p[0];
      }
      *(_DWORD *)char v31 = 136446978;
      uint64_t v32 = v24;
      __int16 v33 = 1024;
      BOOL v34 = v9;
      __int16 v35 = 1024;
      BOOL v36 = v10;
      __int16 v37 = 1024;
      BOOL v38 = v11 == 4;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Deferring route change to %{public}s, will retry when disconnect stack event fires - possibleSCOActivity:%d sampleRateChangedWhileScoWasOpen:%d isHandsfreeAoSDisconnecting:%d", v31, 0x1Eu);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }
    sub_100275B08(v2 + 360);
  }
  (*(void (**)(uint64_t, uint64_t *, void, void, void))(*(void *)v2 + 144))(v2, v4, *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44));
  sub_1000A9450((uint64_t)buf);
  sub_10001B8AC(&v29);
  return sub_10003AFB4((uint64_t)v30);
}

void sub_10052907C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
}

uint64_t sub_1005290E0@<X0>(int a1@<W1>, int a2@<W2>, uint64_t a3@<X8>)
{
  if (a1 <= 23999)
  {
    if (a1 == 8000)
    {
      LODWORD(v8) = 1;
LABEL_19:
      uint64_t v4 = a3;
      uint64_t v5 = 1;
      return sub_10052E7F8(v4, (unsigned int *)&v8, v5);
    }
    if (a1 != 16000) {
      goto LABEL_14;
    }
    int v6 = 2;
LABEL_18:
    LODWORD(v8) = v6;
    goto LABEL_19;
  }
  if (a1 == 24000)
  {
    if (a2) {
      int v6 = 128;
    }
    else {
      int v6 = 256;
    }
    goto LABEL_18;
  }
  if (a1 == 32000)
  {
    int v6 = 127;
    goto LABEL_18;
  }
  if (a1 != 48000)
  {
LABEL_14:
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
      sub_1007771D4();
    }
    goto LABEL_16;
  }
  if (!a2)
  {
LABEL_16:
    LODWORD(v8) = 0;
    goto LABEL_19;
  }
  uint64_t v8 = 0x8200000081;
  uint64_t v4 = a3;
  uint64_t v5 = 2;
  return sub_10052E7F8(v4, (unsigned int *)&v8, v5);
}

uint64_t sub_10052921C(uint64_t a1, int a2)
{
  uint64_t result = 24000;
  if (a2 > 128)
  {
    if ((a2 - 129) < 2 || a2 == 255) {
      return 48000;
    }
    if (a2 == 256) {
      return result;
    }
  }
  else
  {
    if ((a2 - 127) < 2) {
      return result;
    }
    if (a2 == 1) {
      return 8000;
    }
    if (a2 == 2) {
      return 16000;
    }
  }
  uint64_t result = os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_10077723C();
    return 0;
  }
  return result;
}

void sub_1005292C4(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
}

uint64_t sub_1005292CC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  v19[0] = 0;
  v19[1] = 0;
  sub_10003AED0((uint64_t)v19, a1 + 760);
  if (sub_1002E9368(a2))
  {
    if (a2) {
      uint64_t v10 = sub_10027653C(a2 + 400);
    }
    else {
      uint64_t v10 = 0;
    }
    char v18 = 0;
    sub_10001B8E0(&v18);
    sub_100526150();
    sub_10001B910(&v18);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void, void))(*(void *)a1 + 264))(a1, a2, a5, 0, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 280))(a1, a2, a3);
    switch(a4)
    {
      case 1918989668:
        uint64_t v13 = qword_100A19E70;
        if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 67109120;
          int v21 = a5;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Sco route reason is kBluetoothAudioDeviceSCOEnableReasonAudioIO:%d", buf, 8u);
        }
        sub_100526274(a1, v14, a2);
        break;
      case 1919115628:
        uint64_t v15 = qword_100A19E70;
        BOOL v16 = os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT);
        if (v16)
        {
          *(_DWORD *)std::string buf = 67109120;
          int v21 = a5;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Sco route reason is kBluetoothAudioDeviceSCOEnableReasonCall:%d", buf, 8u);
        }
        sub_1005261C8(v16, v10, a2);
        break;
      case 1920364387:
        int v12 = qword_100A19E70;
        if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 67109120;
          int v21 = a5;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Sco route reason is kBluetoothAudioDeviceSCOEnableReasonVoiceCommand:%d", buf, 8u);
        }
        sub_1005263C0(a1, v10, a2);
        break;
    }
    sub_10001B8AC(&v18);
  }
  else
  {
    int v11 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Audio device is not valid, not setting sco data source", buf, 2u);
    }
  }
  return sub_10003AFB4((uint64_t)v19);
}

void sub_1005295AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005295E0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  return sub_1005292CC(a1 - 280, a2, a3, a4, a5);
}

uint64_t sub_1005295E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100512018(a1, a2);
  if (!v3) {
    return 1;
  }
  uint64_t v4 = v3;
  uint64_t v9 = 0;
  if (qword_1009F80A0 != -1) {
    dispatch_once(&qword_1009F80A0, &stru_1009B4040);
  }
  uint64_t v5 = sub_10028FEDC((uint64_t)off_1009F8098, a2, (int *)&v9 + 1, (int *)&v9);
  sub_1002E8670(v4, BYTE4(v9), v9);
  int v8 = 3;
  if (qword_1009F80A0 != -1) {
    dispatch_once(&qword_1009F80A0, &stru_1009B4040);
  }
  sub_100290170((uint64_t)off_1009F8098, a2, &v8);
  sub_1002E8680(v4, v8);
  unsigned __int8 v6 = sub_10048741C(a2);
  sub_1002E8690(v4, v6);
  return v5;
}

uint64_t sub_1005296EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100512018(a1, a2);
  if (!v3) {
    return 1;
  }
  uint64_t v4 = v3;
  unsigned __int8 v5 = sub_100487564(a2);
  sub_1002E86C0(v4, v5);
  return 0;
}

uint64_t sub_100529738(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100512018(a1, a2);
  if (!v3) {
    return 1;
  }
  uint64_t v4 = v3;
  if (qword_1009F80A0 != -1) {
    dispatch_once(&qword_1009F80A0, &stru_1009B4040);
  }
  int v5 = sub_10028FDB0((uint64_t)off_1009F8098, a2);
  sub_1002E8648(v4, v5);
  return 0;
}

uint64_t sub_1005297B4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = sub_100512018(a1, a2);
  if (!v4) {
    return 1;
  }
  sub_1002E86A0(v4, a3);
  return 0;
}

uint64_t sub_1005297F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100512018(a1, a2);
  if (!v3) {
    return 1;
  }
  uint64_t v4 = v3;
  int v5 = sub_100489494(a2);
  sub_1002E8CA0(v4, v5);
  return 0;
}

uint64_t sub_10052983C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100512018(a1, a2);
  if (!v3) {
    return 1;
  }
  uint64_t v4 = v3;
  int v5 = sub_1004877EC(a2);
  sub_1002E89FC(v4, v5);
  return 0;
}

uint64_t sub_100529888(uint64_t a1, uint64_t a2, _WORD *a3, _WORD *a4)
{
  uint64_t v4 = sub_100156EA0(a2, 8, a3, a4, 0);
  if (v4 && os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
    sub_1007772A4();
  }
  return v4;
}

unsigned char *sub_1005298E8(uint64_t a1, uint64_t a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  uint64_t v8 = sub_1005160B8(a1, *a4);
  if (v8) {
    sub_100515530(a1, v8, *a4);
  }
  char v10 = 0;
  sub_10001B8E0(&v10);
  sub_100151F80(a2, *a3, *a4);
  return sub_10001B8AC(&v10);
}

void sub_100529964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_100529978(uint64_t a1, uint64_t a2, unint64_t a3, __int16 *a4, unsigned __int16 *a5, int a6)
{
  __int16 v27 = 0;
  unsigned int v26 = 0;
  *(_DWORD *)&__src[3] = 33621253;
  *(_DWORD *)std::string __src = 84082945;
  *(_DWORD *)&void v24[3] = 0;
  *(_DWORD *)__int16 v24 = 0;
  __int16 v11 = sub_100156E90();
  sub_100152654(*a5, &v26);
  sub_1001526DC(*a5, (uint64_t)__src, 7u);
  sub_10015266C(*a5, (BOOL *)v24, 7u);
  sub_10015272C(*a5, &v27);
  if (qword_1009FB130 != -1) {
    dispatch_once(&qword_1009FB130, &stru_1009B40E0);
  }
  int v12 = sub_1002DDF8C(qword_1009FB128, a3);
  sub_100011B98(a2, 3);
  sub_100011B98(a2, 2);
  sub_10001195C(a2, 104);
  sub_100011B98(a2, 16);
  sub_100011B98(a2, 4);
  sub_1004BC500(a2, v26);
  sub_100011B98(a2, 18);
  sub_100011B98(a2, 7);
  sub_1004BC4E4(a2, __src, 7);
  sub_100011B98(a2, 19);
  sub_100011B98(a2, 7);
  sub_1004BC4E4(a2, v24, 7);
  sub_100011B98(a2, 21);
  sub_100011B98(a2, 2);
  sub_10001195C(a2, v27);
  sub_100011B98(a2, 27);
  sub_100011B98(a2, 2);
  if (v12) {
    __int16 v13 = 15;
  }
  else {
    __int16 v13 = 7;
  }
  sub_10001195C(a2, v13);
  __int16 v23 = 0;
  char v22 = 0;
  __int16 v21 = 0;
  uint64_t v14 = sub_1001DF230((unsigned __int16)*a4, &v21, &v23, &v22);
  if (v14)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
      sub_100777340();
    }
  }
  else
  {
    sub_100011B98(a2, 1);
    sub_100011B98(a2, 7);
    sub_10001195C(a2, *a4);
    sub_10001195C(a2, v21);
    sub_10001195C(a2, v23);
    sub_100011B98(a2, v22);
  }
  sub_100011B98(a2, 26);
  sub_100011B98(a2, 6);
  sub_100011B98(a2, 8);
  sub_100011B98(a2, 1);
  sub_100011B98(a2, 255);
  sub_100011B98(a2, 0);
  sub_10001195C(a2, v11);
  if (a6)
  {
    __int16 v20 = 0;
    char v19 = 0;
    __int16 v18 = 0;
    unsigned int v15 = sub_100264F24(a3 + 128);
    __int16 v16 = v15;
    uint64_t v14 = sub_1001DF230(v15, &v18, &v20, &v19);
    if (v14)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
        sub_1007772D8();
      }
    }
    else
    {
      sub_100011B98(a2, 28);
      sub_100011B98(a2, 7);
      sub_10001195C(a2, v16);
      sub_10001195C(a2, v18);
      sub_10001195C(a2, v20);
      sub_100011B98(a2, v19);
    }
  }
  return v14;
}

uint64_t sub_100529CF0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned __int16 *a5, unsigned char *a6, unsigned char *a7, unsigned char *a8)
{
  v49[0] = 0;
  v49[1] = 0;
  sub_10003AED0((uint64_t)v49, a1 + 760);
  unsigned int v9 = sub_100045F00(a2 + 8) - *(_DWORD *)(a2 + 24);
  *(_DWORD *)((char *)v48 + 3) = 0;
  v48[0] = 0;
  uint64_t v47 = 0;
  *a8 = 0;
  unsigned int v10 = v9 << 16;
  if ((int)(v9 << 16) < 1)
  {
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v35 = a3 + 128;
    do
    {
      int v12 = (char)sub_1004BC378(a2);
      if (v12 < 0)
      {
        unsigned int v13 = sub_1004BC3C8(a2);
        int v14 = HIWORD(v10) - 3;
      }
      else
      {
        unsigned int v13 = sub_1004BC378(a2);
        LOWORD(v14) = v9 - 2;
      }
      int v15 = v12 & 0x7F;
      switch(v12 & 0x7F)
      {
        case 1:
          unsigned __int16 v16 = v13 - 7;
          if (v13 < 7) {
            goto LABEL_39;
          }
          __int16 v17 = sub_1004BC3C8(a2);
          sub_1004BC3C8(a2);
          __int16 v18 = sub_1004BC3C8(a2);
          sub_1004BC378(a2);
          buf[0] = 0;
          sub_10001B8E0(buf);
          if (sub_1001DD56C(a4, (uint64_t *)&v47) || !sub_1001E6484(v47))
          {
            char v19 = qword_100A19E70;
            if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
              sub_100777374(&v45, v46, v19);
            }
          }
          else
          {
            *(_WORD *)(sub_1001E6484(v47) + 8) = v17;
            *(_WORD *)(sub_1001E6484(v47) + 32) = v18;
            sub_100246BF4(v35, a4);
          }
          sub_10001B910(buf);
          goto LABEL_49;
        case 3:
          if (v13 != 2) {
            goto LABEL_39;
          }
          sub_1004BC3C8(a2);
          goto LABEL_44;
        case 0x10:
          if (v13 != 4) {
            goto LABEL_39;
          }
          __int16 v21 = sub_1004BC430(a2);
          buf[0] = 0;
          sub_10001B8E0(buf);
          sub_10015260C(*a5, v21);
          sub_10001B910(buf);
          goto LABEL_21;
        case 0x11:
          char v22 = sub_100022FE8(v13);
          if (!v22) {
            goto LABEL_39;
          }
          sub_1004BC33C(a2, v22, v13);
          buf[0] = 0;
          sub_10001B8E0(buf);
          sub_10015213C(*a5, v22, v13);
          sub_10001B910(buf);
          sub_100023010(v22);
          goto LABEL_21;
        case 0x14:
          if (v13 != 1) {
            goto LABEL_39;
          }
          int v23 = sub_1004BC378(a2);
          buf[0] = 0;
          sub_10001B8E0(buf);
          sub_1001520D0(*a5, v23 == 1);
          sub_10001B910(buf);
LABEL_21:
          sub_10001B8AC(buf);
          goto LABEL_44;
        case 0x16:
          if (v13 != 1) {
            goto LABEL_39;
          }
          *a6 = sub_1004BC378(a2) + 1;
          goto LABEL_44;
        case 0x17:
          if (v13 != 1) {
            goto LABEL_39;
          }
          *a7 = sub_1004BC378(a2);
          goto LABEL_44;
        case 0x18:
          unsigned __int16 v16 = v13 - 7;
          if (v13 < 7) {
            goto LABEL_39;
          }
          sub_1004BC33C(a2, v48, 7uLL);
          buf[0] = 0;
          sub_10001B8E0(buf);
          sub_100152484(*a5, v48, 7u);
          sub_10001B910(buf);
LABEL_49:
          __int16 v33 = buf;
          goto LABEL_53;
        case 0x19:
          if (v13 != 1) {
            goto LABEL_39;
          }
          sub_1004BC378(a2);
          *a8 = 1;
          goto LABEL_44;
        case 0x1A:
          unsigned __int16 v16 = v13;
          if (v13 >= 6)
          {
            char v24 = sub_1004BC378(a2);
            int v25 = sub_1004BC378(a2);
            __int16 v26 = sub_1004BC378(a2);
            sub_1004BC378(a2);
            unsigned int v27 = sub_1004BC3C8(a2);
            buf[0] = 0;
            sub_10001B8E0(buf);
            uint64_t v11 = sub_10024B514(a4, v24, v27, v26, v25);
            sub_10001B910(buf);
            sub_10001B8AC(buf);
            unsigned __int16 v16 = v13 - 6;
          }
          break;
        case 0x1B:
          unsigned __int16 v16 = v13 - 8;
          if (v13 < 8) {
            goto LABEL_39;
          }
          sub_1004BC3C8(a2);
          sub_1004BC3C8(a2);
          sub_1004BC3C8(a2);
          sub_1004BC3C8(a2);
          *(_WORD *)(a3 + 576) = 257;
          break;
        case 0x1C:
          unsigned __int16 v16 = v13 - 7;
          if (v13 < 7) {
            goto LABEL_39;
          }
          __int16 v28 = sub_1004BC3C8(a2);
          sub_1004BC3C8(a2);
          __int16 v29 = sub_1004BC3C8(a2);
          sub_1004BC378(a2);
          *(void *)std::string buf = 0;
          char v44 = 0;
          sub_10001B8E0(&v44);
          unsigned int v30 = sub_100264F24(v35);
          if (sub_1001DD56C(v30, (uint64_t *)buf) || !sub_1001E6484(*(unsigned int **)buf))
          {
            char v31 = qword_100A19E70;
            if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
              sub_1007773B4(&v42, v43, v31);
            }
            uint64_t v11 = 114;
          }
          else
          {
            *(_WORD *)(sub_1001E6484(*(unsigned int **)buf) + 8) = v28;
            *(_WORD *)(sub_1001E6484(*(unsigned int **)buf) + 32) = v29;
          }
          __int16 v33 = (uint8_t *)&v44;
LABEL_53:
          sub_10001B8AC(v33);
          break;
        default:
          __int16 v20 = qword_100A19E70;
          if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v12 & 0x7F;
            _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "parseHFPDescriptor Key not recognized %d", buf, 8u);
          }
LABEL_39:
          unsigned __int16 v16 = v13;
          break;
      }
      if (v16)
      {
        uint64_t v32 = qword_100A19E70;
        if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 67109632;
          *(_DWORD *)&uint8_t buf[4] = v15;
          __int16 v51 = 1024;
          int v52 = v16;
          __int16 v53 = 1024;
          unsigned int v54 = v13;
          _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "parseHFPDescriptor Key:%d Dumped %d of %d bytes ", buf, 0x14u);
        }
        sub_1004BC490(a2, v16);
      }
LABEL_44:
      unsigned int v9 = (__int16)v14 - v13;
      unsigned int v10 = v9 << 16;
    }
    while ((int)(v9 << 16) > 0);
  }
  sub_10003AFB4((uint64_t)v49);
  return v11;
}

void sub_10052A2F4(_Unwind_Exception *a1)
{
  sub_10003AFB4(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_10052A3E0(void *a1, uint64_t a2)
{
  uint64_t v4 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a2, __p);
    if (v7 >= 0) {
      int v5 = __p;
    }
    else {
      int v5 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136446210;
    unsigned int v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Fast Connect HFP Report Connection attempt for %{public}s", buf, 0xCu);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_1004BD554(a1, a2);
}

void sub_10052A4DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v10 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    v13[0] = 67109120;
    v13[1] = a7;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Fast Connect HFP Setup Complete result %d", (uint8_t *)v13, 8u);
  }
  if (a7)
  {
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009B3FA0);
    }
    int v11 = sub_1004E2340((uint64_t)off_1009F8068, a7, 20000);
    sub_1004BD6C8(a1, a2, v11);
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B3FA0);
  }
  int v12 = sub_1004E2340((uint64_t)off_1009F8068, 0, 20000);
  sub_1004BD6C8(a1, a2, v12);
}

void sub_10052A6C0(os_unfair_lock_s *a1, void *a2)
{
  uint64_t v3 = a2;
  os_unfair_lock_lock(a1);
  int v5 = 0;
  unsigned __int8 v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }
  if (v4)
  {
    unsigned __int8 v6 = v4;
    operator delete(v4);
  }
}

void sub_10052A764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10052A78C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void, void))(*(void *)a2 + 8))(a2, *(void *)(a1 + 32), *(unsigned __int16 *)(a1 + 40), *(unsigned __int8 *)(a1 + 42));
}

uint64_t sub_10052A7C4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void, void))(*(void *)a2 + 16))(a2, *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned __int16 *)(a1 + 48));
}

uint64_t sub_10052A7F8(uint64_t a1, uint64_t (***a2)(void, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *(unsigned __int16 *)(a1 + 48);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 50);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = sub_100276944(*(void *)(a1 + 40) + 400);
  uint64_t v7 = **a2;

  return v7(a2, v5, v3, v4, v6);
}

uint64_t sub_10052A88C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = sub_100512018(a1, a2);
  uint64_t v6 = qword_100A19E70;
  if (v5)
  {
    uint64_t v7 = v5;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a2, __p);
      uint64_t v8 = (void **)__p[0];
      unsigned int v9 = "No";
      if (v12 >= 0) {
        uint64_t v8 = __p;
      }
      if (a3) {
        unsigned int v9 = "Yes";
      }
      *(_DWORD *)std::string buf = 136446466;
      int v14 = v8;
      __int16 v15 = 2082;
      unsigned __int16 v16 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "setAllowsAutoRoute: %{public}s, allows %{public}s", buf, 0x16u);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }
    sub_1002E908C(v7, a3);
    return 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
      sub_1007773F4();
    }
    return 1;
  }
}

uint64_t sub_10052A9D8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = sub_100512018(a1, a2);
  uint64_t v6 = qword_100A19E70;
  if (v5)
  {
    uint64_t v7 = v5;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a2, __p);
      uint64_t v8 = (void **)__p[0];
      unsigned int v9 = "No";
      if (v12 >= 0) {
        uint64_t v8 = __p;
      }
      if (a3) {
        unsigned int v9 = "Yes";
      }
      *(_DWORD *)std::string buf = 136446466;
      int v14 = v8;
      __int16 v15 = 2082;
      unsigned __int16 v16 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "setAudioRouteHidden: %{public}s, %{public}s", buf, 0x16u);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }
    sub_1002E9100(v7, a3);
    return 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
      sub_100777428();
    }
    return 1;
  }
}

uint64_t sub_10052AB24(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = sub_100512018(a1, a2);
  if (v4)
  {
    sub_1002E9018(v4, a3);
    return 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
      sub_10077745C();
    }
    return 1;
  }
}

uint64_t sub_10052AB88(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = sub_100512018(a1, a2);
  uint64_t v5 = qword_100A19E70;
  if (v4)
  {
    uint64_t v6 = v4;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = "No";
      if (a3) {
        uint64_t v7 = "Yes";
      }
      int v9 = 136315138;
      unsigned int v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Smart Route: [HFP] Tipi Connection status : %s", (uint8_t *)&v9, 0xCu);
    }
    sub_1002E8308(v6, a3);
    return 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
      sub_100777490();
    }
    return 1;
  }
}

void sub_10052AC8C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = sub_100512018(a1, a2);
  if (v5)
  {
    uint64_t v6 = v5;
    if ((a3 - 1) > 4) {
      int v7 = 0;
    }
    else {
      int v7 = dword_1007BF620[a3 - 1];
    }
    uint64_t v8 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a2, __p);
      if (v13 >= 0) {
        int v9 = __p;
      }
      else {
        int v9 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 67109634;
      int v15 = a3;
      __int16 v16 = 1024;
      int v17 = v7;
      __int16 v18 = 2082;
      char v19 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "User selected device type is %d. Setting category as %d for device %{public}s.", buf, 0x18u);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    sub_1005D114C(v6, v7);
    int v11 = sub_100514160(v10, a2);
    sub_1005D0EF4(v6, v11);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
  {
    sub_1007774C4();
  }
}

void sub_10052AE00(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v8 = sub_1004AFA9C();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_10052AE98;
  _OWORD v9[3] = &unk_1009988A0;
  void v9[4] = a1;
  void v9[5] = a3;
  char v10 = a4;
  char v11 = a2;
  sub_100013018(v8, v9);
}

void sub_10052AE98(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unsigned int v3 = sub_100516194(v2, *(void *)(a1 + 40));
  uint64_t v4 = sub_100511724(v2, v3);
  if (v4)
  {
    uint64_t v5 = (uint64_t)v4;
    uint64_t v6 = (uint64_t)(v4 + 50);
    int v23 = sub_100276564((uint64_t)(v4 + 50));
    uint64_t v7 = sub_10027653C(v6);
    int v8 = sub_100276944(v6);
    int v9 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(v7, __p);
      uint64_t v20 = v7;
      if (v22 >= 0) {
        char v10 = __p;
      }
      else {
        char v10 = (void **)__p[0];
      }
      char v11 = sub_1003528A0(*(unsigned __int8 *)(a1 + 48));
      int v12 = *(unsigned __int8 *)(a1 + 49);
      char v13 = sub_1002755F4(&v23);
      *(_DWORD *)std::string buf = 136447234;
      int v25 = v10;
      __int16 v26 = 2080;
      unsigned int v27 = v11;
      __int16 v28 = 1024;
      int v29 = v12;
      __int16 v30 = 2080;
      char v31 = v13;
      __int16 v32 = 1024;
      int v33 = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "advancedSniffModeChanged - device:%{public}s mode:\"%s\" status:%d audioState:\"%s\" isInAdvancedSniff:%d", buf, 0x2Cu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v7 = v20;
    }
    int v14 = *(unsigned __int8 *)(a1 + 48);
    BOOL v15 = v14 == 240;
    if (v14 == 240) {
      char v16 = v8;
    }
    else {
      char v16 = 0;
    }
    if ((v16 & 1) == 0)
    {
      char v17 = v15;
      sub_10027693C(v6, v17);
      if (v23 != 1) {
        goto LABEL_24;
      }
      if (*(unsigned char *)(a1 + 49))
      {
        sub_10052B144(v2, v5);
        return;
      }
      if (*(unsigned __int8 *)(a1 + 48) != 240
        || (uint64_t v18 = sub_10027695C(v6),
            sub_10052B300(v18, *(void *)(a1 + 40)),
            buf[0] = 0,
            sub_10001B8E0(buf),
            sub_1001517F4(v3),
            sub_10001B8AC(buf),
            v23 == 1))
      {
        int v19 = 3;
      }
      else
      {
LABEL_24:
        int v19 = 1;
      }
      if (qword_1009F80B0 != -1) {
        dispatch_once(&qword_1009F80B0, &stru_1009B4060);
      }
      sub_100573DAC((uint64_t)off_1009F80A8, v7, v19);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
  {
    sub_1007774F8();
  }
}

void sub_10052B110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
}

void sub_10052B144(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 400;
  sub_10027694C(a2 + 400);
  int v5 = sub_100276964(v4);
  uint64_t v6 = sub_10027653C(v4);
  uint64_t v7 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(v6, __p);
    int v8 = v13 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446466;
    BOOL v15 = v8;
    __int16 v16 = 1024;
    int v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "retryHandsfreeAoSCall - device:%{public}s handsfreeAoSRetryCount:%d", buf, 0x12u);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
  if (v5 == 2)
  {
    sub_1005D0DE4(a2, 0, 114);
    sub_10027656C(v4, 0);
    int v9 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_FAULT)) {
      sub_100777564(v9);
    }
  }
  else
  {
    uint64_t v10 = sub_1004AFA9C();
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    _DWORD v11[2] = sub_10052B440;
    v11[3] = &unk_100998260;
    void v11[4] = a1;
    void v11[5] = v6;
    sub_1004AFF58(v10, 250, v11);
  }
}

unsigned char *sub_10052B300(uint64_t a1, uint64_t a2)
{
  char v7 = 0;
  sub_10001B8E0(&v7);
  unsigned int v3 = (unsigned __int16 *)sub_100197A30(a2);
  sub_10001B910(&v7);
  uint64_t v4 = *v3;
  uint64_t v5 = sub_10003FB34();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 1568))(v5, v4, 1, 1);
  return sub_10001B8AC(&v7);
}

void sub_10052B390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_10052B3A8(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v7 = a1 - 296;
  uint64_t v8 = sub_1004AFA9C();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_10052AE98;
  _OWORD v9[3] = &unk_1009988A0;
  void v9[4] = v7;
  void v9[5] = a3;
  char v10 = a4;
  char v11 = a2;
  sub_100013018(v8, v9);
}

uint64_t sub_10052B440(uint64_t a1)
{
  return sub_1005230E0(*(void *)(a1 + 32), *(void *)(a1 + 40));
}

uint64_t sub_10052B44C(uint64_t a1)
{
  *(void *)a1 = off_1009B38F8;
  *(void *)(a1 + 256) = off_1009B3A88;
  *(void *)(a1 + 264) = off_1009B3AC8;
  *(void *)(a1 + 272) = &off_1009B3AF8;
  *(void *)(a1 + 28sub_1004C2140(qword_100A19B68, 0) = off_1009B3B10;
  *(void *)(a1 + 288) = &off_1009B3BA8;
  *(void *)(a1 + 296) = off_1009B3BD0;
  *(void *)(a1 + 304) = off_1009B3C38;
  *(void *)(a1 + 312) = off_1009B3C78;
  *(void *)(a1 + 32sub_1004C2140(qword_100A19B68, 0) = &off_1009B3CA8;
  sub_1000486F0(a1 + 824, *(void **)(a1 + 832));
  sub_100052DA4(a1 + 760);
  sub_100275590(a1 + 360);
  uint64_t v2 = *(void **)(a1 + 336);
  if (v2)
  {
    *(void *)(a1 + 344) = v2;
    operator delete(v2);
  }

  return sub_100283DC8(a1);
}

void sub_10052B5E8(uint64_t a1)
{
  *(void *)a1 = off_1009B38F8;
  *(void *)(a1 + 256) = off_1009B3A88;
  *(void *)(a1 + 264) = off_1009B3AC8;
  *(void *)(a1 + 272) = &off_1009B3AF8;
  *(void *)(a1 + 28sub_1004C2140(qword_100A19B68, 0) = off_1009B3B10;
  *(void *)(a1 + 288) = &off_1009B3BA8;
  *(void *)(a1 + 296) = off_1009B3BD0;
  *(void *)(a1 + 304) = off_1009B3C38;
  *(void *)(a1 + 312) = off_1009B3C78;
  *(void *)(a1 + 32sub_1004C2140(qword_100A19B68, 0) = &off_1009B3CA8;
  sub_1000486F0(a1 + 824, *(void **)(a1 + 832));
  sub_100052DA4(a1 + 760);
  sub_100275590(a1 + 360);
  uint64_t v2 = *(void **)(a1 + 336);
  if (v2)
  {
    *(void *)(a1 + 344) = v2;
    operator delete(v2);
  }
  sub_100283DC8(a1);

  operator delete();
}

uint64_t sub_10052B7EC(uint64_t a1)
{
  uint64_t v2 = a1 - 304;
  *(void *)(a1 - 304) = off_1009B38F8;
  *(void *)(a1 - 48) = off_1009B3A88;
  *(void *)(a1 - 4sub_1004C2140(qword_100A19B68, 0) = off_1009B3AC8;
  *(void *)(a1 - 32) = &off_1009B3AF8;
  *(void *)(a1 - 24) = off_1009B3B10;
  *(void *)(a1 - 16) = &off_1009B3BA8;
  *(void *)(a1 - 8) = off_1009B3BD0;
  *(void *)a1 = off_1009B3C38;
  *(void *)(a1 + 8) = off_1009B3C78;
  *(void *)(a1 + 16) = &off_1009B3CA8;
  sub_1000486F0(a1 + 520, *(void **)(a1 + 528));
  sub_100052DA4(a1 + 456);
  sub_100275590(a1 + 56);
  unsigned int v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(void *)(a1 + 4sub_1004C2140(qword_100A19B68, 0) = v3;
    operator delete(v3);
  }

  return sub_100283DC8(v2);
}

void sub_10052B988(uint64_t a1)
{
}

void sub_10052B99C(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    uint64_t v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  uint64_t v6 = *(char **)(a1 + 8);
  while (*(void *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      uint64_t v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      uint64_t v7 = a2;
      sub_10052BA6C(a1 + 8, v6, (char *)&v7);
      sub_100061554(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(void, uint64_t))(a1 + 32))(*(void *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_10052BA6C(uint64_t a1, char *__src, char *a3)
{
  unsigned int v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    char v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      int v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      int v19 = 0;
    }
    uint64_t v20 = &v19[8 * v16];
    long long __p = v19;
    unsigned int v27 = v20;
    __int16 v28 = v20;
    int v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        int v23 = (char *)sub_1000405F8(v8, v22);
        uint64_t v20 = &v23[8 * (v22 >> 2)];
        long long __p = v23;
        unsigned int v27 = v20;
        int v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        unsigned int v27 = v20;
      }
    }
    *(void *)uint64_t v20 = *(void *)v3;
    __int16 v28 = v20 + 8;
    uint64_t v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)std::string __src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    int v9 = __src + 8;
    char v10 = v6 - 8;
    char v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_10052BC74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10052BCAC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = off_1009B3DB0;
  sub_10061FA28(a1 + 16);
  *(void *)(a1 + 4sub_1004C2140(qword_100A19B68, 0) = v4;
  return a1;
}

void sub_10052BD18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10052BD28(uint64_t a1)
{
  *(void *)a1 = off_1009B3DB0;

  unsigned int v3 = (void **)(a1 + 16);
  sub_10027696C(&v3);
  return a1;
}

void sub_10052BD88(uint64_t a1)
{
  *(void *)a1 = off_1009B3DB0;

  uint64_t v2 = (void **)(a1 + 16);
  sub_10027696C(&v2);
  operator delete();
}

void sub_10052BDFC(uint64_t a1)
{
  if (qword_1009FB058 != -1) {
    dispatch_once(&qword_1009FB058, &stru_1009B3FC0);
  }
  uint64_t v2 = off_1009FB050;
  unsigned int v3 = *(void **)(a1 + 40);

  sub_10051944C((uint64_t)v2, (uint64_t *)(a1 + 16), v3);
}

void sub_10052BE64(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v5 = *(char **)(a1 + 8);
  id v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 != v4)
  {
    int64_t v6 = v4 - (v5 + 8);
    if (v4 != v5 + 8) {
      memmove(v5, v5 + 8, v4 - (v5 + 8));
    }
    *(void *)(a1 + 16) = &v5[v6];
    sub_100061554(a1 + 8);
    if (*(void *)(a1 + 8) == *(void *)(a1 + 16)) {
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 32) + 8))(*(void *)(a1 + 32), a1);
    }
  }

  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_10052BF3C(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  LOBYTE(v3) = *(unsigned char *)(a1 + 50);
  if (qword_1009FB058 != -1) {
    dispatch_once(&qword_1009FB058, &stru_1009B3FC0);
  }
  sub_100510FC0((os_unfair_lock_s *)off_1009FB050, *(unsigned __int16 *)(a1 + 48), *(unsigned __int8 *)(a1 + 51), a1 + 32, (uint64_t)&v2);
}

uint64_t sub_10052BFB8(uint64_t a1, long long *a2)
{
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = off_1009B3E18;
  *(void *)(a1 + 16) = 0;
  id v4 = malloc_type_malloc(0x18uLL, 0x10320400E551A55uLL);
  *(void *)(a1 + 16) = v4;
  if (v4)
  {
    long long v5 = *a2;
    void v4[2] = *((void *)a2 + 2);
    *(_OWORD *)id v4 = v5;
    int v6 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 < 2u)
    {
      *(void *)(*(void *)(a1 + 16) + 8) = malloc_type_malloc(6uLL, 0x1000040274DC3F3uLL);
      uint64_t v12 = *(void *)(*(void *)(a1 + 16) + 8);
      uint64_t v13 = *((void *)a2 + 1);
      __int16 v14 = *(_WORD *)(v13 + 4);
      *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
      *(_WORD *)(v12 + 4) = v14;
    }
    else
    {
      if (v6 == 7)
      {
        *(void *)(*(void *)(a1 + 16) + 8) = malloc_type_malloc(*((unsigned __int16 *)a2 + 8), 0xB5B7E338uLL);
        char v10 = *(void **)(*(void *)(a1 + 16) + 8);
        char v11 = (const char *)*((void *)a2 + 1);
        size_t v9 = *((unsigned __int16 *)a2 + 8);
        goto LABEL_9;
      }
      if (v6 == 10)
      {
        size_t v7 = strlen(*((const char **)a2 + 1));
        *(void *)(*(void *)(a1 + 16) + 8) = malloc_type_malloc(v7 + 1, 0x95034959uLL);
        uint64_t v8 = (const char *)*((void *)a2 + 1);
        size_t v9 = strlen(v8) + 1;
        char v10 = *(void **)(*(void *)(a1 + 16) + 8);
        char v11 = v8;
LABEL_9:
        memmove(v10, v11, v9);
      }
    }
  }
  else
  {
    char v16 = 0;
    sub_10001B8E0(&v16);
    sub_10014FCB0(*((unsigned __int16 *)a2 + 2), 2701);
    sub_10001B8AC(&v16);
  }
  return a1;
}

void sub_10052C138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_10052C150(uint64_t a1)
{
  sub_10052C1EC(a1);

  operator delete();
}

uint64_t sub_10052C188(uint64_t a1)
{
  if (qword_1009FB058 != -1) {
    dispatch_once(&qword_1009FB058, &stru_1009B3FC0);
  }
  uint64_t v2 = off_1009FB050;
  uint64_t v3 = *(void *)(a1 + 16);

  return sub_10051A3CC(v2, v3);
}

uint64_t sub_10052C1EC(uint64_t a1)
{
  *(void *)a1 = off_1009B3E18;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    if (*(_DWORD *)v2 <= 0xAu && ((1 << *(_DWORD *)v2) & 0x483) != 0) {
      free(*(void **)(v2 + 8));
    }
    free(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t sub_10052C264(uint64_t a1, __int16 a2, uint64_t a3)
{
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = off_1009B3E50;
  *(_WORD *)(a1 + 1sub_1004C2140(qword_100A19B68, 0) = a2;
  *(void *)(a1 + 16) = 0;
  uint64_t v5 = a1 + 16;
  int v6 = malloc_type_malloc(0x28uLL, 0x103004048DB3EE6uLL);
  *(void *)uint64_t v5 = v6;
  *(_DWORD *)int v6 = *(_DWORD *)a3;
  v6[8] = *(_WORD *)(a3 + 16);
  size_t v7 = strlen(*(const char **)(a3 + 8));
  uint64_t v8 = (char *)malloc_type_malloc(v7 + 1, 0x417B56F7uLL);
  *(void *)(*(void *)v5 + 8) = v8;
  if (!v8)
  {
    size_t v9 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_FAULT))
    {
      size_t v17 = strlen(*(const char **)(a3 + 8));
      *(_DWORD *)int v19 = 134217984;
      *(void *)&v19[4] = v17 + 1;
      _os_log_fault_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Could not allocate %lu bytes", v19, 0xCu);
      uint64_t v8 = *(char **)(*(void *)v5 + 8);
    }
    else
    {
      uint64_t v8 = 0;
    }
  }
  size_t v10 = strlen(*(const char **)(a3 + 8));
  strlcpy(v8, *(const char **)(a3 + 8), v10 + 1);
  char v11 = malloc_type_malloc(0x18uLL, 0x10900404FFA3EDEuLL);
  *(void *)(*(void *)v5 + 32) = v11;
  if (!v11)
  {
    sub_1007775E4(v5, v19);
    char v11 = *(void **)v19;
  }
  uint64_t v12 = *(long long **)(a3 + 32);
  long long v13 = *v12;
  _DWORD v11[2] = *((void *)v12 + 2);
  *(_OWORD *)char v11 = v13;
  __int16 v14 = malloc_type_malloc(*(unsigned __int16 *)(*(void *)(a3 + 32) + 18), 0x1B1BF935uLL);
  *(void *)(*(void *)(*(void *)v5 + 32) + 8) = v14;
  if (!v14)
  {
    uint64_t v15 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_FAULT))
    {
      int v18 = *(unsigned __int16 *)(*(void *)(a3 + 32) + 18);
      *(_DWORD *)int v19 = 67109120;
      *(_DWORD *)&v19[4] = v18;
      _os_log_fault_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "Could not allocate %d bytes", v19, 8u);
      __int16 v14 = *(void **)(*(void *)(*(void *)v5 + 32) + 8);
    }
    else
    {
      __int16 v14 = 0;
    }
  }
  memcpy(v14, *(const void **)(*(void *)(a3 + 32) + 8), *(unsigned __int16 *)(*(void *)(a3 + 32) + 18));
  *(void *)(*(void *)(a1 + 16) + 24) = *(void *)(*(void *)(*(void *)(a1 + 16) + 32) + 8)
                                           + *(void *)(a3 + 24)
                                           - *(void *)(*(void *)(a3 + 32) + 8);
  return a1;
}

void sub_10052C4EC(uint64_t a1)
{
  sub_10052C58C(a1);

  operator delete();
}

unsigned char *sub_10052C524(uint64_t a1)
{
  if (qword_1009FB058 != -1) {
    dispatch_once(&qword_1009FB058, &stru_1009B3FC0);
  }
  uint64_t v2 = off_1009FB050;
  int v3 = *(unsigned __int16 *)(a1 + 10);

  return sub_10051F854((uint64_t)v2, v3);
}

uint64_t sub_10052C58C(uint64_t a1)
{
  *(void *)a1 = off_1009B3E50;
  free(*(void **)(*(void *)(a1 + 16) + 8));
  free(*(void **)(*(void *)(*(void *)(a1 + 16) + 32) + 8));
  free(*(void **)(*(void *)(a1 + 16) + 32));
  free(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_10052C5FC(uint64_t a1)
{
  if (qword_1009FB058 != -1) {
    dispatch_once(&qword_1009FB058, &stru_1009B3FC0);
  }
  uint64_t v2 = off_1009FB050;
  *(_WORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v2;
  *(void *)a1 = off_1009B3E88;
  return a1;
}

void sub_10052C67C()
{
}

void *sub_10052C690(void *result)
{
  if (*(_DWORD *)(result[3] + 80) == 1) {
    return (void *)(*(uint64_t (**)(void))(*result + 40))();
  }
  return result;
}

uint64_t sub_10052C6C8(uint64_t a1, uint64_t a2)
{
  return sub_100525238(a2);
}

uint64_t sub_10052C6D0(uint64_t a1, __int16 a2, char a3)
{
  if (qword_1009FB058 != -1) {
    dispatch_once(&qword_1009FB058, &stru_1009B3FC0);
  }
  int v6 = off_1009FB050;
  *(_WORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v6;
  *(void *)a1 = off_1009B3EC8;
  *(_WORD *)(a1 + 32) = a2;
  *(unsigned char *)(a1 + 34) = a3;
  return a1;
}

void sub_10052C768()
{
}

uint64_t sub_10052C77C(uint64_t a1, uint64_t a2)
{
  return sub_100515934(a2, *(unsigned __int16 *)(a1 + 32), *(unsigned __int8 *)(a1 + 34));
}

void sub_10052C790(uint64_t a1)
{
  if (qword_1009FB058 != -1) {
    dispatch_once(&qword_1009FB058, &stru_1009B3FC0);
  }
  uint64_t v2 = off_1009FB050;
  unsigned int v3 = *(unsigned __int16 *)(a1 + 40);
  int v4 = *(_DWORD *)(a1 + 32);
  int v5 = *(_DWORD *)(a1 + 36);

  sub_100522C6C((uint64_t)v2, v4, v3, v5);
}

void sub_10052C800()
{
}

uint64_t sub_10052C814()
{
  if (qword_1009FB058 != -1) {
    dispatch_once(&qword_1009FB058, &stru_1009B3FC0);
  }
  uint64_t v0 = off_1009FB050;

  return sub_1005269C4((uint64_t)v0, 0);
}

void sub_10052C86C()
{
  uint64_t v0 = sub_1004AFA9C();

  sub_100013018(v0, &stru_1009B3F30);
}

void sub_10052C89C(uint64_t a1, char a2, const void *a3, unsigned int a4, uint64_t a5, uint64_t *a6)
{
  int v18 = 0;
  int v19 = 0;
  sub_1000335D8(&v18, a3, a4);
  LOWORD(a1) = sub_100156D1C(a1);
  char v9 = *((unsigned char *)a6 + 8);
  uint64_t v10 = *a6;
  uint64_t v11 = sub_1004AFA9C();
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3321888768;
  void v12[2] = sub_10052CC0C;
  _OWORD v12[3] = &unk_1009B3F50;
  char v16 = v9;
  __int16 v15 = a1;
  char v17 = a2;
  uint8_t v12[4] = v10;
  long long v13 = &off_100998428;
  __int16 v14 = v19;
  if (v19) {
    sub_100037354((uint64_t)v19);
  }
  sub_100013018(v11, v12);
  long long v13 = &off_100998428;
  if (v14) {
    sub_1000368F4(v14);
  }
  int v18 = &off_100998428;
  if (v19) {
    sub_1000368F4(v19);
  }
}

void sub_10052C9DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, atomic_uint *a15, uint64_t a16, uint64_t a17, atomic_uint *a18)
{
  if (a15) {
    sub_1000368F4(a15);
  }
  if (a18) {
    sub_1000368F4(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_10052CA34()
{
  uint64_t v0 = sub_1004AFA9C();

  sub_100013018(v0, &stru_1009B3F80);
}

void sub_10052CA64(uint64_t a1, __int16 a2)
{
  __int16 v3 = sub_100156D1C(a1);
  uint64_t v4 = sub_1004AFA9C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_10052CD3C;
  uint64_t v5[3] = &unk_100998300;
  __int16 v6 = v3;
  __int16 v7 = a2;
  sub_100013018(v4, v5);
}

void sub_10052CAEC(int a1, uint64_t a2, char a3, char a4, __int16 a5, __int16 a6, char a7)
{
  __int16 v14 = sub_100156D1C(a2);
  uint64_t v15 = sub_1004AFA9C();
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  void v16[2] = sub_10052CD9C;
  v16[3] = &unk_1009A28D8;
  int v17 = a1;
  __int16 v18 = v14;
  v16[4] = a2;
  char v21 = a3;
  char v22 = a4;
  __int16 v19 = a5;
  __int16 v20 = a6;
  char v23 = a7;
  sub_100013018(v15, v16);
}

void sub_10052CBC0(id a1)
{
  if (qword_1009FB058 != -1) {
    dispatch_once(&qword_1009FB058, &stru_1009B3FC0);
  }

  sub_100510F58();
}

void sub_10052CC0C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = 0;
  LOBYTE(v3) = *(unsigned char *)(a1 + 58);
  if (qword_1009FB058 != -1) {
    dispatch_once(&qword_1009FB058, &stru_1009B3FC0);
  }
  sub_100510FC0((os_unfair_lock_s *)off_1009FB050, *(unsigned __int16 *)(a1 + 56), *(unsigned __int8 *)(a1 + 59), a1 + 40, (uint64_t)&v2);
}

void sub_10052CC8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 4sub_1004C2140(qword_100A19B68, 0) = &off_100998428;
  *(void *)(a1 + 48) = v3;
  if (v3) {
    sub_100037354(v3);
  }
}

void sub_10052CCC0(uint64_t a1)
{
  *(void *)(a1 + 4sub_1004C2140(qword_100A19B68, 0) = &off_100998428;
  uint64_t v1 = *(atomic_uint **)(a1 + 48);
  if (v1) {
    sub_1000368F4(v1);
  }
}

void sub_10052CCF0(id a1)
{
  if (qword_1009FB058 != -1) {
    dispatch_once(&qword_1009FB058, &stru_1009B3FC0);
  }

  sub_100511B48();
}

void sub_10052CD3C(uint64_t a1)
{
  if (qword_1009FB058 != -1) {
    dispatch_once(&qword_1009FB058, &stru_1009B3FC0);
  }
  int v2 = *(unsigned __int16 *)(a1 + 34);

  sub_100511BB0(a1, 0, v2);
}

uint64_t sub_10052CD9C(uint64_t a1)
{
  if (qword_1009FB058 != -1) {
    dispatch_once(&qword_1009FB058, &stru_1009B3FC0);
  }
  return sub_100511C54((uint64_t)off_1009FB050, *(_DWORD *)(a1 + 40), *(unsigned __int16 *)(a1 + 44), *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 50), *(unsigned __int8 *)(a1 + 51), *(unsigned __int16 *)(a1 + 46), *(unsigned __int16 *)(a1 + 48), *(unsigned char *)(a1 + 52));
}

void sub_10052CE1C(id a1)
{
}

void sub_10052CE60()
{
}

void sub_10052CE84(id a1)
{
}

void sub_10052CEC8()
{
}

void sub_10052CEEC(id a1)
{
}

void sub_10052CF30()
{
}

void sub_10052CF54(id a1)
{
}

void sub_10052CF98()
{
}

void sub_10052CFBC(id a1)
{
}

void sub_10052D000()
{
}

void sub_10052D024(id a1)
{
}

void sub_10052D068()
{
}

void sub_10052D08C(id a1)
{
}

void sub_10052D0D0()
{
}

void sub_10052D0F4(id a1)
{
}

void sub_10052D138()
{
}

void sub_10052D15C(id a1)
{
}

void sub_10052D1A0()
{
}

void sub_10052D1C4(id a1)
{
}

void sub_10052D208()
{
}

void sub_10052D22C(id a1)
{
}

void sub_10052D270()
{
}

void sub_10052D294(id a1)
{
}

void sub_10052D2D8()
{
}

void sub_10052D2FC(id a1)
{
}

void sub_10052D340()
{
}

void sub_10052D364(id a1)
{
}

void sub_10052D4F4()
{
}

void sub_10052D518(id a1)
{
}

void sub_10052D55C()
{
}

unsigned char *sub_10052D580(unsigned char *a1, unsigned __int16 a2, uint64_t a3)
{
  uint64_t result = (unsigned char *)sub_100276604(a3 + 400);
  if (result)
  {
    if (qword_1009FB058 != -1) {
      dispatch_once(&qword_1009FB058, &stru_1009B3FC0);
    }
    uint64_t v6 = sub_1005160B8((uint64_t)off_1009FB050, a2);
    __int16 v7 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      if (*a1) {
        uint64_t v8 = "call active";
      }
      else {
        uint64_t v8 = "no call active";
      }
      if (v6)
      {
        sub_100474E18(v6, __p);
        if (v12 >= 0) {
          char v9 = __p;
        }
        else {
          char v9 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136446466;
        __int16 v14 = v8;
        __int16 v15 = 2082;
        char v16 = (const char *)v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Sending call status \"%{public}s\" to device %{public}s", buf, 0x16u);
        if (v12 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        *(_DWORD *)std::string buf = 136446466;
        __int16 v14 = v8;
        __int16 v15 = 2082;
        char v16 = "NULL";
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Sending call status \"%{public}s\" to device %{public}s", buf, 0x16u);
      }
    }
    LOBYTE(__p[0]) = 0;
    sub_10001B8E0(__p);
    int v10 = sub_100150184(a2, *a1);
    sub_10001B910(__p);
    if (v10)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
        sub_1007776A0();
      }
    }
    return sub_10001B8AC(__p);
  }
  return result;
}

void sub_10052D780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t *sub_10052D79C(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_10052D7F4(a1, *(unsigned __int16 **)a2, (unsigned __int16 *)(a2 + 8));
  return a1;
}

void sub_10052D7DC(_Unwind_Exception *a1)
{
  sub_1000486F0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_10052D7F4(uint64_t *result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    int v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = sub_10052D880(v5, v6, v4 + 16, (_OWORD *)v4 + 2);
      __int16 v7 = (unsigned __int16 *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          __int16 v7 = *(unsigned __int16 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (unsigned __int16 *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_10052D880(uint64_t **a1, uint64_t *a2, unsigned __int16 *a3, _OWORD *a4)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v6 = sub_10052D90C(a1, a2, &v11, &v10, a3);
  __int16 v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    __int16 v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    sub_100036CA0(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_10052D90C(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned __int16 *a5)
{
  int v5 = a1 + 1;
  if (a1 + 1 == a2 || (unsigned int v6 = *a5, v7 = *((unsigned __int16 *)a2 + 16), v6 < v7))
  {
    uint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      long long v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        long long v13 = v10;
      }
      while (v14);
    }
    unsigned int v15 = *a5;
    if (*((unsigned __int16 *)v10 + 16) < v15) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          int v17 = (uint64_t *)v16;
          unsigned int v18 = *(unsigned __int16 *)(v16 + 32);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          int v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        int v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      int v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    char v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      char v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    __int16 v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      __int16 v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((unsigned __int16 *)a4 + 16))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          char v21 = (uint64_t *)v20;
          unsigned int v22 = *(unsigned __int16 *)(v20 + 32);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          int v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        int v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      char v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void sub_10052DAB4(unsigned __int8 *a1, unsigned __int16 a2, uint64_t a3)
{
  uint64_t v5 = a3 + 400;
  int v6 = sub_1002765C4(a3 + 400);
  if (sub_100276604(v5))
  {
    if (qword_1009FB058 != -1) {
      dispatch_once(&qword_1009FB058, &stru_1009B3FC0);
    }
    uint64_t v7 = sub_1005160B8((uint64_t)off_1009FB050, a2);
    if (v6)
    {
      uint64_t v8 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        int v22 = a1[1];
        BOOL v9 = v23;
        sub_100275594(&v22, v23);
        if (v24 < 0) {
          BOOL v9 = (void **)v23[0];
        }
        if (v7)
        {
          sub_100474E18(v7, __p);
          if (v21 >= 0) {
            uint64_t v10 = __p;
          }
          else {
            uint64_t v10 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136446466;
          __int16 v26 = v9;
          __int16 v27 = 2082;
          __int16 v28 = (const char *)v10;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Sending call held status \"%{public}s\" to device %{public}s", buf, 0x16u);
          if (v21 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          *(_DWORD *)std::string buf = 136446466;
          __int16 v26 = v9;
          __int16 v27 = 2082;
          __int16 v28 = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Sending call held status \"%{public}s\" to device %{public}s", buf, 0x16u);
        }
        if (v24 < 0) {
          operator delete(v23[0]);
        }
      }
      char v19 = 0;
      sub_10001B8E0(&v19);
      int v14 = sub_10015043C(a2, a1[1]);
      if (!v14)
      {
        unsigned int v15 = qword_100A19E70;
        if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
        {
          int v22 = *a1;
          uint64_t v16 = v23;
          sub_1002755C4(&v22, v23);
          if (v24 < 0) {
            uint64_t v16 = (void **)v23[0];
          }
          if (v7)
          {
            sub_100474E18(v7, __p);
            if (v21 >= 0) {
              int v17 = __p;
            }
            else {
              int v17 = (void **)__p[0];
            }
            *(_DWORD *)std::string buf = 136446466;
            __int16 v26 = v16;
            __int16 v27 = 2082;
            __int16 v28 = (const char *)v17;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Sending call setup \"%{public}s\" to device %{public}s", buf, 0x16u);
            if (v21 < 0) {
              operator delete(__p[0]);
            }
          }
          else
          {
            *(_DWORD *)std::string buf = 136446466;
            __int16 v26 = v16;
            __int16 v27 = 2082;
            __int16 v28 = "NULL";
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Sending call setup \"%{public}s\" to device %{public}s", buf, 0x16u);
          }
          if (v24 < 0) {
            operator delete(v23[0]);
          }
        }
        int v14 = sub_1001502AC(a2, *a1);
      }
      unsigned int v18 = (void **)&v19;
    }
    else
    {
      if (!a1[2]) {
        return;
      }
      uint64_t v11 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        int v22 = *a1;
        char v12 = v23;
        sub_1002755C4(&v22, v23);
        if (v24 < 0) {
          char v12 = (void **)v23[0];
        }
        if (v7)
        {
          sub_100474E18(v7, __p);
          if (v21 >= 0) {
            long long v13 = __p;
          }
          else {
            long long v13 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136446466;
          __int16 v26 = v12;
          __int16 v27 = 2082;
          __int16 v28 = (const char *)v13;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Sending call setup \"%{public}s\" to device %{public}s", buf, 0x16u);
          if (v21 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          *(_DWORD *)std::string buf = 136446466;
          __int16 v26 = v12;
          __int16 v27 = 2082;
          __int16 v28 = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Sending call setup \"%{public}s\" to device %{public}s", buf, 0x16u);
        }
        if (v24 < 0) {
          operator delete(v23[0]);
        }
      }
      LOBYTE(v23[0]) = 0;
      sub_10001B8E0(v23);
      int v14 = sub_1001502AC(a2, *a1);
      unsigned int v18 = v23;
    }
    sub_10001B8AC(v18);
    if (v14)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
        sub_100777708();
      }
    }
  }
}

void sub_10052DF44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_10001B8AC(&a12);
  _Unwind_Resume(a1);
}

void sub_10052DFA4(unsigned __int8 *a1, unsigned __int16 a2, uint64_t a3)
{
  uint64_t v5 = a3 + 400;
  int v6 = sub_1002765C4(a3 + 400);
  if (sub_100276604(v5))
  {
    if (qword_1009FB058 != -1) {
      dispatch_once(&qword_1009FB058, &stru_1009B3FC0);
    }
    uint64_t v7 = sub_1005160B8((uint64_t)off_1009FB050, a2);
    if (v6)
    {
      uint64_t v8 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        int v22 = *a1;
        BOOL v9 = v23;
        sub_1002755C4(&v22, v23);
        if (v24 < 0) {
          BOOL v9 = (void **)v23[0];
        }
        if (v7)
        {
          sub_100474E18(v7, __p);
          if (v21 >= 0) {
            uint64_t v10 = __p;
          }
          else {
            uint64_t v10 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136446466;
          __int16 v26 = v9;
          __int16 v27 = 2082;
          __int16 v28 = (const char *)v10;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Sending call setup \"%{public}s\" to device %{public}s", buf, 0x16u);
          if (v21 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          *(_DWORD *)std::string buf = 136446466;
          __int16 v26 = v9;
          __int16 v27 = 2082;
          __int16 v28 = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Sending call setup \"%{public}s\" to device %{public}s", buf, 0x16u);
        }
        if (v24 < 0) {
          operator delete(v23[0]);
        }
      }
      if (a1[2] && a1[1] != 1)
      {
        LOBYTE(v23[0]) = 0;
        sub_10001B8E0(v23);
        if (sub_1001502AC(a2, 1u) && os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
          sub_100777708();
        }
        sub_10001B8AC(v23);
      }
      char v19 = 0;
      sub_10001B8E0(&v19);
      int v14 = sub_1001502AC(a2, *a1);
      if (!v14)
      {
        unsigned int v15 = qword_100A19E70;
        if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
        {
          int v22 = a1[1];
          uint64_t v16 = v23;
          sub_100275594(&v22, v23);
          if (v24 < 0) {
            uint64_t v16 = (void **)v23[0];
          }
          if (v7)
          {
            sub_100474E18(v7, __p);
            if (v21 >= 0) {
              int v17 = __p;
            }
            else {
              int v17 = (void **)__p[0];
            }
            *(_DWORD *)std::string buf = 136446466;
            __int16 v26 = v16;
            __int16 v27 = 2082;
            __int16 v28 = (const char *)v17;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Sending call held status \"%{public}s\" to device %{public}s", buf, 0x16u);
            if (v21 < 0) {
              operator delete(__p[0]);
            }
          }
          else
          {
            *(_DWORD *)std::string buf = 136446466;
            __int16 v26 = v16;
            __int16 v27 = 2082;
            __int16 v28 = "NULL";
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Sending call held status \"%{public}s\" to device %{public}s", buf, 0x16u);
          }
          if (v24 < 0) {
            operator delete(v23[0]);
          }
        }
        int v14 = sub_10015043C(a2, a1[1]);
      }
      unsigned int v18 = (void **)&v19;
    }
    else
    {
      if (!a1[3]) {
        return;
      }
      uint64_t v11 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
      {
        int v22 = *a1;
        char v12 = v23;
        sub_1002755C4(&v22, v23);
        if (v24 < 0) {
          char v12 = (void **)v23[0];
        }
        if (v7)
        {
          sub_100474E18(v7, __p);
          if (v21 >= 0) {
            long long v13 = __p;
          }
          else {
            long long v13 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136446466;
          __int16 v26 = v12;
          __int16 v27 = 2082;
          __int16 v28 = (const char *)v13;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Sending call setup \"%{public}s\" to device %{public}s", buf, 0x16u);
          if (v21 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          *(_DWORD *)std::string buf = 136446466;
          __int16 v26 = v12;
          __int16 v27 = 2082;
          __int16 v28 = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Sending call setup \"%{public}s\" to device %{public}s", buf, 0x16u);
        }
        if (v24 < 0) {
          operator delete(v23[0]);
        }
      }
      LOBYTE(v23[0]) = 0;
      sub_10001B8E0(v23);
      int v14 = sub_1001502AC(a2, *a1);
      unsigned int v18 = v23;
    }
    sub_10001B8AC(v18);
    if (v14)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
        sub_100777708();
      }
    }
  }
}

void sub_10052E490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_10001B8AC(&a12);
  _Unwind_Resume(a1);
}

unsigned char *sub_10052E4F4(unsigned __int8 *a1, unsigned __int16 a2, uint64_t a3)
{
  uint64_t result = (unsigned char *)sub_100276604(a3 + 400);
  if (result)
  {
    if (qword_1009FB058 != -1) {
      dispatch_once(&qword_1009FB058, &stru_1009B3FC0);
    }
    uint64_t v6 = sub_1005160B8((uint64_t)off_1009FB050, a2);
    uint64_t v7 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = *a1;
      uint64_t v8 = v14;
      sub_1002755C4(&v13, v14);
      if (v15 < 0) {
        uint64_t v8 = (void **)v14[0];
      }
      if (v6)
      {
        sub_100474E18(v6, __p);
        if (v12 >= 0) {
          BOOL v9 = __p;
        }
        else {
          BOOL v9 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136446466;
        int v17 = v8;
        __int16 v18 = 2082;
        char v19 = (const char *)v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Sending call setup \"%{public}s\" to device %{public}s", buf, 0x16u);
        if (v12 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        *(_DWORD *)std::string buf = 136446466;
        int v17 = v8;
        __int16 v18 = 2082;
        char v19 = "NULL";
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Sending call setup \"%{public}s\" to device %{public}s", buf, 0x16u);
      }
      if (v15 < 0) {
        operator delete(v14[0]);
      }
    }
    LOBYTE(v14[0]) = 0;
    sub_10001B8E0(v14);
    int v10 = sub_1001502AC(a2, *a1);
    sub_10001B910(v14);
    if (v10)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
        sub_100777770();
      }
    }
    return sub_10001B8AC(v14);
  }
  return result;
}

void sub_10052E710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10052E744(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  uint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_10052E7F8(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 4 * a3;
    do
    {
      sub_10052E870(a1, a2, a2);
      ++a2;
      v5 -= 4;
    }
    while (v5);
  }
  return a1;
}

void sub_10052E85C(_Unwind_Exception *a1)
{
  sub_1000A9450(v1);
  _Unwind_Resume(a1);
}

void *sub_10052E870(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v5 = *a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v8 = *a2;
      if (v6 <= v5) {
        unint64_t v8 = v5 % v6;
      }
    }
    else
    {
      unint64_t v8 = (v6 - 1) & v5;
    }
    BOOL v9 = *(void ***)(*(void *)a1 + 8 * v8);
    if (v9)
    {
      int v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v5)
          {
            if (*((_DWORD *)v10 + 4) == v5) {
              return v10;
            }
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v11 >= v6) {
                v11 %= v6;
              }
            }
            else
            {
              v11 &= v6 - 1;
            }
            if (v11 != v8) {
              break;
            }
          }
          int v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    unint64_t v8 = 0;
  }
  int v10 = operator new(0x18uLL);
  *int v10 = 0;
  v10[1] = v5;
  *((_DWORD *)v10 + 4) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    BOOL v14 = 1;
    if (v6 >= 3) {
      BOOL v14 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v6);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_1000A9204(a1, v17);
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5) {
        unint64_t v8 = v5 % v6;
      }
      else {
        unint64_t v8 = v5;
      }
    }
    else
    {
      unint64_t v8 = (v6 - 1) & v5;
    }
  }
  uint64_t v18 = *(void *)a1;
  char v19 = *(void **)(*(void *)a1 + 8 * v8);
  if (v19)
  {
    *int v10 = *v19;
LABEL_38:
    *char v19 = v10;
    goto LABEL_39;
  }
  *int v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v8) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v20 >= v6) {
        v20 %= v6;
      }
    }
    else
    {
      v20 &= v6 - 1;
    }
    char v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_10052EA80(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10052EA94(void *result, uint64_t a2, int a3, float a4)
{
  if (v4 >= 0) {
    unint64_t v5 = result;
  }
  else {
    unint64_t v5 = (void *)*result;
  }
  *(float *)a2 = a4;
  *(_DWORD *)(a2 + 4) = a3;
  *(_WORD *)(a2 + 8) = 2080;
  *(void *)(a2 + 1sub_1004C2140(qword_100A19B68, 0) = v5;
  return result;
}

uint64_t sub_10052EAC8(uint64_t result, uint64_t a2, float a3)
{
  *(float *)uint64_t result = a3;
  *(void *)(result + 4) = a2;
  *(_WORD *)(result + 12) = 1024;
  *(_DWORD *)(result + 14) = 2;
  return result;
}

uint64_t sub_10052EAF4@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)(result + 4) = a3;
  *(_WORD *)(result + 12) = 1024;
  *(_DWORD *)(result + 14) = a2;
  return result;
}

void *sub_10052EB08(void *a1)
{
  *a1 = &off_1009B41F0;
  id v2 = +[CloudPairing sharedInstance];
  return a1;
}

void sub_10052EB5C(uint64_t a1, void *a2)
{
  id v2 = a2;
  unint64_t v3 = qword_100A19E60;
  if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CloudPairing start", buf, 2u);
  }
  if (NSClassFromString(@"UMUserManager"))
  {
    int v4 = +[UMUserManager sharedManager];
    if ([v4 isMultiUser])
    {
      unint64_t v5 = qword_100A19E60;
      if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Disabling cloud pairing for multi-user mode", buf, 2u);
      }

      goto LABEL_19;
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_ERROR))
  {
    sub_1007777D8();
  }
  uint8x8_t v7 = +[NSMutableArray array];
  unint64_t v8 = +[NSMutableArray array];
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v9 = v2;
  id v10 = [v9 countByEnumeratingWithState:&v17 objects:v22 count:16];
  if (v10)
  {
    uint64_t v11 = *(void *)v18;
    do
    {
      for (uint64_t i = 0; i != v10; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v18 != v11) {
          objc_enumerationMutation(v9);
        }
        float v13 = *(void **)(*((void *)&v17 + 1) + 8 * i);
        BOOL v14 = [v13 UUIDString];
        [v7 addObject:v14];

        unint64_t v15 = [v9 objectForKeyedSubscript:v13];
        [v8 addObject:v15];
      }
      id v10 = [v9 countByEnumeratingWithState:&v17 objects:v22 count:16];
    }
    while (v10);
  }

  unint64_t v16 = +[CloudPairing sharedInstance];
  [v16 registerWithCloudPairedDevices:v7 identifiers:v8];

LABEL_19:
}

void sub_10052EDD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10052EE54()
{
  id v0 = +[CloudPairing sharedInstance];
  [v0 printDebug];
}

void sub_10052EEA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10052EEB8()
{
  id v0 = +[CloudPairing sharedInstance];
  [v0 sendCloudKitPush];
}

void sub_10052EF08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10052EF1C(uint64_t a1, unsigned char *a2)
{
  id v3 = +[CloudPairing sharedInstance];
  *a2 = [v3 getAccessibilityHeadtrackingEnabled];
}

void sub_10052EF74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10052EF88()
{
  id v0 = +[CloudPairing sharedInstance];
  [v0 fetchManateeStatus];
}

void sub_10052EFD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_10052EFEC()
{
  id v0 = +[CloudPairing sharedInstance];
  id v1 = [v0 getAccountStatus];

  return v1;
}

void sub_10052F02C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10052F03C(uint64_t a1, uint64_t *a2)
{
  id v5 = +[CloudPairing sharedInstance];
  id v3 = [v5 cloudClient];
  if (*((char *)a2 + 23) < 0) {
    a2 = (uint64_t *)*a2;
  }
  int v4 = +[NSString stringWithUTF8String:a2];
  [v3 deviceRecord:v4 completion:&stru_1009B4268];
}

void sub_10052F0D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  float v12 = v11;

  _Unwind_Resume(a1);
}

void sub_10052F108(id a1, BTCloudDevice *a2, NSError *a3)
{
  int v4 = a2;
  id v5 = a3;
  unint64_t v6 = v5;
  uint8x8_t v7 = qword_100A19E60;
  if (!v4 || v5)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_ERROR)) {
      sub_10077780C();
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 138412290;
      unint64_t v16 = v4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[Inquiry] fetched cloud device: %@", buf, 0xCu);
    }
    uint64_t v8 = sub_10037345C();
    id v9 = [(BTCloudDevice *)v4 bluetoothAddress];
    sub_10004191C(v13, (char *)[v9 UTF8String]);
    id v10 = [(BTCloudDevice *)v4 nickname];
    sub_10004191C(__p, (char *)[v10 UTF8String]);
    (*(void (**)(uint64_t, void **, void **))(*(void *)v8 + 176))(v8, v13, __p);
    if (v12 < 0) {
      operator delete(__p[0]);
    }

    if (v14 < 0) {
      operator delete(v13[0]);
    }
  }
}

void sub_10052F2A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  if (a20 < 0) {
    operator delete(a15);
  }

  _Unwind_Resume(a1);
}

void sub_10052F308(uint64_t a1, uint64_t a2)
{
  id v3 = +[CloudPairing sharedInstance];
  [v3 multipleAdvInstancesInitialized:a2];
}

void sub_10052F360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10052F374(uint64_t a1, uint64_t *a2)
{
  id v2 = a2;
  if (*((char *)a2 + 23) < 0)
  {
    if (!a2[1]) {
      return;
    }
  }
  else if (!*((unsigned char *)a2 + 23))
  {
    return;
  }
  id v3 = +[CloudPairing sharedInstance];
  if (*((char *)v2 + 23) < 0) {
    id v2 = (uint64_t *)*v2;
  }
  int v4 = +[NSString stringWithUTF8String:v2];
  unint64_t v6 = v4;
  id v5 = +[NSArray arrayWithObjects:&v6 count:1];
  [v3 sendCloudpairingRetry:v5];
}

void sub_10052F45C(_Unwind_Exception *a1)
{
  int v4 = v3;

  _Unwind_Resume(a1);
}

void sub_10052F4E4(id a1)
{
  id v1 = objc_alloc_init(CloudPairing);
  id v2 = (void *)qword_100A13830;
  qword_100A13830 = (uint64_t)v1;
}

void sub_10052F574(id a1)
{
  id v1 = objc_alloc_init((Class)BTCloudServicesClient);
  id v2 = (void *)qword_100A13840;
  qword_100A13840 = (uint64_t)v1;

  [(id)qword_100A13840 setInterruptionHandler:&stru_1009B42C8];
  id v3 = (void *)qword_100A13840;

  [v3 setInvalidationHandler:&stru_1009B42E8];
}

void sub_10052F5D8(id a1)
{
  id v1 = qword_100A19E60;
  if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Cloud InterruptionHandler", v2, 2u);
  }
}

void sub_10052F640(id a1)
{
  id v1 = qword_100A19E60;
  if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Cloud InvalidationHandler", v2, 2u);
  }
}

void sub_10052FBE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10052FC5C(uint64_t a1, int a2)
{
  int v4 = (id)qword_100A19E60;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109120;
    v7[1] = MKBDeviceUnlockedSinceBoot();
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Received first unlock notification. returns : %d", (uint8_t *)v7, 8u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained startUpServices];

  return notify_cancel(a2);
}

void sub_10052FD34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10052FF38(uint64_t a1)
{
  id v2 = qword_100A19E60;
  if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "BTAudioCloudSyncMonitor: BTCloudSoundProfileChangedNotification Received", v4, 2u);
  }
  return [*(id *)(a1 + 32) soundProfileChanged];
}

void sub_100530108(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100530214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100530230(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _generateKeys];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_1005305A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10053082C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  long long v18 = v16;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_100530870(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _handleMsg:v3];
}

void sub_1005308CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100536598(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 1655) < 0) {
    operator delete(*(void **)(v1 + 1632));
  }

  if (*(char *)(v1 + 2055) < 0) {
    operator delete(*(void **)(v1 + 2032));
  }

  _Unwind_Resume(a1);
}

id sub_1005374EC(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) handleXPCUnpairCommand:*(void *)(a1 + 40)];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_100537524(uint64_t a1)
{
  if (qword_1009F7ED0 != -1) {
    dispatch_once(&qword_1009F7ED0, &stru_1009B44A8);
  }
  uint64_t v2 = qword_1009F7EC8;
  sub_10004191C(__p, (char *)[*(id *)(a1 + 32) UTF8String]);
  sub_10070BC30(v2, (unsigned __int8 *)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1005375B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005375CC(uint64_t a1)
{
  if (qword_1009F7ED0 != -1) {
    dispatch_once(&qword_1009F7ED0, &stru_1009B44A8);
  }
  uint64_t v2 = qword_1009F7EC8;
  id v3 = *(void **)(a1 + 32);

  sub_10070BF0C(v2, v3);
}

void sub_100537630(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint8x8_t v7 = v6;
  if (v5 && !v6)
  {
    uint64_t v128 = 0;
    uint64_t v129 = 0;
    uint64_t v130 = 0;
    int v8 = sub_10047FF14(*(void *)(a1 + 40), (uint64_t)&v128);
    long long __dst = 0uLL;
    uint64_t v127 = 0;
    id v9 = [v5 modelNumber];
    if ((unint64_t)[v9 length] < 2)
    {
      if (v8)
      {
        if (*(char *)(v128 + 47) < 0)
        {
          sub_10003B098(&__dst, *(void **)(v128 + 24), *(void *)(v128 + 32));
        }
        else
        {
          long long __dst = *(_OWORD *)(v128 + 24);
          uint64_t v127 = *(void *)(v128 + 40);
        }
      }
      else
      {
        sub_10004191C(&__dst, "");
      }
    }
    else
    {
      id v10 = [v5 modelNumber];
      sub_10004191C(&__dst, (char *)[v10 UTF8String]);
    }
    long long v124 = 0uLL;
    uint64_t v125 = 0;
    uint64_t v11 = [v5 manufacturer];
    if ((unint64_t)[v11 length] < 2)
    {
      if (v8)
      {
        if (*(char *)(v128 + 71) < 0)
        {
          sub_10003B098(&v124, *(void **)(v128 + 48), *(void *)(v128 + 56));
        }
        else
        {
          long long v124 = *(_OWORD *)(v128 + 48);
          uint64_t v125 = *(void *)(v128 + 64);
        }
      }
      else
      {
        sub_10004191C(&v124, "");
      }
    }
    else
    {
      id v12 = [v5 manufacturer];
      sub_10004191C(&v124, (char *)[v12 UTF8String]);
    }
    long long v122 = 0uLL;
    uint64_t v123 = 0;
    float v13 = [*(id *)(a1 + 32) caseSerialNumber];
    if ((unint64_t)[v13 length] < 2)
    {
      if (v8)
      {
        if (*(char *)(v128 + 95) < 0)
        {
          sub_10003B098(&v122, *(void **)(v128 + 72), *(void *)(v128 + 80));
        }
        else
        {
          long long v122 = *(_OWORD *)(v128 + 72);
          uint64_t v123 = *(void *)(v128 + 88);
        }
      }
      else
      {
        sub_10004191C(&v122, "");
      }
    }
    else
    {
      id v14 = [*(id *)(a1 + 32) caseSerialNumber];
      sub_10004191C(&v122, (char *)[v14 UTF8String]);
    }
    long long v120 = 0uLL;
    uint64_t v121 = 0;
    unint64_t v15 = [*(id *)(a1 + 32) hardwareVersion];
    if ((unint64_t)[v15 length] < 2)
    {
      if (v8)
      {
        if (*(char *)(v128 + 167) < 0)
        {
          sub_10003B098(&v120, *(void **)(v128 + 144), *(void *)(v128 + 152));
        }
        else
        {
          long long v120 = *(_OWORD *)(v128 + 144);
          uint64_t v121 = *(void *)(v128 + 160);
        }
      }
      else
      {
        sub_10004191C(&v120, "");
      }
    }
    else
    {
      id v16 = [*(id *)(a1 + 32) hardwareVersion];
      sub_10004191C(&v120, (char *)[v16 UTF8String]);
    }
    long long v118 = 0uLL;
    uint64_t v119 = 0;
    long long v17 = [*(id *)(a1 + 32) leftBudSerialNumber];
    if ((unint64_t)[v17 length] < 2)
    {
      if (v8)
      {
        if (*(char *)(v128 + 215) < 0)
        {
          sub_10003B098(&v118, *(void **)(v128 + 192), *(void *)(v128 + 200));
        }
        else
        {
          long long v118 = *(_OWORD *)(v128 + 192);
          uint64_t v119 = *(void *)(v128 + 208);
        }
      }
      else
      {
        sub_10004191C(&v118, "");
      }
    }
    else
    {
      id v18 = [*(id *)(a1 + 32) leftBudSerialNumber];
      sub_10004191C(&v118, (char *)[v18 UTF8String]);
    }
    v116[0] = 0;
    v116[1] = 0;
    uint64_t v117 = 0;
    long long v19 = [*(id *)(a1 + 32) rightBudSerialNumber];
    if ((unint64_t)[v19 length] < 2)
    {
      if (v8)
      {
        if (*(char *)(v128 + 239) < 0)
        {
          sub_10003B098(v116, *(void **)(v128 + 216), *(void *)(v128 + 224));
        }
        else
        {
          *(_OWORD *)long long v116 = *(_OWORD *)(v128 + 216);
          uint64_t v117 = *(void *)(v128 + 232);
        }
      }
      else
      {
        sub_10004191C(v116, "");
      }
    }
    else
    {
      id v20 = [*(id *)(a1 + 32) rightBudSerialNumber];
      sub_10004191C(v116, (char *)[v20 UTF8String]);
    }
    v114[0] = 0;
    v114[1] = 0;
    uint64_t v115 = 0;
    char v21 = [*(id *)(a1 + 32) budsFirmwareVersion];
    if ((unint64_t)[v21 length] < 2)
    {
      if (v8)
      {
        if (*(char *)(v128 + 263) < 0)
        {
          sub_10003B098(v114, *(void **)(v128 + 240), *(void *)(v128 + 248));
        }
        else
        {
          *(_OWORD *)long long v114 = *(_OWORD *)(v128 + 240);
          uint64_t v115 = *(void *)(v128 + 256);
        }
      }
      else
      {
        sub_10004191C(v114, "");
      }
    }
    else
    {
      id v22 = [*(id *)(a1 + 32) budsFirmwareVersion];
      sub_10004191C(v114, (char *)[v22 UTF8String]);
    }
    int64x2_t v112 = 0uLL;
    v113[0] = 0;
    sub_10004191C(__p, "");
    char v23 = (_OWORD *)v112.i64[1];
    if (v112.i64[1] >= v113[0])
    {
      unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((v112.i64[1] - v112.i64[0]) >> 3);
      unint64_t v27 = v26 + 1;
      if (v26 + 1 > 0xAAAAAAAAAAAAAAALL) {
        abort();
      }
      if (0x5555555555555556 * ((v113[0] - v112.i64[0]) >> 3) > v27) {
        unint64_t v27 = 0x5555555555555556 * ((v113[0] - v112.i64[0]) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v113[0] - v112.i64[0]) >> 3) >= 0x555555555555555) {
        unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v28 = v27;
      }
      unsigned int v134 = v113;
      if (v28) {
        int v29 = (char *)sub_1002B3440((uint64_t)v113, v28);
      }
      else {
        int v29 = 0;
      }
      uint64_t v30 = &v29[24 * v26];
      long long v31 = *(_OWORD *)__p;
      *((void *)v30 + 2) = v111;
      *(_OWORD *)uint64_t v30 = v31;
      __p[1] = 0;
      uint64_t v111 = 0;
      __p[0] = 0;
      uint64_t v32 = v112.i64[1];
      uint64_t v33 = v112.i64[0];
      if (v112.i64[1] == v112.i64[0])
      {
        int64x2_t v36 = vdupq_n_s64(v112.u64[1]);
        BOOL v34 = &v29[24 * v26];
      }
      else
      {
        BOOL v34 = &v29[24 * v26];
        do
        {
          long long v35 = *(_OWORD *)(v32 - 24);
          *((void *)v34 - 1) = *(void *)(v32 - 8);
          *(_OWORD *)(v34 - 24) = v35;
          v34 -= 24;
          *(void *)(v32 - 16) = 0;
          *(void *)(v32 - 8) = 0;
          *(void *)(v32 - 24) = 0;
          v32 -= 24;
        }
        while (v32 != v33);
        int64x2_t v36 = v112;
      }
      int v25 = v30 + 24;
      v112.i64[0] = (uint64_t)v34;
      v112.i64[1] = (uint64_t)(v30 + 24);
      int64x2_t v132 = v36;
      uint64_t v37 = v113[0];
      v113[0] = &v29[24 * v28];
      uint64_t v133 = v37;
      unsigned int v131 = (void **)v36.i64[0];
      sub_1002B4440((uint64_t)&v131);
      v112.i64[1] = (uint64_t)v25;
      if (SHIBYTE(v111) < 0)
      {
        operator delete(__p[0]);
        int v25 = (char *)v112.i64[1];
      }
    }
    else
    {
      long long v24 = *(_OWORD *)__p;
      *(void *)(v112.i64[1] + 16) = v111;
      *char v23 = v24;
      int v25 = (char *)v23 + 24;
      v112.i64[1] = (uint64_t)v23 + 24;
    }
    if ((unint64_t)v25 >= v113[0])
    {
      uint64_t v39 = sub_1002B42D4((char **)&v112, &__dst);
    }
    else
    {
      if (SHIBYTE(v127) < 0)
      {
        sub_10003B098(v25, (void *)__dst, *((unint64_t *)&__dst + 1));
      }
      else
      {
        long long v38 = __dst;
        *((void *)v25 + 2) = v127;
        *(_OWORD *)int v25 = v38;
      }
      uint64_t v39 = v25 + 24;
    }
    v112.i64[1] = (uint64_t)v39;
    if ((unint64_t)v39 >= v113[0])
    {
      uint64_t v41 = sub_1002B42D4((char **)&v112, &v124);
    }
    else
    {
      if (SHIBYTE(v125) < 0)
      {
        sub_10003B098(v39, (void *)v124, *((unint64_t *)&v124 + 1));
      }
      else
      {
        long long v40 = v124;
        *((void *)v39 + 2) = v125;
        *(_OWORD *)uint64_t v39 = v40;
      }
      uint64_t v41 = v39 + 24;
    }
    v112.i64[1] = (uint64_t)v41;
    if ((unint64_t)v41 >= v113[0])
    {
      int v43 = sub_1002B42D4((char **)&v112, &v122);
    }
    else
    {
      if (SHIBYTE(v123) < 0)
      {
        sub_10003B098(v41, (void *)v122, *((unint64_t *)&v122 + 1));
      }
      else
      {
        long long v42 = v122;
        *((void *)v41 + 2) = v123;
        *(_OWORD *)uint64_t v41 = v42;
      }
      int v43 = v41 + 24;
    }
    v112.i64[1] = (uint64_t)v43;
    if (v8)
    {
      if (*(char *)(v128 + 119) < 0)
      {
        sub_10003B098(__p, *(void **)(v128 + 96), *(void *)(v128 + 104));
      }
      else
      {
        *(_OWORD *)long long __p = *(_OWORD *)(v128 + 96);
        uint64_t v111 = *(void *)(v128 + 112);
      }
    }
    else
    {
      sub_10004191C(__p, "");
    }
    char v44 = (_OWORD *)v112.i64[1];
    if (v112.i64[1] >= v113[0])
    {
      unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * ((v112.i64[1] - v112.i64[0]) >> 3);
      unint64_t v47 = v46 + 1;
      if (v46 + 1 > 0xAAAAAAAAAAAAAAALL) {
        abort();
      }
      if (0x5555555555555556 * ((v113[0] - v112.i64[0]) >> 3) > v47) {
        unint64_t v47 = 0x5555555555555556 * ((v113[0] - v112.i64[0]) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v113[0] - v112.i64[0]) >> 3) >= 0x555555555555555) {
        unint64_t v48 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v48 = v47;
      }
      unsigned int v134 = v113;
      if (v48) {
        uint64_t v49 = (char *)sub_1002B3440((uint64_t)v113, v48);
      }
      else {
        uint64_t v49 = 0;
      }
      uint64_t v50 = &v49[24 * v46];
      long long v51 = *(_OWORD *)__p;
      *((void *)v50 + 2) = v111;
      *(_OWORD *)uint64_t v50 = v51;
      __p[1] = 0;
      uint64_t v111 = 0;
      __p[0] = 0;
      uint64_t v52 = v112.i64[1];
      uint64_t v53 = v112.i64[0];
      if (v112.i64[1] == v112.i64[0])
      {
        int64x2_t v56 = vdupq_n_s64(v112.u64[1]);
        unsigned int v54 = &v49[24 * v46];
      }
      else
      {
        unsigned int v54 = &v49[24 * v46];
        do
        {
          long long v55 = *(_OWORD *)(v52 - 24);
          *((void *)v54 - 1) = *(void *)(v52 - 8);
          *(_OWORD *)(v54 - 24) = v55;
          v54 -= 24;
          *(void *)(v52 - 16) = 0;
          *(void *)(v52 - 8) = 0;
          *(void *)(v52 - 24) = 0;
          v52 -= 24;
        }
        while (v52 != v53);
        int64x2_t v56 = v112;
      }
      uint64_t v57 = v50 + 24;
      v112.i64[0] = (uint64_t)v54;
      v112.i64[1] = (uint64_t)(v50 + 24);
      int64x2_t v132 = v56;
      uint64_t v58 = v113[0];
      v113[0] = &v49[24 * v48];
      uint64_t v133 = v58;
      unsigned int v131 = (void **)v56.i64[0];
      sub_1002B4440((uint64_t)&v131);
      v112.i64[1] = (uint64_t)v57;
      if (SHIBYTE(v111) < 0)
      {
        operator delete(__p[0]);
        if (!v8) {
          goto LABEL_97;
        }
      }
      else if (!v8)
      {
        goto LABEL_97;
      }
    }
    else
    {
      long long v45 = *(_OWORD *)__p;
      *(void *)(v112.i64[1] + 16) = v111;
      *char v44 = v45;
      v112.i64[1] = (uint64_t)v44 + 24;
      if (!v8)
      {
LABEL_97:
        sub_10004191C(__p, "");
LABEL_117:
        uint64_t v59 = (_OWORD *)v112.i64[1];
        if (v112.i64[1] >= v113[0])
        {
          unint64_t v62 = 0xAAAAAAAAAAAAAAABLL * ((v112.i64[1] - v112.i64[0]) >> 3);
          unint64_t v63 = v62 + 1;
          if (v62 + 1 > 0xAAAAAAAAAAAAAAALL) {
            abort();
          }
          if (0x5555555555555556 * ((v113[0] - v112.i64[0]) >> 3) > v63) {
            unint64_t v63 = 0x5555555555555556 * ((v113[0] - v112.i64[0]) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v113[0] - v112.i64[0]) >> 3) >= 0x555555555555555) {
            unint64_t v64 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v64 = v63;
          }
          unsigned int v134 = v113;
          if (v64) {
            unsigned __int8 v65 = (char *)sub_1002B3440((uint64_t)v113, v64);
          }
          else {
            unsigned __int8 v65 = 0;
          }
          int v66 = &v65[24 * v62];
          long long v67 = *(_OWORD *)__p;
          *((void *)v66 + 2) = v111;
          *(_OWORD *)int v66 = v67;
          __p[1] = 0;
          uint64_t v111 = 0;
          __p[0] = 0;
          uint64_t v68 = v112.i64[1];
          uint64_t v69 = v112.i64[0];
          if (v112.i64[1] == v112.i64[0])
          {
            int64x2_t v72 = vdupq_n_s64(v112.u64[1]);
            int v70 = &v65[24 * v62];
          }
          else
          {
            int v70 = &v65[24 * v62];
            do
            {
              long long v71 = *(_OWORD *)(v68 - 24);
              *((void *)v70 - 1) = *(void *)(v68 - 8);
              *(_OWORD *)(v70 - 24) = v71;
              v70 -= 24;
              *(void *)(v68 - 16) = 0;
              *(void *)(v68 - 8) = 0;
              *(void *)(v68 - 24) = 0;
              v68 -= 24;
            }
            while (v68 != v69);
            int64x2_t v72 = v112;
          }
          uint64_t v61 = v66 + 24;
          v112.i64[0] = (uint64_t)v70;
          v112.i64[1] = (uint64_t)(v66 + 24);
          int64x2_t v132 = v72;
          uint64_t v73 = v113[0];
          v113[0] = &v65[24 * v64];
          uint64_t v133 = v73;
          unsigned int v131 = (void **)v72.i64[0];
          sub_1002B4440((uint64_t)&v131);
          v112.i64[1] = (uint64_t)v61;
          if (SHIBYTE(v111) < 0)
          {
            operator delete(__p[0]);
            uint64_t v61 = (char *)v112.i64[1];
          }
        }
        else
        {
          long long v60 = *(_OWORD *)__p;
          *(void *)(v112.i64[1] + 16) = v111;
          _OWORD *v59 = v60;
          uint64_t v61 = (char *)v59 + 24;
          v112.i64[1] = (uint64_t)v59 + 24;
        }
        if ((unint64_t)v61 >= v113[0])
        {
          int v75 = sub_1002B42D4((char **)&v112, &v120);
        }
        else
        {
          if (SHIBYTE(v121) < 0)
          {
            sub_10003B098(v61, (void *)v120, *((unint64_t *)&v120 + 1));
          }
          else
          {
            long long v74 = v120;
            *((void *)v61 + 2) = v121;
            *(_OWORD *)uint64_t v61 = v74;
          }
          int v75 = v61 + 24;
        }
        v112.i64[1] = (uint64_t)v75;
        if (v8)
        {
          if (*(char *)(v128 + 191) < 0)
          {
            sub_10003B098(__p, *(void **)(v128 + 168), *(void *)(v128 + 176));
          }
          else
          {
            *(_OWORD *)long long __p = *(_OWORD *)(v128 + 168);
            uint64_t v111 = *(void *)(v128 + 184);
          }
        }
        else
        {
          sub_10004191C(__p, "");
        }
        char v76 = (_OWORD *)v112.i64[1];
        if (v112.i64[1] >= v113[0])
        {
          unint64_t v79 = 0xAAAAAAAAAAAAAAABLL * ((v112.i64[1] - v112.i64[0]) >> 3);
          unint64_t v80 = v79 + 1;
          if (v79 + 1 > 0xAAAAAAAAAAAAAAALL) {
            abort();
          }
          if (0x5555555555555556 * ((v113[0] - v112.i64[0]) >> 3) > v80) {
            unint64_t v80 = 0x5555555555555556 * ((v113[0] - v112.i64[0]) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v113[0] - v112.i64[0]) >> 3) >= 0x555555555555555) {
            unint64_t v81 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v81 = v80;
          }
          unsigned int v134 = v113;
          if (v81) {
            uint64_t v82 = (char *)sub_1002B3440((uint64_t)v113, v81);
          }
          else {
            uint64_t v82 = 0;
          }
          uint64_t v83 = &v82[24 * v79];
          long long v84 = *(_OWORD *)__p;
          *((void *)v83 + 2) = v111;
          *(_OWORD *)uint64_t v83 = v84;
          __p[1] = 0;
          uint64_t v111 = 0;
          __p[0] = 0;
          uint64_t v85 = v112.i64[1];
          uint64_t v86 = v112.i64[0];
          if (v112.i64[1] == v112.i64[0])
          {
            int64x2_t v89 = vdupq_n_s64(v112.u64[1]);
            uint64_t v87 = &v82[24 * v79];
          }
          else
          {
            uint64_t v87 = &v82[24 * v79];
            do
            {
              long long v88 = *(_OWORD *)(v85 - 24);
              *((void *)v87 - 1) = *(void *)(v85 - 8);
              *(_OWORD *)(v87 - 24) = v88;
              v87 -= 24;
              *(void *)(v85 - 16) = 0;
              *(void *)(v85 - 8) = 0;
              *(void *)(v85 - 24) = 0;
              v85 -= 24;
            }
            while (v85 != v86);
            int64x2_t v89 = v112;
          }
          __int16 v78 = v83 + 24;
          v112.i64[0] = (uint64_t)v87;
          v112.i64[1] = (uint64_t)(v83 + 24);
          int64x2_t v132 = v89;
          uint64_t v90 = v113[0];
          v113[0] = &v82[24 * v81];
          uint64_t v133 = v90;
          unsigned int v131 = (void **)v89.i64[0];
          sub_1002B4440((uint64_t)&v131);
          v112.i64[1] = (uint64_t)v78;
          if (SHIBYTE(v111) < 0)
          {
            operator delete(__p[0]);
            __int16 v78 = (char *)v112.i64[1];
          }
        }
        else
        {
          long long v77 = *(_OWORD *)__p;
          *(void *)(v112.i64[1] + 16) = v111;
          *char v76 = v77;
          __int16 v78 = (char *)v76 + 24;
          v112.i64[1] = (uint64_t)v76 + 24;
        }
        if ((unint64_t)v78 >= v113[0])
        {
          uint64_t v92 = sub_1002B42D4((char **)&v112, &v118);
        }
        else
        {
          if (SHIBYTE(v119) < 0)
          {
            sub_10003B098(v78, (void *)v118, *((unint64_t *)&v118 + 1));
          }
          else
          {
            long long v91 = v118;
            *((void *)v78 + 2) = v119;
            *(_OWORD *)__int16 v78 = v91;
          }
          uint64_t v92 = v78 + 24;
        }
        v112.i64[1] = (uint64_t)v92;
        if ((unint64_t)v92 >= v113[0])
        {
          int v94 = sub_1002B42D4((char **)&v112, (long long *)v116);
        }
        else
        {
          if (SHIBYTE(v117) < 0)
          {
            sub_10003B098(v92, v116[0], (unint64_t)v116[1]);
          }
          else
          {
            long long v93 = *(_OWORD *)v116;
            *((void *)v92 + 2) = v117;
            *(_OWORD *)uint64_t v92 = v93;
          }
          int v94 = v92 + 24;
        }
        v112.i64[1] = (uint64_t)v94;
        if ((unint64_t)v94 >= v113[0])
        {
          long long v96 = sub_1002B42D4((char **)&v112, (long long *)v114);
        }
        else
        {
          if (SHIBYTE(v115) < 0)
          {
            sub_10003B098(v94, v114[0], (unint64_t)v114[1]);
          }
          else
          {
            long long v95 = *(_OWORD *)v114;
            *((void *)v94 + 2) = v115;
            *(_OWORD *)int v94 = v95;
          }
          long long v96 = v94 + 24;
        }
        v112.i64[1] = (uint64_t)v96;
        if (v8 && 0xAAAAAAAAAAAAAAABLL * ((v129 - v128) >> 3) >= 0xF)
        {
          char v97 = (long long *)(v128 + 264);
          if ((unint64_t)v96 >= v113[0])
          {
            int v99 = sub_1002B42D4((char **)&v112, v97);
          }
          else
          {
            if (*(char *)(v128 + 287) < 0)
            {
              sub_10003B098(v96, *(void **)(v128 + 264), *(void *)(v128 + 272));
            }
            else
            {
              long long v98 = *v97;
              *((void *)v96 + 2) = *(void *)(v128 + 280);
              *(_OWORD *)long long v96 = v98;
            }
            int v99 = v96 + 24;
          }
          v112.i64[1] = (uint64_t)v99;
          int v100 = (long long *)(v128 + 288);
          if ((unint64_t)v99 >= v113[0])
          {
            long long v102 = sub_1002B42D4((char **)&v112, v100);
          }
          else
          {
            if (*(char *)(v128 + 311) < 0)
            {
              sub_10003B098(v99, *(void **)(v128 + 288), *(void *)(v128 + 296));
            }
            else
            {
              long long v101 = *v100;
              *((void *)v99 + 2) = *(void *)(v128 + 304);
              *(_OWORD *)int v99 = v101;
            }
            long long v102 = v99 + 24;
          }
          v112.i64[1] = (uint64_t)v102;
          long long v103 = (long long *)(v128 + 312);
          if ((unint64_t)v102 >= v113[0])
          {
            long long v105 = sub_1002B42D4((char **)&v112, v103);
          }
          else
          {
            if (*(char *)(v128 + 335) < 0)
            {
              sub_10003B098(v102, *(void **)(v128 + 312), *(void *)(v128 + 320));
            }
            else
            {
              long long v104 = *v103;
              *((void *)v102 + 2) = *(void *)(v128 + 328);
              *(_OWORD *)long long v102 = v104;
            }
            long long v105 = v102 + 24;
          }
          v112.i64[1] = (uint64_t)v105;
          long long v106 = (long long *)(v128 + 336);
          if ((unint64_t)v105 >= v113[0])
          {
            long long v96 = sub_1002B42D4((char **)&v112, v106);
          }
          else
          {
            if (*(char *)(v128 + 359) < 0)
            {
              sub_10003B098(v105, *(void **)(v128 + 336), *(void *)(v128 + 344));
            }
            else
            {
              long long v107 = *v106;
              *((void *)v105 + 2) = *(void *)(v128 + 352);
              *(_OWORD *)long long v105 = v107;
            }
            long long v96 = v105 + 24;
          }
          v112.i64[1] = (uint64_t)v96;
        }
        uint64_t v108 = *(void *)(a1 + 40);
        memset(v109, 0, sizeof(v109));
        sub_1002B3390((char *)v109, (long long *)v112.i64[0], (long long *)v96, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v96[-v112.i64[0]] >> 3));
        sub_10047FFCC(v108, (uint64_t)v109);
        unsigned int v131 = v109;
        sub_100051568(&v131);
        unsigned int v131 = (void **)&v112;
        sub_100051568(&v131);
        if (SHIBYTE(v115) < 0) {
          operator delete(v114[0]);
        }
        if (SHIBYTE(v117) < 0) {
          operator delete(v116[0]);
        }
        if (SHIBYTE(v119) < 0) {
          operator delete((void *)v118);
        }
        if (SHIBYTE(v121) < 0) {
          operator delete((void *)v120);
        }
        if (SHIBYTE(v123) < 0) {
          operator delete((void *)v122);
        }
        if (SHIBYTE(v125) < 0) {
          operator delete((void *)v124);
        }
        if (SHIBYTE(v127) < 0) {
          operator delete((void *)__dst);
        }
        unsigned int v131 = (void **)&v128;
        sub_100051568(&v131);
        goto LABEL_226;
      }
    }
    if (*(char *)(v128 + 143) < 0)
    {
      sub_10003B098(__p, *(void **)(v128 + 120), *(void *)(v128 + 128));
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)(v128 + 120);
      uint64_t v111 = *(void *)(v128 + 136);
    }
    goto LABEL_117;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
    sub_100777CE0();
  }
LABEL_226:
}