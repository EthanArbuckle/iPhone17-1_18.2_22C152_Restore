void sub_1004055B8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  NSObject *v6;
  uint64_t v7;
  void *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  NSObject *v14;
  void **v15;
  int v16;
  void *v17;
  void *v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned __int16 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t *v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  void *v37;
  unsigned int v38;
  void *v39;
  uint64_t v40;
  void *v41;
  void *__p[2];
  char v43;
  uuid_t dst;
  uint8_t buf[48];

  v6 = qword_100A19EE8;
  if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = a2;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "disconnectedCB cid:%d reason:%d", buf, 0xEu);
  }
  v38 = a3;
  v40 = a1;
  v7 = a1 + 16;
  v8 = *(void **)(a1 + 16);
  v39 = (void *)(v7 + 8);
  if (v8 != (void *)(v7 + 8))
  {
    while (2)
    {
      v41 = (void *)v8[5];
      v10 = (uint64_t *)v41[1];
      v9 = (uint64_t *)v41[2];
      while (v10 != v9)
      {
        v11 = *v10;
        v12 = *(unsigned __int16 **)(*v10 + 120);
        if (v12 != *(unsigned __int16 **)(*v10 + 128))
        {
          v13 = -(uint64_t)v12;
          while (1)
          {
            memset(dst, 0, sizeof(dst));
            uuid_copy(dst, (const unsigned __int8 *)v12 + 2);
            v14 = qword_100A19EE8;
            if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_INFO))
            {
              memset(buf, 0, 37);
              uuid_unparse_upper(dst, (char *)buf);
              sub_10004191C(__p, (char *)buf);
              v15 = __p;
              if (v43 < 0) {
                v15 = (void **)__p[0];
              }
              v16 = *v12;
              *(_DWORD *)buf = 136446466;
              *(void *)&buf[4] = v15;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v16;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "device=%{public}s cid=%x", buf, 0x12u);
              if (v43 < 0) {
                operator delete(__p[0]);
              }
            }
            if (*v12 == a2) {
              break;
            }
            v12 += 13;
            v13 -= 26;
            if (v12 == *(unsigned __int16 **)(v11 + 128))
            {
              v9 = (uint64_t *)v41[2];
              goto LABEL_16;
            }
          }
          v25 = sub_1002C5648();
          sub_1002C8D38(v25, *v12);
          if (!*((unsigned char *)v41 + 32))
          {
            v26 = *v41;
            v27 = sub_100031234(dst);
            (*(void (**)(uint64_t, void *, void, void, uint64_t))(*(void *)v26 + 8))(v26, v27, v38, *(unsigned __int16 *)(v11 + 2), a2);
          }
          sub_1004075F4(26 - v13, *(void *)(v11 + 128), -v13);
          *(void *)(v11 + 128) = v28;
          if (*(unsigned char *)v11)
          {
            if (!*(unsigned char *)(v11 + 4) && v28 == *(void *)(v11 + 120))
            {
              v29 = sub_100400D6C(v40, v11);
              if (v29 != 10 && !*((unsigned char *)v41 + 32)) {
                (*(void (**)(void, void, uint64_t))(*(void *)*v41 + 24))(*v41, *(unsigned __int16 *)(v11 + 2), v29);
              }
            }
            v30 = *(void **)(v11 + 128);
            if (v30 == *(void **)(v11 + 120))
            {
              v31 = (uint64_t *)v41[2];
              v32 = (char *)v31 - (char *)(v10 + 1);
              if (v31 != v10 + 1)
              {
                memmove(v10, v10 + 1, (char *)v31 - (char *)(v10 + 1));
                v30 = *(void **)(v11 + 120);
              }
              v41[2] = (char *)v10 + v32;
              if (v30)
              {
                *(void *)(v11 + 128) = v30;
                operator delete(v30);
              }
              operator delete();
            }
            if (*((unsigned char *)v41 + 32) && v41[2] == v41[1])
            {
              sub_100406E90((uint64_t)v41);
              operator delete();
            }
          }
          return;
        }
LABEL_16:
        ++v10;
      }
      v17 = (void *)v8[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (void *)v8[2];
          v19 = *v18 == (void)v8;
          v8 = v18;
        }
        while (!v19);
      }
      v8 = v18;
      if (v18 != v39) {
        continue;
      }
      break;
    }
  }
  v21 = *(uint64_t **)(v40 + 88);
  v20 = *(uint64_t **)(v40 + 96);
  while (v21 != v20)
  {
    v22 = *v21;
    v23 = *(unsigned __int16 **)(*v21 + 120);
    if (v23 != *(unsigned __int16 **)(*v21 + 128))
    {
      v24 = -(uint64_t)v23;
      while (1)
      {
        *(void *)buf = 0;
        *(void *)&buf[8] = 0;
        uuid_copy(buf, (const unsigned __int8 *)v23 + 2);
        if (*v23 == a2) {
          break;
        }
        v23 += 13;
        v24 -= 26;
        if (v23 == *(unsigned __int16 **)(v22 + 128))
        {
          v20 = *(uint64_t **)(v40 + 96);
          goto LABEL_30;
        }
      }
      v33 = sub_1002C5648();
      sub_1002C8D38(v33, *v23);
      sub_1004075F4(26 - v24, *(void *)(v22 + 128), -v24);
      *(void *)(v22 + 128) = v34;
      if (v34 == *(void *)(v22 + 120))
      {
        if (!*(unsigned char *)(v22 + 4)) {
          sub_100400D6C(v40, v22);
        }
        v35 = *(uint64_t **)(v40 + 96);
        v36 = (char *)v35 - (char *)(v21 + 1);
        if (v35 != v21 + 1) {
          memmove(v21, v21 + 1, (char *)v35 - (char *)(v21 + 1));
        }
        *(void *)(v40 + 96) = (char *)v21 + v36;
        v37 = *(void **)(v22 + 120);
        if (v37)
        {
          *(void *)(v22 + 128) = v37;
          operator delete(v37);
        }
        operator delete();
      }
      return;
    }
LABEL_30:
    ++v21;
  }
}

void sub_100405AB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100405ACC(void *a1, int a2, const void *a3, unsigned int a4, int a5)
{
  v11 = (unsigned __int16 *)a1[8];
  v10 = (unsigned __int16 *)a1[9];
  if (v11 != v10)
  {
    while (*v11 != a2)
    {
      if (++v11 == v10)
      {
        v11 = (unsigned __int16 *)a1[9];
        break;
      }
    }
  }
  if (v11 != v10)
  {
    v12 = qword_100A19EE8;
    if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = a2;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = a4;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "l2capDataIndCb for CID: 0x%x, Len: 0x%x", buf, 0xEu);
    }
    operator new();
  }
  uint64_t v13 = sub_1002C5648();
  sub_1002C93F4(v13, a2, a3, a4, 1, a5);
  if (a5)
  {
    uint64_t v48 = 0;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    *(_OWORD *)buf = 0u;
    memset(v35, 0, sizeof(v35));
    sub_10004C67C((uint64_t)buf);
    v14 = (void *)a1[2];
    v15 = a1 + 3;
    if (v14 == a1 + 3)
    {
      v16 = 0;
    }
    else
    {
      v16 = 0;
      do
      {
        uint64_t v17 = v14[5];
        uint64_t v18 = *(void *)(v17 + 8);
        uint64_t v19 = *(void *)(v17 + 16);
LABEL_13:
        if (v18 == v19)
        {
          char v22 = 0;
        }
        else
        {
          for (i = *(const unsigned __int8 **)(*(void *)v18 + 120); ; i += 26)
          {
            if (i == *(const unsigned __int8 **)(*(void *)v18 + 128))
            {
              v18 += 8;
              goto LABEL_13;
            }
            if (*(unsigned __int16 *)i == a2) {
              break;
            }
          }
          uint64_t v21 = sub_100031234(i + 2);

          sub_100551758(v14[4], &__p);
          sub_10003AB28((uint64_t)v35);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          char v22 = 1;
          v16 = (void *)v21;
        }
        v23 = (void *)v14[1];
        if (v23)
        {
          do
          {
            v24 = v23;
            v23 = (void *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            v24 = (void *)v14[2];
            BOOL v25 = *v24 == (void)v14;
            v14 = v24;
          }
          while (!v25);
        }
        if (v24 == v15) {
          char v22 = 1;
        }
        v14 = v24;
      }
      while ((v22 & 1) == 0);
    }
    v31 = 0;
    v32 = 0;
    sub_1000335D8(&v31, a3, a4);
    uint64_t v26 = sub_1003731C0();
    std::stringbuf::str();
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    v29 = &off_100998428;
    v30 = v32;
    if (v32) {
      sub_100037354((uint64_t)v32);
    }
    (*(void (**)(uint64_t, uint64_t, std::string *, void *, uint64_t (***)()))(*(void *)v26 + 40))(v26, 4, p_p, v16, &v29);
    v29 = &off_100998428;
    if (v30) {
      sub_1000368F4(v30);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    v31 = &off_100998428;
    if (v32) {
      sub_1000368F4(v32);
    }

    v35[0] = v28;
    if (SHIBYTE(v37) < 0) {
      operator delete(*((void **)&v36 + 1));
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    std::ios::~ios();
  }
}

void sub_100405FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, atomic_uint *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a13) {
    sub_1000368F4(a13);
  }

  sub_100742518((uint64_t)&a26);
  _Unwind_Resume(a1);
}

unsigned char *sub_100406094(uint64_t a1, int a2)
{
  v4 = qword_100A19EE8;
  if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
  {
    v12[0] = 67109120;
    v12[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "cid:0x%04x", (uint8_t *)v12, 8u);
  }
  LOBYTE(v12[0]) = 0;
  sub_10001B8E0(v12);
  v6 = *(char **)(a1 + 64);
  v5 = *(char **)(a1 + 72);
  if (v6 != v5)
  {
    uint64_t v7 = 0;
    while (*(unsigned __int16 *)&v6[v7] != a2)
    {
      v7 += 2;
      if (&v6[v7] == v5) {
        return sub_10001B8AC(v12);
      }
    }
    v8 = &v6[v7];
    v9 = &v6[v7 + 2];
    int64_t v10 = v5 - v9;
    if (v5 != v9) {
      memmove(&v6[v7], v9, v5 - v9);
    }
    *(void *)(a1 + 72) = &v8[v10];
  }
  return sub_10001B8AC(v12);
}

void sub_1004061B0(uint64_t a1)
{
  uint64_t v2 = sub_1002C5648();
  int v3 = *(unsigned __int16 *)(a1 + 40);
  v4 = (const void *)sub_10004A6E4(*(void *)(a1 + 32));
  size_t v5 = sub_100045F00(*(void *)(a1 + 32));
  sub_1002C93F4(v2, v3, v4, v5, 1, *(unsigned char *)(a1 + 42));
  v6 = *(void **)(a1 + 32);
  if (v6)
  {
    void *v6 = &off_100998428;
    uint64_t v7 = (atomic_uint *)v6[1];
    if (v7) {
      sub_1000368F4(v7);
    }
    operator delete();
  }
}

uint64_t sub_100406278(void *a1)
{
  v1 = qword_100A19EE8;
  if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "statedump: ------------------ LE L2CAP Channels -------------------", buf, 2u);
    v1 = qword_100A19EE8;
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "statedump: Registered Sessions:", buf, 2u);
  }
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 3)
  {
    do
    {
      v65 = v2;
      uint64_t v3 = v2[5];
      v4 = qword_100A19EE8;
      if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
      {
        size_t v5 = "LE";
        if (!*(unsigned char *)(v3 + 40)) {
          size_t v5 = "Classic";
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump: --------- Session: %{public}s ---------", buf, 0xCu);
        v4 = qword_100A19EE8;
      }
      uint64_t v67 = v3;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        sub_10003AE4C(v65[4], (uint64_t)buf);
        v6 = buf;
        if ((buf[23] & 0x80u) != 0) {
          v6 = *(uint8_t **)buf;
        }
        int v7 = *(_DWORD *)(v65[5] + 36);
        *(_DWORD *)v68 = 136446466;
        *(void *)&v68[4] = v6;
        __int16 v69 = 1024;
        int v70 = v7;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump: \"%{public}s\" pid:%d", v68, 0x12u);
        if ((char)buf[23] < 0) {
          operator delete(*(void **)buf);
        }
        v4 = qword_100A19EE8;
      }
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        v8 = "Yes";
        if (!*(unsigned char *)(v3 + 32)) {
          v8 = "No";
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = v8;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump:    Zombied: %{public}s", buf, 0xCu);
        v4 = qword_100A19EE8;
      }
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump:    Endpoints:", buf, 2u);
      }
      int64_t v10 = *(uint64_t **)(v3 + 8);
      for (i = *(uint64_t **)(v3 + 16); v10 != i; i = *(uint64_t **)(v67 + 16))
      {
        uint64_t v11 = *v10;
        v12 = qword_100A19EE8;
        if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v13 = "LE";
          if (!*(unsigned char *)(v11 + 56)) {
            uint64_t v13 = "Classic";
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "statedump: --------- Endpoint type: %{public}s ---------", buf, 0xCu);
          v12 = qword_100A19EE8;
        }
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          v14 = "Client for";
          if (!*(unsigned char *)(v11 + 4)) {
            v14 = "Listener for";
          }
          int v15 = *(unsigned __int16 *)(v11 + 2);
          v16 = "Yes";
          if (!*(unsigned char *)v11) {
            v16 = "No";
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&buf[4] = v14;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v15;
          *(_WORD *)&buf[18] = 2082;
          *(void *)&buf[20] = v16;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "statedump:          %{public}s PSM:0x%04x Zombied:%{public}s", buf, 0x1Cu);
          v12 = qword_100A19EE8;
        }
        if (*(unsigned char *)(v11 + 56) == 1)
        {
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "statedump:          Params:", buf, 2u);
            v12 = qword_100A19EE8;
          }
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            int v17 = *(unsigned __int16 *)(v11 + 14);
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v17;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "statedump:              creditSignalDelta:%d", buf, 8u);
            v12 = qword_100A19EE8;
          }
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            int v18 = *(unsigned __int16 *)(v11 + 16);
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v18;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "statedump:              initialCredits:%d", buf, 8u);
            v12 = qword_100A19EE8;
          }
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            int v19 = *(unsigned __int16 *)(v11 + 10);
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v19;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "statedump:              inMPS:%d", buf, 8u);
            v12 = qword_100A19EE8;
          }
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            int v20 = *(unsigned __int16 *)(v11 + 8);
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v20;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "statedump:              inMTU:%d", buf, 8u);
            v12 = qword_100A19EE8;
          }
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            int v21 = *(unsigned __int8 *)(v11 + 12);
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v21;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "statedump:              requiresAuth:%d", buf, 8u);
            v12 = qword_100A19EE8;
          }
        }
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "statedump:          Connected devices:", buf, 2u);
        }
        char v22 = *(const unsigned __int8 **)(v11 + 120);
        v23 = *(unsigned __int16 **)(v11 + 128);
        while (v22 != (const unsigned __int8 *)v23)
        {
          v24 = qword_100A19EE8;
          if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
          {
            memset(buf, 0, 37);
            uuid_unparse_upper(v22 + 2, (char *)buf);
            sub_10004191C(v68, (char *)buf);
            if (v71 >= 0) {
              BOOL v25 = v68;
            }
            else {
              BOOL v25 = *(unsigned char **)v68;
            }
            int v26 = *(unsigned __int16 *)v22;
            int v27 = *((unsigned __int16 *)v22 + 10);
            int v28 = *((unsigned __int16 *)v22 + 11);
            int v29 = v22[18];
            *(_DWORD *)buf = 136447234;
            *(void *)&buf[4] = v25;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v26;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v27;
            *(_WORD *)&buf[24] = 1024;
            *(_DWORD *)&buf[26] = v28;
            *(_WORD *)&buf[30] = 1024;
            *(_DWORD *)&buf[32] = v29;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "statedump:             %{public}s (0x%04x) intMTU:%d outMTU:%d state:%d", buf, 0x24u);
            if (v71 < 0) {
              operator delete(*(void **)v68);
            }
            v23 = *(unsigned __int16 **)(v11 + 128);
          }
          v22 += 26;
        }
        ++v10;
      }
      v30 = qword_100A19EE8;
      if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "statedump: Registered Sessions:", buf, 2u);
      }
      uint64_t v31 = a1[5];
      uint64_t v32 = a1[6];
      while (v31 != v32)
      {
        v33 = qword_100A19EE8;
        if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
        {
          sub_10003AE4C(*(void *)v31, (uint64_t)v68);
          if (v71 >= 0) {
            v34 = v68;
          }
          else {
            v34 = *(unsigned char **)v68;
          }
          int v35 = *(unsigned __int16 *)(v31 + 8);
          long long v36 = "YES";
          if (!*(unsigned char *)(v31 + 24)) {
            long long v36 = "NO";
          }
          int v37 = *(_DWORD *)(v31 + 28);
          *(_DWORD *)buf = 136446978;
          *(void *)&buf[4] = v34;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v35;
          *(_WORD *)&buf[18] = 2082;
          *(void *)&buf[20] = v36;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v37;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "statedump: \"%{public}s\" psm:0z%0x requiresEncryption:%{public}s pid:%d", buf, 0x22u);
          if (v71 < 0) {
            operator delete(*(void **)v68);
          }
          uint64_t v32 = a1[6];
        }
        v31 += 48;
      }
      long long v38 = v65;
      long long v39 = (void *)v65[1];
      if (v39)
      {
        do
        {
          long long v40 = v39;
          long long v39 = (void *)*v39;
        }
        while (v39);
      }
      else
      {
        do
        {
          long long v40 = (void *)v38[2];
          BOOL v41 = *v40 == (void)v38;
          long long v38 = v40;
        }
        while (!v41);
      }
      uint64_t v2 = v40;
    }
    while (v40 != a1 + 3);
  }
  long long v42 = qword_100A19EE8;
  if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "statedump: Zombied listeners", buf, 2u);
  }
  for (j = (uint64_t *)a1[11]; j != (uint64_t *)a1[12]; ++j)
  {
    uint64_t v44 = *j;
    long long v45 = qword_100A19EE8;
    if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
    {
      long long v46 = "LE";
      if (!*(unsigned char *)(v44 + 56)) {
        long long v46 = "Classic";
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = v46;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "statedump: --------- Endpoint type: %{public}s ---------", buf, 0xCu);
      long long v45 = qword_100A19EE8;
    }
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      long long v47 = "Client for";
      if (!*(unsigned char *)(v44 + 4)) {
        long long v47 = "Listener for";
      }
      int v48 = *(unsigned __int16 *)(v44 + 2);
      v49 = "Yes";
      if (!*(unsigned char *)v44) {
        v49 = "No";
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&buf[4] = v47;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v48;
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = v49;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "statedump:          %{public}s PSM:0x%04x Zombied:%{public}s", buf, 0x1Cu);
      long long v45 = qword_100A19EE8;
    }
    if (*(unsigned char *)(v44 + 56) == 1)
    {
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "statedump:          Params:", buf, 2u);
        long long v45 = qword_100A19EE8;
      }
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        int v50 = *(unsigned __int16 *)(v44 + 14);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v50;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "statedump:              creditSignalDelta:%d", buf, 8u);
        long long v45 = qword_100A19EE8;
      }
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        int v51 = *(unsigned __int16 *)(v44 + 16);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v51;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "statedump:              initialCredits:%d", buf, 8u);
        long long v45 = qword_100A19EE8;
      }
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        int v52 = *(unsigned __int16 *)(v44 + 10);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v52;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "statedump:              inMPS:%d", buf, 8u);
        long long v45 = qword_100A19EE8;
      }
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        int v53 = *(unsigned __int16 *)(v44 + 8);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v53;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "statedump:              inMTU:%d", buf, 8u);
        long long v45 = qword_100A19EE8;
      }
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        int v54 = *(unsigned __int8 *)(v44 + 12);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v54;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "statedump:              requiresAuth:%d", buf, 8u);
        long long v45 = qword_100A19EE8;
      }
    }
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "statedump:          Connected devices:", buf, 2u);
    }
    v55 = *(const unsigned __int8 **)(v44 + 120);
    v56 = *(unsigned __int16 **)(v44 + 128);
    while (v55 != (const unsigned __int8 *)v56)
    {
      v57 = qword_100A19EE8;
      if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
      {
        memset(buf, 0, 37);
        uuid_unparse_upper(v55 + 2, (char *)buf);
        sub_10004191C(v68, (char *)buf);
        if (v71 >= 0) {
          v58 = v68;
        }
        else {
          v58 = *(unsigned char **)v68;
        }
        int v59 = *(unsigned __int16 *)v55;
        int v60 = *((unsigned __int16 *)v55 + 10);
        int v61 = *((unsigned __int16 *)v55 + 11);
        int v62 = v55[18];
        *(_DWORD *)buf = 136447234;
        *(void *)&buf[4] = v58;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v59;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v60;
        *(_WORD *)&buf[24] = 1024;
        *(_DWORD *)&buf[26] = v61;
        *(_WORD *)&buf[30] = 1024;
        *(_DWORD *)&buf[32] = v62;
        _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "statedump:             %{public}s (0x%04x) intMTU:%d outMTU:%d state:%d", buf, 0x24u);
        if (v71 < 0) {
          operator delete(*(void **)v68);
        }
        v56 = *(unsigned __int16 **)(v44 + 128);
      }
      v55 += 26;
    }
  }
  uint64_t v63 = sub_1002C5648();
  return nullsub_95(v63);
}

uint64_t sub_100406E90(uint64_t a1)
{
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  if (v3 != v2)
  {
    do
    {
      uint64_t v4 = *v3;
      if (*v3)
      {
        size_t v5 = *(void **)(v4 + 120);
        if (v5)
        {
          *(void *)(v4 + 128) = v5;
          operator delete(v5);
        }
        operator delete();
      }
      ++v3;
    }
    while (v3 != v2);
    uint64_t v3 = *(uint64_t **)(a1 + 8);
  }
  if (v3)
  {
    *(void *)(a1 + 16) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_100406F1C(uint64_t a1, __int16 a2, char a3, int a4, int a5, int a6, int a7, int a8, char a9, int a10)
{
  *(unsigned char *)a1 = 0;
  *(_WORD *)(a1 + 2) = a2;
  *(unsigned char *)(a1 + 4) = a3;
  *(unsigned char *)(a1 + 56) = a9;
  *(_DWORD *)(a1 + 112) = a10;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 120) = 0;
  *(_WORD *)(a1 + 8) = a5;
  *(_WORD *)(a1 + 10) = a6;
  *(unsigned char *)(a1 + 12) = a4;
  *(unsigned char *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = a8;
  *(_WORD *)(a1 + 16) = a7;
  *(_DWORD *)(a1 + 20) = -1;
  v16 = qword_100A19EE8;
  if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
  {
    v18[0] = 67110656;
    v18[1] = a5;
    __int16 v19 = 1024;
    int v20 = a6;
    __int16 v21 = 1024;
    int v22 = a4;
    __int16 v23 = 1024;
    int v24 = a8;
    __int16 v25 = 1024;
    int v26 = a7;
    __int16 v27 = 1024;
    int v28 = -1;
    __int16 v29 = 1024;
    int v30 = a10;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "New Endpoint created inMTU=%d inMPS=%d requiresAuth=%d creditSignalDelta=%d initialCredits=%d maxLatencyinMS=%d priority:%d", (uint8_t *)v18, 0x2Cu);
  }
  *(_DWORD *)(a1 + 24) = -64512;
  *(_WORD *)(a1 + 28) = 5000;
  *(_WORD *)(a1 + 36) = 0;
  *(void *)(a1 + 40) = 0;
  if (!a9)
  {
    *(unsigned char *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(unsigned char *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
  }
  return a1;
}

void sub_10040709C(id a1)
{
}

void sub_1004070E0()
{
}

void sub_100407104(id a1)
{
}

void sub_100407148()
{
}

void sub_10040716C(id a1)
{
}

void sub_1004071B0()
{
}

void sub_1004071D4(id a1)
{
}

void sub_100407218()
{
}

void sub_10040723C(id a1)
{
}

void sub_100407280()
{
}

uint64_t sub_1004072A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 1);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x9D89D89D89D89D8) {
    abort();
  }
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v9 = 0x4EC4EC4EC4EC4EC5 * ((v8 - v2) >> 1);
  if (2 * v9 > v4) {
    unint64_t v4 = 2 * v9;
  }
  if (v9 >= 0x4EC4EC4EC4EC4ECLL) {
    unint64_t v10 = 0x9D89D89D89D89D8;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v21 = v7;
  if (v10) {
    uint64_t v11 = (char *)sub_100407524(v7, v10);
  }
  else {
    uint64_t v11 = 0;
  }
  v12 = (unsigned __int8 *)&v11[26 * v3];
  std::string __p = v11;
  int v18 = v12;
  __int16 v19 = v12;
  int v20 = &v11[26 * v10];
  *(_WORD *)v12 = *(_WORD *)a2;
  uuid_copy(v12 + 2, (const unsigned __int8 *)(a2 + 2));
  uint64_t v13 = &v11[26 * v3];
  int v14 = *(_DWORD *)(a2 + 18);
  *(_DWORD *)(v13 + 21) = *(_DWORD *)(a2 + 21);
  *(_DWORD *)(v13 + 18) = v14;
  v19 += 26;
  sub_10040745C(a1, &__p);
  uint64_t v15 = a1[1];
  if (v19 != v18) {
    __int16 v19 = &v18[(v19 - v18 - 26) % 0x1AuLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v15;
}

void sub_100407408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10040745C(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a2[1];
  if (v4 != *a1)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = v6 + v7;
      *(_WORD *)(v6 + v7 - 26) = *(_WORD *)(v4 + v7 - 26);
      uuid_copy((unsigned __int8 *)(v6 + v7 - 24), (const unsigned __int8 *)(v4 + v7 - 24));
      int v9 = *(_DWORD *)(v4 + v7 - 8);
      *(_DWORD *)(v8 - 5) = *(_DWORD *)(v4 + v7 - 5);
      *(_DWORD *)(v8 - 8) = v9;
      v7 -= 26;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  uint64_t v10 = *a1;
  *a1 = v6;
  a2[1] = v10;
  uint64_t v11 = a1[1];
  a1[1] = a2[2];
  a2[2] = v11;
  uint64_t v12 = a1[2];
  a1[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
}

void *sub_100407524(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x9D89D89D89D89D9) {
    sub_1000616DC();
  }
  return operator new(26 * a2);
}

void sub_100407570(id a1)
{
}

uint64_t sub_1004075F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  do
  {
    *(_WORD *)a3 = *(_WORD *)v4;
    uuid_copy((unsigned __int8 *)(a3 + 2), (const unsigned __int8 *)(v4 + 2));
    int v6 = *(_DWORD *)(v4 + 18);
    *(_DWORD *)(a3 + 21) = *(_DWORD *)(v4 + 21);
    *(_DWORD *)(a3 + 18) = v6;
    a3 += 26;
    v4 += 26;
  }
  while (v4 != v5);
  return v5;
}

void sub_100407688(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, v5, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

uint64_t sub_1004076A4(uint64_t a1)
{
  uint64_t v2 = (void *)sub_100283C88(a1, 9);
  *uint64_t v2 = off_1009ACE40;
  v2[32] = off_1009ACF78;
  v2[33] = off_1009AD048;
  v2[34] = off_1009AD070;
  sub_1004496B0((uint64_t)(v2 + 35));
  *(_DWORD *)(a1 + 432) = 0;
  *(void *)(a1 + 520) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 440) = 0;
  *(_DWORD *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(void *)(a1 + 504) = a1 + 512;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 536) = 0;
  *(void *)(a1 + 528) = a1 + 536;
  sub_100052DA8(a1 + 552);
  sub_100052DA8(a1 + 632);
  sub_1002B80C0((pthread_cond_t *)(a1 + 696));
  *(unsigned char *)(a1 + 616) = 0;
  mach_timebase_info((mach_timebase_info_t)(a1 + 620));
  atomic_store(0, (unint64_t *)(a1 + 744));
  atomic_store(0, (unint64_t *)(a1 + 752));
  atomic_store(0, (unint64_t *)(a1 + 760));
  *(void *)(a1 + 768) = mach_absolute_time();
  return a1;
}

void sub_1004077F8(_Unwind_Exception *a1)
{
  sub_100052DA4(v4);
  sub_100052DA4(v3);
  uint64_t v6 = (void **)(v1 + 440);
  sub_1000486F0(v1 + 528, *(void **)(v1 + 536));
  sub_1000486F0(v1 + 504, *(void **)(v1 + 512));

  uint64_t v7 = *(void **)(v1 + 472);
  if (v7)
  {
    *(void *)(v1 + 480) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *v6;
  if (*v6)
  {
    *(void *)(v1 + 448) = v8;
    operator delete(v8);
  }
  sub_1004497A0(v2);
  sub_100283DC8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10040789C(uint64_t a1)
{
  *(void *)a1 = off_1009ACE40;
  *(void *)(a1 + 256) = off_1009ACF78;
  *(void *)(a1 + 264) = off_1009AD048;
  *(void *)(a1 + 272) = off_1009AD070;
  sub_1002B812C(a1 + 696);
  sub_100052DA4(a1 + 632);
  sub_100052DA4(a1 + 552);
  sub_1000486F0(a1 + 528, *(void **)(a1 + 536));
  sub_1000486F0(a1 + 504, *(void **)(a1 + 512));

  uint64_t v2 = *(void **)(a1 + 472);
  if (v2)
  {
    *(void *)(a1 + 480) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 440);
  if (v3)
  {
    *(void *)(a1 + 448) = v3;
    operator delete(v3);
  }
  sub_1004497A0(a1 + 280);

  return sub_100283DC8(a1);
}

uint64_t sub_1004079B0(uint64_t a1)
{
  return sub_10040789C(a1 - 264);
}

void sub_1004079B8(uint64_t a1)
{
  sub_10040789C(a1);

  operator delete();
}

void sub_1004079F0(uint64_t a1)
{
  sub_10040789C(a1 - 264);

  operator delete();
}

uint64_t sub_100407A2C(uint64_t a1)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AD810);
  }
  sub_100061288((uint64_t)off_1009F7EF8 + 240, a1 + 272);
  *(unsigned char *)(a1 + 780) = 0;
  uint64_t v2 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 8))(v2))
  {
    uint64_t v3 = sub_100017768();
    sub_10004191C(v7, "BTAudioHALPlugin");
    sub_10004191C(__p, "BTAudioHALEnableAudioLogging");
    (*(void (**)(uint64_t, void **, void **, uint64_t))(*(void *)v3 + 72))(v3, v7, __p, a1 + 780);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  return 0;
}

void sub_100407B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100407B74(uint64_t a1)
{
  uint64_t v1 = a1 + 280;
  sub_1004497A4(a1 + 280);
  int v15 = 0;
  uint64_t v2 = sub_100017768();
  sub_10004191C(buf, "A2DP");
  sub_10004191C(__p, "mediaFlushTimeoutMs");
  int v3 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v2 + 88))(v2, buf, __p, &v15);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0)
  {
    operator delete(*(void **)buf);
    if (!v3) {
      goto LABEL_10;
    }
  }
  else if (!v3)
  {
    goto LABEL_10;
  }
  uint64_t v4 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v15;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Warning: Setting user defined media flush timeout to %d ms", buf, 8u);
  }
  word_1009FB672 = v15;
LABEL_10:
  uint64_t v5 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 712))(v5))
  {
    char v6 = qword_100A19E30;
    char v7 = 10;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = 10;
      char v8 = "Warning: Legacy iPad overwritting SW Queue to %d";
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v8, buf, 8u);
    }
  }
  else
  {
    uint64_t v9 = sub_100035F54();
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v9 + 720))(v9)) {
      goto LABEL_18;
    }
    char v6 = qword_100A19E30;
    char v7 = 20;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = 20;
      char v8 = "Warning: Legacy HW that does not support EPA/Stats overwritting SW Queue to %d";
      goto LABEL_16;
    }
  }
  byte_1009FB676 = v7;
LABEL_18:
  buf[0] = 0;
  sub_10001B8E0(buf);
  int v10 = sub_100135088(off_1009AD090, 0, xmmword_1007BE9B0, (uint64_t)&unk_1009FB670);
  sub_10001B910(buf);
  if (v10)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
      sub_100764124();
    }
    uint64_t v11 = 1;
  }
  else
  {
    sub_100449F18(v1);
    uint64_t v11 = 0;
  }
  sub_10001B8AC(buf);
  return v11;
}

void sub_100407E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100407EA0(uint64_t a1)
{
  uint64_t v1 = a1 + 280;
  sub_10044A038(a1 + 280);
  char v4 = 0;
  sub_10001B8E0(&v4);
  if (sub_100135AD4())
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
      sub_10076418C();
    }
    uint64_t v2 = 1;
  }
  else
  {
    sub_100449730(v1);
    uint64_t v2 = 0;
  }
  sub_10001B8AC(&v4);
  return v2;
}

void sub_100407F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_100407F48(uint64_t a1)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AD810);
  }
  sub_100052718((uint64_t)off_1009F7EF8 + 240, a1 + 272);
  return 0;
}

void sub_100407FA8(os_unfair_lock_s *a1, unsigned char *a2, int a3, __int16 a4)
{
  unsigned int v8 = sub_100634250((uint64_t)a2);
  __int16 v9 = v8;
  uint64_t v10 = sub_1004080A8((uint64_t)a1, v8);
  if (a3) {
    int v11 = 2;
  }
  else {
    int v11 = 0;
  }
  sub_1002E86B0((uint64_t)a2, v11);
  BOOL v12 = 0;
  if (a2[723]) {
    BOOL v13 = 1;
  }
  else {
    BOOL v13 = a2[704] == 0;
  }
  if (!v13) {
    BOOL v12 = a2[706] == 0;
  }
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100408228;
  v14[3] = &unk_1009AD178;
  v14[4] = a1;
  v14[5] = v10;
  __int16 v15 = v9;
  char v17 = a3;
  BOOL v18 = v12;
  __int16 v16 = a4;
  v14[6] = a2;
  sub_10040815C(a1 + 108, v14);
}

uint64_t sub_1004080A8(uint64_t a1, unsigned int a2)
{
  unsigned __int16 v11 = a2;
  uint64_t v2 = *(void *)(a1 + 512);
  if (v2)
  {
    uint64_t v4 = a1 + 504;
    uint64_t v5 = a1 + 512;
    uint64_t v6 = a1 + 512;
    do
    {
      unsigned int v7 = *(unsigned __int16 *)(v2 + 32);
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        __int16 v9 = (uint64_t *)v2;
      }
      else {
        __int16 v9 = (uint64_t *)(v2 + 8);
      }
      if (v8) {
        uint64_t v6 = v2;
      }
      uint64_t v2 = *v9;
    }
    while (*v9);
    if (v6 != v5 && *(unsigned __int16 *)(v6 + 32) <= a2) {
      return *sub_100409A78(v4, &v11);
    }
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
    sub_1007641F4();
  }
  return 0;
}

void sub_10040815C(os_unfair_lock_s *a1, void *a2)
{
  int v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }
  if (v4)
  {
    uint64_t v6 = v4;
    operator delete(v4);
  }
}

void sub_100408200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

void sub_100408228(uint64_t a1, void (***a2)(void, void, void, void, void, void, void))
{
  int v3 = *(os_unfair_lock_s **)(a1 + 32);
  (**a2)(a2, *(void *)(a1 + 40), *(unsigned __int16 *)(a1 + 56), *(unsigned __int8 *)(a1 + 60), *(unsigned __int8 *)(a1 + 61), *(unsigned __int16 *)(a1 + 58), *(unsigned __int16 *)(*(void *)(a1 + 48) + 708));
  if (*(unsigned char *)(a1 + 61))
  {
    uint64_t v4 = *(void *)(a1 + 48);
    if (*(unsigned char *)(a1 + 60))
    {
      int v5 = 1000 * *(unsigned __int16 *)(v4 + 708);
      uint64_t v6 = *(void *)(a1 + 48);
      sub_100634E6C(v6, v5);
    }
    else
    {
      if (*(unsigned char *)(v4 + 705))
      {
        *(unsigned char *)(v4 + 705) = 0;
        sub_100408368(v3, v4, 0);
        uint64_t v4 = *(void *)(a1 + 48);
      }
      if (*(unsigned char *)(v4 + 710))
      {
        *(unsigned char *)(v4 + 710) = 0;
        __int16 v7 = *(_WORD *)(a1 + 56);
        v8[0] = _NSConcreteStackBlock;
        v8[1] = 3221225472;
        v8[2] = sub_100408AFC;
        v8[3] = &unk_1009AD1D8;
        __int16 v9 = v7;
        char v10 = 1;
        sub_10040815C(v3 + 108, v8);
      }
    }
  }
}

void sub_100408368(os_unfair_lock_s *a1, uint64_t a2, char a3)
{
  if (a2)
  {
    if (*(unsigned char *)(a2 + 704)) {
      sub_100634E6C(a2, 1000 * *(unsigned __int16 *)(a2 + 708));
    }
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100408B30;
    v6[3] = &unk_1009AD1D8;
    __int16 v7 = sub_100634250(a2);
    char v8 = a3;
    sub_10040815C(a1 + 108, v6);
  }
}

void sub_100408428(os_unfair_lock_s *a1, uint64_t a2, __int16 a3)
{
  if (*(unsigned char *)(a2 + 711))
  {
    int v6 = sub_100445940(a2 + 400);
    unsigned int v7 = sub_100634250(a2);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1004084E8;
    v8[3] = &unk_1009AD198;
    void v8[4] = sub_1004080A8((uint64_t)a1, v7);
    __int16 v10 = a3;
    int v9 = v6;
    sub_10040815C(a1 + 108, v8);
  }
}

uint64_t sub_1004084E8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void, void))(*(void *)a2 + 8))(a2, *(void *)(a1 + 32), *(unsigned __int16 *)(a1 + 44), *(unsigned int *)(a1 + 40));
}

void sub_100408520(os_unfair_lock_s *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 711))
  {
    unsigned int v3 = sub_100634250(a2);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1004085BC;
    v4[3] = &unk_1009AD1B8;
    v4[4] = sub_1004080A8((uint64_t)a1, v3);
    sub_10040815C(a1 + 108, v4);
  }
}

uint64_t sub_1004085BC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(a1 + 32));
}

void sub_1004085EC(os_unfair_lock_s *a1, uint64_t a2, char a3)
{
  if (*(unsigned char *)(a2 + 704))
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100408684;
    v5[3] = &unk_1009AD1D8;
    __int16 v6 = sub_100634250(a2);
    char v7 = a3;
    sub_10040815C(a1 + 108, v5);
  }
}

uint64_t sub_100408684(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 32))(a2, *(unsigned __int16 *)(a1 + 32), *(unsigned __int8 *)(a1 + 34));
}

void sub_1004086B8(os_unfair_lock_s *a1, uint64_t a2, char a3)
{
  if (*(unsigned char *)(a2 + 704))
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100408750;
    v5[3] = &unk_1009AD1D8;
    __int16 v6 = sub_100634250(a2);
    char v7 = a3;
    sub_10040815C(a1 + 108, v5);
  }
}

uint64_t sub_100408750(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 24))(a2, *(unsigned __int16 *)(a1 + 32), *(unsigned __int8 *)(a1 + 34));
}

void sub_100408784(os_unfair_lock_s *a1, uint64_t a2, char a3)
{
  __int16 v6 = sub_100634250(a2);
  *(unsigned char *)(a2 + 706) = a3;
  if (*(unsigned char *)(a2 + 704))
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10040882C;
    v7[3] = &unk_1009AD1D8;
    __int16 v8 = v6;
    char v9 = a3;
    sub_10040815C(a1 + 108, v7);
  }
}

uint64_t sub_10040882C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 48))(a2, *(unsigned __int16 *)(a1 + 32), *(unsigned __int8 *)(a1 + 34));
}

void sub_100408860(os_unfair_lock_s *a1, uint64_t a2, char a3)
{
  if (*(unsigned char *)(a2 + 704))
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1004088F8;
    v5[3] = &unk_1009AD1D8;
    __int16 v6 = sub_100634250(a2);
    char v7 = a3;
    sub_10040815C(a1 + 108, v5);
  }
}

uint64_t sub_1004088F8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 40))(a2, *(unsigned __int16 *)(a1 + 32), *(unsigned __int8 *)(a1 + 34));
}

void sub_10040892C(os_unfair_lock_s *a1, uint64_t a2, char a3)
{
  if (*(unsigned char *)(a2 + 704))
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1004089C4;
    v5[3] = &unk_1009AD1D8;
    __int16 v6 = sub_100634250(a2);
    char v7 = a3;
    sub_10040815C(a1 + 108, v5);
  }
}

uint64_t sub_1004089C4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 56))(a2, *(unsigned __int16 *)(a1 + 32), *(unsigned __int8 *)(a1 + 34));
}

void sub_1004089F8(os_unfair_lock_s *a1, uint64_t a2, char a3)
{
  if (*(unsigned char *)(a2 + 704))
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100408A90;
    v5[3] = &unk_1009AD1D8;
    __int16 v6 = sub_100634250(a2);
    char v7 = a3;
    sub_10040815C(a1 + 108, v5);
  }
}

uint64_t sub_100408A90(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 64))(a2, *(unsigned __int16 *)(a1 + 32), *(unsigned __int8 *)(a1 + 34));
}

uint64_t sub_100408AC4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void, void))(*(void *)a2 + 104))(a2, *(void *)(a1 + 32), *(unsigned __int16 *)(a1 + 40), *(unsigned __int8 *)(a1 + 42));
}

uint64_t sub_100408AFC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 96))(a2, *(unsigned __int16 *)(a1 + 32), *(unsigned __int8 *)(a1 + 34));
}

uint64_t sub_100408B30(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 80))(a2, *(unsigned __int16 *)(a1 + 32), *(unsigned __int8 *)(a1 + 34));
}

void sub_100408B64(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100408BF4;
  v5[3] = &unk_1009AD218;
  __int16 v6 = sub_100634250(a2);
  void v5[4] = a3;
  sub_10040815C(a1 + 108, v5);
}

uint64_t sub_100408BF4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 88))(a2, *(unsigned __int16 *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_100408C28(os_unfair_lock_s *a1, uint64_t a2, char a3)
{
  __int16 v6 = sub_100634250(a2);
  uint64_t v7 = *(void *)(a2 + 608);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100408CCC;
  v8[3] = &unk_1009AD1F8;
  void v8[4] = v7;
  __int16 v9 = v6;
  char v10 = a3;
  sub_10040815C(a1 + 108, v8);
}

uint64_t sub_100408CCC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void, void))(*(void *)a2 + 112))(a2, *(void *)(a1 + 32), *(unsigned __int16 *)(a1 + 40), *(unsigned __int8 *)(a1 + 42));
}

void sub_100408D04(id a1, A2DPClientListener *a2)
{
}

void sub_100408D2C(os_unfair_lock_s *a1, void *a2)
{
  unsigned int v3 = a2;
  os_unfair_lock_lock(a1);
  int v5 = 0;
  __int16 v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }
  if (v4)
  {
    __int16 v6 = v4;
    operator delete(v4);
  }
}

void sub_100408DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100408DF8(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(void *)(a1 + 32));
}

uint64_t sub_100408E28(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 8))(a2, *(void *)(a1 + 32));
}

uint64_t sub_100408E58(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(a1 + 32));
}

uint64_t sub_100408E88(uint64_t a1, uint64_t a2)
{
  long long v7 = xmmword_1007BEA00;
  *(unsigned char *)(a1 + 616) = 1;
  if (sub_100478F30(a2, &v7, 4u))
  {
    char v6 = 0;
    sub_10001B8E0(&v6);
    uint64_t v3 = sub_100136A1C((int *)(a2 + 128));
    if (v3)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
        sub_10076425C();
      }
      uint64_t v3 = 1;
    }
    sub_10001B8AC(&v6);
  }
  else
  {
    uint64_t v4 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
      sub_1007642C4(a2, v4);
    }
    return 305;
  }
  return v3;
}

void sub_100408F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_100408F7C(void *a1, uint64_t a2)
{
  __int16 v3 = sub_100409054(a1, a2);
  uint64_t v9 = 0;
  char v10 = &v9;
  uint64_t v11 = 0x2020000000;
  int v12 = 0;
  uint64_t v4 = sub_1004AFB34();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1004091C0;
  v7[3] = &unk_1009AD2A0;
  void v7[4] = &v9;
  v7[5] = a1;
  __int16 v8 = v3;
  sub_1000197D8(v4, v7);
  uint64_t v5 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v5;
}

void sub_10040903C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100409054(void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)a1[63];
  if (v4 == a1 + 64) {
    goto LABEL_14;
  }
  while (1)
  {
    uint64_t v5 = v4[5];
    int v6 = *(_DWORD *)(v5 + 128);
    int v7 = *(unsigned __int16 *)(v5 + 132);
    BOOL v8 = v6 == *(_DWORD *)(a2 + 128) && v7 == *(unsigned __int16 *)(a2 + 132);
    if (v8) {
      break;
    }
    uint64_t v9 = (void *)v4[1];
    if (v9)
    {
      do
      {
        char v10 = v9;
        uint64_t v9 = (void *)*v9;
      }
      while (v9);
    }
    else
    {
      do
      {
        char v10 = (void *)v4[2];
        BOOL v8 = *v10 == (void)v4;
        uint64_t v4 = v10;
      }
      while (!v8);
    }
    uint64_t v4 = v10;
    if (v10 == a1 + 64) {
      goto LABEL_14;
    }
  }
  uint64_t result = *((unsigned __int16 *)v4 + 16);
  if (!*((_WORD *)v4 + 16))
  {
LABEL_14:
    int v12 = qword_100A19E30;
    uint64_t result = os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEBUG);
    if (result)
    {
      sub_100474E18(a2, __p);
      if (v16 >= 0) {
        BOOL v13 = __p;
      }
      else {
        BOOL v13 = (void **)__p[0];
      }
      uint64_t v14 = a1[65];
      *(_DWORD *)buf = 136446466;
      BOOL v18 = v13;
      __int16 v19 = 2048;
      uint64_t v20 = v14;
      _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "No corresponding device for %{public}s found in fA2dpHandleToDeviceMap (%lu devices)", buf, 0x16u);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1004091C0(uint64_t a1)
{
  uint64_t result = sub_1004091F8(*(os_unfair_lock_s **)(a1 + 40), *(unsigned __int16 *)(a1 + 48));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_1004091F8(os_unfair_lock_s *a1, unsigned int a2)
{
  v15[0] = 0;
  v15[1] = 0;
  sub_10003AED0((uint64_t)v15, (uint64_t)&a1[138]);
  uint64_t v4 = sub_1004097B0((uint64_t)a1, a2);
  uint64_t v5 = sub_1004080A8((uint64_t)a1, a2);
  if (v5)
  {
    unsigned __int16 v6 = sub_100445248(v4 + 400);
    if (v6)
    {
      if ((*(_DWORD *)(v4 + 728) - 4) <= 2) {
        sub_10040A4D0((uint64_t)a1, a2);
      }
      *(_DWORD *)(v4 + 728) = 7;
      int v7 = qword_100A19E30;
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Closing media channel for handle %d", buf, 8u);
      }
      if (*(unsigned char *)(v4 + 723))
      {
        if (*(unsigned char *)(v5 + 960)) {
          *(_DWORD *)(v5 + 980) = 1;
        }
        sub_10048698C(v5, 0);
        sub_10040D9FC(a1);
      }
      LOBYTE(v13[0]) = 0;
      sub_10001B8E0(v13);
      int v8 = sub_100138498(v6, 0);
      sub_10001B910(v13);
      if (v8 && os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
      {
        sub_100474E18(v5, buf);
        sub_100764400();
      }
      sub_10001B8AC(v13);
    }
    else
    {
      char v10 = qword_100A19E30;
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Disconnecting A2DP when no AVDTP stream has been established yet", buf, 2u);
      }
    }
    char v14 = 0;
    sub_10001B8E0(&v14);
    int v11 = sub_100136FB8(a2);
    sub_10001B910(&v14);
    uint64_t v9 = 0;
    if (v11 && v11 != 122)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
      {
        sub_100474E18(v5, v13);
        sub_1007643B0();
      }
      uint64_t v9 = 1;
      sub_1004BE538((uint64_t)a1, v5, 1);
    }
    sub_10001B8AC(&v14);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
      sub_10076437C();
    }
    uint64_t v9 = 0;
  }
  sub_10003AFB4((uint64_t)v15);
  return v9;
}

void sub_1004094C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

uint64_t sub_100409518()
{
  return 3;
}

void sub_100409520(void *a1, uint64_t a2)
{
  int v4 = sub_100409054(a1, a2);
  if (v4)
  {
    __int16 v5 = v4;
    uint64_t v6 = sub_1004AFB34();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1004095B8;
    v7[3] = &unk_1009988A0;
    __int16 v8 = v5;
    void v7[4] = a1;
    v7[5] = a2;
    sub_100013018(v6, v7);
  }
}

void sub_1004095B8(uint64_t a1)
{
  uint64_t v2 = sub_1004097B0(*(void *)(a1 + 32), *(unsigned __int16 *)(a1 + 48));
  if (v2)
  {
    uint64_t v3 = v2;
    int v4 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      sub_1004A82EC((unsigned __int8 *)(*(void *)(a1 + 40) + 128), v13);
      int v5 = v14;
      uint64_t v6 = (void **)v13[0];
      sub_100475EE0(*(void *)(a1 + 40), (uint64_t)__p);
      int v7 = v13;
      if (v5 < 0) {
        int v7 = v6;
      }
      if (v12 >= 0) {
        __int16 v8 = __p;
      }
      else {
        __int16 v8 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136446723;
      *(void *)&uint8_t buf[4] = v7;
      __int16 v16 = 2160;
      uint64_t v17 = 1752392040;
      __int16 v18 = 2081;
      __int16 v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Device %{public}s name changed to %{private, mask.hash}s", buf, 0x20u);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      if (v14 < 0) {
        operator delete(v13[0]);
      }
    }
    sub_100475EE0(*(void *)(a1 + 40), (uint64_t)v13);
    if (v14 >= 0) {
      uint64_t v9 = (char *)v13;
    }
    else {
      uint64_t v9 = (char *)v13[0];
    }
    sub_10004191C(buf, v9);
    sub_1002E7BD4(v3, (uint64_t)buf);
    if (SHIBYTE(v18) < 0) {
      operator delete(*(void **)buf);
    }
    if (v14 < 0) {
      operator delete(v13[0]);
    }
    int v10 = sub_1004455E4(v3 + 400);
    sub_1005D0EF4(v3, v10);
  }
}

void sub_100409770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004097B0(uint64_t a1, unsigned int a2)
{
  unsigned __int16 v11 = a2;
  uint64_t v2 = *(void *)(a1 + 536);
  if (v2)
  {
    uint64_t v4 = a1 + 528;
    uint64_t v5 = a1 + 536;
    uint64_t v6 = a1 + 536;
    do
    {
      unsigned int v7 = *(unsigned __int16 *)(v2 + 32);
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        uint64_t v9 = (uint64_t *)v2;
      }
      else {
        uint64_t v9 = (uint64_t *)(v2 + 8);
      }
      if (v8) {
        uint64_t v6 = v2;
      }
      uint64_t v2 = *v9;
    }
    while (*v9);
    if (v6 != v5 && *(unsigned __int16 *)(v6 + 32) <= a2) {
      return *sub_100409A78(v4, &v11);
    }
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
    sub_100764450();
  }
  return 0;
}

void sub_100409864(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10040986C(uint64_t a1, uint64_t a2, _WORD *a3)
{
  long long v16 = xmmword_1007BEA00;
  std::string __p = 0;
  char v14 = 0;
  uint64_t v15 = 0;
  if (sub_10047AE08(a2, (uint64_t)&v16, 4u, &__p))
  {
    uint64_t v5 = __p;
    uint64_t v4 = v14;
    if (__p == v14)
    {
      uint64_t v10 = 0;
      if (!__p) {
        return v10;
      }
      goto LABEL_19;
    }
    uint64_t v6 = __p;
    do
    {
      unint64_t v7 = *((unsigned __int16 *)v6 + 1);
      if ((v7 & 1) == 0 && *((_WORD *)v6 + 1))
      {
        unint64_t v8 = 0;
        uint64_t v9 = (_DWORD *)(v6[1] + 24);
        do
        {
          if (*(v9 - 4) == 25) {
            *a3 = *v9;
          }
          v9 += 8;
          v8 += 2;
        }
        while (v8 < v7);
      }
      v6 += 2;
    }
    while (v6 != v4);
    while (v5 != (_OWORD *)v4)
    {
      long long v12 = *v5;
      sub_1002D5394(&v12);
      ++v5;
      uint64_t v4 = v14;
    }
    uint64_t v10 = 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
      sub_1007644B8();
    }
    uint64_t v10 = 305;
  }
  uint64_t v5 = __p;
  if (__p)
  {
LABEL_19:
    char v14 = v5;
    operator delete(v5);
  }
  return v10;
}

void sub_100409998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004099B8(uint64_t a1, int a2)
{
  uint64_t v3 = *(void **)(a1 + 528);
  uint64_t v4 = (void *)(a1 + 536);
  if (v3 == (void *)(a1 + 536)) {
    goto LABEL_11;
  }
  while (!sub_100445264(v3[5] + 400, a2))
  {
    uint64_t v5 = (void *)v3[1];
    if (v5)
    {
      do
      {
        uint64_t v6 = v5;
        uint64_t v5 = (void *)*v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        uint64_t v6 = (void *)v3[2];
        BOOL v7 = *v6 == (void)v3;
        uint64_t v3 = v6;
      }
      while (!v7);
    }
    uint64_t v3 = v6;
    if (v6 == v4) {
      goto LABEL_11;
    }
  }
  uint64_t result = *((unsigned __int16 *)v3 + 16);
  if (!*((_WORD *)v3 + 16))
  {
LABEL_11:
    uint64_t result = os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1007644EC();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_100409A78(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2 = *(uint64_t ***)(a1 + 8);
  if (!v2) {
LABEL_8:
  }
    abort();
  unsigned int v3 = *a2;
  while (1)
  {
    while (1)
    {
      unsigned int v4 = *((unsigned __int16 *)v2 + 16);
      if (v3 >= v4) {
        break;
      }
      uint64_t v2 = (uint64_t **)*v2;
      if (!v2) {
        goto LABEL_8;
      }
    }
    if (v4 >= v3) {
      return (uint64_t *)(v2 + 5);
    }
    uint64_t v2 = (uint64_t **)v2[1];
    if (!v2) {
      goto LABEL_8;
    }
  }
}

uint64_t sub_100409AC8(void *a1, int a2)
{
  char v21 = 0;
  uint64_t v4 = sub_100017768();
  sub_10004191C(buf, "A2DP");
  sub_10004191C(__p, "WirelessSplitter");
  (*(void (**)(uint64_t, uint8_t *, unsigned char *, char *))(*(void *)v4 + 72))(v4, buf, __p, &v21);
  if (v25 < 0) {
    operator delete(*(void **)__p);
  }
  if (v27 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v5 = (void *)a1[63];
  if (v5 == a1 + 64) {
    return 0;
  }
  unsigned __int8 v6 = 0;
  while (1)
  {
    uint64_t v7 = *((unsigned __int16 *)v5 + 16);
    uint64_t v8 = v5[5];
    int v9 = sub_100478B2C(v8, 27);
    ++v6;
    int v10 = v7 == a2 ? 0 : v9;
    if (v10 != 1) {
      break;
    }
    unint64_t v11 = a1[65];
    BOOL v12 = v11 < 2 || v11 == v6;
    if (v12 || !sub_100487464(v8)) {
      return v7;
    }
    if (qword_1009F7EF0 != -1) {
      dispatch_once(&qword_1009F7EF0, &stru_1009AD830);
    }
    if (!off_1009F7EE8) {
      return v7;
    }
    int v19 = 0;
    int v20 = 0;
    sub_1004565B8((uint64_t)off_1009F7EE8, v8, &v20, &v19);
    if (!v20 || !v19)
    {
      long long v16 = qword_100A19E30;
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
      {
        sub_100475EE0(v8, (uint64_t)buf);
        if (v27 >= 0) {
          uint64_t v17 = buf;
        }
        else {
          uint64_t v17 = *(uint8_t **)buf;
        }
        *(_DWORD *)std::string __p = 141558275;
        *(void *)&__p[4] = 1752392040;
        __int16 v23 = 2081;
        int v24 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Wireless Splitter: Found another device which is in-ear %{private, mask.hash}s", __p, 0x16u);
        if (v27 < 0) {
          operator delete(*(void **)buf);
        }
      }
      return v7;
    }
LABEL_24:
    BOOL v13 = (void *)v5[1];
    if (v13)
    {
      do
      {
        char v14 = v13;
        BOOL v13 = (void *)*v13;
      }
      while (v13);
    }
    else
    {
      do
      {
        char v14 = (void *)v5[2];
        BOOL v12 = *v14 == (void)v5;
        uint64_t v5 = v14;
      }
      while (!v12);
    }
    uint64_t v5 = v14;
    if (v14 == a1 + 64) {
      return 0;
    }
  }
  if (!v21 || (sub_100478B2C(v8, 12) & (v7 != a2)) != 1) {
    goto LABEL_24;
  }
  __int16 v18 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Wireless Splitter enabled using defaults writes with device with handle=%d", buf, 8u);
  }
  return v7;
}

void sub_100409DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100409E0C(void *a1, uint64_t a2)
{
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, (uint64_t)(a1 + 69));
  unsigned int v4 = sub_100409054(a1, a2);
  BOOL v5 = os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEBUG);
  if (!v4)
  {
    if (v5) {
      sub_100764554();
    }
    goto LABEL_9;
  }
  if (v5) {
    sub_10076460C();
  }
  uint64_t v6 = sub_1004097B0((uint64_t)a1, v4);
  if (!v6)
  {
LABEL_9:
    uint64_t v7 = 0;
    goto LABEL_10;
  }
  uint64_t v7 = sub_100634DBC(v6);
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEBUG)) {
    sub_100764594();
  }
LABEL_10:
  sub_10003AFB4((uint64_t)v9);
  return v7;
}

void sub_100409EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100409F00(os_unfair_lock_s *a1, unsigned int a2)
{
  uint64_t v4 = sub_1004097B0((uint64_t)a1, a2);
  __int16 v5 = sub_100445248(v4 + 400);
  uint64_t v6 = sub_1004080A8((uint64_t)a1, a2);
  *(_WORD *)(v4 + 720) = 0;
  if (v5)
  {
    uint64_t v7 = v6;
    uint64_t v8 = qword_100A19E30;
    if (v6)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(v7, __p);
        int v9 = v18 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Starting A2DP audio streaming to device %{public}s", buf, 0xCu);
        if (v18 < 0) {
          operator delete(__p[0]);
        }
      }
      *(_DWORD *)(v4 + 728) = 5;
      sub_1002E8300(v4);
      int v10 = sub_100445940(v4 + 400);
      int v11 = v10;
      int v12 = *(_DWORD *)(v4 + 656);
      if (*(unsigned char *)(v4 + 723))
      {
        if (v10 == 2)
        {
          LOWORD(v12) = 244;
        }
        else if (v10 == 33023)
        {
          LOWORD(v12) = 174;
        }
      }
      if (qword_1009F8158 != -1) {
        dispatch_once(&qword_1009F8158, &stru_1009AD850);
      }
      sub_1004FA7D4((os_unfair_lock_s *)off_1009F8150, 1, ((unint64_t)*(unsigned __int8 *)(v7 + 128) << 40) | ((unint64_t)*(unsigned __int8 *)(v7 + 129) << 32) | ((unint64_t)*(unsigned __int8 *)(v7 + 130) << 24) | ((unint64_t)*(unsigned __int8 *)(v7 + 131) << 16) | ((unint64_t)*(unsigned __int8 *)(v7 + 132) << 8) | *(unsigned __int8 *)(v7 + 133));
      sub_100407FA8(a1, (unsigned char *)v4, 1, v12);
      *(_DWORD *)(v7 + 1320) |= 0x10u;
      if (v11 == 33023 || v11 == 2)
      {
        sub_10003FB34();
        if (sub_100350F3C())
        {
          *(unsigned char *)(v4 + 711) = 1;
          sub_100408428(a1, v4, v12);
        }
      }
      if (*(unsigned char *)(v4 + 723) && sub_100478B2C(v7, 27))
      {
        char v14 = qword_100A19E30;
        if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Wireless Splitter sending BT_ACCESSORY_WS_SESSION_START", (uint8_t *)__p, 2u);
        }
        if (qword_1009F80A0 != -1) {
          dispatch_once(&qword_1009F80A0, &stru_1009AD870);
        }
        sub_10028819C((uint64_t)off_1009F8098, v7, 1, 1);
        *(unsigned char *)(v4 + 724) = 1;
      }
      uint64_t v15 = qword_100A19E30;
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_INFO))
      {
        sub_100474E18(v7, __p);
        if (v18 >= 0) {
          long long v16 = __p;
        }
        else {
          long long v16 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Reporting A2DP audio is connected and streaming for %{public}s", buf, 0xCu);
        if (v18 < 0) {
          operator delete(__p[0]);
        }
      }
      sub_1004BE7AC();
    }
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
      sub_100764680();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
  {
    sub_10076464C();
  }
  return 1;
}

void sub_10040A494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10040A4D0(uint64_t a1, unsigned int a2)
{
  v18[0] = 0;
  v18[1] = 0;
  sub_10003AED0((uint64_t)v18, a1 + 552);
  uint64_t v4 = sub_1004097B0(a1, a2);
  int v5 = (unsigned __int16)sub_100445248(v4 + 400);
  if (!v5)
  {
    uint64_t v9 = qword_100A19E30;
    uint64_t v10 = 0;
    if (!os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_30;
    }
    LODWORD(__p[0]) = 67109120;
    HIDWORD(__p[0]) = a2;
    int v11 = "Stop streaming issued when there is no active stream handle for a2dp handle %d";
    int v12 = v9;
    os_log_type_t v13 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_21;
  }
  uint64_t v6 = sub_1004080A8(a1, a2);
  if (!v6)
  {
    uint64_t v14 = qword_100A19E30;
    if (!os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_INFO))
    {
LABEL_22:
      uint64_t v10 = 0;
      goto LABEL_30;
    }
    LODWORD(__p[0]) = 67109120;
    HIDWORD(__p[0]) = v5;
    int v11 = "Unable to find device for handle %d";
    int v12 = v14;
    os_log_type_t v13 = OS_LOG_TYPE_INFO;
LABEL_21:
    _os_log_impl((void *)&_mh_execute_header, v12, v13, v11, (uint8_t *)__p, 8u);
    goto LABEL_22;
  }
  if ((*(_DWORD *)(v4 + 728) - 4) <= 2)
  {
    if (*(_DWORD *)(v4 + 732) == 1) {
      *(_DWORD *)(v4 + 732) = 0;
    }
    if (qword_1009F80B0 != -1) {
      dispatch_once(&qword_1009F80B0, &stru_1009AD890);
    }
    if ((sub_1005734EC() & 1) == 0)
    {
      LODWORD(__p[0]) = 0;
      *(_DWORD *)buf = 0;
      uint64_t v19 = 0;
      sub_10047B7A8(v6, __p, buf, (_DWORD *)&v19 + 1, &v19);
      *(_WORD *)(v4 + 708) = 150;
    }
    uint64_t v7 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(v6, __p);
      if (v21 >= 0) {
        uint64_t v8 = __p;
      }
      else {
        uint64_t v8 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136446210;
      __int16 v23 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Reporting media channel has closed for device %{public}s", buf, 0xCu);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }
    sub_1004BE7AC();
  }
  uint64_t v15 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(v6, __p);
    long long v16 = v21 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    __int16 v23 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Device %{public}s was not streaming and there is no sendthread to stop", buf, 0xCu);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v10 = 1;
LABEL_30:
  sub_10003AFB4((uint64_t)v18);
  return v10;
}

void sub_10040A9AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10040A9F0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  sub_10047B7A8(a2, (_DWORD *)&v6 + 1, &v6, (_DWORD *)&v5 + 1, &v5);
  if ((a3 - 1) > 9) {
    return 150;
  }
  else {
    return word_1007BE9D2[a3 - 1];
  }
}

uint64_t sub_10040AA54(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t result = sub_1004080A8(a1, a2);
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = sub_100035F54();
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 96))(v6);
    if ((result & 1) == 0)
    {
      if (a3) {
        unsigned __int16 v7 = -4580;
      }
      else {
        unsigned __int16 v7 = -13288;
      }
      uint64_t v8 = qword_100A19E30;
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = "Unlimited";
        if (a3) {
          uint64_t v9 = "Limited to 2Mbps";
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Dynamic Packet Type Supported EDR packet types: %{public}s", buf, 0xCu);
      }
      *(void *)buf = 0;
      char v16 = 0;
      sub_10001B8E0(&v16);
      if (!sub_10017E2D4(v5 + 128, (uint64_t *)buf)
        && *(void *)buf
        && !*(unsigned char *)(*(void *)buf + 278))
      {
        sub_10018EF4C(*(uint64_t *)buf, v7, v10, v11, v12, v13, v14, v15);
      }
      sub_10001B910(&v16);
      return (uint64_t)sub_10001B8AC(&v16);
    }
  }
  return result;
}

void sub_10040ABA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

float sub_10040ABC4(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v8 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v12[0]) = 67109120;
    HIDWORD(v12[0]) = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Initiate Audio Delivery Speed Change Latency change target=%d", (uint8_t *)v12, 8u);
  }
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, a1 + 552);
  float v9 = 1.1;
  if (a3 != 1) {
    float v9 = 1.0;
  }
  if (a3 == 2) {
    float v10 = *(float *)"fff?";
  }
  else {
    float v10 = v9;
  }
  if (a2)
  {
    sub_100634EEC(a2, a4, v10);
    if (!a4) {
      *(float *)(a2 + 716) = v10;
    }
  }
  sub_10003AFB4((uint64_t)v12);
  return v10;
}

void sub_10040ACE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10040AD04(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = sub_1004097B0(a1, a2);
  uint64_t v5 = sub_1004080A8(a1, a2);
  if (!v5) {
    return 1;
  }
  uint64_t v6 = v5;
  unsigned __int16 v7 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(v6, &__p);
    uint64_t v8 = v21 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136446210;
    __int16 v23 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Suspending A2DP audio stream to device %{public}s", buf, 0xCu);
    if (v21 < 0) {
      operator delete(__p);
    }
  }
  sub_10040A4D0(a1, a2);
  *(_WORD *)buf = sub_100445248(v4 + 400);
  if (!*(_WORD *)buf) {
    return 1;
  }
  int v9 = *(_DWORD *)(v4 + 728);
  if (v9 == 5)
  {
    LOBYTE(__p) = 0;
    sub_10001B8E0(&__p);
    int v10 = sub_100138D5C((__int16 *)buf, 1u, 0);
    sub_10001B910(&__p);
    if (v10)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
        sub_100764730();
      }
      uint64_t v11 = sub_1004AFB34();
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_10040AF88;
      v16[3] = &unk_1009A0B58;
      v16[4] = a1;
      __int16 v17 = a2;
      sub_1004AFF58(v11, 2000, v16);
    }
    else
    {
      *(_DWORD *)(v4 + 728) = 6;
    }
    sub_10001B8AC(&__p);
  }
  else
  {
    uint64_t v13 = qword_100A19E30;
    BOOL v14 = os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v14) {
      return result;
    }
    int v15 = *(_DWORD *)(v4 + 732);
    LODWORD(__p) = 67109376;
    HIDWORD(__p) = v9;
    __int16 v19 = 1024;
    int v20 = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Could not suspend, stream state is %d and pending request is %d", (uint8_t *)&__p, 0xEu);
  }
  return 0;
}

void sub_10040AF68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10001B8AC(va);
  _Unwind_Resume(a1);
}

uint64_t sub_10040AF88(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(result + 536);
  if (v3)
  {
    unsigned int v4 = *(unsigned __int16 *)(a1 + 40);
    uint64_t v5 = result + 536;
    do
    {
      unsigned int v6 = *(unsigned __int16 *)(v3 + 32);
      BOOL v7 = v6 >= v4;
      if (v6 >= v4) {
        uint64_t v8 = (uint64_t *)v3;
      }
      else {
        uint64_t v8 = (uint64_t *)(v3 + 8);
      }
      if (v7) {
        uint64_t v5 = v3;
      }
      uint64_t v3 = *v8;
    }
    while (*v8);
    if (v5 != result + 536 && *(unsigned __int16 *)(v5 + 32) <= v4) {
      return sub_10040AFDC(result, v4);
    }
  }
  return result;
}

uint64_t sub_10040AFDC(uint64_t a1, unsigned int a2)
{
  v13[0] = 0;
  v13[1] = 0;
  sub_10003AED0((uint64_t)v13, a1 + 552);
  uint64_t v4 = sub_1004097B0(a1, a2);
  uint64_t v5 = v4;
  if (v4)
  {
    int v6 = *(_DWORD *)(v4 + 728);
    __int16 v12 = sub_100445248(v4 + 400);
    if (v6 == 5)
    {
      BOOL v7 = qword_100A19E30;
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Device is in streaming state, checking if we should suspend the stream", v11, 2u);
      }
      if ((sub_100634DBC(v5) & 1) == 0)
      {
        uint64_t v8 = qword_100A19E30;
        if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v11 = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "There is no audio device or HAL is not streaming to us, suspend the stream!", v11, 2u);
        }
        sub_10040A4D0(a1, a2);
        v11[0] = 0;
        sub_10001B8E0(v11);
        int v9 = sub_100138D5C(&v12, 1u, 0);
        sub_10001B910(v11);
        if (v9 && os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
          sub_1007647A4();
        }
        *(_DWORD *)(v5 + 728) = 6;
        sub_10001B8AC(v11);
      }
    }
  }
  return sub_10003AFB4((uint64_t)v13);
}

void sub_10040B154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10040B180(os_unfair_lock_s *a1, unsigned int a2)
{
  uint64_t v4 = sub_1004097B0((uint64_t)a1, a2);
  uint64_t v5 = sub_1004080A8((uint64_t)a1, a2);
  int v6 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    if (!v5)
    {
      *(_DWORD *)buf = 136446210;
      BOOL v14 = "NULL";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Resetting A2DP audio stream to device %{public}s", buf, 0xCu);
      return 1;
    }
    sub_100474E18(v5, __p);
    if (v12 >= 0) {
      BOOL v7 = __p;
    }
    else {
      BOOL v7 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136446210;
    BOOL v14 = (const char *)v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Resetting A2DP audio stream to device %{public}s", buf, 0xCu);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
  if (!v5) {
    return 1;
  }
  if (*(unsigned char *)(v4 + 704))
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_10040B330;
    v9[3] = &unk_1009AD2C0;
    __int16 v10 = a2;
    sub_10040815C(a1 + 108, v9);
  }
  return 0;
}

uint64_t sub_10040B330(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 72))(a2, *(unsigned __int16 *)(a1 + 32));
}

BOOL sub_10040B360(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = sub_1004080A8(a1, a2);
  uint64_t v5 = sub_1004097B0(a1, a2);
  if (!v4) {
    return 1;
  }
  uint64_t v6 = v5;
  BOOL v7 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "ConnectMediaStream for a2dpHandle %d", buf, 8u);
  }
  int v18 = sub_100445248(v6 + 400);
  int v8 = *(_DWORD *)(v6 + 728);
  int v9 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(v4, __p);
    __int16 v10 = v20 >= 0 ? __p : *(unsigned char **)__p;
    int v11 = *(_DWORD *)(v6 + 732);
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = v10;
    __int16 v22 = 1024;
    int v23 = v8;
    __int16 v24 = 1024;
    int v25 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Starting Media connection to device %{public}s. Current stream state is %d and pending stream request is %d ", buf, 0x18u);
    if (v20 < 0) {
      operator delete(*(void **)__p);
    }
  }
  BOOL result = 0;
  switch(v8)
  {
    case 0:
      sub_10040B710((os_unfair_lock_s *)a1, a2);
      goto LABEL_35;
    case 3:
      uint64_t v13 = qword_100A19E30;
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(v4, buf);
        BOOL v14 = v25 >= 0 ? buf : *(unsigned char **)buf;
        *(_DWORD *)std::string __p = 136446210;
        *(void *)&__p[4] = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Attempting to start streaming to device %{public}s", __p, 0xCu);
        if (SHIBYTE(v25) < 0) {
          operator delete(*(void **)buf);
        }
      }
      if (!atomic_load((unint64_t *)(a1 + 752)))
      {
        buf[0] = 0;
        sub_10001B8E0(buf);
        int v16 = sub_10018F0E8((uint64_t)sub_10040BB10, v4 + 128);
        atomic_store(mach_absolute_time(), (unint64_t *)(a1 + 744));
        sub_10001B910(buf);
        if (v16 && os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
          sub_100764874();
        }
        sub_10001B8AC(buf);
      }
      buf[0] = 0;
      sub_10001B8E0(buf);
      sub_10018354C(v4 + 128);
      int v17 = sub_100137F8C(&v18, 1u, 0);
      sub_10001B910(buf);
      if (v17)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
          sub_10076480C();
        }
        if (v17 == 408) {
          *(_DWORD *)(v6 + 732) = 1;
        }
        sub_10001B8AC(buf);
        return 1;
      }
      *(_DWORD *)(v6 + 728) = 4;
      sub_10001B8AC(buf);
LABEL_35:
      BOOL result = 0;
      break;
    case 4:
      BOOL result = os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      sub_1007648DC();
      goto LABEL_35;
    case 5:
      sub_100409F00((os_unfair_lock_s *)a1, a2);
      goto LABEL_35;
    case 6:
      BOOL result = 0;
      *(_DWORD *)(v6 + 732) = 1;
      return result;
    default:
      return result;
  }
  return result;
}

void sub_10040B6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10001B8AC(va);
  _Unwind_Resume(a1);
}

uint64_t sub_10040B710(os_unfair_lock_s *a1, unsigned int a2)
{
  v32[0] = 0;
  v32[1] = 0;
  sub_10003AED0((uint64_t)v32, (uint64_t)&a1[138]);
  uint64_t v4 = sub_1004097B0((uint64_t)a1, a2);
  uint64_t v5 = v4 + 400;
  int v6 = *(_DWORD *)(v4 + 728);
  BOOL v7 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "SelectStreamConfig for a2dpHandle %d", buf, 8u);
  }
  unsigned __int8 v8 = sub_100446A7C(v5);
  uint64_t v9 = sub_10044A140((uint64_t)&a1[70], v8);
  uint64_t v10 = sub_1004479CC(v5, v9);
  uint64_t v11 = sub_1004080A8((uint64_t)a1, a2);
  if (v6 < 2)
  {
    uint64_t v14 = v11;
    if (v10)
    {
      int v31 = 0;
      int v15 = *(_DWORD *)(v4 + 556);
      int v16 = *(_DWORD *)(v4 + 552);
      uint64_t v17 = sub_100445410(v5);
      uint64_t v29 = *(void *)(v17 + 32);
      int v18 = sub_1004454BC(v5);
      int v19 = *(unsigned __int8 *)(v4 + 592);
      char v20 = qword_100A19E30;
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(v14, &__p);
        p_p = &__p;
        if (v36 < 0) {
          p_p = __p;
        }
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&uint8_t buf[4] = v16;
        __int16 v38 = 1024;
        int v39 = v15;
        __int16 v40 = 2082;
        BOOL v41 = p_p;
        __int16 v42 = 1024;
        int v43 = v18;
        __int16 v44 = 1024;
        int v45 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Setting stream configuration for local SEID %u and remote SEID %u on device %{public}s, remote delay reporting %d, local delay reporting %d", buf, 0x24u);
        if (v36 < 0) {
          operator delete(__p);
        }
      }
      int v22 = *(_DWORD *)(v17 + 44);
      char v30 = 0;
      sub_10001B8E0(&v30);
      char v23 = v18 ^ 1;
      if (!v19) {
        char v23 = 0;
      }
      int v24 = sub_100137638(a2, v15, v16, v29, (v22 - v23), 0, &v31);
      sub_10001B910(&v30);
      int v25 = qword_100A19E30;
      if (v24)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
          sub_100764964();
        }
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
        {
          int v26 = v31;
          sub_100474E18(v14, buf);
          char v27 = SHIBYTE(v41) >= 0 ? buf : *(uint8_t **)buf;
          LODWORD(__p) = 67109378;
          HIDWORD(__p) = v26;
          __int16 v34 = 2082;
          int v35 = v27;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "SelectStreamConfig setting a2dp stream handle to %d for device %{public}s", (uint8_t *)&__p, 0x12u);
          if (SHIBYTE(v41) < 0) {
            operator delete(*(void **)buf);
          }
        }
        sub_100445298(v5, v31);
      }
      sub_10001B8AC(&v30);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
      {
        sub_100474E18(v14, buf);
        sub_100764910();
      }
      sub_1004091F8(a1, a2);
    }
    uint64_t v13 = 0;
  }
  else
  {
    char v12 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Invalid stream state %d, cannot select stream config unless in CONNECTING or INVALID state", buf, 8u);
    }
    uint64_t v13 = 1;
  }
  sub_10003AFB4((uint64_t)v32);
  return v13;
}

void sub_10040BABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int16 a10, char a11, char a12, int a13, char a14)
{
}

void sub_10040BB08()
{
}

void sub_10040BB10(int a1, uint64_t a2, int a3, __int16 a4)
{
  uint64_t v8 = mach_absolute_time();
  uint64_t v9 = sub_1004AFB34();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10041E014;
  v10[3] = &unk_1009AA5B0;
  int v11 = a1;
  int v12 = a3;
  __int16 v13 = a4;
  v10[4] = a2;
  v10[5] = v8;
  sub_100013018(v9, v10);
}

uint64_t sub_10040BBB8(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned __int8 *a5)
{
  v19[0] = 0;
  v19[1] = 0;
  sub_10003AED0((uint64_t)v19, a1 + 552);
  uint64_t v9 = sub_1004097B0(a1, a3);
  uint64_t v10 = v9 + 400;
  sub_100448634(v9 + 400, a4);
  int v11 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18((uint64_t)a5, __p);
    int v12 = v18 >= 0 ? __p : (void **)__p[0];
    int v13 = *(_DWORD *)(v9 + 648);
    *(_DWORD *)buf = 136446722;
    char v21 = v12;
    __int16 v22 = 1024;
    int v23 = a4;
    __int16 v24 = 1024;
    int v25 = v13;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Configuring A2DP audio device %{public}s MTU=%u, RTP_len=%u", buf, 0x18u);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_100449334(v10);
  if (sub_10040BE10(a1, a3, a5) == 311)
  {
    uint64_t v14 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "A2DP audio device already exists, since mtu size changed, need to reconfigure the audio device", buf, 2u);
    }
    sub_100635078(v9, (int)*(double *)(v9 + 680));
    sub_100635048(v9, *(_DWORD *)(v9 + 664));
    sub_100635058(v9, *(_DWORD *)(v9 + 660));
    sub_100635068(v9, *(_DWORD *)(v9 + 652));
    sub_100634EAC(v9, 1);
    sub_100634E7C(v9, *(unsigned __int8 *)(v9 + 712));
    sub_100634EEC(v9, 0, 1.0);
    sub_100634E4C(v9, *(unsigned __int8 *)(v9 + 704));
    if (*(unsigned char *)(v9 + 704))
    {
      int v15 = sub_100448228(v10);
      sub_100634E6C(v9, v15);
      *(unsigned char *)(v9 + 706) = 0;
    }
  }
  sub_10003AFB4((uint64_t)v19);
  return 0;
}

void sub_10040BDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10040BE10(uint64_t a1, unsigned int a2, unsigned __int8 *a3)
{
  int v6 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18((uint64_t)a3, &__p);
    BOOL v7 = (SBYTE7(v115) & 0x80u) == 0 ? &__p : (long long *)__p;
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Publishing audio device %{public}s on a2dpHandle %d", buf, 0x12u);
    if (SBYTE7(v115) < 0) {
      operator delete((void *)__p);
    }
  }
  uint64_t v8 = sub_1004097B0(a1, a2);
  uint64_t v9 = (unint64_t *)v8;
  if (*(unsigned char *)(v8 + 24))
  {
    uint64_t v10 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18((uint64_t)a3, &__p);
      if ((SBYTE7(v115) & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (long long *)__p;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = p_p;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Audio device %{public}s on a2dpHandle %d is already published", buf, 0x12u);
      if (SBYTE7(v115) < 0) {
        operator delete((void *)__p);
      }
    }
    return 311;
  }
  int v13 = sub_100445940(v8 + 400);
  sub_1004A82EC(a3 + 128, buf);
  if (v122 >= 0) {
    uint64_t v14 = buf;
  }
  else {
    uint64_t v14 = *(char **)buf;
  }
  sub_10004191C(&__p, v14);
  sub_1002E7A48((uint64_t)v9, (const void **)&__p);
  if (SBYTE7(v115) < 0) {
    operator delete((void *)__p);
  }
  if (v122 < 0) {
    operator delete(*(void **)buf);
  }
  sub_100475EE0((uint64_t)a3, (uint64_t)buf);
  if (v122 >= 0) {
    int v15 = buf;
  }
  else {
    int v15 = *(char **)buf;
  }
  sub_10004191C(&__p, v15);
  sub_1002E7BD4((uint64_t)v9, (uint64_t)&__p);
  if (SBYTE7(v115) < 0) {
    operator delete((void *)__p);
  }
  if (v122 < 0) {
    operator delete(*(void **)buf);
  }
  sub_1004A82EC(a3 + 128, buf);
  if (v122 >= 0) {
    int v16 = buf;
  }
  else {
    int v16 = *(char **)buf;
  }
  sub_10004191C(&__p, v16);
  sub_1002E79BC((uint64_t)v9, (uint64_t)&__p);
  if (SBYTE7(v115) < 0) {
    operator delete((void *)__p);
  }
  if (v122 < 0) {
    operator delete(*(void **)buf);
  }
  sub_1002E7BCC((uint64_t)v9, (uint64_t)a3);
  sub_10063502C((uint64_t)v9, v13);
  float v111 = 0.0;
  if (qword_1009FB218 != -1) {
    dispatch_once(&qword_1009FB218, &stru_1009AD930);
  }
  int v17 = sub_1005F2FE4((uint64_t)off_1009FB210, (unint64_t)a3, &v111);
  if (v17)
  {
    char v18 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p) = 134217984;
      *(double *)((char *)&__p + 4) = v111;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Setting audio device volume to %f", (uint8_t *)&__p, 0xCu);
    }
    sub_1002E786C((uint64_t)v9, v111);
  }
  sub_100448568((uint64_t)(v9 + 50), v17);
  sub_1002E837C((uint64_t)v9, v17);
  int v19 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    int v20 = sub_100478B2C((uint64_t)a3, 32);
    LODWORD(__p) = 67109120;
    DWORD1(__p) = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "A2DPClient setSupportsTipi %d", (uint8_t *)&__p, 8u);
  }
  int v21 = sub_100478B2C((uint64_t)a3, 32);
  sub_1002E83C4((uint64_t)v9, v21);
  sub_100635048((uint64_t)v9, *((_DWORD *)v9 + 166));
  sub_10063503C((uint64_t)v9, *((double *)v9 + 84));
  sub_100635058((uint64_t)v9, *((_DWORD *)v9 + 165));
  sub_100635068((uint64_t)v9, *((_DWORD *)v9 + 163));
  sub_100635078((uint64_t)v9, (int)*((double *)v9 + 85));
  int v22 = sub_100448228((uint64_t)(v9 + 50));
  sub_1002E857C((uint64_t)v9, v22);
  int v23 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    int v24 = sub_100448228((uint64_t)(v9 + 50));
    LODWORD(__p) = 67109120;
    DWORD1(__p) = v24;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Setting audio device latency to %d", (uint8_t *)&__p, 8u);
  }
  int v25 = sub_1004455E4((uint64_t)(v9 + 50));
  sub_1005D0EF4((uint64_t)v9, v25);
  sub_100634EAC((uint64_t)v9, 1);
  sub_100634E7C((uint64_t)v9, *((unsigned __int8 *)v9 + 712));
  sub_100634EEC((uint64_t)v9, 0, 1.0);
  sub_100634E4C((uint64_t)v9, *((unsigned __int8 *)v9 + 704));
  int v26 = sub_1004761A4((uint64_t)a3);
  sub_1002E8B38((uint64_t)v9, v26);
  char v27 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v28 = sub_100035F54();
    int v29 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 240))(v28);
    int v30 = sub_100478B2C((uint64_t)a3, 49);
    BOOL v31 = sub_100485128((uint64_t)a3);
    LODWORD(__p) = 67109632;
    DWORD1(__p) = v29;
    WORD4(__p) = 1024;
    *(_DWORD *)((char *)&__p + 10) = v30;
    HIWORD(__p) = 1024;
    LODWORD(v115) = v31;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Local and remote low latency game support, local: %d remote: %d Bandswitch Support %d", (uint8_t *)&__p, 0x14u);
  }
  if (sub_100478B2C((uint64_t)a3, 49))
  {
    uint64_t v32 = sub_100035F54();
    int v33 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 240))(v32);
  }
  else
  {
    int v33 = 0;
  }
  sub_100634FEC((uint64_t)v9, v33);
  if ((sub_100478B2C((uint64_t)a3, 12) & 1) == 0)
  {
    BOOL v34 = sub_100478AF4((uint64_t)a3);
    if (!v34)
    {
      int v35 = sub_1004156C0(v34, (uint64_t)a3);
      sub_1005D114C((uint64_t)v9, v35);
    }
  }
  if (*((unsigned char *)v9 + 704))
  {
    int v36 = sub_100448228((uint64_t)(v9 + 50));
    sub_100634E6C((uint64_t)v9, v36);
    *((unsigned char *)v9 + 706) = 0;
  }
  if (qword_1009F80A0 != -1) {
    dispatch_once(&qword_1009F80A0, &stru_1009AD870);
  }
  int v37 = sub_10028CB30((uint64_t)off_1009F8098, (uint64_t)a3);
  sub_1002E8620((uint64_t)v9, v37);
  int v38 = sub_100478B2C((uint64_t)a3, 12);
  sub_1002E85F8((uint64_t)v9, v38);
  if (qword_1009F80A0 != -1) {
    dispatch_once(&qword_1009F80A0, &stru_1009AD870);
  }
  if (sub_10028CB30((uint64_t)off_1009F8098, (uint64_t)a3))
  {
    if (qword_1009F80A0 != -1) {
      dispatch_once(&qword_1009F80A0, &stru_1009AD870);
    }
    int v39 = sub_10028FDB0((uint64_t)off_1009F8098, (uint64_t)a3);
    sub_1002E8648((uint64_t)v9, v39);
    LODWORD(__p) = 0;
    *(_DWORD *)buf = 0;
    if (qword_1009F80A0 != -1) {
      dispatch_once(&qword_1009F80A0, &stru_1009AD870);
    }
    sub_10028FEDC((uint64_t)off_1009F8098, (uint64_t)a3, (int *)&__p, (int *)buf);
    sub_1002E8670((uint64_t)v9, __p, buf[0]);
    *(_DWORD *)v112 = 3;
    if (qword_1009F80A0 != -1) {
      dispatch_once(&qword_1009F80A0, &stru_1009AD870);
    }
    sub_100290170((uint64_t)off_1009F8098, (uint64_t)a3, (int *)v112);
    sub_1002E8680((uint64_t)v9, v112[0]);
    unsigned __int8 v40 = sub_10048741C((uint64_t)a3);
    sub_1002E8690((uint64_t)v9, v40);
  }
  int v41 = sub_100478B2C((uint64_t)a3, 36);
  sub_100634EDC((uint64_t)v9, v41);
  if ((sub_100478B2C((uint64_t)a3, 12) & 1) != 0 || sub_100478AF4((uint64_t)a3))
  {
    if (qword_1009F80A0 != -1) {
      dispatch_once(&qword_1009F80A0, &stru_1009AD870);
    }
    unsigned __int8 v42 = sub_10028C1C0((uint64_t)off_1009F8098, (uint64_t)a3);
    sub_1002E86A0((uint64_t)v9, v42);
  }
  int v110 = 0;
  if (sub_100487DD4((uint64_t)a3, 176)) {
    int v43 = 4;
  }
  else {
    int v43 = 0;
  }
  int v110 = v43;
  sub_100415108((void *)a1, (uint64_t)a3, &v110);
  if (sub_10047F4E8((uint64_t)a3))
  {
    unsigned __int8 v44 = sub_100487564((uint64_t)a3);
    sub_1002E86C0((uint64_t)v9, v44);
  }
  if (sub_1004875F4((uint64_t)a3))
  {
    int v45 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18((uint64_t)a3, &__p);
      long long v46 = (SBYTE7(v115) & 0x80u) == 0 ? &__p : (long long *)__p;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v46;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "Applying DontAutoRoute: %{public}s", buf, 0xCu);
      if (SBYTE7(v115) < 0) {
        operator delete((void *)__p);
      }
    }
    sub_100485998((uint64_t)a3, 0);
    sub_1002E908C((uint64_t)v9, 0);
  }
  if (sub_10048763C((uint64_t)a3))
  {
    long long v47 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18((uint64_t)a3, &__p);
      int v48 = (SBYTE7(v115) & 0x80u) == 0 ? &__p : (long long *)__p;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v48;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "Applying AudioRouteHidden: %{public}s", buf, 0xCu);
      if (SBYTE7(v115) < 0) {
        operator delete((void *)__p);
      }
    }
    sub_1004859E0((uint64_t)a3, 0);
    sub_1002E9100((uint64_t)v9, 1);
  }
  uint64_t v108 = 0;
  uint64_t v109 = 0;
  sub_10047B7A8((uint64_t)a3, (_DWORD *)&v109 + 1, &v109, (_DWORD *)&v108 + 1, &v108);
  int v49 = sub_100487DD4((uint64_t)a3, 32);
  sub_1002E8FF0((uint64_t)v9, v49);
  if (sub_100487DD4((uint64_t)a3, 64))
  {
    uint64_t v50 = sub_100035F54();
    int v51 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v50 + 792))(v50, 1);
  }
  else
  {
    int v51 = 0;
  }
  sub_1002E8D78((uint64_t)v9, v51);
  uint64_t v52 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v52 + 792))(v52, 3)
    && (sub_100487DD4((uint64_t)a3, 64) & 1) != 0)
  {
    uint64_t v53 = sub_100035F54();
    int v54 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v53 + 792))(v53, 1);
    sub_1002E8EF0((uint64_t)v9, v54);
    if (v54)
    {
      if (qword_1009F80B0 != -1) {
        dispatch_once(&qword_1009F80B0, &stru_1009AD890);
      }
      BOOL v55 = sub_100573798((uint64_t)off_1009F80A8, (uint64_t)a3);
      sub_100634EBC((uint64_t)v9, v55);
      if (qword_1009F80B0 != -1) {
        dispatch_once(&qword_1009F80B0, &stru_1009AD890);
      }
      v56 = sub_10057348C((uint64_t)off_1009F80A8);
      sub_1002E8DC8((uint64_t)v9, v56);

      int v57 = 1;
      goto LABEL_107;
    }
  }
  else
  {
    sub_1002E8EF0((uint64_t)v9, 0);
  }
  int v57 = 0;
LABEL_107:
  *(void *)buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009AD950);
  }
  sub_100014B58((uint64_t)off_1009F7ED8, ((unint64_t)a3[128] << 40) | ((unint64_t)a3[129] << 32) | ((unint64_t)a3[130] << 24) | ((unint64_t)a3[131] << 16) | ((unint64_t)a3[132] << 8) | a3[133], 1u, 1u, 0, 0, (unsigned __int8 *)&__p);
  v58 = sub_100031234((const unsigned __int8 *)&__p);
  [v58 getUUIDBytes:buf];

  sub_1002E8A58((uint64_t)v9, (CFUUIDBytes *)buf);
  sub_1002E8A68((uint64_t)v9, SHIDWORD(v108));
  sub_1002E8A78((uint64_t)v9, v108);
  sub_1002E8A88((uint64_t)v9, v109);
  float v59 = sub_1004893FC((uint64_t)a3);
  sub_1002E8AC0((uint64_t)v9, v59);
  sub_1002EACE8(&__p, (uint64_t)(a3 + 1128));
  sub_1002E8B48((uint64_t)v9, (int **)&__p);
  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  int v60 = sub_100489494((uint64_t)a3);
  sub_1002E8CA0((uint64_t)v9, v60);
  int v61 = sub_1004877EC((uint64_t)a3);
  sub_1002E89FC((uint64_t)v9, v61);
  if (sub_100487DD4((uint64_t)a3, 64))
  {
    uint64_t v62 = sub_100035F54();
    int v63 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v62 + 792))(v62, 1);
    int v64 = 0;
    int v107 = 0;
    if (v63)
    {
      if (qword_1009F7F00 != -1) {
        dispatch_once(&qword_1009F7F00, &stru_1009AD810);
      }
      sub_1004AB094((uint64_t)off_1009F7EF8, (uint64_t)a3, &v107);
      LOBYTE(__p) = 1;
      uint64_t v65 = sub_10003FFD4();
      (*(void (**)(uint64_t, long long *))(*(void *)v65 + 240))(v65, &__p);
      v66 = qword_100A19E30;
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEBUG)) {
        sub_1007649CC(&__p, v66);
      }
      sub_1002E871C((uint64_t)v9, __p);
      if (qword_1009F80B0 != -1) {
        dispatch_once(&qword_1009F80B0, &stru_1009AD890);
      }
      id v67 = sub_100572CAC((uint64_t)off_1009F80A8);
      (*(void (**)(unint64_t *, id))(*v9 + 128))(v9, v67);
      if (qword_1009F7F00 != -1) {
        dispatch_once(&qword_1009F7F00, &stru_1009AD810);
      }
      sub_1004AB094((uint64_t)off_1009F7EF8, (uint64_t)a3, &v107);
      int v68 = v107;
      if (!v107)
      {
        if (qword_1009F7F00 != -1) {
          dispatch_once(&qword_1009F7F00, &stru_1009AD810);
        }
        int v68 = 1;
        sub_1004AB200((uint64_t)off_1009F7EF8, (uint64_t)a3, 1);
        int v107 = 1;
      }
      sub_1002E86F4((uint64_t)v9, v68 == 1);
      uint64_t v69 = sub_100017768();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v69 + 8))(v69))
      {
        uint64_t v70 = sub_100017768();
        int v71 = (*(uint64_t (**)(uint64_t))(*(void *)v70 + 584))(v70);
        sub_100634ECC((uint64_t)v9, v71);
      }
      int v64 = 1;
    }
  }
  else
  {
    int v64 = 0;
    int v107 = 0;
  }
  v72 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    if (qword_1009F80A0 != -1) {
      dispatch_once(&qword_1009F80A0, &stru_1009AD870);
    }
    int v73 = sub_10028CB30((uint64_t)off_1009F8098, (uint64_t)a3);
    int v74 = sub_100478B2C((uint64_t)a3, 12);
    if (qword_1009F80A0 != -1) {
      dispatch_once(&qword_1009F80A0, &stru_1009AD870);
    }
    int v75 = sub_10028FDB0((uint64_t)off_1009F8098, (uint64_t)a3);
    v76 = " NO ";
    if (v64) {
      v77 = "YES ";
    }
    else {
      v77 = " NO ";
    }
    LODWORD(__p) = 67110658;
    if (v107 == 1) {
      v76 = "YES ";
    }
    DWORD1(__p) = v73;
    WORD4(__p) = 1024;
    v78 = "NO";
    *(_DWORD *)((char *)&__p + 10) = v74;
    HIWORD(__p) = 1024;
    if (v57) {
      v78 = "YES";
    }
    LODWORD(v115) = v75;
    WORD2(v115) = 2082;
    *(void *)((char *)&v115 + 6) = v77;
    HIWORD(v115) = 2082;
    v116 = (void *)v76;
    __int16 v117 = 2082;
    v118 = v78;
    __int16 v119 = 1024;
    int v120 = v110;
    _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "AudioDevice. SupportsInEarDetection %d, isAppleAudioDevice %d, InEarDetectionEnabled %d SpatialSupport  %{public}s SpatialAllowed %{public}s Spatial Profile %{public}s supportedListeningModes %u", (uint8_t *)&__p, 0x38u);
  }
  if (a3[976])
  {
    v79 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18((uint64_t)a3, &__p);
      v80 = (SBYTE7(v115) & 0x80u) == 0 ? &__p : (long long *)__p;
      *(_DWORD *)v112 = 136446210;
      v113 = v80;
      _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "Wireless Splitter guest not in contacts %{public}s doAP is not supported", v112, 0xCu);
      if (SBYTE7(v115) < 0) {
        operator delete((void *)__p);
      }
    }
  }
  else
  {
    int v81 = sub_100478B2C((uint64_t)a3, 22);
    sub_1002E8A20((uint64_t)v9, v81);
    if (sub_100478B2C((uint64_t)a3, 22)) {
      sub_1002E8A48((uint64_t)v9, (CFUUIDBytes *)buf);
    }
  }
  sub_1002E8CB0((uint64_t)v9, *((unsigned __int8 *)v9 + 722));
  sub_1002E8CD8((uint64_t)v9, *((unsigned __int8 *)v9 + 723));
  sub_1002E8D00((uint64_t)v9, a3[960]);
  sub_1002E8D28((uint64_t)v9, a3[976]);
  v82 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    if (a3[960]) {
      v83 = "guest device";
    }
    else {
      v83 = "owner device";
    }
    LODWORD(__p) = 136315138;
    *(void *)((char *)&__p + 4) = v83;
    _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEFAULT, "Wireless Splitter this is %s", (uint8_t *)&__p, 0xCu);
    v82 = qword_100A19E30;
  }
  if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
  {
    int v84 = sub_100478B2C((uint64_t)a3, 26);
    LODWORD(__p) = 67109120;
    DWORD1(__p) = v84;
    _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEFAULT, "AudioDevice. SupportsSoftwareVol %d", (uint8_t *)&__p, 8u);
  }
  *((unsigned char *)v9 + 726) = 0;
  if (sub_100478B2C((uint64_t)a3, 26))
  {
    uint64_t v85 = sub_100017768();
    int v86 = (*(uint64_t (**)(uint64_t))(*(void *)v85 + 768))(v85) ^ 1;
  }
  else
  {
    int v86 = 0;
  }
  sub_1002E8D50((uint64_t)v9, v86);
  *(_DWORD *)v112 = 0;
  if (sub_1002E84E4((uint64_t)v9, v112))
  {
    if (sub_100478B2C((uint64_t)a3, 26)
      && ((*(_DWORD *)v112 - 8202) < 4 || sub_100487DD4((uint64_t)a3, 10)))
    {
      uint64_t v87 = sub_100017768();
      int v88 = (*(uint64_t (**)(uint64_t))(*(void *)v87 + 776))(v87) ^ 1;
    }
    else
    {
      int v88 = 0;
    }
    sub_1002E8474((uint64_t)v9, v88);
    *((unsigned char *)v9 + 727) = v88;
    if (sub_100478B2C((uint64_t)a3, 26))
    {
      uint64_t v89 = sub_100017768();
      char v90 = (*(uint64_t (**)(uint64_t))(*(void *)v89 + 768))(v89);
      char v91 = *(_DWORD *)v112 == 8202 ? 1 : v90;
      if ((v91 & 1) == 0)
      {
        char v92 = sub_100487DD4((uint64_t)a3, 32);
        char v93 = *((unsigned char *)v9 + 723) ? 1 : v92;
        if ((v93 & 1) == 0)
        {
          uint64_t v94 = sub_1004AFB34();
          v106[0] = _NSConcreteStackBlock;
          v106[1] = 3221225472;
          v106[2] = sub_100415B04;
          v106[3] = &unk_100998260;
          v106[4] = a1;
          v106[5] = a3;
          sub_100013018(v94, v106);
        }
      }
    }
  }
  if (sub_100487DD4((uint64_t)a3, 144))
  {
    uint64_t v95 = sub_10003FB34();
    int v96 = sub_100350CA0(v95, 0);
  }
  else
  {
    int v96 = 0;
  }
  v97 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    v98 = "not supported";
    if (v96) {
      v98 = "supported";
    }
    LODWORD(__p) = 136315138;
    *(void *)((char *)&__p + 4) = v98;
    _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEFAULT, "Adaptive Volume: setAdaptiveVolumeSupport %s", (uint8_t *)&__p, 0xCu);
  }
  sub_1002E8F18((uint64_t)v9, v96);
  if (sub_100487DD4((uint64_t)a3, 80))
  {
    uint64_t v99 = sub_10003FB34();
    int v100 = sub_100350CA0(v99, 1u);
  }
  else
  {
    int v100 = 0;
  }
  sub_1002E8F50((uint64_t)v9, v100);
  if (sub_100487DD4((uint64_t)a3, 160))
  {
    uint64_t v101 = sub_10003FB34();
    int v102 = sub_100350CA0(v101, 2u);
  }
  else
  {
    int v102 = 0;
  }
  sub_1002E8F78((uint64_t)v9, v102);
  BOOL v103 = (sub_10047ECFC((uint64_t)a3) & 2) == 0;
  sub_1002E9FF8((uint64_t)v9, v103);
  int v104 = sub_100487DD4((uint64_t)a3, 20);
  sub_1002E8FA0((uint64_t)v9, v104);
  if (sub_100487DD4((uint64_t)a3, 20))
  {
    sub_10003FB34();
    int v105 = sub_100351204() ^ 1;
  }
  else
  {
    int v105 = 1;
  }
  sub_1002E8FC8((uint64_t)v9, v105);
  *(void *)&long long __p = _NSConcreteStackBlock;
  *((void *)&__p + 1) = 3221225472;
  *(void *)&long long v115 = sub_100408AC4;
  *((void *)&v115 + 1) = &unk_1009AD1F8;
  v116 = a3;
  __int16 v117 = a2;
  LOBYTE(v118) = 1;
  sub_10040815C((os_unfair_lock_s *)(a1 + 432), &__p);
  sub_1002E6F28(v9);
  return 0;
}

void sub_10040D368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10040D3E0(uint64_t a1, uint64_t a2, uint64_t a3, uint8_t a4, unsigned int a5)
{
  if (!a3) {
    return 0;
  }
  uint64_t v10 = sub_1004097B0(a1, a5);
  uint64_t v11 = sub_1004080A8(a1, a5);
  uint64_t v12 = 120;
  if (v10)
  {
    uint64_t v13 = v11;
    if (v11)
    {
      __int16 v35 = sub_100445248(v10 + 400);
      unsigned __int16 v14 = *(_WORD *)(v10 + 720) + 1;
      *(_WORD *)(v10 + 720) = v14;
      if ((unsigned __int16)(12157 * v14) <= 0x8Bu)
      {
        buf[0] = 0;
        sub_10001B8E0(buf);
        sub_10018F0E8((uint64_t)sub_10040BB10, v13 + 128);
        sub_10001B910(buf);
        atomic_store(mach_absolute_time(), (unint64_t *)(a1 + 744));
        sub_10001B8AC(buf);
      }
      unint64_t v15 = atomic_load((unint64_t *)(a1 + 760));
      BOOL v16 = v15 == 0;
      uint64_t v17 = mach_absolute_time();
      if (v16)
      {
        unint64_t v19 = atomic_load((unint64_t *)(a1 + 744));
        unint64_t v18 = (v17 - v19) * *(unsigned int *)(a1 + 620) / *(unsigned int *)(a1 + 624) / 0x3E8;
        *(void *)(a1 + 768) = mach_absolute_time();
        unint64_t v20 = atomic_load((unint64_t *)(a1 + 752));
        atomic_store(v20 + v18, (unint64_t *)(a1 + 760));
      }
      else
      {
        unint64_t v18 = (v17 - *(void *)(a1 + 768)) * *(unsigned int *)(a1 + 620) / *(unsigned int *)(a1 + 624) / 0x3E8;
        atomic_fetch_add((atomic_ullong *volatile)(a1 + 760), v18);
        *(void *)(a1 + 768) = mach_absolute_time();
      }
      unsigned int v21 = v14;
      if (*(unsigned char *)(a1 + 780))
      {
        int v22 = qword_100A19E30;
        if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v23 = *(void *)(a1 + 768);
          *(_DWORD *)buf = 67109632;
          *(_DWORD *)&uint8_t buf[4] = v21;
          *(_WORD *)&uint8_t buf[8] = 2048;
          *(void *)&buf[10] = v18;
          *(_WORD *)&unsigned char buf[18] = 2048;
          *(void *)&buf[20] = v23;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "A2DP Send[%d]: delta time %llu us current time %llu", buf, 0x1Cu);
        }
      }
      memset(buf, 0, 32);
      *(_WORD *)buf = 24704;
      buf[2] = BYTE1(v21);
      buf[3] = v21;
      unint64_t v24 = atomic_load((unint64_t *)(a1 + 760));
      buf[7] = v24 / 0x3E8;
      unint64_t v25 = atomic_load((unint64_t *)(a1 + 760));
      buf[6] = v25 / 0x3E800;
      unint64_t v26 = atomic_load((unint64_t *)(a1 + 760));
      buf[5] = v26 / 0x3E80000;
      unint64_t v27 = atomic_load((unint64_t *)(a1 + 760));
      uint8_t buf[4] = v27 / 0x3E8000000;
      *(_DWORD *)&uint8_t buf[8] = 0;
      unsigned char buf[12] = a4;
      *(void *)&uint8_t buf[16] = a3;
      *(void *)&unsigned char buf[24] = a2;
      kdebug_trace();
      char v36 = 0;
      sub_10001B8E0(&v36);
      __int16 v28 = v35;
      uint64_t v29 = sub_100139F78(v35, (uint64_t)buf);
      int v30 = v29;
      uint64_t v12 = v29;
      if (v29 == 410)
      {
        atomic_load((unint64_t *)(a1 + 760));
        kdebug_trace();
        if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
        {
          sub_100764B30();
          __int16 v28 = v35;
        }
        uint64_t v12 = sub_10013A0D8(v28);
        if (v12)
        {
          if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
          {
            sub_100764AC8();
            __int16 v28 = v35;
          }
          if (v12 == 485)
          {
            sub_10013A0A0(v28);
            uint64_t v12 = 485;
          }
        }
        else
        {
          uint64_t v31 = sub_100139F78(v28, (uint64_t)buf);
          uint64_t v12 = v31;
          if (v31 && v31 != 412 && os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
            sub_100764A60();
          }
        }
      }
      sub_10001B910(&v36);
      if (v21 >= 0x33 && v30 == 410)
      {
        if (qword_1009F80B0 != -1) {
          dispatch_once(&qword_1009F80B0, &stru_1009AD890);
        }
        uint64_t v32 = off_1009F80A8;
        uint64_t v33 = atomic_load((unint64_t *)(a1 + 760));
        sub_100568674((uint64_t)v32, v13, v33);
        if (qword_1009F80B0 != -1) {
          dispatch_once(&qword_1009F80B0, &stru_1009AD890);
        }
        sub_10056AD80((uint64_t)off_1009F80A8, v13, 0, 0, 1);
      }
      else if (v21 >= 0x33 && v30 != 410)
      {
        if (qword_1009F80B0 != -1) {
          dispatch_once(&qword_1009F80B0, &stru_1009AD890);
        }
        atomic_load((unint64_t *)(a1 + 760));
        sub_10056A114((uint64_t)off_1009F80A8);
      }
      sub_10001B8AC(&v36);
    }
  }
  return v12;
}

void sub_10040D8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10001B8AC(va);
  _Unwind_Resume(a1);
}

uint64_t sub_10040D918(uint64_t a1, unsigned int a2)
{
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 552);
  uint64_t v4 = sub_1004097B0(a1, a2);
  if (v4 && *(_DWORD *)(v4 + 728) == 1)
  {
    char v7 = 0;
    sub_10001B8E0(&v7);
    int v5 = sub_1001370A8(a2, 0);
    sub_10001B910(&v7);
    if (v5 && os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
      sub_100764BA4();
    }
    sub_10001B8AC(&v7);
  }
  return sub_10003AFB4((uint64_t)v8);
}

void sub_10040D9D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10040D9FC(os_unfair_lock_s *a1)
{
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009AD890);
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  sub_1005711A0((uint64_t)off_1009F80A8, &v9);
  sub_10040815C(a1 + 108, &stru_1009AD258);
  uint64_t v2 = v9;
  uint64_t v3 = v10;
  if (v9 != v10)
  {
    do
    {
      int v4 = *(unsigned __int16 *)v2;
      if (*(_WORD *)v2)
      {
        int v5 = qword_100A19E30;
        if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = v4;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Wireless Splitter guest device is gone, destroy aggregate with handle %hu", (uint8_t *)&buf, 8u);
        }
        memset(&buf, 0, sizeof(buf));
        int v6 = sub_10004191C(&buf, "WS_ERROR_DISCONNECTION_GUEST_GONE");
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          int v6 = sub_10003B098(&__p, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = buf;
        }
        sub_10041AB48((uint64_t)v6, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v7 = sub_1004097B0((uint64_t)a1, *(unsigned __int16 *)v2);
        if (v7)
        {
          (*(void (**)(os_unfair_lock_s *, uint64_t, void, void))(*(void *)&a1->_os_unfair_lock_opaque
                                                                              + 192))(a1, v7, 0, 0);
          sub_1002E8CD8(v7, 0);
          *(unsigned char *)(v7 + 723) = 0;
        }
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
      }
      v2 += 2;
    }
    while (v2 != v3);
    uint64_t v2 = v9;
  }
  if (v2)
  {
    uint64_t v10 = v2;
    operator delete(v2);
  }
}

void sub_10040DC18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_10040DC74(void *a1, uint64_t a2, int a3)
{
  char v12 = 0;
  sub_10001B8E0(&v12);
  unsigned __int16 v11 = 0;
  if ((sub_100134D40(a2 + 128, &v11) || !v11)
    && os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
  {
    sub_100474E18(a2, v10);
    sub_100764CC4();
  }
  sub_10001B910(&v12);
  if (a3)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
    {
      sub_100474E18(a2, v9);
      sub_100764C74();
    }
    sub_1002B804C(&v12);
    sub_100136B8C(v11, 0);
  }
  else
  {
    int v7 = sub_1004BDDAC((uint64_t)a1, a2);
    sub_1002B804C(&v12);
    int v8 = sub_100136B8C(v11, v7);
    sub_10001B910(&v12);
    if (v8)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
        sub_100764C0C();
      }
    }
    else if (v7)
    {
      sub_1004BD554(a1, a2);
    }
  }
  return sub_10001B8AC(&v12);
}

void sub_10040DE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
}

unsigned char *sub_10040DE40(uint64_t a1, uint64_t a2, int a3)
{
  return sub_10040DC74((void *)(a1 - 264), a2, a3);
}

uint64_t sub_10040DE48(void *a1, uint64_t a2, unsigned int a3)
{
  v19[0] = 0;
  v19[1] = 0;
  sub_10003AED0((uint64_t)v19, (uint64_t)(a1 + 69));
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AD810);
  }
  uint64_t v6 = sub_100030F10((uint64_t)off_1009F7EF8, a2, 1);
  int v7 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(v6, __p);
    int v8 = v18 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446466;
    unsigned int v21 = v8;
    __int16 v22 = 1024;
    LODWORD(v23) = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "ConnectInd from device %{public}s on a2dpHandle %d", buf, 0x12u);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
  }
  if (!sub_10047B300(v6))
  {
    unsigned __int16 v14 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(v6, __p);
      unint64_t v15 = v18 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136446210;
      unsigned int v21 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Delaying incoming connection attempt for device %{public}s as SDP is missing", buf, 0xCu);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
    }
    if (qword_1009FB698 != -1) {
      dispatch_once(&qword_1009FB698, &stru_1009AD8B0);
    }
    sub_1004C8250(qword_1009FB690, v6);
  }
  int v9 = sub_1004BDDAC((uint64_t)a1, v6);
  uint64_t v10 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(v6, __p);
    unsigned __int16 v11 = "Rejecting";
    if (v9) {
      unsigned __int16 v11 = "Accepting";
    }
    if (v18 >= 0) {
      char v12 = __p;
    }
    else {
      char v12 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136446466;
    unsigned int v21 = (void *)v11;
    __int16 v22 = 2082;
    uint64_t v23 = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%{public}s incoming connection attempt from device %{public}s", buf, 0x16u);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
  }
  LOBYTE(__p[0]) = 0;
  sub_10001B8E0(__p);
  uint64_t v13 = sub_100136B8C(a3, v9);
  sub_10001B910(__p);
  if (v13)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
      sub_100764C0C();
    }
  }
  else if (v9)
  {
    sub_1004BD554(a1, v6);
  }
  sub_10001B8AC(__p);
  sub_10003AFB4((uint64_t)v19);
  return v13;
}

void sub_10040E18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10040E1D0(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  __int16 v10 = a3;
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 552);
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AD810);
  }
  uint64_t v7 = sub_100030F10((uint64_t)off_1009F7EF8, a2, 1);
  if (a4)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
    {
      sub_100474E18(v7, &__p);
      sub_100764E04();
    }
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009AD8D0);
    }
    int v8 = sub_1004E2340((uint64_t)off_1009F8068, a4, 20000);
    sub_1004BD6C8(a1, v7, v8);
  }
  sub_1004BD6C8(a1, v7, 0);
}

void sub_10040E958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
}

uint64_t sub_10040E9D8(uint64_t a1, uint64_t a2)
{
  int v19 = 0;
  uint64_t v3 = sub_100017768();
  sub_10004191C(buf, "A2DP");
  sub_10004191C(__p, "SampleRate");
  int v4 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v3 + 128))(v3, buf, __p, &v19);
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v21) < 0)
  {
    operator delete(*(void **)buf);
    if (!v4) {
      goto LABEL_16;
    }
  }
  else if (!v4)
  {
    goto LABEL_16;
  }
  if (v19 == 48000)
  {
    uint64_t v7 = qword_100A19E30;
    uint64_t v6 = 0;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = 48000;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Warning: Bad48KHzCodecs: Setting user defined A2DP Sample Rate for our endpoints to %d Hz", buf, 8u);
      return 0;
    }
  }
  else
  {
    if (v19 != 44100)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
        sub_100764E54();
      }
LABEL_16:
      uint64_t v28 = 0;
      long long v27 = 0u;
      memset(v26, 0, sizeof(v26));
      long long v24 = 0u;
      *(_OWORD *)unint64_t v25 = 0u;
      long long v22 = 0u;
      *(_OWORD *)uint64_t v23 = 0u;
      *(_OWORD *)std::string buf = 0u;
      long long v21 = 0u;
      sub_1006161E0((uint64_t)&buf[1]);
      BYTE2(v21) = 0;
      BYTE4(v21) = 0;
      BYTE2(v23[0]) = 0;
      BYTE4(v23[0]) = 0;
      DWORD1(v26[1]) = 0;
      long long v22 = 0uLL;
      *((void *)&v21 + 1) = 0;
      LOBYTE(v23[0]) = 0;
      long long v24 = 0uLL;
      v23[1] = 0;
      LOBYTE(v25[0]) = 0;
      memset(v26, 0, 19);
      v25[1] = 0;
      BYTE8(v26[1]) = 1;
      BYTE2(v28) = 0;
      *(void *)((char *)&v26[1] + 14) = 0;
      *(void *)((char *)&v26[1] + 9) = 0;
      long long v27 = 0uLL;
      *((void *)&v26[2] + 1) = 0;
      LOBYTE(v28) = 0;
      sub_1004783B8(a2, (uint64_t)buf);
      char v16 = 0;
      uint64_t v8 = sub_100017768();
      sub_10004191C(__p, "A2DP");
      sub_10004191C(v14, "Default48KHz");
      (*(void (**)(uint64_t, void **, void **, char *))(*(void *)v8 + 72))(v8, __p, v14, &v16);
      if (v15 < 0) {
        operator delete(v14[0]);
      }
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v16)
      {
        int v9 = qword_100A19E30;
        if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Warning: Bad48KHzCodecs: Defaulting to 48 KHz based on defaults write - using denylist instead of allowlist", (uint8_t *)__p, 2u);
        }
        if (BYTE8(v27))
        {
          __int16 v10 = qword_100A19E30;
          if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p[0]) = 0;
            uint64_t v6 = 2;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Bad48KHzCodecs: Disabling 48 KHz - Device is in 48 KHz AAC denylist", (uint8_t *)__p, 2u);
          }
          else
          {
            uint64_t v6 = 2;
          }
          goto LABEL_35;
        }
      }
      else
      {
        if (!BYTE9(v27) && !sub_100478AF4(a2))
        {
          char v12 = qword_100A19E30;
          if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Bad48KHzCodecs: Disabling 48 KHz - Device is NOT in 48 KHz AAC allowlist", (uint8_t *)__p, 2u);
          }
          uint64_t v6 = 0xFFFFFFFFLL;
          goto LABEL_35;
        }
        unsigned __int16 v11 = qword_100A19E30;
        uint64_t v6 = 0;
        if (!os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
        {
LABEL_35:
          if (SHIBYTE(v26[0]) < 0) {
            operator delete(v25[1]);
          }
          if (SHIBYTE(v24) < 0) {
            operator delete(v23[1]);
          }
          if (SHIBYTE(v22) < 0) {
            operator delete(*((void **)&v21 + 1));
          }
          nullsub_95(&buf[1]);
          return v6;
        }
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Bad48KHzCodecs: Device is in 48 KHz AAC allowlist", (uint8_t *)__p, 2u);
      }
      uint64_t v6 = 0;
      goto LABEL_35;
    }
    int v5 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = 44100;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Warning: Bad48KHzCodecs: Setting user defined A2DP Sample Rate for our endpoints to %d Hz", buf, 8u);
    }
    return 0xFFFFFFFFLL;
  }
  return v6;
}

void sub_10040EE60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  sub_100276384((uint64_t)&a23);
  _Unwind_Resume(a1);
}

unsigned char *sub_10040EEE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100035F54();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v3 + 96))(v3) & 1) != 0
    || (uint64_t v4 = sub_100017768(),
        BOOL result = (unsigned char *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 312))(v4),
        result))
  {
    uint64_t v6 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "3EDR packet types are disabled on this platform", buf, 2u);
    }
    uint64_t v14 = 0;
    char v13 = 0;
    sub_10001B8E0(&v13);
    if (!sub_10017E2D4(a2 + 128, &v14) && v14 && !*(unsigned char *)(v14 + 278)) {
      sub_10018EF4C(v14, 60956, v7, v8, v9, v10, v11, v12);
    }
    sub_10001B910(&v13);
    return sub_10001B8AC(&v13);
  }
  return result;
}

void sub_10040EFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_10040F010(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(result + 536);
  if (v3)
  {
    unsigned int v4 = *(unsigned __int16 *)(a1 + 40);
    uint64_t v5 = result + 536;
    do
    {
      unsigned int v6 = *(unsigned __int16 *)(v3 + 32);
      BOOL v7 = v6 >= v4;
      if (v6 >= v4) {
        uint64_t v8 = (uint64_t *)v3;
      }
      else {
        uint64_t v8 = (uint64_t *)(v3 + 8);
      }
      if (v7) {
        uint64_t v5 = v3;
      }
      uint64_t v3 = *v8;
    }
    while (*v8);
    if (v5 != result + 536 && *(unsigned __int16 *)(v5 + 32) <= v4) {
      return sub_10040D918(result, v4);
    }
  }
  return result;
}

uint64_t sub_10040F064(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = 0;
  long long v12 = 0u;
  memset(v11, 0, sizeof(v11));
  long long v9 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v7 = 0u;
  *(_OWORD *)uint64_t v8 = 0u;
  long long v5 = 0u;
  *(_OWORD *)unsigned int v6 = 0u;
  sub_1006161E0((uint64_t)&v5 + 1);
  BYTE2(v6[0]) = 0;
  BYTE4(v6[0]) = 0;
  BYTE2(v8[0]) = 0;
  BYTE4(v8[0]) = 0;
  DWORD1(v11[1]) = 0;
  long long v7 = 0uLL;
  v6[1] = 0;
  LOBYTE(v8[0]) = 0;
  long long v9 = 0uLL;
  v8[1] = 0;
  LOBYTE(__p[0]) = 0;
  memset(v11, 0, 19);
  __p[1] = 0;
  BYTE8(v11[1]) = 1;
  BYTE2(v13) = 0;
  *(void *)((char *)&v11[1] + 14) = 0;
  *(void *)((char *)&v11[1] + 9) = 0;
  long long v12 = 0uLL;
  *((void *)&v11[2] + 1) = 0;
  LOBYTE(v13) = 0;
  LODWORD(a2) = sub_1004783B8(a2, (uint64_t)&v5);
  int v3 = BYTE14(v11[2]);
  if (SHIBYTE(v11[0]) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(v8[1]);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(v6[1]);
  }
  if (v3) {
    a2 = a2;
  }
  else {
    a2 = 0;
  }
  nullsub_95((char *)&v5 + 1);
  return a2;
}

void sub_10040F19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10040F1B8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned __int16 v25 = a3;
  v24[0] = 0;
  v24[1] = 0;
  sub_10003AED0((uint64_t)v24, a1 + 552);
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AD810);
  }
  uint64_t v6 = sub_100030F10((uint64_t)off_1009F7EF8, a2, 1);
  uint64_t v7 = *(void *)(a1 + 536);
  if (!v7) {
    goto LABEL_14;
  }
  uint64_t v8 = a1 + 536;
  do
  {
    unsigned int v9 = *(unsigned __int16 *)(v7 + 32);
    BOOL v10 = v9 >= a3;
    if (v9 >= a3) {
      uint64_t v11 = (uint64_t *)v7;
    }
    else {
      uint64_t v11 = (uint64_t *)(v7 + 8);
    }
    if (v10) {
      uint64_t v8 = v7;
    }
    uint64_t v7 = *v11;
  }
  while (*v11);
  if (v8 == a1 + 536 || *(unsigned __int16 *)(v8 + 32) > a3) {
    goto LABEL_14;
  }
  sub_10040A4D0(a1, a3);
  uint64_t v13 = *(void *)(v8 + 40);
  if (*(unsigned char *)(v13 + 723))
  {
    if (*(unsigned char *)(v6 + 960)) {
      *(_DWORD *)(v6 + 980) = 1;
    }
    sub_10048698C(v6, 0);
    sub_10040D9FC((os_unfair_lock_s *)a1);
  }
  sub_1002E7878(v13);
  *(void *)&long long buf = _NSConcreteStackBlock;
  *((void *)&buf + 1) = 3221225472;
  uint64_t v29 = sub_100408AC4;
  int v30 = &unk_1009AD1F8;
  uint64_t v31 = v6;
  __int16 v32 = a3;
  char v33 = 0;
  sub_10040815C((os_unfair_lock_s *)(a1 + 432), &buf);
  sub_1003BA1D0(a1 + 528, &v25);
  uint64_t v14 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = *(void *)(a1 + 544);
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Current number of A2DP devices: %lu", (uint8_t *)&buf, 0xCu);
  }
  uint64_t v16 = *(void *)(a1 + 512);
  if (!v16) {
    goto LABEL_47;
  }
  uint64_t v17 = a1 + 512;
  do
  {
    unsigned int v18 = *(unsigned __int16 *)(v16 + 32);
    BOOL v19 = v18 >= v25;
    if (v18 >= v25) {
      unint64_t v20 = (uint64_t *)v16;
    }
    else {
      unint64_t v20 = (uint64_t *)(v16 + 8);
    }
    if (v19) {
      uint64_t v17 = v16;
    }
    uint64_t v16 = *v20;
  }
  while (*v20);
  if (v17 == a1 + 512 || v25 < *(unsigned __int16 *)(v17 + 32))
  {
LABEL_47:
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_FAULT)) {
      sub_100764EBC();
    }
  }
  uint64_t v21 = sub_1003BA1D0(a1 + 504, &v25);
  if (sub_10040F064(v21, v6))
  {
    long long v22 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(v6, &buf);
      if (SHIBYTE(v29) >= 0) {
        p_long long buf = &buf;
      }
      else {
        p_long long buf = (long long *)buf;
      }
      *(_DWORD *)unint64_t v26 = 136446210;
      long long v27 = p_buf;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Device %{public}s that requires a workaround for AVDTP start disconnected", v26, 0xCu);
      if (SHIBYTE(v29) < 0) {
        operator delete((void *)buf);
      }
    }
    *(void *)&long long buf = _NSConcreteStackBlock;
    *((void *)&buf + 1) = 3221225472;
    uint64_t v29 = sub_100408E28;
    int v30 = &unk_1009AD278;
    uint64_t v31 = v6;
    sub_100408D2C((os_unfair_lock_s *)(a1 + 464), &buf);
  }
  if (v6) {
LABEL_14:
  }
    sub_1004BE538(a1, v6, 0);
  sub_10003AFB4((uint64_t)v24);
  return 0;
}

void sub_10040F540(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10040F568(os_unfair_lock_s *a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, int a6)
{
  v29[0] = 0;
  v29[1] = 0;
  sub_10003AED0((uint64_t)v29, (uint64_t)&a1[138]);
  uint64_t v11 = sub_1004097B0((uint64_t)a1, a3);
  uint64_t v12 = sub_1004080A8((uint64_t)a1, a3);
  uint64_t v13 = qword_100A19E30;
  if (!a6)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT)
      && ((sub_100474E18(v12, v30), (v36 & 0x8000) == 0) ? (uint64_t v14 = v30) : (uint64_t v14 = *(uint8_t **)v30),
          *(_DWORD *)long long buf = 67109378,
          unsigned int v40 = a5,
          __int16 v41 = 2082,
          unsigned __int8 v42 = v14,
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Endpoint discovery succeeded - found %d stream endpoint(s) for device %{public}s", buf, 0x12u), SBYTE1(v36) < 0))
    {
      operator delete(*(void **)v30);
      if (!a5) {
        goto LABEL_38;
      }
    }
    else if (!a5)
    {
      goto LABEL_38;
    }
    uint64_t v27 = v12;
    uint64_t v28 = v11;
    uint64_t v15 = 0;
    uint64_t v16 = qword_100A19E30;
    uint64_t v17 = (unsigned __int8 *)(a4 + 3);
    do
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        int v18 = *(v17 - 3);
        int v19 = *(v17 - 2);
        int v20 = *(v17 - 1);
        int v21 = *v17;
        *(_DWORD *)int v30 = 67110144;
        *(_DWORD *)&v30[4] = v15;
        __int16 v31 = 1024;
        int v32 = v18;
        __int16 v33 = 1024;
        int v34 = v19;
        __int16 v35 = 1024;
        int v36 = v20;
        __int16 v37 = 1024;
        int v38 = v21;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Endpoint[%d]: mediaType = %d, endpointType = %d, seid = %d, inUse = %d", v30, 0x20u);
        uint64_t v16 = qword_100A19E30;
      }
      ++v15;
      v17 += 4;
    }
    while (a5 != v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int v30 = 67109120;
      *(_DWORD *)&v30[4] = a3;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Saving discovered peer endpoints for a2dp handle %d", v30, 8u);
    }
    sub_1004476BC(v28 + 400, a4, a5);
    unsigned int v22 = sub_100448108(v28 + 400);
    uint64_t v23 = qword_100A19E30;
    if (v22 == 255)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
      {
        sub_100474E18(v27, v30);
        sub_100764EFC();
      }
      goto LABEL_21;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(v27, v30);
      unsigned __int16 v25 = (v36 & 0x8000) == 0 ? v30 : *(uint8_t **)v30;
      *(_DWORD *)long long buf = 67109378;
      unsigned int v40 = v22;
      __int16 v41 = 2082;
      unsigned __int8 v42 = v25;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Querying stream capabilities of endpoint %u on device %{public}s", buf, 0x12u);
      if (SBYTE1(v36) < 0) {
        operator delete(*(void **)v30);
      }
    }
    v30[0] = 0;
    sub_10001B8E0(v30);
    if (sub_1004455DC(v28 + 400) < 0x103)
    {
      if (sub_10013733C(a3, v22, 0)
        && os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
      {
        sub_100764FB8();
      }
    }
    else if (sub_10013747C(a3, v22, 0) {
           && os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
    }
    {
      sub_100764F50();
    }
    sub_10001B8AC(v30);
LABEL_38:
    uint64_t v24 = 0;
    goto LABEL_39;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
  {
    if (v12)
    {
      sub_100474E18(v12, v30);
      sub_100765068();
    }
    else
    {
      sub_100765020((uint64_t)buf, a6);
    }
  }
LABEL_21:
  sub_1004091F8(a1, a3);
  uint64_t v24 = 1;
LABEL_39:
  sub_10003AFB4((uint64_t)v29);
  return v24;
}

void sub_10040F98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10040F9D4(os_unfair_lock_s *a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, unsigned int a6, int a7)
{
  v22[0] = 0;
  v22[1] = 0;
  sub_10003AED0((uint64_t)v22, (uint64_t)&a1[138]);
  uint64_t v13 = sub_1004097B0((uint64_t)a1, a3);
  uint64_t v14 = v13;
  if (a7)
  {
    uint64_t v15 = qword_100A19E30;
    if (*(int *)(v13 + 728) < 3)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67109632;
        int v24 = a7;
        __int16 v25 = 1024;
        unsigned int v26 = a4;
        __int16 v27 = 1024;
        unsigned int v28 = a3;
        _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Received get capability failure with error %d for stream endpoint ID %u on a2dp handle %d - disconnecting", buf, 0x14u);
      }
      sub_1004091F8(a1, a3);
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109632;
      int v24 = a7;
      __int16 v25 = 1024;
      unsigned int v26 = a4;
      __int16 v27 = 1024;
      unsigned int v28 = a3;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "GetCaps rejected with error %d, but already in >= open state for stream endpoint ID %u on a2dp handle %d", buf, 0x14u);
    }
  }
  else
  {
    uint64_t v16 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v17 = *(_DWORD *)(v14 + 728);
      *(_DWORD *)long long buf = 67109632;
      int v24 = a4;
      __int16 v25 = 1024;
      unsigned int v26 = a3;
      __int16 v27 = 1024;
      unsigned int v28 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "GetCapsCfm: Successfully retrieved capabilities for stream endpoint %u on a2dp handle %d, stream state 0x%d", buf, 0x14u);
    }
    if (*(_DWORD *)(v14 + 728) == 1)
    {
      sub_100445BE8(v14 + 400, a6, a5, a4);
      int v18 = sub_100448108(v14 + 400);
      if (v18 == 255)
      {
        sub_10040B710(a1, a3);
      }
      else
      {
        int v19 = qword_100A19E30;
        if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 67109376;
          int v24 = v18;
          __int16 v25 = 1024;
          unsigned int v26 = a3;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Querying stream capabilities of endpoint %u on a2dpHandle %d", buf, 0xEu);
        }
        buf[0] = 0;
        sub_10001B8E0(buf);
        int v20 = sub_10013733C(a3, v18, 0);
        sub_10001B910(buf);
        if (v20 && os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
          sub_100764FB8();
        }
        sub_10001B8AC(buf);
      }
    }
  }
  sub_10003AFB4((uint64_t)v22);
  return 0;
}

void sub_10040FCB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10040FCEC(uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8)
{
  v31[0] = 0;
  v31[1] = 0;
  sub_10003AED0((uint64_t)v31, a1 + 552);
  uint64_t v27 = sub_1004097B0(a1, a3);
  uint64_t v26 = sub_1004080A8(a1, a3);
  uint64_t v16 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109888;
    int v33 = a4;
    __int16 v34 = 1024;
    int v35 = a5;
    __int16 v36 = 1024;
    *(_DWORD *)__int16 v37 = a3;
    *(_WORD *)&v37[4] = 1024;
    *(_DWORD *)&v37[6] = a6;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Received set stream configuration request for local SEID %u and remote SEID %u from a2dpHandle %d, stream handle %d", buf, 0x1Au);
  }
  uint64_t v17 = sub_10044A17C(a1 + 280, a4);
  if (sub_100445FBC(v27 + 400, a4, a5, a6, a7, a8, v17))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
      sub_100765188();
    }
    buf[0] = 0;
    sub_10001B8E0(buf);
    int v18 = sub_10013989C(a6, a2, 0, 41);
    sub_10001B910(buf);
    if (v18 && os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
      sub_100765120();
    }
    int v19 = buf;
  }
  else
  {
    char v30 = 0;
    sub_10001B8E0(&v30);
    int v20 = sub_10013989C(a6, a2, 0, 0);
    sub_10001B910(&v30);
    if (v20)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
        sub_1007650B8();
      }
    }
    else
    {
      int v21 = sub_1004454BC(v27 + 400);
      int v22 = *(unsigned __int8 *)(v27 + 592);
      uint64_t v23 = qword_100A19E30;
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(v26, __p);
        int v24 = v29 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)long long buf = 67110146;
        int v33 = a4;
        __int16 v34 = 1024;
        int v35 = a5;
        __int16 v36 = 2082;
        *(void *)__int16 v37 = v24;
        *(_WORD *)&v37[8] = 1024;
        int v38 = v21;
        __int16 v39 = 1024;
        int v40 = v22;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Approved and configured incoming stream configuration for local SEID %d and remote SEID %d on device %{public}s, remote delay reporting %d, local delay reporting %d", buf, 0x24u);
        if (v29 < 0) {
          operator delete(__p[0]);
        }
      }
      *(_DWORD *)(v27 + 728) = 2;
    }
    int v19 = (uint8_t *)&v30;
  }
  sub_10001B8AC(v19);
  sub_10003AFB4((uint64_t)v31);
  return 0;
}

void sub_10040FFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
}

void sub_10041003C()
{
}

uint64_t sub_100410044(uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8)
{
  v33[0] = 0;
  v33[1] = 0;
  sub_10003AED0((uint64_t)v33, a1 + 552);
  uint64_t v15 = sub_1004097B0(a1, a3);
  uint64_t v16 = sub_1004080A8(a1, a3);
  if (!v16)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
      sub_1007651F0();
    }
    goto LABEL_14;
  }
  uint64_t v17 = v15 + 400;
  uint64_t v29 = a7;
  unsigned int v18 = a2;
  int v19 = (unsigned __int16)sub_100445248(v15 + 400);
  if (v19)
  {
    unsigned int v20 = *(_DWORD *)(v15 + 728);
    if (v20 <= 6 && ((1 << v20) & 0x68) != 0) {
      goto LABEL_5;
    }
    log = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      sub_1004A82EC((unsigned __int8 *)(v16 + 128), __p);
      int v24 = __p;
      if (v32 < 0) {
        int v24 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 67109378;
      LODWORD(v35[0]) = v19;
      WORD2(v35[0]) = 2082;
      *(void *)((char *)v35 + 6) = v24;
      _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEFAULT, "SetConfigInd, there already exists stream handle %d for device %{public}s, but accepting since we are not in streaming state", buf, 0x12u);
      if (v32 < 0) {
        operator delete(__p[0]);
      }
    }
    if (v20 == 3)
    {
LABEL_5:
      int v21 = qword_100A19E30;
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
      {
        sub_1004A82EC((unsigned __int8 *)(v16 + 128), __p);
        if (v32 >= 0) {
          int v22 = __p;
        }
        else {
          int v22 = (void **)__p[0];
        }
        *(_DWORD *)long long buf = 136446210;
        v35[0] = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Rejecting incoming set config from device %{public}s", buf, 0xCu);
        if (v32 < 0) {
          operator delete(__p[0]);
        }
      }
      LOBYTE(__p[0]) = 0;
      sub_10001B8E0(__p);
      sub_10013989C(a6, v18, 0, 19);
      sub_10001B910(__p);
      sub_10001B8AC(__p);
LABEL_14:
      uint64_t v23 = 1;
      goto LABEL_28;
    }
  }
  __int16 v25 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    sub_1004A82EC((unsigned __int8 *)(v16 + 128), __p);
    uint64_t v26 = v32 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)long long buf = 67109378;
    LODWORD(v35[0]) = a6;
    WORD2(v35[0]) = 2082;
    *(void *)((char *)v35 + 6) = v26;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "SetConfigInd setting a2dp stream handle to %d for device %{public}s", buf, 0x12u);
    if (v32 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_100445298(v17, a6);
  sub_10040FCEC(a1, v18, a3, a4, a5, a6, v29, a8);
  uint64_t v23 = 0;
LABEL_28:
  sub_10003AFB4((uint64_t)v33);
  return v23;
}

void sub_100410378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004103BC(os_unfair_lock_s *a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5)
{
  v18[0] = 0;
  v18[1] = 0;
  sub_10003AED0((uint64_t)v18, (uint64_t)&a1[138]);
  unsigned int v8 = sub_1004099B8((uint64_t)a1, a3);
  uint64_t v9 = sub_1004080A8((uint64_t)a1, v8);
  BOOL v10 = qword_100A19E30;
  if (a5)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
    {
      if (v9)
      {
        sub_100474E18(v9, __p);
        sub_1007652D4();
      }
      else
      {
        sub_10076528C((uint64_t)buf, a5);
      }
    }
    sub_1004091F8(a1, v8);
LABEL_14:
    uint64_t v12 = 1;
    goto LABEL_31;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    if (v9)
    {
      sub_100474E18(v9, __p);
      if (v20 >= 0) {
        uint64_t v11 = __p;
      }
      else {
        uint64_t v11 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136446210;
      int v22 = (const char *)v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Received set stream configuration success from device %{public}s", buf, 0xCu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      *(_DWORD *)long long buf = 136446210;
      int v22 = "null";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Received set stream configuration success from device %{public}s", buf, 0xCu);
    }
  }
  uint64_t v13 = qword_100A19E30;
  BOOL v14 = os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT);
  if (!v8)
  {
    if (v14)
    {
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = a3;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Set stream configuration returned an unknown stream handle %d, stream handle was likely reconfigured. Not moving to open AVDTP", (uint8_t *)__p, 8u);
    }
    goto LABEL_14;
  }
  if (v14)
  {
    if (v9)
    {
      sub_100474E18(v9, __p);
      if (v20 >= 0) {
        uint64_t v15 = __p;
      }
      else {
        uint64_t v15 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136446466;
      int v22 = (const char *)v15;
      __int16 v23 = 1024;
      unsigned int v24 = a3;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Attempting to open streaming channel to device %{public}s on handle %d", buf, 0x12u);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      *(_DWORD *)long long buf = 136446466;
      int v22 = "null";
      __int16 v23 = 1024;
      unsigned int v24 = a3;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Attempting to open streaming channel to device %{public}s on handle %d", buf, 0x12u);
    }
  }
  LOBYTE(__p[0]) = 0;
  sub_10001B8E0(__p);
  int v16 = sub_100137C54(a3, 0);
  sub_10001B910(__p);
  if (v16 && os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
    sub_100765224();
  }
  sub_10001B8AC(__p);
  uint64_t v12 = 0;
LABEL_31:
  sub_10003AFB4((uint64_t)v18);
  return v12;
}

void sub_1004106F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100410734(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6)
{
  v20[0] = 0;
  v20[1] = 0;
  sub_10003AED0((uint64_t)v20, a1 + 552);
  unsigned int v9 = sub_1004099B8(a1, a3);
  uint64_t v10 = sub_1004080A8(a1, v9);
  uint64_t v11 = qword_100A19E30;
  if (a6)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
    {
      if (v10)
      {
        sub_100474E18(v10, __p);
        sub_10076536C();
      }
      else
      {
        sub_100765324((uint64_t)buf, a6);
      }
    }
    sub_1004091F8((os_unfair_lock_s *)a1, v9);
    uint64_t v13 = 1;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      if (v10)
      {
        sub_100474E18(v10, __p);
        if (v19 >= 0) {
          uint64_t v12 = __p;
        }
        else {
          uint64_t v12 = (void **)__p[0];
        }
        *(_DWORD *)long long buf = 136446210;
        int v22 = (const char *)v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Received get stream configuration success from device %{public}s", buf, 0xCu);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        *(_DWORD *)long long buf = 136446210;
        int v22 = "null";
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Received get stream configuration success from device %{public}s", buf, 0xCu);
      }
    }
    if (*(unsigned char *)(a1 + 616))
    {
      BOOL v14 = qword_100A19E30;
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
      {
        if (v10)
        {
          sub_100474E18(v10, __p);
          if (v19 >= 0) {
            uint64_t v15 = __p;
          }
          else {
            uint64_t v15 = (void **)__p[0];
          }
          *(_DWORD *)long long buf = 136446210;
          int v22 = (const char *)v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Attempting to open streaming channel to device %{public}s", buf, 0xCu);
          if (v19 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          *(_DWORD *)long long buf = 136446210;
          int v22 = "null";
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Attempting to open streaming channel to device %{public}s", buf, 0xCu);
        }
      }
      LOBYTE(__p[0]) = 0;
      sub_10001B8E0(__p);
      int v16 = sub_100137C54(a3, 0);
      sub_10001B910(__p);
      if (v16 && os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
        sub_100765224();
      }
      sub_10001B8AC(__p);
    }
    uint64_t v13 = 0;
  }
  sub_10003AFB4((uint64_t)v20);
  return v13;
}

void sub_100410A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100410A5C(uint64_t a1, unsigned int a2, int a3)
{
  v15[0] = 0;
  v15[1] = 0;
  sub_10003AED0((uint64_t)v15, a1 + 552);
  unsigned int v6 = sub_1004099B8(a1, a3);
  uint64_t v7 = sub_1004097B0(a1, v6);
  uint64_t v8 = sub_1004080A8(a1, v6);
  unsigned int v9 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    if (v8)
    {
      sub_100474E18(v8, __p);
      if (v14 >= 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136446466;
      uint64_t v17 = (const char *)v10;
      __int16 v18 = 1024;
      int v19 = a3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Received open streaming channel request from device %{public}s on stream handle %d", buf, 0x12u);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      *(_DWORD *)long long buf = 136446466;
      uint64_t v17 = "null";
      __int16 v18 = 1024;
      int v19 = a3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Received open streaming channel request from device %{public}s on stream handle %d", buf, 0x12u);
    }
  }
  LOBYTE(__p[0]) = 0;
  sub_10001B8E0(__p);
  int v11 = sub_100137E30(a2, a3, 0);
  sub_10001B910(__p);
  if (v11 && os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
    sub_1007653BC();
  }
  *(_DWORD *)(v7 + 728) = 3;
  sub_10001B8AC(__p);
  sub_10003AFB4((uint64_t)v15);
  return 0;
}

void sub_100410C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100410C90(os_unfair_lock_s *a1, uint64_t a2, int a3, int a4, int a5)
{
  v22[0] = 0;
  v22[1] = 0;
  sub_10003AED0((uint64_t)v22, (uint64_t)&a1[138]);
  unsigned int v9 = sub_1004099B8((uint64_t)a1, a3);
  uint64_t v10 = (unsigned __int8 *)sub_1004080A8((uint64_t)a1, v9);
  uint64_t v11 = sub_1004097B0((uint64_t)a1, v9);
  uint64_t v12 = qword_100A19E30;
  if (a5 || !v10)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
    {
      if (v10)
      {
        sub_100474E18((uint64_t)v10, __p);
        sub_100765478();
      }
      else
      {
        sub_1007654C8((uint64_t)buf, a5);
      }
    }
    goto LABEL_32;
  }
  uint64_t v13 = v11;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18((uint64_t)v10, __p);
    char v14 = v24 >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)long long buf = 136446466;
    uint64_t v26 = v14;
    __int16 v27 = 1024;
    int v28 = a3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Successfully opened streaming channel to device %{public}s on stream handle %d", buf, 0x12u);
    if (v24 < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (*(_DWORD *)(v13 + 728) == 7)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
    {
      sub_100474E18((uint64_t)v10, __p);
      sub_100765424();
    }
LABEL_32:
    sub_1004091F8(a1, v9);
    goto LABEL_33;
  }
  *(_DWORD *)(v13 + 728) = 3;
  if (sub_100478B2C((uint64_t)v10, 13)
    && (uint64_t v15 = sub_100035F54(), (*(unsigned int (**)(uint64_t, void))(*(void *)v15 + 792))(v15, 0))
    && sub_100445940(v13 + 400) == 33023)
  {
    char v16 = 1;
    *(unsigned char *)(v13 + 704) = 1;
    *(unsigned char *)(v13 + 706) = 0;
  }
  else
  {
    char v16 = 0;
  }
  uint64_t v17 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(v13 + 704)) {
      __int16 v18 = "supported";
    }
    else {
      __int16 v18 = "not supported";
    }
    *(_DWORD *)std::string __p = 136315138;
    *(void *)&__p[4] = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Dynamic Latency is %s", __p, 0xCu);
  }
  if (*(unsigned char *)(v13 + 704))
  {
    int v19 = sub_100448228(v13 + 400);
    sub_100634E6C(v13, v19);
  }
  if ((v16 & 1) != 0
    || (uint64_t v20 = sub_100017768(), ((*(uint64_t (**)(uint64_t))(*(void *)v20 + 528))(v20) & 1) == 0))
  {
    *(unsigned char *)(v13 + 712) = 1;
  }
  sub_100411020(a1, (uint64_t)v10);
  sub_10040BBB8((uint64_t)a1, 0, v9, a4, v10);
LABEL_33:
  sub_10003AFB4((uint64_t)v22);
  return 0;
}

void sub_100410FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100411020(os_unfair_lock_s *a1, uint64_t a2)
{
  unsigned int v4 = sub_100409054(a1, a2);
  uint64_t v5 = sub_1004097B0((uint64_t)a1, v4);
  if (a2 && (uint64_t v6 = v5) != 0)
  {
    char v33 = 0;
    uint64_t v7 = sub_100017768();
    sub_10004191C(&buf, "A2DP");
    sub_10004191C(__p, "WirelessSplitter");
    (*(void (**)(uint64_t, std::string *, unsigned char *, char *))(*(void *)v7 + 72))(v7, &buf, __p, &v33);
    if (v41 < 0) {
      operator delete(*(void **)__p);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (v33)
    {
      int v8 = sub_100478B2C(a2, 12);
      char v33 = v8;
      if (v8)
      {
        unsigned int v9 = qword_100A19E30;
        if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Wireless Splitter is enabled via defaults writes", (uint8_t *)&buf, 2u);
        }
      }
    }
    int v10 = sub_100478B2C(a2, 27);
    if (v33) {
      int v11 = 1;
    }
    else {
      int v11 = v10;
    }
    if (v11 == 1)
    {
      uint64_t v12 = sub_100035F54();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 472))(v12))
      {
        *(unsigned char *)(v6 + 722) = 1;
        int v13 = sub_100634250(v6);
        unsigned int v14 = sub_100409AC8(a1, v13);
        if (v14)
        {
          uint64_t v15 = sub_1004080A8((uint64_t)a1, v14);
          uint64_t v16 = sub_1004097B0((uint64_t)a1, v14);
          if (v16 && v15)
          {
            if (v33 || *(unsigned char *)(a2 + 960) || *(unsigned char *)(v15 + 960) || *(unsigned char *)(a2 + 985))
            {
              uint64_t v17 = qword_100A19E30;
              if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
              {
                sub_100474E18(a2, __p);
                int v18 = v41;
                int v19 = *(unsigned char **)__p;
                int v20 = *(unsigned __int8 *)(a2 + 960);
                sub_100474E18(v15, v31);
                int v21 = __p;
                if (v18 < 0) {
                  int v21 = v19;
                }
                int v22 = "guest";
                int v23 = *(unsigned __int8 *)(v15 + 960);
                if (v20) {
                  char v24 = "guest";
                }
                else {
                  char v24 = "owner";
                }
                LODWORD(buf.__r_.__value_.__l.__data_) = 136446978;
                *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v21;
                if (v32 >= 0) {
                  __int16 v25 = v31;
                }
                else {
                  __int16 v25 = (void **)v31[0];
                }
                WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
                if (!v23) {
                  int v22 = "owner";
                }
                *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v24;
                HIWORD(buf.__r_.__value_.__r.__words[2]) = 2082;
                int v35 = v25;
                __int16 v36 = 2082;
                __int16 v37 = v22;
                _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Wireless Splitter is enabled on device %{public}s which is %{public}s and device %{public}s which is %{public}s", (uint8_t *)&buf, 0x2Au);
                if (v32 < 0) {
                  operator delete(v31[0]);
                }
                if (v41 < 0) {
                  operator delete(*(void **)__p);
                }
              }
              sub_1002E8CD8(v16, 1);
              sub_1002E8CD8(v6, 1);
              (*(void (**)(os_unfair_lock_s *, uint64_t, uint64_t, void))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                   + 192))(a1, v6, 1, 0);
              (*(void (**)(os_unfair_lock_s *, uint64_t, uint64_t, void))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                   + 192))(a1, v16, 1, 0);
              sub_100408C28(a1, v6, 1);
              sub_100408C28(a1, v16, 1);
            }
          }
          else
          {
            memset(&buf, 0, sizeof(buf));
            uint64_t v26 = sub_10004191C(&buf, "WS_ERROR_START_FAILED_TO_FIND_LAST_CONNECTED");
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
              uint64_t v26 = sub_10003B098(&v30, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
            }
            else {
              std::string v30 = buf;
            }
            sub_10041AB48((uint64_t)v26, &v30);
            if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v30.__r_.__value_.__l.__data_);
            }
            if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
              sub_100765510();
            }
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf.__r_.__value_.__l.__data_);
            }
          }
        }
      }
    }
    __int16 v27 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      if (*(unsigned char *)(v6 + 722)) {
        int v28 = "supported";
      }
      else {
        int v28 = "not supported";
      }
      sub_100474E18(a2, &buf);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_std::string buf = &buf;
      }
      else {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string __p = 136446466;
      *(void *)&__p[4] = v28;
      __int16 v39 = 2082;
      int v40 = p_buf;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Wireless Splitter is %{public}s on device %{public}s", __p, 0x16u);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
  {
    sub_100765544();
  }
}

void sub_100411548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004115B0(uint64_t a1, unsigned int a2, __int16 a3, const void *a4, unsigned int a5)
{
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, a1 + 552);
  char v11 = 0;
  sub_10001B8E0(&v11);
  int v9 = sub_100139D20(a3, a2, a4, a5, 0);
  sub_10001B910(&v11);
  if (v9 && os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
    sub_100765578();
  }
  sub_10001B8AC(&v11);
  sub_10003AFB4((uint64_t)v12);
  return 0;
}

void sub_100411670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100411694(uint64_t a1, uint64_t a2, __int16 a3)
{
  __int16 v8 = a3;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 552);
  if (*(unsigned char *)(a1 + 616))
  {
    char v6 = 0;
    sub_10001B8E0(&v6);
    int v4 = sub_100137F8C(&v8, 1u, 0);
    sub_10001B910(&v6);
    if (v4 && os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
      sub_10076480C();
    }
    sub_10001B8AC(&v6);
  }
  sub_10003AFB4((uint64_t)v7);
  return 0;
}

void sub_100411744(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100411768(uint64_t a1, unsigned int a2, __int16 *a3, unsigned int a4)
{
  v25[0] = 0;
  v25[1] = 0;
  sub_10003AED0((uint64_t)v25, a1 + 552);
  if (a3)
  {
    int v8 = (unsigned __int16)*a3;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
      sub_100765648();
    }
    int v8 = 0;
  }
  unsigned int v9 = sub_1004099B8(a1, v8);
  uint64_t v10 = sub_1004097B0(a1, v9);
  uint64_t v11 = sub_1004080A8(a1, v9);
  if (v11)
  {
    uint64_t v12 = qword_100A19E30;
    BOOL v13 = os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT);
    if (v13)
    {
      sub_100474E18(v11, __p);
      unsigned int v14 = SHIBYTE(v27) >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136446210;
      __int16 v31 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Received start streaming command from device %{public}s", buf, 0xCu);
      if (SHIBYTE(v27) < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10040F064(v13, v11))
    {
      uint64_t v15 = qword_100A19E30;
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(v11, __p);
        uint64_t v16 = SHIBYTE(v27) >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)std::string buf = 136446210;
        __int16 v31 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "StartInd, forwarding play command to RemoteClient for device %{public}s", buf, 0xCu);
        if (SHIBYTE(v27) < 0) {
          operator delete(__p[0]);
        }
      }
      __p[0] = _NSConcreteStackBlock;
      __p[1] = (void *)3221225472;
      __int16 v27 = sub_100408E58;
      int v28 = &unk_1009AD278;
      uint64_t v29 = v11;
      sub_100408D2C((os_unfair_lock_s *)(a1 + 464), __p);
    }
    LOBYTE(__p[0]) = 0;
    sub_10001B8E0(__p);
    if (!atomic_load((unint64_t *)(a1 + 752)))
    {
      int v20 = sub_10018F0E8((uint64_t)sub_10040BB10, v11 + 128);
      atomic_store(mach_absolute_time(), (unint64_t *)(a1 + 744));
      if (v20)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
          sub_100764874();
        }
      }
    }
    sub_10018354C(v11 + 128);
    int v18 = sub_100138214(a2, a3, a4, 0, 0);
    sub_10001B910(__p);
    if (v18)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
        sub_1007655E0();
      }
    }
    else
    {
      *(_DWORD *)(v10 + 728) = 5;
      if ((sub_100634DBC(v10) & 1) == 0)
      {
        uint64_t v21 = sub_1004AFB34();
        v23[0] = _NSConcreteStackBlock;
        v23[1] = 3221225472;
        v23[2] = sub_100411B48;
        v23[3] = &unk_1009A0B58;
        v23[4] = a1;
        __int16 v24 = v9;
        sub_1004AFF58(v21, 12000, v23);
      }
    }
    sub_10001B8AC(__p);
    uint64_t v19 = 0;
  }
  else
  {
    uint64_t v19 = 1;
  }
  sub_10003AFB4((uint64_t)v25);
  return v19;
}

void sub_100411B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100411B48(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(result + 536);
  if (v3)
  {
    unsigned int v4 = *(unsigned __int16 *)(a1 + 40);
    uint64_t v5 = result + 536;
    do
    {
      unsigned int v6 = *(unsigned __int16 *)(v3 + 32);
      BOOL v7 = v6 >= v4;
      if (v6 >= v4) {
        int v8 = (uint64_t *)v3;
      }
      else {
        int v8 = (uint64_t *)(v3 + 8);
      }
      if (v7) {
        uint64_t v5 = v3;
      }
      uint64_t v3 = *v8;
    }
    while (*v8);
    if (v5 != result + 536 && *(unsigned __int16 *)(v5 + 32) <= v4) {
      return sub_10040AFDC(result, v4);
    }
  }
  return result;
}

uint64_t sub_100411B9C(os_unfair_lock_s *a1, uint64_t a2, unsigned __int16 *a3, int a4, uint64_t a5, int a6)
{
  v21[0] = 0;
  v21[1] = 0;
  sub_10003AED0((uint64_t)v21, (uint64_t)&a1[138]);
  if (a3 && a4)
  {
    unsigned int v10 = sub_1004099B8((uint64_t)a1, *a3);
    uint64_t v11 = sub_1004097B0((uint64_t)a1, v10);
    uint64_t v12 = sub_1004080A8((uint64_t)a1, v10);
    if (v12)
    {
      BOOL v13 = qword_100A19E30;
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT)
        && ((sub_100474E18(v12, __p), v20 >= 0) ? (unsigned int v14 = __p) : (unsigned int v14 = (void **)__p[0]),
            *(_DWORD *)std::string buf = 136446210,
            int v23 = v14,
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Received confirm from %{public}s to start streaming", buf, 0xCu), v20 < 0))
      {
        operator delete(__p[0]);
        if (a6)
        {
LABEL_10:
          if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
          {
            sub_100474E18(v12, __p);
            sub_10076567C();
          }
          sub_1004BE7AC();
        }
      }
      else if (a6)
      {
        goto LABEL_10;
      }
      if (*(_DWORD *)(v11 + 728) == 5)
      {
        uint64_t v16 = qword_100A19E30;
        if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
        {
          sub_100474E18(v12, __p);
          uint64_t v17 = v20 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)std::string buf = 136446210;
          int v23 = v17;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Device %{public}s was already in streaming state", buf, 0xCu);
          if (v20 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      *(_DWORD *)(v11 + 728) = 5;
      sub_100409F00(a1, v10);
      uint64_t v15 = 0;
    }
    else
    {
      uint64_t v15 = 1;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
      sub_1007656CC();
    }
    uint64_t v15 = 7;
  }
  sub_10003AFB4((uint64_t)v21);
  return v15;
}

void sub_100411F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100411FA4(uint64_t a1, unsigned int a2, __int16 *a3, unsigned int a4)
{
  v18[0] = 0;
  v18[1] = 0;
  sub_10003AED0((uint64_t)v18, a1 + 552);
  if (a3 && a4)
  {
    unsigned int v8 = sub_1004099B8(a1, (unsigned __int16)*a3);
    uint64_t v9 = sub_1004080A8(a1, v8);
    uint64_t v10 = sub_1004097B0(a1, v8);
    uint64_t v11 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      if (v9)
      {
        sub_100474E18(v9, __p);
        if (v17 >= 0) {
          uint64_t v12 = __p;
        }
        else {
          uint64_t v12 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136446210;
        char v20 = (const char *)v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Received suspend streaming request from device %{public}s", buf, 0xCu);
        if (v17 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        *(_DWORD *)std::string buf = 136446210;
        char v20 = "null";
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Received suspend streaming request from device %{public}s", buf, 0xCu);
      }
    }
    if (!sub_10040A4D0(a1, v8) || *(_DWORD *)(v10 + 728) != 3)
    {
      *(_DWORD *)(v10 + 728) = 3;
      LOBYTE(__p[0]) = 0;
      sub_10001B8E0(__p);
      sub_100139074(a2, a3, a4, 0, 0);
      sub_10001B910(__p);
      sub_10001B8AC(__p);
      goto LABEL_19;
    }
    unsigned int v14 = qword_100A19E30;
    uint64_t v13 = 0;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "streaming already suspended, racing transaction", (uint8_t *)__p, 2u);
LABEL_19:
      uint64_t v13 = 0;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
      sub_100765648();
    }
    uint64_t v13 = 7;
  }
  sub_10003AFB4((uint64_t)v18);
  return v13;
}

void sub_100412208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100412248(os_unfair_lock_s *a1, uint64_t a2, unsigned __int16 *a3, int a4, uint64_t a5, int a6)
{
  v30[0] = 0;
  v30[1] = 0;
  sub_10003AED0((uint64_t)v30, (uint64_t)&a1[138]);
  if (a3 && a4)
  {
    unsigned int v10 = sub_1004099B8((uint64_t)a1, *a3);
    uint64_t v11 = sub_1004097B0((uint64_t)a1, v10);
    uint64_t v12 = sub_1004080A8((uint64_t)a1, v10);
    uint64_t v13 = v12;
    if (!a6)
    {
      uint64_t v18 = *(unsigned __int16 *)(v12 + 132);
      uint64_t v19 = *(unsigned int *)(v12 + 128);
      char v20 = qword_100A19E30;
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(v13, __p);
        uint64_t v21 = v29 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)std::string buf = 136446210;
        v32[0] = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Successfully suspended stream to device %{public}s", buf, 0xCu);
        if (v29 < 0) {
          operator delete(__p[0]);
        }
      }
      *(_DWORD *)(v11 + 728) = 3;
      if (*(_DWORD *)(v11 + 732) != 1) {
        goto LABEL_35;
      }
      *(_DWORD *)(v11 + 732) = 0;
      int v22 = qword_100A19E30;
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_INFO))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "Checking if HAL still thinks we are streaming, if so, start up A2DP stream if not done so already", (uint8_t *)__p, 2u);
      }
      if (!sub_100634DBC(v11))
      {
LABEL_35:
        uint64_t v25 = sub_10003FB34();
        uint64_t v26 = sub_100476054(v13);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, void))(*(void *)v25 + 72))(v25, (v19 | (v18 << 32)) & 0xFFFFFFFFFFFFLL, v26, 2, 0, 1, 1, 0);
        uint64_t v16 = 0;
        goto LABEL_36;
      }
      int v23 = qword_100A19E30;
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(v13, __p);
        __int16 v24 = v29 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)std::string buf = 136446210;
        v32[0] = v24;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Pending start stream, connecting media stream for %{public}s", buf, 0xCu);
        if (v29 < 0) {
          operator delete(__p[0]);
        }
      }
      sub_10040B360((uint64_t)a1, v10);
      goto LABEL_34;
    }
    int v14 = *(_DWORD *)(v11 + 728);
    uint64_t v15 = qword_100A19E30;
    if (v14 != 3)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
      {
        sub_100474E18(v13, __p);
        sub_100765738();
      }
      sub_1004091F8(a1, v10);
      goto LABEL_34;
    }
    uint64_t v16 = 0;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(v13, __p);
      if (v29 >= 0) {
        char v17 = __p;
      }
      else {
        char v17 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 67109378;
      LODWORD(v32[0]) = a6;
      WORD2(v32[0]) = 2082;
      *(void *)((char *)v32 + 6) = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Stream is already in open state, ignoring with suspend error %u on device %{public}s", buf, 0x12u);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
LABEL_34:
      uint64_t v16 = 0;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
      sub_100765648();
    }
    uint64_t v16 = 7;
  }
LABEL_36:
  sub_10003AFB4((uint64_t)v30);
  return v16;
}

void sub_1004125F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100412634(os_unfair_lock_s *a1, uint64_t a2, unsigned __int16 *a3, int a4, uint64_t a5, int a6)
{
  v18[0] = 0;
  v18[1] = 0;
  sub_10003AED0((uint64_t)v18, (uint64_t)&a1[138]);
  if (a4)
  {
    unsigned int v10 = sub_1004099B8((uint64_t)a1, *a3);
    uint64_t v11 = sub_1004080A8((uint64_t)a1, v10);
    uint64_t v12 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      if (v11)
      {
        sub_100474E18(v11, __p);
        if (v17 >= 0) {
          uint64_t v13 = __p;
        }
        else {
          uint64_t v13 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136446210;
        char v20 = (const char *)v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Received transition confirm from device %{public}s", buf, 0xCu);
        if (v17 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        *(_DWORD *)std::string buf = 136446210;
        char v20 = "null";
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Received transition confirm from device %{public}s", buf, 0xCu);
      }
    }
    uint64_t v14 = sub_100412248(a1, 0, a3, a4, 0, a6);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
      sub_100765788();
    }
    uint64_t v14 = 7;
  }
  sub_10003AFB4((uint64_t)v18);
  return v14;
}

void sub_1004127F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10041281C(uint64_t a1, unsigned int a2, int a3)
{
  v14[0] = 0;
  v14[1] = 0;
  sub_10003AED0((uint64_t)v14, a1 + 552);
  unsigned int v6 = sub_1004099B8(a1, a3);
  uint64_t v7 = sub_1004080A8(a1, v6);
  unsigned int v8 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    if (v7)
    {
      sub_100474E18(v7, __p);
      if (v13 >= 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v16 = (const char *)v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received reconfigure stream request from device %{public}s", buf, 0xCu);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v16 = "null";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received reconfigure stream request from device %{public}s", buf, 0xCu);
    }
  }
  LOBYTE(__p[0]) = 0;
  sub_10001B8E0(__p);
  int v10 = sub_100139BCC(a3, a2, 1, 25);
  sub_10001B910(__p);
  if (v10 && os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
    sub_1007657BC();
  }
  sub_10001B8AC(__p);
  sub_10003AFB4((uint64_t)v14);
  return 0;
}

void sub_1004129DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100412A14(uint64_t a1, uint64_t a2, __int16 a3)
{
  __int16 v8 = a3;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 552);
  if (*(unsigned char *)(a1 + 616))
  {
    char v6 = 0;
    sub_10001B8E0(&v6);
    int v4 = sub_100137F8C(&v8, 1u, 0);
    sub_10001B910(&v6);
    if (v4 && os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
      sub_10076480C();
    }
    sub_10001B8AC(&v6);
  }
  sub_10003AFB4((uint64_t)v7);
  return 0;
}

void sub_100412AC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100412AE8(uint64_t a1, unsigned int a2, int a3)
{
  v14[0] = 0;
  v14[1] = 0;
  sub_10003AED0((uint64_t)v14, a1 + 552);
  unsigned int v6 = sub_1004099B8(a1, a3);
  uint64_t v7 = sub_1004097B0(a1, v6);
  uint64_t v8 = sub_1004080A8(a1, v6);
  uint64_t v9 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    if (v8)
    {
      sub_100474E18(v8, __p);
      if (v13 >= 0) {
        int v10 = __p;
      }
      else {
        int v10 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v16 = (const char *)v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Received close stream request from device %{public}s", buf, 0xCu);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v16 = "null";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Received close stream request from device %{public}s", buf, 0xCu);
    }
  }
  sub_10040A4D0(a1, v6);
  *(void *)(v7 + 728) = 0;
  LOBYTE(__p[0]) = 0;
  sub_10001B8E0(__p);
  sub_10013862C(a2, a3, 0);
  sub_10001B910(__p);
  sub_10001B8AC(__p);
  sub_10003AFB4((uint64_t)v14);
  return 0;
}

void sub_100412CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100412CE4(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1 + 552);
  uint64_t v1 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Successfully closed stream", v3, 2u);
  }
  sub_10003AFB4((uint64_t)v4);
  return 0;
}

uint64_t sub_100412D68(os_unfair_lock_s *a1, unsigned int a2, int a3)
{
  v15[0] = 0;
  v15[1] = 0;
  sub_10003AED0((uint64_t)v15, (uint64_t)&a1[138]);
  unsigned int v6 = sub_1004099B8((uint64_t)a1, a3);
  uint64_t v7 = sub_1004097B0((uint64_t)a1, v6);
  uint64_t v8 = sub_1004080A8((uint64_t)a1, v6);
  uint64_t v9 = qword_100A19E30;
  if (v8)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(v8, __p);
      if (v14 >= 0) {
        int v10 = __p;
      }
      else {
        int v10 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446210;
      char v17 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Received abort stream request from device %{public}s", buf, 0xCu);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }
    *(_DWORD *)(v7 + 728) = 7;
    LOBYTE(__p[0]) = 0;
    sub_10001B8E0(__p);
    sub_100138780(a2, a3);
    sub_10001B910(__p);
    sub_10040A4D0((uint64_t)a1, v6);
    sub_1004091F8(a1, v6);
    sub_10001B8AC(__p);
    uint64_t v11 = 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
      sub_100765824();
    }
    uint64_t v11 = 1;
  }
  sub_10003AFB4((uint64_t)v15);
  return v11;
}

void sub_100412F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100412F50(uint64_t a1, uint64_t a2, int a3)
{
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 552);
  uint64_t v5 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v11 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Stream aborted on handle %d.", buf, 8u);
  }
  unsigned int v6 = sub_1004099B8(a1, a3);
  uint64_t v7 = sub_1004097B0(a1, v6);
  if (v7)
  {
    sub_10040A4D0(a1, v6);
    *(_DWORD *)(v7 + 728) = 0;
  }
  sub_10003AFB4((uint64_t)v9);
  return 0;
}

void sub_100413050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100413070(os_unfair_lock_s *a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, unsigned int a6, int a7)
{
  v24[0] = 0;
  v24[1] = 0;
  sub_10003AED0((uint64_t)v24, (uint64_t)&a1[138]);
  uint64_t v13 = sub_1004097B0((uint64_t)a1, a3);
  uint64_t v14 = v13;
  if (a7)
  {
    uint64_t v15 = qword_100A19E30;
    if (*(int *)(v13 + 728) < 3)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 67109632;
        *(_DWORD *)&uint8_t buf[4] = a7;
        __int16 v26 = 1024;
        unsigned int v27 = a4;
        __int16 v28 = 1024;
        unsigned int v29 = a3;
        _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Received get all capability failure with error %d for stream endpoint ID %u on a2dp handle %d - disconnecting", buf, 0x14u);
      }
      sub_1004091F8(a1, a3);
      if (qword_1009FB088 != -1) {
        dispatch_once(&qword_1009FB088, &stru_1009AD910);
      }
      uint64_t v18 = qword_1009FB080;
      sub_10004191C(buf, "A2DPClient::GetAllCapsCfm");
      sub_10004191C(__p, "A2DP Get All Capabilities Error");
      sub_1004B7DA8(0.0, v18, (uint64_t *)buf, (uint64_t *)__p);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
      if (v30 < 0) {
        operator delete(*(void **)buf);
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = a7;
      __int16 v26 = 1024;
      unsigned int v27 = a4;
      __int16 v28 = 1024;
      unsigned int v29 = a3;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "GetAllCaps rejected with error %d, but already in >= open state for stream endpoint ID %u on a2dp handle %d", buf, 0x14u);
    }
  }
  else
  {
    uint64_t v16 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = a4;
      __int16 v26 = 1024;
      unsigned int v27 = a3;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "GetAllCapsCfm: Successfully retrieved capabilities for stream endpoint %u on a2dp handle %d", buf, 0xEu);
    }
    sub_100445BE8(v14 + 400, a6, a5, a4);
    int v17 = sub_100448108(v14 + 400);
    if (v17 == 255)
    {
      sub_10040B710(a1, a3);
    }
    else
    {
      uint64_t v19 = qword_100A19E30;
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v17;
        __int16 v26 = 1024;
        unsigned int v27 = a3;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Querying stream capabilities of endpoint %u on a2dp handle %d", buf, 0xEu);
      }
      buf[0] = 0;
      sub_10001B8E0(buf);
      int v20 = sub_10013747C(a3, v17, 0);
      sub_10001B910(buf);
      if (v20 && os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
        sub_100764FB8();
      }
      sub_10001B8AC(buf);
    }
  }
  sub_10003AFB4((uint64_t)v24);
  return 0;
}

void sub_1004133C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

uint64_t sub_100413428(uint64_t a1, int a2, unsigned int a3, int a4)
{
  v20[0] = 0;
  v20[1] = 0;
  sub_10003AED0((uint64_t)v20, a1 + 552);
  unsigned int v8 = sub_1004099B8(a1, a2);
  uint64_t v9 = sub_1004080A8(a1, v8);
  uint64_t v10 = sub_1004097B0(a1, v8);
  if (v10)
  {
    uint64_t v11 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 720))(v11)) {
      int v12 = 5000;
    }
    else {
      int v12 = a4;
    }
    uint64_t v13 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      if (v9)
      {
        sub_100474E18(v9, __p);
        if (v19 >= 0) {
          uint64_t v14 = __p;
        }
        else {
          uint64_t v14 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136446466;
        int v22 = (const char *)v14;
        __int16 v23 = 1024;
        int v24 = v12;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Received delay report stream request from device %{public}s, delay in 1/10th of milliseconds %d", buf, 0x12u);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        *(_DWORD *)std::string buf = 136446466;
        int v22 = "null";
        __int16 v23 = 1024;
        int v24 = v12;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Received delay report stream request from device %{public}s, delay in 1/10th of milliseconds %d", buf, 0x12u);
      }
    }
    if (*(_DWORD *)(v10 + 728) == 5 && *(unsigned char *)(v10 + 705))
    {
      dispatch_block_cancel(*(dispatch_block_t *)(a1 + 496));
      sub_100634E6C(v10, 100 * v12);
      sub_10041372C((os_unfair_lock_s *)a1, v10, v9);
      sub_100413B60(a1, v10, (52429 * v12) >> 19);
    }
    else
    {
      sub_1004484B4(v10 + 400, 100 * v12);
      int v16 = sub_100448228(v10 + 400);
      sub_1002E857C(v10, v16);
    }
    LOBYTE(__p[0]) = 0;
    sub_10001B8E0(__p);
    sub_100139DB4(a2, a3, 1, 0);
    sub_10001B910(__p);
    sub_10001B8AC(__p);
    uint64_t v15 = 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
      sub_100765858();
    }
    uint64_t v15 = 1;
  }
  sub_10003AFB4((uint64_t)v20);
  return v15;
}

void sub_1004136EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10041372C(os_unfair_lock_s *a1, uint64_t a2, unint64_t a3)
{
  unsigned int v6 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v7 = *(unsigned __int16 *)(a2 + 708);
    int v22 = 67109120;
    unsigned int v23 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Current Dynamic latency JBL: %d", (uint8_t *)&v22, 8u);
  }
  unsigned int v8 = *(unsigned __int16 *)(a2 + 708);
  if (v8 > 0x77)
  {
    if (*(unsigned __int16 *)(a2 + 708) > 0x95u)
    {
      if (v8 == 150)
      {
        if (qword_1009F80B0 != -1) {
          dispatch_once(&qword_1009F80B0, &stru_1009AD890);
        }
        if (sub_10056AD78((uint64_t)off_1009F80A8, 1))
        {
          if (qword_1009F80B0 != -1) {
            dispatch_once(&qword_1009F80B0, &stru_1009AD890);
          }
          if (sub_100567524((uint64_t)off_1009F80A8, a3))
          {
            uint64_t v11 = qword_100A19E30;
            if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(v22) = 0;
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Adaptive Latency prevent disable LLM, set flush to 200ms", (uint8_t *)&v22, 2u);
            }
            LOBYTE(v22) = 0;
            sub_10001B8E0(&v22);
            int v12 = sub_10017E77C(a3 + 128);
            sub_10001B910(&v22);
            if (v12 && os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
              sub_10076595C();
            }
            goto LABEL_44;
          }
        }
        uint64_t v9 = 0;
        unsigned int v8 = 200;
      }
      else
      {
        if (v8 != 300) {
          goto LABEL_30;
        }
        uint64_t v9 = 0;
      }
      int v10 = 1;
      goto LABEL_35;
    }
    if (v8 == 120 || v8 == 140) {
      goto LABEL_14;
    }
  }
  else
  {
    if (*(unsigned __int16 *)(a2 + 708) <= 0x4Fu)
    {
      if (v8 == 30)
      {
        unsigned int v8 = 60;
        uint64_t v9 = 1;
        int v10 = 3;
        goto LABEL_35;
      }
      if (v8 != 60) {
        goto LABEL_30;
      }
LABEL_14:
      uint64_t v9 = 1;
      int v10 = 2;
LABEL_35:
      sub_100634E5C(a2, v10);
      sub_10040AA54((uint64_t)a1, *(unsigned __int16 *)(a2 + 600), v9);
      char v13 = v9 ^ 1;
      if (*(_DWORD *)(a2 + 728) == 5) {
        char v13 = 1;
      }
      if ((v13 & 1) == 0)
      {
        uint64_t v14 = sub_10003FB34();
        uint64_t v15 = *(unsigned __int16 *)(a3 + 132);
        uint64_t v16 = *(unsigned int *)(a3 + 128);
        uint64_t v17 = sub_100476054(a3);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v14 + 72))(v14, (v16 | (v15 << 32)) & 0xFFFFFFFFFFFFLL, v17, 2, 1, 1, 1, 0);
        uint64_t v18 = sub_10003FB34();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v18 + 952))(v18, 1, 1);
      }
      uint64_t v19 = sub_10003FB34();
      (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)v19 + 96))(v19, a3, v9);
      int v20 = qword_100A19E30;
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
      {
        int v22 = 67109120;
        unsigned int v23 = v8;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Dynamic Latency settting flush timeout to %d ms", (uint8_t *)&v22, 8u);
      }
      LOBYTE(v22) = 0;
      sub_10001B8E0(&v22);
      int v21 = sub_10017E77C(a3 + 128);
      sub_10001B910(&v22);
      if (v21 && os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
        sub_1007658F4();
      }
LABEL_44:
      sub_10001B8AC(&v22);
      return;
    }
    if (v8 == 80 || v8 == 100) {
      goto LABEL_14;
    }
  }
LABEL_30:
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
    sub_1007658C0();
  }
  *(unsigned char *)(a2 + 705) = 0;
  sub_100408368(a1, a2, 0);
}

void sub_100413B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void sub_100413B60(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v6 = *(unsigned __int16 *)(a2 + 708);
  unsigned int v7 = (int)fabs((double)(int)(a3 - v6));
  if (a3 >= v6) {
    int v8 = 1;
  }
  else {
    int v8 = 2;
  }
  if (v7 <= 0xA || v6 == 150) {
    unsigned __int16 v10 = v7;
  }
  else {
    unsigned __int16 v10 = v7 - 10;
  }
  uint64_t v11 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = "Down";
    if (v6 > a3) {
      int v12 = "Up";
    }
    int v13 = 136315394;
    uint64_t v14 = v12;
    __int16 v15 = 1024;
    int v16 = v10;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Dynamic Latency: Request JBL  %s by %dMsec", (uint8_t *)&v13, 0x12u);
  }
  if (v10) {
    sub_10040ABC4(a1, a2, v8, v10);
  }
  else {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 224))(a1, a2, 1);
  }
}

uint64_t sub_100413CC8(uint64_t a1, int a2, uint64_t a3, unsigned int a4, int a5, unint64_t a6)
{
  v16[0] = 0;
  v16[1] = 0;
  sub_10003AED0((uint64_t)v16, a1 + 552);
  if (a2)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
      sub_1007659C4();
    }
  }
  else
  {
    atomic_store(0, (unint64_t *)(a1 + 760));
    float v12 = (float)a4 * 312.5;
    unint64_t v13 = atomic_load((unint64_t *)(a1 + 744));
    atomic_store((unint64_t)v12 + (a6 - v13) * *(unsigned int *)(a1 + 620) / *(unsigned int *)(a1 + 624) / 0x3E8, (unint64_t *)(a1 + 752));
    atomic_store(a6, (unint64_t *)(a1 + 744));
    *(_DWORD *)(a1 + 776) = a4;
    if (*(unsigned char *)(a1 + 780))
    {
      uint64_t v14 = qword_100A19E30;
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_INFO))
      {
        int v15 = atomic_load((unint64_t *)(a1 + 752));
        *(_DWORD *)std::string buf = 67109888;
        int v18 = 0;
        __int16 v19 = 1024;
        unsigned int v20 = v12;
        __int16 v21 = 1024;
        int v22 = a5;
        __int16 v23 = 1024;
        int v24 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "status %d, clock %uus, accuracy %u, adjusted clock %uus", buf, 0x1Au);
      }
    }
  }
  return sub_10003AFB4((uint64_t)v16);
}

void sub_100413E70(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = atomic_load((unint64_t *)(a1 + 760));
  int v4 = (unsigned __int16 *)(sub_1004097B0(a1, a2) + 720);
  kdebug_trace();
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
    sub_100765A2C();
  }
  unsigned int v5 = *v4;
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009AD890);
  }
  sub_1005741DC((uint64_t)off_1009F80A8, a2, v5, v3);
}

uint64_t sub_100413F5C(void *a1, uint64_t a2, int a3)
{
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, (uint64_t)(a1 + 69));
  unsigned int v6 = sub_100409054(a1, a2);
  uint64_t v7 = sub_1004097B0((uint64_t)a1, v6);
  uint64_t v8 = v7;
  if (v7)
  {
    sub_100448568(v7 + 400, a3);
    sub_1002E837C(v8, a3);
  }
  sub_10003AFB4((uint64_t)v10);
  return 0;
}

void sub_100413FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_100414000(float a1, uint64_t a2, uint64_t a3, int a4)
{
  BOOL v9 = (sub_100478B2C(a3, 12) & 1) == 0
    && (uint64_t v7 = sub_100035F54(), ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 384))(v7) & 1) == 0)
    && !sub_100478B2C(a3, 26)
    || a4 != 9 && a4 != 15;
  unsigned __int16 v10 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = "No";
    if (v9) {
      uint64_t v11 = "Yes";
    }
    int v13 = 134218242;
    double v14 = (float)(a1 * 100.0);
    __int16 v15 = 2082;
    int v16 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "REMOTE DEVICE Volume : Should send volume %f to driver = %{public}s", (uint8_t *)&v13, 0x16u);
  }
  return v9;
}

uint64_t sub_100414154(void *a1, uint64_t a2, int a3, float a4)
{
  uint64_t v8 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = 134217984;
    double v14 = (float)(a4 * 100.0);
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "AVRCP REMOTE DEVICE: Volume changed to %f", (uint8_t *)&v13, 0xCu);
  }
  unsigned int v9 = sub_100409054(a1, a2);
  uint64_t v10 = sub_1004097B0((uint64_t)a1, v9);
  if (v10)
  {
    uint64_t v11 = v10;
    if (sub_100414000(a4, v10, a2, a3)) {
      sub_1002E786C(v11, a4);
    }
  }
  return 0;
}

uint64_t sub_100414268(void *a1, uint64_t a2)
{
  unsigned int v4 = sub_100409054(a1, a2);
  uint64_t v5 = sub_1004097B0((uint64_t)a1, v4);
  if (!v5) {
    return 312;
  }
  uint64_t v6 = v5;
  uint64_t v11 = 0;
  if (qword_1009F80A0 != -1) {
    dispatch_once(&qword_1009F80A0, &stru_1009AD870);
  }
  uint64_t v7 = sub_10028FEDC((uint64_t)off_1009F8098, a2, (int *)&v11 + 1, (int *)&v11);
  sub_1002E8670(v6, BYTE4(v11), v11);
  int v10 = 3;
  if (qword_1009F80A0 != -1) {
    dispatch_once(&qword_1009F80A0, &stru_1009AD870);
  }
  sub_100290170((uint64_t)off_1009F8098, a2, &v10);
  sub_1002E8680(v6, v10);
  unsigned __int8 v8 = sub_10048741C(a2);
  sub_1002E8690(v6, v8);
  return v7;
}

uint64_t sub_10041437C(void *a1, uint64_t a2)
{
  unsigned int v4 = sub_100409054(a1, a2);
  uint64_t v5 = sub_1004097B0((uint64_t)a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    if (qword_1009F80A0 != -1) {
      dispatch_once(&qword_1009F80A0, &stru_1009AD870);
    }
    int v7 = sub_10028FDB0((uint64_t)off_1009F8098, a2);
    sub_1002E8648(v6, v7);
  }
  return 0;
}

uint64_t sub_100414400(void *a1, uint64_t a2, int a3)
{
  unsigned int v5 = sub_100409054(a1, a2);
  uint64_t v6 = sub_1004097B0((uint64_t)a1, v5);
  if (v6) {
    sub_1002E86A0(v6, a3);
  }
  return 0;
}

uint64_t sub_100414444(void *a1, uint64_t a2)
{
  unsigned int v4 = sub_100409054(a1, a2);
  uint64_t v5 = sub_1004097B0((uint64_t)a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    unsigned __int8 v7 = sub_100487564(a2);
    sub_1002E86C0(v6, v7);
  }
  return 0;
}

uint64_t sub_100414498(void *a1, uint64_t a2)
{
  unsigned int v4 = sub_100409054(a1, a2);
  uint64_t v5 = sub_1004097B0((uint64_t)a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    int v7 = sub_100489494(a2);
    sub_1002E8CA0(v6, v7);
  }
  return 0;
}

uint64_t sub_1004144EC(void *a1, uint64_t a2)
{
  unsigned int v4 = sub_100409054(a1, a2);
  uint64_t v5 = sub_1004097B0((uint64_t)a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    int v7 = sub_1004877EC(a2);
    sub_1002E89FC(v6, v7);
  }
  return 0;
}

uint64_t sub_100414540(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = *(void **)(a1 + 528);
  if (v4 != (void *)(a1 + 536))
  {
    do
    {
      unsigned int v5 = *((unsigned __int16 *)v4 + 16);
      uint64_t v6 = sub_1004097B0(a1, v5);
      if (v6)
      {
        uint64_t v7 = sub_1004080A8(a1, v5);
        if (v7)
        {
          if (sub_100487DD4(v7, 64))
          {
            unsigned __int8 v8 = qword_100A19E30;
            if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)std::string buf = 138412546;
              id v14 = v3;
              __int16 v15 = 1024;
              unsigned int v16 = v5;
              _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Notify Foreground App Chanbed to BTHAL: %@, a2dpHandle:%u", buf, 0x12u);
            }
            sub_1002E8744(v6, v3);
          }
        }
      }
      unsigned int v9 = (void *)v4[1];
      if (v9)
      {
        do
        {
          int v10 = v9;
          unsigned int v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          int v10 = (void *)v4[2];
          BOOL v11 = *v10 == (void)v4;
          unsigned int v4 = v10;
        }
        while (!v11);
      }
      unsigned int v4 = v10;
    }
    while (v10 != (void *)(a1 + 536));
  }

  return 0;
}

void sub_1004146C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1004146DC(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  unsigned int v6 = sub_100409054(a1, a2);
  uint64_t v7 = sub_1004097B0((uint64_t)a1, v6);
  if (v7)
  {
    (*(void (**)(uint64_t, id))(*(void *)v7 + 136))(v7, v5);
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 7;
  }

  return v8;
}

void sub_100414768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10041477C(void *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = sub_100409054(a1, a2);
  uint64_t v6 = sub_1004097B0((uint64_t)a1, v5);
  if (!v6) {
    return 7;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 144))(v6, a3);
  return 0;
}

uint64_t sub_1004147E8(uint64_t a1, int a2)
{
  uint64_t v2 = *(void **)(a1 + 528);
  id v3 = (void *)(a1 + 536);
  if (v2 != (void *)(a1 + 536))
  {
    uint64_t v6 = "Off";
    if (a2) {
      uint64_t v6 = "On";
    }
    uint64_t v17 = v6;
    do
    {
      unsigned int v7 = *((unsigned __int16 *)v2 + 16);
      uint64_t v8 = sub_1004097B0(a1, v7);
      if (v8)
      {
        uint64_t v9 = v8;
        uint64_t v10 = sub_1004080A8(a1, v7);
        if (v10)
        {
          uint64_t v11 = v10;
          if (sub_100487DD4(v10, 64))
          {
            float v12 = qword_100A19E30;
            if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)std::string buf = 136315394;
              __int16 v19 = v17;
              __int16 v20 = 1024;
              unsigned int v21 = v7;
              _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Notify AccessHeadTrack Change to BTHAL: %s, a2dpHandle:%u", buf, 0x12u);
            }
            sub_1002E871C(v9, a2);
            if (qword_1009F7EF0 != -1) {
              dispatch_once(&qword_1009F7EF0, &stru_1009AD830);
            }
            sub_100453AAC((uint64_t)off_1009F7EE8, v11);
          }
        }
      }
      int v13 = (void *)v2[1];
      if (v13)
      {
        do
        {
          id v14 = v13;
          int v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          id v14 = (void *)v2[2];
          BOOL v15 = *v14 == (void)v2;
          uint64_t v2 = v14;
        }
        while (!v15);
      }
      uint64_t v2 = v14;
    }
    while (v14 != v3);
  }
  return 0;
}

uint64_t sub_1004149B4(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 528);
  uint64_t v2 = (void *)(a1 + 536);
  if (v1 != (void *)(a1 + 536))
  {
    do
    {
      unsigned int v4 = *((unsigned __int16 *)v1 + 16);
      uint64_t v5 = sub_1004097B0(a1, v4);
      if (v5)
      {
        uint64_t v6 = v5;
        uint64_t v7 = sub_1004080A8(a1, v4);
        if (sub_100487DD4(v7, 64))
        {
          uint64_t v8 = sub_100035F54();
          int v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 792))(v8, 3);
          if (v7)
          {
            if (v9)
            {
              if (qword_1009F80B0 != -1) {
                dispatch_once(&qword_1009F80B0, &stru_1009AD890);
              }
              uint64_t v10 = sub_10057348C((uint64_t)off_1009F80A8);
              sub_1002E8DC8(v6, v10);

              if (qword_1009F80B0 != -1) {
                dispatch_once(&qword_1009F80B0, &stru_1009AD890);
              }
              BOOL v11 = sub_100573798((uint64_t)off_1009F80A8, v7);
              sub_100634EBC(v6, v11);
            }
          }
        }
      }
      float v12 = (void *)v1[1];
      if (v12)
      {
        do
        {
          int v13 = v12;
          float v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          int v13 = (void *)v1[2];
          BOOL v14 = *v13 == (void)v1;
          uint64_t v1 = v13;
        }
        while (!v14);
      }
      uint64_t v1 = v13;
    }
    while (v13 != v2);
  }
  return 0;
}

void sub_100414B3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100414B4C(void *a1, uint64_t a2)
{
  unsigned int v4 = sub_100409054(a1, a2);
  uint64_t v5 = sub_1004097B0((uint64_t)a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    int v9 = 0;
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AD810);
    }
    sub_1004AB094((uint64_t)off_1009F7EF8, a2, &v9);
    uint64_t v7 = *(void *)sub_100035F54();
    if ((*(unsigned int (**)(void))(v7 + 800))() != 1)
    {
      sub_1002E86F4(v6, v9 == 1);
      if (qword_1009F7EF0 != -1) {
        dispatch_once(&qword_1009F7EF0, &stru_1009AD830);
      }
      sub_100455E64((uint64_t)off_1009F7EE8, a2);
    }
  }
  return 0;
}

uint64_t sub_100414C64(void *a1, uint64_t a2, int a3)
{
  unsigned int v6 = sub_100409054(a1, a2);
  uint64_t v7 = sub_1004097B0((uint64_t)a1, v6);
  if (v7)
  {
    uint64_t v8 = v7;
    if (sub_100487DD4(a2, 64))
    {
      uint64_t v9 = sub_100035F54();
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v9 + 792))(v9, 3))
      {
        uint64_t v10 = qword_100A19E30;
        if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
        {
          BOOL v11 = "NO";
          if (a3) {
            BOOL v11 = "YES";
          }
          int v13 = 136315138;
          BOOL v14 = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Spatial Profile: Personalized HRTF enhanced Tuning %s", (uint8_t *)&v13, 0xCu);
        }
        sub_100634ECC(v8, a3);
      }
    }
  }
  return 0;
}

uint64_t sub_100414DA0(void *a1, uint64_t a2, void *a3, int a4, int a5)
{
  id v9 = a3;
  unsigned int v10 = sub_100409054(a1, a2);
  uint64_t v11 = sub_1004097B0((uint64_t)a1, v10);
  int v22 = 0;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AD810);
  }
  sub_1004AB094((uint64_t)off_1009F7EF8, a2, &v22);
  uint64_t v12 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 800))(v12) == 1)
  {
    int v13 = (void *)a1[66];
    if (v13 != a1 + 67)
    {
      do
      {
        unsigned int v14 = *((unsigned __int16 *)v13 + 16);
        uint64_t v15 = sub_1004097B0((uint64_t)a1, v14);
        if (v15)
        {
          uint64_t v16 = sub_1004080A8((uint64_t)a1, v14);
          uint64_t v17 = v16;
          if (v16)
          {
            if (sub_100487DD4(v16, 64))
            {
              if (v9) {
                sub_1002E8834(v15, a4, v9, a5);
              }
              if (qword_1009F7EF0 != -1) {
                dispatch_once(&qword_1009F7EF0, &stru_1009AD830);
              }
              sub_100455E64((uint64_t)off_1009F7EE8, v17);
            }
          }
        }
        int v18 = (void *)v13[1];
        if (v18)
        {
          do
          {
            __int16 v19 = v18;
            int v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            __int16 v19 = (void *)v13[2];
            BOOL v20 = *v19 == (void)v13;
            int v13 = v19;
          }
          while (!v20);
        }
        int v13 = v19;
      }
      while (v19 != a1 + 67);
    }
  }
  else if (v9 && v11)
  {
    sub_1002E8834(v11, a4, v9, a5);
  }

  return 0;
}

void sub_100414F8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100414FAC(void *a1, uint64_t a2, int a3)
{
  unsigned int v6 = sub_100409054(a1, a2);
  uint64_t v7 = sub_1004097B0((uint64_t)a1, v6);
  if (!v7) {
    return 7;
  }
  uint64_t v8 = v7;
  uint64_t result = sub_100478B2C(a2, 26);
  if (result)
  {
    uint64_t v10 = sub_100017768();
    if (((*(uint64_t (**)(uint64_t))(*(void *)v10 + 776))(v10) & 1) == 0) {
      sub_1002E8474(v8, a3);
    }
    return 0;
  }
  return result;
}

uint64_t sub_100415050(void *a1, uint64_t a2, int a3)
{
  unsigned int v5 = sub_100409054(a1, a2);
  uint64_t v6 = sub_1004097B0((uint64_t)a1, v5);
  if (!v6) {
    return 7;
  }
  sub_1002E8FF0(v6, a3);
  return 0;
}

uint64_t sub_10041509C(void *a1, uint64_t a2, int a3)
{
  unsigned int v5 = sub_100409054(a1, a2);
  uint64_t v6 = sub_1004097B0((uint64_t)a1, v5);
  if (!v6) {
    return 7;
  }
  uint64_t v7 = v6;
  if (a3)
  {
    uint64_t v8 = sub_10003FB34();
    int v9 = sub_100350CA0(v8, 2u);
  }
  else
  {
    int v9 = 0;
  }
  sub_1002E8F78(v7, v9);
  return 0;
}

uint64_t sub_100415108(void *a1, uint64_t a2, int *a3)
{
  unsigned int v6 = sub_100409054(a1, a2);
  uint64_t v7 = sub_1004097B0((uint64_t)a1, v6);
  if (a3)
  {
    uint64_t v8 = v7;
    if (v7)
    {
      if (sub_100478B2C(a2, 16)) {
        *a3 |= 1u;
      }
      int v9 = sub_100478B2C(a2, 17);
      int v10 = *a3;
      if (v9)
      {
        v10 |= 2u;
        *a3 = v10;
      }
      sub_10047F4A0(a2, v10);
      sub_1002E86E4(v8, *(unsigned __int8 *)a3);
      return 0;
    }
    else
    {
      return 7;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
      sub_100765AAC();
    }
    return 3;
  }
}

uint64_t sub_1004151DC(void *a1, uint64_t a2, int a3)
{
  unsigned int v6 = sub_100409054(a1, a2);
  uint64_t v7 = sub_1004097B0((uint64_t)a1, v6);
  if (!v7) {
    return 7;
  }
  uint64_t v8 = v7;
  if (a3)
  {
    uint64_t v9 = sub_10003FB34();
    int v10 = sub_100350CA0(v9, 0);
  }
  else
  {
    int v10 = 0;
  }
  sub_1002E8F18(v8, v10);
  int v12 = sub_1004879E4(a2);
  sub_10041526C(a1, a2, v12);
  return 0;
}

uint64_t sub_10041526C(void *a1, uint64_t a2, int a3)
{
  unsigned int v5 = sub_100409054(a1, a2);
  uint64_t v6 = sub_1004097B0((uint64_t)a1, v5);
  if (!v6) {
    return 7;
  }
  sub_1002E8F40(v6, a3);
  return 0;
}

uint64_t sub_1004152B8(void *a1, uint64_t a2, int a3)
{
  unsigned int v5 = sub_100409054(a1, a2);
  uint64_t v6 = sub_1004097B0((uint64_t)a1, v5);
  if (!v6) {
    return 7;
  }
  uint64_t v7 = v6;
  if (a3)
  {
    uint64_t v8 = sub_10003FB34();
    int v9 = sub_100350CA0(v8, 1u);
  }
  else
  {
    int v9 = 0;
  }
  sub_1002E8F50(v7, v9);
  return 0;
}

uint64_t sub_100415324(void *a1, uint64_t a2, int a3)
{
  unsigned int v6 = sub_100409054(a1, a2);
  uint64_t v7 = sub_1004097B0((uint64_t)a1, v6);
  if (!v7) {
    return 7;
  }
  uint64_t v8 = v7;
  if (a3)
  {
    uint64_t v9 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v9 + 792))(v9, 1))
    {
      uint64_t v10 = sub_100035F54();
      a3 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 792))(v10, 3);
      int v11 = 1;
    }
    else
    {
      int v11 = 0;
      a3 = 0;
    }
  }
  else
  {
    int v11 = 0;
  }
  int v21 = 0;
  sub_1002E8D78(v8, v11);
  sub_1002E8EF0(v8, a3);
  if (v11)
  {
    if (a3)
    {
      if (qword_1009F80B0 != -1) {
        dispatch_once(&qword_1009F80B0, &stru_1009AD890);
      }
      int v13 = sub_10057348C((uint64_t)off_1009F80A8);
      sub_1002E8DC8(v8, v13);

      if (qword_1009F80B0 != -1) {
        dispatch_once(&qword_1009F80B0, &stru_1009AD890);
      }
      BOOL v14 = sub_100573798((uint64_t)off_1009F80A8, a2);
      sub_100634EBC(v8, v14);
    }
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AD810);
    }
    sub_1004AB094((uint64_t)off_1009F7EF8, a2, &v21);
    int v15 = v21;
    if (!v21)
    {
      if (qword_1009F7F00 != -1) {
        dispatch_once(&qword_1009F7F00, &stru_1009AD810);
      }
      int v15 = 1;
      sub_1004AB200((uint64_t)off_1009F7EF8, a2, 1);
      int v21 = 1;
    }
    sub_1002E86F4(v8, v15 == 1);
    if (qword_1009F80B0 != -1) {
      dispatch_once(&qword_1009F80B0, &stru_1009AD890);
    }
    id v16 = sub_100572CAC((uint64_t)off_1009F80A8);
    (*(void (**)(uint64_t, id))(*(void *)v8 + 128))(v8, v16);
    uint64_t v17 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      if (a3) {
        int v18 = "YES";
      }
      else {
        int v18 = "NO";
      }
      if (qword_1009F80B0 != -1) {
        dispatch_once(&qword_1009F80B0, &stru_1009AD890);
      }
      BOOL v19 = sub_100573798((uint64_t)off_1009F80A8, a2);
      BOOL v20 = " NO ";
      *(_DWORD *)std::string buf = 136446722;
      __int16 v23 = "YES ";
      __int16 v24 = 2082;
      uint64_t v25 = v18;
      if (v19) {
        BOOL v20 = " YES ";
      }
      __int16 v26 = 2082;
      unsigned int v27 = v20;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "AudioDevice. Spatial Audio :  SpatialSupport  %{public}s Custom HRTF Support %{public}s Custom HRTF Allowed %{public}s", buf, 0x20u);
    }
  }
  return 0;
}

void sub_1004156A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1004156C0(uint64_t a1, uint64_t a2)
{
  switch(sub_100476458(a2))
  {
    case 0u:
      id v3 = qword_100A19E30;
      BOOL v4 = os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (v4)
      {
        sub_100474E18(a2, __p);
        if (v21 >= 0) {
          unsigned int v6 = __p;
        }
        else {
          unsigned int v6 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136446210;
        __int16 v23 = v6;
        uint64_t v7 = "User selected device type is unknown. Returning user selected device type as kBluetoothAudioDeviceCategoryU"
             "nknown for device %{public}s.";
        goto LABEL_12;
      }
      break;
    case 1u:
      uint64_t v10 = qword_100A19E30;
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(a2, __p);
        int v11 = v21 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)std::string buf = 136446210;
        __int16 v23 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Returning user selected device type as kBluetoothAudioDeviceCategoryCarkit for device %{public}s.", buf, 0xCu);
        if (v21 < 0) {
          operator delete(__p[0]);
        }
      }
      uint64_t result = 2;
      break;
    case 2u:
      int v12 = qword_100A19E30;
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(a2, __p);
        int v13 = v21 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)std::string buf = 136446210;
        __int16 v23 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Returning user selected device type as kBluetoothAudioDeviceCategoryHeadphone for device %{public}s.", buf, 0xCu);
        if (v21 < 0) {
          operator delete(__p[0]);
        }
      }
      uint64_t result = 1;
      break;
    case 3u:
      BOOL v14 = qword_100A19E30;
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(a2, __p);
        int v15 = v21 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)std::string buf = 136446210;
        __int16 v23 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "User selected device type is hearing aid. Returning user selected device type as kBluetoothAudioDeviceCategoryHearingAid for device %{public}s.", buf, 0xCu);
        if (v21 < 0) {
          operator delete(__p[0]);
        }
      }
      uint64_t result = 4;
      break;
    case 4u:
      id v16 = qword_100A19E30;
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(a2, __p);
        uint64_t v17 = v21 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)std::string buf = 136446210;
        __int16 v23 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Returning user selected device type as kBluetoothAudioDeviceCategorySpeaker for device %{public}s.", buf, 0xCu);
        if (v21 < 0) {
          operator delete(__p[0]);
        }
      }
      uint64_t result = 3;
      break;
    case 5u:
      int v18 = qword_100A19E30;
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(a2, __p);
        BOOL v19 = v21 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)std::string buf = 136446210;
        __int16 v23 = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "User selected device type is other. Returning user selected device type as kBluetoothAudioDeviceCategoryOther for device %{public}s.", buf, 0xCu);
        if (v21 < 0) {
          operator delete(__p[0]);
        }
      }
      uint64_t result = 5;
      break;
    default:
      id v3 = qword_100A19E30;
      BOOL v8 = os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (v8)
      {
        sub_100474E18(a2, __p);
        if (v21 >= 0) {
          uint64_t v9 = __p;
        }
        else {
          uint64_t v9 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136446210;
        __int16 v23 = v9;
        uint64_t v7 = "Returning user selected device type as kBluetoothAudioDeviceCategoryUnknown for device %{public}s.";
LABEL_12:
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, v7, buf, 0xCu);
        if (v21 < 0) {
          operator delete(__p[0]);
        }
        uint64_t result = 0;
      }
      break;
  }
  return result;
}

uint64_t sub_100415B04(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, v2 + 552);
  id v3 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Software Volume: Initialize software volume enabled", v5, 2u);
  }
  if (qword_1009F80A0 != -1) {
    dispatch_once(&qword_1009F80A0, &stru_1009AD870);
  }
  if (sub_10028819C((uint64_t)off_1009F8098, *(void *)(a1 + 40), 2, 1)
    && os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
  {
    sub_100765AE0();
  }
  return sub_10003AFB4((uint64_t)v6);
}

void sub_100415C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100415C14(uint64_t a1, uint64_t a2)
{
  if (sub_1002E9368(a2))
  {
    __int16 v4 = sub_100634250(a2);
    uint64_t v5 = sub_1004AFB34();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    void v7[2] = sub_100415CF8;
    v7[3] = &unk_1009A0B58;
    void v7[4] = a1;
    __int16 v8 = v4;
    sub_100013018(v5, v7);
  }
  else
  {
    unsigned int v6 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Audio device is not valid, not handling streamWillStart", buf, 2u);
    }
  }
}

uint64_t sub_100415CF8(uint64_t a1)
{
  uint64_t v2 = *(unint64_t **)(a1 + 32);
  v20[0] = 0;
  v20[1] = 0;
  sub_10003AED0((uint64_t)v20, (uint64_t)(v2 + 69));
  uint64_t v3 = sub_1004080A8((uint64_t)v2, *(unsigned __int16 *)(a1 + 40));
  __int16 v4 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int16 *)(a1 + 40);
    *(_DWORD *)std::string buf = 67109120;
    int v22 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Received system 'audio started' notification from HAL on a2dpHandle %d", buf, 8u);
  }
  atomic_store(0, v2 + 93);
  atomic_store(0, v2 + 94);
  atomic_store(0, v2 + 95);
  if (v3)
  {
    *(_DWORD *)std::string buf = 0;
    uint64_t v19 = 0;
    int v18 = 0;
    sub_10047B7A8(v3, buf, (_DWORD *)&v19 + 1, &v19, &v18);
    uint64_t v6 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 720))(v6)
      && (v19 - 8202) <= 0x15
      && ((1 << (v19 - 10)) & 0x20033F) != 0)
    {
      if (qword_1009F80A0 != -1) {
        dispatch_once(&qword_1009F80A0, &stru_1009AD870);
      }
      int v7 = sub_1002859A4((uint64_t)off_1009F8098, v3, 11, 500, 1u);
      if (v7)
      {
        __int16 v8 = qword_100A19E30;
        if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
          sub_100765B48(v7, v8);
        }
      }
    }
    sub_10040B360((uint64_t)v2, *(unsigned __int16 *)(a1 + 40));
    uint64_t v9 = *(unsigned int *)(v3 + 128);
    uint64_t v10 = *(unsigned __int16 *)(v3 + 132);
    uint64_t v11 = sub_10003FB34();
    uint64_t v12 = sub_100476054(v3);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v11 + 72))(v11, (v9 | (v10 << 32)) & 0xFFFFFFFFFFFFLL, v12, 2, 1, 1, 1, 0);
    uint64_t v13 = sub_10003FB34();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13 + 952))(v13, 1, 1);
    char v17 = 0;
    sub_10001B8E0(&v17);
    BOOL v14 = sub_100139F18(v3 + 128);
    sub_10001B910(&v17);
    if (!v14)
    {
      uint64_t v15 = sub_10003FB34();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v15 + 304))(v15, v3, 1, 1);
    }
    sub_10001B8AC(&v17);
  }
  return sub_10003AFB4((uint64_t)v20);
}

void sub_100415FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100416034(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100416044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t result = sub_100634250(a2);
  if (result)
  {
    unsigned int v10 = result;
    if (*(unsigned char *)(a1 + 780))
    {
      uint64_t v11 = qword_100A19E30;
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEBUG))
      {
        int v12 = 134218496;
        uint64_t v13 = a4;
        __int16 v14 = 1024;
        unsigned int v15 = v10;
        __int16 v16 = 1024;
        int v17 = a5;
        _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Sending data of length %lu to a2dpHandle %d with frameCount %d", (uint8_t *)&v12, 0x18u);
      }
    }
    return sub_10040D3E0(a1, a3, a4, a5, v10);
  }
  return result;
}

uint64_t sub_10041614C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_100416044(a1 - 256, a2, a3, a4, a5);
}

void sub_100416154(uint64_t a1, uint64_t a2)
{
  if (sub_1002E9368(a2))
  {
    __int16 v4 = sub_100634250(a2);
    uint64_t v5 = sub_1004AFB34();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    void v7[2] = sub_100416238;
    v7[3] = &unk_1009A0B58;
    void v7[4] = a1;
    __int16 v8 = v4;
    sub_100013018(v5, v7);
  }
  else
  {
    uint64_t v6 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Audio device is not valid, not handling streamDidStop", buf, 2u);
    }
  }
}

uint64_t sub_100416238(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, v2 + 552);
  uint64_t v3 = sub_1004080A8(v2, *(unsigned __int16 *)(a1 + 40));
  __int16 v4 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int16 *)(a1 + 40);
    *(_DWORD *)std::string buf = 67109120;
    int v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Received system 'audio stop' notification from HAL on a2dpHandle %d", buf, 8u);
  }
  if (v3)
  {
    sub_10040AD04(v2, *(unsigned __int16 *)(a1 + 40));
    uint64_t v6 = sub_10003FB34();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v6 + 952))(v6, 0, 1);
    buf[0] = 0;
    sub_10001B8E0(buf);
    BOOL v7 = sub_100139F18(v3 + 128);
    sub_10001B910(buf);
    if (!v7)
    {
      uint64_t v8 = sub_10003FB34();
      (*(void (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)v8 + 304))(v8, v3, 0, 1);
    }
    sub_10001B8AC(buf);
  }
  return sub_10003AFB4((uint64_t)v10);
}

void sub_1004163C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1004163F4(uint64_t a1, uint64_t a2)
{
}

void sub_1004163FC(uint64_t a1, uint64_t a2)
{
  if (sub_1002E9368(a2))
  {
    __int16 v4 = sub_100634250(a2);
    uint64_t v5 = sub_1004AFB34();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    void v7[2] = sub_1004164E0;
    v7[3] = &unk_1009A0B58;
    void v7[4] = a1;
    __int16 v8 = v4;
    sub_100013018(v5, v7);
  }
  else
  {
    uint64_t v6 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Audio device is not valid, not handling streamDidReset", buf, 2u);
    }
  }
}

uint64_t sub_1004164E0(uint64_t a1)
{
  uint64_t v2 = *(os_unfair_lock_s **)(a1 + 32);
  uint64_t result = sub_1004080A8((uint64_t)v2, *(unsigned __int16 *)(a1 + 40));
  if (result)
  {
    sub_10040AD04((uint64_t)v2, *(unsigned __int16 *)(a1 + 40));
    unsigned int v4 = *(unsigned __int16 *)(a1 + 40);
    return sub_10040B180(v2, v4);
  }
  return result;
}

void sub_100416544(uint64_t a1, uint64_t a2)
{
}

void sub_10041654C(uint64_t a1, uint64_t a2, float a3)
{
  if (sub_1002E9368(a2))
  {
    __int16 v6 = sub_100634250(a2);
    uint64_t v7 = sub_1004AFB34();
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_100416640;
    void v9[3] = &unk_1009AD2E0;
    void v9[4] = a1;
    __int16 v11 = v6;
    float v10 = a3;
    sub_100013018(v7, v9);
  }
  else
  {
    __int16 v8 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Audio device is not valid, not handling volumeDidUpdate", buf, 2u);
    }
  }
}

uint64_t sub_100416640(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, v2 + 552);
  uint64_t v3 = sub_1004080A8(v2, *(unsigned __int16 *)(a1 + 44));
  if (v3)
  {
    unsigned int v4 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_INFO))
    {
      int v5 = (int)(float)(*(float *)(a1 + 40) * 100.0);
      *(_DWORD *)std::string buf = 67109120;
      int v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Sending volume %d", buf, 8u);
    }
    if (qword_1009FB218 != -1) {
      dispatch_once(&qword_1009FB218, &stru_1009AD930);
    }
    sub_1005FBB68(*(float *)(a1 + 40), (uint64_t)off_1009FB210, v3);
  }
  return sub_10003AFB4((uint64_t)v7);
}

void sub_10041676C(_Unwind_Exception *exception_object)
{
}

void sub_100416788(uint64_t a1, uint64_t a2, float a3)
{
}

uint64_t sub_100416790(void *a1, uint64_t a2, int a3)
{
  unsigned int v6 = sub_100409054(a1, a2);
  if (!v6) {
    return 1;
  }
  uint64_t v7 = sub_1004097B0((uint64_t)a1, v6);
  __int16 v8 = qword_100A19E30;
  if (!v7)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
      sub_100765BD0();
    }
    return 1;
  }
  uint64_t v9 = v7;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a2, __p);
    float v10 = (void **)__p[0];
    __int16 v11 = "No";
    if (v14 >= 0) {
      float v10 = __p;
    }
    if (a3) {
      __int16 v11 = "Yes";
    }
    *(_DWORD *)std::string buf = 136446466;
    __int16 v16 = v10;
    __int16 v17 = 2082;
    int v18 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "setAllowsAutoRoute: %{public}s, allows %{public}s", buf, 0x16u);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_1002E908C(v9, a3);
  return 0;
}

uint64_t sub_1004168F8(void *a1, uint64_t a2, int a3)
{
  unsigned int v6 = sub_100409054(a1, a2);
  if (!v6) {
    return 1;
  }
  uint64_t v7 = sub_1004097B0((uint64_t)a1, v6);
  __int16 v8 = qword_100A19E30;
  if (!v7)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
      sub_100765C38();
    }
    return 1;
  }
  uint64_t v9 = v7;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a2, __p);
    float v10 = (void **)__p[0];
    __int16 v11 = "No";
    if (v14 >= 0) {
      float v10 = __p;
    }
    if (a3) {
      __int16 v11 = "Yes";
    }
    *(_DWORD *)std::string buf = 136446466;
    __int16 v16 = v10;
    __int16 v17 = 2082;
    int v18 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "setAudioRouteHidden: %{public}s, %{public}s", buf, 0x16u);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_1002E9100(v9, a3);
  return 0;
}

uint64_t sub_100416A60(void *a1, uint64_t a2, int a3)
{
  unsigned int v5 = sub_100409054(a1, a2);
  if (v5)
  {
    uint64_t v6 = sub_1004097B0((uint64_t)a1, v5);
    if (v6)
    {
      sub_1002E9018(v6, a3);
      return 0;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
      sub_100765CA0();
    }
  }
  return 1;
}

uint64_t sub_100416AE8(void *a1, uint64_t a2, int a3)
{
  unsigned int v6 = sub_100409054(a1, a2);
  if (!v6)
  {
LABEL_10:
    uint64_t v11 = 1;
    goto LABEL_11;
  }
  uint64_t v7 = sub_1004097B0((uint64_t)a1, v6);
  __int16 v8 = qword_100A19E30;
  if (!v7)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
      sub_100765D08();
    }
    goto LABEL_10;
  }
  uint64_t v9 = v7;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    float v10 = "No";
    if (a3) {
      float v10 = "Yes";
    }
    int v13 = 136315138;
    char v14 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Smart Route: [A2DP] Tipi Connection status : %s", (uint8_t *)&v13, 0xCu);
  }
  sub_1002E8308(v9, a3);
  uint64_t v11 = 0;
LABEL_11:
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009AD890);
  }
  sub_100574508((uint64_t)off_1009F80A8, a2, a3);
  return v11;
}

void sub_100416C54(void *a1, uint64_t a2, int a3)
{
  unsigned int v6 = sub_100409054(a1, a2);
  if (v6)
  {
    uint64_t v7 = sub_1004097B0((uint64_t)a1, v6);
    if (v7)
    {
      uint64_t v8 = v7;
      if ((a3 - 1) > 4) {
        int v9 = 0;
      }
      else {
        int v9 = dword_1007BE9E8[a3 - 1];
      }
      float v10 = qword_100A19E30;
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(a2, __p);
        if (v14 >= 0) {
          uint64_t v11 = __p;
        }
        else {
          uint64_t v11 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 67109634;
        int v16 = a3;
        __int16 v17 = 1024;
        int v18 = v9;
        __int16 v19 = 2082;
        BOOL v20 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "User selected device type is %d. Setting category as %d for device %{public}s.", buf, 0x18u);
        if (v14 < 0) {
          operator delete(__p[0]);
        }
      }
      sub_1005D114C(v8, v9);
      int v12 = sub_1004455E4(v8 + 400);
      sub_1005D0EF4(v8, v12);
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
    {
      sub_100765D70();
    }
  }
}

uint64_t sub_100416DE4(os_unfair_lock_s *a1, unsigned int a2, int a3, int a4)
{
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, (uint64_t)&a1[138]);
  uint64_t v8 = sub_1004097B0((uint64_t)a1, a2);
  if (!v8) {
    goto LABEL_5;
  }
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009AD890);
  }
  if ((sub_10056712C((uint64_t)off_1009F80A8, a2) & 1) == 0)
  {
    sub_10040ABC4((uint64_t)a1, v8, a3, a4);
    uint64_t v9 = 0;
    if (a4) {
      *(unsigned char *)(v8 + 710) = 1;
    }
  }
  else
  {
LABEL_5:
    if (a4)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
        sub_100765DD8();
      }
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      void v12[2] = sub_100408AFC;
      void v12[3] = &unk_1009AD1D8;
      __int16 v13 = a2;
      char v14 = 0;
      sub_10040815C(a1 + 108, v12);
    }
    uint64_t v9 = 1;
  }
  sub_10003AFB4((uint64_t)v11);
  return v9;
}

void sub_100416F48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100416F64(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  unsigned int v6 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109120;
    v7[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Dynamic Latency ExpanseStateChanged to: %d", (uint8_t *)v7, 8u);
  }
  sub_1004085EC(a1, a2, a3);
}

void sub_100417028(uint64_t a1, uint64_t a2, int a3)
{
}

void sub_100417030(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  unsigned int v6 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 67109120;
    v8[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Dynamic Latency gameStateChanged to: %d", (uint8_t *)v8, 8u);
  }
  sub_1004086B8(a1, a2, a3);
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Dynamic Latency ExpanseState disabled", (uint8_t *)v8, 2u);
    }
    sub_1004085EC(a1, a2, 0);
  }
}

void sub_10041714C(uint64_t a1, uint64_t a2, int a3)
{
}

void sub_100417154(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  unsigned int v6 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109120;
    v7[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Dynamic Latency aggregationStateChanged to: %d", (uint8_t *)v7, 8u);
  }
  sub_100408784(a1, a2, a3);
}

void sub_100417218(uint64_t a1, uint64_t a2, int a3)
{
}

void sub_100417220(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  unsigned int v6 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109120;
    v7[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Dynamic Latency voiceOverChanged to: %d", (uint8_t *)v7, 8u);
  }
  sub_100408860(a1, a2, a3);
}

void sub_1004172E4(uint64_t a1, uint64_t a2, int a3)
{
}

void sub_1004172EC(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  unsigned int v6 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109120;
    v7[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Dynamic Latency MUSIC spatial changed to: %d", (uint8_t *)v7, 8u);
  }
  sub_10040892C(a1, a2, a3);
}

void sub_1004173B0(uint64_t a1, uint64_t a2, int a3)
{
}

void sub_1004173B8(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  unsigned int v6 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109120;
    v7[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Dynamic Latency VIDEO spatial changed to: %d", (uint8_t *)v7, 8u);
  }
  sub_1004089F8(a1, a2, a3);
}

void sub_10041747C(uint64_t a1, uint64_t a2, int a3)
{
}

void sub_100417484(uint64_t a1, uint64_t a2, unsigned __int8 a3, void *a4, unsigned __int8 a5)
{
  id v9 = a4;
  unsigned int v10 = sub_100634250(a2);
  uint64_t v11 = sub_1004080A8(a1, v10);
  if (v11)
  {
    v12[0] = 2;
    v12[1] = a3;
    void v12[2] = sub_1002E7C4C(a2, v9);
    void v12[3] = a5;
    if (qword_1009F80A0 != -1) {
      dispatch_once(&qword_1009F80A0, &stru_1009AD870);
    }
    if (sub_1002939C0((uint64_t)off_1009F8098, v11, 4u, v12)
      && os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
    {
      sub_100765E78();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
  {
    sub_100765E44();
  }
}

void sub_1004175AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004175C8(uint64_t a1, uint64_t a2, unsigned __int8 a3, void *a4, unsigned __int8 a5)
{
}

void sub_1004175D0(uint64_t a1, uint64_t a2, unsigned __int8 a3, void *a4, unsigned __int8 a5, unsigned __int8 a6)
{
  id v11 = a4;
  unsigned int v12 = sub_100634250(a2);
  uint64_t v13 = sub_1004080A8(a1, v12);
  if (v13)
  {
    v14[0] = 3;
    v14[1] = sub_1002E7C4C(a2, v11);
    void v14[2] = a3;
    v14[3] = a5;
    v14[4] = a6;
    if (qword_1009F80A0 != -1) {
      dispatch_once(&qword_1009F80A0, &stru_1009AD870);
    }
    if (sub_1002939C0((uint64_t)off_1009F8098, v13, 5u, v14)
      && os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
    {
      sub_100765F14();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
  {
    sub_100765EE0();
  }
}

void sub_100417700(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10041771C(uint64_t a1, uint64_t a2, unsigned __int8 a3, void *a4, unsigned __int8 a5, unsigned __int8 a6)
{
}

void sub_100417724(os_unfair_lock_s *a1, uint64_t a2, int a3, int a4)
{
  if ((*(unsigned char *)(a2 + 723) != 0) != a3)
  {
    *(unsigned char *)(a2 + 723) = a3;
    unsigned int v8 = sub_100634250(a2);
    uint64_t v9 = sub_1004080A8((uint64_t)a1, v8);
    if (v9)
    {
      uint64_t v10 = v9;
      id v11 = qword_100A19E30;
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v12 = a3 ? "enabled" : "disabled";
        sub_1004A82EC((unsigned __int8 *)(v10 + 128), __p);
        uint64_t v13 = v18 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)std::string buf = 136446466;
        BOOL v20 = v12;
        __int16 v21 = 2082;
        int v22 = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Wireless Splitter: %{public}s for device %{public}s", buf, 0x16u);
        if (v18 < 0) {
          operator delete(__p[0]);
        }
      }
      if (sub_100478B2C(v10, 13) && sub_100445940(a2 + 400) == 33023)
      {
        *(unsigned char *)(a2 + 704) = a3 ^ 1;
        sub_100634E4C(a2, a3 ^ 1);
      }
      if (a3)
      {
        if (sub_100478B2C(v10, 26))
        {
          uint64_t v14 = sub_100017768();
          if (((*(uint64_t (**)(uint64_t))(*(void *)v14 + 768))(v14) & 1) == 0)
          {
            unsigned int v15 = qword_100A19E30;
            if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
            {
              sub_1004A82EC((unsigned __int8 *)(v10 + 128), __p);
              int v16 = v18 >= 0 ? __p : (void **)__p[0];
              *(_DWORD *)std::string buf = 136446210;
              BOOL v20 = v16;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Wireless Splitter: Disable Software volume for %{public}s", buf, 0xCu);
              if (v18 < 0) {
                operator delete(__p[0]);
              }
            }
            if (qword_1009F80A0 != -1) {
              dispatch_once(&qword_1009F80A0, &stru_1009AD870);
            }
            if (sub_10028819C((uint64_t)off_1009F8098, v10, 2, 2))
            {
              if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
                sub_100765AE0();
              }
            }
          }
        }
        sub_100408C28(a1, a2, 1);
      }
      else
      {
        sub_100408C28(a1, a2, 0);
        if (a4 && *(unsigned char *)(v10 + 960))
        {
          *(_DWORD *)(v10 + 980) = 3;
          if (qword_1009F8768 != -1) {
            dispatch_once(&qword_1009F8768, &stru_1009AD970);
          }
          sub_100611000((uint64_t)off_1009F8760, (unsigned __int8 *)v10);
        }
      }
    }
  }
}

void sub_100417A4C(uint64_t a1, uint64_t a2, int a3, int a4)
{
}

uint64_t sub_100417A54(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v5 = sub_100634250(a2);
  uint64_t result = sub_1004080A8(a1, v5);
  if (result)
  {
    uint64_t v7 = result;
    unsigned int v8 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      sub_1004A82EC((unsigned __int8 *)(v7 + 128), __p);
      uint64_t v9 = v11 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 67109378;
      int v13 = a3;
      __int16 v14 = 2082;
      unsigned int v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Spatial Audio Active(via BTHAL) is : %d for device %{public}s", buf, 0x12u);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
    if (qword_1009F7EF0 != -1) {
      dispatch_once(&qword_1009F7EF0, &stru_1009AD830);
    }
    return sub_100456118((uint64_t)off_1009F7EE8, v7, a3);
  }
  return result;
}

uint64_t sub_100417B98(uint64_t a1, uint64_t a2, int a3)
{
  return sub_100417A54(a1 - 256, a2, a3);
}

void sub_100417BA0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  uint64_t v9 = a3;
  unsigned int v10 = sub_100634250(a2);
  uint64_t v11 = sub_1004080A8(a1, v10);
  unsigned int v12 = qword_100A19E30;
  if (v11)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      sub_1004A82EC((unsigned __int8 *)(v11 + 128), __p);
      CFStringRef v13 = @"None";
      if (v9) {
        CFStringRef v13 = v9;
      }
      if (v16 >= 0) {
        __int16 v14 = __p;
      }
      else {
        __int16 v14 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 138412802;
      CFStringRef v18 = v13;
      __int16 v19 = 1024;
      int v20 = a4;
      __int16 v21 = 2082;
      int v22 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Spatial Audio: Spatial Audio mode for App: %@ From User(via BTHAL) is : %d for device %{public}s", buf, 0x1Cu);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    if (qword_1009F7EF0 != -1) {
      dispatch_once(&qword_1009F7EF0, &stru_1009AD830);
    }
    sub_100456244((uint64_t)off_1009F7EE8, v11, v9, a4, a5);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
  {
    sub_100765F7C();
  }
}

void sub_100417D3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100417D5C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
}

void sub_100417D64(uint64_t a1, uint64_t a2, char a3)
{
  __int16 v5 = sub_100634250(a2);
  uint64_t v6 = sub_1004AFB34();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_100417E00;
  v7[3] = &unk_1009ACD50;
  void v7[4] = a1;
  __int16 v8 = v5;
  char v9 = a3;
  sub_100013018(v6, v7);
}

uint64_t sub_100417E00(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, v2 + 552);
  uint64_t v3 = sub_1004080A8(v2, *(unsigned __int16 *)(a1 + 40));
  if (v3)
  {
    unsigned int v4 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      if (*(unsigned char *)(a1 + 42)) {
        __int16 v5 = "enabled";
      }
      else {
        __int16 v5 = "disabled";
      }
      *(_DWORD *)std::string buf = 136315138;
      unsigned int v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PME On Buds: %s", buf, 0xCu);
    }
    *(_WORD *)std::string buf = 1;
    if (*(unsigned char *)(a1 + 42)) {
      uint8_t v6 = 1;
    }
    else {
      uint8_t v6 = 2;
    }
    buf[1] = v6;
    if (qword_1009F80A0 != -1) {
      dispatch_once(&qword_1009F80A0, &stru_1009AD870);
    }
    if (sub_100293BF4((uint64_t)off_1009F8098, v3, 2u, buf)
      && os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
    {
      sub_100765FB0();
    }
  }
  return sub_10003AFB4((uint64_t)v8);
}

void sub_100417F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100417F98(uint64_t a1, uint64_t a2, char a3)
{
}

void sub_100417FA0(uint64_t a1, uint64_t a2, char a3)
{
  __int16 v6 = sub_100634250(a2);
  uint64_t v7 = sub_1004AFB34();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_100418040;
  v8[3] = &unk_1009A2898;
  __int16 v9 = v6;
  char v10 = a3;
  void v8[4] = a1;
  void v8[5] = a2;
  sub_100013018(v7, v8);
}

uint64_t sub_100418040(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, v2 + 552);
  uint64_t v3 = sub_1004080A8(v2, *(unsigned __int16 *)(a1 + 48));
  if (v3)
  {
    unsigned int v4 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      if (*(unsigned char *)(a1 + 50)) {
        __int16 v5 = "enabled";
      }
      else {
        __int16 v5 = "disabled";
      }
      *(_DWORD *)std::string buf = 136315138;
      __int16 v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Software Volume: %s", buf, 0xCu);
    }
    *(unsigned char *)(*(void *)(a1 + 40) + 726) = *(unsigned char *)(a1 + 50);
    int v6 = sub_100487DD4(v3, 32);
    if (*(unsigned char *)(a1 + 50))
    {
      int v7 = 0;
    }
    else if (*(unsigned char *)(*(void *)(a1 + 40) + 723))
    {
      int v7 = 0;
    }
    else
    {
      int v7 = v6 ^ 1;
    }
    __int16 v8 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v9 = "No";
      if (v7) {
        __int16 v9 = "Yes";
      }
      *(_DWORD *)std::string buf = 136315138;
      __int16 v14 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Software Volume: Drop software volume enabled command : %s", buf, 0xCu);
    }
    if ((v7 & 1) == 0)
    {
      if (*(unsigned char *)(a1 + 50)) {
        uint64_t v10 = 1;
      }
      else {
        uint64_t v10 = 2;
      }
      if (qword_1009F80A0 != -1) {
        dispatch_once(&qword_1009F80A0, &stru_1009AD870);
      }
      if (sub_10028819C((uint64_t)off_1009F8098, v3, 2, v10)
        && os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
      {
        sub_100765AE0();
      }
    }
  }
  return sub_10003AFB4((uint64_t)v12);
}

void sub_100418258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10041827C(uint64_t a1, uint64_t a2, char a3)
{
}

void sub_100418284(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 <= 3 && *(unsigned char *)(a2 + 704))
  {
    __int16 v5 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      v6[0] = 67109120;
      v6[1] = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "AAC-ELD frame count update notification from BTHALPlugIn received: %d", (uint8_t *)v6, 8u);
    }
    *(_DWORD *)(a2 + 660) = a3;
  }
}

void sub_10041834C(os_unfair_lock_s *a1, uint64_t a2, unint64_t a3)
{
  if (sub_100445940(a2 + 400) == 33023)
  {
    uint64_t v6 = sub_100017768();
    if (((*(uint64_t (**)(uint64_t))(*(void *)v6 + 440))(v6) & 1) == 0)
    {
      unint64_t v7 = a3 / (10 * *(_DWORD *)(a2 + 660));
      unsigned __int16 v8 = *(_WORD *)(a2 + 720) + v7;
      *(_WORD *)(a2 + 720) = v8;
      __int16 v9 = qword_100A19E30;
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = 134218240;
        unint64_t v11 = v7;
        __int16 v12 = 1024;
        int v13 = v8;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "AudioSkywalkReadLoop Skip A2DP sequence number Skipped = %llu, current seq Num = %d", (uint8_t *)&v10, 0x12u);
      }
    }
  }
  sub_100408B64(a1, a2, a3);
}

void sub_10041848C(uint64_t a1, uint64_t a2, unint64_t a3)
{
}

uint64_t sub_100418494(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, (uint64_t)&a1[138]);
  unsigned int v6 = sub_100634250(a2);
  uint64_t v7 = sub_1004097B0((uint64_t)a1, v6);
  unsigned __int16 v8 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v6;
    LOWORD(v12) = 1024;
    *(_DWORD *)((char *)&v12 + 2) = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Dynamic Latency received system 'audio speed change complete' notification from HAL on a2dpHandle %d, status %d", buf, 0xEu);
  }
  if (v7)
  {
    if (*(unsigned char *)(v7 + 705))
    {
      sub_10040ABC4((uint64_t)a1, v7, 0, 0);
      *(unsigned char *)(v7 + 705) = 0;
      sub_100408368(a1, a2, 1);
    }
    else if (*(unsigned char *)(v7 + 710))
    {
      *(unsigned char *)(v7 + 710) = 0;
      *(void *)std::string buf = _NSConcreteStackBlock;
      uint64_t v12 = 3221225472;
      int v13 = sub_100408AFC;
      __int16 v14 = &unk_1009AD1D8;
      __int16 v15 = v6;
      char v16 = 1;
      sub_10040815C(a1 + 108, buf);
    }
    else
    {
      sub_10040ABC4((uint64_t)a1, v7, 0, 0);
    }
  }
  return sub_10003AFB4((uint64_t)v10);
}

void sub_100418648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100418668(uint64_t a1, uint64_t a2, int a3)
{
  return sub_100418494((os_unfair_lock_s *)(a1 - 256), a2, a3);
}

void sub_100418670(uint64_t a1, uint64_t a2)
{
  __int16 v3 = sub_100634250(a2);
  uint64_t v4 = sub_1004AFB34();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1004186FC;
  v5[3] = &unk_1009A0B58;
  void v5[4] = a1;
  __int16 v6 = v3;
  sub_100013018(v4, v5);
}

uint64_t sub_1004186FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, v2 + 552);
  uint64_t v3 = sub_1004080A8(v2, *(unsigned __int16 *)(a1 + 40));
  BOOL v4 = os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR);
  if (v3)
  {
    if (v4)
    {
      sub_100474E18(v3, v9);
      sub_10076604C();
    }
    char v8 = 0;
    sub_10001B8E0(&v8);
    int v5 = sub_10017C104(v3 + 128);
    __int16 v6 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109120;
      int v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Forced disconnect with return status %{bluetooth:OI_STATUS}u", buf, 8u);
    }
    sub_10001B8AC(&v8);
  }
  else if (v4)
  {
    sub_100766018();
  }
  return sub_10003AFB4((uint64_t)v10);
}

void sub_10041883C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100418870(uint64_t a1, uint64_t a2)
{
}

void sub_100418878(uint64_t a1, uint64_t a2)
{
  if (sub_1002E9368(a2))
  {
    __int16 v4 = sub_100634250(a2);
    uint64_t v5 = sub_1004AFB34();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_100418964;
    v7[3] = &unk_1009988A0;
    __int16 v8 = v4;
    void v7[4] = a1;
    void v7[5] = a2;
    sub_100013018(v5, v7);
  }
  else
  {
    __int16 v6 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Audio device is not valid, not handling uni to bi transition", buf, 2u);
    }
  }
}

uint64_t sub_100418964(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, v2 + 552);
  uint64_t v3 = sub_1004080A8(v2, *(unsigned __int16 *)(a1 + 48));
  __int16 v4 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int16 *)(a1 + 48);
    *(_DWORD *)std::string buf = 67109120;
    int v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Received system 'uni to bi' notification from HAL on a2dpHandle %d", buf, 8u);
  }
  if (*(_DWORD *)(*(void *)(a1 + 40) + 728) == 5)
  {
    sub_10040A4D0(v2, *(unsigned __int16 *)(a1 + 48));
    uint64_t v6 = sub_10003FB34();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v6 + 952))(v6, 0, 1);
    char v10 = 0;
    sub_10001B8E0(&v10);
    BOOL v7 = sub_100139F18(v3 + 128);
    *(_WORD *)std::string buf = sub_100445248(*(void *)(a1 + 40) + 400);
    sub_100139360((__int16 *)buf, 1u, 0);
    sub_10001B910(&v10);
    if (!v7)
    {
      uint64_t v8 = sub_10003FB34();
      (*(void (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)v8 + 304))(v8, v3, 0, 1);
    }
    sub_10001B8AC(&v10);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
  {
    sub_1007660A0();
  }
  return sub_10003AFB4((uint64_t)v11);
}

void sub_100418B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14)
{
}

void sub_100418B7C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100418B84(uint64_t a1, unsigned int a2, int a3)
{
  v20[0] = 0;
  v20[1] = 0;
  sub_10003AED0((uint64_t)v20, a1 + 552);
  uint64_t v6 = sub_1004097B0(a1, a2);
  uint64_t v7 = sub_1004080A8(a1, a2);
  if (v6 && (unint64_t v8 = v7) != 0)
  {
    if (!*(unsigned char *)(v6 + 705))
    {
      *(unsigned char *)(v6 + 705) = 1;
      int v10 = sub_10040A9F0(v7, v7, a3);
      *(_WORD *)(v6 + 708) = v10;
      unint64_t v11 = qword_100A19E30;
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = *(_DWORD *)(v6 + 728);
        *(_DWORD *)std::string buf = 67109376;
        int v22 = v10;
        __int16 v23 = 1024;
        int v24 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Dynamic Latency trying to set jitter buffer to %d Current Stream state %d", buf, 0xEu);
      }
      sub_10003AFE8((uint64_t)v20);
      if (qword_1009F80A0 != -1) {
        dispatch_once(&qword_1009F80A0, &stru_1009AD870);
      }
      int v13 = sub_1002859A4((uint64_t)off_1009F8098, v8, 11, *(unsigned __int16 *)(v6 + 708), 1u);
      sub_10003AF00((uint64_t)v20);
      if (v13)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
          sub_100766108();
        }
      }
      else
      {
        if (*(_DWORD *)(v6 + 728) == 5)
        {
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_100418EA8;
          block[3] = &unk_1009988A0;
          __int16 v19 = a2;
          block[4] = a1;
          block[5] = v6;
          dispatch_block_t v14 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, block);
          __int16 v15 = *(void **)(a1 + 496);
          *(void *)(a1 + 496) = v14;

          uint64_t v16 = sub_1004AFB34();
          sub_1004AFF58(v16, 2000, *(void **)(a1 + 496));
          return sub_10003AFB4((uint64_t)v20);
        }
        sub_10041372C((os_unfair_lock_s *)a1, v6, v8);
      }
      *(unsigned char *)(v6 + 705) = 0;
      sub_100408368((os_unfair_lock_s *)a1, v6, 0);
      return sub_10003AFB4((uint64_t)v20);
    }
    __int16 v9 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Dynamic Latency change already in progress", buf, 2u);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
  {
    sub_100766190();
  }
  sub_100408368((os_unfair_lock_s *)a1, v6, 0);
  return sub_10003AFB4((uint64_t)v20);
}

void sub_100418E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100418EA8(uint64_t a1)
{
  uint64_t v2 = *(os_unfair_lock_s **)(a1 + 32);
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, (uint64_t)&v2[138]);
  uint64_t v3 = sub_1004097B0((uint64_t)v2, *(unsigned __int16 *)(a1 + 48));
  uint64_t v4 = sub_1004080A8((uint64_t)v2, *(unsigned __int16 *)(a1 + 48));
  unint64_t v5 = v4;
  if (v3) {
    BOOL v6 = v4 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6 && *(_DWORD *)(v3 + 728) == 5)
  {
    uint64_t v7 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int16 v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Dynamic Latency did not receive Delay Report from accessory assuming audio modification is not needed", v9, 2u);
    }
    *(unsigned char *)(v3 + 705) = 0;
    sub_10041372C(v2, v3, v5);
    sub_100408368(v2, *(void *)(a1 + 40), 0);
  }
  return sub_10003AFB4((uint64_t)v10);
}

void sub_100418F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100418FB4(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = sub_1004097B0(a1, a2);
  uint64_t v7 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(_DWORD *)(v6 + 728);
    int v9 = *(unsigned __int8 *)(v6 + 705);
    int v10 = *(unsigned __int16 *)(v6 + 708);
    v12[0] = 67109888;
    v12[1] = v8;
    __int16 v13 = 1024;
    int v14 = v9;
    __int16 v15 = 1024;
    int v16 = v10;
    __int16 v17 = 1024;
    unsigned int v18 = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Adaptive Latency speed modify stream:%d, inprogress:%d, curr:%d, delay:%d", (uint8_t *)v12, 0x1Au);
  }
  if (*(_DWORD *)(v6 + 728) == 5 && !*(unsigned char *)(v6 + 705))
  {
    uint64_t v11 = sub_1004097B0(a1, a2);
    if (v11)
    {
      *(unsigned char *)(v11 + 705) = 1;
      sub_100413B60(a1, v11, a3);
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
    {
      sub_1007661F8();
    }
  }
}

uint64_t sub_1004190FC(uint64_t a1, unsigned int a2)
{
  uint64_t result = sub_1004097B0(a1, a2);
  if (result) {
    return *(unsigned __int16 *)(result + 720);
  }
  return result;
}

double sub_10041911C(void *a1, uint64_t a2)
{
  unsigned int v3 = sub_100409054(a1, a2);
  return *(double *)(sub_1004097B0((uint64_t)a1, v3) + 672);
}

void sub_100419150(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v4 = sub_1004097B0(a1, a2);
  if (v4)
  {
    sub_100634E8C(v4, a3);
  }
}

void sub_100419198(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v4 = sub_1004097B0(a1, a2);
  if (v4)
  {
    sub_100634E9C(v4, a3);
  }
}

uint64_t sub_1004191E0(uint64_t a1, int *a2, __int16 *a3, _WORD *a4)
{
  uint64_t v4 = sub_10013F8FC(a2, xmmword_1007BE9B0, &unk_1009FB670, a3, a4);
  if (v4 && os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
    sub_10076622C();
  }
  return v4;
}

uint64_t sub_100419250(uint64_t a1, uint64_t a2, __int16 *a3, __int16 *a4)
{
  sub_100011B98(a2, 3);
  sub_100011B98(a2, 2);
  sub_10001195C(a2, 102);
  sub_100011B98(a2, 16);
  sub_100011B98(a2, 2);
  sub_10001195C(a2, 103);
  uint64_t v7 = sub_100022FE8(0x1F4uLL);
  if (v7)
  {
    int v8 = v7;
    __src = v7;
    uint64_t v17 = 0x2000001F401F4;
    uint64_t v9 = sub_100140528((uint64_t)&__src);
    uint64_t v10 = v9;
    int64_t v11 = WORD2(v17);
    if (BYTE6(v17) == 2) {
      WORD1(v17) = WORD2(v17);
    }
    BYTE6(v17) = 15;
    if (v9)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
        sub_1007662FC();
      }
    }
    else
    {
      if (!__src || !(_WORD)v17) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/a2dp/A2DPClient.cpp", 5188, "((bs).__data != NULL) && ((bs).__trueSize > 0)");
      }
      BYTE6(v17) = 1;
      *(_DWORD *)((char *)&v17 + 2) = (unsigned __int16)v17;
      if (v11 < 0x100)
      {
        sub_100011B98(a2, 17);
        sub_100011B98(a2, v11);
      }
      else
      {
        sub_100011B98(a2, 145);
        sub_10001195C(a2, v11);
      }
      sub_1004BC4E4(a2, (char *)__src, v11);
      __int16 v15 = 0;
      char v14 = 0;
      __int16 v13 = 0;
      if (sub_1001DF230((unsigned __int16)*a3, &v13, &v15, &v14))
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
          sub_1007662C8();
        }
      }
      else
      {
        sub_100011B98(a2, 1);
        sub_100011B98(a2, 7);
        sub_10001195C(a2, *a3);
        sub_10001195C(a2, v13);
        sub_10001195C(a2, v15);
        sub_100011B98(a2, v14);
      }
      uint64_t v10 = sub_1001DF230((unsigned __int16)*a4, &v13, &v15, &v14);
      if (v10)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
          sub_100766294();
        }
      }
      else
      {
        sub_100011B98(a2, 19);
        sub_100011B98(a2, 7);
        sub_10001195C(a2, *a4);
        sub_10001195C(a2, v13);
        sub_10001195C(a2, v15);
        sub_100011B98(a2, v14);
      }
    }
    sub_100023010(v8);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
      sub_100766260();
    }
    return 106;
  }
  return v10;
}

uint64_t sub_100419528(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4, unsigned int a5, _WORD *a6)
{
  unsigned __int16 v45 = a4;
  v44[0] = 0;
  v44[1] = 0;
  sub_10003AED0((uint64_t)v44, a1 + 552);
  uint64_t v43 = 0;
  int v9 = sub_100045F00(a2 + 8) - *(_DWORD *)(a2 + 24);
  unsigned int v10 = v9 << 16;
  if (v9 << 16 < 1) {
    goto LABEL_59;
  }
  while (2)
  {
    int v11 = (char)sub_1004BC378(a2);
    if (v11 < 0)
    {
      unsigned int v12 = sub_1004BC3C8(a2);
      int v9 = HIWORD(v10) - 3;
    }
    else
    {
      unsigned int v12 = sub_1004BC378(a2);
      LOWORD(v9) = v9 - 2;
    }
    int v13 = v11 & 0x7F;
    switch(v13)
    {
      case 16:
        if (v12 == 2) {
          goto LABEL_7;
        }
        uint64_t v27 = qword_100A19E30;
        if (!os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
          goto LABEL_38;
        }
        *(_DWORD *)std::string buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v12;
        uint64_t v25 = v27;
        __int16 v26 = "parseA2DPDescriptor Error FC_A2DP_AVDTP_VERSION size wrong %d";
        goto LABEL_37;
      case 17:
        sub_100419BBC(a1, a2, a3, &v45, a6);
        goto LABEL_48;
      case 18:
        int v14 = sub_1004BC3C8(a2);
        uint64_t v15 = v43;
        if (v43)
        {
          int v16 = v14;
          uint64_t v17 = sub_100035F54();
          if ((*(unsigned int (**)(uint64_t))(*(void *)v17 + 720))(v17)) {
            int v18 = 5000;
          }
          else {
            int v18 = v16;
          }
          __int16 v19 = qword_100A19E30;
          if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEBUG))
          {
            if (a3)
            {
              sub_100474E18((uint64_t)a3, buf);
              __int16 v31 = buf;
              if (v47 < 0) {
                __int16 v31 = *(uint8_t **)buf;
              }
              *(_DWORD *)int v48 = 136446466;
              int v49 = (const char *)v31;
              __int16 v50 = 1024;
              int v51 = v18;
              _os_log_debug_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "Fast Connect: Received delay report stream request from device %{public}s, delay in 1/10th of milliseconds %d", v48, 0x12u);
              if (v47 < 0) {
                operator delete(*(void **)buf);
              }
            }
            else
            {
              *(_DWORD *)int v48 = 136446466;
              int v49 = "null";
              __int16 v50 = 1024;
              int v51 = v18;
              _os_log_debug_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "Fast Connect: Received delay report stream request from device %{public}s, delay in 1/10th of milliseconds %d", v48, 0x12u);
            }
          }
          sub_1004484B4(v15 + 400, 100 * v18);
        }
        goto LABEL_48;
      case 19:
        if (v12 < 7)
        {
          uint64_t v29 = qword_100A19E30;
          if (!os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
            goto LABEL_38;
          }
          *(_DWORD *)std::string buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v12;
          uint64_t v25 = v29;
          __int16 v26 = "parseA2DPDescriptor Error FC_A2DP_L2CAP_MEDIA size wrong %d";
          goto LABEL_37;
        }
        __int16 v20 = sub_1004BC3C8(a2);
        sub_1004BC3C8(a2);
        __int16 v21 = sub_1004BC3C8(a2);
        sub_1004BC378(a2);
        *(void *)std::string buf = 0;
        v48[0] = 0;
        sub_10001B8E0(v48);
        if (sub_1001DD56C(a5, (uint64_t *)buf) || !sub_1001E6484(*(unsigned int **)buf))
        {
          if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
            sub_100766330(&v39, v40);
          }
        }
        else
        {
          *(_WORD *)(sub_1001E6484(*(unsigned int **)buf) + 8) = v20;
          *(_WORD *)(sub_1001E6484(*(unsigned int **)buf) + 32) = v21;
        }
        sub_10001B910(v48);
        if (v12 < 8) {
          goto LABEL_47;
        }
        goto LABEL_46;
      default:
        if (v13 != 1)
        {
          if (v13 == 3)
          {
            if (v12 == 2)
            {
LABEL_7:
              sub_1004BC3C8(a2);
              goto LABEL_48;
            }
            uint64_t v28 = qword_100A19E30;
            if (!os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
              goto LABEL_38;
            }
            *(_DWORD *)std::string buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v12;
            uint64_t v25 = v28;
            __int16 v26 = "parseA2DPDescriptor Error FC_COMMON_VERSION size wrong %d";
            goto LABEL_37;
          }
          uint64_t v24 = qword_100A19E30;
          if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v13;
            uint64_t v25 = v24;
            __int16 v26 = "parseA2DPDescriptor Key not recognized %d";
LABEL_37:
            _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, v26, buf, 8u);
            goto LABEL_38;
          }
          goto LABEL_38;
        }
        if (v12 < 7)
        {
          uint64_t v30 = qword_100A19E30;
          if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v12;
            uint64_t v25 = v30;
            __int16 v26 = "parseA2DPDescriptor Error FC_COMMON_L2CAP_CONFIG size wrong %d";
            goto LABEL_37;
          }
LABEL_38:
          sub_1004BC490(a2, v12);
          goto LABEL_48;
        }
        __int16 v22 = sub_1004BC3C8(a2);
        sub_1004BC3C8(a2);
        __int16 v23 = sub_1004BC3C8(a2);
        sub_1004BC378(a2);
        *(void *)std::string buf = 0;
        v48[0] = 0;
        sub_10001B8E0(v48);
        if (sub_1001DD56C(a4, (uint64_t *)buf) || !sub_1001E6484(*(unsigned int **)buf))
        {
          if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
            sub_100766330(&v41, v42);
          }
        }
        else
        {
          *(_WORD *)(sub_1001E6484(*(unsigned int **)buf) + 8) = v22;
          *(_WORD *)(sub_1001E6484(*(unsigned int **)buf) + 32) = v23;
        }
        sub_10001B910(v48);
        if (v12 >= 8) {
LABEL_46:
        }
          sub_1004BC490(a2, v12 - 7);
LABEL_47:
        sub_10001B8AC(v48);
LABEL_48:
        int v9 = (__int16)v9 - v12;
        unsigned int v10 = v9 << 16;
        if (v9 << 16 > 0) {
          continue;
        }
        uint64_t v32 = v43;
        if (v43)
        {
          int v33 = sub_100448228(v43 + 400);
          sub_1002E857C(v32, v33);
          if (*(unsigned char *)(v32 + 704))
          {
            int v34 = sub_100448228(v32 + 400);
            sub_100634E6C(v32, v34);
          }
        }
LABEL_59:
        sub_10003AFB4((uint64_t)v44);
        return 0;
    }
  }
}

void sub_100419B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100419BBC(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int16 *a4, _WORD *a5)
{
  unsigned int v9 = sub_1004BC378(a2);
  if (v9)
  {
    if (sub_100022FE8(4 * v9))
    {
      *a5 = 0;
      char v26 = 0;
      sub_10001B8E0(&v26);
      if (!sub_100134C6C(*a4, a5))
      {
        uint64_t v10 = *(void *)(a1 + 512);
        if (v10)
        {
          unsigned int v11 = (unsigned __int16)*a5;
          uint64_t v12 = a1 + 512;
          do
          {
            unsigned int v13 = *(unsigned __int16 *)(v10 + 32);
            BOOL v14 = v13 >= v11;
            if (v13 >= v11) {
              uint64_t v15 = (uint64_t *)v10;
            }
            else {
              uint64_t v15 = (uint64_t *)(v10 + 8);
            }
            if (v14) {
              uint64_t v12 = v10;
            }
            uint64_t v10 = *v15;
          }
          while (*v15);
          if (v12 != a1 + 512 && v11 >= *(unsigned __int16 *)(v12 + 32))
          {
            int v16 = qword_100A19E30;
            if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_FAULT)) {
              sub_100764D8C(v16, v17, v18, v19, v20, v21, v22, v23);
            }
          }
        }
        std::string __p = a5;
        sub_1002CBD28((uint64_t **)(a1 + 504), a5, (uint64_t)&unk_1007BE9D0, (_WORD **)&__p)[5] = a3;
        operator new();
      }
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
        sub_100766458();
      }
      sub_10001B8AC(&v26);
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
    {
      sub_100766390();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
  {
    sub_10076635C();
  }
  return 129;
}

void sub_10041A1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

uint64_t sub_10041A204(uint64_t a1, unsigned int a2, unsigned char *a3, unsigned char *a4, unsigned __int16 *a5, unsigned int a6)
{
  v33[0] = 0;
  v33[1] = 0;
  sub_10003AED0((uint64_t)v33, a1 + 552);
  uint64_t v12 = sub_1004097B0(a1, a2);
  uint64_t v13 = v12 + 400;
  int v14 = *(_DWORD *)(v12 + 728);
  unsigned __int8 v15 = sub_100446A7C(v12 + 400);
  uint64_t v16 = sub_10044A140(a1 + 280, v15);
  uint64_t v17 = sub_1004479CC(v12 + 400, v16);
  uint64_t v18 = sub_1004080A8(a1, a2);
  *a5 = 0;
  if (v14 < 2)
  {
    if (v17)
    {
      unsigned int v31 = a6;
      int v20 = *(_DWORD *)(v12 + 556);
      int v21 = *(_DWORD *)(v12 + 552);
      uint64_t v22 = sub_100445410(v13);
      uint64_t v30 = *(void *)(v22 + 32);
      char v23 = sub_1004454BC(v13);
      int v24 = *(unsigned __int8 *)(v12 + 592);
      *a3 = v21;
      *a4 = v20;
      int v25 = *(_DWORD *)(v22 + 44);
      LOBYTE(v32[0]) = 0;
      sub_10001B8E0(v32);
      char v26 = v23 ^ 1;
      if (!v24) {
        char v26 = 0;
      }
      int v27 = sub_100140828(a2, v20, v21, v30, (v25 - v26), a5, v31);
      sub_10001B910(v32);
      if (v27)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
          sub_100766580();
        }
      }
      else
      {
        sub_100445298(v13, *a5);
      }
      sub_10001B8AC(v32);
    }
    else
    {
      uint64_t v28 = v18;
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
      {
        sub_100474E18(v28, v32);
        sub_10076652C();
      }
    }
    uint64_t v19 = 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
      sub_1007664C4();
    }
    uint64_t v19 = 1;
  }
  sub_10003AFB4((uint64_t)v33);
  return v19;
}

void sub_10041A440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10041A484()
{
}

void sub_10041A48C(void *a1, uint64_t a2)
{
  uint64_t v4 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a2, __p);
    if (v7 >= 0) {
      unint64_t v5 = __p;
    }
    else {
      unint64_t v5 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136446210;
    unsigned int v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Fast Connect A2DP Report Connection attempt for %{public}s", buf, 0xCu);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_1004BD554(a1, a2);
}

void sub_10041A588(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  unsigned int v9 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    LODWORD(v13) = a5;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Fast Connect A2DP Setup Complete result %d", buf, 8u);
  }
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, a1 + 552);
  sub_1004097B0(a1, a3);
  if (a5)
  {
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009AD8D0);
    }
    int v10 = sub_1004E2340((uint64_t)off_1009F8068, a5, 20000);
    sub_1004BD6C8(a1, a2, v10);
  }
  sub_1004BD6C8(a1, a2, 0);
}

void sub_10041A900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10041A928(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, int a6)
{
  unsigned __int16 v25 = a5;
  v24[0] = 0;
  v24[1] = 0;
  sub_10003AED0((uint64_t)v24, a1 + 552);
  if (a5)
  {
    sub_10040A4D0(a1, a5);
    uint64_t v12 = *(void *)(a1 + 512);
    if (v12)
    {
      uint64_t v13 = a1 + 512;
      do
      {
        unsigned int v14 = *(unsigned __int16 *)(v12 + 32);
        BOOL v15 = v14 >= a5;
        if (v14 >= a5) {
          uint64_t v16 = (uint64_t *)v12;
        }
        else {
          uint64_t v16 = (uint64_t *)(v12 + 8);
        }
        if (v15) {
          uint64_t v13 = v12;
        }
        uint64_t v12 = *v16;
      }
      while (*v16);
      if (v13 != a1 + 512 && *(unsigned __int16 *)(v13 + 32) <= a5) {
        sub_1003BA1D0(a1 + 504, &v25);
      }
    }
    uint64_t v17 = *(void *)(a1 + 536);
    if (!v17) {
      goto LABEL_32;
    }
    uint64_t v18 = a1 + 536;
    do
    {
      unsigned int v19 = *(unsigned __int16 *)(v17 + 32);
      BOOL v20 = v19 >= v25;
      if (v19 >= v25) {
        int v21 = (uint64_t *)v17;
      }
      else {
        int v21 = (uint64_t *)(v17 + 8);
      }
      if (v20) {
        uint64_t v18 = v17;
      }
      uint64_t v17 = *v21;
    }
    while (*v21);
    if (v18 != a1 + 536 && v25 >= *(unsigned __int16 *)(v18 + 32))
    {
      uint64_t v23 = *sub_100409A78(a1 + 528, &v25);
      if (v23)
      {
        sub_1003BA1D0(a1 + 528, &v25);
        v26[0] = _NSConcreteStackBlock;
        v26[1] = 3221225472;
        v26[2] = sub_100408AC4;
        _OWORD v26[3] = &unk_1009AD1F8;
        uint8_t v26[4] = a2;
        unsigned __int16 v27 = v25;
        char v28 = 0;
        sub_10040815C((os_unfair_lock_s *)(a1 + 432), v26);
        sub_1002E7878(v23);
      }
    }
    else
    {
LABEL_32:
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
        sub_100766688();
      }
    }
  }
  LOBYTE(v26[0]) = 0;
  sub_10001B8E0(v26);
  sub_10014030C(a2 + 128, a3, a4, a6);
  sub_10001B8AC(v26);
  return sub_10003AFB4((uint64_t)v24);
}

void sub_10041AB1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10041AB48(uint64_t a1, const std::string *a2)
{
  *(_OWORD *)std::string __p = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  *(_OWORD *)int v10 = 0u;
  *(_OWORD *)char v7 = 0u;
  *(_OWORD *)int v8 = 0u;
  memset(v6, 0, sizeof(v6));
  sub_10041E0F0((uint64_t)v6);
  std::string::operator=((std::string *)&__p[1], a2);
  unsigned int v3 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    if (v12 >= 0) {
      uint64_t v4 = &__p[1];
    }
    else {
      uint64_t v4 = (void **)__p[1];
    }
    *(_DWORD *)std::string buf = 136315138;
    unsigned int v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Wireless Splitter submitting following error metric: fErrorCode %s", buf, 0xCu);
  }
  uint64_t v5 = sub_100050530();
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v5 + 168))(v5, v6);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v10[0]);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(v8[1]);
  }
  if (SHIBYTE(v8[0]) < 0) {
    operator delete(v7[0]);
  }
}

void sub_10041ACA0(_Unwind_Exception *exception_object)
{
}

uint64_t sub_10041ACBC(uint64_t a1)
{
  if (*(char *)(a1 + 175) < 0) {
    operator delete(*(void **)(a1 + 152));
  }
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  return a1;
}

void sub_10041AD20(unsigned __int8 *a1, __int16 a2)
{
  unint64_t v3 = ((unint64_t)*a1 << 40) | ((unint64_t)a1[1] << 32) | ((unint64_t)a1[2] << 24) | ((unint64_t)a1[3] << 16) | ((unint64_t)a1[4] << 8) | a1[5];
  uint64_t v4 = sub_1004AFB34();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10041BEF4;
  v5[3] = &unk_1009A0B58;
  void v5[4] = v3;
  __int16 v6 = a2;
  sub_100013018(v4, v5);
}

void sub_10041ADD0(unsigned __int8 *a1, __int16 a2, int a3)
{
  unint64_t v5 = ((unint64_t)*a1 << 40) | ((unint64_t)a1[1] << 32) | ((unint64_t)a1[2] << 24) | ((unint64_t)a1[3] << 16) | ((unint64_t)a1[4] << 8) | a1[5];
  uint64_t v6 = sub_1004AFB34();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_10041BFC4;
  v7[3] = &unk_1009AD2E0;
  void v7[4] = v5;
  __int16 v9 = a2;
  int v8 = a3;
  sub_100013018(v6, v7);
}

void sub_10041AE90(unsigned __int8 *a1, __int16 a2, int a3)
{
  unint64_t v5 = ((unint64_t)*a1 << 40) | ((unint64_t)a1[1] << 32) | ((unint64_t)a1[2] << 24) | ((unint64_t)a1[3] << 16) | ((unint64_t)a1[4] << 8) | a1[5];
  uint64_t v6 = sub_1004AFB34();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_10041C030;
  v7[3] = &unk_1009AD2E0;
  void v7[4] = v5;
  __int16 v9 = a2;
  int v8 = a3;
  sub_100013018(v6, v7);
}

void sub_10041AF50()
{
}

void sub_10041AFEC()
{
}

void sub_10041B010()
{
}

void sub_10041B0B4()
{
}

void sub_10041B0D8()
{
}

void sub_10041B18C()
{
}

void sub_10041B1B0()
{
}

void sub_10041B258()
{
}

void sub_10041B2F4()
{
}

void sub_10041B318()
{
}

void sub_10041B3C0()
{
}

void sub_10041B450()
{
}

void sub_10041B4E0()
{
}

void sub_10041B578()
{
}

void sub_10041B5FC()
{
}

void sub_10041B620()
{
}

void sub_10041B6BC()
{
}

void sub_10041B6E0()
{
}

void sub_10041B764()
{
}

void sub_10041B788()
{
}

void sub_10041B824()
{
}

void sub_10041B848()
{
}

void sub_10041B8E4()
{
}

void sub_10041B908()
{
}

void sub_10041B994()
{
}

void sub_10041B9B8()
{
}

void sub_10041BA60()
{
}

void sub_10041BAEC()
{
}

void sub_10041BB10()
{
}

void sub_10041BBAC()
{
}

void sub_10041BBD0()
{
}

void sub_10041BC60()
{
}

uint64_t sub_10041BCFC()
{
  return kdebug_trace();
}

void sub_10041BD18()
{
}

void sub_10041BDBC()
{
}

void sub_10041BDE0()
{
}

void sub_10041BE78(__int16 a1)
{
  uint64_t v2 = sub_1004AFB34();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10041DFB0;
  v3[3] = &unk_1009AD7F0;
  __int16 v4 = a1;
  sub_100013018(v2, v3);
}

uint64_t sub_10041BEF4(uint64_t a1)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009AD300);
  }
  uint64_t v2 = (void *)qword_1009F8410;
  uint64_t v3 = *(void *)(a1 + 32);
  unsigned int v4 = *(unsigned __int16 *)(a1 + 40);

  return sub_10040DE48(v2, v3, v4);
}

void sub_10041BF5C(id a1)
{
}

void sub_10041BFA0()
{
}

void sub_10041BFC4(uint64_t a1)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009AD300);
  }
  uint64_t v2 = qword_1009F8410;
  uint64_t v3 = *(void *)(a1 + 32);
  __int16 v4 = *(_WORD *)(a1 + 44);
  uint64_t v5 = *(unsigned int *)(a1 + 40);

  sub_10040E1D0(v2, v3, v4, v5);
}

uint64_t sub_10041C030(uint64_t a1)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009AD300);
  }
  uint64_t v2 = qword_1009F8410;
  uint64_t v3 = *(void *)(a1 + 32);
  unsigned int v4 = *(unsigned __int16 *)(a1 + 44);

  return sub_10040F1B8(v2, v3, v4);
}

uint64_t sub_10041C09C(uint64_t a1, char a2, __int16 a3, const void *a4, unsigned int a5, char a6)
{
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = off_1009AD330;
  *(unsigned char *)(a1 + 10) = a2;
  *(_WORD *)(a1 + 12) = a3;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = a5;
  *(unsigned char *)(a1 + 25) = a6;
  if (a4)
  {
    int v10 = malloc_type_malloc(4 * a5, 0x100004052888210uLL);
    *(void *)(a1 + 16) = v10;
    memcpy(v10, a4, 4 * a5);
  }
  *(unsigned char *)(a1 + 24) = a5;
  *(unsigned char *)(a1 + 25) = a6;
  return a1;
}

void *sub_10041C14C(void *a1)
{
  *a1 = off_1009AD330;
  uint64_t v2 = (void *)a1[2];
  if (v2) {
    free(v2);
  }
  return a1;
}

void sub_10041C198(void *a1)
{
  *a1 = off_1009AD330;
  uint64_t v1 = (void *)a1[2];
  if (v1) {
    free(v1);
  }

  operator delete();
}

uint64_t sub_10041C204(uint64_t a1)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009AD300);
  }
  uint64_t v2 = (os_unfair_lock_s *)qword_1009F8410;
  unsigned int v3 = *(unsigned __int16 *)(a1 + 12);
  uint64_t v4 = *(void *)(a1 + 16);
  unsigned int v5 = *(unsigned __int8 *)(a1 + 24);
  int v6 = *(unsigned __int8 *)(a1 + 25);

  return sub_10040F568(v2, 0, v3, v4, v5, v6);
}

uint64_t sub_10041C278(uint64_t a1, char a2, __int16 a3, char a4, unsigned __int8 *a5, unsigned int a6, char a7)
{
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = off_1009AD368;
  *(unsigned char *)(a1 + 10) = a2;
  *(_WORD *)(a1 + 12) = a3;
  *(unsigned char *)(a1 + 14) = a4;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = a6;
  *(unsigned char *)(a1 + 25) = a7;
  if (a5)
  {
    size_t v10 = 16 * a6;
    unsigned int v11 = malloc_type_malloc(v10, 0x105204037B82EA9uLL);
    *(void *)(a1 + 16) = v11;
    memcpy(v11, a5, v10);
    if (a6)
    {
      uint64_t v12 = 0;
      uint64_t v13 = 16 * a6;
      do
      {
        int v14 = a5[v12];
        if (v14 == 7 || v14 == 4)
        {
          uint64_t v16 = (const void **)&a5[v12];
          if (*(void *)&a5[v12 + 8])
          {
            if (*((unsigned char *)v16 + 3))
            {
              *(void *)(*(void *)(a1 + 16) + v12 + 8) = malloc_type_malloc(*((unsigned __int8 *)v16 + 3), 0x100004077774924uLL);
              memcpy(*(void **)(*(void *)(a1 + 16) + v12 + 8), v16[1], *((unsigned __int8 *)v16 + 3));
            }
          }
        }
        v12 += 16;
      }
      while (v13 != v12);
    }
  }
  return a1;
}

void sub_10041C39C(uint64_t a1)
{
  sub_10041C44C(a1);

  operator delete();
}

uint64_t sub_10041C3D4(uint64_t a1)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009AD300);
  }
  uint64_t v2 = (os_unfair_lock_s *)qword_1009F8410;
  unsigned int v3 = *(unsigned __int16 *)(a1 + 12);
  int v4 = *(unsigned __int8 *)(a1 + 14);
  uint64_t v5 = *(void *)(a1 + 16);
  unsigned int v6 = *(unsigned __int8 *)(a1 + 24);
  int v7 = *(unsigned __int8 *)(a1 + 25);

  return sub_10040F9D4(v2, 0, v3, v4, v5, v6, v7);
}

uint64_t sub_10041C44C(uint64_t a1)
{
  *(void *)a1 = off_1009AD368;
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
    if (*(unsigned char *)(a1 + 24))
    {
      uint64_t v4 = 0;
      unint64_t v5 = 0;
      do
      {
        uint64_t v6 = *(void *)(a1 + 16);
        int v7 = *(unsigned __int8 *)(v6 + v4);
        if (v7 == 7 || v7 == 4)
        {
          uint64_t v9 = v6 + v4;
          size_t v10 = *(void **)(v9 + 8);
          if (v10)
          {
            if (*(unsigned char *)(v9 + 3))
            {
              free(v10);
              unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
            }
          }
        }
        ++v5;
        v4 += 16;
      }
      while (v5 < v3);
      uint64_t v2 = *(void **)(a1 + 16);
    }
    free(v2);
  }
  return a1;
}

uint64_t sub_10041C4F4(uint64_t a1, char a2, __int16 a3, char a4, char a5, __int16 a6, unsigned __int8 *a7, unsigned int a8)
{
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = off_1009AD3A0;
  *(unsigned char *)(a1 + 10) = a2;
  *(_WORD *)(a1 + 12) = a3;
  *(unsigned char *)(a1 + 14) = a4;
  *(unsigned char *)(a1 + 15) = a5;
  *(_WORD *)(a1 + 16) = a6;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = a8;
  if (a7)
  {
    size_t v11 = 16 * a8;
    uint64_t v12 = malloc_type_malloc(v11, 0x105204037B82EA9uLL);
    *(void *)(a1 + 24) = v12;
    memcpy(v12, a7, v11);
    if (a8)
    {
      uint64_t v13 = 0;
      uint64_t v14 = 16 * a8;
      do
      {
        int v15 = a7[v13];
        if (v15 == 7 || v15 == 4)
        {
          uint64_t v17 = (const void **)&a7[v13];
          if (*(void *)&a7[v13 + 8])
          {
            if (*((unsigned char *)v17 + 3))
            {
              *(void *)(*(void *)(a1 + 24) + v13 + 8) = malloc_type_malloc(*((unsigned __int8 *)v17 + 3), 0x100004077774924uLL);
              memcpy(*(void **)(*(void *)(a1 + 24) + v13 + 8), v17[1], *((unsigned __int8 *)v17 + 3));
            }
          }
        }
        v13 += 16;
      }
      while (v14 != v13);
    }
  }
  return a1;
}

void sub_10041C61C(uint64_t a1)
{
  sub_10041C6D0(a1);

  operator delete();
}

uint64_t sub_10041C654(uint64_t a1)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009AD300);
  }
  uint64_t v2 = qword_1009F8410;
  unsigned int v3 = *(unsigned __int8 *)(a1 + 10);
  unsigned int v4 = *(unsigned __int16 *)(a1 + 12);
  int v5 = *(unsigned __int8 *)(a1 + 14);
  int v6 = *(unsigned __int8 *)(a1 + 15);
  int v7 = *(unsigned __int16 *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  unsigned int v9 = *(unsigned __int8 *)(a1 + 32);

  return sub_100410044(v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_10041C6D0(uint64_t a1)
{
  *(void *)a1 = off_1009AD3A0;
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
    if (*(unsigned char *)(a1 + 32))
    {
      uint64_t v4 = 0;
      unint64_t v5 = 0;
      do
      {
        uint64_t v6 = *(void *)(a1 + 24);
        int v7 = *(unsigned __int8 *)(v6 + v4);
        if (v7 == 7 || v7 == 4)
        {
          uint64_t v9 = v6 + v4;
          size_t v10 = *(void **)(v9 + 8);
          if (v10)
          {
            if (*(unsigned char *)(v9 + 3))
            {
              free(v10);
              unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
            }
          }
        }
        ++v5;
        v4 += 16;
      }
      while (v5 < v3);
      uint64_t v2 = *(void **)(a1 + 24);
    }
    free(v2);
  }
  return a1;
}

void sub_10041C77C()
{
}

uint64_t sub_10041C790(uint64_t a1)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009AD300);
  }
  uint64_t v2 = (os_unfair_lock_s *)qword_1009F8410;
  unsigned int v3 = *(unsigned __int16 *)(a1 + 12);
  int v4 = *(unsigned __int8 *)(a1 + 15);

  return sub_1004103BC(v2, 0, v3, 0, v4);
}

uint64_t sub_10041C800(uint64_t a1, char a2, __int16 a3, unsigned __int8 *a4, unsigned int a5, char a6)
{
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = off_1009AD410;
  *(unsigned char *)(a1 + 10) = a2;
  *(_WORD *)(a1 + 12) = a3;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = a5;
  *(unsigned char *)(a1 + 25) = a6;
  if (a4)
  {
    size_t v9 = 16 * a5;
    size_t v10 = malloc_type_malloc(v9, 0x105204037B82EA9uLL);
    *(void *)(a1 + 16) = v10;
    memcpy(v10, a4, v9);
    if (a5)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 16 * a5;
      do
      {
        int v13 = a4[v11];
        if (v13 == 7 || v13 == 4)
        {
          int v15 = (const void **)&a4[v11];
          if (*(void *)&a4[v11 + 8])
          {
            if (*((unsigned char *)v15 + 3))
            {
              *(void *)(*(void *)(a1 + 16) + v11 + 8) = malloc_type_malloc(*((unsigned __int8 *)v15 + 3), 0x100004077774924uLL);
              memcpy(*(void **)(*(void *)(a1 + 16) + v11 + 8), v15[1], *((unsigned __int8 *)v15 + 3));
            }
          }
        }
        v11 += 16;
      }
      while (v12 != v11);
    }
  }
  return a1;
}

void sub_10041C920(uint64_t a1)
{
  sub_10041C9C8(a1);

  operator delete();
}

uint64_t sub_10041C958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009AD300);
  }
  uint64_t v5 = qword_1009F8410;
  unsigned int v6 = *(unsigned __int16 *)(a1 + 12);
  int v7 = *(unsigned __int8 *)(a1 + 25);

  return sub_100410734(v5, 0, v6, a4, 0, v7);
}

uint64_t sub_10041C9C8(uint64_t a1)
{
  *(void *)a1 = off_1009AD410;
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
    if (*(unsigned char *)(a1 + 24))
    {
      uint64_t v4 = 0;
      unint64_t v5 = 0;
      do
      {
        uint64_t v6 = *(void *)(a1 + 16);
        int v7 = *(unsigned __int8 *)(v6 + v4);
        if (v7 == 7 || v7 == 4)
        {
          uint64_t v9 = v6 + v4;
          size_t v10 = *(void **)(v9 + 8);
          if (v10)
          {
            if (*(unsigned char *)(v9 + 3))
            {
              free(v10);
              unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
            }
          }
        }
        ++v5;
        v4 += 16;
      }
      while (v5 < v3);
      uint64_t v2 = *(void **)(a1 + 16);
    }
    free(v2);
  }
  return a1;
}

void sub_10041CA74()
{
}

uint64_t sub_10041CA88(uint64_t a1)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009AD300);
  }
  uint64_t v2 = (os_unfair_lock_s *)qword_1009F8410;
  int v3 = *(unsigned __int16 *)(a1 + 12);
  int v4 = *(unsigned __int16 *)(a1 + 14);
  int v5 = *(unsigned __int8 *)(a1 + 16);

  return sub_100410C90(v2, 0, v3, v4, v5);
}

void sub_10041CAFC()
{
}

uint64_t sub_10041CB10(uint64_t a1)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009AD300);
  }
  uint64_t v2 = qword_1009F8410;
  unsigned int v3 = *(unsigned __int8 *)(a1 + 10);
  int v4 = *(unsigned __int16 *)(a1 + 12);

  return sub_100410A5C(v2, v3, v4);
}

void sub_10041CB7C()
{
}

uint64_t sub_10041CB90(uint64_t a1)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009AD300);
  }
  uint64_t v2 = qword_1009F8410;
  unsigned int v3 = *(unsigned __int8 *)(a1 + 10);
  int v4 = *(unsigned __int16 *)(a1 + 12);

  return sub_100412AE8(v2, v3, v4);
}

void sub_10041CBFC()
{
}

uint64_t sub_10041CC10()
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009AD300);
  }
  uint64_t v0 = qword_1009F8410;

  return sub_100412CE4(v0);
}

uint64_t sub_10041CC70(uint64_t a1, char a2, const void *a3, unsigned int a4)
{
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = off_1009AD528;
  *(unsigned char *)(a1 + 10) = a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = a4;
  if (a3 && a4)
  {
    size_t v6 = 2 * a4;
    int v7 = malloc_type_malloc(v6, 0x1000040BDFB0063uLL);
    *(void *)(a1 + 16) = v7;
    memcpy(v7, a3, v6);
  }
  return a1;
}

void *sub_10041CD04(void *a1)
{
  *a1 = off_1009AD528;
  uint64_t v2 = (void *)a1[2];
  if (v2) {
    free(v2);
  }
  return a1;
}

void sub_10041CD50(void *a1)
{
  *a1 = off_1009AD528;
  uint64_t v1 = (void *)a1[2];
  if (v1) {
    free(v1);
  }

  operator delete();
}

uint64_t sub_10041CDBC(uint64_t a1)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009AD300);
  }
  uint64_t v2 = qword_1009F8410;
  unsigned int v3 = *(unsigned __int8 *)(a1 + 10);
  int v4 = *(__int16 **)(a1 + 16);
  unsigned int v5 = *(unsigned __int8 *)(a1 + 24);

  return sub_100411768(v2, v3, v4, v5);
}

uint64_t sub_10041CE28(uint64_t a1, char a2, const void *a3, unsigned int a4, __int16 a5, char a6)
{
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = off_1009AD560;
  *(unsigned char *)(a1 + 10) = a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 26) = a5;
  *(unsigned char *)(a1 + 28) = a6;
  if (a3 && a4)
  {
    size_t v8 = 2 * a4;
    uint64_t v9 = malloc_type_malloc(v8, 0x1000040BDFB0063uLL);
    *(void *)(a1 + 16) = v9;
    memcpy(v9, a3, v8);
  }
  return a1;
}

void *sub_10041CEC4(void *a1)
{
  *a1 = off_1009AD560;
  uint64_t v2 = (void *)a1[2];
  if (v2) {
    free(v2);
  }
  return a1;
}

void sub_10041CF10(void *a1)
{
  *a1 = off_1009AD560;
  uint64_t v1 = (void *)a1[2];
  if (v1) {
    free(v1);
  }

  operator delete();
}

uint64_t sub_10041CF7C(uint64_t a1)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009AD300);
  }
  uint64_t v2 = (os_unfair_lock_s *)qword_1009F8410;
  unsigned int v3 = *(unsigned __int16 **)(a1 + 16);
  int v4 = *(unsigned __int8 *)(a1 + 24);
  int v5 = *(unsigned __int8 *)(a1 + 28);

  return sub_100411B9C(v2, 0, v3, v4, 0, v5);
}

uint64_t sub_10041CFF0(uint64_t a1, char a2, const void *a3, unsigned int a4)
{
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = off_1009AD598;
  *(unsigned char *)(a1 + 10) = a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = a4;
  if (a3 && a4)
  {
    size_t v6 = 2 * a4;
    int v7 = malloc_type_malloc(v6, 0x1000040BDFB0063uLL);
    *(void *)(a1 + 16) = v7;
    memcpy(v7, a3, v6);
  }
  return a1;
}

void *sub_10041D084(void *a1)
{
  *a1 = off_1009AD598;
  uint64_t v2 = (void *)a1[2];
  if (v2) {
    free(v2);
  }
  return a1;
}

void sub_10041D0D0(void *a1)
{
  *a1 = off_1009AD598;
  uint64_t v1 = (void *)a1[2];
  if (v1) {
    free(v1);
  }

  operator delete();
}

uint64_t sub_10041D13C(uint64_t a1)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009AD300);
  }
  uint64_t v2 = qword_1009F8410;
  unsigned int v3 = *(unsigned __int8 *)(a1 + 10);
  int v4 = *(__int16 **)(a1 + 16);
  unsigned int v5 = *(unsigned __int8 *)(a1 + 24);

  return sub_100411FA4(v2, v3, v4, v5);
}

uint64_t sub_10041D1A8(uint64_t a1, char a2, const void *a3, unsigned int a4, __int16 a5, char a6)
{
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = off_1009AD5D0;
  *(unsigned char *)(a1 + 10) = a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 26) = a5;
  *(unsigned char *)(a1 + 28) = a6;
  if (a3 && a4)
  {
    size_t v8 = 2 * a4;
    uint64_t v9 = malloc_type_malloc(v8, 0x1000040BDFB0063uLL);
    *(void *)(a1 + 16) = v9;
    memcpy(v9, a3, v8);
  }
  return a1;
}

void *sub_10041D244(void *a1)
{
  *a1 = off_1009AD5D0;
  uint64_t v2 = (void *)a1[2];
  if (v2) {
    free(v2);
  }
  return a1;
}

void sub_10041D290(void *a1)
{
  *a1 = off_1009AD5D0;
  uint64_t v1 = (void *)a1[2];
  if (v1) {
    free(v1);
  }

  operator delete();
}

uint64_t sub_10041D2FC(uint64_t a1)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009AD300);
  }
  uint64_t v2 = (os_unfair_lock_s *)qword_1009F8410;
  unsigned int v3 = *(unsigned __int16 **)(a1 + 16);
  int v4 = *(unsigned __int8 *)(a1 + 24);
  int v5 = *(unsigned __int8 *)(a1 + 28);

  return sub_100412248(v2, 0, v3, v4, 0, v5);
}

uint64_t sub_10041D370(uint64_t a1, char a2, const void *a3, unsigned int a4, __int16 a5, char a6)
{
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = off_1009AD608;
  *(unsigned char *)(a1 + 10) = a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 26) = a5;
  *(unsigned char *)(a1 + 28) = a6;
  if (a3 && a4)
  {
    size_t v8 = 2 * a4;
    uint64_t v9 = malloc_type_malloc(v8, 0x1000040BDFB0063uLL);
    *(void *)(a1 + 16) = v9;
    memcpy(v9, a3, v8);
  }
  return a1;
}

void *sub_10041D40C(void *a1)
{
  *a1 = off_1009AD608;
  uint64_t v2 = (void *)a1[2];
  if (v2) {
    free(v2);
  }
  return a1;
}

void sub_10041D458(void *a1)
{
  *a1 = off_1009AD608;
  uint64_t v1 = (void *)a1[2];
  if (v1) {
    free(v1);
  }

  operator delete();
}

uint64_t sub_10041D4C4(uint64_t a1)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009AD300);
  }
  uint64_t v2 = (os_unfair_lock_s *)qword_1009F8410;
  unsigned int v3 = *(unsigned __int16 **)(a1 + 16);
  int v4 = *(unsigned __int8 *)(a1 + 24);
  int v5 = *(unsigned __int8 *)(a1 + 28);

  return sub_100412634(v2, 0, v3, v4, 0, v5);
}

uint64_t sub_10041D538(uint64_t a1, char a2, __int16 a3, unsigned __int8 *a4, unsigned int a5)
{
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = off_1009AD640;
  *(unsigned char *)(a1 + 10) = a2;
  *(_WORD *)(a1 + 12) = a3;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = a5;
  if (a4)
  {
    size_t v8 = 16 * a5;
    uint64_t v9 = malloc_type_malloc(v8, 0x105204037B82EA9uLL);
    *(void *)(a1 + 16) = v9;
    memcpy(v9, a4, v8);
    if (a5)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 16 * a5;
      do
      {
        int v12 = a4[v10];
        if (v12 == 7 || v12 == 4)
        {
          uint64_t v14 = (const void **)&a4[v10];
          if (*(void *)&a4[v10 + 8])
          {
            if (*((unsigned char *)v14 + 3))
            {
              *(void *)(*(void *)(a1 + 16) + v10 + 8) = malloc_type_malloc(*((unsigned __int8 *)v14 + 3), 0x100004077774924uLL);
              memcpy(*(void **)(*(void *)(a1 + 16) + v10 + 8), v14[1], *((unsigned __int8 *)v14 + 3));
            }
          }
        }
        v10 += 16;
      }
      while (v11 != v10);
    }
  }
  return a1;
}

void sub_10041D654(uint64_t a1)
{
  sub_10041D6F8(a1);

  operator delete();
}

uint64_t sub_10041D68C(uint64_t a1)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009AD300);
  }
  uint64_t v2 = qword_1009F8410;
  unsigned int v3 = *(unsigned __int8 *)(a1 + 10);
  int v4 = *(unsigned __int16 *)(a1 + 12);

  return sub_10041281C(v2, v3, v4);
}

uint64_t sub_10041D6F8(uint64_t a1)
{
  *(void *)a1 = off_1009AD640;
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
    if (*(unsigned char *)(a1 + 24))
    {
      uint64_t v4 = 0;
      unint64_t v5 = 0;
      do
      {
        uint64_t v6 = *(void *)(a1 + 16);
        int v7 = *(unsigned __int8 *)(v6 + v4);
        if (v7 == 7 || v7 == 4)
        {
          uint64_t v9 = v6 + v4;
          uint64_t v10 = *(void **)(v9 + 8);
          if (v10)
          {
            if (*(unsigned char *)(v9 + 3))
            {
              free(v10);
              unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
            }
          }
        }
        ++v5;
        v4 += 16;
      }
      while (v5 < v3);
      uint64_t v2 = *(void **)(a1 + 16);
    }
    free(v2);
  }
  return a1;
}

void sub_10041D7A4()
{
}

uint64_t sub_10041D7B8(uint64_t a1)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009AD300);
  }
  uint64_t v2 = qword_1009F8410;
  __int16 v3 = *(_WORD *)(a1 + 12);

  return sub_100412A14(v2, 0, v3);
}

uint64_t sub_10041D828(uint64_t a1, char a2, __int16 a3, const void *a4, size_t size)
{
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = off_1009AD6B0;
  *(unsigned char *)(a1 + 10) = a2;
  *(_WORD *)(a1 + 12) = a3;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = size;
  if (a4 && size)
  {
    size_t v7 = size;
    size_t v8 = malloc_type_malloc(size, 0x100004077774924uLL);
    *(void *)(a1 + 16) = v8;
    memcpy(v8, a4, v7);
  }
  return a1;
}

void *sub_10041D8C0(void *a1)
{
  *a1 = off_1009AD6B0;
  uint64_t v2 = (void *)a1[2];
  if (v2) {
    free(v2);
  }
  return a1;
}

void sub_10041D90C(void *a1)
{
  *a1 = off_1009AD6B0;
  uint64_t v1 = (void *)a1[2];
  if (v1) {
    free(v1);
  }

  operator delete();
}

uint64_t sub_10041D978(uint64_t a1)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009AD300);
  }
  uint64_t v2 = qword_1009F8410;
  unsigned int v3 = *(unsigned __int8 *)(a1 + 10);
  __int16 v4 = *(_WORD *)(a1 + 12);
  unint64_t v5 = *(const void **)(a1 + 16);
  unsigned int v6 = *(unsigned __int16 *)(a1 + 24);

  return sub_1004115B0(v2, v3, v4, v5, v6);
}

uint64_t sub_10041D9E8(uint64_t a1, char a2, __int16 a3, const void *a4, size_t size, char a6)
{
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = off_1009AD6E8;
  *(unsigned char *)(a1 + 10) = a2;
  *(_WORD *)(a1 + 12) = a3;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = size;
  *(unsigned char *)(a1 + 26) = a6;
  if (a4 && size)
  {
    size_t v8 = size;
    uint64_t v9 = malloc_type_malloc(size, 0x100004077774924uLL);
    *(void *)(a1 + 16) = v9;
    memcpy(v9, a4, v8);
  }
  return a1;
}

void *sub_10041DA84(void *a1)
{
  *a1 = off_1009AD6E8;
  uint64_t v2 = (void *)a1[2];
  if (v2) {
    free(v2);
  }
  return a1;
}

void sub_10041DAD0(void *a1)
{
  *a1 = off_1009AD6E8;
  uint64_t v1 = (void *)a1[2];
  if (v1) {
    free(v1);
  }

  operator delete();
}

uint64_t sub_10041DB3C(uint64_t a1)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009AD300);
  }
  uint64_t v2 = qword_1009F8410;
  __int16 v3 = *(_WORD *)(a1 + 12);

  return sub_100411694(v2, 0, v3);
}

void sub_10041DBB0()
{
}

uint64_t sub_10041DBC4(uint64_t a1)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009AD300);
  }
  uint64_t v2 = (os_unfair_lock_s *)qword_1009F8410;
  unsigned int v3 = *(unsigned __int8 *)(a1 + 10);
  int v4 = *(unsigned __int16 *)(a1 + 12);

  return sub_100412D68(v2, v3, v4);
}

void sub_10041DC30()
{
}

uint64_t sub_10041DC44(uint64_t a1)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009AD300);
  }
  uint64_t v2 = qword_1009F8410;
  int v3 = *(unsigned __int16 *)(a1 + 12);

  return sub_100412F50(v2, 0, v3);
}

uint64_t sub_10041DCB0(uint64_t a1, char a2, __int16 a3, char a4, unsigned __int8 *a5, unsigned int a6, char a7)
{
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = off_1009AD790;
  *(unsigned char *)(a1 + 10) = a2;
  *(_WORD *)(a1 + 12) = a3;
  *(unsigned char *)(a1 + 14) = a4;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = a6;
  *(unsigned char *)(a1 + 25) = a7;
  if (a5)
  {
    size_t v10 = 16 * a6;
    uint64_t v11 = malloc_type_malloc(v10, 0x105204037B82EA9uLL);
    *(void *)(a1 + 16) = v11;
    memcpy(v11, a5, v10);
    if (a6)
    {
      uint64_t v12 = 0;
      uint64_t v13 = 16 * a6;
      do
      {
        int v14 = a5[v12];
        if (v14 == 7 || v14 == 4)
        {
          uint64_t v16 = (const void **)&a5[v12];
          if (*(void *)&a5[v12 + 8])
          {
            if (*((unsigned char *)v16 + 3))
            {
              *(void *)(*(void *)(a1 + 16) + v12 + 8) = malloc_type_malloc(*((unsigned __int8 *)v16 + 3), 0x100004077774924uLL);
              memcpy(*(void **)(*(void *)(a1 + 16) + v12 + 8), v16[1], *((unsigned __int8 *)v16 + 3));
            }
          }
        }
        v12 += 16;
      }
      while (v13 != v12);
    }
  }
  return a1;
}

void sub_10041DDD4(uint64_t a1)
{
  sub_10041DE84(a1);

  operator delete();
}

uint64_t sub_10041DE0C(uint64_t a1)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009AD300);
  }
  uint64_t v2 = (os_unfair_lock_s *)qword_1009F8410;
  unsigned int v3 = *(unsigned __int16 *)(a1 + 12);
  int v4 = *(unsigned __int8 *)(a1 + 14);
  uint64_t v5 = *(void *)(a1 + 16);
  unsigned int v6 = *(unsigned __int8 *)(a1 + 24);
  int v7 = *(unsigned __int8 *)(a1 + 25);

  return sub_100413070(v2, 0, v3, v4, v5, v6, v7);
}

uint64_t sub_10041DE84(uint64_t a1)
{
  *(void *)a1 = off_1009AD790;
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
    if (*(unsigned char *)(a1 + 24))
    {
      uint64_t v4 = 0;
      unint64_t v5 = 0;
      do
      {
        uint64_t v6 = *(void *)(a1 + 16);
        int v7 = *(unsigned __int8 *)(v6 + v4);
        if (v7 == 7 || v7 == 4)
        {
          uint64_t v9 = v6 + v4;
          size_t v10 = *(void **)(v9 + 8);
          if (v10)
          {
            if (*(unsigned char *)(v9 + 3))
            {
              free(v10);
              unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
            }
          }
        }
        ++v5;
        v4 += 16;
      }
      while (v5 < v3);
      uint64_t v2 = *(void **)(a1 + 16);
    }
    free(v2);
  }
  return a1;
}

void sub_10041DF30()
{
}

uint64_t sub_10041DF44(uint64_t a1)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009AD300);
  }
  uint64_t v2 = qword_1009F8410;
  int v3 = *(unsigned __int16 *)(a1 + 12);
  unsigned int v4 = *(unsigned __int8 *)(a1 + 10);
  int v5 = *(unsigned __int16 *)(a1 + 14);

  return sub_100413428(v2, v3, v4, v5);
}

void sub_10041DFB0(uint64_t a1)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009AD300);
  }
  uint64_t v2 = qword_1009F8410;
  unsigned int v3 = *(unsigned __int16 *)(a1 + 32);

  sub_100413E70(v2, v3);
}

unsigned char *sub_10041E014(uint64_t a1)
{
  __int16 v7 = 0;
  int v6 = 0;
  char v5 = 0;
  sub_10001B8E0(&v5);
  int v2 = sub_10017E37C(*(void *)(a1 + 32), (uint64_t)&v6);
  sub_10001B910(&v5);
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
      sub_1007666F4();
    }
  }
  else
  {
    if (qword_1009F8418 != -1) {
      dispatch_once(&qword_1009F8418, &stru_1009AD300);
    }
    sub_100413CC8(qword_1009F8410, *(_DWORD *)(a1 + 48), v3, *(_DWORD *)(a1 + 52), *(unsigned __int16 *)(a1 + 56), *(void *)(a1 + 40));
  }
  return sub_10001B8AC(&v5);
}

void sub_10041E0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_10041E0F0(uint64_t a1)
{
  *(_OWORD *)(a1 + 60) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  sub_10004191C((void *)(a1 + 80), "");
  sub_10004191C((void *)(a1 + 104), "");
  sub_10004191C((void *)(a1 + 128), "");
  sub_10004191C((void *)(a1 + 152), "");
  return a1;
}

void sub_10041E17C(_Unwind_Exception *exception_object)
{
  if (v2[151] < 0) {
    operator delete(*v4);
  }
  if (v2[127] < 0) {
    operator delete(*v3);
  }
  if (v2[103] < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10041E1C8(id a1)
{
}

void sub_10041E20C()
{
}

void sub_10041E230(id a1)
{
}

void sub_10041E274()
{
}

void sub_10041E298(id a1)
{
}

void sub_10041E428()
{
}

void sub_10041E44C(id a1)
{
}

void sub_10041E490()
{
}

void sub_10041E4B4(id a1)
{
}

void sub_10041E4F8()
{
}

void sub_10041E51C(id a1)
{
}

void sub_10041E560()
{
}

void sub_10041E584(id a1)
{
}

void sub_10041E5C8()
{
}

void sub_10041E5EC(id a1)
{
}

void sub_10041E630()
{
}

void sub_10041E654(id a1)
{
}

void sub_10041E698(id a1)
{
}

void sub_10041E6DC()
{
}

void sub_10041E700(id a1)
{
}

void sub_10041E744()
{
}

void sub_10041E768(id a1)
{
}

void sub_10041E7AC()
{
}

void sub_10041E7D0(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_error_impl(a1, a4, OS_LOG_TYPE_ERROR, a2, a3, 0x12u);
}

uint64_t sub_10041E7EC(uint64_t result, int a2, float a3)
{
  *(float *)uint64_t result = a3;
  *(_DWORD *)(result + 4) = a2;
  *(_WORD *)(result + 8) = 2082;
  return result;
}

void sub_10041E800(float a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (v5 >= 0) {
    int v6 = a3;
  }
  else {
    int v6 = (void *)*a3;
  }
  *(float *)a4 = a1;
  *(_DWORD *)(a4 + 4) = v4;
  *(_WORD *)(a4 + 8) = 2082;
  *(void *)(a4 + 10) = v6;
}

uint64_t sub_10041E850(uint64_t a1)
{
  uint64_t v2 = a1 + 24;
  *(void *)a1 = off_1009AD9A0;
  *(void *)(a1 + 8) = off_1009AD9F8;
  *(void *)(a1 + 16) = off_1009ADA20;
  *(void *)(a1 + 24) = off_1009ADA50;
  *(unsigned char *)(a1 + 32) = 0;
  sub_100052DA8(a1 + 40);
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 256) = a1 + 264;
  *(void *)(a1 + 232) = a1 + 240;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 280) = a1 + 288;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(void *)(a1 + 384) = a1 + 392;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = a1 + 416;
  *(void *)(a1 + 520) = 0;
  *(void *)(a1 + 528) = 0;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(unsigned char *)(a1 + 480) = 0;
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = a1 + 520;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 536) = a1 + 544;
  int v62 = 0;
  long long v61 = xmmword_1007BA618;
  sub_100035F98(&v63, (__n128 *)&v61);
  sub_100045F18((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  long long v59 = xmmword_1007BA5A0;
  int v60 = 0;
  sub_100035F98(&v63, (__n128 *)&v59);
  sub_100045F18((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  long long v57 = xmmword_1007BA5B4;
  int v58 = 0;
  sub_100035F98(&v63, (__n128 *)&v57);
  sub_100045F18((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  long long v55 = xmmword_1007BA730;
  int v56 = 0;
  sub_100035F98(&v63, (__n128 *)&v55);
  sub_100045F18((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  long long v53 = xmmword_1007BA71C;
  int v54 = 0;
  sub_100035F98(&v63, (__n128 *)&v53);
  sub_100045F18((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  long long v51 = xmmword_1007BA6F4;
  int v52 = 0;
  sub_100035F98(&v63, (__n128 *)&v51);
  sub_100045F18((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  long long v49 = xmmword_1007BA758;
  int v50 = 0;
  sub_100035F98(&v63, (__n128 *)&v49);
  sub_100045F18((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  long long v47 = xmmword_1007BA76C;
  int v48 = -805294830;
  sub_100035F98(&v63, (__n128 *)&v47);
  sub_100045F18((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  long long v45 = xmmword_1007BA780;
  int v46 = -587704915;
  sub_100035F98(&v63, (__n128 *)&v45);
  sub_100045F18((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  long long v43 = xmmword_1007BA794;
  int v44 = -1765695659;
  sub_100035F98(&v63, (__n128 *)&v43);
  sub_100045F18((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  long long v41 = xmmword_1007BA7A8;
  int v42 = -601477452;
  sub_100035F98(&v63, (__n128 *)&v41);
  sub_100045F18((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  long long v39 = xmmword_1007BA888;
  int v40 = 1880579407;
  sub_100035F98(&v63, (__n128 *)&v39);
  sub_100045F18((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  long long v37 = xmmword_1007BA7BC;
  int v38 = -1171415960;
  sub_100035F98(&v63, (__n128 *)&v37);
  sub_100045F18((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  long long v35 = xmmword_1007BA8C4;
  int v36 = -815610143;
  sub_100035F98(&v63, (__n128 *)&v35);
  sub_100045F18((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  long long v33 = xmmword_1007BA8D8;
  int v34 = 1323364242;
  sub_100035F98(&v63, (__n128 *)&v33);
  sub_100045F18((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  long long v31 = xmmword_1007BA8EC;
  int v32 = 0;
  sub_100035F98(&v63, (__n128 *)&v31);
  sub_100045F18((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  long long v29 = xmmword_1007BA744;
  int v30 = 0;
  sub_100035F98(&v63, (__n128 *)&v29);
  sub_100045F18((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  long long v27 = xmmword_1007BA820;
  int v28 = 0;
  sub_100035F98(&v63, (__n128 *)&v27);
  sub_100045F18((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  long long v25 = xmmword_1007BA834;
  int v26 = 1729713604;
  sub_100035F98(&v63, (__n128 *)&v25);
  sub_100045F18((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  long long v23 = xmmword_1007BA914;
  int v24 = 0;
  sub_100035F98(&v63, (__n128 *)&v23);
  sub_100045F18((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  long long v21 = xmmword_1007BA80C;
  int v22 = 0;
  sub_100035F98(&v63, (__n128 *)&v21);
  v20.n128_u64[0] = (unint64_t)&v63;
  uint64_t v3 = (uint64_t **)sub_10042C788((uint64_t **)(a1 + 280), (unsigned __int8 *)&v63, (uint64_t)&unk_1007BE9D0, &v20);
  long long v18 = xmmword_1007BA89C;
  int v19 = 295542594;
  sub_100035F98(&v20, (__n128 *)&v18);
  sub_100045F18(v3 + 7, (unsigned __int8 *)&v20, (uint64_t)&v20);
  long long v16 = xmmword_1007BA80C;
  int v17 = 0;
  sub_100035F98(&v63, (__n128 *)&v16);
  v20.n128_u64[0] = (unint64_t)&v63;
  int v4 = (uint64_t **)sub_10042C788((uint64_t **)(a1 + 280), (unsigned __int8 *)&v63, (uint64_t)&unk_1007BE9D0, &v20);
  long long v14 = xmmword_1007BA8B0;
  int v15 = 312319810;
  sub_100035F98(&v20, (__n128 *)&v14);
  sub_100045F18(v4 + 7, (unsigned __int8 *)&v20, (uint64_t)&v20);
  uint64_t v5 = sub_10003FFD4();
  sub_10042AE74(v5 + 208, v2);
  uint64_t v6 = sub_10003FFD4();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, a1 + 304);
  uint64_t v7 = +[NSMutableSet set];
  size_t v8 = *(void **)(a1 + 488);
  *(void *)(a1 + 488) = v7;

  uint64_t v9 = +[NSMutableSet set];
  size_t v10 = *(void **)(a1 + 496);
  *(void *)(a1 + 496) = v9;

  id v11 = [objc_alloc((Class)NSMapTable) initWithKeyOptions:0x10000 valueOptions:256 capacity:0];
  uint64_t v12 = *(void **)(a1 + 504);
  *(void *)(a1 + 504) = v11;

  return a1;
}

void sub_10041EF94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  sub_1000486F0(v16 + 296, *(void **)(v11 + 544));
  sub_10042C728(v16 + 272, *(char **)(v11 + 520));

  int v19 = (void **)(v16 + 96);
  sub_10042C680((void *)(v16 + 192));
  sub_10042C61C(v16 + 168, *(void **)(v11 + 416));
  sub_1000486F0(v16 + 144, *(void **)(v11 + 392));
  __n128 v20 = *(void **)(v11 + 360);
  if (v20)
  {
    *(void *)(v11 + 368) = v20;
    operator delete(v20);
  }
  long long v21 = *v19;
  if (*v19)
  {
    *(void *)(v11 + 344) = v21;
    operator delete(v21);
  }
  if (*(char *)(v11 + 327) < 0) {
    operator delete(*v15);
  }
  sub_10042C5BC(v14, *v12);
  sub_1000486F0(a10, *v17);
  sub_1000486F0(v13, *(void **)v16);
  sub_100052DA4(a11);
  _Unwind_Resume(a1);
}

void sub_10041F0D4()
{
  char v11 = 0;
  uint64_t v0 = sub_100017768();
  sub_10004191C(buf, "GATT");
  sub_10004191C(&__p, "DUMMY_DIS");
  int v1 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v0 + 72))(v0, buf, &__p, &v11);
  if (v11) {
    int v2 = v1;
  }
  else {
    int v2 = 0;
  }
  if (v7 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v3 = qword_100A19E88;
  BOOL v4 = os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Warning: Creating Dumy DIS entry, with dummy data", buf, 2u);
    }
    operator new();
  }
  if (v4)
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Creating real DIS entry", buf, 2u);
  }
  *(void *)std::string buf = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v5 = (void (***)(void, uint8_t *))sub_100035F54();
  (**v5)(v5, buf);
  operator new();
}

void sub_100420590(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
}

void sub_100420830(void *a1, uint64_t a2)
{
  unint64_t v6 = a1[19];
  uint64_t v4 = (uint64_t)(a1 + 19);
  unint64_t v5 = v6;
  char v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = a1[17];
    uint64_t v10 = ((uint64_t)v7 - v9) >> 3;
    if ((unint64_t)(v10 + 1) >> 61) {
      abort();
    }
    uint64_t v11 = v5 - v9;
    uint64_t v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13) {
      uint64_t v14 = (char *)sub_1000405F8(v4, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    int v15 = &v14[8 * v10];
    uint64_t v16 = &v14[8 * v13];
    *(void *)int v15 = a2;
    size_t v8 = v15 + 8;
    long long v18 = (char *)a1[17];
    int v17 = (char *)a1[18];
    if (v17 != v18)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      int v17 = (char *)a1[17];
    }
    a1[17] = v15;
    a1[18] = v8;
    a1[19] = v16;
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    *char v7 = a2;
    size_t v8 = v7 + 1;
  }
  a1[18] = v8;
}

void sub_100420904(void **a1, void *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  char v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((char *)v7 - (unsigned char *)*a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      abort();
    }
    uint64_t v10 = v5 - (void)*a1;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      unint64_t v13 = (char *)sub_1000405F8(v4, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    int v15 = &v13[8 * v12];
    *(void *)uint64_t v14 = *a2;
    size_t v8 = v14 + 8;
    int v17 = (char *)*a1;
    uint64_t v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      uint64_t v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *char v7 = *a2;
    size_t v8 = v7 + 1;
  }
  a1[1] = v8;
}

void sub_1004209E0(uint64_t a1)
{
  if (qword_1009FB240 != -1) {
    dispatch_once(&qword_1009FB240, &stru_1009ADD38);
  }
  sub_1004C0E38(qword_1009FB238, a1);
  if (qword_1009F7ED0 != -1) {
    dispatch_once(&qword_1009F7ED0, &stru_1009ADD58);
  }
  sub_100708564((void *)qword_1009F7EC8, a1 + 8);
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009ADD78);
  }
  sub_10026B36C((uint64_t)off_1009F8068 + 64, a1 + 16);
  operator new();
}

void sub_100421248()
{
}

void sub_100421324(void *a1, uint64_t a2)
{
  unint64_t v6 = a1[15];
  uint64_t v4 = (uint64_t)(a1 + 15);
  unint64_t v5 = v6;
  char v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = a1[13];
    uint64_t v10 = ((uint64_t)v7 - v9) >> 3;
    if ((unint64_t)(v10 + 1) >> 61) {
      abort();
    }
    uint64_t v11 = v5 - v9;
    uint64_t v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13) {
      uint64_t v14 = (char *)sub_1000405F8(v4, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    int v15 = &v14[8 * v10];
    uint64_t v16 = &v14[8 * v13];
    *(void *)int v15 = a2;
    size_t v8 = v15 + 8;
    uint64_t v18 = (char *)a1[13];
    int v17 = (char *)a1[14];
    if (v17 != v18)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      int v17 = (char *)a1[13];
    }
    a1[13] = v15;
    a1[14] = v8;
    a1[15] = v16;
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    *char v7 = a2;
    size_t v8 = v7 + 1;
  }
  a1[14] = v8;
}

unsigned char *sub_1004213F8(uint64_t a1)
{
  char v42 = 0;
  sub_10001B8E0(&v42);
  if (sub_10022A2F0())
  {
    if (sub_100230760())
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
        sub_100766A94();
      }
    }
    else
    {
      v40[0] = *(_OWORD *)off_1009ADA58;
      v40[1] = *(_OWORD *)off_1009ADA68;
      v40[2] = *(_OWORD *)off_1009ADA78;
      long long v41 = sub_10042200C;
      sub_100212500((uint64_t)v40);
      sub_10001B910(&v42);
      v39[0] = 0;
      v39[1] = 0;
      sub_10003AED0((uint64_t)v39, a1 + 40);
      std::string __p = 0;
      long long v37 = 0;
      uint64_t v38 = 0;
      sub_100040550(&__p, a1 + 360);
      *(void *)(a1 + 368) = *(void *)(a1 + 360);
      *(unsigned char *)(a1 + 32) = 1;
      int v2 = (uint64_t *)__p;
      if (__p != v37)
      {
        unsigned __int16 v3 = 0;
        unsigned __int16 v4 = 0;
        while (1)
        {
          uint64_t v5 = *v2;
          if (sub_10042209C(a1, *v2, 0))
          {
            uint64_t v6 = *(void *)(a1 + 112);
            if (v5 == v6 || v5 == *(void *)(a1 + 128))
            {
              int v28 = qword_100A19E88;
              if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
                sub_100766A0C(v5 == v6, v28, v29);
              }
              *(unsigned char *)(a1 + 32) = 0;
              goto LABEL_74;
            }
            char v7 = qword_100A19E88;
            if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
            {
              sub_100613B58((void *)v5, &src);
              size_t v8 = (src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                 ? &src
                 : (std::string *)src.__r_.__value_.__r.__words[0];
              LODWORD(buf) = 136446210;
              *(void *)((char *)&buf + 4) = v8;
              _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to publish service %{public}s!", (uint8_t *)&buf, 0xCu);
              if (SHIBYTE(src.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(src.__r_.__value_.__l.__data_);
              }
            }
          }
          else if (v2 == __p)
          {
            unsigned __int16 v3 = **(_WORD **)(v5 + 8);
          }
          else
          {
            unsigned __int16 v4 = *(_WORD *)(v5 + 48);
          }
          if (++v2 == v37) {
            goto LABEL_22;
          }
        }
      }
      unsigned __int16 v4 = 0;
      unsigned __int16 v3 = 0;
LABEL_22:
      char v35 = 0;
      uint64_t v9 = sub_100017768();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 8))(v9))
      {
        uint64_t v10 = sub_100017768();
        sub_10004191C(&src, "CATT");
        sub_10004191C(&buf, "DisableSdp");
        (*(void (**)(uint64_t, std::string *, long long *, char *))(*(void *)v10 + 72))(v10, &src, &buf, &v35);
        if (v50 < 0) {
          operator delete((void *)buf);
        }
        if (SHIBYTE(src.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(src.__r_.__value_.__l.__data_);
        }
      }
      if (!v35)
      {
        sub_1002B804C(&v42);
        sub_10010E210(v3, v4);
        sub_10001B910(&v42);
      }
      if (*(unsigned __int16 *)(*(void *)(a1 + 128) + 48) <= *(unsigned __int16 *)(*(void *)(a1 + 112) + 48)
        && os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT))
      {
        sub_1007669CC();
      }
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      if (qword_1009F7ED0 != -1) {
        dispatch_once(&qword_1009F7ED0, &stru_1009ADD58);
      }
      uint64_t v11 = sub_10070CA20(qword_1009F7EC8);
      id v12 = [v11 countByEnumeratingWithState:&v31 objects:v47 count:16];
      if (v12)
      {
        uint64_t v13 = *(void *)v32;
        do
        {
          uint64_t v14 = 0;
          do
          {
            if (*(void *)v32 != v13) {
              objc_enumerationMutation(v11);
            }
            int v15 = *(void **)(*((void *)&v31 + 1) + 8 * (void)v14);
            if (qword_1009F7EE0 != -1) {
              dispatch_once(&qword_1009F7EE0, &stru_1009ADD98);
            }
            if (sub_1006BC404((uint64_t)off_1009F7ED8, v15))
            {
              memset(&src, 0, 20);
              sub_1000305AC(&src, v15);
              LOWORD(src.__r_.__value_.__r.__words[2]) = *(_WORD *)(*(void *)(a1 + 128) + 48) + 1;
              WORD1(src.__r_.__value_.__r.__words[2]) = -1;
              unint64_t v16 = *(void *)(a1 + 344);
              if (v16 >= *(void *)(a1 + 352))
              {
                uint64_t v17 = sub_10042C9CC((uint64_t *)(a1 + 336), (uint64_t)&src);
              }
              else
              {
                uuid_copy(*(unsigned __int8 **)(a1 + 344), (const unsigned __int8 *)&src);
                *(_DWORD *)(v16 + 16) = src.__r_.__value_.__r.__words[2];
                uint64_t v17 = v16 + 20;
                *(void *)(a1 + 344) = v16 + 20;
              }
              *(void *)(a1 + 344) = v17;
              uint64_t v18 = qword_100A19E88;
              if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(buf) = 138543362;
                *(void *)((char *)&buf + 4) = v15;
                _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Queueing services changed notification for LE device %{public}@", (uint8_t *)&buf, 0xCu);
              }
            }
            uint64_t v14 = (char *)v14 + 1;
          }
          while (v12 != v14);
          id v12 = [v11 countByEnumeratingWithState:&v31 objects:v47 count:16];
        }
        while (v12);
      }

      memset(&src, 0, sizeof(src));
      if (qword_1009F8768 != -1) {
        dispatch_once(&qword_1009F8768, &stru_1009ADDB8);
      }
      sub_10060C508((uint64_t)off_1009F8760, (uint64_t **)&src);
      std::string::size_type size = src.__r_.__value_.__l.__size_;
      for (i = (uint64_t *)src.__r_.__value_.__r.__words[0]; i != (uint64_t *)size; ++i)
      {
        long long v21 = (unsigned __int8 *)*i;
        if (sub_1004784AC(*i))
        {
          *(void *)uu = 0;
          uint64_t v46 = 0;
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009ADD98);
          }
          sub_100014B58((uint64_t)off_1009F7ED8, ((unint64_t)v21[128] << 40) | ((unint64_t)v21[129] << 32) | ((unint64_t)v21[130] << 24) | ((unint64_t)v21[131] << 16) | ((unint64_t)v21[132] << 8) | v21[133], 1u, 0, 0, 0, uu);
          if (uuid_is_null(uu))
          {
            int v22 = qword_100A19E88;
            if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT))
            {
              sub_100474E18((uint64_t)v21, &buf);
              long long v27 = v50 >= 0 ? &buf : (long long *)buf;
              *(_DWORD *)long long v43 = 136446210;
              int v44 = v27;
              _os_log_fault_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "Failed to start tracking tracking a UUID for device %{public}s", v43, 0xCu);
              if (v50 < 0) {
                operator delete((void *)buf);
              }
            }
          }
          long long buf = 0uLL;
          int v49 = 0;
          uuid_copy((unsigned __int8 *)&buf, uu);
          LOWORD(v49) = *(_WORD *)(*(void *)(a1 + 128) + 48) + 1;
          HIWORD(v49) = -1;
          unint64_t v23 = *(void *)(a1 + 344);
          if (v23 >= *(void *)(a1 + 352))
          {
            uint64_t v24 = sub_10042C9CC((uint64_t *)(a1 + 336), (uint64_t)&buf);
          }
          else
          {
            uuid_copy(*(unsigned __int8 **)(a1 + 344), (const unsigned __int8 *)&buf);
            *(_DWORD *)(v23 + 16) = v49;
            uint64_t v24 = v23 + 20;
            *(void *)(a1 + 344) = v23 + 20;
          }
          *(void *)(a1 + 344) = v24;
          long long v25 = qword_100A19E88;
          if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
          {
            sub_100031234(uu);
            int v26 = (long long *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)long long v43 = 138543362;
            int v44 = v26;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Queueing services changed notification for Classic device %{public}@", v43, 0xCu);
          }
        }
      }
      sub_1004231FC(a1);
      if (src.__r_.__value_.__r.__words[0])
      {
        src.__r_.__value_.__l.__size_ = src.__r_.__value_.__r.__words[0];
        operator delete(src.__r_.__value_.__l.__data_);
      }
LABEL_74:
      if (__p)
      {
        long long v37 = (uint64_t *)__p;
        operator delete(__p);
      }
      sub_10003AFB4((uint64_t)v39);
    }
  }
  return sub_10001B8AC(&v42);
}

void sub_100421BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (*(char *)(v37 - 137) < 0) {
    operator delete(*(void **)(v37 - 160));
  }
  if (*(char *)(v37 - 105) < 0) {
    operator delete(*(void **)(v37 - 128));
  }
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a25);
  sub_10001B8AC(&a37);
  _Unwind_Resume(a1);
}

BOOL sub_100421C94(__n128 *a1)
{
  __n128 v9 = 0uLL;
  int v10 = 0;
  __n128 v7 = *a1;
  unsigned __int32 v8 = a1[1].n128_u32[0];
  sub_100035F98(&v9, &v7);
  long long v5 = xmmword_1007BA4D8;
  int v6 = 0;
  if (sub_10022A44C(v1, (unsigned __int8 *)&v5)) {
    return 1;
  }
  long long v3 = xmmword_1007BA4EC;
  int v4 = 0;
  return sub_10022A44C((unsigned __int8 *)&v9, (unsigned __int8 *)&v3);
}

void sub_100421D50()
{
}

void sub_100421DD0()
{
}

void sub_100421E50()
{
}

void sub_100421ED0()
{
}

void sub_100421F80()
{
}

void sub_10042200C()
{
}

uint64_t sub_10042209C(uint64_t a1, uint64_t a2, int a3)
{
  v114 = 0;
  long long v115 = 0;
  uint64_t v116 = 0;
  sub_100040550(&v114, a2 + 104);
  std::string __p = 0;
  v112 = 0;
  uint64_t v113 = 0;
  sub_100040550(&__p, a2 + 136);
  uint64_t v6 = (v115 - (unsigned char *)v114) >> 3;
  for (i = (char *)__p; i != v112; i += 8)
  {
    sub_100040550(&buf, *(void *)i + 104);
    __n128 v8 = buf;
    if (buf.n128_u64[0])
    {
      buf.n128_u64[1] = buf.n128_u64[0];
      operator delete((void *)buf.n128_u64[0]);
    }
    uint64_t v6 = ((uint64_t)(v8.n128_u64[1] - v8.n128_u64[0]) >> 3) + (unsigned __int16)v6 + 2;
  }
  v110[0] = 0;
  v110[1] = 0;
  sub_10003AED0((uint64_t)v110, a1 + 40);
  char v109 = 0;
  uint64_t v9 = sub_100017768();
  sub_10004191C(&buf, "GATT");
  sub_10004191C(&v167, "DUMMY_DIS");
  int v10 = (*(uint64_t (**)(uint64_t, __n128 *, __n128 *, char *))(*(void *)v9 + 72))(v9, &buf, &v167, &v109);
  if (v109) {
    int v11 = 0;
  }
  else {
    int v11 = v10;
  }
  if (v11 == 1)
  {
    __n128 v173 = *(__n128 *)(a2 + 72);
    int v174 = *(_DWORD *)(a2 + 88);
    sub_100035F98(&v166, &v173);
    long long v164 = xmmword_1007BA618;
    int v165 = 0;
    BOOL v13 = sub_10022A44C(v12, (unsigned __int8 *)&v164);
    if (v169 < 0) {
      operator delete((void *)v167.n128_u64[0]);
    }
    if (v172 < 0)
    {
      operator delete((void *)buf.n128_u64[0]);
      if (!v13) {
        goto LABEL_23;
      }
    }
    else if (!v13)
    {
      goto LABEL_23;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
      sub_100766AC8();
    }
    uint64_t v14 = 905;
    goto LABEL_136;
  }
  if (v169 < 0) {
    operator delete((void *)v167.n128_u64[0]);
  }
  if (v172 < 0) {
    operator delete((void *)buf.n128_u64[0]);
  }
LABEL_23:
  if (!*(unsigned char *)(a1 + 32))
  {
    uint64_t v18 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = "publish";
      if (a3) {
        uint64_t v19 = "republish";
      }
      buf.n128_u32[0] = 136446210;
      *(unint64_t *)((char *)buf.n128_u64 + 4) = (unint64_t)v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Stack not started during attempt to %{public}s LE service", (uint8_t *)&buf, 0xCu);
    }
    if (a3)
    {
      uint64_t v14 = 111;
    }
    else
    {
      unint64_t v23 = *(void **)(a1 + 368);
      unint64_t v22 = *(void *)(a1 + 376);
      if ((unint64_t)v23 >= v22)
      {
        uint64_t v74 = *(void *)(a1 + 360);
        uint64_t v75 = ((uint64_t)v23 - v74) >> 3;
        if ((unint64_t)(v75 + 1) >> 61) {
          abort();
        }
        uint64_t v76 = v22 - v74;
        uint64_t v77 = v76 >> 2;
        if (v76 >> 2 <= (unint64_t)(v75 + 1)) {
          uint64_t v77 = v75 + 1;
        }
        if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v78 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v78 = v77;
        }
        if (v78) {
          v79 = (char *)sub_1000405F8(a1 + 376, v78);
        }
        else {
          v79 = 0;
        }
        v83 = &v79[8 * v75];
        int v84 = &v79[8 * v78];
        *(void *)v83 = a2;
        uint64_t v24 = v83 + 8;
        int v86 = *(char **)(a1 + 360);
        uint64_t v85 = *(char **)(a1 + 368);
        if (v85 != v86)
        {
          do
          {
            uint64_t v87 = *((void *)v85 - 1);
            v85 -= 8;
            *((void *)v83 - 1) = v87;
            v83 -= 8;
          }
          while (v85 != v86);
          uint64_t v85 = *(char **)(a1 + 360);
        }
        *(void *)(a1 + 360) = v83;
        *(void *)(a1 + 368) = v24;
        *(void *)(a1 + 376) = v84;
        if (v85) {
          operator delete(v85);
        }
      }
      else
      {
        void *v23 = a2;
        uint64_t v24 = v23 + 1;
      }
      uint64_t v14 = 0;
      *(void *)(a1 + 368) = v24;
    }
LABEL_136:
    sub_10003AFB4((uint64_t)v110);
    goto LABEL_137;
  }
  char v108 = 0;
  sub_10001B8E0(&v108);
  uint64_t v15 = *(void *)(a2 + 8);
  int v16 = *(unsigned __int8 *)(a2 + 96);
  __n128 buf = *(__n128 *)(a2 + 72);
  int v171 = *(_DWORD *)(a2 + 88);
  sub_100035F98(&v167, &buf);
  __n128 v162 = v167;
  int v163 = v168;
  if (sub_1002307DC(v15, v16 != 0, (unsigned __int8 *)&v162, (unsigned __int16)v6))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
      sub_100766E80();
    }
    uint64_t v17 = 0;
    goto LABEL_28;
  }
  for (j = (char *)v114; j != v115; j += 8)
  {
    uint64_t v21 = sub_100423AEC(a1, *(_DWORD *)(*(void *)j + 104));
    if (!v21)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
        sub_100766DE4();
      }
      uint64_t v14 = 904;
      goto LABEL_128;
    }
    if (sub_100230970(*(void *)(*(void *)j + 8), **(unsigned __int16 **)(a2 + 8), *(void *)(v21 + 8)))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
        sub_100766E18();
      }
      uint64_t v14 = 1;
LABEL_128:
      sub_10023095C(*(unsigned __int16 **)(a2 + 8));
      uint64_t v17 = 0;
      goto LABEL_29;
    }
    if (*(unsigned __int16 *)(*(void *)j + 72) == **(unsigned __int16 **)(v21 + 8)) {
      *(void *)(*(void *)j + 96) = v21;
    }
  }
  char v104 = a3;
  long long v25 = (char *)__p;
  if (__p == v112)
  {
    uint64_t v17 = 0;
LABEL_119:
    sub_10001B910(&v108);
    if ((v104 & 1) == 0)
    {
      int v81 = *(void **)(a1 + 368);
      unint64_t v80 = *(void *)(a1 + 376);
      if ((unint64_t)v81 >= v80)
      {
        uint64_t v90 = *(void *)(a1 + 360);
        uint64_t v91 = ((uint64_t)v81 - v90) >> 3;
        if ((unint64_t)(v91 + 1) >> 61) {
          abort();
        }
        uint64_t v92 = v80 - v90;
        uint64_t v93 = v92 >> 2;
        if (v92 >> 2 <= (unint64_t)(v91 + 1)) {
          uint64_t v93 = v91 + 1;
        }
        if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v94 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v94 = v93;
        }
        if (v94) {
          uint64_t v95 = (char *)sub_1000405F8(a1 + 376, v94);
        }
        else {
          uint64_t v95 = 0;
        }
        int v96 = &v95[8 * v91];
        v97 = &v95[8 * v94];
        *(void *)int v96 = a2;
        v82 = v96 + 8;
        uint64_t v99 = *(char **)(a1 + 360);
        v98 = *(char **)(a1 + 368);
        if (v98 != v99)
        {
          do
          {
            uint64_t v100 = *((void *)v98 - 1);
            v98 -= 8;
            *((void *)v96 - 1) = v100;
            v96 -= 8;
          }
          while (v98 != v99);
          v98 = *(char **)(a1 + 360);
        }
        *(void *)(a1 + 360) = v96;
        *(void *)(a1 + 368) = v82;
        *(void *)(a1 + 376) = v97;
        if (v98) {
          operator delete(v98);
        }
      }
      else
      {
        *int v81 = a2;
        v82 = v81 + 1;
      }
      *(void *)(a1 + 368) = v82;
    }
    sub_100423FAC(a1, 0, **(unsigned __int16 **)(a2 + 8), *(unsigned __int16 *)(*(void *)(a2 + 8) + 24));
    sub_10001B8AC(&v108);
    uint64_t v14 = 0;
    goto LABEL_30;
  }
  uint64_t v17 = 0;
  while (1)
  {
    BOOL v103 = v25;
    uint64_t v26 = *(void *)(*(void *)v25 + 96);
    uint64_t v107 = *(void *)v25;
    sub_100040550(&buf, *(void *)v25 + 104);
    if (v17) {
      operator delete(v17);
    }
    unint64_t v27 = buf.n128_u64[1];
    uint64_t v17 = (char *)buf.n128_u64[0];
    __n128 buf = *(__n128 *)(v107 + 76);
    int v171 = *(_DWORD *)(v107 + 92);
    sub_100035F98(&v167, &buf);
    long long v160 = xmmword_1007BA4D8;
    int v161 = 0;
    uint64_t v29 = (__n128 *)(v107 + 76);
    if (sub_10022A44C(v28, (unsigned __int8 *)&v160)) {
      goto LABEL_191;
    }
    __n128 buf = *v29;
    int v171 = *(_DWORD *)(v107 + 92);
    sub_100035F98(&v173, &buf);
    long long v158 = xmmword_1007BA4EC;
    int v159 = 0;
    if (sub_10022A44C(v30, (unsigned __int8 *)&v158)) {
      goto LABEL_191;
    }
    __n128 buf = *v29;
    int v171 = *(_DWORD *)(v107 + 92);
    sub_100035F98(&v166, &buf);
    long long v156 = xmmword_1007BA500;
    int v157 = 0;
    if (sub_10022A44C(v31, (unsigned __int8 *)&v156)) {
      goto LABEL_191;
    }
    __n128 buf = *v29;
    int v171 = *(_DWORD *)(v107 + 92);
    sub_100035F98(&v155, &buf);
    long long v153 = xmmword_1007BA514;
    int v154 = 0;
    if (sub_10022A44C((unsigned __int8 *)&v155, (unsigned __int8 *)&v153)) {
      goto LABEL_191;
    }
    __n128 buf = *v29;
    int v171 = *(_DWORD *)(v107 + 92);
    sub_100035F98(&v152, &buf);
    long long v150 = xmmword_1007BA528;
    int v151 = 0;
    if (sub_10022A44C((unsigned __int8 *)&v152, (unsigned __int8 *)&v150)) {
      goto LABEL_191;
    }
    __n128 buf = *v29;
    int v171 = *(_DWORD *)(v107 + 92);
    sub_100035F98(&v149, &buf);
    long long v147 = xmmword_1007BA53C;
    int v148 = 0;
    if (sub_10022A44C((unsigned __int8 *)&v149, (unsigned __int8 *)&v147)) {
      goto LABEL_191;
    }
    __n128 buf = *v29;
    int v171 = *(_DWORD *)(v107 + 92);
    sub_100035F98(&v146, &buf);
    long long v144 = xmmword_1007BA550;
    int v145 = 0;
    if (sub_10022A44C((unsigned __int8 *)&v146, (unsigned __int8 *)&v144)) {
      goto LABEL_191;
    }
    __n128 buf = *v29;
    int v171 = *(_DWORD *)(v107 + 92);
    sub_100035F98(&v143, &buf);
    long long v141 = xmmword_1007BA564;
    int v142 = 0;
    if (sub_10022A44C((unsigned __int8 *)&v143, (unsigned __int8 *)&v141)) {
      goto LABEL_191;
    }
    __n128 buf = *v29;
    int v171 = *(_DWORD *)(v107 + 92);
    sub_100035F98(&v140, &buf);
    long long v138 = xmmword_1007BA578;
    int v139 = 0;
    if (sub_10022A44C((unsigned __int8 *)&v140, (unsigned __int8 *)&v138)
      || (__n128 buf = *v29,
          int v171 = *(_DWORD *)(v107 + 92),
          sub_100035F98(&v137, &buf),
          long long v135 = xmmword_1007BA58C,
          int v136 = 0,
          sub_10022A44C((unsigned __int8 *)&v137, (unsigned __int8 *)&v135)))
    {
LABEL_191:
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
      {
        __n128 buf = *v29;
        int v171 = *(_DWORD *)(v107 + 92);
        sub_100035F98(&v167, &buf);
        sub_1000417A8(v89, &buf);
        sub_100766AFC();
      }
      sub_10023095C(*(unsigned __int16 **)(a2 + 8));
      uint64_t v14 = 905;
      goto LABEL_29;
    }
    if (!sub_100013DCC(v26 + 72))
    {
      if (*(unsigned char *)(v107 + 72) != 2)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
          sub_100766DB0();
        }
        sub_10023095C(*(unsigned __int16 **)(a2 + 8));
        uint64_t v14 = 910;
        goto LABEL_29;
      }
      if ((*(unsigned char *)(*(void *)(v26 + 8) + 26) & 0x2A) != 0)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
          sub_100766D7C();
        }
        sub_10023095C(*(unsigned __int16 **)(a2 + 8));
        uint64_t v14 = 911;
        goto LABEL_29;
      }
    }
    if (v17 == (char *)v27)
    {
      char v41 = *(unsigned char *)(v107 + 72);
      if (v41 < 0)
      {
LABEL_83:
        char v42 = v17;
        goto LABEL_84;
      }
      if ((*(unsigned char *)(v107 + 72) & 1) == 0)
      {
        if ((*(unsigned char *)(v107 + 72) & 0x30) == 0) {
          goto LABEL_101;
        }
LABEL_99:
        char v50 = v17;
        goto LABEL_100;
      }
LABEL_91:
      uint64_t v46 = v17;
      goto LABEL_92;
    }
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    long long v34 = v17;
    do
    {
      uint64_t v35 = *(void *)(*(void *)v34 + 8);
      int v36 = *(_DWORD *)(v35 + 20);
      __n128 buf = *(__n128 *)(v35 + 4);
      int v171 = v36;
      sub_100035F98(&v167, &buf);
      long long v133 = xmmword_1007BA53C;
      int v134 = 0;
      if (sub_10022A44C(v37, (unsigned __int8 *)&v133))
      {
        if (!v33)
        {
          uint64_t v33 = *(void *)v34;
          goto LABEL_72;
        }
        if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
          sub_100766D14();
        }
LABEL_160:
        sub_10023095C(*(unsigned __int16 **)(a2 + 8));
        uint64_t v14 = 906;
        goto LABEL_29;
      }
      uint64_t v38 = *(void *)(*(void *)v34 + 8);
      int v39 = *(_DWORD *)(v38 + 20);
      __n128 buf = *(__n128 *)(v38 + 4);
      int v171 = v39;
      sub_100035F98(&v167, &buf);
      long long v131 = xmmword_1007BA578;
      int v132 = 0;
      if (sub_10022A44C(v40, (unsigned __int8 *)&v131))
      {
        if (v32)
        {
          if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
            sub_100766D48();
          }
          goto LABEL_160;
        }
        uint64_t v32 = *(void *)v34;
      }
LABEL_72:
      v34 += 8;
    }
    while (v34 != (char *)v27);
    char v41 = *(unsigned char *)(v107 + 72);
    if ((v41 & 0x80000000) == 0) {
      goto LABEL_85;
    }
    if (v17 == (char *)v27) {
      goto LABEL_83;
    }
    char v42 = v17;
    while (1)
    {
      uint64_t v43 = *(void *)(*(void *)v42 + 8);
      int v44 = *(_DWORD *)(v43 + 20);
      __n128 buf = *(__n128 *)(v43 + 4);
      int v171 = v44;
      sub_100035F98(&v167, &buf);
      long long v129 = xmmword_1007BA528;
      int v130 = 0;
      if (sub_10022A44C(v45, (unsigned __int8 *)&v129)) {
        break;
      }
      v42 += 8;
      if (v42 == (char *)v27)
      {
        char v42 = (char *)v27;
        break;
      }
    }
LABEL_84:
    if (v42 == (char *)v27)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
        sub_100766CE0();
      }
      sub_10023095C(*(unsigned __int16 **)(a2 + 8));
      uint64_t v14 = 907;
      goto LABEL_29;
    }
LABEL_85:
    if ((v41 & 1) == 0) {
      goto LABEL_93;
    }
    if (v17 == (char *)v27) {
      goto LABEL_91;
    }
    uint64_t v46 = v17;
    while (1)
    {
      uint64_t v47 = *(void *)(*(void *)v46 + 8);
      int v48 = *(_DWORD *)(v47 + 20);
      __n128 buf = *(__n128 *)(v47 + 4);
      int v171 = v48;
      sub_100035F98(&v167, &buf);
      long long v127 = xmmword_1007BA564;
      int v128 = 0;
      if (sub_10022A44C(v49, (unsigned __int8 *)&v127)) {
        break;
      }
      v46 += 8;
      if (v46 == (char *)v27)
      {
        uint64_t v46 = (char *)v27;
        break;
      }
    }
LABEL_92:
    if (v46 == (char *)v27)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
        sub_100766CAC();
      }
      sub_10023095C(*(unsigned __int16 **)(a2 + 8));
      uint64_t v14 = 908;
      goto LABEL_29;
    }
LABEL_93:
    if ((v41 & 0x30) == 0) {
      goto LABEL_101;
    }
    if (v17 == (char *)v27) {
      goto LABEL_99;
    }
    char v50 = v17;
    while (1)
    {
      uint64_t v51 = *(void *)(*(void *)v50 + 8);
      int v52 = *(_DWORD *)(v51 + 20);
      __n128 buf = *(__n128 *)(v51 + 4);
      int v171 = v52;
      sub_100035F98(&v167, &buf);
      long long v125 = xmmword_1007BA550;
      int v126 = 0;
      if (sub_10022A44C(v53, (unsigned __int8 *)&v125)) {
        break;
      }
      v50 += 8;
      if (v50 == (char *)v27)
      {
        char v50 = (char *)v27;
        break;
      }
    }
LABEL_100:
    if (v50 == (char *)v27)
    {
      uint64_t v101 = qword_100A19E88;
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
        sub_100766C24(v41, v101, v102);
      }
      sub_10023095C(*(unsigned __int16 **)(a2 + 8));
      uint64_t v14 = 909;
      goto LABEL_29;
    }
LABEL_101:
    int v105 = v17;
    unint64_t v106 = v27;
    uint64_t v54 = **(unsigned __int16 **)(a2 + 8);
    long long v55 = *(unsigned __int16 **)(v107 + 8);
    char v56 = *(unsigned char *)(v107 + 72);
    uint64_t v57 = *(void *)(*(void *)(v107 + 96) + 8);
    __n128 buf = *v29;
    int v171 = *(_DWORD *)(v107 + 92);
    sub_100035F98(&v167, &buf);
    __n128 v123 = v167;
    int v124 = v168;
    if (sub_100230AA0(v54, v55, v56, (unsigned __int16)(((v106 - v105) >> 3) + 1), v57, (unsigned __int8 *)&v123, (uint64_t)sub_100423B5C, (uint64_t)sub_100423C14))
    {
      uint64_t v17 = v105;
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
        sub_100766BBC();
      }
      goto LABEL_147;
    }
    int v58 = v105;
    if (v105 != (char *)v106) {
      break;
    }
LABEL_108:
    long long v25 = v103 + 8;
    uint64_t v17 = v105;
    if (v103 + 8 == v112) {
      goto LABEL_119;
    }
  }
  while (1)
  {
    uint64_t v59 = *(void *)v58;
    uint64_t v60 = *(void *)(*(void *)v58 + 8);
    int v61 = *(_DWORD *)(v60 + 20);
    __n128 buf = *(__n128 *)(v60 + 4);
    int v171 = v61;
    sub_100035F98(&v167, &buf);
    long long v121 = xmmword_1007BA550;
    int v122 = 0;
    if (sub_10022A44C(v62, (unsigned __int8 *)&v121)) {
      goto LABEL_105;
    }
    uint64_t v63 = *(void *)(v59 + 8);
    int v64 = *(_DWORD *)(v63 + 20);
    __n128 buf = *(__n128 *)(v63 + 4);
    int v171 = v64;
    sub_100035F98(&v173, &buf);
    long long v119 = xmmword_1007BA564;
    int v120 = 0;
    BOOL v66 = sub_10022A44C(v65, (unsigned __int8 *)&v119);
    id v67 = sub_100423C14;
    int v68 = sub_100423B5C;
    if (v66)
    {
LABEL_105:
      id v67 = sub_100423E3C;
      int v68 = sub_100423D84;
    }
    uint64_t v69 = v68;
    uint64_t v70 = *(void *)(v59 + 8);
    uint64_t v71 = **(unsigned __int16 **)(v107 + 8);
    char v72 = *(unsigned char *)(v70 + 26);
    __n128 v73 = *(__n128 *)(v70 + 4);
    int v171 = *(_DWORD *)(v70 + 20);
    __n128 buf = v73;
    sub_100035F98(&v167, &buf);
    __n128 v117 = v167;
    int v118 = v168;
    if (sub_100230D08(v70, v71, v72, (unsigned __int8 *)&v117, (uint64_t (*)(uint64_t, unsigned int, void *, signed int, _WORD *))v69, (uint64_t)v67))break; {
    v58 += 8;
    }
    if (v58 == (char *)v106) {
      goto LABEL_108;
    }
  }
  uint64_t v17 = v105;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
    sub_100766B54();
  }
LABEL_147:
  sub_10023095C(*(unsigned __int16 **)(a2 + 8));
LABEL_28:
  uint64_t v14 = 1;
LABEL_29:
  sub_10001B8AC(&v108);
LABEL_30:
  sub_10003AFB4((uint64_t)v110);
  if (v17) {
    operator delete(v17);
  }
LABEL_137:
  if (__p)
  {
    v112 = (char *)__p;
    operator delete(__p);
  }
  if (v114)
  {
    long long v115 = (char *)v114;
    operator delete(v114);
  }
  return v14;
}

void sub_100423058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  sub_10001B8AC(&a16);
  sub_10003AFB4((uint64_t)&a18);
  if (v24) {
    operator delete(v24);
  }
  if (a20)
  {
    a21 = (uint64_t)a20;
    operator delete(a20);
  }
  if (a23)
  {
    a24 = (uint64_t)a23;
    operator delete(a23);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10042318C(uint64_t *a1, unsigned __int8 *src)
{
  unint64_t v4 = a1[1];
  if (v4 >= a1[2])
  {
    uint64_t result = sub_10042C9CC(a1, (uint64_t)src);
  }
  else
  {
    uuid_copy((unsigned __int8 *)a1[1], src);
    *(_DWORD *)(v4 + 16) = *((_DWORD *)src + 4);
    uint64_t result = v4 + 20;
    a1[1] = v4 + 20;
  }
  a1[1] = result;
  return result;
}

void sub_1004231F4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1004231FC(uint64_t a1)
{
  v20[0] = 0;
  v20[1] = 0;
  sub_10003AED0((uint64_t)v20, a1 + 40);
  uint64_t v1 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "statedump: Local database:", (uint8_t *)&buf, 2u);
  }
  for (i = *(void ***)(a1 + 360); i != *(void ***)(a1 + 368); ++i)
  {
    long long v3 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
    {
      sub_100613B58(*i, &buf);
      p_std::string buf = &buf;
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      LODWORD(v25.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v25.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_buf;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s", (uint8_t *)&v25, 0xCu);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
    }
    memset(&buf, 0, sizeof(buf));
    sub_100040550(&buf, (uint64_t)(*i + 13));
    std::string::size_type size = buf.__r_.__value_.__l.__size_;
    for (j = (void **)buf.__r_.__value_.__r.__words[0]; j != (void **)size; ++j)
    {
      __n128 v7 = qword_100A19E88;
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
      {
        sub_100613B58(*j, &v25);
        __n128 v8 = &v25;
        if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          __n128 v8 = (std::string *)v25.__r_.__value_.__r.__words[0];
        }
        LODWORD(v24.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s", (uint8_t *)&v24, 0xCu);
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v25.__r_.__value_.__l.__data_);
        }
        std::string::size_type size = buf.__r_.__value_.__l.__size_;
      }
    }
    memset(&v25, 0, sizeof(v25));
    sub_100040550(&v25, (uint64_t)(*i + 17));
    uint64_t v9 = (void **)v25.__r_.__value_.__r.__words[0];
    if (v25.__r_.__value_.__r.__words[0] != v25.__r_.__value_.__l.__size_)
    {
      do
      {
        int v10 = qword_100A19E88;
        if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
        {
          sub_100613B58(*v9, &v24);
          if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v11 = &v24;
          }
          else {
            int v11 = (std::string *)v24.__r_.__value_.__r.__words[0];
          }
          LODWORD(v21.__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)v21.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s", (uint8_t *)&v21, 0xCu);
          if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v24.__r_.__value_.__l.__data_);
          }
          int v10 = qword_100A19E88;
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          sub_100613B58((void *)(*v9)[12], &v24);
          id v12 = (v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v24
              : (std::string *)v24.__r_.__value_.__r.__words[0];
          LODWORD(v21.__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)v21.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s", (uint8_t *)&v21, 0xCu);
          if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v24.__r_.__value_.__l.__data_);
          }
        }
        memset(&v24, 0, sizeof(v24));
        sub_100040550(&v24, (uint64_t)(*v9 + 13));
        std::string::size_type v13 = v24.__r_.__value_.__l.__size_;
        uint64_t v14 = (void **)v24.__r_.__value_.__r.__words[0];
        if (v24.__r_.__value_.__r.__words[0] != v24.__r_.__value_.__l.__size_)
        {
          do
          {
            uint64_t v15 = qword_100A19E88;
            if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
            {
              sub_100613B58(*v14, &v21);
              if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                int v16 = &v21;
              }
              else {
                int v16 = (std::string *)v21.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)unint64_t v22 = 136446210;
              unint64_t v23 = v16;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s", v22, 0xCu);
              if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v21.__r_.__value_.__l.__data_);
              }
              std::string::size_type v13 = v24.__r_.__value_.__l.__size_;
            }
            ++v14;
          }
          while (v14 != (void **)v13);
          uint64_t v14 = (void **)v24.__r_.__value_.__r.__words[0];
        }
        if (v14)
        {
          v24.__r_.__value_.__l.__size_ = (std::string::size_type)v14;
          operator delete(v14);
        }
        ++v9;
      }
      while (v9 != (void **)v25.__r_.__value_.__l.__size_);
      uint64_t v9 = (void **)v25.__r_.__value_.__r.__words[0];
    }
    if (v9)
    {
      v25.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
      operator delete(v9);
    }
    if (buf.__r_.__value_.__r.__words[0])
    {
      buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
      operator delete(buf.__r_.__value_.__l.__data_);
    }
  }
  return sub_10003AFB4((uint64_t)v20);
}

void sub_100423608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
}

unsigned char *sub_10042367C(uint64_t a1)
{
  return sub_1004213F8(a1 - 16);
}

unsigned char *sub_100423684(uint64_t a1)
{
  uint64_t v2 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "GattServer::stackWillStop enter", buf, 2u);
  }
  char v21 = 0;
  sub_10001B8E0(&v21);
  if (sub_10022A2F0())
  {
    sub_1002307D8();
    sub_10001B910(&v21);
    *(void *)std::string buf = 0;
    uint64_t v20 = 0;
    sub_10003AED0((uint64_t)buf, a1 + 40);
    *(unsigned char *)(a1 + 32) = 0;
    *(void *)(a1 + 344) = *(void *)(a1 + 336);
    sub_1000486F0(a1 + 384, *(void **)(a1 + 392));
    *(void *)(a1 + 392) = 0;
    *(void *)(a1 + 400) = 0;
    *(void *)(a1 + 384) = a1 + 392;
    sub_10042C61C(a1 + 408, *(void **)(a1 + 416));
    *(void *)(a1 + 416) = 0;
    *(void *)(a1 + 424) = 0;
    *(void *)(a1 + 408) = a1 + 416;
    unint64_t v3 = *(void *)(a1 + 464);
    unint64_t v4 = *(void ***)(a1 + 440);
    long long v5 = *(void ***)(a1 + 448);
    uint64_t v6 = &v4[v3 >> 8];
    if (v5 == v4) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = (uint64_t)*v6 + 16 * v3;
    }
    while (1)
    {
      unint64_t v11 = (char *)v5 - (char *)v4;
      if (v11)
      {
        unint64_t v12 = *(void *)(a1 + 472) + *(void *)(a1 + 464);
        uint64_t v13 = *(uint64_t *)((char *)v4 + ((v12 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v12;
      }
      else
      {
        uint64_t v13 = 0;
      }
      if (v7 == v13) {
        break;
      }
      uint64_t v8 = *(void *)(v7 + 8);
      if (v8)
      {
        *(void *)(v8 + 24) = &off_100998428;
        uint64_t v9 = *(atomic_uint **)(v8 + 32);
        if (v9) {
          sub_1000368F4(v9);
        }

        operator delete();
      }
      v7 += 16;
      if (v7 - (void)*v6 == 4096)
      {
        uint64_t v10 = (uint64_t)v6[1];
        ++v6;
        uint64_t v7 = v10;
      }
      unint64_t v4 = *(void ***)(a1 + 440);
      long long v5 = *(void ***)(a1 + 448);
    }
    *(void *)(a1 + 472) = 0;
    if (v11 >= 0x11)
    {
      do
      {
        operator delete(*v4);
        uint64_t v14 = *(void *)(a1 + 448);
        unint64_t v4 = (void **)(*(void *)(a1 + 440) + 8);
        *(void *)(a1 + 440) = v4;
        unint64_t v11 = v14 - (void)v4;
      }
      while (v11 > 0x10);
    }
    if (v11 >> 3 == 1)
    {
      uint64_t v15 = 128;
    }
    else
    {
      if (v11 >> 3 != 2)
      {
LABEL_25:
        *(unsigned char *)(a1 + 480) = 0;
        [*(id *)(a1 + 488) removeAllObjects];
        [*(id *)(a1 + 496) removeAllObjects];
        [*(id *)(a1 + 504) removeAllObjects];
        sub_10042C728(a1 + 512, *(char **)(a1 + 520));
        *(void *)(a1 + 512) = a1 + 520;
        *(void *)(a1 + 528) = 0;
        *(void *)(a1 + 520) = 0;
        sub_1000486F0(a1 + 536, *(void **)(a1 + 544));
        *(void *)(a1 + 536) = a1 + 544;
        *(void *)(a1 + 552) = 0;
        *(void *)(a1 + 544) = 0;
        int v16 = qword_100A19E88;
        if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v18 = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "GattServer::stackWillStop exit", v18, 2u);
        }
        sub_10003AFB4((uint64_t)buf);
        return sub_10001B8AC(&v21);
      }
      uint64_t v15 = 256;
    }
    *(void *)(a1 + 464) = v15;
    goto LABEL_25;
  }
  return sub_10001B8AC(&v21);
}

void sub_100423928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

unsigned char *sub_100423950(uint64_t a1)
{
  return sub_100423684(a1 - 16);
}

uint64_t sub_100423958(uint64_t a1, uint64_t a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 40);
  *(void *)(a1 + 104) = a2;
  return sub_10003AFB4((uint64_t)v5);
}

void sub_1004239A0(uint64_t a1, long long *a2)
{
  long long __dst = 0uLL;
  uint64_t v8 = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10003B098(&__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long __dst = *a2;
    uint64_t v8 = *((void *)a2 + 2);
  }
  uint64_t v3 = sub_100019878();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3321888768;
  void v4[2] = sub_100423AD4;
  v4[3] = &unk_1009ADA90;
  v4[4] = a1;
  if (SHIBYTE(v8) < 0)
  {
    sub_10003B098(&__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    long long __p = __dst;
    uint64_t v6 = v8;
  }
  sub_100013018(v3, v4);
  if (SHIBYTE(v6) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_100423AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v19 - 25) < 0) {
    operator delete(*(void **)(v19 - 48));
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_100423AD4(uint64_t a1)
{
  return std::string::operator=((std::string *)(*(void *)(a1 + 32) + 304), (const std::string *)(a1 + 40));
}

void sub_100423AE4(uint64_t a1, long long *a2)
{
}

uint64_t sub_100423AEC(uint64_t a1, int a2)
{
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 40);
  unint64_t v4 = *(uint64_t **)(a1 + 360);
  long long v5 = *(uint64_t **)(a1 + 368);
  while (v4 != v5)
  {
    uint64_t v6 = *v4;
    if (*(_DWORD *)(*v4 + 16) == a2) {
      goto LABEL_6;
    }
    ++v4;
  }
  uint64_t v6 = 0;
LABEL_6:
  sub_10003AFB4((uint64_t)v8);
  return v6;
}

void sub_100423B5C()
{
}

void sub_100423C14()
{
}

void sub_100423D24()
{
}

void sub_100423D84()
{
}

void sub_100423E3C()
{
}

void sub_100423F4C()
{
}

void sub_100423FAC(uint64_t a1, void *a2, unsigned int a3, unsigned int a4)
{
  id v7 = a2;
  v22[0] = 0;
  v22[1] = 0;
  sub_10003AED0((uint64_t)v22, a1 + 40);
  uint64_t v8 = *(void *)(a1 + 336);
  uint64_t v9 = *(void *)(a1 + 344);
  if (v8 != v9)
  {
    while (1)
    {
      memset(dst, 0, sizeof(dst));
      unsigned int v25 = 0;
      uuid_copy(dst, (const unsigned __int8 *)v8);
      unsigned int v10 = *(_DWORD *)(v8 + 16);
      unsigned int v25 = v10;
      if (!v7) {
        break;
      }
      unint64_t v11 = sub_100031234(dst);
      unsigned int v12 = [v7 isEqual:v11];

      if (v12)
      {
        LOWORD(v10) = v25;
        unsigned int v13 = HIWORD(v25);
LABEL_6:
        __int16 v14 = v10;
        if ((unsigned __int16)v10 >= a3) {
          __int16 v14 = a3;
        }
        if ((_WORD)v10) {
          __int16 v15 = v14;
        }
        else {
          __int16 v15 = a3;
        }
        LOWORD(v25) = v15;
        if (v13 <= a4) {
          __int16 v16 = a4;
        }
        else {
          __int16 v16 = v13;
        }
        HIWORD(v25) = v16;
        if (*(unsigned char *)(a1 + 32))
        {
          if (qword_1009FB240 != -1) {
            dispatch_once(&qword_1009FB240, &stru_1009ADD38);
          }
          uint64_t v17 = qword_1009FB238;
          uint64_t v18 = sub_100031234(dst);
          LODWORD(v17) = sub_1004C063C(v17, v18);

          if (v17)
          {
            *(_OWORD *)long long __p = 0u;
            long long v21 = 0u;
            sub_100053710((uint64_t)__p, 0);
            sub_10001195C((uint64_t)__p, a3);
            sub_10001195C((uint64_t)__p, a4);
            uint64_t v19 = sub_100031234(dst);
            unint64_t v23 = v19;
            +[NSArray arrayWithObjects:&v23 count:1];
            objc_claimAutoreleasedReturnValue();

            operator new();
          }
        }
      }
      v8 += 20;
      if (v8 == v9) {
        goto LABEL_20;
      }
    }
    unsigned int v13 = HIWORD(v10);
    goto LABEL_6;
  }
LABEL_20:
  sub_10003AFB4((uint64_t)v22);
}

void sub_100424250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100424320(uint64_t a1, int *a2)
{
  v61[0] = 0;
  v61[1] = 0;
  sub_10003AED0((uint64_t)v61, a1 + 40);
  uint64_t v3 = sub_100423AEC(a1, *a2);
  if (v3)
  {
    for (i = *(void **)(a1 + 360); i != *(void **)(a1 + 368); ++i)
    {
      __p[0] = 0;
      __p[1] = 0;
      *(void *)&long long v59 = 0;
      sub_100040550(__p, *i + 104);
      long long v5 = __p[0];
      uint64_t v6 = (char *)__p[0];
      if (__p[0] != __p[1])
      {
        while (*(void *)(*(void *)v6 + 96) != v3)
        {
          v6 += 8;
          if (v6 == __p[1]) {
            goto LABEL_7;
          }
        }
        uint64_t v9 = qword_100A19E88;
        if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
        {
          sub_100613B58((void *)v3, &v60);
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v55 = &v60;
          }
          else {
            long long v55 = (std::string *)v60.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)std::string buf = 136446210;
          *(void *)&uint8_t buf[4] = v55;
          _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Unable to unpublish service (%{public}s) as it is included by another service!", buf, 0xCu);
          if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v60.__r_.__value_.__l.__data_);
          }
          long long v5 = __p[0];
          if (__p[0])
          {
LABEL_15:
            __p[1] = v5;
            operator delete(v5);
          }
        }
        else if (v5)
        {
          goto LABEL_15;
        }
        uint64_t v8 = 904;
        goto LABEL_109;
      }
LABEL_7:
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    unsigned int v10 = *(void **)(a1 + 384);
    if (v10 != (void *)(a1 + 392))
    {
      do
      {
        __p[0] = 0;
        if (sub_100424AC0(a1, *((_DWORD *)v10 + 10), (uint64_t *)__p)) {
          BOOL v11 = __p[0] == (void *)v3;
        }
        else {
          BOOL v11 = 0;
        }
        if (v11)
        {
          if (*(unsigned char *)(a1 + 32))
          {
            v60.__r_.__value_.__s.__data_[0] = 0;
            sub_10001B8E0(&v60);
            __int16 v14 = (void (*)(uint64_t, uint64_t, void))v10[6];
            uint64_t v15 = *((unsigned int *)v10 + 8);
            if (*((unsigned char *)v10 + 44)) {
              v14(v15, 242, 0);
            }
            else {
              ((void (*)(uint64_t, uint64_t, void, void))v14)(v15, 242, 0, 0);
            }
            sub_10001B8AC(&v60);
          }
          __int16 v16 = (void *)v10[1];
          uint64_t v17 = v10;
          if (v16)
          {
            do
            {
              unsigned int v13 = v16;
              __int16 v16 = (void *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              unsigned int v13 = (void *)v17[2];
              BOOL v11 = *v13 == (void)v17;
              uint64_t v17 = v13;
            }
            while (!v11);
          }
          sub_10004D3B8((uint64_t **)(a1 + 384), v10);
          operator delete(v10);
        }
        else
        {
          unsigned int v12 = (void *)v10[1];
          if (v12)
          {
            do
            {
              unsigned int v13 = v12;
              unsigned int v12 = (void *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              unsigned int v13 = (void *)v10[2];
              BOOL v11 = *v13 == (void)v10;
              unsigned int v10 = v13;
            }
            while (!v11);
          }
        }
        unsigned int v10 = v13;
      }
      while (v13 != (void *)(a1 + 392));
    }
    uint64_t v18 = *(void **)(a1 + 512);
    if (v18 != (void *)(a1 + 520))
    {
      do
      {
        uint64_t v19 = (int *)v18[5];
        if (v19 != (int *)v18[6])
        {
          *(_OWORD *)long long __p = 0u;
          long long v59 = 0u;
          int v20 = *v19;
          WORD2(__p[0]) = *((_WORD *)v19 + 2);
          LODWORD(__p[0]) = v20;
          uint64_t v21 = *((void *)v19 + 2);
          __p[1] = &off_100998428;
          *(void *)&long long v59 = v21;
          if (v21) {
            sub_100037354(v21);
          }
          BYTE8(v59) = *((unsigned char *)v19 + 24);
          v60.__r_.__value_.__r.__words[0] = 0;
          if (sub_100424AC0(a1, (int)__p[0], (uint64_t *)&v60) && v60.__r_.__value_.__r.__words[0] == v3)
          {
            sub_10042CC6C((uint64_t **)(a1 + 512), (uint64_t)v18);
            __p[1] = &off_100998428;
            if ((void)v59) {
              sub_1000368F4((atomic_uint *)v59);
            }
            break;
          }
          __p[1] = &off_100998428;
          if ((void)v59) {
            sub_1000368F4((atomic_uint *)v59);
          }
        }
        unint64_t v22 = (void *)v18[1];
        if (v22)
        {
          do
          {
            unint64_t v23 = v22;
            unint64_t v22 = (void *)*v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            unint64_t v23 = (void *)v18[2];
            BOOL v11 = *v23 == (void)v18;
            uint64_t v18 = v23;
          }
          while (!v11);
        }
        uint64_t v18 = v23;
      }
      while (v23 != (void *)(a1 + 520));
    }
    sub_100423FAC(a1, 0, **(unsigned __int16 **)(v3 + 8), *(unsigned __int16 *)(*(void *)(v3 + 8) + 24));
    if (*(unsigned char *)(a1 + 32))
    {
      LOBYTE(__p[0]) = 0;
      sub_10001B8E0(__p);
      sub_10023095C(*(unsigned __int16 **)(v3 + 8));
      sub_10001B8AC(__p);
    }
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v56 = v3;
    *(void *)&long long v59 = 0;
    sub_100040550(__p, v3 + 136);
    std::string v24 = (uint64_t *)__p[0];
    if (__p[0] != __p[1])
    {
      unsigned int v25 = (uint64_t *)(a1 + 416);
      do
      {
        uint64_t v26 = *v24;
        memset(&v60, 0, sizeof(v60));
        sub_100040550(&v60, v26 + 104);
        unint64_t v27 = (char *)v60.__r_.__value_.__r.__words[0];
        if (v60.__r_.__value_.__r.__words[0] != v60.__r_.__value_.__l.__size_)
        {
          do
          {
            uint64_t v28 = *(void *)(*(void *)v27 + 8);
            int v29 = *(_DWORD *)(v28 + 20);
            *(_OWORD *)std::string buf = *(_OWORD *)(v28 + 4);
            int v66 = v29;
            sub_100035F98(&v64, (__n128 *)buf);
            long long v62 = xmmword_1007BA550;
            int v63 = 0;
            if (sub_10022A44C((unsigned __int8 *)&v64, (unsigned __int8 *)&v62))
            {
              int v30 = (void *)*v25;
              if (*v25)
              {
                unint64_t v31 = *(void *)v27;
                uint64_t v32 = (uint64_t *)(a1 + 416);
                do
                {
                  unint64_t v33 = v30[4];
                  BOOL v34 = v33 >= v31;
                  if (v33 >= v31) {
                    uint64_t v35 = v30;
                  }
                  else {
                    uint64_t v35 = v30 + 1;
                  }
                  if (v34) {
                    uint64_t v32 = v30;
                  }
                  int v30 = (void *)*v35;
                }
                while (*v35);
                if (v32 != v25 && v31 >= v32[4])
                {
                  sub_10042CCB8((uint64_t **)(a1 + 408), v32);
                  unint64_t v36 = *(void *)(a1 + 464);
                  uint64_t v37 = *(void *)(a1 + 440);
                  uint64_t v38 = *(void *)(a1 + 448);
                  int v39 = (void *)(v37 + 8 * (v36 >> 8));
                  if (v38 == v37) {
                    uint64_t v40 = 0;
                  }
                  else {
                    uint64_t v40 = *v39 + 16 * v36;
                  }
                  char v41 = (void *)(v37 + 8 * (v36 >> 8));
LABEL_78:
                  uint64_t v42 = v40;
                  while (1)
                  {
                    uint64_t v43 = v38 == v37
                        ? 0
                        : *(void *)(v37 + (((*(void *)(a1 + 472) + v36) >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * (*(unsigned char *)(a1 + 472) + v36);
                    if (v42 == v43) {
                      break;
                    }
                    uint64_t v44 = *(void *)(v42 + 8);
                    if (v31 == *(void *)(v44 + 16))
                    {
                      if (v38 == v37) {
                        uint64_t v46 = 0;
                      }
                      else {
                        uint64_t v46 = *v39 + 16 * v36;
                      }
                      if (v42 != v46)
                      {
                        *(void *)(v44 + 24) = &off_100998428;
                        uint64_t v47 = *(atomic_uint **)(v44 + 32);
                        if (v47) {
                          sub_1000368F4(v47);
                        }

                        operator delete();
                      }
                      break;
                    }
                    v42 += 16;
                    v40 += 16;
                    if (*v41 + 4096 == v40)
                    {
                      uint64_t v45 = v41[1];
                      ++v41;
                      uint64_t v40 = v45;
                      goto LABEL_78;
                    }
                  }
                }
              }
            }
            v27 += 8;
          }
          while (v27 != (char *)v60.__r_.__value_.__l.__size_);
          unint64_t v27 = (char *)v60.__r_.__value_.__r.__words[0];
        }
        if (v27)
        {
          v60.__r_.__value_.__l.__size_ = (std::string::size_type)v27;
          operator delete(v27);
        }
        ++v24;
      }
      while (v24 != __p[1]);
    }
    int v49 = *(char **)(a1 + 360);
    int v48 = *(char **)(a1 + 368);
    if (v49 != v48)
    {
      uint64_t v50 = 0;
      while (*(_DWORD *)(*(void *)&v49[v50] + 16) != *a2)
      {
        v50 += 8;
        if (&v49[v50] == v48) {
          goto LABEL_106;
        }
      }
      uint64_t v51 = &v49[v50];
      int v52 = &v49[v50 + 8];
      int64_t v53 = v48 - v52;
      if (v48 != v52) {
        memmove(&v49[v50], v52, v48 - v52);
      }
      *(void *)(a1 + 368) = &v51[v53];
    }
LABEL_106:
    (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    uint64_t v8 = 0;
  }
  else
  {
    id v7 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT)) {
      sub_100766EE8(a2, v7);
    }
    uint64_t v8 = 1010;
  }
LABEL_109:
  sub_10003AFB4((uint64_t)v61);
  return v8;
}

void sub_100424A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, atomic_uint *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a15) {
    sub_1000368F4(a15);
  }
  sub_10003AFB4((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_100424AC0(uint64_t a1, int a2, uint64_t *a3)
{
  v27[0] = 0;
  v27[1] = 0;
  sub_10003AED0((uint64_t)v27, a1 + 40);
  for (i = *(uint64_t **)(a1 + 360); i != *(uint64_t **)(a1 + 368); ++i)
  {
    if (a3) {
      *a3 = *i;
    }
    uint64_t v8 = *i;
    if (*(_DWORD *)(*i + 16) == a2)
    {
      uint64_t v3 = *i;
      goto LABEL_39;
    }
    long long __p = 0;
    unsigned int v25 = 0;
    uint64_t v26 = 0;
    sub_100040550(&__p, v8 + 104);
    uint64_t v9 = (char *)__p;
    unsigned int v10 = (char *)__p;
    if (__p != v25)
    {
      while (*(_DWORD *)(*(void *)v10 + 16) != a2)
      {
        v10 += 8;
        if (v10 == v25) {
          goto LABEL_8;
        }
      }
      int v16 = 1;
      uint64_t v3 = *(void *)v10;
      if (!__p) {
        goto LABEL_32;
      }
LABEL_31:
      unsigned int v25 = v9;
      operator delete(v9);
      goto LABEL_32;
    }
LABEL_8:
    uint64_t v21 = 0;
    unint64_t v22 = 0;
    uint64_t v23 = 0;
    sub_100040550(&v21, *i + 136);
    BOOL v11 = v21;
    if (v21 == v22)
    {
      int v16 = 0;
      if (v21) {
        goto LABEL_29;
      }
    }
    else
    {
      while (1)
      {
        uint64_t v12 = *(void *)v11;
        if (*(_DWORD *)(*(void *)v11 + 16) == a2) {
          break;
        }
        uint64_t v12 = *(void *)(v12 + 96);
        if (*(_DWORD *)(v12 + 16) == a2) {
          break;
        }
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        sub_100040550(&v18, *(void *)v11 + 104);
        unsigned int v13 = v18;
        if (v18 == v19)
        {
          int v16 = 0;
          BOOL v15 = 1;
          if (v18)
          {
LABEL_17:
            uint64_t v19 = v18;
            operator delete(v18);
          }
        }
        else
        {
          while (1)
          {
            int v14 = *(_DWORD *)(*(void *)v13 + 16);
            BOOL v15 = v14 != a2;
            if (v14 == a2) {
              break;
            }
            v13 += 8;
            if (v13 == v19)
            {
              int v16 = 0;
              if (v18) {
                goto LABEL_17;
              }
              goto LABEL_18;
            }
          }
          int v16 = 1;
          uint64_t v3 = *(void *)v13;
          if (v18) {
            goto LABEL_17;
          }
        }
LABEL_18:
        if (!v15) {
          goto LABEL_28;
        }
        v11 += 8;
        if (v11 == v22)
        {
          int v16 = 0;
          goto LABEL_28;
        }
      }
      int v16 = 1;
      uint64_t v3 = v12;
LABEL_28:
      BOOL v11 = v21;
      if (v21)
      {
LABEL_29:
        unint64_t v22 = v11;
        operator delete(v11);
      }
    }
    uint64_t v9 = (char *)__p;
    if (__p) {
      goto LABEL_31;
    }
LABEL_32:
    if (v16) {
      goto LABEL_39;
    }
  }
  if (a3 && *a3)
  {
    uint64_t v3 = 0;
    *a3 = 0;
  }
  else
  {
    uint64_t v3 = 0;
  }
LABEL_39:
  sub_10003AFB4((uint64_t)v27);
  return v3;
}

void sub_100424CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void *sub_100424D2C(int64x2_t *a1, char *a2, uint64_t a3)
{
  unint64_t v4 = a1[2].u64[0];
  uint64_t v5 = a1->i64[1];
  uint64_t v6 = (uint64_t *)(v5 + 8 * (v4 >> 8));
  if (a1[1].i64[0] == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *v6 + 16 * v4;
  }
  uint64_t v35 = v6;
  uint64_t v36 = v7;
  if (v7 == a3) {
    unint64_t v8 = 0;
  }
  else {
    unint64_t v8 = ((a3 - *(void *)a2) >> 4) + 32 * (a2 - (char *)v6) - ((v7 - *v6) >> 4);
  }
  uint64_t v9 = sub_10042CCFC((uint64_t)&v35, v8);
  unint64_t v11 = (unint64_t)v9;
  unint64_t v12 = v10;
  uint64_t v13 = a1[2].i64[1];
  if (v8 <= (unint64_t)(v13 - 1) >> 1)
  {
    uint64_t v19 = v10 - *v9;
    uint64_t v20 = v19 >> 4;
    if (v19 < -15)
    {
      unint64_t v29 = 254 - v20;
      unint64_t v22 = &v9[-(v29 >> 8)];
      uint64_t v23 = *v22 + 16 * ~(_BYTE)v29;
    }
    else
    {
      unint64_t v21 = v20 + 1;
      unint64_t v22 = &v9[v21 >> 8];
      uint64_t v23 = *v22 + 16 * v21;
    }
    memset(&v37, 0, 32);
    sub_10042CE28(v35, v36, v9, v10, v22, v23, &v37);
    a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1007BB7F0);
    sub_10042CD58((uint64_t)a1, 1);
  }
  else
  {
    uint64_t v14 = v10 - *v9;
    uint64_t v15 = v14 >> 4;
    if (v14 < -15)
    {
      unint64_t v24 = 254 - v15;
      uint64_t v17 = (char **)&v9[-(v24 >> 8)];
      uint64_t v18 = &(*v17)[16 * ~(_BYTE)v24];
    }
    else
    {
      unint64_t v16 = v15 + 1;
      uint64_t v17 = (char **)&v9[v16 >> 8];
      uint64_t v18 = &(*v17)[16 * v16];
    }
    unint64_t v25 = a1[2].i64[0] + v13;
    uint64_t v26 = a1->i64[1];
    unint64_t v27 = (char **)(v26 + 8 * (v25 >> 8));
    if (a1[1].i64[0] == v26) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = &(*v27)[16 * v25];
    }
    v37.n128_u64[0] = v11;
    v37.n128_u64[1] = v12;
    sub_10042CFA4(v17, v18, v27, v28, (uint64_t)&v37);
    --a1[2].i64[1];
    sub_10042CDB8(a1, 1);
  }
  unint64_t v30 = a1[2].u64[0];
  uint64_t v31 = a1->i64[1];
  uint64_t v32 = (void *)(v31 + 8 * (v30 >> 8));
  if (a1[1].i64[0] == v31) {
    uint64_t v33 = 0;
  }
  else {
    uint64_t v33 = *v32 + 16 * v30;
  }
  v37.n128_u64[0] = (unint64_t)v32;
  v37.n128_u64[1] = v33;
  return sub_10042CCFC((uint64_t)&v37, v8);
}

uint64_t sub_100424F2C(uint64_t a1, int *a2, uint64_t *a3)
{
  v31[0] = 0;
  v31[1] = 0;
  sub_10003AED0((uint64_t)v31, a1 + 40);
  uint64_t v6 = sub_100423AEC(a1, *a2);
  uint64_t v7 = v6;
  if (v6)
  {
    uint64_t v28 = 0;
    unint64_t v29 = 0;
    uint64_t v30 = 0;
    sub_100040550(&v28, v6 + 136);
    unint64_t v8 = v28;
    if (v28 != v29)
    {
      uint64_t v9 = (void *)(a1 + 416);
      do
      {
        unint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        sub_100040550(&v25, *(void *)v8 + 104);
        uint64_t v10 = v25;
        if (v25 != v26)
        {
          do
          {
            uint64_t v11 = *(void *)(*(void *)v10 + 8);
            int v12 = *(_DWORD *)(v11 + 20);
            *(_OWORD *)uuid_t dst = *(_OWORD *)(v11 + 4);
            int v36 = v12;
            sub_100035F98(&v34, (__n128 *)dst);
            int v33 = 0;
            long long v32 = xmmword_1007BEA38;
            if (sub_10022A44C((unsigned __int8 *)&v34, (unsigned __int8 *)&v32))
            {
              uint64_t v13 = (void *)*v9;
              if (*v9)
              {
                unint64_t v14 = *(void *)v10;
                uint64_t v15 = v9;
                do
                {
                  unint64_t v16 = v13[4];
                  BOOL v17 = v16 >= v14;
                  if (v16 >= v14) {
                    uint64_t v18 = v13;
                  }
                  else {
                    uint64_t v18 = v13 + 1;
                  }
                  if (v17) {
                    uint64_t v15 = v13;
                  }
                  uint64_t v13 = (void *)*v18;
                }
                while (*v18);
                if (v15 != v9 && v14 >= v15[4])
                {
                  uint64_t v20 = v15[5];
                  uint64_t v19 = v15[6];
                  while (v20 != v19)
                  {
                    if (*(_WORD *)(v20 + 16))
                    {
                      int v21 = *(_DWORD *)(*(void *)v8 + 16);
                      uuid_copy(dst, (const unsigned __int8 *)v20);
                      int v36 = v21;
                      unint64_t v22 = a3[1];
                      if (v22 >= a3[2])
                      {
                        uint64_t v23 = sub_10042D0D8(a3, (uint64_t)dst);
                      }
                      else
                      {
                        uuid_copy((unsigned __int8 *)a3[1], dst);
                        *(_DWORD *)(v22 + 16) = v36;
                        uint64_t v23 = v22 + 20;
                        a3[1] = v22 + 20;
                      }
                      a3[1] = v23;
                      uint64_t v19 = v15[6];
                    }
                    v20 += 18;
                  }
                }
              }
            }
            v10 += 8;
          }
          while (v10 != v26);
          uint64_t v10 = v25;
        }
        if (v10)
        {
          uint64_t v26 = v10;
          operator delete(v10);
        }
        v8 += 8;
      }
      while (v8 != v29);
      unint64_t v8 = v28;
    }
    if (v8)
    {
      unint64_t v29 = v8;
      operator delete(v8);
    }
  }
  sub_10003AFB4((uint64_t)v31);
  return v7;
}

void sub_100425168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
}

uint64_t sub_1004251C8(uint64_t a1)
{
  v14[0] = 0;
  v14[1] = 0;
  sub_10003AED0((uint64_t)v14, a1 + 40);
  if (*(unsigned char *)(a1 + 32))
  {
    if (qword_1009FB240 != -1) {
      dispatch_once(&qword_1009FB240, &stru_1009ADD38);
    }
    if (!sub_1004C09B4(qword_1009FB238))
    {
      char v13 = 0;
      sub_10001B8E0(&v13);
      if (sub_100213194())
      {
        uint64_t v2 = qword_100A19E88;
        if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_INFO))
        {
          LOWORD(v12.__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Compacting database!", (uint8_t *)&v12, 2u);
        }
        unint64_t v4 = *(uint64_t **)(a1 + 360);
        uint64_t v3 = *(uint64_t **)(a1 + 368);
        while (v4 != v3)
        {
          uint64_t v5 = *v4;
          if (*v4 != *(void *)(a1 + 112) && v5 != *(void *)(a1 + 128))
          {
            sub_10023095C(*(unsigned __int16 **)(v5 + 8));
            uint64_t v3 = *(uint64_t **)(a1 + 368);
          }
          ++v4;
        }
        sub_100212A1C();
        sub_10001B910(&v13);
        sub_100423FAC(a1, 0, (unsigned __int16)(*(_WORD *)(*(void *)(a1 + 128) + 48) + 1), 0xFFFFu);
        sub_10042C61C(a1 + 408, *(void **)(a1 + 416));
        *(void *)(a1 + 416) = 0;
        *(void *)(a1 + 424) = 0;
        *(void *)(a1 + 408) = a1 + 416;
        uint64_t v7 = *(uint64_t **)(a1 + 360);
        uint64_t v6 = *(uint64_t **)(a1 + 368);
        while (v7 != v6)
        {
          unint64_t v8 = (void *)*v7;
          if (*v7 != *(void *)(a1 + 112) && v8 != *(void **)(a1 + 128))
          {
            int v9 = sub_10042209C(a1, *v7, 1);
            if (v9)
            {
              uint64_t v10 = qword_100A19E88;
              if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
              {
                sub_100613B58(v8, &v12);
                sub_100766F64((char *)&v12, buf, v9, v10);
              }
              break;
            }
            uint64_t v6 = *(uint64_t **)(a1 + 368);
          }
          ++v7;
        }
      }
      sub_10001B8AC(&v13);
    }
  }
  return sub_10003AFB4((uint64_t)v14);
}

void sub_1004253E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

uint64_t sub_100425420(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v6 = sub_10042D258(a1 + 232, a2);
  uint64_t v7 = sub_10042D258(a1 + 256, a2);
  BOOL v8 = a1 + 240 == v6;
  if (a1 + 240 == v6) {
    unsigned int v9 = 0;
  }
  else {
    unsigned int v9 = a3;
  }
  if (a1 + 264 != v7) {
    BOOL v8 = 0;
  }
  return v8 | v9;
}

uint64_t sub_100425490(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, int *a5)
{
  v39[0] = 0;
  v39[1] = 0;
  sub_10003AED0((uint64_t)v39, a1 + 40);
  if (!*(unsigned char *)(a1 + 32)) {
    return sub_10003AFB4((uint64_t)v39);
  }
  uint64_t v10 = *(void *)(a1 + 392);
  if (v10)
  {
    uint64_t v11 = (uint64_t **)(a1 + 384);
    unsigned int v12 = *a2;
    uint64_t v13 = a1 + 392;
    do
    {
      unsigned int v14 = *(_DWORD *)(v10 + 32);
      BOOL v15 = v14 >= v12;
      if (v14 >= v12) {
        unint64_t v16 = (uint64_t *)v10;
      }
      else {
        unint64_t v16 = (uint64_t *)(v10 + 8);
      }
      if (v15) {
        uint64_t v13 = v10;
      }
      uint64_t v10 = *v16;
    }
    while (*v16);
    if (v13 != a1 + 392 && v12 >= *(_DWORD *)(v13 + 32))
    {
      if (!*(unsigned char *)(v13 + 44))
      {
        char v38 = 0;
        sub_10001B8E0(&v38);
        int v33 = *(void (**)(uint64_t, uint64_t, uint64_t, void))(v13 + 48);
        uint64_t v34 = *a2;
        uint64_t v35 = sub_10004A6E4(a4);
        unsigned __int16 v36 = sub_100045F00(a4);
        v33(v34, a3, v35, v36);
LABEL_26:
        sub_10001B8AC(&v38);
        sub_10004D3B8(v11, (uint64_t *)v13);
        operator delete((void *)v13);
        return sub_10003AFB4((uint64_t)v39);
      }
      if (a3)
      {
        uint64_t v24 = sub_100424AC0(a1, *a5, 0);
        if (v24)
        {
LABEL_21:
          char v38 = 0;
          sub_10001B8E0(&v38);
          if (v24) {
            uint64_t v32 = *(void *)(v24 + 8);
          }
          else {
            uint64_t v32 = 0;
          }
          (*(void (**)(void, uint64_t, uint64_t))(v13 + 48))(*a2, a3, v32);
          goto LABEL_26;
        }
        unint64_t v25 = qword_100A19E88;
        if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
          sub_100767058((uint64_t)a5, v25, v26, v27, v28, v29, v30, v31);
        }
      }
      uint64_t v24 = 0;
      goto LABEL_21;
    }
  }
  BOOL v17 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
    sub_100766FE8((uint64_t)a2, v17, v18, v19, v20, v21, v22, v23);
  }
  return sub_10003AFB4((uint64_t)v39);
}

void sub_100425650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100425680(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  id v7 = a3;
  v40[0] = 0;
  v40[1] = 0;
  sub_10003AED0((uint64_t)v40, a1 + 40);
  if (*(unsigned char *)(a1 + 32))
  {
    unint64_t v8 = *(void *)(a1 + 464);
    uint64_t v9 = *(void *)(a1 + 440);
    uint64_t v10 = *(void *)(a1 + 448);
    uint64_t v11 = (void *)(v9 + 8 * (v8 >> 8));
    if (v10 == v9) {
      unsigned int v12 = 0;
    }
    else {
      unsigned int v12 = (void *)(*v11 + 16 * v8);
    }
LABEL_5:
    uint64_t v13 = v12 - 512;
    while (1)
    {
      uint64_t v14 = v10 == v9
          ? 0
          : *(void *)(v9 + (((*(void *)(a1 + 472) + v8) >> 5) & 0x7FFFFFFFFFFFFF8))
          + 16 * (*(unsigned char *)(a1 + 472) + v8);
      if (v12 == (void *)v14) {
        break;
      }
      if (*v12 == a2)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
        {
          sub_10003AE4C(a2, (uint64_t)&v46);
          sub_1007671E0();
        }
        goto LABEL_22;
      }
      v12 += 2;
      v13 += 2;
      if ((void *)*v11 == v13)
      {
        BOOL v15 = (void *)v11[1];
        ++v11;
        unsigned int v12 = v15;
        goto LABEL_5;
      }
    }
    uint64_t v16 = sub_100424AC0(a1, a4, 0);
    BOOL v17 = (void *)v16;
    if (v16
      && (uint64_t v18 = *(void *)(v16 + 8),
          int v19 = *(_DWORD *)(v18 + 20),
          *(_OWORD *)&v46.__r_.__value_.__l.__data_ = *(_OWORD *)(v18 + 4),
          LODWORD(v46.__r_.__value_.__r.__words[2]) = v19,
          sub_100035F98(v45, (__n128 *)&v46),
          int v44 = 0,
          long long v43 = xmmword_1007BEA4C,
          sub_10022A44C((unsigned __int8 *)v45, (unsigned __int8 *)&v43)))
    {
      sub_100040550(&v46, (uint64_t)(v17 + 13));
      std::string::size_type size = v46.__r_.__value_.__l.__size_;
      uint64_t v20 = (void *)v46.__r_.__value_.__r.__words[0];
      if (v46.__r_.__value_.__r.__words[0] == v46.__r_.__value_.__l.__size_) {
        goto LABEL_34;
      }
      std::string::size_type v22 = v46.__r_.__value_.__r.__words[0];
      while (1)
      {
        uint64_t v23 = *(void *)(*(void *)v22 + 8);
        int v24 = *(_DWORD *)(v23 + 20);
        *(_OWORD *)&v46.__r_.__value_.__l.__data_ = *(_OWORD *)(v23 + 4);
        LODWORD(v46.__r_.__value_.__r.__words[2]) = v24;
        sub_100035F98(v45, (__n128 *)&v46);
        int v42 = 0;
        long long v41 = xmmword_1007BEA38;
        if (sub_10022A44C((unsigned __int8 *)v45, (unsigned __int8 *)&v41)) {
          break;
        }
        v22 += 8;
        if (v22 == size) {
          goto LABEL_34;
        }
      }
      unint64_t v26 = *(void *)v22;
      if (!*(void *)v22)
      {
LABEL_34:
        if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
        {
          sub_100613B58(v17, &v46);
          sub_100767130();
        }
      }
      else
      {
        if ([v7 count]) {
          operator new();
        }
        unint64_t v36 = v26;
        uint64_t v27 = (void *)(a1 + 416);
        uint64_t v28 = *(void **)(a1 + 416);
        if (!v28) {
          goto LABEL_47;
        }
        uint64_t v29 = (void *)(a1 + 416);
        do
        {
          unint64_t v30 = v28[4];
          BOOL v31 = v30 >= v36;
          if (v30 >= v36) {
            uint64_t v32 = v28;
          }
          else {
            uint64_t v32 = v28 + 1;
          }
          if (v31) {
            uint64_t v29 = v28;
          }
          uint64_t v28 = (void *)*v32;
        }
        while (*v32);
        if (v29 == v27 || v36 < v29[4]) {
LABEL_47:
        }
          uint64_t v29 = (void *)(a1 + 416);
        char v38 = +[NSMutableArray array];
        if (v29 != v27)
        {
          uint64_t v34 = v29[5];
          uint64_t v33 = v29[6];
          while (v34 != v33)
          {
            if (*(_WORD *)(v34 + 16))
            {
              uint64_t v35 = sub_100031234((const unsigned __int8 *)v34);
              [v38 addObject:v35];

              uint64_t v33 = v29[6];
            }
            v34 += 18;
          }
        }
        if ([v38 count]) {
          operator new();
        }
        if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
        {
          sub_100613B58(v37, &v46);
          sub_100767188();
        }
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
        sub_1007670C8();
      }
      uint64_t v20 = 0;
    }
    if (*(void *)(a1 + 104))
    {
      uint64_t v25 = sub_100019878();
      v39[0] = _NSConcreteStackBlock;
      v39[1] = 3221225472;
      void v39[2] = sub_100426904;
      v39[3] = &unk_100998260;
      v39[4] = a1;
      v39[5] = a2;
      sub_100013018(v25, v39);
    }
    sub_10003AFB4((uint64_t)v40);
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
LABEL_22:
    sub_10003AFB4((uint64_t)v40);
  }
}

void sub_100425B38(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  sub_10003AFB4((uint64_t)va);
  if (v10) {
    operator delete(v10);
  }

  _Unwind_Resume(a1);
}

__n128 sub_100425BF8(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10042D2D4(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

void sub_100425C84(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 480))
  {
    uint64_t v1 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Not sending updates as TX queue is full", buf, 2u);
    }
    return;
  }
  int v68 = (int64x2_t *)(a1 + 432);
  unint64_t v3 = *(void *)(a1 + 464);
  uint64_t v4 = *(void *)(a1 + 440);
  uint64_t v5 = *(void *)(a1 + 448);
  uint64_t v6 = (char *)(v4 + 8 * (v3 >> 8));
  if (v5 == v4) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = (uint64_t *)(*(void *)v6 + 16 * v3);
  }
  v79 = (void *)(a1 + 416);
  uint64_t v73 = a1 + 544;
  uint64_t v74 = a1 + 536;
  while (1)
  {
    if (v5 == v4)
    {
      uint64_t v9 = 0;
    }
    else
    {
      unint64_t v8 = *(void *)(a1 + 472) + *(void *)(a1 + 464);
      uint64_t v9 = *(void *)(v4 + ((v8 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v8;
    }
    if (v7 == (uint64_t *)v9) {
      return;
    }
    uint64_t v10 = v7[1];
    uint64_t v71 = *v7;
    uint64_t v77 = *(void *)(a1 + 328);
    unint64_t v78 = *(void *)(v10 + 16);
    uint64_t v76 = v10;
    if (v78 != v77)
    {
      uint64_t v11 = (void *)*v79;
      if (!*v79) {
        goto LABEL_24;
      }
      unsigned int v12 = v79;
      do
      {
        unint64_t v13 = v11[4];
        BOOL v14 = v13 >= v78;
        if (v13 >= v78) {
          BOOL v15 = v11;
        }
        else {
          BOOL v15 = v11 + 1;
        }
        if (v14) {
          unsigned int v12 = v11;
        }
        uint64_t v11 = (void *)*v15;
      }
      while (*v15);
      if (v12 == v79 || v78 < v12[4])
      {
LABEL_24:
        uint64_t v16 = qword_100A19E88;
        if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
          sub_100767238(&v87, v88, v16);
        }
        char v72 = (char *)sub_100424D2C(v68, v6, (uint64_t)v7);
        unint64_t v7 = v17;
        if (v76)
        {
          *(void *)(v76 + 24) = &off_100998428;
          uint64_t v18 = *(atomic_uint **)(v76 + 32);
          if (v18) {
            sub_1000368F4(v18);
          }

          operator delete();
        }
        if (*(void *)(a1 + 104))
        {
          uint64_t v19 = sub_100019878();
          v86[0] = _NSConcreteStackBlock;
          v86[1] = 3221225472;
          v86[2] = sub_10042971C;
          v86[3] = &unk_100998260;
          v86[4] = a1;
          v86[5] = v71;
          sub_100013018(v19, v86);
        }
        goto LABEL_123;
      }
    }
    uint64_t v69 = (uint64_t)v7;
    char v72 = v6;
    id v70 = [*(id *)v10 mutableCopy];
    uint64_t v20 = +[NSMutableArray array];
    long long v84 = 0u;
    long long v85 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    id obj = v70;
    id v21 = [obj countByEnumeratingWithState:&v82 objects:v93 count:16];
    if (v21) {
      break;
    }
LABEL_115:

    [obj removeObjectsInArray:v20];
    if (![obj count])
    {
      sub_100424D2C(v68, v72, v69);
      *(void *)(v76 + 24) = &off_100998428;
      __n128 v64 = *(atomic_uint **)(v76 + 32);
      if (v64) {
        sub_1000368F4(v64);
      }

      operator delete();
    }
    id v62 = [obj copy];
    id v63 = *(id *)v76;
    *(void *)uint64_t v76 = v62;

    if (v69 + 16 - *(void *)v72 == 4096)
    {
      unint64_t v7 = (uint64_t *)*((void *)v72 + 1);
      v72 += 8;
    }
    else
    {
      unint64_t v7 = (uint64_t *)(v69 + 16);
    }

LABEL_123:
    uint64_t v4 = *(void *)(a1 + 440);
    uint64_t v5 = *(void *)(a1 + 448);
    uint64_t v6 = v72;
  }
  uint64_t v22 = *(void *)v83;
  uint64_t v75 = v76 + 24;
LABEL_34:
  uint64_t v23 = 0;
  while (1)
  {
    if (*(void *)v83 != v22) {
      objc_enumerationMutation(obj);
    }
    int v24 = *(char **)(*((void *)&v82 + 1) + 8 * v23);
    if (qword_1009FB240 != -1) {
      dispatch_once(&qword_1009FB240, &stru_1009ADD38);
    }
    if (!sub_1004C063C(qword_1009FB238, v24))
    {
      uint64_t v28 = qword_100A19E88;
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 138543362;
        uint64_t v90 = v24;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Dropping update of device \"%{public}@\" as it is no longer connected", buf, 0xCu);
      }
      goto LABEL_72;
    }
    if (![*(id *)(a1 + 488) containsObject:v24]) {
      break;
    }
    uint64_t v25 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 138543362;
      uint64_t v90 = v24;
      unint64_t v26 = v25;
      uint64_t v27 = "Skipping update of device \"%{public}@\" as it is being stalled";
LABEL_43:
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, v27, buf, 0xCu);
    }
LABEL_73:
    if ((id)++v23 == v21)
    {
      id v61 = [obj countByEnumeratingWithState:&v82 objects:v93 count:16];
      id v21 = v61;
      if (v61) {
        goto LABEL_34;
      }
      goto LABEL_115;
    }
  }
  if (v78 != v77)
  {
    uint64_t v29 = v79;
    unint64_t v30 = (void *)*v79;
    if (!*v79) {
      goto LABEL_59;
    }
    unint64_t v31 = *(void *)(v76 + 16);
    uint64_t v32 = v79;
    do
    {
      unint64_t v33 = v30[4];
      BOOL v34 = v33 >= v31;
      if (v33 >= v31) {
        uint64_t v35 = v30;
      }
      else {
        uint64_t v35 = v30 + 1;
      }
      if (v34) {
        uint64_t v32 = v30;
      }
      unint64_t v30 = (void *)*v35;
    }
    while (*v35);
    uint64_t v29 = v79;
    if (v32 == v79 || v31 < v32[4]) {
LABEL_59:
    }
      uint64_t v32 = v29;
    for (uint64_t i = v32[5]; i != v32[6]; i += 18)
    {
      __n128 v37 = sub_100031234((const unsigned __int8 *)i);
      unsigned __int8 v38 = [v37 isEqual:v24];

      if (v38)
      {
        if (*(_WORD *)(i + 16) == 2) {
          goto LABEL_75;
        }
        if (*(_WORD *)(i + 16))
        {
          int v45 = 1;
          goto LABEL_82;
        }
        break;
      }
    }
LABEL_70:
    int v42 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 138543362;
      uint64_t v90 = v24;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "Dropping update of device \"%{public}@\" as it is no longer subscribed", buf, 0xCu);
    }
    goto LABEL_72;
  }
  for (j = *(const unsigned __int8 **)(a1 + 336); ; j += 20)
  {
    if (j == *(const unsigned __int8 **)(a1 + 344)) {
      goto LABEL_70;
    }
    uint64_t v40 = sub_100031234(j);
    unsigned __int8 v41 = [v40 isEqual:v24];

    if (v41) {
      break;
    }
  }
LABEL_75:
  long long v43 = [*(id *)(a1 + 504) objectForKey:v24];
  if (v43)
  {

LABEL_78:
    uint64_t v44 = qword_100A19E88;
    if (!os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_73;
    }
    *(_DWORD *)std::string buf = 138543362;
    uint64_t v90 = v24;
    unint64_t v26 = v44;
    uint64_t v27 = "Skipping update of device \"%{public}@\" as we're still waiting on an indication response";
    goto LABEL_43;
  }
  if ([*(id *)(a1 + 496) containsObject:v24]) {
    goto LABEL_78;
  }
  int v45 = 0;
LABEL_82:
  sub_1000305AC(buf, v24);
  uint64_t v46 = sub_1000308C0(v74, buf);
  uint64_t v47 = qword_100A19E88;
  if (v73 == v46)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 138543362;
      uint64_t v90 = v24;
      _os_log_error_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "Dropping update of device \"%{public}@\" as we have no ATT session", buf, 0xCu);
    }
LABEL_72:
    [v20 addObject:v24];
    goto LABEL_73;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136446466;
    int v48 = "indication";
    if (v45) {
      int v48 = "notification";
    }
    uint64_t v90 = v48;
    __int16 v91 = 2114;
    uint64_t v92 = v24;
    _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "Sending %{public}s to device \"%{public}@\"", buf, 0x16u);
  }
  char v81 = 0;
  sub_10001B8E0(&v81);
  uint64_t v49 = *(void *)(v46 + 48);
  uint64_t v50 = *(unsigned __int8 **)(*(void *)(v76 + 8) + 8);
  uint64_t v51 = (const void *)sub_10004A6E4(v75);
  unsigned __int16 v52 = sub_100045F00(v75);
  int v53 = sub_100230F80(v49, v50, v45, v51, v52);
  sub_10001B910(&v81);
  if (!v53)
  {
    if ((v45 & 1) == 0)
    {
      if (v71)
      {
        long long v55 = [*(id *)(a1 + 504) objectForKey:v24];
        BOOL v56 = v55 == 0;

        if (!v56)
        {
          uint64_t v57 = qword_100A19E88;
          if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)std::string buf = 138543362;
            uint64_t v90 = v24;
            _os_log_fault_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_FAULT, "Already tracking indication for device \"%{public}@\"", buf, 0xCu);
          }
        }
        [*(id *)(a1 + 504) setObject:v71 forKey:v24];
      }
      else
      {
        if ([*(id *)(a1 + 496) containsObject:v24])
        {
          std::string v60 = qword_100A19E88;
          if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)std::string buf = 138543362;
            uint64_t v90 = v24;
            _os_log_fault_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_FAULT, "Already tracking services changed for device \"%{public}@\"", buf, 0xCu);
          }
        }
        [*(id *)(a1 + 496) addObject:v24];
      }
    }
LABEL_112:
    [v20 addObject:v24];
LABEL_113:
    sub_10001B8AC(&v81);
    goto LABEL_73;
  }
  if (v53 == 146)
  {
    int v58 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 138543362;
      uint64_t v90 = v24;
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "Stalling updates to device \"%{public}@\" as it is performing an MTU exchange", buf, 0xCu);
    }
    if ([*(id *)(a1 + 488) containsObject:v24])
    {
      long long v59 = qword_100A19E88;
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::string buf = 138543362;
        uint64_t v90 = v24;
        _os_log_fault_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_FAULT, "Already stalling device \"%{public}@\"", buf, 0xCu);
      }
    }
    [*(id *)(a1 + 488) addObject:v24];
    goto LABEL_113;
  }
  if (v53 != 410)
  {
    uint64_t v54 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 138543618;
      uint64_t v90 = v24;
      __int16 v91 = 1024;
      LODWORD(v92) = v53;
      _os_log_error_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "Failed to send update to device \"%{public}@\" with result %{bluetooth:OI_STATUS}u", buf, 0x12u);
    }
    goto LABEL_112;
  }
  uint64_t v65 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "TX queue is full - stalling all updates", buf, 2u);
  }
  *(unsigned char *)(a1 + 480) = 1;
  [obj removeObjectsInArray:v20];
  id v66 = [obj copy];
  id v67 = *(id *)v76;
  *(void *)uint64_t v76 = v66;

  sub_10001B8AC(&v81);
}

void sub_100426874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_10001B8AC(&a43);

  _Unwind_Resume(a1);
}

uint64_t sub_100426904(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 32) + 104) + 8))(*(void *)(*(void *)(a1 + 32) + 104), *(void *)(a1 + 40));
}

id sub_100426930(uint64_t a1)
{
  uint64_t v2 = +[NSMutableSet set];
  v13[0] = 0;
  v13[1] = 0;
  sub_10003AED0((uint64_t)v13, a1 + 40);
  unint64_t v3 = *(void **)(a1 + 408);
  uint64_t v4 = (void *)(a1 + 416);
  if (v3 != (void *)(a1 + 416))
  {
    do
    {
      uint64_t v6 = v3[5];
      uint64_t v5 = v3[6];
      while (v6 != v5)
      {
        if (*(_WORD *)(v6 + 16))
        {
          unint64_t v7 = sub_100031234((const unsigned __int8 *)v6);
          [v2 addObject:v7];

          uint64_t v5 = v3[6];
        }
        v6 += 18;
      }
      unint64_t v8 = (void *)v3[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          unint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void *)v3[2];
          BOOL v10 = *v9 == (void)v3;
          unint64_t v3 = v9;
        }
        while (!v10);
      }
      unint64_t v3 = v9;
    }
    while (v9 != v4);
  }
  uint64_t v11 = [v2 allObjects];
  sub_10003AFB4((uint64_t)v13);

  return v11;
}

void sub_100426A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_100426A74(uint64_t a1, unsigned int a2)
{
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, a1 + 40);
  uint64_t v4 = *(void *)(a1 + 392);
  if (!v4) {
    goto LABEL_20;
  }
  uint64_t v5 = (uint64_t **)(a1 + 384);
  uint64_t v6 = a1 + 392;
  uint64_t v7 = a1 + 392;
  do
  {
    unsigned int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      BOOL v10 = (uint64_t *)v4;
    }
    else {
      BOOL v10 = (uint64_t *)(v4 + 8);
    }
    if (v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }
  while (*v10);
  if (v7 != v6 && *(_DWORD *)(v7 + 32) <= a2)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
      sub_1007672E0();
    }
    sub_10004D3B8(v5, (uint64_t *)v7);
    operator delete((void *)v7);
  }
  else
  {
LABEL_20:
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
      sub_100767278();
    }
  }
  return sub_10003AFB4((uint64_t)v12);
}

uint64_t sub_100426B70(uint64_t a1, uint64_t a2, int a3)
{
  v14[0] = 0;
  v14[1] = 0;
  sub_10003AED0((uint64_t)v14, a1 + 40);
  uint64_t v6 = sub_100426D14(a1, a2);
  if (v6)
  {
    uint64_t v7 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109378;
      int v16 = a3;
      __int16 v17 = 2114;
      uint64_t v18 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "MTU is now %u for device \"%{public}@\"", buf, 0x12u);
    }
    if (*(void *)(a1 + 104))
    {
      uint64_t v8 = sub_100019878();
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      void v10[2] = sub_100426DD0;
      void v10[3] = &unk_1009AA5D8;
      uint64_t v12 = a1;
      id v11 = v6;
      __int16 v13 = a3;
      sub_100013018(v8, v10);
    }
  }

  return sub_10003AFB4((uint64_t)v14);
}

void sub_100426CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_100426D14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(const unsigned __int8 **)(a1 + 536);
  if (v2 == (const unsigned __int8 *)(a1 + 544))
  {
LABEL_9:
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
      sub_100767348();
    }
    uint64_t v6 = 0;
  }
  else
  {
    while (*((void *)v2 + 6) != a2)
    {
      unint64_t v3 = (unsigned __int8 *)*((void *)v2 + 1);
      if (v3)
      {
        do
        {
          uint64_t v4 = (const unsigned __int8 **)v3;
          unint64_t v3 = *(unsigned __int8 **)v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          uint64_t v4 = (const unsigned __int8 **)*((void *)v2 + 2);
          BOOL v5 = *v4 == v2;
          uint64_t v2 = (const unsigned __int8 *)v4;
        }
        while (!v5);
      }
      uint64_t v2 = (const unsigned __int8 *)v4;
      if (v4 == (const unsigned __int8 **)(a1 + 544)) {
        goto LABEL_9;
      }
    }
    uint64_t v6 = sub_100031234(v2 + 32);
  }

  return v6;
}

uint64_t sub_100426DD0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(**(void **)(*(void *)(a1 + 40) + 104) + 16))(*(void *)(*(void *)(a1 + 40) + 104), *(void *)(a1 + 32), *(unsigned __int16 *)(a1 + 48));
}

uint64_t sub_100426E04(uint64_t a1, uint64_t a2)
{
  v15[0] = 0;
  v15[1] = 0;
  sub_10003AED0((uint64_t)v15, a1 + 40);
  uint64_t v4 = sub_100426D14(a1, a2);
  if (v4)
  {
    if ([*(id *)(a1 + 496) containsObject:v4])
    {
      BOOL v5 = qword_100A19E88;
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = "indicationConfirmed";
        *(_WORD *)&unsigned char buf[12] = 2114;
        *(void *)&buf[14] = v4;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%s - Server Indication - Device:%{public}@", buf, 0x16u);
      }
      [*(id *)(a1 + 496) removeObject:v4];
      uint64_t v6 = *(void *)(a1 + 336);
      uint64_t v7 = *(void *)(a1 + 344);
      while (v6 != v7)
      {
        memset(buf, 0, 20);
        uuid_copy(buf, (const unsigned __int8 *)v6);
        *(_DWORD *)&uint8_t buf[16] = *(_DWORD *)(v6 + 16);
        uint64_t v8 = sub_100031234(buf);
        [v4 isEqual:v8];

        v6 += 20;
      }
    }
    else
    {
      id v9 = [*(id *)(a1 + 504) objectForKey:v4];
      BOOL v10 = qword_100A19E88;
      if (v9)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "indicationConfirmed";
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = v4;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%s - App Indication - Device:%{public}@", buf, 0x16u);
        }
        id v11 = [*(id *)(a1 + 504) objectForKey:v4];
        [*(id *)(a1 + 504) removeObjectForKey:v4];
        if (*(void *)(a1 + 104))
        {
          uint64_t v12 = sub_100019878();
          v14[0] = _NSConcreteStackBlock;
          v14[1] = 3221225472;
          void v14[2] = sub_1004270C0;
          v14[3] = &unk_100998260;
          v14[4] = a1;
          unsigned __int8 v14[5] = v11;
          sub_100013018(v12, v14);
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
      {
        sub_10076737C((uint64_t)v4, v10);
      }
    }
    sub_100425C84(a1);
  }

  return sub_10003AFB4((uint64_t)v15);
}

void sub_100427084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004270C0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 32) + 104) + 8))(*(void *)(*(void *)(a1 + 32) + 104), *(void *)(a1 + 40));
}

uint64_t sub_1004270EC(uint64_t a1, uint64_t a2)
{
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 40);
  if (a2)
  {
    uint64_t v4 = sub_100426D14(a1, a2);
    if (v4)
    {
      BOOL v5 = qword_100A19E88;
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 138543362;
        BOOL v10 = v4;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Received device \"%{public}@\" ready event from stack", buf, 0xCu);
      }
      if ([*(id *)(a1 + 488) containsObject:v4])
      {
        [*(id *)(a1 + 488) removeObject:v4];
        sub_100425C84(a1);
      }
    }
  }
  else
  {
    uint64_t v6 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received update queue ready event from stack", buf, 2u);
    }
    *(unsigned char *)(a1 + 480) = 0;
    sub_100425C84(a1);
  }
  return sub_10003AFB4((uint64_t)v8);
}

void sub_10042724C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100427278(uint64_t a1, uint64_t a2, unint64_t a3, int a4, uint64_t *a5)
{
  unsigned int v23 = a2;
  v22[0] = 0;
  v22[1] = 0;
  sub_10003AED0((uint64_t)v22, a1 + 40);
  uint64_t v10 = a1 + 520;
  id v11 = *(void **)(a1 + 520);
  if (!v11) {
    goto LABEL_12;
  }
  uint64_t v12 = a1 + 520;
  do
  {
    unint64_t v13 = v11[4];
    BOOL v14 = v13 >= a3;
    if (v13 >= a3) {
      BOOL v15 = v11;
    }
    else {
      BOOL v15 = v11 + 1;
    }
    if (v14) {
      uint64_t v12 = (uint64_t)v11;
    }
    id v11 = (void *)*v15;
  }
  while (*v15);
  if (v12 == v10 || *(void *)(v12 + 32) > a3) {
LABEL_12:
  }
    uint64_t v12 = a1 + 520;
  if (v12 != v10 || a4 == 0)
  {
    if (a4)
    {
      __int16 v17 = sub_100426D14(a1, a3);
      if (v17)
      {
        if (*(void *)(a1 + 104))
        {
          int v24 = &v23;
          uint64_t v18 = sub_100360408((uint64_t **)(a1 + 384), &v23, (uint64_t)&unk_1007BE9D0, &v24);
          *((_DWORD *)v18 + 10) = 0;
          *((unsigned char *)v18 + 44) = 1;
          *(_WORD *)((char *)v18 + 45) = 0;
          *((unsigned char *)v18 + 47) = 0;
          v18[6] = a5;
          sub_100019878();
          operator new();
        }
        uint64_t v20 = 242;
      }
      else
      {
        uint64_t v20 = 14;
      }
    }
    else
    {
      uint64_t v20 = 0;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
      sub_100767408();
    }
    uint64_t v20 = 14;
  }
  if (v12 != v10) {
    sub_10042CC6C((uint64_t **)(a1 + 512), v12);
  }
  if (a5)
  {
    LOBYTE(v24) = 0;
    sub_10001B8E0(&v24);
    ((void (*)(uint64_t, uint64_t, void))a5)(a2, v20, 0);
    sub_10001B8AC(&v24);
  }
  return sub_10003AFB4((uint64_t)v22);
}

void sub_100427484()
{
}

uint64_t sub_1004274DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  v14[0] = 0;
  v14[1] = 0;
  sub_10003AED0((uint64_t)v14, a1 + 40);
  if (*(void *)(a1 + 104) && sub_100427620(a1, a2, &v15, &v16) && v15)
  {
    uint64_t v6 = sub_100426D14(a1, a3);
    if (v6)
    {
      int v7 = *(_DWORD *)(v16 + 16);
      uint64_t v8 = sub_100019878();
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      void v10[2] = sub_1004278FC;
      void v10[3] = &unk_100999A10;
      uint64_t v12 = a1;
      id v11 = v6;
      int v13 = v7;
      sub_100013018(v8, v10);
    }
  }
  return sub_10003AFB4((uint64_t)v14);
}

void sub_1004275EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100427620(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v29[0] = 0;
  v29[1] = 0;
  sub_10003AED0((uint64_t)v29, a1 + 40);
  id v9 = *(uint64_t **)(a1 + 360);
  if (v9 == *(uint64_t **)(a1 + 368))
  {
LABEL_45:
    if (a3) {
      *a3 = 0;
    }
    uint64_t v4 = 0;
    if (a4) {
      *a4 = 0;
    }
    goto LABEL_53;
  }
LABEL_2:
  if (a4) {
    *a4 = *v9;
  }
  uint64_t v10 = *v9;
  if (*(void *)(*v9 + 8) != a2)
  {
    long long __p = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    sub_100040550(&__p, v10 + 104);
    id v11 = (char *)__p;
    uint64_t v12 = (char *)__p;
    if (__p != v27)
    {
      do
      {
        if (*(void *)(*(void *)v12 + 8) == a2)
        {
          if (a3)
          {
            *a3 = *v9;
            uint64_t v4 = *(void *)v12;
            int v17 = 1;
          }
          else
          {
            int v17 = 1;
            uint64_t v4 = *(void *)v12;
          }
          goto LABEL_39;
        }
        v12 += 8;
      }
      while (v12 != v27);
    }
    unsigned int v23 = 0;
    int v24 = 0;
    uint64_t v25 = 0;
    sub_100040550(&v23, *v9 + 136);
    int v13 = v23;
    if (v23 == v24)
    {
      int v17 = 0;
      if (v23) {
        goto LABEL_37;
      }
      goto LABEL_38;
    }
    while (1)
    {
      uint64_t v14 = *(void *)v13;
      if (*(void *)(*(void *)v13 + 8) == a2)
      {
        if (a3)
        {
          *a3 = *v9;
          goto LABEL_33;
        }
LABEL_34:
        int v17 = 1;
        goto LABEL_36;
      }
      if (*(void *)(*(void *)(v14 + 96) + 8) == a2)
      {
        if (!a3)
        {
          int v17 = 1;
          uint64_t v14 = *(void *)(v14 + 96);
          goto LABEL_36;
        }
        *a3 = v14;
        int v13 = (char *)(*(void *)v13 + 96);
LABEL_33:
        uint64_t v14 = *(void *)v13;
        goto LABEL_34;
      }
      uint64_t v20 = 0;
      id v21 = 0;
      uint64_t v22 = 0;
      sub_100040550(&v20, *(void *)v13 + 104);
      uint64_t v15 = v20;
      uint64_t v16 = v20;
      if (v20 == v21) {
        break;
      }
      while (*(void *)(*(void *)v16 + 8) != a2)
      {
        v16 += 8;
        if (v16 == v21) {
          goto LABEL_14;
        }
      }
      int v18 = 0;
      if (!a3)
      {
        int v17 = 1;
        uint64_t v4 = *(void *)v16;
        if (!v20) {
          goto LABEL_19;
        }
LABEL_18:
        id v21 = v15;
        operator delete(v15);
        goto LABEL_19;
      }
      *a3 = *(void *)v13;
      uint64_t v4 = *(void *)v16;
      int v17 = 1;
      if (v15) {
        goto LABEL_18;
      }
LABEL_19:
      if (!v18) {
        goto LABEL_35;
      }
      v13 += 8;
      if (v13 == v24)
      {
        int v17 = 0;
LABEL_35:
        uint64_t v14 = v4;
LABEL_36:
        int v13 = v23;
        uint64_t v4 = v14;
        if (v23)
        {
LABEL_37:
          int v24 = v13;
          operator delete(v13);
        }
LABEL_38:
        id v11 = (char *)__p;
LABEL_39:
        if (v11)
        {
          uint64_t v27 = v11;
          operator delete(v11);
        }
        if (v17) {
          goto LABEL_53;
        }
        if (++v9 == *(uint64_t **)(a1 + 368)) {
          goto LABEL_45;
        }
        goto LABEL_2;
      }
    }
LABEL_14:
    int v17 = 0;
    int v18 = 1;
    if (!v20) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (a3) {
    *a3 = 0;
  }
  uint64_t v4 = *v9;
LABEL_53:
  sub_10003AFB4((uint64_t)v29);
  return v4;
}

void sub_1004278B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_1004278FC(uint64_t a1)
{
  return (***(uint64_t (****)(void, void, void))(*(void *)(a1 + 40) + 104))(*(void *)(*(void *)(a1 + 40) + 104), *(void *)(a1 + 32), *(unsigned int *)(a1 + 48));
}

void sub_100427930(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  __int16 v36 = a3;
  unsigned int v35 = a4;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  v32[0] = 0;
  v32[1] = 0;
  sub_10003AED0((uint64_t)v32, a1 + 40);
  char v31 = 0;
  uint64_t v12 = sub_100427620(a1, a2, &v34, &v33);
  if (v12 && v34)
  {
    if ((*(unsigned char *)(v34 + 72) & 2) == 0)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
        sub_10076743C();
      }
      int v13 = 0;
      uint64_t v14 = 2;
      goto LABEL_10;
    }
    int v13 = sub_100426D14(a1, a5);
    if (!v13)
    {
      uint64_t v14 = 14;
      goto LABEL_10;
    }
    if (v33 != *(void *)(a1 + 112) && v33 != *(void *)(a1 + 128) && v33 != *(void *)(a1 + 144))
    {
      if (*(void *)(a1 + 104))
      {
        int v15 = *(_DWORD *)(v12 + 16);
        v30.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
        uint64_t v16 = sub_100360408((uint64_t **)(a1 + 384), &v35, (uint64_t)&unk_1007BE9D0, &v30);
        *((_DWORD *)v16 + 10) = v15;
        *((_DWORD *)v16 + 11) = 0;
        v16[6] = a6;
        sub_100019878();
        operator new();
      }
      uint64_t v14 = 242;
      goto LABEL_10;
    }
    uint64_t v17 = sub_100017768();
    sub_10004191C(&v30, "GATT");
    sub_10004191C(&__p, "DUMMY_DIS");
    (*(void (**)(uint64_t, std::string *, std::string *, char *))(*(void *)v17 + 72))(v17, &v30, &__p, &v31);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    memset(&v30, 0, sizeof(v30));
    sub_10004191C(&v30, "Dummy Apple DIS");
    memset(&__p, 0, sizeof(__p));
    uint64_t v18 = sub_100017768();
    sub_10004191C(&v28, "GATT");
    sub_10004191C(&v37, "DUMMY_DIS_NAME");
    int v19 = (*(uint64_t (**)(uint64_t, std::string *, uint64_t *, std::string *))(*(void *)v18 + 56))(v18, &v28, &v37, &__p);
    if (v39 < 0) {
      operator delete((void *)v37);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v28.__r_.__value_.__l.__data_);
      if (!v19) {
        goto LABEL_29;
      }
    }
    else if (!v19)
    {
LABEL_29:
      if (v12 != *(void *)(a1 + 120))
      {
        if (v12 == *(void *)(a1 + 152))
        {
          if (v31)
          {
            memset(&v28, 0, sizeof(v28));
            sub_100428440(" MFGR Name", (const void **)&v30.__r_.__value_.__l.__data_, &v28);
            uint64_t v20 = *(void *)(a1 + 152);
            if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              id v21 = &v28;
            }
            else {
              id v21 = (std::string *)v28.__r_.__value_.__r.__words[0];
            }
            if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v28.__r_.__value_.__l.__size_;
            }
            goto LABEL_68;
          }
        }
        else if (v12 == *(void *)(a1 + 160))
        {
          if (v31)
          {
            memset(&v28, 0, sizeof(v28));
            sub_100428440(" Model Number", (const void **)&v30.__r_.__value_.__l.__data_, &v28);
            uint64_t v20 = *(void *)(a1 + 160);
            if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              id v21 = &v28;
            }
            else {
              id v21 = (std::string *)v28.__r_.__value_.__r.__words[0];
            }
            if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v28.__r_.__value_.__l.__size_;
            }
            goto LABEL_68;
          }
        }
        else
        {
          if (v12 == *(void *)(a1 + 168) && v31)
          {
            memset(&v28, 0, sizeof(v28));
            sub_100428440(" Serial Number", (const void **)&v30.__r_.__value_.__l.__data_, &v28);
            uint64_t v20 = *(void *)(a1 + 168);
            if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              id v21 = &v28;
            }
            else {
              id v21 = (std::string *)v28.__r_.__value_.__r.__words[0];
            }
            if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v28.__r_.__value_.__l.__size_;
            }
LABEL_68:
            sub_1000335D8(&v37, v21, size);
            sub_100049EE0(v20 + 72, (uint64_t)&v37);
            uint64_t v37 = (uint64_t)&off_100998428;
            if (v38) {
              sub_1000368F4(v38);
            }
            if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v28.__r_.__value_.__l.__data_);
            }
            goto LABEL_72;
          }
          if (v12 == *(void *)(a1 + 176) && v31)
          {
            memset(&v28, 0, sizeof(v28));
            sub_100428440(" HW Revision", (const void **)&v30.__r_.__value_.__l.__data_, &v28);
            uint64_t v20 = *(void *)(a1 + 176);
            if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              id v21 = &v28;
            }
            else {
              id v21 = (std::string *)v28.__r_.__value_.__r.__words[0];
            }
            if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v28.__r_.__value_.__l.__size_;
            }
            goto LABEL_68;
          }
          if (v12 == *(void *)(a1 + 184) && v31)
          {
            memset(&v28, 0, sizeof(v28));
            sub_100428440(" FW Revision", (const void **)&v30.__r_.__value_.__l.__data_, &v28);
            uint64_t v20 = *(void *)(a1 + 184);
            if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              id v21 = &v28;
            }
            else {
              id v21 = (std::string *)v28.__r_.__value_.__r.__words[0];
            }
            if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v28.__r_.__value_.__l.__size_;
            }
            goto LABEL_68;
          }
          if (v12 == *(void *)(a1 + 192) && v31)
          {
            memset(&v28, 0, sizeof(v28));
            sub_100428440(" SW Revision", (const void **)&v30.__r_.__value_.__l.__data_, &v28);
            uint64_t v20 = *(void *)(a1 + 192);
            if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              id v21 = &v28;
            }
            else {
              id v21 = (std::string *)v28.__r_.__value_.__r.__words[0];
            }
            if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v28.__r_.__value_.__l.__size_;
            }
            goto LABEL_68;
          }
          if (v12 == *(void *)(a1 + 200) && v31)
          {
            BYTE2(v37) = 26;
            LOWORD(v37) = 6682;
            sub_1000335D8(&v28, &v37, 3uLL);
            sub_100049EE0(v12 + 72, (uint64_t)&v28);
            goto LABEL_128;
          }
          if (v12 == *(void *)(a1 + 208) && v31)
          {
            BYTE2(v37) = 27;
            LOWORD(v37) = 6939;
            sub_1000335D8(&v28, &v37, 3uLL);
            sub_100049EE0(v12 + 72, (uint64_t)&v28);
            goto LABEL_128;
          }
          if (v12 == *(void *)(a1 + 216) && v31)
          {
            BYTE2(v37) = 28;
            LOWORD(v37) = 7196;
            sub_1000335D8(&v28, &v37, 3uLL);
            sub_100049EE0(v12 + 72, (uint64_t)&v28);
            goto LABEL_128;
          }
          if (v12 == *(void *)(a1 + 224) && v31)
          {
            uint64_t v37 = 0x3837363534333231;
            sub_1000335D8(&v28, &v37, 8uLL);
            sub_100049EE0(v12 + 72, (uint64_t)&v28);
LABEL_128:
            v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_100998428;
            if (v28.__r_.__value_.__l.__size_) {
              sub_1000368F4((atomic_uint *)v28.__r_.__value_.__l.__size_);
            }
          }
        }
LABEL_72:
        uint64_t v27 = v12 + 72;
        if (!sub_10004A6E4(v12 + 72) && os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT)) {
          sub_100767470();
        }
        if (sub_100045F00(v27) >= (unint64_t)a3)
        {
          if ((unsigned __int16)sub_100045F00(v27) != (_WORD)a3) {
            operator new[]();
          }
          uint64_t v14 = 0;
        }
        else
        {
          uint64_t v14 = 7;
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v30.__r_.__value_.__l.__data_);
        }
        goto LABEL_10;
      }
      memset(&v28, 0, sizeof(v28));
      if (v31) {
        char v23 = v19;
      }
      else {
        char v23 = 0;
      }
      if (v23)
      {
        int v24 = &v30;
      }
      else
      {
        if (qword_1009FB240 != -1) {
          dispatch_once(&qword_1009FB240, &stru_1009ADD38);
        }
        if (!sub_1004C085C(qword_1009FB238, v13)) {
          goto LABEL_57;
        }
        int v24 = (std::string *)(a1 + 304);
      }
      std::string::operator=(&v28, v24);
LABEL_57:
      std::string::size_type v25 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v25 = v28.__r_.__value_.__l.__size_;
      }
      if (!v25)
      {
        uint64_t v26 = sub_100035F54();
        if ((*(unsigned int (**)(uint64_t, std::string *))(*(void *)v26 + 16))(v26, &v28)) {
          std::string::assign(&v28, "iDevice");
        }
      }
      uint64_t v20 = *(void *)(a1 + 120);
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        id v21 = &v28;
      }
      else {
        id v21 = (std::string *)v28.__r_.__value_.__r.__words[0];
      }
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v28.__r_.__value_.__l.__size_;
      }
      goto LABEL_68;
    }
    std::string::operator=(&v30, &__p);
    goto LABEL_29;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
    sub_1007674B0();
  }
  int v13 = 0;
  uint64_t v14 = 10;
LABEL_10:
  v30.__r_.__value_.__s.__data_[0] = 0;
  sub_10001B8E0(&v30);
  ((void (*)(uint64_t, uint64_t, void, void))a6)(a4, v14, 0, 0);
  sub_10001B8AC(&v30);
  sub_10003AFB4((uint64_t)v32);
}

void sub_1004282A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, atomic_uint *a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char a29)
{
  if (a11) {
    sub_1000368F4(a11);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  sub_10003AFB4((uint64_t)&a29);

  _Unwind_Resume(a1);
}

uint64_t sub_100428440@<X0>(char *__s@<X1>, const void **a2@<X0>, void *a3@<X8>)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  size_t v7 = strlen(__s);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t result = sub_1002EA240((uint64_t)a3, v6 + v7);
  if (*((char *)a3 + 23) < 0) {
    a3 = (void *)*a3;
  }
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      id v9 = a2;
    }
    else {
      id v9 = *a2;
    }
    uint64_t result = (uint64_t)memmove(a3, v9, v6);
  }
  uint64_t v10 = (char *)a3 + v6;
  if (v7) {
    uint64_t result = (uint64_t)memmove(v10, __s, v7);
  }
  v10[v7] = 0;
  return result;
}

uint64_t sub_100428504(uint64_t a1, uint64_t a2, int a3, unsigned __int16 a4, uint64_t a5, unsigned int a6, unint64_t a7, uint64_t *a8)
{
  unsigned int v46 = a6;
  uint64_t v44 = 0;
  unint64_t v45 = a7;
  v42[1] = 0;
  long long v43 = 0;
  v42[0] = 0;
  sub_10003AED0((uint64_t)v42, a1 + 40);
  uint64_t v15 = sub_100427620(a1, a2, &v44, (uint64_t *)&v43);
  if (v15)
  {
    if (!v44)
    {
LABEL_5:
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
        sub_1007674E4();
      }
      uint64_t v16 = 3;
      goto LABEL_11;
    }
    if (a8)
    {
      if ((*(unsigned char *)(v44 + 72) & 8) == 0) {
        goto LABEL_5;
      }
    }
    else if ((*(unsigned char *)(v44 + 72) & 4) == 0)
    {
      goto LABEL_5;
    }
    if (a3)
    {
      std::string __p = 0;
      uint64_t v40 = 0;
      unint64_t v41 = 0;
      sub_100040550(&__p, v44 + 104);
      uint64_t v18 = (char *)__p;
      if (__p == v40) {
        goto LABEL_29;
      }
      while (1)
      {
        uint64_t v19 = *(void *)(*(void *)v18 + 8);
        int v20 = *(_DWORD *)(v19 + 20);
        __n128 v48 = *(__n128 *)(v19 + 4);
        LODWORD(v49) = v20;
        sub_100035F98(&buf, &v48);
        long long v50 = xmmword_1007BA528;
        int v51 = 0;
        if (sub_10022A44C(v21, (unsigned __int8 *)&v50)) {
          break;
        }
        v18 += 8;
        if (v18 == v40) {
          goto LABEL_29;
        }
      }
      if ((*(_WORD *)(*(void *)v18 + 72) & 1) == 0)
      {
LABEL_29:
        if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
          sub_100767518();
        }
        uint64_t v16 = 3;
LABEL_32:
        if (__p)
        {
          uint64_t v40 = (char *)__p;
          operator delete(__p);
        }
        goto LABEL_11;
      }
      __n128 v48 = 0u;
      long long v49 = 0u;
      v48.n128_u32[0] = *(_DWORD *)(v15 + 16);
      v48.n128_u16[2] = a4;
      uint64_t v28 = *(void *)(a5 + 8);
      v48.n128_u64[1] = (unint64_t)&off_100998428;
      *(void *)&long long v49 = v28;
      if (v28) {
        sub_100037354(v28);
      }
      BYTE8(v49) = 0;
      uint64_t v29 = *(void **)(a1 + 520);
      if (v29)
      {
        uint64_t v30 = a1 + 520;
        do
        {
          unint64_t v31 = v29[4];
          BOOL v32 = v31 >= a7;
          if (v31 >= a7) {
            uint64_t v33 = v29;
          }
          else {
            uint64_t v33 = v29 + 1;
          }
          if (v32) {
            uint64_t v30 = (uint64_t)v29;
          }
          uint64_t v29 = (void *)*v33;
        }
        while (*v33);
        if (v30 != a1 + 520 && *(void *)(v30 + 32) <= a7)
        {
          uint64_t v47 = 0;
          uint64_t v35 = *(void *)(v30 + 40);
          if (v35 == *(void *)(v30 + 48))
          {
            unsigned int v36 = 0;
          }
          else
          {
            unsigned int v36 = 0;
            do
            {
              v36 += sub_100045F00(v35 + 8);
              v35 += 32;
            }
            while (v35 != *(void *)(v30 + 48));
          }
          if (sub_100045F00(a5) + (unint64_t)v36 >= 0x201)
          {
            uint64_t v37 = qword_100A19E88;
            if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
            {
              uint64_t v38 = sub_100045F00(a5);
              sub_10076754C(v36, v38, (uint8_t *)&buf, v37);
            }
            uint64_t v16 = 9;
            goto LABEL_53;
          }
          sub_100424AC0(a1, **(_DWORD **)(v30 + 40), (uint64_t *)&v47);
          if (v47 != v43)
          {
            if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
              sub_1007675B0();
            }
            uint64_t v16 = 244;
            goto LABEL_53;
          }
        }
      }
      buf.n128_u64[0] = (unint64_t)&v45;
      uint64_t v34 = sub_10042D5EC((uint64_t **)(a1 + 512), &v45, (uint64_t)&unk_1007BE9D0, (uint64_t **)&buf);
      sub_100428B28(v34 + 5, (int *)&v48);
      uint64_t v16 = 0;
LABEL_53:
      v48.n128_u64[1] = (unint64_t)&off_100998428;
      if ((void)v49) {
        sub_1000368F4((atomic_uint *)v49);
      }
      goto LABEL_32;
    }
    uint64_t v22 = sub_100426D14(a1, a7);
    if (v22)
    {
      __n128 v48 = 0u;
      long long v49 = 0u;
      v48.n128_u32[0] = *(_DWORD *)(v15 + 16);
      v48.n128_u16[2] = a4;
      uint64_t v23 = *(void *)(a5 + 8);
      v48.n128_u64[1] = (unint64_t)&off_100998428;
      *(void *)&long long v49 = v23;
      if (v23) {
        sub_100037354(v23);
      }
      BYTE8(v49) = a8 == 0;
      std::string __p = 0;
      uint64_t v40 = 0;
      unint64_t v41 = 0;
      if (*(void *)(a1 + 104))
      {
        if (a8
          && (int v24 = *(_DWORD *)(v15 + 16),
              uint64_t v47 = &v46,
              std::string::size_type v25 = sub_100360408((uint64_t **)(a1 + 384), &v46, (uint64_t)&unk_1007BE9D0, &v47),
              *((_DWORD *)v25 + 10) = v24,
              *((_DWORD *)v25 + 11) = 0,
              v25[6] = a8,
              uint64_t v26 = v40,
              (unint64_t)v40 < v41))
        {
          sub_10042D6B0((uint64_t)&__p, (int *)&v48);
          uint64_t v27 = (uint64_t)(v26 + 32);
        }
        else
        {
          uint64_t v27 = sub_10042D734((uint64_t *)&__p, (int *)&v48);
        }
        uint64_t v40 = (char *)v27;
        sub_100019878();
        operator new();
      }
      uint64_t v16 = 242;
      buf.n128_u64[0] = (unint64_t)&__p;
      sub_10042C4F0((void ***)&buf);
      v48.n128_u64[1] = (unint64_t)&off_100998428;
      if ((void)v49) {
        sub_1000368F4((atomic_uint *)v49);
      }
    }
    else
    {
      uint64_t v16 = 14;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
      sub_1007674B0();
    }
    uint64_t v16 = 10;
  }
LABEL_11:
  if (a8)
  {
    v48.n128_u8[0] = 0;
    sub_10001B8E0(&v48);
    ((void (*)(void, uint64_t, void, void))a8)(v46, v16, 0, 0);
    sub_10001B8AC(&v48);
  }
  return sub_10003AFB4((uint64_t)v42);
}

void sub_100428A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,atomic_uint *a21)
{
  if (a21) {
    sub_1000368F4(a21);
  }
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_100428B28(uint64_t *a1, int *a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t result = sub_10042D734(a1, a2);
  }
  else
  {
    sub_10042D6B0((uint64_t)a1, a2);
    uint64_t result = v3 + 32;
  }
  a1[1] = result;
  return result;
}

uint64_t sub_100428B68(void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, __int16 *, void))
{
  __int16 v27 = 0;
  v26[0] = 0;
  v26[1] = 0;
  sub_10003AED0((uint64_t)v26, (uint64_t)(a1 + 5));
  uint64_t v12 = sub_100426D14((uint64_t)a1, a5);
  if (!v12)
  {
    unsigned __int16 v21 = 0;
    uint64_t v22 = 14;
    goto LABEL_33;
  }
  if (*(void *)(a1[41] + 8) == a2)
  {
    for (uint64_t i = (const unsigned __int8 *)a1[42]; i != (const unsigned __int8 *)a1[43]; i += 20)
    {
      sub_1000305AC(uu2, v12);
      if (!uuid_compare(i, uu2))
      {
        LOBYTE(v19) = 0;
        LOBYTE(v14) = 2;
        goto LABEL_17;
      }
    }
    goto LABEL_15;
  }
  unint64_t v13 = sub_100427620((uint64_t)a1, a2, 0, 0);
  if (!v13)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
      sub_1007674B0();
    }
    unsigned __int16 v21 = 0;
    uint64_t v22 = 10;
    goto LABEL_33;
  }
  uint64_t v14 = (void *)a1[52];
  if (v14)
  {
    uint64_t v15 = a1 + 52;
    do
    {
      unint64_t v16 = v14[4];
      BOOL v17 = v16 >= v13;
      if (v16 >= v13) {
        uint64_t v18 = v14;
      }
      else {
        uint64_t v18 = v14 + 1;
      }
      if (v17) {
        uint64_t v15 = v14;
      }
      uint64_t v14 = (void *)*v18;
    }
    while (*v18);
    if (v15 != a1 + 52 && v13 >= v15[4])
    {
      for (uint64_t j = v15[5]; j != v15[6]; j += 18)
      {
        sub_1000305AC(uu2, v12);
        if (!uuid_compare((const unsigned __int8 *)j, uu2))
        {
          LODWORD(v14) = *(unsigned __int16 *)(j + 16);
          unsigned int v19 = v14 >> 8;
          goto LABEL_17;
        }
      }
    }
LABEL_15:
    LOBYTE(v14) = 0;
  }
  LOBYTE(v19) = 0;
LABEL_17:
  if (a3 != 2)
  {
    if (a3 == 1)
    {
      uint64_t v20 = 0;
    }
    else
    {
      if (a3)
      {
        unsigned __int16 v21 = 0;
        uint64_t v22 = 7;
        goto LABEL_33;
      }
      LOBYTE(v27) = (_BYTE)v14;
      uint64_t v20 = 1;
    }
    *(unsigned char *)((unint64_t)&v27 | v20) = v19;
  }
  uint64_t v22 = 0;
  unsigned __int16 v21 = 2 - a3;
LABEL_33:
  uu2[0] = 0;
  sub_10001B8E0(uu2);
  a6(a4, v22, &v27, v21);
  sub_10001B8AC(uu2);

  return sub_10003AFB4((uint64_t)v26);
}

void sub_100428DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100428DF8(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, uint64_t, void, void))
{
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  v43[0] = 0;
  v43[1] = 0;
  sub_10003AED0((uint64_t)v43, a1 + 40);
  if (a3)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
      sub_1007675E4();
    }
    unint64_t v16 = 0;
    uint64_t v17 = 244;
    goto LABEL_15;
  }
  if (a4 || sub_100045F00(a5) != 2)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
      sub_100767688();
    }
    unint64_t v16 = 0;
    if (a4) {
      uint64_t v17 = 7;
    }
    else {
      uint64_t v17 = 13;
    }
    goto LABEL_15;
  }
  int v18 = sub_1006537C0(a5, 0);
  int v19 = sub_1006537C0(a5, 1uLL);
  unint64_t v20 = *(void *)(a1 + 328);
  if (*(void *)(v20 + 8) == a2)
  {
    uint64_t v21 = *(void *)(a1 + 136);
    uint64_t v44 = v21;
    uint64_t v45 = v20;
    if (!v20)
    {
LABEL_25:
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
        sub_1007674B0();
      }
      unint64_t v16 = 0;
      uint64_t v17 = 10;
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v45 = sub_100427620(a1, a2, &v44, 0);
    uint64_t v21 = v44;
    if (!v45) {
      goto LABEL_25;
    }
  }
  if (!v21) {
    goto LABEL_25;
  }
  int v22 = v18 | (v19 << 8);
  if (v22)
  {
    if (v22 == 2)
    {
      if ((*(unsigned char *)(v21 + 72) & 0x20) == 0)
      {
        uint64_t v23 = "indicate";
        goto LABEL_39;
      }
    }
    else
    {
      if (v22 != 1)
      {
        uint64_t v23 = "unknown";
        goto LABEL_39;
      }
      if ((*(unsigned char *)(v21 + 72) & 0x10) == 0)
      {
        uint64_t v23 = "notify";
LABEL_39:
        __int16 v27 = qword_100A19E88;
        if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
          sub_100767618((uint64_t)v23, v27, v28);
        }
        unint64_t v16 = 0;
        uint64_t v17 = 245;
        goto LABEL_15;
      }
    }
  }
  unint64_t v16 = sub_100426D14(a1, a7);
  if (!v16)
  {
    uint64_t v17 = 14;
    goto LABEL_15;
  }
  if (v45 != *(void *)(a1 + 328))
  {
    *(void *)std::string src = &v45;
    int v24 = sub_10042D5EC((uint64_t **)(a1 + 408), (unint64_t *)&v45, (uint64_t)&unk_1007BE9D0, (uint64_t **)src);
    uint64_t v25 = v24[5];
    *(void *)std::string src = 0;
    uint64_t v48 = 0;
    LOWORD(v49) = 0;
    sub_1000305AC(src, v16);
    LOWORD(v49) = v22;
    if (v25 == v24[6]) {
      goto LABEL_50;
    }
    uint64_t v26 = -v25;
    while (1)
    {
      sub_1000305AC(uu2, v16);
      if (!uuid_compare((const unsigned __int8 *)v25, uu2)) {
        break;
      }
      v25 += 18;
      v26 -= 18;
      if (v25 == v24[6]) {
        goto LABEL_50;
      }
    }
    unint64_t v31 = (unsigned __int8 *)v24[6];
    if ((unsigned __int8 *)v25 == v31)
    {
LABEL_50:
      if (v22) {
        sub_100429424(v24 + 5, src);
      }
    }
    else
    {
      if (v22)
      {
        uuid_copy((unsigned __int8 *)v25, src);
        *(_WORD *)(v25 + 16) = v49;
LABEL_69:
        uint64_t v17 = 0;
        goto LABEL_15;
      }
      sub_10042DAA4((unsigned __int8 *)(18 - v26), v31, (unsigned __int8 *)-v26);
      v24[6] = v36;
    }
    if (*(void *)(a1 + 104))
    {
      int v32 = *(_DWORD *)(v45 + 16);
      uint64_t v33 = sub_100019878();
      v37[0] = _NSConcreteStackBlock;
      v37[1] = 3221225472;
      v37[2] = sub_100429494;
      v37[3] = &unk_1009ADAC8;
      uint64_t v39 = a1;
      __int16 v41 = v22;
      int v40 = v32;
      id v38 = v16;
      BOOL v42 = v22 == 1;
      sub_100013018(v33, v37);
    }
    goto LABEL_69;
  }
  uint64_t v29 = *(unsigned __int8 **)(a1 + 336);
  if (v29 == *(unsigned __int8 **)(a1 + 344)) {
    goto LABEL_62;
  }
  uint64_t v30 = -(uint64_t)v29;
  while (1)
  {
    sub_1000305AC(src, v16);
    if (!uuid_compare(v29, src)) {
      break;
    }
    v29 += 20;
    v30 -= 20;
    if (v29 == *(unsigned __int8 **)(a1 + 344)) {
      goto LABEL_62;
    }
  }
  uint64_t v34 = *(unsigned __int8 **)(a1 + 344);
  if (v29 == v34)
  {
LABEL_62:
    if (v22)
    {
      *(void *)std::string src = 0;
      uint64_t v48 = 0;
      int v49 = 0;
      sub_1000305AC(src, v16);
      int v49 = 0;
      sub_10042318C((uint64_t *)(a1 + 336), src);
      if (qword_1009FB240 != -1) {
        dispatch_once(&qword_1009FB240, &stru_1009ADD38);
      }
      if (sub_1004C085C(qword_1009FB238, v16))
      {
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009ADD98);
        }
        sub_1006C2E04((uint64_t)off_1009F7ED8, v16, 1);
      }
    }
    goto LABEL_69;
  }
  if (v22) {
    goto LABEL_69;
  }
  sub_10042DA38((unsigned __int8 *)(20 - v30), v34, (unsigned __int8 *)-v30);
  *(void *)(a1 + 344) = v35;
  if (qword_1009FB240 != -1) {
    dispatch_once(&qword_1009FB240, &stru_1009ADD38);
  }
  if (!sub_1004C085C(qword_1009FB238, v16)) {
    goto LABEL_69;
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009ADD98);
  }
  uint64_t v17 = 0;
  sub_1006C2E04((uint64_t)off_1009F7ED8, v16, 0);
LABEL_15:
  if (a8)
  {
    src[0] = 0;
    sub_10001B8E0(src);
    a8(a6, v17, 0, 0);
    sub_10001B8AC(src);
  }
  sub_10003AFB4((uint64_t)v43);
}

void sub_100429394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100429424(uint64_t *a1, unsigned __int8 *src)
{
  unint64_t v4 = a1[1];
  if (v4 >= a1[2])
  {
    uint64_t result = sub_10042DB10(a1, (uint64_t)src);
  }
  else
  {
    uuid_copy((unsigned __int8 *)a1[1], src);
    *(_WORD *)(v4 + 16) = *((_WORD *)src + 8);
    uint64_t result = v4 + 18;
    a1[1] = v4 + 18;
  }
  a1[1] = result;
  return result;
}

void sub_10042948C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100429494(uint64_t a1)
{
  int v2 = *(unsigned __int16 *)(a1 + 52);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 104);
  uint64_t v5 = a1 + 48;
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v4 + 40))(v4, v5, v3, *(unsigned __int8 *)(a1 + 54));
  }
  else {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 48))(v4, v5, v3);
  }
}

void sub_1004294F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  v19[0] = 0;
  v19[1] = 0;
  sub_10003AED0((uint64_t)v19, a1 + 40);
  [*(id *)(a1 + 496) removeObject:v3];
  [*(id *)(a1 + 504) removeObjectForKey:v3];
  [*(id *)(a1 + 488) removeObject:v3];
  if (qword_1009FB240 != -1) {
    dispatch_once(&qword_1009FB240, &stru_1009ADD38);
  }
  if ((sub_1004C085C(qword_1009FB238, v3) & 1) == 0)
  {
    uint64_t v4 = *(const unsigned __int8 **)(a1 + 336);
    if (v4 != *(const unsigned __int8 **)(a1 + 344))
    {
      uint64_t v5 = -(uint64_t)v4;
      while (1)
      {
        size_t v6 = sub_100031234(v4);
        unsigned int v7 = [v3 isEqual:v6];

        if (v7) {
          break;
        }
        v4 += 20;
        v5 -= 20;
        if (v4 == *(const unsigned __int8 **)(a1 + 344)) {
          goto LABEL_10;
        }
      }
      sub_10042DA38((unsigned __int8 *)(20 - v5), *(unsigned __int8 **)(a1 + 344), (unsigned __int8 *)-v5);
      *(void *)(a1 + 344) = v8;
    }
  }
LABEL_10:
  id v9 = *(void **)(a1 + 408);
  uint64_t v10 = (void *)(a1 + 416);
  if (v9 != (void *)(a1 + 416))
  {
    do
    {
      id v11 = (const unsigned __int8 *)v9[5];
      if (v11 != (const unsigned __int8 *)v9[6])
      {
        uint64_t v12 = -(uint64_t)v11;
        while (1)
        {
          unint64_t v13 = sub_100031234(v11);
          unsigned int v14 = [v3 isEqual:v13];

          if (v14) {
            break;
          }
          v11 += 18;
          v12 -= 18;
          if (v11 == (const unsigned __int8 *)v9[6]) {
            goto LABEL_17;
          }
        }
        sub_10042DAA4((unsigned __int8 *)(18 - v12), (unsigned __int8 *)v9[6], (unsigned __int8 *)-v12);
        v9[6] = v15;
      }
LABEL_17:
      unint64_t v16 = (void *)v9[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          unint64_t v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (void *)v9[2];
          BOOL v18 = *v17 == (void)v9;
          id v9 = v17;
        }
        while (!v18);
      }
      id v9 = v17;
    }
    while (v17 != v10);
  }
  sub_10003AFB4((uint64_t)v19);
}

void sub_1004296D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_10042971C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 32) + 104) + 8))(*(void *)(*(void *)(a1 + 32) + 104), *(void *)(a1 + 40));
}

uint64_t sub_100429748(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 32) + 104) + 8))(*(void *)(*(void *)(a1 + 32) + 104), *(void *)(a1 + 40));
}

void sub_100429774(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a2;
  unsigned int v7 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__n128 buf = 138543618;
    *(void *)&uint8_t buf[4] = v6;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = a4;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "GattServer device \"%{public}@\" connected for session %p", buf, 0x16u);
  }
  sub_1000305AC(buf, v6);
  if (a1 + 544 != sub_1000308C0(a1 + 536, buf))
  {
    uint64_t v8 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT)) {
      sub_1007676F0(v8);
    }
  }
  *(void *)__n128 buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  sub_10003AED0((uint64_t)buf, a1 + 40);
  if (a4)
  {
    sub_1000305AC(uu1, v6);
    id v9 = uu1;
    sub_10042DCB8((uint64_t **)(a1 + 536), uu1, (uint64_t)&unk_1007BE9D0, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v9)[6] = a4;
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
  {
    sub_1007676BC();
  }
  sub_10003AFE8((uint64_t)buf);
  if (qword_1009FB240 != -1) {
    dispatch_once(&qword_1009FB240, &stru_1009ADD38);
  }
  if (sub_1004C085C(qword_1009FB238, v6))
  {
    sub_10003AF00((uint64_t)buf);
    sub_100423FAC(a1, v6, (unsigned __int16)(*(_WORD *)(*(void *)(a1 + 128) + 48) + 1), 0xFFFFu);
  }
  sub_10003AFB4((uint64_t)buf);
}

void sub_100429964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100429994(uint64_t a1, void *a2)
{
  id v3 = a2;
  v20[0] = 0;
  v20[1] = 0;
  sub_10003AED0((uint64_t)v20, a1 + 40);
  sub_1000305AC(uu2, v3);
  uint64_t v4 = (uint64_t *)sub_1000308C0(a1 + 536, uu2);
  if ((uint64_t *)(a1 + 544) == v4)
  {
    uint64_t v5 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
      sub_100767774((uint64_t)v3, v5, v6);
    }
  }
  else
  {
    sub_10004D3B8((uint64_t **)(a1 + 536), v4);
    operator delete(v4);
  }
  unsigned int v7 = *(void **)(a1 + 408);
  if (v7 != (void *)(a1 + 416))
  {
    do
    {
      for (uint64_t i = v7[5]; i != v7[6]; i += 18)
      {
        id v9 = sub_100031234((const unsigned __int8 *)i);
        unsigned int v10 = [v3 isEqual:v9];

        if (v10)
        {
          if (*(_WORD *)(i + 16))
          {
            int v11 = *(_DWORD *)(v7[4] + 16);
            uint64_t v12 = sub_100019878();
            v16[0] = _NSConcreteStackBlock;
            v16[1] = 3221225472;
            void v16[2] = sub_100429C0C;
            v16[3] = &unk_100999A10;
            uint64_t v18 = a1;
            int v19 = v11;
            id v17 = v3;
            sub_100013018(v12, v16);
          }
          break;
        }
      }
      unint64_t v13 = (void *)v7[1];
      if (v13)
      {
        do
        {
          unsigned int v14 = v13;
          unint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          unsigned int v14 = (void *)v7[2];
          BOOL v15 = *v14 == (void)v7;
          unsigned int v7 = v14;
        }
        while (!v15);
      }
      unsigned int v7 = v14;
    }
    while (v14 != (void *)(a1 + 416));
  }
  sub_1004294F8(a1, v3);
  sub_1004251C8(a1);
  sub_10003AFB4((uint64_t)v20);
}

void sub_100429BBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100429C0C(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, void))(**(void **)(*(void *)(a1 + 40) + 104) + 48))(*(void *)(*(void *)(a1 + 40) + 104), a1 + 48, *(void *)(a1 + 32));
}

void sub_100429C40(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 40);
  if (!a3)
  {
    for (uint64_t i = *(const unsigned __int8 **)(a1 + 336); i != *(const unsigned __int8 **)(a1 + 344); i += 20)
    {
      sub_1000305AC(uu2, v5);
      if (!uuid_compare(i, uu2))
      {
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009ADD98);
        }
        sub_1006C2E04((uint64_t)off_1009F7ED8, v5, 1);
        break;
      }
    }
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_100429D3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_100429D68(uint64_t a1, void *a2, int a3)
{
}

void sub_100429D70(uint64_t a1, void *a2)
{
  id v3 = a2;
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 40);
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009ADDD8);
  }
  uint64_t v4 = off_1009F7EB8;
  sub_1000305AC(v6, v3);
  if (!sub_1000307A4((uint64_t)v4, v6)) {
    sub_1004294F8(a1, v3);
  }
  sub_10003AFB4((uint64_t)v5);
}

void sub_100429E48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_100429E74(uint64_t a1, void *a2)
{
}

uint64_t sub_100429E7C(uint64_t a1)
{
  v96[0] = 0;
  v96[1] = 0;
  sub_10003AED0((uint64_t)v96, a1 + 40);
  uint64_t v1 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "statedump: -------------------- GATT Server ---------------------", buf, 2u);
  }
  sub_1004231FC(a1);
  int v2 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Client Config Descriptors:", buf, 2u);
    int v2 = qword_100A19E88;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump:    GATT 'Service Changed':", buf, 2u);
  }
  uint64_t v3 = *(void *)(a1 + 336);
  for (uint64_t i = *(void *)(a1 + 344); v3 != i; v3 += 20)
  {
    id v5 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
    {
      *(_OWORD *)__n128 buf = 0u;
      memset(v103, 0, 21);
      uuid_unparse_upper((const unsigned __int8 *)v3, (char *)buf);
      sub_10004191C(v100, (char *)buf);
      if (v100[23] >= 0) {
        uint64_t v6 = v100;
      }
      else {
        uint64_t v6 = *(unsigned char **)v100;
      }
      int v7 = *(unsigned __int16 *)(v3 + 16);
      int v8 = *(unsigned __int16 *)(v3 + 18);
      *(_DWORD *)uint64_t v101 = 136446722;
      *(void *)&v101[4] = v6;
      *(_WORD *)&v101[12] = 1024;
      *(_DWORD *)&v101[14] = v7;
      *(_WORD *)&v101[18] = 1024;
      *(_DWORD *)&v101[20] = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump:       %{public}s - [0x%04x, 0x%04x]", v101, 0x18u);
      if ((v100[23] & 0x80000000) != 0) {
        operator delete(*(void **)v100);
      }
      uint64_t i = *(void *)(a1 + 344);
    }
  }
  id v9 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "statedump:    User-specified:", buf, 2u);
  }
  unsigned int v10 = *(void **)(a1 + 408);
  if (v10 != (void *)(a1 + 416))
  {
    uint64_t v82 = 67109120;
    do
    {
      int v11 = qword_100A19E88;
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = **(unsigned __int16 **)(v10[4] + 8);
        *(_DWORD *)__n128 buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "statedump:       0x%04x", buf, 8u);
      }
      uint64_t v13 = v10[5];
      uint64_t v14 = v10[6];
      while (v13 != v14)
      {
        BOOL v15 = qword_100A19E88;
        if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
        {
          *(_OWORD *)__n128 buf = 0u;
          memset(v103, 0, 21);
          uuid_unparse_upper((const unsigned __int8 *)v13, (char *)buf);
          sub_10004191C(v101, (char *)buf);
          if ((v101[23] & 0x80u) == 0) {
            unint64_t v16 = v101;
          }
          else {
            unint64_t v16 = *(uint8_t **)v101;
          }
          id v17 = "Indicate";
          if (*(_WORD *)(v13 + 16) == 1) {
            id v17 = "Notify";
          }
          *(_DWORD *)uint64_t v100 = 136446466;
          *(void *)&v100[4] = v16;
          *(_WORD *)&v100[12] = 2082;
          *(void *)&v100[14] = v17;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "statedump:          %{public}s (%{public}s)", v100, 0x16u);
          if ((char)v101[23] < 0) {
            operator delete(*(void **)v101);
          }
          uint64_t v14 = v10[6];
        }
        v13 += 18;
      }
      uint64_t v18 = (void *)v10[1];
      if (v18)
      {
        do
        {
          int v19 = v18;
          uint64_t v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          int v19 = (void *)v10[2];
          BOOL v20 = *v19 == (void)v10;
          unsigned int v10 = v19;
        }
        while (!v20);
      }
      unsigned int v10 = v19;
    }
    while (v19 != (void *)(a1 + 416));
  }
  uint64_t v21 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "statedump: Pending transactions:", buf, 2u);
    uint64_t v21 = qword_100A19E88;
  }
  int v22 = *(void **)(a1 + 384);
  if (v22 != (void *)(a1 + 392))
  {
    do
    {
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = *((_DWORD *)v22 + 8);
        *(_DWORD *)__n128 buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v23;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "statedump:    Transaction #%d", buf, 8u);
        uint64_t v21 = qword_100A19E88;
      }
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        int v24 = *((_DWORD *)v22 + 10);
        *(_DWORD *)__n128 buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v24;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "statedump:       Attribute ID: 0x%0x", buf, 8u);
        uint64_t v21 = qword_100A19E88;
      }
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        if (*((unsigned char *)v22 + 44)) {
          uint64_t v25 = "Execute Write";
        }
        else {
          uint64_t v25 = "Read/Write";
        }
        *(_DWORD *)__n128 buf = 136446210;
        *(void *)&uint8_t buf[4] = v25;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "statedump:       Type: %{public}s", buf, 0xCu);
        uint64_t v21 = qword_100A19E88;
      }
      uint64_t v26 = (void *)v22[1];
      if (v26)
      {
        do
        {
          __int16 v27 = v26;
          uint64_t v26 = (void *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          __int16 v27 = (void *)v22[2];
          BOOL v20 = *v27 == (void)v22;
          int v22 = v27;
        }
        while (!v20);
      }
      int v22 = v27;
    }
    while (v27 != (void *)(a1 + 392));
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "statedump: Update Queue:", buf, 2u);
    uint64_t v21 = qword_100A19E88;
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 480)) {
      uint64_t v28 = "yes";
    }
    else {
      uint64_t v28 = "no";
    }
    *(_DWORD *)__n128 buf = 136446210;
    *(void *)&uint8_t buf[4] = v28;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "statedump:    TX full: %{public}s", buf, 0xCu);
    uint64_t v21 = qword_100A19E88;
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "statedump:    Updates:", buf, 2u);
  }
  unint64_t v29 = *(void *)(a1 + 464);
  uint64_t v30 = *(void *)(a1 + 440);
  uint64_t v31 = *(void *)(a1 + 448);
  int v32 = (void *)(v30 + 8 * (v29 >> 8));
  if (v31 == v30) {
    uint64_t v33 = 0;
  }
  else {
    uint64_t v33 = (uint64_t *)(*v32 + 16 * v29);
  }
  while (1)
  {
    if (v31 == v30)
    {
      uint64_t v35 = 0;
    }
    else
    {
      unint64_t v34 = *(void *)(a1 + 472) + *(void *)(a1 + 464);
      uint64_t v35 = *(void *)(v30 + ((v34 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v34;
    }
    if (v33 == (uint64_t *)v35) {
      break;
    }
    uint64_t v36 = v33[1];
    uint64_t v37 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
    {
      if (*v33)
      {
        sub_10003AE4C(*v33, (uint64_t)buf);
        if (v103[0] >= 0) {
          id v38 = buf;
        }
        else {
          id v38 = *(uint8_t **)buf;
        }
        *(_DWORD *)uint64_t v101 = 136446210;
        *(void *)&v101[4] = v38;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "statedump:       \"%{public}s\"", v101, 0xCu);
        if (SHIBYTE(v103[0]) < 0) {
          operator delete(*(void **)buf);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v101 = 136446210;
        *(void *)&v101[4] = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "statedump:       \"%{public}s\"", v101, 0xCu);
      }
      uint64_t v37 = qword_100A19E88;
    }
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      int v39 = **(unsigned __int16 **)(*(void *)(v36 + 8) + 8);
      *(_DWORD *)__n128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v39;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "statedump:          Characteristic handle: 0x%04x", buf, 8u);
      uint64_t v37 = qword_100A19E88;
    }
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      sub_10004C2C4(v36 + 24, buf);
      int v40 = v103[0] >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)uint64_t v101 = 136446210;
      *(void *)&v101[4] = v40;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "statedump:          Value: %{public}s", v101, 0xCu);
      if (SHIBYTE(v103[0]) < 0) {
        operator delete(*(void **)buf);
      }
    }
    v33 += 2;
    if ((uint64_t *)((char *)v33 - *v32) == (uint64_t *)4096)
    {
      __int16 v41 = (uint64_t *)v32[1];
      ++v32;
      uint64_t v33 = v41;
    }
    uint64_t v30 = *(void *)(a1 + 440);
    uint64_t v31 = *(void *)(a1 + 448);
  }
  BOOL v42 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "statedump:    Stalled devices:", buf, 2u);
  }
  long long v94 = 0u;
  long long v95 = 0u;
  long long v92 = 0u;
  long long v93 = 0u;
  id v43 = *(id *)(a1 + 488);
  id v44 = [v43 countByEnumeratingWithState:&v92 objects:v99 count:16];
  if (v44)
  {
    uint64_t v45 = *(void *)v93;
    do
    {
      for (uint64_t j = 0; j != v44; uint64_t j = (char *)j + 1)
      {
        if (*(void *)v93 != v45) {
          objc_enumerationMutation(v43);
        }
        uint64_t v47 = qword_100A19E88;
        if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v48 = *(void *)(*((void *)&v92 + 1) + 8 * (void)j);
          *(_DWORD *)__n128 buf = 138543362;
          *(void *)&uint8_t buf[4] = v48;
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "statedump:       %{public}@", buf, 0xCu);
        }
      }
      id v44 = [v43 countByEnumeratingWithState:&v92 objects:v99 count:16];
    }
    while (v44);
  }

  int v49 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "statedump:    Outstanding App Indications:", buf, 2u);
  }
  long long v90 = 0u;
  long long v91 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  id v50 = *(id *)(a1 + 504);
  id v51 = [v50 countByEnumeratingWithState:&v88 objects:v98 count:16];
  if (v51)
  {
    uint64_t v52 = *(void *)v89;
    do
    {
      for (k = 0; k != v51; k = (char *)k + 1)
      {
        if (*(void *)v89 != v52) {
          objc_enumerationMutation(v50);
        }
        uint64_t v54 = *(void *)(*((void *)&v88 + 1) + 8 * (void)k);
        id v55 = [[*(id *)(a1 + 504) objectForKey:v54, v82];
        BOOL v56 = qword_100A19E88;
        if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
        {
          if (v55)
          {
            sub_10003AE4C((uint64_t)v55, (uint64_t)buf);
            uint64_t v57 = buf;
            if (v103[0] < 0) {
              uint64_t v57 = *(uint8_t **)buf;
            }
            *(_DWORD *)uint64_t v101 = 136446466;
            *(void *)&v101[4] = v57;
            *(_WORD *)&v101[12] = 2114;
            *(void *)&v101[14] = v54;
            _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "statedump:       \"%{public}s\" - %{public}@", v101, 0x16u);
            if (SHIBYTE(v103[0]) < 0) {
              operator delete(*(void **)buf);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v101 = 136446466;
            *(void *)&v101[4] = 0;
            *(_WORD *)&v101[12] = 2114;
            *(void *)&v101[14] = v54;
            _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "statedump:       \"%{public}s\" - %{public}@", v101, 0x16u);
          }
        }
      }
      id v51 = [v50 countByEnumeratingWithState:&v88 objects:v98 count:16];
    }
    while (v51);
  }

  int v58 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "statedump:    Outstanding Server Indications:", buf, 2u);
  }
  long long v86 = 0u;
  long long v87 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  id v59 = *(id *)(a1 + 496);
  id v60 = [v59 countByEnumeratingWithState:&v84 objects:v97 count:16];
  if (v60)
  {
    uint64_t v61 = *(void *)v85;
    do
    {
      for (m = 0; m != v60; m = (char *)m + 1)
      {
        if (*(void *)v85 != v61) {
          objc_enumerationMutation(v59);
        }
        id v63 = qword_100A19E88;
        if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v64 = *(void *)(*((void *)&v84 + 1) + 8 * (void)m);
          *(_DWORD *)__n128 buf = 138543362;
          *(void *)&uint8_t buf[4] = v64;
          _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "statedump:       \"%{public}@\"", buf, 0xCu);
        }
      }
      id v60 = [v59 countByEnumeratingWithState:&v84 objects:v97 count:16];
    }
    while (v60);
  }

  uint64_t v65 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "statedump: Prepared writes:", buf, 2u);
  }
  id v66 = *(void **)(a1 + 512);
  if (v66 != (void *)(a1 + 520))
  {
    id v67 = (const unsigned __int8 *)(a1 + 544);
    do
    {
      memset(v101, 0, 24);
      sub_10004191C(v101, "Unknown");
      int v68 = *(const unsigned __int8 **)(a1 + 536);
      if (v68 != v67)
      {
        while (*((void *)v68 + 6) != v66[4])
        {
          uint64_t v69 = (const unsigned __int8 *)*((void *)v68 + 1);
          if (v69)
          {
            do
            {
              id v70 = v69;
              uint64_t v69 = *(const unsigned __int8 **)v69;
            }
            while (v69);
          }
          else
          {
            do
            {
              id v70 = (const unsigned __int8 *)*((void *)v68 + 2);
              BOOL v20 = *(void *)v70 == (void)v68;
              int v68 = v70;
            }
            while (!v20);
          }
          int v68 = v70;
          if (v70 == v67) {
            goto LABEL_148;
          }
        }
        *(_OWORD *)__n128 buf = 0u;
        memset(v103, 0, 21);
        uuid_unparse_upper(v68 + 32, (char *)buf);
        sub_10004191C(v100, (char *)buf);
        if ((char)v101[23] < 0) {
          operator delete(*(void **)v101);
        }
        *(_OWORD *)uint64_t v101 = *(_OWORD *)v100;
        *(void *)&v101[16] = *(void *)&v100[16];
      }
LABEL_148:
      uint64_t v71 = qword_100A19E88;
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
      {
        char v72 = v101;
        if ((v101[23] & 0x80u) != 0) {
          char v72 = *(uint8_t **)v101;
        }
        *(_DWORD *)__n128 buf = 136446210;
        *(void *)&uint8_t buf[4] = v72;
        _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "statedump:    \"%{public}s\"", buf, 0xCu);
      }
      uint64_t v73 = (int *)v66[5];
      uint64_t v74 = (int *)v66[6];
      while (v73 != v74)
      {
        uint64_t v75 = qword_100A19E88;
        if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
        {
          int v76 = *v73;
          int v77 = *((unsigned __int16 *)v73 + 2);
          sub_10004C2C4((uint64_t)(v73 + 2), v100);
          unint64_t v78 = v100;
          if (v100[23] < 0) {
            unint64_t v78 = *(unsigned char **)v100;
          }
          *(_DWORD *)__n128 buf = 67109634;
          *(_DWORD *)&uint8_t buf[4] = v76;
          *(_WORD *)&uint8_t buf[8] = 1024;
          *(_DWORD *)&buf[10] = v77;
          *(_WORD *)&buf[14] = 2082;
          v103[0] = v78;
          _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "statedump:       0x%0x @ %d [ %{public}s ]", buf, 0x18u);
          if ((v100[23] & 0x80000000) != 0) {
            operator delete(*(void **)v100);
          }
          uint64_t v74 = (int *)v66[6];
        }
        v73 += 8;
      }
      if ((char)v101[23] < 0) {
        operator delete(*(void **)v101);
      }
      v79 = (void *)v66[1];
      if (v79)
      {
        do
        {
          unint64_t v80 = v79;
          v79 = (void *)*v79;
        }
        while (v79);
      }
      else
      {
        do
        {
          unint64_t v80 = (void *)v66[2];
          BOOL v20 = *v80 == (void)v66;
          id v66 = v80;
        }
        while (!v20);
      }
      id v66 = v80;
    }
    while (v80 != (void *)(a1 + 520));
  }
  return sub_10003AFB4((uint64_t)v96);
}

void sub_10042ADD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  sub_10003AFB4((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_10042AE74(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v4 = *(char **)(a1 + 8);
  id v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    uint64_t v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  uint64_t v6 = *(char **)(a1 + 8);
  while (*(void *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      uint64_t v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      uint64_t v7 = a2;
      sub_10042AF44(a1 + 8, v6, (char *)&v7);
      sub_100061554(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(void, uint64_t))(a1 + 32))(*(void *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_10042AF44(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      int v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      int v19 = 0;
    }
    BOOL v20 = &v19[8 * v16];
    std::string __p = v19;
    __int16 v27 = v20;
    uint64_t v28 = v20;
    unint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        int v23 = (char *)sub_1000405F8(v8, v22);
        BOOL v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        __int16 v27 = v20;
        unint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        __int16 v27 = v20;
      }
    }
    *(void *)BOOL v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    uint64_t v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__std::string src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    id v9 = __src + 8;
    unsigned int v10 = v6 - 8;
    int v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_10042B14C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10042B184(uint64_t a1, __int16 a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)a1 = off_1009BB4B0;
  *(void *)(a1 + 8) = a1 + 24;
  uint64_t v5 = *(void *)(a3 + 8);
  *(void *)(a1 + 72) = &off_100998428;
  *(void *)(a1 + 80) = v5;
  if (v5) {
    sub_100037354(v5);
  }
  *(_WORD *)(a1 + 24) = a2;
  *(_WORD *)(a1 + 26) = 0;
  *(_DWORD *)(a1 + 44) = 0;
  *(_OWORD *)(a1 + 28) = xmmword_1007BEA10;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  return a1;
}

uint64_t sub_10042B220(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)a1 = off_1009BB540;
  *(void *)(a1 + 8) = a1 + 24;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  long long v3 = *(_OWORD *)(a2 + 40);
  long long v4 = *(_OWORD *)(a2 + 56);
  long long v5 = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 56) = v4;
  *(_OWORD *)(a1 + 40) = v3;
  char v6 = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 96) = v6;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  if (*(void *)(a2 + 104) != *(void *)(a2 + 112)) {
    operator new();
  }
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  if (*(void *)(a2 + 136) != *(void *)(a2 + 144)) {
    operator new();
  }
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  if (a1 != a2) {
    sub_10003366C((void *)(a1 + 168), *(long long **)(a2 + 168), *(long long **)(a2 + 176), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 2));
  }
  return a1;
}

void sub_10042B584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  unint64_t v14 = *a10;
  if (*a10)
  {
    v10[22] = v14;
    operator delete(v14);
  }
  uint64_t v15 = *v12;
  if (*v12)
  {
    v10[18] = v15;
    operator delete(v15);
  }
  uint64_t v16 = *v11;
  if (*v11)
  {
    v10[14] = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10042B5F4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)a1 = off_1009BB4E0;
  *(void *)(a1 + 8) = a1 + 24;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  long long v4 = *(_OWORD *)(a2 + 40);
  long long v5 = *(_OWORD *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 72);
  uint64_t v7 = *(void *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 88) = v7;
  *(_OWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 56) = v5;
  *(_OWORD *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 112) = 0u;
  if (*(void *)(a2 + 96)) {
    operator new();
  }
  for (uint64_t i = *(void *)(a2 + 104); i != *(void *)(a2 + 112); i += 8)
  {
    uint64_t v9 = (*(uint64_t (**)(void))(**(void **)i + 16))();
    uint64_t v10 = v9;
    uint64_t v12 = *(uint64_t **)(a1 + 112);
    unint64_t v11 = *(void *)(a1 + 120);
    if ((unint64_t)v12 >= v11)
    {
      uint64_t v14 = *(void *)(a1 + 104);
      uint64_t v15 = ((uint64_t)v12 - v14) >> 3;
      if ((unint64_t)(v15 + 1) >> 61) {
        abort();
      }
      uint64_t v16 = v11 - v14;
      uint64_t v17 = v16 >> 2;
      if (v16 >> 2 <= (unint64_t)(v15 + 1)) {
        uint64_t v17 = v15 + 1;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v17;
      }
      if (v18) {
        int v19 = (char *)sub_1000405F8(a1 + 120, v18);
      }
      else {
        int v19 = 0;
      }
      BOOL v20 = (uint64_t *)&v19[8 * v15];
      *BOOL v20 = v10;
      uint64_t v13 = v20 + 1;
      unint64_t v22 = *(char **)(a1 + 104);
      unint64_t v21 = *(char **)(a1 + 112);
      if (v21 != v22)
      {
        do
        {
          uint64_t v23 = *((void *)v21 - 1);
          v21 -= 8;
          *--BOOL v20 = v23;
        }
        while (v21 != v22);
        unint64_t v21 = *(char **)(a1 + 104);
      }
      *(void *)(a1 + 104) = v20;
      *(void *)(a1 + 112) = v13;
      *(void *)(a1 + 120) = &v19[8 * v18];
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      uint64_t *v12 = v9;
      uint64_t v13 = v12 + 1;
    }
    *(void *)(a1 + 112) = v13;
  }
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  return a1;
}

void sub_10042B7C8()
{
}

uint64_t sub_10042B80C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)a1 = off_1009BB4B0;
  *(void *)(a1 + 8) = a1 + 24;
  long long v3 = *(_OWORD *)(a2 + 24);
  long long v4 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 24) = v3;
  uint64_t v5 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = &off_100998428;
  *(void *)(a1 + 80) = v5;
  if (v5) {
    sub_100037354(v5);
  }
  return a1;
}

void *sub_10042B89C(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  id v9 = a4;
  *a1 = v9;
  a1[1] = a2;
  a1[2] = a3;
  uint64_t v10 = *(void *)(a5 + 8);
  a1[3] = &off_100998428;
  a1[4] = v10;
  if (v10) {
    sub_100037354(v10);
  }

  return a1;
}

void sub_10042B920(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10042B93C()
{
}

uint64_t sub_10042B950(uint64_t a1)
{
  if (qword_1009FB230 != -1) {
    dispatch_once(&qword_1009FB230, &stru_1009ADB20);
  }
  uint64_t v2 = qword_1009FB228;
  unsigned int v3 = *(_DWORD *)(a1 + 12);

  return sub_100426A74(v2, v3);
}

void sub_10042B9B4(id a1)
{
}

void sub_10042B9F8()
{
}

void sub_10042BA20()
{
}

uint64_t sub_10042BA34(uint64_t a1)
{
  if (qword_1009FB230 != -1) {
    dispatch_once(&qword_1009FB230, &stru_1009ADB20);
  }
  uint64_t v2 = qword_1009FB228;
  uint64_t v3 = *(void *)(a1 + 16);
  int v4 = *(unsigned __int16 *)(a1 + 24);

  return sub_100426B70(v2, v3, v4);
}

void sub_10042BAA0()
{
}

uint64_t sub_10042BAB4(uint64_t a1)
{
  if (qword_1009FB230 != -1) {
    dispatch_once(&qword_1009FB230, &stru_1009ADB20);
  }
  uint64_t v2 = qword_1009FB228;
  uint64_t v3 = *(void *)(a1 + 16);

  return sub_100426E04(v2, v3);
}

void sub_10042BB1C()
{
}

uint64_t sub_10042BB30(uint64_t a1)
{
  if (qword_1009FB230 != -1) {
    dispatch_once(&qword_1009FB230, &stru_1009ADB20);
  }
  uint64_t v2 = qword_1009FB228;
  uint64_t v3 = *(void *)(a1 + 16);

  return sub_1004270EC(v2, v3);
}

uint64_t sub_10042BB94(uint64_t a1, uint64_t a2, void *a3, int **a4, _DWORD *a5, char a6)
{
  id v11 = a3;
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = off_1009ADBF8;
  *(void *)(a1 + 16) = a2;
  id v12 = v11;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 24) = v12;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  sub_10042BD60((void *)(a1 + 32), *a4, a4[1], ((char *)a4[1] - (char *)*a4) >> 5);
  *(_DWORD *)(a1 + 56) = *a5;
  *(unsigned char *)(a1 + 60) = a6;

  return a1;
}

void sub_10042BC3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10042BC54(uint64_t a1)
{
  *(void *)a1 = off_1009ADBF8;
  uint64_t v3 = (void **)(a1 + 32);
  sub_10042C4F0(&v3);

  return a1;
}

void sub_10042BCB4(uint64_t a1)
{
  *(void *)a1 = off_1009ADBF8;
  uint64_t v2 = (void **)(a1 + 32);
  sub_10042C4F0(&v2);

  operator delete();
}

uint64_t sub_10042BD28(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, uint64_t, uint64_t, void))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), *(void *)(a1 + 24), a1 + 32, a1 + 56, *(unsigned __int8 *)(a1 + 60));
}

void *sub_10042BD60(void *result, int *a2, int *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    sub_1002B6450(result, a4);
    uint64_t result = (void *)sub_10042BDC0((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_10042BDB8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10042BDC0(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (a2 != a3)
  {
    long long v6 = a2;
    uint64_t v7 = a4 + 8;
    do
    {
      int v8 = *v6;
      *(_WORD *)(v4 + 4) = *((_WORD *)v6 + 2);
      *(_DWORD *)uint64_t v4 = v8;
      uint64_t v9 = *((void *)v6 + 2);
      *(void *)(v4 + 8) = &off_100998428;
      *(void *)(v4 + 16) = v9;
      if (v9) {
        sub_100037354(v9);
      }
      *(unsigned char *)(v4 + 24) = *((unsigned char *)v6 + 24);
      v4 += 32;
      v7 += 32;
      v6 += 8;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_10042BE58()
{
}

uint64_t sub_10042BE6C(uint64_t a1)
{
  if (qword_1009FB230 != -1) {
    dispatch_once(&qword_1009FB230, &stru_1009ADB20);
  }
  uint64_t v2 = qword_1009FB228;
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  unint64_t v4 = *(void *)(a1 + 16);
  int v5 = *(unsigned __int8 *)(a1 + 24);
  long long v6 = *(uint64_t **)(a1 + 32);

  return sub_100427278(v2, v3, v4, v5, v6);
}

void sub_10042BEE4()
{
}

uint64_t sub_10042BEF8(uint64_t a1)
{
  if (qword_1009FB230 != -1) {
    dispatch_once(&qword_1009FB230, &stru_1009ADB20);
  }
  uint64_t v2 = qword_1009FB228;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);

  return sub_1004274DC(v2, v3, v4);
}

uint64_t sub_10042BF5C(uint64_t a1, uint64_t a2, void *a3, _DWORD *a4, _WORD *a5, uint64_t a6, _DWORD *a7, char a8)
{
  id v15 = a3;
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = off_1009ADCA0;
  *(void *)(a1 + 16) = a2;
  id v16 = v15;
  *(void *)(a1 + 24) = v16;
  *(_DWORD *)(a1 + 32) = *a4;
  *(_WORD *)(a1 + 36) = *a5;
  uint64_t v17 = *(void *)(a6 + 8);
  *(void *)(a1 + 40) = &off_100998428;
  *(void *)(a1 + 48) = v17;
  if (v17) {
    sub_100037354(v17);
  }
  *(_DWORD *)(a1 + 56) = *a7;
  *(unsigned char *)(a1 + 60) = a8;

  return a1;
}

void sub_10042C034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10042C04C(uint64_t a1)
{
  *(void *)a1 = off_1009ADCA0;
  *(void *)(a1 + 40) = &off_100998428;
  uint64_t v2 = *(atomic_uint **)(a1 + 48);
  if (v2) {
    sub_1000368F4(v2);
  }

  return a1;
}

void sub_10042C0C0(uint64_t a1)
{
  *(void *)a1 = off_1009ADCA0;
  *(void *)(a1 + 40) = &off_100998428;
  uint64_t v2 = *(atomic_uint **)(a1 + 48);
  if (v2) {
    sub_1000368F4(v2);
  }

  operator delete();
}

uint64_t sub_10042C154(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t, void))(**(void **)(a1 + 16)
                                                                                               + 24))(*(void *)(a1 + 16), *(void *)(a1 + 24), a1 + 32, a1 + 36, a1 + 40, a1 + 56, *(unsigned __int8 *)(a1 + 60));
}

void sub_10042C198()
{
}

void sub_10042C1AC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 10))
  {
    if (qword_1009FB230 != -1) {
      dispatch_once(&qword_1009FB230, &stru_1009ADB20);
    }
    uint64_t v2 = (void *)qword_1009FB228;
    uint64_t v3 = *(void *)(a1 + 16);
    int v4 = *(unsigned __int16 *)(a1 + 24);
    uint64_t v5 = *(unsigned int *)(a1 + 28);
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void (**)(uint64_t, uint64_t, __int16 *, void))(a1 + 40);
    sub_100428B68(v2, v3, v4, v5, v6, v7);
  }
  else
  {
    if (qword_1009FB230 != -1) {
      dispatch_once(&qword_1009FB230, &stru_1009ADB20);
    }
    uint64_t v8 = qword_1009FB228;
    uint64_t v9 = *(void *)(a1 + 16);
    unsigned int v10 = *(unsigned __int16 *)(a1 + 24);
    uint64_t v11 = *(unsigned int *)(a1 + 28);
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(uint64_t **)(a1 + 40);
    sub_100427930(v8, v9, v10, v11, v12, v13);
  }
}

uint64_t sub_10042C27C(uint64_t a1, char a2, uint64_t a3, char a4, __int16 a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, char a10)
{
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = &off_1009ADD10;
  *(unsigned char *)(a1 + 10) = a2;
  *(void *)(a1 + 16) = a3;
  *(unsigned char *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 26) = a5;
  uint64_t v13 = *(void *)(a6 + 8);
  *(void *)(a1 + 32) = &off_100998428;
  *(void *)(a1 + 40) = v13;
  if (v13) {
    sub_100037354(v13);
  }
  *(_DWORD *)(a1 + 48) = a7;
  *(void *)(a1 + 56) = a8;
  *(void *)(a1 + 64) = a9;
  *(unsigned char *)(a1 + 72) = a10;
  return a1;
}

void *sub_10042C32C(void *a1)
{
  *a1 = &off_1009ADD10;
  a1[4] = &off_100998428;
  uint64_t v2 = (atomic_uint *)a1[5];
  if (v2) {
    sub_1000368F4(v2);
  }
  return a1;
}

void sub_10042C398(void *a1)
{
  *a1 = &off_1009ADD10;
  a1[4] = &off_100998428;
  uint64_t v1 = (atomic_uint *)a1[5];
  if (v1) {
    sub_1000368F4(v1);
  }

  operator delete();
}

void sub_10042C424(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 10))
  {
    if (qword_1009FB230 != -1) {
      dispatch_once(&qword_1009FB230, &stru_1009ADB20);
    }
    sub_100428DF8(qword_1009FB228, *(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), *(unsigned __int16 *)(a1 + 26), a1 + 32, *(unsigned int *)(a1 + 48), *(void *)(a1 + 56), *(void (**)(uint64_t, uint64_t, void, void))(a1 + 64));
  }
  else
  {
    if (qword_1009FB230 != -1) {
      dispatch_once(&qword_1009FB230, &stru_1009ADB20);
    }
    sub_100428504(qword_1009FB228, *(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), *(_WORD *)(a1 + 26), a1 + 32, *(_DWORD *)(a1 + 48), *(void *)(a1 + 56), *(uint64_t **)(a1 + 64));
  }
}

void sub_10042C4F0(void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    sub_10042C544((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_10042C544(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 != a2)
  {
    uint64_t v5 = v4 - 24;
    do
    {
      *(void *)(v4 - 24) = &off_100998428;
      uint64_t v6 = *(atomic_uint **)(v4 - 16);
      if (v6) {
        sub_1000368F4(v6);
      }
      v4 -= 32;
      v5 -= 32;
    }
    while (v4 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

void sub_10042C5BC(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10042C5BC(a1, *a2);
    sub_10042C5BC(a1, a2[1]);
    sub_1000486F0((uint64_t)(a2 + 7), (void *)a2[8]);
    operator delete(a2);
  }
}

void sub_10042C61C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10042C61C(a1, *a2);
    sub_10042C61C(a1, a2[1]);
    uint64_t v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t sub_10042C680(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 128;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 256;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_1002B303C((uint64_t)a1);
}

void sub_10042C728(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_10042C728(a1, *(void *)a2);
    sub_10042C728(a1, *((void *)a2 + 1));
    unint64_t v4 = (void **)(a2 + 40);
    sub_10042C4F0(&v4);
    operator delete(a2);
  }
}

_OWORD *sub_10042C788(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v11 = 0;
  uint64_t v6 = (void **)sub_100085CE4((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x50uLL);
    int v9 = *((_DWORD *)*a4 + 4);
    void v7[2] = **a4;
    *((_DWORD *)v7 + 12) = v9;
    *((void *)v7 + 9) = 0;
    *((void *)v7 + 8) = 0;
    *((void *)v7 + 7) = v7 + 4;
    sub_100036CA0(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

void sub_10042C82C(id a1)
{
}

void sub_10042C870()
{
}

void sub_10042C894(id a1)
{
}

void sub_10042C8D8()
{
}

void sub_10042C8FC(id a1)
{
}

void sub_10042C940()
{
}

void sub_10042C964(id a1)
{
}

void sub_10042C9A8()
{
}

uint64_t sub_10042C9CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 2);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xCCCCCCCCCCCCCCCLL) {
    abort();
  }
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v2) >> 2);
  if (2 * v9 > v4) {
    unint64_t v4 = 2 * v9;
  }
  if (v9 >= 0x666666666666666) {
    unint64_t v10 = 0xCCCCCCCCCCCCCCCLL;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v18 = v7;
  if (v10) {
    uint64_t v11 = (char *)sub_10003767C(v7, v10);
  }
  else {
    uint64_t v11 = 0;
  }
  std::string __p = v11;
  unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v15 = (unsigned __int8 *)&v11[20 * v3];
  id v16 = v15;
  uint64_t v17 = &v11[20 * v10];
  uuid_copy(v15, (const unsigned __int8 *)a2);
  *((_DWORD *)v15 + 4) = *(_DWORD *)(a2 + 16);
  v16 += 20;
  sub_10042CB4C(a1, &__p);
  uint64_t v12 = a1[1];
  if (v16 != v15) {
    id v16 = &v15[(v16 - v15 - 20) % 0x14uLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v12;
}

void sub_10042CB00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10042CB4C(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a2[1];
  if (v5 == *a1)
  {
    uint64_t v7 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v7 = v6 - 20;
      uuid_copy((unsigned __int8 *)(v6 - 20), (const unsigned __int8 *)(v5 - 20));
      *(_DWORD *)(v6 - 4) = *(_DWORD *)(v5 - 4);
      v5 -= 20;
      v6 -= 20;
    }
    while (v5 != v4);
  }
  a2[1] = v7;
  uint64_t v8 = *a1;
  *a1 = v7;
  a2[1] = v8;
  uint64_t v9 = a1[1];
  a1[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = a1[2];
  a1[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
}

void sub_10042CC04(id a1)
{
}

void sub_10042CC48()
{
}

uint64_t *sub_10042CC6C(uint64_t **a1, uint64_t a2)
{
  unint64_t v3 = sub_10004D3B8(a1, (uint64_t *)a2);
  uint64_t v5 = (void **)(a2 + 40);
  sub_10042C4F0(&v5);
  operator delete((void *)a2);
  return v3;
}

uint64_t *sub_10042CCB8(uint64_t **a1, uint64_t *a2)
{
  unint64_t v3 = sub_10004D3B8(a1, a2);
  uint64_t v4 = (void *)a2[5];
  if (v4)
  {
    a2[6] = (uint64_t)v4;
    operator delete(v4);
  }
  operator delete(a2);
  return v3;
}

void *sub_10042CCFC(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = a2 + ((uint64_t)(*(void *)(a1 + 8) - *result) >> 4);
    if (v4 < 1) {
      result -= (unint64_t)(255 - v4) >> 8;
    }
    else {
      result += (unint64_t)v4 >> 8;
    }
  }
  return result;
}

uint64_t sub_10042CD58(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x100) {
    a2 = 1;
  }
  if (v2 < 0x200) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 256;
  }
  return v4 ^ 1u;
}

uint64_t sub_10042CDB8(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 32 * (v2 - v3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x100) {
    a2 = 1;
  }
  if (v5 < 0x200) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

__n128 sub_10042CE28@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X5>, uint64_t a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    uint64_t v21 = 0;
    __n128 v22 = 0uLL;
    uint64_t v19 = a2;
    uint64_t v18 = a4;
    unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v15 = a5;
    uint64_t v16 = a6;
  }
  else
  {
    uint64_t v13 = a3 - 1;
    uint64_t v12 = *a3;
    uint64_t v21 = 0;
    __n128 v22 = 0uLL;
    uint64_t v14 = a4;
    unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      sub_10042CF18(v12, v14, v15, v16, &v21);
      uint64_t v16 = v22.n128_i64[1];
      unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v15 = (uint64_t *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      uint64_t v17 = *v13--;
      uint64_t v12 = v17;
      uint64_t v14 = v17 + 4096;
      uint64_t v21 = 0;
      __n128 v22 = 0uLL;
    }
    uint64_t v18 = *a1 + 4096;
    uint64_t v21 = 0;
    __n128 v22 = 0uLL;
    uint64_t v19 = a2;
  }
  sub_10042CF18(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = a4;
  a7[1] = result;
  return result;
}

void sub_10042CF18(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  if (a1 == a2)
  {
    a2 = a1;
  }
  else
  {
    uint64_t v5 = *a3;
    uint64_t v6 = a2;
    while (1)
    {
      uint64_t v7 = a4 - v5;
      if ((v6 - a1) >> 4 >= v7 >> 4) {
        uint64_t v8 = v7 >> 4;
      }
      else {
        uint64_t v8 = (v6 - a1) >> 4;
      }
      if (v8)
      {
        uint64_t v9 = (uint64_t *)(v6 - 8);
        uint64_t v10 = -16 * v8;
        do
        {
          *(void *)(a4 - 16) = *(v9 - 1);
          a4 -= 16;
          uint64_t v11 = *v9;
          v9 -= 2;
          *(void *)(a4 + 8) = v11;
          v10 += 16;
        }
        while (v10);
      }
      v6 -= 16 * v8;
      if (v6 == a1) {
        break;
      }
      uint64_t v12 = *--a3;
      uint64_t v5 = v12;
      a4 = v12 + 4096;
    }
    if (*a3 + 4096 == a4)
    {
      uint64_t v13 = a3[1];
      ++a3;
      a4 = v13;
    }
  }
  *a5 = a2;
  a5[1] = a3;
  a5[2] = a4;
}

double sub_10042CFA4(char **a1, char *a2, char **a3, char *a4, uint64_t a5)
{
  uint64_t v7 = *(char ***)a5;
  uint64_t v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (uint64_t i = *a1 + 4096; ; uint64_t i = v12 + 4096)
    {
      uint64_t v14 = 0;
      long long v15 = 0uLL;
      sub_10042D048(a2, i, v7, v8, &v14);
      uint64_t v8 = (char *)*((void *)&v15 + 1);
      uint64_t v7 = (char **)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + 8) = v8;
      if (v10 == a3) {
        break;
      }
      uint64_t v12 = *v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  uint64_t v14 = 0;
  long long v15 = 0uLL;
  sub_10042D048(a2, a4, v7, v8, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void sub_10042D048(char *a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, char **a5@<X8>)
{
  if (a1 == a2)
  {
    a2 = a1;
  }
  else
  {
    uint64_t v5 = *a3;
    while (1)
    {
      uint64_t v6 = v5 - a4 + 4096;
      if ((a2 - a1) >> 4 >= v6 >> 4) {
        uint64_t v7 = v6 >> 4;
      }
      else {
        uint64_t v7 = (a2 - a1) >> 4;
      }
      if (v7)
      {
        uint64_t v8 = &a1[16 * v7];
        do
        {
          *(void *)a4 = *(void *)a1;
          *((void *)a4 + 1) = *((void *)a1 + 1);
          a4 += 16;
          a1 += 16;
        }
        while (a1 != v8);
        a1 = v8;
      }
      if (a1 == a2) {
        break;
      }
      uint64_t v9 = a3[1];
      ++a3;
      uint64_t v5 = v9;
      a4 = v9;
    }
    if (*a3 + 4096 == a4)
    {
      uint64_t v10 = a3[1];
      ++a3;
      a4 = v10;
    }
  }
  *a5 = a2;
  a5[1] = (char *)a3;
  a5[2] = a4;
}

uint64_t sub_10042D0D8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 2);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xCCCCCCCCCCCCCCCLL) {
    abort();
  }
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v2) >> 2);
  if (2 * v9 > v4) {
    unint64_t v4 = 2 * v9;
  }
  if (v9 >= 0x666666666666666) {
    unint64_t v10 = 0xCCCCCCCCCCCCCCCLL;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v18 = v7;
  if (v10) {
    uint64_t v11 = (char *)sub_10003767C(v7, v10);
  }
  else {
    uint64_t v11 = 0;
  }
  std::string __p = v11;
  unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v15 = (unsigned __int8 *)&v11[20 * v3];
  uint64_t v16 = v15;
  uint64_t v17 = &v11[20 * v10];
  uuid_copy(v15, (const unsigned __int8 *)a2);
  *((_DWORD *)v15 + 4) = *(_DWORD *)(a2 + 16);
  v16 += 20;
  sub_10042CB4C(a1, &__p);
  uint64_t v12 = a1[1];
  if (v16 != v15) {
    uint64_t v16 = &v15[(v16 - v15 - 20) % 0x14uLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v12;
}

void sub_10042D20C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10042D258(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    BOOL v6 = sub_10071D284((unsigned __int8 *)(v3 + 28), a2);
    uint64_t v7 = (uint64_t *)(v3 + 8);
    if (!v6)
    {
      uint64_t v7 = (uint64_t *)v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || sub_10071D284(a2, (unsigned __int8 *)(v5 + 28))) {
    return v2;
  }
  return v5;
}

void sub_10042D2D4(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    BOOL v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_1000405F8(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      id v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        __int16 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int16 v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_1002B4FA4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1002B50BC((uint64_t)a1, &v54);
    id v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_1000405F8((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        id v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)id v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      id v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  BOOL v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000405F8((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  int v53 = operator new(0x1000uLL);
  sub_1002B51DC(&v54, &v53);
  __int16 v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002B52F4((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10042D5A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_10042D5EC(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = a1 + 1;
  BOOL v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        BOOL v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      BOOL v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (uint64_t *)operator new(0x40uLL);
    uint64_t v12 = **a4;
    v11[6] = 0;
    v11[7] = 0;
    v11[4] = v12;
    v11[5] = 0;
    sub_100036CA0(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void sub_10042D6B0(uint64_t a1, int *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = *a2;
  *(_WORD *)(v4 + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)uint64_t v4 = v5;
  uint64_t v6 = *((void *)a2 + 2);
  *(void *)(v4 + 8) = &off_100998428;
  *(void *)(v4 + 16) = v6;
  if (v6) {
    sub_100037354(v6);
  }
  *(unsigned char *)(v4 + 24) = *((unsigned char *)a2 + 24);
  *(void *)(a1 + 8) = v4 + 32;
}

void sub_10042D72C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10042D734(uint64_t *a1, int *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (a1[1] - *a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    abort();
  }
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v9 = v8 - v2;
  if (v9 >> 4 > v4) {
    unint64_t v4 = v9 >> 4;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v10 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v21 = v7;
  if (v10) {
    uint64_t v11 = (char *)sub_1002B6234(v7, v10);
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = &v11[32 * v3];
  v18[0] = v11;
  v18[1] = v12;
  uint64_t v19 = v12;
  int64_t v20 = &v11[32 * v10];
  int v13 = *a2;
  *((_WORD *)v12 + 2) = *((_WORD *)a2 + 2);
  *(_DWORD *)uint64_t v12 = v13;
  *((void *)v12 + 1) = &off_100998428;
  uint64_t v14 = *((void *)a2 + 2);
  *((void *)v12 + 2) = v14;
  if (v14)
  {
    sub_100037354(v14);
    uint64_t v15 = v19;
  }
  else
  {
    uint64_t v15 = v12;
  }
  v12[24] = *((unsigned char *)a2 + 24);
  uint64_t v19 = v15 + 32;
  sub_10042D858(a1, v18);
  uint64_t v16 = a1[1];
  sub_10042D988((uint64_t)v18);
  return v16;
}

void sub_10042D844(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10042D988((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10042D858(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10042D8D0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10042D8D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = a7 + v11;
      int v13 = *(_DWORD *)(a3 + v11 - 32);
      *(_WORD *)(v12 - 28) = *(_WORD *)(a3 + v11 - 28);
      *(_DWORD *)(v12 - 32) = v13;
      uint64_t v14 = *(void *)(a3 + v11 - 16);
      *(void *)(v12 - 24) = &off_100998428;
      *(void *)(v12 - 16) = v14;
      if (v14) {
        sub_100037354(v14);
      }
      *(unsigned char *)(v12 - 8) = *(unsigned char *)(a3 + v11 - 8);
      v11 -= 32;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

uint64_t sub_10042D988(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10042D9C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    *(void *)(a1 + 16) = v2 - 32;
    *(void *)(v2 - 24) = &off_100998428;
    uint64_t v5 = *(atomic_uint **)(v2 - 16);
    if (v5)
    {
      sub_1000368F4(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
}

unsigned __int8 *sub_10042DA38(unsigned __int8 *src, unsigned __int8 *a2, uuid_t dst)
{
  unint64_t v4 = src;
  if (src == a2) {
    return src;
  }
  uint64_t v5 = a2;
  do
  {
    uuid_copy(dst, v4);
    *((_DWORD *)dst + 4) = *((_DWORD *)v4 + 4);
    dst += 20;
    v4 += 20;
  }
  while (v4 != v5);
  return v5;
}

unsigned __int8 *sub_10042DAA4(unsigned __int8 *src, unsigned __int8 *a2, uuid_t dst)
{
  unint64_t v4 = src;
  if (src == a2) {
    return src;
  }
  uint64_t v5 = a2;
  do
  {
    uuid_copy(dst, v4);
    *((_WORD *)dst + 8) = *((_WORD *)v4 + 8);
    dst += 18;
    v4 += 18;
  }
  while (v4 != v5);
  return v5;
}

uint64_t sub_10042DB10(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 1);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xE38E38E38E38E38) {
    abort();
  }
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v9 = 0x8E38E38E38E38E39 * ((v8 - v2) >> 1);
  if (2 * v9 > v4) {
    unint64_t v4 = 2 * v9;
  }
  if (v9 >= 0x71C71C71C71C71CLL) {
    unint64_t v10 = 0xE38E38E38E38E38;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v18 = v7;
  if (v10) {
    uint64_t v11 = (char *)sub_10030BDB8(v7, v10);
  }
  else {
    uint64_t v11 = 0;
  }
  std::string __p = v11;
  unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v15 = (unsigned __int8 *)&v11[18 * v3];
  uint64_t v16 = v15;
  uint64_t v17 = &v11[18 * v10];
  uuid_copy(v15, (const unsigned __int8 *)a2);
  *((_WORD *)v15 + 8) = *(_WORD *)(a2 + 16);
  v16 += 18;
  sub_10030CA70(a1, &__p);
  uint64_t v12 = a1[1];
  if (v16 != v15) {
    uint64_t v16 = &v15[(v16 - v15 - 18) % 0x12uLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v12;
}

void sub_10042DC64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10042DCB8(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t v9 = 0;
  uint64_t v6 = (uint64_t **)sub_10004A0BC((uint64_t)a1, &v9, uu1);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_10042DD5C((uint64_t)a1, a4, v8);
    sub_100036CA0(a1, v9, v6, (uint64_t *)v8[0]);
    return (uint64_t *)v8[0];
  }
  return result;
}

void sub_10042DD5C(uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  uint64_t v5 = (unsigned __int8 *)(a1 + 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = (unsigned __int8 *)operator new(0x38uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uuid_copy(v6 + 32, *a2);
  *((void *)v6 + 6) = 0;
  *((unsigned char *)a3 + 16) = 1;
}

void sub_10042DDC0(_Unwind_Exception *a1)
{
  void *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_10042DDD8(id a1)
{
}

void sub_10042DE1C()
{
}

void sub_10042DEC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10042DF40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10042DFDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10042E140(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10042E420(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10042E4F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10042E5E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10042EA24(uint64_t a1, void *a2)
{
  id obj = *(id *)(a1 + 112);
  id v4 = a2;
  objc_sync_enter(obj);
  [*(id *)(a1 + 112) addObject:v4];

  objc_sync_exit(obj);
}

void sub_10042EA98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

id sub_10042EAB8(uint64_t a1)
{
  id v2 = *(id *)(a1 + 112);
  objc_sync_enter(v2);
  if ([*(id *)(a1 + 112) count])
  {
    unint64_t v3 = [*(id *)(a1 + 112) objectAtIndex:0];
    [*(id *)(a1 + 112) removeObjectAtIndex:0];
  }
  else
  {
    unint64_t v3 = 0;
  }
  objc_sync_exit(v2);

  return v3;
}

void sub_10042EB50(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_10042EB6C(void *a1)
{
  int v2 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  unint64_t v3 = 0;
  *(void *)&long long v4 = 134218242;
  long long v16 = v4;
  while (1)
  {
    uint64_t v5 = sub_10042EAB8((uint64_t)a1);

    if (!v5) {
      break;
    }
    uint64_t v6 = a1[15];
    unint64_t v3 = v5;
    if (v2 == 3)
    {
      if (v6)
      {
        uint64_t v7 = qword_100A19F00;
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v8 = (char *)sub_10002F4AC((uint64_t)a1);
          uint64_t v9 = a1[11];
          *(_DWORD *)__n128 buf = v16;
          uint64_t v18 = v8 + 1;
          __int16 v19 = 2114;
          uint64_t v20 = v9;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "(CBSR) Sending classic %lu queued messages to application %{public}@", buf, 0x16u);
        }
        id v10 = [v5 msgId:v16];
        uint64_t v11 = [v5 arguments];
        sub_100017388(v6, (int64_t)v10, v11);
        goto LABEL_12;
      }
    }
    else if (v6)
    {
      uint64_t v12 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = (char *)sub_10002F4AC((uint64_t)a1);
        uint64_t v14 = a1[11];
        *(_DWORD *)__n128 buf = v16;
        uint64_t v18 = v13 + 1;
        __int16 v19 = 2114;
        uint64_t v20 = v14;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "(CBSR) Sending %lu queued messages to application %{public}@", buf, 0x16u);
      }
      id v15 = [v5 msgId:v16];
      uint64_t v11 = [v5 arguments];
      sub_100017388(v6 - 144, (int64_t)v15, v11);
LABEL_12:

      unint64_t v3 = v5;
    }
  }
}

void sub_10042ED78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10042EDC0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  v9[0] = @"kCBMsgArgDeviceUUID";
  v9[1] = @"kCBMsgArgAncsAuthorization";
  v10[0] = v5;
  uint64_t v6 = +[NSNumber numberWithBool:a3];
  v10[1] = v6;
  uint64_t v7 = +[NSDictionary dictionaryWithObjects:v10 forKeys:v9 count:2];

  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1))
  {
    uint64_t v8 = 110;
    goto LABEL_5;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) == 1)
  {
    uint64_t v8 = 61;
LABEL_5:
    sub_10002F224(a1, v8, v7);
  }
}

void sub_10042EEFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10042EF2C(void *a1, uint64_t a2)
{
  CFStringRef v5 = @"kCBMsgArgRequiresTCC";
  unint64_t v3 = +[NSNumber numberWithBool:a2];
  uint64_t v6 = v3;
  long long v4 = +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];

  sub_10002F224(a1, 3, v4);
}

void sub_10042EFE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10042F00C(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableString);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1))
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) == 1)
    {
      unint64_t v3 = "Peripheral";
    }
    else
    {
      int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      unint64_t v3 = "Unknown";
      if (v4 == 3) {
        unint64_t v3 = "Classic";
      }
    }
  }
  else
  {
    unint64_t v3 = "Central";
  }
  [v2 appendFormat:@"Type: %s\n", v3];
  sub_10042F298((void *)(a1 + 8), __p);
  if (v14 >= 0) {
    CFStringRef v5 = __p;
  }
  else {
    CFStringRef v5 = (void **)__p[0];
  }
  [v2 appendFormat:@"Last foreground time: %s\n", v5];
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (*(unsigned char *)(a1 + 24)) {
    uint64_t v6 = "Yes";
  }
  else {
    uint64_t v6 = "No";
  }
  [v2 appendFormat:@"Supports backgrounding: %s\n", v6];
  int v7 = *(_DWORD *)(a1 + 32);
  if (v7)
  {
    uint64_t v8 = "Unknown";
    if (v7 == 1) {
      uint64_t v8 = "Listener";
    }
    if (v7 == 2) {
      uint64_t v9 = "Programmatic";
    }
    else {
      uint64_t v9 = v8;
    }
    [v2 appendFormat:@"Pairing agent: %s\n", v9];
  }
  unsigned int v10 = *(unsigned __int8 *)(a1 + 129);
  if (v10 <= 7)
  {
    if (v10 == 2)
    {
      uint64_t v11 = "terminated";
      goto LABEL_34;
    }
    if (v10 == 4)
    {
      uint64_t v11 = "suspended";
      goto LABEL_34;
    }
  }
  else
  {
    switch(v10)
    {
      case 8u:
        uint64_t v11 = "background-running";
        goto LABEL_34;
      case 0x10u:
        uint64_t v11 = "foreground-running";
        goto LABEL_34;
      case 0x20u:
        uint64_t v11 = "daemon";
        goto LABEL_34;
    }
  }
  uint64_t v11 = "unknown";
LABEL_34:
  [v2 appendFormat:@"Execution state: %s\n", v11];

  return v2;
}

void sub_10042F26C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void *sub_10042F298@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  long long v6 = 0u;
  long long v7 = 0u;
  *(_OWORD *)__str = 0u;
  long long v5 = 0u;
  snprintf(__str, 0x3FuLL, "%0llu.%0llu", *a1, a1[1]);
  return sub_10004191C(a2, __str);
}

BOOL sub_10042F320(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 120);
  return v1 && *(_DWORD *)(v1 - 64) > 0;
}

uint64_t sub_10042F344(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 128))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEBUG)) {
      sub_1007678B4();
    }
    uint64_t v6 = *(void *)(a1 + 120);
    if (v6 && *(int *)(v6 - 64) >= 1)
    {
      if (qword_1009FB270 != -1) {
        dispatch_once(&qword_1009FB270, &stru_1009AE0E0);
      }
      if (sub_100737024(qword_1009FB268, 0, *(void **)(a1 + 88)))
      {
        int v7 = *(_DWORD *)(a3 + 168);
        id v8 = *(id *)(a3 + 176);
        uint64_t v9 = v8;
        if (v8 && [v8 count])
        {
          if ([v9 count] == (id)1)
          {
            unsigned int v10 = [v9 objectAtIndexedSubscript:0];
            BOOL v11 = [v10 longLongValue] != 0;

            if (!v11 && v7 == 0)
            {
LABEL_13:
              if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
                sub_10076784C();
              }

              return 348;
            }
          }
        }
        else if (!v7)
        {
          goto LABEL_13;
        }
      }
    }
    *(unsigned char *)(a1 + 381) = *(unsigned char *)(a3 + 199);
    *(_DWORD *)(a1 + 384) = *(_DWORD *)(a3 + 168);
    if (qword_1009F85C8 != -1) {
      dispatch_once(&qword_1009F85C8, &stru_1009AE100);
    }
    uint64_t result = sub_1006DFE0C((uint64_t)off_1009F85C0, a2, a3);
    *(unsigned char *)(a1 + 380) = *(unsigned char *)(a3 + 184);
    if (!result)
    {
      *(void *)(a1 + 368) = 0;
      [*(id *)(a1 + 344) removeAllObjects];
      int v13 = *(long long **)(a3 + 8);
      for (i = *(long long **)(a3 + 16); v13 != i; int v13 = (long long *)((char *)v13 + 20))
      {
        memset(buf, 0, sizeof(buf));
        LODWORD(v33) = 0;
        long long v15 = *v13;
        LODWORD(v33) = *((_DWORD *)v13 + 4);
        *(_OWORD *)__n128 buf = v15;
        long long v38 = 0uLL;
        unsigned int v16 = sub_10071D240(buf, &v38);
        if (v16 == 16 || v16 == 2)
        {
          uint64_t v17 = *(void **)(a1 + 344);
          uint64_t v18 = +[NSData dataWithBytes:&v38 length:v16];
          [v17 addObject:v18];
        }
      }
      *(unsigned char *)(a1 + 306) = *(unsigned char *)(a3 + 143);
      *(unsigned char *)(a1 + 304) = 1;
      if (sub_10053FF64())
      {
        CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle();
        uint64_t v20 = CTGreenTeaOsLogHandle;
        if (CTGreenTeaOsLogHandle)
        {
          if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
          {
            uint64_t v21 = *(void *)(a1 + 88);
            *(_DWORD *)__n128 buf = 138543362;
            *(void *)&uint8_t buf[4] = v21;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "LE start scanning for application '%{public}@'", buf, 0xCu);
          }
        }
      }
      if (qword_1009F8788 != -1) {
        dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
      }
      uint64_t result = sub_1002F27F4((uint64_t)off_1009F8780, a2);
      if (result)
      {
        if (qword_1009F8788 != -1) {
          dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
        }
        unint64_t v22 = sub_1002F2850((uint64_t)off_1009F8780, a2);
        uint64_t v23 = v22;
        long long v38 = 0uLL;
        uint64_t v39 = 0;
        if (v22) {
          sub_10004191C(&v38, (char *)[v22 UTF8String]);
        }
        else {
          sub_10004191C(&v38, "");
        }
        if (qword_1009F8788 != -1) {
          dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
        }
        uint64_t v24 = sub_1002F28C8((uint64_t)off_1009F8780, a2);

        long long v30 = 0uLL;
        uint64_t v31 = 0;
        if (v24) {
          sub_10004191C(&v30, (char *)[v24 UTF8String]);
        }
        else {
          sub_10004191C(&v30, "");
        }
        if (qword_1009F8788 != -1) {
          dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
        }
        unint64_t v25 = sub_1002F2940((uint64_t)off_1009F8780, a2);

        long long v28 = 0uLL;
        uint64_t v29 = 0;
        if (v25) {
          sub_10004191C(&v28, (char *)[v25 UTF8String]);
        }
        else {
          sub_10004191C(&v28, "");
        }
        if (qword_1009F8788 != -1) {
          dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
        }
        char v26 = sub_1003072A8((uint64_t)off_1009F8780, a2);
        if (qword_1009F8788 != -1) {
          dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
        }
        char v27 = sub_1002F45B8((uint64_t)off_1009F8780, a2);
        uint64_t v37 = 0;
        long long v35 = 0u;
        *(_OWORD *)std::string __p = 0u;
        long long v33 = 0u;
        *(_OWORD *)unint64_t v34 = 0u;
        *(_OWORD *)__n128 buf = 0u;
        sub_1004B8EE4((uint64_t)buf, &v28, v27, [*(id *)(a1 + 344) count] == 0, *(unsigned char *)a3, v26, 1, &v30, &v38);
        if (qword_1009FB260 != -1) {
          dispatch_once(&qword_1009FB260, &stru_1009AE120);
        }
        sub_1000504D8();
        if (SHIBYTE(v37) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v35) < 0) {
          operator delete(v34[1]);
        }
        if (SHIBYTE(v33) < 0) {
          operator delete(*(void **)&buf[8]);
        }
        if (SHIBYTE(v29) < 0) {
          operator delete((void *)v28);
        }
        if (SHIBYTE(v31) < 0) {
          operator delete((void *)v30);
        }
        if (SHIBYTE(v39) < 0) {
          operator delete((void *)v38);
        }

        return 0;
      }
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
      sub_1007677E4();
    }
    return 341;
  }
  return result;
}

void sub_10042F94C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10042FA04(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

id sub_10042FA58(uint64_t a1, unint64_t a2)
{
  *(unsigned char *)(a1 + 381) = 0;
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009AE100);
  }
  sub_1006E1A9C((uint64_t)off_1009F85C0, a2, 1, 1, 0);
  *(unsigned char *)(a1 + 304) = 0;
  int v4 = *(void **)(a1 + 344);

  return [v4 removeAllObjects];
}

uint64_t sub_10042FADC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009AE100);
  }
  long long v5 = off_1009F85C0;

  return sub_1006E4038((uint64_t)v5, a2, a3);
}

void sub_10042FB48(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  uint64_t v28 = 0;
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
  }
  uint64_t v9 = off_1009F7EB8;
  sub_1000305AC(v31, v7);
  BOOL v10 = sub_1006856B8((uint64_t)v9, v31, &v28);
  if (v28) {
    BOOL v11 = v10;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
    }
    uint64_t v12 = off_1009F7EB8;
    sub_1000305AC(v31, v7);
    if (!sub_1006857DC((uint64_t)v12, v31) && os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
      sub_100767988();
    }
    uint64_t v13 = sub_1002C5648();
    uint64_t v14 = v28;
    id v15 = v8;
    uint64_t v16 = sub_1002C8E34(v13, v14, [v15 bytes], [v15 length]);
    if (v16)
    {
      uint64_t v17 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
        sub_10076791C(v16, v17, v18, v19, v20, v21, v22, v23);
      }
    }
  }
  else
  {
    uint64_t v24 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
    {
      sub_10003AE4C(a2, (uint64_t)v31);
      sub_1007679F0((char *)v31, (uint64_t)v7, (uint64_t)v32, v24);
    }
    LODWORD(v16) = 312;
  }
  uint64_t v25 = *(void *)(a1 + 120);
  xpc_object_t v26 = xpc_dictionary_create(0, 0, 0);
  *(void *)uuid = 0;
  uint64_t v30 = 0;
  [v7 getUUIDBytes:uuid];
  xpc_dictionary_set_uuid(v26, "kCBMsgArgDeviceUUID", uuid);
  xpc_dictionary_set_int64(v26, "kCBMsgArgResult", (int)v16);
  if (v16) {
    id v27 = 0;
  }
  else {
    id v27 = [v8 length];
  }
  xpc_dictionary_set_int64(v26, "kCBMsgArgBytesSent", (int64_t)v27);
  if (v25) {
    sub_1000173FC(v25 - 144, 138, v26, 1);
  }
  else {
    xpc_release(v26);
  }
  if (*(_DWORD *)(a1 + 376))
  {
    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
    }
    sub_1002F9020((uint64_t)off_1009F8780, *(void **)(a1 + 88), 1);
  }
}

void sub_10042FE34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_10042FE64(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 120);
  return v1 && *(unsigned char *)(v1 + 28) != 0;
}

void sub_10042FE84(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 120);
  if (v7 && *(unsigned char *)(v7 + 28))
  {
    id v8 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v11[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "sending data to upper layer", (uint8_t *)v11, 2u);
    }
    xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
    v11[0] = 0;
    v11[1] = 0;
    [v5 getUUIDBytes:v11];
    xpc_dictionary_set_uuid(v9, "kCBMsgArgDeviceUUID", (const unsigned __int8 *)v11);
    id v10 = v6;
    xpc_dictionary_set_data(v9, "kCBMsgArgObjectDiscoveryData", [v10 bytes], (size_t)[v10 length]);
    sub_1000173FC(v7 - 144, 139, v9, 1);
  }
}

void sub_10042FFD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10042FFF8(uint64_t a1)
{
  if (*(void *)(a1 + 432))
  {
    id v2 = *(NSObject **)(a1 + 440);
    if (v2)
    {
      dispatch_suspend(v2);
    }
    else
    {
      uint64_t v5 = sub_100019878();
      id v6 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(v5 + 8));
      *(void *)(a1 + 440) = v6;
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_10043017C;
      handler[3] = &unk_100997528;
      handler[4] = a1;
      dispatch_source_set_event_handler(v6, handler);
    }
    uint64_t v7 = *(void **)(a1 + 416);
    dispatch_time_t v8 = -1;
    if (v7 != (void *)(a1 + 424))
    {
      do
      {
        if (v8 >= v7[5]) {
          dispatch_time_t v8 = v7[5];
        }
        xpc_object_t v9 = (void *)v7[1];
        if (v9)
        {
          do
          {
            id v10 = v9;
            xpc_object_t v9 = (void *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            id v10 = (void *)v7[2];
            BOOL v11 = *v10 == (void)v7;
            uint64_t v7 = v10;
          }
          while (!v11);
        }
        uint64_t v7 = v10;
      }
      while (v10 != (void *)(a1 + 424));
    }
    dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 440), v8, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
    dispatch_resume(*(dispatch_object_t *)(a1 + 440));
  }
  else
  {
    unint64_t v3 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "No delayed connection", buf, 2u);
    }
    int v4 = *(NSObject **)(a1 + 440);
    if (v4)
    {
      dispatch_source_cancel(v4);
      dispatch_release(*(dispatch_object_t *)(a1 + 440));
      *(void *)(a1 + 440) = 0;
    }
  }
}

void sub_10043017C(uint64_t a1)
{
}

void sub_100430184(uint64_t a1)
{
  dispatch_time_t v2 = dispatch_time(0, 0);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  unint64_t v3 = *(void **)(a1 + 416);
  if (v3 != (void *)(a1 + 424))
  {
    dispatch_time_t v4 = v2;
    do
    {
      if (v3[5] <= v4)
      {
        id v18 = 0;
        id v18 = (id)v3[4];
        uint64_t v5 = [*(id *)(a1 + 408) objectForKeyedSubscript:v18];
        uint64_t v6 = v3[6];
        uint64_t v7 = qword_100A19F00;
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
        {
          id v8 = [v5 delay];
          id v9 = v18;
          sub_10003AE4C(v6, (uint64_t)__p);
          id v10 = __p;
          if (v17 < 0) {
            id v10 = (void **)__p[0];
          }
          *(_DWORD *)__n128 buf = 134218498;
          *(void *)&uint8_t buf[4] = v8;
          __int16 v23 = 2114;
          id v24 = v9;
          __int16 v25 = 2082;
          xpc_object_t v26 = v10;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "delayed connection (%ld seconds) passed, connecting to device %{public}@ session \"%{public}s\" now", buf, 0x20u);
          if (v17 < 0) {
            operator delete(__p[0]);
          }
        }
        [v5 setDelay:0];
        sub_100430414(a1, v6, v18, v5);
        sub_100432A98(&v19, &v18);
      }
      BOOL v11 = (void *)v3[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          BOOL v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (void *)v3[2];
          BOOL v13 = *v12 == (void)v3;
          unint64_t v3 = v12;
        }
        while (!v13);
      }
      unint64_t v3 = v12;
    }
    while (v12 != (void *)(a1 + 424));
    uint64_t v14 = (unint64_t *)v19;
    id v15 = (unint64_t *)v20;
    if (v19 != v20)
    {
      do
      {
        sub_100441CC0(a1 + 416, v14);
        [*(id *)(a1 + 408) removeObjectForKey:*v14++];
      }
      while (v14 != v15);
    }
  }
  sub_10042FFF8(a1);
  *(void *)__n128 buf = &v19;
  sub_100441C40((void ***)buf);
}

void sub_1004303C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void **a21)
{
  a21 = (void **)&a18;
  sub_100441C40(&a21);
  _Unwind_Resume(a1);
}

void sub_100430414(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5 = a3;
  __n128 v167 = v5;
  id v6 = a4;
  int v166 = 0xFFFF;
  if (qword_1009FB240 != -1) {
    dispatch_once(&qword_1009FB240, &stru_1009AE1A0);
  }
  uint64_t v7 = qword_1009FB238;
  sub_1000305AC(v171, v5);
  sub_1004C06DC(v7, v171, &v166);
  if (v166 == 0xFFFF || v166 == 2)
  {
    if (!*(unsigned char *)(a1 + 128))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
        sub_100767C34();
      }
      if (qword_1009F8788 != -1) {
        dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
      }
      sub_1002F7D44((uint64_t)off_1009F8780, a2, a1, v167, 341, 0);
      goto LABEL_351;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEBUG)) {
      sub_100767D04();
    }
    uint64_t v8 = *(void *)(a1 + 120);
    if (v8 && *(int *)(v8 - 64) >= 1)
    {
      if (qword_1009FB270 != -1) {
        dispatch_once(&qword_1009FB270, &stru_1009AE0E0);
      }
      if (sub_100737024(qword_1009FB268, 1uLL, *(void **)(a1 + 88)))
      {
        unsigned int v9 = [v6 connectionUseCase];
        id v10 = [v6 useCaseList];
        BOOL v11 = v10;
        uint64_t v12 = v9;
        if (v10 && [v10 count])
        {
          if ([v11 count] == (id)1)
          {
            BOOL v13 = [v11 objectAtIndexedSubscript:0];
            BOOL v14 = [v13 longLongValue] != 0;

            if (!v14 && v12 == 0) {
              goto LABEL_17;
            }
          }
        }
        else if (!v9)
        {
LABEL_17:
          if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
            sub_100767C9C();
          }
          if (qword_1009F8788 != -1) {
            dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
          }
          sub_1002F7D44((uint64_t)off_1009F8780, a2, a1, v167, 348, 0);

          goto LABEL_351;
        }
      }
    }
  }
  [*(id *)(a1 + 336) addObject:v167];
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
  }
  id v15 = off_1009F7ED8;
  uint64_t v16 = v167;
  sub_10004191C(__p, "_FORCE_GATT_SERVICES_DISCOVERY_");
  int v17 = sub_100030A04((uint64_t)v15, v16, (uint64_t)__p);
  int v18 = v17;
  if (v165 < 0)
  {
    operator delete(__p[0]);
    if (!v18) {
      goto LABEL_42;
    }
  }
  else if (!v17)
  {
    goto LABEL_42;
  }
  uint64_t v19 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Forcing GATT rediscovery later on, deleting cache database", buf, 2u);
  }
  if (qword_1009F7F10 != -1) {
    dispatch_once(&qword_1009F7F10, &stru_1009AE1C0);
  }
  sub_1006386B4(qword_1009F7F08, v167);
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
  }
  sub_1006B85C0((uint64_t)off_1009F7ED8, v167, @"_FORCE_GATT_SERVICES_DISCOVERY_");
LABEL_42:
  if (*(unsigned char *)(a1 + 44))
  {
    if (qword_1009FB270 != -1) {
      dispatch_once(&qword_1009FB270, &stru_1009AE0E0);
    }
    sub_100735CC4(qword_1009FB268, a2, v167, v6);
  }
  if ([v6 resetDisconnectionHistory])
  {
    uint64_t v20 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__n128 buf = 138543362;
      *(void *)&uint8_t buf[4] = v167;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Trigger resetDisconnectionHistory \"%{public}@\" ", buf, 0xCu);
    }
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
    }
    uint64_t v21 = off_1009F7EB8;
    id v22 = [v167 UUIDString];
    sub_10004191C(v162, (char *)[v22 UTF8String]);
    sub_1006A00F0((uint64_t)v21, (const void **)v162);
    if (v163 < 0) {
      operator delete(v162[0]);
    }
  }
  __int16 v23 = [*(id *)(a1 + 248) objectForKey:v167];
  BOOL v24 = v23 == 0;

  if (v24)
  {
    id v27 = *(void **)(a1 + 320);
    if (v27)
    {
      uint64_t v28 = v167;
      uint64_t v29 = a1 + 320;
      do
      {
        unint64_t v30 = v27[4];
        BOOL v31 = v30 >= (unint64_t)v167;
        if (v30 >= (unint64_t)v167) {
          long long v32 = v27;
        }
        else {
          long long v32 = v27 + 1;
        }
        if (v31) {
          uint64_t v29 = (uint64_t)v27;
        }
        id v27 = (void *)*v32;
      }
      while (*v32);
      if (v29 != a1 + 320 && (unint64_t)v167 >= *(void *)(v29 + 32))
      {
        uint64_t v57 = qword_100A19F00;
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__n128 buf = 138543362;
          *(void *)&uint8_t buf[4] = v28;
          _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "FindMy Device %{public}@ already parked until new keys become available", buf, 0xCu);
        }
        goto LABEL_351;
      }
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
    }
    long long v33 = sub_100030C6C((uint64_t)off_1009F7ED8, v167);
    if (v33)
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
      }
      sub_1006C6648((uint64_t)off_1009F7ED8, v167, 2u, (uint64_t)buf);
      BOOL v34 = *(void *)&buf[16] == 0;
      sub_1000486F0((uint64_t)buf, *(void **)&buf[8]);

      if (v34)
      {
        int v58 = qword_100A19F00;
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__n128 buf = 138543362;
          *(void *)&uint8_t buf[4] = v167;
          _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "Device %{public}@ is FindMy but has no valid addresses/keys", buf, 0xCu);
        }
        id v59 = v6;
        *(void *)__n128 buf = &v167;
        id v60 = sub_100441EA4((uint64_t **)(a1 + 312), (unint64_t *)&v167, (uint64_t)&unk_1007BE9D0, (id **)buf);
        objc_storeStrong((id *)v60 + 5, a4);
        v60[6] = a2;
        [*(id *)(a1 + 248) setObject:v59 forKey:v167];

        goto LABEL_351;
      }
    }
    if ([v6 isLatencyCritical])
    {
      long long v35 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__n128 buf = 138543362;
        *(void *)&uint8_t buf[4] = v167;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Latency Critical Action: LE Connection for device %{public}@", buf, 0xCu);
      }
      sub_100432BB8(a1);
    }
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
    }
    long long v153 = sub_10004034C((uint64_t)off_1009F7EB8);
    if (qword_1009FB270 != -1) {
      dispatch_once(&qword_1009FB270, &stru_1009AE0E0);
    }
    unsigned int v36 = sub_100735630(qword_1009FB268, (int)[v6 connectionUseCase]);
    if (qword_1009FB270 != -1) {
      dispatch_once(&qword_1009FB270, &stru_1009AE0E0);
    }
    unsigned int v37 = sub_100735410(qword_1009FB268, [v6 connectionUseCase]);
    if (v36 >= v37)
    {
      uint64_t v47 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
      {
        unsigned __int16 v48 = (unsigned __int16)[v6 connectionUseCase];
        *(_DWORD *)__n128 buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v48;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v36;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "Exceeded max connection limit for use case:%d for counter: %d", buf, 0xEu);
      }
      long long v160 = 0u;
      long long v161 = 0u;
      long long v158 = 0u;
      long long v159 = 0u;
      id v49 = v153;
      id v50 = [v49 countByEnumeratingWithState:&v158 objects:v170 count:16];
      if (v50)
      {
        uint64_t v51 = *(void *)v159;
        do
        {
          for (uint64_t i = 0; i != v50; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v159 != v51) {
              objc_enumerationMutation(v49);
            }
            int v53 = *(void **)(*((void *)&v158 + 1) + 8 * i);
            if (qword_1009F7EE0 != -1) {
              dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
            }
            int v54 = sub_1006BDC1C((uint64_t)off_1009F7ED8, v53);
            if (v54 == [v6 connectionUseCase])
            {
              if (qword_1009FB270 != -1) {
                dispatch_once(&qword_1009FB270, &stru_1009AE0E0);
              }
              if (sub_100735630(qword_1009FB268, (int)[v6 connectionUseCase]) >= v37)
              {
                long long v55 = qword_100A19F00;
                if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
                {
                  unsigned __int16 v56 = (unsigned __int16)[v6 connectionUseCase];
                  *(_DWORD *)__n128 buf = 138543618;
                  *(void *)&uint8_t buf[4] = v53;
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v56;
                  _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "Exceeded max connection :device %{public}@ for use case:%d", buf, 0x12u);
                }
              }
            }
          }
          id v50 = [v49 countByEnumeratingWithState:&v158 objects:v170 count:16];
        }
        while (v50);
      }

      if (qword_1009F8788 != -1) {
        dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
      }
      sub_1002F7D44((uint64_t)off_1009F8780, a2, a1, v167, 336, 0);
      goto LABEL_350;
    }
    if ((uint64_t)[v6 delay] >= 1)
    {
      long long v38 = qword_100A19F00;
      if (*(unsigned char *)(a1 + 24))
      {
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v39 = v167;
          id v40 = [v6 delay];
          *(_DWORD *)__n128 buf = 138543618;
          *(void *)&uint8_t buf[4] = v39;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v40;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Add delayed connection to device %{public}@ with %ld seconds delay.", buf, 0x16u);
        }
        dispatch_time_t v41 = dispatch_time(0, 1000000000 * (void)[v6 delay]);
        *(void *)__n128 buf = &v167;
        uint64_t v42 = sub_100441EA4((uint64_t **)(a1 + 416), (unint64_t *)&v167, (uint64_t)&unk_1007BE9D0, (id **)buf);
        v42[5] = v41;
        v42[6] = a2;
        [*(id *)(a1 + 408) setObject:v6 forKey:v167];
        sub_10042FFF8(a1);
        goto LABEL_350;
      }
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
        sub_100767C00();
      }
    }
    sub_100432ED0(a1, v167, v6);
    sub_100433408(a1, v167, v6);
    sub_1004335F0(a1, a2, v167, v6);
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
    }
    uint64_t v61 = off_1009F7ED8;
    id v62 = v167;
    sub_10003AE4C(a2, (uint64_t)buf);
    int v63 = (char)buf[23];
    uint64_t v64 = *(uint8_t **)buf;
    NSStringEncoding v65 = +[NSString defaultCStringEncoding];
    if (v63 >= 0) {
      id v66 = buf;
    }
    else {
      id v66 = v64;
    }
    id v67 = +[NSString stringWithCString:v66 encoding:v65];
    int v68 = [v6 clientBundleID];
    sub_1006C233C((uint64_t)v61, v62, v67, v68);

    if ((char)buf[23] < 0) {
      operator delete(*(void **)buf);
    }
    sub_100433B7C(v69, v167, v6);
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
    }
    sub_1006BF360((uint64_t)off_1009F7ED8, v167, (char)[v6 minRSSILevelForConnection]);
    id v70 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      signed __int8 v71 = [v6 minRSSILevelForConnection];
      *(_DWORD *)__n128 buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = v71;
      *(_WORD *)&uint8_t buf[8] = 2114;
      *(void *)&buf[10] = v167;
      _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "Setting minimum RSSI level for connection to %d for device %{public}@", buf, 0x12u);
    }
    char v72 = qword_100A19F30;
    if (os_log_type_enabled((os_log_t)qword_100A19F30, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v73 = *(void *)(a1 + 88);
      *(_DWORD *)__n128 buf = 138543618;
      *(void *)&uint8_t buf[4] = v167;
      *(_WORD *)&unsigned char buf[12] = 2114;
      *(void *)&buf[14] = v73;
      _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "App connecting - {cbuuid: %{public}@, bundle: %{public}@}", buf, 0x16u);
    }
    int v74 = [v6 connectionUseCase];
    uint64_t v75 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      int v76 = sub_10003B8B0(v74);
      uint64_t v77 = *(void *)(a1 + 88);
      *(_DWORD *)__n128 buf = 136446722;
      *(void *)&uint8_t buf[4] = v76;
      *(_WORD *)&unsigned char buf[12] = 2114;
      *(void *)&buf[14] = v167;
      *(_WORD *)&unsigned char buf[22] = 2114;
      *(void *)&uint8_t buf[24] = v77;
      _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "BLE Connecting %{public}s %{public}@ for %{public}@", buf, 0x20u);
      uint64_t v75 = qword_100A19F00;
    }
    if (os_signpost_enabled(v75))
    {
      unint64_t v78 = sub_10003B8B0(v74);
      uint64_t v79 = *(void *)(a1 + 88);
      *(_DWORD *)__n128 buf = 136446722;
      *(void *)&uint8_t buf[4] = v78;
      *(_WORD *)&unsigned char buf[12] = 2114;
      *(void *)&buf[14] = v167;
      *(_WORD *)&unsigned char buf[22] = 2114;
      *(void *)&uint8_t buf[24] = v79;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v75, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "BTSignPost", "BLE Connecting %{public}s %{public}@ for %{public}@", buf, 0x20u);
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
    }
    unint64_t v80 = off_1009F7ED8;
    char v81 = v167;
    double Current = CFAbsoluteTimeGetCurrent();
    sub_1006BBDD8((uint64_t)v80, v81, Current);
    long long v83 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      long long v84 = v167;
      sub_10003AE4C(a2, (uint64_t)&v169);
      long long v85 = (v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v169
          : (std::string *)v169.__r_.__value_.__r.__words[0];
      *(_DWORD *)__n128 buf = 138543874;
      *(void *)&uint8_t buf[4] = v84;
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v85;
      *(_WORD *)&unsigned char buf[22] = 2114;
      *(void *)&uint8_t buf[24] = v6;
      _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEFAULT, "Connecting device \"%{public}@\" for session \"%{public}s\" with options %{public}@", buf, 0x20u);
      if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v169.__r_.__value_.__l.__data_);
      }
    }
    id v86 = [v6 ctkdChosenTransport];
    id v87 = v86;
    if (v166 == 1 && v86 != (id)1)
    {
      long long v88 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__n128 buf = 138543618;
        *(void *)&uint8_t buf[4] = v167;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1;
        _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEFAULT, "Device \"%{public}@\" is connected to CATT transport=%d", buf, 0x12u);
      }
      [*(id *)(a1 + 248) setObject:v6 forKey:v167];
      if (qword_1009F8788 != -1) {
        dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
      }
      sub_1002F7D44((uint64_t)off_1009F8780, a2, a1, v167, 0, 0);
      goto LABEL_350;
    }
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
    }
    long long v89 = off_1009F7EB8;
    sub_1000305AC(buf, v167);
    if (sub_1000307A4((uint64_t)v89, buf)) {
      goto LABEL_174;
    }
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
    }
    long long v90 = off_1009F7EB8;
    sub_1000305AC(&v169, v167);
    if (sub_10067E248(v90, (unsigned __int8 *)&v169))
    {
LABEL_174:
      if (([v6 disableLeGATT] & 1) == 0)
      {
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
        }
        if (sub_1006C3C08((uint64_t)off_1009F7ED8, v167))
        {
          if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
            sub_100767B98();
          }
          if (qword_1009F8788 != -1) {
            dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
          }
          sub_1002F7D44((uint64_t)off_1009F8780, a2, a1, v167, 117, 0);
        }
      }
    }
    unint64_t v91 = (unint64_t)[v6 connectionUseCase] & 0xFFFF0000;
    long long v92 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEBUG)) {
      sub_100767B1C(v91 == 589824, v92);
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
    }
    sub_1006C3C9C((uint64_t)off_1009F7ED8, v167, v91 == 589824);
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
    }
    uint64_t v93 = sub_100030DCC((uint64_t)off_1009F7ED8, v167, 0);
    int v94 = 0;
    if ((v93 & 0xFF000000000000) == 0 && (v93 & 0xFFFFFFFFFFFFLL) != 0)
    {
      if (qword_1009F7F00 != -1) {
        dispatch_once(&qword_1009F7F00, &stru_1009AE1E0);
      }
      uint64_t v95 = sub_100030F10((uint64_t)off_1009F7EF8, v93, 0);
      uint64_t v96 = v95;
      if (v95 && sub_1004764A0(v95))
      {
        int v97 = sub_1004784AC(v96);
        if (v87 == (id)1) {
          int v94 = 0;
        }
        else {
          int v94 = v97;
        }
      }
      else
      {
        int v94 = 0;
      }
    }
    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
    }
    if ((sub_100307090((uint64_t)off_1009F8780, v167) | v94) == 1)
    {
      sub_100433E90(a1, v167);
      goto LABEL_222;
    }
    sub_10003AE4C(a2, (uint64_t)buf);
    if (sub_1003174A4((uint64_t *)buf, "com.apple.bluetoothd", 0) == -1)
    {
      BOOL v99 = 0;
    }
    else
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
      }
      sub_1006BE7F4((uint64_t)off_1009F7ED8, v167, (uint64_t)&v169);
      std::string::size_type size = v169.__r_.__value_.__l.__size_;
      if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v169.__r_.__value_.__r.__words[2]);
      }
      BOOL v99 = size != 0;
      if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v169.__r_.__value_.__l.__data_);
      }
    }
    if ((char)buf[23] < 0) {
      operator delete(*(void **)buf);
    }
    if (v99)
    {
      if (qword_1009F7EC0 != -1) {
        dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
      }
      uint64_t v100 = off_1009F7EB8;
      sub_1000305AC(buf, v167);
      sub_100685850((uint64_t)v100, buf);
    }
    if ([v6 requiresLowLatency])
    {
      if (qword_1009F7EC0 != -1) {
        dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
      }
      uint64_t v101 = off_1009F7EB8;
      sub_1000305AC(buf, v167);
      sub_100685850((uint64_t)v101, buf);
    }
    if ([v6 opportunistic]) {
      goto LABEL_222;
    }
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
    }
    int v108 = sub_100680ED4((uint64_t)off_1009F7EB8, v167);
    int v109 = v108;
    if (v108 <= 201)
    {
      if (!v108)
      {
LABEL_222:
        uint64_t v102 = [v6 temporaryLTK];
        if (!v102) {
          goto LABEL_271;
        }
        BOOL v103 = [v6 temporaryLTK];
        BOOL v104 = [v103 length] == 0;

        if (v104) {
          goto LABEL_271;
        }
        int v105 = qword_100A19F00;
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__n128 buf = 138543362;
          *(void *)&uint8_t buf[4] = v167;
          _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_DEFAULT, "setting up temporary LTK for device %{public}@", buf, 0xCu);
        }
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
        }
        if (sub_1006BB9F4((uint64_t)off_1009F7ED8, v167))
        {
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
          }
          unint64_t v106 = off_1009F7ED8;
          sub_1000305AC(buf, v167);
          uint64_t v107 = sub_1006C0B74((uint64_t)v106, buf);
        }
        else
        {
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
          }
          uint64_t v107 = sub_100030DCC((uint64_t)off_1009F7ED8, v167, 0);
        }
        unint64_t v114 = v107;
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
        }
        sub_1006C6648((uint64_t)off_1009F7ED8, v167, 2u, (uint64_t)buf);
        if (!*(void *)&buf[8])
        {
LABEL_262:
          sub_1000486F0((uint64_t)buf, *(void **)&buf[8]);
          __n128 v117 = qword_100A19F00;
          if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__n128 buf = 138412290;
            *(void *)&uint8_t buf[4] = v167;
            _os_log_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_DEFAULT, "setting up temporary LTK for device %@", buf, 0xCu);
          }
          buf[0] = 0;
          int v118 = [v6 temporaryLTK];
          unsigned __int8 v119 = [v118 length];

          buf[0] = v119;
          v169.__r_.__value_.__s.__data_[0] = 2;
          if (qword_1009F7ED0 != -1) {
            dispatch_once(&qword_1009F7ED0, &stru_1009AE200);
          }
          uint64_t v120 = qword_1009F7EC8;
          id v121 = [v6 temporaryLTK];
          int v122 = (unsigned __int8 *)[v121 bytes];
          __n128 v123 = [v6 temporaryLTK];
          sub_100710A9C(v120, v114, 5, v122, [v123 length]);

          if (qword_1009F7ED0 != -1) {
            dispatch_once(&qword_1009F7ED0, &stru_1009AE200);
          }
          sub_100710A9C(qword_1009F7EC8, v114, 6, buf, 1u);
          if (qword_1009F7ED0 != -1) {
            dispatch_once(&qword_1009F7ED0, &stru_1009AE200);
          }
          sub_100710A9C(qword_1009F7EC8, v114, 7, (unsigned __int8 *)&v169, 1u);
          goto LABEL_271;
        }
        long long v115 = *(void **)&buf[8];
        while (1)
        {
          unint64_t v116 = v115[4];
          if (v114 >= v116)
          {
            if (v116 >= v114)
            {
              sub_1000486F0((uint64_t)buf, *(void **)&buf[8]);
              int v142 = qword_100A19F00;
              if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
              {
                std::string::size_type v143 = (std::string::size_type)v167;
                sub_10004BDF8();
                long long v144 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
                LODWORD(v169.__r_.__value_.__l.__data_) = 138412546;
                *(std::string::size_type *)((char *)v169.__r_.__value_.__r.__words + 4) = v143;
                WORD2(v169.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&v169.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v144;
                _os_log_impl((void *)&_mh_execute_header, v142, OS_LOG_TYPE_DEFAULT, "Ignoring temporary LTK for device %@ with address %s as we already have extra addresses and LTK's set up", (uint8_t *)&v169, 0x16u);
                if ((char)buf[23] < 0) {
                  operator delete(*(void **)buf);
                }
              }
LABEL_271:
              int v124 = [v6 temporaryIRK];
              if (v124)
              {
                long long v125 = [v6 temporaryIdentityAddress];
                BOOL v126 = v125 == 0;

                if (!v126)
                {
                  long long v127 = qword_100A19F00;
                  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)__n128 buf = 138543362;
                    *(void *)&uint8_t buf[4] = v167;
                    _os_log_impl((void *)&_mh_execute_header, v127, OS_LOG_TYPE_DEFAULT, "setting up temporary IRK for device %{public}@", buf, 0xCu);
                  }
                  *(_DWORD *)((char *)v169.__r_.__value_.__r.__words + 3) = 0;
                  LODWORD(v169.__r_.__value_.__l.__data_) = 0;
                  int v128 = [v6 temporaryIdentityAddress];
                  unint64_t v129 = sub_1006ADA24(v128);

                  v169.__r_.__value_.__s.__data_[0] = 0;
                  unint64_t v130 = sub_10022A5E0(v129);
                  *(_DWORD *)((char *)&v169.__r_.__value_.__l.__data_ + 1) = v130;
                  *(_WORD *)((char *)v169.__r_.__value_.__r.__words + 5) = WORD2(v130);
                  long long v131 = [v6 temporaryIRK];
                  id v132 = [v131 length];

                  if (v132 == (id)16)
                  {
                    *(void *)__n128 buf = 0;
                    *(void *)&uint8_t buf[8] = 0;
                    id v133 = [v6 temporaryIRK];
                    *(_OWORD *)__n128 buf = *(_OWORD *)[v133 bytes];

                    if (qword_1009F7ED0 != -1) {
                      dispatch_once(&qword_1009F7ED0, &stru_1009AE200);
                    }
                    sub_100714144(qword_1009F7EC8, (uint64_t)&v169, (uint64_t)buf, v167);
                    goto LABEL_279;
                  }
                  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
                    sub_100767A6C();
                  }
LABEL_350:

                  goto LABEL_351;
                }
              }
LABEL_279:
              if ([v6 connectionUseCase] == (id)21
                || [v6 connectionUseCase] == (id)20
                || [v6 connectionUseCase] == (id)655360)
              {
                if (qword_1009F7ED0 != -1) {
                  dispatch_once(&qword_1009F7ED0, &stru_1009AE200);
                }
                if (!sub_100713D84(qword_1009F7EC8, v167))
                {
                  int v134 = qword_100A19F00;
                  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)__n128 buf = 138543362;
                    *(void *)&uint8_t buf[4] = v167;
                    _os_log_impl((void *)&_mh_execute_header, v134, OS_LOG_TYPE_DEFAULT, "fast IRK Resolution for device successful %{public}@", buf, 0xCu);
                  }
                }
              }
              if (qword_1009F7EE0 != -1) {
                dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
              }
              sub_1006C3B7C((uint64_t)off_1009F7ED8, v167, (char)[v6 disableLeGATT]);
LABEL_290:
              long long v135 = qword_100A19F38;
              if (os_log_type_enabled((os_log_t)qword_100A19F38, OS_LOG_TYPE_DEFAULT))
              {
                int v136 = v167;
                if (qword_1009F7EE0 != -1) {
                  dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
                }
                __n128 v137 = &v169;
                sub_10003093C((uint64_t)off_1009F7ED8, v167, (uint64_t)&v169);
                if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  __n128 v137 = (std::string *)v169.__r_.__value_.__r.__words[0];
                }
                if (qword_1009F7EE0 != -1) {
                  dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
                }
                sub_100030DCC((uint64_t)off_1009F7ED8, v167, 1);
                sub_1006AD488();
                id v138 = (id)objc_claimAutoreleasedReturnValue();
                if (qword_1009F7EE0 != -1) {
                  dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
                }
                BOOL v139 = sub_1006BB9F4((uint64_t)off_1009F7ED8, v167);
                if (v139)
                {
                  if (qword_1009F7EE0 != -1) {
                    dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
                  }
                  sub_100030DCC((uint64_t)off_1009F7ED8, v167, 0);
                  sub_1006AD488();
                  __n128 v140 = (__CFString *)objc_claimAutoreleasedReturnValue();
                }
                else
                {
                  __n128 v140 = &stru_1009C1AC8;
                }
                *(_DWORD *)__n128 buf = 138544386;
                *(void *)&uint8_t buf[4] = v136;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = v137;
                *(_WORD *)&unsigned char buf[22] = 1024;
                *(_DWORD *)&uint8_t buf[24] = 0;
                *(_WORD *)&buf[28] = 2114;
                *(void *)&buf[30] = v138;
                *(_WORD *)&buf[38] = 2114;
                *(void *)&uint8_t buf[40] = v140;
                _os_log_impl((void *)&_mh_execute_header, v135, OS_LOG_TYPE_DEFAULT, "Device connecting - {cbuuid: %{public}@, devicename: %s, result: %d, adv-addr: %{public}@, resolved-addr: %{public}@}", buf, 0x30u);
                if (v139) {

                }
                if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v169.__r_.__value_.__l.__data_);
                }
              }
              [*(id *)(a1 + 248) setObject:v6 forKey:v167];
              if ([v6 opportunistic])
              {
                if (qword_1009F7EC0 != -1) {
                  dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
                }
                long long v141 = off_1009F7EB8;
                sub_1000305AC(buf, v167);
                if (sub_1006854C8((uint64_t)v141, buf))
                {
                  if (qword_1009F8788 != -1) {
                    dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
                  }
                  sub_1002F7D44((uint64_t)off_1009F8780, a2, a1, v167, 0, 0);
                }
              }
LABEL_340:
              memset(buf, 0, sizeof(buf));
              sub_10004191C(&v169, (char *)[*(id *)(a1 + 88) UTF8String]);
              sub_1004B8EF0((uint64_t)buf, (long long *)&v169, *(unsigned char *)(a1 + 129), v167);
              if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v169.__r_.__value_.__l.__data_);
              }
              if (qword_1009FB260 != -1) {
                dispatch_once(&qword_1009FB260, &stru_1009AE120);
              }
              sub_1000504D8();
              long long v147 = (void (***)(void, std::string *, uint64_t, void *))sub_1003731C0();
              sub_100551758(a2, &v169);
              if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                int v148 = &v169;
              }
              else {
                int v148 = (std::string *)v169.__r_.__value_.__r.__words[0];
              }
              (**v147)(v147, v148, 1, v167);
              if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v169.__r_.__value_.__l.__data_);
              }
              sub_1002F7FBC((uint64_t)buf);
              goto LABEL_350;
            }
            ++v115;
          }
          long long v115 = (void *)*v115;
          if (!v115) {
            goto LABEL_262;
          }
        }
      }
      if (v108 == 8)
      {
        if (qword_1009FB240 != -1) {
          dispatch_once(&qword_1009FB240, &stru_1009AE1A0);
        }
        if (sub_1004C063C(qword_1009FB238, v167)) {
          goto LABEL_290;
        }
      }
    }
    else
    {
      switch(v108)
      {
        case 202:
          [*(id *)(a1 + 336) removeObject:v167];
          break;
        case 310:
          __n128 v149 = qword_100A19F00;
          if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
          {
            uint64_t v150 = (uint64_t)v167;
            sub_10003AE4C(a2, (uint64_t)buf);
            sub_100767AA0(v150, (char *)buf, (uint64_t)&v169, v149);
          }
          int v151 = [*(id *)(a1 + 256) objectForKey:v167];
          BOOL v152 = v151 == 0;

          if (v152) {
            [*(id *)(a1 + 256) setObject:v6 forKey:v167];
          }
          goto LABEL_350;
        case 311:
          if (qword_1009F7EC0 != -1) {
            dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
          }
          int v110 = off_1009F7EB8;
          sub_1000305AC(buf, v167);
          if (sub_1006854C8((uint64_t)v110, buf))
          {
            if (qword_1009F8788 != -1) {
              dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
            }
            sub_1002F7D44((uint64_t)off_1009F8780, a2, a1, v167, 0, 0);
            if (qword_1009F7EE0 != -1) {
              dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
            }
            float v111 = off_1009F7ED8;
            v112 = v167;
            sub_10004191C(v156, "_CTKD_");
            int v113 = sub_100030A04((uint64_t)v111, v112, (uint64_t)v156);
            if (v157 < 0) {
              operator delete(v156[0]);
            }
            if (v113)
            {
              if (qword_1009F8788 != -1) {
                dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
              }
              sub_1002FC7F4((uint64_t)off_1009F8780, v167, 1, 0);
            }
          }
          goto LABEL_290;
      }
    }
    if ([v6 isLatencyCritical])
    {
      int v145 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__n128 buf = 138543362;
        *(void *)&uint8_t buf[4] = v167;
        _os_log_impl((void *)&_mh_execute_header, v145, OS_LOG_TYPE_DEFAULT, "Latency Critical Action: Disable LE Connection for connect failure to device %{public}@", buf, 0xCu);
      }
      sub_100432DC4(a1);
    }
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
    }
    __n128 v146 = off_1009F7EB8;
    sub_1000305AC(buf, v167);
    sub_1006859B0((uint64_t)v146, buf);
    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
    }
    sub_1002F7D44((uint64_t)off_1009F8780, a2, a1, v167, v109, 0);
    goto LABEL_340;
  }
  if (v166 == 1)
  {
    if (qword_1009FB240 != -1) {
      dispatch_once(&qword_1009FB240, &stru_1009AE1A0);
    }
    BOOL v26 = sub_1004C063C(qword_1009FB238, v167);
    goto LABEL_96;
  }
  if (v166 == 2)
  {
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
    }
    __int16 v25 = off_1009F7EB8;
    sub_1000305AC(buf, v167);
    BOOL v26 = sub_1006854C8((uint64_t)v25, buf);
LABEL_96:
    BOOL v43 = v26;
    goto LABEL_98;
  }
  BOOL v43 = 0;
LABEL_98:
  id v44 = qword_100A19F00;
  if (!os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO)) {
    goto LABEL_103;
  }
  std::string::size_type v45 = (std::string::size_type)v167;
  sub_10003AE4C(a2, (uint64_t)buf);
  unint64_t v46 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
  LODWORD(v169.__r_.__value_.__l.__data_) = 138543618;
  *(std::string::size_type *)((char *)v169.__r_.__value_.__r.__words + 4) = v45;
  WORD2(v169.__r_.__value_.__r.__words[1]) = 2082;
  *(std::string::size_type *)((char *)&v169.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v46;
  _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, "Attempting to add device \"%{public}@\" more than once for session \"%{public}s\"", (uint8_t *)&v169, 0x16u);
  if ((char)buf[23] < 0)
  {
    operator delete(*(void **)buf);
    if (!v43) {
      goto LABEL_351;
    }
  }
  else
  {
LABEL_103:
    if (!v43) {
      goto LABEL_351;
    }
  }
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
  }
  sub_1002F7D44((uint64_t)off_1009F8780, a2, a1, v167, 0, 0);
LABEL_351:
}

void sub_100432820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  _Unwind_Resume(a1);
}

id sub_100432A98(char **a1, id *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = (v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61) {
      abort();
    }
    uint64_t v11 = v5 - (void)*a1;
    uint64_t v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v25 = v4;
    if (v13) {
      BOOL v14 = (char *)sub_1000405F8(v4, v13);
    }
    else {
      BOOL v14 = 0;
    }
    id v15 = &v14[8 * v10];
    uint64_t v16 = &v14[8 * v13];
    BOOL v24 = v16;
    *(void *)id v15 = *a2;
    unsigned int v9 = v15 + 8;
    v23.i64[1] = (uint64_t)(v15 + 8);
    int v18 = *a1;
    int v17 = a1[1];
    if (v17 == *a1)
    {
      int64x2_t v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *(void *)int v17 = 0;
        *((void *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      int64x2_t v20 = *(int64x2_t *)a1;
      unsigned int v9 = (char *)v23.i64[1];
      uint64_t v16 = v24;
    }
    *a1 = v15;
    a1[1] = v9;
    int64x2_t v23 = v20;
    uint64_t v21 = a1[2];
    a1[2] = v16;
    BOOL v24 = v21;
    uint64_t v22 = v20.i64[0];
    id result = (id)sub_10026C648((uint64_t)&v22);
  }
  else
  {
    id result = *a2;
    *(void *)uint64_t v7 = result;
    unsigned int v9 = v7 + 8;
  }
  a1[1] = v9;
  return result;
}

void sub_100432BB8(uint64_t a1)
{
  if (!*(void *)(a1 + 480))
  {
    *(unsigned char *)(a1 + 472) = 1;
    if (qword_1009F85C8 != -1) {
      dispatch_once(&qword_1009F85C8, &stru_1009AE100);
    }
    sub_1006F0EF8((uint64_t)off_1009F85C0, @"com.apple.bluetooth.LatencyCriticalAction");
    uint64_t v2 = sub_100019878();
    unint64_t v3 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(v2 + 8));
    *(void *)(a1 + 480) = v3;
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_100432D50;
    handler[3] = &unk_100997528;
    handler[4] = a1;
    dispatch_source_set_event_handler(v3, handler);
    uint64_t v4 = *(NSObject **)(a1 + 480);
    dispatch_time_t v5 = dispatch_time(0, 7500000000);
    dispatch_source_set_timer(v4, v5, 0xFFFFFFFFFFFFFFFFLL, 0);
    unint64_t v6 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 480);
      *(_DWORD *)__n128 buf = 138412290;
      uint64_t v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Latency Critical Action: Timer Start - %@", buf, 0xCu);
    }
    dispatch_activate(*(dispatch_object_t *)(a1 + 480));
  }
}

uint64_t sub_100432D50(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Latency Critical Action: Timer expired!", v4, 2u);
  }
  return sub_100432DC4(v1);
}

uint64_t sub_100432DC4(uint64_t result)
{
  uint64_t v1 = *(NSObject **)(result + 480);
  if (v1)
  {
    uint64_t v2 = result;
    unint64_t v3 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 138412290;
      dispatch_time_t v5 = v1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Latency Critical Action: Cancel timer: %@", (uint8_t *)&v4, 0xCu);
      uint64_t v1 = *(NSObject **)(v2 + 480);
    }
    dispatch_source_cancel(v1);
    dispatch_release(*(dispatch_object_t *)(v2 + 480));
    *(void *)(v2 + 480) = 0;
    *(unsigned char *)(v2 + 472) = 0;
    if (qword_1009F85C8 != -1) {
      dispatch_once(&qword_1009F85C8, &stru_1009AE100);
    }
    return sub_1006F11B4((uint64_t)off_1009F85C0, @"com.apple.bluetooth.LatencyCriticalAction");
  }
  return result;
}

void sub_100432ED0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  int v8 = *(_DWORD *)(a1 + 488);
  if (v8 != -1)
  {
    unsigned int v9 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__n128 buf = 138543618;
      id v31 = v5;
      __int16 v32 = 1024;
      int v33 = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Overriding device %{public}@ coexConnectionPriority to %d", buf, 0x12u);
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
    }
    sub_1006C616C((uint64_t)off_1009F7ED8, v5, *(unsigned char *)(a1 + 488));
    goto LABEL_16;
  }
  if ([v6 connectionUseCase] != (id)21
    && [v7 connectionUseCase] != (id)20
    && [v7 connectionUseCase] != (id)655360)
  {
    char v10 = 0;
    int v12 = *(unsigned __int8 *)(a1 + 129);
    if (v12 == 4 || v12 == 8) {
      goto LABEL_11;
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
    }
    if ((sub_1006BDD68((uint64_t)off_1009F7ED8, v5) & 1) == 0)
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
      }
      unint64_t v13 = off_1009F7ED8;
      sub_10004191C(__p, "A1603");
      if (sub_100030A04((uint64_t)v13, v5, (uint64_t)__p))
      {
        if (v29 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
        }
        BOOL v14 = off_1009F7ED8;
        sub_10004191C(v26, "A2051");
        if (sub_100030A04((uint64_t)v14, v5, (uint64_t)v26))
        {
          char v15 = 1;
        }
        else
        {
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
          }
          uint64_t v16 = off_1009F7ED8;
          sub_10004191C(v24, "A3085");
          if (sub_100030A04((uint64_t)v16, v5, (uint64_t)v24))
          {
            char v15 = 1;
          }
          else
          {
            if (qword_1009F7EE0 != -1) {
              dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
            }
            int v17 = off_1009F7ED8;
            sub_10004191C(v22, "A2538");
            char v15 = sub_100030A04((uint64_t)v17, v5, (uint64_t)v22);
            if (v23 < 0) {
              operator delete(v22[0]);
            }
          }
          if (v25 < 0) {
            operator delete(v24[0]);
          }
        }
        if (v27 < 0) {
          operator delete(v26[0]);
        }
        if (v29 < 0) {
          operator delete(__p[0]);
        }
        if ((v15 & 1) == 0)
        {
          if ([v7 connectionUseCase] == (id)19
            || [v7 connectionUseCase] == (id)196608
            || *(unsigned char *)(a1 + 129) == 32)
          {
            goto LABEL_54;
          }
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
          }
          int v18 = off_1009F7ED8;
          sub_10004191C(v20, "_HID_DEVICE_");
          char v19 = sub_100030A04((uint64_t)v18, v5, (uint64_t)v20);
          if (v21 < 0) {
            operator delete(v20[0]);
          }
          if (v19)
          {
LABEL_54:
            char v10 = 1;
            goto LABEL_11;
          }
          if (*(unsigned char *)(a1 + 129) == 16)
          {
            char v10 = 2;
            goto LABEL_11;
          }
          if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
            sub_100767D6C();
          }
        }
      }
    }
  }
  char v10 = 0;
LABEL_11:
  uint64_t v11 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__n128 buf = 138543362;
    id v31 = v5;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Device %{public}@ overriding wifi coex policy", buf, 0xCu);
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
  }
  sub_1006C616C((uint64_t)off_1009F7ED8, v5, v10);
LABEL_16:
}

void sub_100433374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100433408(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (([*(id *)(a1 + 88) isEqualToString:@"com.teslamotors.TeslaApp"] & 1) != 0
    || ([*(id *)(a1 + 88) isEqualToString:@"com.teslamotors.enterpriseapp"] & 1) != 0
    || [v6 connectionUseCase] == (id)3
    || [v6 connectionUseCase] == (id)4)
  {
    goto LABEL_9;
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
  }
  if ((sub_1006BDD68((uint64_t)off_1009F7ED8, v5) & 1) != 0 || [v6 waitForConnectionPoll])
  {
LABEL_9:
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
    }
    sub_1006BF3EC((uint64_t)off_1009F7ED8, v5, 1);
    uint64_t v7 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 138543362;
      id v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Enabling Poll/Null check for device %{public}@", (uint8_t *)&v8, 0xCu);
    }
  }
  else
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
    }
    sub_1006BF3EC((uint64_t)off_1009F7ED8, v5, 0);
  }
}

void sub_1004335D4(_Unwind_Exception *exception_object)
{
}

void sub_1004335F0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  if ([v8 connectionUseCase])
  {
    id v9 = [v8 connectionUseCase];
    uint64_t v10 = (uint64_t)v9;
    if (v9 != 23 && v9) {
      goto LABEL_29;
    }
  }
  else
  {
    LODWORD(v10) = 0;
  }
  if (([*(id *)(a1 + 88) isEqualToString:@"com.teslamotors.TeslaApp"] & 1) != 0
    || ([*(id *)(a1 + 88) isEqualToString:@"com.teslamotors.enterpriseapp"] & 1) != 0
    || [*(id *)(a1 + 88) hasPrefix:@"com.rivian.ios.consumer"])
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
    }
    if (sub_1006BDD68((uint64_t)off_1009F7ED8, v7))
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
      }
      sub_1006B85C0((uint64_t)off_1009F7ED8, v7, @"HasTS");
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
      }
      if ((sub_1006BF1AC((uint64_t)off_1009F7ED8, v7) & 1) == 0)
      {
        if (qword_1009FB088 != -1) {
          dispatch_once(&qword_1009FB088, &stru_1009AE180);
        }
        uint64_t v11 = qword_1009FB080;
        sub_10004191C(v31, "HasTS");
        sub_10004191C(__p, "Tesla Tagged HasTS UnsetTag");
        sub_1004B7DA8(60.0, v11, (uint64_t *)v31, (uint64_t *)__p);
        if (v30 < 0) {
          operator delete(__p[0]);
        }
        if (v32 < 0) {
          operator delete(v31[0]);
        }
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
          sub_100767DA0();
        }
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
        }
        sub_1006BF248((uint64_t)off_1009F7ED8, v7, 1);
      }
    }
    uint64_t v10 = 16;
  }
  else
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
    }
    if (sub_1006BDD68((uint64_t)off_1009F7ED8, v7))
    {
      uint64_t v10 = 11;
    }
    else
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
      }
      char v25 = off_1009F7ED8;
      sub_10004191C(v27, "ANCSAuthorized");
      int v26 = sub_100030A04((uint64_t)v25, v7, (uint64_t)v27);
      if (v28 < 0) {
        operator delete(v27[0]);
      }
      if (v26) {
        uint64_t v10 = 23;
      }
      else {
        uint64_t v10 = v10;
      }
    }
  }
LABEL_29:
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
  }
  sub_1006C1E98((uint64_t)off_1009F7ED8, v7, v10);
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
  }
  int v12 = off_1009F7ED8;
  unint64_t v13 = [v8 useCaseList];
  sub_1006C1F24((uint64_t)v12, v7, v13);

  sub_10003AE4C(a2, (uint64_t)v31);
  int v14 = v32;
  char v15 = (void **)v31[0];
  NSStringEncoding v16 = +[NSString defaultCStringEncoding];
  if (v14 >= 0) {
    int v17 = v31;
  }
  else {
    int v17 = v15;
  }
  int v18 = +[NSString stringWithCString:v17 encoding:v16];
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  char v19 = [v8 useCaseList];
  if (v19
    && ([v8 useCaseList],
        int64x2_t v20 = objc_claimAutoreleasedReturnValue(),
        id v21 = [v20 count],
        v20,
        v19,
        v21))
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
    }
    uint64_t v22 = off_1009F7ED8;
    char v23 = [v8 useCaseList];
    sub_1006C2544((uint64_t)v22, v7, v18, v23);
  }
  else
  {
    BOOL v24 = +[NSNumber numberWithUnsignedInt:v10];
    char v23 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", v24, 0);

    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
    }
    sub_1006C2544((uint64_t)off_1009F7ED8, v7, v18, v23);
  }
}

void sub_100433ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100433B7C(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  if ([v5 minRSSILevelForConnection])
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
    }
    sub_1006BF360((uint64_t)off_1009F7ED8, v4, (char)[v5 minRSSILevelForConnection]);
    id v6 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      v7[0] = 67109378;
      v7[1] = (char)[v5 minRSSILevelForConnection];
      __int16 v8 = 2114;
      id v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Setting minimum RSSI level for connection to %d for device %{public}@ requested in connectOptions", (uint8_t *)v7, 0x12u);
    }
  }
}

void sub_100433CA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100433E90(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v3 = *(void *)(a1 + 400);
  if (!v3) {
    operator new();
  }
  sub_10036D508(v3, v4);
}

void sub_100433F20(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100433F54(uint64_t a1, uint64_t a2, void *a3, int a4, int a5, unsigned int a6)
{
  id v11 = a3;
  id v52 = v11;
  if (*(unsigned char *)(a1 + 44) && (a4 & 1) == 0)
  {
    if (qword_1009FB270 != -1) {
      dispatch_once(&qword_1009FB270, &stru_1009AE0E0);
    }
    uint64_t v12 = qword_1009FB268;
    unint64_t v13 = [*(id *)(a1 + 248) objectForKeyedSubscript:v11];
    sub_100736290(v12, a2, v11, v13);
  }
  [*(id *)(a1 + 80) removeObjectForKey:v11];
  int v14 = *(void **)(a1 + 320);
  if (v14)
  {
    uint64_t v15 = a1 + 320;
    do
    {
      unint64_t v16 = v14[4];
      BOOL v17 = v16 >= (unint64_t)v11;
      if (v16 >= (unint64_t)v11) {
        int v18 = v14;
      }
      else {
        int v18 = v14 + 1;
      }
      if (v17) {
        uint64_t v15 = (uint64_t)v14;
      }
      int v14 = (void *)*v18;
    }
    while (*v18);
    if (v15 != a1 + 320 && *(void *)(v15 + 32) <= (unint64_t)v11)
    {
      sub_10044203C(a1 + 312, (unint64_t *)&v52);
      [*(id *)(a1 + 248) removeObjectForKey:v52];
      id v11 = v52;
      goto LABEL_111;
    }
  }
  char v19 = [*(id *)(a1 + 408) objectForKey:v11];

  if (!v19)
  {
    BOOL v24 = [*(id *)(a1 + 256) objectForKey:v11];
    if (v24)
    {
      char v25 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
      {
        sub_10003AE4C(a2, (uint64_t)buf);
        int v26 = (SBYTE7(v57) & 0x80u) == 0 ? buf : *(uint8_t **)buf;
        LODWORD(v55.__r_.__value_.__l.__data_) = 138543618;
        *(std::string::size_type *)((char *)v55.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
        WORD2(v55.__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&v55.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v26;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Device \"%{public}@\" for session \"%{public}s\" is already disconnecting, removing it from the pending devices list", (uint8_t *)&v55, 0x16u);
        if (SBYTE7(v57) < 0) {
          operator delete(*(void **)buf);
        }
      }
      [*(id *)(a1 + 256) removeObjectForKey:v11];
    }
    char v27 = [*(id *)(a1 + 248) objectForKeyedSubscript:v11];

    char v28 = v27;
    if (!v27) {
      goto LABEL_110;
    }
    if ([v27 isLatencyCritical])
    {
      char v29 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__n128 buf = 138543362;
        *(void *)&uint8_t buf[4] = v11;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Latency Critical Action: Device %{public}@ disconnecting cancel timer", buf, 0xCu);
      }
      sub_100432DC4(a1);
    }
    long long v57 = 0u;
    long long v58 = 0u;
    *(_OWORD *)__n128 buf = 0u;
    sub_10004191C(&v55, (char *)[*(id *)(a1 + 88) UTF8String]);
    sub_1004B8F40((uint64_t)buf, (long long *)&v55, *(unsigned char *)(a1 + 129), v11);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v55.__r_.__value_.__l.__data_);
    }
    int v50 = a5;
    if (qword_1009FB260 != -1) {
      dispatch_once(&qword_1009FB260, &stru_1009AE120);
    }
    sub_1000504D8();
    char v30 = (void (***)(void, std::string *, void, id))sub_1003731C0();
    sub_100551758(a2, &v55);
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      id v31 = &v55;
    }
    else {
      id v31 = (std::string *)v55.__r_.__value_.__r.__words[0];
    }
    (**v30)(v30, v31, 0, v11);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v55.__r_.__value_.__l.__data_);
    }
    char v32 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      sub_10003AE4C(a2, (uint64_t)&v55);
      int v33 = (v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v55
          : (std::string *)v55.__r_.__value_.__r.__words[0];
      *(_DWORD *)int v53 = 138543618;
      *(void *)&v53[4] = v11;
      *(_WORD *)&v53[12] = 2082;
      *(void *)&v53[14] = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Disconnecting device \"%{public}@\" for session \"%{public}s\"", v53, 0x16u);
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v55.__r_.__value_.__l.__data_);
      }
    }
    [*(id *)(a1 + 248) removeObjectForKey:v11];
    sub_10003AE4C(a2, (uint64_t)&v55);
    unsigned int v51 = a6;
    int64_t size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
    char v35 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      unsigned int v36 = &v55;
    }
    else
    {
      int64_t size = v55.__r_.__value_.__l.__size_;
      unsigned int v36 = (std::string *)v55.__r_.__value_.__r.__words[0];
    }
    if (size >= 20)
    {
      long long v38 = (char *)v36 + size;
      uint64_t v39 = v36;
      while (1)
      {
        id v40 = (char *)memchr(v39, 99, size - 19);
        if (!v40)
        {
LABEL_77:
          BOOL v37 = 0;
          goto LABEL_78;
        }
        BOOL v41 = *(void *)v40 == 0x6C7070612E6D6F63 && *((void *)v40 + 1) == 0x6F7465756C622E65;
        if (v41 && *((_DWORD *)v40 + 4) == 1684567151) {
          break;
        }
        uint64_t v39 = (std::string *)(v40 + 1);
        int64_t size = v38 - (char *)v39;
        if (v38 - (char *)v39 < 20) {
          goto LABEL_77;
        }
      }
      BOOL v37 = 0;
      if (v40 != v38 && v40 - (char *)v36 != -1)
      {
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
        }
        sub_1006BE7F4((uint64_t)off_1009F7ED8, v11, (uint64_t)v53);
        uint64_t v49 = *(void *)&v53[8];
        if ((v54 & 0x80u) == 0) {
          uint64_t v49 = v54;
        }
        BOOL v37 = v49 != 0;
        if ((char)v54 < 0) {
          operator delete(*(void **)v53);
        }
        char v35 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
      }
    }
    else
    {
      BOOL v37 = 0;
    }
LABEL_78:
    if (v35 < 0)
    {
      operator delete(v55.__r_.__value_.__l.__data_);
      if (!v37)
      {
LABEL_85:
        if ([v28 requiresLowLatency])
        {
          if (qword_1009F7EC0 != -1) {
            dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
          }
          id v44 = off_1009F7EB8;
          sub_1000305AC(&v55, v11);
          sub_1006859B0((uint64_t)v44, (const unsigned __int8 *)&v55);
        }
        std::string::size_type v45 = qword_100A19F30;
        if (os_log_type_enabled((os_log_t)qword_100A19F30, OS_LOG_TYPE_DEFAULT))
        {
          std::string::size_type v46 = *(void *)(a1 + 88);
          LODWORD(v55.__r_.__value_.__l.__data_) = 138543618;
          *(std::string::size_type *)((char *)v55.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
          WORD2(v55.__r_.__value_.__r.__words[1]) = 2114;
          *(std::string::size_type *)((char *)&v55.__r_.__value_.__r.__words[1] + 6) = v46;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "App disconnecting - {cbuuid: %{public}@, bundle: %{public}@}", (uint8_t *)&v55, 0x16u);
        }
        if (qword_1009F8788 != -1) {
          dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
        }
        sub_1002FC9CC((uint64_t)off_1009F8780, a2, a1, v11, v51, 0);
        if (a4)
        {
          if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
            sub_100767DD4();
          }
          if (v50)
          {
            uint64_t v47 = qword_100A19F00;
            if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(v55.__r_.__value_.__l.__data_) = 138543362;
              *(std::string::size_type *)((char *)v55.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
              _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "Disconnecting Do Not Autoconnect device \"%{public}@\" if with builtInServices", (uint8_t *)&v55, 0xCu);
            }
            if (qword_1009F7EE0 != -1) {
              dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
            }
            sub_1006C3A48((uint64_t)off_1009F7ED8, v11);
          }
          if (qword_1009F7EC0 != -1) {
            dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
          }
          unsigned __int16 v48 = off_1009F7EB8;
          sub_1000305AC(&v55, v11);
          sub_100683CFC((uint64_t)v48, (unsigned __int8 *)&v55, 2u);
        }
        else
        {
          if (qword_1009F8788 != -1) {
            dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
          }
          sub_1002F1770((uint64_t)off_1009F8780);
        }

        if (SHIBYTE(v57) < 0) {
          operator delete(*(void **)&buf[8]);
        }
LABEL_110:
        [*(id *)(a1 + 336) removeObject:v11];

        goto LABEL_111;
      }
    }
    else if (!v37)
    {
      goto LABEL_85;
    }
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
    }
    BOOL v43 = off_1009F7EB8;
    sub_1000305AC(&v55, v11);
    sub_1006859B0((uint64_t)v43, (const unsigned __int8 *)&v55);
    goto LABEL_85;
  }
  int64x2_t v20 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__n128 buf = 138543362;
    *(void *)&uint8_t buf[4] = v11;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Removing delayed connection to device %{public}@", buf, 0xCu);
  }
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
  }
  sub_1002FC9CC((uint64_t)off_1009F8780, a2, a1, v11, 0, 0);
  id v21 = *(void **)(a1 + 416);
  if (v21 != (void *)(a1 + 424))
  {
    while ([v11 compare:v21[4]])
    {
      uint64_t v22 = (void *)v21[1];
      if (v22)
      {
        do
        {
          char v23 = v22;
          uint64_t v22 = (void *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          char v23 = (void *)v21[2];
          BOOL v41 = *v23 == (void)v21;
          id v21 = v23;
        }
        while (!v41);
      }
      id v21 = v23;
      if (v23 == (void *)(a1 + 424)) {
        goto LABEL_66;
      }
    }
    sub_100441CC0(a1 + 416, v21 + 4);
    id v11 = v52;
  }
LABEL_66:
  [*(id *)(a1 + 408) removeObjectForKey:v11];
  sub_10042FFF8(a1);
LABEL_111:
}

void sub_1004348A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_1002F7FBC((uint64_t)&a24);

  _Unwind_Resume(a1);
}

uint64_t sub_10043495C(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1[36])
  {
    int v26 = v3;
    std::string __p = 0;
    char v28 = 0;
    char v29 = 0;
    id v5 = (void *)a1[34];
    if (v5 != a1 + 35)
    {
      do
      {
        long long v30 = *((_OWORD *)v5 + 2);
        int v31 = *((_DWORD *)v5 + 12);
        id v6 = (id)v5[7];
        id v7 = v28;
        if (v28 >= v29)
        {
          unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((v28 - (unsigned char *)__p) >> 2);
          unint64_t v10 = v9 + 1;
          if (v9 + 1 > 0xCCCCCCCCCCCCCCCLL) {
            abort();
          }
          if (0x999999999999999ALL * ((v29 - (unsigned char *)__p) >> 2) > v10) {
            unint64_t v10 = 0x999999999999999ALL * ((v29 - (unsigned char *)__p) >> 2);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((v29 - (unsigned char *)__p) >> 2) >= 0x666666666666666) {
            unint64_t v11 = 0xCCCCCCCCCCCCCCCLL;
          }
          else {
            unint64_t v11 = v10;
          }
          if (v11) {
            uint64_t v12 = (char *)sub_10003767C((uint64_t)&v29, v11);
          }
          else {
            uint64_t v12 = 0;
          }
          unint64_t v13 = &v12[4 * ((v28 - (unsigned char *)__p) >> 2)];
          *(_OWORD *)unint64_t v13 = v30;
          *((_DWORD *)v13 + 4) = v31;
          uint64_t v15 = (char *)__p;
          int v14 = v28;
          unint64_t v16 = &v12[20 * v9];
          if (v28 != __p)
          {
            do
            {
              long long v17 = *(_OWORD *)(v14 - 20);
              *((_DWORD *)v16 - 1) = *((_DWORD *)v14 - 1);
              *(_OWORD *)(v16 - 20) = v17;
              v16 -= 20;
              v14 -= 20;
            }
            while (v14 != v15);
            int v14 = (char *)__p;
          }
          __int16 v8 = v13 + 20;
          std::string __p = v16;
          char v28 = v13 + 20;
          char v29 = &v12[20 * v11];
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(_OWORD *)char v28 = v30;
          *((_DWORD *)v7 + 4) = v31;
          __int16 v8 = v7 + 20;
        }
        char v28 = v8;

        int v18 = (void *)v5[1];
        if (v18)
        {
          do
          {
            char v19 = v18;
            int v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            char v19 = (void *)v5[2];
            BOOL v20 = *v19 == (void)v5;
            id v5 = v19;
          }
          while (!v20);
        }
        id v5 = v19;
      }
      while (v19 != a1 + 35);
    }
    uint64_t v21 = a1[15];
    if (qword_1009F7F10 != -1) {
      dispatch_once(&qword_1009F7F10, &stru_1009AE1C0);
    }
    id v4 = v26;
    if (v21)
    {
      BOOL v22 = *(unsigned char *)(v21 + 39) != 0;
      uint64_t v23 = *(unsigned int *)(v21 + 52);
    }
    else
    {
      BOOL v22 = 0;
      uint64_t v23 = 0;
    }
    uint64_t v24 = sub_10063C4FC(qword_1009F7F08, v26, (long long **)&__p, v22, v23, 1);
    if (__p)
    {
      char v28 = (char *)__p;
      operator delete(__p);
    }
  }
  else
  {
    uint64_t v24 = 0;
  }

  return v24;
}

void sub_100434BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100434C24(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 **a4, char a5)
{
  id v56 = a3;
  [*(id *)(a1 + 264) removeAllObjects];
  sub_1000519C0(a1 + 272, *(void **)(a1 + 280));
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 272) = a1 + 280;
  [*(id *)(a1 + 296) removeAllObjects];
  *(unsigned char *)(a1 + 305) = a5;
  long long v58 = +[NSMutableDictionary dictionary];
  id v59 = +[NSMutableString string];
  id v7 = *a4;
  __int16 v8 = a4[1];
  if (*a4 == v8)
  {
    unsigned __int16 v10 = 0;
    unsigned __int16 v9 = 0;
  }
  else
  {
    unsigned __int16 v9 = 0;
    unsigned __int16 v10 = 0;
    do
    {
      sub_1000417A8((uint64_t)v7, buf);
      if (v85 >= 0) {
        unint64_t v11 = buf;
      }
      else {
        unint64_t v11 = *(unsigned char **)buf;
      }
      uint64_t v12 = +[NSString stringWithUTF8String:v11];
      unint64_t v13 = +[NSString stringWithFormat:@"%@ ", v12];
      [v59 appendString:v13];

      if (v85 < 0) {
        operator delete(*(void **)buf);
      }
      int v15 = *v7;
      v7 += 20;
      int v14 = v15;
      if (v15 == 16) {
        ++v9;
      }
      if (v14 == 2) {
        ++v10;
      }
    }
    while (v7 != v8);
  }
  [v58 setObject:v59 forKeyedSubscript:@"ServiceUUID"];
  unint64_t v16 = +[NSNumber numberWithUnsignedShort:v10];
  [v58 setObject:v16 forKeyedSubscript:@"NumberOf16bitUUID"];

  long long v17 = +[NSNumber numberWithUnsignedShort:v9];
  [v58 setObject:v17 forKeyedSubscript:@"NumberOf128bitUUID"];

  [v58 setObject:*(void *)(a1 + 88) forKeyedSubscript:@"BundleID"];
  int v18 = +[NSNumber numberWithBool:a4[1] != *a4];
  [v58 setObject:v18 forKeyedSubscript:@"registerForSpecificGATTServices"];

  char v19 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v56 count] != 0);
  [v58 setObject:v19 forKeyedSubscript:@"registerForSpecificDevices"];

  uint64_t v20 = sub_100019878();
  v75[0] = _NSConcreteStackBlock;
  v75[1] = 3221225472;
  v75[2] = sub_1004357E4;
  v75[3] = &unk_100997450;
  id v55 = v58;
  id v76 = v55;
  sub_100013018(v20, v75);
  if (!*(unsigned char *)(a1 + 305))
  {
    long long v69 = 0uLL;
    long long v70 = 0uLL;
    long long v67 = 0uLL;
    long long v68 = 0uLL;
    id v21 = v56;
    id v27 = [v21 countByEnumeratingWithState:&v67 objects:v82 count:16];
    if (!v27) {
      goto LABEL_58;
    }
    uint64_t v28 = *(void *)v68;
    while (1)
    {
      char v29 = 0;
      do
      {
        if (*(void *)v68 != v28) {
          objc_enumerationMutation(v21);
        }
        long long v30 = *(void **)(*((void *)&v67 + 1) + 8 * (void)v29);
        int v31 = qword_100A19F00;
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__n128 buf = 138543362;
          *(void *)&uint8_t buf[4] = v30;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Parsing %{public}@", buf, 0xCu);
        }
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
        }
        char v32 = off_1009F7ED8;
        sub_10004191C(__p, "IsAppleWatch");
        int v33 = sub_100030A04((uint64_t)v32, v30, (uint64_t)__p);
        int v34 = v33;
        if (v66 < 0)
        {
          operator delete(__p[0]);
          if (v34)
          {
LABEL_45:
            char v35 = qword_100A19F00;
            if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)__n128 buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Not adding watch to connection options", buf, 2u);
            }
            goto LABEL_56;
          }
        }
        else if (v33)
        {
          goto LABEL_45;
        }
        unsigned int v36 = *(void **)(a1 + 264);
        BOOL v37 = +[ConnectOptions alertOptionsWithConnectionAlerts:1 disconnectionAlerts:0 notificationAlerts:0 delay:0 bridgeTransport:0];
        [v36 setObject:v37 forKey:v30];

        if (qword_1009FB240 != -1) {
          dispatch_once(&qword_1009FB240, &stru_1009AE1A0);
        }
        if (sub_1004C063C(qword_1009FB238, v30))
        {
          long long v38 = qword_100A19F00;
          if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__n128 buf = 138543362;
            *(void *)&uint8_t buf[4] = v30;
            _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "%{public}@ is already connected ! firing event now", buf, 0xCu);
          }
          if (qword_1009F8788 != -1) {
            dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
          }
          sub_1002FF088((uint64_t)off_1009F8780, a2, a1, v30, 1u);
        }
LABEL_56:
        char v29 = (char *)v29 + 1;
      }
      while (v27 != v29);
      id v27 = [v21 countByEnumeratingWithState:&v67 objects:v82 count:16];
      if (!v27) {
        goto LABEL_58;
      }
    }
  }
  long long v73 = 0uLL;
  long long v74 = 0uLL;
  long long v71 = 0uLL;
  long long v72 = 0uLL;
  if (qword_1009F7F10 != -1) {
    dispatch_once(&qword_1009F7F10, &stru_1009AE1C0);
  }
  sub_10063CC9C(qword_1009F7F08);
  id v21 = (id)objc_claimAutoreleasedReturnValue();
  id v22 = [v21 countByEnumeratingWithState:&v71 objects:v83 count:16];
  if (v22)
  {
    uint64_t v23 = *(void *)v72;
    do
    {
      uint64_t v24 = 0;
      do
      {
        if (*(void *)v72 != v23) {
          objc_enumerationMutation(v21);
        }
        char v25 = *(void **)(*((void *)&v71 + 1) + 8 * (void)v24);
        if (qword_1009FB240 != -1) {
          dispatch_once(&qword_1009FB240, &stru_1009AE1A0);
        }
        if (sub_1004C063C(qword_1009FB238, v25))
        {
          int v26 = qword_100A19F00;
          if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__n128 buf = 138543362;
            *(void *)&uint8_t buf[4] = v25;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "registerForConnectionEventsWithOptionsforApp - notifyConnectionEventDidOccur - Device:%{public}@", buf, 0xCu);
          }
          if (qword_1009F8788 != -1) {
            dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
          }
          sub_1002FF088((uint64_t)off_1009F8780, a2, a1, v25, 1u);
        }
        uint64_t v24 = (char *)v24 + 1;
      }
      while (v22 != v24);
      id v22 = [v21 countByEnumeratingWithState:&v71 objects:v83 count:16];
    }
    while (v22);
  }
LABEL_58:

  uint64_t v39 = *a4;
  id v40 = a4[1];
  if (*a4 != v40)
  {
    unsigned int v41 = 0;
    while (1)
    {
      long long v42 = *(_OWORD *)v39;
      int v81 = *((_DWORD *)v39 + 4);
      long long v80 = v42;
      BOOL v43 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
      {
        sub_1000417A8((uint64_t)&v80, buf);
        id v44 = buf;
        if (v85 < 0) {
          id v44 = *(unsigned char **)buf;
        }
        *(_DWORD *)unint64_t v78 = 136446210;
        uint64_t v79 = v44;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "Parsing %{public}s", v78, 0xCu);
        if (v85 < 0) {
          operator delete(*(void **)buf);
        }
      }
      if (v41 > 3) {
        break;
      }
      uint64_t v45 = +[ConnectOptions alertOptionsWithConnectionAlerts:1 disconnectionAlerts:0 notificationAlerts:0 delay:0 bridgeTransport:0];
      *(void *)__n128 buf = &v80;
      std::string::size_type v46 = sub_1004420E8((uint64_t **)(a1 + 272), (unsigned __int8 *)&v80, (uint64_t)&unk_1007BE9D0, (_OWORD **)buf);
      uint64_t v47 = (void *)*((void *)v46 + 7);
      *((void *)v46 + 7) = v45;

      ++v41;
      v39 += 20;
      if (v39 == v40) {
        goto LABEL_70;
      }
    }
    unsigned __int16 v48 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__n128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = 4;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "Exceeded the number of allowed services (%d)", buf, 8u);
    }
  }
LABEL_70:
  if (qword_1009F7F10 != -1) {
    dispatch_once(&qword_1009F7F10, &stru_1009AE1C0);
  }
  sub_10063CB2C(qword_1009F7F08, a4);
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  id v49 = (id)objc_claimAutoreleasedReturnValue();
  id v50 = [v49 countByEnumeratingWithState:&v61 objects:v77 count:16];
  if (v50)
  {
    uint64_t v51 = *(void *)v62;
    do
    {
      id v52 = 0;
      do
      {
        if (*(void *)v62 != v51) {
          objc_enumerationMutation(v49);
        }
        int v53 = *(void **)(*((void *)&v61 + 1) + 8 * (void)v52);
        if (qword_1009FB240 != -1) {
          dispatch_once(&qword_1009FB240, &stru_1009AE1A0);
        }
        if (sub_1004C063C(qword_1009FB238, v53) && sub_10043495C((void *)a1, v53))
        {
          unsigned __int8 v54 = qword_100A19F00;
          if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__n128 buf = 138543362;
            *(void *)&uint8_t buf[4] = v53;
            _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "%{public}@ is already connected and has an existing service, firing event now", buf, 0xCu);
          }
          if (qword_1009F8788 != -1) {
            dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
          }
          sub_1002FF088((uint64_t)off_1009F8780, a2, a1, v53, 1u);
        }
        id v52 = (char *)v52 + 1;
      }
      while (v50 != v52);
      id v50 = [v49 countByEnumeratingWithState:&v61 objects:v77 count:16];
    }
    while (v50);
  }
}

void sub_1004356B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1004357E4()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_100050530() + 352);

  return v0();
}

uint64_t sub_100435844(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  id v6 = a3;
  if (qword_1009FB240 != -1) {
    dispatch_once(&qword_1009FB240, &stru_1009AE1A0);
  }
  int v11 = 0;
  uint64_t v7 = qword_1009FB238;
  sub_1000305AC(v13, v6);
  if (sub_1004C06DC(v7, v13, &v11) || v11 != 1)
  {
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
    }
    unsigned __int16 v9 = off_1009F7EB8;
    sub_1000305AC(v12, v6);
    uint64_t v8 = sub_10068553C((uint64_t)v9, a2, v12, a4);
  }
  else
  {
    uint64_t v8 = 11;
  }

  return v8;
}

void sub_100435970(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10043598C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  id v8 = a3;
  id v9 = a5;
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
  }
  long long v10 = *(_OWORD *)(a4 + 16);
  v13[0] = *(_OWORD *)a4;
  v13[1] = v10;
  int v14 = *(_DWORD *)(a4 + 32);
  uint64_t v11 = sub_100686898((uint64_t)off_1009F7EB8, a2, v8, (unsigned __int8 *)v13, v9);

  return v11;
}

void sub_100435A38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100435A4C(uint64_t a1, uint64_t a2, int a3, void *a4, int a5, uint64_t a6)
{
  id v10 = a4;
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
  }
  uint64_t v11 = sub_1006875D8((uint64_t)off_1009F7EB8, a2, a3, v10, a5, a6);

  return v11;
}

void sub_100435AE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100435AF4()
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
  }

  return sub_100687EBC();
}

uint64_t sub_100435B58(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
  }
  uint64_t v5 = sub_10068806C(off_1009F7EB8, a2, (uint64_t)v4);

  return v5;
}

void sub_100435BC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100435BD8(uint64_t a1, unint64_t a2, void *a3, long long *a4)
{
  id v6 = a3;
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
  }
  long long v7 = a4[1];
  long long v10 = *a4;
  v11[0] = v7;
  *(_OWORD *)((char *)v11 + 10) = *(long long *)((char *)a4 + 26);
  uint64_t v8 = sub_1006881F0(off_1009F7EB8, a2, (uint64_t)v6, &v10);

  return v8;
}

void sub_100435C70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100435C80(uint64_t a1, unint64_t a2, void *a3)
{
  id v4 = a3;
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
  }
  uint64_t v5 = sub_1006884D0(off_1009F7EB8, a2, (uint64_t)v4);

  return v5;
}

void sub_100435CF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100435D00(uint64_t a1, unint64_t a2, void *a3)
{
  id v4 = a3;
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
  }
  uint64_t v5 = sub_100688618(off_1009F7EB8, a2, (uint64_t)v4);

  return v5;
}

void sub_100435D70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100435D80(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
  }
  long long v7 = *(_OWORD *)(a4 + 16);
  v10[0] = *(_OWORD *)a4;
  v10[1] = v7;
  void v10[2] = *(_OWORD *)(a4 + 32);
  int v11 = *(_DWORD *)(a4 + 48);
  uint64_t v8 = sub_100688760(off_1009F7EB8, a2, (uint64_t)v6, (unsigned __int16 *)v10);

  return v8;
}

void sub_100435E20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100435E30(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
  }
  uint64_t v7 = sub_1006889A8(off_1009F7EB8, a2, v6, a4);

  return v7;
}

void sub_100435EB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100435EC0(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v8 = a3;
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
  }
  uint64_t v9 = sub_100688C84(off_1009F7EB8, a2, v8, a4, a5);

  return v9;
}

void sub_100435F48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100435F58(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
  }
  long long v9 = *(_OWORD *)a4;
  uint64_t v10 = *(void *)(a4 + 16);
  uint64_t v7 = sub_100688F68(off_1009F7EB8, a2, v6, &v9);

  return v7;
}

void sub_100435FF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100436000(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
  }
  uint64_t v5 = off_1009F7EB8;

  return sub_100689254((uint64_t)v5, a2, a3);
}

uint64_t sub_10043606C(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v10 = a3;
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
  }
  uint64_t v11 = sub_1006893BC(off_1009F7EB8, a2, (uint64_t)v10, a4, a5, a6);

  return v11;
}

void sub_100436104(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100436114(uint64_t a1, unint64_t a2)
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
  }
  id v3 = off_1009F7EB8;

  return sub_1006895C8((uint64_t)v3, a2);
}

uint64_t sub_100436178(uint64_t a1, unint64_t a2, void *a3)
{
  id v4 = a3;
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
  }
  uint64_t v5 = sub_100689720(off_1009F7EB8, a2, (uint64_t)v4);

  return v5;
}

void sub_1004361E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1004361F8(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
  }
  uint64_t v7 = sub_100689BF4(off_1009F7EB8, a2, v6, a4);

  return v7;
}

void sub_100436278(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_100436288(uint64_t a1)
{
  return [*(id *)(a1 + 344) count] || [*(id *)(a1 + 336) count] != 0;
}

BOOL sub_1004362CC(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1) {
        goto LABEL_10;
      }
      a1 = (void *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1) {
LABEL_10:
    }
      abort();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

void sub_100436354(void *a1, void *a2, int a3)
{
  id v5 = a2;
  id v6 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)id v10 = 138543618;
    *(void *)&void v10[4] = v5;
    *(_WORD *)&v10[12] = 1024;
    *(_DWORD *)&v10[14] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Device %{public}@ CL Ready with result %d", v10, 0x12u);
  }
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  *(void *)id v10 = 0;
  *(void *)&v10[8] = 0;
  [v5 getUUIDBytes:v10];
  xpc_dictionary_set_uuid(v7, "kCBMsgArgDeviceUUID", v10);
  xpc_dictionary_set_int64(v7, "kCBMsgArgResult", a3);
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
  }
  BOOL v8 = sub_100030D38((uint64_t)off_1009F7ED8, v5);
  xpc_dictionary_set_int64(v7, "kCBMsgArgVisibleInSettings", !v8);
  long long v9 = sub_100031230(v7);
  sub_10002F224(a1, 86, v9);

  xpc_release(v7);
}

void sub_1004364E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100436508(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  long long v69 = v5;
  id v6 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__n128 buf = 138543618;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Device %{public}@ connected with result %d", buf, 0x12u);
  }
  if (v5)
  {
    uint64_t v7 = *(void *)(a1 + 120);
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
    }
    if (sub_10002F7F0((uint64_t)off_1009F7ED8, v5, *(void **)(a1 + 88), *(void **)(a1 + 104)))
    {
      if (sub_10002F690(a1, v5))
      {
        xpc_object_t xdict = xpc_dictionary_create(0, 0, 0);
        if (qword_1009F7EC0 != -1) {
          dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
        }
        BOOL v8 = off_1009F7EB8;
        sub_1000305AC(buf, v5);
        BOOL v58 = sub_1000307A4((uint64_t)v8, buf);
        uuid[0] = 0;
        uuid[1] = 0;
        [v5 getUUIDBytes:uuid];
        id v59 = [*(id *)(a1 + 248) objectForKeyedSubscript:v5];
        xpc_dictionary_set_uuid(xdict, "kCBMsgArgDeviceUUID", (const unsigned __int8 *)uuid);
        xpc_dictionary_set_int64(xdict, "kCBMsgArgResult", a3);
        if (!a3)
        {
          if (v7) {
            BOOL v9 = *(unsigned char *)(v7 + 24) != 0;
          }
          else {
            BOOL v9 = 0;
          }
          if (qword_1009F7EC0 != -1) {
            dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
          }
          unint64_t v13 = off_1009F7EB8;
          sub_1000305AC(buf, v5);
          unsigned int v14 = sub_100030818((uint64_t)v13, buf);
          xpc_dictionary_set_int64(xdict, "kCBMsgArgConnectionRole", v14);
          if (qword_1009FB230 != -1) {
            dispatch_once(&qword_1009FB230, &stru_1009AE220);
          }
          unsigned int v15 = sub_100031120(qword_1009FB228, v5);
          xpc_dictionary_set_int64(xdict, "kCBMsgArgATTMTU", v15);
          if (v58) {
            int64_t v16 = 2;
          }
          else {
            int64_t v16 = 1;
          }
          xpc_dictionary_set_int64(xdict, "kCBMsgArgConnectionTransport", v16);
          if (v9)
          {
            if (qword_1009F7EC0 != -1) {
              dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
            }
            long long v17 = off_1009F7EB8;
            sub_1000305AC(buf, v5);
            char v18 = sub_1000306F0((uint64_t)v17, buf);
            xpc_dictionary_set_BOOL(xdict, "kCBMsgArgIsLinkEncrypted", v18);
          }
          if (v7 && *(int *)(v7 - 64) >= 1)
          {
            if (qword_1009F7EE0 != -1) {
              dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
            }
            BOOL v19 = sub_100030D38((uint64_t)off_1009F7ED8, v5);
            xpc_dictionary_set_int64(xdict, "kCBMsgArgVisibleInSettings", !v19);
          }
          if (v58)
          {
            uint64_t v74 = 0;
            long long v72 = 0u;
            long long v73 = 0u;
            memset(buf, 0, sizeof(buf));
            if (qword_1009F7EC0 != -1) {
              dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
            }
            sub_1006773FC((uint64_t)off_1009F7EB8, v5, (uint64_t)buf);
            if (*(void *)buf)
            {
              uint64_t v20 = [v59 connectingClients];
              id v21 = *(void **)&buf[8];
              *(void *)&uint8_t buf[8] = v20;

              if (*(void *)(a1 + 496)) {
                LODWORD(v74) = 1;
              }
              if (*(unsigned char *)(a1 + 505)) {
                LODWORD(v74) = 2;
              }
              if (*(unsigned char *)(a1 + 506)) {
                LODWORD(v74) = 4;
              }
              if (qword_1009F7EC0 != -1) {
                dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
              }
              id v22 = off_1009F7EB8;
              v64[0] = *(id *)buf;
              v64[1] = *(id *)&buf[8];
              long long v65 = *(_OWORD *)&buf[16];
              long long v66 = v72;
              long long v67 = v73;
              int v68 = v74;
              sub_100677528((uint64_t)v22, v5, (uint64_t)v64);
            }
            if (*(unsigned char *)(a1 + 505) || *(unsigned char *)(a1 + 506))
            {
              uint64_t v23 = qword_100A19F00;
              if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)long long v70 = 0;
                _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Disabling pairing with BT device for DA extenstions", v70, 2u);
              }
              uint64_t v63 = 0;
              if (qword_1009F7EC0 != -1) {
                dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
              }
              uint64_t v24 = off_1009F7EB8;
              sub_1000305AC(v70, v5);
              if (sub_1006856B8((uint64_t)v24, v70, &v63))
              {
                v70[0] = 0;
                sub_10001B8E0(v70);
                sub_100232C7C(v63, 0);
                sub_10001B8AC(v70);
              }
            }
          }
          ++*(_DWORD *)(a1 + 376);
        }
        char v25 = qword_100A19F30;
        if (os_log_type_enabled((os_log_t)qword_100A19F30, OS_LOG_TYPE_DEFAULT))
        {
          int v26 = "classic";
          uint64_t v27 = *(void *)(a1 + 88);
          *(_DWORD *)__n128 buf = 138544130;
          if (v58) {
            int v26 = "le";
          }
          *(void *)&uint8_t buf[4] = v5;
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = v27;
          *(_WORD *)&unsigned char buf[22] = 2082;
          *(void *)&uint8_t buf[24] = v26;
          LOWORD(v72) = 1024;
          *(_DWORD *)((char *)&v72 + 2) = a3;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "App ready - {cbuuid: %{public}@, bundle: %{public}@, transport: %{public}s, result: %d}", buf, 0x26u);
        }
        if (a3 != 341 && a3 != 348)
        {
          int v28 = [v59 connectionUseCase];
          char v29 = qword_100A19F00;
          if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
          {
            long long v30 = sub_10003B8B0(v28);
            uint64_t v31 = *(void *)(a1 + 88);
            *(_DWORD *)__n128 buf = 136446722;
            *(void *)&uint8_t buf[4] = v30;
            *(_WORD *)&unsigned char buf[12] = 2114;
            *(void *)&buf[14] = v5;
            *(_WORD *)&unsigned char buf[22] = 2114;
            *(void *)&uint8_t buf[24] = v31;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "BLE Connection Ready %{public}s %{public}@ for %{public}@", buf, 0x20u);
            char v29 = qword_100A19F00;
          }
          if (os_signpost_enabled(v29))
          {
            char v32 = sub_10003B8B0(v28);
            uint64_t v33 = *(void *)(a1 + 88);
            *(_DWORD *)__n128 buf = 136446722;
            *(void *)&uint8_t buf[4] = v32;
            *(_WORD *)&unsigned char buf[12] = 2114;
            *(void *)&buf[14] = v5;
            *(_WORD *)&unsigned char buf[22] = 2114;
            *(void *)&uint8_t buf[24] = v33;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v29, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "BTSignPost", "BLE Connection Ready %{public}s %{public}@ for %{public}@", buf, 0x20u);
          }
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
          }
          int v34 = off_1009F7ED8;
          double Current = CFAbsoluteTimeGetCurrent();
          sub_1006BBF8C((uint64_t)v34, v5, Current);
        }
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
        }
        unsigned int v36 = sub_100030C6C((uint64_t)off_1009F7ED8, v5);
        BOOL v38 = a3 == 315 && v36 != 0;

        if (v38)
        {
          uint64_t v39 = qword_100A19F00;
          if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__n128 buf = 138543362;
            *(void *)&uint8_t buf[4] = v5;
            _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Device %{public}@ is FindMy but has no valid addresses/keys, parking connection attempt until we get an update", buf, 0xCu);
          }
          if (!v59) {
            goto LABEL_97;
          }
          if (qword_1009F8788 != -1) {
            dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
          }
          uint64_t v40 = sub_10030629C((uint64_t)off_1009F8780, a1);
          if (!v40) {
            goto LABEL_97;
          }
          id v41 = v59;
          *(void *)__n128 buf = &v69;
          long long v42 = sub_100441EA4((uint64_t **)(a1 + 312), (unint64_t *)&v69, (uint64_t)&unk_1007BE9D0, (id **)buf);
          BOOL v43 = (void *)v42[5];
          v42[5] = (uint64_t)v41;
          id v44 = v41;

          v42[6] = v40;
        }
        else
        {
          uint64_t v45 = sub_100031230(xdict);
          sub_10002F224((void *)a1, 85, v45);

          unsigned int v46 = [v59 connectionUseCase];
          id v47 = [v5 UUIDString];
          sub_10004191C(buf, (char *)[v47 UTF8String]);
          uint64_t v48 = sub_10003156C(a1 + 448, (const void **)buf);
          if ((char)buf[23] < 0) {
            operator delete(*(void **)buf);
          }

          if (v46 != 655360 && v46 != 21 || a3 || a1 + 456 == v48) {
            goto LABEL_97;
          }
          uint64_t v49 = *(unsigned __int16 *)(v48 + 56);
          unsigned int v57 = *(unsigned __int16 *)(v48 + 58);
          uint64_t v51 = *(unsigned int *)(v48 + 60);
          uint64_t v50 = *(unsigned int *)(v48 + 64);
          int v52 = *(_DWORD *)(v48 + 68);
          uint64_t v53 = *(void *)(v48 + 72);
          id v44 = *(id *)(v48 + 80);
          (*(void (**)(void, void, id, uint64_t, uint64_t, uint64_t, void, uint64_t, int))(**(void **)(a1 + 120) + 80))(*(void *)(a1 + 120), 0, v44, v49, v53, v51, v57, v50, v52);
          sub_10043713C((uint64_t **)(a1 + 448), (uint64_t *)v48);
        }

LABEL_97:
        if (*(int *)(a1 + 376) >= 1)
        {
          if (qword_1009F8788 != -1) {
            dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
          }
          sub_1002F9020((uint64_t)off_1009F8780, *(void **)(a1 + 88), 1);
        }
        sub_100437178(a1, v69);
        xpc_release(xdict);
        if (!a3)
        {
          *(_WORD *)long long v70 = 0;
          LOWORD(v63) = 0;
          int v62 = 0;
          unsigned __int16 v61 = 0;
          if (qword_1009F7EC0 != -1) {
            dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
          }
          unsigned __int8 v54 = off_1009F7EB8;
          sub_1000305AC(buf, v69);
          if (!sub_10069DEB4((uint64_t)v54, buf, v70, &v63, (_WORD *)&v62 + 1, &v62, &v61))
          {
            uint64_t v55 = *(void *)(a1 + 120);
            BOOL v56 = v58;
            if (!v55) {
              BOOL v56 = 0;
            }
            if (v56) {
              (*(void (**)(uint64_t, void, void *, void, void, void))(*(void *)v55 + 216))(v55, 0, v69, *(unsigned __int16 *)v70, (unsigned __int16)v63, v61);
            }
          }
        }

        id v5 = v69;
        goto LABEL_110;
      }
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
        sub_1007680A4();
      }
    }
    else
    {
      id v10 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
      {
        uint64_t v11 = *(void *)(a1 + 88);
        uint64_t v12 = *(void *)(a1 + 104);
        *(_DWORD *)__n128 buf = 138412802;
        *(void *)&uint8_t buf[4] = v11;
        *(_WORD *)&unsigned char buf[12] = 2112;
        *(void *)&buf[14] = v12;
        *(_WORD *)&unsigned char buf[22] = 2112;
        *(void *)&uint8_t buf[24] = v5;
        _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
      }
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
      sub_100767E3C();
    }
    id v5 = 0;
  }
LABEL_110:
}

void sub_100437060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  _Unwind_Resume(a1);
}

uint64_t *sub_10043713C(uint64_t **a1, uint64_t *a2)
{
  id v3 = sub_10004D3B8(a1, a2);
  sub_100441A88((uint64_t)(a2 + 4));
  operator delete(a2);
  return v3;
}

void sub_100437178(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 400);
  if (v4)
  {
    id v7 = v3;
    sub_10036DE74(v4, v3);
    id v5 = sub_10036DBE4(*(void *)(a1 + 400));
    id v3 = v7;
    if (!v5)
    {
      uint64_t v6 = *(void *)(a1 + 400);
      if (v6)
      {
        (*(void (**)(uint64_t, id))(*(void *)v6 + 8))(v6, v7);
        id v3 = v7;
      }
      *(void *)(a1 + 400) = 0;
    }
  }
}

void sub_10043720C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100437220(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 380))
  {
    xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_int64(v7, "kCBMsgArgResult", a3);
    xpc_dictionary_set_uint64(v7, "kCBScanOptionTotalRXTimeMS", a4);
    BOOL v8 = sub_100031230(v7);
    sub_10002F224((void *)a1, 133, v8);

    xpc_release(v7);
    *(unsigned char *)(a1 + 380) = 0;
  }
}

void sub_1004372C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1004372D0(uint64_t a1, void *a2)
{
  id v30 = a2;
  uint64_t v31 = a1;
  unsigned int v36 = 0;
  v37[0] = 0;
  uint64_t v3 = a1 + 312;
  v37[1] = 0;
  sub_1004421E8((uint64_t *)&v36, a1 + 312);
  uint64_t v4 = v36;
  if (v36 != (uint64_t *)v37)
  {
    do
    {
      id v5 = (void **)(v4 + 4);
      uint64_t v6 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO))
      {
        xpc_object_t v7 = *v5;
        LODWORD(buf) = 138543362;
        *(void *)((char *)&buf + 4) = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "notifyFindMyDevicesUpdated checking device %{public}@", (uint8_t *)&buf, 0xCu);
      }
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
      }
      sub_1006C6648((uint64_t)off_1009F7ED8, *v5, 2u, (uint64_t)&buf);
      uint64_t v8 = v40;
      sub_1000486F0((uint64_t)&buf, *((void **)&buf + 1));
      BOOL v9 = qword_100A19F00;
      BOOL v10 = os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO);
      if (v8)
      {
        if (v10)
        {
          uint64_t v11 = *v5;
          LODWORD(buf) = 138543362;
          *(void *)((char *)&buf + 4) = v11;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "notifyFindMyDevicesUpdated Device %{public}@ is FindMy and now has valid keys, trying to connect again", (uint8_t *)&buf, 0xCu);
        }
        *(void *)&long long buf = v4 + 4;
        uint64_t v12 = sub_100441EA4(&v36, (unint64_t *)v4 + 4, (uint64_t)&unk_1007BE9D0, (id **)&buf);
        id v13 = (id)v12[5];
        uint64_t v14 = v12[6];
        sub_10044203C(v3, (unint64_t *)v4 + 4);
        sub_100430414(v31, v14, *v5, v13);
      }
      else if (v10)
      {
        unsigned int v15 = *v5;
        LODWORD(buf) = 138543362;
        *(void *)((char *)&buf + 4) = v15;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "notifyFindMyDevicesUpdated Device %{public}@ is FindMy and still doesnt have valid keys", (uint8_t *)&buf, 0xCu);
      }
      int64_t v16 = (uint64_t *)v4[1];
      if (v16)
      {
        do
        {
          long long v17 = v16;
          int64_t v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          long long v17 = (uint64_t *)v4[2];
          BOOL v18 = *v17 == (void)v4;
          uint64_t v4 = v17;
        }
        while (!v18);
      }
      uint64_t v4 = v17;
    }
    while (v17 != (uint64_t *)v37);
  }
  int v19 = *(unsigned __int8 *)(v31 + 382);
  if (*(unsigned char *)(v31 + 382))
  {
    uint64_t v20 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "notifyFindMyDevicesUpdated", (uint8_t *)&buf, 2u);
    }
    id v21 = objc_opt_new();
    id v22 = objc_opt_new();
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    id v23 = v30;
    id v24 = [v23 countByEnumeratingWithState:&v32 objects:v38 count:16];
    if (v24)
    {
      uint64_t v25 = *(void *)v33;
      do
      {
        for (uint64_t i = 0; i != v24; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v33 != v25) {
            objc_enumerationMutation(v23);
          }
          xpc_object_t v27 = sub_10002FB38(*(void **)(*((void *)&v32 + 1) + 8 * i), 0, 1);
          int v28 = sub_100031230(v27);
          [v22 addObject:v28];

          xpc_release(v27);
        }
        id v24 = [v23 countByEnumeratingWithState:&v32 objects:v38 count:16];
      }
      while (v24);
    }

    [v21 setObject:v22 forKeyedSubscript:@"kCBMsgArgDevices"];
    sub_10002F224((void *)v31, 135, v21);
  }
  sub_100011EC8((uint64_t)&v36, v37[0]);

  return v19 != 0;
}

void sub_1004376C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,void *a22)
{
  sub_100011EC8((uint64_t)&a21, a22);
  _Unwind_Resume(a1);
}

void sub_100437740(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  xpc_object_t v7 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 88);
    int v10 = 138543874;
    uint64_t v11 = v8;
    __int16 v12 = 1024;
    int v13 = a3;
    __int16 v14 = 2048;
    uint64_t v15 = a4;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Scan ended for bundle %{public}@ result:%d totalRXTimeMS:%llu", (uint8_t *)&v10, 0x1Cu);
  }
  *(unsigned char *)(a1 + 304) = 0;
  [*(id *)(a1 + 344) removeAllObjects];
  sub_100437220(a1, v9, a3, a4);
}

BOOL sub_10043782C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
  }
  if ((sub_10002F7F0((uint64_t)off_1009F7ED8, v3, *(void **)(a1 + 88), *(void **)(a1 + 104)) & 1) == 0)
  {
    uint64_t v6 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 88);
      uint64_t v8 = *(void *)(a1 + 104);
      int v10 = 138412802;
      uint64_t v11 = v7;
      __int16 v12 = 2112;
      uint64_t v13 = v8;
      __int16 v14 = 2112;
      id v15 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", (uint8_t *)&v10, 0x20u);
    }
    goto LABEL_11;
  }
  if ((sub_10002F690(a1, v3) & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
      sub_1007680A4();
    }
LABEL_11:
    BOOL v5 = 0;
    goto LABEL_14;
  }
  uint64_t v4 = [*(id *)(a1 + 264) objectForKeyedSubscript:v3];
  if (v4) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = *(unsigned char *)(a1 + 305) != 0;
  }

LABEL_14:
  return v5;
}

void sub_1004379B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1004379D4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 296) containsObject:a2];
}

void sub_1004379E0(uint64_t a1, void *a2, unsigned int a3)
{
  id v5 = a2;
  uint64_t v6 = *(void **)(a1 + 296);
  if (a3) {
    [v6 addObject:v5];
  }
  else {
    [v6 removeObject:v5];
  }
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  *(void *)uuid = 0;
  uint64_t v32 = 0;
  [v5 getUUIDBytes:uuid];
  uint64_t v8 = *(void *)(a1 + 120);
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
  }
  uint64_t v9 = off_1009F7EB8;
  sub_1000305AC(__p, v5);
  BOOL v10 = sub_1000307A4((uint64_t)v9, __p);
  xpc_dictionary_set_uuid(v7, "kCBMsgArgDeviceUUID", uuid);
  if (v10)
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
    }
    sub_10003093C((uint64_t)off_1009F7ED8, v5, (uint64_t)__p);
    if (v30 >= 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = *(const char **)__p;
    }
    xpc_dictionary_set_string(v7, "kCBMsgArgName", v11);
    if (v30 < 0) {
      operator delete(*(void **)__p);
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
    }
    __int16 v12 = off_1009F7ED8;
    sub_10004191C(v27, "ANCSAuthorized");
    char v13 = sub_100030A04((uint64_t)v12, v5, (uint64_t)v27);
    xpc_dictionary_set_BOOL(v7, "kCBMsgArgAncsAuthorization", v13);
    if (v28 < 0) {
      operator delete(v27[0]);
    }
  }
  else
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
    }
    uint64_t v14 = sub_100030DCC((uint64_t)off_1009F7ED8, v5, 0);
    if (!v14 || (v14 & 0xFF000000000000) != 0)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
        sub_10076810C();
      }
    }
    else
    {
      v26[0] = BYTE5(v14);
      v26[1] = BYTE4(v14);
      void v26[2] = BYTE3(v14);
      _OWORD v26[3] = BYTE2(v14);
      uint8_t v26[4] = BYTE1(v14);
      void v26[5] = v14;
      if (qword_1009F7F00 != -1) {
        dispatch_once(&qword_1009F7F00, &stru_1009AE1E0);
      }
      uint64_t v15 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)v26, 0);
      uint64_t v16 = v15;
      if (v15)
      {
        sub_100475F84(v15, (uint64_t)__p);
        if (v30 >= 0) {
          long long v17 = __p;
        }
        else {
          long long v17 = *(const char **)__p;
        }
        xpc_dictionary_set_string(v7, "kCBMsgArgName", v17);
        if (v30 < 0) {
          operator delete(*(void **)__p);
        }
        *(_DWORD *)std::string __p = 0;
        int64_t value = 0;
        int v24 = 0;
        if (sub_10047B7A8(v16, __p, (_DWORD *)&value + 1, &value, &v24))
        {
          xpc_dictionary_set_int64(v7, "kCBMsgArgPID", value);
          xpc_dictionary_set_int64(v7, "kCBMsgArgVID", HIDWORD(value));
        }
      }
      else
      {
        BOOL v18 = qword_100A19F00;
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string __p = 138543362;
          *(void *)&__p[4] = v5;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Could not find a classic device object for %{public}@", __p, 0xCu);
        }
      }
    }
  }
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
  }
  int v19 = off_1009F7EB8;
  sub_1000305AC(__p, v5);
  unsigned int v20 = sub_100030818((uint64_t)v19, __p);
  xpc_dictionary_set_int64(v7, "kCBMsgArgConnectionRole", v20);
  if (qword_1009FB230 != -1) {
    dispatch_once(&qword_1009FB230, &stru_1009AE220);
  }
  unsigned int v21 = sub_100031120(qword_1009FB228, v5);
  xpc_dictionary_set_int64(v7, "kCBMsgArgATTMTU", v21);
  if (a3)
  {
    if (v10) {
      int64_t v22 = 2;
    }
    else {
      int64_t v22 = 1;
    }
    xpc_dictionary_set_int64(v7, "kCBMsgArgConnectionTransport", v22);
  }
  xpc_dictionary_set_int64(v7, "kCBMsgArgConnectionEvent", a3);
  if (v8)
  {
    if (*(int *)(v8 - 64) >= 1)
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
      }
      BOOL v23 = sub_100030D38((uint64_t)off_1009F7ED8, v5);
      xpc_dictionary_set_int64(v7, "kCBMsgArgVisibleInSettings", !v23);
    }
    sub_1000173FC(v8 - 144, 94, v7, 1);
  }
  else
  {
    xpc_release(v7);
  }
  if (*(_DWORD *)(a1 + 376))
  {
    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
    }
    sub_1002F9020((uint64_t)off_1009F8780, *(void **)(a1 + 88), 1);
  }
}

void sub_100437F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100437FB8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  --*(_DWORD *)(a1 + 376);
  uint64_t v8 = *(void *)(a1 + 120);
  if (v8 && *(int *)(v8 - 64) >= 1)
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
    }
    BOOL v9 = !sub_100030D38((uint64_t)off_1009F7ED8, v7);
  }
  else
  {
    if (a3 == 182) {
      a3 = 1;
    }
    else {
      a3 = a3;
    }
    BOOL v9 = 1;
  }
  uint64_t v18 = 0;
  sub_10010BB74((_DWORD *)&v18 + 1, (__darwin_suseconds_t *)&v18);
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
  }
  uint64_t v10 = sub_1006BBBA0((uint64_t)off_1009F7ED8, v7);
  if (v10) {
    double v11 = (double)((1000 * HIDWORD(v18) - (int)v10 + (int)v18 / 1000) / 0x3E8u);
  }
  else {
    double v11 = 0.0;
  }
  double Current = CFAbsoluteTimeGetCurrent();
  v20[0] = v7;
  v19[0] = @"kCBMsgArgDeviceUUID";
  v19[1] = @"kCBMsgArgResult";
  char v13 = +[NSNumber numberWithInt:a3];
  v20[1] = v13;
  void v19[2] = @"kCBMsgArgVisibleInSettings";
  uint64_t v14 = +[NSNumber numberWithUnsignedLongLong:v9];
  void v20[2] = v14;
  v19[3] = @"kCBDisconnectInfoTimestamp";
  uint64_t v15 = +[NSNumber numberWithDouble:Current - v11];
  v20[3] = v15;
  v19[4] = @"kCBDisconnectInfoIsReconnecting";
  uint64_t v16 = +[NSNumber numberWithBool:a4];
  v20[4] = v16;
  long long v17 = +[NSDictionary dictionaryWithObjects:v20 forKeys:v19 count:5];

  if (sub_10002F224((void *)a1, 87, v17)) {
    (*(void (**)(void, void, id, uint64_t))(**(void **)(a1 + 120) + 16))(*(void *)(a1 + 120), 0, v7, a3);
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
  }
  sub_1006C3B7C((uint64_t)off_1009F7ED8, v7, 0);
  if (!*(_DWORD *)(a1 + 376))
  {
    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
    }
    sub_1002F9020((uint64_t)off_1009F8780, *(void **)(a1 + 88), 0);
  }
  sub_100437178(a1, v7);
}

void sub_1004382E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100438348(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24)
    && *(void *)(a1 + 96)
    && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 40))(a1))
  {
    id v2 = [objc_alloc((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
    [v2 encodeObject:*(void *)(a1 + 88) forKey:@"bundleIdentifier"];
    [v2 encodeObject:*(void *)(a1 + 96) forKey:@"restoreIdentifier"];
    [v2 encodeObject:*(void *)(a1 + 344) forKey:@"servicesToScan"];
    [v2 encodeBool:*(unsigned __int8 *)(a1 + 304) forKey:@"isScanning"];
    [v2 encodeBool:*(unsigned __int8 *)(a1 + 306) forKey:@"isContactTracingScan"];
    id v3 = objc_alloc_init((Class)NSMutableSet);
    id v4 = [*(id *)(a1 + 336) copy];
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    id v5 = v4;
    id v6 = [v5 countByEnumeratingWithState:&v19 objects:v34 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v20;
      do
      {
        for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v20 != v7) {
            objc_enumerationMutation(v5);
          }
          BOOL v9 = *(void **)(*((void *)&v19 + 1) + 8 * i);
          *(void *)long long buf = 0;
          *(void *)&uint8_t buf[8] = 0;
          [v9 getUUIDBytes:buf];
          uint64_t v10 = +[NSData dataWithBytes:buf length:16];
          [v3 addObject:v10];
        }
        id v6 = [v5 countByEnumeratingWithState:&v19 objects:v34 count:16];
      }
      while (v6);
    }

    [v2 encodeObject:v3 forKey:@"peripherals"];
    double v11 = qword_100A19F58;
    if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 88);
      uint64_t v13 = *(void *)(a1 + 96);
      uint64_t v14 = *(void *)(a1 + 344);
      uint64_t v15 = "True";
      if (!*(unsigned char *)(a1 + 304)) {
        uint64_t v15 = "False";
      }
      if (*(unsigned char *)(a1 + 306)) {
        uint64_t v16 = "YES";
      }
      else {
        uint64_t v16 = "NO";
      }
      *(_DWORD *)long long buf = 138413826;
      *(void *)&uint8_t buf[4] = v2;
      *(_WORD *)&unsigned char buf[12] = 2114;
      *(void *)&buf[14] = v12;
      __int16 v24 = 2114;
      uint64_t v25 = v13;
      __int16 v26 = 2114;
      uint64_t v27 = v14;
      __int16 v28 = 2114;
      id v29 = v3;
      __int16 v30 = 2082;
      uint64_t v31 = v15;
      __int16 v32 = 2082;
      long long v33 = v16;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Saving Central restoration data: %@ - bundleId %{public}@, restorationId: %{public}@, servicesToScan: %{public}@, peripherals: %{public}@, isScanning: %{public}s, fIsContactTracingScanning:%{public}s", buf, 0x48u);
    }
    long long v17 = [v2 encodedData:v19];
  }
  else
  {
    long long v17 = 0;
  }

  return v17;
}

void sub_100438658(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1004386B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v53 = v3;
  if (v3)
  {
    id v64 = 0;
    id v4 = [objc_alloc((Class)NSKeyedUnarchiver) initForReadingFromData:v3 error:&v64];
    id v51 = v64;
    id v5 = qword_100A19F58;
    if (v4)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        id v66 = v4;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Restoring Central restoration data: %@", buf, 0xCu);
      }
      int v52 = v4;
      uint64_t v6 = [v4 decodeObjectOfClass:objc_opt_class() forKey:@"bundleIdentifier"];
      uint64_t v7 = *(void **)(a1 + 88);
      *(void *)(a1 + 88) = v6;

      uint64_t v8 = [v4 decodeObjectOfClass:objc_opt_class() forKey:@"restoreIdentifier"];
      BOOL v9 = *(void **)(a1 + 96);
      *(void *)(a1 + 96) = v8;

      if (*(void *)(a1 + 88) && *(void *)(a1 + 96))
      {
        v79[0] = objc_opt_class();
        v79[1] = objc_opt_class();
        uint64_t v10 = +[NSArray arrayWithObjects:v79 count:2];
        double v11 = +[NSSet setWithArray:v10];
        uint64_t v49 = [v4 decodeObjectOfClasses:v11 forKey:@"servicesToScan"];

        uint64_t v12 = v49;
        if (v49)
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v12 = v49;
          }
          else
          {
            if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_ERROR)) {
              sub_1007682E0();
            }

            uint64_t v12 = 0;
          }
        }
        long long v63 = 0u;
        long long v61 = 0u;
        long long v62 = 0u;
        long long v60 = 0u;
        id v14 = v12;
        uint64_t v15 = (char *)[v14 countByEnumeratingWithState:&v60 objects:v78 count:16];
        uint64_t v50 = v14;
        if (v15)
        {
          uint64_t v16 = *(void *)v61;
          while (2)
          {
            for (uint64_t i = 0; i != v15; ++i)
            {
              if (*(void *)v61 != v16) {
                objc_enumerationMutation(v14);
              }
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0)
              {
                if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_ERROR)) {
                  sub_1007682AC();
                }

                uint64_t v50 = 0;
                goto LABEL_32;
              }
            }
            uint64_t v15 = (char *)[v14 countByEnumeratingWithState:&v60 objects:v78 count:16];
            if (v15) {
              continue;
            }
            break;
          }
          uint64_t v50 = v14;
        }
LABEL_32:

        id v18 = [v50 mutableCopy];
        long long v19 = v18;
        if (v18) {
          id v20 = v18;
        }
        else {
          id v20 = objc_alloc_init((Class)NSMutableSet);
        }
        long long v21 = *(void **)(a1 + 344);
        *(void *)(a1 + 344) = v20;

        *(unsigned char *)(a1 + 304) = [v52 decodeBoolForKey:@"isScanning"];
        if ([*(id *)(a1 + 344) count] && !*(unsigned char *)(a1 + 304))
        {
          if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_ERROR)) {
            sub_100768278();
          }
          uint64_t v13 = 0;
        }
        else
        {
          *(unsigned char *)(a1 + 306) = [v52 decodeBoolForKey:@"isContactTracingScan"];
          uint64_t v22 = objc_opt_new();
          BOOL v23 = *(void **)(a1 + 336);
          *(void *)(a1 + 336) = v22;

          sub_100011EC8(a1 + 312, *(void **)(a1 + 320));
          *(void *)(a1 + 320) = 0;
          *(void *)(a1 + 328) = 0;
          *(void *)(a1 + 312) = a1 + 320;
          v77[0] = objc_opt_class();
          v77[1] = objc_opt_class();
          __int16 v24 = +[NSArray arrayWithObjects:v77 count:2];
          uint64_t v25 = +[NSSet setWithArray:v24];
          __int16 v26 = [v52 decodeObjectOfClasses:v25 forKey:@"peripherals"];

          sub_100011F2C(a1 + 448, *(void **)(a1 + 456));
          *(void *)(a1 + 456) = 0;
          *(void *)(a1 + 464) = 0;
          *(void *)(a1 + 448) = a1 + 456;
          if (v26)
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_ERROR)) {
                sub_100768244();
              }

              __int16 v26 = 0;
            }
          }
          long long v58 = 0u;
          long long v59 = 0u;
          long long v56 = 0u;
          long long v57 = 0u;
          id v27 = v26;
          id v28 = [v27 countByEnumeratingWithState:&v56 objects:v76 count:16];
          if (v28)
          {
            uint64_t v29 = *(void *)v57;
            while (2)
            {
              __int16 v30 = 0;
              do
              {
                if (*(void *)v57 != v29) {
                  objc_enumerationMutation(v27);
                }
                uint64_t v31 = *(void **)(*((void *)&v56 + 1) + 8 * (void)v30);
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0)
                {
                  if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_ERROR)) {
                    sub_100768210();
                  }
                  goto LABEL_71;
                }
                if ([v31 length] == (id)16)
                {
                  id v32 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:[v31 bytes]];
                  if (qword_1009F8788 != -1) {
                    dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
                  }
                  unsigned int v33 = sub_1002F407C((uint64_t)off_1009F8780, *(void *)(a1 + 88));
                  if (qword_1009F7ED0 != -1) {
                    dispatch_once(&qword_1009F7ED0, &stru_1009AE200);
                  }
                  BOOL v34 = sub_100008DC4(qword_1009F7EC8, v32);
                  if (qword_1009F7EE0 != -1) {
                    dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
                  }
                  long long v35 = off_1009F7ED8;
                  sub_10004191C(__p, "DA_ASK_RETAIN_DEVICE");
                  int v36 = sub_100030A04((uint64_t)v35, v32, (uint64_t)__p);
                  if (v55 < 0) {
                    operator delete(__p[0]);
                  }
                  BOOL v37 = qword_100A19F58;
                  if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT))
                  {
                    BOOL v38 = *(void **)(a1 + 88);
                    *(_DWORD *)long long buf = 138544130;
                    id v66 = v38;
                    __int16 v67 = 1024;
                    *(_DWORD *)int v68 = v33;
                    *(_WORD *)&v68[4] = 1024;
                    *(_DWORD *)&v68[6] = v34;
                    LOWORD(v69) = 1024;
                    *(_DWORD *)((char *)&v69 + 2) = v36;
                    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Restoring data for app %{public}@ isAppAuthorized: %d, isLeDevicePaired %d isDeviceForDA %d", buf, 0x1Eu);
                  }
                  if ((v33 | v34 | v36) == 1)
                  {
                    [*(id *)(a1 + 336) addObject:v32];
                  }
                  else
                  {
                    if (qword_1009F7EE0 != -1) {
                      dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
                    }
                    uint64_t v39 = sub_100030DCC((uint64_t)off_1009F7ED8, v32, 0);
                    uint64_t v40 = qword_100A19F58;
                    if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_INFO))
                    {
                      id v41 = *(void **)(a1 + 88);
                      *(_DWORD *)long long buf = 138543618;
                      id v66 = v41;
                      __int16 v67 = 2048;
                      *(void *)int v68 = v39;
                      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "Not adding app %{public}@ peripheral device %llu ", buf, 0x16u);
                    }
                  }
                }
                __int16 v30 = (char *)v30 + 1;
              }
              while (v28 != v30);
              id v28 = [v27 countByEnumeratingWithState:&v56 objects:v76 count:16];
              if (v28) {
                continue;
              }
              break;
            }
          }
LABEL_71:

          long long v42 = qword_100A19F58;
          if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_INFO))
          {
            BOOL v43 = *(void **)(a1 + 88);
            uint64_t v44 = *(void *)(a1 + 96);
            uint64_t v45 = *(void *)(a1 + 344);
            if (*(unsigned char *)(a1 + 304)) {
              unsigned int v46 = "True";
            }
            else {
              unsigned int v46 = "False";
            }
            if (*(unsigned char *)(a1 + 306)) {
              id v47 = "YES";
            }
            else {
              id v47 = "NO";
            }
            *(_DWORD *)long long buf = 138544642;
            id v66 = v43;
            __int16 v67 = 2114;
            *(void *)int v68 = v44;
            *(_WORD *)&v68[8] = 2114;
            uint64_t v69 = v45;
            __int16 v70 = 2114;
            id v71 = v27;
            __int16 v72 = 2082;
            long long v73 = v46;
            __int16 v74 = 2082;
            uint64_t v75 = v47;
            _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "Central Restoring - bundleId %{public}@, restorationId: %{public}@, servicesToScan: %{public}@, peripherals: %{public}@, isScanning: %{public}s, fIsContactTracingScanning:%{public}s", buf, 0x3Eu);
          }
          *(unsigned char *)(a1 + 209) = 1;

          uint64_t v13 = 1;
        }
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_ERROR)) {
          sub_1007681DC();
        }
        uint64_t v13 = 0;
      }
      id v4 = v52;
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_ERROR)) {
        sub_100768174();
      }
      uint64_t v13 = 0;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }

  return v13;
}

void sub_100438FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  _Unwind_Resume(a1);
}

void sub_1004390E0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 209))
  {
    *(unsigned char *)(a1 + 209) = 0;
    if ([*(id *)(a1 + 344) count]) {
      operator new();
    }
    id v3 = [[*(id *)(a1 + 336) copy];
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    id v4 = v3;
    id v5 = [v4 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v5)
    {
      uint64_t v6 = *(void *)v17;
      do
      {
        uint64_t v7 = 0;
        do
        {
          if (*(void *)v17 != v6) {
            objc_enumerationMutation(v4);
          }
          uint64_t v8 = *(void **)(*((void *)&v16 + 1) + 8 * (void)v7);
          if (_os_feature_enabled_impl()
            && (BOOL v9 = *(void **)(a1 + 216)) != 0
            && ([v9 containsObject:v8] & 1) == 0)
          {
            double v11 = qword_100A19F00;
            if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
            {
              uint64_t v12 = *(void *)(a1 + 88);
              int buf = 138412546;
              *(void *)buf_4 = v8;
              __int16 v23 = 2112;
              uint64_t v24 = v12;
              _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%@ is not allowed for %@, removing from connect list", (uint8_t *)&buf, 0x16u);
            }
            [*(id *)(a1 + 336) removeObject:v8];
          }
          else
          {
            uint64_t v10 = +[ConnectOptions alertOptionsWithConnectionAlerts:1 disconnectionAlerts:1 notificationAlerts:1 delay:0 bridgeTransport:0];
            sub_100430414(a1, a2, v8, v10);
          }
          uint64_t v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        id v13 = [v4 countByEnumeratingWithState:&v16 objects:v20 count:16];
        id v5 = v13;
      }
      while (v13);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
  {
    sub_100768314();
  }
}

void sub_10043959C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  id v27 = *(void **)(v25 - 128);
  if (v27)
  {
    *(void *)(v25 - 120) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(exception_object);
}

id sub_100439640(uint64_t a1, unint64_t a2)
{
  id v4 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 88);
    *(_DWORD *)int buf = 138543362;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Clear all state for session \"%{public}@\"", buf, 0xCu);
  }
  sub_100432DC4(a1);
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  id obj = *(id *)(a1 + 248);
  id v6 = [obj countByEnumeratingWithState:&v40 objects:v49 count:16];
  if (v6)
  {
    uint64_t v37 = *(void *)v41;
    *(void *)&long long v7 = 138543618;
    long long v35 = v7;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v41 != v37) {
          objc_enumerationMutation(obj);
        }
        BOOL v9 = *(void **)(*((void *)&v40 + 1) + 8 * (void)v8);
        if (*(unsigned char *)(a1 + 44))
        {
          if (qword_1009FB270 != -1) {
            dispatch_once(&qword_1009FB270, &stru_1009AE0E0);
          }
          uint64_t v10 = qword_1009FB268;
          double v11 = [[*(id *)(a1 + 248) objectForKeyedSubscript:v9, v35];
          sub_100736290(v10, a2, v9, v11);
        }
        uint64_t v12 = [*(id *)(a1 + 248) objectForKeyedSubscript:v9, v35];
        unsigned int v13 = [v12 isLatencyCritical];

        if (v13) {
          sub_100432DC4(a1);
        }
        long long v47 = 0u;
        long long v48 = 0u;
        *(_OWORD *)int buf = 0u;
        sub_10004191C(__p, (char *)[*(id *)(a1 + 88) UTF8String]);
        sub_1004B8F40((uint64_t)buf, (long long *)__p, *(unsigned char *)(a1 + 129), v9);
        if ((char)v45 < 0) {
          operator delete(*(void **)__p);
        }
        if (qword_1009FB260 != -1) {
          dispatch_once(&qword_1009FB260, &stru_1009AE120);
        }
        sub_1000504D8();
        uint64_t v14 = (void (***)(void, unsigned char *, void, void *))sub_1003731C0();
        sub_10003AE4C(a2, (uint64_t)__p);
        if ((v45 & 0x80u) == 0) {
          uint64_t v15 = __p;
        }
        else {
          uint64_t v15 = *(unsigned char **)__p;
        }
        (**v14)(v14, v15, 0, v9);
        if ((char)v45 < 0) {
          operator delete(*(void **)__p);
        }
        sub_10003AE4C(a2, (uint64_t)__p);
        uint64_t v16 = v45;
        unsigned __int8 v17 = v45;
        if ((v45 & 0x80u) == 0)
        {
          long long v18 = __p;
        }
        else
        {
          uint64_t v16 = *(void *)&__p[8];
          long long v18 = *(unsigned char **)__p;
        }
        if (v16 < 20)
        {
          BOOL v19 = 0;
          goto LABEL_40;
        }
        unint64_t v20 = a2;
        long long v21 = &v18[v16];
        uint64_t v22 = v18;
        while (1)
        {
          __int16 v23 = memchr(v22, 99, v16 - 19);
          if (!v23)
          {
LABEL_38:
            BOOL v19 = 0;
LABEL_39:
            a2 = v20;
            goto LABEL_40;
          }
          BOOL v24 = *v23 == 0x6C7070612E6D6F63 && v23[1] == 0x6F7465756C622E65;
          if (v24 && *((_DWORD *)v23 + 4) == 1684567151) {
            break;
          }
          uint64_t v22 = (char *)v23 + 1;
          uint64_t v16 = v21 - (unsigned char *)v22;
          if (v21 - (unsigned char *)v22 < 20) {
            goto LABEL_38;
          }
        }
        BOOL v19 = 0;
        if (v23 == (void *)v21) {
          goto LABEL_39;
        }
        a2 = v20;
        if ((char *)v23 - v18 != -1)
        {
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
          }
          sub_1006BE7F4((uint64_t)off_1009F7ED8, v9, (uint64_t)v38);
          unint64_t v32 = (unint64_t)v38[1];
          if ((v39 & 0x80u) == 0) {
            unint64_t v32 = v39;
          }
          BOOL v19 = v32 != 0;
          if ((char)v39 < 0) {
            operator delete(v38[0]);
          }
          unsigned __int8 v17 = v45;
        }
LABEL_40:
        if ((v17 & 0x80) != 0)
        {
          operator delete(*(void **)__p);
          if (v19) {
            goto LABEL_44;
          }
        }
        else
        {
          if (!v19) {
            goto LABEL_47;
          }
LABEL_44:
          if (qword_1009F7EC0 != -1) {
            dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
          }
          __int16 v26 = off_1009F7EB8;
          sub_1000305AC(__p, v9);
          sub_1006859B0((uint64_t)v26, __p);
        }
LABEL_47:
        id v27 = [*(id *)(a1 + 248) objectForKeyedSubscript:v9];
        id v28 = v27;
        if (v27 && [v27 requiresLowLatency])
        {
          if (qword_1009F7EC0 != -1) {
            dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
          }
          uint64_t v29 = off_1009F7EB8;
          sub_1000305AC(__p, v9);
          sub_1006859B0((uint64_t)v29, __p);
        }
        __int16 v30 = qword_100A19F30;
        if (os_log_type_enabled((os_log_t)qword_100A19F30, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v31 = *(void *)(a1 + 88);
          *(_DWORD *)std::string __p = v35;
          *(void *)&__p[4] = v9;
          *(_WORD *)&unsigned char __p[12] = 2114;
          *(void *)&__p[14] = v31;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "App disconnecting - {cbuuid: %{public}@, bundle: %{public}@}", __p, 0x16u);
        }

        if (SHIBYTE(v47) < 0) {
          operator delete(*(void **)&buf[8]);
        }
        uint64_t v8 = (char *)v8 + 1;
      }
      while (v8 != v6);
      id v33 = [obj countByEnumeratingWithState:&v40 objects:v49 count:16];
      id v6 = v33;
    }
    while (v33);
  }

  [*(id *)(a1 + 248) removeAllObjects];
  [*(id *)(a1 + 256) removeAllObjects];
  [*(id *)(a1 + 80) removeAllObjects];
  [*(id *)(a1 + 408) removeAllObjects];
  sub_10042FFF8(a1);
  sub_10000EDA0(a1 + 416, *(void **)(a1 + 424));
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 416) = a1 + 424;
  [*(id *)(a1 + 336) removeAllObjects];
  sub_100011EC8(a1 + 312, *(void **)(a1 + 320));
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 312) = a1 + 320;
  sub_100011F2C(a1 + 448, *(void **)(a1 + 456));
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 448) = a1 + 456;
  return sub_10042FA58(a1, a2);
}

void sub_100439C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32)
{
  _Unwind_Resume(a1);
}

id sub_100439CD8(uint64_t a1, unint64_t a2)
{
  id v3 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    LODWORD(buf) = 138543362;
    *(void *)((char *)&buf + 4) = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Clear for system sleep for central session \"%{public}@\"", (uint8_t *)&buf, 0xCu);
  }
  sub_100432DC4(a1);
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v5 = [*(id *)(a1 + 248) allKeys];
  id v6 = [v5 countByEnumeratingWithState:&v14 objects:v21 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v15;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v15 != v7) {
          objc_enumerationMutation(v5);
        }
        BOOL v9 = *(void **)(*((void *)&v14 + 1) + 8 * (void)v8);
        if (qword_1009F7EC0 != -1) {
          dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
        }
        uint64_t v10 = off_1009F7EB8;
        sub_1000305AC(v20, v9);
        if (sub_1000307A4((uint64_t)v10, v20))
        {
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
          }
          sub_1006BE7F4((uint64_t)off_1009F7ED8, v9, (uint64_t)&buf);
          if ((v19 & 0x80u) == 0) {
            uint64_t v11 = v19;
          }
          else {
            uint64_t v11 = *((void *)&buf + 1);
          }
          if ((char)v19 < 0)
          {
            operator delete((void *)buf);
            if (!v11) {
              goto LABEL_21;
            }
LABEL_20:
            [*(id *)(a1 + 248) removeObjectForKey:v9];
            goto LABEL_21;
          }
          if (v11) {
            goto LABEL_20;
          }
        }
LABEL_21:
        uint64_t v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v5 countByEnumeratingWithState:&v14 objects:v21 count:16];
    }
    while (v6);
  }

  [*(id *)(a1 + 256) removeAllObjects];
  [*(id *)(a1 + 80) removeAllObjects];
  [*(id *)(a1 + 336) removeAllObjects];
  sub_100011EC8(a1 + 312, *(void **)(a1 + 320));
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 312) = a1 + 320;
  sub_100011F2C(a1 + 448, *(void **)(a1 + 456));
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 448) = a1 + 456;
  return sub_10042FA58(a1, a2);
}

void sub_100439F50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100439F78(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  v12[0] = v7;
  v11[0] = @"kCBMsgArgDeviceUUID";
  v11[1] = @"kCBMsgArgServiceStartHandle";
  uint64_t v8 = +[NSNumber numberWithUnsignedShort:a3];
  v12[1] = v8;
  _OWORD v11[2] = @"kCBMsgArgServiceEndHandle";
  BOOL v9 = +[NSNumber numberWithUnsignedShort:a4];
  void v12[2] = v9;
  uint64_t v10 = +[NSDictionary dictionaryWithObjects:v12 forKeys:v11 count:3];

  sub_10002F224(a1, 179, v10);
}

void sub_10043A084(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10043A0C0(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v11 = a2;
  uint64_t v12 = sub_10004A6E4(a4);
  unsigned int v13 = +[NSData dataWithBytes:v12 length:sub_100045F00(a4)];
  v18[0] = @"kCBMsgArgResult";
  long long v14 = +[NSNumber numberWithInt:a6];
  v19[0] = v14;
  v19[1] = v11;
  v18[1] = @"kCBMsgArgDeviceUUID";
  void v18[2] = @"kCBMsgArgCharacteristicHandle";
  long long v15 = +[NSNumber numberWithUnsignedShort:a3];
  void v19[2] = v15;
  v19[3] = v13;
  v18[3] = @"kCBMsgArgData";
  v18[4] = @"kCBMsgArgTimestamp";
  long long v16 = +[NSNumber numberWithUnsignedLongLong:a5];
  v19[4] = v16;
  long long v17 = +[NSDictionary dictionaryWithObjects:v19 forKeys:v18 count:5];

  sub_10002F224(a1, 196, v17);
}

void sub_10043A240(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10043A294(uint64_t result, char a2)
{
  *(unsigned char *)(result + 129) = a2;
  return result;
}

uint64_t sub_10043A29C(uint64_t result, char a2)
{
  *(unsigned char *)(result + 186) = a2;
  return result;
}

uint64_t sub_10043A2A4(uint64_t result, char a2)
{
  *(unsigned char *)(result + 186) = a2;
  return result;
}

id sub_10043A2AC(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableString);
  id v3 = sub_10042F00C(a1);
  [v2 appendString:v3];

  uint64_t v4 = *(void *)(a1 + 400);
  if (v4)
  {
    uint64_t v5 = sub_10036DF60(v4);
    [v2 appendFormat:@"Pending Catt Connections: %@\n", v5];
  }

  return v2;
}

void sub_10043A34C(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

void sub_10043A378(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (_os_feature_enabled_impl())
  {
    id v6 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 138412546;
      id v12 = v5;
      __int16 v13 = 1024;
      int v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "configureDeviceAccessSessionWithLimits devices:%@ sessionStarted:%d", (uint8_t *)&v11, 0x12u);
    }
    if (a2)
    {
      id v7 = v5;
    }
    else
    {
      id v7 = +[NSArray array];
    }
    uint64_t v8 = *(void **)(a1 + 216);
    *(void *)(a1 + 216) = v7;

    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
    }
    BOOL v9 = off_1009F8780;
    if (a2)
    {
      if (qword_1009F8748 != -1) {
        dispatch_once(&qword_1009F8748, &stru_1009AE240);
      }
      uint64_t v10 = sub_100028CB4((uint64_t)off_1009F8740);
    }
    else
    {
      uint64_t v10 = 0;
    }
    sub_1002F14AC((uint64_t)v9, a1, v10);
    *(unsigned char *)(a1 + 504) = a2;
  }
}

void sub_10043A508(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10043A520(uint64_t a1, int a2, void *a3, void *a4, void *a5, void *a6)
{
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  if (_os_feature_enabled_impl())
  {
    long long v16 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      int v27 = 138412546;
      id v28 = v12;
      __int16 v29 = 1024;
      int v30 = a2;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "configureDeviceAccessSessionWithLimits devices:%@ sessionStarted:%d", (uint8_t *)&v27, 0x12u);
    }
    if (a2)
    {
      objc_storeStrong((id *)(a1 + 216), a3);
      objc_storeStrong((id *)(a1 + 224), a4);
      objc_storeStrong((id *)(a1 + 232), a5);
      id v17 = v15;
    }
    else
    {
      uint64_t v18 = +[NSArray array];
      unsigned __int8 v19 = *(void **)(a1 + 216);
      *(void *)(a1 + 216) = v18;

      uint64_t v20 = +[NSArray array];
      long long v21 = *(void **)(a1 + 224);
      *(void *)(a1 + 224) = v20;

      uint64_t v22 = +[NSArray array];
      __int16 v23 = *(void **)(a1 + 232);
      *(void *)(a1 + 232) = v22;

      id v17 = +[NSArray array];
    }
    BOOL v24 = *(void **)(a1 + 240);
    *(void *)(a1 + 240) = v17;

    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
    }
    uint64_t v25 = off_1009F8780;
    if (a2)
    {
      if (qword_1009F8748 != -1) {
        dispatch_once(&qword_1009F8748, &stru_1009AE240);
      }
      uint64_t v26 = sub_100028CB4((uint64_t)off_1009F8740);
    }
    else
    {
      uint64_t v26 = 0;
    }
    sub_1002F14AC((uint64_t)v25, a1, v26);
    *(unsigned char *)(a1 + 504) = a2;
  }
}

void sub_10043A768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10043A78C(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 506) || _os_feature_enabled_impl() && *(void *)(a1 + 496))
    && !_os_feature_enabled_impl())
  {
    return 1;
  }
  if (!*(void *)(a1 + 224)) {
    return 1;
  }
  sub_10071D13C(v17);
  if (!LOBYTE(v17[0])) {
    return 1;
  }
  sub_1000417A8(a2, v17);
  if (v18 >= 0) {
    uint64_t v4 = v17;
  }
  else {
    uint64_t v4 = (void **)v17[0];
  }
  id v5 = +[NSString stringWithUTF8String:v4];
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v6 = *(id *)(a1 + 224);
  id v7 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v13;
    while (2)
    {
      BOOL v9 = 0;
      do
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(v6);
        }
        if (objc_msgSend(*(id *)(*((void *)&v12 + 1) + 8 * (void)v9), "isEqualToString:", v5, (void)v12))
        {

          uint64_t v10 = 1;
          goto LABEL_26;
        }
        BOOL v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      id v7 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }

  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
    sub_10076837C();
  }
  uint64_t v10 = 0;
LABEL_26:

  return v10;
}

void sub_10043A980(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10043A9BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((*(unsigned char *)(a1 + 506) || _os_feature_enabled_impl() && *(void *)(a1 + 496))
    && (_os_feature_enabled_impl() & 1) == 0
    || !*(void *)(a1 + 224)
    || ![v3 length])
  {
LABEL_20:
    uint64_t v8 = 1;
  }
  else
  {
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    id v4 = *(id *)(a1 + 224);
    id v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v5)
    {
      uint64_t v6 = *(void *)v11;
      while (2)
      {
        id v7 = 0;
        do
        {
          if (*(void *)v11 != v6) {
            objc_enumerationMutation(v4);
          }
          if (objc_msgSend(*(id *)(*((void *)&v10 + 1) + 8 * (void)v7), "isEqualToString:", v3, (void)v10))
          {

            goto LABEL_20;
          }
          id v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        id v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
        if (v5) {
          continue;
        }
        break;
      }
    }

    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
      sub_10076837C();
    }
    uint64_t v8 = 0;
  }

  return v8;
}

void sub_10043AB60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10043AB8C(uint64_t a1)
{
  id v2 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 88);
    uint64_t v4 = *(void *)(a1 + 496);
    *(_DWORD *)long long buf = 138412546;
    uint64_t v12 = v3;
    __int16 v13 = 2112;
    uint64_t v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "registerForDeviceAccessForMedia:%@ fDeviceAccessSession:%@", buf, 0x16u);
  }
  if (*(void *)(a1 + 496))
  {
    id v5 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Already registered", buf, 2u);
    }
  }
  else
  {
    *(unsigned char *)(a1 + 504) = 0;
    id v6 = objc_alloc_init((Class)DASession);
    id v7 = *(void **)(a1 + 496);
    *(void *)(a1 + 496) = v6;

    [*(id *)(a1 + 496) setBundleID:*(void *)(a1 + 88)];
    [*(id *)(a1 + 496) setDispatchQueue:*(void *)(sub_100019878() + 8)];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_10043AD74;
    _OWORD v10[3] = &unk_1009ADF48;
    void v10[4] = a1;
    [*(id *)(a1 + 496) setEventHandler:v10];
    uint64_t v8 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 88);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v12 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Session now registering for deviceAccess with bundle ID %@", buf, 0xCu);
    }
    [*(id *)(a1 + 496) activate];
  }
}

void sub_10043AD74(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = (uint64_t)[v3 eventType];
  if (v5 <= 29)
  {
    if (v5 == 10)
    {
      uint64_t v14 = qword_100A19F00;
      if (!os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_22;
      }
      uint64_t v19 = *(void *)(v4 + 88);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v32 = v19;
      long long v16 = "DAEventTypeActivated for bundleID %@";
    }
    else
    {
      if (v5 != 20) {
        goto LABEL_22;
      }
      uint64_t v14 = qword_100A19F00;
      if (!os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_22;
      }
      uint64_t v15 = *(void *)(v4 + 88);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v32 = v15;
      long long v16 = "DAEventTypeInvalidated for bundleID %@";
    }
LABEL_21:
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v16, buf, 0xCu);
    goto LABEL_22;
  }
  switch(v5)
  {
    case 30:
      uint64_t v14 = qword_100A19F00;
      if (!os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT)) {
        break;
      }
      uint64_t v17 = *(void *)(v4 + 88);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v32 = v17;
      long long v16 = "DAEventTypeSessionStarted for bundleID %@";
      goto LABEL_21;
    case 31:
      uint64_t v14 = qword_100A19F00;
      if (!os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT)) {
        break;
      }
      uint64_t v18 = *(void *)(v4 + 88);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v32 = v18;
      long long v16 = "DAEventTypeSessionEnded for bundleID %@";
      goto LABEL_21;
    case 42:
      id v6 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = *(void *)(v4 + 88);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v32 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "DAEventTypeDeviceChanged for bundleID %@", buf, 0xCu);
      }
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v8 = v3;
        uint64_t v9 = qword_100A19F00;
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v10 = *(void *)(v4 + 88);
          long long v11 = [v8 device];
          [v11 state];
          uint64_t v12 = DADeviceStateToString();
          if (_os_feature_enabled_impl()) {
            BOOL v13 = *(unsigned char *)(v4 + 504) != 0;
          }
          else {
            BOOL v13 = 0;
          }
          *(_DWORD *)long long buf = 138412802;
          uint64_t v32 = v10;
          __int16 v33 = 2112;
          BOOL v34 = v12;
          __int16 v35 = 1024;
          BOOL v36 = v13;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "DAEventTypeDeviceChanged for bundleID %@ eventDevice.device.state:%@ isDeviceAccessSessionActive:%d", buf, 0x1Cu);
        }
        uint64_t v20 = [v8 device];
        if ([v20 state] != (id)10)
        {
          long long v21 = [v8 device];
          if ([v21 state] != (id)20)
          {
            __int16 v23 = [v8 device];
            BOOL v24 = [v23 state] == (id)25;

            if (!v24)
            {
              uint64_t v25 = [v8 device];
              if ([v25 state] || !_os_feature_enabled_impl())
              {
              }
              else
              {
                BOOL v26 = *(unsigned char *)(v4 + 504) == 0;

                if (!v26)
                {
                  uint64_t v27 = sub_100019878();
                  v29[0] = _NSConcreteStackBlock;
                  v29[1] = 3221225472;
                  void v29[2] = sub_10043B6D8;
                  v29[3] = &unk_100997528;
                  v29[4] = v4;
                  sub_100013018(v27, v29);
                  goto LABEL_30;
                }
              }
              id v28 = qword_100A19F00;
              if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Ignoring event", buf, 2u);
              }
              goto LABEL_30;
            }
LABEL_29:
            uint64_t v22 = *(void **)(v4 + 496);
            v30[0] = _NSConcreteStackBlock;
            v30[1] = 3221225472;
            void v30[2] = sub_10043B2D4;
            v30[3] = &unk_1009ADF28;
            v30[4] = v4;
            [v22 getBluetoothAccessInfoWithCompletionHandler:v30];
LABEL_30:

            break;
          }
        }
        goto LABEL_29;
      }
      break;
  }
LABEL_22:
}

void sub_10043B21C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10043B290(uint64_t a1)
{
  uint64_t result = _os_feature_enabled_impl();
  if (result) {
    return *(unsigned char *)(a1 + 504) != 0;
  }
  return result;
}

void sub_10043B2D4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = +[NSMutableArray array];
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  uint64_t v9 = [v5 bluetoothDevices];
  id v10 = [v9 countByEnumeratingWithState:&v28 objects:v42 count:16];
  if (v10)
  {
    uint64_t v11 = *(void *)v29;
    do
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v29 != v11) {
          objc_enumerationMutation(v9);
        }
        BOOL v13 = [*(id *)(*((void *)&v28 + 1) + 8 * (void)v12) identifier];
        [v8 addObject:v13];

        uint64_t v12 = (char *)v12 + 1;
      }
      while (v10 != v12);
      id v10 = [v9 countByEnumeratingWithState:&v28 objects:v42 count:16];
    }
    while (v10);
  }

  uint64_t v14 = +[NSSet setWithArray:v8];
  uint64_t v15 = +[NSSet setWithArray:*(void *)(v7 + 216)];
  unsigned int v16 = [v14 isEqualToSet:v15];

  int v17 = v16 ^ 1;
  uint64_t v18 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    CUPrintNSObjectOneLine();
    id v19 = (id)objc_claimAutoreleasedReturnValue();
    if (_os_feature_enabled_impl()) {
      int v20 = *(unsigned __int8 *)(v7 + 504);
    }
    else {
      int v20 = 0;
    }
    long long v21 = CUPrintNSObjectOneLine();
    *(_DWORD *)long long buf = 138413314;
    id v33 = v19;
    __int16 v34 = 2112;
    id v35 = v6;
    __int16 v36 = 1024;
    int v37 = v17;
    __int16 v38 = 1024;
    int v39 = v20;
    __int16 v40 = 2112;
    long long v41 = v21;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "getBluetoothAccessInfoWithCompletionHandler accessInfo:%@ error:%@ devicesChanged:%d previousPoweredOn:%d previousAllowed:%@", buf, 0x2Cu);
  }
  uint64_t v22 = sub_100019878();
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  void v24[2] = sub_10043B63C;
  v24[3] = &unk_1009AB678;
  uint64_t v26 = v7;
  char v27 = v17;
  id v23 = v8;
  id v25 = v23;
  sub_100013018(v22, v24);
}

void sub_10043B5B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10043B63C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if (_os_feature_enabled_impl() && *(unsigned char *)(v2 + 504)) {
      sub_10043A520(v2, 0, 0, 0, 0, 0);
    }
    id v3 = *(void **)(a1 + 32);
    sub_10043A520(v2, 1, v3, 0, 0, 0);
  }
}

void sub_10043B6D8(uint64_t a1)
{
}

void sub_10043B6F4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  [*(id *)(v1 + 496) setEventHandler:0];
  [*(id *)(v1 + 496) invalidate];
  uint64_t v2 = *(void **)(v1 + 496);
  *(void *)(v1 + 496) = 0;
}

void sub_10043B740(uint64_t a1)
{
  if (_os_feature_enabled_impl())
  {
    uint64_t v2 = *(void **)(a1 + 496);
    if (v2)
    {
      id v3 = [v2 availableDevices];
      uint64_t v4 = +[NSMutableArray array];
      id v5 = [*(id *)(a1 + 496) bundleID];
      id v6 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        uint64_t v22 = v4;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "refreshAllowedDevicesForApp Allowed Devices %@", buf, 0xCu);
      }
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      void v18[2] = sub_10043B9F8;
      v18[3] = &unk_1009ADF70;
      id v7 = v5;
      id v19 = v7;
      id v8 = v4;
      id v20 = v8;
      [v3 enumerateObjectsUsingBlock:v18];
      uint64_t v9 = +[NSSet setWithArray:v8];
      id v10 = +[NSSet setWithArray:*(void *)(a1 + 216)];
      unsigned __int8 v11 = [v9 isEqualToSet:v10];

      uint64_t v12 = sub_100019878();
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      void v14[2] = sub_10043BB4C;
      v14[3] = &unk_1009AB678;
      uint64_t v16 = a1;
      char v17 = v11 ^ 1;
      id v13 = v8;
      id v15 = v13;
      sub_100013018(v12, v14);
    }
  }
}

void sub_10043B98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_10043B9F8(uint64_t a1, void *a2)
{
  id v12 = a2;
  id v3 = [v12 appAccessInfoMap];
  uint64_t v4 = [v3 objectForKeyedSubscript:*(void *)(a1 + 32)];
  id v5 = [v4 state];

  id v6 = [v12 appAccessInfoMap];
  id v7 = [v6 objectForKeyedSubscript:*(void *)(a1 + 32)];
  unsigned __int8 v8 = [v7 accessoryOptions];

  if ([v12 flags] & 8) != 0 && (v8)
  {
    uint64_t v9 = [v12 bluetoothIdentifier];
    if (v9)
    {

      if (v5 == (id)25 || v5 == (id)20)
      {
        id v10 = *(void **)(a1 + 40);
        unsigned __int8 v11 = [v12 bluetoothIdentifier];
        [v10 addObject:v11];
      }
    }
  }
}

void sub_10043BB00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10043BB4C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v2 = *(void *)(a1 + 40);
    id v3 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      if (_os_feature_enabled_impl()) {
        int v4 = *(unsigned __int8 *)(v2 + 504);
      }
      else {
        int v4 = 0;
      }
      id v5 = [*(id *)(a1 + 32) count];
      v8[0] = 67109376;
      v8[1] = v4;
      __int16 v9 = 2048;
      id v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "refreshAllowedDevicesForApp isDeviceAccessSessionActive:%d allowedDevices.count:%ld", (uint8_t *)v8, 0x12u);
    }
    if (_os_feature_enabled_impl())
    {
      if (*(unsigned char *)(v2 + 504))
      {
        sub_10043A378(v2, 0, 0);
        if (!*(void *)(v2 + 120) && !*(unsigned char *)(v2 + 209))
        {
          if (qword_1009F8788 != -1) {
            dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
          }
          unint64_t v6 = sub_10030629C((uint64_t)off_1009F8780, v2);
          if (qword_1009F8788 != -1) {
            dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
          }
          sub_10002CE08((uint64_t)off_1009F8780, v6, 0);
        }
      }
    }
    if ([*(id *)(a1 + 32) count])
    {
      sub_10043A378(v2, 1, *(void **)(a1 + 32));
      if (*(unsigned char *)(v2 + 209))
      {
        if (qword_1009F8788 != -1) {
          dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
        }
        uint64_t v7 = sub_10030629C((uint64_t)off_1009F8780, v2);
        if (v7) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 64))(v2, v7);
        }
      }
    }
  }
}

void sub_10043BD80(uint64_t a1)
{
  if (_os_feature_enabled_impl())
  {
    uint64_t v2 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 88);
      uint64_t v4 = *(void *)(a1 + 496);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v12 = v3;
      __int16 v13 = 2112;
      uint64_t v14 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "registerForDeviceAccessPerAccessory:%@ fDeviceAccessSession:%@", buf, 0x16u);
    }
    if (*(void *)(a1 + 496))
    {
      id v5 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Already registered", buf, 2u);
      }
    }
    else
    {
      *(unsigned char *)(a1 + 504) = 0;
      id v6 = objc_alloc_init((Class)DASession);
      uint64_t v7 = *(void **)(a1 + 496);
      *(void *)(a1 + 496) = v6;

      [*(id *)(a1 + 496) setBundleID:*(void *)(a1 + 88)];
      [*(id *)(a1 + 496) setDispatchQueue:*(void *)(sub_100019878() + 8)];
      [*(id *)(a1 + 496) setDeviceFlags:8];
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      void v10[2] = sub_10043BF8C;
      _OWORD v10[3] = &unk_1009ADF48;
      void v10[4] = a1;
      [*(id *)(a1 + 496) setEventHandler:v10];
      unsigned __int8 v8 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(a1 + 88);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v12 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Session now registering for deviceAccess with bundle ID %@", buf, 0xCu);
      }
      [*(id *)(a1 + 496) activate];
    }
  }
}

void sub_10043BF8C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  unint64_t v5 = (unint64_t)[v3 eventType];
  if (v5 <= 0x2A && ((1 << v5) & 0x600C0100400) != 0)
  {
    uint64_t v7 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      [v3 eventType];
      unsigned __int8 v8 = DAEventTypeToString();
      uint64_t v9 = *(void *)(v4 + 88);
      id v10 = [v3 error];
      int v13 = 138412802;
      uint64_t v14 = v8;
      __int16 v15 = 2112;
      uint64_t v16 = v9;
      __int16 v17 = 2112;
      uint64_t v18 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%@ for bundleID %@ error %@", (uint8_t *)&v13, 0x20u);
    }
    unsigned __int8 v11 = [v3 error];
    BOOL v12 = v11 == 0;

    if (v12) {
      sub_10043B740(v4);
    }
  }
}

void sub_10043C0E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10043C108(uint64_t a1, int a2, _OWORD *a3)
{
  id v6 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 88);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CBCentralSession::setupDAExtensionSession %@", buf, 0xCu);
  }
  long long v8 = a3[1];
  v12[0] = *a3;
  v12[1] = v8;
  id v11 = 0;
  unsigned int v9 = +[DASession processAllowedWithAuditToken:v12 error:&v11];
  id v10 = v11;
  if (a2)
  {
    if (a2 == 1 && v9) {
      *(unsigned char *)(a1 + 505) = 1;
    }
  }
  else if (v9)
  {
    *(unsigned char *)(a1 + 506) = 1;
  }
}

void sub_10043C21C(uint64_t a1, int a2)
{
  uint64_t v4 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 88);
    int v6 = 138412290;
    uint64_t v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CBCentralSession::setupDAAppSession %@", (uint8_t *)&v6, 0xCu);
  }
  if (a2)
  {
    if (a2 == 1) {
      sub_10043AB8C(a1);
    }
  }
  else
  {
    sub_10043BD80(a1);
  }
}

void sub_10043C2F0(uint64_t a1, void *a2, __int16 a3, uint64_t a4, int a5, __int16 a6, int a7, int a8)
{
  id v15 = a2;
  id v16 = [v15 UUIDString];
  sub_10004191C(__p, (char *)[v16 UTF8String]);
  long long v21 = __p;
  __int16 v17 = sub_100442430((uint64_t **)(a1 + 448), (const void **)__p, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v21);
  *((_WORD *)v17 + 28) = a3;
  *((_WORD *)v17 + 29) = a6;
  *((_DWORD *)v17 + 15) = a5;
  *((_DWORD *)v17 + 16) = a7;
  *((_DWORD *)v17 + 17) = a8;
  *((void *)v17 + 9) = a4;
  objc_storeStrong((id *)v17 + 10, a2);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10043C3E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10043C420(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v8 = a3;
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
  }
  uint64_t v9 = sub_100689998((uint64_t)off_1009F7EB8, a2, v8, a4, a5);

  return v9;
}

void sub_10043C4A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10043C4B8(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  uint64_t v9 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 2744))(v9))
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
    }
    int v10 = sub_1006C8380((uint64_t)off_1009F7ED8, v7);
    id v11 = *(void **)(a1 + 392);
    if (a3)
    {
      if ([v11 containsObject:v7])
      {
        uint64_t v12 = 17;
        goto LABEL_23;
      }
      if (v10)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
          sub_100768538();
        }
LABEL_22:
        uint64_t v12 = 12;
        goto LABEL_23;
      }
      if ((unint64_t)[v8 length] < 2)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
          sub_100768504();
        }
      }
      else
      {
        id v24 = v8;
        id v25 = [v24 bytes];
        int v26 = *v25;
        if (*v25)
        {
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
          }
          char v27 = sub_1006C81E8((uint64_t)off_1009F7ED8, 3);
          if ((unint64_t)[v27 count] > 1)
          {
            int v37 = qword_100A19F00;
            if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
              sub_100768490(v37, v38, v39, v40, v41, v42, v43, v44);
            }
            uint64_t v12 = 126;
          }
          else
          {
            if (qword_1009F7EE0 != -1) {
              dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
            }
            long long v28 = off_1009F7ED8;
            long long v29 = [v24 subdataWithRange:1, [v24 length] - 1];
            uint64_t v12 = sub_1006C8110((uint64_t)v28, v7, v26, v29, 3);

            if (v12)
            {
              long long v30 = qword_100A19F00;
              if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
                sub_100768424(v12, v30, v31, v32, v33, v34, v35, v36);
              }
            }
            else
            {
              [*(id *)(a1 + 392) addObject:v7];
              uint64_t v12 = 0;
            }
          }

          goto LABEL_23;
        }
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
          sub_1007683F0();
        }
      }
      uint64_t v12 = 3;
      goto LABEL_23;
    }
    if (![v11 containsObject:v7])
    {
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
        sub_1007685D8();
      }
      goto LABEL_22;
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
    }
    uint64_t v12 = sub_1006C8110((uint64_t)off_1009F7ED8, v7, 0, 0, 0);
    if (v12)
    {
      int v13 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
        sub_10076856C(v12, v13, v14, v15, v16, v17, v18, v19);
      }
    }
    [*(id *)(a1 + 392) removeObject:v7];
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
      sub_10076860C();
    }
    uint64_t v12 = 11;
  }
LABEL_23:
  char v20 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v21 = *(void *)(a1 + 88);
    uint64_t v22 = *(void *)(a1 + 392);
    int v45 = 138412546;
    uint64_t v46 = v21;
    __int16 v47 = 2112;
    uint64_t v48 = v22;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "FastLEConnection:CBCentralSession::enableFastLeConnectionWithDataToDevice session:%@ Fast LE Connection devices:%@", (uint8_t *)&v45, 0x16u);
  }

  return v12;
}

void sub_10043C8A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10043C8E4(void *a1, void *a2)
{
  id v3 = a2;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEBUG)) {
    sub_100768640();
  }
  if (v3)
  {
    uint64_t v4 = a1[15];
    if (v4)
    {
      if (*(int *)(v4 - 64) >= 1)
      {
        CFStringRef v6 = @"kCBMsgArgDeviceUUID";
        id v7 = v3;
        uint64_t v5 = +[NSDictionary dictionaryWithObjects:&v7 forKeys:&v6 count:1];
        sub_10002F224(a1, 136, v5);
      }
    }
  }
}

void sub_10043C9D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_10043C9F4(void *a1)
{
  uint64_t v2 = sub_10000EC28((uint64_t)a1);
  *(void *)uint64_t v2 = off_1009ADFA0;
  *(void *)(v2 + 216) = 0;
  *(_WORD *)(v2 + 224) = 0;
  *(unsigned char *)(v2 + 226) = 0;
  *(_OWORD *)(v2 + 232) = 0u;
  id v3 = (void **)(v2 + 232);
  *(_OWORD *)(v2 + 248) = 0u;
  *(unsigned char *)(v2 + 264) = 0;
  id v4 = objc_alloc_init((Class)NSMutableSet);
  uint64_t v5 = (void *)a1[30];
  a1[30] = v4;

  id v6 = objc_alloc_init((Class)NSMutableSet);
  id v7 = *v3;
  *id v3 = v6;

  id v8 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v9 = (void *)a1[27];
  a1[27] = v8;

  id v10 = objc_alloc_init((Class)NSMutableSet);
  id v11 = (void *)a1[32];
  a1[32] = v10;

  id v12 = objc_alloc_init((Class)NSMutableSet);
  int v13 = (void *)a1[31];
  a1[31] = v12;

  return a1;
}

void sub_10043CACC(_Unwind_Exception *a1)
{
  sub_10000EB80((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10043CB0C(uint64_t a1)
{
  *(void *)a1 = off_1009ADFA0;
  uint64_t v2 = *(void **)(a1 + 240);
  *(void *)(a1 + 240) = 0;

  id v3 = *(void **)(a1 + 232);
  *(void *)(a1 + 232) = 0;

  id v4 = *(void **)(a1 + 216);
  *(void *)(a1 + 216) = 0;

  uint64_t v5 = *(void **)(a1 + 256);
  *(void *)(a1 + 256) = 0;

  id v6 = *(void **)(a1 + 248);
  *(void *)(a1 + 248) = 0;

  return sub_10000EB80(a1);
}

void sub_10043CBC4(uint64_t a1)
{
  sub_10043CB0C(a1);

  operator delete();
}

uint64_t sub_10043CBFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned __int16 *)(a3 + 16);
  int v7 = *(unsigned __int16 *)(a1 + 224);
  *(_WORD *)(a3 + 18) = v7;
  id v8 = *(void **)(a1 + 216);
  uint64_t v9 = +[NSNumber numberWithUnsignedShort:v6];
  id v10 = [v8 objectForKeyedSubscript:v9];

  if (v10)
  {
    id v11 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
    {
      sub_10003AE4C(a2, (uint64_t)&v36);
      if (v38 >= 0) {
        uint64_t v32 = &v36;
      }
      else {
        uint64_t v32 = v36;
      }
      *(_DWORD *)uint64_t v43 = 67109378;
      *(_DWORD *)&uint8_t v43[4] = v6;
      LOWORD(v44) = 2082;
      *(void *)((char *)&v44 + 2) = v32;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Already published service ID 0x%x for session \"%{public}s\"", v43, 0x12u);
      if (SHIBYTE(v38) < 0) {
        operator delete(v36);
      }
    }
    return 1;
  }
  else
  {
    uint64_t v36 = 0;
    int v37 = 0;
    uint64_t v38 = 0;
    sub_100040550(&v36, a3 + 104);
    int v13 = v7 << 16;
    uint64_t v14 = (uint64_t *)v36;
    uint64_t v15 = v37;
    while (v14 != v15)
    {
      uint64_t v16 = *v14++;
      *(_DWORD *)(v16 + 104) = *(unsigned __int16 *)(v16 + 104) | v13;
    }
    *(void *)uint64_t v43 = 0;
    long long v44 = 0uLL;
    sub_100040550(v43, a3 + 136);
    uint64_t v17 = *(char **)v43;
    if (*(void *)v43 == (void)v44)
    {
      uint64_t v18 = 0;
    }
    else
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t v19 = *(void *)v17;
        int v20 = *(unsigned __int16 *)(*(void *)v17 + 16) | v13;
        *(_DWORD *)(v19 + 16) = v20;
        *(_DWORD *)(*(void *)(v19 + 96) + 16) = v20;
        sub_100040550(&__p, v19 + 104);
        if (v18) {
          operator delete(v18);
        }
        uint64_t v18 = __p;
        uint64_t v21 = v34;
        uint64_t v22 = (uint64_t *)__p;
        if (__p != v34)
        {
          do
          {
            uint64_t v23 = *v22++;
            *(_DWORD *)(v23 + 16) = *(unsigned __int16 *)(v23 + 16) | v13;
          }
          while (v22 != v21);
        }
        v17 += 8;
      }
      while (v17 != (char *)v44);
    }
    id v24 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO))
    {
      sub_10003AE4C(a2, (uint64_t)&__p);
      id v25 = v35 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)long long buf = 67109378;
      int v40 = v6;
      __int16 v41 = 2082;
      uint64_t v42 = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "Adding service ID 0x%x for session \"%{public}s\"", buf, 0x12u);
      if (v35 < 0) {
        operator delete(__p);
      }
    }
    if (qword_1009FB230 != -1) {
      dispatch_once(&qword_1009FB230, &stru_1009AE220);
    }
    uint64_t v12 = sub_10042209C(qword_1009FB228, a3, 0);
    if (!v12)
    {
      int v26 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO))
      {
        sub_10003AE4C(a2, (uint64_t)&__p);
        char v27 = v35 >= 0 ? &__p : (void **)__p;
        *(_DWORD *)long long buf = 67109378;
        int v40 = v6;
        __int16 v41 = 2082;
        uint64_t v42 = v27;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "Successfully added service ID 0x%x for session \"%{public}s\"", buf, 0x12u);
        if (v35 < 0) {
          operator delete(__p);
        }
      }
      if (qword_1009FB230 != -1) {
        dispatch_once(&qword_1009FB230, &stru_1009AE220);
      }
      sub_1004231FC(qword_1009FB228);
      long long v28 = +[NSMutableDictionary dictionary];
      long long v29 = *(void **)(a1 + 216);
      long long v30 = +[NSNumber numberWithUnsignedShort:v6];
      [v29 setObject:v28 forKeyedSubscript:v30];
    }
    if (v18) {
      operator delete(v18);
    }
    if (*(void *)v43)
    {
      *(void *)&long long v44 = *(void *)v43;
      operator delete(*(void **)v43);
    }
    if (v36)
    {
      int v37 = (uint64_t *)v36;
      operator delete(v36);
    }
  }
  return v12;
}

void sub_10043D018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (v20) {
    operator delete(v20);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10043D090(uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  uint64_t v6 = *(void **)(a1 + 216);
  int v7 = +[NSNumber numberWithUnsignedShort:a3];
  id v8 = [v6 objectForKeyedSubscript:v7];

  uint64_t v9 = qword_100A19F00;
  if (v8)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO))
    {
      sub_10003AE4C(a2, (uint64_t)__p);
      id v10 = v19 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)long long buf = 67109378;
      int v21 = a3;
      __int16 v22 = 2082;
      uint64_t v23 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Removing service ID 0x%x for session \"%{public}s\"", buf, 0x12u);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
    }
    int v11 = *(unsigned __int16 *)(a1 + 224) << 16;
    if (qword_1009FB230 != -1) {
      dispatch_once(&qword_1009FB230, &stru_1009AE220);
    }
    LODWORD(__p[0]) = v11 | a3;
    uint64_t v12 = sub_100424320(qword_1009FB228, (int *)__p);
    if (!v12)
    {
      int v13 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO))
      {
        sub_10003AE4C(a2, (uint64_t)__p);
        uint64_t v14 = v19 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)long long buf = 67109378;
        int v21 = a3;
        __int16 v22 = 2082;
        uint64_t v23 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Successfully removed service ID 0x%x for session \"%{public}s\"", buf, 0x12u);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
      }
      if (qword_1009FB230 != -1) {
        dispatch_once(&qword_1009FB230, &stru_1009AE220);
      }
      sub_1004251C8(qword_1009FB228);
      if (qword_1009FB230 != -1) {
        dispatch_once(&qword_1009FB230, &stru_1009AE220);
      }
      sub_1004231FC(qword_1009FB228);
      uint64_t v15 = *(void **)(a1 + 216);
      uint64_t v16 = +[NSNumber numberWithUnsignedShort:a3];
      [v15 removeObjectForKey:v16];

      uint64_t v12 = 0;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
    {
      sub_10003AE4C(a2, (uint64_t)__p);
      sub_1007686C4(a3, (char *)__p, buf, v9);
    }
    uint64_t v12 = 1010;
  }

  return v12;
}

void sub_10043D36C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10043D3AC(uint64_t a1, uint64_t a2)
{
  if ([*(id *)(a1 + 216) count])
  {
    int v4 = *(unsigned __int16 *)(a1 + 224);
    uint64_t v5 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO))
    {
      sub_10003AE4C(a2, (uint64_t)__p);
      uint64_t v6 = v24 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)long long buf = 136446210;
      char v27 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Removing all services for session \"%{public}s\"", buf, 0xCu);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }
    int v7 = [*(id *)(a1 + 216) allKeys];
    uint64_t v18 = [v7 sortedArrayUsingSelector:"compare:"];

    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    id v8 = [v18 reverseObjectEnumerator];
    uint64_t v17 = a2;
    id v9 = [v8 countByEnumeratingWithState:&v19 objects:v25 count:16];
    if (v9)
    {
      int v10 = v4 << 16;
      uint64_t v11 = *(void *)v20;
      do
      {
        uint64_t v12 = 0;
        do
        {
          if (*(void *)v20 != v11) {
            objc_enumerationMutation(v8);
          }
          int v13 = *(void **)(*((void *)&v19 + 1) + 8 * (void)v12);
          if (qword_1009FB230 != -1) {
            dispatch_once(&qword_1009FB230, &stru_1009AE220);
          }
          uint64_t v14 = qword_1009FB228;
          LODWORD(__p[0]) = v10 | [v13 unsignedShortValue];
          sub_100424320(v14, (int *)__p);
          uint64_t v12 = (char *)v12 + 1;
        }
        while (v9 != v12);
        id v9 = [v8 countByEnumeratingWithState:&v19 objects:v25 count:16];
      }
      while (v9);
    }

    [*(id *)(a1 + 216) removeAllObjects];
    uint64_t v15 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO))
    {
      sub_10003AE4C(v17, (uint64_t)__p);
      uint64_t v16 = v24 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)long long buf = 136446210;
      char v27 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Successfully removed all services for session \"%{public}s\"", buf, 0xCu);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }
    if (qword_1009FB230 != -1) {
      dispatch_once(&qword_1009FB230, &stru_1009AE220);
    }
    sub_1004251C8(qword_1009FB228);
    if (qword_1009FB230 != -1) {
      dispatch_once(&qword_1009FB230, &stru_1009AE220);
    }
    sub_1004231FC(qword_1009FB228);
  }
}

void sub_10043D6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10043D6FC(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  if (*(unsigned char *)(a1 + 128))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEBUG)) {
      sub_1007688D4();
    }
    uint64_t v7 = *(void *)(a1 + 120);
    if (!v7 || *(int *)(v7 - 64) < 1) {
      goto LABEL_89;
    }
    if (qword_1009FB270 != -1) {
      dispatch_once(&qword_1009FB270, &stru_1009AE0E0);
    }
    if (sub_100737024(qword_1009FB268, 2uLL, *(void **)(a1 + 88))
      && !*(_DWORD *)(*(void *)(a3 + 8) + 440))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
        sub_10076886C();
      }
      return 348;
    }
    else
    {
LABEL_89:
      if (*(unsigned char *)(a1 + 226))
      {
        id v8 = qword_100A19F00;
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
          sub_1007687B4(a2, v8);
        }
        return 122;
      }
      else
      {
        [*(id *)(a1 + 232) removeAllObjects];
        uint64_t v10 = *(void *)(a3 + 8);
        int v45 = 0;
        uint64_t v46 = 0;
        long long v44 = 0;
        sub_100037564((char *)&v44, *(long long **)(v10 + 88), *(long long **)(v10 + 96), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v10 + 96) - *(void *)(v10 + 88)) >> 2));
        uint64_t v12 = (unsigned __int8 *)v44;
        uint64_t v11 = v45;
        if (v44 != v45)
        {
          do
          {
            v47[0] = 0;
            v47[1] = 0;
            int v13 = +[BTUUID UUIDWithBytes:v47 length:sub_10071D240(v12, v47)];
            if (v13) {
              [*(id *)(a1 + 232) addObject:v13];
            }

            v12 += 20;
          }
          while (v12 != v11);
        }
        if (qword_1009F8248 != -1) {
          dispatch_once(&qword_1009F8248, &stru_1009AE260);
        }
        uint64_t v9 = sub_10065B544((uint64_t)off_1009F8240, a2, a3, a4);
        if (!v9)
        {
          uint64_t v14 = *(void **)(a3 + 8);
          uint64_t v15 = (long long *)v14[8];
          uint64_t v16 = (long long *)v14[9];
          if (v15 != v16)
          {
            do
            {
              v47[0] = 0;
              v47[1] = 0;
              LODWORD(v48[0]) = 0;
              long long v17 = *v15;
              LODWORD(v48[0]) = *((_DWORD *)v15 + 4);
              *(_OWORD *)__int16 v47 = v17;
              long long v52 = 0uLL;
              unsigned int v18 = sub_10071D240((unsigned __int8 *)v47, &v52);
              if (v18 == 16 || v18 == 2)
              {
                long long v19 = *(void **)(a1 + 240);
                long long v20 = +[NSData dataWithBytes:&v52 length:v18];
                [v19 addObject:v20];
              }
              uint64_t v15 = (long long *)((char *)v15 + 20);
            }
            while (v15 != v16);
            uint64_t v14 = *(void **)(a3 + 8);
          }
          long long v21 = (void *)v14[14];
          long long v22 = v14 + 15;
          if (v21 != v14 + 15)
          {
            do
            {
              memset((char *)v48 + 4, 0, 20);
              LODWORD(v48[0]) = *((_DWORD *)v21 + 12);
              *(_OWORD *)__int16 v47 = *((_OWORD *)v21 + 2);
              uint64_t v23 = v21[8];
              *((void *)&v48[0] + 1) = &off_100998428;
              *(void *)&v48[1] = v23;
              if (v23) {
                sub_100037354(v23);
              }
              long long v52 = 0uLL;
              int v24 = sub_10071D240((unsigned __int8 *)v47, &v52);
              uint64_t v25 = sub_10004A6E4((uint64_t)v48 + 8);
              int v26 = +[NSData dataWithBytes:v25 length:sub_100045F00((uint64_t)v48 + 8)];
              if (v24 == 2)
              {
                char v27 = *(void **)(a1 + 248);
                long long v28 = +[NSData dataWithBytes:&v52 length:2];
                [v27 addObject:v28];

                [*(id *)(a1 + 248) addObject:v26];
              }

              *((void *)&v48[0] + 1) = &off_100998428;
              if (*(void *)&v48[1]) {
                sub_1000368F4(*(atomic_uint **)&v48[1]);
              }
              long long v29 = (void *)v21[1];
              if (v29)
              {
                do
                {
                  long long v30 = v29;
                  long long v29 = (void *)*v29;
                }
                while (v29);
              }
              else
              {
                do
                {
                  long long v30 = (void *)v21[2];
                  BOOL v31 = *v30 == (void)v21;
                  long long v21 = v30;
                }
                while (!v31);
              }
              long long v21 = v30;
            }
            while (v30 != v22);
          }
          *(unsigned char *)(a1 + 226) = 1;
          if (qword_1009F8788 != -1) {
            dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
          }
          if (sub_1002F27F4((uint64_t)off_1009F8780, a2))
          {
            if (qword_1009F8788 != -1) {
              dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
            }
            uint64_t v32 = sub_1002F2850((uint64_t)off_1009F8780, a2);
            uint64_t v33 = v32;
            long long v52 = 0uLL;
            uint64_t v53 = 0;
            if (v32) {
              sub_10004191C(&v52, (char *)[v32 UTF8String]);
            }
            else {
              sub_10004191C(&v52, "");
            }
            if (qword_1009F8788 != -1) {
              dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
            }
            uint64_t v34 = sub_1002F28C8((uint64_t)off_1009F8780, a2);

            long long v42 = 0uLL;
            uint64_t v43 = 0;
            if (v34) {
              sub_10004191C(&v42, (char *)[v34 UTF8String]);
            }
            else {
              sub_10004191C(&v42, "");
            }
            if (qword_1009F8788 != -1) {
              dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
            }
            char v35 = sub_1002F2940((uint64_t)off_1009F8780, a2);

            long long v40 = 0uLL;
            uint64_t v41 = 0;
            if (v35) {
              sub_10004191C(&v40, (char *)[v35 UTF8String]);
            }
            else {
              sub_10004191C(&v40, "");
            }
            if (qword_1009F8788 != -1) {
              dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
            }
            char v36 = sub_1003072A8((uint64_t)off_1009F8780, a2);
            if (qword_1009F8788 != -1) {
              dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
            }
            char v37 = sub_1002F45B8((uint64_t)off_1009F8780, a2);
            uint64_t v51 = 0;
            long long v49 = 0u;
            *(_OWORD *)std::string __p = 0u;
            memset(v48, 0, sizeof(v48));
            *(_OWORD *)__int16 v47 = 0u;
            sub_1004B8EE4((uint64_t)v47, &v40, v37, 0, 0, v36, 2, &v42, &v52);
            if (qword_1009FB260 != -1) {
              dispatch_once(&qword_1009FB260, &stru_1009AE120);
            }
            sub_1000504D8();
            if (SHIBYTE(v51) < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v49) < 0) {
              operator delete(*((void **)&v48[1] + 1));
            }
            if (SHIBYTE(v48[0]) < 0) {
              operator delete(v47[1]);
            }
            if (SHIBYTE(v41) < 0) {
              operator delete((void *)v40);
            }
            if (SHIBYTE(v43) < 0) {
              operator delete((void *)v42);
            }
            if (SHIBYTE(v53) < 0) {
              operator delete((void *)v52);
            }
          }
          uint64_t v9 = 0;
        }
        if (v44)
        {
          int v45 = (unsigned __int8 *)v44;
          operator delete(v44);
        }
      }
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
      sub_10076874C();
    }
    return 341;
  }
  return v9;
}

void sub_10043DE18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  sub_10042FA04((uint64_t)&a27);
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v32 - 97) < 0) {
    operator delete(*(void **)(v32 - 120));
  }

  if (a24) {
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10043DF24(uint64_t result, unint64_t a2)
{
  if (*(unsigned char *)(result + 226))
  {
    uint64_t v3 = result;
    [*(id *)(result + 232) removeAllObjects];
    [*(id *)(v3 + 240) removeAllObjects];
    [*(id *)(v3 + 248) removeAllObjects];
    if (qword_1009F8248 != -1) {
      dispatch_once(&qword_1009F8248, &stru_1009AE260);
    }
    uint64_t result = sub_10065DB34((uint64_t)off_1009F8240, a2);
    *(unsigned char *)(v3 + 226) = 0;
  }
  return result;
}

BOOL sub_10043DFA4(uint64_t a1)
{
  return *(unsigned char *)(a1 + 226) || [*(id *)(a1 + 216) count] != 0;
}

void sub_10043DFD8(void *a1, uint64_t a2, void *a3, unsigned int *a4, unsigned __int16 *a5, unsigned int *a6)
{
  id v10 = a3;
  v17[0] = v10;
  v16[0] = @"kCBMsgArgDeviceUUID";
  v16[1] = @"kCBMsgArgATTMTU";
  if (qword_1009FB230 != -1) {
    dispatch_once(&qword_1009FB230, &stru_1009AE220);
  }
  uint64_t v11 = +[NSNumber numberWithUnsignedShort:sub_100031120(qword_1009FB228, v10)];
  v17[1] = v11;
  void v16[2] = @"kCBMsgArgAttributeID";
  uint64_t v12 = +[NSNumber numberWithUnsignedInt:*a4];
  v17[2] = v12;
  v16[3] = @"kCBMsgArgOffset";
  int v13 = +[NSNumber numberWithUnsignedShort:*a5];
  v17[3] = v13;
  void v16[4] = @"kCBMsgArgTransactionID";
  uint64_t v14 = +[NSNumber numberWithUnsignedInt:*a6];
  v17[4] = v14;
  uint64_t v15 = +[NSDictionary dictionaryWithObjects:v17 forKeys:v16 count:5];

  sub_10002F224(a1, 52, v15);
}

void sub_10043E17C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10043E1D0(void *a1, uint64_t a2, void *a3, unsigned int **a4, unsigned int *a5)
{
  id v20 = a3;
  id v8 = objc_alloc_init((Class)NSMutableDictionary);
  [v8 setObject:v20 forKey:@"kCBMsgArgDeviceUUID"];
  if (qword_1009FB230 != -1) {
    dispatch_once(&qword_1009FB230, &stru_1009AE220);
  }
  uint64_t v9 = +[NSNumber numberWithUnsignedShort:sub_100031120(qword_1009FB228, v20)];
  [v8 setObject:v9 forKey:@"kCBMsgArgATTMTU"];

  id v10 = +[NSNumber numberWithUnsignedInt:*a5];
  [v8 setObject:v10 forKey:@"kCBMsgArgTransactionID"];
  long long v19 = a1;

  id v11 = objc_alloc_init((Class)NSMutableArray);
  for (uint64_t i = *a4; i != a4[1]; i += 8)
  {
    id v13 = objc_alloc_init((Class)NSMutableDictionary);
    uint64_t v14 = sub_10004A6E4((uint64_t)(i + 2));
    uint64_t v15 = +[NSData dataWithBytes:v14 length:sub_100045F00((uint64_t)(i + 2))];
    uint64_t v16 = +[NSNumber numberWithUnsignedInt:*i];
    [v13 setObject:v16 forKey:@"kCBMsgArgAttributeID"];

    long long v17 = +[NSNumber numberWithUnsignedShort:*((unsigned __int16 *)i + 2)];
    [v13 setObject:v17 forKey:@"kCBMsgArgOffset"];

    [v13 setObject:v15 forKey:@"kCBMsgArgData"];
    unsigned int v18 = +[NSNumber numberWithLongLong:*((unsigned __int8 *)i + 24)];
    [v13 setObject:v18 forKey:@"kCBMsgArgIgnoreResponse"];

    [v11 addObject:v13];
  }
  [v8 setObject:v11 forKey:@"kCBMsgArgATTWrites"];
  sub_10002F224(v19, 53, v8);
}

void sub_10043E450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_10043E4D4(void *a1, uint64_t a2, unsigned int *a3, void *a4, int a5)
{
  id v12 = a4;
  id v8 = objc_alloc_init((Class)NSMutableDictionary);
  [v8 setObject:v12 forKey:@"kCBMsgArgDeviceUUID"];
  if (qword_1009FB230 != -1) {
    dispatch_once(&qword_1009FB230, &stru_1009AE220);
  }
  uint64_t v9 = +[NSNumber numberWithUnsignedShort:sub_100031120(qword_1009FB228, v12)];
  [v8 setObject:v9 forKey:@"kCBMsgArgATTMTU"];

  id v10 = +[NSNumber numberWithUnsignedInt:*a3];
  [v8 setObject:v10 forKey:@"kCBMsgArgAttributeID"];

  if (a5) {
    CFStringRef v11 = @"Notify";
  }
  else {
    CFStringRef v11 = @"Indicate";
  }
  [v8 setObject:v11 forKey:@"kCBMsgArgType"];
  sub_10002F224(a1, 54, v8);
}

void sub_10043E624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10043E65C(void *a1, uint64_t a2, unsigned int *a3, void *a4)
{
  id v9 = a4;
  id v6 = objc_alloc_init((Class)NSMutableDictionary);
  [v6 setObject:v9 forKey:@"kCBMsgArgDeviceUUID"];
  if (qword_1009FB230 != -1) {
    dispatch_once(&qword_1009FB230, &stru_1009AE220);
  }
  uint64_t v7 = +[NSNumber numberWithUnsignedShort:sub_100031120(qword_1009FB228, v9)];
  [v6 setObject:v7 forKey:@"kCBMsgArgATTMTU"];

  id v8 = +[NSNumber numberWithUnsignedInt:*a3];
  [v6 setObject:v8 forKey:@"kCBMsgArgAttributeID"];

  sub_10002F224(a1, 55, v6);
}

void sub_10043E780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10043E7B8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  id v9 = a3;
  id v10 = +[NSNumber numberWithInt:a4];
  [*(id *)(a1 + 80) setObject:v10 forKeyedSubscript:v9];

  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
  }
  int v11 = sub_1002F4430((uint64_t)off_1009F8780, v9);
  id v12 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO))
  {
    id v13 = sub_100304F74(v11);
    sub_10003AE4C(a2, (uint64_t)__p);
    uint64_t v14 = v19 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)long long buf = 136446722;
    long long v21 = v13;
    __int16 v22 = 2114;
    id v23 = v9;
    __int16 v24 = 2082;
    uint64_t v25 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Requesting \"%{public}s\" connection latency to device \"%{public}@\" for session \"%{public}s\"", buf, 0x20u);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
  }
  if (v11 == a4)
  {
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
    }
    uint64_t v15 = sub_10067F6EC((uint64_t)off_1009F7EB8, v9, a4, a5);
    uint64_t v16 = v15;
    if (v15 && v15 != 914) {
      [*(id *)(a1 + 80) removeObjectForKey:v9];
    }
  }
  else
  {
    uint64_t v16 = 915;
  }

  return v16;
}

void sub_10043E9C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10043E9F0(uint64_t a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  if (Current <= 86400.0) {
    double v3 = 0.0;
  }
  else {
    double v3 = Current + -86400.0;
  }
  v16[0] = 0;
  v16[1] = 0;
  uint64_t v15 = v16;
  sub_10043EC08((uint64_t *)&v15, *(void **)(a1 + 136), (void *)(a1 + 144));
  sub_10000EDA0(a1 + 136, *(void **)(a1 + 144));
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 136) = a1 + 144;
  uint64_t v4 = (uint64_t)v15;
  if (v15 != v16)
  {
    do
    {
      double v5 = *(double *)(v4 + 40);
      if (v5 > v3)
      {
        id v13 = (id *)(v4 + 32);
        *((double *)sub_10044265C((uint64_t **)(a1 + 136), (unint64_t *)(v4 + 32), (uint64_t)&unk_1007BE9D0, &v13)
        + 5) = v5;
      }
      id v6 = *(void **)(v4 + 8);
      if (v6)
      {
        do
        {
          uint64_t v7 = (void **)v6;
          id v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = *(void ***)(v4 + 16);
          BOOL v8 = *v7 == (void *)v4;
          uint64_t v4 = (uint64_t)v7;
        }
        while (!v8);
      }
      uint64_t v4 = (uint64_t)v7;
    }
    while (v7 != v16);
  }
  v14[0] = 0;
  v14[1] = 0;
  id v13 = (id *)v14;
  sub_10043EC08((uint64_t *)&v13, *(void **)(a1 + 160), (void *)(a1 + 168));
  sub_10000EDA0(a1 + 160, *(void **)(a1 + 168));
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 160) = a1 + 168;
  id v9 = v13;
  if (v13 != (id *)v14)
  {
    do
    {
      double v10 = *((double *)v9 + 5);
      if (v10 > v3)
      {
        long long v17 = v9 + 4;
        *((double *)sub_10044265C((uint64_t **)(a1 + 160), (unint64_t *)v9 + 4, (uint64_t)&unk_1007BE9D0, &v17) + 5) = v10;
      }
      int v11 = (id *)v9[1];
      if (v11)
      {
        do
        {
          id v12 = (id **)v11;
          int v11 = (id *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          id v12 = (id **)v9[2];
          BOOL v8 = *v12 == v9;
          id v9 = (id *)v12;
        }
        while (!v8);
      }
      id v9 = (id *)v12;
    }
    while (v12 != v14);
  }
  sub_10000EDA0((uint64_t)&v13, v14[0]);
  sub_10000EDA0((uint64_t)&v15, v16[0]);
}

void sub_10043EBD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, char a12, void *a13)
{
}

uint64_t *sub_10043EC08(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    double v5 = (uint64_t **)result;
    id v6 = result + 1;
    do
    {
      uint64_t result = sub_1004425C4(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          BOOL v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t sub_10043EC94(uint64_t **a1, void *a2)
{
  id v3 = a2;
  id v6 = v3;
  sub_10043E9F0((uint64_t)a1);
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
  }
  if (sub_1006BDC1C((uint64_t)off_1009F7ED8, v3) == 23)
  {
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    uint64_t v7 = &v6;
    *((CFAbsoluteTime *)sub_10044265C(a1 + 17, (unint64_t *)&v6, (uint64_t)&unk_1007BE9D0, &v7) + 5) = Current;
    ((void (*)(uint64_t **))(*a1)[15])(a1);
    id v3 = v6;
  }

  return 1;
}

void sub_10043ED7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_10043ED90(uint64_t a1)
{
  uint64_t v2 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump:         fGattWakeHistoryMap: %f", buf, 0xCu);
  }
  id v3 = *(void **)(a1 + 136);
  if (v3 != (void *)(a1 + 144))
  {
    uint64_t v4 = qword_100A19F00;
    do
    {
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        id v5 = [(id)v3[4] UUIDString];
        id v6 = [v5 UTF8String];
        uint64_t v7 = v3[5];
        *(_DWORD *)long long buf = 136446466;
        CFAbsoluteTime Current = *(double *)&v6;
        __int16 v13 = 2048;
        uint64_t v14 = v7;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump:         %{public}s: %f", buf, 0x16u);

        uint64_t v4 = qword_100A19F00;
      }
      BOOL v8 = (void *)v3[1];
      if (v8)
      {
        do
        {
          BOOL v9 = v8;
          BOOL v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          BOOL v9 = (void *)v3[2];
          BOOL v10 = *v9 == (void)v3;
          id v3 = v9;
        }
        while (!v10);
      }
      id v3 = v9;
    }
    while (v9 != (void *)(a1 + 144));
  }
}

void sub_10043EF20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10043EF38(uint64_t a1)
{
  uint64_t v2 = sub_10003FB34();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v2 + 2408))(v2)) {
    return 1;
  }
  sub_10043E9F0(a1);
  unsigned int v3 = *(_DWORD *)(a1 + 152);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
  }
  if (v3 > *((unsigned __int16 *)off_1009F8780 + 184))
  {
    uint64_t v4 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 88);
      v7[0] = 67109378;
      v7[1] = v3;
      __int16 v8 = 2114;
      uint64_t v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "We are over GATT AP Wake limit count %d for session %{public}@ ", (uint8_t *)v7, 0x12u);
    }
    return 1;
  }
  return 0;
}

uint64_t sub_10043F07C(uint64_t a1)
{
  uint64_t v2 = sub_10003FB34();
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2408))(v2);
  if (result)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 152);
    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
    }
    unsigned int v5 = *((unsigned __int16 *)off_1009F8780 + 185);
    if (v4 <= v5)
    {
      return 0;
    }
    else
    {
      id v6 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = *(void *)(a1 + 88);
        v8[0] = 67109634;
        v8[1] = v4;
        __int16 v9 = 1024;
        unsigned int v10 = v5;
        __int16 v11 = 2114;
        uint64_t v12 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "We are near the max GATT AP Wake limit count %d : NearLimit %d for session %{public}@ ", (uint8_t *)v8, 0x18u);
      }
      return 1;
    }
  }
  return result;
}

BOOL sub_10043F1C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v17 = v3;
  if (!*(unsigned char *)(a1 + 28)) {
    goto LABEL_11;
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
  }
  if (sub_1006BDC1C((uint64_t)off_1009F7ED8, v3) == 23)
  {
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    double v5 = Current - (double)0xAu;
    BOOL v6 = Current <= (double)0xAu;
    double v7 = 0.0;
    if (!v6) {
      double v7 = v5;
    }
    if (*(double *)(a1 + 48) > v7)
    {
      CFAbsoluteTime v8 = CFAbsoluteTimeGetCurrent();
      *(void *)long long buf = &v17;
      *((CFAbsoluteTime *)sub_10044265C((uint64_t **)(a1 + 160), (unint64_t *)&v17, (uint64_t)&unk_1007BE9D0, (id **)buf)+ 5) = v8;
      __int16 v9 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *(void *)(a1 + 48);
        CFAbsoluteTime v11 = CFAbsoluteTimeGetCurrent();
        int v12 = *(unsigned __int16 *)(a1 + 152);
        int v13 = *(unsigned __int16 *)(a1 + 176);
        uint64_t v14 = *(void *)(a1 + 88);
        *(_DWORD *)long long buf = 134219266;
        *(void *)&uint8_t buf[4] = v10;
        __int16 v19 = 2048;
        CFAbsoluteTime v20 = v11;
        __int16 v21 = 1024;
        int v22 = v12;
        __int16 v23 = 1024;
        int v24 = v13;
        __int16 v25 = 2114;
        unint64_t v26 = (unint64_t)v17;
        __int16 v27 = 2114;
        uint64_t v28 = v14;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "App is over assertion limit (%f:%f) while in background. Count %d:%d : this to count \"%{public}@\" on suspended session \"%{public}@\" ", buf, 0x36u);
      }
    }
    BOOL v15 = *(void *)(a1 + 176) > 0xC8uLL;
    id v3 = v17;
  }
  else
  {
LABEL_11:
    BOOL v15 = 0;
  }

  return v15;
}

void sub_10043F398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_10043F3C0(void *a1, uint64_t a2)
{
  CFStringRef v5 = @"kCBMsgArgReason";
  id v3 = +[NSNumber numberWithUnsignedInt:a2];
  BOOL v6 = v3;
  unsigned int v4 = +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];

  sub_10002F224(a1, 62, v4);
}

void sub_10043F47C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10043F4A0(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, unsigned __int16 *a6)
{
  unsigned int v12 = a3;
  int v8 = *(unsigned __int16 *)(a1 + 224);
  int v9 = *a6;
  if (qword_1009FB230 != -1) {
    dispatch_once(&qword_1009FB230, &stru_1009AE220);
  }
  int v11 = v9 | (v8 << 16);
  return sub_100425490(qword_1009FB228, &v12, a4, a5, &v11);
}

void sub_10043F52C(uint64_t a1, uint64_t a2, void *a3, unsigned __int16 a4)
{
  id v7 = a3;
  int v8 = *(unsigned __int16 *)(a1 + 224) << 16;
  id v10 = v7;
  if (qword_1009FB230 == -1)
  {
    int v9 = v7;
  }
  else
  {
    dispatch_once(&qword_1009FB230, &stru_1009AE220);
    int v9 = v10;
  }
  sub_100425680(qword_1009FB228, a2, v9, v8 | a4);
}

void sub_10043F5D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_10043F5EC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24)
    && *(void *)(a1 + 96)
    && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 40))(a1))
  {
    id v2 = [objc_alloc((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
    [v2 encodeObject:*(void *)(a1 + 88) forKey:@"bundleIdentifier"];
    [v2 encodeObject:*(void *)(a1 + 96) forKey:@"restoreIdentifier"];
    [v2 encodeObject:*(void *)(a1 + 240) forKey:@"advertisedServices"];
    [v2 encodeObject:*(void *)(a1 + 248) forKey:@"advertisedServiceData"];
    [v2 encodeBool:*(unsigned __int8 *)(a1 + 226) forKey:@"isAdvertising"];
    id v3 = qword_100A19F58;
    if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = *(void *)(a1 + 88);
      uint64_t v5 = *(void *)(a1 + 96);
      uint64_t v6 = *(void *)(a1 + 240);
      uint64_t v7 = *(void *)(a1 + 248);
      if (*(unsigned char *)(a1 + 226)) {
        int v8 = "True";
      }
      else {
        int v8 = "False";
      }
      int v11 = 138413570;
      id v12 = v2;
      __int16 v13 = 2114;
      uint64_t v14 = v4;
      __int16 v15 = 2114;
      uint64_t v16 = v5;
      __int16 v17 = 2114;
      uint64_t v18 = v6;
      __int16 v19 = 2114;
      uint64_t v20 = v7;
      __int16 v21 = 2082;
      int v22 = v8;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Saving Peripheral - restoration data: %@ bundleId: %{public}@, restorationId: %{public}@, advertisingServices: %{public}@, advertisingServiceData: %{public}@, isAdvertising: %{public}s", (uint8_t *)&v11, 0x3Eu);
    }
    int v9 = [v2 encodedData];
  }
  else
  {
    int v9 = 0;
  }

  return v9;
}

void sub_10043F7D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10043F7E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v19 = 0;
    id v4 = [objc_alloc((Class)NSKeyedUnarchiver) initForReadingFromData:v3 error:&v19];
    id v5 = v19;
    uint64_t v6 = qword_100A19F58;
    if (v4)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        id v21 = v4;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Restoring Peripheral restoration data: %@", buf, 0xCu);
      }
      uint64_t v7 = [v4 decodeObjectOfClass:objc_opt_class() forKey:@"bundleIdentifier"];
      int v8 = *(void **)(a1 + 88);
      *(void *)(a1 + 88) = v7;

      uint64_t v9 = [v4 decodeObjectOfClass:objc_opt_class() forKey:@"restoreIdentifier"];
      id v10 = *(void **)(a1 + 96);
      *(void *)(a1 + 96) = v9;

      if (*(void *)(a1 + 88) && *(void *)(a1 + 96))
      {
        id v11 = objc_alloc_init((Class)NSMutableSet);
        id v12 = *(void **)(a1 + 240);
        *(void *)(a1 + 240) = v11;

        [v4 decodeBoolForKey:@"isAdvertisingContactTracing"];
        *(unsigned char *)(a1 + 226) = 0;
        __int16 v13 = qword_100A19F58;
        uint64_t v14 = 1;
        if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_INFO))
        {
          __int16 v15 = *(void **)(a1 + 88);
          uint64_t v16 = *(void *)(a1 + 96);
          uint64_t v17 = *(void *)(a1 + 240);
          *(_DWORD *)long long buf = 138544130;
          id v21 = v15;
          __int16 v22 = 2114;
          uint64_t v23 = v16;
          __int16 v24 = 2114;
          uint64_t v25 = v17;
          __int16 v26 = 2082;
          __int16 v27 = "False";
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Peripheral Restoring - bundleId: %{public}@, restorationId: %{public}@, advertisingServices: %{public}@, isAdvertising: %{public}s ", buf, 0x2Au);
        }
        *(unsigned char *)(a1 + 209) = 1;
        goto LABEL_14;
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_ERROR))
    {
      sub_10076893C();
    }
    uint64_t v14 = 0;
LABEL_14:

    goto LABEL_15;
  }
  uint64_t v14 = 0;
LABEL_15:

  return v14;
}

void sub_10043FA28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10043FA50(uint64_t a1)
{
  id v2 = qword_100A19F58;
  if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 88);
    int v4 = 138543362;
    uint64_t v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Continuing after restore: %{public}@", (uint8_t *)&v4, 0xCu);
  }
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
  }
  sub_100303C58((uint64_t)off_1009F8780, *(void **)(a1 + 88));
}

uint64_t sub_10043FB30(uint64_t a1, unint64_t a2)
{
  int v4 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 88);
    *(_DWORD *)long long buf = 138543362;
    uint64_t v18 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Clear all state for peripheral session \"%{public}@\"", buf, 0xCu);
  }
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v6 = *(id *)(a1 + 216);
  id v7 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v13;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(v6);
        }
        id v10 = *(*(id *)(a1 + 216) objectForKeyedSubscript:*(void *)(*((void *)&v12 + 1) + 8 * (void)v9), (void)v12);
        [v10 removeAllObjects];

        uint64_t v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      id v7 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v7);
  }

  [*(id *)(a1 + 80) removeAllObjects];
  return sub_10043DF24(a1, a2);
}

void sub_10043FCA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10043FCD4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 72))();
}

void sub_10043FCF8(uint64_t a1)
{
  CFStringRef v4 = @"kCBMsgArgResult";
  id v2 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:");
  uint64_t v5 = v2;
  uint64_t v3 = +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];

  *(unsigned char *)(a1 + 226) = 0;
  [*(id *)(a1 + 232) removeAllObjects];
  [*(id *)(a1 + 240) removeAllObjects];
  [*(id *)(a1 + 248) removeAllObjects];
  sub_10002F224((void *)a1, 48, v3);
}

void sub_10043FDCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10043FDF0(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 256);
  if (!a3)
  {
    if ([v6 containsObject:v5])
    {
      [*(id *)(a1 + 256) removeObject:v5];
      goto LABEL_6;
    }
LABEL_11:
    uint64_t v10 = 17;
    goto LABEL_17;
  }
  if ([v6 containsObject:v5]) {
    goto LABEL_11;
  }
  [*(id *)(a1 + 256) addObject:v5];
LABEL_6:
  uint64_t v22 = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
  }
  sub_1006773FC((uint64_t)off_1009F7EB8, v5, (uint64_t)&v18);
  if ((void)v18)
  {
    id v7 = [*((id *)&v18 + 1) mutableCopy];
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)(a1 + 88);
    if (a3) {
      [v7 addObject:v9];
    }
    else {
      [v7 removeObject:v9];
    }
    objc_storeStrong((id *)&v18 + 1, v8);
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
    }
    id v11 = off_1009F7EB8;
    v13[0] = (id)v18;
    v13[1] = *((id *)&v18 + 1);
    long long v14 = v19;
    long long v15 = v20;
    long long v16 = v21;
    int v17 = v22;
    sub_100677528((uint64_t)v11, v5, (uint64_t)v13);
  }
  uint64_t v10 = 0;
LABEL_17:

  return v10;
}

void sub_10043FF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

id sub_10043FFC8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 256) containsObject:a2];
}

uint64_t sub_10043FFD4(uint64_t a1)
{
  uint64_t v2 = sub_10000EC28(a1);
  *(void *)uint64_t v2 = &off_1009AE038;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_DWORD *)(v2 + 248) = 0;
  uint64_t v3 = +[NSMutableDictionary dictionary];
  CFStringRef v4 = *(void **)(a1 + 232);
  *(void *)(a1 + 232) = v3;

  id v5 = objc_alloc_init((Class)NSMutableSet);
  id v6 = *(void **)(a1 + 240);
  *(void *)(a1 + 240) = v5;

  return a1;
}

void sub_10044005C(_Unwind_Exception *a1)
{
  sub_10000EB80(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100440084(uint64_t a1)
{
  *(void *)a1 = &off_1009AE038;
  uint64_t v2 = *(void **)(a1 + 232);
  *(void *)(a1 + 232) = 0;

  uint64_t v3 = *(void **)(a1 + 240);
  *(void *)(a1 + 240) = 0;

  return sub_10000EB80(a1);
}

void sub_100440100(uint64_t a1)
{
  sub_100440084(a1);

  operator delete();
}

BOOL sub_100440138(uint64_t a1, int64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 216);
  if (v6)
  {
    sub_100017388(v6 - 144, a2, v5);
  }
  else
  {
    id v7 = [[BTQueuedMessage alloc] initWithMsg:a2 arguments:v5];
    sub_10042EA24(a1, v7);
    if (sub_10002F4AC(a1) == (id)1)
    {
      if (qword_1009F8788 != -1) {
        dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
      }
      sub_100303C58((uint64_t)off_1009F8780, *(void **)(a1 + 88));
    }
  }
  return v6 != 0;
}

void sub_10044020C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_10044022C(uint64_t a1)
{
  return [*(id *)(a1 + 240) count] != 0;
}

uint64_t sub_100440250()
{
  return 0;
}

uint64_t sub_100440258()
{
  return 0;
}

id sub_100440264(uint64_t a1)
{
  uint64_t v2 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 88);
    int v5 = 138543362;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Clear all state for classic session \"%{public}@\"", (uint8_t *)&v5, 0xCu);
  }
  [*(id *)(a1 + 232) removeAllObjects];
  return [*(id *)(a1 + 240) removeAllObjects];
}

uint64_t sub_10044031C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 72))();
}

void sub_100440340(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
  }
  uint64_t v9 = sub_100030DCC((uint64_t)off_1009F7ED8, v7, 0);
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AE1E0);
  }
  uint64_t v10 = sub_100030F10((uint64_t)off_1009F7EF8, v9, 1);
  if (!v10)
  {
    sub_1004407BC(a1, v7, 3, 0);
    goto LABEL_39;
  }
  [*(id *)(a1 + 240) addObject:v7];
  id v11 = [*(id *)(a1 + 232) objectForKey:v7];

  if (v11)
  {
    BOOL v12 = sub_1004764A0(v10);
    long long v13 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      sub_10003AE4C(a2, (uint64_t)__p);
      long long v14 = v24 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)long long buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v12;
      *(_WORD *)&uint8_t buf[8] = 2114;
      *(void *)&buf[10] = v7;
      *(_WORD *)&unsigned char buf[18] = 2082;
      *(void *)&buf[20] = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Attempting to add device (%d) \"%{public}@\" more than once for session \"%{public}s\"", buf, 0x1Cu);
      if (v24 < 0)
      {
        operator delete(__p[0]);
        if (!v12) {
          goto LABEL_39;
        }
        goto LABEL_13;
      }
    }
    if (v12)
    {
LABEL_13:
      long long v15 = sub_100476674(v10);
      sub_1004407BC(a1, v7, 0, (uint64_t)v15);
    }
  }
  else
  {
    long long v16 = qword_100A19F30;
    if (os_log_type_enabled((os_log_t)qword_100A19F30, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(void *)(a1 + 88);
      *(_DWORD *)long long buf = 138543618;
      *(void *)&uint8_t buf[4] = v7;
      *(_WORD *)&unsigned char buf[12] = 2114;
      *(void *)&buf[14] = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "App connecting - {cbuuid: %{public}@, bundle: %{public}@}", buf, 0x16u);
    }
    long long v18 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      sub_10003AE4C(a2, (uint64_t)__p);
      long long v19 = v24 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)long long buf = 138543874;
      *(void *)&uint8_t buf[4] = v7;
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v19;
      *(_WORD *)&unsigned char buf[22] = 2114;
      *(void *)&uint8_t buf[24] = v8;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Connecting device \"%{public}@\" for session \"%{public}s\" with options %{public}@", buf, 0x20u);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }
    sub_1004859E0(v10, 0);
    if (*(unsigned char *)(v10 + 1332))
    {
      if (qword_1009F80A0 != -1) {
        dispatch_once(&qword_1009F80A0, &stru_1009AE280);
      }
      sub_1002AF9A4((uint64_t)off_1009F8098, v10, 0);
      sub_1004407BC(a1, v7, 0, 2);
    }
    else
    {
      if ([v8 connectingToPANServices]) {
        int v20 = -10305;
      }
      else {
        int v20 = -14657;
      }
      if (qword_1009F8090 != -1) {
        dispatch_once(&qword_1009F8090, &stru_1009AE2A0);
      }
      long long v21 = (int64x2_t *)off_1009F8088;
      sub_10003AE4C(a2, (uint64_t)buf);
      uint64_t v22 = sub_1004D2DCC(v21, v10, v20, (const std::string *)buf, 2);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if (v22) {
        sub_1004407BC(a1, v7, v22, 0);
      }
      else {
        [*(id *)(a1 + 232) setObject:v8 forKey:v7];
      }
    }
  }
LABEL_39:
}

void sub_10044076C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

void sub_1004407BC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v22 = a2;
  if (!a3) {
    ++*(_DWORD *)(a1 + 248);
  }
  if (a4 != 2) {
    [*(id *)(a1 + 232) removeObjectForKey:v22];
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
  }
  uint64_t v6 = sub_100030DCC((uint64_t)off_1009F7ED8, v22, 0);
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AE1E0);
  }
  uint64_t v7 = sub_100030F10((uint64_t)off_1009F7EF8, v6, 0);
  id v8 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    sub_100475EE0(v7, (uint64_t)__p);
    uint64_t v9 = v25 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)long long buf = 136446722;
    long long v29 = v9;
    __int16 v30 = 1024;
    int v31 = a3;
    __int16 v32 = 1024;
    int v33 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "CBClassicSession::deviceConnected for device %{public}s with result: %d and internalState %d", buf, 0x18u);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
  }
  if (qword_1009F87A8 != -1) {
    dispatch_once(&qword_1009F87A8, &stru_1009AE2E0);
  }
  if (sub_10046EB8C((uint64_t)off_1009F87A0, v7)) {
    BOOL v10 = *(unsigned char *)(v7 + 1333) != 0;
  }
  else {
    BOOL v10 = 1;
  }
  id v11 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    sub_100475EE0(v7, (uint64_t)__p);
    BOOL v12 = v25 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)long long buf = 136315906;
    long long v29 = v12;
    __int16 v30 = 1024;
    int v31 = a3;
    __int16 v32 = 1024;
    int v33 = a4;
    __int16 v34 = 1024;
    BOOL v35 = v10;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "CBClassicSession::deviceConnected for device %s with result: %d and internalState %d and isIncoming %d", buf, 0x1Eu);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
  }
  v27[0] = v22;
  v26[0] = @"kCBMsgArgDeviceUUID";
  v26[1] = @"kCBMsgArgResult";
  long long v13 = +[NSNumber numberWithInt:a3];
  v27[1] = v13;
  void v26[2] = @"kCBMsgArgInternalState";
  long long v14 = +[NSNumber numberWithInt:a4];
  void v27[2] = v14;
  _OWORD v26[3] = @"kCBMsgArgIsIncoming";
  long long v15 = +[NSNumber numberWithBool:v10];
  v27[3] = v15;
  long long v16 = +[NSDictionary dictionaryWithObjects:v27 forKeys:v26 count:4];
  uint64_t v17 = +[NSMutableDictionary dictionaryWithDictionary:v16];

  if (v10)
  {
    long long v18 = +[NSNumber numberWithInt:a4];
    [v17 setObject:v18 forKeyedSubscript:@"kCBMsgArgState"];
  }
  if (v7)
  {
    long long v19 = sub_10048B5E0(v7);
    BOOL v20 = [v19 count] == 0;

    if (!v20)
    {
      long long v21 = sub_10048B5E0(v7);
      [v17 setObject:v21 forKeyedSubscript:@"kCBMsgArgServices"];
    }
  }
  sub_100440138(a1, 51, v17);
  sub_100440138(a1, 49, v17);
  if (*(int *)(a1 + 248) >= 1)
  {
    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
    }
    sub_1002F9020((uint64_t)off_1009F8780, *(void **)(a1 + 88), 1);
  }
}

void sub_100440C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_100440CBC(uint64_t a1, unint64_t a2, void *a3, int a4)
{
  id v7 = a3;
  [*(id *)(a1 + 232) removeObjectForKey:v7];
  if (!a4)
  {
    sub_100440F88(a1, v7, 0, 0);
    goto LABEL_21;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
    sub_100767DD4();
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
  }
  uint64_t v8 = sub_100030DCC((uint64_t)off_1009F7ED8, v7, 0);
  if (!v8)
  {
    sub_100440F88(a1, v7, 3, 0);
    goto LABEL_21;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AE1E0);
  }
  uint64_t v9 = sub_100030F10((uint64_t)off_1009F7EF8, v8, 0);
  uint64_t v10 = v9;
  if (!v9)
  {
    uint64_t v13 = 3;
LABEL_20:
    sub_100440F88(a1, v7, v13, 0);
    goto LABEL_21;
  }
  if (!*(unsigned char *)(v9 + 1332))
  {
    uint64_t v13 = 0;
    goto LABEL_20;
  }
  if (sub_1004809F4(v9))
  {
    if (qword_1009F8090 != -1) {
      dispatch_once(&qword_1009F8090, &stru_1009AE2A0);
    }
    uint64_t v11 = sub_1004D76C0((uint64_t)off_1009F8088, v10, -1);
    if (v11)
    {
      BOOL v12 = sub_100476674(v10);
      sub_100440F88(a1, v7, v11, (uint64_t)v12);
    }
  }
  else
  {
    *(void *)std::string src = 0;
    uint64_t v17 = 0;
    sub_1000305AC(src, v7);
    if (qword_1009FB078 != -1) {
      dispatch_once(&qword_1009FB078, &stru_1009AE2C0);
    }
    uint64_t v14 = qword_1009FB070;
    uuid_copy(dst, src);
    sub_100402D8C(v14, a2, dst);
    if (qword_1009F8090 != -1) {
      dispatch_once(&qword_1009F8090, &stru_1009AE2A0);
    }
    sub_1004D2D54((uint64_t)off_1009F8088, v10, 1);
  }
LABEL_21:
  [*(id *)(a1 + 240) removeObject:v7];
}

void sub_100440F60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100440F88(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  [*(id *)(a1 + 232) removeObjectForKey:v7];
  v16[0] = v7;
  v15[0] = @"kCBMsgArgDeviceUUID";
  v15[1] = @"kCBMsgArgResult";
  uint64_t v8 = +[NSNumber numberWithInt:a3];
  v16[1] = v8;
  void v15[2] = @"kCBMsgArgInternalState";
  uint64_t v9 = +[NSNumber numberWithInt:a4];
  void v16[2] = v9;
  uint64_t v10 = +[NSDictionary dictionaryWithObjects:v16 forKeys:v15 count:3];

  uint64_t v11 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    v12[0] = 67109376;
    v12[1] = a3;
    __int16 v13 = 1024;
    int v14 = a4;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "CBClassicSession::deviceDisconnected with result: %d and internalState %d", (uint8_t *)v12, 0xEu);
  }
  --*(_DWORD *)(a1 + 248);
  sub_100440138(a1, 51, v10);
  sub_100440138(a1, 50, v10);
  if (!*(_DWORD *)(a1 + 248))
  {
    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
    }
    sub_1002F9020((uint64_t)off_1009F8780, *(void **)(a1 + 88), 0);
  }
}

void sub_100441164(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004411A4(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
  }
  v9[0] = 0;
  v9[1] = 0;
  sub_100014B58((uint64_t)off_1009F7ED8, ((unint64_t)a3[128] << 40) | ((unint64_t)a3[129] << 32) | ((unint64_t)a3[130] << 24) | ((unint64_t)a3[131] << 16) | ((unint64_t)a3[132] << 8) | a3[133], 1u, 0, 0, 0, (unsigned __int8 *)v9);
  CFStringRef v7 = @"kCBMsgArgDeviceUUID";
  int v5 = sub_100031234((const unsigned __int8 *)v9);
  uint64_t v8 = v5;
  uint64_t v6 = +[NSDictionary dictionaryWithObjects:&v8 forKeys:&v7 count:1];
  sub_100440138(a1, 16, v6);
}

void sub_1004412D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004412FC(uint64_t a1, uint64_t a2, unsigned __int8 *a3, int a4)
{
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
  }
  *(void *)uuid = 0;
  uint64_t v11 = 0;
  sub_100014B58((uint64_t)off_1009F7ED8, ((unint64_t)a3[128] << 40) | ((unint64_t)a3[129] << 32) | ((unint64_t)a3[130] << 24) | ((unint64_t)a3[131] << 16) | ((unint64_t)a3[132] << 8) | a3[133], 1u, 0, 0, 0, uuid);
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_uuid(v7, "kCBMsgArgDeviceUUID", uuid);
  xpc_dictionary_set_int64(v7, "kCBMsgArgResult", a4);
  unsigned int v8 = sub_100040630(a3);
  xpc_dictionary_set_int64(v7, "kCBMsgArgPairingState", v8);
  uint64_t v9 = sub_100031230(v7);
  sub_100440138(a1, 17, v9);

  xpc_release(v7);
}

void sub_10044145C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100441474(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
  }
  v9[0] = 0;
  v9[1] = 0;
  sub_100014B58((uint64_t)off_1009F7ED8, ((unint64_t)a3[128] << 40) | ((unint64_t)a3[129] << 32) | ((unint64_t)a3[130] << 24) | ((unint64_t)a3[131] << 16) | ((unint64_t)a3[132] << 8) | a3[133], 1u, 0, 0, 0, (unsigned __int8 *)v9);
  CFStringRef v7 = @"kCBMsgArgDeviceUUID";
  int v5 = sub_100031234((const unsigned __int8 *)v9);
  unsigned int v8 = v5;
  uint64_t v6 = +[NSDictionary dictionaryWithObjects:&v8 forKeys:&v7 count:1];
  sub_100440138(a1, 18, v6);
}

void sub_1004415A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004415CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
  }
  v14[0] = 0;
  v14[1] = 0;
  sub_100014B58((uint64_t)off_1009F7ED8, ((unint64_t)*(unsigned __int8 *)(a3 + 128) << 40) | ((unint64_t)*(unsigned __int8 *)(a3 + 129) << 32) | ((unint64_t)*(unsigned __int8 *)(a3 + 130) << 24) | ((unint64_t)*(unsigned __int8 *)(a3 + 131) << 16) | ((unint64_t)*(unsigned __int8 *)(a3 + 132) << 8) | *(unsigned __int8 *)(a3 + 133), 1u, 0, 0, 0, (unsigned __int8 *)v14);
  v12[0] = @"kCBMsgArgDeviceUUID";
  int v5 = sub_100031234((const unsigned __int8 *)v14);
  v13[0] = v5;
  v12[1] = @"kCBMsgArgBatteryPercentRight";
  uint64_t v6 = +[NSNumber numberWithInt:sub_10047E688((unsigned int *)a3, 2)];
  v13[1] = v6;
  _DWORD v12[2] = @"kCBMsgArgBatteryPercentLeft";
  CFStringRef v7 = +[NSNumber numberWithInt:sub_10047E688((unsigned int *)a3, 4)];
  void v13[2] = v7;
  void v12[3] = @"kCBMsgArgBatteryPercentCase";
  unsigned int v8 = +[NSNumber numberWithInt:sub_10047E688((unsigned int *)a3, 8)];
  void v13[3] = v8;
  unsigned __int8 v12[4] = @"kCBMsgArgBatteryPercent";
  uint64_t v9 = +[NSNumber numberWithInt:sub_10047E688((unsigned int *)a3, 1)];
  v13[4] = v9;
  v12[5] = @"kCBMsgArgBatteryPercentCombined";
  uint64_t v10 = +[NSNumber numberWithInt:sub_10047E688((unsigned int *)a3, 16)];
  v13[5] = v10;
  uint64_t v11 = +[NSDictionary dictionaryWithObjects:v13 forKeys:v12 count:6];
  sub_100440138(a1, 45, v11);
}

void sub_10044182C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10044188C(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
  }
  v10[0] = 0;
  v10[1] = 0;
  sub_100014B58((uint64_t)off_1009F7ED8, ((unint64_t)a3[128] << 40) | ((unint64_t)a3[129] << 32) | ((unint64_t)a3[130] << 24) | ((unint64_t)a3[131] << 16) | ((unint64_t)a3[132] << 8) | a3[133], 1u, 0, 0, 0, (unsigned __int8 *)v10);
  v8[0] = @"kCBMsgArgDeviceUUID";
  int v5 = sub_100031234((const unsigned __int8 *)v10);
  v8[1] = @"kCBMsgArgIsConnectedOverUSB";
  v9[0] = v5;
  uint64_t v6 = +[NSNumber numberWithBool:a3[1296]];
  v9[1] = v6;
  CFStringRef v7 = +[NSDictionary dictionaryWithObjects:v9 forKeys:v8 count:2];
  sub_100440138(a1, 45, v7);
}

void sub_1004419E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100441A18()
{
  return 3;
}

void sub_100441A20(id a1)
{
}

void sub_100441A64()
{
}

void sub_100441A88(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void sub_100441AD8(id a1)
{
}

void sub_100441B1C()
{
}

void sub_100441B40(id a1)
{
}

void sub_100441B84()
{
}

void sub_100441BA8(id a1)
{
}

void sub_100441BD8(id a1)
{
}

void sub_100441C1C()
{
}

void sub_100441C40(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    CFStringRef v4 = (char *)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (void *)*((void *)v4 - 1);
        v4 -= 8;
      }
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_100441CC0(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    unint64_t v5 = v2[4];
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      CFStringRef v7 = v2;
    }
    else {
      CFStringRef v7 = v2 + 1;
    }
    if (v6) {
      uint64_t v4 = (uint64_t)v2;
    }
    uint64_t v2 = (void *)*v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(void *)(v4 + 32)) {
    return 0;
  }
  sub_10030C604((uint64_t **)a1, v4);
  return 1;
}

void sub_100441D28(id a1)
{
}

void sub_100441D6C()
{
}

void sub_100441D90(id a1)
{
}

void sub_100441DD4(id a1)
{
}

void sub_100441E18()
{
}

void sub_100441E3C(id a1)
{
}

void sub_100441E80()
{
}

uint64_t *sub_100441EA4(uint64_t **a1, unint64_t *a2, uint64_t a3, id **a4)
{
  CFStringRef v7 = a1 + 1;
  BOOL v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        BOOL v6 = *v9;
        CFStringRef v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      BOOL v6 = v9[1];
      if (!v6)
      {
        CFStringRef v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (uint64_t *)operator new(0x38uLL);
    id v12 = **a4;
    v11[5] = 0;
    v11[6] = 0;
    v11[4] = (uint64_t)v12;
    sub_100036CA0(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void sub_100441F6C(id a1)
{
}

void sub_100441FB0()
{
}

void sub_100441FD4(id a1)
{
}

void sub_100442018()
{
}

uint64_t sub_10044203C(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    unint64_t v5 = v2[4];
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      CFStringRef v7 = v2;
    }
    else {
      CFStringRef v7 = v2 + 1;
    }
    if (v6) {
      uint64_t v4 = (uint64_t)v2;
    }
    uint64_t v2 = (void *)*v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(void *)(v4 + 32)) {
    return 0;
  }
  sub_1004420A4((uint64_t **)a1, v4);
  return 1;
}

uint64_t *sub_1004420A4(uint64_t **a1, uint64_t a2)
{
  unint64_t v3 = sub_10004D3B8(a1, (uint64_t *)a2);

  operator delete((void *)a2);
  return v3;
}

_OWORD *sub_1004420E8(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v11 = 0;
  BOOL v6 = (void **)sub_100085CE4((uint64_t)a1, &v11, a2);
  CFStringRef v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    CFStringRef v7 = operator new(0x40uLL);
    int v9 = *((_DWORD *)*a4 + 4);
    _DWORD v7[2] = **a4;
    *((_DWORD *)v7 + 12) = v9;
    *((void *)v7 + 7) = 0;
    sub_100036CA0(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

void sub_100442180(id a1)
{
}

void sub_1004421C4()
{
}

uint64_t *sub_1004421E8(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100442240(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_100442228(_Unwind_Exception *a1)
{
  sub_100011EC8(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100442240(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    unint64_t v5 = (uint64_t **)result;
    BOOL v6 = result + 1;
    do
    {
      uint64_t result = sub_1004422CC(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      CFStringRef v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          CFStringRef v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_1004422CC(uint64_t **a1, void *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  BOOL v6 = (uint64_t **)sub_1002DF5F4(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_10044235C((uint64_t)a1, a4, v8);
    sub_100036CA0(a1, v10, v6, v8[0]);
    return v8[0];
  }
  return result;
}

id sub_10044235C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  BOOL v6 = operator new(0x38uLL);
  *a3 = v6;
  a3[1] = v5;
  void v6[4] = *(id *)a2;
  id result = *(id *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  _OWORD v6[5] = result;
  v6[6] = v8;
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_1004423C8(id a1)
{
}

void sub_10044240C()
{
}

_OWORD *sub_100442430(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v14 = 0;
  BOOL v6 = (void **)sub_1000314CC((uint64_t)a1, &v14, a2);
  CFStringRef v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v13 = 0;
    CFStringRef v7 = operator new(0x58uLL);
    v12[1] = a1 + 1;
    uint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    _DWORD v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    void v9[2] = 0;
    void *v9 = 0;
    *(_OWORD *)((char *)v7 + 56) = 0u;
    *(_OWORD *)((char *)v7 + 72) = 0u;
    LOBYTE(v13) = 1;
    sub_100036CA0(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    sub_100442504((uint64_t)v12, 0);
  }
  return v7;
}

void sub_100442504(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100441A88((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_10044255C(id a1)
{
}

void sub_1004425A0()
{
}

uint64_t *sub_1004425C4(uint64_t **a1, void *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  BOOL v6 = (uint64_t **)sub_1002DF5F4(a1, a2, &v11, &v10, a3);
  CFStringRef v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    CFStringRef v7 = (uint64_t *)operator new(0x30uLL);
    void v7[4] = (uint64_t)*(id *)a4;
    void v7[5] = *(void *)(a4 + 8);
    sub_100036CA0(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_10044265C(uint64_t **a1, unint64_t *a2, uint64_t a3, id **a4)
{
  CFStringRef v7 = a1 + 1;
  BOOL v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        BOOL v6 = *v9;
        CFStringRef v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      BOOL v6 = v9[1];
      if (!v6)
      {
        CFStringRef v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = (uint64_t)**a4;
    v11[5] = 0;
    sub_100036CA0(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void sub_100442720(id a1)
{
}

void sub_100442764()
{
}

void sub_100442788(id a1)
{
}

void sub_1004427CC()
{
}

void sub_1004427F0(id a1)
{
}

void sub_100442834()
{
}

void sub_100442858(id a1)
{
}

void sub_10044289C()
{
}

void sub_1004428CC(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_1004428D8(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

uint64_t sub_1004428E4(uint64_t a1)
{
  uint64_t v2 = (void *)sub_1004C9B7C(a1, "A2DPService", 16);
  *uint64_t v2 = off_1009AE310;
  sub_100052DA8(v2 + 41);
  *(void *)(a1 + 400) = 0;
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009AE400);
  }
  uint64_t v3 = qword_1009F8410;
  *(void *)(a1 + 400) = qword_1009F8410;
  sub_1004C9E90(a1, v3);
  return a1;
}

void sub_100442988(_Unwind_Exception *a1)
{
  sub_100052DA4(v2);
  sub_1004C9C80(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004429B0(void *a1)
{
  *a1 = off_1009AE310;
  sub_100052DA4(a1 + 41);

  return sub_1004C9C80((uint64_t)a1);
}

void sub_100442A08(void *a1)
{
  *a1 = off_1009AE310;
  sub_100052DA4(a1 + 41);
  sub_1004C9C80((uint64_t)a1);

  operator delete();
}

uint64_t sub_100442A7C(uint64_t a1, uint64_t a2)
{
  long long v12 = xmmword_1007BEA00;
  memset(v14, 0, sizeof(v14));
  char v11 = 0;
  int v10 = 0;
  if (sub_10047B300(a2))
  {
    if (sub_100478F30(a2, &v12, 4u)) {
      int v4 = 4;
    }
    else {
      int v4 = 1;
    }
  }
  else
  {
    BOOL v5 = sub_10048A2B0(a2, v14, &v11);
    if (v11) {
      BOOL v6 = v5;
    }
    else {
      BOOL v6 = 0;
    }
    if (v6) {
      int v4 = 4 * (sub_10018BDDC((unsigned __int8 *)v14, 4363, &v10) == 0);
    }
    else {
      int v4 = 0;
    }
  }
  unsigned int v7 = *(_DWORD *)(a1 + 32);
  uint64_t v13 = 0;
  sub_100026C30((uint64_t)&v13);
  *(void *)&long long v9 = (int)v13;
  *((void *)&v9 + 1) = SWORD2(v13);
  return sub_100477F4C(a2, v7, v4, &v9, 0);
}

uint64_t sub_100442BC8(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  int v8 = 0;
  long long v9 = xmmword_1007BEA00;
  memset(v10, 0, sizeof(v10));
  char v7 = 0;
  int v6 = 0;
  *a3 = 0;
  if (sub_10047B300(a2))
  {
    uint64_t result = sub_100478F30(a2, &v9, 4u);
    if ((result & 1) == 0) {
      return result;
    }
LABEL_13:
    *a3 = 1;
    return result;
  }
  if (sub_10048A2B0(a2, v10, &v7))
  {
    if (v7)
    {
      uint64_t result = sub_10018BDDC((unsigned __int8 *)v10, 4363, &v6);
      if (!result) {
        goto LABEL_13;
      }
    }
  }
  uint64_t result = sub_100476250(a2, &v8);
  if ((~v8 & 0x240000) == 0
    && ((v8 & 0x1F00) == 0x400
     || (v8 & 0x1FFC) == 0x118
     || (v8 & 0x1F00) == 0x700 && ((v8 & 0xF4) == 4 || (v8 & 0xF8) == 0x10)))
  {
    goto LABEL_13;
  }
  return result;
}

uint64_t sub_100442D20(uint64_t a1, uint64_t a2, const char *a3, const char *a4)
{
  if (a3 && a4)
  {
    size_t v6 = strlen(aBtKeyHandsfree);
    if (!strncmp(a3, aBtKeyHandsfree, v6))
    {
      size_t v7 = strlen(a4);
      __int16 v27 = 0;
      uint64_t v26 = 0;
      char v25 = 0;
      int __dst = 0;
      if (v7)
      {
        size_t v8 = v7;
        unint64_t v9 = 0;
        size_t v10 = 0;
        if (v7 >= 4) {
          uint64_t v11 = 4;
        }
        else {
          uint64_t v11 = v7;
        }
        do
        {
          size_t v12 = 0;
          uint64_t v13 = &a4[v10];
          while (v13[v12] != 58)
          {
            if (v11 == ++v12)
            {
              size_t v12 = v11;
              break;
            }
          }
          memcpy(&__dst, v13, v12);
          *((unsigned char *)&__dst + v12) = 0;
          *((unsigned char *)&v26 + v9) = atoi((const char *)&__dst);
          v10 += v12 + 1;
          if (v10 >= v8) {
            break;
          }
        }
        while (v9++ < 9);
      }
      char v23 = 0;
      sub_10001B8E0(&v23);
      sub_10018F088((uint64_t)sub_100442ED8, (uint64_t)&v26, v15, v16, v17, v18, v19, v20);
      sub_10001B910(&v23);
      sub_10001B8AC(&v23);
    }
    return 0;
  }
  else
  {
    id v22 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
      sub_1007689A4(v22);
    }
    return 1;
  }
}

void sub_100442EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_100442ED8()
{
  uint64_t v0 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "Set AFH enabled\n\n", v1, 2u);
  }
}

void sub_100442F40(id a1)
{
}

void sub_100442F84()
{
}

uint64_t sub_100442FA8(uint64_t a1, int *a2, int *a3, uint64_t a4, void *a5)
{
  id v9 = a5;
  *(void *)a1 = 0;
  sub_100052DA8(a1 + 8);
  *(_WORD *)(a1 + 76) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 79) = 0;
  *(_WORD *)(a1 + 83) = 0;
  int v10 = *a2;
  *(_WORD *)(a1 + 76) = *((_WORD *)a2 + 2);
  *(_DWORD *)(a1 + 72) = v10;
  *(unsigned char *)(a1 + 78) = 0;
  int v11 = *a3;
  *(_WORD *)(a1 + 83) = *((_WORD *)a3 + 2);
  *(_DWORD *)(a1 + 79) = v11;
  *(unsigned char *)(a1 + 85) = 0;
  *(unsigned char *)(a1 + 100) = 0;
  *(void *)(a1 + 88) = a4;
  *(_DWORD *)(a1 + 96) = 256;
  size_t v12 = *(void **)a1;
  *(void *)a1 = v9;

  *(_WORD *)(a1 + 102) = 0;
  return a1;
}

void sub_100443054(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id *sub_100443070(id *a1)
{
  return a1;
}

BOOL sub_1004430A4(void *a1)
{
  uint64_t v2 = qword_100A1A008;
  if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Starting LEA easy pairing agent", buf, 2u);
  }
  *((unsigned char *)a1 + 96) = 0;
  uint64_t v3 = (void (***)(void, uint64_t, uint64_t, void))a1[11];
  if (v3)
  {
    int v4 = qword_100A1A008;
    BOOL v5 = os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT);
    size_t v6 = v3;
    if (v5)
    {
      sub_1004A82EC((unsigned __int8 *)a1 + 72, buf);
      int v7 = v20;
      size_t v8 = *(uint8_t **)buf;
      sub_1004A82EC((unsigned __int8 *)a1 + 79, __p);
      id v9 = buf;
      if (v7 < 0) {
        id v9 = v8;
      }
      if (v18 >= 0) {
        int v10 = __p;
      }
      else {
        int v10 = (void **)__p[0];
      }
      *(_DWORD *)long long v21 = 136315394;
      id v22 = v9;
      __int16 v23 = 2080;
      char v24 = v10;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending pair status request to \"%s\" for device \"%s\" ", v21, 0x16u);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v20 < 0) {
        operator delete(*(void **)buf);
      }
      size_t v6 = (void (***)(void, uint64_t, uint64_t, void))a1[11];
    }
    (**v6)(v6, (uint64_t)(a1 + 9), (uint64_t)a1 + 79, *a1);
    int v11 = qword_100A1A008;
    if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
    {
      sub_1004A82EC((unsigned __int8 *)a1 + 79, buf);
      int v12 = v20;
      uint64_t v13 = *(uint8_t **)buf;
      sub_1004A82EC((unsigned __int8 *)a1 + 72, __p);
      uint64_t v14 = buf;
      if (v12 < 0) {
        uint64_t v14 = v13;
      }
      if (v18 >= 0) {
        uint64_t v15 = __p;
      }
      else {
        uint64_t v15 = (void **)__p[0];
      }
      *(_DWORD *)long long v21 = 136315394;
      id v22 = v14;
      __int16 v23 = 2080;
      char v24 = v15;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Sending pair status request to \"%s\"  for device \"%s\" ", v21, 0x16u);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v20 < 0) {
        operator delete(*(void **)buf);
      }
    }
    (**(void (***)(void, uint64_t, uint64_t, void))a1[11])(a1[11], (uint64_t)a1 + 79, (uint64_t)(a1 + 9), *a1);
    *((unsigned char *)a1 + 96) += 2;
  }
  return v3 != 0;
}

void sub_100443354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10044337C(void *a1, uint64_t a2, unsigned __int8 *a3, int a4)
{
  size_t v8 = qword_100A1A008;
  if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = a4 == 2 ? "Paired" : "Not paired";
    sub_1004A82EC((unsigned __int8 *)a2, v53);
    int v10 = v54 >= 0 ? v53 : (void **)v53[0];
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = v9;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received pair status response \"%{public}s\" from device \"%s\"", buf, 0x16u);
    if (v54 < 0) {
      operator delete(v53[0]);
    }
  }
  v46[0] = 0;
  v46[1] = 0;
  sub_10003AED0((uint64_t)v46, (uint64_t)(a1 + 1));
  if (*(_DWORD *)a2 == *((_DWORD *)a1 + 18) && *(unsigned __int16 *)(a2 + 4) == *((unsigned __int16 *)a1 + 38))
  {
    *((unsigned char *)a1 + 78) = a4;
    --*((unsigned char *)a1 + 96);
  }
  if (*(_DWORD *)a2 == *(_DWORD *)((char *)a1 + 79)
    && *(unsigned __int16 *)(a2 + 4) == *(unsigned __int16 *)((char *)a1 + 83))
  {
    *((unsigned char *)a1 + 85) = a4;
    char v13 = *((unsigned char *)a1 + 96) - 1;
    *((unsigned char *)a1 + 96) = v13;
  }
  else
  {
    char v13 = *((unsigned char *)a1 + 96);
  }
  if (!v13)
  {
    int v15 = (*((unsigned char *)a1 + 85) & *((unsigned char *)a1 + 78));
    uint64_t v16 = qword_100A1A008;
    BOOL v17 = os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT);
    if (v15 == 2)
    {
      if (v17)
      {
        sub_1004A82EC((unsigned __int8 *)a2, v53);
        int v18 = v54;
        uint64_t v19 = (void **)v53[0];
        sub_1004A82EC(a3, buf);
        char v20 = v53;
        if (v18 < 0) {
          char v20 = v19;
        }
        if (v51 >= 0) {
          long long v21 = buf;
        }
        else {
          long long v21 = *(unsigned char **)buf;
        }
        *(_DWORD *)long long v52 = 136315394;
        *(void *)&v52[4] = v20;
        *(_WORD *)&v52[12] = 2080;
        *(void *)&v52[14] = v21;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Devices \"%s\" and \"%s\" are already paired", v52, 0x16u);
        if (v51 < 0) {
          operator delete(*(void **)buf);
        }
        if (v54 < 0) {
          operator delete(v53[0]);
        }
      }
    }
    else
    {
      if (v17)
      {
        sub_1004A82EC((unsigned __int8 *)a2, v53);
        int v22 = v54;
        __int16 v23 = (void **)v53[0];
        sub_1004A82EC(a3, buf);
        char v24 = v53;
        if (v22 < 0) {
          char v24 = v23;
        }
        if (v51 >= 0) {
          char v25 = buf;
        }
        else {
          char v25 = *(unsigned char **)buf;
        }
        *(_DWORD *)long long v52 = 136315394;
        *(void *)&v52[4] = v24;
        *(_WORD *)&v52[12] = 2080;
        *(void *)&v52[14] = v25;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Generate bonding info to pair between \"%s\" and \"%s\"", v52, 0x16u);
        if (v51 < 0) {
          operator delete(*(void **)buf);
        }
        if (v54 < 0) {
          operator delete(v53[0]);
        }
      }
      __long long buf = 0;
      uint64_t v49 = 0;
      *(void *)long long buf = 0;
      v53[0] = 0;
      v53[1] = 0;
      *(void *)&uint8_t buf[8] = 0;
      *(void *)long long v52 = 0;
      *(void *)&v52[8] = 0;
      if (qword_1009F7ED0 != -1) {
        dispatch_once(&qword_1009F7ED0, &stru_1009AE420);
      }
      *(_OWORD *)long long buf = *(_OWORD *)(qword_1009F7EC8 + 168);
      int v26 = sub_100180D78((long long *)(qword_1009F7EC8 + 136), 3, 0, v52);
      if (v26)
      {
        __int16 v27 = qword_100A1A008;
        if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_FAULT)) {
          sub_100768AD8(v26, v27);
        }
      }
      else
      {
        arc4random_buf((char *)&__buf + 2, 2uLL);
        arc4random_buf(&v49, 8uLL);
        int v28 = sub_100180684((long long *)v52, &v49, &__buf);
        if (v28)
        {
          long long v29 = qword_100A1A008;
          if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_ERROR)) {
            sub_100768A60(v28, v29);
          }
        }
        else
        {
          __int16 v30 = __buf;
          __int16 v31 = HIWORD(__buf);
          int v32 = sub_100180D78((long long *)buf, SHIWORD(__buf), 0, v53);
          if (v32)
          {
            int v33 = qword_100A1A008;
            if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_ERROR)) {
              sub_1007689E8(v32, v33);
            }
          }
          else
          {
            if (qword_1009F7EE0 != -1) {
              dispatch_once(&qword_1009F7EE0, &stru_1009AE440);
            }
            __int16 v34 = off_1009F7ED8;
            unint64_t v35 = sub_100443A1C((unsigned __int8 *)a2);
            sub_100014B58((uint64_t)v34, v35, 0, 0, 0, 0, (unsigned __int8 *)v48);
            char v36 = sub_100031234((const unsigned __int8 *)v48);
            v48[0] = 0;
            v48[1] = 0;
            char v44 = 16;
            unint64_t v43 = 0;
            if (qword_1009F7ED0 != -1) {
              dispatch_once(&qword_1009F7ED0, &stru_1009AE420);
            }
            sub_10071480C(qword_1009F7EC8, v36, v48, &v44, &v43);
            if (qword_1009F7EE0 != -1) {
              dispatch_once(&qword_1009F7EE0, &stru_1009AE440);
            }
            char v37 = off_1009F7ED8;
            unint64_t v38 = sub_100443A1C(a3);
            sub_100014B58((uint64_t)v37, v38, 0, 0, 0, 0, (unsigned __int8 *)v47);
            uint64_t v39 = sub_100031234((const unsigned __int8 *)v47);
            v47[0] = 0;
            v47[1] = 0;
            char v42 = 16;
            unint64_t v41 = 0;
            if (qword_1009F7ED0 != -1) {
              dispatch_once(&qword_1009F7ED0, &stru_1009AE420);
            }
            sub_10071480C(qword_1009F7EC8, v39, v47, &v42, &v41);
            uint64_t v40 = (unsigned __int16)(v31 ^ v30);
            (*(void (**)(void, uint64_t, unsigned __int8 *, uint64_t, uint64_t *, void **, void *, void))(*(void *)a1[11] + 8))(a1[11], a2, a3, v40, &v49, v53, v47, *a1);
            (*(void (**)(void, unsigned __int8 *, uint64_t, uint64_t, uint64_t *, void **, void *, void))(*(void *)a1[11] + 8))(a1[11], a3, a2, v40, &v49, v53, v48, *a1);
          }
        }
      }
    }
  }
  return sub_10003AFB4((uint64_t)v46);
}

void sub_1004439BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);

  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_100443A1C(unsigned __int8 *a1)
{
  return ((unint64_t)*a1 << 40) | ((unint64_t)a1[1] << 32) | ((unint64_t)a1[2] << 24) | ((unint64_t)a1[3] << 16) | ((unint64_t)a1[4] << 8) | a1[5];
}

uint64_t sub_100443A50(uint64_t a1, unsigned __int8 *a2, uint64_t a3, int a4)
{
  size_t v8 = qword_100A1A008;
  if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
  {
    if (a4) {
      id v9 = "Fail";
    }
    else {
      id v9 = "Success";
    }
    sub_1004A82EC(a2, __p);
    if (v13 >= 0) {
      int v10 = __p;
    }
    else {
      int v10 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136446466;
    int v15 = v9;
    __int16 v16 = 2080;
    BOOL v17 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received bonding info store result \"%{public}s\" from device \"%s\" ", buf, 0x16u);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
  return (*(uint64_t (**)(void, unsigned __int8 *, uint64_t, void))(**(void **)(a1 + 88) + 16))(*(void *)(a1 + 88), a2, a3, 2 * (a4 != 0));
}

uint64_t sub_100443BA8(uint64_t result, int a2, int a3)
{
  uint64_t v3 = *(void *)(result + 88);
  if (v3)
  {
    BOOL v5 = (unsigned __int8 *)result;
    if (a2)
    {
      size_t v6 = qword_100A1A008;
      if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
      {
        sub_1004A82EC(v5 + 72, v18);
        int v7 = v19;
        size_t v8 = (void **)v18[0];
        sub_1004A82EC(v5 + 79, __p);
        id v9 = v18;
        if (v7 < 0) {
          id v9 = v8;
        }
        if (v17 >= 0) {
          int v10 = __p;
        }
        else {
          int v10 = (void **)__p[0];
        }
        *(_DWORD *)long long buf = 136315394;
        long long v21 = v9;
        __int16 v22 = 2080;
        __int16 v23 = v10;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Sending easy unpair request to \"%s\" for device \"%s\" ", buf, 0x16u);
        if (v17 < 0) {
          operator delete(__p[0]);
        }
        if (v19 < 0) {
          operator delete(v18[0]);
        }
        uint64_t v3 = *((void *)v5 + 11);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, void *, unsigned __int8 *, void))(*(void *)v3 + 24))(v3, (void *)v5 + 9, v5 + 79, *(void *)v5);
    }
    if (a3)
    {
      int v11 = qword_100A1A008;
      if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
      {
        sub_1004A82EC(v5 + 79, v18);
        int v12 = v19;
        char v13 = (void **)v18[0];
        sub_1004A82EC(v5 + 72, __p);
        uint64_t v14 = v18;
        if (v12 < 0) {
          uint64_t v14 = v13;
        }
        if (v17 >= 0) {
          int v15 = __p;
        }
        else {
          int v15 = (void **)__p[0];
        }
        *(_DWORD *)long long buf = 136315394;
        long long v21 = v14;
        __int16 v22 = 2080;
        __int16 v23 = v15;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Sending easy unpair request to \"%s\"  for device \"%s\" ", buf, 0x16u);
        if (v17 < 0) {
          operator delete(__p[0]);
        }
        if (v19 < 0) {
          operator delete(v18[0]);
        }
      }
      return (*(uint64_t (**)(void, unsigned __int8 *, void *, void))(**((void **)v5 + 11) + 24))(*((void *)v5 + 11), v5 + 79, (void *)v5 + 9, *(void *)v5);
    }
  }
  return result;
}

void sub_100443E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100443E2C(uint64_t result, char a2)
{
  *(unsigned char *)(result + 97) = a2;
  return result;
}

uint64_t sub_100443E34(uint64_t result, char a2)
{
  *(unsigned char *)(result + 98) = a2;
  return result;
}

uint64_t sub_100443E3C(uint64_t result)
{
  *(unsigned char *)(result + 99) = 1;
  return result;
}

uint64_t sub_100443E48(uint64_t result)
{
  *(unsigned char *)(result + 99) = 0;
  return result;
}

uint64_t sub_100443E50(uint64_t result)
{
  *(unsigned char *)(result + 100) = 1;
  return result;
}

uint64_t sub_100443E5C(uint64_t result)
{
  *(unsigned char *)(result + 100) = 0;
  return result;
}

uint64_t sub_100443E64(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 97);
}

uint64_t sub_100443E6C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 98);
}

uint64_t sub_100443E74(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 99);
}

id sub_100443E7C(id *a1)
{
  return *a1;
}

uint64_t sub_100443E84(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 102);
}

uint64_t sub_100443E8C(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 102) = a2;
  return result;
}

void sub_100443E94(id a1)
{
}

void sub_100443ED8()
{
}

void sub_100443EFC(id a1)
{
}

void sub_100443F40()
{
}

uint64_t sub_100443F64(uint64_t result)
{
  *(void *)uint64_t result = 0;
  *(_DWORD *)(result + 8) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = 0;
  return result;
}

void sub_100443F78(id *a1)
{
  uint64_t v2 = qword_100A19FE8;
  if (os_log_type_enabled((os_log_t)qword_100A19FE8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    int v11 = "activate";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
  }
  uint64_t v3 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 8))(v3))
  {
    if (_os_feature_enabled_impl())
    {
      if (sub_10054032C())
      {
        if (!*a1)
        {
          int v4 = qword_100A19FE8;
          if (os_log_type_enabled((os_log_t)qword_100A19FE8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 136315138;
            int v11 = "activate";
            _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s: init", buf, 0xCu);
          }
          uint64_t v5 = +[BTVCLinkAgent sharedBTVCLinkAgent];
          id v6 = *a1;
          *a1 = (id)v5;

          [*a1 activate];
          v9[0] = _NSConcreteStackBlock;
          v9[1] = 3221225472;
          void v9[2] = sub_1004441C0;
          void v9[3] = &unk_1009AE460;
          void v9[4] = a1;
          [*a1 setAdvReportReceiveHandler:v9];
        }
      }
      else
      {
        size_t v8 = qword_100A19FE8;
        if (os_log_type_enabled((os_log_t)qword_100A19FE8, OS_LOG_TYPE_ERROR)) {
          sub_100768B50(v8);
        }
      }
    }
    else
    {
      int v7 = qword_100A19FE8;
      if (os_log_type_enabled((os_log_t)qword_100A19FE8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        int v11 = "activate";
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%s: Bluetooth virtual link controller is disabled", buf, 0xCu);
      }
    }
  }
}

void sub_1004441C0(uint64_t a1, int a2, int a3, uint64_t (*a4)(uint64_t a1, uint64_t (***a2)(void, void, void, void, void, void, void, void, char, void, char, void)), int a5, int a6, int a7, int a8, unsigned __int8 a9, unsigned __int16 a10, unsigned __int8 a11, uint64_t a12, unsigned __int8 a13, uint64_t a14)
{
  char v19 = *(os_unfair_lock_s **)(a1 + 32);
  int v18 = qword_100A19FE8;
  if (os_log_type_enabled((os_log_t)qword_100A19FE8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67111936;
    *(_DWORD *)&uint8_t buf[4] = a2;
    LOWORD(v24) = 1024;
    *(_DWORD *)((char *)&v24 + 2) = a3;
    HIWORD(v24) = 2048;
    char v25 = a4;
    LOWORD(v26) = 1024;
    *(_DWORD *)((char *)&v26 + 2) = a5;
    HIWORD(v26) = 1024;
    LODWORD(v27) = a6;
    WORD2(v27) = 1024;
    *(_DWORD *)((char *)&v27 + 6) = a7;
    WORD5(v27) = 1024;
    HIDWORD(v27) = a8;
    LOWORD(v28) = 1024;
    *(_DWORD *)((char *)&v28 + 2) = a9;
    HIWORD(v28) = 1024;
    int v29 = a10;
    __int16 v30 = 1024;
    int v31 = a11;
    __int16 v32 = 2048;
    uint64_t v33 = a12;
    __int16 v34 = 1024;
    int v35 = a13;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "[BTVCLinkController] Receive ADV report: \n\tEventType:0x%04X, \n\tAddressType:0x%02X, \n\tPeerAddress:%llX, \n\tprimaryPHY:0x%02X, \n\tsecondaryPHY:0x%02X, \n\tadvertisingSID:0x%02X, \n\ttxPower:0x%02X, \n\trssi:0x%02X, \n\tperiodicAdvInterval:0x%02X, \n\tdirectAddressType:0x%02X, \n\tdirectAddress:0x%llX, \n\tDataLength:%d\n", buf, 0x52u);
  }
  *(void *)long long buf = _NSConcreteStackBlock;
  uint64_t v24 = 3221225472;
  char v25 = sub_100444D80;
  int v26 = &unk_1009AE480;
  LOWORD(v29) = a2;
  LOBYTE(v30) = a3;
  HIBYTE(v30) = a5;
  LOBYTE(v31) = a6;
  BYTE1(v31) = a7;
  BYTE2(v31) = a8;
  HIBYTE(v31) = a9;
  HIWORD(v29) = a10;
  LOBYTE(v32) = a11;
  *(void *)&long long v27 = a4;
  *((void *)&v27 + 1) = a12;
  HIBYTE(v32) = a13;
  uint64_t v28 = a14;
  sub_100444CB4(v19 + 2, buf);
}

void sub_1004443C0(id *a1)
{
  uint64_t v2 = qword_100A19FE8;
  if (os_log_type_enabled((os_log_t)qword_100A19FE8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    uint64_t v5 = "invalidate";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v4, 0xCu);
  }
  if (*a1)
  {
    [*a1 invalidate];
    id v3 = *a1;
    *a1 = 0;
  }
}

void sub_100444484(uint64_t a1, uint64_t a2)
{
  sub_100444534(a1 + 8, a2);
  uint64_t v2 = qword_100A19FE8;
  if (os_log_type_enabled((os_log_t)qword_100A19FE8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315138;
    int v4 = "void BT::BTVCLinkController::addEventListener(BTVCLinkControllerListener *)";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v3, 0xCu);
  }
}

void sub_100444534(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v5 = *(char **)(a1 + 8);
  int v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    uint64_t v6 = a2;
    sub_100444E18(a1 + 8, v4, (char *)&v6);
    sub_100061554(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_1004445C0(uint64_t a1, uint64_t a2)
{
  sub_100052718(a1 + 8, a2);
  uint64_t v2 = qword_100A19FE8;
  if (os_log_type_enabled((os_log_t)qword_100A19FE8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315138;
    int v4 = "void BT::BTVCLinkController::removeEventListener(BTVCLinkControllerListener *)";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v3, 0xCu);
  }
}

uint64_t sub_100444670(id *a1)
{
  uint64_t v2 = qword_100A19FE8;
  if (os_log_type_enabled((os_log_t)qword_100A19FE8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    uint64_t v5 = "uint8_t BT::BTVCLinkController::hciReset()";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v4, 0xCu);
  }
  if (*a1) {
    [*a1 reset];
  }
  return 0;
}

uint64_t sub_10044472C(id *a1, uint64_t a2, uint64_t a3)
{
  int v9 = a3;
  __int16 v10 = WORD2(a3);
  uint64_t v5 = +[NSMutableDictionary dictionary];
  uint64_t v6 = +[NSData dataWithBytes:&v9 length:6];
  if (a2 <= 5)
  {
    [v5 setObject:&off_1009E0E78 forKeyedSubscript:@"at"];
    [v5 setObject:v6 forKeyedSubscript:@"pa"];
    if (*a1) {
      [*a1 leSetAdvertisingSetRandomAddress:a2 address:v5];
    }
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 18;
  }

  return v7;
}

void sub_1004447FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100444818(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, unsigned __int8 a11, unsigned __int8 a12, char a13, unsigned __int8 a14, unsigned __int8 a15)
{
  int v18 = +[NSMutableDictionary dictionary];
  char v19 = +[NSNumber numberWithUnsignedShort:a3];
  char v20 = +[NSNumber numberWithUnsignedChar:a12];
  long long v21 = +[NSNumber numberWithUnsignedChar:a14];
  __int16 v22 = +[NSNumber numberWithUnsignedChar:a15];
  __int16 v23 = +[NSNumber numberWithUnsignedChar:a11];
  CFPrefs_GetInt64();
  uint64_t v24 = +[NSNumber numberWithUnsignedChar:196];
  if (a2 <= 5)
  {

    [v18 setObject:v19 forKeyedSubscript:@"et"];
    [v18 setObject:v20 forKeyedSubscript:@"pPHY"];
    [v18 setObject:&off_1009E0E78 forKeyedSubscript:@"sPHY"];
    [v18 setObject:v22 forKeyedSubscript:@"aSID"];
    [v18 setObject:v23 forKeyedSubscript:@"tp"];
    [v18 setObject:v24 forKeyedSubscript:@"rssi"];
    [v18 setObject:&off_1009E0E78 forKeyedSubscript:@"pai"];
    [v18 setObject:&off_1009E0E78 forKeyedSubscript:@"dat"];
    [v18 setObject:&off_1009E0E78 forKeyedSubscript:@"da"];
    if (*a1) {
      [*a1 leSetExtendedAdvertisingParameters:a2 advertisingParameters:v18];
    }
    uint64_t v25 = 0;
    long long v21 = &off_1009E0E78;
  }
  else
  {
    uint64_t v25 = 18;
  }

  return v25;
}

void sub_100444A50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100444AB0(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int16 v10 = +[NSMutableDictionary dictionary];
  int v11 = +[NSNumber numberWithUnsignedChar:a5];
  int v12 = +[NSData dataWithBytes:a6 length:a5];
  if (a2 <= 5)
  {
    [v10 setObject:v11 forKeyedSubscript:@"dtl"];
    [v10 setObject:v12 forKeyedSubscript:@"data"];
    if (*a1) {
      [*a1 leSetExtendedAdvertisingData:a2 advertisingData:v10];
    }
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = 18;
  }

  return v13;
}

void sub_100444B94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100444BBC(id *a1, int a2, uint64_t a3, unsigned __int8 *a4)
{
  if (a3 > 5) {
    return 18;
  }
  uint64_t v20 = v9;
  uint64_t v21 = v8;
  uint64_t v22 = v7;
  uint64_t v23 = v6;
  uint64_t v24 = v5;
  uint64_t v25 = v4;
  uint64_t v26 = v10;
  uint64_t v27 = v11;
  uint64_t result = (uint64_t)*a1;
  if (result)
  {
    if (a2 && a3)
    {
      uint64_t v17 = a3;
      int v18 = a4;
      while (1)
      {
        unsigned int v19 = *v18++;
        if (objc_msgSend(*a1, "isAdvertisingEnabled:", v19, v20, v21, v22, v23, v24, v25, v26, v27)) {
          return 12;
        }
        if (!--v17)
        {
          uint64_t result = (uint64_t)*a1;
          goto LABEL_10;
        }
      }
    }
    else
    {
LABEL_10:
      [(id)result leSetExtendedAdvertisingEnable:a2 != 0 numSets:a3 advertisingHandles:a4];
      return 0;
    }
  }
  return result;
}

uint64_t sub_100444C60(id *a1, int a2)
{
  uint64_t result = (uint64_t)*a1;
  if (result)
  {
    if ([(id)result isScanningEnabled] == a2)
    {
      return 12;
    }
    else
    {
      [*a1 leSetExtendedScanEnable:a2 != 0];
      return 0;
    }
  }
  return result;
}

void sub_100444CB4(os_unfair_lock_s *a1, void *a2)
{
  int v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }
  if (v4)
  {
    uint64_t v6 = v4;
    operator delete(v4);
  }
}

void sub_100444D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100444D80(uint64_t a1, uint64_t (***a2)(void, void, void, void, void, void, void, void, char, void, char, void))
{
  char v6 = *(unsigned char *)(a1 + 67);
  char v5 = *(unsigned char *)(a1 + 66);
  __int16 v4 = *(_WORD *)(a1 + 58);
  char v3 = *(unsigned char *)(a1 + 65);
  return (**a2)(a2, *(unsigned __int16 *)(a1 + 56), *(unsigned __int8 *)(a1 + 60), *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 61), *(unsigned __int8 *)(a1 + 62), *(unsigned __int8 *)(a1 + 63), *(unsigned __int8 *)(a1 + 64), v3, *(void *)(a1 + 40), v6, *(void *)(a1 + 48));
}

char *sub_100444E18(uint64_t a1, char *__src, char *a3)
{
  char v3 = a3;
  __int16 v4 = __src;
  char v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      unsigned int v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      unsigned int v19 = 0;
    }
    uint64_t v20 = &v19[8 * v16];
    std::string __p = v19;
    uint64_t v27 = v20;
    uint64_t v28 = v20;
    int v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        uint64_t v23 = (char *)sub_1000405F8(v8, v22);
        uint64_t v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        uint64_t v27 = v20;
        int v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        uint64_t v27 = v20;
      }
    }
    *(void *)uint64_t v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    __int16 v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__std::string src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    uint64_t v9 = __src + 8;
    uint64_t v10 = v6 - 8;
    uint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)__int16 v4 = *(void *)v3;
  }
  return v4;
}

void sub_100445020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100445058(uint64_t a1, __int16 a2, uint64_t a3)
{
  sub_1004496B0(a1);
  *(_OWORD *)(v6 + 224) = 0u;
  *(unsigned char *)(v6 + 216) = 0;
  *(void *)(v6 + 280) = 0;
  *(void *)(v6 + 328) = 0;
  *(_DWORD *)(v6 + 302) = 0;
  *(_DWORD *)(v6 + 292) = 0;
  *(_OWORD *)(v6 + 240) = 0u;
  *(_OWORD *)(v6 + 252) = 0u;
  *(_WORD *)(v6 + 200) = a2;
  *(void *)(v6 + 208) = a3;
  *(unsigned char *)(v6 + 300) = 0;
  *(unsigned char *)(v6 + 312) = 0;
  *(_DWORD *)(v6 + 316) = 1065353216;
  *(_DWORD *)(v6 + 308) = 150;
  *(_WORD *)(v6 + 322) = 0;
  *(unsigned char *)(v6 + 324) = 0;
  unint64_t v7 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_INFO))
  {
    sub_100474E18(a3, __p);
    if (v11 >= 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136446210;
    uint64_t v13 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Created new stream config for device %{public}s", buf, 0xCu);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  return a1;
}

void sub_1004451B4(_Unwind_Exception *a1)
{
  __int16 v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 232) = v4;
    operator delete(v4);
  }
  sub_1004496F8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004451DC(uint64_t a1)
{
  sub_100447930(a1);
  *(unsigned char *)(a1 + 352) = 0;
  *(void *)(a1 + 344) = 0;
  sub_100446E1C(a1);
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  uint64_t v2 = *(void **)(a1 + 224);
  if (v2)
  {
    *(void *)(a1 + 232) = v2;
    operator delete(v2);
  }

  return sub_1004496F8(a1);
}

uint64_t sub_100445248(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 232);
  if (*(void *)(a1 + 224) == v1) {
    return 0;
  }
  else {
    return *(unsigned int *)(v1 - 4);
  }
}

BOOL sub_100445264(uint64_t a1, int a2)
{
  uint64_t v2 = *(_DWORD **)(a1 + 224);
  char v3 = *(_DWORD **)(a1 + 232);
  if (v2 != v3)
  {
    while (*v2 != a2)
    {
      if (++v2 == v3)
      {
        uint64_t v2 = *(_DWORD **)(a1 + 232);
        return v2 != v3;
      }
    }
  }
  return v2 != v3;
}

void sub_100445298(uint64_t a1, int a2)
{
  __int16 v4 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int16 *)(a1 + 200);
    v18[0] = 67109376;
    v18[1] = a2;
    __int16 v19 = 1024;
    int v20 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Set stream handle %d for a2dpHandle %d", (uint8_t *)v18, 0xEu);
  }
  unint64_t v6 = *(void *)(a1 + 240);
  unint64_t v7 = *(char **)(a1 + 232);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = *(char **)(a1 + 224);
    uint64_t v10 = (v7 - v9) >> 2;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 62) {
      abort();
    }
    uint64_t v12 = v6 - (void)v9;
    if (v12 >> 1 > v11) {
      unint64_t v11 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      unint64_t v14 = (char *)sub_1002C44F0(a1 + 240, v13);
      uint64_t v9 = *(char **)(a1 + 224);
      unint64_t v7 = *(char **)(a1 + 232);
    }
    else
    {
      unint64_t v14 = 0;
    }
    uint64_t v15 = &v14[4 * v10];
    uint64_t v16 = &v14[4 * v13];
    *(_DWORD *)uint64_t v15 = a2;
    uint64_t v8 = v15 + 4;
    while (v7 != v9)
    {
      int v17 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v17;
      v15 -= 4;
    }
    *(void *)(a1 + 224) = v15;
    *(void *)(a1 + 232) = v8;
    *(void *)(a1 + 240) = v16;
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v7 = a2;
    uint64_t v8 = v7 + 4;
  }
  *(void *)(a1 + 232) = v8;
}

uint64_t sub_100445410(uint64_t a1)
{
  uint64_t v2 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int16 *)(a1 + 200);
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Getting current channel info for a2dpHandle %d", (uint8_t *)v5, 8u);
  }
  return a1 + 152;
}

uint64_t sub_1004454BC(uint64_t a1)
{
  uint64_t v2 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(a1 + 156);
    v11[0] = 67109120;
    v11[1] = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Getting supports delay reporting for remote seid %d", (uint8_t *)v11, 8u);
  }
  unint64_t v5 = *(unsigned int *)(a1 + 344);
  if (v5)
  {
    uint64_t v3 = *(void *)(a1 + 360);
    int v6 = *(_DWORD *)(a1 + 156);
    if (*(_DWORD *)(v3 + 4) == v6)
    {
      unint64_t v7 = 0;
      LODWORD(v5) = 1;
LABEL_10:
      LODWORD(v3) = *(unsigned __int8 *)(v3 + 32 * v7 + 24) != 0;
    }
    else
    {
      unint64_t v7 = 0;
      uint64_t v8 = (int *)(v3 + 36);
      while (v5 - 1 != v7)
      {
        int v9 = *v8;
        v8 += 8;
        ++v7;
        if (v9 == v6)
        {
          LODWORD(v5) = v7 < v5;
          goto LABEL_10;
        }
      }
      LODWORD(v5) = 0;
    }
  }
  return v5 & v3;
}

uint64_t sub_1004455D4(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 302) = a2;
  return result;
}

uint64_t sub_1004455DC(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 302);
}

uint64_t sub_1004455E4(uint64_t a1)
{
  int v2 = sub_100476458(*(void *)(a1 + 208));
  uint64_t v3 = 1;
  switch(v2)
  {
    case 0:
      unsigned int v4 = sub_100476054(*(void *)(a1 + 208));
      if (v4 > 0x17) {
        goto LABEL_26;
      }
      if (((1 << v4) & 0x150000) != 0)
      {
        int v9 = qword_100A19E30;
        if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Device type is headset", buf, 2u);
        }
        uint64_t v3 = 1;
      }
      else if (((1 << v4) & 0xA80000) != 0)
      {
        unint64_t v5 = qword_100A19E30;
        if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Device type is speaker", buf, 2u);
        }
        uint64_t v3 = 3;
      }
      else if (((1 << v4) & 0x420000) != 0)
      {
        uint64_t v10 = qword_100A19E30;
        if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          uint64_t v3 = 2;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Device type is carkit", buf, 2u);
        }
        else
        {
          uint64_t v3 = 2;
        }
      }
      else
      {
LABEL_26:
        unint64_t v11 = qword_100A19E30;
        uint64_t v3 = 0;
        if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Device type is unknown", buf, 2u);
          uint64_t v3 = 0;
        }
      }
      uint64_t v12 = qword_100A19E30;
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(*(void *)(a1 + 208), buf);
        unint64_t v13 = SHIBYTE(v23) >= 0 ? buf : *(uint8_t **)buf;
        LODWORD(__p) = 67109378;
        HIDWORD(__p) = v3;
        __int16 v16 = 2082;
        int v17 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "User selected device type is unknown. Returning device type as %d for device %{public}s.", (uint8_t *)&__p, 0x12u);
        if (SHIBYTE(v23) < 0)
        {
          uint64_t v8 = *(void **)buf;
          goto LABEL_19;
        }
      }
      break;
    case 1:
      uint64_t v3 = 2;
      goto LABEL_13;
    case 2:
      goto LABEL_13;
    case 3:
      uint64_t v3 = 4;
      goto LABEL_13;
    case 4:
      uint64_t v3 = 3;
      goto LABEL_13;
    case 5:
      uint64_t v3 = 5;
      goto LABEL_13;
    default:
      uint64_t v3 = 0;
LABEL_13:
      int v6 = qword_100A19E30;
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(*(void *)(a1 + 208), &__p);
        unint64_t v7 = v18 >= 0 ? &__p : (void **)__p;
        *(_DWORD *)long long buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v2;
        __int16 v20 = 1024;
        int v21 = v3;
        __int16 v22 = 2082;
        uint64_t v23 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "User selected device type is %d. Returning device type as %d for device %{public}s.", buf, 0x18u);
        if (v18 < 0)
        {
          uint64_t v8 = __p;
LABEL_19:
          operator delete(v8);
        }
      }
      break;
  }
  return v3;
}

uint64_t sub_100445940(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 176) == 255 && (uint64_t v2 = sub_100445994(a1, 255)) != 0 && sub_100445A2C(v2, *(void *)(v2 + 16))) {
    return 33023;
  }
  else {
    return *(unsigned int *)(a1 + 176);
  }
}

uint64_t sub_100445994(uint64_t a1, int a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 344);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = a1;
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  while (1)
  {
    uint64_t v7 = *(void *)(v4 + 360);
    if (v7)
    {
      uint64_t v8 = *(void *)(v7 + v5 + 16);
      if (v8)
      {
        int v9 = *(unsigned __int8 *)(v8 + 2);
        if (v9 == a2) {
          return v7 + v5;
        }
        if (v9 == 255) {
          break;
        }
      }
    }
LABEL_9:
    ++v6;
    v5 += 32;
    if (v6 >= v2) {
      return 0;
    }
  }
  LOBYTE(a1) = sub_100445A2C(a1, v8);
  if ((a1 & 1) == 0)
  {
    unint64_t v2 = *(unsigned int *)(v4 + 344);
    goto LABEL_9;
  }
  return *(void *)(v4 + 360) + v5;
}

BOOL sub_100445A2C(uint64_t a1, uint64_t a2)
{
  if (a2 && *(unsigned __int8 *)(a2 + 3) > 0xDu)
  {
    unint64_t v2 = *(unsigned char **)(a2 + 8);
    if (*v2 == 76
      && !v2[1]
      && !v2[2]
      && !v2[3]
      && v2[4] == 1
      && v2[5] == 128
      && (char)v2[7] < 0
      && (~v2[9] & 0x84) == 0)
    {
      return 1;
    }
  }
  else
  {
    uint64_t v4 = qword_100A19E30;
    BOOL result = os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    sub_100768BD4(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  return 0;
}

uint64_t sub_100445AE0(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v5 = result;
  int v6 = *(unsigned __int8 *)(a2 + 2);
  if (v6 == 255)
  {
    BOOL result = sub_100445A2C(result, a2);
    if (!result) {
      goto LABEL_6;
    }
    char v7 = -1;
  }
  else
  {
    char v7 = *(unsigned char *)(result + 352) | v6;
  }
  *(unsigned char *)(v5 + 352) = v7;
LABEL_6:
  unint64_t v8 = *(unsigned int *)(v5 + 344);
  if (v8)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 16;
    do
    {
      if (*(_DWORD *)(*(void *)(v5 + 360) + v10 - 12) == a3)
      {
        uint64_t v11 = malloc_type_calloc(1uLL, 0x10uLL, 0x105204037B82EA9uLL);
        *(void *)(*(void *)(v5 + 360) + v10) = v11;
        _OWORD *v11 = *(_OWORD *)a2;
        *(void *)(*(void *)(*(void *)(v5 + 360) + v10) + 8) = malloc_type_calloc(*(unsigned __int8 *)(a2 + 3), 1uLL, 0x100004077774924uLL);
        BOOL result = (uint64_t)memcpy(*(void **)(*(void *)(*(void *)(v5 + 360) + v10) + 8), *(const void **)(a2 + 8), *(unsigned __int8 *)(a2 + 3));
        unint64_t v8 = *(unsigned int *)(v5 + 344);
      }
      ++v9;
      v10 += 32;
    }
    while (v9 < v8);
  }
  return result;
}

uint64_t sub_100445BE8(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  char v7 = qword_100A19E30;
  uint64_t v8 = os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_INFO);
  if (v8)
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = a4;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Parsing Audio Codec ID and information for seid %d", (uint8_t *)&buf, 8u);
  }
  if (a2)
  {
    uint64_t v9 = 0;
    uint64_t v23 = a2;
    do
    {
      uint64_t v10 = (unsigned __int8 *)(a3 + 16 * v9);
      int v11 = *v10;
      if (v11 == 7)
      {
        if (!v10[1])
        {
          memset(&buf, 0, sizeof(buf));
          sub_10004191C(&buf, "Unknown");
          unsigned int v17 = v10[2];
          if (v17 > 1)
          {
            if (v17 == 2)
            {
              sub_100445AE0(a1, (uint64_t)v10, a4);
              char v18 = "MPEG-2,4 AAC";
            }
            else
            {
              if (v17 != 255) {
                goto LABEL_34;
              }
              sub_100445AE0(a1, (uint64_t)v10, a4);
              char v18 = "VENDOR-SPECIFIC";
            }
          }
          else
          {
            if (v10[2])
            {
              if (v17 == 1)
              {
                sub_100445AE0(a1, (uint64_t)v10, a4);
                char v18 = "MPEG-1,2";
                goto LABEL_25;
              }
LABEL_34:
              int v21 = qword_100A19E30;
              if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)uint64_t v25 = 67109120;
                LODWORD(v26) = v17;
                _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Found unknown Audio Codec ID %d", v25, 8u);
              }
LABEL_26:
              __int16 v19 = qword_100A19E30;
              uint64_t v8 = os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT);
              if (v8)
              {
                p_std::string buf = &buf;
                if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)uint64_t v25 = 136446466;
                uint64_t v26 = p_buf;
                __int16 v27 = 1024;
                int v28 = a4;
                _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Audio Codec ID %{public}s for remote SEID %d", v25, 0x12u);
              }
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(buf.__r_.__value_.__l.__data_);
              }
              goto LABEL_32;
            }
            sub_100445AE0(a1, (uint64_t)v10, a4);
            char v18 = "SBC";
          }
LABEL_25:
          std::string::assign(&buf, v18);
          goto LABEL_26;
        }
      }
      else if (v11 == 8)
      {
        unint64_t v12 = *(unsigned int *)(a1 + 344);
        if (v12)
        {
          uint64_t v13 = 0;
          unint64_t v14 = 0;
          uint64_t v15 = *(void *)(a1 + 360);
          do
          {
            if (*(_DWORD *)(v15 + v13 + 4) == a4)
            {
              __int16 v16 = qword_100A19E30;
              uint64_t v8 = os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT);
              if (v8)
              {
                LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
                HIDWORD(buf.__r_.__value_.__r.__words[0]) = a4;
                _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Remote endpoint supports delay reporting (SEID %d)", (uint8_t *)&buf, 8u);
                uint64_t v15 = *(void *)(a1 + 360);
                unint64_t v12 = *(unsigned int *)(a1 + 344);
              }
              *(unsigned char *)(v15 + v13 + 24) = 1;
            }
            ++v14;
            v13 += 32;
          }
          while (v14 < v12);
        }
      }
LABEL_32:
      uint64_t v8 = (uint64_t)sub_100445F5C(v8, (uint64_t)v10);
      ++v9;
    }
    while (v9 != v23);
  }
  return 0;
}

void sub_100445F38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_100445F5C(uint64_t a1, uint64_t a2)
{
  char v4 = 0;
  sub_10001B8E0(&v4);
  nullsub_95(a2);
  sub_10001B910(&v4);
  return sub_10001B8AC(&v4);
}

void sub_100445FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_100445FBC(uint64_t a1, int a2, int a3, int a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  *(_DWORD *)(a1 + 348) = a6;
  *(_DWORD *)(a1 + 344) = a6;
  *(unsigned char *)(a1 + 352) = 0;
  unint64_t v14 = *(void **)(a1 + 360);
  if (v14)
  {
    free(v14);
    unsigned int v15 = *(_DWORD *)(a1 + 344);
  }
  else
  {
    unsigned int v15 = a6;
  }
  __int16 v16 = malloc_type_calloc(v15, 0x20uLL, 0x1020040C75495F1uLL);
  *(void *)(a1 + 360) = v16;
  v16[1] = a3;
  *((void *)v16 + 1) = 1;
  *(unsigned char *)__int16 v16 = 1;
  sub_100445BE8(a1, a6, a5, a3);
  int v17 = sub_100446A7C(a1);
  *(_DWORD *)(a1 + 176) = v17;
  char v18 = (int *)(a1 + 176);
  uint64_t v19 = sub_100445994(a1, v17);
  if (!v19)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
      sub_100768C0C();
    }
    return 1;
  }
  if (!a7)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
      sub_100768CD0();
    }
    return 1;
  }
  uint64_t v20 = v19;
  if (*v18) {
    goto LABEL_7;
  }
  if ((**(unsigned char **)(*(void *)(v19 + 16) + 8) & 0xF0 & **(unsigned char **)(*(void *)(a7 + 16) + 24) & 0xF0) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
      sub_100768D94();
    }
    return 3;
  }
  if ((**(unsigned char **)(*(void *)(v19 + 16) + 8) & 0xF & **(unsigned char **)(*(void *)(a7 + 16) + 24) & 0xF) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
      sub_100768E04();
    }
    return 3;
  }
LABEL_7:
  sub_100446E1C(a1);
  *(_DWORD *)(a1 + 196) = 3;
  int v21 = malloc_type_calloc(3uLL, 0x10uLL, 0x105204037B82EA9uLL);
  *(void *)(a1 + 184) = v21;
  *int v21 = 1;
  *(unsigned char *)(*(void *)(a1 + 184) + 16) = 7;
  *(unsigned char *)(*(void *)(a1 + 184) + 17) = 0;
  *(unsigned char *)(*(void *)(a1 + 184) + 18) = *(_DWORD *)(a1 + 176);
  *(unsigned char *)(*(void *)(a1 + 184) + 19) = *(unsigned char *)(*(void *)(a7 + 16) + 19);
  *(void *)(*(void *)(a1 + 184) + 24) = malloc_type_calloc(*(unsigned __int8 *)(*(void *)(a7 + 16) + 19), 1uLL, 0x100004077774924uLL);
  *(unsigned char *)(*(void *)(a1 + 184) + 32) = 8;
  *(unsigned char *)(a1 + 192) = 1;
  memcpy(*(void **)(*(void *)(a1 + 184) + 24), *(const void **)(*(void *)(a7 + 16) + 24), *(unsigned __int8 *)(*(void *)(a7 + 16) + 19));
  sub_100445298(a1, a4);
  *(_DWORD *)(a1 + 152) = a2;
  *(_DWORD *)(a1 + 156) = a3;
  int v22 = *(_DWORD *)(a1 + 176);
  if (v22 == 33023)
  {
    double v27 = sub_100446E74(a1, 33023);
    *(double *)(a1 + 272) = v27;
    int v28 = qword_100A19E30;
    BOOL v29 = os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT);
    if (v29)
    {
      *(_DWORD *)std::string buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = a3;
      __int16 v75 = 2048;
      *(double *)id v76 = v27 / 1000.0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Accepting remote Vendor-Specific Apple AAC-ELD SEID %u config with sample rate of %2.1f KHz", buf, 0x12u);
    }
    goto LABEL_89;
  }
  if (v22 == 2)
  {
    uint64_t v30 = *(void *)(*(void *)(v20 + 16) + 8);
    char v31 = *(unsigned char *)(v30 + 1);
    int v32 = *(char *)(v30 + 2);
    if (v31)
    {
      if (v32 < 0) {
        double v35 = sub_100446E74(a1, 2);
      }
      else {
        double v35 = 44100.0;
      }
    }
    else if (v32 < 0)
    {
      double v35 = 48000.0;
    }
    else
    {
      uint64_t v33 = qword_100A19E30;
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "AAC-LC set config received without any acceptable sample rate. Using default sample rate instead of rejecting", buf, 2u);
        int v34 = *v18;
      }
      else
      {
        int v34 = 2;
      }
      double v35 = sub_100446E74(a1, v34);
    }
    *(double *)(a1 + 272) = v35;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 184) + 24) + 1) = v35 == 44100.0;
    if (*(double *)(a1 + 272) == 44100.0) {
      char v67 = 4;
    }
    else {
      char v67 = -124;
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 184) + 24) + 2) = v67;
    if (sub_10044760C(a1, *(void *)(*(void *)(v20 + 16) + 8)))
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 184) + 24) + 3) = *(unsigned char *)(*(void *)(*(void *)(v20 + 16) + 8)
                                                                             + 3);
      *(unsigned char *)(*(void *)(*(void *)(a1 + 184) + 24) + 4) = *(unsigned char *)(*(void *)(*(void *)(v20 + 16) + 8)
                                                                             + 4);
      *(unsigned char *)(*(void *)(*(void *)(a1 + 184) + 24) + 5) = *(unsigned char *)(*(void *)(*(void *)(v20 + 16) + 8)
                                                                             + 5);
    }
    int v68 = qword_100A19E30;
    BOOL v29 = os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT);
    if (v29)
    {
      double v69 = *(double *)(a1 + 272) / 1000.0;
      *(_DWORD *)std::string buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = a3;
      __int16 v75 = 2048;
      *(double *)id v76 = v69;
      _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "Accepting remote AAC-LC SEID %u config with sample rate of %2.1f KHz\n", buf, 0x12u);
    }
LABEL_89:
    sub_100445F5C(v29, *(void *)(a1 + 184) + 16);
    return 0;
  }
  if (v22)
  {
    double v36 = sub_100446E74(a1, v22);
    *(double *)(a1 + 272) = v36;
    char v37 = qword_100A19E30;
    BOOL v38 = os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR);
    if (v38)
    {
      int v70 = *v18;
      *(_DWORD *)std::string buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = v70;
      __int16 v75 = 1024;
      *(_DWORD *)id v76 = a3;
      *(_WORD *)&v76[4] = 2048;
      *(double *)&v76[6] = v36 / 1000.0;
      _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "Accepting remote UNKNOWN A2DP codec %x SEID %u config with sample rate of %2.1f KHz", buf, 0x18u);
    }
    sub_100445F5C(v38, *(void *)(a1 + 184) + 16);
    uint64_t result = os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_FAULT);
    if (result)
    {
      sub_100768E74();
      return 0;
    }
  }
  else
  {
    char v23 = **(unsigned char **)(*(void *)(v20 + 16) + 8);
    int v24 = v23 & 0x30;
    if (v24 == 48)
    {
      double v25 = sub_100446E74(a1, 0);
    }
    else
    {
      BOOL v39 = (v23 & 0x20) == 0;
      if (v24)
      {
        double v25 = dbl_1007BEA80[v39];
      }
      else
      {
        uint64_t v40 = qword_100A19E30;
        if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "SBC set config received without any acceptable sample rate. Using default sample rate instead of rejecting", buf, 2u);
          int v41 = *v18;
        }
        else
        {
          int v41 = 0;
        }
        double v25 = sub_100446E74(a1, v41);
      }
    }
    *(double *)(a1 + 272) = v25;
    if (v25 == 44100.0) {
      char v42 = 33;
    }
    else {
      char v42 = 17;
    }
    **(unsigned char **)(*(void *)(a1 + 184) + 24) = v42;
    if (*(double *)(a1 + 272) == 44100.0) {
      unsigned int v43 = 53;
    }
    else {
      unsigned int v43 = 48;
    }
    *(_DWORD *)(a1 + 264) = v43;
    int v73 = 0;
    uint64_t v44 = sub_100017768();
    sub_10004191C(buf, "A2DP");
    sub_10004191C(__p, "SBCBitpool");
    int v45 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v44 + 128))(v44, buf, __p, &v73);
    if (v72 < 0) {
      operator delete(__p[0]);
    }
    if ((v76[13] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v45)
    {
      int v46 = v73;
      __int16 v47 = qword_100A19E30;
      if ((v73 - 251) > 0xFFFFFF06)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v46;
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "Warning: Setting user defined SBC Bitpool value to %d", buf, 8u);
          int v46 = v73;
        }
        *(_DWORD *)(a1 + 264) = v46;
      }
      else if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
      {
        sub_100768F58(v47, v48, v49, v50, v51, v52, v53, v54);
      }
    }
    else
    {
      uint64_t v55 = sub_100035F54();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v55 + 384))(v55))
      {
        long long v56 = qword_100A19E30;
        if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "Adjusting bitpool if needed - we are Peripheral", buf, 2u);
        }
        sub_10044731C(a1);
      }
    }
    sub_1004474B4(a1);
    uint64_t v57 = *(void *)(v20 + 16);
    unsigned int v58 = *(unsigned __int8 *)(*(void *)(v57 + 8) + 2);
    if (v43 >= v58)
    {
      if (*(_DWORD *)(a1 + 264) < v58)
      {
        long long v60 = qword_100A19E30;
        if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v58;
          _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "Warning: Increasing SBC Bitpool to %d based on sink's Minimum Bitpool Value", buf, 8u);
          uint64_t v57 = *(void *)(v20 + 16);
          unsigned int v58 = *(unsigned __int8 *)(*(void *)(v57 + 8) + 2);
        }
        *(_DWORD *)(a1 + 264) = v58;
      }
    }
    else
    {
      long long v59 = qword_100A19E30;
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v58;
        _os_log_error_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_ERROR, "Ignoring sink's SBC Minimum Bitpool Value of %d because it is too high", buf, 8u);
        uint64_t v57 = *(void *)(v20 + 16);
      }
    }
    unsigned int v61 = *(unsigned __int8 *)(*(void *)(v57 + 8) + 3);
    if (v61 > 1)
    {
      if (*(_DWORD *)(a1 + 264) > v61)
      {
        long long v62 = qword_100A19E30;
        if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v61;
          _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "Warning: Reducing SBC Bitpool to %d based on sink's Maximum Bitpool Value", buf, 8u);
          unsigned int v61 = *(unsigned __int8 *)(*(void *)(*(void *)(v20 + 16) + 8) + 3);
        }
        *(_DWORD *)(a1 + 264) = v61;
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
    {
      sub_100768EEC();
    }
    long long v63 = qword_100A19E30;
    BOOL v64 = os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v64)
    {
      int v65 = *(_DWORD *)(a1 + 264);
      double v66 = *(double *)(a1 + 272);
      *(_DWORD *)std::string buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = a3;
      __int16 v75 = 1024;
      *(_DWORD *)id v76 = v65;
      *(_WORD *)&v76[4] = 2048;
      *(double *)&v76[6] = v66 / 1000.0;
      _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "Accepting remote SBC SEID %u config with bitpool %d and sample rate of %2.1f KHz", buf, 0x18u);
      return 0;
    }
  }
  return result;
}

void sub_100446A40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100446A7C(uint64_t a1)
{
  char v18 = 0;
  uint64_t v2 = sub_100017768();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v2 + 8))(v2)) {
    goto LABEL_8;
  }
  uint64_t v3 = sub_100017768();
  sub_10004191C(buf, "A2DP");
  sub_10004191C(__p, "DisableAAC");
  (*(void (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v3 + 72))(v3, buf, __p, &v18);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v23) < 0) {
    operator delete(*(void **)buf);
  }
  if (v18)
  {
    uint64_t v4 = 0;
    char v18 = 1;
  }
  else
  {
LABEL_8:
    uint64_t v5 = sub_100035F54();
    char v18 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 784))(v5);
    if (v18) {
      uint64_t v4 = 0;
    }
    else {
      uint64_t v4 = *(unsigned char *)(a1 + 352) & 2;
    }
  }
  unsigned __int8 v15 = 0;
  uint64_t v6 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 344))(v6))
  {
    int v7 = 1;
    unsigned __int8 v15 = 1;
  }
  else
  {
    int v7 = 0;
  }
  uint64_t v8 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 8))(v8))
  {
    uint64_t v9 = sub_100017768();
    sub_10004191C(buf, "A2DP");
    sub_10004191C(__p, "DisableAACELD");
    (*(void (**)(uint64_t, unsigned char *, void **, unsigned __int8 *))(*(void *)v9 + 72))(v9, buf, __p, &v15);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v23) < 0) {
      operator delete(*(void **)buf);
    }
    int v7 = v15;
  }
  if (!v7)
  {
    if (*(unsigned char *)(a1 + 352))
    {
      uint64_t v12 = sub_100445994(a1, 255);
      if (v12)
      {
        if (sub_100445A2C(v12, *(void *)(v12 + 16))) {
          uint64_t v4 = 33023;
        }
        else {
          uint64_t v4 = v4;
        }
      }
    }
  }
  uint64_t v10 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    if ((int)v4 > 254)
    {
      if (v4 == 255)
      {
        int v11 = "Unknown AVDTP_CODEC_VENDOR_SPECIFIC";
        goto LABEL_37;
      }
      if (v4 == 33023)
      {
        int v11 = "AVDTP_CODEC_APPLE_AACELD";
        goto LABEL_37;
      }
    }
    else
    {
      if (!v4)
      {
        int v11 = "AVDTP_CODEC_SBC";
        goto LABEL_37;
      }
      if (v4 == 2)
      {
        int v11 = "AVDTP_CODEC_MPEG_AAC";
LABEL_37:
        int v13 = *(_DWORD *)(a1 + 348);
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = v11;
        __int16 v20 = 1024;
        int v21 = v4;
        __int16 v22 = 1024;
        int v23 = v13;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Selected preferred codec %s (0x%0x) out of %d available endpoints", buf, 0x18u);
        return v4;
      }
    }
    int v11 = "Unknown AVDTP codec";
    goto LABEL_37;
  }
  return v4;
}

void sub_100446DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_100446E1C(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 184);
  if (v2)
  {
    if (v2[1])
    {
      free(v2[1]);
      uint64_t v2 = *(void ***)(a1 + 184);
    }
    if (v2[3])
    {
      free(v2[3]);
      uint64_t v2 = *(void ***)(a1 + 184);
    }
    free(v2);
    *(void *)(a1 + 184) = 0;
  }
}

double sub_100446E74(uint64_t a1, int a2)
{
  unsigned int v26 = 0;
  uint64_t v4 = sub_100017768();
  sub_10004191C(buf, "A2DP");
  sub_10004191C(__p, "SampleRate");
  int v5 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, unsigned int *))(*(void *)v4 + 128))(v4, buf, __p, &v26);
  if (v25 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v28) < 0)
  {
    operator delete(*(void **)buf);
    if (!v5) {
      goto LABEL_14;
    }
  }
  else if (!v5)
  {
    goto LABEL_14;
  }
  uint64_t v6 = v26;
  if (v26 != 48000 && v26 != 44100)
  {
    uint64_t v9 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
      sub_100768F90(v6, v9, v10, v11, v12, v13, v14, v15);
    }
LABEL_14:
    uint64_t v35 = 0;
    long long v34 = 0u;
    memset(v33, 0, sizeof(v33));
    long long v31 = 0u;
    *(_OWORD *)int v32 = 0u;
    long long v29 = 0u;
    *(_OWORD *)uint64_t v30 = 0u;
    *(_OWORD *)std::string buf = 0u;
    long long v28 = 0u;
    sub_1006161E0((uint64_t)&buf[1]);
    BYTE2(v28) = 0;
    BYTE4(v28) = 0;
    BYTE2(v30[0]) = 0;
    BYTE4(v30[0]) = 0;
    DWORD1(v33[1]) = 0;
    long long v29 = 0uLL;
    *((void *)&v28 + 1) = 0;
    LOBYTE(v30[0]) = 0;
    long long v31 = 0uLL;
    v30[1] = 0;
    LOBYTE(v32[0]) = 0;
    memset(v33, 0, 19);
    v32[1] = 0;
    BYTE8(v33[1]) = 1;
    BYTE2(v35) = 0;
    *(void *)((char *)&v33[1] + 14) = 0;
    *(void *)((char *)&v33[1] + 9) = 0;
    long long v34 = 0uLL;
    *((void *)&v33[2] + 1) = 0;
    LOBYTE(v35) = 0;
    sub_1004783B8(*(void *)(a1 + 208), (uint64_t)buf);
    char v23 = 0;
    uint64_t v16 = sub_100017768();
    sub_10004191C(__p, "A2DP");
    sub_10004191C(v21, "Default48KHz");
    (*(void (**)(uint64_t, void **, void **, char *))(*(void *)v16 + 72))(v16, __p, v21, &v23);
    if (v22 < 0) {
      operator delete(v21[0]);
    }
    if (v25 < 0) {
      operator delete(__p[0]);
    }
    if (v23)
    {
      char v17 = qword_100A19E30;
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Warning: GetPreferredSampleRate: Defaulting to 48 KHz based on defaults write - using denylist instead of allowlist", (uint8_t *)__p, 2u);
      }
      double v8 = 48000.0;
      if (a2 != 2) {
        goto LABEL_30;
      }
      if (!BYTE8(v34)) {
        goto LABEL_30;
      }
      char v18 = qword_100A19E30;
      double v8 = 44100.0;
      if (!os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_30;
      }
      LOWORD(__p[0]) = 0;
      uint64_t v19 = "GetPreferredSampleRate: Reducing sample rate - Device is in 48 KHz denylist";
    }
    else if (BYTE9(v34) || sub_100478AF4(*(void *)(a1 + 208)))
    {
      char v18 = qword_100A19E30;
      double v8 = 48000.0;
      if (!os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
      {
LABEL_30:
        if (SHIBYTE(v33[0]) < 0) {
          operator delete(v32[1]);
        }
        if (SHIBYTE(v31) < 0) {
          operator delete(v30[1]);
        }
        if (SHIBYTE(v29) < 0) {
          operator delete(*((void **)&v28 + 1));
        }
        nullsub_95(&buf[1]);
        return v8;
      }
      LOWORD(__p[0]) = 0;
      uint64_t v19 = "GetPreferredSampleRate: Device is in 48 KHz allowlist";
    }
    else
    {
      char v18 = qword_100A19E30;
      double v8 = 44100.0;
      if (!os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_30;
      }
      LOWORD(__p[0]) = 0;
      uint64_t v19 = "GetPreferredSampleRate: Reducing sample rate - Device is NOT in 48 KHz allowlist";
    }
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v19, (uint8_t *)__p, 2u);
    goto LABEL_30;
  }
  int v7 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Warning: GetPreferredSampleRate: Setting user defined A2DP Sample Rate to %d Hz", buf, 8u);
    LODWORD(v6) = v26;
  }
  return (double)v6;
}

void sub_100447298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  sub_100276384((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_10044731C(uint64_t a1)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AE4A0);
  }
  int v2 = sub_100040454((uint64_t)off_1009F7EF8);
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009AE4C0);
  }
  __int16 v13 = 0;
  unsigned int v3 = sub_10004014C((uint64_t)off_1009F7ED8) + v2;
  __int16 v12 = 0;
  char v11 = 0;
  int v10 = 0;
  uint64_t v4 = sub_10003FFD4();
  (*(void (**)(uint64_t, char *, __int16 *, char *, __int16 *, char *, int *))(*(void *)v4 + 48))(v4, (char *)&v13 + 1, &v13, (char *)&v12 + 1, &v12, &v11, &v10);
  if (v3 > 2 || v3 == 2 && HIBYTE(v13))
  {
    int v5 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Adjusting SBC bitpool to to 37 either due to > 2 Hid's or wifi state is 2.4 Ghz with >1 Hid", buf, 2u);
    }
    int v6 = 37;
LABEL_11:
    *(_DWORD *)(a1 + 264) = v6;
    return;
  }
  if (HIBYTE(v13))
  {
    int v7 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)double v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Adjusting SBC bitpool to 42, wifi state is 2.4 Ghz", v8, 2u);
    }
    int v6 = 42;
    goto LABEL_11;
  }
}

uint64_t sub_1004474B4(uint64_t a1)
{
  uint64_t v13 = 0;
  long long v12 = 0u;
  memset(v11, 0, sizeof(v11));
  long long v9 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v7 = 0u;
  *(_OWORD *)double v8 = 0u;
  long long v5 = 0u;
  *(_OWORD *)int v6 = 0u;
  sub_1006161E0((uint64_t)&v5 + 1);
  BYTE2(v6[0]) = 0;
  BYTE4(v6[0]) = 0;
  BYTE2(v8[0]) = 0;
  BYTE4(v8[0]) = 0;
  DWORD1(v11[1]) = 0;
  long long v7 = 0uLL;
  v6[1] = 0;
  LOBYTE(v8[0]) = 0;
  long long v9 = 0uLL;
  v8[1] = 0;
  LOBYTE(__p[0]) = 0;
  memset(v11, 0, 19);
  __p[1] = 0;
  BYTE8(v11[1]) = 1;
  BYTE2(v13) = 0;
  *(void *)((char *)&v11[1] + 14) = 0;
  *(void *)((char *)&v11[1] + 9) = 0;
  long long v12 = 0uLL;
  *((void *)&v11[2] + 1) = 0;
  LOBYTE(v13) = 0;
  uint64_t v2 = *(void *)(a1 + 208);
  if (v2)
  {
    if (sub_1004783B8(v2, (uint64_t)&v5))
    {
      char v3 = BYTE12(v11[1]);
      if (HIDWORD(v11[1]))
      {
        *(_DWORD *)(a1 + 264) = HIDWORD(v11[1]);
        *(unsigned char *)(*(void *)(*(void *)(a1 + 184) + 24) + 3) = v3;
      }
    }
  }
  if (SHIBYTE(v11[0]) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(v8[1]);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(v6[1]);
  }
  return nullsub_95((char *)&v5 + 1);
}

void sub_1004475F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10044760C(uint64_t a1, uint64_t a2)
{
  v6[0] = 0;
  v6[1] = 0;
  unint64_t v7 = 0;
  sub_1004491C0(a1, a2, (uint64_t)v6);
  unsigned int v2 = sub_100448918();
  BOOL v3 = v7 >> 8 <= 0x176 || v7 / 0x3E8 > v2;
  uint64_t v4 = !v3;
  if (v3 && os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
    sub_100768FFC();
  }
  return v4;
}

uint64_t sub_1004476BC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  *(_DWORD *)(a1 + 348) = a3;
  *(_DWORD *)(a1 + 344) = 0;
  unsigned int v5 = 0;
  if (a3)
  {
    uint64_t v6 = a3;
    unint64_t v7 = (unsigned char *)(a2 + 3);
    do
    {
      if (*(v7 - 1) != 255 && !*(v7 - 3) && *(v7 - 2) == 1 && !*v7) {
        *(_DWORD *)(a1 + 344) = ++v5;
      }
      v7 += 4;
      --v6;
    }
    while (v6);
  }
  *(unsigned char *)(a1 + 352) = 0;
  double v8 = *(void **)(a1 + 360);
  if (v8)
  {
    free(v8);
    unsigned int v5 = *(_DWORD *)(a1 + 344);
  }
  *(void *)(a1 + 360) = malloc_type_calloc(v5, 0x20uLL, 0x1020040C75495F1uLL);
  long long v9 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_INFO))
  {
    int v10 = *(_DWORD *)(a1 + 344);
    *(_DWORD *)std::string buf = 67109120;
    int v20 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Available endpoints: %d", buf, 8u);
  }
  unint64_t v11 = *(unsigned int *)(a1 + 348);
  if (v11)
  {
    unint64_t v12 = 0;
    unsigned int v13 = 0;
    uint64_t v14 = (unsigned char *)(a2 + 3);
    do
    {
      int v15 = *(v14 - 1);
      if (v15 != 255 && !*(v14 - 3) && *(v14 - 2) == 1 && !*v14)
      {
        uint64_t v16 = *(void *)(a1 + 360) + 32 * v13;
        *(_DWORD *)(v16 + 4) = v15;
        *(void *)(v16 + 8) = 1;
        *(unsigned char *)uint64_t v16 = 0;
        char v17 = qword_100A19E30;
        if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 67111168;
          int v20 = v12;
          __int16 v21 = 1024;
          int v22 = v15;
          __int16 v23 = 1024;
          int v24 = 0;
          __int16 v25 = 1024;
          int v26 = 1;
          __int16 v27 = 1024;
          unsigned int v28 = v13;
          __int16 v29 = 1024;
          int v30 = v15;
          __int16 v31 = 1024;
          int v32 = 0;
          __int16 v33 = 1024;
          int v34 = 1;
          __int16 v35 = 1024;
          int v36 = 0;
          _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "SaveDiscoveredPeerEndpoints Current Record = %d, seid = %d, inUse = %d, endpointType = %d, Endpoint saved: streamEndpointInfo = %d, seid = %d, inUse = %d, endpointType = %d, queryDone = %d", buf, 0x38u);
          unint64_t v11 = *(unsigned int *)(a1 + 348);
        }
        ++v13;
      }
      ++v12;
      v14 += 4;
    }
    while (v12 < v11);
  }
  return 0;
}

void sub_100447930(uint64_t a1)
{
  unint64_t v2 = *(unsigned int *)(a1 + 344);
  BOOL v3 = *(char **)(a1 + 360);
  if (v2)
  {
    unint64_t v4 = 0;
    uint64_t v5 = 16;
    uint64_t v6 = v3;
    do
    {
      if (v6)
      {
        uint64_t v7 = *(void *)&v6[v5];
        if (v7)
        {
          if (*(void *)(v7 + 8))
          {
            free(*(void **)(v7 + 8));
            BOOL v3 = *(char **)(a1 + 360);
          }
          free(*(void **)&v3[v5]);
          BOOL v3 = *(char **)(a1 + 360);
          *(void *)&v3[v5] = 0;
          unint64_t v2 = *(unsigned int *)(a1 + 344);
          uint64_t v6 = v3;
        }
      }
      ++v4;
      v5 += 32;
    }
    while (v4 < v2);
  }
  double v8 = (void *)(a1 + 344);
  if (v3) {
    free(v3);
  }
  void *v8 = 0;
  v8[1] = 0;
  void v8[2] = 0;
}

uint64_t sub_1004479CC(uint64_t a1, uint64_t a2)
{
  int v4 = sub_100446A7C(a1);
  *(_DWORD *)(a1 + 176) = v4;
  uint64_t v5 = sub_100445994(a1, v4);
  if (!v5)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
      sub_100769064();
    }
    return 0;
  }
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
      sub_1007690D0();
    }
    return 0;
  }
  uint64_t v6 = v5;
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(v5 + 4);
  sub_100446E1C(a1);
  *(_DWORD *)(a1 + 196) = 3;
  uint64_t v7 = malloc_type_calloc(3uLL, 0x10uLL, 0x105204037B82EA9uLL);
  *(void *)(a1 + 184) = v7;
  *uint64_t v7 = 1;
  *(unsigned char *)(*(void *)(a1 + 184) + 16) = 7;
  *(unsigned char *)(*(void *)(a1 + 184) + 17) = 0;
  *(unsigned char *)(*(void *)(a1 + 184) + 18) = *(_DWORD *)(a1 + 176);
  *(unsigned char *)(*(void *)(a1 + 184) + 19) = *(unsigned char *)(*(void *)(a2 + 16) + 19);
  *(void *)(*(void *)(a1 + 184) + 24) = malloc_type_calloc(*(unsigned __int8 *)(*(void *)(a2 + 16) + 19), 1uLL, 0x100004077774924uLL);
  *(unsigned char *)(*(void *)(a1 + 184) + 32) = 8;
  *(unsigned char *)(a1 + 192) = 1;
  memcpy(*(void **)(*(void *)(a1 + 184) + 24), *(const void **)(*(void *)(a2 + 16) + 24), *(unsigned __int8 *)(*(void *)(a2 + 16) + 19));
  double v8 = sub_100446E74(a1, *(_DWORD *)(a1 + 176));
  *(double *)(a1 + 272) = v8;
  int v9 = *(_DWORD *)(a1 + 176);
  switch(v9)
  {
    case 255:
      uint64_t v23 = qword_100A19E30;
      BOOL v24 = os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT);
      if (!v24)
      {
LABEL_61:
        sub_100445F5C(v24, *(void *)(a1 + 184) + 16);
        return *(void *)(a1 + 184);
      }
      int v25 = *(_DWORD *)(a1 + 156);
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v25;
      int v26 = "Selecting remote Vendor-Specific A2DP SEID %u";
      goto LABEL_31;
    case 2:
      *(unsigned char *)(*(void *)(*(void *)(a1 + 184) + 24) + 1) = v8 == 44100.0;
      if (*(double *)(a1 + 272) == 44100.0) {
        char v27 = 4;
      }
      else {
        char v27 = -124;
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 184) + 24) + 2) = v27;
      if (sub_10044760C(a1, *(void *)(*(void *)(v6 + 16) + 8)))
      {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 184) + 24) + 3) = *(unsigned char *)(*(void *)(*(void *)(v6 + 16) + 8)
                                                                               + 3);
        *(unsigned char *)(*(void *)(*(void *)(a1 + 184) + 24) + 4) = *(unsigned char *)(*(void *)(*(void *)(v6 + 16) + 8)
                                                                               + 4);
        *(unsigned char *)(*(void *)(*(void *)(a1 + 184) + 24) + 5) = *(unsigned char *)(*(void *)(*(void *)(v6 + 16) + 8)
                                                                               + 5);
      }
      uint64_t v23 = qword_100A19E30;
      BOOL v24 = os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT);
      if (!v24) {
        goto LABEL_61;
      }
      int v28 = *(_DWORD *)(a1 + 156);
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v28;
      int v26 = "Selecting remote AAC SEID %u";
LABEL_31:
      __int16 v29 = v23;
      uint32_t v30 = 8;
LABEL_60:
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, v26, buf, v30);
      goto LABEL_61;
    case 0:
      if (v8 == 44100.0) {
        unsigned int v10 = 53;
      }
      else {
        unsigned int v10 = 48;
      }
      *(_DWORD *)(a1 + 264) = v10;
      int v48 = 0;
      uint64_t v11 = sub_100017768();
      sub_10004191C(buf, "A2DP");
      sub_10004191C(__p, "SBCBitpool");
      int v12 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v11 + 128))(v11, buf, __p, &v48);
      if (v47 < 0) {
        operator delete(__p[0]);
      }
      if (v52 < 0) {
        operator delete(*(void **)buf);
      }
      if (v12)
      {
        int v13 = v48;
        uint64_t v14 = qword_100A19E30;
        if ((v48 - 251) > 0xFFFFFF06)
        {
          if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v13;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Warning: Setting user defined SBC Bitpool value to %d", buf, 8u);
            int v13 = v48;
          }
          *(_DWORD *)(a1 + 264) = v13;
        }
        else if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
        {
          sub_100768F58(v14, v15, v16, v17, v18, v19, v20, v21);
        }
      }
      else
      {
        uint64_t v31 = sub_100035F54();
        if ((*(unsigned int (**)(uint64_t))(*(void *)v31 + 384))(v31))
        {
          int v32 = qword_100A19E30;
          if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Adjusting bitpool if needed - we are Central", buf, 2u);
          }
          sub_10044731C(a1);
        }
      }
      uint64_t v33 = *(void *)(v6 + 16);
      unsigned int v34 = *(unsigned __int8 *)(*(void *)(v33 + 8) + 2);
      if (v10 >= v34)
      {
        if (*(_DWORD *)(a1 + 264) < v34)
        {
          int v36 = qword_100A19E30;
          if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v34;
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Warning: Increasing SBC Bitpool to %d based on sink's Minimum Bitpool Value", buf, 8u);
            uint64_t v33 = *(void *)(v6 + 16);
            unsigned int v34 = *(unsigned __int8 *)(*(void *)(v33 + 8) + 2);
          }
          *(_DWORD *)(a1 + 264) = v34;
        }
      }
      else
      {
        __int16 v35 = qword_100A19E30;
        if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v34;
          _os_log_error_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "Ignoring sink's SBC Minimum Bitpool Value of %d because it is too high", buf, 8u);
          uint64_t v33 = *(void *)(v6 + 16);
        }
      }
      unsigned int v37 = *(unsigned __int8 *)(*(void *)(v33 + 8) + 3);
      if (v37 > 1)
      {
        if (*(_DWORD *)(a1 + 264) > v37)
        {
          BOOL v39 = qword_100A19E30;
          if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v37;
            _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Warning: Reducing SBC Bitpool to %d based on sink's Maximum Bitpool Value", buf, 8u);
            uint64_t v33 = *(void *)(v6 + 16);
            unsigned int v37 = *(unsigned __int8 *)(*(void *)(v33 + 8) + 3);
          }
          *(_DWORD *)(a1 + 264) = v37;
        }
      }
      else
      {
        BOOL v38 = qword_100A19E30;
        if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v37;
          _os_log_error_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "Ignoring sink's SBC Maximum Bitpool Value of %d because it is too low", buf, 8u);
          uint64_t v33 = *(void *)(v6 + 16);
        }
      }
      uint64_t v40 = *(void *)(*(void *)(a1 + 184) + 24);
      unsigned int v41 = *(unsigned __int8 *)(*(void *)(v33 + 8) + 2);
      if (*(unsigned __int8 *)(v40 + 2) < v41)
      {
        *(unsigned char *)(v40 + 2) = v41;
        uint64_t v40 = *(void *)(*(void *)(a1 + 184) + 24);
      }
      *(unsigned char *)(v40 + 3) = *(_DWORD *)(a1 + 264);
      if (*(double *)(a1 + 272) == 44100.0) {
        char v42 = 33;
      }
      else {
        char v42 = 17;
      }
      **(unsigned char **)(*(void *)(a1 + 184) + 24) = v42;
      uint64_t v43 = qword_100A19E30;
      BOOL v24 = os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT);
      if (!v24) {
        goto LABEL_61;
      }
      int v44 = *(_DWORD *)(a1 + 156);
      int v45 = *(_DWORD *)(a1 + 264);
      *(_DWORD *)std::string buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v44;
      __int16 v50 = 1024;
      int v51 = v45;
      int v26 = "Selecting remote SBC SEID %u with bitpool %d";
      __int16 v29 = v43;
      uint32_t v30 = 14;
      goto LABEL_60;
  }
  return *(void *)(a1 + 184);
}

void sub_1004480CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100448108(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 344);
  if (!v1) {
    return 255;
  }
  int v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = *(void *)(a1 + 360);
  uint64_t v6 = 32 * v1;
  while (*(unsigned char *)(v5 + v4))
  {
    v4 += 32;
    ++v3;
    if (v6 == v4) {
      return 255;
    }
  }
  *(unsigned char *)(v5 + v4) = 1;
  double v8 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEBUG))
  {
    int v9 = *(_DWORD *)(v5 + v4 + 4);
    v10[0] = 67109632;
    v10[1] = v3;
    __int16 v11 = 1024;
    int v12 = v9;
    __int16 v13 = 1024;
    int v14 = 1;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "getNextSeidForGetCapQuery Position: %d seid: %d queryDone %d", (uint8_t *)v10, 0x14u);
    uint64_t v5 = *(void *)(a1 + 360);
  }
  return *(unsigned int *)(v5 + v4 + 4);
}

uint64_t sub_100448228(uint64_t a1)
{
  uint64_t v2 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v2 + 792))(v2, 5))
  {
    int v3 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 67109120;
      unsigned int v14 = 60;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "A2DP Latency = %d ms for constant low latency", (uint8_t *)&v13, 8u);
    }
    return 60000;
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 208);
    if (v5
      && sub_100478B2C(v5, 12)
      && (sub_100478B2C(*(void *)(a1 + 208), 13) & 1) == 0
      && !*(_DWORD *)(a1 + 292))
    {
      *(_DWORD *)(a1 + 292) = 150000;
    }
    uint64_t v4 = *(unsigned int *)(a1 + 292);
    if (v4)
    {
      int v6 = *(unsigned __int8 *)(a1 + 304);
      uint64_t v7 = qword_100A19E30;
      BOOL v8 = os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT);
      if (v6)
      {
        if (v8)
        {
          int v13 = 67109120;
          unsigned int v14 = v4;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "A2DP Latency = %d ms (DelayReport from accessory)", (uint8_t *)&v13, 8u);
          return *(unsigned int *)(a1 + 292);
        }
      }
      else
      {
        if (v8)
        {
          unsigned int v11 = *(double *)(a1 + 280);
          int v13 = 67109632;
          unsigned int v14 = (v4 + v11) / 0x3E8;
          __int16 v15 = 1024;
          unsigned int v16 = v4 / 0x3E8;
          __int16 v17 = 1024;
          unsigned int v18 = v11 / 0x3E8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "A2DP Latency = %d ms (%d ms DelayReport from accessory + %d ms RTP blocking)", (uint8_t *)&v13, 0x14u);
          LODWORD(v4) = *(_DWORD *)(a1 + 292);
        }
        return (*(double *)(a1 + 280) + (double)v4);
      }
    }
    else
    {
      int v9 = qword_100A19E30;
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v10 = *(_DWORD *)(a1 + 288) / 0x3E8u;
        int v13 = 67109120;
        unsigned int v14 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "A2DP Latency = %d ms (estimate) calculated based on RTP packet interval", (uint8_t *)&v13, 8u);
      }
      return *(unsigned int *)(a1 + 288);
    }
  }
  return v4;
}

void sub_1004484B4(uint64_t a1, int a2)
{
  uint64_t v4 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Setting stream config delay report latency for %d", (uint8_t *)v5, 8u);
  }
  *(_DWORD *)(a1 + 292) = a2;
}

void sub_100448568(uint64_t a1, int a2)
{
  uint64_t v4 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = "not supported";
    if (a2) {
      uint64_t v5 = "supported";
    }
    int v6 = 136315138;
    uint64_t v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Setting absolute volume support to %s", (uint8_t *)&v6, 0xCu);
  }
  *(unsigned char *)(a1 + 300) = a2;
}

void sub_100448634(uint64_t a1, int a2)
{
  uint64_t v4 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_INFO))
  {
    int v8 = 67109120;
    int v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Reported MTU = %d", (uint8_t *)&v8, 8u);
  }
  if (a2 >= 1004) {
    a2 = 1004;
  }
  if (a2 >= 680)
  {
    uint64_t v5 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 96))(v5)) {
      a2 = 679;
    }
  }
  int v6 = a2 - 16;
  *(_DWORD *)(a1 + 248) = v6;
  uint64_t v7 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_INFO))
  {
    int v8 = 67109120;
    int v9 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Setting RTP frame length to %d", (uint8_t *)&v8, 8u);
  }
}

void sub_100448780(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 264);
  *(unsigned char *)(a2 + 2) = v2;
  unsigned int v3 = 2 * v2 + 13;
  double v4 = *(double *)(a1 + 272);
  *(_DWORD *)(a1 + 252) = v3;
  *(_DWORD *)(a1 + 256) = (v4 * (double)(8 * v3) * 0.0078125 / 1000.0);
  unsigned int v5 = *(_DWORD *)(a1 + 248);
  if (v5 / v3 >= 0xC) {
    unsigned int v6 = 12;
  }
  else {
    unsigned int v6 = v5 / v3;
  }
  *(_DWORD *)(a1 + 260) = v6;
  double v7 = (float)((float)((float)v6 * 1000000.0) * 128.0) / v4;
  *(double *)(a1 + 280) = v7;
  *(_DWORD *)(a1 + 288) = (v7 * 5.0);
  int v8 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 134219776;
    double v10 = v4 / 1000.0;
    __int16 v11 = 1024;
    int v12 = v2;
    __int16 v13 = 1024;
    unsigned int v14 = (v4 * (double)(8 * v3) * 0.0078125 / 1000.0);
    __int16 v15 = 1024;
    unsigned int v16 = v6;
    __int16 v17 = 1024;
    int v18 = 2 * v2 + 13;
    __int16 v19 = 1024;
    int v20 = v6 * v3;
    __int16 v21 = 1024;
    unsigned int v22 = v5;
    __int16 v23 = 2048;
    double v24 = v7 / 1000.0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "A2DP configured at %2.1f KHz. Codec: SBC, Bitpool: %d (%d kbps). %d frames * %d bytes = %d per RTP (max=%d) every %.2f ms", (uint8_t *)&v9, 0x3Au);
  }
}

uint64_t sub_100448918()
{
  sub_10003FB34();
  if (sub_100350F3C()) {
    return 256;
  }
  uint64_t v1 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v1 + 720))(v1)) {
    return 192;
  }
  else {
    return 244;
  }
}

void sub_100448980(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = sub_100448918();
  unsigned int v5 = (int *)(a1 + 256);
  *(_DWORD *)(a1 + 256) = v4;
  unsigned int v6 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "For this platform, the default AAC-LC bitrate is %d", buf, 8u);
    unsigned int v4 = *v5;
  }
  unint64_t v7 = *(void *)(a2 + 16);
  unint64_t v8 = v7 / 0x3E8;
  if (v7 >> 8 < 0x177 || v8 > v4)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
      sub_1007691A8();
    }
  }
  else
  {
    int *v5 = v8;
    double v10 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Setting AAC-LC max bitrate to sink requested bitrate of %d", buf, 8u);
    }
  }
  int v27 = *v5;
  uint64_t v12 = sub_100017768();
  sub_10004191C(buf, "A2DP");
  sub_10004191C(__p, "AACBitrate");
  int v13 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v12 + 88))(v12, buf, __p, &v27);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v32) < 0)
  {
    operator delete(*(void **)buf);
    if (!v13) {
      goto LABEL_23;
    }
  }
  else if (!v13)
  {
    goto LABEL_23;
  }
  int v14 = v27;
  if (v27 < 96)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
      sub_10076913C();
    }
  }
  else
  {
    int *v5 = v27;
    __int16 v15 = qword_100A19E30;
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Warning: Setting user defined AAC-LC bitrate: %d kbps", buf, 8u);
    }
  }
LABEL_23:
  unsigned int v16 = *(_DWORD *)(a1 + 256);
  double v17 = *(double *)(a1 + 272);
  unsigned int v18 = vcvtpd_u64_f64((double)(1000 * v16) * 1024.0 / v17 * 0.125);
  *(_DWORD *)(a1 + 252) = v18;
  unsigned int v19 = *(_DWORD *)(a1 + 248);
  unsigned int v20 = v19 - 12;
  if (v19 - 12 < v18)
  {
    unsigned int v16 = vcvtmd_u64_f64(v17 * (double)(8 * v20) * 0.0009765625 / 1000.0);
    *(_DWORD *)(a1 + 252) = v20;
    *(_DWORD *)(a1 + 256) = v16;
    unsigned int v18 = v19 - 12;
  }
  *(_DWORD *)(a1 + 260) = v18 + 12 <= v19;
  float v21 = 0.0;
  if (v18 + 12 <= v19) {
    float v21 = 1.0;
  }
  double v22 = (float)((float)(v21 * 1000000.0) * 1024.0) / v17;
  *(double *)(a1 + 280) = v22;
  *(_DWORD *)(a1 + 288) = (v22 * 6.0);
  __int16 v23 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 134219776;
    if (v18 + 12 > v19) {
      unsigned int v24 = 0;
    }
    else {
      unsigned int v24 = v18 + 12;
    }
    *(double *)&uint8_t buf[4] = v17 / 1000.0;
    __int16 v29 = 1024;
    unsigned int v30 = v16;
    __int16 v31 = 1024;
    BOOL v32 = v18 + 12 <= v19;
    __int16 v33 = 1024;
    int v34 = 12;
    __int16 v35 = 1024;
    unsigned int v36 = v18;
    __int16 v37 = 1024;
    unsigned int v38 = v24;
    __int16 v39 = 1024;
    unsigned int v40 = v19;
    __int16 v41 = 2048;
    double v42 = v22 / 1000.0;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "A2DP configured at %2.1f KHz. Codec: AAC-LC, VBR max: %d kbps. %d frames * (%d+%d) bytes = %d per RTP (max=%d) every %.2f ms", buf, 0x3Au);
  }
}

void sub_100448D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_100448DB0(uint64_t a1)
{
  int v2 = (int *)(a1 + 256);
  *(_DWORD *)(a1 + 256) = 256;
  uint64_t v3 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 720))(v3)) {
    *int v2 = 174;
  }
  int v19 = 256;
  uint64_t v4 = sub_100017768();
  sub_10004191C(buf, "A2DP");
  sub_10004191C(__p, "AACELDBitrate");
  int v5 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v4 + 88))(v4, buf, __p, &v19);
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v24) < 0) {
    operator delete(*(void **)buf);
  }
  if (v5)
  {
    int v6 = v19;
    if (v19 < 96)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
        sub_100769210();
      }
    }
    else
    {
      *int v2 = v19;
      unint64_t v7 = qword_100A19E30;
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Setting user defined AAC-ELD bitrate: %d kbps", buf, 8u);
      }
    }
  }
  int v8 = *(_DWORD *)(a1 + 248);
  unsigned int v9 = *(_DWORD *)(a1 + 256);
  double v10 = *(double *)(a1 + 272);
  unsigned int v11 = vcvtpd_u64_f64((double)(480000 * v9) / v10 * 0.125);
  unsigned int v12 = v8 - 2;
  *(_DWORD *)(a1 + 248) = v8 - 2;
  *(_DWORD *)(a1 + 252) = v11;
  unsigned int v13 = v8 - 4;
  if (v13 < v11)
  {
    unsigned int v9 = vcvtmd_u64_f64(v10 * (double)(8 * v13) / 480.0 / 1000.0);
    *(_DWORD *)(a1 + 252) = v13;
    *(_DWORD *)(a1 + 256) = v9;
    unsigned int v11 = v13;
  }
  if (v12 / v11 >= 3) {
    unsigned int v14 = 3;
  }
  else {
    unsigned int v14 = v12 / v11;
  }
  *(_DWORD *)(a1 + 260) = v14;
  double v15 = (float)((float)v14 * 1000000.0) * 480.0 / v10;
  *(double *)(a1 + 280) = v15;
  *(_DWORD *)(a1 + 288) = (v15 * 5.0);
  unsigned int v16 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 134219776;
    *(double *)&uint8_t buf[4] = v10 / 1000.0;
    __int16 v21 = 1024;
    unsigned int v22 = v9;
    __int16 v23 = 1024;
    unsigned int v24 = v14;
    __int16 v25 = 1024;
    int v26 = 2;
    __int16 v27 = 1024;
    unsigned int v28 = v11;
    __int16 v29 = 1024;
    int v30 = v14 * (v11 + 2);
    __int16 v31 = 1024;
    unsigned int v32 = v12;
    __int16 v33 = 2048;
    double v34 = v15 / 1000.0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "A2DP configured at %2.1f KHz. Codec: AAC-ELD, VBR max: %d kbps. %d frames * (%d+%d) bytes = %d per RTP (max=%d) every %.2f ms", buf, 0x3Au);
  }
}

void sub_1004490D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_10044910C(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  a3[4] = *a2 >> 4;
  a3[5] = *a2 & 0xF;
  *a3 = a2[1] >> 4;
  a3[1] = (a2[1] >> 2) & 3;
  a3[6] = a2[1] & 3;
  a3[3] = a2[2];
  a3[2] = a2[3];
  uint64_t v3 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Extracted SBC configuration data", v4, 2u);
  }
}

void sub_1004491C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a3 = *(unsigned char *)a2;
  *(_DWORD *)(a3 + 4) = bswap32(*(unsigned __int16 *)(a2 + 1)) >> 20;
  *(unsigned char *)(a3 + 8) = (*(unsigned char *)(a2 + 2) >> 2) & 3;
  *(unsigned char *)(a3 + 9) = *(unsigned char *)(a2 + 3) >> 7;
  *(void *)(a3 + 16) = (unsigned __int16)(*(unsigned __int8 *)(a2 + 4) << 8) | ((unint64_t)(*(unsigned char *)(a2 + 3) & 0x7F) << 16) | *(unsigned __int8 *)(a2 + 5);
  uint64_t v3 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Extracted AAC-LC configuration data", v4, 2u);
  }
}

void sub_100449274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = __rev16(*(unsigned __int16 *)(a2 + 6));
  *(_DWORD *)(a3 + 4) = (*(unsigned __int8 *)(a2 + 9) >> 4) | (16 * *(unsigned __int8 *)(a2 + 8));
  *(_DWORD *)(a3 + 8) = *(unsigned __int8 *)(a2 + 10) | ((*(unsigned char *)(a2 + 9) & 0xF) << 8);
  *(unsigned char *)(a3 + 12) = *(unsigned char *)(a2 + 11) >> 7;
  *(void *)(a3 + 16) = (unsigned __int16)(*(unsigned __int8 *)(a2 + 12) << 8) | ((unint64_t)(*(unsigned char *)(a2 + 11) & 0x7F) << 16) | *(unsigned __int8 *)(a2 + 13);
  uint64_t v3 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Extracted AAC-ELD configuration data", v4, 2u);
  }
}

void sub_100449334(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 176);
  if ((int)v2 > 254)
  {
    if (v2 == 255)
    {
      unsigned int v13 = qword_100A19E30;
      if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
        sub_1007692E8(v13, v14, v15, v16, v17, v18, v19, v20);
      }
    }
    else
    {
      if (v2 != 33023)
      {
LABEL_21:
        __int16 v21 = qword_100A19E30;
        if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
          sub_10076927C(v2, v21, v22, v23, v24, v25, v26, v27);
        }
        return;
      }
      unint64_t v7 = qword_100A19E30;
      BOOL v8 = os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_INFO);
      if (v8)
      {
        v28[0] = 0x80FF04000100;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Found AVDTP_CODEC_APPLE_AACELD codec type 0x%x", (uint8_t *)v28, 8u);
      }
      sub_100449274(v8, *(void *)(*(void *)(a1 + 184) + 24), (uint64_t)v28);
      sub_100448DB0(a1);
    }
  }
  else
  {
    if (v2)
    {
      if (v2 == 2)
      {
        uint64_t v3 = qword_100A19E30;
        BOOL v4 = os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_INFO);
        if (v4)
        {
          v28[0] = 0x204000100;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Found AVDTP_CODEC_MPEG_AAC codec type 0x%x", (uint8_t *)v28, 8u);
        }
        uint64_t v5 = *(void *)(a1 + 184);
        if (v5)
        {
          uint64_t v6 = *(void *)(v5 + 24);
          if (v6)
          {
            memset(v28, 0, sizeof(v28));
            sub_1004491C0(v4, v6, (uint64_t)v28);
            sub_100448980(a1, (uint64_t)v28);
          }
        }
        return;
      }
      goto LABEL_21;
    }
    unsigned int v9 = qword_100A19E30;
    BOOL v10 = os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_INFO);
    if (v10)
    {
      v28[0] = 67109120;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Found AVDTP_CODEC_SBC codec type 0x%x", (uint8_t *)v28, 8u);
    }
    uint64_t v11 = *(void *)(a1 + 184);
    if (v11)
    {
      unsigned int v12 = *(unsigned char **)(v11 + 24);
      if (v12)
      {
        sub_10044910C(v10, v12, v28);
        sub_100448780(a1, (uint64_t)v28);
      }
    }
  }
}

void sub_100449574(id a1)
{
}

void sub_1004495B8()
{
}

void sub_1004495DC(id a1)
{
}

void sub_100449620()
{
}

void sub_100449684(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_100449690(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x18u);
}

double sub_1004496B0(uint64_t a1)
{
  *(_OWORD *)(a1 + 24) = *(_OWORD *)off_1009AE4F8;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)off_1009AE508;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)off_1009AE518;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)off_1009AE528;
  *(void *)(a1 + 88) = "None";
  *(void *)(a1 + 96) = "StartPending";
  double result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

uint64_t sub_1004496F8(uint64_t a1)
{
  sub_100449730(a1);
  uint64_t v2 = *(void **)(a1 + 128);
  if (v2)
  {
    *(void *)(a1 + 136) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_100449730(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 120);
  if (v2)
  {
    if (*(_DWORD *)(a1 + 104))
    {
      unint64_t v3 = 0;
      uint64_t v4 = 16;
      do
      {
        free(*(void **)(*(void *)(a1 + 120) + v4));
        ++v3;
        v4 += 32;
      }
      while (v3 < *(unsigned int *)(a1 + 104));
      uint64_t v2 = *(void **)(a1 + 120);
    }
    free(v2);
    *(void *)(a1 + 120) = 0;
  }
  return 0;
}

uint64_t sub_1004497A4(uint64_t a1)
{
  *(_DWORD *)a1 = -100526831;
  *(unsigned char *)(a1 + 112) = 0;
  uint64_t v2 = (char *)malloc_type_calloc(6uLL, 0x20uLL, 0x1020040C75495F1uLL);
  *(void *)(a1 + 120) = v2;
  *((_DWORD *)v2 + 3) = 0;
  *(void *)(v2 + 4) = 1;
  *((_DWORD *)v2 + 7) = 3;
  unint64_t v3 = malloc_type_calloc(3uLL, 0x10uLL, 0x105204037B82EA9uLL);
  *(void *)(*(void *)(a1 + 120) + 16) = v3;
  *unint64_t v3 = 1;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 120) + 16) + 16) = 7;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 120) + 16) + 17) = 0;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 120) + 16) + 18) = 0;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 120) + 16) + 19) = 4;
  *(void *)(*(void *)(*(void *)(a1 + 120) + 16) + 24) = a1;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 120) + 16) + 32) = 8;
  uint64_t v4 = *(void *)(a1 + 120);
  *(unsigned char *)(v4 + 24) = 1;
  *(_DWORD *)(v4 + 44) = 0;
  *(void *)(v4 + 36) = 2;
  *(_DWORD *)(v4 + 60) = 3;
  uint64_t v5 = malloc_type_calloc(3uLL, 0x10uLL, 0x105204037B82EA9uLL);
  *(void *)(*(void *)(a1 + 120) + 48) = v5;
  unsigned char *v5 = 1;
  *(_WORD *)(*(void *)(*(void *)(a1 + 120) + 48) + 16) = 7;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 120) + 48) + 18) = 0;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 120) + 48) + 19) = 4;
  *(void *)(*(void *)(*(void *)(a1 + 120) + 48) + 24) = a1;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 120) + 48) + 32) = 8;
  *(unsigned char *)(*(void *)(a1 + 120) + 56) = 1;
  char v32 = 0;
  uint64_t v6 = sub_100017768();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v6 + 8))(v6)) {
    goto LABEL_8;
  }
  uint64_t v7 = sub_100017768();
  sub_10004191C(buf, "A2DP");
  sub_10004191C(__p, "DisableAAC");
  (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v7 + 72))(v7, buf, __p, &v32);
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  if (v31 < 0) {
    operator delete(*(void **)buf);
  }
  if (v32)
  {
    char v32 = 1;
    unsigned int v8 = 2;
  }
  else
  {
LABEL_8:
    uint64_t v9 = sub_100035F54();
    char v32 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 784))(v9);
    unsigned int v8 = 2;
    if ((v32 & 1) == 0)
    {
      *(_DWORD *)(a1 + 4) = -2088501120;
      *(_WORD *)(a1 + 8) = 232;
      uint64_t v10 = *(void *)(a1 + 120);
      *(_DWORD *)(v10 + 76) = 0;
      *(void *)(v10 + 68) = 3;
      *(_DWORD *)(v10 + 92) = 3;
      uint64_t v11 = malloc_type_calloc(3uLL, 0x10uLL, 0x105204037B82EA9uLL);
      *(void *)(*(void *)(a1 + 120) + 80) = v11;
      unsigned char *v11 = 1;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 120) + 80) + 16) = 7;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 120) + 80) + 17) = 0;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 120) + 80) + 18) = 2;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 120) + 80) + 19) = 6;
      *(void *)(*(void *)(*(void *)(a1 + 120) + 80) + 24) = a1 + 4;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 120) + 80) + 32) = 8;
      uint64_t v12 = *(void *)(a1 + 120);
      *(unsigned char *)(v12 + 88) = 1;
      *(_DWORD *)(v12 + 108) = 0;
      *(void *)(v12 + 100) = 4;
      *(_DWORD *)(v12 + 124) = 3;
      unsigned int v13 = malloc_type_calloc(3uLL, 0x10uLL, 0x105204037B82EA9uLL);
      *(void *)(*(void *)(a1 + 120) + 112) = v13;
      *unsigned int v13 = 1;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 120) + 112) + 16) = 7;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 120) + 112) + 17) = 0;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 120) + 112) + 18) = 2;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 120) + 112) + 19) = 6;
      *(void *)(*(void *)(*(void *)(a1 + 120) + 112) + 24) = a1 + 4;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 120) + 112) + 32) = 8;
      *(unsigned char *)(*(void *)(a1 + 120) + 120) = 1;
      unsigned int v8 = 4;
    }
  }
  char v27 = 0;
  uint64_t v14 = sub_100017768();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v14 + 8))(v14)) {
    goto LABEL_17;
  }
  uint64_t v15 = sub_100017768();
  sub_10004191C(buf, "A2DP");
  sub_10004191C(__p, "DisableAACELD");
  (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v15 + 72))(v15, buf, __p, &v27);
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  if (v31 < 0) {
    operator delete(*(void **)buf);
  }
  if (v27)
  {
    char v27 = 1;
  }
  else
  {
LABEL_17:
    uint64_t v16 = sub_100035F54();
    char v27 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 344))(v16);
    if ((v27 & 1) == 0)
    {
      *(void *)(a1 + 10) = 0x800080010000004CLL;
      *(_DWORD *)(a1 + 18) = -2080340992;
      *(_WORD *)(a1 + 22) = 226;
      uint64_t v17 = *(void *)(a1 + 120) + 32 * v8;
      *(_DWORD *)(v17 + 12) = 0;
      *(void *)(v17 + 4) = 5;
      *(_DWORD *)(v17 + 28) = 3;
      uint64_t v18 = malloc_type_calloc(3uLL, 0x10uLL, 0x105204037B82EA9uLL);
      *(void *)(*(void *)(a1 + 120) + 32 * v8 + 16) = v18;
      *uint64_t v18 = 1;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 120) + 32 * v8 + 16) + 16) = 7;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 120) + 32 * v8 + 16) + 17) = 0;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 120) + 32 * v8 + 16) + 18) = -1;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 120) + 32 * v8 + 16) + 19) = 14;
      *(void *)(*(void *)(*(void *)(a1 + 120) + 32 * v8 + 16) + 24) = a1 + 10;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 120) + 32 * v8 + 16) + 32) = 8;
      uint64_t v19 = *(void *)(a1 + 120);
      *(unsigned char *)(v19 + 32 * v8 + 24) = 1;
      uint64_t v20 = v8 | 1;
      uint64_t v21 = v19 + 32 * v20;
      *(_DWORD *)(v21 + 12) = 0;
      *(void *)(v21 + 4) = 6;
      *(_DWORD *)(v21 + 28) = 3;
      uint64_t v22 = malloc_type_calloc(3uLL, 0x10uLL, 0x105204037B82EA9uLL);
      *(void *)(*(void *)(a1 + 120) + 32 * v20 + 16) = v22;
      *uint64_t v22 = 1;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 120) + 32 * v20 + 16) + 16) = 7;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 120) + 32 * v20 + 16) + 17) = 0;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 120) + 32 * v20 + 16) + 18) = -1;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 120) + 32 * v20 + 16) + 19) = 14;
      *(void *)(*(void *)(*(void *)(a1 + 120) + 32 * v20 + 16) + 24) = a1 + 10;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 120) + 32 * v20 + 16) + 32) = 8;
      *(unsigned char *)(*(void *)(a1 + 120) + 32 * v20 + 24) = 1;
      v8 += 2;
    }
  }
  *(_DWORD *)(a1 + 104) = v8;
  *(_DWORD *)(a1 + 108) = v8;
  uint64_t v23 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Local A2DP stream endpoints:", buf, 2u);
  }
  buf[0] = 0;
  sub_10001B8E0(buf);
  if (*(_DWORD *)(a1 + 104))
  {
    unint64_t v24 = 0;
    uint64_t v25 = 16;
    do
    {
      nullsub_95(*(void *)(*(void *)(a1 + 120) + v25) + 16);
      ++v24;
      v25 += 32;
    }
    while (v24 < *(unsigned int *)(a1 + 104));
  }
  sub_10001B8AC(buf);
  return 0;
}

void sub_100449ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100449F18(uint64_t a1)
{
  char v6 = 0;
  sub_10001B8E0(&v6);
  if (*(_DWORD *)(a1 + 104))
  {
    unint64_t v2 = 0;
    uint64_t v3 = 16;
    while (!sub_100135BF0(0, 0, *(void *)(*(void *)(a1 + 120) + v3), 3, 1, (unsigned char *)(*(void *)(a1 + 120) + v3 - 12)))
    {
      ++v2;
      v3 += 32;
      if (v2 >= *(unsigned int *)(a1 + 104)) {
        goto LABEL_5;
      }
    }
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
      sub_1007693C4();
    }
    goto LABEL_10;
  }
LABEL_5:
  uint64_t v4 = sub_100131FD0(1, (uint64_t *)&off_1009FB780);
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
      sub_10076935C();
    }
LABEL_10:
    uint64_t v4 = 1;
  }
  sub_10001B8AC(&v6);
  return v4;
}

void sub_10044A020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_10044A038(uint64_t a1)
{
  char v6 = 0;
  sub_10001B8E0(&v6);
  if (sub_100132114() && os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
    sub_100769494();
  }
  if (*(_DWORD *)(a1 + 104))
  {
    unint64_t v2 = 0;
    uint64_t v3 = 4;
    while (!sub_100135E24(*(unsigned __int8 *)(*(void *)(a1 + 120) + v3)))
    {
      ++v2;
      v3 += 32;
      if (v2 >= *(unsigned int *)(a1 + 104)) {
        goto LABEL_8;
      }
    }
    if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_ERROR)) {
      sub_10076942C();
    }
    uint64_t v4 = 1;
  }
  else
  {
LABEL_8:
    uint64_t v4 = 0;
  }
  sub_10001B8AC(&v6);
  return v4;
}

void sub_10044A128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_10044A140(uint64_t a1, int a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 104);
  if (!v2) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v5 = *(void *)(a1 + 120);
  do
  {
    if (*(unsigned __int8 *)(*(void *)(v5 + 16) + 18) == a2) {
      uint64_t result = v5;
    }
    v5 += 32;
    --v2;
  }
  while (v2);
  return result;
}

uint64_t sub_10044A17C(uint64_t a1, int a2)
{
  uint64_t v4 = qword_100A19E30;
  if (os_log_type_enabled((os_log_t)qword_100A19E30, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 67109120;
    v8[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Getting local stream config for local seid %d", (uint8_t *)v8, 8u);
  }
  uint64_t v5 = *(unsigned int *)(a1 + 104);
  if (!v5) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v7 = *(void *)(a1 + 120);
  do
  {
    if (*(_DWORD *)(v7 + 4) == a2) {
      uint64_t result = v7;
    }
    v7 += 32;
    --v5;
  }
  while (v5);
  return result;
}

void *sub_10044A25C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v4 = *(char *)(a1 + 23);
  if (v4 >= 0) {
    uint64_t v5 = (char *)a1;
  }
  else {
    uint64_t v5 = *(char **)a1;
  }
  if (v4 >= 0) {
    unint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    unint64_t v6 = *(void *)(a1 + 8);
  }
  size_t v21 = v6 + 1;
  uint64_t v22 = v5;
  __chkstk_darwin();
  unsigned int v8 = (char *)&v18 - v7;
  bzero((char *)&v18 - v7, v6 + 1);
  size_t v19 = v6 + 1;
  uint64_t v20 = v8;
  uint64_t v9 = iconv_open("UTF-8//IGNORE", "UTF-8");
  if (v9 == (__tag_iconv_t *)-1)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_1007694FC();
    }
  }
  else
  {
    uint64_t v10 = v9;
    size_t v11 = iconv(v9, &v22, &v21, &v20, &v19);
    if (iconv_close(v10))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_10076968C();
      }
    }
    else
    {
      if (v11 != -1) {
        return sub_10004191C(a2, v8);
      }
      if (*__error() == 92 || *__error() == 22)
      {
        unsigned int v13 = (char *)(v22 - v5);
        if (v22 - v5 >= 0 && (unint64_t)v13 <= v6)
        {
          std::string::copy((const std::string *)a1, v8, v22 - v5, 0);
          v13[(void)v8] = 0;
          return sub_10004191C(a2, v8);
        }
        uint64_t v14 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
          sub_100769580(v14);
        }
      }
      else
      {
        int v15 = *__error();
        uint64_t v16 = qword_100A19E50;
        BOOL v17 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR);
        if (v15 == 7)
        {
          if (v17) {
            sub_1007695C4(v16);
          }
        }
        else if (v17)
        {
          sub_100769608();
        }
      }
    }
  }
  unsigned int v8 = "";
  return sub_10004191C(a2, v8);
}

void sub_10044A49C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if (*(char *)(a1 + 23) < 0)
  {
    sub_10003B098(a2, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
  int v3 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v3 >= 0) {
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  if (!size) {
    return;
  }
  std::string::size_type v5 = 0;
  unsigned int v6 = v3 >> 31;
  uint64_t v7 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
  if (v3 >= 0) {
    std::string::size_type v8 = (std::string::size_type)a2;
  }
  else {
    std::string::size_type v8 = a2->__r_.__value_.__r.__words[0];
  }
  while (2)
  {
    uint64_t v9 = (unsigned __int8 *)(v8 + v5);
    uint64_t v10 = (unsigned __int8 *)(v8 + size);
LABEL_12:
    uint64_t v11 = 0;
    while (*v9 != asc_10089E142[v11])
    {
      if (++v11 == 5)
      {
        if (++v9 != v10) {
          goto LABEL_12;
        }
        return;
      }
    }
    if (v9 == v10) {
      return;
    }
    std::string::size_type v12 = (std::string::size_type)&v9[-v8];
    if (&v9[-v8] == (unsigned __int8 *)-1) {
      return;
    }
    if (v6) {
      unsigned int v13 = (std::string *)v7;
    }
    else {
      unsigned int v13 = a2;
    }
    memset(&v21, 0, sizeof(v21));
    int v14 = v13->__r_.__value_.__s.__data_[v12];
    if (v14 <= 38)
    {
      if (v14 == 34)
      {
        int v15 = "&quot;";
      }
      else
      {
        if (v14 != 38) {
          goto LABEL_33;
        }
        int v15 = "&amp;";
      }
    }
    else if (v14 == 39)
    {
      int v15 = "&apos;";
    }
    else
    {
      int v15 = "&gt;";
      if (v14 != 62)
      {
        if (v14 != 60) {
          goto LABEL_33;
        }
        int v15 = "&lt;";
      }
    }
    std::string::assign(&v21, v15);
LABEL_33:
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v16 = &v21;
    }
    else {
      uint64_t v16 = (std::string *)v21.__r_.__value_.__r.__words[0];
    }
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v17 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v17 = v21.__r_.__value_.__l.__size_;
    }
    std::string::replace(a2, v12, 1uLL, (const std::string::value_type *)v16, v17);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v18 = v21.__r_.__value_.__l.__size_;
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    else
    {
      std::string::size_type v18 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
    }
    std::string::size_type v5 = v18 + v12;
    int v19 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
    BOOL v20 = v19 < 0;
    LOBYTE(v6) = v19 < 0;
    uint64_t v7 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
    if (v19 >= 0) {
      std::string::size_type v8 = (std::string::size_type)a2;
    }
    else {
      std::string::size_type v8 = a2->__r_.__value_.__r.__words[0];
    }
    if (!v20) {
      std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    }
    if (size > v5) {
      continue;
    }
    break;
  }
}

void sub_10044A694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_10044A6C0(uint64_t a1)
{
  int v2 = *(char *)(a1 + 23);
  if (v2 >= 0) {
    int v3 = (uint64_t *)a1;
  }
  else {
    int v3 = *(uint64_t **)a1;
  }
  if (v2 >= 0) {
    unint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    unint64_t v4 = *(void *)(a1 + 8);
  }
  unint64_t v5 = sub_1003C208C((uint64_t)&v9, v3, v4);
  unsigned int v6 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a1 + 23) >= 0) {
      uint64_t v7 = a1;
    }
    else {
      uint64_t v7 = *(void *)a1;
    }
    int v9 = 136446466;
    uint64_t v10 = v7;
    __int16 v11 = 2048;
    unint64_t v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Hashing \"%{public}s\" as %zu", (uint8_t *)&v9, 0x16u);
  }
  return v5;
}

uint64_t sub_10044A7B0(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = 0;
  uint64_t v2 = *sub_100085CE4(a1, &v4, a2);
  if (!v2) {
    abort();
  }
  return v2 + 56;
}

void sub_10044A7EC(os_unfair_lock_s *a1, void *a2)
{
  int v3 = a2;
  os_unfair_lock_lock(a1);
  unint64_t v5 = 0;
  unsigned int v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }
  if (v4)
  {
    unsigned int v6 = v4;
    operator delete(v4);
  }
}

void sub_10044A890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10044A8B8(uint64_t a1, uint64_t (***a2)(void, void, void, void, void, void, void, double))
{
  return (**a2)(a2, *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned __int16 *)(a1 + 60), *(unsigned __int8 *)(a1 + 56), 0, *(unsigned __int16 *)(a1 + 58), *(double *)(a1 + 48));
}

uint64_t sub_10044A8FC(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t result = sub_100450550(a1, a2);
  }
  else
  {
    sub_1004504F4((uint64_t)a1, a2);
    uint64_t result = v3 + 16;
  }
  a1[1] = result;
  return result;
}

uint64_t sub_10044A93C(uint64_t a1)
{
  uint64_t v2 = qword_100A19FA0;
  if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)unint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "stackDidStart", v5, 2u);
  }
  *(unsigned char *)(a1 + 72) = 1;
  uint64_t v3 = sub_10003FFD4();
  sub_10026B638(v3 + 368, a1 + 32);
  sub_10044A9D8(a1);
  return sub_10044AAE4(a1);
}

void sub_10044A9D8(uint64_t a1)
{
  uint64_t v2 = +[NSCalendar autoupdatingCurrentCalendar];
  uint64_t v3 = +[NSDate date];
  uint64_t v4 = [v2 components:16 fromDate:v3];
  unsigned __int16 v5 = (unsigned __int16)[v4 day];

  if (*(unsigned __int8 *)(a1 + 248) != v5)
  {
    *(_DWORD *)(a1 + 232) = 0;
    *(unsigned char *)(a1 + 248) = v5;
    unsigned int v6 = qword_100A19FA0;
    if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "resetting daily counters (fCurrentShortAPWakeTimeInSeconds, fDayOfMonth, fEstimatedAPWakeCount)", v7, 2u);
    }
  }
}

void sub_10044AABC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10044AAE4(uint64_t a1)
{
  if (*(void *)(a1 + 80) && *(unsigned char *)(a1 + 72))
  {
    std::string __p = 0;
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    operator new();
  }
  return 12;
}

void sub_10044ADA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
}

uint64_t sub_10044AE1C(uint64_t a1)
{
  return sub_10044A93C(a1 - 16);
}

void sub_10044AE24(uint64_t a1)
{
  uint64_t v2 = qword_100A19FA0;
  if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "ContactTracingManager::stackWillStop enter", buf, 2u);
  }
  *(unsigned char *)(a1 + 72) = 0;
  [*(id *)(a1 + 288) stopActivityUpdates];
  uint64_t v3 = *(void **)(a1 + 280);
  *(void *)(a1 + 280) = 0;

  uint64_t v4 = sub_10003FFD4();
  sub_1002C4188(v4 + 368, a1 + 32);
  unsigned __int16 v5 = qword_100A19FA0;
  if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)unsigned int v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "ContactTracingManager::stackWillStop exit", v6, 2u);
  }
}

void sub_10044AEFC(uint64_t a1)
{
}

unsigned char *sub_10044AF04()
{
  char v1 = 0;
  sub_10001B8E0(&v1);
  if (sub_10022627C((uint64_t)sub_10044AFE0))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19F90, OS_LOG_TYPE_ERROR)) {
      sub_100769824();
    }
  }
  else if (sub_100226404((uint64_t)sub_10044B048) {
         && os_log_type_enabled((os_log_t)qword_100A19F90, OS_LOG_TYPE_ERROR))
  }
  {
    sub_1007697BC();
  }
  return sub_10001B8AC(&v1);
}

void sub_10044AFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_10044AFE0()
{
  uint64_t v0 = qword_100A19FA0;
  if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)char v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "ExposureNotification::leAddressChangedCallback", v1, 2u);
  }
}

void sub_10044B048()
{
  uint64_t v0 = qword_100A19FA0;
  if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)char v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "ExposureNotification::leAddressWillChangeCallback", v1, 2u);
  }
}

void sub_10044B0B4(uint64_t a1, int a2, int a3)
{
  unsigned __int16 v5 = qword_100A19FA0;
  if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_INFO))
  {
    v6[0] = 67109376;
    v6[1] = a3;
    __int16 v7 = 1024;
    int v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "New PowerState:%d module:%d", (uint8_t *)v6, 0xEu);
  }
}

void sub_10044B170(uint64_t a1, int a2)
{
  uint64_t v3 = qword_100A19FA0;
  if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = "NO";
    if (a2) {
      uint64_t v4 = "YES";
    }
    int v5 = 136315138;
    unsigned int v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "ExposureNotification::leAdvertisingStateChanged advertising:%s", (uint8_t *)&v5, 0xCu);
  }
}

void sub_10044B230(uint64_t a1)
{
  uint64_t v2 = qword_100A19FA0;
  if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "ExposureNotification::advertisingStoppedForSession", v4, 2u);
  }
  if (*(void *)(a1 + 80))
  {
    uint64_t v3 = sub_100019878();
    sub_100013018(v3, &stru_1009AE560);
  }
}

void sub_10044B2B4(id a1)
{
  if (qword_1009FB798 != -1) {
    dispatch_once(&qword_1009FB798, &stru_1009AE738);
  }
  char v1 = off_1009FB790;

  sub_10044B308((uint64_t)v1);
}

uint64_t sub_10044B308(uint64_t a1)
{
  if (*(void *)(a1 + 80)) {
    operator new();
  }
  return 12;
}

void sub_10044B50C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, atomic_uint *a14, uint64_t a15, atomic_uint *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14) {
    sub_1000368F4(a14);
  }
  if (a16) {
    sub_1000368F4(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_10044B588(uint64_t a1)
{
}

id sub_10044B590(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEBUG)) {
    sub_10076988C();
  }
  uint64_t v2 = sub_100035F54();
  id result = (id)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 352))(v2);
  if (result) {
    return [*(id *)(a1 + 288) stopActivityUpdates];
  }
  return result;
}

id sub_10044B614(uint64_t a1)
{
  return sub_10044B590(a1 - 32);
}

void sub_10044B61C(uint64_t a1)
{
  uint64_t v2 = qword_100A19FA0;
  if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "ContactTracingManager Power : system woke up", v3, 2u);
  }
  sub_10044A9D8(a1);
}

void sub_10044B690(uint64_t a1)
{
}

void sub_10044B698(uint64_t a1, unint64_t a2)
{
  BOOL v3 = HIDWORD(a2) == 1;
  uint64_t v4 = sub_100019878();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_10044B724;
  v5[3] = &unk_100998A58;
  void v5[4] = a1;
  BOOL v6 = v3;
  sub_100013018(v4, v5);
}

void sub_10044B724(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 176))(v3))
  {
    uint64_t v4 = qword_100A19FA0;
    if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(unsigned __int8 *)(a1 + 40);
      v6[0] = 67109120;
      v6[1] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "WifiStateChanged wiFiAssociatedToBand2GHz=%d", (uint8_t *)v6, 8u);
    }
  }
  *(unsigned char *)(v2 + 250) = *(unsigned char *)(a1 + 40);
}

void sub_10044B80C(uint64_t a1, unint64_t a2)
{
}

double sub_10044B814(uint64_t a1)
{
  *(void *)a1 = off_1009AE590;
  *(void *)(a1 + 8) = off_1009AE620;
  *(void *)(a1 + 16) = off_1009AE680;
  *(void *)(a1 + 24) = off_1009AE6B0;
  *(void *)(a1 + 32) = off_1009AE6D8;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 40) = &off_1009AE708;
  *(void *)(a1 + 48) = a1 + 56;
  *(unsigned char *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = @"unknown";
  *(void *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 112) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 176) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 210) = xmmword_1007BEB00;
  *(_WORD *)(a1 + 226) = 1800;
  *(_DWORD *)(a1 + 228) = 28800;
  *(_WORD *)(a1 + 234) = 0;
  *(void *)(a1 + 240) = 0;
  *(_WORD *)(a1 + 248) = 256;
  *(unsigned char *)(a1 + 250) = 0;
  *(_DWORD *)(a1 + 252) = 4;
  *(_WORD *)(a1 + 256) = 5;
  *(void *)(a1 + 260) = 150;
  *(void *)&double result = 0xAF000050030;
  *(void *)(a1 + 268) = 0xAF000050030;
  *(unsigned char *)(a1 + 296) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  return result;
}

uint64_t sub_10044B980(uint64_t a1)
{
  uint64_t v2 = qword_100A19FA0;
  if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "restarting advertising", buf, 2u);
  }
  sub_10044BA4C(a1);
  uint64_t v3 = sub_100019878();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_10044BB40;
  v5[3] = &unk_100997528;
  void v5[4] = a1;
  sub_100013018(v3, v5);
  return 0;
}

uint64_t sub_10044BA4C(uint64_t a1)
{
  if (!*(void *)(a1 + 80)) {
    return 12;
  }
  if (qword_1009F8248 != -1) {
    dispatch_once(&qword_1009F8248, &stru_1009AE758);
  }
  uint64_t v2 = sub_10065DB34((uint64_t)off_1009F8240, *(void *)(a1 + 80));
  uint64_t v3 = qword_100A19FA0;
  if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "stopAdvertising returning %d", (uint8_t *)v5, 8u);
  }
  return v2;
}

uint64_t sub_10044BB40(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(void *)(v1 + 80))
  {
    uint64_t v2 = qword_100A19FA0;
    if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "restarting advertising as we have a valid session", v3, 2u);
    }
    return sub_10044B308(v1);
  }
  return result;
}

uint64_t sub_10044BBBC(void *a1)
{
  uint64_t v2 = a1[5];
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009AE778);
  }
  uint64_t result = sub_1006DFE0C((uint64_t)off_1009F85C0, *(void *)(v2 + 80), a1[6]);
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = result;
  return result;
}

uint64_t sub_10044BC28(uint64_t a1)
{
  if (!*(void *)(a1 + 80)) {
    return 12;
  }
  uint64_t v8 = 0;
  int v9 = &v8;
  uint64_t v10 = 0x2020000000;
  int v11 = 0;
  uint64_t v2 = sub_100019878();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_10044BD80;
  v7[3] = &unk_100999720;
  void v7[4] = &v8;
  void v7[5] = a1;
  sub_1000197D8(v2, v7);
  uint64_t v3 = qword_100A19FA0;
  if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_INFO))
  {
    int v4 = *((_DWORD *)v9 + 6);
    *(_DWORD *)std::string buf = 67109120;
    int v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "stopScanning returning %d", buf, 8u);
  }
  uint64_t v5 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_10044BD68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10044BD80(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009AE778);
  }
  uint64_t result = sub_1006E1A9C((uint64_t)off_1009F85C0, *(void *)(v2 + 80), 1, 1, 0);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_10044BDF4(uint64_t a1, uint64_t a2)
{
  global_queue = dispatch_get_global_queue(0, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10044BE78;
  block[3] = &unk_100997528;
  block[4] = a2;
  dispatch_async(global_queue, block);
}

void sub_10044BE78(uint64_t a1)
{
  uint64_t v2 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 176))(v2))
  {
    uint64_t v3 = qword_100A19FA0;
    if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Benchmark: RPI generation", buf, 2u);
    }
  }
  double Current = CFAbsoluteTimeGetCurrent();
  bzero(buf, 0x900uLL);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  ENRPIKDerive();
  if (*(void *)(a1 + 32))
  {
    unint64_t v5 = 0;
    do
    {
      ENRPIDeriveBatch();
      v5 += 144;
    }
    while (v5 < *(void *)(a1 + 32));
  }
  double v6 = CFAbsoluteTimeGetCurrent();
  uint64_t v7 = sub_100017768();
  if ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 176))(v7))
  {
    uint64_t v8 = qword_100A19FA0;
    if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v10 = 134218240;
      uint64_t v11 = v9;
      __int16 v12 = 2048;
      double v13 = v6 - Current;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Benchmark: created %llu RPI's in %f seconds", (uint8_t *)&v10, 0x16u);
    }
  }
}

void *sub_10044C034@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1000335D8(a2, (const void *)(a1 + 146), 0x14uLL);
}

uint64_t sub_10044C044(uint64_t a1, void *a2, int a3, unint64_t *a4)
{
  if (a2 && a3 == 20)
  {
    long long v57 = 0uLL;
    unint64_t v49 = 0;
    if (qword_1009F7ED0 != -1) {
      dispatch_once(&qword_1009F7ED0, &stru_1009AE798);
    }
    int v7 = sub_100718344(qword_1009F7EC8, &v57, 16, &v49);
    if (qword_1009F7ED0 != -1) {
      dispatch_once(&qword_1009F7ED0, &stru_1009AE798);
    }
    uint64_t v8 = (void *)(a1 + 146);
    sub_100716978(qword_1009F7EC8, a1 + 146, 16);
    if (!v7 && (*v8 == (void)v57 ? (BOOL v9 = *(void *)(a1 + 154) == *((void *)&v57 + 1)) : (BOOL v9 = 0), v9))
    {
      double v13 = qword_100A19FA0;
      if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "using the same payload as before", buf, 2u);
      }
      *a4 = v49;
    }
    else
    {
      int v10 = qword_100A19FA0;
      if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Storing new payload and address", buf, 2u);
      }
      *(_WORD *)&buf[5] = 0;
      *(_DWORD *)&buf[1] = 0;
      buf[0] = 1;
      if (CCRandomGenerateBytes(&buf[1], 6uLL))
      {
        if (os_log_type_enabled((os_log_t)qword_100A19F90, OS_LOG_TYPE_ERROR)) {
          sub_100769A04();
        }
        return 1;
      }
      buf[1] &= 0x3Fu;
      *a4 = ((unint64_t)buf[1] << 40) | ((unint64_t)buf[2] << 32) | ((unint64_t)buf[3] << 24) | ((unint64_t)buf[4] << 16) | ((unint64_t)buf[5] << 8) | buf[6] | ((unint64_t)buf[0] << 48);
      if (qword_1009F7ED0 != -1) {
        dispatch_once(&qword_1009F7ED0, &stru_1009AE798);
      }
      sub_10071845C(qword_1009F7EC8, a1 + 146, 16);
    }
    uint64_t v14 = sub_100017768();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v14 + 184))(v14))
    {
      uint64_t v15 = qword_100A19FA0;
      if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = sub_1006AD3F0();
        uint64_t v17 = sub_1006AD3F0();
        *(_DWORD *)std::string buf = 138479107;
        *(void *)&uint8_t buf[4] = v16;
        *(_WORD *)&unsigned char buf[12] = 2113;
        *(void *)&buf[14] = v17;
        *(_WORD *)&unsigned char buf[22] = 1041;
        *(_DWORD *)int v51 = 16;
        *(_WORD *)&v51[4] = 2097;
        *(void *)char v52 = &v57;
        *(_WORD *)&v52[8] = 1041;
        *(_DWORD *)uint64_t v53 = 16;
        *(_WORD *)&v53[4] = 2097;
        v54[0] = a1 + 146;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "previousAddress:%{private}@ newAddress:%{private}@ previousPayload:%{private}.16P fCurrentAdvertisingPayload:%{private}.16P", buf, 0x36u);
      }
    }
    v56[0] = 0;
    v56[1] = 0;
    if (qword_1009F7ED0 != -1) {
      dispatch_once(&qword_1009F7ED0, &stru_1009AE798);
    }
    uint64_t v11 = sub_1007169F8(qword_1009F7EC8, (uint64_t)v56, 0x10uLL, 0);
    if (v11)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19F90, OS_LOG_TYPE_ERROR)) {
        sub_10076999C();
      }
    }
    else
    {
      int v48 = 257;
      uint64_t v18 = sub_100035F54();
      BYTE2(v48) = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 808))(v18);
      HIBYTE(v48) = 3;
      long long v55 = *(_OWORD *)v8;
      int v47 = 0;
      if (qword_1009F7ED0 != -1) {
        dispatch_once(&qword_1009F7ED0, &stru_1009AE798);
      }
      uint64_t v11 = sub_100717F40(qword_1009F7EC8, (uint64_t)v56, (uint64_t)&v48, (uint64_t)&v55, (uint64_t)&v47);
      if (v11)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19F90, OS_LOG_TYPE_ERROR)) {
          sub_100769934();
        }
      }
      else
      {
        *(_DWORD *)(a1 + 162) = v47;
        uint64_t v19 = sub_100017768();
        if ((*(unsigned int (**)(uint64_t))(*(void *)v19 + 184))(v19))
        {
          BOOL v20 = qword_100A19FA0;
          if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT))
          {
            int v46 = SBYTE2(v48);
            int v44 = v48;
            char v21 = BYTE1(v48);
            char v22 = HIBYTE(v48);
            uint64_t v23 = sub_1006AD3F0();
            *(_DWORD *)&uint8_t buf[4] = 20;
            *(_DWORD *)std::string buf = 68224771;
            *(_WORD *)&uint8_t buf[8] = 2097;
            *(void *)&buf[10] = a1 + 146;
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = v46;
            *(_WORD *)int v51 = 1024;
            *(_DWORD *)&v51[2] = (16 * (v21 & 3)) | (v44 << 6) | (4 * (v22 & 3));
            *(_WORD *)char v52 = 2113;
            *(void *)&v52[2] = v23;
            *(_WORD *)uint64_t v53 = 1040;
            *(_DWORD *)&v53[2] = 4;
            LOWORD(v54[0]) = 2096;
            *(void *)((char *)v54 + 2) = &v47;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Payload is now %{private}.20P TXPower:%d version:0x%x address:%{private}@ aem:%.4P", buf, 0x38u);
          }
        }
        uint64_t v24 = sub_100017768();
        if ((*(unsigned int (**)(uint64_t))(*(void *)v24 + 8))(v24))
        {
          uint64_t v25 = +[NSMutableDictionary dictionary];
          uint64_t v26 = +[NSLocale currentLocale];
          char v27 = +[NSDate date];
          unsigned int v28 = [v27 descriptionWithLocale:v26];
          [v25 setObject:v28 forKeyedSubscript:@"RPIHistoryTime"];

          char v29 = +[NSData dataWithBytes:a1 + 146 length:20];
          [v25 setObject:v29 forKeyedSubscript:@"RPIHistoryOTAPayload"];

          int v30 = +[NSNumber numberWithUnsignedChar:v47];
          [v25 setObject:v30 forKeyedSubscript:@"RPIHistoryAEMVersion"];

          char v31 = +[NSNumber numberWithUnsignedChar:BYTE1(v47)];
          [v25 setObject:v31 forKeyedSubscript:@"RPIHistoryAEMTxPower"];

          char v32 = +[NSNumber numberWithDouble:CFAbsoluteTimeGetCurrent() + kCFAbsoluteTimeIntervalSince1970];
          [v25 setObject:v32 forKeyedSubscript:@"RPIHistorySecondsSince1970"];

          if (qword_1009F7ED0 != -1) {
            dispatch_once(&qword_1009F7ED0, &stru_1009AE798);
          }
          __int16 v33 = +[NSNumber numberWithUnsignedInt:sub_100717AC8(0.0)];
          [v25 setObject:v33 forKeyedSubscript:@"RPIHistoryENIntervalNumber"];

          double v34 = *(void **)(a1 + 168);
          id v35 = [v25 copy];
          [v34 insertObject:v35 atIndex:0];

          while ((unint64_t)[*(id *)(a1 + 168) count] >= 0x191)
            [*(id *)(a1 + 168) removeLastObject];
        }
        if (*(unsigned char *)(a1 + 113))
        {
          uint64_t v36 = *(void *)(a1 + 120);
          unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 128) - v36) >> 3);
          if (*(void *)(a1 + 128) != v36)
          {
            unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 128) - v36) >> 3);
            uint64_t v38 = 146;
            do
            {
              __int16 v39 = (const char *)v36;
              if (*(char *)(v36 + 23) < 0) {
                __int16 v39 = *(const char **)v36;
              }
              *(unsigned char *)(a1 + v38) = atoi(v39);
              uint64_t v40 = sub_100017768();
              if ((*(unsigned int (**)(uint64_t))(*(void *)v40 + 184))(v40))
              {
                __int16 v41 = qword_100A19FA0;
                if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT))
                {
                  double v42 = (const char *)v36;
                  if (*(char *)(v36 + 23) < 0) {
                    double v42 = *(const char **)v36;
                  }
                  int v43 = atoi(v42);
                  *(_DWORD *)std::string buf = 67109376;
                  *(_DWORD *)&uint8_t buf[4] = v38 - 145;
                  *(_WORD *)&uint8_t buf[8] = 1024;
                  *(_DWORD *)&buf[10] = v43;
                  _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Force Payload fCurrentAdvertisingPayload[%d] = %d", buf, 0xEu);
                }
              }
              v36 += 24;
              ++v38;
            }
            while (v36 != *(void *)(a1 + 128));
            LOBYTE(v37) = v45;
          }
        }
        else
        {
          LOBYTE(v37) = 20;
        }
        memcpy(a2, (const void *)(a1 + 146), v37);
        return 0;
      }
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19F90, OS_LOG_TYPE_ERROR)) {
      sub_1007698CC();
    }
    return 3;
  }
  return v11;
}

void sub_10044C948(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10044C9DC(uint64_t a1, void *a2, double a3)
{
  id v5 = a2;
  uint64_t v6 = sub_100035F54();
  if ((*(uint64_t (**)(uint64_t))(*(void *)v6 + 352))(v6))
  {
    if (*(void *)(a1 + 80))
    {
      int v7 = qword_100A19F90;
      if (os_log_type_enabled((os_log_t)qword_100A19F90, OS_LOG_TYPE_ERROR)) {
        sub_100769BDC(a1, v7, v8, v9, v10, v11, v12, v13);
      }
LABEL_16:
      uint64_t v14 = 12;
      goto LABEL_17;
    }
    if (v5)
    {
      uint64_t v15 = +[NSString stringWithFormat:@"%@-ENClient", v5];
      uint64_t v16 = *(void **)(a1 + 96);
      *(void *)(a1 + 96) = v15;
    }
    unint64_t v37 = 0;
    if (qword_1009F8168 != -1) {
      dispatch_once(&qword_1009F8168, &stru_1009AE7B8);
    }
    uint64_t v17 = qword_1009F8160;
    sub_10004191C(&__p, (char *)[*(id *)(a1 + 96) UTF8String]);
    int v18 = sub_100009254(v17, (uint64_t)&__p);
    int v19 = v18;
    if (SHIBYTE(v35) < 0)
    {
      operator delete(__p);
      if (v19)
      {
LABEL_14:
        BOOL v20 = qword_100A19F90;
        if (os_log_type_enabled((os_log_t)qword_100A19F90, OS_LOG_TYPE_ERROR)) {
          sub_100769B70((uint64_t)v5, v20, v21, v22, v23, v24, v25, v26);
        }
        goto LABEL_16;
      }
    }
    else if (v18)
    {
      goto LABEL_14;
    }
    if (qword_1009F8168 != -1) {
      dispatch_once(&qword_1009F8168, &stru_1009AE7B8);
    }
    uint64_t v28 = sub_100019C0C((void *)qword_1009F8160, v37);
    *(void *)(a1 + 80) = v28;
    if (!v28)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19F90, OS_LOG_TYPE_ERROR)) {
        sub_100769A6C();
      }
      goto LABEL_16;
    }
    if (*(unsigned char *)(a1 + 72) && (uint64_t v14 = sub_10044AAE4(a1), v14))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19F90, OS_LOG_TYPE_ERROR)) {
        sub_100769B08();
      }
    }
    else
    {
      std::string __p = 0;
      p_p = &__p;
      uint64_t v35 = 0x2020000000;
      int v36 = 0;
      uint64_t v29 = sub_100019878();
      v32[0] = _NSConcreteStackBlock;
      v32[1] = 3221225472;
      void v32[2] = sub_10044CDE0;
      void v32[3] = &unk_100999720;
      v32[4] = &__p;
      v32[5] = a1;
      sub_1000197D8(v29, v32);
      if (*((_DWORD *)p_p + 6))
      {
        if (os_log_type_enabled((os_log_t)qword_100A19F90, OS_LOG_TYPE_ERROR)) {
          sub_100769AA0();
        }
        sub_10044BC28(a1);
        uint64_t v14 = *((unsigned int *)p_p + 6);
      }
      else
      {
        *(double *)(a1 + 104) = a3;
        int v30 = qword_100A19FA0;
        if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_INFO))
        {
          uint64_t v31 = *(void *)(a1 + 96);
          *(_DWORD *)std::string buf = 134218242;
          double v39 = a3;
          __int16 v40 = 2112;
          uint64_t v41 = v31;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "started at %f with %@", buf, 0x16u);
        }
        uint64_t v14 = 0;
      }
      _Block_object_dispose(&__p, 8);
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19F90, OS_LOG_TYPE_ERROR)) {
      sub_100769C4C();
    }
    uint64_t v14 = 11;
  }
LABEL_17:

  return v14;
}

void sub_10044CD90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10044CDE0(uint64_t a1)
{
  uint64_t result = sub_10044B308(*(void *)(a1 + 40));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_10044CE14(uint64_t a1)
{
  uint64_t v2 = sub_100035F54();
  if ((*(uint64_t (**)(uint64_t))(*(void *)v2 + 352))(v2))
  {
    if (*(void *)(a1 + 80))
    {
      if (*(unsigned char *)(a1 + 72)
        && sub_10044BC28(a1)
        && os_log_type_enabled((os_log_t)qword_100A19F90, OS_LOG_TYPE_ERROR))
      {
        sub_100769D8C();
      }
      if (sub_10044BA4C(a1) && os_log_type_enabled((os_log_t)qword_100A19F90, OS_LOG_TYPE_ERROR)) {
        sub_100769D24();
      }
      if (qword_1009F8168 != -1) {
        dispatch_once(&qword_1009F8168, &stru_1009AE7B8);
      }
      uint64_t v3 = qword_1009F8160;
      unint64_t v4 = sub_100019D1C(*(void *)(a1 + 80));
      if (sub_10000A678(v3, v4))
      {
        id v5 = qword_100A19F90;
        if (os_log_type_enabled((os_log_t)qword_100A19F90, OS_LOG_TYPE_ERROR)) {
          sub_100769CB4(a1, v5, v6, v7, v8, v9, v10, v11);
        }
      }
      *(void *)(a1 + 80) = 0;
      uint64_t v12 = *(void **)(a1 + 96);
      *(void *)(a1 + 96) = @"unknown";

      [*(id *)(a1 + 288) stopActivityUpdates];
      uint64_t v13 = *(void **)(a1 + 280);
      *(void *)(a1 + 280) = 0;

      return 0;
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A19F90, OS_LOG_TYPE_ERROR)) {
        sub_100769C80();
      }
      return 12;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19F90, OS_LOG_TYPE_ERROR)) {
      sub_100769C4C();
    }
    return 11;
  }
}

void sub_10044CFFC(uint64_t a1)
{
  unsigned __int8 v113 = 0;
  uint64_t v2 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "ENScanWithDuplicateEnable");
  int v3 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, unsigned __int8 *))(*(void *)v2 + 72))(v2, buf, __p, &v113);
  if (v112 < 0) {
    operator delete(__p[0]);
  }
  if (v115 < 0)
  {
    operator delete(*(void **)buf);
    if (!v3) {
      goto LABEL_9;
    }
  }
  else if (!v3)
  {
    goto LABEL_9;
  }
  int v4 = v113;
  *(unsigned char *)(a1 + 112) = v113;
  id v5 = qword_100A19FA0;
  if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Overriding contactTracingEnableScanDuplicateFilters = %d ", buf, 8u);
  }
LABEL_9:
  uint64_t v6 = sub_100017768();
  sub_10004191C(buf, "ENForceCustomPayloadData");
  int v7 = (*(uint64_t (**)(uint64_t, uint8_t *, uint64_t))(*(void *)v6 + 120))(v6, buf, a1 + 120);
  int v8 = v7;
  if (v115 < 0)
  {
    operator delete(*(void **)buf);
    if (!v8) {
      goto LABEL_15;
    }
  }
  else if (!v7)
  {
    goto LABEL_15;
  }
  *(unsigned char *)(a1 + 113) = 1;
  uint64_t v9 = qword_100A19FA0;
  if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)std::string buf = 67109120;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Overriding ENForceCustomPayload = %d ", buf, 8u);
  }
LABEL_15:
  *(_WORD *)(a1 + 144) = 432;
  int v110 = 0;
  uint64_t v10 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "ENForceCustomAdvInterval");
  int v11 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v10 + 88))(v10, buf, __p, &v110);
  if (v112 < 0) {
    operator delete(__p[0]);
  }
  if (v115 < 0)
  {
    operator delete(*(void **)buf);
    if (!v11) {
      goto LABEL_23;
    }
  }
  else if (!v11)
  {
    goto LABEL_23;
  }
  int v12 = v110;
  *(_WORD *)(a1 + 144) = v110;
  uint64_t v13 = qword_100A19FA0;
  if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Overriding ENForceCustomAdvInterval = %d ", buf, 8u);
  }
LABEL_23:
  int v109 = 0;
  uint64_t v14 = sub_100017768();
  sub_10004191C(buf, "ENScanOverrides");
  sub_10004191C(__p, "ENOverrideScanWithDuplicatesDurationInMS");
  int v15 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v14 + 88))(v14, buf, __p, &v109);
  if (v112 < 0) {
    operator delete(__p[0]);
  }
  if (v115 < 0)
  {
    operator delete(*(void **)buf);
    if (!v15) {
      goto LABEL_31;
    }
  }
  else if (!v15)
  {
    goto LABEL_31;
  }
  int v16 = v109;
  *(_WORD *)(a1 + 214) = v109;
  uint64_t v17 = qword_100A19FA0;
  if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v16;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Overriding fNextScanWithDuplicatesDurationInMs = %d ", buf, 8u);
  }
LABEL_31:
  int v108 = 0;
  uint64_t v18 = sub_100017768();
  sub_10004191C(buf, "ENScanOverrides");
  sub_10004191C(__p, "ENOverrideExtraScanTimeInMs");
  int v19 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v18 + 88))(v18, buf, __p, &v108);
  if (v112 < 0) {
    operator delete(__p[0]);
  }
  if (v115 < 0)
  {
    operator delete(*(void **)buf);
    if (!v19) {
      goto LABEL_39;
    }
  }
  else if (!v19)
  {
    goto LABEL_39;
  }
  int v20 = v108;
  *(_WORD *)(a1 + 216) = v108;
  uint64_t v21 = qword_100A19FA0;
  if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v20;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Overriding fExtraScanTimeInMs = %d ", buf, 8u);
  }
LABEL_39:
  int v107 = 0;
  uint64_t v22 = sub_100017768();
  sub_10004191C(buf, "ENScanOverrides");
  sub_10004191C(__p, "ENOverrideNumOfSightingsHighThreshold");
  int v23 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v22 + 88))(v22, buf, __p, &v107);
  if (v112 < 0) {
    operator delete(__p[0]);
  }
  if (v115 < 0)
  {
    operator delete(*(void **)buf);
    if (!v23) {
      goto LABEL_47;
    }
  }
  else if (!v23)
  {
    goto LABEL_47;
  }
  int v24 = v107;
  *(_WORD *)(a1 + 218) = v107;
  uint64_t v25 = qword_100A19FA0;
  if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v24;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Overriding fNumOfSightingsHighThreshold = %d ", buf, 8u);
  }
LABEL_47:
  int v106 = 0;
  uint64_t v26 = sub_100017768();
  sub_10004191C(buf, "ENScanOverrides");
  sub_10004191C(__p, "ENOverrideRSSIHighThreshold");
  int v27 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v26 + 88))(v26, buf, __p, &v106);
  if (v112 < 0) {
    operator delete(__p[0]);
  }
  if (v115 < 0)
  {
    operator delete(*(void **)buf);
    if (!v27) {
      goto LABEL_55;
    }
  }
  else if (!v27)
  {
    goto LABEL_55;
  }
  int v28 = v106;
  *(_WORD *)(a1 + 220) = v106;
  uint64_t v29 = qword_100A19FA0;
  if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v28;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Overriding fHighRSSIThreshold = %d ", buf, 8u);
  }
LABEL_55:
  int v105 = 0;
  uint64_t v30 = sub_100017768();
  sub_10004191C(buf, "ENScanOverrides");
  sub_10004191C(__p, "ENOverrideShortAPWakeDeltaInSeconds");
  int v31 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v30 + 88))(v30, buf, __p, &v105);
  if (v112 < 0) {
    operator delete(__p[0]);
  }
  if (v115 < 0)
  {
    operator delete(*(void **)buf);
    if (!v31) {
      goto LABEL_63;
    }
  }
  else if (!v31)
  {
    goto LABEL_63;
  }
  int v32 = v105;
  *(_WORD *)(a1 + 222) = v105;
  __int16 v33 = qword_100A19FA0;
  if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v32;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "Overriding fAPWakeDeltaDurationNormalSeconds = %d ", buf, 8u);
  }
LABEL_63:
  int v104 = 0;
  uint64_t v34 = sub_100017768();
  sub_10004191C(buf, "ENScanOverrides");
  sub_10004191C(__p, "ENOverrideNormalAPWakeDeltaInSeconds");
  int v35 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v34 + 88))(v34, buf, __p, &v104);
  if (v112 < 0) {
    operator delete(__p[0]);
  }
  if (v115 < 0)
  {
    operator delete(*(void **)buf);
    if (!v35) {
      goto LABEL_71;
    }
  }
  else if (!v35)
  {
    goto LABEL_71;
  }
  int v36 = v104;
  *(_WORD *)(a1 + 224) = v104;
  unint64_t v37 = qword_100A19FA0;
  if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v36;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Overriding fAPWakeDeltaDurationShortSeconds = %d ", buf, 8u);
  }
LABEL_71:
  int v103 = 0;
  uint64_t v38 = sub_100017768();
  sub_10004191C(buf, "ENScanOverrides");
  sub_10004191C(__p, "ENOverrideStationaryDurationInSeconds");
  int v39 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v38 + 88))(v38, buf, __p, &v103);
  if (v112 < 0) {
    operator delete(__p[0]);
  }
  if (v115 < 0)
  {
    operator delete(*(void **)buf);
    if (!v39) {
      goto LABEL_79;
    }
  }
  else if (!v39)
  {
    goto LABEL_79;
  }
  int v40 = v103;
  *(_WORD *)(a1 + 226) = v103;
  uint64_t v41 = qword_100A19FA0;
  if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v40;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Overriding fStationaryDurationSeconds = %d ", buf, 8u);
  }
LABEL_79:
  int v102 = 0;
  uint64_t v42 = sub_100017768();
  sub_10004191C(buf, "ENScanOverrides");
  sub_10004191C(__p, "ENOverrideMaxDailyShortAPWakes");
  int v43 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v42 + 88))(v42, buf, __p, &v102);
  if (v112 < 0) {
    operator delete(__p[0]);
  }
  if (v115 < 0)
  {
    operator delete(*(void **)buf);
    if (!v43) {
      goto LABEL_87;
    }
  }
  else if (!v43)
  {
    goto LABEL_87;
  }
  int v44 = v102;
  *(_DWORD *)(a1 + 228) = (unsigned __int16)v102;
  unint64_t v45 = qword_100A19FA0;
  if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v44;
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "Overriding fMaxDailyShortAPWakeAllowanceInSeconds = %d ", buf, 8u);
  }
LABEL_87:
  unsigned __int8 v101 = 0;
  uint64_t v46 = sub_100017768();
  sub_10004191C(buf, "ENScanOverrides");
  sub_10004191C(__p, "ENEnableAdaptiveAPWakeScheduling");
  int v47 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, unsigned __int8 *))(*(void *)v46 + 72))(v46, buf, __p, &v101);
  if (v112 < 0) {
    operator delete(__p[0]);
  }
  if (v115 < 0)
  {
    operator delete(*(void **)buf);
    if (!v47) {
      goto LABEL_95;
    }
  }
  else if (!v47)
  {
    goto LABEL_95;
  }
  int v48 = v101;
  *(unsigned char *)(a1 + 249) = v101;
  unint64_t v49 = qword_100A19FA0;
  if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v48;
    _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "Overriding fEnableAdaptiveAPWakeScheduling = %d ", buf, 8u);
  }
LABEL_95:
  int v100 = 0;
  uint64_t v50 = sub_100017768();
  sub_10004191C(buf, "LeObserver");
  sub_10004191C(__p, "OverrideContactTracingScanDurationSeconds");
  int v51 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v50 + 88))(v50, buf, __p, &v100);
  if (v100) {
    int v52 = v51;
  }
  else {
    int v52 = 0;
  }
  if (v112 < 0) {
    operator delete(__p[0]);
  }
  if (v115 < 0)
  {
    operator delete(*(void **)buf);
    if (!v52) {
      goto LABEL_107;
    }
  }
  else if (!v52)
  {
    goto LABEL_107;
  }
  *(_DWORD *)(a1 + 252) = v100;
  uint64_t v53 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v53 + 176))(v53))
  {
    uint64_t v54 = qword_100A19FA0;
    if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT))
    {
      int v55 = *(_DWORD *)(a1 + 252);
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v55;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "Overriding fContactTracingScanDuration with %d seconds", buf, 8u);
    }
  }
LABEL_107:
  int v99 = 0;
  uint64_t v56 = sub_100017768();
  sub_10004191C(buf, "LeObserver");
  sub_10004191C(__p, "OverrideContactTracingScanDeltaSeconds");
  int v57 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v56 + 88))(v56, buf, __p, &v99);
  if (v112 < 0) {
    operator delete(__p[0]);
  }
  if (v115 < 0)
  {
    operator delete(*(void **)buf);
    if (!v57) {
      goto LABEL_116;
    }
  }
  else if (!v57)
  {
    goto LABEL_116;
  }
  *(_DWORD *)(a1 + 260) = v99;
  uint64_t v58 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v58 + 176))(v58))
  {
    long long v59 = qword_100A19FA0;
    if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT))
    {
      int v60 = *(_DWORD *)(a1 + 260);
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v60;
      _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "Overriding fContactTracingScanDelta with %d seconds", buf, 8u);
    }
  }
LABEL_116:
  int v98 = 0;
  uint64_t v61 = sub_100017768();
  sub_10004191C(buf, "LeObserver");
  sub_10004191C(__p, "OverrideContactTracingLowDutyScanDurationSeconds");
  int v62 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v61 + 88))(v61, buf, __p, &v98);
  if (v98) {
    int v63 = v62;
  }
  else {
    int v63 = 0;
  }
  if (v112 < 0) {
    operator delete(__p[0]);
  }
  if (v115 < 0)
  {
    operator delete(*(void **)buf);
    if (!v63) {
      goto LABEL_128;
    }
  }
  else if (!v63)
  {
    goto LABEL_128;
  }
  *(_WORD *)(a1 + 256) = v98;
  uint64_t v64 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v64 + 176))(v64))
  {
    int v65 = qword_100A19FA0;
    if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT))
    {
      int v66 = *(unsigned __int16 *)(a1 + 256);
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v66;
      _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "Overriding fLowDutyCycleScanDurationWhileContactTracing with %d seconds", buf, 8u);
    }
  }
LABEL_128:
  int v97 = 0;
  uint64_t v67 = sub_100017768();
  sub_10004191C(buf, "LeObserver");
  sub_10004191C(__p, "OverrideContactTracingLowDutyScanIntervalSeconds");
  int v68 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v67 + 88))(v67, buf, __p, &v97);
  if (v97) {
    int v69 = v68;
  }
  else {
    int v69 = 0;
  }
  if (v112 < 0) {
    operator delete(__p[0]);
  }
  if (v115 < 0)
  {
    operator delete(*(void **)buf);
    if (!v69) {
      goto LABEL_140;
    }
  }
  else if (!v69)
  {
    goto LABEL_140;
  }
  *(_WORD *)(a1 + 268) = v97;
  uint64_t v70 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v70 + 176))(v70))
  {
    id v71 = qword_100A19FA0;
    if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT))
    {
      int v72 = *(unsigned __int16 *)(a1 + 268);
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v72;
      _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "Overriding fLowDutyCycleScanIntervalWhileContactTracing with %d seconds", buf, 8u);
    }
  }
LABEL_140:
  int v96 = 0;
  uint64_t v73 = sub_100017768();
  sub_10004191C(buf, "LeObserver");
  sub_10004191C(__p, "OverrideContactTracingScanDurationA2DPWifi2GSeconds");
  int v74 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v73 + 88))(v73, buf, __p, &v96);
  if (v96) {
    int v75 = v74;
  }
  else {
    int v75 = 0;
  }
  if (v112 < 0) {
    operator delete(__p[0]);
  }
  if (v115 < 0)
  {
    operator delete(*(void **)buf);
    if (!v75) {
      goto LABEL_152;
    }
  }
  else if (!v75)
  {
    goto LABEL_152;
  }
  *(_WORD *)(a1 + 270) = v96;
  uint64_t v76 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v76 + 176))(v76))
  {
    uint64_t v77 = qword_100A19FA0;
    if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT))
    {
      int v78 = *(unsigned __int16 *)(a1 + 270);
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v78;
      _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "Overriding fContactTracingScanDurationWhileA2DPWifi2G with %d seconds", buf, 8u);
    }
  }
LABEL_152:
  int v95 = 0;
  uint64_t v79 = sub_100017768();
  sub_10004191C(buf, "ENScanOverrides");
  sub_10004191C(__p, "ENOverrideScanWithDuplicatesDurationA2DPWifi2GInMS");
  int v80 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v79 + 88))(v79, buf, __p, &v95);
  if (v112 < 0) {
    operator delete(__p[0]);
  }
  if (v115 < 0)
  {
    operator delete(*(void **)buf);
    if (!v80) {
      goto LABEL_161;
    }
  }
  else if (!v80)
  {
    goto LABEL_161;
  }
  *(_WORD *)(a1 + 272) = v95;
  uint64_t v81 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v81 + 176))(v81))
  {
    uint64_t v82 = qword_100A19FA0;
    if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v95;
      _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEFAULT, "Overriding fNextScanWithDuplicatesDurationA2DPWifi2GInMs = %d ", buf, 8u);
    }
  }
LABEL_161:
  int v94 = 0;
  uint64_t v83 = sub_100017768();
  sub_10004191C(buf, "ENScanOverrides");
  sub_10004191C(__p, "ENOverrideMaxAllowedRSSILevel");
  int v84 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v83 + 88))(v83, buf, __p, &v94);
  if (v112 < 0) {
    operator delete(__p[0]);
  }
  if (v115 < 0)
  {
    operator delete(*(void **)buf);
    if (!v84) {
      goto LABEL_170;
    }
  }
  else if (!v84)
  {
    goto LABEL_170;
  }
  *(unsigned char *)(a1 + 296) = v94;
  uint64_t v85 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v85 + 176))(v85))
  {
    id v86 = qword_100A19FA0;
    if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT))
    {
      int v87 = *(char *)(a1 + 296);
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v87;
      _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEFAULT, "Overriding fMaxAllowedRSSILevel = %d ", buf, 8u);
    }
  }
LABEL_170:
  uint64_t v88 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v88 + 352))(v88))
  {
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009AE7D8);
    }
    sub_10026B36C((uint64_t)off_1009F8068 + 64, a1 + 16);
    if (qword_1009F8248 != -1) {
      dispatch_once(&qword_1009F8248, &stru_1009AE758);
    }
    sub_10065B134((uint64_t)off_1009F8240, a1 + 24);
    if (qword_1009F8748 != -1) {
      dispatch_once(&qword_1009F8748, &stru_1009AE7F8);
    }
    sub_1002C3EBC((uint64_t)off_1009F8740 + 80, a1);
    if (qword_1009F85C8 != -1) {
      dispatch_once(&qword_1009F85C8, &stru_1009AE778);
    }
    sub_1000A7BDC((uint64_t)off_1009F85C0 + 1872, a1 + 8);
    uint64_t v89 = sub_10003FFD4();
    sub_10026B948(v89 + 288, a1 + 40);
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009AE7D8);
    }
    *(unsigned char *)(a1 + 88) = sub_1004E1EE0((uint64_t)off_1009F8068);
    uint64_t v90 = +[NSMutableArray array];
    unint64_t v91 = *(void **)(a1 + 168);
    *(void *)(a1 + 168) = v90;

    uint64_t v92 = objc_opt_new();
    uint64_t v93 = *(void **)(a1 + 288);
    *(void *)(a1 + 288) = v92;
  }
}

void sub_10044E478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v24 - 41) < 0) {
    operator delete(*(void **)(v24 - 64));
  }
  _Unwind_Resume(exception_object);
}

void sub_10044E540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned __int8 *a7)
{
  if (qword_1009F7ED0 != -1) {
    dispatch_once(&qword_1009F7ED0, &stru_1009AE798);
  }
  int v13 = sub_100717FF4(qword_1009F7EC8, a2, a3, a4, a7);
  uint64_t v14 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v14 + 184))(v14)
    && (int v15 = qword_100A19FA0, os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEBUG)))
  {
    int v17 = (char)a7[2];
    int v18 = a7[3];
    int v21 = 67111171;
    int v22 = v17;
    __int16 v23 = 1024;
    int v24 = a5;
    __int16 v25 = 1024;
    int v26 = v18;
    __int16 v27 = 1024;
    int v28 = a6;
    __int16 v29 = 1041;
    int v30 = 16;
    __int16 v31 = 2097;
    uint64_t v32 = a2;
    __int16 v33 = 1041;
    int v34 = 16;
    __int16 v35 = 2097;
    uint64_t v36 = a3;
    __int16 v37 = 1024;
    int v38 = v13;
    _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "decryptAEM Decrypted payload TXPower:%d rssi:%d calibratioConfidence:%d saturated:%d tek:%{private}.16P rpi:%{private}.16P result:%d", (uint8_t *)&v21, 0x40u);
    if (v13) {
      goto LABEL_6;
    }
  }
  else if (v13)
  {
LABEL_6:
    if (os_log_type_enabled((os_log_t)qword_100A19F90, OS_LOG_TYPE_ERROR)) {
      sub_100769DF4();
    }
    LOBYTE(v16) = -1;
    goto LABEL_16;
  }
  int v19 = (char)a7[2];
  if (((a5 == 127) & a6) != 0) {
    int v16 = 0;
  }
  else {
    int v16 = (v19 - a5) & ~((v19 - a5) >> 31);
  }
  if (!v16)
  {
    int v20 = qword_100A19F90;
    if (os_log_type_enabled((os_log_t)qword_100A19F90, OS_LOG_TYPE_ERROR))
    {
      int v21 = 67109888;
      int v22 = v19;
      __int16 v23 = 1024;
      int v24 = a5;
      __int16 v25 = 1024;
      int v26 = a6;
      __int16 v27 = 1024;
      int v28 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "decryptAEM returning 0 txPower:%d rssi:%d saturated:%d attn:%d", (uint8_t *)&v21, 0x1Au);
    }
  }
LABEL_16:
  a7[4] = v16;
}

void sub_10044E7A8()
{
  uint64_t v0 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v0 + 176))(v0))
  {
    uint64_t v1 = qword_100A19FA0;
    if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v2 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "scanDurationStarted", v2, 2u);
    }
  }
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009AE818);
  }
  sub_10067EA54((uint64_t)off_1009F7EB8);
}

void sub_10044E870(uint64_t a1)
{
  uint64_t v2 = qword_100A19FA0;
  if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 64);
    *(_DWORD *)std::string buf = 134217984;
    *(void *)&uint8_t buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "scanDurationDone, report the results for %lu total devices found", buf, 0xCu);
  }
  uint64_t v41 = a1;
  [*(id *)(a1 + 288) stopActivityUpdates];
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009AE778);
  }
  uint64_t v4 = a1;
  double v5 = *((double *)off_1009F85C0 + 285);
  *(unsigned char *)(a1 + 208) = -127;
  if (v5 == 0.0)
  {
    unsigned int v6 = 150;
  }
  else
  {
    unsigned int v6 = (CFAbsoluteTimeGetCurrent() - v5);
    uint64_t v4 = a1;
    if (v6 > 2 * *(unsigned __int16 *)(a1 + 222)) {
      unsigned int v6 = *(unsigned __int16 *)(a1 + 222);
    }
  }
  unsigned int v42 = v6;
  int v7 = *(_DWORD *)(v4 + 64);
  *(_WORD *)(v4 + 212) = v7 - *(_WORD *)(v4 + 210);
  uint64_t v8 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 176))(v8))
  {
    uint64_t v9 = qword_100A19FA0;
    if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = *(unsigned __int16 *)(v41 + 210);
      int v11 = *(__int16 *)(v41 + 212);
      *(_DWORD *)std::string buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = (unsigned __int16)v7;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v10;
      LOWORD(v62) = 1024;
      *(_DWORD *)((char *)&v62 + 2) = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "newNumOfSightings:%d lastNumOfSightings:%d delta:%d", buf, 0x14u);
    }
  }
  *(_WORD *)(v41 + 210) = v7;
  int v12 = *(void **)(v41 + 48);
  int v43 = (void *)(v41 + 56);
  if (v12 != (void *)(v41 + 56))
  {
    do
    {
      uint64_t v58 = 0;
      uint64_t v59 = 0;
      uint64_t v60 = 0;
      sub_100450A7C(&v58, v12[7], v12[8], (uint64_t)(v12[8] - v12[7]) >> 4);
      uint64_t v14 = v58;
      uint64_t v13 = v59;
      if (v59 != v58)
      {
        unsigned __int8 v15 = 0;
        __int16 v16 = 0;
        uint64_t v17 = *(void *)(v58 + 8);
        uint64_t v44 = v17 + 112;
        double v18 = *(double *)(v17 + 240) + kCFAbsoluteTimeIntervalSince1970;
        char v19 = -127;
        char v20 = 1;
        do
        {
          uint64_t v21 = *(void *)(v14 + 8);
          int v22 = *(char *)(v21 + 216);
          if (v22 == 127)
          {
            __int16 v23 = qword_100A19F90;
            if (os_log_type_enabled((os_log_t)qword_100A19F90, OS_LOG_TYPE_ERROR)) {
              sub_100769E5C(&v56, v57, v23);
            }
          }
          else
          {
            BOOL v24 = *(unsigned char *)(v21 + 217) != 0;
            if (v19 <= v22) {
              char v19 = *(unsigned char *)(v21 + 216);
            }
            uint64_t v25 = sub_100017768();
            v20 &= v24;
            ++v15;
            v16 += v22;
            if ((*(unsigned int (**)(uint64_t))(*(void *)v25 + 184))(v25))
            {
              int v26 = qword_100A19FA0;
              if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEBUG))
              {
                int v27 = *(unsigned __int8 *)(*(void *)(v14 + 8) + 217);
                *(_DWORD *)std::string buf = 67109632;
                *(_DWORD *)&uint8_t buf[4] = v15;
                *(_WORD *)&uint8_t buf[8] = 1024;
                *(_DWORD *)&buf[10] = v22;
                LOWORD(v62) = 1024;
                *(_DWORD *)((char *)&v62 + 2) = v27;
                _os_log_debug_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "%d) rssi:%d saturated:%d", buf, 0x14u);
              }
            }
          }
          v14 += 16;
        }
        while (v14 != v13);
        if (v15)
        {
          int v28 = *(char *)(v41 + 208);
          if (v19 > v28) {
            LOBYTE(v28) = v19;
          }
          *(unsigned char *)(v41 + 208) = v28;
          __int16 v29 = v16 / v15;
        }
        else
        {
          char v20 = 1;
          LOBYTE(v29) = 127;
          char v19 = 127;
        }
        uint64_t v54 = 0;
        int v55 = 0;
        long long v77 = xmmword_1007BA7E4;
        int v78 = 0;
        sub_100035F98((__n128 *)buf, (__n128 *)&v77);
        int v30 = *(atomic_uint **)(sub_10044A7B0(v44, buf) + 8);
        uint64_t v54 = &off_100998428;
        int v55 = v30;
        if (v30) {
          sub_100037354((uint64_t)v30);
        }
        __int16 v31 = +[NSData dataWithBytes:sub_10004A6E4((uint64_t)&v54) length:16];
        uint64_t v32 = +[NSData dataWithBytes:sub_10004A6E4((uint64_t)&v54) + 16 length:4];
        uint64_t v33 = sub_100017768();
        if ((*(unsigned int (**)(uint64_t))(*(void *)v33 + 184))(v33))
        {
          int v34 = qword_100A19FA0;
          if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 138414338;
            *(void *)&uint8_t buf[4] = v31;
            *(_WORD *)&unsigned char buf[12] = 2112;
            int v62 = v32;
            __int16 v63 = 1024;
            int v64 = (char)v29;
            __int16 v65 = 1024;
            int v66 = v19;
            __int16 v67 = 1024;
            int v68 = v20 & 1;
            __int16 v69 = 2048;
            double v70 = v18;
            __int16 v71 = 1024;
            unsigned int v72 = v42;
            __int16 v73 = 2048;
            uint64_t v74 = (v59 - v58) >> 4;
            __int16 v75 = 1024;
            int v76 = v15;
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "rpi:%@ aem:%@ avgRSSI:%d maxRSSI:%d saturated:%d timestamp:%f deltaSinceLastStop:%d reports:%lu validReports:%d", buf, 0x48u);
          }
        }
        if ((unint64_t)((v59 - v58) >> 4) >= 0xFF) {
          LOBYTE(v35) = -1;
        }
        else {
          uint64_t v35 = (v59 - v58) >> 4;
        }
        v45[0] = _NSConcreteStackBlock;
        v45[1] = 3221225472;
        __n128 v45[2] = sub_10044EFB8;
        v45[3] = &unk_1009AE718;
        id v36 = v31;
        id v46 = v36;
        id v37 = v32;
        id v47 = v37;
        char v50 = v29;
        char v51 = v19;
        char v52 = v35;
        char v53 = v20 & 1;
        double v48 = v18;
        unsigned int v49 = v42;
        sub_10044A7EC((os_unfair_lock_s *)(v41 + 176), v45);

        uint64_t v54 = &off_100998428;
        if (v55) {
          sub_1000368F4(v55);
        }
      }
      *(void *)std::string buf = &v58;
      sub_100450B58((void ***)buf);
      int v38 = (void *)v12[1];
      if (v38)
      {
        do
        {
          int v39 = v38;
          int v38 = (void *)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          int v39 = (void *)v12[2];
          BOOL v40 = *v39 == (void)v12;
          int v12 = v39;
        }
        while (!v40);
      }
      int v12 = v39;
    }
    while (v39 != v43);
  }
  sub_10045036C(v41 + 48, *(char **)(v41 + 56));
  *(void *)(v41 + 56) = 0;
  *(void *)(v41 + 64) = 0;
  *(void *)(v41 + 48) = v43;
}

void sub_10044EF3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,atomic_uint *a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,void **a35)
{
  if (a30) {
    sub_1000368F4(a30);
  }
  a35 = (void **)&a32;
  sub_100450B58(&a35);
  _Unwind_Resume(a1);
}

uint64_t sub_10044EFB0(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 222);
}

uint64_t sub_10044EFB8(uint64_t a1, uint64_t (***a2)(void, void, void, void, void, void, void, double))
{
  return (**a2)(a2, *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned __int16 *)(a1 + 60), *(unsigned __int8 *)(a1 + 62), *(unsigned __int8 *)(a1 + 63), *(unsigned __int16 *)(a1 + 56), *(double *)(a1 + 48));
}

void sub_10044EFFC(uint64_t a1, int a2)
{
  uint64_t v4 = qword_100A19FA0;
  if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "setting aggressive scan delta to %u seconds", (uint8_t *)v5, 8u);
  }
  *(_DWORD *)(a1 + 264) = a2;
}

uint64_t sub_10044F0B0(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 264);
  if (v1)
  {
    unsigned int v2 = 1000 * v1;
  }
  else
  {
    int v3 = *(_DWORD *)(a1 + 260);
    if (v3) {
      unsigned int v2 = 1000 * v3;
    }
    else {
      unsigned int v2 = 5;
    }
  }
  uint64_t v4 = v2;
  double v5 = qword_100A19FA0;
  if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 134217984;
    uint64_t v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "nextScanDelta=%llu ms", (uint8_t *)&v7, 0xCu);
  }
  return v4;
}

uint64_t sub_10044F184(uint64_t a1)
{
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_1009AE838);
  }
  if (sub_100053C90(off_1009F8150)) {
    int v2 = *(_DWORD *)(a1 + 252);
  }
  else {
    int v2 = *(unsigned __int16 *)(a1 + 256);
  }
  int v3 = 1000 * v2;
  if (qword_1009FB798 != -1) {
    dispatch_once(&qword_1009FB798, &stru_1009AE738);
  }
  unsigned int v4 = v3 + sub_10044F320((uint64_t)off_1009FB790);
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_1009AE838);
  }
  if (*((unsigned char *)off_1009F8150 + 197) && *(unsigned char *)(a1 + 250)) {
    unsigned int v4 = 1000 * *(unsigned __int16 *)(a1 + 270);
  }
  uint64_t v5 = v4;
  unsigned int v6 = qword_100A19FA0;
  if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *((unsigned __int8 *)off_1009F8150 + 197);
    int v8 = *(unsigned __int8 *)(a1 + 250);
    int v10 = 134218496;
    uint64_t v11 = v5;
    __int16 v12 = 1024;
    int v13 = v7;
    __int16 v14 = 1024;
    int v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "getNextTotalScanDurationInMs=%llu seconds A2DP:%d wifi2G:%d", (uint8_t *)&v10, 0x18u);
  }
  return v5;
}

uint64_t sub_10044F320(uint64_t a1)
{
  int v2 = qword_100A19FA0;
  if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int16 *)(a1 + 216);
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "getExtraScanDurationInMs %d", (uint8_t *)v5, 8u);
  }
  return *(unsigned __int16 *)(a1 + 216);
}

uint64_t sub_10044F3CC(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int16 *)(a1 + 214);
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_1009AE838);
  }
  if (*((unsigned char *)off_1009F8150 + 197) && *(unsigned char *)(a1 + 250)) {
    unsigned int v2 = *(unsigned __int16 *)(a1 + 272);
  }
  int v3 = qword_100A19FA0;
  if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *((unsigned __int8 *)off_1009F8150 + 197);
    int v5 = *(unsigned __int8 *)(a1 + 250);
    int v7 = 134218496;
    uint64_t v8 = v2;
    __int16 v9 = 1024;
    int v10 = v4;
    __int16 v11 = 1024;
    int v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "getNextScanWithDupsDurationInSeconds %llu A2DP:%d wifi2G:%d", (uint8_t *)&v7, 0x18u);
  }
  return v2;
}

uint64_t sub_10044F4E8(uint64_t a1)
{
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_1009AE838);
  }
  if (sub_100053C90(off_1009F8150)) {
    return 48;
  }
  else {
    return *(unsigned __int16 *)(a1 + 268);
  }
}

uint64_t sub_10044F54C(uint64_t a1)
{
  unsigned int v2 = +[NSDate date];
  [v2 timeIntervalSinceDate:*(void *)(a1 + 240)];

  if (!*(unsigned char *)(a1 + 249))
  {
    uint64_t v21 = sub_100017768();
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v21 + 176))(v21)) {
      return *(unsigned __int16 *)(a1 + 222);
    }
    double v18 = qword_100A19FA0;
    if (!os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT)) {
      return *(unsigned __int16 *)(a1 + 222);
    }
    int v22 = *(unsigned __int16 *)(a1 + 222);
    *(_DWORD *)std::string buf = 67109120;
    int v31 = v22;
    char v20 = "getNextScanAPWakeDelta adaptive AP Wake scheduling disabled, returning fAPWakeDeltaDurationNormalSeconds:%d";
    goto LABEL_17;
  }
  int v3 = qword_100A19FA0;
  if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int16 *)(a1 + 210);
    int v5 = *(char *)(a1 + 208);
    int v6 = *(_DWORD *)(a1 + 228);
    int v7 = *(unsigned __int16 *)(a1 + 232);
    int v8 = *(__int16 *)(a1 + 220);
    int v9 = *(unsigned __int16 *)(a1 + 218);
    *(_DWORD *)std::string buf = 67110400;
    int v31 = v4;
    __int16 v32 = 1024;
    int v33 = v5;
    __int16 v34 = 1024;
    int v35 = v6;
    __int16 v36 = 1024;
    int v37 = v7;
    __int16 v38 = 1024;
    BOOL v39 = v8;
    __int16 v40 = 1024;
    int v41 = v9;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "getNextScanAPWakeDelta fLastScanNumOfIndividualSightings:%d fLastScanMaxRSSI:%d fMaxDailyShortAPWakeAllowanceInSeconds:%dseconds fCurrentShortAPWakeTimeInSeconds:%dseconds fHighRSSIThreshold:%d fNumOfSightingsHighThreshold:%d", buf, 0x26u);
  }
  if (*(unsigned __int16 *)(a1 + 210) <= *(unsigned __int16 *)(a1 + 218)
    && *(__int16 *)(a1 + 220) > *(char *)(a1 + 208)
    || *(_DWORD *)(a1 + 228) <= *(unsigned __int16 *)(a1 + 232))
  {
    double v18 = qword_100A19FA0;
    if (!os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT)) {
      return *(unsigned __int16 *)(a1 + 222);
    }
    int v19 = *(unsigned __int16 *)(a1 + 222);
    *(_DWORD *)std::string buf = 67109120;
    int v31 = v19;
    char v20 = "getNextScanAPWakeDelta returning fAPWakeDeltaDurationNormalSeconds:%d";
LABEL_17:
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v20, buf, 8u);
    return *(unsigned __int16 *)(a1 + 222);
  }
  __int16 v29 = 0;
  uint64_t v10 = sub_10003FFD4();
  (*(void (**)(uint64_t, char *, __int16 *))(*(void *)v10 + 96))(v10, (char *)&v29 + 1, &v29);
  int v28 = 0;
  uint64_t v11 = sub_10003FFD4();
  (*(void (**)(uint64_t, int *))(*(void *)v11 + 120))(v11, &v28);
  int v12 = v28;
  int v13 = HIBYTE(v29);
  __int16 v14 = qword_100A19FA0;
  BOOL v15 = os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT);
  if (v13 || v12)
  {
    if (v15)
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Connected to power, not changing fCurrentShortAPWakeTimeInSeconds", buf, 2u);
    }
  }
  else
  {
    if (v15)
    {
      int v16 = *(unsigned __int16 *)(a1 + 232);
      int v17 = *(unsigned __int16 *)(a1 + 224);
      *(_DWORD *)std::string buf = 67109376;
      int v31 = v16;
      __int16 v32 = 1024;
      int v33 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "fCurrentShortAPWakeTimeInSeconds:%d adding %d", buf, 0xEu);
    }
    *(_WORD *)(a1 + 232) += *(_WORD *)(a1 + 224);
  }
  BOOL v24 = qword_100A19FA0;
  if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT))
  {
    int v25 = *(unsigned __int16 *)(a1 + 224);
    int v26 = *(unsigned __int16 *)(a1 + 232);
    *(_DWORD *)std::string buf = 67110144;
    int v31 = v25;
    __int16 v32 = 1024;
    int v33 = v26;
    __int16 v34 = 1024;
    int v35 = HIBYTE(v29);
    __int16 v36 = 1024;
    int v37 = v29;
    __int16 v38 = 1024;
    BOOL v39 = v12 != 0;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "getNextScanAPWakeDelta returning fAPWakeDeltaDurationShortSeconds:%d fCurrentShortAPWakeTimeInSeconds:%d battCharging:%d battCapacity:%d powerAdapterConnected:%d", buf, 0x20u);
  }
  return *(unsigned __int16 *)(a1 + 224);
}

void sub_10044F8FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10044F914(uint64_t a1, uint64_t a2)
{
  char v2 = BYTE4(a2);
  *(_WORD *)(a1 + 218) = WORD1(a2);
  *(unsigned char *)(a1 + 249) = a2 & 1;
  *(_WORD *)(a1 + 224) = HIWORD(a2);
  *(_WORD *)(a1 + 220) = a2 << 24 >> 56;
  int v4 = qword_100A19FA0;
  if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 67109120;
    int v9 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "setServerConfigParams fHighRSSIThreshold = %d ", (uint8_t *)&v8, 8u);
    int v4 = qword_100A19FA0;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(a1 + 249);
    int v8 = 67109120;
    int v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "setServerConfigParams fEnableAdaptiveAPWakeScheduling = %d ", (uint8_t *)&v8, 8u);
    int v4 = qword_100A19FA0;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(unsigned __int16 *)(a1 + 224);
    int v8 = 67109120;
    int v9 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "setServerConfigParams fAPWakeDeltaDurationShortSeconds = %d ", (uint8_t *)&v8, 8u);
    int v4 = qword_100A19FA0;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(unsigned __int16 *)(a1 + 218);
    int v8 = 67109120;
    int v9 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "setServerConfigParams fNumOfSightingsHighThreshold = %d ", (uint8_t *)&v8, 8u);
  }
}

void sub_10044FACC(uint64_t a1)
{
  char v2 = qword_100A19FA0;
  if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v23) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: ---------------- ContactTracing Manager ----------------", (uint8_t *)&v23, 2u);
    char v2 = qword_100A19FA0;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 80);
    int v4 = *(unsigned __int8 *)(a1 + 72);
    int v23 = 134218240;
    *(void *)BOOL v24 = v3;
    *(_WORD *)&v24[8] = 1024;
    LODWORD(v25) = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: fSession:%llx fStarted:%d", (uint8_t *)&v23, 0x12u);
    char v2 = qword_100A19FA0;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 96);
    uint64_t v6 = *(void *)(a1 + 104);
    int v23 = 138412546;
    *(void *)BOOL v24 = v5;
    *(_WORD *)&v24[8] = 2048;
    uint64_t v25 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: fSessionOwner:%@ fStartTime:%f", (uint8_t *)&v23, 0x16u);
    char v2 = qword_100A19FA0;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(char *)(a1 + 208);
    int v8 = *(unsigned __int16 *)(a1 + 210);
    int v9 = *(__int16 *)(a1 + 212);
    int v23 = 67109632;
    *(_DWORD *)BOOL v24 = v7;
    *(_WORD *)&void v24[4] = 1024;
    *(_DWORD *)&v24[6] = v8;
    LOWORD(v25) = 1024;
    *(_DWORD *)((char *)&v25 + 2) = v9;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: fLastScanMaxRSSI:%d fLastScanNumOfIndividualSightings:%d fLastSightingDelta:%d", (uint8_t *)&v23, 0x14u);
    char v2 = qword_100A19FA0;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = *(unsigned __int16 *)(a1 + 214);
    int v11 = *(unsigned __int16 *)(a1 + 216);
    int v23 = 67109376;
    *(_DWORD *)BOOL v24 = v10;
    *(_WORD *)&void v24[4] = 1024;
    *(_DWORD *)&v24[6] = v11;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: fNextScanWithDuplicatesDurationInMs:%d fExtraScanTimeInMs:%d", (uint8_t *)&v23, 0xEu);
    char v2 = qword_100A19FA0;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = *(unsigned __int16 *)(a1 + 218);
    int v13 = *(__int16 *)(a1 + 220);
    int v23 = 67109376;
    *(_DWORD *)BOOL v24 = v12;
    *(_WORD *)&void v24[4] = 1024;
    *(_DWORD *)&v24[6] = v13;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: fNumOfSightingsHighThreshold:%d fHighRSSIThreshold:%d", (uint8_t *)&v23, 0xEu);
    char v2 = qword_100A19FA0;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = *(unsigned __int16 *)(a1 + 222);
    int v15 = *(unsigned __int16 *)(a1 + 224);
    int v23 = 67109376;
    *(_DWORD *)BOOL v24 = v14;
    *(_WORD *)&void v24[4] = 1024;
    *(_DWORD *)&v24[6] = v15;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: fAPWakeDeltaDurationNormalSeconds:%d fAPWakeDeltaDurationShortSeconds:%d", (uint8_t *)&v23, 0xEu);
    char v2 = qword_100A19FA0;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = *(unsigned __int16 *)(a1 + 232);
    int v17 = *(_DWORD *)(a1 + 228);
    int v18 = *(unsigned __int8 *)(a1 + 248);
    int v23 = 67109632;
    *(_DWORD *)BOOL v24 = v16;
    *(_WORD *)&void v24[4] = 1024;
    *(_DWORD *)&v24[6] = v17;
    LOWORD(v25) = 1024;
    *(_DWORD *)((char *)&v25 + 2) = v18;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: fCurrentShortAPWakeTimeInSeconds:%d fMaxDailyShortAPWakeAllowanceInSeconds:%d fDayOfMonth:%d", (uint8_t *)&v23, 0x14u);
    char v2 = qword_100A19FA0;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v19 = *(unsigned __int16 *)(a1 + 234);
    int v20 = *(unsigned __int8 *)(a1 + 249);
    int v23 = 67109376;
    *(_DWORD *)BOOL v24 = v19;
    *(_WORD *)&void v24[4] = 1024;
    *(_DWORD *)&v24[6] = v20;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: fEstimatedAPWakeCount:%d fEnableAdaptiveAPWakeScheduling:%d", (uint8_t *)&v23, 0xEu);
    char v2 = qword_100A19FA0;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v21 = *(char *)(a1 + 296);
    int v23 = 67109120;
    *(_DWORD *)BOOL v24 = v21;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: fMaxAllowedRSSILevel:%d", (uint8_t *)&v23, 8u);
    char v2 = qword_100A19FA0;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v22 = *(unsigned __int16 *)(a1 + 274);
    int v23 = 67109120;
    *(_DWORD *)BOOL v24 = v22;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: fInvalidRSSIReportCounter:%d", (uint8_t *)&v23, 8u);
  }
}

uint64_t sub_10044FEF4()
{
  return 1;
}

void sub_10044FF00(uint64_t a1)
{
  sub_100450230(a1);

  operator delete();
}

uint64_t sub_10044FF44()
{
  return 1;
}

uint64_t **sub_10044FF4C(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    int v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    _DWORD v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      int v8 = (uint64_t *)v6[1];
    }
    else {
      int v8 = v6;
    }
    int v15 = result;
    int v16 = v8;
    int v17 = (const void **)v8;
    if (v8)
    {
      int v16 = sub_1002D8040((uint64_t)v8);
      if (a2 != a3)
      {
        int v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          uint64_t v18 = 0;
          int v10 = (uint64_t **)sub_1004500D4((uint64_t)v5, &v18, v17 + 4);
          sub_100036CA0(v5, v18, v10, (uint64_t *)v17);
          int v17 = (const void **)v16;
          if (v16) {
            int v16 = sub_1002D8040((uint64_t)v16);
          }
          int v11 = (void *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              int v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v12 = *a2 == (void)v9;
              int v9 = a2;
            }
            while (!v12);
          }
          int v8 = (uint64_t *)v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          int v9 = a2;
        }
        while (!v12);
      }
    }
    uint64_t result = (uint64_t **)sub_100450150((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)sub_1004501A8(v5, (uint64_t)(a2 + 4));
      int v13 = (void *)a2[1];
      if (v13)
      {
        do
        {
          int v14 = v13;
          int v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          int v14 = (void *)a2[2];
          BOOL v12 = *v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1004500C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1004500D4(uint64_t a1, void *a2, const void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v5 = (void *)v4;
        if (!sub_1000315FC(v7, a3, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v5;
        uint64_t result = v5;
        if (!*v5) {
          goto LABEL_9;
        }
      }
      uint64_t v4 = v5[1];
    }
    while (v4);
    uint64_t result = v5 + 1;
  }
  else
  {
    uint64_t result = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

uint64_t sub_100450150(uint64_t a1)
{
  sub_10004BA28(*(void *)a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_10004BA28(*(void *)a1, (char *)v2);
  }
  return a1;
}

uint64_t *sub_1004501A8(uint64_t **a1, uint64_t a2)
{
  memset(v6, 0, sizeof(v6));
  sub_10030BBC8((uint64_t)a1, a2, v6);
  uint64_t v5 = 0;
  uint64_t v3 = (uint64_t **)sub_1004500D4((uint64_t)a1, &v5, (const void **)v6[0] + 4);
  sub_100036CA0(a1, v5, v3, v6[0]);
  return v6[0];
}

void sub_10045020C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_1002B386C((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100450230(uint64_t a1)
{
  *(void *)a1 = off_1009AE590;
  *(void *)(a1 + 8) = off_1009AE620;
  *(void *)(a1 + 16) = off_1009AE680;
  *(void *)(a1 + 24) = off_1009AE6B0;
  *(void *)(a1 + 32) = off_1009AE6D8;
  *(void *)(a1 + 40) = &off_1009AE708;

  uint64_t v2 = *(void **)(a1 + 184);
  if (v2)
  {
    *(void *)(a1 + 192) = v2;
    operator delete(v2);
  }

  uint64_t v4 = (void **)(a1 + 120);
  sub_100051568(&v4);

  sub_10045036C(a1 + 48, *(char **)(a1 + 56));
  return a1;
}

void sub_10045036C(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_10045036C(a1, *(void *)a2);
    sub_10045036C(a1, *((void *)a2 + 1));
    uint64_t v4 = (void **)(a2 + 56);
    sub_100450B58(&v4);
    operator delete(a2);
  }
}

_OWORD *sub_1004503CC(uint64_t **a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v11 = 0;
  uint64_t v6 = (void **)sub_100450468((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    int v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x50uLL);
    int v9 = *((_DWORD *)*a4 + 4);
    _DWORD v7[2] = **a4;
    *((_DWORD *)v7 + 12) = v9;
    *((void *)v7 + 8) = 0;
    *((void *)v7 + 9) = 0;
    *((void *)v7 + 7) = 0;
    sub_100036CA0(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

void *sub_100450468(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t result = (void *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
LABEL_2:
    while (2)
    {
      uint64_t v6 = 0;
      uint64_t v7 = v4;
      do
      {
        unsigned int v8 = *(unsigned __int8 *)(a3 + v6);
        unsigned int v9 = *((unsigned __int8 *)v7 + v6 + 32);
        if (v8 < v9)
        {
          uint64_t v4 = (void *)*v7;
          uint64_t result = v7;
          if (*v7) {
            goto LABEL_2;
          }
          goto LABEL_22;
        }
      }
      while (v9 >= v8 && v6++ != 19);
      uint64_t v11 = 0;
      while (1)
      {
        unsigned int v12 = *((unsigned __int8 *)v7 + v11 + 32);
        unsigned int v13 = *(unsigned __int8 *)(a3 + v11);
        if (v12 < v13) {
          break;
        }
        if (v13 < v12 || v11++ == 19) {
          goto LABEL_22;
        }
      }
      uint64_t result = v7 + 1;
      uint64_t v4 = (void *)v7[1];
      if (v4) {
        continue;
      }
      break;
    }
  }
  else
  {
    uint64_t v7 = result;
  }
LABEL_22:
  *a2 = v7;
  return result;
}

void sub_1004504F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = *(void *)(a2 + 8);
  *uint64_t v3 = &off_100998468;
  v3[1] = v4;
  if (v4) {
    sub_100037354(v4);
  }
  *(void *)(a1 + 8) = v3 + 2;
}

void sub_100450548(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100450550(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (a1[1] - *a1) >> 4;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60) {
    abort();
  }
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v9 = v8 - v2;
  if (v9 >> 3 > v4) {
    unint64_t v4 = v9 >> 3;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v20 = v7;
  uint64_t v11 = (char *)sub_10036C440(v7, v10);
  unsigned int v12 = &v11[16 * v3];
  v17[0] = v11;
  v17[1] = v12;
  uint64_t v18 = v12;
  int v19 = &v11[16 * v13];
  *(void *)unsigned int v12 = &off_100998468;
  uint64_t v14 = *(void *)(a2 + 8);
  *((void *)v12 + 1) = v14;
  if (v14)
  {
    sub_100037354(v14);
    unsigned int v12 = v18;
  }
  uint64_t v18 = v12 + 16;
  sub_100450644(a1, v17);
  uint64_t v15 = a1[1];
  sub_100450700((uint64_t)v17);
  return v15;
}

void sub_100450630(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100450700((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100450644(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a2[1];
  if (v4 != *a1)
  {
    uint64_t v7 = v6 - 16;
    do
    {
      *(void *)(v6 - 16) = &off_100998468;
      v6 -= 16;
      uint64_t v8 = *(void *)(v4 - 8);
      *(void *)(v6 + 8) = v8;
      if (v8) {
        sub_100037354(v8);
      }
      v4 -= 16;
      v7 -= 16;
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  uint64_t v9 = *a1;
  *a1 = v6;
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
}

uint64_t sub_100450700(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void (***)(void))(i - 16);
    *(void *)(a1 + 16) = i - 16;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10045076C(id a1)
{
}

void sub_1004507A4(id a1)
{
}

void sub_1004507E8()
{
}

void sub_10045080C(id a1)
{
}

void sub_100450850()
{
}

void sub_100450874(id a1)
{
}

void sub_1004508B8()
{
}

void sub_1004508DC(id a1)
{
}

void sub_100450920()
{
}

void sub_100450944(id a1)
{
}

void sub_100450988()
{
}

void sub_1004509AC(id a1)
{
}

void sub_1004509F0()
{
}

void sub_100450A14(id a1)
{
}

void sub_100450A58()
{
}

void *sub_100450A7C(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_10036C400(result, a4);
    uint64_t result = sub_100450ADC((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_100450AD4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *sub_100450ADC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    uint64_t v7 = a4;
    do
    {
      uint64_t v8 = *(void *)(v6 + 8);
      void *v4 = &off_100998468;
      v4[1] = v8;
      if (v8) {
        sub_100037354(v8);
      }
      v6 += 16;
      v4 += 2;
      v7 += 2;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_100450B58(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 16;
      uint64_t v7 = v4 - 16;
      uint64_t v8 = v4 - 16;
      do
      {
        uint64_t v9 = *(void (***)(char *))v8;
        v8 -= 16;
        (*v9)(v7);
        v6 -= 16;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_100450C18(id a1)
{
}

void sub_100450DA8()
{
}

uint64_t sub_100450DCC(uint64_t a1)
{
  *(void *)a1 = off_1009AE868;
  *(void *)(a1 + 8) = off_1009AE8F8;
  *(void *)(a1 + 16) = off_1009AE918;
  *(void *)(a1 + 24) = off_1009AE940;
  *(void *)(a1 + 32) = &off_1009AE980;
  *(void *)(a1 + 40) = &off_1009AE998;
  *(void *)(a1 + 48) = &off_1009AE9B0;
  sub_100052DA8(a1 + 56);
  *(_WORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)(a1 + 272) = 0;
  return a1;
}

void sub_100450EF8(uint64_t a1)
{
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009AEAB8);
  }
  sub_100457490(qword_1009F8160 + 8, a1 + 8);
  if (qword_1009F87A8 != -1) {
    dispatch_once(&qword_1009F87A8, &stru_1009AEAD8);
  }
  sub_1000CED0C((uint64_t)off_1009F87A0 + 24, a1 + 16);
  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_1009AEAF8);
  }
  sub_10060C070(off_1009F8760, a1 + 24);
  if (qword_1009F8090 != -1) {
    dispatch_once(&qword_1009F8090, &stru_1009AEB18);
  }
  sub_1004D12B0(off_1009F8088, a1 + 32);
  if (qword_1009F8748 != -1) {
    dispatch_once(&qword_1009F8748, &stru_1009AEB38);
  }
  sub_1002C3EBC((uint64_t)off_1009F8740 + 80, a1 + 40);
  *(_WORD *)(a1 + 120) = 0;
}

void sub_100451040(uint64_t a1)
{
  if (qword_1009F8748 != -1) {
    dispatch_once(&qword_1009F8748, &stru_1009AEB38);
  }
  sub_100052718((uint64_t)off_1009F8740 + 80, a1 + 40);
  if (qword_1009F8090 != -1) {
    dispatch_once(&qword_1009F8090, &stru_1009AEB18);
  }
  sub_1004D13BC((uint64_t)off_1009F8088, a1 + 32);
  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_1009AEAF8);
  }
  sub_10060C1AC((uint64_t)off_1009F8760, a1 + 24);
  if (qword_1009F87A8 != -1) {
    dispatch_once(&qword_1009F87A8, &stru_1009AEAD8);
  }
  sub_100052718((uint64_t)off_1009F87A0 + 24, a1 + 16);
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009AEAB8);
  }
  sub_100052718(qword_1009F8160 + 8, a1 + 8);
  uint64_t v2 = *(unint64_t **)(a1 + 232);
  if (v2 != *(unint64_t **)(a1 + 240))
  {
    do
    {
      unint64_t v3 = *v2;
      if (qword_1009F8168 != -1) {
        dispatch_once(&qword_1009F8168, &stru_1009AEAB8);
      }
      sub_1005536D8(qword_1009F8160, v3);
      if (qword_1009F8168 != -1) {
        dispatch_once(&qword_1009F8168, &stru_1009AEAB8);
      }
      sub_100553B9C(qword_1009F8160, v3);
      ++v2;
    }
    while (v2 != *(unint64_t **)(a1 + 240));
    uint64_t v2 = *(unint64_t **)(a1 + 232);
  }
  *(void *)(a1 + 240) = v2;
}

uint64_t sub_100451228(void *a1, uint64_t a2)
{
  v20[0] = 0;
  v20[1] = 0;
  sub_10003AED0((uint64_t)v20, (uint64_t)(a1 + 7));
  uint64_t v4 = (void *)a1[26];
  uint64_t v5 = (void *)a1[27];
  uint64_t v6 = v4;
  if (v4 != v5)
  {
    while (*v6 != a2)
    {
      if (++v6 == v5)
      {
        uint64_t v6 = (void *)a1[27];
        break;
      }
    }
  }
  if (v6 == v5)
  {
    unint64_t v7 = a1[28];
    if ((unint64_t)v5 >= v7)
    {
      uint64_t v9 = v5 - v4;
      if ((unint64_t)(v9 + 1) >> 61) {
        abort();
      }
      uint64_t v10 = v7 - (void)v4;
      uint64_t v11 = v10 >> 2;
      if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
        uint64_t v11 = v9 + 1;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      if (v12) {
        uint64_t v13 = (char *)sub_1000405F8((uint64_t)(a1 + 28), v12);
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = &v13[8 * v9];
      uint64_t v15 = &v13[8 * v12];
      *(void *)uint64_t v14 = a2;
      uint64_t v8 = v14 + 8;
      int v17 = (char *)a1[26];
      int v16 = (char *)a1[27];
      if (v16 != v17)
      {
        do
        {
          uint64_t v18 = *((void *)v16 - 1);
          v16 -= 8;
          *((void *)v14 - 1) = v18;
          v14 -= 8;
        }
        while (v16 != v17);
        int v16 = (char *)a1[26];
      }
      a1[26] = v14;
      a1[27] = v8;
      a1[28] = v15;
      if (v16) {
        operator delete(v16);
      }
    }
    else
    {
      void *v5 = a2;
      uint64_t v8 = v5 + 1;
    }
    a1[27] = v8;
  }
  return sub_10003AFB4((uint64_t)v20);
}

void sub_100451350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100451364(uint64_t a1, uint64_t a2)
{
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 56);
  uint64_t v5 = *(char **)(a1 + 208);
  uint64_t v4 = *(char **)(a1 + 216);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 216);
        break;
      }
    }
  }
  if (v5 != v4)
  {
    int64_t v6 = v4 - (v5 + 8);
    if (v4 != v5 + 8) {
      memmove(v5, v5 + 8, v4 - (v5 + 8));
    }
    *(void *)(a1 + 216) = &v5[v6];
  }
  return sub_10003AFB4((uint64_t)v8);
}

uint64_t sub_100451400(uint64_t a1, uint64_t a2)
{
  v13[0] = 0;
  v13[1] = 0;
  sub_10003AED0((uint64_t)v13, a1 + 56);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  sub_100040550(&v10, a1 + 208);
  sub_10003AFE8((uint64_t)v13);
  uint64_t v4 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a2, __p);
    uint64_t v5 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446210;
    uint64_t v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Device %{public}s was plugged in", buf, 0xCu);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }
  int64_t v6 = v10;
  if (v10 != v11)
  {
    do
    {
      (*(void (**)(void, uint64_t))(*(void *)*v6 + 16))(*v6, a2);
      ++v6;
    }
    while (v6 != v11);
    int64_t v6 = v10;
  }
  if (v6)
  {
    uint64_t v11 = v6;
    operator delete(v6);
  }
  return sub_10003AFB4((uint64_t)v13);
}

void sub_100451570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1004515AC(uint64_t a1, uint64_t a2)
{
  v13[0] = 0;
  v13[1] = 0;
  sub_10003AED0((uint64_t)v13, a1 + 56);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  sub_100040550(&v10, a1 + 208);
  sub_10003AFE8((uint64_t)v13);
  uint64_t v4 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a2, __p);
    uint64_t v5 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446210;
    uint64_t v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Device %{public}s was unplugged", buf, 0xCu);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }
  int64_t v6 = v10;
  if (v10 != v11)
  {
    do
    {
      (*(void (**)(void, uint64_t))(*(void *)*v6 + 24))(*v6, a2);
      ++v6;
    }
    while (v6 != v11);
    int64_t v6 = v10;
  }
  if (v6)
  {
    uint64_t v11 = v6;
    operator delete(v6);
  }
  return sub_10003AFB4((uint64_t)v13);
}

void sub_10045171C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100451758(uint64_t a1, uint64_t a2)
{
  v13[0] = 0;
  v13[1] = 0;
  sub_10003AED0((uint64_t)v13, a1 + 56);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  sub_100040550(&v10, a1 + 208);
  sub_10003AFE8((uint64_t)v13);
  uint64_t v4 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a2, __p);
    uint64_t v5 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446210;
    uint64_t v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Device %{public}s was registered as a new accessory", buf, 0xCu);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }
  int64_t v6 = v10;
  if (v10 != v11)
  {
    do
    {
      (*(void (**)(void, uint64_t))(*(void *)*v6 + 32))(*v6, a2);
      ++v6;
    }
    while (v6 != v11);
    int64_t v6 = v10;
  }
  if (v6)
  {
    uint64_t v11 = v6;
    operator delete(v6);
  }
  return sub_10003AFB4((uint64_t)v13);
}

void sub_1004518C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100451904(uint64_t a1, uint64_t a2)
{
  v13[0] = 0;
  v13[1] = 0;
  sub_10003AED0((uint64_t)v13, a1 + 56);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  sub_100040550(&v10, a1 + 208);
  sub_10003AFE8((uint64_t)v13);
  uint64_t v4 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_INFO))
  {
    sub_100474E18(a2, __p);
    uint64_t v5 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446210;
    uint64_t v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Device %{public}s reported a battery level change", buf, 0xCu);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }
  int64_t v6 = v10;
  if (v10 != v11)
  {
    do
    {
      (*(void (**)(void, uint64_t))(*(void *)*v6 + 40))(*v6, a2);
      ++v6;
    }
    while (v6 != v11);
    int64_t v6 = v10;
  }
  if (v6)
  {
    uint64_t v11 = v6;
    operator delete(v6);
  }
  return sub_10003AFB4((uint64_t)v13);
}

void sub_100451A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100451AB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v19[0] = 0;
  v19[1] = 0;
  sub_10003AED0((uint64_t)v19, a1 + 56);
  int v16 = 0;
  int v17 = 0;
  uint64_t v18 = 0;
  sub_100040550(&v16, a1 + 208);
  sub_10003AFE8((uint64_t)v19);
  uint64_t v10 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_INFO))
  {
    sub_100474E18(a2, __p);
    uint64_t v11 = v15 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446978;
    int v21 = v11;
    __int16 v22 = 1024;
    int v23 = a3;
    __int16 v24 = 1024;
    int v25 = a4;
    __int16 v26 = 1024;
    int v27 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Device %{public}s reported command status: type %d, result %u, reason %u", buf, 0x1Eu);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v12 = v16;
  if (v16 != v17)
  {
    do
    {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)*v12 + 48))(*v12, a2, a3, a4, a5);
      ++v12;
    }
    while (v12 != v17);
    uint64_t v12 = v16;
  }
  if (v12)
  {
    int v17 = v12;
    operator delete(v12);
  }
  return sub_10003AFB4((uint64_t)v19);
}

void sub_100451C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100451C98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v17[0] = 0;
  v17[1] = 0;
  sub_10003AED0((uint64_t)v17, a1 + 56);
  uint64_t v14 = 0;
  char v15 = 0;
  uint64_t v16 = 0;
  sub_100040550(&v14, a1 + 208);
  sub_10003AFE8((uint64_t)v17);
  uint64_t v8 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_INFO))
  {
    sub_100474E18(a2, __p);
    char v9 = v13 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446466;
    int v19 = v9;
    __int16 v20 = 1024;
    int v21 = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Device %{public}s Context Detect msg received, len: %d", buf, 0x12u);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v10 = v14;
  if (v14 != v15)
  {
    do
    {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*v10 + 56))(*v10, a2, a3, a4);
      ++v10;
    }
    while (v10 != v15);
    uint64_t v10 = v14;
  }
  if (v10)
  {
    char v15 = v10;
    operator delete(v10);
  }
  return sub_10003AFB4((uint64_t)v17);
}

void sub_100451E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100451E68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v17[0] = 0;
  v17[1] = 0;
  sub_10003AED0((uint64_t)v17, a1 + 56);
  uint64_t v14 = 0;
  char v15 = 0;
  uint64_t v16 = 0;
  sub_100040550(&v14, a1 + 208);
  sub_10003AFE8((uint64_t)v17);
  uint64_t v8 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_INFO))
  {
    sub_100474E18(a2, __p);
    char v9 = v13 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446466;
    int v19 = v9;
    __int16 v20 = 1024;
    int v21 = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Device %{public}s Conversation Detect msg received, len: %d", buf, 0x12u);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v10 = v14;
  if (v14 != v15)
  {
    do
    {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*v10 + 64))(*v10, a2, a3, a4);
      ++v10;
    }
    while (v10 != v15);
    uint64_t v10 = v14;
  }
  if (v10)
  {
    char v15 = v10;
    operator delete(v10);
  }
  return sub_10003AFB4((uint64_t)v17);
}

void sub_100451FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100452038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v17[0] = 0;
  v17[1] = 0;
  sub_10003AED0((uint64_t)v17, a1 + 56);
  uint64_t v14 = 0;
  char v15 = 0;
  uint64_t v16 = 0;
  sub_100040550(&v14, a1 + 208);
  sub_10003AFE8((uint64_t)v17);
  uint64_t v8 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_INFO))
  {
    sub_100474E18(a2, __p);
    char v9 = v13 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446466;
    int v19 = v9;
    __int16 v20 = 1024;
    int v21 = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Device %{public}s PME config msg received, len: %d", buf, 0x12u);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v10 = v14;
  if (v14 != v15)
  {
    do
    {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*v10 + 72))(*v10, a2, a3, a4);
      ++v10;
    }
    while (v10 != v15);
    uint64_t v10 = v14;
  }
  if (v10)
  {
    char v15 = v10;
    operator delete(v10);
  }
  return sub_10003AFB4((uint64_t)v17);
}

void sub_1004521CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100452208(uint64_t a1, uint64_t a2)
{
  v26[0] = 0;
  v26[1] = 0;
  sub_10003AED0((uint64_t)v26, a1 + 56);
  int v23 = 0;
  __int16 v24 = 0;
  uint64_t v25 = 0;
  sub_100040550(&v23, a1 + 208);
  sub_10003AFE8((uint64_t)v26);
  uint64_t v4 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_INFO))
  {
    sub_100474E18(a2, __p);
    uint64_t v5 = v22 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446210;
    int v30 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Device %{public}s reported in ear state change", buf, 0xCu);
    if (v22 < 0) {
      operator delete(__p[0]);
    }
  }
  for (uint64_t i = v23; i != v24; ++i)
    (*(void (**)(void, uint64_t))(*(void *)*i + 80))(*i, a2);
  if (sub_10053FE68())
  {
    *(_DWORD *)std::string buf = 0;
    unsigned int v20 = 0;
    if (qword_1009F80A0 != -1) {
      dispatch_once(&qword_1009F80A0, &stru_1009AEB58);
    }
    sub_10028FEDC((uint64_t)off_1009F8098, a2, (int *)buf, (int *)&v20);
    sub_100475EE0(a2, (uint64_t)__p);
    if (v22 >= 0) {
      unint64_t v7 = __p;
    }
    else {
      unint64_t v7 = (void **)__p[0];
    }
    uint64_t v8 = +[NSString stringWithUTF8String:v7];
    if (v22 < 0) {
      operator delete(__p[0]);
    }
    sub_1004A82EC((unsigned __int8 *)(a2 + 128), __p);
    if (v22 >= 0) {
      char v9 = __p;
    }
    else {
      char v9 = (void **)__p[0];
    }
    uint64_t v10 = +[NSString stringWithUTF8String:v9];
    if (v22 < 0) {
      operator delete(__p[0]);
    }
    v27[0] = @"primaryInEarStatus";
    uint64_t v11 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)buf];
    v28[0] = v11;
    v27[1] = @"secondaryInEarStatus";
    uint64_t v12 = +[NSNumber numberWithUnsignedInt:v20];
    v28[1] = v12;
    char v13 = +[_CDContextQueries bluetoothNameKey];
    void v27[2] = v13;
    v28[2] = v8;
    uint64_t v14 = +[_CDContextQueries bluetoothAddressKey];
    v27[3] = v14;
    void v28[3] = v10;
    char v15 = +[NSDictionary dictionaryWithObjects:v28 forKeys:v27 count:4];

    uint64_t v16 = +[_CDContextualKeyPath keyPathWithKey:@"/bluetooth/inEarStatus"];
    id v17 = [v15 copy];
    uint64_t v18 = +[_CDClientContext userContext];
    [v18 setObject:v17 forKeyedSubscript:v16];
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
  {
    sub_100769E9C();
  }
  if (v23)
  {
    __int16 v24 = v23;
    operator delete(v23);
  }
  return sub_10003AFB4((uint64_t)v26);
}

void sub_100452590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, uint64_t a19, char a20)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_100452680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v22[0] = 0;
  v22[1] = 0;
  sub_10003AED0((uint64_t)v22, a1 + 56);
  int v19 = 0;
  unsigned int v20 = 0;
  uint64_t v21 = 0;
  sub_100040550(&v19, a1 + 208);
  sub_10003AFE8((uint64_t)v22);
  uint64_t v12 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_INFO))
  {
    sub_100474E18(a2, __p);
    char v13 = v18 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136448258;
    __int16 v24 = v13;
    __int16 v25 = 1024;
    int v26 = a3;
    __int16 v27 = 1024;
    int v28 = BYTE1(a3);
    __int16 v29 = 1024;
    int v30 = BYTE2(a3);
    __int16 v31 = 1024;
    int v32 = BYTE3(a3);
    __int16 v33 = 1024;
    int v34 = BYTE4(a3);
    __int16 v35 = 1024;
    int v36 = BYTE5(a3);
    __int16 v37 = 1024;
    int v38 = a4;
    __int16 v39 = 1024;
    int v40 = a5;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Device %{public}s relay msg received: srcAddr %02X:%02X:%02X:%02X:%02X:%02X, type %d, len %d", buf, 0x3Cu);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v14 = v19;
  if (v19 != v20)
  {
    uint64_t v15 = a3 & 0xFFFFFFFFFFFFLL;
    do
    {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)*v14 + 88))(*v14, a2, v15, a4, a5, a6);
      ++v14;
    }
    while (v14 != v20);
    uint64_t v14 = v19;
  }
  if (v14)
  {
    unsigned int v20 = v14;
    operator delete(v14);
  }
  return sub_10003AFB4((uint64_t)v22);
}

void sub_100452888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1004528C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v15[0] = 0;
  v15[1] = 0;
  sub_10003AED0((uint64_t)v15, a1 + 56);
  uint64_t v12 = 0;
  char v13 = 0;
  uint64_t v14 = 0;
  sub_100040550(&v12, a1 + 208);
  sub_10003AFE8((uint64_t)v15);
  int64_t v6 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_INFO))
  {
    sub_100474E18(a2, __p);
    unint64_t v7 = v11 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446466;
    id v17 = v7;
    __int16 v18 = 1024;
    int v19 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Device %{public}s stream state changed: %u", buf, 0x12u);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v8 = v12;
  if (v12 != v13)
  {
    do
    {
      (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v8 + 96))(*v8, a2, a3);
      ++v8;
    }
    while (v8 != v13);
    uint64_t v8 = v12;
  }
  if (v8)
  {
    char v13 = v8;
    operator delete(v8);
  }
  return sub_10003AFB4((uint64_t)v15);
}

void sub_100452A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100452A84(uint64_t a1, uint64_t a2)
{
  v16[0] = 0;
  v16[1] = 0;
  sub_10003AED0((uint64_t)v16, a1 + 56);
  uint64_t v4 = *(unint64_t **)(a1 + 256);
  if (v4 == *(unint64_t **)(a1 + 264))
  {
    uint64_t v11 = 106;
  }
  else
  {
    do
    {
      if (qword_1009F8168 != -1) {
        dispatch_once(&qword_1009F8168, &stru_1009AEAB8);
      }
      if (sub_1000181D0(qword_1009F8160, *v4))
      {
        v4 += 7;
        uint64_t v5 = *(void *)(a1 + 264);
      }
      else
      {
        int64_t v6 = qword_100A19E40;
        if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Warning: AccessoryManager, Invalid BTAccessoryManager handle - removing associated callbacks", buf, 2u);
        }
        sub_100457B34((uint64_t)(v4 + 7), *(void *)(a1 + 264), (uint64_t)v4);
        uint64_t v5 = v7;
        *(void *)(a1 + 264) = v7;
      }
    }
    while (v4 != (unint64_t *)v5);
    uint64_t v8 = *(void *)(a1 + 256);
    *(void *)std::string buf = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    sub_100457B88((char *)buf, v8, v5, 0x6DB6DB6DB6DB6DB7 * ((v5 - v8) >> 3));
    sub_10003AFE8((uint64_t)v16);
    char v9 = *(unint64_t **)buf;
    uint64_t v10 = v14;
    if (*(unint64_t **)buf != v14)
    {
      do
      {
        if (qword_1009F8168 != -1) {
          dispatch_once(&qword_1009F8168, &stru_1009AEAB8);
        }
        sub_1000181D0(qword_1009F8160, *v9);
        if (qword_1009F7F00 != -1) {
          dispatch_once(&qword_1009F7F00, &stru_1009AEB78);
        }
        sub_1004A93A0((uint64_t)off_1009F7EF8, *v9, a2);
        if (v9[1])
        {
          if (qword_1009FB160 != -1) {
            dispatch_once(&qword_1009FB160, &stru_1009AEB98);
          }
          operator new();
        }
        v9 += 7;
      }
      while (v9 != v10);
      char v9 = *(unint64_t **)buf;
    }
    if (v9)
    {
      uint64_t v14 = v9;
      operator delete(v9);
    }
    uint64_t v11 = 0;
  }
  sub_10003AFB4((uint64_t)v16);
  return v11;
}

void sub_100452D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100452D80(uint64_t a1, uint64_t a2)
{
  v16[0] = 0;
  v16[1] = 0;
  sub_10003AED0((uint64_t)v16, a1 + 56);
  uint64_t v4 = *(unint64_t **)(a1 + 256);
  if (v4 == *(unint64_t **)(a1 + 264))
  {
    uint64_t v11 = 106;
  }
  else
  {
    do
    {
      if (qword_1009F8168 != -1) {
        dispatch_once(&qword_1009F8168, &stru_1009AEAB8);
      }
      if (sub_1000181D0(qword_1009F8160, *v4))
      {
        v4 += 7;
        uint64_t v5 = *(void *)(a1 + 264);
      }
      else
      {
        int64_t v6 = qword_100A19E40;
        if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Warning: AccessoryManager, Invalid BTAccessoryManager handle - removing associated callbacks", buf, 2u);
        }
        sub_100457B34((uint64_t)(v4 + 7), *(void *)(a1 + 264), (uint64_t)v4);
        uint64_t v5 = v7;
        *(void *)(a1 + 264) = v7;
      }
    }
    while (v4 != (unint64_t *)v5);
    uint64_t v8 = *(void *)(a1 + 256);
    *(void *)std::string buf = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    sub_100457B88((char *)buf, v8, v5, 0x6DB6DB6DB6DB6DB7 * ((v5 - v8) >> 3));
    sub_10003AFE8((uint64_t)v16);
    uint64_t v10 = *(unint64_t **)buf;
    char v9 = v14;
    if (*(unint64_t **)buf != v14)
    {
      do
      {
        if (qword_1009F8168 != -1) {
          dispatch_once(&qword_1009F8168, &stru_1009AEAB8);
        }
        sub_1000181D0(qword_1009F8160, *v10);
        if (qword_1009F7F00 != -1) {
          dispatch_once(&qword_1009F7F00, &stru_1009AEB78);
        }
        sub_1004A93A0((uint64_t)off_1009F7EF8, *v10, a2);
        if (v10[2])
        {
          if (qword_1009FB160 != -1) {
            dispatch_once(&qword_1009FB160, &stru_1009AEB98);
          }
          operator new();
        }
        v10 += 7;
      }
      while (v10 != v9);
      uint64_t v10 = *(unint64_t **)buf;
    }
    if (v10)
    {
      uint64_t v14 = v10;
      operator delete(v10);
    }
    uint64_t v11 = 0;
  }
  sub_10003AFB4((uint64_t)v16);
  return v11;
}

void sub_100453080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_1004530DC(uint64_t a1, uint64_t a2)
{
  v16[0] = 0;
  v16[1] = 0;
  sub_10003AED0((uint64_t)v16, a1 + 56);
  unint64_t v3 = *(unint64_t **)(a1 + 256);
  if (v3 == *(unint64_t **)(a1 + 264))
  {
    uint64_t v10 = 106;
  }
  else
  {
    do
    {
      if (qword_1009F8168 != -1) {
        dispatch_once(&qword_1009F8168, &stru_1009AEAB8);
      }
      if (sub_1000181D0(qword_1009F8160, *v3))
      {
        v3 += 7;
        uint64_t v4 = *(void *)(a1 + 264);
      }
      else
      {
        uint64_t v5 = qword_100A19E40;
        if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Warning: AccessoryManager, Invalid BTAccessoryManager handle - removing associated callbacks", buf, 2u);
        }
        sub_100457B34((uint64_t)(v3 + 7), *(void *)(a1 + 264), (uint64_t)v3);
        uint64_t v4 = v6;
        *(void *)(a1 + 264) = v6;
      }
    }
    while (v3 != (unint64_t *)v4);
    uint64_t v7 = *(void *)(a1 + 256);
    *(void *)std::string buf = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    sub_100457B88((char *)buf, v7, v4, 0x6DB6DB6DB6DB6DB7 * ((v4 - v7) >> 3));
    sub_10003AFE8((uint64_t)v16);
    char v9 = *(unint64_t **)buf;
    uint64_t v8 = v14;
    if (*(unint64_t **)buf != v14)
    {
      do
      {
        if (qword_1009F8168 != -1) {
          dispatch_once(&qword_1009F8168, &stru_1009AEAB8);
        }
        sub_1000181D0(qword_1009F8160, *v9);
        if (qword_1009F7F00 != -1) {
          dispatch_once(&qword_1009F7F00, &stru_1009AEB78);
        }
        sub_1004A93A0((uint64_t)off_1009F7EF8, *v9, a2);
        if (v9[3])
        {
          if (qword_1009FB160 != -1) {
            dispatch_once(&qword_1009FB160, &stru_1009AEB98);
          }
          operator new();
        }
        v9 += 7;
      }
      while (v9 != v8);
      char v9 = *(unint64_t **)buf;
    }
    if (v9)
    {
      uint64_t v14 = v9;
      operator delete(v9);
    }
    uint64_t v10 = 0;
  }
  sub_10003AFB4((uint64_t)v16);
  return v10;
}

void sub_1004533F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_10045344C(uint64_t a1, uint64_t a2)
{
  v16[0] = 0;
  v16[1] = 0;
  sub_10003AED0((uint64_t)v16, a1 + 56);
  uint64_t v4 = *(unint64_t **)(a1 + 256);
  if (v4 == *(unint64_t **)(a1 + 264))
  {
    uint64_t v11 = 106;
  }
  else
  {
    do
    {
      if (qword_1009F8168 != -1) {
        dispatch_once(&qword_1009F8168, &stru_1009AEAB8);
      }
      if (sub_1000181D0(qword_1009F8160, *v4))
      {
        v4 += 7;
        uint64_t v5 = *(void *)(a1 + 264);
      }
      else
      {
        uint64_t v6 = qword_100A19E40;
        if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Warning: AccessoryManager, Invalid BTAccessoryManager handle - removing associated callbacks", buf, 2u);
        }
        sub_100457B34((uint64_t)(v4 + 7), *(void *)(a1 + 264), (uint64_t)v4);
        uint64_t v5 = v7;
        *(void *)(a1 + 264) = v7;
      }
    }
    while (v4 != (unint64_t *)v5);
    uint64_t v8 = *(void *)(a1 + 256);
    *(void *)std::string buf = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    sub_100457B88((char *)buf, v8, v5, 0x6DB6DB6DB6DB6DB7 * ((v5 - v8) >> 3));
    sub_10003AFE8((uint64_t)v16);
    char v9 = *(unint64_t **)buf;
    uint64_t v10 = v14;
    if (*(unint64_t **)buf != v14)
    {
      do
      {
        if (qword_1009F8168 != -1) {
          dispatch_once(&qword_1009F8168, &stru_1009AEAB8);
        }
        sub_1000181D0(qword_1009F8160, *v9);
        if (qword_1009F7F00 != -1) {
          dispatch_once(&qword_1009F7F00, &stru_1009AEB78);
        }
        sub_1004A93A0((uint64_t)off_1009F7EF8, *v9, a2);
        if (v9[4])
        {
          if (qword_1009FB160 != -1) {
            dispatch_once(&qword_1009FB160, &stru_1009AEB98);
          }
          operator new();
        }
        v9 += 7;
      }
      while (v9 != v10);
      char v9 = *(unint64_t **)buf;
    }
    if (v9)
    {
      uint64_t v14 = v9;
      operator delete(v9);
    }
    uint64_t v11 = 0;
  }
  sub_10003AFB4((uint64_t)v16);
  return v11;
}

void sub_10045371C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100453758(uint64_t a1)
{
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, a1 + 56);
  unint64_t v3 = *(unsigned __int8 ***)(a1 + 160);
  uint64_t v2 = *(unsigned __int8 ***)(a1 + 168);
  if (v3 != v2)
  {
    int v4 = *(unsigned __int8 *)(a1 + 120);
    if (*(unsigned char *)(a1 + 120) || *(unsigned char *)(a1 + 121))
    {
      uint64_t v5 = qword_100A19E40;
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = "(someone is connecting)";
        if (!v4) {
          uint64_t v6 = "(someone is pairing)";
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Auto pairing is not allowed at the moment %{public}s, trying again later", (uint8_t *)&buf, 0xCu);
      }
    }
    else
    {
      uint64_t v8 = *v3;
      int64_t v9 = (char *)v2 - (char *)(v3 + 1);
      if (v2 != v3 + 1) {
        memmove(*(void **)(a1 + 160), v3 + 1, (char *)v2 - (char *)(v3 + 1));
      }
      *(void *)(a1 + 168) = (char *)v3 + v9;
      sub_10003AFE8((uint64_t)v11);
      sub_100451400(a1, (uint64_t)v8);
      if ((sub_100040630(v8) & 1) == 0)
      {
        if (qword_1009F8090 != -1) {
          dispatch_once(&qword_1009F8090, &stru_1009AEB18);
        }
        memset(&buf, 0, sizeof(buf));
        int v10 = sub_1004D2DCC((int64x2_t *)off_1009F8088, (uint64_t)v8, -1, &buf, 2);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        if (!v10)
        {
          sub_10003AF00((uint64_t)v11);
          *(void *)(a1 + 128) = v8;
          sub_10003AFE8((uint64_t)v11);
        }
      }
    }
  }
  return sub_10003AFB4((uint64_t)v11);
}

void sub_100453910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

uint64_t sub_10045394C(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    uint64_t v8 = result;
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AEB78);
    }
    uint64_t result = sub_100030F10((uint64_t)off_1009F7EF8, a2, 0);
    if (result)
    {
      uint64_t v9 = result;
      if (a3) {
        int v10 = 7;
      }
      else {
        int v10 = 8;
      }
      uint64_t v11 = qword_100A19E40;
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = "Not Ready";
        int v13 = 136446722;
        if (a3) {
          uint64_t v12 = "Ready";
        }
        uint64_t v14 = v12;
        __int16 v15 = 2048;
        uint64_t v16 = a5;
        __int16 v17 = 1024;
        int v18 = v10;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Remote Timesync: Timesync Notification %{public}s : %llx [%d]", (uint8_t *)&v13, 0x1Cu);
      }
      return sub_100452A84(v8, v9);
    }
  }
  return result;
}

uint64_t sub_100453AA4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  return sub_10045394C(a1 - 48, a2, a3, a4, a5);
}

void sub_100453AAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = qword_100A19E40;
  if (a2)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Notify clients of head track change", v5, 2u);
    }
    sub_100452A84(a1, a2);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
  {
    sub_100769ED0();
  }
}

uint64_t sub_100453B5C(uint64_t result, int a2, int a3)
{
  if (a2 == 1)
  {
    uint64_t v3 = result;
    if (a3)
    {
      if (a3 == 1)
      {
        return sub_100453758(result);
      }
    }
    else
    {
      v19[0] = 0;
      v19[1] = 0;
      sub_10003AED0((uint64_t)v19, result + 56);
      *(_WORD *)(v3 + 120) = 0;
      uint64_t v4 = *(void *)(v3 + 128);
      if (v4)
      {
        sub_10003AFE8((uint64_t)v19);
        unint64_t v5 = *(void *)(v3 + 176);
        uint64_t v6 = *(void **)(v3 + 168);
        if ((unint64_t)v6 >= v5)
        {
          uint64_t v8 = *(void *)(v3 + 160);
          uint64_t v9 = ((uint64_t)v6 - v8) >> 3;
          if ((unint64_t)(v9 + 1) >> 61) {
            abort();
          }
          uint64_t v10 = v5 - v8;
          uint64_t v11 = v10 >> 2;
          if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
            uint64_t v11 = v9 + 1;
          }
          if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v12 = v11;
          }
          if (v12) {
            int v13 = (char *)sub_1000405F8(v3 + 176, v12);
          }
          else {
            int v13 = 0;
          }
          uint64_t v14 = &v13[8 * v9];
          __int16 v15 = &v13[8 * v12];
          *(void *)uint64_t v14 = v4;
          uint64_t v7 = v14 + 8;
          __int16 v17 = *(char **)(v3 + 160);
          uint64_t v16 = *(char **)(v3 + 168);
          if (v16 != v17)
          {
            do
            {
              uint64_t v18 = *((void *)v16 - 1);
              v16 -= 8;
              *((void *)v14 - 1) = v18;
              v14 -= 8;
            }
            while (v16 != v17);
            uint64_t v16 = *(char **)(v3 + 160);
          }
          *(void *)(v3 + 160) = v14;
          *(void *)(v3 + 168) = v7;
          *(void *)(v3 + 176) = v15;
          if (v16) {
            operator delete(v16);
          }
        }
        else
        {
          void *v6 = v4;
          uint64_t v7 = v6 + 1;
        }
        *(void *)(v3 + 168) = v7;
      }
      return sub_10003AFB4((uint64_t)v19);
    }
  }
  return result;
}

void sub_100453CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100453CB8(uint64_t a1, int a2, int a3)
{
  return sub_100453B5C(a1 - 40, a2, a3);
}

uint64_t sub_100453CC0(uint64_t a1, uint64_t a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 56);
  *(unsigned char *)(a1 + 120) = 0;
  if (*(void *)(a1 + 128) == a2) {
    *(void *)(a1 + 128) = 0;
  }
  return sub_10003AFB4((uint64_t)v5);
}

uint64_t sub_100453D18(uint64_t a1, uint64_t a2)
{
  return sub_100453CC0(a1 - 16, a2);
}

uint64_t sub_100453D20(uint64_t a1, char a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 56);
  *(unsigned char *)(a1 + 120) = a2;
  if ((a2 & 1) == 0)
  {
    sub_10003AFE8((uint64_t)v5);
    sub_100453758(a1);
  }
  return sub_10003AFB4((uint64_t)v5);
}

void sub_100453D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100453D90(uint64_t a1, char a2)
{
  return sub_100453D20(a1 - 16, a2);
}

uint64_t sub_100453D98(uint64_t a1)
{
  v3[0] = 0;
  v3[1] = 0;
  sub_10003AED0((uint64_t)v3, a1 + 56);
  *(unsigned char *)(a1 + 120) = 0;
  return sub_10003AFB4((uint64_t)v3);
}

uint64_t sub_100453DDC(uint64_t a1)
{
  v3[0] = 0;
  v3[1] = 0;
  sub_10003AED0((uint64_t)v3, a1 + 40);
  *(unsigned char *)(a1 + 104) = 0;
  return sub_10003AFB4((uint64_t)v3);
}

uint64_t sub_100453E20(uint64_t a1)
{
  v3[0] = 0;
  v3[1] = 0;
  sub_10003AED0((uint64_t)v3, a1 + 56);
  *(unsigned char *)(a1 + 121) = 1;
  return sub_10003AFB4((uint64_t)v3);
}

uint64_t sub_100453E68(uint64_t a1)
{
  v3[0] = 0;
  v3[1] = 0;
  sub_10003AED0((uint64_t)v3, a1 + 32);
  *(unsigned char *)(a1 + 97) = 1;
  return sub_10003AFB4((uint64_t)v3);
}

uint64_t sub_100453EB0(uint64_t a1)
{
  v3[0] = 0;
  v3[1] = 0;
  sub_10003AED0((uint64_t)v3, a1 + 56);
  *(unsigned char *)(a1 + 121) = 0;
  sub_10003AFE8((uint64_t)v3);
  sub_100453758(a1);
  return sub_10003AFB4((uint64_t)v3);
}

void sub_100453F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100453F18(uint64_t a1)
{
  return sub_100453EB0(a1 - 24);
}

uint64_t sub_100453F20(uint64_t a1, uint64_t a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1 + 56);
  uint64_t v4 = (char **)(a1 + 136);
  if (sub_1004A8390((uint64_t)v4, a2)) {
    sub_1004A83C4(v4, a2);
  }
  return sub_10003AFB4((uint64_t)v6);
}

void sub_100453F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100453F98(uint64_t a1, uint64_t a2)
{
  return sub_100453F20(a1 - 24, a2);
}

void sub_100453FA0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 <= 200)
  {
    if (a4 == 101)
    {
      byte_100A131C0 = 1;
      return;
    }
    if (a4 != 102) {
      return;
    }
    uint64_t v6 = &byte_100A131C0;
  }
  else
  {
    if (a4 == 201)
    {
      byte_100A131C1 = 1;
      return;
    }
    if (a4 != 202)
    {
      if (a4 == 902)
      {
        if (qword_1009F80A0 != -1) {
          dispatch_once(&qword_1009F80A0, &stru_1009AEB58);
        }
        unint64_t v5 = off_1009F8098;
        sub_10028B310((uint64_t)v5, a2);
      }
      return;
    }
    uint64_t v6 = &byte_100A131C1;
  }
  char *v6 = 0;
  if (byte_100A131C2 == 1)
  {
    uint64_t v7 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)&uint8_t buf[4] = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "AWD - Request is in queue already", &buf[4], 2u);
    }
  }
  else
  {
    *(void *)std::string buf = 0;
    uint64_t v12 = 0;
    sub_10047B7A8(a2, &buf[4], buf, (_DWORD *)&v12 + 1, &v12);
    uint64_t v8 = sub_100017768();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 8))(v8))
    {
      uint64_t v9 = sub_100035F54();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 328))(v9))
      {
        if (qword_1009F8090 != -1) {
          dispatch_once(&qword_1009F8090, &stru_1009AEB18);
        }
        if ((sub_1004D41B4((uint64_t)off_1009F8088, a2) & 0x80000) != 0
          && (HIDWORD(v12) - 8194) <= 0xE
          && ((1 << (BYTE4(v12) - 2)) & 0x409B) != 0)
        {
          byte_100A131C2 = 1;
          uint64_t v10 = sub_1004AF8EC();
          v11[0] = _NSConcreteStackBlock;
          v11[1] = 3221225472;
          void v11[2] = sub_10045421C;
          _OWORD v11[3] = &unk_100997528;
          v11[4] = a2;
          sub_1004AFF58(v10, 250, v11);
        }
      }
    }
  }
}

void sub_10045421C(uint64_t a1)
{
  if (byte_100A131C0 & 1) != 0 || (byte_100A131C1) {
    goto LABEL_9;
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009AEBB8);
  }
  if (!*((unsigned char *)off_1009F8068 + 60)) {
    goto LABEL_9;
  }
  if (qword_1009F8090 != -1) {
    dispatch_once(&qword_1009F8090, &stru_1009AEB18);
  }
  if ((sub_1004D41B4((uint64_t)off_1009F8088, *(void *)(a1 + 32)) & 0x80000) != 0)
  {
    uint64_t v3 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "AWD - Send request to collect diagnose", buf, 2u);
    }
    if (qword_1009F80A0 != -1) {
      dispatch_once(&qword_1009F80A0, &stru_1009AEB58);
    }
    sub_10028502C((uint64_t)off_1009F8098, *(void *)(a1 + 32), 32, 0, 0);
  }
  else
  {
LABEL_9:
    uint64_t v2 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "AWD - Can't send request to collect diagnose", v4, 2u);
    }
  }
  byte_100A131C2 = 0;
}

uint64_t sub_1004543AC(uint64_t a1, unint64_t a2)
{
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009AEAB8);
  }
  uint64_t v4 = sub_100019C0C((void *)qword_1009F8160, a2);
  if (!a2) {
    return 0;
  }
  uint64_t v5 = v4;
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, a1 + 56);
  uint64_t v7 = *(void **)(a1 + 232);
  uint64_t v6 = *(void **)(a1 + 240);
  if (v7 != v6)
  {
    while (*v7 != a2)
    {
      if (++v7 == v6)
      {
        uint64_t v7 = *(void **)(a1 + 240);
        break;
      }
    }
  }
  if (v7 == v6)
  {
    uint64_t v8 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
    {
      if (v5)
      {
        sub_10003AE4C(v5, (uint64_t)v10);
        sub_100769F50(v10, buf, v8);
      }
      else
      {
        sub_100769F04(buf, v8);
      }
    }
    a1 = 0;
  }
  sub_10003AFB4((uint64_t)v11);
  return a1;
}

void sub_1004544F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_10045450C(void *a1, unint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009AEAB8);
  }
  uint64_t v4 = sub_1000181D0(qword_1009F8160, a2);
  if (!v4) {
    return 0;
  }
  unint64_t v5 = v4;
  v23[0] = 0;
  v23[1] = 0;
  sub_10003AED0((uint64_t)v23, (uint64_t)(a1 + 7));
  uint64_t v6 = (unint64_t *)a1[29];
  if (v6 == (unint64_t *)a1[30])
  {
LABEL_13:
    if (qword_1009F8168 != -1) {
      dispatch_once(&qword_1009F8168, &stru_1009AEAB8);
    }
    unint64_t v7 = sub_1005532C4(qword_1009F8160, v5);
    if (v7)
    {
      unint64_t v8 = a1[31];
      uint64_t v9 = (unint64_t *)a1[30];
      if ((unint64_t)v9 >= v8)
      {
        uint64_t v11 = a1[29];
        uint64_t v12 = ((uint64_t)v9 - v11) >> 3;
        if ((unint64_t)(v12 + 1) >> 61) {
          abort();
        }
        uint64_t v13 = v8 - v11;
        uint64_t v14 = v13 >> 2;
        if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
          uint64_t v14 = v12 + 1;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15) {
          uint64_t v16 = (char *)sub_1000405F8((uint64_t)(a1 + 31), v15);
        }
        else {
          uint64_t v16 = 0;
        }
        __int16 v17 = (unint64_t *)&v16[8 * v12];
        uint64_t v18 = &v16[8 * v15];
        *__int16 v17 = v7;
        uint64_t v10 = v17 + 1;
        unsigned int v20 = (char *)a1[29];
        int v19 = (char *)a1[30];
        if (v19 != v20)
        {
          do
          {
            unint64_t v21 = *((void *)v19 - 1);
            v19 -= 8;
            *--__int16 v17 = v21;
          }
          while (v19 != v20);
          int v19 = (char *)a1[29];
        }
        a1[29] = v17;
        a1[30] = v10;
        a1[31] = v18;
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t *v9 = v7;
        uint64_t v10 = v9 + 1;
      }
      a1[30] = v10;
    }
  }
  else
  {
    while (1)
    {
      unint64_t v7 = *v6;
      if (*v6 == a2) {
        break;
      }
      if (qword_1009F8168 != -1) {
        dispatch_once(&qword_1009F8168, &stru_1009AEAB8);
      }
      if (sub_1000181D0(qword_1009F8160, v7) == v5) {
        goto LABEL_34;
      }
      if (++v6 == (unint64_t *)a1[30]) {
        goto LABEL_13;
      }
    }
    unint64_t v7 = a2;
  }
LABEL_34:
  sub_10003AFB4((uint64_t)v23);
  return v7;
}

void sub_10045471C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_100454734(uint64_t a1, uint64_t a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1 + 56);
  BOOL v4 = sub_1004A8390(a1 + 136, a2);
  sub_10003AFB4((uint64_t)v6);
  return v4;
}

void sub_10045478C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004547A0(uint64_t *a1, uint64_t a2, long long *a3, uint64_t a4)
{
  v18[0] = 0;
  v18[1] = 0;
  sub_10003AED0((uint64_t)v18, (uint64_t)(a1 + 7));
  uint64_t v9 = (void *)a1[32];
  unint64_t v8 = a1[33];
  long long v10 = a3[1];
  long long v24 = *a3;
  long long v25 = v10;
  if (v9 != (void *)v8)
  {
    while (1)
    {
      if (*v9 == a2)
      {
        BOOL v11 = (void)v24 == v9[1] && *((void *)&v24 + 1) == v9[2];
        BOOL v12 = v11 && (void)v25 == v9[3];
        if (v12 && *((void *)&v25 + 1) == v9[4]) {
          break;
        }
      }
      v9 += 7;
      if (v9 == (void *)v8) {
        goto LABEL_16;
      }
    }
  }
  if (v9 == (void *)v8)
  {
LABEL_16:
    long long v14 = a3[1];
    long long v20 = *a3;
    long long v21 = v14;
    uint64_t v19 = a2;
    int v22 = -1;
    uint64_t v23 = a4;
    if (v8 >= a1[34])
    {
      uint64_t v16 = sub_100457E00(a1 + 32, (uint64_t)&v19);
    }
    else
    {
      *(void *)unint64_t v8 = a2;
      long long v15 = v20;
      *(_OWORD *)(v8 + 24) = v21;
      *(_OWORD *)(v8 + 8) = v15;
      *(_DWORD *)(v8 + 40) = -1;
      *(void *)(v8 + 48) = a4;
      uint64_t v16 = v8 + 56;
    }
    a1[33] = v16;
  }
  sub_10003AFB4((uint64_t)v18);
  return 0;
}

void sub_1004548B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004548C8(uint64_t a1, uint64_t a2, long long *a3)
{
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, a1 + 56);
  long long v6 = a3[1];
  long long v13 = *a3;
  long long v14 = v6;
  uint64_t v7 = *(void *)(a1 + 256);
  uint64_t v8 = *(void *)(a1 + 264);
  uint64_t v12 = a2;
  uint64_t v9 = sub_10045801C(v7, v8, &v12);
  sub_100457CDC(a1 + 256, v9, *(void *)(a1 + 264));
  sub_10003AFB4((uint64_t)v11);
  return 0;
}

void sub_100454944(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100454958(void *a1, uint64_t a2)
{
  v24[0] = 0;
  v24[1] = 0;
  sub_10003AED0((uint64_t)v24, (uint64_t)(a1 + 7));
  BOOL v4 = (char **)(a1 + 17);
  if (sub_1004A8390((uint64_t)(a1 + 17), a2))
  {
    unint64_t v5 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_INFO))
    {
      sub_100474E18(a2, __p);
      if (v23 >= 0) {
        long long v6 = __p;
      }
      else {
        long long v6 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446210;
      int v26 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Device %{public}s has already been registered", buf, 0xCu);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v7 = 601;
  }
  else
  {
    unint64_t v8 = a1[19];
    uint64_t v9 = (uint64_t *)a1[18];
    if ((unint64_t)v9 >= v8)
    {
      uint64_t v11 = ((char *)v9 - *v4) >> 3;
      if ((unint64_t)(v11 + 1) >> 61) {
        abort();
      }
      uint64_t v12 = v8 - (void)*v4;
      uint64_t v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
        uint64_t v13 = v11 + 1;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v13;
      }
      if (v14) {
        long long v15 = (char *)sub_1000405F8((uint64_t)(a1 + 19), v14);
      }
      else {
        long long v15 = 0;
      }
      uint64_t v16 = (uint64_t *)&v15[8 * v11];
      __int16 v17 = &v15[8 * v14];
      uint64_t *v16 = a2;
      long long v10 = v16 + 1;
      uint64_t v19 = (char *)a1[17];
      uint64_t v18 = (char *)a1[18];
      if (v18 != v19)
      {
        do
        {
          uint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          *--uint64_t v16 = v20;
        }
        while (v18 != v19);
        uint64_t v18 = *v4;
      }
      a1[17] = v16;
      a1[18] = v10;
      a1[19] = v17;
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      uint64_t *v9 = a2;
      long long v10 = v9 + 1;
    }
    a1[18] = v10;
    sub_10003AFE8((uint64_t)v24);
    if (qword_1009F8090 != -1) {
      dispatch_once(&qword_1009F8090, &stru_1009AEB18);
    }
    sub_1004D9218((uint64_t)off_1009F8088, a2);
    sub_100451758((uint64_t)a1, a2);
    uint64_t v7 = sub_100452A84((uint64_t)a1, a2);
  }
  sub_10003AFB4((uint64_t)v24);
  return v7;
}

void sub_100454B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100454BA4(uint64_t a1, unsigned __int8 *a2)
{
  int v43 = 0;
  if (sub_100454734(a1, (uint64_t)a2))
  {
    sub_10047F9A0((uint64_t)a2, &v43);
    if (v43 == 1) {
      return 603;
    }
    sub_10047F958((uint64_t)a2, 1);
    sub_100452A84(a1, (uint64_t)a2);
    if (qword_1009F8748 != -1) {
      dispatch_once(&qword_1009F8748, &stru_1009AEB38);
    }
    if (sub_100028CB4((uint64_t)off_1009F8740))
    {
      v41[0] = 0;
      v41[1] = 0;
      sub_10003AED0((uint64_t)v41, a1 + 56);
      int v5 = *(unsigned __int8 *)(a1 + 120);
      if (*(unsigned char *)(a1 + 120) || *(unsigned char *)(a1 + 121))
      {
        long long v6 = qword_100A19E40;
        if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
        {
          sub_100474E18((uint64_t)a2, &__p);
          uint64_t v7 = "(someone is connecting)";
          if (!v5) {
            uint64_t v7 = "(someone is pairing)";
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)std::string buf = 136446466;
          unint64_t v45 = (std::string *)v7;
          __int16 v46 = 2082;
          id v47 = p_p;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Auto pairing is not allowed at the moment %{public}s, queuing up device %{public}s for later", buf, 0x16u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        unint64_t v9 = *(void *)(a1 + 176);
        long long v10 = *(unsigned __int8 ***)(a1 + 168);
        if ((unint64_t)v10 >= v9)
        {
          uint64_t v17 = *(void *)(a1 + 160);
          uint64_t v18 = ((uint64_t)v10 - v17) >> 3;
          if ((unint64_t)(v18 + 1) >> 61) {
            abort();
          }
          uint64_t v19 = v9 - v17;
          uint64_t v20 = v19 >> 2;
          if (v19 >> 2 <= (unint64_t)(v18 + 1)) {
            uint64_t v20 = v18 + 1;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v20;
          }
          if (v21) {
            int v22 = (char *)sub_1000405F8(a1 + 176, v21);
          }
          else {
            int v22 = 0;
          }
          __int16 v29 = (unsigned __int8 **)&v22[8 * v18];
          int v30 = &v22[8 * v21];
          *__int16 v29 = a2;
          uint64_t v11 = v29 + 1;
          int v32 = *(char **)(a1 + 160);
          __int16 v31 = *(char **)(a1 + 168);
          if (v31 != v32)
          {
            do
            {
              __int16 v33 = (unsigned __int8 *)*((void *)v31 - 1);
              v31 -= 8;
              *--__int16 v29 = v33;
            }
            while (v31 != v32);
            __int16 v31 = *(char **)(a1 + 160);
          }
          *(void *)(a1 + 160) = v29;
          *(void *)(a1 + 168) = v11;
          *(void *)(a1 + 176) = v30;
          if (v31) {
            operator delete(v31);
          }
        }
        else
        {
          void *v10 = a2;
          uint64_t v11 = v10 + 1;
        }
        *(void *)(a1 + 168) = v11;
      }
      else
      {
        sub_10003AFE8((uint64_t)v41);
        sub_100451400(a1, (uint64_t)a2);
        if (sub_100040630(a2)) {
          goto LABEL_54;
        }
        if (qword_1009F8090 != -1) {
          dispatch_once(&qword_1009F8090, &stru_1009AEB18);
        }
        memset(&__p, 0, sizeof(__p));
        int v34 = sub_1004D2DCC((int64x2_t *)off_1009F8088, (uint64_t)a2, -1, &__p, 2);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v34) {
          goto LABEL_54;
        }
        sub_10003AF00((uint64_t)v41);
        *(void *)(a1 + 128) = a2;
      }
      sub_10003AFE8((uint64_t)v41);
LABEL_54:
      sub_10003AFB4((uint64_t)v41);
      return 0;
    }
    uint64_t v12 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18((uint64_t)a2, &__p);
      uint64_t v13 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)std::string buf = 136446210;
      unint64_t v45 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Queuing up device %{public}s for after power on", buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    sub_10003AED0((uint64_t)&__p, a1 + 56);
    unint64_t v14 = *(void *)(a1 + 176);
    long long v15 = *(unsigned __int8 ***)(a1 + 168);
    if ((unint64_t)v15 >= v14)
    {
      uint64_t v23 = *(void *)(a1 + 160);
      uint64_t v24 = ((uint64_t)v15 - v23) >> 3;
      if ((unint64_t)(v24 + 1) >> 61) {
        abort();
      }
      uint64_t v25 = v14 - v23;
      uint64_t v26 = v25 >> 2;
      if (v25 >> 2 <= (unint64_t)(v24 + 1)) {
        uint64_t v26 = v24 + 1;
      }
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v26;
      }
      if (v27) {
        int v28 = (char *)sub_1000405F8(a1 + 176, v27);
      }
      else {
        int v28 = 0;
      }
      __int16 v35 = (unsigned __int8 **)&v28[8 * v24];
      int v36 = &v28[8 * v27];
      *__int16 v35 = a2;
      uint64_t v16 = v35 + 1;
      int v38 = *(char **)(a1 + 160);
      __int16 v37 = *(char **)(a1 + 168);
      if (v37 != v38)
      {
        do
        {
          __int16 v39 = (unsigned __int8 *)*((void *)v37 - 1);
          v37 -= 8;
          *--__int16 v35 = v39;
        }
        while (v37 != v38);
        __int16 v37 = *(char **)(a1 + 160);
      }
      *(void *)(a1 + 160) = v35;
      *(void *)(a1 + 168) = v16;
      *(void *)(a1 + 176) = v36;
      if (v37) {
        operator delete(v37);
      }
    }
    else
    {
      char *v15 = a2;
      uint64_t v16 = v15 + 1;
    }
    *(void *)(a1 + 168) = v16;
    sub_10003AFE8((uint64_t)&__p);
    if (qword_1009F8748 != -1) {
      dispatch_once(&qword_1009F8748, &stru_1009AEB38);
    }
    int v40 = sub_1004B94DC((uint64_t)off_1009F8740);
    sub_10003AFB4((uint64_t)&__p);
    if (!v40) {
      return 0;
    }
    return 200;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_100769FC4((uint64_t)a2);
    }
    return 600;
  }
}

void sub_100455068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004550AC(uint64_t a1, uint64_t a2)
{
  int v7 = 0;
  if (sub_100454734(a1, a2))
  {
    sub_10047F9A0(a2, &v7);
    if (v7 == 2)
    {
      return 604;
    }
    else
    {
      sub_10047F958(a2, 2);
      v6[0] = 0;
      v6[1] = 0;
      sub_10003AED0((uint64_t)v6, a1 + 56);
      sub_1004A83C4((char **)(a1 + 160), a2);
      sub_10003AFE8((uint64_t)v6);
      sub_1004515AC(a1, a2);
      uint64_t v4 = sub_100452A84(a1, a2);
      sub_10003AFB4((uint64_t)v6);
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A060(a2);
    }
    return 600;
  }
  return v4;
}

void sub_100455198(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004551AC(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v6 = 0;
  if (sub_100454734(a1, a2))
  {
    sub_10047F9A0(a2, &v6);
    uint64_t result = 0;
    *a3 = v6;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A0FC(a2);
    }
    return 600;
  }
  return result;
}

uint64_t sub_100455230(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  int v5 = 0;
  uint64_t result = sub_10047E0D4(a2, (uint64_t)&v5);
  if (!result) {
    *a3 = v5;
  }
  return result;
}

uint64_t sub_100455274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10047E984(a2, a3);
}

uint64_t sub_100455280(uint64_t a1, char *a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 56);
  if ((char *)(a1 + 136) != a2) {
    sub_1002B5F74(a2, *(char **)(a1 + 136), *(void *)(a1 + 144), (uint64_t)(*(void *)(a1 + 144) - *(void *)(a1 + 136)) >> 3);
  }
  sub_10003AFB4((uint64_t)v5);
  return 0;
}

void sub_1004552E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004552FC(uint64_t a1, uint64_t a2)
{
  sub_100451904(a1, a2);

  return sub_100452A84(a1, a2);
}

uint64_t sub_100455344(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_INFO))
  {
    sub_100475EE0(a2, (uint64_t)__p);
    if (v8 >= 0) {
      int v5 = __p;
    }
    else {
      int v5 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    long long v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Sending BT_ACCESSORY_NAME_CHANGED for %s", buf, 0xCu);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  return sub_100452A84(a1, a2);
}

uint64_t sub_100455438(uint64_t a1, uint64_t a2)
{
  sub_100452208(a1, a2);

  return sub_100452A84(a1, a2);
}

uint64_t sub_100455480(uint64_t a1, uint64_t a2)
{
  return sub_100452A84(a1, a2);
}

uint64_t sub_100455490(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_100452680(a1, a2, *a3 | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 32), a4, a5, a6);

  return sub_1004530DC(a1, a2);
}

void sub_100455518(uint64_t a1, uint64_t a2)
{
  int v2 = sub_100452A84(a1, a2);
  uint64_t v3 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEBUG)) {
    sub_10076A194(v2, v3);
  }
}

uint64_t sub_100455570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_100451AB0(a1, a2, a3, a4, a5);

  return sub_10045344C(a1, a2);
}

uint64_t sub_1004555D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = a3;
  sub_1004528C4(a1, a2, a3);
  switch(v3)
  {
    case 2:
      uint64_t v6 = a1;
      uint64_t v7 = a2;
      goto LABEL_7;
    case 1:
      uint64_t v6 = a1;
      uint64_t v7 = a2;
      goto LABEL_7;
    case 0:
      uint64_t v6 = a1;
      uint64_t v7 = a2;
LABEL_7:
      return sub_100452A84(v6, v7);
  }
  unint64_t v9 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
    sub_10076A20C(v3, v9);
  }
  return 1;
}

uint64_t sub_1004556A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1009F80A0 != -1) {
    dispatch_once(&qword_1009F80A0, &stru_1009AEB58);
  }
  int v5 = off_1009F8098;

  return sub_1002917DC((uint64_t)v5, a2, a3, 2u);
}

uint64_t sub_100455710(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1009F80A0 != -1) {
    dispatch_once(&qword_1009F80A0, &stru_1009AEB58);
  }
  int v5 = off_1009F8098;

  return sub_1002918A8((uint64_t)v5, a2, a3);
}

uint64_t sub_10045577C(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  if (qword_1009F80A0 != -1) {
    dispatch_once(&qword_1009F80A0, &stru_1009AEB58);
  }
  uint64_t v7 = off_1009F8098;

  return sub_100291AC0((uint64_t)v7, a2, a3, a4, 2);
}

uint64_t sub_1004557FC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, char a4, int a5)
{
  if (a2)
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    sub_10047B7A8((uint64_t)a2, (_DWORD *)&v17 + 1, &v17, (_DWORD *)&v16 + 1, &v16);
    BOOL v10 = sub_100478AF4((uint64_t)a2);
    uint64_t v11 = qword_100A19E40;
    if (!v10)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
        sub_10076A2EC();
      }
      return 11;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = sub_100478B2C((uint64_t)a2, 20);
      uint64_t v13 = "No";
      if (v12) {
        uint64_t v13 = "Yes";
      }
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v19 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Sensor data support: %s", buf, 0xCu);
    }
    BOOL v14 = (HIDWORD(v16) - 8202) > 9 || ((1 << (BYTE4(v16) - 10)) & 0x311) == 0;
    if (v14 && (sub_100478B2C((uint64_t)a2, 20) & 1) == 0)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
        sub_10076A2B8();
      }
      return 11;
    }
    if (qword_1009F80B0 != -1) {
      dispatch_once(&qword_1009F80B0, &stru_1009AEBD8);
    }
    return sub_1005692DC((uint64_t)off_1009F80A8, ((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133], a3, a4, a1 + 48, a5);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A284();
    }
    return 1;
  }
}

uint64_t sub_100455A38(uint64_t a1, unsigned __int8 *a2, uint64_t *a3)
{
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009AEBD8);
  }
  uint64_t v5 = sub_100569A74((uint64_t)off_1009F80A8, a2);
  *a3 = v5;
  uint64_t v6 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 134217984;
    uint64_t v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Reference Timestamp ID: %llx ", (uint8_t *)&v8, 0xCu);
  }
  return 0;
}

uint64_t sub_100455B24(uint64_t a1, uint64_t a2, int *a3)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEB78);
  }
  sub_1004AB094((uint64_t)off_1009F7EF8, a2, a3);
  uint64_t v5 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *a3;
    sub_100475EE0(a2, (uint64_t)__p);
    if (v10 >= 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 67109378;
    int v12 = v6;
    __int16 v13 = 2080;
    BOOL v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "getSpatialAudioAllowSpatial: Allowed = %d For  \"%s\"", buf, 0x12u);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
  return 0;
}

uint64_t sub_100455C54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEB78);
  }
  sub_1004AB200((uint64_t)off_1009F7EF8, a2, a3);
  int v6 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
  {
    sub_100475EE0(a2, (uint64_t)__p);
    if (v12 >= 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 67109378;
    int v14 = a3;
    __int16 v15 = 2080;
    uint64_t v16 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "notifySpatialAudioAllowSpatialChanged to %d  \"%s\"", buf, 0x12u);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v8 = sub_1004AFB34();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  _DWORD v10[2] = sub_100455DEC;
  _OWORD v10[3] = &unk_100997528;
  void v10[4] = a2;
  sub_100013018(v8, v10);
  sub_100455E64(a1, a2);
  return 0;
}

uint64_t sub_100455DEC(uint64_t result)
{
  if (*(void *)(result + 32))
  {
    uint64_t v1 = result;
    if (qword_1009F8418 != -1) {
      dispatch_once(&qword_1009F8418, &stru_1009AEBF8);
    }
    int v2 = (void *)qword_1009F8410;
    uint64_t v3 = *(void *)(v1 + 32);
    return sub_100414B4C(v2, v3);
  }
  return result;
}

uint64_t sub_100455E64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_INFO))
  {
    sub_100475EE0(a2, (uint64_t)__p);
    if (v8 >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    char v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Sending BT_ACCESSORY_SETTINGS_CHANGED for %s", buf, 0xCu);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  return sub_100452A84(a1, a2);
}

uint64_t sub_100455F58(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, _DWORD *a5)
{
  char v16 = 1;
  char v8 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEB78);
  }
  sub_1004AB624((uint64_t)off_1009F7EF8, a2, v8, a4, &v16);
  *a5 = -v16;
  uint64_t v9 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
  {
    sub_100475EE0(a2, (uint64_t)__p);
    if (v15 >= 0) {
      char v10 = __p;
    }
    else {
      char v10 = (void **)__p[0];
    }
    int v11 = *a4;
    char v12 = "Off";
    if (*a5 == -1) {
      char v12 = "On";
    }
    *(_DWORD *)std::string buf = 136315906;
    uint64_t v18 = v10;
    __int16 v19 = 2112;
    uint64_t v20 = v8;
    __int16 v21 = 1024;
    int v22 = v11;
    __int16 v23 = 2080;
    uint64_t v24 = v12;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Get Spatial Audio Mode for device \"%s\" :[%@] Mode= %u Head Tracking %s", buf, 0x26u);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }

  return 0;
}

void sub_1004560FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100456118(uint64_t a1, uint64_t a2, int a3)
{
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009AEBD8);
  }
  sub_100573054((uint64_t)off_1009F80A8, a2, a3);
  uint64_t v5 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
  {
    sub_100475EE0(a2, (uint64_t)__p);
    if (v9 >= 0) {
      int v6 = __p;
    }
    else {
      int v6 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 67109378;
    int v11 = a3;
    __int16 v12 = 2080;
    __int16 v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "updateSpatialAudioSpatialActiveChanged to %d  \"%s\"", buf, 0x12u);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }
  return 0;
}

uint64_t sub_100456244(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  char v9 = a3;
  BOOL v10 = a5 == -1;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEB78);
  }
  sub_1004AB358((uint64_t)off_1009F7EF8, a2, v9, a4, a5 == -1);
  int v11 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
  {
    sub_100475EE0(a2, (uint64_t)__p);
    if (v25 >= 0) {
      __int16 v12 = __p;
    }
    else {
      __int16 v12 = (void **)__p[0];
    }
    CFStringRef v13 = @"None";
    *(_DWORD *)std::string buf = 136315906;
    unint64_t v27 = v12;
    int v14 = "YES";
    if (v9) {
      CFStringRef v13 = v9;
    }
    __int16 v28 = 1024;
    int v29 = a4;
    if (a5 != -1) {
      int v14 = "NO";
    }
    __int16 v30 = 2112;
    CFStringRef v31 = v13;
    __int16 v32 = 2082;
    __int16 v33 = v14;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Notify Spatial Audio Mode changed for device \"%s\" to %d for App %@ Head Tracking %{public}s", buf, 0x26u);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
  }
  id v15 = [(__CFString *)v9 copy];
  uint64_t v16 = sub_1004AFB34();
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  void v19[2] = sub_1004564C8;
  v19[3] = &unk_1009999C0;
  uint64_t v21 = a2;
  id v17 = v15;
  id v20 = v17;
  int v22 = a4;
  BOOL v23 = v10;
  sub_100013018(v16, v19);
  sub_100455E64(a1, a2);

  return 0;
}

void sub_10045647C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1004564C8(uint64_t result)
{
  if (*(void *)(result + 40))
  {
    uint64_t v1 = result;
    if (qword_1009F8418 != -1) {
      dispatch_once(&qword_1009F8418, &stru_1009AEBF8);
    }
    int v2 = (void *)qword_1009F8410;
    uint64_t v4 = *(void **)(v1 + 32);
    uint64_t v3 = *(void *)(v1 + 40);
    int v5 = *(_DWORD *)(v1 + 48);
    int v6 = *(unsigned __int8 *)(v1 + 52);
    return sub_100414DA0(v2, v3, v4, v5, v6);
  }
  return result;
}

uint64_t sub_100456548(uint64_t a1, uint64_t a2, int a3)
{
  if (qword_1009F80A0 != -1) {
    dispatch_once(&qword_1009F80A0, &stru_1009AEB58);
  }
  int v5 = off_1009F8098;

  return sub_100291D0C((uint64_t)v5, a2, a3, 2u);
}

uint64_t sub_1004565B8(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  if (qword_1009F80A0 != -1) {
    dispatch_once(&qword_1009F80A0, &stru_1009AEB58);
  }
  uint64_t v7 = off_1009F8098;

  return sub_10028FEDC((uint64_t)v7, a2, a3, a4);
}

uint64_t sub_100456634(uint64_t a1, uint64_t a2, int *a3)
{
  if (qword_1009F80A0 != -1) {
    dispatch_once(&qword_1009F80A0, &stru_1009AEB58);
  }
  int v5 = off_1009F8098;

  return sub_100290170((uint64_t)v5, a2, a3);
}

uint64_t sub_1004566A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_INFO))
  {
    sub_100474E18(a2, __p);
    if (v11 >= 0) {
      char v8 = __p;
    }
    else {
      char v8 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136446466;
    uint64_t v13 = a4;
    __int16 v14 = 2082;
    id v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Sending %{public}s changed for %{public}s", buf, 0x16u);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
  return sub_100452A84(a1, a2);
}

uint64_t sub_1004567B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_INFO))
  {
    sub_100474E18(a2, __p);
    if (v8 >= 0) {
      int v5 = __p;
    }
    else {
      int v5 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136446210;
    BOOL v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Sending AACP capabilities received for %{public}s", buf, 0xCu);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  return sub_100452A84(a1, a2);
}

uint64_t sub_1004568A4(void *a1, char *a2)
{
  __int16 v33 = 0;
  int v34 = 0;
  uint64_t v35 = 0;
  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_1009AEAF8);
  }
  uint64_t v4 = sub_10060C508((uint64_t)off_1009F8760, (uint64_t **)&v33);
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A320();
    }
  }
  else
  {
    v32[0] = 0;
    v32[1] = 0;
    sub_10003AED0((uint64_t)v32, (uint64_t)(a1 + 7));
    int v5 = (char *)(a1 + 23);
    a1[24] = a1[23];
    int v6 = (uint64_t *)v33;
    if (v33 != v34)
    {
      do
      {
        uint64_t v7 = *v6;
        float v8 = sub_1004893FC(*v6);
        BOOL v9 = sub_100478AF4(v7);
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        sub_10047B7A8(v7, (_DWORD *)&v31 + 1, &v31, (_DWORD *)&v30 + 1, &v30);
        BOOL v10 = qword_100A19E40;
        if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEBUG))
        {
          sub_100475EE0(v7, (uint64_t)__p);
          uint64_t v24 = __p;
          if (v29 < 0) {
            uint64_t v24 = (void **)__p[0];
          }
          char v25 = "False";
          if (v9) {
            uint64_t v26 = "True";
          }
          else {
            uint64_t v26 = "False";
          }
          if (v8 != -1.0) {
            char v25 = "True";
          }
          *(_DWORD *)std::string buf = 136316162;
          __int16 v37 = v24;
          __int16 v38 = 1024;
          int v39 = HIDWORD(v30);
          __int16 v40 = 1024;
          int v41 = v31;
          __int16 v42 = 2080;
          int v43 = v26;
          __int16 v44 = 2080;
          unint64_t v45 = v25;
          _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "deviceName = %s, pid=0x%x, vid=0x%x, isAppleBT=%s, isHAESupported=%s", buf, 0x2Cu);
          if (v29 < 0) {
            operator delete(__p[0]);
          }
        }
        char v11 = v8 == -1.0 || v9;
        if ((v11 & 1) == 0)
        {
          uint64_t v13 = (uint64_t *)a1[24];
          unint64_t v12 = a1[25];
          if ((unint64_t)v13 >= v12)
          {
            uint64_t v15 = ((uint64_t)v13 - *(void *)v5) >> 3;
            if ((unint64_t)(v15 + 1) >> 61) {
              abort();
            }
            uint64_t v16 = v12 - *(void *)v5;
            uint64_t v17 = v16 >> 2;
            if (v16 >> 2 <= (unint64_t)(v15 + 1)) {
              uint64_t v17 = v15 + 1;
            }
            if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v18 = v17;
            }
            if (v18) {
              __int16 v19 = (char *)sub_1000405F8((uint64_t)(a1 + 25), v18);
            }
            else {
              __int16 v19 = 0;
            }
            id v20 = (uint64_t *)&v19[8 * v15];
            *id v20 = v7;
            __int16 v14 = v20 + 1;
            int v22 = (char *)a1[23];
            uint64_t v21 = (char *)a1[24];
            if (v21 != v22)
            {
              do
              {
                uint64_t v23 = *((void *)v21 - 1);
                v21 -= 8;
                *--id v20 = v23;
              }
              while (v21 != v22);
              uint64_t v21 = *(char **)v5;
            }
            a1[23] = v20;
            a1[24] = v14;
            a1[25] = &v19[8 * v18];
            if (v21) {
              operator delete(v21);
            }
          }
          else
          {
            *uint64_t v13 = v7;
            __int16 v14 = v13 + 1;
          }
          a1[24] = v14;
        }
        ++v6;
      }
      while (v6 != v34);
    }
    if (v5 != a2) {
      sub_1002B5F74(a2, (char *)a1[23], a1[24], (uint64_t)(a1[24] - a1[23]) >> 3);
    }
    sub_10003AFB4((uint64_t)v32);
    uint64_t v4 = 0;
  }
  if (v33)
  {
    int v34 = v33;
    operator delete(v33);
  }
  return v4;
}

void sub_100456BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

const char *sub_100456C2C(_DWORD *a1)
{
  uint64_t v1 = "Unknown";
  if (*a1 == 2) {
    uint64_t v1 = "Unplugged";
  }
  if (*a1 == 1) {
    return "Plugged in";
  }
  else {
    return v1;
  }
}

void *sub_100456C5C(void *result)
{
  *uint64_t result = off_1009AE9C8;
  return result;
}

void sub_100456C7C(void *a1)
{
  *a1 = off_1009AE9C8;
  operator delete();
}

void sub_100456CAC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009AEC18);
  }
  float v8 = off_1009F7EE8;
  if (sub_100456D90(a1, *(void *)(a1 + 40)) && sub_100456D90(a1, *(void *)(a1 + 56)) && v8[32] != v8[33])
  {
    sub_10045821C(a2, a3, *(void *)(a1 + 40), *(unsigned int *)(a1 + 48), *(void *)(a1 + 56), *(unsigned int *)(a1 + 64), a4);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
  {
    sub_10076A354();
  }
}

BOOL sub_100456D90(uint64_t a1, unint64_t a2)
{
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009AEAB8);
  }
  uint64_t v3 = qword_1009F8160;

  return sub_10055363C(v3, a2);
}

uint64_t sub_100456DF4(uint64_t a1)
{
  *(void *)a1 = off_1009AEA08;
  free(*(void **)(a1 + 64));
  return a1;
}

void sub_100456E3C(uint64_t a1)
{
  *(void *)a1 = off_1009AEA08;
  free(*(void **)(a1 + 64));

  operator delete();
}

void sub_100456EA4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009AEC18);
  }
  float v8 = off_1009F7EE8;
  if (sub_100456D90(a1, *(void *)(a1 + 40)) && sub_100456D90(a1, *(void *)(a1 + 48)) && v8[32] != v8[33])
  {
    sub_100458238(a2, a3, *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned int *)(a1 + 56), *(unsigned __int8 *)(a1 + 60), *(unsigned __int16 *)(a1 + 62), *(void *)(a1 + 64), a4);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
  {
    sub_10076A354();
  }
}

uint64_t sub_100456F94(uint64_t a1)
{
  *(void *)a1 = off_1009AEA48;
  free(*(void **)(a1 + 72));
  return a1;
}

void sub_100456FDC(uint64_t a1)
{
  *(void *)a1 = off_1009AEA48;
  free(*(void **)(a1 + 72));

  operator delete();
}

void sub_100457044(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009AEC18);
  }
  float v8 = off_1009F7EE8;
  if (sub_100456D90(a1, *(void *)(a1 + 40)) && sub_100456D90(a1, *(void *)(a1 + 48)) && v8[32] != v8[33])
  {
    sub_100458260(a2, a3, *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned int *)(a1 + 56) | ((unint64_t)*(unsigned __int16 *)(a1 + 60) << 32), *(unsigned int *)(a1 + 64), *(unsigned __int16 *)(a1 + 68), *(void *)(a1 + 72), a4);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
  {
    sub_10076A354();
  }
}

void sub_100457140()
{
}

void sub_100457154(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009AEC18);
  }
  float v8 = off_1009F7EE8;
  if (sub_100456D90(a1, *(void *)(a1 + 40)) && sub_100456D90(a1, *(void *)(a1 + 48)) && v8[32] != v8[33])
  {
    sub_100458288(a2, a3, *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned int *)(a1 + 56), *(unsigned __int16 *)(a1 + 60), *(unsigned __int16 *)(a1 + 62), a4);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
  {
    sub_10076A354();
  }
}

void sub_10045723C(void *a1)
{
  sub_10045775C(a1);

  operator delete();
}

void *sub_100457278(uint64_t a1)
{
  return sub_10045775C((void *)(a1 - 24));
}

void sub_100457280(uint64_t a1)
{
  sub_10045775C((void *)(a1 - 24));

  operator delete();
}

uint64_t sub_1004572C0(unint64_t *a1)
{
  uint64_t result = sub_100456D90((uint64_t)a1, a1[2]);
  if (result)
  {
    unint64_t v3 = a1[2];
    unint64_t v4 = a1[3];
    unint64_t v5 = a1[4];
    int v6 = *(uint64_t (**)(unint64_t *, unint64_t, unint64_t, unint64_t))(*a1 + 40);
    return v6(a1, v3, v4, v5);
  }
  return result;
}

uint64_t sub_100457334(unint64_t *a1)
{
  uint64_t result = sub_100456D90((uint64_t)a1, a1[2]);
  if (result)
  {
    unint64_t v3 = a1[2];
    unint64_t v4 = a1[3];
    unint64_t v5 = a1[4];
    int v6 = *(uint64_t (**)(unint64_t *, unint64_t, unint64_t, unint64_t))(*a1 + 40);
    return v6(a1, v3, v4, v5);
  }
  return result;
}

uint64_t sub_1004573A8(unint64_t *a1)
{
  uint64_t result = sub_100456D90((uint64_t)a1, a1[2]);
  if (result)
  {
    unint64_t v3 = a1[2];
    unint64_t v4 = a1[3];
    unint64_t v5 = a1[4];
    int v6 = *(uint64_t (**)(unint64_t *, unint64_t, unint64_t, unint64_t))(*a1 + 40);
    return v6(a1, v3, v4, v5);
  }
  return result;
}

uint64_t sub_10045741C(unint64_t *a1)
{
  uint64_t result = sub_100456D90((uint64_t)a1, a1[2]);
  if (result)
  {
    unint64_t v3 = a1[2];
    unint64_t v4 = a1[3];
    unint64_t v5 = a1[4];
    int v6 = *(uint64_t (**)(unint64_t *, unint64_t, unint64_t, unint64_t))(*a1 + 40);
    return v6(a1, v3, v4, v5);
  }
  return result;
}

void sub_100457490(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  unint64_t v5 = *(char **)(a1 + 8);
  unint64_t v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        unint64_t v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    uint64_t v6 = a2;
    sub_10045751C(a1 + 8, v4, (char *)&v6);
    sub_100061554(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_10045751C(uint64_t a1, char *__src, char *a3)
{
  unint64_t v3 = a3;
  unint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      __int16 v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      __int16 v19 = 0;
    }
    id v20 = &v19[8 * v16];
    std::string __p = v19;
    unint64_t v27 = v20;
    __int16 v28 = v20;
    char v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        uint64_t v23 = (char *)sub_1000405F8(v8, v22);
        id v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        unint64_t v27 = v20;
        char v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        unint64_t v27 = v20;
      }
    }
    *(void *)id v20 = *(void *)v3;
    __int16 v28 = v20 + 8;
    unint64_t v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__std::string src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    BOOL v9 = __src + 8;
    BOOL v10 = v6 - 8;
    char v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)unint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_100457724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10045775C(void *a1)
{
  *a1 = off_1009AE868;
  a1[1] = off_1009AE8F8;
  a1[2] = off_1009AE918;
  a1[3] = off_1009AE940;
  a1[4] = &off_1009AE980;
  a1[5] = &off_1009AE998;
  a1[6] = &off_1009AE9B0;
  int v2 = (void *)a1[32];
  if (v2)
  {
    a1[33] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[29];
  if (v3)
  {
    a1[30] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)a1[26];
  if (v4)
  {
    a1[27] = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)a1[23];
  if (v5)
  {
    a1[24] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[20];
  if (v6)
  {
    a1[21] = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)a1[17];
  if (v7)
  {
    a1[18] = v7;
    operator delete(v7);
  }
  sub_100052DA4(a1 + 7);
  return a1;
}

void sub_1004578C4(id a1)
{
}

void sub_100457908()
{
}

void sub_10045792C(id a1)
{
}

void sub_100457970()
{
}

void sub_100457994(id a1)
{
}

void sub_1004579D8()
{
}

void sub_1004579FC(id a1)
{
}

void sub_100457A40()
{
}

void sub_100457A64(id a1)
{
}

void sub_100457AA8()
{
}

void sub_100457ACC(id a1)
{
}

void sub_100457B10()
{
}

uint64_t sub_100457B34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 == a2) {
    return a1;
  }
  do
  {
    *(void *)a3 = *(void *)a1;
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a3 + 24) = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a3 + 8) = v3;
    *(_DWORD *)(a3 + 40) = *(_DWORD *)(a1 + 40);
    *(void *)(a3 + 48) = *(void *)(a1 + 48);
    a3 += 56;
    a1 += 56;
  }
  while (a1 != a2);
  return a2;
}

char *sub_100457B88(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_1003C8530(result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      *(void *)uint64_t v7 = *(void *)a2;
      long long v8 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(v7 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(v7 + 8) = v8;
      *(_DWORD *)(v7 + 40) = *(_DWORD *)(a2 + 40);
      *(void *)(v7 + 48) = *(void *)(a2 + 48);
      v7 += 56;
      a2 += 56;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_100457C0C(id a1)
{
}

void sub_100457C50()
{
}

void sub_100457C74(id a1)
{
}

void sub_100457CB8()
{
}

uint64_t sub_100457CDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    sub_100457B34(a3, *(void *)(a1 + 8), a2);
    *(void *)(a1 + 8) = v5;
  }
  return a2;
}

uint64_t sub_100457D24(uint64_t result, uint64_t a2, uint64_t a3)
{
  while (1)
  {
    if (result == a2) {
      return a2;
    }
    if (*(void *)result == a3) {
      break;
    }
    result += 56;
  }
  if (result != a2)
  {
    for (uint64_t i = result + 56; i != a2; i += 56)
    {
      if (*(void *)i != a3)
      {
        *(void *)uint64_t result = *(void *)i;
        long long v4 = *(_OWORD *)(i + 8);
        *(_OWORD *)(result + 24) = *(_OWORD *)(i + 24);
        *(_OWORD *)(result + 8) = v4;
        *(_DWORD *)(result + 40) = *(_DWORD *)(i + 40);
        *(void *)(result + 48) = *(void *)(i + 48);
        result += 56;
      }
    }
  }
  return result;
}

void sub_100457D98(id a1)
{
}

void sub_100457DDC()
{
}

uint64_t sub_100457E00(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492) {
    abort();
  }
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((v8 - v2) >> 3);
  if (2 * v9 > v4) {
    unint64_t v4 = 2 * v9;
  }
  if (v9 >= 0x249249249249249) {
    unint64_t v10 = 0x492492492492492;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v21 = v7;
  char v11 = (char *)sub_100378AFC(v7, v10);
  uint64_t v12 = &v11[56 * v3];
  std::string __p = v11;
  unint64_t v18 = v12;
  id v20 = &v11[56 * v13];
  *(void *)uint64_t v12 = *(void *)a2;
  long long v14 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v12 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v12 + 8) = v14;
  *((_DWORD *)v12 + 10) = *(_DWORD *)(a2 + 40);
  *((void *)v12 + 6) = *(void *)(a2 + 48);
  __int16 v19 = v12 + 56;
  sub_100457FA4(a1, &__p);
  uint64_t v15 = a1[1];
  if (v19 != v18) {
    __int16 v19 = &v18[(v19 - v18 - 56) % 0x38uLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v15;
}

void sub_100457F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100457FA4(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    uint64_t v5 = *(void *)(v2 - 56);
    v2 -= 56;
    *(void *)(v4 - 56) = v5;
    v4 -= 56;
    long long v6 = *(_OWORD *)(v2 + 8);
    *(_OWORD *)(v4 + 24) = *(_OWORD *)(v2 + 24);
    *(_OWORD *)(v4 + 8) = v6;
    *(_DWORD *)(v4 + 40) = *(_DWORD *)(v2 + 40);
    *(void *)(v4 + 48) = *(void *)(v2 + 48);
  }
  a2[1] = v4;
  uint64_t v7 = *result;
  *uint64_t result = v4;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10045801C(uint64_t result, uint64_t a2, void *a3)
{
  if (result == a2) {
    return a2;
  }
  while (1)
  {
    if (*a3 == *(void *)result)
    {
      BOOL v3 = a3[1] == *(void *)(result + 8) && a3[2] == *(void *)(result + 16);
      BOOL v4 = v3 && a3[3] == *(void *)(result + 24);
      if (v4 && a3[4] == *(void *)(result + 32)) {
        break;
      }
    }
    result += 56;
    if (result == a2) {
      return a2;
    }
  }
  if (result != a2)
  {
    for (uint64_t i = result + 56; i != a2; i += 56)
    {
      if (*a3 == *(void *)i)
      {
        BOOL v7 = a3[1] == *(void *)(i + 8) && a3[2] == *(void *)(i + 16);
        BOOL v8 = v7 && a3[3] == *(void *)(i + 24);
        if (v8 && a3[4] == *(void *)(i + 32)) {
          continue;
        }
      }
      *(void *)uint64_t result = *(void *)i;
      long long v10 = *(_OWORD *)(i + 8);
      *(_OWORD *)(result + 24) = *(_OWORD *)(i + 24);
      *(_OWORD *)(result + 8) = v10;
      *(_DWORD *)(result + 40) = *(_DWORD *)(i + 40);
      *(void *)(result + 48) = *(void *)(i + 48);
      result += 56;
    }
  }
  return result;
}

void sub_1004580E4(id a1)
{
}

void sub_100458128()
{
}

void sub_10045814C(id a1)
{
}

void sub_100458190()
{
}

void sub_1004581B4(id a1)
{
}

void sub_1004581F8()
{
}

uint64_t sub_10045821C(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return a2(a3, a4, a5, a6, a7);
}

uint64_t sub_100458238(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return a2(a3, a4, a5, a6, a8, a7, a9);
}

uint64_t sub_100458260(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return a2(a3, a4, a5 & 0xFFFFFFFFFFFFLL, a6, a8, a7, a9);
}

uint64_t sub_100458288(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a2(a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1004582A8(unint64_t a1, unint64_t *a2)
{
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
  }
  unint64_t v4 = sub_10045450C(off_1009F7EE8, a1);
  *a2 = v4;
  if (v4) {
    return 0;
  }
  else {
    return 7;
  }
}

uint64_t sub_100458314(unint64_t a1, long long *a2, uint64_t a3)
{
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
  }
  long long v6 = (uint64_t *)sub_1004543AC((uint64_t)off_1009F7EE8, a1);
  if (!v6) {
    return 7;
  }

  return sub_1004547A0(v6, a1, a2, a3);
}

uint64_t sub_1004583B0(unint64_t a1, long long *a2)
{
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
  }
  uint64_t v4 = sub_1004543AC((uint64_t)off_1009F7EE8, a1);
  if (!v4) {
    return 7;
  }

  return sub_1004548C8(v4, a1, a2);
}

uint64_t sub_100458438(unint64_t a1, int *a2, char *a3, uint64_t a4, char *a5, unint64_t *a6)
{
  v36[0] = 0;
  v36[1] = 0;
  char v37 = 0;
  sub_10061625C((char *)v36, 0);
  int v24 = *a2;
  __int16 v25 = *((_WORD *)a2 + 2);
  if (!a6 || !a2 || !a3 || !a5)
  {
    uint64_t v17 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
    {
      sub_1004A82EC((unsigned __int8 *)&v24, v27);
      unint64_t v22 = (void **)v27[0];
      uint64_t v23 = "(Valid Handle)";
      if (v28 >= 0) {
        unint64_t v22 = v27;
      }
      *(_DWORD *)std::string __p = 136315906;
      if (!a6) {
        uint64_t v23 = "(NULL)";
      }
      *(void *)&__p[4] = a3;
      __int16 v30 = 2080;
      uint64_t v31 = a5;
      __int16 v32 = 2080;
      __int16 v33 = v22;
      __int16 v34 = 2080;
      uint64_t v35 = v23;
      _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Invalid argument - %s %s %s %s", __p, 0x2Au);
      if (v28 < 0) {
        operator delete(v27[0]);
      }
    }
    uint64_t v15 = 3;
    goto LABEL_41;
  }
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
  }
  uint64_t v12 = (void *)sub_1004543AC((uint64_t)off_1009F7EE8, a1);
  if (!v12)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A388();
    }
    goto LABEL_28;
  }
  if (!(_BYTE)v24)
  {
    uint64_t v18 = 1;
    while (v18 != 6)
    {
      if (*((unsigned __int8 *)&v24 + v18++))
      {
        if ((unint64_t)(v18 - 2) < 5) {
          goto LABEL_9;
        }
        break;
      }
    }
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
    {
      sub_1004A82EC((unsigned __int8 *)&v24, __p);
      sub_10076A3BC();
    }
    goto LABEL_37;
  }
LABEL_9:
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  *(_DWORD *)std::string __p = *a2;
  *(_WORD *)&__p[4] = *((_WORD *)a2 + 2);
  uint64_t v13 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)__p, 1);
  if (!v13)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
    {
      sub_1004A82EC((unsigned __int8 *)&v24, __p);
      sub_10076A410();
    }
LABEL_37:
    uint64_t v15 = 8;
    goto LABEL_41;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  sub_1004AA7FC((uint64_t)off_1009F7EF8, v13, a4);
  sub_10004191C(__p, a3);
  uint64_t v26 = 0;
  v27[0] = 0;
  v27[1] = 0;
  sub_100026C30((uint64_t)&v26);
  v27[0] = (void *)(int)v26;
  v27[1] = (void *)SWORD2(v26);
  sub_100476E14(v13, (uint64_t)__p, v27);
  if (SHIBYTE(v32) < 0) {
    operator delete(*(void **)__p);
  }
  sub_1006162A4((char *)v36, a5);
  if (qword_1009F8778 != -1) {
    dispatch_once(&qword_1009F8778, &stru_1009AEC78);
  }
  sub_100618F08((uint64_t)off_1009F8770, v13, (uint64_t)v36);
  uint64_t v14 = sub_100454958(v12, v13);
  uint64_t v15 = v14;
  if (v14 == 601 || !v14)
  {
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
    }
    unint64_t v16 = sub_1004A93A0((uint64_t)off_1009F7EF8, a1, v13);
    *a6 = v16;
    if (v16)
    {
      uint64_t v15 = 0;
      goto LABEL_41;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
    {
      sub_1004A82EC((unsigned __int8 *)&v24, __p);
      sub_10076A4FC();
    }
LABEL_28:
    uint64_t v15 = 7;
    goto LABEL_41;
  }
  id v20 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
  {
    sub_1004A82EC((unsigned __int8 *)&v24, v27);
    sub_10076A464((char *)v27, __p, v15, v20);
  }
  *a6 = 0;
LABEL_41:
  nullsub_95(v36);
  return v15;
}

void sub_1004588D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

uint64_t sub_100458928(unint64_t a1, unint64_t a2)
{
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
  }
  uint64_t v4 = sub_1004543AC((uint64_t)off_1009F7EE8, a1);
  if (!v4)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A388();
    }
    return 7;
  }
  if (a2 - 4294901761u < 2 || !a2)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A584();
    }
    return 3;
  }
  uint64_t v6 = v4;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v7 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v7)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A550();
    }
    return 7;
  }
  BOOL v8 = (unsigned __int8 *)v7;
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009AEC98);
  }
  uint64_t v9 = sub_100019C0C((void *)qword_1009F8160, a1);
  if (v9)
  {
    uint64_t v10 = v9;
    if (sub_10053FF64())
    {
      CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle();
      if (CTGreenTeaOsLogHandle)
      {
        uint64_t v12 = CTGreenTeaOsLogHandle;
        if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
        {
          sub_10003AE4C(v10, (uint64_t)v19);
          int v13 = v20;
          uint64_t v14 = (void **)v19[0];
          sub_100474E18((uint64_t)v8, __p);
          uint64_t v15 = v19;
          if (v13 < 0) {
            uint64_t v15 = v14;
          }
          if (v18 >= 0) {
            unint64_t v16 = __p;
          }
          else {
            unint64_t v16 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136446466;
          unint64_t v22 = v15;
          __int16 v23 = 2082;
          int v24 = v16;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Session \"%{public}s\" is asking to plug device \"%{public}s\"", buf, 0x16u);
          if (v18 < 0) {
            operator delete(__p[0]);
          }
          if (v20 < 0) {
            operator delete(v19[0]);
          }
        }
      }
    }
  }
  return sub_100454BA4(v6, v8);
}

void sub_100458BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100458BE0(unint64_t a1, unint64_t a2)
{
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
  }
  uint64_t v4 = sub_1004543AC((uint64_t)off_1009F7EE8, a1);
  if (!v4) {
    return 7;
  }
  uint64_t v5 = v4;
  uint64_t result = 3;
  if (a2 - 4294901761u < 2 || !a2) {
    return result;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v7 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v7) {
    return 7;
  }

  return sub_1004550AC(v5, v7);
}

uint64_t sub_100458CC0(unint64_t a1, unint64_t a2, _DWORD *a3)
{
  if (!a3) {
    return 3;
  }
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
  }
  uint64_t v6 = sub_1004543AC((uint64_t)off_1009F7EE8, a1);
  if (!v6) {
    return 7;
  }
  uint64_t v7 = v6;
  uint64_t result = 3;
  if (a2 - 4294901761u < 2 || !a2) {
    return result;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v9 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v9) {
    return 7;
  }

  return sub_1004551AC(v7, v9, a3);
}

uint64_t sub_100458DC0(unint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t a4)
{
  uint64_t v4 = 3;
  if (a2 && a3)
  {
    uint64_t v7 = a2;
    if (qword_1009F7EF0 != -1) {
      dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
    }
    uint64_t v9 = sub_1004543AC((uint64_t)off_1009F7EE8, a1);
    if (v9)
    {
      std::string __p = 0;
      __int16 v19 = 0;
      uint64_t v20 = 0;
      uint64_t v4 = sub_100455280(v9, (char *)&__p);
      if (!v4)
      {
        unint64_t v10 = 0;
        if (a4 && __p != v19)
        {
          char v11 = (char *)__p + 8;
          unint64_t v12 = 1;
          do
          {
            uint64_t v13 = *((void *)v11 - 1);
            if (qword_1009F7F00 != -1) {
              dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
            }
            unint64_t v14 = sub_1004A93A0((uint64_t)off_1009F7EF8, a1, v13);
            if (!v14)
            {
              uint64_t v4 = 7;
              goto LABEL_21;
            }
            *v7++ = v14;
            unint64_t v15 = v12 + 1;
            if (v12 >= a4) {
              break;
            }
            ++v12;
            BOOL v16 = v11 == v19;
            v11 += 8;
          }
          while (!v16);
          unint64_t v10 = v15 - 1;
        }
        uint64_t v4 = 0;
        *a3 = v10;
      }
LABEL_21:
      if (__p)
      {
        __int16 v19 = (char *)__p;
        operator delete(__p);
      }
    }
    else
    {
      return 7;
    }
  }
  return v4;
}

void sub_100458F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100458F54(unint64_t a1, unint64_t a2, unsigned char *a3)
{
  if (!a3) {
    return 3;
  }
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
  }
  uint64_t v6 = sub_1004543AC((uint64_t)off_1009F7EE8, a1);
  if (!v6) {
    return 7;
  }
  uint64_t v7 = v6;
  uint64_t result = 3;
  if (a2 - 4294901761u < 2 || !a2) {
    return result;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v9 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v9) {
    return 7;
  }

  return sub_100455230(v7, v9, a3);
}

uint64_t sub_100459054(unint64_t a1, unint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 3;
  }
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
  }
  uint64_t v6 = sub_1004543AC((uint64_t)off_1009F7EE8, a1);
  if (!v6) {
    return 7;
  }
  uint64_t v7 = v6;
  uint64_t result = 3;
  if (a2 - 4294901761u < 2 || !a2) {
    return result;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v9 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v9) {
    return 7;
  }

  return sub_100455274(v7, v9, a3);
}

uint64_t sub_100459154(unint64_t a1, unint64_t a2, int *a3)
{
  if (!a3) {
    return 3;
  }
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
  }
  uint64_t v6 = sub_1004543AC((uint64_t)off_1009F7EE8, a1);
  if (!v6) {
    return 7;
  }
  uint64_t v7 = v6;
  uint64_t result = 3;
  if (a2 - 4294901761u >= 2 && a2)
  {
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
    }
    unint64_t v9 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
    if (v9)
    {
      int v10 = sub_100454734(v7, v9);
      uint64_t result = 0;
      *a3 = v10 << 31 >> 31;
      return result;
    }
    return 7;
  }
  return result;
}

uint64_t sub_10045924C(unint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)BOOL v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "BTAccessoryManagerGetLinkKey", v8, 2u);
  }
  if (a1 && a2 && a3)
  {
    if (qword_1009F7EF0 != -1) {
      dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
    }
    if (sub_1004543AC((uint64_t)off_1009F7EE8, a1))
    {
      arc4random_buf(a3, 0x10uLL);
      return 0;
    }
    else
    {
      return 7;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A5B8();
    }
    return 3;
  }
}

uint64_t sub_100459358(unint64_t a1, int *a2, char *a3, uint64_t a4, int a5, _OWORD *a6, unint64_t *a7)
{
  if (a2 && a3 && a6 && a7)
  {
    int v19 = *a2;
    __int16 v20 = *((_WORD *)a2 + 2);
    __n128 v23 = 0uLL;
    int v24 = 0;
    sub_100600E5C((uint64_t)&v23, a6, 5u);
    if (qword_1009F7EF0 != -1) {
      dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
    }
    if (sub_1004543AC((uint64_t)off_1009F7EE8, a1))
    {
      if (qword_1009F7F00 != -1) {
        dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
      }
      *(_DWORD *)std::string __p = *a2;
      *(_WORD *)&__p[4] = *((_WORD *)a2 + 2);
      uint64_t v13 = (unsigned __int8 *)sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)__p, 1);
      if (v13)
      {
        if (qword_1009F7F00 != -1) {
          dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
        }
        sub_1004AA7FC((uint64_t)off_1009F7EF8, (uint64_t)v13, a4);
        sub_10004191C(__p, a3);
        uint64_t v21 = 0;
        sub_100026C30((uint64_t)&v21);
        *(void *)&long long v22 = (int)v21;
        *((void *)&v22 + 1) = SWORD2(v21);
        sub_100476E14((uint64_t)v13, (uint64_t)__p, &v22);
        if (SHIBYTE(v26) < 0) {
          operator delete(*(void **)__p);
        }
        for (int i = 0; i != 31; ++i)
        {
          if (((1 << i) & a5) != 0)
          {
            *(void *)&long long v22 = 0;
            *(void *)std::string __p = 0;
            *(void *)&__p[8] = 0;
            sub_100026C30((uint64_t)&v22);
            *(void *)std::string __p = (int)v22;
            *(void *)&__p[8] = SWORD2(v22);
            sub_100477F4C((uint64_t)v13, 1 << i, 4, __p, 0);
          }
        }
        if (qword_1009F8778 != -1) {
          dispatch_once(&qword_1009F8778, &stru_1009AEC78);
        }
        uint64_t v15 = sub_100618730((uint64_t)off_1009F8770, v13, &v23, 0);
        if (qword_1009F7F00 != -1) {
          dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
        }
        *a7 = sub_1004A93A0((uint64_t)off_1009F7EF8, a1, (uint64_t)v13);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
        {
          sub_1004A82EC((unsigned __int8 *)&v19, __p);
          sub_10076A410();
        }
        uint64_t v15 = 8;
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
        sub_10076A388();
      }
      uint64_t v15 = 7;
    }
    nullsub_95(&v23);
  }
  else
  {
    BOOL v16 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
    {
      char v18 = "(Valid Handle)";
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = a3;
      if (!a7) {
        char v18 = "(NULL)";
      }
      *(_WORD *)&unsigned char __p[12] = 2048;
      *(void *)&__p[14] = a2;
      __int16 v26 = 2080;
      unint64_t v27 = v18;
      _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Invalid argument - %s %p %s", __p, 0x20u);
    }
    return 3;
  }
  return v15;
}

void sub_1004596F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

uint64_t sub_100459748(unint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v8 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v8) {
    return 7;
  }
  uint64_t v9 = v8;
  if (sub_100475E4C(v8, 0x80000u) != 4) {
    return 108;
  }
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
  }
  uint64_t v10 = sub_1004543AC((uint64_t)off_1009F7EE8, a1);
  if (!v10)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A388();
    }
    return 7;
  }
  uint64_t v11 = v10;
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009AEC98);
  }
  uint64_t v12 = sub_100019C0C((void *)qword_1009F8160, a1);
  if (v12)
  {
    uint64_t v13 = v12;
    if (sub_10053FF64())
    {
      CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle();
      if (CTGreenTeaOsLogHandle)
      {
        uint64_t v15 = CTGreenTeaOsLogHandle;
        if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
        {
          sub_10003AE4C(v13, (uint64_t)v22);
          int v16 = v23;
          uint64_t v17 = (void **)v22[0];
          sub_100474E18(v9, __p);
          char v18 = v22;
          if (v16 < 0) {
            char v18 = v17;
          }
          if (v21 >= 0) {
            int v19 = __p;
          }
          else {
            int v19 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136446466;
          __int16 v25 = v18;
          __int16 v26 = 2082;
          unint64_t v27 = v19;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Session \"%{public}s\" is asking to set double tap action for device \"%{public}s\"", buf, 0x16u);
          if (v21 < 0) {
            operator delete(__p[0]);
          }
          if (v23 < 0) {
            operator delete(v22[0]);
          }
        }
      }
    }
  }
  if (sub_10047C698(v9) == a3) {
    return 0;
  }
  else {
    return sub_100455710(v11, v9, a3);
  }
}

void sub_1004599D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004599F4(unint64_t a1, unint64_t a2, unsigned int a3, unsigned int a4)
{
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v10 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v10) {
    return 7;
  }
  uint64_t v11 = v10;
  if (sub_100475E4C(v10, 0x80000u) != 4) {
    return 108;
  }
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
  }
  uint64_t v12 = sub_1004543AC((uint64_t)off_1009F7EE8, a1);
  if (!v12)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A388();
    }
    return 7;
  }
  uint64_t v13 = v12;
  unsigned __int8 v14 = sub_10047C698(v11);
  unsigned __int8 v15 = (unsigned __int16)sub_10047C698(v11) >> 8;
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009AEC98);
  }
  uint64_t v16 = sub_100019C0C((void *)qword_1009F8160, a1);
  if (v16)
  {
    uint64_t v17 = v16;
    if (sub_10053FF64())
    {
      CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle();
      if (CTGreenTeaOsLogHandle)
      {
        int v19 = CTGreenTeaOsLogHandle;
        if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
        {
          sub_10003AE4C(v17, (uint64_t)v26);
          int v20 = v27;
          char v21 = (void **)v26[0];
          sub_100474E18(v11, __p);
          long long v22 = v26;
          if (v20 < 0) {
            long long v22 = v21;
          }
          if (v25 >= 0) {
            char v23 = __p;
          }
          else {
            char v23 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136446466;
          char v29 = v22;
          __int16 v30 = 2082;
          uint64_t v31 = v23;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Session \"%{public}s\" is asking to set advanced double tap action for device \"%{public}s\"", buf, 0x16u);
          if (v25 < 0) {
            operator delete(__p[0]);
          }
          if (v27 < 0) {
            operator delete(v26[0]);
          }
        }
      }
    }
  }
  if (v14 == a4 && v15 == a3) {
    return 0;
  }
  else {
    return sub_10045577C(v13, v11, a3, a4);
  }
}

void sub_100459CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100459CD0(unint64_t a1, unint64_t a2, _DWORD *a3)
{
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v8 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v8) {
    return 7;
  }
  uint64_t v9 = v8;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  if (sub_1004AB1F0((uint64_t)off_1009F7EF8))
  {
    if (sub_100475E4C(v9, 0x80000u) != 4) {
      return 108;
    }
    if (qword_1009F7EF0 != -1) {
      dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
    }
    if (sub_1004543AC((uint64_t)off_1009F7EE8, a1))
    {
      int v10 = sub_100478B2C(v9, 14);
      uint64_t result = 0;
      *a3 = v10;
      return result;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A388();
    }
    return 7;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
    sub_10076A5EC();
  }
  return 212;
}

uint64_t sub_100459E68(uint64_t a1, unint64_t a2, int a3, int *a4)
{
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v9 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v9) {
    return 7;
  }
  uint64_t v10 = v9;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  if (sub_1004AB1F0((uint64_t)off_1009F7EF8))
  {
    int v11 = sub_100478B2C(v10, a3);
    uint64_t result = 0;
    *a4 = v11 << 31 >> 31;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A5EC();
    }
    return 212;
  }
  return result;
}

uint64_t sub_100459F84(uint64_t a1, unint64_t a2, int *a3)
{
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3;
  }
  void v16[5] = v3;
  v16[6] = v4;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v9 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v9) {
    return 7;
  }
  uint64_t v10 = v9;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  if (sub_1004AB1F0((uint64_t)off_1009F7EF8))
  {
    uint64_t v15 = 0;
    v16[0] = 0;
    sub_10047B7A8(v10, (_DWORD *)v16 + 1, v16, (_DWORD *)&v15 + 1, &v15);
    int v11 = HIDWORD(v15);
    if ((HIDWORD(v15) - 8194) <= 0x22 && ((1 << (BYTE4(v15) - 2)) & 0x47A877F9BLL) != 0)
    {
      int v12 = HIDWORD(v15) - 8194;
      if (HIDWORD(v15) - 8194) < 0xF && ((0x409Bu >> v12))
      {
        int v11 = dword_1007BEB20[v12];
      }
      else
      {
        if (sub_100478B2C(v10, 27)) {
          goto LABEL_26;
        }
        int v11 = HIDWORD(v15);
      }
    }
    unsigned int v13 = v11 - 8214;
    if (v13 > 0xF || ((1 << v13) & 0x8003) == 0)
    {
      int v14 = 0;
      goto LABEL_27;
    }
LABEL_26:
    int v14 = -1;
LABEL_27:
    uint64_t result = 0;
    *a3 = v14;
    return result;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
    sub_10076A5EC();
  }
  return 212;
}

uint64_t sub_10045A144(unint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v8 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v8) {
    return 7;
  }
  uint64_t v9 = v8;
  if (sub_100475E4C(v8, 0x80000u) != 4) {
    return 108;
  }
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
  }
  uint64_t v10 = sub_1004543AC((uint64_t)off_1009F7EE8, a1);
  if (!v10)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A388();
    }
    return 7;
  }
  uint64_t v11 = v10;
  if (sub_10048741C(v9) == a3) {
    return 0;
  }
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009AEC98);
  }
  uint64_t v12 = sub_100019C0C((void *)qword_1009F8160, a1);
  if (v12)
  {
    uint64_t v13 = v12;
    if (sub_10053FF64())
    {
      CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle();
      if (CTGreenTeaOsLogHandle)
      {
        uint64_t v15 = CTGreenTeaOsLogHandle;
        if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
        {
          sub_10003AE4C(v13, (uint64_t)v22);
          int v16 = v23;
          uint64_t v17 = (void **)v22[0];
          sub_100474E18(v9, __p);
          char v18 = v22;
          if (v16 < 0) {
            char v18 = v17;
          }
          if (v21 >= 0) {
            int v19 = __p;
          }
          else {
            int v19 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136446466;
          char v25 = v18;
          __int16 v26 = 2082;
          char v27 = v19;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Session \"%{public}s\" is asking to set Mic mode for device \"%{public}s\"", buf, 0x16u);
          if (v21 < 0) {
            operator delete(__p[0]);
          }
          if (v23 < 0) {
            operator delete(v22[0]);
          }
        }
      }
    }
  }
  return sub_1004556A0(v11, v9, a3);
}

void sub_10045A3CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10045A3F0(unint64_t a1, unint64_t a2, int a3, int a4)
{
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009AECB8);
  }
  if ((sub_100569954() & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A758();
    }
    return 108;
  }
  if (a2 - 4294901761u < 2 || !a2)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A724();
    }
    return 3;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v10 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v10)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A620();
    }
    return 7;
  }
  uint64_t v11 = (unsigned __int8 *)v10;
  if (sub_100475E4C(v10, 0x80000u) != 4)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A6F0();
    }
    return 108;
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009AECD8);
  }
  if (*((unsigned char *)off_1009F8068 + 60))
  {
    char v26 = 0;
    sub_10001B8E0(&v26);
    char v12 = sub_100181D84((uint64_t)(v11 + 128));
    sub_10001B910(&v26);
    if ((v12 & 1) == 0)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
        sub_10076A6BC();
      }
      uint64_t v8 = 108;
      goto LABEL_60;
    }
    if (qword_1009F7EF0 != -1) {
      dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
    }
    uint64_t v13 = sub_1004543AC((uint64_t)off_1009F7EE8, a1);
    if (v13)
    {
      if (qword_1009F8168 != -1) {
        dispatch_once(&qword_1009F8168, &stru_1009AEC98);
      }
      uint64_t v14 = sub_100019C0C((void *)qword_1009F8160, a1);
      uint64_t v15 = qword_100A19E40;
      BOOL v16 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
      if (v14)
      {
        if (v16)
        {
          sub_10003AE4C(v14, (uint64_t)v27);
          int v17 = v30;
          char v18 = *(unsigned char **)v27;
          sub_100474E18((uint64_t)v11, __p);
          int v19 = v27;
          if (v17 < 0) {
            int v19 = v18;
          }
          if (v25 >= 0) {
            int v20 = __p;
          }
          else {
            int v20 = (void **)__p[0];
          }
          char v21 = "Enabled";
          *(_DWORD *)std::string buf = 136446722;
          *(void *)&uint8_t buf[4] = v19;
          __int16 v32 = 2082;
          if (!a3) {
            char v21 = "Disabled";
          }
          __int16 v33 = v20;
          __int16 v34 = 2082;
          uint64_t v35 = v21;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "TimeSyncEnable: Session \"%{public}s\" is configuring Remote Timesync for device \"%{public}s\" to %{public}s", buf, 0x20u);
          if (v25 < 0) {
            operator delete(__p[0]);
          }
          if (v30 < 0) {
            operator delete(*(void **)v27);
          }
        }
        uint64_t v22 = sub_100019D1C(v14);
        uint64_t v8 = sub_1004557FC(v13, v11, v22, a3 != 0, a4);
        goto LABEL_60;
      }
      if (v16)
      {
        sub_100474E18((uint64_t)v11, buf);
        char v23 = v34 >= 0 ? buf : *(unsigned char **)buf;
        *(_DWORD *)char v27 = 136446466;
        *(void *)&void v27[4] = v23;
        __int16 v28 = 1024;
        int v29 = a3;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Warning: TimeSyncEnable: Invalid Session Setting TimeSync, ignoring device \"%{public}s\" to %d", v27, 0x12u);
        if (SHIBYTE(v34) < 0) {
          operator delete(*(void **)buf);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
    {
      sub_10076A688();
    }
    uint64_t v8 = 7;
LABEL_60:
    sub_10001B8AC(&v26);
    return v8;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
    sub_10076A654();
  }
  return 111;
}

void sub_10045A8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

uint64_t sub_10045A8E8(unint64_t a1, unint64_t a2, int a3)
{
  return sub_10045A3F0(a1, a2, a3, 0);
}

uint64_t sub_10045A8F0(unint64_t a1, unint64_t a2, int a3)
{
  return sub_10045A3F0(a1, a2, a3, 1);
}

uint64_t sub_10045A8F8(unint64_t a1, unint64_t a2, uint64_t *a3)
{
  if (!a3) {
    return 3;
  }
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
  }
  uint64_t v6 = sub_1004543AC((uint64_t)off_1009F7EE8, a1);
  if (!v6) {
    return 7;
  }
  uint64_t v7 = v6;
  uint64_t result = 3;
  if (a2 - 4294901761u >= 2 && a2)
  {
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
    }
    uint64_t v9 = (unsigned __int8 *)sub_1004A930C((uint64_t)off_1009F7EF8, a2);
    if (v9)
    {
      sub_100455A38(v7, v9, a3);
      return 0;
    }
    return 7;
  }
  return result;
}

uint64_t sub_10045A9E8(unint64_t a1, unint64_t a2, int a3)
{
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v8 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v8) {
    return 7;
  }
  uint64_t v9 = v8;
  if (sub_100475E4C(v8, 0x80000u) != 4) {
    return 108;
  }
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
  }
  uint64_t v10 = sub_1004543AC((uint64_t)off_1009F7EE8, a1);
  if (!v10)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A388();
    }
    return 7;
  }
  uint64_t v11 = v10;
  if ((a3 != 0) == sub_100487464(v9)) {
    return 0;
  }
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009AEC98);
  }
  uint64_t v12 = sub_100019C0C((void *)qword_1009F8160, a1);
  uint64_t v13 = qword_100A19E40;
  BOOL v14 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
  if (v12)
  {
    if (!v14) {
      return sub_100456548(v11, v9, a3 != 0);
    }
    sub_10003AE4C(v12, (uint64_t)v23);
    int v15 = v26;
    BOOL v16 = *(unsigned char **)v23;
    sub_100474E18(v9, __p);
    int v17 = v23;
    if (v15 < 0) {
      int v17 = v16;
    }
    char v18 = v22 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446722;
    *(void *)&uint8_t buf[4] = v17;
    __int16 v28 = 2082;
    int v29 = v18;
    __int16 v30 = 1024;
    int v31 = a3;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" is asking to set in ear detection mode for device \"%{public}s\" to %d", buf, 0x1Cu);
    if (v22 < 0) {
      operator delete(__p[0]);
    }
    if ((v26 & 0x80000000) == 0) {
      return sub_100456548(v11, v9, a3 != 0);
    }
    int v19 = *(void **)v23;
  }
  else
  {
    if (!v14) {
      return sub_100456548(v11, v9, a3 != 0);
    }
    sub_100474E18(v9, buf);
    int v20 = v30 >= 0 ? buf : *(unsigned char **)buf;
    *(_DWORD *)char v23 = 136446466;
    *(void *)&v23[4] = v20;
    __int16 v24 = 1024;
    int v25 = a3;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Setting in ear detection mode for device \"%{public}s\" to %d", v23, 0x12u);
    if ((SHIBYTE(v30) & 0x80000000) == 0) {
      return sub_100456548(v11, v9, a3 != 0);
    }
    int v19 = *(void **)buf;
  }
  operator delete(v19);
  return sub_100456548(v11, v9, a3 != 0);
}

void sub_10045ACEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10045AD10(unint64_t a1, unint64_t a2, int *a3, int *a4)
{
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v10 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v10) {
    return 7;
  }
  uint64_t v11 = v10;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  if (sub_1004AB1F0((uint64_t)off_1009F7EF8))
  {
    if (sub_100475E4C(v11, 0x80000u) != 4) {
      return 108;
    }
    if (qword_1009F7EF0 != -1) {
      dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
    }
    uint64_t v12 = sub_1004543AC((uint64_t)off_1009F7EE8, a1);
    if (v12)
    {
      sub_1004565B8(v12, v11, a3, a4);
      return 0;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A388();
    }
    return 7;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
    sub_10076A5EC();
  }
  return 212;
}

uint64_t sub_10045AEA8(unint64_t a1, unint64_t a2, unsigned __int8 a3, uint64_t a4, unsigned __int16 *a5, uint64_t a6)
{
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
  }
  if (!sub_1004543AC((uint64_t)off_1009F7EE8, a1)) {
    return 7;
  }
  uint64_t result = 3;
  if (a2 - 4294901761u < 2 || !a2) {
    return result;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v13 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v13) {
    return 7;
  }
  uint64_t v14 = v13;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  if (sub_1004AB1F0((uint64_t)off_1009F7EF8))
  {
    if (sub_100475E4C(v14, 0x80000u) == 4)
    {
      if (qword_1009F8168 != -1) {
        dispatch_once(&qword_1009F8168, &stru_1009AEC98);
      }
      uint64_t v15 = sub_100019C0C((void *)qword_1009F8160, a1);
      if (v15)
      {
        uint64_t v16 = v15;
        int v17 = qword_100A19E40;
        if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
        {
          sub_10003AE4C(v16, (uint64_t)v24);
          int v18 = v25;
          int v19 = (void **)v24[0];
          sub_100474E18(v14, __p);
          int v20 = v24;
          if (v18 < 0) {
            int v20 = v19;
          }
          if (v23 >= 0) {
            char v21 = __p;
          }
          else {
            char v21 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136446466;
          char v27 = v20;
          __int16 v28 = 2082;
          int v29 = v21;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" is asking to send Setup Command to device \"%{public}s\"", buf, 0x16u);
          if (v23 < 0) {
            operator delete(__p[0]);
          }
          if (v25 < 0) {
            operator delete(v24[0]);
          }
        }
      }
      if (qword_1009F80A0 != -1) {
        dispatch_once(&qword_1009F80A0, &stru_1009AECF8);
      }
      return sub_100288560((uint64_t)off_1009F8098, v14, a3, a4, a6, a5);
    }
    else
    {
      return 108;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A5EC();
    }
    return 212;
  }
}

void sub_10045B188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10045B1AC(unint64_t a1, unint64_t a2, uint64_t a3, int a4, const void *a5, unsigned int a6)
{
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
  }
  if (!sub_1004543AC((uint64_t)off_1009F7EE8, a1)) {
    return 7;
  }
  uint64_t result = 3;
  if (a2 - 4294901761u < 2 || !a2) {
    return result;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v13 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v13) {
    return 7;
  }
  uint64_t v14 = v13;
  if (sub_100475E4C(v13, 0x80000u) != 4) {
    return 108;
  }
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009AEC98);
  }
  uint64_t v15 = sub_100019C0C((void *)qword_1009F8160, a1);
  if (v15)
  {
    uint64_t v16 = v15;
    int v17 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
    {
      sub_10003AE4C(v16, (uint64_t)v24);
      int v18 = v25;
      int v19 = (void **)v24[0];
      sub_100474E18(v14, __p);
      int v20 = v24;
      if (v18 < 0) {
        int v20 = v19;
      }
      if (v23 >= 0) {
        char v21 = __p;
      }
      else {
        char v21 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446466;
      char v27 = v20;
      __int16 v28 = 2082;
      int v29 = v21;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" is asking to send Relay Msg to device \"%{public}s\"", buf, 0x16u);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
      if (v25 < 0) {
        operator delete(v24[0]);
      }
    }
  }
  if (qword_1009F80A0 != -1) {
    dispatch_once(&qword_1009F80A0, &stru_1009AECF8);
  }
  return sub_100288830((uint64_t)off_1009F8098, v14, a3, a4, a6, a5);
}

void sub_10045B42C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10045B450(unint64_t a1, unint64_t a2, int a3, int *a4, unsigned int a5)
{
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
  }
  if (!sub_1004543AC((uint64_t)off_1009F7EE8, a1)) {
    return 7;
  }
  uint64_t result = 3;
  if (a2 - 4294901761u < 2 || !a2) {
    return result;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v11 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v11) {
    return 7;
  }
  uint64_t v12 = v11;
  if (sub_100475E4C(v11, 0x80000u) != 4) {
    return 108;
  }
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009AEC98);
  }
  uint64_t v13 = sub_100019C0C((void *)qword_1009F8160, a1);
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
    {
      sub_10003AE4C(v14, (uint64_t)v22);
      int v16 = v23;
      int v17 = (void **)v22[0];
      sub_100474E18(v12, __p);
      int v18 = v22;
      if (v16 < 0) {
        int v18 = v17;
      }
      if (v21 >= 0) {
        int v19 = __p;
      }
      else {
        int v19 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446466;
      char v25 = v18;
      __int16 v26 = 2082;
      char v27 = v19;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" is asking to send Update Connection Priority List to device \"%{public}s\"", buf, 0x16u);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
      if (v23 < 0) {
        operator delete(v22[0]);
      }
    }
  }
  if (qword_1009F80A0 != -1) {
    dispatch_once(&qword_1009F80A0, &stru_1009AECF8);
  }
  return sub_100288C00((uint64_t)off_1009F8098, v12, a3, a4, a5);
}

void sub_10045B6C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10045B6E4(unint64_t a1, unint64_t a2, _DWORD *a3)
{
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v8 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v8) {
    return 7;
  }
  uint64_t v9 = v8;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  if (sub_1004AB1F0((uint64_t)off_1009F7EF8))
  {
    if (sub_100475E4C(v9, 0x80000u) != 4) {
      return 108;
    }
    if (qword_1009F7EF0 != -1) {
      dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
    }
    if (sub_1004543AC((uint64_t)off_1009F7EE8, a1))
    {
      int v10 = sub_10047C698(v9);
      uint64_t result = 0;
      *a3 = v10;
      return result;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A388();
    }
    return 7;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
    sub_10076A5EC();
  }
  return 212;
}

uint64_t sub_10045B878(unint64_t a1, unint64_t a2, _DWORD *a3, int *a4)
{
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v10 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v10) {
    return 7;
  }
  uint64_t v11 = v10;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  if (sub_1004AB1F0((uint64_t)off_1009F7EF8))
  {
    if (sub_100475E4C(v11, 0x80000u) != 4) {
      return 108;
    }
    if (qword_1009F7EF0 != -1) {
      dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
    }
    if (sub_1004543AC((uint64_t)off_1009F7EE8, a1))
    {
      *a4 = sub_10047C698(v11);
      int v12 = ((unsigned __int16)sub_10047C698(v11) >> 8);
      *a3 = v12;
      uint64_t v13 = qword_100A19E40;
      BOOL v14 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (v14)
      {
        int v15 = *a4;
        v16[0] = 67109376;
        v16[1] = v12;
        __int16 v17 = 1024;
        int v18 = v15;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Double tap values read from device, left = %d, rght = %d", (uint8_t *)v16, 0xEu);
        return 0;
      }
      return result;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A388();
    }
    return 7;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
    sub_10076A5EC();
  }
  return 212;
}

uint64_t sub_10045BAB8(unint64_t a1, unint64_t a2, _DWORD *a3)
{
  if (!a3) {
    return 3;
  }
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v8 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v8) {
    return 7;
  }
  uint64_t v9 = v8;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  if (sub_1004AB1F0((uint64_t)off_1009F7EF8))
  {
    if (sub_100475E4C(v9, 0x80000u) != 4) {
      return 108;
    }
    if (qword_1009F7EF0 != -1) {
      dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
    }
    if (sub_1004543AC((uint64_t)off_1009F7EE8, a1))
    {
      int v10 = sub_10048741C(v9);
      uint64_t result = 0;
      *a3 = v10;
      return result;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A388();
    }
    return 7;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
    sub_10076A5EC();
  }
  return 212;
}

uint64_t sub_10045BC58(unint64_t a1, unint64_t a2, int *a3)
{
  if (!a3) {
    return 3;
  }
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v8 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v8) {
    return 7;
  }
  uint64_t v9 = v8;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  if (sub_1004AB1F0((uint64_t)off_1009F7EF8))
  {
    if (sub_100475E4C(v9, 0x80000u) != 4) {
      return 108;
    }
    if (qword_1009F7EF0 != -1) {
      dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
    }
    if (sub_1004543AC((uint64_t)off_1009F7EE8, a1))
    {
      int v10 = sub_100487464(v9);
      uint64_t result = 0;
      *a3 = v10 << 31 >> 31;
      return result;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A388();
    }
    return 7;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
    sub_10076A5EC();
  }
  return 212;
}

uint64_t sub_10045BDFC(unint64_t a1, unint64_t a2, int a3)
{
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v8 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v8) {
    return 7;
  }
  uint64_t v9 = v8;
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
  }
  if (!sub_1004543AC((uint64_t)off_1009F7EE8, a1))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A388();
    }
    return 7;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  if (sub_1004AB1F0((uint64_t)off_1009F7EF8))
  {
    if (sub_100475E4C(v9, 0x80000u) == 4)
    {
      if (qword_1009F80A0 != -1) {
        dispatch_once(&qword_1009F80A0, &stru_1009AECF8);
      }
      sub_1002AF9A4((uint64_t)off_1009F8098, v9, a3 != 0);
      return 0;
    }
    else
    {
      return 108;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A5EC();
    }
    return 212;
  }
}

uint64_t sub_10045BFC0(unint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
  }
  if (!sub_1004543AC((uint64_t)off_1009F7EE8, a1)) {
    return 7;
  }
  if (qword_1009F80A0 != -1) {
    dispatch_once(&qword_1009F80A0, &stru_1009AECF8);
  }
  unint64_t v8 = off_1009F8098;

  return sub_1002A9C44(v8, a1, a3, a2, a4);
}

uint64_t sub_10045C094(unint64_t a1, uint64_t *a2)
{
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
  }
  if (!sub_1004543AC((uint64_t)off_1009F7EE8, a1)) {
    return 7;
  }
  if (qword_1009F80A0 != -1) {
    dispatch_once(&qword_1009F80A0, &stru_1009AECF8);
  }
  uint64_t v4 = off_1009F8098;

  return sub_1002AA0BC((uint64_t)v4, a1, a2);
}

uint64_t sub_10045C14C(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unsigned __int16 a5)
{
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
  }
  if (!sub_1004543AC((uint64_t)off_1009F7EE8, a1)) {
    return 7;
  }
  uint64_t result = 3;
  if (a3 - 4294901761u < 2 || !a3) {
    return result;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v11 = sub_1004A930C((uint64_t)off_1009F7EF8, a3);
  if (!v11) {
    return 7;
  }
  uint64_t v12 = v11;
  if (sub_100475E4C(v11, 0x80000u) != 4) {
    return 108;
  }
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009AEC98);
  }
  uint64_t v13 = sub_100019C0C((void *)qword_1009F8160, a1);
  if (v13)
  {
    uint64_t v14 = v13;
    if (sub_10053FF64())
    {
      CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle();
      if (CTGreenTeaOsLogHandle)
      {
        int v16 = CTGreenTeaOsLogHandle;
        if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
        {
          sub_10003AE4C(v14, (uint64_t)v23);
          int v17 = v24;
          int v18 = (void **)v23[0];
          sub_100474E18(v12, __p);
          int v19 = v23;
          if (v17 < 0) {
            int v19 = v18;
          }
          if (v22 >= 0) {
            int v20 = __p;
          }
          else {
            int v20 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136446466;
          __int16 v26 = v19;
          __int16 v27 = 2082;
          __int16 v28 = v20;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Session \"%{public}s\" is asking to send custom data to device \"%{public}s\"", buf, 0x16u);
          if (v22 < 0) {
            operator delete(__p[0]);
          }
          if (v24 < 0) {
            operator delete(v23[0]);
          }
        }
      }
    }
  }
  if (qword_1009F80A0 != -1) {
    dispatch_once(&qword_1009F80A0, &stru_1009AECF8);
  }
  return sub_10028502C((uint64_t)off_1009F8098, v12, a2, a5, a4);
}

void sub_10045C3CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10045C3F0(unint64_t a1, unint64_t a2, unsigned int a3, unsigned __int8 *a4)
{
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
  }
  if (!sub_1004543AC((uint64_t)off_1009F7EE8, a1)) {
    return 7;
  }
  uint64_t result = 3;
  if (a2 - 4294901761u < 2 || !a2) {
    return result;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v9 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v9) {
    return 7;
  }
  uint64_t v10 = v9;
  if (sub_100475E4C(v9, 0x80000u) != 4) {
    return 108;
  }
  if (qword_1009F80A0 != -1) {
    dispatch_once(&qword_1009F80A0, &stru_1009AECF8);
  }
  unint64_t v11 = off_1009F8098;

  return sub_1002939C0((uint64_t)v11, v10, a3, a4);
}

uint64_t sub_10045C530(unint64_t a1, unint64_t a2, unsigned int a3, unsigned __int8 *a4)
{
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
  }
  if (!sub_1004543AC((uint64_t)off_1009F7EE8, a1)) {
    return 7;
  }
  uint64_t result = 3;
  if (a2 - 4294901761u < 2 || !a2) {
    return result;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v9 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v9) {
    return 7;
  }
  uint64_t v10 = v9;
  if (sub_100475E4C(v9, 0x80000u) != 4) {
    return 108;
  }
  if (qword_1009F80A0 != -1) {
    dispatch_once(&qword_1009F80A0, &stru_1009AECF8);
  }
  unint64_t v11 = off_1009F8098;

  return sub_100293BF4((uint64_t)v11, v10, a3, a4);
}

uint64_t sub_10045C670(unint64_t a1, unint64_t a2, void *a3, void *a4, unint64_t a5)
{
  uint64_t v10 = sub_100017768();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v10 + 8))(v10)) {
    return 2;
  }
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
  }
  if (!sub_1004543AC((uint64_t)off_1009F7EE8, a1)) {
    return 7;
  }
  uint64_t result = 3;
  if (a2 - 4294901761u < 2 || !a2) {
    return result;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v12 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v12) {
    return 7;
  }
  if (sub_100475E4C(v12, 0x80000u) != 4) {
    return 108;
  }
  LOBYTE(__n) = 0;
  memset(v14, 0, sizeof(v14));
  if (qword_1009F8798 != -1) {
    dispatch_once(&qword_1009F8798, &stru_1009AED18);
  }
  sub_1003EF0E0(qword_1009F8790, v14);
  uint64_t v13 = __n;
  if (__n > a5) {
    return 5;
  }
  memcpy(a3, v14, __n);
  uint64_t result = 0;
  *a4 = v13;
  return result;
}

uint64_t sub_10045C854(unint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned __int16 a4)
{
  uint64_t v8 = sub_100017768();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v8 + 8))(v8)) {
    return 2;
  }
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
  }
  if (!sub_1004543AC((uint64_t)off_1009F7EE8, a1)) {
    return 7;
  }
  uint64_t result = 3;
  if (a2 - 4294901761u < 2 || !a2) {
    return result;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v10 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v10) {
    return 7;
  }
  uint64_t v11 = v10;
  if (sub_100475E4C(v10, 0x80000u) != 4) {
    return 108;
  }
  if (qword_1009F8798 != -1) {
    dispatch_once(&qword_1009F8798, &stru_1009AED18);
  }
  uint64_t v12 = qword_1009F8790;

  return sub_1003EF420(v12, v11, a3, a4);
}

uint64_t sub_10045C9C8(unint64_t a1, unint64_t a2, unsigned __int8 a3)
{
  uint64_t v6 = sub_100017768();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v6 + 8))(v6)) {
    return 2;
  }
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
  }
  if (!sub_1004543AC((uint64_t)off_1009F7EE8, a1)) {
    return 7;
  }
  uint64_t result = 3;
  if (a2 - 4294901761u < 2 || !a2) {
    return result;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v8 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v8) {
    return 7;
  }
  uint64_t v9 = v8;
  if (sub_100475E4C(v8, 0x80000u) != 4) {
    return 108;
  }
  if (qword_1009F8798 != -1) {
    dispatch_once(&qword_1009F8798, &stru_1009AED18);
  }
  uint64_t v10 = qword_1009F8790;

  return sub_1003EF644(v10, v9, a3);
}

uint64_t sub_10045CB34(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
  }
  if (!sub_1004543AC((uint64_t)off_1009F7EE8, a1)) {
    return 7;
  }
  uint64_t result = 3;
  if (a2 - 4294901761u < 2 || !a2) {
    return result;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v9 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v9) {
    return 7;
  }
  uint64_t v10 = v9;
  if (sub_100475E4C(v9, 0x80000u) != 4) {
    return 108;
  }
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009AEC98);
  }
  uint64_t v11 = sub_100019C0C((void *)qword_1009F8160, a1);
  if (v11)
  {
    uint64_t v12 = v11;
    if (sub_10053FF64())
    {
      CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle();
      if (CTGreenTeaOsLogHandle)
      {
        uint64_t v14 = CTGreenTeaOsLogHandle;
        if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
        {
          sub_10003AE4C(v12, (uint64_t)v21);
          int v15 = v22;
          int v16 = (void **)v21[0];
          sub_100474E18(v10, __p);
          int v17 = v21;
          if (v15 < 0) {
            int v17 = v16;
          }
          if (v20 >= 0) {
            int v18 = __p;
          }
          else {
            int v18 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136446466;
          char v24 = v17;
          __int16 v25 = 2082;
          __int16 v26 = v18;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Session \"%{public}s\" is asking to send control command to device \"%{public}s\"", buf, 0x16u);
          if (v20 < 0) {
            operator delete(__p[0]);
          }
          if (v22 < 0) {
            operator delete(v21[0]);
          }
        }
      }
    }
  }
  if (qword_1009F80A0 != -1) {
    dispatch_once(&qword_1009F80A0, &stru_1009AECF8);
  }
  return sub_1002859A4((uint64_t)off_1009F8098, v10, a3, a4, 2u);
}

void sub_10045CDB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10045CDD4(unint64_t a1, unint64_t a2, int a3, int a4, int *a5)
{
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
  }
  if (!sub_1004543AC((uint64_t)off_1009F7EE8, a1)) {
    return 7;
  }
  uint64_t result = 3;
  if (a2 - 4294901761u < 2 || !a2) {
    return result;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v11 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v11) {
    return 7;
  }
  uint64_t v12 = v11;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  if (sub_1004AB1F0((uint64_t)off_1009F7EF8))
  {
    if (sub_100475E4C(v12, 0x80000u) == 4)
    {
      uint64_t result = 0;
      switch(a3)
      {
        case 13:
          int v13 = sub_100487564(v12);
          *a5 = v13;
          uint64_t v14 = qword_100A19E40;
          BOOL v15 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0;
          if (v15)
          {
            *(_DWORD *)std::string buf = 67109376;
            *(_DWORD *)id v86 = a4;
            *(_WORD *)&v86[4] = 1024;
            *(_DWORD *)&void v86[6] = v13;
            int v16 = "Get ListeningMode device setting : setting type %d, controlValue %d";
            goto LABEL_42;
          }
          break;
        case 20:
          int v17 = sub_100487684(v12);
          *a5 = v17;
          uint64_t v14 = qword_100A19E40;
          BOOL v18 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0;
          if (v18)
          {
            *(_DWORD *)std::string buf = 67109376;
            *(_DWORD *)id v86 = a4;
            *(_WORD *)&v86[4] = 1024;
            *(_DWORD *)&void v86[6] = v17;
            int v16 = "Get SingleClickMode device setting : setting type %d, controlValue %d";
            goto LABEL_42;
          }
          break;
        case 21:
          int v19 = sub_1004876CC(v12);
          *a5 = v19;
          uint64_t v14 = qword_100A19E40;
          BOOL v20 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0;
          if (v20)
          {
            *(_DWORD *)std::string buf = 67109376;
            *(_DWORD *)id v86 = a4;
            *(_WORD *)&v86[4] = 1024;
            *(_DWORD *)&void v86[6] = v19;
            int v16 = "Get DoubleClickMode device setting : setting type %d, controlValue %d";
            goto LABEL_42;
          }
          break;
        case 22:
          int v21 = sub_100487714(v12);
          *a5 = v21;
          uint64_t v14 = qword_100A19E40;
          BOOL v22 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0;
          if (v22)
          {
            *(_DWORD *)std::string buf = 67109376;
            *(_DWORD *)id v86 = a4;
            *(_WORD *)&v86[4] = 1024;
            *(_DWORD *)&void v86[6] = v21;
            int v16 = "Get ClickHoldMode device setting : setting type %d, controlValue %d";
            goto LABEL_42;
          }
          break;
        case 23:
          int v23 = sub_10048775C(v12);
          *a5 = v23;
          uint64_t v14 = qword_100A19E40;
          BOOL v24 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0;
          if (v24)
          {
            *(_DWORD *)std::string buf = 67109376;
            *(_DWORD *)id v86 = a4;
            *(_WORD *)&v86[4] = 1024;
            *(_DWORD *)&void v86[6] = v23;
            int v16 = "Get DoubleClickInterval device setting : setting type %d, controlValue %d";
            goto LABEL_42;
          }
          break;
        case 24:
          int v25 = sub_1004877A4(v12);
          *a5 = v25;
          uint64_t v14 = qword_100A19E40;
          BOOL v26 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0;
          if (v26)
          {
            *(_DWORD *)std::string buf = 67109376;
            *(_DWORD *)id v86 = a4;
            *(_WORD *)&v86[4] = 1024;
            *(_DWORD *)&void v86[6] = v25;
            int v16 = "Get ClickHoldInterval device setting : setting type %d, controlValue %d";
            goto LABEL_42;
          }
          break;
        case 26:
          int v27 = sub_1004875AC(v12);
          *a5 = v27;
          uint64_t v14 = qword_100A19E40;
          BOOL v28 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0;
          if (v28)
          {
            *(_DWORD *)std::string buf = 67109376;
            *(_DWORD *)id v86 = a4;
            *(_WORD *)&v86[4] = 1024;
            *(_DWORD *)&void v86[6] = v27;
            int v16 = "Get ListeningModeConfigs device setting : setting type %d, controlValue %d";
            goto LABEL_42;
          }
          break;
        case 27:
          int v29 = sub_1004877EC(v12);
          *a5 = v29;
          uint64_t v14 = qword_100A19E40;
          BOOL v30 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0;
          if (v30)
          {
            *(_DWORD *)std::string buf = 67109376;
            *(_DWORD *)id v86 = a4;
            *(_WORD *)&v86[4] = 1024;
            *(_DWORD *)&void v86[6] = v29;
            int v16 = "Get OneBudANCMode device setting : setting type %d, controlValue %d";
            goto LABEL_42;
          }
          break;
        case 28:
          int v31 = sub_100487834(v12);
          *a5 = v31;
          uint64_t v14 = qword_100A19E40;
          BOOL v32 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0;
          if (v32)
          {
            *(_DWORD *)std::string buf = 67109376;
            *(_DWORD *)id v86 = a4;
            *(_WORD *)&v86[4] = 1024;
            *(_DWORD *)&void v86[6] = v31;
            int v16 = "Get CrownRotationDirection device setting : setting type %d, controlValue %d";
            goto LABEL_42;
          }
          break;
        case 30:
          int v33 = sub_10048787C(v12);
          *a5 = v33;
          uint64_t v14 = qword_100A19E40;
          BOOL v34 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0;
          if (v34)
          {
            *(_DWORD *)std::string buf = 67109376;
            *(_DWORD *)id v86 = a4;
            *(_WORD *)&v86[4] = 1024;
            *(_DWORD *)&void v86[6] = v33;
            int v16 = "Get Auto Answer device setting : setting type %d, controlValue %d";
            goto LABEL_42;
          }
          break;
        case 31:
          int v35 = sub_1004878C4(v12);
          *a5 = v35;
          uint64_t v14 = qword_100A19E40;
          BOOL v36 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0;
          if (v36)
          {
            *(_DWORD *)std::string buf = 67109376;
            *(_DWORD *)id v86 = a4;
            *(_WORD *)&v86[4] = 1024;
            *(_DWORD *)&void v86[6] = v35;
            int v16 = "Get ChimeVolume device setting : setting type %d, controlValue %d";
LABEL_42:
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v16, buf, 0xEu);
            goto LABEL_116;
          }
          break;
        case 35:
          *a5 = sub_100487954(v12);
          char v37 = qword_100A19E40;
          BOOL v38 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0;
          if (v38)
          {
            sub_100474E18(v12, __p);
            if (v84 >= 0) {
              int v39 = __p;
            }
            else {
              int v39 = (void **)__p[0];
            }
            int v40 = *a5;
            *(_DWORD *)std::string buf = 136446722;
            *(void *)id v86 = v39;
            *(_WORD *)&v86[8] = 1024;
            int v87 = a4;
            __int16 v88 = 1024;
            int v89 = v40;
            int v41 = "Get VolumeSwipeInterval setting for device %{public}s : setting type %d, controlValue %d";
            goto LABEL_114;
          }
          break;
        case 36:
          *a5 = sub_10048799C(v12);
          char v37 = qword_100A19E40;
          BOOL v42 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0;
          if (v42)
          {
            sub_100474E18(v12, __p);
            if (v84 >= 0) {
              int v43 = __p;
            }
            else {
              int v43 = (void **)__p[0];
            }
            int v44 = *a5;
            *(_DWORD *)std::string buf = 136446722;
            *(void *)id v86 = v43;
            *(_WORD *)&v86[8] = 1024;
            int v87 = a4;
            __int16 v88 = 1024;
            int v89 = v44;
            int v41 = "Get CallManagementConfiguration setting for device %{public}s : setting type %d, controlValue 0x%08X";
            goto LABEL_114;
          }
          break;
        case 37:
          *a5 = sub_10048790C(v12);
          char v37 = qword_100A19E40;
          BOOL v45 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0;
          if (v45)
          {
            sub_100474E18(v12, __p);
            if (v84 >= 0) {
              __int16 v46 = __p;
            }
            else {
              __int16 v46 = (void **)__p[0];
            }
            int v47 = *a5;
            *(_DWORD *)std::string buf = 136446722;
            *(void *)id v86 = v46;
            *(_WORD *)&v86[8] = 1024;
            int v87 = a4;
            __int16 v88 = 1024;
            int v89 = v47;
            int v41 = "Get VolumeSwipeMode setting for device %{public}s : setting type %d, controlValue %d";
            goto LABEL_114;
          }
          break;
        case 38:
          *a5 = sub_1004879E4(v12);
          char v37 = qword_100A19E40;
          BOOL v48 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0;
          if (v48)
          {
            sub_100474E18(v12, __p);
            if (v84 >= 0) {
              unsigned int v49 = __p;
            }
            else {
              unsigned int v49 = (void **)__p[0];
            }
            int v50 = *a5;
            *(_DWORD *)std::string buf = 136446722;
            *(void *)id v86 = v49;
            *(_WORD *)&v86[8] = 1024;
            int v87 = a4;
            __int16 v88 = 1024;
            int v89 = v50;
            int v41 = "Get AdaptiveVolumeMode setting for device %{public}s : setting type %d, controlValue 0x%08X";
            goto LABEL_114;
          }
          break;
        case 39:
          *a5 = sub_100487A2C(v12);
          char v37 = qword_100A19E40;
          BOOL v51 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0;
          if (v51)
          {
            sub_100474E18(v12, __p);
            if (v84 >= 0) {
              char v52 = __p;
            }
            else {
              char v52 = (void **)__p[0];
            }
            int v53 = *a5;
            *(_DWORD *)std::string buf = 136446722;
            *(void *)id v86 = v52;
            *(_WORD *)&v86[8] = 1024;
            int v87 = a4;
            __int16 v88 = 1024;
            int v89 = v53;
            int v41 = "Get Software Mute device setting for device %{public}s : setting type %u, controlValue %u";
            goto LABEL_114;
          }
          break;
        case 40:
          *a5 = sub_100487A74(v12);
          char v37 = qword_100A19E40;
          BOOL v54 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0;
          if (v54)
          {
            sub_100474E18(v12, __p);
            if (v84 >= 0) {
              int v55 = __p;
            }
            else {
              int v55 = (void **)__p[0];
            }
            int v56 = *a5;
            *(_DWORD *)std::string buf = 136446722;
            *(void *)id v86 = v55;
            *(_WORD *)&v86[8] = 1024;
            int v87 = a4;
            __int16 v88 = 1024;
            int v89 = v56;
            int v41 = "Get Conversation Detect device setting for device %{public}s : setting type %u, controlValue %u";
            goto LABEL_114;
          }
          break;
        case 41:
          *a5 = sub_100487ABC(v12);
          char v37 = qword_100A19E40;
          BOOL v57 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0;
          if (v57)
          {
            sub_100474E18(v12, __p);
            if (v84 >= 0) {
              uint64_t v58 = __p;
            }
            else {
              uint64_t v58 = (void **)__p[0];
            }
            int v59 = *a5;
            *(_DWORD *)std::string buf = 136446722;
            *(void *)id v86 = v58;
            *(_WORD *)&v86[8] = 1024;
            int v87 = a4;
            __int16 v88 = 1024;
            int v89 = v59;
            int v41 = "Get SSL device setting for device %{public}s : setting type %u, controlValue %u";
            goto LABEL_114;
          }
          break;
        case 44:
          unsigned __int8 v60 = sub_10048E0DC(v12);
          unsigned __int8 v61 = sub_10048DFF4(v12);
          uint64_t result = 0;
          *a5 = v61 | (v60 << 8);
          break;
        case 46:
          *a5 = sub_100487B04(v12);
          char v37 = qword_100A19E40;
          BOOL v62 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0;
          if (v62)
          {
            sub_100474E18(v12, __p);
            if (v84 >= 0) {
              __int16 v63 = __p;
            }
            else {
              __int16 v63 = (void **)__p[0];
            }
            int v64 = *a5;
            *(_DWORD *)std::string buf = 136446722;
            *(void *)id v86 = v63;
            *(_WORD *)&v86[8] = 1024;
            int v87 = a4;
            __int16 v88 = 1024;
            int v89 = v64;
            int v41 = "Get Auto ANC strength device setting for device %{public}s : setting type %u, controlValue %u";
            goto LABEL_114;
          }
          break;
        case 47:
          *a5 = sub_100487B4C(v12);
          char v37 = qword_100A19E40;
          BOOL v65 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0;
          if (v65)
          {
            sub_100474E18(v12, __p);
            if (v84 >= 0) {
              int v66 = __p;
            }
            else {
              int v66 = (void **)__p[0];
            }
            int v67 = *a5;
            *(_DWORD *)std::string buf = 136446722;
            *(void *)id v86 = v66;
            *(_WORD *)&v86[8] = 1024;
            int v87 = a4;
            __int16 v88 = 1024;
            int v89 = v67;
            int v41 = "Get HPS Gain Swipe device setting for device %{public}s : setting type %u, controlValue %u";
            goto LABEL_114;
          }
          break;
        case 48:
          *a5 = sub_100487C24(v12);
          char v37 = qword_100A19E40;
          BOOL v68 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0;
          if (v68)
          {
            sub_100474E18(v12, __p);
            if (v84 >= 0) {
              __int16 v69 = __p;
            }
            else {
              __int16 v69 = (void **)__p[0];
            }
            int v70 = *a5;
            *(_DWORD *)std::string buf = 136446722;
            *(void *)id v86 = v69;
            *(_WORD *)&v86[8] = 1024;
            int v87 = a4;
            __int16 v88 = 1024;
            int v89 = v70;
            int v41 = "Get Heart Rate Monitor enabled device setting for device %{public}s : setting type %u, controlValue %u";
            goto LABEL_114;
          }
          break;
        case 49:
          *a5 = sub_100487C6C(v12);
          char v37 = qword_100A19E40;
          BOOL v71 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0;
          if (v71)
          {
            sub_100474E18(v12, __p);
            if (v84 >= 0) {
              unsigned int v72 = __p;
            }
            else {
              unsigned int v72 = (void **)__p[0];
            }
            int v73 = *a5;
            *(_DWORD *)std::string buf = 136446722;
            *(void *)id v86 = v72;
            *(_WORD *)&v86[8] = 1024;
            int v87 = a4;
            __int16 v88 = 1024;
            int v89 = v73;
            int v41 = "Get In Case Tone device setting for device %{public}s : setting type %u, controlValue %u";
            goto LABEL_114;
          }
          break;
        case 50:
          *a5 = sub_100487CB4(v12);
          char v37 = qword_100A19E40;
          BOOL v74 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0;
          if (v74)
          {
            sub_100474E18(v12, __p);
            if (v84 >= 0) {
              __int16 v75 = __p;
            }
            else {
              __int16 v75 = (void **)__p[0];
            }
            int v76 = *a5;
            *(_DWORD *)std::string buf = 136446722;
            *(void *)id v86 = v75;
            *(_WORD *)&v86[8] = 1024;
            int v87 = a4;
            __int16 v88 = 1024;
            int v89 = v76;
            int v41 = "Get Siri Multitone device setting for device %{public}s : setting type %u, controlValue %u";
            goto LABEL_114;
          }
          break;
        case 51:
          *a5 = sub_100487B94(v12);
          char v37 = qword_100A19E40;
          BOOL v77 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0;
          if (v77)
          {
            sub_100474E18(v12, __p);
            if (v84 >= 0) {
              int v78 = __p;
            }
            else {
              int v78 = (void **)__p[0];
            }
            int v79 = *a5;
            *(_DWORD *)std::string buf = 136446722;
            *(void *)id v86 = v78;
            *(_WORD *)&v86[8] = 1024;
            int v87 = a4;
            __int16 v88 = 1024;
            int v89 = v79;
            int v41 = "Get Hearing Assist device setting for device %{public}s : setting type %u, controlValue %u";
            goto LABEL_114;
          }
          break;
        case 52:
          *a5 = sub_100487BDC(v12);
          char v37 = qword_100A19E40;
          BOOL v80 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0;
          if (v80)
          {
            sub_100474E18(v12, __p);
            if (v84 >= 0) {
              uint64_t v81 = __p;
            }
            else {
              uint64_t v81 = (void **)__p[0];
            }
            int v82 = *a5;
            *(_DWORD *)std::string buf = 136446722;
            *(void *)id v86 = v81;
            *(_WORD *)&v86[8] = 1024;
            int v87 = a4;
            __int16 v88 = 1024;
            int v89 = v82;
            int v41 = "Allow Off Option for Listening Mode device setting for device %{public}s : setting type %u, controlValue %u";
LABEL_114:
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, v41, buf, 0x18u);
            if (v84 < 0) {
              operator delete(__p[0]);
            }
LABEL_116:
            uint64_t result = 0;
          }
          break;
        default:
          return result;
      }
    }
    else
    {
      return 108;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A5EC();
    }
    return 212;
  }
  return result;
}

uint64_t sub_10045DC88(unint64_t a1, unint64_t a2, int *a3)
{
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
  }
  if (!sub_1004543AC((uint64_t)off_1009F7EE8, a1))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A388();
    }
    return 7;
  }
  uint64_t result = 3;
  if (a2 - 4294901761u < 2 || !a2) {
    return result;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v7 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v7) {
    return 7;
  }
  uint64_t v8 = v7;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  if (sub_1004AB1F0((uint64_t)off_1009F7EF8))
  {
    *a3 = 0;
    if (sub_100478B2C(v8, 12)) {
      *a3 |= 1u;
    }
    if (sub_100478B2C(v8, 1)) {
      *a3 |= 8u;
    }
    if (sub_100478B2C(v8, 3)) {
      *a3 |= 0x10u;
    }
    if (sub_100478B2C(v8, 14)) {
      *a3 |= 6u;
    }
    if (sub_100478B2C(v8, 16)) {
      *a3 |= 0x200u;
    }
    if (sub_100478B2C(v8, 17)) {
      *a3 |= 0x100u;
    }
    if (sub_100478B2C(v8, 15)) {
      *a3 |= 0x20u;
    }
    if (sub_100478B2C(v8, 3)) {
      *a3 |= 0x400u;
    }
    unint64_t v9 = qword_100A19E40;
    BOOL v10 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v10)
    {
      int v11 = *a3;
      v12[0] = 67109120;
      v12[1] = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Setting Feature BitMask : settingFeatureBitMask %8x", (uint8_t *)v12, 8u);
      return 0;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A5EC();
    }
    return 212;
  }
  return result;
}

uint64_t sub_10045DF54(uint64_t a1, unint64_t a2, void *a3, void *a4, unint64_t a5)
{
  unint64_t v9 = objc_opt_new();
  if (a2)
  {
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
    }
    unint64_t v10 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
    uint64_t v11 = v10;
    if (v10)
    {
      BOOL v45 = 0;
      __int16 v46 = 0;
      uint64_t v47 = 0;
      if (sub_10047FF14(v10, (uint64_t)&v45))
      {
        uint64_t v12 = objc_opt_new();
        for (int i = v45; i != v46; i += 3)
        {
          uint64_t v14 = i;
          if (*((char *)i + 23) < 0) {
            uint64_t v14 = (uint64_t *)*i;
          }
          uint64_t v15 = +[NSString stringWithUTF8String:v14];
          int v16 = (void *)v15;
          if (v15) {
            CFStringRef v17 = (const __CFString *)v15;
          }
          else {
            CFStringRef v17 = &stru_1009C1AC8;
          }
          [v12 addObject:v17];
        }
        [v9 setObject:v12 forKey:@"AACPVersionInfo"];
      }
      memset(&v44, 0, sizeof(v44));
      if (sub_100480604(v11, &v44))
      {
        if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          BOOL v18 = &v44;
        }
        else {
          BOOL v18 = (std::string *)v44.__r_.__value_.__r.__words[0];
        }
        int v19 = +[NSString stringWithUTF8String:v18];
        [v9 setObject:v19 forKey:@"ANCAssetVersion"];
      }
      uint64_t v43 = 0;
      long long v41 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v40 = 0u;
      sub_10004191C(__p, "");
      if (sub_100480790(v11, (uint64_t)&v40))
      {
        BOOL v20 = objc_opt_new();
        if (v43 >= 0) {
          int v21 = __p;
        }
        else {
          int v21 = (void **)__p[0];
        }
        BOOL v22 = +[NSString stringWithUTF8String:v21];
        unint64_t v23 = v41;
        if ((unint64_t)[v22 length] >= 2) {
          [v20 setObject:v22 forKey:@"CaseInfoName"];
        }
        if (v23)
        {
          unsigned __int16 v24 = v23 >> 4;
          if (v40 < 2u)
          {
            uint64_t v25 = v23 & 0xF;
          }
          else
          {
            uint64_t v25 = (v23 >> 20) & 0xFFF0 | v23 & 0xF;
            v24 |= WORD2(v23) & 0xFFF0;
          }
          int v27 = +[NSString stringWithFormat:@"%u.%u.%u", (unsigned __int16)(v23 >> 8), v24, v25];
          [v20 setObject:v27 forKey:@"CaseInfoVersion"];
        }
        if ([v20 count]) {
          [v9 setObject:v20 forKey:@"CaseInfo"];
        }
      }
      if ([v9 count])
      {
        id v39 = 0;
        BOOL v28 = +[NSJSONSerialization dataWithJSONObject:v9 options:0 error:&v39];
        id v29 = v39;
        if (v29)
        {
          BOOL v30 = qword_100A19E40;
          if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
            sub_10076A78C((uint64_t)v29, v30, v31, v32, v33, v34, v35, v36);
          }
          uint64_t v26 = 1;
        }
        else if ((unint64_t)[v28 length] <= a5)
        {
          id v37 = v28;
          memcpy(a3, [v37 bytes], (size_t)[v37 length]);
          uint64_t v26 = 0;
          *a4 = [v37 length];
        }
        else
        {
          uint64_t v26 = 5;
        }
      }
      else
      {
        id v29 = 0;
        uint64_t v26 = 1;
      }
      if (SHIBYTE(v43) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v44.__r_.__value_.__l.__data_);
      }
      *(void *)&long long v40 = &v45;
      sub_100051568((void ***)&v40);
    }
    else
    {
      uint64_t v26 = 3;
    }
  }
  else
  {
    uint64_t v26 = 7;
  }

  return v26;
}

void sub_10045E354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  a15 = v34 - 112;
  sub_100051568((void ***)&a15);

  _Unwind_Resume(a1);
}

uint64_t sub_10045E418(uint64_t a1, unint64_t a2, void *a3, unint64_t *a4, unint64_t a5)
{
  if (!a2) {
    return 19;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v9 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v9) {
    return 3;
  }
  uint64_t v10 = v9;
  if (sub_100475E4C(v9, 0x80000u) != 4) {
    return 108;
  }
  uint64_t v15 = 0;
  int v16 = 0;
  uint64_t v17 = 0;
  sub_100487E5C(v10, &v15);
  uint64_t v11 = v15;
  unint64_t v12 = v16 - v15;
  if (v16 != v15)
  {
    if (v12 <= a5)
    {
      memcpy(a3, v15, v16 - v15);
      uint64_t v13 = 0;
      *a4 = v12;
      if (!v11) {
        return v13;
      }
    }
    else
    {
      uint64_t v13 = 5;
      if (!v15) {
        return v13;
      }
    }
    goto LABEL_14;
  }
  uint64_t v13 = 1;
  if (v15)
  {
LABEL_14:
    int v16 = v11;
    operator delete(v11);
  }
  return v13;
}

uint64_t sub_10045E534(uint64_t a1, unint64_t a2, unsigned int a3, _DWORD *a4)
{
  if (!a2) {
    return 19;
  }
  if (a3 > 0xFF) {
    return 3;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v7 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v7) {
    return 3;
  }
  uint64_t v8 = v7;
  if (sub_100475E4C(v7, 0x80000u) != 4) {
    return 108;
  }
  int v9 = sub_100487EFC(v8, a3);
  uint64_t result = 0;
  *a4 = v9;
  return result;
}

uint64_t sub_10045E5F4(uint64_t a1, char *a2, size_t a3, char *a4, size_t a5, char *a6, size_t a7, char *a8, size_t a9, char *a10, size_t a11, char *a12, size_t a13, char *a14, size_t a15)
{
  BOOL v18 = a4;
  if (qword_1009F80A0 != -1)
  {
    uint64_t v26 = a6;
    size_t v27 = a7;
    size_t v25 = a5;
    unint64_t v23 = a8;
    dispatch_once(&qword_1009F80A0, &stru_1009AECF8);
    a8 = v23;
    BOOL v18 = a4;
    a5 = v25;
    a6 = v26;
    a7 = v27;
  }
  return sub_1002A3CE0((uint64_t)off_1009F8098, a1, a2, a3, v18, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_10045E6D0(unint64_t a1, unint64_t a2, _DWORD *a3)
{
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
  }
  if (!sub_1004543AC((uint64_t)off_1009F7EE8, a1))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A388();
    }
    return 7;
  }
  if (!a3) {
    return 3;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  if (sub_1004AB1F0((uint64_t)off_1009F7EF8))
  {
    uint64_t result = 3;
    if (a2 - 4294901761u >= 2 && a2)
    {
      if (qword_1009F7F00 != -1) {
        dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
      }
      unint64_t v7 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
      if (v7)
      {
        int v8 = sub_100489318(v7);
        uint64_t result = 0;
        *a3 = v8;
        return result;
      }
      return 7;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A5EC();
    }
    return 212;
  }
  return result;
}

uint64_t sub_10045E83C(unint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t a4)
{
  uint64_t v4 = 3;
  if (a2 && a3)
  {
    unint64_t v7 = a2;
    if (qword_1009F7EF0 != -1) {
      dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
    }
    int v9 = (void *)sub_1004543AC((uint64_t)off_1009F7EE8, a1);
    if (v9)
    {
      std::string __p = 0;
      int v19 = 0;
      uint64_t v20 = 0;
      uint64_t v4 = sub_1004568A4(v9, (char *)&__p);
      if (!v4)
      {
        unint64_t v10 = 0;
        if (a4 && __p != v19)
        {
          uint64_t v11 = (char *)__p + 8;
          unint64_t v12 = 1;
          do
          {
            uint64_t v13 = *((void *)v11 - 1);
            if (qword_1009F7F00 != -1) {
              dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
            }
            unint64_t v14 = sub_1004A93A0((uint64_t)off_1009F7EF8, a1, v13);
            if (!v14)
            {
              uint64_t v4 = 7;
              goto LABEL_23;
            }
            *v7++ = v14;
            unint64_t v15 = v12 + 1;
            if (v12 >= a4) {
              break;
            }
            ++v12;
            BOOL v16 = v11 == v19;
            v11 += 8;
          }
          while (!v16);
          unint64_t v10 = v15 - 1;
        }
        uint64_t v4 = 0;
        *a3 = v10;
      }
LABEL_23:
      if (__p)
      {
        int v19 = (char *)__p;
        operator delete(__p);
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
        sub_10076A388();
      }
      return 7;
    }
  }
  return v4;
}

void sub_10045E9D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10045E9F8(unint64_t a1, unint64_t a2, int *a3)
{
  if (!a3) {
    return 3;
  }
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v8 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v8) {
    return 7;
  }
  uint64_t v9 = v8;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  if (sub_1004AB1F0((uint64_t)off_1009F7EF8))
  {
    if (!sub_100487DD4(v9, 64)) {
      return 108;
    }
    uint64_t v10 = sub_100035F54();
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v10 + 792))(v10, 1)) {
      return 108;
    }
    uint64_t v11 = sub_100035F54();
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v11 + 384))(v11)) {
      return 108;
    }
    if (qword_1009F7EF0 != -1) {
      dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
    }
    if (sub_1004543AC((uint64_t)off_1009F7EE8, a1))
    {
      if (qword_1009F80B0 != -1) {
        dispatch_once(&qword_1009F80B0, &stru_1009AECB8);
      }
      int v12 = sub_100573244((uint64_t)off_1009F80A8, v9);
      if (qword_1009F8168 != -1) {
        dispatch_once(&qword_1009F8168, &stru_1009AEC98);
      }
      uint64_t v13 = sub_100019C0C((void *)qword_1009F8160, a1);
      unint64_t v14 = qword_100A19E40;
      BOOL v15 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
      if (v13)
      {
        if (!v15) {
          goto LABEL_49;
        }
        sub_10003AE4C(v13, (uint64_t)v24);
        int v16 = v27;
        uint64_t v17 = *(unsigned char **)v24;
        sub_100474E18(v9, __p);
        BOOL v18 = v24;
        if (v16 < 0) {
          BOOL v18 = v17;
        }
        int v19 = v23 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)std::string buf = 136446722;
        *(void *)&uint8_t buf[4] = v18;
        __int16 v29 = 2082;
        BOOL v30 = v19;
        __int16 v31 = 1024;
        int v32 = v12;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" reading in Spatial Audio Active device \"%{public}s\" to %d", buf, 0x1Cu);
        if (v23 < 0) {
          operator delete(__p[0]);
        }
        if ((v27 & 0x80000000) == 0) {
          goto LABEL_49;
        }
        uint64_t v20 = *(void **)v24;
      }
      else
      {
        if (!v15) {
          goto LABEL_49;
        }
        sub_100474E18(v9, buf);
        int v21 = v31 >= 0 ? buf : *(unsigned char **)buf;
        *(_DWORD *)unsigned __int16 v24 = 136446466;
        *(void *)&void v24[4] = v21;
        __int16 v25 = 1024;
        int v26 = v12;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Spatial Audio Active for device \"%{public}s\" to %d", v24, 0x12u);
        if ((SHIBYTE(v31) & 0x80000000) == 0) {
          goto LABEL_49;
        }
        uint64_t v20 = *(void **)buf;
      }
      operator delete(v20);
LABEL_49:
      uint64_t result = 0;
      *a3 = v12 << 31 >> 31;
      return result;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A388();
    }
    return 7;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
    sub_10076A5EC();
  }
  return 212;
}

void sub_10045EDD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10045EDFC(unint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v8 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v8) {
    return 7;
  }
  uint64_t v9 = v8;
  uint64_t v10 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(v9, __p);
    uint64_t v11 = v32 >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)std::string buf = 136446466;
    *(void *)&uint8_t buf[4] = v11;
    __int16 v26 = 1024;
    int v27 = a3;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "BTAccessoryManagerSpatialAudioAllowed:  \"%{public}s\" Allowed %d", buf, 0x12u);
    if (SHIBYTE(v32) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  if (sub_1004AB1F0((uint64_t)off_1009F7EF8))
  {
    if (!sub_100487DD4(v9, 64)) {
      return 108;
    }
    uint64_t v12 = sub_100035F54();
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v12 + 792))(v12, 1)) {
      return 108;
    }
    if (qword_1009F7EF0 != -1) {
      dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
    }
    uint64_t v13 = sub_1004543AC((uint64_t)off_1009F7EE8, a1);
    if (v13)
    {
      if (qword_1009F8168 != -1) {
        dispatch_once(&qword_1009F8168, &stru_1009AEC98);
      }
      uint64_t v14 = sub_100019C0C((void *)qword_1009F8160, a1);
      BOOL v15 = qword_100A19E40;
      BOOL v16 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
      if (v14)
      {
        if (!v16) {
          return sub_100455C54(v13, v9, a3);
        }
        sub_10003AE4C(v14, (uint64_t)buf);
        int v17 = v28;
        BOOL v18 = *(unsigned char **)buf;
        sub_100474E18(v9, v23);
        int v19 = buf;
        if (v17 < 0) {
          int v19 = v18;
        }
        uint64_t v20 = v24 >= 0 ? v23 : (void **)v23[0];
        *(_DWORD *)std::string __p = 136446722;
        *(void *)&__p[4] = v19;
        __int16 v30 = 2082;
        __int16 v31 = v20;
        __int16 v32 = 1024;
        int v33 = a3;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" is asking to Spatial Audio for device \"%{public}s\" to %d", __p, 0x1Cu);
        if (v24 < 0) {
          operator delete(v23[0]);
        }
        if ((v28 & 0x80000000) == 0) {
          return sub_100455C54(v13, v9, a3);
        }
        int v21 = *(void **)buf;
      }
      else
      {
        if (!v16) {
          return sub_100455C54(v13, v9, a3);
        }
        sub_100474E18(v9, __p);
        BOOL v22 = v32 >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)std::string buf = 136446466;
        *(void *)&uint8_t buf[4] = v22;
        __int16 v26 = 1024;
        int v27 = a3;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Setting Spatial Audio for device \"%{public}s\" to %d", buf, 0x12u);
        if ((SHIBYTE(v32) & 0x80000000) == 0) {
          return sub_100455C54(v13, v9, a3);
        }
        int v21 = *(void **)__p;
      }
      operator delete(v21);
      return sub_100455C54(v13, v9, a3);
    }
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A388();
    }
    return 7;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
    sub_10076A5EC();
  }
  return 212;
}

void sub_10045F1E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10045F208(unint64_t a1, unint64_t a2, int *a3)
{
  if (!a3) {
    return 3;
  }
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v8 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v8) {
    return 7;
  }
  uint64_t v9 = v8;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  if ((sub_1004AB1F0((uint64_t)off_1009F7EF8) & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A5EC();
    }
    return 212;
  }
  if (!sub_100487DD4(v9, 64)) {
    return 108;
  }
  uint64_t v10 = sub_100035F54();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v10 + 792))(v10, 1)) {
    return 108;
  }
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
  }
  uint64_t v11 = sub_1004543AC((uint64_t)off_1009F7EE8, a1);
  if (!v11)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A388();
    }
    return 7;
  }
  sub_100455B24(v11, v9, a3);
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009AEC98);
  }
  uint64_t v12 = sub_100019C0C((void *)qword_1009F8160, a1);
  uint64_t v13 = qword_100A19E40;
  uint64_t result = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
  if (v12)
  {
    if (result)
    {
      sub_10003AE4C(v12, (uint64_t)v24);
      int v14 = v27;
      BOOL v15 = *(unsigned char **)v24;
      sub_100474E18(v9, __p);
      BOOL v16 = v24;
      if (v14 < 0) {
        BOOL v16 = v15;
      }
      if (v23 >= 0) {
        int v17 = __p;
      }
      else {
        int v17 = (void **)__p[0];
      }
      int v18 = *a3;
      *(_DWORD *)std::string buf = 136446722;
      *(void *)&uint8_t buf[4] = v16;
      __int16 v29 = 2082;
      __int16 v30 = v17;
      __int16 v31 = 1024;
      int v32 = v18;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" reading in Spatial Audio Allowed device \"%{public}s\" to %d", buf, 0x1Cu);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
      if ((v27 & 0x80000000) == 0) {
        return 0;
      }
      int v19 = *(void **)v24;
      goto LABEL_46;
    }
  }
  else if (result)
  {
    sub_100474E18(v9, buf);
    if (v31 >= 0) {
      uint64_t v20 = buf;
    }
    else {
      uint64_t v20 = *(unsigned char **)buf;
    }
    int v21 = *a3;
    *(_DWORD *)char v24 = 136446466;
    *(void *)&void v24[4] = v20;
    __int16 v25 = 1024;
    int v26 = v21;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Spatial Audio Allowed for device \"%{public}s\" to %d", v24, 0x12u);
    if ((SHIBYTE(v31) & 0x80000000) == 0) {
      return 0;
    }
    int v19 = *(void **)buf;
LABEL_46:
    operator delete(v19);
    return 0;
  }
  return result;
}

void sub_10045F57C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10045F5A0(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v13 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v13) {
    return 7;
  }
  if (a4 >= 4)
  {
    int v14 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A7F8(a4, v14, v15, v16, v17, v18, v19, v20);
    }
    return 3;
  }
  uint64_t v21 = v13;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  char v22 = sub_1004AB1F0((uint64_t)off_1009F7EF8);
  char v23 = qword_100A19E40;
  if (v22)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(v21, __p);
      char v24 = v47[9] >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)std::string buf = 136446466;
      *(void *)&uint8_t buf[4] = v24;
      __int16 v42 = 1024;
      int v43 = a4;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "BTAccessoryManagerSpatialAudioConfig:  \"%{public}s\" Allowed %d", buf, 0x12u);
      if ((v47[9] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    if (!sub_100487DD4(v21, 64)) {
      return 108;
    }
    uint64_t v25 = sub_100035F54();
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v25 + 792))(v25, 1)) {
      return 108;
    }
    if (qword_1009F7EF0 != -1) {
      dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
    }
    uint64_t v26 = sub_1004543AC((uint64_t)off_1009F7EE8, a1);
    if (v26)
    {
      if (qword_1009F8168 != -1) {
        dispatch_once(&qword_1009F8168, &stru_1009AEC98);
      }
      uint64_t v27 = sub_100019C0C((void *)qword_1009F8160, a1);
      char v28 = qword_100A19E40;
      BOOL v29 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
      if (v27)
      {
        if (v29)
        {
          sub_10003AE4C(v27, (uint64_t)buf);
          int v30 = v44;
          __int16 v31 = *(unsigned char **)buf;
          sub_100474E18(v21, v39);
          int v32 = buf;
          if (v30 < 0) {
            int v32 = v31;
          }
          if (v40 >= 0) {
            int v33 = v39;
          }
          else {
            int v33 = (void **)v39[0];
          }
          *(_DWORD *)std::string __p = 136446978;
          *(void *)&__p[4] = v32;
          uint64_t v34 = "YES";
          __int16 v46 = 2082;
          if (a5 != -1) {
            uint64_t v34 = "NO";
          }
          *(void *)uint64_t v47 = v33;
          *(_WORD *)&v47[8] = 1024;
          *(_DWORD *)&v47[10] = a4;
          __int16 v48 = 2082;
          unsigned int v49 = v34;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" is asking to Spatial Audio config for device \"%{public}s\" to %d Head Tracking %{public}s", __p, 0x26u);
          if (v40 < 0) {
            operator delete(v39[0]);
          }
LABEL_55:
          if (v44 < 0) {
            operator delete(*(void **)buf);
          }
        }
      }
      else if (v29)
      {
        sub_100474E18(v21, buf);
        if (v44 >= 0) {
          uint64_t v35 = buf;
        }
        else {
          uint64_t v35 = *(unsigned char **)buf;
        }
        uint64_t v36 = "YES";
        *(_DWORD *)std::string __p = 136446722;
        if (!a5) {
          uint64_t v36 = "NO";
        }
        *(void *)&__p[4] = v35;
        __int16 v46 = 1024;
        *(_DWORD *)uint64_t v47 = a4;
        *(_WORD *)&v47[4] = 2082;
        *(void *)&v47[6] = v36;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Setting Spatial Audio config for device \"%{public}s\" to %d Head Tracking %{public}s", __p, 0x1Cu);
        goto LABEL_55;
      }
      id v37 = +[NSString stringWithUTF8String:a3];
      if ([v37 compare:@"global"]) {
        BOOL v38 = v37;
      }
      else {
        BOOL v38 = 0;
      }
      uint64_t v6 = sub_100456244(v26, v21, v38, a4, a5);

      return v6;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A388();
    }
    return 7;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
    sub_10076A5EC();
  }
  return 212;
}

void sub_10045FA34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10045FA64(unint64_t a1, unint64_t a2, uint64_t a3, int *a4, int *a5)
{
  if (!a4) {
    return 3;
  }
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v12 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v12) {
    return 7;
  }
  uint64_t v13 = v12;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  if ((sub_1004AB1F0((uint64_t)off_1009F7EF8) & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A5EC();
    }
    return 212;
  }
  if (!sub_100487DD4(v13, 64)) {
    return 108;
  }
  uint64_t v14 = sub_100035F54();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v14 + 792))(v14, 1)) {
    return 108;
  }
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
  }
  uint64_t v15 = sub_1004543AC((uint64_t)off_1009F7EE8, a1);
  if (!v15)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A388();
    }
    return 7;
  }
  sub_100455F58(v15, v13, a3, a4, a5);
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009AEC98);
  }
  uint64_t v16 = sub_100019C0C((void *)qword_1009F8160, a1);
  uint64_t v17 = qword_100A19E40;
  uint64_t result = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
  if (v16)
  {
    if (!result) {
      return result;
    }
    sub_10003AE4C(v16, (uint64_t)v30);
    int v18 = v31;
    uint64_t v19 = (void **)v30[0];
    sub_100474E18(v13, __p);
    uint64_t v20 = v30;
    if (v18 < 0) {
      uint64_t v20 = v19;
    }
    if (v29 >= 0) {
      uint64_t v21 = __p;
    }
    else {
      uint64_t v21 = (void **)__p[0];
    }
    int v22 = *a4;
    int v23 = *a5;
    *(_DWORD *)std::string buf = 136446978;
    if (v23) {
      char v24 = "YES";
    }
    else {
      char v24 = "NO";
    }
    int v33 = v20;
    __int16 v34 = 2082;
    *(void *)uint64_t v35 = v21;
    *(_WORD *)&void v35[8] = 1024;
    *(_DWORD *)&v35[10] = v22;
    __int16 v36 = 2082;
    id v37 = v24;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" reading in Spatial Audio config for device \"%{public}s\" to %dHead Tracking %{public}s", buf, 0x26u);
    if (v29 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    sub_100474E18(v13, v30);
    if (v31 >= 0) {
      uint64_t v25 = v30;
    }
    else {
      uint64_t v25 = (void **)v30[0];
    }
    int v26 = *a4;
    if (*a5) {
      uint64_t v27 = "YES";
    }
    else {
      uint64_t v27 = "NO";
    }
    *(_DWORD *)std::string buf = 136446722;
    int v33 = v25;
    __int16 v34 = 1024;
    *(_DWORD *)uint64_t v35 = v26;
    *(_WORD *)&v35[4] = 2082;
    *(void *)&v35[6] = v27;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Spatial Audio config for device \"%{public}s\" to %d %{public}s", buf, 0x1Cu);
  }
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  return 0;
}

void sub_10045FE30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10045FE54(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v7 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v7) {
    return 7;
  }
  uint64_t v8 = v7;
  if (!sub_100478B2C(v7, 32) || sub_100475E4C(v8, 0x80000u) != 4) {
    return 108;
  }
  if (sub_1004874AC(v8) != a3) {
    sub_100484DC4(v8, a3);
  }
  return 0;
}

uint64_t sub_10045FF28(unint64_t a1, unint64_t a2, int *a3)
{
  if (!a3) {
    return 3;
  }
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v8 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v8) {
    return 7;
  }
  uint64_t v9 = v8;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  if ((sub_1004AB1F0((uint64_t)off_1009F7EF8) & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A5EC();
    }
    return 212;
  }
  if (!sub_100478B2C(v9, 32) || sub_100475E4C(v9, 0x80000u) != 4) {
    return 108;
  }
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
  }
  if (!sub_1004543AC((uint64_t)off_1009F7EE8, a1))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A388();
    }
    return 7;
  }
  *a3 = sub_1004874AC(v9);
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009AEC98);
  }
  uint64_t v10 = sub_100019C0C((void *)qword_1009F8160, a1);
  uint64_t v11 = qword_100A19E40;
  uint64_t result = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    if (result)
    {
      sub_10003AE4C(v10, (uint64_t)v23);
      int v12 = v26;
      uint64_t v13 = *(unsigned char **)v23;
      sub_100474E18(v9, __p);
      uint64_t v14 = v23;
      if (v12 < 0) {
        uint64_t v14 = v13;
      }
      if (v22 >= 0) {
        uint64_t v15 = __p;
      }
      else {
        uint64_t v15 = (void **)__p[0];
      }
      int v16 = *a3;
      *(_DWORD *)std::string buf = 136446722;
      *(void *)&uint8_t buf[4] = v14;
      if (v16 == 1) {
        uint64_t v17 = "Auto";
      }
      else {
        uint64_t v17 = "Manual";
      }
      __int16 v28 = 2082;
      char v29 = v15;
      __int16 v30 = 2080;
      char v31 = v17;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" reading in smart routing mode for device \"%{public}s\" to %s", buf, 0x20u);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
      if ((v26 & 0x80000000) == 0) {
        return 0;
      }
      int v18 = *(void **)v23;
LABEL_51:
      operator delete(v18);
      return 0;
    }
  }
  else if (result)
  {
    sub_100474E18(v9, buf);
    if (v30 >= 0) {
      uint64_t v19 = buf;
    }
    else {
      uint64_t v19 = *(unsigned char **)buf;
    }
    uint64_t v20 = "Manual";
    if (*a3 == 1) {
      uint64_t v20 = "Auto";
    }
    *(_DWORD *)int v23 = 136446466;
    *(void *)&v23[4] = v19;
    __int16 v24 = 2080;
    uint64_t v25 = v20;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "smart routing mode mode for device \"%{public}s\" to %s", v23, 0x16u);
    if ((SHIBYTE(v30) & 0x80000000) == 0) {
      return 0;
    }
    int v18 = *(void **)buf;
    goto LABEL_51;
  }
  return result;
}

void sub_1004602A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004602CC(unint64_t a1, unint64_t a2, int *a3)
{
  if (!a3) {
    return 3;
  }
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v8 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v8) {
    return 7;
  }
  uint64_t v9 = v8;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  if ((sub_1004AB1F0((uint64_t)off_1009F7EF8) & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A5EC();
    }
    return 212;
  }
  if (!sub_100478B2C(v9, 32) || sub_100475E4C(v9, 0x80000u) != 4) {
    return 108;
  }
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
  }
  if (!sub_1004543AC((uint64_t)off_1009F7EE8, a1))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A388();
    }
    return 7;
  }
  if (sub_100484FCC(v9)) {
    int v10 = 1;
  }
  else {
    int v10 = 2;
  }
  *a3 = v10;
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009AEC98);
  }
  uint64_t v11 = sub_100019C0C((void *)qword_1009F8160, a1);
  int v12 = qword_100A19E40;
  uint64_t result = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
  if (v11)
  {
    if (result)
    {
      sub_10003AE4C(v11, (uint64_t)v24);
      int v13 = v27;
      uint64_t v14 = *(unsigned char **)v24;
      sub_100474E18(v9, __p);
      uint64_t v15 = v24;
      if (v13 < 0) {
        uint64_t v15 = v14;
      }
      if (v23 >= 0) {
        int v16 = __p;
      }
      else {
        int v16 = (void **)__p[0];
      }
      int v17 = *a3;
      *(_DWORD *)std::string buf = 136446722;
      *(void *)&uint8_t buf[4] = v15;
      if (v17 == 1) {
        int v18 = "Supported";
      }
      else {
        int v18 = "NOT Supported";
      }
      __int16 v29 = 2082;
      __int16 v30 = v16;
      __int16 v31 = 2080;
      int v32 = v18;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" reading in smart routing support for device \"%{public}s\" to %s", buf, 0x20u);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
      if ((v27 & 0x80000000) == 0) {
        return 0;
      }
      uint64_t v19 = *(void **)v24;
LABEL_54:
      operator delete(v19);
      return 0;
    }
  }
  else if (result)
  {
    sub_100474E18(v9, buf);
    if (v31 >= 0) {
      uint64_t v20 = buf;
    }
    else {
      uint64_t v20 = *(unsigned char **)buf;
    }
    uint64_t v21 = "NOT Supported";
    if (*a3 == 1) {
      uint64_t v21 = "Supported";
    }
    *(_DWORD *)__int16 v24 = 136446466;
    *(void *)&void v24[4] = v20;
    __int16 v25 = 2080;
    char v26 = v21;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "smart routing support for device \"%{public}s\" to %s", v24, 0x16u);
    if ((SHIBYTE(v31) & 0x80000000) == 0) {
      return 0;
    }
    uint64_t v19 = *(void **)buf;
    goto LABEL_54;
  }
  return result;
}

void sub_100460658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10046067C(unint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
  }
  if (!sub_1004543AC((uint64_t)off_1009F7EE8, a1)) {
    return 7;
  }
  uint64_t result = 3;
  if (a2 - 4294901761u < 2 || !a2) {
    return result;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v9 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v9) {
    return 7;
  }
  uint64_t v10 = v9;
  if (sub_100475E4C(v9, 0x80000u) != 4) {
    return 108;
  }
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009AEC98);
  }
  uint64_t v11 = sub_100019C0C((void *)qword_1009F8160, a1);
  if (v11)
  {
    uint64_t v12 = v11;
    int v13 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
    {
      sub_10003AE4C(v12, (uint64_t)v20);
      int v14 = v21;
      uint64_t v15 = (void **)v20[0];
      sub_100474E18(v10, __p);
      int v16 = v20;
      if (v14 < 0) {
        int v16 = v15;
      }
      if (v19 >= 0) {
        int v17 = __p;
      }
      else {
        int v17 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446466;
      char v23 = v16;
      __int16 v24 = 2082;
      __int16 v25 = v17;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" is asking to set device state on peer source for device \"%{public}s\"", buf, 0x16u);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
      if (v21 < 0) {
        operator delete(v20[0]);
      }
    }
  }
  if (qword_1009F80A0 != -1) {
    dispatch_once(&qword_1009F80A0, &stru_1009AECF8);
  }
  return sub_10028B3D0((uint64_t)off_1009F8098, v10, a3, a4, 0);
}

void sub_1004608E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10046090C(uint64_t a1, unint64_t a2, int *a3)
{
  if (!a3) {
    return 3;
  }
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v7 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v7) {
    return 7;
  }
  uint64_t v8 = v7;
  if (sub_100475E4C(v7, 0x80000u) != 4) {
    return 108;
  }
  if (!sub_100487DD4(v8, 64))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A864(v8);
    }
    return 108;
  }
  uint64_t v9 = sub_100035F54();
  int v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 792))(v9, 1);
  uint64_t result = 0;
  if (v10) {
    int v11 = 1;
  }
  else {
    int v11 = 2;
  }
  *a3 = v11;
  return result;
}

uint64_t sub_100460A44(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  if (!a3) {
    return 3;
  }
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v7 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v7) {
    return 7;
  }
  uint64_t v8 = v7;
  if (sub_100475E4C(v7, 0x80000u) != 4) {
    return 108;
  }
  if (sub_100478B2C(v8, 41))
  {
    uint64_t v9 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v9 + 792))(v9, 11))
    {
      uint64_t result = 0;
      *a3 = 2;
      return result;
    }
  }
  if (!sub_100487D8C(v8)
    || (uint64_t v10 = sub_100035F54(), !(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v10 + 792))(v10, 8)))
  {
    *a3 = 0;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A974(v8);
    }
    return 108;
  }
  *a3 = 1;
  uint64_t result = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_10076A8EC(v8);
    return 0;
  }
  return result;
}

uint64_t sub_100460BF4(uint64_t a1, unint64_t a2, unsigned char *a3)
{
  if (!a3) {
    return 3;
  }
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v7 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v7) {
    return 7;
  }
  uint64_t v8 = v7;
  if (sub_100475E4C(v7, 0x80000u) != 4) {
    return 108;
  }
  int v9 = sub_10048799C(v8);
  uint64_t v10 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
  {
    v11[0] = 67109120;
    v11[1] = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Prox Card Status: Get Call Management: 0x%x", (uint8_t *)v11, 8u);
  }
  if ((v9 & 0xF) == 1)
  {
    uint64_t result = 0;
    *a3 = 1;
    a3[3] = v9 >> 4;
    a3[4] = BYTE1(v9) & 0xF;
    a3[5] = (unsigned __int16)v9 >> 12;
    a3[6] = BYTE2(v9) & 0xF;
  }
  else
  {
    uint64_t result = 0;
    if ((v9 & 0xF) == 0)
    {
      *a3 = 0;
      a3[1] = v9 >> 4;
      a3[2] = BYTE1(v9) & 0xF;
      a3[3] = v9 >> 4;
      a3[4] = BYTE1(v9) & 0xF;
    }
  }
  return result;
}

uint64_t sub_100460D8C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v7 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v7) {
    return 7;
  }
  uint64_t v8 = v7;
  *a3 = sub_100477E48(v7);
  if (sub_100475E4C(v8, 0x80000u) != 4) {
    return 108;
  }
  if (*a3 == 0xFFFFFFFFLL)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A9FC();
    }
    return 105;
  }
  else
  {
    char v9 = sub_100487014(v8);
    uint64_t v10 = qword_100A19E40;
    if ((v9 & 1) == 0 && os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *a3;
      int v14 = 134217984;
      uint64_t v15 = v13;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Prox Card Status: Capabilities not received yet, returning local value: %llx", (uint8_t *)&v14, 0xCu);
      uint64_t v10 = qword_100A19E40;
    }
    BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v11)
    {
      uint64_t v12 = *a3;
      int v14 = 134217984;
      uint64_t v15 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Prox Card Status: Get Features: 0x%llx", (uint8_t *)&v14, 0xCu);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100460F70(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v7 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v7) {
    return 7;
  }
  uint64_t v8 = v7;
  if (sub_100475E4C(v7, 0x80000u) != 4) {
    return 108;
  }
  if (qword_1009F80A0 != -1) {
    dispatch_once(&qword_1009F80A0, &stru_1009AECF8);
  }
  char v9 = off_1009F8098;

  return sub_1002935E4((uint64_t)v9, v8, a3);
}

uint64_t sub_100461060(uint64_t a1, unint64_t a2, int *a3)
{
  *a3 = 0;
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v7 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v7) {
    return 7;
  }
  uint64_t v8 = v7;
  if (sub_100475E4C(v7, 0x80000u) == 4)
  {
    if (sub_100487DD4(v8, 64))
    {
      uint64_t v9 = sub_100035F54();
      int v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 792))(v9, 3);
      uint64_t result = 0;
      *a3 = v10 << 31 >> 31;
      return result;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076AA30(v8);
    }
  }
  return 108;
}

uint64_t sub_100461184(uint64_t a1, unint64_t a2, int *a3)
{
  if (!a3) {
    return 3;
  }
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v7 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v7) {
    return 7;
  }
  uint64_t v8 = v7;
  if (sub_100475E4C(v7, 0x80000u) != 4) {
    return 108;
  }
  if (!sub_100487DD4(v8, 64))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076AAB8(v8);
    }
    return 108;
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009AECD8);
  }
  if (sub_1004DB198((uint64_t)off_1009F8068))
  {
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009AECD8);
    }
    int v9 = sub_1004DB198((uint64_t)off_1009F8068) == 1;
  }
  else
  {
    uint64_t v10 = sub_100035F54();
    int v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 792))(v10, 3);
  }
  int v11 = v9 << 31 >> 31;
  *a3 = v11;
  uint64_t v12 = qword_100A19E40;
  BOOL v13 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v13)
  {
    v14[0] = 67109120;
    v14[1] = v11;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Get Spatial Spatial Profile BTAccessoryManagerGetDeviceSoundProfileAllowed:  %d", (uint8_t *)v14, 8u);
    return 0;
  }
  return result;
}

uint64_t sub_1004613A8(uint64_t a1, unint64_t a2, int a3)
{
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v7 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v7) {
    return 7;
  }
  uint64_t v8 = v7;
  if (sub_100475E4C(v7, 0x80000u) != 4) {
    return 108;
  }
  if (!sub_100487DD4(v8, 64))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076AB40(v8);
    }
    return 108;
  }
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009AECB8);
  }
  (*(void (**)(void))(*(void *)off_1009F80A8 + 352))();
  int v9 = qword_100A19E40;
  BOOL v10 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v10)
  {
    v11[0] = 67109120;
    v11[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Set Spatial Spatial Profile BTAccessoryManagerGetDeviceSoundProfileAllowed:  %d", (uint8_t *)v11, 8u);
    return 0;
  }
  return result;
}

uint64_t sub_100461578(uint64_t a1, unint64_t a2, int *a3)
{
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3;
  }
  unsigned __int8 v14[5] = v3;
  void v14[6] = v4;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v9 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v9) {
    return 7;
  }
  uint64_t v10 = v9;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  if (sub_1004AB1F0((uint64_t)off_1009F7EF8))
  {
    uint64_t v13 = 0;
    v14[0] = 0;
    sub_10047B7A8(v10, (_DWORD *)v14 + 1, v14, (_DWORD *)&v13 + 1, &v13);
    int v11 = 0;
    if ((HIDWORD(v13) - 8194) <= 0x22 && ((1 << (BYTE4(v13) - 2)) & 0x47A877F9BLL) != 0)
    {
      if ((HIDWORD(v13) - 8194) > 0xE) {
        int v11 = 1;
      }
      else {
        int v11 = dword_1007BEB5C[HIDWORD(v13) - 8194];
      }
    }
    int v12 = v11 | (HIDWORD(v13) == 8214);
    if (v12)
    {
      if (sub_100478B2C(v10, 15)) {
        int v12 = -1;
      }
      else {
        int v12 = (int)(sub_100478B2C(v10, 1) << 31) >> 31;
      }
    }
    uint64_t result = 0;
    *a3 = v12;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A5EC();
    }
    return 212;
  }
  return result;
}

uint64_t sub_10046172C(unint64_t a1, unint64_t *a2, unsigned __int16 *a3)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  if (sub_1004AB1F0((uint64_t)off_1009F7EF8))
  {
    uint64_t v6 = sub_100035F54();
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 792))(v6, 2))
    {
      if (qword_1009F8168 != -1) {
        dispatch_once(&qword_1009F8168, &stru_1009AEC98);
      }
      uint64_t result = sub_100019C0C((void *)qword_1009F8160, a1);
      if (result)
      {
        uint64_t v8 = result;
        if (qword_1009F80B0 != -1) {
          dispatch_once(&qword_1009F80B0, &stru_1009AECB8);
        }
        uint64_t v9 = sub_10056752C((uint64_t)off_1009F80A8, (uint64_t)a3);
        if (v9)
        {
          uint64_t v10 = v9;
          if (qword_1009F7F00 != -1) {
            dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
          }
          *a2 = sub_1004A93A0((uint64_t)off_1009F7EF8, a1, v10);
          int v11 = qword_100A19E40;
          uint64_t result = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR);
          if (result)
          {
            sub_10003AE4C(v8, (uint64_t)v19);
            int v12 = v20;
            uint64_t v13 = (void **)v19[0];
            sub_100474E18(v10, __p);
            int v14 = v19;
            if (v12 < 0) {
              int v14 = v13;
            }
            if (v18 >= 0) {
              uint64_t v15 = __p;
            }
            else {
              uint64_t v15 = (void **)__p[0];
            }
            int v16 = *a3;
            *(_DWORD *)std::string buf = 136446722;
            char v22 = v14;
            __int16 v23 = 2082;
            __int16 v24 = v15;
            __int16 v25 = 1024;
            int v26 = v16;
            _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "BTAccessoryManagerGetAdaptiveLatencyJitterBufferLevel Session \"%{public}s\" for device \"%{public}s\" is returning jitterBufferLevel %u", buf, 0x1Cu);
            if (v18 < 0) {
              operator delete(__p[0]);
            }
            if (v20 < 0) {
              operator delete(v19[0]);
            }
            return 0;
          }
        }
        else
        {
          *a2 = 4294901761;
          uint64_t result = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR);
          if (result)
          {
            sub_10076ABC8();
            return 0;
          }
        }
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
        sub_10076ABFC();
      }
      return 2;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A5EC();
    }
    return 212;
  }
  return result;
}

void sub_100461A20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100461A44(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076AC30();
    }
    return 7;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v5 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v5)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076AC64();
    }
    return 7;
  }
  uint64_t v6 = v5;
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009AECB8);
  }
  int v7 = sub_1005673E4((uint64_t)off_1009F80A8, v6);
  *a3 = v7;
  uint64_t v8 = qword_100A19E40;
  BOOL v9 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v9)
  {
    v11[0] = 67109120;
    v11[1] = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "BTAccessoryManagerGetSensorStreamingFrequency - %u", (uint8_t *)v11, 8u);
    return 0;
  }
  return result;
}

uint64_t sub_100461BD4(uint64_t a1, unint64_t a2, void *a3, _WORD *a4)
{
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076AC98();
    }
    return 7;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v7 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v7)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076ACCC();
    }
    return 7;
  }
  int v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  sub_100477D14(v7, &v14);
  uint64_t v8 = v14;
  if (v14 == v15)
  {
    uint64_t v10 = v14;
  }
  else
  {
    BOOL v9 = malloc_type_malloc(v15 - v14, 0x100004077774924uLL);
    *a3 = v9;
    memcpy(v9, v14, v15 - v14);
    uint64_t v8 = v14;
    uint64_t v10 = v15;
  }
  int64_t v12 = v10 - v8;
  *a4 = (_WORD)v10 - (_WORD)v8;
  uint64_t v13 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 134217984;
    int64_t v18 = v12;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "BTAccessoryManagerGetGyroInformation - Retrieved gyro information of size %zu", buf, 0xCu);
    uint64_t v8 = v14;
  }
  if (v8)
  {
    uint64_t v15 = v8;
    operator delete(v8);
  }
  return 0;
}

void sub_100461D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100461DB0(uint64_t a1, unint64_t a2, int *a3)
{
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076AD00();
    }
    return 7;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v5 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v5)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076AD34();
    }
    return 7;
  }
  unint64_t v6 = v5;
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009AECB8);
  }
  int v7 = sub_100570C2C((uint64_t)off_1009F80A8, v6);
  *a3 = v7 << 31 >> 31;
  uint64_t v8 = qword_100A19E40;
  BOOL v9 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v9)
  {
    v11[0] = 67109120;
    v11[1] = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "BTAccessoryManagerGetWirelessSharingSpatial - %d", (uint8_t *)v11, 8u);
    return 0;
  }
  return result;
}

uint64_t sub_100461F44(uint64_t a1, int a2, void *a3, void *a4, unint64_t a5)
{
  uint64_t v8 = objc_opt_new();
  BOOL v9 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEBUG)) {
    sub_10076ADD4(a2, v9);
  }
  int v32 = 0;
  int v33 = 0;
  uint64_t v34 = 0;
  if (qword_1009F80A0 != -1) {
    dispatch_once(&qword_1009F80A0, &stru_1009AECF8);
  }
  sub_10028BF34(a2, (uint64_t)&v32);
  for (int i = v32; i != v33; int i = (long long *)((char *)i + 24))
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v31 = 0;
    if (*((char *)i + 23) < 0)
    {
      sub_10003B098(__p, *(void **)i, *((void *)i + 1));
    }
    else
    {
      long long v11 = *i;
      uint64_t v31 = *((void *)i + 2);
      *(_OWORD *)std::string __p = v11;
    }
    int64_t v12 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEBUG))
    {
      if (v31 >= 0) {
        uint64_t v15 = __p;
      }
      else {
        uint64_t v15 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446210;
      __int16 v36 = v15;
      _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "BTAccessoryManagerGetCaseSerialNumbersForAppleProductId retrieved serial number %{public}s", buf, 0xCu);
    }
    if (v31 >= 0) {
      uint64_t v13 = __p;
    }
    else {
      uint64_t v13 = (void **)__p[0];
    }
    int v14 = +[NSString stringWithUTF8String:v13];
    if ((unint64_t)[v14 length] >= 2) {
      [v8 addObject:v14];
    }

    if (SHIBYTE(v31) < 0) {
      operator delete(__p[0]);
    }
  }
  id v29 = 0;
  uint64_t v16 = +[NSJSONSerialization dataWithJSONObject:v8 options:0 error:&v29];
  id v17 = v29;
  if (v17)
  {
    int64_t v18 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076AD68((uint64_t)v17, v18, v19, v20, v21, v22, v23, v24);
    }
    uint64_t v25 = 1;
  }
  else if ((unint64_t)[v16 length] <= a5)
  {
    id v26 = v16;
    memcpy(a3, [v26 bytes], (size_t)[v26 length]);
    uint64_t v25 = 0;
    *a4 = [v26 length];
  }
  else
  {
    uint64_t v25 = 5;
  }

  __p[0] = &v32;
  sub_100051568((void ***)__p);

  return v25;
}

void sub_100462224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::string __p = &a21;
  sub_100051568((void ***)&__p);

  _Unwind_Resume(a1);
}

uint64_t sub_100462288(uint64_t a1, uint64_t a2, unsigned int a3, void *a4, void *a5, unint64_t a6)
{
  uint64_t v8 = objc_opt_new();
  BOOL v9 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEBUG)) {
    sub_10076AEBC(a3, v9);
  }
  if (a3)
  {
    uint64_t v10 = 0;
    uint64_t v11 = a3;
    do
    {
      id v37 = 0;
      BOOL v38 = 0;
      uint64_t v39 = 0;
      if (qword_1009F80A0 != -1) {
        dispatch_once(&qword_1009F80A0, &stru_1009AECF8);
      }
      sub_10028BF34(*(unsigned __int16 *)(a2 + 4 * v10), (uint64_t)&v37);
      for (int i = v37; i != v38; int i = (long long *)((char *)i + 24))
      {
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v36 = 0;
        if (*((char *)i + 23) < 0)
        {
          sub_10003B098(__p, *(void **)i, *((void *)i + 1));
        }
        else
        {
          long long v13 = *i;
          uint64_t v36 = *((void *)i + 2);
          *(_OWORD *)std::string __p = v13;
        }
        int v14 = qword_100A19E40;
        if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEBUG))
        {
          if (v36 >= 0) {
            id v17 = __p;
          }
          else {
            id v17 = (void **)__p[0];
          }
          int v18 = *(_DWORD *)(a2 + 4 * v10);
          *(_DWORD *)std::string buf = 136446467;
          long long v41 = v17;
          __int16 v42 = 1025;
          int v43 = v18;
          _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "BTAccessoryManagerGetCaseSerialNumbersForAppleProductIds retrieved serial number %{public}s for productID %{private}u", buf, 0x12u);
        }
        if (v36 >= 0) {
          uint64_t v15 = __p;
        }
        else {
          uint64_t v15 = (void **)__p[0];
        }
        uint64_t v16 = +[NSString stringWithUTF8String:v15];
        if ((unint64_t)[v16 length] >= 2) {
          [v8 addObject:v16];
        }

        if (SHIBYTE(v36) < 0) {
          operator delete(__p[0]);
        }
      }
      __p[0] = &v37;
      sub_100051568((void ***)__p);
      ++v10;
    }
    while (v10 != v11);
  }
  id v34 = 0;
  uint64_t v19 = +[NSJSONSerialization dataWithJSONObject:v8 options:0 error:&v34];
  id v20 = v34;
  if (v20)
  {
    uint64_t v21 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076AE50((uint64_t)v20, v21, v22, v23, v24, v25, v26, v27);
    }
    uint64_t v28 = 1;
  }
  else if ((unint64_t)[v19 length] <= a6)
  {
    id v29 = v19;
    memcpy(a4, [v29 bytes], (size_t)[v29 length]);
    uint64_t v28 = 0;
    *a5 = [v29 length];
  }
  else
  {
    uint64_t v28 = 5;
  }

  return v28;
}

void sub_100462590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1004625F4(unint64_t a1, unint64_t a2, int *a3)
{
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076AF38();
    }
    return 7;
  }
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009AEC38);
  }
  uint64_t v6 = sub_1004543AC((uint64_t)off_1009F7EE8, a1);
  if (!v6)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076A388();
    }
    return 7;
  }
  uint64_t v7 = v6;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v8 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v8)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076AF6C();
    }
    return 7;
  }
  uint64_t v9 = sub_100456634(v7, v8, a3);
  uint64_t v10 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
  {
    if (qword_1009F80A0 != -1) {
      dispatch_once(&qword_1009F80A0, &stru_1009AECF8);
    }
    uint64_t v11 = sub_100290388((uint64_t)off_1009F8098, *(unsigned __int8 *)a3);
    int v13 = 136315138;
    int v14 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "BTAccessoryManagerGetPrimaryBudSide - Primary Bud Side: %s", (uint8_t *)&v13, 0xCu);
  }
  return v9;
}

uint64_t sub_1004627F8(uint64_t a1, unint64_t a2, uint64_t a3, int *a4)
{
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076AFA0();
    }
    return 7;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  unint64_t v7 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v7)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076AFD4();
    }
    return 7;
  }
  uint64_t v8 = v7;
  switch((int)a3)
  {
    case 0:
      int v9 = sub_1004879E4(v7);
      goto LABEL_30;
    case 1:
      int v11 = sub_100487DD4(v7, 144);
      if (v11)
      {
        uint64_t v12 = sub_10003FB34();
        int v11 = sub_100350CA0(v12, 0);
      }
      *a4 = v11;
      uint64_t v13 = qword_100A19E40;
      if (!os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_43;
      }
      int v14 = sub_100487DD4(v8, 144);
      uint64_t v15 = sub_10003FB34();
      int v45 = 67109376;
      BOOL v46 = v14;
      __int16 v47 = 1024;
      int v48 = sub_100350CA0(v15, 0);
      uint64_t v16 = "Adaptive Volume: BT_ACCESSORY_HEADPHONE_FEATURE_ADAPTIVE_VOLUME_SUPPORT: accessorySupport %d sourceSupport %d";
      goto LABEL_25;
    case 2:
      int v17 = sub_100487DD4(v7, 176);
      if (v17)
      {
        uint64_t v18 = sub_10003FB34();
        int v17 = sub_100350CA0(v18, 3u);
      }
      *a4 = v17;
      uint64_t v13 = qword_100A19E40;
      if (!os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_43;
      }
      int v19 = sub_100487DD4(v8, 176);
      uint64_t v20 = sub_10003FB34();
      int v45 = 67109376;
      BOOL v46 = v19;
      __int16 v47 = 1024;
      int v48 = sub_100350CA0(v20, 3u);
      uint64_t v16 = "AutoANC: BT_ACCESSORY_HEADPHONE_FEATURE_AUTO_ANC_SUPPORT: accessorySupport %d sourceSupport %d";
      goto LABEL_25;
    case 3:
      int v9 = sub_100487A74(v7);
      goto LABEL_30;
    case 4:
      int v21 = sub_100487DD4(v7, 160);
      if (v21)
      {
        uint64_t v22 = sub_10003FB34();
        int v21 = sub_100350CA0(v22, 2u);
      }
      *a4 = v21;
      uint64_t v13 = qword_100A19E40;
      if (!os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_43;
      }
      int v23 = sub_100487DD4(v8, 160);
      uint64_t v24 = sub_10003FB34();
      int v45 = 67109376;
      BOOL v46 = v23;
      __int16 v47 = 1024;
      int v48 = sub_100350CA0(v24, 2u);
      uint64_t v16 = "Conversation Detect: BT_ACCESSORY_HEADPHONE_FEATURE_CONVERSATION_DETECT_SUPPORT: accessorySupport %d sourceSupport %d";
LABEL_25:
      uint64_t v25 = v13;
      goto LABEL_41;
    case 5:
      *a4 = *(unsigned __int8 *)(v7 + 989);
      goto LABEL_43;
    case 7:
      int v9 = sub_100487ABC(v7);
LABEL_30:
      *a4 = v9;
      goto LABEL_43;
    case 8:
      int v33 = sub_100487EFC(v7, 6u);
      if (v33 == 3)
      {
        uint64_t v34 = sub_10003FB34();
        int v35 = sub_100350CA0(v34, 4u);
      }
      else
      {
        int v35 = 0;
      }
      *a4 = v35;
      uint64_t v40 = qword_100A19E40;
      if (!os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_43;
      }
      uint64_t v41 = sub_10003FB34();
      int v45 = 67109376;
      BOOL v46 = v33 == 3;
      __int16 v47 = 1024;
      int v48 = sub_100350CA0(v41, 4u);
      uint64_t v16 = "SSL: BT_ACCESSORY_HEADPHONE_FEATURE_SSL_SUPPORT: accessorySupport %d sourceSupport %d";
      uint64_t v25 = v40;
LABEL_41:
      uint32_t v39 = 14;
      goto LABEL_42;
    case 9:
      int v36 = sub_10048DFF4(v7);
      *a4 = v36;
      uint64_t v37 = qword_100A19E40;
      if (!os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_43;
      }
      int v45 = 67109120;
      BOOL v46 = v36;
      uint64_t v16 = "Hearing Aid: BT_ACCESSORY_HEADPHONE_FEATURE_HEARING_AID_ENROLLED Get: %d";
      goto LABEL_37;
    case 10:
      int v38 = sub_10048E0DC(v7);
      *a4 = v38;
      uint64_t v37 = qword_100A19E40;
      if (!os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_43;
      }
      int v45 = 67109120;
      BOOL v46 = v38;
      uint64_t v16 = "Hearing Aid: BT_ACCESSORY_HEADPHONE_FEATURE_HEARING_AID_ENABLED Get: %d";
LABEL_37:
      uint64_t v25 = v37;
      uint32_t v39 = 8;
LABEL_42:
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, v16, (uint8_t *)&v45, v39);
LABEL_43:
      __int16 v42 = qword_100A19E40;
      BOOL v43 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (v43)
      {
        int v44 = *a4;
        int v45 = 67109376;
        BOOL v46 = a3;
        __int16 v47 = 1024;
        int v48 = v44;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "BTAccessoryManagerGetHeadphoneFeatureValue - Type: %d, Value: %d", (uint8_t *)&v45, 0xEu);
        uint64_t result = 0;
      }
      break;
    default:
      uint64_t v26 = qword_100A19E40;
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
        sub_10076B008(a3, v26, v27, v28, v29, v30, v31, v32);
      }
      goto LABEL_43;
  }
  return result;
}

uint64_t sub_100462CDC(unint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076B074();
    }
    return 7;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEC58);
  }
  uint64_t v8 = (unsigned __int8 *)sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v8)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076B0A8();
    }
    return 7;
  }
  uint64_t v9 = (uint64_t)v8;
  if (a3 == 10)
  {
    int v11 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = 67109120;
      int v24 = a4;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Hearing Aid: BT_ACCESSORY_HEADPHONE_FEATURE_HEARING_AID_ENROLLED Set: %d", (uint8_t *)&v23, 8u);
    }
    uint64_t v12 = sub_10048DFF4(v9) | (a4 << 8);
  }
  else
  {
    if (a3 != 9)
    {
      if (a3 == 5)
      {
        sub_100486B00(v8, a4 != 0);
      }
      else
      {
        int v14 = qword_100A19E40;
        if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
          sub_10076B0DC(a3, v14, v15, v16, v17, v18, v19, v20);
        }
      }
      goto LABEL_23;
    }
    uint64_t v13 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = 67109120;
      int v24 = a4;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Hearing Aid: BT_ACCESSORY_HEADPHONE_FEATURE_HEARING_AID_ENROLLED Set: %d", (uint8_t *)&v23, 8u);
    }
    uint64_t v12 = a4 | (sub_10048E0DC(v9) << 8);
  }
  sub_10045CB34(a1, a2, 44, v12);
LABEL_23:
  int v21 = qword_100A19E40;
  BOOL v22 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v22)
  {
    int v23 = 67109120;
    int v24 = a4;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "BTAccessoryManagerSetHeadphoneFeatureValue - %d", (uint8_t *)&v23, 8u);
    return 0;
  }
  return result;
}

void sub_100462F54(id a1)
{
}

void sub_100462F98()
{
}

void sub_100462FBC(id a1)
{
}

void sub_100463000()
{
}

void sub_100463024(id a1)
{
}

void sub_100463068()
{
}

void sub_10046308C(id a1)
{
}

void sub_1004630D0()
{
}

void sub_1004630F4(id a1)
{
}

void sub_100463138()
{
}

void sub_10046315C(id a1)
{
}

void sub_1004631A0()
{
}

void sub_1004631C4(id a1)
{
}

void sub_100463208()
{
}

void sub_10046322C(id a1)
{
}

void sub_100463270()
{
}

void sub_100463294(uint64_t a1@<X1>, uint64_t a2@<X8>, float a3@<S0>)
{
  *(float *)a1 = a3;
  *(void *)(a1 + 4) = 1752392040;
  *(_WORD *)(a1 + 12) = 2081;
  *(void *)(a1 + 14) = a2;
}

void sub_1004632B4(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

void sub_1004632D0(uint64_t a1)
{
  uint64_t v1 = sub_100283C88(a1, 20);
  sub_10033F690(v1 + 256, 0, 1, 1007);
}

void sub_10046334C(_Unwind_Exception *a1)
{
  sub_100283DC8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100463364(uint64_t a1)
{
  sub_10033F7C4(a1 + 256);

  return sub_100283DC8(a1);
}

uint64_t sub_1004633A0(uint64_t a1)
{
  uint64_t v1 = a1 - 256;
  sub_10033F7C4(a1);

  return sub_100283DC8(v1);
}

void sub_1004633D8(uint64_t a1)
{
  sub_10033F7C4(a1 + 256);
  sub_100283DC8(a1);

  operator delete();
}

void sub_100463428(uint64_t a1)
{
}

uint64_t sub_100463430(uint64_t a1)
{
  uint64_t v2 = sub_100035F54();
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 344))(v2);
  if (result)
  {
    char v8 = 0;
    sub_10001B8E0(&v8);
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    if (sub_100245A8C((uint64_t)sub_1004635B4, (uint64_t)off_1009AEDF0, 0x3EFu, 0x3B01u, (unsigned char *)(a1 + 500), (uint64_t)&unk_1007BEB98))
    {
      if (os_log_type_enabled((os_log_t)qword_100A1A028, OS_LOG_TYPE_ERROR)) {
        sub_10076B1B0();
      }
    }
    else
    {
      uint64_t v4 = &unk_1009AEE18;
      LOWORD(v5) = 3;
      uint64_t v6 = &unk_1009AEDD8;
      LOWORD(v7) = 1;
      byte_100A131C8 = 1;
      word_100A131CA = 1;
      dword_100A131D0 = *(unsigned __int8 *)(a1 + 500);
      if (!sub_10024E258((uint64_t)&v4, (int *)(a1 + 496)))
      {
        sub_10001B8AC(&v8);
        return 0;
      }
      if (os_log_type_enabled((os_log_t)qword_100A1A028, OS_LOG_TYPE_ERROR)) {
        sub_10076B148();
      }
    }
    sub_10001B8AC(&v8);
    return 1;
  }
  return result;
}

void sub_1004635A0(_Unwind_Exception *a1)
{
  sub_10001B8AC((unsigned char *)(v1 - 17));
  _Unwind_Resume(a1);
}

void sub_1004635B4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (qword_1009FB7A8 != -1) {
    dispatch_once(&qword_1009FB7A8, &stru_1009AEE88);
  }
  uint64_t v6 = off_1009FB7A0;

  sub_100463BEC(v6, a1, a4);
}

uint64_t sub_100463620(uint64_t a1)
{
  uint64_t v2 = sub_100035F54();
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 344))(v2);
  if (result)
  {
    char v12 = 0;
    sub_10001B8E0(&v12);
    sub_10024E448(*(_DWORD *)(a1 + 496));
    if (sub_100245D68(*(unsigned __int8 *)(a1 + 500)) == 101)
    {
      uint64_t v4 = qword_100A1A028;
      if (os_log_type_enabled((os_log_t)qword_100A1A028, OS_LOG_TYPE_ERROR)) {
        sub_10076B218(v4, v5, v6, v7, v8, v9, v10, v11);
      }
      sub_10001B8AC(&v12);
      return 1;
    }
    else
    {
      sub_10001B8AC(&v12);
      return 0;
    }
  }
  return result;
}

void sub_1004636E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_1004636FC(uint64_t a1)
{
  return 0;
}

uint64_t sub_10046371C(uint64_t a1, unint64_t a2)
{
  long long v20 = xmmword_1007BEC10;
  if (a2)
  {
    if (sub_100478F30(a2, &v20, 4u))
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      if (!sub_10047AE08(a2, (uint64_t)&v20, 4u, &v17)) {
        goto LABEL_49;
      }
      uint64_t v5 = v17;
      uint64_t v4 = v18;
      if (v17 == v18) {
        goto LABEL_49;
      }
      uint64_t v6 = v17;
      while (1)
      {
        if (*(unsigned char *)v6 == 6 && *((_WORD *)v6 + 1) == 2)
        {
          uint64_t v8 = v6[1];
          BOOL v9 = *(unsigned char *)v8 == 3 && *(_DWORD *)(v8 + 8) == 3;
          if (v9 && *(unsigned char *)(v8 + 16) == 1) {
            break;
          }
        }
        v6 += 2;
        if (v6 == (void *)v18)
        {
          int v10 = -1;
          goto LABEL_27;
        }
      }
      int v10 = *(_DWORD *)(v8 + 24);
LABEL_27:
      while (v5 != v4)
      {
        *(_OWORD *)std::string __p = *v5;
        sub_1002D5394(__p);
        ++v5;
        uint64_t v4 = v18;
      }
      if (v10 == -1)
      {
LABEL_49:
        if (os_log_type_enabled((os_log_t)qword_100A1A028, OS_LOG_TYPE_ERROR)) {
          sub_10076B2C0();
        }
        uint64_t v11 = 305;
      }
      else
      {
        char v12 = qword_100A1A028;
        if (os_log_type_enabled((os_log_t)qword_100A1A028, OS_LOG_TYPE_INFO))
        {
          sub_100474E18(a2, __p);
          uint64_t v13 = v16 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)std::string buf = 136446466;
          BOOL v22 = v13;
          __int16 v23 = 1024;
          int v24 = v10;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Initiating outgoing Braille connection request to device %{public}s on rfcomm channel %d", buf, 0x12u);
          if (v16 < 0) {
            operator delete(__p[0]);
          }
        }
        buf[0] = 0;
        sub_10001B8E0(buf);
        LOWORD(__p[0]) = 0;
        if (sub_1002460C8((uint64_t)sub_100463A54, off_1009AEE60, a2 + 128, v10, 0x3EFu, 0x3B01u, __p, (uint64_t)&unk_1007BEB98))
        {
          if (os_log_type_enabled((os_log_t)qword_100A1A028, OS_LOG_TYPE_ERROR)) {
            sub_10076B2F4();
          }
          uint64_t v11 = 305;
        }
        else
        {
          sub_1004BE028(a1, a2, (__int16)__p[0]);
          uint64_t v11 = 0;
        }
        sub_10001B8AC(buf);
      }
      if (v17)
      {
        uint64_t v18 = v17;
        operator delete(v17);
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A1A028, OS_LOG_TYPE_ERROR)) {
        sub_10076B35C(a2);
      }
      return 305;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A028, OS_LOG_TYPE_ERROR)) {
      sub_10076B28C();
    }
    return 1;
  }
  return v11;
}

void sub_100463A14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100463A54(unsigned int a1, uint64_t a2, uint64_t a3)
{
  __int16 v8 = 0;
  int v7 = 0;
  if (sub_10024687C(a1, (uint64_t)&v7))
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A028, OS_LOG_TYPE_ERROR)) {
      sub_10076B3F8();
    }
  }
  else
  {
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AEEF8);
    }
    int v5 = v7;
    __int16 v6 = v8;
    unint64_t v4 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v5, 1);
    if (qword_1009FB7A8 != -1) {
      dispatch_once(&qword_1009FB7A8, &stru_1009AEE88);
    }
    sub_100463E14((uint64_t)off_1009FB7A0, v4, 0, a3);
  }
}

uint64_t sub_100463B50(void *a1, unint64_t a2)
{
  unsigned int v2 = sub_1004BE120(a1, a2);
  char v5 = 0;
  sub_10001B8E0(&v5);
  uint64_t v3 = sub_100246730(v2, 1818);
  if (v3)
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A028, OS_LOG_TYPE_ERROR)) {
      sub_10076B460();
    }
    uint64_t v3 = 1;
  }
  sub_10001B8AC(&v5);
  return v3;
}

void sub_100463BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_100463BEC(void *a1, uint64_t a2, unsigned int a3)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AEEF8);
  }
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  uint64_t v6 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)__p, 1);
  int v7 = qword_100A1A028;
  if (os_log_type_enabled((os_log_t)qword_100A1A028, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(v6, __p);
    __int16 v8 = v16 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446210;
    uint64_t v18 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Received incoming connection attempt from device %{public}s", buf, 0xCu);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
  }
  int v9 = sub_1004BDDAC((uint64_t)a1, v6);
  if (v9)
  {
    int v10 = sub_1002463C0((uint64_t)sub_100463A54, a3, v9);
    char v11 = v9 ^ 1;
    if (v10) {
      char v11 = 1;
    }
    if ((v11 & 1) == 0)
    {
      sub_1004BE028((uint64_t)a1, v6, a3);
      sub_1004BD554(a1, v6);
    }
  }
  else
  {
    char v12 = qword_100A1A028;
    if (os_log_type_enabled((os_log_t)qword_100A1A028, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Denying connection attempt", (uint8_t *)__p, 2u);
    }
    int v10 = sub_1002463C0((uint64_t)sub_100463A54, a3, v9);
  }
  int v13 = v10;
  if (v10)
  {
    int v14 = qword_100A1A028;
    if (os_log_type_enabled((os_log_t)qword_100A1A028, OS_LOG_TYPE_ERROR)) {
      sub_10076B4C8(v9, v13, v14);
    }
  }
}

void sub_100463E14(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009AEF18);
    }
    int v7 = sub_1004E2340((uint64_t)off_1009F8068, a4, 20000);
    uint64_t v8 = a1;
    uint64_t v9 = a2;
LABEL_7:
    sub_1004BD6C8(v8, v9, v7);
  }
  if (sub_10033F944(a1 + 256, a2))
  {
    uint64_t v8 = a1;
    uint64_t v9 = a2;
    int v7 = 0;
    goto LABEL_7;
  }
  if (os_log_type_enabled((os_log_t)qword_100A1A028, OS_LOG_TYPE_ERROR)) {
    sub_10076B568(a2);
  }
}

void sub_100463EFC(void *a1, int a2)
{
  uint64_t v3 = sub_1004BE238(a1, a2);
  sub_1004BE538((uint64_t)a1, v3, 0);

  sub_100340190((uint64_t)(a1 + 32), v3);
}

void sub_100463F5C(void *a1, int a2, uint64_t a3, int a4)
{
  unint64_t v7 = sub_1004BE238(a1, a2);
  if (v7)
  {
    sub_10034051C((uint64_t)(a1 + 32), v7, a3, a4, 0);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A1A028, OS_LOG_TYPE_ERROR))
  {
    sub_10076B600();
  }
}

void sub_100463FF0(void *a1, int a2)
{
  unint64_t v3 = sub_1004BE238(a1, a2);
  if (v3)
  {
    sub_100340738((uint64_t)(a1 + 32), v3);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A1A028, OS_LOG_TYPE_ERROR))
  {
    sub_10076B634();
  }
}

BOOL sub_100464064(void *a1, unint64_t a2, char *a3, unsigned __int16 a4)
{
  unsigned int v6 = sub_1004BE120(a1, a2);
  char v9 = 0;
  sub_10001B8E0(&v9);
  int v7 = sub_1002460BC((uint64_t)sub_100464130, v6, a3, a4);
  sub_10001B910(&v9);
  if (v7 && os_log_type_enabled((os_log_t)qword_100A1A028, OS_LOG_TYPE_ERROR)) {
    sub_10076B668();
  }
  sub_10001B8AC(&v9);
  return v7 == 0;
}

void sub_10046411C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_100464130(int a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 && os_log_type_enabled((os_log_t)qword_100A1A028, OS_LOG_TYPE_ERROR)) {
    sub_10076B6D0();
  }
  if (qword_1009FB7A8 != -1) {
    dispatch_once(&qword_1009FB7A8, &stru_1009AEE88);
  }
  sub_100463FF0(off_1009FB7A0, a1);
}

BOOL sub_1004641C4(uint64_t a1, unint64_t a2, char *a3, unsigned __int16 a4)
{
  return sub_100464064((void *)(a1 - 256), a2, a3, a4);
}

uint64_t sub_1004641CC()
{
  return 2;
}

void sub_1004641D4(int a1, int a2)
{
  unint64_t v4 = qword_100A1A028;
  if (os_log_type_enabled((os_log_t)qword_100A1A028, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "BrailleProfile RFCOMM Release Reason: %{bluetooth:OI_STATUS}u", (uint8_t *)v5, 8u);
  }
  if (qword_1009FB7A8 != -1) {
    dispatch_once(&qword_1009FB7A8, &stru_1009AEE88);
  }
  sub_100463EFC(off_1009FB7A0, a1);
}

void sub_1004642C0(int a1, uint64_t a2, int a3)
{
  if (qword_1009FB7A8 != -1) {
    dispatch_once(&qword_1009FB7A8, &stru_1009AEE88);
  }
  unsigned int v6 = off_1009FB7A0;

  sub_100463F5C(v6, a1, a2, a3);
}

void sub_10046433C(id a1)
{
}

void sub_100464380()
{
}

void sub_1004643A4(id a1)
{
}

void sub_1004643E8()
{
}

void sub_10046440C(id a1)
{
}

void sub_100464450()
{
}

uint64_t sub_100464474(uint64_t a1)
{
  *(void *)sub_1004C9B7C(a1, "BrailleService", 0x2000) = &off_1009AEF48;
  if (qword_1009FB7A8 != -1) {
    dispatch_once(&qword_1009FB7A8, &stru_1009AF038);
  }
  sub_1004C9E90(a1, (uint64_t)off_1009FB7A0);
  return a1;
}

void sub_1004644FC(_Unwind_Exception *a1)
{
  sub_1004C9C80(v1);
  _Unwind_Resume(a1);
}

void sub_100464518(uint64_t a1)
{
  sub_1004C9C80(a1);

  operator delete();
}

uint64_t sub_100464558()
{
  if (qword_1009FB7A8 != -1) {
    dispatch_once(&qword_1009FB7A8, &stru_1009AF038);
  }
  uint64_t v0 = *(uint64_t (**)(void))(*((void *)off_1009FB7A0 + 32) + 16);

  return v0();
}

uint64_t sub_1004645E0(uint64_t a1, uint64_t a2)
{
  long long v8 = xmmword_1007BEC10;
  if (sub_10047B300(a2))
  {
    if (sub_100478F30(a2, &v8, 4u)) {
      int v4 = 4;
    }
    else {
      int v4 = 1;
    }
  }
  else
  {
    int v4 = 1;
  }
  unsigned int v5 = *(_DWORD *)(a1 + 32);
  uint64_t v9 = 0;
  sub_100026C30((uint64_t)&v9);
  *(void *)&long long v7 = (int)v9;
  *((void *)&v7 + 1) = SWORD2(v9);
  return sub_100477F4C(a2, v5, v4, &v7, 0);
}

void sub_100464688(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  *a3 = 0;
}

void sub_100464690(id a1)
{
}

void sub_1004646D4()
{
}

uint64_t sub_1004646F8(unint64_t a1)
{
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009AF058);
  }
  if (!sub_100019C0C((void *)qword_1009F8160, a1)) {
    return 7;
  }
  unsigned int v2 = (void (***)(void))sub_100017768();
  (**v2)(v2);
  return 0;
}

uint64_t sub_100464788(unint64_t a1)
{
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009AF058);
  }
  if (!sub_100019C0C((void *)qword_1009F8160, a1)) {
    return 7;
  }
  uint64_t v2 = sub_100017768();
  sub_1005C8DB4(v2, 0xE74u, 1);
  return 0;
}

void sub_100464800(id a1)
{
}

void sub_100464844()
{
}

void sub_100464868(uint64_t a1)
{
  uint64_t v2 = sub_100019878();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_100465910;
  v3[3] = &unk_100997528;
  void v3[4] = a1;
  sub_100013018(v2, v3);
}

void sub_1004648E4(uint64_t a1, int a2)
{
  uint64_t v4 = sub_100019878();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_100465974;
  v5[3] = &unk_100997570;
  void v5[4] = a1;
  int v6 = a2;
  sub_100013018(v4, v5);
}

void sub_100464968(uint64_t a1, int a2)
{
  uint64_t v4 = sub_100019878();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1004659DC;
  v5[3] = &unk_100997570;
  void v5[4] = a1;
  int v6 = a2;
  sub_100013018(v4, v5);
}

void *sub_1004649EC(uint64_t a1)
{
  uint64_t result = (void *)sub_100283C88(a1, 25);
  *uint64_t result = &off_1009AF0A0;
  result[32] = &off_1009AF110;
  return result;
}

uint64_t sub_100464A44()
{
  return 0;
}

unsigned char *sub_100464A4C(void *a1, unint64_t a2)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF128);
  }
  uint64_t v4 = sub_100030F10((uint64_t)off_1009F7EF8, a2, 1);
  if (!sub_10047B300(v4))
  {
    int v6 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(v4, __p);
      long long v7 = v21 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136446210;
      __int16 v23 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delaying incoming ATT connection attempt for device %{public}s as SDP is missing", buf, 0xCu);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }
    if (qword_1009FB698 != -1) {
      dispatch_once(&qword_1009FB698, &stru_1009AF148);
    }
    sub_1004C8250(qword_1009FB690, v4);
  }
  if (sub_1004BDDAC((uint64_t)a1, v4)) {
    int v5 = sub_1004784AC(v4);
  }
  else {
    int v5 = 0;
  }
  long long v8 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = v5 ? "Accepting" : "Rejecting";
    sub_100474E18(v4, __p);
    int v10 = v21 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446466;
    __int16 v23 = v9;
    __int16 v24 = 2082;
    uint64_t v25 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "ATT %{public}s incoming connection attempt from device %{public}s", buf, 0x16u);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
  }
  LOBYTE(__p[0]) = 0;
  sub_10001B8E0(__p);
  uint64_t v11 = sub_10010D758(a2, v5);
  sub_10001B910(__p);
  if (v11)
  {
    char v12 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
      sub_10076B738(v11, v12, v13, v14, v15, v16, v17, v18);
    }
  }
  else if (v5)
  {
    sub_1004BD554(a1, v4);
  }
  return sub_10001B8AC(__p);
}

void sub_100464D00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10001B8AC(va);
  _Unwind_Resume(a1);
}

unsigned char *sub_100464D1C(void *a1, unsigned __int8 *a2)
{
  if (sub_1004BDDAC((uint64_t)a1, (uint64_t)a2)) {
    int v4 = sub_1004784AC((uint64_t)a2);
  }
  else {
    int v4 = 0;
  }
  int v5 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = v4 ? "Accepting" : "Rejecting";
    sub_100474E18((uint64_t)a2, __p);
    long long v7 = v18 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446466;
    long long v20 = v6;
    __int16 v21 = 2082;
    BOOL v22 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "QueryComplete, %{public}s ATT incoming connection attempt from  device %{public}s", buf, 0x16u);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
  }
  LOBYTE(__p[0]) = 0;
  sub_10001B8E0(__p);
  uint64_t v8 = sub_10010D758(((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133], v4);
  sub_10001B910(__p);
  if (v8)
  {
    uint64_t v9 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
      sub_10076B738(v8, v9, v10, v11, v12, v13, v14, v15);
    }
  }
  else if (v4)
  {
    sub_1004BD554(a1, (uint64_t)a2);
  }
  return sub_10001B8AC(__p);
}

void sub_100464EE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

unsigned char *sub_100464F00(uint64_t a1, unsigned __int8 *a2)
{
  return sub_100464D1C((void *)(a1 - 256), a2);
}

void sub_100464F08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF128);
  }
  uint64_t v6 = sub_100030F10((uint64_t)off_1009F7EF8, a2, 0);
  long long v7 = qword_100A19E88;
  if (v6)
  {
    uint64_t v8 = v6;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT)
      && ((sub_100474E18(v8, __p), v21 >= 0) ? (uint64_t v9 = __p) : (uint64_t v9 = (void **)__p[0]),
          *(_DWORD *)std::string buf = 136446466,
          __int16 v23 = v9,
          __int16 v24 = 1024,
          int v25 = a3,
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Att connection to device confirmed %{public}s with result %{bluetooth:OI_STATUS}u", buf, 0x12u), v21 < 0))
    {
      operator delete(__p[0]);
      if (a3) {
        goto LABEL_10;
      }
    }
    else if (a3)
    {
LABEL_10:
      if (qword_1009F8070 != -1) {
        dispatch_once(&qword_1009F8070, &stru_1009AF168);
      }
      int v10 = sub_1004E2340((uint64_t)off_1009F8068, a3, 20000);
      uint64_t v11 = a1;
      uint64_t v12 = v8;
LABEL_17:
      sub_1004BD6C8(v11, v12, v10);
    }
    uint64_t v11 = a1;
    uint64_t v12 = v8;
    int v10 = 0;
    goto LABEL_17;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
    sub_10076B7A4(v7, v13, v14, v15, v16, v17, v18, v19);
  }
}

void sub_1004650C4(uint64_t a1, uint64_t a2, int a3)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF128);
  }
  uint64_t v6 = sub_100030F10((uint64_t)off_1009F7EF8, a2, 1);
  long long v7 = qword_100A19E88;
  if (v6)
  {
    uint64_t v8 = v6;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(v8, __p);
      if (v18 >= 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446466;
      long long v20 = v9;
      __int16 v21 = 1024;
      int v22 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Att disconnection to devices %{public}s with reason %{bluetooth:OI_STATUS}u", buf, 0x12u);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
    }
    sub_1004BE538(a1, v8, 0);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
  {
    sub_10076B7A4(v7, v10, v11, v12, v13, v14, v15, v16);
  }
}

void sub_100465234(void *a1, uint64_t a2)
{
  int v4 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a2, __p);
    if (v7 >= 0) {
      int v5 = __p;
    }
    else {
      int v5 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136446210;
    uint64_t v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Fast Connect GATT Report Connection attempt for %{public}s", buf, 0xCu);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_1004BD554(a1, a2);
}

void sub_100465330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 67109120;
    v8[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Fast Connect GATT Setup Complete result %d", (uint8_t *)v8, 8u);
  }
  if (a3)
  {
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009AF168);
    }
    int v7 = sub_1004E2340((uint64_t)off_1009F8068, a3, 20000);
  }
  else
  {
    int v7 = 0;
  }
  sub_1004BD6C8(a1, a2, v7);
}

uint64_t sub_10046543C()
{
  uint64_t v0 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "Register GATT Profile", buf, 2u);
  }
  char v2 = 0;
  sub_10001B8E0(&v2);
  sub_10010E354((__n128 *)off_1009AF078);
  sub_10001B8AC(&v2);
  return 0;
}

void sub_1004654C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_1004654DC()
{
  uint64_t v0 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "Deregister GATT profile", buf, 2u);
  }
  char v2 = 0;
  sub_10001B8E0(&v2);
  sub_10010E3B4();
  sub_10001B8AC(&v2);
  return 0;
}

void sub_100465560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_100465574(uint64_t a1, unsigned __int8 *a2)
{
  int v4 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    sub_100475F84((uint64_t)a2, (uint64_t)__p);
    int v5 = v11 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "GATT disconnecting device \"%s\"", buf, 0xCu);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
  char v9 = 0;
  sub_10001B8E0(&v9);
  uint64_t v6 = sub_10010E0B8(((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133]);
  sub_10001B910(&v9);
  if (v6)
  {
    int v7 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
    {
      sub_100474E18((uint64_t)a2, __p);
      sub_10076B7DC((char *)__p, buf, v6, v7);
    }
    uint64_t v6 = 1;
    sub_1004BE538(a1, (uint64_t)a2, 1);
  }
  sub_10001B8AC(&v9);
  return v6;
}

void sub_100465704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_100465724(uint64_t a1, unsigned __int8 *a2)
{
  *(unsigned char *)(a1 + 264) = 1;
  if (!sub_1004784AC((uint64_t)a2)) {
    goto LABEL_5;
  }
  if (qword_1009FB240 != -1) {
    dispatch_once(&qword_1009FB240, &stru_1009AF188);
  }
  if (!sub_1004C0770(qword_1009FB238, a2))
  {
    uint64_t v12 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
    {
      sub_100475F84((uint64_t)a2, (uint64_t)__p);
      uint64_t v13 = v23 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136315138;
      int v25 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Making classic GATT outgoing connection to device \"%s\"", buf, 0xCu);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
    }
    LOBYTE(__p[0]) = 0;
    sub_10001B8E0(__p);
    uint64_t v11 = sub_10010DEA4(((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133]);
    if (v11)
    {
      uint64_t v14 = qword_100A19E88;
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
        sub_10076B898(v11, v14, v15, v16, v17, v18, v19, v20);
      }
      uint64_t v11 = 1;
    }
    sub_10001B8AC(__p);
  }
  else
  {
LABEL_5:
    unint64_t v3 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
      sub_10076B860(v3, v4, v5, v6, v7, v8, v9, v10);
    }
    return 305;
  }
  return v11;
}

void sub_1004658F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10001B8AC(va);
  _Unwind_Resume(a1);
}

unsigned char *sub_100465910(uint64_t a1)
{
  if (qword_1009FB7B8 != -1) {
    dispatch_once(&qword_1009FB7B8, &stru_1009AF1A8);
  }
  char v2 = (void *)qword_1009FB7B0;
  unint64_t v3 = *(void *)(a1 + 32);

  return sub_100464A4C(v2, v3);
}

void sub_100465974(uint64_t a1)
{
  if (qword_1009FB7B8 != -1) {
    dispatch_once(&qword_1009FB7B8, &stru_1009AF1A8);
  }
  uint64_t v2 = qword_1009FB7B0;
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(unsigned int *)(a1 + 40);

  sub_100464F08(v2, v3, v4);
}

void sub_1004659DC(uint64_t a1)
{
  if (qword_1009FB7B8 != -1) {
    dispatch_once(&qword_1009FB7B8, &stru_1009AF1A8);
  }
  uint64_t v2 = qword_1009FB7B0;
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(_DWORD *)(a1 + 40);

  sub_1004650C4(v2, v3, v4);
}

void sub_100465A48(uint64_t a1)
{
  sub_100283DC8(a1);

  operator delete();
}

uint64_t sub_100465A80()
{
  return 12;
}

uint64_t sub_100465A88()
{
  return 1;
}

uint64_t sub_100465A90(uint64_t a1)
{
  return sub_100283DC8(a1 - 256);
}

void sub_100465A98(uint64_t a1)
{
  sub_100283DC8(a1 - 256);

  operator delete();
}

void sub_100465AD4(id a1)
{
}

void sub_100465B18()
{
}

void sub_100465B3C(id a1)
{
}

void sub_100465B80()
{
}

void sub_100465BA4(id a1)
{
}

void sub_100465BE8()
{
}

void sub_100465C0C(id a1)
{
}

void sub_100465C50()
{
}

void sub_100465C74(id a1)
{
}

void sub_100465CF8()
{
}

uint64_t sub_100465D1C(int *a1, char *a2, size_t a3)
{
  int v11 = *a1;
  __int16 v12 = *((_WORD *)a1 + 2);
  __source = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  sub_1004A82EC((unsigned __int8 *)&v11, &__source);
  if ((SHIBYTE(v10) & 0x80000000) == 0)
  {
    if (HIBYTE(v10) >= a3) {
      return 5;
    }
    p_source = (const char *)&__source;
LABEL_8:
    strlcpy(a2, p_source, a3);
    uint64_t v6 = 0;
    uint64_t result = 0;
    if ((SHIBYTE(v10) & 0x80000000) == 0) {
      return result;
    }
    goto LABEL_9;
  }
  if (v9 + 1 <= a3)
  {
    p_source = __source;
    goto LABEL_8;
  }
  uint64_t v6 = 5;
LABEL_9:
  operator delete(__source);
  return v6;
}

void sub_100465DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100465DF0(unsigned __int8 *a1, uint64_t a2)
{
  __int16 v5 = 0;
  int v4 = 0;
  if (!sub_1004A82DC((uint64_t)&v4, a1)) {
    return 8;
  }
  uint64_t result = 0;
  *(_DWORD *)a2 = v4;
  *(_WORD *)(a2 + 4) = v5;
  return result;
}

uint64_t sub_100465E4C(unint64_t a1, int *a2, unint64_t *a3)
{
  if (!a2) {
    return 8;
  }
  int v12 = *a2;
  __int16 v13 = *((_WORD *)a2 + 2);
  if (!(_BYTE)v12)
  {
    uint64_t v9 = 1;
    while (v9 != 6)
    {
      if (*((unsigned __int8 *)&v12 + v9++))
      {
        if ((unint64_t)(v9 - 2) <= 4) {
          goto LABEL_3;
        }
        return 8;
      }
    }
    return 8;
  }
LABEL_3:
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  uint64_t v5 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v12, 1);
  if (!v5) {
    return 8;
  }
  uint64_t v6 = v5;
  if (qword_1009F7F00 != -1)
  {
    uint64_t v11 = v5;
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
    uint64_t v6 = v11;
  }
  unint64_t v7 = sub_1004A93A0((uint64_t)off_1009F7EF8, a1, v6);
  *a3 = v7;
  if (v7) {
    return 0;
  }
  else {
    return 7;
  }
}

uint64_t sub_100465F64(unint64_t a1, uint64_t a2, unint64_t *a3)
{
  id v5 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:a2];
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009AF1E8);
  }
  uint64_t v6 = sub_100030DCC((uint64_t)off_1009F7ED8, v5, 0);
  if (v6) {
    BOOL v7 = (v6 & 0xFF000000000000) == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (!v7) {
    goto LABEL_16;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  uint64_t v8 = sub_100030F10((uint64_t)off_1009F7EF8, v6, 0);
  if (v8)
  {
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
    }
    unint64_t v9 = sub_1004A93A0((uint64_t)off_1009F7EF8, a1, v8);
    *a3 = v9;
    if (v9) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = 7;
    }
  }
  else
  {
LABEL_16:
    uint64_t v10 = 8;
  }

  return v10;
}

void sub_10046609C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1004660B0(unint64_t a1, char *a2, size_t a3)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  unint64_t v6 = sub_1004A930C((uint64_t)off_1009F7EF8, a1);
  *(void *)uu = 0;
  uint64_t v16 = 0;
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009AF1E8);
  }
  sub_1006BC498((uint64_t)off_1009F7ED8, a1, (uint64_t)uu);
  memset(&__p, 0, sizeof(__p));
  if (v6)
  {
    sub_1004A82EC((unsigned __int8 *)(v6 + 128), &v13);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v13;
  }
  else
  {
    if (uuid_is_null(uu))
    {
      uint64_t v8 = 7;
      goto LABEL_18;
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009AF1E8);
    }
    uint64_t v10 = off_1009F7ED8;
    uint64_t v11 = sub_100031234(uu);
    sub_100030DCC((uint64_t)v10, v11, 0);
    sub_1006AD3F0();
    id v12 = objc_claimAutoreleasedReturnValue();
    std::string::assign(&__p, (const std::string::value_type *)[v12 UTF8String]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__p.__r_.__value_.__l.__size_ + 1 <= a3)
    {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_17;
    }
LABEL_15:
    uint64_t v8 = 5;
    goto LABEL_18;
  }
  if (HIBYTE(__p.__r_.__value_.__r.__words[2]) >= a3) {
    goto LABEL_15;
  }
  p_p = &__p;
LABEL_17:
  strlcpy(a2, (const char *)p_p, a3);
  uint64_t v8 = 0;
LABEL_18:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v8;
}

void sub_1004662B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1004662F4(unint64_t a1, int *a2)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  if (sub_1004AB1F0((uint64_t)off_1009F7EF8))
  {
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
    }
    unint64_t v4 = sub_1004A930C((uint64_t)off_1009F7EF8, a1);
    *(void *)uu = 0;
    uint64_t v9 = 0;
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009AF1E8);
    }
    sub_1006BC498((uint64_t)off_1009F7ED8, a1, (uint64_t)uu);
    if (v4)
    {
      *a2 = sub_100476054(v4);
      int v5 = sub_100476458(v4);
      switch(v5)
      {
        case 4:
          int v6 = 19;
          break;
        case 2:
          int v6 = 20;
          break;
        case 1:
          int v6 = 22;
          break;
        default:
          return 0;
      }
    }
    else
    {
      if (uuid_is_null(uu)) {
        return 7;
      }
      int v6 = 48;
    }
    uint64_t result = 0;
    *a2 = v6;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076A5EC();
    }
    return 212;
  }
  return result;
}

uint64_t sub_1004664A0(unint64_t a1, _DWORD *a2)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  unint64_t v4 = sub_1004A930C((uint64_t)off_1009F7EF8, a1);
  if (!v4) {
    return 7;
  }
  uint64_t v5 = v4;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  if (sub_1004AB1F0((uint64_t)off_1009F7EF8))
  {
    if (sub_100476250(v5, a2)) {
      return 0;
    }
    else {
      return 408;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076A5EC();
    }
    return 212;
  }
}

uint64_t sub_10046658C(unint64_t a1, char *a2, size_t a3)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  if ((sub_1004AB1F0((uint64_t)off_1009F7EF8) & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076A5EC();
    }
    return 212;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  unint64_t v6 = sub_1004A930C((uint64_t)off_1009F7EF8, a1);
  if (v6)
  {
    sub_100476120(v6, (uint64_t)&v10);
  }
  else
  {
    *(void *)uu = 0;
    uint64_t v15 = 0;
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009AF1E8);
    }
    sub_1006BC498((uint64_t)off_1009F7ED8, a1, (uint64_t)uu);
    if (uuid_is_null(uu)) {
      return 7;
    }
    sub_10004191C(&v10, "Peripheral");
  }
  *(_OWORD *)__source = v10;
  uint64_t v13 = v11;
  if ((SHIBYTE(v11) & 0x80000000) == 0)
  {
    if (HIBYTE(v11) >= a3) {
      return 5;
    }
    if (!HIBYTE(v11)) {
      return 408;
    }
    BOOL v7 = (const char *)__source;
    goto LABEL_24;
  }
  if (__source[1] + 1 > (char *)a3)
  {
    uint64_t v8 = 5;
LABEL_29:
    operator delete(__source[0]);
    return v8;
  }
  if (!__source[1])
  {
    uint64_t v8 = 408;
    goto LABEL_29;
  }
  BOOL v7 = __source[0];
LABEL_24:
  strlcpy(a2, v7, a3);
  uint64_t v8 = 0;
  if (SHIBYTE(v13) < 0) {
    goto LABEL_29;
  }
  return v8;
}

void sub_10046678C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

uint64_t sub_1004667B8(unint64_t a1, char *a2, size_t a3)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  if ((sub_1004AB1F0((uint64_t)off_1009F7EF8) & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076A5EC();
    }
    return 212;
  }
  __source[0] = 0;
  __source[1] = 0;
  uint64_t v16 = 0;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  unint64_t v6 = sub_1004A930C((uint64_t)off_1009F7EF8, a1);
  if (v6)
  {
    sub_100475EE0(v6, (uint64_t)&v13);
    *(_OWORD *)__source = v13;
    uint64_t v16 = v14;
  }
  else
  {
    *(void *)uu = 0;
    uint64_t v18 = 0;
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009AF1E8);
    }
    sub_1006BC498((uint64_t)off_1009F7ED8, a1, (uint64_t)uu);
    if (uuid_is_null(uu)) {
      return 7;
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009AF1E8);
    }
    uint64_t v11 = off_1009F7ED8;
    id v12 = sub_100031234(uu);
    sub_10003093C((uint64_t)v11, v12, (uint64_t)&v13);
    *(_OWORD *)__source = v13;
    uint64_t v16 = v14;
    HIBYTE(v14) = 0;
    LOBYTE(v13) = 0;
  }
  char v7 = HIBYTE(v16);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16) >= a3) {
      return 5;
    }
    if (HIBYTE(v16))
    {
      uint64_t v8 = (const char *)__source;
      goto LABEL_24;
    }
LABEL_27:
    *a2 = 0;
    uint64_t v9 = 408;
    if ((v7 & 0x80) == 0) {
      return v9;
    }
    goto LABEL_25;
  }
  if (__source[1] + 1 > (char *)a3)
  {
    uint64_t v9 = 5;
LABEL_25:
    operator delete(__source[0]);
    return v9;
  }
  if (!__source[1]) {
    goto LABEL_27;
  }
  uint64_t v8 = __source[0];
LABEL_24:
  strlcpy(a2, v8, a3);
  uint64_t v9 = 0;
  if (v16 < 0) {
    goto LABEL_25;
  }
  return v9;
}

void sub_100466A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100466A4C(unint64_t a1, char *a2, size_t a3)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  if ((sub_1004AB1F0((uint64_t)off_1009F7EF8) & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076A5EC();
    }
    return 212;
  }
  __source[0] = 0;
  __source[1] = 0;
  uint64_t v16 = 0;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  unint64_t v6 = sub_1004A930C((uint64_t)off_1009F7EF8, a1);
  if (v6)
  {
    sub_100475F84(v6, (uint64_t)&v13);
    *(_OWORD *)__source = v13;
    uint64_t v16 = v14;
  }
  else
  {
    *(void *)uu = 0;
    uint64_t v18 = 0;
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009AF1E8);
    }
    sub_1006BC498((uint64_t)off_1009F7ED8, a1, (uint64_t)uu);
    if (uuid_is_null(uu)) {
      return 7;
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009AF1E8);
    }
    uint64_t v11 = off_1009F7ED8;
    id v12 = sub_100031234(uu);
    sub_10003093C((uint64_t)v11, v12, (uint64_t)&v13);
    *(_OWORD *)__source = v13;
    uint64_t v16 = v14;
    HIBYTE(v14) = 0;
    LOBYTE(v13) = 0;
  }
  char v7 = HIBYTE(v16);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16) >= a3) {
      return 5;
    }
    if (HIBYTE(v16))
    {
      uint64_t v8 = (const char *)__source;
      goto LABEL_24;
    }
LABEL_27:
    *a2 = 0;
    uint64_t v9 = 408;
    if ((v7 & 0x80) == 0) {
      return v9;
    }
    goto LABEL_25;
  }
  if (__source[1] + 1 > (char *)a3)
  {
    uint64_t v9 = 5;
LABEL_25:
    operator delete(__source[0]);
    return v9;
  }
  if (!__source[1]) {
    goto LABEL_27;
  }
  uint64_t v8 = __source[0];
LABEL_24:
  strlcpy(a2, v8, a3);
  uint64_t v9 = 0;
  if (v16 < 0) {
    goto LABEL_25;
  }
  return v9;
}

void sub_100466CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100466CE0(unint64_t a1, char *a2)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  unint64_t v4 = sub_1004A930C((uint64_t)off_1009F7EF8, a1);
  if (!v4) {
    return 408;
  }
  uint64_t v5 = v4;
  unint64_t v6 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    sub_100475EE0(v5, (uint64_t)__p);
    char v7 = v10 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315394;
    id v12 = v7;
    __int16 v13 = 2080;
    uint64_t v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Set user-defined name for %s to %s", buf, 0x16u);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_10004191C(__p, a2);
  sub_1004776CC(v5, (uint64_t)__p, 1);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_100466E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100466E68(unint64_t a1, int *a2)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  unint64_t v4 = sub_1004A930C((uint64_t)off_1009F7EF8, a1);
  if (!v4) {
    return 7;
  }
  uint64_t v5 = v4;
  int v6 = sub_10047E08C(v4);
  if (sub_10047EF58(v5)) {
    v6 |= 2u;
  }
  if (sub_10047F0DC(v5)) {
    v6 |= 4u;
  }
  if (sub_10047F16C(v5)) {
    v6 |= 8u;
  }
  int v7 = sub_10047F1FC(v5);
  uint64_t result = 0;
  if (v7) {
    int v9 = v6 | 0x10;
  }
  else {
    int v9 = v6;
  }
  *a2 = v9;
  return result;
}

uint64_t sub_100466F40(unint64_t a1, unsigned int a2)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  unint64_t v4 = sub_1004A930C((uint64_t)off_1009F7EF8, a1);
  if (!v4) {
    return 7;
  }
  uint64_t v5 = v4;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  int v6 = off_1009F7EF8;

  return sub_1004ABE38((uint64_t)v6, v5, 0, (a2 >> 1) & 1, (a2 & 4) != 0, (a2 & 8) != 0, (a2 >> 4) & 1);
}

uint64_t sub_100467010(unint64_t a1, uint64_t a2, void *a3)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  unint64_t v6 = sub_1004A930C((uint64_t)off_1009F7EF8, a1);
  if (!v6) {
    return 7;
  }
  __int16 v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  sub_10047F724(v6, &v13);
  int v7 = v13;
  uint64_t v8 = v14;
  if (v13 == v14)
  {
    uint64_t v9 = 0;
  }
  else
  {
    LODWORD(v9) = 0;
    char v10 = v13;
    do
    {
      int v11 = *v10++;
      *(_DWORD *)(a2 + 4 * v9) = v11;
      uint64_t v9 = (v9 + 1);
    }
    while (v10 != v8);
  }
  *a3 = v9;
  if (v7)
  {
    uint64_t v14 = v7;
    operator delete(v7);
  }
  return 0;
}

uint64_t sub_1004670E0(unint64_t a1, int a2, int a3)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  unint64_t v6 = sub_1004A930C((uint64_t)off_1009F7EF8, a1);
  if (!v6) {
    return 7;
  }
  int v7 = (void *)v6;
  std::string __p = 0;
  int v25 = 0;
  unint64_t v26 = 0;
  sub_10047F724(v6, &__p);
  uint64_t v8 = (char *)__p;
  int v25 = (char *)__p;
  if (!a3)
  {
    if ((unint64_t)__p < v26)
    {
      *(_DWORD *)std::string __p = -2;
      uint64_t v9 = v8 + 4;
      goto LABEL_28;
    }
    unint64_t v19 = (uint64_t)(v26 - (void)__p) >> 1;
    if (v19 <= 1) {
      unint64_t v19 = 1;
    }
    if (v26 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v19;
    }
    __int16 v13 = (char *)sub_1002C44F0((uint64_t)&v26, v20);
    uint64_t v14 = (char *)__p;
    __int16 v21 = v25;
    uint64_t v17 = &v13[4 * v22];
    *(_DWORD *)__int16 v13 = -2;
    uint64_t v9 = v13 + 4;
    while (v21 != v14)
    {
      int v23 = *((_DWORD *)v21 - 1);
      v21 -= 4;
      *((_DWORD *)v13 - 1) = v23;
      v13 -= 4;
    }
LABEL_26:
    std::string __p = v13;
    int v25 = v9;
    unint64_t v26 = (unint64_t)v17;
    if (v14) {
      operator delete(v14);
    }
    goto LABEL_28;
  }
  if ((unint64_t)__p >= v26)
  {
    unint64_t v11 = (uint64_t)(v26 - (void)__p) >> 1;
    if (v11 <= 1) {
      unint64_t v11 = 1;
    }
    if (v26 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    __int16 v13 = (char *)sub_1002C44F0((uint64_t)&v26, v12);
    uint64_t v14 = (char *)__p;
    uint64_t v15 = v25;
    uint64_t v17 = &v13[4 * v16];
    *(_DWORD *)__int16 v13 = a2;
    uint64_t v9 = v13 + 4;
    while (v15 != v14)
    {
      int v18 = *((_DWORD *)v15 - 1);
      v15 -= 4;
      *((_DWORD *)v13 - 1) = v18;
      v13 -= 4;
    }
    goto LABEL_26;
  }
  *(_DWORD *)std::string __p = a2;
  uint64_t v9 = v8 + 4;
LABEL_28:
  int v25 = v9;
  sub_10047F530(v7, (_DWORD **)&__p);
  sub_10047D63C((uint64_t)v7);
  if (__p)
  {
    int v25 = (char *)__p;
    operator delete(__p);
  }
  return 0;
}

void sub_10046728C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004672AC(unint64_t a1, int *a2)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  unint64_t v4 = (unsigned __int8 *)sub_1004A930C((uint64_t)off_1009F7EF8, a1);
  *(void *)uu = 0;
  uint64_t v10 = 0;
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009AF1E8);
  }
  sub_1006BC498((uint64_t)off_1009F7ED8, a1, (uint64_t)uu);
  if (v4)
  {
    int v5 = sub_100040630(v4);
    uint64_t result = 0;
    *a2 = v5 << 31 >> 31;
  }
  else if (uuid_is_null(uu))
  {
    return 7;
  }
  else
  {
    if (qword_1009F7ED0 != -1) {
      dispatch_once(&qword_1009F7ED0, &stru_1009AF208);
    }
    uint64_t v7 = qword_1009F7EC8;
    uint64_t v8 = sub_100031234(uu);
    *a2 = sub_100008DC4(v7, v8) << 31 >> 31;

    return 0;
  }
  return result;
}

void sub_100467418(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100467430(unint64_t a1, _DWORD *a2)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  if (!sub_1004A930C((uint64_t)off_1009F7EF8, a1)) {
    return 7;
  }
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t sub_1004674A0(unint64_t a1, int *a2)
{
  *a2 = 0;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  unint64_t v4 = sub_1004A930C((uint64_t)off_1009F7EF8, a1);
  if (!v4) {
    return 7;
  }
  uint64_t v5 = v4;
  if (qword_1009F8080 != -1) {
    dispatch_once(&qword_1009F8080, &stru_1009AF228);
  }
  int v6 = sub_100497A84((uint64_t)off_1009F8078, v5);
  uint64_t result = 0;
  *a2 = v6 << 31 >> 31;
  return result;
}

uint64_t sub_100467558(unint64_t a1, int *a2)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  unint64_t v4 = sub_1004A930C((uint64_t)off_1009F7EF8, a1);
  if (!v4) {
    return 7;
  }
  int v5 = sub_1004764A0(v4);
  uint64_t result = 0;
  *a2 = v5 << 31 >> 31;
  return result;
}

uint64_t sub_1004675D4(unint64_t a1, int *a2)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  unint64_t v4 = sub_1004A930C((uint64_t)off_1009F7EF8, a1);
  if (!v4) {
    return 7;
  }
  uint64_t v5 = v4;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  if (sub_1004AB1F0((uint64_t)off_1009F7EF8))
  {
    int v6 = sub_100478B2C(v5, 12);
    uint64_t result = 0;
    *a2 = v6 << 31 >> 31;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076A5EC();
    }
    return 212;
  }
  return result;
}

uint64_t sub_1004676C4(unint64_t a1, int *a2)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  unint64_t v4 = sub_1004A930C((uint64_t)off_1009F7EF8, a1);
  if (!v4) {
    return 7;
  }
  uint64_t v5 = v4;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  if (sub_1004AB1F0((uint64_t)off_1009F7EF8))
  {
    int v6 = sub_100478B2C(v5, 22);
    uint64_t result = 0;
    *a2 = v6 << 31 >> 31;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076A5EC();
    }
    return 212;
  }
  return result;
}

uint64_t sub_1004677B4(unint64_t a1, _DWORD *a2)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  unint64_t v4 = sub_1004A930C((uint64_t)off_1009F7EF8, a1);
  if (!v4) {
    return 7;
  }
  int v5 = sub_10047B950(v4);
  uint64_t result = 0;
  *a2 = v5;
  return result;
}

uint64_t sub_10046782C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (qword_1009F8090 != -1) {
    dispatch_once(&qword_1009F8090, &stru_1009AF248);
  }
  uint64_t v8 = (uint64_t *)off_1009F8088;

  return sub_1004D1130(v8, a1, a2, a3, a4);
}

uint64_t sub_1004678B0(uint64_t a1, uint64_t a2)
{
  if (qword_1009F8090 != -1) {
    dispatch_once(&qword_1009F8090, &stru_1009AF248);
  }
  unint64_t v4 = off_1009F8088;

  return sub_1004D1228((uint64_t)v4, a1, a2);
}

uint64_t sub_10046791C(unint64_t a1, int a2)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  unint64_t v4 = sub_1004A930C((uint64_t)off_1009F7EF8, a1);
  if (!v4) {
    return 7;
  }
  uint64_t v5 = v4;
  memset(&v28, 0, sizeof(v28));
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009AF268);
  }
  uint64_t v6 = sub_100019C0C((void *)qword_1009F8160, a1);
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_10003AE4C(v7, (uint64_t)&v27);
      int v9 = SHIBYTE(v27.__r_.__value_.__r.__words[2]);
      std::string::size_type v10 = v27.__r_.__value_.__r.__words[0];
      sub_100475F84(v5, (uint64_t)__p);
      unint64_t v11 = &v27;
      if (v9 < 0) {
        unint64_t v11 = (std::string *)v10;
      }
      if (v26 >= 0) {
        unint64_t v12 = __p;
      }
      else {
        unint64_t v12 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v30 = v11;
      __int16 v31 = 2082;
      uint64_t v32 = v12;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" is asking to connect device \"%{public}s\"", buf, 0x16u);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v27.__r_.__value_.__l.__data_);
      }
      uint64_t v8 = qword_100A19E50;
    }
    if (os_signpost_enabled(v8))
    {
      sub_10003AE4C(v7, (uint64_t)&v27);
      int v13 = SHIBYTE(v27.__r_.__value_.__r.__words[2]);
      std::string::size_type v14 = v27.__r_.__value_.__r.__words[0];
      sub_100475F84(v5, (uint64_t)__p);
      uint64_t v15 = &v27;
      if (v13 < 0) {
        uint64_t v15 = (std::string *)v14;
      }
      if (v26 >= 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v30 = v15;
      __int16 v31 = 2082;
      uint64_t v32 = v16;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "BTSignPost", "Session \"%{public}s\" is asking to connect device \"%{public}s\"", buf, 0x16u);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v27.__r_.__value_.__l.__data_);
      }
    }
    if (sub_10053FF64())
    {
      CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle();
      int v18 = CTGreenTeaOsLogHandle;
      if (CTGreenTeaOsLogHandle)
      {
        if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
        {
          sub_10003AE4C(v7, (uint64_t)&v27);
          int v19 = SHIBYTE(v27.__r_.__value_.__r.__words[2]);
          std::string::size_type v20 = v27.__r_.__value_.__r.__words[0];
          sub_100475F84(v5, (uint64_t)__p);
          __int16 v21 = &v27;
          if (v19 < 0) {
            __int16 v21 = (std::string *)v20;
          }
          if (v26 >= 0) {
            uint64_t v22 = __p;
          }
          else {
            uint64_t v22 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136446466;
          uint64_t v30 = v21;
          __int16 v31 = 2082;
          uint64_t v32 = v22;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Session \"%{public}s\" is asking to connect device \"%{public}s\"", buf, 0x16u);
          if (v26 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v27.__r_.__value_.__l.__data_);
          }
        }
      }
    }
    sub_10003AE4C(v7, (uint64_t)&v27);
    std::string v28 = v27;
  }
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF288);
  }
  sub_1004B3D30((uint64_t)off_1009F7EA8, 0, 0);
  if (qword_1009F8090 != -1) {
    dispatch_once(&qword_1009F8090, &stru_1009AF248);
  }
  uint64_t v23 = sub_1004D2DCC((int64x2_t *)off_1009F8088, v5, a2, &v28, 2);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  return v23;
}

void sub_100467D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100467D6C(unint64_t a1, int a2, int a3, _OWORD *a4)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  unint64_t v8 = sub_1004A930C((uint64_t)off_1009F7EF8, a1);
  if (!v8) {
    return 7;
  }
  uint64_t v9 = v8;
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009AF268);
  }
  uint64_t v10 = sub_100019C0C((void *)qword_1009F8160, a1);
  if (v10)
  {
    uint64_t v11 = v10;
    unint64_t v12 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_10003AE4C(v11, (uint64_t)&v37);
      int v13 = SHIBYTE(v37.__r_.__value_.__r.__words[2]);
      std::string::size_type v14 = v37.__r_.__value_.__r.__words[0];
      sub_100475EE0(v9, (uint64_t)__p);
      uint64_t v15 = &v37;
      if (v13 < 0) {
        uint64_t v15 = (std::string *)v14;
      }
      if (v36 >= 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446466;
      uint32_t v39 = v15;
      __int16 v40 = 2082;
      uint64_t v41 = v16;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "BTDeviceConnectServicesWithParameters \"%{public}s\" is asking to connect device \"%{public}s\" with params", buf, 0x16u);
      if (v36 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
    }
    if (sub_10053FF64())
    {
      CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle();
      int v18 = CTGreenTeaOsLogHandle;
      if (CTGreenTeaOsLogHandle)
      {
        if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
        {
          sub_10003AE4C(v11, (uint64_t)&v37);
          int v19 = SHIBYTE(v37.__r_.__value_.__r.__words[2]);
          std::string::size_type v20 = v37.__r_.__value_.__r.__words[0];
          sub_100475EE0(v9, (uint64_t)__p);
          __int16 v21 = &v37;
          if (v19 < 0) {
            __int16 v21 = (std::string *)v20;
          }
          if (v36 >= 0) {
            uint64_t v22 = __p;
          }
          else {
            uint64_t v22 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136446466;
          uint32_t v39 = v21;
          __int16 v40 = 2082;
          uint64_t v41 = v22;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Session \"%{public}s\" is asking to connect device \"%{public}s\" with params", buf, 0x16u);
          if (v36 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v37.__r_.__value_.__l.__data_);
          }
        }
      }
    }
  }
  if (a3 <= 15)
  {
    switch(a3)
    {
      case 0:
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
          sub_10076B96C();
        }
        sub_10048698C(v9, 1);
        if (sub_1004764A0(v9))
        {
          uint64_t v23 = sub_1004AFB34();
          v34[0] = _NSConcreteStackBlock;
          v34[1] = 3221225472;
          v34[2] = sub_1004686B4;
          v34[3] = &unk_100997528;
          v34[4] = v9;
          sub_100013018(v23, v34);
        }
        goto LABEL_80;
      case 1:
        std::string v27 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v37.__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "BTDeviceConnectServicesWithParameters BTDeviceConnectGuestMode", (uint8_t *)&v37, 2u);
        }
        sub_100486864(v9, 1);
        *(_DWORD *)(v9 + 972) = 1;
        goto LABEL_80;
      case 2:
        std::string v28 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v37.__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "BTDeviceConnectServicesWithParameters BTDeviceConnectGuestModeWithLinkey", (uint8_t *)&v37, 2u);
        }
        memset(&v37, 0, 20);
        sub_100600E5C((uint64_t)&v37, a4, 5u);
        if (qword_1009F8778 != -1) {
          dispatch_once(&qword_1009F8778, &stru_1009AF2A8);
        }
        uint64_t v24 = sub_100618730((uint64_t)off_1009F8770, (unsigned __int8 *)v9, (__n128 *)&v37, 0);
        sub_100486864(v9, 1);
        *(_DWORD *)(v9 + 972) = 2;
        if (v24 && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
          sub_10076B938();
        }
        goto LABEL_73;
      case 4:
        char v26 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v37.__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "BTDeviceConnectServicesWithParameters BTDeviceConnectGuestModeNotInContactsWithLinkkey", (uint8_t *)&v37, 2u);
        }
        memset(&v37, 0, 20);
        sub_100600E5C((uint64_t)&v37, a4, 5u);
        if (qword_1009F8778 != -1) {
          dispatch_once(&qword_1009F8778, &stru_1009AF2A8);
        }
        uint64_t v24 = sub_100618730((uint64_t)off_1009F8770, (unsigned __int8 *)v9, (__n128 *)&v37, 0);
        sub_100486864(v9, 1);
        sub_1004868F8(v9, 1);
        *(_DWORD *)(v9 + 972) = 2;
        if (v24 && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
          sub_10076B938();
        }
        nullsub_95(&v37);
        a2 = 524312;
        if (!v24) {
          goto LABEL_80;
        }
        break;
      case 8:
        uint64_t v29 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v37.__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "BTDeviceConnectServicesWithParameters BTDeviceConnectNormalModeNoOwnership", (uint8_t *)&v37, 2u);
        }
        sub_100486CBC(v9, 0);
        goto LABEL_80;
      default:
        goto LABEL_86;
    }
    return v24;
  }
  if (a3 != 16)
  {
    if (a3 == 32)
    {
      uint64_t v32 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v37.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "BTDeviceConnectServicesWithParameters, BTDeviceConnectTiPiMode", (uint8_t *)&v37, 2u);
      }
      if (qword_1009F80A0 != -1) {
        dispatch_once(&qword_1009F80A0, &stru_1009AF2E8);
      }
      sub_10028BCF8((uint64_t)off_1009F8098, v9, 1);
    }
    else
    {
      if (a3 != 64)
      {
LABEL_86:
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
          sub_10076B904();
        }
        return 2;
      }
      int v25 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v37.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "BTDeviceConnectServicesWithParameters, BTDeviceConnectGuestPairingMode", (uint8_t *)&v37, 2u);
      }
      if (_os_feature_enabled_impl())
      {
        sub_100486B00((unsigned __int8 *)v9, 1);
      }
      else if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
      {
        sub_10076B9A0();
      }
    }
LABEL_80:
    if (qword_1009F7EB0 != -1) {
      dispatch_once(&qword_1009F7EB0, &stru_1009AF288);
    }
    sub_1004B3D30((uint64_t)off_1009F7EA8, 0, 0);
    if (qword_1009F8090 != -1) {
      dispatch_once(&qword_1009F8090, &stru_1009AF248);
    }
    memset(&v37, 0, sizeof(v37));
    uint64_t v24 = sub_1004D2DCC((int64x2_t *)off_1009F8088, v9, a2, &v37, 2);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    return v24;
  }
  uint64_t v30 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v37.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "BTDeviceConnectServicesWithParameters, BTDeviceConnectOwnerNoMagicPairing", (uint8_t *)&v37, 2u);
  }
  sub_10047D578(v9, 1);
  __p[0] = 0;
  __p[1] = 0;
  if (*a4 == 0) {
    goto LABEL_80;
  }
  __int16 v31 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v37.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "BTDeviceConnectServicesWithParameters, connectwithLinkey", (uint8_t *)&v37, 2u);
  }
  memset(&v37, 0, 20);
  sub_100600E5C((uint64_t)&v37, a4, 5u);
  if (qword_1009F8778 != -1) {
    dispatch_once(&qword_1009F8778, &stru_1009AF2A8);
  }
  uint64_t v24 = sub_100618730((uint64_t)off_1009F8770, (unsigned __int8 *)v9, (__n128 *)&v37, 0);
LABEL_73:
  nullsub_95(&v37);
  if (!v24) {
    goto LABEL_80;
  }
  return v24;
}

void sub_10046864C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

void sub_1004686B4(uint64_t a1)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009AF2C8);
  }
  uint64_t v2 = (os_unfair_lock_s *)qword_1009F8410;
  uint64_t v3 = *(void *)(a1 + 32);

  sub_100411020(v2, v3);
}

uint64_t sub_100468718(unint64_t a1)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  unint64_t v2 = sub_1004A930C((uint64_t)off_1009F7EF8, a1);
  if (!v2) {
    return 7;
  }
  uint64_t v3 = v2;
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009AF268);
  }
  uint64_t v4 = sub_100019C0C((void *)qword_1009F8160, a1);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_10003AE4C(v5, (uint64_t)v24);
      int v7 = v25;
      unint64_t v8 = (void **)v24[0];
      sub_100475F84(v3, (uint64_t)__p);
      uint64_t v9 = v24;
      if (v7 < 0) {
        uint64_t v9 = v8;
      }
      if (v23 >= 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446466;
      std::string v27 = v9;
      __int16 v28 = 2082;
      uint64_t v29 = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" is asking to disconnect physical link for device \"%{public}s\"", buf, 0x16u);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
      if (v25 < 0) {
        operator delete(v24[0]);
      }
      uint64_t v6 = qword_100A19E50;
    }
    if (os_signpost_enabled(v6))
    {
      sub_10003AE4C(v5, (uint64_t)v24);
      int v11 = v25;
      unint64_t v12 = (void **)v24[0];
      sub_100475F84(v3, (uint64_t)__p);
      int v13 = v24;
      if (v11 < 0) {
        int v13 = v12;
      }
      if (v23 >= 0) {
        std::string::size_type v14 = __p;
      }
      else {
        std::string::size_type v14 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446466;
      std::string v27 = v13;
      __int16 v28 = 2082;
      uint64_t v29 = v14;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "BTSignPost", "Session \"%{public}s\" is asking to disconnect physical link for device \"%{public}s\"", buf, 0x16u);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
      if (v25 < 0) {
        operator delete(v24[0]);
      }
    }
    if (sub_10053FF64())
    {
      CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle();
      uint64_t v16 = CTGreenTeaOsLogHandle;
      if (CTGreenTeaOsLogHandle)
      {
        if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
        {
          sub_10003AE4C(v5, (uint64_t)v24);
          int v17 = v25;
          int v18 = (void **)v24[0];
          sub_100475F84(v3, (uint64_t)__p);
          int v19 = v24;
          if (v17 < 0) {
            int v19 = v18;
          }
          if (v23 >= 0) {
            std::string::size_type v20 = __p;
          }
          else {
            std::string::size_type v20 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136446466;
          std::string v27 = v19;
          __int16 v28 = 2082;
          uint64_t v29 = v20;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Session \"%{public}s\" is asking to disconnect physical link for device \"%{public}s\"", buf, 0x16u);
          if (v23 < 0) {
            operator delete(__p[0]);
          }
          if (v25 < 0) {
            operator delete(v24[0]);
          }
        }
      }
    }
  }
  if (qword_1009F8090 != -1) {
    dispatch_once(&qword_1009F8090, &stru_1009AF248);
  }
  sub_1004D2D54((uint64_t)off_1009F8088, v3, 1);
  return 0;
}

void sub_100468A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100468AC8(unint64_t a1, int a2)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  unint64_t v4 = sub_1004A930C((uint64_t)off_1009F7EF8, a1);
  if (!v4) {
    return 7;
  }
  uint64_t v5 = v4;
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009AF268);
  }
  uint64_t v6 = sub_100019C0C((void *)qword_1009F8160, a1);
  if (v6)
  {
    uint64_t v7 = v6;
    unint64_t v8 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_10003AE4C(v7, (uint64_t)v22);
      int v9 = v23;
      uint64_t v10 = (void **)v22[0];
      sub_100475F84(v5, (uint64_t)__p);
      int v11 = v22;
      if (v9 < 0) {
        int v11 = v10;
      }
      if (v21 >= 0) {
        unint64_t v12 = __p;
      }
      else {
        unint64_t v12 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446466;
      char v25 = v11;
      __int16 v26 = 2082;
      std::string v27 = v12;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" is asking to disconnect device \"%{public}s\"", buf, 0x16u);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
      if (v23 < 0) {
        operator delete(v22[0]);
      }
    }
    if (sub_10053FF64())
    {
      CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle();
      std::string::size_type v14 = CTGreenTeaOsLogHandle;
      if (CTGreenTeaOsLogHandle)
      {
        if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
        {
          sub_10003AE4C(v7, (uint64_t)v22);
          int v15 = v23;
          uint64_t v16 = (void **)v22[0];
          sub_100475F84(v5, (uint64_t)__p);
          int v17 = v22;
          if (v15 < 0) {
            int v17 = v16;
          }
          if (v21 >= 0) {
            int v18 = __p;
          }
          else {
            int v18 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136446466;
          char v25 = v17;
          __int16 v26 = 2082;
          std::string v27 = v18;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Session \"%{public}s\" is asking to disconnect device \"%{public}s\"", buf, 0x16u);
          if (v21 < 0) {
            operator delete(__p[0]);
          }
          if (v23 < 0) {
            operator delete(v22[0]);
          }
        }
      }
    }
  }
  if (qword_1009F8090 != -1) {
    dispatch_once(&qword_1009F8090, &stru_1009AF248);
  }
  return sub_1004D76C0((uint64_t)off_1009F8088, v5, a2);
}

void sub_100468D88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100468DB0(unint64_t a1, _DWORD *a2)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  unint64_t v4 = sub_1004A930C((uint64_t)off_1009F7EF8, a1);
  *(void *)uu = 0;
  uint64_t v7 = 0;
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009AF1E8);
  }
  sub_1006BC498((uint64_t)off_1009F7ED8, a1, (uint64_t)uu);
  *a2 = 0;
  if (v4) {
    *a2 |= sub_1004809F4(v4);
  }
  if (!uuid_is_null(uu))
  {
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009AF308);
    }
    if (sub_1000307A4((uint64_t)off_1009F7EB8, uu)) {
      *a2 |= 0x8000u;
    }
  }
  if (v4 || !uuid_is_null(uu)) {
    return 0;
  }
  else {
    return 7;
  }
}

uint64_t sub_100468F18(unint64_t a1, _DWORD *a2)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  unint64_t v4 = sub_1004A930C((uint64_t)off_1009F7EF8, a1);
  *(void *)uu = 0;
  uint64_t v7 = 0;
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009AF1E8);
  }
  sub_1006BC498((uint64_t)off_1009F7ED8, a1, (uint64_t)uu);
  *a2 = 0;
  if (v4)
  {
    if (qword_1009F8090 != -1) {
      dispatch_once(&qword_1009F8090, &stru_1009AF248);
    }
    *a2 |= sub_1004D6124((uint64_t)off_1009F8088, v4);
  }
  if (uuid_is_null(uu))
  {
    if (v4) {
      return 0;
    }
  }
  else
  {
    *a2 |= 0x8000u;
    if (v4) {
      return 0;
    }
  }
  if (uuid_is_null(uu)) {
    return 7;
  }
  return 0;
}

uint64_t sub_10046907C(unint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  unint64_t v8 = sub_1004A930C((uint64_t)off_1009F7EF8, a1);
  uint64_t v9 = v8;
  if (a1 - 4294901761u >= 2 && !v8) {
    return 7;
  }
  if (qword_1009F8090 != -1) {
    dispatch_once(&qword_1009F8090, &stru_1009AF248);
  }
  int v11 = off_1009F8088;

  return sub_1004D8430((uint64_t)v11, v9, a2, a3, a4);
}

uint64_t sub_100469170(unint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  unint64_t v8 = sub_1004A930C((uint64_t)off_1009F7EF8, a1);
  uint64_t v9 = v8;
  if (a1 - 4294901761u >= 2 && !v8) {
    return 7;
  }
  if (qword_1009F8090 != -1) {
    dispatch_once(&qword_1009F8090, &stru_1009AF248);
  }
  int v11 = off_1009F8088;

  return sub_1004D8538((uint64_t)v11, v9, a2, a3, a4);
}

uint64_t sub_100469264(unint64_t a1)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  unint64_t v2 = sub_1004A930C((uint64_t)off_1009F7EF8, a1);
  if (!v2) {
    return 7;
  }
  sub_100477E90(v2, 0);
  return 0;
}

uint64_t sub_1004692D4(unint64_t a1, int a2, char *a3, size_t a4)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  unint64_t v8 = sub_1004A930C((uint64_t)off_1009F7EF8, a1);
  uint64_t v9 = v8;
  if (a1 - 4294901761u >= 2 && !v8) {
    return 7;
  }
  if (qword_1009F8090 != -1) {
    dispatch_once(&qword_1009F8090, &stru_1009AF248);
  }
  int v11 = off_1009F8088;

  return sub_1004D864C((uint64_t)v11, v9, a2, a3, a4);
}

uint64_t sub_1004693C8(unint64_t a1, void *a2, size_t a3, int *a4)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  unint64_t v8 = sub_1004A930C((uint64_t)off_1009F7EF8, a1);
  if (!v8) {
    return 7;
  }
  int v9 = sub_10048B98C(v8, a2, a3);
  uint64_t result = 0;
  *a4 = v9 << 31 >> 31;
  return result;
}

uint64_t sub_10046945C(unint64_t a1, void *a2, size_t a3, uint64_t a4, void *a5, unsigned int a6)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  unint64_t v12 = sub_1004A930C((uint64_t)off_1009F7EF8, a1);
  if (!v12) {
    return 7;
  }
  if (sub_10048A868(v12, a2, a3, a4, (uint64_t)a5, a6)) {
    return *a5 == 0;
  }
  return 1;
}

uint64_t sub_100469514(unint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  unint64_t v10 = sub_1004A930C((uint64_t)off_1009F7EF8, a1);
  if (!v10) {
    return 7;
  }
  uint64_t v11 = v10;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  if (sub_1004AB1F0((uint64_t)off_1009F7EF8))
  {
    uint64_t result = 1;
    if (a2 && a3 && a4)
    {
      if (a5) {
        return !sub_10047B7A8(v11, a2, a3, a4, a5);
      }
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076A5EC();
    }
    return 212;
  }
  return result;
}

uint64_t sub_100469634(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  unint64_t v6 = sub_1004A930C((uint64_t)off_1009F7EF8, a1);
  if (qword_1009FB7C8 != -1) {
    dispatch_once(&qword_1009FB7C8, &stru_1009AF328);
  }
  (*(void (**)(void *, unint64_t, uint64_t, uint64_t))(*(void *)off_1009FB7C0 + 240))(off_1009FB7C0, v6, a2, a3);
  return 0;
}

uint64_t sub_100469704(unint64_t a1, int *a2, uint64_t a3, int a4)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  unint64_t v8 = sub_1004A930C((uint64_t)off_1009F7EF8, a1);
  int v9 = qword_100A19E50;
  if (a4 && (uint64_t v10 = v8) != 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_100475EE0(v10, (uint64_t)__p);
      uint64_t v11 = v14 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v16 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Sending linkkey to device \"%{public}s\" ", buf, 0xCu);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }
    if (qword_1009F80A0 != -1) {
      dispatch_once(&qword_1009F80A0, &stru_1009AF2E8);
    }
    return sub_1002AF5A8((uint64_t)off_1009F8098, v10, a2, a3);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076B9D4(a4 != 0, v9);
    }
    return 7;
  }
}

uint64_t sub_1004698A4(unint64_t a1, _DWORD *a2)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  unint64_t v4 = sub_1004A930C((uint64_t)off_1009F7EF8, a1);
  if (v4)
  {
    unint64_t v5 = v4;
    uint64_t result = 0;
    *a2 = -*(char *)(v5 + 960);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076BA64();
    }
    return 7;
  }
  return result;
}

uint64_t sub_100469948(unint64_t a1, int *a2)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  unint64_t v4 = sub_1004A930C((uint64_t)off_1009F7EF8, a1);
  if (!v4) {
    return 7;
  }
  uint64_t v5 = v4;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  if (sub_1004AB1F0((uint64_t)off_1009F7EF8))
  {
    int v6 = sub_100478B2C(v5, 27);
    uint64_t result = 0;
    *a2 = v6 << 31 >> 31;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076A5EC();
    }
    return 212;
  }
  return result;
}

uint64_t sub_100469A38(unint64_t a1, _DWORD *a2)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  unint64_t v4 = sub_1004A930C((uint64_t)off_1009F7EF8, a1);
  if (v4)
  {
    unint64_t v5 = v4;
    uint64_t result = 0;
    *a2 = -*(char *)(v5 + 976);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076BA98();
    }
    return 7;
  }
  return result;
}

uint64_t sub_100469ADC(unint64_t a1, _DWORD *a2)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  unint64_t v4 = sub_1004A930C((uint64_t)off_1009F7EF8, a1);
  if (!v4) {
    return 7;
  }
  int v5 = sub_10047C010(v4);
  uint64_t result = 0;
  *a2 = v5;
  return result;
}

uint64_t sub_100469B54(unint64_t a1, _DWORD *a2)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  unint64_t v4 = sub_1004A930C((uint64_t)off_1009F7EF8, a1);
  if (!v4) {
    return 7;
  }
  int v5 = sub_10047C0C8(v4);
  uint64_t result = 0;
  *a2 = v5;
  return result;
}

uint64_t sub_100469BCC(unint64_t a1, int a2)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  unint64_t v4 = sub_1004A930C((uint64_t)off_1009F7EF8, a1);
  if (v4)
  {
    uint64_t v5 = v4;
    if (qword_1009F80A0 != -1) {
      dispatch_once(&qword_1009F80A0, &stru_1009AF2E8);
    }
    int v6 = off_1009F8098;
    return sub_10029C988((uint64_t)v6, v5, a2 != 0);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076BACC();
    }
    return 7;
  }
}

uint64_t sub_100469CB4(unint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = sub_10003FB34();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v6 + 2720))(v6)) {
    return 2;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  unint64_t v7 = sub_1004A930C((uint64_t)off_1009F7EF8, a1);
  if (v7)
  {
    uint64_t v8 = v7;
    unint64_t v9 = *(unsigned int *)(v7 + 128) | ((unint64_t)*(unsigned __int16 *)(v7 + 132) << 32);
    uint64_t v10 = sub_10003FB34();
    uint64_t v11 = sub_100476054(v8);
    unint64_t v12 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, BOOL, BOOL, uint64_t, uint64_t))(*(void *)v10 + 72);
    return v12(v10, v9, v11, a2, a3 != 0, a3 != 0, 1, 1);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076BB00();
    }
    return 7;
  }
}

uint64_t sub_100469E1C(unint64_t a1, int *a2)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  unint64_t v4 = sub_1004A930C((uint64_t)off_1009F7EF8, a1);
  if (!v4) {
    return 7;
  }
  int v5 = sub_10048DBC8(v4);
  uint64_t result = 0;
  *a2 = v5 << 31 >> 31;
  return result;
}

uint64_t sub_100469E98(unint64_t a1, _DWORD *a2)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  if (sub_1004AB1F0((uint64_t)off_1009F7EF8))
  {
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
    }
    unint64_t v4 = sub_1004A930C((uint64_t)off_1009F7EF8, a1);
    if (v4)
    {
      int v5 = sub_100476458(v4);
      uint64_t result = 0;
      *a2 = v5;
    }
    else
    {
      return 7;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076A5EC();
    }
    return 212;
  }
  return result;
}

uint64_t sub_100469F78(unint64_t a1, int a2)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  if (sub_1004AB1F0((uint64_t)off_1009F7EF8))
  {
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
    }
    unint64_t v4 = sub_1004A930C((uint64_t)off_1009F7EF8, a1);
    if (v4)
    {
      unint64_t v5 = v4;
      sub_1004763C4(v4, a2);
      uint64_t v6 = sub_1004AFB34();
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      _DWORD v11[2] = sub_10046A108;
      _OWORD v11[3] = &unk_100997570;
      v11[4] = v5;
      int v12 = a2;
      sub_100013018(v6, v11);
      uint64_t v7 = sub_1004AFA9C();
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472;
      void v9[2] = sub_10046A170;
      void v9[3] = &unk_100997570;
      void v9[4] = v5;
      int v10 = a2;
      sub_100013018(v7, v9);
      return 0;
    }
    else
    {
      return 7;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076A5EC();
    }
    return 212;
  }
}

void sub_10046A108(uint64_t a1)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009AF2C8);
  }
  unint64_t v2 = (void *)qword_1009F8410;
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(_DWORD *)(a1 + 40);

  sub_100416C54(v2, v3, v4);
}

void sub_10046A170(uint64_t a1)
{
  if (qword_1009FB058 != -1) {
    dispatch_once(&qword_1009FB058, &stru_1009AF348);
  }
  unint64_t v2 = off_1009FB050;
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(_DWORD *)(a1 + 40);

  sub_10052AC8C((uint64_t)v2, v3, v4);
}

uint64_t sub_10046A1D8(unint64_t a1, _DWORD *a2)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF1C8);
  }
  unint64_t v4 = sub_1004A930C((uint64_t)off_1009F7EF8, a1);
  if (!v4) {
    return 7;
  }
  unsigned int v5 = sub_10047ECFC(v4);
  uint64_t result = 0;
  *a2 = ((v5 >> 1) & 1) - 1;
  return result;
}

void sub_10046A258(id a1)
{
}

void sub_10046A29C()
{
}

void sub_10046A2C0(id a1)
{
}

void sub_10046A304()
{
}

void sub_10046A328(id a1)
{
}

void sub_10046A36C()
{
}

void sub_10046A390(id a1)
{
}

void sub_10046A3D4()
{
}

void sub_10046A3F8(id a1)
{
}

void sub_10046A43C()
{
}

void sub_10046A460(id a1)
{
}

void sub_10046A4A4()
{
}

void sub_10046A4C8(id a1)
{
}

void sub_10046A50C()
{
}

void sub_10046A530(id a1)
{
}

void sub_10046A574()
{
}

void sub_10046A598(id a1)
{
}

void sub_10046A5DC()
{
}

void sub_10046A600(id a1)
{
}

void sub_10046A644()
{
}

void sub_10046A668(id a1)
{
}

void sub_10046A6AC()
{
}

void sub_10046A6D0(id a1)
{
}

void sub_10046A714()
{
}

void sub_10046A738(id a1)
{
}

void sub_10046A77C()
{
}

uint64_t sub_10046A7A0(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return a2(a3, a4, a5, a6);
}

uint64_t sub_10046A7B8(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int16 a7, uint64_t a8)
{
  uint64_t v9 = a6;
  __int16 v10 = a7;
  return a2(a3, a4, a5, &v9, a8);
}

uint64_t sub_10046A828(unint64_t a1, unint64_t *a2)
{
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009AF368);
  }
  uint64_t v4 = sub_100019C0C((void *)qword_1009F8160, a1);
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  unint64_t v5 = sub_1004B11D8(off_1009F7EA8, a1);
  *a2 = v5;
  if (v5) {
    return 0;
  }
  uint64_t v7 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
  {
    if (v4) {
      sub_10076BB80(v4, (uint64_t)v8, v7);
    }
    else {
      sub_10076BB34(v8, v7);
    }
  }
  return 7;
}

uint64_t sub_10046A954(uint64_t a1, long long *a2, uint64_t a3)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  uint64_t v6 = (uint64_t *)sub_1004B1154((uint64_t)off_1009F7EA8, a1);
  if (!v6) {
    return 7;
  }

  return sub_1004B2518(v6, a1, a2, a3);
}

uint64_t sub_10046A9F0(uint64_t a1, long long *a2)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  uint64_t v4 = sub_1004B1154((uint64_t)off_1009F7EA8, a1);
  if (!v4) {
    return 7;
  }

  return sub_1004B2648(v4, a1, a2);
}

uint64_t sub_10046AA78(unint64_t a1, int a2, int a3)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  uint64_t v6 = sub_1004B1154((uint64_t)off_1009F7EA8, a1);
  if (!v6) {
    return 7;
  }
  uint64_t v7 = v6;
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009AF368);
  }
  uint64_t v8 = sub_100019C0C((void *)qword_1009F8160, a1);
  if (v8)
  {
    uint64_t v9 = v8;
    if (qword_1009F8168 != -1) {
      dispatch_once(&qword_1009F8168, &stru_1009AF368);
    }
    uint64_t v10 = qword_1009F8160;
    unint64_t v11 = sub_100019D1C(v9);
    char v12 = sub_100553D18(v10, v11);
    int v13 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_10003AE4C(v9, (uint64_t)__p);
      char v14 = (void **)__p[0];
      int v15 = "off";
      if (v27 >= 0) {
        char v14 = __p;
      }
      if (a3 == -1) {
        int v15 = "on";
      }
      *(_DWORD *)std::string buf = 136446722;
      uint64_t v29 = v14;
      __int16 v30 = 2082;
      __int16 v31 = v15;
      if (a2 == 1) {
        uint64_t v16 = "Bluetooth";
      }
      else {
        uint64_t v16 = "Unknown";
      }
      __int16 v32 = 2082;
      int v33 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" is turning power %{public}s for module %{public}s", buf, 0x20u);
      if (v27 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10053FF64())
    {
      CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle();
      if (CTGreenTeaOsLogHandle)
      {
        int v18 = CTGreenTeaOsLogHandle;
        if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
        {
          sub_10003AE4C(v9, (uint64_t)__p);
          int v19 = (void **)__p[0];
          std::string::size_type v20 = "off";
          if (v27 >= 0) {
            int v19 = __p;
          }
          if (a3 == -1) {
            std::string::size_type v20 = "on";
          }
          *(_DWORD *)std::string buf = 136446722;
          uint64_t v29 = v19;
          __int16 v30 = 2082;
          __int16 v31 = v20;
          if (a2 == 1) {
            char v21 = "Bluetooth";
          }
          else {
            char v21 = "Unknown";
          }
          __int16 v32 = 2082;
          int v33 = v21;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Session \"%{public}s\" is turning power %{public}s for module %{public}s", buf, 0x20u);
          if (v27 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
  }
  else
  {
    char v12 = 0;
  }
  uint64_t v23 = sub_100017768();
  char v24 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 8))(v23);
  if (a3 || (v24 & 1) != 0)
  {
    if (a3) {
      return sub_1004B3CC0(v7, v12);
    }
  }
  else
  {
    uint64_t v25 = sub_100050530();
    (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 152))(v25, 3);
  }
  return sub_1004B24B4(v7, v12);
}

uint64_t sub_10046ADD4(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
  uint64_t v3 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v3 + 792))(v3, 1)) {
    *a2 = -1;
  }
  return 0;
}

uint64_t sub_10046AE3C(uint64_t a1, uint64_t a2, int *a3)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  uint64_t v5 = sub_1004B1154((uint64_t)off_1009F7EA8, a1);
  if (!v5) {
    return 7;
  }
  unsigned int v10 = 0;
  uint64_t v6 = sub_1004B3ED8(v5, &v10);
  if (!v6)
  {
    if (v10 > 4)
    {
      uint64_t v6 = 1;
    }
    else
    {
      uint64_t v6 = 0;
      *a3 = dword_1007BEC20[v10];
    }
  }
  uint64_t v7 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *a3;
    *(_DWORD *)std::string buf = 67109120;
    int v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Returning bluetooth power state: %x", buf, 8u);
  }
  return v6;
}

uint64_t sub_10046AF74(unint64_t a1)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  if (!sub_1004B1154((uint64_t)off_1009F7EA8, a1)) {
    return 7;
  }
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009AF368);
  }
  uint64_t v2 = sub_100019C0C((void *)qword_1009F8160, a1);
  if (v2)
  {
    uint64_t v3 = v2;
    if (sub_10053FF64())
    {
      CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle();
      if (CTGreenTeaOsLogHandle)
      {
        uint64_t v5 = CTGreenTeaOsLogHandle;
        if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
        {
          sub_10003AE4C(v3, (uint64_t)__p);
          if (v9 >= 0) {
            uint64_t v6 = __p;
          }
          else {
            uint64_t v6 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136446210;
          unint64_t v11 = v6;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Session \"%{public}s\" is asking to power down local device ", buf, 0xCu);
          if (v9 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
  }
  return sub_1004B3F34();
}

uint64_t sub_10046B0F0(unint64_t a1)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  if (!sub_1004B1154((uint64_t)off_1009F7EA8, a1)) {
    return 7;
  }
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009AF368);
  }
  uint64_t v2 = sub_100019C0C((void *)qword_1009F8160, a1);
  if (v2)
  {
    uint64_t v3 = v2;
    if (sub_10053FF64())
    {
      CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle();
      if (CTGreenTeaOsLogHandle)
      {
        uint64_t v5 = CTGreenTeaOsLogHandle;
        if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
        {
          sub_10003AE4C(v3, (uint64_t)__p);
          if (v9 >= 0) {
            uint64_t v6 = __p;
          }
          else {
            uint64_t v6 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136446210;
          unint64_t v11 = v6;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Session \"%{public}s\" is asking to reset local device", buf, 0xCu);
          if (v9 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
  }
  return sub_1004B3F88();
}

uint64_t sub_10046B26C(uint64_t a1, _DWORD *a2)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  uint64_t v4 = sub_1004B1154((uint64_t)off_1009F7EA8, a1);
  if (!v4) {
    return 7;
  }
  char v6 = 0;
  uint64_t result = sub_1004B4138(v4, &v6);
  if (result) {
    return 1;
  }
  *a2 = -v6;
  return result;
}

uint64_t sub_10046B300(uint64_t a1, char *a2, size_t a3)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  uint64_t v6 = sub_1004B1154((uint64_t)off_1009F7EA8, a1);
  if (!v6) {
    return 7;
  }
  __int16 v14 = 0;
  int v13 = 0;
  uint64_t result = sub_1004B4380(v6, (uint64_t)&v13);
  if (!result)
  {
    __source = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    sub_1004A82EC((unsigned __int8 *)&v13, &__source);
    if (SHIBYTE(v12) < 0)
    {
      if (v11 + 1 > a3)
      {
        uint64_t v9 = 5;
LABEL_15:
        operator delete(__source);
        return v9;
      }
      p_source = __source;
    }
    else
    {
      if (HIBYTE(v12) >= a3) {
        return 5;
      }
      p_source = (const char *)&__source;
    }
    strlcpy(a2, p_source, a3);
    uint64_t v9 = 0;
    uint64_t result = 0;
    if (SHIBYTE(v12) < 0) {
      goto LABEL_15;
    }
  }
  return result;
}

void sub_10046B40C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10046B428(unint64_t a1, int a2)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  uint64_t v4 = sub_1004B1154((uint64_t)off_1009F7EA8, a1);
  if (!v4) {
    return 7;
  }
  uint64_t v5 = (void *)v4;
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009AF368);
  }
  uint64_t v6 = sub_100019C0C((void *)qword_1009F8160, a1);
  if (v6)
  {
    uint64_t v7 = v6;
    int v8 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_10003AE4C(v7, (uint64_t)__p);
      uint64_t v9 = (void **)__p[0];
      unsigned int v10 = "discoverable";
      if (v13 >= 0) {
        uint64_t v9 = __p;
      }
      if (!a2) {
        unsigned int v10 = "not discoverable";
      }
      *(_DWORD *)std::string buf = 136446466;
      int v15 = v9;
      __int16 v16 = 2080;
      int v17 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" is asking to set local device %s", buf, 0x16u);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  return sub_1004B170C(v5, a1, a2 != 0);
}

uint64_t sub_10046B5D0(uint64_t a1, _DWORD *a2)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  uint64_t v4 = sub_1004B1154((uint64_t)off_1009F7EA8, a1);
  if (!v4) {
    return 7;
  }
  char v6 = 0;
  uint64_t result = sub_1004B5370(v4, &v6);
  if (!result) {
    *a2 = -v6;
  }
  return result;
}

uint64_t sub_10046B65C(unint64_t a1, int a2)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  uint64_t v4 = (void *)sub_1004B1154((uint64_t)off_1009F7EA8, a1);
  if (!v4) {
    return 7;
  }

  return sub_1004B14D8(v4, a1, a2 != 0);
}

uint64_t sub_10046B6E8(uint64_t a1, _DWORD *a2)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  uint64_t v4 = sub_1004B1154((uint64_t)off_1009F7EA8, a1);
  if (!v4) {
    return 7;
  }
  char v6 = 0;
  uint64_t result = sub_1004B46A4(v4, &v6);
  if (!result) {
    *a2 = -v6;
  }
  return result;
}

uint64_t sub_10046B774(uint64_t a1, _DWORD *a2)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  uint64_t v4 = sub_1004B1154((uint64_t)off_1009F7EA8, a1);
  if (!v4) {
    return 7;
  }
  BOOL v6 = 0;
  uint64_t result = sub_1004B5424(v4, &v6);
  if (!result) {
    *a2 = -v6;
  }
  return result;
}

uint64_t sub_10046B800(unint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t a4)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  uint64_t v8 = sub_1004B1154((uint64_t)off_1009F7EA8, a1);
  if (!v8) {
    return 7;
  }
  std::string __p = 0;
  int v19 = 0;
  uint64_t v20 = 0;
  uint64_t v9 = sub_1004B54C0(v8, (uint64_t **)&__p);
  if (!v9)
  {
    unint64_t v10 = 0;
    if (a4 && __p != v19)
    {
      uint64_t v11 = (char *)__p + 8;
      unint64_t v12 = 1;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        if (qword_1009F7F00 != -1) {
          dispatch_once(&qword_1009F7F00, &stru_1009AF3A8);
        }
        unint64_t v14 = sub_1004A93A0((uint64_t)off_1009F7EF8, a1, v13);
        if (!v14)
        {
          uint64_t v9 = 7;
          goto LABEL_19;
        }
        *a2++ = v14;
        unint64_t v15 = v12 + 1;
        if (v12 >= a4) {
          break;
        }
        ++v12;
        BOOL v16 = v11 == v19;
        v11 += 8;
      }
      while (!v16);
      unint64_t v10 = v15 - 1;
    }
    uint64_t v9 = 0;
    *a3 = v10;
  }
LABEL_19:
  if (__p)
  {
    int v19 = (char *)__p;
    operator delete(__p);
  }
  return v9;
}

void sub_10046B968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10046B988(uint64_t a1, _DWORD *a2)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  uint64_t v4 = sub_1004B1154((uint64_t)off_1009F7EA8, a1);
  if (!v4) {
    return 7;
  }
  char v6 = 0;
  uint64_t result = sub_1004B5524(v4, &v6);
  if (!result) {
    *a2 = -v6;
  }
  return result;
}

uint64_t sub_10046BA14(unint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t a4)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  uint64_t v8 = sub_1004B1154((uint64_t)off_1009F7EA8, a1);
  if (!v8) {
    return 7;
  }
  std::string __p = 0;
  int v19 = 0;
  uint64_t v20 = 0;
  uint64_t v9 = sub_1004B55C0(v8, &__p);
  if (!v9)
  {
    unint64_t v10 = 0;
    if (!a4 || __p == v19)
    {
LABEL_20:
      uint64_t v9 = 0;
      *a3 = v10;
    }
    else
    {
      uint64_t v11 = (char *)__p + 8;
      unint64_t v12 = 1;
      while (1)
      {
        uint64_t v13 = *((void *)v11 - 1);
        if (qword_1009F7F00 != -1) {
          dispatch_once(&qword_1009F7F00, &stru_1009AF3A8);
        }
        unint64_t v14 = sub_1004A93A0((uint64_t)off_1009F7EF8, a1, v13);
        if (!v14) {
          break;
        }
        *a2++ = v14;
        unint64_t v15 = v12 + 1;
        if (v12 < a4)
        {
          ++v12;
          BOOL v16 = v11 == v19;
          v11 += 8;
          if (!v16) {
            continue;
          }
        }
        unint64_t v10 = v15 - 1;
        goto LABEL_20;
      }
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_10076BC14();
      }
      uint64_t v9 = 7;
    }
  }
  if (__p)
  {
    int v19 = (char *)__p;
    operator delete(__p);
  }
  return v9;
}

void sub_10046BBA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10046BBC4(unint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t a4)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  uint64_t v8 = sub_1004B1154((uint64_t)off_1009F7EA8, a1);
  if (!v8) {
    return 7;
  }
  std::string __p = 0;
  int v19 = 0;
  uint64_t v20 = 0;
  uint64_t v9 = sub_1004B561C(v8, (char **)&__p);
  if (!v9)
  {
    unint64_t v10 = 0;
    if (!a4 || __p == v19)
    {
LABEL_20:
      uint64_t v9 = 0;
      *a3 = v10;
    }
    else
    {
      uint64_t v11 = (char *)__p + 8;
      unint64_t v12 = 1;
      while (1)
      {
        uint64_t v13 = *((void *)v11 - 1);
        if (qword_1009F7F00 != -1) {
          dispatch_once(&qword_1009F7F00, &stru_1009AF3A8);
        }
        unint64_t v14 = sub_1004A93A0((uint64_t)off_1009F7EF8, a1, v13);
        if (!v14) {
          break;
        }
        *a2++ = v14;
        unint64_t v15 = v12 + 1;
        if (v12 < a4)
        {
          ++v12;
          BOOL v16 = v11 == v19;
          v11 += 8;
          if (!v16) {
            continue;
          }
        }
        unint64_t v10 = v15 - 1;
        goto LABEL_20;
      }
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_10076BC14();
      }
      uint64_t v9 = 7;
    }
  }
  if (__p)
  {
    int v19 = (char *)__p;
    operator delete(__p);
  }
  return v9;
}

void sub_10046BD54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10046BD74(uint64_t a1, _DWORD *a2)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  uint64_t v4 = sub_1004B1154((uint64_t)off_1009F7EA8, a1);
  if (!v4) {
    return 7;
  }
  BOOL v6 = 0;
  uint64_t result = sub_1004B5678(v4, &v6);
  if (!result) {
    *a2 = -v6;
  }
  return result;
}

uint64_t sub_10046BE00(uint64_t a1, int *a2)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  if (!sub_1004B1154((uint64_t)off_1009F7EA8, a1)) {
    return 7;
  }
  int v4 = sub_1004B5F68();
  uint64_t result = 0;
  *a2 = v4 << 31 >> 31;
  return result;
}

uint64_t sub_10046BE7C(uint64_t a1)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  if (!sub_1004B1154((uint64_t)off_1009F7EA8, a1)) {
    return 7;
  }

  return sub_1004B4194();
}

uint64_t sub_10046BEF8(uint64_t a1, _DWORD *a2)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  uint64_t v4 = sub_1004B1154((uint64_t)off_1009F7EA8, a1);
  if (!v4) {
    return 7;
  }
  char v6 = 0;
  uint64_t result = sub_1004B431C(v4, &v6);
  if (!result) {
    *a2 = -v6;
  }
  return result;
}

uint64_t sub_10046BF84(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  uint64_t v8 = sub_1004B1154((uint64_t)off_1009F7EA8, a1);
  if (!v8) {
    return 7;
  }

  return sub_1004B41E8(v8, a2, a3, a4);
}

uint64_t sub_10046C024(uint64_t a1, int a2)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  uint64_t v4 = sub_1004B1154((uint64_t)off_1009F7EA8, a1);
  if (!v4) {
    return 7;
  }

  return sub_1004B4264(v4, a2);
}

uint64_t sub_10046C0A8(uint64_t a1)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  if (!sub_1004B1154((uint64_t)off_1009F7EA8, a1)) {
    return 7;
  }

  return sub_1004B42C8();
}

uint64_t sub_10046C124(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (a1)
  {
    if (qword_1009F7EB0 != -1) {
      dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
    }
    if (!sub_1004B1154((uint64_t)off_1009F7EA8, a1)) {
      return 7;
    }
  }
  uint64_t v6 = sub_100035F54();
  int v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 48))(v6, a2);
  uint64_t result = 0;
  *a3 = v7;
  return result;
}

uint64_t sub_10046C1D4(uint64_t a1, const void *a2, size_t a3, const void *a4, unint64_t a5)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  uint64_t v10 = sub_1004B1154((uint64_t)off_1009F7EA8, a1);
  if (!v10) {
    return 7;
  }

  return sub_1004B313C(v10, a1, a2, a3, a4, a5);
}

uint64_t sub_10046C28C(uint64_t a1, const void *a2, size_t a3, const void *a4, size_t a5)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  uint64_t v10 = sub_1004B1154((uint64_t)off_1009F7EA8, a1);
  if (!v10) {
    return 7;
  }

  return sub_1004B3420(v10, a1, a2, a3, a4, a5);
}

uint64_t sub_10046C344(uint64_t a1)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  uint64_t v2 = sub_1004B1154((uint64_t)off_1009F7EA8, a1);
  if (v2)
  {
    return sub_1004B26E0(v2);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076BC48();
    }
    return 7;
  }
}

uint64_t sub_10046C408(uint64_t a1)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  uint64_t v2 = sub_1004B1154((uint64_t)off_1009F7EA8, a1);
  if (v2)
  {
    return sub_1004B1940(v2, a1);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076BC7C();
    }
    return 7;
  }
}

uint64_t sub_10046C4B0(uint64_t a1, uint64_t a2)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  uint64_t v4 = sub_1004B1154((uint64_t)off_1009F7EA8, a1);
  if (v4)
  {
    return sub_1004B27C0(v4, a1, a2);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076BCB0();
    }
    return 7;
  }
}

uint64_t sub_10046C560(uint64_t a1)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  uint64_t v2 = sub_1004B1154((uint64_t)off_1009F7EA8, a1);
  if (v2)
  {
    return sub_1004B2874(v2);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076BCE4();
    }
    return 7;
  }
}

uint64_t sub_10046C624(uint64_t a1)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  uint64_t v2 = sub_1004B1154((uint64_t)off_1009F7EA8, a1);
  if (v2)
  {
    return sub_1004B1940(v2, a1);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076BD18();
    }
    return 7;
  }
}

uint64_t sub_10046C6CC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  uint64_t v12 = sub_1004B1154((uint64_t)off_1009F7EA8, a1);
  if (v12)
  {
    return sub_1004B2924(v12, a1, a2 != 0, a3, a4, a5, a6);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076BD4C();
    }
    return 7;
  }
}

uint64_t sub_10046C7B8(uint64_t a1, int a2, uint64_t a3)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  uint64_t v6 = sub_1004B1154((uint64_t)off_1009F7EA8, a1);
  if (v6)
  {
    return sub_1004B2A48(v6, a1, a2 != 0, a3);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076BD80();
    }
    return 7;
  }
}

uint64_t sub_10046C880(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  uint64_t v12 = sub_1004B1154((uint64_t)off_1009F7EA8, a1);
  if (v12)
  {
    return sub_1004B2C08(v12, a1, a2, a3, a4, a5, a6);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076BDB4();
    }
    return 7;
  }
}

uint64_t sub_10046C968(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  uint64_t v24 = sub_1004B1154((uint64_t)off_1009F7EA8, a1);
  if (v24) {
    return sub_1004B2D28(v24, a1, a2 != 0, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
    sub_10076BDE8();
  }
  return 7;
}

uint64_t sub_10046CA78(uint64_t a1)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  if (sub_1004B1154((uint64_t)off_1009F7EA8, a1))
  {
    return sub_1004B56D4();
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076BE1C();
    }
    return 7;
  }
}

uint64_t sub_10046CB1C(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4, unint64_t a5)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  uint64_t v10 = sub_1004B1154((uint64_t)off_1009F7EA8, a1);
  if (v10)
  {
    if (a5 >= 0xFE) {
      uint64_t v11 = 254;
    }
    else {
      uint64_t v11 = a5;
    }
    return sub_1004B5808(v10, a2, a3, a4, v11);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076BE50();
    }
    return 7;
  }
}

uint64_t sub_10046CC00(unint64_t a1, char *a2)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  uint64_t v4 = sub_1004B1154((uint64_t)off_1009F7EA8, a1);
  if (!v4)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076BE84();
    }
    return 7;
  }
  uint64_t v5 = v4;
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009AF368);
  }
  uint64_t v6 = sub_100019C0C((void *)qword_1009F8160, a1);
  if (!v6) {
    return 7;
  }

  return sub_1004B3FDC(v5, v6, a2);
}

uint64_t sub_10046CD00(unint64_t a1, uint64_t a2)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  uint64_t v4 = sub_1004B1154((uint64_t)off_1009F7EA8, a1);
  if (!v4)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076BEB8();
    }
    return 7;
  }
  uint64_t v5 = v4;
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009AF368);
  }
  uint64_t v6 = sub_100019C0C((void *)qword_1009F8160, a1);
  if (!v6) {
    return 7;
  }

  return sub_1004B3AC4(v5, v6, a2);
}

uint64_t sub_10046CE00(unint64_t a1, unint64_t a2)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  uint64_t v4 = sub_1004B1154((uint64_t)off_1009F7EA8, a1);
  if (!v4)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076BEEC();
    }
    return 7;
  }
  uint64_t v5 = v4;
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009AF368);
  }
  uint64_t v6 = sub_100019C0C((void *)qword_1009F8160, a1);
  if (!v6) {
    return 7;
  }
  uint64_t v7 = v6;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF3A8);
  }
  unint64_t v8 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v8) {
    return 7;
  }

  return sub_1004B3BB0(v5, v7, v8);
}

uint64_t sub_10046CF40()
{
  uint64_t v0 = sub_10003FB34();
  int v1 = sub_1003542D4(v0);
  uint64_t v2 = *(void *)sub_10003FB34();
  if (v1) {
    return (*(uint64_t (**)(void))(v2 + 1608))();
  }
  else {
    return (*(uint64_t (**)(void))(v2 + 1152))();
  }
}

uint64_t sub_10046CFF0(unint64_t a1, int a2)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  uint64_t v4 = sub_1004B1154((uint64_t)off_1009F7EA8, a1);
  if (!v4) {
    return 7;
  }

  return sub_1004B3D30(v4, a1, a2 != 0);
}

uint64_t sub_10046D07C(uint64_t a1, int *a2)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  if (!sub_1004B1154((uint64_t)off_1009F7EA8, a1)) {
    return 7;
  }
  int v4 = sub_1004B4758();
  uint64_t result = 0;
  *a2 = v4 << 31 >> 31;
  return result;
}

uint64_t sub_10046D0F8(uint64_t a1, char *a2, unint64_t *a3, unint64_t a4)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  uint64_t v8 = sub_1004B1154((uint64_t)off_1009F7EA8, a1);
  if (v8) {
    return sub_1004B4C80(v8, a2, a3, a4);
  }
  else {
    return 7;
  }
}

uint64_t sub_10046D180(uint64_t a1, uint64_t a2, void *a3)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  if (!sub_1004B1154((uint64_t)off_1009F7EA8, a1)) {
    return 7;
  }
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009AF3C8);
  }
  if (sub_100570F84(off_1009F80A8, a2, a3)) {
    return 0;
  }
  else {
    return 12;
  }
}

uint64_t sub_10046D23C(uint64_t a1, int *a2)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  if (!sub_1004B1154((uint64_t)off_1009F7EA8, a1)) {
    return 7;
  }
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009AF3C8);
  }
  int v4 = sub_10056A574((uint64_t)off_1009F80A8);
  uint64_t result = 0;
  *a2 = v4 << 31 >> 31;
  return result;
}

uint64_t sub_10046D2E8(uint64_t a1, char *a2, size_t a3)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  if (!sub_1004B1154((uint64_t)off_1009F7EA8, a1)) {
    return 7;
  }
  memset(&__source, 0, sizeof(__source));
  if (qword_1009FB7D8 != -1) {
    dispatch_once(&qword_1009FB7D8, &stru_1009AF3E8);
  }
  if (!sub_10054FBE4((uint64_t)off_1009FB7D0, &__source))
  {
    uint64_t v7 = 1;
    goto LABEL_16;
  }
  if (SHIBYTE(__source.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__source.__r_.__value_.__l.__size_ + 1 <= a3)
    {
      p_source = (std::string *)__source.__r_.__value_.__r.__words[0];
      goto LABEL_15;
    }
LABEL_13:
    uint64_t v7 = 5;
    goto LABEL_16;
  }
  if (HIBYTE(__source.__r_.__value_.__r.__words[2]) >= a3) {
    goto LABEL_13;
  }
  p_source = &__source;
LABEL_15:
  strlcpy(a2, (const char *)p_source, a3);
  uint64_t v7 = 0;
LABEL_16:
  if (SHIBYTE(__source.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__source.__r_.__value_.__l.__data_);
  }
  return v7;
}

void sub_10046D40C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10046D428(uint64_t a1, _WORD *a2)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  if (!sub_1004B1154((uint64_t)off_1009F7EA8, a1)) {
    return 7;
  }
  if (a2)
  {
    if (qword_1009F8738 != -1) {
      dispatch_once(&qword_1009F8738, &stru_1009AF408);
    }
    uint64_t v4 = qword_1009F8730;
    if (qword_1009F8730)
    {
      return sub_10026FAD4(v4, a2);
    }
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076BF54();
    }
    return 7;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
    sub_10076BF20();
  }
  return 3;
}

uint64_t sub_10046D53C(uint64_t a1, uint64_t a2, int a3)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AF388);
  }
  if (!sub_1004B1154((uint64_t)off_1009F7EA8, a1)) {
    return 7;
  }
  if (!a2) {
    return 3;
  }
  id v6 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:a2];
  uint64_t v7 = sub_1004AFA9C();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  _DWORD v10[2] = sub_10046D674;
  _OWORD v10[3] = &unk_100997550;
  id v8 = v6;
  id v11 = v8;
  int v12 = a3;
  sub_100013018(v7, v10);

  return 0;
}

void sub_10046D654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10046D674()
{
  if (qword_1009FB120 != -1) {
    dispatch_once(&qword_1009FB120, &stru_1009AF428);
  }
  uint64_t v0 = off_1009FB118;

  return sub_10062F10C((uint64_t)v0);
}

void sub_10046D6E4(id a1)
{
}

void sub_10046D728()
{
}

void sub_10046D74C(id a1)
{
}

void sub_10046D790()
{
}

void sub_10046D7B4(id a1)
{
}

void sub_10046D7F8()
{
}

void sub_10046D81C(id a1)
{
}

void sub_10046D860()
{
}

void sub_10046D884(id a1)
{
}

void sub_10046D8C8()
{
}

void sub_10046D8EC(id a1)
{
}

void sub_10046D940()
{
}

void sub_10046D964(id a1)
{
}

void sub_10046D9A8()
{
}

uint64_t sub_10046D9CC(int *a1)
{
  uint64_t v34 = 0;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  *(_OWORD *)uint64_t v22 = 0u;
  long long v23 = 0u;
  memset(v21, 0, sizeof(v21));
  long long v20 = 0u;
  sub_10004C67C((uint64_t)&v20);
  uint64_t v2 = __p;
  sub_100474E18(*((void *)a1 + 1), __p);
  if (v19 < 0) {
    uint64_t v2 = (void **)__p[0];
  }
  strlen((const char *)v2);
  uint64_t v3 = sub_10003AB28((uint64_t)v21);
  uint64_t v4 = sub_10003AB28(v3);
  uint64_t v5 = *a1;
  if (v5 > 3) {
    id v6 = "Unknown";
  }
  else {
    id v6 = off_1009AF730[v5];
  }
  strlen(v6);
  uint64_t v7 = sub_10003AB28(v4);
  uint64_t v8 = sub_10003AB28(v7);
  uint64_t v9 = sub_10003AB28(v8);
  sub_10003AB28(v9);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v10 = __p;
  sub_1004D8980(a1 + 6);
  if (v19 < 0) {
    uint64_t v10 = (void **)__p[0];
  }
  strlen((const char *)v10);
  uint64_t v11 = sub_10003AB28((uint64_t)v21);
  sub_10003AB28(v11);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  int v12 = __p;
  sub_1004D8980(a1 + 5);
  if (v19 < 0) {
    int v12 = (void **)__p[0];
  }
  strlen((const char *)v12);
  uint64_t v13 = sub_10003AB28((uint64_t)v21);
  uint64_t v14 = sub_10003AB28(v13);
  char v35 = *((unsigned char *)a1 + 17);
  uint64_t v15 = sub_10003AB28(v14);
  sub_10003AB28(v15);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  *(void *)((char *)&v21[-1]
  *(void *)&v21[0] = v16;
  if (SHIBYTE(v23) < 0) {
    operator delete(v22[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_10046DD10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

uint64_t sub_10046DD50(int *a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(*((void *)a1 + 1), __p);
    if ((SBYTE7(v20) & 0x80u) == 0) {
      uint64_t v3 = __p;
    }
    else {
      uint64_t v3 = (void **)__p[0];
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Device %{public}s", (uint8_t *)&buf, 0xCu);
    if (SBYTE7(v20) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v2 = qword_100A19E50;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *a1;
    if (v4 > 3) {
      uint64_t v5 = "Unknown";
    }
    else {
      uint64_t v5 = off_1009AF730[v4];
    }
    LODWORD(__p[0]) = 136446210;
    *(void **)((char *)__p + 4) = (void *)v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump:    State: %{public}s", (uint8_t *)__p, 0xCu);
    uint64_t v2 = qword_100A19E50;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*((unsigned char *)a1 + 16)) {
      id v6 = "Incoming";
    }
    else {
      id v6 = "Outgoing";
    }
    LODWORD(__p[0]) = 136446210;
    *(void **)((char *)__p + 4) = (void *)v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump:    Direction: %{public}s", (uint8_t *)__p, 0xCu);
    uint64_t v2 = qword_100A19E50;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    sub_1004D8980(a1 + 6);
    if ((SBYTE7(v20) & 0x80u) == 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump:    Connected services: %{public}s", (uint8_t *)&buf, 0xCu);
    if (SBYTE7(v20) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v2 = qword_100A19E50;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    sub_1004D8980(a1 + 5);
    uint64_t v8 = (SBYTE7(v20) & 0x80u) == 0 ? __p : (void **)__p[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump:    Pending services: %{public}s", (uint8_t *)&buf, 0xCu);
    if (SBYTE7(v20) < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v27 = 0;
  long long v26 = 0u;
  memset(v25, 0, sizeof(v25));
  long long v23 = 0u;
  *(_OWORD *)long long v24 = 0u;
  long long v21 = 0u;
  *(_OWORD *)uint64_t v22 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v20 = 0u;
  sub_1006161E0((uint64_t)__p + 1);
  BYTE2(v20) = 0;
  BYTE4(v20) = 0;
  BYTE2(v22[0]) = 0;
  BYTE4(v22[0]) = 0;
  DWORD1(v25[1]) = 0;
  long long v21 = 0uLL;
  *((void *)&v20 + 1) = 0;
  LOBYTE(v22[0]) = 0;
  long long v23 = 0uLL;
  v22[1] = 0;
  LOBYTE(v24[0]) = 0;
  memset(v25, 0, 19);
  v24[1] = 0;
  BYTE8(v25[1]) = 1;
  BYTE2(v27) = 0;
  *(void *)((char *)&v25[1] + 14) = 0;
  *(void *)((char *)&v25[1] + 9) = 0;
  long long v26 = 0uLL;
  *((void *)&v25[2] + 1) = 0;
  LOBYTE(v27) = 0;
  memset(&buf, 0, sizeof(buf));
  if (sub_1004783B8(*((void *)a1 + 1), (uint64_t)__p)
    && LOBYTE(v24[0])
    && (std::string::operator=(&buf, (const std::string *)&v24[1]), LOBYTE(v24[0])))
  {
    uint64_t v9 = qword_100A19E50;
    if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_41;
    }
    p_std::string buf = &buf;
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    int v16 = 136446210;
    int v17 = p_buf;
    uint64_t v11 = "statedump:    Make of device is: %{public}s";
    int v12 = v9;
    uint32_t v13 = 12;
  }
  else
  {
    uint64_t v14 = qword_100A19E50;
    if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_41;
    }
    LOWORD(v16) = 0;
    uint64_t v11 = "statedump:    Make of device is unknown";
    int v12 = v14;
    uint32_t v13 = 2;
  }
  _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v16, v13);
LABEL_41:
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25[0]) < 0) {
    operator delete(v24[1]);
  }
  if (SHIBYTE(v23) < 0) {
    operator delete(v22[1]);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete(*((void **)&v20 + 1));
  }
  return nullsub_95((char *)__p + 1);
}

void sub_10046E190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_100276384((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_10046E1BC(uint64_t a1)
{
  *(void *)a1 = off_1009AF458;
  *(void *)(a1 + 8) = off_1009AF4A8;
  *(void *)(a1 + 16) = &off_1009AF4D8;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  sub_100052DA8(a1 + 56);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 144) = 0;
  *(void *)(a1 + 136) = 0;
  return a1;
}

void sub_10046E260(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 40) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10046E284(void *a1)
{
  *a1 = off_1009AF458;
  a1[1] = off_1009AF4A8;
  a1[2] = &off_1009AF4D8;
  sub_10046E354((uint64_t)a1);
  uint64_t v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  sub_100052DA4(a1 + 7);
  uint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_10046E330(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 + 120);
  if (v3)
  {
    *(void *)(v1 + 128) = v3;
    operator delete(v3);
  }
  sub_10076BF88(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10046E354(uint64_t a1)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 56);
  uint64_t v3 = *(void **)(a1 + 120);
  uint64_t v2 = *(void **)(a1 + 128);
  if (v3 != v2)
  {
    do
    {
      if (*v3) {
        operator delete();
      }
      ++v3;
    }
    while (v3 != v2);
    uint64_t v3 = *(void **)(a1 + 120);
  }
  *(void *)(a1 + 128) = v3;
  *(_WORD *)(a1 + 144) = 0;
  return sub_10003AFB4((uint64_t)v5);
}

void sub_10046E3DC(void *a1)
{
  sub_10046E284(a1);

  operator delete();
}

void sub_10046E414(uint64_t a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009AF650);
  }
  sub_10026B36C((uint64_t)off_1009F8068 + 64, a1 + 8);
  uint64_t v2 = *(void *)sub_100035F54();
  if ((*(unsigned int (**)(void))(v2 + 424))())
  {
    unsigned __int8 v5 = 0;
    uint64_t v3 = sub_10003FFD4();
    (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v3 + 152))(v3, &v5);
    (*(void (**)(uint64_t, void))(*(void *)a1 + 56))(a1, v5);
    uint64_t v4 = sub_10003FFD4();
    sub_100471048(v4 + 728, a1 + 16);
  }
}

void sub_10046E528(uint64_t a1)
{
  uint64_t v2 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 424))(v2))
  {
    uint64_t v3 = sub_10003FFD4() + 728;
    sub_100471358(v3, a1 + 16);
  }
}

uint64_t sub_10046E5A4(uint64_t a1)
{
  sub_10046E354(a1);
  uint64_t v1 = sub_100035F54();
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 408))(v1);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 1072);
    return v3();
  }
  return result;
}

uint64_t sub_10046E640(uint64_t a1)
{
  return sub_10046E5A4(a1 - 8);
}

uint64_t sub_10046E64C(uint64_t a1)
{
  return sub_10046E354(a1 - 8);
}

BOOL sub_10046E654(uint64_t a1, uint64_t a2)
{
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 56);
  for (uint64_t i = *(void *)(a1 + 120); ; i += 8)
  {
    if (i == *(void *)(a1 + 128))
    {
      BOOL v6 = 0;
      goto LABEL_9;
    }
    unsigned __int8 v5 = *(_DWORD **)i;
    if (*(void *)(*(void *)i + 8) == a2) {
      break;
    }
  }
  BOOL v6 = *v5 == 2 || v5[6] != 0;
LABEL_9:
  sub_10003AFB4((uint64_t)v8);
  return v6;
}

BOOL sub_10046E6E8(uint64_t a1, uint64_t a2)
{
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 56);
  for (uint64_t i = *(void *)(a1 + 120); ; i += 8)
  {
    if (i == *(void *)(a1 + 128))
    {
      BOOL v5 = 1;
      goto LABEL_7;
    }
    if (*(void *)(*(void *)i + 8) == a2) {
      break;
    }
  }
  BOOL v5 = **(_DWORD **)i == 0;
LABEL_7:
  sub_10003AFB4((uint64_t)v7);
  return v5;
}

uint64_t sub_10046E768(uint64_t a1)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 56);
  for (uint64_t i = *(void *)(a1 + 120); ; i += 8)
  {
    if (i == *(void *)(a1 + 128))
    {
      uint64_t v3 = 0;
      goto LABEL_8;
    }
    if (**(_DWORD **)i == 2 || *(_DWORD *)(*(void *)i + 24)) {
      break;
    }
  }
  uint64_t v3 = 1;
LABEL_8:
  sub_10003AFB4((uint64_t)v5);
  return v3;
}

uint64_t sub_10046E7E4(uint64_t a1)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 56);
  for (uint64_t i = *(_DWORD ***)(a1 + 120); ; ++i)
  {
    if (i == *(_DWORD ***)(a1 + 128))
    {
      uint64_t v3 = 0;
      goto LABEL_7;
    }
    if ((**i | 2) == 3) {
      break;
    }
  }
  uint64_t v3 = 1;
LABEL_7:
  sub_10003AFB4((uint64_t)v5);
  return v3;
}

uint64_t sub_10046E85C(uint64_t a1, void **a2)
{
  v21[0] = 0;
  v21[1] = 0;
  sub_10003AED0((uint64_t)v21, a1 + 56);
  BOOL v5 = *(void **)(a1 + 120);
  for (uint64_t i = *(void **)(a1 + 128); v5 != i; ++v5)
  {
    BOOL v6 = (_DWORD *)*v5;
    if (*(_DWORD *)*v5 == 2 || v6[6])
    {
      uint64_t v7 = *((void *)v6 + 1);
      uint64_t v9 = a2[1];
      unint64_t v8 = (unint64_t)a2[2];
      if ((unint64_t)v9 >= v8)
      {
        uint64_t v11 = ((char *)v9 - (unsigned char *)*a2) >> 3;
        if ((unint64_t)(v11 + 1) >> 61) {
          abort();
        }
        uint64_t v12 = v8 - (void)*a2;
        uint64_t v13 = v12 >> 2;
        if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
          uint64_t v13 = v11 + 1;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14) {
          uint64_t v15 = (char *)sub_1000405F8((uint64_t)(a2 + 2), v14);
        }
        else {
          uint64_t v15 = 0;
        }
        int v16 = &v15[8 * v11];
        *(void *)int v16 = v7;
        uint64_t v10 = v16 + 8;
        int v18 = (char *)*a2;
        int v17 = (char *)a2[1];
        if (v17 != *a2)
        {
          do
          {
            uint64_t v19 = *((void *)v17 - 1);
            v17 -= 8;
            *((void *)v16 - 1) = v19;
            v16 -= 8;
          }
          while (v17 != v18);
          int v17 = (char *)*a2;
        }
        *a2 = v16;
        a2[1] = v10;
        a2[2] = &v15[8 * v14];
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        void *v9 = v7;
        uint64_t v10 = v9 + 1;
      }
      a2[1] = v10;
      uint64_t i = *(void **)(a1 + 128);
    }
  }
  return sub_10003AFB4((uint64_t)v21);
}

void sub_10046E9A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10046E9BC(uint64_t a1, char **a2)
{
  v20[0] = 0;
  v20[1] = 0;
  sub_10003AED0((uint64_t)v20, a1 + 56);
  uint64_t v5 = *(void *)(a1 + 120);
  for (uint64_t i = *(void *)(a1 + 128); v5 != i; v5 += 8)
  {
    if ((**(_DWORD **)v5 | 2) == 3)
    {
      uint64_t v6 = *(void *)(*(void *)v5 + 8);
      unint64_t v8 = a2[1];
      unint64_t v7 = (unint64_t)a2[2];
      if ((unint64_t)v8 >= v7)
      {
        uint64_t v10 = (v8 - *a2) >> 3;
        if ((unint64_t)(v10 + 1) >> 61) {
          abort();
        }
        uint64_t v11 = v7 - (void)*a2;
        uint64_t v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
          uint64_t v12 = v10 + 1;
        }
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v12;
        }
        if (v13) {
          unint64_t v14 = (char *)sub_1000405F8((uint64_t)(a2 + 2), v13);
        }
        else {
          unint64_t v14 = 0;
        }
        uint64_t v15 = &v14[8 * v10];
        *(void *)uint64_t v15 = v6;
        uint64_t v9 = v15 + 8;
        int v17 = *a2;
        int v16 = a2[1];
        if (v16 != *a2)
        {
          do
          {
            uint64_t v18 = *((void *)v16 - 1);
            v16 -= 8;
            *((void *)v15 - 1) = v18;
            v15 -= 8;
          }
          while (v16 != v17);
          int v16 = *a2;
        }
        *a2 = v15;
        a2[1] = v9;
        a2[2] = &v14[8 * v13];
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        *(void *)unint64_t v8 = v6;
        uint64_t v9 = v8 + 8;
      }
      a2[1] = v9;
      uint64_t i = *(void *)(a1 + 128);
    }
  }
  if (qword_1009FB170 != -1) {
    dispatch_once(&qword_1009FB170, &stru_1009AF670);
  }
  sub_100670C60((uint64_t)off_1009FB168, (void **)a2);
  if (qword_1009FB3B8 != -1) {
    dispatch_once(&qword_1009FB3B8, &stru_1009AF690);
  }
  sub_1005C62C8((uint64_t)off_1009FB3B0, (void **)a2);
  return sub_10003AFB4((uint64_t)v20);
}

void sub_10046EB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10046EB8C(uint64_t a1, uint64_t a2)
{
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 56);
  uint64_t v4 = *(void *)(a1 + 120);
  uint64_t v5 = *(void *)(a1 + 128);
  while (1)
  {
    if (v4 == v5)
    {
      int v6 = 0;
      goto LABEL_7;
    }
    if (*(void *)(*(void *)v4 + 8) == a2) {
      break;
    }
    v4 += 8;
  }
  LODWORD(v5) = *(unsigned char *)(*(void *)v4 + 16) == 0;
  int v6 = 1;
LABEL_7:
  uint64_t v7 = v6 & v5;
  sub_10003AFB4((uint64_t)v9);
  return v7;
}

uint64_t sub_10046EC14(uint64_t a1, uint64_t a2)
{
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 56);
  uint64_t v4 = *(uint64_t **)(a1 + 120);
  uint64_t v5 = *(uint64_t **)(a1 + 128);
  while (v4 != v5)
  {
    uint64_t v6 = *v4;
    if (*(void *)(*v4 + 8) == a2) {
      goto LABEL_6;
    }
    ++v4;
  }
  uint64_t v6 = 0;
LABEL_6:
  sub_10003AFB4((uint64_t)v8);
  return v6;
}

BOOL sub_10046EC84(uint64_t a1, uint64_t a2, int a3)
{
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 56);
  for (uint64_t i = *(void *)(a1 + 120); ; i += 8)
  {
    if (i == *(void *)(a1 + 128))
    {
      BOOL v7 = 0;
      goto LABEL_7;
    }
    if (*(void *)(*(void *)i + 8) == a2) {
      break;
    }
  }
  BOOL v7 = (*(_DWORD *)(*(void *)i + 24) & a3) != 0;
LABEL_7:
  sub_10003AFB4((uint64_t)v9);
  return v7;
}

uint64_t sub_10046ED10(uint64_t a1, uint64_t a2)
{
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 56);
  for (uint64_t i = *(void *)(a1 + 120); ; i += 8)
  {
    if (i == *(void *)(a1 + 128))
    {
      uint64_t v5 = 0;
      goto LABEL_7;
    }
    if (*(void *)(*(void *)i + 8) == a2) {
      break;
    }
  }
  uint64_t v5 = *(unsigned int *)(*(void *)i + 20);
LABEL_7:
  sub_10003AFB4((uint64_t)v7);
  return v5;
}

uint64_t sub_10046ED88(uint64_t a1, uint64_t a2)
{
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 56);
  for (uint64_t i = *(void *)(a1 + 120); ; i += 8)
  {
    if (i == *(void *)(a1 + 128))
    {
      uint64_t v5 = 0;
      goto LABEL_7;
    }
    if (*(void *)(*(void *)i + 8) == a2) {
      break;
    }
  }
  uint64_t v5 = *(unsigned int *)(*(void *)i + 24);
LABEL_7:
  sub_10003AFB4((uint64_t)v7);
  return v5;
}

uint64_t sub_10046EE00(uint64_t a1)
{
  char v2 = sub_10046E7E4(a1);
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1 + 56);
  if (*(unsigned char *)(a1 + 145))
  {
    if ((v2 & 1) == 0 && !*(unsigned char *)(a1 + 144))
    {
      *(unsigned char *)(a1 + 145) = 0;
      sub_10003AFE8((uint64_t)v6);
      uint64_t v3 = sub_1004AF8EC();
      uint64_t v4 = &stru_1009AF4E0;
LABEL_8:
      sub_100013018(v3, v4);
    }
  }
  else if ((v2 & 1) != 0 || *(unsigned char *)(a1 + 144))
  {
    *(unsigned char *)(a1 + 145) = 1;
    sub_10003AFE8((uint64_t)v6);
    uint64_t v3 = sub_1004AF8EC();
    uint64_t v4 = &stru_1009AF500;
    goto LABEL_8;
  }
  return sub_10003AFB4((uint64_t)v6);
}

void sub_10046EEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10046EEB8(id a1)
{
  if (qword_1009F87A8 != -1) {
    dispatch_once(&qword_1009F87A8, &stru_1009AF6B0);
  }
  uint64_t v1 = (os_unfair_lock_s *)off_1009F87A0;

  sub_10046EF10(v1, 0);
}

void sub_10046EF10(os_unfair_lock_s *a1, int a2)
{
  uint64_t v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = "not in progress";
    if (a2) {
      uint64_t v5 = "in progress";
    }
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending 'connection %s' notification", buf, 0xCu);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_10047092C;
  v6[3] = &unk_1009AF580;
  char v7 = a2;
  sub_100470860(a1 + 6, v6);
}

void sub_10046F02C(id a1)
{
  if (qword_1009F87A8 != -1) {
    dispatch_once(&qword_1009F87A8, &stru_1009AF6B0);
  }
  uint64_t v1 = (os_unfair_lock_s *)off_1009F87A0;

  sub_10046EF10(v1, 1);
}

uint64_t sub_10046F084(uint64_t a1)
{
  v3[0] = 0;
  v3[1] = 0;
  sub_10003AED0((uint64_t)v3, a1 + 56);
  *(unsigned char *)(a1 + 144) = 1;
  sub_10003AFE8((uint64_t)v3);
  sub_10046EE00(a1);
  return sub_10003AFB4((uint64_t)v3);
}

void sub_10046F0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10046F0F0(uint64_t a1)
{
  v3[0] = 0;
  v3[1] = 0;
  sub_10003AED0((uint64_t)v3, a1 + 56);
  *(unsigned char *)(a1 + 144) = 0;
  sub_10003AFE8((uint64_t)v3);
  sub_10046EE00(a1);
  return sub_10003AFB4((uint64_t)v3);
}

void sub_10046F144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10046F158(uint64_t a1, uint64_t a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1 + 56);
  for (uint64_t i = *(void *)(a1 + 120); ; i += 8)
  {
    if (i == *(void *)(a1 + 128)) {
      operator new();
    }
    if (*(void *)(*(void *)i + 8) == a2) {
      break;
    }
  }
  sub_10003AFE8((uint64_t)v6);
  sub_10046EE00(a1);
  return sub_10003AFB4((uint64_t)v6);
}

void sub_10046F2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10046F2CC(uint64_t a1, uint64_t a2, int a3)
{
  v14[0] = 0;
  v14[1] = 0;
  sub_10003AED0((uint64_t)v14, a1 + 56);
  char v7 = *(char **)(a1 + 120);
  uint64_t v6 = *(char **)(a1 + 128);
  if (v7 != v6)
  {
    uint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = *(void *)&v7[v8];
      if (*(void *)(v9 + 8) == a2) {
        break;
      }
      v8 += 8;
      if (&v7[v8] == v6) {
        goto LABEL_16;
      }
    }
    if (!*(unsigned char *)(v9 + 17) && !*(_DWORD *)(v9 + 24))
    {
      uint64_t v10 = &v7[v8];
      uint64_t v11 = &v7[v8 + 8];
      int64_t v12 = v6 - v11;
      if (v6 != v11) {
        memmove(&v7[v8], v11, v6 - v11);
      }
      *(void *)(a1 + 128) = &v10[v12];
      operator delete();
    }
    if (a3 && *(unsigned char *)(a1 + 144))
    {
      sub_10003AFE8((uint64_t)v14);
      if (qword_1009F8768 != -1) {
        dispatch_once(&qword_1009F8768, &stru_1009AF6D0);
      }
      sub_10060FDE8((uint64_t)off_1009F8760, a2, a3);
      sub_10003AF00((uint64_t)v14);
    }
  }
LABEL_16:
  sub_10003AFE8((uint64_t)v14);
  sub_10046EE00(a1);
  return sub_10003AFB4((uint64_t)v14);
}

void sub_10046F40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10046F420(uint64_t a1, uint64_t a2, int a3, unsigned int a4, int a5)
{
  uint64_t v10 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (a5) {
      uint64_t v11 = "incoming";
    }
    else {
      uint64_t v11 = "outgoing";
    }
    int64_t v12 = sub_1004BC79C(a4);
    sub_100474E18(a2, __p);
    if (v34 >= 0) {
      unint64_t v13 = __p;
    }
    else {
      unint64_t v13 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136446722;
    char v36 = (void *)v11;
    __int16 v37 = 2082;
    int v38 = (void *)v12;
    __int16 v39 = 2082;
    __int16 v40 = v13;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Received %{public}s connection attempt for \"%{public}s\" profile on device %{public}s", buf, 0x20u);
    if (v34 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = qword_100A19E50;
  }
  if (os_signpost_enabled(v10))
  {
    unint64_t v14 = a5 ? "incoming" : "outgoing";
    uint64_t v15 = sub_1004BC79C(a4);
    sub_100474E18(a2, __p);
    int v16 = v34 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446722;
    char v36 = v14;
    __int16 v37 = 2082;
    int v38 = (void *)v15;
    __int16 v39 = 2082;
    __int16 v40 = v16;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "BTSignPost", "Received %{public}s connection attempt for \"%{public}s\" profile on device %{public}s", buf, 0x20u);
    if (v34 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v17 = sub_100035F54();
  int v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 352))(v17) ^ 1;
  if (a4 != 14) {
    LOBYTE(v18) = 1;
  }
  if ((v18 & 1) == 0)
  {
    id v19 = objc_alloc_init((Class)CARConnectionTimeStore);
    long long v20 = +[NSDate date];
    long long v21 = +[CARConnectionEvent eventWithName:CARBluetoothWirelessIAPProfileConnectionAttempt type:1 date:v20 payload:0];

    [v19 syncSendConnectionEvent:v21 completion:&stru_1009AF540];
  }
  v32[0] = 0;
  v32[1] = 0;
  sub_10003AED0((uint64_t)v32, a1 + 56);
  for (uint64_t i = *(uint64_t **)(a1 + 120); ; ++i)
  {
    if (i == *(uint64_t **)(a1 + 128)) {
      operator new();
    }
    uint64_t v23 = *i;
    if (*(void *)(*i + 8) == a2) {
      break;
    }
  }
  long long v24 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v25 = *(unsigned __int8 *)(v23 + 16);
    sub_100474E18(a2, __p);
    long long v26 = "incoming";
    if (!v25) {
      long long v26 = "outgoing";
    }
    uint64_t v27 = (void **)__p[0];
    int v28 = *(unsigned __int8 *)(v23 + 17);
    if (v34 >= 0) {
      uint64_t v27 = __p;
    }
    *(_DWORD *)std::string buf = 136446722;
    char v36 = (void *)v26;
    __int16 v37 = 2082;
    int v38 = v27;
    __int16 v39 = 1024;
    LODWORD(v40) = v28;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Already tracking an %{public}s connection for device %{public}s with %d pending attempt(s)", buf, 0x1Cu);
    if (v34 < 0) {
      operator delete(__p[0]);
    }
  }
  int v29 = *(_DWORD *)(v23 + 20);
  if ((v29 & a3) != 0)
  {
    long long v30 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109120;
      LODWORD(v36) = a3;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Ignoring duplicate connection attempt for service 0x%x", buf, 8u);
    }
  }
  else
  {
    *(_DWORD *)(v23 + 20) = v29 | a3;
    *(unsigned char *)(v23 + 16) = a5;
    *(_DWORD *)uint64_t v23 = 1;
    ++*(unsigned char *)(v23 + 17);
    sub_10048BA7C(a2);
    sub_10003AFE8((uint64_t)v32);
    sub_10046EE00(a1);
  }
  return sub_10003AFB4((uint64_t)v32);
}

void sub_10046F934(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10046F97C(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5)
{
  uint64_t v10 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = sub_1004BC79C(a4);
    sub_100474E18(a2, __p);
    if (v50 >= 0) {
      int64_t v12 = __p;
    }
    else {
      int64_t v12 = *(unsigned char **)__p;
    }
    *(_DWORD *)std::string buf = 136446722;
    *(void *)&uint8_t buf[4] = v11;
    __int16 v52 = 2082;
    int v53 = v12;
    __int16 v54 = 1024;
    int v55 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Received connection result for \"%{public}s\" profile on device %{public}s - result was %d", buf, 0x1Cu);
    if (v50 < 0) {
      operator delete(*(void **)__p);
    }
    uint64_t v10 = qword_100A19E50;
  }
  if (os_signpost_enabled(v10))
  {
    unint64_t v13 = sub_1004BC79C(a4);
    sub_100474E18(a2, __p);
    unint64_t v14 = v50 >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)std::string buf = 136446722;
    *(void *)&uint8_t buf[4] = v13;
    __int16 v52 = 2082;
    int v53 = v14;
    __int16 v54 = 1024;
    int v55 = a5;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "BTSignPost", "Received connection result for \"%{public}s\" profile on device %{public}s - result was %d", buf, 0x1Cu);
    if (v50 < 0) {
      operator delete(*(void **)__p);
    }
  }
  uint64_t v15 = sub_100035F54();
  int v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 352))(v15) ^ 1;
  if (a4 != 14) {
    LOBYTE(v16) = 1;
  }
  if ((v16 & 1) == 0)
  {
    id v17 = objc_alloc_init((Class)CARConnectionTimeStore);
    int v18 = +[NSDate date];
    uint64_t v19 = CARBluetoothWirelessIAPProfileConnectionSuccess;
    uint64_t v45 = CARBluetoothWirelessIAPProfileConnectionSuccess;
    long long v20 = +[NSNumber numberWithInt:a5];
    BOOL v46 = v20;
    long long v21 = +[NSDictionary dictionaryWithObjects:&v46 forKeys:&v45 count:1];
    uint64_t v22 = +[CARConnectionEvent eventWithName:v19 type:1 date:v18 payload:v21];

    [v17 syncSendConnectionEvent:v22 completion:&stru_1009AF560];
  }
  v44[0] = 0;
  v44[1] = 0;
  sub_10003AED0((uint64_t)v44, a1 + 56);
  uint64_t v23 = *(void *)(a1 + 120);
  uint64_t v24 = *(void *)(a1 + 128);
  if (v23 == v24)
  {
LABEL_22:
    if (!a5) {
      operator new();
    }
LABEL_49:
    sub_1004AF8EC();
    operator new();
  }
  uint64_t v25 = -v23;
  while (1)
  {
    uint64_t v26 = *(void *)v23;
    if (*(void *)(*(void *)v23 + 8) == a2) {
      break;
    }
    v23 += 8;
    v25 -= 8;
    if (v23 == v24) {
      goto LABEL_22;
    }
  }
  int v27 = *(_DWORD *)(v26 + 20);
  if ((v27 & a3) != 0)
  {
    *(_DWORD *)(v26 + 20) = v27 & ~a3;
    char v28 = *(unsigned char *)(v26 + 17);
    if (v28)
    {
LABEL_26:
      *(unsigned char *)(v26 + 17) = --v28;
      goto LABEL_33;
    }
    long long v30 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT))
    {
      sub_10046D9CC((int *)v26);
      if (v54 >= 0) {
        int v38 = buf;
      }
      else {
        int v38 = *(unsigned char **)buf;
      }
      *(_DWORD *)std::string __p = 136446210;
      *(void *)&__p[4] = v38;
      _os_log_fault_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_FAULT, "Found mismatch between connection attempts and connection results - dumping connection state:\n%{public}s", __p, 0xCu);
      if (SHIBYTE(v54) < 0) {
        operator delete(*(void **)buf);
      }
      char v28 = *(unsigned char *)(v26 + 17);
      if (v28) {
        goto LABEL_26;
      }
    }
    else
    {
      char v28 = 0;
    }
LABEL_33:
    if (!a5)
    {
      int v32 = *(_DWORD *)(v26 + 20);
      *(_DWORD *)(v26 + 24) |= a3;
      if (v32)
      {
        if (v28) {
          goto LABEL_49;
        }
      }
      else if (!v28)
      {
LABEL_48:
        *(_DWORD *)uint64_t v26 = 2;
        goto LABEL_49;
      }
      char v36 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT))
      {
        int v43 = v32;
        sub_1004D8980(&v43);
        uint64_t v41 = v54 >= 0 ? buf : *(unsigned char **)buf;
        int v42 = *(unsigned __int8 *)(v26 + 17);
        *(_DWORD *)std::string __p = 136446466;
        *(void *)&__p[4] = v41;
        __int16 v48 = 1024;
        int v49 = v42;
        _os_log_fault_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_FAULT, "Found mismatch between pending services(%{public}s) and pending attempts (%d)", __p, 0x12u);
        if (SHIBYTE(v54) < 0) {
          operator delete(*(void **)buf);
        }
      }
      goto LABEL_48;
    }
    int v31 = *(_DWORD *)(v26 + 20);
    if (v31)
    {
      if (v28) {
        goto LABEL_49;
      }
    }
    else if (!v28)
    {
LABEL_42:
      if (!*(_DWORD *)(v26 + 24))
      {
        uint64_t v34 = *(void *)(a1 + 128);
        uint64_t v35 = v34 - (8 - v25);
        if (v34 != 8 - v25) {
          memmove((void *)-v25, (const void *)(8 - v25), v34 - (8 - v25));
        }
        *(void *)(a1 + 128) = v35 - v25;
        operator delete();
      }
      goto LABEL_48;
    }
    long long v33 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT))
    {
      int v43 = v31;
      sub_1004D8980(&v43);
      __int16 v39 = v54 >= 0 ? buf : *(unsigned char **)buf;
      int v40 = *(unsigned __int8 *)(v26 + 17);
      *(_DWORD *)std::string __p = 136446466;
      *(void *)&__p[4] = v39;
      __int16 v48 = 1024;
      int v49 = v40;
      _os_log_fault_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_FAULT, "Found mismatch between pending services(%{public}s) and pending attempts (%d)", __p, 0x12u);
      if (SHIBYTE(v54) < 0) {
        operator delete(*(void **)buf);
      }
    }
    goto LABEL_42;
  }
  int v29 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
    sub_10076BFD8(a3, v29);
  }
  sub_10003AFB4((uint64_t)v44);
  return 0;
}

void sub_10047010C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100470174(uint64_t a1, uint64_t a2, int a3, unsigned int a4, int a5, int a6)
{
  int v32 = a3;
  int64_t v12 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v13 = sub_1004BC79C(a4);
    sub_100474E18(a2, __p);
    if (v31 >= 0) {
      unint64_t v14 = __p;
    }
    else {
      unint64_t v14 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136446978;
    *(void *)uint64_t v35 = v13;
    *(_WORD *)&void v35[8] = 2082;
    char v36 = v14;
    __int16 v37 = 1024;
    int v38 = a5;
    __int16 v39 = 1024;
    int v40 = a6;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Received disconnection result for \"%{public}s\" profile on device %{public}s - result was %d - reason was %d", buf, 0x22u);
    if (v31 < 0) {
      operator delete(__p[0]);
    }
    int64_t v12 = qword_100A19E50;
  }
  if (os_signpost_enabled(v12))
  {
    uint64_t v15 = sub_1004BC79C(a4);
    sub_100474E18(a2, __p);
    int v16 = v31 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446978;
    *(void *)uint64_t v35 = v15;
    *(_WORD *)&void v35[8] = 2082;
    char v36 = v16;
    __int16 v37 = 1024;
    int v38 = a5;
    __int16 v39 = 1024;
    int v40 = a6;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "BTSignPost", "Received disconnection result for \"%{public}s\" profile on device %{public}s - result was %d - reason was %d", buf, 0x22u);
    if (v31 < 0) {
      operator delete(__p[0]);
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  sub_10003AED0((uint64_t)__p, a1 + 56);
  int v18 = *(char **)(a1 + 120);
  id v17 = *(char **)(a1 + 128);
  if (v18 == v17)
  {
LABEL_18:
    if (!a5)
    {
      long long v21 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT))
      {
        sub_1004D8980(&v32);
        sub_10076C050((char *)buf, v33, v21);
      }
      sub_10003AFE8((uint64_t)__p);
      sub_1004AF8EC();
      operator new();
    }
    uint64_t v20 = 0;
LABEL_24:
    BOOL v22 = v20 == 0;
    goto LABEL_25;
  }
  uint64_t v19 = 0;
  while (1)
  {
    uint64_t v20 = *(void *)&v18[v19];
    if (*(void *)(v20 + 8) == a2) {
      break;
    }
    v19 += 8;
    if (&v18[v19] == v17) {
      goto LABEL_18;
    }
  }
  if (a5) {
    goto LABEL_24;
  }
  int v24 = *(_DWORD *)(v20 + 24) & ~a3;
  *(_DWORD *)(v20 + 24) = v24;
  if (!v24 && !*(_DWORD *)(v20 + 20))
  {
    int v27 = &v18[v19];
    char v28 = &v18[v19 + 8];
    int64_t v29 = v17 - v28;
    if (v17 != v28) {
      memmove(&v18[v19], v28, v17 - v28);
    }
    *(void *)(a1 + 128) = &v27[v29];
    operator delete();
  }
  uint64_t v25 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    int v26 = *(_DWORD *)(v20 + 20);
    *(_DWORD *)std::string buf = 67109376;
    *(_DWORD *)uint64_t v35 = v24;
    *(_WORD *)&v35[4] = 1024;
    *(_DWORD *)&v35[6] = v26;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "There is at least one connected (0x%08x) or pending (0x%08x) service left", buf, 0xEu);
  }
  BOOL v22 = 0;
LABEL_25:
  sub_10003AFB4((uint64_t)__p);
  return v22;
}

void sub_10047050C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10047052C(uint64_t a1)
{
  char v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: ----------------- Connection Manager ----------------", (uint8_t *)&buf, 2u);
    char v2 = qword_100A19E50;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 144)) {
      uint64_t v3 = "Yes";
    }
    else {
      uint64_t v3 = "No";
    }
    LODWORD(buf) = 136446210;
    *(void *)((char *)&buf + 4) = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Pairing in progress: %{public}s", (uint8_t *)&buf, 0xCu);
    char v2 = qword_100A19E50;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 145)) {
      uint64_t v4 = "Yes";
    }
    else {
      uint64_t v4 = "No";
    }
    LODWORD(buf) = 136446210;
    *(void *)((char *)&buf + 4) = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Connection in progress: %{public}s", (uint8_t *)&buf, 0xCu);
    char v2 = qword_100A19E50;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Connections:", (uint8_t *)&buf, 2u);
  }
  long long buf = 0uLL;
  uint64_t v25 = 0;
  v23[0] = 0;
  v23[1] = 0;
  sub_10003AED0((uint64_t)v23, a1 + 56);
  uint64_t v5 = *(_OWORD ***)(a1 + 120);
  uint64_t v6 = *(_OWORD ***)(a1 + 128);
  if (v5 != v6)
  {
    char v7 = (char *)*((void *)&buf + 1);
    do
    {
      uint64_t v8 = *v5;
      if (v7 >= v25)
      {
        uint64_t v10 = (char *)buf;
        uint64_t v11 = (uint64_t)&v7[-buf] >> 5;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 59) {
          abort();
        }
        uint64_t v13 = (uint64_t)&v25[-buf];
        if ((uint64_t)&v25[-buf] >> 4 > v12) {
          unint64_t v12 = v13 >> 4;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v14 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          uint64_t v15 = (char *)sub_1002B6234((uint64_t)&v25, v14);
          char v7 = (char *)*((void *)&buf + 1);
          uint64_t v10 = (char *)buf;
        }
        else
        {
          uint64_t v15 = 0;
        }
        long long v16 = v8[1];
        id v17 = &v15[32 * v11];
        *(_OWORD *)id v17 = *v8;
        *((_OWORD *)v17 + 1) = v16;
        if (v7 == v10)
        {
          uint64_t v19 = &v15[32 * v11];
        }
        else
        {
          int v18 = &v15[32 * v11];
          do
          {
            uint64_t v19 = v18 - 32;
            long long v20 = *((_OWORD *)v7 - 1);
            *((_OWORD *)v18 - 2) = *((_OWORD *)v7 - 2);
            *((_OWORD *)v18 - 1) = v20;
            v7 -= 32;
            v18 -= 32;
          }
          while (v7 != v10);
        }
        char v7 = v17 + 32;
        *(void *)&long long buf = v19;
        *((void *)&buf + 1) = v17 + 32;
        uint64_t v25 = &v15[32 * v14];
        if (v10) {
          operator delete(v10);
        }
      }
      else
      {
        long long v9 = v8[1];
        *(_OWORD *)char v7 = *v8;
        *((_OWORD *)v7 + 1) = v9;
        v7 += 32;
      }
      *((void *)&buf + 1) = v7;
      ++v5;
    }
    while (v5 != v6);
  }
  sub_10003AFB4((uint64_t)v23);
  BOOL v22 = (int *)*((void *)&buf + 1);
  long long v21 = (int *)buf;
  if ((void)buf != *((void *)&buf + 1))
  {
    do
    {
      sub_10046DD50(v21);
      v21 += 8;
    }
    while (v21 != v22);
    long long v21 = (int *)buf;
  }
  if (v21)
  {
    *((void *)&buf + 1) = v21;
    operator delete(v21);
  }
}

void sub_10047082C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100470860(os_unfair_lock_s *a1, void *a2)
{
  uint64_t v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }
  if (v4)
  {
    uint64_t v6 = v4;
    operator delete(v4);
  }
}

void sub_100470904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10047092C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_10047095C(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  uint64_t v6 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a2, &__p);
    uint64_t v7 = v18 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&unsigned char buf[14] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Sending 'device connected' notification for device %{public}s with result %d", buf, 0x12u);
    if (SHIBYTE(v18) < 0) {
      operator delete(__p);
    }
  }
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  void v14[2] = sub_100470C08;
  v14[3] = &unk_1009AF5A0;
  void v14[4] = a2;
  int v15 = a3;
  sub_100470860(a1 + 6, v14);
  std::string __p = 0;
  id v17 = 0;
  uint64_t v18 = 0;
  sub_10046E85C((uint64_t)a1, &__p);
  long long v9 = __p;
  uint64_t v8 = v17;
  uint64_t v10 = sub_1004AF8EC();
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  _DWORD v12[2] = sub_100470C3C;
  void v12[3] = &unk_100998300;
  int v13 = (unint64_t)(v8 - v9) >> 3;
  sub_100013018(v10, v12);
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009AF650);
  }
  sub_1004E05D4((uint64_t)off_1009F8068, 0);
  if (!a3)
  {
    sub_100475F84(a2, (uint64_t)buf);
    if ((v20 & 0x80u) == 0) {
      uint64_t v11 = v20;
    }
    else {
      uint64_t v11 = *(void *)&buf[8];
    }
    if ((char)v20 < 0)
    {
      operator delete(*(void **)buf);
      if (v11) {
        goto LABEL_20;
      }
    }
    else if (v11)
    {
      goto LABEL_20;
    }
    if (qword_1009F8398 != -1) {
      dispatch_once(&qword_1009F8398, &stru_1009AF710);
    }
    sub_1005060D4((uint64_t)off_1009F8390);
  }
LABEL_20:
  if (__p)
  {
    id v17 = __p;
    operator delete(__p);
  }
}

void sub_100470BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100470C08(uint64_t a1, uint64_t (***a2)(void, void, void))
{
  return (**a2)(a2, *(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void sub_100470C3C(uint64_t a1)
{
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_1009AF6F0);
  }
  char v2 = (os_unfair_lock_s *)off_1009F8150;
  uint32_t v3 = *(_DWORD *)(a1 + 32);

  sub_1004FA528(v2, v3);
}

void sub_100470CA0(os_unfair_lock_s *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v8 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a2, &__p);
    long long v9 = v20 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)long long buf = 136446466;
    BOOL v22 = v9;
    __int16 v23 = 1024;
    int v24 = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Sending 'device disconnected' notification for device %{public}s with result %d", buf, 0x12u);
    if (SHIBYTE(v20) < 0) {
      operator delete(__p);
    }
  }
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  void v15[2] = sub_100470EA0;
  void v15[3] = &unk_1009AF5C0;
  v15[4] = a2;
  int v16 = a3;
  int v17 = a4;
  sub_100470860(a1 + 6, v15);
  std::string __p = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  sub_10046E85C((uint64_t)a1, &__p);
  uint64_t v11 = __p;
  uint64_t v10 = v19;
  uint64_t v12 = sub_1004AF8EC();
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_100470ED4;
  void v13[3] = &unk_100998300;
  int v14 = (unint64_t)(v10 - v11) >> 3;
  sub_100013018(v12, v13);
  if (__p)
  {
    uint64_t v19 = __p;
    operator delete(__p);
  }
}

void sub_100470E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100470EA0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void, void))(*(void *)a2 + 8))(a2, *(void *)(a1 + 32), *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44));
}

void sub_100470ED4(uint64_t a1)
{
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_1009AF6F0);
  }
  char v2 = (os_unfair_lock_s *)off_1009F8150;
  uint32_t v3 = *(_DWORD *)(a1 + 32);

  sub_1004FA528(v2, v3);
}

void sub_100470F44()
{
}

void sub_100470F58(uint64_t a1)
{
  if (qword_1009F87A8 != -1) {
    dispatch_once(&qword_1009F87A8, &stru_1009AF6B0);
  }
  char v2 = (os_unfair_lock_s *)off_1009F87A0;
  uint64_t v3 = *(void *)(a1 + 16);
  int v4 = *(_DWORD *)(a1 + 24);

  sub_10047095C(v2, v3, v4);
}

void sub_100470FC4()
{
}

void sub_100470FD8(uint64_t a1)
{
  if (qword_1009F87A8 != -1) {
    dispatch_once(&qword_1009F87A8, &stru_1009AF6B0);
  }
  char v2 = (os_unfair_lock_s *)off_1009F87A0;
  uint64_t v3 = *(void *)(a1 + 16);
  int v4 = *(_DWORD *)(a1 + 24);
  int v5 = *(_DWORD *)(a1 + 28);

  sub_100470CA0(v2, v3, v4, v5);
}

void sub_100471048(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  int v4 = *(char **)(a1 + 8);
  int v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    uint64_t v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  uint64_t v6 = *(char **)(a1 + 8);
  while (*(void *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      uint64_t v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      uint64_t v7 = a2;
      sub_100471118(a1 + 8, v6, (char *)&v7);
      sub_100061554(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(void, uint64_t))(a1 + 32))(*(void *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_100471118(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  int v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    int v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      uint64_t v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v20 = &v19[8 * v16];
    std::string __p = v19;
    int v27 = v20;
    char v28 = v20;
    int64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        __int16 v23 = (char *)sub_1000405F8(v8, v22);
        uint64_t v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        int v27 = v20;
        int64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        int v27 = v20;
      }
    }
    *(void *)uint64_t v20 = *(void *)v3;
    char v28 = v20 + 8;
    int v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__std::string src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    long long v9 = __src + 8;
    uint64_t v10 = v6 - 8;
    uint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)int v4 = *(void *)v3;
  }
  return v4;
}

void sub_100471320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100471358(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  int v5 = *(char **)(a1 + 8);
  int v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        int v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 != v4)
  {
    int64_t v6 = v4 - (v5 + 8);
    if (v4 != v5 + 8) {
      memmove(v5, v5 + 8, v4 - (v5 + 8));
    }
    *(void *)(a1 + 16) = &v5[v6];
    sub_100061554(a1 + 8);
    if (*(void *)(a1 + 8) == *(void *)(a1 + 16)) {
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 32) + 8))(*(void *)(a1 + 32), a1);
    }
  }

  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_100471430(id a1)
{
}

void sub_100471474()
{
}

void sub_100471498(id a1)
{
}

void sub_1004714DC()
{
}

void sub_100471500(id a1)
{
}

void sub_100471544()
{
}

void sub_100471568(id a1)
{
}

void sub_1004715AC()
{
}

void sub_1004715D0(id a1)
{
}

void sub_100471614()
{
}

void sub_100471638(id a1)
{
}

void sub_1004717C8()
{
}

void sub_1004717EC(id a1)
{
}

void sub_100471830()
{
}

uint64_t sub_100471854(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_100052DA8(a1);
  sub_100052DA8(v4 + 64);
  int v5 = *a2;
  __int16 v6 = *((_WORD *)a2 + 2);
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 336) = 0;
  *(_WORD *)(a1 + 132) = v6;
  *(_DWORD *)(a1 + 128) = v5;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 292) = 0u;
  *(void *)(a1 + 328) = a1 + 336;
  *(void *)(a1 + 420) = 0;
  *(_DWORD *)(a1 + 368) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(void *)(a1 + 408) = 0;
  sub_100052DA8(a1 + 432);
  *(void *)(a1 + 496) = &off_100998428;
  *(void *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 528) = 0;
  *(unsigned char *)(a1 + 532) = 0;
  *(_DWORD *)(a1 + 536) = 0;
  *(unsigned char *)(a1 + 540) = 0;
  *(_DWORD *)(a1 + 544) = 0;
  *(unsigned char *)(a1 + 548) = 0;
  *(_DWORD *)(a1 + 552) = 0;
  *(unsigned char *)(a1 + 556) = 0;
  *(_DWORD *)(a1 + 560) = 0;
  *(unsigned char *)(a1 + 564) = 0;
  *(void *)(a1 + 568) = 0;
  *(unsigned char *)(a1 + 578) = 0;
  *(_OWORD *)(a1 + 592) = 0u;
  *(void *)(a1 + 584) = a1 + 592;
  *(_DWORD *)(a1 + 608) = 0;
  *(void *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_WORD *)(a1 + 640) = 256;
  *(_WORD *)(a1 + 650) = 0;
  *(_DWORD *)(a1 + 642) = 0;
  *(_DWORD *)(a1 + 645) = 0;
  *(unsigned char *)(a1 + 652) = 1;
  *(_DWORD *)(a1 + 716) = 0;
  *(_OWORD *)(a1 + 700) = 0u;
  *(_DWORD *)(a1 + 670) = 0;
  *(_OWORD *)(a1 + 654) = 0u;
  *(_OWORD *)(a1 + 676) = 0u;
  *(_WORD *)(a1 + 692) = 0;
  *(_OWORD *)(a1 + 740) = 0u;
  *(_DWORD *)(a1 + 764) = 0;
  *(void *)(a1 + 756) = 0;
  *(_DWORD *)(a1 + 768) = 4;
  *(void *)(a1 + 788) = 0xFFFF00000000;
  *(void *)(a1 + 776) = 0;
  *(_DWORD *)(a1 + 783) = 0;
  *(unsigned char *)(a1 + 796) = 1;
  *(void *)(a1 + 800) = 0;
  *(_WORD *)(a1 + 816) = 0;
  *(unsigned char *)(a1 + 841) = 0;
  *(_DWORD *)(a1 + 852) = 0;
  *(unsigned char *)(a1 + 990) = 0;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(unsigned char *)(a1 + 992) = 1;
  *(_DWORD *)(a1 + 994) = -65536;
  *(_DWORD *)(a1 + 1000) = 0;
  *(unsigned char *)(a1 + 1004) = 0;
  *(void *)(a1 + 1008) = &off_100998428;
  *(void *)(a1 + 1016) = 0;
  *(void *)(a1 + 1096) = 0;
  *(_WORD *)(a1 + 1120) = 0;
  *(unsigned char *)(a1 + 1122) = 0;
  *(void *)(a1 + 1144) = 0;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(void *)(a1 + 1240) = 0;
  *(_DWORD *)(a1 + 1248) = 0;
  *(unsigned char *)(a1 + 1234) = 0;
  *(void *)(a1 + 1226) = 0;
  *(_WORD *)(a1 + 1092) = 0;
  *(_OWORD *)(a1 + 1068) = 0u;
  *(void *)(a1 + 1084) = 0;
  *(_OWORD *)(a1 + 1156) = 0u;
  *(unsigned char *)(a1 + 1224) = 0;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  sub_10004191C((void *)(a1 + 1256), "");
  *(void *)(a1 + 1288) = 0;
  *(void *)(a1 + 1304) = 0;
  *(unsigned char *)(a1 + 1316) = 0;
  *(_DWORD *)(a1 + 1320) = 0;
  *(unsigned char *)(a1 + 1324) = 0;
  *(_DWORD *)(a1 + 1328) = 0;
  *(_WORD *)(a1 + 1332) = 0;
  *(_DWORD *)(a1 + 1356) = 0;
  *(unsigned char *)(a1 + 1360) = 0;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_DWORD *)(a1 + 1351) = 0;
  *(_DWORD *)(a1 + 1372) = 0x10000;
  *(void *)(a1 + 1364) = 0;
  *(void *)(a1 + 1376) = 0;
  *(unsigned char *)(a1 + 1384) = 0;
  *(_DWORD *)(a1 + 1420) = 0;
  *(void *)(a1 + 1424) = 0;
  *(_DWORD *)(a1 + 1432) = 512;
  *(unsigned char *)(a1 + 1436) = 0;
  *(unsigned char *)(a1 + 1464) = 0;
  *(void *)(a1 + 1456) = 0;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(void *)(a1 + 1472) = 0xFFFFFFFFLL;
  sub_10004191C((void *)(a1 + 1480), "");
  *(_WORD *)(a1 + 1504) = 0;
  *(_DWORD *)(a1 + 1508) = 0;
  *(_DWORD *)(a1 + 544) = 0;
  *(_DWORD *)(a1 + 536) = 0;
  *(_DWORD *)(a1 + 552) = 0;
  *(_DWORD *)(a1 + 528) = 0;
  *(_DWORD *)(a1 + 560) = 0;
  *(void *)(a1 + 808) = 0x600000003;
  *(_OWORD *)(a1 + 820) = xmmword_1007BEC70;
  *(_DWORD *)(a1 + 836) = 0;
  *(unsigned char *)(a1 + 840) = 2;
  *(unsigned char *)(a1 + 842) = 0;
  *(_DWORD *)(a1 + 844) = 80;
  *(unsigned char *)(a1 + 848) = 0;
  *(unsigned char *)(a1 + 856) = 0;
  *(void *)(a1 + 872) = 0;
  *(_DWORD *)(a1 + 880) = 0;
  *(unsigned char *)(a1 + 1152) = 0;
  *(unsigned char *)(a1 + 960) = 0;
  *(_DWORD *)(a1 + 964) = 0;
  *(_DWORD *)(a1 + 972) = 0;
  *(unsigned char *)(a1 + 976) = 0;
  *(unsigned char *)(a1 + 991) = 0;
  *(unsigned char *)(a1 + 993) = 0;
  *(void *)(a1 + 732) = 0;
  *(_OWORD *)(a1 + 700) = 0u;
  *(_OWORD *)(a1 + 716) = 0u;
  *(void *)(a1 + 860) = 0;
  *(unsigned char *)(a1 + 868) = 0;
  *(void *)(a1 + 904) = 0;
  *(_OWORD *)(a1 + 888) = 0u;
  *(void *)(a1 + 980) = 0;
  *(_WORD *)(a1 + 988) = 0;
  uint64_t v7 = sub_100017768();
  sub_10004191C(v13, "Device");
  sub_10004191C(__p, "enableSDPPrint");
  (*(void (**)(uint64_t, void **, void **, uint64_t))(*(void *)v7 + 72))(v7, v13, __p, a1 + 991);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  uint64_t v8 = sub_100017768();
  sub_10004191C(v13, "Device");
  sub_10004191C(__p, "wipeIDCache");
  (*(void (**)(uint64_t, void **, void **, uint64_t))(*(void *)v8 + 72))(v8, v13, __p, a1 + 993);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  *(unsigned char *)(a1 + 1296) = 0;
  *(void *)(a1 + 1280) = -1;
  long long v9 = *(void **)(a1 + 1288);
  *(void *)(a1 + 1288) = 0;

  *(_OWORD *)(a1 + 1388) = 0u;
  *(_OWORD *)(a1 + 1404) = 0u;
  sub_100471F00(a1);
  *(void *)(a1 + 1448) = *(void *)(a1 + 1440);
  *(void *)(a1 + 1512) = 0;
  return a1;
}

void sub_100471D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (*(char *)(v24 + 1503) < 0) {
    operator delete(*v28);
  }
  char v31 = *(void **)(v24 + 1440);
  if (v31)
  {
    *(void *)(v24 + 1448) = v31;
    operator delete(v31);
  }

  if (*(char *)(v24 + 1279) < 0) {
    operator delete(*v27);
  }
  if (*(char *)(v24 + 1223) < 0) {
    operator delete(*(void **)(v24 + 1200));
  }
  sub_100051568((void ***)&a19);
  int v32 = *v25;
  if (*v25)
  {
    *(void *)(v24 + 1136) = v32;
    operator delete(v32);
  }
  *(void *)(v24 + 1008) = v26;
  long long v33 = *(atomic_uint **)(v24 + 1016);
  if (v33) {
    sub_1000368F4(v33);
  }
  uint64_t v34 = (void **)(v24 + 912);
  uint64_t v35 = *(void **)(v24 + 936);
  if (v35)
  {
    *(void *)(v24 + 944) = v35;
    operator delete(v35);
  }
  char v36 = *v34;
  if (*v34)
  {
    *(void *)(v24 + 920) = v36;
    operator delete(v36);
  }
  __int16 v37 = *(void **)(v24 + 744);
  if (v37)
  {
    *(void *)(v24 + 752) = v37;
    operator delete(v37);
  }
  sub_10048E664((void ***)&a19);
  sub_1002CBCC8(v24 + 584, *(void **)(v24 + 592));
  *(void *)(v24 + 496) = a10;
  int v38 = *(atomic_uint **)(v24 + 504);
  if (v38) {
    sub_1000368F4(v38);
  }
  sub_100052DA4(a11);
  if (*(char *)(v24 + 415) < 0) {
    operator delete(*(void **)(v24 + 392));
  }
  sub_1000486F0(v29 - 8, *(void **)(v24 + 336));
  if (*(char *)(v24 + 303) < 0) {
    operator delete(*(void **)(v24 + 280));
  }
  if (*(char *)(v24 + 263) < 0) {
    operator delete(*(void **)(v24 + 240));
  }
  if (*(char *)(v24 + 223) < 0) {
    operator delete(*(void **)(v24 + 200));
  }
  sub_100052DA4(a12);
  sub_100052DA4(v24);
  _Unwind_Resume(a1);
}

uint64_t sub_100471F00(uint64_t a1)
{
  v301[0] = 0;
  v301[1] = 0;
  sub_10003AED0((uint64_t)v301, a1);
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF778);
  }
  if (sub_1004AB1F0((uint64_t)off_1009F7EF8))
  {
    if (qword_1009F8158 != -1) {
      dispatch_once(&qword_1009F8158, &stru_1009AF798);
    }
    int v2 = sub_1004FA2C8((uint64_t)off_1009F8150);
    uint64_t v3 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a1, __p);
      uint64_t v4 = (SBYTE7(__p[1]) & 0x80u) == 0 ? __p : *(_OWORD **)&__p[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Read device %{public}s settings", (uint8_t *)&buf, 0xCu);
      if (SBYTE7(__p[1]) < 0) {
        operator delete(*(void **)&__p[0]);
      }
    }
    if ((v2 & 1) != 0 || *(unsigned char *)(a1 + 993))
    {
      *(_WORD *)(a1 + 740) = 0;
      int v5 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = *(unsigned __int8 *)(a1 + 993);
        LODWORD(__p[0]) = 67109376;
        DWORD1(__p[0]) = v2;
        WORD4(__p[0]) = 1024;
        *(_DWORD *)((char *)__p + 10) = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Identification - wiping ID cache due to build version update %d, override %d", (uint8_t *)__p, 0xEu);
      }
      uint64_t v7 = sub_1003708B0();
      if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)v7 + 56))(v7, a1, 0)
        && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
      {
        sub_10076C12C();
      }
      uint64_t v8 = sub_1003708B0();
      if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)v8 + 72))(v8, a1, 0)
        && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
      {
        sub_10076C0F8();
      }
    }
    *(void *)&__p[0] = 0;
    sub_100026C30((uint64_t)__p);
    uint64_t v9 = SLODWORD(__p[0]);
    uint64_t v10 = SWORD2(__p[0]);
    memset(&buf, 0, sizeof(buf));
    uint64_t v11 = sub_1003708B0();
    int v12 = (*(uint64_t (**)(uint64_t, uint64_t, std::string *))(*(void *)v11 + 32))(v11, a1, &buf);
    if (v12)
    {
      if (!sub_100040630((unsigned __int8 *)a1)) {
        goto LABEL_55;
      }
      if (IsAppleInternalBuild())
      {
        uint64_t v325 = 0;
        long long v323 = 0u;
        long long v324 = 0u;
        long long v321 = 0u;
        long long v322 = 0u;
        long long v319 = 0u;
        long long v320 = 0u;
        long long v317 = 0u;
        long long v318 = 0u;
        long long v315 = 0u;
        long long v316 = 0u;
        long long v313 = 0u;
        long long v314 = 0u;
        long long v311 = 0u;
        long long v312 = 0u;
        memset(__p, 0, sizeof(__p));
        sub_10004C67C((uint64_t)__p);
        uint64_t v13 = sub_10003AB28((uint64_t)&__p[1]);
        std::to_string(&__str, v12);
        uint64_t v14 = sub_10003AB28(v13);
        uint64_t v15 = sub_10003AB28(v14);
        uint64_t v16 = (const char *)&v297;
        sub_1004A82EC((unsigned __int8 *)(a1 + 128), &v297);
        if (v299 < 0) {
          uint64_t v16 = (const char *)v297;
        }
        strlen(v16);
        uint64_t v17 = sub_10003AB28(v15);
        uint64_t v18 = sub_10003AB28(v17);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        strlen((const char *)p_buf);
        sub_10003AB28(v18);
        if (SHIBYTE(v299) < 0) {
          operator delete(v297);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        std::stringbuf::str();
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_str = &__str;
        }
        else {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        sub_10011631C((const char *)p_str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        *(void *)((char *)__p
        *(void *)&__p[1] = v21;
        if (SHIBYTE(v314) < 0) {
          operator delete(*((void **)&v313 + 1));
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        std::ios::~ios();
      }
      else
      {
        uint64_t v25 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT))
        {
          sub_1004A82EC((unsigned __int8 *)(a1 + 128), &__str);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v224 = &__str;
          }
          else {
            v224 = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          v225 = &buf;
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            v225 = (std::string *)buf.__r_.__value_.__r.__words[0];
          }
          LODWORD(__p[0]) = 67109891;
          DWORD1(__p[0]) = v12;
          WORD4(__p[0]) = 2082;
          *(void *)((char *)__p + 10) = v224;
          WORD1(__p[1]) = 2160;
          *(void *)((char *)&__p[1] + 4) = 1752392040;
          WORD6(__p[1]) = 2081;
          *(void *)((char *)&__p[1] + 14) = v225;
          _os_log_fault_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "Read name result failure = %d, device address = %{public}s, int64_t value = %{private, mask.hash}s", (uint8_t *)__p, 0x26u);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
        }
      }
    }
    else
    {
      unint64_t v22 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        sub_1004A82EC((unsigned __int8 *)(a1 + 128), &__str);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          __int16 v23 = &__str;
        }
        else {
          __int16 v23 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        uint64_t v24 = &buf;
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v24 = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        LODWORD(__p[0]) = 136446723;
        *(void *)((char *)__p + 4) = v23;
        WORD6(__p[0]) = 2160;
        *(void *)((char *)__p + 14) = 1752392040;
        WORD3(__p[1]) = 2081;
        *((void *)&__p[1] + 1) = v24;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Read name result success, device address = %{public}s, int64_t value = %{private, mask.hash}s", (uint8_t *)__p, 0x20u);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
      }
      std::string::operator=((std::string *)(a1 + 240), &buf);
      *(void *)(a1 + 264) = v9;
      *(void *)(a1 + 272) = v10;
      *(unsigned char *)(a1 + 1369) = 1;
    }
    uint64_t v26 = sub_100050530();
    (*(void (**)(uint64_t, BOOL))(*(void *)v26 + 432))(v26, v12 == 0);
LABEL_55:
    memset(&__str, 0, sizeof(__str));
    uint64_t v27 = sub_1003708B0();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, std::string *))(*(void *)v27 + 208))(v27, a1, &__str)) {
      std::string::operator=((std::string *)(a1 + 280), &__str);
    }
    uint64_t v28 = sub_1003708B0();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, std::string *))(*(void *)v28 + 224))(v28, a1, &buf))
    {
      std::string::operator=((std::string *)(a1 + 200), &buf);
      *(void *)(a1 + 224) = v9;
      *(void *)(a1 + 232) = v10;
    }
    int v296 = 0;
    uint64_t v29 = sub_1003708B0();
    int v30 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)v29 + 256))(v29, a1, &v296);
    if (!v30)
    {
      *(_DWORD *)(a1 + 304) = v296;
      *(void *)(a1 + 312) = v9;
      *(void *)(a1 + 320) = v10;
      if (qword_1009F7F00 != -1) {
        dispatch_once(&qword_1009F7F00, &stru_1009AF778);
      }
      *(_DWORD *)(a1 + 176) = sub_1004AAEA4((uint64_t)off_1009F7EF8, (int *)(a1 + 304), a1);
      *(void *)(a1 + 184) = v9;
      *(void *)(a1 + 192) = v10;
    }
    char v31 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p[0]) = 67109376;
      DWORD1(__p[0]) = v30;
      WORD4(__p[0]) = 1024;
      *(_DWORD *)((char *)__p + 10) = v296;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Read classOfDevice result %d, int64_t value = 0x%x", (uint8_t *)__p, 0xEu);
    }
    v298 = 0;
    uint64_t v299 = 0;
    v297 = &v298;
    uint64_t v32 = sub_1003708B0();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, void **))(*(void *)v32 + 240))(v32, a1, &v297))
    {
      if ((void **)(a1 + 328) != &v297) {
        sub_10048E97C((uint64_t **)(a1 + 328), v297, &v298);
      }
      *(void *)(a1 + 352) = v9;
      *(void *)(a1 + 360) = v10;
    }
    *(_WORD *)(a1 + 1068) = 0;
    *(unsigned char *)(a1 + 1071) = 0;
    *(_DWORD *)(a1 + 1088) = 0;
    *(void *)(a1 + 1096) = 0;
    uint64_t v33 = sub_1003708B0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)v33 + 1464))(v33, a1);
    int v295 = 0;
    uint64_t v34 = sub_1003708B0();
    int v35 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)v34 + 1496))(v34, a1, &v295);
    char v36 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      int v37 = v295;
      sub_100474E18(a1, &v308);
      int v38 = v309 >= 0 ? &v308 : (long long *)v308;
      LODWORD(__p[0]) = 67109634;
      DWORD1(__p[0]) = v35;
      WORD4(__p[0]) = 1024;
      *(_DWORD *)((char *)__p + 10) = v37;
      HIWORD(__p[0]) = 2082;
      *(void *)&__p[1] = v38;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "readGAPA result %d, int64_t value = 0x%x for %{public}s", (uint8_t *)__p, 0x18u);
      if (SHIBYTE(v309) < 0) {
        operator delete((void *)v308);
      }
    }
    int v39 = v295;
    if (v35) {
      int v39 = 0;
    }
    *(_DWORD *)(a1 + 572) = v39;
    uint64_t v40 = sub_1003708B0();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v40 + 288))(v40, a1, a1 + 584))
    {
      if (qword_1009FB7C8 != -1) {
        dispatch_once(&qword_1009FB7C8, &stru_1009AF7B8);
      }
      sub_100550244((uint64_t)off_1009FB7C0, (_WORD *)a1);
      sub_10003AFE8((uint64_t)v301);
      if (qword_1009F7F00 != -1) {
        dispatch_once(&qword_1009F7F00, &stru_1009AF778);
      }
      sub_1004AA04C((os_unfair_lock_s *)off_1009F7EF8, a1, 4);
      sub_10003AF00((uint64_t)v301);
    }
    unsigned int v294 = 0;
    uint64_t v41 = sub_1003708B0();
    int v42 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(*(void *)v41 + 304))(v41, a1, &v294);
    if (v42)
    {
      char v44 = 0;
      unsigned int v45 = 0;
      v43.i64[0] = 0x100010000;
    }
    else
    {
      unsigned int v45 = v294;
      char v44 = v294 & 1;
      v43.i64[0] = *(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(v294) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL) & 0xFF01FF01FF01FF01;
    }
    *(unsigned char *)(a1 + 642) = v44;
    *(_DWORD *)(a1 + 643) = vmovn_s16(v43).u32[0];
    *(_DWORD *)(a1 + 1328) = v45;
    BOOL v46 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p[0]) = 67109376;
      DWORD1(__p[0]) = v42;
      WORD4(__p[0]) = 1024;
      *(_DWORD *)((char *)__p + 10) = v294;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "Read PhonebookSyncSettings result %d, settings 0x%x", (uint8_t *)__p, 0xEu);
    }
    char v293 = 0;
    uint64_t v47 = sub_1003708B0();
    int v48 = (*(uint64_t (**)(uint64_t, uint64_t, char *))(*(void *)v47 + 416))(v47, a1, &v293);
    char v49 = v293;
    if (v48) {
      char v49 = 0;
    }
    *(unsigned char *)(a1 + 647) = v49;
    unsigned __int16 v292 = 0;
    uint64_t v50 = sub_1003708B0();
    int v51 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int16 *))(*(void *)v50 + 432))(v50, a1, &v292);
    if (v51) {
      unsigned __int16 v52 = 0;
    }
    else {
      unsigned __int16 v52 = v292;
    }
    *(_WORD *)(a1 + 654) = v52;
    int v53 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p[0]) = 67109376;
      DWORD1(__p[0]) = v51;
      WORD4(__p[0]) = 1024;
      *(_DWORD *)((char *)__p + 10) = v52;
      _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "Read lastAVRCPVersion result %d, version %d", (uint8_t *)__p, 0xEu);
    }
    __int16 v291 = 0;
    uint64_t v54 = sub_1003708B0();
    int v55 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(void *)v54 + 448))(v54, a1, &v291);
    __int16 v56 = v291;
    if (v55) {
      __int16 v56 = 0;
    }
    *(_WORD *)(a1 + 656) = v56;
    __int16 v290 = 0;
    uint64_t v57 = sub_1003708B0();
    int v58 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(void *)v57 + 464))(v57, a1, &v290);
    __int16 v59 = v290;
    if (v58) {
      __int16 v59 = 0;
    }
    *(_WORD *)(a1 + 658) = v59;
    __int16 v289 = 0;
    uint64_t v60 = sub_1003708B0();
    int v61 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(void *)v60 + 480))(v60, a1, &v289);
    __int16 v62 = v289;
    if (v61) {
      __int16 v62 = 0;
    }
    *(_WORD *)(a1 + 660) = v62;
    __int16 v288 = 0;
    uint64_t v63 = sub_1003708B0();
    int v64 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(void *)v63 + 496))(v63, a1, &v288);
    __int16 v65 = v288;
    if (v64) {
      __int16 v65 = 0;
    }
    *(_WORD *)(a1 + 662) = v65;
    __int16 v287 = 0;
    uint64_t v66 = sub_1003708B0();
    int v67 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(void *)v66 + 512))(v66, a1, &v287);
    __int16 v68 = v287;
    if (v67) {
      __int16 v68 = 0;
    }
    *(_WORD *)(a1 + 664) = v68;
    __int16 v286 = 0;
    uint64_t v69 = sub_1003708B0();
    int v70 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(void *)v69 + 528))(v69, a1, &v286);
    __int16 v71 = v286;
    if (v70) {
      __int16 v71 = 0;
    }
    *(_WORD *)(a1 + 666) = v71;
    __int16 v285 = 0;
    uint64_t v72 = sub_1003708B0();
    int v73 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(void *)v72 + 544))(v72, a1, &v285);
    __int16 v74 = v285;
    if (v73) {
      __int16 v74 = 0;
    }
    *(_WORD *)(a1 + 668) = v74;
    __int16 v284 = 0;
    uint64_t v75 = sub_1003708B0();
    int v76 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(void *)v75 + 560))(v75, a1, &v284);
    __int16 v77 = v284;
    if (v76) {
      __int16 v77 = 0;
    }
    *(_WORD *)(a1 + 670) = v77;
    __int16 v283 = 0;
    uint64_t v78 = sub_1003708B0();
    int v79 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(void *)v78 + 576))(v78, a1, &v283);
    __int16 v80 = v283;
    if (v79) {
      __int16 v80 = 0;
    }
    *(_WORD *)(a1 + 672) = v80;
    __int16 v282 = 0;
    uint64_t v81 = sub_1003708B0();
    int v82 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(void *)v81 + 592))(v81, a1, &v282);
    __int16 v83 = v282;
    if (v82) {
      __int16 v83 = 0;
    }
    *(_WORD *)(a1 + 674) = v83;
    __int16 v281 = 0;
    uint64_t v84 = sub_1003708B0();
    int v85 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(void *)v84 + 608))(v84, a1, &v281);
    __int16 v86 = v281;
    if (v85) {
      __int16 v86 = 0;
    }
    *(_WORD *)(a1 + 676) = v86;
    __int16 v280 = 0;
    uint64_t v87 = sub_1003708B0();
    int v88 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(void *)v87 + 624))(v87, a1, &v280);
    __int16 v89 = v280;
    if (v88) {
      __int16 v89 = 0;
    }
    *(_WORD *)(a1 + 678) = v89;
    __int16 v279 = 0;
    uint64_t v90 = sub_1003708B0();
    int v91 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(void *)v90 + 640))(v90, a1, &v279);
    __int16 v92 = v279;
    if (v91) {
      __int16 v92 = 0;
    }
    *(_WORD *)(a1 + 680) = v92;
    __int16 v278 = 0;
    uint64_t v93 = sub_1003708B0();
    int v94 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(void *)v93 + 656))(v93, a1, &v278);
    __int16 v95 = v278;
    if (v94) {
      __int16 v95 = 0;
    }
    *(_WORD *)(a1 + 682) = v95;
    __int16 v277 = 0;
    uint64_t v96 = sub_1003708B0();
    int v97 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(void *)v96 + 672))(v96, a1, &v277);
    __int16 v98 = v277;
    if (v97) {
      __int16 v98 = 0;
    }
    *(_WORD *)(a1 + 684) = v98;
    __int16 v276 = 0;
    uint64_t v99 = sub_1003708B0();
    int v100 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(void *)v99 + 688))(v99, a1, &v276);
    __int16 v101 = v276;
    if (v100) {
      __int16 v101 = 0;
    }
    *(_WORD *)(a1 + 686) = v101;
    __int16 v275 = 0;
    uint64_t v102 = sub_1003708B0();
    int v103 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(void *)v102 + 704))(v102, a1, &v275);
    __int16 v104 = v275;
    if (v103) {
      __int16 v104 = 0;
    }
    *(_WORD *)(a1 + 688) = v104;
    __int16 v274 = 0;
    uint64_t v105 = sub_1003708B0();
    int v106 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(void *)v105 + 720))(v105, a1, &v274);
    __int16 v107 = v274;
    if (v106) {
      __int16 v107 = 0;
    }
    *(_WORD *)(a1 + 690) = v107;
    __int16 v273 = 0;
    uint64_t v108 = sub_1003708B0();
    int v109 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(void *)v108 + 736))(v108, a1, &v273);
    __int16 v110 = v273;
    if (v109) {
      __int16 v110 = 0;
    }
    *(_WORD *)(a1 + 692) = v110;
    *(_DWORD *)(a1 + 696) = 0;
    uint64_t v111 = sub_1003708B0();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v111 + 48))(v111, a1, a1 + 700))
    {
      *(unsigned char *)(a1 + 740) = 0;
    }
    else
    {
      *(unsigned char *)(a1 + 740) = 1;
      char v112 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(a1, &v308);
        unsigned __int8 v113 = v309 >= 0 ? &v308 : (long long *)v308;
        LODWORD(__p[0]) = 136446722;
        *(void *)((char *)__p + 4) = v113;
        WORD6(__p[0]) = 1042;
        *(_DWORD *)((char *)__p + 14) = 20;
        WORD1(__p[1]) = 2098;
        *(void *)((char *)&__p[1] + 4) = a1 + 700;
        _os_log_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_DEFAULT, "Primary Identification - persisted {device %{public}s, %{public}.20P}", (uint8_t *)__p, 0x1Cu);
        if (SHIBYTE(v309) < 0) {
          operator delete((void *)v308);
        }
      }
    }
    uint64_t v114 = sub_1003708B0();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v114 + 64))(v114, a1, a1 + 720))
    {
      *(unsigned char *)(a1 + 741) = 0;
    }
    else
    {
      *(unsigned char *)(a1 + 741) = 1;
      char v115 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(a1, &v308);
        unint64_t v116 = v309 >= 0 ? &v308 : (long long *)v308;
        LODWORD(__p[0]) = 136446722;
        *(void *)((char *)__p + 4) = v116;
        WORD6(__p[0]) = 1042;
        *(_DWORD *)((char *)__p + 14) = 20;
        WORD1(__p[1]) = 2098;
        *(void *)((char *)&__p[1] + 4) = a1 + 720;
        _os_log_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_DEFAULT, "Secondary Identification  - persisted {device %{public}s, %{public}.20P}", (uint8_t *)__p, 0x1Cu);
        if (SHIBYTE(v309) < 0) {
          operator delete((void *)v308);
        }
      }
    }
    __n128 v117 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a1, __p);
      int v118 = (SBYTE7(__p[1]) & 0x80u) == 0 ? __p : *(_OWORD **)&__p[0];
      LODWORD(v308) = 136446210;
      *(void *)((char *)&v308 + 4) = v118;
      _os_log_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_DEFAULT, "Read SDP mirroring state for device %{public}s", (uint8_t *)&v308, 0xCu);
      if (SBYTE7(__p[1]) < 0) {
        operator delete(*(void **)&__p[0]);
      }
    }
    char v272 = 0;
    uint64_t v119 = sub_1003708B0();
    int v120 = (*(uint64_t (**)(uint64_t, uint64_t, char *))(*(void *)v119 + 752))(v119, a1, &v272);
    char v121 = v272;
    if (v120) {
      char v121 = 1;
    }
    *(unsigned char *)(a1 + 652) = v121;
    *(void *)(a1 + 752) = *(void *)(a1 + 744);
    int v122 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a1, __p);
      __n128 v123 = (SBYTE7(__p[1]) & 0x80u) == 0 ? __p : *(_OWORD **)&__p[0];
      LODWORD(v308) = 136446210;
      *(void *)((char *)&v308 + 4) = v123;
      _os_log_impl((void *)&_mh_execute_header, v122, OS_LOG_TYPE_DEFAULT, "Read group list for %{public}s", (uint8_t *)&v308, 0xCu);
      if (SBYTE7(__p[1]) < 0) {
        operator delete(*(void **)&__p[0]);
      }
    }
    uint64_t v124 = sub_1003708B0();
    long long v125 = (void **)(a1 + 744);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v124 + 320))(v124, a1, a1 + 744))
    {
      BOOL v126 = *(char **)(a1 + 752);
      unint64_t v127 = *(void *)(a1 + 760);
      if ((unint64_t)v126 >= v127)
      {
        unint64_t v129 = (char *)*v125;
        uint64_t v130 = (v126 - (unsigned char *)*v125) >> 2;
        unint64_t v131 = v130 + 1;
        if ((unint64_t)(v130 + 1) >> 62) {
          abort();
        }
        uint64_t v132 = v127 - (void)v129;
        if (v132 >> 1 > v131) {
          unint64_t v131 = v132 >> 1;
        }
        if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v133 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v133 = v131;
        }
        if (v133)
        {
          int v134 = (char *)sub_1002C44F0(a1 + 760, v133);
          BOOL v126 = *(char **)(a1 + 752);
          unint64_t v129 = *(char **)(a1 + 744);
        }
        else
        {
          int v134 = 0;
        }
        long long v135 = &v134[4 * v130];
        int v136 = &v134[4 * v133];
        *(_DWORD *)long long v135 = -1;
        int v128 = v135 + 4;
        while (v126 != v129)
        {
          int v137 = *((_DWORD *)v126 - 1);
          v126 -= 4;
          *((_DWORD *)v135 - 1) = v137;
          v135 -= 4;
        }
        *(void *)(a1 + 744) = v135;
        *(void *)(a1 + 752) = v128;
        *(void *)(a1 + 760) = v136;
        if (v129) {
          operator delete(v129);
        }
      }
      else
      {
        *(_DWORD *)BOOL v126 = -1;
        int v128 = v126 + 4;
      }
      *(void *)(a1 + 752) = v128;
    }
    unsigned __int8 v271 = 0;
    uint64_t v138 = sub_1003708B0();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, unsigned __int8 *))(*(void *)v138 + 384))(v138, a1, &v271))
    {
      int v139 = v271;
      *(unsigned char *)(a1 + 743) = v271;
      *(_DWORD *)(a1 + 1328) = *(_DWORD *)(a1 + 1328) & 0xFFFFFFDF | (32 * v139);
      if ((sub_100040630((unsigned __int8 *)a1) & 1) == 0
        && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
      {
        sub_10076C0C4();
      }
    }
    int v270 = 0;
    uint64_t v140 = sub_1003708B0();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*(void *)v140 + 400))(v140, a1, &v270)) {
      *(unsigned char *)(a1 + 786) = v270 != 0;
    }
    uint64_t v141 = sub_1003708B0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)v141 + 360))(v141, a1);
    int v269 = 0;
    uint64_t v142 = sub_1003708B0();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*(void *)v142 + 368))(v142, a1, &v269)) {
      *(_DWORD *)(a1 + 368) = v269;
    }
    char v268 = 0;
    uint64_t v143 = sub_1003708B0();
    (*(void (**)(uint64_t, uint64_t, char *))(*(void *)v143 + 1232))(v143, a1, &v268);
    *(unsigned char *)(a1 + 960) = v268;
    unsigned __int8 v267 = 0;
    uint64_t v144 = sub_1003708B0();
    (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(void *)v144 + 1232))(v144, a1, &v267);
    int v145 = v267;
    *(unsigned char *)(a1 + 976) = v267;
    if (*(unsigned char *)(a1 + 960))
    {
      __n128 v146 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        long long v147 = "is";
        if (!v145) {
          long long v147 = "is not";
        }
        LODWORD(__p[0]) = 136315138;
        *(void *)((char *)__p + 4) = v147;
        _os_log_impl((void *)&_mh_execute_header, v146, OS_LOG_TYPE_DEFAULT, "Wireless Splitter this is a guest device that %s in contacts", (uint8_t *)__p, 0xCu);
      }
      LODWORD(__p[0]) = 0;
      uint64_t v148 = sub_1003708B0();
      if (!(*(unsigned int (**)(uint64_t, uint64_t, _OWORD *))(*(void *)v148 + 1256))(v148, a1, __p)) {
        *(_DWORD *)(a1 + 964) = __p[0];
      }
    }
    char v266 = 0;
    uint64_t v149 = sub_1003708B0();
    (*(void (**)(uint64_t, uint64_t, char *))(*(void *)v149 + 1280))(v149, a1, &v266);
    *(unsigned char *)(a1 + 985) = v266;
    char v265 = 0;
    uint64_t v150 = sub_1003708B0();
    (*(void (**)(uint64_t, uint64_t, char *))(*(void *)v150 + 1296))(v150, a1, &v265);
    *(unsigned char *)(a1 + 988) = v265;
    char v264 = 0;
    uint64_t v151 = sub_1003708B0();
    (*(void (**)(uint64_t, uint64_t, char *))(*(void *)v151 + 1312))(v151, a1, &v264);
    *(unsigned char *)(a1 + 989) = v264;
    int v263 = 0;
    uint64_t v152 = sub_1003708B0();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*(void *)v152 + 832))(v152, a1, &v263)) {
      *(_DWORD *)(a1 + 788) = v263;
    }
    int v262 = 0;
    uint64_t v153 = sub_1003708B0();
    int v154 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)v153 + 848))(v153, a1, &v262);
    if (!v154) {
      *(_DWORD *)(a1 + 792) = v262;
    }
    __n128 v155 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p[0]) = 67109376;
      DWORD1(__p[0]) = v154;
      WORD4(__p[0]) = 1024;
      *(_DWORD *)((char *)__p + 10) = v262;
      _os_log_impl((void *)&_mh_execute_header, v155, OS_LOG_TYPE_DEFAULT, "Read doubleTapAction result %d, int64_t value = %d", (uint8_t *)__p, 0xEu);
    }
    unsigned __int8 v261 = 0;
    uint64_t v156 = sub_1003708B0();
    int v157 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(*(void *)v156 + 864))(v156, a1, &v261);
    if (!v157) {
      *(unsigned char *)(a1 + 796) = v261;
    }
    long long v158 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p[0]) = 67109376;
      DWORD1(__p[0]) = v157;
      WORD4(__p[0]) = 1024;
      *(_DWORD *)((char *)__p + 10) = v261;
      _os_log_impl((void *)&_mh_execute_header, v158, OS_LOG_TYPE_DEFAULT, "Read InEarDetectionEnabled result %d, int64_t value = %d", (uint8_t *)__p, 0xEu);
    }
    int v260 = 0;
    uint64_t v159 = sub_1003708B0();
    int v160 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)v159 + 880))(v159, a1, &v260);
    if (!v160) {
      *(_DWORD *)(a1 + 800) = v260;
    }
    long long v161 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a1, &v308);
      __n128 v162 = v309 >= 0 ? &v308 : (long long *)v308;
      LODWORD(__p[0]) = 136446722;
      *(void *)((char *)__p + 4) = v162;
      WORD6(__p[0]) = 1024;
      *(_DWORD *)((char *)__p + 14) = v160;
      WORD1(__p[1]) = 1024;
      DWORD1(__p[1]) = v260;
      _os_log_impl((void *)&_mh_execute_header, v161, OS_LOG_TYPE_DEFAULT, "[%{public}s] Read smart route result %d, mode = %d", (uint8_t *)__p, 0x18u);
      if (SHIBYTE(v309) < 0) {
        operator delete((void *)v308);
      }
    }
    int v259 = 0;
    uint64_t v163 = sub_1003708B0();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*(void *)v163 + 920))(v163, a1, &v259)) {
      *(_DWORD *)(a1 + 808) = v259;
    }
    long long v308 = 0uLL;
    uint64_t v309 = 0;
    uint64_t v164 = sub_1003708B0();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, long long *))(*(void *)v164 + 936))(v164, a1, &v308))
    {
      uint64_t v165 = a1 + 1176;
      if ((long long *)(a1 + 1176) != &v308) {
        sub_10048E490(a1 + 1176, (std::string *)v308, *((long long **)&v308 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v308 + 1) - v308) >> 3));
      }
      int v166 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v167 = *(void *)v165;
        int v168 = (void *)(*(void *)v165 + 72);
        if (*(char *)(*(void *)v165 + 95) < 0) {
          int v168 = (void *)*v168;
        }
        std::string v169 = (void *)(v167 + 240);
        if (*(char *)(v167 + 263) < 0) {
          std::string v169 = (void *)*v169;
        }
        LODWORD(__p[0]) = 141558531;
        *(void *)((char *)__p + 4) = 1752392040;
        WORD6(__p[0]) = 2081;
        *(void *)((char *)__p + 14) = v168;
        WORD3(__p[1]) = 2082;
        *((void *)&__p[1] + 1) = v169;
        _os_log_impl((void *)&_mh_execute_header, v166, OS_LOG_TYPE_DEFAULT, "AACPVersionInfo initialized: serial number %{private, mask.hash}s firmware version %{public}s", (uint8_t *)__p, 0x20u);
      }
    }
    memset(&v258, 0, sizeof(v258));
    uint64_t v170 = sub_1003708B0();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, std::string *))(*(void *)v170 + 952))(v170, a1, &v258)) {
      std::string::operator=((std::string *)(a1 + 1200), &v258);
    }
    *(void *)&long long v311 = 0;
    memset(__p, 0, sizeof(__p));
    sub_10004191C(&__p[2], "");
    uint64_t v171 = sub_1003708B0();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, _OWORD *))(*(void *)v171 + 968))(v171, a1, __p))
    {
      *(_OWORD *)(a1 + 1224) = __p[0];
      *(_OWORD *)(a1 + 1236) = *(_OWORD *)((char *)__p + 12);
      std::string::operator=((std::string *)(a1 + 1256), (const std::string *)&__p[2]);
    }
    int v257 = 0;
    uint64_t v172 = sub_1003708B0();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*(void *)v172 + 984))(v172, a1, &v257)) {
      *(_DWORD *)(a1 + 812) = v257;
    }
    int v256 = 0;
    uint64_t v173 = sub_1003708B0();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*(void *)v173 + 1000))(v173, a1, &v256)) {
      *(_DWORD *)(a1 + 820) = v256;
    }
    int v255 = 0;
    uint64_t v174 = sub_1003708B0();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*(void *)v174 + 1016))(v174, a1, &v255)) {
      *(_DWORD *)(a1 + 824) = v255;
    }
    int v254 = 0;
    uint64_t v175 = sub_1003708B0();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*(void *)v175 + 1032))(v175, a1, &v254)) {
      *(_DWORD *)(a1 + 828) = v254;
    }
    int v253 = 0;
    uint64_t v176 = sub_1003708B0();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*(void *)v176 + 1048))(v176, a1, &v253)) {
      *(_DWORD *)(a1 + 832) = v253;
    }
    int v252 = 0;
    uint64_t v177 = sub_1003708B0();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*(void *)v177 + 1064))(v177, a1, &v252)) {
      *(_DWORD *)(a1 + 836) = v252;
    }
    char v251 = 0;
    uint64_t v178 = sub_1003708B0();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, char *))(*(void *)v178 + 1096))(v178, a1, &v251)) {
      *(unsigned char *)(a1 + 856) = v251;
    }
    int v250 = 0;
    uint64_t v179 = sub_1003708B0();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*(void *)v179 + 1112))(v179, a1, &v250)) {
      *(_DWORD *)(a1 + 860) = v250;
    }
    char v249 = 0;
    uint64_t v180 = sub_1003708B0();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, char *))(*(void *)v180 + 1160))(v180, a1, &v249)) {
      *(unsigned char *)(a1 + 868) = v249;
    }
    uint64_t v248 = 0;
    uint64_t v181 = sub_1003708B0();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v181 + 1144))(v181, a1, &v248)) {
      *(void *)(a1 + 1472) = v248;
    }
    int v247 = 0;
    uint64_t v182 = sub_1003708B0();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*(void *)v182 + 1128))(v182, a1, &v247)) {
      *(_DWORD *)(a1 + 864) = v247;
    }
    char v246 = 0;
    uint64_t v183 = sub_1003708B0();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, char *))(*(void *)v183 + 1080))(v183, a1, &v246)) {
      *(unsigned char *)(a1 + 840) = v246;
    }
    v243 = 0;
    v244 = 0;
    uint64_t v245 = 0;
    uint64_t v184 = sub_1003708B0();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, void **))(*(void *)v184 + 1176))(v184, a1, &v243)
      && (void **)(a1 + 912) != &v243)
    {
      sub_10048EC48((void *)(a1 + 912), (char *)v243, v244, v244 - (unsigned char *)v243);
    }
    v240 = 0;
    v241 = 0;
    uint64_t v242 = 0;
    uint64_t v185 = sub_1003708B0();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, void **))(*(void *)v185 + 1192))(v185, a1, &v240)
      && (void **)(a1 + 936) != &v240)
    {
      sub_1002EABE0((char *)(a1 + 936), (char *)v240, (uint64_t)v241, (v241 - (unsigned char *)v240) >> 2);
    }
    int v239 = 0;
    uint64_t v186 = sub_1003708B0();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*(void *)v186 + 1320))(v186, a1, &v239)) {
      *(_DWORD *)(a1 + 424) = v239;
    }
    int v238 = 0;
    uint64_t v187 = sub_1003708B0();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*(void *)v187 + 1336))(v187, a1, &v238)) {
      *(_DWORD *)(a1 + 428) = v238;
    }
    float v237 = 0.0;
    uint64_t v188 = sub_1003708B0();
    int v189 = (*(uint64_t (**)(uint64_t, uint64_t, float *))(*(void *)v188 + 1352))(v188, a1, &v237);
    float v190 = v237;
    if (v189) {
      float v190 = -1.0;
    }
    *(float *)(a1 + 1124) = v190;
    uint64_t v191 = sub_1003708B0();
    v234 = 0;
    v235 = 0;
    uint64_t v236 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v191 + 1368))(v191, a1, &v234);
    if (v234)
    {
      v235 = v234;
      operator delete(v234);
    }
    sub_1002EABE0((char *)(a1 + 1128), 0, 0, 0);
    *(void *)(a1 + 376) = 0;
    *(void *)(a1 + 384) = 0;
    char v233 = 0;
    uint64_t v192 = sub_1003708B0();
    int v193 = (*(uint64_t (**)(uint64_t, uint64_t, char *))(*(void *)v192 + 1384))(v192, a1, &v233);
    if (v193)
    {
      v194 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v302 = 67109120;
        *(_DWORD *)&v302[4] = v193;
        _os_log_impl((void *)&_mh_execute_header, v194, OS_LOG_TYPE_DEFAULT, "Failed to read readEncryptionKeySize result: %d", v302, 8u);
      }
    }
    else
    {
      *(unsigned char *)(a1 + 996) = v233;
    }
    char v232 = 0;
    uint64_t v195 = sub_1003708B0();
    int v196 = (*(uint64_t (**)(uint64_t, uint64_t, char *))(*(void *)v195 + 1400))(v195, a1, &v232);
    if (v196)
    {
      v197 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v302 = 67109120;
        *(_DWORD *)&v302[4] = v196;
        _os_log_impl((void *)&_mh_execute_header, v197, OS_LOG_TYPE_DEFAULT, "Failed to read readEncryptionMode result: %d", v302, 8u);
      }
    }
    else
    {
      *(unsigned char *)(a1 + 997) = v232;
    }
    int v231 = 0;
    uint64_t v198 = sub_1003708B0();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*(void *)v198 + 1416))(v198, a1, &v231)) {
      *(_DWORD *)(a1 + 1000) = v231;
    }
    uint64_t v199 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v199 + 384))(v199))
    {
      int v200 = sub_100475178(a1);
      v201 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v302 = 67109120;
        *(_DWORD *)&v302[4] = v200;
        _os_log_impl((void *)&_mh_execute_header, v201, OS_LOG_TYPE_DEFAULT, "Number of services %d supporting PSM/RFCOMM", v302, 8u);
      }
    }
    int v230 = 0;
    uint64_t v202 = sub_1003708B0();
    int v203 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)v202 + 1432))(v202, a1, &v230);
    v204 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      int v205 = *(_DWORD *)(a1 + 1364);
      *(_DWORD *)v302 = 67109120;
      *(_DWORD *)&v302[4] = v205;
      _os_log_impl((void *)&_mh_execute_header, v204, OS_LOG_TYPE_DEFAULT, "Read hidDeviceBehavior : %d", v302, 8u);
    }
    if (v203)
    {
      v206 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        int v207 = *(_DWORD *)(a1 + 1364);
        *(_DWORD *)v302 = 67109120;
        *(_DWORD *)&v302[4] = v207;
        _os_log_impl((void *)&_mh_execute_header, v206, OS_LOG_TYPE_DEFAULT, "Failed to read hidDeviceBehavior : %d", v302, 8u);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 1364) = v230;
    }
    unsigned __int8 v229 = 0;
    uint64_t v208 = sub_1003708B0();
    int v209 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(*(void *)v208 + 1448))(v208, a1, &v229);
    v210 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v302 = 67109120;
      *(_DWORD *)&v302[4] = v229;
      _os_log_impl((void *)&_mh_execute_header, v210, OS_LOG_TYPE_DEFAULT, "Read userSelectedDeviceType : %d", v302, 8u);
    }
    if (v209)
    {
      v211 = qword_100A19E50;
      BOOL v212 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT);
      int v213 = 0;
      if (v212)
      {
        *(_DWORD *)v302 = 67109120;
        *(_DWORD *)&v302[4] = v209;
        _os_log_impl((void *)&_mh_execute_header, v211, OS_LOG_TYPE_DEFAULT, "Failed to read userSelectedDeviceType due to error: %d", v302, 8u);
        int v213 = 0;
      }
    }
    else
    {
      int v213 = v229;
    }
    *(_DWORD *)(a1 + 1420) = v213;
    int v228 = 0;
    uint64_t v214 = sub_1003708B0();
    int v215 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)v214 + 1480))(v214, a1, &v228);
    v216 = qword_100A19E50;
    if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_301;
    }
    sub_10004191C(v302, off_1009AF938[v228]);
    int v217 = v303;
    v218 = *(uint8_t **)v302;
    sub_100474E18(a1, v226);
    v219 = v302;
    if (v217 < 0) {
      v219 = v218;
    }
    if (v227 >= 0) {
      v220 = v226;
    }
    else {
      v220 = (void **)v226[0];
    }
    *(_DWORD *)v304 = 136315394;
    v305 = v219;
    __int16 v306 = 2082;
    v307 = v220;
    _os_log_impl((void *)&_mh_execute_header, v216, OS_LOG_TYPE_DEFAULT, "Read CarPlayType : %s for %{public}s", v304, 0x16u);
    if (v227 < 0) {
      operator delete(v226[0]);
    }
    if (v303 < 0)
    {
      operator delete(*(void **)v302);
      if (v215) {
        goto LABEL_302;
      }
    }
    else
    {
LABEL_301:
      if (v215)
      {
LABEL_302:
        v221 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v302 = 67109120;
          *(_DWORD *)&v302[4] = v215;
          _os_log_impl((void *)&_mh_execute_header, v221, OS_LOG_TYPE_DEFAULT, "Failed to read CarPlayType due to error: %d", v302, 8u);
        }
        if (sub_100475E4C(a1, 0x40000u) != 4)
        {
          *(_DWORD *)(a1 + 1508) = 0;
LABEL_310:
          if (v240)
          {
            v241 = v240;
            operator delete(v240);
          }
          if (v243)
          {
            v244 = (char *)v243;
            operator delete(v243);
          }
          if (SBYTE7(v311) < 0) {
            operator delete(*(void **)&__p[2]);
          }
          if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v258.__r_.__value_.__l.__data_);
          }
          *(void *)&__p[0] = &v308;
          sub_100051568((void ***)__p);
          sub_1000486F0((uint64_t)&v297, v298);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          return sub_10003AFB4((uint64_t)v301);
        }
        int v222 = 1;
LABEL_309:
        *(_DWORD *)(a1 + 1508) = v222;
        goto LABEL_310;
      }
    }
    int v222 = v228;
    goto LABEL_309;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
    sub_10076C160();
  }
  return sub_10003AFB4((uint64_t)v301);
}

void sub_10047489C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,uint64_t a54,char a55)
{
  if (*(char *)(v55 - 105) < 0) {
    operator delete(*(void **)(v55 - 128));
  }
  sub_10003AFB4((uint64_t)&a55);
  _Unwind_Resume(a1);
}

uint64_t sub_100474B30(uint64_t a1)
{
  v16[0] = 0;
  v16[1] = 0;
  sub_10003AED0((uint64_t)v16, a1);
  int v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Clearing SDP local memory database", buf, 2u);
  }
  uint64_t v3 = *(void **)(a1 + 584);
  uint64_t v4 = (void *)(a1 + 592);
  if (v3 != (void *)(a1 + 592))
  {
    do
    {
      *(void *)std::string buf = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      sub_100360748((uint64_t)buf, (uint64_t)(v3 + 5));
      int v5 = *(void ***)buf;
      if (*(void ***)buf != &v14)
      {
        do
        {
          long long v12 = *(_OWORD *)(v5 + 5);
          sub_1002D5394(&v12);
          int v6 = v5[1];
          if (v6)
          {
            do
            {
              uint64_t v7 = (void **)v6;
              int v6 = (void *)*v6;
            }
            while (v6);
          }
          else
          {
            do
            {
              uint64_t v7 = (void **)v5[2];
              BOOL v8 = *v7 == v5;
              int v5 = v7;
            }
            while (!v8);
          }
          int v5 = v7;
        }
        while (v7 != &v14);
      }
      sub_1000486F0((uint64_t)buf, v14);
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      *(void *)std::string buf = &v14;
      sub_1002D5394((unsigned char *)v3[4]);
      free((void *)v3[4]);
      sub_1000486F0((uint64_t)buf, v14);
      uint64_t v9 = (void *)v3[1];
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          uint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (void *)v3[2];
          BOOL v8 = *v10 == (void)v3;
          uint64_t v3 = v10;
        }
        while (!v8);
      }
      uint64_t v3 = v10;
    }
    while (v10 != v4);
  }
  sub_1002CBCC8(a1 + 584, *(void **)(a1 + 592));
  *(void *)(a1 + 584) = v4;
  *(_OWORD *)(a1 + 592) = 0u;
  if ([*(id *)(a1 + 1304) count]) {
    [*(id *)(a1 + 1304) removeAllObjects];
  }
  return sub_10003AFB4((uint64_t)v16);
}

void sub_100474CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100474D08(unsigned __int8 *a1)
{
  uint64_t result = sub_100040630(a1);
  if ((result & 1) == 0)
  {
    uint64_t v3 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18((uint64_t)a1, __p);
      if (v7 >= 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Removing device %{public}s from disk", buf, 0xCu);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v5 = sub_1003708B0();
    return (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(void *)v5 + 24))(v5, a1);
  }
  return result;
}

void sub_100474E18(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v32 = *(_DWORD *)(a1 + 128);
  __int16 v33 = *(_WORD *)(a1 + 132);
  uint64_t v4 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 160))(v4))
  {
    memset(&v31, 0, sizeof(v31));
    sub_100475EE0(a1, (uint64_t)&v31);
    uint64_t v28 = 0;
    std::string::size_type v29 = 0;
    uint64_t v30 = 0;
    sub_100475F84(a1, (uint64_t)&v28);
    v27[0] = 0;
    v27[1] = 0;
    sub_10003AED0((uint64_t)v27, a1);
    std::string::size_type size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v31.__r_.__value_.__l.__size_;
    }
    if (!size) {
      std::string::operator=(&v31, (const std::string *)(a1 + 200));
    }
    sub_10003AFE8((uint64_t)v27);
    sub_1004A82EC((unsigned __int8 *)&v32, &v21);
    int v6 = std::string::append(&v21, " \"");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    if (v30 >= 0) {
      BOOL v8 = (const std::string::value_type *)&v28;
    }
    else {
      BOOL v8 = v28;
    }
    if (v30 >= 0) {
      std::string::size_type v9 = HIBYTE(v30);
    }
    else {
      std::string::size_type v9 = v29;
    }
    uint64_t v10 = std::string::append(&v22, v8, v9);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    long long v12 = std::string::append(&v23, "\"");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = std::string::append(&v24, " - \"");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v16 = &v31;
    }
    else {
      uint64_t v16 = (std::string *)v31.__r_.__value_.__r.__words[0];
    }
    uint64_t v17 = std::string::append(&v25, (const std::string::value_type *)v16);
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    uint64_t v19 = std::string::append(&v26, "\"");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    a2[2] = *((void *)&v19->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    sub_10003AFB4((uint64_t)v27);
    if (SHIBYTE(v30) < 0) {
      operator delete(v28);
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    sub_1004A82EC((unsigned __int8 *)&v32, a2);
  }
}

void sub_1004750A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (*(char *)(v42 - 105) < 0) {
    operator delete(*(void **)(v42 - 128));
  }
  if (a42 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  sub_10003AFB4(v42 - 104);
  if (*(char *)(v42 - 65) < 0) {
    operator delete(*(void **)(v42 - 88));
  }
  if (*(char *)(v42 - 41) < 0) {
    operator delete(*(void **)(v42 - 64));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100475178(uint64_t a1)
{
  v75[0] = 0;
  v75[1] = 0;
  sub_10003AED0((uint64_t)v75, a1);
  if ([*(id *)(a1 + 1304) count])
  {
    [*(id *)(a1 + 1304) removeAllObjects];
  }
  else
  {
    uint64_t v1 = +[NSMutableArray array];
    int v2 = *(void **)(a1 + 1304);
    *(void *)(a1 + 1304) = v1;
  }
  uint64_t v3 = *(void **)(a1 + 584);
  __int16 v68 = (void *)(a1 + 592);
  if (v3 != (void *)(a1 + 592))
  {
    uint64_t v4 = 0;
LABEL_6:
    long long v74 = 0uLL;
    uint64_t v69 = v3;
    long long v74 = *(_OWORD *)v3[4];
    long long v92 = 0uLL;
    uint64_t v93 = 0;
    int v5 = sub_10047AE08(a1, (uint64_t)&v74, 4u, (void **)&v92);
    uint64_t v6 = *((void *)&v92 + 1);
    uint64_t v7 = v92;
    if ((void)v92 == *((void *)&v92 + 1)) {
      int v8 = 0;
    }
    else {
      int v8 = v5;
    }
    if (v8 != 1)
    {
LABEL_83:
      if (!v7) {
        goto LABEL_85;
      }
LABEL_84:
      *((void *)&v92 + 1) = v7;
      operator delete((void *)v7);
      goto LABEL_85;
    }
    while (1)
    {
      unint64_t v9 = *(unsigned __int16 *)(v7 + 2);
      if ((v9 & 1) == 0)
      {
        if (*(_WORD *)(v7 + 2)) {
          break;
        }
      }
LABEL_79:
      v7 += 16;
      if (v7 == v6)
      {
        uint64_t v60 = (_OWORD *)v92;
        if ((void)v92 != v6)
        {
          do
          {
            memset(v90, 0, sizeof(v90));
            *(_OWORD *)uint64_t v90 = *v60;
            sub_1002D5394(v90);
            ++v60;
          }
          while (v60 != *((_OWORD **)&v92 + 1));
          uint64_t v7 = v92;
          goto LABEL_83;
        }
        uint64_t v7 = v6;
        if (v6) {
          goto LABEL_84;
        }
LABEL_85:
        int v61 = v69;
        __int16 v62 = (void *)v69[1];
        if (v62)
        {
          do
          {
            uint64_t v63 = v62;
            __int16 v62 = (void *)*v62;
          }
          while (v62);
        }
        else
        {
          do
          {
            uint64_t v63 = (void *)v61[2];
            BOOL v64 = *v63 == (void)v61;
            int v61 = v63;
          }
          while (!v64);
        }
        uint64_t v3 = v63;
        if (v63 == v68) {
          goto LABEL_95;
        }
        goto LABEL_6;
      }
    }
    unint64_t v10 = 0;
    long long v11 = (unsigned __int8 *)(*(void *)(v7 + 8) + 24);
    while (1)
    {
      int v12 = *((_DWORD *)v11 - 4);
      if (v12 == 3) {
        break;
      }
      if (v12 == 256)
      {
        int v13 = *(_DWORD *)v11;
        memset(v90, 0, sizeof(v90));
        uint64_t v91 = 0;
        sub_10004191C(v90, "L2CAP ServiceClass: ");
        memset(&v73, 0, sizeof(v73));
        if (v74 == 3)
        {
          if (WORD1(v74) > 4u)
          {
            std::string v26 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", *((void *)&v74 + 1));
            uint64_t v27 = qword_100A19E50;
            if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)std::string buf = 138412290;
              *(void *)&uint8_t buf[4] = v26;
              _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "service long UUID: %@", buf, 0xCu);
            }
            uint64_t v28 = *(void **)(a1 + 1304);
            v84[0] = @"kCBMsgArgServiceUUID";
            v84[1] = @"kCBMsgArgPSM";
            v85[0] = v26;
            std::string::size_type v29 = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", (unsigned __int16)v13, v68);
            v85[1] = v29;
            uint64_t v30 = +[NSDictionary dictionaryWithObjects:v85 forKeys:v84 count:2];
            [v28 addObject:v30];

            std::string v31 = sub_100258B24(*((unsigned int **)&v74 + 1));
            std::string::assign(&v73, v31);
          }
          else
          {
            if (WORD1(v74) == 2)
            {
              LOWORD(__p[0]) = bswap32(WORD4(v74)) >> 16;
              uint64_t v14 = +[NSData dataWithBytes:__p length:2];
              long long v15 = qword_100A19E50;
              if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)std::string buf = 67109378;
                *(_DWORD *)&uint8_t buf[4] = DWORD2(v74);
                *(_WORD *)&uint8_t buf[8] = 2112;
                *(void *)&buf[10] = v14;
                _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "service short UUID: (0x%x) %@", buf, 0x12u);
              }
              uint64_t v16 = *(void **)(a1 + 1304);
              v88[0] = @"kCBMsgArgServiceUUID";
              v88[1] = @"kCBMsgArgPSM";
              v89[0] = v14;
              uint64_t v17 = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", (unsigned __int16)v13, v68);
              v89[1] = v17;
              long long v18 = +[NSDictionary dictionaryWithObjects:v89 forKeys:v88 count:2];
              [v16 addObject:v18];
            }
            else
            {
              LODWORD(__p[0]) = bswap32(DWORD2(v74));
              int v38 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", __p);
              int v39 = qword_100A19E50;
              if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)std::string buf = 67109378;
                *(_DWORD *)&uint8_t buf[4] = DWORD2(v74);
                *(_WORD *)&uint8_t buf[8] = 2112;
                *(void *)&buf[10] = v38;
                _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "service short UUID: (0x%x) %@", buf, 0x12u);
              }
              uint64_t v40 = *(void **)(a1 + 1304);
              v86[0] = @"kCBMsgArgServiceUUID";
              v86[1] = @"kCBMsgArgPSM";
              v87[0] = v38;
              uint64_t v41 = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", (unsigned __int16)v13, v68);
              v87[1] = v41;
              uint64_t v42 = +[NSDictionary dictionaryWithObjects:v87 forKeys:v86 count:2];
              [v40 addObject:v42];
            }
            int16x8_t v43 = sub_100258E24(DWORD2(v74));
            std::string::assign(&v73, v43);
          }
          uint64_t v4 = (v4 + 1);
        }
        memset(buf, 0, 24);
        sub_10004191C(buf, "\n");
        __p[0] = 0;
        __p[1] = 0;
        int64_t v72 = 0;
        sub_10047A158((const void **)v90, (const void **)&v73.__r_.__value_.__l.__data_, &v82);
        if ((buf[23] & 0x80u) == 0) {
          char v44 = buf;
        }
        else {
          char v44 = *(uint8_t **)buf;
        }
        if ((buf[23] & 0x80u) == 0) {
          std::string::size_type v45 = buf[23];
        }
        else {
          std::string::size_type v45 = *(void *)&buf[8];
        }
        BOOL v46 = std::string::append(&v82, (const std::string::value_type *)v44, v45);
        long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
        int64_t v72 = v46->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v47;
        v46->__r_.__value_.__l.__size_ = 0;
        v46->__r_.__value_.__r.__words[2] = 0;
        v46->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v82.__r_.__value_.__l.__data_);
        }
        int v48 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          char v49 = __p;
          if (v72 < 0) {
            char v49 = (void **)__p[0];
          }
          goto LABEL_68;
        }
        goto LABEL_69;
      }
LABEL_77:
      v11 += 32;
      v10 += 2;
      if (v10 >= v9)
      {
        uint64_t v6 = *((void *)&v92 + 1);
        goto LABEL_79;
      }
    }
    uint64_t v19 = *v11;
    long long v20 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t v90 = 67109120;
      *(_DWORD *)&v90[4] = v19;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "RFCOMM CID: %d", v90, 8u);
    }
    memset(v90, 0, sizeof(v90));
    uint64_t v91 = 0;
    sub_10004191C(v90, "RFCOMM ServiceClass: ");
    memset(&v73, 0, sizeof(v73));
    if (v74 == 3)
    {
      if (WORD1(v74) > 4u)
      {
        int v32 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", *((void *)&v74 + 1));
        __int16 v33 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 138412290;
          *(void *)&uint8_t buf[4] = v32;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "service long UUID: %@", buf, 0xCu);
        }
        uint64_t v34 = *(void **)(a1 + 1304);
        v76[0] = @"kCBMsgArgServiceUUID";
        v76[1] = @"kCBMsgArgRFCOMMChannelID";
        v77[0] = v32;
        int v35 = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v19, v68);
        v77[1] = v35;
        char v36 = +[NSDictionary dictionaryWithObjects:v77 forKeys:v76 count:2];
        [v34 addObject:v36];

        int v37 = sub_100258B24(*((unsigned int **)&v74 + 1));
        std::string::assign(&v73, v37);
      }
      else
      {
        if (WORD1(v74) == 2)
        {
          LOWORD(__p[0]) = bswap32(WORD4(v74)) >> 16;
          std::string v21 = +[NSData dataWithBytes:__p length:2];
          std::string v22 = qword_100A19E50;
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 67109378;
            *(_DWORD *)&uint8_t buf[4] = DWORD2(v74);
            *(_WORD *)&uint8_t buf[8] = 2112;
            *(void *)&buf[10] = v21;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "service short UUID: (0x%x) %@", buf, 0x12u);
          }
          std::string v23 = *(void **)(a1 + 1304);
          v80[0] = @"kCBMsgArgServiceUUID";
          v80[1] = @"kCBMsgArgRFCOMMChannelID";
          v81[0] = v21;
          std::string v24 = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v19, v68);
          v81[1] = v24;
          std::string v25 = +[NSDictionary dictionaryWithObjects:v81 forKeys:v80 count:2];
          [v23 addObject:v25];
        }
        else
        {
          LODWORD(__p[0]) = bswap32(DWORD2(v74));
          uint64_t v50 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", __p);
          int v51 = qword_100A19E50;
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 67109378;
            *(_DWORD *)&uint8_t buf[4] = DWORD2(v74);
            *(_WORD *)&uint8_t buf[8] = 2112;
            *(void *)&buf[10] = v50;
            _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "service short UUID: (0x%x) %@", buf, 0x12u);
          }
          unsigned __int16 v52 = *(void **)(a1 + 1304);
          v78[0] = @"kCBMsgArgServiceUUID";
          v78[1] = @"kCBMsgArgRFCOMMChannelID";
          v79[0] = v50;
          int v53 = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v19, v68);
          v79[1] = v53;
          uint64_t v54 = +[NSDictionary dictionaryWithObjects:v79 forKeys:v78 count:2];
          [v52 addObject:v54];
        }
        uint64_t v55 = sub_100258E24(DWORD2(v74));
        std::string::assign(&v73, v55);
      }
      uint64_t v4 = (v4 + 1);
    }
    memset(buf, 0, 24);
    sub_10004191C(buf, "\n");
    __p[0] = 0;
    __p[1] = 0;
    int64_t v72 = 0;
    sub_10047A158((const void **)v90, (const void **)&v73.__r_.__value_.__l.__data_, &v82);
    if ((buf[23] & 0x80u) == 0) {
      __int16 v56 = buf;
    }
    else {
      __int16 v56 = *(uint8_t **)buf;
    }
    if ((buf[23] & 0x80u) == 0) {
      std::string::size_type v57 = buf[23];
    }
    else {
      std::string::size_type v57 = *(void *)&buf[8];
    }
    int v58 = std::string::append(&v82, (const std::string::value_type *)v56, v57);
    long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    int64_t v72 = v58->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v59;
    v58->__r_.__value_.__l.__size_ = 0;
    v58->__r_.__value_.__r.__words[2] = 0;
    v58->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v82.__r_.__value_.__l.__data_);
    }
    int v48 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      char v49 = __p;
      if (v72 < 0) {
        char v49 = (void **)__p[0];
      }
LABEL_68:
      LODWORD(v82.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v82.__r_.__value_.__r.__words + 4) = (std::string::size_type)v49;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v82, 0xCu);
    }
LABEL_69:
    if (SHIBYTE(v72) < 0) {
      operator delete(__p[0]);
    }
    if ((char)buf[23] < 0) {
      operator delete(*(void **)buf);
    }
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v73.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v91) < 0) {
      operator delete(*(void **)v90);
    }
    goto LABEL_77;
  }
  uint64_t v4 = 0;
LABEL_95:
  __int16 v65 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v66 = *(void *)(a1 + 1304);
    LODWORD(v92) = 138412290;
    *(void *)((char *)&v92 + 4) = v66;
    _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "Services dictionary: %@", (uint8_t *)&v92, 0xCu);
  }
  sub_10003AFB4((uint64_t)v75);
  return v4;
}

void sub_100475CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
}

uint64_t sub_100475E4C(uint64_t a1, unsigned int a2)
{
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, a1);
  uint64_t v4 = *(void *)(a1 + 336);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = a1 + 336;
  do
  {
    unsigned int v6 = *(_DWORD *)(v4 + 28);
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      int v8 = (uint64_t *)v4;
    }
    else {
      int v8 = (uint64_t *)(v4 + 8);
    }
    if (v7) {
      uint64_t v5 = v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 336 && *(_DWORD *)(v5 + 28) <= a2) {
    uint64_t v9 = *(unsigned int *)(v5 + 32);
  }
  else {
LABEL_12:
  }
    uint64_t v9 = 0;
  sub_10003AFB4((uint64_t)v11);
  return v9;
}

uint64_t sub_100475EE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1);
  uint64_t v4 = a1 + 280;
  if (*(char *)(a1 + 303) < 0)
  {
    unint64_t v5 = *(void *)(a1 + 288);
    if (v5) {
      goto LABEL_8;
    }
    goto LABEL_5;
  }
  if (!*(unsigned char *)(a1 + 303))
  {
LABEL_5:
    uint64_t v4 = a1 + 240;
    if ((*(char *)(a1 + 263) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    unint64_t v5 = *(void *)(a1 + 248);
LABEL_8:
    sub_10003B098((unsigned char *)a2, *(void **)v4, v5);
    return sub_10003AFB4((uint64_t)v7);
  }
LABEL_6:
  *(_OWORD *)a2 = *(_OWORD *)v4;
  *(void *)(a2 + 16) = *(void *)(v4 + 16);
  return sub_10003AFB4((uint64_t)v7);
}

void sub_100475F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100475F84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1);
  if (*(char *)(a1 + 263) < 0)
  {
    sub_10003B098((unsigned char *)a2, *(void **)(a1 + 240), *(void *)(a1 + 248));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 240);
    *(void *)(a2 + 16) = *(void *)(a1 + 256);
  }
  return sub_10003AFB4((uint64_t)v5);
}

void sub_100475FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100476008@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1);
  *a2 = *(_OWORD *)(a1 + 136);
  return sub_10003AFB4((uint64_t)v5);
}

uint64_t sub_100476054(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 176);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_10047609C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1);
  if (*(char *)(a1 + 303) < 0)
  {
    sub_10003B098((unsigned char *)a2, *(void **)(a1 + 280), *(void *)(a1 + 288));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 280);
    *(void *)(a2 + 16) = *(void *)(a1 + 296);
  }
  return sub_10003AFB4((uint64_t)v5);
}

void sub_10047610C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100476120@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1);
  if (*(char *)(a1 + 223) < 0)
  {
    sub_10003B098((unsigned char *)a2, *(void **)(a1 + 200), *(void *)(a1 + 208));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 200);
    *(void *)(a2 + 16) = *(void *)(a1 + 216);
  }
  return sub_10003AFB4((uint64_t)v5);
}

void sub_100476190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004761A4(uint64_t a1)
{
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1);
  uint64_t v2 = *(void **)(a1 + 328);
  uint64_t v3 = (void *)(a1 + 336);
  if (v2 == (void *)(a1 + 336))
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    do
    {
      if (*((_DWORD *)v2 + 8) == 4) {
        uint64_t v4 = *((_DWORD *)v2 + 7) | v4;
      }
      unint64_t v5 = (void *)v2[1];
      if (v5)
      {
        do
        {
          unsigned int v6 = v5;
          unint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          unsigned int v6 = (void *)v2[2];
          BOOL v7 = *v6 == (void)v2;
          uint64_t v2 = v6;
        }
        while (!v7);
      }
      uint64_t v2 = v6;
    }
    while (v6 != v3);
  }
  sub_10003AFB4((uint64_t)v9);
  return v4;
}

uint64_t sub_100476250(uint64_t a1, _DWORD *a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1);
  if (*(void *)(a1 + 312) || *(void *)(a1 + 320))
  {
    *a2 = *(_DWORD *)(a1 + 304);
    uint64_t v4 = 1;
  }
  else
  {
    uint64_t v4 = 0;
  }
  sub_10003AFB4((uint64_t)v6);
  return v4;
}

uint64_t sub_1004762BC(void *a1)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, (uint64_t)a1);
  if (a1[23]) {
    unsigned int v2 = 1;
  }
  else {
    unsigned int v2 = a1[24] != 0;
  }
  if (a1[28])
  {
    v2 |= 2u;
  }
  else if (a1[29])
  {
    v2 |= 2u;
  }
  if (a1[33])
  {
    v2 |= 8u;
  }
  else if (a1[34])
  {
    v2 |= 8u;
  }
  if (a1[44])
  {
    uint64_t v3 = v2 | 4;
  }
  else if (a1[45])
  {
    uint64_t v3 = v2 | 4;
  }
  else
  {
    uint64_t v3 = v2;
  }
  sub_10003AFB4((uint64_t)v5);
  return v3;
}

uint64_t sub_10047637C(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(char *)(a1 + 152);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_1004763C4(uint64_t a1, int a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1);
  *(_DWORD *)(a1 + 1420) = a2;
  uint64_t v4 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v4 + 1456))(v4, a1, *(unsigned __int8 *)(a1 + 1420));
  return sub_10003AFB4((uint64_t)v6);
}

void sub_100476444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100476458(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 1420);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

BOOL sub_1004764A0(uint64_t a1)
{
  if (qword_1009F87A8 != -1) {
    dispatch_once(&qword_1009F87A8, &stru_1009AF7F8);
  }
  uint64_t v2 = off_1009F87A0;

  return sub_10046E654((uint64_t)v2, a1);
}

BOOL sub_100476504(uint64_t a1)
{
  char v7 = 0;
  sub_10001B8E0(&v7);
  uint64_t v6 = 0;
  if (sub_10017E2D4(a1 + 128, &v6))
  {
    BOOL v2 = 1;
  }
  else
  {
    int v3 = *(unsigned __int8 *)(v6 + 278);
    BOOL v2 = *(unsigned char *)(v6 + 278) != 0;
    uint64_t v4 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109120;
      int v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "HDR link is connected %d", buf, 8u);
    }
  }
  sub_10001B8AC(&v7);
  return v2;
}

void sub_1004765F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

BOOL sub_100476610(uint64_t a1)
{
  if (qword_1009F87A8 != -1) {
    dispatch_once(&qword_1009F87A8, &stru_1009AF7F8);
  }
  BOOL v2 = off_1009F87A0;

  return sub_10046E6E8((uint64_t)v2, a1);
}

unsigned int *sub_100476674(uint64_t a1)
{
  if (qword_1009F87A8 != -1) {
    dispatch_once(&qword_1009F87A8, &stru_1009AF7F8);
  }
  uint64_t result = (unsigned int *)sub_10046EC14((uint64_t)off_1009F87A0, a1);
  if (result) {
    return (unsigned int *)*result;
  }
  return result;
}

BOOL sub_1004766D4(uint64_t a1)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1);
  int v2 = *(_DWORD *)(a1 + 176);
  BOOL v4 = v2 == 17 || v2 == 22;
  sub_10003AFB4((uint64_t)v6);
  return v4;
}

uint64_t sub_100476728(uint64_t a1, uint64_t a2)
{
  if (qword_1009FB288 != -1) {
    dispatch_once(&qword_1009FB288, &stru_1009AF818);
  }
  uint64_t v4 = sub_10030D7C4(qword_1009FB280, 2);
  int v32 = 0;
  v33[0] = 0;
  v33[1] = 0;
  sub_100635570(v4, (uint64_t *)&v32);
  unint64_t v5 = v32;
  if (v32 == v33)
  {
LABEL_49:
    uint64_t v27 = 0;
  }
  else
  {
    uint64_t v29 = a1;
    while (1)
    {
      uint64_t v6 = (char *)(v5 + 4);
      char v7 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEBUG))
      {
        sub_100475F84(a1, (uint64_t)v30);
        std::string v21 = v30;
        if (v31 < 0) {
          std::string v21 = (void **)v30[0];
        }
        if (*((char *)v5 + 55) < 0) {
          std::string v22 = *(char ***)v6;
        }
        else {
          std::string v22 = v5 + 4;
        }
        int v26 = *((unsigned __int16 *)v5 + 28);
        *(_DWORD *)std::string __p = 136446978;
        *(void *)&__p[4] = v21;
        *(_WORD *)&unsigned char __p[12] = 2080;
        *(void *)&__p[14] = v22;
        __int16 v35 = 1024;
        int v36 = a2;
        __int16 v37 = 1024;
        int v38 = v26;
        _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Identification - isAutomationDongle comparing Friendly Names: \"%{public}s\" and \"%s\", and Chipset Manufacturer IDs: %d and %d", __p, 0x22u);
        if (v31 < 0) {
          operator delete(v30[0]);
        }
      }
      if (*((char *)v5 + 55) < 0)
      {
        if (!v5[5]) {
          goto LABEL_39;
        }
      }
      else if (!*((unsigned char *)v5 + 55))
      {
        goto LABEL_39;
      }
      sub_100475F84(a1, (uint64_t)__p);
      char v8 = HIBYTE(v35);
      int v9 = *(void **)__p;
      if (v35 >= 0) {
        unint64_t v10 = __p;
      }
      else {
        unint64_t v10 = *(unsigned char **)__p;
      }
      if (*((char *)v5 + 55) >= 0)
      {
        int64_t v11 = *((unsigned __int8 *)v5 + 55);
      }
      else
      {
        uint64_t v6 = v5[4];
        int64_t v11 = (int64_t)v5[5];
      }
      if (!v11)
      {
LABEL_35:
        BOOL v13 = *((unsigned __int16 *)v5 + 28) == a2;
        goto LABEL_36;
      }
      if (v35 >= 0) {
        int64_t v12 = HIBYTE(v35);
      }
      else {
        int64_t v12 = *(void *)&__p[8];
      }
      if (v12 < v11)
      {
        BOOL v13 = 0;
        goto LABEL_36;
      }
      uint64_t v14 = a2;
      long long v15 = &v10[v12];
      int v16 = *v6;
      uint64_t v17 = v10;
      while (1)
      {
        int64_t v18 = v12 - v11;
        if (v18 == -1 || (uint64_t v19 = (char *)memchr(v17, v16, v18 + 1)) == 0)
        {
LABEL_27:
          BOOL v13 = 0;
LABEL_28:
          a2 = v14;
          a1 = v29;
          goto LABEL_36;
        }
        long long v20 = v19;
        if (!memcmp(v19, v6, v11)) {
          break;
        }
        uint64_t v17 = v20 + 1;
        int64_t v12 = v15 - (v20 + 1);
        if (v12 < v11) {
          goto LABEL_27;
        }
      }
      BOOL v13 = 0;
      if (v20 == v15) {
        goto LABEL_28;
      }
      a2 = v14;
      a1 = v29;
      if (v20 - v10 != -1) {
        goto LABEL_35;
      }
LABEL_36:
      if (v8 < 0) {
        operator delete(v9);
      }
      if (v13) {
        break;
      }
LABEL_39:
      std::string v23 = v5[1];
      if (v23)
      {
        do
        {
          std::string v24 = (char **)v23;
          std::string v23 = *(char **)v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          std::string v24 = (char **)v5[2];
          BOOL v25 = *v24 == (char *)v5;
          unint64_t v5 = v24;
        }
        while (!v25);
      }
      unint64_t v5 = v24;
      if (v24 == v33) {
        goto LABEL_49;
      }
    }
    uint64_t v27 = 1;
  }
  sub_10004BA28((uint64_t)&v32, v33[0]);
  return v27;
}

void sub_100476A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17)
{
}

BOOL sub_100476A68(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  BOOL v2 = *(_DWORD *)(a1 + 176) == 25;
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_100476AB8(uint64_t a1, _OWORD *a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1);
  if ((_OWORD *)(a1 + 136) != a2) {
    *(_OWORD *)(a1 + 136) = *a2;
  }
  return sub_10003AFB4((uint64_t)v5);
}

uint64_t sub_100476B10(uint64_t a1, char a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1);
  *(unsigned char *)(a1 + 984) = a2;
  return sub_10003AFB4((uint64_t)v5);
}

uint64_t sub_100476B58(uint64_t a1, __int16 a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1);
  *(_WORD *)(a1 + 986) = a2;
  return sub_10003AFB4((uint64_t)v5);
}

uint64_t sub_100476BA0(uint64_t a1, char a2, _OWORD *a3)
{
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1);
  *(unsigned char *)(a1 + 152) = a2;
  if ((_OWORD *)(a1 + 160) != a3) {
    *(_OWORD *)(a1 + 160) = *a3;
  }
  return sub_10003AFB4((uint64_t)v7);
}

uint64_t sub_100476C08(uint64_t a1, int a2, _OWORD *a3)
{
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1);
  *(_DWORD *)(a1 + 176) = a2;
  if ((_OWORD *)(a1 + 184) != a3) {
    *(_OWORD *)(a1 + 184) = *a3;
  }
  uint64_t v6 = *(void *)(a1 + 520);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
  }
  return sub_10003AFB4((uint64_t)v8);
}

void sub_100476C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100476CB0(uint64_t a1, std::string *a2, _OWORD *a3)
{
  v15[0] = 0;
  v15[1] = 0;
  sub_10003AED0((uint64_t)v15, a1);
  uint64_t v6 = (_OWORD *)(a1 + 224);
  if (*(void *)(a1 + 224) || *(void *)(a1 + 232))
  {
    uint64_t v7 = *(unsigned __int8 *)(a1 + 223);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = *(unsigned __int8 *)(a1 + 223);
    }
    else {
      uint64_t v8 = *(void *)(a1 + 208);
    }
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    int v10 = (char)size;
    if ((size & 0x80u) != 0) {
      std::string::size_type size = a2->__r_.__value_.__l.__size_;
    }
    if (v8 == size)
    {
      int64_t v11 = (const void **)(a1 + 200);
      if (v10 >= 0) {
        int64_t v12 = a2;
      }
      else {
        int64_t v12 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      if ((v7 & 0x80) == 0)
      {
        if (*(unsigned char *)(a1 + 223))
        {
          while (*(unsigned __int8 *)v11 == v12->__r_.__value_.__s.__data_[0])
          {
            int64_t v11 = (const void **)((char *)v11 + 1);
            int64_t v12 = (std::string *)((char *)v12 + 1);
            if (!--v7) {
              goto LABEL_22;
            }
          }
          goto LABEL_18;
        }
LABEL_22:
        if (v6 != a3) {
          _OWORD *v6 = *a3;
        }
        return sub_10003AFB4((uint64_t)v15);
      }
      if (!memcmp(*v11, v12, *(void *)(a1 + 208))) {
        goto LABEL_22;
      }
    }
  }
LABEL_18:
  std::string::operator=((std::string *)(a1 + 200), a2);
  if (v6 != a3) {
    _OWORD *v6 = *a3;
  }
  sub_10003AFE8((uint64_t)v15);
  if (sub_100040630((unsigned __int8 *)a1))
  {
    uint64_t v13 = sub_1003708B0();
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)v13 + 232))(v13, a1, a2);
  }
  return sub_10003AFB4((uint64_t)v15);
}

void sub_100476E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100476E14(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  v35[0] = 0;
  v35[1] = 0;
  sub_10003AED0((uint64_t)v35, a1);
  int v32 = 0;
  unint64_t v33 = 0;
  uint64_t v34 = 0;
  sub_10044A25C(a2, &v32);
  uint64_t v29 = 0;
  unint64_t v30 = 0;
  uint64_t v31 = 0;
  sub_100477264((void *)a1, &v29);
  memset(&__str, 0, sizeof(__str));
  char v6 = HIBYTE(v31);
  if (v31 >= 0) {
    unint64_t v7 = HIBYTE(v31);
  }
  else {
    unint64_t v7 = v30;
  }
  uint64_t v8 = (std::string *)&v32;
  if (v7) {
    uint64_t v8 = (std::string *)&v29;
  }
  else {
    char v6 = HIBYTE(v34);
  }
  if (v6 < 0)
  {
    if (v7) {
      unint64_t v9 = v30;
    }
    else {
      unint64_t v9 = v33;
    }
    sub_10003B098(&__str, v8->__r_.__value_.__l.__data_, v9);
  }
  else
  {
    std::string __str = *v8;
  }
  int v10 = (_OWORD *)(a1 + 264);
  if (*(void *)(a1 + 264) || *(void *)(a1 + 272))
  {
    uint64_t v11 = *(unsigned __int8 *)(a1 + 263);
    if ((v11 & 0x80u) == 0) {
      uint64_t v12 = *(unsigned __int8 *)(a1 + 263);
    }
    else {
      uint64_t v12 = *(void *)(a1 + 248);
    }
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    if (v12 == size)
    {
      uint64_t v14 = (const void **)(a1 + 240);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_str = &__str;
      }
      else {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if ((v11 & 0x80) == 0)
      {
        if (*(unsigned char *)(a1 + 263))
        {
          while (*(unsigned __int8 *)v14 == p_str->__r_.__value_.__s.__data_[0])
          {
            uint64_t v14 = (const void **)((char *)v14 + 1);
            p_str = (std::string *)((char *)p_str + 1);
            if (!--v11) {
              goto LABEL_48;
            }
          }
          goto LABEL_30;
        }
LABEL_48:
        if (v10 != a3) {
          _OWORD *v10 = *a3;
        }
        goto LABEL_50;
      }
      if (!memcmp(*v14, p_str, *(void *)(a1 + 248))) {
        goto LABEL_48;
      }
    }
  }
LABEL_30:
  std::string::operator=((std::string *)(a1 + 240), &__str);
  if (v10 != a3) {
    _OWORD *v10 = *a3;
  }
  *(unsigned char *)(a1 + 1369) = 1;
  sub_10003AFE8((uint64_t)v35);
  if (sub_100040630((unsigned __int8 *)a1))
  {
    uint64_t v16 = sub_1003708B0();
    int v17 = (*(uint64_t (**)(uint64_t, uint64_t, std::string *))(*(void *)v16 + 40))(v16, a1, &__str);
    int64_t v18 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_1004A82EC((unsigned __int8 *)(a1 + 128), __p);
      if (v27 >= 0) {
        uint64_t v19 = __p;
      }
      else {
        uint64_t v19 = (void **)__p[0];
      }
      long long v20 = &__str;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        long long v20 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 67109891;
      int v37 = v17;
      __int16 v38 = 2082;
      int v39 = v19;
      __int16 v40 = 2160;
      uint64_t v41 = 1752392040;
      __int16 v42 = 2081;
      int16x8_t v43 = v20;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "setName uint64_t result = %d, device address = %{public}s, value = %{private, mask.hash}s", buf, 0x26u);
      if (v27 < 0) {
        operator delete(__p[0]);
      }
    }
    sub_100477298(a1);
  }
  uint64_t v21 = sub_100373114();
  sub_1004A82EC((unsigned __int8 *)(a1 + 128), v24);
  (*(void (**)(uint64_t, void **))(*(void *)v21 + 40))(v21, v24);
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF778);
  }
  sub_1004AA04C((os_unfair_lock_s *)off_1009F7EF8, a1, 1);
  uint64_t v22 = *(void *)(a1 + 520);
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
LABEL_50:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31) < 0) {
    operator delete(v29);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(v32);
  }
  return sub_10003AFB4((uint64_t)v35);
}

void sub_1004771E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  sub_10003AFB4(v36 - 96);
  _Unwind_Resume(a1);
}

void *sub_100477264@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result[97];
  if ((v2 & 0x800) != 0)
  {
    int v3 = "DUALSHOCK 4 Wireless Controller";
  }
  else
  {
    if ((v2 & 0x2000) == 0)
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      return result;
    }
    int v3 = "DualSense Wireless Controller";
  }
  return sub_10004191C(a2, v3);
}

void sub_100477298(uint64_t a1)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF778);
  }
  if (sub_1004AB1F0((uint64_t)off_1009F7EF8))
  {
    if (*(unsigned char *)(a1 + 740))
    {
      int v42 = *(_DWORD *)(a1 + 716);
      long long v41 = *(_OWORD *)(a1 + 700);
      if (*(_DWORD *)(a1 + 1076) != 76
        || (unsigned int v2 = *(_DWORD *)(a1 + 1080) - 8194, v2 > 0x1D)
        || ((1 << v2) & 0x20037F9B) == 0)
      {
        if (!*(unsigned char *)(a1 + 1069) || (*(unsigned char *)(a1 + 1089) & 0x10) == 0) {
          goto LABEL_25;
        }
      }
      __p[0] = 0;
      __p[1] = 0;
      sub_10003AED0((uint64_t)__p, a1);
      int v3 = *(_DWORD *)(a1 + 696);
      sub_10003AFB4((uint64_t)__p);
      if (!v3) {
        goto LABEL_25;
      }
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v26 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v23 = 0u;
      memset(__p, 0, sizeof(__p));
      uint64_t v4 = sub_1003708B0();
      if ((*(unsigned int (**)(uint64_t, uint64_t, void **, uint64_t))(*(void *)v4 + 80))(v4, a1, __p, 80))
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
          sub_10076C194();
        }
        goto LABEL_24;
      }
      int v7 = DWORD2(v24);
      *(void *)std::string buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      sub_10003AED0((uint64_t)buf, a1);
      int v8 = *(_DWORD *)(a1 + 696);
      sub_10003AFB4((uint64_t)buf);
      if (v7 == v8)
      {
LABEL_24:
        sub_1003B8A60((uint64_t)__p);
LABEL_25:
        unint64_t v9 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          sub_100474E18(a1, buf);
          if (v21 >= 0) {
            int v10 = buf;
          }
          else {
            int v10 = *(unsigned char **)buf;
          }
          LODWORD(__p[0]) = 136446722;
          *(void **)((char *)__p + 4) = v10;
          WORD2(__p[1]) = 1042;
          *(_DWORD *)((char *)&__p[1] + 6) = 20;
          WORD1(__p[2]) = 2098;
          *(void **)((char *)&__p[2] + 4) = &v41;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Identification - Identification hash exists for device %{public}s, primary hash %{public}.20P", (uint8_t *)__p, 0x1Cu);
          if (SHIBYTE(v21) < 0) {
            operator delete(*(void **)buf);
          }
        }
        return;
      }
      uint64_t v11 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(a1, v17);
        int v12 = v18;
        uint64_t v13 = (void **)v17[0];
        int v14 = DWORD2(v24);
        int v15 = sub_1004828F0(a1);
        uint64_t v16 = v17;
        *(_DWORD *)std::string buf = 136446722;
        if (v12 < 0) {
          uint64_t v16 = v13;
        }
        *(void *)&uint8_t buf[4] = v16;
        *(_WORD *)&unsigned char buf[12] = 1026;
        *(_DWORD *)&unsigned char buf[14] = v14;
        __int16 v20 = 1026;
        int v21 = v15;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Identification - Apple Audio Device - firmware version has changed for device %{public}s (old firmware version %{public}d, new firmware version %{public}d)- regenerating primary hash.", buf, 0x18u);
        if (v18 < 0) {
          operator delete(v17[0]);
        }
      }
      *(unsigned char *)(a1 + 742) = 0;
      sub_100482A60(a1);
      sub_1003B8A60((uint64_t)__p);
    }
    else
    {
      unint64_t v5 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(a1, __p);
        char v6 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Identification - Identification hash does not exist for device %{public}s - generating.", buf, 0xCu);
        if (SHIBYTE(__p[2]) < 0) {
          operator delete(__p[0]);
        }
      }
      sub_100482A60(a1);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
  {
    sub_10076C1C8();
  }
}

void sub_100477688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1003B8A60((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_1004776C0(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 777) >> 3) & 1;
}

uint64_t sub_1004776CC(uint64_t a1, uint64_t a2, int a3)
{
  v33[0] = 0;
  v33[1] = 0;
  sub_10003AED0((uint64_t)v33, a1);
  memset(&__str, 0, sizeof(__str));
  sub_10044A25C(a2, &__str);
  int v6 = *(char *)(a1 + 263);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_str = &__str;
  }
  else {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if (v6 >= 0) {
    std::string::size_type v9 = *(unsigned __int8 *)(a1 + 263);
  }
  else {
    std::string::size_type v9 = *(void *)(a1 + 248);
  }
  if (v6 >= 0) {
    int v10 = (const void *)(a1 + 240);
  }
  else {
    int v10 = *(const void **)(a1 + 240);
  }
  if (v9 >= size) {
    size_t v11 = size;
  }
  else {
    size_t v11 = v9;
  }
  if (!memcmp(p_str, v10, v11) && v9 == size && v9 != 0)
  {
    std::string::assign((std::string *)(a1 + 280), "");
    uint64_t v18 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
    {
      sub_100474E18(a1, __p);
      if (v41 >= 0) {
        __int16 v20 = __p;
      }
      else {
        __int16 v20 = *(unsigned char **)__p;
      }
      *(_DWORD *)std::string buf = 136315138;
      long long v35 = v20;
      int v21 = "Same username and name, empty out nickname for: %s";
      uint64_t v22 = v18;
      os_log_type_t v23 = OS_LOG_TYPE_INFO;
      uint32_t v24 = 12;
LABEL_47:
      _os_log_impl((void *)&_mh_execute_header, v22, v23, v21, buf, v24);
      if (v41 < 0) {
        operator delete(*(void **)__p);
      }
      goto LABEL_49;
    }
    goto LABEL_49;
  }
  uint64_t v14 = *(unsigned __int8 *)(a1 + 303);
  if ((v14 & 0x80u) == 0) {
    uint64_t v15 = *(unsigned __int8 *)(a1 + 303);
  }
  else {
    uint64_t v15 = *(void *)(a1 + 288);
  }
  if (v15 != size)
  {
LABEL_40:
    std::string::operator=((std::string *)(a1 + 280), &__str);
    uint64_t v25 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a1, __p);
      if (v41 >= 0) {
        long long v26 = __p;
      }
      else {
        long long v26 = *(unsigned char **)__p;
      }
      long long v27 = &__str;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        long long v27 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315394;
      long long v35 = v26;
      __int16 v36 = 2080;
      long long v37 = v27;
      int v21 = "User defined name for %s updated to %s";
      uint64_t v22 = v25;
      os_log_type_t v23 = OS_LOG_TYPE_DEFAULT;
      uint32_t v24 = 22;
      goto LABEL_47;
    }
LABEL_49:
    sub_10003AFE8((uint64_t)v33);
    if (sub_100040630((unsigned __int8 *)a1))
    {
      uint64_t v28 = sub_1003708B0();
      (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)v28 + 216))(v28, a1, &__str);
      uint64_t v29 = *(void *)(a1 + 520);
      if (v29) {
        (*(void (**)(uint64_t))(*(void *)v29 + 16))(v29);
      }
    }
    if (a3)
    {
      if (qword_1009F7F00 != -1) {
        dispatch_once(&qword_1009F7F00, &stru_1009AF778);
      }
      sub_1004AA04C((os_unfair_lock_s *)off_1009F7EF8, a1, 4098);
    }
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AF778);
    }
    sub_1004AA04C((os_unfair_lock_s *)off_1009F7EF8, a1, 2);
    if (qword_1009F7EF0 != -1) {
      dispatch_once(&qword_1009F7EF0, &stru_1009AF838);
    }
    sub_100455344((uint64_t)off_1009F7EE8, a1);
    goto LABEL_61;
  }
  if ((v14 & 0x80) != 0)
  {
    if (memcmp(*(const void **)(a1 + 280), p_str, *(void *)(a1 + 288))) {
      goto LABEL_40;
    }
  }
  else if (*(unsigned char *)(a1 + 303))
  {
    uint64_t v16 = p_str;
    int v17 = (unsigned __int8 *)(a1 + 280);
    while (*v17 == v16->__r_.__value_.__s.__data_[0])
    {
      ++v17;
      uint64_t v16 = (std::string *)((char *)v16 + 1);
      if (!--v14) {
        goto LABEL_64;
      }
    }
    goto LABEL_40;
  }
LABEL_64:
  long long v31 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string __p = 136315394;
    *(void *)&__p[4] = v10;
    __int16 v39 = 2080;
    long long v40 = p_str;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "Did not change user defined name from %s updated to %s", __p, 0x16u);
  }
LABEL_61:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return sub_10003AFB4((uint64_t)v33);
}

void sub_100477AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_100477B24(uint64_t a1, int a2)
{
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, a1);
  int v4 = *(unsigned __int8 *)(a1 + 1436);
  *(unsigned char *)(a1 + 1436) = a2;
  unint64_t v5 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a1, __p);
    int v6 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446466;
    int v12 = v6;
    __int16 v13 = 1024;
    int v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "User routed changed: Device %{public}s, value %d", buf, 0x12u);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }
  if (v4 != a2)
  {
    sub_10003AFE8((uint64_t)v10);
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AF778);
    }
    sub_1004AA04C((os_unfair_lock_s *)off_1009F7EF8, a1, 15);
  }
  return sub_10003AFB4((uint64_t)v10);
}

void sub_100477C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100477CA4(uint64_t a1, char **a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1);
  if ((char **)(a1 + 1440) != a2) {
    sub_10048EC48((void *)(a1 + 1440), *a2, a2[1], a2[1] - *a2);
  }
  return sub_10003AFB4((uint64_t)v5);
}

void sub_100477D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100477D14@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  int v4 = *(unsigned char **)(a1 + 1440);
  unint64_t v5 = *(unsigned char **)(a1 + 1448);
  size_t v6 = v5 - v4;
  if (v5 != v4)
  {
    sub_1002B1BCC(a2, v5 - v4);
    int v7 = (char *)a2[1];
    memmove(v7, v4, v6);
    a2[1] = &v7[v6];
  }
  return sub_10003AFB4((uint64_t)v9);
}

void sub_100477DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100477DB4(uint64_t a1, uint64_t a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1);
  *(void *)(a1 + 1472) = a2;
  uint64_t v4 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v4 + 1152))(v4, a1, *(void *)(a1 + 1472));
  return sub_10003AFB4((uint64_t)v6);
}

void sub_100477E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100477E48(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(void *)(a1 + 1472);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_100477E90(uint64_t a1, int a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1);
  int v4 = *(_DWORD *)(a1 + 420);
  if (v4 != a2) {
    *(_DWORD *)(a1 + 420) = a2;
  }
  sub_10003AFE8((uint64_t)v6);
  if (v4 != a2)
  {
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AF778);
    }
    sub_1004AA04C((os_unfair_lock_s *)off_1009F7EF8, a1, 3);
  }
  return sub_10003AFB4((uint64_t)v6);
}

void sub_100477F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100477F4C(uint64_t a1, unsigned int a2, int a3, _OWORD *a4, int a5)
{
  unsigned int v25 = a2;
  v24[0] = 0;
  v24[1] = 0;
  sub_10003AED0((uint64_t)v24, a1);
  uint64_t v10 = *(void *)(a1 + 336);
  if (!v10) {
    goto LABEL_12;
  }
  uint64_t v11 = a1 + 336;
  do
  {
    unsigned int v12 = *(_DWORD *)(v10 + 28);
    BOOL v13 = v12 >= a2;
    if (v12 >= a2) {
      int v14 = (uint64_t *)v10;
    }
    else {
      int v14 = (uint64_t *)(v10 + 8);
    }
    if (v13) {
      uint64_t v11 = v10;
    }
    uint64_t v10 = *v14;
  }
  while (*v14);
  if (v11 == a1 + 336 || *(_DWORD *)(v11 + 28) > a2 || *(_DWORD *)(v11 + 32) != a3 && (a3 || a2 != 0x40000))
  {
LABEL_12:
    int v21 = &v25;
    *((_DWORD *)sub_100360348((uint64_t **)(a1 + 328), &v25, (uint64_t)&unk_1007BE9D0, &v21) + 8) = a3;
    a5 = 1;
  }
  int v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  sub_10048EF5C((uint64_t *)&v21, a1 + 328);
  if ((_OWORD *)(a1 + 352) != a4) {
    *(_OWORD *)(a1 + 352) = *a4;
  }
  sub_10003AFE8((uint64_t)v24);
  if ((a5 & sub_100040630((unsigned __int8 *)a1)) == 1)
  {
    uint64_t v15 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a1, __p);
      if (v20 >= 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446210;
      long long v27 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Writing capabilities map to disk for device %{public}s", buf, 0xCu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v17 = sub_1003708B0();
    (*(void (**)(uint64_t, uint64_t, unsigned int **))(*(void *)v17 + 248))(v17, a1, &v21);
  }
  *(unsigned char *)(a1 + 641) = 0;
  sub_1000486F0((uint64_t)&v21, v22);
  return sub_10003AFB4((uint64_t)v24);
}

void sub_10047816C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  int v8 = va_arg(va1, void *);
  uint64_t v9 = va_arg(va1, void);
  sub_1000486F0((uint64_t)va, v8);
  sub_10003AFB4((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004781A4(uint64_t a1, uint64_t *a2)
{
  int v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v5 = a2;
    }
    else {
      unint64_t v5 = (uint64_t *)*a2;
    }
    int v7 = 136315138;
    int v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Update magic paired device name to %s", (uint8_t *)&v7, 0xCu);
  }
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009AF838);
  }
  return sub_100455344((uint64_t)off_1009F7EE8, a1);
}

uint64_t sub_10047829C(uint64_t a1)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1);
  uint64_t v2 = *(void *)(a1 + 624);
  uint64_t v3 = *(void *)(a1 + 616);
  while (v2 != v3)
  {
    v2 -= 168;
    sub_10048E6FC(a1 + 632, v2);
  }
  *(void *)(a1 + 624) = v3;
  return sub_10003AFB4((uint64_t)v5);
}

uint64_t sub_100478314(uint64_t *a1, uint64_t a2)
{
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, (uint64_t)a1);
  unint64_t v4 = a1[78];
  if (v4 >= a1[79])
  {
    uint64_t v5 = sub_10048F274(a1 + 77, a2);
  }
  else
  {
    sub_10048F38C(a1[78], a2);
    uint64_t v5 = v4 + 168;
    a1[78] = v4 + 168;
  }
  a1[78] = v5;
  return sub_10003AFB4((uint64_t)v7);
}

void sub_100478398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_1004783B8(uint64_t a1, uint64_t a2)
{
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, a1);
  uint64_t v4 = *(void *)(a1 + 624);
  uint64_t v5 = *(void *)(a1 + 616);
  if (v4 != v5)
  {
    *(unsigned char *)a2 = *(unsigned char *)v5;
    sub_100616288((__n128 *)(a2 + 1), (__n128 *)(v5 + 1));
    __int16 v6 = *(_WORD *)(v5 + 18);
    *(unsigned char *)(a2 + 20) = *(unsigned char *)(v5 + 20);
    *(_WORD *)(a2 + 18) = v6;
    std::string::operator=((std::string *)(a2 + 24), (const std::string *)(v5 + 24));
    int v7 = *(_DWORD *)(v5 + 48);
    *(unsigned char *)(a2 + 52) = *(unsigned char *)(v5 + 52);
    *(_DWORD *)(a2 + 48) = v7;
    std::string::operator=((std::string *)(a2 + 56), (const std::string *)(v5 + 56));
    *(unsigned char *)(a2 + 80) = *(unsigned char *)(v5 + 80);
    std::string::operator=((std::string *)(a2 + 88), (const std::string *)(v5 + 88));
    long long v8 = *(_OWORD *)(v5 + 112);
    long long v9 = *(_OWORD *)(v5 + 128);
    long long v10 = *(_OWORD *)(v5 + 144);
    *(_DWORD *)(a2 + 159) = *(_DWORD *)(v5 + 159);
    *(_OWORD *)(a2 + 128) = v9;
    *(_OWORD *)(a2 + 144) = v10;
    *(_OWORD *)(a2 + 112) = v8;
  }
  sub_10003AFB4((uint64_t)v12);
  return v4 != v5;
}

void sub_100478498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004784AC(uint64_t a1)
{
  uint64_t v2 = sub_100017768();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v2 + 8))(v2)) {
    goto LABEL_26;
  }
  LOBYTE(v35) = 0;
  uint64_t v3 = sub_100017768();
  sub_10004191C(buf, "CATT");
  sub_10004191C(__p, "ForceDisableAll");
  (*(void (**)(uint64_t, uint8_t *, void **, long long *))(*(void *)v3 + 72))(v3, buf, __p, &v35);
  if (v37 < 0) {
    operator delete(__p[0]);
  }
  if ((char)buf[23] < 0) {
    operator delete(*(void **)buf);
  }
  if ((_BYTE)v35)
  {
    uint64_t v4 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Classic GATT service ForceDisableAll override, disabling classic att support", buf, 2u);
    }
    return 0;
  }
  v38[0] = 0;
  int v6 = *(_DWORD *)(a1 + 1072);
  if (v6 == 2)
  {
    int v8 = 1452;
  }
  else
  {
    BOOL v7 = 0;
    if (v6 != 1) {
      goto LABEL_15;
    }
    int v8 = 76;
  }
  BOOL v7 = *(_DWORD *)(a1 + 1076) == v8;
LABEL_15:
  uint64_t v9 = sub_100017768();
  sub_10004191C(buf, "CATT");
  sub_10004191C(__p, "AllowAppleDevices");
  (*(void (**)(uint64_t, uint8_t *, void **, uint8_t *))(*(void *)v9 + 72))(v9, buf, __p, v38);
  if (v37 < 0) {
    operator delete(__p[0]);
  }
  if ((char)buf[23] < 0) {
    operator delete(*(void **)buf);
  }
  if (v38[0]) {
    BOOL v10 = v7;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v11 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Classic GATT service AllowAppleDevices override, forcing classic att support", buf, 2u);
    }
    return 1;
  }
LABEL_26:
  int v12 = *(_DWORD *)(a1 + 1076);
  if (v12 != 76
    || ((unsigned int v13 = *(_DWORD *)(a1 + 1080) - 8202, v14 = v13 > 0x15, v15 = (1 << v13) & 0x20033F, !v14)
      ? (BOOL v16 = v15 == 0)
      : (BOOL v16 = 1),
        v16))
  {
    if (!*(unsigned char *)(a1 + 1069) || (*(unsigned char *)(a1 + 1090) & 0x80) == 0)
    {
      int v17 = 0;
      goto LABEL_42;
    }
  }
  int v18 = *(_DWORD *)(a1 + 1072);
  if (v18 == 2)
  {
    int v19 = 1452;
  }
  else
  {
    if (v18 != 1)
    {
      BOOL v20 = 0;
      goto LABEL_41;
    }
    int v19 = 76;
  }
  BOOL v20 = v12 == v19;
LABEL_41:
  int v17 = (*(unsigned int *)(a1 + 176) < 0x30uLL) & (0x8000001B0000uLL >> *(_DWORD *)(a1 + 176)) & v20;
LABEL_42:
  long long v35 = xmmword_1007BEC90;
  int v21 = *(_DWORD *)(a1 + 1072);
  if (v21 == 2)
  {
    int v22 = 1452;
  }
  else
  {
    if (v21 != 1) {
      goto LABEL_48;
    }
    int v22 = 76;
  }
  if (v12 == v22)
  {
    BOOL v23 = 0;
    goto LABEL_49;
  }
LABEL_48:
  BOOL v23 = sub_100478F30(a1, &v35, 4u);
LABEL_49:
  uint64_t v5 = v17 | v23;
  uint32_t v24 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v25 = v5 ? "" : "not ";
    sub_100474E18(a1, __p);
    long long v26 = v37 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315906;
    *(void *)&uint8_t buf[4] = v25;
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&unsigned char buf[14] = v26;
    *(_WORD *)&unsigned char buf[22] = 1024;
    *(_DWORD *)&uint8_t buf[24] = v17;
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = v23;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Classic GATT service is %ssupported for device %{public}s. appleDeviceAllowedForCatt %d, nonAppleWithSdpAttribute %d", buf, 0x22u);
    if (v37 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v46 = 0;
  long long v45 = 0u;
  memset(v44, 0, sizeof(v44));
  long long v42 = 0u;
  *(_OWORD *)int16x8_t v43 = 0u;
  *(_OWORD *)char v41 = 0u;
  memset(buf, 0, sizeof(buf));
  sub_1006161E0((uint64_t)&buf[1]);
  unsigned char buf[18] = 0;
  buf[20] = 0;
  BYTE2(v41[0]) = 0;
  BYTE4(v41[0]) = 0;
  DWORD1(v44[1]) = 0;
  memset(&buf[24], 0, 24);
  LOBYTE(v41[0]) = 0;
  long long v42 = 0uLL;
  v41[1] = 0;
  LOBYTE(v43[0]) = 0;
  memset(v44, 0, 19);
  v43[1] = 0;
  BYTE8(v44[1]) = 1;
  BYTE2(v46) = 0;
  *(void *)((char *)&v44[1] + 14) = 0;
  *(void *)((char *)&v44[1] + 9) = 0;
  long long v45 = 0uLL;
  *((void *)&v44[2] + 1) = 0;
  LOBYTE(v46) = 0;
  BOOL v27 = sub_1004783B8(a1, (uint64_t)buf);
  if (BYTE12(v45)) {
    BOOL v28 = v27;
  }
  else {
    BOOL v28 = 0;
  }
  int v29 = sub_100479148(a1);
  __p[0] = 0;
  __p[1] = 0;
  sub_10003AED0((uint64_t)__p, a1);
  int v30 = *(_DWORD *)(a1 + 176);
  sub_10003AFB4((uint64_t)__p);
  BOOL v31 = (v30 == 22 || v30 == 17) && *(unsigned char *)(a1 + 1068) == 0;
  if (((v28 | v29) & 1) != 0 || v31)
  {
    long long v32 = qword_100A19E50;
    uint64_t v5 = 0;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a1, __p);
      if (v37 >= 0) {
        long long v33 = __p;
      }
      else {
        long long v33 = (void **)__p[0];
      }
      *(_DWORD *)long long v38 = 136446210;
      __int16 v39 = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Override CATT feature to disable for %{public}s", v38, 0xCu);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v5 = 0;
    }
  }
  if (SHIBYTE(v44[0]) < 0) {
    operator delete(v43[1]);
  }
  if (SHIBYTE(v42) < 0) {
    operator delete(v41[1]);
  }
  if ((char)buf[47] < 0) {
    operator delete(*(void **)&buf[24]);
  }
  nullsub_95(&buf[1]);
  return v5;
}

void sub_100478A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
}

BOOL sub_100478AF4(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 1072);
  if (v1 == 2)
  {
    int v2 = 1452;
    return *(_DWORD *)(a1 + 1076) == v2;
  }
  if (v1 == 1)
  {
    int v2 = 76;
    return *(_DWORD *)(a1 + 1076) == v2;
  }
  return 0;
}

uint64_t sub_100478B2C(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 1076) != 76) {
    goto LABEL_26;
  }
  unsigned int v3 = *(_DWORD *)(a1 + 1080);
  if (v3 - 8194 > 0x1D) {
    goto LABEL_26;
  }
  int v4 = 1 << (v3 - 2);
  if ((v4 & 0x20033F00) != 0) {
    goto LABEL_4;
  }
  if ((v4 & 0x409B) == 0) {
    goto LABEL_26;
  }
  uint64_t result = 1;
  if (a2 <= 34)
  {
    if (a2 == 12) {
      return result;
    }
    if (a2 != 13)
    {
      if (a2 == 25) {
        return v3 == 8194;
      }
      goto LABEL_24;
    }
    if (v3 - 8201 > 0x16) {
      goto LABEL_26;
    }
    if (((1 << (v3 - 9)) & 0x40067E) != 0) {
      goto LABEL_4;
    }
    if (v3 == 8201) {
      return 0;
    }
LABEL_26:
    if (a2 != 32) {
      goto LABEL_29;
    }
    goto LABEL_27;
  }
  if ((a2 - 35) < 3) {
    return result;
  }
LABEL_24:
  if (v3 - 8202 > 0x15 || ((1 << (v3 - 10)) & 0x20033F) == 0) {
    goto LABEL_26;
  }
LABEL_4:
  if (a2 > 0x25) {
    goto LABEL_29;
  }
  if (((1 << a2) & 0x3800C01000) != 0) {
    return 1;
  }
  if (a2 != 1)
  {
    if (a2 != 32) {
      goto LABEL_29;
    }
LABEL_27:
    char v6 = *(unsigned char *)(a1 + 1100);
    return v6 & 1;
  }
  if (v3 >> 1 == 4103) {
    return 1;
  }
LABEL_29:
  if (!*(unsigned char *)(a1 + 1069)) {
    return 0;
  }
  uint64_t result = 0;
  switch(a2)
  {
    case 0:
      char v6 = *(unsigned char *)(a1 + 1088);
      return v6 & 1;
    case 1:
      unsigned int v8 = *(unsigned __int8 *)(a1 + 1088);
      goto LABEL_77;
    case 2:
      unsigned int v9 = *(unsigned __int8 *)(a1 + 1088);
      goto LABEL_79;
    case 3:
      unsigned int v10 = *(unsigned __int8 *)(a1 + 1088);
      goto LABEL_81;
    case 4:
      unsigned int v11 = *(unsigned __int8 *)(a1 + 1088);
      goto LABEL_83;
    case 5:
    case 6:
      unsigned int v7 = *(unsigned __int8 *)(a1 + 1088);
      goto LABEL_85;
    case 7:
      unsigned int v12 = *(unsigned __int8 *)(a1 + 1088);
      return v12 >> 7;
    case 8:
      char v6 = *(unsigned char *)(a1 + 1089);
      return v6 & 1;
    case 9:
      unsigned int v8 = *(unsigned __int8 *)(a1 + 1089);
      goto LABEL_77;
    case 10:
      unsigned int v9 = *(unsigned __int8 *)(a1 + 1089);
      goto LABEL_79;
    case 11:
      unsigned int v10 = *(unsigned __int8 *)(a1 + 1089);
      goto LABEL_81;
    case 12:
      unsigned int v11 = *(unsigned __int8 *)(a1 + 1089);
      goto LABEL_83;
    case 13:
      unsigned int v7 = *(unsigned __int8 *)(a1 + 1089);
      goto LABEL_85;
    case 14:
      unsigned int v13 = *(unsigned __int8 *)(a1 + 1089);
      goto LABEL_87;
    case 15:
      unsigned int v12 = *(unsigned __int8 *)(a1 + 1089);
      return v12 >> 7;
    case 16:
      char v6 = *(unsigned char *)(a1 + 1090);
      return v6 & 1;
    case 17:
      unsigned int v8 = *(unsigned __int8 *)(a1 + 1090);
      goto LABEL_77;
    case 19:
      unsigned int v10 = *(unsigned __int8 *)(a1 + 1090);
      goto LABEL_81;
    case 20:
      unsigned int v11 = *(unsigned __int8 *)(a1 + 1090);
      goto LABEL_83;
    case 21:
      unsigned int v7 = *(unsigned __int8 *)(a1 + 1090);
      goto LABEL_85;
    case 22:
      unsigned int v13 = *(unsigned __int8 *)(a1 + 1090);
      goto LABEL_87;
    case 23:
      unsigned int v12 = *(unsigned __int8 *)(a1 + 1090);
      return v12 >> 7;
    case 24:
      char v6 = *(unsigned char *)(a1 + 1091);
      return v6 & 1;
    case 25:
      unsigned int v8 = *(unsigned __int8 *)(a1 + 1091);
      goto LABEL_77;
    case 26:
      unsigned int v9 = *(unsigned __int8 *)(a1 + 1091);
      goto LABEL_79;
    case 27:
      unsigned int v10 = *(unsigned __int8 *)(a1 + 1091);
      goto LABEL_81;
    case 28:
      unsigned int v11 = *(unsigned __int8 *)(a1 + 1091);
      goto LABEL_83;
    case 29:
      unsigned int v7 = *(unsigned __int8 *)(a1 + 1091);
      goto LABEL_85;
    case 30:
      unsigned int v13 = *(unsigned __int8 *)(a1 + 1091);
      goto LABEL_87;
    case 31:
      return *(_DWORD *)(a1 + 1088) >> 31;
    case 33:
      unsigned int v8 = *(unsigned __int8 *)(a1 + 1100);
      goto LABEL_77;
    case 34:
      unsigned int v9 = *(unsigned __int8 *)(a1 + 1100);
      goto LABEL_79;
    case 35:
      unsigned int v7 = *(unsigned __int8 *)(a1 + 1100);
      goto LABEL_85;
    case 36:
      unsigned int v13 = *(unsigned __int8 *)(a1 + 1100);
      goto LABEL_87;
    case 37:
      unsigned int v12 = *(unsigned __int8 *)(a1 + 1100);
      return v12 >> 7;
    case 38:
      char v6 = *(unsigned char *)(a1 + 1101);
      return v6 & 1;
    case 39:
      unsigned int v8 = *(unsigned __int8 *)(a1 + 1101);
      goto LABEL_77;
    case 40:
      unsigned int v9 = *(unsigned __int8 *)(a1 + 1101);
      goto LABEL_79;
    case 41:
      unsigned int v10 = *(unsigned __int8 *)(a1 + 1101);
      goto LABEL_81;
    case 42:
      unsigned int v11 = *(unsigned __int8 *)(a1 + 1101);
      goto LABEL_83;
    case 43:
      unsigned int v7 = *(unsigned __int8 *)(a1 + 1101);
      goto LABEL_85;
    case 44:
      unsigned int v13 = *(unsigned __int8 *)(a1 + 1101);
      goto LABEL_87;
    case 45:
      char v6 = *(unsigned char *)(a1 + 1102);
      return v6 & 1;
    case 46:
      unsigned int v8 = *(unsigned __int8 *)(a1 + 1102);
LABEL_77:
      uint64_t result = (v8 >> 1) & 1;
      break;
    case 47:
      unsigned int v9 = *(unsigned __int8 *)(a1 + 1102);
LABEL_79:
      uint64_t result = (v9 >> 2) & 1;
      break;
    case 48:
      unsigned int v10 = *(unsigned __int8 *)(a1 + 1102);
LABEL_81:
      uint64_t result = (v10 >> 3) & 1;
      break;
    case 49:
      unsigned int v11 = *(unsigned __int8 *)(a1 + 1102);
LABEL_83:
      uint64_t result = (v11 >> 4) & 1;
      break;
    case 50:
      unsigned int v7 = *(unsigned __int8 *)(a1 + 1102);
LABEL_85:
      uint64_t result = (v7 >> 5) & 1;
      break;
    case 51:
      unsigned int v13 = *(unsigned __int8 *)(a1 + 1102);
LABEL_87:
      uint64_t result = (v13 >> 6) & 1;
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_100478F30(uint64_t a1, unsigned char *a2, unsigned int a3)
{
  if (*a2 != 3) {
    return 0;
  }
  v24[0] = 0;
  v24[1] = 0;
  sub_10003AED0((uint64_t)v24, a1);
  char v6 = *(void **)(a1 + 584);
  unsigned int v7 = (void *)(a1 + 592);
  if (v6 == v7)
  {
LABEL_10:
    BOOL v11 = 0;
  }
  else
  {
    while (!sub_1002D65C8(v6[4], (uint64_t)a2))
    {
      unsigned int v8 = (void *)v6[1];
      if (v8)
      {
        do
        {
          unsigned int v9 = v8;
          unsigned int v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          unsigned int v9 = (void *)v6[2];
          BOOL v10 = *v9 == (void)v6;
          char v6 = v9;
        }
        while (!v10);
      }
      char v6 = v9;
      if (v9 == v7) {
        goto LABEL_10;
      }
    }
    uint64_t v22 = 0;
    v23[0] = 0;
    v23[1] = 0;
    sub_100360748((uint64_t)&v22, (uint64_t)(v6 + 5));
    unsigned int v12 = (void *)v23[0];
    if (!v23[0]) {
      goto LABEL_21;
    }
    unsigned int v13 = v23;
    uint64_t v14 = v23[0];
    do
    {
      int v15 = (uint64_t *)v14;
      BOOL v16 = v13;
      unsigned int v17 = *(_DWORD *)(v14 + 32);
      int v18 = (uint64_t *)(v14 + 8);
      if (v17 >= a3)
      {
        int v18 = v15;
        unsigned int v13 = v15;
      }
      uint64_t v14 = *v18;
    }
    while (v14);
    if (v13 == v23) {
      goto LABEL_21;
    }
    if (v17 < a3) {
      int v15 = v16;
    }
    if (*((_DWORD *)v15 + 8) > a3) {
LABEL_21:
    }
      unsigned int v13 = v23;
    BOOL v11 = v23 != v13;
    int v19 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
    {
      BOOL v20 = "has not";
      if (v23 != v13) {
        BOOL v20 = "has";
      }
      *(_DWORD *)std::string buf = 67109378;
      unsigned int v26 = a3;
      __int16 v27 = 2082;
      BOOL v28 = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "SDP attribute 0x%04x %{public}s been found", buf, 0x12u);
      unsigned int v12 = (void *)v23[0];
    }
    sub_1000486F0((uint64_t)&v22, v12);
  }
  sub_10003AFB4((uint64_t)v24);
  return v11;
}

void sub_100479128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100479148(uint64_t a1)
{
  std::string __p = 0;
  int64_t v25 = 0;
  uint64_t v26 = 0;
  p_p = (char *)&__p;
  sub_100475F84(a1, (uint64_t)&__p);
  if (v26 >= 0) {
    int v2 = (char *)&__p + HIBYTE(v26);
  }
  else {
    int v2 = (char *)__p + v25;
  }
  if (v26 < 0) {
    p_p = (char *)__p;
  }
  while (p_p != v2)
  {
    char *p_p = __tolower(*p_p);
    ++p_p;
  }
  if (qword_1009FB288 != -1) {
    dispatch_once(&qword_1009FB288, &stru_1009AF818);
  }
  uint64_t v3 = sub_10030D7C4(qword_1009FB280, 2);
  uint64_t v22 = 0;
  v23[0] = 0;
  v23[1] = 0;
  sub_1006354A8(v3, (uint64_t *)&v22);
  int v4 = v22;
  if (v22 == v23)
  {
LABEL_42:
    uint64_t v20 = 0;
  }
  else
  {
    if (v26 >= 0) {
      uint64_t v5 = (char *)&__p;
    }
    else {
      uint64_t v5 = (char *)__p;
    }
    if (v26 >= 0) {
      int64_t v6 = HIBYTE(v26);
    }
    else {
      int64_t v6 = v25;
    }
    unsigned int v7 = &v5[v6];
    while (1)
    {
      int v8 = *((char *)v4 + 55);
      unsigned int v9 = v8 >= 0 ? v4 + 4 : (char **)v4[4];
      int64_t v10 = v8 >= 0 ? *((unsigned __int8 *)v4 + 55) : (int64_t)v4[5];
      if (!v10) {
        break;
      }
      if (v6 >= v10)
      {
        int v14 = *(unsigned __int8 *)v9;
        int64_t v15 = v6;
        BOOL v16 = v5;
        do
        {
          int64_t v17 = v15 - v10;
          if (v17 == -1) {
            break;
          }
          int v18 = (char *)memchr(v16, v14, v17 + 1);
          if (!v18) {
            break;
          }
          int v19 = v18;
          if (!memcmp(v18, v9, v10))
          {
            if (v19 == v7 || v19 - v5 == -1) {
              break;
            }
            goto LABEL_41;
          }
          BOOL v16 = v19 + 1;
          int64_t v15 = v7 - (v19 + 1);
        }
        while (v15 >= v10);
      }
      BOOL v11 = v4[1];
      if (v11)
      {
        do
        {
          unsigned int v12 = (char **)v11;
          BOOL v11 = *(char **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          unsigned int v12 = (char **)v4[2];
          BOOL v13 = *v12 == (char *)v4;
          int v4 = v12;
        }
        while (!v13);
      }
      int v4 = v12;
      if (v12 == v23) {
        goto LABEL_42;
      }
    }
LABEL_41:
    uint64_t v20 = 1;
  }
  sub_10004BA28((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v26) < 0) {
    operator delete(__p);
  }
  return v20;
}

void sub_100479348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10047936C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1068);
}

uint64_t sub_100479374(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1069)) {
    int v1 = (*(unsigned __int8 *)(a1 + 1102) >> 3) & 1;
  }
  else {
    int v1 = 0;
  }
  unsigned int v2 = _os_feature_enabled_impl();
  uint64_t v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109376;
    v5[1] = v2;
    __int16 v6 = 1024;
    int v7 = v1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Device::supportsUARPOverAACP: feature flag: %u, DID bit: %u", (uint8_t *)v5, 0xEu);
  }
  return v1 & v2;
}

uint64_t sub_10047945C(uint64_t a1)
{
  uint64_t v12 = 0;
  long long v11 = 0u;
  memset(v10, 0, sizeof(v10));
  long long v8 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v6 = 0u;
  *(_OWORD *)int v7 = 0u;
  long long v4 = 0u;
  *(_OWORD *)uint64_t v5 = 0u;
  sub_1006161E0((uint64_t)&v4 + 1);
  BYTE2(v5[0]) = 0;
  BYTE4(v5[0]) = 0;
  BYTE2(v7[0]) = 0;
  BYTE4(v7[0]) = 0;
  DWORD1(v10[1]) = 0;
  long long v6 = 0uLL;
  v5[1] = 0;
  LOBYTE(v7[0]) = 0;
  long long v8 = 0uLL;
  v7[1] = 0;
  LOBYTE(__p[0]) = 0;
  memset(v10, 0, 19);
  __p[1] = 0;
  BYTE8(v10[1]) = 1;
  BYTE2(v12) = 0;
  *(void *)((char *)&v10[1] + 14) = 0;
  *(void *)((char *)&v10[1] + 9) = 0;
  long long v11 = 0uLL;
  *((void *)&v10[2] + 1) = 0;
  LOBYTE(v12) = 0;
  LODWORD(a1) = sub_1004783B8(a1, (uint64_t)&v4);
  int v2 = BYTE14(v11);
  if (SHIBYTE(v10[0]) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[1]);
  }
  if (SHIBYTE(v6) < 0) {
    operator delete(v5[1]);
  }
  if (v2) {
    a1 = a1;
  }
  else {
    a1 = 0;
  }
  nullsub_95((char *)&v4 + 1);
  return a1;
}

void sub_100479594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004795B0(uint64_t a1)
{
  std::string __p = 0;
  int64_t v25 = 0;
  uint64_t v26 = 0;
  p_p = (char *)&__p;
  sub_100475F84(a1, (uint64_t)&__p);
  if (v26 >= 0) {
    int v2 = (char *)&__p + HIBYTE(v26);
  }
  else {
    int v2 = (char *)__p + v25;
  }
  if (v26 < 0) {
    p_p = (char *)__p;
  }
  while (p_p != v2)
  {
    char *p_p = __tolower(*p_p);
    ++p_p;
  }
  if (qword_1009FB288 != -1) {
    dispatch_once(&qword_1009FB288, &stru_1009AF818);
  }
  uint64_t v3 = sub_10030D7C4(qword_1009FB280, 2);
  uint64_t v22 = 0;
  v23[0] = 0;
  v23[1] = 0;
  sub_1006353E0(v3, (uint64_t *)&v22);
  long long v4 = v22;
  if (v22 == v23)
  {
LABEL_42:
    uint64_t v20 = 0;
  }
  else
  {
    if (v26 >= 0) {
      uint64_t v5 = (char *)&__p;
    }
    else {
      uint64_t v5 = (char *)__p;
    }
    if (v26 >= 0) {
      int64_t v6 = HIBYTE(v26);
    }
    else {
      int64_t v6 = v25;
    }
    int v7 = &v5[v6];
    while (1)
    {
      int v8 = *((char *)v4 + 55);
      unsigned int v9 = v8 >= 0 ? v4 + 4 : (char **)v4[4];
      int64_t v10 = v8 >= 0 ? *((unsigned __int8 *)v4 + 55) : (int64_t)v4[5];
      if (!v10) {
        break;
      }
      if (v6 >= v10)
      {
        int v14 = *(unsigned __int8 *)v9;
        int64_t v15 = v6;
        BOOL v16 = v5;
        do
        {
          int64_t v17 = v15 - v10;
          if (v17 == -1) {
            break;
          }
          int v18 = (char *)memchr(v16, v14, v17 + 1);
          if (!v18) {
            break;
          }
          int v19 = v18;
          if (!memcmp(v18, v9, v10))
          {
            if (v19 == v7 || v19 - v5 == -1) {
              break;
            }
            goto LABEL_41;
          }
          BOOL v16 = v19 + 1;
          int64_t v15 = v7 - (v19 + 1);
        }
        while (v15 >= v10);
      }
      long long v11 = v4[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = (char **)v11;
          long long v11 = *(char **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (char **)v4[2];
          BOOL v13 = *v12 == (char *)v4;
          long long v4 = v12;
        }
        while (!v13);
      }
      long long v4 = v12;
      if (v12 == v23) {
        goto LABEL_42;
      }
    }
LABEL_41:
    uint64_t v20 = 1;
  }
  sub_10004BA28((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v26) < 0) {
    operator delete(__p);
  }
  return v20;
}

void sub_1004797B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004797D4(uint64_t a1)
{
  std::string __p = 0;
  int64_t v25 = 0;
  uint64_t v26 = 0;
  p_p = (char *)&__p;
  sub_100475F84(a1, (uint64_t)&__p);
  if (v26 >= 0) {
    int v2 = (char *)&__p + HIBYTE(v26);
  }
  else {
    int v2 = (char *)__p + v25;
  }
  if (v26 < 0) {
    p_p = (char *)__p;
  }
  while (p_p != v2)
  {
    char *p_p = __tolower(*p_p);
    ++p_p;
  }
  if (qword_1009FB288 != -1) {
    dispatch_once(&qword_1009FB288, &stru_1009AF818);
  }
  uint64_t v3 = sub_10030D7C4(qword_1009FB280, 2);
  uint64_t v22 = 0;
  v23[0] = 0;
  v23[1] = 0;
  sub_100635444(v3, (uint64_t *)&v22);
  long long v4 = v22;
  if (v22 == v23)
  {
LABEL_42:
    uint64_t v20 = 0;
  }
  else
  {
    if (v26 >= 0) {
      uint64_t v5 = (char *)&__p;
    }
    else {
      uint64_t v5 = (char *)__p;
    }
    if (v26 >= 0) {
      int64_t v6 = HIBYTE(v26);
    }
    else {
      int64_t v6 = v25;
    }
    int v7 = &v5[v6];
    while (1)
    {
      int v8 = *((char *)v4 + 55);
      unsigned int v9 = v8 >= 0 ? v4 + 4 : (char **)v4[4];
      int64_t v10 = v8 >= 0 ? *((unsigned __int8 *)v4 + 55) : (int64_t)v4[5];
      if (!v10) {
        break;
      }
      if (v6 >= v10)
      {
        int v14 = *(unsigned __int8 *)v9;
        int64_t v15 = v6;
        BOOL v16 = v5;
        do
        {
          int64_t v17 = v15 - v10;
          if (v17 == -1) {
            break;
          }
          int v18 = (char *)memchr(v16, v14, v17 + 1);
          if (!v18) {
            break;
          }
          int v19 = v18;
          if (!memcmp(v18, v9, v10))
          {
            if (v19 == v7 || v19 - v5 == -1) {
              break;
            }
            goto LABEL_41;
          }
          BOOL v16 = v19 + 1;
          int64_t v15 = v7 - (v19 + 1);
        }
        while (v15 >= v10);
      }
      long long v11 = v4[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = (char **)v11;
          long long v11 = *(char **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (char **)v4[2];
          BOOL v13 = *v12 == (char *)v4;
          long long v4 = v12;
        }
        while (!v13);
      }
      long long v4 = v12;
      if (v12 == v23) {
        goto LABEL_42;
      }
    }
LABEL_41:
    uint64_t v20 = 1;
  }
  sub_10004BA28((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v26) < 0) {
    operator delete(__p);
  }
  return v20;
}

void sub_1004799D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004799F8(uint64_t a1)
{
  uint64_t v12 = 0;
  long long v11 = 0u;
  memset(v10, 0, sizeof(v10));
  long long v8 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v6 = 0u;
  *(_OWORD *)int v7 = 0u;
  long long v4 = 0u;
  *(_OWORD *)uint64_t v5 = 0u;
  sub_1006161E0((uint64_t)&v4 + 1);
  BYTE2(v5[0]) = 0;
  BYTE4(v5[0]) = 0;
  BYTE2(v7[0]) = 0;
  BYTE4(v7[0]) = 0;
  DWORD1(v10[1]) = 0;
  long long v6 = 0uLL;
  v5[1] = 0;
  LOBYTE(v7[0]) = 0;
  long long v8 = 0uLL;
  v7[1] = 0;
  LOBYTE(__p[0]) = 0;
  memset(v10, 0, 19);
  __p[1] = 0;
  BYTE8(v10[1]) = 1;
  BYTE2(v12) = 0;
  *(void *)((char *)&v10[1] + 14) = 0;
  *(void *)((char *)&v10[1] + 9) = 0;
  long long v11 = 0uLL;
  *((void *)&v10[2] + 1) = 0;
  LOBYTE(v12) = 0;
  LODWORD(a1) = sub_1004783B8(a1, (uint64_t)&v4);
  int v2 = HIBYTE(v11);
  if (SHIBYTE(v10[0]) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[1]);
  }
  if (SHIBYTE(v6) < 0) {
    operator delete(v5[1]);
  }
  if (v2) {
    a1 = a1;
  }
  else {
    a1 = 0;
  }
  nullsub_95((char *)&v4 + 1);
  return a1;
}

void sub_100479B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100479B4C(uint64_t a1, int a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1);
  *(_DWORD *)(a1 + 416) = a2;
  return sub_10003AFB4((uint64_t)v5);
}

uint64_t sub_100479B94(uint64_t a1)
{
  v45[0] = 0;
  v45[1] = 0;
  sub_10003AED0((uint64_t)v45, a1);
  int v2 = *(void **)(a1 + 584);
  uint64_t v3 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 344))(v3, a1);
  BOOL v4 = sub_10010CE34();
  if (v4 && (uint64_t v5 = sub_10010CDA0(0), v5))
  {
    __int16 v27 = sub_100050B4C(0x5Cu);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = "Memory Manager initialization failed\n";
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    }
    uint64_t result = sub_10010B394(v5);
    __break(1u);
  }
  else
  {
    if (v2 != (void *)(a1 + 592))
    {
      do
      {
        uint64_t v6 = v2[4];
        long long buf = 0uLL;
        uint64_t v48 = 0;
        sub_10004191C(&buf, "\n|>> ServiceClass: ");
        memset(&v44, 0, sizeof(v44));
        if (*(unsigned char *)v6 == 3)
        {
          if (*(unsigned __int16 *)(v6 + 2) > 4u) {
            int v7 = sub_100258B24(*(unsigned int **)(v6 + 8));
          }
          else {
            int v7 = sub_100258E24(*(unsigned int *)(v6 + 8));
          }
          std::string::assign(&v44, v7);
        }
        char v41 = 0;
        std::string::size_type v42 = 0;
        uint64_t v43 = 0;
        sub_10004191C(&v41, "\n");
        long long v39 = 0uLL;
        int64_t v40 = 0;
        sub_10047A158((const void **)&buf, (const void **)&v44.__r_.__value_.__l.__data_, &v46);
        if (v43 >= 0) {
          long long v8 = (const std::string::value_type *)&v41;
        }
        else {
          long long v8 = (const std::string::value_type *)v41;
        }
        if (v43 >= 0) {
          std::string::size_type v9 = HIBYTE(v43);
        }
        else {
          std::string::size_type v9 = v42;
        }
        int64_t v10 = std::string::append(&v46, v8, v9);
        long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
        int64_t v40 = v10->__r_.__value_.__r.__words[2];
        long long v39 = v11;
        v10->__r_.__value_.__l.__size_ = 0;
        v10->__r_.__value_.__r.__words[2] = 0;
        v10->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v46.__r_.__value_.__l.__data_);
        }
        uint64_t v12 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          BOOL v13 = &v39;
          if (v40 < 0) {
            BOOL v13 = (long long *)v39;
          }
          LODWORD(v46.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v46.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v46, 0xCu);
        }
        memset(&v46, 0, sizeof(v46));
        sub_100360748((uint64_t)&v46, (uint64_t)(v2 + 5));
        std::string::size_type v14 = v46.__r_.__value_.__r.__words[0];
        if ((std::string::size_type *)v46.__r_.__value_.__l.__data_ != &v46.__r_.__value_.__r.__words[1])
        {
          do
          {
            long long v38 = *(_OWORD *)(v14 + 40);
            v36[0] = 0;
            v36[1] = 0;
            uint64_t v37 = 0;
            sub_10004191C(v36, "|Attribute Key: ");
            v34[0] = 0;
            v34[1] = 0;
            uint64_t v35 = 0;
            int64_t v15 = sub_100258ACC(*(unsigned __int16 *)(v14 + 32));
            sub_10004191C(v34, (char *)v15);
            BOOL v31 = 0;
            std::string::size_type v32 = 0;
            uint64_t v33 = 0;
            sub_10004191C(&v31, "\n");
            __p[0] = 0;
            __p[1] = 0;
            int64_t v30 = 0;
            sub_10047A158((const void **)v36, (const void **)v34, &v28);
            if (v33 >= 0) {
              BOOL v16 = (const std::string::value_type *)&v31;
            }
            else {
              BOOL v16 = (const std::string::value_type *)v31;
            }
            if (v33 >= 0) {
              std::string::size_type v17 = HIBYTE(v33);
            }
            else {
              std::string::size_type v17 = v32;
            }
            int v18 = std::string::append(&v28, v16, v17);
            long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
            int64_t v30 = v18->__r_.__value_.__r.__words[2];
            *(_OWORD *)std::string __p = v19;
            v18->__r_.__value_.__l.__size_ = 0;
            v18->__r_.__value_.__r.__words[2] = 0;
            v18->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v28.__r_.__value_.__l.__data_);
            }
            if (v30 >= 0) {
              uint64_t v20 = (char *)__p;
            }
            else {
              uint64_t v20 = (char *)__p[0];
            }
            sub_100178F28((uint64_t)&v38, v20);
            if (SHIBYTE(v30) < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v33) < 0) {
              operator delete(v31);
            }
            if (SHIBYTE(v35) < 0) {
              operator delete(v34[0]);
            }
            if (SHIBYTE(v37) < 0) {
              operator delete(v36[0]);
            }
            int v21 = *(std::string **)(v14 + 8);
            if (v21)
            {
              do
              {
                uint64_t v22 = v21;
                int v21 = (std::string *)v21->__r_.__value_.__r.__words[0];
              }
              while (v21);
            }
            else
            {
              do
              {
                uint64_t v22 = *(std::string **)(v14 + 16);
                BOOL v23 = v22->__r_.__value_.__r.__words[0] == v14;
                std::string::size_type v14 = (std::string::size_type)v22;
              }
              while (!v23);
            }
            std::string::size_type v14 = (std::string::size_type)v22;
          }
          while (v22 != (std::string *)&v46.__r_.__value_.__r.__words[1]);
        }
        sub_1000486F0((uint64_t)&v46, (void *)v46.__r_.__value_.__l.__size_);
        if (SHIBYTE(v40) < 0) {
          operator delete((void *)v39);
        }
        if (SHIBYTE(v43) < 0) {
          operator delete(v41);
        }
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v44.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v48) < 0) {
          operator delete((void *)buf);
        }
        uint32_t v24 = (void *)v2[1];
        if (v24)
        {
          do
          {
            int64_t v25 = v24;
            uint32_t v24 = (void *)*v24;
          }
          while (v24);
        }
        else
        {
          do
          {
            int64_t v25 = (void *)v2[2];
            BOOL v23 = *v25 == (void)v2;
            int v2 = v25;
          }
          while (!v23);
        }
        int v2 = v25;
      }
      while (v25 != (void *)(a1 + 592));
    }
    if (v4) {
      sub_10010CE04();
    }
    return sub_10003AFB4((uint64_t)v45);
  }
  return result;
}

void sub_10047A038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  sub_10003AFB4(v58 - 176);
  _Unwind_Resume(a1);
}

uint64_t sub_10047A158@<X0>(const void **a1@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t result = sub_1002EA240((uint64_t)a3, v6 + v5);
  if (*(char *)(result + 23) >= 0) {
    long long v8 = (char *)result;
  }
  else {
    long long v8 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0) {
      std::string::size_type v9 = a1;
    }
    else {
      std::string::size_type v9 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v8, v9, v5);
  }
  int64_t v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      long long v11 = a2;
    }
    else {
      long long v11 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

uint64_t sub_10047A22C(uint64_t a1, uint64_t a2, void *a3)
{
  v41[0] = 0;
  v41[1] = 0;
  sub_10003AED0((uint64_t)v41, a1);
  size_t v6 = *(void **)(a1 + 584);
  int v7 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a1, &__p);
    long long v8 = v40 >= 0 ? &__p : (void **)__p;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Setting SDP Attributes for %{public}s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(v40) < 0) {
      operator delete(__p);
    }
  }
  if (v6 != (void *)(a1 + 592))
  {
    while (!sub_1002D65C8(v6[4], a2))
    {
      std::string::size_type v9 = (void *)v6[1];
      if (v9)
      {
        do
        {
          int64_t v10 = v9;
          std::string::size_type v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          int64_t v10 = (void *)v6[2];
          BOOL v11 = *v10 == (void)v6;
          size_t v6 = v10;
        }
        while (!v11);
      }
      size_t v6 = v10;
      if (v10 == (void *)(a1 + 592)) {
        goto LABEL_24;
      }
    }
    std::string __p = 0;
    long long v39 = 0;
    uint64_t v40 = 0;
    sub_100360748((uint64_t)&__p, (uint64_t)(v6 + 5));
    uint64_t v12 = (char *)__p;
    if (__p != &v39)
    {
      do
      {
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = *(_OWORD *)(v12 + 40);
        sub_1002D5394(&buf);
        BOOL v13 = (char *)*((void *)v12 + 1);
        if (v13)
        {
          do
          {
            std::string::size_type v14 = v13;
            BOOL v13 = *(char **)v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            std::string::size_type v14 = (char *)*((void *)v12 + 2);
            BOOL v11 = *(void *)v14 == (void)v12;
            uint64_t v12 = v14;
          }
          while (!v11);
        }
        uint64_t v12 = v14;
      }
      while (v14 != (char *)&v39);
    }
    sub_1000486F0((uint64_t)&__p, v39);
    long long v39 = 0;
    uint64_t v40 = 0;
    std::string __p = &v39;
    sub_1002D5394((unsigned char *)v6[4]);
    free((void *)v6[4]);
    sub_1003B9B30((uint64_t **)(a1 + 584), (uint64_t)v6);
    sub_1000486F0((uint64_t)&__p, v39);
  }
LABEL_24:
  std::string __p = 0;
  long long v39 = 0;
  uint64_t v40 = 0;
  sub_10004191C(&__p, "\n|>> ServiceClass: ");
  memset(&buf, 0, sizeof(buf));
  if (*(unsigned char *)a2 == 3)
  {
    if (*(unsigned __int16 *)(a2 + 2) > 4u) {
      int64_t v15 = sub_100258B24(*(unsigned int **)(a2 + 8));
    }
    else {
      int64_t v15 = sub_100258E24(*(unsigned int *)(a2 + 8));
    }
    std::string::assign(&buf, v15);
  }
  uint64_t v35 = 0;
  std::string::size_type v36 = 0;
  uint64_t v37 = 0;
  sub_10004191C(&v35, "\n");
  sub_10047A158((const void **)&__p, (const void **)&buf.__r_.__value_.__l.__data_, &v34);
  if (v37 >= 0) {
    BOOL v16 = (const std::string::value_type *)&v35;
  }
  else {
    BOOL v16 = (const std::string::value_type *)v35;
  }
  if (v37 >= 0) {
    std::string::size_type v17 = HIBYTE(v37);
  }
  else {
    std::string::size_type v17 = v36;
  }
  int v18 = std::string::append(&v34, v16, v17);
  long long v19 = (void *)v18->__r_.__value_.__r.__words[0];
  int v20 = SHIBYTE(v18->__r_.__value_.__r.__words[2]);
  v18->__r_.__value_.__r.__words[0] = 0;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  *(_OWORD *)&v34.__r_.__value_.__r.__words[1] = 0uLL;
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34.__r_.__value_.__l.__size_;
  BOOL v23 = (void *)*a3;
  int v21 = a3 + 1;
  uint64_t v22 = v23;
  if (v23 != v21)
  {
    do
    {
      unsigned int v33 = *((_DWORD *)v22 + 8);
      long long v32 = *(_OWORD *)(v22 + 5);
      long long v31 = 0uLL;
      if (sub_1002D66C8(&v31, (uint64_t)&v32))
      {
        std::string::size_type v42 = &v33;
        uint32_t v24 = sub_100360408((uint64_t **)&v34, &v33, (uint64_t)&unk_1007BE9D0, &v42);
        *(_OWORD *)(v24 + 5) = v31;
      }
      int64_t v25 = (void *)v22[1];
      if (v25)
      {
        do
        {
          uint64_t v26 = v25;
          int64_t v25 = (void *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          uint64_t v26 = (void *)v22[2];
          BOOL v11 = *v26 == (void)v22;
          uint64_t v22 = v26;
        }
        while (!v11);
      }
      uint64_t v22 = v26;
    }
    while (v26 != v21);
  }
  *(void *)&long long v31 = malloc_type_calloc(1uLL, 0x10uLL, 0x10F2040C8FBA5E1uLL);
  sub_1002D66C8((unsigned char *)v31, a2);
  *(void *)&long long v32 = &v31;
  __int16 v27 = (uint64_t **)(sub_1002CC204((uint64_t **)(a1 + 584), (unint64_t *)&v31, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v32)+ 5);
  if (v27 != (uint64_t **)&v34) {
    sub_1003604CC(v27, v34.__r_.__value_.__l.__data_, &v34.__r_.__value_.__l.__size_);
  }
  sub_10003AFE8((uint64_t)v41);
  sub_10047A790((unsigned char *)a1);
  uint64_t v28 = sub_1004AF8EC();
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472;
  void v30[2] = sub_10047ADA0;
  v30[3] = &unk_100997528;
  v30[4] = a1;
  sub_100013018(v28, v30);
  sub_1000486F0((uint64_t)&v34, (void *)v34.__r_.__value_.__l.__size_);
  if (v20 < 0) {
    operator delete(v19);
  }
  if (SHIBYTE(v37) < 0) {
    operator delete(v35);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v40) < 0) {
    operator delete(__p);
  }
  return sub_10003AFB4((uint64_t)v41);
}

void sub_10047A6D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38)
{
}

BOOL sub_10047A790(unsigned char *a1)
{
  long long v43 = xmmword_1007BECA0;
  BOOL v2 = sub_100478F30((uint64_t)a1, &v43, 0);
  if (v2)
  {
    uint64_t v40 = 0;
    char v41 = 0;
    uint64_t v42 = 0;
    uint64_t v37 = 0;
    long long v38 = 0;
    uint64_t v39 = 0;
    std::string v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    long long v31 = 0;
    long long v32 = 0;
    uint64_t v33 = 0;
    uint64_t v28 = 0;
    int v29 = 0;
    uint64_t v30 = 0;
    int64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v22 = 0;
    BOOL v23 = 0;
    uint64_t v24 = 0;
    if (sub_10047AE08((uint64_t)a1, (uint64_t)&v43, 0x205u, &v40)
      && sub_10047AE08((uint64_t)a1, (uint64_t)&v43, 0x201u, &v37))
    {
      uint64_t v3 = v40;
      if (v41 - (unsigned char *)v40 == 16) {
        int v4 = *((_DWORD *)v40 + 2);
      }
      else {
        int v4 = 0;
      }
      long long v19 = v37;
      int v18 = v38;
      if (v38 - (unsigned char *)v37 == 16) {
        int v5 = *((_DWORD *)v37 + 2);
      }
      else {
        int v5 = 0;
      }
      if (v40 != v41)
      {
        do
        {
          *(void *)std::string buf = 0;
          *(void *)&uint8_t buf[8] = 0;
          *(_OWORD *)std::string buf = *v3;
          sub_1002D5394(buf);
          ++v3;
        }
        while (v3 != (_OWORD *)v41);
        long long v19 = v37;
        int v18 = v38;
      }
      if (v19 != v18)
      {
        do
        {
          *(void *)std::string buf = 0;
          *(void *)&uint8_t buf[8] = 0;
          *(_OWORD *)std::string buf = *v19;
          sub_1002D5394(buf);
          ++v19;
        }
        while (v19 != (_OWORD *)v38);
      }
    }
    else
    {
      int v5 = 0;
      int v4 = 0;
    }
    if (sub_10047AE08((uint64_t)a1, (uint64_t)&v43, 0x202u, &v34))
    {
      int v7 = v34;
      size_t v6 = v35;
      if (v35 - (unsigned char *)v34 == 16) {
        int v8 = *((_DWORD *)v34 + 2);
      }
      else {
        int v8 = 0;
      }
      while (v7 != v6)
      {
        *(void *)std::string buf = 0;
        *(void *)&uint8_t buf[8] = 0;
        *(_OWORD *)std::string buf = *v7;
        sub_1002D5394(buf);
        ++v7;
        size_t v6 = v35;
      }
    }
    else
    {
      int v8 = 0;
    }
    if (sub_10047AE08((uint64_t)a1, (uint64_t)&v43, 0x203u, &v31))
    {
      int64_t v10 = v31;
      std::string::size_type v9 = v32;
      if (v32 - (unsigned char *)v31 == 16) {
        int v11 = *((_DWORD *)v31 + 2);
      }
      else {
        int v11 = 0;
      }
      while (v10 != v9)
      {
        *(void *)std::string buf = 0;
        *(void *)&uint8_t buf[8] = 0;
        *(_OWORD *)std::string buf = *v10;
        sub_1002D5394(buf);
        ++v10;
        std::string::size_type v9 = v32;
      }
    }
    else
    {
      int v11 = 0;
    }
    uint64_t v12 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18((uint64_t)a1, __p);
      BOOL v13 = v21 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136447234;
      *(void *)&uint8_t buf[4] = v13;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = v4;
      __int16 v45 = 1024;
      int v46 = v5;
      __int16 v47 = 1024;
      int v48 = v8;
      __int16 v49 = 1024;
      int v50 = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "storeSdpDid “%{public}s deviceId information: vidSrc 0x%x vid 0x%x pid 0x%x version 0x%x", buf, 0x24u);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }
    sub_10047C89C((uint64_t)a1, v4, v5, v8, v11);
    if (sub_10047AE08((uint64_t)a1, (uint64_t)&v43, 0xA000u, &v28))
    {
      if (v29 != v28)
      {
        if (*((_WORD *)v28 + 1) == 4)
        {
          sub_10047CC64((uint64_t)a1, *((_DWORD *)v28 + 2), 0);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
            sub_10076C2DC();
          }
          a1[1069] = 0;
        }
      }
      for (uint64_t i = v28; i != v29; ++i)
      {
        *(void *)std::string buf = 0;
        *(void *)&uint8_t buf[8] = 0;
        *(_OWORD *)std::string buf = *i;
        sub_1002D5394(buf);
      }
    }
    else
    {
      a1[1069] = 0;
    }
    if (sub_10047AE08((uint64_t)a1, (uint64_t)&v43, 0xA001u, &v22))
    {
      if (v23 != v22)
      {
        if (*((_WORD *)v22 + 1) == 8)
        {
          sub_10047CF64((uint64_t)a1, **((void **)v22 + 1), 0);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
            sub_10076C26C();
          }
          a1[1070] = 0;
        }
      }
      for (uint64_t j = v22; j != v23; ++j)
      {
        *(void *)std::string buf = 0;
        *(void *)&uint8_t buf[8] = 0;
        *(_OWORD *)std::string buf = *j;
        sub_1002D5394(buf);
      }
    }
    else
    {
      a1[1070] = 0;
    }
    if (sub_10047AE08((uint64_t)a1, (uint64_t)&v43, 0xAFFFu, &v25))
    {
      if (v26 != v25)
      {
        if (*((_WORD *)v25 + 1) == 2)
        {
          sub_10047D0F8((uint64_t)a1, *((unsigned __int16 *)v25 + 4));
        }
        else
        {
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
            sub_10076C1FC();
          }
          a1[1071] = 0;
        }
      }
      for (k = v25; k != v26; ++k)
      {
        *(void *)std::string buf = 0;
        *(void *)&uint8_t buf[8] = 0;
        *(_OWORD *)std::string buf = *k;
        sub_1002D5394(buf);
      }
    }
    else
    {
      a1[1071] = 0;
    }
    if (v22)
    {
      BOOL v23 = v22;
      operator delete(v22);
    }
    if (v25)
    {
      uint64_t v26 = v25;
      operator delete(v25);
    }
    if (v28)
    {
      int v29 = v28;
      operator delete(v28);
    }
    if (v31)
    {
      long long v32 = v31;
      operator delete(v31);
    }
    if (v34)
    {
      uint64_t v35 = v34;
      operator delete(v34);
    }
    if (v37)
    {
      long long v38 = v37;
      operator delete(v37);
    }
    if (v40)
    {
      char v41 = v40;
      operator delete(v40);
    }
  }
  return v2;
}

void sub_10047ACF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  if (a18) {
    operator delete(a18);
  }
  if (a21) {
    operator delete(a21);
  }
  if (a24) {
    operator delete(a24);
  }
  if (a27) {
    operator delete(a27);
  }
  if (a30) {
    operator delete(a30);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10047ADA0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF778);
  }
  BOOL v2 = (os_unfair_lock_s *)off_1009F7EF8;

  return sub_1004AA04C(v2, v1, 4);
}

uint64_t sub_10047AE08(uint64_t a1, uint64_t a2, unsigned int a3, void **a4)
{
  v53[0] = 0;
  v53[1] = 0;
  sub_10003AED0((uint64_t)v53, a1);
  int v8 = *(void **)(a1 + 584);
  std::string::size_type v9 = (void *)(a1 + 592);
  if (v8 != v9)
  {
    while (!sub_1002D65C8(v8[4], a2))
    {
      int64_t v10 = (void *)v8[1];
      if (v10)
      {
        do
        {
          int v11 = v10;
          int64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          int v11 = (void *)v8[2];
          BOOL v12 = *v11 == (void)v8;
          int v8 = v11;
        }
        while (!v12);
      }
      int v8 = v11;
      if (v11 == v9) {
        goto LABEL_24;
      }
    }
    uint64_t v51 = 0;
    v52[0] = 0;
    v52[1] = 0;
    sub_100360748((uint64_t)&v51, (uint64_t)(v8 + 5));
    BOOL v13 = (void *)v52[0];
    if (!v52[0]) {
      goto LABEL_21;
    }
    std::string::size_type v14 = v52;
    int64_t v15 = (uint64_t *)v52[0];
    do
    {
      BOOL v16 = v15;
      std::string::size_type v17 = v14;
      unsigned int v18 = *((_DWORD *)v15 + 8);
      if (v18 >= a3) {
        std::string::size_type v14 = v15;
      }
      else {
        ++v15;
      }
      int64_t v15 = (uint64_t *)*v15;
    }
    while (v15);
    if (v14 == v52 || (v18 >= a3 ? (long long v19 = v16) : (long long v19 = v17), *((_DWORD *)v19 + 8) > a3))
    {
LABEL_21:
      int v20 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = a3;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Couldn't find SDP attribute 0x%04x", buf, 8u);
        BOOL v13 = (void *)v52[0];
      }
      sub_1000486F0((uint64_t)&v51, v13);
      goto LABEL_24;
    }
    *(_OWORD *)std::string buf = *(_OWORD *)(v14 + 5);
    long long v50 = 0uLL;
    if (buf[0] - 6 < 2)
    {
      unsigned int v23 = *(unsigned __int16 *)&buf[2];
      if (*(_WORD *)&buf[2])
      {
        unint64_t v24 = 0;
        do
        {
          if (sub_1002D66C8(&v50, *(void *)&buf[8] + 16 * v24))
          {
            uint64_t v26 = a4[1];
            unint64_t v25 = (unint64_t)a4[2];
            if ((unint64_t)v26 >= v25)
            {
              uint64_t v28 = ((char *)v26 - (unsigned char *)*a4) >> 4;
              unint64_t v29 = v28 + 1;
              if ((unint64_t)(v28 + 1) >> 60) {
                abort();
              }
              uint64_t v30 = v25 - (void)*a4;
              if (v30 >> 3 > v29) {
                unint64_t v29 = v30 >> 3;
              }
              if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v31 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v31 = v29;
              }
              if (v31) {
                long long v32 = (char *)sub_10036C440((uint64_t)(a4 + 2), v31);
              }
              else {
                long long v32 = 0;
              }
              uint64_t v33 = &v32[16 * v28];
              *(_OWORD *)uint64_t v33 = v50;
              uint64_t v35 = (char *)*a4;
              std::string v34 = (char *)a4[1];
              uint64_t v36 = v33;
              if (v34 != *a4)
              {
                do
                {
                  *((_OWORD *)v36 - 1) = *((_OWORD *)v34 - 1);
                  v36 -= 16;
                  v34 -= 16;
                }
                while (v34 != v35);
                std::string v34 = (char *)*a4;
              }
              uint64_t v27 = v33 + 16;
              *a4 = v36;
              a4[1] = v33 + 16;
              a4[2] = &v32[16 * v31];
              if (v34) {
                operator delete(v34);
              }
            }
            else
            {
              *uint64_t v26 = v50;
              uint64_t v27 = v26 + 1;
            }
            a4[1] = v27;
            unsigned int v23 = *(unsigned __int16 *)&buf[2];
          }
          ++v24;
        }
        while (v24 < v23);
      }
LABEL_70:
      uint64_t v40 = (void *)v52[0];
      goto LABEL_71;
    }
    if (buf[0])
    {
      if (sub_1002D66C8(&v50, (uint64_t)buf))
      {
        unint64_t v37 = (unint64_t)a4[2];
        long long v38 = a4[1];
        if ((unint64_t)v38 >= v37)
        {
          uint64_t v41 = ((char *)v38 - (unsigned char *)*a4) >> 4;
          unint64_t v42 = v41 + 1;
          if ((unint64_t)(v41 + 1) >> 60) {
            abort();
          }
          uint64_t v43 = v37 - (void)*a4;
          if (v43 >> 3 > v42) {
            unint64_t v42 = v43 >> 3;
          }
          if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v44 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v42;
          }
          if (v44) {
            __int16 v45 = (char *)sub_10036C440((uint64_t)(a4 + 2), v44);
          }
          else {
            __int16 v45 = 0;
          }
          int v46 = &v45[16 * v41];
          __int16 v47 = &v45[16 * v44];
          *(_OWORD *)int v46 = v50;
          uint64_t v39 = v46 + 16;
          __int16 v49 = (char *)*a4;
          int v48 = (char *)a4[1];
          if (v48 != *a4)
          {
            do
            {
              *((_OWORD *)v46 - 1) = *((_OWORD *)v48 - 1);
              v46 -= 16;
              v48 -= 16;
            }
            while (v48 != v49);
            int v48 = (char *)*a4;
          }
          *a4 = v46;
          a4[1] = v39;
          a4[2] = v47;
          if (v48) {
            operator delete(v48);
          }
        }
        else
        {
          *long long v38 = v50;
          uint64_t v39 = v38 + 1;
        }
        a4[1] = v39;
        goto LABEL_70;
      }
      BOOL v13 = (void *)v52[0];
    }
    uint64_t v40 = v13;
LABEL_71:
    sub_1000486F0((uint64_t)&v51, v40);
    uint64_t v21 = 1;
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v21 = 0;
LABEL_25:
  sub_10003AFB4((uint64_t)v53);
  return v21;
}

void sub_10047B1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  int v7 = va_arg(va1, void *);
  uint64_t v8 = va_arg(va1, void);
  sub_1000486F0((uint64_t)va, v7);
  sub_10003AFB4((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_10047B21C(uint64_t a1, unsigned char *a2)
{
  if (*a2 != 3) {
    return 0;
  }
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, a1);
  int v4 = *(void **)(a1 + 584);
  uint64_t v5 = (void *)(a1 + 592);
  if (v4 == (void *)(a1 + 592))
  {
    BOOL v6 = 0;
  }
  else
  {
    while (1)
    {
      BOOL v6 = sub_1002D65C8(v4[4], (uint64_t)a2);
      if (v6) {
        break;
      }
      int v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          int v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          int v4 = v8;
        }
        while (!v9);
      }
      int v4 = v8;
      if (v8 == v5) {
        goto LABEL_14;
      }
    }
    BOOL v6 = 1;
  }
LABEL_14:
  sub_10003AFB4((uint64_t)v11);
  return v6;
}

void sub_10047B2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_10047B300(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  BOOL v2 = *(void *)(a1 + 600) != 0;
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_10047B350(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, a1);
  BOOL v6 = (_OWORD *)(a1 + 312);
  if ((*(void *)(a1 + 312) || *(void *)(a1 + 320)) && *(_DWORD *)(a1 + 304) == a2)
  {
    if (v6 != a3) {
      _OWORD *v6 = *a3;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 304) = a2;
    if (v6 != a3) {
      _OWORD *v6 = *a3;
    }
    sub_10003AFE8((uint64_t)v10);
    if (sub_100040630((unsigned __int8 *)a1))
    {
      int v7 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67109120;
        int v12 = a2;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Set class of device to %u", buf, 8u);
      }
      uint64_t v8 = sub_1003708B0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8 + 264))(v8, a1, a2);
    }
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AF778);
    }
    sub_1004AA04C((os_unfair_lock_s *)off_1009F7EF8, a1, 5);
  }
  return sub_10003AFB4((uint64_t)v10);
}

void sub_10047B4EC(_Unwind_Exception *exception_object)
{
}

unsigned __int16 *sub_10047B508(_WORD *a1, uint64_t a2, __int16 a3, __int16 a4, __int16 a5, __int16 a6)
{
  sub_100049EE0((uint64_t)(a1 + 504), a2);
  a1[512] = a3;
  a1[513] = a4;
  a1[514] = a5;
  a1[515] = a6;

  return sub_10047B574((uint64_t)a1);
}

unsigned __int16 *sub_10047B574(uint64_t a1)
{
  BOOL v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Updating HID Device Types", v12, 2u);
  }
  uint64_t result = (unsigned __int16 *)sub_10004A6E4(a1 + 1008);
  if (result)
  {
    int v4 = *(unsigned __int16 *)(a1 + 1026);
    int v5 = *(unsigned __int16 *)(a1 + 1024);
    int v6 = *(unsigned __int16 *)(a1 + 1028);
  }
  else
  {
    if (!*(unsigned char *)(a1 + 1068)) {
      return result;
    }
    int v4 = *(_DWORD *)(a1 + 1072);
    int v5 = *(_DWORD *)(a1 + 1076);
    int v6 = *(_DWORD *)(a1 + 1080);
  }
  uint64_t v7 = qword_100A19C28;
  for (uint64_t i = qword_100A19C30; v7 != i; v7 += 40)
  {
    uint64_t result = (unsigned __int16 *)sub_10026CEEC((uint64_t)&unk_100A19BE0, (int *)v7);
    if (v4 == *result)
    {
      uint64_t result = (unsigned __int16 *)sub_10026CEEC((uint64_t)&unk_100A19BF8, (int *)(v7 + 4));
      if (v5 == *result)
      {
        int64_t v10 = *(int **)(v7 + 8);
        BOOL v9 = *(int **)(v7 + 16);
        if (v9 != v10)
        {
          while (1)
          {
            uint64_t result = (unsigned __int16 *)sub_10026CEEC((uint64_t)&unk_100A19C10, v10);
            if (v6 == *result) {
              break;
            }
            if (++v10 == v9) {
              goto LABEL_16;
            }
          }
        }
        unsigned int v11 = *(_DWORD *)(v7 + 32);
        if (v11 >= 0x20) {
          abort();
        }
        *(void *)(a1 + 776) |= 1 << v11;
      }
    }
LABEL_16:
    ;
  }
  return result;
}

BOOL sub_10047B6EC(_WORD *a1, uint64_t a2, _WORD *a3, _WORD *a4, _WORD *a5, _WORD *a6)
{
  uint64_t v12 = (uint64_t)(a1 + 504);
  if (sub_10004A6E4((uint64_t)(a1 + 504)))
  {
    sub_100049EE0(a2, v12);
    *a3 = a1[512];
    *a4 = a1[513];
    *a5 = a1[514];
    *a6 = a1[515];
  }
  return sub_10004A6E4(v12) != 0;
}

BOOL sub_10047B784(uint64_t a1)
{
  return sub_10004A6E4(a1 + 1008) != 0;
}

BOOL sub_10047B7A8(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  int v5 = *(unsigned __int8 *)(a1 + 1068);
  if (*(unsigned char *)(a1 + 1068))
  {
    *a2 = *(_DWORD *)(a1 + 1072);
    *a3 = *(_DWORD *)(a1 + 1076);
    *a4 = *(_DWORD *)(a1 + 1080);
    *a5 = *(_DWORD *)(a1 + 1084);
  }
  return v5 != 0;
}

uint64_t sub_10047B7DC(uint64_t a1)
{
  return *(_DWORD *)(a1 + 776) & 1;
}

uint64_t sub_10047B7E8(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 776) >> 2) & 1;
}

uint64_t sub_10047B7F4(uint64_t a1)
{
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1);
  int v2 = *(_DWORD *)(a1 + 176);
  sub_10003AFB4((uint64_t)v7);
  if (v2 != 26) {
    return 0;
  }
  unint64_t v3 = *(void *)(a1 + 776);
  BOOL v4 = (v3 & 0x2E800) == 0;
  uint64_t v5 = (v3 >> 18) & 1;
  if (v4) {
    return v5;
  }
  else {
    return 1;
  }
}

uint64_t sub_10047B864(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  int v2 = *(_DWORD *)(a1 + 176);
  sub_10003AFB4((uint64_t)v4);
  if (v2 != 26) {
    return 0;
  }
  if ((*(void *)(a1 + 776) & 0x3000) != 0) {
    return 1;
  }
  return (*(void *)(a1 + 776) >> 14) & 1;
}

uint64_t sub_10047B8CC(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 776) >> 4) & 1;
}

uint64_t sub_10047B8D8(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 776) >> 5) & 1;
}

uint64_t sub_10047B8E4(uint64_t a1)
{
  return *(unsigned char *)(a1 + 777) & 1;
}

uint64_t sub_10047B8F0(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 777) >> 1) & 1;
}

BOOL sub_10047B8FC(uint64_t a1)
{
  return (*(unsigned char *)(a1 + 777) & 3) != 0;
}

uint64_t sub_10047B90C(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 777) >> 2) & 1;
}

uint64_t sub_10047B918(uint64_t a1)
{
  uint64_t result = sub_10004A6E4(a1 + 1008);
  if (result) {
    return *(unsigned __int16 *)(a1 + 1030) > 0x100u;
  }
  return result;
}

uint64_t sub_10047B950(uint64_t a1)
{
  if (_os_feature_enabled_impl()) {
    return 1;
  }
  unsigned __int8 v12 = 0;
  uint64_t v3 = sub_100017768();
  sub_10004191C(buf, "HID");
  sub_10004191C(__p, "EnableGamepads");
  (*(void (**)(uint64_t, uint8_t *, void **, unsigned __int8 *))(*(void *)v3 + 72))(v3, buf, __p, &v12);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(*(void **)buf);
  }
  unint64_t v4 = *(void *)(a1 + 776);
  int v5 = v12;
  if ((v4 & 0x26800) != 0)
  {
    LODWORD(v6) = 1;
  }
  else
  {
    uint64_t v6 = (v4 >> 15) & 1;
    if ((v4 & 0x8000) == 0 && v12)
    {
      uint64_t v7 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Bypassing MFi gamepad authentication", buf, 2u);
        LODWORD(v6) = 0;
        int v5 = v12;
      }
      else
      {
        LODWORD(v6) = 0;
        int v5 = 1;
      }
    }
  }
  if (v5) {
    return 1;
  }
  else {
    return v6;
  }
}

void sub_10047BAA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10047BAD8(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 778) >> 1) & 1;
}

uint64_t sub_10047BAE4(uint64_t a1)
{
  return *(unsigned char *)(a1 + 778) & 1;
}

uint64_t sub_10047BAF0(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 778) >> 2) & 1;
}

uint64_t sub_10047BAFC(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 778) >> 4) & 1;
}

uint64_t sub_10047BB08(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 778) >> 5) & 1;
}

void sub_10047BB14(uint64_t a1)
{
  int v2 = &off_100998428;
  uint64_t v3 = 0;
  sub_100049EE0(a1 + 1008, (uint64_t)&v2);
  int v2 = &off_100998428;
  if (v3) {
    sub_1000368F4(v3);
  }
  *(void *)(a1 + 1024) = 0;
}

void sub_10047BB80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10) {
    sub_1000368F4(a10);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_10047BB9C(unsigned char *result, char a2, char a3)
{
  result[994] = 1;
  result[995] = a2;
  result[1004] = a3;
  return result;
}

BOOL sub_10047BBB0(unsigned char *a1, unsigned char *a2, unsigned char *a3)
{
  if (!a1[994]) {
    return 0;
  }
  *a2 = a1[995];
  *a3 = a1[1004];
  return a1[994] != 0;
}

uint64_t sub_10047BBE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1168) += a2;
  return result;
}

uint64_t sub_10047BBFC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1160) += a2;
  return result;
}

BOOL sub_10047BC18(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  BOOL v2 = *(unsigned __int8 *)(a1 + 996) != 255;
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_10047BC68(uint64_t a1, uint64_t a2)
{
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1);
  *(unsigned char *)(a1 + 996) = a2;
  uint64_t v4 = sub_1003708B0();
  int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 1392))(v4, a1, a2);
  uint64_t v6 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109376;
    int v10 = a2;
    __int16 v11 = 1024;
    int v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "setEncryptionKeySize to %d with result %d", buf, 0xEu);
  }
  return sub_10003AFB4((uint64_t)v8);
}

void sub_10047BD7C(_Unwind_Exception *exception_object)
{
}

uint64_t sub_10047BD98(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 996);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

BOOL sub_10047BDE0(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  BOOL v2 = *(unsigned __int8 *)(a1 + 997) != 255;
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_10047BE30(uint64_t a1, uint64_t a2)
{
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1);
  *(unsigned char *)(a1 + 997) = a2;
  uint64_t v4 = sub_1003708B0();
  int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 1408))(v4, a1, a2);
  uint64_t v6 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109376;
    int v10 = a2;
    __int16 v11 = 1024;
    int v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "setEncryptionMode to %d with result %d", buf, 0xEu);
  }
  return sub_10003AFB4((uint64_t)v8);
}

void sub_10047BF44(_Unwind_Exception *exception_object)
{
}

uint64_t sub_10047BF60(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 997);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_10047BFA8(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 1000) = a2;
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)sub_1003708B0() + 1424);

  return v2();
}

uint64_t sub_10047C010(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1000);
}

void sub_10047C018(uint64_t a1, int a2)
{
  if (sub_10004A6E4(a1 + 1008))
  {
    *(_DWORD *)(a1 + 1364) = a2;
    uint64_t v4 = *(void (**)(void))(*(void *)sub_1003708B0() + 1440);
    v4();
  }
  else
  {
    int v5 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076C34C(a1, v5);
    }
  }
}

uint64_t sub_10047C0C8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1364);
}

uint64_t sub_10047C0D0(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 1068);
  uint64_t v3 = qword_100A19E50;
  BOOL v4 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      sub_100475EE0(a1, (uint64_t)__p);
      if (v15 >= 0) {
        int v5 = __p;
      }
      else {
        int v5 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446466;
      long long v19 = "BOOL BT::Device::isDeviceSupported()";
      __int16 v20 = 2082;
      uint64_t v21 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}s - “%{public}s” has deviceID - calling CBUtil isDeviceSupported:", buf, 0x16u);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
    }
    v16[0] = @"DeviceType";
    uint64_t v6 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 176)];
    v17[0] = v6;
    v16[1] = @"VendorIDSrc";
    uint64_t v7 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 1072)];
    v17[1] = v7;
    void v16[2] = @"VendorID";
    uint64_t v8 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 1076)];
    void v17[2] = v8;
    void v16[3] = @"ProductID";
    char v9 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 1080)];
    v17[3] = v9;
    int v10 = +[NSDictionary dictionaryWithObjects:v17 forKeys:v16 count:4];
    id v11 = +[CBUtil isDeviceSupported:v10];
  }
  else
  {
    if (v4)
    {
      sub_100475EE0(a1, (uint64_t)__p);
      int v12 = v15 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136446466;
      long long v19 = "BOOL BT::Device::isDeviceSupported()";
      __int16 v20 = 2082;
      uint64_t v21 = v12;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}s - “%{public}s” no deviceID - returning true", buf, 0x16u);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
    }
    return 1;
  }
  return (uint64_t)v11;
}

void sub_10047C340(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10047C388(uint64_t a1)
{
  if (qword_1009FB288 != -1) {
    dispatch_once(&qword_1009FB288, &stru_1009AF818);
  }
  uint64_t v2 = sub_10030D7C4(qword_1009FB280, 2);
  uint64_t v16 = 0;
  std::string::size_type v17 = 0;
  uint64_t v18 = 0;
  sub_10063550C(v2, &v16);
  uint64_t v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEBUG))
  {
    int v11 = *(_DWORD *)(a1 + 1072);
    int v12 = *(_DWORD *)(a1 + 1076);
    sub_100474E18(a1, __p);
    if (v15 >= 0) {
      BOOL v13 = __p;
    }
    else {
      BOOL v13 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 67109634;
    int v20 = v11;
    __int16 v21 = 1024;
    int v22 = v12;
    __int16 v23 = 2082;
    unint64_t v24 = v13;
    _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Identification - isVendorWithInvalidOUIs looking for vidSrc: %d and vendorID: %d for device %{public}s", buf, 0x18u);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }
  if (v17)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 1072);
    unsigned int v5 = *(_DWORD *)(a1 + 1076);
    uint64_t v6 = v17;
    while (1)
    {
      unsigned int v7 = *((_DWORD *)v6 + 7);
      if (v4 >= v7)
      {
        if (v7 < v4) {
          goto LABEL_10;
        }
        unsigned int v8 = *((_DWORD *)v6 + 8);
        if (v5 >= v8) {
          break;
        }
      }
LABEL_11:
      uint64_t v6 = (void *)*v6;
      if (!v6) {
        goto LABEL_12;
      }
    }
    if (v8 >= v5)
    {
      uint64_t v9 = 1;
      goto LABEL_13;
    }
LABEL_10:
    ++v6;
    goto LABEL_11;
  }
LABEL_12:
  uint64_t v9 = 0;
LABEL_13:
  sub_1000486F0((uint64_t)&v16, v17);
  return v9;
}

void sub_10047C538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
}

uint64_t sub_10047C558(uint64_t result, __int16 a2, int a3)
{
  if (a3 == 8194)
  {
    uint64_t v3 = result;
    if (*(unsigned char *)(result + 1069))
    {
      if ((a2 & 0x4000) != 0 && (*(_DWORD *)(result + 1088) & 0x4000) == 0)
      {
        unsigned int v4 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          sub_100474E18(v3, &__p);
          if (v10 >= 0) {
            p_p = &__p;
          }
          else {
            p_p = __p;
          }
          *(_DWORD *)std::string buf = 136446210;
          int v12 = p_p;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Upgrading Device %{public}s to enhanced double tap", buf, 0xCu);
          if (v10 < 0) {
            operator delete(__p);
          }
        }
        std::string __p = 0;
        uint64_t v9 = 0;
        sub_10003AED0((uint64_t)&__p, v3);
        int v6 = *(_DWORD *)(v3 + 792);
        sub_10003AFB4((uint64_t)&__p);
        std::string __p = 0;
        uint64_t v9 = 0;
        sub_10003AED0((uint64_t)&__p, v3);
        int v7 = *(_DWORD *)(v3 + 792);
        sub_10003AFB4((uint64_t)&__p);
        return sub_10047C6E0(v3, v6 | (v7 << 8));
      }
    }
  }
  return result;
}

uint64_t sub_10047C698(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 792);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_10047C6E0(uint64_t a1, int a2)
{
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, a1);
  int v4 = *(_DWORD *)(a1 + 792);
  *(_DWORD *)(a1 + 792) = a2;
  uint64_t v5 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v5 + 856))(v5, a1, *(unsigned int *)(a1 + 792));
  int v6 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(_DWORD *)(a1 + 792);
    sub_100474E18(a1, __p);
    unsigned int v8 = v11 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 67109378;
    int v14 = v7;
    __int16 v15 = 2082;
    uint64_t v16 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Double tap settings is set to %d for Device %{public}s", buf, 0x12u);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
  if (v4 != a2)
  {
    sub_10003AFE8((uint64_t)v12);
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AF778);
    }
    sub_1004AA04C((os_unfair_lock_s *)off_1009F7EF8, a1, 10);
  }
  return sub_10003AFB4((uint64_t)v12);
}

void sub_10047C87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10047C89C(uint64_t a1, int a2, int a3, int a4, int a5)
{
  if ((*(unsigned char *)(a1 + 572) & 2) != 0)
  {
    int v20 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a1, __p);
      __int16 v21 = v24 >= 0 ? __p : (void **)__p[0];
      int v22 = *(_DWORD *)(a1 + 572);
      *(_DWORD *)std::string buf = 136447490;
      *(void *)&uint8_t buf[4] = v21;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = a2;
      __int16 v26 = 1024;
      int v27 = a3;
      __int16 v28 = 1024;
      int v29 = a4;
      __int16 v30 = 1024;
      int v31 = a5;
      __int16 v32 = 1024;
      int v33 = v22;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Skip device ID for device %{public}s: vidSrc 0x%x vid 0x%x pid 0x%x version 0x%x GAPA 0x%x", buf, 0x2Au);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  else
  {
    *(void *)std::string buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    sub_10003AED0((uint64_t)buf, a1);
    int v10 = *(_DWORD *)(a1 + 176);
    BOOL v12 = v10 == 17 || v10 == 22;
    sub_10003AFB4((uint64_t)buf);
    if (a3 == 76 && v12)
    {
      if (qword_1009FB088 != -1) {
        dispatch_once(&qword_1009FB088, &stru_1009AF858);
      }
      uint64_t v13 = qword_1009FB080;
      sub_10004191C(buf, "DID Corruption");
      sub_100474E18(a1, __p);
      sub_1004B7DA8(0.0, v13, (uint64_t *)buf, (uint64_t *)__p);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v27) < 0) {
        operator delete(*(void **)buf);
      }
      int v14 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(a1, __p);
        __int16 v15 = v24 >= 0 ? __p : (void **)__p[0];
        int v16 = *(_DWORD *)(a1 + 1076);
        *(_DWORD *)std::string buf = 136446722;
        *(void *)&uint8_t buf[4] = v15;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = v16;
        __int16 v26 = 1024;
        int v27 = 76;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Warning: DID Corruption. Setting DID for %{public}s from 0x%x to 0x%x", buf, 0x18u);
        if (v24 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    *(unsigned char *)(a1 + 1068) = 1;
    *(_DWORD *)(a1 + 1072) = a2;
    *(_DWORD *)(a1 + 1076) = a3;
    *(_DWORD *)(a1 + 1080) = a4;
    if (a5) {
      *(_DWORD *)(a1 + 1084) = a5;
    }
    std::string::size_type v17 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a1, __p);
      uint64_t v18 = v24 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136447234;
      *(void *)&uint8_t buf[4] = v18;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = a2;
      __int16 v26 = 1024;
      int v27 = a3;
      __int16 v28 = 1024;
      int v29 = a4;
      __int16 v30 = 1024;
      int v31 = a5;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Setting device ID info for device %{public}s: vidSrc 0x%x vid 0x%x pid 0x%x version 0x%x", buf, 0x24u);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v19 = *(void *)(a1 + 520);
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
    }
    if (sub_1004761A4(a1) == 32) {
      sub_10047B574(a1);
    }
  }
}

void sub_10047CC28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_10047CC64(uint64_t a1, int a2, char a3)
{
  int v4 = *(_DWORD *)(a1 + 572);
  if ((v4 & 2) != 0)
  {
    char v11 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v15) = 67109376;
      DWORD1(v15) = a2;
      WORD4(v15) = 1024;
      *(_DWORD *)((char *)&v15 + 10) = v4;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Skip supportedFeatures 0x%x GAPA 0x%x", (uint8_t *)&v15, 0xEu);
    }
  }
  else
  {
    int v7 = *(_DWORD *)(a1 + 1088);
    unsigned int v8 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v15) = 67109120;
      DWORD1(v15) = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "supportedFeatures 0x%x", (uint8_t *)&v15, 8u);
    }
    sub_10047C558(a1, a2, *(_DWORD *)(a1 + 1080));
    *(unsigned char *)(a1 + 1069) = 1;
    *(_DWORD *)(a1 + 1088) = a2;
    if (*(_DWORD *)(a1 + 1076) == 76
      && ((v9 = *(_DWORD *)(a1 + 1080) - 8194, v9 <= 0x1D) ? (BOOL v10 = ((1 << v9) & 0x20037F9B) == 0) : (BOOL v10 = 1), !v10)
      || (a2 & 0x1000) != 0
      || (*(unsigned char *)(a1 + 1101) & 2) != 0)
    {
      *(void *)std::string buf = 0;
      sub_100026C30((uint64_t)buf);
      *(void *)&long long v15 = *(int *)buf;
      *((void *)&v15 + 1) = *(__int16 *)&buf[4];
      if (!*(_DWORD *)(a1 + 176))
      {
        BOOL v12 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Applying workaround for Apple Audio Device: BT_DEVICE_TYPE_GENERIC->BT_DEVICE_TYPE_HEADPHONES", buf, 2u);
        }
        sub_100476C08(a1, 20, &v15);
      }
      if (!*(_DWORD *)(a1 + 304))
      {
        uint64_t v13 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = 2098200;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Applying workaround for Apple Audio Device, CoD: 0->%u", buf, 8u);
        }
        sub_10047B350(a1, 2098200, &v15);
      }
      uint64_t v14 = sub_100035F54();
      if (((*(uint64_t (**)(uint64_t))(*(void *)v14 + 336))(v14) & 1) == 0) {
        sub_10047D578(a1, 0);
      }
    }
    else
    {
      sub_10047D578(a1, 1);
    }
    if ((a3 & 1) == 0 && v7 != a2)
    {
      if (qword_1009F7F00 != -1) {
        dispatch_once(&qword_1009F7F00, &stru_1009AF778);
      }
      sub_1004AA04C((os_unfair_lock_s *)off_1009F7EF8, a1, 4099);
    }
  }
}

void sub_10047CF64(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v4 = HIDWORD(a2);
  int v5 = *(_DWORD *)(a1 + 572);
  if ((v5 & 2) != 0)
  {
    BOOL v10 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 67109632;
      int v12 = a2;
      __int16 v13 = 1024;
      int v14 = v4;
      __int16 v15 = 1024;
      int v16 = v5;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Skip supportedExtendedFeatures I1: 0x%x, I2: 0x%x GAPA 0x%x", (uint8_t *)&v11, 0x14u);
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 1096);
    *(unsigned char *)(a1 + 1070) = 1;
    *(void *)(a1 + 1096) = a2;
    unsigned int v9 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 67109376;
      int v12 = a2;
      __int16 v13 = 1024;
      int v14 = v4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "supportedExtendedFeatures I1: 0x%x, I2: 0x%x", (uint8_t *)&v11, 0xEu);
    }
    if ((a3 & 1) == 0 && v8 != a2)
    {
      if (qword_1009F7F00 != -1) {
        dispatch_once(&qword_1009F7F00, &stru_1009AF778);
      }
      sub_1004AA04C((os_unfair_lock_s *)off_1009F7EF8, a1, 4099);
    }
  }
}

void sub_10047D0F8(uint64_t a1, int a2)
{
  unint64_t v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "supportedFeaturesVersion 0x%x", (uint8_t *)v5, 8u);
  }
  *(unsigned char *)(a1 + 1071) = 1;
  *(_WORD *)(a1 + 1092) = a2;
}

uint64_t sub_10047D1B4(unsigned __int8 *a1)
{
  uint64_t v20 = 0;
  long long v19 = 0u;
  memset(v18, 0, sizeof(v18));
  long long v16 = 0u;
  *(_OWORD *)std::string::size_type v17 = 0u;
  long long v14 = 0u;
  *(_OWORD *)__int16 v15 = 0u;
  long long v12 = 0u;
  *(_OWORD *)__int16 v13 = 0u;
  sub_1006161E0((uint64_t)&v12 + 1);
  BYTE2(v13[0]) = 0;
  BYTE4(v13[0]) = 0;
  BYTE2(v15[0]) = 0;
  BYTE4(v15[0]) = 0;
  HIDWORD(v18[2]) = 0;
  long long v14 = 0uLL;
  v13[1] = 0;
  LOBYTE(v15[0]) = 0;
  long long v16 = 0uLL;
  v15[1] = 0;
  LOBYTE(v17[0]) = 0;
  v18[0] = 0;
  v18[1] = 0;
  v17[1] = 0;
  *(_DWORD *)((char *)&v18[1] + 7) = 0;
  LOBYTE(v18[3]) = 1;
  BYTE2(v20) = 0;
  *(void *)((char *)&v18[3] + 6) = 0;
  *(void *)((char *)&v18[3] + 1) = 0;
  long long v19 = 0uLL;
  void v18[5] = 0;
  LOBYTE(v20) = 0;
  BOOL v2 = sub_1004783B8((uint64_t)a1, (uint64_t)&v12);
  if (BYTE13(v19)) {
    BOOL v3 = v2;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    unint64_t v4 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
    {
      sub_100474E18((uint64_t)a1, __p);
      int v5 = v9 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136446210;
      int v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Invoking Single Shot Role Switch WAR for %{public}s", buf, 0xCu);
      if (v9 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v6 = sub_10003FB34();
    if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(*(void *)v6 + 3368))(v6, 1, ((unint64_t)a1[128] << 40) | ((unint64_t)a1[129] << 32) | ((unint64_t)a1[130] << 24) | ((unint64_t)a1[131] << 16) | ((unint64_t)a1[132] << 8) | a1[133])&& os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
    {
      sub_100474E18((uint64_t)a1, __p);
      sub_10076C3F8();
    }
  }
  if (SHIBYTE(v18[1]) < 0) {
    operator delete(v17[1]);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[1]);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(v13[1]);
  }
  return nullsub_95((char *)&v12 + 1);
}

void sub_10047D40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_100276384((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10047D434(uint64_t a1, _DWORD *a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 1069);
  if (*(unsigned char *)(a1 + 1069)) {
    *a2 = *(_DWORD *)(a1 + 1088);
  }
  return v2 != 0;
}

BOOL sub_10047D450(uint64_t a1, _WORD *a2, unsigned char *a3, _WORD *a4)
{
  char v10 = 0;
  sub_10001B8E0(&v10);
  BOOL v8 = sub_10017E568(a1 + 128, a2, a3, a4) == 0;
  sub_10001B8AC(&v10);
  return v8;
}

void sub_10047D4C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

BOOL sub_10047D4D4(uint64_t a1, _DWORD *a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 1071);
  if (*(unsigned char *)(a1 + 1071)) {
    *a2 = *(unsigned __int16 *)(a1 + 1092);
  }
  return v2 != 0;
}

BOOL sub_10047D4F0(uint64_t a1, void *a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 1070);
  if (*(unsigned char *)(a1 + 1070)) {
    *a2 = *(void *)(a1 + 1096);
  }
  return v2 != 0;
}

uint64_t sub_10047D50C(uint64_t a1, int a2, int a3)
{
  if (a2 == 32)
  {
    uint64_t v3 = 0;
    *(_DWORD *)(a1 + 1100) |= a3;
  }
  else
  {
    uint64_t v3 = 2;
    if (a2 == 14 && *(unsigned char *)(a1 + 1069))
    {
      if (a3) {
        int v4 = 0x4000;
      }
      else {
        int v4 = 0;
      }
      sub_10047CC64(a1, *(_DWORD *)(a1 + 1088) & 0xFFFFBFFF | v4, 0);
      return 0;
    }
  }
  return v3;
}

uint64_t sub_10047D578(uint64_t a1, char a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1);
  *(unsigned char *)(a1 + 988) = a2;
  uint64_t v4 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v4 + 1288))(v4, a1, *(unsigned __int8 *)(a1 + 988));
  return sub_10003AFB4((uint64_t)v6);
}

void sub_10047D5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10047D60C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 992);
}

uint64_t sub_10047D614(uint64_t result, char a2)
{
  *(unsigned char *)(result + 992) = a2;
  return result;
}

BOOL sub_10047D61C(uint64_t a1)
{
  return sub_1004761A4(a1) == 0x2000;
}

void sub_10047D63C(uint64_t a1)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF778);
  }
  char v2 = sub_1004AB1F0((uint64_t)off_1009F7EF8);
  uint64_t v3 = qword_100A19E50;
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a1, &__dst);
      uint64_t v4 = v46 >= 0 ? &__dst : (long long *)__dst;
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Flushing settings to disk for device %{public}s", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(v46) < 0) {
        operator delete((void *)__dst);
      }
    }
    v44[0] = 0;
    v44[1] = 0;
    sub_10003AED0((uint64_t)v44, a1);
    long long __dst = 0uLL;
    uint64_t v46 = 0;
    if (*(char *)(a1 + 223) < 0)
    {
      sub_10003B098(&__dst, *(void **)(a1 + 200), *(void *)(a1 + 208));
    }
    else
    {
      long long __dst = *(_OWORD *)(a1 + 200);
      uint64_t v46 = *(void *)(a1 + 216);
    }
    *(void *)&long long v31 = *(void *)(a1 + 232);
    *((void *)&v31 + 1) = *(void *)(a1 + 224);
    long long buf = 0uLL;
    uint64_t v51 = 0;
    if (*(char *)(a1 + 263) < 0)
    {
      sub_10003B098(&buf, *(void **)(a1 + 240), *(void *)(a1 + 248));
    }
    else
    {
      long long buf = *(_OWORD *)(a1 + 240);
      uint64_t v51 = *(void *)(a1 + 256);
    }
    *(void *)&long long v30 = *(void *)(a1 + 272);
    *((void *)&v30 + 1) = *(void *)(a1 + 264);
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v43 = 0;
    if (*(char *)(a1 + 303) < 0)
    {
      sub_10003B098(__p, *(void **)(a1 + 280), *(void *)(a1 + 288));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 280);
      uint64_t v43 = *(void *)(a1 + 296);
    }
    unsigned int v27 = *(_DWORD *)(a1 + 304);
    *(void *)&long long v29 = *(void *)(a1 + 320);
    *((void *)&v29 + 1) = *(void *)(a1 + 312);
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    sub_10048EF5C(&v39, a1 + 328);
    *(void *)&long long v28 = *(void *)(a1 + 360);
    *((void *)&v28 + 1) = *(void *)(a1 + 352);
    *(_DWORD *)(a1 + 1328) = *(_DWORD *)(a1 + 1328) & 0xFFFFFFE0 | *(unsigned __int8 *)(a1 + 642) | (2 * *(unsigned __int8 *)(a1 + 643)) | (4 * *(unsigned __int8 *)(a1 + 644)) | (8 * *(unsigned __int8 *)(a1 + 645)) | (16 * *(unsigned __int8 *)(a1 + 646));
    unint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v32 = a1;
    uint64_t v36 = (uint64_t *)&v37;
    int v5 = *(void **)(a1 + 584);
    if (v5 != (void *)(a1 + 592))
    {
      do
      {
        v35[0] = 0;
        v35[1] = 0;
        *(void *)std::string v34 = v35;
        uint64_t v6 = (void *)v5[5];
        if (v6 != v5 + 6)
        {
          do
          {
            unsigned int v33 = *((_DWORD *)v6 + 8);
            long long v48 = *(_OWORD *)(v6 + 5);
            long long v49 = 0uLL;
            if (sub_1002D66C8(&v49, (uint64_t)&v48))
            {
              __int16 v47 = &v33;
              int v7 = sub_100360408((uint64_t **)v34, &v33, (uint64_t)&unk_1007BE9D0, &v47);
              *(_OWORD *)(v7 + 5) = v49;
            }
            BOOL v8 = (void *)v6[1];
            if (v8)
            {
              do
              {
                char v9 = v8;
                BOOL v8 = (void *)*v8;
              }
              while (v8);
            }
            else
            {
              do
              {
                char v9 = (void *)v6[2];
                BOOL v10 = *v9 == (void)v6;
                uint64_t v6 = v9;
              }
              while (!v10);
            }
            uint64_t v6 = v9;
          }
          while (v9 != v5 + 6);
        }
        *(void *)&long long v49 = 0;
        *(void *)&long long v49 = malloc_type_calloc(1uLL, 0x10uLL, 0x10F2040C8FBA5E1uLL);
        sub_1002D66C8((unsigned char *)v49, v5[4]);
        *(void *)&long long v48 = &v49;
        int v11 = (uint64_t **)(sub_1002CC204(&v36, (unint64_t *)&v49, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v48) + 5);
        if (v11 != (uint64_t **)v34) {
          sub_1003604CC(v11, *(void **)v34, v35);
        }
        sub_1000486F0((uint64_t)v34, v35[0]);
        long long v12 = (void *)v5[1];
        if (v12)
        {
          do
          {
            __int16 v13 = v12;
            long long v12 = (void *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            __int16 v13 = (void *)v5[2];
            BOOL v10 = *v13 == (void)v5;
            int v5 = v13;
          }
          while (!v10);
        }
        int v5 = v13;
      }
      while (v13 != (void *)(a1 + 592));
    }
    sub_10003AFE8((uint64_t)v44);
    if (sub_100040630((unsigned __int8 *)a1))
    {
      uint64_t v14 = sub_1003708B0();
      uint64_t v15 = v14;
      if (v31 != 0) {
        goto LABEL_44;
      }
      uint64_t v16 = HIBYTE(v46);
      if (v46 < 0) {
        uint64_t v16 = *((void *)&__dst + 1);
      }
      if (v16) {
LABEL_44:
      }
        (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v14 + 232))(v14, v32, &__dst);
      if (v30 != 0) {
        goto LABEL_49;
      }
      uint64_t v17 = HIBYTE(v51);
      if (v51 < 0) {
        uint64_t v17 = *((void *)&buf + 1);
      }
      if (v17) {
LABEL_49:
      }
        (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v15 + 40))(v15, v32, &buf);
      uint64_t v18 = (void *)HIBYTE(v43);
      if (v43 < 0) {
        uint64_t v18 = __p[1];
      }
      if (v18) {
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v15 + 216))(v15, v32, __p);
      }
      if (v29 != 0) {
        (*(void (**)(uint64_t, uint64_t, void))(*(void *)v15 + 264))(v15, v32, v27);
      }
      if (v28 == 0
        || !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v15 + 248))(v15, v32, &v39))
      {
        if (sub_10004A6E4(v32 + 1008)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 352))(v15, v32);
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 1472))(v15, v32);
        if (qword_1009FB698 != -1) {
          dispatch_once(&qword_1009FB698, &stru_1009AF878);
        }
        sub_1004C8524();
      }
      long long v19 = v37;
    }
    else
    {
      uint64_t v20 = v36;
      if (v36 != (uint64_t *)&v37)
      {
        do
        {
          __int16 v21 = (uint64_t *)v20[5];
          int v22 = v20 + 6;
          if (v21 != v20 + 6)
          {
            do
            {
              long long v48 = *(_OWORD *)(v21 + 5);
              sub_1002D5394(&v48);
              __int16 v23 = (uint64_t *)v21[1];
              if (v23)
              {
                do
                {
                  char v24 = v23;
                  __int16 v23 = (uint64_t *)*v23;
                }
                while (v23);
              }
              else
              {
                do
                {
                  char v24 = (uint64_t *)v21[2];
                  BOOL v10 = *v24 == (void)v21;
                  __int16 v21 = v24;
                }
                while (!v10);
              }
              __int16 v21 = v24;
            }
            while (v24 != v22);
          }
          sub_1000486F0((uint64_t)(v20 + 5), (void *)v20[6]);
          v20[6] = 0;
          v20[7] = 0;
          void v20[5] = (uint64_t)v22;
          sub_1002D5394((unsigned char *)v20[4]);
          free((void *)v20[4]);
          unint64_t v25 = (uint64_t *)v20[1];
          if (v25)
          {
            do
            {
              __int16 v26 = v25;
              unint64_t v25 = (uint64_t *)*v25;
            }
            while (v25);
          }
          else
          {
            do
            {
              __int16 v26 = (uint64_t *)v20[2];
              BOOL v10 = *v26 == (void)v20;
              uint64_t v20 = v26;
            }
            while (!v10);
          }
          uint64_t v20 = v26;
        }
        while (v26 != (uint64_t *)&v37);
      }
      sub_1002CBCC8((uint64_t)&v36, v37);
      long long v19 = 0;
      unint64_t v37 = 0;
      uint64_t v38 = 0;
      uint64_t v36 = (uint64_t *)&v37;
    }
    sub_1002CBCC8((uint64_t)&v36, v19);
    sub_1000486F0((uint64_t)&v39, v40);
    if (SHIBYTE(v43) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v51) < 0) {
      operator delete((void *)buf);
    }
    if (SHIBYTE(v46) < 0) {
      operator delete((void *)__dst);
    }
    sub_10003AFB4((uint64_t)v44);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
  {
    sub_10076C4B0();
  }
}

void sub_10047DFD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,void *a26,uint64_t a27,char a28,void *a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,char a38)
{
  sub_1002CBCC8((uint64_t)&a25, a26);
  sub_1000486F0((uint64_t)&a28, a29);
  if (a36 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v39 - 105) < 0) {
    operator delete(v38[10]);
  }
  if (*(char *)(v39 - 185) < 0) {
    operator delete(*v38);
  }
  sub_10003AFB4((uint64_t)&a38);
  _Unwind_Resume(a1);
}

uint64_t sub_10047E08C(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 642);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_10047E0D4(uint64_t a1, uint64_t a2)
{
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1);
  uint64_t v4 = *(void *)(a1 + 520);
  if (v4 && ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 56))(v4, a2) & 1) != 0) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 602;
  }
  sub_10003AFB4((uint64_t)v7);
  return v5;
}

void sub_10047E15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10047E170(uint64_t a1, uint64_t a2)
{
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1);
  uint64_t v4 = *(void *)(a1 + 520);
  if (!v4) {
    sub_10037336C();
  }
  int v6 = 0;
  (*(void (**)(uint64_t, int *))(*(void *)v4 + 56))(v4, &v6);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 520) + 48))(*(void *)(a1 + 520), a2);
  (*(void (**)(void))(**(void **)(a1 + 520) + 16))(*(void *)(a1 + 520));
  if (v6 != a2) {
    sub_10047E274(a1);
  }
  return sub_10003AFB4((uint64_t)v7);
}

void sub_10047E25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10047E274(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 568);
  *(_DWORD *)(a1 + 568) = v1 + 1;
  if (!v1)
  {
    uint64_t v3 = sub_1004AF8EC();
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    void v4[2] = sub_10047E77C;
    v4[3] = &unk_100997528;
    v4[4] = a1;
    sub_100013018(v3, v4);
  }
}

BOOL sub_10047E300(uint64_t a1)
{
  return *(void *)(a1 + 520) != 0;
}

uint64_t sub_10047E310(uint64_t a1, uint64_t a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1);
  uint64_t v4 = *(void *)(a1 + 520);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 64))(v4, a2);
    (*(void (**)(void))(**(void **)(a1 + 520) + 16))(*(void *)(a1 + 520));
  }
  return sub_10003AFB4((uint64_t)v6);
}

void sub_10047E3AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10047E3C0(uint64_t a1)
{
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1);
  int v6 = 0;
  uint64_t v2 = *(void *)(a1 + 520);
  if (v2)
  {
    (*(void (**)(uint64_t, int *))(*(void *)v2 + 56))(v2, &v6);
    uint64_t v3 = *(void *)(a1 + 520);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    int v4 = v6;
    *(void *)(a1 + 520) = 0;
    if (v4) {
      sub_10047E274(a1);
    }
  }
  else
  {
    *(void *)(a1 + 520) = 0;
  }
  return sub_10003AFB4((uint64_t)v7);
}

void sub_10047E47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10047E490(uint64_t a1, uint64_t a2)
{
  v19[0] = 0;
  v19[1] = 0;
  sub_10003AED0((uint64_t)v19, a1);
  int v18 = 0;
  uint64_t v4 = *(void *)(a1 + 520);
  if (!v4 || ((*(void (**)(uint64_t, int *))(*(void *)v4 + 56))(v4, &v18), int v5 = v18, v18 <= 0))
  {
    int v5 = *(_DWORD *)(a1 + 528);
    if (v5 <= 0)
    {
      int v5 = *(_DWORD *)(a1 + 560);
      int v6 = (unsigned __int8 *)(a1 + 564);
    }
    else
    {
      int v6 = (unsigned __int8 *)(a1 + 532);
    }
    int v7 = *v6;
    if (v7) {
      goto LABEL_18;
    }
  }
  int v8 = *(unsigned __int16 *)(a1 + 1028);
  unsigned int v9 = v8 - 613;
  BOOL v10 = (v8 - 613) > 0x3A || ((1 << (v8 - 101)) & 0x4A0000000000095) == 0;
  if ((!v10 || (v8 - 781) <= 0x17 && ((1 << (v8 - 13)) & 0xF80003) != 0) && *(unsigned char *)(a1 + 1296))
  {
    LOBYTE(v7) = 1;
LABEL_18:
    *(_DWORD *)a2 = v5;
    goto LABEL_19;
  }
  if (v5 >= 1)
  {
    LOBYTE(v7) = 2;
    goto LABEL_18;
  }
  *(_DWORD *)a2 = v5;
  LOBYTE(v7) = (v9 <= 0x3A && ((1 << v9) & 0x4A0000000000095) != 0
             || (v8 - 781) <= 0x17 && ((1 << (v8 - 13)) & 0xF80003) != 0)
            && *(unsigned char *)(a1 + 1296);
LABEL_19:
  *(unsigned char *)(a2 + 4) = v7;
  int v11 = *(_DWORD *)(a1 + 536);
  *(_DWORD *)(a2 + 8) = v11;
  char v12 = 2 * (v11 > 0);
  if (*(unsigned char *)(a1 + 540)) {
    char v12 = *(unsigned char *)(a1 + 540);
  }
  *(unsigned char *)(a2 + 12) = v12;
  int v13 = *(_DWORD *)(a1 + 544);
  *(_DWORD *)(a2 + 16) = v13;
  char v14 = 2 * (v13 > 0);
  if (*(unsigned char *)(a1 + 548)) {
    char v14 = *(unsigned char *)(a1 + 548);
  }
  *(unsigned char *)(a2 + 20) = v14;
  int v15 = *(_DWORD *)(a1 + 552);
  *(_DWORD *)(a2 + 24) = v15;
  char v16 = 2 * (v15 > 0);
  if (*(unsigned char *)(a1 + 556)) {
    char v16 = *(unsigned char *)(a1 + 556);
  }
  *(unsigned char *)(a2 + 28) = v16;
  return sub_10003AFB4((uint64_t)v19);
}

void sub_10047E674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10047E688(unsigned int *a1, int a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, (uint64_t)a1);
  switch(a2)
  {
    case 1:
      uint64_t v4 = a1[132];
      break;
    case 2:
      uint64_t v4 = a1[136];
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      goto LABEL_5;
    case 4:
      uint64_t v4 = a1[134];
      break;
    case 8:
      uint64_t v4 = a1[138];
      break;
    default:
      if (a2 == 16)
      {
        uint64_t v4 = a1[140];
      }
      else
      {
LABEL_5:
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
          sub_10076C4E4();
        }
        uint64_t v4 = 0xFFFFFFFFLL;
      }
      break;
  }
  sub_10003AFB4((uint64_t)v6);
  return v4;
}

uint64_t sub_10047E77C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v15[0] = 0;
  v15[1] = 0;
  sub_10003AED0((uint64_t)v15, v1);
  int v2 = *(_DWORD *)(v1 + 568);
  if (v2)
  {
    *(_DWORD *)(v1 + 568) = 0;
    int v14 = 0;
    uint64_t v3 = *(void *)(v1 + 520);
    if (v3) {
      (*(void (**)(uint64_t, int *))(*(void *)v3 + 56))(v3, &v14);
    }
    int v4 = *(_DWORD *)(v1 + 528);
    int v5 = *(_DWORD *)(v1 + 536);
    int v6 = *(_DWORD *)(v1 + 544);
    int v7 = *(_DWORD *)(v1 + 552);
    int v8 = *(_DWORD *)(v1 + 560);
    sub_10003AFE8((uint64_t)v15);
    unsigned int v9 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(v1, __p);
      BOOL v10 = v13 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)long long buf = 136448002;
      uint64_t v17 = v10;
      __int16 v18 = 1024;
      int v19 = v14;
      __int16 v20 = 1024;
      int v21 = v4;
      __int16 v22 = 1024;
      int v23 = v5;
      __int16 v24 = 1024;
      int v25 = v6;
      __int16 v26 = 1024;
      int v27 = v7;
      __int16 v28 = 1024;
      int v29 = v8;
      __int16 v30 = 1024;
      int v31 = v2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Battery changed: device %{public}s, I %d%%, S %d%%, L %d%%, R %d%%, Cs %d%%, Cm %d%%, CP %d", buf, 0x36u);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AF778);
    }
    sub_1004AA04C((os_unfair_lock_s *)off_1009F7EF8, v1, 13);
  }
  return sub_10003AFB4((uint64_t)v15);
}

void sub_10047E960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10047E984(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    v5[0] = 0;
    v5[1] = 0;
    sub_10003AED0((uint64_t)v5, a1);
    *(unsigned char *)a2 = *(_DWORD *)(a1 + 528);
    *(_DWORD *)(a2 + 4) = *(unsigned __int8 *)(a1 + 532) == 1;
    *(unsigned char *)(a2 + 16) = *(_DWORD *)(a1 + 536);
    *(_DWORD *)(a2 + 20) = *(unsigned __int8 *)(a1 + 540) == 1;
    *(unsigned char *)(a2 + 8) = *(_DWORD *)(a1 + 544);
    *(_DWORD *)(a2 + 12) = *(unsigned __int8 *)(a1 + 548) == 1;
    *(unsigned char *)(a2 + 24) = *(_DWORD *)(a1 + 552);
    *(_DWORD *)(a2 + 28) = *(unsigned __int8 *)(a1 + 556) == 1;
    *(unsigned char *)(a2 + 32) = *(_DWORD *)(a1 + 560);
    *(_DWORD *)(a2 + 36) = *(unsigned __int8 *)(a1 + 564) == 1;
    sub_10003AFB4((uint64_t)v5);
    return 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076C54C();
    }
    return 3;
  }
}

uint64_t sub_10047EA78(uint64_t a1, unsigned int a2, int a3)
{
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1);
  if (a2 < 0x65)
  {
    switch(a3)
    {
      case 1:
        int v6 = (unsigned int *)(a1 + 528);
        goto LABEL_13;
      case 2:
        int v6 = (unsigned int *)(a1 + 544);
        goto LABEL_13;
      case 3:
      case 5:
      case 6:
      case 7:
        goto LABEL_8;
      case 4:
        int v6 = (unsigned int *)(a1 + 536);
        goto LABEL_13;
      case 8:
        int v6 = (unsigned int *)(a1 + 552);
        goto LABEL_13;
      default:
        if (a3 == 16)
        {
          int v6 = (unsigned int *)(a1 + 560);
LABEL_13:
          unsigned int v7 = *v6;
          unsigned int *v6 = a2;
          if (v7 != a2) {
            sub_10047E274(a1);
          }
        }
        else
        {
LABEL_8:
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
            sub_10076C4E4();
          }
        }
        break;
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
  {
    sub_10076C580();
  }
  return sub_10003AFB4((uint64_t)v9);
}

void sub_10047EB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10047EBCC(uint64_t a1, int a2, int a3)
{
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, a1);
  switch(a3)
  {
    case 1:
      int v6 = (unsigned char *)(a1 + 532);
      goto LABEL_10;
    case 2:
      int v6 = (unsigned char *)(a1 + 548);
      goto LABEL_10;
    case 3:
    case 5:
    case 6:
    case 7:
      goto LABEL_5;
    case 4:
      int v6 = (unsigned char *)(a1 + 540);
      goto LABEL_10;
    case 8:
      int v6 = (unsigned char *)(a1 + 556);
      goto LABEL_10;
    default:
      if (a3 != 16)
      {
LABEL_5:
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
          sub_10076C4E4();
        }
LABEL_11:
        uint64_t v8 = 0;
        goto LABEL_13;
      }
      int v6 = (unsigned char *)(a1 + 564);
LABEL_10:
      int v7 = *v6;
      unsigned char *v6 = a2;
      if (v7 == a2) {
        goto LABEL_11;
      }
      sub_10047E274(a1);
      uint64_t v8 = 1;
LABEL_13:
      sub_10003AFB4((uint64_t)v10);
      return v8;
  }
}

void sub_10047ECC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10047ECFC(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 572);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_10047ED44(uint64_t a1, int a2, int a3)
{
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, a1);
  int v6 = *(_DWORD *)(a1 + 572);
  int v7 = v6 & ~a3 | a3 & a2;
  *(_DWORD *)(a1 + 572) = v7;
  if (v7 != v6)
  {
    sub_10003AFE8((uint64_t)v10);
    uint64_t v8 = sub_1003708B0();
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v8 + 1504))(v8, a1, *(unsigned int *)(a1 + 572));
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AF778);
    }
    sub_1004AA04C((os_unfair_lock_s *)off_1009F7EF8, a1, 4102);
  }
  return sub_10003AFB4((uint64_t)v10);
}

void sub_10047EE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10047EE40(uint64_t a1)
{
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1);
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a1, __p);
    if (v6 >= 0) {
      uint64_t v3 = __p;
    }
    else {
      uint64_t v3 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136446210;
    unsigned int v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Device %{public}s supports phonebook sync", buf, 0xCu);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }
  *(unsigned char *)(a1 + 642) = 1;
  return sub_10003AFB4((uint64_t)v7);
}

void sub_10047EF3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10047EF58(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 643);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_10047EFA0(uint64_t a1, int a2)
{
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, a1);
  int v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a1, __p);
    int v5 = "disabled";
    if (a2) {
      int v5 = "enabled";
    }
    if (v9 >= 0) {
      char v6 = __p;
    }
    else {
      char v6 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136315394;
    char v12 = v5;
    __int16 v13 = 2082;
    int v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Phonebook sync %s for device %{public}s", buf, 0x16u);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }
  *(unsigned char *)(a1 + 643) = a2;
  return sub_10003AFB4((uint64_t)v10);
}

void sub_10047F0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10047F0DC(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 644);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_10047F124(uint64_t a1, char a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1);
  *(unsigned char *)(a1 + 644) = a2;
  return sub_10003AFB4((uint64_t)v5);
}

uint64_t sub_10047F16C(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 645);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_10047F1B4(uint64_t a1, char a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1);
  *(unsigned char *)(a1 + 645) = a2;
  return sub_10003AFB4((uint64_t)v5);
}

uint64_t sub_10047F1FC(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 646);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_10047F244(uint64_t a1, int a2)
{
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, a1);
  int v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a1, __p);
    int v5 = "unselected";
    if (a2) {
      int v5 = "selected";
    }
    if (v9 >= 0) {
      char v6 = __p;
    }
    else {
      char v6 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136315394;
    char v12 = v5;
    __int16 v13 = 2082;
    int v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Phonebook privacy %s for device %{public}s", buf, 0x16u);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }
  *(unsigned char *)(a1 + 646) = a2;
  return sub_10003AFB4((uint64_t)v10);
}

void sub_10047F364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10047F380(uint64_t a1, char a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1);
  *(unsigned char *)(a1 + 648) = a2;
  return sub_10003AFB4((uint64_t)v5);
}

uint64_t sub_10047F3C8(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 648);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_10047F410(uint64_t a1, __int16 a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1);
  *(_WORD *)(a1 + 650) = a2;
  return sub_10003AFB4((uint64_t)v5);
}

uint64_t sub_10047F458(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int16 *)(a1 + 650);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_10047F4A0(uint64_t a1, int a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1);
  *(_DWORD *)(a1 + 852) = a2;
  return sub_10003AFB4((uint64_t)v5);
}

uint64_t sub_10047F4E8(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 852);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_10047F530(void *a1, _DWORD **a2)
{
  v18[0] = 0;
  v18[1] = 0;
  sub_10003AED0((uint64_t)v18, (uint64_t)a1);
  int v4 = (char *)a1[93];
  a1[94] = v4;
  int v5 = *a2;
  if (*a2 != a2[1])
  {
    char v6 = a1 + 95;
    do
    {
      if ((unint64_t)v4 >= *v6)
      {
        uint64_t v8 = (char *)a1[93];
        uint64_t v9 = (v4 - v8) >> 2;
        unint64_t v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 62) {
          abort();
        }
        uint64_t v11 = *v6 - (void)v8;
        if (v11 >> 1 > v10) {
          unint64_t v10 = v11 >> 1;
        }
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v10;
        }
        if (v12)
        {
          __int16 v13 = (char *)sub_1002C44F0((uint64_t)(a1 + 95), v12);
          int v4 = (char *)a1[94];
          uint64_t v8 = (char *)a1[93];
        }
        else
        {
          __int16 v13 = 0;
        }
        int v14 = &v13[4 * v9];
        *(_DWORD *)int v14 = *v5;
        int v7 = v14 + 4;
        while (v4 != v8)
        {
          int v15 = *((_DWORD *)v4 - 1);
          v4 -= 4;
          *((_DWORD *)v14 - 1) = v15;
          v14 -= 4;
        }
        a1[93] = v14;
        a1[94] = v7;
        a1[95] = &v13[4 * v12];
        if (v8) {
          operator delete(v8);
        }
      }
      else
      {
        *(_DWORD *)int v4 = *v5;
        int v7 = v4 + 4;
      }
      a1[94] = v7;
      ++v5;
      int v4 = v7;
    }
    while (v5 != a2[1]);
  }
  uint64_t v16 = sub_100372EE4();
  (*(void (**)(uint64_t))(*(void *)v16 + 24))(v16);
  return sub_10003AFB4((uint64_t)v18);
}

void sub_10047F69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10047F6B8(uint64_t a1, unsigned int a2)
{
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1);
  uint64_t v4 = *(void *)(a1 + 744);
  if (a2 >= (unint64_t)((*(void *)(a1 + 752) - v4) >> 2)) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = *(unsigned int *)(v4 + 4 * a2);
  }
  sub_10003AFB4((uint64_t)v7);
  return v5;
}

uint64_t sub_10047F724@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1);
  sub_1002EACE8(a2, a1 + 744);
  return sub_10003AFB4((uint64_t)v5);
}

void sub_10047F774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10047F788(uint64_t a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 743);
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Read fMapEnabled : %d", (uint8_t *)v5, 8u);
  }
  return *(unsigned __int8 *)(a1 + 743);
}

uint64_t sub_10047F834(uint64_t a1, int a2)
{
  uint64_t v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(a1 + 743);
    v9[0] = 67109376;
    v9[1] = v5;
    __int16 v10 = 1024;
    int v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Set mapEnabled %d -> %d", (uint8_t *)v9, 0xEu);
  }
  *(unsigned char *)(a1 + 743) = a2;
  if (a2) {
    int v6 = 32;
  }
  else {
    int v6 = 0;
  }
  *(_DWORD *)(a1 + 1328) = *(_DWORD *)(a1 + 1328) & 0xFFFFFFDF | v6;
  uint64_t v7 = *(void *)sub_1003708B0();
  return (*(uint64_t (**)(void))(v7 + 392))();
}

uint64_t sub_10047F958(uint64_t a1, int a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1);
  *(_DWORD *)(a1 + 512) = a2;
  return sub_10003AFB4((uint64_t)v5);
}

uint64_t sub_10047F9A0(uint64_t a1, _DWORD *a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1);
  *a2 = *(_DWORD *)(a1 + 512);
  sub_10003AFB4((uint64_t)v5);
  return 0;
}

BOOL sub_10047F9F0(uint64_t a1)
{
  v16[0] = 0;
  v16[1] = 0;
  sub_10003AED0((uint64_t)v16, a1);
  uint64_t v14 = 0;
  v15[0] = 0;
  v15[1] = 0;
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = xmmword_1007BECD0;
  LOWORD(v18.__r_.__value_.__r.__words[2]) = 626;
  sub_10048F7EC((uint64_t)&v14, (unsigned __int16 *)&v18, 9);
  if (*(char *)(a1 + 263) < 0)
  {
    if (!*(void *)(a1 + 248)) {
      goto LABEL_13;
    }
LABEL_5:
    uint64_t v2 = std::string::basic_string(&v18, (const std::string *)(a1 + 240), 0, 3uLL, (std::allocator<char> *)&v13);
    if (!std::string::compare(v2, "BMW"))
    {
      BOOL v3 = 1;
    }
    else
    {
      std::string::basic_string(&v13, (const std::string *)(a1 + 240), 0, 3uLL, (std::allocator<char> *)&v17);
      BOOL v3 = std::string::compare(&v13, "MB ") == 0;
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v18.__r_.__value_.__l.__data_);
      if (!v3) {
        goto LABEL_13;
      }
    }
    else if (!v3)
    {
      goto LABEL_13;
    }
    BOOL v4 = 1;
    int v5 = (void *)v15[0];
    goto LABEL_25;
  }
  if (*(unsigned char *)(a1 + 263)) {
    goto LABEL_5;
  }
LABEL_13:
  int v5 = (void *)v15[0];
  if (!v15[0]) {
    goto LABEL_23;
  }
  unsigned int v6 = *(unsigned __int16 *)(a1 + 1076);
  uint64_t v7 = v15;
  uint64_t v8 = (uint64_t *)v15[0];
  do
  {
    uint64_t v9 = v8;
    __int16 v10 = v7;
    unsigned int v11 = *((unsigned __int16 *)v8 + 13);
    if (v11 >= v6) {
      uint64_t v7 = v8;
    }
    else {
      ++v8;
    }
    uint64_t v8 = (uint64_t *)*v8;
  }
  while (v8);
  if (v7 == v15) {
    goto LABEL_23;
  }
  if (v11 < v6) {
    uint64_t v9 = v10;
  }
  if (*((unsigned __int16 *)v9 + 13) > v6) {
LABEL_23:
  }
    uint64_t v7 = v15;
  BOOL v4 = v7 != v15;
LABEL_25:
  sub_1000486F0((uint64_t)&v14, v5);
  sub_10003AFB4((uint64_t)v16);
  return v4;
}

void sub_10047FBB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void *);
  uint64_t v10 = va_arg(va1, void);
  if (*(char *)(v5 - 25) < 0) {
    operator delete(*(void **)(v5 - 48));
  }
  sub_1000486F0((uint64_t)va, v9);
  sub_10003AFB4((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_10047FC00(uint64_t a1)
{
  v14[0] = 0;
  v14[1] = 0;
  sub_10003AED0((uint64_t)v14, a1);
  if (*(char *)(a1 + 263) < 0)
  {
    if (!*(void *)(a1 + 248)) {
      goto LABEL_23;
    }
  }
  else if (!*(unsigned char *)(a1 + 263))
  {
    goto LABEL_23;
  }
  uint64_t v2 = (const std::string *)(a1 + 240);
  std::string::basic_string(&__p, v2, 0, 4uLL, (std::allocator<char> *)&v15);
  int v3 = std::string::compare(&__p, "Audi");
  int v4 = v3;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v4) {
      goto LABEL_15;
    }
  }
  else if (!v3)
  {
    goto LABEL_15;
  }
  std::string::basic_string(&__p, v2, 0, 9uLL, (std::allocator<char> *)&v15);
  int v5 = std::string::compare(&__p, "bluetouch");
  int v6 = v5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v6) {
      goto LABEL_11;
    }
  }
  else if (v5)
  {
LABEL_11:
    std::string::basic_string(&__p, v2, 0, 3uLL, (std::allocator<char> *)&v15);
    int v7 = std::string::compare(&__p, "BMW");
    int v8 = v7;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!v8) {
        goto LABEL_23;
      }
    }
    else if (!v7)
    {
      goto LABEL_23;
    }
    std::string::basic_string(&__p, v2, 0, 5uLL, (std::allocator<char> *)&v15);
    int v10 = std::string::compare(&__p, "Parrot");
    int v11 = v10;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (!v10) {
        goto LABEL_23;
      }
LABEL_21:
      std::string::basic_string(&__p, v2, 0, 5uLL, (std::allocator<char> *)&v15);
      std::string::compare(&__p, "TomTom");
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_23;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v11) {
      goto LABEL_21;
    }
LABEL_23:
    uint64_t v9 = 0;
    goto LABEL_24;
  }
LABEL_15:
  uint64_t v9 = 1;
LABEL_24:
  sub_10003AFB4((uint64_t)v14);
  return v9;
}

void sub_10047FDC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10047FDE8(uint64_t a1, int *a2)
{
  v13[0] = 0;
  v13[1] = 0;
  sub_10003AED0((uint64_t)v13, a1);
  if ((*(char *)(a1 + 263) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a1 + 263)) {
      goto LABEL_9;
    }
LABEL_5:
    int v4 = (const std::string *)(a1 + 240);
    std::string::basic_string(&__p, v4, 0, 9uLL, (std::allocator<char> *)&v14);
    int v5 = std::string::compare(&__p, "bluetouch");
    int v6 = v5;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v6) {
        goto LABEL_7;
      }
    }
    else if (v5)
    {
LABEL_7:
      std::string::basic_string(&__p, v4, 0, 3uLL, (std::allocator<char> *)&v14);
      int v7 = std::string::compare(&__p, "BMW");
      int v8 = v7;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v8) {
          goto LABEL_9;
        }
      }
      else if (v7)
      {
        goto LABEL_9;
      }
      int v10 = 33;
LABEL_14:
      *a2 = v10;
      uint64_t v9 = 1;
      goto LABEL_15;
    }
    int v10 = 25;
    goto LABEL_14;
  }
  if (*(void *)(a1 + 248)) {
    goto LABEL_5;
  }
LABEL_9:
  uint64_t v9 = 0;
LABEL_15:
  sub_10003AFB4((uint64_t)v13);
  return v9;
}

void sub_10047FEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10047FF14(uint64_t a1, uint64_t a2)
{
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1);
  int v4 = *(long long **)(a1 + 1184);
  uint64_t v5 = *(void *)(a1 + 1176);
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - v5) >> 3);
  if (v6 < 0xB) {
    goto LABEL_2;
  }
  if (*(char *)(v5 + 71) < 0)
  {
    if (!*(void *)(v5 + 56))
    {
LABEL_2:
      uint64_t v7 = 0;
      goto LABEL_10;
    }
  }
  else if (!*(unsigned char *)(v5 + 71))
  {
    goto LABEL_2;
  }
  if (a1 + 1176 != a2) {
    sub_10048E490(a2, (std::string *)v5, v4, v6);
  }
  uint64_t v7 = 1;
LABEL_10:
  sub_10003AFB4((uint64_t)v9);
  return v7;
}

void sub_10047FFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10047FFCC(uint64_t a1, uint64_t a2)
{
  v18[0] = 0;
  v18[1] = 0;
  sub_10003AED0((uint64_t)v18, a1);
  int v4 = (uint64_t *)(a1 + 1176);
  if (a1 + 1176 != a2) {
    sub_10048E490(a1 + 1176, *(std::string **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 1184) - *(void *)(a1 + 1176)) >> 3) >= 2)
  {
    unint64_t v5 = 1;
    uint64_t v6 = 24;
    do
    {
      if (qword_1009F80A0 != -1) {
        dispatch_once(&qword_1009F80A0, &stru_1009AF898);
      }
      uint64_t v7 = (uint64_t)off_1009F8098;
      memset(v17, 0, sizeof(v17));
      sub_1002B3390((char *)v17, *(long long **)(a1 + 1176), *(long long **)(a1 + 1184), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 1184) - *(void *)(a1 + 1176)) >> 3));
      LOBYTE(v7) = sub_10029E064(v7, v17, v5);
      v16[0] = (void **)v17;
      sub_100051568(v16);
      if ((v7 & 1) == 0) {
        std::string::assign((std::string *)(*v4 + v6), "");
      }
      ++v5;
      v6 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 1184) - *(void *)(a1 + 1176)) >> 3) > v5);
  }
  memset(v16, 0, sizeof(v16));
  if (sub_10047FF14(a1, (uint64_t)v16))
  {
    uint64_t v8 = *(void *)(a1 + 1176);
    if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 1184) - v8) >> 3) >= 2)
    {
      unint64_t v9 = 1;
      uint64_t v10 = 3;
      do
      {
        if (v9 != 5)
        {
          if (qword_1009F80A0 != -1) {
            dispatch_once(&qword_1009F80A0, &stru_1009AF898);
          }
          uint64_t v11 = (uint64_t)off_1009F8098;
          memset(v15, 0, sizeof(v15));
          sub_1002B3390((char *)v15, *(long long **)(a1 + 1176), *(long long **)(a1 + 1184), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 1184) - *(void *)(a1 + 1176)) >> 3));
          LOBYTE(v11) = sub_10029E064(v11, v15, v9);
          int v19 = (void ***)v15;
          sub_100051568((void ***)&v19);
          uint64_t v8 = *v4;
          if ((v11 & 1) == 0)
          {
            std::string::operator=((std::string *)(v8 + v10 * 8), (const std::string *)&v16[0][v10]);
            uint64_t v8 = *v4;
          }
        }
        ++v9;
        v10 += 3;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 1184) - v8) >> 3) > v9);
    }
  }
  uint64_t v12 = sub_1003708B0();
  memset(v14, 0, sizeof(v14));
  sub_1002B3390((char *)v14, *(long long **)(a1 + 1176), *(long long **)(a1 + 1184), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 1184) - *(void *)(a1 + 1176)) >> 3));
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v12 + 944))(v12, a1, v14);
  int v19 = (void ***)v14;
  sub_100051568((void ***)&v19);
  int v19 = v16;
  sub_100051568((void ***)&v19);
  return sub_10003AFB4((uint64_t)v18);
}

void sub_1004802D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100480344@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  v13[0] = 0;
  v13[1] = 0;
  sub_10003AED0((uint64_t)v13, a1);
  uint64_t v6 = *(void *)(a1 + 1176);
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 1184) - v6) >> 3);
  if (v7 < 0xB || v7 <= a2)
  {
    sub_10004191C(a3, "");
    return sub_10003AFB4((uint64_t)v13);
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v12 = 0;
  uint64_t v8 = (long long *)(v6 + 24 * a2);
  if (*((char *)v8 + 23) < 0)
  {
    sub_10003B098(__p, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    uint64_t v12 = *((void *)v8 + 2);
    *(_OWORD *)std::string __p = v9;
  }
  if (SHIBYTE(v12) < 0)
  {
    if (__p[1] > (void *)1)
    {
      sub_10003B098(a3, __p[0], (unint64_t)__p[1]);
      goto LABEL_14;
    }
  }
  else if (HIBYTE(v12) >= 2u)
  {
    *(_OWORD *)a3 = *(_OWORD *)__p;
    a3[2] = v12;
    goto LABEL_14;
  }
  sub_10004191C(a3, "");
LABEL_14:
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  return sub_10003AFB4((uint64_t)v13);
}

void sub_100480474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
}

uint64_t sub_1004804A4(uint64_t a1, int a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1);
  if (a2 <= 2) {
    uint64_t v3 = byte_1007BECE2[a2];
  }
  else {
    uint64_t v3 = 0;
  }
  sub_10003AFB4((uint64_t)v5);
  return v3;
}

BOOL sub_100480504(uint64_t a1)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1);
  memset(&v5, 0, sizeof(v5));
  sub_100480344(a1, 7u, &v5);
  if ((v5.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v5.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v5.__r_.__value_.__l.__size_;
  }
  if (size >= 6) {
    BOOL v3 = !std::string::compare(&v5, size - 3, 3uLL, "dev") || std::string::compare(&v5, size - 5, 5uLL, "insec") == 0;
  }
  else {
    BOOL v3 = 0;
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  sub_10003AFB4((uint64_t)v6);
  return v3;
}

void sub_1004805D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_100480604(uint64_t a1, std::string *a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1);
  if (*(char *)(a1 + 1223) < 0)
  {
    if (*(void *)(a1 + 1208)) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v4 = 0;
    goto LABEL_6;
  }
  if (!*(unsigned char *)(a1 + 1223)) {
    goto LABEL_5;
  }
LABEL_3:
  std::string::operator=(a2, (const std::string *)(a1 + 1200));
  uint64_t v4 = 1;
LABEL_6:
  sub_10003AFB4((uint64_t)v6);
  return v4;
}

void sub_100480678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10048068C(uint64_t a1, const std::string *a2)
{
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1);
  std::string::operator=((std::string *)(a1 + 1200), a2);
  uint64_t v4 = sub_1003708B0();
  if (*(char *)(a1 + 1223) < 0)
  {
    sub_10003B098(__p, *(void **)(a1 + 1200), *(void *)(a1 + 1208));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 1200);
    uint64_t v7 = *(void *)(a1 + 1216);
  }
  (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v4 + 960))(v4, a1, __p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
  return sub_10003AFB4((uint64_t)v8);
}

void sub_100480764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL sub_100480790(uint64_t a1, uint64_t a2)
{
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1);
  uint64_t v4 = *(void *)(a1 + 1240);
  if (v4)
  {
    long long v5 = *(_OWORD *)(a1 + 1224);
    *(_OWORD *)(a2 + 12) = *(_OWORD *)(a1 + 1236);
    *(_OWORD *)a2 = v5;
    std::string::operator=((std::string *)(a2 + 32), (const std::string *)(a1 + 1256));
  }
  sub_10003AFB4((uint64_t)v7);
  return v4 != 0;
}

void sub_100480810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100480824(uint64_t a1, char a2, __int16 a3, int a4, __int16 a5, char a6, uint64_t a7, int a8, const std::string *a9)
{
  v22[0] = 0;
  v22[1] = 0;
  sub_10003AED0((uint64_t)v22, a1);
  *(unsigned char *)(a1 + 1224) = a2;
  *(_WORD *)(a1 + 1226) = a3;
  *(_DWORD *)(a1 + 1228) = a4;
  *(_WORD *)(a1 + 1232) = a5;
  *(unsigned char *)(a1 + 1234) = a6;
  *(void *)(a1 + 1240) = a7;
  *(_DWORD *)(a1 + 1248) = a8;
  std::string::operator=((std::string *)(a1 + 1256), a9);
  uint64_t v17 = sub_1003708B0();
  v19[0] = *(_OWORD *)(a1 + 1224);
  *(_OWORD *)((char *)v19 + 12) = *(_OWORD *)(a1 + 1236);
  if (*(char *)(a1 + 1279) < 0)
  {
    sub_10003B098(&__p, *(void **)(a1 + 1256), *(void *)(a1 + 1264));
  }
  else
  {
    long long __p = *(_OWORD *)(a1 + 1256);
    uint64_t v21 = *(void *)(a1 + 1272);
  }
  (*(void (**)(uint64_t, uint64_t, _OWORD *))(*(void *)v17 + 976))(v17, a1, v19);
  if (SHIBYTE(v21) < 0) {
    operator delete((void *)__p);
  }
  return sub_10003AFB4((uint64_t)v22);
}

void sub_100480964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_100480990(uint64_t a1)
{
  if (qword_1009F87A8 != -1) {
    dispatch_once(&qword_1009F87A8, &stru_1009AF7F8);
  }
  uint64_t v2 = off_1009F87A0;

  return sub_10046ED10((uint64_t)v2, a1);
}

uint64_t sub_1004809F4(uint64_t a1)
{
  if (qword_1009F87A8 != -1) {
    dispatch_once(&qword_1009F87A8, &stru_1009AF7F8);
  }
  uint64_t v2 = off_1009F87A0;

  return sub_10046ED88((uint64_t)v2, a1);
}

uint64_t sub_100480A58(uint64_t a1)
{
  if (qword_1009F87A8 != -1) {
    dispatch_once(&qword_1009F87A8, &stru_1009AF7F8);
  }
  unsigned int v2 = sub_10046ED88((uint64_t)off_1009F87A0, a1);
  unsigned __int8 v3 = 0;
  if (v2)
  {
    do
    {
      v3 += v2 & 1;
      BOOL v4 = v2 > 1;
      v2 >>= 1;
    }
    while (v4);
  }
  return v3;
}

uint64_t sub_100480AD4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1312) = a2;
  *(unsigned char *)(result + 1316) = 1;
  return result;
}

void sub_100480AE4(uint64_t a1, int a2, char a3)
{
  if (!a2)
  {
    __p[0] = 0;
    __p[1] = 0;
    sub_10003AED0((uint64_t)__p, a1);
    *(unsigned char *)(a1 + 1332) = 1;
    *(void *)long long buf = 0;
    sub_100026C30((uint64_t)buf);
    uint64_t v6 = *(__int16 *)&buf[4];
    *(void *)(a1 + 1336) = *(int *)buf;
    *(void *)(a1 + 1344) = v6;
    *(unsigned char *)(a1 + 1333) = a3;
    *(unsigned char *)(a1 + 1384) = 0;
    sub_10003AFE8((uint64_t)__p);
    sub_10047D1B4((unsigned __int8 *)a1);
    sub_10003AFB4((uint64_t)__p);
  }
  uint64_t v7 = qword_100A19E50;
  if (os_signpost_enabled((os_log_t)qword_100A19E50))
  {
    sub_100474E18(a1, __p);
    if (v10 >= 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = v8;
    __int16 v12 = 1024;
    int v13 = a2;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "BTSignPost", "ACL connected for device %{public}s with result:%d", buf, 0x12u);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_100480C3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100480C5C(uint64_t a1, int a2, int a3)
{
  if (!a2)
  {
    __p[0] = 0;
    __p[1] = 0;
    sub_10003AED0((uint64_t)__p, a1);
    *(_WORD *)(a1 + 1332) = 0;
    *(unsigned char *)(a1 + 1121) = 0;
    v13[0] = 0;
    sub_100026C30((uint64_t)v13);
    if ((unint64_t)(SLODWORD(v13[0]) - *(void *)(a1 + 1336)) > 0x3C)
    {
      *(_WORD *)(a1 + 1353) = 0;
      *(_DWORD *)(a1 + 1356) = 0;
    }
    else
    {
      int v5 = *(_DWORD *)(a1 + 1356);
      if (!v5 || v5 == a3)
      {
        ++*(unsigned char *)(a1 + 1354);
      }
      else
      {
        *(unsigned char *)(a1 + 1354) = 0;
        *(_DWORD *)(a1 + 1356) = 0;
      }
      *(_DWORD *)(a1 + 1356) = a3;
      ++*(unsigned char *)(a1 + 1353);
    }
    *(void *)(a1 + 1336) = 0;
    *(void *)(a1 + 1344) = 0;
    sub_10003AFB4((uint64_t)__p);
  }
  __p[0] = 0;
  __p[1] = 0;
  sub_10003AED0((uint64_t)__p, a1);
  *(unsigned char *)(a1 + 1432) = 0;
  sub_10003AFB4((uint64_t)__p);
  char v15 = 0;
  uint64_t v6 = sub_1003708B0();
  sub_10004191C(__p, "HasTS");
  (*(void (**)(uint64_t, uint64_t, void **, char *))(*(void *)v6 + 784))(v6, a1, __p, &v15);
  if (SBYTE7(v19) < 0) {
    operator delete(__p[0]);
  }
  if (!v15)
  {
    if (*(unsigned __int8 *)(a1 + 1353) >= 5u)
    {
      *(unsigned char *)(a1 + 1353) = 0;
      uint64_t v24 = 0;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      *(_OWORD *)long long __p = 0u;
      long long v19 = 0u;
      if (sub_10048103C(a1, 0, 409, a3, (uint64_t)__p))
      {
        uint64_t v7 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          sub_100474E18(a1, v13);
          uint64_t v8 = v14 >= 0 ? v13 : (void **)v13[0];
          *(_DWORD *)long long buf = 136315138;
          uint64_t v17 = v8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Submitting contextual metric for event 'BT_CONNECTION_DISCONNECTION_RED_FLAG' for %s", buf, 0xCu);
          if (v14 < 0) {
            operator delete(v13[0]);
          }
        }
        uint64_t v9 = sub_100050530();
        (*(void (**)(uint64_t, void **, void))(*(void *)v9 + 248))(v9, __p, *(unsigned __int8 *)(a1 + 1316));
      }
    }
    if (*(unsigned __int8 *)(a1 + 1354) >= 5u)
    {
      *(unsigned char *)(a1 + 1354) = 0;
      *(_DWORD *)(a1 + 1356) = 0;
      uint64_t v24 = 0;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      *(_OWORD *)long long __p = 0u;
      long long v19 = 0u;
      if (sub_10048103C(a1, 0, 410, a3, (uint64_t)__p))
      {
        char v10 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          sub_100474E18(a1, v13);
          if (v14 >= 0) {
            uint64_t v11 = v13;
          }
          else {
            uint64_t v11 = (void **)v13[0];
          }
          *(_DWORD *)long long buf = 136315138;
          uint64_t v17 = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Submitting contextual metric for event 'BT_CONNECTION_DISCONNECTION_SAME_REASON_RED_FLAG' for %s", buf, 0xCu);
          if (v14 < 0) {
            operator delete(v13[0]);
          }
        }
        uint64_t v12 = sub_100050530();
        (*(void (**)(uint64_t, void **, void))(*(void *)v12 + 248))(v12, __p, *(unsigned __int8 *)(a1 + 1316));
      }
    }
  }
}

void sub_100480FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

uint64_t sub_100480FF4(uint64_t a1, char a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1);
  *(unsigned char *)(a1 + 1432) = a2;
  return sub_10003AFB4((uint64_t)v5);
}

uint64_t sub_10048103C(uint64_t a1, int a2, int a3, int a4, uint64_t a5)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009AF8B8);
  }
  if (*((unsigned char *)off_1009F8068 + 60))
  {
    char v36 = 0;
    sub_10001B8E0(&v36);
    *(unsigned char *)(a5 + 54) = sub_100181D84(a1 + 128);
    sub_10001B910(&v36);
    *(_DWORD *)a5 = a3;
    *(_DWORD *)(a5 + 44) = a2;
    *(_DWORD *)(a5 + 48) = a4;
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AF778);
    }
    *(unsigned char *)(a5 + 52) = sub_1004AC698((uint64_t)off_1009F7EF8);
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009AF8D8);
    }
    char v10 = sub_10004034C((uint64_t)off_1009F7EB8);
    *(unsigned char *)(a5 + 53) = [v10 count];

    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AF778);
    }
    *(void *)(a5 + 64) = *((unsigned int *)off_1009F7EF8 + 75);
    v35[0] = 0;
    v35[1] = 0;
    sub_10003AED0((uint64_t)v35, a1 + 64);
    uint64_t v11 = (_OWORD *)(a5 + 4);
    if (*(unsigned char *)(a1 + 740)
      && (v12 = *(_OWORD *)(a1 + 700), *(_DWORD *)(a5 + 20) = *(_DWORD *)(a1 + 716), _OWORD *v11 = v12, *(unsigned char *)(a1 + 741)))
    {
      long long v13 = *(_OWORD *)(a1 + 720);
      *(_DWORD *)(a5 + 40) = *(_DWORD *)(a1 + 736);
      *(_OWORD *)(a5 + 24) = v13;
      uint64_t v14 = 1;
    }
    else
    {
      uint64_t v14 = 0;
    }
    *(_DWORD *)(a5 + 56) = *(_DWORD *)(a1 + 1320);
    *(_DWORD *)(a5 + 72) = sub_1004809F4(a1);
    *(_DWORD *)(a5 + 76) = sub_100480990(a1);
    uint64_t v15 = *(unsigned int *)(a1 + 1328);
    *(void *)(a5 + 88) = v15;
    *(_WORD *)(a5 + 80) = 0;
    if (*(unsigned char *)(a1 + 1316))
    {
      *(unsigned char *)(a5 + 80) = *(_DWORD *)(a1 + 1312);
      *(unsigned char *)(a5 + 81) = *(unsigned char *)(a1 + 1324);
    }
    *(void *)(a5 + 88) = v15;
    int v16 = sub_100475E4C(a1, 0x20u);
    *(unsigned char *)(a5 + 98) = v16 == 4;
    if (v14)
    {
      uint64_t v17 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        int v18 = *(_DWORD *)a5;
        int v19 = *(_DWORD *)(a5 + 44);
        int v20 = *(_DWORD *)(a5 + 48);
        int v21 = *(unsigned __int8 *)(a5 + 52);
        int v22 = *(unsigned __int8 *)(a5 + 53);
        int v23 = *(unsigned __int8 *)(a5 + 54);
        int v24 = *(_DWORD *)(a5 + 56);
        uint64_t v25 = *(void *)(a5 + 64);
        int v26 = *(_DWORD *)(a5 + 72);
        int v27 = *(_DWORD *)(a5 + 76);
        int v28 = *(unsigned __int8 *)(a5 + 80);
        int v29 = *(unsigned __int8 *)(a5 + 81);
        uint64_t v30 = *(void *)(a5 + 88);
        *(_DWORD *)long long buf = 67113474;
        int v38 = v18;
        __int16 v39 = 1042;
        *(_DWORD *)uint64_t v40 = 20;
        *(_WORD *)&v40[4] = 2098;
        *(void *)&v40[6] = a5 + 4;
        *(_WORD *)&v40[14] = 1042;
        *(_DWORD *)&v40[16] = 20;
        __int16 v41 = 2098;
        uint64_t v42 = a5 + 24;
        __int16 v43 = 1024;
        int v44 = v19;
        __int16 v45 = 1024;
        int v46 = v20;
        __int16 v47 = 1024;
        int v48 = v21;
        __int16 v49 = 1024;
        int v50 = v22;
        __int16 v51 = 1024;
        int v52 = v23;
        __int16 v53 = 1024;
        int v54 = v24;
        __int16 v55 = 2048;
        uint64_t v56 = v25;
        __int16 v57 = 1024;
        int v58 = v26;
        __int16 v59 = 1024;
        int v60 = v27;
        __int16 v61 = 1024;
        int v62 = v28;
        __int16 v63 = 1024;
        int v64 = v29;
        __int16 v65 = 2048;
        uint64_t v66 = v30;
        __int16 v67 = 1024;
        BOOL v68 = v16 == 4;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Contextual Metric - {0x%x, %{public}.20P, %{public}.20P, 0x%x, %d, %d, %d, %d, 0x%x, 0x%llx, 0x%x, 0x%x, %d, %d, 0x%llx, %d}", buf, 0x7Eu);
      }
      int v31 = +[NSData dataWithBytes:a5 + 4 length:20];
      uint64_t v32 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 68289282;
        int v38 = 20;
        __int16 v39 = 2098;
        *(void *)uint64_t v40 = v11;
        *(_WORD *)&v40[8] = 2112;
        *(void *)&v40[10] = v31;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Contextual Metric primary hash %{public}.20P    data hash %@", buf, 0x1Cu);
      }
    }
    sub_10003AFB4((uint64_t)v35);
    sub_10001B8AC(&v36);
  }
  else
  {
    unsigned int v33 = qword_100A19E50;
    uint64_t v14 = 0;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "Stack is not ready, not generating contextual metric", buf, 2u);
      return 0;
    }
  }
  return v14;
}

void sub_10048148C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t sub_1004814CC(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 786) = a2 != 0;
  unsigned int v2 = *(uint64_t (**)(void))(*(void *)sub_1003708B0() + 408);

  return v2();
}

uint64_t sub_10048153C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 647);
}

uint64_t sub_100481544(uint64_t a1, int a2)
{
  BOOL v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    sub_100474E18(a1, __p);
    int v5 = (void **)__p[0];
    uint64_t v6 = "No";
    if (v10 >= 0) {
      int v5 = __p;
    }
    if (a2) {
      uint64_t v6 = "Yes";
    }
    *(_DWORD *)long long buf = 136446466;
    long long v12 = v5;
    __int16 v13 = 2080;
    uint64_t v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Setting device %{public}s to allow sco for turn by turn: %s", buf, 0x16u);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
  *(unsigned char *)(a1 + 647) = a2;
  uint64_t v7 = sub_1003708B0();
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v7 + 424))(v7, a1, *(unsigned __int8 *)(a1 + 647));
}

uint64_t sub_100481684(uint64_t a1)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1);
  unsigned int v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int16 *)(a1 + 654);
    *(_DWORD *)long long buf = 67109120;
    int v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Last AVRCP version is %d", buf, 8u);
  }
  uint64_t v4 = *(unsigned __int16 *)(a1 + 654);
  sub_10003AFB4((uint64_t)v6);
  return v4;
}

uint64_t sub_10048174C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 440))(v4, a1, a2);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1);
  *(_WORD *)(a1 + 654) = a2;
  int v5 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    int v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting AVRCP version to %d", buf, 8u);
  }
  return sub_10003AFB4((uint64_t)v7);
}

uint64_t sub_100481848(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int16 *)(a1 + 660);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_100481890(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 488))(v4, a1, a2);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1);
  *(_WORD *)(a1 + 660) = a2;
  int v5 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    int v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting AVRCP Controller version to %d", buf, 8u);
  }
  return sub_10003AFB4((uint64_t)v7);
}

uint64_t sub_10048198C(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int16 *)(a1 + 662);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_1004819D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 504))(v4, a1, a2);
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1);
  *(_WORD *)(a1 + 662) = a2;
  return sub_10003AFB4((uint64_t)v6);
}

uint64_t sub_100481A54(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int16 *)(a1 + 664);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_100481A9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 520))(v4, a1, a2);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1);
  *(_WORD *)(a1 + 664) = a2;
  int v5 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    int v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting AVRCP Target version to %d", buf, 8u);
  }
  return sub_10003AFB4((uint64_t)v7);
}

uint64_t sub_100481B98(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int16 *)(a1 + 666);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_100481BE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 536))(v4, a1, a2);
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1);
  *(_WORD *)(a1 + 666) = a2;
  return sub_10003AFB4((uint64_t)v6);
}

uint64_t sub_100481C60(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int16 *)(a1 + 668);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_100481CA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 552))(v4, a1, a2);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1);
  *(_WORD *)(a1 + 668) = a2;
  int v5 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    int v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting Handsfree version to %d", buf, 8u);
  }
  return sub_10003AFB4((uint64_t)v7);
}

uint64_t sub_100481DA4(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int16 *)(a1 + 670);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_100481DEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 568))(v4, a1, a2);
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1);
  *(_WORD *)(a1 + 670) = a2;
  return sub_10003AFB4((uint64_t)v6);
}

uint64_t sub_100481E6C(uint64_t a1, unsigned __int16 a2)
{
  unsigned __int16 v8 = a2;
  uint64_t v3 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, unsigned __int16 *))(*(void *)v3 + 584))(v3, a1, &v8);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1);
  int v4 = v8;
  *(_WORD *)(a1 + 672) = v8;
  int v5 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    int v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting A2DP Sink version to %d", buf, 8u);
  }
  return sub_10003AFB4((uint64_t)v7);
}

uint64_t sub_100481F6C(uint64_t a1, __int16 a2)
{
  __int16 v6 = a2;
  uint64_t v3 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, __int16 *))(*(void *)v3 + 600))(v3, a1, &v6);
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1);
  *(_WORD *)(a1 + 674) = v6;
  return sub_10003AFB4((uint64_t)v5);
}

uint64_t sub_100481FF0(uint64_t a1, unsigned __int16 a2)
{
  unsigned __int16 v8 = a2;
  uint64_t v3 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, unsigned __int16 *))(*(void *)v3 + 616))(v3, a1, &v8);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1);
  int v4 = v8;
  *(_WORD *)(a1 + 676) = v8;
  int v5 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    int v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting MAP version to %d", buf, 8u);
  }
  return sub_10003AFB4((uint64_t)v7);
}

uint64_t sub_1004820F0(uint64_t a1, unsigned __int16 a2)
{
  unsigned __int16 v8 = a2;
  uint64_t v3 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, unsigned __int16 *))(*(void *)v3 + 632))(v3, a1, &v8);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1);
  int v4 = v8;
  *(_WORD *)(a1 + 678) = v8;
  int v5 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    int v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting Object Push version to %d", buf, 8u);
  }
  return sub_10003AFB4((uint64_t)v7);
}

uint64_t sub_1004821F0(uint64_t a1, unsigned __int16 a2)
{
  unsigned __int16 v8 = a2;
  uint64_t v3 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, unsigned __int16 *))(*(void *)v3 + 648))(v3, a1, &v8);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1);
  int v4 = v8;
  *(_WORD *)(a1 + 680) = v8;
  int v5 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    int v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting PNP version to %d", buf, 8u);
  }
  return sub_10003AFB4((uint64_t)v7);
}

uint64_t sub_1004822F0(uint64_t a1, unsigned __int16 a2)
{
  unsigned __int16 v8 = a2;
  uint64_t v3 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, unsigned __int16 *))(*(void *)v3 + 664))(v3, a1, &v8);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1);
  int v4 = v8;
  *(_WORD *)(a1 + 682) = v8;
  int v5 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    int v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting SerialPort version to %d", buf, 8u);
  }
  return sub_10003AFB4((uint64_t)v7);
}

uint64_t sub_1004823F0(uint64_t a1, unsigned __int16 a2)
{
  unsigned __int16 v8 = a2;
  uint64_t v3 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, unsigned __int16 *))(*(void *)v3 + 680))(v3, a1, &v8);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1);
  int v4 = v8;
  *(_WORD *)(a1 + 684) = v8;
  int v5 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    int v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting HID version to %d", buf, 8u);
  }
  return sub_10003AFB4((uint64_t)v7);
}

uint64_t sub_1004824F0(uint64_t a1, unsigned __int16 a2)
{
  unsigned __int16 v8 = a2;
  uint64_t v3 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, unsigned __int16 *))(*(void *)v3 + 696))(v3, a1, &v8);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1);
  int v4 = v8;
  *(_WORD *)(a1 + 686) = v8;
  int v5 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    int v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting GATT version to %d", buf, 8u);
  }
  return sub_10003AFB4((uint64_t)v7);
}

uint64_t sub_1004825F0(uint64_t a1, unsigned __int16 a2)
{
  unsigned __int16 v8 = a2;
  uint64_t v3 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, unsigned __int16 *))(*(void *)v3 + 712))(v3, a1, &v8);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1);
  int v4 = v8;
  *(_WORD *)(a1 + 688) = v8;
  int v5 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    int v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting WIAP version to %d", buf, 8u);
  }
  return sub_10003AFB4((uint64_t)v7);
}

uint64_t sub_1004826F0(uint64_t a1, unsigned __int16 a2)
{
  unsigned __int16 v8 = a2;
  uint64_t v3 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, unsigned __int16 *))(*(void *)v3 + 728))(v3, a1, &v8);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1);
  int v4 = v8;
  *(_WORD *)(a1 + 690) = v8;
  int v5 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    int v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting AVDTP version to %d", buf, 8u);
  }
  return sub_10003AFB4((uint64_t)v7);
}

uint64_t sub_1004827F0(uint64_t a1, unsigned __int16 a2)
{
  unsigned __int16 v8 = a2;
  uint64_t v3 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, unsigned __int16 *))(*(void *)v3 + 744))(v3, a1, &v8);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1);
  int v4 = v8;
  *(_WORD *)(a1 + 692) = v8;
  int v5 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    int v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting AVCTP version to %d", buf, 8u);
  }
  return sub_10003AFB4((uint64_t)v7);
}

uint64_t sub_1004828F0(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 696);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_100482938(uint64_t a1, int a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1);
  *(_DWORD *)(a1 + 696) = a2;
  int v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    int v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Setting Firmware version to %d", buf, 8u);
  }
  return sub_10003AFB4((uint64_t)v6);
}

uint64_t sub_1004829FC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 740);
}

BOOL sub_100482A04(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 740);
  if (a2 && *(unsigned char *)(a1 + 740))
  {
    long long v3 = *(_OWORD *)(a1 + 700);
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 716);
    *(_OWORD *)a2 = v3;
  }
  return v2 != 0;
}

uint64_t sub_100482A30(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 741);
}

BOOL sub_100482A38(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 741);
  if (a2 && *(unsigned char *)(a1 + 741))
  {
    long long v3 = *(_OWORD *)(a1 + 720);
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 736);
    *(_OWORD *)a2 = v3;
  }
  return v2 != 0;
}

uint64_t sub_100482A60(uint64_t a1)
{
  v136[0] = 0;
  v136[1] = 0;
  sub_10003AED0((uint64_t)v136, a1 + 64);
  *(_OWORD *)long long __p = 0u;
  long long v242 = 0u;
  memset(v240, 0, sizeof(v240));
  long long v238 = 0u;
  long long v239 = 0u;
  long long v236 = 0u;
  long long v237 = 0u;
  long long v234 = 0u;
  long long v235 = 0u;
  long long v232 = 0u;
  long long v233 = 0u;
  long long v230 = 0u;
  long long v231 = 0u;
  memset(v229, 0, sizeof(v229));
  long long v227 = 0u;
  long long v228 = 0u;
  *(_OWORD *)int v134 = 0u;
  long long v135 = 0u;
  sub_100053710((uint64_t)v134, 0);
  uint64_t v226 = 0;
  long long v225 = 0u;
  memset(v224, 0, sizeof(v224));
  long long v222 = 0u;
  long long v223 = 0u;
  long long v220 = 0u;
  long long v221 = 0u;
  long long v218 = 0u;
  long long v219 = 0u;
  sub_1006161E0((uint64_t)&v218 + 1);
  BYTE2(v219) = 0;
  BYTE4(v219) = 0;
  BYTE2(v221) = 0;
  BYTE4(v221) = 0;
  HIDWORD(v224[2]) = 0;
  *((void *)&v219 + 1) = 0;
  long long v220 = 0uLL;
  LOBYTE(v221) = 0;
  *((void *)&v221 + 1) = 0;
  long long v222 = 0uLL;
  LOBYTE(v223) = 0;
  *((void *)&v223 + 1) = 0;
  memset(v224, 0, 19);
  LOBYTE(v224[3]) = 1;
  BYTE2(v226) = 0;
  *(void *)((char *)&v224[3] + 6) = 0;
  *(void *)((char *)&v224[3] + 1) = 0;
  v224[5] = 0;
  long long v225 = 0uLL;
  LOBYTE(v226) = 0;
  if (*(unsigned char *)(a1 + 742))
  {
    int v2 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Identification - metric has already been updated", buf, 2u);
    }
    goto LABEL_228;
  }
  long long v3 = (int *)(a1 + 1076);
  int v4 = *(_DWORD *)(a1 + 1076);
  if (v4 == 76 && (unsigned int v5 = *(_DWORD *)(a1 + 1080) - 8194, v5 <= 0x1D) && ((1 << v5) & 0x20037F9B) != 0
    || *(unsigned char *)(a1 + 1069) && (*(unsigned char *)(a1 + 1089) & 0x10) != 0)
  {
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    sub_10003AED0((uint64_t)buf, a1);
    int v6 = *(_DWORD *)(a1 + 696);
    sub_10003AFB4((uint64_t)buf);
    if (!v6)
    {
      int v10 = qword_100A19E50;
      if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_228;
      }
      sub_100474E18(a1, buf);
      uint64_t v11 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
      LODWORD(v216) = 136446210;
      *(void *)((char *)&v216 + 4) = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Identification - Apple Audio Device firmware version not yet known for device %{public}s. Waiting until firmware version comes in.", (uint8_t *)&v216, 0xCu);
      if ((buf[23] & 0x80000000) == 0) {
        goto LABEL_228;
      }
      long long v12 = *(void **)buf;
LABEL_35:
      operator delete(v12);
      goto LABEL_228;
    }
    int v4 = *v3;
  }
  if (v4 == 76 && (unsigned int v7 = *(_DWORD *)(a1 + 1080) - 8194, v7 <= 0x1D) && ((1 << v7) & 0x20037F9B) != 0
    || *(unsigned char *)(a1 + 1069) && (*(unsigned char *)(a1 + 1089) & 0x10) != 0
    || *(unsigned char *)(a1 + 1369) && *(unsigned char *)(a1 + 1370) && (sub_100040630((unsigned __int8 *)a1) & 1) != 0)
  {
    sub_100475F84(a1, (uint64_t)buf);
    if (SBYTE7(v242) < 0) {
      operator delete(__p[0]);
    }
    *(_OWORD *)long long __p = *(_OWORD *)buf;
    *(void *)&long long v242 = *(void *)&buf[16];
    int v8 = *(_DWORD *)(a1 + 1072);
    if (v8 == 2)
    {
      int v9 = 1452;
    }
    else
    {
      if (v8 != 1) {
        goto LABEL_39;
      }
      int v9 = 76;
    }
    if (*v3 == v9)
    {
      LOWORD(v227) = 2560;
      char v20 = 39;
LABEL_42:
      BYTE2(v227) = v20;
      int v21 = (unsigned __int8 *)BYTE7(v242);
      if ((SBYTE7(v242) & 0x80u) == 0) {
        int v22 = __p;
      }
      else {
        int v22 = (void **)__p[0];
      }
      if (SBYTE7(v242) < 0) {
        int v21 = (unsigned __int8 *)__p[1];
      }
      buf[0] = 13;
      int v23 = sub_1004843C4(v22, &v21[(void)v22], buf);
      int v24 = (char *)__p + BYTE7(v242);
      if ((SBYTE7(v242) & 0x80u) == 0)
      {
        uint64_t v25 = __p;
      }
      else
      {
        int v24 = (char *)__p[0] + (unint64_t)__p[1];
        uint64_t v25 = (void **)__p[0];
      }
      std::string::erase((std::string *)__p, v23 - (unsigned __int8 *)v25, v24 - (char *)v23);
      int v26 = (unsigned __int8 *)BYTE7(v242);
      if ((SBYTE7(v242) & 0x80u) == 0) {
        int v27 = __p;
      }
      else {
        int v27 = (void **)__p[0];
      }
      if (SBYTE7(v242) < 0) {
        int v26 = (unsigned __int8 *)__p[1];
      }
      buf[0] = 10;
      int v28 = sub_1004843C4(v27, &v26[(void)v27], buf);
      int v29 = (char *)__p + BYTE7(v242);
      if ((SBYTE7(v242) & 0x80u) == 0)
      {
        uint64_t v30 = __p;
      }
      else
      {
        int v29 = (char *)__p[0] + (unint64_t)__p[1];
        uint64_t v30 = (void **)__p[0];
      }
      std::string::erase((std::string *)__p, v28 - (unsigned __int8 *)v30, v29 - (char *)v28);
      int v31 = (unsigned __int8 *)BYTE7(v242);
      if ((SBYTE7(v242) & 0x80u) == 0) {
        uint64_t v32 = __p;
      }
      else {
        uint64_t v32 = (void **)__p[0];
      }
      if (SBYTE7(v242) < 0) {
        int v31 = (unsigned __int8 *)__p[1];
      }
      buf[0] = 44;
      unsigned int v33 = sub_1004843C4(v32, &v31[(void)v32], buf);
      std::string v34 = (char *)__p + BYTE7(v242);
      if ((SBYTE7(v242) & 0x80u) == 0)
      {
        uint64_t v35 = __p;
      }
      else
      {
        std::string v34 = (char *)__p[0] + (unint64_t)__p[1];
        uint64_t v35 = (void **)__p[0];
      }
      std::string::erase((std::string *)__p, v33 - (unsigned __int8 *)v35, v34 - (char *)v33);
      sub_10003AFE8((uint64_t)v136);
      sub_10047D450(a1, (_WORD *)&v227 + 2, (unsigned char *)&v227 + 8, (_WORD *)&v227 + 3);
      char v133 = 0;
      sub_10001B8E0(&v133);
      if (sub_10017E500(a1 + 128, &v230, (void *)&v230 + 1)
        && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
      {
        sub_10076C6B8();
      }
      sub_10001B910(&v133);
      sub_10003AF00((uint64_t)v136);
      sub_100476250(a1, (_DWORD *)&v229[1] + 3);
      *(void *)long long buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      sub_10003AED0((uint64_t)buf, a1);
      __int16 v36 = *(_WORD *)(a1 + 686);
      sub_10003AFB4((uint64_t)buf);
      WORD5(v227) = v36;
      *(void *)long long buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      sub_10003AED0((uint64_t)buf, a1);
      __int16 v37 = *(_WORD *)(a1 + 688);
      sub_10003AFB4((uint64_t)buf);
      WORD6(v227) = v37;
      *(void *)long long buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      sub_10003AED0((uint64_t)buf, a1);
      __int16 v38 = *(_WORD *)(a1 + 676);
      sub_10003AFB4((uint64_t)buf);
      HIWORD(v227) = v38;
      *(void *)long long buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      sub_10003AED0((uint64_t)buf, a1);
      __int16 v39 = *(_WORD *)(a1 + 668);
      sub_10003AFB4((uint64_t)buf);
      LOWORD(v228) = v39;
      *(void *)long long buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      sub_10003AED0((uint64_t)buf, a1);
      __int16 v40 = *(_WORD *)(a1 + 670);
      sub_10003AFB4((uint64_t)buf);
      WORD1(v228) = v40;
      *(void *)long long buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      sub_10003AED0((uint64_t)buf, a1);
      __int16 v41 = *(_WORD *)(a1 + 672);
      sub_10003AFB4((uint64_t)buf);
      WORD2(v228) = v41;
      *(void *)long long buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      sub_10003AED0((uint64_t)buf, a1);
      __int16 v42 = *(_WORD *)(a1 + 674);
      sub_10003AFB4((uint64_t)buf);
      WORD3(v228) = v42;
      *(void *)long long buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      sub_10003AED0((uint64_t)buf, a1);
      __int16 v43 = *(_WORD *)(a1 + 660);
      sub_10003AFB4((uint64_t)buf);
      WORD4(v228) = v43;
      *(void *)long long buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      sub_10003AED0((uint64_t)buf, a1);
      __int16 v44 = *(_WORD *)(a1 + 662);
      sub_10003AFB4((uint64_t)buf);
      WORD5(v228) = v44;
      *(void *)long long buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      sub_10003AED0((uint64_t)buf, a1);
      __int16 v45 = *(_WORD *)(a1 + 680);
      sub_10003AFB4((uint64_t)buf);
      WORD6(v228) = v45;
      *(void *)long long buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      sub_10003AED0((uint64_t)buf, a1);
      __int16 v46 = *(_WORD *)(a1 + 678);
      sub_10003AFB4((uint64_t)buf);
      HIWORD(v228) = v46;
      *(void *)long long buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      sub_10003AED0((uint64_t)buf, a1);
      __int16 v47 = *(_WORD *)(a1 + 682);
      sub_10003AFB4((uint64_t)buf);
      LOWORD(v229[0]) = v47;
      *(void *)long long buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      sub_10003AED0((uint64_t)buf, a1);
      __int16 v48 = *(_WORD *)(a1 + 684);
      sub_10003AFB4((uint64_t)buf);
      WORD1(v229[0]) = v48;
      *(void *)long long buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      sub_10003AED0((uint64_t)buf, a1);
      __int16 v49 = *(_WORD *)(a1 + 690);
      sub_10003AFB4((uint64_t)buf);
      WORD2(v229[0]) = v49;
      *(void *)long long buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      sub_10003AED0((uint64_t)buf, a1);
      __int16 v50 = *(_WORD *)(a1 + 692);
      sub_10003AFB4((uint64_t)buf);
      WORD3(v229[0]) = v50;
      *(void *)long long buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      sub_10003AED0((uint64_t)buf, a1);
      int v51 = *(_DWORD *)(a1 + 696);
      sub_10003AFB4((uint64_t)buf);
      DWORD2(v229[1]) = v51;
      int v52 = *(_DWORD *)(a1 + 1072);
      if (*(unsigned char *)(a1 + 1068))
      {
        *(void *)((char *)v229 + 12) = *(void *)v3;
        int v53 = *(_DWORD *)(a1 + 1084);
        DWORD2(v229[0]) = v52;
        DWORD1(v229[1]) = v53;
      }
      BYTE3(v227) = 0;
      if (v52 == 2)
      {
        int v54 = 1452;
      }
      else
      {
        if (v52 != 1) {
          goto LABEL_76;
        }
        int v54 = 76;
      }
      if (*v3 == v54)
      {
LABEL_83:
        if (HIDWORD(v229[1]))
        {
          if ((WORD6(v229[1]) & 0x400) != 0 && (BYTE12(v229[1]) & 0x28) != 0) {
            HIDWORD(v229[1]) &= 0xFF001FFF;
          }
          int v58 = BYTE7(v232);
          if (SBYTE7(v232) < 0) {
            int v58 = DWORD2(v231);
          }
          int v59 = HIBYTE(v233);
          if (v233 < 0) {
            int v59 = v233;
          }
          int v60 = v58 + v59;
          int v61 = BYTE7(v235);
          if (SBYTE7(v235) < 0) {
            int v61 = DWORD2(v234);
          }
          CC_LONG v62 = v60 + v61 + 80;
          __int16 v63 = malloc_type_calloc(v62, 1uLL, 0x100004077774924uLL);
          *__int16 v63 = v227;
          long long v64 = v228;
          long long v65 = v229[0];
          long long v66 = v230;
          v63[3] = v229[1];
          v63[4] = v66;
          v63[1] = v64;
          v63[2] = v65;
          if ((SBYTE7(v232) & 0x80u) == 0) {
            __int16 v67 = &v231;
          }
          else {
            __int16 v67 = (long long *)v231;
          }
          if ((SBYTE7(v232) & 0x80u) == 0) {
            size_t v68 = BYTE7(v232);
          }
          else {
            size_t v68 = *((void *)&v231 + 1);
          }
          memcpy(v63 + 5, v67, v68);
          int v69 = BYTE7(v232);
          if (SBYTE7(v232) < 0) {
            int v69 = DWORD2(v231);
          }
          int v70 = v69 + 80;
          if (v233 >= 0) {
            __int16 v71 = (char *)&v232 + 8;
          }
          else {
            __int16 v71 = (char *)*((void *)&v232 + 1);
          }
          if (v233 >= 0) {
            size_t v72 = HIBYTE(v233);
          }
          else {
            size_t v72 = v233;
          }
          memcpy((char *)v63 + (v69 + 80), v71, v72);
          int v73 = HIBYTE(v233);
          if (v233 < 0) {
            int v73 = v233;
          }
          if ((SBYTE7(v235) & 0x80u) == 0) {
            long long v74 = &v234;
          }
          else {
            long long v74 = (long long *)v234;
          }
          if ((SBYTE7(v235) & 0x80u) == 0) {
            size_t v75 = BYTE7(v235);
          }
          else {
            size_t v75 = *((void *)&v234 + 1);
          }
          memcpy((char *)v63 + (v73 + v70), v74, v75);
          CC_SHA1(v63, v62, (unsigned __int8 *)&v240[3]);
          uint64_t v76 = sub_100017768();
          if (((*(uint64_t (**)(uint64_t))(*(void *)v76 + 160))(v76) & 1) == 0)
          {
            __int16 v77 = qword_100A19E50;
            if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "Identification - clearing friendly name due to release version", buf, 2u);
            }
            if (SBYTE7(v242) < 0)
            {
              *(unsigned char *)__p[0] = 0;
              __p[1] = 0;
            }
            else
            {
              LOBYTE(__p[0]) = 0;
              BYTE7(v242) = 0;
            }
          }
          uint64_t v78 = qword_100A19E50;
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 67109634;
            *(_DWORD *)&uint8_t buf[4] = v62;
            *(_WORD *)&uint8_t buf[8] = 1040;
            *(_DWORD *)&buf[10] = v62;
            *(_WORD *)&unsigned char buf[14] = 2098;
            *(void *)&uint8_t buf[16] = &v227;
            _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "Identification - raw serialized data dump of length %d {%{public}.*P}", buf, 0x18u);
            uint64_t v78 = qword_100A19E50;
          }
          if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
          {
            if ((SBYTE7(v242) & 0x80u) == 0) {
              int v79 = __p;
            }
            else {
              int v79 = (void **)__p[0];
            }
            __int16 v80 = (long long *)v231;
            if ((SBYTE7(v232) & 0x80u) == 0) {
              __int16 v80 = &v231;
            }
            uint64_t v81 = (char *)*((void *)&v235 + 1);
            if (v236 >= 0) {
              uint64_t v81 = (char *)&v235 + 8;
            }
            std::string v82 = (char *)&v232 + 8;
            if (v233 < 0) {
              std::string v82 = (char *)*((void *)&v232 + 1);
            }
            __int16 v83 = &v234;
            if (SBYTE7(v235) < 0) {
              __int16 v83 = (long long *)v234;
            }
            uint64_t v84 = &v237;
            if (SBYTE7(v238) < 0) {
              uint64_t v84 = (long long *)v237;
            }
            int v85 = (char *)&v238 + 8;
            if (v239 < 0) {
              int v85 = (char *)*((void *)&v238 + 1);
            }
            *(_DWORD *)&uint8_t buf[4] = 20;
            *(_DWORD *)&buf[20] = 3;
            int v139 = &v227;
            uint64_t v141 = v79;
            int v143 = WORD2(v227);
            int v145 = BYTE8(v227);
            int v147 = WORD3(v227);
            *(_WORD *)&unsigned char buf[18] = 1042;
            __int16 v148 = 1042;
            __int16 v152 = 1042;
            int v149 = 8;
            int v153 = 8;
            *(_WORD *)&uint8_t buf[8] = 2098;
            __int16 v138 = 2098;
            __int16 v150 = 2098;
            __int16 v154 = 2098;
            int v159 = WORD5(v227);
            int v163 = HIWORD(v227);
            int v167 = WORD1(v228);
            int v171 = WORD3(v228);
            int v175 = WORD5(v228);
            int v179 = HIWORD(v228);
            int v183 = WORD1(v229[0]);
            int v187 = WORD3(v229[0]);
            int v191 = HIDWORD(v229[0]);
            int v195 = DWORD1(v229[1]);
            int v199 = BYTE3(v227);
            v201 = v80;
            int v203 = v81;
            uint64_t v151 = &v230;
            __n128 v155 = (char *)&v230 + 8;
            int v207 = v83;
            int v209 = v84;
            v211 = v85;
            int v215 = BYTE8(v242);
            int v157 = HIDWORD(v229[1]);
            int v161 = WORD6(v227);
            int v165 = (unsigned __int16)v228;
            int v169 = WORD2(v228);
            int v173 = WORD4(v228);
            int v177 = WORD6(v228);
            int v181 = LOWORD(v229[0]);
            int v185 = WORD2(v229[0]);
            int v189 = DWORD2(v229[0]);
            int v193 = v229[1];
            int v197 = DWORD2(v229[1]);
            int v205 = v82;
            __int16 v140 = 2082;
            __int16 v200 = 2082;
            __int16 v202 = 2082;
            __int16 v204 = 2082;
            __int16 v206 = 2082;
            __int16 v208 = 2082;
            __int16 v210 = 2082;
            __int16 v212 = 2082;
            __int16 v86 = (void *)v240[0];
            if (v240[2] >= 0) {
              __int16 v86 = v240;
            }
            int v213 = v86;
            __int16 v142 = 1024;
            __int16 v144 = 1024;
            __int16 v146 = 1024;
            __int16 v156 = 1024;
            __int16 v158 = 1024;
            __int16 v160 = 1024;
            __int16 v162 = 1024;
            __int16 v164 = 1024;
            __int16 v166 = 1024;
            __int16 v168 = 1024;
            __int16 v170 = 1024;
            __int16 v172 = 1024;
            __int16 v174 = 1024;
            __int16 v176 = 1024;
            __int16 v178 = 1024;
            __int16 v180 = 1024;
            __int16 v182 = 1024;
            __int16 v184 = 1024;
            __int16 v186 = 1024;
            __int16 v188 = 1024;
            __int16 v190 = 1024;
            __int16 v192 = 1024;
            __int16 v194 = 1024;
            __int16 v196 = 1024;
            __int16 v198 = 1024;
            __int16 v214 = 1024;
            *(_DWORD *)long long buf = 68299266;
            *(void *)&buf[10] = &v240[3];
            _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "Identification - generating metric {%{public}.20P, %{public}.3P, %{public}s, 0x%x, 0x%x, 0x%x, %{public}.8P, %{public}.8P, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, %d, %{public}s, %{public}s, %{public}s, %{public}s, %{public}s, %{public}s, %{public}s, %d}", buf, 0x12Eu);
          }
          free(v63);
          *(_OWORD *)(a1 + 700) = *(_OWORD *)&v240[3];
          *(_DWORD *)(a1 + 716) = v240[5];
          uint64_t v87 = sub_1003708B0();
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v87 + 56))(v87, a1, a1 + 700))
          {
            if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
              sub_10076C684();
            }
          }
          else
          {
            *(unsigned char *)(a1 + 740) = 1;
            uint64_t v88 = sub_1003708B0();
            if ((*(unsigned int (**)(uint64_t, uint64_t, long long *, uint64_t))(*(void *)v88 + 88))(v88, a1, &v227, 80)&& os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
            {
              sub_10076C650();
            }
            uint64_t v89 = BYTE7(v232);
            if (SBYTE7(v232) < 0) {
              uint64_t v89 = *((void *)&v231 + 1);
            }
            if (v89)
            {
              uint64_t v90 = sub_1003708B0();
              (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v90 + 104))(v90, a1, &v231);
            }
            uint64_t v91 = HIBYTE(v236);
            if (v236 < 0) {
              uint64_t v91 = v236;
            }
            if (v91)
            {
              uint64_t v92 = sub_1003708B0();
              (*(void (**)(uint64_t, uint64_t, char *))(*(void *)v92 + 120))(v92, a1, (char *)&v235 + 8);
            }
            uint64_t v93 = HIBYTE(v233);
            if (v233 < 0) {
              uint64_t v93 = v233;
            }
            if (v93)
            {
              uint64_t v94 = sub_1003708B0();
              (*(void (**)(uint64_t, uint64_t, char *))(*(void *)v94 + 136))(v94, a1, (char *)&v232 + 8);
            }
            uint64_t v95 = BYTE7(v235);
            if (SBYTE7(v235) < 0) {
              uint64_t v95 = *((void *)&v234 + 1);
            }
            if (v95)
            {
              uint64_t v96 = sub_1003708B0();
              (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v96 + 152))(v96, a1, &v234);
            }
            uint64_t v97 = BYTE7(v238);
            if (SBYTE7(v238) < 0) {
              uint64_t v97 = *((void *)&v237 + 1);
            }
            if (v97)
            {
              uint64_t v98 = sub_1003708B0();
              (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v98 + 168))(v98, a1, &v237);
            }
            uint64_t v99 = HIBYTE(v239);
            if (v239 < 0) {
              uint64_t v99 = v239;
            }
            if (v99)
            {
              uint64_t v100 = sub_1003708B0();
              (*(void (**)(uint64_t, uint64_t, char *))(*(void *)v100 + 184))(v100, a1, (char *)&v238 + 8);
            }
            uint64_t v101 = HIBYTE(v240[2]);
            if (v240[2] < 0) {
              uint64_t v101 = v240[1];
            }
            if (v101)
            {
              uint64_t v102 = sub_1003708B0();
              (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v102 + 200))(v102, a1, v240);
            }
            uint64_t v103 = sub_100017768();
            if ((*(unsigned int (**)(uint64_t))(*(void *)v103 + 8))(v103)
              && (WORD1(v229[0]) || ((BOOL v104 = sub_1004766D4(a1), BYTE3(v227)) ? (v105 = 1) : (v105 = v104), v105 == 1)))
            {
              int v106 = qword_100A19E50;
              if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v107 = sub_100017768();
                int v108 = (*(uint64_t (**)(uint64_t))(*(void *)v107 + 8))(v107);
                int v109 = WORD1(v229[0]);
                BOOL v110 = sub_1004766D4(a1);
                *(_DWORD *)long long buf = 67109632;
                *(_DWORD *)&uint8_t buf[4] = v108;
                *(_WORD *)&uint8_t buf[8] = 1024;
                *(_DWORD *)&buf[10] = v109;
                *(_WORD *)&unsigned char buf[14] = 1024;
                *(_DWORD *)&uint8_t buf[16] = v110;
                _os_log_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_DEFAULT, "Identification - routing friendly name: internal %d, hid %d, carkit %d", buf, 0x14u);
              }
            }
            else
            {
              uint64_t v111 = qword_100A19E50;
              if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v112 = sub_100017768();
                int v113 = (*(uint64_t (**)(uint64_t))(*(void *)v112 + 8))(v112);
                int v114 = WORD1(v229[0]);
                BOOL v115 = sub_1004766D4(a1);
                *(_DWORD *)long long buf = 67109632;
                *(_DWORD *)&uint8_t buf[4] = v113;
                *(_WORD *)&uint8_t buf[8] = 1024;
                *(_DWORD *)&buf[10] = v114;
                *(_WORD *)&unsigned char buf[14] = 1024;
                *(_DWORD *)&uint8_t buf[16] = v115;
                _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_DEFAULT, "Identification - clearing friendly name: internal %d, hid %d, carkit %d", buf, 0x14u);
              }
              if (SBYTE7(v242) < 0)
              {
                *(unsigned char *)__p[0] = 0;
                __p[1] = 0;
              }
              else
              {
                LOBYTE(__p[0]) = 0;
                BYTE7(v242) = 0;
              }
            }
            sub_100011B98((uint64_t)v134, SBYTE3(v227));
            sub_10001195C((uint64_t)v134, SWORD2(v227));
            sub_10001195C((uint64_t)v134, SWORD3(v227));
            sub_100011B98((uint64_t)v134, SBYTE8(v227));
            sub_10001195C((uint64_t)v134, SWORD5(v227));
            sub_10001195C((uint64_t)v134, SWORD6(v227));
            sub_10001195C((uint64_t)v134, SHIWORD(v227));
            sub_10001195C((uint64_t)v134, v228);
            sub_10001195C((uint64_t)v134, SWORD1(v228));
            sub_10001195C((uint64_t)v134, SWORD2(v228));
            sub_10001195C((uint64_t)v134, SWORD3(v228));
            sub_10001195C((uint64_t)v134, SWORD4(v228));
            sub_10001195C((uint64_t)v134, SWORD5(v228));
            sub_10001195C((uint64_t)v134, SWORD6(v228));
            sub_10001195C((uint64_t)v134, SHIWORD(v228));
            sub_10001195C((uint64_t)v134, v229[0]);
            sub_10001195C((uint64_t)v134, SWORD1(v229[0]));
            sub_10001195C((uint64_t)v134, SWORD2(v229[0]));
            sub_10001195C((uint64_t)v134, SWORD3(v229[0]));
            sub_1004BC500((uint64_t)v134, DWORD2(v229[0]));
            sub_1004BC500((uint64_t)v134, HIDWORD(v229[0]));
            sub_1004BC500((uint64_t)v134, DWORD2(v229[1]));
            sub_1004BC500((uint64_t)v134, HIDWORD(v229[1]));
            sub_1004BC4E4((uint64_t)v134, (char *)&v230, 8);
            sub_1004BC4E4((uint64_t)v134, (char *)&v230 + 8, 8);
            if (v233 >= 0) {
              unint64_t v116 = (char *)&v232 + 8;
            }
            else {
              unint64_t v116 = (char *)*((void *)&v232 + 1);
            }
            if (v233 >= 0) {
              int64_t v117 = HIBYTE(v233);
            }
            else {
              int64_t v117 = v233;
            }
            sub_1004BC4E4((uint64_t)v134, v116, v117);
            sub_1000335D8(buf, v134[1], v135 - (unint64_t)v134[1]);
            int v118 = (const void *)sub_10004A6E4((uint64_t)buf);
            sub_1000335D8(&v216, v134[1], v135 - (unint64_t)v134[1]);
            CC_LONG v119 = sub_100045F00((uint64_t)&v216);
            CC_SHA1(v118, v119, (unsigned __int8 *)&v240[5] + 4);
            *(void *)&long long v216 = &off_100998428;
            if (*((void *)&v216 + 1)) {
              sub_1000368F4(*((atomic_uint **)&v216 + 1));
            }
            *(void *)long long buf = &off_100998428;
            if (*(void *)&buf[8]) {
              sub_1000368F4(*(atomic_uint **)&buf[8]);
            }
            int v120 = qword_100A19E50;
            if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 68289026;
              *(_DWORD *)&uint8_t buf[4] = 20;
              *(_WORD *)&uint8_t buf[8] = 2098;
              *(void *)&buf[10] = (char *)&v240[5] + 4;
              _os_log_impl((void *)&_mh_execute_header, v120, OS_LOG_TYPE_DEFAULT, "Identification - Secondary hash {%{public}.20P}", buf, 0x12u);
              int v120 = qword_100A19E50;
            }
            if (os_log_type_enabled(v120, OS_LOG_TYPE_DEFAULT))
            {
              sub_1000335D8(&v216, v134[1], v135 - (unint64_t)v134[1]);
              int v121 = sub_100045F00((uint64_t)&v216);
              sub_1000335D8(&v131, v134[1], v135 - (unint64_t)v134[1]);
              uint64_t v122 = sub_10004A6E4((uint64_t)&v131);
              *(_DWORD *)long long buf = 68157954;
              *(_DWORD *)&uint8_t buf[4] = v121;
              *(_WORD *)&uint8_t buf[8] = 2098;
              *(void *)&buf[10] = v122;
              _os_log_impl((void *)&_mh_execute_header, v120, OS_LOG_TYPE_DEFAULT, "Identification - Raw buffer to create secondary hash {%{public}.*P}", buf, 0x12u);
              unint64_t v131 = &off_100998428;
              if (v132) {
                sub_1000368F4(v132);
              }
              *(void *)&long long v216 = &off_100998428;
              if (*((void *)&v216 + 1)) {
                sub_1000368F4(*((atomic_uint **)&v216 + 1));
              }
            }
            *(_OWORD *)(a1 + 720) = *(_OWORD *)((char *)&v240[5] + 4);
            *(_DWORD *)(a1 + 736) = HIDWORD(v240[7]);
            uint64_t v123 = sub_1003708B0();
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v123 + 72))(v123, a1, a1 + 720))
            {
              if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
                sub_10076C61C();
              }
            }
            else
            {
              *(unsigned char *)(a1 + 741) = 1;
            }
            *(unsigned char *)(a1 + 742) = 1;
            if (sub_100476728(a1, WORD2(v227))
              && (uint64_t v124 = sub_100017768(), (*(unsigned int (**)(uint64_t))(*(void *)v124 + 8))(v124)))
            {
              long long v125 = qword_100A19E50;
              if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
              {
                sub_100474E18(a1, buf);
                BOOL v126 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
                LODWORD(v216) = 136446210;
                *(void *)((char *)&v216 + 4) = v126;
                _os_log_impl((void *)&_mh_execute_header, v125, OS_LOG_TYPE_DEFAULT, "Identification - skipping Core Analytics metric upload for automation dongle %{public}s", (uint8_t *)&v216, 0xCu);
                if ((buf[23] & 0x80000000) != 0) {
                  operator delete(*(void **)buf);
                }
              }
            }
            else
            {
              unint64_t v127 = qword_100A19E50;
              if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
              {
                sub_100474E18(a1, buf);
                int v128 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
                LODWORD(v216) = 136446210;
                *(void *)((char *)&v216 + 4) = v128;
                _os_log_impl((void *)&_mh_execute_header, v127, OS_LOG_TYPE_DEFAULT, "Identification - submitting Core Analytics metric upload for device %{public}s", (uint8_t *)&v216, 0xCu);
                if ((buf[23] & 0x80000000) != 0) {
                  operator delete(*(void **)buf);
                }
              }
              sub_10003AFE8((uint64_t)v136);
              uint64_t v129 = sub_100050530();
              (*(void (**)(uint64_t, long long *))(*(void *)v129 + 224))(v129, &v227);
            }
          }
        }
        else if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
        {
          sub_10076C5E8();
        }
        sub_10001B8AC(&v133);
        goto LABEL_228;
      }
LABEL_76:
      *(void *)long long buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      sub_10003AED0((uint64_t)buf, a1);
      int v55 = *(_DWORD *)(a1 + 176);
      sub_10003AFB4((uint64_t)buf);
      if (v55 == 22 || v55 == 17)
      {
        BOOL v56 = sub_1004783B8(a1, (uint64_t)&v218);
        if ((_BYTE)v223 && v56) {
          std::string::operator=((std::string *)((char *)&v235 + 8), (const std::string *)((char *)&v223 + 8));
        }
      }
      goto LABEL_83;
    }
LABEL_39:
    if (sub_10047C388(a1))
    {
      LOWORD(v227) = -1;
      char v20 = -1;
    }
    else
    {
      LOWORD(v227) = *(_WORD *)(a1 + 128);
      char v20 = *(unsigned char *)(a1 + 130);
    }
    goto LABEL_42;
  }
  __int16 v13 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a1, &v216);
    int v14 = v217;
    uint64_t v15 = (long long *)v216;
    int v16 = *(unsigned __int8 *)(a1 + 1369);
    int v17 = *(unsigned __int8 *)(a1 + 1370);
    int v18 = sub_100040630((unsigned __int8 *)a1);
    int v19 = &v216;
    *(_DWORD *)long long buf = 136446978;
    if (v14 < 0) {
      int v19 = v15;
    }
    *(void *)&uint8_t buf[4] = v19;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&unsigned char buf[14] = v16;
    *(_WORD *)&unsigned char buf[18] = 1024;
    *(_DWORD *)&buf[20] = v17;
    __int16 v138 = 1024;
    LODWORD(v139) = v18;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Identification - 3rd Party Device  %{public}s. Waiting until all criteria is met. Product Name Update:%d SDP Query Complete:%d Paired:%d", buf, 0x1Eu);
    if (v217 < 0)
    {
      long long v12 = (void *)v216;
      goto LABEL_35;
    }
  }
LABEL_228:
  if (SHIBYTE(v224[1]) < 0) {
    operator delete(*((void **)&v223 + 1));
  }
  if (SHIBYTE(v222) < 0) {
    operator delete(*((void **)&v221 + 1));
  }
  if (SHIBYTE(v220) < 0) {
    operator delete(*((void **)&v219 + 1));
  }
  nullsub_95((char *)&v218 + 1);
  if (v134[1])
  {
    *(void **)&long long v135 = v134[1];
    operator delete(v134[1]);
  }
  sub_1003B8A60((uint64_t)&v227);
  return sub_10003AFB4((uint64_t)v136);
}

void sub_100484240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_10001B8AC(&a23);
  sub_100276384((uint64_t)&a72);
  if (__p)
  {
    a26 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_1003B8A60((uint64_t)&STACK[0x290]);
  sub_10003AFB4((uint64_t)&a28);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1004843C4(void *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t result = (unsigned __int8 *)memchr(a1, *a3, a2 - (unsigned char *)a1);
  if (!result) {
    uint64_t result = a2;
  }
  int v6 = result + 1;
  if (result != a2 && v6 != a2)
  {
    do
    {
      int v8 = *v6;
      if (v8 != *a3) {
        *result++ = v8;
      }
      ++v6;
    }
    while (v6 != a2);
  }
  return result;
}

uint64_t sub_10048442C(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 652);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_100484474(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 760))(v4, a1, a2);
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1);
  *(unsigned char *)(a1 + 652) = a2;
  return sub_10003AFB4((uint64_t)v6);
}

uint64_t sub_1004844F4(uint64_t a1)
{
  uint64_t v2 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 272))(v2))
  {
    v5[0] = 0;
    v5[1] = 0;
    sub_10003AED0((uint64_t)v5, a1);
    int v3 = *(_DWORD *)(a1 + 176);
    sub_10003AFB4((uint64_t)v5);
    if (v3 == 25 || (*(unsigned char *)(a1 + 777) & 1) != 0) {
      return 1;
    }
  }
  if (*(unsigned char *)(a1 + 1368)) {
    return 1;
  }
  else {
    return (*(unsigned __int8 *)(a1 + 776) >> 1) & 1;
  }
}

void sub_100484594(uint64_t a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    sub_100475F84(a1, (uint64_t)&__p);
    int v3 = v32 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "HIDIdentification - Start identification for %s", buf, 0xCu);
    if (SHIBYTE(v32) < 0) {
      operator delete(__p);
    }
  }
  long long __p = 0;
  int v31 = 0;
  sub_10003AED0((uint64_t)&__p, a1);
  int v4 = *(_DWORD *)(a1 + 176);
  sub_10003AFB4((uint64_t)&__p);
  if (v4 == 25 || (*(void *)(a1 + 776) & 0x302) != 0)
  {
    if ((*(void *)(a1 + 776) & 2) != 0
      || (uint64_t v6 = sub_100035F54(), ((*(uint64_t (**)(uint64_t))(*(void *)v6 + 272))(v6) & 1) != 0))
    {
      int v7 = 1;
      goto LABEL_14;
    }
    if ((*(unsigned char *)(a1 + 777) & 3) != 0)
    {
      int v7 = 0;
      goto LABEL_14;
    }
    memset(buf, 0, 20);
    int v16 = *(unsigned __int8 *)(a1 + 740);
    if (*(unsigned char *)(a1 + 740))
    {
      *(_DWORD *)&uint8_t buf[16] = *(_DWORD *)(a1 + 716);
      *(_OWORD *)long long buf = *(_OWORD *)(a1 + 700);
    }
    if (*(char *)(a1 + 263) < 0)
    {
      if (*(void *)(a1 + 248)) {
        goto LABEL_42;
      }
    }
    else if (*(unsigned char *)(a1 + 263))
    {
LABEL_42:
      long long __p = 0;
      int v31 = 0;
      uint64_t v32 = 0;
      if (qword_1009F7F00 != -1) {
        dispatch_once(&qword_1009F7F00, &stru_1009AF778);
      }
      BOOL v17 = v16 == 0;
      sub_1004ACC38((const void **)(a1 + 240), &__p);
      int v18 = __p;
      char v19 = __p == v31 || v17;
      if ((v19 & 1) == 0
        && (*(void *)__p == *(void *)buf ? (BOOL v20 = *((void *)__p + 1) == *(void *)&buf[8]) : (BOOL v20 = 0),
            v20 ? (BOOL v21 = *((unsigned int *)__p + 4) == (unint64_t)*(unsigned int *)&buf[16]) : (BOOL v21 = 0),
            v21))
      {
        *(unsigned char *)(a1 + 1368) = 1;
        uint64_t v25 = qword_100A19E50;
        int v7 = 0;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)int v26 = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "HIDIdentification - Device found in allowlist", v26, 2u);
          int v7 = 0;
          int v18 = __p;
        }
      }
      else
      {
        int v7 = 2;
      }
      if (!v18)
      {
LABEL_14:
        if (_os_feature_enabled_impl())
        {
          int v8 = qword_100A19E50;
          BOOL v9 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT);
          if (v7 == 2)
          {
            if (v9)
            {
              LOWORD(__p) = 0;
              int v10 = "HIDIdentification - Classic HID Device behavior is unknown. Wait for sniff param update";
              uint64_t v11 = v8;
LABEL_20:
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&__p, 2u);
              return;
            }
          }
          else
          {
            if (v9)
            {
              sub_100475F84(a1, (uint64_t)&__p);
              if (v32 >= 0) {
                p_p = &__p;
              }
              else {
                p_p = __p;
              }
              *(_DWORD *)long long buf = 67109378;
              *(_DWORD *)&uint8_t buf[4] = v7;
              *(_WORD *)&uint8_t buf[8] = 2080;
              *(void *)&buf[10] = p_p;
              _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "HIDIdentification - Set classic HID device behavior : %u for %s", buf, 0x12u);
              if (SHIBYTE(v32) < 0) {
                operator delete(__p);
              }
            }
            sub_10047C018(a1, v7);
          }
        }
        else
        {
          __int16 v13 = qword_100A19E50;
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
          {
            sub_100475F84(a1, (uint64_t)&__p);
            int v14 = v32 >= 0 ? &__p : (void **)__p;
            *(_DWORD *)long long buf = 67109378;
            *(_DWORD *)&uint8_t buf[4] = v7;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = v14;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "HIDIdentification - Set classic HID device behavior : %u for %s", buf, 0x12u);
            if (SHIBYTE(v32) < 0) {
              operator delete(__p);
            }
          }
          sub_10047C018(a1, v7);
        }
        return;
      }
      int v31 = v18;
LABEL_68:
      operator delete(v18);
      goto LABEL_14;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076C720();
    }
    int v18 = operator new(0x14uLL);
    *(_OWORD *)int v18 = *(_OWORD *)buf;
    void v18[4] = *(_DWORD *)&buf[16];
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AF778);
    }
    int v22 = off_1009F7EF8;
    int v27 = 0;
    int v23 = operator new(0x14uLL);
    int v28 = v23 + 5;
    int v29 = (char *)(v23 + 5);
    *(_OWORD *)int v23 = *(_OWORD *)v18;
    v23[4] = v18[4];
    int v27 = v23;
    BOOL v24 = sub_1004AD040((uint64_t)v22, (uint64_t)&v27);
    if (v27)
    {
      int v28 = v27;
      operator delete(v27);
    }
    if (v24)
    {
      int v7 = 0;
      *(unsigned char *)(a1 + 1368) = 1;
    }
    else
    {
      int v7 = 2;
    }
    goto LABEL_68;
  }
  uint64_t v12 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    int v10 = "HIDIdentification - Not a mouse/TP. Wait for sniff param update";
    uint64_t v11 = v12;
    goto LABEL_20;
  }
}

void sub_100484A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  operator delete(v11);
  _Unwind_Resume(a1);
}

void sub_100484AD0(uint64_t a1, int a2)
{
  uint64_t v4 = sub_100035F54();
  if ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 328))(v4))
  {
    char v5 = 0;
  }
  else
  {
    uint64_t v6 = sub_100035F54();
    char v5 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 336))(v6) ^ 1;
  }
  if (_os_feature_enabled_impl()
    && (v5 & 1) == 0
    && sub_10004A6E4(a1 + 1008)
    && (sub_1004844F4(a1) & 1) == 0)
  {
    int v7 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_100475F84(a1, (uint64_t)__p);
      if (v12 >= 0) {
        int v8 = __p;
      }
      else {
        int v8 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 67109378;
      int v14 = a2;
      __int16 v15 = 2080;
      int v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "HIDIdentification - Update classic HID device behavior to %d for %s", buf, 0x12u);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }
    sub_10047C018(a1, a2);
    BOOL v9 = +[NSDistributedNotificationCenter defaultCenter];
    int v10 = +[NSNotification notificationWithName:@"com.apple.bluetooth.leHIDBehaviorKnown" object:0];
    [v9 postNotification:v10];
  }
}

void sub_100484CB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100484CD8(uint64_t a1, int a2)
{
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1);
  int v4 = *(_DWORD *)(a1 + 788);
  *(_DWORD *)(a1 + 788) = a2;
  uint64_t v5 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v5 + 840))(v5, a1, *(unsigned int *)(a1 + 788));
  if (v4 != a2)
  {
    sub_10003AFE8((uint64_t)v7);
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AF778);
    }
    sub_1004AA04C((os_unfair_lock_s *)off_1009F7EF8, a1, 11);
  }
  return sub_10003AFB4((uint64_t)v7);
}

void sub_100484DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_100484DC4(uint64_t a1, uint64_t a2)
{
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, a1);
  int v4 = *(_DWORD *)(a1 + 800);
  *(_DWORD *)(a1 + 800) = a2;
  uint64_t v5 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a1, __p);
    uint64_t v6 = v10 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)long long buf = 67109378;
    int v13 = a2;
    __int16 v14 = 2082;
    __int16 v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Smart Route enabled setting is set to %d for Device %{public}s", buf, 0x12u);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 888))(v7, a1, a2);
  if (v4 != a2)
  {
    sub_10003AFE8((uint64_t)v11);
    if (qword_1009F80A0 != -1) {
      dispatch_once(&qword_1009F80A0, &stru_1009AF898);
    }
    sub_1002859A4((uint64_t)off_1009F8098, a1, 32, a2, 1u);
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AF778);
    }
    sub_1004AA04C((os_unfair_lock_s *)off_1009F7EF8, a1, 7);
  }
  sub_10003AFB4((uint64_t)v11);
  return v4 != a2;
}

void sub_100484FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100484FCC(uint64_t a1)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF778);
  }
  int v2 = *((unsigned __int8 *)off_1009F7EF8 + 304);
  int v3 = *(_DWORD *)(a1 + 1100);
  int v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    sub_100474E18(a1, __p);
    if (v10 >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    uint64_t v6 = "No";
    if (v2) {
      uint64_t v7 = "Yes";
    }
    else {
      uint64_t v7 = "No";
    }
    *(_DWORD *)long long buf = 136446722;
    char v12 = v5;
    __int16 v13 = 2080;
    if (v3) {
      uint64_t v6 = "Yes";
    }
    __int16 v14 = v7;
    __int16 v15 = 2080;
    int v16 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Smart Route Support: Device: %{public}s, SRDaemon Support: %s, Device Support: %s", buf, 0x20u);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
  return (v2 != 0) & v3;
}

BOOL sub_100485128(uint64_t a1)
{
  return *(unsigned char *)(a1 + 1069) && (*(unsigned char *)(a1 + 1102) & 0x10) != 0 && *(_DWORD *)(a1 + 1080) != 8212;
}

uint64_t sub_100485154(uint64_t a1)
{
  int v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEBUG))
  {
    sub_100475EE0(a1, (uint64_t)__p);
    int v4 = v9;
    uint64_t v5 = (void **)__p[0];
    int v6 = sub_100484FCC(a1);
    uint64_t v7 = __p;
    if (v4 < 0) {
      uint64_t v7 = v5;
    }
    *(_DWORD *)long long buf = 136446466;
    uint64_t v11 = v7;
    __int16 v12 = 1024;
    int v13 = v6;
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Smart Route Supported was updated by SR daemon, updating device: “%{public}s” (state = %d)", buf, 0x12u);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF778);
  }
  return sub_1004AA04C((os_unfair_lock_s *)off_1009F7EF8, a1, 17);
}

void sub_100485284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004852A8(uint64_t a1, uint64_t a2)
{
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, a1);
  int v4 = *(_DWORD *)(a1 + 804);
  *(_DWORD *)(a1 + 804) = a2;
  uint64_t v5 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a1, __p);
    int v6 = v10 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)long long buf = 67109378;
    int v13 = a2;
    __int16 v14 = 2082;
    __int16 v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Spatial Audio Allowed is set to %d for Device %{public}s", buf, 0x12u);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 912))(v7, a1, a2);
  if (v4 != a2)
  {
    sub_10003AFE8((uint64_t)v11);
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AF778);
    }
    sub_1004AA04C((os_unfair_lock_s *)off_1009F7EF8, a1, 12);
  }
  return sub_10003AFB4((uint64_t)v11);
}

void sub_100485440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100485460(uint64_t a1, int a2, int a3)
{
  v13[0] = 0;
  v13[1] = 0;
  sub_10003AED0((uint64_t)v13, a1);
  int v6 = *(unsigned __int8 *)(a1 + 796);
  *(unsigned char *)(a1 + 796) = a2;
  uint64_t v7 = qword_100A19E50;
  if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)
    || ((sub_100474E18(a1, __p), v12 >= 0) ? (int v8 = __p) : (int v8 = (void **)__p[0]),
        *(_DWORD *)long long buf = 67109378,
        int v15 = a2,
        __int16 v16 = 2082,
        BOOL v17 = v8,
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "IED enabled setting is set to %d for Device %{public}s", buf, 0x12u), (v12 & 0x80000000) == 0))
  {
    if (!a3) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  operator delete(__p[0]);
  if (a3)
  {
LABEL_7:
    uint64_t v9 = sub_1003708B0();
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v9 + 872))(v9, a1, *(unsigned __int8 *)(a1 + 796));
  }
LABEL_8:
  if (v6 != a2)
  {
    sub_10003AFE8((uint64_t)v13);
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AF778);
    }
    sub_1004AA04C((os_unfair_lock_s *)off_1009F7EF8, a1, 9);
  }
  return sub_10003AFB4((uint64_t)v13);
}

void sub_100485608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100485628(uint64_t a1, int a2)
{
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, a1);
  int v4 = *(_DWORD *)(a1 + 808);
  *(_DWORD *)(a1 + 808) = a2;
  uint64_t v5 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a1, __p);
    int v6 = v10 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)long long buf = 67109378;
    int v13 = a2;
    __int16 v14 = 2082;
    int v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Listening Mode is set to %d for Device %{public}s", buf, 0x12u);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v7 + 928))(v7, a1, *(unsigned int *)(a1 + 808));
  if (v4 != a2)
  {
    sub_10003AFE8((uint64_t)v11);
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AF778);
    }
    sub_1004AA04C((os_unfair_lock_s *)off_1009F7EF8, a1, 15);
  }
  return sub_10003AFB4((uint64_t)v11);
}

void sub_1004857C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004857E0(uint64_t a1, int a2)
{
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, a1);
  int v4 = *(_DWORD *)(a1 + 812);
  *(_DWORD *)(a1 + 812) = a2;
  uint64_t v5 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a1, __p);
    int v6 = v10 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)long long buf = 67109378;
    int v13 = a2;
    __int16 v14 = 2082;
    int v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Listening Mode Configs is set to %d for Device %{public}s", buf, 0x12u);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v7 + 992))(v7, a1, *(unsigned int *)(a1 + 812));
  if (v4 != a2)
  {
    sub_10003AFE8((uint64_t)v11);
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AF778);
    }
    sub_1004AA04C((os_unfair_lock_s *)off_1009F7EF8, a1, 15);
  }
  return sub_10003AFB4((uint64_t)v11);
}

void sub_100485978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100485998(uint64_t a1, char a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1);
  *(unsigned char *)(a1 + 816) = a2;
  return sub_10003AFB4((uint64_t)v5);
}

uint64_t sub_1004859E0(uint64_t a1, char a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1);
  *(unsigned char *)(a1 + 817) = a2;
  return sub_10003AFB4((uint64_t)v5);
}

uint64_t sub_100485A28(uint64_t a1, int a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1);
  *(_DWORD *)(a1 + 820) = a2;
  uint64_t v4 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v4 + 1008))(v4, a1, *(unsigned int *)(a1 + 820));
  return sub_10003AFB4((uint64_t)v6);
}

void sub_100485AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100485ABC(uint64_t a1, int a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1);
  *(_DWORD *)(a1 + 824) = a2;
  uint64_t v4 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v4 + 1024))(v4, a1, *(unsigned int *)(a1 + 824));
  return sub_10003AFB4((uint64_t)v6);
}

void sub_100485B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100485B50(uint64_t a1, int a2)
{
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1);
  int v4 = *(_DWORD *)(a1 + 828);
  *(_DWORD *)(a1 + 828) = a2;
  uint64_t v5 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v5 + 1040))(v5, a1, *(unsigned int *)(a1 + 828));
  if (v4 != a2)
  {
    sub_10003AFE8((uint64_t)v7);
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AF778);
    }
    sub_1004AA04C((os_unfair_lock_s *)off_1009F7EF8, a1, 16);
  }
  return sub_10003AFB4((uint64_t)v7);
}

void sub_100485C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100485C3C(uint64_t a1, int a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1);
  *(_DWORD *)(a1 + 832) = a2;
  uint64_t v4 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v4 + 1056))(v4, a1, *(unsigned int *)(a1 + 832));
  return sub_10003AFB4((uint64_t)v6);
}

void sub_100485CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100485CD0(uint64_t a1, int a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1);
  *(_DWORD *)(a1 + 836) = a2;
  uint64_t v4 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v4 + 1072))(v4, a1, *(unsigned int *)(a1 + 836));
  return sub_10003AFB4((uint64_t)v6);
}

void sub_100485D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100485D64(uint64_t a1, uint64_t a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1);
  *(unsigned char *)(a1 + 840) = a2;
  uint64_t v4 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 1088))(v4, a1, a2);
  return sub_10003AFB4((uint64_t)v6);
}

void sub_100485DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100485DF8(uint64_t a1, char a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1);
  *(unsigned char *)(a1 + 841) = a2;
  return sub_10003AFB4((uint64_t)v5);
}

uint64_t sub_100485E40(uint64_t a1, char a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1);
  *(unsigned char *)(a1 + 842) = a2;
  return sub_10003AFB4((uint64_t)v5);
}

uint64_t sub_100485E88(uint64_t a1, int a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1);
  *(_DWORD *)(a1 + 844) = a2;
  return sub_10003AFB4((uint64_t)v5);
}

uint64_t sub_100485ED0(uint64_t a1, char a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1);
  *(unsigned char *)(a1 + 848) = a2;
  return sub_10003AFB4((uint64_t)v5);
}

uint64_t sub_100485F18(uint64_t a1, char a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1);
  *(unsigned char *)(a1 + 856) = a2;
  uint64_t v4 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v4 + 1104))(v4, a1, *(unsigned __int8 *)(a1 + 856));
  return sub_10003AFB4((uint64_t)v6);
}

void sub_100485F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100485FAC(uint64_t a1, int a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1);
  *(_DWORD *)(a1 + 860) = a2;
  uint64_t v4 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v4 + 1120))(v4, a1, *(unsigned int *)(a1 + 860));
  return sub_10003AFB4((uint64_t)v6);
}

void sub_10048602C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100486040(uint64_t a1, int a2)
{
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1);
  int v4 = *(unsigned __int8 *)(a1 + 868);
  *(unsigned char *)(a1 + 868) = a2;
  uint64_t v5 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v5 + 1168))(v5, a1, *(unsigned __int8 *)(a1 + 868));
  if (v4 != a2)
  {
    sub_10003AFE8((uint64_t)v7);
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AF778);
    }
    sub_1004AA04C((os_unfair_lock_s *)off_1009F7EF8, a1, 15);
  }
  return sub_10003AFB4((uint64_t)v7);
}

void sub_100486118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10048612C(uint64_t a1, int a2)
{
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1);
  int v4 = *(_DWORD *)(a1 + 864);
  *(_DWORD *)(a1 + 864) = a2;
  if (v4 != a2)
  {
    sub_10003AFE8((uint64_t)v7);
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AF778);
    }
    sub_1004AA04C((os_unfair_lock_s *)off_1009F7EF8, a1, 15);
  }
  uint64_t v5 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v5 + 1136))(v5, a1, *(unsigned int *)(a1 + 864));
  return sub_10003AFB4((uint64_t)v7);
}

void sub_1004861FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100486210(uint64_t a1, int a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1);
  int v4 = *(_DWORD *)(a1 + 872);
  *(_DWORD *)(a1 + 872) = a2;
  if (v4 != a2)
  {
    sub_10003AFE8((uint64_t)v6);
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AF778);
    }
    sub_1004AA04C((os_unfair_lock_s *)off_1009F7EF8, a1, 15);
  }
  return sub_10003AFB4((uint64_t)v6);
}

void sub_1004862A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004862BC(uint64_t a1, int a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1);
  int v4 = *(_DWORD *)(a1 + 876);
  *(_DWORD *)(a1 + 876) = a2;
  if (v4 != a2)
  {
    sub_10003AFE8((uint64_t)v6);
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AF778);
    }
    sub_1004AA04C((os_unfair_lock_s *)off_1009F7EF8, a1, 15);
  }
  return sub_10003AFB4((uint64_t)v6);
}

void sub_100486354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100486368(uint64_t a1, int a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1);
  int v4 = *(_DWORD *)(a1 + 880);
  *(_DWORD *)(a1 + 880) = a2;
  if (v4 != a2)
  {
    sub_10003AFE8((uint64_t)v6);
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AF778);
    }
    sub_1004AA04C((os_unfair_lock_s *)off_1009F7EF8, a1, 15);
  }
  return sub_10003AFB4((uint64_t)v6);
}

void sub_100486400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100486414(uint64_t a1, int a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1);
  *(_DWORD *)(a1 + 904) = a2;
  return sub_10003AFB4((uint64_t)v5);
}

uint64_t sub_10048645C(uint64_t a1, int a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1);
  int v4 = *(_DWORD *)(a1 + 884);
  *(_DWORD *)(a1 + 884) = a2;
  if (v4 != a2)
  {
    sub_10003AFE8((uint64_t)v6);
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AF778);
    }
    sub_1004AA04C((os_unfair_lock_s *)off_1009F7EF8, a1, 15);
  }
  return sub_10003AFB4((uint64_t)v6);
}

void sub_1004864F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100486508(uint64_t a1, int a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1);
  int v4 = *(_DWORD *)(a1 + 900);
  *(_DWORD *)(a1 + 900) = a2;
  if (v4 != a2)
  {
    sub_10003AFE8((uint64_t)v6);
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AF778);
    }
    sub_1004AA04C((os_unfair_lock_s *)off_1009F7EF8, a1, 15);
  }
  return sub_10003AFB4((uint64_t)v6);
}

void sub_1004865A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004865B4(uint64_t a1, int a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1);
  if (*(_DWORD *)(a1 + 908) != a2)
  {
    *(_DWORD *)(a1 + 908) = a2;
    sub_10003AFE8((uint64_t)v5);
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AF778);
    }
    sub_1004AA04C((os_unfair_lock_s *)off_1009F7EF8, a1, 15);
  }
  return sub_10003AFB4((uint64_t)v5);
}

void sub_10048664C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100486660(uint64_t a1, int a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1);
  int v4 = *(_DWORD *)(a1 + 888);
  *(_DWORD *)(a1 + 888) = a2;
  if (v4 != a2)
  {
    sub_10003AFE8((uint64_t)v6);
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AF778);
    }
    sub_1004AA04C((os_unfair_lock_s *)off_1009F7EF8, a1, 15);
  }
  return sub_10003AFB4((uint64_t)v6);
}

void sub_1004866F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10048670C(uint64_t a1, int a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1);
  if (*(_DWORD *)(a1 + 892) != a2)
  {
    *(_DWORD *)(a1 + 892) = a2;
    sub_10003AFE8((uint64_t)v5);
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AF778);
    }
    sub_1004AA04C((os_unfair_lock_s *)off_1009F7EF8, a1, 15);
  }
  return sub_10003AFB4((uint64_t)v5);
}

void sub_1004867A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004867B8(uint64_t a1, int a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1);
  if (*(_DWORD *)(a1 + 896) != a2)
  {
    *(_DWORD *)(a1 + 896) = a2;
    sub_10003AFE8((uint64_t)v5);
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AF778);
    }
    sub_1004AA04C((os_unfair_lock_s *)off_1009F7EF8, a1, 15);
  }
  return sub_10003AFB4((uint64_t)v5);
}

void sub_100486850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100486864(uint64_t a1, char a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1);
  *(unsigned char *)(a1 + 960) = a2;
  uint64_t v4 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v4 + 1224))(v4, a1, *(unsigned __int8 *)(a1 + 960));
  return sub_10003AFB4((uint64_t)v6);
}

void sub_1004868E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004868F8(uint64_t a1, char a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1);
  *(unsigned char *)(a1 + 976) = a2;
  uint64_t v4 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v4 + 1240))(v4, a1, *(unsigned __int8 *)(a1 + 976));
  return sub_10003AFB4((uint64_t)v6);
}

void sub_100486978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10048698C(uint64_t a1, char a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1);
  *(unsigned char *)(a1 + 985) = a2;
  uint64_t v4 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v4 + 1272))(v4, a1, *(unsigned __int8 *)(a1 + 985));
  return sub_10003AFB4((uint64_t)v6);
}

void sub_100486A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100486A20(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 964);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_100486A68(uint64_t a1, _DWORD *a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1);
  *(_DWORD *)(a1 + 964) = *a2;
  uint64_t v4 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 1264))(v4, a1, a1 + 964);
  return sub_10003AFB4((uint64_t)v6);
}

void sub_100486AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100486B00(unsigned __int8 *a1, int a2)
{
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, (uint64_t)a1);
  int v4 = a1[989];
  if (a1[989]) {
    int v5 = a2;
  }
  else {
    int v5 = 1;
  }
  int v6 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = "On";
    if (v4) {
      int v8 = "On";
    }
    else {
      int v8 = "Off";
    }
    if (!a2) {
      uint64_t v7 = "Off";
    }
    *(_DWORD *)long long buf = 136315650;
    __int16 v14 = v8;
    __int16 v15 = 2080;
    __int16 v16 = v7;
    if (v5) {
      uint64_t v9 = "No";
    }
    else {
      uint64_t v9 = "Yes";
    }
    __int16 v17 = 2080;
    int v18 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Guest Pairing: Changing Mode %s -> %s, trigger Magic Pairing: %s", buf, 0x20u);
  }
  a1[989] = a2;
  uint64_t v10 = sub_1003708B0();
  (*(void (**)(uint64_t, unsigned __int8 *, void))(*(void *)v10 + 1304))(v10, a1, a1[989]);
  if ((v5 & 1) == 0)
  {
    if (qword_1009F80A0 != -1) {
      dispatch_once(&qword_1009F80A0, &stru_1009AF898);
    }
    sub_10028F9A8((uint64_t)off_1009F8098, a1);
  }
  return sub_10003AFB4((uint64_t)v12);
}

void sub_100486CA0(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100486CBC(uint64_t a1, int a2)
{
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, a1);
  int v4 = *(unsigned __int8 *)(a1 + 990);
  *(unsigned char *)(a1 + 990) = a2;
  if (v4 != a2)
  {
    int v5 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a1, __p);
      int v6 = v9 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)long long buf = 136446466;
      char v12 = v6;
      __int16 v13 = 1024;
      int v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Ownership changed: device %{public}s, state %d", buf, 0x12u);
      if (v9 < 0) {
        operator delete(__p[0]);
      }
    }
    sub_10003AFE8((uint64_t)v10);
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AF778);
    }
    sub_1004AA04C((os_unfair_lock_s *)off_1009F7EF8, a1, 8);
  }
  return sub_10003AFB4((uint64_t)v10);
}

void sub_100486E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100486E34(uint64_t a1)
{
  v14[0] = 0;
  v14[1] = 0;
  sub_10003AED0((uint64_t)v14, a1);
  *(void *)(a1 + 920) = *(void *)(a1 + 912);
  *(void *)(a1 + 944) = *(void *)(a1 + 936);
  *(unsigned char *)(a1 + 1434) = 0;
  uint64_t v2 = sub_1003708B0();
  long long __p = 0;
  char v12 = 0;
  __int16 v13 = 0;
  int v3 = *(unsigned char **)(a1 + 912);
  int v4 = *(unsigned char **)(a1 + 920);
  size_t v5 = v4 - v3;
  if (v4 != v3)
  {
    if (v4 - v3 < 0) {
      abort();
    }
    int v6 = (char *)operator new(v4 - v3);
    uint64_t v7 = &v6[v5];
    long long __p = v6;
    __int16 v13 = &v6[v5];
    memmove(v6, v3, v5);
    char v12 = v7;
  }
  (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v2 + 1184))(v2, a1, &__p);
  if (__p)
  {
    char v12 = __p;
    operator delete(__p);
  }
  uint64_t v8 = sub_1003708B0();
  sub_1002EACE8(v10, a1 + 936);
  (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v8 + 1200))(v8, a1, v10);
  if (v10[0])
  {
    v10[1] = v10[0];
    operator delete(v10[0]);
  }
  return sub_10003AFB4((uint64_t)v14);
}

void sub_100486F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100486FCC(uint64_t a1)
{
  v3[0] = 0;
  v3[1] = 0;
  sub_10003AED0((uint64_t)v3, a1);
  *(unsigned char *)(a1 + 1434) = 1;
  return sub_10003AFB4((uint64_t)v3);
}

uint64_t sub_100487014(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 1434);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_10048705C(uint64_t a1, int a2, int a3)
{
  v26[0] = 0;
  v26[1] = 0;
  sub_10003AED0((uint64_t)v26, a1);
  if (a2 >= 0) {
    unint64_t v6 = a2;
  }
  else {
    unint64_t v6 = (a2 + 7);
  }
  uint64_t v7 = *(void *)(a1 + 912);
  unint64_t v8 = *(void *)(a1 + 920) - v7;
  unint64_t v9 = (unsigned __int16)(v6 >> 3);
  if (v8 <= (unsigned __int16)(v6 >> 3))
  {
    buf[0] = 0;
    sub_100360A68((void *)(a1 + 912), (v9 + 1) - v8, buf);
    uint64_t v7 = *(void *)(a1 + 912);
  }
  int v10 = *(unsigned __int8 *)(v7 + v9);
  char v11 = a2 - (v6 & 0xF8);
  if (((1 << v11) & v10) == a3 << v11)
  {
    if (v8 > v9) {
      return sub_10003AFB4((uint64_t)v26);
    }
  }
  else
  {
    *(unsigned char *)(v7 + v9) = v10 ^ (1 << v11);
  }
  char v12 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a1, __p);
    __int16 v13 = v25 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)long long buf = 136446722;
    int v28 = v13;
    __int16 v29 = 1024;
    int v30 = a2;
    __int16 v31 = 1024;
    int v32 = a3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "setAACPCapabilityBit: Writing device %{public}s, bit %d, value %d", buf, 0x18u);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v14 = sub_1003708B0();
  BOOL v21 = 0;
  int v22 = 0;
  int v23 = 0;
  __int16 v15 = *(unsigned char **)(a1 + 912);
  __int16 v16 = *(unsigned char **)(a1 + 920);
  size_t v17 = v16 - v15;
  if (v16 != v15)
  {
    if (v16 - v15 < 0) {
      abort();
    }
    int v18 = (char *)operator new(v16 - v15);
    char v19 = &v18[v17];
    BOOL v21 = v18;
    int v23 = &v18[v17];
    memmove(v18, v15, v17);
    int v22 = v19;
  }
  (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v14 + 1184))(v14, a1, &v21);
  if (v21)
  {
    int v22 = v21;
    operator delete(v21);
  }
  return sub_10003AFB4((uint64_t)v26);
}

void sub_100487294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

uint64_t sub_1004872D0(uint64_t result, unsigned int a2, int a3)
{
  if (a2 <= 0xFF)
  {
    uint64_t v5 = result;
    v11[0] = 0;
    v11[1] = 0;
    sub_10003AED0((uint64_t)v11, result);
    uint64_t v6 = *(void *)(v5 + 936);
    if (a2 >= (unint64_t)((*(void *)(v5 + 944) - v6) >> 2))
    {
      if (!a3) {
        return sub_10003AFB4((uint64_t)v11);
      }
      int v10 = 0;
      sub_10035EF6C(v5 + 936, a2 + 1, &v10);
      uint64_t v7 = (_DWORD *)(*(void *)(v5 + 936) + 4 * a2);
      if (*v7 == a3)
      {
LABEL_8:
        uint64_t v8 = sub_1003708B0();
        sub_1002EACE8(__p, v5 + 936);
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v8 + 1200))(v8, v5, __p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        return sub_10003AFB4((uint64_t)v11);
      }
    }
    else
    {
      uint64_t v7 = (_DWORD *)(v6 + 4 * a2);
      if (*v7 == a3) {
        return sub_10003AFB4((uint64_t)v11);
      }
    }
    *uint64_t v7 = a3;
    goto LABEL_8;
  }
  return result;
}

void sub_1004873EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t sub_10048741C(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 788);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_100487464(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 796);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_1004874AC(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  if (sub_100484FCC(a1)) {
    uint64_t v2 = *(unsigned int *)(a1 + 800);
  }
  else {
    uint64_t v2 = 2;
  }
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

void sub_100487508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10048751C(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 804);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_100487564(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 808);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_1004875AC(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 812);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_1004875F4(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 816);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_10048763C(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 817);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_100487684(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 820);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_1004876CC(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 824);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_100487714(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 828);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_10048775C(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 832);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_1004877A4(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 836);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_1004877EC(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 840);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_100487834(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 841);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_10048787C(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 842);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_1004878C4(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 844);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_10048790C(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 856);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_100487954(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 860);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_10048799C(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 864);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_1004879E4(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 868);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_100487A2C(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 872);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_100487A74(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 876);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_100487ABC(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 880);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_100487B04(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 884);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_100487B4C(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 888);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_100487B94(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 892);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_100487BDC(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 896);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_100487C24(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 900);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_100487C6C(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 904);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_100487CB4(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 908);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_100487CFC(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 990);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_100487D44(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int16 *)(a1 + 1504);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_100487D8C(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 848);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_100487DD4(uint64_t a1, int a2)
{
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1);
  LODWORD(v4) = a2 + 7;
  if (a2 >= 0) {
    unint64_t v4 = a2;
  }
  else {
    unint64_t v4 = v4;
  }
  uint64_t v5 = *(void *)(a1 + 912);
  if (*(void *)(a1 + 920) - v5 <= (unint64_t)(unsigned __int16)(v4 >> 3)) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = (*(unsigned __int8 *)(v5 + (unsigned __int16)(v4 >> 3)) >> (a2 & 7)) & 1;
  }
  sub_10003AFB4((uint64_t)v8);
  return v6;
}

uint64_t sub_100487E5C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unint64_t v4 = *(unsigned char **)(a1 + 912);
  uint64_t v5 = *(unsigned char **)(a1 + 920);
  size_t v6 = v5 - v4;
  if (v5 != v4)
  {
    sub_1002B1BCC(a2, v5 - v4);
    uint64_t v7 = (char *)a2[1];
    memmove(v7, v4, v6);
    a2[1] = &v7[v6];
  }
  return sub_10003AFB4((uint64_t)v9);
}

void sub_100487EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100487EFC(uint64_t a1, unsigned int a2)
{
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1);
  uint64_t v4 = *(void *)(a1 + 936);
  if (a2 >= (unint64_t)((*(void *)(a1 + 944) - v4) >> 2)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *(unsigned int *)(v4 + 4 * a2);
  }
  sub_10003AFB4((uint64_t)v7);
  return v5;
}

id sub_100487F68(uint64_t a1, void *a2, uint64_t **a3)
{
  id v5 = a2;
  uint64_t v7 = *a3;
  size_t v6 = a3[1];
  if (*a3 == v6) {
    goto LABEL_26;
  }
  int v22 = 0;
  do
  {
    if (*v7 != a1)
    {
      sub_100475EE0(*v7, (uint64_t)__p);
      if (v26 >= 0) {
        uint64_t v8 = __p;
      }
      else {
        uint64_t v8 = *(unsigned char **)__p;
      }
      unint64_t v9 = +[NSString stringWithCString:v8 encoding:4];
      if (v26 < 0) {
        operator delete(*(void **)__p);
      }
      int v10 = qword_100A19ED8;
      if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long __p = 138412546;
        *(void *)&__p[4] = v9;
        __int16 v24 = 2112;
        id v25 = v5;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Device Name: %@, Localized Name: %@", __p, 0x16u);
      }
      if ([v9 length] && objc_msgSend(v9, "hasPrefix:", v5))
      {
        if ([v5 isEqualToString:v9])
        {
          signed int v11 = 1;
        }
        else
        {
          BOOL v21 = +[NSString stringWithFormat:@"^%@ #\\d*$", v5];
          char v12 = +[NSRegularExpression regularExpressionWithPattern:options:error:](NSRegularExpression, "regularExpressionWithPattern:options:error:");
          if (objc_msgSend(v12, "numberOfMatchesInString:options:range:", v9, 0, 0, objc_msgSend(v9, "length")) == (id)1)
          {
            __int16 v13 = +[NSCharacterSet decimalDigitCharacterSet];
            uint64_t v14 = [v13 invertedSet];
            __int16 v15 = [v9 componentsSeparatedByCharactersInSet:v14];
            __int16 v16 = [v15 componentsJoinedByString:&stru_1009C1AC8];

            signed int v11 = [v16 intValue];
          }
          else
          {
            signed int v11 = 0;
          }
        }
        int v17 = v22;
        if (v11 > v22) {
          int v17 = v11;
        }
        int v22 = v17;
      }

      size_t v6 = a3[1];
    }
    ++v7;
  }
  while (v7 != v6);
  if (v22 <= 0)
  {
LABEL_26:
    id v19 = v5;
  }
  else
  {
    int v18 = +[NSString stringWithFormat:@" #%d", (v22 + 1)];
    id v19 = [v5 stringByAppendingString:v18];
  }

  return v19;
}

void sub_100488254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_1004882F4(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 1076) != 76
    || ((unsigned int v2 = *(_DWORD *)(a1 + 1080) - 8194, v3 = v2 > 0x1D, v4 = (1 << v2) & 0x20037F9B, !v3)
      ? (BOOL v5 = v4 == 0)
      : (BOOL v5 = 1),
        v5))
  {
    if (!*(unsigned char *)(a1 + 1069) || (*(unsigned char *)(a1 + 1089) & 0x10) == 0 && (*(unsigned char *)(a1 + 1101) & 2) == 0) {
      return;
    }
  }
  __int16 v39 = 0;
  __int16 v40 = 0;
  uint64_t v41 = 0;
  memset(&v38, 0, sizeof(v38));
  sub_100475EE0(a1, (uint64_t)&v38);
  if (!std::string::compare(&v38, "AirPods"))
  {
    __int16 v13 = sub_100379650(@"AIRPODS", @"Headsets");
    uint64_t v14 = +[NSString stringWithFormat:@"%@", v13];
LABEL_41:
    int v10 = (__CFString *)v14;

    goto LABEL_42;
  }
  if (!std::string::compare(&v38, "Powerbeats³"))
  {
    __int16 v13 = sub_100379650(@"POWERBEATS3", @"Headsets");
    uint64_t v14 = +[NSString stringWithFormat:@"%@", v13];
    goto LABEL_41;
  }
  if (!std::string::compare(&v38, "Beats Solo³"))
  {
    __int16 v13 = sub_100379650(@"SOLO3", @"Headsets");
    uint64_t v14 = +[NSString stringWithFormat:@"%@", v13];
    goto LABEL_41;
  }
  if (!std::string::compare(&v38, "Beatsˣ") || !std::string::compare(&v38, "BeatsX"))
  {
    __int16 v13 = sub_100379650(@"BEATSX", @"Headsets");
    uint64_t v14 = +[NSString stringWithFormat:@"%@", v13];
    goto LABEL_41;
  }
  if (!std::string::compare(&v38, "Beats Studio³"))
  {
    __int16 v13 = sub_100379650(@"BEATSSTUDIO3", @"Headsets");
    uint64_t v14 = +[NSString stringWithFormat:@"%@", v13];
    goto LABEL_41;
  }
  if (!std::string::compare(&v38, "Beats Studio Pro"))
  {
    int v10 = @"Beats Studio Pro";
    goto LABEL_42;
  }
  if (!std::string::compare(&v38, "Powerbeats Pro"))
  {
    __int16 v13 = sub_100379650(@"POWERBEATSPRO", @"Headsets");
    uint64_t v14 = +[NSString stringWithFormat:@"%@", v13];
    goto LABEL_41;
  }
  if (!std::string::compare(&v38, "Solo Pro"))
  {
    __int16 v13 = sub_100379684(@"SOLOPRO", @"Headsets");
    uint64_t v14 = +[NSString stringWithFormat:@"%@", v13];
    goto LABEL_41;
  }
  if (!std::string::compare(&v38, "AirPods Pro"))
  {
    int v10 = @"AirPods Pro";
    goto LABEL_42;
  }
  if (!std::string::compare(&v38, "AirPods Max"))
  {
    int v10 = @"AirPods Max";
    goto LABEL_42;
  }
  if (!std::string::compare(&v38, "Beats Studio Buds"))
  {
    int v10 = @"Beats Studio Buds";
    goto LABEL_42;
  }
  if (!std::string::compare(&v38, "Beats Studio Buds +"))
  {
    int v10 = @"Beats Studio Buds +";
LABEL_42:
    if (!sub_100372E50())
    {
      sub_100488D20(a1);
      goto LABEL_47;
    }
    long long __p = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v15 = sub_100372E50();
    (*(void (**)(void **__return_ptr))(*(void *)v15 + 112))(&__p);
    if (SHIBYTE(v37) < 0)
    {
      if (v36)
      {
        p_p = __p;
        goto LABEL_50;
      }
    }
    else if (HIBYTE(v37))
    {
      p_p = &__p;
LABEL_50:
      uint64_t v17 = +[NSString stringWithUTF8String:p_p];
      int v18 = qword_100A19ED8;
      if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412546;
        *(void *)&uint8_t buf[4] = v17;
        *(_WORD *)&unsigned char buf[12] = 2112;
        *(void *)&unsigned char buf[14] = v10;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Name prefix: %@, Device type: %@", buf, 0x16u);
      }
      id v19 = sub_100379650(@"APPLE_AUDIO_DEVICE_NAME", v10);
      id v34 = 0;
      char v12 = +[NSString stringWithValidatedFormat:v19, @"%@%@", &v34, v17, v10 validFormatSpecifiers error];
      id v20 = v34;

      if (!v12)
      {
        __int16 v29 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
          sub_10076C754((uint64_t)v20, v29, v30);
        }
        char v12 = 0;
        signed int v11 = (void *)v17;
        goto LABEL_74;
      }

      signed int v11 = (void *)v17;
LABEL_57:
      int v22 = qword_100A19ED8;
      if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        *(void *)&uint8_t buf[4] = v12;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Localized name: %@", buf, 0xCu);
      }
      if (qword_1009F8768 != -1) {
        dispatch_once(&qword_1009F8768, &stru_1009AF8F8);
      }
      sub_10060C508((uint64_t)off_1009F8760, (uint64_t **)&v39);
      __int16 v31 = 0;
      long long __dst = 0;
      uint64_t v33 = 0;
      int v23 = v39;
      int64_t v24 = v40 - (unsigned char *)v39;
      if (v40 != v39)
      {
        sub_1000405B8(&v31, v24 >> 3);
        id v25 = (char *)__dst;
        memmove(__dst, v23, v24);
        long long __dst = &v25[8 * (v24 >> 3)];
      }
      char v26 = sub_100487F68(a1, v12, (uint64_t **)&v31);
      if (v31)
      {
        long long __dst = v31;
        operator delete(v31);
      }
      memset(buf, 0, sizeof(buf));
      id v20 = v26;
      sub_10004191C(buf, (char *)[v20 UTF8String]);
      int v27 = qword_100A19ED8;
      if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
      {
        int v28 = buf;
        if ((buf[23] & 0x80u) != 0) {
          int v28 = *(uint8_t **)buf;
        }
        *(_DWORD *)__int16 v42 = 136315138;
        *(void *)&v42[4] = v28;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Renaming device to: %s", v42, 0xCu);
      }
      sub_1004776CC(a1, (uint64_t)buf, 1);
      if ((char)buf[23] < 0) {
        operator delete(*(void **)buf);
      }
LABEL_74:

      if (SHIBYTE(v37) < 0) {
        operator delete(__p);
      }
      goto LABEL_76;
    }
    BOOL v21 = qword_100A19ED8;
    if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "No name prefix", buf, 2u);
    }
    char v12 = v10;
    signed int v11 = 0;
    goto LABEL_57;
  }
  std::string::size_type size = HIBYTE(v38.__r_.__value_.__r.__words[2]);
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v38.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    uint64_t v7 = qword_100A19ED8;
    if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a1, &__p);
      if (v37 >= 0) {
        uint64_t v8 = &__p;
      }
      else {
        uint64_t v8 = __p;
      }
      unint64_t v9 = &v38;
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        unint64_t v9 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = v8;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&unsigned char buf[14] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Set user-defined name for Apple Audio Device: %s to: %s", buf, 0x16u);
      if (SHIBYTE(v37) < 0) {
        operator delete(__p);
      }
    }
    sub_10004191C(&__p, "");
    *(void *)__int16 v42 = 0;
    sub_100026C30((uint64_t)v42);
    *(void *)long long buf = *(int *)v42;
    *(void *)&uint8_t buf[8] = *(__int16 *)&v42[4];
    sub_100476E14(a1, (uint64_t)&__p, buf);
    if (SHIBYTE(v37) < 0) {
      operator delete(__p);
    }
    int v10 = 0;
    sub_1004776CC(a1, (uint64_t)&v38, 0);
    signed int v11 = 0;
    char v12 = 0;
    goto LABEL_76;
  }
  int v10 = 0;
LABEL_47:
  signed int v11 = 0;
  char v12 = 0;
LABEL_76:
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (v39)
  {
    __int16 v40 = v39;
    operator delete(v39);
  }
}

void sub_100488BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a28) {
    operator delete(a28);
  }

  _Unwind_Resume(a1);
}

void sub_100488D20(uint64_t a1)
{
  sub_10047609C(a1, (uint64_t)v11);
  if (v12 < 0)
  {
    if (v11[1])
    {
      operator delete(v11[0]);
      return;
    }
  }
  else if (v12)
  {
    return;
  }
  if (*(_DWORD *)(a1 + 1076) == 76
    && ((unsigned int v2 = *(_DWORD *)(a1 + 1080) - 8194, v3 = v2 > 0x1D, v4 = (1 << v2) & 0x20037F9B, !v3)
      ? (BOOL v5 = v4 == 0)
      : (BOOL v5 = 1),
        !v5)
    || *(unsigned char *)(a1 + 1069) && ((*(unsigned char *)(a1 + 1089) & 0x10) != 0 || (*(unsigned char *)(a1 + 1101) & 2) != 0))
  {
    if (v12 < 0) {
      operator delete(v11[0]);
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 776);
    if (v12 < 0)
    {
      operator delete(v11[0]);
      if ((v6 & 1) == 0) {
        return;
      }
    }
    else if ((v6 & 1) == 0)
    {
      return;
    }
  }
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_100488E78;
  v8[3] = &unk_1009AF758;
  id v9 = objc_alloc_init((Class)CBUserController);
  uint64_t v10 = a1;
  id v7 = v9;
  [v7 getCurrentUserGivenNameWithCompletion:v8];
}

void sub_100488E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_100488E78(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int16 v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  sub_100475F84(*(void *)(a1 + 40), (uint64_t)__p);
  if (v33 >= 0) {
    int v4 = __p;
  }
  else {
    int v4 = *(unsigned char **)__p;
  }
  BOOL v5 = +[NSString stringWithCString:v4 encoding:4];
  if (v33 < 0) {
    operator delete(*(void **)__p);
  }
  id v6 = [v3 length];
  if (v3 && v6)
  {
    id v7 = sub_100379650(@"APPLE_DEVICE_NAME", v5);
    id v28 = 0;
    uint64_t v8 = +[NSString stringWithValidatedFormat:v7, @"%@%@", &v28, v3, v5 validFormatSpecifiers error];
    id v9 = v28;

    if (v8)
    {
      if (qword_1009F8768 != -1) {
        dispatch_once(&qword_1009F8768, &stru_1009AF8F8);
      }
      sub_10060C508((uint64_t)off_1009F8760, (uint64_t **)&v29);
      uint64_t v10 = *(void *)(a1 + 40);
      long long __dst = 0;
      uint64_t v27 = 0;
      id v25 = 0;
      signed int v11 = v29;
      int64_t v12 = v30 - (unsigned char *)v29;
      if (v30 != v29)
      {
        sub_1000405B8(&v25, v12 >> 3);
        __int16 v13 = (char *)__dst;
        memmove(__dst, v11, v12);
        long long __dst = &v13[8 * (v12 >> 3)];
      }
      uint64_t v14 = sub_100487F68(v10, v8, (uint64_t **)&v25);
      if (v25)
      {
        long long __dst = v25;
        operator delete(v25);
      }
      uint64_t v15 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        id v16 = [v14 UTF8String];
        *(_DWORD *)long long __p = 136315138;
        *(void *)&__p[4] = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Bluetooth device name is auto updated to %s", __p, 0xCu);
      }
      uint64_t v17 = *(void *)(a1 + 40);
      id v18 = v14;
      sub_10004191C(__p, (char *)[v18 UTF8String]);
      sub_1004776CC(v17, (uint64_t)__p, 1);
      if (v33 < 0) {
        operator delete(*(void **)__p);
      }
    }
    else
    {
      int v22 = qword_100A19E50;
      if (v9 && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long __p = 138412290;
        *(void *)&__p[4] = v9;
        _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "stringWithValidatedFormat failed for APPLE_DEVICE_NAME: %@", __p, 0xCu);
        int v22 = qword_100A19E50;
      }
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
        sub_10076C7C4(v22, v23, v24);
      }
      id v18 = 0;
    }
  }
  else
  {
    id v19 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076C840(v19, v20, v21);
    }
    uint64_t v8 = 0;
    id v18 = 0;
  }

  if (v29)
  {
    uint64_t v30 = v29;
    operator delete(v29);
  }
}

void sub_1004891CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100489294(uint64_t result, int a2)
{
  if (a2 && *(_DWORD *)(result + 424) != a2)
  {
    *(_DWORD *)(result + 424) = a2;
    unsigned int v2 = *(uint64_t (**)(void))(*(void *)sub_1003708B0() + 1328);
    return v2();
  }
  return result;
}

uint64_t sub_100489318(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 424);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_100489360(uint64_t a1, float a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1);
  *(float *)(a1 + 1124) = a2;
  uint64_t v4 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, float))(*(void *)v4 + 1360))(v4, a1, *(float *)(a1 + 1124));
  return sub_10003AFB4((uint64_t)v6);
}

void sub_1004893E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

float sub_1004893FC(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  float v2 = *(float *)(a1 + 1124);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_10048944C(uint64_t a1, char a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1);
  *(unsigned char *)(a1 + 1152) = a2;
  return sub_10003AFB4((uint64_t)v5);
}

uint64_t sub_100489494(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 1152);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_1004894DC(uint64_t a1, uint64_t a2)
{
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1);
  if (a1 + 1128 != a2) {
    sub_1002EABE0((char *)(a1 + 1128), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  uint64_t v4 = sub_1003708B0();
  sub_1002EACE8(__p, a1 + 1128);
  (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v4 + 1376))(v4, a1, __p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return sub_10003AFB4((uint64_t)v7);
}

void sub_1004895A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1004895D0(uint64_t a1, uint64_t a2)
{
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1);
  uint64_t v4 = *(void *)(a1 + 1280);
  if (v4 != a2)
  {
    BOOL v5 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134218240;
      uint64_t v9 = v4;
      __int16 v10 = 2048;
      uint64_t v11 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Updating powerUISmartChargingState from %lu->%lu", buf, 0x16u);
    }
    *(void *)(a1 + 1280) = a2;
  }
  return sub_10003AFB4((uint64_t)v7);
}

void sub_1004896B4(uint64_t a1, void *a2)
{
  id v4 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1);
  if (!v4 || ([*(id *)(a1 + 1288) isEqualToDate:v4] & 1) == 0)
  {
    BOOL v5 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 1288);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v9 = v6;
      __int16 v10 = 2112;
      id v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Updating powerUISmartChargingDeadline from %@->%@", buf, 0x16u);
    }
    objc_storeStrong((id *)(a1 + 1288), a2);
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_1004897B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_1004897E0(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(void *)(a1 + 1280);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

id sub_100489828(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  id v2 = *(id *)(a1 + 1288);
  sub_10003AFB4((uint64_t)v4);

  return v2;
}

uint64_t sub_100489888(uint64_t a1)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 432);
  id v3 = &off_100998428;
  id v4 = 0;
  sub_100049EE0(a1 + 496, (uint64_t)&v3);
  id v3 = &off_100998428;
  if (v4) {
    sub_1000368F4(v4);
  }
  return sub_10003AFB4((uint64_t)v5);
}

void sub_100489908(_Unwind_Exception *a1, uint64_t a2, atomic_uint *a3, ...)
{
  va_start(va, a3);
  if (a3) {
    sub_1000368F4(a3);
  }
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_100489930(unsigned __int8 *a1, unsigned int a2)
{
  int v4 = *a1;
  int v5 = v4 | (a1[1] << 8);
  BOOL v6 = v5 == 19456 || v5 == 76;
  if (v6) {
    unsigned __int8 v7 = 2;
  }
  else {
    unsigned __int8 v7 = 1;
  }
  if (v6) {
    unsigned int v8 = 3;
  }
  else {
    unsigned int v8 = 2;
  }
  BOOL v9 = v4 == 76 || v5 == 19456;
  if (v9 || v5 == 76)
  {
    id v10 = objc_alloc_init((Class)NSMutableDictionary);
    id v11 = +[NSNumber numberWithUnsignedShort:76];
    [v10 setObject:v11 forKey:@"kCBMsgArgVID"];

    [v10 setObject:&off_1009E0E90 forKey:@"kCBMsgArgVIDSource"];
    uint64_t v12 = v7;
    LODWORD(v11) = a1[v7];
    __int16 v13 = +[NSNumber numberWithUnsignedChar:a1[v7]];
    [v10 setObject:v13 forKey:@"CBCentralManagerScanOptionMatchingRuleTypeKey"];

    int v14 = v11 - 1;
    uint64_t v15 = v12 + 1;
    switch(v14)
    {
      case 0:
        if (a2 > v8)
        {
          if (a2 == 20)
          {
            id v16 = +[NSData dataWithBytes:&a1[v15] length:16];
            [v10 setObject:v16 forKey:@"ServiceUUIDHash"];
          }
          else
          {
            id v16 = [objc_alloc((Class)NSString) initWithBytes:&a1[v15] length:a2 - v8 encoding:4];
            if (v16) {
              [v10 setObject:v16 forKey:@"kCBMsgArgModelIdentifier"];
            }
          }
          goto LABEL_24;
        }
        break;
      case 1:
        uint64_t v17 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v22 = 0;
          id v18 = "Warning: Received Apple EIR 3rd party advertising data - not processed";
          id v19 = (uint8_t *)&v22;
          goto LABEL_27;
        }
        break;
      case 2:
        id v16 = +[NSNumber numberWithUnsignedChar:a1[v15]];
        [v10 setObject:v16 forKey:@"kCBMsgArgColorID"];
LABEL_24:

        break;
      case 6:
        uint64_t v17 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v21 = 0;
          id v18 = "Warning: Received Apple EIR ProxPairing data - not processed";
          id v19 = (uint8_t *)&v21;
LABEL_27:
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, v18, v19, 2u);
        }
        break;
      default:
        break;
    }
  }
  else
  {
    id v10 = 0;
  }

  return v10;
}

void sub_100489BC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_100489C38(uint64_t a1, void *a2, unsigned int a3)
{
  __s2 = 0;
  unsigned __int8 v37 = 0;
  *(void *)&__n[1] = 0;
  __n[0] = 0;
  uint64_t v35 = 0;
  unsigned __int8 v34 = 0;
  v33[0] = 0;
  v33[1] = 0;
  sub_10003AED0((uint64_t)v33, a1 + 432);
  size_t v6 = sub_100045F00(a1 + 496);
  if (v6 == a3)
  {
    unsigned __int8 v7 = (const void *)sub_10004A6E4(a1 + 496);
    if (!memcmp(a2, v7, v6))
    {
      BOOL v9 = 0;
      goto LABEL_50;
    }
  }
  if (!a3
    || sub_10018C15C((unsigned __int8 *)a2, 255, __n, (unsigned __int8 **)&__n[1])
    || sub_100045F00(a1 + 496)
    && (char v26 = (unsigned __int8 *)sub_10004A6E4(a1 + 496),
        sub_10018C15C(v26, 255, &v37, (unsigned __int8 **)&__s2)))
  {
    int v8 = 0;
LABEL_6:
    BOOL v9 = 1;
    goto LABEL_7;
  }
  if (__n[0] != v37)
  {
    int v8 = 1;
    goto LABEL_6;
  }
  BOOL v9 = memcmp(*(const void **)&__n[1], __s2, __n[0]) != 0;
  int v8 = 1;
LABEL_7:
  uint64_t v10 = sub_100035F54();
  if (v8 & (*(unsigned int (**)(uint64_t))(*(void *)v10 + 384))(v10) & v9)
  {
    id v11 = sub_100489930(*(unsigned __int8 **)&__n[1], __n[0]);
    NSLog(@"Received EIR dict: %@", v11);
    if (v11)
    {
      __int16 v29 = [v11 valueForKey:@"kCBMsgArgVID"];
      uint64_t v12 = [v11 valueForKey:@"kCBMsgArgVIDSource"];
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & (v12 != 0)) == 1)
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          int v28 = [v29 unsignedShortValue];
          int v13 = [v12 unsignedCharValue];
          int v14 = qword_100A19E50;
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
          {
            sub_100474E18(a1, __p);
            uint64_t v15 = __p;
            if (v32 < 0) {
              uint64_t v15 = (void **)__p[0];
            }
            *(_DWORD *)long long buf = 136447234;
            *(void *)&uint8_t buf[4] = v15;
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&unsigned char buf[14] = v13;
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)__int16 v40 = v28;
            *(_WORD *)&v40[4] = 1024;
            int v41 = 0;
            __int16 v42 = 1024;
            int v43 = 0;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "setEIRData %{public}s deviceId information: vidSrc 0x%x vid 0x%x pid 0x%x version 0x%x", buf, 0x24u);
            if (v32 < 0) {
              operator delete(__p[0]);
            }
          }
          sub_10047C89C(a1, v13, v28, 0, 0);
        }
      }
      id v16 = [v11 valueForKey:@"kCBMsgArgColorID"];
      if (v16)
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          sub_100489294(a1, (int)[v16 unsignedCharValue]);
        }
      }
      uint64_t v17 = [v11 valueForKey:@"kCBMsgArgModelIdentifier"];
      if (v17)
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          id v18 = v17;
          sub_10004191C(&__str, (char *)[v18 UTF8String]);
          std::string::operator=((std::string *)(a1 + 392), &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
        }
      }
    }
  }
  sub_1000335D8(buf, a2, a3);
  sub_100049EE0(a1 + 496, (uint64_t)buf);
  *(void *)long long buf = &off_100998428;
  if (*(void *)&buf[8]) {
    sub_1000368F4(*(atomic_uint **)&buf[8]);
  }
  if (a3)
  {
    int v19 = sub_10018C15C((unsigned __int8 *)a2, 16, &v34, &v35);
    int v20 = v34;
    if (!v19 && v34)
    {
      if (!v35) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/core/Device.mm", 6212, "(uint8_t *)newDeviceIdData");
      }
      if (v34 <= 1u)
      {
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/core/Device.mm");
        int v21 = 0;
      }
      else
      {
        int v21 = *(unsigned __int16 *)v35;
        if (v34 > 3u)
        {
          int v22 = *((unsigned __int16 *)v35 + 1);
          if (v34 > 5u)
          {
            int v23 = *((unsigned __int16 *)v35 + 2);
            if (v34 >= 8u)
            {
              int v24 = *((unsigned __int16 *)v35 + 3);
LABEL_49:
              sub_10047C89C(a1, v21, v22, v23, v24);
              goto LABEL_50;
            }
LABEL_48:
            int v24 = 0;
            goto LABEL_49;
          }
LABEL_47:
          sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/core/Device.mm");
          int v23 = 0;
          goto LABEL_48;
        }
      }
      sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/core/Device.mm");
      int v22 = 0;
      goto LABEL_47;
    }
    id v25 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109888;
      *(_DWORD *)&uint8_t buf[4] = v20;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = a3;
      *(_WORD *)&unsigned char buf[14] = 1024;
      *(_DWORD *)&uint8_t buf[16] = v37;
      *(_WORD *)__int16 v40 = 1024;
      *(_DWORD *)&void v40[2] = __n[0];
      _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Invalid newDeviceIdDataLength:%d, dataLength:%d, oldManufacturerDataLength:%d, newManufacturerDataLength:%d skipping setDeviceId", buf, 0x1Au);
    }
  }
LABEL_50:
  sub_10003AFB4((uint64_t)v33);
  return v9;
}

void sub_10048A1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  sub_10003AFB4((uint64_t)&a22);
  _Unwind_Resume(a1);
}

BOOL sub_10048A2B0(uint64_t a1, void *a2, unsigned char *a3)
{
  uint64_t v5 = a1;
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, a1 + 432);
  v5 += 496;
  size_t v6 = sub_100045F00(v5);
  sub_100052430(v5, a2, v6);
  *a3 = v7;
  BOOL v8 = v7 != 0;
  sub_10003AFB4((uint64_t)v10);
  return v8;
}

void sub_10048A32C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10048A340(uint64_t a1, unsigned char *a2)
{
  int v21 = 0;
  unsigned __int8 v20 = 0;
  v19[0] = 0;
  v19[1] = 0;
  sub_10003AED0((uint64_t)v19, a1 + 432);
  if (!sub_100045F00(a1 + 496))
  {
LABEL_27:
    uint64_t v13 = 0;
    goto LABEL_28;
  }
  int v4 = (unsigned __int8 *)sub_10004A6E4(a1 + 496);
  if (sub_10018C15C(v4, 255, &v20, &v21) || !v21 || !v20)
  {
    id v11 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Could not get the EIR manufacturer data", (uint8_t *)__p, 2u);
    }
    goto LABEL_27;
  }
  if (*v21 && v21[1] != 76)
  {
    int v14 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
    {
      sub_100474E18(a1, __p);
      uint64_t v15 = v18 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)long long buf = 136446210;
      int v23 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Device %{public}s is not an Apple device", buf, 0xCu);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
    }
    goto LABEL_27;
  }
  uint64_t v5 = 0;
  uint64_t v6 = 1;
  if (*v21 != 76) {
    uint64_t v6 = 2;
  }
  char v7 = &v21[v6];
  int v21 = v7;
  unsigned __int8 v8 = *v7;
  while (v8 == 1)
  {
    uint64_t v9 = v5;
    do
    {
      uint64_t v5 = v9;
      int v10 = v7[v9];
      uint64_t v9 = (v9 + 1);
    }
    while (v10);
    unsigned __int8 v8 = 0;
    if (v20 <= v5) {
      goto LABEL_27;
    }
  }
  if (v8 != 2) {
    goto LABEL_27;
  }
  if (v7[v5 + 1] < 3u) {
    goto LABEL_27;
  }
  uint64_t v12 = (v5 + 2);
  if (v7[v12] != 2) {
    goto LABEL_27;
  }
  *a2 = v7[v12 + 1];
  uint64_t v13 = 1;
LABEL_28:
  sub_10003AFB4((uint64_t)v19);
  return v13;
}

void sub_10048A570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10048A590(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v27 = 0;
  unsigned __int8 v26 = 0;
  v25[0] = 0;
  v25[1] = 0;
  sub_10003AED0((uint64_t)v25, a1 + 432);
  if (!sub_100045F00(a1 + 496))
  {
    uint64_t v15 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
    {
      sub_100474E18(a1, __p);
      if (v24 >= 0) {
        id v16 = __p;
      }
      else {
        id v16 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136446210;
      __int16 v29 = v16;
      uint64_t v17 = "No EIR for device %{public}s";
LABEL_21:
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, v17, buf, 0xCu);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }
LABEL_34:
    uint64_t v20 = 0;
    goto LABEL_35;
  }
  uint64_t v6 = (unsigned __int8 *)sub_10004A6E4(a1 + 496);
  if (sub_10018C15C(v6, 255, &v26, &v27) || !v27 || !v26)
  {
    char v18 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Could not get the EIR manufacturer data", (uint8_t *)__p, 2u);
    }
    goto LABEL_34;
  }
  int v7 = *v27;
  if (*v27 && v7 != 76 && v27[1] != 76)
  {
    uint64_t v15 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
    {
      sub_100474E18(a1, __p);
      if (v24 >= 0) {
        int v21 = __p;
      }
      else {
        int v21 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136446210;
      __int16 v29 = v21;
      uint64_t v17 = "Device %{public}s is not an Apple device";
      goto LABEL_21;
    }
    goto LABEL_34;
  }
  uint64_t v8 = 0;
  BOOL v9 = v7 == 76;
  uint64_t v10 = 1;
  if (!v9) {
    uint64_t v10 = 2;
  }
  id v11 = &v27[v10];
  uint64_t v27 = v11;
  unsigned __int8 v12 = *v11;
  while (v12 == 1)
  {
    uint64_t v13 = v8;
    do
    {
      uint64_t v8 = v13;
      int v14 = v11[v13];
      uint64_t v13 = (v13 + 1);
    }
    while (v14);
    unsigned __int8 v12 = 0;
    if (v26 <= v8) {
      goto LABEL_34;
    }
  }
  if (v12 != 2) {
    goto LABEL_34;
  }
  unsigned int v19 = v11[v8 + 1];
  if (v19 < 3 || v11[(v8 + 2)] != 2) {
    goto LABEL_34;
  }
  uint64_t v20 = sub_1004AF20C((uint64_t)&v11[(v8 + 4)], (v19 - 4), a2, a3);
LABEL_35:
  sub_10003AFB4((uint64_t)v25);
  return v20;
}

void sub_10048A840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10048A868(uint64_t a1, void *a2, size_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  v42[0] = 0;
  v42[1] = 0;
  sub_10003AED0((uint64_t)v42, a1);
  if (!*(void *)(a1 + 600))
  {
    a5 = 0;
    goto LABEL_81;
  }
  __int16 v39 = 0;
  __int16 v40 = 0;
  uint64_t v41 = 0;
  long long __p = 0;
  unsigned __int8 v37 = 0;
  uint64_t v38 = 0;
  long long v35 = xmmword_1007BECB0;
  int v12 = sub_10047AE08(a1, (uint64_t)&v35, 0x200u, &__p);
  uint64_t v13 = (char *)__p;
  if (!v12 || v37 - (unsigned char *)__p != 16) {
    goto LABEL_76;
  }
  if (*(unsigned char *)__p == 1)
  {
    int v33 = *((_DWORD *)__p + 2);
    if (__p != v37)
    {
      do
      {
        long long v34 = 0uLL;
        long long v34 = *(_OWORD *)v13;
        sub_1002D5394(&v34);
        v13 += 16;
      }
      while (v13 != v37);
      uint64_t v13 = (char *)__p;
    }
    unsigned __int8 v37 = v13;
    if (v33)
    {
      __s2 = a2;
      int v14 = 0;
      if (a4) {
        BOOL v15 = a6 == 0;
      }
      else {
        BOOL v15 = 1;
      }
      int v17 = !v15 && a5 != 0;
      int v31 = v17;
      do
      {
        char v18 = (long long *)v39;
        if (v39 == v40)
        {
          __int16 v40 = (long long *)v39;
        }
        else
        {
          do
          {
            long long v34 = 0uLL;
            long long v34 = *v18;
            sub_1002D5394(&v34);
            ++v18;
          }
          while (v18 != v40);
          unsigned int v19 = (char *)__p;
          uint64_t v13 = v37;
          __int16 v40 = (long long *)v39;
          if (__p != v37)
          {
            do
            {
              long long v34 = 0uLL;
              long long v34 = *(_OWORD *)v19;
              sub_1002D5394(&v34);
              v19 += 16;
            }
            while (v19 != v37);
            uint64_t v13 = (char *)__p;
          }
        }
        unsigned __int8 v37 = v13;
        if (!sub_10047AE08(a1, (uint64_t)&v35, 2 * v14 + 513, &v39)
          || (sub_10047AE08(a1, (uint64_t)&v35, 2 * v14 + 514, &__p) & 1) == 0)
        {
          goto LABEL_74;
        }
        int v21 = (long long *)v39;
        uint64_t v20 = v40;
        if ((char *)v40 - (unsigned char *)v39 == 16 && (v22 = (char *)__p, uint64_t v13 = v37, v37 - (unsigned char *)__p == 16))
        {
          if (*(unsigned char *)v39 == 4 && *(unsigned char *)__p == 4)
          {
            if (*((unsigned __int16 *)v39 + 1) == a3)
            {
              size_t __n = *((unsigned __int16 *)__p + 1);
              __std::string src = (void *)*((void *)__p + 1);
              if (!memcmp(*((const void **)v39 + 1), __s2, a3))
              {
                if (v31)
                {
                  uint64_t v23 = *(unsigned int *)a5;
                  unsigned int v24 = __n + v23 + 2;
                  if (v24 <= a6)
                  {
                    *(_WORD *)(a4 + v23) = __n;
                    uint64_t v25 = (*(_DWORD *)a5 + 2);
                    *(_DWORD *)a5 = v25;
                    memcpy((void *)(a4 + v25), __src, __n);
                    int v26 = __n;
                    int v27 = *(_DWORD *)a5;
                    goto LABEL_64;
                  }
                }
                else
                {
                  if (!a5)
                  {
                    if (v21 != v20)
                    {
                      do
                      {
                        long long v34 = *v21;
                        sub_1002D5394(&v34);
                        ++v21;
                      }
                      while (v21 != v40);
                      uint64_t v20 = (long long *)v39;
                      int v22 = (char *)__p;
                      uint64_t v13 = v37;
                    }
                    __int16 v40 = v20;
                    if (v22 == v13)
                    {
                      a5 = 1;
                      goto LABEL_77;
                    }
                    do
                    {
                      long long v34 = *(_OWORD *)v22;
                      sub_1002D5394(&v34);
                      v22 += 16;
                    }
                    while (v22 != v37);
                    a5 = 1;
                    goto LABEL_75;
                  }
                  int v27 = __n + 2;
                  int v26 = *(_DWORD *)a5;
LABEL_64:
                  unsigned int v24 = v27 + v26;
                }
                *(_DWORD *)a5 = v24;
                if (v21 != v20)
                {
                  do
                  {
                    long long v34 = 0uLL;
                    long long v34 = *v21;
                    sub_1002D5394(&v34);
                    ++v21;
                  }
                  while (v21 != v40);
                  uint64_t v20 = (long long *)v39;
                  int v22 = (char *)__p;
                  uint64_t v13 = v37;
                }
                __int16 v40 = v20;
                if (v22 == v13) {
                  goto LABEL_45;
                }
                do
                {
                  long long v34 = 0uLL;
                  long long v34 = *(_OWORD *)v22;
                  sub_1002D5394(&v34);
                  v22 += 16;
                }
                while (v22 != v37);
                goto LABEL_44;
              }
              if (v21 != v20)
              {
                do
                {
                  long long v34 = 0uLL;
                  long long v34 = *v21;
                  sub_1002D5394(&v34);
                  ++v21;
                }
                while (v21 != v40);
                uint64_t v20 = (long long *)v39;
                int v22 = (char *)__p;
                uint64_t v13 = v37;
              }
              __int16 v40 = v20;
              if (v22 == v13) {
                goto LABEL_45;
              }
              do
              {
                long long v34 = 0uLL;
                long long v34 = *(_OWORD *)v22;
                sub_1002D5394(&v34);
                v22 += 16;
              }
              while (v22 != v37);
            }
            else
            {
              if (v39 != v40)
              {
                do
                {
                  long long v34 = 0uLL;
                  long long v34 = *v21;
                  sub_1002D5394(&v34);
                  ++v21;
                }
                while (v21 != v40);
                uint64_t v20 = (long long *)v39;
                int v22 = (char *)__p;
                uint64_t v13 = v37;
              }
              __int16 v40 = v20;
              if (v22 == v13) {
                goto LABEL_45;
              }
              do
              {
                long long v34 = 0uLL;
                long long v34 = *(_OWORD *)v22;
                sub_1002D5394(&v34);
                v22 += 16;
              }
              while (v22 != v37);
            }
          }
          else
          {
            if (v39 != v40)
            {
              do
              {
                long long v34 = 0uLL;
                long long v34 = *v21;
                sub_1002D5394(&v34);
                ++v21;
              }
              while (v21 != v40);
              uint64_t v20 = (long long *)v39;
              int v22 = (char *)__p;
              uint64_t v13 = v37;
            }
            __int16 v40 = v20;
            if (v22 == v13) {
              goto LABEL_45;
            }
            do
            {
              long long v34 = 0uLL;
              long long v34 = *(_OWORD *)v22;
              sub_1002D5394(&v34);
              v22 += 16;
            }
            while (v22 != v37);
          }
        }
        else
        {
          if (v39 != v40)
          {
            do
            {
              long long v34 = 0uLL;
              long long v34 = *v21;
              sub_1002D5394(&v34);
              ++v21;
            }
            while (v21 != v40);
            uint64_t v20 = (long long *)v39;
          }
          __int16 v40 = v20;
          uint64_t v13 = (char *)__p;
          if (__p == v37) {
            goto LABEL_45;
          }
          do
          {
            long long v34 = 0uLL;
            long long v34 = *(_OWORD *)v13;
            sub_1002D5394(&v34);
            v13 += 16;
          }
          while (v13 != v37);
        }
LABEL_44:
        uint64_t v13 = (char *)__p;
LABEL_45:
        unsigned __int8 v37 = v13;
        ++v14;
      }
      while (v14 != v33);
    }
    if (a5) {
      a5 = *(_DWORD *)a5 != 0;
    }
    goto LABEL_77;
  }
  if (__p != v37)
  {
    do
    {
      long long v34 = *(_OWORD *)v13;
      sub_1002D5394(&v34);
      v13 += 16;
    }
    while (v13 != v37);
LABEL_74:
    a5 = 0;
LABEL_75:
    uint64_t v13 = (char *)__p;
  }
  else
  {
LABEL_76:
    a5 = 0;
  }
LABEL_77:
  if (v13)
  {
    unsigned __int8 v37 = v13;
    operator delete(v13);
  }
  if (v39)
  {
    __int16 v40 = (long long *)v39;
    operator delete(v39);
  }
LABEL_81:
  sub_10003AFB4((uint64_t)v42);
  return a5;
}

void sub_10048AE18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  sub_10003AFB4(v23 - 96);
  _Unwind_Resume(a1);
}

void sub_10048AE90(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v6 = *a2;
  if ((v6 - 6) < 2)
  {
    if (*((_WORD *)a2 + 1))
    {
      int v9 = 0;
      do
        sub_10048AE90(a1, *((void *)a2 + 1) + 16 * v9++, a3);
      while (*((unsigned __int16 *)a2 + 1) > v9);
    }
  }
  else if (v6 == 3)
  {
    long long v10 = xmmword_1007BECC0;
    if (sub_1002D65C8((uint64_t)a2, (uint64_t)&v10)) {
      *(unsigned char *)(a1 + 579) = 1;
    }
  }
  else if (v6 == 1 && *(unsigned char *)(a1 + 579))
  {
    int v7 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *((_DWORD *)a2 + 2);
      LODWORD(v10) = 67109376;
      DWORD1(v10) = v8;
      WORD4(v10) = 1024;
      *(_DWORD *)((char *)&v10 + 10) = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Updating RFCOMM channel from %d -> %d ", (uint8_t *)&v10, 0xEu);
    }
    *(unsigned char *)(a1 + 579) = 0;
    *((_DWORD *)a2 + 2) = a3;
  }
}

uint64_t sub_10048AFE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v20[0] = 0;
  v20[1] = 0;
  sub_10003AED0((uint64_t)v20, a1);
  int v6 = *(void **)(a1 + 584);
  if (v6 != (void *)(a1 + 592))
  {
    while (!sub_1002D65C8(v6[4], a2))
    {
      int v7 = (void *)v6[1];
      if (v7)
      {
        do
        {
          int v8 = v7;
          int v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          int v8 = (void *)v6[2];
          BOOL v9 = *v8 == (void)v6;
          int v6 = v8;
        }
        while (!v9);
      }
      int v6 = v8;
      if (v8 == (void *)(a1 + 592)) {
        goto LABEL_23;
      }
    }
    uint64_t v18 = 0;
    v19[0] = 0;
    v19[1] = 0;
    sub_100360748((uint64_t)&v18, (uint64_t)(v6 + 5));
    long long v10 = (void *)v19[0];
    if (v19[0])
    {
      id v11 = (unsigned __int8 *)v19;
      int v12 = (uint64_t *)v19[0];
      do
      {
        uint64_t v13 = (unsigned __int8 *)v12;
        int v14 = v11;
        unsigned int v15 = *((_DWORD *)v12 + 8);
        if (v15 >= 4) {
          id v11 = (unsigned __int8 *)v12;
        }
        else {
          ++v12;
        }
        int v12 = (uint64_t *)*v12;
      }
      while (v12);
      if (v11 != (unsigned __int8 *)v19)
      {
        id v16 = v15 >= 4 ? v13 : v14;
        if (*((_DWORD *)v16 + 8) <= 4u)
        {
          sub_10048AE90(a1, v11 + 40, a3);
          long long v10 = (void *)v19[0];
        }
      }
    }
    sub_1000486F0((uint64_t)&v18, v10);
  }
LABEL_23:
  *(unsigned char *)(a1 + 579) = 0;
  sub_10003AFB4((uint64_t)v20);
  return 0;
}

void sub_10048B128(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  sub_1000486F0((uint64_t)va, v5);
  sub_10003AFB4((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_10048B154(uint64_t a1, void *a2)
{
  uint64_t v3 = a1;
  v40[0] = 0;
  v40[1] = 0;
  sub_10003AED0((uint64_t)v40, a1);
  int v4 = *(void **)(v3 + 584);
  int v27 = (void *)(v3 + 592);
  if (v4 != (void *)(v3 + 592))
  {
    uint64_t v5 = 0;
    uint64_t v26 = v3;
    while (1)
    {
      __n128 v39 = 0uLL;
      __n128 v39 = *(__n128 *)v4[4];
      uint64_t v36 = 0;
      unsigned __int8 v37 = 0;
      uint64_t v38 = 0;
      int v6 = sub_10047AE08(v3, (uint64_t)&v39, 4u, (void **)&v36);
      int v8 = v36;
      int v7 = v37;
      if (v36 == v37) {
        int v9 = 0;
      }
      else {
        int v9 = v6;
      }
      if (v9 == 1)
      {
        do
        {
          unint64_t v10 = *((unsigned __int16 *)v8 + 1);
          if ((v10 & 1) == 0 && *((_WORD *)v8 + 1))
          {
            unint64_t v11 = 0;
            int v12 = (int *)(v8[1] + 8);
            do
            {
              int v13 = *v12;
              v12 += 8;
              if (v13 == 3)
              {
                v34[0] = 0;
                v34[1] = 0;
                uint64_t v35 = 0;
                sub_10004191C(v34, "RFCOMM ServiceClass: ");
                memset(&v33, 0, sizeof(v33));
                if (v39.n128_u8[0] == 3)
                {
                  if (v39.n128_u16[1] > 4u) {
                    int v14 = sub_100258B24((unsigned int *)v39.n128_u64[1]);
                  }
                  else {
                    int v14 = sub_100258E24(v39.n128_u32[2]);
                  }
                  std::string::assign(&v33, v14);
                }
                uint64_t v30 = 0;
                std::string::size_type v31 = 0;
                uint64_t v32 = 0;
                sub_10004191C(&v30, "\n");
                __p[0] = 0;
                __p[1] = 0;
                int64_t v29 = 0;
                sub_10047A158((const void **)v34, (const void **)&v33.__r_.__value_.__l.__data_, &v41);
                if (v32 >= 0) {
                  unsigned int v15 = (const std::string::value_type *)&v30;
                }
                else {
                  unsigned int v15 = (const std::string::value_type *)v30;
                }
                if (v32 >= 0) {
                  std::string::size_type v16 = HIBYTE(v32);
                }
                else {
                  std::string::size_type v16 = v31;
                }
                int v17 = std::string::append(&v41, v15, v16);
                long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
                int64_t v29 = v17->__r_.__value_.__r.__words[2];
                *(_OWORD *)long long __p = v18;
                v17->__r_.__value_.__l.__size_ = 0;
                v17->__r_.__value_.__r.__words[2] = 0;
                v17->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v41.__r_.__value_.__l.__data_);
                }
                unsigned int v19 = qword_100A19E50;
                if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v20 = __p;
                  if (v29 < 0) {
                    uint64_t v20 = (void **)__p[0];
                  }
                  LODWORD(v41.__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + 4) = (std::string::size_type)v20;
                  _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v41, 0xCu);
                }
                sub_10048B554(a2, &v39);
                if (SHIBYTE(v29) < 0) {
                  operator delete(__p[0]);
                }
                if (SHIBYTE(v32) < 0) {
                  operator delete(v30);
                }
                if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v33.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v35) < 0) {
                  operator delete(v34[0]);
                }
                uint64_t v5 = (v5 + 1);
              }
              v11 += 2;
            }
            while (v11 < v10);
            int v7 = v37;
          }
          v8 += 2;
        }
        while (v8 != (void *)v7);
        int v21 = v36;
        if (v36 == v7)
        {
          int v8 = v7;
          if (!v7) {
            goto LABEL_45;
          }
LABEL_44:
          unsigned __int8 v37 = v8;
          operator delete(v8);
          goto LABEL_45;
        }
        do
        {
          v34[0] = 0;
          v34[1] = 0;
          *(_OWORD *)long long v34 = *v21;
          sub_1002D5394(v34);
          ++v21;
        }
        while (v21 != v37);
        int v8 = v36;
      }
      if (v8) {
        goto LABEL_44;
      }
LABEL_45:
      int v22 = (void *)v4[1];
      if (v22)
      {
        do
        {
          uint64_t v23 = v22;
          int v22 = (void *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          uint64_t v23 = (void *)v4[2];
          BOOL v24 = *v23 == (void)v4;
          int v4 = v23;
        }
        while (!v24);
      }
      int v4 = v23;
      uint64_t v3 = v26;
      if (v23 == v27) {
        goto LABEL_55;
      }
    }
  }
  uint64_t v5 = 0;
LABEL_55:
  sub_10003AFB4((uint64_t)v40);
  return v5;
}

void sub_10048B4B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39)
{
}

__n128 sub_10048B554(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10048FC40(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

id sub_10048B5E0(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  id v2 = [*(id *)(a1 + 1304) copy];
  sub_10003AFB4((uint64_t)v4);

  return v2;
}

void sub_10048B640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id sub_10048B654(uint64_t a1, int a2)
{
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v3 = *(id *)(a1 + 1304);
  id v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v13;
    while (2)
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v13 != v5) {
          objc_enumerationMutation(v3);
        }
        unint64_t v7 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        int v8 = [v7 objectForKeyedSubscript:@"kCBMsgArgPSM"];
        int v9 = v8;
        if (v8 && [v8 intValue] == a2)
        {
          unint64_t v10 = [v7 objectForKeyedSubscript:@"kCBMsgArgServiceUUID"];

          goto LABEL_12;
        }
      }
      id v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
  unint64_t v10 = 0;
LABEL_12:

  return v10;
}

void sub_10048B7BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10048B7F0(uint64_t a1, int a2)
{
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v3 = *(id *)(a1 + 1304);
  id v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v13;
    while (2)
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v13 != v5) {
          objc_enumerationMutation(v3);
        }
        unint64_t v7 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        int v8 = [v7 objectForKeyedSubscript:@"kCBMsgArgRFCOMMChannelID"];
        int v9 = v8;
        if (v8 && [v8 intValue] == a2)
        {
          unint64_t v10 = [v7 objectForKeyedSubscript:@"kCBMsgArgServiceUUID"];

          goto LABEL_12;
        }
      }
      id v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
  unint64_t v10 = 0;
LABEL_12:

  return v10;
}

void sub_10048B958(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10048B98C(uint64_t a1, void *a2, size_t a3)
{
  return sub_10048A868(a1, a2, a3, 0, 0, 0);
}

uint64_t sub_10048B99C(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 368);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_10048B9E4(uint64_t a1, _DWORD *a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1);
  *(_DWORD *)(a1 + 368) = *a2;
  uint64_t v4 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 376))(v4, a1, a1 + 368);
  return sub_10003AFB4((uint64_t)v6);
}

void sub_10048BA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10048BA7C(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v5 = 0;
  sub_100026C30((uint64_t)&v5);
  uint64_t v2 = SWORD2(v5);
  *(void *)(a1 + 376) = (int)v5;
  *(void *)(a1 + 384) = v2;
  return sub_10003AFB4((uint64_t)v4);
}

void sub_10048BAD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10048BAE8(uint64_t a1, int a2)
{
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1);
  unint64_t v4 = *(void *)(a1 + 384) + (1000 * a2);
  v8[0] = v4 / 0x3E8 + *(_DWORD *)(a1 + 376);
  v8[1] = v4 % 0x3E8;
  BOOL v5 = !sub_100262A50((uint64_t)v8);
  sub_10003AFB4((uint64_t)v7);
  return v5;
}

void sub_10048BB80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10048BB94(uint64_t a1, char a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1);
  *(unsigned char *)(a1 + 1370) = a2;
  return sub_10003AFB4((uint64_t)v5);
}

uint64_t sub_10048BBDC(uint64_t a1)
{
  v3[0] = 0;
  v3[1] = 0;
  sub_10003AED0((uint64_t)v3, a1);
  ++*(unsigned char *)(a1 + 1375);
  return sub_10003AFB4((uint64_t)v3);
}

uint64_t sub_10048BC28(uint64_t a1)
{
  v3[0] = 0;
  v3[1] = 0;
  sub_10003AED0((uint64_t)v3, a1);
  *(unsigned char *)(a1 + 1375) = 0;
  return sub_10003AFB4((uint64_t)v3);
}

uint64_t sub_10048BC6C(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 1375);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_10048BCB4(uint64_t a1)
{
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, a1);
  uint64_t v2 = *(NSObject **)(a1 + 1376);
  if (v2) {
    goto LABEL_3;
  }
  uint64_t v3 = sub_1004AF8EC();
  unint64_t v4 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(v3 + 8));
  *(void *)(a1 + 1376) = v4;
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_10048BEA4;
  handler[3] = &unk_100997528;
  handler[4] = a1;
  dispatch_source_set_event_handler(v4, handler);
  uint64_t v2 = *(NSObject **)(a1 + 1376);
  if (v2)
  {
LABEL_3:
    ++*(_WORD *)(a1 + 1400);
    ++*(unsigned char *)(a1 + 1384);
    BOOL v5 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a1, __p);
      if (v10 >= 0) {
        uint64_t v6 = __p;
      }
      else {
        uint64_t v6 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 67109378;
      int v14 = 300;
      __int16 v15 = 2082;
      std::string::size_type v16 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Start Scan Core Page Scan backoff timer of %d seconds for device %{public}s", buf, 0x12u);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v2 = *(NSObject **)(a1 + 1376);
    }
    dispatch_time_t v7 = dispatch_time(0, 300000000000);
    dispatch_source_set_timer(v2, v7, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_resume(*(dispatch_object_t *)(a1 + 1376));
  }
  return sub_10003AFB4((uint64_t)v12);
}

void sub_10048BE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10048BEA4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  ++*(_WORD *)(v1 + 1408);
  return sub_10048BEB8(v1);
}

uint64_t sub_10048BEB8(uint64_t a1)
{
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1);
  __p[0] = 0;
  __p[1] = 0;
  sub_10003AED0((uint64_t)__p, a1);
  *(unsigned char *)(a1 + 1375) = 0;
  sub_10003AFB4((uint64_t)__p);
  uint64_t v2 = *(NSObject **)(a1 + 1376);
  if (v2)
  {
    uint64_t v3 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a1, __p);
      if (v7 >= 0) {
        unint64_t v4 = __p;
      }
      else {
        unint64_t v4 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136446210;
      char v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Stopping Scan Core Page Scan backoff timer for device %{public}s", buf, 0xCu);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v2 = *(NSObject **)(a1 + 1376);
    }
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 1376));
    *(void *)(a1 + 1376) = 0;
  }
  return sub_10003AFB4((uint64_t)v8);
}

void sub_10048BFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10048C008(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  BOOL v2 = *(void *)(a1 + 1376) != 0;
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_10048C058(uint64_t a1, int a2)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_1009AF798);
  }
  sub_1004FA7BC((uint64_t)off_1009F8150, a2);
  return sub_10003AFB4((uint64_t)v4);
}

void sub_10048C0D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10048C0E4(uint64_t a1, unsigned int a2)
{
  v14[0] = 0;
  v14[1] = 0;
  sub_10003AED0((uint64_t)v14, a1);
  unint64_t v4 = *(NSObject **)(a1 + 1424);
  if (v4) {
    goto LABEL_3;
  }
  uint64_t v5 = sub_1004AF8EC();
  uint64_t v6 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(v5 + 8));
  *(void *)(a1 + 1424) = v6;
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_10048C2B0;
  handler[3] = &unk_100997528;
  handler[4] = a1;
  dispatch_source_set_event_handler(v6, handler);
  unint64_t v4 = *(NSObject **)(a1 + 1424);
  if (v4)
  {
LABEL_3:
    char v7 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a1, __p);
      if (v12 >= 0) {
        int v8 = __p;
      }
      else {
        int v8 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136446210;
      std::string::size_type v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Starting connection request watchdog timer for %{public}s", buf, 0xCu);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      unint64_t v4 = *(NSObject **)(a1 + 1424);
    }
    dispatch_time_t v9 = dispatch_time(0, 1000000000 * a2);
    dispatch_source_set_timer(v4, v9, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_resume(*(dispatch_object_t *)(a1 + 1424));
  }
  return sub_10003AFB4((uint64_t)v14);
}

void sub_10048C290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10048C2B0(uint64_t a1)
{
  return sub_10048C2B8(*(void *)(a1 + 32));
}

uint64_t sub_10048C2B8(uint64_t a1)
{
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1);
  BOOL v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a1, __p);
    uint64_t v3 = v7 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)long long buf = 136446210;
    char v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Stalled connection request for %{public}s", buf, 0xCu);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
  dispatch_release(*(dispatch_object_t *)(a1 + 1424));
  *(void *)(a1 + 1424) = 0;
  sub_10003AFE8((uint64_t)v8);
  if (qword_1009F8090 != -1) {
    dispatch_once(&qword_1009F8090, &stru_1009AF918);
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_10048C628;
  v5[3] = &unk_100997528;
  void v5[4] = a1;
  sub_1004D3990((uint64_t)off_1009F8088, v5);
  return sub_10003AFB4((uint64_t)v8);
}

void sub_10048C440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10048C460(uint64_t a1)
{
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1);
  BOOL v2 = *(NSObject **)(a1 + 1424);
  if (v2)
  {
    uint64_t v3 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a1, __p);
      if (v7 >= 0) {
        unint64_t v4 = __p;
      }
      else {
        unint64_t v4 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136446210;
      char v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Stopping connection request watchdog timer for %{public}s", buf, 0xCu);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
      BOOL v2 = *(NSObject **)(a1 + 1424);
    }
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 1424));
    *(void *)(a1 + 1424) = 0;
  }
  return sub_10003AFB4((uint64_t)v8);
}

void sub_10048C574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10048C590(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  BOOL v2 = *(void *)(a1 + 1424) != 0;
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_10048C5E0(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 1464);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_10048C628(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1009F8090 != -1) {
    dispatch_once(&qword_1009F8090, &stru_1009AF918);
  }
  uint64_t v2 = (int64x2_t *)off_1009F8088;

  return sub_1004D18C8(v2, v1);
}

uint64_t sub_10048C68C(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 1432);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_10048C6D4(uint64_t a1, char a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1);
  *(unsigned char *)(a1 + 1433) = a2;
  return sub_10003AFB4((uint64_t)v5);
}

uint64_t sub_10048C71C(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 1433);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_10048C764(uint64_t a1)
{
  v19[0] = 0;
  v19[1] = 0;
  sub_10003AED0((uint64_t)v19, a1);
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a1, __p);
    uint64_t v3 = v18 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)long long buf = 136446210;
    int v21 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Resetting device %{public}s ", buf, 0xCu);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
  }
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  if (*(char *)(a1 + 263) < 0)
  {
    **(unsigned char **)(a1 + 240) = 0;
    *(void *)(a1 + 248) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 240) = 0;
    *(unsigned char *)(a1 + 263) = 0;
  }
  if (*(char *)(a1 + 303) < 0)
  {
    **(unsigned char **)(a1 + 280) = 0;
    *(void *)(a1 + 288) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 280) = 0;
    *(unsigned char *)(a1 + 303) = 0;
  }
  *(_OWORD *)(a1 + 312) = 0u;
  sub_1000486F0(a1 + 328, *(void **)(a1 + 336));
  *(void *)(a1 + 328) = a1 + 336;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  unint64_t v4 = *(_DWORD **)(a1 + 744);
  *(void *)(a1 + 752) = v4;
  unint64_t v5 = *(void *)(a1 + 760);
  if ((unint64_t)v4 >= v5)
  {
    uint64_t v7 = v5 - (void)v4;
    uint64_t v8 = v7 >> 1;
    if ((unint64_t)(v7 >> 1) <= 1) {
      uint64_t v8 = 1;
    }
    if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v9 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v8;
    }
    char v10 = sub_1002C44F0(a1 + 760, v9);
    unint64_t v11 = *(char **)(a1 + 752);
    char v12 = *(char **)(a1 + 744);
    int v14 = &v10[v13];
    _DWORD *v10 = -1;
    uint64_t v6 = v10 + 1;
    while (v11 != v12)
    {
      int v15 = *((_DWORD *)v11 - 1);
      v11 -= 4;
      *--char v10 = v15;
    }
    *(void *)(a1 + 744) = v10;
    *(void *)(a1 + 752) = v6;
    *(void *)(a1 + 760) = v14;
    if (v12) {
      operator delete(v12);
    }
  }
  else
  {
    _DWORD *v4 = -1;
    uint64_t v6 = v4 + 1;
  }
  *(void *)(a1 + 752) = v6;
  sub_100474B30(a1);
  *(_DWORD *)(a1 + 642) = 16842752;
  *(_WORD *)(a1 + 646) = 0;
  *(unsigned char *)(a1 + 743) = 0;
  *(unsigned char *)(a1 + 1316) = 0;
  *(_DWORD *)(a1 + 1320) = 0;
  *(unsigned char *)(a1 + 1324) = 0;
  *(_DWORD *)(a1 + 1328) = 0;
  *(unsigned char *)(a1 + 1332) = 0;
  *(_DWORD *)(a1 + 1356) = 0;
  *(unsigned char *)(a1 + 1432) = 0;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_DWORD *)(a1 + 1351) = 0;
  sub_100489888(a1);
  sub_10047E3C0(a1);
  sub_10047BB14(a1);
  *(void *)(a1 + 788) = 0xFFFF00000000;
  *(unsigned char *)(a1 + 796) = 1;
  *(_OWORD *)(a1 + 800) = xmmword_1007BEC80;
  *(_OWORD *)(a1 + 820) = xmmword_1007BEC70;
  *(_DWORD *)(a1 + 836) = 0;
  *(_WORD *)(a1 + 840) = 2;
  *(unsigned char *)(a1 + 842) = 0;
  *(_DWORD *)(a1 + 844) = 80;
  sub_100486E34(a1);
  *(unsigned char *)(a1 + 856) = 0;
  *(unsigned char *)(a1 + 868) = 0;
  *(void *)(a1 + 860) = 0;
  *(void *)(a1 + 904) = 0;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  sub_10007AB48((uint64_t *)(a1 + 1176));
  *(unsigned char *)(a1 + 1434) = 0;
  *(void *)(a1 + 424) = 0;
  *(_DWORD *)(a1 + 1124) = -1082130432;
  *(void *)(a1 + 1136) = *(void *)(a1 + 1128);
  *(unsigned char *)(a1 + 1152) = 0;
  *(unsigned char *)(a1 + 992) = 1;
  *(_WORD *)(a1 + 994) = 0;
  *(unsigned char *)(a1 + 996) = -1;
  *(_DWORD *)(a1 + 1000) = 0;
  *(_DWORD *)(a1 + 1364) = 0;
  *(unsigned char *)(a1 + 1368) = 0;
  *(unsigned char *)(a1 + 1004) = 0;
  *(unsigned char *)(a1 + 652) = 1;
  *(unsigned char *)(a1 + 641) = 1;
  *(unsigned char *)(a1 + 1120) = 0;
  *(unsigned char *)(a1 + 960) = 0;
  *(_DWORD *)(a1 + 964) = 0;
  *(_DWORD *)(a1 + 972) = 0;
  *(unsigned char *)(a1 + 976) = 0;
  *(_WORD *)(a1 + 740) = 0;
  *(unsigned char *)(a1 + 742) = 0;
  *(_WORD *)(a1 + 1369) = 0;
  *(_DWORD *)(a1 + 696) = 0;
  *(void *)(a1 + 686) = 0;
  *(_OWORD *)(a1 + 672) = 0u;
  *(void *)(a1 + 980) = 0;
  *(unsigned char *)(a1 + 988) = 0;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 1156) = 0u;
  sub_10048BEB8(a1);
  *(unsigned char *)(a1 + 1384) = 0;
  *(unsigned char *)(a1 + 1435) = 0;
  *(_WORD *)(a1 + 1372) = 0;
  *(_DWORD *)(a1 + 1508) = 0;
  *(_DWORD *)(a1 + 572) = 0;
  *(_DWORD *)(a1 + 1420) = 0;
  *(_OWORD *)(a1 + 1388) = 0u;
  *(_OWORD *)(a1 + 1404) = 0u;
  if (*(char *)(a1 + 1503) < 0)
  {
    **(unsigned char **)(a1 + 1480) = 0;
    *(void *)(a1 + 1488) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 1480) = 0;
    *(unsigned char *)(a1 + 1503) = 0;
  }
  return sub_10003AFB4((uint64_t)v19);
}

void sub_10048CB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10048CB30(uint64_t result, char a2)
{
  *(unsigned char *)(result + 1120) = a2;
  return result;
}

uint64_t sub_10048CB38(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1120);
}

uint64_t sub_10048CB40(uint64_t a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = (void *)(a1 + 240);
    if (*(char *)(a1 + 263) < 0) {
      uint64_t v3 = (void *)*v3;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: \"%s\"", buf, 0xCu);
    uint64_t v2 = qword_100A19E50;
  }
  uint64_t v57 = a1;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    sub_1004A82EC((unsigned __int8 *)(a1 + 128), buf);
    if ((buf[23] & 0x80u) == 0) {
      unint64_t v4 = buf;
    }
    else {
      unint64_t v4 = *(uint8_t **)buf;
    }
    *(_DWORD *)int v58 = 136446210;
    *(void *)&v58[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump:    Address: %{public}s", v58, 0xCu);
    if ((char)buf[23] < 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v2 = qword_100A19E50;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v5 = sub_1004ABEA8((int *)(a1 + 176));
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump:    Type: %s", buf, 0xCu);
    uint64_t v2 = qword_100A19E50;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = (void *)(a1 + 200);
    if (*(char *)(a1 + 223) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump:    Default name: \"%s\"", buf, 0xCu);
    uint64_t v2 = qword_100A19E50;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(char *)(a1 + 152);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump:    RSSI: %d", buf, 8u);
    uint64_t v2 = qword_100A19E50;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(a1 + 1120);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: \tderivedFromLE: %d", buf, 8u);
    uint64_t v2 = qword_100A19E50;
  }
  if (*(_DWORD *)(a1 + 512) && os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v9 = sub_100456C2C((_DWORD *)(a1 + 512));
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump:    Accessory state: %{public}s", buf, 0xCu);
    uint64_t v2 = qword_100A19E50;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump:    Supported services:", buf, 2u);
  }
  char v10 = *(void **)(a1 + 328);
  unint64_t v11 = (void *)(a1 + 336);
  if (v10 != (void *)(a1 + 336))
  {
    do
    {
      int v12 = *((_DWORD *)v10 + 8);
      *(_DWORD *)int v58 = *((_DWORD *)v10 + 7);
      if (v12 >= 2)
      {
        uint64_t v13 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          int v14 = sub_1004D53E8((int *)v58);
          if (v12 == 3) {
            int v15 = "- Likely";
          }
          else {
            int v15 = "";
          }
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = v14;
          if (v12 == 2) {
            int v15 = "- Unlikely";
          }
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&unsigned char buf[14] = v15;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "statedump:       %{public}s %{public}s", buf, 0x16u);
        }
      }
      std::string::size_type v16 = (void *)v10[1];
      if (v16)
      {
        do
        {
          int v17 = v16;
          std::string::size_type v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          int v17 = (void *)v10[2];
          BOOL v18 = *v17 == (void)v10;
          char v10 = v17;
        }
        while (!v18);
      }
      char v10 = v17;
    }
    while (v17 != v11);
  }
  unsigned int v19 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v20 = v57;
    if (*(unsigned char *)(v57 + 642)) {
      int v21 = "Yes";
    }
    else {
      int v21 = "No";
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v21;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "statedump:    Supports phonebook sync: %{public}s", buf, 0xCu);
    unsigned int v19 = qword_100A19E50;
  }
  else
  {
    uint64_t v20 = v57;
  }
  if (*(unsigned char *)(v20 + 642))
  {
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      if (*(unsigned char *)(v20 + 643)) {
        int v22 = "Yes";
      }
      else {
        int v22 = "No";
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v22;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "statedump:       Sync enabled: %{public}s", buf, 0xCu);
      unsigned int v19 = qword_100A19E50;
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      if (*(unsigned char *)(v20 + 644)) {
        uint64_t v23 = "Yes";
      }
      else {
        uint64_t v23 = "No";
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v23;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "statedump:       Sync recents: %{public}s", buf, 0xCu);
      unsigned int v19 = qword_100A19E50;
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      if (*(unsigned char *)(v20 + 645)) {
        BOOL v24 = "Yes";
      }
      else {
        BOOL v24 = "No";
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v24;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "statedump:       Sync favorites: %{public}s", buf, 0xCu);
      unsigned int v19 = qword_100A19E50;
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      if (*(unsigned char *)(v20 + 646)) {
        uint64_t v25 = "Yes";
      }
      else {
        uint64_t v25 = "No";
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v25;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "statedump:       Sync user permission: %{public}s", buf, 0xCu);
    }
    *(void *)&long long v153 = 0;
    long long v151 = 0u;
    long long v152 = 0u;
    long long v149 = 0u;
    long long v150 = 0u;
    long long v147 = 0u;
    long long v148 = 0u;
    long long v145 = 0u;
    long long v146 = 0u;
    long long v143 = 0u;
    long long v144 = 0u;
    *(_OWORD *)long long __p = 0u;
    long long v142 = 0u;
    long long v139 = 0u;
    long long v140 = 0u;
    long long v138 = 0u;
    memset(buf, 0, sizeof(buf));
    sub_10004C67C((uint64_t)buf);
    uint64_t v20 = v57;
    for (uint64_t i = *(void *)(v57 + 744); i != *(void *)(v57 + 752); i += 4)
    {
      uint64_t v27 = std::ostream::operator<<();
      sub_10003AB28(v27);
    }
    int v28 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      std::stringbuf::str();
      if (v58[23] >= 0) {
        int64_t v29 = v58;
      }
      else {
        int64_t v29 = *(unsigned char **)v58;
      }
      *(_DWORD *)__int16 v156 = 136315138;
      int v157 = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "statedump:       Sync group ID(s): %s", v156, 0xCu);
      if ((v58[23] & 0x80000000) != 0) {
        operator delete(*(void **)v58);
      }
      uint64_t v20 = v57;
    }
    *(void *)&uint8_t buf[16] = v30;
    if (SHIBYTE(v142) < 0) {
      operator delete(__p[1]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    std::ios::~ios();
    unsigned int v19 = qword_100A19E50;
  }
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(v20 + 647)) {
      std::string::size_type v31 = "Yes";
    }
    else {
      std::string::size_type v31 = "No";
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v31;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "statedump: \tAllow sco for turn by turn enabled: %{public}s", buf, 0xCu);
    unsigned int v19 = qword_100A19E50;
  }
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    sub_10004191C(buf, off_1009AF938[*(int *)(v20 + 1508)]);
    if ((buf[23] & 0x80u) == 0) {
      uint64_t v32 = buf;
    }
    else {
      uint64_t v32 = *(uint8_t **)buf;
    }
    *(_DWORD *)int v58 = 136446210;
    *(void *)&v58[4] = v32;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "statedump: \tCarPlay type: %{public}s", v58, 0xCu);
    if ((char)buf[23] < 0) {
      operator delete(*(void **)buf);
    }
    unsigned int v19 = qword_100A19E50;
    uint64_t v20 = v57;
  }
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(v20 + 960)) {
      std::string v33 = "is";
    }
    else {
      std::string v33 = "is not";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v33;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "statedump:  Device %s guest device", buf, 0xCu);
  }
  if (*(unsigned char *)(v20 + 960))
  {
    long long v34 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      int v35 = *(_DWORD *)(v20 + 964);
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v35;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "statedump:  Guest device last seen %d", buf, 8u);
    }
  }
  sub_100479B94(v20);
  uint64_t v36 = sub_1003708B0();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v36 + 816))(v36, v57);
  if (*(unsigned char *)(v57 + 740))
  {
    *(_OWORD *)__int16 v154 = 0u;
    long long v155 = 0u;
    long long v152 = 0u;
    long long v153 = 0u;
    long long v150 = 0u;
    long long v151 = 0u;
    long long v148 = 0u;
    long long v149 = 0u;
    long long v146 = 0u;
    long long v147 = 0u;
    long long v144 = 0u;
    long long v145 = 0u;
    long long v142 = 0u;
    long long v143 = 0u;
    long long v140 = 0u;
    *(_OWORD *)long long __p = 0u;
    long long v138 = 0u;
    long long v139 = 0u;
    memset(buf, 0, sizeof(buf));
    uint64_t v38 = sub_1003708B0();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint8_t *, uint64_t))(*(void *)v38 + 80))(v38, v57, buf, 80))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_10076C8BC();
      }
    }
    else if (HIDWORD(v139))
    {
      uint64_t v39 = sub_100017768();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v39 + 160))(v39))
      {
        sub_100475F84(v57, (uint64_t)v58);
        if (SBYTE7(v155) < 0) {
          operator delete(v154[0]);
        }
        *(_OWORD *)__int16 v154 = *(_OWORD *)v58;
        *(void *)&long long v155 = *(void *)&v58[16];
      }
      else
      {
        __int16 v40 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)int v58 = 0;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Identification - clearing friendly name in statedump. Release version with no profile installed.", v58, 2u);
        }
      }
      uint64_t v41 = sub_1003708B0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)v41 + 96))(v41, v57);
      uint64_t v42 = sub_1003708B0();
      (*(void (**)(uint64_t, uint64_t, char *))(*(void *)v42 + 112))(v42, v57, (char *)&v145 + 8);
      uint64_t v43 = sub_1003708B0();
      (*(void (**)(uint64_t, uint64_t, char *))(*(void *)v43 + 128))(v43, v57, (char *)&v142 + 8);
      uint64_t v44 = sub_1003708B0();
      (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v44 + 144))(v44, v57, &v144);
      uint64_t v45 = sub_1003708B0();
      (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v45 + 160))(v45, v57, &v147);
      uint64_t v46 = sub_1003708B0();
      (*(void (**)(uint64_t, uint64_t, char *))(*(void *)v46 + 176))(v46, v57, (char *)&v148 + 8);
      uint64_t v47 = sub_1003708B0();
      (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v47 + 192))(v47, v57, &v150);
      __int16 v48 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int v58 = 68157954;
        *(_DWORD *)&v58[4] = 152;
        *(_WORD *)&v58[8] = 2098;
        *(void *)&v58[10] = buf;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "Identification - raw dump {%{public}.*P}", v58, 0x12u);
        __int16 v48 = qword_100A19E50;
      }
      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
      {
        if ((SBYTE7(v155) & 0x80u) == 0) {
          __int16 v49 = v154;
        }
        else {
          __int16 v49 = (void **)v154[0];
        }
        if ((SBYTE7(v142) & 0x80u) == 0) {
          __int16 v50 = __p;
        }
        else {
          __int16 v50 = (void **)__p[0];
        }
        if (v146 >= 0) {
          int v51 = (char *)&v145 + 8;
        }
        else {
          int v51 = (char *)*((void *)&v145 + 1);
        }
        int v52 = (char *)*((void *)&v142 + 1);
        if (v143 >= 0) {
          int v52 = (char *)&v142 + 8;
        }
        if ((SBYTE7(v145) & 0x80u) == 0) {
          int v53 = &v144;
        }
        else {
          int v53 = (long long *)v144;
        }
        if ((SBYTE7(v148) & 0x80u) == 0) {
          int v54 = &v147;
        }
        else {
          int v54 = (long long *)v147;
        }
        if (v149 >= 0) {
          int v55 = (char *)&v148 + 8;
        }
        else {
          int v55 = (char *)*((void *)&v148 + 1);
        }
        BOOL v56 = (long long *)v150;
        if ((SBYTE7(v151) & 0x80u) == 0) {
          BOOL v56 = &v150;
        }
        *(_DWORD *)&v58[4] = 20;
        *(void *)&v58[10] = v57 + 700;
        *(_DWORD *)&v58[20] = 3;
        int v60 = buf;
        CC_LONG v62 = v49;
        int v64 = *(unsigned __int16 *)&buf[4];
        int v66 = buf[8];
        int v68 = *(unsigned __int16 *)&buf[6];
        size_t v72 = &v140;
        *(_WORD *)&v58[18] = 1042;
        __int16 v69 = 1042;
        __int16 v73 = 1042;
        int v70 = 8;
        int v74 = 8;
        *(_WORD *)&v58[8] = 2098;
        __int16 v59 = 2098;
        __int16 v71 = 2098;
        __int16 v75 = 2098;
        uint64_t v76 = (char *)&v140 + 8;
        int v92 = *(unsigned __int16 *)&buf[22];
        int v96 = *(unsigned __int16 *)&buf[26];
        int v100 = *(unsigned __int16 *)&buf[30];
        int v104 = WORD1(v138);
        int v108 = WORD3(v138);
        int v112 = HIDWORD(v138);
        int v116 = DWORD1(v139);
        int v120 = buf[3];
        uint64_t v122 = v50;
        uint64_t v124 = v51;
        int v128 = v53;
        uint64_t v130 = v54;
        uint64_t v132 = v55;
        int v136 = BYTE8(v155);
        int v78 = HIDWORD(v139);
        int v80 = *(unsigned __int16 *)&buf[10];
        int v82 = *(unsigned __int16 *)&buf[12];
        int v84 = *(unsigned __int16 *)&buf[14];
        int v86 = *(unsigned __int16 *)&buf[16];
        int v88 = *(unsigned __int16 *)&buf[18];
        int v90 = *(unsigned __int16 *)&buf[20];
        int v94 = *(unsigned __int16 *)&buf[24];
        int v98 = *(unsigned __int16 *)&buf[28];
        int v102 = (unsigned __int16)v138;
        int v106 = WORD2(v138);
        int v110 = DWORD2(v138);
        int v114 = v139;
        int v118 = DWORD2(v139);
        BOOL v126 = v52;
        __int16 v61 = 2082;
        __int16 v121 = 2082;
        __int16 v123 = 2082;
        __int16 v125 = 2082;
        __int16 v127 = 2082;
        __int16 v129 = 2082;
        __int16 v131 = 2082;
        __int16 v133 = 2082;
        int v134 = v56;
        __int16 v63 = 1024;
        __int16 v65 = 1024;
        __int16 v67 = 1024;
        __int16 v77 = 1024;
        __int16 v79 = 1024;
        __int16 v81 = 1024;
        __int16 v83 = 1024;
        __int16 v85 = 1024;
        __int16 v87 = 1024;
        __int16 v89 = 1024;
        __int16 v91 = 1024;
        __int16 v93 = 1024;
        __int16 v95 = 1024;
        __int16 v97 = 1024;
        __int16 v99 = 1024;
        __int16 v101 = 1024;
        __int16 v103 = 1024;
        __int16 v105 = 1024;
        __int16 v107 = 1024;
        __int16 v109 = 1024;
        __int16 v111 = 1024;
        __int16 v113 = 1024;
        __int16 v115 = 1024;
        __int16 v117 = 1024;
        __int16 v119 = 1024;
        __int16 v135 = 1024;
        *(_DWORD *)int v58 = 68299266;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "statedump: Identification - metric dump {%{public}.20P, %{public}.3P, %{public}s, 0x%x, 0x%x, 0x%x, %{public}.8P, %{public}.8P, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, %d, %{public}s, %{public}s, %{public}s, %{public}s, %{public}s, %{public}s, %{public}s, %d}", v58, 0x12Eu);
      }
    }
    return sub_1003B8A60((uint64_t)buf);
  }
  return result;
}

void sub_10048DB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
}

uint64_t sub_10048DBC8(uint64_t a1)
{
  char v4 = 0;
  sub_10001B8E0(&v4);
  uint64_t v2 = sub_100181D84(a1 + 128) ^ 1;
  sub_10001B8AC(&v4);
  return v2;
}

void sub_10048DC14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_10048DC28(uint64_t result, int a2)
{
  if (a2)
  {
    __int16 v2 = a2;
    uint64_t v3 = result;
    if (*(unsigned __int16 *)(result + 1504) != a2)
    {
      v8[0] = 0;
      v8[1] = 0;
      uint64_t v4 = sub_10003AED0((uint64_t)v8, result);
      *(_WORD *)(v3 + 1504) = v2;
      sub_10003AFE8(v4);
      if (qword_1009F7F00 != -1) {
        dispatch_once(&qword_1009F7F00, &stru_1009AF778);
      }
      sub_1004AA04C((os_unfair_lock_s *)off_1009F7EF8, v3, 19);
      uint64_t v5 = sub_1004AF8EC();
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      void v6[2] = sub_10048DD2C;
      v6[3] = &unk_1009A0B58;
      void v6[4] = v3;
      __int16 v7 = v2;
      sub_100013018(v5, v6);
      return sub_10003AFB4((uint64_t)v8);
    }
  }
  return result;
}

void sub_10048DD18(_Unwind_Exception *a1)
{
  sub_10003AFB4(v1 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_10048DD2C()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_100052EB4() + 72);

  return v0();
}

uint64_t sub_10048DD90(uint64_t a1)
{
  uint64_t result = _os_feature_enabled_impl();
  if (result)
  {
    if (*(unsigned char *)(a1 + 1069)) {
      return (*(unsigned __int8 *)(a1 + 1102) >> 5) & 1;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10048DDE0(uint64_t a1, int a2)
{
  v9[0] = 0;
  v9[1] = 0;
  uint64_t v4 = sub_10003AED0((uint64_t)v9, a1);
  if (*(unsigned __int8 *)(a1 + 1371) != a2)
  {
    *(unsigned char *)(a1 + 1371) = a2;
    sub_10003AFE8(v4);
    uint64_t v5 = sub_1004AF8EC();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    void v7[2] = sub_10048DEA4;
    v7[3] = &unk_100998A58;
    void v7[4] = a1;
    char v8 = a2;
    sub_100013018(v5, v7);
  }
  return sub_10003AFB4((uint64_t)v9);
}

void sub_10048DE90(_Unwind_Exception *a1)
{
  sub_10003AFB4(v1 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_10048DEA4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF778);
  }
  sub_1004AA04C((os_unfair_lock_s *)off_1009F7EF8, v1, 21);
  __int16 v2 = *(uint64_t (**)(void))(*(void *)sub_100052EB4() + 80);

  return v2();
}

uint64_t sub_10048DF48(uint64_t a1, int a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1);
  if (*(unsigned __int8 *)(a1 + 1373) != a2)
  {
    *(unsigned char *)(a1 + 1373) = a2;
    sub_10003AFE8((uint64_t)v5);
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AF778);
    }
    sub_1004AA04C((os_unfair_lock_s *)off_1009F7EF8, a1, 20);
  }
  return sub_10003AFB4((uint64_t)v5);
}

void sub_10048DFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10048DFF4(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 1512);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_10048E03C(uint64_t a1, int a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1);
  *(_DWORD *)(a1 + 1512) = a2;
  sub_10003AFE8((uint64_t)v5);
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF778);
  }
  sub_1004AA04C((os_unfair_lock_s *)off_1009F7EF8, a1, 23);
  return sub_10003AFB4((uint64_t)v5);
}

void sub_10048E0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10048E0DC(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 1516);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_10048E124(uint64_t a1, int a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1);
  *(_DWORD *)(a1 + 1516) = a2;
  sub_10003AFE8((uint64_t)v5);
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AF778);
  }
  sub_1004AA04C((os_unfair_lock_s *)off_1009F7EF8, a1, 22);
  return sub_10003AFB4((uint64_t)v5);
}

void sub_10048E1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

_DWORD *sub_10048E1C4(_DWORD *result, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  *a2 = result[259];
  *a3 = result[260];
  *a4 = result[261];
  *a5 = result[262];
  return result;
}

__n128 sub_10048E1E8(uint64_t a1)
{
  *(_DWORD *)(a1 + 1064) = *(_DWORD *)(a1 + 1100);
  __n128 result = *(__n128 *)(a1 + 1068);
  long long v2 = *(_OWORD *)(a1 + 1084);
  *(__n128 *)(a1 + 1032) = result;
  *(_OWORD *)(a1 + 1048) = v2;
  return result;
}

uint64_t sub_10048E204(uint64_t a1, int a2)
{
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, a1);
  uint64_t v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    sub_10004191C(__p, off_1009AF938[a2]);
    uint64_t v5 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)long long buf = 136315138;
    int v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Set CarPlayType : %s", buf, 0xCu);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(_DWORD *)(a1 + 1508) != a2) {
    *(_DWORD *)(a1 + 1508) = a2;
  }
  uint64_t v6 = sub_1003708B0();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v6 + 1488))(v6, a1, *(unsigned int *)(a1 + 1508));
  return sub_10003AFB4((uint64_t)v10);
}

void sub_10048E34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10048E36C(uint64_t a1, int a2)
{
  uint64_t v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v9[0] = 67109120;
    v9[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "blockIncomingConnections %d", (uint8_t *)v9, 8u);
  }
  LOBYTE(v9[0]) = 0;
  sub_10001B8E0(v9);
  uint64_t v5 = a1 + 128;
  if (a2) {
    int v6 = sub_10017ED58(v5);
  }
  else {
    int v6 = sub_10017EE78(v5);
  }
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10076C8F0();
    }
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  sub_10001B8AC(v9);
  return v7;
}

void sub_10048E474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void sub_10048E490(uint64_t a1, std::string *__str, long long *a3, unint64_t a4)
{
  int v8 = a1 + 16;
  char v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_10036A268((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_1002B33F0((void *)a1, v11);
    int v12 = sub_1002B3488(v8, (long long *)__str, a3, *(char **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3));
    sub_10048E604(__str, v13, v9);
    int v12 = sub_1002B3488(v8, (long long *)v13, a3, *(char **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  sub_10048E604(__str, (std::string *)a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      if (*(char *)(v16 - 1) < 0) {
        operator delete(*(void **)(v16 - 24));
      }
      v16 -= 24;
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_10048E5F4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10048E5FC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *sub_10048E604(std::string *__str, std::string *a2, std::string *this)
{
  uint64_t v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

void sub_10048E664(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 168;
        sub_10048E6FC((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_10048E6FC(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 111) < 0) {
    operator delete(*(void **)(a2 + 88));
  }
  if (*(char *)(a2 + 79) < 0) {
    operator delete(*(void **)(a2 + 56));
  }
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }

  return nullsub_95(a2 + 1);
}

void sub_10048E760(id a1)
{
}

void sub_10048E7A4()
{
}

void sub_10048E7C8(id a1)
{
}

void sub_10048E958()
{
}

uint64_t **sub_10048E97C(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    int v6 = *result;
    uint64_t v7 = result[1];
    *__n128 result = (uint64_t *)(result + 1);
    void v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      int v8 = (uint64_t *)v6[1];
    }
    else {
      int v8 = v6;
    }
    uint64_t v14 = result;
    uint64_t v15 = v8;
    uint64_t v16 = v8;
    if (v8)
    {
      uint64_t v15 = sub_1002D8040((uint64_t)v8);
      if (a2 != a3)
      {
        char v9 = a2;
        do
        {
          *(uint64_t *)((char *)v8 + 28) = *(void *)((char *)v9 + 28);
          sub_10048EAE0(v5, (uint64_t)v8);
          int v8 = v15;
          uint64_t v16 = v15;
          if (v15) {
            uint64_t v15 = sub_1002D8040((uint64_t)v15);
          }
          unint64_t v10 = (void *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              unint64_t v10 = (void *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v11 = *a2 == (void)v9;
              char v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          char v9 = a2;
        }
        while (a2 != a3);
      }
    }
    __n128 result = (uint64_t **)sub_1002D8094((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      __n128 result = (uint64_t **)sub_10048EB50(v5, (void *)((char *)a2 + 28));
      int v12 = (void *)a2[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          int v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)a2[2];
          BOOL v11 = *v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_10048EACC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002D8094((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10048EAE0(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = a1 + 1;
  uint64_t v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 28) >= *((_DWORD *)v4 + 7)) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v4;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    uint64_t v5 = v3 + 1;
  }
  else
  {
    uint64_t v5 = a1 + 1;
  }
LABEL_8:
  sub_100036CA0(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

uint64_t *sub_10048EB50(uint64_t **a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t *)operator new(0x28uLL);
  uint64_t v5 = *a2;
  *(uint64_t *)((char *)v4 + 28) = *a2;
  int v6 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        int v6 = (uint64_t **)v7;
        if (*((_DWORD *)v7 + 7) <= v5) {
          break;
        }
        uint64_t v7 = (uint64_t *)*v7;
        int v8 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      uint64_t v7 = (uint64_t *)v7[1];
    }
    while (v7);
    int v8 = v6 + 1;
  }
  else
  {
    int v8 = a1 + 1;
  }
LABEL_8:
  sub_100036CA0(a1, (uint64_t)v6, v8, v4);
  return v4;
}

void sub_10048EBE0(id a1)
{
}

void sub_10048EC24()
{
}

void *sub_10048EC48(void *result, char *__src, char *a3, unint64_t a4)
{
  uint64_t v7 = result;
  unint64_t v8 = result[2];
  char v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      abort();
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    __n128 result = sub_1002B1BCC(v7, v11);
    char v9 = (char *)v7[1];
    goto LABEL_17;
  }
  int v12 = (unsigned char *)result[1];
  size_t v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    size_t v16 = a3 - __src;
    if (v16) {
      __n128 result = memmove(v9, __src, v16);
    }
    uint64_t v15 = &v9[v16];
    goto LABEL_20;
  }
  uint64_t v14 = &__src[v13];
  if (v12 != v9)
  {
    __n128 result = memmove((void *)*result, __src, v13);
    char v9 = (char *)v7[1];
  }
  if (a3 != v14) {
    __n128 result = memmove(v9, v14, a3 - v14);
  }
  uint64_t v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

void sub_10048ED54(id a1)
{
}

void sub_10048ED98()
{
}

void sub_10048EDBC(id a1)
{
}

void sub_10048EE00()
{
}

void sub_10048EE24(id a1)
{
}

void sub_10048EEA8()
{
  uint64_t v3 = *v2;
  if (*v2)
  {
    *(void *)(v0 + 48) = v3;
    operator delete(v3);
  }
  sub_10030F284(v1, *(void **)(v0 + 16));

  operator delete();
}

void sub_10048EEF4(id a1)
{
}

void sub_10048EF38()
{
}

uint64_t *sub_10048EF5C(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_10048EFB4(a1, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  return a1;
}

void sub_10048EF9C(_Unwind_Exception *a1)
{
  sub_1000486F0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_10048EFB4(uint64_t *result, unsigned int *a2, unsigned int *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    int v6 = result + 1;
    do
    {
      __n128 result = sub_10048F040(v5, v6, v4 + 7, (uint64_t *)(v4 + 7));
      uint64_t v7 = (unsigned int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          uint64_t v7 = *(unsigned int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (unsigned int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_10048F040(uint64_t **a1, uint64_t *a2, unsigned int *a3, uint64_t *a4)
{
  uint64_t v10 = 0;
  size_t v11 = 0;
  int v6 = sub_10048F0CC(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = *a4;
    sub_100036CA0(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_10048F0CC(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, unsigned int v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    unint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      size_t v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        size_t v13 = v10;
      }
      while (v14);
    }
    unsigned int v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          int v17 = (uint64_t *)v16;
          unsigned int v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      int v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    int v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      int v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    unsigned int v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      unsigned int v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          int v21 = (uint64_t *)v20;
          unsigned int v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      int v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t sub_10048F274(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x186186186186186) {
    abort();
  }
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v9 = 0xCF3CF3CF3CF3CF3DLL * ((v8 - v2) >> 3);
  if (2 * v9 > v4) {
    unint64_t v4 = 2 * v9;
  }
  if (v9 >= 0xC30C30C30C30C3) {
    unint64_t v10 = 0x186186186186186;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v18 = v7;
  if (v10) {
    uint64_t v11 = (char *)sub_10048F560(v7, v10);
  }
  else {
    uint64_t v11 = 0;
  }
  BOOL v14 = v11;
  unsigned int v15 = &v11[168 * v3];
  int v17 = &v11[168 * v10];
  sub_10048F38C((uint64_t)v15, a2);
  uint64_t v16 = v15 + 168;
  sub_10048F4E8(a1, &v14);
  uint64_t v12 = a1[1];
  sub_10048F6C4(&v14);
  return v12;
}

void sub_10048F378(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10048F6C4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10048F38C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  sub_100616288((__n128 *)(a1 + 1), (__n128 *)(a2 + 1));
  __int16 v4 = *(_WORD *)(a2 + 18);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(_WORD *)(a1 + 18) = v4;
  if (*(char *)(a2 + 47) < 0)
  {
    sub_10003B098((unsigned char *)(a1 + 24), *(void **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v5;
  }
  int v6 = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = v6;
  if (*(char *)(a2 + 79) < 0)
  {
    sub_10003B098((unsigned char *)(a1 + 56), *(void **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v7;
  }
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v8 = (unsigned char *)(a1 + 88);
  if (*(char *)(a2 + 111) < 0)
  {
    sub_10003B098(v8, *(void **)(a2 + 88), *(void *)(a2 + 96));
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)uint64_t v8 = v9;
  }
  long long v10 = *(_OWORD *)(a2 + 112);
  long long v11 = *(_OWORD *)(a2 + 128);
  long long v12 = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 159) = *(_DWORD *)(a2 + 159);
  *(_OWORD *)(a1 + 128) = v11;
  *(_OWORD *)(a1 + 144) = v12;
  *(_OWORD *)(a1 + 112) = v10;
  return a1;
}

void sub_10048F4A4(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 79) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v2 + 47) < 0) {
    operator delete(*v3);
  }
  nullsub_95(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10048F4E8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10048F5AC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_10048F560(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x186186186186187) {
    sub_1000616DC();
  }
  return operator new(168 * a2);
}

uint64_t sub_10048F5AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = a7 + v11;
      uint64_t v13 = a3 + v11;
      *(unsigned char *)(a7 + v11 - 168) = *(unsigned char *)(a3 + v11 - 168);
      sub_100616288((__n128 *)(a7 + v11 - 167), (__n128 *)(a3 + v11 - 167));
      __int16 v14 = *(_WORD *)(a3 + v11 - 150);
      *(unsigned char *)(v12 - 148) = *(unsigned char *)(a3 + v11 - 148);
      *(_WORD *)(v12 - 150) = v14;
      long long v15 = *(_OWORD *)(a3 + v11 - 144);
      *(void *)(v12 - 128) = *(void *)(a3 + v11 - 128);
      *(_OWORD *)(v12 - 144) = v15;
      *(void *)(v13 - 144) = 0;
      *(void *)(v13 - 136) = 0;
      *(void *)(v13 - 128) = 0;
      int v16 = *(_DWORD *)(a3 + v11 - 120);
      *(unsigned char *)(v12 - 116) = *(unsigned char *)(a3 + v11 - 116);
      *(_DWORD *)(v12 - 120) = v16;
      long long v17 = *(_OWORD *)(a3 + v11 - 112);
      *(void *)(v12 - 96) = *(void *)(a3 + v11 - 96);
      *(_OWORD *)(v12 - 112) = v17;
      *(void *)(v13 - 104) = 0;
      *(void *)(v13 - 96) = 0;
      *(void *)(v13 - 112) = 0;
      *(unsigned char *)(v12 - 88) = *(unsigned char *)(a3 + v11 - 88);
      long long v18 = *(_OWORD *)(a3 + v11 - 80);
      *(void *)(v12 - 64) = *(void *)(a3 + v11 - 64);
      *(_OWORD *)(v12 - 80) = v18;
      *(void *)(v13 - 72) = 0;
      *(void *)(v13 - 64) = 0;
      *(void *)(v13 - 80) = 0;
      long long v19 = *(_OWORD *)(a3 + v11 - 56);
      long long v20 = *(_OWORD *)(a3 + v11 - 40);
      long long v21 = *(_OWORD *)(a3 + v11 - 24);
      *(_DWORD *)(v12 - 9) = *(_DWORD *)(a3 + v11 - 9);
      *(_OWORD *)(v12 - 24) = v21;
      *(_OWORD *)(v12 - 40) = v20;
      *(_OWORD *)(v12 - 56) = v19;
      v11 -= 168;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void **sub_10048F6C4(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

uint64_t sub_10048F6F8(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v1 = *(void *)(result + 16);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *(void *)(v3 + 32);
      *(void *)(v3 + 16) = v1 - 168;
      uint64_t result = sub_10048E6FC(v4, v1 - 168);
      uint64_t v1 = *(void *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

void sub_10048F740(id a1)
{
}

void sub_10048F784(id a1)
{
}

void sub_10048F7C8()
{
}

uint64_t sub_10048F7EC(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 2 * a3;
    do
    {
      sub_10048F86C((uint64_t **)a1, v4, a2, a2);
      ++a2;
      v6 -= 2;
    }
    while (v6);
  }
  return a1;
}

void sub_10048F854(_Unwind_Exception *a1)
{
  sub_1000486F0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_10048F86C(uint64_t **a1, uint64_t *a2, unsigned __int16 *a3, _WORD *a4)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v6 = sub_10048F8F8(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x20uLL);
    *((_WORD *)v7 + 13) = *a4;
    sub_100036CA0(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_10048F8F8(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned __int16 *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, unsigned int v7 = *((unsigned __int16 *)a2 + 13), v6 < v7))
  {
    uint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      long long v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        long long v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    unsigned int v15 = *a5;
    if (*((unsigned __int16 *)v10 + 13) < v15) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          long long v17 = (uint64_t *)v16;
          unsigned int v18 = *(unsigned __int16 *)(v16 + 26);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      long long v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    long long v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      long long v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((unsigned __int16 *)a4 + 13))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          long long v21 = (uint64_t *)v20;
          unsigned int v22 = *(unsigned __int16 *)(v20 + 26);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      long long v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void sub_10048FAA0(id a1)
{
}

void sub_10048FAE4()
{
}

void sub_10048FB08(id a1)
{
}

void sub_10048FB4C()
{
}

void sub_10048FB70(id a1)
{
}

void sub_10048FBB4()
{
}

void sub_10048FBD8(id a1)
{
}

void sub_10048FC1C()
{
}

void sub_10048FC40(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    unsigned int v6 = (char *)a1[3];
    a1[4] = v4;
    unsigned int v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    long long v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      long long v34 = (char *)sub_1000405F8(v5, v33);
      int v35 = &v34[8 * (v33 >> 2)];
      unsigned __int8 v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    long long v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      long long v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_1002B4FA4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1002B50BC((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    long long v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      long long v34 = (char *)sub_1000405F8((uint64_t)(a1 + 3), v46);
      int v35 = &v34[8 * (v46 >> 2)];
      unsigned __int8 v37 = &v34[8 * v47];
      __int16 v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  BOOL v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000405F8((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  int v53 = operator new(0x1000uLL);
  sub_1002B51DC(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002B52F4((uint64_t)&v54, v27);
  }
  int64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10048FF0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10048FF58(id a1)
{
}

void sub_10048FF9C()
{
}

void sub_10048FFD8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void sub_1004903A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

id sub_100490408(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _handleCTCellularTransmitStateChangedNotification:a2];
}

void sub_100490480(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004904E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)Communicator;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_10049058C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10049061C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100490C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char *a49)
{
  a49 = &a32;
  sub_10027696C((void ***)&a49);
  a49 = &a35;
  sub_10027696C((void ***)&a49);

  _Unwind_Resume(a1);
}

uint64_t sub_100490D94(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  sub_10062E8E8(a1 + 24);

  return a1;
}

void sub_100490E24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100491054(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100491328(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100491470(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100491604(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004917B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004918D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100491A08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100491B28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100491C10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100491D08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100491E0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100491EF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100491F18(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) delegate];
  if (result)
  {
    BOOL v3 = qword_100A19EC0;
    if (os_log_type_enabled((os_log_t)qword_100A19EC0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received 'call status changed' notification", v4, 2u);
    }
    [*(id *)(a1 + 32) _updateCalls];
    return (id)(**(uint64_t (***)(void))[*(id *)(a1 + 32) delegate])();
  }
  return result;
}

void sub_1004920B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10049232C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100492510(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100492648(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10049282C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100492A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_100492C68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100492FF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10049326C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10049346C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100493650(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100493788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  a16 = &a22;
  sub_10027696C((void ***)&a16);
  _Unwind_Resume(a1);
}

void sub_100493998()
{
}

void sub_100493A80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100493D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_10027696C((void ***)&__p);
  sub_100490D94((uint64_t)&a22);

  a22 = v23 - 96;
  sub_10027696C((void ***)&a22);
  _Unwind_Resume(a1);
}

void sub_100493F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void **a15, void **a16)
{
  sub_10027696C(&a15);

  a16 = (void **)&a12;
  sub_10027696C(&a16);
  _Unwind_Resume(a1);
}

void sub_100493FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_10027696C(&a12);
  _Unwind_Resume(a1);
}

void sub_1004940BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  *(void *)(v13 - 24) = &a10;
  sub_10027696C((void ***)(v13 - 24));
  a10 = (void **)&a13;
  sub_10027696C(&a10);
  _Unwind_Resume(a1);
}

void sub_100494304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, char a15)
{
  sub_10027696C(&a13);
  a13 = (void **)&a15;
  sub_10027696C(&a13);

  _Unwind_Resume(a1);
}

void sub_100494420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  *(void *)(v13 - 24) = &a10;
  sub_10027696C((void ***)(v13 - 24));
  a10 = (void **)&a13;
  sub_10027696C(&a10);
  _Unwind_Resume(a1);
}

void sub_1004945D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100494760(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10049489C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100494980(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10062E8E8(va);

  _Unwind_Resume(a1);
}

void sub_100494BC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100494CE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100494E14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_100494FE0(void *a1, uint64_t a2)
{
  *a1 = off_1009AF988;
  a1[1] = 0;
  BOOL v3 = [[Communicator alloc] initWithDelegate:a2];
  unint64_t v4 = (void *)a1[1];
  a1[1] = v3;

  return a1;
}

void sub_100495044(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10049505C(uint64_t a1)
{
  *(void *)a1 = off_1009AF988;
  [*(id *)(a1 + 8) invalidate];
  unint64_t v2 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;

  return a1;
}

void sub_1004950B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004950D0(uint64_t a1)
{
  sub_10049505C(a1);

  operator delete();
}

id sub_100495108(uint64_t a1)
{
  return [*(id *)(a1 + 8) supports3WC];
}

id sub_100495110(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)(a1 + 8);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10003B098(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    uint64_t v7 = *(void *)(a2 + 16);
  }
  id v4 = [v3 answerIncomingCall:__p];
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }

  return v4;
}

void sub_100495194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

id sub_1004951BC(uint64_t a1)
{
  return [*(id *)(a1 + 8) rejectIncomingCall];
}

id sub_1004951C4(uint64_t a1)
{
  return [*(id *)(a1 + 8) hangupActiveCall];
}

id sub_1004951CC(uint64_t a1)
{
  return [*(id *)(a1 + 8) releaseHeldCalls];
}

id sub_1004951D4(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)(a1 + 8);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10003B098(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    uint64_t v7 = *(void *)(a2 + 16);
  }
  id v4 = [v3 releaseActiveCalls:__p];
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }

  return v4;
}

void sub_100495258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

id sub_100495280(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)(a1 + 8);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10003B098(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    uint64_t v7 = *(void *)(a2 + 16);
  }
  id v4 = [v3 holdActiveCalls:__p];
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }

  return v4;
}

void sub_100495304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

id sub_10049532C(uint64_t a1)
{
  return [*(id *)(a1 + 8) addHeldCall];
}

id sub_100495334(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 8) releaseCall:a2];
}

id sub_100495340(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 8) privateConference:a2];
}

id sub_10049534C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = *(id *)(a1 + 8);
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10003B098(__p, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a3;
    uint64_t v9 = *(void *)(a3 + 16);
  }
  id v6 = [v5 dialNumber:a2 uid:__p];
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }

  return v6;
}

void sub_1004953E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

id sub_100495408(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)(a1 + 8);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10003B098(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    uint64_t v7 = *(void *)(a2 + 16);
  }
  id v4 = [v3 redialLastNumberWithUid:__p];
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }

  return v4;
}

void sub_10049548C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

id sub_1004954B4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 8) sendDTMFTone:a2];
}

id sub_1004954C0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 8) enableEchoCancellationNoiseReduction:a2];
}

id sub_1004954CC(uint64_t a1)
{
  return [*(id *)(a1 + 8) addVirtualCall];
}

id sub_1004954D4(uint64_t a1)
{
  return [*(id *)(a1 + 8) removeVirtualCall];
}

id sub_1004954DC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 8) getCurrentCalls:a2];
}

id sub_1004954E8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 8) getCurrentExpanseCalls:a2];
}

id sub_1004954F4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = qword_100A19EC0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC0, OS_LOG_TYPE_DEFAULT))
  {
    v9[0] = 67109120;
    v9[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Communicator isScreening: %d", (uint8_t *)v9, 8u);
  }
  id v7 = [*(id *)(a1 + 8) setScreeningCall:v5 isScreening:a3];

  return v7;
}

void sub_1004955C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1004955E0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 8) getCurrentScreeningCalls:a2];
}

id sub_1004955EC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 8) getOperatorStatus:a2];
}

id sub_1004955F8(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 8) getRegistrationStatus];

  return v1;
}

id sub_100495628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 8) getSignalStrength:a2 mode:a3];
}

id sub_100495638(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 8) getSubscriberNumber:a2];
}

id sub_100495644(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 8) getMobileSubscriberIdentity:a2];
}

id sub_100495650(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 8) getMobileEquipmentIdentity:a2];
}

id sub_10049565C(uint64_t a1, uint64_t *a2)
{
  id v3 = *(id *)(a1 + 8);
  if (*((char *)a2 + 23) < 0) {
    a2 = (uint64_t *)*a2;
  }
  id v4 = +[NSString stringWithUTF8String:a2];
  id v5 = [v3 getCountryCodeForIdentifier:v4];

  return v5;
}

void sub_1004956E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100495700(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 8) getCountryCode];

  return v1;
}

id sub_100495730(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 8) getCountryCodeIdentifer];

  return v1;
}

id sub_100495760(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 8) getTransmitState:a2];
}

uint64_t sub_10049576C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t sub_100495778(uint64_t a1, void *a2)
{
  id v3 = a2;
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  sub_10062E4F0(a1 + 24);
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;

  return a1;
}

void sub_1004957CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1004957E4(uint64_t a1)
{
  *(void *)a1 = off_1009AFAA0;
  *(void *)(a1 + 8) = off_1009AFB60;
  *(void *)(a1 + 16) = off_1009AFBB0;
  *(void *)(a1 + 24) = off_1009AFBE0;
  *(void *)(a1 + 32) = off_1009AFC00;
  *(void *)(a1 + 40) = off_1009AFC40;
  *(unsigned char *)(a1 + 48) = 0;
  sub_100052DA8(a1 + 104);
  *(_DWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_WORD *)(a1 + 244) = 1;
  *(_OWORD *)(a1 + 49) = 0u;
  *(_OWORD *)(a1 + 65) = 0u;
  *(_OWORD *)(a1 + 81) = 0u;
  *(void *)(a1 + 95) = 0;
  return a1;
}

uint64_t sub_1004958FC(uint64_t a1)
{
  *(void *)a1 = off_1009AFAA0;
  *(void *)(a1 + 8) = off_1009AFB60;
  *(void *)(a1 + 16) = off_1009AFBB0;
  *(void *)(a1 + 24) = off_1009AFBE0;
  *(void *)(a1 + 32) = off_1009AFC00;
  *(void *)(a1 + 40) = off_1009AFC40;
  if (*(char *)(a1 + 239) < 0) {
    operator delete(*(void **)(a1 + 216));
  }

  unint64_t v2 = *(void **)(a1 + 176);
  if (v2)
  {
    *(void *)(a1 + 184) = v2;
    operator delete(v2);
  }
  sub_100052DA4(a1 + 104);
  return a1;
}

uint64_t sub_100495A10(uint64_t a1)
{
  return sub_1004958FC(a1 - 32);
}

void sub_100495A18(uint64_t a1)
{
  sub_1004958FC(a1);

  operator delete();
}

void sub_100495A50(uint64_t a1)
{
  sub_1004958FC(a1 - 32);

  operator delete();
}

void sub_100495A8C(uint64_t a1)
{
  *(void *)(a1 + 168) = sub_10037345C();
  unint64_t v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v3 = dispatch_queue_create("com.apple.bluetooth.mp.serial", v2);
  id v4 = *(void **)(a1 + 208);
  *(void *)(a1 + 208) = v3;

  sub_100495C54(a1);
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009AFE08);
  }
  sub_10026B36C((uint64_t)off_1009F8068 + 64, a1 + 16);
  if (sub_1004962BC())
  {
    uint64_t v5 = sub_10003FFD4();
    sub_1004A79EC(v5 + 328, a1 + 24);
    sub_10049641C(a1);
    if (qword_1009F8768 != -1) {
      dispatch_once(&qword_1009F8768, &stru_1009AFE28);
    }
    sub_10060C070(off_1009F8760, a1 + 32);
    (***(void (****)(void, uint64_t))(a1 + 168))(*(void *)(a1 + 168), a1 + 8);
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AFE48);
    }
    id v6 = (char *)off_1009F7EF8 + 240;
    sub_100061288((uint64_t)v6, a1 + 40);
  }
  else
  {
    id v7 = qword_100A19ED8;
    if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Magic Pairing cannot initialize, not supported on this platform.", v8, 2u);
    }
  }
}

uint64_t sub_100495C54(uint64_t a1)
{
  v30[0] = 0;
  v30[1] = 0;
  sub_10003AED0((uint64_t)v30, a1 + 104);
  uint64_t v2 = sub_100370758();
  int v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 136))(v2, a1 + 49, a1 + 65);
  id v4 = qword_100A19ED8;
  if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = "not available";
    if (!v3) {
      uint64_t v5 = "available";
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Cloud master keys are %s in storage", (uint8_t *)&buf, 0xCu);
  }
  long long buf = 0uLL;
  uint64_t v40 = 0;
  id v6 = (uint64_t (***)(void, long long *))sub_100370758();
  int v7 = (**v6)(v6, &buf);
  uint64_t v8 = qword_100A19ED8;
  if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long v31 = 67109376;
    *(_DWORD *)&v31[4] = v7;
    *(_WORD *)&v31[8] = 2048;
    *(void *)&v31[10] = (uint64_t)(*((void *)&buf + 1) - buf) >> 3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "read device list result %d, pairedDev list std::string::size_type size = %lu", v31, 0x12u);
  }
  for (uint64_t i = (uint64_t *)buf; i != *((uint64_t **)&buf + 1); ++i)
  {
    uint64_t v10 = *i;
    if (*(unsigned char *)(*i + 128))
    {
LABEL_9:
      v38[0] = 0;
      v38[1] = 0;
      v37[0] = 0;
      v37[1] = 0;
      v36[0] = 0;
      v36[1] = 0;
      v35[0] = 0;
      v35[1] = 0;
      char v27 = 0;
      int v26 = 0;
      uint64_t v11 = sub_100370758();
      if (!(*(unsigned int (**)(uint64_t, uint64_t, void, void *))(*(void *)v11 + 96))(v11, v10, 0, v36))
      {
        uint64_t v16 = sub_100370758();
        (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v16 + 96))(v16, v10, 3, v37);
        uint64_t v17 = sub_100370758();
        (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v17 + 96))(v17, v10, 2, v38);
        uint64_t v18 = sub_100370758();
        (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)v18 + 96))(v18, v10, 4, &v26);
        uint64_t v19 = sub_100370758();
        (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v19 + 96))(v19, v10, 1, v35);
        operator new();
      }
      uint64_t v12 = (id)qword_100A19ED8;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        sub_100474E18(v10, v31);
        int64_t v20 = v31;
        if (v32 < 0) {
          int64_t v20 = *(unsigned char **)v31;
        }
        *(_DWORD *)unint64_t v33 = 136446210;
        long long v34 = v20;
        _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Unable to read Magic Keys for %{public}s", v33, 0xCu);
        if (v32 < 0) {
          operator delete(*(void **)v31);
        }
      }
    }
    else
    {
      uint64_t v13 = 0;
      while (v13 != 5)
      {
        if (*(unsigned __int8 *)(v10 + 129 + v13++))
        {
          if ((unint64_t)(v13 - 1) < 5) {
            goto LABEL_9;
          }
          break;
        }
      }
      uint64_t v15 = qword_100A19ED8;
      if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
        sub_10076CF4C(&v28, v29, v15);
      }
    }
  }
  if (*(void *)(a1 + 184) != *(void *)(a1 + 176)) {
    *(unsigned char *)(a1 + 240) = 1;
  }
  uint64_t v21 = sub_100370758();
  int v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v21 + 144))(v21, a1 + 81, a1 + 97);
  uint64_t v23 = qword_100A19ED8;
  if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v24 = "not available";
    if (!v22) {
      uint64_t v24 = "available";
    }
    *(_DWORD *)long long v31 = 136315138;
    *(void *)&v31[4] = v24;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Cloud master IRK and address are %s in storage", v31, 0xCu);
  }
  sub_1004A5D58(a1);
  if ((void)buf)
  {
    *((void *)&buf + 1) = buf;
    operator delete((void *)buf);
  }
  return sub_10003AFB4((uint64_t)v30);
}

void sub_100496250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004962BC()
{
  uint64_t v0 = sub_100035F54();
  if ((*(uint64_t (**)(uint64_t))(*(void *)v0 + 328))(v0)) {
    return 1;
  }
  uint64_t v1 = sub_100035F54();
  if ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 424))(v1)) {
    return 1;
  }
  uint64_t v2 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 336))(v2))
  {
    uint64_t v3 = sub_100035F54();
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v3 + 400))(v3)) {
      return 1;
    }
  }
  uint64_t v4 = sub_100035F54();
  if ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 344))(v4)) {
    return 1;
  }
  id v6 = *(uint64_t (**)(void))(*(void *)sub_100035F54() + 384);

  return v6();
}

void sub_10049641C(uint64_t a1)
{
  CFPropertyListRef v2 = CFPreferencesCopyAppValue(@"SignInstatus", @"com.apple.BTServer");
  if (v2)
  {
    uint64_t v3 = v2;
    if (CFEqual(v2, @"SignedIn"))
    {
      char v4 = 1;
    }
    else
    {
      if (!CFEqual(v3, @"SignedOut"))
      {
LABEL_7:
        CFRelease(v3);
        goto LABEL_8;
      }
      char v4 = 0;
    }
    *(unsigned char *)(a1 + 241) = v4;
    goto LABEL_7;
  }
LABEL_8:
  CFStringRef v5 = (const __CFString *)CFPreferencesCopyAppValue(@"CloudAccountID", @"com.apple.BTServer");
  CFStringRef v6 = v5;
  if (v5)
  {
    CFTypeID v7 = CFGetTypeID(v5);
    if (v7 == CFStringGetTypeID())
    {
      CStringPtr = (char *)CFStringGetCStringPtr(v6, 0x8000100u);
      if (CStringPtr)
      {
        sub_10004191C(v13, CStringPtr);
        uint64_t v9 = (void **)(a1 + 216);
        if (*(char *)(a1 + 239) < 0) {
          operator delete(*v9);
        }
        *(_OWORD *)uint64_t v9 = *(_OWORD *)v13;
        *(void *)(a1 + 232) = *(void *)&v13[16];
      }
      goto LABEL_16;
    }
  }
  if ((*(char *)(a1 + 239) & 0x80000000) == 0)
  {
    *(unsigned char *)(a1 + 216) = 0;
    *(unsigned char *)(a1 + 239) = 0;
    if (!v6) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  **(unsigned char **)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  if (v6) {
LABEL_16:
  }
    CFRelease(v6);
LABEL_17:
  uint64_t v10 = qword_100A19ED8;
  if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = *(unsigned __int8 *)(a1 + 241);
    uint64_t v12 = (void *)(a1 + 216);
    if (*(char *)(a1 + 239) < 0) {
      uint64_t v12 = (void *)*v12;
    }
    *(_DWORD *)uint64_t v13 = 67109635;
    *(_DWORD *)&void v13[4] = v11;
    *(_WORD *)&v13[8] = 2160;
    *(void *)&v13[10] = 1752392040;
    *(_WORD *)&v13[18] = 2081;
    *(void *)&v13[20] = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "statedump: MagicPairingManager: SignedIn: %d, loginID: %{private, mask.hash}s", v13, 0x1Cu);
  }
}

uint64_t sub_100496600(void **a1)
{
  uint64_t result = sub_1004962BC();
  if (result)
  {
    uint64_t v3 = sub_10003FFD4();
    sub_1004A7CFC(v3 + 328, (uint64_t)(a1 + 3));
    v7[0] = 0;
    v7[1] = 0;
    sub_10003AED0((uint64_t)v7, (uint64_t)(a1 + 13));
    CFStringRef v5 = a1[22];
    char v4 = a1[23];
    if (v5 != v4)
    {
      do
      {
        uint64_t v6 = *v5;
        if (*v5)
        {
          if (*(char *)(v6 + 111) < 0) {
            operator delete(*(void **)(v6 + 88));
          }
          operator delete();
        }
        ++v5;
      }
      while (v5 != v4);
      CFStringRef v5 = a1[22];
    }
    a1[23] = v5;
    (*(void (**)(void *, void **))(*a1[21] + 8))(a1[21], a1 + 1);
    (*(void (**)(void *))(*a1[21] + 120))(a1[21]);
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009AFE08);
    }
    sub_100052718((uint64_t)off_1009F8068 + 64, (uint64_t)(a1 + 2));
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AFE48);
    }
    sub_100052718((uint64_t)off_1009F7EF8 + 240, (uint64_t)(a1 + 5));
    return sub_10003AFB4((uint64_t)v7);
  }
  return result;
}

void sub_100496780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100496794(int *a1)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AFE48);
  }
  int v2 = *a1;
  __int16 v3 = *((_WORD *)a1 + 2);
  sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v2, 1);
  sub_1004AF8EC();
  operator new();
}

void sub_100496894()
{
}

void sub_1004968B8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 48))
  {
    *(unsigned char *)(a1 + 48) = 1;
    if (sub_1004962BC())
    {
      char v12 = 0;
      sub_10001B8E0(&v12);
      int v2 = qword_100A19ED8;
      if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v3 = "Signed in";
        if (!*(unsigned char *)(a1 + 241)) {
          __int16 v3 = "Not Signed in";
        }
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = "stackDidStart";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&unsigned char buf[14] = v3;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s, Device sign in status %s", buf, 0x16u);
      }
      sub_10022F400();
      sub_10022EB64((uint64_t)&off_1009AFC60);
      sub_10049729C(a1);
      sub_10001B910(&v12);
      for (uint64_t i = *(uint64_t **)(a1 + 176); i != *(uint64_t **)(a1 + 184); ++i)
      {
        uint64_t v5 = *i;
        __n128 v18 = 0uLL;
        int v19 = 0;
        sub_100600E3C((uint64_t)&v18);
        uint64_t v6 = *(unsigned __int8 **)v5;
        if (qword_1009F8778 != -1) {
          dispatch_once(&qword_1009F8778, &stru_1009AFE68);
        }
        if (sub_100618630((uint64_t)off_1009F8770, v6, &v18) == 150)
        {
          CFTypeID v7 = (id)qword_100A19ED8;
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
          {
            sub_100474E18((uint64_t)v6, buf);
            uint64_t v8 = buf;
            if (v15 < 0) {
              uint64_t v8 = *(unsigned char **)buf;
            }
            *(_DWORD *)uint64_t v16 = 136446210;
            uint64_t v17 = v8;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Deferred Magic pairing device from cloud %{public}s", v16, 0xCu);
            if (v15 < 0) {
              operator delete(*(void **)buf);
            }
          }

          if (qword_1009F8768 != -1) {
            dispatch_once(&qword_1009F8768, &stru_1009AFE28);
          }
          sub_100611F9C((uint64_t)off_1009F8760, (uint64_t)v6);
          memset(buf, 0, 20);
          sub_100600E5C((uint64_t)buf, (_OWORD *)(v5 + 40), 4u);
          if (qword_1009F8778 != -1) {
            dispatch_once(&qword_1009F8778, &stru_1009AFE68);
          }
          sub_100618730((uint64_t)off_1009F8770, v6, (__n128 *)buf, 0);
          nullsub_95(buf);
        }
        if (((unint64_t)*(unsigned __int8 *)(v5 + 78) << 40) | ((unint64_t)*(unsigned __int8 *)(v5 + 79) << 32) | ((unint64_t)*(unsigned __int8 *)(v5 + 80) << 24) | ((unint64_t)*(unsigned __int8 *)(v5 + 81) << 16) | ((unint64_t)*(unsigned __int8 *)(v5 + 82) << 8) | *(unsigned __int8 *)(v5 + 83))
        {
          uint64_t v9 = sub_100019878();
          v11[0] = _NSConcreteStackBlock;
          v11[1] = 3221225472;
          void v11[2] = sub_100497550;
          _OWORD v11[3] = &unk_100997528;
          v11[4] = v5;
          sub_100013018(v9, v11);
        }
        nullsub_95(&v18);
      }
      sub_10001B8AC(&v12);
    }
    else
    {
      uint64_t v10 = *(NSObject **)(a1 + 208);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100496CD4;
      block[3] = &unk_100997528;
      block[4] = a1;
      dispatch_async(v10, block);
    }
  }
}

void sub_100496C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

unsigned char *sub_100496CD4(uint64_t a1)
{
  return sub_100496CE0(*(void *)(a1 + 32), 0);
}

unsigned char *sub_100496CE0(uint64_t a1, int a2)
{
  char v4 = qword_100A19ED8;
  if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (uint64_t)(*(void *)(a1 + 184) - *(void *)(a1 + 176)) >> 3;
    uint64_t v6 = (void *)(a1 + 216);
    if (*(char *)(a1 + 239) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)long long buf = 134218755;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&unsigned char buf[12] = 2160;
    if (a2) {
      CFTypeID v7 = " <user-switched>";
    }
    else {
      CFTypeID v7 = "";
    }
    *(void *)&unsigned char buf[14] = 1752392040;
    *(_WORD *)&unsigned char buf[22] = 2081;
    int v35 = v6;
    __int16 v36 = 2080;
    unsigned __int8 v37 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Removing %lu magic paired devices from local device database for %{private, mask.hash}s%s", buf, 0x2Au);
  }
  *(unsigned char *)(a1 + 240) = 0;
  if (a2)
  {
    memset(buf, 0, sizeof(buf));
    if (qword_1009F8768 != -1) {
      dispatch_once(&qword_1009F8768, &stru_1009AFE28);
    }
    sub_10060C508((uint64_t)off_1009F8760, (uint64_t **)buf);
    for (uint64_t i = *(uint64_t **)buf; i != *(uint64_t **)&buf[8]; ++i)
    {
      uint64_t v9 = *i;
      for (uint64_t j = *(void ***)(a1 + 176); j != *(void ***)(a1 + 184); ++j)
      {
        if (**j == v9) {
          goto LABEL_18;
        }
      }
      sub_1004A82EC((unsigned __int8 *)(v9 + 128), __p);
      (*(void (**)(uint64_t, void **))(*(void *)a1 + 104))(a1, __p);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
LABEL_18:
      ;
    }
    int v11 = +[CloudPairing sharedInstance];
    char v12 = [v11 cloudClient];
    [v12 invalidate];

    if (*(void *)buf)
    {
      *(void *)&uint8_t buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
  }
  uint64_t v13 = *(uint64_t ***)(a1 + 176);
  if (v13 == *(uint64_t ***)(a1 + 184)) {
    goto LABEL_53;
  }
  while (1)
  {
    BOOL v14 = *v13;
    if (!sub_1004764A0(**v13)) {
      goto LABEL_35;
    }
    char v27 = 0;
    sub_10001B8E0(&v27);
    int v15 = sub_10017C380(*v14 + 128);
    uint64_t v16 = (id)qword_100A19ED8;
    uint64_t v17 = v16;
    if (v15)
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        sub_100474E18(*v14, buf);
        __n128 v18 = buf;
        if ((buf[23] & 0x80u) != 0) {
          __n128 v18 = *(uint8_t **)buf;
        }
        *(_DWORD *)long long v30 = 136446466;
        long long v31 = v18;
        __int16 v32 = 1024;
        int v33 = v15;
        _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Magic Pairing disconnect failed for %{public}s on user logout with status: %d", v30, 0x12u);
LABEL_32:
        if ((char)buf[23] < 0) {
          operator delete(*(void **)buf);
        }
      }
    }
    else if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(*v14, buf);
      int v19 = buf;
      if ((buf[23] & 0x80u) != 0) {
        int v19 = *(uint8_t **)buf;
      }
      *(_DWORD *)long long v30 = 136446210;
      long long v31 = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Magic Pairing disconnected for %{public}s on user logout", v30, 0xCu);
      goto LABEL_32;
    }

    sub_10001B8AC(&v27);
LABEL_35:
    *((_DWORD *)v14 + 21) = 3;
    uint64_t v20 = sub_100370758();
    (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 104))(v20, *v14);
    if (a2)
    {
      if (qword_1009F80A0 != -1) {
        dispatch_once(&qword_1009F80A0, &stru_1009AFEC8);
      }
      char v21 = 3;
    }
    else
    {
      if (qword_1009F80A0 != -1) {
        dispatch_once(&qword_1009F80A0, &stru_1009AFEC8);
      }
      char v21 = 1;
    }
    *((unsigned char *)off_1009F8098 + 431) = v21;
    *(_OWORD *)(a1 + 49) = 0u;
    *(_OWORD *)(a1 + 65) = 0u;
    if (*(unsigned char *)(a1 + 48))
    {
      if (qword_1009F8768 != -1) {
        dispatch_once(&qword_1009F8768, &stru_1009AFE28);
      }
      sub_100611000((uint64_t)off_1009F8760, (unsigned __int8 *)*v14);
    }
    int v22 = *v13;
    if (*v13)
    {
      if (*((char *)v22 + 111) < 0) {
        operator delete((void *)v22[11]);
      }
      operator delete();
    }
    uint64_t v23 = *(uint64_t ***)(a1 + 184);
    int64_t v24 = (char *)v23 - (char *)(v13 + 1);
    if (v23 == v13 + 1) {
      break;
    }
    memmove(v13, v13 + 1, (char *)v23 - (char *)(v13 + 1));
    *(void *)(a1 + 184) = (char *)v13 + v24;
  }
  *(void *)(a1 + 184) = v23 - 1;
LABEL_53:
  uint64_t v25 = sub_100370758();
  uint64_t result = (unsigned char *)(*(uint64_t (**)(uint64_t))(*(void *)v25 + 168))(v25);
  if (*(unsigned char *)(a1 + 48))
  {
    buf[0] = 0;
    sub_10001B8E0(buf);
    sub_10049729C(a1);
    uint64_t result = sub_10001B8AC(buf);
  }
  if (*(char *)(a1 + 239) < 0)
  {
    **(unsigned char **)(a1 + 216) = 0;
    *(void *)(a1 + 224) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 216) = 0;
    *(unsigned char *)(a1 + 239) = 0;
  }
  return result;
}

void sub_100497210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10049729C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 184) - *(void *)(a1 + 176);
  if (v1)
  {
    is_mul_ok(v1 >> 3, 0x2CuLL);
    operator new[]();
  }
  int v2 = qword_100A19ED8;
  if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Magic paired device list is empty", buf, 2u);
  }
  return sub_10022F360(0, 0);
}

void sub_100497538(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100497550(uint64_t a1)
{
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009AFE88);
  }
  sub_1006D4BEC((uint64_t)off_1009F85C0, *(void *)(a1 + 32) + 77, *(void *)(a1 + 32) + 24);
  if (qword_1009F7ED0 != -1) {
    dispatch_once(&qword_1009F7ED0, &stru_1009AFEA8);
  }
  uint64_t v2 = qword_1009F7EC8;
  uint64_t v3 = *(void *)(a1 + 32);

  sub_1007071C4(v2, (unsigned __int8 *)(v3 + 77), v3 + 8);
}

void sub_1004975FC(uint64_t a1)
{
}

uint64_t sub_100497604(uint64_t a1)
{
  uint64_t v2 = qword_100A19ED8;
  if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "MagicPairingManager::stackWillStop enter", buf, 2u);
  }
  uint64_t result = sub_1004962BC();
  if (result)
  {
    *(void *)long long buf = 0;
    uint64_t v8 = 0;
    sub_10003AED0((uint64_t)buf, a1 + 104);
    *(unsigned char *)(a1 + 48) = 0;
    char v6 = 0;
    sub_10001B8E0(&v6);
    sub_10022FF50();
    sub_10001B910(&v6);
    char v4 = qword_100A19ED8;
    if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "MagicPairingManager::stackWillStop exit", v5, 2u);
    }
    sub_10001B8AC(&v6);
    return sub_10003AFB4((uint64_t)buf);
  }
  return result;
}

void sub_1004976F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10049771C(uint64_t a1)
{
  return sub_100497604(a1 - 16);
}

uint64_t sub_100497724(uint64_t a1)
{
  uint64_t result = sub_1004962BC();
  if (result)
  {
    uint64_t result = *(void *)(a1 + 200);
    if (result) {
      operator delete[]();
    }
  }
  return result;
}

uint64_t sub_10049776C(uint64_t a1)
{
  return sub_100497724(a1 - 16);
}

id sub_100497774(uint64_t a1)
{
  if (a1)
  {
    id v2 = objc_alloc((Class)BTCloudDevice);
    sub_1004A82EC((unsigned __int8 *)(a1 + 128), __p);
    if (v14 >= 0) {
      uint64_t v3 = __p;
    }
    else {
      uint64_t v3 = (void **)__p[0];
    }
    char v4 = +[NSString stringWithUTF8String:v3];
    id v5 = [v2 initWithBluetoothAddress:v4];

    if (v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    if (sub_10047B7A8(a1, (_DWORD *)&v12 + 1, &v12, (_DWORD *)&v11 + 1, &v11))
    {
      char v6 = +[NSString stringWithFormat:@"%u", HIDWORD(v11)];
      [v5 setProductID:v6];

      CFTypeID v7 = +[NSString stringWithFormat:@"%u", v12];
      [v5 setVendorID:v7];
    }
    sub_100475EE0(a1, (uint64_t)__p);
    if (v14 >= 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    uint64_t v9 = +[NSString stringWithUTF8String:v8];
    [v5 setNickname:v9];

    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

void sub_10049790C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100497978(uint64_t a1, char *a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 104);
  if ((char *)(a1 + 176) != a2) {
    sub_1002B5F74(a2, *(char **)(a1 + 176), *(void *)(a1 + 184), (uint64_t)(*(void *)(a1 + 184) - *(void *)(a1 + 176)) >> 3);
  }
  sub_10003AFB4((uint64_t)v5);
  return 0;
}

void sub_1004979E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1004979F4(uint64_t a1, uint64_t a2)
{
  v9[0] = 0;
  v9[1] = 0;
  uint64_t v4 = sub_10003AED0((uint64_t)v9, a1 + 104);
  if (sub_100497A84(v4, a2))
  {
    id v5 = *(void **)(a1 + 176);
    char v6 = *(void **)(a1 + 184);
    while (v5 != v6)
    {
      CFTypeID v7 = (void *)*v5;
      if (*(void *)*v5 == a2) {
        goto LABEL_7;
      }
      ++v5;
    }
  }
  CFTypeID v7 = 0;
LABEL_7:
  sub_10003AFB4((uint64_t)v9);
  return v7;
}

void sub_100497A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100497A84(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1004962BC();
  if (result)
  {
    v5[0] = 0;
    v5[1] = 0;
    uint64_t v4 = sub_100370758();
    return (*(unsigned int (**)(uint64_t, uint64_t, void, void *))(*(void *)v4 + 96))(v4, a2, 0, v5) == 0;
  }
  return result;
}

uint64_t sub_100497B20(uint64_t a1, unsigned __int8 *a2, int a3)
{
  if (a2[960])
  {
    uint64_t v4 = sub_100370758();
    (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v4 + 128))(v4, a2);
    return 1;
  }
  if ((a3 & 1) == 0)
  {
    CFTypeID v7 = (id)qword_100A19ED8;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      sub_100474E18((uint64_t)a2, v49);
      sub_10076D0EC();
    }

    if (qword_1009F80A0 != -1) {
      dispatch_once(&qword_1009F80A0, &stru_1009AFEC8);
    }
    *((unsigned char *)off_1009F8098 + 431) = 1;
  }
  int v8 = sub_100497A84(a1, (uint64_t)a2);
  uint64_t v9 = sub_100370758();
  (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v9 + 104))(v9, a2);
  if (a2[988]) {
    int v10 = v8;
  }
  else {
    int v10 = 1;
  }
  if (v10 != 1 || a2[989]) {
    return 1;
  }
  if (sub_1004962BC() && *(unsigned char *)(a1 + 240) && *(unsigned char *)(a1 + 241))
  {
    v48[0] = 0;
    v48[1] = 0;
    sub_10003AED0((uint64_t)v48, a1 + 104);
    uint64_t v13 = *(char **)(a1 + 176);
    char v14 = *(unsigned __int8 ****)(a1 + 184);
    if (v13 == (char *)v14)
    {
LABEL_23:
      uint64_t v16 = 0;
    }
    else
    {
      int v15 = *(unsigned __int8 ****)(a1 + 176);
      while (1)
      {
        uint64_t v16 = *v15;
        if (**v15 == a2) {
          break;
        }
        if (++v15 == v14) {
          goto LABEL_23;
        }
      }
    }
    if ((char *)v14 - v13 == 8 && *(unsigned char *)(a1 + 243)) {
      *(unsigned char *)(a1 + 243) = 0;
    }
    if (v16)
    {
      int v17 = *((_DWORD *)v16 + 21);
      __n128 v18 = (id)qword_100A19ED8;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18((uint64_t)a2, v54);
        int v19 = v55 >= 0 ? v54 : *(unsigned char **)v54;
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = v19;
        __int16 v51 = 1024;
        int v52 = v17;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Removing Magic Pairing, Cloud status of magic device %{public}s = %d", buf, 0x12u);
        if (v55 < 0) {
          operator delete(*(void **)v54);
        }
      }

      if (v17 != 3)
      {
        if ((sub_1004983FC((uint64_t *)(a1 + 176), (uint64_t)a2) & 1) == 0)
        {
          uint64_t v39 = (id)qword_100A19ED8;
          if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
          {
            sub_100474E18((uint64_t)a2, v54);
            sub_10076D094();
          }

          uint64_t v11 = 0;
          goto LABEL_82;
        }
        if (*(unsigned char *)(a1 + 48))
        {
          if ((a3 & 1) == 0)
          {
            if (qword_1009F8768 != -1) {
              dispatch_once(&qword_1009F8768, &stru_1009AFE28);
            }
            sub_100611000(off_1009F8760, a2);
          }
          char v47 = 0;
          sub_10001B8E0(&v47);
          sub_10049729C(a1);
          sub_10001B910(&v47);
          sub_1004984B4(a1);
          if (a3 && *(unsigned char *)(a1 + 240))
          {
            uint64_t v20 = (id)qword_100A19ED8;
            if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
            {
              sub_100474E18((uint64_t)a2, v54);
              sub_10076D03C();
            }

            char v21 = +[CloudPairing sharedInstance];
            int v22 = [v21 cloudClient];
            sub_1004A82EC(a2 + 128, buf);
            if (v53 >= 0) {
              uint64_t v23 = buf;
            }
            else {
              uint64_t v23 = *(unsigned char **)buf;
            }
            int64_t v24 = +[NSString stringWithUTF8String:v23];
            v46[0] = _NSConcreteStackBlock;
            v46[1] = 3221225472;
            void v46[2] = sub_1004985C8;
            v46[3] = &unk_1009AFC68;
            v46[4] = a2;
            [v22 deleteDeviceRecord:v24 completion:v46];

            if (v53 < 0) {
              operator delete(*(void **)buf);
            }

            uint64_t v25 = (id)qword_100A19ED8;
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
            {
              sub_100474E18((uint64_t)a2, buf);
              sub_10076CFE4();
            }

            int v26 = +[CloudPairing sharedInstance];
            char v27 = [v26 cloudClient];
            sub_1004A82EC(a2 + 128, __p);
            if (v45 >= 0) {
              uint8_t v28 = __p;
            }
            else {
              uint8_t v28 = (void **)__p[0];
            }
            char v29 = +[NSString stringWithUTF8String:v28];
            v43[0] = _NSConcreteStackBlock;
            v43[1] = 3221225472;
            void v43[2] = sub_10049870C;
            v43[3] = &unk_1009AFC68;
            uint8_t v43[4] = a2;
            [v27 deleteMagicSettingsRecord:v29 completion:v43];

            if (v45 < 0) {
              operator delete(__p[0]);
            }

            long long v30 = (id)qword_100A19ED8;
            if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
            {
              sub_100474E18((uint64_t)a2, __p);
              sub_10076CF8C();
            }

            long long v31 = +[CloudPairing sharedInstance];
            __int16 v32 = [v31 cloudClient];
            sub_1004A82EC(a2 + 128, v41);
            if (v42 >= 0) {
              int v33 = v41;
            }
            else {
              int v33 = (void **)v41[0];
            }
            long long v34 = +[NSString stringWithUTF8String:v33];
            v40[0] = _NSConcreteStackBlock;
            v40[1] = 3221225472;
            void v40[2] = sub_100498850;
            _OWORD v40[3] = &unk_1009AFC68;
            v40[4] = a2;
            [v32 deleteDeviceSupportInformationRecord:v34 completion:v40];

            if (v42 < 0) {
              operator delete(v41[0]);
            }

            sub_100498994(a1);
          }
          sub_10001B8AC(&v47);
        }
      }
    }
    else
    {
      unsigned __int8 v37 = (id)qword_100A19ED8;
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18((uint64_t)a2, v54);
        uint64_t v38 = v55 >= 0 ? v54 : *(unsigned char **)v54;
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = v38;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Device %{public}s not in Magic pairing list", buf, 0xCu);
        if (v55 < 0) {
          operator delete(*(void **)v54);
        }
      }
    }
    uint64_t v11 = 1;
LABEL_82:
    sub_10003AFB4((uint64_t)v48);
    return v11;
  }
  int v35 = (id)qword_100A19ED8;
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    if (sub_1004962BC())
    {
      if (*(unsigned char *)(a1 + 241)) {
        __int16 v36 = "Signed In";
      }
      else {
        __int16 v36 = "Not Signed in";
      }
    }
    else
    {
      __int16 v36 = "Not Supported";
    }
    *(_DWORD *)long long v54 = 136315138;
    *(void *)&v54[4] = v36;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Magic pairing: %s", v54, 0xCu);
  }

  return 0;
}

void sub_1004982B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  sub_10001B8AC(&a40);
  sub_10003AFB4((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t sub_1004983FC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)a1[1];
  if ((void *)*a1 != v3)
  {
    uint64_t v4 = -v2;
    do
    {
      id v5 = *(void **)v2;
      if (**(void **)v2 == a2)
      {
        if (*((char *)v5 + 111) < 0) {
          operator delete((void *)v5[11]);
        }
        operator delete();
      }
      v2 += 8;
      v4 -= 8;
    }
    while ((void *)v2 != v3);
  }
  return 0;
}

uint64_t sub_1004984B4(uint64_t a1)
{
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 104);
  uint64_t v2 = *(uint64_t ***)(a1 + 176);
  if (v2 == *(uint64_t ***)(a1 + 184)) {
    goto LABEL_12;
  }
  do
    int v3 = sub_100499B8C(a1, **v2++);
  while (v2 != *(uint64_t ***)(a1 + 184));
  if (v3)
  {
LABEL_12:
    if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
      sub_10076D144();
    }
  }
  else
  {
    uint64_t v4 = qword_100A19ED8;
    if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)char v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Successfully stored MagicPairing device information in storage", v6, 2u);
    }
    sub_1004A5D58(a1);
  }
  return sub_10003AFB4((uint64_t)v7);
}

void sub_1004985B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004985C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (id)qword_100A19ED8;
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      sub_100474E18(*(void *)(a1 + 32), __p);
      sub_10076D1AC();
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(*(void *)(a1 + 32), __p);
    char v6 = v8 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)long long buf = 136446210;
    int v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[MP-] Removed cloud device for %{public}s", buf, 0xCu);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1004986EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10049870C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (id)qword_100A19ED8;
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      sub_100474E18(*(void *)(a1 + 32), __p);
      sub_10076D1FC();
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(*(void *)(a1 + 32), __p);
    char v6 = v8 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)long long buf = 136446210;
    int v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[MP-] Removed new cloud magic settings for %{public}s", buf, 0xCu);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_100498830(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100498850(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (id)qword_100A19ED8;
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      sub_100474E18(*(void *)(a1 + 32), __p);
      sub_10076D24C();
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(*(void *)(a1 + 32), __p);
    char v6 = v8 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)long long buf = 136446210;
    int v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[MP-] Removed Device Support Information for %{public}s", buf, 0xCu);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_100498974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100498994(uint64_t a1)
{
  if (sub_1004962BC() && *(unsigned char *)(a1 + 240))
  {
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AFE48);
    }
    if (sub_1004AB1F0((uint64_t)off_1009F7EF8))
    {
      int v2 = *(unsigned __int8 *)(a1 + 241);
      id v3 = qword_100A19ED8;
      BOOL v4 = os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT);
      if (v2)
      {
        if (v4)
        {
          uint64_t v5 = (uint64_t)(*(void *)(a1 + 184) - *(void *)(a1 + 176)) >> 3;
          int buf = 134217984;
          *(void *)buf_4 = v5;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CloudSync: Uploading information for %lu devices to cloud", (uint8_t *)&buf, 0xCu);
        }
        uint64_t v6 = *(void *)(a1 + 184) - *(void *)(a1 + 176);
        if (v6)
        {
          is_mul_ok(v6 >> 3, 0x98uLL);
          operator new[]();
        }
        uint64_t v13 = qword_100A19ED8;
        if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf) = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "CloudSync: pushing updates to legacy layer", (uint8_t *)&buf, 2u);
        }
        (*(void (**)(void, void, void))(**(void **)(a1 + 168) + 40))(*(void *)(a1 + 168), 0, 0);
        return;
      }
      if (!v4) {
        return;
      }
      LOWORD(buf) = 0;
      uint64_t v11 = "Warning: Account not signed in";
      uint64_t v12 = v3;
    }
    else
    {
      uint64_t v10 = qword_100A19ED8;
      if (!os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      LOWORD(buf) = 0;
      uint64_t v11 = "System has not passed first unlock (or device prefs not read yet). Do not write DeviceList to Cloud";
      uint64_t v12 = v10;
    }
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&buf, 2u);
    return;
  }
  CFTypeID v7 = (id)qword_100A19ED8;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = sub_1004962BC();
    uint64_t v9 = "supported";
    if (v8) {
      uint64_t v9 = "initialized";
    }
    int buf = 136315138;
    *(void *)buf_4 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "writeDeviceListToCloud, Magic Pairing not %s.", (uint8_t *)&buf, 0xCu);
  }
}

void sub_1004996DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  _Unwind_Resume(a1);
}

void sub_1004997A8(uint64_t a1, uint64_t a2)
{
  if (sub_1004962BC() && *(unsigned char *)(a1 + 240))
  {
    if (a2)
    {
      if (*(_OWORD *)(a1 + 49) == 0 || *(_OWORD *)(a1 + 65) == 0)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
          sub_10076D304();
        }
      }
      else
      {
        v11[0] = 0;
        v11[1] = 0;
        if (!sub_10022FE78(a1 + 65, a2 + 56, (uint64_t)v11, 0x10uLL)
          && LODWORD(v11[0]) == *(_DWORD *)(*(void *)a2 + 128)
          && WORD2(v11[0]) == *(unsigned __int16 *)(*(void *)a2 + 132))
        {
          if (sub_100499A24((uint64_t *)a2, a1 + 49, a1 + 65))
          {
            if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
              sub_10076D338();
            }
          }
          else
          {
            *(_DWORD *)(a2 + 72) = 1;
            *(_DWORD *)(a2 + 84) = 2;
            uint64_t v5 = (id)qword_100A19ED8;
            if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
            {
              sub_100474E18(*(void *)a2, __p);
              uint64_t v6 = v8 >= 0 ? __p : (void **)__p[0];
              *(_DWORD *)int buf = 136446210;
              uint64_t v10 = v6;
              _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Reset Magic Pairing keys for device %{public}s", buf, 0xCu);
              if (v8 < 0) {
                operator delete(__p[0]);
              }
            }

            if (*(unsigned char *)(a1 + 48))
            {
              LOBYTE(__p[0]) = 0;
              sub_10001B8E0(__p);
              sub_10049729C(a1);
              sub_10001B8AC(__p);
            }
            sub_100499B8C(a1, *(void *)a2);
          }
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR))
    {
      sub_10076D2D0();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR))
  {
    sub_10076D29C();
  }
}

void sub_1004999FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100499A24(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  __int16 v16 = 0;
  int v15 = 0;
  int v13 = *(_DWORD *)(v5 + 128);
  __int16 v14 = *(_WORD *)(v5 + 132);
  uint64_t v6 = (char *)(v5 + 133);
  for (uint64_t i = 6; i != 12; ++i)
  {
    char v8 = *v6--;
    *((unsigned char *)&v13 + i) = v8;
  }
  char v9 = *(unsigned char *)(v5 + 129);
  char v17 = v9 ^ *(unsigned char *)(v5 + 128);
  char v10 = *(unsigned char *)(v5 + 130);
  char v18 = v10 ^ v9;
  char v11 = *(unsigned char *)(v5 + 131);
  char v19 = v11 ^ v10;
  char v20 = *(unsigned char *)(v5 + 132) ^ v11;
  if (sub_10022FEE4(a2, (uint64_t)&v13, (uint64_t)(a1 + 5), 0x10uLL))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
      sub_10076D3D4();
    }
  }
  else
  {
    uint64_t result = sub_10022FEE4(a3, (uint64_t)&v13, (uint64_t)(a1 + 7), 0x10uLL);
    if (!result) {
      return result;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
      sub_10076D36C();
    }
  }
  return 1;
}

uint64_t sub_100499B8C(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 1;
  }
  for (uint64_t i = *(void **)(a1 + 176); i != *(void **)(a1 + 184); ++i)
  {
    uint64_t v5 = (void *)*i;
    if (*(void *)*i == a2) {
      goto LABEL_7;
    }
  }
  uint64_t v5 = 0;
LABEL_7:
  unsigned int v41 = bswap32(*((_DWORD *)v5 + 18));
  char v42 = *((_DWORD *)v5 + 21);
  uint64_t v6 = sub_100370758();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void *))(*(void *)v6 + 88))(v6, a2, 0, v5 + 5);
  if (!result)
  {
    uint64_t v8 = sub_100370758();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v8 + 88))(v8, a2, 3, v5 + 3);
    if (!result)
    {
      uint64_t v9 = sub_100370758();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v9 + 88))(v9, a2, 2, v5 + 1);
      if (!result)
      {
        uint64_t v10 = sub_100370758();
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v10 + 88))(v10, a2, 1, v5 + 7);
        if (!result)
        {
          uint64_t v11 = sub_100370758();
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)v11 + 88))(v11, a2, 4, &v41);
          if (!result)
          {
            if ((sub_100478B2C(a2, 12) & 1) != 0 || sub_100478B2C(a2, 39))
            {
              *(void *)long long __p = 0;
              sub_100026C30((uint64_t)__p);
              *(void *)&long long v40 = *(int *)__p;
              *((void *)&v40 + 1) = *(__int16 *)&__p[4];
              if (!sub_100476054(a2))
              {
                uint64_t v12 = (id)qword_100A19ED8;
                if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
                {
                  sub_100474E18(a2, __p);
                  int v13 = v45 >= 0 ? __p : *(unsigned char **)__p;
                  *(_DWORD *)int buf = 136446210;
                  *(void *)&uint8_t buf[4] = v13;
                  _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Applying workaround for Apple Audio Device: BT_DEVICE_TYPE_GENERIC->BT_DEVICE_TYPE_HEADPHONES for %{public}s", buf, 0xCu);
                  if (SHIBYTE(v45) < 0) {
                    operator delete(*(void **)__p);
                  }
                }

                sub_100476C08(a2, 20, &v40);
              }
              HIDWORD(v39) = 0;
              sub_100476250(a2, (_DWORD *)&v39 + 1);
              if (!HIDWORD(v39))
              {
                __int16 v14 = (id)qword_100A19ED8;
                if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
                {
                  sub_100474E18(a2, __p);
                  int v15 = v45 >= 0 ? __p : *(unsigned char **)__p;
                  *(_DWORD *)int buf = 67109378;
                  *(_DWORD *)&uint8_t buf[4] = 2098200;
                  *(_WORD *)&uint8_t buf[8] = 2082;
                  *(void *)&buf[10] = v15;
                  _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Applying workaround for Apple Audio Device, CoD: 0->%u for %{public}s", buf, 0x12u);
                  if (SHIBYTE(v45) < 0) {
                    operator delete(*(void **)__p);
                  }
                }

                sub_10047B350(a2, 2098200, &v40);
              }
            }
            else
            {
              __int16 v16 = (id)qword_100A19ED8;
              if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
              {
                sub_100474E18(a2, __p);
                char v17 = v45 >= 0 ? __p : *(unsigned char **)__p;
                *(_DWORD *)int buf = 136446210;
                *(void *)&uint8_t buf[4] = v17;
                _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Cannot apply workaround this device is not Apple Audio Device: %{public}s", buf, 0xCu);
                if (SHIBYTE(v45) < 0) {
                  operator delete(*(void **)__p);
                }
              }
            }
            uint64_t v18 = sub_100017768();
            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 8))(v18);
            if (result)
            {
              LODWORD(v40) = 0;
              uint64_t v39 = 0;
              int v38 = 0;
              sub_10047B7A8(a2, &v40, (_DWORD *)&v39 + 1, &v39, &v38);
              char v19 = qword_100A19ED8;
              if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)long long __p = 0;
                _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "statedump: ----------------- Magic Pairing Manager ------------------", __p, 2u);
              }
              char v20 = (id)qword_100A19ED8;
              if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
              {
                char v21 = (void *)(a1 + 216);
                if (*(char *)(a1 + 239) < 0) {
                  char v21 = (void *)*v21;
                }
                int v22 = *(unsigned __int8 *)(a1 + 241);
                if (sub_1004962BC()) {
                  int v23 = *(unsigned __int8 *)(a1 + 240);
                }
                else {
                  int v23 = 0;
                }
                *(_DWORD *)long long __p = 136315650;
                *(void *)&__p[4] = v21;
                *(_WORD *)&unsigned char __p[12] = 1024;
                *(_DWORD *)&__p[14] = v22;
                __int16 v44 = 1024;
                int v45 = v23;
                _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Cloud Account ID: %s, Cloud Signed in: %d, Initialized: %d", __p, 0x18u);
              }

              int64_t v24 = qword_100A19ED8;
              if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
              {
                *(void *)long long __p = 0x1004100202;
                *(_WORD *)&__p[8] = 2096;
                *(void *)&__p[10] = a1 + 49;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Cached Acc Master Key:%.16P", __p, 0x12u);
              }
              uint64_t v25 = qword_100A19ED8;
              if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
              {
                *(void *)long long __p = 0x1004100202;
                *(_WORD *)&__p[8] = 2096;
                *(void *)&__p[10] = a1 + 65;
                _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Cached Acc Master Hint:%.16P", __p, 0x12u);
              }
              int v26 = qword_100A19ED8;
              if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
              {
                *(void *)long long __p = 0x1004100202;
                *(_WORD *)&__p[8] = 2096;
                *(void *)&__p[10] = a1 + 81;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Cached Acc Master Cloud IRK:%.16P", __p, 0x12u);
              }
              char v27 = qword_100A19ED8;
              if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
              {
                *(void *)long long __p = 0x604100202;
                *(_WORD *)&__p[8] = 2096;
                *(void *)&__p[10] = a1 + 97;
                _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Cached Acc Master Cloud Addr:%.6P", __p, 0x12u);
              }
              uint8_t v28 = (id)qword_100A19ED8;
              if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
              {
                sub_100474E18(a2, buf);
                int v29 = v51;
                long long v30 = *(unsigned char **)buf;
                int v31 = HIDWORD(v39);
                int v37 = v39;
                char v32 = sub_10047ECFC(a2);
                int v33 = buf;
                *(_DWORD *)long long __p = 136446978;
                if (v29 < 0) {
                  int v33 = v30;
                }
                *(void *)&__p[4] = v33;
                *(_WORD *)&unsigned char __p[12] = 1024;
                *(_DWORD *)&__p[14] = v31;
                __int16 v44 = 1024;
                int v45 = v37;
                __int16 v46 = 1024;
                LODWORD(v47) = v32 & 2;
                _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "statedump: Cached Device %{public}s, vid: %x, pid: %x, Fake: %d", __p, 0x1Eu);
                if (v51 < 0) {
                  operator delete(*(void **)buf);
                }
              }

              long long v34 = qword_100A19ED8;
              if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
              {
                int v35 = *((_DWORD *)v5 + 18);
                *(void *)long long __p = 0x1004100502;
                *(_WORD *)&__p[8] = 2096;
                *(void *)&__p[10] = v5 + 5;
                __int16 v44 = 1040;
                int v45 = 16;
                __int16 v46 = 2096;
                char v47 = v5 + 7;
                __int16 v48 = 1024;
                int v49 = v35;
                _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Cached Acc Key %.16P for Hint %.16P and Ratchet %d ", __p, 0x28u);
              }
              __int16 v36 = qword_100A19ED8;
              if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
              {
                *(void *)long long __p = 0x1004100402;
                *(_WORD *)&__p[8] = 2096;
                *(void *)&__p[10] = v5 + 1;
                __int16 v44 = 1040;
                int v45 = 16;
                __int16 v46 = 2096;
                char v47 = v5 + 3;
                _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Cached IRK %.16P and Encryption key %.16P", __p, 0x22u);
              }
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_10049A3E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10049A448(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = IsAppleInternalBuild();
  if (result)
  {
    uint64_t result = sub_1004962BC();
    if (result)
    {
      if (*(unsigned char *)(a1 + 240))
      {
        v22[0] = 0;
        v22[1] = 0;
        sub_10003AED0((uint64_t)v22, a1 + 104);
        for (uint64_t i = *(unsigned __int8 ***)(a1 + 176); ; ++i)
        {
          if (i == *(unsigned __int8 ***)(a1 + 184)) {
            return sub_10003AFB4((uint64_t)v22);
          }
          uint64_t v8 = *i;
          if (*(void *)*i == a2) {
            break;
          }
        }
        v32[0] = 0;
        v32[1] = 0;
        int v9 = v8[72];
        if (!sub_10022FE78(a1 + 65, (uint64_t)(v8 + 56), (uint64_t)v32, 0x10uLL)
          && (LODWORD(v32[0]) != *(_DWORD *)(*(void *)v8 + 128)
           || WORD2(v32[0]) != *(unsigned __int16 *)(*(void *)v8 + 132)))
        {
          uint64_t v18 = (id)qword_100A19ED8;
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            char v19 = sub_10022EA04(a3);
            sub_100474E18(a2, &__p);
            char v20 = SHIBYTE(v31) >= 0 ? &__p : (void **)__p;
            *(_DWORD *)int buf = 136315394;
            *(void *)&uint8_t buf[4] = v19;
            __int16 v24 = 2082;
            uint64_t v25 = v20;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Bad Main Account Keys; Unable to simulate Magic Pairing Error %s for device %{public}s",
              buf,
              0x16u);
            if (SHIBYTE(v31) < 0) {
              operator delete(__p);
            }
          }

          return sub_10003AFB4((uint64_t)v22);
        }
        uint64_t v10 = (id)qword_100A19ED8;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v11 = sub_10022EA04(a3);
          sub_100474E18(a2, &__p);
          uint64_t v12 = SHIBYTE(v31) >= 0 ? &__p : (void **)__p;
          *(_DWORD *)int buf = 136315394;
          *(void *)&uint8_t buf[4] = v11;
          __int16 v24 = 2082;
          uint64_t v25 = v12;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Simulating Magic Pairing Error %s for device %{public}s", buf, 0x16u);
          if (SHIBYTE(v31) < 0) {
            operator delete(__p);
          }
        }

        if (a3 == 7)
        {
          if (sub_100499A24((uint64_t *)v8, a1 + 49, a1 + 65))
          {
            if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
              sub_10076D338();
            }
            return sub_10003AFB4((uint64_t)v22);
          }
          int v13 = (id)qword_100A19ED8;
          if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_44;
          }
          sub_100474E18(a2, &__p);
          char v21 = SHIBYTE(v31) >= 0 ? &__p : (void **)__p;
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = v21;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Simulating Magic Pairing Error reset accessory key without changing ratchet for device %{public}s", buf, 0xCu);
          if ((SHIBYTE(v31) & 0x80000000) == 0) {
            goto LABEL_44;
          }
          __int16 v16 = __p;
        }
        else
        {
          if (a3 != 1)
          {
LABEL_45:
            if (*(unsigned char *)(a1 + 48))
            {
              LOBYTE(__p) = 0;
              sub_10001B8E0(&__p);
              sub_10049729C(a1);
              sub_10001B8AC(&__p);
            }
            sub_100499B8C(a1, *(void *)v8);
            return sub_10003AFB4((uint64_t)v22);
          }
          *((_DWORD *)v8 + 18) = v9 + 10;
          int v13 = (id)qword_100A19ED8;
          if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_44;
          }
          int v14 = *((_DWORD *)v8 + 18);
          sub_100474E18(a2, buf);
          int v15 = v26 >= 0 ? buf : *(unsigned char **)buf;
          LODWORD(__p) = 67109634;
          HIDWORD(__p) = v9;
          __int16 v28 = 1024;
          int v29 = v14;
          __int16 v30 = 2082;
          int v31 = v15;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Simulating Magic Pairing Error bumped ratchet from %d -> %d for device %{public}s", (uint8_t *)&__p, 0x18u);
          if ((v26 & 0x80000000) == 0)
          {
LABEL_44:

            goto LABEL_45;
          }
          __int16 v16 = *(void **)buf;
        }
        operator delete(v16);
        goto LABEL_44;
      }
    }
  }
  return result;
}

void sub_10049A830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10049A898(uint64_t a1, uint64_t a2, _OWORD *a3, _OWORD *a4)
{
  if (!*(unsigned char *)(a2 + 128))
  {
    unint64_t v13 = 0;
    while (v13 != 5)
    {
      unint64_t v14 = v13;
      if (*(unsigned __int8 *)(a2 + 129 + v13++))
      {
        if (v14 < 5) {
          goto LABEL_2;
        }
        break;
      }
    }
    if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
      sub_10076D43C();
    }
    return 1;
  }
LABEL_2:
  if (*(_OWORD *)(a1 + 49) == 0 || !*(unsigned char *)(a1 + 241))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
      sub_10076D470();
    }
    return 1;
  }
  v21[0] = 0;
  v21[1] = 0;
  sub_10003AED0((uint64_t)v21, a1 + 104);
  uint64_t v8 = *(void **)(a1 + 176);
  int v9 = *(void **)(a1 + 184);
  if (v8 == v9)
  {
LABEL_8:
    uint64_t v11 = (id)qword_100A19ED8;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a2, __p);
      if (v20 >= 0) {
        uint64_t v12 = __p;
      }
      else {
        uint64_t v12 = (void **)__p[0];
      }
      *(_DWORD *)int buf = 136446210;
      int v23 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "creating new Magic pairing device for device %{public}s", buf, 0xCu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }

    operator new();
  }
  uint64_t v10 = *(void ***)(a1 + 176);
  while (**v10 != a2)
  {
    if (++v10 == v9) {
      goto LABEL_8;
    }
  }
  while (v8 != v9)
  {
    char v17 = (void *)*v8;
    if (*(void *)*v8 == a2) {
      goto LABEL_28;
    }
    ++v8;
  }
  char v17 = 0;
LABEL_28:
  uint64_t v16 = 0;
  *a3 = *(_OWORD *)(v17 + 5);
  *a4 = *(_OWORD *)(v17 + 7);
  sub_10003AFB4((uint64_t)v21);
  return v16;
}

void sub_10049AC80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10049ACBC(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3 = a1 + 49;
  if (*(_OWORD *)(a1 + 49) == 0 || !*(unsigned char *)(a1 + 241))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
      sub_10076D4D8();
    }
  }
  else
  {
    CFTypeID v7 = (_OWORD *)(a1 + 81);
    if (*(_OWORD *)(a1 + 81) != 0)
    {
LABEL_4:
      uint64_t result = 0;
      *a2 = *v7;
      int v9 = *(_DWORD *)(a1 + 97);
      *(_WORD *)(a3 + 4) = *(_WORD *)(a1 + 101);
      *(_DWORD *)a3 = v9;
      return result;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
      sub_10076D644();
    }
    v13[0] = 0;
    v13[1] = 0;
    sub_10003AED0((uint64_t)v13, a1 + 104);
    v18[0] = 0;
    v18[1] = 0;
    *(_DWORD *)(a1 + 97) = 0;
    *(_WORD *)(a1 + 101) = 0;
    if (sub_10022FEE4(v3, a1 + 65, a1 + 81, 0x10uLL))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
        sub_10076D5DC();
      }
    }
    else if (sub_10022FEE4(a1 + 65, v3, (uint64_t)v18, 0x10uLL))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
        sub_10076D574();
      }
    }
    else
    {
      *(_DWORD *)(a1 + 97) = v18[0];
      *(_WORD *)(a1 + 101) = WORD2(v18[0]);
      uint64_t v10 = qword_100A19ED8;
      if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 68157954;
        int v15 = 16;
        __int16 v16 = 2096;
        uint64_t v17 = a1 + 81;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "fcCloudIRK %.16P ", buf, 0x12u);
      }
      uint64_t v11 = qword_100A19ED8;
      if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 68157954;
        int v15 = 6;
        __int16 v16 = 2096;
        uint64_t v17 = a1 + 97;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "fMasterCloudAddress %.6P ", buf, 0x12u);
      }
      uint64_t v12 = sub_100370758();
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12 + 160))(v12, a1 + 81, a1 + 97))
      {
        sub_10003AFB4((uint64_t)v13);
        goto LABEL_4;
      }
      if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
        sub_10076D50C();
      }
    }
    sub_10003AFB4((uint64_t)v13);
  }
  return 1;
}

void sub_10049AFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10049AFC8(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  if (!sub_1004962BC()) {
    return 2;
  }
  if (!*(unsigned char *)(a2 + 128))
  {
    unint64_t v13 = 0;
    while (v13 != 5)
    {
      unint64_t v14 = v13;
      if (*(unsigned __int8 *)(a2 + 129 + v13++))
      {
        if (v14 < 5) {
          goto LABEL_3;
        }
        break;
      }
    }
    if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
      sub_10076D678();
    }
    return 1;
  }
LABEL_3:
  if (*(_OWORD *)(a1 + 49) == 0 || !*(unsigned char *)(a1 + 241))
  {
    uint64_t v11 = qword_100A19ED8;
    if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = *(unsigned __int8 *)(a1 + 241);
      *(_DWORD *)int buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Device not signed in / master key not available. signed in = %d", buf, 8u);
    }
    return 1;
  }
  *(void *)int buf = 0;
  uint64_t v19 = 0;
  sub_10003AED0((uint64_t)buf, a1 + 104);
  uint64_t v6 = *(_WORD ***)(a1 + 176);
  CFTypeID v7 = *(_WORD ***)(a1 + 184);
  if (v6 == v7) {
LABEL_9:
  }
    operator new();
  uint64_t v8 = *(void ***)(a1 + 176);
  while (**v8 != a2)
  {
    if (++v8 == (void **)v7) {
      goto LABEL_9;
    }
  }
  while (1)
  {
    int v9 = *v6;
    if (*(void *)*v6 == a2) {
      break;
    }
    if (++v6 == v7)
    {
      int v9 = 0;
      break;
    }
  }
  if (a3)
  {
    *(_OWORD *)(v9 + 4) = *a3;
    *((unsigned char *)v9 + 77) = 0;
    __int16 v16 = *(_WORD *)(*(void *)v9 + 132);
    *(_DWORD *)(v9 + 39) = *(_DWORD *)(*(void *)v9 + 128);
    v9[41] = v16;
  }
  (*(void (**)(void))(**(void **)(a1 + 168) + 144))(*(void *)(a1 + 168));
  uint64_t v10 = 0;
  sub_10003AFB4((uint64_t)buf);
  return v10;
}

void sub_10049B30C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

__n128 sub_10049B328(_WORD *a1, __n128 *a2)
{
  if (a2)
  {
    __n128 result = *a2;
    *(__n128 *)(a1 + 4) = *a2;
    *((unsigned char *)a1 + 77) = 0;
    __int16 v3 = *(_WORD *)(*(void *)a1 + 132);
    *(_DWORD *)(a1 + 39) = *(_DWORD *)(*(void *)a1 + 128);
    a1[41] = v3;
  }
  return result;
}

uint64_t sub_10049B350(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (id)qword_100A19ED8;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a2, __p);
    CFTypeID v7 = v29 >= 0 ? __p : (void **)__p[0];
    LODWORD(buf) = 136446210;
    *(void *)((char *)&buf + 4) = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "updating encryption key for device %{public}s", (uint8_t *)&buf, 0xCu);
    if (v29 < 0) {
      operator delete(__p[0]);
    }
  }

  if (!sub_1004962BC()) {
    return 2;
  }
  if (!*(unsigned char *)(a2 + 128))
  {
    unint64_t v15 = 0;
    while (v15 != 5)
    {
      unint64_t v16 = v15;
      if (*(unsigned __int8 *)(a2 + 129 + v15++))
      {
        if (v16 < 5) {
          goto LABEL_9;
        }
        break;
      }
    }
    if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
      sub_10076D6AC();
    }
    return 1;
  }
LABEL_9:
  if (*(_OWORD *)(a1 + 49) == 0 || !*(unsigned char *)(a1 + 241))
  {
    unint64_t v13 = qword_100A19ED8;
    if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = *(unsigned __int8 *)(a1 + 241);
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Device not signed in / master key not available. signed in = %d", (uint8_t *)__p, 8u);
    }
    return 1;
  }
  if (*(unsigned char *)(a1 + 240))
  {
    long long buf = 0uLL;
    sub_10003AED0((uint64_t)&buf, a1 + 104);
    uint64_t v8 = *(void **)(a1 + 176);
    int v9 = *(void **)(a1 + 184);
    if (v8 == v9) {
LABEL_16:
    }
      operator new();
    uint64_t v10 = *(void ***)(a1 + 176);
    while (**v10 != a2)
    {
      if (++v10 == v9) {
        goto LABEL_16;
      }
    }
    while (1)
    {
      int v12 = (void *)*v8;
      if (*(void *)*v8 == a2) {
        break;
      }
      if (++v8 == v9)
      {
        int v12 = 0;
        break;
      }
    }
    uint64_t v20 = v12[3];
    __int16 v24 = v12;
    BOOL v21 = v20 == *a3 && v12[4] == a3[1];
    if (v21 && *((_DWORD *)v12 + 21) == 1)
    {
      int v22 = (id)qword_100A19ED8;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(a2, __p);
        if (v29 >= 0) {
          int v23 = __p;
        }
        else {
          int v23 = (void **)__p[0];
        }
        *(_DWORD *)uint64_t v25 = 136446210;
        char v26 = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Encryption key for device %{public}s is already up to date", v25, 0xCu);
        if (v29 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else
    {
      if (a3) {
        *(_OWORD *)(v12 + 3) = *(_OWORD *)a3;
      }
      sub_100498994(a1);
    }
    uint64_t v11 = 0;
    sub_10003AFB4((uint64_t)&buf);
  }
  else
  {
    uint64_t v19 = qword_100A19ED8;
    if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "updateDeviceEncryptionKey, Magic Pairing Layer not initialized", (uint8_t *)__p, 2u);
    }
    return 17;
  }
  return v11;
}

void sub_10049B7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);

  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10049B7DC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (!sub_1004962BC()) {
    return 2;
  }
  if (!*(unsigned char *)(a2 + 128))
  {
    unint64_t v14 = 0;
    while (v14 != 5)
    {
      unint64_t v15 = v14;
      if (*(unsigned __int8 *)(a2 + 129 + v14++))
      {
        if (v15 < 5) {
          goto LABEL_3;
        }
        break;
      }
    }
    if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
      sub_10076D6E0();
    }
    return 1;
  }
LABEL_3:
  if (*(_OWORD *)(a1 + 49) == 0 || !*(unsigned char *)(a1 + 241))
  {
    int v12 = qword_100A19ED8;
    if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = *(unsigned __int8 *)(a1 + 241);
      *(_DWORD *)long long __p = 67109120;
      *(_DWORD *)&__p[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Device not signed in / master key not available. signed in = %d", __p, 8u);
    }
    return 1;
  }
  if (*(unsigned char *)(a1 + 240))
  {
    v27[0] = 0;
    v27[1] = 0;
    sub_10003AED0((uint64_t)v27, a1 + 104);
    uint64_t v6 = (id)qword_100A19ED8;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a2, __p);
      CFTypeID v7 = v34 >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = v7;
      __int16 v29 = 1024;
      unsigned int v30 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "MagicPairingManager::updateDeviceRatchet from device %{public}s, ratchet %d", buf, 0x12u);
      if (SHIBYTE(v34) < 0) {
        operator delete(*(void **)__p);
      }
    }

    uint64_t v8 = *(void **)(a1 + 184);
    int v9 = *(void **)(a1 + 176);
    if (v9 == v8) {
LABEL_16:
    }
      operator new();
    uint64_t v10 = *(void ***)(a1 + 176);
    while (**v10 != a2)
    {
      if (++v10 == v8) {
        goto LABEL_16;
      }
    }
    uint64_t v19 = (void *)*v9;
    if (*(void *)*v9 != a2)
    {
      uint64_t v20 = (void **)(v9 + 1);
      do
      {
        BOOL v21 = *v20++;
        uint64_t v19 = v21;
      }
      while (*v21 != a2);
    }
    char v26 = v19;
    unsigned int v22 = *((_DWORD *)v19 + 18);
    int v23 = (id)qword_100A19ED8;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a2, buf);
      __int16 v24 = v31 >= 0 ? buf : *(unsigned char **)buf;
      *(_DWORD *)long long __p = 136446722;
      *(void *)&__p[4] = v24;
      *(_WORD *)&unsigned char __p[12] = 1024;
      *(_DWORD *)&__p[14] = v22;
      __int16 v33 = 1024;
      int v34 = a3;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "MagicPairingManager::updateDeviceRatchet from device %{public}s, current %d -> new %d", __p, 0x18u);
      if (v31 < 0) {
        operator delete(*(void **)buf);
      }
    }

    unsigned int v25 = a3 - v22;
    if (a3 != v22)
    {
      if (a3 > v22)
      {
        while (1)
        {
          *(void *)long long __p = 0;
          *(void *)&__p[8] = 0;
          if (sub_10022F378()) {
            break;
          }
          uint64_t v19 = v26;
          *(_OWORD *)(v26 + 5) = *(_OWORD *)__p;
          if (!--v25)
          {
            unsigned int v22 = a3;
            goto LABEL_46;
          }
        }
        if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
          sub_10076D714();
        }
        uint64_t v11 = 1;
        goto LABEL_52;
      }
LABEL_46:
      if (v22) {
        *((_DWORD *)v19 + 18) = v22;
      }
      if (*(unsigned char *)(a1 + 48))
      {
        __p[0] = 0;
        sub_10001B8E0(__p);
        sub_10049729C(a1);
        sub_10001B8AC(__p);
      }
      sub_100499B8C(a1, a2);
    }
    uint64_t v11 = 0;
LABEL_52:
    sub_10003AFB4((uint64_t)v27);
    return v11;
  }
  uint64_t v18 = qword_100A19ED8;
  if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long __p = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "updateDeviceRatchet, Magic Pairing Layer not initialized", __p, 2u);
  }
  return 17;
}

void sub_10049BCCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);

  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10049BD18(uint64_t a1, void *a2, void *a3)
{
  if (sub_1004962BC())
  {
    if (*a2 != *(void *)(a1 + 49) || a2[1] != *(void *)(a1 + 57))
    {
      if (!a2 || !a3) {
        goto LABEL_31;
      }
      goto LABEL_20;
    }
    BOOL v9 = *a3 != *(void *)(a1 + 65) || a3[1] != *(void *)(a1 + 73);
    if (a2 && a3 && v9)
    {
LABEL_20:
      uint64_t v10 = qword_100A19ED8;
      if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = *(unsigned __int8 *)(a1 + 240);
        LODWORD(v19) = 67109376;
        HIDWORD(v19) = v11;
        LOWORD(v20[0]) = 1024;
        *(_DWORD *)((char *)v20 + 2) = 1;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "MagicPairingInitialized: %d, keysChanged: %d, Cloud master keys are updated. Updating local keys", (uint8_t *)&v19, 0xEu);
      }
      *(_OWORD *)(a1 + 49) = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 65) = *(_OWORD *)a3;
      uint64_t v12 = sub_100370758();
      int v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12 + 152))(v12, a1 + 49, a1 + 65);
      uint64_t v14 = sub_100017768();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v14 + 8))(v14))
      {
        unint64_t v15 = qword_100A19ED8;
        if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v19 = 0x1004100202;
          LOWORD(v20[0]) = 2096;
          *(void *)((char *)v20 + 2) = a1 + 49;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "cloudKeysAvailable Acc Master Key:%.16P", (uint8_t *)&v19, 0x12u);
        }
        unint64_t v16 = qword_100A19ED8;
        if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v19 = 0x1004100202;
          LOWORD(v20[0]) = 2096;
          *(void *)((char *)v20 + 2) = a1 + 65;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "cloudKeysAvailable Acc Master Hint:%.16P", (uint8_t *)&v19, 0x12u);
        }
      }
      if (v13)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
          sub_10076D950();
        }
      }
      else
      {
        uint64_t v19 = 0;
        v20[0] = 0;
        sub_10003AED0((uint64_t)&v19, a1 + 104);
        uint64_t v17 = *(void *)(a1 + 176);
        uint64_t v18 = *(void *)(a1 + 184);
        sub_10003AFB4((uint64_t)&v19);
        if (v17 == v18 && !*(unsigned char *)(a1 + 240))
        {
          if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
            sub_10076D91C();
          }
          (*(void (**)(void))(**(void **)(a1 + 168) + 32))(*(void *)(a1 + 168));
        }
      }
      return;
    }
    if (v9)
    {
LABEL_31:
      if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEBUG)) {
        sub_10076D8B4();
      }
      if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
        sub_10076D84C();
      }
      return;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEBUG)) {
      sub_10076D7E4();
    }
    if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR)) {
      sub_10076D77C();
    }
  }
  else
  {
    CFTypeID v7 = qword_100A19ED8;
    if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v19) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "cloudKeysAvailable, Magic Pairing not supported", (uint8_t *)&v19, 2u);
    }
  }
}

void sub_10049C0FC(uint64_t a1, void *a2, void *a3)
{
}

uint64_t sub_10049C104(uint64_t a1, uint64_t a2)
{
  v27[0] = 0;
  v27[1] = 0;
  sub_10003AED0((uint64_t)v27, a1 + 104);
  BOOL v4 = *(unsigned __int8 **)a2;
  for (uint64_t i = *(unsigned __int8 ****)(a1 + 176); i != *(unsigned __int8 ****)(a1 + 184); ++i)
  {
    if (**i == v4)
    {
      uint64_t v17 = (id)qword_100A19ED8;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18((uint64_t)v4, &__p);
        uint64_t v18 = v30 >= 0 ? &__p : (__n128 *)__p.n128_u64[0];
        *(_DWORD *)long long buf = 136446210;
        char v32 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Update Magic pairing device from cloud %{public}s", buf, 0xCu);
        if (v30 < 0) {
          operator delete((void *)__p.n128_u64[0]);
        }
      }

      goto LABEL_35;
    }
  }
  uint64_t v6 = (id)qword_100A19ED8;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18((uint64_t)v4, &__p);
    CFTypeID v7 = v30 >= 0 ? &__p : (__n128 *)__p.n128_u64[0];
    *(_DWORD *)long long buf = 136446210;
    char v32 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "New Magic pairing device from cloud %{public}s", buf, 0xCu);
    if (v30 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
  }

  unint64_t v8 = *(void *)(a1 + 192);
  BOOL v9 = *(void **)(a1 + 184);
  if ((unint64_t)v9 >= v8)
  {
    uint64_t v11 = *(void *)(a1 + 176);
    uint64_t v12 = ((uint64_t)v9 - v11) >> 3;
    if ((unint64_t)(v12 + 1) >> 61) {
      abort();
    }
    uint64_t v13 = v8 - v11;
    uint64_t v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
      uint64_t v14 = v12 + 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    if (v15) {
      unint64_t v16 = (char *)sub_1000405F8(a1 + 192, v15);
    }
    else {
      unint64_t v16 = 0;
    }
    uint64_t v19 = &v16[8 * v12];
    uint64_t v20 = &v16[8 * v15];
    *(void *)uint64_t v19 = a2;
    uint64_t v10 = v19 + 8;
    unsigned int v22 = *(char **)(a1 + 176);
    BOOL v21 = *(char **)(a1 + 184);
    if (v21 != v22)
    {
      do
      {
        uint64_t v23 = *((void *)v21 - 1);
        v21 -= 8;
        *((void *)v19 - 1) = v23;
        v19 -= 8;
      }
      while (v21 != v22);
      BOOL v21 = *(char **)(a1 + 176);
    }
    *(void *)(a1 + 176) = v19;
    *(void *)(a1 + 184) = v10;
    *(void *)(a1 + 192) = v20;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    void *v9 = a2;
    uint64_t v10 = v9 + 1;
  }
  *(void *)(a1 + 184) = v10;
LABEL_35:
  if (qword_1009F8778 != -1) {
    dispatch_once(&qword_1009F8778, &stru_1009AFE68);
  }
  if ((sub_100040694((uint64_t)off_1009F8770, v4) & 1) == 0 && *(unsigned char *)(a1 + 48))
  {
    if (qword_1009F8768 != -1) {
      dispatch_once(&qword_1009F8768, &stru_1009AFE28);
    }
    sub_100611F9C((uint64_t)off_1009F8760, (uint64_t)v4);
    __n128 __p = 0uLL;
    int v29 = 0;
    sub_100600E5C((uint64_t)&__p, (_OWORD *)(a2 + 40), 4u);
    if (qword_1009F8778 != -1) {
      dispatch_once(&qword_1009F8778, &stru_1009AFE68);
    }
    sub_100618730((uint64_t)off_1009F8770, v4, &__p, 0);
    nullsub_95(&__p);
  }
  if (qword_1009F8778 != -1) {
    dispatch_once(&qword_1009F8778, &stru_1009AFE68);
  }
  sub_100619464((uint64_t)off_1009F8770, v4);
  if (*(unsigned char *)(a1 + 48))
  {
    __p.n128_u8[0] = 0;
    sub_10001B8E0(&__p);
    sub_10049729C(a1);
    sub_10001B910(&__p);
    if (((unint64_t)*(unsigned __int8 *)(a2 + 78) << 40) | ((unint64_t)*(unsigned __int8 *)(a2 + 79) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 80) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 81) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 82) << 8) | *(unsigned __int8 *)(a2 + 83))
    {
      uint64_t v24 = sub_100019878();
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472;
      void v26[2] = sub_10049C5A0;
      _OWORD v26[3] = &unk_100997528;
      void v26[4] = a2;
      sub_100013018(v24, v26);
    }
    sub_10001B8AC(&__p);
  }
  sub_100499B8C(a1, (uint64_t)v4);
  *(_DWORD *)(a2 + 84) = 1;
  *(unsigned char *)(a1 + 240) = 1;
  return sub_10003AFB4((uint64_t)v27);
}

void sub_10049C540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);

  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10049C5A0(uint64_t a1)
{
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009AFE88);
  }
  sub_1006D4BEC((uint64_t)off_1009F85C0, *(void *)(a1 + 32) + 77, *(void *)(a1 + 32) + 24);
  if (qword_1009F7ED0 != -1) {
    dispatch_once(&qword_1009F7ED0, &stru_1009AFEA8);
  }
  uint64_t v2 = qword_1009F7EC8;
  uint64_t v3 = *(void *)(a1 + 32);

  sub_1007071C4(v2, (unsigned __int8 *)(v3 + 77), v3 + 8);
}

uint64_t sub_10049C64C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  v213[1] = 0;
  v213[0] = 0;
  sub_10003AED0((uint64_t)v213, a1 + 104);
  *(unsigned char *)(a1 + 242) = 1;
  BOOL v4 = (id)qword_100A19ED8;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "device info update callback from cloudkit for %d devices", buf, 8u);
  }

  if (a3)
  {
    uint64_t v6 = 0;
    uint64_t v191 = a1 + 192;
    __int16 v192 = &v204;
    uint64_t v195 = a3;
    *(void *)&long long v5 = 136446210;
    long long v193 = v5;
    do
    {
      uint64_t v7 = a2 + 152 * v6;
      *(_DWORD *)__int16 v214 = *(_DWORD *)v7;
      LOWORD(v215) = *(_WORD *)(v7 + 4);
      if (qword_1009F7F00 != -1) {
        dispatch_once(&qword_1009F7F00, &stru_1009AFE48);
      }
      uint64_t v8 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)v214, 1);
      uint64_t v9 = v8;
      uint64_t v10 = a2 + 152 * v6;
      __int16 v12 = *(_WORD *)(v10 + 150);
      uint64_t v11 = (_WORD *)(v10 + 150);
      if ((v12 & 2) != 0) {
        sub_10047ED44(v8, 1, 1);
      }
      uint64_t v200 = v6;
      if (*(unsigned char *)(v9 + 128))
      {
LABEL_10:
        unint64_t v210 = 0;
        int v209 = 1;
        memset(&v222, 0, sizeof(v222));
        sub_10004191C(&v222, (char *)(a2 + 152 * v6 + 74));
        int v13 = 0;
        uint64_t v14 = (int *)(a2 + 152 * v6 + 138);
        do
        {
          if ((*v14 & (1 << v13)) != 0)
          {
            *(void *)long long v218 = 0;
            *(void *)long long buf = 0;
            *(void *)&uint8_t buf[8] = 0;
            sub_100026C30((uint64_t)v218);
            *(void *)long long buf = *(int *)v218;
            *(void *)&uint8_t buf[8] = *(__int16 *)&v218[4];
            sub_100477F4C(v9, 1 << v13, 4, buf, 0);
          }
          ++v13;
        }
        while (v13 != 31);
        unint64_t v15 = (id)qword_100A19EB8;
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          int v16 = *v14;
          if (qword_1009F8090 != -1) {
            dispatch_once(&qword_1009F8090, &stru_1009AFEE8);
          }
          int v17 = sub_1004D6124((uint64_t)off_1009F8088, v9);
          int v18 = *(unsigned __int8 *)(a2 + 152 * v200 + 130);
          *(_DWORD *)long long buf = 67109632;
          *(_DWORD *)&uint8_t buf[4] = v16;
          *(_WORD *)&uint8_t buf[8] = 1024;
          *(_DWORD *)&buf[10] = v17;
          *(_WORD *)&unsigned char buf[14] = 1024;
          *(_DWORD *)&uint8_t buf[16] = v18;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Updating in memory device service capability details: received service mask %x, device service mask after update %x, blob version %d", buf, 0x14u);
        }

        uint64_t v19 = sub_100017768();
        uint64_t v20 = a2;
        if ((*(unsigned int (**)(uint64_t))(*(void *)v19 + 8))(v19))
        {
          BOOL v21 = (id)qword_100A19ED8;
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            sub_100474E18(v9, v218);
            unsigned int v22 = v218;
            if (v221 < 0) {
              unsigned int v22 = *(unsigned char **)v218;
            }
            uint64_t v23 = a2 + 152 * v200;
            int v24 = *(_DWORD *)(v23 + 38);
            *(_DWORD *)long long buf = 136447490;
            *(void *)&uint8_t buf[4] = v22;
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&unsigned char buf[14] = v24;
            *(_WORD *)&unsigned char buf[18] = 1040;
            *(_DWORD *)&unsigned char buf[20] = 16;
            *(_WORD *)&uint8_t buf[24] = 2096;
            *(void *)&buf[26] = v23 + 6;
            *(_WORD *)&buf[34] = 1040;
            *(_DWORD *)&buf[36] = 16;
            *(_WORD *)char v217 = 2096;
            *(void *)&v217[2] = v23 + 22;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Update received for magic device %{public}s with info,  ratchet = %d accessory key %.16P and Hint %.16P", buf, 0x32u);
            if (v221 < 0) {
              operator delete(*(void **)v218);
            }
          }

          unsigned int v25 = (id)qword_100A19ED8;
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            sub_100474E18(v9, v218);
            char v26 = v218;
            if (v221 < 0) {
              char v26 = *(unsigned char **)v218;
            }
            char v27 = &v222;
            if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              char v27 = (std::string *)v222.__r_.__value_.__r.__words[0];
            }
            uint64_t v28 = a2 + 152 * v200;
            *(_DWORD *)long long buf = 136447490;
            *(void *)&uint8_t buf[4] = v26;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&unsigned char buf[14] = v27;
            *(_WORD *)&unsigned char buf[22] = 1040;
            *(_DWORD *)&uint8_t buf[24] = 16;
            *(_WORD *)&buf[28] = 2096;
            *(void *)&buf[30] = v28 + 42;
            *(_WORD *)&buf[38] = 1040;
            *(_DWORD *)char v217 = 16;
            *(_WORD *)&v217[4] = 2096;
            *(void *)&v217[6] = v28 + 58;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Update received for magic device %{public}s with info,  name = %s IRK %.16P and Enc Key %.16P", buf, 0x36u);
            if (v221 < 0) {
              operator delete(*(void **)v218);
            }
          }

          uint64_t v20 = a2;
        }
        for (uint64_t i = *(void ***)(a1 + 176); i != *(void ***)(a1 + 184); ++i)
        {
          char v30 = *i;
          if (**i == v9) {
            goto LABEL_37;
          }
        }
        char v30 = 0;
LABEL_37:
        unsigned int v208 = 0;
        BOOL v31 = sub_10047B7A8(v9, &v208, (_DWORD *)&v210 + 1, &v210, &v209);
        char v32 = (id)qword_100A19ED8;
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v33 = v20 + 152 * v200;
          int v34 = *(unsigned __int16 *)(v33 + 142);
          LODWORD(v33) = *(unsigned __int16 *)(v33 + 144);
          *(_DWORD *)long long buf = 67110400;
          *(_DWORD *)&uint8_t buf[4] = v34;
          *(_WORD *)&uint8_t buf[8] = 1024;
          *(_DWORD *)&buf[10] = v33;
          *(_WORD *)&unsigned char buf[14] = 1024;
          *(_DWORD *)&uint8_t buf[16] = v31;
          *(_WORD *)&unsigned char buf[20] = 1024;
          *(_DWORD *)&unsigned char buf[22] = HIDWORD(v210);
          *(_WORD *)&buf[26] = 1024;
          *(_DWORD *)&buf[28] = v210;
          *(_WORD *)&uint8_t buf[32] = 1024;
          *(_DWORD *)&buf[34] = v208;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Device vid/pid from cloud vid - %x, cloud pid - %x; (%d) Local vid - %x, Local pid - %x, Local vidSrc - %x",
            buf,
            0x26u);
        }

        uint64_t v35 = a2;
        uint64_t v36 = v200;
        uint64_t v37 = a2 + 152 * v200;
        int v39 = *(unsigned __int16 *)(v37 + 142);
        int v38 = (unsigned __int16 *)(v37 + 142);
        if (v39)
        {
          uint64_t v40 = a2 + 152 * v200;
          int v42 = *(unsigned __int16 *)(v40 + 144);
          unsigned int v41 = (unsigned __int16 *)(v40 + 144);
          if (v42)
          {
            if (v208 <= 1) {
              int v43 = 1;
            }
            else {
              int v43 = v208;
            }
            __int16 v44 = (id)qword_100A19ED8;
            if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
            {
              int v45 = *v38;
              int v46 = *v41;
              *(_DWORD *)long long buf = 67109376;
              *(_DWORD *)&uint8_t buf[4] = v45;
              *(_WORD *)&uint8_t buf[8] = 1024;
              *(_DWORD *)&buf[10] = v46;
              _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "New Magic Paired Device's Cloud vid - %x, Cloud pid - %x", buf, 0xEu);
            }

            int v47 = *v38;
            int v48 = *v41;
            unint64_t v210 = __PAIR64__(v47, v48);
            sub_10047C89C(v9, v43, v47, v48, v209);
            uint64_t v35 = a2;
            uint64_t v36 = v200;
          }
        }
        __int16 v196 = (unsigned char *)(v35 + 152 * v36 + 130);
        uint64_t v49 = v35;
        if (*v196)
        {
          uint64_t v50 = v35 + 152 * v200;
          unsigned int v53 = *(unsigned __int8 *)(v50 + 147);
          char v51 = (unsigned char *)(v50 + 147);
          unsigned int v52 = v53;
          unsigned int v54 = v51[1];
          int v55 = v54 & 0xF;
          unsigned int v56 = v54 >> 4;
          int v57 = v55 | (v54 >> 4 << 8);
          int v58 = (id)qword_100A19ED8;
          if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v57;
            _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "Retrieved double tap from cloud: %d", buf, 8u);
          }

          __int16 v194 = v11;
          if (qword_1009F80A0 != -1) {
            dispatch_once(&qword_1009F80A0, &stru_1009AFEC8);
          }
          int v59 = sub_10028F788((uint64_t)off_1009F8098, v9, v55 | (v56 << 8), (v52 >> 4) & 1);
          BOOL v60 = v57 == v59;
          if (v57 == v59) {
            unsigned int v61 = v55;
          }
          else {
            unsigned int v61 = v59;
          }
          if (v60) {
            unsigned int v62 = v56;
          }
          else {
            unsigned int v62 = BYTE1(v59);
          }
          if (sub_10047C698(v9) != v59)
          {
            __int16 v63 = (id)qword_100A19ED8;
            if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "Updating double tap settings from cloud", buf, 2u);
            }

            if ((v52 & 8) != 0)
            {
              if (qword_1009F80A0 != -1) {
                dispatch_once(&qword_1009F80A0, &stru_1009AFEC8);
              }
              sub_100291AC0((uint64_t)off_1009F8098, v9, v62, v61, 4);
            }
          }
          int v64 = *v51 & 3;
          if (v64 == 2) {
            uint64_t v65 = 2;
          }
          else {
            uint64_t v65 = v64 == 1;
          }
          if (sub_10048741C(v9) != v65)
          {
            if (qword_1009F80A0 != -1) {
              dispatch_once(&qword_1009F80A0, &stru_1009AFEC8);
            }
            sub_1002917DC((uint64_t)off_1009F8098, v9, v65, 4u);
          }
          uint64_t v66 = a2 + 152 * v200;
          if (*(unsigned char *)(v66 + 149))
          {
            sub_100489294(v9, *(unsigned __int8 *)(v66 + 149));
            __int16 v67 = (id)qword_100A19ED8;
            if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
            {
              sub_100474E18(v9, buf);
              int v68 = buf[23];
              __int16 v69 = *(unsigned char **)buf;
              int v70 = sub_100489318(v9);
              *(_DWORD *)long long v218 = 136446466;
              __int16 v71 = buf;
              if (v68 < 0) {
                __int16 v71 = v69;
              }
              *(void *)&v218[4] = v71;
              __int16 v219 = 1024;
              int v220 = v70;
              _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "Color info updated for device %{public}s, color code %d", v218, 0x12u);
              if ((buf[23] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
            }
          }
          unsigned int v72 = *v51 & 4;
          __int16 v73 = (id)qword_100A19ED8;
          if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
          {
            sub_100474E18(v9, v218);
            int v74 = v221;
            __int16 v75 = *(unsigned char **)v218;
            int v76 = sub_100487464(v9);
            __int16 v77 = v218;
            if (v74 < 0) {
              __int16 v77 = v75;
            }
            if (v72) {
              int v78 = "Enabled";
            }
            else {
              int v78 = "Disabled";
            }
            *(_DWORD *)long long buf = 136446722;
            *(void *)&uint8_t buf[4] = v77;
            *(_WORD *)&unsigned char buf[12] = 2080;
            if (v76) {
              __int16 v79 = "Enabled";
            }
            else {
              __int16 v79 = "Disabled";
            }
            *(void *)&unsigned char buf[14] = v78;
            *(_WORD *)&unsigned char buf[22] = 2080;
            *(void *)&uint8_t buf[24] = v79;
            _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "In Ear Detection state update from cloud for device %{public}s is %s, local state %s", buf, 0x20u);
            if (v221 < 0) {
              operator delete(*(void **)v218);
            }
          }

          if (sub_100487464(v9) != v72 >> 2)
          {
            if (qword_1009F80A0 != -1) {
              dispatch_once(&qword_1009F80A0, &stru_1009AFEC8);
            }
            sub_100291D0C((uint64_t)off_1009F8098, v9, v72 != 0, 4u);
          }
          int v80 = (id)qword_100A19ED8;
          if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
          {
            sub_100474E18(v9, buf);
            __int16 v81 = buf;
            if (buf[23] < 0) {
              __int16 v81 = *(unsigned char **)buf;
            }
            int v82 = (unsigned __int16)*v194;
            *(_DWORD *)long long v218 = 136446466;
            *(void *)&v218[4] = v81;
            __int16 v219 = 1024;
            int v220 = v82;
            _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEFAULT, "Update listening mode services for device %{public}s with service - %d", v218, 0x12u);
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
          }

          uint64_t v83 = ((unsigned __int16)*v194 >> 5) & 0x700 | ((unsigned __int16)*v194 >> 10) & 7u;
          int v84 = (id)qword_100A19ED8;
          if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
          {
            sub_100474E18(v9, v218);
            int v85 = v221;
            int v86 = *(unsigned char **)v218;
            int v87 = sub_100487714(v9);
            *(_DWORD *)long long buf = 136446722;
            int v88 = v218;
            if (v85 < 0) {
              int v88 = v86;
            }
            *(void *)&uint8_t buf[4] = v88;
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&unsigned char buf[14] = v87;
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&unsigned char buf[20] = v83;
            _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "Click Hold mode info update for device %{public}s, current value: %d, cloud value %d", buf, 0x18u);
            if (v221 < 0) {
              operator delete(*(void **)v218);
            }
          }

          if (v83 && sub_100487714(v9) != v83)
          {
            if (qword_1009F80A0 != -1) {
              dispatch_once(&qword_1009F80A0, &stru_1009AFEC8);
            }
            sub_1002859A4((uint64_t)off_1009F8098, v9, 22, v83, 4u);
            __int16 v89 = (id)qword_100A19ED8;
            if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
            {
              sub_100474E18(v9, buf);
              int v90 = buf[23];
              __int16 v91 = *(unsigned char **)buf;
              int v92 = sub_100487714(v9);
              *(_DWORD *)long long v218 = 136446466;
              __int16 v93 = buf;
              if (v90 < 0) {
                __int16 v93 = v91;
              }
              *(void *)&v218[4] = v93;
              __int16 v219 = 1024;
              int v220 = v92;
              _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEFAULT, "Click Hold mode info updated for device %{public}s, new mode %d", v218, 0x12u);
              if ((buf[23] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
            }
          }
          uint64_t v94 = ((unsigned __int16)*v194 >> 7) & 7;
          __int16 v95 = (id)qword_100A19ED8;
          if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
          {
            sub_100474E18(v9, v218);
            int v96 = v221;
            __int16 v97 = *(unsigned char **)v218;
            int v98 = sub_1004875AC(v9);
            *(_DWORD *)long long buf = 136446722;
            __int16 v99 = v218;
            if (v96 < 0) {
              __int16 v99 = v97;
            }
            *(void *)&uint8_t buf[4] = v99;
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&unsigned char buf[14] = v98;
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&unsigned char buf[20] = v94;
            _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEFAULT, "Listening mode config update for device %{public}s, current value: %d, cloud configs: %d", buf, 0x18u);
            if (v221 < 0) {
              operator delete(*(void **)v218);
            }
          }

          if (v94 && sub_1004875AC(v9) != v94)
          {
            if (qword_1009F80A0 != -1) {
              dispatch_once(&qword_1009F80A0, &stru_1009AFEC8);
            }
            sub_1002859A4((uint64_t)off_1009F8098, v9, 26, v94, 4u);
            int v100 = (id)qword_100A19ED8;
            if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
            {
              sub_100474E18(v9, buf);
              int v101 = buf[23];
              int v102 = *(unsigned char **)buf;
              int v103 = sub_1004875AC(v9);
              *(_DWORD *)long long v218 = 136446466;
              int v104 = buf;
              if (v101 < 0) {
                int v104 = v102;
              }
              *(void *)&v218[4] = v104;
              __int16 v219 = 1024;
              int v220 = v103;
              _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_DEFAULT, "Listening mode config updated for device %{public}s, new configs %d", v218, 0x12u);
              if ((buf[23] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
            }
          }
          unsigned int v105 = *v194 & 0x40;
          int v106 = (id)qword_100A19ED8;
          if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT))
          {
            sub_100474E18(v9, v218);
            int v107 = v221;
            int v108 = *(unsigned char **)v218;
            int v109 = sub_100478B2C(v9, 32);
            *(_DWORD *)long long buf = 136446722;
            int v110 = v218;
            if (v107 < 0) {
              int v110 = v108;
            }
            *(void *)&uint8_t buf[4] = v110;
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&unsigned char buf[14] = v109;
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&unsigned char buf[20] = v105 >> 6;
            _os_log_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_DEFAULT, "TiPi supported flag update from macOS %{public}s, current local value: %d, macOS value: %d", buf, 0x18u);
            if (v221 < 0) {
              operator delete(*(void **)v218);
            }
          }

          if (v105)
          {
            if ((sub_100478B2C(v9, 32) & 1) == 0)
            {
              sub_10047D50C(v9, 32, 1);
              if (!sub_1004874AC(v9)) {
                sub_100484DC4(v9, 1);
              }
            }
          }
          uint64_t v111 = (*(unsigned __int8 *)v194 >> 2) & 3;
          int v112 = (id)qword_100A19ED8;
          if (os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT))
          {
            sub_100474E18(v9, v218);
            int v113 = v221;
            int v114 = *(unsigned char **)v218;
            int v115 = sub_1004877EC(v9);
            *(_DWORD *)long long buf = 136446722;
            int v116 = v218;
            if (v113 < 0) {
              int v116 = v114;
            }
            *(void *)&uint8_t buf[4] = v116;
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&unsigned char buf[14] = v115;
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&unsigned char buf[20] = v111;
            _os_log_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_DEFAULT, "One Bud ANC mode update for device %{public}s, current value: %d, cloud value %d", buf, 0x18u);
            if (v221 < 0) {
              operator delete(*(void **)v218);
            }
          }

          char v117 = sub_100478B2C(v9, 43);
          uint64_t v49 = a2;
          if (v111) {
            char v118 = v117;
          }
          else {
            char v118 = 1;
          }
          if ((v118 & 1) == 0 && sub_1004877EC(v9) != v111)
          {
            if (qword_1009F80A0 != -1) {
              dispatch_once(&qword_1009F80A0, &stru_1009AFEC8);
            }
            sub_1002859A4((uint64_t)off_1009F8098, v9, 27, v111, 4u);
            __int16 v119 = (id)qword_100A19ED8;
            if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
            {
              sub_100474E18(v9, buf);
              int v120 = buf[23];
              __int16 v121 = *(unsigned char **)buf;
              int v122 = sub_1004877EC(v9);
              *(_DWORD *)long long v218 = 136446466;
              __int16 v123 = buf;
              if (v120 < 0) {
                __int16 v123 = v121;
              }
              *(void *)&v218[4] = v123;
              __int16 v219 = 1024;
              int v220 = v122;
              _os_log_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_DEFAULT, "One Bud ANC mode updated for device %{public}s, new mode %d", v218, 0x12u);
              if ((buf[23] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
            }

            uint64_t v49 = a2;
          }
        }
        if (!v30) {
          operator new();
        }
        uint64_t v124 = v49 + 152 * v200;
        *(_OWORD *)(v30 + 5) = *(_OWORD *)(v124 + 6);
        *(_OWORD *)(v30 + 7) = *(_OWORD *)(v124 + 22);
        int v125 = *(_DWORD *)(v124 + 38);
        if (v125) {
          *((_DWORD *)v30 + 18) = v125;
        }
        uint64_t v126 = v49 + 152 * v200;
        *(_OWORD *)(v30 + 1) = *(_OWORD *)(v126 + 42);
        *((unsigned char *)v30 + 77) = 0;
        __int16 v127 = *(_WORD *)(*v30 + 132);
        *(_DWORD *)((char *)v30 + 78) = *(_DWORD *)(*v30 + 128);
        *((_WORD *)v30 + 41) = v127;
        *(_OWORD *)(v30 + 3) = *(_OWORD *)(v126 + 58);
        if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
          sub_10003B098(&__str, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
        }
        else {
          std::string __str = v222;
        }
        std::string::operator=((std::string *)(v30 + 11), &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        sub_1004776CC(v9, (uint64_t)&v222, 1);
        *((_DWORD *)v30 + 21) = 2;
        if (*(unsigned char *)(a1 + 48)
          && ((unint64_t)*((unsigned __int8 *)v30 + 78) << 40) | ((unint64_t)*((unsigned __int8 *)v30 + 79) << 32) | ((unint64_t)*((unsigned __int8 *)v30 + 80) << 24) | ((unint64_t)*((unsigned __int8 *)v30 + 81) << 16) | ((unint64_t)*((unsigned __int8 *)v30 + 82) << 8) | *((unsigned __int8 *)v30 + 83))
        {
          uint64_t v131 = sub_100019878();
          v205[0] = _NSConcreteStackBlock;
          v205[1] = 3221225472;
          v205[2] = sub_10049EFB0;
          v205[3] = &unk_100998280;
          v205[4] = v30;
          v205[5] = v49;
          int v206 = v200;
          sub_1000197D8(v131, v205);
        }
        for (int j = 0; j != 31; ++j)
        {
          if ((*v14 & (1 << j)) != 0)
          {
            *(void *)long long v218 = 0;
            *(void *)long long buf = 0;
            *(void *)&uint8_t buf[8] = 0;
            sub_100026C30((uint64_t)v218);
            *(void *)long long buf = *(int *)v218;
            *(void *)&uint8_t buf[8] = *(__int16 *)&v218[4];
            sub_100477F4C(v9, 1 << j, 4, buf, 1);
          }
        }
        __int16 v133 = (id)qword_100A19EB8;
        if (os_log_type_enabled(v133, OS_LOG_TYPE_DEFAULT))
        {
          int v134 = *v14;
          if (qword_1009F8090 != -1) {
            dispatch_once(&qword_1009F8090, &stru_1009AFEE8);
          }
          int v135 = sub_1004D6124((uint64_t)off_1009F8088, v9);
          int v136 = *v196;
          *(_DWORD *)long long buf = 67109632;
          *(_DWORD *)&uint8_t buf[4] = v134;
          *(_WORD *)&uint8_t buf[8] = 1024;
          *(_DWORD *)&buf[10] = v135;
          *(_WORD *)&unsigned char buf[14] = 1024;
          *(_DWORD *)&uint8_t buf[16] = v136;
          _os_log_impl((void *)&_mh_execute_header, v133, OS_LOG_TYPE_DEFAULT, "Device service capability details: received service mask %x, device service mask after update %x, blob version %d", buf, 0x14u);
        }

        if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v222.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        uint64_t v128 = 0;
        while (v128 != 5)
        {
          if (*(unsigned __int8 *)(v9 + 129 + v128++))
          {
            if ((unint64_t)(v128 - 1) < 5) {
              goto LABEL_10;
            }
            break;
          }
        }
        uint64_t v130 = (id)qword_100A19ED8;
        if (os_log_type_enabled(v130, OS_LOG_TYPE_ERROR)) {
          sub_10076D9B8(&v211, v212, v130);
        }
      }
      uint64_t v6 = v200 + 1;
    }
    while (v200 + 1 != v195);
  }
  memset(buf, 0, 24);
  int v137 = *(uint64_t **)(a1 + 176);
  if (v137 != *(uint64_t **)(a1 + 184))
  {
    char v198 = 0;
    while (1)
    {
      uint64_t v138 = *v137;
      int v139 = *(_DWORD *)(*v137 + 84);
      if (v139 == 1)
      {
        *(_DWORD *)(v138 + 84) = 3;
        uint64_t v140 = *(void *)v138;
        uint64_t v141 = *(void *)&buf[8];
        if (*(void *)&buf[8] >= *(void *)&buf[16])
        {
          uint64_t v143 = (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3;
          if ((unint64_t)(v143 + 1) >> 61) {
            abort();
          }
          unint64_t v144 = (uint64_t)(*(void *)&buf[16] - *(void *)buf) >> 2;
          if (v144 <= v143 + 1) {
            unint64_t v144 = v143 + 1;
          }
          if (*(void *)&buf[16] - *(void *)buf >= 0x7FFFFFFFFFFFFFF8uLL) {
            unint64_t v145 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v145 = v144;
          }
          if (v145) {
            long long v146 = (char *)sub_1000405F8((uint64_t)&buf[16], v145);
          }
          else {
            long long v146 = 0;
          }
          long long v147 = (uint64_t *)&v146[8 * v143];
          *long long v147 = v140;
          long long v142 = v147 + 1;
          long long v149 = *(char **)buf;
          long long v148 = *(char **)&buf[8];
          if (*(void *)&buf[8] != *(void *)buf)
          {
            do
            {
              uint64_t v150 = *((void *)v148 - 1);
              v148 -= 8;
              *--long long v147 = v150;
            }
            while (v148 != v149);
            long long v148 = *(char **)buf;
          }
          *(void *)long long buf = v147;
          *(void *)&uint8_t buf[8] = v142;
          *(void *)&uint8_t buf[16] = &v146[8 * v145];
          if (v148) {
            operator delete(v148);
          }
        }
        else
        {
          **(void **)&uint8_t buf[8] = v140;
          long long v142 = (void *)(v141 + 8);
        }
        *(void *)&uint8_t buf[8] = v142;
        long long v151 = (id)qword_100A19ED8;
        if (os_log_type_enabled(v151, OS_LOG_TYPE_DEFAULT))
        {
          sub_100474E18(*(void *)v138, &v222);
          long long v152 = (v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
               ? &v222
               : (std::string *)v222.__r_.__value_.__r.__words[0];
          *(_DWORD *)long long v218 = 136446210;
          *(void *)&v218[4] = v152;
          _os_log_impl((void *)&_mh_execute_header, v151, OS_LOG_TYPE_DEFAULT, "Local device info for device %{public}s needs to be pruned", v218, 0xCu);
          if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v222.__r_.__value_.__l.__data_);
          }
        }

        int v139 = *(_DWORD *)(v138 + 84);
      }
      if (!v139) {
        break;
      }
      if (v139 == 2)
      {
        *(_DWORD *)(v138 + 84) = 1;
        long long v153 = (id)qword_100A19ED8;
        if (os_log_type_enabled(v153, OS_LOG_TYPE_DEFAULT))
        {
          sub_100474E18(*(void *)v138, &v222);
          __int16 v154 = (v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
               ? &v222
               : (std::string *)v222.__r_.__value_.__r.__words[0];
          *(_DWORD *)long long v218 = 136446210;
          *(void *)&v218[4] = v154;
          _os_log_impl((void *)&_mh_execute_header, v153, OS_LOG_TYPE_DEFAULT, "Local device info for device %{public}s needs to be updated", v218, 0xCu);
          if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v222.__r_.__value_.__l.__data_);
          }
        }
LABEL_227:
      }
      if (++v137 == *(uint64_t **)(a1 + 184)) {
        goto LABEL_231;
      }
    }
    long long v153 = (id)qword_100A19ED8;
    if (os_log_type_enabled(v153, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(*(void *)v138, &v222);
      long long v155 = (v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? &v222
           : (std::string *)v222.__r_.__value_.__r.__words[0];
      *(_DWORD *)long long v218 = 136446210;
      *(void *)&v218[4] = v155;
      _os_log_impl((void *)&_mh_execute_header, v153, OS_LOG_TYPE_DEFAULT, "Local device info for device %{public}s needs to be sent to cloud", v218, 0xCu);
      if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v222.__r_.__value_.__l.__data_);
      }
    }
    char v198 = 1;
    goto LABEL_227;
  }
  char v198 = 0;
LABEL_231:
  sub_10003AFE8((uint64_t)v213);
  __int16 v156 = *(unsigned __int8 ***)buf;
  if (*(void *)buf != *(void *)&buf[8])
  {
    while (1)
    {
      uint64_t v157 = sub_100370758();
      (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v157 + 104))(v157, *v156);
      if (*(unsigned char *)(a1 + 48)) {
        break;
      }
LABEL_266:
      if (++v156 == *(unsigned __int8 ***)&buf[8]) {
        goto LABEL_267;
      }
    }
    uint64_t v158 = (uint64_t)*v156;
    int v159 = +[CloudPairing sharedInstance];
    __int16 v160 = [v159 cloudClient];
    sub_1004A82EC((unsigned __int8 *)(v158 + 128), &v222);
    if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v161 = &v222;
    }
    else {
      int v161 = (std::string *)v222.__r_.__value_.__r.__words[0];
    }
    __int16 v162 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v161, v191, v192, v193);
    v203[0] = _NSConcreteStackBlock;
    v203[1] = 3221225472;
    v203[2] = sub_10049F580;
    v203[3] = &unk_1009AFC68;
    v203[4] = v158;
    [v160 deleteDeviceRecord:v162 completion:v203];

    if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v222.__r_.__value_.__l.__data_);
    }

    int v163 = +[CloudPairing sharedInstance];
    __int16 v164 = [v163 cloudClient];
    sub_1004A82EC((unsigned __int8 *)(v158 + 128), &v222);
    if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v165 = &v222;
    }
    else {
      int v165 = (std::string *)v222.__r_.__value_.__r.__words[0];
    }
    __int16 v166 = +[NSString stringWithUTF8String:v165];
    v202[0] = _NSConcreteStackBlock;
    v202[1] = 3221225472;
    v202[2] = sub_10049F6C4;
    v202[3] = &unk_1009AFC68;
    v202[4] = v158;
    [v164 deleteMagicSettingsRecord:v166 completion:v202];

    if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v222.__r_.__value_.__l.__data_);
    }

    int v167 = +[CloudPairing sharedInstance];
    __int16 v168 = [v167 cloudClient];
    sub_1004A82EC((unsigned __int8 *)(v158 + 128), &v222);
    if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v169 = &v222;
    }
    else {
      int v169 = (std::string *)v222.__r_.__value_.__r.__words[0];
    }
    __int16 v170 = +[NSString stringWithUTF8String:v169];
    v201[0] = _NSConcreteStackBlock;
    v201[1] = 3221225472;
    v201[2] = sub_10049F808;
    v201[3] = &unk_1009AFC68;
    v201[4] = v158;
    [v168 deleteDeviceSupportInformationRecord:v170 completion:v201];

    if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v222.__r_.__value_.__l.__data_);
    }

    if (!sub_1004764A0(v158))
    {
LABEL_263:
      if (qword_1009F8768 != -1) {
        dispatch_once(&qword_1009F8768, &stru_1009AFE28);
      }
      sub_100611000((uint64_t)off_1009F8760, *v156);
      goto LABEL_266;
    }
    v214[0] = 0;
    sub_10001B8E0(v214);
    int v171 = sub_10017C380(v158 + 128);
    __int16 v172 = (id)qword_100A19ED8;
    int v173 = v172;
    if (v171)
    {
      if (os_log_type_enabled(v172, OS_LOG_TYPE_ERROR))
      {
        sub_100474E18(v158, &v222);
        if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          __int16 v174 = &v222;
        }
        else {
          __int16 v174 = (std::string *)v222.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)long long v218 = 136315394;
        *(void *)&v218[4] = v174;
        __int16 v219 = 1024;
        int v220 = v171;
        _os_log_error_impl((void *)&_mh_execute_header, v173, OS_LOG_TYPE_ERROR, "Magic Pairing disconnect failed for %s when removing magic pairing status: %d", v218, 0x12u);
        goto LABEL_260;
      }
    }
    else if (os_log_type_enabled(v172, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(v158, &v222);
      if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v175 = &v222;
      }
      else {
        int v175 = (std::string *)v222.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long v218 = 136315138;
      *(void *)&v218[4] = v175;
      _os_log_impl((void *)&_mh_execute_header, v173, OS_LOG_TYPE_DEFAULT, "Magic Pairing disconnected for %s as update is from legacy cloud removing magic pairing", v218, 0xCu);
LABEL_260:
      if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v222.__r_.__value_.__l.__data_);
      }
    }

    sub_10001B8AC(v214);
    goto LABEL_263;
  }
LABEL_267:
  sub_10003AF00((uint64_t)v213);
  for (k = *(uint64_t **)(a1 + 176); k != *(uint64_t **)(a1 + 184); ++k)
  {
    uint64_t v177 = *k;
    if (*(_DWORD *)(*k + 84) == 3)
    {
      if (*(char *)(v177 + 111) < 0) {
        operator delete(*(void **)(v177 + 88));
      }
      operator delete();
    }
  }
  sub_10003AFE8((uint64_t)v213);
  if (*(unsigned char *)(a1 + 48))
  {
    v222.__r_.__value_.__s.__data_[0] = 0;
    sub_10001B8E0(&v222);
    sub_10049729C(a1);
    sub_10001B8AC(&v222);
  }
  sub_1004984B4(a1);
  *(unsigned char *)(a1 + 242) = 0;
  __int16 v178 = (id)qword_100A19ED8;
  if (os_log_type_enabled(v178, OS_LOG_TYPE_DEFAULT))
  {
    int v179 = "No";
    if (v198) {
      int v179 = "Yes";
    }
    LODWORD(v222.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)v222.__r_.__value_.__r.__words + 4) = (std::string::size_type)v179;
    _os_log_impl((void *)&_mh_execute_header, v178, OS_LOG_TYPE_DEFAULT, "Magic Device list Update Required ? %{public}s", (uint8_t *)&v222, 0xCu);
  }

  if (v198) {
    sub_100498994(a1);
  }
  if (!*(unsigned char *)(a1 + 240))
  {
    __int16 v180 = (id)qword_100A19ED8;
    if (os_log_type_enabled(v180, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v181 = (uint64_t)(*(void *)(a1 + 184) - *(void *)(a1 + 176)) >> 3;
      LODWORD(v222.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)v222.__r_.__value_.__r.__words + 4) = v181;
      _os_log_impl((void *)&_mh_execute_header, v180, OS_LOG_TYPE_DEFAULT, "Initial Magic Devices Initialized with devices: %lu", (uint8_t *)&v222, 0xCu);
    }

    *(unsigned char *)(a1 + 240) = 1;
    memset(&v222, 0, sizeof(v222));
    if (qword_1009F7EB0 != -1) {
      dispatch_once(&qword_1009F7EB0, &stru_1009AFF08);
    }
    sub_1004B55C0((uint64_t)off_1009F7EA8, (void **)&v222.__r_.__value_.__l.__data_);
    __int16 v182 = (unsigned __int8 **)v222.__r_.__value_.__r.__words[0];
    if (v222.__r_.__value_.__r.__words[0] != v222.__r_.__value_.__l.__size_)
    {
      do
      {
        int v183 = *v182;
        int v184 = (*v182)[960];
        if (_os_feature_enabled_impl())
        {
          if ((sub_10047ECFC((uint64_t)v183) & 2) != 0)
          {
            BOOL v185 = 0;
          }
          else
          {
            if (qword_1009F80A0 != -1) {
              dispatch_once(&qword_1009F80A0, &stru_1009AFEC8);
            }
            BOOL v185 = sub_10028AD00((uint64_t)off_1009F8098, (uint64_t)v183);
          }
        }
        else
        {
          BOOL v185 = 1;
        }
        uint64_t v186 = sub_100475E4C((uint64_t)v183, 0x80000u);
        if (v184) {
          BOOL v187 = 0;
        }
        else {
          BOOL v187 = v186 == 4;
        }
        if (v187 && v185 && !v183[989] && (!v183[988] || sub_100497A84(v186, (uint64_t)v183)))
        {
          __int16 v188 = (id)qword_100A19ED8;
          if (os_log_type_enabled(v188, OS_LOG_TYPE_DEFAULT))
          {
            sub_100474E18((uint64_t)v183, v218);
            int v189 = v218;
            if (v221 < 0) {
              int v189 = *(unsigned char **)v218;
            }
            *(_DWORD *)__int16 v214 = 136446210;
            int v215 = v189;
            _os_log_impl((void *)&_mh_execute_header, v188, OS_LOG_TYPE_DEFAULT, "Send Magic Keys to connected device: %{public}s", v214, 0xCu);
            if (v221 < 0) {
              operator delete(*(void **)v218);
            }
          }

          if (qword_1009F80A0 != -1) {
            dispatch_once(&qword_1009F80A0, &stru_1009AFEC8);
          }
          sub_10028F9A8((uint64_t)off_1009F8098, v183);
        }
        ++v182;
      }
      while (v182 != (unsigned __int8 **)v222.__r_.__value_.__l.__size_);
      __int16 v182 = (unsigned __int8 **)v222.__r_.__value_.__r.__words[0];
    }
    if (v182)
    {
      v222.__r_.__value_.__l.__size_ = (std::string::size_type)v182;
      operator delete(v182);
    }
  }
  if (*(void *)buf)
  {
    *(void *)&uint8_t buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
  return sub_10003AFB4((uint64_t)v213);
}