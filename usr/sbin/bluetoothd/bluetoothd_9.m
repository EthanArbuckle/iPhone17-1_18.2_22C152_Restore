void sub_100538574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  void *v57;
  uint64_t v58;

  a13 = &a20;
  sub_100051568((void ***)&a13);
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  if (*(char *)(v58 - 185) < 0) {
    operator delete(*(void **)(v58 - 208));
  }
  if (*(char *)(v58 - 153) < 0) {
    operator delete(*(void **)(v58 - 176));
  }
  *(void *)(v58 - 176) = v58 - 144;
  sub_100051568((void ***)(v58 - 176));

  _Unwind_Resume(a1);
}

void sub_1005387A0(id a1, BTCloudDevice *a2, NSError *a3)
{
  v4 = a2;
  v5 = a3;
  if (v4)
  {
    v6 = [(BTCloudDevice *)v4 nickname];
    id v7 = [v6 length];

    if (v7)
    {
      v8 = (id)qword_100A19ED8;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = [(BTCloudDevice *)v4 bluetoothAddress];
        v10 = [(BTCloudDevice *)v4 nickname];
        *(_DWORD *)buf = 138412546;
        v19 = v9;
        __int16 v20 = 2112;
        v21 = v10;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Cloud: Magic Settings Update Fetch Name for device: %@ - %@", buf, 0x16u);
      }
      uint64_t v11 = sub_10037345C();
      id v12 = [(BTCloudDevice *)v4 bluetoothAddress];
      sub_10004191C(v16, (char *)[v12 UTF8String]);
      id v13 = [(BTCloudDevice *)v4 nickname];
      sub_10004191C(__p, (char *)[v13 UTF8String]);
      (*(void (**)(uint64_t, void **, void **))(*(void *)v11 + 176))(v11, v16, __p);
      if (v15 < 0) {
        operator delete(__p[0]);
      }

      if (v17 < 0) {
        operator delete(v16[0]);
      }
    }
  }
}

void sub_100538974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_100538AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100538AD8(id a1, BTCloudSoundProfileRecord *a2, NSError *a3)
{
  v4 = a2;
  v5 = a3;
  v6 = qword_100A19E60;
  BOOL v7 = os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT);
  if (!v4 || v5)
  {
    if (v7)
    {
      int v12 = 138412290;
      id v13 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "BTAudioCloudSyncMonitor: Unable to fetch Spatial Profile:Error: %@", (uint8_t *)&v12, 0xCu);
    }
    if (qword_1009F80B0 == -1) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  if (v7)
  {
    int v12 = 138412546;
    id v13 = 0;
    __int16 v14 = 2112;
    char v15 = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "BTAudioCloudSyncMonitor: fetched Spatial Profile:Error: %@ Profile %@", (uint8_t *)&v12, 0x16u);
  }
  v8 = [(BTCloudSoundProfileRecord *)v4 soundProfileData];
  BOOL v9 = v8 == 0;

  if (v9)
  {
    if (qword_1009F80B0 == -1)
    {
LABEL_14:
      sub_100573398((uint64_t)off_1009F80A8, 0);
      goto LABEL_15;
    }
LABEL_16:
    dispatch_once(&qword_1009F80B0, &stru_1009B4528);
    goto LABEL_14;
  }
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009B4528);
  }
  v10 = off_1009F80A8;
  uint64_t v11 = [(BTCloudSoundProfileRecord *)v4 soundProfileData];
  sub_100573398((uint64_t)v10, v11);

LABEL_15:
}

void sub_100538C98(_Unwind_Exception *a1)
{
  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_100538E90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100538FB0(_Unwind_Exception *a1)
{
  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_100539204(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10053948C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  _Unwind_Resume(a1);
}

void sub_1005394E8(uint64_t a1)
{
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v5 = WeakRetained[30];
    v6 = qword_100A19E60;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT);
    if (v5)
    {
      if (v7)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Already Registered cloudkit.xpc service", buf, 2u);
      }
    }
    else
    {
      if (v7)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Register cloudkit.xpc service", buf, 2u);
      }
      xpc_connection_t mach_service = xpc_connection_create_mach_service("com.apple.bluetooth.cloudkit.xpc", *((dispatch_queue_t *)v4 + 43), 1uLL);
      BOOL v9 = (void *)*((void *)v4 + 30);
      *((void *)v4 + 30) = mach_service;

      v10 = (_xpc_connection_s *)*((void *)v4 + 30);
      if (v10)
      {
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472;
        handler[2] = sub_100539698;
        handler[3] = &unk_1009984C0;
        id v12 = v4;
        xpc_connection_set_event_handler(v10, handler);
        xpc_connection_resume(*((xpc_connection_t *)v4 + 30));
      }
      else if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_ERROR))
      {
        sub_100777DE0();
      }
    }
  }
}

void sub_100539674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

id sub_100539698(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _handleConnectionEvent:a2];
}

void sub_10053994C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100539998(id a1, NSString *a2, NSDictionary *a3, BOOL *a4)
{
  uint64_t v5 = a2;
  v6 = a3;
  BOOL v7 = qword_100A19E60;
  if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 138412546;
    BOOL v9 = v5;
    __int16 v10 = 2112;
    uint64_t v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "statedump:        Address: %@ - Dict: %@", (uint8_t *)&v8, 0x16u);
  }
}

void sub_100539BA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10053A25C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  _Unwind_Resume(a1);
}

void sub_10053A79C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10053A9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_10053AA48(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _generateCloudPairingIDWithResponse:*(void *)(a1 + 40) localKeys:*(void *)(a1 + 48) from:*(void *)(a1 + 56) forProtocolID:*(void *)(a1 + 64)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 72) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10053C5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,atomic_uint *a50)
{
  if (a50) {
    sub_1000368F4(a50);
  }

  _Unwind_Resume(a1);
}

void *sub_10053CB38(void *a1)
{
  *a1 = &off_1009B4578;
  uint64_t v2 = (atomic_uint *)a1[1];
  if (v2) {
    sub_1000368F4(v2);
  }
  return a1;
}

void sub_10053CCB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10053CD98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10053D264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Block_object_dispose((const void *)(v18 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_10053D2DC(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v8 = a2;
  BOOL v9 = [a3 objectForKeyedSubscript:@"IDSLocalID"];
  unsigned int v10 = [v9 isEqualToString:*(void *)(a1 + 32)];

  if (v10)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
    uint64_t v11 = qword_100A19E60;
    if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      int v13 = 138412290;
      uint64_t v14 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "MUC - RSA found: %@", (uint8_t *)&v13, 0xCu);
    }
    *a4 = 1;
  }
}

void sub_10053D3FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10053D608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id a25)
{
  sub_10001B8AC(&a13);

  _Block_object_dispose(&a20, 8);
  _Unwind_Resume(a1);
}

void sub_10053D650(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v8 = a2;
  BOOL v9 = [a3 objectForKeyedSubscript:@"IDSLocalID"];
  unsigned int v10 = [v9 isEqualToString:*(void *)(a1 + 32)];

  if (v10)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
    uint64_t v11 = qword_100A19E60;
    if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      int v13 = 138412290;
      uint64_t v14 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "MUC - RSA found: %@", (uint8_t *)&v13, 0xCu);
    }
    *a4 = 1;
  }
}

void sub_10053D770(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10053D8B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_10053D8E4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([v5 isEqualToString:*(void *)(a1 + 32)])
  {
    uint64_t v7 = [v6 objectForKeyedSubscript:@"IRK"];
    uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
    BOOL v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;

    unsigned int v10 = (id)qword_100A19E60;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = [v6 objectForKeyedSubscript:@"IRK"];
      uint64_t v12 = *(void *)(a1 + 32);
      int v13 = 138412546;
      uint64_t v14 = v11;
      __int16 v15 = 2112;
      uint64_t v16 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "MUC - IRK: %@ found for RSA: %@", (uint8_t *)&v13, 0x16u);
    }
  }
}

void sub_10053DA20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10053DC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_10001B8AC(&a13);

  _Unwind_Resume(a1);
}

void sub_10053DF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10001B8AC(va);

  _Unwind_Resume(a1);
}

void sub_10053E11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_10053E158(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _getPairedDeviceForIDSIdentifier:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10053E820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40)
{
  _Block_object_dispose((const void *)(v43 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_10053E930(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v8 = a2;
  BOOL v9 = [a3 objectForKeyedSubscript:@"IDSLocalID"];
  unsigned int v10 = [v9 isEqualToString:*(void *)(a1 + 32)];

  if (v10)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
    uint64_t v11 = qword_100A19E60;
    if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      int v13 = 138412290;
      uint64_t v14 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "MUC - RSA found: %@", (uint8_t *)&v13, 0xCu);
    }
    *a4 = 1;
  }
}

void sub_10053EA50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10053EC34(_Unwind_Exception *a1)
{
  id v5 = v2;

  _Unwind_Resume(a1);
}

void sub_10053ED30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_10053EDA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10053F01C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10053F2DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10053F568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10053F744(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10053F990()
{
}

uint64_t sub_10053F9A4(uint64_t a1)
{
  *(void *)a1 = &off_1009B4498;
  sub_1003BEED0(a1 + 16, *(void **)(a1 + 24));
  return a1;
}

void sub_10053F9EC(uint64_t a1)
{
  *(void *)a1 = &off_1009B4498;
  sub_1003BEED0(a1 + 16, *(void **)(a1 + 24));

  operator delete();
}

void sub_10053FA54(id a1)
{
}

void sub_10053FA98()
{
}

void sub_10053FABC(id a1)
{
}

void sub_10053FB00()
{
}

void sub_10053FB24(id a1)
{
}

void sub_10053FB68()
{
}

void sub_10053FB8C(id a1)
{
}

void sub_10053FBD0()
{
}

void sub_10053FBF4(id a1)
{
}

void sub_10053FC38()
{
}

void sub_10053FC5C(id a1)
{
}

void sub_10053FCA0()
{
}

void sub_10053FCC4(void *a1)
{
  *a1 = &off_1009B4578;
  v1 = (atomic_uint *)a1[1];
  if (v1) {
    sub_1000368F4(v1);
  }

  operator delete();
}

void sub_10053FD30(id a1)
{
}

void sub_10053FD74()
{
}

uint64_t sub_10053FD98(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)a3 = a4;
  *(void *)(a3 + 4) = 1752392040;
  *(_WORD *)(a3 + 12) = 2081;
  *(void *)(a3 + 14) = result;
  *(_WORD *)(a3 + 22) = 2112;
  *(void *)(a3 + 24) = a2;
  return result;
}

void sub_10053FDC4(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_fault_impl(a1, a4, OS_LOG_TYPE_FAULT, a2, a3, 0x20u);
}

uint64_t sub_10053FDE0()
{
  if (qword_100A13850 != -1) {
    dispatch_once(&qword_100A13850, &stru_1009B45A8);
  }
  return byte_100A13858;
}

void sub_10053FE24(id a1)
{
  byte_100A13858 = NSClassFromString(@"CNContactStore") != 0;
}

BOOL sub_10053FE54()
{
  return &_CRIsCarPlayAllowed != 0;
}

uint64_t sub_10053FE68()
{
  if (qword_100A13860 != -1) {
    dispatch_once(&qword_100A13860, &stru_1009B45C8);
  }
  return byte_100A13868;
}

void sub_10053FEAC(id a1)
{
  byte_100A13868 = NSClassFromString(@"_CDContextualKeyPath") != 0;
}

uint64_t sub_10053FEDC()
{
  if (qword_100A13870 != -1) {
    dispatch_once(&qword_100A13870, &stru_1009B45E8);
  }
  return byte_100A13878;
}

void sub_10053FF20(id a1)
{
  byte_100A13878 = NSClassFromString(@"CMDeviceOrientationManager") != 0;
}

BOOL sub_10053FF50()
{
  return &__CTServerConnectionRegisterBlockForNotification != 0;
}

BOOL sub_10053FF64()
{
  return &_ct_green_tea_logger_create != 0;
}

uint64_t sub_10053FF78()
{
  if (qword_100A13880 != -1) {
    dispatch_once(&qword_100A13880, &stru_1009B4608);
  }
  return byte_100A13888;
}

void sub_10053FFBC(id a1)
{
  byte_100A13888 = NSClassFromString(@"MAAsset") != 0;
}

BOOL sub_10053FFEC()
{
  return &_WiFiManagerClientCreate != 0;
}

BOOL sub_100540000()
{
  return &__NETRBClientCreate != 0;
}

BOOL sub_100540014()
{
  return &_PLLogRegisteredEvent != 0;
}

BOOL sub_100540028()
{
  return &_BYSetupAssistantNeedsToRun != 0;
}

BOOL sub_10054003C()
{
  return &TCCAccessRequest != 0;
}

uint64_t sub_100540050()
{
  if (qword_100A13890 != -1) {
    dispatch_once(&qword_100A13890, &stru_1009B4628);
  }
  return byte_100A13898;
}

void sub_100540094(id a1)
{
  byte_100A13898 = NSClassFromString(@"VTPreferences") != 0;
}

void sub_1005400C4(id a1)
{
  byte_100A138A8 = NSClassFromString(@"AWDServerConnection") != 0;
}

uint64_t sub_1005400F4()
{
  if (qword_100A138B0 != -1) {
    dispatch_once(&qword_100A138B0, &stru_1009B4668);
  }
  return byte_100A138B8;
}

void sub_100540138(id a1)
{
  Class v1 = NSClassFromString(@"BMDeviceBluetoothGATTSession");
  byte_100A138B8 = v1 != 0;
  if (!v1 && os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_ERROR)) {
    sub_100778348();
  }
}

uint64_t sub_10054019C()
{
  if (qword_100A138C0 != -1) {
    dispatch_once(&qword_100A138C0, &stru_1009B4688);
  }
  return byte_100A138C8;
}

void sub_1005401E0(id a1)
{
  Class v1 = NSClassFromString(@"BMDeviceBluetoothPowerEnabled");
  byte_100A138C8 = v1 != 0;
  if (!v1 && os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_ERROR)) {
    sub_10077837C();
  }
}

uint64_t sub_100540244()
{
  if (qword_100A138D0 != -1) {
    dispatch_once(&qword_100A138D0, &stru_1009B46A8);
  }
  return byte_100A138D8;
}

void sub_100540288(id a1)
{
  byte_100A138D8 = NSClassFromString(@"BTCloudSoundProfileRecord") != 0;
}

uint64_t sub_1005402B8()
{
  if (qword_100A138E0 != -1) {
    dispatch_once(&qword_100A138E0, &stru_1009B46C8);
  }
  return byte_100A138E8;
}

void sub_1005402FC(id a1)
{
  byte_100A138E8 = NSClassFromString(@"AVAudioSession") != 0;
}

uint64_t sub_10054032C()
{
  if (qword_100A138F0 != -1) {
    dispatch_once(&qword_100A138F0, &stru_1009B46E8);
  }
  return byte_100A138F8;
}

void sub_100540370(id a1)
{
  byte_100A138F8 = NSClassFromString(@"NWConnection") != 0;
}

uint64_t sub_1005403A0()
{
  if (qword_100A13900 != -1) {
    dispatch_once(&qword_100A13900, &stru_1009B4708);
  }
  return byte_100A13908;
}

void sub_1005403E4(id a1)
{
  Class v1 = NSClassFromString(@"RDEstimate");
  byte_100A13908 = v1 != 0;
  if (!v1 && os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_ERROR)) {
    sub_1007783B0();
  }
}

uint64_t sub_100540448()
{
  if (qword_100A13910 != -1) {
    dispatch_once(&qword_100A13910, &stru_1009B4728);
  }
  return byte_100A13918;
}

void sub_10054048C(id a1)
{
  Class v1 = NSClassFromString(@"APSubject");
  byte_100A13918 = v1 != 0;
  if (!v1 && os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_ERROR)) {
    sub_1007783E4();
  }
}

void *sub_1005404F0(void *a1)
{
  uint64_t v2 = (void *)sub_1004C9B7C((uint64_t)a1, "HandsfreeService", 1);
  void *v2 = off_1009B4758;
  sub_100052DA8(v2 + 41);
  a1[49] = 0;
  sub_100052DA8(a1 + 50);
  a1[58] = 0;
  a1[59] = 0;
  a1[62] = 0;
  a1[63] = 0;
  a1[60] = 0;
  a1[61] = a1 + 62;
  sub_100052DA8(a1 + 64);
  if (qword_1009FB058 != -1) {
    dispatch_once(&qword_1009FB058, &stru_1009B4848);
  }
  uint64_t v3 = off_1009FB050;
  a1[49] = off_1009FB050;
  sub_1004C9E90((uint64_t)a1, (uint64_t)v3);
  return a1;
}

void sub_1005405C4(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;
  sub_100052DA4(v6);
  sub_1000486F0(v1 + 488, *v5);
  id v8 = *(void **)(v1 + 464);
  if (v8)
  {
    *(void *)(v1 + 472) = v8;
    operator delete(v8);
  }
  sub_100052DA4(v3);
  sub_100052DA4(v2);
  sub_1004C9C80(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100540630(uint64_t a1, uint64_t a2)
{
  long long v15 = xmmword_1007BF640;
  memset(v17, 0, sizeof(v17));
  char v14 = 0;
  int v13 = 0;
  if (sub_10047B300(a2))
  {
    if (sub_100478F30(a2, &v15, 4u)) {
      int v4 = 4;
    }
    else {
      int v4 = 1;
    }
    goto LABEL_24;
  }
  BOOL v5 = sub_10048A2B0(a2, v17, &v14);
  if (v14) {
    BOOL v6 = v5;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    BOOL v7 = sub_10018BDDC((unsigned __int8 *)v17, 4382, &v13) == 0;
LABEL_20:
    int v9 = v7;
    int v4 = 4 * v9;
    goto LABEL_24;
  }
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009B4868);
  }
  if (!sub_100454734((uint64_t)off_1009F7EE8, a2))
  {
    BOOL v7 = sub_100475E4C(a2, 1u) == 4;
    goto LABEL_20;
  }
  LODWORD(v12) = 0;
  sub_100476250(a2, &v12);
  if ((v12 & 0x1F00) == 0x400) {
    int v8 = 4;
  }
  else {
    int v8 = 1;
  }
  if (v12) {
    int v4 = v8;
  }
  else {
    int v4 = 0;
  }
LABEL_24:
  unsigned int v10 = *(_DWORD *)(a1 + 32);
  uint64_t v16 = 0;
  sub_100026C30((uint64_t)&v16);
  *(void *)&long long v12 = (int)v16;
  *((void *)&v12 + 1) = SWORD2(v16);
  return sub_100477F4C(a2, v10, v4, &v12, 0);
}

uint64_t sub_1005407F4(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  int v10 = 0;
  long long v11 = xmmword_1007BF640;
  memset(v12, 0, sizeof(v12));
  char v9 = 0;
  int v8 = 0;
  *a3 = 0;
  if (sub_10047B300(a2))
  {
    uint64_t result = sub_100478F30(a2, &v11, 4u);
    if ((result & 1) == 0) {
      return result;
    }
LABEL_17:
    *a3 = 1;
    return result;
  }
  if (sub_10048A2B0(a2, v12, &v9))
  {
    if (v9)
    {
      uint64_t result = sub_10018BDDC((unsigned __int8 *)v12, 4382, &v8);
      if (!result) {
        goto LABEL_17;
      }
    }
  }
  uint64_t result = sub_100476250(a2, &v10);
  if (result && (v10 & 0x200000) != 0)
  {
    int v6 = v10 & 0x1F00;
    BOOL v7 = (v10 & 0xFC) != 0x1C && v6 == 1024;
    if (v7 || (v10 & 0x1FFC) == 0x118 || v6 == 1792 && ((v10 & 0xF4) == 4 || (v10 & 0xF8) == 0x10)) {
      goto LABEL_17;
    }
  }
  return result;
}

uint64_t sub_100540954(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  int v5 = a4;
  uint64_t result = sub_1004CC34C(a1, (unsigned __int8 *)a2, a3, a4, a5);
  if (!v5)
  {
    if (sub_10047E300(a2)) {
      sub_10047E3C0(a2);
    }
    if (*(unsigned char *)(a2 + 576)) {
      *(_WORD *)(a2 + 576) = 0;
    }
    if (qword_1009F7EF0 != -1) {
      dispatch_once(&qword_1009F7EF0, &stru_1009B4868);
    }
    uint64_t result = sub_100454734((uint64_t)off_1009F7EE8, a2);
    if (result)
    {
      if (qword_1009F7EF0 != -1) {
        dispatch_once(&qword_1009F7EF0, &stru_1009B4868);
      }
      int v8 = off_1009F7EE8;
      return sub_1004552FC((uint64_t)v8, a2);
    }
  }
  return result;
}

uint64_t sub_100540A30(uint64_t a1, uint64_t a2, char *__s1, unsigned char *a4)
{
  if (__s1 && a4)
  {
    if (!strncmp(__s1, "com.apple.BT.VoiceCommand.State", 0x1FuLL))
    {
      uint64_t result = *(void *)(a1 + 392);
      if (!result) {
        return result;
      }
      sub_10051A2DC(result, a2, (uint64_t)a4);
    }
    else if (!strncmp(__s1, "BT_KEY_ALLOW_SCO_FOR_TBT", 0x18uLL))
    {
      sub_100481544(a2, *a4 != 0);
    }
    return 0;
  }
  else
  {
    int v8 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
      sub_1007689A4(v8);
    }
    return 1;
  }
}

uint64_t sub_100540AFC(uint64_t a1, unint64_t a2, char *__s1, __int16 *a4)
{
  if (!__s1 || !a4)
  {
    char v9 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
      sub_1007689A4(v9);
    }
    return 1;
  }
  if (!strncmp(__s1, "BT_KEY_HFP_AG_ECNR_STATE", 0x18uLL))
  {
    uint64_t v11 = sub_100512018(*(void *)(a1 + 392), a2);
    if (v11)
    {
      int v8 = sub_100276594(v11 + 400);
      goto LABEL_19;
    }
    return 1;
  }
  if (!strncmp(__s1, "BT_KEY_SIRI_EYESFREE_MODE", 0x19uLL))
  {
    if (qword_1009FB130 != -1) {
      dispatch_once(&qword_1009FB130, &stru_1009B4888);
    }
    int v8 = sub_1002DE718(qword_1009FB128, a2);
    goto LABEL_19;
  }
  if (!strncmp(__s1, "BT_KEY_SIRI_AUDIO_STATE", 0x17uLL))
  {
    if (qword_1009FB130 != -1) {
      dispatch_once(&qword_1009FB130, &stru_1009B4888);
    }
    int v8 = sub_1002DE7AC(qword_1009FB128, a2);
    goto LABEL_19;
  }
  if (strncmp(__s1, "BT_KEY_ALLOW_SCO_FOR_TBT", 0x18uLL)) {
    return 1;
  }
  int v8 = sub_10048153C(a2);
LABEL_19:
  int v12 = v8;
  uint64_t result = 0;
  if (v12) {
    __int16 v13 = 49;
  }
  else {
    __int16 v13 = 48;
  }
  *a4 = v13;
  return result;
}

void sub_100540C80(uint64_t a1)
{
  sub_100540CB8(a1);

  operator delete();
}

uint64_t sub_100540CB8(uint64_t a1)
{
  *(void *)a1 = off_1009B4758;
  sub_100052DA4(a1 + 512);
  sub_1000486F0(a1 + 488, *(void **)(a1 + 496));
  uint64_t v2 = *(void **)(a1 + 464);
  if (v2)
  {
    *(void *)(a1 + 472) = v2;
    operator delete(v2);
  }
  sub_100052DA4(a1 + 400);
  sub_100052DA4(a1 + 328);

  return sub_1004C9C80(a1);
}

void sub_100540D3C(id a1)
{
}

void sub_100540D80()
{
}

void sub_100540DA4(id a1)
{
}

void sub_100540DE8()
{
}

void sub_100540E0C(id a1)
{
}

void sub_100540E50()
{
}

void sub_100540FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)BTVCLinkScanner;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_10054112C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005411BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);

  _Unwind_Resume(a1);
}

void sub_100541358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_10054138C(uint64_t a1)
{
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 184), *(id *)(a1 + 40));
  uint64_t v2 = *(void **)(a1 + 48);
  uint64_t v3 = (id *)(*(void *)(a1 + 32) + 192);

  objc_storeStrong(v3, v2);
}

double sub_100541448(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 48);
  if (v2)
  {
    uint64_t v3 = v2;
    dispatch_source_cancel(v3);
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(void **)(v4 + 48);
    *(void *)(v4 + 48) = 0;
  }
  double result = *(double *)(a1 + 40);
  *(double *)(*(void *)(a1 + 32) + 224) = result;
  return result;
}

id sub_100541564(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 9) = 1;
  return [*(id *)(a1 + 32) _activateWithCompletion:*(void *)(a1 + 40)];
}

void sub_10054186C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100541954(uint64_t a1)
{
  return [*(id *)(a1 + 32) _scanEnable:*(unsigned __int8 *)(a1 + 40)];
}

void sub_100541B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100541B98(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = qword_100A19FE8;
  if (os_log_type_enabled((os_log_t)qword_100A19FE8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315138;
    uint64_t v4 = "-[BTVCLinkScanner _scanEnable:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s startRetrier\n", (uint8_t *)&v3, 0xCu);
  }
  [WeakRetained _restartIfNeeded:1];
}

void sub_100541C5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100541CE8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

void sub_100541EE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100541FE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100541FF8(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 72) = 1;
  return result;
}

unsigned char *sub_100542008(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 72) = 0;
  double result = *(unsigned char **)(a1 + 32);
  if (result[9])
  {
    if (!result[11]) {
      return [result _restartIfNeeded];
    }
  }
  return result;
}

void sub_100542100(_Unwind_Exception *a1)
{
  objc_sync_exit(v2);

  _Unwind_Resume(a1);
}

unsigned char *sub_10054211C(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  double result = *(unsigned char **)(a1 + 32);
  if (!result[72])
  {
    return [result _restartIfNeeded];
  }
  return result;
}

id sub_1005426B8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _timeoutTimerFired];
}

void sub_100542884(_Unwind_Exception *exception_object)
{
}

void sub_100542960(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100542A6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100542C18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100542D20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100542EA4(uint64_t *a1)
{
  BOOL v5 = 0;
  sub_1002EA938(*a1, &v5);
  if (!v5 || ((int v2 = *(_DWORD *)(a1[1] + 8)) != 0 ? (v3 = v2 == 2) : (v3 = 1), v3)) {
    operator new();
  }
  if (v2 == 1) {
    operator new();
  }
  uint64_t v4 = (pthread_t *)a1[3];
  if (v4) {
    sub_1002B8298(v4);
  }
}

void sub_100542F70()
{
}

uint64_t sub_100542FA8(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 **)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == 2)
  {
    if (*(unsigned char *)a1 != 5) {
      return 0;
    }
    int v5 = *v1;
    if (v5 != 214)
    {
      if (v5 != 213) {
        return 0;
      }
      int v4 = v1[1];
      goto LABEL_11;
    }
    int v7 = v1[1];
LABEL_17:
    if (v7 == 52 || v7 == 10) {
      return 1;
    }
    if (v7) {
      return 0;
    }
    return 2;
  }
  if (v2 != 3 || *v1 != 83) {
    return 0;
  }
  int v3 = v1[1];
  if (v3 == 214)
  {
    int v7 = v1[2];
    goto LABEL_17;
  }
  if (v3 != 213) {
    return 0;
  }
  int v4 = v1[2];
LABEL_11:
  uint64_t result = 1;
  if (v4 <= 11)
  {
    if (v4)
    {
      if (v4 == 7) {
        return result;
      }
      return 0;
    }
    return 2;
  }
  if (v4 != 12 && v4 != 15) {
    return 0;
  }
  return result;
}

uint64_t sub_100543068(uint64_t a1)
{
  uint64_t v2 = (void *)sub_100283C88(a1, 10);
  void *v2 = off_1009B4930;
  v2[32] = off_1009B4A28;
  v2[33] = off_1009B4A60;
  v2[34] = off_1009B4A88;
  v2[35] = &off_1009B4AC8;
  v2[36] = off_1009B4AE0;
  v2[37] = off_1009B4B10;
  v2[38] = &off_1009B4BC0;
  v2[39] = off_1009B4BD8;
  sub_100052DA8(v2 + 40);
  *(_DWORD *)(a1 + 384) = 0;
  *(void *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  sub_100052DA8(a1 + 448);
  sub_1002B80C0((pthread_cond_t *)(a1 + 512));
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 584) = 0;
  *(_DWORD *)(a1 + 560) = 0;
  *(_WORD *)(a1 + 564) = 0;
  *(void *)(a1 + 576) = a1 + 584;
  return a1;
}

void sub_100543210(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  sub_100052DA4(v4);

  int v6 = *(void **)(v1 + 392);
  if (v6)
  {
    *(void *)(v1 + 400) = v6;
    operator delete(v6);
  }
  sub_100052DA4(v2);
  sub_100283DC8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10054326C(uint64_t a1)
{
  *(void *)a1 = off_1009B4930;
  *(void *)(a1 + 256) = off_1009B4A28;
  *(void *)(a1 + 264) = off_1009B4A60;
  *(void *)(a1 + 272) = off_1009B4A88;
  *(void *)(a1 + 280) = &off_1009B4AC8;
  *(void *)(a1 + 288) = off_1009B4AE0;
  *(void *)(a1 + 296) = off_1009B4B10;
  *(void *)(a1 + 304) = &off_1009B4BC0;
  *(void *)(a1 + 312) = off_1009B4BD8;
  sub_10054D3D4(a1 + 576, *(void **)(a1 + 584));

  sub_1002B812C(a1 + 512);
  sub_100052DA4(a1 + 448);

  uint64_t v2 = *(void **)(a1 + 392);
  if (v2)
  {
    *(void *)(a1 + 400) = v2;
    operator delete(v2);
  }
  sub_100052DA4(a1 + 320);

  return sub_100283DC8(a1);
}

uint64_t sub_10054340C(uint64_t a1)
{
  return sub_10054326C(a1 - 264);
}

uint64_t sub_100543414(uint64_t a1)
{
  return sub_10054326C(a1 - 272);
}

void sub_10054341C(uint64_t a1)
{
  sub_10054326C(a1);

  operator delete();
}

void sub_100543454(uint64_t a1)
{
  sub_10054326C(a1 - 264);

  operator delete();
}

void sub_100543490(uint64_t a1)
{
  sub_10054326C(a1 - 272);

  operator delete();
}

uint64_t sub_1005434CC(uint64_t a1)
{
  os_log_t v2 = os_log_create("com.apple.bluetooth", "HIDProfileDispatch");
  uint64_t v3 = *(void **)(a1 + 416);
  *(void *)(a1 + 416) = v2;

  *(void *)(a1 + 432) = os_signpost_id_make_with_pointer(*(os_log_t *)(a1 + 416), (const void *)a1);
  os_log_t v4 = os_log_create("com.apple.bluetooth", "HIDProfileMutex");
  int v5 = *(void **)(a1 + 424);
  *(void *)(a1 + 424) = v4;

  *(void *)(a1 + 440) = os_signpost_id_make_with_pointer(*(os_log_t *)(a1 + 424), (const void *)a1);
  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_1009B4D30);
  }
  sub_10060C070(off_1009F8760, a1 + 272);
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009B4D50);
  }
  sub_100680938((uint64_t)off_1009F7EB8, a1 + 296, 0);
  if (qword_1009F7F10 != -1) {
    dispatch_once(&qword_1009F7F10, &stru_1009B4D70);
  }
  sub_1000619B8(qword_1009F7F08 + 40, a1 + 312);
  uint64_t v6 = sub_10003FFD4();
  sub_100471048(v6 + 728, a1 + 280);
  uint64_t v7 = sub_10003FFD4();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 152))(v7, a1 + 562);
  uint64_t v8 = sub_10003FFD4();
  sub_10026B638(v8 + 368, a1 + 288);
  uint64_t v9 = *(void *)sub_100035F54();
  if ((*(unsigned int (**)(void))(v9 + 280))())
  {
    uint64_t v10 = sub_10003FFD4();
    sub_10054C6C0(v10 + 1168, a1 + 304);
    uint64_t v11 = sub_10003FFD4();
    (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 200))(v11, a1 + 563);
  }
  else
  {
    int v12 = qword_100A1A018;
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)char v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Low Latency Gaming not eligible for this device", v14, 2u);
    }
  }
  return 0;
}

uint64_t sub_100543718()
{
  char v2 = 0;
  sub_10001B8E0(&v2);
  uint64_t v0 = sub_100159A00(&dword_1007BF678, off_1009B4C08);
  sub_10001B910(&v2);
  if (v0)
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
      sub_100778570();
    }
    uint64_t v0 = 1;
  }
  sub_10001B8AC(&v2);
  return v0;
}

void sub_1005437A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_1005437BC()
{
  char v2 = 0;
  sub_10001B8E0(&v2);
  uint64_t v0 = sub_100159E84();
  if (v0)
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
      sub_1007785D8();
    }
    uint64_t v0 = 1;
  }
  sub_10001B8AC(&v2);
  return v0;
}

void sub_100543834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_100543848(uint64_t a1)
{
  uint64_t v2 = sub_10003FFD4();
  sub_1002C4188(v2 + 368, a1 + 288);
  uint64_t v3 = sub_10003FFD4();
  sub_100471358(v3 + 728, a1 + 280);
  uint64_t v4 = sub_10003FFD4();
  sub_10054D1C0(v4 + 1168, a1 + 304);
  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_1009B4D30);
  }
  sub_10060C1AC((uint64_t)off_1009F8760, a1 + 272);
  return 0;
}

unsigned char *sub_1005438DC(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v6 = (id)qword_100A1A018;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v7 = sub_1004764A0(a2);
    sub_100474E18(a2, __p);
    uint64_t v8 = "Not Connected";
    if (v7) {
      uint64_t v8 = "Connected";
    }
    if (v20 >= 0) {
      uint64_t v9 = __p;
    }
    else {
      uint64_t v9 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136446466;
    v22 = v8;
    __int16 v23 = 2082;
    v24 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}s HID device %{public}s will unpair", buf, 0x16u);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
  }

  char v18 = 0;
  sub_10001B8E0(&v18);
  uint64_t v10 = sub_100157E48(a2 + 128);
  uint64_t v11 = v10;
  if (v10) {
    BOOL v12 = *(unsigned char *)(v10 + 7) != 0;
  }
  else {
    BOOL v12 = 0;
  }
  sub_10001B910(&v18);
  if (!a3 && ((v12 | !sub_1004764A0(a2)) & 1) == 0)
  {
    sub_1002B804C(&v18);
    sub_100543B50(a1, a2);
    sub_10001B910(&v18);
    if (!v11)
    {
LABEL_22:
      *(_WORD *)(a1 + 560) = 0;
      return sub_10001B8AC(&v18);
    }
    __p[0] = 0;
    __p[1] = 0;
    sub_10003AED0((uint64_t)__p, a1 + 448);
    BOOL v13 = sub_10001BCA8((pthread_cond_t *)(a1 + 512), (pthread_mutex_t **)__p, 0x7D0uLL);
    char v14 = qword_100A1A018;
    BOOL v15 = os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT);
    if (v13)
    {
      if (v15)
      {
        *(_WORD *)buf = 0;
        uint64_t v16 = "HID recanted Successfully";
LABEL_20:
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v16, buf, 2u);
      }
    }
    else if (v15)
    {
      *(_WORD *)buf = 0;
      uint64_t v16 = "HID timedout waiting to recant";
      goto LABEL_20;
    }
    sub_10003AFB4((uint64_t)__p);
    goto LABEL_22;
  }
  return sub_10001B8AC(&v18);
}

void sub_100543B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, char a13)
{
}

uint64_t sub_100543B50(uint64_t a1, unint64_t a2)
{
  if ((sub_100058654() & 1) == 0)
  {
    uint64_t v4 = qword_100A1A018;
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_FAULT)) {
      sub_1007786EC(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }
  uint64_t v12 = sub_1004BE120((void *)a1, a2);
  uint64_t v13 = sub_100157E48(a2 + 128);
  if (v13) {
    *(unsigned char *)(v13 + 7) = 1;
  }
  char v14 = (id)qword_100A1A018;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    if (a2)
    {
      sub_100474E18(a2, __p);
      if (v24 >= 0) {
        BOOL v15 = __p;
      }
      else {
        BOOL v15 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136446210;
      v26 = (const char *)v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Unplugging virtual cable to device %{public}s", buf, 0xCu);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      *(_DWORD *)buf = 136446210;
      v26 = "NULL";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Unplugging virtual cable to device %{public}s", buf, 0xCu);
    }
  }

  if (sub_10047B7DC(a2))
  {
    int v16 = sub_10047B7E8(a2);
    if (v16) {
      char v17 = (char *)&unk_1007BF67C;
    }
    else {
      char v17 = (char *)&unk_1007BF67E;
    }
    *(_WORD *)(a1 + 560) = v12;
    if (v16) {
      size_t v18 = 2;
    }
    else {
      size_t v18 = 1;
    }
    int v19 = sub_10015A5BC(v12, 3, v17, v18);
  }
  else
  {
    int v19 = sub_100159FE0(v12, 5u, (uint64_t)sub_100544B50);
  }
  int v20 = v19;
  if (!v19) {
    return 0;
  }
  v21 = (id)qword_100A1A018;
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    if (a2)
    {
      sub_100474E18(a2, __p);
      sub_10077869C();
    }
    else
    {
      sub_100778640(buf, v20, v21);
    }
  }

  return 1;
}

void sub_100543D98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned char *sub_100543DB4(uint64_t a1, unint64_t a2, int a3)
{
  return sub_1005438DC(a1 - 272, a2, a3);
}

uint64_t sub_100543DBC(uint64_t a1, unint64_t a2)
{
  char v16 = 0;
  sub_10001B8E0(&v16);
  __int16 v15 = 0;
  if (sub_10047BAE4(a2))
  {
    uint64_t v4 = (id)qword_100A1A018;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a2, __p);
      uint64_t v5 = v14 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      size_t v18 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Connecting to device %{public}s using Type S connection policy", buf, 0xCu);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v6 = &unk_1009B4CB0;
LABEL_9:

    int v7 = sub_100159FBC(a2 + 128, (uint64_t *)&off_1009B4C90, &v15, v6);
    goto LABEL_26;
  }
  if (sub_10047B8FC(a2) && sub_10047B90C(a2))
  {
    uint64_t v4 = (id)qword_100A1A018;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a2, __p);
      uint64_t v8 = v14 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      size_t v18 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Connecting to device %{public}s using Apple Mouse/TP connection policy", buf, 0xCu);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v6 = &unk_1009B4CE0;
    goto LABEL_9;
  }
  uint64_t v9 = (id)qword_100A1A018;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a2, __p);
    uint64_t v10 = v14 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    size_t v18 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Connecting to device %{public}s using default connection policy", buf, 0xCu);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }

  int v7 = sub_100159FBC(a2 + 128, (uint64_t *)&off_1009B4C90, &v15, 0);
LABEL_26:
  if (v7)
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
      sub_100778764();
    }
    uint64_t v11 = 1;
  }
  else
  {
    sub_1004BE028(a1, a2, v15);
    uint64_t v11 = 0;
  }
  sub_10001B8AC(&v16);
  return v11;
}

void sub_100544084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_10001B8AC(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1005440C4(void *a1, unint64_t a2)
{
  __int16 v12 = 0;
  char v11 = 0;
  sub_10001B8E0(&v11);
  if (!sub_10017ED08(a2 + 128, &v12) && v12 == 97 && sub_1004776C0(a2))
  {
    uint64_t v4 = (id)qword_100A1A018;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a2, __p);
      uint64_t v5 = v14 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      char v16 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Forcing disconnect for unauthorized Type S device %{public}s", buf, 0xCu);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }

    int v6 = sub_10017C380(a2 + 128);
    if (!v6)
    {
      uint64_t v9 = 0;
      goto LABEL_17;
    }
    int v7 = qword_100A1A018;
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Failed to force disconnect unauthorized Type S device with result %{bluetooth:OI_STATUS}u", (uint8_t *)__p, 8u);
    }
    goto LABEL_16;
  }
  int v8 = sub_1004BE120(a1, a2);
  uint64_t v9 = sub_100159FDC(v8);
  if (v9)
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
      sub_1007787CC();
    }
LABEL_16:
    uint64_t v9 = 1;
  }
LABEL_17:
  sub_10001B8AC(&v11);
  return v9;
}

void sub_1005442A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, char a12)
{
  sub_10001B8AC(&a12);
  _Unwind_Resume(a1);
}

void sub_1005442CC(uint64_t a1, uint64_t a2)
{
}

void sub_1005442D4(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    uint64_t v6 = a2;
    sub_10054D584(a1 + 8, v4, (char *)&v6);
    sub_100061554(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_100544360(uint64_t a1, uint64_t a2)
{
}

void sub_100544368(void *a1, int a2, int a3, int a4)
{
  unsigned __int16 v35 = a2;
  int v8 = qword_100A1A018;
  if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)&uint8_t buf[4] = a3;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = a2;
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)&uint8_t buf[16] = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "sendControlOpCfm for op 0x%x with handle 0x%x returned status %d", buf, 0x14u);
  }
  uint64_t v9 = (uint64_t **)a1[73];
  if (!v9)
  {
LABEL_8:
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
      sub_100778834();
    }
    return;
  }
  while (1)
  {
    unsigned int v10 = *((unsigned __int16 *)v9 + 16);
    if (v35 >= v10) {
      break;
    }
LABEL_7:
    uint64_t v9 = (uint64_t **)*v9;
    if (!v9) {
      goto LABEL_8;
    }
  }
  if (v10 < v35)
  {
    ++v9;
    goto LABEL_7;
  }
  if (!sub_1004BE238(a1, v35) || (sub_1000262C4() & 1) == 0)
  {
    char v11 = sub_100409A78((uint64_t)(a1 + 72), &v35);
    __int16 v12 = v11;
    if (*((unsigned char *)v11 + 72))
    {
      int v13 = *((unsigned __int8 *)v11 + 73);
      int v14 = *((unsigned __int8 *)v11 + 74);
      int v15 = *((_DWORD *)v11 + 19);
      char v16 = (char *)v11[10];
      uint64_t v17 = v11[11];
      if (*((unsigned char *)v11 + 73))
      {
        int v18 = sub_10015A4A4(v35, *((unsigned char *)v11 + 74), *((_DWORD *)v11 + 19), 0xFFFF);
        goto LABEL_43;
      }
      *(_OWORD *)buf = 0u;
      unsigned __int16 v20 = v35;
      buf[0] = 5;
      *(_WORD *)&buf[2] = v35;
      *(_WORD *)&uint8_t buf[4] = 255;
      *(_OWORD *)&uint8_t buf[16] = (unint64_t)v17;
      if (v16) {
        BOOL v21 = v17 == 0;
      }
      else {
        BOOL v21 = 1;
      }
      if (!v21) {
        operator new[]();
      }
      buf[24] = 0;
      if (!*((unsigned char *)v11 + 64))
      {
LABEL_28:
        __int16 v33 = 1;
        v28[0] = 5;
        unsigned __int16 v29 = v20;
        __int16 v30 = 255;
        uint64_t v31 = 0;
        uint64_t v32 = v17;
        if (v17) {
          operator new[]();
        }
        LOBYTE(v33) = 0;
        sub_10054D298((uint64_t)(v12 + 4), (uint64_t)v28);
        if ((_BYTE)v33 && v31) {
          operator delete[]();
        }
        if (v14 == 2)
        {
          int v24 = sub_10015A748(v35, 2, v16, 0);
        }
        else
        {
          if (v14 != 3)
          {
            int v18 = 101;
            goto LABEL_43;
          }
          int v24 = sub_10015A5BC(v35, 3, v16, 0);
        }
        int v18 = v24;
        goto LABEL_43;
      }
      int v22 = sub_100542FA8((uint64_t)buf);
      __int16 v23 = qword_100A1A018;
      if (v22 == 2)
      {
        if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)v34 = 0;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "HID Perf Mode is stopping", v34, 2u);
        }
        *((unsigned char *)v12 + 64) = 0;
        goto LABEL_28;
      }
      if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
        sub_100778904();
      }
      int v18 = 104;
LABEL_43:
      v25 = qword_100A1A018;
      if (v18)
      {
        if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
          sub_10077889C();
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
      {
        v26 = "get";
        *(_DWORD *)buf = 136316674;
        if (!v13) {
          v26 = "set";
        }
        *(void *)&uint8_t buf[4] = v26;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v35;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v14;
        *(_WORD *)&buf[24] = 1024;
        *(_DWORD *)&buf[26] = v15;
        *(_WORD *)&buf[30] = 2048;
        uint64_t v37 = v17;
        __int16 v38 = 1040;
        int v39 = v17;
        __int16 v40 = 2098;
        v41 = v16;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Sent queued %s report {handle: 0x%x, type: %d, ID: %d, size: %zu, {%{public}.*P}", buf, 0x38u);
      }
      *((unsigned char *)v12 + 72) = 0;
      v27 = (void *)v12[10];
      if (v27) {
        free(v27);
      }
      v12[10] = 0;
    }
    else
    {
      int v19 = qword_100A1A018;
      if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "sendControlOpCfm No pending reports", buf, 2u);
      }
    }
  }
}

void sub_100544824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a15 && a13) {
    operator delete[]();
  }
  if (!a11) {
    a10 = 1;
  }
  if ((a10 & 1) == 0) {
    operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100544890(void *a1, unsigned int a2, unsigned int a3)
{
  unsigned __int16 v17 = a2;
  uint64_t v4 = (uint64_t **)a1[73];
  if (!v4)
  {
LABEL_7:
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
      sub_100778938();
    }
    return 1;
  }
  uint64_t v6 = (uint64_t)(a1 + 72);
  while (1)
  {
    unsigned int v7 = *((unsigned __int16 *)v4 + 16);
    if (v7 <= a2) {
      break;
    }
LABEL_6:
    uint64_t v4 = (uint64_t **)*v4;
    if (!v4) {
      goto LABEL_7;
    }
  }
  if (v7 < a2)
  {
    ++v4;
    goto LABEL_6;
  }
  uint64_t v9 = sub_100409A78(v6, &v17);
  unsigned int v10 = v9;
  if (!*((unsigned char *)v9 + 9))
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
      sub_1007789E0();
    }
    return 1;
  }
  if (*((unsigned char *)v9 + 8))
  {
    char v11 = qword_100A1A018;
    BOOL v12 = os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v12)
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = a3;
      __int16 v19 = 1024;
      int v20 = v17;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Device already suspended with reason %d for handle 0x%x, do nothing", buf, 0xEu);
      return 0;
    }
  }
  else
  {
    uint64_t v13 = sub_1004BE238(a1, v17);
    uint64_t result = sub_10047B7DC(v13);
    if (result)
    {
      int v14 = (id)qword_100A1A018;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(v13, buf);
        if (v21 >= 0) {
          int v15 = buf;
        }
        else {
          int v15 = *(uint8_t **)buf;
        }
        if (a3 > 3) {
          char v16 = "??";
        }
        else {
          char v16 = off_1009B4E50[a3];
        }
        *(_DWORD *)int v22 = 136446466;
        __int16 v23 = v15;
        __int16 v24 = 2082;
        v25 = v16;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Sending SUSPEND command to device %{public}s due to reason %{public}s", v22, 0x16u);
        if (v21 < 0) {
          operator delete(*(void **)buf);
        }
      }

      if (sub_100159FE0(v17, 3u, (uint64_t)sub_100544B50))
      {
        uint64_t result = os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR);
        if (result)
        {
          sub_100778A48();
          return 0;
        }
      }
      else
      {
        uint64_t result = 0;
        *((unsigned char *)v10 + 8) = 1;
        *((_DWORD *)v10 + 17) = 0;
      }
    }
  }
  return result;
}

void sub_100544B38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100544B50(int a1, int a2, int a3)
{
  if (qword_1009FB3D0 != -1) {
    dispatch_once(&qword_1009FB3D0, &stru_1009B4E10);
  }
  uint64_t v6 = (void *)qword_1009FB3C8;

  sub_100544368(v6, a1, a2, a3);
}

uint64_t sub_100544BCC(void *a1, unsigned int a2, unsigned int a3)
{
  unsigned __int16 v21 = a2;
  uint64_t v3 = (uint64_t **)a1[73];
  if (!v3)
  {
LABEL_7:
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
      sub_100778AB0();
    }
    return 1;
  }
  uint64_t v6 = (uint64_t)(a1 + 72);
  while (1)
  {
    unsigned int v7 = *((unsigned __int16 *)v3 + 16);
    if (v7 <= a2) {
      break;
    }
LABEL_6:
    uint64_t v3 = (uint64_t **)*v3;
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (v7 < a2)
  {
    ++v3;
    goto LABEL_6;
  }
  uint64_t v9 = sub_100409A78(v6, &v21);
  unsigned int v10 = v9;
  if (!*((unsigned char *)v9 + 9))
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
      sub_100778B1C();
    }
    return 1;
  }
  if (!*((unsigned char *)v9 + 8)) {
    return 0;
  }
  uint64_t v11 = sub_1004BE238(a1, v21);
  uint64_t result = sub_10047B7DC(v11);
  if (result)
  {
    BOOL v12 = (id)qword_100A1A018;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(v11, __p);
      uint64_t v13 = v20 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = *((int *)v10 + 17);
      int v15 = v14 > 5 ? "??" : off_1009B4E70[v14];
      char v16 = a3 > 5 ? "??" : off_1009B4E70[a3];
      *(_DWORD *)buf = 136446722;
      __int16 v23 = v13;
      __int16 v24 = 2082;
      v25 = v15;
      __int16 v26 = 2082;
      v27 = v16;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Sending EXIT_SUSPEND command to device %{public}s, reason %{public}s -> %{public}s", buf, 0x20u);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }

    int v17 = sub_100159FE0(v21, 4u, (uint64_t)sub_100544B50);
    int v18 = qword_100A1A018;
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v23) = v17;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Exit Suspend returned status: %{bluetooth:OI_STATUS}u", buf, 8u);
    }
    if (v17)
    {
      uint64_t result = os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR);
      if (result)
      {
        sub_100778B84();
        return 0;
      }
    }
    else
    {
      *((unsigned char *)v10 + 8) = 0;
      *((_DWORD *)v10 + 17) = a3;
      return 335;
    }
  }
  return result;
}

void sub_100544E74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_100544E8C(uint64_t a1, unsigned int a2)
{
  unsigned __int16 v8 = a2;
  uint64_t v2 = *(uint64_t ***)(a1 + 584);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = a1 + 576;
  while (1)
  {
    unsigned int v5 = *((unsigned __int16 *)v2 + 16);
    if (v5 <= a2) {
      break;
    }
LABEL_6:
    uint64_t v2 = (uint64_t **)*v2;
    if (!v2) {
      return 0;
    }
  }
  if (v5 < a2)
  {
    ++v2;
    goto LABEL_6;
  }
  uint64_t v6 = sub_100409A78(v4, &v8);
  if (*(unsigned char *)(a1 + 562)) {
    return 0;
  }
  return *((_DWORD *)v6 + 17) == 2;
}

BOOL sub_100544F08(uint64_t a1, unsigned int a2)
{
  return sub_100544E8C(a1 - 256, a2);
}

unsigned char *sub_100544F10(uint64_t a1, int a2)
{
  char v7 = 0;
  sub_10001B8E0(&v7);
  uint64_t v4 = qword_100A1A018;
  if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v5 = "Off";
    if (a2) {
      unsigned int v5 = "On";
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Screen state changed to %{public}s", buf, 0xCu);
  }
  *(unsigned char *)(a1 + 562) = a2;
  if (a2) {
    sub_10054502C(a1, 1);
  }
  else {
    sub_100545124((void *)a1, 1u);
  }
  return sub_10001B8AC(&v7);
}

void sub_100545010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_10054502C(uint64_t a1, int a2)
{
  uint64_t v2 = *(void **)(a1 + 576);
  uint64_t v3 = (void *)(a1 + 584);
  if (v2 != (void *)(a1 + 584))
  {
    do
    {
      __int16 v6 = *((_WORD *)v2 + 16);
      uint64_t v7 = sub_1004AF8EC();
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_1005469F8;
      v12[3] = &unk_1009AD2E0;
      v12[4] = a1;
      __int16 v14 = v6;
      int v13 = a2;
      sub_100013018(v7, v12);
      unsigned __int16 v8 = (void *)v2[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          unsigned __int16 v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void *)v2[2];
          BOOL v10 = *v9 == (void)v2;
          uint64_t v2 = v9;
        }
        while (!v10);
      }
      uint64_t v2 = v9;
    }
    while (v9 != v3);
  }
  return 1;
}

uint64_t sub_100545124(void *a1, unsigned int a2)
{
  uint64_t v2 = (void *)a1[72];
  uint64_t v3 = a1 + 73;
  if (v2 != a1 + 73)
  {
    do
    {
      sub_100544890(a1, *((unsigned __int16 *)v2 + 16), a2);
      __int16 v6 = (void *)v2[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          __int16 v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v2[2];
          BOOL v8 = *v7 == (void)v2;
          uint64_t v2 = v7;
        }
        while (!v8);
      }
      uint64_t v2 = v7;
    }
    while (v7 != v3);
  }
  return 1;
}

unsigned char *sub_1005451AC(uint64_t a1, int a2)
{
  return sub_100544F10(a1 - 280, a2);
}

uint64_t sub_1005451B4(uint64_t a1)
{
  char v5 = 0;
  sub_10001B8E0(&v5);
  uint64_t v2 = qword_100A1A018;
  if (*(unsigned char *)(a1 + 562))
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
      sub_100778BEC();
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "System can sleep and screen state is off, suspending HID", v4, 2u);
    }
    sub_100545124((void *)a1, 2u);
  }
  sub_10001B8AC(&v5);
  return 1;
}

void sub_100545264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_100545278(uint64_t a1)
{
  return 1;
}

void sub_100545298(uint64_t a1)
{
  uint64_t v2 = dispatch_get_global_queue(0, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100545328;
  block[3] = &unk_100997528;
  block[4] = a1;
  dispatch_sync(v2, block);
}

void sub_100545328(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 576);
  uint64_t v3 = (void *)(v1 + 584);
  if (v2 != (void *)(v1 + 584))
  {
    do
    {
      uint64_t v4 = *((unsigned __int16 *)v2 + 32);
      uint64_t v5 = sub_100017768();
      if (((*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5) & 1) != 0
        || (uint64_t v6 = sub_100017768(), (*(unsigned int (**)(uint64_t))(*(void *)v6 + 480))(v6)))
      {
        uint64_t v7 = sub_100197864(v4);
        uint64_t v8 = sub_100050530();
        (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)v8 + 560))(v8, v7, v4);
        if (!byte_100A13919)
        {
          uint64_t v9 = sub_10003FB34();
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v9 + 1040))(v9, v4, 1, 0))
          {
            BOOL v10 = qword_100A1A018;
            if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR))
            {
              LODWORD(__p[0]) = 67109120;
              HIDWORD(__p[0]) = v4;
              _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed to disable HID Latency Statistics for connection handle 0x%02x", (uint8_t *)__p, 8u);
            }
          }
        }
      }
      uint64_t v11 = sub_100017768();
      if (((*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11) & 1) == 0)
      {
        uint64_t v12 = sub_100017768();
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v12 + 472))(v12)) {
          goto LABEL_32;
        }
      }
      int v13 = sub_100197864(v4);
      if (!v13) {
        goto LABEL_32;
      }
      uint64_t v14 = sub_100197CD8((uint64_t)v13);
      if (qword_1009F7F00 != -1) {
        dispatch_once(&qword_1009F7F00, &stru_1009B4D90);
      }
      int v15 = *(_DWORD *)v14;
      WORD2(__p[0]) = *(_WORD *)(v14 + 4);
      LODWORD(__p[0]) = v15;
      char v16 = (unsigned __int8 *)sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)__p, 1);
      uint64_t v17 = qword_100A1A018;
      if (v16)
      {
        int v18 = (id)qword_100A1A018;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          sub_100474E18((uint64_t)v16, __p);
          __int16 v19 = __p;
          if (v32 < 0) {
            __int16 v19 = (void **)__p[0];
          }
          *(_DWORD *)buf = 136446210;
          v34 = v19;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "PowerManagementEventSystemWillSleep: device %{public}s", buf, 0xCu);
          if (v32 < 0) {
            operator delete(__p[0]);
          }
        }

        int v20 = sub_100040630(v16);
        unsigned __int16 v21 = qword_100A1A018;
        BOOL v22 = os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT);
        if (v20)
        {
          if (v22)
          {
            LODWORD(__p[0]) = 67109120;
            HIDWORD(__p[0]) = v4;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Disabling phy stats for HCI LM Handle 0x%02X", (uint8_t *)__p, 8u);
          }
          uint64_t v23 = sub_10003FB34();
          (*(void (**)(uint64_t, void, uint64_t, unint64_t, uint64_t))(*(void *)v23 + 328))(v23, 0, 1, ((unint64_t)v16[128] << 40) | ((unint64_t)v16[129] << 32) | ((unint64_t)v16[130] << 24) | ((unint64_t)v16[131] << 16) | ((unint64_t)v16[132] << 8) | v16[133], 1);
          v16[1122] = 0;
          __int16 v24 = (id)qword_100A1A018;
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            if (qword_1009F7F00 != -1) {
              dispatch_once(&qword_1009F7F00, &stru_1009B4D90);
            }
            int v25 = sub_1004AC5CC((uint64_t)off_1009F7EF8);
            LODWORD(__p[0]) = 67109120;
            HIDWORD(__p[0]) = v25;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "disablePhyStats, current number of devices %d", (uint8_t *)__p, 8u);
          }

          goto LABEL_32;
        }
        if (v22)
        {
          LOWORD(__p[0]) = 0;
          __int16 v26 = v21;
          v27 = "disablePhyStats: device is not paired!!!";
          goto LABEL_31;
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        __int16 v26 = v17;
        v27 = "PowerManagementEventSystemWillSleep: device is NULL";
LABEL_31:
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, v27, (uint8_t *)__p, 2u);
      }
LABEL_32:
      v28 = (void *)v2[1];
      if (v28)
      {
        do
        {
          unsigned __int16 v29 = v28;
          v28 = (void *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          unsigned __int16 v29 = (void *)v2[2];
          BOOL v30 = *v29 == (void)v2;
          uint64_t v2 = v29;
        }
        while (!v30);
      }
      uint64_t v2 = v29;
    }
    while (v29 != v3);
  }
}

void sub_100545828(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100545844(uint64_t a1)
{
}

void sub_10054584C(uint64_t a1)
{
  uint64_t v2 = dispatch_get_global_queue(0, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1005458DC;
  block[3] = &unk_100997528;
  block[4] = a1;
  dispatch_async(v2, block);
}

void sub_1005458DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 576);
  uint64_t v3 = (void *)(v1 + 584);
  if (v2 != (void *)(v1 + 584))
  {
    do
    {
      uint64_t v4 = *((unsigned __int16 *)v2 + 32);
      uint64_t v5 = sub_100017768();
      if (((*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5) & 1) != 0
        || (uint64_t v6 = sub_100017768(), (*(unsigned int (**)(uint64_t))(*(void *)v6 + 480))(v6)))
      {
        uint64_t v7 = sub_100197864(v4);
        uint64_t v8 = *((unsigned __int16 *)v2 + 68);
        uint64_t v9 = sub_100050530();
        (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, uint64_t))(*(void *)v9 + 544))(v9, v4, v7, 1, v8);
        if (!byte_100A13919)
        {
          uint64_t v10 = sub_10003FB34();
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v10 + 1040))(v10, v4, 1, 1))
          {
            uint64_t v11 = qword_100A1A018;
            if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR))
            {
              LODWORD(__p[0]) = 67109120;
              HIDWORD(__p[0]) = v4;
              _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to enable HID Latency Statistics for connection handle 0x%02x", (uint8_t *)__p, 8u);
            }
          }
        }
      }
      uint64_t v12 = sub_100017768();
      if (((*(uint64_t (**)(uint64_t))(*(void *)v12 + 8))(v12) & 1) != 0
        || (uint64_t v13 = sub_100017768(), (*(unsigned int (**)(uint64_t))(*(void *)v13 + 472))(v13)))
      {
        uint64_t v14 = sub_100197864(v4);
        if (v14)
        {
          uint64_t v15 = sub_100197CD8((uint64_t)v14);
          if (qword_1009F7F00 != -1) {
            dispatch_once(&qword_1009F7F00, &stru_1009B4D90);
          }
          int v16 = *(_DWORD *)v15;
          WORD2(__p[0]) = *(_WORD *)(v15 + 4);
          LODWORD(__p[0]) = v16;
          uint64_t v17 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)__p, 1);
          int v18 = qword_100A1A018;
          if (v17)
          {
            __int16 v19 = (id)qword_100A1A018;
            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
            {
              sub_100474E18(v17, __p);
              int v20 = __p;
              if (v26 < 0) {
                int v20 = (void **)__p[0];
              }
              *(_DWORD *)buf = 136446210;
              v28 = v20;
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "PowerManagementEventSystemWillSleep: device %{public}s", buf, 0xCu);
              if (v26 < 0) {
                operator delete(__p[0]);
              }
            }

            sub_100545CA0(v21, v17);
          }
          else if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "PowerManagementEventSystemWillSleep: device is NULL", (uint8_t *)__p, 2u);
          }
        }
      }
      BOOL v22 = (void *)v2[1];
      if (v22)
      {
        do
        {
          uint64_t v23 = v22;
          BOOL v22 = (void *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          uint64_t v23 = (void *)v2[2];
          BOOL v24 = *v23 == (void)v2;
          uint64_t v2 = v23;
        }
        while (!v24);
      }
      uint64_t v2 = v23;
    }
    while (v23 != v3);
  }
}

void sub_100545C88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100545CA0(uint64_t a1, uint64_t a2)
{
  sub_10003FB34();
  unsigned int v3 = sub_10035425C();
  uint64_t v4 = sub_10003FB34();
  if (sub_100354254(v4) && v3)
  {
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009B4D90);
    }
    unsigned int v5 = sub_1004AC5CC((uint64_t)off_1009F7EF8);
    uint64_t v6 = qword_100A1A018;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT);
    if (v5 >= v3)
    {
      if (v7)
      {
        *(_DWORD *)buf = 67109376;
        unsigned int v11 = v5;
        __int16 v12 = 1024;
        unsigned int v13 = v3;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Max HID GCs reached, not adding current %d max %d", buf, 0xEu);
      }
    }
    else
    {
      if (v7)
      {
        *(_DWORD *)buf = 67109376;
        unsigned int v11 = v5;
        __int16 v12 = 1024;
        unsigned int v13 = v3;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "HID GCs connected, enabling stat, current number of devices %d max %d", buf, 0xEu);
      }
      uint64_t v8 = dispatch_get_global_queue(0, 0);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10054C348;
      block[3] = &unk_100997528;
      block[4] = a2;
      dispatch_async(v8, block);
    }
  }
}

void sub_100545E64(uint64_t a1)
{
}

uint64_t sub_100545E6C(void *a1, unint64_t a2)
{
  uint64_t result = sub_1004BE120(a1, a2);
  unsigned __int16 v6 = result;
  if (result)
  {
    unsigned int v5 = sub_100409A78((uint64_t)(a1 + 72), &v6);
    return (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)*v5 + 24))(*v5, a2);
  }
  return result;
}

void sub_100545EDC(uint64_t a1, unsigned __int16 a2, uint64_t a3, unsigned int a4)
{
  unsigned __int16 v8 = a2;
  BOOL v7 = sub_100409A78(a1 + 576, &v8);
  sub_100545F68(a1);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)*v7 + 64))(*v7, a3, a4);
  sub_100545FF8(a1);
}

void sub_100545F68(uint64_t a1)
{
  if (IsAppleInternalBuild())
  {
    uint64_t v2 = *(id *)(a1 + 416);
    unsigned int v3 = v2;
    os_signpost_id_t v4 = *(void *)(a1 + 432);
    if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
    {
      *(_WORD *)unsigned int v5 = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "HIDInterruptData", (const char *)&unk_1009331C6, v5, 2u);
    }
  }
}

void sub_100545FF8(uint64_t a1)
{
  if (IsAppleInternalBuild())
  {
    uint64_t v2 = *(id *)(a1 + 416);
    unsigned int v3 = v2;
    os_signpost_id_t v4 = *(void *)(a1 + 432);
    if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
    {
      *(_WORD *)unsigned int v5 = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_INTERVAL_END, v4, "HIDInterruptData", (const char *)&unk_1009331C6, v5, 2u);
    }
  }
}

void sub_100546088(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100157C18(a2);
  if (v3)
  {
    uint64_t v4 = v3;
    if (*(unsigned char *)(v3 + 76))
    {
      unsigned int v5 = qword_100A1A018;
      if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = *(unsigned __int8 *)(v4 + 77);
        int v7 = *(unsigned __int8 *)(v4 + 76);
        int v11 = 67109376;
        int v12 = v6;
        __int16 v13 = 1024;
        int v14 = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Could not send pending control channel operation 0x%x due to pending operation 0x%x", (uint8_t *)&v11, 0xEu);
      }
    }
    else
    {
      unsigned __int16 v8 = (unsigned char *)(v3 + 77);
      if (*(unsigned char *)(v3 + 77) == 5)
      {
        uint64_t v9 = qword_100A1A018;
        if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
        {
          int v10 = *v8;
          int v11 = 67109376;
          int v12 = a2;
          __int16 v13 = 1024;
          int v14 = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Sending pending control virtual cable unpluged for handle 0x%x, queued operation 0x%x", (uint8_t *)&v11, 0xEu);
        }
        if (sub_100159FE0(a2, 5u, (uint64_t)sub_100544B50))
        {
          if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
            sub_100778C20();
          }
        }
        else
        {
          *v8 &= 0xFAu;
        }
      }
    }
  }
}

uint64_t sub_10054622C(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  unsigned __int16 v14 = a2;
  int v10 = sub_100409A78(a1 + 576, &v14);
  int v11 = qword_100A1A018;
  BOOL v12 = os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT);
  if (v12)
  {
    *(_DWORD *)buf = 67109376;
    int v16 = v14;
    __int16 v17 = 1024;
    int v18 = a3;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "getReportResponse for handle 0x%x success %d", buf, 0xEu);
  }
  sub_100546088(v12, v14);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)*v10 + 72))(*v10, a3, a4, a5, a6);
}

uint64_t sub_100546350(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  unsigned __int16 v11 = a2;
  int v6 = sub_100409A78(a1 + 576, &v11);
  int v7 = qword_100A1A018;
  BOOL v8 = os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    *(_DWORD *)buf = 67109376;
    int v13 = v11;
    __int16 v14 = 1024;
    int v15 = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "setReportResponse for handle 0x%x success %d", buf, 0xEu);
  }
  if (*((unsigned char *)v6 + 9))
  {
    sub_100546088(v8, v11);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)*v6 + 80))(*v6, a3, a4);
  }
  else
  {
    int v10 = qword_100A1A018;
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      int v13 = a3;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Device start pending on setReportResponse - starting device with status %d", buf, 8u);
    }
    *((unsigned char *)v6 + 9) = 1;
    return (*(uint64_t (**)(void))(*(void *)*v6 + 32))();
  }
}

uint64_t sub_1005464E8(uint64_t a1, int a2)
{
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, a1 + 320);
  uint64_t v4 = *(void **)(a1 + 576);
  if (v4 == (void *)(a1 + 584))
  {
LABEL_9:
    uint64_t v8 = 0;
  }
  else
  {
    while (*((unsigned __int16 *)v4 + 32) != a2)
    {
      unsigned int v5 = (void *)v4[1];
      if (v5)
      {
        do
        {
          int v6 = v5;
          unsigned int v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          int v6 = (void *)v4[2];
          BOOL v7 = *v6 == (void)v4;
          uint64_t v4 = v6;
        }
        while (!v7);
      }
      uint64_t v4 = v6;
      if (v6 == (void *)(a1 + 584)) {
        goto LABEL_9;
      }
    }
    uint64_t v8 = *((unsigned __int16 *)v4 + 16);
  }
  sub_10003AFB4((uint64_t)v10);
  return v8;
}

uint64_t sub_100546590(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 576);
  if (v2 == (void *)(a1 + 584)) {
    return 0;
  }
  while (v2[5] != a2)
  {
    uint64_t v3 = (void *)v2[1];
    if (v3)
    {
      do
      {
        uint64_t v4 = v3;
        uint64_t v3 = (void *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        uint64_t v4 = (void *)v2[2];
        BOOL v5 = *v4 == (void)v2;
        uint64_t v2 = v4;
      }
      while (!v5);
    }
    uint64_t v2 = v4;
    if (v4 == (void *)(a1 + 584)) {
      return 0;
    }
  }
  return *((unsigned __int16 *)v2 + 16);
}

uint64_t sub_1005465F4(void *a1, uint64_t a2, unsigned __int16 a3)
{
  unsigned __int16 v25 = a3;
  BOOL v5 = sub_100409A78((uint64_t)(a1 + 72), &v25);
  if (!sub_10047B300(a2))
  {
    int v6 = qword_100A1A018;
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_FAULT)) {
      sub_100778CF4(v6, v7, v8, v9, v10, v11, v12, v13);
    }
  }
  __int16 v14 = (id)qword_100A1A018;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    sub_100475F84(a2, (uint64_t)&__p);
    int v15 = v24 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Performing HID handshake for device %{public}s", buf, 0xCu);
    if (SHIBYTE(v24) < 0) {
      operator delete(__p);
    }
  }

  if ((sub_1000262C4() & 1) == 0
    && !(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)*v5 + 16))(*v5, a2))
  {
    return 1;
  }
  *(_OWORD *)buf = xmmword_1007BF750;
  __p = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  if (!sub_10047AE08(a2, (uint64_t)buf, 0x20Eu, &__p)) {
    goto LABEL_24;
  }
  __int16 v17 = (long long *)__p;
  int v16 = v23;
  BOOL v18 = (char *)v23 - (unsigned char *)__p == 16 && (*((_WORD *)__p + 1) == 1) & *((unsigned char *)__p + 8);
  while (v17 != v16)
  {
    long long v21 = *v17;
    sub_1002D5394(&v21);
    ++v17;
    int v16 = v23;
  }
  if (v18)
  {
    uint64_t v19 = sub_10015A66C(v25, 1);
    if (v19)
    {
      if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
        sub_100778C8C();
      }
      uint64_t v19 = 1;
    }
  }
  else
  {
LABEL_24:
    sub_100546880(a1, v25);
    uint64_t v19 = 0;
  }
  if (__p)
  {
    uint64_t v23 = (long long *)__p;
    operator delete(__p);
  }
  return v19;
}

void sub_100546848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100546880(void *a1, unsigned int a2)
{
  unsigned __int16 v11 = a2;
  uint64_t v4 = sub_1004BE238(a1, a2);
  if (sub_10047B8FC(v4) && (sub_10047B90C(v4) & 1) == 0 && sub_10047B918(v4))
  {
    if (sub_10047B8F0(v4))
    {
      BOOL v5 = qword_100A1A018;
      if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Delaying setting sniff rate for 250ms", buf, 2u);
      }
      uint64_t v6 = sub_1004AF8EC();
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_100548DBC;
      v8[3] = &unk_1009A0B58;
      v8[4] = a1;
      __int16 v9 = a2;
      sub_1004AFF58(v6, 250, v8);
    }
    else
    {
      sub_100548C48((uint64_t)a1, a2);
    }
  }
  else
  {
    uint64_t v7 = sub_100409A78((uint64_t)(a1 + 72), &v11);
    *((unsigned char *)v7 + 9) = 1;
    (*(void (**)(uint64_t))(*(void *)*v7 + 32))(*v7);
  }
}

unsigned char *sub_1005469F8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  char v4 = 0;
  sub_10001B8E0(&v4);
  sub_100544BCC(v2, *(unsigned __int16 *)(a1 + 44), *(_DWORD *)(a1 + 40));
  return sub_10001B8AC(&v4);
}

void sub_100546A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_100546A5C(void *a1, unint64_t a2, int a3, int a4, char a5)
{
  int v10 = sub_1004BDDAC((uint64_t)a1, a2);
  if (a4) {
    int v11 = 0;
  }
  else {
    int v11 = v10;
  }
  if ((v11 & 1) == 0)
  {
    uint64_t v12 = qword_100A1A018;
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Denying connection attempt", (uint8_t *)__p, 2u);
    }
  }
  if (sub_10047BAE4(a2))
  {
    uint64_t v13 = (id)qword_100A1A018;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a2, __p);
      __int16 v14 = v22 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      uint64_t v24 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Accepting connection from device %{public}s using Type S connection policy", buf, 0xCu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t result = sub_100159FD8(a3, (uint64_t)&off_1009B4C90, &unk_1009B4CB0, v11);
  }
  else if (sub_10047B8FC(a2) && sub_10047B90C(a2))
  {
    int v16 = (id)qword_100A1A018;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a2, __p);
      __int16 v17 = v22 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      uint64_t v24 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Accepting connection from device %{public}s using Apple Mouse/TP connection policy", buf, 0xCu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t result = sub_100159FD8(a3, (uint64_t)&off_1009B4C90, &unk_1009B4CE0, v11);
  }
  else
  {
    BOOL v18 = (id)qword_100A1A018;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a2, __p);
      uint64_t v19 = v22 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      uint64_t v24 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Accepting connection from device %{public}s using default connection policy", buf, 0xCu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t result = sub_100159FD8(a3, (uint64_t)&off_1009B4C90, 0, v11);
  }
  char v20 = v11 ^ 1;
  if (result) {
    char v20 = 1;
  }
  if ((v20 & 1) == 0)
  {
    uint64_t result = sub_1004BE028((uint64_t)a1, a2, a3);
    if ((a5 & 1) == 0) {
      sub_1004BD554(a1, a2);
    }
  }
  return result;
}

void sub_100546D74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100546D94(void *a1, uint64_t a2, int a3)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009B4D90);
  }
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  uint64_t v6 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)__p, 1);
  uint64_t v7 = (id)qword_100A1A018;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(v6, __p);
    uint64_t v8 = v15 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    __int16 v17 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Received incoming connection attempt from HID device %{public}s", buf, 0xCu);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }

  if (!sub_10047B300(v6))
  {
    if (sub_1004BE000((uint64_t)a1))
    {
      int v10 = (id)qword_100A1A018;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(v6, __p);
        if (v15 >= 0) {
          int v11 = __p;
        }
        else {
          int v11 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136446210;
        __int16 v17 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Outgoing attempt already exists, withdraw outgoing attempt for device %{public}s", buf, 0xCu);
        if (v15 < 0) {
          operator delete(__p[0]);
        }
      }

      sub_1004BD6C8((uint64_t)a1, v6, 314);
    }
    uint64_t v12 = (id)qword_100A1A018;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(v6, __p);
      uint64_t v13 = v15 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      __int16 v17 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Delaying response to incoming HID connection request for device %{public}s as SDP is missing", buf, 0xCu);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
    }

    if (qword_1009FB698 != -1) {
      dispatch_once(&qword_1009FB698, &stru_1009B4DB0);
    }
    sub_1004C8250(qword_1009FB690, v6);
  }
  return sub_100546A5C(a1, v6, a3, 0, 0);
}

void sub_100547074(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100547094(void *a1, int a2, uint64_t a3)
{
  __int16 v12 = a2;
  uint64_t v6 = sub_1004BE238(a1, a2);
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = (id)qword_100A1A018;
    __int16 v9 = v8;
    if (a3)
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        sub_100474E18(v7, buf);
        sub_100764E04();
      }

      if (qword_1009F8070 != -1) {
        dispatch_once(&qword_1009F8070, &stru_1009B4DD0);
      }
      int v10 = sub_1004E2340((uint64_t)off_1009F8068, a3, 20000);
      sub_1004BD6C8((uint64_t)a1, v7, v10);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(v7, v18);
      int v11 = v19 >= 0 ? v18 : *(uint8_t **)v18;
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = a2;
      __int16 v14 = 2082;
      char v15 = v11;
      __int16 v16 = 1024;
      int v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "HID connection on handle 0x%x for device %{public}s with status %d", buf, 0x18u);
      if (v19 < 0) {
        operator delete(*(void **)v18);
      }
    }

    sub_1004BD6C8((uint64_t)a1, v7, 0);
  }
  if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
    sub_100778D6C();
  }
}

void sub_100547BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  _Unwind_Resume(a1);
}

void sub_100547CA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4 = qword_100A1A018;
  if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Overriding connection packet type to single slot", v11, 2u);
  }
  if (sub_10018EF4C(a3, 13080, v5, v6, v7, v8, v9, v10))
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
      sub_100778ED8();
    }
  }
}

uint64_t sub_100547D54(uint64_t a1)
{
  uint64_t v2 = qword_100A1A018;
  if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int16 *)(a1 + 40);
    int v7 = 136315394;
    uint64_t v8 = "connectionCallback_block_invoke";
    __int16 v9 = 1024;
    int v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s -- Enable HID Latency Statistics event for connection handle 0x%02x", (uint8_t *)&v7, 0x12u);
  }
  uint64_t v4 = sub_10003FB34();
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v4 + 1040))(v4, *(unsigned __int16 *)(a1 + 40), 1, 1);
  if (result)
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
      sub_100778F40();
    }
    uint64_t result = sub_100050530();
    if (result)
    {
      uint64_t v6 = sub_100050530();
      return (*(uint64_t (**)(uint64_t, void, void))(*(void *)v6 + 536))(v6, *(void *)(a1 + 32), *(unsigned __int16 *)(a1 + 40));
    }
  }
  return result;
}

uint64_t sub_100547EC8()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 3392);

  return v0();
}

void sub_100547F2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = qword_100A1A018;
  if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Setting active mode check timer", buf, 2u);
  }
  dispatch_time_t v5 = dispatch_time(0, 6000000000);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10054AA70;
  v6[3] = &unk_100998260;
  v6[4] = a1;
  v6[5] = a2;
  dispatch_after(v5, (dispatch_queue_t)&_dispatch_main_q, v6);
}

void sub_100548010(uint64_t a1)
{
}

void sub_100548018(uint64_t a1)
{
  uint64_t v2 = qword_100A1A018;
  BOOL v3 = os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Evaluating Low Latency Gaming Topology", buf, 2u);
  }
  if (*(unsigned char *)(a1 + 563))
  {
    *(void *)buf = 0;
    v53 = 0;
    v54 = 0;
    v51[0] = 0;
    v51[1] = 0;
    sub_10003AED0((uint64_t)v51, a1 + 320);
    uint64_t v4 = *(void **)(a1 + 576);
    if (v4 != (void *)(a1 + 584))
    {
      dispatch_time_t v5 = v53;
      do
      {
        if (v5 >= (unsigned __int16 *)v54)
        {
          uint64_t v6 = *(unsigned __int16 **)buf;
          uint64_t v7 = (uint64_t)v5 - *(void *)buf;
          if ((uint64_t)v5 - *(void *)buf <= -3) {
            abort();
          }
          uint64_t v8 = v7 >> 1;
          if ((unint64_t)&v54[-*(void *)buf] <= (v7 >> 1) + 1) {
            uint64_t v9 = v8 + 1;
          }
          else {
            uint64_t v9 = (uint64_t)&v54[-*(void *)buf];
          }
          if ((unint64_t)&v54[-*(void *)buf] >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v10 = v9;
          }
          if (v10)
          {
            int v11 = (char *)sub_1002C5544((uint64_t)&v54, v10);
            uint64_t v6 = *(unsigned __int16 **)buf;
            dispatch_time_t v5 = v53;
          }
          else
          {
            int v11 = 0;
          }
          __int16 v12 = &v11[2 * v8];
          *(_WORD *)__int16 v12 = *((_WORD *)v4 + 16);
          uint64_t v13 = (unsigned __int16 *)(v12 + 2);
          while (v5 != v6)
          {
            __int16 v14 = *--v5;
            *((_WORD *)v12 - 1) = v14;
            v12 -= 2;
          }
          *(void *)buf = v12;
          v53 = v13;
          v54 = &v11[2 * v10];
          if (v6) {
            operator delete(v6);
          }
          dispatch_time_t v5 = v13;
        }
        else
        {
          *v5++ = *((_WORD *)v4 + 16);
        }
        v53 = v5;
        char v15 = (void *)v4[1];
        if (v15)
        {
          do
          {
            __int16 v16 = v15;
            char v15 = (void *)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            __int16 v16 = (void *)v4[2];
            BOOL v17 = *v16 == (void)v4;
            uint64_t v4 = v16;
          }
          while (!v17);
        }
        uint64_t v4 = v16;
      }
      while (v16 != (void *)(a1 + 584));
    }
    sub_10003AFE8((uint64_t)v51);
    BOOL v18 = *(unsigned __int16 **)buf;
    char v19 = v53;
    if (*(unsigned __int16 **)buf == v53)
    {
      int v21 = 0;
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      int v21 = 0;
      do
      {
        uint64_t v22 = sub_1004BE238((void *)a1, *v18);
        uint64_t v23 = v22;
        if (v22)
        {
          if (sub_100476054(v22) == 26)
          {
            ++v21;
            if (sub_10047B864(v23)) {
              unint64_t v20 = v23;
            }
          }
        }
        ++v18;
      }
      while (v18 != v19);
    }
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009B4D50);
    }
    unsigned __int16 v25 = sub_10004034C((uint64_t)off_1009F7EB8);
    uint64_t v26 = (uint64_t)[v25 countByEnumeratingWithState:&v47 objects:v57 count:16];
    uint64_t v27 = v26;
    uint64_t v45 = a1;
    v28 = CBStackConnectDeviceRequest;
    int v29 = 0;
    if (v26)
    {
      v46 = 0;
      uint64_t v30 = *(void *)v48;
      do
      {
        uint64_t v31 = 0;
        do
        {
          if (*(void *)v48 != v30) {
            objc_enumerationMutation(v25);
          }
          char v32 = *(void **)(*((void *)&v47 + 1) + 8 * v31);
          if (sub_10054AD24(v26, v32))
          {
            ++v21;
            if (!v20)
            {
              id v33 = v32;

              v46 = v33;
              unint64_t v20 = 0;
              v28 = CBStackConnectDeviceRequest;
            }
          }
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009B4E30);
          }
          uint64_t v26 = sub_1006C420C((uint64_t)v28[95].isa, v32);
          v29 += v26;
          ++v31;
        }
        while (v27 != v31);
        uint64_t v26 = (uint64_t)[v25 countByEnumeratingWithState:&v47 objects:v57 count:16];
        uint64_t v27 = v26;
      }
      while (v26);
    }
    else
    {
      v46 = 0;
    }

    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B4E30);
    }
    int v34 = sub_1006C7E14((uint64_t)off_1009F7ED8);
    unsigned int v35 = v29 - v21 - v34 + ((v53 - *(_DWORD *)buf) >> 1);
    if (v21 != 1)
    {
      v36 = qword_100A1A018;
      if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v55 = 67109120;
        int v56 = v21;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Low Latency Gaming not eligible, due to %d connected game controllers", v55, 8u);
      }
    }
    if (v35 >= 3u)
    {
      uint64_t v37 = qword_100A1A018;
      if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v55 = 67109120;
        int v56 = v35;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Low Latency Gaming not eligible, due to %d non-GC HIDs", v55, 8u);
      }
      __int16 v38 = v46;
      if (!v20)
      {
LABEL_74:
        if (!v38) {
          goto LABEL_77;
        }
        goto LABEL_75;
      }
LABEL_73:
      *(_WORD *)(v45 + 564) = 0;
      sub_10054B1D8((void *)v45, v20, 0);
      goto LABEL_74;
    }
    __int16 v38 = v46;
    if (v20)
    {
      if (v21 != 1) {
        goto LABEL_73;
      }
      *(_WORD *)(v45 + 564) = sub_1004BE120((void *)v45, v20);
      sub_10054B1D8((void *)v45, v20, 1);
    }
    if (!v46) {
      goto LABEL_77;
    }
    if (v21 == 1)
    {
      id v39 = v46;
      __int16 v40 = *(void **)(v45 + 568);
      *(void *)(v45 + 568) = v39;
      int v41 = 1;
LABEL_76:

      __int16 v38 = v46;
      sub_10054B480(v42, v46, v41);
LABEL_77:

      sub_10003AFB4((uint64_t)v51);
      if (*(void *)buf)
      {
        v53 = *(unsigned __int16 **)buf;
        operator delete(*(void **)buf);
      }
      return;
    }
LABEL_75:
    int v41 = 0;
    __int16 v40 = *(void **)(v45 + 568);
    *(void *)(v45 + 568) = 0;
    goto LABEL_76;
  }
  if (*(_WORD *)(a1 + 564))
  {
    unint64_t v24 = sub_1004BE238((void *)a1, *(unsigned __int16 *)(a1 + 564));
    sub_10054B1D8((void *)a1, v24, 0);
    *(_WORD *)(a1 + 564) = 0;
  }
  else
  {
    uint64_t v43 = *(void **)(a1 + 568);
    if (v43)
    {
      sub_10054B480(v3, v43, 0);
      v44 = *(void **)(a1 + 568);
      *(void *)(a1 + 568) = 0;
    }
  }
}

void sub_1005485AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22)
{
  sub_10003AFB4((uint64_t)&a19);
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_100548634(uint64_t a1)
{
  return sub_10054863C(*(os_unfair_lock_s **)(a1 + 32));
}

void *sub_10054863C(os_unfair_lock_s *a1)
{
  v54 = &v54;
  v55 = (void **)&v54;
  uint64_t v56 = 0;
  v53[0] = 0;
  v53[1] = 0;
  sub_10003AED0((uint64_t)v53, (uint64_t)&a1[80]);
  uint64_t v2 = *(os_unfair_lock_s **)&a1[144]._os_unfair_lock_opaque;
  if (v2 != &a1[146])
  {
    uint64_t v3 = v56;
    uint64_t v4 = v54;
    do
    {
      dispatch_time_t v5 = operator new(0x18uLL);
      v5[8] = v2[8]._os_unfair_lock_opaque;
      *(void *)dispatch_time_t v5 = v4;
      *((void *)v5 + 1) = &v54;
      *((void *)v4 + 1) = v5;
      ++v3;
      v54 = v5;
      uint64_t v56 = v3;
      uint64_t v6 = *(os_unfair_lock_s **)&v2[2]._os_unfair_lock_opaque;
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = *(os_unfair_lock_s **)&v6->_os_unfair_lock_opaque;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = *(os_unfair_lock_s **)&v2[4]._os_unfair_lock_opaque;
          BOOL v8 = *(void *)&v7->_os_unfair_lock_opaque == (void)v2;
          uint64_t v2 = v7;
        }
        while (!v8);
      }
      uint64_t v2 = v7;
      uint64_t v4 = v5;
    }
    while (v7 != &a1[146]);
  }
  sub_10003AFE8((uint64_t)v53);
  uint64_t v9 = v55;
  if (v55 == (void **)&v54)
  {
    char v11 = 0;
    char v10 = 0;
    char v38 = 0;
    char v32 = 0;
    char v35 = 0;
    char v36 = 1;
  }
  else
  {
    char v32 = 0;
    char v38 = 0;
    char v10 = 0;
    char v11 = 0;
    char v35 = 0;
    char v36 = 1;
    do
    {
      uint64_t v12 = sub_1004BE238(a1, *((unsigned __int16 *)v9 + 8));
      uint64_t v13 = v12;
      if (v12)
      {
        int v14 = sub_100487D44(v12);
        switch(v14)
        {
          case 12:
            ++v35;
            break;
          case 18:
            ++v11;
            break;
          case 24:
            ++v10;
            break;
        }
        char v15 = sub_10047B7F4(v13);
        __int16 v16 = sub_100487D44(v13);
        ++v32;
        v38 += v15;
        if ((unsigned __int16)((24576 * v16) | ((unsigned __int16)(-21845 * v16) >> 3)) >= 0xAABu
          && !sub_10047B7F4(v13)
          || (__int16 v17 = sub_100487D44(v13),
              (unsigned __int16)((24576 * v17) | ((unsigned __int16)(-21845 * v17) >> 3)) >= 0xAABu)
          && sub_100487D44(v13) != 12
          && sub_10047B7F4(v13))
        {
          char v36 = 0;
        }
      }
      uint64_t v9 = (void **)v9[1];
    }
    while (v9 != (void **)&v54);
  }
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009B4D50);
  }
  sub_10004034C((uint64_t)off_1009F7EB8);
  id obj = (id)objc_claimAutoreleasedReturnValue();
  id v18 = [obj countByEnumeratingWithState:&v49 objects:v59 count:16];
  char v33 = v11;
  char v34 = v10;
  uint64_t v31 = a1;
  char v19 = 0;
  if (v18)
  {
    uint64_t v20 = *(void *)v50;
    do
    {
      int v21 = 0;
      do
      {
        if (*(void *)v50 != v20) {
          objc_enumerationMutation(obj);
        }
        uint64_t v22 = *(void **)(*((void *)&v49 + 1) + 8 * (void)v21);
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009B4E30);
        }
        if (sub_1006C420C((uint64_t)off_1009F7ED8, v22))
        {
          if (qword_1009F7EC0 != -1) {
            dispatch_once(&qword_1009F7EC0, &stru_1009B4D50);
          }
          uint64_t v23 = off_1009F7EB8;
          sub_1000305AC(v58, v22);
          int v24 = sub_10068640C((uint64_t)v23, v58);
          switch(v24)
          {
            case 6:
              ++v35;
              break;
            case 9:
              ++v33;
              break;
            case 12:
              ++v34;
              break;
          }
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009B4E30);
          }
          unsigned __int16 v25 = off_1009F7ED8;
          sub_10004191C(__p, "IsXboxBLEController");
          char v26 = sub_100030A04((uint64_t)v25, v22, (uint64_t)__p);
          if (v48 < 0) {
            operator delete(__p[0]);
          }
          if (qword_1009F7EC0 != -1) {
            dispatch_once(&qword_1009F7EC0, &stru_1009B4D50);
          }
          uint64_t v27 = off_1009F7EB8;
          sub_1000305AC(v58, v22);
          ++v19;
          v38 += v26;
          if (sub_10068640C((uint64_t)v27, v58) != 6)
          {
            if (qword_1009F7EC0 != -1) {
              dispatch_once(&qword_1009F7EC0, &stru_1009B4D50);
            }
            v28 = off_1009F7EB8;
            sub_1000305AC(v57, v22);
            int v29 = sub_10068640C((uint64_t)v28, v57);
            v36 &= (unsigned __int16)((unsigned __int16)((((-21845 * v29) & 0xFFF8u) >> 2) | (-16384 * v29)) >> 1) < 0xAABu;
          }
        }
        int v21 = (char *)v21 + 1;
      }
      while (v18 != v21);
      id v18 = [obj countByEnumeratingWithState:&v49 objects:v59 count:16];
    }
    while (v18);
  }

  v39[0] = _NSConcreteStackBlock;
  v39[1] = 3221225472;
  v39[2] = sub_10054B078;
  v39[3] = &unk_1009B4D10;
  char v40 = v32;
  char v41 = v19;
  char v42 = v38;
  char v43 = v35;
  char v44 = v33;
  char v45 = v34;
  char v46 = v36 & 1;
  sub_10054AFAC(v31 + 96, v39);
  sub_10003AFB4((uint64_t)v53);
  return sub_1002B308C(&v54);
}

void sub_100548BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37)
{
  sub_10003AFB4((uint64_t)&a35);
  sub_1002B308C(&a37);
  _Unwind_Resume(a1);
}

void sub_100548C48(uint64_t a1, unsigned int a2)
{
  unsigned __int16 v14 = a2;
  uint64_t v4 = qword_100A1A018;
  if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Attempting to force HID sniff rate", buf, 2u);
  }
  char v12 = 33;
  int v11 = 35127750;
  if (sub_10015A5BC(a2, 3, (char *)&v11, 5uLL))
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
      sub_100778FE0();
    }
    uint64_t v5 = *(void *)(a1 + 584);
    if (!v5) {
      goto LABEL_22;
    }
    uint64_t v6 = a1 + 584;
    do
    {
      unsigned int v7 = *(unsigned __int16 *)(v5 + 32);
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        uint64_t v9 = (uint64_t *)v5;
      }
      else {
        uint64_t v9 = (uint64_t *)(v5 + 8);
      }
      if (v8) {
        uint64_t v6 = v5;
      }
      uint64_t v5 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 584 && *(unsigned __int16 *)(v6 + 32) <= a2)
    {
      char v10 = sub_100409A78(a1 + 576, &v14);
      *((unsigned char *)v10 + 9) = 1;
      (*(void (**)(uint64_t))(*(void *)*v10 + 32))(*v10);
    }
    else
    {
LABEL_22:
      if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
        sub_100778FAC();
      }
    }
  }
}

unsigned char *sub_100548DBC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  char v4 = 0;
  sub_10001B8E0(&v4);
  sub_100548C48(v2, *(unsigned __int16 *)(a1 + 40));
  return sub_10001B8AC(&v4);
}

void sub_100548E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_100548E1C(uint64_t a1, unsigned int a2, int a3)
{
  unsigned __int16 v49 = a2;
  uint64_t v6 = sub_1004BE238((void *)a1, a2);
  v48[0] = 0;
  v48[1] = 0;
  sub_10003AED0((uint64_t)v48, a1 + 320);
  uint64_t v7 = *(void *)(a1 + 584);
  if (!v7) {
    goto LABEL_12;
  }
  BOOL v8 = (uint64_t *)(a1 + 584);
  uint64_t v9 = a1 + 584;
  do
  {
    unsigned int v10 = *(unsigned __int16 *)(v7 + 32);
    BOOL v11 = v10 >= a2;
    if (v10 >= a2) {
      char v12 = (uint64_t *)v7;
    }
    else {
      char v12 = (uint64_t *)(v7 + 8);
    }
    if (v11) {
      uint64_t v9 = v7;
    }
    uint64_t v7 = *v12;
  }
  while (*v12);
  if ((uint64_t *)v9 != v8 && *(unsigned __int16 *)(v9 + 32) <= a2)
  {
    unsigned __int16 v14 = sub_100409A78(a1 + 576, &v49);
    sub_10003AFE8((uint64_t)v48);
    char v15 = (id)qword_100A1A018;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      sub_100475F84(v6, (uint64_t)buf);
      __int16 v16 = v51 >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)long long v52 = 136446466;
      v53 = v16;
      __int16 v54 = 1024;
      int v55 = a3;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Received disconnection indication on device %{public}s reason %d", v52, 0x12u);
      if (v51 < 0) {
        operator delete(*(void **)buf);
      }
    }

    uint64_t v17 = v14[2];
    *(_DWORD *)buf = 0;
    *(_DWORD *)long long v52 = 0;
    uint64_t v47 = 0;
    BOOL v18 = sub_10047B7A8(v6, buf, v52, (_DWORD *)&v47 + 1, &v47);
    int v19 = *(_DWORD *)(v6 + 1164);
    if (v19) {
      int v19 = *(_DWORD *)(v6 + 1168) / v19;
    }
    unsigned int v20 = *(_DWORD *)(v6 + 1156);
    if (v20) {
      unsigned int v20 = *(_DWORD *)(v6 + 1160) / v20;
    }
    if (*(unsigned char *)(v6 + 1122)) {
      int v21 = v19;
    }
    else {
      int v21 = 128;
    }
    if (*(unsigned char *)(v6 + 1122)) {
      char v22 = v20;
    }
    else {
      char v22 = -1;
    }
    sub_1005493D8(v18, a3, *(int *)v52, SHIDWORD(v47), v17, v21, v22);
    uint64_t v23 = sub_10003FB34();
    uint64_t v24 = sub_100354254(v23);
    if (v24 && *(unsigned char *)(v6 + 1122)) {
      sub_1005494A0(v24, v6);
    }
    uint64_t v25 = sub_100035F54();
    if (((*(uint64_t (**)(uint64_t))(*(void *)v25 + 384))(v25) & 1) != 0
      || (uint64_t v26 = sub_100017768(), (*(unsigned int (**)(uint64_t))(*(void *)v26 + 8))(v26)))
    {
      sub_10003AF00((uint64_t)v48);
      uint64_t v27 = *v8;
      if (!*v8) {
        goto LABEL_46;
      }
      uint64_t v28 = a1 + 584;
      do
      {
        unsigned int v29 = *(unsigned __int16 *)(v27 + 32);
        BOOL v30 = v29 >= v49;
        if (v29 >= v49) {
          uint64_t v31 = (uint64_t *)v27;
        }
        else {
          uint64_t v31 = (uint64_t *)(v27 + 8);
        }
        if (v30) {
          uint64_t v28 = v27;
        }
        uint64_t v27 = *v31;
      }
      while (*v31);
      if ((uint64_t *)v28 != v8 && v49 >= *(unsigned __int16 *)(v28 + 32)) {
        uint64_t v32 = *(unsigned __int16 *)(v28 + 64);
      }
      else {
LABEL_46:
      }
        uint64_t v32 = 0;
      sub_10003AFE8((uint64_t)v48);
      if (v32)
      {
        char v46 = 0;
        sub_10001B8E0(&v46);
        char v33 = sub_100197864(v32);
        sub_10001B910(&v46);
        uint64_t v34 = sub_100050530();
        (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)v34 + 560))(v34, v33, v32);
        uint64_t v35 = sub_100050530();
        (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)v35 + 536))(v35, v33, v32);
        uint64_t v36 = sub_1004AF8EC();
        v44[0] = _NSConcreteStackBlock;
        v44[1] = 3221225472;
        v44[2] = sub_100549530;
        v44[3] = &unk_1009AD7F0;
        __int16 v45 = v32;
        sub_100013018(v36, v44);
        sub_10001B8AC(&v46);
      }
    }
    (*(void (**)(uint64_t, void))(*(void *)*v14 + 40))(*v14, 0);
    (*(void (**)(void))(*(void *)*v14 + 48))();
    *((unsigned char *)v14 + 72) = 0;
    uint64_t v37 = (void *)v14[10];
    if (v37) {
      free(v37);
    }
    v14[10] = 0;
    sub_10003AF00((uint64_t)v48);
    sub_10054DAEC(a1 + 576, &v49);
    sub_10003AFE8((uint64_t)v48);
    int v38 = *(unsigned __int16 *)(a1 + 560);
    if (v38 == v49) {
      LOWORD(v38) = 0;
    }
    *(_WORD *)(a1 + 560) = v38;
    sub_1004BE538(a1, v6, 0);
    if (*(unsigned char *)(a1 + 563))
    {
      uint64_t v39 = sub_1004AF8EC();
      v43[0] = _NSConcreteStackBlock;
      v43[1] = 3221225472;
      v43[2] = sub_1005495BC;
      v43[3] = &unk_100997528;
      v43[4] = a1;
      sub_100013018(v39, v43);
    }
    uint64_t v40 = sub_1004AF8EC();
    v42[0] = _NSConcreteStackBlock;
    v42[1] = 3221225472;
    v42[2] = sub_1005495C4;
    v42[3] = &unk_100997528;
    v42[4] = a1;
    sub_100013018(v40, v42);
  }
  else
  {
LABEL_12:
    uint64_t v13 = qword_100A1A018;
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v49;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "No session for handle %d, likely because the interrupt channel failed to establish", buf, 8u);
    }
  }
  return sub_10003AFB4((uint64_t)v48);
}

void sub_100549390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_1005493D8(uint64_t a1, int a2, int a3, int a4, uint64_t a5, int a6, char a7)
{
  uint64_t v13 = dispatch_get_global_queue(0, 0);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10054C1B4;
  v14[3] = &unk_1009A0648;
  int v15 = a4;
  int v16 = a3;
  v14[4] = a5;
  char v19 = a7;
  int v17 = a6;
  int v18 = a2;
  dispatch_async(v13, v14);
}

void sub_1005494A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = dispatch_get_global_queue(0, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10054C47C;
  block[3] = &unk_100997528;
  block[4] = a2;
  dispatch_async(v3, block);
}

void sub_100549530(uint64_t a1)
{
  uint64_t v2 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t, void, uint64_t, void))(*(void *)v2 + 1040))(v2, *(unsigned __int16 *)(a1 + 32), 1, 0))
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
      sub_100779048();
    }
  }
}

void sub_1005495BC(uint64_t a1)
{
}

void *sub_1005495C4(uint64_t a1)
{
  return sub_10054863C(*(os_unfair_lock_s **)(a1 + 32));
}

unsigned char *sub_1005495CC(void *a1, unint64_t a2, int a3)
{
  int v6 = sub_1004BE120(a1, a2);
  char v22 = 0;
  sub_10001B8E0(&v22);
  if (v6)
  {
    if (a3)
    {
      uint64_t v7 = (id)qword_100A1A018;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        sub_100474E18(a2, __p);
        sub_10077917C();
      }
LABEL_22:

      return sub_10001B8AC(&v22);
    }
    if (qword_1009FB7C8 != -1) {
      dispatch_once(&qword_1009FB7C8, &stru_1009B4DF0);
    }
    (*(void (**)(void *, unint64_t))(*(void *)off_1009FB7C0 + 40))(off_1009FB7C0, a2);
    if (sub_1005465F4(a1, a2, v6))
    {
      BOOL v11 = qword_100A1A018;
      if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
        sub_100779108(v11, v12, v13, v14, v15, v16, v17, v18);
      }
      sub_100159FDC(v6);
    }
  }
  else
  {
    BOOL v8 = (id)qword_100A1A018;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a2, __p);
      uint64_t v9 = v21 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446466;
      uint64_t v24 = v9;
      __int16 v25 = 1024;
      int v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "HID Host handle for device %{public}s is %d. Responding to delayed incoming connection request", buf, 0x12u);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v10 = sub_100157E48(a2 + 128);
    if (!v10)
    {
      uint64_t v7 = (id)qword_100A1A018;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        sub_100474E18(a2, __p);
        sub_1007790B0();
      }
      goto LABEL_22;
    }
    sub_100546A5C(a1, a2, *(unsigned __int16 *)(v10 + 192), a3, 1);
    if (a3) {
      sub_1004BD6C8((uint64_t)a1, a2, a3);
    }
  }
  return sub_10001B8AC(&v22);
}

void sub_100549844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_10001B8AC(&a15);
  _Unwind_Resume(a1);
}

unsigned char *sub_100549884(uint64_t a1, unint64_t a2, int a3)
{
  return sub_1005495CC((void *)(a1 - 264), a2, a3);
}

void sub_10054988C(void *a1, int a2)
{
  uint64_t v3 = (unsigned __int8 *)sub_1004BE238(a1, a2);
  int v4 = sub_100159FDC(a2);
  uint64_t v5 = (id)qword_100A1A018;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    if (v3)
    {
      sub_100474E18((uint64_t)v3, __p);
      if (v8 >= 0) {
        int v6 = __p;
      }
      else {
        int v6 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v10 = (const char *)v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Remote unplugging virtual cable to device %{public}s", buf, 0xCu);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v10 = "NULL";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Remote unplugging virtual cable to device %{public}s", buf, 0xCu);
    }
  }

  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_1009B4D30);
  }
  sub_100611000((uint64_t)off_1009F8760, v3);
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
      sub_1007787CC();
    }
  }
}

void sub_100549A2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100549A44(void *a1, unsigned int a2, int a3, int a4)
{
  if (a3 && os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR))
  {
    sub_100779234();
    if (a4) {
      goto LABEL_4;
    }
LABEL_8:
    sub_100546880(a1, a2);
    return;
  }
  if (!a4) {
    goto LABEL_8;
  }
LABEL_4:
  if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
    sub_1007791CC();
  }
  sub_100159FDC(a2);
}

void sub_100549AE8(void *a1, unsigned int a2, uint64_t a3, unsigned int a4, int a5, int a6, uint64_t a7)
{
  uint64_t v14 = qword_100A1A018;
  if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_INFO))
  {
    uint64_t v15 = "no";
    __int16 v21 = 1024;
    int v19 = 67109890;
    if (a5) {
      uint64_t v16 = "yes";
    }
    else {
      uint64_t v16 = "no";
    }
    unsigned int v20 = a2;
    unsigned int v22 = a4;
    if (a6) {
      uint64_t v15 = "yes";
    }
    __int16 v23 = 2082;
    uint64_t v24 = v16;
    __int16 v25 = 2082;
    int v26 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Received input report indication: handle=%d, length=%d, first=%{public}s, final=%{public}s", (uint8_t *)&v19, 0x22u);
  }
  if (*(unsigned char *)(a7 + 9))
  {
    uint64_t v17 = qword_100A1A018;
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEBUG))
    {
      int v18 = *(_DWORD *)(a7 + 12);
      int v19 = 67109632;
      unsigned int v20 = a2;
      __int16 v21 = 1024;
      unsigned int v22 = a4;
      __int16 v23 = 1024;
      LODWORD(v24) = v18;
      _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "attrs BTCLK: handle=%d, length=%d, BTCLK=%08x", (uint8_t *)&v19, 0x14u);
    }
  }
  sub_100544BCC(a1, a2, 2u);
  if (qword_1009FB3D0 != -1) {
    dispatch_once(&qword_1009FB3D0, &stru_1009B4E10);
  }
  sub_100545EDC(qword_1009FB3C8, a2, a3, a4);
}

uint64_t sub_100549CC0(uint64_t a1, int a2, char a3)
{
  if (!a2) {
    return dword_1007BF70C[a3 & 0xF];
  }
  if (a2 == 2604) {
    return 3758097110;
  }
  return 3758097084;
}

uint64_t sub_100549CF0(uint64_t a1, int a2, uint64_t a3, int a4, int a5)
{
  char v8 = qword_100A1A018;
  if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_INFO))
  {
    v12[0] = 67109632;
    v12[1] = a2;
    __int16 v13 = 1024;
    int v14 = a4;
    __int16 v15 = 1024;
    int v16 = a5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Received output report confirmation: handle=%d, length=%d, status=%{bluetooth:OI_STATUS}u", (uint8_t *)v12, 0x14u);
  }
  if (qword_1009FB3D0 != -1) {
    dispatch_once(&qword_1009FB3D0, &stru_1009B4E10);
  }
  if (a5 == 2604) {
    unsigned int v9 = -536870186;
  }
  else {
    unsigned int v9 = -536870212;
  }
  if (a5) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  return sub_100546350(qword_1009FB3C8, a2, a5 == 0, v10);
}

void sub_100549E10()
{
  uint64_t v0 = qword_100A1A018;
  if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "Received boot-mode keyboard report", v1, 2u);
  }
}

uint64_t sub_100549E78(uint64_t a1, unsigned __int16 a2, int a3, int a4, uint64_t a5, unsigned int a6, int a7, int a8)
{
  __int16 v15 = qword_100A1A018;
  BOOL v16 = os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_INFO);
  if (v16)
  {
    uint64_t v17 = "no";
    v22[0] = 67109890;
    v22[1] = a4;
    if (a7) {
      int v18 = "yes";
    }
    else {
      int v18 = "no";
    }
    __int16 v23 = 1024;
    unsigned int v24 = a6;
    if (a8) {
      uint64_t v17 = "yes";
    }
    __int16 v25 = 2082;
    int v26 = v18;
    __int16 v27 = 2082;
    uint64_t v28 = v17;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Received get report confirmation: reportType=%d, length=%d, first=%{public}s, final=%{public}s", (uint8_t *)v22, 0x22u);
  }
  if (a3)
  {
    BOOL v16 = os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR);
    if (v16) {
      sub_100779268();
    }
  }
  if (qword_1009FB3D0 != -1) {
    dispatch_once(&qword_1009FB3D0, &stru_1009B4E10);
  }
  uint64_t v19 = qword_1009FB3C8;
  uint64_t v20 = sub_100549CC0(v16, 0, a3);
  return sub_10054622C(v19, a2, a3 == 0, v20, a5, a6);
}

uint64_t sub_10054A01C(uint64_t a1, int a2, int a3, unsigned char *a4, int a5, int a6)
{
  unsigned __int16 v24 = a2;
  uint64_t v12 = qword_100A1A018;
  if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)&uint8_t buf[4] = a2;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = a3;
    *(_WORD *)&uint8_t buf[14] = 1024;
    LODWORD(v26) = a6;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Received set report confirmation: handle=%d, handshake=%d, status=%d", buf, 0x14u);
  }
  v23[0] = 0;
  v23[1] = 0;
  sub_10003AED0((uint64_t)v23, a1 + 320);
  for (i = *(uint64_t ***)(a1 + 584); i; i = (uint64_t **)*i)
  {
    unsigned int v14 = *((unsigned __int16 *)i + 16);
    if (v24 >= v14)
    {
      if (v14 >= v24)
      {
        __int16 v15 = sub_100409A78(a1 + 576, &v24);
        *(_OWORD *)buf = 0u;
        long long v26 = 0u;
        buf[0] = *((unsigned char *)v15 + 32);
        *(_DWORD *)&buf[2] = *(_DWORD *)((char *)v15 + 34);
        *(void *)&long long v26 = v15[6];
        BYTE9(v26) = *((unsigned char *)v15 + 57);
        if ((void)v26) {
          operator new[]();
        }
        BYTE8(v26) = 0;
        if (sub_100542FA8((uint64_t)buf) == 1 && !a3 && !a6)
        {
          BOOL v16 = qword_100A1A018;
          if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)unsigned int v22 = 0;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "HID Perf Mode is running", v22, 2u);
          }
          *((unsigned char *)v15 + 64) = 1;
        }
        break;
      }
      ++i;
    }
  }
  sub_10003AFE8((uint64_t)v23);
  if (a3)
  {
    uint64_t v17 = os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR);
    if (v17) {
      sub_100779268();
    }
  }
  else if (*(_WORD *)(a1 + 560) && *(unsigned __int16 *)(a1 + 560) == v24)
  {
    if (a5 == 1)
    {
      if (*a4 != 65) {
        goto LABEL_29;
      }
    }
    else if (a5 != 2 || *a4 != 64 || a4[1] != 3)
    {
      goto LABEL_29;
    }
    *(_WORD *)(a1 + 560) = 0;
    memset(buf, 0, sizeof(buf));
    sub_10003AED0((uint64_t)buf, a1 + 448);
    sub_1002B818C((pthread_cond_t *)(a1 + 512));
    uint64_t v17 = sub_10003AFB4((uint64_t)buf);
  }
LABEL_29:
  if (qword_1009FB3D0 != -1) {
    dispatch_once(&qword_1009FB3D0, &stru_1009B4E10);
  }
  uint64_t v18 = qword_1009FB3C8;
  unsigned __int16 v19 = v24;
  uint64_t v20 = sub_100549CC0(v17, a6, a3);
  sub_100546350(v18, v19, (a3 | a6) == 0, v20);
  return sub_10003AFB4((uint64_t)v23);
}

void sub_10054A34C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_10003AFB4((uint64_t)va1);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10054A384(void *a1, unsigned int a2)
{
  int v4 = qword_100A1A018;
  if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109120;
    v7[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Received idle indication on handle %d", (uint8_t *)v7, 8u);
  }
  uint64_t v5 = sub_100035F54();
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 408))(v5);
  if (result) {
    return sub_100544890(a1, a2, 3u);
  }
  return result;
}

void sub_10054A478(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009B4D90);
  }
  *(_DWORD *)buf = *(_DWORD *)a2;
  LOWORD(v14) = *(_WORD *)(a2 + 4);
  uint64_t v7 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)buf, 1);
  if (v7)
  {
    char v8 = (id)qword_100A1A018;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(v7, __p);
      if (v12 >= 0) {
        unsigned int v9 = __p;
      }
      else {
        unsigned int v9 = (void **)__p[0];
      }
      uint64_t v10 = "good";
      *(_DWORD *)buf = 136446722;
      if (a4) {
        uint64_t v10 = "poor";
      }
      unsigned int v14 = v9;
      __int16 v15 = 2080;
      BOOL v16 = v10;
      __int16 v17 = 1024;
      int v18 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Device %{public}s identified with %s sniff interval %u", buf, 0x1Cu);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }

    sub_100484AD0(v7, a4);
  }
}

void sub_10054A5FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10054A614(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8 = sub_100197A08(a2);
  unsigned int v9 = sub_1005464E8(a1, v8);
  uint64_t v10 = sub_100197A30(a2);
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009B4D90);
  }
  LODWORD(v25[0]) = *(_DWORD *)a2;
  WORD2(v25[0]) = *(_WORD *)(a2 + 4);
  uint64_t result = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)v25, 1);
  if (v9)
  {
    uint64_t v12 = result;
    v25[0] = 0;
    v25[1] = 0;
    sub_10003AED0((uint64_t)v25, a1 + 320);
    uint64_t v13 = *(void *)(a1 + 584);
    if (!v13) {
      goto LABEL_27;
    }
    unsigned int v14 = (unsigned __int16 *)(a1 + 584);
    __int16 v15 = (unsigned __int16 *)(a1 + 584);
    do
    {
      unsigned int v16 = *(unsigned __int16 *)(v13 + 32);
      BOOL v17 = v16 >= v9;
      if (v16 >= v9) {
        int v18 = (uint64_t *)v13;
      }
      else {
        int v18 = (uint64_t *)(v13 + 8);
      }
      if (v17) {
        __int16 v15 = (unsigned __int16 *)v13;
      }
      uint64_t v13 = *v18;
    }
    while (*v18);
    if (v15 != v14 && v9 >= v15[16])
    {
      if (a4 == 2)
      {
        v15[68] = a3;
        if (v12) {
          sub_10048DC28(v12, a3);
        }
        uint64_t v19 = sub_100035F54();
        if (((*(uint64_t (**)(uint64_t))(*(void *)v19 + 384))(v19) & 1) != 0
          || (uint64_t v20 = sub_100017768(), (*(unsigned int (**)(uint64_t))(*(void *)v20 + 8))(v20)))
        {
          uint64_t v21 = sub_100050530();
          uint64_t v22 = sub_100197A08(a2);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v21 + 560))(v21, v10, v22);
          uint64_t v23 = sub_100050530();
          uint64_t v24 = sub_100197A08(a2);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v23 + 544))(v23, v24, v10, 1, a3);
        }
      }
      v15[69] = a4;
    }
    else
    {
LABEL_27:
      if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
        sub_1007792D0();
      }
    }
    return sub_10003AFB4((uint64_t)v25);
  }
  return result;
}

void sub_10054A870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10054A884(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8 = (id)qword_100A1A018;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    sub_1006ACF44();
    unsigned int v9 = v13 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136315906;
    __int16 v15 = "void BT::HIDProfile::modeChangedInd(const OI_BD_ADDR *, uint16_t, uint8_t)";
    __int16 v16 = 2080;
    BOOL v17 = v9;
    __int16 v18 = 1024;
    int v19 = 625 * a3;
    __int16 v20 = 1024;
    int v21 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%s: Sniff interval changed: device %s, interval %u us, mode %d", buf, 0x22u);
    if (v13 < 0) {
      operator delete(__p);
    }
  }

  sub_10054A614(a1, a2, a3, a4);
  if (a3 <= 0x18 && a4 == 2)
  {
    uint64_t v10 = sub_1004AF8EC();
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10054AA68;
    v11[3] = &unk_100997528;
    v11[4] = a1;
    sub_100013018(v10, v11);
  }
}

void sub_10054AA50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_10054AA68(uint64_t a1)
{
  return sub_10054863C(*(os_unfair_lock_s **)(a1 + 32));
}

void sub_10054AA70(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  unsigned int v3 = sub_1004BE120(v2, *(void *)(a1 + 40));
  unsigned __int16 v11 = v3;
  uint64_t v4 = v2[73];
  if (!v4) {
    goto LABEL_21;
  }
  uint64_t v5 = v2 + 73;
  do
  {
    unsigned int v6 = *(unsigned __int16 *)(v4 + 32);
    BOOL v7 = v6 >= v3;
    if (v6 >= v3) {
      int v8 = (uint64_t *)v4;
    }
    else {
      int v8 = (uint64_t *)(v4 + 8);
    }
    if (v7) {
      uint64_t v5 = (void *)v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v5 != v2 + 73 && v3 >= *((unsigned __int16 *)v5 + 16))
  {
    if (!*((_WORD *)sub_100409A78((uint64_t)(v2 + 72), &v11) + 49))
    {
      unsigned int v9 = qword_100A1A018;
      if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Active mode HID detected, marking as Poor", v10, 2u);
      }
      sub_100484AD0(*(void *)(a1 + 40), 1);
    }
  }
  else
  {
LABEL_21:
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
      sub_100779304();
    }
  }
}

void sub_10054AB7C(os_unfair_lock_s *a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  if (qword_1009F7EE0 == -1)
  {
    uint64_t v4 = v3;
  }
  else
  {
    dispatch_once(&qword_1009F7EE0, &stru_1009B4E30);
    uint64_t v4 = v5;
  }
  if (sub_1006C420C((uint64_t)off_1009F7ED8, v4)) {
    sub_10054863C(a1);
  }
}

void sub_10054AC08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10054AC1C(uint64_t a1, void *a2)
{
}

void sub_10054AC24(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_10054863C((os_unfair_lock_s *)a1);
  if (*(unsigned char *)(a1 + 563) && sub_10054AD24((uint64_t)v4, v3))
  {
    id v5 = qword_100A1A018;
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Low latency LE Game Controller disconnected", buf, 2u);
    }
    uint64_t v6 = sub_1004AF8EC();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_10054AE2C;
    v7[3] = &unk_100997528;
    v7[4] = a1;
    sub_100013018(v6, v7);
  }
}

void sub_10054AD14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

int64_t sub_10054AD24(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (!v2) {
    goto LABEL_9;
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009B4E30);
  }
  if (sub_1006C420C((uint64_t)off_1009F7ED8, v2))
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B4E30);
    }
    id v3 = off_1009F7ED8;
    sub_10004191C(__p, "IsXboxBLEController");
    int64_t v4 = sub_100030A04((uint64_t)v3, v2, (uint64_t)__p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
LABEL_9:
    int64_t v4 = 0;
  }

  return v4;
}

void sub_10054AE04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10054AE2C(uint64_t a1)
{
}

void sub_10054AE34(uint64_t a1, void *a2)
{
}

void sub_10054AE3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_1004AF8EC();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_10054AF80;
  v10[3] = &unk_100997528;
  v10[4] = a1;
  sub_100013018(v4, v10);
  if (*(unsigned char *)(a1 + 563) && sub_10054AD24(v5, v3))
  {
    uint64_t v6 = qword_100A1A018;
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Low latency LE Game Controller Connection Params Updated", buf, 2u);
    }
    uint64_t v7 = sub_1004AF8EC();
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10054AF88;
    v8[3] = &unk_100997528;
    v8[4] = a1;
    sub_100013018(v7, v8);
  }
}

void sub_10054AF70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_10054AF80(uint64_t a1)
{
  return sub_10054863C(*(os_unfair_lock_s **)(a1 + 32));
}

void sub_10054AF88(uint64_t a1)
{
}

void sub_10054AF90(uint64_t a1, void *a2)
{
}

void sub_10054AFAC(os_unfair_lock_s *a1, void *a2)
{
  id v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }
  if (v4)
  {
    uint64_t v6 = v4;
    operator delete(v4);
  }
}

void sub_10054B050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10054B078(unsigned __int8 *a1, uint64_t (***a2)(void, void, void, void, void, void, void, void))
{
  return (**a2)(a2, a1[32], a1[33], a1[34], a1[35], a1[36], a1[37], a1[38]);
}

void sub_10054B0C0(uint64_t a1, int a2)
{
  uint64_t v4 = qword_100A1A018;
  if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    int v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Console mode enablement changed to %d", buf, 8u);
  }
  *(unsigned char *)(a1 + 563) = a2;
  uint64_t v5 = sub_1004AF8EC();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10054B1C8;
  v6[3] = &unk_100997528;
  v6[4] = a1;
  sub_100013018(v5, v6);
}

void sub_10054B1C8(uint64_t a1)
{
}

void sub_10054B1D0(uint64_t a1, int a2)
{
}

void sub_10054B1D8(void *a1, unint64_t a2, int a3)
{
  if (a2)
  {
    int v6 = sub_1004BE120(a1, a2);
    unsigned __int16 v16 = v6;
    if (v6)
    {
      uint64_t v7 = sub_100409A78((uint64_t)(a1 + 72), &v16);
      int v8 = *((_DWORD *)v7 + 25);
      if (a3)
      {
        if (v8) {
          return;
        }
        unsigned int v9 = (id)qword_100A1A018;
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          sub_100474E18(a2, __p);
          if (v15 >= 0) {
            uint64_t v10 = __p;
          }
          else {
            uint64_t v10 = (void **)__p[0];
          }
          *(_DWORD *)buf = 136446210;
          __int16 v18 = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Enabling Low Latency Gaming connection policy for %{public}s", buf, 0xCu);
          if (v15 < 0) {
            operator delete(__p[0]);
          }
        }

        LODWORD(__p[0]) = 0;
        buf[0] = 0;
        sub_10001B8E0(buf);
        sub_10025D408((uint64_t)nullsub_432, a2 + 128, (long long *)&unk_1009FBC40, (int *)__p);
        *((_DWORD *)v7 + 25) = __p[0];
        sub_10001B910(buf);
        unsigned __int16 v11 = buf;
      }
      else
      {
        if (!v8) {
          return;
        }
        uint64_t v12 = (id)qword_100A1A018;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          sub_100474E18(a2, __p);
          char v13 = v15 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 136446210;
          __int16 v18 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Removing Low Latency Gaming connection policy for %{public}s", buf, 0xCu);
          if (v15 < 0) {
            operator delete(__p[0]);
          }
        }

        LOBYTE(__p[0]) = 0;
        sub_10001B8E0(__p);
        sub_10025D904(*((unsigned int *)v7 + 25));
        *((_DWORD *)v7 + 25) = 0;
        sub_10001B910(__p);
        unsigned __int16 v11 = __p;
      }
      sub_10001B8AC(v11);
    }
    else if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR))
    {
      sub_10077936C();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR))
  {
    sub_100779338();
  }
}

void sub_10054B440(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10054B480(uint64_t a1, void *a2, int a3)
{
  id v4 = a2;
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009B4D50);
  }
  int v12 = 0;
  int v13 = 0;
  unsigned __int16 v11 = 0;
  uint64_t v5 = off_1009F7EB8;
  sub_1000305AC(buf, v4);
  if (!sub_10069DEB4((uint64_t)v5, buf, (_WORD *)&v13 + 1, &v13, (_WORD *)&v12 + 1, &v12, &v11))
  {
    int v6 = qword_100A1A018;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT);
    if (a3)
    {
      if (v7)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Enabling LE Low Latency Gaming connection policy", buf, 2u);
      }
      int v8 = 6;
    }
    else
    {
      if (v7)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Removing LE Low Latency Gaming connection policy", buf, 2u);
      }
      int v8 = 12;
    }
    if (v8 != HIWORD(v13))
    {
      unsigned __int16 v11 = 720;
      __int16 v9 = v13;
      if ((unsigned __int16)v13 >= 4u) {
        __int16 v9 = 4;
      }
      LOWORD(v13) = v9;
      if (qword_1009F7EC0 != -1) {
        dispatch_once(&qword_1009F7EC0, &stru_1009B4D50);
      }
      uint64_t v10 = off_1009F7EB8;
      sub_1000305AC(buf, v4);
      sub_10069D688((uint64_t)v10, buf, 4, 4, (unsigned __int16)v13, v13, v11, (float)v8 * 1.25, (float)v8 * 1.25, (float)v8 * 1.25);
    }
  }
}

void sub_10054B66C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10054B68C(void *a1, uint64_t a2, int a3, int a4)
{
  char v21 = 0;
  sub_10001B8E0(&v21);
  unsigned int v8 = sub_100546590((uint64_t)a1, a2);
  unsigned __int16 v20 = v8;
  __int16 v9 = qword_100A1A018;
  if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109632;
    unsigned int v23 = v8;
    __int16 v24 = 1024;
    int v25 = a3;
    __int16 v26 = 1024;
    int v27 = a4;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Getting report - {handle: 0x%x, type %d, ID: %d}", buf, 0x14u);
  }
  if (sub_100544BCC(a1, v8, 3u) != 335)
  {
    if (sub_10015A4A4(v8, a3, a4, 0xFFFF)) {
      goto LABEL_18;
    }
    uint64_t v12 = 1;
    goto LABEL_21;
  }
  if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
    sub_10077943C();
  }
  uint64_t v10 = (uint64_t **)a1[73];
  if (!v10)
  {
LABEL_11:
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
      sub_100779408();
    }
    goto LABEL_18;
  }
  while (1)
  {
    unsigned int v11 = *((unsigned __int16 *)v10 + 16);
    if (v8 >= v11) {
      break;
    }
LABEL_10:
    uint64_t v10 = (uint64_t **)*v10;
    if (!v10) {
      goto LABEL_11;
    }
  }
  if (v11 < v8)
  {
    ++v10;
    goto LABEL_10;
  }
  int v13 = sub_100409A78((uint64_t)(a1 + 72), &v20);
  unsigned int v14 = v13;
  unsigned int v15 = *((unsigned __int8 *)v13 + 72);
  if (*((unsigned char *)v13 + 72))
  {
    int v16 = *((unsigned __int8 *)v13 + 74);
    int v17 = *((_DWORD *)v13 + 19);
    __int16 v18 = qword_100A1A018;
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67109632;
      unsigned int v23 = v15;
      __int16 v24 = 1024;
      int v25 = v16;
      __int16 v26 = 1024;
      int v27 = v17;
      _os_log_fault_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "Get report queue already occupied - {isEntryValid %d, reportType %d, reportID %d}", buf, 0x14u);
    }
LABEL_18:
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
      sub_1007793A0();
    }
    uint64_t v12 = 0;
  }
  else
  {
    *((unsigned char *)v13 + 74) = a3;
    *((_DWORD *)v13 + 19) = a4;
    uint64_t v12 = 1;
    *((unsigned char *)v13 + 72) = 1;
    v13[11] = 0;
    v13[10] = (uint64_t)malloc_type_malloc(0, 0xFFED3218uLL);
    *((unsigned char *)v14 + 73) = 1;
  }
LABEL_21:
  sub_10001B8AC(&v21);
  return v12;
}

void sub_10054B904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_10054B928(uint64_t a1, uint64_t a2, int a3, int a4)
{
  return sub_10054B68C((void *)(a1 - 256), a2, a3, a4);
}

uint64_t sub_10054B930(void *a1, uint64_t a2, int a3, int a4, char *a5, size_t a6)
{
  char v50 = 0;
  sub_10001B8E0(&v50);
  int v12 = sub_100546590((uint64_t)a1, a2);
  unsigned __int16 v49 = v12;
  int v13 = qword_100A1A018;
  if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67110402;
    *(_DWORD *)&uint8_t buf[4] = v12;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = a3;
    *(_WORD *)&uint8_t buf[14] = 1024;
    *(_DWORD *)&uint8_t buf[16] = a4;
    *(_WORD *)&buf[20] = 2048;
    *(void *)&buf[22] = a6;
    *(_WORD *)&buf[30] = 1040;
    *(_DWORD *)long long v52 = a6;
    *(_WORD *)&uint8_t v52[4] = 2098;
    *(void *)&v52[6] = a5;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Set report {handle: %d, type: %d, ID: %d, size: %zu, {%{public}.*P}", buf, 0x2Eu);
  }
  if (sub_100544BCC(a1, v49, 4u) != 335)
  {
    v48[0] = 0;
    v48[1] = 0;
    sub_10003AED0((uint64_t)v48, (uint64_t)(a1 + 40));
    int v16 = (uint64_t **)a1[73];
    if (!v16) {
      goto LABEL_46;
    }
    while (1)
    {
      unsigned int v17 = *((unsigned __int16 *)v16 + 16);
      if (v49 >= v17)
      {
        if (v17 >= v49)
        {
          uint64_t v22 = sub_100409A78((uint64_t)(a1 + 72), &v49);
          *(_OWORD *)buf = 0u;
          unsigned __int16 v23 = v49;
          buf[0] = 5;
          *(_WORD *)&buf[2] = v49;
          *(_WORD *)&uint8_t buf[4] = 255;
          *(_OWORD *)&uint8_t buf[16] = a6;
          if (a5) {
            BOOL v24 = a6 == 0;
          }
          else {
            BOOL v24 = 1;
          }
          if (!v24) {
            operator new[]();
          }
          uint8_t buf[24] = 0;
          if (*((unsigned char *)v22 + 64))
          {
            int v25 = sub_100542FA8((uint64_t)buf);
            __int16 v26 = qword_100A1A018;
            if (v25 == 2)
            {
              if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)uint64_t v47 = 0;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "HID Perf Mode is stopping", v47, 2u);
              }
              *((unsigned char *)v22 + 64) = 0;
              goto LABEL_33;
            }
            if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
              sub_100778904();
            }
            char v33 = 1;
          }
          else
          {
LABEL_33:
            __int16 v46 = 1;
            v41[0] = 5;
            unsigned __int16 v42 = v23;
            __int16 v43 = 255;
            uint64_t v44 = 0;
            size_t v45 = a6;
            if (a6) {
              operator new[]();
            }
            LOBYTE(v46) = 0;
            sub_10054D298((uint64_t)(v22 + 4), (uint64_t)v41);
            if ((_BYTE)v46 && v44) {
              operator delete[]();
            }
            char v33 = 0;
          }
          if (v33)
          {
            sub_10003AFB4((uint64_t)v48);
LABEL_55:
            uint64_t v36 = 0;
            goto LABEL_56;
          }
LABEL_46:
          sub_10003AFE8((uint64_t)v48);
          if (a3 == 2)
          {
            int v34 = sub_10015A748(v49, 2, a5, (unsigned __int16)a6);
          }
          else
          {
            if (a3 != 3)
            {
              sub_10003AFB4((uint64_t)v48);
              goto LABEL_53;
            }
            int v34 = sub_10015A5BC(v49, 3, a5, (unsigned __int16)a6);
          }
          int v35 = v34;
          sub_10003AFB4((uint64_t)v48);
          if (!v35) {
            goto LABEL_51;
          }
LABEL_53:
          if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
            sub_100779470();
          }
          goto LABEL_55;
        }
        ++v16;
      }
      int v16 = (uint64_t **)*v16;
      if (!v16) {
        goto LABEL_46;
      }
    }
  }
  if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
    sub_10077950C();
  }
  unsigned int v14 = (uint64_t **)a1[73];
  if (!v14)
  {
LABEL_11:
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
      sub_1007794D8();
    }
    goto LABEL_53;
  }
  while (1)
  {
    unsigned int v15 = *((unsigned __int16 *)v14 + 16);
    if (v49 >= v15) {
      break;
    }
LABEL_10:
    unsigned int v14 = (uint64_t **)*v14;
    if (!v14) {
      goto LABEL_11;
    }
  }
  if (v15 < v49)
  {
    ++v14;
    goto LABEL_10;
  }
  __int16 v18 = sub_100409A78((uint64_t)(a1 + 72), &v49);
  int v19 = v18;
  int v20 = *((unsigned __int8 *)v18 + 72);
  if (*((unsigned char *)v18 + 72))
  {
    char v21 = qword_100A1A018;
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_FAULT))
    {
      uint64_t v38 = v19[11];
      int v39 = *((_DWORD *)v19 + 19);
      int v40 = *((unsigned __int8 *)v19 + 74);
      *(_DWORD *)buf = 67109888;
      *(_DWORD *)&uint8_t buf[4] = v20;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v40;
      *(_WORD *)&uint8_t buf[14] = 1024;
      *(_DWORD *)&uint8_t buf[16] = v39;
      *(_WORD *)&buf[20] = 1024;
      *(_DWORD *)&buf[22] = v38;
      _os_log_fault_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "Set report queue already occupied - {isEntryValid %d, reportType %d, reportID %d, size %d}", buf, 0x1Au);
    }
    goto LABEL_53;
  }
  *((unsigned char *)v18 + 74) = a3;
  *((_DWORD *)v18 + 19) = a4;
  *((unsigned char *)v18 + 72) = 1;
  v18[11] = a6;
  int v27 = malloc_type_malloc(a6, 0xFFED3218uLL);
  v19[10] = (uint64_t)v27;
  memcpy(v27, a5, a6);
  *((unsigned char *)v19 + 73) = 0;
  uint64_t v28 = qword_100A1A018;
  if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v30 = v19[10];
    uint64_t v29 = v19[11];
    int v31 = *((_DWORD *)v19 + 19);
    int v32 = *((unsigned __int8 *)v19 + 74);
    *(_DWORD *)buf = 136316674;
    *(void *)&uint8_t buf[4] = "set";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&uint8_t buf[14] = v49;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v32;
    *(_WORD *)&uint8_t buf[24] = 1024;
    *(_DWORD *)&buf[26] = v31;
    *(_WORD *)&buf[30] = 2048;
    *(void *)long long v52 = v29;
    *(_WORD *)&v52[8] = 1040;
    *(_DWORD *)&v52[10] = v29;
    __int16 v53 = 2098;
    uint64_t v54 = v30;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Queued %s report {handle: 0x%x, type: %d, ID: %d, size: %zu, {%{public}.*P}", buf, 0x38u);
  }
LABEL_51:
  uint64_t v36 = 1;
LABEL_56:
  sub_10001B8AC(&v50);
  return v36;
}

void sub_10054BEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (v19) {
    char v22 = v20;
  }
  else {
    char v22 = 1;
  }
  if ((v22 & 1) == 0) {
    operator delete[]();
  }
  sub_10003AFB4((uint64_t)&a14);
  sub_10001B8AC(&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_10054BF78(uint64_t a1, uint64_t a2, int a3, int a4, char *a5, size_t a6)
{
  return sub_10054B930((void *)(a1 - 256), a2, a3, a4, a5, a6);
}

uint64_t sub_10054BF80(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v10 = 0;
  sub_10001B8E0(&v10);
  uint64_t v6 = sub_100546590(a1, a2);
  BOOL v7 = qword_100A1A018;
  if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    int v12 = v6;
    __int16 v13 = 1024;
    unsigned int v14 = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Send Hid Control {handle: %d, controlOP: %d}", buf, 0xEu);
  }
  if ((a3 - 3) > 1u || sub_100159FE0(v6, a3, (uint64_t)sub_100544B50))
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
      sub_100779540();
    }
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 1;
  }
  sub_10001B8AC(&v10);
  return v8;
}

void sub_10054C0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_10054C0E8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return sub_10054BF80(a1 - 256, a2, a3);
}

unsigned char *sub_10054C0F0(void *a1, uint64_t a2)
{
  id v4 = qword_100A1A018;
  if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Clearing SDP record", buf, 2u);
  }
  char v8 = 0;
  sub_10001B8E0(&v8);
  int v5 = sub_100546590((uint64_t)a1, a2);
  uint64_t v6 = sub_1004BE238(a1, v5);
  sub_100474B30(v6);
  return sub_10001B8AC(&v8);
}

void sub_10054C198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

unsigned char *sub_10054C1AC(uint64_t a1, uint64_t a2)
{
  return sub_10054C0F0((void *)(a1 - 256), a2);
}

uint64_t sub_10054C1B4(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 44) | (*(_DWORD *)(a1 + 40) << 16);
  uint64_t v3 = mach_continuous_time() - *(void *)(a1 + 32);
  mach_timebase_info info = 0;
  mach_timebase_info(&info);
  unint64_t v4 = v3 * info.numer / info.denom / 0x3B9ACA00;
  int v5 = *(char *)(a1 + 56);
  if (v5 >= 11) {
    LOBYTE(v5) = 10 * (*(unsigned char *)(a1 + 56) / 0xAu);
  }
  int v6 = (char)v5;
  int v8 = *(_DWORD *)(a1 + 48);
  int v7 = *(_DWORD *)(a1 + 52);
  v12[0] = v2;
  v12[1] = v8;
  _DWORD v12[2] = (char)v5;
  v12[3] = v4;
  v12[4] = v7;
  __int16 v9 = qword_100A1A018;
  if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67110144;
    int v15 = v2;
    __int16 v16 = 1024;
    int v17 = v8;
    __int16 v18 = 1024;
    int v19 = v6;
    __int16 v20 = 1024;
    int v21 = v4;
    __int16 v22 = 1024;
    int v23 = v7;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Posting HID Session Metric: Pid|Vid %x, RSSI Average %d, PER Average %d%%, Duration %ds, Disconnection Reason %d", buf, 0x20u);
  }
  uint64_t result = sub_100050530();
  if (result)
  {
    uint64_t v11 = sub_100050530();
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(void *)v11 + 160))(v11, v12);
  }
  return result;
}

void sub_10054C348(uint64_t a1)
{
  if (sub_100040630(*(unsigned __int8 **)(a1 + 32)))
  {
    uint64_t v2 = sub_10003FB34();
    uint64_t v3 = *(unsigned __int8 **)(a1 + 32);
    int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))(*(void *)v2 + 328))(v2, 1, 1, ((unint64_t)v3[128] << 40) | ((unint64_t)v3[129] << 32) | ((unint64_t)v3[130] << 24) | ((unint64_t)v3[131] << 16) | ((unint64_t)v3[132] << 8) | v3[133], 1);
    int v5 = qword_100A1A018;
    BOOL v6 = os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (v6)
      {
        *(_WORD *)int v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Failed to enable phy stats", v7, 2u);
      }
    }
    else
    {
      if (v6)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Enabled phy stats", buf, 2u);
      }
      *(unsigned char *)(*(void *)(a1 + 32) + 1122) = 1;
    }
  }
}

void sub_10054C47C(uint64_t a1)
{
  int v2 = sub_100040630(*(unsigned __int8 **)(a1 + 32));
  uint64_t v3 = qword_100A1A018;
  if (v2)
  {
    int v4 = (id)qword_100A1A018;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = sub_100197A08(*(void *)(a1 + 32) + 128);
      int v10 = 67109120;
      int v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Disabling phy stats for HCI LM Handle 0x%02X", (uint8_t *)&v10, 8u);
    }

    uint64_t v6 = sub_10003FB34();
    int v7 = *(unsigned __int8 **)(a1 + 32);
    (*(void (**)(uint64_t, void, uint64_t, unint64_t, uint64_t))(*(void *)v6 + 328))(v6, 0, 1, ((unint64_t)v7[128] << 40) | ((unint64_t)v7[129] << 32) | ((unint64_t)v7[130] << 24) | ((unint64_t)v7[131] << 16) | ((unint64_t)v7[132] << 8) | v7[133], 1);
    *(unsigned char *)(*(void *)(a1 + 32) + 1122) = 0;
    int v8 = (id)qword_100A1A018;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      if (qword_1009F7F00 != -1) {
        dispatch_once(&qword_1009F7F00, &stru_1009B4D90);
      }
      int v9 = sub_1004AC5CC((uint64_t)off_1009F7EF8);
      int v10 = 67109120;
      int v11 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "disablePhyStats, current number of devices %d", (uint8_t *)&v10, 8u);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v10) = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "disablePhyStats: device is not paired!!!", (uint8_t *)&v10, 2u);
  }
}

void sub_10054C680(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10054C6A4()
{
  return 5;
}

void sub_10054C6C0(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  int v4 = *(char **)(a1 + 8);
  int v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    uint64_t v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  uint64_t v6 = *(char **)(a1 + 8);
  while (*(void *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      uint64_t v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      uint64_t v7 = a2;
      sub_10054C790(a1 + 8, v6, (char *)&v7);
      sub_100061554(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(void, uint64_t))(a1 + 32))(*(void *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_10054C790(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  int v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    __int16 v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      int v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      int v19 = 0;
    }
    __int16 v20 = &v19[8 * v16];
    __p = v19;
    int v27 = v20;
    uint64_t v28 = v20;
    uint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        int v23 = (char *)sub_1000405F8(v8, v22);
        __int16 v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        int v27 = v20;
        uint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        int v27 = v20;
      }
    }
    *(void *)__int16 v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    int v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    int v9 = __src + 8;
    int v10 = v6 - 8;
    int v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)int v4 = *(void *)v3;
  }
  return v4;
}

void sub_10054C998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10054C9D0(uint64_t a1, int a2)
{
  if (qword_1009FB3D0 != -1) {
    dispatch_once(&qword_1009FB3D0, &stru_1009B4E10);
  }
  int v4 = (void *)qword_1009FB3C8;

  return sub_100546D94(v4, a1, a2);
}

void sub_10054CA3C(int a1, uint64_t a2)
{
  if (qword_1009FB3D0 != -1) {
    dispatch_once(&qword_1009FB3D0, &stru_1009B4E10);
  }
  int v4 = (void *)qword_1009FB3C8;

  sub_100547094(v4, a1, a2);
}

void sub_10054CAA8(__int16 a1, int a2)
{
  int v4 = dispatch_get_global_queue(0, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10054D088;
  block[3] = &unk_100998880;
  __int16 v7 = a1;
  int v6 = a2;
  dispatch_async(v4, block);
}

void sub_10054CB48(int a1)
{
  if (qword_1009FB3D0 != -1) {
    dispatch_once(&qword_1009FB3D0, &stru_1009B4E10);
  }
  int v2 = (void *)qword_1009FB3C8;

  sub_10054988C(v2, a1);
}

uint64_t sub_10054CBAC(uint64_t a1, int a2, int a3, uint64_t a4, unsigned int a5, int a6, int a7)
{
  unsigned __int16 v13 = a1;
  if (qword_1009FB3D0 != -1) {
    dispatch_once(&qword_1009FB3D0, &stru_1009B4E10);
  }

  return sub_100549E78(a1, v13, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_10054CC50(int a1, int a2, unsigned char *a3, int a4, int a5)
{
  if (qword_1009FB3D0 != -1) {
    dispatch_once(&qword_1009FB3D0, &stru_1009B4E10);
  }
  uint64_t v10 = qword_1009FB3C8;

  return sub_10054A01C(v10, a1, a2, a3, a4, a5);
}

void sub_10054CCE4(unsigned int a1, int a2, int a3)
{
  if (qword_1009FB3D0 != -1) {
    dispatch_once(&qword_1009FB3D0, &stru_1009B4E10);
  }
  int v6 = (void *)qword_1009FB3C8;

  sub_100549A44(v6, a1, a2, a3);
}

void sub_10054CD60(unsigned int a1, uint64_t a2, unsigned int a3, int a4, int a5, uint64_t a6)
{
  if (qword_1009FB3D0 != -1) {
    dispatch_once(&qword_1009FB3D0, &stru_1009B4E10);
  }
  uint64_t v12 = (void *)qword_1009FB3C8;

  sub_100549AE8(v12, a1, a2, a3, a4, a5, a6);
}

uint64_t sub_10054CDFC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v5 = a3;
  int v6 = a1;
  if (qword_1009FB3D0 != -1) {
    dispatch_once(&qword_1009FB3D0, &stru_1009B4E10);
  }

  return sub_100549CF0(a1, v6, a3, v5, a4);
}

void sub_10054CE70()
{
  if (qword_1009FB3D0 != -1) {
    dispatch_once(&qword_1009FB3D0, &stru_1009B4E10);
  }

  sub_100549E10();
}

uint64_t sub_10054CEC4(unsigned int a1)
{
  if (qword_1009FB3D0 != -1) {
    dispatch_once(&qword_1009FB3D0, &stru_1009B4E10);
  }
  int v2 = (void *)qword_1009FB3C8;

  return sub_10054A384(v2, a1);
}

void sub_10054CF28(int *a1, __int16 a2, char a3)
{
  int v8 = *a1;
  __int16 v9 = *((_WORD *)a1 + 2);
  int v5 = dispatch_get_global_queue(0, 0);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10054D0F0;
  v6[3] = &unk_100998A58;
  __int16 v7 = a2;
  char v10 = a3;
  dispatch_async(v5, v6);
}

void sub_10054CFD8(int *a1, __int16 a2, char a3)
{
  int v8 = *a1;
  __int16 v9 = *((_WORD *)a1 + 2);
  int v5 = dispatch_get_global_queue(0, 0);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10054D154;
  v6[3] = &unk_100998A58;
  __int16 v7 = a2;
  char v10 = a3;
  dispatch_async(v5, v6);
}

uint64_t sub_10054D088(uint64_t a1)
{
  if (qword_1009FB3D0 != -1) {
    dispatch_once(&qword_1009FB3D0, &stru_1009B4E10);
  }
  uint64_t v2 = qword_1009FB3C8;
  unsigned int v3 = *(unsigned __int16 *)(a1 + 36);
  int v4 = *(_DWORD *)(a1 + 32);

  return sub_100548E1C(v2, v3, v4);
}

void sub_10054D0F0(uint64_t a1)
{
  if (qword_1009FB3D0 != -1) {
    dispatch_once(&qword_1009FB3D0, &stru_1009B4E10);
  }
  int v2 = *(unsigned __int16 *)(a1 + 32);
  int v3 = *(unsigned __int8 *)(a1 + 40);

  sub_10054A478(a1, a1 + 34, v2, v3);
}

void sub_10054D154(uint64_t a1)
{
  if (qword_1009FB3D0 != -1) {
    dispatch_once(&qword_1009FB3D0, &stru_1009B4E10);
  }
  uint64_t v2 = qword_1009FB3C8;
  uint64_t v3 = *(unsigned __int16 *)(a1 + 32);
  int v4 = *(unsigned __int8 *)(a1 + 40);

  sub_10054A884(v2, a1 + 34, v3, v4);
}

void sub_10054D1C0(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  int v5 = *(char **)(a1 + 8);
  int v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        int v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 != v4)
  {
    int64_t v6 = v4 - (v5 + 8);
    if (v4 != v5 + 8) {
      memmove(v5, v5 + 8, v4 - (v5 + 8));
    }
    *(void *)(a1 + 16) = &v5[v6];
    sub_100061554(a1 + 8);
    if (*(void *)(a1 + 8) == *(void *)(a1 + 16)) {
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 32) + 8))(*(void *)(a1 + 32), a1);
    }
  }

  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

uint64_t sub_10054D298(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 2) = *(_DWORD *)(a2 + 2);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  if (*(void *)(a1 + 8) && *(unsigned char *)(a1 + 24)) {
    operator delete[]();
  }
  if (v3) {
    operator new[]();
  }
  *(unsigned char *)(a1 + 24) = 0;
  return a1;
}

uint64_t sub_10054D348(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 24) = 1;
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 2) = *(_DWORD *)(a2 + 2);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  if (v3) {
    operator new[]();
  }
  *(unsigned char *)(a1 + 24) = 0;
  return a1;
}

void sub_10054D3D4(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10054D3D4(a1, *a2);
    sub_10054D3D4(a1, a2[1]);
    if (*((unsigned char *)a2 + 96) && a2[10]) {
      operator delete[]();
    }
    operator delete(a2);
  }
}

void sub_10054D44C(id a1)
{
}

void sub_10054D490()
{
}

void sub_10054D4B4(id a1)
{
}

void sub_10054D4F8()
{
}

void sub_10054D51C(id a1)
{
}

void sub_10054D560()
{
}

char *sub_10054D584(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  int v4 = __src;
  int64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    unsigned __int16 v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      int v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      int v19 = 0;
    }
    __int16 v20 = &v19[8 * v16];
    __p = v19;
    int v27 = v20;
    uint64_t v28 = v20;
    uint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        int v23 = (char *)sub_1000405F8(v8, v22);
        __int16 v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        int v27 = v20;
        uint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        int v27 = v20;
      }
    }
    *(void *)__int16 v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    int v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    __int16 v9 = __src + 8;
    char v10 = v6 - 8;
    int v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)int v4 = *(void *)v3;
  }
  return v4;
}

void sub_10054D78C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10054D7C4(id a1)
{
}

void sub_10054D808()
{
}

void sub_10054D82C(id a1)
{
}

void sub_10054D870()
{
}

void sub_10054D894(id a1)
{
}

void sub_10054D8D8()
{
}

uint64_t *sub_10054D8FC(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  int v5 = (uint64_t **)(a1 + 8);
  int v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    unsigned int v6 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v7 = (uint64_t **)v4;
        unsigned int v8 = *((unsigned __int16 *)v4 + 16);
        if (v6 >= v8) {
          break;
        }
        int v4 = *v7;
        int v5 = v7;
        if (!*v7) {
          goto LABEL_10;
        }
      }
      if (v8 >= v6) {
        break;
      }
      int v4 = v7[1];
      if (!v4)
      {
        int v5 = v7 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v7 = (uint64_t **)(a1 + 8);
LABEL_10:
    memset(v10, 0, sizeof(v10));
    sub_10054D9B8(a1, a3, v10);
    sub_100036CA0((uint64_t **)a1, (uint64_t)v7, v5, v10[0]);
    return v10[0];
  }
  return (uint64_t *)v7;
}

__n128 sub_10054D9B8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  unsigned int v6 = a3 + 1;
  unint64_t v7 = (char *)operator new(0x98uLL);
  *a3 = v7;
  void *v6 = v5;
  *((unsigned char *)a3 + 16) = 0;
  *((_WORD *)v7 + 16) = *(_WORD *)a2;
  *(_OWORD *)(v7 + 40) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v7 + 50) = *(_OWORD *)(a2 + 18);
  sub_10054D348((uint64_t)(v7 + 72), a2 + 40);
  *(_OWORD *)(v7 + 104) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(v7 + 120) = *(_OWORD *)(a2 + 88);
  __n128 result = *(__n128 *)(a2 + 104);
  *(__n128 *)(v7 + 136) = result;
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_10054DA5C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_10054DA78(v2, v3);
  _Unwind_Resume(a1);
}

void sub_10054DA78(uint64_t a1, unsigned char *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (__p[96] && *((void *)__p + 10)) {
      operator delete[]();
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t sub_10054DAEC(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unsigned int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    unsigned int v5 = *(unsigned __int16 *)(v2 + 32);
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      unint64_t v7 = (uint64_t *)v2;
    }
    else {
      unint64_t v7 = (uint64_t *)(v2 + 8);
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(unsigned __int16 *)(v4 + 32)) {
    return 0;
  }
  sub_10054DB54((uint64_t **)a1, v4);
  return 1;
}

uint64_t *sub_10054DB54(uint64_t **a1, uint64_t a2)
{
  unsigned int v3 = sub_10004D3B8(a1, (uint64_t *)a2);
  if (*(unsigned char *)(a2 + 96) && *(void *)(a2 + 80)) {
    operator delete[]();
  }
  operator delete((void *)a2);
  return v3;
}

void sub_10054DBAC(id a1)
{
}

void sub_10054DBF0()
{
}

void sub_10054DC14(id a1)
{
}

void sub_10054DC58()
{
}

void sub_10054DC7C(id a1)
{
}

void sub_10054DCC0()
{
}

void sub_10054DCFC(uint64_t a1)
{
  uint64_t v2 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 352))(v2))
  {
    if (qword_1009FB798 != -1) {
      dispatch_once(&qword_1009FB798, &stru_1009B4F78);
    }
    sub_10054FE08((uint64_t)off_1009FB790 + 176, a1);
    if (qword_1009F8748 != -1) {
      dispatch_once(&qword_1009F8748, &stru_1009B4F98);
    }
    sub_1002C3EBC((uint64_t)off_1009F8740 + 80, a1 + 8);
    sub_10054DDE8(a1);
  }
}

void sub_10054DDE8(uint64_t a1)
{
  if (*(void *)(a1 + 24)) {
    return;
  }
  uint64_t v2 = @"/var/mobile/Library/ExposureNotification/Advertisements/";
  uint64_t v3 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 8))(v3))
  {
    int v49 = 0;
    uint64_t v4 = sub_100017768();
    sub_10004191C(buf, "ContactTracing");
    sub_10004191C(__p, "databaseFlushInterval");
    int v5 = (*(uint64_t (**)(uint64_t, uint8_t *, unsigned char *, int *))(*(void *)v4 + 88))(v4, buf, __p, &v49);
    if (v51 < 0) {
      operator delete(*(void **)__p);
    }
    if (SHIBYTE(v54) < 0) {
      operator delete(*(void **)buf);
    }
    if (v5)
    {
      BOOL v6 = qword_100A19FA8;
      if (os_log_type_enabled((os_log_t)qword_100A19FA8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v49;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "overriding contact tracing database flush interval: %d", buf, 8u);
      }
      *(_DWORD *)(a1 + 40) = v49;
    }
    *(void *)buf = 0;
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    uint64_t v7 = sub_100017768();
    sub_10004191C(__p, "ContactTracing");
    sub_10004191C(v47, "databaseFolderPath");
    int v8 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, uint8_t *))(*(void *)v7 + 56))(v7, __p, v47, buf);
    if (v48 < 0) {
      operator delete(v47[0]);
    }
    if (v51 < 0)
    {
      operator delete(*(void **)__p);
      if (v8) {
        goto LABEL_15;
      }
    }
    else if (v8)
    {
LABEL_15:
      __int16 v9 = qword_100A19FA8;
      if (os_log_type_enabled((os_log_t)qword_100A19FA8, OS_LOG_TYPE_INFO))
      {
        char v10 = buf;
        if (v54 < 0) {
          char v10 = *(uint8_t **)buf;
        }
        *(_DWORD *)__p = 136315138;
        *(void *)&__p[4] = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "overriding contact tracing database folder path: %s", __p, 0xCu);
      }
      if (v54 >= 0) {
        int v11 = buf;
      }
      else {
        int v11 = *(uint8_t **)buf;
      }
      uint64_t v2 = +[NSString stringWithUTF8String:v11];
      goto LABEL_25;
    }
    uint64_t v2 = @"/var/mobile/Library/ExposureNotification/Advertisements/";
LABEL_25:
    int v46 = 0;
    uint64_t v12 = sub_100017768();
    sub_10004191C(__p, "ContactTracing");
    sub_10004191C(v47, "databaseCacheCount");
    int v13 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v12 + 88))(v12, __p, v47, &v46);
    if (v48 < 0) {
      operator delete(v47[0]);
    }
    if (v51 < 0) {
      operator delete(*(void **)__p);
    }
    int v14 = v46;
    if (v46) {
      int v15 = v13;
    }
    else {
      int v15 = 0;
    }
    if (v15 == 1)
    {
      uint64_t v16 = qword_100A19FA8;
      if (os_log_type_enabled((os_log_t)qword_100A19FA8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__p = 67109120;
        *(_DWORD *)&__p[4] = v14;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "overriding contact tracing database cache count: %d", __p, 8u);
        int v14 = v46;
      }
      *(_DWORD *)(a1 + 44) = v14;
    }
    int v45 = 0;
    uint64_t v17 = sub_100017768();
    sub_10004191C(__p, "ContactTracing");
    sub_10004191C(v47, "scanTimestampOffset");
    int v18 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v17 + 88))(v17, __p, v47, &v45);
    if (v48 < 0) {
      operator delete(v47[0]);
    }
    if (v51 < 0) {
      operator delete(*(void **)__p);
    }
    if (v18)
    {
      int v19 = qword_100A19FA8;
      if (os_log_type_enabled((os_log_t)qword_100A19FA8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__p = 67109120;
        *(_DWORD *)&__p[4] = v45;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "overriding contact tracing scantimestamp offset: %d", __p, 8u);
      }
      *(_DWORD *)(a1 + 52) = v45;
    }
    int v44 = 0;
    uint64_t v20 = sub_100017768();
    sub_10004191C(__p, "ContactTracing");
    sub_10004191C(v47, "storageFullAlertInterval");
    int v21 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v20 + 88))(v20, __p, v47, &v44);
    if (v48 < 0) {
      operator delete(v47[0]);
    }
    if (v51 < 0) {
      operator delete(*(void **)__p);
    }
    if (v21)
    {
      unint64_t v22 = qword_100A19FA8;
      if (os_log_type_enabled((os_log_t)qword_100A19FA8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__p = 67109120;
        *(_DWORD *)&__p[4] = v44;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "overriding contact tracing storage full alert interval: %d", __p, 8u);
      }
      *(_DWORD *)(a1 + 48) = v44;
    }
    sub_10054E7CC();
    if (SHIBYTE(v54) < 0) {
      operator delete(*(void **)buf);
    }
  }
  uint64_t v23 = sub_100017768();
  int v24 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 192))(v23);
  *(unsigned char *)(a1 + 56) = v24;
  if (v24)
  {
    uint64_t v25 = sub_100017768();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v25 + 176))(v25))
    {
      __int16 v26 = qword_100A19FA8;
      if (os_log_type_enabled((os_log_t)qword_100A19FA8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "enabling insecure database path", buf, 2u);
      }
    }

    uint64_t v2 = @"/var/mobile/Library/Logs/Bluetooth/ENDatabase";
  }
  int v27 = +[NSFileManager defaultManager];
  id v43 = 0;
  unsigned __int8 v28 = [v27 createDirectoryAtPath:v2 withIntermediateDirectories:1 attributes:0 error:&v43];
  id v29 = v43;

  if (v28)
  {
    uint64_t v30 = +[NSURL fileURLWithPath:v2];
    id v42 = v29;
    unsigned __int8 v31 = [v30 setResourceValue:&__kCFBooleanTrue forKey:NSURLIsExcludedFromBackupKey error:&v42];
    id v32 = v42;

    id v29 = v32;
    if (v31)
    {
      uint64_t v33 = sub_1004AFBCC();
      v39[0] = _NSConcreteStackBlock;
      v39[1] = 3221225472;
      v39[2] = sub_10054E9F4;
      v39[3] = &unk_100998A38;
      uint64_t v41 = a1;
      int v40 = v2;
      sub_1000197D8(v33, v39);
      *(void *)(a1 + 32) = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
    }
    else
    {
      uint64_t v37 = qword_100A19F90;
      if (os_log_type_enabled((os_log_t)qword_100A19F90, OS_LOG_TYPE_ERROR)) {
        sub_1007795A8((uint64_t)v32, v37);
      }
      uint64_t v38 = sub_100050530();
      (*(void (**)(uint64_t, uint64_t))(*(void *)v38 + 480))(v38, 1008);
    }
  }
  else
  {
    uint64_t v34 = sub_100017768();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v34 + 176))(v34))
    {
      int v35 = qword_100A19FA8;
      if (os_log_type_enabled((os_log_t)qword_100A19FA8, OS_LOG_TYPE_ERROR)) {
        sub_100779620((uint64_t)v29, v35);
      }
    }
    uint64_t v36 = sub_100050530();
    (*(void (**)(uint64_t, uint64_t))(*(void *)v36 + 480))(v36, 1007);
  }
}

void sub_10054E620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  _Unwind_Resume(a1);
}

double sub_10054E774(uint64_t a1)
{
  *(void *)a1 = off_1009B4EB0;
  *(void *)(a1 + 8) = &off_1009B4EE0;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)&double result = 0x4C400000708;
  *(_OWORD *)(a1 + 40) = xmmword_1007BF770;
  *(unsigned char *)(a1 + 56) = 0;
  return result;
}

void sub_10054E7CC()
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v14 = 0;
  uint64_t v0 = sub_10003FFD4();
  (*(void (**)(uint64_t, void **))(*(void *)v0 + 168))(v0, __p);
  if (v14 >= 0) {
    uint64_t v1 = __p;
  }
  else {
    uint64_t v1 = (void **)__p[0];
  }
  uint64_t v2 = +[NSString stringWithUTF8String:v1];
  uint64_t v3 = [v2 stringByAppendingPathComponent:@"/Library/ContactTracingDatabase"];

  uint64_t v4 = +[NSFileManager defaultManager];
  unsigned int v5 = [v4 fileExistsAtPath:v3];

  if (v5)
  {
    BOOL v6 = +[NSFileManager defaultManager];
    id v12 = 0;
    unsigned __int8 v7 = [v6 removeItemAtPath:v3 error:&v12];
    id v8 = v12;

    if ((v7 & 1) == 0)
    {
      __int16 v9 = qword_100A19F90;
      if (os_log_type_enabled((os_log_t)qword_100A19F90, OS_LOG_TYPE_ERROR))
      {
        id v10 = [v8 localizedDescription];
        id v11 = [v10 UTF8String];
        *(_DWORD *)buf = 136315138;
        id v16 = v11;
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "failed to cleanup original database directory (%s)", buf, 0xCu);
      }
    }
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10054E980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

id sub_10054E9F4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [objc_alloc((Class)ENAdvertisementDatabase) initWithDatabaseFolderPath:*(void *)(a1 + 32) cacheCount:*(unsigned int *)(v1 + 44) errorMetricReporter:&stru_1009B4F08];
  uint64_t v3 = *(void **)(v1 + 24);
  *(void *)(v1 + 24) = v2;

  if (!*(unsigned char *)(v1 + 56) && [*(id *)(v1 + 24) currentStoreType] == (id)1) {
    [*(id *)(v1 + 24) mergeStoresFromFolderPath:@"/var/mobile/Library/Logs/Bluetooth/ENDatabase"];
  }
  unsigned int v5 = *(void **)(v1 + 24);
  LODWORD(v4) = *(_DWORD *)(v1 + 48);
  double v6 = (double)v4;

  return [v5 setStorageFullAlertInterval:v6];
}

void sub_10054EA88(id a1, unsigned int a2)
{
  id v2 = *(void (**)(void))(*(void *)sub_100050530() + 480);

  v2();
}

id sub_10054EAE8(uint64_t a1, void *a2)
{
  id v3 = a2;
  unint64_t v4 = qword_100A19FA8;
  if (os_log_type_enabled((os_log_t)qword_100A19FA8, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412290;
    id v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "purging advertisements older than %@", (uint8_t *)&v7, 0xCu);
  }
  id v5 = [*(id *)(a1 + 24) purgeAdvertismentsSeenBeforeDate:v3];

  return v5;
}

void sub_10054EBB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10054EBCC()
{
  uint64_t v0 = +[NSFileManager defaultManager];
  unsigned int v1 = [v0 fileExistsAtPath:@"/var/mobile/Library/Logs/Bluetooth/ENDatabase/sysdiagnose"];

  if (!v1) {
    return 1;
  }
  id v2 = qword_100A19FA8;
  if (os_log_type_enabled((os_log_t)qword_100A19FA8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)double v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "purging database clones", v6, 2u);
  }
  id v3 = +[NSFileManager defaultManager];
  id v4 = [v3 removeItemAtPath:@"/var/mobile/Library/Logs/Bluetooth/ENDatabase/sysdiagnose" error:0];

  return (uint64_t)v4;
}

void sub_10054EC9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10054ECB0(uint64_t a1)
{
  uint64_t v6 = 0;
  int v7 = &v6;
  uint64_t v8 = 0x2020000000;
  char v9 = 1;
  uint64_t v2 = sub_1004AFBCC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10054ED78;
  v5[3] = &unk_100999720;
  v5[4] = &v6;
  v5[5] = a1;
  sub_1000197D8(v2, v5);
  uint64_t v3 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_10054ED60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10054ED78(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if ((sub_10054EBCC() & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19F90, OS_LOG_TYPE_ERROR)) {
      sub_100779698();
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  if (*(unsigned char *)(v2 + 56)) {
    uint64_t v3 = @"/var/mobile/Library/ExposureNotification/Advertisements/";
  }
  else {
    uint64_t v3 = @"/var/mobile/Library/Logs/Bluetooth/ENDatabase";
  }
  id v4 = v3;
  if ((+[ENAdvertisementDatabase purgeAllStoresInPath:v4] & 1) == 0)*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0; {
  if (([*(id *)(v2 + 24) purgeAllStoresInActiveDatabasePath] & 1) == 0)
  }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
}

void sub_10054EE40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10054EE50(uint64_t a1)
{
  uint64_t v2 = sub_1004AFBCC();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10054EECC;
  v3[3] = &unk_100997528;
  v3[4] = a1;
  sub_100013018(v2, v3);
}

id sub_10054EECC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if ([*(id *)(v1 + 24) currentStoreType] != (id)1) {
    [*(id *)(v1 + 24) switchToCentralStore];
  }
  id result = [*(id *)(v1 + 24) currentStoreType];
  if (result == (id)1)
  {
    id result = [*(id *)(v1 + 24) temporaryStoresPresent];
    if (result) {
      id result = [*(id *)(v1 + 24) mergeTemporaryStores];
    }
    if (!*(unsigned char *)(v1 + 56))
    {
      uint64_t v3 = *(void **)(v1 + 24);
      return [v3 mergeStoresFromFolderPath:@"/var/mobile/Library/Logs/Bluetooth/ENDatabase"];
    }
  }
  return result;
}

void sub_10054EF58(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = qword_100A19FA8;
  if (os_log_type_enabled((os_log_t)qword_100A19FA8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "xpc activity triggered database purge", buf, 2u);
  }
  uint64_t v5 = sub_1004AFBCC();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_10054F068;
  v7[3] = &unk_100998A38;
  uint64_t v9 = a1;
  id v6 = v3;
  id v8 = v6;
  sub_1000197D8(v5, v7);
}

void sub_10054F048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_10054F068(uint64_t a1)
{
  if ((sub_10054EAE8(*(void *)(a1 + 40), *(void **)(a1 + 32)) & 1) == 0
    && os_log_type_enabled((os_log_t)qword_100A19F90, OS_LOG_TYPE_ERROR))
  {
    sub_100779700();
  }
  if ((sub_10054EBCC() & 1) == 0 && os_log_type_enabled((os_log_t)qword_100A19F90, OS_LOG_TYPE_ERROR)) {
    sub_1007796CC();
  }
}

id sub_10054F0E4(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v11 = 0;
  id v12 = &v11;
  uint64_t v13 = 0x3032000000;
  uint64_t v14 = sub_10004D0A8;
  int v15 = sub_10004CE28;
  id v16 = 0;
  uint64_t v6 = sub_1004AFBCC();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10054F20C;
  v9[3] = &unk_1009B4F30;
  v9[4] = &v11;
  v9[5] = a1;
  char v10 = a2;
  v9[6] = a3;
  sub_1000197D8(v6, v9);
  id v7 = (id)v12[5];
  _Block_object_dispose(&v11, 8);

  return v7;
}

void sub_10054F1EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Unwind_Resume(a1);
}

void sub_10054F20C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 40) + 24) createQuerySessionWithAttenuationThreshold:*(unsigned __int8 *)(a1 + 56) queue:*(void *)(sub_1004AFBCC() + 8) error:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

uint64_t sub_10054F27C(uint64_t a1)
{
  uint64_t v6 = 0;
  id v7 = &v6;
  uint64_t v8 = 0x2020000000;
  int v9 = 0;
  uint64_t v2 = sub_1004AFBCC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10054F340;
  v5[3] = &unk_100999720;
  v5[4] = &v6;
  v5[5] = a1;
  sub_1000197D8(v2, v5);
  uint64_t v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_10054F328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10054F340(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 40) + 24) storedAdvertisementCount];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v2 unsignedIntValue];
}

void sub_10054F3A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10054F3B4(uint64_t a1, void *a2, void *a3, __int16 a4, int a5, int a6, int a7, double a8)
{
  id v15 = a2;
  id v16 = a3;
  uint64_t v17 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v17 + 184))(v17))
  {
    int v18 = qword_100A19FA8;
    if (os_log_type_enabled((os_log_t)qword_100A19FA8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138414082;
      id v32 = v15;
      __int16 v33 = 2112;
      id v34 = v16;
      __int16 v35 = 1024;
      int v36 = (char)a4;
      __int16 v37 = 1024;
      int v38 = SHIBYTE(a4);
      __int16 v39 = 1024;
      int v40 = a5;
      __int16 v41 = 1024;
      int v42 = a6;
      __int16 v43 = 2048;
      double v44 = a8;
      __int16 v45 = 1024;
      int v46 = a7;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "saving contact tracing advertisement data:%@ encryptedAEM:%@ avgRSSI:%d maxRSSI:%d reportCount:%d saturated:%d timestamp:%f deltaSinceLastStop:%d", buf, 0x3Eu);
    }
  }
  uint64_t v19 = sub_1004AFBCC();
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  _DWORD v22[2] = sub_10054F5FC;
  v22[3] = &unk_1009B4F58;
  uint64_t v25 = a1;
  double v26 = a8;
  id v20 = v15;
  id v23 = v20;
  id v21 = v16;
  id v24 = v21;
  __int16 v27 = a7;
  __int16 v28 = a4;
  char v29 = a6;
  char v30 = a5;
  sub_100013018(v19, v22);
}

void sub_10054F5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_10054F5FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  double v3 = *(double *)(a1 + 56);
  uint64_t v4 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 8))(v4)) {
    double v3 = v3 + (double)*(int *)(v2 + 52);
  }
  id v5 = objc_alloc((Class)ENAdvertisement);
  LOBYTE(v12) = *(unsigned char *)(a1 + 69);
  id v6 = [v5 initWithRPI:*(void *)(a1 + 32) encryptedAEM:*(void *)(a1 + 40) timestamp:*(unsigned __int16 *)(a1 + 64) scanInterval:*(char *)(a1 + 66) typicalRSSI:*(char *)(a1 + 67) maxRSSI:*(unsigned __int8 *)(a1 + 68) saturated:v3 counter:v12];
  [*(id *)(v2 + 24) saveContactTracingAdvertisement:v6];
  __uint64_t v7 = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
  if (v7 > *(void *)(v2 + 32) + 1000000000 * (unint64_t)*(unsigned int *)(v2 + 40))
  {
    uint64_t v8 = sub_100017768();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 176))(v8))
    {
      int v9 = qword_100A19FA8;
      if (os_log_type_enabled((os_log_t)qword_100A19FA8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *(void *)(v2 + 32);
        int v11 = *(_DWORD *)(v2 + 40);
        *(_DWORD *)buf = 134218496;
        __uint64_t v14 = v7;
        __int16 v15 = 2048;
        uint64_t v16 = v10;
        __int16 v17 = 1024;
        int v18 = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "database flush interval hit flushTime:%llu lastFlush:%llu flushInterval:%u", buf, 0x1Cu);
      }
    }
    [*(id *)(v2 + 24) flushCache];
    *(void *)(v2 + 32) = v7;
  }
}

void sub_10054F7B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10054F7D4(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 == 4)
  {
    v7[7] = v3;
    v7[8] = v4;
    uint64_t v6 = sub_1004AFBCC();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_10054F85C;
    v7[3] = &unk_100997528;
    void v7[4] = a1;
    sub_1000197D8(v6, v7);
  }
}

__uint64_t sub_10054F85C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  __uint64_t v2 = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
  uint64_t v3 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 176))(v3))
  {
    uint64_t v4 = qword_100A19FA8;
    if (os_log_type_enabled((os_log_t)qword_100A19FA8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(v1 + 32);
      int v7 = 134218240;
      __uint64_t v8 = v2;
      __int16 v9 = 2048;
      uint64_t v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "flush database due to power off flushTime:%llu lastFlush:%llu", (uint8_t *)&v7, 0x16u);
    }
  }
  [*(id *)(v1 + 24) flushCache];
  __uint64_t result = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
  *(void *)(v1 + 32) = result;
  return result;
}

void sub_10054F964(uint64_t a1, uint64_t a2, int a3)
{
}

void sub_10054F96C(uint64_t a1)
{
  uint64_t v2 = sub_1004AFBCC();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10054F9E8;
  v3[3] = &unk_100997528;
  v3[4] = a1;
  sub_1000197D8(v2, v3);
}

void sub_10054F9E8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 176))(v2))
  {
    uint64_t v3 = qword_100A19FA8;
    if (os_log_type_enabled((os_log_t)qword_100A19FA8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v11) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump: ---------------- ContactTracing Database ----------------", (uint8_t *)&v11, 2u);
    }
  }
  uint64_t v4 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 176))(v4))
  {
    uint64_t v5 = qword_100A19FA8;
    if (os_log_type_enabled((os_log_t)qword_100A19FA8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = [*(id *)(v1 + 24) storedAdvertisementCount];
      unsigned int v7 = [v6 intValue];
      int v11 = 67109120;
      LODWORD(v12) = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: Record Count:%d", (uint8_t *)&v11, 8u);
    }
  }
  uint64_t v8 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 176))(v8))
  {
    __int16 v9 = qword_100A19FA8;
    if (os_log_type_enabled((os_log_t)qword_100A19FA8, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = [*(id *)(v1 + 24) droppedAdvertisementCount];
      int v11 = 134217984;
      id v12 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "statedump: Filtered Advertisements:%lu", (uint8_t *)&v11, 0xCu);
    }
  }
}

void sub_10054FBCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_10054FBE4(uint64_t a1, std::string *a2)
{
  if (!*(unsigned char *)(a1 + 56))
  {
    uint64_t v8 = qword_100A19F90;
    BOOL v7 = 0;
    if (!os_log_type_enabled((os_log_t)qword_100A19F90, OS_LOG_TYPE_DEFAULT)) {
      return v7;
    }
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "database clone not allowed", buf, 2u);
    return 0;
  }
  uint64_t v4 = +[NSFileManager defaultManager];
  unsigned __int8 v5 = [v4 createDirectoryAtPath:@"/var/mobile/Library/Logs/Bluetooth/ENDatabase/sysdiagnose" withIntermediateDirectories:1 attributes:0 error:0];

  if ((v5 & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19F90, OS_LOG_TYPE_ERROR)) {
      sub_100779768();
    }
    return 0;
  }
  *(void *)buf = 0;
  id v12 = buf;
  uint64_t v13 = 0x2020000000;
  char v14 = 0;
  uint64_t v6 = sub_1004AFBCC();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_10054FDC4;
  v10[3] = &unk_100999720;
  v10[4] = buf;
  void v10[5] = a1;
  sub_1000197D8(v6, v10);
  BOOL v7 = v12[24] != 0;
  if (v12[24])
  {
    std::string::assign(a2, "/var/mobile/Library/Logs/Bluetooth/ENDatabase/sysdiagnose");
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19F90, OS_LOG_TYPE_ERROR))
  {
    sub_100779734();
  }
  _Block_object_dispose(buf, 8);
  return v7;
}

void sub_10054FDA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10054FDC4(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 40) + 24) cloneDatabaseTo:@"/var/mobile/Library/Logs/Bluetooth/ENDatabase/sysdiagnose"];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_10054FE08(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  unsigned __int8 v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        unsigned __int8 v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    uint64_t v6 = a2;
    sub_10054FE94(a1 + 8, v4, (char *)&v6);
    sub_100061554(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_10054FE94(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      uint64_t v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    id v20 = &v19[8 * v16];
    __p = v19;
    __int16 v27 = v20;
    __int16 v28 = v20;
    char v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        id v23 = (char *)sub_1000405F8(v8, v22);
        id v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        __int16 v27 = v20;
        char v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        __int16 v27 = v20;
      }
    }
    *(void *)id v20 = *(void *)v3;
    __int16 v28 = v20 + 8;
    uint64_t v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    __int16 v9 = __src + 8;
    id v10 = v6 - 8;
    int v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_10055009C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005500D4(id a1)
{
}

void sub_100550118()
{
}

void sub_10055013C(id a1)
{
}

void sub_100550180()
{
}

uint64_t sub_1005501A4(uint64_t a1)
{
  *(void *)sub_1004C9B7C(a1, "HidService", 32) = &off_1009B4FC8;
  if (qword_1009FB3D0 != -1) {
    dispatch_once(&qword_1009FB3D0, &stru_1009B50C0);
  }
  sub_1004C9E90(a1, qword_1009FB3C8);
  return a1;
}

void sub_10055022C(_Unwind_Exception *a1)
{
  sub_1004C9C80(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100550244(uint64_t a1, _WORD *a2)
{
  long long v33 = xmmword_1007BF750;
  uint64_t v30 = 0;
  unsigned __int8 v31 = 0;
  uint64_t v32 = 0;
  int v28 = 0;
  int v29 = 0;
  if ((sub_10047AE08((uint64_t)a2, (uint64_t)&v33, 0x206u, &v30) & 1) == 0) {
    goto LABEL_35;
  }
  if (v30 == v31)
  {
LABEL_20:
    LODWORD(v6) = 0;
    unint64_t v7 = 0;
    goto LABEL_21;
  }
  uint64_t v3 = (char *)v30 + 2;
  while (1)
  {
    uint64_t v4 = v3 - 2;
    if (*(v3 - 2) != 6)
    {
      if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
        sub_100779814(&v26, v27);
      }
      goto LABEL_19;
    }
    if (*(_WORD *)v3 != 2)
    {
      if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
        sub_100779814(&v24, v25);
      }
      goto LABEL_19;
    }
    uint64_t v5 = *(void *)(v3 + 6);
    if (*(unsigned char *)v5 != 1)
    {
      if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
        sub_100779814(&v22, v23);
      }
      goto LABEL_19;
    }
    if (*(_DWORD *)(v5 + 8) != 34)
    {
      if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
        sub_100779840(&v20, v21);
      }
      goto LABEL_19;
    }
    if (*(unsigned char *)(v5 + 16) == 4) {
      break;
    }
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
      sub_100779814(&v18, v19);
    }
LABEL_19:
    v3 += 16;
    if (v4 + 16 == v31) {
      goto LABEL_20;
    }
  }
  size_t v6 = *(unsigned __int16 *)(v5 + 18);
  unint64_t v14 = *(const void **)(v5 + 24);
  uint64_t v15 = malloc_type_malloc(v6, 0xC3617C00uLL);
  unint64_t v7 = v15;
  if (v15) {
    memcpy(v15, v14, v6);
  }
  else {
    LODWORD(v6) = 0;
  }
LABEL_21:
  for (i = (char *)v30; i != v31; i += 16)
  {
    *(void *)buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    *(_OWORD *)buf = *(_OWORD *)i;
    sub_1002D5394(buf);
  }
  if (!v7)
  {
LABEL_35:
    uint64_t v11 = 1;
    goto LABEL_42;
  }
  sub_100550718((uint64_t)a2, 0x201u, (_WORD *)&v29 + 1);
  sub_100550718((uint64_t)a2, 0x205u, &v29);
  sub_100550718((uint64_t)a2, 0x202u, (_WORD *)&v28 + 1);
  sub_100550718((uint64_t)a2, 0x203u, &v28);
  __int16 v9 = qword_100A1A018;
  if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18((uint64_t)a2, __p);
    id v10 = v17 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136316418;
    *(void *)&uint8_t buf[4] = v10;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&uint8_t buf[14] = HIWORD(v29);
    __int16 v35 = 1024;
    int v36 = (unsigned __int16)v29;
    __int16 v37 = 1024;
    int v38 = HIWORD(v28);
    __int16 v39 = 1024;
    int v40 = (unsigned __int16)v28;
    __int16 v41 = 1024;
    int v42 = v6;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Caching HID info for %s: vendorID=0x%x vendorIDSource=0x%x productID=0x%x version=0x%x descriptorSize=%u", buf, 0x2Au);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
  }
  if (v6 > 0x1000)
  {
    uint64_t v12 = qword_100A1A018;
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v6;
      _os_log_fault_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Read HID descriptor size %u from SDP which is too large!", buf, 8u);
      uint64_t v12 = qword_100A1A018;
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_10077979C(v6, v12);
    }
    uint64_t v11 = 1;
  }
  else
  {
    sub_1000335D8(buf, v7, v6);
    sub_10047B508(a2, (uint64_t)buf, SHIWORD(v29), v29, SHIWORD(v28), v28);
    *(void *)buf = &off_100998428;
    if (*(void *)&buf[8]) {
      sub_1000368F4(*(atomic_uint **)&buf[8]);
    }
    uint64_t v11 = 0;
  }
  free(v7);
LABEL_42:
  if (v30)
  {
    unsigned __int8 v31 = (char *)v30;
    operator delete(v30);
  }
  return v11;
}

void sub_1005506B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100550718(uint64_t a1, unsigned int a2, _WORD *a3)
{
  v11[0] = 131075;
  v11[1] = 4608;
  __p = 0;
  __int16 v9 = 0;
  uint64_t v10 = 0;
  int v4 = sub_10047AE08(a1, (uint64_t)v11, a2, &__p);
  uint64_t v5 = __p;
  if (v4)
  {
    size_t v6 = v9;
    if ((char *)v9 - (unsigned char *)__p == 16 && *((_WORD *)__p + 1) == 2) {
      *a3 = *((_DWORD *)__p + 2);
    }
    if (v5 != v6)
    {
      do
      {
        long long v7 = *v5;
        sub_1002D5394(&v7);
        ++v5;
      }
      while (v5 != v9);
      uint64_t v5 = __p;
    }
  }
  if (v5)
  {
    __int16 v9 = v5;
    operator delete(v5);
  }
}

void sub_1005507D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005507F8(uint64_t a1, _WORD *a2)
{
  long long v15 = xmmword_1007BF750;
  int v14 = 0;
  memset(v17, 0, sizeof(v17));
  char v13 = 0;
  int v12 = 0;
  if (sub_10047B300((uint64_t)a2))
  {
    BOOL v4 = sub_100478F30((uint64_t)a2, &v15, 4u);
    if (v4)
    {
      sub_100550244(v4, a2);
LABEL_11:
      int v7 = 4;
      goto LABEL_16;
    }
LABEL_15:
    int v7 = 1;
    goto LABEL_16;
  }
  BOOL v5 = sub_10048A2B0((uint64_t)a2, v17, &v13);
  if (v13) {
    BOOL v6 = v5;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6)
  {
    if (!sub_100476250((uint64_t)a2, &v14))
    {
      int v7 = 0;
      goto LABEL_16;
    }
    if ((v14 & 0x1F00) == 0x500) {
      goto LABEL_11;
    }
    uint64_t v8 = qword_100A1A018;
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v11) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Service is not capable because major is not peripheral", (uint8_t *)&v11, 2u);
    }
    goto LABEL_15;
  }
  int v7 = 4 * (sub_10018BDDC((unsigned __int8 *)v17, 4388, &v12) == 0);
LABEL_16:
  unsigned int v9 = *(_DWORD *)(a1 + 32);
  uint64_t v16 = 0;
  sub_100026C30((uint64_t)&v16);
  *(void *)&long long v11 = (int)v16;
  *((void *)&v11 + 1) = SWORD2(v16);
  return sub_100477F4C((uint64_t)a2, v9, v7, &v11, 0);
}

void sub_1005509B8(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  long long v16 = xmmword_1007BF750;
  memset(v19, 0, sizeof(v19));
  char v15 = 0;
  int v13 = 0;
  int v14 = 0;
  *a3 = 0;
  sub_10047B574(a2);
  if (sub_100476250(a2, &v13))
  {
    if ((v13 & 0x1F00) != 0x500) {
      return;
    }
    if ((v13 & 0x40) != 0) {
      goto LABEL_14;
    }
    if ((v13 & 0x80) == 0)
    {
      if (sub_100476054(a2) != 26) {
        return;
      }
      goto LABEL_14;
    }
    uint64_t v5 = sub_100035F54();
    if (((*(uint64_t (**)(uint64_t))(*(void *)v5 + 360))(v5) & 1) != 0
      || (uint64_t v6 = sub_100035F54(), (*(unsigned int (**)(uint64_t))(*(void *)v6 + 424))(v6)))
    {
      int v7 = qword_100A1A018;
      if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
      {
        sub_100475EE0(a2, (uint64_t)__p);
        if (v12 >= 0) {
          uint64_t v8 = __p;
        }
        else {
          uint64_t v8 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136315138;
        char v18 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Allowing HID Pointing Device %s", buf, 0xCu);
        if (v12 < 0) {
          operator delete(__p[0]);
        }
      }
      goto LABEL_14;
    }
    unsigned int v9 = qword_100A1A018;
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
    {
      sub_100475F84(a2, (uint64_t)__p);
      uint64_t v10 = v12 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      char v18 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Rejecting HID Pointing Device %s", buf, 0xCu);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  else
  {
    if (sub_10047B300(a2))
    {
      if (!sub_100478F30(a2, &v16, 4u)) {
        return;
      }
      goto LABEL_14;
    }
    if (sub_10048A2B0(a2, v19, &v15) && v15 && !sub_10018BDDC((unsigned __int8 *)v19, 4388, &v14)
      || sub_100476054(a2) == 24)
    {
LABEL_14:
      *a3 = 1;
    }
  }
}

uint64_t sub_100550C84(uint64_t a1, unint64_t a2, const char *a3)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 32))(a1)) {
    return 105;
  }
  if (strcmp(a3, "BT_KEY_HID_VIRTUAL_CABLE_UNPLUG")) {
    return 2;
  }
  char v7 = 0;
  sub_10001B8E0(&v7);
  if (qword_1009FB3D0 != -1) {
    dispatch_once(&qword_1009FB3D0, &stru_1009B50C0);
  }
  uint64_t v5 = sub_100543B50(qword_1009FB3C8, a2);
  sub_10001B8AC(&v7);
  return v5;
}

void sub_100550D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_100550D64(uint64_t a1, unsigned char *a2, int a3, char a4)
{
  sub_10047BB9C(a2, a3 != 0, a4);
  if (qword_1009F87A8 != -1) {
    dispatch_once(&qword_1009F87A8, &stru_1009B50E0);
  }
  uint64_t result = sub_10046EC84((uint64_t)off_1009F87A0, (uint64_t)a2, 32);
  if (result)
  {
    if (qword_1009FB3D0 != -1) {
      dispatch_once(&qword_1009FB3D0, &stru_1009B50C0);
    }
    uint64_t v6 = (void *)qword_1009FB3C8;
    return sub_100545E6C(v6, (unint64_t)a2);
  }
  return result;
}

void sub_100550E2C(uint64_t a1)
{
  sub_1004C9C80(a1);

  operator delete();
}

void sub_100550E64(id a1)
{
}

void sub_100550EA8()
{
}

void sub_100550ECC(id a1)
{
}

void sub_100550F10()
{
}

uint64_t sub_100550F34(char *__s)
{
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009B5100);
  }
  uint64_t v2 = qword_1009F8160;
  sub_10004191C(__p, __s);
  uint64_t v3 = sub_100009254(v2, (uint64_t)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_100550FD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100550FEC(unint64_t *a1)
{
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009B5100);
  }
  uint64_t result = sub_10000A678(qword_1009F8160, *a1);
  if (!result) {
    *a1 = 0;
  }
  return result;
}

void sub_10055104C(id a1)
{
}

void sub_100551090()
{
}

void sub_1005510B4(uint64_t a1)
{
  *(void *)a1 = off_1009B5130;
  *(void *)(a1 + 8) = off_1009B5180;
  *(void *)(a1 + 16) = &off_1009B51A0;
  sub_100052DA8(a1 + 24);
  *(unsigned char *)(a1 + 88) = 0;
  operator new();
}

void sub_100551178()
{
}

void *sub_1005511B0(void *a1)
{
  *a1 = off_1009B5130;
  a1[1] = off_1009B5180;
  a1[2] = &off_1009B51A0;
  uint64_t v2 = a1[12];
  if (v2)
  {
    sub_1004AFF30(v2);
    operator delete();
  }
  sub_100052DA4(a1 + 3);
  return a1;
}

void sub_10055125C(void *a1)
{
  sub_1005511B0(a1);

  operator delete();
}

uint64_t sub_100551294(uint64_t a1)
{
  v3[0] = 0;
  v3[1] = 0;
  sub_10003AED0((uint64_t)v3, a1 + 24);
  sub_1004AF98C(*(void *)(a1 + 96), QOS_CLASS_USER_INITIATED);
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009B51C0);
  }
  sub_100457490(qword_1009F8160 + 8, a1 + 8);
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B51E0);
  }
  sub_10026B36C((uint64_t)off_1009F8068 + 64, a1 + 16);
  return sub_10003AFB4((uint64_t)v3);
}

void sub_100551358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10055136C(uint64_t a1)
{
  v3[0] = 0;
  v3[1] = 0;
  sub_10003AED0((uint64_t)v3, a1 + 24);
  sub_1004AFEC4(*(void *)(a1 + 96));
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009B51C0);
  }
  sub_100052718(qword_1009F8160 + 8, a1 + 8);
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B51E0);
  }
  sub_100052718((uint64_t)off_1009F8068 + 64, a1 + 16);
  return sub_10003AFB4((uint64_t)v3);
}

void sub_10055142C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100551440(uint64_t a1)
{
  v3[0] = 0;
  v3[1] = 0;
  sub_10003AED0((uint64_t)v3, a1 + 24);
  *(unsigned char *)(a1 + 88) = 1;
  return sub_10003AFB4((uint64_t)v3);
}

uint64_t sub_100551488(uint64_t a1)
{
  v3[0] = 0;
  v3[1] = 0;
  sub_10003AED0((uint64_t)v3, a1 + 8);
  *(unsigned char *)(a1 + 72) = 1;
  return sub_10003AFB4((uint64_t)v3);
}

uint64_t sub_1005514D0(uint64_t a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CallbackManager::stackWillStop enter", buf, 2u);
  }
  *(void *)buf = 0;
  uint64_t v7 = 0;
  sub_10003AED0((uint64_t)buf, a1 + 24);
  *(unsigned char *)(a1 + 88) = 0;
  uint64_t v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CallbackManager::stackWillStop exit", v5, 2u);
  }
  return sub_10003AFB4((uint64_t)buf);
}

uint64_t sub_10055159C(uint64_t a1)
{
  return sub_1005514D0(a1 - 16);
}

uint64_t sub_1005515A4(uint64_t a1, unsigned char *a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 24);
  sub_1004B022C(*(void *)(a1 + 96), a2);
  return sub_10003AFB4((uint64_t)v5);
}

void sub_1005515F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100551610(uint64_t a1, void *a2)
{
  id v3 = a2;
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1 + 24);
  sub_100013018(*(void *)(a1 + 96), v3);
  sub_10003AFB4((uint64_t)v4);
}

void sub_100551668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_100551688(id a1)
{
}

void sub_1005516CC()
{
}

void sub_1005516F0(id a1)
{
}

void sub_100551734()
{
}

uint64_t sub_100551758@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  v36[0] = 0;
  v36[1] = 0;
  sub_10003AED0((uint64_t)v36, a1);
  std::string::size_type v4 = *(unsigned __int8 *)(a1 + 103);
  if (*(char *)(a1 + 103) < 0)
  {
    uint64_t v5 = *(unsigned char **)(a1 + 80);
    uint64_t v6 = *(void *)(a1 + 88);
    if (!v6) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v5 = (unsigned char *)(a1 + 80);
    uint64_t v6 = *(unsigned __int8 *)(a1 + 103);
    if (!*(unsigned char *)(a1 + 103)) {
      goto LABEL_17;
    }
  }
  uint64_t v7 = &v5[v6];
  uint64_t v8 = v5;
  unsigned int v9 = v7;
  do
  {
    if (*v8 == 45)
    {
      uint64_t v10 = &_mh_execute_header.magic + 1;
      while (v10 != 8)
      {
        if (&v8[v10] == v7) {
          goto LABEL_15;
        }
        int v11 = v8[v10];
        int v12 = aCentral_1[v10++];
        if (v11 != v12) {
          goto LABEL_7;
        }
      }
      unsigned int v9 = v8;
    }
LABEL_7:
    ++v8;
  }
  while (v8 != v7);
LABEL_15:
  if (v9 != v7)
  {
    std::string::size_type v13 = v9 - v5;
    if (v9 - v5 != -1) {
      goto LABEL_63;
    }
  }
LABEL_17:
  if ((v4 & 0x80) == 0)
  {
    int v14 = (unsigned char *)(a1 + 80);
    uint64_t v15 = *(unsigned __int8 *)(a1 + 103);
    if (!*(unsigned char *)(a1 + 103)) {
      goto LABEL_33;
    }
LABEL_21:
    long long v16 = &v14[v15];
    char v17 = v14;
    char v18 = v16;
    do
    {
      if (*v17 == 45)
      {
        uint64_t v19 = &_mh_execute_header.magic + 1;
        while (v19 != 11)
        {
          if (&v17[v19] == v16) {
            goto LABEL_31;
          }
          int v20 = v17[v19];
          int v21 = aPeripheral_1[v19++];
          if (v20 != v21) {
            goto LABEL_23;
          }
        }
        char v18 = v17;
      }
LABEL_23:
      ++v17;
    }
    while (v17 != v16);
LABEL_31:
    if (v18 != v16)
    {
      std::string::size_type v13 = v18 - v14;
      if (v18 - v14 != -1) {
        goto LABEL_63;
      }
    }
    goto LABEL_33;
  }
  int v14 = *(unsigned char **)(a1 + 80);
  uint64_t v15 = *(void *)(a1 + 88);
  if (v15) {
    goto LABEL_21;
  }
LABEL_33:
  if ((v4 & 0x80) != 0)
  {
    char v22 = *(unsigned char **)(a1 + 80);
    uint64_t v23 = *(void *)(a1 + 88);
    if (!v23)
    {
LABEL_49:
      if ((v4 & 0x80) != 0)
      {
        uint64_t v30 = *(void *)(a1 + 80);
        int64_t v31 = *(void *)(a1 + 88);
      }
      else
      {
        uint64_t v30 = a1 + 80;
        int64_t v31 = *(unsigned __int8 *)(a1 + 103);
      }
      if (v31 >= 1)
      {
        uint64_t v32 = (unsigned char *)(v30 + v31);
        long long v33 = (void *)v30;
        do
        {
          id v34 = memchr(v33, 45, v31);
          if (!v34) {
            break;
          }
          if (*v34 == 45)
          {
            if (v34 != v32)
            {
              std::string::size_type v13 = (std::string::size_type)&v34[-v30];
              if (&v34[-v30] != (unsigned char *)-1) {
                goto LABEL_63;
              }
            }
            break;
          }
          long long v33 = v34 + 1;
          int64_t v31 = v32 - (unsigned char *)v33;
        }
        while (v32 - (unsigned char *)v33 >= 1);
      }
      if ((v4 & 0x80) != 0) {
        std::string::size_type v13 = *(void *)(a1 + 88);
      }
      else {
        std::string::size_type v13 = v4;
      }
      goto LABEL_63;
    }
  }
  else
  {
    char v22 = (unsigned char *)(a1 + 80);
    uint64_t v23 = *(unsigned __int8 *)(a1 + 103);
    if (!*(unsigned char *)(a1 + 103)) {
      goto LABEL_49;
    }
  }
  char v24 = &v22[v23];
  uint64_t v25 = v22;
  char v26 = v24;
  do
  {
    if (*v25 == 45)
    {
      uint64_t v27 = &_mh_execute_header.magic + 1;
      while (v27 != 13)
      {
        if (&v25[v27] == v24) {
          goto LABEL_47;
        }
        int v28 = v25[v27];
        int v29 = aScalablepipe[v27++];
        if (v28 != v29) {
          goto LABEL_39;
        }
      }
      char v26 = v25;
    }
LABEL_39:
    ++v25;
  }
  while (v25 != v24);
LABEL_47:
  if (v26 == v24) {
    goto LABEL_49;
  }
  std::string::size_type v13 = v26 - v22;
  if (v26 - v22 == -1) {
    goto LABEL_49;
  }
LABEL_63:
  std::string::basic_string(a2, (const std::string *)(a1 + 80), 0, v13, (std::allocator<char> *)&v37);
  return sub_10003AFB4((uint64_t)v36);
}

void sub_100551A08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100551A1C(uint64_t a1, const std::string *a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1);
  std::string::operator=((std::string *)(a1 + 80), a2);
  return sub_10003AFB4((uint64_t)v5);
}

void sub_100551A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100551A80(uint64_t a1, unint64_t a2, uint64_t a3)
{
  v6[1] = 0;
  unint64_t v7 = a2;
  v6[0] = 0;
  sub_10003AED0((uint64_t)v6, a1);
  uint64_t v8 = &v7;
  sub_1000097B0((uint64_t **)(a1 + 104), &v7, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v8)[5] = a3;
  return sub_10003AFB4((uint64_t)v6);
}

void sub_100551AF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100551B04@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_10004191C(a2, off_1009B5200[*(int *)(a1 + 140)]);
}

void sub_100551B1C(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 72);
  id v3 = qword_100A19E50;
  BOOL v4 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (!v4) {
      return;
    }
    uint64_t v5 = *(void *)(a1 + 64);
    uint64_t v6 = (void *)(a1 + 80);
    if (*(char *)(a1 + 103) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    sub_100551B04(a1, __p);
    if (v13 >= 0) {
      unint64_t v7 = __p;
    }
    else {
      unint64_t v7 = (void **)__p[0];
    }
    *(_DWORD *)buf = 134218498;
    uint64_t v15 = v5;
    __int16 v16 = 2082;
    char v17 = v6;
    __int16 v18 = 2082;
    uint64_t v19 = v7;
    uint64_t v8 = "statedump: SM: %p Detached \"%{public}s\" type:\"%{public}s\"";
  }
  else
  {
    if (!v4) {
      return;
    }
    uint64_t v9 = *(void *)(a1 + 64);
    uint64_t v10 = (void *)(a1 + 80);
    if (*(char *)(a1 + 103) < 0) {
      uint64_t v10 = (void *)*v10;
    }
    sub_100551B04(a1, __p);
    if (v13 >= 0) {
      int v11 = __p;
    }
    else {
      int v11 = (void **)__p[0];
    }
    *(_DWORD *)buf = 134218498;
    uint64_t v15 = v9;
    __int16 v16 = 2082;
    char v17 = v10;
    __int16 v18 = 2082;
    uint64_t v19 = v11;
    uint64_t v8 = "statedump: SM: %p Attached \"%{public}s\" type:\"%{public}s\"";
  }
  _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, v8, buf, 0x20u);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
}

uint64_t sub_100551CA0(uint64_t a1)
{
  *(void *)a1 = off_1009B5240;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  sub_100052DA8(a1 + 40);
  *(_WORD *)(a1 + 106) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 120) = a1 + 128;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 144) = a1 + 152;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 168) = a1 + 176;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 192) = a1 + 200;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 216) = a1 + 224;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 240) = a1 + 248;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 264) = a1 + 272;
  *(void *)(a1 + 280) = 0;
  *(_WORD *)(a1 + 104) = getpid();
  unint64_t v3 = 4294901760;
  BOOL v4 = &v3;
  sub_1000097B0((uint64_t **)(a1 + 144), &v3, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v4)[5] = 4294901760;
  unint64_t v3 = 4294901762;
  BOOL v4 = &v3;
  sub_1000097B0((uint64_t **)(a1 + 144), &v3, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v4)[5] = 4294901760;
  unint64_t v3 = 4294901761;
  BOOL v4 = &v3;
  sub_1000097B0((uint64_t **)(a1 + 144), &v3, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v4)[5] = 4294901760;
  return a1;
}

void sub_100551E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, char **a15, uint64_t a16, void **a17)
{
  sub_1000486F0(a9, *v18);
  sub_1000486F0(v24, *v23);
  sub_1000486F0(a10, *v22);
  sub_1000486F0(a11, *v21);
  sub_1000486F0(a12, *v19);
  sub_1000486F0(v20, *a13);
  sub_10004BA28(a14, *a15);
  sub_100052DA4(a16);
  char v26 = *a17;
  if (*a17)
  {
    *(void *)(v17 + 24) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100551F08(uint64_t a1)
{
  *(void *)a1 = off_1009B5240;
  sub_100552BF0(a1);
  sub_1000486F0(a1 + 264, *(void **)(a1 + 272));
  sub_1000486F0(a1 + 240, *(void **)(a1 + 248));
  sub_1000486F0(a1 + 216, *(void **)(a1 + 224));
  sub_1000486F0(a1 + 192, *(void **)(a1 + 200));
  sub_1000486F0(a1 + 168, *(void **)(a1 + 176));
  sub_1000486F0(a1 + 144, *(void **)(a1 + 152));
  sub_10004BA28(a1 + 120, *(char **)(a1 + 128));
  sub_100052DA4(a1 + 40);
  int v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(void *)(a1 + 24) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_100551FB8(_Unwind_Exception *a1)
{
  sub_1000486F0(v1 + 264, *(void **)(v1 + 272));
  sub_1000486F0(v1 + 240, *(void **)(v1 + 248));
  sub_1000486F0(v1 + 216, *(void **)(v1 + 224));
  sub_1000486F0(v1 + 192, *(void **)(v1 + 200));
  sub_1000486F0(v1 + 168, *(void **)(v1 + 176));
  sub_1000486F0(v1 + 144, *(void **)(v1 + 152));
  sub_10004BA28(v1 + 120, *(char **)(v1 + 128));
  sub_100052DA4(v1 + 40);
  unint64_t v3 = *(void **)(v1 + 16);
  if (v3)
  {
    *(void *)(v1 + 24) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

void sub_100552034(uint64_t a1)
{
  sub_100551F08(a1);

  operator delete();
}

uint64_t sub_10055206C(uint64_t a1)
{
  v3[0] = 0;
  v3[1] = 0;
  sub_10003AED0((uint64_t)v3, a1 + 40);
  if (!*(unsigned char *)(a1 + 108))
  {
    *(unsigned char *)(a1 + 108) = 1;
    sub_10003AFE8((uint64_t)v3);
    sub_100017768();
    if (qword_1009FB288 != -1) {
      dispatch_once(&qword_1009FB288, &stru_1009B52C0);
    }
    sub_10030D140();
    if (qword_1009F8158 != -1) {
      dispatch_once(&qword_1009F8158, &stru_1009B52E0);
    }
    sub_1004F9858((uint64_t)off_1009F8150);
    if (qword_1009FB160 != -1) {
      dispatch_once(&qword_1009FB160, &stru_1009B5300);
    }
    (**(void (***)(void *))off_1009FB158)(off_1009FB158);
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009B5320);
    }
    (**(void (***)(void *))off_1009F7EF8)(off_1009F7EF8);
    if (qword_1009F7EB0 != -1) {
      dispatch_once(&qword_1009F7EB0, &stru_1009B5340);
    }
    (**(void (***)(void *))off_1009F7EA8)(off_1009F7EA8);
    if (qword_1009F8778 != -1) {
      dispatch_once(&qword_1009F8778, &stru_1009B5360);
    }
    (**(void (***)(void *))off_1009F8770)(off_1009F8770);
    if (qword_1009F8768 != -1) {
      dispatch_once(&qword_1009F8768, &stru_1009B5380);
    }
    (**(void (***)(void *))off_1009F8760)(off_1009F8760);
    if (qword_1009F87A8 != -1) {
      dispatch_once(&qword_1009F87A8, &stru_1009B53A0);
    }
    (**(void (***)(void *))off_1009F87A0)(off_1009F87A0);
    if (qword_1009F8090 != -1) {
      dispatch_once(&qword_1009F8090, &stru_1009B53C0);
    }
    (**(void (***)(void *))off_1009F8088)(off_1009F8088);
    if (qword_1009F8398 != -1) {
      dispatch_once(&qword_1009F8398, &stru_1009B53E0);
    }
    (*(void (**)(void *))(*(void *)off_1009F8390 + 72))(off_1009F8390);
    if (qword_1009FB120 != -1) {
      dispatch_once(&qword_1009FB120, &stru_1009B5400);
    }
    (**(void (***)(void *))off_1009FB118)(off_1009FB118);
    if (qword_1009FB190 != -1) {
      dispatch_once(&qword_1009FB190, &stru_1009B5420);
    }
    sub_10072B684();
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009B52A0);
    }
    (**(void (***)(void *))off_1009F8068)(off_1009F8068);
    if (qword_1009F7EF0 != -1) {
      dispatch_once(&qword_1009F7EF0, &stru_1009B5440);
    }
    (**(void (***)(void *))off_1009F7EE8)(off_1009F7EE8);
    if (qword_1009FB698 != -1) {
      dispatch_once(&qword_1009FB698, &stru_1009B5460);
    }
    sub_1004C78AC();
  }
  return sub_10003AFB4((uint64_t)v3);
}

void sub_100552BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_100552BF0(uint64_t a1)
{
  v3[0] = 0;
  v3[1] = 0;
  sub_10003AED0((uint64_t)v3, a1 + 40);
  if (*(unsigned char *)(a1 + 108))
  {
    sub_10003AFE8((uint64_t)v3);
    if (qword_1009F8748 != -1) {
      dispatch_once(&qword_1009F8748, &stru_1009B56A0);
    }
    (*(void (**)(void *))(*(void *)off_1009F8740 + 8))(off_1009F8740);
    if (qword_1009F80B0 != -1) {
      dispatch_once(&qword_1009F80B0, &stru_1009B5620);
    }
    sub_1005574B4((unint64_t)off_1009F80A8);
    if (qword_1009FB3B8 != -1) {
      dispatch_once(&qword_1009FB3B8, &stru_1009B55E0);
    }
    sub_1005C4394((uint64_t)off_1009FB3B0);
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009B52A0);
    }
    (*(void (**)(void *))(*(void *)off_1009F8068 + 8))(off_1009F8068);
    if (qword_1009FB120 != -1) {
      dispatch_once(&qword_1009FB120, &stru_1009B5400);
    }
    (*(void (**)(void *))(*(void *)off_1009FB118 + 8))(off_1009FB118);
    if (qword_1009F8398 != -1) {
      dispatch_once(&qword_1009F8398, &stru_1009B53E0);
    }
    (*(void (**)(void *))(*(void *)off_1009F8390 + 80))(off_1009F8390);
    if (qword_1009F8090 != -1) {
      dispatch_once(&qword_1009F8090, &stru_1009B53C0);
    }
    (*(void (**)(void *))(*(void *)off_1009F8088 + 8))(off_1009F8088);
    if (qword_1009F8768 != -1) {
      dispatch_once(&qword_1009F8768, &stru_1009B5380);
    }
    (*(void (**)(void *))(*(void *)off_1009F8760 + 8))(off_1009F8760);
    if (qword_1009F87A8 != -1) {
      dispatch_once(&qword_1009F87A8, &stru_1009B53A0);
    }
    (*(void (**)(void *))(*(void *)off_1009F87A0 + 8))(off_1009F87A0);
    if (qword_1009F8778 != -1) {
      dispatch_once(&qword_1009F8778, &stru_1009B5360);
    }
    (*(void (**)(void *))(*(void *)off_1009F8770 + 8))(off_1009F8770);
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009B5320);
    }
    (*(void (**)(void *))(*(void *)off_1009F7EF8 + 8))(off_1009F7EF8);
    if (qword_1009F7EB0 != -1) {
      dispatch_once(&qword_1009F7EB0, &stru_1009B5340);
    }
    (*(void (**)(void *))(*(void *)off_1009F7EA8 + 8))(off_1009F7EA8);
    if (qword_1009FB160 != -1) {
      dispatch_once(&qword_1009FB160, &stru_1009B5300);
    }
    (*(void (**)(void *))(*(void *)off_1009FB158 + 8))(off_1009FB158);
    if (qword_1009F7EF0 != -1) {
      dispatch_once(&qword_1009F7EF0, &stru_1009B5440);
    }
    (*(void (**)(void *))(*(void *)off_1009F7EE8 + 8))(off_1009F7EE8);
    if (qword_1009F85C8 != -1) {
      dispatch_once(&qword_1009F85C8, &stru_1009B5500);
    }
    sub_1006DF968((uint64_t)off_1009F85C0);
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B5480);
    }
    (*(void (**)(void *))(*(void *)off_1009F7ED8 + 8))(off_1009F7ED8);
    if (qword_1009FB240 != -1) {
      dispatch_once(&qword_1009FB240, &stru_1009B5640);
    }
    sub_1004BF1FC(qword_1009FB238);
    if (qword_1009FB288 != -1) {
      dispatch_once(&qword_1009FB288, &stru_1009B52C0);
    }
    sub_10030D770((void *)qword_1009FB280);
    if (qword_1009FBC88 != -1) {
      dispatch_once(&qword_1009FBC88, &stru_1009B55C0);
    }
    sub_100601218((uint64_t)off_1009FBC80);
    if (qword_1009F85E8 != -1) {
      dispatch_once(&qword_1009F85E8, &stru_1009B5720);
    }
    sub_1003C5A78(qword_1009F85E0);
    sub_10003AF00((uint64_t)v3);
    *(unsigned char *)(a1 + 108) = 0;
  }
  return sub_10003AFB4((uint64_t)v3);
}

void sub_1005531FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_100553210(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, a1 + 40);
  BOOL v4 = *(void **)(a1 + 120);
  uint64_t v5 = (void *)(a1 + 128);
  if (v4 == (void *)(a1 + 128))
  {
    BOOL v7 = 0;
  }
  else
  {
    do
    {
      uint64_t v6 = v4[7];
      BOOL v7 = v6 == a2;
      if (v6 == a2) {
        break;
      }
      uint64_t v8 = (void *)v4[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void *)v4[2];
          BOOL v10 = *v9 == (void)v4;
          BOOL v4 = v9;
        }
        while (!v10);
      }
      BOOL v4 = v9;
    }
    while (v9 != v5);
  }
  sub_10003AFB4((uint64_t)v12);
  return v7;
}

unint64_t sub_1005532C4(uint64_t a1, unint64_t a2)
{
  v32[1] = 0;
  unint64_t v33 = a2;
  v32[0] = 0;
  sub_10003AED0((uint64_t)v32, a1 + 40);
  uint64_t v4 = sub_100019C0C((void *)a1, a2);
  if (a2)
  {
    uint64_t v5 = v4;
    uint64_t v6 = (uint64_t **)(a1 + 168);
    __p[0] = &v33;
    unint64_t v7 = sub_1000097B0((uint64_t **)(a1 + 168), &v33, (uint64_t)&unk_1007BE9D0, (uint64_t **)__p)[5];
    if (v7)
    {
      unint64_t v31 = 0;
      uint64_t v8 = (void *)(a1 + 152);
      unint64_t v9 = v7;
      while (++v9 < (v7 | 0xFFFF))
      {
        BOOL v10 = (void *)*v8;
        if (*v8)
        {
          int v11 = (void *)(a1 + 152);
          do
          {
            unint64_t v12 = v10[4];
            BOOL v13 = v12 >= v9;
            if (v12 >= v9) {
              int v14 = v10;
            }
            else {
              int v14 = v10 + 1;
            }
            if (v13) {
              int v11 = v10;
            }
            BOOL v10 = (void *)*v14;
          }
          while (*v14);
          if (v11 != v8 && v9 >= v11[4]) {
            continue;
          }
        }
        unint64_t v31 = v9;
        uint64_t v15 = v33;
        __p[0] = &v31;
        sub_1000097B0((uint64_t **)(a1 + 144), &v31, (uint64_t)&unk_1007BE9D0, (uint64_t **)__p)[5] = v15;
        uint64_t v16 = v31;
        __p[0] = &v33;
        sub_1000097B0(v6, &v33, (uint64_t)&unk_1007BE9D0, (uint64_t **)__p)[5] = v16;
LABEL_43:
        unint64_t v17 = v31;
        goto LABEL_44;
      }
      __int16 v18 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
      {
        if (v5)
        {
          sub_10003AE4C(v5, (uint64_t)__p);
          if (v30 >= 0) {
            uint64_t v19 = __p;
          }
          else {
            uint64_t v19 = (void **)__p[0];
          }
          *(_DWORD *)buf = 136446210;
          __int16 v35 = (const char *)v19;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Handles for session %{public}s wrapped!", buf, 0xCu);
          if (v30 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          *(_DWORD *)buf = 136446210;
          __int16 v35 = "(NULL)";
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Handles for session %{public}s wrapped!", buf, 0xCu);
        }
      }
      uint64_t v20 = v33;
      unint64_t v21 = v33;
      while (++v21 < v7)
      {
        char v22 = (void *)*v8;
        if (*v8)
        {
          uint64_t v23 = (void *)(a1 + 152);
          do
          {
            unint64_t v24 = v22[4];
            BOOL v25 = v24 >= v21;
            if (v24 >= v21) {
              char v26 = v22;
            }
            else {
              char v26 = v22 + 1;
            }
            if (v25) {
              uint64_t v23 = v22;
            }
            char v22 = (void *)*v26;
          }
          while (*v26);
          if (v23 != v8 && v21 >= v23[4]) {
            continue;
          }
        }
        unint64_t v31 = v21;
LABEL_42:
        __p[0] = &v31;
        sub_1000097B0((uint64_t **)(a1 + 144), &v31, (uint64_t)&unk_1007BE9D0, (uint64_t **)__p)[5] = v20;
        goto LABEL_43;
      }
      if (v31) {
        goto LABEL_42;
      }
      int v28 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
      {
        if (v5)
        {
          sub_10003AE4C(v5, (uint64_t)__p);
          sub_100779ABC();
        }
        else
        {
          sub_100779A70(buf, v28);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
    {
      sub_100779A08();
    }
  }
  unint64_t v17 = 0;
LABEL_44:
  sub_10003AFB4((uint64_t)v32);
  return v17;
}

void sub_100553610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10055363C(uint64_t a1, unint64_t a2)
{
  v13[0] = 0;
  v13[1] = 0;
  sub_10003AED0((uint64_t)v13, a1 + 40);
  if (a2)
  {
    uint64_t v6 = *(void **)(a1 + 152);
    uint64_t v5 = (void *)(a1 + 152);
    uint64_t v4 = v6;
    if (!v6) {
      goto LABEL_13;
    }
    unint64_t v7 = v5;
    do
    {
      unint64_t v8 = v4[4];
      BOOL v9 = v8 >= a2;
      if (v8 >= a2) {
        BOOL v10 = v4;
      }
      else {
        BOOL v10 = v4 + 1;
      }
      if (v9) {
        unint64_t v7 = v4;
      }
      uint64_t v4 = (void *)*v10;
    }
    while (*v10);
    if (v7 == v5 || v7[4] > a2) {
LABEL_13:
    }
      unint64_t v7 = v5;
    BOOL v11 = v7 != v5;
  }
  else
  {
    BOOL v11 = 0;
  }
  sub_10003AFB4((uint64_t)v13);
  return v11;
}

uint64_t sub_1005536D8(uint64_t a1, unint64_t a2)
{
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, a1 + 40);
  if (a2)
  {
    uint64_t v6 = *(void **)(a1 + 152);
    uint64_t v5 = (uint64_t *)(a1 + 152);
    uint64_t v4 = v6;
    if (v6)
    {
      unint64_t v7 = v5;
      do
      {
        unint64_t v8 = v4[4];
        BOOL v9 = v8 >= a2;
        if (v8 >= a2) {
          BOOL v10 = v4;
        }
        else {
          BOOL v10 = v4 + 1;
        }
        if (v9) {
          unint64_t v7 = v4;
        }
        uint64_t v4 = (void *)*v10;
      }
      while (*v10);
      if (v7 != v5 && v7[4] <= a2)
      {
        sub_10004D3B8((uint64_t **)v5 - 1, v7);
        operator delete(v7);
      }
    }
  }
  return sub_10003AFB4((uint64_t)v12);
}

uint64_t sub_100553778(uint64_t a1, unint64_t a2, int a3, int a4)
{
  v30[1] = 0;
  unint64_t v31 = a2;
  v30[0] = 0;
  sub_10003AED0((uint64_t)v30, a1 + 40);
  if (a2)
  {
    if (*(void *)(a1 + 112) == a2)
    {
      char v22 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_100779B44(a2, v22);
      }
    }
    else
    {
      BOOL v10 = *(void **)(a1 + 200);
      BOOL v9 = (void *)(a1 + 200);
      unint64_t v8 = v10;
      if (!v10) {
        goto LABEL_14;
      }
      BOOL v11 = v9;
      do
      {
        unint64_t v12 = v8[4];
        BOOL v13 = v12 >= a2;
        if (v12 >= a2) {
          int v14 = v8;
        }
        else {
          int v14 = v8 + 1;
        }
        if (v13) {
          BOOL v11 = v8;
        }
        unint64_t v8 = (void *)*v14;
      }
      while (*v14);
      if (v11 == v9 || v11[4] > a2) {
LABEL_14:
      }
        BOOL v11 = v9;
      if (qword_1009F8168 != -1) {
        dispatch_once(&qword_1009F8168, &stru_1009B5280);
      }
      uint64_t v15 = sub_100019C0C((void *)qword_1009F8160, a2);
      uint64_t v16 = v15;
      if (v11 == v9)
      {
        *(void *)buf = &v31;
        uint64_t v23 = sub_1000097B0((uint64_t **)v9 - 1, &v31, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
        *((_DWORD *)v23 + 10) = a3;
        *((_DWORD *)v23 + 11) = a4;
        uint64_t v24 = qword_100A19E50;
        if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO)) {
          return sub_10003AFB4((uint64_t)v30);
        }
        unint64_t v25 = v31;
        sub_10003AE4C(v16, (uint64_t)__p);
        if (v29 >= 0) {
          char v26 = __p;
        }
        else {
          char v26 = (void **)__p[0];
        }
        *(_DWORD *)buf = 134218754;
        *(void *)&uint8_t buf[4] = v25;
        __int16 v33 = 1024;
        int v34 = a3;
        __int16 v35 = 1024;
        int v36 = a4;
        __int16 v37 = 2082;
        int v38 = v26;
        uint64_t v19 = "Adding handle-identifier mapping for handle : %p \t with pid \"%d\", pidVersion \"%d\" for session %{public}s";
        uint64_t v20 = v24;
        os_log_type_t v21 = OS_LOG_TYPE_INFO;
      }
      else
      {
        if (!v15) {
          return sub_10003AFB4((uint64_t)v30);
        }
        uint64_t v17 = qword_100A19E50;
        if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
          return sub_10003AFB4((uint64_t)v30);
        }
        sub_10003AE4C(v16, (uint64_t)__p);
        if (v29 >= 0) {
          __int16 v18 = __p;
        }
        else {
          __int16 v18 = (void **)__p[0];
        }
        *(_DWORD *)buf = 134218754;
        *(void *)&uint8_t buf[4] = a2;
        __int16 v33 = 1024;
        int v34 = a3;
        __int16 v35 = 1024;
        int v36 = a4;
        __int16 v37 = 2082;
        int v38 = v18;
        uint64_t v19 = "Handle identifier entry already exists. Don't add handle : %p \t with pid \"%d\", pidVersion \"%d\" for se"
              "ssion %{public}s";
        uint64_t v20 = v17;
        os_log_type_t v21 = OS_LOG_TYPE_DEFAULT;
      }
      _os_log_impl((void *)&_mh_execute_header, v20, v21, v19, buf, 0x22u);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  return sub_10003AFB4((uint64_t)v30);
}

void sub_100553A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100553A48(uint64_t a1, unint64_t a2, int a3, int a4)
{
  v18[0] = 0;
  v18[1] = 0;
  sub_10003AED0((uint64_t)v18, a1 + 40);
  if (!a2)
  {
LABEL_18:
    uint64_t v15 = 0;
    goto LABEL_19;
  }
  BOOL v10 = *(void **)(a1 + 200);
  BOOL v9 = (void *)(a1 + 200);
  unint64_t v8 = v10;
  if (!v10) {
    goto LABEL_16;
  }
  BOOL v11 = v9;
  do
  {
    unint64_t v12 = v8[4];
    BOOL v13 = v12 >= a2;
    if (v12 >= a2) {
      int v14 = v8;
    }
    else {
      int v14 = v8 + 1;
    }
    if (v13) {
      BOOL v11 = v8;
    }
    unint64_t v8 = (void *)*v14;
  }
  while (*v14);
  if (v11 == v9 || v11[4] > a2 || *((_DWORD *)v11 + 10) != a3 || *((_DWORD *)v11 + 11) != a4)
  {
LABEL_16:
    uint64_t v16 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218496;
      unint64_t v20 = a2;
      __int16 v21 = 1024;
      int v22 = a3;
      __int16 v23 = 1024;
      int v24 = a4;
      _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Invalid handle identifier mapping found for handle %p with pid \"%d\", pidVersion \"%d\"", buf, 0x18u);
    }
    goto LABEL_18;
  }
  uint64_t v15 = 1;
LABEL_19:
  sub_10003AFB4((uint64_t)v18);
  return v15;
}

uint64_t sub_100553B9C(uint64_t a1, unint64_t a2)
{
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, a1 + 40);
  if (a2)
  {
    uint64_t v6 = *(void **)(a1 + 200);
    uint64_t v5 = (uint64_t *)(a1 + 200);
    uint64_t v4 = v6;
    if (v6)
    {
      unint64_t v7 = v5;
      do
      {
        unint64_t v8 = v4[4];
        BOOL v9 = v8 >= a2;
        if (v8 >= a2) {
          BOOL v10 = v4;
        }
        else {
          BOOL v10 = v4 + 1;
        }
        if (v9) {
          unint64_t v7 = v4;
        }
        uint64_t v4 = (void *)*v10;
      }
      while (*v10);
      if (v7 != v5 && v7[4] <= a2)
      {
        sub_10004D3B8((uint64_t **)v5 - 1, v7);
        operator delete(v7);
      }
    }
  }
  return sub_10003AFB4((uint64_t)v12);
}

char *sub_100553C3C(uint64_t a1, int a2, char *a3, size_t a4)
{
  if (!a4) {
    return 0;
  }
  *(void *)BOOL v10 = 0xE00000001;
  int v11 = 1;
  int v12 = a2;
  bzero(v8, 0x288uLL);
  size_t v7 = 648;
  if (sysctl(v10, 4u, v8, &v7, 0, 0)) {
    *a3 = 0;
  }
  else {
    strlcpy(a3, v9, a4);
  }
  return a3;
}

BOOL sub_100553D18(uint64_t a1, unint64_t a2)
{
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, a1 + 40);
  uint64_t v4 = (void *)(a1 + 272);
  uint64_t v5 = *(void **)(a1 + 272);
  if (!v5) {
    goto LABEL_12;
  }
  uint64_t v6 = (void *)(a1 + 272);
  do
  {
    unint64_t v7 = v5[4];
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      BOOL v9 = v5;
    }
    else {
      BOOL v9 = v5 + 1;
    }
    if (v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = (void *)*v9;
  }
  while (*v9);
  if (v6 == v4 || v6[4] > a2) {
LABEL_12:
  }
    uint64_t v6 = (void *)(a1 + 272);
  BOOL v10 = v6 != v4;
  sub_10003AFB4((uint64_t)v12);
  return v10;
}

uint64_t sub_100553DAC(uint64_t a1, unint64_t a2, int a3, int a4)
{
  v19[1] = 0;
  unint64_t v20 = a2;
  v19[0] = 0;
  sub_10003AED0((uint64_t)v19, a1 + 40);
  BOOL v10 = *(void **)(a1 + 224);
  BOOL v9 = (void *)(a1 + 224);
  BOOL v8 = v10;
  if (!v10) {
    goto LABEL_12;
  }
  int v11 = v9;
  do
  {
    unint64_t v12 = v8[4];
    BOOL v13 = v12 >= a2;
    if (v12 >= a2) {
      int v14 = v8;
    }
    else {
      int v14 = v8 + 1;
    }
    if (v13) {
      int v11 = v8;
    }
    BOOL v8 = (void *)*v14;
  }
  while (*v14);
  if (v11 != v9 && v11[4] <= a2)
  {
    if (qword_1009F8168 != -1) {
      dispatch_once(&qword_1009F8168, &stru_1009B5280);
    }
    uint64_t v17 = sub_100019C0C((void *)qword_1009F8160, a2);
    if (v17 && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
    {
      sub_10003AE4C(v17, (uint64_t)v18);
      sub_100779BC8();
    }
  }
  else
  {
LABEL_12:
    v18[0] = (uint64_t *)&v20;
    uint64_t v15 = sub_1000097B0((uint64_t **)v9 - 1, &v20, (uint64_t)&unk_1007BE9D0, v18);
    *((_DWORD *)v15 + 10) = a3;
    *((_DWORD *)v15 + 11) = a4;
  }
  return sub_10003AFB4((uint64_t)v19);
}

void sub_100553F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100553F34(uint64_t a1, unint64_t a2, int a3, int a4)
{
  v22[0] = 0;
  v22[1] = 0;
  sub_10003AED0((uint64_t)v22, a1 + 40);
  if (!a2)
  {
LABEL_20:
    uint64_t v15 = 0;
    goto LABEL_21;
  }
  BOOL v10 = *(void **)(a1 + 224);
  BOOL v9 = (void *)(a1 + 224);
  BOOL v8 = v10;
  if (!v10) {
    goto LABEL_16;
  }
  int v11 = v9;
  do
  {
    unint64_t v12 = v8[4];
    BOOL v13 = v12 >= a2;
    if (v12 >= a2) {
      int v14 = v8;
    }
    else {
      int v14 = v8 + 1;
    }
    if (v13) {
      int v11 = v8;
    }
    BOOL v8 = (void *)*v14;
  }
  while (*v14);
  if (v11 == v9 || v11[4] > a2 || *((_DWORD *)v11 + 10) != a3 || *((_DWORD *)v11 + 11) != a4)
  {
LABEL_16:
    if (qword_1009F8168 != -1) {
      dispatch_once(&qword_1009F8168, &stru_1009B5280);
    }
    uint64_t v16 = sub_100019C0C((void *)qword_1009F8160, a2);
    if (v16)
    {
      uint64_t v17 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
      {
        sub_10003AE4C(v16, (uint64_t)__p);
        if (v21 >= 0) {
          uint64_t v19 = __p;
        }
        else {
          uint64_t v19 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136446722;
        int v24 = v19;
        __int16 v25 = 1024;
        int v26 = a3;
        __int16 v27 = 1024;
        int v28 = a4;
        _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Invalid SessionProcessIdentifierMapping for session \"%{public}s\" with pid \"%d\", pidVersion \"%d\"", buf, 0x18u);
        if (v21 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    goto LABEL_20;
  }
  uint64_t v15 = 1;
LABEL_21:
  sub_10003AFB4((uint64_t)v22);
  return v15;
}

void sub_1005540FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_10055411C(uint64_t a1, unint64_t a2)
{
  v14[0] = 0;
  v14[1] = 0;
  sub_10003AED0((uint64_t)v14, a1 + 40);
  if (a2)
  {
    uint64_t v6 = *(void **)(a1 + 224);
    uint64_t v5 = (uint64_t *)(a1 + 224);
    uint64_t v4 = v6;
    if (!v6) {
      goto LABEL_13;
    }
    unint64_t v7 = v5;
    do
    {
      unint64_t v8 = v4[4];
      BOOL v9 = v8 >= a2;
      if (v8 >= a2) {
        BOOL v10 = v4;
      }
      else {
        BOOL v10 = v4 + 1;
      }
      if (v9) {
        unint64_t v7 = v4;
      }
      uint64_t v4 = (void *)*v10;
    }
    while (*v10);
    if (v7 != v5 && v7[4] <= a2)
    {
      sub_10004D3B8((uint64_t **)v5 - 1, v7);
      operator delete(v7);
      a2 = 1;
    }
    else
    {
LABEL_13:
      if (qword_1009F8168 != -1) {
        dispatch_once(&qword_1009F8168, &stru_1009B5280);
      }
      uint64_t v11 = sub_100019C0C((void *)qword_1009F8160, a2);
      if (v11 && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
      {
        sub_10003AE4C(v11, (uint64_t)v13);
        sub_100779C1C();
      }
      a2 = 0;
    }
  }
  sub_10003AFB4((uint64_t)v14);
  return a2;
}

void sub_100554270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100554290(uint64_t a1, unint64_t a2)
{
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, a1 + 40);
  if (a2)
  {
    uint64_t v4 = *(void **)(a1 + 272);
    if (!v4) {
      goto LABEL_13;
    }
    uint64_t v5 = (void *)(a1 + 272);
    do
    {
      unint64_t v6 = v4[4];
      BOOL v7 = v6 >= a2;
      if (v6 >= a2) {
        unint64_t v8 = v4;
      }
      else {
        unint64_t v8 = v4 + 1;
      }
      if (v7) {
        uint64_t v5 = v4;
      }
      uint64_t v4 = (void *)*v8;
    }
    while (*v8);
    if (v5 != (void *)(a1 + 272) && v5[4] <= a2)
    {
      if (qword_1009F8168 != -1) {
        dispatch_once(&qword_1009F8168, &stru_1009B5280);
      }
      uint64_t v10 = sub_100019C0C((void *)qword_1009F8160, a2);
      if (v10 && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
      {
        sub_10003AE4C(v10, (uint64_t)v11);
        sub_100779C70();
      }
    }
    else
    {
LABEL_13:
      v11[0] = a2;
      sub_100051620((uint64_t **)(a1 + 264), (unint64_t *)v11, v11);
    }
  }
  return sub_10003AFB4((uint64_t)v12);
}

void sub_1005543D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005543F8(uint64_t a1, unint64_t a2)
{
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, a1 + 40);
  if (a2)
  {
    uint64_t v4 = *(void **)(a1 + 272);
    if (v4)
    {
      uint64_t v5 = (uint64_t **)(a1 + 264);
      unint64_t v6 = (uint64_t *)(a1 + 272);
      BOOL v7 = (uint64_t *)(a1 + 272);
      do
      {
        unint64_t v8 = v4[4];
        BOOL v9 = v8 >= a2;
        if (v8 >= a2) {
          uint64_t v10 = v4;
        }
        else {
          uint64_t v10 = v4 + 1;
        }
        if (v9) {
          BOOL v7 = v4;
        }
        uint64_t v4 = (void *)*v10;
      }
      while (*v10);
      if (v7 != v6 && v7[4] <= a2)
      {
        sub_10004D3B8(v5, v7);
        operator delete(v7);
      }
    }
  }
  return sub_10003AFB4((uint64_t)v12);
}

uint64_t sub_100554494(uint64_t a1, unint64_t a2, int a3)
{
  v12[1] = 0;
  unint64_t v13 = a2;
  v12[0] = 0;
  sub_10003AED0((uint64_t)v12, a1 + 40);
  if (a2)
  {
    if (qword_1009F8168 != -1) {
      dispatch_once(&qword_1009F8168, &stru_1009B5280);
    }
    uint64_t v6 = sub_100019C0C((void *)qword_1009F8160, a2);
    if (v6)
    {
      BOOL v7 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        sub_10003AE4C(v6, (uint64_t)__p);
        if (v11 >= 0) {
          unint64_t v8 = __p;
        }
        else {
          unint64_t v8 = (void **)__p[0];
        }
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = a3;
        __int16 v15 = 2048;
        unint64_t v16 = a2;
        __int16 v17 = 2082;
        __int16 v18 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Local device event mask %x for handle : %p \t for session %{public}s", buf, 0x1Cu);
        if (v11 < 0) {
          operator delete(__p[0]);
        }
      }
      *(void *)buf = &v13;
      *((_DWORD *)sub_1005031E0((uint64_t **)(a1 + 240), &v13, (uint64_t)&unk_1007BE9D0, (void **)buf) + 10) = a3;
    }
  }
  return sub_10003AFB4((uint64_t)v12);
}

void sub_100554620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100554640(uint64_t a1, unint64_t a2)
{
  v13[1] = 0;
  unint64_t v14 = a2;
  v13[0] = 0;
  sub_10003AED0((uint64_t)v13, a1 + 40);
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_100779CC4();
    }
    goto LABEL_19;
  }
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009B5280);
  }
  if (!sub_100019C0C((void *)qword_1009F8160, a2)) {
    goto LABEL_19;
  }
  uint64_t v6 = *(void **)(a1 + 248);
  uint64_t v5 = (void *)(a1 + 248);
  uint64_t v4 = v6;
  if (!v6) {
    goto LABEL_19;
  }
  BOOL v7 = v5;
  do
  {
    unint64_t v8 = v4[4];
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      uint64_t v10 = v4;
    }
    else {
      uint64_t v10 = v4 + 1;
    }
    if (v9) {
      BOOL v7 = v4;
    }
    uint64_t v4 = (void *)*v10;
  }
  while (*v10);
  if (v7 == v5 || v7[4] > a2)
  {
LABEL_19:
    uint64_t v11 = 0;
    goto LABEL_20;
  }
  __int16 v15 = &v14;
  uint64_t v11 = *((unsigned int *)sub_1005031E0((uint64_t **)v5 - 1, &v14, (uint64_t)&unk_1007BE9D0, &v15) + 10);
LABEL_20:
  sub_10003AFB4((uint64_t)v13);
  return v11;
}

void sub_100554760(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100554778(uint64_t result, uint64_t a2)
{
  *(void *)(result + 112) = a2;
  return result;
}

void sub_100554780(uint64_t a1)
{
  int v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: ------------------ Session Manager ------------------", buf, 2u);
    int v2 = qword_100A19E50;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int16 *)(a1 + 106);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Session count (lifetime): %d", buf, 8u);
    int v2 = qword_100A19E50;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Current sessions:", buf, 2u);
  }
  uint64_t v4 = *(void **)(a1 + 120);
  if (v4 != (void *)(a1 + 128))
  {
    do
    {
      sub_100551B1C(v4[7]);
      uint64_t v5 = (void *)v4[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (void *)v4[2];
          BOOL v7 = *v6 == (void)v4;
          uint64_t v4 = v6;
        }
        while (!v7);
      }
      uint64_t v4 = v6;
    }
    while (v6 != (void *)(a1 + 128));
  }
  char v38 = 0;
  uint64_t v8 = sub_100017768();
  sub_10004191C(buf, "BTSessionManager");
  sub_10004191C(__p, "StateDumpHandleMapLogging");
  int v9 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v8 + 72))(v8, buf, __p, &v38);
  if (v38) {
    int v10 = v9;
  }
  else {
    int v10 = 0;
  }
  if (v37 < 0) {
    operator delete(__p[0]);
  }
  if ((v41[9] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v10) {
      return;
    }
  }
  else if (!v10)
  {
    return;
  }
  uint64_t v11 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "statedump: External handle map:", buf, 2u);
    uint64_t v11 = qword_100A19E50;
  }
  unint64_t v12 = *(void **)(a1 + 144);
  if (v12 != (void *)(a1 + 152))
  {
    do
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = v12[4];
        uint64_t v14 = v12[5];
        *(_DWORD *)buf = 134218240;
        *(void *)&uint8_t buf[4] = v13;
        __int16 v40 = 2048;
        *(void *)__int16 v41 = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "statedump:    %p → %p", buf, 0x16u);
        uint64_t v11 = qword_100A19E50;
      }
      __int16 v15 = (void *)v12[1];
      if (v15)
      {
        do
        {
          unint64_t v16 = v15;
          __int16 v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          unint64_t v16 = (void *)v12[2];
          BOOL v7 = *v16 == (void)v12;
          unint64_t v12 = v16;
        }
        while (!v7);
      }
      unint64_t v12 = v16;
    }
    while (v16 != (void *)(a1 + 152));
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "statedump: Handle identifier map:", buf, 2u);
    uint64_t v11 = qword_100A19E50;
  }
  __int16 v17 = *(void **)(a1 + 192);
  if (v17 != (void *)(a1 + 200))
  {
    do
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = v17[4];
        int v19 = *((_DWORD *)v17 + 10);
        int v20 = *((_DWORD *)v17 + 11);
        *(_DWORD *)buf = 134218496;
        *(void *)&uint8_t buf[4] = v18;
        __int16 v40 = 1024;
        *(_DWORD *)__int16 v41 = v19;
        *(_WORD *)&v41[4] = 1024;
        *(_DWORD *)&v41[6] = v20;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "statedump:    %p → %d, %u", buf, 0x18u);
        uint64_t v11 = qword_100A19E50;
      }
      char v21 = (void *)v17[1];
      if (v21)
      {
        do
        {
          int v22 = v21;
          char v21 = (void *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          int v22 = (void *)v17[2];
          BOOL v7 = *v22 == (void)v17;
          __int16 v17 = v22;
        }
        while (!v7);
      }
      __int16 v17 = v22;
    }
    while (v22 != (void *)(a1 + 200));
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "statedump: Session-Process identifier map:", buf, 2u);
    uint64_t v11 = qword_100A19E50;
  }
  __int16 v23 = *(void **)(a1 + 216);
  if (v23 != (void *)(a1 + 224))
  {
    do
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v24 = v23[4];
        int v25 = *((_DWORD *)v23 + 10);
        int v26 = *((_DWORD *)v23 + 11);
        *(_DWORD *)buf = 134218496;
        *(void *)&uint8_t buf[4] = v24;
        __int16 v40 = 1024;
        *(_DWORD *)__int16 v41 = v25;
        *(_WORD *)&v41[4] = 1024;
        *(_DWORD *)&v41[6] = v26;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "statedump:    %p → %d, %u", buf, 0x18u);
        uint64_t v11 = qword_100A19E50;
      }
      __int16 v27 = (void *)v23[1];
      if (v27)
      {
        do
        {
          int v28 = v27;
          __int16 v27 = (void *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          int v28 = (void *)v23[2];
          BOOL v7 = *v28 == (void)v23;
          __int16 v23 = v28;
        }
        while (!v7);
      }
      __int16 v23 = v28;
    }
    while (v28 != (void *)(a1 + 224));
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "statedump: Handle-Masked Local device events map:", buf, 2u);
  }
  char v29 = *(void **)(a1 + 240);
  char v30 = (void *)(a1 + 248);
  if (v29 != (void *)(a1 + 248))
  {
    unint64_t v31 = qword_100A19E50;
    do
    {
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v32 = v29[4];
        int v33 = *((_DWORD *)v29 + 10);
        *(_DWORD *)buf = 134218240;
        *(void *)&uint8_t buf[4] = v32;
        __int16 v40 = 1024;
        *(_DWORD *)__int16 v41 = v33;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "statedump:    %p → %u", buf, 0x12u);
        unint64_t v31 = qword_100A19E50;
      }
      int v34 = (void *)v29[1];
      if (v34)
      {
        do
        {
          __int16 v35 = v34;
          int v34 = (void *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          __int16 v35 = (void *)v29[2];
          BOOL v7 = *v35 == (void)v29;
          char v29 = v35;
        }
        while (!v7);
      }
      char v29 = v35;
    }
    while (v35 != v30);
  }
}

void sub_100554D70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_100554DAC(id a1)
{
}

void sub_100554DF0()
{
}

void sub_100554E14(id a1)
{
}

void sub_100554E58()
{
}

void sub_100554E7C(id a1)
{
}

void sub_100554F00()
{
  int v3 = *v2;
  if (*v2)
  {
    *(void *)(v0 + 48) = v3;
    operator delete(v3);
  }
  sub_10030F284(v1, *(void **)(v0 + 16));

  operator delete();
}

void sub_100554F4C(id a1)
{
}

void sub_1005550DC()
{
}

void sub_100555100(id a1)
{
}

void sub_100555144()
{
}

void sub_100555168(id a1)
{
}

void sub_1005551AC()
{
}

void sub_1005551D0(id a1)
{
}

void sub_100555214()
{
}

void sub_100555238(id a1)
{
}

void sub_10055527C()
{
}

void sub_1005552A0(id a1)
{
}

void sub_1005552E4()
{
}

void sub_100555308(id a1)
{
}

void sub_10055534C()
{
}

void sub_100555370(id a1)
{
}

void sub_1005553B4()
{
}

void sub_1005553D8(id a1)
{
}

void sub_10055541C()
{
}

void sub_100555440(id a1)
{
}

void sub_100555484()
{
}

void sub_1005554A8(id a1)
{
}

void sub_1005554D8(id a1)
{
}

void sub_10055551C()
{
}

void sub_100555540(id a1)
{
}

void sub_100555584()
{
}

void sub_1005555A8(id a1)
{
}

void sub_1005555EC()
{
}

void sub_100555610(id a1)
{
}

void sub_100555654()
{
}

void sub_100555678(id a1)
{
}

void sub_1005556BC()
{
}

void sub_1005556E0(id a1)
{
}

void sub_100555724()
{
}

void sub_100555748(id a1)
{
}

void sub_10055578C()
{
}

void sub_1005557B0(id a1)
{
}

void sub_1005557F4()
{
}

void sub_100555818(id a1)
{
}

void sub_10055585C()
{
}

void sub_100555880(id a1)
{
}

void sub_1005558C4()
{
}

void sub_1005558E8(id a1)
{
}

void sub_10055592C()
{
}

void sub_100555950(id a1)
{
}

void sub_100555994()
{
}

void sub_1005559B8(id a1)
{
}

void sub_1005559FC()
{
}

void sub_100555A20(id a1)
{
}

void sub_100555A64()
{
}

void sub_100555A88(id a1)
{
}

void sub_100555ACC()
{
}

void sub_100555AF0(id a1)
{
}

void sub_100555B34()
{
}

void sub_100555B58(id a1)
{
}

void sub_100555B9C()
{
}

void sub_100555BC0(id a1)
{
}

void sub_100555C04()
{
}

void sub_100555C28(id a1)
{
}

void sub_100555C6C(id a1)
{
}

void sub_100555CB0()
{
}

void sub_100555CD4(id a1)
{
}

void sub_100555D18()
{
}

void sub_100555D3C(id a1)
{
}

void sub_100555D80()
{
}

void sub_100555DA4(id a1)
{
}

void sub_100555DE8()
{
}

void sub_100555E0C(id a1)
{
}

void sub_100555E50()
{
}

void sub_100555E74(uint64_t a1)
{
  *(void *)a1 = off_1009B5750;
  *(void *)(a1 + 8) = off_1009B5918;
  *(void *)(a1 + 16) = off_1009B5948;
  *(void *)(a1 + 24) = off_1009B5988;
  *(void *)(a1 + 32) = &off_1009B5A18;
  *(void *)(a1 + 40) = &off_1009B5A30;
  *(void *)(a1 + 48) = &off_1009B5A48;
  *(void *)(a1 + 56) = &off_1009B5A60;
  *(void *)(a1 + 64) = &off_1009B5A78;
  *(void *)(a1 + 72) = off_1009B5A90;
  *(void *)(a1 + 80) = &off_1009B5AB8;
  *(void *)(a1 + 88) = off_1009B5AD0;
  *(void *)(a1 + 96) = &off_1009B5AF0;
  *(void *)(a1 + 104) = &off_1009B5B08;
  *(void *)(a1 + 112) = &off_1009B5B20;
  *(void *)(a1 + 120) = &off_1009B5B38;
  *(void *)(a1 + 128) = off_1009B5B50;
  *(void *)(a1 + 136) = off_1009B5BA0;
  *(void *)(a1 + 144) = off_1009B5BD0;
  *(unsigned char *)(a1 + 160) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 192) = a1 + 200;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 224) = 0;
  sub_100052DA8(a1 + 280);
  *(_WORD *)(a1 + 344) = 0;
  *(unsigned char *)(a1 + 363) = 0;
  *(_OWORD *)(a1 + 347) = 0u;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0x404E000000000000;
  *(unsigned char *)(a1 + 384) = 0;
  *(void *)(a1 + 826) = 0;
  *(void *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_DWORD *)(a1 + 864) = 3;
  *(unsigned char *)(a1 + 869) = 0;
  *(_DWORD *)(a1 + 872) = 0;
  *(unsigned char *)(a1 + 1008) = 0;
  *(void *)(a1 + 1016) = 0;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(void *)(a1 + 1096) = 0;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(void *)(a1 + 912) = 0;
  *(void *)(a1 + 1104) = a1 + 1112;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(void *)(a1 + 1136) = a1 + 1144;
  *(void *)(a1 + 1168) = 0;
  *(void *)(a1 + 1200) = 0;
  *(_OWORD *)(a1 + 1184) = 0u;
  int v2 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, -1);
  *(void *)(a1 + 256) = dispatch_queue_create("com.apple.AudioLinkManagerSerialQueue", v2);
  int v3 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INTERACTIVE, -1);
  *(void *)(a1 + 264) = dispatch_queue_create("com.apple.AudioLinkManagerLowLatencyQueue", v3);
  mach_timebase_info((mach_timebase_info_t)(a1 + 272));
  uint64_t v4 = 0;
  *(_WORD *)(a1 + 998) = 0;
  *(void *)(a1 + 1000) = 0;
  *(_WORD *)(a1 + 868) = 1;
  *(_WORD *)(a1 + 920) = 1;
  *(_DWORD *)(a1 + 928) = 0;
  *(_DWORD *)(a1 + 1076) = 0;
  *(void *)(a1 + 1060) = 0;
  *(void *)(a1 + 1068) = 0;
  *(void *)(a1 + 1052) = 0;
  do
  {
    *(_WORD *)(a1 + v4 + 932) = -25444;
    v4 += 6;
  }
  while (v4 != 18);
  *(void *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 950) = 0;
  operator new();
}

void sub_1005562BC()
{
}

void sub_1005563A8(uint64_t a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B5E38);
  }
  sub_10026B36C((uint64_t)off_1009F8068 + 64, a1 + 8);
  int v2 = *(NSObject **)(a1 + 256);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1005564A4;
  block[3] = &unk_100997528;
  void block[4] = a1;
  dispatch_async(v2, block);
  uint64_t v3 = sub_10003FB34();
  sub_100353FC0(v3, a1);
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_1009B5EF8);
  }
  sub_1004F9E94((uint64_t)off_1009F8150, a1 + 128);
}

uint64_t sub_1005564A4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1009FB058 != -1) {
    dispatch_once(&qword_1009FB058, &stru_1009B5E58);
  }
  sub_100574FC4((uint64_t)off_1009FB050 + 328, v1 + 72);
  uint64_t v2 = sub_100035F54();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v2 + 144))(v2) & 1) != 0
    || (uint64_t v3 = sub_100035F54(), (*(unsigned int (**)(uint64_t))(*(void *)v3 + 152))(v3)))
  {
    uint64_t v4 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v22[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Current platform supports enhanced diversity, subscribing to device orientation update", (uint8_t *)v22, 2u);
    }
    uint64_t v5 = sub_10003FFD4();
    sub_100575290(v5 + 848, v1 + 64);
    uint64_t v6 = sub_10003FFD4();
    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 248))(v6);
    *(_DWORD *)(v1 + 872) = v7;
    uint64_t v8 = qword_100A19E48;
    if (v7)
    {
      int v9 = v7;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        v22[0] = 67109120;
        v22[1] = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Device orientation initialized to %u", (uint8_t *)v22, 8u);
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR))
    {
      sub_100779D2C();
    }
  }
  uint64_t v10 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t, void))(*(void *)v10 + 792))(v10, 0))
  {
    uint64_t v11 = sub_10003FFD4();
    sub_1005755A0(v11 + 888, v1 + 80);
    uint64_t v12 = sub_10003FFD4();
    (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 216))(v12, *(void *)(v1 + 216) + 2);
  }
  uint64_t v13 = sub_10003FFD4();
  sub_1005758B0(v13 + 968, v1 + 104);
  uint64_t v14 = sub_10003FFD4();
  sub_10054C6C0(v14 + 1168, v1 + 120);
  uint64_t v15 = sub_10003FFD4();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 200))(v15, *(void *)(v1 + 216) + 4);
  uint64_t v16 = sub_10003FFD4();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 224))(v16, v1 + 920);
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009B5E78);
  }
  sub_100575BC0(qword_1009F8410 + 432, v1 + 24);
  if (qword_1009F8090 != -1) {
    dispatch_once(&qword_1009F8090, &stru_1009B5E98);
  }
  sub_1004D12B0(off_1009F8088, v1 + 40);
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009B5EB8);
  }
  sub_100457490(qword_1009F8160 + 8, v1 + 88);
  if (_os_feature_enabled_impl())
  {
    if (qword_1009F8130 != -1) {
      dispatch_once(&qword_1009F8130, &stru_1009B5ED8);
    }
    sub_1002CDBA8(qword_1009F8128, v1 + 144);
  }
  if (*(unsigned char *)(v1 + 344))
  {
    sub_100556990(v1);
    sub_100556D3C(v1);
    uint64_t v17 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v17 + 792))(v17, 1))
    {
      uint64_t v18 = sub_10003FFD4();
      sub_100575E8C(v18 + 928, v1 + 96);
      uint64_t v19 = sub_10003FFD4();
      (*(void (**)(uint64_t))(*(void *)v19 + 232))(v19);
      uint64_t v20 = sub_10003FFD4();
      sub_10057619C(v20 + 1008, v1 + 112);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR))
  {
    sub_100779CF8();
  }
  *(unsigned char *)(v1 + 1160) = 0;
  *(void *)(v1 + 1128) = 0;
  *(void *)(v1 + 1176) = 0xFFFFFFFF00000000;
  std::string::assign((std::string *)(v1 + 1184), "");
  notify_register_check("com.apple.bluetooth.GuestConnected", (int *)(v1 + 1180));
  std::string::assign((std::string *)(v1 + 1080), "Off");
  *(_DWORD *)(v1 + 1048) = -1;
  return notify_register_check("com.apple.bluetooth.SmartRoutingDisconnectReason", (int *)(v1 + 1048));
}

void sub_100556990(uint64_t a1)
{
  uint64_t v2 = sub_100035F54();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v2 + 136))(v2)) {
    goto LABEL_28;
  }
  uint64_t v3 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 384))(v3))
  {
    uint64_t v4 = sub_100017768();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 320))(v4))
    {
      uint64_t v5 = sub_100017768();
      (*(void (**)(uint64_t))(*(void *)v5 + 328))(v5);
    }
    goto LABEL_28;
  }
  sub_10056EF88();
  uint64_t v6 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 424))(v6))
  {
    uint64_t v7 = sub_100017768();
    sub_10004191C(buf, "MRC");
    sub_10004191C(__p, "DisableMRC");
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, uint64_t))(*(void *)v7 + 72))(v7, buf, __p, a1 + 1008);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v19 < 0) {
      operator delete(*(void **)buf);
    }
    if (*(unsigned char *)(a1 + 1008))
    {
      if (sub_10056E280(v8, 1, 0, 0)) {
        goto LABEL_18;
      }
      int v9 = qword_100A19E48;
      if (!os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_18;
      }
      *(_WORD *)buf = 0;
      uint64_t v10 = "Global MRC disabled for this platform";
    }
    else
    {
      if (sub_10056E280(v8, 1, 0, 1)) {
        goto LABEL_18;
      }
      int v9 = qword_100A19E48;
      if (!os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_18;
      }
      *(_WORD *)buf = 0;
      uint64_t v10 = "Global MRC enabled for this platform";
    }
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v10, buf, 2u);
  }
LABEL_18:
  uint64_t v11 = sub_10003FB34();
  if (*(_DWORD *)(v11 + 712) <= 0x13u) {
    sub_10056F0DC(v11, 1);
  }
  if (sub_1003FAF7C() == 28 || sub_1003FAF7C() == 23) {
    sub_10056F21C(a1, 0, 3);
  }
  uint64_t v12 = sub_1003FAF7C();
  if (v12 == 126 || (uint64_t v12 = sub_1003FAF7C(), v12 == 128))
  {
    if (!sub_10056E280(v12, 1, 0, 1))
    {
      uint64_t v13 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Global MRC enabled for this platform", buf, 2u);
      }
    }
  }
LABEL_28:
  uint64_t v14 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v14 + 144))(v14))
  {
    uint64_t v15 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Current platform supports enhanced diversity", buf, 2u);
    }
  }
}

void sub_100556D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_100556D3C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 347))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEBUG)) {
      sub_100779D60();
    }
  }
  else
  {
    unsigned __int8 v26 = 2;
    int v25 = 5;
    v23[0] = 0;
    v23[1] = 0;
    uint64_t v24 = 0;
    v21[0] = 0;
    v21[1] = 0;
    uint64_t v22 = 0;
    uint64_t v2 = sub_100017768();
    sub_10004191C(buf, "LinkAdaptiveBitrateAAC");
    sub_10004191C(__p, "configs");
    (*(void (**)(uint64_t, unsigned char *, void **, unsigned __int8 *))(*(void *)v2 + 88))(v2, buf, __p, &v26);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    if (v28 < 0) {
      operator delete(*(void **)buf);
    }
    char v3 = v26;
    if (v26 >= 2u) {
      char v3 = 2;
    }
    unsigned __int8 v26 = v3;
    uint64_t v4 = sub_100017768();
    sub_10004191C(buf, "LinkAdaptiveBitrateAAC");
    sub_10004191C(__p, "bitrateCount");
    (*(void (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v4 + 88))(v4, buf, __p, &v25);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    if (v28 < 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v5 = sub_100017768();
    sub_10004191C(buf, "LinkAdaptiveBitrateAAC");
    sub_10004191C(__p, "thresholds");
    (*(void (**)(uint64_t, unsigned char *, void **, void **))(*(void *)v5 + 56))(v5, buf, __p, v23);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    if (v28 < 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v6 = (void *)HIBYTE(v24);
    int v7 = SHIBYTE(v24);
    if (v24 < 0) {
      uint64_t v6 = v23[1];
    }
    if (v6)
    {
      uint64_t v8 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = (void **)v23[0];
        if (v7 >= 0) {
          int v9 = v23;
        }
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Setting custom AAC Link Adaptive bitrate thresholds based on defaults write: %s", buf, 0xCu);
      }
    }
    uint64_t v10 = sub_100017768();
    sub_10004191C(buf, "LinkAdaptiveBitrateAAC");
    sub_10004191C(__p, "rates");
    (*(void (**)(uint64_t, unsigned char *, void **, void **))(*(void *)v10 + 56))(v10, buf, __p, v21);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    if (v28 < 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v11 = (void *)HIBYTE(v22);
    int v12 = SHIBYTE(v22);
    if (v22 < 0) {
      uint64_t v11 = v21[1];
    }
    if (v11)
    {
      uint64_t v13 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = (void **)v21[0];
        if (v12 >= 0) {
          uint64_t v14 = v21;
        }
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Setting custom AAC Link Adaptive bitrates based on defaults write: %s", buf, 0xCu);
      }
    }
    *(void *)(a1 + 1024) = *(void *)(a1 + 1016);
    if (v26) {
      operator new();
    }
    if (SHIBYTE(v24) < 0)
    {
      sub_10003B098(__dst, v23[0], (unint64_t)v23[1]);
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)v23;
      uint64_t v18 = v24;
    }
    if (SHIBYTE(v22) < 0)
    {
      sub_10003B098(v15, v21[0], (unint64_t)v21[1]);
    }
    else
    {
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v21;
      uint64_t v16 = v22;
    }
    sub_10056BFA0(a1, (uint64_t)__dst, (uint64_t)v15, v26);
    if (SHIBYTE(v16) < 0) {
      operator delete(v15[0]);
    }
    if (SHIBYTE(v18) < 0) {
      operator delete(__dst[0]);
    }
    sub_10056C304(a1);
    *(void *)(a1 + 1040) = 0x100007F00A000F4;
    *(unsigned char *)(a1 + 347) = 1;
    if (SHIBYTE(v22) < 0) {
      operator delete(v21[0]);
    }
    if (SHIBYTE(v24) < 0) {
      operator delete(v23[0]);
    }
  }
}

void sub_1005573F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005574B4(unint64_t a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B5E38);
  }
  sub_100052718((uint64_t)off_1009F8068 + 64, a1 + 8);
  uint64_t v2 = *(NSObject **)(a1 + 256);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1005575B0;
  block[3] = &unk_100997528;
  void block[4] = a1;
  dispatch_async(v2, block);
  uint64_t v3 = sub_10003FB34();
  sub_100354028(v3, a1);
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_1009B5EF8);
  }
  sub_1004F9F28((uint64_t)off_1009F8150, a1 + 128);
}

uint64_t sub_1005575B0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 208))
  {
    uint64_t v2 = (void *)(v1 + 192);
    uint64_t v3 = *(void **)(v1 + 192);
    uint64_t v4 = (void *)(v1 + 200);
    if (v3 == (void *)(v1 + 200)) {
      goto LABEL_14;
    }
    do
    {
      unint64_t v5 = v3[4];
      if (*(void *)v3[5]) {
        sub_1005579D4(v1, v3[4]);
      }
      unint64_t v25 = v5;
      sub_1000517A4(v1 + 192, &v25);
      if (qword_1009F8738 != -1) {
        dispatch_once(&qword_1009F8738, &stru_1009B5F18);
      }
      sub_10026F6F8(qword_1009F8730, v5);
      uint64_t v6 = (void *)v3[1];
      if (v6)
      {
        do
        {
          int v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          int v7 = (void *)v3[2];
          BOOL v8 = *v7 == (void)v3;
          uint64_t v3 = v7;
        }
        while (!v8);
      }
      uint64_t v3 = v7;
    }
    while (v7 != v4);
    if (*(void *)(v1 + 208))
    {
LABEL_14:
      int v9 = (void *)*v2;
      if ((void *)*v2 != v4)
      {
        do
        {
          unint64_t v10 = v9[4];
          if (*(void *)(v9[5] + 8)) {
            sub_100558290((uint64_t *)v1, v9[4]);
          }
          unint64_t v25 = v10;
          sub_1000517A4(v1 + 192, &v25);
          if (qword_1009F8738 != -1) {
            dispatch_once(&qword_1009F8738, &stru_1009B5F18);
          }
          sub_10026F6F8(qword_1009F8730, v10);
          uint64_t v11 = (void *)v9[1];
          if (v11)
          {
            do
            {
              int v12 = v11;
              uint64_t v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              int v12 = (void *)v9[2];
              BOOL v8 = *v12 == (void)v9;
              int v9 = v12;
            }
            while (!v8);
          }
          int v9 = v12;
        }
        while (v12 != v4);
      }
    }
  }
  if (qword_1009FB058 != -1) {
    dispatch_once(&qword_1009FB058, &stru_1009B5E58);
  }
  sub_100052718((uint64_t)off_1009FB050 + 328, v1 + 72);
  uint64_t v13 = sub_100035F54();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v13 + 144))(v13) & 1) != 0
    || (uint64_t v14 = sub_100035F54(), (*(unsigned int (**)(uint64_t))(*(void *)v14 + 152))(v14)))
  {
    uint64_t v15 = sub_10003FFD4();
    sub_1005764AC(v15 + 848, v1 + 64);
  }
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009B5EB8);
  }
  sub_100052718(qword_1009F8160 + 8, v1 + 88);
  uint64_t v16 = *(std::__shared_weak_count **)(v1 + 904);
  *(_OWORD *)(v1 + 896) = 0u;
  if (v16) {
    sub_10008A294(v16);
  }
  uint64_t v17 = sub_10003FFD4();
  sub_100576584(v17 + 968, v1 + 104);
  uint64_t v18 = *(void *)sub_100035F54();
  if ((*(unsigned int (**)(void))(v18 + 792))())
  {
    uint64_t v19 = sub_10003FFD4();
    sub_10057665C(v19 + 888, v1 + 80);
  }
  uint64_t v20 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v20 + 792))(v20, 1))
  {
    uint64_t v21 = sub_10003FFD4();
    sub_100576734(v21 + 928, v1 + 96);
    uint64_t v22 = sub_10003FFD4();
    sub_10057680C(v22 + 1008, v1 + 112);
  }
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009B5E78);
  }
  sub_100052718(qword_1009F8410 + 432, v1 + 24);
  uint64_t v23 = *(void *)(v1 + 1016);
  if (v23 != *(void *)(v1 + 1024))
  {
    if (*(void *)(*(void *)v23 + 16)) {
      operator delete[]();
    }
    if (*(void *)(*(void *)v23 + 8)) {
      operator delete[]();
    }
    operator delete();
  }
  *(unsigned char *)(v1 + 347) = 0;
  uint64_t result = notify_cancel(*(_DWORD *)(v1 + 1048));
  *(_DWORD *)(v1 + 1048) = -1;
  return result;
}

uint64_t sub_1005579D4(uint64_t a1, unint64_t a2)
{
  unint64_t v12 = a2;
  if (a2)
  {
    uint64_t v2 = *(void **)(a1 + 200);
    if (v2)
    {
      uint64_t v3 = (uint64_t **)(a1 + 192);
      uint64_t v4 = (void *)(a1 + 200);
      do
      {
        unint64_t v5 = v2[4];
        BOOL v6 = v5 >= a2;
        if (v5 >= a2) {
          int v7 = v2;
        }
        else {
          int v7 = v2 + 1;
        }
        if (v6) {
          uint64_t v4 = v2;
        }
        uint64_t v2 = (void *)*v7;
      }
      while (*v7);
      if (v4 != (void *)(a1 + 200) && v4[4] <= a2)
      {
        *(void *)buf = &v12;
        if (*(void *)sub_1000097B0(v3, &v12, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5])
        {
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          *(void *)buf = &v12;
          *(CFAbsoluteTime *)(*(void *)sub_1000097B0(v3, &v12, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 96) = Current;
          *(void *)buf = &v12;
          sub_1000097B0(v3, &v12, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
          *(void *)buf = &v12;
          sub_1000097B0(v3, &v12, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
          *(void *)buf = &v12;
          sub_1000097B0(v3, &v12, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
          sub_100568BE8();
        }
        *(void *)buf = &v12;
        if (*(void *)(sub_1000097B0(v3, &v12, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 16))
        {
          *(void *)buf = &v12;
          uint64_t v9 = *(void *)(sub_1000097B0(v3, &v12, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 16);
          if (v9)
          {
            sub_1003B8C7C(v9);
            operator delete();
          }
          *(void *)buf = &v12;
          *(void *)(sub_1000097B0(v3, &v12, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 16) = 0;
        }
        *(void *)buf = &v12;
        if (*(void *)(sub_1000097B0(v3, &v12, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 24))
        {
          *(void *)buf = &v12;
          if (*(void *)(sub_1000097B0(v3, &v12, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 24)) {
            operator delete();
          }
          *(void *)buf = &v12;
          *(void *)(sub_1000097B0(v3, &v12, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 24) = 0;
        }
      }
    }
  }
  uint64_t result = sub_10003FB34();
  if (*(_DWORD *)(result + 712) >= 0x7D0u)
  {
    uint64_t result = sub_10003FB34();
    if (*(_DWORD *)(result + 712) <= 0xF9Fu)
    {
      uint64_t v11 = sub_10003FB34();
      return (*(uint64_t (**)(uint64_t))(*(void *)v11 + 1232))(v11);
    }
  }
  return result;
}

void sub_10055826C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100558290(uint64_t *result, unint64_t a2)
{
  uint64_t v32 = a2;
  if (a2)
  {
    uint64_t v2 = result;
    uint64_t v3 = (void *)result[25];
    if (v3)
    {
      uint64_t v4 = (uint64_t **)(result + 24);
      unint64_t v5 = result + 25;
      do
      {
        unint64_t v6 = v3[4];
        BOOL v7 = v6 >= a2;
        if (v6 >= a2) {
          BOOL v8 = v3;
        }
        else {
          BOOL v8 = v3 + 1;
        }
        if (v7) {
          unint64_t v5 = v3;
        }
        uint64_t v3 = (void *)*v8;
      }
      while (*v8);
      if (v5 != result + 25 && v5[4] <= a2)
      {
        *(void *)buf = &v32;
        uint64_t result = sub_1000097B0(v4, (unint64_t *)&v32, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
        if (*(void *)(result[5] + 8))
        {
          uint64_t v9 = sub_100017768();
          if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 8))(v9))
          {
            unint64_t v10 = qword_100A19E48;
            if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
            {
              *(void *)buf = &v32;
              int v11 = *(_DWORD *)(sub_1000097B0(v4, (unint64_t *)&v32, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5]
                              + 100);
              int v12 = *((_DWORD *)v2 + 265);
              *(_DWORD *)buf = 67109376;
              *(_DWORD *)&uint8_t buf[4] = v11;
              __int16 v34 = 1024;
              int v35 = v12;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "AudioQuality trigger %d, codec %u", buf, 0xEu);
            }
            uint64_t v13 = sub_100035F54();
            if ((*(unsigned int (**)(uint64_t))(*(void *)v13 + 328))(v13))
            {
              *(void *)buf = &v32;
              uint64_t v14 = sub_1000097B0(v4, (unint64_t *)&v32, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
              if (*(_DWORD *)(v14[5] + 96))
              {
                int v15 = *((_DWORD *)v2 + 265);
                if ((v15 - 128) >= 2 && v15 != 255) {
                  sub_100569264((uint64_t)v14, v32);
                }
              }
            }
            *(void *)buf = &v32;
            *(_DWORD *)(sub_1000097B0(v4, (unint64_t *)&v32, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 100) = 0;
          }
          int v16 = *((_DWORD *)v2 + 58);
          *(void *)buf = &v32;
          *(_DWORD *)(*(void *)(sub_1000097B0(v4, (unint64_t *)&v32, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5]
                                + 8)
                    + 232) = v16;
          *(void *)buf = &v32;
          uint64_t v17 = sub_1000097B0(v4, (unint64_t *)&v32, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
          std::string::assign((std::string *)(*(void *)(v17[5] + 8) + 136), "2.4G");
          *(void *)buf = &v32;
          *(unsigned char *)(*(void *)(sub_1000097B0(v4, (unint64_t *)&v32, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5]
                               + 8)
                   + 160) = 0;
          if (*(unsigned char *)(v32 + 1373))
          {
            *(void *)buf = &v32;
            uint64_t v18 = sub_1000097B0(v4, (unint64_t *)&v32, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
            std::string::assign((std::string *)(*(void *)(v18[5] + 8) + 136), "5G");
          }
          *(void *)buf = &v32;
          if (*(unsigned char *)(sub_1000097B0(v4, (unint64_t *)&v32, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 32))
          {
            *(void *)buf = &v32;
            *(unsigned char *)(*(void *)(sub_1000097B0(v4, (unint64_t *)&v32, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5]
                                 + 8)
                     + 160) = 1;
          }
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          *(void *)buf = &v32;
          *(CFAbsoluteTime *)(*(void *)(sub_1000097B0(v4, (unint64_t *)&v32, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5]+ 8)+ 88) = Current;
          *(void *)buf = &v32;
          double v20 = *(double *)(*(void *)(sub_1000097B0(v4, (unint64_t *)&v32, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5]+ 8)+ 88);
          *(void *)buf = &v32;
          double v21 = v20
              - *(double *)(*(void *)(sub_1000097B0(v4, (unint64_t *)&v32, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5]+ 8)+ 80);
          *(void *)buf = &v32;
          *(_DWORD *)(*(void *)(sub_1000097B0(v4, (unint64_t *)&v32, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5]
                                + 8)
                    + 164) = v21;
          *(void *)buf = &v32;
          *(_DWORD *)(*(void *)(sub_1000097B0(v4, (unint64_t *)&v32, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5]
                                + 8)
                    + 176) = *((_DWORD *)v2 + 263);
          *(void *)buf = &v32;
          *(_DWORD *)(*(void *)(sub_1000097B0(v4, (unint64_t *)&v32, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5]
                                + 8)
                    + 180) = *((_DWORD *)v2 + 264);
          uint64_t v22 = sub_100050530();
          *(void *)buf = &v32;
          uint64_t v23 = sub_1000097B0(v4, (unint64_t *)&v32, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
          (*(void (**)(uint64_t, void))(*(void *)v22 + 96))(v22, *(void *)(v23[5] + 8));
          sub_1005607A0((uint64_t)v2, v32);
          uint64_t v24 = sub_100035F54();
          if ((*(unsigned int (**)(uint64_t))(*(void *)v24 + 128))(v24))
          {
            *(void *)buf = &v32;
            if (*(_DWORD *)(*(void *)(sub_1000097B0(v4, (unint64_t *)&v32, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5]+ 8)+ 104))
            {
              *(void *)buf = &v32;
              float v25 = (float)*(unsigned int *)(*(void *)(sub_1000097B0(v4, (unint64_t *)&v32, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5]+ 8)+ 128);
              *(void *)buf = &v32;
              uint64_t v26 = (float)((float)(v25
                                                / (float)*(unsigned int *)(*(void *)(sub_1000097B0(v4, (unint64_t *)&v32, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5]+ 8)+ 104))* 100.0);
            }
            else
            {
              uint64_t v26 = 0;
            }
            *(void *)buf = &v32;
            if (*(_DWORD *)(*(void *)(sub_1000097B0(v4, (unint64_t *)&v32, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5]+ 8)+ 108))
            {
              *(void *)buf = &v32;
              float v27 = (float)*(unsigned int *)(*(void *)(sub_1000097B0(v4, (unint64_t *)&v32, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5]+ 8)+ 132);
              *(void *)buf = &v32;
              uint64_t v28 = (float)((float)(v27
                                                / (float)*(unsigned int *)(*(void *)(sub_1000097B0(v4, (unint64_t *)&v32, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5]+ 8)+ 108))* 100.0);
            }
            else
            {
              uint64_t v28 = 0;
            }
            uint64_t v29 = sub_1003731C0();
            *(void *)buf = &v32;
            char v30 = sub_1000097B0(v4, (unint64_t *)&v32, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
            (*(void (**)(uint64_t, void, uint64_t, void, uint64_t, void))(*(void *)v29 + 24))(v29, *(unsigned int *)(*(void *)(v30[5] + 8) + 164), v26, (100 - v26), v28, (100 - v28));
          }
          *(void *)buf = &v32;
          uint64_t v31 = *(void *)(sub_1000097B0(v4, (unint64_t *)&v32, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 8);
          if (v31)
          {
            if (*(char *)(v31 + 159) < 0) {
              operator delete(*(void **)(v31 + 136));
            }
            operator delete();
          }
          *(void *)buf = &v32;
          uint64_t result = sub_1000097B0(v4, (unint64_t *)&v32, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
          *(void *)(result[5] + 8) = 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_100558A00(uint64_t a1)
{
  *(unsigned char *)(a1 + 344) = 1;
  sub_100556990(a1);
  sub_100556D3C(a1);
  int v2 = *(_DWORD *)(sub_10003FB34() + 712);
  if ((v2 - 1) > 0x7CE)
  {
    if ((v2 - 2000) <= 0x7CF)
    {
      sub_100558DCC((_WORD *)a1, v2);
      sub_100559080(a1, v2);
      sub_100559334(a1, v2);
    }
  }
  else if (v2 == 19 || v2 == 15)
  {
    uint64_t v4 = sub_100035F54();
    if (((*(uint64_t (**)(uint64_t))(*(void *)v4 + 144))(v4) & 1) == 0)
    {
      *(_WORD *)(a1 + 826) = 256;
      if (v2 == 19) {
        uint64_t v5 = 97;
      }
      else {
        uint64_t v5 = 81;
      }
      unint64_t v6 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Reading back ptb", buf, 2u);
      }
      uint64_t v7 = sub_10003FB34();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v7 + 592))(v7, v5, a1 + 826, a1 + 400);
    }
  }
  uint64_t v8 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v8 + 792))(v8, 1))
  {
    uint64_t v9 = sub_10003FFD4();
    sub_100575E8C(v9 + 928, a1 + 96);
    uint64_t v10 = sub_10003FFD4();
    (*(void (**)(uint64_t))(*(void *)v10 + 232))(v10);
    uint64_t v11 = sub_10003FFD4();
    sub_1005758B0(v11 + 968, a1 + 104);
    uint64_t v12 = sub_10003FFD4();
    sub_10057619C(v12 + 1008, a1 + 112);
  }
  uint64_t v13 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v13 + 152))(v13))
  {
    uint64_t v14 = sub_10003FFD4();
    sub_10026B638(v14 + 368, a1 + 136);
  }
  uint64_t v15 = sub_10003FB34();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v15 + 88))(v15, 1, 0);
  if (sub_1005402B8())
  {
    uint64_t v16 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v16 + 352))(v16))
    {
      uint64_t v17 = +[NSNotificationCenter defaultCenter];
      uint64_t v18 = +[AVAudioSession sharedInstance];
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      _DWORD v22[2] = sub_10055952C;
      v22[3] = &unk_1009B5BE8;
      void v22[4] = a1;
      uint64_t v19 = [v17 addObserverForName:AVAudioSessionRouteChangeNotification object:v18 queue:0 usingBlock:v22];
      double v20 = *(void **)(a1 + 240);
      *(void *)(a1 + 240) = v19;
    }
  }
  if (_os_feature_enabled_impl()
    && sub_10018246C((uint64_t)sub_1005598F8, 0)
    && os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR))
  {
    sub_100779DA0();
  }
  return sub_100559A60(a1, 0);
}

void sub_100558DB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100558DCC(_WORD *a1, int a2)
{
  uint64_t v4 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v12[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Reading back PPR power table for N1x1", (uint8_t *)v12, 2u);
  }
  if (a2 == 2000)
  {
    a1[414] = 10;
    uint64_t v5 = sub_10003FB34();
    return (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *))(*(void *)v5 + 592))(v5, 145, a1 + 414, a1 + 328);
  }
  else
  {
    v12[0] = 0;
    v12[1] = 0;
    __int16 v13 = 0;
    a1[414] = 18;
    uint64_t v7 = *(void *)sub_10003FB34();
    (*(void (**)(void))(v7 + 592))();
    a1[328] = *(_WORD *)((char *)v12 + 1);
    a1[414] = 18;
    uint64_t v8 = *(void *)sub_10003FB34();
    (*(void (**)(void))(v8 + 592))();
    a1[329] = *(_WORD *)((char *)v12 + 1);
    a1[414] = 18;
    uint64_t v9 = *(void *)sub_10003FB34();
    (*(void (**)(void))(v9 + 592))();
    a1[330] = *(_WORD *)((char *)v12 + 1);
    a1[414] = 18;
    uint64_t v10 = *(void *)sub_10003FB34();
    (*(void (**)(void))(v10 + 592))();
    a1[331] = *(_WORD *)((char *)v12 + 1);
    a1[414] = 18;
    uint64_t v11 = *(void *)sub_10003FB34();
    uint64_t result = (*(uint64_t (**)(void))(v11 + 592))();
    a1[332] = *(_WORD *)((char *)v12 + 1);
    a1[414] = 10;
  }
  return result;
}

uint64_t sub_100559080(uint64_t a1, int a2)
{
  __int16 v17 = 128;
  *(_WORD *)(a1 + 830) = 0;
  uint64_t v4 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Reading back REG power table for N1x1", v16, 2u);
  }
  if (a2 != 2000)
  {
    __int16 v17 = 128;
    uint64_t v8 = sub_10003FB34();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, uint64_t))(*(void *)v8 + 592))(v8, 154, &v17, a1 + 666);
    int v9 = result;
    unsigned __int8 v10 = v17;
    if (result) {
      unsigned __int8 v10 = 0;
    }
    unsigned __int8 v11 = v10;
    if (!result && ((char)v10 & 0x80000000) == 0)
    {
      __int16 v17 = 128 - v10;
      uint64_t v12 = sub_10003FB34();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, uint64_t))(*(void *)v12 + 592))(v12, 155, &v17, a1 + v11 + 666);
      if (result) {
        goto LABEL_24;
      }
      v11 += v17;
    }
    if (!v9 && (v11 & 0x80) == 0)
    {
      __int16 v17 = 128 - v11;
      uint64_t v13 = sub_10003FB34();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, uint64_t))(*(void *)v13 + 592))(v13, 156, &v17, a1 + v11 + 666);
      if (result) {
        goto LABEL_24;
      }
      v11 += v17;
    }
    if (v9 || (v11 & 0x80) != 0)
    {
LABEL_20:
      if (!v9 && (v11 & 0x80) == 0)
      {
        __int16 v17 = 128 - v11;
        uint64_t v15 = sub_10003FB34();
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, uint64_t))(*(void *)v15 + 592))(v15, 162, &v17, a1 + v11 + 666);
        if (!result) {
          v11 += v17;
        }
      }
      goto LABEL_24;
    }
    __int16 v17 = 128 - v11;
    uint64_t v14 = sub_10003FB34();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, uint64_t))(*(void *)v14 + 592))(v14, 161, &v17, a1 + v11 + 666);
    if (!result)
    {
      v11 += v17;
      goto LABEL_20;
    }
LABEL_24:
    __int16 v7 = v11;
    goto LABEL_25;
  }
  uint64_t v5 = sub_10003FB34();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, uint64_t))(*(void *)v5 + 592))(v5, 146, &v17, a1 + 666);
  if (result) {
    return result;
  }
  __int16 v7 = v17;
LABEL_25:
  *(_WORD *)(a1 + 830) = v7;
  return result;
}

uint64_t sub_100559334(uint64_t a1, int a2)
{
  __int16 v16 = 32;
  *(_WORD *)(a1 + 832) = 0;
  uint64_t v4 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Reading back SAR power table for N1x1", v15, 2u);
  }
  if (a2 != 2000)
  {
    __int16 v16 = 32;
    uint64_t v8 = sub_10003FB34();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, uint64_t))(*(void *)v8 + 592))(v8, 163, &v16, a1 + 794);
    int v9 = result;
    if (result) {
      unsigned __int8 v10 = 0;
    }
    else {
      unsigned __int8 v10 = v16;
    }
    if (result) {
      BOOL v11 = 1;
    }
    else {
      BOOL v11 = v10 > 0x1Fu;
    }
    if (!v11)
    {
      __int16 v16 = 32 - v10;
      uint64_t v12 = sub_10003FB34();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, uint64_t))(*(void *)v12 + 592))(v12, 164, &v16, a1 + v10 + 794);
      if (result)
      {
LABEL_21:
        __int16 v7 = v10;
        goto LABEL_22;
      }
      v10 += v16;
    }
    if (v9) {
      BOOL v13 = 1;
    }
    else {
      BOOL v13 = v10 > 0x1Fu;
    }
    if (!v13)
    {
      __int16 v16 = 32 - v10;
      uint64_t v14 = sub_10003FB34();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, uint64_t))(*(void *)v14 + 592))(v14, 165, &v16, a1 + v10 + 794);
      if (!result) {
        v10 += v16;
      }
    }
    goto LABEL_21;
  }
  uint64_t v5 = sub_10003FB34();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, uint64_t))(*(void *)v5 + 592))(v5, 147, &v16, a1 + 794);
  if (result) {
    return result;
  }
  __int16 v7 = v16;
LABEL_22:
  *(_WORD *)(a1 + 832) = v7;
  return result;
}

void sub_10055952C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = sub_1004AF8EC();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1005595A8;
  v3[3] = &unk_100997528;
  v3[4] = v1;
  sub_100013018(v2, v3);
}

void sub_1005595A8(uint64_t a1)
{
  uint64_t v21 = *(void *)(a1 + 32);
  *(unsigned char *)(v21 + 248) = 0;
  uint64_t v1 = +[AVAudioSession sharedInstance];
  uint64_t v2 = [v1 currentRoute];

  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  double v20 = v2;
  uint64_t v3 = [v2 outputs];
  id v4 = [v3 countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (!v4) {
    goto LABEL_16;
  }
  uint64_t v5 = *(void *)v24;
  id obj = v3;
  while (2)
  {
    for (i = 0; i != v4; i = (char *)i + 1)
    {
      if (*(void *)v24 != v5) {
        objc_enumerationMutation(obj);
      }
      __int16 v7 = *(void **)(*((void *)&v23 + 1) + 8 * i);
      uint64_t v8 = [v7 portType];
      if ([v8 isEqualToString:AVAudioSessionPortBluetoothA2DP])
      {

LABEL_9:
        BOOL v11 = [v7 UID];
        uint64_t v12 = [v11 componentsSeparatedByString:@"-"];

        BOOL v13 = [v12 firstObject];
        unint64_t v14 = sub_1006ADA24(v13);

        uint64_t v15 = 1;
        goto LABEL_11;
      }
      int v9 = [v7 portType];
      unsigned int v10 = [v9 isEqualToString:AVAudioSessionPortBluetoothHFP];

      if (v10) {
        goto LABEL_9;
      }
      uint64_t v15 = 0;
      unint64_t v14 = 0;
LABEL_11:
      uint64_t v16 = sub_100050530();
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      (*(void (**)(uint64_t, uint64_t, unint64_t, CFAbsoluteTime))(*(void *)v16 + 440))(v16, v15, v14, Current);
      uint64_t v18 = [v7 portType];
      LODWORD(v16) = [v18 isEqualToString:AVAudioSessionPortBuiltInReceiver];

      if (v16)
      {
        uint64_t v3 = obj;
        *(unsigned char *)(v21 + 248) = 1;
        goto LABEL_16;
      }
    }
    uint64_t v3 = obj;
    id v4 = [obj countByEnumeratingWithState:&v23 objects:v27 count:16];
    if (v4) {
      continue;
    }
    break;
  }
LABEL_16:

  uint64_t v19 = sub_10003FB34();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v19 + 88))(v19, 1, *(unsigned __int8 *)(v21 + 248));
}

void sub_10055985C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1005598F8(int a1, unsigned __int8 *a2, int a3, __int16 a4, uint64_t a5)
{
  uint64_t v10 = sub_100197A30((uint64_t)a2);
  if (!a1)
  {
    if ((a3 & 0xFFFFFFFD) != 0)
    {
      BOOL v11 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        v13[0] = 67109120;
        v13[1] = a3;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "legacyModeChangeEvent received with invalid mode: %d", (uint8_t *)v13, 8u);
      }
    }
    else if (a2 && v10)
    {
      if (qword_1009F80B0 != -1) {
        dispatch_once(&qword_1009F80B0, &stru_1009B5E18);
      }
      uint64_t v12 = off_1009F80A8;
      sub_100573EFC((uint64_t)v12, 0, a2, a3, a4, a5);
    }
  }
}

uint64_t sub_100559A60(uint64_t a1, char a2)
{
  __int16 v17 = 0;
  uint64_t v16 = 0;
  __int16 v15 = 10;
  uint64_t v4 = sub_100035F54();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v4 + 152))(v4)) {
    return 2;
  }
  if (*(_DWORD *)(a1 + 872) == 6) {
    char v5 = a2;
  }
  else {
    char v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    if (!*(unsigned char *)(a1 + 869)) {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = sub_100017768();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 400))(v10))
    {
      uint64_t v11 = sub_100017768();
      uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 408))(v11);
    }
    else
    {
      uint64_t v7 = 186;
    }
    uint64_t v12 = sub_100017768();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 416))(v12))
    {
      uint64_t v13 = sub_100017768();
      uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 424))(v13);
    }
    else
    {
      uint64_t v6 = 186;
    }
    *(unsigned char *)(a1 + 869) = 1;
    uint64_t v8 = 3;
  }
  uint64_t v14 = sub_10003FB34();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, uint64_t *))(*(void *)v14 + 904))(v14, 4095, 9, v8, v7, v6, &v15, &v16);
  *(unsigned char *)(a1 + 869) = v5 ^ (result == 0);
  return result;
}

uint64_t sub_100559C80(uint64_t a1)
{
  return sub_100558A00(a1 - 8);
}

void sub_100559C88(uint64_t a1)
{
  uint64_t v2 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "AudioLinkManager::stackWillStop enter", buf, 2u);
  }
  *(unsigned char *)(a1 + 344) = 0;
  uint64_t v3 = *(NSObject **)(a1 + 256);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100559E20;
  block[3] = &unk_100997528;
  void block[4] = a1;
  dispatch_sync(v3, block);
  if (*(void *)(a1 + 240))
  {
    uint64_t v4 = +[NSNotificationCenter defaultCenter];
    [v4 removeObserver:*(void *)(a1 + 240)];
  }
  char v5 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "AudioLinkManager::stackWillStop enter", buf, 2u);
  }
  if (_os_feature_enabled_impl()
    && sub_10018247C((uint64_t)sub_1005598F8)
    && os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR))
  {
    sub_100779E08();
  }
}

void sub_100559E10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100559E20(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t result = *(void *)(v1 + 880);
  if (result)
  {
    uint64_t v3 = (void *)(v1 + 880);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void sub_100559E74(uint64_t a1)
{
}

void sub_100559E7C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 966) = 0u;
  *(_OWORD *)(a1 + 982) = 0u;
  *(_OWORD *)(a1 + 950) = 0u;
  uint64_t v2 = *(NSObject **)(a1 + 256);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_100559F00;
  v3[3] = &unk_100998260;
  v3[4] = a1;
  void v3[5] = a2;
  dispatch_async(v2, v3);
}

void sub_100559F00(uint64_t a1)
{
}

void sub_100559F0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 - 144;
  *(_OWORD *)(a1 + 822) = 0u;
  *(_OWORD *)(a1 + 838) = 0u;
  *(_OWORD *)(a1 + 806) = 0u;
  uint64_t v3 = *(NSObject **)(a1 + 112);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_100559F00;
  v4[3] = &unk_100998260;
  v4[4] = v2;
  v4[5] = a2;
  dispatch_async(v3, v4);
}

void sub_100559F90(uint64_t a1, char a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 256);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10055A008;
  v3[3] = &unk_100998A58;
  v3[4] = a1;
  char v4 = a2;
  dispatch_async(v2, v3);
}

uint64_t sub_10055A008(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(void *)(v1 + 208))
  {
    uint64_t v2 = result;
    uint64_t result = sub_10003FB34();
    unsigned int v3 = *(_DWORD *)(result + 712);
    if (v3 - 1 <= 0x7CE && (v3 != 15 ? (BOOL v4 = v3 >= 0x13) : (BOOL v4 = 1), v4))
    {
      char v5 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 568);
      return v5();
    }
    else
    {
      uint64_t v6 = *(void **)(v1 + 192);
      if (v6 != (void *)(v1 + 200))
      {
        do
        {
          sub_10055A14C(v1, v6[4], *(_DWORD *)(v6[5] + 76), (char *)(v1 + 878));
          sub_10055A3B8(v1, *(unsigned char *)(v2 + 40), (unsigned char *)(v1 + 876), (unsigned char *)(v1 + 877));
          uint64_t result = sub_10055A440(v1);
          uint64_t v7 = (void *)v6[1];
          if (v7)
          {
            do
            {
              uint64_t v8 = v7;
              uint64_t v7 = (void *)*v7;
            }
            while (v7);
          }
          else
          {
            do
            {
              uint64_t v8 = (void *)v6[2];
              BOOL v9 = *v8 == (void)v6;
              uint64_t v6 = v8;
            }
            while (!v9);
          }
          uint64_t v6 = v8;
        }
        while (v8 != (void *)(v1 + 200));
      }
    }
  }
  return result;
}

void sub_10055A14C(uint64_t a1, uint64_t a2, int a3, char *a4)
{
  int v20 = 0;
  uint64_t v7 = sub_100017768();
  sub_10004191C(buf, "ePA");
  sub_10004191C(__p, "ePAThreshold");
  int v8 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v7 + 88))(v7, buf, __p, &v20);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  if ((v22 & 0x80000000) == 0)
  {
    if (v8) {
      goto LABEL_5;
    }
LABEL_8:
    uint64_t v11 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 384))(v11))
    {
      char v12 = -62;
LABEL_25:
      *a4 = v12;
      return;
    }
    if (a3 == 1)
    {
      uint64_t v15 = sub_100478B2C(a2, 12);
      if (v15 & 1) != 0 || (sub_1005617A4(v15, a2))
      {
        char v14 = -57;
        goto LABEL_22;
      }
      BOOL v16 = !sub_1004766D4(a2);
      char v14 = -68;
      char v17 = -73;
    }
    else
    {
      if (a3 != 2)
      {
LABEL_23:
        if (sub_1003FAF7C() != 149) {
          return;
        }
        char v12 = *a4 + 12;
        goto LABEL_25;
      }
      uint64_t v13 = sub_100478B2C(a2, 12);
      if (v13 & 1) != 0 || (sub_1005617A4(v13, a2))
      {
        char v14 = -62;
LABEL_22:
        *a4 = v14;
        goto LABEL_23;
      }
      BOOL v16 = !sub_1004766D4(a2);
      char v14 = -69;
      char v17 = -74;
    }
    if (!v16) {
      char v14 = v17;
    }
    goto LABEL_22;
  }
  operator delete(*(void **)buf);
  if (!v8) {
    goto LABEL_8;
  }
LABEL_5:
  char v9 = v20;
  *a4 = v20;
  uint64_t v10 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Warning: Setting user defined ePA threshold to %d dBm through defaults write", buf, 8u);
  }
}

void sub_10055A37C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10055A3B8(uint64_t a1, char a2, unsigned char *a3, unsigned char *a4)
{
  sub_10003FB34();
  *a3 = sub_100351C10();
  sub_10003FB34();
  *a4 = sub_100351A70();
  sub_10003FB34();
  if (sub_100351A4C() && (a2 & 1) == 0)
  {
    sub_10003FB34();
    *a4 = sub_100351E88();
  }
  uint64_t result = sub_10056A574(a1);
  if (result)
  {
    uint64_t result = sub_1003FAF7C();
    if (result == 149) {
      *a3 = 48;
    }
  }
  return result;
}

uint64_t sub_10055A440(uint64_t result)
{
  if (!*(unsigned char *)(result + 345))
  {
    uint64_t v1 = result;
    if (*(_DWORD *)(sub_10003FB34() + 712) >= 0x13u)
    {
      char v10 = 0;
      uint64_t v2 = sub_100017768();
      sub_10004191C(buf, "ePA");
      sub_10004191C(__p, "DisableReTxEPA");
      (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v2 + 72))(v2, buf, __p, &v10);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
      if (v9 < 0) {
        operator delete(*(void **)buf);
      }
      if (!v10)
      {
        uint64_t v4 = 2;
        goto LABEL_12;
      }
      unsigned int v3 = qword_100A19E48;
      uint64_t v4 = 0;
      if (!os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
LABEL_12:
        uint64_t v5 = sub_10003FB34();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void, void))(*(void *)v5 + 80))(v5, 1, v4, *(unsigned __int8 *)(v1 + 876), *(unsigned __int8 *)(v1 + 877), *(char *)(v1 + 878));
      }
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Warning: Disabling ePA for retransmission policy through defaults write", buf, 2u);
    }
    uint64_t v4 = 0;
    goto LABEL_12;
  }
  return result;
}

void sub_10055A5A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_10055A5D4(uint64_t a1, char a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 240);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10055A008;
  v3[3] = &unk_100998A58;
  v3[4] = a1 - 16;
  char v4 = a2;
  dispatch_async(v2, v3);
}

void sub_10055A650(uint64_t a1, long long *a2, int *a3)
{
  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x11012000000;
  v15[3] = sub_10004D0B8;
  v15[4] = nullsub_25;
  v15[5] = "";
  long long v4 = a2[11];
  long long v26 = a2[10];
  long long v27 = v4;
  v28[0] = a2[12];
  *(_OWORD *)((char *)v28 + 15) = *(long long *)((char *)a2 + 207);
  long long v5 = a2[7];
  long long v22 = a2[6];
  long long v23 = v5;
  long long v6 = a2[9];
  long long v24 = a2[8];
  long long v25 = v6;
  long long v7 = a2[3];
  long long v18 = a2[2];
  long long v19 = v7;
  long long v8 = a2[5];
  long long v20 = a2[4];
  long long v21 = v8;
  long long v9 = a2[1];
  long long v16 = *a2;
  long long v17 = v9;
  int v13 = *a3;
  __int16 v14 = *((_WORD *)a3 + 2);
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009B5F38);
  }
  uint64_t v10 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v13, 0);
  uint64_t v11 = *(NSObject **)(a1 + 256);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10055A824;
  block[3] = &unk_100998860;
  void block[5] = a1;
  block[6] = v10;
  void block[4] = v15;
  dispatch_async(v11, block);
  _Block_object_dispose(v15, 8);
}

void sub_10055A80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double sub_10055A824(void *a1, double result)
{
  unsigned int v3 = a1 + 6;
  unint64_t v2 = a1[6];
  if (v2)
  {
    uint64_t v4 = a1[5];
    long long v5 = *(void **)(v4 + 200);
    if (v5)
    {
      long long v7 = (uint64_t **)(v4 + 192);
      uint64_t v8 = v4 + 200;
      do
      {
        unint64_t v9 = v5[4];
        BOOL v10 = v9 >= v2;
        if (v9 >= v2) {
          uint64_t v11 = v5;
        }
        else {
          uint64_t v11 = v5 + 1;
        }
        if (v10) {
          uint64_t v8 = (uint64_t)v5;
        }
        long long v5 = (void *)*v11;
      }
      while (*v11);
      if (v8 != v4 + 200 && v2 >= *(void *)(v8 + 32))
      {
        sub_10055B494(a1[5], v2, (unsigned char *)(*(void *)(a1[4] + 8) + 48));
        sub_10003FB34();
        if (!sub_100350EC8()) {
          *(_WORD *)(*(void *)(a1[4] + 8) + 225) = 0;
        }
        uint64_t v12 = sub_100035F54();
        if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 136))(v12) && *(_DWORD *)(v4 + 864) != 3) {
          sub_10055BAE8(v4, a1[6], *(void *)(a1[4] + 8) + 48);
        }
        uint64_t v13 = sub_100017768();
        uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 288))(v13);
        if ((v14 & 1) == 0 && *(_DWORD *)(v4 + 864) != 3) {
          sub_10055BBF8(v14, *(unsigned __int8 *)(*(void *)(a1[4] + 8) + 49), (unsigned __int16 *)(*(void *)(a1[4] + 8) + 213));
        }
        v64 = v3;
        if (*(void *)sub_1000097B0(v7, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v64)[5]
          && *(unsigned __int16 *)(*(void *)(a1[4] + 8) + 66) <= *(unsigned __int16 *)(*(void *)(a1[4] + 8) + 64))
        {
          v64 = v3;
          uint64_t v15 = *(void *)sub_1000097B0(v7, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v64)[5];
          *(void *)(v15 + 416) += *(char *)(*(void *)(a1[4] + 8) + 54);
          ++*(_DWORD *)(v15 + 424);
          v64 = v3;
          uint64_t v16 = *(void *)sub_1000097B0(v7, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v64)[5];
          int v17 = *(char *)(*(void *)(a1[4] + 8) + 55);
          if (*(_DWORD *)(v16 + 428) > v17) {
            *(_DWORD *)(v16 + 428) = v17;
          }
          v64 = v3;
          uint64_t v18 = *(void *)sub_1000097B0(v7, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v64)[5];
          int v19 = *(char *)(*(void *)(a1[4] + 8) + 56);
          if (*(_DWORD *)(v18 + 432) < v19) {
            *(_DWORD *)(v18 + 432) = v19;
          }
          v64 = v3;
          if (*(void *)(sub_1000097B0(v7, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v64)[5] + 24))
          {
            uint64_t v20 = *(char *)(*(void *)(a1[4] + 8) + 54);
            v64 = v3;
            *(void *)(*(void *)(sub_1000097B0(v7, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v64)[5] + 24)
                      + 80) = v20;
            uint64_t v22 = *(void *)(a1[4] + 8);
            if (*(_WORD *)(v22 + 64))
            {
              LOWORD(v21) = *(_WORD *)(v22 + 66);
              float v23 = (float)((float)v21 * 100.0) / (float)*(unsigned __int16 *)(v22 + 64);
            }
            else
            {
              float v23 = 0.0;
            }
            v64 = v3;
            *(void *)(*(void *)(sub_1000097B0(v7, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v64)[5] + 24)
                      + 72) = (uint64_t)v23;
          }
          long long v24 = *(unsigned char **)(v4 + 216);
          if (v24[8])
          {
            v64 = v3;
            long long v25 = sub_1000097B0(v7, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v64);
            *(_DWORD *)(*(void *)v25[5] + 436) |= 2u;
            long long v24 = *(unsigned char **)(v4 + 216);
          }
          if (v24[7])
          {
            v64 = v3;
            sub_1000097B0(v7, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v64);
            long long v24 = *(unsigned char **)(v4 + 216);
          }
          if (v24[5])
          {
            v64 = v3;
            long long v26 = sub_1000097B0(v7, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v64);
            *(_DWORD *)(*(void *)v26[5] + 436) |= 4u;
            long long v24 = *(unsigned char **)(v4 + 216);
          }
          if (v24[6])
          {
            v64 = v3;
            long long v27 = sub_1000097B0(v7, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v64);
            *(_DWORD *)(*(void *)v27[5] + 436) |= 8u;
            long long v24 = *(unsigned char **)(v4 + 216);
          }
          if (v24[1])
          {
            v64 = v3;
            uint64_t v28 = sub_1000097B0(v7, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v64);
            *(_DWORD *)(*(void *)v28[5] + 436) |= 0x20u;
            long long v24 = *(unsigned char **)(v4 + 216);
          }
          if (v24[4])
          {
            v64 = v3;
            uint64_t v29 = sub_1000097B0(v7, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v64);
            *(_DWORD *)(*(void *)v29[5] + 436) |= 0x80u;
            long long v24 = *(unsigned char **)(v4 + 216);
          }
          if (v24[3])
          {
            v64 = v3;
            char v30 = sub_1000097B0(v7, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v64);
            *(_DWORD *)(*(void *)v30[5] + 436) |= 0x10u;
            long long v24 = *(unsigned char **)(v4 + 216);
          }
          if (v24[2])
          {
            v64 = v3;
            uint64_t v31 = sub_1000097B0(v7, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v64);
            *(_DWORD *)(*(void *)v31[5] + 436) |= 0x40u;
          }
          uint64_t v32 = *(void *)(a1[4] + 8);
          if (*(_WORD *)(v32 + 64)) {
            unsigned int v33 = 100 * *(unsigned __int16 *)(v32 + 66) / *(unsigned __int16 *)(v32 + 64);
          }
          else {
            unsigned int v33 = 0;
          }
          v64 = v3;
          if (*(_DWORD *)(sub_1000097B0(v7, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v64)[5] + 64) == 1)
          {
            unint64_t v34 = *v3;
            v64 = v3;
            int v35 = sub_1000097B0(v7, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v64);
            sub_10055BD64(v4, v34, v33, *(unsigned __int8 *)(v35[5] + 70));
          }
          sub_10008FE68(*(void *)(v4 + 216), a1[6], v33, *(void *)(a1[4] + 8) + 48, 0);
          sub_10009305C(*(void *)(v4 + 216), a1[6], v33, *(void *)(a1[4] + 8) + 48);
          v64 = v3;
          if (*(unsigned char *)(sub_1000097B0(v7, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v64)[5] + 56))
          {
            unint64_t v36 = *v3;
            v64 = v3;
            char v37 = sub_1000097B0(v7, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v64);
            sub_10055C1B0(v4, v36, v33, *(unsigned char *)(v37[5] + 70));
          }
          v64 = v3;
          char v38 = sub_1000097B0(v7, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v64);
          *(_DWORD *)(*(void *)v38[5] + 104) += *(unsigned __int16 *)(*(void *)(a1[4] + 8) + 60);
          v64 = v3;
          uint64_t v39 = *(void *)sub_1000097B0(v7, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v64)[5];
          unsigned int v40 = *(unsigned __int16 *)(*(void *)(a1[4] + 8) + 64);
          *(_DWORD *)(v39 + 108) += v40;
          if (v40 <= 0x1D) {
            ++*(void *)(v39 + 512);
          }
          v64 = v3;
          *(unsigned char *)(*(void *)sub_1000097B0(v7, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v64)[5] + 388) = *(unsigned char *)(*(void *)(a1[4] + 8) + 54);
          v64 = v3;
          __int16 v41 = sub_1000097B0(v7, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v64);
          *(int32x2_t *)(*(void *)v41[5] + 404) = vadd_s32(*(int32x2_t *)(*(void *)v41[5] + 404), (int32x2_t)(v33 | 0x100000000));
          uint64_t v42 = *(void *)sub_100017768();
          if (((*(uint64_t (**)(void))(v42 + 288))() & 1) == 0)
          {
            uint64_t v43 = *(void *)(a1[4] + 8) + 48;
            v64 = v3;
            unsigned int v44 = *(unsigned __int16 *)(sub_1000097B0(v7, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v64)[5] + 58);
            v64 = v3;
            if (v44 >= *(unsigned __int16 *)(sub_1000097B0(v7, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v64)[5]
                                            + 60))
            {
              v64 = v3;
              __int16 v45 = sub_1000097B0(v7, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v64);
              uint64_t v47 = (unsigned __int16 *)(v45[5] + 60);
            }
            else
            {
              v64 = v3;
              __int16 v45 = sub_1000097B0(v7, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v64);
              uint64_t v47 = (unsigned __int16 *)(v45[5] + 58);
            }
            sub_10055C6E0(v46, (uint64_t)v45, v43, *v47, *v3);
            if (qword_1009F8738 != -1) {
              dispatch_once(&qword_1009F8738, &stru_1009B5F18);
            }
            uint64_t v48 = qword_1009F8730;
            unint64_t v49 = a1[6];
            uint64_t v50 = *(void *)(a1[4] + 8) + 48;
            v64 = v3;
            unsigned int v51 = *(unsigned __int16 *)(sub_1000097B0(v7, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v64)[5] + 58);
            v64 = v3;
            if (v51 >= *(unsigned __int16 *)(sub_1000097B0(v7, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v64)[5]
                                            + 60))
            {
              v64 = v3;
              long long v52 = (__int16 *)(sub_1000097B0(v7, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v64)[5] + 60);
            }
            else
            {
              v64 = v3;
              long long v52 = (__int16 *)(sub_1000097B0(v7, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v64)[5] + 58);
            }
            __int16 v53 = *v52;
            uint64_t v54 = *(void *)(v4 + 216);
            v64 = v3;
            int v55 = sub_1000097B0(v7, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v64);
            __int16 v56 = sub_100090A98(v54, *(_DWORD *)(*(void *)(v55[5] + 40) + 20), *v3);
            sub_10026FE14(v48, v49, v50, v53, v56);
          }
        }
        v64 = v3;
        if (!*(void *)sub_1000097B0(v7, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v64)[5]) {
          goto LABEL_73;
        }
        v64 = v3;
        unsigned int v57 = *(unsigned __int16 *)(*(void *)(sub_1000097B0(v7, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v64)[5]
                                              + 40)
                                  + 16);
        if (v57 < 0x97)
        {
          if (v57 == 150) {
            goto LABEL_73;
          }
        }
        else
        {
          v64 = v3;
          if (*(_DWORD *)(*(void *)sub_1000097B0(v7, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v64)[5] + 312) <= 0x95u)
          {
LABEL_73:
            v64 = v3;
            if (*(void *)(sub_1000097B0(v7, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v64)[5] + 8))
            {
              sub_10055D0FC(v4, a1[6], *(void *)(a1[4] + 8) + 48);
              uint64_t v58 = *(void *)sub_100017768();
              if (((*(uint64_t (**)(void))(v58 + 288))() & 1) == 0)
              {
                sub_10055D7C0(v4, *(void *)(a1[4] + 8) + 48, a1[6]);
                sub_10007FFF8(*(void *)(v4 + 224), a1[6], *(void *)(a1[4] + 8) + 48);
                if (qword_1009F8738 != -1) {
                  dispatch_once(&qword_1009F8738, &stru_1009B5F18);
                }
                uint64_t v59 = qword_1009F8730;
                unint64_t v60 = a1[6];
                uint64_t v61 = *(void *)(a1[4] + 8) + 48;
                v64 = v3;
                v62 = sub_1000097B0(v7, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v64);
                sub_10026FE14(v59, v60, v61, 0, *(_WORD *)(*(void *)(v62[5] + 40) + 16));
              }
            }
            v64 = v3;
            if (*(unsigned char *)(sub_1000097B0(v7, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v64)[5] + 72))
            {
              v64 = v3;
              if (*(_DWORD *)(sub_1000097B0(v7, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v64)[5] + 76) == 2)
              {
                uint64_t v63 = sub_100017768();
                if ((*(unsigned int (**)(uint64_t))(*(void *)v63 + 8))(v63)) {
                  sub_100091874(*(void *)(v4 + 216), *v3);
                }
              }
            }
            return sub_10055DE3C(v4, a1[6], *(void *)(a1[4] + 8) + 48);
          }
        }
        v64 = v3;
        *(_DWORD *)(*(void *)sub_1000097B0(v7, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v64)[5] + 312) = v57;
        goto LABEL_73;
      }
    }
  }
  return result;
}

void sub_10055B494(uint64_t a1, unint64_t a2, unsigned char *a3)
{
  unint64_t v65 = a2;
  unsigned int v4 = *(unsigned __int8 *)(a1 + 950);
  if (v4 <= 1)
  {
    a3[221] = v4;
LABEL_48:
    uint64_t v29 = 0;
    LOBYTE(v6) = 0;
    uint64_t v7 = 0;
    char v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = a3 + 86;
    do
    {
      if ((a3[(v29 >> 3) + 76] >> (v29 & 7)))
      {
        LOBYTE(v6) = v6 + 1;
        if (v30 >= v31)
        {
          uint64_t v33 = (uint64_t)&v30[-v7 + 1];
          if (v33 < 0) {
            abort();
          }
          if (2 * (uint64_t)&v31[-v7] > (unint64_t)v33) {
            uint64_t v33 = 2 * (void)&v31[-v7];
          }
          if ((unint64_t)&v31[-v7] >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v34 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v34 = v33;
          }
          if (v34) {
            int v35 = (char *)operator new(v34);
          }
          else {
            int v35 = 0;
          }
          unint64_t v36 = &v30[(void)v35 - v7];
          char *v36 = v32[v29];
          char v37 = v36 + 1;
          if (v30 != (char *)v7)
          {
            char v38 = &v30[~v7];
            do
            {
              char v39 = *--v30;
              (v38--)[(void)v35] = v39;
            }
            while (v30 != (char *)v7);
            unint64_t v36 = v35;
          }
          uint64_t v31 = &v35[v34];
          if (v7) {
            operator delete((void *)v7);
          }
          char v30 = v37;
          uint64_t v7 = (uint64_t)v36;
        }
        else
        {
          *v30++ = v32[v29];
        }
      }
      ++v29;
    }
    while (v29 != 79);
    if ((_BYTE)v6)
    {
      unint64_t v40 = 126 - 2 * __clz((unint64_t)&v30[-v7]);
      __int16 v41 = &v30[-v7];
      if (v30 == (char *)v7) {
        uint64_t v42 = 0;
      }
      else {
        uint64_t v42 = v40;
      }
      sub_100578DE4(v7, v30, v42, 1);
      double v43 = (double)v6;
      unint64_t v44 = (unint64_t)(ceil(v43 * 0.5) + -1.0);
      if ((unint64_t)v41 <= v44
        || (a3[217] = *(unsigned char *)(v7 + v44),
            unint64_t v45 = (unint64_t)(ceil(v43 * 0.75) + -1.0),
            (unint64_t)v41 <= v45)
        || (a3[218] = *(unsigned char *)(v7 + v45),
            unint64_t v46 = (unint64_t)(ceil(v43 * 0.9) + -1.0),
            (unint64_t)v41 <= v46))
      {
        abort();
      }
      a3[219] = *(unsigned char *)(v7 + v46);
    }
    else
    {
      LOBYTE(v6) = 0;
      *(_WORD *)(a3 + 217) = 0;
      a3[219] = 0;
    }
    goto LABEL_86;
  }
  if (!*(unsigned char *)(a1 + 951)) {
    LOBYTE(v4) = 0;
  }
  a3[221] = v4;
  if (!*(unsigned char *)(a1 + 951)) {
    goto LABEL_48;
  }
  uint64_t v5 = 0;
  int v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  BOOL v10 = a3 + 86;
  do
  {
    unsigned int v11 = a3[(v5 >> 3) + 76];
    if (v8 >= v9)
    {
      uint64_t v12 = (uint64_t)&v8[-v7 + 1];
      if (v12 < 0) {
        abort();
      }
      if (2 * (uint64_t)&v9[-v7] > (unint64_t)v12) {
        uint64_t v12 = 2 * (void)&v9[-v7];
      }
      if ((unint64_t)&v9[-v7] >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v13 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v13 = v12;
      }
      if (v13) {
        uint64_t v14 = (char *)operator new(v13);
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v15 = &v8[(void)v14 - v7];
      *uint64_t v15 = v10[v5];
      uint64_t v16 = v15 + 1;
      if (v8 != (char *)v7)
      {
        int v17 = &v8[~v7];
        do
        {
          char v18 = *--v8;
          (v17--)[(void)v14] = v18;
        }
        while (v8 != (char *)v7);
        uint64_t v15 = v14;
      }
      unint64_t v9 = &v14[v13];
      if (v7) {
        operator delete((void *)v7);
      }
      uint64_t v7 = (uint64_t)v15;
      uint64_t v8 = v16;
    }
    else
    {
      *v8++ = v10[v5];
    }
    v6 += (v11 >> (v5++ & 7)) & 1;
  }
  while (v5 != 79);
  uint64_t v19 = 0;
  while (1)
  {
    char v20 = *(unsigned char *)(a1 + v19 + 951);
    if (!v20) {
      break;
    }
    if (v8 >= v9)
    {
      uint64_t v21 = (uint64_t)&v8[-v7 + 1];
      if (v21 < 0) {
        abort();
      }
      if (2 * (uint64_t)&v9[-v7] > (unint64_t)v21) {
        uint64_t v21 = 2 * (void)&v9[-v7];
      }
      if ((unint64_t)&v9[-v7] >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v22 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v22 = v21;
      }
      if (v22) {
        float v23 = (char *)operator new(v22);
      }
      else {
        float v23 = 0;
      }
      long long v24 = &v8[(void)v23 - v7];
      char *v24 = v20;
      long long v25 = v24 + 1;
      if (v8 != (char *)v7)
      {
        long long v26 = &v8[~v7];
        do
        {
          char v27 = *--v8;
          (v26--)[(void)v23] = v27;
        }
        while (v8 != (char *)v7);
        long long v24 = v23;
      }
      unint64_t v9 = &v23[v22];
      if (v7) {
        operator delete((void *)v7);
      }
      uint64_t v7 = (uint64_t)v24;
      uint64_t v8 = v25;
    }
    else
    {
      *v8++ = v20;
    }
    if (++v19 == 47)
    {
      int v28 = 126;
      goto LABEL_79;
    }
  }
  int v28 = v19 + 79;
LABEL_79:
  unint64_t v47 = 126 - 2 * __clz((unint64_t)&v8[-v7]);
  uint64_t v48 = &v8[-v7];
  if (v8 == (char *)v7) {
    uint64_t v49 = 0;
  }
  else {
    uint64_t v49 = v47;
  }
  sub_100578458(v7, v8, v49, 1);
  double v50 = (double)v28;
  unint64_t v51 = (unint64_t)(ceil((double)v28 * 0.5) + -1.0);
  if ((unint64_t)v48 <= v51
    || (a3[217] = *(unsigned char *)(v7 + v51), unint64_t v52 = (unint64_t)(ceil(v50 * 0.75) + -1.0), (unint64_t)v48 <= v52)
    || (a3[218] = *(unsigned char *)(v7 + v52), unint64_t v53 = (unint64_t)(ceil(v50 * 0.9) + -1.0), (unint64_t)v48 <= v53))
  {
    abort();
  }
  a3[219] = *(unsigned char *)(v7 + v53);
  a3[222] = v28;
LABEL_86:
  a3[220] = v6;
  unint64_t v54 = v65;
  *(unsigned char *)(a1 + 950) = 0;
  if (v54)
  {
    int v55 = *(void **)(a1 + 200);
    if (v55)
    {
      __int16 v56 = (uint64_t **)(a1 + 192);
      unsigned int v57 = (void *)(a1 + 200);
      do
      {
        unint64_t v58 = v55[4];
        BOOL v59 = v58 >= v54;
        if (v58 >= v54) {
          unint64_t v60 = v55;
        }
        else {
          unint64_t v60 = v55 + 1;
        }
        if (v59) {
          unsigned int v57 = v55;
        }
        int v55 = (void *)*v60;
      }
      while (*v60);
      if (v57 != (void *)(a1 + 200) && v54 >= v57[4])
      {
        v66 = &v65;
        if (*(void *)sub_1000097B0((uint64_t **)(a1 + 192), &v65, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v66)[5])
        {
          v66 = &v65;
          uint64_t v61 = sub_1000097B0(v56, &v65, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v66);
          sub_10056C5D4((uint64_t)v61, *(_DWORD **)v61[5], (uint64_t)a3);
        }
        v66 = &v65;
        if (*(void *)(sub_1000097B0(v56, &v65, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v66)[5] + 8))
        {
          v66 = &v65;
          v62 = sub_1000097B0(v56, &v65, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v66);
          sub_10056C5D4((uint64_t)v62, *(_DWORD **)(v62[5] + 8), (uint64_t)a3);
        }
        v66 = &v65;
        if (*(void *)(sub_1000097B0(v56, &v65, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v66)[5] + 16))
        {
          v66 = &v65;
          uint64_t v63 = sub_1000097B0(v56, &v65, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v66);
          sub_10056C5D4((uint64_t)v63, *(_DWORD **)(v63[5] + 16), (uint64_t)a3);
        }
      }
    }
  }
  if (v7) {
    operator delete((void *)v7);
  }
}

void sub_10055BAB8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10055BAE8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v11 = a2;
  unsigned int v4 = (uint64_t **)(a1 + 192);
  uint64_t v12 = &v11;
  if (*(void *)sub_1000097B0((uint64_t **)(a1 + 192), &v11, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v12)[5])
  {
    uint64_t v12 = &v11;
    uint64_t v5 = sub_1000097B0(v4, &v11, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v12);
    uint64_t v6 = *(void *)v5[5];
    if (v6) {
      uint64_t v7 = (_DWORD *)(v6 + 36);
    }
    else {
      uint64_t v7 = 0;
    }
    sub_10056C588((uint64_t)v5, v7, a3);
  }
  uint64_t v12 = &v11;
  if (*(void *)(sub_1000097B0(v4, &v11, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v12)[5] + 8))
  {
    uint64_t v12 = &v11;
    uint64_t v8 = sub_1000097B0(v4, &v11, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v12);
    uint64_t v9 = *(void *)(v8[5] + 8);
    if (v9) {
      BOOL v10 = (_DWORD *)(v9 + 36);
    }
    else {
      BOOL v10 = 0;
    }
    sub_10056C588((uint64_t)v8, v10, a3);
  }
}

double sub_10055BBF8(uint64_t a1, int a2, unsigned __int16 *a3)
{
  uint64_t v5 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 136))(v5))
  {
    uint64_t v7 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v8 = a3[2];
      double v9 = (double)(v8 >> 1) * 100.0;
      unsigned int v10 = *a3;
      unsigned int v11 = a3[1];
      v14[0] = 67111424;
      int v12 = a3[3];
      int v13 = a3[4];
      v14[1] = v8;
      __int16 v15 = 1024;
      int v16 = a2;
      __int16 v17 = 2048;
      double v18 = v9 / (double)v10;
      __int16 v19 = 2048;
      double v20 = v9 / (double)v11;
      __int16 v21 = 1024;
      unsigned int v22 = v8 >> 1;
      __int16 v23 = 1024;
      int v24 = (v8 & 1) + (v8 >> 1);
      __int16 v25 = 1024;
      unsigned int v26 = v10;
      __int16 v27 = 1024;
      unsigned int v28 = v11;
      __int16 v29 = 1024;
      int v30 = v12;
      __int16 v31 = 1024;
      int v32 = v13;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "DiversityReport:%3d switches in%3d sec. ReTx for {Ant0,Ant1} ~= {%3.0f%%,%3.0f%%} ((%2d ..%3d) / {%3d,%3d}). Good pkts b/w switches min =%3d, max =%3d", (uint8_t *)v14, 0x46u);
    }
  }
  return result;
}

uint64_t *sub_10055BD64(uint64_t a1, unint64_t a2, unsigned int a3, int a4)
{
  unint64_t v23 = a2;
  uint64_t v7 = (uint64_t **)(a1 + 192);
  *(void *)buf = &v23;
  if (*(__int16 *)(sub_1000097B0((uint64_t **)(a1 + 192), &v23, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 68) < 0)
  {
    int v13 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = a3;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "A2DP Link Adaptive Packet Type: Ignoring first retransmission rate report (%d%%)", buf, 8u);
    }
    goto LABEL_13;
  }
  *(void *)buf = &v23;
  double result = sub_1000097B0(v7, &v23, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
  if (*(unsigned char *)(*(void *)(result[5] + 40) + 2)) {
    return result;
  }
  if (a3 <= 0x1D && !a4)
  {
    if (a3 <= 0xA)
    {
      *(void *)buf = &v23;
      double result = sub_1000097B0(v7, &v23, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
      if (*(unsigned char *)(result[5] + 71))
      {
        *(void *)buf = &v23;
        double v9 = sub_1000097B0(v7, &v23, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
        ++*(_WORD *)(v9[5] + 68);
        *(void *)buf = &v23;
        double result = sub_1000097B0(v7, &v23, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
        if (*(__int16 *)(result[5] + 68) >= 6)
        {
          unsigned int v10 = qword_100A19E48;
          if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109378;
            *(_DWORD *)&uint8_t buf[4] = a3;
            __int16 v25 = 2082;
            unsigned int v26 = "No";
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "A2DP Link Adaptive Packet Type: Reverting to default support (%d%%) Purged %{public}s", buf, 0x12u);
          }
          __int16 v11 = sub_10056A6AC(a1, v23);
          uint64_t v12 = sub_1004AFB34();
          v19[0] = _NSConcreteStackBlock;
          v19[1] = 3221225472;
          void v19[2] = sub_10056A8B0;
          v19[3] = &unk_1009AD7F0;
          __int16 v20 = v11;
          sub_100013018(v12, v19);
          *(void *)buf = &v23;
          *(unsigned char *)(sub_1000097B0(v7, &v23, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 71) = 0;
LABEL_22:
          *(void *)buf = &v23;
          uint64_t v14 = v7;
          goto LABEL_14;
        }
      }
      return result;
    }
LABEL_13:
    *(void *)buf = &v23;
    uint64_t v14 = v7;
LABEL_14:
    double result = sub_1000097B0(v14, &v23, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
    *(_WORD *)(result[5] + 68) = 0;
    return result;
  }
  *(void *)buf = &v23;
  double result = sub_1000097B0(v7, &v23, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
  if (!*(unsigned char *)(result[5] + 71))
  {
    __int16 v15 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = "No";
      if (a4) {
        int v16 = "Yes";
      }
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = a3;
      __int16 v25 = 2082;
      unsigned int v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "A2DP Link Adaptive Packet Type: Scaling back to 2Mbps Packets support (%d%%) Purged %{public}s", buf, 0x12u);
    }
    __int16 v17 = sub_10056A6AC(a1, v23);
    uint64_t v18 = sub_1004AFB34();
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_10056A848;
    v21[3] = &unk_1009AD7F0;
    __int16 v22 = v17;
    sub_100013018(v18, v21);
    *(void *)buf = &v23;
    *(unsigned char *)(sub_1000097B0(v7, &v23, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 71) = 1;
    goto LABEL_22;
  }
  return result;
}

void sub_10055C1B0(uint64_t a1, unint64_t a2, unsigned int a3, char a4)
{
  unint64_t v29 = a2;
  uint64_t v7 = (uint64_t **)(a1 + 192);
  *(void *)buf = &v29;
  unint64_t v8 = *(_DWORD *)(sub_1000097B0((uint64_t **)(a1 + 192), &v29, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 80) == 33023;
  uint64_t v9 = *(void *)(a1 + 1016);
  if ((*(void *)(a1 + 1024) - v9) >> 3 <= v8)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
      sub_100779ED8();
    }
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 **)(v9 + 8 * v8);
    if (v10)
    {
      __int16 v11 = *(void **)(a1 + 200);
      if (!v11) {
        goto LABEL_54;
      }
      uint64_t v12 = a1 + 200;
      do
      {
        unint64_t v13 = v11[4];
        BOOL v14 = v13 >= v29;
        if (v13 >= v29) {
          __int16 v15 = v11;
        }
        else {
          __int16 v15 = v11 + 1;
        }
        if (v14) {
          uint64_t v12 = (uint64_t)v11;
        }
        __int16 v11 = (void *)*v15;
      }
      while (*v15);
      if (v12 == a1 + 200 || v29 < *(void *)(v12 + 32))
      {
LABEL_54:
        if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
          sub_100779EA4();
        }
        return;
      }
      unsigned __int8 v16 = *v10 - 1;
      if ((a4 & 1) == 0)
      {
        __int16 v17 = (unsigned __int8 *)*((void *)v10 + 1);
        if (*v17 <= a3)
        {
          if ((*v10 - 1) >= 2u)
          {
            uint64_t v18 = 0;
            while (v17[v18] > a3 || v17[v18 + 1] <= a3)
            {
              if ((*v10 - 1) - 1 == ++v18) {
                goto LABEL_30;
              }
            }
            unsigned __int8 v16 = v18 + 1;
          }
        }
        else
        {
          unsigned __int8 v16 = 0;
        }
      }
LABEL_30:
      __int16 v19 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEBUG))
      {
        *(void *)buf = &v29;
        unsigned int v25 = *(unsigned __int16 *)(sub_1000097B0(v7, &v29, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 58);
        *(void *)buf = &v29;
        if (v25 >= *(unsigned __int16 *)(sub_1000097B0(v7, &v29, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 60))
        {
          *(void *)buf = &v29;
          unsigned int v26 = (unsigned __int16 *)(sub_1000097B0(v7, &v29, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 60);
        }
        else
        {
          *(void *)buf = &v29;
          unsigned int v26 = (unsigned __int16 *)(sub_1000097B0(v7, &v29, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 58);
        }
        int v27 = *v26;
        *(void *)buf = &v29;
        int v28 = *(unsigned __int16 *)(sub_1000097B0(v7, &v29, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 58);
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)&uint8_t buf[4] = v27;
        __int16 v31 = 1024;
        int v32 = v28;
        __int16 v33 = 1024;
        unsigned int v34 = a3;
        _os_log_debug_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "A2DP Link Adaptive Bitrate: currentRate: %3d currentIndexedRate: %3d reTransmissionStats: %3d", buf, 0x14u);
      }
      *(void *)buf = &v29;
      if (*(unsigned __int16 *)(sub_1000097B0(v7, &v29, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 58) <= *(unsigned __int16 *)(*((void *)v10 + 2) + 2 * v16))
      {
        *(void *)buf = &v29;
        if (*(unsigned __int16 *)(sub_1000097B0(v7, &v29, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 58) < *(unsigned __int16 *)(*((void *)v10 + 2) + 2 * v16))
        {
          *(void *)buf = &v29;
          __int16 v20 = sub_1000097B0(v7, &v29, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
          uint64_t v21 = *v10;
          if (*v10)
          {
            uint64_t v22 = 0;
            uint64_t v23 = *((void *)v10 + 2);
            while (*(unsigned __int16 *)(v23 + 2 * v22) > *(unsigned __int8 *)(v20[5] + 58))
            {
              if (v21 == ++v22)
              {
                LODWORD(v22) = *v10;
                break;
              }
            }
            if ((int)v22 >= 1 && (int)v22 <= (int)v21) {
              sub_10056AC98(a1, v29, *(unsigned __int16 *)(v23 + 2 * (v22 - 1)));
            }
          }
          goto LABEL_46;
        }
      }
      else
      {
        *(void *)buf = &v29;
        if (*(__int16 *)(sub_1000097B0(v7, &v29, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 62) < 0)
        {
          int v24 = qword_100A19E48;
          if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = a3;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "A2DP Link Adaptive Bitrate: Ignoring first retransmission rate report (%d%%)", buf, 8u);
          }
        }
        else
        {
          sub_10056A918(a1, v29, *(unsigned __int16 *)(*((void *)v10 + 2) + 2 * v16));
        }
      }
      *(void *)buf = &v29;
      *(_WORD *)(sub_1000097B0(v7, &v29, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 62) = 0;
LABEL_46:
      *(void *)buf = &v29;
      *(unsigned char *)(sub_1000097B0(v7, &v29, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 70) = 0;
      return;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
      sub_100779E70();
    }
  }
}

void sub_10055C6E0(float a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  if (*(_WORD *)(a3 + 16))
  {
    LOWORD(a1) = *(_WORD *)(a3 + 18);
    double v8 = (float)((float)((float)LODWORD(a1) * 100.0) / (float)*(unsigned __int16 *)(a3 + 16));
  }
  else
  {
    double v8 = 0.0;
  }
  uint64_t v9 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 176))(v9))
  {
    uint64_t v10 = sub_10003FB34();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 2488))(v10))
    {
      uint64_t v11 = qword_100A19E48;
      if (!os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      int v12 = *(unsigned __int16 *)(a3 + 2);
      int v13 = *(unsigned __int16 *)(a3 + 18);
      int v112 = a4;
      int v14 = *(unsigned __int16 *)(a3 + 16);
      int v15 = *(unsigned __int16 *)(a3 + 179);
      int v77 = *(char *)(a3 + 217);
      int v79 = *(char *)(a3 + 218);
      int v81 = *(char *)(a3 + 219);
      uint64_t v16 = 222;
      if (*(unsigned __int8 *)(a3 + 221) < 2u) {
        uint64_t v16 = 220;
      }
      int v17 = *(unsigned __int8 *)(a3 + v16);
      int v18 = *(unsigned __int16 *)(a3 + 14);
      int v72 = *(unsigned __int16 *)(a3 + 183);
      int v73 = *(char *)(a3 + 9);
      int v74 = *(unsigned __int16 *)(a3 + 185);
      int v75 = *(char *)(a3 + 6);
      int v76 = *(unsigned __int16 *)(a3 + 187);
      int v78 = *(unsigned __int16 *)(a3 + 189);
      int v80 = *(unsigned __int16 *)(a3 + 191);
      int v82 = *(unsigned __int16 *)(a3 + 193);
      int v84 = *(unsigned __int16 *)(a3 + 195);
      int v86 = *(unsigned __int16 *)(a3 + 197);
      int v88 = *(unsigned __int16 *)(a3 + 199);
      int v90 = *(unsigned __int16 *)(a3 + 201);
      int v92 = *(unsigned __int16 *)(a3 + 203);
      int v94 = *(unsigned __int16 *)(a3 + 205);
      int v96 = *(unsigned __int16 *)(a3 + 207);
      int v98 = *(unsigned __int16 *)(a3 + 209);
      int v101 = *(unsigned __int16 *)(a3 + 211);
      int v104 = *(unsigned __int16 *)(a3 + 213);
      int v108 = *(unsigned __int16 *)(a3 + 177);
      sub_100475F84(a5, (uint64_t)__p);
      int v119 = v12;
      __int16 v19 = (void **)__p[0];
      if (v117 >= 0) {
        __int16 v19 = __p;
      }
      __int16 v120 = 2048;
      *(_DWORD *)buf = 67117058;
      double v121 = v8;
      int v123 = v13;
      __int16 v122 = 1024;
      __int16 v124 = 1024;
      int v125 = v14;
      __int16 v126 = 1024;
      int v127 = v15;
      __int16 v128 = 1024;
      int v129 = v13 - v15;
      __int16 v130 = 1024;
      int v131 = v73;
      __int16 v132 = 1024;
      int v133 = v75;
      __int16 v134 = 1024;
      int v135 = v77;
      __int16 v136 = 1024;
      int v137 = v79;
      __int16 v138 = 1024;
      int v139 = v81;
      __int16 v140 = 1024;
      int v141 = v17;
      __int16 v142 = 1024;
      int v143 = v18;
      __int16 v144 = 1024;
      *(_DWORD *)v145 = v72;
      *(_WORD *)&v145[4] = 1024;
      *(_DWORD *)&v145[6] = v74;
      __int16 v146 = 1024;
      *(_DWORD *)v147 = v76;
      *(_WORD *)&v147[4] = 1024;
      *(_DWORD *)&v147[6] = v78;
      __int16 v148 = 1024;
      int v149 = v80;
      __int16 v150 = 1024;
      int v151 = v82;
      __int16 v152 = 1024;
      int v153 = v84;
      __int16 v154 = 1024;
      *(_DWORD *)v155 = v86;
      *(_WORD *)&v155[4] = 1024;
      *(_DWORD *)&v155[6] = v88;
      __int16 v156 = 1024;
      int v157 = v90;
      __int16 v158 = 1024;
      int v159 = v92;
      __int16 v160 = 1024;
      int v161 = v94;
      __int16 v162 = 1024;
      int v163 = v96;
      __int16 v164 = 1024;
      int v165 = v98;
      __int16 v166 = 1024;
      int v167 = v101;
      __int16 v168 = 1024;
      int v169 = v104;
      __int16 v170 = 1024;
      int v171 = v112;
      __int16 v172 = 1024;
      int v173 = v108;
      __int16 v174 = 2080;
      v175 = v19;
      __int16 v20 = "A2DP LinkQualityReport: Handle = %d ReTx = %4.1f%% (%3d / %3d), NAK = %4d, NoSync = %4d, TxPwr = %2d dBm, RS"
            "SI = %4d, {50,75,90}th Noise = {%4d,%4d,%4d} for %2d ch, 2EDR pkts = %3d, 3EDRTx pkts = %3d, HDR4Tx pkts = %"
            "3d, HDR8Tx pkts = %3d,  1SlotTx pkts = %3d, 3SlotTx pkts = %3d, 5SlotTx pkts = %3d, CoexDenial = %3d, CoexRe"
            "quest = %3d, 3EDRRx pkts = %3d, HDR4Rx pkts = %3d, HDR8Rx pkts = %3d, 1SlotRx pkts = %3d, 3SlotRx pkts = %3d"
            ", 5SlotRx pkts = %3d, TxFlush pkts =%3d, Tx2Flush pkts = %3d, rate = %3d kbps Flow off = %d devicename = %s";
      uint64_t v21 = v11;
      uint32_t v22 = 202;
      goto LABEL_36;
    }
  }
  uint64_t v23 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v23 + 176))(v23) && sub_100476504(a5))
  {
    uint64_t v24 = qword_100A19E48;
    if (!os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v113 = a4;
    int v25 = *(unsigned __int16 *)(a3 + 2);
    int v26 = *(unsigned __int16 *)(a3 + 18);
    int v27 = *(unsigned __int16 *)(a3 + 16);
    int v28 = *(unsigned __int16 *)(a3 + 179);
    int v95 = *(char *)(a3 + 217);
    int v99 = *(char *)(a3 + 218);
    int v105 = *(char *)(a3 + 219);
    uint64_t v29 = 222;
    if (*(unsigned __int8 *)(a3 + 221) < 2u) {
      uint64_t v29 = 220;
    }
    int v30 = *(unsigned __int8 *)(a3 + v29);
    int v83 = *(unsigned __int16 *)(a3 + 14);
    int v85 = *(unsigned __int16 *)(a3 + 183);
    int v87 = *(char *)(a3 + 9);
    int v89 = *(unsigned __int16 *)(a3 + 185);
    int v91 = *(char *)(a3 + 6);
    int v93 = *(unsigned __int16 *)(a3 + 187);
    int v97 = *(unsigned __int16 *)(a3 + 195);
    int v102 = *(unsigned __int16 *)(a3 + 197);
    int v109 = *(unsigned __int16 *)(a3 + 177);
    sub_100475F84(a5, (uint64_t)__p);
    if (v117 >= 0) {
      __int16 v31 = __p;
    }
    else {
      __int16 v31 = (void **)__p[0];
    }
    *(_DWORD *)buf = 67114242;
    int v119 = v25;
    __int16 v120 = 2048;
    double v121 = v8;
    __int16 v122 = 1024;
    int v123 = v26;
    __int16 v124 = 1024;
    int v125 = v27;
    __int16 v126 = 1024;
    int v127 = v28;
    __int16 v128 = 1024;
    int v129 = v26 - v28;
    __int16 v130 = 1024;
    int v131 = v87;
    __int16 v132 = 1024;
    int v133 = v91;
    __int16 v134 = 1024;
    int v135 = v95;
    __int16 v136 = 1024;
    int v137 = v99;
    __int16 v138 = 1024;
    int v139 = v105;
    __int16 v140 = 1024;
    int v141 = v30;
    __int16 v142 = 1024;
    int v143 = v83;
    __int16 v144 = 1024;
    *(_DWORD *)v145 = v85;
    *(_WORD *)&v145[4] = 1024;
    *(_DWORD *)&v145[6] = v89;
    __int16 v146 = 1024;
    *(_DWORD *)v147 = v93;
    *(_WORD *)&v147[4] = 1024;
    *(_DWORD *)&v147[6] = v97;
    __int16 v148 = 1024;
    int v149 = v102;
    __int16 v150 = 1024;
    int v151 = v113;
    __int16 v152 = 1024;
    int v153 = v109;
    __int16 v154 = 2080;
    *(void *)v155 = v31;
    __int16 v20 = "A2DP LinkQualityReport: Handle = %d ReTx = %4.1f%% (%3d / %3d), NAK = %4d, NoSync = %4d, TxPwr = %2d dBm, RSSI"
          " = %4d, {50,75,90}th Noise = {%4d,%4d,%4d} for %2d ch, 2EDR pkts = %3d, 3EDR pkts = %3d, HDR4 pkts = %3d, HDR8"
          " pkts = %3d, CoexDenial = %3d, CoexRequest = %3d, rate = %3d kbps Flow off = %d devicename = %s";
    uint64_t v21 = v24;
    uint32_t v22 = 136;
    goto LABEL_36;
  }
  uint64_t v32 = sub_100035F54();
  int v33 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 816))(v32);
  uint64_t v34 = qword_100A19E48;
  BOOL v35 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
  if (!v33)
  {
    if (!v35) {
      return;
    }
    int v115 = a4;
    int v53 = *(unsigned __int16 *)(a3 + 2);
    int v54 = *(unsigned __int16 *)(a3 + 18);
    int v55 = *(unsigned __int16 *)(a3 + 16);
    int v56 = *(char *)(a3 + 9);
    int v57 = *(char *)(a3 + 6);
    int v58 = *(char *)(a3 + 217);
    int v59 = *(char *)(a3 + 218);
    int v60 = *(char *)(a3 + 219);
    uint64_t v61 = 222;
    if (*(unsigned __int8 *)(a3 + 221) < 2u) {
      uint64_t v61 = 220;
    }
    int v62 = *(unsigned __int8 *)(a3 + v61);
    int v63 = *(unsigned __int16 *)(a3 + 14);
    int v64 = *(unsigned __int16 *)(a3 + 177);
    if (a5)
    {
      uint64_t v65 = a5;
      int v66 = *(char *)(a3 + 219);
      int v107 = *(unsigned __int16 *)(a3 + 14);
      int v111 = *(unsigned __int16 *)(a3 + 177);
      int v67 = *(unsigned __int8 *)(a3 + v61);
      sub_100475F84(v65, (uint64_t)__p);
      v68 = __p;
      if (v117 < 0) {
        v68 = (void **)__p[0];
      }
      *(_DWORD *)buf = 67112450;
      int v119 = v53;
      __int16 v120 = 2048;
      double v121 = v8;
      __int16 v122 = 1024;
      int v123 = v54;
      __int16 v124 = 1024;
      int v125 = v55;
      __int16 v126 = 1024;
      int v127 = v56;
      __int16 v128 = 1024;
      int v129 = v57;
      __int16 v130 = 1024;
      int v131 = v58;
      __int16 v132 = 1024;
      int v133 = v59;
      __int16 v134 = 1024;
      int v135 = v66;
      __int16 v136 = 1024;
      int v137 = v67;
      __int16 v138 = 1024;
      int v139 = v107;
      __int16 v140 = 1024;
      int v141 = v115;
      __int16 v142 = 1024;
      int v143 = v111;
      __int16 v144 = 2080;
      *(void *)v145 = v68;
      __int16 v20 = "A2DP LinkQualityReport: Handle = %d ReTx = %4.1f%% (%3d /%3d), TxPwr =%2d dBm, RSSI =%4d, {50,75,90}th Noise"
            " = {%4d,%4d,%4d} for %2d ch, 2EDR pkts =%3d, rate = %3d kbps Flow off=%d devicename=%s";
      uint64_t v21 = v34;
      uint32_t v22 = 94;
      goto LABEL_36;
    }
    *(_DWORD *)buf = 67112450;
    int v119 = v53;
    __int16 v120 = 2048;
    double v121 = v8;
    __int16 v122 = 1024;
    int v123 = v54;
    __int16 v124 = 1024;
    int v125 = v55;
    __int16 v126 = 1024;
    int v127 = v56;
    __int16 v128 = 1024;
    int v129 = v57;
    __int16 v130 = 1024;
    int v131 = v58;
    __int16 v132 = 1024;
    int v133 = v59;
    __int16 v134 = 1024;
    int v135 = v60;
    __int16 v136 = 1024;
    int v137 = v62;
    __int16 v138 = 1024;
    int v139 = v63;
    __int16 v140 = 1024;
    int v141 = v115;
    __int16 v142 = 1024;
    int v143 = v64;
    __int16 v144 = 2080;
    *(void *)v145 = "(NULL)";
    v69 = "A2DP LinkQualityReport: Handle = %d ReTx = %4.1f%% (%3d /%3d), TxPwr =%2d dBm, RSSI =%4d, {50,75,90}th Noise ="
          " {%4d,%4d,%4d} for %2d ch, 2EDR pkts =%3d, rate = %3d kbps Flow off=%d devicename=%s";
    v70 = v34;
    uint32_t v71 = 94;
LABEL_40:
    _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, v69, buf, v71);
    return;
  }
  if (!v35) {
    return;
  }
  int v114 = a4;
  int v36 = *(unsigned __int16 *)(a3 + 2);
  int v37 = *(unsigned __int16 *)(a3 + 18);
  int v38 = *(unsigned __int16 *)(a3 + 16);
  int v39 = *(unsigned __int16 *)(a3 + 179);
  int v40 = *(char *)(a3 + 9);
  int v41 = *(char *)(a3 + 6);
  int v42 = *(char *)(a3 + 217);
  int v43 = *(char *)(a3 + 218);
  int v44 = *(char *)(a3 + 219);
  uint64_t v45 = 222;
  if (*(unsigned __int8 *)(a3 + 221) < 2u) {
    uint64_t v45 = 220;
  }
  int v46 = *(unsigned __int8 *)(a3 + v45);
  int v47 = *(unsigned __int16 *)(a3 + 14);
  int v48 = *(unsigned __int16 *)(a3 + 177);
  if (!a5)
  {
    *(_DWORD *)buf = 67112962;
    int v119 = v36;
    __int16 v120 = 2048;
    double v121 = v8;
    __int16 v122 = 1024;
    int v123 = v37;
    __int16 v124 = 1024;
    int v125 = v38;
    __int16 v126 = 1024;
    int v127 = v39;
    __int16 v128 = 1024;
    int v129 = v37 - v39;
    __int16 v130 = 1024;
    int v131 = v40;
    __int16 v132 = 1024;
    int v133 = v41;
    __int16 v134 = 1024;
    int v135 = v42;
    __int16 v136 = 1024;
    int v137 = v43;
    __int16 v138 = 1024;
    int v139 = v44;
    __int16 v140 = 1024;
    int v141 = v46;
    __int16 v142 = 1024;
    int v143 = v47;
    __int16 v144 = 1024;
    *(_DWORD *)v145 = v114;
    *(_WORD *)&v145[4] = 1024;
    *(_DWORD *)&v145[6] = v48;
    __int16 v146 = 2080;
    *(void *)v147 = "(NULL)";
    v69 = "A2DP LinkQualityReport: Handle = %d ReTx = %4.1f%% (%3d /%3d), NAK =%4d, NoSync =%4d, TxPwr =%2d dBm, RSSI =%4"
          "d, {50,75,90}th Noise = {%4d,%4d,%4d} for %2d ch, 2EDR pkts =%3d, rate = %3d kbps Flow off=%d devicename=%s";
    v70 = v34;
    uint32_t v71 = 106;
    goto LABEL_40;
  }
  uint64_t v49 = a5;
  int v106 = *(unsigned __int16 *)(a3 + 14);
  int v110 = *(unsigned __int16 *)(a3 + 177);
  int v100 = *(char *)(a3 + 219);
  int v103 = *(unsigned __int8 *)(a3 + v45);
  int v50 = *(char *)(a3 + 218);
  int v51 = *(char *)(a3 + 9);
  sub_100475F84(v49, (uint64_t)__p);
  unint64_t v52 = __p;
  if (v117 < 0) {
    unint64_t v52 = (void **)__p[0];
  }
  *(_DWORD *)buf = 67112962;
  int v119 = v36;
  __int16 v120 = 2048;
  double v121 = v8;
  __int16 v122 = 1024;
  int v123 = v37;
  __int16 v124 = 1024;
  int v125 = v38;
  __int16 v126 = 1024;
  int v127 = v39;
  __int16 v128 = 1024;
  int v129 = v37 - v39;
  __int16 v130 = 1024;
  int v131 = v51;
  __int16 v132 = 1024;
  int v133 = v41;
  __int16 v134 = 1024;
  int v135 = v42;
  __int16 v136 = 1024;
  int v137 = v50;
  __int16 v138 = 1024;
  int v139 = v100;
  __int16 v140 = 1024;
  int v141 = v103;
  __int16 v142 = 1024;
  int v143 = v106;
  __int16 v144 = 1024;
  *(_DWORD *)v145 = v114;
  *(_WORD *)&v145[4] = 1024;
  *(_DWORD *)&v145[6] = v110;
  __int16 v146 = 2080;
  *(void *)v147 = v52;
  __int16 v20 = "A2DP LinkQualityReport: Handle = %d ReTx = %4.1f%% (%3d /%3d), NAK =%4d, NoSync =%4d, TxPwr =%2d dBm, RSSI =%4d,"
        " {50,75,90}th Noise = {%4d,%4d,%4d} for %2d ch, 2EDR pkts =%3d, rate = %3d kbps Flow off=%d devicename=%s";
  uint64_t v21 = v34;
  uint32_t v22 = 106;
LABEL_36:
  _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, v20, buf, v22);
  if (v117 < 0) {
    operator delete(__p[0]);
  }
}

uint64_t *sub_10055D0FC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v41 = a2;
  unsigned int v4 = (uint64_t **)(a1 + 192);
  int v42 = &v41;
  *(unsigned char *)(*(void *)(sub_1000097B0((uint64_t **)(a1 + 192), &v41, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v42)[5] + 8)
           + 168) = *(unsigned char *)(a3 + 6);
  int v42 = &v41;
  uint64_t v5 = *(void *)(sub_1000097B0(v4, &v41, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v42)[5] + 8);
  *(void *)(v5 + 192) += *(char *)(a3 + 6);
  ++*(_DWORD *)(v5 + 200);
  int v42 = &v41;
  uint64_t v6 = *(void *)(sub_1000097B0(v4, &v41, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v42)[5] + 8);
  int v7 = *(char *)(a3 + 7);
  if (*(_DWORD *)(v6 + 204) > v7) {
    *(_DWORD *)(v6 + 204) = v7;
  }
  int v42 = &v41;
  uint64_t v8 = *(void *)(sub_1000097B0(v4, &v41, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v42)[5] + 8);
  int v9 = *(char *)(a3 + 8);
  if (*(_DWORD *)(v8 + 208) < v9) {
    *(_DWORD *)(v8 + 208) = v9;
  }
  int v42 = &v41;
  uint64_t v10 = sub_1000097B0(v4, &v41, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v42);
  *(_DWORD *)(*(void *)(v10[5] + 8) + 96) += *(unsigned __int16 *)(a3 + 34);
  int v42 = &v41;
  uint64_t v11 = sub_1000097B0(v4, &v41, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v42);
  *(_DWORD *)(*(void *)(v11[5] + 8) + 100) += *(unsigned __int16 *)(a3 + 58);
  int v42 = &v41;
  int v12 = sub_1000097B0(v4, &v41, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v42);
  *(_DWORD *)(*(void *)(v12[5] + 8) + 104) += *(unsigned __int16 *)(a3 + 46);
  int v42 = &v41;
  int v13 = sub_1000097B0(v4, &v41, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v42);
  *(_DWORD *)(*(void *)(v13[5] + 8) + 108) += *(unsigned __int16 *)(a3 + 70);
  int v42 = &v41;
  int v14 = sub_1000097B0(v4, &v41, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v42);
  *(_DWORD *)(*(void *)(v14[5] + 8) + 112) += *(unsigned __int16 *)(a3 + 40)
                                                + *(unsigned __int16 *)(a3 + 28)
                                                + *(unsigned __int16 *)(a3 + 50);
  int v42 = &v41;
  int v15 = sub_1000097B0(v4, &v41, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v42);
  *(_DWORD *)(*(void *)(v15[5] + 8) + 116) += *(unsigned __int16 *)(a3 + 64) + 2 * *(unsigned __int16 *)(a3 + 74);
  int v42 = &v41;
  uint64_t v16 = sub_1000097B0(v4, &v41, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v42);
  *(_DWORD *)(*(void *)(v16[5] + 8) + 120) += *(unsigned __int16 *)(a3 + 36) + *(unsigned __int16 *)(a3 + 32);
  int v42 = &v41;
  int v17 = sub_1000097B0(v4, &v41, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v42);
  *(_DWORD *)(*(void *)(v17[5] + 8) + 124) += *(unsigned __int16 *)(a3 + 60) + *(unsigned __int16 *)(a3 + 56);
  int v42 = &v41;
  int v18 = sub_1000097B0(v4, &v41, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v42);
  *(_DWORD *)(*(void *)(v18[5] + 8) + 128) += *(unsigned __int16 *)(a3 + 44);
  int v42 = &v41;
  __int16 v19 = sub_1000097B0(v4, &v41, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v42);
  *(_DWORD *)(*(void *)(v19[5] + 8) + 132) += *(unsigned __int16 *)(a3 + 68);
  if (*(_WORD *)(a3 + 70))
  {
    int v42 = &v41;
    __int16 v20 = sub_1000097B0(v4, &v41, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v42);
    LOWORD(v21) = *(_WORD *)(a3 + 70);
    *(_DWORD *)(*(void *)(v20[5] + 8) + 216) = (float)((float)((float)(*(unsigned __int16 *)(a3 + 64)
                                                                                       + 2
                                                                                       * *(unsigned __int16 *)(a3 + 74))
                                                                               * 100.0)
                                                                       / (float)v21);
    int v42 = &v41;
    uint32_t v22 = sub_1000097B0(v4, &v41, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v42);
    LOWORD(v23) = *(_WORD *)(a3 + 70);
    *(_DWORD *)(*(void *)(v22[5] + 8) + 220) = (float)((float)((float)(*(unsigned __int16 *)(a3 + 60)
                                                                                       + *(unsigned __int16 *)(a3 + 56))
                                                                               * 100.0)
                                                                       / (float)v23);
  }
  int v42 = &v41;
  double result = sub_1000097B0(v4, &v41, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v42);
  if (*(unsigned char *)(*(void *)(result[5] + 8) + 237))
  {
    if (*(unsigned char *)(v41 + 1373))
    {
      int v42 = &v41;
      int v25 = sub_1000097B0(v4, &v41, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v42);
      ++*(_DWORD *)(*(void *)(v25[5] + 8) + 244);
    }
    else
    {
      int v42 = &v41;
      int v26 = sub_1000097B0(v4, &v41, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v42);
      ++*(_DWORD *)(*(void *)(v26[5] + 8) + 240);
    }
    uint64_t v27 = *(unsigned __int16 *)(a3 + 12);
    int v42 = &v41;
    int v28 = sub_1000097B0(v4, &v41, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v42);
    *(void *)(*(void *)(v28[5] + 8) + 248) += v27;
    uint64_t v29 = *(unsigned __int16 *)(a3 + 18);
    int v42 = &v41;
    int v30 = sub_1000097B0(v4, &v41, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v42);
    *(void *)(*(void *)(v30[5] + 8) + 256) += v29;
    uint64_t v31 = *(unsigned __int16 *)(a3 + 211);
    int v42 = &v41;
    uint64_t v32 = sub_1000097B0(v4, &v41, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v42);
    *(void *)(*(void *)(v32[5] + 8) + 264) += v31;
    uint64_t v33 = *(unsigned __int16 *)(a3 + 213);
    int v42 = &v41;
    uint64_t v34 = sub_1000097B0(v4, &v41, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v42);
    *(void *)(*(void *)(v34[5] + 8) + 272) += v33;
    uint64_t v35 = *(unsigned __int16 *)(a3 + 16);
    int v42 = &v41;
    int v36 = sub_1000097B0(v4, &v41, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v42);
    *(void *)(*(void *)(v36[5] + 8) + 280) += v35;
    int v42 = &v41;
    double v37 = (double)*(unint64_t *)(*(void *)(sub_1000097B0(v4, &v41, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v42)[5]
                                                  + 8)
                                      + 256);
    int v42 = &v41;
    LODWORD(v35) = (v37
                                / (double)*(unint64_t *)(*(void *)(sub_1000097B0(v4, &v41, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v42)[5]+ 8)+ 280)* 100.0);
    int v42 = &v41;
    *(_DWORD *)(*(void *)(sub_1000097B0(v4, &v41, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v42)[5] + 8) + 216) = v35;
    uint64_t v38 = *(unsigned __int16 *)(a3 + 20);
    int v42 = &v41;
    int v39 = sub_1000097B0(v4, &v41, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v42);
    *(void *)(*(void *)(v39[5] + 8) + 288) += v38;
    uint64_t v40 = *(unsigned __int16 *)(a3 + 22);
    int v42 = &v41;
    double result = sub_1000097B0(v4, &v41, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v42);
    *(void *)(*(void *)(result[5] + 8) + 296) += v40;
  }
  return result;
}

void sub_10055D7C0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  sub_10056F87C(a1, a3, (unsigned int *)&v65 + 1, (unsigned int *)&v65, (unsigned int *)&v64, (_DWORD *)&v64 + 1, a2);
  uint64_t v5 = *(void *)sub_10003FB34();
  int v6 = (*(uint64_t (**)(void))(v5 + 2488))();
  uint64_t v7 = qword_100A19E48;
  BOOL v8 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
  if (!v6)
  {
    if (!v8) {
      return;
    }
    int v36 = *(char *)(a2 + 6);
    int v37 = *(char *)(a2 + 9);
    int v38 = v65;
    int v39 = HIDWORD(v65);
    unsigned int v40 = *(unsigned __int16 *)(a2 + 46);
    double v41 = (float)((float)((float)(*(unsigned __int16 *)(a2 + 40)
                                + *(unsigned __int16 *)(a2 + 28)
                                + *(unsigned __int16 *)(a2 + 50))
                        * 100.0)
                / (float)v40);
    unsigned int v42 = *(unsigned __int16 *)(a2 + 70);
    double v43 = (float)((float)((float)(*(unsigned __int16 *)(a2 + 64)
                                + *(unsigned __int16 *)(a2 + 52)
                                + *(unsigned __int16 *)(a2 + 74))
                        * 100.0)
                / (float)v42);
    double v44 = (float)((float)((float)(*(unsigned __int16 *)(a2 + 36) + *(unsigned __int16 *)(a2 + 32)) * 100.0) / (float)v40);
    double v45 = (float)((float)((float)(*(unsigned __int16 *)(a2 + 60) + *(unsigned __int16 *)(a2 + 56)) * 100.0) / (float)v42);
    unsigned int v46 = *(unsigned __int16 *)(a2 + 44);
    double v47 = (float)((float)((float)(int)(*(unsigned __int16 *)(a2 + 68) + v46) * 100.0) / (float)(int)(v42 + v40));
    double v48 = (float)((float)((float)v46 * 100.0) / (float)v40);
    int v49 = *(char *)(a2 + 217);
    int v50 = *(char *)(a2 + 218);
    int v51 = *(char *)(a2 + 219);
    int v52 = *(unsigned __int8 *)(a2 + 220);
    if (a3)
    {
      uint64_t v53 = a3;
      int v54 = HIDWORD(v64);
      int v55 = *(char *)(a2 + 9);
      int v56 = v51;
      sub_100475F84(v53, (uint64_t)__p);
      int v57 = __p;
      if (v63 < 0) {
        int v57 = (void **)__p[0];
      }
      *(_DWORD *)buf = 67112962;
      int v67 = v36;
      __int16 v68 = 1024;
      int v69 = v55;
      __int16 v70 = 1024;
      int v71 = v39;
      __int16 v72 = 1024;
      int v73 = v38;
      __int16 v74 = 1024;
      int v75 = v54;
      __int16 v76 = 2048;
      double v77 = v41;
      __int16 v78 = 2048;
      double v79 = v43;
      __int16 v80 = 2048;
      double v81 = v44;
      __int16 v82 = 2048;
      double v83 = v45;
      __int16 v84 = 2048;
      double v85 = v47;
      __int16 v86 = 2048;
      double v87 = v48;
      __int16 v88 = 1024;
      int v89 = v49;
      __int16 v90 = 1024;
      int v91 = v50;
      __int16 v92 = 1024;
      int v93 = v56;
      __int16 v94 = 1024;
      int v95 = v52;
      __int16 v96 = 2080;
      *(void *)int v97 = v57;
      uint64_t v33 = "HFP LinkQualityReport: RSSI =%4d, TxPower =%2d, PLC count = %u, Received SCO count = %u, AudioInput: %u, TX "
            "[TX: %4.1f%%, ReTX: %4.1f%%], RX [TX: %4.1f%%, ReTX: %4.1f%%] ,ePA Packets = %4.1f%%, ePA CallTime = %4.1f%%"
            ", 50/75/90th Noise = (%4d,%4d,%4d) for %2d ch devicename= %s";
      uint64_t v34 = v7;
      uint32_t v35 = 126;
      goto LABEL_12;
    }
    *(_DWORD *)buf = 67112962;
    int v67 = v36;
    __int16 v68 = 1024;
    int v69 = v37;
    __int16 v70 = 1024;
    int v71 = HIDWORD(v65);
    __int16 v72 = 1024;
    int v73 = v65;
    __int16 v74 = 1024;
    int v75 = HIDWORD(v64);
    __int16 v76 = 2048;
    double v77 = v41;
    __int16 v78 = 2048;
    double v79 = v43;
    __int16 v80 = 2048;
    double v81 = v44;
    __int16 v82 = 2048;
    double v83 = v45;
    __int16 v84 = 2048;
    double v85 = v47;
    __int16 v86 = 2048;
    double v87 = (float)((float)((float)v46 * 100.0) / (float)v40);
    __int16 v88 = 1024;
    int v89 = v49;
    __int16 v90 = 1024;
    int v91 = v50;
    __int16 v92 = 1024;
    int v93 = v51;
    __int16 v94 = 1024;
    int v95 = v52;
    __int16 v96 = 2080;
    *(void *)int v97 = "(NULL)";
    int v58 = "HFP LinkQualityReport: RSSI =%4d, TxPower =%2d, PLC count = %u, Received SCO count = %u, AudioInput: %u, TX [T"
          "X: %4.1f%%, ReTX: %4.1f%%], RX [TX: %4.1f%%, ReTX: %4.1f%%] ,ePA Packets = %4.1f%%, ePA CallTime = %4.1f%%, 50"
          "/75/90th Noise = (%4d,%4d,%4d) for %2d ch devicename= %s";
    int v59 = v7;
    uint32_t v60 = 126;
LABEL_16:
    _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, v58, buf, v60);
    return;
  }
  if (!v8) {
    return;
  }
  int v9 = *(char *)(a2 + 6);
  int v10 = *(char *)(a2 + 9);
  int v11 = v65;
  unsigned int v12 = *(unsigned __int16 *)(a2 + 46);
  float v13 = (float)v12;
  double v14 = (float)((float)((float)(*(unsigned __int16 *)(a2 + 40)
                              + *(unsigned __int16 *)(a2 + 28)
                              + *(unsigned __int16 *)(a2 + 50))
                      * 100.0)
              / (float)v12);
  unsigned int v15 = *(unsigned __int16 *)(a2 + 70);
  double v16 = (float)((float)((float)(*(unsigned __int16 *)(a2 + 64)
                              + *(unsigned __int16 *)(a2 + 52)
                              + *(unsigned __int16 *)(a2 + 74))
                      * 100.0)
              / (float)v15);
  double v17 = (float)((float)((float)(*(unsigned __int16 *)(a2 + 36) + *(unsigned __int16 *)(a2 + 32)) * 100.0) / (float)v12);
  double v18 = (float)((float)((float)(*(unsigned __int16 *)(a2 + 60) + *(unsigned __int16 *)(a2 + 56)) * 100.0) / (float)v15);
  unsigned int v19 = *(unsigned __int16 *)(a2 + 44);
  int v20 = *(unsigned __int16 *)(a2 + 68) + v19;
  int v21 = v15 + v12;
  double v22 = (float)((float)((float)v20 * 100.0) / (float)v21);
  double v23 = (float)((float)((float)v19 * 100.0) / v13);
  int v24 = *(char *)(a2 + 217);
  int v25 = *(char *)(a2 + 218);
  int v26 = *(char *)(a2 + 219);
  int v27 = *(unsigned __int8 *)(a2 + 220);
  int v28 = *(unsigned __int16 *)(a2 + 215);
  if (!a3)
  {
    *(_DWORD *)buf = 67113218;
    int v67 = v9;
    __int16 v68 = 1024;
    int v69 = v10;
    __int16 v70 = 1024;
    int v71 = HIDWORD(v65);
    __int16 v72 = 1024;
    int v73 = v65;
    __int16 v74 = 1024;
    int v75 = HIDWORD(v64);
    __int16 v76 = 2048;
    double v77 = v14;
    __int16 v78 = 2048;
    double v79 = v16;
    __int16 v80 = 2048;
    double v81 = v17;
    __int16 v82 = 2048;
    double v83 = v18;
    __int16 v84 = 2048;
    double v85 = (float)((float)((float)v20 * 100.0) / (float)v21);
    __int16 v86 = 2048;
    double v87 = v23;
    __int16 v88 = 1024;
    int v89 = v24;
    __int16 v90 = 1024;
    int v91 = v25;
    __int16 v92 = 1024;
    int v93 = v26;
    __int16 v94 = 1024;
    int v95 = v27;
    __int16 v96 = 1024;
    *(_DWORD *)int v97 = v28;
    *(_WORD *)&v97[4] = 2080;
    *(void *)&v97[6] = "(NULL)";
    int v58 = "HFP LinkQualityReport: RSSI =%4d, TxPower =%2d, PLC count = %u, Received SCO count = %u, AudioInput: %u, TX [T"
          "X: %4.1f%%, ReTX: %4.1f%%], RX [TX: %4.1f%%, ReTX: %4.1f%%] ,ePA Packets = %4.1f%%, ePA CallTime = %4.1f%%, 50"
          "/75/90th Noise = (%4d,%4d,%4d) for %2d, eSCONak pkts = %3d, ch devicename= %s";
    int v59 = v7;
    uint32_t v60 = 132;
    goto LABEL_16;
  }
  uint64_t v29 = a3;
  int v30 = HIDWORD(v64);
  int v31 = HIDWORD(v65);
  int v61 = v28;
  sub_100475F84(v29, (uint64_t)__p);
  uint64_t v32 = __p;
  if (v63 < 0) {
    uint64_t v32 = (void **)__p[0];
  }
  *(_DWORD *)buf = 67113218;
  int v67 = v9;
  __int16 v68 = 1024;
  int v69 = v10;
  __int16 v70 = 1024;
  int v71 = v31;
  __int16 v72 = 1024;
  int v73 = v11;
  __int16 v74 = 1024;
  int v75 = v30;
  __int16 v76 = 2048;
  double v77 = v14;
  __int16 v78 = 2048;
  double v79 = v16;
  __int16 v80 = 2048;
  double v81 = v17;
  __int16 v82 = 2048;
  double v83 = v18;
  __int16 v84 = 2048;
  double v85 = v22;
  __int16 v86 = 2048;
  double v87 = v23;
  __int16 v88 = 1024;
  int v89 = v24;
  __int16 v90 = 1024;
  int v91 = v25;
  __int16 v92 = 1024;
  int v93 = v26;
  __int16 v94 = 1024;
  int v95 = v27;
  __int16 v96 = 1024;
  *(_DWORD *)int v97 = v61;
  *(_WORD *)&v97[4] = 2080;
  *(void *)&v97[6] = v32;
  uint64_t v33 = "HFP LinkQualityReport: RSSI =%4d, TxPower =%2d, PLC count = %u, Received SCO count = %u, AudioInput: %u, TX [TX:"
        " %4.1f%%, ReTX: %4.1f%%], RX [TX: %4.1f%%, ReTX: %4.1f%%] ,ePA Packets = %4.1f%%, ePA CallTime = %4.1f%%, 50/75/"
        "90th Noise = (%4d,%4d,%4d) for %2d, eSCONak pkts = %3d, ch devicename= %s";
  uint64_t v34 = v7;
  uint32_t v35 = 132;
LABEL_12:
  _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, v33, buf, v35);
  if (v63 < 0) {
    operator delete(__p[0]);
  }
}

double sub_10055DE3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v15 = a2;
  uint64_t v5 = (uint64_t **)(a1 + 192);
  double v16 = &v15;
  if (*(void *)(sub_1000097B0((uint64_t **)(a1 + 192), &v15, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v16)[5] + 16))
  {
    double v16 = &v15;
    if (*(void *)sub_1000097B0(v5, &v15, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v16)[5])
    {
      double v16 = &v15;
      if (*(_DWORD *)(*(void *)(sub_1000097B0(v5, &v15, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v16)[5] + 16) + 180))
      {
        if (*(_WORD *)(a3 + 16)) {
          unsigned int v7 = 100 * *(unsigned __int16 *)(a3 + 18) / *(unsigned __int16 *)(a3 + 16);
        }
        else {
          unsigned int v7 = 0;
        }
        double v16 = &v15;
        uint64_t v8 = *(void *)(sub_1000097B0(v5, &v15, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v16)[5] + 16);
        *(_DWORD *)(v8 + 172) += v7;
        ++*(_DWORD *)(v8 + 148);
        double v16 = &v15;
        uint64_t v9 = *(void *)(sub_1000097B0(v5, &v15, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v16)[5] + 16);
        *(_DWORD *)(v9 + 176) += *(char *)(a3 + 6);
        ++*(_DWORD *)(v9 + 168);
        double v16 = &v15;
        uint64_t v10 = *(void *)(sub_1000097B0(v5, &v15, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v16)[5] + 16);
        int v11 = *(char *)(a3 + 7);
        if (*(_DWORD *)(v10 + 160) > v11) {
          *(_DWORD *)(v10 + 160) = v11;
        }
        double v16 = &v15;
        uint64_t v12 = *(void *)(sub_1000097B0(v5, &v15, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v16)[5] + 16);
        int v13 = *(char *)(a3 + 8);
        if (*(_DWORD *)(v12 + 156) < v13) {
          *(_DWORD *)(v12 + 156) = v13;
        }
      }
      double v16 = &v15;
      double v14 = sub_1000097B0(v5, &v15, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v16);
      ++*(_DWORD *)(*(void *)(v14[5] + 16) + 184);
      double v16 = &v15;
      if (*(_DWORD *)(*(void *)(sub_1000097B0(v5, &v15, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v16)[5] + 16) + 184) >= 0x3Cu) {
        return sub_10055E0A8(a1, v15);
      }
    }
  }
  return result;
}

double sub_10055E0A8(uint64_t a1, uint64_t a2)
{
  unint64_t v10 = a2;
  unsigned int v3 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Trigger A2dpPacketFlush metrics", buf, 2u);
  }
  unsigned int v4 = (uint64_t **)(a1 + 192);
  *(void *)buf = &v10;
  if (*(unsigned char *)(sub_1000097B0((uint64_t **)(a1 + 192), &v10, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 72))
  {
    *(void *)buf = &v10;
    if (*(_DWORD *)(sub_1000097B0((uint64_t **)(a1 + 192), &v10, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 76) == 2)
    {
      *(void *)buf = &v10;
      if (*(_DWORD *)(*(void *)(sub_1000097B0((uint64_t **)(a1 + 192), &v10, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5]
                                 + 16)
                     + 180) >= 0xAu)
      {
        sub_1005746B0(a1, v10);
        uint64_t v5 = sub_100050530();
        *(void *)buf = &v10;
        int v6 = sub_1000097B0(v4, &v10, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
        (*(void (**)(uint64_t, void))(*(void *)v5 + 88))(v5, *(void *)(v6[5] + 16));
        *(void *)buf = &v10;
        if (*(void *)sub_1000097B0(v4, &v10, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5])
        {
          *(void *)buf = &v10;
          unsigned int v7 = sub_1000097B0(v4, &v10, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
          ++*(_DWORD *)(*(void *)v7[5] + 256);
        }
      }
    }
  }
  *(void *)buf = &v10;
  uint64_t v8 = *(void *)(sub_1000097B0(v4, &v10, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 16);
  *(_DWORD *)(v8 + 148) = 0;
  *(void *)(v8 + 156) = 4294967169;
  *(void *)(v8 + 168) = 0;
  *(void *)(v8 + 176) = 0;
  *(_DWORD *)(v8 + 184) = 0;
  double result = *(double *)"";
  *(_OWORD *)uint64_t v8 = *(_OWORD *)"";
  *(_OWORD *)(v8 + 16) = xmmword_1007BF830;
  *(_DWORD *)(v8 + 32) = 0;
  return result;
}

void sub_10055E2E4(uint64_t a1, long long *a2, int *a3)
{
  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x10C12000000;
  v15[3] = sub_10055E4B8;
  v15[4] = nullsub_441;
  v15[5] = "";
  long long v4 = a2[11];
  long long v26 = a2[10];
  long long v27 = v4;
  v28[0] = a2[12];
  *(_OWORD *)((char *)v28 + 12) = *(long long *)((char *)a2 + 204);
  long long v5 = a2[7];
  long long v22 = a2[6];
  long long v23 = v5;
  long long v6 = a2[9];
  long long v24 = a2[8];
  long long v25 = v6;
  long long v7 = a2[3];
  long long v18 = a2[2];
  long long v19 = v7;
  long long v8 = a2[5];
  long long v20 = a2[4];
  long long v21 = v8;
  long long v9 = a2[1];
  long long v16 = *a2;
  long long v17 = v9;
  int v13 = *a3;
  __int16 v14 = *((_WORD *)a3 + 2);
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009B5F38);
  }
  uint64_t v10 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v13, 0);
  int v11 = *(NSObject **)(a1 + 256);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10055E500;
  block[3] = &unk_100998860;
  void block[5] = a1;
  block[6] = v10;
  void block[4] = v15;
  dispatch_async(v11, block);
  _Block_object_dispose(v15, 8);
}

void sub_10055E4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_10055E4B8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v2;
  long long v3 = *(_OWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 96);
  long long v5 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v5;
  *(_OWORD *)(a1 + 80) = v3;
  *(_OWORD *)(a1 + 96) = v4;
  long long v6 = *(_OWORD *)(a2 + 144);
  long long v7 = *(_OWORD *)(a2 + 160);
  long long v8 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v8;
  *(_OWORD *)(a1 + 144) = v6;
  *(_OWORD *)(a1 + 160) = v7;
  __n128 result = *(__n128 *)(a2 + 208);
  long long v10 = *(_OWORD *)(a2 + 224);
  long long v11 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 252) = *(_OWORD *)(a2 + 252);
  *(_OWORD *)(a1 + 224) = v10;
  *(_OWORD *)(a1 + 240) = v11;
  *(__n128 *)(a1 + 208) = result;
  return result;
}

void sub_10055E500(void *a1)
{
  unint64_t v1 = a1[6];
  if (v1)
  {
    uint64_t v3 = a1[5];
    long long v4 = *(void **)(v3 + 200);
    if (v4)
    {
      long long v5 = (void *)(v3 + 200);
      do
      {
        unint64_t v6 = v4[4];
        BOOL v7 = v6 >= v1;
        if (v6 >= v1) {
          long long v8 = v4;
        }
        else {
          long long v8 = v4 + 1;
        }
        if (v7) {
          long long v5 = v4;
        }
        long long v4 = (void *)*v8;
      }
      while (*v8);
      if (v5 != (void *)(v3 + 200) && v1 >= v5[4])
      {
        uint64_t v9 = sub_100017768();
        uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 288))(v9);
        if ((v10 & 1) == 0)
        {
          *(unsigned char *)(v3 + 950) = *(unsigned char *)(*(void *)(a1[4] + 8) + 220);
          uint64_t v11 = *(void *)(a1[4] + 8);
          long long v12 = *(_OWORD *)(v11 + 221);
          long long v13 = *(_OWORD *)(v11 + 237);
          *(_OWORD *)(v3 + 982) = *(_OWORD *)(v11 + 252);
          *(_OWORD *)(v3 + 951) = v12;
          *(_OWORD *)(v3 + 967) = v13;
          __int16 v14 = (unsigned __int16 *)(*(void *)(a1[4] + 8) + 48);
          uint64_t v15 = a1[6];
          sub_10055E5FC(v10, v14, v15);
        }
      }
    }
  }
}

void sub_10055E5FC(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  long long v5 = +[NSMutableString stringWithFormat:&stru_1009C1AC8];
  unint64_t v6 = +[NSMutableString stringWithFormat:&stru_1009C1AC8];
  BOOL v7 = +[NSMutableString stringWithFormat:&stru_1009C1AC8];
  char v8 = *((unsigned char *)a2 + 172);
  if (v8)
  {
    [v5 appendString:@"ISM 2.4"];
    char v8 = *((unsigned char *)a2 + 172);
  }
  if ((v8 & 2) != 0)
  {
    [v5 appendString:@"UNII-1 "];
    char v8 = *((unsigned char *)a2 + 172);
  }
  if ((v8 & 4) != 0)
  {
    [v5 appendString:@"UNII-3 "];
    char v8 = *((unsigned char *)a2 + 172);
  }
  if ((v8 & 8) != 0)
  {
    [v5 appendString:@"UNII-4 "];
    char v8 = *((unsigned char *)a2 + 172);
  }
  if ((v8 & 0x10) != 0)
  {
    [v5 appendString:@"UNII-5A "];
    char v8 = *((unsigned char *)a2 + 172);
  }
  if ((v8 & 0x20) != 0)
  {
    [v5 appendString:@"UNII-5B "];
    char v8 = *((unsigned char *)a2 + 172);
  }
  if ((v8 & 0x40) != 0)
  {
    [v5 appendString:@"UNII-5C "];
    char v8 = *((unsigned char *)a2 + 172);
  }
  if (v8 < 0) {
    [v5 appendString:@"UNII-5D "];
  }
  for (uint64_t i = 2; i != 12; ++i)
    [v6 appendFormat:@"%02X ", *((unsigned __int8 *)a2 + i)];
  do
  {
    [v7 appendFormat:@"%d ", *(unsigned __int16 *)((char *)a2 + i)];
    i += 2;
  }
  while (i != 172);
  uint64_t v10 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = *a2;
    sub_100475F84(a3, (uint64_t)__p);
    if (v14 >= 0) {
      long long v12 = __p;
    }
    else {
      long long v12 = (void **)__p[0];
    }
    *(_DWORD *)buf = 67110146;
    int v16 = v11;
    __int16 v17 = 2112;
    long long v18 = v5;
    __int16 v19 = 2112;
    long long v20 = v6;
    __int16 v21 = 2112;
    long long v22 = v7;
    __int16 v23 = 2080;
    long long v24 = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "A2DP HRB LinkQualityReport: Handle = %d, band = %@, AFH Channel Map: [%@], AFH Frequency Map: [%@], devicename = %s", buf, 0x30u);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_10055E884(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10055E8C0(uint64_t a1, long long *a2, int *a3)
{
  v14[0] = 0;
  v14[1] = v14;
  _DWORD v14[2] = 0xF012000000;
  v14[3] = sub_10055EA80;
  v14[4] = nullsub_442;
  void v14[5] = "";
  long long v4 = a2[9];
  long long v23 = a2[8];
  long long v24 = v4;
  v25[0] = a2[10];
  *(_OWORD *)((char *)v25 + 13) = *(long long *)((char *)a2 + 173);
  long long v5 = a2[5];
  long long v19 = a2[4];
  long long v20 = v5;
  long long v6 = a2[7];
  long long v21 = a2[6];
  long long v22 = v6;
  long long v7 = a2[1];
  long long v15 = *a2;
  long long v16 = v7;
  long long v8 = a2[3];
  long long v17 = a2[2];
  long long v18 = v8;
  int v12 = *a3;
  __int16 v13 = *((_WORD *)a3 + 2);
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009B5F38);
  }
  uint64_t v9 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v12, 0);
  uint64_t v10 = *(NSObject **)(a1 + 256);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10055EAC0;
  block[3] = &unk_100998860;
  void block[5] = a1;
  block[6] = v9;
  void block[4] = v14;
  dispatch_async(v10, block);
  _Block_object_dispose(v14, 8);
}

void sub_10055EA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_10055EA80(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 64);
  long long v4 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v4;
  *(_OWORD *)(a1 + 48) = v2;
  *(_OWORD *)(a1 + 64) = v3;
  long long v5 = *(_OWORD *)(a2 + 112);
  long long v6 = *(_OWORD *)(a2 + 128);
  long long v7 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v7;
  *(_OWORD *)(a1 + 112) = v5;
  *(_OWORD *)(a1 + 128) = v6;
  __n128 result = *(__n128 *)(a2 + 176);
  long long v9 = *(_OWORD *)(a2 + 192);
  long long v10 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 221) = *(_OWORD *)(a2 + 221);
  *(_OWORD *)(a1 + 192) = v9;
  *(_OWORD *)(a1 + 208) = v10;
  *(__n128 *)(a1 + 176) = result;
  return result;
}

void sub_10055EAC0(void *a1)
{
  unint64_t v1 = a1[6];
  if (v1)
  {
    uint64_t v3 = a1[5];
    long long v6 = *(void **)(v3 + 200);
    long long v4 = (void *)(v3 + 200);
    long long v5 = v6;
    if (v6)
    {
      long long v7 = v4;
      do
      {
        unint64_t v8 = v5[4];
        BOOL v9 = v8 >= v1;
        if (v8 >= v1) {
          long long v10 = v5;
        }
        else {
          long long v10 = v5 + 1;
        }
        if (v9) {
          long long v7 = v5;
        }
        long long v5 = (void *)*v10;
      }
      while (*v10);
      if (v7 != v4 && v1 >= v7[4])
      {
        uint64_t v11 = sub_100017768();
        uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 288))(v11);
        if ((v12 & 1) == 0)
        {
          __int16 v13 = (unsigned __int16 *)(*(void *)(a1[4] + 8) + 48);
          uint64_t v14 = a1[6];
          sub_10055EB88(v12, v13, v14);
        }
      }
    }
  }
}

void sub_10055EB88(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v4 = 0;
  char v5 = *((unsigned char *)a2 + 9);
  char v6 = *((unsigned char *)a2 + 39);
  char v7 = v6;
  char v8 = v5;
  do
  {
    int v9 = *((char *)a2 + v4 + 10);
    if (v9 < v8) {
      char v8 = *((unsigned char *)a2 + v4 + 10);
    }
    if (v9 > v5) {
      char v5 = *((unsigned char *)a2 + v4 + 10);
    }
    int v10 = *((char *)a2 + v4 + 40);
    if (v10 < v7) {
      char v7 = *((unsigned char *)a2 + v4 + 40);
    }
    if (v10 > v6) {
      char v6 = *((unsigned char *)a2 + v4 + 40);
    }
    ++v4;
  }
  while (v4 != 29);
  uint64_t v11 = 0;
  unsigned __int8 v12 = 0;
  unsigned __int8 v13 = 0;
  unsigned __int8 v14 = 0;
  unsigned __int8 v15 = 0;
  unsigned __int8 v16 = 0;
  unsigned __int8 v17 = 0;
  unsigned __int8 v18 = 0;
  unsigned __int8 v19 = 0;
  do
  {
    switch(HIBYTE(a2[v11 + 34]))
    {
      case 0:
        ++v19;
        break;
      case 1:
        ++v18;
        break;
      case 2:
        ++v17;
        break;
      case 3:
        ++v16;
        break;
      default:
        break;
    }
    switch(LOBYTE(a2[v11 + 35]))
    {
      case 0:
        ++v15;
        break;
      case 1:
        ++v14;
        break;
      case 2:
        ++v13;
        break;
      case 3:
        ++v12;
        break;
      default:
        break;
    }
    ++v11;
  }
  while ((unint64_t)(v11 * 2 - 2) < 0x39);
  unsigned __int8 v41 = v12;
  unsigned __int8 v43 = v17;
  unsigned __int8 v45 = v16;
  log = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    int v20 = *(unsigned __int16 *)((char *)a2 + 7);
    int v21 = *a2;
    int v22 = v5;
    int v23 = v15;
    int v24 = *(unsigned __int16 *)((char *)a2 + 3);
    int v25 = v7;
    int v26 = v6;
    int v27 = v41;
    int v28 = *(unsigned __int16 *)((char *)a2 + 5);
    int v29 = v45;
    uint64_t v30 = a3;
    if (a3)
    {
      int v46 = v43;
      int v48 = v29;
      int v42 = v19;
      int v44 = v18;
      int v38 = v13;
      int v39 = v27;
      int v31 = v14;
      int v32 = v23;
      int v33 = v21;
      int v34 = v20;
      int v35 = v22;
      int v36 = v25;
      sub_100475F84(v30, (uint64_t)__p);
      int v37 = __p;
      if (v50 < 0) {
        int v37 = (void **)__p[0];
      }
      *(_DWORD *)buf = 67113218;
      int v52 = v34;
      __int16 v53 = 1024;
      int v54 = v33;
      __int16 v55 = 1024;
      int v56 = v24;
      __int16 v57 = 1024;
      int v58 = v28;
      __int16 v59 = 1024;
      int v60 = v8;
      __int16 v61 = 1024;
      int v62 = v35;
      __int16 v63 = 1024;
      int v64 = v36;
      __int16 v65 = 1024;
      int v66 = v26;
      __int16 v67 = 1024;
      int v68 = v32;
      __int16 v69 = 1024;
      int v70 = v31;
      __int16 v71 = 1024;
      int v72 = v38;
      __int16 v73 = 1024;
      int v74 = v39;
      __int16 v75 = 1024;
      int v76 = v42;
      __int16 v77 = 1024;
      int v78 = v44;
      __int16 v79 = 1024;
      int v80 = v46;
      __int16 v81 = 1024;
      int v82 = v48;
      __int16 v83 = 2080;
      __int16 v84 = (const char *)v37;
      _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEFAULT, "A2DP BtCoexLinkStats: Handle = %d, BtClock = %5d, CoexReq = %4d, CoexReqDenied = %4d, SNR-Last30Tran (min, max): (%3d, %3d), RSSI-Last30Tran (min, max): (%4d, %4d), TxInfo-Last30Pkts (Good, ReTxNak, ReTxNoSync, Poll) (%2d, %2d, %2d, %2d),  RxInfo-Last30Pkts (Good, CrcErr, HeaderErr, NoSync) (%2d, %2d, %2d, %2d), devicename = %s", buf, 0x6Cu);
      if (v50 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      *(_DWORD *)buf = 67113218;
      int v52 = v20;
      __int16 v53 = 1024;
      int v54 = v21;
      __int16 v55 = 1024;
      int v56 = v24;
      __int16 v57 = 1024;
      int v58 = v28;
      __int16 v59 = 1024;
      int v60 = v8;
      __int16 v61 = 1024;
      int v62 = v22;
      __int16 v63 = 1024;
      int v64 = v7;
      __int16 v65 = 1024;
      int v66 = v6;
      __int16 v67 = 1024;
      int v68 = v23;
      __int16 v69 = 1024;
      int v70 = v14;
      __int16 v71 = 1024;
      int v72 = v13;
      __int16 v73 = 1024;
      int v74 = v41;
      __int16 v75 = 1024;
      int v76 = v19;
      __int16 v77 = 1024;
      int v78 = v18;
      __int16 v79 = 1024;
      int v80 = v43;
      __int16 v81 = 1024;
      int v82 = v45;
      __int16 v83 = 2080;
      __int16 v84 = "(NULL)";
      _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEFAULT, "A2DP BtCoexLinkStats: Handle = %d, BtClock = %5d, CoexReq = %4d, CoexReqDenied = %4d, SNR-Last30Tran (min, max): (%3d, %3d), RSSI-Last30Tran (min, max): (%4d, %4d), TxInfo-Last30Pkts (Good, ReTxNak, ReTxNoSync, Poll) (%2d, %2d, %2d, %2d),  RxInfo-Last30Pkts (Good, CrcErr, HeaderErr, NoSync) (%2d, %2d, %2d, %2d), devicename = %s", buf, 0x6Cu);
    }
  }
}

void sub_10055EFA8(uint64_t a1, long long *a2, int *a3)
{
  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x4812000000;
  v9[3] = sub_10055F0F4;
  v9[4] = nullsub_443;
  v9[5] = "";
  long long v10 = *a2;
  uint64_t v11 = *((void *)a2 + 2);
  int v7 = *a3;
  __int16 v8 = *((_WORD *)a3 + 2);
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009B5F38);
  }
  uint64_t v4 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v7, 0);
  char v5 = *(NSObject **)(a1 + 256);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10055F10C;
  block[3] = &unk_100998860;
  void block[5] = a1;
  block[6] = v4;
  void block[4] = v9;
  dispatch_async(v5, block);
  _Block_object_dispose(v9, 8);
}

void sub_10055F0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_10055F0F4(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  return result;
}

void sub_10055F10C(void *a1)
{
  unint64_t v1 = a1[6];
  if (v1)
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = *(void **)(v3 + 200);
    if (v4)
    {
      uint64_t v5 = v3 + 200;
      do
      {
        unint64_t v6 = v4[4];
        BOOL v7 = v6 >= v1;
        if (v6 >= v1) {
          __int16 v8 = v4;
        }
        else {
          __int16 v8 = v4 + 1;
        }
        if (v7) {
          uint64_t v5 = (uint64_t)v4;
        }
        uint64_t v4 = (void *)*v8;
      }
      while (*v8);
      if (v5 != v3 + 200 && v1 >= *(void *)(v5 + 32))
      {
        uint64_t v9 = sub_100035F54();
        if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 160))(v9) && *(_DWORD *)(v3 + 864) != 3) {
          sub_10055F230(v3, a1[6], (unsigned __int16 *)(*(void *)(a1[4] + 8) + 48));
        }
        uint64_t v10 = sub_100017768();
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 288))(v10);
        if ((v11 & 1) == 0 && *(_DWORD *)(v3 + 864) != 3)
        {
          uint64_t v12 = *(void *)(a1[4] + 8) + 48;
          sub_10055F388(v11, v12);
        }
      }
    }
  }
}

uint64_t *sub_10055F230(uint64_t a1, unint64_t a2, unsigned __int16 *a3)
{
  unint64_t v12 = a2;
  uint64_t v4 = (uint64_t **)(a1 + 192);
  unsigned __int8 v13 = &v12;
  if (*(void *)sub_1000097B0((uint64_t **)(a1 + 192), &v12, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v13)[5])
  {
    unsigned __int8 v13 = &v12;
    uint64_t v5 = *(void *)sub_1000097B0(v4, &v12, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v13)[5];
    if (v5) {
      unint64_t v6 = (_DWORD *)(v5 + 36);
    }
    else {
      unint64_t v6 = 0;
    }
    int v7 = v6[1];
    *v6 += a3[3];
    v6[1] = v7 + a3[4];
    v6[6] += a3[5];
  }
  unsigned __int8 v13 = &v12;
  __n128 result = sub_1000097B0(v4, &v12, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v13);
  if (*(void *)(result[5] + 8))
  {
    unsigned __int8 v13 = &v12;
    __n128 result = sub_1000097B0(v4, &v12, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v13);
    uint64_t v9 = *(void *)(result[5] + 8);
    if (v9) {
      uint64_t v10 = (_DWORD *)(v9 + 36);
    }
    else {
      uint64_t v10 = 0;
    }
    int v11 = v10[1];
    *v10 += a3[3];
    v10[1] = v11 + a3[4];
    v10[6] += a3[5];
  }
  return result;
}

void sub_10055F388(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 160))(v3))
  {
    uint64_t v4 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(unsigned __int16 *)(a2 + 6);
      int v6 = *(unsigned __int16 *)(a2 + 8);
      unsigned int v7 = *(unsigned __int16 *)(a2 + 10);
      unsigned int v8 = *(unsigned __int16 *)(a2 + 12);
      int v9 = *(unsigned __int16 *)(a2 + 14);
      unsigned int v10 = *(unsigned __int16 *)(a2 + 16);
      unsigned int v11 = *(unsigned __int16 *)(a2 + 22);
      int v12 = *(unsigned __int16 *)(a2 + 18);
      int v13 = *(char *)(a2 + 20);
      int v14 = *(char *)(a2 + 21);
      v15[0] = 67112192;
      v15[1] = v5;
      __int16 v16 = 1024;
      int v17 = v6;
      __int16 v18 = 1024;
      unsigned int v19 = v7;
      __int16 v20 = 1024;
      unsigned int v21 = v8;
      __int16 v22 = 1024;
      int v23 = v9;
      __int16 v24 = 1024;
      unsigned int v25 = v10;
      __int16 v26 = 1024;
      unsigned int v27 = v11;
      __int16 v28 = 1024;
      int v29 = v12;
      __int16 v30 = 1024;
      int v31 = v13;
      __int16 v32 = 1024;
      int v33 = v14;
      __int16 v34 = 2048;
      double v35 = (float)((float)((float)v10 * 100.0) / (float)v8);
      __int16 v36 = 2048;
      double v37 = (float)((float)((float)v7 * 100.0) / (float)v8);
      __int16 v38 = 2048;
      double v39 = (float)((float)((float)v11 * 100.0) / (float)v8);
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BeamformingReport: Packets on {Ant0, Ant1, Beamforming} = {%3d, %3d, %3d}; Total tx packets = %3d, Total retx pa"
        "ckets = %3d; Total ePA packets = %3d; Total packets beamforming+ePA = %3d; Sync Timeout = %3d; RSSI{Ant0, Ant1} "
        "= {%4d, %4d}; {ePA, Beamforming, ePA+Beamforming} Usage = {%4.1f%%, %4.1f%%, %4.1f%%}",
        (uint8_t *)v15,
        0x5Cu);
    }
  }
}

void sub_10055F524(uint64_t a1, uint64_t a2, __int16 a3, int a4, __int16 a5, __int16 a6)
{
  if (a4)
  {
    __int16 v8 = a4;
    *(_DWORD *)buf = *(_DWORD *)a2;
    LOWORD(v20) = *(_WORD *)(a2 + 4);
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009B5F38);
    }
    uint64_t v11 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)buf, 0);
    int v12 = *(NSObject **)(a1 + 256);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10055F6A4;
    block[3] = &unk_1009A12D0;
    void block[4] = a1;
    void block[5] = v11;
    __int16 v15 = a3;
    __int16 v16 = v8;
    __int16 v17 = a5;
    __int16 v18 = a6;
    dispatch_async(v12, block);
  }
  else
  {
    int v13 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      int v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "A2DP LinkQualityReport Error - totalTxPacketCount is %d", buf, 8u);
    }
  }
}

void sub_10055F6A4(uint64_t a1)
{
  long long v2 = (unint64_t *)(a1 + 40);
  unint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    unsigned int v7 = *(void **)(v4 + 200);
    int v5 = (void *)(v4 + 200);
    int v6 = v7;
    if (v7)
    {
      __int16 v8 = (uint64_t **)(v5 - 1);
      int v9 = v5;
      do
      {
        unint64_t v10 = v6[4];
        BOOL v11 = v10 >= v1;
        if (v10 >= v1) {
          int v12 = v6;
        }
        else {
          int v12 = v6 + 1;
        }
        if (v11) {
          int v9 = v6;
        }
        int v6 = (void *)*v12;
      }
      while (*v12);
      if (v9 != v5 && v1 >= v9[4])
      {
        *(void *)buf = a1 + 40;
        if (*(void *)sub_1000097B0(v8, v2, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5])
        {
          char v21 = 0;
          if (*v2)
          {
            uint64_t v13 = sub_100017768();
            if ((*(unsigned int (**)(uint64_t))(*(void *)v13 + 280))(v13))
            {
              uint64_t v14 = sub_10003FB34();
              (*(void (**)(uint64_t, unint64_t, char *))(*(void *)v14 + 312))(v14, *v2 + 128, &v21);
            }
          }
          unsigned int v15 = *(unsigned __int16 *)(a1 + 48);
          unsigned int v16 = *(unsigned __int16 *)(a1 + 50);
          __int16 v17 = qword_100A19E48;
          if (v15 > v16 && os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = 100 * v15 / v16;
            _os_log_fault_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "A2DP LinkQualityReport - re-transmission stats are invalid %u", buf, 8u);
            __int16 v17 = qword_100A19E48;
          }
          if (*(unsigned __int16 *)(a1 + 52) > *(unsigned __int16 *)(a1 + 54)
            && os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = 100;
            _os_log_fault_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "A2DP LinkQualityReport - CRC Rate is invalid %u", buf, 8u);
            __int16 v17 = qword_100A19E48;
          }
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v18 = *(unsigned __int16 *)(a1 + 48);
            unsigned int v19 = *(unsigned __int16 *)(a1 + 50);
            *(_DWORD *)buf = 67109888;
            *(_DWORD *)&uint8_t buf[4] = v21;
            __int16 v23 = 2048;
            double v24 = (double)v18 * 100.0 / (double)v19;
            __int16 v25 = 1024;
            unsigned int v26 = v18;
            __int16 v27 = 1024;
            unsigned int v28 = v19;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "A2DP LinkQualityReport: RSSI =%4d, ReTx = %3.1f (%3d/%3d)", buf, 0x1Eu);
          }
          *(void *)buf = v2;
          int v20 = sub_1000097B0(v8, v2, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
          sub_10055F9A0(*(void **)v20[5], 100 * *(unsigned __int16 *)(a1 + 48) / *(unsigned __int16 *)(a1 + 50));
        }
      }
    }
  }
}

void sub_10055F9A0(void *a1, int a2)
{
  int v5 = (char *)a1[45];
  unint64_t v4 = a1[46];
  if ((unint64_t)v5 >= v4)
  {
    unsigned int v7 = (char *)a1[44];
    uint64_t v8 = (v5 - v7) >> 2;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 62) {
      abort();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 1 > v9) {
      unint64_t v9 = v10 >> 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      int v12 = (char *)sub_1002C44F0((uint64_t)(a1 + 46), v11);
      unsigned int v7 = (char *)a1[44];
      int v5 = (char *)a1[45];
    }
    else
    {
      int v12 = 0;
    }
    uint64_t v13 = &v12[4 * v8];
    uint64_t v14 = &v12[4 * v11];
    *(_DWORD *)uint64_t v13 = a2;
    int v6 = v13 + 4;
    while (v5 != v7)
    {
      int v15 = *((_DWORD *)v5 - 1);
      v5 -= 4;
      *((_DWORD *)v13 - 1) = v15;
      v13 -= 4;
    }
    a1[44] = v13;
    a1[45] = v6;
    a1[46] = v14;
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *(_DWORD *)int v5 = a2;
    int v6 = v5 + 4;
  }
  a1[45] = v6;
}

void sub_10055FA74(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 348) != a2)
  {
    *(unsigned char *)(a1 + 348) = a2;
    uint64_t v3 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      v4[0] = 67109120;
      v4[1] = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "fDynamicTimelineLogging set to %d ", (uint8_t *)v4, 8u);
    }
  }
}

void sub_10055FB28(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v29 = a2;
  uint64_t v6 = sub_100017768();
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 272))(v6);
  char v28 = 1;
  uint64_t v8 = sub_100017768();
  sub_10004191C(&buf, "Enable FW Logs");
  sub_10004191C(__p, "FWEnhancedLoggingEnable");
  (*(void (**)(uint64_t, long long *, void **, char *))(*(void *)v8 + 72))(v8, &buf, __p, &v28);
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v31) < 0) {
    operator delete((void *)buf);
  }
  uint64_t v9 = sub_100017768();
  BOOL v10 = ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 8))(v9) & (v7 == 0)) == 1 && v28 != 0;
  unint64_t v11 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v12 = @"Skipping";
    if (v10) {
      CFStringRef v12 = @"Evaluating";
    }
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Dynamic Timeline Logging Trigger : %@ ", (uint8_t *)&buf, 0xCu);
  }
  if (v10)
  {
    if (*(void *)(a1 + 368))
    {
      uint64_t v13 = +[NSDate date];
      [v13 timeIntervalSinceDate:*(void *)(a1 + 368)];
      double v15 = v14;
    }
    else
    {
      double v15 = 80.0;
    }
    if (*(unsigned char *)(a1 + 348))
    {
      unsigned int v16 = qword_100A19E48;
      if (!os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      LOWORD(buf) = 0;
      __int16 v17 = "Timeline logging currently running";
LABEL_22:
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v17, (uint8_t *)&buf, 2u);
      return;
    }
    if (v15 < *(double *)(a1 + 376))
    {
      unsigned int v16 = qword_100A19E48;
      if (!os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      LOWORD(buf) = 0;
      __int16 v17 = "Timeline logging ran less than 60 secs ago";
      goto LABEL_22;
    }
    sub_10055FA74(a1, 1);
    unsigned int v18 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Enabling firmware logs", (uint8_t *)&buf, 2u);
    }
    sub_10003FB34();
    if (sub_100351A24())
    {
      unsigned int v19 = *(NSObject **)(a1 + 256);
      *(void *)&long long buf = _NSConcreteStackBlock;
      *((void *)&buf + 1) = 3221225472;
      int v31 = sub_100569EEC;
      __int16 v32 = &unk_100998260;
      uint64_t v33 = a1;
      unint64_t v34 = a2;
      dispatch_async(v19, &buf);
      if (*(_DWORD *)(sub_10003FB34() + 712) == 15) {
        int v20 = 2048;
      }
      else {
        int v20 = 3072;
      }
      if (*(_DWORD *)(a1 + 352) != v20) {
        *(_DWORD *)(a1 + 352) = v20;
      }
      if (*(_DWORD *)(a1 + 356) != 4) {
        *(_DWORD *)(a1 + 356) = 4;
      }
      *(_DWORD *)(a1 + 360) = 531;
      *(void *)&long long buf = &v29;
      if (*(_DWORD *)(sub_1000097B0((uint64_t **)(a1 + 192), &v29, (uint64_t)&unk_1007BE9D0, (uint64_t **)&buf)[5] + 76) == 1
        || (*(void *)&long long buf = &v29,
            *(_DWORD *)(sub_1000097B0((uint64_t **)(a1 + 192), &v29, (uint64_t)&unk_1007BE9D0, (uint64_t **)&buf)[5] + 76) == 5))
      {
        *(_DWORD *)(a1 + 360) |= 8u;
      }
      uint64_t v21 = sub_10003FB34();
      (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)v21 + 1240))(v21, 1, *(unsigned int *)(a1 + 352), *(unsigned int *)(a1 + 356));
      uint64_t v22 = sub_10003FB34();
      (*(void (**)(uint64_t, void))(*(void *)v22 + 3360))(v22, *(unsigned int *)(a1 + 360));
    }
    dispatch_time_t v23 = dispatch_time(0, 1000000000 * a3);
    double v24 = *(NSObject **)(a1 + 256);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    _OWORD v25[2] = sub_1005600C0;
    v25[3] = &unk_100997528;
    v25[4] = a1;
    dispatch_after(v23, v24, v25);
  }
}

void sub_100560004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  _Unwind_Resume(a1);
}

void sub_10056004C(uint64_t a1, uint64_t a2)
{
  long long v2 = *(NSObject **)(a1 + 256);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_100569EEC;
  v3[3] = &unk_100998260;
  v3[4] = a1;
  void v3[5] = a2;
  dispatch_async(v2, v3);
}

void sub_1005600C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 348))
  {
    long long v2 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Disabling firmware logs", v6, 2u);
    }
    uint64_t v3 = sub_10003FB34();
    (*(void (**)(uint64_t, void, void, void))(*(void *)v3 + 1240))(v3, 0, 0, 0);
    uint64_t v4 = +[NSDate date];
    int v5 = *(void **)(v1 + 368);
    *(void *)(v1 + 368) = v4;

    sub_10055FA74(v1, 0);
    *(unsigned char *)(v1 + 384) = 0;
  }
}

void sub_10056019C(uint64_t a1, uint64_t a2, const void *a3, unsigned int a4)
{
  if (a2 && a3)
  {
    BOOL v10 = 0;
    unint64_t v11 = 0;
    sub_1000335D8(&v10, a3, a4);
    uint64_t v6 = *(NSObject **)(a1 + 264);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768;
    block[2] = sub_1005602E8;
    block[3] = &unk_1009B5C38;
    void block[4] = a2 + 128;
    uint64_t v8 = &off_100998428;
    uint64_t v9 = v11;
    if (v11) {
      sub_100037354((uint64_t)v11);
    }
    dispatch_async(v6, block);
    uint64_t v8 = &off_100998428;
    if (v9) {
      sub_1000368F4(v9);
    }
    BOOL v10 = &off_100998428;
    if (v11) {
      sub_1000368F4(v11);
    }
  }
}

void sub_1005602B0(_Unwind_Exception *exception_object)
{
  *(void *)(v1 - 32) = &off_100998428;
  uint64_t v3 = *(atomic_uint **)(v1 - 24);
  if (v3) {
    sub_1000368F4(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005602E8(uint64_t a1)
{
  if (qword_1009F80A0 != -1) {
    dispatch_once(&qword_1009F80A0, &stru_1009B5F58);
  }
  long long v2 = off_1009F8098;
  uint64_t v3 = *(void *)(a1 + 32);

  return sub_10029AA98((uint64_t)v2, v3, 0x100000, a1 + 40);
}

void sub_100560354(uint64_t a1, uint64_t a2, const void *a3, unsigned int a4)
{
}

void sub_10056035C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = *(NSObject **)(a1 + 256);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1005603D4;
  block[3] = &unk_1009A0160;
  char v6 = a4;
  void block[4] = a1;
  void block[5] = a2;
  dispatch_async(v4, block);
}

void sub_1005603D4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    if (*(unsigned char *)(a1 + 48)) {
      int v5 = "Publish ";
    }
    else {
      int v5 = "Unpublish ";
    }
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = v5;
    __int16 v21 = 2048;
    uint64_t v22 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Dynamic Latency : HFP Device %{public}s, device: %p", buf, 0x16u);
  }
  int v7 = (unint64_t *)(a1 + 40);
  unint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    BOOL v10 = *(void **)(v2 + 200);
    uint64_t v9 = (void *)(v2 + 200);
    uint64_t v8 = v10;
    if (*(unsigned char *)(a1 + 48))
    {
      if (!v8) {
        goto LABEL_19;
      }
      unint64_t v11 = v9;
      do
      {
        unint64_t v12 = v8[4];
        BOOL v13 = v12 >= v6;
        if (v12 >= v6) {
          double v14 = v8;
        }
        else {
          double v14 = v8 + 1;
        }
        if (v13) {
          unint64_t v11 = v8;
        }
        uint64_t v8 = (void *)*v14;
      }
      while (*v14);
      if (v11 == v9 || v6 < v11[4]) {
LABEL_19:
      }
        operator new();
      *(void *)long long buf = a1 + 40;
      *(unsigned char *)(sub_1000097B0((uint64_t **)v9 - 1, v7, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 87) = 1;
      if (qword_1009F8738 != -1) {
        dispatch_once(&qword_1009F8738, &stru_1009B5F18);
      }
      sub_10026F558(qword_1009F8730, *v7);
    }
    else if (v8)
    {
      double v15 = v9;
      do
      {
        unint64_t v16 = v8[4];
        BOOL v17 = v16 >= v6;
        if (v16 >= v6) {
          unsigned int v18 = v8;
        }
        else {
          unsigned int v18 = v8 + 1;
        }
        if (v17) {
          double v15 = v8;
        }
        uint64_t v8 = (void *)*v18;
      }
      while (*v18);
      if (v15 != v9 && v6 >= v15[4])
      {
        *(void *)long long buf = a1 + 40;
        *(unsigned char *)(sub_1000097B0((uint64_t **)v9 - 1, v7, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 87) = 0;
        *(void *)long long buf = a1 + 40;
        if (!*(unsigned char *)(sub_1000097B0((uint64_t **)v9 - 1, v7, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 87))
        {
          *(void *)long long buf = a1 + 40;
          if (!*(unsigned char *)(sub_1000097B0((uint64_t **)v9 - 1, v7, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 88))
          {
            *(void *)long long buf = a1 + 40;
            unsigned int v19 = (uint64_t *)sub_1000097B0((uint64_t **)v9 - 1, v7, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5];
            if (v19)
            {
              sub_1005768E4(v19);
              operator delete();
            }
            sub_1000517A4((uint64_t)(v9 - 1), v7);
            if (qword_1009F8738 != -1) {
              dispatch_once(&qword_1009F8738, &stru_1009B5F18);
            }
            sub_10026F6F8(qword_1009F8730, *v7);
          }
        }
      }
    }
  }
}

void sub_1005606F8()
{
}

void sub_100560724(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = *(NSObject **)(a1 + 184);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1005603D4;
  block[3] = &unk_1009A0160;
  char v6 = a4;
  void block[4] = a1 - 72;
  void block[5] = a2;
  dispatch_async(v4, block);
}

uint64_t sub_1005607A0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 1076) = 0;
  *(void *)(a1 + 1068) = 0;
  *(_OWORD *)(a1 + 1052) = 0u;
  if (qword_1009FB058 != -1) {
    dispatch_once(&qword_1009FB058, &stru_1009B5E58);
  }
  uint64_t v3 = off_1009FB050;

  return sub_100512268((uint64_t)v3, a2);
}

void sub_100560818(uint64_t a1, uint64_t a2, __int16 a3, char a4, char a5)
{
  int v5 = *(NSObject **)(a1 + 256);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100560898;
  block[3] = &unk_100998280;
  char v8 = a4;
  char v9 = a5;
  void block[4] = a1;
  void block[5] = a2;
  __int16 v7 = a3;
  dispatch_async(v5, block);
}

void sub_100560898(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 50)) {
      uint64_t v4 = "Start";
    }
    else {
      uint64_t v4 = "Stop";
    }
    int v5 = "enabled";
    if (!*(unsigned char *)(a1 + 51)) {
      int v5 = "disabled";
    }
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v4;
    __int16 v32 = 2080;
    uint64_t v33 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "HFP Stream State: %s Advanced Transport: %s", buf, 0x16u);
  }
  sub_100560DD4(v2, *(unsigned char *)(a1 + 50));
  char v6 = *(unsigned char *)(a1 + 50);
  uint64_t v7 = v2 + 200;
  char v8 = *(void **)(v2 + 200);
  char v9 = (unint64_t *)(a1 + 40);
  if (v6)
  {
    if (!v8) {
      goto LABEL_20;
    }
    unint64_t v10 = *v9;
    uint64_t v11 = v2 + 200;
    do
    {
      unint64_t v12 = v8[4];
      BOOL v13 = v12 >= v10;
      if (v12 >= v10) {
        double v14 = v8;
      }
      else {
        double v14 = v8 + 1;
      }
      if (v13) {
        uint64_t v11 = (uint64_t)v8;
      }
      char v8 = (void *)*v14;
    }
    while (*v14);
    if (v11 == v7 || v10 < *(void *)(v11 + 32)) {
LABEL_20:
    }
      operator new();
    unsigned int v26 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      sub_100476120(v10, (uint64_t)buf);
      if (v34 >= 0) {
        char v27 = buf;
      }
      else {
        char v27 = *(unsigned char **)buf;
      }
      *(_DWORD *)unint64_t v29 = 136315138;
      *(void *)&v29[4] = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Device %s, already exists in AudioLinkManagerDevices updating values", v29, 0xCu);
      if (v34 < 0) {
        operator delete(*(void **)buf);
      }
      char v6 = *(unsigned char *)(a1 + 50);
    }
    *(void *)long long buf = a1 + 40;
    *(unsigned char *)(sub_1000097B0((uint64_t **)(v2 + 192), (unint64_t *)(a1 + 40), (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5]+ 72) = v6;
    *(void *)long long buf = a1 + 40;
    double v15 = sub_1000097B0((uint64_t **)(v2 + 192), (unint64_t *)(a1 + 40), (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
    *(_DWORD *)(v15[5] + 76) = 1;
    if (*(unsigned char *)(a1 + 51)) {
      sub_10007FE8C(*(void *)(v2 + 224), *(unsigned __int8 *)(a1 + 50), *(void *)(a1 + 40));
    }
    sub_100560EE4((uint64_t)v15, *(void *)(a1 + 40), 1);
    sub_100561280(v2, *(void *)(a1 + 40), *(unsigned __int16 *)(a1 + 48));
  }
  else
  {
    if (v8)
    {
      unint64_t v16 = *v9;
      uint64_t v17 = v2 + 200;
      do
      {
        unint64_t v18 = v8[4];
        BOOL v19 = v18 >= v16;
        if (v18 >= v16) {
          int v20 = v8;
        }
        else {
          int v20 = v8 + 1;
        }
        if (v19) {
          uint64_t v17 = (uint64_t)v8;
        }
        char v8 = (void *)*v20;
      }
      while (*v20);
      if (v17 != v7 && v16 >= *(void *)(v17 + 32))
      {
        __int16 v21 = qword_100A19E48;
        char v22 = 0;
        if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
        {
          sub_100476120(v16, (uint64_t)buf);
          if (v34 >= 0) {
            dispatch_time_t v23 = buf;
          }
          else {
            dispatch_time_t v23 = *(unsigned char **)buf;
          }
          *(_DWORD *)unint64_t v29 = 136315138;
          *(void *)&v29[4] = v23;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Device %s, already exists in AudioLinkManagerDevices updating values", v29, 0xCu);
          if (v34 < 0) {
            operator delete(*(void **)buf);
          }
          char v22 = *(unsigned char *)(a1 + 50);
        }
        *(void *)long long buf = a1 + 40;
        *(unsigned char *)(sub_1000097B0((uint64_t **)(v2 + 192), (unint64_t *)(a1 + 40), (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5]+ 72) = v22;
        *(void *)long long buf = a1 + 40;
        *(_DWORD *)(sub_1000097B0((uint64_t **)(v2 + 192), (unint64_t *)(a1 + 40), (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5]+ 76) = 0;
        if (*(unsigned char *)(sub_10007DFF4(*(void *)(v2 + 224), *v9) + 3)) {
          sub_10007FE8C(*(void *)(v2 + 224), *(unsigned __int8 *)(a1 + 50), *(void *)(a1 + 40));
        }
        sub_100558290((uint64_t *)v2, *v9);
      }
    }
    if (*(void *)(v2 + 208)) {
      sub_1005616C4(v2, *v9, 1);
    }
    char v28 = 0;
    uint64_t v24 = sub_100017768();
    sub_10004191C(buf, "HFP");
    sub_10004191C(v29, "audioFeedback");
    (*(void (**)(uint64_t, unsigned char *, unsigned char *, char *))(*(void *)v24 + 72))(v24, buf, v29, &v28);
    if (v30 < 0) {
      operator delete(*(void **)v29);
    }
    if (v34 < 0) {
      operator delete(*(void **)buf);
    }
    if (v28)
    {
      uint64_t v25 = sub_100478B2C(*v9, 12);
      if ((v25 & 1) != 0 || sub_1005617A4(v25, *v9)) {
        notify_post("com.apple.bluetooth.audioQuality");
      }
    }
  }
  sub_10056181C(v2, *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 50), 1);
}

void sub_100560D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_100560DD4(uint64_t a1, char a2)
{
  if (*(unsigned char *)(a1 + 344))
  {
    char v18 = 0;
    sub_10001B8E0(&v18);
    if (sub_10018543C(a2, v3, v4, v5, v6, v7, v8, v9)
      && os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR))
    {
      sub_100779F84();
    }
    if (sub_100185604(a2, v10, v11, v12, v13, v14, v15, v16))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
        sub_100779F50();
      }
    }
    sub_10001B910(&v18);
    sub_10001B8AC(&v18);
  }
  else
  {
    uint64_t v17 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Stack is not ready, cannot configure interlaced inquiry scans", buf, 2u);
    }
  }
}

void sub_100560ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_100560EE4(uint64_t a1, uint64_t a2, int a3)
{
  if (a2 && a3 == 2)
  {
    uint64_t v4 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Enabling A2DP Link Quality Mode", (uint8_t *)&v23, 2u);
    }
    uint64_t v5 = sub_100017768();
    int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 280))(v5);
    *(_DWORD *)&v26[10] = 0;
    *(void *)&v26[2] = 0;
    __int16 v23 = 1;
    uint64_t v7 = sub_100035F54();
    char v24 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 136))(v7);
    uint64_t v8 = sub_100035F54();
    char v25 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 160))(v8);
    v26[1] = 0;
    uint64_t v9 = *(void *)sub_100035F54();
    if ((*(unsigned int (**)(void))(v9 + 816))()) {
      v26[1] = 1;
    }
    uint64_t v10 = sub_100035F54();
    v26[0] = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 160))(v10);
    if (v6) {
      __int16 v11 = 5;
    }
    else {
      __int16 v11 = 20;
    }
    *(_WORD *)&v26[4] = v11;
    *(_WORD *)&v26[6] = -1;
    *(_WORD *)&v26[8] = v11;
    *(_WORD *)&v26[10] = -1;
    v26[12] = 1;
    uint64_t v12 = sub_100035F54();
    int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 176))(v12);
    if (v13) {
      LOBYTE(v13) = sub_100476504(a2);
    }
    v26[2] = v13;
    v26[13] = 1;
LABEL_21:
    uint64_t v22 = *(void *)sub_10003FB34();
    (*(void (**)(void))(v22 + 544))();
    return;
  }
  if (a2)
  {
    if (a3 == 1)
    {
      uint64_t v14 = sub_100035F54();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v14 + 128))(v14))
      {
        uint64_t v15 = qword_100A19E48;
        if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v23 = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Enabling HFP Link Quality Mode", (uint8_t *)&v23, 2u);
        }
        *(_DWORD *)&v26[8] = 0;
        *(void *)unsigned int v26 = 0;
        __int16 v23 = 1;
        uint64_t v16 = sub_100035F54();
        char v24 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 136))(v16);
        uint64_t v17 = sub_100035F54();
        char v25 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 160))(v17);
        uint64_t v18 = sub_100035F54();
        v26[0] = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 160))(v18);
        uint64_t v19 = sub_100035F54();
        int v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 176))(v19);
        BOOL v21 = 0;
        if (v20) {
          BOOL v21 = sub_100476504(a2);
        }
        v26[2] = v21;
        *(_WORD *)&v26[12] = 513;
        goto LABEL_21;
      }
    }
  }
}

void sub_100561280(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v13 = a2;
  if (*(unsigned char *)(a1 + 344))
  {
    if (a2)
    {
      uint64_t v3 = *(void **)(a1 + 200);
      if (v3)
      {
        uint64_t v5 = (uint64_t **)(a1 + 192);
        int v6 = (void *)(a1 + 200);
        do
        {
          unint64_t v7 = v3[4];
          BOOL v8 = v7 >= a2;
          if (v7 >= a2) {
            uint64_t v9 = v3;
          }
          else {
            uint64_t v9 = v3 + 1;
          }
          if (v8) {
            int v6 = v3;
          }
          uint64_t v3 = (void *)*v9;
        }
        while (*v9);
        if (v6 != (void *)(a1 + 200) && v6[4] <= a2)
        {
          char v12 = 0;
          sub_10001B8E0(&v12);
          sub_100198D88();
          sub_100181D84(v13 + 128);
          sub_100151C60(a3);
          sub_10001B910(&v12);
          *(void *)long long buf = &v13;
          if (*(void *)(sub_1000097B0(v5, &v13, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 8))
          {
            if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
              sub_100779FEC();
            }
            *(void *)long long buf = &v13;
            uint64_t v11 = *(void *)(sub_1000097B0(v5, &v13, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 8);
            if (v11)
            {
              if (*(char *)(v11 + 159) < 0) {
                operator delete(*(void **)(v11 + 136));
              }
              operator delete();
            }
            *(void *)long long buf = &v13;
            *(void *)(sub_1000097B0(v5, &v13, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 8) = 0;
          }
          operator new();
        }
      }
    }
    uint64_t v10 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "HFP start, but no valid device handler", buf, 2u);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR))
  {
    sub_100779FB8();
  }
}

void sub_100561688()
{
}

uint64_t sub_1005616C4(uint64_t result, uint64_t a2, int a3)
{
  if (*(void *)(result + 208))
  {
    uint64_t v4 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v7[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Disabling Link Quality Mode", (uint8_t *)v7, 2u);
    }
    __int16 v8 = 0;
    if (a3 == 1) {
      char v5 = 2;
    }
    else {
      char v5 = 1;
    }
    v7[0] = 0;
    v7[1] = 0;
    HIBYTE(v8) = v5;
    uint64_t v6 = *(void *)sub_10003FB34();
    return (*(uint64_t (**)(void))(v6 + 544))();
  }
  return result;
}

uint64_t sub_1005617A4(uint64_t a1, uint64_t a2)
{
  int v6 = 0;
  int v5 = 0;
  uint64_t v4 = 0;
  BOOL v2 = sub_10047B7A8(a2, &v6, &v5, (_DWORD *)&v4 + 1, &v4);
  uint64_t result = 0;
  if (v2 && v5 == 76)
  {
    if ((HIDWORD(v4) - 8209) <= 6) {
      return (0x61u >> (BYTE4(v4) - 17)) & 1;
    }
    else {
      return 0;
    }
  }
  return result;
}

void sub_10056181C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  unint64_t v6 = a2;
  uint64_t v23 = a2;
  sub_10056E778(a1, a2, a3, a4);
  if (a3)
  {
    if (qword_1009F8158 != -1) {
      dispatch_once(&qword_1009F8158, &stru_1009B5EF8);
    }
    sub_10056D8F0((unsigned char *)a1, v6, *((unsigned char *)off_1009F8150 + 203), a4);
    uint64_t v8 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 112))(v8))
    {
      uint64_t v9 = sub_1004AFA9C();
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      _DWORD v22[2] = sub_10056EEC0;
      v22[3] = &unk_100997528;
      void v22[4] = a1;
      sub_1000197D8(v9, v22);
    }
  }
  else
  {
    uint64_t v10 = sub_100035F54();
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 112))(v10);
    if (v11)
    {
      uint64_t v12 = sub_1004AFA9C();
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472;
      v21[2] = sub_10056EF24;
      v21[3] = &unk_100997528;
      void v21[4] = a1;
      sub_1000197D8(v12, v21);
    }
    sub_10056E4B8(v11, v6);
    unint64_t v13 = *(void **)(a1 + 200);
    if (v13)
    {
      uint64_t v14 = (uint64_t **)(a1 + 192);
      uint64_t v15 = a1 + 200;
      do
      {
        unint64_t v16 = v13[4];
        BOOL v17 = v16 >= v6;
        if (v16 >= v6) {
          uint64_t v18 = v13;
        }
        else {
          uint64_t v18 = v13 + 1;
        }
        if (v17) {
          uint64_t v15 = (uint64_t)v13;
        }
        unint64_t v13 = (void *)*v18;
      }
      while (*v18);
      if (v15 != a1 + 200 && *(void *)(v15 + 32) <= v6)
      {
        char v24 = (unint64_t *)&v23;
        *(unsigned char *)(sub_1000097B0(v14, (unint64_t *)&v23, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v24)[5] + 72) = 0;
        __int16 v19 = *(_WORD *)(a1 + 1046);
        char v24 = (unint64_t *)&v23;
        *(_WORD *)(sub_1000097B0(v14, (unint64_t *)&v23, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v24)[5] + 58) = v19;
        __int16 v20 = *(_WORD *)(a1 + 1046);
        char v24 = (unint64_t *)&v23;
        *(_WORD *)(sub_1000097B0(v14, (unint64_t *)&v23, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v24)[5] + 60) = v20;
        char v24 = (unint64_t *)&v23;
        *(_DWORD *)(sub_1000097B0(v14, (unint64_t *)&v23, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v24)[5] + 76) = 0;
        unint64_t v6 = v23;
      }
    }
  }
  sub_100092514(*(void *)(a1 + 216), v6, a3);
}

void sub_100561AC4(uint64_t a1, uint64_t a2, __int16 a3, char a4, char a5)
{
  int v5 = *(NSObject **)(a1 + 184);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100560898;
  block[3] = &unk_100998280;
  char v8 = a4;
  char v9 = a5;
  void block[4] = a1 - 72;
  void block[5] = a2;
  __int16 v7 = a3;
  dispatch_async(v5, block);
}

void sub_100561B48(void *a1, uint64_t a2, __int16 a3, char a4, char a5, __int16 a6, __int16 a7)
{
  uint64_t v8 = a1[112];
  char v9 = (std::__shared_weak_count *)a1[113];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = a1[32];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_100561C1C;
  block[3] = &unk_1009B5C68;
  __int16 v13 = a3;
  void block[4] = a1;
  void block[5] = a2;
  char v16 = a4;
  __int16 v14 = a6;
  void block[6] = v8;
  uint64_t v12 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  char v17 = a5;
  __int16 v15 = a7;
  dispatch_async(v10, block);
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
}

void sub_100561C1C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 1112);
  if (!v3) {
    goto LABEL_12;
  }
  unsigned int v4 = *(unsigned __int16 *)(a1 + 64);
  uint64_t v5 = v2 + 1112;
  do
  {
    unsigned int v6 = *(unsigned __int16 *)(v3 + 32);
    BOOL v7 = v6 >= v4;
    if (v6 >= v4) {
      uint64_t v8 = (uint64_t *)v3;
    }
    else {
      uint64_t v8 = (uint64_t *)(v3 + 8);
    }
    if (v7) {
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v5 != v2 + 1112 && v4 >= *(unsigned __int16 *)(v5 + 32))
  {
    sub_100476B10(*(void *)(a1 + 40), *(unsigned char *)(a1 + 70));
    int v9 = 1;
  }
  else
  {
LABEL_12:
    int v9 = 0;
  }
  int v10 = sub_100562950(v2, *(unsigned __int16 *)(a1 + 64));
  uint64_t v11 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 8))(v11))
  {
    uint64_t v12 = sub_1004AFB34();
    v82[0] = _NSConcreteStackBlock;
    v82[1] = 3221225472;
    v82[2] = sub_100562A88;
    v82[3] = &unk_100997528;
    v82[4] = *(void *)(a1 + 40);
    sub_100013018(v12, v82);
  }
  __int16 v13 = (unint64_t *)(a1 + 40);
  unint64_t v14 = *(void *)(a1 + 40);
  if (v14)
  {
    char v15 = *(unsigned char *)(a1 + 70);
    if (v15)
    {
      char v16 = *(void **)(v2 + 200);
      if (!v16) {
        goto LABEL_28;
      }
      uint64_t v17 = v2 + 200;
      do
      {
        unint64_t v18 = v16[4];
        BOOL v19 = v18 >= v14;
        if (v18 >= v14) {
          __int16 v20 = v16;
        }
        else {
          __int16 v20 = v16 + 1;
        }
        if (v19) {
          uint64_t v17 = (uint64_t)v16;
        }
        char v16 = (void *)*v20;
      }
      while (*v20);
      if (v17 == v2 + 200 || v14 < *(void *)(v17 + 32))
      {
LABEL_28:
        BOOL v21 = qword_100A19E48;
        if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
        {
          sub_100476120(v14, (uint64_t)&__p);
          if (SBYTE3(v87) >= 0) {
            p_p = &__p;
          }
          else {
            p_p = (void **)__p;
          }
          *(_DWORD *)long long buf = 136315138;
          int v95 = p_p;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Adding device %s, to AudioLinkManagerDevices", buf, 0xCu);
          if (SBYTE3(v87) < 0) {
            operator delete(__p);
          }
        }
        operator new();
      }
      int v60 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        sub_100476120(v14, (uint64_t)&__p);
        if (SBYTE3(v87) >= 0) {
          __int16 v61 = &__p;
        }
        else {
          __int16 v61 = (void **)__p;
        }
        *(_DWORD *)long long buf = 136315138;
        int v95 = v61;
        _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "Device %s, already exists in AudioLinkManagerDevices updating values", buf, 0xCu);
        if (SBYTE3(v87) < 0) {
          operator delete(__p);
        }
        char v15 = *(unsigned char *)(a1 + 70);
      }
      __p = (void *)(a1 + 40);
      *(unsigned char *)(sub_1000097B0((uint64_t **)(v2 + 192), (unint64_t *)(a1 + 40), (uint64_t)&unk_1007BE9D0, (uint64_t **)&__p)[5]+ 72) = v15;
      __int16 v62 = *(_WORD *)(a1 + 66);
      __p = (void *)(a1 + 40);
      *(_WORD *)(sub_1000097B0((uint64_t **)(v2 + 192), (unint64_t *)(a1 + 40), (uint64_t)&unk_1007BE9D0, (uint64_t **)&__p)[5]+ 58) = v62;
      __int16 v63 = *(_WORD *)(a1 + 66);
      __p = (void *)(a1 + 40);
      *(_WORD *)(sub_1000097B0((uint64_t **)(v2 + 192), (unint64_t *)(a1 + 40), (uint64_t)&unk_1007BE9D0, (uint64_t **)&__p)[5]+ 60) = v63;
      __p = (void *)(a1 + 40);
      *(_DWORD *)(sub_1000097B0((uint64_t **)(v2 + 192), (unint64_t *)(a1 + 40), (uint64_t)&unk_1007BE9D0, (uint64_t **)&__p)[5]+ 76) = 2;
      uint64_t v64 = sub_100017768();
      char v65 = (*(uint64_t (**)(uint64_t))(*(void *)v64 + 8))(v64);
      if (v65) {
        sub_100091874(*(void *)(v2 + 216), *v13);
      }
      uint64_t v23 = sub_100035F54();
      char v24 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v23 + 792))(v23, 2);
      if (v24)
      {
        char v25 = qword_100A19E48;
        if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p) = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Adaptive Latency reset counter when streaming start", (uint8_t *)&__p, 2u);
        }
        __p = (void *)(a1 + 40);
        char v24 = sub_1000097B0((uint64_t **)(v2 + 192), (unint64_t *)(a1 + 40), (uint64_t)&unk_1007BE9D0, (uint64_t **)&__p);
        *(_WORD *)(*(void *)(v24[5] + 40) + 44) = -1;
      }
      sub_100560EE4((uint64_t)v24, *(void *)(a1 + 40), 2);
      sub_100562B28(v2, *(void *)(a1 + 40), *(unsigned __int16 *)(a1 + 64));
      if (v10) {
        operator new();
      }
      unsigned int v26 = *(std::__shared_weak_count **)(a1 + 56);
      if (v26)
      {
        char v27 = std::__shared_weak_count::lock(v26);
        if (v27)
        {
          uint64_t v28 = *(void *)(a1 + 48);
          char v29 = v28 ? v9 : 1;
          if ((v29 & 1) == 0) {
            sub_1002EC7A4(v28, *v13, 1, 0);
          }
        }
      }
      else
      {
        char v27 = 0;
      }
      uint64_t v40 = sub_100035F54();
      if ((*(unsigned int (**)(uint64_t, void))(*(void *)v40 + 792))(v40, 0))
      {
        if (*(unsigned char *)(a1 + 71))
        {
          __int16 v41 = *(_WORD *)(a1 + 64);
          unint64_t v42 = *(void *)(a1 + 40);
          int v43 = sub_100090DF0(*(void *)(v2 + 216), *(unsigned __int16 *)(a1 + 68));
          sub_100563080(v2, v41, v42, v43);
        }
        else if (v9)
        {
          sub_10008CD0C(*(void *)(v2 + 216), *(void *)(a1 + 40), *(unsigned __int16 *)(a1 + 64));
        }
      }
      uint64_t v66 = sub_100017768();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v66 + 432))(v66) && sub_1005769D4())
      {
        *(unsigned char *)(v2 + 998) = 1;
        sub_1005633A4(v2);
      }
      if (v27) {
        sub_10008A294(v27);
      }
LABEL_121:
      __int16 v69 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        int v70 = *(unsigned __int16 *)(a1 + 64);
        __int16 v71 = "disabled";
        int v72 = *(unsigned __int8 *)(a1 + 71);
        if (v9) {
          __int16 v71 = "enabled";
        }
        int v73 = *(unsigned __int16 *)(a1 + 66);
        int v74 = "started";
        int v75 = *(unsigned __int16 *)(a1 + 68);
        if (!*(unsigned char *)(a1 + 70)) {
          int v74 = "stopped";
        }
        LODWORD(__p) = 67110402;
        HIDWORD(__p) = v70;
        int v76 = "not supported";
        __int16 v84 = 2080;
        double v85 = v71;
        if (v72) {
          int v76 = "supported";
        }
        __int16 v86 = 2080;
        double v87 = v74;
        __int16 v88 = 2080;
        int v89 = v76;
        __int16 v90 = 1024;
        int v91 = v73;
        __int16 v92 = 1024;
        int v93 = v75;
        _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "StreamStateChanged for handle %d Wireless Splitter aggregation is %s music playback is %s with latency %s with bitrate %u Dynamic Latency JBL %d", (uint8_t *)&__p, 0x32u);
      }
      if (*(void *)(v2 + 1120) >= 2uLL) {
        sub_10056438C(v2, *(unsigned __int8 *)(a1 + 70));
      }
      uint64_t v78 = *(void *)(a1 + 40);
      uint64_t v77 = a1 + 40;
      sub_10056447C(v2, v78, *(unsigned __int8 *)(v77 + 30));
      sub_10056181C(v2, *(void *)v77, *(unsigned __int8 *)(v77 + 30), 2);
      sub_1005647B4(v79, *(void *)v77, *(unsigned __int8 *)(v77 + 30));
      return;
    }
  }
  char v30 = *(void **)(v2 + 200);
  if (v30)
  {
    uint64_t v31 = v2 + 200;
    do
    {
      unint64_t v32 = v30[4];
      BOOL v33 = v32 >= v14;
      if (v32 >= v14) {
        char v34 = v30;
      }
      else {
        char v34 = v30 + 1;
      }
      if (v33) {
        uint64_t v31 = (uint64_t)v30;
      }
      char v30 = (void *)*v34;
    }
    while (*v34);
    if (v31 != v2 + 200 && v14 >= *(void *)(v31 + 32))
    {
      sub_100563678(v2, 0xBu, *(void *)(a1 + 40));
      uint64_t v44 = sub_100035F54();
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v44 + 792))(v44, 2))
      {
        unsigned __int8 v45 = qword_100A19E48;
        if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p) = 0;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "Adaptive Latency stream stop", (uint8_t *)&__p, 2u);
        }
        sub_10008FE60(*(void *)(v2 + 216), 150);
        uint64_t v46 = *(void *)(a1 + 40);
        uint64_t v47 = *(void *)(v2 + 216);
        __p = (void *)(a1 + 40);
        int v48 = sub_1000097B0((uint64_t **)(v2 + 192), (unint64_t *)(a1 + 40), (uint64_t)&unk_1007BE9D0, (uint64_t **)&__p);
        int v49 = sub_10008F948(v47, v46, *(_DWORD *)(*(void *)(v48[5] + 40) + 20), 6);
        sub_100563CCC(v2, v46, v49);
        uint64_t v50 = sub_1004AFB34();
        v80[0] = _NSConcreteStackBlock;
        v80[1] = 3221225472;
        v80[2] = sub_100563E5C;
        v80[3] = &unk_1009AD7F0;
        __int16 v81 = *(_WORD *)(a1 + 64);
        sub_100013018(v50, v80);
        sub_100563EC4(v2, *(void *)(a1 + 40));
      }
      int v51 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        sub_100476120(*v13, (uint64_t)&__p);
        int v52 = SBYTE3(v87) >= 0 ? &__p : (void **)__p;
        *(_DWORD *)long long buf = 136315138;
        int v95 = v52;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "Device %s, already exists in AudioLinkManagerDevices updating values", buf, 0xCu);
        if (SBYTE3(v87) < 0) {
          operator delete(__p);
        }
      }
      char v53 = *(unsigned char *)(a1 + 70);
      __p = (void *)(a1 + 40);
      *(unsigned char *)(sub_1000097B0((uint64_t **)(v2 + 192), (unint64_t *)(a1 + 40), (uint64_t)&unk_1007BE9D0, (uint64_t **)&__p)[5]+ 72) = v53;
      __int16 v54 = *(_WORD *)(a1 + 66);
      __p = (void *)(a1 + 40);
      *(_WORD *)(sub_1000097B0((uint64_t **)(v2 + 192), (unint64_t *)(a1 + 40), (uint64_t)&unk_1007BE9D0, (uint64_t **)&__p)[5]+ 58) = v54;
      __int16 v55 = *(_WORD *)(a1 + 66);
      __p = (void *)(a1 + 40);
      *(_WORD *)(sub_1000097B0((uint64_t **)(v2 + 192), (unint64_t *)(a1 + 40), (uint64_t)&unk_1007BE9D0, (uint64_t **)&__p)[5]+ 60) = v55;
      __p = (void *)(a1 + 40);
      *(_DWORD *)(sub_1000097B0((uint64_t **)(v2 + 192), (unint64_t *)(a1 + 40), (uint64_t)&unk_1007BE9D0, (uint64_t **)&__p)[5]+ 76) = 0;
      sub_1005579D4(v2, *(void *)(a1 + 40));
      __p = (void *)(a1 + 40);
      if (*(_DWORD *)(sub_1000097B0((uint64_t **)(v2 + 192), (unint64_t *)(a1 + 40), (uint64_t)&unk_1007BE9D0, (uint64_t **)&__p)[5]+ 64))
      {
        __p = (void *)(a1 + 40);
        *(_WORD *)(sub_1000097B0((uint64_t **)(v2 + 192), (unint64_t *)(a1 + 40), (uint64_t)&unk_1007BE9D0, (uint64_t **)&__p)[5]+ 68) = 0;
      }
      uint64_t v56 = *(void *)(v2 + 880);
      if (v56)
      {
        *(void *)(v2 + 888) = 0;
        (*(void (**)(uint64_t))(*(void *)v56 + 16))(v56);
        *(void *)(v2 + 880) = 0;
      }
      __int16 v57 = *(std::__shared_weak_count **)(a1 + 56);
      if (v57)
      {
        int v58 = std::__shared_weak_count::lock(v57);
        if (v58)
        {
          uint64_t v59 = *(void *)(a1 + 48);
          if (v59)
          {
            if (*(unsigned char *)(v59 + 77)) {
              sub_1002EC7A4(v59, *v13, 0, 0);
            }
          }
        }
      }
      else
      {
        int v58 = 0;
      }
      uint64_t v67 = sub_100035F54();
      if ((*(unsigned int (**)(uint64_t, void))(*(void *)v67 + 792))(v67, 0))
      {
        if (*(unsigned char *)(a1 + 71)
          || (__p = (void *)(a1 + 40),
              *(unsigned char *)(*(void *)(sub_1000097B0((uint64_t **)(v2 + 192), (unint64_t *)(a1 + 40), (uint64_t)&unk_1007BE9D0, (uint64_t **)&__p)[5]+ 40)+ 3)))
        {
          sub_100563EC4(v2, *v13);
        }
      }
      uint64_t v68 = sub_100017768();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v68 + 432))(v68) && *(unsigned char *)(v2 + 998)) {
        sub_1005641E8(v2);
      }
      if (v58) {
        sub_10008A294(v58);
      }
      goto LABEL_119;
    }
  }
  if (!v14)
  {
LABEL_119:
    if (*(void *)(v2 + 208)) {
      sub_1005616C4(v2, *v13, 2);
    }
    goto LABEL_121;
  }
  double v35 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
    sub_10077A020(v14, v35);
  }
  __int16 v36 = *(std::__shared_weak_count **)(a1 + 56);
  if (v36)
  {
    double v37 = std::__shared_weak_count::lock(v36);
    if (v37)
    {
      __int16 v38 = v37;
      uint64_t v39 = *(void *)(a1 + 48);
      if (v39 && *(unsigned char *)(v39 + 77)) {
        sub_1002EC7A4(v39, *v13, 0, 0);
      }
      sub_10008A294(v38);
    }
  }
}

void sub_1005628C8(_Unwind_Exception *a1)
{
  sub_10008A294(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100562950(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = a1 + 1112;
  uint64_t v3 = *(void *)(a1 + 1112);
  if (!v3) {
    goto LABEL_12;
  }
  uint64_t v4 = a1 + 1112;
  do
  {
    unsigned int v5 = *(unsigned __int16 *)(v3 + 32);
    BOOL v6 = v5 >= a2;
    if (v5 >= a2) {
      BOOL v7 = (uint64_t *)v3;
    }
    else {
      BOOL v7 = (uint64_t *)(v3 + 8);
    }
    if (v6) {
      uint64_t v4 = v3;
    }
    uint64_t v3 = *v7;
  }
  while (*v7);
  if (v4 == v2 || *(unsigned __int16 *)(v4 + 32) > a2) {
LABEL_12:
  }
    uint64_t v4 = a1 + 1112;
  uint64_t v8 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = sub_100569954();
    sub_10003FB34();
    v11[0] = 67109632;
    v11[1] = v4 != v2;
    __int16 v12 = 1024;
    int v13 = v9;
    __int16 v14 = 1024;
    BOOL v15 = sub_100351A24();
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Dynamic Audio Delivery aggregation=%d, Timesync Support=%d GPIO Toggle=%d", (uint8_t *)v11, 0x14u);
  }
  uint64_t result = sub_100569954();
  if (result)
  {
    sub_10003FB34();
    LODWORD(result) = sub_100351A24();
    if (v4 == v2) {
      return result;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100562A88(uint64_t a1)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009B5E78);
  }
  uint64_t v2 = (void *)qword_1009F8410;
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = sub_100017768();
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 584))(v4);

  return sub_100414C64(v2, v3, v5);
}

uint64_t sub_100562B28(uint64_t result, unint64_t a2, unsigned int a3)
{
  unint64_t v10 = a2;
  if (a2)
  {
    uint64_t v4 = result;
    char v9 = 0;
    sub_10001B8E0(&v9);
    sub_100198D88();
    sub_100181D84(v10 + 128);
    sub_10001B910(&v9);
    if (*(void *)(v4 + 1120) >= 2uLL)
    {
      uint64_t v5 = *(void *)(v4 + 1112);
      if (v5)
      {
        do
        {
          if (*(unsigned __int16 *)(v5 + 32) >= a3) {
            BOOL v6 = (uint64_t *)v5;
          }
          else {
            BOOL v6 = (uint64_t *)(v5 + 8);
          }
          uint64_t v5 = *v6;
        }
        while (*v6);
      }
    }
    BOOL v7 = (uint64_t **)(v4 + 192);
    uint64_t v11 = &v10;
    if (*(void *)sub_1000097B0(v7, &v10, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v11)[5])
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
        sub_10077A138();
      }
      uint64_t v11 = &v10;
      uint64_t v8 = *(void *)sub_1000097B0(v7, &v10, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v11)[5];
      if (v8)
      {
        sub_100576CC0(v8);
        operator delete();
      }
      uint64_t v11 = &v10;
      *(void *)sub_1000097B0(v7, &v10, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v11)[5] = 0;
    }
    operator new();
  }
  return result;
}

void sub_100563028()
{
}

uint64_t *sub_100563080(uint64_t a1, __int16 a2, unint64_t a3, int a4)
{
  unint64_t v16 = a3;
  BOOL v6 = (uint64_t **)(a1 + 192);
  uint64_t v17 = &v16;
  *(_WORD *)(sub_1000097B0((uint64_t **)(a1 + 192), &v16, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v17)[5] + 84) = a2;
  uint64_t v17 = &v16;
  *(unsigned char *)(*(void *)(sub_1000097B0(v6, &v16, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v17)[5] + 40) + 1) = 0;
  uint64_t v17 = &v16;
  *(unsigned char *)(*(void *)(sub_1000097B0(v6, &v16, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v17)[5] + 40) + 2) = 1;
  uint64_t v17 = &v16;
  *(unsigned char *)(*(void *)(sub_1000097B0(v6, &v16, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v17)[5] + 40) + 3) = 1;
  uint64_t v17 = &v16;
  *(_DWORD *)(*(void *)(sub_1000097B0(v6, &v16, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v17)[5] + 40) + 20) = a4;
  sub_100091874(*(void *)(a1 + 216), v16);
  uint64_t v17 = &v16;
  if (**(unsigned char **)(sub_1000097B0(v6, &v16, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v17)[5] + 40))
  {
    uint64_t v7 = sub_10003FFD4();
    (*(void (**)(uint64_t, void))(*(void *)v7 + 152))(v7, *(void *)(a1 + 216));
    uint64_t v8 = sub_10003FFD4();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8 + 208))(v8, *(void *)(a1 + 216) + 1, 1);
    uint64_t v9 = sub_10003FFD4();
    (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 200))(v9, *(void *)(a1 + 216) + 4);
    uint64_t v10 = sub_10003FFD4();
    sub_100471048(v10 + 728, a1 + 32);
    uint64_t v11 = sub_10003FFD4();
    sub_100577630(v11 + 808, a1 + 48);
    unint64_t v12 = *(void *)(a1 + 216);
    unint64_t v13 = v16;
    uint64_t v17 = &v16;
    __int16 v14 = sub_1000097B0(v6, &v16, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v17);
    sub_10008CD0C(v12, v13, *(unsigned __int16 *)(v14[5] + 84));
  }
  uint64_t v17 = &v16;
  uint64_t result = sub_1000097B0(v6, &v16, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v17);
  if (*(void *)result[5])
  {
    uint64_t v17 = &v16;
    *(void *)(*(void *)sub_1000097B0(v6, &v16, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v17)[5] + 144) = 0;
    uint64_t v17 = &v16;
    *(void *)(*(void *)sub_1000097B0(v6, &v16, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v17)[5] + 152) = 0;
    uint64_t v17 = &v16;
    *(void *)(*(void *)sub_1000097B0(v6, &v16, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v17)[5] + 128) = 0;
    uint64_t v17 = &v16;
    *(void *)(*(void *)sub_1000097B0(v6, &v16, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v17)[5] + 136) = 0;
    return sub_10056BC7C((uint64_t *)a1, v16);
  }
  return result;
}

void sub_1005633A4(uint64_t a1)
{
  *(unsigned char *)(a1 + 999) = 0;
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2020000000;
  uint64_t v2 = (uint64_t (*)(void))off_100A13930;
  unint64_t v13 = off_100A13930;
  if (!off_100A13930)
  {
    uint64_t v3 = sub_100576BEC();
    uint64_t v11[3] = (uint64_t)dlsym(v3, "tailspin_config_create_with_current_state");
    off_100A13930 = (_UNKNOWN *)v11[3];
    uint64_t v2 = (uint64_t (*)(void))v11[3];
  }
  _Block_object_dispose(&v10, 8);
  if (!v2)
  {
    uint64_t v8 = +[NSAssertionHandler currentHandler];
    uint64_t v9 = +[NSString stringWithUTF8String:"tailspin_config_t BT::soft_tailspin_config_create_with_current_state()"];
    [v8 handleFailureInFunction:v9 file:@"AudioLinkManager.mm" lineNumber:94 description:@"%s", dlerror()];
LABEL_12:

    __break(1u);
    return;
  }
  uint64_t v4 = v2();
  *(void *)(a1 + 1000) = v4;
  if (!v4) {
    return;
  }
  uint64_t v5 = v4;
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2020000000;
  BOOL v6 = (void (*)(uint64_t, uint64_t))off_100A13938;
  unint64_t v13 = off_100A13938;
  if (!off_100A13938)
  {
    uint64_t v7 = sub_100576BEC();
    uint64_t v11[3] = (uint64_t)dlsym(v7, "tailspin_enabled_set");
    off_100A13938 = (_UNKNOWN *)v11[3];
    BOOL v6 = (void (*)(uint64_t, uint64_t))v11[3];
  }
  _Block_object_dispose(&v10, 8);
  if (!v6)
  {
    uint64_t v8 = +[NSAssertionHandler currentHandler];
    uint64_t v9 = +[NSString stringWithUTF8String:"void BT::soft_tailspin_enabled_set(tailspin_config_t, BOOL)"];
    [v8 handleFailureInFunction:v9 file:@"AudioLinkManager.mm" lineNumber:106 description:@"%s", dlerror()];
    goto LABEL_12;
  }
  v6(v5, 1);
  sub_100570490(*(void *)(a1 + 1000), 64);
  sub_100570490(*(void *)(a1 + 1000), 48);
  sub_100570620(*(void *)(a1 + 1000));
}

void sub_10056363C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100563678(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v42 = a3;
  if (!_os_feature_enabled_impl()) {
    return 1;
  }
  uint64_t v6 = *(void *)(a1 + 224);
  if (v6)
  {
    if (!sub_10007DD8C(v6, a3)) {
      return 1;
    }
  }
  unint64_t v43 = a3;
  *(void *)long long buf = &v43;
  uint64_t v7 = *(unsigned int *)(*(void *)(sub_1000097B0((uint64_t **)(a1 + 192), &v43, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5]+ 40)+ 24);
  unint64_t v43 = v42;
  *(void *)long long buf = &v43;
  uint64_t v8 = *(void *)(sub_1000097B0((uint64_t **)(a1 + 192), &v43, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 40);
  uint64_t v9 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = *(void *)(a1 + 216);
    uint64_t v11 = *(void *)(v10 + 8 * a2 + 168);
    v10 += 48;
    uint64_t v12 = *(void *)(v10 + 8 * v7);
    uint64_t v13 = *(void *)(v10 + 8 * *(unsigned int *)(v8 + 24));
    unint64_t v43 = v42;
    *(void *)long long buf = &v43;
    int v14 = *(_DWORD *)(*(void *)(sub_1000097B0((uint64_t **)(a1 + 192), &v43, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5]
                                + 40)
                    + 20);
    *(_DWORD *)long long buf = 136447234;
    *(void *)&uint8_t buf[4] = v11;
    __int16 v45 = 2082;
    uint64_t v46 = v12;
    __int16 v47 = 2082;
    uint64_t v48 = v13;
    __int16 v49 = 1024;
    int v50 = 0;
    __int16 v51 = 1024;
    int v52 = v14;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Low Latency Game pre Transition: %{public}s. State: %{public}s -> %{public}s. handled %d. latency %d", buf, 0x2Cu);
  }
  switch(a2)
  {
    case 0u:
      if (v7 != 9) {
        goto LABEL_50;
      }
      *(_DWORD *)(v8 + 24) = 1;
      BOOL v15 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Low Latency Game exit completed, re-evaluate latency mode", buf, 2u);
      }
      goto LABEL_39;
    case 2u:
      if (v7 == 12)
      {
        *(_DWORD *)(v8 + 24) = 13;
        sub_10007FD58(*(void *)(a1 + 224), 2, v42);
        goto LABEL_47;
      }
      if (v7 != 2 && v7 != 1) {
        goto LABEL_50;
      }
      *(_DWORD *)(v8 + 24) = 5;
      uint64_t v17 = *(void *)(a1 + 224);
      unint64_t v18 = v42;
      uint64_t v16 = 1;
      int v19 = 1;
LABEL_25:
      sub_10007FE20(v17, v19, v18);
      goto LABEL_51;
    case 3u:
      if (v7 == 8)
      {
        int v20 = 7;
LABEL_38:
        *(_DWORD *)(v8 + 24) = v20;
LABEL_39:
        unint64_t v26 = *(void *)(a1 + 216);
        unint64_t v27 = v42;
        *(void *)long long buf = &v42;
        uint64_t v28 = sub_1000097B0((uint64_t **)(a1 + 192), (unint64_t *)&v42, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
        sub_10008CD0C(v26, v27, *(unsigned __int16 *)(v28[5] + 84));
        goto LABEL_47;
      }
      if (v7 == 5)
      {
        int v20 = 4;
        goto LABEL_38;
      }
      char v29 = qword_100A19E48;
      uint64_t v16 = 0;
      if (!os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_51;
      }
      uint64_t v30 = *(void *)(*(void *)(a1 + 216) + 8 * v7 + 48);
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v30;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Low Latency Game transitionStateMachine: got FTO in state %{public}s", buf, 0xCu);
LABEL_50:
      uint64_t v16 = 0;
      goto LABEL_51;
    case 4u:
      if (v7 != 6) {
        goto LABEL_50;
      }
      *(_DWORD *)(v8 + 24) = 13;
      sub_10007FD58(*(void *)(a1 + 224), 2, v42);
      sub_100571644(a1, v42);
      goto LABEL_47;
    case 6u:
      if (v7 != 13) {
        goto LABEL_50;
      }
      *(_DWORD *)(v8 + 24) = 10;
      goto LABEL_47;
    case 8u:
      sub_100093AAC(*(void *)(a1 + 216), v42);
      sub_10007FFC4(*(void *)(a1 + 224), v42);
      if ((v7 - 10) > 3) {
        goto LABEL_50;
      }
      uint64_t v16 = 1;
      sub_10007FD58(*(void *)(a1 + 224), 1, v42);
      *(_DWORD *)(v8 + 24) = 8;
      uint64_t v17 = *(void *)(a1 + 224);
      unint64_t v18 = v42;
      int v19 = 3;
      goto LABEL_25;
    case 0xAu:
      if (v7 == 7)
      {
        *(_DWORD *)(v8 + 24) = 9;
        uint64_t v31 = *(void *)(a1 + 224);
        unint64_t v32 = v42;
        int v33 = 0;
LABEL_46:
        sub_10007FE20(v31, v33, v32);
LABEL_47:
        uint64_t v16 = 1;
        goto LABEL_51;
      }
      if (v7 == 4)
      {
        if (*(_DWORD *)(sub_10056C53C(a1, v42) + 20) != 10)
        {
          char v34 = qword_100A19E48;
          if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
            sub_10077A16C((unint64_t *)&v42, a1, v34);
          }
          goto LABEL_50;
        }
        *(_DWORD *)(v8 + 24) = 6;
        uint64_t v31 = *(void *)(a1 + 224);
        unint64_t v32 = v42;
        int v33 = 2;
        goto LABEL_46;
      }
      if (v7) {
        goto LABEL_50;
      }
      uint64_t v16 = 1;
      *(_DWORD *)(v8 + 24) = 1;
      sub_100571598(a1);
LABEL_51:
      uint64_t v35 = *(unsigned int *)(v8 + 24);
      if (v7 != v35)
      {
        __int16 v36 = qword_100A19E48;
        if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v37 = *(void *)(a1 + 216);
          uint64_t v38 = *(void *)(v37 + 8 * a2 + 168);
          v37 += 48;
          uint64_t v39 = *(void *)(v37 + 8 * v7);
          uint64_t v40 = *(void *)(v37 + 8 * v35);
          *(_DWORD *)long long buf = 136446978;
          *(void *)&uint8_t buf[4] = v38;
          __int16 v45 = 2082;
          uint64_t v46 = v39;
          __int16 v47 = 2082;
          uint64_t v48 = v40;
          __int16 v49 = 1024;
          int v50 = v16;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Low Latency Game Transition: %{public}s. State: %{public}s -> %{public}s. handled %d", buf, 0x26u);
        }
      }
      return v16;
    case 0xBu:
      sub_100093AAC(*(void *)(a1 + 216), v42);
      sub_10007FFC4(*(void *)(a1 + 224), v42);
      if (v7) {
        BOOL v21 = v7 == 14;
      }
      else {
        BOOL v21 = 1;
      }
      if (!v21)
      {
        *(_DWORD *)(v8 + 24) = 0;
        sub_10007FE20(*(void *)(a1 + 224), 0, v42);
        sub_10007FD58(*(void *)(a1 + 224), 1, v42);
        uint64_t v22 = qword_100A19E48;
        if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Low Latency Game stopped, re-evaluate latency mode", buf, 2u);
        }
        unint64_t v23 = *(void *)(a1 + 216);
        unint64_t v24 = v42;
        *(void *)long long buf = &v42;
        char v25 = sub_1000097B0((uint64_t **)(a1 + 192), (unint64_t *)&v42, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
        sub_10008CD0C(v23, v24, *(unsigned __int16 *)(v25[5] + 84));
      }
      goto LABEL_50;
    default:
      uint64_t v16 = sub_100574014(a1, a2, v42);
      goto LABEL_51;
  }
}

void sub_100563CCC(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 == 1)
  {
    if (!*(unsigned char *)(a1 + 351))
    {
      if (qword_1009F8090 != -1) {
        dispatch_once(&qword_1009F8090, &stru_1009B5E98);
      }
      sub_1004D55B8((uint64_t)off_1009F8088, a2, 16, 9, 110, 0);
      *(unsigned char *)(a1 + 351) = 1;
      return;
    }
    goto LABEL_11;
  }
  if (a3 != 2 || !*(unsigned char *)(a1 + 351))
  {
LABEL_11:
    uint64_t v6 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = "dynamicLowLatencyExit";
      if (a3 == 1) {
        uint64_t v7 = "dynamicLowLatencyEnter";
      }
      int v8 = 136315138;
      uint64_t v9 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Warning: Recieved duplicate notification for %s", (uint8_t *)&v8, 0xCu);
    }
    return;
  }
  if (qword_1009F8090 != -1) {
    dispatch_once(&qword_1009F8090, &stru_1009B5E98);
  }
  sub_1004D55B8((uint64_t)off_1009F8088, a2, 16, 9, 111, 0);
  *(unsigned char *)(a1 + 351) = 0;
}

uint64_t sub_100563E5C(uint64_t a1)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009B5E78);
  }
  uint64_t v2 = qword_1009F8410;
  unsigned int v3 = *(unsigned __int16 *)(a1 + 32);

  return sub_100418B84(v2, v3, 6);
}

uint64_t *sub_100563EC4(uint64_t a1, unint64_t a2)
{
  unint64_t v15 = a2;
  unsigned int v3 = (uint64_t **)(a1 + 192);
  *(void *)long long buf = &v15;
  if (**(unsigned char **)(sub_1000097B0((uint64_t **)(a1 + 192), &v15, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 40))
  {
    uint64_t v4 = sub_10003FFD4();
    sub_100471358(v4 + 728, a1 + 32);
    uint64_t v5 = sub_10003FFD4();
    sub_100577940(v5 + 808, a1 + 48);
  }
  *(void *)long long buf = &v15;
  *(_DWORD *)(*(void *)(sub_1000097B0(v3, &v15, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 40) + 20) = 6;
  *(void *)long long buf = &v15;
  *(unsigned char *)(*(void *)(sub_1000097B0(v3, &v15, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 40) + 1) = 0;
  *(void *)long long buf = &v15;
  *(void *)(*(void *)(sub_1000097B0(v3, &v15, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 40) + 8) = 0;
  *(void *)long long buf = &v15;
  *(unsigned char *)(*(void *)(sub_1000097B0(v3, &v15, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 40) + 2) = 0;
  *(void *)long long buf = &v15;
  *(unsigned char *)(*(void *)(sub_1000097B0(v3, &v15, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 40) + 3) = 0;
  *(void *)long long buf = &v15;
  *(_DWORD *)(*(void *)(sub_1000097B0(v3, &v15, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 40) + 24) = 0;
  uint64_t v6 = sub_10003FFD4();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 216))(v6, *(void *)(a1 + 216) + 2);
  uint64_t v7 = sub_10003FFD4();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 224))(v7, a1 + 920);
  unint64_t v8 = *(void *)(a1 + 216);
  *(_WORD *)(v8 + 5) = 0;
  *(_WORD *)unint64_t v8 = 1;
  *(unsigned char *)(v8 + 3) = 0;
  **(unsigned char **)(a1 + 224) = 0;
  if (*(unsigned char *)(v8 + 2) || *(unsigned char *)(v8 + 8) || *(unsigned char *)(v8 + 7))
  {
    uint64_t v9 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = *(unsigned __int8 *)(v8 + 8);
      int v11 = *(unsigned __int8 *)(v8 + 7);
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v10;
      __int16 v17 = 1024;
      int v18 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Dynamic Latency: Re-enable LLM, fSpatialVideoOn = %d fSpatialMusicOn = %d", buf, 0xEu);
      unint64_t v8 = *(void *)(a1 + 216);
    }
    unint64_t v12 = v15;
    *(void *)long long buf = &v15;
    uint64_t v13 = sub_1000097B0(v3, &v15, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
    sub_10008CD0C(v8, v12, *(unsigned __int16 *)(v13[5] + 84));
  }
  *(void *)long long buf = &v15;
  uint64_t result = sub_1000097B0(v3, &v15, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
  if (*(void *)result[5]) {
    return sub_10056BC7C((uint64_t *)a1, v15);
  }
  return result;
}

void sub_1005641E8(uint64_t a1)
{
  *(unsigned char *)(a1 + 999) = 0;
  uint64_t v2 = *(void *)(a1 + 1000);
  if (v2) {
    sub_1005707A0(v2);
  }
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  unsigned int v3 = (uint64_t (*)(void))off_100A13958;
  int v11 = off_100A13958;
  if (!off_100A13958)
  {
    uint64_t v4 = sub_100576BEC();
    v9[3] = (uint64_t)dlsym(v4, "tailspin_config_create_with_default_config");
    off_100A13958 = (_UNKNOWN *)v9[3];
    unsigned int v3 = (uint64_t (*)(void))v9[3];
  }
  _Block_object_dispose(&v8, 8);
  if (v3)
  {
    uint64_t v5 = v3();
    *(void *)(a1 + 1000) = v5;
    if (v5)
    {
      sub_100570620(v5);
      sub_1005707A0(*(void *)(a1 + 1000));
      *(void *)(a1 + 1000) = 0;
    }
  }
  else
  {
    uint64_t v6 = +[NSAssertionHandler currentHandler];
    uint64_t v7 = +[NSString stringWithUTF8String:"tailspin_config_t BT::soft_tailspin_config_create_with_default_config()"];
    [v6 handleFailureInFunction:v7 file:@"AudioLinkManager.mm" lineNumber:100 description:@"%s", dlerror()];

    __break(1u);
  }
}

void sub_10056435C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10056438C(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 1160) == a2)
  {
    uint64_t v2 = *(void *)(a1 + 1112);
    if (v2)
    {
      do
        uint64_t v2 = *(void *)(v2 + 8);
      while (v2);
    }
    else
    {
      uint64_t v3 = a1 + 1112;
      do
      {
        BOOL v4 = **(void **)(v3 + 16) == v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }
      while (v4);
    }
    uint64_t v5 = *(void (**)(void))(*(void *)sub_10003FB34() + 3328);
    v5();
  }
  else
  {
    *(unsigned char *)(a1 + 1160) = a2;
    sub_100570E94(a1, a2);
  }
}

uint64_t *sub_10056447C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v22 = a2;
  int v5 = sub_10056A4B4(a1, a2);
  uint64_t v6 = (uint64_t **)(a1 + 192);
  *(void *)long long buf = &v22;
  *(_DWORD *)(sub_1000097B0((uint64_t **)(a1 + 192), (unint64_t *)&v22, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5]
            + 64) = v5;
  uint64_t v7 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)long long buf = &v22;
    int v8 = *(_DWORD *)(sub_1000097B0((uint64_t **)(a1 + 192), (unint64_t *)&v22, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5]+ 64);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "A2DP Link Adaptive Packet Type: Link Adaptive Packet type support=%d", buf, 8u);
  }
  if (sub_10056A574(a1))
  {
    uint64_t v9 = sub_1004AFB34();
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_10056A638;
    v21[3] = &unk_100998260;
    void v21[4] = a1;
    void v21[5] = v22;
    sub_100013018(v9, v21);
  }
  *(void *)long long buf = &v22;
  uint64_t result = sub_1000097B0((uint64_t **)(a1 + 192), (unint64_t *)&v22, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
  if (*(_DWORD *)(result[5] + 64))
  {
    __int16 v11 = sub_10056A6AC(a1, v22);
    if (a3)
    {
      *(void *)long long buf = &v22;
      if (*(_DWORD *)(sub_1000097B0(v6, (unint64_t *)&v22, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 64) == 2)
      {
        uint64_t v12 = sub_1004AFB34();
        v19[0] = _NSConcreteStackBlock;
        v19[1] = 3221225472;
        void v19[2] = sub_10056A778;
        v19[3] = &unk_1009AD7F0;
        __int16 v20 = v11;
        sub_100013018(v12, v19);
        *(void *)long long buf = &v22;
        uint64_t v13 = sub_1000097B0(v6, (unint64_t *)&v22, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf) + 5;
        char v14 = 1;
LABEL_12:
        *(unsigned char *)(*v13 + 71) = v14;
        *(void *)long long buf = &v22;
        uint64_t result = sub_1000097B0(v6, (unint64_t *)&v22, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
        *(_WORD *)(result[5] + 68) = -1;
        return result;
      }
      *(void *)long long buf = &v22;
    }
    else
    {
      uint64_t v15 = sub_1004AFB34();
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_10056A7E0;
      v17[3] = &unk_1009AD7F0;
      __int16 v18 = v11;
      sub_100013018(v15, v17);
      *(void *)long long buf = &v22;
    }
    uint64_t v16 = sub_1000097B0(v6, (unint64_t *)&v22, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
    char v14 = 0;
    uint64_t v13 = v16 + 5;
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_1005647B4(uint64_t a1, uint64_t a2, int a3)
{
  int v5 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    if (a3) {
      uint64_t v6 = "Start";
    }
    else {
      uint64_t v6 = "Stop";
    }
    uint64_t v7 = sub_100017768();
    int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 616))(v7);
    uint64_t v9 = "NOT FORCED";
    if (v8) {
      uint64_t v9 = "FORCED";
    }
    int v21 = 136315394;
    uint64_t v22 = v6;
    __int16 v23 = 2080;
    unint64_t v24 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Audio Debug Stream State : %s Ultra High Priority %s ", (uint8_t *)&v21, 0x16u);
  }
  uint64_t v10 = sub_100017768();
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 616))(v10);
  if (a3)
  {
    if (!result) {
      return result;
    }
    uint64_t v12 = sub_10003FB34();
    unint64_t v13 = *(unsigned int *)(a2 + 128) | ((unint64_t)*(unsigned __int16 *)(a2 + 132) << 32);
    uint64_t v14 = sub_100476054(a2);
    (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v12 + 72))(v12, v13, v14, 2, 1, 1, 1, 0);
    uint64_t v15 = *(void *)sub_10003FB34();
    (*(void (**)(void))(v15 + 952))();
    uint64_t v16 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 96);
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v17 = sub_10003FB34();
    unint64_t v18 = *(unsigned int *)(a2 + 128) | ((unint64_t)*(unsigned __int16 *)(a2 + 132) << 32);
    uint64_t v19 = sub_100476054(a2);
    (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, void))(*(void *)v17 + 72))(v17, v18, v19, 2, 0, 1, 1, 0);
    uint64_t v20 = *(void *)sub_10003FB34();
    (*(void (**)(void))(v20 + 952))();
    uint64_t v16 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 96);
  }
  return v16();
}

uint64_t sub_100564AAC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100564AC8(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_100564AD8(uint64_t a1, uint64_t a2, __int16 a3, char a4, char a5, __int16 a6, __int16 a7)
{
}

void sub_100564AE0(uint64_t a1, uint64_t a2, __int16 a3, int a4)
{
  BOOL v4 = *(NSObject **)(a1 + 256);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100564B5C;
  block[3] = &unk_1009B3D20;
  void block[4] = a1;
  void block[5] = a2;
  __int16 v7 = a3;
  int v6 = a4;
  dispatch_async(v4, block);
}

void sub_100564B5C(uint64_t a1)
{
  uint64_t v2 = (unint64_t *)(a1 + 40);
  unint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    BOOL v4 = *(void **)(v3 + 200);
    if (v4)
    {
      int v6 = (uint64_t **)(v3 + 192);
      __int16 v7 = (void *)(v3 + 200);
      do
      {
        unint64_t v8 = v4[4];
        BOOL v9 = v8 >= v1;
        if (v8 >= v1) {
          uint64_t v10 = v4;
        }
        else {
          uint64_t v10 = v4 + 1;
        }
        if (v9) {
          __int16 v7 = v4;
        }
        BOOL v4 = (void *)*v10;
      }
      while (*v10);
      if (v7 != (void *)(v3 + 200) && v1 >= v7[4])
      {
        __int16 v11 = *(_WORD *)(a1 + 52);
        *(void *)long long buf = a1 + 40;
        *(_WORD *)(sub_1000097B0(v6, v2, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 60) = v11;
        if (qword_1009F8738 != -1) {
          dispatch_once(&qword_1009F8738, &stru_1009B5F18);
        }
        sub_10026F8A8(qword_1009F8730, *(void *)(a1 + 40), 0, *(unsigned __int16 *)(a1 + 48));
        int v12 = *(_DWORD *)(a1 + 48);
        *(void *)long long buf = v2;
        *(_DWORD *)(sub_1000097B0(v6, v2, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 80) = v12;
        uint64_t v13 = sub_100017768();
        LOBYTE(v12) = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 296))(v13);
        *(void *)long long buf = v2;
        *(unsigned char *)(sub_1000097B0(v6, v2, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 56) = v12 ^ 1;
        *(void *)long long buf = v2;
        if (*(unsigned char *)(sub_1000097B0(v6, v2, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 56))
        {
          *(void *)long long buf = v2;
          if (*(void *)sub_1000097B0(v6, v2, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5])
          {
            if (*(unsigned __int16 *)(a1 + 52) >= *(unsigned __int16 *)(v3 + 1046)) {
              __int16 v14 = *(_WORD *)(v3 + 1046);
            }
            else {
              __int16 v14 = *(_WORD *)(a1 + 52);
            }
            *(void *)long long buf = v2;
            *(_WORD *)(sub_1000097B0(v6, v2, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 58) = v14;
            uint64_t v15 = qword_100A19E48;
            if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
            {
              char v34 = v2;
              uint64_t v16 = sub_1000097B0(v6, v2, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v34);
              uint64_t v17 = sub_100564F6C((uint64_t)v16, *(_DWORD *)(v16[5] + 80));
              char v34 = v2;
              int v18 = *(unsigned __int16 *)(sub_1000097B0(v6, v2, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v34)[5] + 58);
              *(_DWORD *)long long buf = 138412546;
              *(void *)&uint8_t buf[4] = v17;
              __int16 v36 = 1024;
              int v37 = v18;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "A2DP Link Adaptive Bitrate for %@ started with initial bitrate of %3d", buf, 0x12u);
            }
            *(void *)long long buf = v2;
            unsigned int v19 = *(unsigned __int16 *)(sub_1000097B0(v6, v2, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 84);
            *(void *)long long buf = v2;
            uint64_t v20 = sub_1000097B0(v6, v2, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
            uint64_t v21 = v3 + 1112;
            uint64_t v22 = *(void *)(v3 + 1112);
            if (!v22) {
              goto LABEL_33;
            }
            uint64_t v23 = v3 + 1112;
            do
            {
              unsigned int v24 = *(unsigned __int16 *)(v22 + 32);
              BOOL v25 = v24 >= v19;
              if (v24 >= v19) {
                unint64_t v26 = (uint64_t *)v22;
              }
              else {
                unint64_t v26 = (uint64_t *)(v22 + 8);
              }
              if (v25) {
                uint64_t v23 = v22;
              }
              uint64_t v22 = *v26;
            }
            while (*v26);
            if (v23 == v21 || v19 < *(unsigned __int16 *)(v23 + 32)) {
LABEL_33:
            }
              uint64_t v23 = v3 + 1112;
            __int16 v27 = *(_WORD *)(v20[5] + 58);
            BOOL v28 = v23 != v21;
            uint64_t v29 = sub_1004AFB34();
            v30[0] = _NSConcreteStackBlock;
            v30[1] = 3221225472;
            void v30[2] = sub_10056506C;
            v30[3] = &unk_1009B20B0;
            BOOL v33 = v28;
            __int16 v31 = v19;
            __int16 v32 = v27;
            sub_100013018(v29, v30);
          }
        }
      }
    }
  }
}

void sub_100564F54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100564F6C(uint64_t a1, int a2)
{
  uint64_t v3 = +[NSMutableString stringWithFormat:&stru_1009C1AC8];
  BOOL v4 = v3;
  switch(a2)
  {
    case 0:
      CFStringRef v5 = @"SBC";
      goto LABEL_7;
    case 33023:
      CFStringRef v5 = @"AAC-ELD";
      goto LABEL_7;
    case 2:
      CFStringRef v5 = @"AAC-LC";
LABEL_7:
      [v3 appendString:v5];
      goto LABEL_8;
  }
  [v3 appendString:@"Unknown Codec"];
  __int16 v7 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Unknown codec", v8, 2u);
  }
LABEL_8:

  return v4;
}

void sub_10056505C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10056506C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 36))
  {
    if (qword_1009F8418 != -1) {
      dispatch_once(&qword_1009F8418, &stru_1009B5E78);
    }
    uint64_t v2 = qword_1009F8410;
    unsigned int v3 = *(unsigned __int16 *)(a1 + 32);
    int v4 = *(unsigned __int16 *)(a1 + 34);
    sub_100419150(v2, v3, v4);
  }
}

void sub_1005650E8(uint64_t a1, uint64_t a2, __int16 a3, int a4)
{
  int v4 = *(NSObject **)(a1 + 232);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100564B5C;
  block[3] = &unk_1009B3D20;
  void block[4] = a1 - 24;
  void block[5] = a2;
  __int16 v7 = a3;
  int v6 = a4;
  dispatch_async(v4, block);
}

void sub_100565168(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 256);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1005651DC;
  v3[3] = &unk_100998260;
  v3[4] = a1;
  void v3[5] = a2;
  dispatch_async(v2, v3);
}

uint64_t *sub_1005651DC(uint64_t *result)
{
  uint64_t v2 = (unint64_t *)(result + 5);
  unint64_t v1 = result[5];
  if (v1)
  {
    uint64_t v3 = result[4];
    int v4 = *(void **)(v3 + 200);
    if (v4)
    {
      CFStringRef v5 = (uint64_t **)(v3 + 192);
      int v6 = (void *)(v3 + 200);
      do
      {
        unint64_t v7 = v4[4];
        BOOL v8 = v7 >= v1;
        if (v7 >= v1) {
          BOOL v9 = v4;
        }
        else {
          BOOL v9 = v4 + 1;
        }
        if (v8) {
          int v6 = v4;
        }
        int v4 = (void *)*v9;
      }
      while (*v9);
      if (v6 != (void *)(v3 + 200) && v1 >= v6[4])
      {
        int v12 = (unint64_t *)(result + 5);
        *(unsigned char *)(sub_1000097B0(v5, v2, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v12)[5] + 56) = 0;
        __int16 v10 = *(_WORD *)(v3 + 1046);
        int v12 = v2;
        *(_WORD *)(sub_1000097B0(v5, v2, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v12)[5] + 58) = v10;
        int v12 = v2;
        *(_WORD *)(sub_1000097B0(v5, v2, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v12)[5] + 62) = -1;
        __int16 v11 = *(_WORD *)(v3 + 1046);
        int v12 = v2;
        *(_WORD *)(sub_1000097B0(v5, v2, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v12)[5] + 60) = v11;
        int v12 = v2;
        uint64_t result = sub_1000097B0(v5, v2, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v12);
        *(_DWORD *)(result[5] + 80) = 0;
      }
    }
  }
  return result;
}

void sub_10056532C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 232);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1005651DC;
  v3[3] = &unk_100998260;
  v3[4] = a1 - 24;
  void v3[5] = a2;
  dispatch_async(v2, v3);
}

void sub_1005653A4(uint64_t a1, __int16 a2, char a3)
{
  uint64_t v3 = *(NSObject **)(a1 + 256);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_100565420;
  v4[3] = &unk_1009ACD50;
  v4[4] = a1;
  __int16 v5 = a2;
  char v6 = a3;
  dispatch_async(v3, v4);
}

void sub_100565420(uint64_t a1)
{
}

void sub_100565438(uint64_t a1, __int16 a2, char a3)
{
  uint64_t v3 = *(NSObject **)(a1 + 232);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_100565420;
  v4[3] = &unk_1009ACD50;
  v4[4] = a1 - 24;
  __int16 v5 = a2;
  char v6 = a3;
  dispatch_async(v3, v4);
}

void sub_1005654B8(uint64_t a1, __int16 a2, char a3)
{
  uint64_t v3 = *(NSObject **)(a1 + 256);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_100565534;
  v4[3] = &unk_1009ACD50;
  v4[4] = a1;
  __int16 v5 = a2;
  char v6 = a3;
  dispatch_async(v3, v4);
}

void sub_100565534(uint64_t a1)
{
}

void sub_10056554C(uint64_t a1, __int16 a2, char a3)
{
  uint64_t v3 = *(NSObject **)(a1 + 232);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_100565534;
  v4[3] = &unk_1009ACD50;
  v4[4] = a1 - 24;
  __int16 v5 = a2;
  char v6 = a3;
  dispatch_async(v3, v4);
}

void sub_1005655CC(uint64_t a1, __int16 a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 256);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_100565644;
  v3[3] = &unk_1009A0B58;
  v3[4] = a1;
  __int16 v4 = a2;
  dispatch_async(v2, v3);
}

void sub_100565644(uint64_t a1)
{
}

void sub_100565658(uint64_t a1, __int16 a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 232);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_100565644;
  v3[3] = &unk_1009A0B58;
  v3[4] = a1 - 24;
  __int16 v4 = a2;
  dispatch_async(v2, v3);
}

double sub_1005656D4(void *a1, int a2)
{
  __uint64_t v4 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
  if (a2)
  {
    a1[105] = v4;
  }
  else
  {
    double result = (double)(v4 - a1[105]) * 0.000000001;
    a1[106] = (unint64_t)result;
    a1[107] += (unint64_t)result;
  }
  return result;
}

void sub_100565738(uint64_t a1, __int16 a2, char a3)
{
  uint64_t v3 = *(NSObject **)(a1 + 256);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_1005657B4;
  v4[3] = &unk_1009ACD50;
  v4[4] = a1;
  __int16 v5 = a2;
  char v6 = a3;
  dispatch_async(v3, v4);
}

void sub_1005657B4(uint64_t a1)
{
}

void sub_1005657CC(uint64_t a1, __int16 a2, char a3)
{
  uint64_t v3 = *(NSObject **)(a1 + 232);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_1005657B4;
  v4[3] = &unk_1009ACD50;
  v4[4] = a1 - 24;
  __int16 v5 = a2;
  char v6 = a3;
  dispatch_async(v3, v4);
}

void sub_10056584C(uint64_t a1, __int16 a2, char a3)
{
  uint64_t v3 = *(NSObject **)(a1 + 256);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_1005658C8;
  v4[3] = &unk_1009ACD50;
  v4[4] = a1;
  __int16 v5 = a2;
  char v6 = a3;
  dispatch_async(v3, v4);
}

void sub_1005658C8(uint64_t a1)
{
}

void sub_1005658E0(uint64_t a1, __int16 a2, char a3)
{
  uint64_t v3 = *(NSObject **)(a1 + 232);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_1005658C8;
  v4[3] = &unk_1009ACD50;
  v4[4] = a1 - 24;
  __int16 v5 = a2;
  char v6 = a3;
  dispatch_async(v3, v4);
}

void sub_100565960(uint64_t a1, __int16 a2, char a3)
{
  uint64_t v3 = *(NSObject **)(a1 + 256);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_1005659DC;
  v4[3] = &unk_1009ACD50;
  v4[4] = a1;
  __int16 v5 = a2;
  char v6 = a3;
  dispatch_async(v3, v4);
}

void sub_1005659DC(uint64_t a1)
{
}

void sub_1005659F4(uint64_t a1, __int16 a2, char a3)
{
  uint64_t v3 = *(NSObject **)(a1 + 232);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_1005659DC;
  v4[3] = &unk_1009ACD50;
  v4[4] = a1 - 24;
  __int16 v5 = a2;
  char v6 = a3;
  dispatch_async(v3, v4);
}

void sub_100565A74(uint64_t a1, __int16 a2, char a3)
{
  uint64_t v3 = *(NSObject **)(a1 + 256);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_100565AF0;
  v4[3] = &unk_1009ACD50;
  v4[4] = a1;
  __int16 v5 = a2;
  char v6 = a3;
  dispatch_async(v3, v4);
}

void sub_100565AF0(uint64_t a1)
{
}

void sub_100565B08(uint64_t a1, __int16 a2, char a3)
{
  uint64_t v3 = *(NSObject **)(a1 + 232);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_100565AF0;
  v4[3] = &unk_1009ACD50;
  v4[4] = a1 - 24;
  __int16 v5 = a2;
  char v6 = a3;
  dispatch_async(v3, v4);
}

void sub_100565B88(uint64_t a1, __int16 a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 256);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_100565C00;
  v3[3] = &unk_1009A0B58;
  v3[4] = a1;
  __int16 v4 = a2;
  dispatch_async(v2, v3);
}

void sub_100565C00(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 880)) {
    sub_10061F200(*(void *)(*(void *)(a1 + 32) + 880), *(unsigned __int16 *)(a1 + 40));
  }
}

void sub_100565C1C(uint64_t a1, __int16 a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 232);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_100565C00;
  v3[3] = &unk_1009A0B58;
  v3[4] = a1 - 24;
  __int16 v4 = a2;
  dispatch_async(v2, v3);
}

void sub_100565C98(uint64_t a1, uint64_t a2, __int16 a3, char a4)
{
  __int16 v4 = *(NSObject **)(a1 + 256);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100565D14;
  block[3] = &unk_1009A2898;
  char v7 = a4;
  void block[4] = a1;
  void block[5] = a2;
  __int16 v6 = a3;
  dispatch_async(v4, block);
}

void sub_100565D14(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    if (*(unsigned char *)(a1 + 50)) {
      __int16 v5 = "Publish ";
    }
    else {
      __int16 v5 = "Unpublish ";
    }
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = v5;
    __int16 v22 = 2048;
    uint64_t v23 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Dynamic Latency : A2DP Device %{public}s, device: %p", buf, 0x16u);
  }
  char v7 = (unint64_t *)(a1 + 40);
  unint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    BOOL v8 = (void *)(v2 + 200);
    BOOL v9 = *(void **)(v2 + 200);
    if (*(unsigned char *)(a1 + 50))
    {
      if (!v9) {
        goto LABEL_19;
      }
      __int16 v10 = (void *)(v2 + 200);
      do
      {
        unint64_t v11 = v9[4];
        BOOL v12 = v11 >= v6;
        if (v11 >= v6) {
          uint64_t v13 = v9;
        }
        else {
          uint64_t v13 = v9 + 1;
        }
        if (v12) {
          __int16 v10 = v9;
        }
        BOOL v9 = (void *)*v13;
      }
      while (*v13);
      if (v10 == v8 || v6 < v10[4]) {
LABEL_19:
      }
        operator new();
      if (qword_1009F8738 != -1) {
        dispatch_once(&qword_1009F8738, &stru_1009B5F18);
      }
      sub_10026F558(qword_1009F8730, *(void *)(a1 + 40));
      __int16 v14 = *(_WORD *)(a1 + 48);
      *(void *)long long buf = v7;
      *(_WORD *)(sub_1000097B0((uint64_t **)(v2 + 192), v7, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 84) = v14;
      *(void *)long long buf = v7;
      *(unsigned char *)(sub_1000097B0((uint64_t **)(v2 + 192), v7, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 88) = 1;
      uint64_t v15 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Initialize the fCurrentMode to %d", buf, 8u);
      }
      *(void *)long long buf = v7;
      **(unsigned char **)(sub_1000097B0((uint64_t **)(v2 + 192), v7, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 48) = 0;
      sub_100093AFC(*(void *)(v2 + 216), *v7);
    }
    else if (v9)
    {
      uint64_t v16 = (void *)(v2 + 200);
      do
      {
        unint64_t v17 = v9[4];
        BOOL v18 = v17 >= v6;
        if (v17 >= v6) {
          unsigned int v19 = v9;
        }
        else {
          unsigned int v19 = v9 + 1;
        }
        if (v18) {
          uint64_t v16 = v9;
        }
        BOOL v9 = (void *)*v19;
      }
      while (*v19);
      if (v16 != v8 && v6 >= v16[4])
      {
        *(void *)long long buf = a1 + 40;
        *(unsigned char *)(sub_1000097B0((uint64_t **)(v2 + 192), (unint64_t *)(a1 + 40), (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5]+ 88) = 0;
        *(void *)long long buf = a1 + 40;
        if (!*(unsigned char *)(sub_1000097B0((uint64_t **)(v2 + 192), (unint64_t *)(a1 + 40), (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5]+ 87))
        {
          *(void *)long long buf = a1 + 40;
          if (!*(unsigned char *)(sub_1000097B0((uint64_t **)(v2 + 192), (unint64_t *)(a1 + 40), (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5]+ 88))
          {
            *(void *)long long buf = a1 + 40;
            uint64_t v20 = (uint64_t *)sub_1000097B0((uint64_t **)(v2 + 192), (unint64_t *)(a1 + 40), (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5];
            if (v20)
            {
              sub_1005768E4(v20);
              operator delete();
            }
            sub_1000517A4(v2 + 192, (unint64_t *)(a1 + 40));
            if (qword_1009F8738 != -1) {
              dispatch_once(&qword_1009F8738, &stru_1009B5F18);
            }
            sub_10026F6F8(qword_1009F8730, *v7);
          }
        }
      }
    }
  }
}

void sub_10056612C()
{
}

void sub_100566158(uint64_t a1, uint64_t a2, __int16 a3, char a4)
{
  uint64_t v4 = *(NSObject **)(a1 + 232);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100565D14;
  block[3] = &unk_1009A2898;
  char v7 = a4;
  void block[4] = a1 - 24;
  void block[5] = a2;
  __int16 v6 = a3;
  dispatch_async(v4, block);
}

void sub_1005661D8(uint64_t a1, uint64_t a2, __int16 a3, char a4)
{
  uint64_t v4 = *(NSObject **)(a1 + 256);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100566254;
  block[3] = &unk_1009A2898;
  char v7 = a4;
  __int16 v6 = a3;
  void block[4] = a1;
  void block[5] = a2;
  dispatch_async(v4, block);
}

void sub_100566254(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = (int *)(v2 + 1176);
  int v4 = *(_DWORD *)(v2 + 1176);
  if (!v4)
  {
    notify_register_check("com.apple.bluetooth.WirelessSplitterOn", (int *)(v2 + 1176));
    int v4 = *v3;
  }
  uint64_t state64 = 0;
  notify_get_state(v4, &state64);
  int v5 = state64 & 1;
  __int16 v6 = (int *)(v2 + 1180);
  int v7 = *(_DWORD *)(v2 + 1180);
  if (v7 == -1)
  {
    notify_register_check("com.apple.bluetooth.GuestConnected", (int *)(v2 + 1180));
    int v7 = *v6;
  }
  uint64_t v52 = 0;
  notify_get_state(v7, &v52);
  char v8 = v52;
  if (*(unsigned char *)(a1 + 50))
  {
    if (!*(void *)(v2 + 1120)) {
      goto LABEL_18;
    }
    uint64_t v9 = *(void *)(v2 + 1112);
    if (!v9) {
      goto LABEL_18;
    }
    unsigned int v10 = *(unsigned __int16 *)(a1 + 48);
    uint64_t v11 = v2 + 1112;
    do
    {
      unsigned int v12 = *(unsigned __int16 *)(v9 + 32);
      BOOL v13 = v12 >= v10;
      if (v12 >= v10) {
        __int16 v14 = (uint64_t *)v9;
      }
      else {
        __int16 v14 = (uint64_t *)(v9 + 8);
      }
      if (v13) {
        uint64_t v11 = v9;
      }
      uint64_t v9 = *v14;
    }
    while (*v14);
    if (v11 == v2 + 1112 || v10 < *(unsigned __int16 *)(v11 + 32))
    {
LABEL_18:
      uint64_t v15 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = *(void *)(a1 + 40);
        if (v16)
        {
          sub_100474E18(v16, __p);
          if (v55 >= 0) {
            unint64_t v17 = __p;
          }
          else {
            unint64_t v17 = (void **)__p[0];
          }
          *(_DWORD *)long long buf = 136446210;
          __int16 v57 = (const char *)v17;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Wireless Splitter Mode is enabled for device %{public}s", buf, 0xCu);
          if (v55 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          *(_DWORD *)long long buf = 136446210;
          __int16 v57 = "null";
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Wireless Splitter Mode is enabled for device %{public}s", buf, 0xCu);
        }
      }
      sub_100566950(v2, *(void *)(a1 + 40), *(_WORD *)(a1 + 48));
    }
    int v37 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v38 = *(void *)(a1 + 40);
      if (v38)
      {
        sub_100474E18(v38, __p);
        if (v55 >= 0) {
          uint64_t v39 = __p;
        }
        else {
          uint64_t v39 = (void **)__p[0];
        }
        *(_DWORD *)long long buf = 136446210;
        __int16 v57 = (const char *)v39;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Wireless Splitter Mode is already enabled for device %{public}s", buf, 0xCu);
        if (v55 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        *(_DWORD *)long long buf = 136446210;
        __int16 v57 = "null";
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Wireless Splitter Mode is already enabled for device %{public}s", buf, 0xCu);
      }
    }
    __p[0] = (void *)(a1 + 48);
    unint64_t v43 = sub_1002CBD28((uint64_t **)(v2 + 1104), (unsigned __int16 *)(a1 + 48), (uint64_t)&unk_1007BE9D0, (_WORD **)__p);
    int v44 = *(unsigned __int8 *)(a1 + 50);
    if (*((unsigned __int8 *)v43[5] + 20) != v44
      && !sub_100566B1C((uint64_t)v43, *(void *)(a1 + 40), v44 != 0))
    {
      char v45 = *(unsigned char *)(a1 + 50);
      __p[0] = (void *)(a1 + 48);
      *((unsigned char *)sub_1002CBD28((uint64_t **)(v2 + 1104), (unsigned __int16 *)(a1 + 48), (uint64_t)&unk_1007BE9D0, (_WORD **)__p)[5]+ 20) = v45;
    }
    if (*(unsigned char *)(*(void *)(a1 + 40) + 960)) {
      BOOL v46 = (v8 & 1) == 0;
    }
    else {
      BOOL v46 = 1;
    }
    if (!v46)
    {
      __int16 v47 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "Wireless Splitter aggregation enabled setting fGuestConnectedToken to disabled", (uint8_t *)__p, 2u);
      }
      uint64_t v48 = 0;
LABEL_91:
      notify_set_state(*v6, v48);
      notify_post("com.apple.bluetooth.GuestConnected");
    }
  }
  else
  {
    BOOL v18 = (unsigned __int16 *)(a1 + 48);
    unsigned int v19 = (uint64_t *)(v2 + 1112);
    uint64_t v20 = *(void *)(v2 + 1112);
    if (v20)
    {
      unsigned int v21 = *v18;
      uint64_t v22 = v2 + 1112;
      do
      {
        unsigned int v23 = *(unsigned __int16 *)(v20 + 32);
        BOOL v24 = v23 >= v21;
        if (v23 >= v21) {
          BOOL v25 = (uint64_t *)v20;
        }
        else {
          BOOL v25 = (uint64_t *)(v20 + 8);
        }
        if (v24) {
          uint64_t v22 = v20;
        }
        uint64_t v20 = *v25;
      }
      while (*v25);
      if ((uint64_t *)v22 != v19 && v21 >= *(unsigned __int16 *)(v22 + 32))
      {
        __p[0] = (void *)(a1 + 48);
        unint64_t v26 = sub_1002CBD28((uint64_t **)(v2 + 1104), (unsigned __int16 *)(a1 + 48), (uint64_t)&unk_1007BE9D0, (_WORD **)__p);
        int v27 = *(unsigned __int8 *)(a1 + 50);
        if (*((unsigned __int8 *)v26[5] + 20) != v27
          && !sub_100566B1C((uint64_t)v26, *(void *)(a1 + 40), v27 != 0))
        {
          char v28 = *(unsigned char *)(a1 + 50);
          __p[0] = (void *)(a1 + 48);
          *((unsigned char *)sub_1002CBD28((uint64_t **)(v2 + 1104), (unsigned __int16 *)(a1 + 48), (uint64_t)&unk_1007BE9D0, (_WORD **)__p)[5]+ 20) = v28;
        }
      }
    }
    sub_100476B10(*(void *)(a1 + 40), 0);
    uint64_t v29 = *v19;
    if (!*v19) {
      goto LABEL_50;
    }
    unsigned int v30 = *v18;
    uint64_t v31 = v2 + 1112;
    do
    {
      unsigned int v32 = *(unsigned __int16 *)(v29 + 32);
      BOOL v33 = v32 >= v30;
      if (v32 >= v30) {
        char v34 = (uint64_t *)v29;
      }
      else {
        char v34 = (uint64_t *)(v29 + 8);
      }
      if (v33) {
        uint64_t v31 = v29;
      }
      uint64_t v29 = *v34;
    }
    while (*v34);
    if ((uint64_t *)v31 != v19 && v30 >= *(unsigned __int16 *)(v31 + 32))
    {
      uint64_t v40 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v41 = *(void *)(a1 + 40);
        if (v41)
        {
          sub_100474E18(v41, __p);
          if (v55 >= 0) {
            uint64_t v42 = __p;
          }
          else {
            uint64_t v42 = (void **)__p[0];
          }
          *(_DWORD *)long long buf = 136446210;
          __int16 v57 = (const char *)v42;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Wireless Splitter Mode is disabled for device %{public}s", buf, 0xCu);
          if (v55 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          *(_DWORD *)long long buf = 136446210;
          __int16 v57 = "null";
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Wireless Splitter Mode is disabled for device %{public}s", buf, 0xCu);
        }
      }
      std::string::assign((std::string *)(v2 + 1184), "WS_ERROR_DISCONNECTION_MODE_DISABLED");
      sub_100476B58(*(void *)(a1 + 40), 0);
      sub_100566BF4(v2, *(_WORD *)(a1 + 48));
    }
    else
    {
LABEL_50:
      std::string::assign((std::string *)(v2 + 1184), "WS_ERROR_DISCONNECTION_NO_DEVICE_FOR_HANDLE");
      sub_100566D14(v2);
      uint64_t v35 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        int v36 = *v18;
        LODWORD(__p[0]) = 67109120;
        HIDWORD(__p[0]) = v36;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Wireless Splitter device does not exists with handle %d, it's already deleted", (uint8_t *)__p, 8u);
      }
    }
    uint64_t v49 = *(unsigned __int8 *)(a1 + 50);
    if (v49 != v5)
    {
      notify_set_state(*v3, v49);
      notify_post("com.apple.bluetooth.WirelessSplitterOn");
    }
    if (*(unsigned char *)(*(void *)(a1 + 40) + 960)) {
      BOOL v50 = (v8 & 1) == 0;
    }
    else {
      BOOL v50 = 0;
    }
    if (v50)
    {
      std::string::assign((std::string *)(v2 + 1184), "WS_ERROR_START_AGGREGATION_DISABLED");
      sub_100566D14(v2);
      __int16 v51 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "Wireless Splitter aggregation disabled setting fGuestConnectedToken to enabled", (uint8_t *)__p, 2u);
      }
      uint64_t v48 = 1;
      goto LABEL_91;
    }
  }
  sub_10008CD0C(*(void *)(v2 + 216), 0, *(unsigned __int16 *)(a1 + 48));
}

void sub_100566950(uint64_t a1, uint64_t a2, __int16 a3)
{
  __int16 v8 = a3;
  if (*(void *)(a1 + 1120)) {
    __int16 v4 = 4096;
  }
  else {
    __int16 v4 = 2048;
  }
  sub_100476B58(a2, v4);
  int v7 = 0;
  *(void *)__val = 0;
  int v5 = 0;
  if (a2) {
    sub_10047B7A8(a2, &v7, &__val[1], __val, &v5);
  }
  operator new();
}

void sub_100566AF8()
{
}

uint64_t sub_100566B1C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2020000000;
  int v13 = 1;
  uint64_t v5 = sub_1004AFA9C();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1005712FC;
  v8[3] = &unk_1009B5D40;
  char v9 = a3;
  v8[4] = &v10;
  void v8[5] = a2;
  sub_1000197D8(v5, v8);
  uint64_t v6 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v6;
}

void sub_100566BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100566BF4(uint64_t a1, unsigned __int16 a2)
{
  unsigned __int16 v5 = a2;
  sub_10056438C(a1, 0);
  sub_100566D14(a1);
  *(void *)long long buf = &v5;
  if (sub_1002CBD28((uint64_t **)(a1 + 1104), &v5, (uint64_t)&unk_1007BE9D0, (_WORD **)buf)[5]) {
    operator delete();
  }
  sub_1003BA1D0(a1 + 1104, &v5);
  *(unsigned char *)(a1 + 1160) = 0;
  uint64_t v3 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 1120);
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v5;
    __int16 v7 = 2048;
    uint64_t v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Wireless Splitter destroying aggregate device with handle %hu fWirelessSplitterA2dpDevices devices %lu left", buf, 0x12u);
  }
}

void sub_100566D14(uint64_t a1)
{
  uint64_t v2 = sub_10003FFD4();
  sub_100471358(v2 + 728, a1 + 32);
  **(unsigned char **)(a1 + 216) = 1;
  if (*(void *)(a1 + 1128))
  {
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    uint64_t v4 = *(void *)(a1 + 1128);
    unint64_t v5 = *(void *)v4;
    LODWORD(v5) = *(_DWORD *)(v4 + 32);
    *(_DWORD *)(v4 + 32) = (Current - *(double *)v4 + (double)v5);
    if (qword_1009F8158 != -1) {
      dispatch_once(&qword_1009F8158, &stru_1009B5EF8);
    }
    uint64_t v6 = *(void *)(a1 + 1128);
    *(_DWORD *)(v6 + 36) += *((_DWORD *)off_1009F8150 + 52);
    if (*(char *)(v6 + 103) >= 0) {
      size_t v7 = *(unsigned __int8 *)(v6 + 103);
    }
    else {
      size_t v7 = *(void *)(v6 + 88);
    }
    memset(v41, 0, 24);
    uint64_t v8 = v41;
    sub_1002EA240((uint64_t)v41, v7 + 1);
    if (v41[23] < 0) {
      uint64_t v8 = *(unsigned char **)v41;
    }
    if (v7)
    {
      uint64_t v11 = *(char **)(v6 + 80);
      uint64_t v10 = (char *)(v6 + 80);
      char v9 = v11;
      if (v10[23] >= 0) {
        uint64_t v12 = v10;
      }
      else {
        uint64_t v12 = v9;
      }
      memmove(v8, v12, v7);
    }
    *(_WORD *)&v8[v7] = 45;
    uint64_t v13 = *(void *)(a1 + 1128);
    uint64_t v16 = *(const std::string::value_type **)(v13 + 104);
    uint64_t v14 = v13 + 104;
    uint64_t v15 = v16;
    int v17 = *(char *)(v14 + 23);
    if (v17 >= 0) {
      BOOL v18 = (const std::string::value_type *)v14;
    }
    else {
      BOOL v18 = v15;
    }
    if (v17 >= 0) {
      std::string::size_type v19 = *(unsigned __int8 *)(v14 + 23);
    }
    else {
      std::string::size_type v19 = *(void *)(v14 + 8);
    }
    uint64_t v20 = std::string::append((std::string *)v41, v18, v19);
    std::string::size_type v21 = v20->__r_.__value_.__r.__words[0];
    v58[0] = v20->__r_.__value_.__l.__size_;
    *(void *)((char *)v58 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
    char v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    uint64_t v23 = *(void *)(a1 + 1128);
    if (*(char *)(v23 + 151) < 0) {
      operator delete(*(void **)(v23 + 128));
    }
    uint64_t v24 = v58[0];
    *(void *)(v23 + 128) = v21;
    *(void *)(v23 + 136) = v24;
    *(void *)(v23 + 143) = *(void *)((char *)v58 + 7);
    *(unsigned char *)(v23 + 151) = v22;
    if ((v41[23] & 0x80000000) != 0) {
      operator delete(*(void **)v41);
    }
    std::string::operator=((std::string *)(*(void *)(a1 + 1128) + 152), (const std::string *)(a1 + 1184));
    uint64_t v25 = sub_100050530();
    (*(void (**)(uint64_t, void))(*(void *)v25 + 168))(v25, *(void *)(a1 + 1128));
    unint64_t v26 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v27 = *(void *)(a1 + 1128);
      char v28 = (void *)(v27 + 80);
      if (*(char *)(v27 + 103) < 0) {
        char v28 = (void *)*v28;
      }
      uint64_t v29 = (void *)(v27 + 104);
      if (*(char *)(v27 + 127) < 0) {
        uint64_t v29 = (void *)*v29;
      }
      unsigned int v30 = (void *)(v27 + 128);
      if (*(char *)(v27 + 151) < 0) {
        unsigned int v30 = (void *)*v30;
      }
      int v32 = *(_DWORD *)(v27 + 32);
      int v31 = *(_DWORD *)(v27 + 36);
      int v33 = *(_DWORD *)(v27 + 40);
      int v34 = *(_DWORD *)(v27 + 44);
      int v36 = *(_DWORD *)(v27 + 48);
      int v35 = *(_DWORD *)(v27 + 52);
      int v38 = *(_DWORD *)(v27 + 68);
      int v37 = *(_DWORD *)(v27 + 72);
      uint64_t v39 = (void *)(v27 + 152);
      if (*(char *)(v27 + 175) < 0) {
        uint64_t v39 = (void *)*v39;
      }
      *(_DWORD *)uint64_t v41 = 67111938;
      *(_DWORD *)&v41[4] = v32;
      *(_WORD *)&v41[8] = 1024;
      *(_DWORD *)&unsigned char v41[10] = v31;
      *(_WORD *)&v41[14] = 1024;
      *(_DWORD *)&v41[16] = v33;
      *(_WORD *)&v41[20] = 1024;
      *(_DWORD *)&v41[22] = v34;
      __int16 v42 = 1024;
      int v43 = v36;
      __int16 v44 = 1024;
      int v45 = v35;
      __int16 v46 = 1024;
      int v47 = v38;
      __int16 v48 = 1024;
      int v49 = v37;
      __int16 v50 = 2080;
      __int16 v51 = v28;
      __int16 v52 = 2080;
      char v53 = v29;
      __int16 v54 = 2080;
      char v55 = v30;
      __int16 v56 = 2080;
      __int16 v57 = v39;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Wireless Splitter submitting following metric: fTotalDurationSharingSession:%us fTotalSiriActivationDuringSession:%u Sessions fTotalIncomingCallsDuringSessio:%u Calls fTotalOutgoingCallsDuringSession:%u Calls fTotalMusicPlaybackDuration:%us fTotalVideoPlaybackDuration:%us fSharingSessionStart:%u [0:Owner,1:Prox,2:Boop,3:ReConn], fSharingSessionStop:%u, fOwnerWxProductID %s, fGuestWxProductID %s, fOwnerGuestWxProductID %s fErrorCode %s", v41, 0x5Au);
    }
    uint64_t v40 = *(void *)(a1 + 1128);
    if (v40)
    {
      if (*(char *)(v40 + 175) < 0) {
        operator delete(*(void **)(v40 + 152));
      }
      if (*(char *)(v40 + 151) < 0) {
        operator delete(*(void **)(v40 + 128));
      }
      if (*(char *)(v40 + 127) < 0) {
        operator delete(*(void **)(v40 + 104));
      }
      if (*(char *)(v40 + 103) < 0) {
        operator delete(*(void **)(v40 + 80));
      }
      operator delete();
    }
    *(void *)(a1 + 1128) = 0;
  }
}

void sub_100567088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005670AC(uint64_t a1, uint64_t a2, __int16 a3, char a4)
{
  uint64_t v4 = *(NSObject **)(a1 + 232);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100566254;
  block[3] = &unk_1009A2898;
  char v7 = a4;
  __int16 v6 = a3;
  void block[4] = a1 - 24;
  void block[5] = a2;
  dispatch_async(v4, block);
}

uint64_t sub_10056712C(uint64_t a1, int a2)
{
  return sub_10008F7B4(*(void *)(a1 + 216), a2);
}

uint64_t sub_100567134(uint64_t a1, int a2)
{
  return sub_100091F40(*(void *)(a1 + 216), a2);
}

void sub_10056713C(uint64_t a1, __int16 a2, char a3)
{
  uint64_t v3 = *(NSObject **)(a1 + 256);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_1005671B8;
  v4[3] = &unk_1009ACD50;
  v4[4] = a1;
  __int16 v5 = a2;
  char v6 = a3;
  dispatch_async(v3, v4);
}

void sub_1005671B8(uint64_t a1)
{
}

void sub_1005671D0(uint64_t a1, __int16 a2, char a3)
{
  uint64_t v3 = *(NSObject **)(a1 + 232);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_1005671B8;
  v4[3] = &unk_1009ACD50;
  v4[4] = a1 - 24;
  __int16 v5 = a2;
  char v6 = a3;
  dispatch_async(v3, v4);
}

uint64_t sub_100567250(uint64_t a1, int a2)
{
  return sub_10008F6D8(*(void *)(a1 + 216), a2);
}

void sub_100567258(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t v3 = *(NSObject **)(a1 + 256);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1005672D0;
  block[3] = &unk_1009988A0;
  void block[4] = a1;
  void block[5] = a2;
  __int16 v5 = a3;
  dispatch_async(v3, block);
}

void sub_1005672D0(uint64_t a1)
{
}

void sub_1005672E4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(NSObject **)(a1 + 256);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10056735C;
  block[3] = &unk_100998280;
  void block[4] = a1;
  void block[5] = a2;
  int v5 = a3;
  dispatch_async(v3, block);
}

uint64_t *sub_10056735C(uint64_t *result)
{
  uint64_t v1 = result[4];
  uint64_t v2 = *(void **)(v1 + 200);
  if (v2)
  {
    uint64_t v3 = result;
    double result = (uint64_t *)(v1 + 192);
    unint64_t v4 = v3[5];
    do
    {
      unint64_t v5 = v2[4];
      if (v4 >= v5)
      {
        if (v5 >= v4)
        {
          int v6 = *((_DWORD *)v3 + 12);
          char v7 = v3 + 5;
          double result = sub_1000097B0((uint64_t **)result, (unint64_t *)v3 + 5, (uint64_t)&unk_1007BE9D0, &v7);
          *(_DWORD *)(result[5] + 104) = v6;
          return result;
        }
        ++v2;
      }
      uint64_t v2 = (void *)*v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_1005673E4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  char v7 = &v6;
  uint64_t v8 = 0x2020000000;
  int v9 = 0;
  uint64_t v2 = *(NSObject **)(a1 + 256);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100567494;
  block[3] = &unk_100998860;
  void block[5] = a1;
  void block[6] = a2;
  void block[4] = &v6;
  dispatch_sync(v2, block);
  uint64_t v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t *sub_100567494(uint64_t *result)
{
  uint64_t v1 = result[5];
  uint64_t v2 = *(void **)(v1 + 200);
  if (v2)
  {
    uint64_t v3 = result;
    double result = (uint64_t *)(v1 + 192);
    unint64_t v4 = v3[6];
    do
    {
      unint64_t v5 = v2[4];
      if (v4 >= v5)
      {
        if (v5 >= v4)
        {
          uint64_t v6 = v3 + 6;
          double result = sub_1000097B0((uint64_t **)result, (unint64_t *)v3 + 6, (uint64_t)&unk_1007BE9D0, &v6);
          *(_DWORD *)(*(void *)(v3[4] + 8) + 24) = *(_DWORD *)(result[5] + 104);
          return result;
        }
        ++v2;
      }
      uint64_t v2 = (void *)*v2;
    }
    while (v2);
  }
  return result;
}

BOOL sub_100567524(uint64_t a1, unint64_t a2)
{
  return sub_10008F8A0(*(void *)(a1 + 216), a2);
}

uint64_t sub_10056752C(uint64_t a1, uint64_t a2)
{
  return sub_100092004(*(void *)(a1 + 216), a2);
}

void sub_100567534(uint64_t a1, __int16 a2, uint64_t a3)
{
  uint64_t v3 = *(NSObject **)(a1 + 256);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1005675AC;
  block[3] = &unk_1009988A0;
  void block[4] = a1;
  void block[5] = a3;
  __int16 v5 = a2;
  dispatch_async(v3, block);
}

void sub_1005675AC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = (unint64_t *)(a1 + 40);
  kdebug_trace();
  unint64_t v4 = sub_100567A58(v2, *(unsigned __int16 *)(a1 + 48));
  unint64_t v40 = v4;
  if (v4)
  {
    __int16 v5 = *(void **)(v2 + 200);
    if (v5)
    {
      uint64_t v6 = (uint64_t **)(v2 + 192);
      uint64_t v7 = v2 + 200;
      do
      {
        unint64_t v8 = v5[4];
        BOOL v9 = v8 >= v4;
        if (v8 >= v4) {
          uint64_t v10 = v5;
        }
        else {
          uint64_t v10 = v5 + 1;
        }
        if (v9) {
          uint64_t v7 = (uint64_t)v5;
        }
        __int16 v5 = (void *)*v10;
      }
      while (*v10);
      if (v7 != v2 + 200 && v4 >= *(void *)(v7 + 32))
      {
        *(void *)__int16 v42 = &v40;
        if (*(void *)sub_1000097B0(v6, &v40, (uint64_t)&unk_1007BE9D0, (uint64_t **)v42)[5])
        {
          *(void *)__int16 v42 = &v40;
          *(unsigned char *)(*(void *)sub_1000097B0(v6, &v40, (uint64_t)&unk_1007BE9D0, (uint64_t **)v42)[5] + 112) = 1;
          uint64_t v11 = mach_absolute_time();
          *(void *)__int16 v42 = &v40;
          *(void *)(*(void *)sub_1000097B0(v6, &v40, (uint64_t)&unk_1007BE9D0, (uint64_t **)v42)[5] + 120) = v11;
          *(void *)__int16 v42 = &v40;
          uint64_t v12 = sub_1000097B0(v6, &v40, (uint64_t)&unk_1007BE9D0, (uint64_t **)v42);
          unint64_t v13 = *v3;
          if (*v3 >= 0x33)
          {
            uint64_t v14 = *(void *)v12[5];
            unint64_t v15 = *(void *)(v14 + 504);
            ++*(void *)(v14 + 496);
            if (v15 < v13) {
              *(void *)(v14 + 504) = v13;
            }
          }
        }
        *(_OWORD *)__int16 v42 = 0u;
        long long v43 = 0u;
        time_t v39 = time(0);
        uint64_t v16 = localtime(&v39);
        strftime(v42, 0x20uLL, "%Y_%m_%d_%H:%M:%S", v16);
        if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
          sub_10077A334();
        }
        if (*v3 >= 0x1F && *(unsigned char *)(v2 + 998) && *(void *)(v2 + 1000) && !*(unsigned char *)(v2 + 999))
        {
          *(unsigned char *)(v2 + 999) = 1;
          int v17 = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 1uLL, 1);
          id v18 = objc_alloc((Class)NSString);
          std::string::size_type v19 = [v17 objectAtIndexedSubscript:0];
          id v20 = [v18 initWithFormat:@"%@/Logs/Bluetooth", v19];

          std::string::size_type v21 = +[NSString stringWithFormat:@"Overwait_A2DP_%s.tailspin", v42];
          char v22 = [v20 stringByAppendingPathComponent:v21];
          id v23 = [v22 copy];

          id v24 = v23;
          uint64_t v25 = (const char *)[v24 cStringUsingEncoding:4];
          unint64_t v26 = qword_100A19E48;
          if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
            sub_10077A2C4((uint64_t)v24, v26, v27);
          }
          if (v25)
          {
            uint64_t v28 = open(v25, 1537, 434);
            if ((v28 & 0x80000000) == 0)
            {
              uint64_t v29 = *(void *)(v2 + 256);
              v35[0] = _NSConcreteStackBlock;
              v35[1] = 3221225472;
              v35[2] = sub_100567C7C;
              v35[3] = &unk_1009B5CA0;
              uint64_t v37 = v2;
              id v30 = v20;
              id v36 = v30;
              int v38 = v28;
              sub_100567AC4(v28, v29, v35);

              return;
            }
            int v33 = qword_100A19E48;
            if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR))
            {
              int v34 = +[NSNumber numberWithInt:v28];
              sub_10077A274(v34, (uint64_t)v41, v33);
            }
          }
          else
          {
            int v31 = qword_100A19E48;
            if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
              sub_10077A204((uint64_t)v20, v31, v32);
            }
          }
        }
      }
    }
  }
}

void sub_1005679EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100567A58(uint64_t a1, int a2)
{
  uint64_t v2 = *(void **)(a1 + 192);
  uint64_t v3 = (void *)(a1 + 200);
  if (v2 == (void *)(a1 + 200)) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    int v5 = *(unsigned __int16 *)(v2[5] + 84);
    BOOL v6 = v5 != a2 || v5 == 0;
    if (!v6) {
      uint64_t result = v2[4];
    }
    uint64_t v7 = (void *)v2[1];
    if (v7)
    {
      do
      {
        unint64_t v8 = v7;
        uint64_t v7 = (void *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        unint64_t v8 = (void *)v2[2];
        BOOL v6 = *v8 == (void)v2;
        uint64_t v2 = v8;
      }
      while (!v6);
    }
    uint64_t v2 = v8;
  }
  while (v8 != v3);
  return result;
}

void sub_100567AC4(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2020000000;
  BOOL v6 = (void (*)(uint64_t, _UNKNOWN **, uint64_t, id))off_100A13928;
  unint64_t v13 = off_100A13928;
  if (!off_100A13928)
  {
    uint64_t v7 = sub_100576BEC();
    uint64_t v11[3] = (uint64_t)dlsym(v7, "tailspin_dump_output_with_options");
    off_100A13928 = (_UNKNOWN *)v11[3];
    BOOL v6 = (void (*)(uint64_t, _UNKNOWN **, uint64_t, id))v11[3];
  }
  _Block_object_dispose(&v10, 8);
  if (v6)
  {
    v6(a1, &off_1009E17F8, a2, v5);
  }
  else
  {
    unint64_t v8 = +[NSAssertionHandler currentHandler];
    BOOL v9 = +[NSString stringWithUTF8String:"int BT::soft_tailspin_dump_output_with_options(int, NSDictionary * _Nullable __strong, dispatch_queue_t _Nullable, void (^ _Nullable __strong)(BOOL))"];
    [v8 handleFailureInFunction:v9 file:@"AudioLinkManager.mm" lineNumber:131 description:@"%s", dlerror()];

    __break(1u);
  }
}

void sub_100567C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_100567C7C(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    if (a2) {
      BOOL v6 = "successfully";
    }
    else {
      BOOL v6 = "not successfully";
    }
    id v7 = [*(id *)(a1 + 32) UTF8String];
    int v9 = 136315394;
    uint64_t v10 = v6;
    __int16 v11 = 2080;
    id v12 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Captured tailspin %s at %s", (uint8_t *)&v9, 0x16u);
  }
  *(unsigned char *)(v4 + 999) = 0;
  return close(*(_DWORD *)(a1 + 48));
}

void sub_100567D6C(uint64_t a1, __int16 a2, uint64_t a3)
{
  uint64_t v3 = *(NSObject **)(a1 + 232);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1005675AC;
  block[3] = &unk_1009988A0;
  void block[4] = a1 - 24;
  void block[5] = a3;
  __int16 v5 = a2;
  dispatch_async(v3, block);
}

void sub_100567DE8(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  __int16 v5 = *(NSObject **)(a1 + 256);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100567E64;
  v6[3] = &unk_1009AA618;
  int v7 = a4;
  int v8 = a3;
  void v6[4] = a1;
  void v6[5] = a2;
  int v9 = a5;
  dispatch_async(v5, v6);
}

uint64_t sub_100567E64(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 32);
  int v3 = *(_DWORD *)(result + 48);
  if (v3 <= 100)
  {
    if (v3 != 11)
    {
      if (v3 == 12)
      {
        int v4 = *(_DWORD *)(result + 52);
        if (v4 == 1) {
          goto LABEL_10;
        }
        if (v4 == 16 && *(unsigned char *)(*(void *)(result + 40) + 960))
        {
          __int16 v5 = qword_100A19E48;
          if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)id v23 = 0;
            _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Wireless Splitter guest device disconnected setting fGuestConnectedToken to disabled", v23, 2u);
          }
          std::string::assign((std::string *)(v2 + 1184), "WS_ERROR_DISCONNECTION_GUEST_DISCONNECTED");
          sub_100566D14(v2);
          notify_set_state(*(_DWORD *)(v2 + 1180), 0);
          notify_post("com.apple.bluetooth.GuestConnected");
          if (*(_DWORD *)(v1 + 52) == 1)
          {
LABEL_10:
            int v6 = *(_DWORD *)(v2 + 1048);
            if (v6 == -1)
            {
              int v7 = (int *)(v2 + 1048);
              notify_register_check("com.apple.bluetooth.SmartRoutingDisconnectReason", v7);
              int v6 = *v7;
            }
            int v8 = *(unsigned __int8 **)(v1 + 40);
            notify_set_state(v6, ((unint64_t)v8[128] << 40) | ((unint64_t)v8[129] << 32) | ((unint64_t)v8[130] << 24) | ((unint64_t)v8[131] << 16) | ((unint64_t)v8[132] << 8) | v8[133] | ((unint64_t)*(unsigned int *)(v1 + 56) << 48));
            notify_post("com.apple.bluetooth.SmartRoutingDisconnectReason");
          }
        }
        uint64_t result = *(void *)(v1 + 40);
        if (*(unsigned char *)(result + 1371) != 1) {
          return sub_10048DDE0(result, 1);
        }
      }
      return result;
    }
    int v9 = *(_DWORD *)(result + 52);
    if (v9 == 1)
    {
      if (*(void *)(v2 + 1120) < 2uLL || (uint64_t v10 = *(void **)(v2 + 1104), v10 == (void *)(v2 + 1112)))
      {
        int v9 = 1;
LABEL_52:
        id v18 = *(unsigned __int8 **)(v1 + 40);
        BOOL v19 = v9 != 1 || v18 == 0;
        if (!v19)
        {
          uint64_t v20 = ((unint64_t)v18[128] << 40) | ((unint64_t)v18[129] << 32) | ((unint64_t)v18[130] << 24) | ((unint64_t)v18[131] << 16) | ((unint64_t)v18[132] << 8) | v18[133];
          int v21 = *(_DWORD *)(v2 + 1048);
          if (v21 == -1)
          {
            char v22 = (int *)(v2 + 1048);
            notify_register_check("com.apple.bluetooth.SmartRoutingDisconnectReason", v22);
            int v21 = *v22;
          }
          notify_set_state(v21, v20);
          return notify_post("com.apple.bluetooth.SmartRoutingDisconnectReason");
        }
        return result;
      }
      do
      {
        uint64_t v11 = *(void *)(v1 + 40);
        if (v11)
        {
          id v12 = (unsigned __int8 *)v10[5];
          if (*((void *)v12 + 1) == v11 + 128)
          {
            int v13 = *v12;
            if (v12[20] != v13)
            {
              uint64_t result = sub_100566B1C(result, v11, v13 != 0);
              v12[20] = *v12;
            }
          }
        }
        uint64_t v14 = (void *)v10[1];
        if (v14)
        {
          do
          {
            unint64_t v15 = v14;
            uint64_t v14 = (void *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            unint64_t v15 = (void *)v10[2];
            BOOL v19 = *v15 == (void)v10;
            uint64_t v10 = v15;
          }
          while (!v19);
        }
        uint64_t v10 = v15;
      }
      while (v15 != (void *)(v2 + 1112));
      int v9 = *(_DWORD *)(v1 + 52);
    }
    if (v9 == 16)
    {
      if (*(unsigned char *)(*(void *)(v1 + 40) + 960) && *(void *)(v2 + 1120) != 2)
      {
        uint64_t v16 = qword_100A19E48;
        if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Wireless Splitter connected guest device setting fGuestConnectedToken to enabled", buf, 2u);
        }
        notify_set_state(*(_DWORD *)(v2 + 1180), 1uLL);
        return notify_post("com.apple.bluetooth.GuestConnected");
      }
      return result;
    }
    goto LABEL_52;
  }
  if (v3 == 101)
  {
    if (*(void *)(v2 + 1120) >= 2uLL && *(void *)(v2 + 1128))
    {
      if (qword_1009FB058 != -1) {
        dispatch_once(&qword_1009FB058, &stru_1009B5E58);
      }
      uint64_t result = sub_100512018((uint64_t)off_1009FB050, *(void *)(v1 + 40));
      if (result)
      {
        uint64_t result = sub_10027671C(result + 400);
        uint64_t v17 = *(void *)(v2 + 1128);
        if (result) {
          ++*(_DWORD *)(v17 + 40);
        }
        else {
          ++*(_DWORD *)(v17 + 44);
        }
      }
    }
  }
  else if (v3 == 103 && *(void *)(v2 + 1120) >= 2uLL && *(void *)(v2 + 1128))
  {
    if (qword_1009FB058 != -1) {
      dispatch_once(&qword_1009FB058, &stru_1009B5E58);
    }
    uint64_t result = sub_100512018((uint64_t)off_1009FB050, *(void *)(v1 + 40));
    if (result)
    {
      uint64_t result = sub_1002765DC(result + 400);
      if (result) {
        ++*(_DWORD *)(*(void *)(v2 + 1128) + 36);
      }
    }
  }
  return result;
}

void sub_1005682A8(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  __int16 v5 = *(NSObject **)(a1 + 216);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100567E64;
  v6[3] = &unk_1009AA618;
  int v7 = a4;
  int v8 = a3;
  void v6[4] = a1 - 40;
  void v6[5] = a2;
  int v9 = a5;
  dispatch_async(v5, v6);
}

void sub_100568328(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 256);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10056839C;
  block[3] = &unk_100997528;
  void block[4] = a1;
  dispatch_async(v1, block);
}

void sub_10056839C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(unsigned __int16 **)(v1 + 1104);
  int v3 = (unsigned __int16 *)(v1 + 1112);
  if (v2 != (unsigned __int16 *)(v1 + 1112))
  {
    do
    {
      if (qword_1009F7F00 != -1) {
        dispatch_once(&qword_1009F7F00, &stru_1009B5F38);
      }
      uint64_t v4 = *(void *)(*((void *)v2 + 5) + 8);
      __int16 v5 = *(_WORD *)(v4 + 4);
      *(_DWORD *)long long buf = *(_DWORD *)v4;
      *(_WORD *)&uint8_t buf[4] = v5;
      uint64_t v6 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)buf, 1);
      if (v6)
      {
        uint64_t v7 = v6;
        sub_100566B1C(v6, v6, 0);
        uint64_t v8 = *(void *)(v1 + 1128);
        if (v8 && *(unsigned char *)(v7 + 960)) {
          *(_DWORD *)(v8 + 72) = *(_DWORD *)(v7 + 980);
        }
        sub_100476B10(v7, 0);
      }
      sub_100566D14(v1);
      *(void *)long long buf = v2 + 16;
      if (sub_1002CBD28((uint64_t **)(v1 + 1104), v2 + 16, (uint64_t)&unk_1007BE9D0, (_WORD **)buf)[5]) {
        operator delete();
      }
      int v9 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = v2[16];
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Wireless Splitter destroying aggregate device with handle %hu", buf, 8u);
      }
      uint64_t v11 = (unsigned __int16 *)*((void *)v2 + 1);
      if (v11)
      {
        do
        {
          id v12 = v11;
          uint64_t v11 = *(unsigned __int16 **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          id v12 = (unsigned __int16 *)*((void *)v2 + 2);
          BOOL v13 = *(void *)v12 == (void)v2;
          uint64_t v2 = v12;
        }
        while (!v13);
      }
      uint64_t v2 = v12;
    }
    while (v12 != v3);
  }
  *(unsigned char *)(v1 + 1160) = 0;
  sub_1000486F0(v1 + 1104, *(void **)(v1 + 1112));
  *(void *)(v1 + 1104) = v3;
  *(_OWORD *)int v3 = 0u;
  uint64_t v14 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Wireless Splitter size of fWirelessSplitterA2dpDevices %lu ", buf, 0xCu);
  }
}

void sub_100568600(uint64_t a1)
{
  uint64_t v1 = a1 - 24;
  uint64_t v2 = *(NSObject **)(a1 + 232);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10056839C;
  block[3] = &unk_100997528;
  void block[4] = v1;
  dispatch_async(v2, block);
}

void sub_100568674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(NSObject **)(a1 + 256);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1005686EC;
  block[3] = &unk_1009A12D0;
  void block[4] = a1;
  void block[5] = a2;
  void block[6] = a3;
  dispatch_async(v3, block);
}

uint64_t *sub_1005686EC(uint64_t *result)
{
  uint64_t v2 = (unint64_t *)(result + 5);
  unint64_t v1 = result[5];
  if (v1)
  {
    uint64_t v3 = result[4];
    uint64_t v6 = *(void **)(v3 + 200);
    uint64_t v4 = v3 + 200;
    __int16 v5 = v6;
    if (v6)
    {
      uint64_t v7 = result;
      uint64_t v8 = (uint64_t **)(v4 - 8);
      int v9 = (void *)v4;
      do
      {
        unint64_t v10 = v5[4];
        BOOL v11 = v10 >= v1;
        if (v10 >= v1) {
          id v12 = v5;
        }
        else {
          id v12 = v5 + 1;
        }
        if (v11) {
          int v9 = v5;
        }
        __int16 v5 = (void *)*v12;
      }
      while (*v12);
      if (v9 != (void *)v4 && v1 >= v9[4])
      {
        *(void *)long long buf = result + 5;
        if (*(unsigned char *)(sub_1000097B0(v8, v2, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 56)
          || (*(void *)long long buf = v2,
              *(_DWORD *)(sub_1000097B0(v8, v2, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 64) == 1))
        {
          *(void *)long long buf = v2;
          *(unsigned char *)(sub_1000097B0(v8, v2, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 70) = 1;
        }
        *(void *)long long buf = v2;
        uint64_t result = sub_1000097B0(v8, v2, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
        if (*(void *)result[5])
        {
          *(void *)long long buf = v2;
          BOOL v13 = sub_1000097B0(v8, v2, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
          ++*(_DWORD *)(*(void *)v13[5] + 316);
          *(void *)long long buf = v2;
          uint64_t result = sub_1000097B0(v8, v2, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
          if (*(void *)(*(void *)result[5] + 80) <= (unint64_t)v7[6])
          {
            *(void *)long long buf = v2;
            *(void *)(*(void *)sub_1000097B0(v8, v2, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 80) = v7[6] + 60000000;
            char v15 = 0;
            sub_10003FB34();
            if (sub_100350F3C())
            {
              *(void *)long long buf = v2;
              char v15 = *(unsigned char *)(*(void *)sub_1000097B0(v8, v2, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 388);
            }
            else
            {
              uint64_t v14 = sub_10003FB34();
              (*(void (**)(uint64_t, unint64_t, char *))(*(void *)v14 + 312))(v14, *v2 + 128, &v15);
            }
            *(void *)long long buf = v2;
            sub_1000097B0(v8, v2, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
            sub_100568BE8();
          }
        }
      }
    }
  }
  return result;
}

void sub_100568BE8()
{
}

float sub_100568CF4(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 272) * a2 / *(unsigned int *)(a1 + 276) / 0x3E8;
  if (!a3)
  {
    float v5 = (float)v3;
    float v6 = 1000000.0;
    return v5 / v6;
  }
  if (a3 == 1)
  {
    float v5 = (float)v3;
    float v6 = 1000.0;
    return v5 / v6;
  }
  float result = 0.0;
  if (a3 == 2) {
    return (float)v3;
  }
  return result;
}

void sub_100568D64(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_10004191C((void *)a2, "Audio");
  uint64_t v4 = *(unsigned char **)(a1 + 216);
  if (v4[8])
  {
    std::string::assign((std::string *)a2, "Video");
    uint64_t v4 = *(unsigned char **)(a1 + 216);
  }
  if (v4[7])
  {
    std::string::assign((std::string *)a2, "Audio");
    uint64_t v4 = *(unsigned char **)(a1 + 216);
  }
  if (v4[5])
  {
    std::string::assign((std::string *)a2, "Game");
    uint64_t v4 = *(unsigned char **)(a1 + 216);
  }
  if (v4[3])
  {
    std::string::assign((std::string *)a2, "VoiceOver");
    uint64_t v4 = *(unsigned char **)(a1 + 216);
  }
  if (v4[2]) {
    std::string::assign((std::string *)a2, "GarageBand");
  }
  float v5 = (unsigned __int16 **)(a1 + 1080);
  int v6 = *(unsigned __int8 *)(a1 + 1103);
  if ((*(char *)(a1 + 1103) & 0x80000000) == 0)
  {
    uint64_t v7 = (unsigned __int16 *)(a1 + 1080);
    if (v6 != 3) {
      goto LABEL_20;
    }
LABEL_16:
    int v8 = *v7;
    int v9 = *((unsigned __int8 *)v7 + 2);
    if (v8 == 26191 && v9 == 102) {
      goto LABEL_40;
    }
    goto LABEL_20;
  }
  if (*(void *)(a1 + 1088) == 3)
  {
    uint64_t v7 = *v5;
    goto LABEL_16;
  }
LABEL_20:
  if ((v6 & 0x80u) == 0) {
    size_t v11 = *(unsigned __int8 *)(a1 + 1103);
  }
  else {
    size_t v11 = *(void *)(a1 + 1088);
  }
  memset(&__p, 0, sizeof(__p));
  p_p = &__p;
  sub_1002EA240((uint64_t)&__p, v11 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v11)
  {
    if (*(char *)(a1 + 1103) >= 0) {
      BOOL v13 = (const void *)(a1 + 1080);
    }
    else {
      BOOL v13 = *(const void **)(a1 + 1080);
    }
    memmove(p_p, v13, v11);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v11) = 32;
  int v14 = *(char *)(a2 + 23);
  if (v14 >= 0) {
    char v15 = (const std::string::value_type *)a2;
  }
  else {
    char v15 = *(const std::string::value_type **)a2;
  }
  if (v14 >= 0) {
    std::string::size_type v16 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v16 = *(void *)(a2 + 8);
  }
  uint64_t v17 = std::string::append(&__p, v15, v16);
  std::string::size_type v18 = v17->__r_.__value_.__r.__words[0];
  *(void *)&long long v29 = v17->__r_.__value_.__l.__size_;
  *(void *)((char *)&v29 + 7) = *(std::string::size_type *)((char *)&v17->__r_.__value_.__r.__words[1] + 7);
  char v19 = HIBYTE(v17->__r_.__value_.__r.__words[2]);
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(void *)a2 = v18;
  *(void *)(a2 + 8) = v29;
  *(void *)(a2 + 15) = *(void *)((char *)&v29 + 7);
  *(unsigned char *)(a2 + 23) = v19;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_40:
  if (!*(unsigned char *)(*(void *)(a1 + 216) + 5)) {
    return;
  }
  memset(&__p, 0, sizeof(__p));
  sub_10004191C(&__p, "Game");
  int v20 = *(char *)(a1 + 1103);
  if (v20 < 0)
  {
    if (*(void *)(a1 + 1088) != 3) {
      goto LABEL_50;
    }
    int v21 = *v5;
  }
  else
  {
    int v21 = (unsigned __int16 *)(a1 + 1080);
    if (v20 != 3) {
      goto LABEL_50;
    }
  }
  int v22 = *v21;
  int v23 = *((unsigned __int8 *)v21 + 2);
  if (v22 != 26191 || v23 != 102)
  {
LABEL_50:
    std::operator+<char>();
    if ((v30 & 0x80u) == 0) {
      uint64_t v25 = (const std::string::value_type *)&v29;
    }
    else {
      uint64_t v25 = (const std::string::value_type *)v29;
    }
    if ((v30 & 0x80u) == 0) {
      std::string::size_type v26 = v30;
    }
    else {
      std::string::size_type v26 = *((void *)&v29 + 1);
    }
    std::string::append(&__p, v25, v26);
    if ((char)v30 < 0) {
      operator delete((void *)v29);
    }
  }
  uint64_t v27 = *(unsigned char **)(a1 + 216);
  if (v27[7])
  {
    std::string::append(&__p, " + Audio");
    uint64_t v27 = *(unsigned char **)(a1 + 216);
  }
  if (v27[8])
  {
    std::string::append(&__p, " + Video");
    uint64_t v27 = *(unsigned char **)(a1 + 216);
  }
  if (v27[2])
  {
    std::string::append(&__p, " + GarageBand");
    uint64_t v27 = *(unsigned char **)(a1 + 216);
  }
  if (v27[3]) {
    std::string::append(&__p, " + VoiceOver");
  }
  std::string::operator=((std::string *)a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1005690D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

void sub_100569134(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v3 = *(NSObject **)(a1 + 256);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1005691AC;
  block[3] = &unk_100998280;
  int v5 = a3;
  void block[4] = a1;
  void block[5] = a2;
  dispatch_async(v3, block);
}

uint64_t *sub_1005691AC(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 48);
  unint64_t v3 = *(uint64_t **)(a1 + 32);
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009B5E18);
  }
  *((_DWORD *)off_1009F80A8 + 58) = v2;
  *((void *)off_1009F80A8 + 23) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
    sub_10077A3A8();
  }
  sub_100561280((uint64_t)v3, *(void *)(a1 + 40), 0);
  return sub_100558290(v3, *(void *)(a1 + 40));
}

uint64_t sub_100569264(uint64_t a1, uint64_t a2)
{
  uint64_t result = _os_feature_enabled_impl();
  if (result)
  {
    uint64_t v4 = sub_100478B2C(a2, 12);
    if ((v4 & 1) != 0 || (uint64_t result = sub_1005617A4(v4, a2), result))
    {
      return notify_post("com.apple.bluetooth.audioQuality");
    }
  }
  return result;
}

uint64_t sub_1005692DC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, int a6)
{
  int v6 = *(NSObject **)(a1 + 256);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100569360;
  block[3] = &unk_1009B5CC0;
  void block[4] = a1;
  void block[5] = a2;
  int v9 = a6;
  char v10 = a4;
  void block[6] = a3;
  void block[7] = a5;
  dispatch_async(v6, block);
  return 0;
}

void sub_100569360(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009B5F38);
  }
  uint64_t v3 = sub_100030F10((uint64_t)off_1009F7EF8, *(void *)(a1 + 40), 0);
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_1009B5EF8);
  }
  int v4 = *(_DWORD *)(a1 + 64);
  if (*(unsigned char *)(a1 + 68))
  {
    int v5 = *((unsigned __int8 *)off_1009F8150 + 197);
    if (sub_100569640(v2, *(void *)(a1 + 40), *(void *)(a1 + 48)))
    {
      uint64_t v6 = *(void *)(v2 + 896);
      uint64_t v7 = *(std::__shared_weak_count **)(v2 + 904);
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v8 = v6 != 0;
      if (v6)
      {
        sub_1002ED9D8(v6, *(void *)(a1 + 56));
        int v9 = qword_100A19E48;
        if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
        {
          char v10 = "Yes";
          int v11 = *(unsigned __int8 *)(v6 + 77);
          if (!v5) {
            char v10 = "No";
          }
          int v15 = 136315394;
          std::string::size_type v16 = v10;
          __int16 v17 = 1024;
          int v18 = v11;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Stream Status %s  Already Running %d ", (uint8_t *)&v15, 0x12u);
        }
        if (!*(unsigned char *)(v6 + 77) || (v4 - 1) <= 1) {
          sub_1002EC7A4(v6, v3, 1, *(_DWORD *)(a1 + 64));
        }
      }
      goto LABEL_23;
    }
    int v8 = 0;
  }
  else
  {
    uint64_t v12 = *(void *)(v2 + 896);
    uint64_t v7 = *(std::__shared_weak_count **)(v2 + 904);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v12)
    {
      if ((v4 - 1) <= 1) {
        sub_1002EC7A4(v12, v3, 0, *(_DWORD *)(a1 + 64));
      }
      sub_100052718(v12 + 128, *(void *)(a1 + 56));
      int v8 = sub_1005697A0(v2, *(void *)(a1 + 40), *(void *)(a1 + 48));
LABEL_23:
      if (!v7) {
        goto LABEL_26;
      }
      goto LABEL_24;
    }
    int v8 = 0;
    if (v7) {
LABEL_24:
    }
      sub_10008A294(v7);
  }
LABEL_26:
  BOOL v13 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = "Enable";
    if (!*(unsigned char *)(a1 + 68)) {
      int v14 = "Disable";
    }
    int v15 = 136315394;
    std::string::size_type v16 = v14;
    __int16 v17 = 1024;
    int v18 = v8;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Enable/Disable Remote Timesync operation %s: Status %x ", (uint8_t *)&v15, 0x12u);
  }
}

void sub_100569624(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10008A294(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100569640(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result = sub_100569954();
  if (result)
  {
    char v7 = 0;
    if (!*(void *)(a1 + 896)) {
      operator new();
    }
    return sub_1002EBAA8(*(void *)(a1 + 896), a2, a3, &v7);
  }
  return result;
}

void sub_100569748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_10008A294(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100569780@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 904);
  *a2 = *(void *)(result + 896);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_1005697A0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (!sub_100569954()) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 896);
  char v7 = *(std::__shared_weak_count **)(a1 + 904);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v6) {
    goto LABEL_22;
  }
  char v17 = 0;
  if (!sub_1002EC2C8(v6, a2, a3, &v17))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
      sub_10077A414();
    }
LABEL_22:
    uint64_t v12 = 0;
    if (!v7) {
      return v12;
    }
LABEL_23:
    sub_10008A294(v7);
    return v12;
  }
  if (v17) {
    goto LABEL_22;
  }
  int v8 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Deleting  mBTTimeSyncManager", buf, 2u);
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B5E38);
  }
  int v9 = off_1009F8068;
  char v10 = *(std::__shared_weak_count **)(a1 + 904);
  uint64_t v14 = *(void *)(a1 + 896);
  int v15 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1005773C8((uint64_t)v9 + 96, &v14);
  if (v15) {
    sub_10008A294(v15);
  }
  int v11 = *(std::__shared_weak_count **)(a1 + 904);
  *(_OWORD *)(a1 + 896) = 0u;
  if (v11) {
    sub_10008A294(v11);
  }
  uint64_t v12 = 1;
  if (v7) {
    goto LABEL_23;
  }
  return v12;
}

void sub_100569928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10008A294(a10);
  }
  if (v10) {
    sub_10008A294(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100569954()
{
  uint64_t v0 = sub_100017768();
  if ((*(uint64_t (**)(uint64_t))(*(void *)v0 + 528))(v0)) {
    return 0;
  }
  sub_10003FB34();
  if (sub_100351A24()) {
    return 1;
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)sub_100035F54() + 792);

  return v2();
}

void sub_1005699FC(uint64_t a1, uint64_t a2)
{
  sub_1005782DC(&v2, a2);
}

uint64_t sub_100569A44()
{
  uint64_t result = sub_100569954();
  if (result)
  {
    sub_10003FB34();
    if (sub_100351A24()) {
      return 1;
    }
    else {
      return 2;
    }
  }
  return result;
}

uint64_t sub_100569A74(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v10 = 0;
  int v11 = &v10;
  uint64_t v12 = 0x2020000000;
  unint64_t v3 = ((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133];
  uint64_t v13 = TSNullClockIdentifier;
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009B5E18);
  }
  int v4 = *((void *)off_1009F80A8 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100569C18;
  block[3] = &unk_100998860;
  void block[5] = a1;
  void block[6] = v3;
  void block[4] = &v10;
  dispatch_sync(v4, block);
  int v5 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = v11[3];
    *(_DWORD *)long long buf = 134217984;
    uint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Reference Timestamp ID: %llx ", buf, 0xCu);
  }
  uint64_t v7 = v11[3];
  _Block_object_dispose(&v10, 8);
  return v7;
}

void sub_100569C18(void *a1)
{
  uint64_t v2 = a1[5];
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009B5F38);
  }
  unint64_t v3 = a1 + 6;
  int v4 = (unsigned __int8 *)sub_100030F10((uint64_t)off_1009F7EF8, a1[6], 0);
  if (v4)
  {
    uint64_t v5 = *(void *)(v2 + 896);
    uint64_t v6 = *(std::__shared_weak_count **)(v2 + 904);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v5) {
      sub_1002ED154(v5, (void *)(*(void *)(a1[4] + 8) + 24), ((unint64_t)v4[128] << 40) | ((unint64_t)v4[129] << 32) | ((unint64_t)v4[130] << 24) | ((unint64_t)v4[131] << 16) | ((unint64_t)v4[132] << 8) | v4[133]);
    }
    if (v6)
    {
      sub_10008A294(v6);
    }
  }
  else
  {
    uint64_t v7 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
      sub_10077A448(v3, v7, v8);
    }
  }
}

void sub_100569D3C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10008A294(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100569D54(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1[112];
  int v4 = (std::__shared_weak_count *)a1[113];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a1[32];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3321888768;
  void v6[2] = sub_100569E10;
  v6[3] = &unk_1009B5CE0;
  void v6[4] = v3;
  uint64_t v7 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = a2;
  uint64_t v9 = a3;
  dispatch_async(v5, v6);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_100569E10(uint64_t *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = a1[4];
      if (v4)
      {
        if (sub_1002EE578(a1[4]))
        {
          sub_1002EB630(v4, a1[6], a1[7], 0);
          sub_1002EE4FC(v4);
LABEL_10:
          sub_10008A294(v3);
          return;
        }
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v5 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Legacy timesync trigger ended", v6, 2u);
  }
  if (v3) {
    goto LABEL_10;
  }
}

void sub_100569ED8(_Unwind_Exception *a1)
{
  sub_10008A294(v1);
  _Unwind_Resume(a1);
}

void sub_100569EEC(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    if (*(unsigned char *)(*(void *)(a1 + 32) + 344))
    {
      char v3 = 0;
      sub_10001B8E0(&v3);
      sub_10018F0E8((uint64_t)sub_100569FC0, *(void *)(a1 + 40) + 128);
      sub_10001B910(&v3);
      sub_10001B8AC(&v3);
    }
    else
    {
      uint64_t v2 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Stack is not running. So, cannot issue the readLocalBTClock command", buf, 2u);
      }
    }
  }
}

void sub_100569FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_100569FC0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009B5E18);
  }
  uint64_t v4 = off_1009F80A8;
  uint64_t v5 = mach_absolute_time();

  sub_100569D54(v4, v5, 312500 * a3);
}

uint64_t sub_10056A038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2
    && (char v15 = 0,
        sub_10001B8E0(&v15),
        int v11 = (unsigned __int16 *)sub_100197A30(a2 + 128),
        sub_10001B910(&v15),
        sub_10001B8AC(&v15),
        v11))
  {
    uint64_t v12 = *v11;
  }
  else
  {
    uint64_t v12 = 0xFFFFLL;
  }
  uint64_t v13 = sub_10003FB34();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v13 + 1600))(v13, a3, a4, v12, a5, a6);
}

void sub_10056A100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_10056A114(uint64_t a1)
{
  unint64_t v1 = *(NSObject **)(a1 + 256);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10056A188;
  block[3] = &unk_100997528;
  void block[4] = a1;
  dispatch_async(v1, block);
}

uint64_t sub_10056A188(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(a1 + 32) + 880);
  if (result) {
    return sub_10061DBFC(result);
  }
  return result;
}

void sub_10056A19C(uint64_t a1, char a2, char a3, char a4, const void *a5, size_t size)
{
  char v6 = size;
  uint64_t v19 = 0;
  int v20 = &v19;
  uint64_t v21 = 0x2020000000;
  int v22 = 0;
  size_t v12 = size;
  int v22 = malloc_type_malloc(size, 0x7A703064uLL);
  memcpy((void *)v20[3], a5, v12);
  uint64_t v13 = *(NSObject **)(a1 + 256);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10056A2A4;
  block[3] = &unk_1009B5D18;
  char v15 = a2;
  char v16 = a3;
  char v17 = a4;
  void block[4] = &v19;
  void block[5] = a1;
  char v18 = v6;
  dispatch_async(v13, block);
  _Block_object_dispose(&v19, 8);
}

void sub_10056A2A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 880);
  if (v2) {
    sub_10061DDB4(v2, *(unsigned __int8 *)(a1 + 48), *(unsigned __int8 *)(a1 + 49), *(unsigned char *)(a1 + 50), *(uint64_t **)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
  }
  char v3 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);

  free(v3);
}

unint64_t sub_10056A30C(uint64_t a1, int a2, float a3)
{
  unint64_t result = sub_100567A58(a1, a2);
  unint64_t v15 = result;
  if (result)
  {
    uint64_t v8 = *(void **)(a1 + 200);
    uint64_t v7 = a1 + 200;
    char v6 = v8;
    if (v8)
    {
      uint64_t v9 = (uint64_t **)(v7 - 8);
      uint64_t v10 = (void *)v7;
      do
      {
        unint64_t v11 = v6[4];
        BOOL v12 = v11 >= result;
        if (v11 >= result) {
          uint64_t v13 = v6;
        }
        else {
          uint64_t v13 = v6 + 1;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        char v6 = (void *)*v13;
      }
      while (*v13);
      if (v10 != (void *)v7 && result >= v10[4])
      {
        char v16 = &v15;
        unint64_t result = (unint64_t)sub_1000097B0(v9, &v15, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v16);
        if (**(void **)(result + 40))
        {
          char v16 = &v15;
          unint64_t result = (unint64_t)sub_1000097B0(v9, &v15, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v16);
          uint64_t v14 = **(void **)(result + 40);
          *(float *)(v14 + 396) = *(float *)(v14 + 396) + a3;
          ++*(_DWORD *)(v14 + 400);
        }
      }
    }
  }
  return result;
}

BOOL sub_10056A3FC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 880);
  return v1 && *(unsigned char *)(v1 + 52) != 0;
}

BOOL sub_10056A41C(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 880)) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 888);
  return v2 && v2 == a2;
}

uint64_t sub_10056A440(uint64_t a1, uint64_t a2)
{
  int v5 = 0;
  int v4 = 0;
  uint64_t v3 = 0;
  sub_10047B7A8(a2, &v5, &v4, (_DWORD *)&v3 + 1, &v3);
  uint64_t result = 0;
  if (v4 == 76)
  {
    if ((HIDWORD(v3) - 8202) <= 0x15) {
      return (0x20033Fu >> (BYTE4(v3) - 10)) & 1;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10056A4B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100017768();
  if ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 304))(v4)) {
    return 0;
  }
  uint64_t v5 = sub_100035F54();
  if ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 344))(v5)) {
    return 0;
  }
  BOOL v6 = sub_10056A574(a1);
  if (v6) {
    return 0;
  }
  uint64_t result = sub_10056A440(v6, a2);
  if (result)
  {
    sub_10003FB34();
    if (sub_100350F3C()) {
      return 1;
    }
    else {
      return 2;
    }
  }
  return result;
}

BOOL sub_10056A574(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 1120);
  uint64_t v2 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = "disabled";
    if (v1 > 1) {
      uint64_t v3 = "enabled";
    }
    int v5 = 136315138;
    BOOL v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Wireless Splitter - isWirelessSplitterEnabled is %s ", (uint8_t *)&v5, 0xCu);
  }
  return v1 > 1;
}

uint64_t sub_10056A638(uint64_t a1)
{
  unsigned int v1 = sub_10056A6AC(*(void *)(a1 + 32), *(void *)(a1 + 40));
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009B5E78);
  }
  uint64_t v2 = qword_1009F8410;

  return sub_10040AA54(v2, v1, 1);
}

uint64_t sub_10056A6AC(uint64_t a1, unint64_t a2)
{
  unint64_t v11 = a2;
  if (!a2) {
    return 0;
  }
  uint64_t v4 = *(void **)(a1 + 200);
  uint64_t v2 = (void *)(a1 + 200);
  uint64_t v3 = v4;
  if (!v4) {
    return 0;
  }
  int v5 = (uint64_t **)(v2 - 1);
  BOOL v6 = v2;
  do
  {
    unint64_t v7 = v3[4];
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      uint64_t v9 = v3;
    }
    else {
      uint64_t v9 = v3 + 1;
    }
    if (v8) {
      BOOL v6 = v3;
    }
    uint64_t v3 = (void *)*v9;
  }
  while (*v9);
  if (v6 == v2) {
    return 0;
  }
  if (v6[4] > a2) {
    return 0;
  }
  BOOL v12 = &v11;
  if (!*(_WORD *)(sub_1000097B0((uint64_t **)v2 - 1, &v11, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v12)[5] + 84)) {
    return 0;
  }
  BOOL v12 = &v11;
  return *(unsigned __int16 *)(sub_1000097B0(v5, &v11, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v12)[5] + 84);
}

uint64_t sub_10056A778(uint64_t a1)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009B5E78);
  }
  uint64_t v2 = qword_1009F8410;
  unsigned int v3 = *(unsigned __int16 *)(a1 + 32);

  return sub_10040AA54(v2, v3, 1);
}

uint64_t sub_10056A7E0(uint64_t a1)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009B5E78);
  }
  uint64_t v2 = qword_1009F8410;
  unsigned int v3 = *(unsigned __int16 *)(a1 + 32);

  return sub_10040AA54(v2, v3, 0);
}

uint64_t sub_10056A848(uint64_t a1)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009B5E78);
  }
  uint64_t v2 = qword_1009F8410;
  unsigned int v3 = *(unsigned __int16 *)(a1 + 32);

  return sub_10040AA54(v2, v3, 1);
}

uint64_t sub_10056A8B0(uint64_t a1)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009B5E78);
  }
  uint64_t v2 = qword_1009F8410;
  unsigned int v3 = *(unsigned __int16 *)(a1 + 32);

  return sub_10040AA54(v2, v3, 0);
}

void sub_10056A918(uint64_t a1, unint64_t a2, unsigned int a3)
{
  unsigned int v3 = a3;
  unint64_t v15 = a2;
  int v5 = (uint64_t **)(a1 + 192);
  *(void *)long long buf = &v15;
  *(_WORD *)(sub_1000097B0((uint64_t **)(a1 + 192), &v15, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 58) = a3;
  *(void *)long long buf = &v15;
  if (*(unsigned __int16 *)(sub_1000097B0(v5, &v15, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 58) >= *(unsigned __int16 *)(a1 + 1040)
    && (*(void *)long long buf = &v15, *(void *)sub_1000097B0(v5, &v15, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5]))
  {
    *(void *)long long buf = &v15;
    BOOL v6 = sub_1000097B0(v5, &v15, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
    ++*(_DWORD *)(*(void *)v6[5] + 384);
  }
  else
  {
    *(void *)long long buf = &v15;
    if (*(unsigned __int16 *)(sub_1000097B0(v5, &v15, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 58) >= *(unsigned __int16 *)(a1 + 1042)
      && (*(void *)long long buf = &v15, *(void *)sub_1000097B0(v5, &v15, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5]))
    {
      *(void *)long long buf = &v15;
      unint64_t v7 = sub_1000097B0(v5, &v15, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
      ++*(_DWORD *)(*(void *)v7[5] + 380);
    }
    else
    {
      *(void *)long long buf = &v15;
      if (*(void *)sub_1000097B0(v5, &v15, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5])
      {
        *(void *)long long buf = &v15;
        BOOL v8 = sub_1000097B0(v5, &v15, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
        ++*(_DWORD *)(*(void *)v8[5] + 376);
      }
      else
      {
        uint64_t v9 = qword_100A19E48;
        if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "A2DP Link Adaptive Bitrate: Metrics not enabled", buf, 2u);
        }
      }
    }
  }
  __int16 v10 = sub_10056A6AC(a1, v15);
  *(void *)long long buf = &v15;
  if (*(unsigned __int16 *)(sub_1000097B0(v5, &v15, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 60) < v3)
  {
    *(void *)long long buf = &v15;
    LOWORD(v3) = *(_WORD *)(sub_1000097B0(v5, &v15, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 60);
  }
  uint64_t v11 = sub_1004AFB34();
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_10056AC30;
  v12[3] = &unk_100998300;
  __int16 v13 = v10;
  __int16 v14 = v3;
  sub_100013018(v11, v12);
}

void sub_10056AC30(uint64_t a1)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009B5E78);
  }
  uint64_t v2 = qword_1009F8410;
  unsigned int v3 = *(unsigned __int16 *)(a1 + 32);
  int v4 = *(unsigned __int16 *)(a1 + 34);

  sub_100419150(v2, v3, v4);
}

uint64_t *sub_10056AC98(uint64_t a1, unint64_t a2, unsigned int a3)
{
  unint64_t v8 = a2;
  int v5 = (uint64_t **)(a1 + 192);
  uint64_t v9 = &v8;
  BOOL v6 = sub_1000097B0((uint64_t **)(a1 + 192), &v8, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v9);
  ++*(_WORD *)(v6[5] + 62);
  uint64_t v9 = &v8;
  uint64_t result = sub_1000097B0(v5, &v8, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v9);
  if (*(__int16 *)(result[5] + 62) >= 6)
  {
    sub_10056A918(a1, v8, a3);
    uint64_t v9 = &v8;
    uint64_t result = sub_1000097B0(v5, &v8, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v9);
    *(_WORD *)(result[5] + 62) = 0;
  }
  return result;
}

uint64_t sub_10056AD78(uint64_t a1, int a2)
{
  return sub_10008FB20(*(unsigned char **)(a1 + 216), a2);
}

void sub_10056AD80(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  int v5 = *(NSObject **)(a1 + 256);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_10056AE00;
  v6[3] = &unk_1009AA5B0;
  void v6[4] = a1;
  void v6[5] = a2;
  char v7 = a3;
  void v6[6] = a4;
  char v8 = a5;
  dispatch_async(v5, v6);
}

void sub_10056AE00(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_10008FE68(*(void *)(v2 + 216), *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 56), *(void *)(a1 + 48), *(unsigned __int8 *)(a1 + 57));
  uint64_t v3 = *(void *)(v2 + 216);
  unint64_t v4 = *(void *)(a1 + 40);

  sub_100092C30(v3, v4);
}

void sub_10056AE50(uint64_t a1, char a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 256);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10056AEC8;
  v3[3] = &unk_100998A58;
  v3[4] = a1;
  char v4 = a2;
  dispatch_async(v2, v3);
}

void sub_10056AEC8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    char v4 = "on";
    if (**(unsigned char **)(v2 + 216)) {
      int v5 = "on";
    }
    else {
      int v5 = "off";
    }
    if (!*(unsigned char *)(a1 + 40)) {
      char v4 = "off";
    }
    int v12 = 136315394;
    __int16 v13 = v5;
    __int16 v14 = 2080;
    unint64_t v15 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Dynamic Latency fScreenOn from %s -> %s", (uint8_t *)&v12, 0x16u);
  }
  BOOL v6 = *(unsigned char **)(v2 + 216);
  int v7 = *(unsigned __int8 *)(a1 + 40);
  if (*v6 != v7)
  {
    unsigned char *v6 = v7;
    if (sub_10056A574(v2) && (uint64_t v8 = *(void *)(v2 + 1128)) != 0)
    {
      int v9 = **(unsigned __int8 **)(v2 + 216);
      double Current = CFAbsoluteTimeGetCurrent();
      uint64_t v11 = *(void *)(v2 + 1128);
      if (v9)
      {
        *(_DWORD *)(v8 + 48) += (Current - *(double *)(v11 + 24));
        *(CFAbsoluteTime *)(*(void *)(v2 + 1128) + 16) = CFAbsoluteTimeGetCurrent();
      }
      else
      {
        *(_DWORD *)(v8 + 52) += (Current - *(double *)(v11 + 16));
        *(CFAbsoluteTime *)(*(void *)(v2 + 1128) + 24) = CFAbsoluteTimeGetCurrent();
      }
    }
    else
    {
      sub_10008DC90(*(void *)(v2 + 216));
    }
  }
}

void sub_10056B04C(uint64_t a1, char a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 224);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10056AEC8;
  v3[3] = &unk_100998A58;
  v3[4] = a1 - 32;
  char v4 = a2;
  dispatch_async(v2, v3);
}

void sub_10056B0C8(uint64_t a1, char a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 256);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10056B140;
  v3[3] = &unk_100998A58;
  v3[4] = a1;
  char v4 = a2;
  dispatch_async(v2, v3);
}

void sub_10056B140(uint64_t a1)
{
}

void sub_10056B1D4(void *a1)
{
  if (!a1[26] || (unsigned int v1 = (void *)a1[24], v1 == a1 + 25))
  {
LABEL_11:
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  else
  {
    while (1)
    {
      uint64_t v2 = v1[5];
      if (*(_DWORD *)(v2 + 76) == 2)
      {
        if (*(unsigned char *)(v2 + 72)) {
          break;
        }
      }
      uint64_t v3 = (void *)v1[1];
      if (v3)
      {
        do
        {
          char v4 = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          char v4 = (void *)v1[2];
          BOOL v5 = *v4 == (void)v1;
          unsigned int v1 = v4;
        }
        while (!v5);
      }
      unsigned int v1 = v4;
      if (v4 == a1 + 25) {
        goto LABEL_11;
      }
    }
    uint64_t v6 = v1[4];
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    if (v6) {
      sub_10047B7A8(v6, (_DWORD *)&v8 + 1, &v8, (_DWORD *)&v7 + 1, &v7);
    }
  }
  operator new();
}

void sub_10056B3E0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t sub_10056B41C(uint64_t a1)
{
  uint64_t v2 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 32);
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "notify A2DPClient Accessibility headTracking change:%u", (uint8_t *)v5, 8u);
  }
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009B5E78);
  }
  return sub_1004147E8(qword_1009F8410, *(unsigned __int8 *)(a1 + 32));
}

void sub_10056B4FC(uint64_t a1, char a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 160);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10056B140;
  v3[3] = &unk_100998A58;
  v3[4] = a1 - 96;
  char v4 = a2;
  dispatch_async(v2, v3);
}

void sub_10056B578(uint64_t a1, long long *a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 256);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_10056B62C;
  block[3] = &unk_1009A7660;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10003B098(&__p, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long __p = *a2;
    uint64_t v5 = *((void *)a2 + 2);
  }
  dispatch_async(v2, block);
  if (SHIBYTE(v5) < 0) {
    operator delete((void *)__p);
  }
}

void sub_10056B62C(uint64_t a1)
{
  uint64_t v2 = sub_1004AFB34();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3321888768;
  void v3[2] = sub_10056B704;
  v3[3] = &unk_1009A7660;
  if (*(char *)(a1 + 55) < 0)
  {
    sub_10003B098(&__p, *(void **)(a1 + 32), *(void *)(a1 + 40));
  }
  else
  {
    long long __p = *(_OWORD *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 48);
  }
  sub_100013018(v2, v3);
  if (SHIBYTE(v5) < 0) {
    operator delete((void *)__p);
  }
}

void sub_10056B6E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10056B704(uint64_t a1)
{
  uint64_t v2 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      int v3 = (void *)*v3;
    }
    int v7 = 136315138;
    uint64_t v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "notify Foreground app changed :%s", (uint8_t *)&v7, 0xCu);
  }
  id v4 = objc_alloc((Class)NSString);
  uint64_t v5 = (void *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    uint64_t v5 = (void *)*v5;
  }
  id v6 = [v4 initWithUTF8String:v5];
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009B5E78);
  }
  sub_100414540(qword_1009F8410, v6);
}

void sub_10056B818(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10056B830(uint64_t a1, long long *a2)
{
}

void sub_10056B838(uint64_t a1, char a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 256);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10056B8B0;
  v3[3] = &unk_100998A58;
  void v3[4] = a1;
  char v4 = a2;
  dispatch_async(v2, v3);
}

void sub_10056B8B0(uint64_t a1)
{
}

void sub_10056B8C4(uint64_t a1, char a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 136);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10056B8B0;
  v3[3] = &unk_100998A58;
  void v3[4] = a1 - 120;
  char v4 = a2;
  dispatch_async(v2, v3);
}

BOOL sub_10056B940(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 216);
  return *(unsigned char *)(v1 + 4) || *(unsigned char *)(v1 + 5) != 0;
}

void sub_10056B964(uint64_t a1, char a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 256);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10056B9DC;
  v3[3] = &unk_100998A58;
  void v3[4] = a1;
  char v4 = a2;
  dispatch_async(v2, v3);
}

void sub_10056B9DC(uint64_t a1)
{
}

void sub_10056B9F0(uint64_t a1, char a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 208);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10056B9DC;
  v3[3] = &unk_100998A58;
  void v3[4] = a1 - 48;
  char v4 = a2;
  dispatch_async(v2, v3);
}

void sub_10056BA6C(uint64_t a1, char a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 256);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10056BAE4;
  v3[3] = &unk_100998A58;
  void v3[4] = a1;
  char v4 = a2;
  dispatch_async(v2, v3);
}

void sub_10056BAE4(uint64_t a1)
{
}

void sub_10056BAF8(uint64_t a1, char a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 176);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10056BAE4;
  v3[3] = &unk_100998A58;
  void v3[4] = a1 - 80;
  char v4 = a2;
  dispatch_async(v2, v3);
}

void sub_10056BB74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(NSObject **)(a1 + 256);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10056BBEC;
  block[3] = &unk_1009A12D0;
  void block[4] = a1;
  void block[5] = a2;
  void block[6] = a3;
  dispatch_async(v3, block);
}

void sub_10056BBEC(uint64_t a1)
{
}

void sub_10056BC00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(NSObject **)(a1 + 200);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10056BBEC;
  block[3] = &unk_1009A12D0;
  void block[4] = a1 - 56;
  void block[5] = a2;
  void block[6] = a3;
  dispatch_async(v3, block);
}

uint64_t *sub_10056BC7C(uint64_t *result, unint64_t a2)
{
  unint64_t v11 = a2;
  if (a2)
  {
    uint64_t v2 = (uint64_t **)(result + 24);
    int v12 = &v11;
    uint64_t result = sub_1000097B0((uint64_t **)result + 24, &v11, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v12);
    if (*(void *)result[5])
    {
      int v12 = &v11;
      if (*(_DWORD *)(*(void *)(sub_1000097B0(v2, &v11, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v12)[5] + 40) + 20) == 1)
      {
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        int v12 = &v11;
        uint64_t result = sub_1000097B0(v2, &v11, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v12);
        *(CFAbsoluteTime *)(*(void *)result[5] + 144) = Current;
      }
      else
      {
        int v12 = &v11;
        if (*(_DWORD *)(*(void *)(sub_1000097B0(v2, &v11, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v12)[5] + 40) + 20) == 6)
        {
          int v12 = &v11;
          if (*(double *)(*(void *)sub_1000097B0(v2, &v11, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v12)[5] + 144) == 0.0)
          {
            int v12 = &v11;
            uint64_t result = sub_1000097B0(v2, &v11, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v12);
            if (*(double *)(*(void *)result[5] + 152) != 0.0)
            {
              double v8 = CFAbsoluteTimeGetCurrent();
              int v12 = &v11;
              double v9 = v8
                 - *(double *)(*(void *)sub_1000097B0(v2, &v11, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v12)[5] + 152);
              int v12 = &v11;
              __int16 v10 = sub_1000097B0(v2, &v11, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v12);
              *(double *)(*(void *)v10[5] + 136) = v9 + *(double *)(*(void *)v10[5] + 136);
              int v12 = &v11;
              uint64_t result = sub_1000097B0(v2, &v11, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v12);
              *(void *)(*(void *)result[5] + 152) = 0;
            }
          }
          else
          {
            double v4 = CFAbsoluteTimeGetCurrent();
            int v12 = &v11;
            double v5 = v4
               - *(double *)(*(void *)sub_1000097B0(v2, &v11, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v12)[5] + 144);
            int v12 = &v11;
            id v6 = sub_1000097B0(v2, &v11, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v12);
            *(double *)(*(void *)v6[5] + 128) = v5 + *(double *)(*(void *)v6[5] + 128);
            int v12 = &v11;
            uint64_t result = sub_1000097B0(v2, &v11, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v12);
            *(void *)(*(void *)result[5] + 144) = 0;
          }
        }
        else
        {
          int v12 = &v11;
          uint64_t result = sub_1000097B0(v2, &v11, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v12);
          if (*(_DWORD *)(*(void *)(result[5] + 40) + 20) == 7)
          {
            CFAbsoluteTime v7 = CFAbsoluteTimeGetCurrent();
            int v12 = &v11;
            uint64_t result = sub_1000097B0(v2, &v11, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v12);
            *(CFAbsoluteTime *)(*(void *)result[5] + 152) = v7;
          }
        }
      }
    }
  }
  return result;
}

void sub_10056BFA0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (*(char *)(a3 + 23) < 0)
  {
    if (!*(void *)(a3 + 8)) {
      return;
    }
  }
  else if (!*(unsigned char *)(a3 + 23))
  {
    return;
  }
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    if (!a4 || !*(unsigned char *)(a2 + 23)) {
      return;
    }
LABEL_11:
    operator new[]();
  }
  if (a4 && *(void *)(a2 + 8)) {
    goto LABEL_11;
  }
}

void sub_10056C304(uint64_t a1)
{
  for (uint64_t i = *(unsigned __int8 ***)(a1 + 1016); i != *(unsigned __int8 ***)(a1 + 1024); ++i)
  {
    int v3 = *i;
    if (*i && *((void *)v3 + 1) && *((void *)v3 + 2))
    {
      unsigned int v4 = *v3;
      if (v4 >= 2)
      {
        uint64_t v5 = 0;
        id v6 = qword_100A19E48;
        do
        {
          BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG);
          if (v7)
          {
            double v8 = sub_100564F6C(v7, *((_DWORD *)v3 + 1));
            int v9 = *(unsigned __int8 *)(*((void *)v3 + 1) + v5);
            *(_DWORD *)long long buf = 138412802;
            uint64_t v19 = v8;
            __int16 v20 = 1024;
            int v21 = v5;
            __int16 v22 = 1024;
            int v23 = v9;
            _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "A2DP Link Adaptive %@ Threshold (%d): %3d", buf, 0x18u);

            id v6 = qword_100A19E48;
            unsigned int v4 = *v3;
          }
          ++v5;
        }
        while (v5 < v4 - 1);
      }
      if (v4)
      {
        unint64_t v11 = 0;
        int v12 = qword_100A19E48;
        do
        {
          BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG);
          if (v13)
          {
            __int16 v14 = sub_100564F6C(v13, *((_DWORD *)v3 + 1));
            int v15 = *(unsigned __int16 *)(*((void *)v3 + 2) + 2 * v11);
            *(_DWORD *)long long buf = 138412802;
            uint64_t v19 = v14;
            __int16 v20 = 1024;
            int v21 = v11;
            __int16 v22 = 1024;
            int v23 = v15;
            _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "A2DP Link Adaptive %@ Rate (%d): %3d", buf, 0x18u);

            int v12 = qword_100A19E48;
            unsigned int v4 = *v3;
          }
          ++v11;
        }
        while (v11 < v4);
      }
    }
    else
    {
      __int16 v10 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEBUG)) {
        sub_10077A4BC(&v16, v17, v10);
      }
    }
  }
}

uint64_t sub_10056C53C(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = a2;
  unsigned int v4 = &v3;
  return *(void *)(sub_1000097B0((uint64_t **)(a1 + 192), &v3, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v4)[5] + 40);
}

void sub_10056C588(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  int v3 = a2[3];
  int v4 = a2[2] + *(unsigned __int8 *)(a3 + 1);
  int v5 = a2[1] + *(unsigned __int16 *)(a3 + 167);
  *a2 += *(unsigned __int16 *)(a3 + 165);
  a2[1] = v5;
  int v6 = v3 + *(unsigned __int16 *)(a3 + 169);
  a2[2] = v4;
  a2[3] = v6;
  int v7 = a2[5] + *(unsigned __int16 *)(a3 + 171);
  a2[4] += *(unsigned __int16 *)(a3 + 173);
  a2[5] = v7;
}

void sub_10056C5D4(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  int v3 = *(char *)(a3 + 217);
  int v4 = a2[1];
  *a2 += v3;
  int v5 = *(char *)(a3 + 218);
  a2[2] += v5;
  int v6 = *(char *)(a3 + 219);
  a2[4] += v6;
  if (v4 < v3) {
    a2[1] = v3;
  }
  if (a2[3] < v5) {
    a2[3] = v5;
  }
  if (a2[5] < v6) {
    a2[5] = v6;
  }
  unsigned int v7 = *(unsigned __int8 *)(a3 + 220);
  unsigned int v8 = a2[7] + v7;
  ++a2[6];
  a2[7] = v8;
  unsigned int v9 = a2[8];
  if (v9 >= v7) {
    unsigned int v10 = v7;
  }
  else {
    unsigned int v10 = a2[8];
  }
  if (v9) {
    unsigned int v11 = v10;
  }
  else {
    unsigned int v11 = v7;
  }
  a2[8] = v11;
}

id sub_10056C660(uint64_t a1, char a2)
{
  int v4 = +[NSMutableString stringWithFormat:&stru_1009C1AC8];
  int v5 = v4;
  unsigned int v6 = *(unsigned __int16 *)(a1 + 826);
  if (v6 - 212 >= 0xFFFFFF2D)
  {
    if ((a2 & 4) != 0) {
      CFStringRef v8 = @"Cell Active ";
    }
    else {
      CFStringRef v8 = @"Cell Inactive ";
    }
    [v4 appendString:v8];
    if ((a2 & 2) != 0) {
      CFStringRef v9 = @"/ WiFi5G Active ";
    }
    else {
      CFStringRef v9 = @"/ WiFi5G Inactive ";
    }
    [v5 appendString:v9];
    CFStringRef v10 = @"/ H ";
    CFStringRef v11 = @"/ B ";
    goto LABEL_19;
  }
  if (v6 >= 0xD4)
  {
    if ((a2 & 8) != 0)
    {
      [v4 appendString:@"Cell Inactive "];
      CFStringRef v7 = &stru_1009C1AC8;
    }
    else
    {
      [v4 appendString:@"Cell Active "];
      if ((a2 & 4) != 0) {
        CFStringRef v7 = @"/ Ant(2/4/6) ";
      }
      else {
        CFStringRef v7 = @"/ Ant(1/3/5) ";
      }
    }
    [v5 appendString:v7];
    if ((a2 & 2) != 0) {
      CFStringRef v12 = @"/ B ";
    }
    else {
      CFStringRef v12 = @"/ H ";
    }
    [v5 appendString:v12];
    CFStringRef v10 = @"/ WiFi5G Active";
    CFStringRef v11 = @"/ WiFi5G Inactive";
LABEL_19:
    if (a2) {
      CFStringRef v13 = v10;
    }
    else {
      CFStringRef v13 = v11;
    }
    [v5 appendString:v13];
  }

  return v5;
}

void sub_10056C7B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10056C7C8(unsigned __int8 *a1, int a2)
{
  int v4 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v19) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump: ----------------------------Packet------------------Target iPA Tx Power------------------------", (uint8_t *)&v19, 2u);
  }
  if (a2 == 2000)
  {
    if (a1[667] >= a1[658]) {
      unsigned int v5 = a1[658];
    }
    else {
      unsigned int v5 = a1[667];
    }
    unsigned int v6 = a1[660];
    if (a1[668] >= v6) {
      unsigned int v7 = a1[660];
    }
    else {
      unsigned int v7 = a1[668];
    }
    if (a1[669] >= v6) {
      unsigned int v8 = a1[660];
    }
    else {
      unsigned int v8 = a1[669];
    }
    CFStringRef v9 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v10 = a1[666];
      if (v10 >= a1[656]) {
        unsigned int v10 = a1[656];
      }
      int v19 = 134217984;
      double v20 = (double)v10 * 0.5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "statedump:                              BDR                         %.2f dBm", (uint8_t *)&v19, 0xCu);
      CFStringRef v9 = qword_100A19E48;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = 134217984;
      double v20 = (double)v5 * 0.5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "statedump:                              EDR                         %.2f dBm", (uint8_t *)&v19, 0xCu);
      CFStringRef v9 = qword_100A19E48;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = 134217984;
      double v20 = (double)v7 * 0.5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "statedump:                             LEData                       %.2f dBm", (uint8_t *)&v19, 0xCu);
      CFStringRef v9 = qword_100A19E48;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = 134217984;
      double v20 = (double)v8 * 0.5;
      CFStringRef v11 = "statedump:                             LEAdv                        %.2f dBm";
LABEL_50:
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v19, 0xCu);
    }
  }
  else if ((a2 - 2001) <= 1)
  {
    if (a1[682] >= a1[658]) {
      unsigned int v12 = a1[658];
    }
    else {
      unsigned int v12 = a1[682];
    }
    if (a1[698] >= a1[660]) {
      unsigned int v13 = a1[660];
    }
    else {
      unsigned int v13 = a1[698];
    }
    if (a1[714] >= a1[662]) {
      unsigned int v14 = a1[662];
    }
    else {
      unsigned int v14 = a1[714];
    }
    if (a1[730] >= a1[664]) {
      unsigned int v15 = a1[664];
    }
    else {
      unsigned int v15 = a1[730];
    }
    CFStringRef v9 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v16 = a1[666];
      if (v16 >= a1[656]) {
        unsigned int v16 = a1[656];
      }
      int v19 = 134217984;
      double v20 = (double)v16 * 0.5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "statedump:                              BDR                         %.2f dBm", (uint8_t *)&v19, 0xCu);
      CFStringRef v9 = qword_100A19E48;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = 134217984;
      double v20 = (double)v12 * 0.5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "statedump:                              EDR                         %.2f dBm", (uint8_t *)&v19, 0xCu);
      CFStringRef v9 = qword_100A19E48;
    }
    double v17 = (double)v13;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = 134217984;
      double v20 = v17 * 0.5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "statedump:                             LEData                       %.2f dBm", (uint8_t *)&v19, 0xCu);
      CFStringRef v9 = qword_100A19E48;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = 134217984;
      double v20 = v17 * 0.5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "statedump:                             LEAdv                        %.2f dBm", (uint8_t *)&v19, 0xCu);
      CFStringRef v9 = qword_100A19E48;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = 134217984;
      double v20 = (double)v14 * 0.5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "statedump:                              HDR4                        %.2f dBm", (uint8_t *)&v19, 0xCu);
      CFStringRef v9 = qword_100A19E48;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = 134217984;
      double v20 = (double)v15 * 0.5;
      CFStringRef v11 = "statedump:                              HDR8                        %.2f dBm";
      goto LABEL_50;
    }
  }
  char v18 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v19) = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "statedump: ============================= End of bluetooth power targets dump ==========================", (uint8_t *)&v19, 2u);
  }
}

void sub_10056CC80(unsigned __int8 *a1, int a2)
{
  int v4 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v51) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump: ========================= Bluetooth Tx Power Targets (CC0) ===============================", (uint8_t *)&v51, 2u);
  }
  if (a2 == 2000)
  {
    unsigned int v5 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v51) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: ------Use Case-------Target ePA Tx Power-------------------Power Caps--------------------------", (uint8_t *)&v51, 2u);
      unsigned int v5 = qword_100A19E48;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v6 = a1[794];
      unsigned int v7 = a1[671];
      unsigned int v8 = a1[659];
      if (v7 >= v6) {
        unsigned int v9 = a1[794];
      }
      else {
        unsigned int v9 = a1[671];
      }
      if (v8 < v9) {
        unsigned int v9 = a1[659];
      }
      int v51 = 134218752;
      double v52 = (double)v9 * 0.5;
      __int16 v53 = 2048;
      double v54 = (double)v8 * 0.5;
      __int16 v55 = 2048;
      double v56 = (double)v7 * 0.5;
      __int16 v57 = 2048;
      double v58 = (double)v6 * 0.5;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump:     Cellular Off          %.2f dBm                   [%.2f,%.2f,%.2f]", (uint8_t *)&v51, 0x2Au);
      unsigned int v5 = qword_100A19E48;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v10 = a1[795];
      unsigned int v11 = a1[671];
      unsigned int v12 = a1[659];
      if (v11 >= v10) {
        unsigned int v13 = a1[795];
      }
      else {
        unsigned int v13 = a1[671];
      }
      if (v12 < v13) {
        unsigned int v13 = a1[659];
      }
      int v51 = 134218752;
      double v52 = (double)v13 * 0.5;
      __int16 v53 = 2048;
      double v54 = (double)v12 * 0.5;
      __int16 v55 = 2048;
      double v56 = (double)v11 * 0.5;
      __int16 v57 = 2048;
      double v58 = (double)v10 * 0.5;
      unsigned int v14 = "statedump:     Cellular On           %.2f dBm                   [%.2f,%.2f,%.2f]";
LABEL_84:
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&v51, 0x2Au);
    }
  }
  else if ((a2 - 2001) <= 1)
  {
    unsigned int v5 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v51) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: ------EDR-------Target ePA Tx Power-------------------Power Caps--------------------------", (uint8_t *)&v51, 2u);
      unsigned int v5 = qword_100A19E48;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v15 = a1[659];
      unsigned int v16 = a1[683];
      unsigned int v17 = a1[794];
      if (v16 >= v15) {
        unsigned int v18 = a1[659];
      }
      else {
        unsigned int v18 = a1[683];
      }
      if (v17 < v18) {
        unsigned int v18 = a1[794];
      }
      int v51 = 134218752;
      double v52 = (double)v18 * 0.5;
      __int16 v53 = 2048;
      double v54 = (double)v15 * 0.5;
      __int16 v55 = 2048;
      double v56 = (double)v16 * 0.5;
      __int16 v57 = 2048;
      double v58 = (double)v17 * 0.5;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump:     Cellular Off          %.2f dBm                   [%.2f,%.2f,%.2f]", (uint8_t *)&v51, 0x2Au);
      unsigned int v5 = qword_100A19E48;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v19 = a1[659];
      unsigned int v20 = a1[683];
      unsigned int v21 = a1[802];
      if (v20 >= v19) {
        unsigned int v22 = a1[659];
      }
      else {
        unsigned int v22 = a1[683];
      }
      if (v21 < v22) {
        unsigned int v22 = a1[802];
      }
      int v51 = 134218752;
      double v52 = (double)v22 * 0.5;
      __int16 v53 = 2048;
      double v54 = (double)v19 * 0.5;
      __int16 v55 = 2048;
      double v56 = (double)v20 * 0.5;
      __int16 v57 = 2048;
      double v58 = (double)v21 * 0.5;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump:     Cellular On           %.2f dBm                   [%.2f,%.2f,%.2f]", (uint8_t *)&v51, 0x2Au);
      unsigned int v5 = qword_100A19E48;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v23 = a1[659];
      unsigned int v24 = a1[683];
      unsigned int v25 = a1[810];
      if (v24 >= v23) {
        unsigned int v26 = a1[659];
      }
      else {
        unsigned int v26 = a1[683];
      }
      if (v25 < v26) {
        unsigned int v26 = a1[810];
      }
      int v51 = 134218752;
      double v52 = (double)v26 * 0.5;
      __int16 v53 = 2048;
      double v54 = (double)v23 * 0.5;
      __int16 v55 = 2048;
      double v56 = (double)v24 * 0.5;
      __int16 v57 = 2048;
      double v58 = (double)v25 * 0.5;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump:      WiFi 5G On           %.2f dBm                   [%.2f,%.2f,%.2f]", (uint8_t *)&v51, 0x2Au);
      unsigned int v5 = qword_100A19E48;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v51) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: ------HDR4-------Target ePA Tx Power-------------------Power Caps--------------------------", (uint8_t *)&v51, 2u);
      unsigned int v5 = qword_100A19E48;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v28 = a1[663];
      unsigned int v29 = a1[731];
      unsigned int v30 = a1[794];
      if (v29 >= v28) {
        unsigned int v29 = a1[663];
      }
      if (v30 < v29) {
        unsigned int v29 = a1[794];
      }
      LOBYTE(v27) = a1[715];
      int v51 = 134218752;
      double v52 = (double)v29 * 0.5;
      __int16 v53 = 2048;
      double v54 = (double)v28 * 0.5;
      __int16 v55 = 2048;
      double v56 = (double)v27 * 0.5;
      __int16 v57 = 2048;
      double v58 = (double)v30 * 0.5;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump:     Cellular Off          %.2f dBm                   [%.2f,%.2f,%.2f]", (uint8_t *)&v51, 0x2Au);
      unsigned int v5 = qword_100A19E48;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v32 = a1[663];
      unsigned int v33 = a1[731];
      unsigned int v34 = a1[802];
      if (v33 >= v32) {
        unsigned int v33 = a1[663];
      }
      if (v34 < v33) {
        unsigned int v33 = a1[802];
      }
      LOBYTE(v31) = a1[715];
      int v51 = 134218752;
      double v52 = (double)v33 * 0.5;
      __int16 v53 = 2048;
      double v54 = (double)v32 * 0.5;
      __int16 v55 = 2048;
      double v56 = (double)v31 * 0.5;
      __int16 v57 = 2048;
      double v58 = (double)v34 * 0.5;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump:     Cellular On           %.2f dBm                   [%.2f,%.2f,%.2f]", (uint8_t *)&v51, 0x2Au);
      unsigned int v5 = qword_100A19E48;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v36 = a1[663];
      unsigned int v37 = a1[731];
      unsigned int v38 = a1[810];
      if (v37 >= v36) {
        unsigned int v37 = a1[663];
      }
      if (v38 < v37) {
        unsigned int v37 = a1[810];
      }
      LOBYTE(v35) = a1[715];
      int v51 = 134218752;
      double v52 = (double)v37 * 0.5;
      __int16 v53 = 2048;
      double v54 = (double)v36 * 0.5;
      __int16 v55 = 2048;
      double v56 = (double)v35 * 0.5;
      __int16 v57 = 2048;
      double v58 = (double)v38 * 0.5;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump:      WiFi 5G On           %.2f dBm                   [%.2f,%.2f,%.2f]", (uint8_t *)&v51, 0x2Au);
      unsigned int v5 = qword_100A19E48;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v51) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: ------HDR8-------Target ePA Tx Power-------------------Power Caps--------------------------", (uint8_t *)&v51, 2u);
      unsigned int v5 = qword_100A19E48;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v40 = a1[665];
      unsigned int v41 = a1[747];
      unsigned int v42 = a1[794];
      if (v41 >= v40) {
        unsigned int v41 = a1[665];
      }
      if (v42 < v41) {
        unsigned int v41 = a1[794];
      }
      LOBYTE(v39) = a1[731];
      int v51 = 134218752;
      double v52 = (double)v41 * 0.5;
      __int16 v53 = 2048;
      double v54 = (double)v40 * 0.5;
      __int16 v55 = 2048;
      double v56 = (double)v39 * 0.5;
      __int16 v57 = 2048;
      double v58 = (double)v42 * 0.5;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump:     Cellular Off          %.2f dBm                   [%.2f,%.2f,%.2f]", (uint8_t *)&v51, 0x2Au);
      unsigned int v5 = qword_100A19E48;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v44 = a1[665];
      unsigned int v45 = a1[747];
      unsigned int v46 = a1[802];
      if (v45 >= v44) {
        unsigned int v45 = a1[665];
      }
      if (v46 < v45) {
        unsigned int v45 = a1[802];
      }
      LOBYTE(v43) = a1[731];
      int v51 = 134218752;
      double v52 = (double)v45 * 0.5;
      __int16 v53 = 2048;
      double v54 = (double)v44 * 0.5;
      __int16 v55 = 2048;
      double v56 = (double)v43 * 0.5;
      __int16 v57 = 2048;
      double v58 = (double)v46 * 0.5;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump:     Cellular On           %.2f dBm                   [%.2f,%.2f,%.2f]", (uint8_t *)&v51, 0x2Au);
      unsigned int v5 = qword_100A19E48;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v48 = a1[665];
      unsigned int v49 = a1[747];
      unsigned int v50 = a1[810];
      if (v49 >= v48) {
        unsigned int v49 = a1[665];
      }
      if (v50 < v49) {
        unsigned int v49 = a1[810];
      }
      LOBYTE(v47) = a1[731];
      int v51 = 134218752;
      double v52 = (double)v49 * 0.5;
      __int16 v53 = 2048;
      double v54 = (double)v48 * 0.5;
      __int16 v55 = 2048;
      double v56 = (double)v47 * 0.5;
      __int16 v57 = 2048;
      double v58 = (double)v50 * 0.5;
      unsigned int v14 = "statedump:      WiFi 5G On           %.2f dBm                   [%.2f,%.2f,%.2f]";
      goto LABEL_84;
    }
  }
}

void sub_10056D51C(uint64_t a1, int a2, unsigned char *a3, unsigned char *a4, unsigned char *a5, unsigned char *a6, uint64_t a7)
{
  __int16 v26 = 0;
  char v25 = 0;
  if (a2 == 2)
  {
    uint64_t v13 = sub_100017768();
    sub_10004191C(buf, "ePA");
    sub_10004191C(__p, "DisableA2DP");
    (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v13 + 72))(v13, buf, __p, (char *)&v26 + 1);
  }
  else
  {
    if (a2 != 1) {
      goto LABEL_9;
    }
    uint64_t v14 = sub_100017768();
    sub_10004191C(buf, "ePA");
    sub_10004191C(__p, "DisableHFP");
    (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v14 + 72))(v14, buf, __p, (char *)&v26 + 1);
  }
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (v24 < 0) {
    operator delete(*(void **)buf);
  }
LABEL_9:
  uint64_t v15 = sub_100017768();
  sub_10004191C(buf, "ePA");
  sub_10004191C(__p, "DisableReTxEPA");
  (*(void (**)(uint64_t, uint8_t *, void **, __int16 *))(*(void *)v15 + 72))(v15, buf, __p, &v26);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (v24 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v16 = sub_100017768();
  sub_10004191C(buf, "ePA");
  sub_10004191C(__p, "DisableThresholdEPA");
  (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v16 + 72))(v16, buf, __p, &v25);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (v24 < 0) {
    operator delete(*(void **)buf);
  }
  *a3 = HIBYTE(v26);
  *a4 = v26;
  *a5 = v25;
  *a6 = 3;
  if (a2 == 2)
  {
    uint64_t v17 = sub_100035F54();
    if (((*(uint64_t (**)(uint64_t))(*(void *)v17 + 160))(v17) & 1) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (a2 == 1)
  {
    uint64_t v18 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v18 + 168))(v18))
    {
      if (!sub_1004766D4(a7)) {
LABEL_23:
      }
        *a6 = 7;
    }
  }
LABEL_24:
  if (*a4)
  {
    *a6 &= ~2u;
    unsigned int v19 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Warning: Disabling ePA for retransmission policy through defaults write", buf, 2u);
    }
  }
  if (*a5)
  {
    *a6 &= ~1u;
    unsigned int v20 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Warning: Disabling threshold based ePA policy through defaults write", buf, 2u);
    }
  }
}

void sub_10056D8A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_10056D8F0(unsigned char *a1, uint64_t a2, char a3, int a4)
{
  __int16 v40 = 0;
  char v39 = 0;
  sub_10056D51C((uint64_t)a1, a4, a1 + 345, &v40, &v39, (unsigned char *)&v40 + 1, a2);
  if (a1[345])
  {
    unsigned int v8 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "ePA disabled by defaults write", buf, 2u);
    }
    return;
  }
  sub_10003FB34();
  if (!sub_100351464())
  {
    sub_10003FB34();
    if (!sub_10035129C()) {
      return;
    }
    uint64_t v18 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Enable EPA for Marconi", buf, 2u);
    }
    uint64_t v19 = sub_10003FB34();
    (*(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(*(void *)v19 + 184))(v19, a2, 2, 0, 30, 10);
    goto LABEL_34;
  }
  unsigned int v9 = a1 + 878;
  sub_10055A14C((uint64_t)a1, a2, a4, a1 + 878);
  uint64_t v10 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 160))(v10))
  {
    int v11 = sub_1003FAF7C();
    if (a4 == 1) {
      unsigned int v12 = -75;
    }
    else {
      unsigned int v12 = -80;
    }
    if (v11 == 150) {
      uint64_t v13 = 4294967197;
    }
    else {
      uint64_t v13 = v12;
    }
    uint64_t v14 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = *v9;
      *(_DWORD *)long long buf = 67109888;
      int v42 = HIBYTE(v40);
      __int16 v43 = 1024;
      int v44 = v15;
      __int16 v45 = 1024;
      int v46 = v13;
      __int16 v47 = 1024;
      int v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Enabling beamforming, policy: %#x, iPA-Beamforming RSSI threshold: %d dBm, ePA-Beamforming RSSI threshold: %d dBm, beamforming gain threshold: %d dB", buf, 0x1Au);
    }
    if (qword_1009F8130 != -1) {
      dispatch_once(&qword_1009F8130, &stru_1009B5ED8);
    }
    uint64_t v16 = sub_1002CE1CC();
    if (v16)
    {
      uint64_t v17 = sub_10056DE08(v16, a2, HIBYTE(v40), *v9, 0, v13, -70, 0);
    }
    else
    {
      uint64_t v32 = sub_10003FB34();
      uint64_t v17 = (*(uint64_t (**)(uint64_t, void, uint64_t, void, void, void, uint64_t))(*(void *)v32 + 128))(v32, 0, a2, HIBYTE(v40), *v9, 0, v13);
    }
    sub_10056E094(v17, a2, 1);
    uint64_t v33 = sub_10003FB34();
    if ((*(_DWORD *)(v33 + 712) - 23) > 0x7B8) {
      uint64_t v34 = 2;
    }
    else {
      uint64_t v34 = 4;
    }
    sub_10056E280(v33, v34, a2, 1);
    goto LABEL_34;
  }
  unsigned int v20 = a1 + 876;
  unsigned int v21 = a1 + 877;
  sub_10055A3B8((uint64_t)a1, a3, a1 + 876, a1 + 877);
  sub_10055A440((uint64_t)a1);
  sub_10003FB34();
  int v22 = sub_100351A70();
  int v23 = a1[877];
  uint64_t v24 = qword_100A19E48;
  BOOL v25 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
  uint64_t v26 = HIBYTE(v40);
  if (v22 == v23)
  {
    if (v25)
    {
      int v27 = *v9;
      int v28 = 25 * *v20;
      *(_DWORD *)long long buf = 67109888;
      int v42 = HIBYTE(v40);
      __int16 v43 = 1024;
      int v44 = v27;
      __int16 v45 = 1024;
      int v46 = v28;
      __int16 v47 = 1024;
      int v48 = 25 * v22;
      unsigned int v29 = "Enabling ePA, policy: %#x, Threshold: %d dBm, Tx power high: %d, low: %d";
      unsigned int v30 = v24;
      uint32_t v31 = 26;
LABEL_30:
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, v29, buf, v31);
    }
  }
  else if (v25)
  {
    int v35 = *v9;
    int v36 = 25 * *v20;
    *(_DWORD *)long long buf = 67110144;
    int v42 = HIBYTE(v40);
    __int16 v43 = 1024;
    int v44 = v35;
    __int16 v45 = 1024;
    int v46 = v36;
    __int16 v47 = 1024;
    int v48 = 25 * v23;
    __int16 v49 = 1024;
    int v50 = 25 * v22;
    unsigned int v29 = "Enabling ePA, policy: %#x, Threshold: %d dBm, Tx power high: %d, medium: %d, low (unused): %d";
    unsigned int v30 = v24;
    uint32_t v31 = 32;
    goto LABEL_30;
  }
  uint64_t v37 = sub_10003FB34();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void))(*(void *)v37 + 104))(v37, a2, 1, v26, *v20, *v21, *v9);
  uint64_t v38 = sub_10003FB34();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v38 + 120))(v38, 1);
LABEL_34:
  if (qword_1009F8090 != -1) {
    dispatch_once(&qword_1009F8090, &stru_1009B5E98);
  }
  sub_1004D55B8((uint64_t)off_1009F8088, a2, 0xFFFFFFFFLL, 0, 702, 0);
}

uint64_t sub_10056DE08(uint64_t a1, uint64_t a2, int a3, char a4, char a5, char a6, char a7, int a8)
{
  v34[0] = 0;
  v34[1] = 0;
  char v35 = 0;
  int v15 = sub_100476054(a2);
  if (v15 == 22 || v15 == 17) {
    char v17 = 60;
  }
  else {
    char v17 = 45;
  }
  if (a8) {
    LOBYTE(v18) = 75;
  }
  else {
    LOBYTE(v18) = v17;
  }
  int v33 = 0;
  uint64_t v19 = sub_100017768();
  sub_10004191C(buf, "ePA");
  sub_10004191C(__p, "iPAMaxThreshold");
  int v20 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v19 + 88))(v19, buf, __p, &v33);
  if (v32 < 0) {
    operator delete(__p[0]);
  }
  if ((v37 & 0x80000000) == 0)
  {
    if (!v20) {
      goto LABEL_18;
    }
LABEL_16:
    int v18 = -v33;
    unsigned int v21 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v18;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Warning: Setting user defined iPA-Max threshold to -%d dBm through defaults write", buf, 8u);
    }
    goto LABEL_18;
  }
  operator delete(*(void **)buf);
  if (v20) {
    goto LABEL_16;
  }
LABEL_18:
  char v22 = 0;
  uint64_t v23 = 0;
  LOBYTE(v34[0]) = 2;
  char v24 = 1;
  while (1)
  {
    char v25 = v24;
    unint64_t v26 = (unint64_t)&v34[v23];
    *(unsigned char *)(v26 + 1) = v23;
    *(_WORD *)(v26 + 2) = 6;
    *(unsigned char *)(v26 + 4) = *(unsigned char *)(v26 + 4) & 0xF8 | a3 & 7;
    *(unsigned char *)(v26 + 5) = v18;
    *(unsigned char *)(v26 + 6) = a4;
    int v27 = (unsigned char *)(v26 | 7);
    int v28 = (unsigned char *)(v26 + 8);
    if (a3)
    {
      if (v22) {
        break;
      }
    }
    char v24 = 0;
    unsigned char *v27 = a6;
    unsigned char *v28 = a5;
    char v22 = 1;
    uint64_t v23 = 1;
    if ((v25 & 1) == 0) {
      goto LABEL_24;
    }
  }
  unsigned char *v27 = a7;
  unsigned char *v28 = a5;
LABEL_24:
  uint64_t v29 = sub_10003FB34();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v29 + 144))(v29, a2, 17, v34);
}

void sub_10056E058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10056E094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_100017768();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v5 + 384))(v5)) {
    return 0;
  }
  uint64_t v6 = sub_100017768();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v6 + 392))(v6)) {
    return 0;
  }
  unsigned int v7 = qword_100A19E48;
  BOOL v8 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
  if (a3)
  {
    if (!v8) {
      goto LABEL_9;
    }
    __int16 v23 = 0;
    unsigned int v9 = "Enabling beamforming VSE Logging";
    uint64_t v10 = (uint8_t *)&v23;
  }
  else
  {
    if (!v8) {
      goto LABEL_9;
    }
    *(_WORD *)long long buf = 0;
    unsigned int v9 = "Disabling beamforming VSE Logging";
    uint64_t v10 = buf;
  }
  _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v9, v10, 2u);
LABEL_9:
  uint64_t v11 = sub_10003FB34();
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void))(*(void *)v11 + 128))(v11, 2, a2, a3, 0, 0, 0);
  uint64_t v13 = qword_100A19E48;
  if (!v12)
  {
    BOOL v16 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_INFO);
    if (a3)
    {
      if (v16)
      {
        __int16 v21 = 0;
        char v17 = "Beamforming VSE Logging enabled";
        int v18 = (uint8_t *)&v21;
LABEL_20:
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, v17, v18, 2u);
      }
    }
    else if (v16)
    {
      __int16 v20 = 0;
      char v17 = "Beamforming VSE Logging disabled";
      int v18 = (uint8_t *)&v20;
      goto LABEL_20;
    }
    return 0;
  }
  uint64_t v14 = v12;
  BOOL v15 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR);
  if (a3)
  {
    if (v15) {
      sub_10077A4FC();
    }
  }
  else if (v15)
  {
    sub_10077A564();
  }
  return v14;
}

uint64_t sub_10056E280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7 = a2 == 4 || a2 == 2;
  if (a2 == 4 || a2 == 2)
  {
    uint64_t v8 = sub_100017768();
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v8 + 384))(v8)) {
      return 0;
    }
  }
  uint64_t v9 = sub_100017768();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v9 + 392))(v9) && v7) {
    return 0;
  }
  uint64_t v13 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = "Logging";
    if (a2 == 1) {
      uint64_t v14 = "Global control";
    }
    BOOL v15 = "Enable";
    if (!a4) {
      BOOL v15 = "Disable";
    }
    int v19 = 136315394;
    __int16 v20 = v14;
    __int16 v21 = 2080;
    char v22 = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Beamforming MRC %s %s", (uint8_t *)&v19, 0x16u);
  }
  uint64_t v16 = sub_10003FB34();
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v16 + 152))(v16, a2, a3, a4);
  uint64_t v11 = v17;
  if (a2 == 1 && v17)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
      sub_10077A5CC();
    }
  }
  else if (v17)
  {
    BOOL v18 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR);
    if (a4)
    {
      if (v18) {
        sub_10077A650();
      }
    }
    else if (v18)
    {
      sub_10077A6B8();
    }
  }
  return v11;
}

uint64_t sub_10056E4B8(uint64_t a1, uint64_t a2)
{
  sub_10003FB34();
  if (sub_100351464())
  {
    int v3 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Disable Enhanced Power save ", buf, 2u);
    }
    uint64_t v4 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 160))(v4))
    {
      uint64_t v5 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)BOOL v15 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Disable Enhanced Power and beamforming", v15, 2u);
      }
      if (qword_1009F8130 != -1) {
        dispatch_once(&qword_1009F8130, &stru_1009B5ED8);
      }
      uint64_t v6 = sub_1002CE1CC();
      if (v6)
      {
        uint64_t v7 = sub_10056DE08(v6, a2, 0, -69, 0, -80, -70, 0);
      }
      else
      {
        uint64_t v12 = sub_10003FB34();
        uint64_t v7 = (*(uint64_t (**)(uint64_t, void, uint64_t, void, uint64_t, void, uint64_t))(*(void *)v12 + 128))(v12, 0, a2, 0, 4294967227, 0, 4294967216);
      }
      sub_10056E094(v7, a2, 0);
      uint64_t v13 = sub_10003FB34();
      if ((*(_DWORD *)(v13 + 712) - 23) > 0x7B8) {
        uint64_t v14 = 2;
      }
      else {
        uint64_t v14 = 4;
      }
      sub_10056E280(v13, v14, a2, 0);
    }
    else
    {
      uint64_t v10 = sub_10003FB34();
      (*(void (**)(uint64_t, uint64_t, uint64_t, void, void, void, uint64_t))(*(void *)v10 + 104))(v10, a2, 1, 0, 0, 0, 4294967227);
      uint64_t v11 = sub_10003FB34();
      (*(void (**)(uint64_t, void))(*(void *)v11 + 120))(v11, 0);
    }
  }
  else
  {
    sub_10003FB34();
    uint64_t result = sub_10035129C();
    if (!result) {
      return result;
    }
    uint64_t v9 = sub_10003FB34();
    (*(void (**)(uint64_t, uint64_t, void, void, void, void))(*(void *)v9 + 184))(v9, a2, 0, 0, 0, 0);
  }
  if (qword_1009F8090 != -1) {
    dispatch_once(&qword_1009F8090, &stru_1009B5E98);
  }
  return sub_1004D55B8((uint64_t)off_1009F8088, a2, 0xFFFFFFFFLL, 0, 703, 0);
}

void sub_10056E778(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v8 = sub_100035F54();
  int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 136))(v8);
  if (a2 && v9)
  {
    if (*(unsigned char *)(a1 + 344))
    {
      char v48 = 0;
      sub_10001B8E0(&v48);
      int v10 = sub_100181D84(a2 + 128);
      sub_10001B910(&v48);
      uint64_t v11 = sub_100035F54();
      if ((((*(unsigned int (**)(uint64_t))(*(void *)v11 + 160))(v11) | v10) & 1) == 0)
      {
        uint64_t v12 = sub_100017768();
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v12 + 352))(v12))
        {
          BOOL v18 = qword_100A19E48;
          if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
          {
            int v19 = "A2DP";
            if (a4 == 1) {
              int v19 = "HFP";
            }
            __int16 v20 = "started";
            if (!a3) {
              __int16 v20 = "stopped";
            }
            *(_DWORD *)long long buf = 136315394;
            int v50 = v19;
            __int16 v51 = 2080;
            double v52 = v20;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%s stream %s: Diversity inactive since role is peripheral or not supporting TxBF", buf, 0x16u);
          }
          goto LABEL_72;
        }
      }
      unsigned int v13 = *(_DWORD *)(sub_10003FB34() + 712);
      if (!a3)
      {
        uint64_t v16 = qword_100A19E48;
        if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v17 = "A2DP";
          if (a4 == 1) {
            uint64_t v17 = "HFP";
          }
          *(_DWORD *)long long buf = 136315138;
          int v50 = v17;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%s stream stopped: Disabling diversity", buf, 0xCu);
        }
        if (v13 <= 0x13) {
          sub_10056F21C(a1, 0, 3);
        }
        goto LABEL_72;
      }
      sub_1002B804C(&v48);
      if (a4 == 1)
      {
        uint64_t v14 = sub_100197A88(a2 + 128);
      }
      else
      {
        if (a4 != 2)
        {
          __int16 v21 = 0;
          goto LABEL_27;
        }
        uint64_t v14 = sub_100197A30(a2 + 128);
      }
      __int16 v21 = (unsigned __int16 *)v14;
LABEL_27:
      if (sub_100476674(a2) == 2 || sub_100476674(a2) == 3)
      {
        char v22 = qword_100A19E48;
        if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Low Latency Traffic detected, use ACL Connection instead", buf, 2u);
        }
        __int16 v21 = (unsigned __int16 *)sub_100197A30(a2 + 128);
      }
      sub_10001B910(&v48);
      if (!v21) {
        goto LABEL_72;
      }
      __int16 v23 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        char v24 = "A2DP";
        if (a4 == 1) {
          char v24 = "HFP";
        }
        *(_DWORD *)long long buf = 136315138;
        int v50 = v24;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "%s stream started: Enabling diversity/TxBF", buf, 0xCu);
      }
      if (v13 <= 0x13) {
        sub_10056F21C(a1, v21, 3);
      }
      uint64_t v25 = sub_100035F54();
      if (((*(uint64_t (**)(uint64_t))(*(void *)v25 + 144))(v25) & 1) == 0)
      {
        uint64_t v26 = sub_100035F54();
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v26 + 152))(v26)) {
          goto LABEL_66;
        }
      }
      int v27 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Platform supports enhanced diversity, configuring antenna pair before enabling diversity", buf, 2u);
      }
      uint64_t v28 = sub_100017768();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v28 + 368))(v28))
      {
        uint64_t v29 = qword_100A19E48;
        if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Warning: Forcing enhanced diversity antenna pair via defaults write", buf, 2u);
        }
        uint64_t v30 = sub_100017768();
        int v31 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 376))(v30);
        int v32 = sub_10056F3CC(a1, v31);
        uint64_t v33 = qword_100A19E48;
        BOOL v34 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
        if (v32)
        {
          if (v34)
          {
            *(_WORD *)long long buf = 0;
            char v35 = "Warning: Forcing enhanced diversity antenna pair via defaults write failed";
            int v36 = v33;
            uint32_t v37 = 2;
LABEL_65:
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, v35, buf, v37);
          }
LABEL_66:
          if (v13 < 0x14) {
            int v44 = 5;
          }
          else {
            int v44 = 6;
          }
          uint64_t v45 = sub_100017768();
          if ((*(unsigned int (**)(uint64_t))(*(void *)v45 + 320))(v45))
          {
            uint64_t v46 = sub_100017768();
            int v44 = (*(uint64_t (**)(uint64_t))(*(void *)v46 + 328))(v46);
          }
          uint64_t v47 = sub_10056F21C(a1, v21, v44);
          sub_10056F6B0(v47, v21, 1);
LABEL_72:
          sub_10001B8AC(&v48);
          return;
        }
        if (!v34) {
          goto LABEL_66;
        }
        if (*(unsigned char *)(a1 + 868)) {
          __int16 v43 = "default";
        }
        else {
          __int16 v43 = "non-default";
        }
        *(_DWORD *)long long buf = 136315138;
        int v50 = v43;
        char v35 = "Warning: Enhanced diversity antenna pair set to %s config at stream start based on defaults write";
      }
      else
      {
        uint64_t v38 = sub_10003FFD4();
        unsigned int v39 = (*(uint64_t (**)(uint64_t))(*(void *)v38 + 248))(v38);
        unsigned int v40 = v39;
        if (v39 >= 2 && v39 != *(_DWORD *)(a1 + 872))
        {
          unsigned int v41 = qword_100A19E48;
          if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Device orientation outdated, updating orientation first", buf, 2u);
          }
          *(_DWORD *)(a1 + 872) = v40;
        }
        sub_10056F528(a1);
        uint64_t v33 = qword_100A19E48;
        if (!os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_66;
        }
        if (*(unsigned char *)(a1 + 868)) {
          int v42 = "default";
        }
        else {
          int v42 = "non-default";
        }
        *(_DWORD *)long long buf = 136315138;
        int v50 = v42;
        char v35 = "Enhanced diversity antenna pair set to %s config at stream start based on orientation";
      }
      int v36 = v33;
      uint32_t v37 = 12;
      goto LABEL_65;
    }
    BOOL v15 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Stack is not ready, cannot update diversity settings", buf, 2u);
    }
  }
}

void sub_10056EE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_10056EEC0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1009FB120 != -1) {
    dispatch_once(&qword_1009FB120, &stru_1009B5FB0);
  }
  uint64_t v2 = off_1009FB118;

  sub_10062ECC4((uint64_t)v2, v1 + 16);
}

void sub_10056EF24(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1009FB120 != -1) {
    dispatch_once(&qword_1009FB120, &stru_1009B5FB0);
  }
  uint64_t v2 = off_1009FB118;

  sub_10062ED9C((uint64_t)v2, v1 + 16);
}

uint64_t sub_10056EF88()
{
  __int16 v9 = 0;
  uint64_t v8 = 0;
  __int16 v5 = 10;
  BOOL v0 = sub_1003FAF7C() == 83 || sub_1003FAF7C() == 28;
  uint64_t v1 = sub_10003FB34();
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, BOOL, void, void, __int16 *, uint64_t *))(*(void *)v1 + 904))(v1, 4095, 2, v0, 0, 0, &v5, &v8);
  int v3 = qword_100A19E48;
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
      sub_10077A720();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 67109120;
    BOOL v7 = v0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Default BT antenna set to %d", buf, 8u);
  }
  return v2;
}

uint64_t sub_10056F0DC(uint64_t a1, int a2)
{
  __int16 v11 = 0;
  uint64_t v10 = 0;
  __int16 v7 = 10;
  uint64_t v3 = *(void *)sub_10003FB34();
  uint64_t v4 = (*(uint64_t (**)(void))(v3 + 904))();
  __int16 v5 = qword_100A19E48;
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
      sub_10077A78C();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 67109120;
    int v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Diversity follow mode set to %d", buf, 8u);
  }
  return v4;
}

uint64_t sub_10056F21C(uint64_t a1, unsigned __int16 *a2, int a3)
{
  if (a2) {
    int v5 = *a2;
  }
  else {
    int v5 = 4095;
  }
  uint64_t v6 = sub_100035F54();
  unsigned __int8 v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 160))(v6);
  uint64_t v8 = *(void *)sub_10003FB34();
  if (((a3 > 5) & v7) != 0) {
    unsigned __int8 v9 = -125;
  }
  else {
    unsigned __int8 v9 = 0;
  }
  uint64_t v10 = (*(uint64_t (**)(void))(v8 + 904))();
  __int16 v11 = qword_100A19E48;
  if (v10)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
      sub_10077A7F4();
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_INFO))
    {
      v13[0] = 67109632;
      v13[1] = a3;
      __int16 v14 = 1024;
      int v15 = v5;
      __int16 v16 = 1024;
      int v17 = v9;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Diversity mode %d set on handle %d with beamforming/diversity threshold %d", (uint8_t *)v13, 0x14u);
    }
    *(_DWORD *)(a1 + 864) = a3;
  }
  return v10;
}

uint64_t sub_10056F3CC(uint64_t a1, int a2)
{
  __int16 v12 = 0;
  uint64_t v11 = 0;
  __int16 v8 = 10;
  uint64_t v4 = *(void *)sub_10003FB34();
  uint64_t v5 = (*(uint64_t (**)(void))(v4 + 904))();
  if (v5)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
      sub_10077A85C();
    }
  }
  else
  {
    *(unsigned char *)(a1 + 868) = a2 == 1;
    uint64_t v6 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      int v10 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Diversity antenna pair set to (0, %d)", buf, 8u);
    }
  }
  return v5;
}

void sub_10056F528(uint64_t a1)
{
  int v2 = 1;
  int v3 = sub_1003FAF7C();
  if (v3 > 72)
  {
    if (v3 > 125)
    {
      if (v3 == 126 || v3 == 128) {
        return;
      }
      goto LABEL_12;
    }
    if ((v3 - 73) >= 2)
    {
      if (v3 == 84)
      {
        if (*(_DWORD *)(a1 + 872) == 7) {
          int v2 = 1;
        }
        else {
          int v2 = 2;
        }
      }
      goto LABEL_12;
    }
  }
  else
  {
    if ((v3 - 67) < 2)
    {
LABEL_5:
      BOOL v4 = (*(_DWORD *)(a1 + 872) & 0xFFFFFFFE) == 6;
      goto LABEL_9;
    }
    if ((v3 - 69) >= 2)
    {
      if ((v3 - 71) >= 2) {
        goto LABEL_12;
      }
      goto LABEL_5;
    }
  }
  BOOL v4 = *(_DWORD *)(a1 + 872) == 2;
LABEL_9:
  if (v4) {
    int v2 = 2;
  }
  else {
    int v2 = 1;
  }
LABEL_12:
  int v5 = sub_10056F3CC(a1, v2);
  uint64_t v6 = qword_100A19E48;
  if (v5)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
      sub_10077A8C4();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(_DWORD *)(a1 + 872);
    v8[0] = 67109376;
    v8[1] = v7;
    __int16 v9 = 1024;
    int v10 = v2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Device orientation set to %d, setting diversity antenna to %d", (uint8_t *)v8, 0xEu);
  }
}

uint64_t sub_10056F6B0(uint64_t a1, unsigned __int16 *a2, int a3)
{
  uint64_t v5 = sub_100017768();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v5 + 336))(v5)) {
    return 0;
  }
  if (a3)
  {
    uint64_t v6 = sub_100017768();
    a3 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 344))(v6);
  }
  int v7 = *a2;
  __int16 v17 = 0;
  uint64_t v16 = 0;
  uint64_t v8 = *(void *)sub_10003FB34();
  uint64_t v9 = (*(uint64_t (**)(void))(v8 + 904))();
  int v10 = qword_100A19E48;
  if (v9)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
      sub_10077A93C();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 67109376;
    int v13 = a3;
    __int16 v14 = 1024;
    int v15 = v7;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Diversity log mode %d set on handle %d", buf, 0xEu);
  }
  return v9;
}

uint64_t *sub_10056F87C(uint64_t a1, unint64_t a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, _DWORD *a6, uint64_t a7)
{
  if (qword_1009FB058 != -1) {
    dispatch_once(&qword_1009FB058, &stru_1009B5E58);
  }
  __n128 v23 = 0uLL;
  int v24 = 0;
  uint64_t result = (uint64_t *)sub_100512164((uint64_t)off_1009FB050, a2, &v23);
  if (result)
  {
    unsigned __int32 v16 = v23.n128_u32[0];
    unsigned __int32 v15 = v23.n128_u32[1];
    unsigned __int32 v17 = v23.n128_u32[3];
    *(_DWORD *)(a1 + 1052) = v23.n128_u32[1];
    *(_DWORD *)(a1 + 1056) = v16;
    *(_DWORD *)(a1 + 1072) = v17;
    *a3 = v15 - *(_DWORD *)(a1 + 1064);
    *a4 = v16 - *(_DWORD *)(a1 + 1068);
    *a6 = v17 - *(_DWORD *)(a1 + 1076);
    int v18 = *(_DWORD *)(a1 + 1060);
    if (v18 == 128)
    {
      unsigned int v19 = *a4;
      if (*a4 <= 0x41)
      {
        int v20 = 66;
        goto LABEL_10;
      }
    }
    else if (v18 == 256)
    {
      unsigned int v19 = *a4;
      if (*a4 <= 0x84)
      {
        int v20 = 133;
LABEL_10:
        *a5 = v20 - v19;
      }
    }
    *(_DWORD *)(a1 + 1064) = v15;
    *(_DWORD *)(a1 + 1068) = v16;
    *(_DWORD *)(a1 + 1076) = v17;
    uint64_t v21 = sub_100017768();
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v21 + 8))(v21);
    if (result)
    {
      int v22 = *(_DWORD *)(a1 + 1060);
      if ((v22 - 127) < 3 || v22 == 256) {
        return sub_10056FA08((uint64_t *)a1, a2, *a3, *a4, *a5, v23.n128_i32[2], (uint64_t)&v23, a7);
      }
    }
  }
  return result;
}

uint64_t *sub_10056FA08(uint64_t *result, unint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6, uint64_t a7, uint64_t a8)
{
  unint64_t v35 = a2;
  if (a4 | a3 | a5)
  {
    __int16 v14 = result;
    int v15 = *(char *)(a8 + 6);
    unsigned int v16 = v15 < -90;
    if (v15 >= -90) {
      int v17 = 1;
    }
    else {
      int v17 = 2;
    }
    if (*(char *)(a8 + 217) > -85) {
      unsigned int v16 = v17;
    }
    if (*(char *)(a8 + 218) > -85) {
      ++v16;
    }
    if (*(char *)(a8 + 219) > -85) {
      ++v16;
    }
    if (v16 <= 1) {
      int v18 = 15;
    }
    else {
      int v18 = 45;
    }
    unsigned int v19 = v18 * (a5 + a4) / 0x64;
    if (v19 < a3
      || (a4 / 0x14 >= a5 ? (int v20 = 1) : (int v20 = 2),
          a6 ? (BOOL v21 = v20) : (BOOL v21 = a4 / 0x14 < a5),
          v19 < *(unsigned __int16 *)(a8 + 28)))
    {
      BOOL v21 = 1;
    }
    HIWORD(v22) = 17096;
    LOWORD(v22) = *(_WORD *)(a8 + 70);
    float v23 = (float)((float)(*(unsigned __int16 *)(a8 + 64)
                        + *(unsigned __int16 *)(a8 + 52)
                        + *(unsigned __int16 *)(a8 + 74))
                * 100.0)
        / (float)v22;
    if (v23 <= 20.0)
    {
      if (v23 < 5.0) {
        *((unsigned char *)result + 384) = 0;
      }
    }
    else
    {
      unsigned int v24 = ++*((unsigned char *)result + 384);
      if (v24 >= 0x3C) {
        sub_10055FB28((uint64_t)result, a2, 60);
      }
    }
    uint64_t v25 = (uint64_t **)(v14 + 24);
    if (!v21)
    {
      *(void *)long long buf = &v35;
      BOOL v34 = v25;
LABEL_36:
      uint64_t result = sub_1000097B0(v34, &v35, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
      *(_DWORD *)(result[5] + 100) = 0;
      return result;
    }
    *(void *)long long buf = &v35;
    uint64_t v26 = sub_1000097B0(v25, &v35, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
    ++*(_DWORD *)(v26[5] + 100);
    int v27 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)long long buf = &v35;
      int v28 = *(_DWORD *)(sub_1000097B0(v25, &v35, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 100);
      *(void *)long long buf = &v35;
      int v29 = *(_DWORD *)(sub_1000097B0(v25, &v35, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 96);
      int v30 = *(unsigned __int8 *)(a7 + 16);
      int v31 = *(unsigned __int16 *)(a8 + 28);
      *(_DWORD *)long long buf = 67110912;
      *(_DWORD *)&uint8_t buf[4] = a3;
      __int16 v37 = 1024;
      unsigned int v38 = a4;
      __int16 v39 = 1024;
      unsigned int v40 = a5;
      __int16 v41 = 1024;
      int v42 = a6;
      __int16 v43 = 1024;
      int v44 = v28;
      __int16 v45 = 1024;
      int v46 = v29;
      __int16 v47 = 1024;
      int v48 = v30;
      __int16 v49 = 1024;
      int v50 = v31;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "AudioQuality PLC %u,RxCnt %u,Miss %u,LengthErr %u,Credit %u, total credit:%u,isHDR:%u,NAK %u", buf, 0x32u);
    }
    *(void *)long long buf = &v35;
    uint64_t result = sub_1000097B0(v25, &v35, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
    if (*(_DWORD *)(result[5] + 100) >= 0xAu)
    {
      int v32 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "AudioQuality need to trigger banner", buf, 2u);
      }
      *(void *)long long buf = &v35;
      uint64_t v33 = sub_1000097B0(v25, &v35, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
      ++*(_DWORD *)(v33[5] + 96);
      *(void *)long long buf = &v35;
      BOOL v34 = v25;
      goto LABEL_36;
    }
  }
  return result;
}

void sub_10056FDD0(uint64_t a1, int a2, int a3, int a4)
{
  int v7 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    if (a3 > 4u) {
      CFStringRef v8 = &stru_1009C1AC8;
    }
    else {
      CFStringRef v8 = (const __CFString *)*((void *)&off_1009B5FF0 + (char)a3);
    }
    *(_DWORD *)long long buf = 138412290;
    CFStringRef v34 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "statedump: ----------Use Case-----------------%@ Target ePA Tx Power,Ant0(Ant1)----------------Power Caps----------------", buf, 0xCu);
  }
  if (a2)
  {
    int v9 = 0;
    int v10 = 4 * a3 + 4;
    int v11 = v10 + a4;
    int v28 = a4 + 23;
    uint64_t v12 = v10;
    do
    {
      uint64_t v13 = 0;
      int v31 = 0;
      int v32 = 0;
      char v14 = 1;
      do
      {
        char v15 = v14;
        unsigned int v16 = *(unsigned __int8 *)(a1 + 400 + (v12 | (2 * v13)));
        buf[v13 - 4] = v16;
        unsigned int v17 = *(unsigned __int8 *)(a1 + 400 + v11 + 2 * (int)v13);
        *((unsigned char *)&v31 + v13 + 2) = v17;
        unsigned int v18 = *(unsigned __int8 *)(a1 + 400 + (v28 + v9 + v13 * a2));
        *((unsigned char *)&v31 + v13) = v18;
        if (v16 >= v18) {
          unsigned int v16 = v18;
        }
        if (v17 >= v16) {
          LOBYTE(v17) = v16;
        }
        buf[v13 - 2] = v17;
        uint64_t v13 = 1;
        char v14 = 0;
      }
      while ((v15 & 1) != 0);
      sub_10056C660(a1, v9);
      int v30 = (__CFString *)objc_claimAutoreleasedReturnValue();
      unsigned int v19 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        LOBYTE(v21) = HIBYTE(v32);
        LOBYTE(v20) = BYTE2(v32);
        LOBYTE(v23) = BYTE1(v32);
        LOBYTE(v22) = v32;
        LOBYTE(v25) = HIBYTE(v31);
        LOBYTE(v24) = BYTE2(v31);
        LOBYTE(v27) = BYTE1(v31);
        LOBYTE(v26) = v31;
        *(_DWORD *)long long buf = 138414338;
        CFStringRef v34 = v30;
        __int16 v35 = 2048;
        double v36 = (double)v20 * 0.25;
        __int16 v37 = 2048;
        double v38 = (double)v21 * 0.25;
        __int16 v39 = 2048;
        double v40 = (double)v22 * 0.25;
        __int16 v41 = 2048;
        double v42 = (double)v23 * 0.25;
        __int16 v43 = 2048;
        double v44 = (double)v24 * 0.25;
        __int16 v45 = 2048;
        double v46 = (double)v25 * 0.25;
        __int16 v47 = 2048;
        double v48 = (double)v26 * 0.25;
        __int16 v49 = 2048;
        double v50 = (double)v27 * 0.25;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "statedump: %@          %.2f(%.2f) dBm          [%.2f(%.2f),%.2f(%.2f),%.2f(%.2f)]", buf, 0x5Cu);
      }

      ++v9;
    }
    while (v9 != a2);
  }
}

void sub_1005700A0(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "statedump: -------------------------------Link------------------Target iPA Tx Power,Ant0(Ant1)-------------------------", buf, 2u);
  }
  if (a2)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = a3;
    uint64_t v10 = a2;
    int v11 = (unsigned __int8 *)(a1 + 405);
    do
    {
      if (*(v11 - 2) >= v11[v9 - 2]) {
        unsigned int v12 = v11[v9 - 2];
      }
      else {
        unsigned int v12 = *(v11 - 2);
      }
      if (*v11 >= v11[v9]) {
        unsigned int v13 = v11[v9];
      }
      else {
        unsigned int v13 = *v11;
      }
      char v14 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        CFStringRef v15 = &stru_1009C1AC8;
        if (v8 <= 4u) {
          CFStringRef v15 = *(const __CFString **)((char *)&off_1009B5FF0 + (v7 >> 53));
        }
        *(_DWORD *)long long buf = 138412802;
        CFStringRef v17 = v15;
        __int16 v18 = 2048;
        double v19 = (double)v12 * 0.25;
        __int16 v20 = 2048;
        double v21 = (double)v13 * 0.25;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "statedump:                              %5@                         %4.2f(%4.2f) dBm", buf, 0x20u);
      }
      v11 += 4;
      ++v8;
      v7 += 0x100000000000000;
    }
    while (v10 != v8);
  }
}

void sub_100570260(uint64_t a1)
{
  int v2 = *(_DWORD *)(sub_10003FB34() + 712);
  if ((v2 - 1) > 0x7CE)
  {
    if ((v2 - 2000) <= 0x7CF && *(_WORD *)(a1 + 828) && *(_WORD *)(a1 + 830) && *(_WORD *)(a1 + 832))
    {
      sub_10056CC80((unsigned __int8 *)a1, v2);
      sub_10056C7C8((unsigned __int8 *)a1, v2);
    }
  }
  else
  {
    unsigned int v3 = *(unsigned __int16 *)(a1 + 826);
    if (*(_WORD *)(a1 + 826))
    {
      if (v3 <= 0xD3) {
        int v4 = 8;
      }
      else {
        int v4 = 12;
      }
      if (v3 <= 0xD3) {
        unsigned int v5 = 3;
      }
      else {
        unsigned int v5 = 5;
      }
      uint64_t v6 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        v7[0] = 67109120;
        v7[1] = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "statedump: ===================================== Bluetooth Tx Power Targets (CC%d) ====================================", (uint8_t *)v7, 8u);
      }
      sub_10056FDD0(a1, v4, 1, 23);
      if (v3 >= 0xD4)
      {
        sub_10056FDD0(a1, 12, 3, 23);
        sub_10056FDD0(a1, 12, 4, 23);
      }
      sub_1005700A0(a1, v5, 0x17u);
    }
  }
}

void sub_10057041C(uint64_t a1)
{
  int v2 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: ------------------- Audio Link Manager -------------------", v3, 2u);
  }
  sub_100570260(a1);
}

void sub_100570490(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  int v4 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))off_100A13940;
  int v11 = off_100A13940;
  if (!off_100A13940)
  {
    unsigned int v5 = sub_100576BEC();
    v9[3] = (uint64_t)dlsym(v5, "tailspin_kdbg_filter_subclass_set");
    off_100A13940 = (_UNKNOWN *)v9[3];
    int v4 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v9[3];
  }
  _Block_object_dispose(&v8, 8);
  if (v4)
  {
    v4(a1, 1, a2, 1);
  }
  else
  {
    uint64_t v6 = +[NSAssertionHandler currentHandler];
    uint64_t v7 = +[NSString stringWithUTF8String:"void BT::soft_tailspin_kdbg_filter_subclass_set(tailspin_config_t, uint8_t, uint8_t, BOOL)"];
    [v6 handleFailureInFunction:v7 file:@"AudioLinkManager.mm" lineNumber:112 description:@"%s", dlerror()];

    __break(1u);
  }
}

void sub_1005705F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100570620(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  int v2 = (void (*)(uint64_t))off_100A13948;
  uint64_t v9 = off_100A13948;
  if (!off_100A13948)
  {
    unsigned int v3 = sub_100576BEC();
    v7[3] = (uint64_t)dlsym(v3, "tailspin_config_apply_sync");
    off_100A13948 = (_UNKNOWN *)v7[3];
    int v2 = (void (*)(uint64_t))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v2)
  {
    v2(a1);
  }
  else
  {
    int v4 = +[NSAssertionHandler currentHandler];
    unsigned int v5 = +[NSString stringWithUTF8String:"BOOL BT::soft_tailspin_config_apply_sync(const tailspin_config_t)"];
    [v4 handleFailureInFunction:v5 file:@"AudioLinkManager.mm" lineNumber:124 description:@"%s", dlerror()];

    __break(1u);
  }
}

void sub_100570770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1005707A0(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  int v2 = (void (*)(uint64_t))off_100A13950;
  uint64_t v9 = off_100A13950;
  if (!off_100A13950)
  {
    unsigned int v3 = sub_100576BEC();
    v7[3] = (uint64_t)dlsym(v3, "tailspin_config_free");
    off_100A13950 = (_UNKNOWN *)v7[3];
    int v2 = (void (*)(uint64_t))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v2)
  {
    v2(a1);
  }
  else
  {
    int v4 = +[NSAssertionHandler currentHandler];
    unsigned int v5 = +[NSString stringWithUTF8String:"void BT::soft_tailspin_config_free(tailspin_config_t)"];
    [v4 handleFailureInFunction:v5 file:@"AudioLinkManager.mm" lineNumber:118 description:@"%s", dlerror()];

    __break(1u);
  }
}

void sub_1005708F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100570920(uint64_t a1, int a2)
{
  int v2 = *(NSObject **)(a1 + 256);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_100570998;
  v3[3] = &unk_100997570;
  void v3[4] = a1;
  int v4 = a2;
  dispatch_async(v2, v3);
}

void sub_100570998(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(_DWORD *)(a1 + 40);
  if (*(_DWORD *)(v2 + 872) != v3)
  {
    *(_DWORD *)(v2 + 872) = v3;
    sub_1005709BC(v2);
  }
}

void sub_1005709BC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 344))
  {
    uint64_t v2 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 152))(v2))
    {
      sub_100559A60(a1, 0);
    }
    else
    {
      uint64_t v4 = sub_100035F54();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 144))(v4))
      {
        if (*(void *)(a1 + 208))
        {
          unsigned int v5 = *(void **)(a1 + 192);
          if (v5 != (void *)(a1 + 200))
          {
            char v6 = 0;
            while (1)
            {
              uint64_t v7 = v5[5];
              int v8 = *(unsigned __int8 *)(v7 + 72);
              BOOL v9 = *(unsigned char *)(v7 + 72) != 0;
              if (v8) {
                break;
              }
              uint64_t v10 = (void *)v5[1];
              if (v10)
              {
                do
                {
                  int v11 = v10;
                  uint64_t v10 = (void *)*v10;
                }
                while (v10);
              }
              else
              {
                do
                {
                  int v11 = (void *)v5[2];
                  BOOL v12 = *v11 == (void)v5;
                  unsigned int v5 = v11;
                }
                while (!v12);
              }
              v6 |= v9;
              unsigned int v5 = v11;
              if (v11 == (void *)(a1 + 200))
              {
                if ((v6 & 1) == 0) {
                  return;
                }
                break;
              }
            }
            if (*(_DWORD *)(a1 + 864) != 3)
            {
              uint64_t v13 = sub_100017768();
              if (((*(uint64_t (**)(uint64_t))(*(void *)v13 + 368))(v13) & 1) == 0)
              {
                sub_10056F528(a1);
              }
            }
          }
        }
      }
    }
  }
  else
  {
    int v3 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)char v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Stack is not ready, cannot update device orientation", v14, 2u);
    }
  }
}

void sub_100570B88(uint64_t a1, int a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 192);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_100570998;
  v3[3] = &unk_100997570;
  void v3[4] = a1 - 64;
  int v4 = a2;
  dispatch_async(v2, v3);
}

uint64_t sub_100570C04(uint64_t a1)
{
  return sub_100559A60(a1, 1);
}

uint64_t sub_100570C0C(uint64_t a1)
{
  return sub_100559A60(a1 - 136, 1);
}

uint64_t sub_100570C18(uint64_t a1)
{
  return sub_100559A60(a1, 0);
}

uint64_t sub_100570C20(uint64_t a1)
{
  return sub_100559A60(a1 - 136, 0);
}

uint64_t sub_100570C2C(uint64_t a1, unint64_t a2)
{
  unint64_t v28 = a2;
  __p[0] = &v28;
  int v3 = sub_1000097B0((uint64_t **)(a1 + 192), &v28, (uint64_t)&unk_1007BE9D0, (uint64_t **)__p);
  uint64_t v4 = *(void *)(a1 + 1112);
  if (v4)
  {
    unsigned int v5 = *(unsigned __int16 *)(v3[5] + 84);
    char v6 = (void *)(a1 + 1112);
    uint64_t v7 = a1 + 1112;
    do
    {
      unsigned int v8 = *(unsigned __int16 *)(v4 + 32);
      BOOL v9 = v8 >= v5;
      if (v8 >= v5) {
        uint64_t v10 = (uint64_t *)v4;
      }
      else {
        uint64_t v10 = (uint64_t *)(v4 + 8);
      }
      if (v9) {
        uint64_t v7 = v4;
      }
      uint64_t v4 = *v10;
    }
    while (*v10);
    if ((void *)v7 != v6 && v5 >= *(unsigned __int16 *)(v7 + 32))
    {
      int v11 = *(void **)(a1 + 1104);
      if (v11 != v6)
      {
        char v12 = 0;
        while (1)
        {
          if (qword_1009F7F00 != -1) {
            dispatch_once(&qword_1009F7F00, &stru_1009B5F38);
          }
          uint64_t v13 = *(void *)(v11[5] + 8);
          __int16 v14 = *(_WORD *)(v13 + 4);
          LODWORD(__p[0]) = *(_DWORD *)v13;
          WORD2(__p[0]) = v14;
          uint64_t v15 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)__p, 1);
          unsigned int v16 = qword_100A19E48;
          if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
          {
            sub_100475EE0(v15, (uint64_t)__p);
            int v17 = v27;
            __int16 v18 = (void **)__p[0];
            int v19 = sub_10048751C(v15);
            *(_DWORD *)long long buf = 136315394;
            __int16 v20 = __p;
            if (v17 < 0) {
              __int16 v20 = v18;
            }
            int v30 = v20;
            __int16 v31 = 1024;
            int v32 = v19;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Wireless Splitter %s spatial allowed %d", buf, 0x12u);
            if (v27 < 0) {
              operator delete(__p[0]);
            }
          }
          int v21 = sub_10048751C(v15);
          if (v21 != 1) {
            break;
          }
          unint64_t v22 = (void *)v11[1];
          if (v22)
          {
            do
            {
              unint64_t v23 = v22;
              unint64_t v22 = (void *)*v22;
            }
            while (v22);
          }
          else
          {
            do
            {
              unint64_t v23 = (void *)v11[2];
              BOOL v24 = *v23 == (void)v11;
              int v11 = v23;
            }
            while (!v24);
          }
          v12 |= v21 == 1;
          int v11 = v23;
          if (v23 == v6) {
            return v12 & 1;
          }
        }
      }
    }
  }
  char v12 = 0;
  return v12 & 1;
}

void sub_100570E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100570E94(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 1128);
  if (v2)
  {
    if (a2)
    {
      uint64_t v4 = sub_10003FFD4();
      (*(void (**)(uint64_t, void))(*(void *)v4 + 152))(v4, *(void *)(a1 + 216));
      uint64_t v5 = sub_10003FFD4();
      sub_100471048(v5 + 728, a1 + 32);
      int v6 = **(unsigned __int8 **)(a1 + 216);
      double Current = CFAbsoluteTimeGetCurrent();
      uint64_t v8 = *(void *)(a1 + 1128);
      if (v6)
      {
        *(double *)(v8 + 16) = Current;
        *(void *)(v8 + 24) = 0;
      }
      else
      {
        *(double *)(v8 + 24) = Current;
        *(void *)(v8 + 16) = 0;
      }
    }
    else
    {
      int v9 = **(unsigned __int8 **)(a1 + 216);
      double v10 = CFAbsoluteTimeGetCurrent();
      uint64_t v11 = 16;
      if (!v9) {
        uint64_t v11 = 24;
      }
      *(_DWORD *)(v2 + 48) += (v10 - *(double *)(*(void *)(a1 + 1128) + v11));
      uint64_t v12 = sub_10003FFD4();
      sub_100471358(v12 + 728, a1 + 32);
      **(unsigned char **)(a1 + 216) = 1;
    }
  }
}

BOOL sub_100570F84(void *a1, uint64_t a2, void *a3)
{
  unint64_t v3 = a1[140];
  if (v3 < 2)
  {
    uint64_t v7 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Wireless Splitter - getWirelessSplitterAddresses, disabled", buf, 2u);
    }
  }
  else
  {
    uint64_t v5 = (void *)a1[139];
    if (v5)
    {
      do
      {
        int v6 = v5;
        uint64_t v5 = (void *)v5[1];
      }
      while (v5);
    }
    else
    {
      uint64_t v8 = a1 + 139;
      do
      {
        int v6 = (void *)v8[2];
        BOOL v9 = *v6 == (void)v8;
        uint64_t v8 = v6;
      }
      while (v9);
    }
    uint64_t v10 = v6[5];
    uint64_t v11 = *(int **)(*(void *)(a1[138] + 40) + 8);
    __int16 v12 = *((_WORD *)v11 + 2);
    int v27 = *v11;
    __int16 v28 = v12;
    uint64_t v13 = *(void *)(v10 + 8);
    __int16 v14 = *(_WORD *)(v13 + 4);
    LODWORD(v13) = *(_DWORD *)v13;
    int v25 = v13;
    __int16 v26 = v14;
    *(_DWORD *)a2 = v27;
    *(_WORD *)(a2 + 4) = v12;
    *(_DWORD *)(a2 + 6) = v13;
    *(_WORD *)(a2 + 10) = v14;
    uint64_t v15 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      sub_1004A82EC((unsigned __int8 *)&v27, buf);
      int v16 = v24;
      int v17 = *(uint8_t **)buf;
      sub_1004A82EC((unsigned __int8 *)&v25, __p);
      __int16 v18 = buf;
      if (v16 < 0) {
        __int16 v18 = v17;
      }
      if (v22 >= 0) {
        int v19 = __p;
      }
      else {
        int v19 = (void **)__p[0];
      }
      *(_DWORD *)int v29 = 136315394;
      int v30 = v18;
      __int16 v31 = 2080;
      int v32 = v19;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Wireless Splitter - getWirelessSplitterAddresses, enabled user1: %s user2: %s", v29, 0x16u);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
      if (v24 < 0) {
        operator delete(*(void **)buf);
      }
    }
    *a3 = 2;
  }
  return v3 > 1;
}

void sub_10057117C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005711A0(uint64_t a1@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *(void **)(a1 + 1104);
  unint64_t v3 = (void *)(a1 + 1112);
  if (v2 != (void *)(a1 + 1112))
  {
    uint64_t v5 = 0;
    int v6 = a2 + 2;
    do
    {
      __int16 v7 = *((_WORD *)v2 + 16);
      if ((unint64_t)v5 >= *v6)
      {
        uint64_t v8 = *a2;
        uint64_t v9 = v5 - *a2;
        if (v9 <= -3) {
          abort();
        }
        uint64_t v10 = v9 >> 1;
        unint64_t v11 = *v6 - (void)v8;
        if (v11 <= (v9 >> 1) + 1) {
          uint64_t v12 = v10 + 1;
        }
        else {
          uint64_t v12 = *v6 - (void)v8;
        }
        if (v11 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v13 = v12;
        }
        if (v13)
        {
          __int16 v14 = (char *)sub_1002C5544((uint64_t)v6, v13);
          uint64_t v8 = *a2;
          uint64_t v5 = a2[1];
        }
        else
        {
          __int16 v14 = 0;
        }
        uint64_t v15 = &v14[2 * v10];
        *(_WORD *)uint64_t v15 = v7;
        int v16 = v15 + 2;
        while (v5 != v8)
        {
          __int16 v17 = *((_WORD *)v5 - 1);
          v5 -= 2;
          *((_WORD *)v15 - 1) = v17;
          v15 -= 2;
        }
        *a2 = v15;
        a2[1] = v16;
        a2[2] = &v14[2 * v13];
        if (v8) {
          operator delete(v8);
        }
        uint64_t v5 = v16;
      }
      else
      {
        *(_WORD *)uint64_t v5 = v7;
        v5 += 2;
      }
      a2[1] = v5;
      __int16 v18 = (void *)v2[1];
      if (v18)
      {
        do
        {
          int v19 = v18;
          __int16 v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          int v19 = (void *)v2[2];
          BOOL v20 = *v19 == (void)v2;
          uint64_t v2 = v19;
        }
        while (!v20);
      }
      uint64_t v2 = v19;
    }
    while (v19 != v3);
  }
}

void sub_1005712DC(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005712FC(uint64_t a1)
{
  if (qword_1009FB058 != -1) {
    dispatch_once(&qword_1009FB058, &stru_1009B5E58);
  }
  uint64_t v2 = sub_100512018((uint64_t)off_1009FB050, *(void *)(a1 + 40));
  if (v2)
  {
    uint64_t v3 = v2;
    char v14 = 0;
    sub_10001B8E0(&v14);
    unsigned int v4 = sub_100276534(v3 + 400);
    int v5 = sub_100150FFC(v4, *(unsigned char *)(a1 + 48) == 0);
    sub_10001B910(&v14);
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v5 != 0;
    int v6 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(unsigned __int8 *)(a1 + 48);
      sub_100474E18(*(void *)(a1 + 40), __p);
      uint64_t v8 = "disabled";
      if (!v7) {
        uint64_t v8 = "re-enabled";
      }
      uint64_t v9 = "successfully";
      if (v5) {
        uint64_t v9 = "not successfully";
      }
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = v9;
      if (v16 >= 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = *(unsigned char **)__p;
      }
      __int16 v18 = 2080;
      int v19 = v8;
      __int16 v20 = 2082;
      int v21 = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Wireless Splitter %s %s inband ringtone for phone call support for device %{public}s", buf, 0x20u);
      if (v16 < 0) {
        operator delete(*(void **)__p);
      }
    }
    sub_10001B8AC(&v14);
  }
  else
  {
    unint64_t v11 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 40);
      if (v12)
      {
        sub_100474E18(v12, buf);
        if (v20 >= 0) {
          uint64_t v13 = buf;
        }
        else {
          uint64_t v13 = *(unsigned char **)buf;
        }
        *(_DWORD *)long long __p = 136446210;
        *(void *)&__p[4] = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Wireless Splitter looks like HFP Service for device %{public}s is not available", __p, 0xCu);
        if (SHIBYTE(v20) < 0) {
          operator delete(*(void **)buf);
        }
      }
      else
      {
        *(_DWORD *)long long __p = 136446210;
        *(void *)&__p[4] = "NULL";
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Wireless Splitter looks like HFP Service for device %{public}s is not available", __p, 0xCu);
      }
    }
  }
}

void sub_100571578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_100571598(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 256);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10057160C;
  block[3] = &unk_100997528;
  void block[4] = a1;
  dispatch_async(v1, block);
}

void sub_10057160C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v1 + 350))
  {
    *(CFAbsoluteTime *)(v1 + 392) = CFAbsoluteTimeGetCurrent();
    *(unsigned char *)(v1 + 350) = 1;
  }
}

void sub_100571644(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 256);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1005716B8;
  v3[3] = &unk_100998260;
  void v3[4] = a1;
  void v3[5] = a2;
  dispatch_async(v2, v3);
}

uint64_t *sub_1005716B8(uint64_t *result)
{
  uint64_t v1 = result[4];
  if (!*(unsigned char *)(v1 + 349) && *(unsigned char *)(v1 + 350))
  {
    uint64_t v3 = (unint64_t *)(result + 5);
    unint64_t v2 = result[5];
    if (v2)
    {
      unsigned int v4 = *(void **)(v1 + 200);
      if (v4)
      {
        int v5 = (uint64_t **)(v1 + 192);
        int v6 = (void *)(v1 + 200);
        do
        {
          unint64_t v7 = v4[4];
          BOOL v8 = v7 >= v2;
          if (v7 >= v2) {
            uint64_t v9 = v4;
          }
          else {
            uint64_t v9 = v4 + 1;
          }
          if (v8) {
            int v6 = v4;
          }
          unsigned int v4 = (void *)*v9;
        }
        while (*v9);
        if (v6 != (void *)(v1 + 200) && v2 >= v6[4])
        {
          uint64_t v13 = (unint64_t *)(result + 5);
          uint64_t result = sub_1000097B0(v5, v3, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v13);
          if (*(void *)(result[5] + 24))
          {
            uint64_t v10 = *(void *)(v1 + 392);
            uint64_t v13 = v3;
            *(void *)(*(void *)(sub_1000097B0(v5, v3, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v13)[5] + 24) + 32) = v10;
            double Current = CFAbsoluteTimeGetCurrent();
            uint64_t v13 = v3;
            double v12 = Current
                - *(double *)(*(void *)(sub_1000097B0(v5, v3, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v13)[5] + 24)
                            + 32);
            uint64_t v13 = v3;
            uint64_t result = sub_1000097B0(v5, v3, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v13);
            *(double *)(*(void *)(result[5] + 24) + 104) = v12;
          }
        }
      }
    }
    *(unsigned char *)(v1 + 349) = 1;
  }
  return result;
}

void sub_100571814(uint64_t a1, uint64_t a2, int a3, char a4)
{
  unsigned int v4 = *(NSObject **)(a1 + 256);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100571890;
  block[3] = &unk_1009A28D8;
  void block[4] = a1;
  void block[5] = a2;
  char v7 = a4;
  int v6 = a3;
  dispatch_async(v4, block);
}

uint64_t *sub_100571890(uint64_t *result)
{
  unint64_t v2 = (unint64_t *)(result + 5);
  unint64_t v1 = result[5];
  if (v1)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[4];
    char v7 = *(void **)(v4 + 200);
    uint64_t v5 = v4 + 200;
    int v6 = v7;
    if (v7)
    {
      BOOL v8 = (uint64_t **)(v5 - 8);
      uint64_t v9 = (void *)v5;
      do
      {
        unint64_t v10 = v6[4];
        BOOL v11 = v10 >= v1;
        if (v10 >= v1) {
          double v12 = v6;
        }
        else {
          double v12 = v6 + 1;
        }
        if (v11) {
          uint64_t v9 = v6;
        }
        int v6 = (void *)*v12;
      }
      while (*v12);
      if (v9 != (void *)v5 && v1 >= v9[4])
      {
        __int16 v18 = (unint64_t *)(result + 5);
        uint64_t result = sub_1000097B0(v8, v2, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v18);
        if (*(void *)result[5])
        {
          __int16 v18 = v2;
          uint64_t v13 = sub_1000097B0(v8, v2, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v18);
          ++*(void *)(*(void *)v13[5] + 288);
          __int16 v18 = v2;
          char v14 = sub_1000097B0(v8, v2, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v18);
          ++*(void *)(*(void *)v14[5] + 280);
          uint64_t v15 = *((char *)v3 + 52);
          __int16 v18 = v2;
          char v16 = sub_1000097B0(v8, v2, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v18);
          *(void *)(*(void *)v16[5] + 264) += v15;
          int v17 = *((_DWORD *)v3 + 12);
          __int16 v18 = v2;
          uint64_t result = sub_1000097B0(v8, v2, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v18);
          *(_DWORD *)(*(void *)result[5] + 272) += v17;
        }
      }
    }
  }
  return result;
}

void sub_100571A14(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v5 = *(NSObject **)(a1 + 256);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100571A90;
  v6[3] = &unk_1009AA618;
  void v6[4] = a1;
  void v6[5] = a2;
  int v7 = a3;
  int v8 = a4;
  int v9 = a5;
  dispatch_async(v5, v6);
}

uint64_t *sub_100571A90(uint64_t *result)
{
  unint64_t v2 = result + 5;
  unint64_t v1 = result[5];
  if (v1)
  {
    uint64_t v3 = (int *)result;
    uint64_t v4 = result[4];
    int v7 = *(void **)(v4 + 200);
    uint64_t v5 = v4 + 200;
    int v6 = v7;
    if (v7)
    {
      int v8 = (uint64_t **)(v5 - 8);
      int v9 = (void *)v5;
      do
      {
        unint64_t v10 = v6[4];
        BOOL v11 = v10 >= v1;
        if (v10 >= v1) {
          double v12 = v6;
        }
        else {
          double v12 = v6 + 1;
        }
        if (v11) {
          int v9 = v6;
        }
        int v6 = (void *)*v12;
      }
      while (*v12);
      if (v9 != (void *)v5 && v1 >= v9[4])
      {
        __int16 v20 = result + 5;
        if (*(void *)sub_1000097B0(v8, (unint64_t *)v2, (uint64_t)&unk_1007BE9D0, &v20)[5])
        {
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          __int16 v20 = v2;
          *(CFAbsoluteTime *)(*(void *)sub_1000097B0(v8, (unint64_t *)v2, (uint64_t)&unk_1007BE9D0, &v20)[5]
                            + 200) = Current;
          CFAbsoluteTime v14 = CFAbsoluteTimeGetCurrent();
          __int16 v20 = v2;
          *(CFAbsoluteTime *)(*(void *)sub_1000097B0(v8, (unint64_t *)v2, (uint64_t)&unk_1007BE9D0, &v20)[5]
                            + 216) = v14;
        }
        __int16 v20 = v2;
        uint64_t result = sub_1000097B0(v8, (unint64_t *)v2, (uint64_t)&unk_1007BE9D0, &v20);
        if (*(void *)(result[5] + 24))
        {
          CFAbsoluteTime v15 = CFAbsoluteTimeGetCurrent();
          __int16 v20 = v2;
          *(CFAbsoluteTime *)(*(void *)(sub_1000097B0(v8, (unint64_t *)v2, (uint64_t)&unk_1007BE9D0, &v20)[5]
                                        + 24)
                            + 16) = v15;
          CFAbsoluteTime v16 = CFAbsoluteTimeGetCurrent();
          __int16 v20 = v2;
          *(CFAbsoluteTime *)(*(void *)(sub_1000097B0(v8, (unint64_t *)v2, (uint64_t)&unk_1007BE9D0, &v20)[5]
                                        + 24)
                            + 40) = v16;
          uint64_t v17 = v3[12];
          __int16 v20 = v2;
          *(void *)(*(void *)(sub_1000097B0(v8, (unint64_t *)v2, (uint64_t)&unk_1007BE9D0, &v20)[5] + 24)
                    + 56) = v17;
          uint64_t v18 = v3[13];
          __int16 v20 = v2;
          *(void *)(*(void *)(sub_1000097B0(v8, (unint64_t *)v2, (uint64_t)&unk_1007BE9D0, &v20)[5] + 24)
                    + 64) = v18;
          int v19 = v3[14];
          __int16 v20 = v2;
          uint64_t result = sub_1000097B0(v8, (unint64_t *)v2, (uint64_t)&unk_1007BE9D0, &v20);
          *(_DWORD *)(*(void *)(result[5] + 24) + 124) = v19;
        }
      }
    }
  }
  return result;
}

void sub_100571CCC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(NSObject **)(a1 + 256);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100571D44;
  block[3] = &unk_100998280;
  void block[4] = a1;
  void block[5] = a2;
  int v5 = a3;
  dispatch_async(v3, block);
}

uint64_t *sub_100571D44(uint64_t *result)
{
  unint64_t v2 = result + 5;
  unint64_t v1 = result[5];
  if (v1)
  {
    uint64_t v3 = (uint64_t *)result[4];
    uint64_t v4 = (void *)v3[25];
    if (v4)
    {
      int v5 = result;
      int v6 = (uint64_t **)(v3 + 24);
      int v7 = v3 + 25;
      do
      {
        unint64_t v8 = v4[4];
        BOOL v9 = v8 >= v1;
        if (v8 >= v1) {
          unint64_t v10 = v4;
        }
        else {
          unint64_t v10 = v4 + 1;
        }
        if (v9) {
          int v7 = v4;
        }
        uint64_t v4 = (void *)*v10;
      }
      while (*v10);
      if (v7 != v3 + 25 && v1 >= v7[4])
      {
        __int16 v28 = result + 5;
        if (*(void *)sub_1000097B0(v6, (unint64_t *)v2, (uint64_t)&unk_1007BE9D0, &v28)[5])
        {
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          __int16 v28 = v2;
          *(CFAbsoluteTime *)(*(void *)sub_1000097B0(v6, (unint64_t *)v2, (uint64_t)&unk_1007BE9D0, &v28)[5]
                            + 208) = Current;
          CFAbsoluteTime v12 = CFAbsoluteTimeGetCurrent();
          __int16 v28 = v2;
          *(CFAbsoluteTime *)(*(void *)sub_1000097B0(v6, (unint64_t *)v2, (uint64_t)&unk_1007BE9D0, &v28)[5]
                            + 224) = v12;
          __int16 v28 = v2;
          double v13 = *(double *)(*(void *)sub_1000097B0(v6, (unint64_t *)v2, (uint64_t)&unk_1007BE9D0, &v28)[5]
                          + 208);
          __int16 v28 = v2;
          double v14 = v13
              - *(double *)(*(void *)sub_1000097B0(v6, (unint64_t *)v2, (uint64_t)&unk_1007BE9D0, &v28)[5]
                          + 200);
          __int16 v28 = v2;
          uint64_t v15 = *(void *)sub_1000097B0(v6, (unint64_t *)v2, (uint64_t)&unk_1007BE9D0, &v28)[5];
          LODWORD(v16) = *(_DWORD *)(v15 + 232);
          *(_DWORD *)(v15 + 232) = (v14 + (double)v16);
          __int16 v28 = v2;
          double v17 = *(double *)(*(void *)sub_1000097B0(v6, (unint64_t *)v2, (uint64_t)&unk_1007BE9D0, &v28)[5]
                          + 224);
          __int16 v28 = v2;
          double v18 = v17
              - *(double *)(*(void *)sub_1000097B0(v6, (unint64_t *)v2, (uint64_t)&unk_1007BE9D0, &v28)[5]
                          + 216);
          __int16 v28 = v2;
          uint64_t v19 = *(void *)sub_1000097B0(v6, (unint64_t *)v2, (uint64_t)&unk_1007BE9D0, &v28)[5];
          LODWORD(v20) = *(_DWORD *)(v19 + 248);
          *(_DWORD *)(v19 + 248) = (v18 + (double)v20);
        }
        __int16 v28 = v2;
        uint64_t result = sub_1000097B0(v6, (unint64_t *)v2, (uint64_t)&unk_1007BE9D0, &v28);
        if (*(void *)(result[5] + 24))
        {
          CFAbsoluteTime v21 = CFAbsoluteTimeGetCurrent();
          __int16 v28 = v2;
          *(CFAbsoluteTime *)(*(void *)(sub_1000097B0(v6, (unint64_t *)v2, (uint64_t)&unk_1007BE9D0, &v28)[5]
                                        + 24)
                            + 24) = v21;
          CFAbsoluteTime v22 = CFAbsoluteTimeGetCurrent();
          __int16 v28 = v2;
          *(CFAbsoluteTime *)(*(void *)(sub_1000097B0(v6, (unint64_t *)v2, (uint64_t)&unk_1007BE9D0, &v28)[5]
                                        + 24)
                            + 48) = v22;
          __int16 v28 = v2;
          double v23 = *(double *)(*(void *)(sub_1000097B0(v6, (unint64_t *)v2, (uint64_t)&unk_1007BE9D0, &v28)[5] + 24)
                          + 24);
          __int16 v28 = v2;
          unsigned int v24 = (v23
                             - *(double *)(*(void *)(sub_1000097B0(v6, (unint64_t *)v2, (uint64_t)&unk_1007BE9D0, &v28)[5]+ 24)+ 16));
          __int16 v28 = v2;
          *(_DWORD *)(*(void *)(sub_1000097B0(v6, (unint64_t *)v2, (uint64_t)&unk_1007BE9D0, &v28)[5] + 24) + 8) = v24;
          __int16 v28 = v2;
          double v25 = *(double *)(*(void *)(sub_1000097B0(v6, (unint64_t *)v2, (uint64_t)&unk_1007BE9D0, &v28)[5] + 24)
                          + 48);
          __int16 v28 = v2;
          unsigned int v26 = (v25
                             - *(double *)(*(void *)(sub_1000097B0(v6, (unint64_t *)v2, (uint64_t)&unk_1007BE9D0, &v28)[5]+ 24)+ 40));
          __int16 v28 = v2;
          *(_DWORD *)(*(void *)(sub_1000097B0(v6, (unint64_t *)v2, (uint64_t)&unk_1007BE9D0, &v28)[5] + 24) + 4) = v26;
          int v27 = *((_DWORD *)v5 + 12);
          __int16 v28 = v2;
          *(_DWORD *)(*(void *)(sub_1000097B0(v6, (unint64_t *)v2, (uint64_t)&unk_1007BE9D0, &v28)[5] + 24)
                    + 120) = v27;
          return sub_100572150(v3, v5[5]);
        }
      }
    }
  }
  return result;
}

uint64_t *sub_100572150(uint64_t *result, unint64_t a2)
{
  uint64_t v14 = a2;
  if (a2)
  {
    unint64_t v2 = result;
    uint64_t v3 = (void *)result[25];
    if (v3)
    {
      uint64_t v4 = (uint64_t **)(result + 24);
      int v5 = result + 25;
      do
      {
        unint64_t v6 = v3[4];
        BOOL v7 = v6 >= a2;
        if (v6 >= a2) {
          unint64_t v8 = v3;
        }
        else {
          unint64_t v8 = v3 + 1;
        }
        if (v7) {
          int v5 = v3;
        }
        uint64_t v3 = (void *)*v8;
      }
      while (*v8);
      if (v5 != result + 25 && v5[4] <= a2)
      {
        uint64_t v15 = &v14;
        uint64_t result = sub_1000097B0(v4, (unint64_t *)&v14, (uint64_t)&unk_1007BE9D0, &v15);
        if (*(void *)(result[5] + 24))
        {
          uint64_t v12 = 0;
          uint64_t v13 = 0;
          sub_10047B7A8(v14, (_DWORD *)&v13 + 1, &v13, &v12, (_DWORD *)&v12 + 1);
          int v9 = v12;
          uint64_t v15 = &v14;
          *(_DWORD *)(*(void *)(sub_1000097B0(v4, (unint64_t *)&v14, (uint64_t)&unk_1007BE9D0, &v15)[5] + 24)
                    + 112) = v9;
          uint64_t v10 = sub_100050530();
          uint64_t v15 = &v14;
          BOOL v11 = sub_1000097B0(v4, (unint64_t *)&v14, (uint64_t)&unk_1007BE9D0, &v15);
          (*(void (**)(uint64_t, void))(*(void *)v10 + 72))(v10, *(void *)(v11[5] + 24));
          uint64_t v15 = &v14;
          *(_DWORD *)(*(void *)(sub_1000097B0(v4, (unint64_t *)&v14, (uint64_t)&unk_1007BE9D0, &v15)[5] + 24)
                    + 116) = 0;
          uint64_t v15 = &v14;
          *(_DWORD *)(*(void *)(sub_1000097B0(v4, (unint64_t *)&v14, (uint64_t)&unk_1007BE9D0, &v15)[5] + 24)
                    + 8) = 0;
          uint64_t v15 = &v14;
          uint64_t result = sub_1000097B0(v4, (unint64_t *)&v14, (uint64_t)&unk_1007BE9D0, &v15);
          *(_DWORD *)(*(void *)(result[5] + 24) + 4) = 0;
          *(_WORD *)((char *)v2 + 349) = 0;
          v2[49] = 0;
        }
      }
    }
  }
  return result;
}

std::string *sub_10057232C@<X0>(char a1@<W1>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  uint64_t v4 = "";
  sub_10004191C(a2, "");
  if ((a1 + 1) < 5u) {
    uint64_t v4 = off_1009B6018[(char)(a1 + 1)];
  }
  return std::string::assign(a2, v4);
}

void sub_1005723A0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005723BC(uint64_t a1, void *a2, int a3, char a4, int a5, int a6)
{
  id v10 = a2;
  long long __p = 0;
  long long v32 = 0uLL;
  sub_10004191C(&__p, "");
  if (a3 == 255)
  {
    memset(&v30, 0, sizeof(v30));
    sub_10057232C(a4, &v30);
    BOOL v11 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = &v30;
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v12 = (std::string *)v30.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v12;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      double v36 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Overwriting the 'unknown->%s' spatial transition string with '%s->%s'", (uint8_t *)&buf, 0x20u);
    }
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v30.__r_.__value_.__l.__size_;
    }
    memset(&buf, 0, sizeof(buf));
    p_std::string buf = &buf;
    sub_1002EA240((uint64_t)&buf, size + 2);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    if (size)
    {
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v15 = &v30;
      }
      else {
        uint64_t v15 = (std::string *)v30.__r_.__value_.__r.__words[0];
      }
      memmove(p_buf, v15, size);
    }
    strcpy((char *)p_buf + size, "->");
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v16 = &v30;
    }
    else {
      unint64_t v16 = (std::string *)v30.__r_.__value_.__r.__words[0];
    }
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v17 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v17 = v30.__r_.__value_.__l.__size_;
    }
    double v18 = std::string::append(&buf, (const std::string::value_type *)v16, v17);
    uint64_t v19 = (void *)v18->__r_.__value_.__r.__words[0];
    v33.__r_.__value_.__r.__words[0] = v18->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v33.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
    char v20 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v32) < 0) {
      operator delete(__p);
    }
    long long __p = v19;
    *(void *)&long long v32 = v33.__r_.__value_.__r.__words[0];
    *(void *)((char *)&v32 + 7) = *(std::string::size_type *)((char *)v33.__r_.__value_.__r.__words + 7);
    HIBYTE(v32) = v20;
  }
  else
  {
    sub_10057232C(a3, &v30);
    CFAbsoluteTime v21 = std::string::append(&v30, "->");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    buf.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    sub_10057232C(a4, &v33);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      double v23 = &v33;
    }
    else {
      double v23 = (std::string *)v33.__r_.__value_.__r.__words[0];
    }
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v24 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v24 = v33.__r_.__value_.__l.__size_;
    }
    double v25 = std::string::append(&buf, (const std::string::value_type *)v23, v24);
    unsigned int v26 = (void *)v25->__r_.__value_.__r.__words[0];
    v34[0] = v25->__r_.__value_.__l.__size_;
    *(void *)((char *)v34 + 7) = *(std::string::size_type *)((char *)&v25->__r_.__value_.__r.__words[1] + 7);
    char v27 = HIBYTE(v25->__r_.__value_.__r.__words[2]);
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v32) < 0) {
      operator delete(__p);
    }
    long long __p = v26;
    *(void *)&long long v32 = v34[0];
    *(void *)((char *)&v32 + 7) = *(void *)((char *)v34 + 7);
    HIBYTE(v32) = v27;
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  memset(&buf, 0, sizeof(buf));
  if (a5) {
    __int16 v28 = "On";
  }
  else {
    __int16 v28 = "Off";
  }
  sub_10004191C(&buf, v28);
  std::string::append(&buf, "->");
  if (a6) {
    int v29 = "On";
  }
  else {
    int v29 = "Off";
  }
  std::string::append(&buf, v29);
  operator new();
}

void sub_100572898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a21 < 0) {
    operator delete(a16);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10057295C(uint64_t result)
{
  if (*(unsigned char *)(result + 160))
  {
    uint64_t v1 = result;
    if (*(void *)(result + 152))
    {
      sub_100568D64(result, (uint64_t)&v6);
      uint64_t v2 = *(void *)(v1 + 152);
      uint64_t v3 = v2 + 24;
      if (*(char *)(v2 + 47) < 0) {
        operator delete(*(void **)v3);
      }
      *(_OWORD *)uint64_t v3 = v6;
      *(void *)(v3 + 16) = v7;
      uint64_t v4 = sub_100050530();
      uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)v4 + 184))(v4, *(void *)(v1 + 152));
      uint64_t v5 = *(void *)(v1 + 152);
      if (v5)
      {
        if (*(char *)(v5 + 151) < 0) {
          operator delete(*(void **)(v5 + 128));
        }
        if (*(char *)(v5 + 111) < 0) {
          operator delete(*(void **)(v5 + 88));
        }
        if (*(char *)(v5 + 71) < 0) {
          operator delete(*(void **)(v5 + 48));
        }
        if (*(char *)(v5 + 47) < 0) {
          operator delete(*(void **)(v5 + 24));
        }
        if (*(char *)(v5 + 23) < 0) {
          operator delete(*(void **)v5);
        }
        operator delete();
      }
      *(void *)(v1 + 152) = 0;
      *(unsigned char *)(v1 + 160) = 0;
    }
  }
  return result;
}

void sub_100572A6C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  unint64_t v8 = qword_100A19E48;
  if (v7)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 138412802;
      id v17 = v7;
      __int16 v18 = 1024;
      int v19 = a3;
      __int16 v20 = 1024;
      int v21 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "AudioLinkManager setSpatialModeWithBundleID：%@, mode:%u, headtrack:%u", buf, 0x18u);
    }
    if (*(unsigned char *)(a1 + 1160))
    {
      int v9 = +[NSNumber numberWithBool:a4, @"kCBMsgArgParamSpatialHeadTracking"];
      v14[1] = @"kCBMsgArgParamSpatialMode";
      v15[0] = v9;
      id v10 = +[NSNumber numberWithUnsignedInt:a3];
      v15[1] = v10;
      BOOL v11 = +[NSDictionary dictionaryWithObjects:v15 forKeys:v14 count:2];

      uint64_t v12 = sub_100572CAC(a1);
      uint64_t v13 = *(void **)(a1 + 1168);
      *(void *)(a1 + 1168) = v12;

      [*(id *)(a1 + 1168) setObject:v11 forKey:v7];
    }
    else
    {
      if (qword_1009F8070 != -1) {
        dispatch_once(&qword_1009F8070, &stru_1009B5E38);
      }
      sub_1004E5C0C((uint64_t)off_1009F8068, v7, a3, a4);
    }
    sub_100572D20((std::string *)a1, a4, a3);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR))
  {
    sub_10077A9A4();
  }
}

void sub_100572C6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100572CAC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1160) && (uint64_t v1 = *(void **)(a1 + 1168)) != 0)
  {
    id v2 = v1;
  }
  else
  {
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009B5E38);
    }
    sub_1004E5DF8((uint64_t)off_1009F8068);
    id v2 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v2;
}

std::string *sub_100572D20(std::string *a1, int a2, int a3)
{
  if (!a3 || a3 == 255 || a3 == 3)
  {
    uint64_t v3 = a1 + 45;
    uint64_t v4 = "Off";
  }
  else
  {
    uint64_t v3 = a1 + 45;
    if (a2) {
      uint64_t v4 = "Headtracked Spatial";
    }
    else {
      uint64_t v4 = "Fixed Spatial";
    }
  }
  return std::string::assign(v3, v4);
}

void sub_100572D64(std::string *a1, void *a2, unsigned __int8 *a3, int *a4)
{
  id v7 = a2;
  id v8 = v7;
  if (a1[48].__r_.__value_.__s.__data_[8])
  {
    *a3 = 0;
    *a4 = 1;
    sub_100572E48((uint64_t)a1, v7, a3, a4);
  }
  else
  {
    if (qword_1009F8070 != -1)
    {
      dispatch_once(&qword_1009F8070, &stru_1009B5E38);
      id v7 = v8;
    }
    sub_1004E64F4((uint64_t)off_1009F8068, v7, a3, a4);
  }
  sub_100572D20(a1, *a3, *a4);
}

void sub_100572E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100572E48(uint64_t a1, void *a2, unsigned __int8 *a3, int *a4)
{
  id v7 = a2;
  id v8 = *(void **)(a1 + 1168);
  if (!v8)
  {
    uint64_t v9 = sub_100572CAC(a1);
    id v10 = *(void **)(a1 + 1168);
    *(void *)(a1 + 1168) = v9;

    id v8 = *(void **)(a1 + 1168);
  }
  BOOL v11 = [v8 objectForKey:v7];
  uint64_t v12 = v11;
  if (v11)
  {
    uint64_t v13 = [v11 objectForKey:@"kCBMsgArgParamSpatialMode"];
    uint64_t v14 = v13;
    if (v13)
    {
      unsigned int v15 = [v13 unsignedIntValue];
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
        sub_10077AA0C();
      }
      if ([v7 caseInsensitiveCompare:@"com.apple.facetime"]) {
        unsigned int v15 = 1;
      }
      else {
        unsigned int v15 = 2;
      }
    }
    *a4 = v15;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
      sub_10077A9D8();
    }
    if ([v7 caseInsensitiveCompare:@"com.apple.facetime"]) {
      int v16 = 1;
    }
    else {
      int v16 = 2;
    }
    *a4 = v16;
  }
  id v17 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    int v18 = *a4;
    int v19 = *a3;
    int v20 = 138412802;
    id v21 = v7;
    __int16 v22 = 1024;
    int v23 = v18;
    __int16 v24 = 1024;
    int v25 = v19;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "AudioLinkManager getSpatialModeWithBundleIDInSplitter : %@=>%u,%u", (uint8_t *)&v20, 0x18u);
  }
}

void sub_10057301C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100573054(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3 = *(NSObject **)(a1 + 256);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1005730CC;
  block[3] = &unk_1009A0160;
  void block[4] = a1;
  void block[5] = a2;
  char v5 = a3;
  dispatch_async(v3, block);
}

void sub_1005730CC(uint64_t a1)
{
  id v2 = (unint64_t *)(a1 + 40);
  unint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    id v7 = *(void **)(v4 + 200);
    char v5 = (void *)(v4 + 200);
    long long v6 = v7;
    if (v7)
    {
      id v8 = v5;
      do
      {
        unint64_t v9 = v6[4];
        BOOL v10 = v9 >= v1;
        if (v9 >= v1) {
          BOOL v11 = v6;
        }
        else {
          BOOL v11 = v6 + 1;
        }
        if (v10) {
          id v8 = v6;
        }
        long long v6 = (void *)*v11;
      }
      while (*v11);
      if (v8 != v5 && v1 >= v8[4])
      {
        char v12 = *(unsigned char *)(a1 + 48);
        *(void *)std::string buf = a1 + 40;
        *(unsigned char *)(sub_1000097B0((uint64_t **)v5 - 1, v2, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 86) = v12;
        if (qword_1009F7EF0 != -1) {
          dispatch_once(&qword_1009F7EF0, &stru_1009B5FD0);
        }
        sub_100455E64((uint64_t)off_1009F7EE8, *v2);
        uint64_t v13 = qword_100A19E48;
        if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
        {
          if (*(unsigned char *)(a1 + 48)) {
            uint64_t v14 = "Active";
          }
          else {
            uint64_t v14 = "Not Active";
          }
          *(_DWORD *)std::string buf = 136446210;
          *(void *)&uint8_t buf[4] = v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Spatial Audio %{public}s", buf, 0xCu);
        }
      }
    }
  }
}

uint64_t sub_100573244(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  id v7 = &v6;
  uint64_t v8 = 0x2020000000;
  char v9 = 0;
  id v2 = *(NSObject **)(a1 + 256);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1005732F4;
  block[3] = &unk_100998860;
  void block[5] = a1;
  void block[6] = a2;
  void block[4] = &v6;
  dispatch_sync(v2, block);
  uint64_t v3 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t *sub_1005732F4(uint64_t *result)
{
  unint64_t v1 = result + 6;
  unint64_t v2 = result[6];
  if (v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[5];
    id v7 = *(void **)(v4 + 200);
    uint64_t v5 = v4 + 200;
    uint64_t v6 = v7;
    if (v7)
    {
      uint64_t result = (uint64_t *)(v5 - 8);
      uint64_t v8 = (void *)v5;
      do
      {
        unint64_t v9 = v6[4];
        BOOL v10 = v9 >= v2;
        if (v9 >= v2) {
          BOOL v11 = v6;
        }
        else {
          BOOL v11 = v6 + 1;
        }
        if (v10) {
          uint64_t v8 = v6;
        }
        uint64_t v6 = (void *)*v11;
      }
      while (*v11);
      if (v8 != (void *)v5 && v2 >= v8[4])
      {
        char v12 = v1;
        uint64_t result = sub_1000097B0((uint64_t **)result, (unint64_t *)v1, (uint64_t)&unk_1007BE9D0, &v12);
        *(unsigned char *)(*(void *)(v3[4] + 8) + 24) = *(unsigned char *)(result[5] + 86);
      }
    }
  }
  return result;
}

void sub_100573398(uint64_t a1, void *a2)
{
  id v4 = a2;
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1 + 280);
  objc_storeStrong((id *)(a1 + 912), a2);
  *(unsigned char *)(a1 + 921) = v4 != 0;
  uint64_t v5 = sub_1004AFB34();
  sub_100013018(v5, &stru_1009B5D60);
  sub_10003AFB4((uint64_t)v6);
}

void sub_100573418(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100573438(id a1)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009B5E78);
  }
  uint64_t v1 = qword_1009F8410;

  sub_1004149B4(v1);
}

id sub_10057348C(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1 + 280);
  id v2 = *(id *)(a1 + 912);
  sub_10003AFB4((uint64_t)v4);

  return v2;
}

uint64_t sub_1005734EC()
{
  BOOL v0 = *(uint64_t (**)(void))(*(void *)sub_100035F54() + 792);

  return v0();
}

void sub_100573540(uint64_t a1, char a2)
{
  id v2 = *(NSObject **)(a1 + 256);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1005735B8;
  v3[3] = &unk_100998A58;
  void v3[4] = a1;
  char v4 = a2;
  dispatch_async(v2, v3);
}

void sub_1005735B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(a1 + 40);
    v7[0] = 67109120;
    v7[1] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Spatial Profile Allowed change to %d ", (uint8_t *)v7, 8u);
  }
  *(unsigned char *)(v2 + 920) = *(unsigned char *)(a1 + 40);
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B5E38);
  }
  if (*(unsigned char *)(v2 + 920)) {
    int v5 = 1;
  }
  else {
    int v5 = 2;
  }
  sub_1004E59C0((uint64_t)off_1009F8068, v5);
  uint64_t v6 = sub_1004AFB34();
  sub_100013018(v6, &stru_1009B5D80);
}

void sub_1005736C8(id a1)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009B5E78);
  }
  uint64_t v1 = qword_1009F8410;

  sub_1004149B4(v1);
}

void sub_10057371C(uint64_t a1, char a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 144);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1005735B8;
  v3[3] = &unk_100998A58;
  void v3[4] = a1 - 112;
  char v4 = a2;
  dispatch_async(v2, v3);
}

BOOL sub_100573798(uint64_t a1, uint64_t a2)
{
  if (sub_100487DD4(a2, 64))
  {
    uint64_t v4 = sub_100035F54();
    char v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 792))(v4, 3);
  }
  else
  {
    char v5 = 0;
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B5E38);
  }
  int v6 = sub_1004DB198((uint64_t)off_1009F8068);
  v16[0] = 0;
  v16[1] = 0;
  sub_10003AED0((uint64_t)v16, a1 + 280);
  uint64_t v7 = *(void *)(a1 + 912);
  sub_10003AFE8((uint64_t)v16);
  if (a2) {
    char v8 = v5;
  }
  else {
    char v8 = 0;
  }
  if (v8)
  {
    unint64_t v9 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v10 = "NO";
      int v11 = *(unsigned __int8 *)(a1 + 920);
      *(_DWORD *)std::string buf = 136316162;
      if (v7) {
        char v12 = "YES";
      }
      else {
        char v12 = "NO";
      }
      int v18 = "YES";
      if (v6 == 1) {
        uint64_t v13 = "YES";
      }
      else {
        uint64_t v13 = "NO";
      }
      __int16 v19 = 2080;
      int v20 = v12;
      if (v11) {
        BOOL v10 = "YES";
      }
      __int16 v21 = 2080;
      __int16 v22 = v13;
      __int16 v23 = 2080;
      __int16 v24 = "YES";
      __int16 v25 = 2080;
      unsigned int v26 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Spatial Profile User preference, Support = %s Enrollment = %s User Choice = %s Owned Device %s Allowed %s", buf, 0x34u);
    }
    BOOL v14 = 0;
    if (v7 && v6 == 1) {
      BOOL v14 = *(unsigned char *)(a1 + 920) != 0;
    }
  }
  else
  {
    BOOL v14 = 0;
  }
  sub_10003AFB4((uint64_t)v16);
  return v14;
}

void sub_100573980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10057399C(uint64_t a1, char a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 256);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_100573A14;
  v3[3] = &unk_100998A58;
  void v3[4] = a1;
  char v4 = a2;
  dispatch_async(v2, v3);
}

void sub_100573A14(uint64_t a1)
{
}

void sub_100573A28(uint64_t a1, char a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 128);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_100573A14;
  v3[3] = &unk_100998A58;
  void v3[4] = a1 - 128;
  char v4 = a2;
  dispatch_async(v2, v3);
}

void sub_100573AA4(uint64_t a1, char a2, uint64_t a3)
{
  int v6 = _os_feature_enabled_impl();
  if (a3 && v6)
  {
    if (sub_10007DD8C(*(void *)(a1 + 224), a3))
    {
      uint64_t v7 = *(NSObject **)(a1 + 256);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100573B60;
      block[3] = &unk_1009A0160;
      char v9 = a2;
      void block[4] = a1;
      void block[5] = a3;
      dispatch_async(v7, block);
    }
  }
}

uint64_t sub_100573B60(uint64_t a1)
{
  return sub_10007DC04(*(void *)(*(void *)(a1 + 32) + 224), *(unsigned __int8 *)(a1 + 48), *(void *)(a1 + 40));
}

void sub_100573B74(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v9 = a2;
  BOOL v10 = &v9;
  __int16 v4 = *(_WORD *)(sub_1000097B0((uint64_t **)(a1 + 192), &v9, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v10)[5] + 84);
  uint64_t v5 = sub_1004AFB34();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100573C2C;
  v6[3] = &unk_1009B5DA0;
  __int16 v7 = v4;
  BOOL v8 = a3 == 240;
  sub_100013018(v5, v6);
}

void sub_100573C2C(uint64_t a1)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009B5E78);
  }
  uint64_t v2 = qword_1009F8410;
  unsigned int v3 = *(unsigned __int16 *)(a1 + 32);
  int v4 = *(unsigned __int8 *)(a1 + 34);

  sub_100419198(v2, v3, v4);
}

void sub_100573C94(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a2 && ((sub_10007DD8C(*(void *)(a1 + 224), a2) & 1) != 0 || !a4))
  {
    uint64_t v6 = sub_1004AFB34();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_100573D30;
    v7[3] = &unk_100998A58;
    void v7[4] = a2;
    char v8 = a4;
    sub_100013018(v6, v7);
  }
}

uint64_t sub_100573D30(uint64_t result)
{
  if (*(void *)(result + 32))
  {
    uint64_t v1 = result;
    if (qword_1009FB058 != -1) {
      dispatch_once(&qword_1009FB058, &stru_1009B5E58);
    }
    uint64_t v2 = off_1009FB050;
    uint64_t v3 = *(void *)(v1 + 32);
    int v4 = *(unsigned __int8 *)(v1 + 40);
    return sub_100514A14((uint64_t)v2, v3, v4);
  }
  return result;
}

void sub_100573DAC(uint64_t a1, uint64_t a2, int a3)
{
  char v3 = a3;
  sub_10048DDE0(a2, a3);
  if (qword_1009F8738 != -1) {
    dispatch_once(&qword_1009F8738, &stru_1009B5F18);
  }
  uint64_t v5 = qword_1009F8730;

  sub_10027006C(v5, a2, v3);
}

void sub_100573E24(uint64_t a1, char a2, uint64_t a3, char a4, int a5, int a6, char a7, char a8, __int16 a9)
{
  unint64_t v9 = *(NSObject **)(a1 + 256);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  int v10[2] = sub_100573EB4;
  v10[3] = &unk_1009B5DC0;
  char v14 = a2;
  v10[4] = a1;
  void v10[5] = a3;
  char v15 = a4;
  int v11 = a5;
  int v12 = a6;
  char v16 = a7;
  char v17 = a8;
  __int16 v13 = a9;
  dispatch_async(v9, v10);
}

void sub_100573EB4(uint64_t a1)
{
}

void sub_100573EFC(uint64_t a1, int a2, unsigned __int8 *a3, char a4, __int16 a5, uint64_t a6)
{
  if (_os_feature_enabled_impl())
  {
    unint64_t v12 = ((unint64_t)*a3 << 40) | ((unint64_t)a3[1] << 32) | ((unint64_t)a3[2] << 24) | ((unint64_t)a3[3] << 16);
    uint64_t v13 = a3[4];
    uint64_t v14 = a3[5];
    char v15 = *(NSObject **)(a1 + 256);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    void v16[2] = sub_100573FF4;
    v16[3] = &unk_1009B5DE0;
    int v17 = a2;
    v16[4] = a1;
    v16[5] = v12 | (v13 << 8) | v14;
    char v19 = a4;
    __int16 v18 = a5;
    v16[6] = a6;
    dispatch_async(v15, v16);
  }
}

void sub_100573FF4(uint64_t a1)
{
}

uint64_t sub_100574014(uint64_t a1, unsigned int a2, unint64_t a3)
{
  unint64_t v17 = a3;
  uint64_t v6 = (uint64_t **)(a1 + 192);
  *(void *)std::string buf = &v17;
  uint64_t v7 = *(unsigned int *)(*(void *)(sub_1000097B0((uint64_t **)(a1 + 192), &v17, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5]+ 40)+ 24);
  unint64_t v17 = a3;
  *(void *)std::string buf = &v17;
  uint64_t v8 = *(void *)(sub_1000097B0(v6, &v17, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] + 40);
  if (a2 == 7)
  {
    if (v7 != 13 && v7 != 10)
    {
      if ((v7 - 11) <= 1)
      {
        *(_DWORD *)(v8 + 24) = 8;
        sub_10007FE20(*(void *)(a1 + 224), 3, a3);
        return 1;
      }
      return 0;
    }
    *(_DWORD *)(v8 + 24) = 12;
    uint64_t v10 = 1;
    sub_10007FD58(*(void *)(a1 + 224), 1, a3);
  }
  else
  {
    int v11 = qword_100A19E48;
    uint64_t v10 = 0;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 216);
      uint64_t v13 = *(void *)(v12 + 8 * a2 + 168);
      v12 += 48;
      uint64_t v14 = *(void *)(v12 + 8 * v7);
      uint64_t v15 = *(void *)(v12 + 8 * *(unsigned int *)(v8 + 24));
      *(_DWORD *)std::string buf = 136446722;
      *(void *)&uint8_t buf[4] = v13;
      __int16 v19 = 2082;
      uint64_t v20 = v14;
      __int16 v21 = 2082;
      uint64_t v22 = v15;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Unhandled Low Latency Game Transition: %{public}s. State: %{public}s -> %{public}s.", buf, 0x20u);
      return 0;
    }
  }
  return v10;
}

void sub_1005741DC(uint64_t a1, int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v13 = 0;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x2020000000;
  uint64_t v16 = 0;
  uint64_t v16 = sub_100567A58(a1, a2);
  uint64_t v7 = *(NSObject **)(a1 + 256);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_100574354;
  v12[3] = &unk_100999720;
  void v12[4] = &v13;
  _DWORD v12[5] = a1;
  dispatch_async(v7, v12);
  if (a3 >= 0x33)
  {
    uint64_t v8 = v14[3];
    unint64_t v9 = *(NSObject **)(a1 + 256);
    block = _NSConcreteStackBlock;
    uint64_t v18 = 3221225472;
    __int16 v19 = sub_1005686EC;
    uint64_t v20 = &unk_1009A12D0;
    uint64_t v21 = a1;
    uint64_t v22 = v8;
    uint64_t v23 = a4;
    dispatch_async(v9, &block);
    uint64_t v10 = v14[3];
    int v11 = *(NSObject **)(a1 + 256);
    block = _NSConcreteStackBlock;
    uint64_t v18 = 3221225472;
    __int16 v19 = sub_10056AE00;
    uint64_t v20 = &unk_1009AA5B0;
    uint64_t v21 = a1;
    uint64_t v22 = v10;
    __int16 v24 = 256;
    uint64_t v23 = 0;
    dispatch_async(v11, &block);
  }
  _Block_object_dispose(&v13, 8);
}

void sub_100574354(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  sub_10055FB28(v2, *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), 60);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(v3 + 8);
  unint64_t v7 = *(void *)(v4 + 24);
  uint64_t v5 = (uint64_t *)(v4 + 24);
  unint64_t v6 = v7;
  if (v7)
  {
    uint64_t v8 = *(void **)(v2 + 200);
    if (v8)
    {
      unint64_t v9 = (uint64_t **)(v2 + 192);
      uint64_t v10 = v2 + 200;
      do
      {
        unint64_t v11 = v8[4];
        BOOL v12 = v11 >= v6;
        if (v11 >= v6) {
          uint64_t v13 = v8;
        }
        else {
          uint64_t v13 = v8 + 1;
        }
        if (v12) {
          uint64_t v10 = (uint64_t)v8;
        }
        uint64_t v8 = (void *)*v13;
      }
      while (*v13);
      if (v10 != v2 + 200 && v6 >= *(void *)(v10 + 32))
      {
        __int16 v28 = (unint64_t *)v5;
        uint64_t v14 = sub_1000097B0(v9, (unint64_t *)v5, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v28);
        uint64_t v3 = *(void *)(a1 + 32);
        if (*(void *)(v14[5] + 16))
        {
          __int16 v28 = (unint64_t *)(*(void *)(v3 + 8) + 24);
          uint64_t v15 = sub_1000097B0(v9, v28, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v28);
          ++*(_DWORD *)(*(void *)(v15[5] + 16) + 180);
          uint64_t v3 = *(void *)(a1 + 32);
        }
      }
    }
  }
  uint64_t v16 = *(void *)(v3 + 8);
  unint64_t v19 = *(void *)(v16 + 24);
  unint64_t v17 = (uint64_t *)(v16 + 24);
  unint64_t v18 = v19;
  if (v19)
  {
    uint64_t v22 = *(void **)(v2 + 200);
    uint64_t v21 = v2 + 200;
    uint64_t v20 = v22;
    if (v22)
    {
      uint64_t v23 = (void *)v21;
      do
      {
        unint64_t v24 = v20[4];
        BOOL v25 = v24 >= v18;
        if (v24 >= v18) {
          unsigned int v26 = v20;
        }
        else {
          unsigned int v26 = v20 + 1;
        }
        if (v25) {
          uint64_t v23 = v20;
        }
        uint64_t v20 = (void *)*v26;
      }
      while (*v26);
      if (v23 != (void *)v21 && v18 >= v23[4])
      {
        __int16 v28 = (unint64_t *)v17;
        if (*(void *)(sub_1000097B0((uint64_t **)(v21 - 8), (unint64_t *)v17, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v28)[5]+ 24))
        {
          __int16 v28 = (unint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
          char v27 = sub_1000097B0((uint64_t **)(v21 - 8), v28, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v28);
          ++*(_DWORD *)(*(void *)(v27[5] + 24) + 116);
        }
      }
    }
  }
}

void sub_100574508(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v6 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v11 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "updating the tipiConnection state for a2dp audio packet flush metrics: %d", buf, 8u);
  }
  unint64_t v7 = *(NSObject **)(a1 + 256);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100574614;
  block[3] = &unk_1009A0160;
  void block[4] = a1;
  void block[5] = a2;
  char v9 = a3;
  dispatch_async(v7, block);
}

uint64_t *sub_100574614(uint64_t *result)
{
  unint64_t v1 = result[5];
  if (v1)
  {
    uint64_t v2 = result[4];
    uint64_t v5 = *(void **)(v2 + 200);
    uint64_t v3 = v2 + 200;
    uint64_t v4 = v5;
    if (v5)
    {
      unint64_t v6 = (void *)v3;
      do
      {
        unint64_t v7 = v4[4];
        BOOL v8 = v7 >= v1;
        if (v7 >= v1) {
          char v9 = v4;
        }
        else {
          char v9 = v4 + 1;
        }
        if (v8) {
          unint64_t v6 = v4;
        }
        uint64_t v4 = (void *)*v9;
      }
      while (*v9);
      if (v6 != (void *)v3 && v1 >= v6[4])
      {
        char v10 = *((unsigned char *)result + 48);
        int v11 = result + 5;
        uint64_t result = sub_1000097B0((uint64_t **)(v3 - 8), (unint64_t *)result + 5, (uint64_t)&unk_1007BE9D0, &v11);
        *(unsigned char *)(result[5] + 32) = v10;
      }
    }
  }
  return result;
}

uint64_t *sub_1005746B0(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = a2;
  uint64_t v3 = (uint64_t **)(a1 + 192);
  *(void *)&long long v27 = &v31;
  uint64_t v4 = sub_1000097B0((uint64_t **)(a1 + 192), (unint64_t *)&v31, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v27);
  std::string::assign((std::string *)(*(void *)(v4[5] + 16) + 40), "No");
  *(void *)&long long v27 = &v31;
  uint64_t v5 = sub_1000097B0(v3, (unint64_t *)&v31, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v27);
  std::string::assign((std::string *)(*(void *)(v5[5] + 16) + 88), "2.4G");
  *(void *)&long long v27 = &v31;
  unint64_t v6 = sub_1000097B0(v3, (unint64_t *)&v31, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v27);
  std::string::assign((std::string *)(*(void *)(v6[5] + 16) + 112), "0000");
  *(void *)&long long v27 = &v31;
  *(unsigned char *)(*(void *)(sub_1000097B0(v3, (unint64_t *)&v31, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v27)[5] + 16)
           + 164) = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t result = (uint64_t *)v31;
  if (v31)
  {
    sub_10047B7A8(v31, (_DWORD *)&v30 + 1, &v30, &v29, (_DWORD *)&v29 + 1);
    int v8 = v29;
    *(void *)&long long v27 = &v31;
    *(_DWORD *)(*(void *)(sub_1000097B0(v3, (unint64_t *)&v31, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v27)[5]
                          + 16)
              + 36) = v8;
    unint64_t v9 = v31;
    if (*(unsigned char *)(v31 + 1372))
    {
      *(void *)&long long v27 = &v31;
      char v10 = sub_1000097B0(v3, (unint64_t *)&v31, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v27);
      std::string::assign((std::string *)(*(void *)(v10[5] + 16) + 40), "Yes");
      unint64_t v9 = v31;
    }
    sub_100574B78(a1, v9);
    *(void *)&long long v27 = &v31;
    int v11 = (const std::string *)(*(void *)sub_1000097B0(v3, (unint64_t *)&v31, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v27)[5]+ 448);
    *(void *)&long long v27 = &v31;
    BOOL v12 = sub_1000097B0(v3, (unint64_t *)&v31, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v27);
    std::string::operator=((std::string *)(*(void *)(v12[5] + 16) + 64), v11);
    uint64_t v13 = v31;
    if (*(unsigned char *)(v31 + 1373))
    {
      *(void *)&long long v27 = &v31;
      uint64_t v14 = sub_1000097B0(v3, (unint64_t *)&v31, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v27);
      std::string::assign((std::string *)(*(void *)(v14[5] + 16) + 88), "5G");
      uint64_t v13 = v31;
    }
    if (sub_100478B2C(v13, 12))
    {
      sub_100480344(v31, 0xAu, &v27);
      long long v32 = &v31;
      uint64_t v15 = *(void *)(sub_1000097B0(v3, (unint64_t *)&v31, (uint64_t)&unk_1007BE9D0, &v32)[5] + 16);
      uint64_t v16 = v15 + 112;
      if (*(char *)(v15 + 135) < 0) {
        operator delete(*(void **)v16);
      }
      *(_OWORD *)uint64_t v16 = v27;
      *(void *)(v16 + 16) = v28;
    }
    *(void *)&long long v27 = &v31;
    int v17 = *(unsigned __int16 *)(*(void *)(sub_1000097B0(v3, (unint64_t *)&v31, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v27)[5]+ 40)+ 16);
    *(void *)&long long v27 = &v31;
    *(_DWORD *)(*(void *)(sub_1000097B0(v3, (unint64_t *)&v31, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v27)[5]
                          + 16)
              + 136) = v17;
    *(void *)&long long v27 = &v31;
    unint64_t v18 = *(_DWORD **)(sub_1000097B0(v3, (unint64_t *)&v31, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v27)[5] + 16);
    int v19 = v18[6];
    if (v19) {
      int v20 = *v18 / v19;
    }
    else {
      int v20 = 0;
    }
    *(void *)&long long v27 = &v31;
    *(_DWORD *)(*(void *)(sub_1000097B0(v3, (unint64_t *)&v31, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v27)[5]
                          + 16)
              + 140) = v20;
    *(void *)&long long v27 = &v31;
    uint64_t v21 = *(void *)(sub_1000097B0(v3, (unint64_t *)&v31, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v27)[5] + 16);
    unsigned int v22 = *(_DWORD *)(v21 + 148);
    if (v22) {
      int v23 = *(_DWORD *)(v21 + 172) / v22;
    }
    else {
      int v23 = 0;
    }
    *(void *)&long long v27 = &v31;
    *(_DWORD *)(*(void *)(sub_1000097B0(v3, (unint64_t *)&v31, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v27)[5]
                          + 16)
              + 144) = v23;
    *(void *)&long long v27 = &v31;
    uint64_t v24 = *(void *)(sub_1000097B0(v3, (unint64_t *)&v31, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v27)[5] + 16);
    int v25 = *(_DWORD *)(v24 + 168);
    if (v25) {
      int v26 = *(_DWORD *)(v24 + 176) / v25;
    }
    else {
      int v26 = 0;
    }
    *(void *)&long long v27 = &v31;
    *(_DWORD *)(*(void *)(sub_1000097B0(v3, (unint64_t *)&v31, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v27)[5]
                          + 16)
              + 152) = v26;
    *(void *)&long long v27 = &v31;
    uint64_t result = sub_1000097B0(v3, (unint64_t *)&v31, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v27);
    if (*(unsigned char *)(result[5] + 32))
    {
      *(void *)&long long v27 = &v31;
      uint64_t result = sub_1000097B0(v3, (unint64_t *)&v31, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v27);
      *(unsigned char *)(*(void *)(result[5] + 16) + 164) = 1;
    }
  }
  return result;
}

void sub_100574B5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100574B78(uint64_t a1, unint64_t a2)
{
  unint64_t v13 = a2;
  uint64_t v3 = (uint64_t **)(a1 + 192);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  if (*(void *)sub_1000097B0((uint64_t **)(a1 + 192), &v13, (uint64_t)&unk_1007BE9D0, (uint64_t **)&__p)[5])
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
    uint64_t v4 = sub_1000097B0(v3, &v13, (uint64_t)&unk_1007BE9D0, (uint64_t **)&__p);
    std::string::assign((std::string *)(*(void *)v4[5] + 448), "Audio");
    uint64_t v5 = *(unsigned char **)(a1 + 216);
    if (v5[8])
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
      unint64_t v6 = sub_1000097B0(v3, &v13, (uint64_t)&unk_1007BE9D0, (uint64_t **)&__p);
      std::string::assign((std::string *)(*(void *)v6[5] + 448), "Video Spatial");
      uint64_t v5 = *(unsigned char **)(a1 + 216);
    }
    if (v5[7])
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
      unint64_t v7 = sub_1000097B0(v3, &v13, (uint64_t)&unk_1007BE9D0, (uint64_t **)&__p);
      std::string::assign((std::string *)(*(void *)v7[5] + 448), "Audio Spatial");
      uint64_t v5 = *(unsigned char **)(a1 + 216);
    }
    if (v5[5])
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
      int v8 = sub_1000097B0(v3, &v13, (uint64_t)&unk_1007BE9D0, (uint64_t **)&__p);
      std::string::assign((std::string *)(*(void *)v8[5] + 448), "Game");
      uint64_t v5 = *(unsigned char **)(a1 + 216);
    }
    if (v5[3])
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
      unint64_t v9 = sub_1000097B0(v3, &v13, (uint64_t)&unk_1007BE9D0, (uint64_t **)&__p);
      std::string::assign((std::string *)(*(void *)v9[5] + 448), "VoiceOver");
      uint64_t v5 = *(unsigned char **)(a1 + 216);
    }
    if (v5[2])
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
      char v10 = sub_1000097B0(v3, &v13, (uint64_t)&unk_1007BE9D0, (uint64_t **)&__p);
      std::string::assign((std::string *)(*(void *)v10[5] + 448), "GarageBand");
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
    if (*(unsigned char *)(*(void *)sub_1000097B0(v3, &v13, (uint64_t)&unk_1007BE9D0, (uint64_t **)&__p)[5] + 160))
    {
      memset(&__p, 0, sizeof(__p));
      sub_10004191C(&__p, "Game");
      uint64_t v14 = &v13;
      if (*(unsigned char *)(*(void *)sub_1000097B0(v3, &v13, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v14)[5] + 163)) {
        std::string::append(&__p, " + Audio");
      }
      uint64_t v14 = &v13;
      if (*(unsigned char *)(*(void *)sub_1000097B0(v3, &v13, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v14)[5] + 161)) {
        std::string::append(&__p, " + AudioSpatial");
      }
      uint64_t v14 = &v13;
      if (*(unsigned char *)(*(void *)sub_1000097B0(v3, &v13, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v14)[5] + 162)) {
        std::string::append(&__p, " + VideoSpatial");
      }
      uint64_t v14 = &v13;
      if (*(unsigned char *)(*(void *)sub_1000097B0(v3, &v13, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v14)[5] + 165)) {
        std::string::append(&__p, " + GarageBand");
      }
      uint64_t v14 = &v13;
      if (*(unsigned char *)(*(void *)sub_1000097B0(v3, &v13, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v14)[5] + 164)) {
        std::string::append(&__p, " + VoiceOver");
      }
      uint64_t v14 = &v13;
      int v11 = sub_1000097B0(v3, &v13, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v14);
      std::string::operator=((std::string *)(*(void *)v11[5] + 448), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_100574F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100574F94()
{
  return 1;
}

uint64_t sub_100574FB8()
{
  return 1;
}

void sub_100574FC4(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    uint64_t v6 = a2;
    sub_100575050(a1 + 8, v4, (char *)&v6);
    sub_100061554(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_100575050(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    unint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      int v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      int v19 = 0;
    }
    int v20 = &v19[8 * v16];
    std::string __p = v19;
    long long v27 = v20;
    uint64_t v28 = v20;
    uint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        int v23 = (char *)sub_1000405F8(v8, v22);
        int v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        long long v27 = v20;
        uint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        long long v27 = v20;
      }
    }
    *(void *)int v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    uint64_t v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    unint64_t v9 = __src + 8;
    char v10 = v6 - 8;
    int v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_100575258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100575290(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    uint64_t v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  uint64_t v6 = *(char **)(a1 + 8);
  while (*(void *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      uint64_t v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      uint64_t v7 = a2;
      sub_100575360(a1 + 8, v6, (char *)&v7);
      sub_100061554(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(void, uint64_t))(a1 + 32))(*(void *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_100575360(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    unint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      int v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      int v19 = 0;
    }
    int v20 = &v19[8 * v16];
    std::string __p = v19;
    long long v27 = v20;
    uint64_t v28 = v20;
    uint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        int v23 = (char *)sub_1000405F8(v8, v22);
        int v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        long long v27 = v20;
        uint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        long long v27 = v20;
      }
    }
    *(void *)int v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    uint64_t v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    unint64_t v9 = __src + 8;
    char v10 = v6 - 8;
    int v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_100575568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005755A0(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    uint64_t v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  uint64_t v6 = *(char **)(a1 + 8);
  while (*(void *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      uint64_t v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      uint64_t v7 = a2;
      sub_100575670(a1 + 8, v6, (char *)&v7);
      sub_100061554(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(void, uint64_t))(a1 + 32))(*(void *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_100575670(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    unint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      int v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      int v19 = 0;
    }
    int v20 = &v19[8 * v16];
    std::string __p = v19;
    long long v27 = v20;
    uint64_t v28 = v20;
    uint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        int v23 = (char *)sub_1000405F8(v8, v22);
        int v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        long long v27 = v20;
        uint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        long long v27 = v20;
      }
    }
    *(void *)int v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    uint64_t v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    unint64_t v9 = __src + 8;
    char v10 = v6 - 8;
    int v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_100575878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005758B0(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    uint64_t v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  uint64_t v6 = *(char **)(a1 + 8);
  while (*(void *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      uint64_t v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      uint64_t v7 = a2;
      sub_100575980(a1 + 8, v6, (char *)&v7);
      sub_100061554(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(void, uint64_t))(a1 + 32))(*(void *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_100575980(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    unint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      int v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      int v19 = 0;
    }
    int v20 = &v19[8 * v16];
    std::string __p = v19;
    long long v27 = v20;
    uint64_t v28 = v20;
    uint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        int v23 = (char *)sub_1000405F8(v8, v22);
        int v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        long long v27 = v20;
        uint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        long long v27 = v20;
      }
    }
    *(void *)int v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    uint64_t v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    unint64_t v9 = __src + 8;
    char v10 = v6 - 8;
    int v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_100575B88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100575BC0(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    uint64_t v6 = a2;
    sub_100575C4C(a1 + 8, v4, (char *)&v6);
    sub_100061554(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_100575C4C(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    unint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      int v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      int v19 = 0;
    }
    int v20 = &v19[8 * v16];
    std::string __p = v19;
    long long v27 = v20;
    uint64_t v28 = v20;
    uint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        int v23 = (char *)sub_1000405F8(v8, v22);
        int v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        long long v27 = v20;
        uint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        long long v27 = v20;
      }
    }
    *(void *)int v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    uint64_t v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    unint64_t v9 = __src + 8;
    char v10 = v6 - 8;
    int v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_100575E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100575E8C(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    uint64_t v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  uint64_t v6 = *(char **)(a1 + 8);
  while (*(void *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      uint64_t v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      uint64_t v7 = a2;
      sub_100575F5C(a1 + 8, v6, (char *)&v7);
      sub_100061554(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(void, uint64_t))(a1 + 32))(*(void *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_100575F5C(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    unint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      int v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      int v19 = 0;
    }
    int v20 = &v19[8 * v16];
    std::string __p = v19;
    long long v27 = v20;
    uint64_t v28 = v20;
    uint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        int v23 = (char *)sub_1000405F8(v8, v22);
        int v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        long long v27 = v20;
        uint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        long long v27 = v20;
      }
    }
    *(void *)int v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    uint64_t v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    unint64_t v9 = __src + 8;
    char v10 = v6 - 8;
    int v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_100576164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10057619C(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    uint64_t v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  uint64_t v6 = *(char **)(a1 + 8);
  while (*(void *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      uint64_t v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      uint64_t v7 = a2;
      sub_10057626C(a1 + 8, v6, (char *)&v7);
      sub_100061554(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(void, uint64_t))(a1 + 32))(*(void *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_10057626C(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    unint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      int v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      int v19 = 0;
    }
    int v20 = &v19[8 * v16];
    std::string __p = v19;
    long long v27 = v20;
    uint64_t v28 = v20;
    uint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        int v23 = (char *)sub_1000405F8(v8, v22);
        int v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        long long v27 = v20;
        uint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        long long v27 = v20;
      }
    }
    *(void *)int v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    uint64_t v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    unint64_t v9 = __src + 8;
    char v10 = v6 - 8;
    int v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_100576474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005764AC(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 != v4)
  {
    int64_t v6 = v4 - (v5 + 8);
    if (v4 != v5 + 8) {
      memmove(v5, v5 + 8, v4 - (v5 + 8));
    }
    *(void *)(a1 + 16) = &v5[v6];
    sub_100061554(a1 + 8);
    if (*(void *)(a1 + 8) == *(void *)(a1 + 16)) {
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 32) + 8))(*(void *)(a1 + 32), a1);
    }
  }

  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_100576584(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 != v4)
  {
    int64_t v6 = v4 - (v5 + 8);
    if (v4 != v5 + 8) {
      memmove(v5, v5 + 8, v4 - (v5 + 8));
    }
    *(void *)(a1 + 16) = &v5[v6];
    sub_100061554(a1 + 8);
    if (*(void *)(a1 + 8) == *(void *)(a1 + 16)) {
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 32) + 8))(*(void *)(a1 + 32), a1);
    }
  }

  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_10057665C(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 != v4)
  {
    int64_t v6 = v4 - (v5 + 8);
    if (v4 != v5 + 8) {
      memmove(v5, v5 + 8, v4 - (v5 + 8));
    }
    *(void *)(a1 + 16) = &v5[v6];
    sub_100061554(a1 + 8);
    if (*(void *)(a1 + 8) == *(void *)(a1 + 16)) {
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 32) + 8))(*(void *)(a1 + 32), a1);
    }
  }

  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_100576734(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 != v4)
  {
    int64_t v6 = v4 - (v5 + 8);
    if (v4 != v5 + 8) {
      memmove(v5, v5 + 8, v4 - (v5 + 8));
    }
    *(void *)(a1 + 16) = &v5[v6];
    sub_100061554(a1 + 8);
    if (*(void *)(a1 + 8) == *(void *)(a1 + 16)) {
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 32) + 8))(*(void *)(a1 + 32), a1);
    }
  }

  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_10057680C(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 != v4)
  {
    int64_t v6 = v4 - (v5 + 8);
    if (v4 != v5 + 8) {
      memmove(v5, v5 + 8, v4 - (v5 + 8));
    }
    *(void *)(a1 + 16) = &v5[v6];
    sub_100061554(a1 + 8);
    if (*(void *)(a1 + 8) == *(void *)(a1 + 16)) {
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 32) + 8))(*(void *)(a1 + 32), a1);
    }
  }

  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

uint64_t *sub_1005768E4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    sub_100576CC0(v2);
    operator delete();
  }
  uint64_t v3 = a1[1];
  if (v3)
  {
    if (*(char *)(v3 + 159) < 0) {
      operator delete(*(void **)(v3 + 136));
    }
    operator delete();
  }
  if (a1[5]) {
    operator delete();
  }
  if (a1[6]) {
    operator delete();
  }
  uint64_t v4 = a1[2];
  if (v4)
  {
    sub_1003B8C7C(v4);
    operator delete();
  }
  if (a1[3]) {
    operator delete();
  }
  return a1;
}

uint64_t sub_1005769D4()
{
  uint64_t v2 = 0;
  uint64_t v3 = &v2;
  uint64_t v4 = 0x2020000000;
  uint64_t v0 = qword_100A13920;
  uint64_t v5 = qword_100A13920;
  if (!qword_100A13920)
  {
    long long v6 = *(_OWORD *)off_1009B5E00;
    uint64_t v7 = 0;
    v3[3] = _sl_dlopen();
    qword_100A13920 = v3[3];
    uint64_t v0 = v3[3];
  }
  _Block_object_dispose(&v2, 8);
  return v0;
}

void sub_100576AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100576B04(uint64_t a1)
{
  uint64_t result = _sl_dlopen();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100A13920 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_100576B9C(uint64_t a1)
{
  uint64_t v2 = sub_100576BEC();
  uint64_t result = dlsym(v2, "tailspin_dump_output_with_options");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_100A13928 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_100576BEC()
{
  uint64_t v0 = sub_1005769D4();
  if (v0) {
    return (void *)v0;
  }
  unint64_t v1 = +[NSAssertionHandler currentHandler];
  uint64_t v3 = +[NSString stringWithUTF8String:"void *BT::libtailspinLibrary()"];
  [v1 handleFailureInFunction:v3 file:@"AudioLinkManager.mm" lineNumber:88 description:@"%s"];

  __break(1u);
  free(v4);
  return v1;
}

void sub_100576CA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100576CC0(uint64_t a1)
{
  for (uint64_t i = *(void **)(a1 + 328); i != *(void **)(a1 + 336); ++i)
  {
    if (*i) {
      operator delete();
    }
  }
  if (*(char *)(a1 + 495) < 0) {
    operator delete(*(void **)(a1 + 472));
  }
  if (*(char *)(a1 + 471) < 0) {
    operator delete(*(void **)(a1 + 448));
  }
  uint64_t v3 = *(void **)(a1 + 352);
  if (v3)
  {
    *(void *)(a1 + 360) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 328);
  if (v4)
  {
    *(void *)(a1 + 336) = v4;
    operator delete(v4);
  }
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  return a1;
}

uint64_t sub_100576D6C(uint64_t a1, uint64_t a2, __int16 a3, char a4, char a5, int a6)
{
  *(_OWORD *)a1 = *(_OWORD *)"";
  *(void *)(a1 + 16) = 0xFFFFFF6A00000000;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(_WORD *)(a1 + 72) = a3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(_WORD *)(a1 + 164) = 0;
  sub_10004191C((void *)(a1 + 168), "2.4G");
  *(unsigned char *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  *(void *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(void *)(a1 + 312) = 150;
  *(unsigned char *)(a1 + 320) = a4;
  *(unsigned char *)(a1 + 321) = a5;
  *(_OWORD *)(a1 + 324) = 0u;
  *(_OWORD *)(a1 + 340) = 0u;
  *(_OWORD *)(a1 + 356) = 0u;
  *(_OWORD *)(a1 + 372) = 0u;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(_DWORD *)(a1 + 408) = 0;
  *(_DWORD *)(a1 + 412) = a6;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 4294967196;
  *(_DWORD *)(a1 + 440) = 0;
  sub_10004191C((void *)(a1 + 448), "Unknown");
  sub_10004191C((void *)(a1 + 472), "Unknown");
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  return a1;
}

void sub_100576E94(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 471) < 0) {
    operator delete(*v3);
  }
  uint64_t v5 = *(void **)(v1 + 352);
  if (v5)
  {
    *(void *)(v1 + 360) = v5;
    operator delete(v5);
  }
  long long v6 = *(void **)(v1 + 328);
  if (v6)
  {
    *(void *)(v1 + 336) = v6;
    operator delete(v6);
  }
  if (*(char *)(v1 + 191) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100576EE8(uint64_t a1)
{
  *(_OWORD *)a1 = *(_OWORD *)"";
  *(void *)(a1 + 16) = 0xFFFFFF6A00000000;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  sub_10004191C((void *)(a1 + 40), "");
  sub_10004191C((void *)(a1 + 64), "");
  sub_10004191C((void *)(a1 + 88), "");
  sub_10004191C((void *)(a1 + 112), "");
  *(_OWORD *)(a1 + 136) = xmmword_1007BF840;
  *(void *)(a1 + 152) = 0x7E0000007ELL;
  *(_DWORD *)(a1 + 160) = 0;
  *(unsigned char *)(a1 + 164) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  return a1;
}

void sub_100576FA8(_Unwind_Exception *exception_object)
{
  if (v1[111] < 0) {
    operator delete(*v4);
  }
  if (v1[87] < 0) {
    operator delete(*v3);
  }
  if (v1[63] < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100576FF4(uint64_t a1, uint64_t a2, __int16 a3, char a4, char a5, char a6)
{
  *(_OWORD *)a1 = *(_OWORD *)"";
  *(void *)(a1 + 16) = 0xFFFFFF6A00000000;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(_WORD *)(a1 + 72) = a3;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 128) = 0;
  sub_10004191C((void *)(a1 + 136), "2.4G");
  *(unsigned char *)(a1 + 160) = 0;
  *(unsigned char *)(a1 + 161) = a4;
  *(unsigned char *)(a1 + 162) = a5;
  *(_DWORD *)(a1 + 164) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 172) = 0;
  *(unsigned char *)(a1 + 188) = 0;
  *(void *)(a1 + 204) = 0xFFFFFF9C00000000;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 229) = 0;
  *(unsigned char *)(a1 + 237) = a6;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  return a1;
}

void sub_1005770B4(uint64_t a1, long long *a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  long long v6 = *(uint64_t **)(a1 + 16);
  uint64_t v4 = (int64x2_t *)(a1 + 8);
  if (v5 == v6)
  {
LABEL_12:
    long long v11 = *a2;
    uint64_t v12 = *((void *)a2 + 1);
    if (v12)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 16), 1uLL, memory_order_relaxed);
      uint64_t v5 = *(uint64_t **)(a1 + 16);
    }
    unint64_t v13 = *(void *)(a1 + 24);
    if ((unint64_t)v5 >= v13)
    {
      long long v28 = v11;
      uint64_t v15 = ((uint64_t)v5 - v4->i64[0]) >> 4;
      if ((unint64_t)(v15 + 1) >> 60) {
        abort();
      }
      uint64_t v16 = v13 - v4->i64[0];
      uint64_t v17 = v16 >> 3;
      if (v16 >> 3 <= (unint64_t)(v15 + 1)) {
        uint64_t v17 = v15 + 1;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v32 = a1 + 24;
      int v19 = (char *)sub_10036C440(a1 + 24, v18);
      unint64_t v21 = &v19[16 * v15];
      *(_OWORD *)unint64_t v21 = v28;
      int v23 = *(void **)(a1 + 8);
      unint64_t v22 = *(void **)(a1 + 16);
      if (v22 == v23)
      {
        int64x2_t v26 = vdupq_n_s64((unint64_t)v22);
        uint64_t v24 = &v19[16 * v15];
      }
      else
      {
        uint64_t v24 = &v19[16 * v15];
        do
        {
          long long v25 = *((_OWORD *)v22 - 1);
          v22 -= 2;
          *((_OWORD *)v24 - 1) = v25;
          v24 -= 16;
          void *v22 = 0;
          v22[1] = 0;
        }
        while (v22 != v23);
        int64x2_t v26 = *v4;
      }
      unint64_t v14 = v21 + 16;
      *(void *)(a1 + 8) = v24;
      *(void *)(a1 + 16) = v21 + 16;
      int64x2_t v30 = v26;
      uint64_t v27 = *(void *)(a1 + 24);
      *(void *)(a1 + 24) = &v19[16 * v20];
      uint64_t v31 = v27;
      uint64_t v29 = v26.i64[0];
      sub_100577340((void **)&v29);
    }
    else
    {
      uint64_t *v5 = v11;
      v5[1] = v12;
      unint64_t v14 = v5 + 2;
    }
    *(void *)(a1 + 16) = v14;
    sub_100577278((char **)(a1 + 8));
    goto LABEL_29;
  }
  do
  {
    uint64_t v7 = (std::__shared_weak_count *)v5[1];
    if (v7)
    {
      uint64_t v8 = std::__shared_weak_count::lock(v7);
      uint64_t v9 = *(void *)a2;
      if (v8)
      {
        uint64_t v10 = *v5;
        sub_10008A294(v8);
        if (v10 == v9) {
          goto LABEL_10;
        }
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v9 = *(void *)a2;
    }
    if (!v9) {
      goto LABEL_10;
    }
LABEL_8:
    v5 += 2;
  }
  while (v5 != v6);
  uint64_t v5 = v6;
LABEL_10:
  if (v5 == *(uint64_t **)(a1 + 16))
  {
    uint64_t v5 = *(uint64_t **)(a1 + 16);
    goto LABEL_12;
  }
LABEL_29:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_100577260(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void **sub_100577278(char **a1)
{
  uint64_t v3 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = (v5 - *a1) >> 4;
  if (v6 < (v3 - *a1) >> 4)
  {
    long long v16 = 0u;
    long long v17 = 0u;
    unint64_t v18 = result;
    if (v5 == v4)
    {
      long long v11 = 0;
      uint64_t v9 = 16 * v6;
    }
    else
    {
      uint64_t v7 = (char *)sub_10036C440((uint64_t)result, v6);
      uint64_t v4 = *a1;
      uint64_t v8 = a1[1];
      uint64_t v9 = (uint64_t)&v7[16 * v6];
      long long v11 = &v7[16 * v10];
      *(void *)&long long v17 = v9;
      *((void *)&v17 + 1) = v11;
      if (v8 != v4)
      {
        uint64_t v12 = &v7[16 * v6];
        do
        {
          long long v13 = *((_OWORD *)v8 - 1);
          v8 -= 16;
          *((_OWORD *)v12 - 1) = v13;
          v12 -= 16;
          *(void *)uint64_t v8 = 0;
          *((void *)v8 + 1) = 0;
        }
        while (v8 != v4);
        unint64_t v14 = *a1;
        uint64_t v4 = a1[1];
        long long v11 = (char *)*((void *)&v17 + 1);
        uint64_t v9 = v17;
        goto LABEL_9;
      }
    }
    unint64_t v14 = v4;
    uint64_t v12 = (char *)v9;
LABEL_9:
    *a1 = v12;
    a1[1] = (char *)v9;
    uint64_t v15 = a1[2];
    a1[2] = v11;
    *(void *)&long long v17 = v4;
    *((void *)&v17 + 1) = v15;
    *(void *)&long long v16 = v14;
    *((void *)&v16 + 1) = v14;
    return sub_100577340((void **)&v16);
  }
  return result;
}

void **sub_100577340(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100577374(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_weak(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

void sub_1005773C8(uint64_t a1, uint64_t *a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v4 = sub_100577460(*(uint64_t **)(a1 + 8), *(uint64_t **)(a1 + 16), a2);
  sub_1005775C4((uint64_t)&v9, (long long *)v4 + 1, *(long long **)(a1 + 16), (uint64_t)v4);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7 != v5)
  {
    do
    {
      uint64_t v8 = *(std::__shared_weak_count **)(v7 - 8);
      if (v8) {
        std::__shared_weak_count::__release_weak(v8);
      }
      v7 -= 16;
    }
    while (v7 != v6);
  }
  *(void *)(a1 + 16) = v6;
  sub_100577278((char **)(a1 + 8));
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

uint64_t *sub_100577460(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  if (a1 == a2) {
    return a2;
  }
  uint64_t v5 = a1;
  while (1)
  {
    uint64_t v6 = (std::__shared_weak_count *)v5[1];
    if (!v6) {
      break;
    }
    uint64_t v7 = std::__shared_weak_count::lock(v6);
    if (!v7) {
      break;
    }
    uint64_t v8 = v7;
    if (!*v5)
    {
      sub_10008A294(v7);
      break;
    }
    char v9 = (std::__shared_weak_count *)v5[1];
    if (v9 && (uint64_t v10 = std::__shared_weak_count::lock(v9)) != 0)
    {
      uint64_t v11 = *v5;
      uint64_t v12 = *a3;
      sub_10008A294(v10);
      sub_10008A294(v8);
      if (v11 == v12) {
        break;
      }
    }
    else
    {
      uint64_t v13 = *a3;
      sub_10008A294(v8);
      if (!v13) {
        break;
      }
    }
    v5 += 2;
    if (v5 == a2) {
      return a2;
    }
  }
  if (v5 != a2)
  {
    for (uint64_t i = v5 + 2; ; i += 2)
    {
      if (i == a2) {
        return v5;
      }
      uint64_t v15 = (std::__shared_weak_count *)i[1];
      if (v15)
      {
        long long v16 = std::__shared_weak_count::lock(v15);
        if (v16)
        {
          long long v17 = v16;
          if (!*i)
          {
            sub_10008A294(v16);
            continue;
          }
          unint64_t v18 = (std::__shared_weak_count *)i[1];
          if (v18 && (int v19 = std::__shared_weak_count::lock(v18)) != 0)
          {
            uint64_t v20 = *i;
            uint64_t v21 = *a3;
            sub_10008A294(v19);
            sub_10008A294(v17);
            if (v20 == v21) {
              continue;
            }
          }
          else
          {
            uint64_t v22 = *a3;
            sub_10008A294(v17);
            if (!v22) {
              continue;
            }
          }
          long long v23 = *(_OWORD *)i;
          uint64_t *i = 0;
          i[1] = 0;
          uint64_t v24 = (std::__shared_weak_count *)v5[1];
          *(_OWORD *)uint64_t v5 = v23;
          if (v24) {
            std::__shared_weak_count::__release_weak(v24);
          }
          v5 += 2;
        }
      }
    }
  }
  return v5;
}

long long *sub_1005775C4(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      long long v7 = *v5;
      *(void *)uint64_t v5 = 0;
      *((void *)v5 + 1) = 0;
      uint64_t v8 = *(std::__shared_weak_count **)(a4 + 8);
      *(_OWORD *)a4 = v7;
      if (v8) {
        std::__shared_weak_count::__release_weak(v8);
      }
      ++v5;
      a4 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void sub_100577630(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    uint64_t v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  uint64_t v6 = *(char **)(a1 + 8);
  while (*(void *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      uint64_t v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      uint64_t v7 = a2;
      sub_100577700(a1 + 8, v6, (char *)&v7);
      sub_100061554(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(void, uint64_t))(a1 + 32))(*(void *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_100577700(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      int v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      int v19 = 0;
    }
    uint64_t v20 = &v19[8 * v16];
    std::string __p = v19;
    uint64_t v27 = v20;
    long long v28 = v20;
    uint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        long long v23 = (char *)sub_1000405F8(v8, v22);
        uint64_t v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        uint64_t v27 = v20;
        uint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        uint64_t v27 = v20;
      }
    }
    *(void *)uint64_t v20 = *(void *)v3;
    long long v28 = v20 + 8;
    uint64_t v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    char v9 = __src + 8;
    uint64_t v10 = v6 - 8;
    uint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_100577908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100577940(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 != v4)
  {
    int64_t v6 = v4 - (v5 + 8);
    if (v4 != v5 + 8) {
      memmove(v5, v5 + 8, v4 - (v5 + 8));
    }
    *(void *)(a1 + 16) = &v5[v6];
    sub_100061554(a1 + 8);
    if (*(void *)(a1 + 8) == *(void *)(a1 + 16)) {
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 32) + 8))(*(void *)(a1 + 32), a1);
    }
  }

  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void *sub_100577A18(uint64_t a1)
{
  uint64_t v2 = sub_100576BEC();
  uint64_t result = dlsym(v2, "tailspin_config_create_with_current_state");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_100A13930 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_100577A68(uint64_t a1)
{
  uint64_t v2 = sub_100576BEC();
  uint64_t result = dlsym(v2, "tailspin_enabled_set");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_100A13938 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_100577AB8(uint64_t a1)
{
  uint64_t v2 = sub_100576BEC();
  uint64_t result = dlsym(v2, "tailspin_kdbg_filter_subclass_set");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_100A13940 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_100577B08(uint64_t a1)
{
  uint64_t v2 = sub_100576BEC();
  uint64_t result = dlsym(v2, "tailspin_config_apply_sync");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_100A13948 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_100577B58(uint64_t a1)
{
  uint64_t v2 = sub_100576BEC();
  uint64_t result = dlsym(v2, "tailspin_config_free");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_100A13950 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_100577BA8(uint64_t a1)
{
  uint64_t v2 = sub_100576BEC();
  uint64_t result = dlsym(v2, "tailspin_config_create_with_default_config");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_100A13958 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_100577BF8(uint64_t a1)
{
  uint64_t v2 = sub_10004191C((void *)a1, "Unknown");
  sub_10004191C(v2 + 3, "Unknown");
  sub_10004191C((void *)(a1 + 48), "Unknown");
  *(void *)(a1 + 72) = -1;
  *(_DWORD *)(a1 + 80) = -1;
  sub_10004191C((void *)(a1 + 88), "Unknown");
  *(void *)(a1 + 112) = -1;
  *(_DWORD *)(a1 + 120) = -1;
  sub_10004191C((void *)(a1 + 128), "Unknown");
  *(_DWORD *)(a1 + 152) = 0;
  return a1;
}

void sub_100577CA4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 111) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100577D08(id a1)
{
}

void sub_100577D4C()
{
}

void sub_100577D70(id a1)
{
}

void sub_100577DB4()
{
}

void sub_100577DD8(id a1)
{
}

void sub_100577E1C()
{
}

void sub_100577E40(id a1)
{
}

void sub_100577E84()
{
}

void sub_100577EA8(id a1)
{
}

void sub_100577EEC()
{
}

void sub_100577F10(id a1)
{
}

void sub_100577F54()
{
}

void sub_100577F78(id a1)
{
}

void sub_100577FBC()
{
}

void sub_100577FE0(id a1)
{
}

void sub_100578170()
{
}

void sub_100578194(id a1)
{
}

void sub_1005781E8()
{
}

void sub_10057820C(id a1)
{
}

void sub_100578250()
{
}

void sub_100578274(id a1)
{
}

void sub_1005782B8()
{
}

void sub_1005782DC(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100578368(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100578408((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_100578384(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1005783BC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    sub_1002EB2D0(result);
    operator delete();
  }
  return result;
}

uint64_t sub_100578408(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1002EB2D0(result);
    operator delete();
  }
  return result;
}

uint64_t sub_100578458(uint64_t result, char *a2, uint64_t a3, char a4)
{
  char v9 = (char *)result;
  while (2)
  {
    uint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          char v9 = v10;
          uint64_t v11 = a2 - v10;
          if (v5 || !v4)
          {
            switch(v11)
            {
              case 0:
              case 1:
                return result;
              case 2:
                int v38 = *(a2 - 1);
                int v39 = *v10;
                if (v38 < v39)
                {
                  char *v10 = v38;
                  *(a2 - 1) = v39;
                }
                break;
              case 3:
                uint64_t result = (uint64_t)sub_100578B0C(v10, v10 + 1, a2 - 1);
                break;
              case 4:
                uint64_t result = (uint64_t)sub_100578D64(v10, v10 + 1, v10 + 2, a2 - 1);
                break;
              case 5:
                double v40 = v10 + 2;
                __int16 v41 = v10 + 3;
                uint64_t result = (uint64_t)sub_100578D64(v10, v10 + 1, v10 + 2, v10 + 3);
                int v42 = *(a2 - 1);
                int v43 = v10[3];
                if (v42 < v43)
                {
                  unsigned char *v41 = v42;
                  *(a2 - 1) = v43;
                  int v44 = (char)*v41;
                  int v45 = (char)*v40;
                  if (v44 < v45)
                  {
                    unsigned char *v40 = v44;
                    unsigned char *v41 = v45;
                    int v46 = v10[1];
                    if (v44 < v46)
                    {
                      v10[1] = v44;
                      int v10[2] = v46;
                      int v47 = *v10;
                      if (v44 < v47)
                      {
                        char *v10 = v44;
                        v10[1] = v47;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 23)
          {
            double v48 = v10 + 1;
            BOOL v50 = v10 == a2 || v48 == a2;
            if (a4)
            {
              if (!v50)
              {
                uint64_t v51 = 0;
                double v52 = v10;
                do
                {
                  int v53 = v52[1];
                  int v54 = *v52;
                  double v52 = v48;
                  if (v53 < v54)
                  {
                    uint64_t v55 = v51;
                    while (1)
                    {
                      v10[v55 + 1] = v54;
                      if (!v55) {
                        break;
                      }
                      int v54 = v10[--v55];
                      if (v53 >= v54)
                      {
                        double v56 = &v10[v55 + 1];
                        goto LABEL_84;
                      }
                    }
                    double v56 = v10;
LABEL_84:
                    *double v56 = v53;
                  }
                  double v48 = v52 + 1;
                  ++v51;
                }
                while (v52 + 1 != a2);
              }
            }
            else if (!v50)
            {
              do
              {
                int v85 = v9[1];
                int v86 = *v9;
                char v9 = v48;
                if (v85 < v86)
                {
                  do
                  {
                    *double v48 = v86;
                    int v86 = *(v48 - 2);
                    --v48;
                  }
                  while (v85 < v86);
                  *double v48 = v85;
                }
                double v48 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v57 = (unint64_t)(v11 - 2) >> 1;
              int64_t v58 = v57;
              do
              {
                int64_t v59 = v58;
                if (v57 >= v58)
                {
                  uint64_t v60 = (2 * v58) | 1;
                  __int16 v61 = &v10[v60];
                  if (2 * v59 + 2 < v11)
                  {
                    int v64 = *v61;
                    int v62 = v61[1];
                    BOOL v63 = v64 < v62;
                    if (v64 <= v62) {
                      LOBYTE(v64) = v61[1];
                    }
                    if (v63)
                    {
                      ++v61;
                      uint64_t v60 = 2 * v59 + 2;
                    }
                  }
                  else
                  {
                    LOBYTE(v64) = *v61;
                  }
                  char v65 = &v10[v59];
                  int v66 = v10[v59];
                  if (v66 <= (char)v64)
                  {
                    do
                    {
                      uint64_t v67 = v61;
                      *char v65 = v64;
                      if (v57 < v60) {
                        break;
                      }
                      uint64_t v68 = (2 * v60) | 1;
                      __int16 v61 = &v10[v68];
                      uint64_t v60 = 2 * v60 + 2;
                      if (v60 < v11)
                      {
                        int v64 = *v61;
                        uint64_t result = v61[1];
                        BOOL v69 = v64 < (int)result;
                        if (v64 <= (int)result) {
                          LOBYTE(v64) = v61[1];
                        }
                        if (v69) {
                          ++v61;
                        }
                        else {
                          uint64_t v60 = v68;
                        }
                      }
                      else
                      {
                        LOBYTE(v64) = *v61;
                        uint64_t v60 = v68;
                      }
                      char v65 = v67;
                    }
                    while (v66 <= (char)v64);
                    *uint64_t v67 = v66;
                  }
                }
                int64_t v58 = v59 - 1;
              }
              while (v59);
              do
              {
                uint64_t v70 = 0;
                char v71 = *v10;
                int v72 = v10;
                do
                {
                  int v73 = &v72[v70 + 1];
                  uint64_t v74 = (2 * v70) | 1;
                  uint64_t v70 = 2 * v70 + 2;
                  if (v70 < v11)
                  {
                    int v77 = *v73;
                    int v75 = v73[1];
                    BOOL v76 = v77 < v75;
                    if (v77 <= v75) {
                      LOBYTE(v77) = v73[1];
                    }
                    if (v76) {
                      ++v73;
                    }
                    else {
                      uint64_t v70 = v74;
                    }
                  }
                  else
                  {
                    LOBYTE(v77) = *v73;
                    uint64_t v70 = v74;
                  }
                  *int v72 = v77;
                  int v72 = v73;
                }
                while (v70 <= (uint64_t)((unint64_t)(v11 - 2) >> 1));
                if (v73 == --a2)
                {
                  *int v73 = v71;
                }
                else
                {
                  *int v73 = *a2;
                  *a2 = v71;
                  unint64_t v78 = v73 - v10 - 1;
                  if (v73 - v10 + 1 >= 2)
                  {
                    uint64_t v79 = &v10[v78 >> 1];
                    int v80 = *v79;
                    int v81 = *v73;
                    if (v80 < v81)
                    {
                      unint64_t v82 = v78 >> 1;
                      do
                      {
                        __int16 v83 = v79;
                        *int v73 = v80;
                        if (!v82) {
                          break;
                        }
                        unint64_t v84 = v82 - 1;
                        unint64_t v82 = (v82 - 1) >> 1;
                        uint64_t v79 = &v10[v84 >> 1];
                        int v80 = *v79;
                        int v73 = v83;
                      }
                      while (v80 < v81);
                      *__int16 v83 = v81;
                    }
                  }
                }
                BOOL v63 = v11-- <= 2;
              }
              while (!v63);
            }
            return result;
          }
          uint64_t v12 = &v10[(unint64_t)v11 >> 1];
          if ((unint64_t)v11 >= 0x81)
          {
            unint64_t v13 = (unint64_t)v11 >> 1;
            sub_100578B0C(v9, &v9[(unint64_t)v11 >> 1], a2 - 1);
            sub_100578B0C(v9 + 1, &v9[v13 - 1], a2 - 2);
            sub_100578B0C(v9 + 2, &v9[v13 + 1], a2 - 3);
            uint64_t result = (uint64_t)sub_100578B0C(&v9[v13 - 1], v12, &v9[v13 + 1]);
            char v14 = *v9;
            char *v9 = v9[v13];
            v9[v13] = v14;
          }
          else
          {
            uint64_t result = (uint64_t)sub_100578B0C(&v9[(unint64_t)v11 >> 1], v9, a2 - 1);
          }
          --a3;
          int v15 = *v9;
          if ((a4 & 1) != 0 || *(v9 - 1) < v15) {
            break;
          }
          if (v15 >= *(a2 - 1))
          {
            uint64_t v30 = v9 + 1;
            do
            {
              uint64_t v10 = v30;
              if (v30 >= a2) {
                break;
              }
              ++v30;
            }
            while (v15 >= *v10);
          }
          else
          {
            uint64_t v10 = v9;
            do
              int v29 = *++v10;
            while (v15 >= v29);
          }
          uint64_t v31 = a2;
          if (v10 < a2)
          {
            uint64_t v31 = a2;
            do
              int v32 = *--v31;
            while (v15 < v32);
          }
          if (v10 < v31)
          {
            char v33 = *v10;
            char v34 = *v31;
            do
            {
              char *v10 = v34;
              *uint64_t v31 = v33;
              do
              {
                int v35 = *++v10;
                char v33 = v35;
              }
              while (v15 >= v35);
              do
              {
                int v36 = *--v31;
                char v34 = v36;
              }
              while (v15 < v36);
            }
            while (v10 < v31);
          }
          __int16 v37 = v10 - 1;
          BOOL v4 = v10 - 1 >= v9;
          BOOL v5 = v10 - 1 == v9;
          if (v10 - 1 != v9) {
            char *v9 = *v37;
          }
          a4 = 0;
          *__int16 v37 = v15;
        }
        uint64_t v16 = 0;
        do
          int v17 = v9[++v16];
        while (v17 < v15);
        unint64_t v18 = &v9[v16];
        int v19 = a2;
        if (v16 == 1)
        {
          int v19 = a2;
          do
          {
            if (v18 >= v19) {
              break;
            }
            int v21 = *--v19;
          }
          while (v21 >= v15);
        }
        else
        {
          do
            int v20 = *--v19;
          while (v20 >= v15);
        }
        if (v18 >= v19)
        {
          uint64_t v27 = v18 - 1;
        }
        else
        {
          char v22 = *v19;
          long long v23 = v19;
          uint64_t v24 = &v9[v16];
          do
          {
            char *v24 = v22;
            char *v23 = v17;
            do
            {
              int v25 = *++v24;
              LOBYTE(v17) = v25;
            }
            while (v25 < v15);
            do
            {
              int v26 = *--v23;
              char v22 = v26;
            }
            while (v26 >= v15);
          }
          while (v24 < v23);
          uint64_t v27 = v24 - 1;
        }
        if (v27 != v9) {
          char *v9 = *v27;
        }
        char *v27 = v15;
        if (v18 >= v19) {
          break;
        }
LABEL_33:
        uint64_t result = sub_100578458(v9, v27, a3, a4 & 1);
        a4 = 0;
        uint64_t v10 = v27 + 1;
      }
      BOOL v28 = sub_100578B7C(v9, v27);
      uint64_t v10 = v27 + 1;
      uint64_t result = sub_100578B7C(v27 + 1, a2);
      if (result) {
        break;
      }
      if (!v28) {
        goto LABEL_33;
      }
    }
    a2 = v27;
    if (!v28) {
      continue;
    }
    return result;
  }
}

unsigned char *sub_100578B0C(unsigned char *result, unsigned char *a2, unsigned char *a3)
{
  int v3 = (char)*a2;
  int v4 = (char)*result;
  int v5 = (char)*a3;
  if (v3 >= v4)
  {
    if (v5 < v3)
    {
      *a2 = v5;
      *a3 = v3;
      int v6 = (char)*a2;
      int v7 = (char)*result;
      if (v6 < v7)
      {
        *uint64_t result = v6;
        *a2 = v7;
      }
    }
  }
  else
  {
    if (v5 >= v3)
    {
      *uint64_t result = v3;
      *a2 = v4;
      int v8 = (char)*a3;
      if (v8 >= v4) {
        return result;
      }
      *a2 = v8;
    }
    else
    {
      *uint64_t result = v5;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_100578B7C(char *a1, char *a2)
{
  int64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v6 = *(a2 - 1);
      int v7 = *a1;
      if (v6 < v7)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_100578B0C(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_100578D64(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      uint64_t v16 = a1 + 2;
      int v17 = a1 + 3;
      sub_100578D64(a1, a1 + 1, a1 + 2, a1 + 3);
      int v18 = *(a2 - 1);
      int v19 = a1[3];
      if (v18 < v19)
      {
        *int v17 = v18;
        *(a2 - 1) = v19;
        int v20 = (char)*v17;
        int v21 = (char)*v16;
        if (v20 < v21)
        {
          unsigned char *v16 = v20;
          *int v17 = v21;
          int v22 = a1[1];
          if (v20 < v22)
          {
            a1[1] = v20;
            a1[2] = v22;
            int v23 = *a1;
            if (v20 < v23)
            {
              *a1 = v20;
              a1[1] = v23;
            }
          }
        }
      }
      return 1;
    default:
      int v8 = a1 + 2;
      sub_100578B0C(a1, a1 + 1, a1 + 2);
      char v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    int v12 = *v9;
    int v13 = *v8;
    if (v12 < v13)
    {
      uint64_t v14 = v10;
      while (1)
      {
        a1[v14 + 3] = v13;
        if (v14 == -2) {
          break;
        }
        int v13 = a1[v14-- + 1];
        if (v12 >= v13)
        {
          int v15 = &a1[v14 + 3];
          goto LABEL_13;
        }
      }
      int v15 = a1;
LABEL_13:
      *int v15 = v12;
      if (++v11 == 8) {
        return v9 + 1 == a2;
      }
    }
    int v8 = v9;
    ++v10;
    if (++v9 == a2) {
      return 1;
    }
  }
}

unsigned char *sub_100578D64(unsigned char *a1, unsigned char *a2, unsigned char *a3, unsigned char *a4)
{
  BOOL result = sub_100578B0C(a1, a2, a3);
  int v9 = (char)*a4;
  int v10 = (char)*a3;
  if (v9 < v10)
  {
    *a3 = v9;
    *a4 = v10;
    int v11 = (char)*a3;
    int v12 = (char)*a2;
    if (v11 < v12)
    {
      *a2 = v11;
      *a3 = v12;
      int v13 = (char)*a2;
      int v14 = (char)*a1;
      if (v13 < v14)
      {
        *a1 = v13;
        *a2 = v14;
      }
    }
  }
  return result;
}

uint64_t sub_100578DE4(uint64_t result, char *a2, uint64_t a3, char a4)
{
  int v9 = (char *)result;
  while (2)
  {
    int v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v9 = v10;
          uint64_t v11 = a2 - v10;
          if (v5 || !v4)
          {
            switch(v11)
            {
              case 0:
              case 1:
                return result;
              case 2:
                int v38 = *(a2 - 1);
                int v39 = *v10;
                if (v38 < v39)
                {
                  char *v10 = v38;
                  *(a2 - 1) = v39;
                }
                break;
              case 3:
                BOOL result = (uint64_t)sub_100578B0C(v10, v10 + 1, a2 - 1);
                break;
              case 4:
                BOOL result = (uint64_t)sub_100578D64(v10, v10 + 1, v10 + 2, a2 - 1);
                break;
              case 5:
                double v40 = v10 + 2;
                __int16 v41 = v10 + 3;
                BOOL result = (uint64_t)sub_100578D64(v10, v10 + 1, v10 + 2, v10 + 3);
                int v42 = *(a2 - 1);
                int v43 = v10[3];
                if (v42 < v43)
                {
                  unsigned char *v41 = v42;
                  *(a2 - 1) = v43;
                  int v44 = (char)*v41;
                  int v45 = (char)*v40;
                  if (v44 < v45)
                  {
                    unsigned char *v40 = v44;
                    unsigned char *v41 = v45;
                    int v46 = v10[1];
                    if (v44 < v46)
                    {
                      v10[1] = v44;
                      int v10[2] = v46;
                      int v47 = *v10;
                      if (v44 < v47)
                      {
                        char *v10 = v44;
                        v10[1] = v47;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 23)
          {
            double v48 = v10 + 1;
            BOOL v50 = v10 == a2 || v48 == a2;
            if (a4)
            {
              if (!v50)
              {
                uint64_t v51 = 0;
                double v52 = v10;
                do
                {
                  int v53 = v52[1];
                  int v54 = *v52;
                  double v52 = v48;
                  if (v53 < v54)
                  {
                    uint64_t v55 = v51;
                    while (1)
                    {
                      v10[v55 + 1] = v54;
                      if (!v55) {
                        break;
                      }
                      int v54 = v10[--v55];
                      if (v53 >= v54)
                      {
                        double v56 = &v10[v55 + 1];
                        goto LABEL_84;
                      }
                    }
                    double v56 = v10;
LABEL_84:
                    *double v56 = v53;
                  }
                  double v48 = v52 + 1;
                  ++v51;
                }
                while (v52 + 1 != a2);
              }
            }
            else if (!v50)
            {
              do
              {
                int v85 = v9[1];
                int v86 = *v9;
                int v9 = v48;
                if (v85 < v86)
                {
                  do
                  {
                    *double v48 = v86;
                    int v86 = *(v48 - 2);
                    --v48;
                  }
                  while (v85 < v86);
                  *double v48 = v85;
                }
                double v48 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v57 = (unint64_t)(v11 - 2) >> 1;
              int64_t v58 = v57;
              do
              {
                int64_t v59 = v58;
                if (v57 >= v58)
                {
                  uint64_t v60 = (2 * v58) | 1;
                  __int16 v61 = &v10[v60];
                  if (2 * v59 + 2 < v11)
                  {
                    int v64 = *v61;
                    int v62 = v61[1];
                    BOOL v63 = v64 < v62;
                    if (v64 <= v62) {
                      LOBYTE(v64) = v61[1];
                    }
                    if (v63)
                    {
                      ++v61;
                      uint64_t v60 = 2 * v59 + 2;
                    }
                  }
                  else
                  {
                    LOBYTE(v64) = *v61;
                  }
                  char v65 = &v10[v59];
                  int v66 = v10[v59];
                  if (v66 <= (char)v64)
                  {
                    do
                    {
                      uint64_t v67 = v61;
                      *char v65 = v64;
                      if (v57 < v60) {
                        break;
                      }
                      uint64_t v68 = (2 * v60) | 1;
                      __int16 v61 = &v10[v68];
                      uint64_t v60 = 2 * v60 + 2;
                      if (v60 < v11)
                      {
                        int v64 = *v61;
                        BOOL result = v61[1];
                        BOOL v69 = v64 < (int)result;
                        if (v64 <= (int)result) {
                          LOBYTE(v64) = v61[1];
                        }
                        if (v69) {
                          ++v61;
                        }
                        else {
                          uint64_t v60 = v68;
                        }
                      }
                      else
                      {
                        LOBYTE(v64) = *v61;
                        uint64_t v60 = v68;
                      }
                      char v65 = v67;
                    }
                    while (v66 <= (char)v64);
                    *uint64_t v67 = v66;
                  }
                }
                int64_t v58 = v59 - 1;
              }
              while (v59);
              do
              {
                uint64_t v70 = 0;
                char v71 = *v10;
                int v72 = v10;
                do
                {
                  int v73 = &v72[v70 + 1];
                  uint64_t v74 = (2 * v70) | 1;
                  uint64_t v70 = 2 * v70 + 2;
                  if (v70 < v11)
                  {
                    int v77 = *v73;
                    int v75 = v73[1];
                    BOOL v76 = v77 < v75;
                    if (v77 <= v75) {
                      LOBYTE(v77) = v73[1];
                    }
                    if (v76) {
                      ++v73;
                    }
                    else {
                      uint64_t v70 = v74;
                    }
                  }
                  else
                  {
                    LOBYTE(v77) = *v73;
                    uint64_t v70 = v74;
                  }
                  *int v72 = v77;
                  int v72 = v73;
                }
                while (v70 <= (uint64_t)((unint64_t)(v11 - 2) >> 1));
                if (v73 == --a2)
                {
                  *int v73 = v71;
                }
                else
                {
                  *int v73 = *a2;
                  *a2 = v71;
                  unint64_t v78 = v73 - v10 - 1;
                  if (v73 - v10 + 1 >= 2)
                  {
                    uint64_t v79 = &v10[v78 >> 1];
                    int v80 = *v79;
                    int v81 = *v73;
                    if (v80 < v81)
                    {
                      unint64_t v82 = v78 >> 1;
                      do
                      {
                        __int16 v83 = v79;
                        *int v73 = v80;
                        if (!v82) {
                          break;
                        }
                        unint64_t v84 = v82 - 1;
                        unint64_t v82 = (v82 - 1) >> 1;
                        uint64_t v79 = &v10[v84 >> 1];
                        int v80 = *v79;
                        int v73 = v83;
                      }
                      while (v80 < v81);
                      *__int16 v83 = v81;
                    }
                  }
                }
                BOOL v63 = v11-- <= 2;
              }
              while (!v63);
            }
            return result;
          }
          int v12 = &v10[(unint64_t)v11 >> 1];
          if ((unint64_t)v11 >= 0x81)
          {
            unint64_t v13 = (unint64_t)v11 >> 1;
            sub_100578B0C(v9, &v9[(unint64_t)v11 >> 1], a2 - 1);
            sub_100578B0C(v9 + 1, &v9[v13 - 1], a2 - 2);
            sub_100578B0C(v9 + 2, &v9[v13 + 1], a2 - 3);
            BOOL result = (uint64_t)sub_100578B0C(&v9[v13 - 1], v12, &v9[v13 + 1]);
            char v14 = *v9;
            char *v9 = v9[v13];
            v9[v13] = v14;
          }
          else
          {
            BOOL result = (uint64_t)sub_100578B0C(&v9[(unint64_t)v11 >> 1], v9, a2 - 1);
          }
          --a3;
          int v15 = *v9;
          if ((a4 & 1) != 0 || *(v9 - 1) < v15) {
            break;
          }
          if (v15 >= *(a2 - 1))
          {
            uint64_t v30 = v9 + 1;
            do
            {
              int v10 = v30;
              if (v30 >= a2) {
                break;
              }
              ++v30;
            }
            while (v15 >= *v10);
          }
          else
          {
            int v10 = v9;
            do
              int v29 = *++v10;
            while (v15 >= v29);
          }
          uint64_t v31 = a2;
          if (v10 < a2)
          {
            uint64_t v31 = a2;
            do
              int v32 = *--v31;
            while (v15 < v32);
          }
          if (v10 < v31)
          {
            char v33 = *v10;
            char v34 = *v31;
            do
            {
              char *v10 = v34;
              *uint64_t v31 = v33;
              do
              {
                int v35 = *++v10;
                char v33 = v35;
              }
              while (v15 >= v35);
              do
              {
                int v36 = *--v31;
                char v34 = v36;
              }
              while (v15 < v36);
            }
            while (v10 < v31);
          }
          __int16 v37 = v10 - 1;
          BOOL v4 = v10 - 1 >= v9;
          BOOL v5 = v10 - 1 == v9;
          if (v10 - 1 != v9) {
            char *v9 = *v37;
          }
          a4 = 0;
          *__int16 v37 = v15;
        }
        uint64_t v16 = 0;
        do
          int v17 = v9[++v16];
        while (v17 < v15);
        int v18 = &v9[v16];
        int v19 = a2;
        if (v16 == 1)
        {
          int v19 = a2;
          do
          {
            if (v18 >= v19) {
              break;
            }
            int v21 = *--v19;
          }
          while (v21 >= v15);
        }
        else
        {
          do
            int v20 = *--v19;
          while (v20 >= v15);
        }
        if (v18 >= v19)
        {
          uint64_t v27 = v18 - 1;
        }
        else
        {
          char v22 = *v19;
          int v23 = v19;
          uint64_t v24 = &v9[v16];
          do
          {
            char *v24 = v22;
            char *v23 = v17;
            do
            {
              int v25 = *++v24;
              LOBYTE(v17) = v25;
            }
            while (v25 < v15);
            do
            {
              int v26 = *--v23;
              char v22 = v26;
            }
            while (v26 >= v15);
          }
          while (v24 < v23);
          uint64_t v27 = v24 - 1;
        }
        if (v27 != v9) {
          char *v9 = *v27;
        }
        char *v27 = v15;
        if (v18 >= v19) {
          break;
        }
LABEL_33:
        BOOL result = sub_100578DE4(v9, v27, a3, a4 & 1);
        a4 = 0;
        int v10 = v27 + 1;
      }
      BOOL v28 = sub_100579498(v9, v27);
      int v10 = v27 + 1;
      BOOL result = sub_100579498(v27 + 1, a2);
      if (result) {
        break;
      }
      if (!v28) {
        goto LABEL_33;
      }
    }
    a2 = v27;
    if (!v28) {
      continue;
    }
    return result;
  }
}

BOOL sub_100579498(char *a1, char *a2)
{
  int64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v6 = *(a2 - 1);
      int v7 = *a1;
      if (v6 < v7)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_100578B0C(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_100578D64(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      uint64_t v16 = a1 + 2;
      int v17 = a1 + 3;
      sub_100578D64(a1, a1 + 1, a1 + 2, a1 + 3);
      int v18 = *(a2 - 1);
      int v19 = a1[3];
      if (v18 < v19)
      {
        *int v17 = v18;
        *(a2 - 1) = v19;
        int v20 = (char)*v17;
        int v21 = (char)*v16;
        if (v20 < v21)
        {
          unsigned char *v16 = v20;
          *int v17 = v21;
          int v22 = a1[1];
          if (v20 < v22)
          {
            a1[1] = v20;
            a1[2] = v22;
            int v23 = *a1;
            if (v20 < v23)
            {
              *a1 = v20;
              a1[1] = v23;
            }
          }
        }
      }
      return 1;
    default:
      int v8 = a1 + 2;
      sub_100578B0C(a1, a1 + 1, a1 + 2);
      int v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    int v12 = *v9;
    int v13 = *v8;
    if (v12 < v13)
    {
      uint64_t v14 = v10;
      while (1)
      {
        a1[v14 + 3] = v13;
        if (v14 == -2) {
          break;
        }
        int v13 = a1[v14-- + 1];
        if (v12 >= v13)
        {
          int v15 = &a1[v14 + 3];
          goto LABEL_13;
        }
      }
      int v15 = a1;
LABEL_13:
      *int v15 = v12;
      if (++v11 == 8) {
        return v9 + 1 == a2;
      }
    }
    int v8 = v9;
    ++v10;
    if (++v9 == a2) {
      return 1;
    }
  }
}

void sub_100579680(id a1)
{
}

void sub_1005796C4()
{
}

void sub_1005796E8(id a1)
{
}

void sub_10057972C()
{
}

uint64_t sub_100579764(uint64_t a1)
{
  uint64_t v2 = (void *)sub_100283C88(a1, 22);
  void *v2 = off_1009B6050;
  v2[32] = off_1009B6130;
  v2[33] = off_1009B6180;
  v2[34] = off_1009B61B0;
  sub_100052DA8(v2 + 35);
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = a1 + 376;
  *(_DWORD *)(a1 + 392) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 400) = 0;
  sub_100052DA8(a1 + 560);
  *(void *)(a1 + 640) = 0;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_DWORD *)(a1 + 649) = 0;
  *(_WORD *)(a1 + 653) = 0;
  for (int i = 1; i != 3; ++i)
  {
    int v5 = i;
    int v6 = (unsigned int *)&v5;
    *((_DWORD *)sub_1002EE82C((uint64_t **)(a1 + 368), &v5, (uint64_t)&unk_1007BE9D0, &v6) + 8) = 0;
  }
  return a1;
}

void sub_1005798C8(_Unwind_Exception *a1)
{
  int v6 = (void **)(v1 + 43);
  int v7 = (void *)v1[50];
  if (v7)
  {
    v1[51] = v7;
    operator delete(v7);
  }
  sub_1000486F0(v3, *v4);
  int v8 = *v6;
  if (*v6)
  {
    v1[44] = v8;
    operator delete(v8);
  }
  sub_100052DA4(v2);
  sub_100283DC8((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100579944(uint64_t a1)
{
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 536) = 0;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 486) = 0;
  if (qword_1009F7ED0 != -1) {
    dispatch_once(&qword_1009F7ED0, &stru_1009B63B8);
  }
  sub_100708564((void *)qword_1009F7EC8, a1 + 272);
  uint64_t v2 = sub_10003FB34();
  *(unsigned char *)(a1 + 655) = sub_1003548A0(v2) > 1;
  return 0;
}

BOOL sub_1005799D0()
{
  char v3 = 0;
  sub_10001B8E0(&v3);
  int v0 = sub_100241CCC((uint64_t)off_1009B61C8);
  if (!v0)
  {
    int v0 = sub_100224014((uint64_t)&unk_1009B6278);
    if (!v0) {
      sub_10023413C((__n128 *)&off_1009B62A8);
    }
  }
  BOOL v1 = v0 != 0;
  sub_10001B8AC(&v3);
  return v1;
}

void sub_100579A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

BOOL sub_100579A54()
{
  char v2 = 0;
  sub_10001B8E0(&v2);
  sub_1002341F8(&off_1009B62A8);
  sub_1002241AC((uint64_t)&unk_1009B6278);
  BOOL v0 = sub_100242108() != 0;
  sub_10001B8AC(&v2);
  return v0;
}

void sub_100579AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_100579ACC(uint64_t a1)
{
  char v3 = *(uint64_t **)(a1 + 344);
  char v2 = *(uint64_t **)(a1 + 352);
  if (v3 != v2)
  {
    do
    {
      uint64_t v4 = *v3;
      if (*v3)
      {
        int v5 = *(void **)(v4 + 80);
        if (v5)
        {
          *(void *)(v4 + 88) = v5;
          operator delete(v5);
        }

        operator delete();
      }
      ++v3;
    }
    while (v3 != v2);
    char v3 = *(uint64_t **)(a1 + 344);
  }
  *(void *)(a1 + 352) = v3;
  int v6 = *(id ***)(a1 + 624);
  int v7 = *(id ***)(a1 + 632);
  if (v6 != v7)
  {
    do
    {
      if (*v6)
      {
        sub_100443070(*v6);
        operator delete();
      }
      ++v6;
    }
    while (v6 != v7);
    int v6 = *(id ***)(a1 + 624);
  }
  *(void *)(a1 + 632) = v6;
  sub_1000486F0(a1 + 368, *(void **)(a1 + 376));
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 368) = a1 + 376;
  int v8 = *(uint64_t **)(a1 + 536);
  if (v8)
  {
    v8[3] = 0;
    sub_100584448(v8);
    operator delete();
  }
  *(void *)(a1 + 536) = 0;
  sub_100579BE4(a1);
  return 0;
}

void sub_100579BE4(uint64_t a1)
{
  char v2 = *(NSObject **)(a1 + 552);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 552));
    *(void *)(a1 + 552) = 0;
  }
}

uint64_t sub_100579C1C(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  int v5 = *(char **)(result + 344);
  uint64_t v4 = *(char **)(result + 352);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        int v5 = *(char **)(result + 352);
        break;
      }
    }
  }
  if (v5 != v4)
  {
    int v18 = *(_DWORD *)(a2 + 20);
    *(void *)std::string buf = &v18;
    if ((sub_1002EE82C((uint64_t **)(result + 368), &v18, (uint64_t)&unk_1007BE9D0, (unsigned int **)buf)[4] & 0x80000000) != 0)
    {
      int v18 = *(_DWORD *)(a2 + 20);
      *(void *)std::string buf = &v18;
      if ((sub_1002EE82C((uint64_t **)(v3 + 368), &v18, (uint64_t)&unk_1007BE9D0, (unsigned int **)buf)[4] & 0x80000000) == 0)
      {
        int v7 = qword_100A1A008;
        if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_FAULT)) {
          sub_10077AA40(v7, v8, v9, v10, v11, v12, v13, v14);
        }
      }
    }
    else
    {
      int v18 = *(_DWORD *)(a2 + 20);
      *(void *)std::string buf = &v18;
      int v6 = sub_1002EE82C((uint64_t **)(v3 + 368), &v18, (uint64_t)&unk_1007BE9D0, (unsigned int **)buf);
      --*((_DWORD *)v6 + 8);
      *(void *)std::string buf = _NSConcreteStackBlock;
      uint64_t v20 = 3221225472;
      int v21 = sub_10057CAF0;
      int v22 = &unk_1009B62C0;
      uint64_t v23 = v3;
      sub_10057CA24((os_unfair_lock_s *)(v3 + 392), buf);
    }
    int v15 = *(char **)(v3 + 352);
    int64_t v16 = v15 - (v5 + 8);
    if (v15 != v5 + 8) {
      memmove(v5, v5 + 8, v15 - (v5 + 8));
    }
    *(void *)(v3 + 352) = &v5[v16];
    int v17 = *(void **)(a2 + 80);
    if (v17)
    {
      *(void *)(a2 + 88) = v17;
      operator delete(v17);
    }

    operator delete();
  }
  return result;
}

uint64_t sub_100579E9C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t result = sub_1005B9250(a2, a3);
  if (result) {
    operator new();
  }
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100579F78(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t result = sub_1005B9364(a2, a3);
  if (result) {
    operator new();
  }
  *(void *)(a2 + 56) = 0;
  return result;
}

uint64_t sub_10057A054(uint64_t a1, uint64_t a2)
{
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, a1 + 280);
  uint64_t v4 = *(uint64_t **)(a1 + 344);
  if (v4 != *(uint64_t **)(a1 + 352))
  {
    while (1)
    {
      uint64_t v5 = *v4;
      if (*(void *)(*v4 + 40) == a2) {
        break;
      }
      if (*(void *)(v5 + 56) == a2) {
        goto LABEL_8;
      }
LABEL_14:
      if (++v4 == *(uint64_t **)(a1 + 352)) {
        return sub_10003AFB4((uint64_t)v10);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_ERROR)) {
      sub_10077AB0C((uint64_t)v14, v5);
    }
    sub_1005B9478(v5);
    if (*(void *)(v5 + 56) == a2)
    {
LABEL_8:
      if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_ERROR)) {
        sub_10077AAB8((uint64_t)v13, v5);
      }
      sub_1005B9478(v5);
    }
    char v9 = 0;
    sub_10001B8E0(&v9);
    int v6 = qword_100A1A008;
    if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = *(id *)(v5 + 8);
      *(_DWORD *)std::string buf = 138412290;
      id v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Disconnect stalled device \"%@\"", buf, 0xCu);
    }
    sub_100242978(*(void *)v5);
    sub_10001B910(&v9);
    sub_10001B8AC(&v9);
    goto LABEL_14;
  }
  return sub_10003AFB4((uint64_t)v10);
}

void sub_10057A22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10057A25C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v24[0] = 0;
  v24[1] = 0;
  sub_10003AED0((uint64_t)v24, a1 + 280);
  for (int i = *(int ***)(a1 + 344); i != *(int ***)(a1 + 352); ++i)
  {
    uint64_t v8 = *i;
    if (*(void *)*i == a2)
    {
      id v9 = *((id *)v8 + 1);
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009B6418);
      }
      uint64_t v10 = off_1009F7ED8;
      sub_10004191C(__p, "IsPrimaryHearingAid");
      int v11 = sub_100030A04((uint64_t)v10, v9, (uint64_t)__p);
      int v12 = v11;
      if (v23 < 0)
      {
        operator delete(__p[0]);
        if (!v12) {
          goto LABEL_14;
        }
      }
      else if (!v11)
      {
        goto LABEL_14;
      }
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009B6418);
      }
      sub_1006B85C0((uint64_t)off_1009F7ED8, v9, @"IsPrimaryHearingAid");
LABEL_14:
      uint64_t v13 = qword_100A1A008;
      if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = "No";
        if (a4) {
          uint64_t v14 = "Yes";
        }
        *(_DWORD *)std::string buf = 138412546;
        id v26 = v9;
        __int16 v27 = 2080;
        BOOL v28 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Disconnected from device \"%@\" wakeUp %s", buf, 0x16u);
      }
      for (j = *(int ***)(a1 + 344); j != *(int ***)(a1 + 352); ++j)
      {
        int64_t v16 = *j;
        if (*j != v8) {
          goto LABEL_23;
        }
      }
      int64_t v16 = 0;
LABEL_23:
      int v17 = v8[12];
      if (v8[6] == 2)
      {
        if (v16) {
          sub_1002EA978(**(void **)(a1 + 536), 0);
        }
        sub_100579BE4(a1);
      }
      if (v17 == 3)
      {
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009B6418);
        }
        uint64_t v18 = sub_100030DCC((uint64_t)off_1009F7ED8, v9, 0);
        if (qword_1009F8158 != -1) {
          dispatch_once(&qword_1009F8158, &stru_1009B6438);
        }
        sub_1004FAC8C((os_unfair_lock_s *)off_1009F8150, 0, v18);
      }
      sub_100579C1C(a1, (uint64_t)v8);
      if (v16 && v17 != 3 && v16[8] >= 7 && v16[12] == 3)
      {
        int v19 = qword_100A1A008;
        if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
        {
          id v20 = *((id *)v16 + 1);
          *(_DWORD *)std::string buf = 138412290;
          id v26 = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Notify session is ready for device \"%@\"", buf, 0xCu);
        }
        sub_10057A5DC(a1);
      }

      return sub_10003AFB4((uint64_t)v24);
    }
  }
  return sub_10003AFB4((uint64_t)v24);
}

void sub_10057A59C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_10003AFB4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_10057A5DC(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 344);
  uint64_t v3 = *(void *)(result + 352);
  if (v2 == v3) {
    goto LABEL_8;
  }
  char v4 = 1;
  do
  {
    BOOL v5 = *(_DWORD *)(*(void *)v2 + 32) == 8 && *(_DWORD *)(*(void *)v2 + 48) == 3;
    v4 &= v5;
    v2 += 8;
  }
  while (v2 != v3);
  if (v4)
  {
LABEL_8:
    sub_1002E8300(**(void **)(result + 536));
    v8.tv_sec = 0;
    *(void *)&v8.tv_usec = 0;
    uint64_t result = gettimeofday(&v8, 0);
    *(double *)(v1 + 448) = (double)v8.tv_usec / 1000.0 + (double)(1000 * v8.tv_sec);
    for (int i = *(unsigned __int16 ****)(v1 + 344); i != *(unsigned __int16 ****)(v1 + 352); ++i)
    {
      id v7 = *i;
      uint64_t result = sub_10057B780(v1, v7, 1);
    }
  }
  return result;
}

uint64_t sub_10057A6B8(void *a1, uint64_t a2, unsigned int a3)
{
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, (uint64_t)(a1 + 35));
  for (int i = (int **)a1[43]; i != (int **)a1[44]; ++i)
  {
    id v7 = *i;
    if (*(void *)*i == a2)
    {
      timeval v8 = qword_100A1A008;
      BOOL v9 = os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT);
      if (v9)
      {
        id v10 = *((id *)v7 + 1);
        *(_DWORD *)std::string buf = 134218242;
        double v14 = (double)a3 * 1.25;
        __int16 v15 = 2112;
        id v16 = v10;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Connection updated (%fms) with device \"%@\"", buf, 0x16u);
      }
      if (v7[8] < 7)
      {
        sub_100579F78(v9, (uint64_t)v7, 0);
      }
      else if (*(unsigned __int8 *)(*(void *)(a1[67] + 8) + 1) == a3)
      {
        sub_100579F78(v9, (uint64_t)v7, 3u);
        sub_10057A5DC((uint64_t)a1);
      }
      else
      {
        sub_100579F78(v9, (uint64_t)v7, 1u);
        sub_10057A85C((uint64_t)a1, (uint64_t)v7);
      }
      return sub_10003AFB4((uint64_t)v12);
    }
  }
  return sub_10003AFB4((uint64_t)v12);
}

void sub_10057A840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unsigned char *sub_10057A85C(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 48) == 3)
  {
    char v4 = qword_100A1A008;
    if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_FAULT)) {
      sub_10077AB60(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }
  char v14 = 0;
  sub_10001B8E0(&v14);
  uint64_t v12 = sub_100242930(*(void *)a2, *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 536) + 8) + 1), *(_DWORD *)(a2 + 24));
  sub_100579F78(v12, a2, 2u);
  return sub_10001B8AC(&v14);
}

void sub_10057A8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_10057A910(uint64_t a1, uint64_t a2)
{
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, a1 + 280);
  for (int i = *(void ***)(a1 + 344); i != *(void ***)(a1 + 352); ++i)
  {
    uint64_t v5 = *i;
    if (**i == a2)
    {
      uint64_t v6 = qword_100A1A008;
      BOOL v7 = os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT);
      if (v7)
      {
        id v8 = (id)v5[1];
        *(_DWORD *)std::string buf = 138412290;
        id v12 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Encryption refreshed with device \"%@\"", buf, 0xCu);
      }
      if (*((_DWORD *)v5 + 8) == 4)
      {
        sub_100579E9C(v7, (uint64_t)v5, 6u);
        if (sub_1002EA638(**(void **)(a1 + 536))) {
          sub_10057AA5C(a1, (uint64_t)v5);
        }
      }
      return sub_10003AFB4((uint64_t)v10);
    }
  }
  return sub_10003AFB4((uint64_t)v10);
}

void sub_10057AA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unsigned char *sub_10057AA5C(uint64_t a1, uint64_t a2)
{
  sub_10003FB34();
  char v4 = sub_100351254();
  char v26 = 0;
  sub_10001B8E0(&v26);
  sub_100242ABC(*(void *)a2);
  sub_10001B910(&v26);
  sub_10057C140((void *)a1, a2);
  int v6 = *(_DWORD *)(a2 + 32);
  if ((v6 - 4) >= 2)
  {
    if (v6 != 6)
    {
      if (v6 == 3)
      {
        sub_10057C2E4(v5, a2);
        return sub_10001B8AC(&v26);
      }
      BOOL v7 = qword_100A1A008;
      if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_FAULT)) {
        sub_10077AC50(v7, v8, v9, v10, v11, v12, v13, v14);
      }
    }
    if (*(unsigned char *)(a2 + 112))
    {
      sub_10057C3EC(a1, a2);
    }
    else
    {
      __int16 v15 = qword_100A1A008;
      if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
      {
        id v16 = *(id *)(a2 + 8);
        *(_DWORD *)std::string buf = 138412290;
        id v28 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Sending 'start stream' command to device \"%@\"", buf, 0xCu);
      }
      int v17 = *(_DWORD *)(a2 + 24);
      sub_1002B804C(&v26);
      if (v17 == 2) {
        __int16 v18 = 2500;
      }
      else {
        __int16 v18 = 1250;
      }
      if (*(unsigned char *)(a2 + 18)) {
        __int16 v19 = 0;
      }
      else {
        __int16 v19 = v18;
      }
      int v20 = sub_100242378(*(void *)a2, (*(_DWORD *)(a2 + 72) >> 1) & 1, v17, v19, v4 ^ 1u);
      if (v20)
      {
        int v21 = qword_100A1A008;
        if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_ERROR)) {
          sub_10077ABD8(v20, v21);
        }
      }
      BOOL v22 = sub_100242960(*(unsigned __int16 **)a2, *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 536) + 8) + 1), *(_DWORD *)(a2 + 24));
      uint64_t v23 = sub_10001B910(&v26);
      *(unsigned char *)(a1 + 432) = 0;
      if (*(_DWORD *)(a2 + 48) != 2)
      {
        if (v22)
        {
          uint64_t v23 = sub_100579F78(v23, a2, 3u);
        }
        else
        {
          sub_100579F78(v23, a2, 1u);
          uint64_t v23 = (uint64_t)sub_10057A85C(a1, a2);
        }
      }
      if ((*(unsigned char *)(a2 + 72) & 0x20) != 0)
      {
        sub_100579E9C(v23, a2, 7u);
      }
      else
      {
        sub_100579E9C(v23, a2, 8u);
        sub_10057A5DC(a1);
      }
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009B6418);
      }
      uint64_t v24 = sub_100030DCC((uint64_t)off_1009F7ED8, *(void **)(a2 + 8), 0);
      if (qword_1009F8158 != -1) {
        dispatch_once(&qword_1009F8158, &stru_1009B6438);
      }
      sub_1004FAC8C((os_unfair_lock_s *)off_1009F8150, 1, v24);
    }
  }
  return sub_10001B8AC(&v26);
}

void sub_10057AD38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_10057AD5C(uint64_t a1, uint64_t a2)
{
  v23[0] = 0;
  v23[1] = 0;
  sub_10003AED0((uint64_t)v23, a1 + 280);
  for (int i = *(uint64_t **)(a1 + 344); i != *(uint64_t **)(a1 + 352); ++i)
  {
    uint64_t v5 = *i;
    if (*(void *)(*i + 104) == a2)
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009B6418);
      }
      int v6 = off_1009F7ED8;
      BOOL v7 = (id *)(v5 + 8);
      id v8 = *(id *)(v5 + 8);
      sub_10004191C(v21, "IsMFiAuthenticated");
      if (sub_100030A04((uint64_t)v6, v8, (uint64_t)v21))
      {
        int v9 = 1;
      }
      else
      {
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009B6418);
        }
        uint64_t v10 = off_1009F7ED8;
        id v11 = *v7;
        sub_10004191C(v19, "IsMFiAuthenticated_CertClass0B");
        if (sub_100030A04((uint64_t)v10, v11, (uint64_t)v19))
        {
          int v9 = 1;
        }
        else
        {
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009B6418);
          }
          uint64_t v12 = off_1009F7ED8;
          id v13 = *v7;
          sub_10004191C(__p, "Mac OS -- IsMFiAuthenticated_Ce");
          int v9 = sub_100030A04((uint64_t)v12, v13, (uint64_t)__p);
          if (v18 < 0) {
            operator delete(__p[0]);
          }
        }
        if (v20 < 0) {
          operator delete(v19[0]);
        }
      }
      if (v22 < 0) {
        operator delete(v21[0]);
      }

      uint64_t v14 = qword_100A1A008;
      if (v9)
      {
        if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
        {
          id v15 = *v7;
          *(_DWORD *)std::string buf = 141558275;
          uint64_t v25 = 1752392040;
          __int16 v26 = 2113;
          id v27 = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "MFi authentication succeeded for device %{private, mask.hash}@", buf, 0x16u);
        }
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_ERROR)) {
          sub_10077ACC8((id *)(v5 + 8), v14);
        }
        sub_100579C1C(a1, v5);
      }
      return sub_10003AFB4((uint64_t)v23);
    }
  }
  return sub_10003AFB4((uint64_t)v23);
}

void sub_10057B008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  if (a21 < 0) {
    operator delete(a16);
  }

  if (a27 < 0) {
    operator delete(a22);
  }

  sub_10003AFB4((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_10057B090(uint64_t a1, uint64_t a2, int a3)
{
  if (*(int *)(a2 + 32) >= 3)
  {
    char v4 = qword_100A1A008;
    if (!*(void *)(a2 + 120))
    {
      if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
      {
        id v6 = *(id *)(a2 + 8);
        int v7 = 138412546;
        id v8 = v6;
        __int16 v9 = 1024;
        int v10 = a3;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending 'set volume' command to device %@ %u", (uint8_t *)&v7, 0x12u);
      }
      LOBYTE(v7) = 0;
      sub_10001B8E0(&v7);
      sub_100242498(*(void *)a2, a3);
      sub_10001B910(&v7);
      *(unsigned char *)(a2 + 128) = a3;
      operator new();
    }
    if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_INFO))
    {
      LOWORD(v7) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Volume hysteresis timer active", (uint8_t *)&v7, 2u);
    }
  }
}

void sub_10057B25C(_Unwind_Exception *exception_object)
{
}

uint64_t sub_10057B27C(uint64_t **a1, uint64_t a2)
{
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, (uint64_t)(a1 + 35));
  uint64_t v5 = a1[43];
  for (int i = a1[44]; v5 != i; ++v5)
  {
    uint64_t v6 = *v5;
    if (*(void *)(*v5 + 120) == a2)
    {
      *(void *)(v6 + 120) = 0;
      float v10 = 0.0;
      CFNumberRef v7 = sub_1002E8530(*a1[67], &v10);
      if (v7)
      {
        int v8 = (int)(float)(v10 * 255.0);
        if (*(unsigned __int8 *)(v6 + 128) != v8) {
          sub_10057B090((uint64_t)v7, v6, v8);
        }
      }
      int i = a1[44];
    }
  }
  return sub_10003AFB4((uint64_t)v11);
}

void sub_10057B340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10057B358(uint64_t a1, uint64_t a2)
{
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, a1 + 280);
  char v4 = *(void **)(a1 + 536);
  if (v4 && *v4 == a2)
  {
    uint64_t v5 = qword_100A1A008;
    if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int16 v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Received 'stream will start' notification from HAL", v9, 2u);
    }
    CFNumberRef v7 = *(uint64_t **)(a1 + 344);
    uint64_t v6 = *(uint64_t **)(a1 + 352);
    while (v7 != v6)
    {
      if (*(int *)(*v7 + 32) >= 3)
      {
        sub_10057AA5C(a1, *v7);
        uint64_t v6 = *(uint64_t **)(a1 + 352);
      }
      ++v7;
    }
    sub_100542EA4(*(uint64_t **)(a1 + 536));
    sub_1002E86B0(a2, 3);
  }
  return sub_10003AFB4((uint64_t)v10);
}

void sub_10057B444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10057B45C(uint64_t a1, uint64_t a2)
{
  return sub_10057B358(a1 - 256, a2);
}

uint64_t sub_10057B46C(uint64_t a1, uint64_t a2)
{
  v18[0] = 0;
  v18[1] = 0;
  sub_10003AED0((uint64_t)v18, a1 + 280);
  char v4 = *(void **)(a1 + 536);
  if (v4 && *v4 == a2)
  {
    uint64_t v5 = qword_100A1A008;
    if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.tv_sec) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Received 'stream did stop' notification from HAL", (uint8_t *)&buf, 2u);
      char v4 = *(void **)(a1 + 536);
    }
    v4[3] = 0;
    char v17 = 0;
    sub_10001B8E0(&v17);
    sub_100242928();
    sub_10001B910(&v17);
    buf.tv_sec = 0;
    *(void *)&buf.tv_usec = 0;
    gettimeofday(&buf, 0);
    *(double *)(a1 + 456) = (double)buf.tv_usec / 1000.0 + (double)(1000 * buf.tv_sec);
    CFNumberRef v7 = *(uint64_t **)(a1 + 344);
    for (int i = *(uint64_t **)(a1 + 352); v7 != i; ++v7)
    {
      uint64_t v8 = *v7;
      if (*(int *)(*v7 + 32) >= 7)
      {
        __int16 v9 = qword_100A1A008;
        if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
        {
          id v10 = *(id *)(v8 + 8);
          LODWORD(buf.tv_sec) = 138412290;
          *(__darwin_time_t *)((char *)&buf.tv_sec + 4) = (__darwin_time_t)v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Sending 'stop stream' command to device \"%@\"", (uint8_t *)&buf, 0xCu);
        }
        sub_1002B804C(&v17);
        sub_1002423FC(*(void *)v8);
        uint64_t v11 = sub_10001B910(&v17);
        sub_100579E9C(v11, v8, 6u);
        sub_10057B780(a1, (unsigned __int16 **)v8, 0);
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009B6418);
        }
        uint64_t v12 = off_1009F7ED8;
        id v13 = *(id *)(v8 + 8);
        uint64_t v14 = sub_100030DCC((uint64_t)v12, v13, 0);

        if (qword_1009F8158 != -1) {
          dispatch_once(&qword_1009F8158, &stru_1009B6438);
        }
        sub_1004FAC8C((os_unfair_lock_s *)off_1009F8150, 0, v14);
        int i = *(uint64_t **)(a1 + 352);
      }
    }
    uint64_t v15 = sub_10003FB34();
    if (sub_1003548A0(v15) == 1) {
      sub_10057B8F0(a1);
    }
    sub_100579BE4(a1);
    sub_1002E86B0(a2, 0);
    sub_10001B8AC(&v17);
  }
  return sub_10003AFB4((uint64_t)v18);
}

void sub_10057B740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10057B780(uint64_t a1, unsigned __int16 **a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t)*a2;
  int v6 = **a2;
  CFNumberRef v7 = qword_100A1A008;
  if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = "Disabling";
    if (a3) {
      uint64_t v8 = "Enabling";
    }
    int v13 = 136315394;
    uint64_t v14 = v8;
    __int16 v15 = 1024;
    int v16 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%s LEA Link Quality Mode for handle 0x%x", (uint8_t *)&v13, 0x12u);
  }
  uint64_t v9 = sub_10003FB34();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 552))(v9, a3, 1, v5);
  uint64_t v10 = sub_10003FB34();
  uint64_t result = sub_1003548A0(v10);
  if (result == 1)
  {
    uint64_t v12 = (__int16 *)(a1 + 464);
    if (a3)
    {
      *(_DWORD *)(a1 + 528) = 0;
      *(_OWORD *)(a1 + 496) = 0u;
      *(_OWORD *)(a1 + 512) = 0u;
      *(_OWORD *)uint64_t v12 = 0u;
      *(_OWORD *)(a1 + 480) = 0u;
      *(_WORD *)(a1 + 464) = -1;
      *(_WORD *)(a1 + 484) = -1;
    }
    else if (*v12 == -1)
    {
      *uint64_t v12 = v6;
    }
    else
    {
      *(_WORD *)(a1 + 484) = v6;
    }
  }
  return result;
}

uint64_t sub_10057B8F0(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 536);
  if (v1)
  {
    uint64_t v2 = *(char **)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = *(unsigned __int16 ****)(result + 344);
      char v4 = *(unsigned __int16 ****)(result + 352);
      if (v3 == v4)
      {
        char v6 = 0;
        char v5 = 0;
        __int16 v10 = 0;
      }
      else
      {
        char v5 = 0;
        char v6 = 0;
        do
        {
          CFNumberRef v7 = *v3;
          int v8 = ***v3;
          if (((_BYTE)(*v3)[9] & 8) != 0) {
            char v9 = 2;
          }
          else {
            char v9 = 1;
          }
          if (v8 == *(unsigned __int16 *)(result + 464))
          {
            char v6 = v9;
          }
          else if (v8 == *(unsigned __int16 *)(result + 484))
          {
            char v5 = v9;
          }
          ++v3;
        }
        while (v3 != v4);
        __int16 v10 = *((_WORD *)v7 + 8);
      }
      unsigned int v11 = vcvtmd_u64_f64((*(double *)(result + 456) - *(double *)(result + 448)) / 1000.0);
      memset(v21, 0, 32);
      char v12 = *(unsigned char *)(result + 440);
      char v13 = *v2;
      int v14 = *(_DWORD *)(v1 + 16);
      __int16 v15 = *(char *)(result + 466);
      __int16 v16 = *(char *)(result + 486);
      __int16 v18 = v10;
      char v19 = v12;
      char v20 = v13;
      LOBYTE(v21[0]) = v14;
      DWORD1(v21[0]) = v11;
      BYTE8(v21[0]) = v6;
      WORD5(v21[0]) = v15;
      *(_OWORD *)((char *)v21 + 12) = *(_OWORD *)(result + 468);
      BYTE12(v21[1]) = v5;
      HIWORD(v21[1]) = v16;
      v21[2] = *(_OWORD *)(result + 488);
      uint64_t v17 = sub_100050530();
      return (*(uint64_t (**)(uint64_t, __int16 *))(*(void *)v17 + 128))(v17, &v18);
    }
  }
  return result;
}

uint64_t sub_10057BA24(uint64_t a1, uint64_t a2)
{
  return sub_10057B46C(a1 - 256, a2);
}

uint64_t sub_10057BA34(void *a1, uint64_t a2, float a3)
{
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, (uint64_t)(a1 + 35));
  char v6 = (void *)a1[67];
  if (v6 && *v6 == a2)
  {
    int v8 = qword_100A1A008;
    BOOL v9 = os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT);
    if (v9)
    {
      *(_DWORD *)timeval buf = 134218240;
      double v13 = a3;
      __int16 v14 = 1024;
      int v15 = (int)(float)(a3 * 255.0);
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received 'volume update %f (%d)' event from HAL", buf, 0x12u);
    }
    for (int i = (uint64_t *)a1[43]; i != (uint64_t *)a1[44]; ++i)
      sub_10057B090(v9, *i, (int)(float)(a3 * 255.0));
  }
  return sub_10003AFB4((uint64_t)v11);
}

void sub_10057BB60(_Unwind_Exception *exception_object)
{
}

uint64_t sub_10057BB7C(uint64_t a1, uint64_t a2, float a3)
{
  return sub_10057BA34((void *)(a1 - 256), a2, a3);
}

uint64_t sub_10057BB84(void *a1, uint64_t a2, int a3)
{
  v15[0] = 0;
  v15[1] = 0;
  sub_10003AED0((uint64_t)v15, (uint64_t)(a1 + 35));
  char v6 = (void *)a1[67];
  if (v6 && *v6 == a2)
  {
    int v8 = qword_100A1A008;
    if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)timeval buf = 67109120;
      int v17 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received 'select codec (%d)' command from HAL", buf, 8u);
      char v6 = (void *)a1[67];
    }
    uint64_t v9 = v6[1];
    __int16 v10 = sub_10057BD0C((uint64_t)a1, a3);
    if (v10)
    {
      unsigned int v11 = v10;
      *(void *)(a1[67] + 8) = v10;
      *(_DWORD *)timeval buf = 0;
      sub_1002EA958(a2, buf);
      if (buf[0])
      {
        if (v9 && *(unsigned __int8 *)(v9 + 3) != v11[3]) {
          sub_10057BE84(a1[67]);
        }
        sub_10057BEE4(a1[67]);
      }
      char v12 = (uint64_t *)a1[43];
      for (int i = (uint64_t *)a1[44]; v12 != i; *(unsigned char *)(v14 + 112) = 1)
        uint64_t v14 = *v12++;
    }
  }
  return sub_10003AFB4((uint64_t)v15);
}

void sub_10057BCF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_10057BD0C(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 424);
  if (v2 <= 59)
  {
    if (v2 == 40)
    {
      uint64_t result = &byte_1007BF864;
    }
    else
    {
      if (v2 != 56) {
        goto LABEL_17;
      }
      uint64_t result = &byte_1007BF8E8;
    }
  }
  else
  {
    if (v2 != 60)
    {
      if (v2 == 90 || v2 == 120)
      {
        uint64_t result = &byte_1007BF9C0;
        goto LABEL_11;
      }
LABEL_17:
      char v5 = qword_100A1A008;
      if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_ERROR))
      {
        int v13 = 134217984;
        uint64_t v14 = v2;
        _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Invalid LEA packet size %lu", (uint8_t *)&v13, 0xCu);
        char v5 = qword_100A1A008;
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT)) {
        sub_100756A48(v5, v6, v7, v8, v9, v10, v11, v12);
      }
      return 0;
    }
    uint64_t result = &byte_1007BF918;
  }
LABEL_11:
  int v4 = *result;
  if (!*result)
  {
LABEL_15:
    if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_ERROR)) {
      sub_10077AD78();
    }
    return 0;
  }
  while (v4 != a2)
  {
    int v4 = result[12];
    if (!result[12]) {
      goto LABEL_15;
    }
    result += 12;
  }
  return result;
}

uint64_t sub_10057BE84(uint64_t result)
{
  uint64_t v1 = *(void **)(result + 32);
  if (v1)
  {
    if (*v1) {
      operator delete[]();
    }
    operator delete();
  }
  *(void *)(result + 32) = 0;
  return result;
}

uint64_t sub_10057BEE4(uint64_t result)
{
  if (!*(void *)(result + 32)) {
    operator new();
  }
  return result;
}

void sub_10057BF60()
{
}

uint64_t sub_10057BF84(uint64_t a1, uint64_t a2, int a3)
{
  return sub_10057BB84((void *)(a1 - 256), a2, a3);
}

uint64_t sub_10057BF8C(void *a1, uint64_t a2, int a3)
{
  v13[0] = 0;
  v13[1] = 0;
  sub_10003AED0((uint64_t)v13, (uint64_t)(a1 + 35));
  uint64_t v6 = a1[67];
  if (v6 && *(void *)v6 == a2)
  {
    uint64_t v8 = qword_100A1A008;
    if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)timeval buf = 67109120;
      int v15 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received 'change audio content type (%d)' command from HAL", buf, 8u);
      uint64_t v6 = a1[67];
    }
    if (*(_DWORD *)(v6 + 16) == a3)
    {
      uint64_t v9 = qword_100A1A008;
      if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)timeval buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Audio content type has no change", buf, 2u);
      }
    }
    else
    {
      *(_DWORD *)(v6 + 16) = a3;
      uint64_t v10 = (uint64_t *)a1[43];
      for (int i = (uint64_t *)a1[44]; v10 != i; *(unsigned char *)(v12 + 112) = 1)
        uint64_t v12 = *v10++;
    }
  }
  return sub_10003AFB4((uint64_t)v13);
}

uint64_t sub_10057C0F0(uint64_t a1, uint64_t a2, int a3)
{
  return sub_10057BF8C((void *)(a1 - 256), a2, a3);
}

void sub_10057C0F8()
{
  if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_ERROR)) {
    sub_10077ADAC();
  }
}

void sub_10057C140(void *a1, uint64_t a2)
{
  sub_100581448(a1);
  sub_1005816E0((uint64_t)a1, a2);
  if (*(_DWORD *)(a2 + 28) != *(_DWORD *)(a2 + 24) || (*(unsigned char *)(a2 + 19) != 0) != (*(unsigned char *)(a2 + 18) != 0))
  {
    int v4 = qword_100A1A008;
    if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = *(id *)(a2 + 8);
      uint64_t v6 = v5;
      int v7 = *(_DWORD *)(a2 + 24);
      int v8 = *(unsigned __int8 *)(a2 + 18);
      int v11 = 141558787;
      if (v8) {
        uint64_t v9 = "Tail";
      }
      else {
        uint64_t v9 = "Head";
      }
      uint64_t v12 = 1752392040;
      __int16 v13 = 2113;
      id v14 = v5;
      __int16 v15 = 1024;
      int v16 = v7;
      __int16 v17 = 2080;
      __int16 v18 = v9;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "LEA: Retagging device %{private, mask.hash}@, streamMode=%d slot=%s", (uint8_t *)&v11, 0x26u);
    }
    uint64_t v10 = sub_10003FB34();
    (*(void (**)(uint64_t, void, void, void, uint64_t))(*(void *)v10 + 440))(v10, *(void *)a2, *(unsigned __int8 *)(a2 + 24), *(unsigned __int8 *)(a2 + 18), 1);
    *(_DWORD *)(a2 + 28) = *(_DWORD *)(a2 + 24);
    *(unsigned char *)(a2 + 19) = *(unsigned char *)(a2 + 18);
  }
}

unsigned char *sub_10057C2E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = qword_100A1A008;
  if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = *(id *)(a2 + 8);
    int v7 = 138412290;
    id v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Restarting encryption to device \"%@\"", (uint8_t *)&v7, 0xCu);
  }
  LOBYTE(v7) = 0;
  sub_10001B8E0(&v7);
  sub_100242A74(*(void *)a2);
  uint64_t v5 = sub_10001B910(&v7);
  sub_100579E9C(v5, a2, 4u);
  return sub_10001B8AC(&v7);
}

void sub_10057C3D0(_Unwind_Exception *exception_object)
{
}

unsigned char *sub_10057C3EC(uint64_t a1, uint64_t a2)
{
  id v4 = qword_100A1A008;
  if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = **(unsigned __int8 **)(*(void *)(a1 + 536) + 8);
    id v6 = *(id *)(a2 + 8);
    v17[0] = 67109378;
    v17[1] = v5;
    __int16 v18 = 2112;
    id v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending 'select codec %d' command to device \"%@\"", (uint8_t *)v17, 0x12u);
  }
  if (*(_DWORD *)(a2 + 32) != 6)
  {
    int v7 = qword_100A1A008;
    if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_FAULT)) {
      sub_10077AC50(v7, v8, v9, v10, v11, v12, v13, v14);
    }
  }
  LOBYTE(v17[0]) = 0;
  sub_10001B8E0(v17);
  sub_10024233C(*(void *)a2, **(unsigned char **)(*(void *)(a1 + 536) + 8), *(unsigned char *)(*(void *)(*(void *)(a1 + 536) + 8) + 4), *(unsigned char *)(*(void *)(*(void *)(a1 + 536) + 8) + 1), *(unsigned char *)(*(void *)(a1 + 536) + 16));
  uint64_t v15 = sub_10001B910(v17);
  *(unsigned char *)(a2 + 112) = 0;
  sub_100579E9C(v15, a2, 5u);
  return sub_10001B8AC(v17);
}

void sub_10057C540(_Unwind_Exception *exception_object)
{
}

unsigned char *sub_10057C55C(uint64_t a1, uint64_t a2, char a3, __int16 a4)
{
  int v7 = qword_100A1A008;
  if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_ERROR)) {
    sub_10077ADE0(a3, a4, v7);
  }
  char v9 = 0;
  sub_10001B8E0(&v9);
  sub_10024245C(a2, a3, a4);
  return sub_10001B8AC(&v9);
}

void sub_10057C5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_10057C5FC(uint64_t a1, unsigned __int8 *__src, size_t __n, int a4)
{
  uint64_t v4 = *(void *)(a1 + 536);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 32);
    if (v5 && (id v6 = *(char **)v5) != 0)
    {
      uint64_t v8 = __n;
      if (!__src && __n)
      {
        if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_ERROR)) {
          sub_10077AFC8();
        }
        return;
      }
      uint64_t v11 = *(unsigned char **)(v4 + 8);
      if (*v11 == 15)
      {
        uint64_t v12 = 0;
        BOOL v13 = 1;
        if (!__n) {
          goto LABEL_17;
        }
      }
      else
      {
        BOOL v13 = v11[5] == 0;
        uint64_t v12 = 2 * v11[5];
        if (!__n)
        {
LABEL_17:
          uint64_t v14 = qword_100A1A008;
          if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_ERROR)) {
            sub_10077AF50(v8, v14);
          }
          uint64_t v8 = 0;
          goto LABEL_20;
        }
      }
      if (v11[3] < __n) {
        goto LABEL_17;
      }
      if (!v11[6])
      {
        memcpy(&v6[v12], __src, __n);
LABEL_20:
        if (!v13)
        {
          char v15 = *(unsigned char *)(a1 + 432);
          *(unsigned char *)(a1 + 432) = v15 + 1;
          **(unsigned char **)uint64_t v5 = v15;
          *(unsigned char *)(*(void *)v5 + 1) = v8;
        }
        int v16 = *(uint64_t **)(a1 + 536);
        uint64_t v17 = *v16;
        __int16 v18 = *(char **)v5;
        size_t v19 = v8 + v12;
        if (*(unsigned char *)(v16[1] + 5)) {
          sub_1002E81FC(v17, v18, v19, a4);
        }
        else {
          sub_1002E7E88(v17, v18, v19, a4);
        }
        char v20 = qword_100A1A008;
        if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEBUG)) {
          sub_10077AED8(v8 + v12, v20);
        }
        return;
      }
      unsigned int v21 = *__src;
      unsigned int v29 = v21 >> 2;
      unsigned int v22 = v21 & 3;
      int v23 = *(unsigned __int8 *)(v5 + 16);
      if (v23 == v21 >> 2 && *(unsigned __int8 *)(v5 + 17) <= v22)
      {
        uint64_t v24 = *(void *)(v5 + 8);
      }
      else
      {
        if (!*(unsigned char *)(v5 + 18))
        {
          log = qword_100A1A008;
          if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_ERROR))
          {
            int v27 = *(unsigned __int8 *)(v5 + 17);
            *(_DWORD *)timeval buf = 67109376;
            int v31 = v27;
            __int16 v32 = 1024;
            int v33 = v23;
            _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Only received %u packets for frameId %u", buf, 0xEu);
            id v6 = *(char **)v5;
          }
        }
        uint64_t v24 = 0;
        *(_DWORD *)(v5 + 15) = 0;
        *(void *)(v5 + 8) = 0;
      }
      size_t v25 = v8 - 1;
      memcpy(&v6[v24 + v12], __src + 1, v25);
      *(unsigned char *)(v5 + 16) = v29;
      int v26 = *(unsigned __int8 *)(v5 + 17);
      *(unsigned char *)(v5 + 17) = v26 + 1;
      uint64_t v8 = *(void *)(v5 + 8) + v25;
      *(void *)(v5 + 8) = v8;
      if (v26 == v22)
      {
        *(unsigned char *)(v5 + 18) = 1;
        goto LABEL_20;
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_ERROR))
    {
      sub_10077AEA4();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_ERROR))
  {
    sub_10077AE70();
  }
}

BOOL sub_10057C910(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 344);
  if (*(void *)(a1 + 352) - (void)v1 != 16)
  {
    uint64_t v3 = qword_100A1A008;
    if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_FAULT))
    {
      int v8 = 136446210;
      char v9 = "fSessionList.size() == 2";
      _os_log_fault_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", (uint8_t *)&v8, 0xCu);
      uint64_t v1 = *(void **)(a1 + 344);
    }
  }
  uint64_t v4 = v1[1];
  if (*(void *)(*v1 + 64) != *(void *)(v4 + 64)) {
    return 0;
  }
  int v5 = *(_DWORD *)(*v1 + 72);
  if ((v5 & 1) == 0) {
    return 0;
  }
  int v6 = *(_DWORD *)(v4 + 72);
  if ((v6 & 1) == 0) {
    return 0;
  }
  if ((v5 & 4) != 0) {
    return (v6 & 4) != 0 && ((v6 | v5) & 8) != 0;
  }
  return (v6 & 4) == 0;
}

void sub_10057CA24(os_unfair_lock_s *a1, void *a2)
{
  uint64_t v3 = a2;
  os_unfair_lock_lock(a1);
  int v5 = 0;
  int v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }
  if (v4)
  {
    int v6 = v4;
    operator delete(v4);
  }
}

void sub_10057CAC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

void sub_10057CAF0(uint64_t a1, void (***a2)(void, uint64_t *))
{
  sub_100584A48(v3, *(void *)(a1 + 32) + 368);
  (**a2)(a2, v3);
  sub_1000486F0((uint64_t)v3, (void *)v3[1]);
}

void sub_10057CB60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void sub_10057CB78(uint64_t a1, uint64_t a2)
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009B6458);
  }
  double v40 = sub_100686130((uint64_t)off_1009F7EB8, *(void *)a2);
  char v49 = 0;
  uint64_t v4 = sub_100017768();
  sub_10004191C(buf, "LEA");
  sub_10004191C(v51, "IgnoreMFi");
  (*(void (**)(uint64_t, unsigned char *, uint8_t *, char *))(*(void *)v4 + 72))(v4, buf, v51, &v49);
  if (v52 < 0) {
    operator delete(*(void **)v51);
  }
  if (v54 < 0) {
    operator delete(*(void **)buf);
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009B6418);
  }
  int v5 = off_1009F7ED8;
  int v6 = (id *)(a2 + 8);
  id v7 = *(id *)(a2 + 8);
  sub_10004191C(v47, "IsMFiAuthenticated");
  if (sub_100030A04((uint64_t)v5, v7, (uint64_t)v47))
  {
    int v8 = 1;
  }
  else
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B6418);
    }
    char v9 = off_1009F7ED8;
    id v10 = *v6;
    sub_10004191C(v45, "IsMFiAuthenticated_CertClass0B");
    if (sub_100030A04((uint64_t)v9, v10, (uint64_t)v45))
    {
      int v8 = 1;
    }
    else
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009B6418);
      }
      uint64_t v11 = off_1009F7ED8;
      id v12 = *v6;
      sub_10004191C(__p, "Mac OS -- IsMFiAuthenticated_Ce");
      int v8 = sub_100030A04((uint64_t)v11, v12, (uint64_t)__p);
      if (v44 < 0) {
        operator delete(__p[0]);
      }
    }
    if (v46 < 0) {
      operator delete(v45[0]);
    }
  }
  if (v48 < 0) {
    operator delete(v47[0]);
  }

  if (v8)
  {
    BOOL v13 = qword_100A1A008;
    if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
    {
      id v14 = *v6;
      *(_DWORD *)timeval buf = 138412290;
      *(void *)&uint8_t buf[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Device \"%@\" is MFi authenticated", buf, 0xCu);
    }
  }
  else
  {
    char v15 = qword_100A1A008;
    if (!v49)
    {
      if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
      {
        id v16 = *v6;
        *(_DWORD *)timeval buf = 138412290;
        *(void *)&uint8_t buf[4] = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Device \"%@\" is not MFi authenticated yet, authenticating...", buf, 0xCu);
      }
      uint64_t v17 = sub_100373068();
      id v18 = *v6;
      (*(void (**)(uint64_t, id))(*(void *)v17 + 24))(v17, v18);

      operator new();
    }
    if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_ERROR)) {
      sub_10077B100();
    }
  }
  if (*(void *)(a1 + 536))
  {
    if (sub_10057C910(a1))
    {
      *(_DWORD *)uint64_t v51 = 0;
      CFNumberRef v19 = sub_1002E8530(**(void **)(a1 + 536), v51);
      if (v19) {
        sub_10057B090((uint64_t)v19, a2, (int)(float)(*(float *)v51 * 255.0));
      }
      char v20 = *(uint64_t **)(a1 + 536);
      if (v20[1]) {
        *(unsigned char *)(a2 + 112) = 1;
      }
      LODWORD(v50) = 0;
      sub_1002EA958(*v20, &v50);
      if ((v50 & 1) == 0) {
        goto LABEL_57;
      }
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009B6418);
      }
      unsigned int v21 = off_1009F7ED8;
      if (qword_1009F7EC0 != -1) {
        dispatch_once(&qword_1009F7EC0, &stru_1009B6458);
      }
      unsigned int v22 = sub_100686130((uint64_t)off_1009F7EB8, *(void *)a2);
      sub_10004191C(v41, "Enable Input");
      int v23 = sub_100030A04((uint64_t)v21, v22, (uint64_t)v41);
      if (v42 < 0) {
        operator delete(v41[0]);
      }

      if (v23)
      {
        uint64_t v24 = qword_100A1A008;
        if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
        {
          id v25 = *v6;
          *(_DWORD *)timeval buf = 141558275;
          *(void *)&uint8_t buf[4] = 1752392040;
          *(_WORD *)&unsigned char buf[12] = 2113;
          *(void *)&uint8_t buf[14] = v25;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Enable device %{private, mask.hash}@ input", buf, 0x16u);
        }
        char v26 = 1;
        sub_1002EA978(**(void **)(a1 + 536), 1);
      }
      else
      {
LABEL_57:
        int v31 = qword_100A1A008;
        char v26 = 0;
        if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
        {
          id v32 = *v6;
          *(_DWORD *)timeval buf = 141558275;
          *(void *)&uint8_t buf[4] = 1752392040;
          *(_WORD *)&unsigned char buf[12] = 2113;
          *(void *)&uint8_t buf[14] = v32;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Disable device %{private, mask.hash}@ input", buf, 0x16u);

          char v26 = 0;
        }
      }
      *(unsigned char *)(a2 + 129) = v26;
      if (sub_1002EA638(**(void **)(a1 + 536))) {
        sub_10057AA5C(a1, a2);
      }
      uint64_t v33 = **(void **)(a1 + 536);
      sub_1002EACE8(buf, a2 + 80);
      sub_1002EA74C(v33, (uint64_t)buf);
      if (*(void *)buf)
      {
        *(void *)&uint8_t buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
      }
      if (qword_1009F7EC0 != -1) {
        dispatch_once(&qword_1009F7EC0, &stru_1009B6458);
      }
      char v34 = sub_100686130((uint64_t)off_1009F7EB8, *(void *)a2);
      if (*(unsigned char *)(a1 + 648))
      {
        sub_10057DCFC(a1, v34);
      }
      else
      {
        if (qword_1009F7F20 != -1) {
          dispatch_once(&qword_1009F7F20, &stru_1009B63D8);
        }
        sub_10057DDA0(qword_1009F7F18, v34);
      }
      int v35 = sub_10057DE28(a1, v34);
      if (v35) {
        sub_100443E8C((uint64_t)v35, *(_WORD *)(a2 + 16));
      }
    }
    else
    {
      BOOL v29 = os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_ERROR);
      if (v29) {
        sub_10077B0CC();
      }
      uint64_t v30 = sub_10057C55C(v29, *(void *)a2, 12, 8);
      sub_100579E9C((uint64_t)v30, a2, 0);
    }
  }
  else
  {
    uint64_t v27 = sub_10003FB34();
    id v28 = (unint64_t *)(a1 + 424);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v27 + 448))(v27, a1 + 424))
    {
      unint64_t v36 = *(void *)(a2 + 64);
      unint64_t v37 = *v28;
      if (v36 < *v28)
      {
        int v38 = qword_100A1A008;
        if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)timeval buf = 134217984;
          *(void *)&uint8_t buf[4] = v37;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "LEA FW max packet size is %zu bytes", buf, 0xCu);
          unint64_t v36 = *(void *)(a2 + 64);
        }
        unint64_t *v28 = v36;
        unint64_t v37 = v36;
      }
      if (*(unsigned char *)(a1 + 440) == 1 && v37 >= 0x3D)
      {
        unint64_t v37 = 60;
        unint64_t *v28 = 60;
      }
      int v39 = qword_100A1A008;
      if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)timeval buf = 134217984;
        *(void *)&uint8_t buf[4] = v37;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "LEA max packet size is %zu bytes", buf, 0xCu);
      }
      operator new();
    }
    if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_ERROR)) {
      sub_10077B098();
    }
  }
}

void sub_10057DAE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a21 < 0) {
    operator delete(__p);
  }

  if (*(char *)(v46 - 105) < 0) {
    operator delete(*(void **)(v46 - 128));
  }

  _Unwind_Resume(a1);
}

void sub_10057DCFC(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = sub_10057DE28(a1, v5);
  uint64_t v4 = v3;
  if (v3)
  {
    if (sub_100443E74((uint64_t)v3)) {
      sub_100443E48((uint64_t)v4);
    }
    else {
      sub_1004430A4(v4);
    }
  }
  else
  {
    sub_10058203C(a1, a1 + 649, a1 + 264, v5);
  }
}

void sub_10057DD8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10057DDA0(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v3 = sub_10057DE28(a1, v4);
  if (v3) {
    sub_100443E2C((uint64_t)v3, 1);
  }
  else {
    sub_10058203C(a1, a1 + 649, a1 + 264, v4);
  }
}

void sub_10057DE14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id *sub_10057DE28(uint64_t a1, void *a2)
{
  id v3 = a2;
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, a1 + 560);
  for (int i = *(id ***)(a1 + 624); i != *(id ***)(a1 + 632); ++i)
  {
    id v5 = *i;
    int v6 = sub_100443E7C(*i);
    id v7 = [v6 UUIDString];
    int v8 = [v3 UUIDString];
    unsigned __int8 v9 = [v7 isEqualToString:v8];

    if (v9) {
      goto LABEL_6;
    }
  }
  id v5 = 0;
LABEL_6:
  sub_10003AFB4((uint64_t)v11);

  return v5;
}

void sub_10057DEFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10057DF40(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009B6458);
  }
  id v12 = sub_100686130((uint64_t)off_1009F7EB8, a2);
  if (v12)
  {
    v39[0] = 0;
    v39[1] = 0;
    sub_10003AED0((uint64_t)v39, a1 + 280);
    for (int i = *(void ***)(a1 + 344); i != *(void ***)(a1 + 352); ++i)
    {
      if (**i == a2) {
        goto LABEL_35;
      }
    }
    uint64_t v38 = 0;
    uint64_t v14 = sub_10003FB34();
    int v15 = sub_1003548A0(v14);
    id v16 = qword_100A1A008;
    if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 138413314;
      *(void *)&buf[1] = v12;
      __int16 v41 = 1024;
      *(_DWORD *)char v42 = a3;
      *(_WORD *)&v42[4] = 1024;
      *(_DWORD *)&v42[6] = a4;
      __int16 v43 = 1024;
      int v44 = a5;
      __int16 v45 = 1024;
      int v46 = a6;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Received 'version' command from device \"%@\" with version: %d, companyID: %d, hwVersion: %d, swVersion: %d", (uint8_t *)buf, 0x24u);
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B6418);
    }
    uint64_t v17 = off_1009F7ED8;
    sub_10004191C(__p, "IsPrimaryHearingAid");
    int v18 = sub_100030A04((uint64_t)v17, v12, (uint64_t)__p);
    int v19 = v18;
    if (v37 < 0)
    {
      operator delete(__p[0]);
      if (!v19) {
        goto LABEL_20;
      }
    }
    else if (!v18)
    {
      goto LABEL_20;
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B6418);
    }
    sub_1006B85C0((uint64_t)off_1009F7ED8, v12, @"IsPrimaryHearingAid");
LABEL_20:
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B6418);
    }
    char v20 = off_1009F7ED8;
    sub_10004191C(v34, "DisableLEA");
    uint64_t v21 = sub_100030A04((uint64_t)v20, v12, (uint64_t)v34);
    if (v15) {
      int v22 = v21;
    }
    else {
      int v22 = 1;
    }
    if (v35 < 0)
    {
      operator delete(v34[0]);
      if (v22) {
        goto LABEL_27;
      }
    }
    else if (v22)
    {
LABEL_27:
      int v23 = qword_100A1A008;
      uint64_t v21 = os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT);
      if (v21)
      {
        buf[0] = 138412290;
        *(void *)&buf[1] = v12;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Rejecting LEA connection for device \"%@\" as it is disabled", (uint8_t *)buf, 0xCu);
      }
      __int16 v24 = 7;
      goto LABEL_34;
    }
    if (a3 != 2 || v15 != 1)
    {
      uint64_t v25 = *(void *)(a1 + 344);
      uint64_t v26 = *(void *)(a1 + 352);
      if (v25 == v26)
      {
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009B6418);
        }
        uint64_t v27 = off_1009F7ED8;
        sub_10004191C(v32, "Enable Input");
        int v28 = sub_100030A04((uint64_t)v27, v12, (uint64_t)v32);
        if (v33 < 0) {
          operator delete(v32[0]);
        }
        BOOL v29 = qword_100A1A008;
        BOOL v30 = os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT);
        if (v28)
        {
          if (v30)
          {
            buf[0] = 141558275;
            *(void *)&buf[1] = 1752392040;
            __int16 v41 = 2113;
            *(void *)char v42 = v12;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "LEA: Set device %{private, mask.hash}@ to Tail", (uint8_t *)buf, 0x16u);
          }
        }
        else if (v30)
        {
          buf[0] = 141558275;
          *(void *)&buf[1] = 1752392040;
          __int16 v41 = 2113;
          *(void *)char v42 = v12;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "LEA: Set device %{private, mask.hash}@ to Head", (uint8_t *)buf, 0x16u);
        }
      }
      else if (v26 - v25 != 8)
      {
        BOOL v31 = os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_ERROR);
        if (v31) {
          sub_10077B134();
        }
        sub_10057C55C(v31, a2, 1, 7);
        goto LABEL_35;
      }
      operator new();
    }
    __int16 v24 = 2;
LABEL_34:
    sub_10057C55C(v21, a2, 1, v24);
LABEL_35:
    sub_10003AFB4((uint64_t)v39);
    goto LABEL_36;
  }
  sub_10057C55C(0, a2, 1, 3);
LABEL_36:
}

void sub_10057E644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34)
{
  _Unwind_Resume(a1);
}

char *sub_10057E700(uint64_t a1, char *__src, char *a3)
{
  id v3 = a3;
  id v4 = __src;
  int v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    BOOL v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      int v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      int v19 = 0;
    }
    char v20 = &v19[8 * v16];
    std::string __p = v19;
    uint64_t v27 = v20;
    int v28 = v20;
    BOOL v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        int v23 = (char *)sub_1000405F8(v8, v22);
        char v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        uint64_t v27 = v20;
        BOOL v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        uint64_t v27 = v20;
      }
    }
    *(void *)char v20 = *(void *)v3;
    int v28 = v20 + 8;
    id v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    unsigned __int8 v9 = __src + 8;
    id v10 = v6 - 8;
    uint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)id v4 = *(void *)v3;
  }
  return v4;
}

void sub_10057E908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10057E940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v37[0] = 0;
  v37[1] = 0;
  uint64_t v6 = sub_10003AED0((uint64_t)v37, a1 + 280);
  for (int i = *(void ***)(a1 + 344); ; ++i)
  {
    if (i == *(void ***)(a1 + 352)) {
      goto LABEL_32;
    }
    uint64_t v8 = *i;
    if (**i == a2) {
      break;
    }
  }
  unsigned __int8 v9 = qword_100A1A008;
  uint64_t v6 = os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    sub_10004C2C4(a3, &__p);
    if (SHIBYTE(v36) >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    id v11 = (id)v8[1];
    *(_DWORD *)timeval buf = 136446466;
    int v39 = p_p;
    __int16 v40 = 2112;
    id v41 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Received 'supported codec list (%{public}s)' command from device \"%@\"", buf, 0x16u);
    if (SHIBYTE(v36) < 0) {
      operator delete(__p);
    }
  }
  if (*((_DWORD *)v8 + 8) != 2)
  {
LABEL_32:
    sub_10057C55C(v6, a2, 2, 3);
    return sub_10003AFB4((uint64_t)v37);
  }
  sub_100579E9C(v6, (uint64_t)v8, 3u);
  unint64_t v12 = 0;
  std::string __p = 0;
  char v35 = 0;
  unint64_t v36 = 0;
  while (sub_100045F00(a3) > v12)
  {
    int v13 = sub_1006537C0(a3, v12);
    int v14 = v13;
    uint64_t v15 = v35;
    if (v35 >= v36)
    {
      uint64_t v17 = (char *)__p;
      uint64_t v18 = (v35 - (unsigned char *)__p) >> 2;
      unint64_t v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 62) {
        abort();
      }
      uint64_t v20 = v36 - (unsigned char *)__p;
      if ((v36 - (unsigned char *)__p) >> 1 > v19) {
        unint64_t v19 = v20 >> 1;
      }
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v19;
      }
      if (v21)
      {
        unint64_t v22 = (char *)sub_1002C44F0((uint64_t)&v36, v21);
        uint64_t v17 = (char *)__p;
        uint64_t v15 = v35;
      }
      else
      {
        unint64_t v22 = 0;
      }
      int v23 = &v22[4 * v18];
      *(_DWORD *)int v23 = v14;
      uint64_t v16 = v23 + 4;
      while (v15 != v17)
      {
        int v24 = *((_DWORD *)v15 - 1);
        v15 -= 4;
        *((_DWORD *)v23 - 1) = v24;
        v23 -= 4;
      }
      std::string __p = v23;
      char v35 = v16;
      unint64_t v36 = &v22[4 * v21];
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *(_DWORD *)char v35 = v13;
      uint64_t v16 = v15 + 4;
    }
    char v35 = v16;
    ++v12;
  }
  BOOL v31 = 0;
  __dst = 0;
  uint64_t v33 = 0;
  uint64_t v26 = __p;
  int64_t v27 = v35 - (unsigned char *)__p;
  if (v35 == __p)
  {
    uint64_t v30 = 0;
    BOOL v29 = 0;
  }
  else
  {
    sub_1002EA03C(&v31, v27 >> 2);
    int v28 = (char *)__dst;
    memmove(__dst, v26, v27);
    BOOL v29 = &v28[4 * (v27 >> 2)];
    __dst = v29;
    uint64_t v30 = (char *)v31;
  }
  if (v8 + 10 != &v31)
  {
    sub_1002EABE0((char *)v8 + 80, v30, (uint64_t)v29, (v29 - v30) >> 2);
    uint64_t v30 = (char *)v31;
  }
  if (v30)
  {
    __dst = v30;
    operator delete(v30);
  }
  sub_10057CB78(a1, (uint64_t)v8);
  if (__p)
  {
    char v35 = (char *)__p;
    operator delete(__p);
  }
  return sub_10003AFB4((uint64_t)v37);
}

void sub_10057EC44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  sub_10003AFB4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10057ECA4(uint64_t a1, uint64_t a2, int a3)
{
  v12[0] = 0;
  v12[1] = 0;
  uint64_t v6 = sub_10003AED0((uint64_t)v12, a1 + 280);
  for (int i = *(void ***)(a1 + 344); ; ++i)
  {
    if (i == *(void ***)(a1 + 352)) {
      goto LABEL_10;
    }
    uint64_t v8 = *i;
    if (**i == a2) {
      break;
    }
  }
  unsigned __int8 v9 = qword_100A1A008;
  uint64_t v6 = os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    id v10 = (id)v8[1];
    *(_DWORD *)timeval buf = 138412290;
    id v14 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Received 'codec ready' command from device \"%@\"", buf, 0xCu);
  }
  if (*((_DWORD *)v8 + 8) != 5)
  {
LABEL_10:
    sub_10057C55C(v6, a2, 4, 3);
    return sub_10003AFB4((uint64_t)v12);
  }
  sub_100579E9C(v6, (uint64_t)v8, 6u);
  sub_1002E857C(**(void **)(a1 + 536), a3 + 1250);
  if (sub_1002EA638(**(void **)(a1 + 536))) {
    sub_10057AA5C(a1, (uint64_t)v8);
  }
  return sub_10003AFB4((uint64_t)v12);
}

void sub_10057EE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10057EE24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v22[0] = 0;
  v22[1] = 0;
  uint64_t v6 = sub_10003AED0((uint64_t)v22, a1 + 280);
  uint64_t v8 = *(uint64_t ***)(a1 + 344);
  unint64_t v7 = *(uint64_t ***)(a1 + 352);
  if (v8 == v7)
  {
LABEL_5:
    sub_10057C55C(v6, a2, 7, 3);
  }
  else
  {
    unsigned __int8 v9 = *(uint64_t ***)(a1 + 344);
    while (1)
    {
      id v10 = *v9;
      if (**v9 == a2) {
        break;
      }
      if (++v9 == v7) {
        goto LABEL_5;
      }
    }
    id v11 = qword_100A1A008;
    uint64_t v12 = os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT);
    if (v12)
    {
      sub_10004C2C4(a3, __p);
      if (v21 >= 0) {
        int v13 = __p;
      }
      else {
        int v13 = (void **)__p[0];
      }
      id v14 = (id)v10[1];
      *(_DWORD *)timeval buf = 136446466;
      int v24 = v13;
      __int16 v25 = 2112;
      id v26 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Received 'passthrough [ %{public}s ]' command from device \"%@\"", buf, 0x16u);
      if (v21 < 0) {
        operator delete(__p[0]);
      }

      uint64_t v8 = *(uint64_t ***)(a1 + 344);
      unint64_t v7 = *(uint64_t ***)(a1 + 352);
    }
    if (v8 == v7) {
      goto LABEL_22;
    }
    char v15 = 0;
    do
    {
      while (*v8 != v10 && *((unsigned __int16 *)*v8 + 8) == *((unsigned __int16 *)v10 + 8))
      {
        LOBYTE(__p[0]) = 0;
        sub_10001B8E0(__p);
        uint64_t v16 = **v8;
        uint64_t v17 = (char *)sub_10004A6E4(a3);
        unsigned __int8 v18 = sub_100045F00(a3);
        sub_100242448(v16, v17, v18);
        uint64_t v12 = (uint64_t)sub_10001B8AC(__p);
        unint64_t v7 = *(uint64_t ***)(a1 + 352);
        ++v8;
        char v15 = 1;
        if (v8 == v7) {
          return sub_10003AFB4((uint64_t)v22);
        }
      }
      ++v8;
    }
    while (v8 != v7);
    if ((v15 & 1) == 0) {
LABEL_22:
    }
      sub_10057C55C(v12, a2, 7, 6);
  }
  return sub_10003AFB4((uint64_t)v22);
}

void sub_10057F034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10057F06C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  v14[0] = 0;
  v14[1] = 0;
  sub_10003AED0((uint64_t)v14, a1 + 280);
  uint64_t v8 = *(void **)(a1 + 344);
  unsigned __int8 v9 = *(void **)(a1 + 352);
  while (v8 != v9)
  {
    id v10 = (void *)*v8;
    if (*(void *)*v8 == a2)
    {
      id v11 = qword_100A1A008;
      if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_ERROR))
      {
        id v13 = (id)v10[1];
        *(_DWORD *)timeval buf = 67109634;
        int v16 = a3;
        __int16 v17 = 1024;
        int v18 = a4;
        __int16 v19 = 2112;
        id v20 = v13;
        _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Received 'error (%u/%u)' command from device \"%@\"", buf, 0x18u);
      }
      return sub_10003AFB4((uint64_t)v14);
    }
    ++v8;
  }
  return sub_10003AFB4((uint64_t)v14);
}

uint64_t sub_10057F190(uint64_t a1, uint64_t a2)
{
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 280);
  for (int i = *(void ***)(a1 + 344); i != *(void ***)(a1 + 352); ++i)
  {
    id v5 = *i;
    if (**i == a2)
    {
      uint64_t v6 = qword_100A1A008;
      if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
      {
        id v7 = (id)v5[1];
        *(_DWORD *)timeval buf = 138412290;
        id v11 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received 'restart' command from device \"%@\"", buf, 0xCu);
      }
      sub_100579C1C(a1, (uint64_t)v5);
      return sub_10003AFB4((uint64_t)v9);
    }
  }
  return sub_10003AFB4((uint64_t)v9);
}

void sub_10057F298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10057F2B4(uint64_t **a1, uint64_t a2, unsigned int a3)
{
  v15[0] = 0;
  v15[1] = 0;
  uint64_t v6 = sub_10003AED0((uint64_t)v15, (uint64_t)(a1 + 35));
  for (int i = (int **)a1[43]; ; ++i)
  {
    if (i == (int **)a1[44]) {
      goto LABEL_13;
    }
    uint64_t v8 = *i;
    if (*(void *)*i == a2) {
      break;
    }
  }
  unsigned __int8 v9 = qword_100A1A008;
  uint64_t v6 = os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    id v10 = *((id *)v8 + 1);
    *(_DWORD *)timeval buf = 67109378;
    unsigned int v17 = a3;
    __int16 v18 = 2112;
    id v19 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Received 'set volume (%u)' command from device \"%@\"", buf, 0x12u);
  }
  if (v8[8] < 3)
  {
LABEL_13:
    sub_10057C55C(v6, a2, 10, 3);
    return sub_10003AFB4((uint64_t)v15);
  }
  sub_1002E786C(*a1[67], (float)a3 / 255.0);
  *((unsigned char *)v8 + 128) = a3;
  id v13 = a1[43];
  uint64_t v12 = a1[44];
  while (v13 != v12)
  {
    if ((int *)*v13 != v8)
    {
      sub_10057B090(v11, *v13, a3);
      uint64_t v12 = a1[44];
    }
    ++v13;
  }
  return sub_10003AFB4((uint64_t)v15);
}

void sub_10057F430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10057F454(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  v15[0] = 0;
  v15[1] = 0;
  uint64_t v8 = sub_10003AED0((uint64_t)v15, a1 + 280);
  unsigned __int8 v9 = *(void ***)(a1 + 344);
  id v10 = *(void ***)(a1 + 352);
  while (v9 != v10)
  {
    uint64_t v11 = *v9;
    if (**v9 == a2)
    {
      uint64_t v12 = qword_100A1A008;
      uint64_t v8 = os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT);
      if (v8)
      {
        id v13 = (id)v11[1];
        *(_DWORD *)timeval buf = 67109891;
        unsigned int v17 = a3;
        __int16 v18 = 1024;
        int v19 = a4;
        __int16 v20 = 2160;
        uint64_t v21 = 1752392040;
        __int16 v22 = 2113;
        id v23 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Received 'capabilities (%u/%u)' command from device %{private, mask.hash}@", buf, 0x22u);
      }
      if (*((_DWORD *)v11 + 8) == 1)
      {
        sub_100579E9C(v8, (uint64_t)v11, 2u);
        v11[8] = a3;
        *((_DWORD *)v11 + 18) = a4;
        return sub_10003AFB4((uint64_t)v15);
      }
      break;
    }
    ++v9;
  }
  sub_10057C55C(v8, a2, 12, 3);
  return sub_10003AFB4((uint64_t)v15);
}

void sub_10057F5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10057F5E4(uint64_t a1, uint64_t a2)
{
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, a1 + 280);
  for (int i = *(void ***)(a1 + 344); i != *(void ***)(a1 + 352); ++i)
  {
    id v5 = *i;
    if (**i == a2)
    {
      uint64_t v6 = qword_100A1A008;
      BOOL v7 = os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT);
      if (v7)
      {
        id v8 = (id)v5[1];
        *(_DWORD *)timeval buf = 138412290;
        id v12 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received 'stream ready' command from device \"%@\"", buf, 0xCu);
      }
      if (*((_DWORD *)v5 + 8) == 7)
      {
        sub_100579E9C(v7, (uint64_t)v5, 8u);
        sub_10057A5DC(a1);
      }
      return sub_10003AFB4((uint64_t)v10);
    }
  }
  return sub_10003AFB4((uint64_t)v10);
}

void sub_10057F700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10057F71C(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  v25[0] = 0;
  v25[1] = 0;
  sub_10003AED0((uint64_t)v25, (uint64_t)(a1 + 35));
  for (int i = (void *)a1[43]; ; ++i)
  {
    if (i == (void *)a1[44]) {
      return sub_10003AFB4((uint64_t)v25);
    }
    unsigned __int8 v9 = (void *)*i;
    if (*(void *)*i == a2) {
      break;
    }
  }
  id v10 = qword_100A1A008;
  if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEBUG))
  {
    sub_10004C2C4(a3, __p);
    if (v24 >= 0) {
      __int16 v18 = __p;
    }
    else {
      __int16 v18 = (void **)__p[0];
    }
    id v19 = (id)v9[1];
    __int16 v20 = v19;
    uint64_t v21 = "No";
    *(_DWORD *)timeval buf = 136446722;
    *(void *)int64_t v27 = v18;
    if (a4) {
      uint64_t v21 = "Yes";
    }
    *(_WORD *)&v27[8] = 2112;
    id v28 = v19;
    __int16 v29 = 2080;
    uint64_t v30 = v21;
    _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Received 'audio (%{public}s)' from device \"%@\" wakeUpEvent %s", buf, 0x20u);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
  }
  if (*((_DWORD *)v9 + 8) != 8)
  {
    char v15 = qword_100A1A008;
    if (!os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_ERROR)) {
      return sub_10003AFB4((uint64_t)v25);
    }
    BOOL v16 = 0;
LABEL_24:
    int v22 = *((_DWORD *)v9 + 6);
    *(_DWORD *)timeval buf = 67109376;
    *(_DWORD *)int64_t v27 = v16;
    *(_WORD *)&v27[4] = 1024;
    *(_DWORD *)&v27[6] = v22;
    _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Skipping recvAudioEvent, canStreamAudio: %u, Streaming mode: %u", buf, 0xEu);
    return sub_10003AFB4((uint64_t)v25);
  }
  int v11 = *((_DWORD *)v9 + 12);
  if (v11 != 3 || *((_DWORD *)v9 + 6) != 2)
  {
    char v15 = qword_100A1A008;
    if (!os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_ERROR)) {
      return sub_10003AFB4((uint64_t)v25);
    }
    BOOL v16 = v11 == 3;
    goto LABEL_24;
  }
  id v12 = (unsigned __int8 *)sub_10004A6E4(a3);
  size_t v13 = sub_100045F00(a3);
  sub_10057C5FC((uint64_t)a1, v12, v13, a4);
  uint64_t v14 = *(void *)(a1[67] + 8);
  if (*(unsigned char *)(v14 + 5))
  {
    a1[68] = dispatch_time(0, 3750000 * *(unsigned __int8 *)(v14 + 1) + 2500000);
    sub_10057F9CC((uint64_t)a1, a2);
  }
  return sub_10003AFB4((uint64_t)v25);
}

void sub_10057F9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10057F9CC(uint64_t a1, uint64_t a2)
{
  id v3 = *(NSObject **)(a1 + 552);
  if (v3)
  {
    dispatch_suspend(v3);
  }
  else
  {
    uint64_t v5 = sub_100019878();
    uint64_t v6 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 1uLL, *(dispatch_queue_t *)(v5 + 8));
    *(void *)(a1 + 552) = v6;
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1005813E4;
    handler[3] = &unk_100997528;
    void handler[4] = a2;
    dispatch_source_set_event_handler(v6, handler);
  }
  BOOL v7 = *(NSObject **)(a1 + 552);
  if (v7)
  {
    dispatch_source_set_timer(v7, *(void *)(a1 + 544), 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
    dispatch_resume(*(dispatch_object_t *)(a1 + 552));
  }
}

uint64_t sub_10057FA9C(uint64_t a1, uint64_t a2, int a3)
{
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, a1 + 280);
  uint64_t v6 = *(void **)(a1 + 344);
  BOOL v7 = *(void **)(a1 + 352);
  while (v6 != v7)
  {
    id v8 = (void *)*v6;
    if (*(void *)*v6 == a2)
    {
      unsigned __int8 v9 = qword_100A1A008;
      if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
      {
        id v10 = (id)v8[1];
        *(_DWORD *)timeval buf = 67109378;
        int v14 = a3;
        __int16 v15 = 2112;
        id v16 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Received 'state noti (%u)' command from device \"%@\"", buf, 0x12u);
      }
      return sub_10003AFB4((uint64_t)v12);
    }
    ++v6;
  }
  return sub_10003AFB4((uint64_t)v12);
}

uint64_t sub_10057FBAC(uint64_t a1, uint64_t a2, int a3, int a4)
{
  v14[0] = 0;
  v14[1] = 0;
  sub_10003AED0((uint64_t)v14, a1 + 280);
  id v8 = *(void **)(a1 + 344);
  unsigned __int8 v9 = *(void **)(a1 + 352);
  while (v8 != v9)
  {
    id v10 = (void *)*v8;
    if (*(void *)*v8 == a2)
    {
      int v11 = qword_100A1A008;
      if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
      {
        id v12 = (id)v10[1];
        *(_DWORD *)timeval buf = 67109634;
        int v16 = a3;
        __int16 v17 = 1024;
        int v18 = a4;
        __int16 v19 = 2112;
        id v20 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Received 'link quality noti (%d, %u)' command from device \"%@\"", buf, 0x18u);
      }
      return sub_10003AFB4((uint64_t)v14);
    }
    ++v8;
  }
  return sub_10003AFB4((uint64_t)v14);
}

uint64_t sub_10057FCCC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  v15[0] = 0;
  v15[1] = 0;
  sub_10003AED0((uint64_t)v15, a1 + 280);
  for (int i = *(void **)(a1 + 344); i != *(void **)(a1 + 352); ++i)
  {
    BOOL v7 = (void *)*i;
    if (*(void *)*i == a2)
    {
      id v8 = qword_100A1A008;
      if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
      {
        id v9 = (id)v7[1];
        *(_DWORD *)timeval buf = 67109378;
        unsigned int v17 = a3;
        __int16 v18 = 2112;
        id v19 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received 'bonding status response (%u)' command from device \"%@\"", buf, 0x12u);
      }
      if (a3 >= 3) {
        unsigned __int8 v10 = 0;
      }
      else {
        unsigned __int8 v10 = 0x10102u >> (8 * a3);
      }
      id v11 = (id)v7[1];
      id v12 = sub_10057DE28(a1, v11);
      if (v12)
      {
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009B6418);
        }
        uint64_t v13 = sub_100030DCC((uint64_t)off_1009F7ED8, v11, 0);
        buf[0] = BYTE5(v13);
        buf[1] = BYTE4(v13);
        uint8_t buf[2] = BYTE3(v13);
        _DWORD buf[3] = BYTE2(v13);
        LOBYTE(v17) = BYTE1(v13);
        BYTE1(v17) = v13;
        sub_10044337C(v12, (uint64_t)buf, (unsigned __int8 *)(a1 + 649), v10);
      }

      return sub_10003AFB4((uint64_t)v15);
    }
  }
  return sub_10003AFB4((uint64_t)v15);
}

void sub_10057FE98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10057FEC0(uint64_t a1, uint64_t a2, int a3)
{
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, a1 + 280);
  uint64_t v6 = *(void **)(a1 + 344);
  BOOL v7 = *(void **)(a1 + 352);
  while (v6 != v7)
  {
    id v8 = (void *)*v6;
    if (*(void *)*v6 == a2)
    {
      id v9 = qword_100A1A008;
      if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
      {
        id v10 = (id)v8[1];
        *(_DWORD *)timeval buf = 67109378;
        int v14 = a3;
        __int16 v15 = 2112;
        id v16 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Received 'siri (%u)' command from device \"%@\"", buf, 0x12u);
      }
      return sub_10003AFB4((uint64_t)v12);
    }
    ++v6;
  }
  return sub_10003AFB4((uint64_t)v12);
}

void sub_10057FFD0(uint64_t a1, __int16 a2, __int16 a3, __int16 a4, __int16 a5)
{
  char v10 = sub_100234878(a1);
  uint64_t v11 = sub_100019878();
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_100580088;
  v12[3] = &unk_1009A0160;
  void v12[4] = a1;
  __int16 v13 = a2;
  __int16 v14 = a3;
  __int16 v15 = a4;
  __int16 v16 = a5;
  char v17 = v10;
  sub_100013018(v11, v12);
}

void sub_100580088(uint64_t a1)
{
  if (qword_1009F7F20 != -1) {
    dispatch_once(&qword_1009F7F20, &stru_1009B63D8);
  }
  uint64_t v2 = qword_1009F7F18;
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(unsigned __int16 *)(a1 + 40);
  int v5 = *(unsigned __int16 *)(a1 + 42);
  int v6 = *(unsigned __int16 *)(a1 + 44);
  int v7 = *(unsigned __int16 *)(a1 + 46);

  sub_10057DF40(v2, v3, v4, v5, v6, v7);
}

void sub_100580100(uint64_t a1, const void *a2, unsigned int a3)
{
  id v8 = 0;
  id v9 = 0;
  sub_1000335D8(&v8, a2, a3);
  uint64_t v4 = sub_100019878();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3321888768;
  _DWORD v5[2] = sub_100580250;
  v5[3] = &unk_1009B5C38;
  v5[4] = a1;
  int v6 = &off_100998428;
  int v7 = v9;
  if (v9) {
    sub_100037354((uint64_t)v9);
  }
  sub_100013018(v4, v5);
  int v6 = &off_100998428;
  if (v7) {
    sub_1000368F4(v7);
  }
  id v8 = &off_100998428;
  if (v9) {
    sub_1000368F4(v9);
  }
}

void sub_100580200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, atomic_uint *a16)
{
  if (a16) {
    sub_1000368F4(a16);
  }
  *(void *)(v16 - 32) = &off_100998428;
  __int16 v18 = *(atomic_uint **)(v16 - 24);
  if (v18) {
    sub_1000368F4(v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100580250(uint64_t a1)
{
  if (qword_1009F7F20 != -1) {
    dispatch_once(&qword_1009F7F20, &stru_1009B63D8);
  }
  uint64_t v2 = qword_1009F7F18;
  uint64_t v3 = *(void *)(a1 + 32);

  return sub_10057E940(v2, v3, a1 + 40);
}

void sub_1005802B8(uint64_t a1, __int16 a2)
{
  uint64_t v4 = sub_100019878();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_10058033C;
  v5[3] = &unk_1009A0B58;
  v5[4] = a1;
  __int16 v6 = a2;
  sub_100013018(v4, v5);
}

uint64_t sub_10058033C(uint64_t a1)
{
  if (qword_1009F7F20 != -1) {
    dispatch_once(&qword_1009F7F20, &stru_1009B63D8);
  }
  uint64_t v2 = qword_1009F7F18;
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(unsigned __int16 *)(a1 + 40);

  return sub_10057ECA4(v2, v3, v4);
}

void sub_1005803A4(uint64_t a1, const void *a2, unsigned int a3)
{
  id v8 = 0;
  id v9 = 0;
  sub_1000335D8(&v8, a2, a3);
  uint64_t v4 = sub_100019878();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3321888768;
  _DWORD v5[2] = sub_1005804F4;
  v5[3] = &unk_1009B5C38;
  v5[4] = a1;
  __int16 v6 = &off_100998428;
  int v7 = v9;
  if (v9) {
    sub_100037354((uint64_t)v9);
  }
  sub_100013018(v4, v5);
  __int16 v6 = &off_100998428;
  if (v7) {
    sub_1000368F4(v7);
  }
  id v8 = &off_100998428;
  if (v9) {
    sub_1000368F4(v9);
  }
}

void sub_1005804A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, atomic_uint *a16)
{
  if (a16) {
    sub_1000368F4(a16);
  }
  *(void *)(v16 - 32) = &off_100998428;
  __int16 v18 = *(atomic_uint **)(v16 - 24);
  if (v18) {
    sub_1000368F4(v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005804F4(uint64_t a1)
{
  if (qword_1009F7F20 != -1) {
    dispatch_once(&qword_1009F7F20, &stru_1009B63D8);
  }
  uint64_t v2 = qword_1009F7F18;
  uint64_t v3 = *(void *)(a1 + 32);

  return sub_10057EE24(v2, v3, a1 + 40);
}

void sub_10058055C(uint64_t a1, char a2, __int16 a3)
{
  uint64_t v6 = sub_100019878();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_1005805F0;
  v7[3] = &unk_1009ACD50;
  void v7[4] = a1;
  char v9 = a2;
  __int16 v8 = a3;
  sub_100013018(v6, v7);
}

uint64_t sub_1005805F0(uint64_t a1)
{
  if (qword_1009F7F20 != -1) {
    dispatch_once(&qword_1009F7F20, &stru_1009B63D8);
  }
  uint64_t v2 = qword_1009F7F18;
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(unsigned __int8 *)(a1 + 42);
  int v5 = *(unsigned __int16 *)(a1 + 40);

  return sub_10057F06C(v2, v3, v4, v5);
}

void sub_10058065C(uint64_t a1)
{
  uint64_t v2 = sub_100019878();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1005806D8;
  uint64_t v3[3] = &unk_100997528;
  void v3[4] = a1;
  sub_100013018(v2, v3);
}

uint64_t sub_1005806D8(uint64_t a1)
{
  if (qword_1009F7F20 != -1) {
    dispatch_once(&qword_1009F7F20, &stru_1009B63D8);
  }
  uint64_t v2 = qword_1009F7F18;
  uint64_t v3 = *(void *)(a1 + 32);

  return sub_10057F190(v2, v3);
}

void sub_10058073C(uint64_t a1, char a2)
{
  uint64_t v4 = sub_100019878();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1005807C0;
  v5[3] = &unk_100998A58;
  v5[4] = a1;
  char v6 = a2;
  sub_100013018(v4, v5);
}

uint64_t sub_1005807C0(uint64_t a1)
{
  if (qword_1009F7F20 != -1) {
    dispatch_once(&qword_1009F7F20, &stru_1009B63D8);
  }
  uint64_t v2 = (uint64_t **)qword_1009F7F18;
  uint64_t v3 = *(void *)(a1 + 32);
  unsigned int v4 = *(unsigned __int8 *)(a1 + 40);

  return sub_10057F2B4(v2, v3, v4);
}

void sub_100580828(uint64_t a1, char a2, char a3)
{
  uint64_t v6 = sub_100019878();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_1005808BC;
  v7[3] = &unk_1009A0B58;
  void v7[4] = a1;
  char v8 = a2;
  char v9 = a3;
  sub_100013018(v6, v7);
}

uint64_t sub_1005808BC(uint64_t a1)
{
  if (qword_1009F7F20 != -1) {
    dispatch_once(&qword_1009F7F20, &stru_1009B63D8);
  }
  uint64_t v2 = qword_1009F7F18;
  uint64_t v3 = *(void *)(a1 + 32);
  unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
  int v5 = *(unsigned __int8 *)(a1 + 41);

  return sub_10057F454(v2, v3, v4, v5);
}

void sub_100580928(uint64_t a1)
{
  uint64_t v2 = sub_100019878();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1005809A4;
  uint64_t v3[3] = &unk_100997528;
  void v3[4] = a1;
  sub_100013018(v2, v3);
}

uint64_t sub_1005809A4(uint64_t a1)
{
  if (qword_1009F7F20 != -1) {
    dispatch_once(&qword_1009F7F20, &stru_1009B63D8);
  }
  uint64_t v2 = qword_1009F7F18;
  uint64_t v3 = *(void *)(a1 + 32);

  return sub_10057F5E4(v2, v3);
}

void sub_100580A08(uint64_t a1, const void *a2, unsigned int a3, char a4)
{
  uint64_t v11 = 0;
  id v12 = 0;
  sub_1000335D8(&v11, a2, a3);
  uint64_t v6 = sub_100019878();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3321888768;
  _DWORD v7[2] = sub_100580B68;
  v7[3] = &unk_1009B62E0;
  void v7[4] = a1;
  char v8 = &off_100998428;
  char v9 = v12;
  if (v12) {
    sub_100037354((uint64_t)v12);
  }
  char v10 = a4;
  sub_100013018(v6, v7);
  char v8 = &off_100998428;
  if (v9) {
    sub_1000368F4(v9);
  }
  uint64_t v11 = &off_100998428;
  if (v12) {
    sub_1000368F4(v12);
  }
}

void sub_100580B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, atomic_uint *a15)
{
  if (a15) {
    sub_1000368F4(a15);
  }
  *(void *)(v15 - 48) = &off_100998428;
  char v17 = *(atomic_uint **)(v15 - 40);
  if (v17) {
    sub_1000368F4(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100580B68(uint64_t a1)
{
  if (qword_1009F7F20 != -1) {
    dispatch_once(&qword_1009F7F20, &stru_1009B63D8);
  }
  uint64_t v2 = (void *)qword_1009F7F18;
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(unsigned __int8 *)(a1 + 56);

  return sub_10057F71C(v2, v3, a1 + 40, v4);
}

void sub_100580BD4(uint64_t a1, char a2)
{
  uint64_t v4 = sub_100019878();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_100580C58;
  v5[3] = &unk_100998A58;
  v5[4] = a1;
  char v6 = a2;
  sub_100013018(v4, v5);
}

uint64_t sub_100580C58(uint64_t a1)
{
  if (qword_1009F7F20 != -1) {
    dispatch_once(&qword_1009F7F20, &stru_1009B63D8);
  }
  uint64_t v2 = qword_1009F7F18;
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(unsigned __int8 *)(a1 + 40);

  return sub_10057FA9C(v2, v3, v4);
}

void sub_100580CC0(uint64_t a1, char a2, char a3)
{
  uint64_t v6 = sub_100019878();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_100580D54;
  v7[3] = &unk_1009A0B58;
  void v7[4] = a1;
  char v8 = a2;
  char v9 = a3;
  sub_100013018(v6, v7);
}

uint64_t sub_100580D54(uint64_t a1)
{
  if (qword_1009F7F20 != -1) {
    dispatch_once(&qword_1009F7F20, &stru_1009B63D8);
  }
  uint64_t v2 = qword_1009F7F18;
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(char *)(a1 + 40);
  int v5 = *(unsigned __int8 *)(a1 + 41);

  return sub_10057FBAC(v2, v3, v4, v5);
}

void sub_100580DC0(uint64_t a1, char a2)
{
  uint64_t v4 = sub_100019878();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_100580E44;
  v5[3] = &unk_100998A58;
  v5[4] = a1;
  char v6 = a2;
  sub_100013018(v4, v5);
}

uint64_t sub_100580E44(uint64_t a1)
{
  if (qword_1009F7F20 != -1) {
    dispatch_once(&qword_1009F7F20, &stru_1009B63D8);
  }
  uint64_t v2 = qword_1009F7F18;
  uint64_t v3 = *(void *)(a1 + 32);
  unsigned int v4 = *(unsigned __int8 *)(a1 + 40);

  return sub_10057FCCC(v2, v3, v4);
}

void sub_100580EAC(uint64_t a1, char a2)
{
  uint64_t v4 = sub_100019878();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_100580F30;
  v5[3] = &unk_100998A58;
  v5[4] = a1;
  char v6 = a2;
  sub_100013018(v4, v5);
}

uint64_t sub_100580F30(uint64_t a1)
{
  if (qword_1009F7F20 != -1) {
    dispatch_once(&qword_1009F7F20, &stru_1009B63D8);
  }
  uint64_t v2 = qword_1009F7F18;
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(unsigned __int8 *)(a1 + 40);

  return sub_10057FEC0(v2, v3, v4);
}

void sub_100580F98(uint64_t a1, int a2, char a3)
{
  uint64_t v6 = sub_100019878();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_10058102C;
  v7[3] = &unk_1009A6D98;
  void v7[4] = a1;
  int v8 = a2;
  char v9 = a3;
  sub_100013018(v6, v7);
}

uint64_t sub_10058102C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1009F7F20 != -1) {
    dispatch_once(&qword_1009F7F20, &stru_1009B63D8);
  }
  uint64_t v4 = qword_1009F7F18;
  uint64_t v5 = *(void *)(a1 + 32);
  int v6 = *(unsigned __int8 *)(a1 + 44);

  return sub_10057A25C(v4, v5, a3, v6);
}

void sub_100581094(uint64_t a1, __int16 a2)
{
  uint64_t v4 = sub_100019878();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_100581118;
  v5[3] = &unk_1009A0B58;
  v5[4] = a1;
  __int16 v6 = a2;
  sub_100013018(v4, v5);
}

uint64_t sub_100581118(uint64_t a1)
{
  if (qword_1009F7F20 != -1) {
    dispatch_once(&qword_1009F7F20, &stru_1009B63D8);
  }
  uint64_t v2 = (void *)qword_1009F7F18;
  uint64_t v3 = *(void *)(a1 + 32);
  unsigned int v4 = *(unsigned __int16 *)(a1 + 40);

  return sub_10057A6B8(v2, v3, v4);
}

void sub_100581180(uint64_t a1, int a2)
{
  uint64_t v4 = sub_100019878();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_100581204;
  v5[3] = &unk_100997570;
  v5[4] = a1;
  int v6 = a2;
  sub_100013018(v4, v5);
}

uint64_t sub_100581204(uint64_t a1)
{
  if (qword_1009F7F20 != -1) {
    dispatch_once(&qword_1009F7F20, &stru_1009B63D8);
  }
  uint64_t v2 = qword_1009F7F18;
  uint64_t v3 = *(void *)(a1 + 32);

  return sub_10057A910(v2, v3);
}

uint64_t sub_100581268(void *a1, uint64_t a2)
{
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, (uint64_t)(a1 + 35));
  for (int i = (void *)a1[43]; i != (void *)a1[44]; ++i)
  {
    uint64_t v5 = (void *)*i;
    if (*(void *)*i == a2)
    {
      int v6 = qword_100A1A008;
      if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
      {
        id v7 = (id)v5[1];
        *(_DWORD *)timeval buf = 138412290;
        id v11 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "No Audio from device \"%@\", add empty packet for PLC", buf, 0xCu);
      }
      if (*((_DWORD *)v5 + 8) == 8 && *((_DWORD *)v5 + 12) == 3)
      {
        sub_10057C5FC((uint64_t)a1, 0, 0, 0);
        a1[68] = dispatch_time(0, 2500000 * *(unsigned __int8 *)(*(void *)(a1[67] + 8) + 1));
        sub_10057F9CC(a1, a2);
      }
      return sub_10003AFB4((uint64_t)v9);
    }
  }
  return sub_10003AFB4((uint64_t)v9);
}

void sub_1005813C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1005813E4(uint64_t a1)
{
  if (qword_1009F7F20 != -1) {
    dispatch_once(&qword_1009F7F20, &stru_1009B63D8);
  }
  uint64_t v2 = (void *)qword_1009F7F18;
  uint64_t v3 = *(void *)(a1 + 32);

  return sub_100581268(v2, v3);
}

void sub_100581448(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[43];
  if (v2 != (uint64_t *)a1[44])
  {
    uint64_t v3 = 0;
    char v4 = 0;
    char v5 = 0;
    while (1)
    {
      uint64_t v6 = *v2;
      if (!*(unsigned char *)(*v2 + 18)) {
        uint64_t v3 = *v2;
      }
      uint64_t v7 = a1[67];
      if (*(_DWORD *)(v7 + 16) != 2) {
        break;
      }
      int v8 = qword_100A1A008;
      if (!*(unsigned char *)(v6 + 129)) {
        goto LABEL_11;
      }
      *(_DWORD *)(v6 + 24) = 2;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        id v9 = *(id *)(v6 + 8);
        *(_DWORD *)timeval buf = 138412290;
        id v17 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Set device \"%@\" as Bidirectional", buf, 0xCu);

        uint64_t v7 = a1[67];
      }
      char v5 = 1;
      sub_1002EA978(*(void *)v7, 1);
LABEL_14:
      if (++v2 == (uint64_t *)a1[44])
      {
        if (v5) {
          goto LABEL_22;
        }
        goto LABEL_18;
      }
    }
    int v8 = qword_100A1A008;
LABEL_11:
    *(_DWORD *)(v6 + 24) = 0;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = *(id *)(v6 + 8);
      *(_DWORD *)timeval buf = 138412290;
      id v17 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Set device \"%@\" as output", buf, 0xCu);
    }
    char v4 = 1;
    goto LABEL_14;
  }
  uint64_t v3 = 0;
  char v4 = 0;
LABEL_18:
  uint64_t v11 = a1[67];
  if (*(_DWORD *)(v11 + 16) == 2)
  {
    id v12 = qword_100A1A008;
    if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)timeval buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "No Input device found. Disable InputAudio", buf, 2u);
      uint64_t v11 = a1[67];
    }
    sub_1002EA978(*(void *)v11, 0);
  }
LABEL_22:
  if ((v4 & 1) == 0 && a1[44] - a1[43] == 16 && v3 != 0)
  {
    __int16 v14 = qword_100A1A008;
    if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
    {
      id v15 = *(id *)(v3 + 8);
      *(_DWORD *)timeval buf = 138412290;
      id v17 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Both devices set to Bidirectional, set head session(%@) to output", buf, 0xCu);
    }
    *(_DWORD *)(v3 + 24) = 0;
  }
}

void sub_1005816E0(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 352) - *(void *)(a1 + 344) == 8)
  {
    if (*(unsigned char *)(a2 + 129))
    {
      if (*(unsigned char *)(a2 + 18)) {
        return;
      }
      uint64_t v3 = qword_100A1A008;
      if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
      {
        id v4 = *(id *)(a2 + 8);
        int v9 = 138412290;
        id v10 = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Reset device %@ to tail", (uint8_t *)&v9, 0xCu);
      }
      char v5 = 1;
    }
    else
    {
      if (!*(unsigned char *)(a2 + 18)) {
        return;
      }
      uint64_t v6 = qword_100A1A008;
      BOOL v7 = os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT);
      char v5 = 0;
      if (v7)
      {
        id v8 = *(id *)(a2 + 8);
        int v9 = 138412290;
        id v10 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Reset device %@ to head", (uint8_t *)&v9, 0xCu);

        char v5 = 0;
      }
    }
    *(unsigned char *)(a2 + 18) = v5;
  }
}

void sub_100581834(uint64_t a1, __int16 a2, char a3, __int16 a4, char a5, char a6, char a7, char a8, char a9, char a10)
{
  uint64_t v17 = sub_100019878();
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  void v18[2] = sub_100581910;
  v18[3] = &unk_1009ACD50;
  __int16 v19 = a2;
  char v21 = a3;
  __int16 v20 = a4;
  char v22 = a5;
  char v23 = a6;
  char v24 = a7;
  char v25 = a8;
  char v26 = a9;
  char v27 = a10;
  sub_100013018(v17, v18);
}

void sub_100581910()
{
  if (qword_1009F7F20 != -1) {
    dispatch_once(&qword_1009F7F20, &stru_1009B63D8);
  }
}

void sub_100581938(uint64_t a1, uint64_t a2)
{
  if (*(_WORD *)a2 == 1)
  {
    *(_OWORD *)(a1 + 464) = 0u;
    *(_OWORD *)(a1 + 480) = 0u;
    *(_DWORD *)(a1 + 528) = 0;
    *(_OWORD *)(a1 + 496) = 0u;
    *(_OWORD *)(a1 + 512) = 0u;
    *(_WORD *)(a1 + 464) = -1;
    *(_WORD *)(a1 + 484) = -1;
  }
  int v4 = *(unsigned __int16 *)(a2 + 2);
  if (v4 != 0xFFFF)
  {
    ++*(_WORD *)(a1 + 528);
    *(_WORD *)(a1 + 464) = v4;
    *(_DWORD *)(a1 + 504) += *(char *)(a2 + 4);
    *(_DWORD *)(a1 + 468) += *(unsigned __int8 *)(a2 + 5);
    *(_DWORD *)(a1 + 472) += *(unsigned __int8 *)(a2 + 6);
    *(_DWORD *)(a1 + 512) += *(unsigned __int8 *)(a2 + 7);
    int v5 = *(unsigned __int8 *)(a2 + 13);
    if (*(unsigned char *)(a2 + 13))
    {
      if (v5 != 255)
      {
        *(_DWORD *)(a1 + 476) += *(unsigned __int16 *)(a2 + 9);
        *(_DWORD *)(a1 + 480) += *(unsigned __int8 *)(a2 + 11);
        *(_DWORD *)(a1 + 516) += v5;
      }
    }
  }
  int v6 = *(unsigned __int16 *)(a2 + 16);
  if (v6 != 0xFFFF)
  {
    ++*(_WORD *)(a1 + 530);
    *(_WORD *)(a1 + 484) = v6;
    *(_DWORD *)(a1 + 508) += *(char *)(a2 + 18);
    *(_DWORD *)(a1 + 488) += *(unsigned __int8 *)(a2 + 19);
    *(_DWORD *)(a1 + 492) += *(unsigned __int8 *)(a2 + 20);
    *(_DWORD *)(a1 + 520) += *(unsigned __int8 *)(a2 + 21);
    int v7 = *(unsigned __int8 *)(a2 + 27);
    if (*(unsigned char *)(a2 + 27))
    {
      if (v7 != 255)
      {
        *(_DWORD *)(a1 + 496) += *(unsigned __int16 *)(a2 + 23);
        *(_DWORD *)(a1 + 500) += *(unsigned __int8 *)(a2 + 25);
        *(_DWORD *)(a1 + 524) += v7;
      }
    }
  }
  if (v4 != 0xFFFF)
  {
    id v8 = qword_100A1A008;
    if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *(unsigned __int8 *)(a2 + 7);
      int v10 = *(unsigned __int8 *)(a2 + 5);
      int v11 = *(unsigned __int8 *)(a2 + 6);
      int v12 = *(unsigned __int8 *)(a2 + 13);
      int v13 = *(unsigned __int16 *)(a2 + 9);
      int v14 = *(unsigned __int8 *)(a2 + 11);
      int v15 = *(char *)(a2 + 4);
      int v16 = *(unsigned __int8 *)(a2 + 14);
      int v17 = *(unsigned __int8 *)(a2 + 15);
      *(_DWORD *)timeval buf = 67111424;
      *(_DWORD *)&uint8_t buf[4] = v4;
      __int16 v49 = 1024;
      int v50 = v9;
      __int16 v51 = 1024;
      int v52 = v10;
      __int16 v53 = 1024;
      int v54 = v11;
      __int16 v55 = 1024;
      int v56 = v12;
      __int16 v57 = 1024;
      int v58 = v13;
      __int16 v59 = 1024;
      int v60 = v14;
      __int16 v61 = 1024;
      int v62 = v15;
      __int16 v63 = 1024;
      int v64 = v16;
      __int16 v65 = 1024;
      int v66 = v17;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "LEA Stats Report - handle(0x%2X):TxTotal(%d), TxR(%d), TxF(%d), RxTotal(%d), RxE(%d), RxM(%d), rssi(%d), TxST(%d), TxSE(%d)", buf, 0x3Eu);
      int v6 = *(unsigned __int16 *)(a2 + 16);
    }
  }
  if (v6 != 0xFFFF)
  {
    __int16 v18 = qword_100A1A008;
    if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = *(unsigned __int8 *)(a2 + 21);
      int v20 = *(unsigned __int8 *)(a2 + 19);
      int v21 = *(unsigned __int8 *)(a2 + 20);
      int v22 = *(unsigned __int8 *)(a2 + 27);
      int v23 = *(unsigned __int16 *)(a2 + 23);
      int v24 = *(unsigned __int8 *)(a2 + 25);
      int v25 = *(char *)(a2 + 18);
      int v26 = *(unsigned __int8 *)(a2 + 28);
      int v27 = *(unsigned __int8 *)(a2 + 29);
      *(_DWORD *)timeval buf = 67111424;
      *(_DWORD *)&uint8_t buf[4] = v6;
      __int16 v49 = 1024;
      int v50 = v19;
      __int16 v51 = 1024;
      int v52 = v20;
      __int16 v53 = 1024;
      int v54 = v21;
      __int16 v55 = 1024;
      int v56 = v22;
      __int16 v57 = 1024;
      int v58 = v23;
      __int16 v59 = 1024;
      int v60 = v24;
      __int16 v61 = 1024;
      int v62 = v25;
      __int16 v63 = 1024;
      int v64 = v26;
      __int16 v65 = 1024;
      int v66 = v27;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "LEA Stats Report - handle(0x%2X):TxTotal(%d), TxR(%d), TxF(%d), RxTotal(%d), RxE(%d), RxM(%d), rssi(%d), TxST(%d), TxSE(%d)", buf, 0x3Eu);
    }
  }
  if (!*(_WORD *)a2)
  {
    id v28 = qword_100A1A008;
    if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)timeval buf = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "===Stats Report Total===", buf, 2u);
      id v28 = qword_100A1A008;
    }
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
    {
      sub_10077B248(a1, v28, buf);
      id v28 = *(NSObject **)buf;
    }
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG)) {
      sub_10077B168(a1, v28);
    }
    if (*(_WORD *)(a1 + 528))
    {
      unsigned int v29 = *(_DWORD *)(a1 + 512);
      if (v29)
      {
        *(unsigned char *)(a1 + 466) = *(_DWORD *)(a1 + 504) / (int)*(unsigned __int16 *)(a1 + 528);
        *(_DWORD *)(a1 + 468) = (100 * *(_DWORD *)(a1 + 468) + (v29 >> 1)) / v29;
        *(_DWORD *)(a1 + 472) = (100 * *(_DWORD *)(a1 + 472) + (v29 >> 1)) / v29;
        unsigned int v30 = *(_DWORD *)(a1 + 516);
        if (v30)
        {
          *(_DWORD *)(a1 + 476) = (v30 + 100 * *(_DWORD *)(a1 + 476)) / (2 * v30);
          *(_DWORD *)(a1 + 480) = (100 * *(_DWORD *)(a1 + 480) + (v30 >> 1)) / v30;
        }
      }
    }
    if (*(_WORD *)(a1 + 530))
    {
      unsigned int v31 = *(_DWORD *)(a1 + 520);
      if (v31)
      {
        *(unsigned char *)(a1 + 486) = *(_DWORD *)(a1 + 508) / (int)*(unsigned __int16 *)(a1 + 530);
        *(_DWORD *)(a1 + 488) = (100 * *(_DWORD *)(a1 + 488) + (v31 >> 1)) / v31;
        *(_DWORD *)(a1 + 492) = (100 * *(_DWORD *)(a1 + 492) + (v31 >> 1)) / v31;
        unsigned int v32 = *(_DWORD *)(a1 + 524);
        if (v32)
        {
          *(_DWORD *)(a1 + 496) = (v32 + 100 * *(_DWORD *)(a1 + 496)) / (2 * v32);
          *(_DWORD *)(a1 + 500) = (100 * *(_DWORD *)(a1 + 500) + (v32 >> 1)) / v32;
        }
      }
    }
    uint64_t v33 = qword_100A1A008;
    if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)timeval buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "===All sessions are ready to report session stats===", buf, 2u);
      uint64_t v33 = qword_100A1A008;
    }
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      int v34 = *(unsigned __int16 *)(a1 + 464);
      int v35 = *(char *)(a1 + 466);
      int v36 = *(_DWORD *)(a1 + 468);
      int v37 = *(_DWORD *)(a1 + 472);
      int v38 = *(_DWORD *)(a1 + 476);
      int v39 = *(_DWORD *)(a1 + 480);
      *(_DWORD *)timeval buf = 67110400;
      *(_DWORD *)&uint8_t buf[4] = v34;
      __int16 v49 = 1024;
      int v50 = v35;
      __int16 v51 = 1024;
      int v52 = v36;
      __int16 v53 = 1024;
      int v54 = v37;
      __int16 v55 = 1024;
      int v56 = v38;
      __int16 v57 = 1024;
      int v58 = v39;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "handle(0x%2X):rssi(%d), TxRR(%u), TxFR(%u), RxER(%u), RxMR(%u)", buf, 0x26u);
      uint64_t v33 = qword_100A1A008;
    }
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      int v40 = *(unsigned __int16 *)(a1 + 484);
      int v41 = *(char *)(a1 + 486);
      int v42 = *(_DWORD *)(a1 + 488);
      int v43 = *(_DWORD *)(a1 + 492);
      int v44 = *(_DWORD *)(a1 + 496);
      int v45 = *(_DWORD *)(a1 + 500);
      *(_DWORD *)timeval buf = 67110400;
      *(_DWORD *)&uint8_t buf[4] = v40;
      __int16 v49 = 1024;
      int v50 = v41;
      __int16 v51 = 1024;
      int v52 = v42;
      __int16 v53 = 1024;
      int v54 = v43;
      __int16 v55 = 1024;
      int v56 = v44;
      __int16 v57 = 1024;
      int v58 = v45;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "handle(0x%2X):rssi(%d), TxRR(%u), TxFR(%u), RxER(%u), RxMR(%u)", buf, 0x26u);
    }
    uint64_t v46 = sub_100019878();
    v47[0] = _NSConcreteStackBlock;
    v47[1] = 3221225472;
    v47[2] = sub_100581FBC;
    v47[3] = &unk_100997528;
    v47[4] = a1;
    sub_100013018(v46, v47);
  }
}

double sub_100581FBC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1009F7F20 != -1) {
    dispatch_once(&qword_1009F7F20, &stru_1009B63D8);
  }
  sub_10057B8F0(qword_1009F7F18);
  double result = 0.0;
  *(_OWORD *)(v1 + 464) = 0u;
  *(_OWORD *)(v1 + 480) = 0u;
  *(_DWORD *)(v1 + 528) = 0;
  *(_OWORD *)(v1 + 496) = 0u;
  *(_OWORD *)(v1 + 512) = 0u;
  *(_WORD *)(v1 + 464) = -1;
  *(_WORD *)(v1 + 484) = -1;
  return result;
}

uint64_t sub_10058202C(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 536) + 8) + 1);
}

uint64_t sub_10058203C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  int v6 = _os_feature_enabled_impl();
  int v7 = qword_100A1A008;
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)timeval buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Creating LEA easy pairing agent", buf, 2u);
    }
    *(void *)timeval buf = 0;
    uint64_t v17 = 0;
    sub_10003AED0((uint64_t)buf, a1 + 560);
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B6418);
    }
    uint64_t v8 = sub_100030DCC((uint64_t)off_1009F7ED8, v5, 0);
    char v10 = BYTE5(v8);
    char v11 = BYTE4(v8);
    char v12 = BYTE3(v8);
    char v13 = BYTE2(v8);
    char v14 = BYTE1(v8);
    char v15 = v8;
    operator new();
  }
  if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_ERROR)) {
    sub_10077B344();
  }

  return 0;
}

void sub_100582274()
{
}

void sub_1005822BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  v15[0] = 0;
  v15[1] = 0;
  sub_10003AED0((uint64_t)v15, a1 + 560);
  int v4 = *(id ***)(a1 + 624);
  if (v4 != *(id ***)(a1 + 632))
  {
    uint64_t v5 = -(uint64_t)v4;
    while (1)
    {
      int v6 = *v4;
      int v7 = sub_100443E7C(*v4);
      uint64_t v8 = [v7 UUIDString];
      int v9 = [v3 UUIDString];
      unsigned int v10 = [v8 isEqualToString:v9];

      if (v10) {
        break;
      }
      ++v4;
      v5 -= 8;
      if (v4 == *(id ***)(a1 + 632)) {
        goto LABEL_12;
      }
    }
    char v11 = qword_100A1A008;
    if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)char v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Deleting easy pairing agent", v14, 2u);
    }
    uint64_t v12 = *(void *)(a1 + 632);
    uint64_t v13 = v12 - (8 - v5);
    if (v12 != 8 - v5) {
      memmove((void *)-v5, (const void *)(8 - v5), v12 - (8 - v5));
    }
    *(void *)(a1 + 632) = v13 - v5;
    if (v6)
    {
      sub_100443070(v6);
      operator delete();
    }
  }
LABEL_12:
  sub_10003AFB4((uint64_t)v15);
}

void sub_100582434(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100582478(uint64_t a1)
{
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, a1 + 560);
  uint64_t v2 = qword_100A1A008;
  if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Starting LEA easy pairing agents", v10, 2u);
  }
  id v3 = *(id ***)(a1 + 624);
  unsigned int v4 = *(_DWORD *)(a1 + 632) - v3;
  int v5 = (v4 >> 3);
  if ((v4 >> 3))
  {
    int v6 = 0;
    do
    {
      int v7 = v6;
      uint64_t v8 = *v3;
      int v6 = sub_100443E7C(*v3);

      if (sub_100443E64((uint64_t)v8))
      {
        sub_10057DCFC(a1, v6);
      }
      else if (sub_100443E6C((uint64_t)v8))
      {
        sub_1005825AC(a1, v6);
      }
      ++v3;
      --v5;
    }
    while (v5);
  }
  return sub_10003AFB4((uint64_t)v11);
}

void sub_100582594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);

  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005825AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 648))
  {
    uint64_t v4 = (uint64_t)sub_10057DE28(a1, v3);
    if (v4 || (uint64_t v4 = sub_10058203C(a1, a1 + 649, a1 + 264, v3)) != 0)
    {
      if (sub_1002766CC(v4))
      {
        sub_100443E5C(v4);
      }
      else
      {
        sub_100443E34(v4, 0);
        sub_100443BA8(v4, 1, 1);
        v7[0] = 256;
        v7[1] = sub_100443E84(v4);
        uint64_t v5 = sub_100050530();
        (*(void (**)(uint64_t, _WORD *))(*(void *)v5 + 136))(v5, v7);
      }
    }
  }
  sub_1005822BC(a1, v3);

  return 1;
}

void sub_1005826A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005826B8(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v3 = (uint64_t)sub_10057DE28(a1, v4);
  if (v3 || (uint64_t v3 = sub_10058203C(a1, a1 + 649, a1 + 264, v4)) != 0) {
    sub_100443E34(v3, 1);
  }
}

void sub_10058272C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_100582740(uint64_t a1, void *a2)
{
  id v3 = a2;
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, a1 + 280);
  uint64_t v4 = *(void *)(a1 + 344);
  if (v4 == *(void *)(a1 + 352))
  {
    id v8 = 0;
  }
  else
  {
    do
    {
      id v5 = *(id *)(*(void *)v4 + 8);
      int v6 = [v5 UUIDString];
      int v7 = [v3 UUIDString];
      id v8 = [v6 isEqualToString:v7];

      if (v8) {
        break;
      }
      v4 += 8;
    }
    while (v4 != *(void *)(a1 + 352));
  }
  sub_10003AFB4((uint64_t)v10);

  return v8;
}

void sub_100582818(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100582854(unsigned char *a1, void *a2)
{
  id v3 = a2;
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009B6418);
  }
  uint64_t v4 = sub_100030DCC((uint64_t)off_1009F7ED8, v3, 0);
  a1[649] = BYTE5(v4);
  a1[650] = BYTE4(v4);
  a1[651] = BYTE3(v4);
  a1[652] = BYTE2(v4);
  a1[653] = BYTE1(v4);
  a1[654] = v4;
  a1[648] = 1;
  id v5 = qword_100A1A008;
  if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
  {
    sub_1004A82EC(a1 + 649, __p);
    if (v8 >= 0) {
      int v6 = __p;
    }
    else {
      int v6 = (void **)__p[0];
    }
    *(_DWORD *)timeval buf = 136315138;
    unsigned int v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Magnet link connected with device \"%s\"", buf, 0xCu);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_100582478((uint64_t)a1);
}

void sub_1005829B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005829D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009B6418);
  }
  uint64_t v4 = sub_100030DCC((uint64_t)off_1009F7ED8, v3, 0);
  LOBYTE(v11) = BYTE5(v4);
  BYTE1(v11) = BYTE4(v4);
  BYTE2(v11) = BYTE3(v4);
  HIBYTE(v11) = BYTE2(v4);
  LOBYTE(v12) = BYTE1(v4);
  HIBYTE(v12) = v4;
  id v5 = qword_100A1A008;
  if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = sub_1006AD3F0();
    *(_DWORD *)timeval buf = 138412290;
    char v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "magnet link disconnected with device \"%@\"", buf, 0xCu);
  }
  int v7 = (unsigned __int8 *)(a1 + 649);
  if (v11 == *(_DWORD *)(a1 + 649) && v12 == *(_WORD *)(a1 + 653))
  {
    *(unsigned char *)(a1 + 648) = 0;
  }
  else
  {
    int v9 = qword_100A1A008;
    if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_ERROR))
    {
      sub_1006AD3F0();
      id v10 = (id)objc_claimAutoreleasedReturnValue();
      sub_1004A82EC(v7, buf);
      sub_10077B378(v10, (char *)buf, v15, v9);
    }
  }
}

void sub_100582B84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100582BB4(uint64_t a1, unsigned __int8 *a2, int a3)
{
  if (*(unsigned char *)(a1 + 648))
  {
    v8[0] = 0;
    v8[1] = 0;
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B6418);
    }
    sub_100014B58((uint64_t)off_1009F7ED8, ((unint64_t)*a2 << 40) | ((unint64_t)a2[1] << 32) | ((unint64_t)a2[2] << 24) | ((unint64_t)a2[3] << 16) | ((unint64_t)a2[4] << 8) | a2[5], 0, 0, 0, 0, (unsigned __int8 *)v8);
    int v6 = sub_100031234((const unsigned __int8 *)v8);
    int v7 = sub_10057DE28(a1, v6);
    if (v7) {
      sub_10044337C(v7, a1 + 649, a2, a3);
    }
  }
}

void sub_100582CD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100582CE8(uint64_t a1, unsigned __int8 *a2, int a3)
{
  if (*(unsigned char *)(a1 + 648))
  {
    v8[0] = 0;
    v8[1] = 0;
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B6418);
    }
    sub_100014B58((uint64_t)off_1009F7ED8, ((unint64_t)*a2 << 40) | ((unint64_t)a2[1] << 32) | ((unint64_t)a2[2] << 24) | ((unint64_t)a2[3] << 16) | ((unint64_t)a2[4] << 8) | a2[5], 0, 0, 0, 0, (unsigned __int8 *)v8);
    int v6 = sub_100031234((const unsigned __int8 *)v8);
    int v7 = sub_10057DE28(a1, v6);
    if (v7) {
      sub_100443A50((uint64_t)v7, (unsigned __int8 *)(a1 + 649), (uint64_t)a2, a3);
    }
  }
}

void sub_100582E04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100582E1C(uint64_t a1, unsigned __int8 *a2)
{
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009B6418);
  }
  v6[0] = 0;
  v6[1] = 0;
  sub_100014B58((uint64_t)off_1009F7ED8, ((unint64_t)*a2 << 40) | ((unint64_t)a2[1] << 32) | ((unint64_t)a2[2] << 24) | ((unint64_t)a2[3] << 16) | ((unint64_t)a2[4] << 8) | a2[5], 0, 0, 0, 0, (unsigned __int8 *)v6);
  uint64_t v4 = sub_100031234((const unsigned __int8 *)v6);
  id v5 = sub_10057DE28(a1, v4);
  if (v5) {
    sub_100443E3C((uint64_t)v5);
  }
}

void sub_100582F18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100582F30(uint64_t a1, unsigned __int8 *a2)
{
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009B6418);
  }
  v6[0] = 0;
  v6[1] = 0;
  sub_100014B58((uint64_t)off_1009F7ED8, ((unint64_t)*a2 << 40) | ((unint64_t)a2[1] << 32) | ((unint64_t)a2[2] << 24) | ((unint64_t)a2[3] << 16) | ((unint64_t)a2[4] << 8) | a2[5], 0, 0, 0, 0, (unsigned __int8 *)v6);
  uint64_t v4 = sub_100031234((const unsigned __int8 *)v6);
  id v5 = sub_10057DE28(a1, v4);
  if (v5) {
    sub_100443E50((uint64_t)v5);
  }
}

void sub_10058302C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100583044(uint64_t a1, uint64_t a2, unsigned __int8 *a3, void *a4)
{
  id v7 = a4;
  BOOL v8 = *(_DWORD *)a2 == *(_DWORD *)(a1 + 649) && *(unsigned __int16 *)(a2 + 4) == *(unsigned __int16 *)(a1 + 653);
  int v9 = !v8;
  id v10 = qword_100A1A008;
  BOOL v11 = os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT);
  if (v9)
  {
    if (v11)
    {
      sub_1004A82EC((unsigned __int8 *)a2, &__p);
      if (v32 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = (void **)__p;
      }
      *(_DWORD *)timeval buf = 136315138;
      int v34 = p_p;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "sending pair status request to LEA device \"%s\"", buf, 0xCu);
      if (SHIBYTE(v32) < 0) {
        operator delete(__p);
      }
    }
    for (int i = *(uint64_t ***)(a1 + 344); i != *(uint64_t ***)(a1 + 352); ++i)
    {
      char v14 = *i;
      id v15 = (id)(*i)[1];
      int v16 = [v15 UUIDString];
      uint64_t v17 = [v7 UUIDString];
      unsigned int v18 = [v16 isEqualToString:v17];

      if (v18)
      {
        LOBYTE(__p) = 0;
        sub_10001B8E0(&__p);
        sub_1002424C8(*v14, (uint64_t)a3, 0);
        sub_10001B910(&__p);
        sub_10001B8AC(&__p);
        break;
      }
    }
  }
  else
  {
    if (v11)
    {
      sub_1004A82EC(a3, &__p);
      int v19 = v32 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)timeval buf = 136315138;
      int v34 = v19;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "sending pair status request to magnet for device \"%s\"", buf, 0xCu);
      if (SHIBYTE(v32) < 0) {
        operator delete(__p);
      }
    }
    std::string __p = 0;
    unsigned int v31 = 0;
    uint64_t v32 = 0;
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B6418);
    }
    sub_1006BE040((uint64_t)off_1009F7ED8, v7, (uint64_t *)&__p);
    id v20 = objc_alloc_init((Class)NSMutableArray);
    int v21 = (char *)__p;
    if (__p != &v31)
    {
      do
      {
        id v22 = objc_alloc((Class)NSString);
        int v23 = v21 + 32;
        if (v21[55] < 0) {
          int v23 = (void *)*v23;
        }
        id v24 = [v22 initWithUTF8String:v23];
        [v20 addObject:v24];

        int v25 = (char *)*((void *)v21 + 1);
        if (v25)
        {
          do
          {
            int v26 = (char **)v25;
            int v25 = *(char **)v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            int v26 = (char **)*((void *)v21 + 2);
            BOOL v8 = *v26 == v21;
            int v21 = (char *)v26;
          }
          while (!v8);
        }
        int v21 = (char *)v26;
      }
      while (v26 != &v31);
    }
    uint64_t v27 = sub_100373068();
    sub_1004A82EC(a3, v28);
    (*(void (**)(uint64_t, void **, id, id))(*(void *)v27 + 152))(v27, v28, v7, v20);
    if (v29 < 0) {
      operator delete(v28[0]);
    }

    sub_10004BA28((uint64_t)&__p, v31);
  }
}

void sub_1005833A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16)
{
  _Unwind_Resume(a1);
}

void sub_100583448(uint64_t a1, uint64_t a2, unsigned __int8 *a3, void *a4)
{
}

void sub_100583450(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t *a5, _OWORD *a6, _OWORD *a7, void *a8)
{
  id v15 = a8;
  if (*(_DWORD *)a2 == *(_DWORD *)(a1 + 649) && *(unsigned __int16 *)(a2 + 4) == *(unsigned __int16 *)(a1 + 653))
  {
    v26[0] = 0;
    v26[1] = 0;
    uint64_t v27 = 0;
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B6418);
    }
    sub_10003093C((uint64_t)off_1009F7ED8, v15, (uint64_t)v26);
    uint64_t v17 = qword_100A1A008;
    if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
    {
      sub_1004A82EC(a3, __p);
      unsigned int v18 = v25 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)timeval buf = 136315138;
      char v29 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "sending store bonding info request to magnet link for device \"%s\"", buf, 0xCu);
      if (v25 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v19 = sub_100373068();
    sub_1004A82EC(a3, v22);
    if (SHIBYTE(v27) < 0)
    {
      sub_10003B098(v20, v26[0], (unint64_t)v26[1]);
    }
    else
    {
      *(_OWORD *)id v20 = *(_OWORD *)v26;
      uint64_t v21 = v27;
    }
    (*(void (**)(uint64_t, void **, void **, uint64_t, uint64_t *, _OWORD *, _OWORD *))(*(void *)v19 + 160))(v19, v22, v20, a4, a5, a6, a7);
    if (SHIBYTE(v21) < 0) {
      operator delete(v20[0]);
    }
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    if (SHIBYTE(v27) < 0) {
      operator delete(v26[0]);
    }
  }
  else
  {
    sub_1005836FC(a1, (uint64_t)a3, a4, a5, a6, a7, v15);
  }
}

void sub_100583694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }

  _Unwind_Resume(a1);
}

void sub_1005836FC(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, _OWORD *a5, _OWORD *a6, void *a7)
{
  id v10 = a7;
  BOOL v11 = qword_100A1A008;
  if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)timeval buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Sending bonding info to LEA device", buf, 2u);
  }
  for (int i = *(uint64_t **)(a1 + 344); i != *(uint64_t **)(a1 + 352); ++i)
  {
    uint64_t v13 = *i;
    id v14 = *(id *)(*i + 8);
    id v15 = [v14 UUIDString];
    int v16 = [v10 UUIDString];
    unsigned int v17 = [v15 isEqualToString:v16];

    if (v17)
    {
      if (a3)
      {
        unsigned int v18 = qword_100A1A008;
        if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
        {
          id v19 = *(id *)(v13 + 8);
          *(_DWORD *)timeval buf = 138412290;
          id v29 = v19;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Sending 'central identification' command to device \"%@\"", buf, 0xCu);
        }
        char v27 = 0;
        sub_10001B8E0(&v27);
        sub_100242520(*(void *)v13, a2, a3, a4);
        sub_10001B910(&v27);
        id v20 = qword_100A1A008;
        if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
        {
          id v21 = *(id *)(v13 + 8);
          *(_DWORD *)timeval buf = 138412290;
          id v29 = v21;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Sending 'identity information' command to device \"%@\"", buf, 0xCu);
        }
        sub_1002B804C(&v27);
        sub_1002425B4(*(void *)v13, a2, a6);
        sub_10001B910(&v27);
        id v22 = qword_100A1A008;
        if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
        {
          id v23 = *(id *)(v13 + 8);
          *(_DWORD *)timeval buf = 138412290;
          id v29 = v23;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Sending 'encryption information' command to device \"%@\"", buf, 0xCu);
        }
        sub_1002B804C(&v27);
        sub_10024263C(*(void *)v13, a2, a5);
        sub_10001B910(&v27);
        sub_10001B8AC(&v27);
      }
      break;
    }
  }
}

void sub_1005839C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100583A10(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t *a5, _OWORD *a6, _OWORD *a7, void *a8)
{
}

void sub_100583A18(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int a4)
{
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009B6418);
  }
  v29[0] = 0;
  v29[1] = 0;
  sub_100014B58((uint64_t)off_1009F7ED8, ((unint64_t)*a3 << 40) | ((unint64_t)a3[1] << 32) | ((unint64_t)a3[2] << 24) | ((unint64_t)a3[3] << 16) | ((unint64_t)a3[4] << 8) | a3[5], 0, 0, 0, 0, (unsigned __int8 *)v29);
  BOOL v8 = sub_100031234((const unsigned __int8 *)v29);
  int v9 = sub_10057DE28(a1, v8);
  uint64_t v10 = (uint64_t)v9;
  if (v9)
  {
    LOWORD(v23[0]) = a4;
    WORD1(v23[0]) = sub_100443E84((uint64_t)v9);
    uint64_t v11 = sub_100050530();
    (*(void (**)(uint64_t, void **))(*(void *)v11 + 136))(v11, v23);
    sub_100443E2C(v10, 0);
  }
  __int16 v12 = qword_100A1A008;
  if (a4 == 2)
  {
    if (!os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_ERROR)) {
      goto LABEL_24;
    }
    sub_1004A82EC(a2, v23);
    int v13 = v24;
    id v14 = (void **)v23[0];
    sub_1004A82EC(a3, __p);
    id v15 = v23;
    if (v13 < 0) {
      id v15 = v14;
    }
    if (v22 >= 0) {
      int v16 = __p;
    }
    else {
      int v16 = (void **)__p[0];
    }
    *(_DWORD *)timeval buf = 136315394;
    int v26 = v15;
    __int16 v27 = 2080;
    id v28 = v16;
    _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "LEA easy pair failed between devices \"%s\" and \"%s\"", buf, 0x16u);
  }
  else
  {
    if (!os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_24;
    }
    sub_1004A82EC(a2, v23);
    int v17 = v24;
    unsigned int v18 = (void **)v23[0];
    sub_1004A82EC(a3, __p);
    id v19 = v23;
    if (v17 < 0) {
      id v19 = v18;
    }
    if (v22 >= 0) {
      id v20 = __p;
    }
    else {
      id v20 = (void **)__p[0];
    }
    *(_DWORD *)timeval buf = 136315394;
    int v26 = v19;
    __int16 v27 = 2080;
    id v28 = v20;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "LEA easy pair succeeded between devices \"%s\" and \"%s\"", buf, 0x16u);
  }
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
LABEL_24:
}

void sub_100583CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100583D08(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int a4)
{
}

uint64_t sub_100583D10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7[0] = 0;
  v7[1] = 0;
  v5[1] = 0;
  uint64_t v6 = 0;
  v5[0] = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t *, void *, void *, uint64_t))(*(void *)a1 + 184))(a1, a2, a3, 0, &v6, v7, v5, a4);
}

uint64_t sub_100583DA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7[0] = 0;
  v7[1] = 0;
  v5[1] = 0;
  uint64_t v6 = 0;
  v5[0] = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t *, void *, void *, uint64_t))(*(void *)(a1 - 264) + 184))(a1 - 264, a2, a3, 0, &v6, v7, v5, a4);
}

void sub_100583E34(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_100019878();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100583F00;
  v6[3] = &unk_100998A38;
  uint64_t v8 = a1;
  id v5 = v3;
  id v7 = v5;
  sub_100013018(v4, v6);
}

void sub_100583EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_100583F00(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = qword_100A1A008;
  if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)timeval buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received lePairingCompleted", buf, 2u);
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009B6418);
  }
  uint64_t v4 = off_1009F7ED8;
  id v5 = *(void **)(a1 + 32);
  sub_10004191C(v11, "IsHearingAid");
  if (sub_100030A04((uint64_t)v4, v5, (uint64_t)v11))
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B6418);
    }
    uint64_t v6 = off_1009F7ED8;
    id v7 = *(void **)(a1 + 32);
    sub_10004191C(__p, "HearingAidSupportsWatch");
    int v8 = sub_100030A04((uint64_t)v6, v7, (uint64_t)__p);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    int v8 = 0;
  }
  if (v12 < 0)
  {
    operator delete(v11[0]);
    if (!v8) {
      return;
    }
  }
  else if (!v8)
  {
    return;
  }
  if (*(unsigned char *)(v2 + 655))
  {
    if (*(unsigned char *)(v2 + 648))
    {
      if (qword_1009F7F20 != -1) {
        dispatch_once(&qword_1009F7F20, &stru_1009B63D8);
      }
      sub_10057DCFC(qword_1009F7F18, *(void **)(a1 + 32));
    }
    else
    {
      if (qword_1009F7F20 != -1) {
        dispatch_once(&qword_1009F7F20, &stru_1009B63D8);
      }
      sub_10057DDA0(qword_1009F7F18, *(void **)(a1 + 32));
    }
  }
}

void sub_1005840D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100584108(uint64_t a1, void *a2)
{
}

void sub_100584110(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_100019878();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1005841DC;
  v6[3] = &unk_100998A38;
  uint64_t v8 = a1;
  id v5 = v3;
  id v7 = v5;
  sub_100013018(v4, v6);
}

void sub_1005841BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1005841DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = qword_100A1A008;
  if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)timeval buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received leDeviceUnpaired", buf, 2u);
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009B6418);
  }
  uint64_t v4 = off_1009F7ED8;
  id v5 = *(void **)(a1 + 32);
  sub_10004191C(v11, "IsHearingAid");
  if (sub_100030A04((uint64_t)v4, v5, (uint64_t)v11))
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B6418);
    }
    uint64_t v6 = off_1009F7ED8;
    id v7 = *(void **)(a1 + 32);
    sub_10004191C(__p, "HearingAidSupportsWatch");
    int v8 = sub_100030A04((uint64_t)v6, v7, (uint64_t)__p);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    int v8 = 0;
  }
  if (v12 < 0)
  {
    operator delete(v11[0]);
    if (!v8) {
      return;
    }
  }
  else if (!v8)
  {
    return;
  }
  if (*(unsigned char *)(v2 + 655))
  {
    if (*(unsigned char *)(v2 + 648))
    {
      if (qword_1009F7F20 != -1) {
        dispatch_once(&qword_1009F7F20, &stru_1009B63D8);
      }
      sub_1005825AC(qword_1009F7F18, *(void **)(a1 + 32));
    }
    else
    {
      if (qword_1009F7F20 != -1) {
        dispatch_once(&qword_1009F7F20, &stru_1009B63D8);
      }
      sub_1005826B8(qword_1009F7F18, *(void **)(a1 + 32));
    }
  }
}

void sub_1005843B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005843E4(uint64_t a1, void *a2)
{
}

void sub_1005843F8(uint64_t a1)
{
  sub_1005845F8(a1);

  operator delete();
}

uint64_t sub_100584430()
{
  return 0;
}

uint64_t sub_100584438()
{
  return 108;
}

uint64_t sub_100584440()
{
  return 108;
}

uint64_t *sub_100584448(uint64_t *a1)
{
  if (a1[4]) {
    sub_10057BE84((uint64_t)a1);
  }
  sub_1002E7878(*a1);
  return a1;
}

void sub_100584488()
{
}

uint64_t sub_10058449C(uint64_t a1)
{
  if (qword_1009F7F20 != -1) {
    dispatch_once(&qword_1009F7F20, &stru_1009B63D8);
  }
  uint64_t v2 = qword_1009F7F18;

  return sub_10057A054(v2, a1);
}

void sub_100584504()
{
}

uint64_t sub_100584518(uint64_t a1)
{
  if (qword_1009F7F20 != -1) {
    dispatch_once(&qword_1009F7F20, &stru_1009B63D8);
  }
  uint64_t v2 = (uint64_t **)qword_1009F7F18;

  return sub_10057B27C(v2, a1);
}

void sub_100584580()
{
}

uint64_t sub_100584594(uint64_t a1)
{
  if (qword_1009F7F20 != -1) {
    dispatch_once(&qword_1009F7F20, &stru_1009B63D8);
  }
  uint64_t v2 = qword_1009F7F18;

  return sub_10057AD5C(v2, a1);
}

uint64_t sub_1005845F8(uint64_t a1)
{
  *(void *)a1 = off_1009B6050;
  *(void *)(a1 + 256) = off_1009B6130;
  *(void *)(a1 + 264) = off_1009B6180;
  *(void *)(a1 + 272) = off_1009B61B0;
  uint64_t v2 = *(void **)(a1 + 624);
  if (v2)
  {
    *(void *)(a1 + 632) = v2;
    operator delete(v2);
  }
  sub_100052DA4(a1 + 560);
  id v3 = *(void **)(a1 + 400);
  if (v3)
  {
    *(void *)(a1 + 408) = v3;
    operator delete(v3);
  }
  sub_1000486F0(a1 + 368, *(void **)(a1 + 376));
  uint64_t v4 = *(void **)(a1 + 344);
  if (v4)
  {
    *(void *)(a1 + 352) = v4;
    operator delete(v4);
  }
  sub_100052DA4(a1 + 280);

  return sub_100283DC8(a1);
}

void sub_1005846F4(id a1)
{
}

void sub_100584738()
{
}

void sub_10058475C(id a1)
{
}

void sub_1005847A0()
{
}

void sub_1005847C4(id a1)
{
}

void sub_100584808()
{
}

void sub_10058482C(id a1)
{
}

void sub_100584870()
{
}

void sub_100584894(id a1)
{
}

void sub_100584A24()
{
}

uint64_t *sub_100584A48(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100584AA0(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_100584A88(_Unwind_Exception *a1)
{
  sub_1000486F0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100584AA0(uint64_t *result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    id v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      double result = sub_1004C8E3C(v5, v6, v4 + 7, (uint64_t *)(v4 + 7));
      id v7 = (int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          int v8 = v7;
          id v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          int v8 = (int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

void sub_100584B2C(id a1)
{
}

void sub_100584B70()
{
}

id sub_100584B94(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a2 + 8);
  return v3;
}

void *sub_100584BB4(void *a1, xpc_connection_t connection)
{
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  *a1 = connection;
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_100584CA8;
  handler[3] = &unk_1009A0598;
  void handler[4] = a1;
  xpc_connection_set_event_handler(connection, handler);
  uint64_t v4 = +[AudioDeviceManager sharedManager];
  xpc_connection_set_target_queue(connection, (dispatch_queue_t)[v4 getXpcQueue]);

  xpc_connection_resume(connection);
  return a1;
}

void sub_100584C80(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v3);
  }
  _Unwind_Resume(a1);
}

void sub_100584CA8(uint64_t a1, void *a2)
{
}

void sub_100584CB0(uint64_t a1, xpc_object_t object)
{
  xpc_type_t type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    if (xpc_dictionary_get_uint64(object, "kBTAudioMsgMethod") == 13)
    {
      remote_connection = xpc_dictionary_get_remote_connection(object);
      *(_OWORD *)unsigned int v30 = 0u;
      long long v31 = 0u;
      xpc_connection_get_audit_token();
      BOOL v9 = (const char *)xpc_copy_code_signing_identity_for_token();
      char v10 = (char *)v9;
      if (v9
        && (!strcmp(v9, "com.apple.mediaserverd")
         || !strcmp(v10, "com.apple.audio.coreaudiod")
         || !strcmp(v10, "com.apple.audio.Core-Audio-Driver-Service")
         || !strcmp(v10, "com.apple.audiomxd")))
      {
        int v11 = 1;
        char v12 = v10;
      }
      else
      {
        int v11 = 0;
        char v12 = "";
      }
      std::string::assign((std::string *)(a1 + 8), v12);
      free(v10);
      uint64_t v15 = sub_100017768();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v15 + 8))(v15))
      {
        char v29 = 0;
        BOOL v16 = sub_1005851C8();
        uint64_t v17 = sub_100017768();
        sub_10004191C(buf, "BTHALAudioPlugin");
        sub_10004191C(__p, "BypassAllowlist");
        (*(void (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v17 + 72))(v17, buf, __p, &v29);
        if (v28 < 0) {
          operator delete(__p[0]);
        }
        if (v35 < 0) {
          operator delete(*(void **)buf);
        }
        unsigned int v18 = qword_100A19E48;
        if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
        {
          id v19 = "No";
          if (v16) {
            id v20 = "Yes";
          }
          else {
            id v20 = "No";
          }
          if (v29) {
            id v19 = "Yes";
          }
          *(_DWORD *)timeval buf = 136446466;
          *(void *)&uint8_t buf[4] = v20;
          __int16 v33 = 2082;
          int v34 = v19;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Bypassing proc check for audio plugin clients via entitlement = %{public}s , allowList = %{public}s", buf, 0x16u);
        }
        if (v29) {
          int v21 = 1;
        }
        else {
          int v21 = v16;
        }
      }
      else
      {
        int v21 = 0;
      }
      if ((v11 | v21) == 1)
      {
        char v22 = +[AudioDeviceManager sharedManager];
        [v22 republishAllAudioDevices];
      }
      else
      {
        id v23 = qword_100A19E48;
        if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
          sub_10077B408(remote_connection, v23);
        }
        xpc_connection_cancel(remote_connection);
      }
    }
    else
    {
      v30[0] = 0;
      v30[1] = 0;
      *(void *)&long long v31 = 0;
      string = (char *)xpc_dictionary_get_string(object, "kBTAudioMsgDeviceUid");
      sub_10004191C(v30, string);
      id v14 = +[AudioDeviceManager sharedManager];
      if (SBYTE7(v31) < 0)
      {
        sub_10003B098(v25, v30[0], (unint64_t)v30[1]);
      }
      else
      {
        *(_OWORD *)char v25 = *(_OWORD *)v30;
        uint64_t v26 = v31;
      }
      [v14 forwardEvent:object forUid:v25];
      if (SHIBYTE(v26) < 0) {
        operator delete(v25[0]);
      }

      if (SBYTE7(v31) < 0) {
        operator delete(v30[0]);
      }
    }
  }
  else if (type == (xpc_type_t)&_xpc_type_error)
  {
    id v5 = xpc_dictionary_get_string(object, _xpc_error_key_description);
    uint64_t v6 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
      sub_10077B510((uint64_t)v5, v6);
    }
    if (object == &_xpc_error_connection_invalid)
    {
      char v24 = +[AudioDeviceManager sharedManager];
      [v24 removeXpcClient:a1];
    }
    else
    {
      id v7 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
        sub_10077B498((uint64_t)v5, v7);
      }
    }
  }
}

void sub_1005850DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10058516C(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_1005851A8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1005851C8()
{
  BOOL v0 = (void *)xpc_connection_copy_entitlement_value();
  if (!v0) {
    return 0;
  }
  uint64_t v1 = v0;
  BOOL v2 = xpc_get_type(v0) == (xpc_type_t)&_xpc_type_BOOL && xpc_BOOL_get_value(v1);
  xpc_release(v1);
  return v2;
}

char *sub_100585234@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[31] < 0) {
    return (char *)sub_10003B098((unsigned char *)a2, *((void **)result + 1), *((void *)result + 2));
  }
  *(_OWORD *)a2 = *(_OWORD *)(result + 8);
  *(void *)(a2 + 16) = *((void *)result + 3);
  return result;
}

void sub_100585260(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1002CCCF8(a1, "LEASendThread");
  *(void *)uint64_t v3 = off_1009B6488;
  *(void *)(v3 + 152) = a2;
  *(_OWORD *)(v3 + 168) = *(_OWORD *)*(void *)(a2 + 536);
  *(_WORD *)(v3 + 184) = 0;
  *(void *)(v3 + 208) = 0;
  *(void *)(v3 + 216) = 0;
  operator new[]();
}

void sub_10058530C(_Unwind_Exception *a1)
{
  sub_1002CC800(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100585320(void *a1)
{
  *a1 = off_1009B6488;
  if (a1[24]) {
    operator delete[]();
  }

  return sub_1002CC800((uint64_t)a1);
}

uint64_t sub_100585394(uint64_t a1)
{
  return 2500 * *(unsigned __int8 *)(*(void *)(a1 + 176) + 1);
}

uint64_t sub_1005853A8(uint64_t a1)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, *(void *)(a1 + 152) + 280);
  uint64_t v2 = *(void *)(*(void *)(a1 + 152) + 536);
  if (v2 && *(void *)(v2 + 24) == a1)
  {
    switch(*(_DWORD *)(a1 + 224))
    {
      case 0:
        uint64_t v3 = 1;
        if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 104))(a1))
        {
          *(_DWORD *)(a1 + 224) = 1;
          goto LABEL_7;
        }
        break;
      case 1:
LABEL_7:
        (*(void (**)(uint64_t))(*(void *)a1 + 112))(a1);
        *(_DWORD *)(a1 + 224) = 2;
        goto LABEL_8;
      case 2:
LABEL_8:
        (*(void (**)(uint64_t))(*(void *)a1 + 120))(a1);
        *(_DWORD *)(a1 + 224) = 3;
        goto LABEL_9;
      case 3:
LABEL_9:
        ++*(unsigned char *)(a1 + 184);
        if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 128))(a1)) {
          goto LABEL_12;
        }
        *(_DWORD *)(a1 + 224) = 4;
LABEL_11:
        ++*(unsigned char *)(a1 + 185);
        *(void *)(a1 + 208) = 0;
        *(void *)(a1 + 216) = 0;
        *(_DWORD *)(a1 + 224) = 0;
LABEL_12:
        uint64_t v3 = 1;
        break;
      case 4:
        goto LABEL_11;
      default:
        goto LABEL_12;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  sub_10003AFB4((uint64_t)v5);
  return v3;
}

void sub_100585544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_10058556C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 152);
  uint64_t v2 = *(void *)(v1 + 344);
  uint64_t v3 = *(void *)(v1 + 352);
  if (v2 == v3) {
    return sub_1002426C4(0);
  }
  uint64_t v4 = 0;
  do
  {
    if (*(_DWORD *)(*(void *)v2 + 32) == 8)
    {
      if (*(_DWORD *)(*(void *)v2 + 48) == 3) {
        uint64_t v4 = (v4 + 1);
      }
      else {
        uint64_t v4 = v4;
      }
    }
    v2 += 8;
  }
  while (v2 != v3);
  return sub_1002426C4(v4);
}

void sub_1005855B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned __int8 **)(a1 + 176);
  int v5 = v4[2];
  if (v5 == 4)
  {
    if (v4[4])
    {
      uint64_t v9 = 0;
      unint64_t v10 = 0;
      do
      {
        if (v9 + 1 >= (unint64_t)v4[3])
        {
          int v11 = qword_100A19E48;
          if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_FAULT)) {
            sub_10077B600(v20, v21, v11);
          }
        }
        *(unsigned char *)(a2 + v10++) = *(unsigned char *)(a2 + v9 + 1) | (16 * *(unsigned char *)(a2 + v9));
        uint64_t v4 = *(unsigned __int8 **)(a1 + 176);
        v9 += 2;
      }
      while (v10 < v4[4]);
    }
  }
  else if (v5 == 6)
  {
    if (v4[4])
    {
      unint64_t v6 = 0;
      unint64_t v7 = 0;
      do
      {
        if (v6 / 6 + 1 >= v4[3])
        {
          int v8 = qword_100A19E48;
          if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_FAULT)) {
            sub_10077B600(v20, v21, v8);
          }
        }
        *(unsigned char *)(a2 + v7++) = ((*(unsigned __int8 *)(a2 + v6 / 6 + 1) >> 2) >> ((4 - v6 % 6) & 0xFE)) | (*(unsigned __int8 *)(a2 + v6 / 6) >> 2 << (v6 % 6 + 2));
        uint64_t v4 = *(unsigned __int8 **)(a1 + 176);
        v6 += 8;
      }
      while (v7 < v4[4]);
    }
  }
  else
  {
    char v12 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_FAULT)) {
      sub_10077B588(v12, v13, v14, v15, v16, v17, v18, v19);
    }
  }
}

void sub_1005857B4(void *a1)
{
  uint64_t v1 = a1[22];
  if (*(unsigned char *)(v1 + 2) != 8)
  {
    if (a1[26] != *(unsigned __int8 *)(v1 + 3))
    {
      uint64_t v3 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_FAULT)) {
        sub_10077B648(v3, v4, v5, v6, v7, v8, v9, v10);
      }
    }
    sub_1005855B4((uint64_t)a1, a1[24]);
    a1[26] = *(unsigned __int8 *)(a1[22] + 4);
  }
}

void sub_100585834(uint64_t a1, uint64_t a2)
{
}

void sub_1005858AC(_Unwind_Exception *a1)
{
  sub_100585320(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1005858C4(uint64_t a1)
{
  *(void *)a1 = off_1009B6520;
  free(*(void **)(a1 + 232));

  return sub_100585320((void *)a1);
}

void sub_10058591C(uint64_t a1)
{
  *(void *)a1 = off_1009B6520;
  free(*(void **)(a1 + 232));
  sub_100585320((void *)a1);

  operator delete();
}

BOOL sub_100585988(uint64_t *a1)
{
  uint64_t v1 = a1 + 26;
  unint64_t v2 = a1[26];
  uint64_t v3 = (unsigned __int8 *)a1[22];
  unint64_t v4 = v3[3];
  unint64_t v5 = v4 - v2;
  if (v4 == v2)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_FAULT)) {
      sub_10077B6C0();
    }
    return 1;
  }
  if (!v3[5])
  {
    size_t v9 = sub_1002E7D08(a1[21], (char *)(a1[24] + v2), v4 - v2);
    a1[26] += v9;
    return v9 == v5;
  }
  unint64_t v7 = a1[25];
  if (v3[4])
  {
    if (!(v4 % v5)) {
      goto LABEL_18;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_FAULT)) {
      sub_10077B8C0();
    }
    BOOL result = 0;
    uint64_t *v1 = 0;
    v1[1] = 0;
    return result;
  }
  if (v2) {
    return 1;
  }
  do
  {
LABEL_18:
    if (v7 < v2)
    {
      char v12 = qword_100A19E48;
      BOOL result = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      sub_10077B6F4(v7, v12);
      return 0;
    }
    unint64_t v10 = sub_1002E7D78(a1[21], (char *)(a1[24] + v2), v7 - v2);
    if (!v10)
    {
      uint64_t v13 = qword_100A19E48;
      BOOL result = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEBUG);
      if (!result) {
        return result;
      }
      sub_10077B76C(v1, v13);
      return 0;
    }
    uint64_t v11 = a1[22];
    if (!*(unsigned char *)(v11 + 4))
    {
      unint64_t v14 = *v1 + v10;
      uint64_t *v1 = v14;
      if (v14 > *(unsigned __int8 *)(v11 + 3) && os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_FAULT)) {
        goto LABEL_25;
      }
      return 1;
    }
    if (*(unsigned __int8 *)(v11 + 3) % v10)
    {
      BOOL result = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_FAULT);
      if (!result) {
        return result;
      }
      sub_10077B854();
      return 0;
    }
    unint64_t v2 = *v1 + v10;
    uint64_t *v1 = v2;
    v5 -= v10;
  }
  while (v5);
  if (v2 != *(unsigned __int8 *)(v11 + 3) && os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_FAULT)) {
LABEL_25:
  }
    sub_10077B7E8();
  return 1;
}

BOOL sub_100585BE8(uint64_t a1)
{
  sub_10003FB34();
  int v2 = sub_100351254();
  uint64_t v3 = *(void *)(a1 + 216);
  if (*(unsigned char *)(*(void *)(a1 + 176) + 6))
  {
    if (!v3)
    {
      unint64_t v4 = (*(void *)(a1 + 208) - 1) / (unint64_t)(*(void *)(a1 + 160) - 1);
      if ((v4 & 0xFC) != 0)
      {
        unint64_t v5 = qword_100A19E48;
        if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_FAULT)) {
          sub_10077BA28(v5, v6, v7, v8, v9, v10, v11, v12);
        }
      }
      **(unsigned char **)(a1 + 232) = v4 | (4 * *(unsigned char *)(a1 + 185));
      uint64_t v3 = *(void *)(a1 + 216);
    }
    uint64_t v13 = (char **)(a1 + 232);
    unint64_t v14 = *(void *)(a1 + 208) - v3;
    unint64_t v15 = *(void *)(a1 + 160) - 1;
    BOOL v16 = v14 <= v15;
    if (v14 >= v15) {
      size_t v17 = *(void *)(a1 + 160) - 1;
    }
    else {
      size_t v17 = *(void *)(a1 + 208) - v3;
    }
    memcpy((void *)(*(void *)(a1 + 232) + 1), (const void *)(*(void *)(a1 + 192) + v3), v17);
    unsigned __int16 v18 = v17 + 1;
  }
  else
  {
    if (v3)
    {
      uint64_t v19 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_FAULT)) {
        sub_10077B9B0(v19, v20, v21, v22, v23, v24, v25, v26);
      }
    }
    uint64_t v13 = (char **)(a1 + 192);
    size_t v17 = *(void *)(a1 + 208);
    if (v17 > *(void *)(a1 + 160))
    {
      __int16 v27 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)timeval buf = 136446210;
        int v37 = "fAudioBuffer.getFillLevel() <= fMaxPacketSize";
        _os_log_fault_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", buf, 0xCu);
        size_t v17 = *(void *)(a1 + 208);
      }
    }
    BOOL v16 = 1;
    unsigned __int16 v18 = v17;
  }
  char v28 = *v13;
  *(void *)(a1 + 216) += v17;
  char v35 = 0;
  sub_10001B8E0(&v35);
  if ((v2 & 1) != 0 || sub_10058556C(a1))
  {
    uint64_t v29 = *(void *)(a1 + 152);
    unsigned int v30 = *(uint64_t **)(v29 + 344);
    if (v30 != *(uint64_t **)(v29 + 352))
    {
      int v31 = v2 ^ 1;
      do
      {
        uint64_t v32 = *v30;
        if (*(_DWORD *)(*v30 + 32) == 8
          && *(_DWORD *)(v32 + 48) == 3
          && sub_100242768(*(_WORD **)v32, v28, v18, *(unsigned char *)(a1 + 184), v31) == 410)
        {
          __int16 v33 = qword_100A19E48;
          if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_FAULT)) {
            sub_10077B928(buf, &v37, v33);
          }
        }
        ++v30;
      }
      while (v30 != *(uint64_t **)(*(void *)(a1 + 152) + 352));
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR))
  {
    sub_10077B970();
  }
  sub_10001B8AC(&v35);
  return v16;
}

void sub_100585EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_100585ED0(uint64_t a1, uint64_t a2)
{
}

void sub_100585F88(_Unwind_Exception *a1)
{
  sub_100585320(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100585FA0(uint64_t a1)
{
  *(void *)a1 = off_1009B65B8;
  free(*(void **)(a1 + 232));
  free(*(void **)(a1 + 240));
  free(*(void **)(a1 + 248));

  return sub_100585320((void *)a1);
}

void sub_10058600C(uint64_t a1)
{
  sub_100585FA0(a1);

  operator delete();
}

BOOL sub_100586044(uint64_t *a1)
{
  uint64_t v1 = a1 + 26;
  unint64_t v2 = a1[26];
  uint64_t v3 = (unsigned __int8 *)a1[22];
  uint64_t v4 = v3[3];
  unint64_t v5 = 2 * v4 - v2;
  if (2 * v4 == v2)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_FAULT)) {
      sub_10077B6C0();
    }
    return 1;
  }
  if (!v3[5])
  {
    size_t v8 = sub_1002E7D08(a1[21], (char *)(a1[24] + v2), 2 * v4 - v2);
    a1[26] += v8;
    return v8 == v5;
  }
  size_t v13 = 0;
  size_t v14 = 0;
  if (v3[4])
  {
    if (!(2 * v4 % v5)) {
      goto LABEL_14;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_FAULT)) {
      sub_10077B8C0();
    }
    BOOL result = 0;
    uint64_t *v1 = 0;
    v1[1] = 0;
    return result;
  }
  if (v2) {
    return 1;
  }
  do
  {
LABEL_14:
    if (!sub_1002E7DE8(a1[21], (char *)(a1[30] + (v2 >> 1)), &v14, v4 - (v2 >> 1), (char *)(a1[31] + (v2 >> 1)), &v13, v4 - (v2 >> 1)))
    {
      uint64_t v11 = qword_100A19E48;
      BOOL result = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEBUG);
      if (!result) {
        return result;
      }
      sub_10077BBB4(v1, v11);
      return 0;
    }
    if (!(v14 + v13))
    {
      BOOL result = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_FAULT);
      if (!result) {
        return result;
      }
      sub_10077BAA0();
      return 0;
    }
    uint64_t v9 = a1[22];
    if (!*(unsigned char *)(v9 + 4))
    {
      size_t v12 = v13 + v14 + *v1;
      uint64_t *v1 = v12;
      if (v12 > 2 * (unint64_t)*(unsigned __int8 *)(v9 + 3)
        && os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_FAULT))
      {
        goto LABEL_21;
      }
      return 1;
    }
    uint64_t v4 = *(unsigned __int8 *)(v9 + 3);
    size_t v10 = v13 + v14;
    if (2 * v4 % (v13 + v14))
    {
      BOOL result = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_FAULT);
      if (!result) {
        return result;
      }
      sub_10077BB44();
      return 0;
    }
    unint64_t v2 = *v1 + v10;
    uint64_t *v1 = v2;
    size_t v13 = 0;
    size_t v14 = 0;
    v5 -= v10;
  }
  while (v5);
  if (v2 != 2 * *(unsigned __int8 *)(v9 + 3) && os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_FAULT)) {
LABEL_21:
  }
    sub_10077BAD4();
  return 1;
}

void *sub_1005862D4(void *result)
{
  if (!*(unsigned char *)(result[22] + 5) && result[26] >= 2uLL)
  {
    unint64_t v1 = 0;
    unint64_t v2 = (unsigned char *)result[24];
    do
    {
      *(unsigned char *)(result[30] + v1) = *v2;
      *(unsigned char *)(result[31] + v1++) = v2[1];
      v2 += 2;
    }
    while (v1 < result[26] >> 1);
  }
  return result;
}

void sub_100586324(void *a1)
{
  uint64_t v1 = a1[22];
  if (*(unsigned char *)(v1 + 2) != 8)
  {
    if (a1[26] != 2 * *(unsigned __int8 *)(v1 + 3))
    {
      uint64_t v3 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_FAULT)) {
        sub_10077BC30(v3, v4, v5, v6, v7, v8, v9, v10);
      }
    }
    sub_1005855B4((uint64_t)a1, a1[30]);
    sub_1005855B4((uint64_t)a1, a1[31]);
    a1[26] = 2 * *(unsigned __int8 *)(a1[22] + 4);
  }
}

BOOL sub_1005863B4(uint64_t a1)
{
  sub_10003FB34();
  int v2 = sub_100351254();
  if (*(unsigned char *)(*(void *)(a1 + 176) + 6))
  {
    uint64_t v3 = *(void *)(a1 + 216);
    if (!v3)
    {
      unint64_t v4 = (*(void *)(a1 + 208) - 1) / (unint64_t)(*(void *)(a1 + 160) - 1);
      if (v4 >= 4u)
      {
        uint64_t v5 = qword_100A19E48;
        if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_FAULT)) {
          sub_10077BCE8(v4, v5);
        }
      }
      **(unsigned char **)(a1 + 232) = v4 | (4 * *(unsigned char *)(a1 + 185));
      uint64_t v3 = *(void *)(a1 + 216);
    }
    unint64_t v6 = *(void *)(a1 + 208) - v3;
    unint64_t v7 = *(void *)(a1 + 160) - 1;
    BOOL v8 = v6 <= v7;
    if (v6 >= v7) {
      size_t v9 = *(void *)(a1 + 160) - 1;
    }
    else {
      size_t v9 = *(void *)(a1 + 208) - v3;
    }
    memcpy((void *)(*(void *)(a1 + 232) + 1), (const void *)(*(void *)(a1 + 192) + v3), v9);
    uint64_t v10 = *(char **)(a1 + 232);
    LOWORD(v11) = v9 + 1;
    *(void *)(a1 + 216) += v9;
  }
  else
  {
    if (*(void *)(a1 + 216))
    {
      size_t v12 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_FAULT)) {
        sub_10077B9B0(v12, v13, v14, v15, v16, v17, v18, v19);
      }
    }
    unint64_t v20 = *(void *)(a1 + 208);
    if (v20 > 2 * *(void *)(a1 + 160))
    {
      uint64_t v21 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)timeval buf = 136446210;
        char v35 = "fAudioBuffer.getFillLevel() <= (fMaxPacketSize * 2)";
        _os_log_fault_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", buf, 0xCu);
        unint64_t v20 = *(void *)(a1 + 208);
      }
    }
    uint64_t v10 = 0;
    *(void *)(a1 + 216) += v20;
    unint64_t v11 = v20 >> 1;
    BOOL v8 = 1;
  }
  char v33 = 0;
  sub_10001B8E0(&v33);
  if ((v2 & 1) != 0 || sub_10058556C(a1))
  {
    uint64_t v22 = *(void *)(a1 + 152);
    uint64_t v23 = *(uint64_t **)(v22 + 344);
    if (v23 != *(uint64_t **)(v22 + 352))
    {
      int v24 = v2 ^ 1;
      do
      {
        uint64_t v25 = *v23;
        if (*(_DWORD *)(*v23 + 32) == 8 && *(_DWORD *)(v25 + 48) == 3)
        {
          uint64_t v26 = *(void *)(a1 + 176);
          if (!*(unsigned char *)(v26 + 6) && *(_DWORD *)(v26 + 8) == 1)
          {
            uint64_t v27 = 248;
            if ((*(unsigned char *)(v25 + 72) & 8) == 0) {
              uint64_t v27 = 240;
            }
            uint64_t v10 = *(char **)(a1 + v27);
          }
          if (v10)
          {
            if (sub_100242768(*(_WORD **)v25, v10, (unsigned __int16)v11, *(unsigned char *)(a1 + 184), v24) == 410)
            {
              char v28 = qword_100A19E48;
              if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_FAULT)) {
                sub_10077B928(buf, &v35, v28);
              }
            }
          }
          else
          {
            uint64_t v29 = qword_100A19E48;
            if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
              sub_10077BCA8(&v31, v32, v29);
            }
            uint64_t v10 = 0;
          }
        }
        ++v23;
      }
      while (v23 != *(uint64_t **)(*(void *)(a1 + 152) + 352));
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR))
  {
    sub_10077B970();
  }
  sub_10001B8AC(&v33);
  return v8;
}

void sub_1005866F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_10058671C(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, (uint8_t *)va, 0x12u);
}

uint64_t sub_100586770(uint64_t a1)
{
  *(void *)sub_1004C9B7C(a1, "LEAService", 0x10000) = &off_1009B6650;
  if (qword_1009F7F20 != -1) {
    dispatch_once(&qword_1009F7F20, &stru_1009B6740);
  }
  sub_1004C9E90(a1, qword_1009F7F18);
  return a1;
}

void sub_1005867F8(_Unwind_Exception *a1)
{
  sub_1004C9C80(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100586810(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0;
  sub_100026C30((uint64_t)&v5);
  *(void *)&long long v4 = (int)v5;
  *((void *)&v4 + 1) = SWORD2(v5);
  return sub_100477F4C(a2, 2u, 1, &v4, 0);
}

void sub_10058686C(uint64_t a1)
{
  sub_1004C9C80(a1);

  operator delete();
}

void sub_1005868A4(id a1)
{
}

void sub_1005868E8()
{
}

void sub_100586C88(uint64_t a1)
{
  uint64_t v2 = sub_100019878();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1005A1ACC;
  uint64_t v3[3] = &unk_100997528;
  void v3[4] = a1;
  sub_100013018(v2, v3);
}

void sub_100586D04(uint64_t a1, xpc_object_t original)
{
  xpc_object_t reply = xpc_dictionary_create_reply(original);
  if (reply)
  {
    long long v4 = reply;
    xpc_object_t v5 = xpc_array_create(0, 0);
    xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
    if (qword_1009F7EB0 != -1) {
      dispatch_once(&qword_1009F7EB0, &stru_1009B7B08);
    }
    sub_1004B6054();
    if (v9 >= 0) {
      p_p = (const char *)&__p;
    }
    else {
      p_p = (const char *)__p;
    }
    xpc_dictionary_set_string(v6, "Local Device", p_p);
    if (v9 < 0) {
      operator delete(__p);
    }
    xpc_array_append_value(v5, v6);
    xpc_release(v6);
    xpc_dictionary_set_value(v4, "kCBMsgArgs", v5);
    xpc_release(v5);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v4);
    xpc_release(v4);
  }
}

void sub_100586E20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100586E3C(uint64_t a1, void *a2)
{
  if (*(int *)(a1 + 80) >= 2)
  {
    uint64_t v4 = sub_100017768();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 8))(v4))
    {
      xpc_object_t v5 = xpc_dictionary_get_value(a2, "kCBMsgArgs");
      if (v5)
      {
        xpc_object_t v6 = v5;
        int64_t int64 = xpc_dictionary_get_int64(v5, "kCBMsgId");
        BOOL v8 = qword_100A19EC8;
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)timeval buf = 134217984;
          *(void *)&uint8_t buf[4] = int64;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Handling debug command %llu", buf, 0xCu);
        }
        xpc_object_t v9 = xpc_dictionary_get_value(v6, "kCBMsgArgs");
        uint64_t v10 = v9;
        switch(int64)
        {
          case 1:
            int64_t v11 = xpc_dictionary_get_int64(v9, "kCBMsgArgState");
            uint64_t v12 = sub_10003FB34();
            (*(void (**)(uint64_t, BOOL, void))(*(void *)v12 + 560))(v12, v11 != 0, 0);
            return;
          case 2:
            int64_t v51 = xpc_dictionary_get_int64(v9, "kCBMsgArgState");
            uint64_t v52 = sub_1003705E4();
            (*(void (**)(uint64_t, BOOL))(*(void *)v52 + 112))(v52, v51 != 0);
            return;
          case 3:
            uint64_t v36 = sub_10003FB34();
            (*(void (**)(uint64_t))(*(void *)v36 + 1256))(v36);
            return;
          case 4:
            LOWORD(value[0]) = 0;
            LOWORD(length) = 0;
            LOWORD(v259[0]) = 0;
            LOWORD(v253) = 0;
            unsigned __int16 v41 = xpc_dictionary_get_int64(v9, "kCBMsgArgState");
            if ((*(_DWORD *)(sub_10003FB34() + 712) - 19) > 0x7BC)
            {
              uint64_t v94 = sub_10003FB34();
              (*(void (**)(uint64_t, void, uint64_t *, uint64_t *, uint64_t *, long long *))(*(void *)v94 + 1160))(v94, v41, value, &length, v259, &v253);
            }
            else
            {
              uint64_t v292 = 0;
              long long v291 = 0u;
              long long v290 = 0u;
              long long v289 = 0u;
              long long v288 = 0u;
              long long v287 = 0u;
              long long v286 = 0u;
              long long v285 = 0u;
              long long v284 = 0u;
              long long v283 = 0u;
              long long v282 = 0u;
              long long v281 = 0u;
              long long v280 = 0u;
              long long v279 = 0u;
              memset(buf, 0, sizeof(buf));
              uint64_t v42 = sub_10003FB34();
              if (!(*(unsigned int (**)(uint64_t, void, uint8_t *))(*(void *)v42 + 1168))(v42, v41, buf))
              {
                LOWORD(value[0]) = *(_WORD *)&buf[4];
                LOWORD(length) = *(_WORD *)&buf[8];
                LOWORD(v259[0]) = *(_WORD *)&buf[12];
                LOWORD(v253) = *(_WORD *)&buf[16];
                unsigned int v43 = DWORD2(v289);
                unsigned int v44 = HIDWORD(v289);
                unsigned int v45 = v290;
                unsigned int v46 = DWORD1(v290);
                unsigned int v47 = DWORD2(v290);
                unsigned int v48 = HIDWORD(v290);
                unsigned int v49 = (unsigned __int16)v291;
                unsigned int v50 = WORD1(v291);
                unsigned int v187 = WORD2(v291);
                unsigned int v184 = WORD3(v291);
                uint64_t v180 = v292;
                uint64_t v182 = *((void *)&v291 + 1);
                goto LABEL_79;
              }
            }
            unsigned int v50 = 0;
            unsigned int v187 = 0;
            unsigned int v184 = 0;
            uint64_t v180 = 0;
            uint64_t v182 = 0;
            unsigned int v49 = 0;
            unsigned int v48 = 0;
            unsigned int v47 = 0;
            unsigned int v46 = 0;
            unsigned int v45 = 0;
            unsigned int v44 = 0;
            unsigned int v43 = 0;
LABEL_79:
            xpc_object_t reply = xpc_dictionary_create_reply(a2);
            __int16 v96 = reply;
            if (reply)
            {
              xpc_dictionary_set_uint64(reply, "kCBTransmitStat", LOWORD(value[0]));
              xpc_dictionary_set_uint64(v96, "kCBReceiveStat", (unsigned __int16)length);
              xpc_dictionary_set_uint64(v96, "kCBSleepStat", LOWORD(v259[0]));
              xpc_dictionary_set_uint64(v96, "kCBOthersStat", (unsigned __int16)v253);
              xpc_dictionary_set_uint64(v96, "kCBm154Tx", v43);
              xpc_dictionary_set_uint64(v96, "kCBm154Rx", v44);
              xpc_dictionary_set_uint64(v96, "kCBiPAThreadCounter", v45);
              xpc_dictionary_set_uint64(v96, "kCBePAThreadCounter", v46);
              xpc_dictionary_set_uint64(v96, "kCBiPA5gCounter", v47);
              xpc_dictionary_set_uint64(v96, "kCBePA5gCounter", v48);
              xpc_dictionary_set_uint64(v96, "kCBtxbf5gTxPct", v49);
              xpc_dictionary_set_uint64(v96, "kCBmrc5gRxPct", v50);
              xpc_dictionary_set_uint64(v96, "kCBepa5gTxPct", v187);
              xpc_dictionary_set_uint64(v96, "kCBtxbf5gEpaTxPct", v184);
              xpc_dictionary_set_uint64(v96, "kCBduration5gTx", v182);
              xpc_dictionary_set_uint64(v96, "kCBduration5gRx", v180);
              xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v96);
              xpc_release(v96);
            }
            break;
          case 5:
            switch(xpc_dictionary_get_int64(v9, "kCBMsgArgOptions"))
            {
              case 1:
                uint64_t v26 = qword_100A19EC8;
                if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)timeval buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "CBDebugCommandCTManagerStart", buf, 2u);
                }
                if (qword_1009FB798 != -1) {
                  dispatch_once(&qword_1009FB798, &stru_1009B7A68);
                }
                sub_10054FE08((uint64_t)off_1009FB790 + 176, a1 + 160);
                if (qword_1009FB798 != -1) {
                  dispatch_once(&qword_1009FB798, &stru_1009B7A68);
                }
                uint64_t v27 = off_1009FB790;
                char v28 = *(void **)(a1 + 96);
                double Current = CFAbsoluteTimeGetCurrent();
                sub_10044C9DC((uint64_t)v27, v28, Current);
                break;
              case 2:
                int v149 = qword_100A19EC8;
                if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)timeval buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v149, OS_LOG_TYPE_DEFAULT, "CBDebugCommandCTManagerStop", buf, 2u);
                }
                if (qword_1009FB798 != -1) {
                  dispatch_once(&qword_1009FB798, &stru_1009B7A68);
                }
                sub_10044CE14((uint64_t)off_1009FB790);
                break;
              case 3:
                int v143 = qword_100A19EC8;
                if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)timeval buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v143, OS_LOG_TYPE_DEFAULT, "CBDebugCommandCTManagerReset", buf, 2u);
                }
                if (qword_1009F7ED0 != -1) {
                  dispatch_once(&qword_1009F7ED0, &stru_1009B7A28);
                }
                sub_100716D24(qword_1009F7EC8);
                break;
              case 4:
                __int16 v144 = qword_100A19EC8;
                if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)timeval buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v144, OS_LOG_TYPE_DEFAULT, "CBDebugCommandCTManagerDebugFillTEKHistory", buf, 2u);
                }
                if (qword_1009F7ED0 != -1) {
                  dispatch_once(&qword_1009F7ED0, &stru_1009B7A28);
                }
                sub_100717B08(qword_1009F7EC8, 30);
                break;
              case 5:
                __int16 v130 = qword_100A19EC8;
                if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)timeval buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v130, OS_LOG_TYPE_DEFAULT, "CBDebugCommandCTManagerForceTEKRotation", buf, 2u);
                }
                if (qword_1009F7ED0 != -1) {
                  dispatch_once(&qword_1009F7ED0, &stru_1009B7A28);
                }
                sub_100717424(qword_1009F7EC8);
                break;
              case 6:
                __int16 v150 = qword_100A19EC8;
                if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)timeval buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v150, OS_LOG_TYPE_DEFAULT, "CBDebugCommandCTManagerRunRPIBenchmarks", buf, 2u);
                }
                int64_t v151 = xpc_dictionary_get_int64(v10, "kCBMsgArgKeys");
                if (qword_1009FB798 != -1) {
                  dispatch_once(&qword_1009FB798, &stru_1009B7A68);
                }
                sub_10044BDF4((uint64_t)off_1009FB790, v151);
                break;
              case 7:
                __int16 v152 = qword_100A19EC8;
                if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)timeval buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v152, OS_LOG_TYPE_DEFAULT, "CBDebugCommandCTManagerCryptoVectorValidation", buf, 2u);
                }
                if (qword_1009F7ED0 != -1) {
                  dispatch_once(&qword_1009F7ED0, &stru_1009B7A28);
                }
                sub_10071687C();
                break;
              case 8:
                v145 = qword_100A19EC8;
                if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)timeval buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v145, OS_LOG_TYPE_DEFAULT, "CBDebugCommandCTManagerGetCurrentAdvertisingPayload", buf, 2u);
                }
                *(void *)&uint8_t buf[8] = 0;
                *(void *)timeval buf = 0;
                if (qword_1009FB798 != -1) {
                  dispatch_once(&qword_1009FB798, &stru_1009B7A68);
                }
                sub_10044C034((uint64_t)off_1009FB790, buf);
                xpc_object_t v146 = xpc_dictionary_create_reply(a2);
                if (v146)
                {
                  v147 = (const void *)sub_10004A6E4((uint64_t)buf);
                  size_t v148 = sub_100045F00((uint64_t)buf);
                  xpc_dictionary_set_data(v146, "kCBMsgArgAdvertisingPayload", v147, v148);
                  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v146);
                  xpc_release(v146);
                }
                *(void *)timeval buf = &off_100998428;
                if (*(void *)&buf[8]) {
                  sub_1000368F4(*(atomic_uint **)&buf[8]);
                }
                break;
              case 9:
                if (qword_1009FB798 != -1) {
                  dispatch_once(&qword_1009FB798, &stru_1009B7A68);
                }
                id v186 = [*((id *)off_1009FB790 + 21) copy];
                xpc_object_t v160 = xpc_array_create(0, 0);
                long long v266 = 0u;
                long long v267 = 0u;
                long long v264 = 0u;
                long long v265 = 0u;
                id v189 = v186;
                id v161 = [v189 countByEnumeratingWithState:&v264 objects:v276 count:16];
                if (v161)
                {
                  uint64_t v162 = *(void *)v265;
                  do
                  {
                    for (int i = 0; i != v161; int i = (char *)i + 1)
                    {
                      if (*(void *)v265 != v162) {
                        objc_enumerationMutation(v189);
                      }
                      __int16 v164 = *(void **)(*((void *)&v264 + 1) + 8 * i);
                      xpc_object_t v165 = xpc_dictionary_create(0, 0, 0);
                      id v166 = [v164 objectForKey:@"RPIHistoryTime"];
                      xpc_dictionary_set_string(v165, "RPIHistoryTime", (const char *)[v166 UTF8String]);

                      memset(buf, 0, 20);
                      int v167 = [v164 objectForKey:@"RPIHistoryOTAPayload"];
                      [v167 getBytes:buf length:20];

                      xpc_dictionary_set_data(v165, "RPIHistoryOTAPayload", buf, 0x14uLL);
                      __int16 v168 = [v164 objectForKey:@"RPIHistoryAEMVersion"];
                      xpc_dictionary_set_int64(v165, "RPIHistoryAEMVersion", (int)[v168 intValue]);

                      int v169 = [v164 objectForKey:@"RPIHistoryAEMTxPower"];
                      xpc_dictionary_set_int64(v165, "RPIHistoryAEMTxPower", (int)[v169 intValue]);

                      __int16 v170 = [v164 objectForKey:@"RPIHistorySecondsSince1970"];
                      xpc_dictionary_set_int64(v165, "RPIHistorySecondsSince1970", (int)[v170 intValue]);

                      int v171 = [v164 objectForKey:@"RPIHistoryENIntervalNumber"];
                      xpc_dictionary_set_int64(v165, "RPIHistoryENIntervalNumber", (int)[v171 intValue]);

                      xpc_array_append_value(v160, v165);
                      xpc_release(v165);
                    }
                    id v161 = [v189 countByEnumeratingWithState:&v264 objects:v276 count:16];
                  }
                  while (v161);
                }

                xpc_object_t v172 = xpc_dictionary_create_reply(a2);
                int v173 = v172;
                if (v172)
                {
                  xpc_dictionary_set_value(v172, "kCBMsgArgAdvertisingPayloadHistory", v160);
                  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v173);
                  xpc_release(v173);
                }

                break;
              case 10:
                int v131 = qword_100A19EC8;
                if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)timeval buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v131, OS_LOG_TYPE_DEFAULT, "CBDebugCommandCTManagerGetTEKHistory", buf, 2u);
                }
                int64_t v132 = xpc_dictionary_get_int64(v10, "kCBMsgArgToday");
                int64_t v133 = xpc_dictionary_get_int64(v10, "KCBMsgArgForceRefresh");
                if (qword_1009F7ED0 != -1) {
                  dispatch_once(&qword_1009F7ED0, &stru_1009B7A28);
                }
                __int16 v134 = sub_100717080(qword_1009F7EC8, v132 != 0, v133 != 0);
                xpc_object_t v135 = xpc_array_create(0, 0);
                long long v271 = 0u;
                long long v270 = 0u;
                long long v268 = 0u;
                long long v269 = 0u;
                id v136 = v134;
                id v137 = [v136 countByEnumeratingWithState:&v268 objects:v277 count:16];
                if (v137)
                {
                  uint64_t v138 = *(void *)v269;
                  do
                  {
                    for (j = 0; j != v137; j = (char *)j + 1)
                    {
                      if (*(void *)v269 != v138) {
                        objc_enumerationMutation(v136);
                      }
                      __int16 v140 = *(void **)(*((void *)&v268 + 1) + 8 * (void)j);
                      memset(buf, 0, 21);
                      [v140 getBytes:buf length:21];
                      xpc_array_set_data(v135, 0xFFFFFFFFFFFFFFFFLL, buf, 0x15uLL);
                    }
                    id v137 = [v136 countByEnumeratingWithState:&v268 objects:v277 count:16];
                  }
                  while (v137);
                }

                xpc_object_t v141 = xpc_dictionary_create_reply(a2);
                __int16 v142 = v141;
                if (v141)
                {
                  xpc_dictionary_set_value(v141, "kCBMsgArgTEKHistory", v135);
                  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v142);
                  xpc_release(v142);
                }

                break;
              case 11:
                int v153 = qword_100A19EC8;
                if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)timeval buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v153, OS_LOG_TYPE_DEFAULT, "CBDebugCommandCTManagerCalculateATTN", buf, 2u);
                }
                int64_t v154 = xpc_dictionary_get_int64(v10, "KCBMsgArgSaturated");
                char v155 = xpc_dictionary_get_int64(v10, "kCBMsgArgRSSI");
                uint64_t length = 0;
                data = xpc_dictionary_get_data(v10, "kCBMsgArgTEK", &length);
                v259[0] = 0;
                int v157 = xpc_dictionary_get_data(v10, "kCBMsgArgOTARpiAem", v259);
                BYTE4(v253) = 0;
                LODWORD(v253) = 0;
                if (length == 16 && v259[0] == 20)
                {
                  *(_OWORD *)timeval buf = *data;
                  *(_OWORD *)value = *(_OWORD *)v157;
                  int v272 = v157[4];
                  if (qword_1009FB798 != -1) {
                    dispatch_once(&qword_1009FB798, &stru_1009B7A68);
                  }
                  sub_10044E540((uint64_t)off_1009FB790, (uint64_t)buf, (uint64_t)value, (uint64_t)&v272, v155, v154 != 0, (unsigned __int8 *)&v253);
                }
                xpc_object_t v158 = xpc_dictionary_create_reply(a2);
                int v159 = v158;
                if (v158)
                {
                  xpc_dictionary_set_uint64(v158, "kCBMsgArgATTN", BYTE4(v253));
                  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v159);
                  xpc_release(v159);
                }
                break;
              case 12:
                unsigned __int8 v129 = xpc_dictionary_get_int64(v10, "kCBMsgArgEKRollingPeriod");
                if (qword_1009F7ED0 != -1) {
                  dispatch_once(&qword_1009F7ED0, &stru_1009B7A28);
                }
                sub_1007181F0(qword_1009F7EC8, v129);
                break;
              default:
                if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_98;
                }
                break;
            }
            return;
          case 6:
            if (qword_1009F8248 != -1) {
              dispatch_once(&qword_1009F8248, &stru_1009B7B48);
            }
            sub_1006643B0();
            return;
          case 7:
            switch(xpc_dictionary_get_int64(v9, "kCBMsgArgOptions"))
            {
              case 1:
                memset(buf, 0, 24);
                if (qword_1009F8758 != -1) {
                  dispatch_once(&qword_1009F8758, &stru_1009B7B68);
                }
                if (!sub_10026AA7C((uint64_t)off_1009F8750, (uint64_t **)buf))
                {
                  xpc_object_t v174 = xpc_array_create(0, 0);
                  if (v174)
                  {
                    v175 = *(void ***)buf;
                    v176 = *(void ***)&buf[8];
                    while (v175 != v176)
                    {
                      xpc_object_t v177 = sub_10002FB38(*v175, *(unsigned __int8 *)(a1 + 168), *(_DWORD *)(a1 + 80));
                      xpc_array_append_value(v174, v177);
                      xpc_release(v177);
                      ++v175;
                    }
                    xpc_object_t v178 = xpc_dictionary_create_reply(a2);
                    v179 = v178;
                    if (v178)
                    {
                      xpc_dictionary_set_value(v178, "kCBMsgArgDevices", v174);
                      xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v179);
                      xpc_release(v179);
                    }
                  }
                }
                value[0] = (uint64_t)buf;
                sub_100441C40((void ***)value);
                break;
              case 2:
                uint64_t v13 = sub_1002D48BC(v10, "kCBMsgArgDeviceUUID");
                if (v13)
                {
                  if (qword_1009F8758 != -1) {
                    dispatch_once(&qword_1009F8758, &stru_1009B7B68);
                  }
                  sub_10026A390((uint64_t)off_1009F8750, v13);
                }
                goto LABEL_96;
              case 3:
                uint64_t v13 = sub_1002D48BC(v10, "kCBMsgArgDeviceUUID");
                if (v13)
                {
                  if (qword_1009F8758 != -1) {
                    dispatch_once(&qword_1009F8758, &stru_1009B7B68);
                  }
                  sub_10026A940((uint64_t)off_1009F8750, v13);
                }
                goto LABEL_96;
              case 4:
                if (qword_1009F8758 != -1) {
                  dispatch_once(&qword_1009F8758, &stru_1009B7B68);
                }
                sub_10026AD04((uint64_t)off_1009F8750);
                break;
              default:
                if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
LABEL_98:
                }
                  sub_10077C000();
                break;
            }
            return;
          case 8:
            int64_t v183 = xpc_dictionary_get_int64(v9, "kCBMsgArgOptions");
            v185 = sub_100019738(v10, "kCBMsgArgApplicationID");
            if (_os_feature_enabled_impl())
            {
              if (v183 == 1)
              {
                v181 = sub_1002D4B14(v10, "kCBMsgArgUUIDs");
                int v97 = sub_1002D500C(v10, "kCBMsgArgNameSubstring");
                value[1] = 0;
                value[0] = 0;
                uint64_t v275 = 0;
                xpc_object_t v98 = xpc_dictionary_get_value(v10, "kCBMsgArgServices");
                if (v98) {
                  sub_1002D4450(v98, (uint64_t)value);
                }
                uint64_t v262 = 0;
                uint64_t length = 0;
                uint64_t v263 = 0;
                xpc_object_t v99 = xpc_dictionary_get_value(v10, "kCBMsgArgMfgrIdentifiers");
                if (v99) {
                  sub_1002D46E0(v99, (uint64_t)&length);
                }
                v259[1] = 0;
                v259[0] = 0;
                uint64_t v260 = 0;
                long long v255 = 0u;
                long long v256 = 0u;
                long long v257 = 0u;
                long long v258 = 0u;
                id v188 = v97;
                id v100 = [v188 countByEnumeratingWithState:&v255 objects:v273 count:16];
                if (v100)
                {
                  uint64_t v101 = *(void *)v256;
                  do
                  {
                    for (k = 0; k != v100; k = (char *)k + 1)
                    {
                      if (*(void *)v256 != v101) {
                        objc_enumerationMutation(v188);
                      }
                      id v103 = *(id *)(*((void *)&v255 + 1) + 8 * (void)k);
                      sub_10004191C(&v253, (char *)[v103 UTF8String]);
                      int v104 = (_OWORD *)v259[1];
                      if (v259[1] >= v260)
                      {
                        unint64_t v106 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v259[1] - v259[0]) >> 3);
                        unint64_t v107 = v106 + 1;
                        if (v106 + 1 > 0xAAAAAAAAAAAAAAALL) {
                          abort();
                        }
                        if (0x5555555555555556 * ((uint64_t)(v260 - v259[0]) >> 3) > v107) {
                          unint64_t v107 = 0x5555555555555556 * ((uint64_t)(v260 - v259[0]) >> 3);
                        }
                        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v260 - v259[0]) >> 3) >= 0x555555555555555) {
                          unint64_t v108 = 0xAAAAAAAAAAAAAAALL;
                        }
                        else {
                          unint64_t v108 = v107;
                        }
                        *(void *)&long long v279 = &v260;
                        if (v108) {
                          int v109 = (char *)sub_1002B3440((uint64_t)&v260, v108);
                        }
                        else {
                          int v109 = 0;
                        }
                        int v110 = &v109[24 * v106];
                        long long v111 = v253;
                        *((void *)v110 + 2) = v254;
                        *(_OWORD *)int v110 = v111;
                        uint64_t v254 = 0;
                        long long v253 = 0uLL;
                        uint64_t v112 = v259[1];
                        uint64_t v113 = v259[0];
                        if (v259[1] == v259[0])
                        {
                          int64x2_t v116 = vdupq_n_s64(v259[1]);
                          uint64_t v114 = (uint64_t)&v109[24 * v106];
                        }
                        else
                        {
                          uint64_t v114 = (uint64_t)&v109[24 * v106];
                          do
                          {
                            long long v115 = *(_OWORD *)(v112 - 24);
                            *(void *)(v114 - 8) = *(void *)(v112 - 8);
                            *(_OWORD *)(v114 - 24) = v115;
                            v114 -= 24;
                            *(void *)(v112 - 16) = 0;
                            *(void *)(v112 - 8) = 0;
                            *(void *)(v112 - 24) = 0;
                            v112 -= 24;
                          }
                          while (v112 != v113);
                          int64x2_t v116 = *(int64x2_t *)v259;
                        }
                        uint64_t v117 = (uint64_t)(v110 + 24);
                        v259[0] = v114;
                        v259[1] = (uint64_t)(v110 + 24);
                        *(int64x2_t *)&uint8_t buf[8] = v116;
                        uint64_t v118 = v260;
                        uint64_t v260 = (uint64_t)&v109[24 * v108];
                        *(void *)&unsigned char buf[24] = v118;
                        *(void *)timeval buf = v116.i64[0];
                        sub_1002B4440((uint64_t)buf);
                        v259[1] = v117;
                        if (SHIBYTE(v254) < 0) {
                          operator delete((void *)v253);
                        }
                      }
                      else
                      {
                        long long v105 = v253;
                        *(void *)(v259[1] + 16) = v254;
                        *int v104 = v105;
                        v259[1] = (uint64_t)v104 + 24;
                      }
                    }
                    id v100 = [v188 countByEnumeratingWithState:&v255 objects:v273 count:16];
                  }
                  while (v100);
                }

                if (qword_1009F8788 != -1) {
                  dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
                }
                int v119 = off_1009F8780;
                uint64_t v252 = 0;
                v250 = 0;
                v251 = 0;
                sub_100037564((char *)&v250, (long long *)value[0], (long long *)value[1], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(value[1] - value[0]) >> 2));
                sub_10030BE04(__p, (uint64_t)&length);
                memset(v248, 0, sizeof(v248));
                sub_1002B3390((char *)v248, (long long *)v259[0], (long long *)v259[1], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v259[1] - v259[0]) >> 3));
                sub_100307F4C((uint64_t)v119, v185, v181, (long long **)&v250, (uint64_t)__p, v248);
                *(void *)timeval buf = v248;
                sub_100051568((void ***)buf);
                if (__p[0])
                {
                  __p[1] = __p[0];
                  operator delete(__p[0]);
                }
                if (v250)
                {
                  v251 = v250;
                  operator delete(v250);
                }
                *(void *)timeval buf = v259;
                sub_100051568((void ***)buf);
                if (length)
                {
                  uint64_t v262 = length;
                  operator delete((void *)length);
                }
                if (value[0])
                {
                  value[1] = value[0];
                  operator delete((void *)value[0]);
                }
              }
              else if (v183 == 2)
              {
                if (qword_1009F8788 != -1) {
                  dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
                }
                sub_100308520((uint64_t)off_1009F8780, v185);
              }
              else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
              {
                sub_10077C034();
              }
              __int16 v120 = qword_100A19EC8;
              if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)timeval buf = 134218242;
                *(void *)&uint8_t buf[4] = v183;
                *(_WORD *)&unsigned char buf[12] = 2112;
                *(void *)&uint8_t buf[14] = v185;
                _os_log_impl((void *)&_mh_execute_header, v120, OS_LOG_TYPE_DEFAULT, "CBDebugCommandDeviceAccessNotification opcode:%llu bundle:%@", buf, 0x16u);
              }
            }

            return;
          case 9:
            unint64_t v78 = sub_1002D4930(v9, "kCBMsgArgIRK");
            uint64_t v79 = sub_1002D4930(v10, "kCBMsgArgAddressBytes");
            int v80 = qword_100A19EC8;
            if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)timeval buf = 138412546;
              *(void *)&uint8_t buf[4] = v79;
              *(_WORD *)&unsigned char buf[12] = 2112;
              *(void *)&uint8_t buf[14] = v78;
              _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEFAULT, "CBDebugCommandResolveLERandomAddressWithIRK address:%@ irk:%@", buf, 0x16u);
            }
            if (v78 && [v78 length] == (id)16 && v79 && objc_msgSend(v79, "length") == (id)6)
            {
              int v81 = (long long *)[v78 bytes];
              *(_WORD *)((char *)value + 5) = 0;
              *(_DWORD *)((char *)value + 1) = 0;
              LOBYTE(value[0]) = 1;
              [v79 getBytes:(char *)value + 1 length:6];
              if (sub_100234C1C((uint64_t)value, v81))
              {
                int64_t v82 = 0;
              }
              else
              {
                double v121 = objc_opt_new();
                for (uint64_t m = 15; m != -1; --m)
                  [v121 appendBytes:(char *)v81 + m length:1];
                int v123 = qword_100A19EC8;
                if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)timeval buf = 138412546;
                  *(void *)&uint8_t buf[4] = v79;
                  *(_WORD *)&unsigned char buf[12] = 2112;
                  *(void *)&uint8_t buf[14] = v121;
                  _os_log_impl((void *)&_mh_execute_header, v123, OS_LOG_TYPE_DEFAULT, "CBDebugCommandResolveLERandomAddressWithIRK address:%@ irk:%@", buf, 0x16u);
                }
                id v124 = v121;
                if (sub_100234C1C((uint64_t)value, (long long *)[v124 bytes])) {
                  int64_t v82 = 0;
                }
                else {
                  int64_t v82 = 2200;
                }
              }
              int v125 = qword_100A19EC8;
              if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
              {
                __int16 v126 = sub_1006AD3F0();
                *(_DWORD *)timeval buf = 138412546;
                *(void *)&uint8_t buf[4] = v126;
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&uint8_t buf[14] = v82 & 0x98;
                _os_log_impl((void *)&_mh_execute_header, v125, OS_LOG_TYPE_DEFAULT, "CBDebugCommandResolveLERandomAddressWithIRK LE_ResolveUsingIRK for address %@ returned %d", buf, 0x12u);
              }
            }
            else
            {
              if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
                sub_10077C09C();
              }
              if (v79 && [v79 length] == (id)6)
              {
                if (v78 && [v78 length] == (id)16) {
                  int64_t v82 = 0;
                }
                else {
                  int64_t v82 = 21;
                }
              }
              else
              {
                int64_t v82 = 8;
              }
            }
            xpc_object_t v127 = xpc_dictionary_create_reply(a2);
            __int16 v128 = v127;
            if (v127)
            {
              xpc_dictionary_set_int64(v127, "kCBMsgArgResult", v82);
              xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v128);
              xpc_release(v128);
            }

            return;
          case 10:
            int64_t v33 = xpc_dictionary_get_int64(v9, "addressType");
            int64_t v34 = xpc_dictionary_get_int64(v10, "refreshIdentity");
            if (qword_1009F8248 != -1) {
              dispatch_once(&qword_1009F8248, &stru_1009B7B48);
            }
            if (v33) {
              int v35 = 2;
            }
            else {
              int v35 = 3;
            }
            sub_100664118((uint64_t)off_1009F8240, 1, v35, v34 != 0);
            return;
          case 11:
            *(void *)timeval buf = 0;
            *(void *)&uint8_t buf[8] = buf;
            *(_OWORD *)&uint8_t buf[16] = 0x2020000000uLL;
            *(void *)&unsigned char buf[24] = xpc_dictionary_create_reply(a2);
            if (qword_1009F7EC0 != -1) {
              dispatch_once(&qword_1009F7EC0, &stru_1009B7AC8);
            }
            v247[0] = _NSConcreteStackBlock;
            v247[1] = 3221225472;
            v247[2] = sub_1005A31F0;
            v247[3] = &unk_1009B71F0;
            v247[5] = a1;
            v247[4] = buf;
            sub_1006A6A38((uint64_t)off_1009F7EB8, v247);
            _Block_object_dispose(buf, 8);
            return;
          case 12:
            unint64_t v20 = sub_1002D4930(v9, "kCBFastLeConnectionInfoData");
            __int16 v21 = xpc_dictionary_get_int64(v10, "kCBFastLeConnectionInfoVersion");
            uint64_t v22 = sub_1002D48BC(v10, "kCBMsgArgDeviceUUID");
            uint64_t v23 = sub_100019878();
            v241[0] = _NSConcreteStackBlock;
            v241[1] = 3221225472;
            v241[2] = sub_1005A3330;
            v241[3] = &unk_1009B7218;
            uint64_t v244 = a1;
            id v24 = v22;
            id v242 = v24;
            __int16 v246 = v21;
            id v25 = v20;
            id v243 = v25;
            v245 = a2;
            sub_1000197D8(v23, v241);

            return;
          case 13:
            unsigned int v30 = sub_1002D48BC(v9, "kCBMsgArgDeviceUUID");
            uint64_t v31 = sub_100019878();
            v237[0] = _NSConcreteStackBlock;
            v237[1] = 3221225472;
            v237[2] = sub_1005A3400;
            v237[3] = &unk_100998570;
            uint64_t v239 = a1;
            id v32 = v30;
            id v238 = v32;
            v240 = a2;
            sub_1000197D8(v31, v237);

            return;
          case 14:
            uint64_t v67 = sub_1002D4930(v9, "kCBMsgArgLTK");
            uint64_t v68 = sub_1002D48BC(v10, "kCBMsgArgDeviceUUID");
            uint64_t v69 = sub_100019878();
            v227[0] = _NSConcreteStackBlock;
            v227[1] = 3221225472;
            v227[2] = sub_1005A3594;
            v227[3] = &unk_1009B7240;
            uint64_t v230 = a1;
            id v70 = v68;
            id v228 = v70;
            id v71 = v67;
            id v229 = v71;
            v231 = a2;
            sub_1000197D8(v69, v227);

            return;
          case 15:
            uint64_t v17 = sub_1002D48BC(v9, "kCBMsgArgDeviceUUID");
            uint64_t v18 = sub_100019878();
            v223[0] = _NSConcreteStackBlock;
            v223[1] = 3221225472;
            v223[2] = sub_1005A3710;
            v223[3] = &unk_100998570;
            uint64_t v225 = a1;
            id v19 = v17;
            id v224 = v19;
            v226 = a2;
            sub_1000197D8(v18, v223);

            return;
          case 16:
            int v37 = sub_1002D48BC(v9, "kCBMsgArgDeviceUUID");
            char v38 = xpc_dictionary_get_int64(v10, "kCBMsgArgOptions");
            uint64_t v39 = sub_100019878();
            v232[0] = _NSConcreteStackBlock;
            v232[1] = 3221225472;
            v232[2] = sub_1005A34C4;
            v232[3] = &unk_1009A2D20;
            uint64_t v234 = a1;
            id v40 = v37;
            char v236 = v38;
            id v233 = v40;
            v235 = a2;
            sub_1000197D8(v39, v232);

            return;
          case 17:
            uint64_t v13 = sub_1002D48BC(v9, "kCBMsgArgDeviceUUID");
            if (v13)
            {
              if (qword_1009F7EC0 != -1) {
                dispatch_once(&qword_1009F7EC0, &stru_1009B7AC8);
              }
              uint64_t v14 = off_1009F7EB8;
              sub_1000305AC(buf, v13);
              unsigned __int8 v15 = sub_10068D758((uint64_t)v14, buf, 0, 0, 0, 0, 0);
              uint64_t v16 = qword_100A19EC8;
              if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)timeval buf = 138412546;
                *(void *)&uint8_t buf[4] = v13;
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&uint8_t buf[14] = v15;
                _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "CBDebugCommandDisableHostWakeupOnLinkDrop identifier:%@ returned %d", buf, 0x12u);
              }
            }
            else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
            {
              sub_10077C0D0();
            }
LABEL_96:

            return;
          case 18:
            __int16 v53 = sub_1002D48BC(v9, "kCBMsgArgDeviceUUID");
            char v54 = xpc_dictionary_get_int64(v10, "kCBLePowerControlDisable");
            char v55 = xpc_dictionary_get_int64(v10, "kCBLePowerControlRssiMin");
            char v56 = xpc_dictionary_get_int64(v10, "kCBLePowerControlRssiMax");
            uint64_t v57 = sub_100019878();
            v200[0] = _NSConcreteStackBlock;
            v200[1] = 3221225472;
            v200[2] = sub_1005A3A9C;
            v200[3] = &unk_1009B72B8;
            uint64_t v202 = a1;
            id v58 = v53;
            char v204 = v54;
            char v205 = v55;
            char v206 = v56;
            id v201 = v58;
            v203 = a2;
            sub_1000197D8(v57, v200);

            return;
          case 19:
            int v72 = sub_1002D48BC(v9, "kCBMsgArgDeviceUUID");
            int v73 = sub_100019738(v10, "operation");
            char v74 = xpc_dictionary_get_int64(v10, "command");
            uint64_t v75 = sub_100019878();
            v217[0] = _NSConcreteStackBlock;
            v217[1] = 3221225472;
            v217[2] = sub_1005A3860;
            v217[3] = &unk_1009B7268;
            uint64_t v220 = a1;
            id v76 = v73;
            id v218 = v76;
            char v222 = v74;
            id v77 = v72;
            id v219 = v77;
            v221 = a2;
            sub_1000197D8(v75, v217);

            return;
          case 20:
            __int16 v83 = sub_1002D48BC(v9, "kCBMsgArgDeviceUUID");
            double v84 = xpc_dictionary_get_double(v10, "kCBMsgArgMinConnectionInterval");
            double v85 = xpc_dictionary_get_double(v10, "kCBMsgArgPreferredConnectionInterval");
            double v86 = xpc_dictionary_get_double(v10, "kCBMsgArgMaxConnectionInterval");
            __int16 v87 = xpc_dictionary_get_int64(v10, "kCBMsgArgPreferredConnectionLatency");
            __int16 v88 = xpc_dictionary_get_int64(v10, "kCBMsgArgMaxConnectionLatency");
            __int16 v89 = xpc_dictionary_get_int64(v10, "kCBMsgArgMinCELength");
            __int16 v90 = xpc_dictionary_get_int64(v10, "kCBMsgArgMaxCELength");
            __int16 v91 = xpc_dictionary_get_int64(v10, "kCBMsgArgSupervisionTimeout");
            uint64_t v92 = sub_100019878();
            v207[0] = _NSConcreteStackBlock;
            v207[1] = 3221225472;
            v207[2] = sub_1005A39E0;
            v207[3] = &unk_1009B7290;
            id v93 = v83;
            id v208 = v93;
            *(float *)&double v84 = v84;
            int v209 = LODWORD(v84);
            *(float *)&double v85 = v85;
            int v210 = LODWORD(v85);
            *(float *)&double v86 = v86;
            int v211 = LODWORD(v86);
            __int16 v212 = v89;
            __int16 v213 = v90;
            __int16 v214 = v87;
            __int16 v215 = v88;
            __int16 v216 = v91;
            sub_100013018(v92, v207);

            return;
          case 21:
            __int16 v59 = sub_1002D48BC(v9, "kCBMsgArgDeviceUUID");
            char v60 = xpc_dictionary_get_int64(v10, "command");
            uint64_t v61 = sub_100019878();
            v195[0] = _NSConcreteStackBlock;
            v195[1] = 3221225472;
            v195[2] = sub_1005A3B68;
            v195[3] = &unk_1009A2D20;
            uint64_t v197 = a1;
            char v199 = v60;
            id v62 = v59;
            id v196 = v62;
            v198 = a2;
            sub_1000197D8(v61, v195);

            return;
          case 22:
            __int16 v63 = sub_1002D48BC(v9, "kCBMsgArgDeviceUUID");
            char v64 = xpc_dictionary_get_int64(v10, "command");
            uint64_t v65 = sub_100019878();
            v190[0] = _NSConcreteStackBlock;
            v190[1] = 3221225472;
            v190[2] = sub_1005A3CC8;
            v190[3] = &unk_1009A2D20;
            uint64_t v192 = a1;
            char v194 = v64;
            id v66 = v63;
            id v191 = v66;
            v193 = a2;
            sub_1000197D8(v65, v190);

            return;
          default:
            if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
              sub_10077BF98();
            }
            return;
        }
      }
    }
  }
}

void sub_1005893A8(_Unwind_Exception *a1)
{
  STACK[0x4C0] = (unint64_t)&STACK[0x5E0];
  sub_100441C40((void ***)&STACK[0x4C0]);
  _Unwind_Resume(a1);
}

void sub_100589830(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v15 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (!sub_1000198BC(value, 0, v4, v5, v6, v7, v8, v9, (uint64_t)"kCBMsgArgProgrammaticPairing"))
  {
    if (*(unsigned char *)(a1 + 185)) {
      BOOL v10 = v15 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    char v11 = !v10;
    uint64_t v12 = sub_100019878();
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    void v13[2] = sub_1005A3E24;
    v13[3] = &unk_100998A58;
    v13[4] = a1;
    char v14 = v11;
    sub_1000197D8(v12, v13);
    *(unsigned char *)(a1 + 168) = 1;
  }
}

void sub_100589910(uint64_t a1)
{
  uint64_t v2 = sub_100019878();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1005A3E90;
  uint64_t v3[3] = &unk_100997528;
  void v3[4] = a1;
  sub_1000197D8(v2, v3);
}

void sub_10058998C(uint64_t a1, void *a2)
{
  xpc_object_t v4 = xpc_array_create(0, 0);
  uint64_t v5 = sub_100019878();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_1005A3EF4;
  v8[3] = &unk_100998260;
  v8[4] = a1;
  void v8[5] = v4;
  sub_1000197D8(v5, v8);
  xpc_object_t reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    uint64_t v7 = reply;
    xpc_dictionary_set_value(reply, "kCBMsgArgDevices", v4);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v7);
    xpc_release(v7);
  }
  xpc_release(v4);
}

void sub_100589A60(uint64_t a1, xpc_object_t xdict)
{
  if (*(unsigned char *)(a1 + 185))
  {
    uint64_t v23 = 1;
    uint64_t v24 = 1;
    uint64_t v22 = 0;
    xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    uint64_t v5 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
    if (v5)
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
      }
      if (sub_10002F7F0((uint64_t)off_1009F7ED8, v5, *(void **)(a1 + 96), *(void **)(a1 + 48)))
      {
        xpc_object_t v6 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
        if (!sub_1000198BC(v6, 0, v7, v8, v9, v10, v11, v12, (uint64_t)"kCBMsgArgPairingOptionsUseMITMAuthentication"))
        {
          uint64_t v13 = sub_100019878();
          v17[0] = _NSConcreteStackBlock;
          v17[1] = 3221225472;
          _DWORD v17[2] = sub_1005A4064;
          v17[3] = &unk_1009A0A70;
          id v18 = v5;
          uint64_t v19 = v24;
          uint64_t v20 = v23;
          uint64_t v21 = v22;
          sub_1000197D8(v13, v17);
        }
      }
      else
      {
        char v14 = qword_100A19EC8;
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v15 = *(void *)(a1 + 96);
          uint64_t v16 = *(void *)(a1 + 48);
          *(_DWORD *)timeval buf = 138412802;
          uint64_t v26 = v15;
          __int16 v27 = 2112;
          uint64_t v28 = v16;
          __int16 v29 = 2112;
          unsigned int v30 = v5;
          _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
        }
      }
    }
  }
}

void sub_100589C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_100589CB8(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  xpc_object_t v6 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (!sub_1000198BC(v6, 1, v7, v8, v9, v10, v11, v12, (uint64_t)"kCBMsgArgPairingType") && v5)
  {
    *(void *)&long long v21 = 0;
    uint64_t v13 = sub_100019878();
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    void v14[2] = sub_1005A4160;
    v14[3] = &unk_1009A0A70;
    uint64_t v16 = a1;
    id v15 = v5;
    uint64_t v17 = v19;
    uint64_t v18 = v21;
    sub_1000197D8(v13, v14);
  }
}

void sub_10058A068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_10058A0C0(uint64_t a1, xpc_object_t xdict)
{
  if (*(unsigned char *)(a1 + 185))
  {
    xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    int v4 = sub_1002D4A5C(value, "kCBUnpairOptionForceDisconnect");
    uint64_t v5 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
    if (v5)
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
      }
      char v6 = sub_10002F7F0((uint64_t)off_1009F7ED8, v5, *(void **)(a1 + 96), *(void **)(a1 + 48));
      uint64_t v7 = qword_100A19EC8;
      if (v6)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v8 = (void *)(a1 + 56);
          if (*(char *)(a1 + 79) < 0) {
            uint64_t v8 = (void *)*v8;
          }
          *(_DWORD *)timeval buf = 136446722;
          uint64_t v17 = v8;
          if (v4) {
            uint64_t v9 = "YES";
          }
          else {
            uint64_t v9 = "NO";
          }
          __int16 v18 = 2112;
          uint64_t v19 = v5;
          __int16 v20 = 2080;
          long long v21 = v9;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" is asking to unpair device \"%@\" forceDisconnect:%s", buf, 0x20u);
        }
        uint64_t v10 = sub_100019878();
        v13[0] = _NSConcreteStackBlock;
        v13[1] = 3221225472;
        void v13[2] = sub_1005A41DC;
        v13[3] = &unk_100998BB0;
        id v14 = v5;
        char v15 = v4;
        sub_1000197D8(v10, v13);
      }
      else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v11 = *(void **)(a1 + 96);
        uint64_t v12 = *(void **)(a1 + 48);
        *(_DWORD *)timeval buf = 138412802;
        uint64_t v17 = v11;
        __int16 v18 = 2112;
        uint64_t v19 = v12;
        __int16 v20 = 2112;
        long long v21 = (const char *)v5;
        _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
      }
    }
  }
}

void sub_10058A314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_10058A33C(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v17 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int v4 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  sub_1000198BC(value, 0, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgUseOOBPairing");
  uint64_t v11 = sub_100019878();
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_1005A42BC;
  v13[3] = &unk_100998570;
  uint64_t v15 = a1;
  id v12 = v4;
  id v14 = v12;
  uint64_t v16 = v17;
  sub_1000197D8(v11, v13);
}

void sub_10058A444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_10058A464(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v15 = 0;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x2020000000;
  uint64_t v18 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  uint64_t v6 = sub_100019878();
  length_2[0] = _NSConcreteStackBlock;
  length_2[1] = 3221225472;
  length_2[2] = sub_1005A4334;
  length_2[3] = &unk_1009A9370;
  uint64_t v13 = &v15;
  uint64_t v14 = a1;
  id v7 = v5;
  id v12 = v7;
  sub_1000197D8(v6, length_2);
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = v16[3];
    if (v9)
    {
      __int16 length = 0;
      sub_1006FE6F4(v9, &length);
    }
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), reply);
    xpc_release(reply);
  }

  _Block_object_dispose(&v15, 8);
}

void sub_10058A5D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10058A614(uint64_t a1, xpc_object_t xdict)
{
  if (*(int *)(a1 + 80) >= 1)
  {
    xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    int v4 = sub_1002D49BC(value, "kCBMsgArgReasonEnum");
    int v5 = [v4 intValue];

    uint64_t v6 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077C16C(a1, v5, v6);
    }
  }
}

void sub_10058A6AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10058A6BC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int v5 = sub_100019738(value, "kCBMsgArgResourceKey");
  uint64_t v6 = sub_100019738(value, "kCBMsgArgResourceSubKey");
  if (*(int *)(a1 + 80) >= 1)
  {
    if (v5 && [v5 length])
    {
      if ([v5 isEqualToString:CBManagerResourceADVBufferCount])
      {
        uint64_t v7 = sub_100035F54();
        unsigned int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 704))(v7);
        if (qword_1009F85C8 != -1) {
          dispatch_once(&qword_1009F85C8, &stru_1009B7B88);
        }
        int64_t v9 = 0;
        int64_t v10 = v8;
        int64_t v11 = v8 - (unint64_t)sub_1006DFDF8((uint64_t)off_1009F85C0);
        goto LABEL_14;
      }
      if ([v5 isEqualToString:CBManagerResourceConnectionUsecaseCount])
      {
        id v14 = objc_alloc_init((Class)NSNumberFormatter);
        [v14 setNumberStyle:1];
        uint64_t v15 = [v14 numberFromString:v6];
        if (qword_1009FB270 != -1) {
          dispatch_once(&qword_1009FB270, &stru_1009B7BA8);
        }
        unsigned int v16 = sub_100735410(qword_1009FB268, [v15 unsignedIntegerValue]);
        if (qword_1009FB270 != -1) {
          dispatch_once(&qword_1009FB270, &stru_1009B7BA8);
        }
        int64_t v10 = v16;
        int64_t v11 = v16
            - (unint64_t)sub_100735630(qword_1009FB268, (int)[v15 unsignedIntegerValue]);

        int64_t v9 = 0;
        goto LABEL_14;
      }
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077C26C((uint64_t)v5);
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
    {
      sub_10077C238();
    }
    int64_t v10 = 0;
    int64_t v11 = 0;
    int64_t v9 = 3;
    goto LABEL_14;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
    sub_10077C2E4();
  }
  int64_t v10 = 0;
  int64_t v11 = 0;
  int64_t v9 = 17;
LABEL_14:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  uint64_t v13 = reply;
  if (reply)
  {
    xpc_dictionary_set_int64(reply, "kCBMsgArgResourceTotalCount", v10);
    xpc_dictionary_set_int64(v13, "kCBMsgArgResourceRemainingCount", v11);
    xpc_dictionary_set_int64(v13, "kCBMsgArgResult", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v13);
    xpc_release(v13);
  }
}

void sub_10058A9D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10058AA10(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int v5 = sub_100019738(value, "kCBMsgArgApplicationID");
  uint64_t v11 = 0;
  id v12 = &v11;
  uint64_t v13 = 0x2020000000;
  xpc_object_t reply = 0;
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (v12[3])
  {
    uint64_t v6 = sub_100019878();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    void v7[2] = sub_1005A4998;
    v7[3] = &unk_1009B7308;
    uint64_t v10 = a1;
    id v8 = v5;
    int64_t v9 = &v11;
    sub_100013018(v6, v7);
  }
  _Block_object_dispose(&v11, 8);
}

void sub_10058AB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10058AB4C(uint64_t a1, xpc_object_t xdict)
{
  id v40 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int v11 = sub_1000198BC(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgOptions");
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (*(int *)(a1 + 80) >= 1
    && ([&off_1009E1960 containsObject:*(void *)(a1 + 96)] & 1) != 0)
  {
    if (reply && !v11)
    {
      int v35 = sub_1002D500C(v40, "kCBOptionStateDetailList");
      if (v35 && [v35 count])
      {
        int64_t v34 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [v35 count]);
        if ([v35 containsObject:@"kCBMsgArgIsA2DPSessionActive"])
        {
          uint64_t v13 = +[NSNumber numberWithInt:0];
          [v34 addObject:v13];
        }
        if ([v35 containsObject:@"kCBMsgArgIsHFPSessionActive"])
        {
          id v14 = +[NSNumber numberWithInt:1];
          [v34 addObject:v14];
        }
        if ([v35 containsObject:@"kCBMsgArgIsISOPipeSessionActive"])
        {
          uint64_t v15 = +[NSNumber numberWithInt:2];
          [v34 addObject:v15];
        }
        if ([v35 containsObject:@"kCBMsgArgIsLEASessionActive"])
        {
          unsigned int v16 = +[NSNumber numberWithInt:3];
          [v34 addObject:v16];
        }
        if ([v35 containsObject:@"kCBMsgArgIsWatchConnected"])
        {
          uint64_t v17 = +[NSNumber numberWithInt:4];
          [v34 addObject:v17];
        }
        if ([v35 containsObject:@"kCBMsgArgClassicDevicesConnectedCount"])
        {
          uint64_t v18 = +[NSNumber numberWithInt:5];
          [v34 addObject:v18];
        }
        if ([v35 containsObject:@"kCBMsgArgLeDevicesConnectedCount"])
        {
          uint64_t v19 = +[NSNumber numberWithInt:6];
          [v34 addObject:v19];
        }
        if ([v35 containsObject:@"kCBMsgArgClassicHIDDevicesConnectedCount"])
        {
          __int16 v20 = +[NSNumber numberWithInt:7];
          [v34 addObject:v20];
        }
        if ([v35 containsObject:@"kCBMsgArgLeHIDDevicesConnectedCount"])
        {
          long long v21 = +[NSNumber numberWithInt:8];
          [v34 addObject:v21];
        }
        if ([v35 containsObject:@"kCBMsgArgIsConnectionPrioritizationSupported"])
        {
          uint64_t v22 = +[NSNumber numberWithInt:9];
          [v34 addObject:v22];
        }
        if ([v35 containsObject:@"kCBMsgArgIsProtectLEA"])
        {
          uint64_t v23 = +[NSNumber numberWithInt:10];
          [v34 addObject:v23];
        }
        uint64_t v24 = objc_opt_new();
        uint64_t v25 = sub_100050530();
        (*(void (**)(uint64_t, void *, void *))(*(void *)v25 + 624))(v25, v34, v24);
        if ([v24 count])
        {
          long long v38 = 0u;
          long long v39 = 0u;
          long long v36 = 0u;
          long long v37 = 0u;
          id v26 = v24;
          id v27 = [v26 countByEnumeratingWithState:&v36 objects:v41 count:16];
          if (v27)
          {
            uint64_t v28 = *(void *)v37;
            do
            {
              for (int i = 0; i != v27; int i = (char *)i + 1)
              {
                if (*(void *)v37 != v28) {
                  objc_enumerationMutation(v26);
                }
                unsigned int v30 = *(void **)(*((void *)&v36 + 1) + 8 * i);
                switch([v30 intValue])
                {
                  case 0u:
                    uint64_t v31 = [v26 objectForKeyedSubscript:v30];
                    xpc_dictionary_set_BOOL(reply, "kCBMsgArgIsA2DPSessionActive", (BOOL)[v31 BOOLValue]);
                    goto LABEL_47;
                  case 1u:
                    uint64_t v31 = [v26 objectForKeyedSubscript:v30];
                    xpc_dictionary_set_BOOL(reply, "kCBMsgArgIsHFPSessionActive", (BOOL)[v31 BOOLValue]);
                    goto LABEL_47;
                  case 2u:
                    uint64_t v31 = [v26 objectForKeyedSubscript:v30];
                    xpc_dictionary_set_BOOL(reply, "kCBMsgArgIsISOPipeSessionActive", (BOOL)[v31 BOOLValue]);
                    goto LABEL_47;
                  case 3u:
                    uint64_t v31 = [v26 objectForKeyedSubscript:v30];
                    xpc_dictionary_set_BOOL(reply, "kCBMsgArgIsLEASessionActive", (BOOL)[v31 BOOLValue]);
                    goto LABEL_47;
                  case 4u:
                    uint64_t v31 = [v26 objectForKeyedSubscript:v30];
                    xpc_dictionary_set_BOOL(reply, "kCBMsgArgIsWatchConnected", (BOOL)[v31 BOOLValue]);
                    goto LABEL_47;
                  case 5u:
                    uint64_t v31 = [v26 objectForKeyedSubscript:v30];
                    xpc_dictionary_set_int64(reply, "kCBMsgArgClassicDevicesConnectedCount", (int)[v31 intValue]);
                    goto LABEL_47;
                  case 6u:
                    uint64_t v31 = [v26 objectForKeyedSubscript:v30];
                    xpc_dictionary_set_int64(reply, "kCBMsgArgLeDevicesConnectedCount", (int)[v31 intValue]);
                    goto LABEL_47;
                  case 7u:
                    uint64_t v31 = [v26 objectForKeyedSubscript:v30];
                    xpc_dictionary_set_int64(reply, "kCBMsgArgClassicHIDDevicesConnectedCount", (int)[v31 intValue]);
                    goto LABEL_47;
                  case 8u:
                    uint64_t v31 = [v26 objectForKeyedSubscript:v30];
                    xpc_dictionary_set_int64(reply, "kCBMsgArgLeHIDDevicesConnectedCount", (int)[v31 intValue]);
                    goto LABEL_47;
                  case 9u:
                    uint64_t v31 = [v26 objectForKeyedSubscript:v30];
                    xpc_dictionary_set_BOOL(reply, "kCBMsgArgIsConnectionPrioritizationSupported", (BOOL)[v31 BOOLValue]);
                    goto LABEL_47;
                  case 0xAu:
                    uint64_t v31 = [v26 objectForKeyedSubscript:v30];
                    xpc_dictionary_set_BOOL(reply, "kCBMsgArgIsProtectLEA", (BOOL)[v31 BOOLValue]);
LABEL_47:

                    break;
                  default:
                    continue;
                }
              }
              id v27 = [v26 countByEnumeratingWithState:&v36 objects:v41 count:16];
            }
            while (v27);
          }

          int64_t v32 = 0;
        }
        else
        {
          if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
            sub_10077C400();
          }
          int64_t v32 = 3;
        }
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
          sub_10077C3CC();
        }
        int64_t v32 = 3;
      }
      xpc_dictionary_set_int64(reply, "kCBMsgArgResult", v32);
      xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), reply);
      xpc_release(reply);
    }
  }
  else
  {
    int64_t v33 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077C318(a1, v33);
    }
    if (reply)
    {
      xpc_dictionary_set_int64(reply, "kCBMsgArgResult", 13);
      xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), reply);
      xpc_release(reply);
    }
  }
}

void sub_10058B33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_10058B4CC()
{
  v2[0] = 0;
  v2[1] = v2;
  v2[2] = 0x2020000000;
  int v3 = 0;
  uint64_t v0 = 0;
  uint64_t v1 = 0;
  operator new();
}

void sub_10058B75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, atomic_uint *a11, ...)
{
  va_start(va, a11);

  if (a11) {
    sub_1000368F4(a11);
  }
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10058B7E4(uint64_t a1)
{
  uint64_t v2 = sub_100019878();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1005A68AC;
  uint64_t v3[3] = &unk_100997528;
  void v3[4] = a1;
  sub_1000197D8(v2, v3);
  sub_1000173FC(a1, 48, 0, 0);
}

void sub_10058B874(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v22 = 0;
  uint64_t v23 = &v22;
  uint64_t v24 = 0x2020000000;
  int v25 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = &off_100998428;
  *(_OWORD *)uint64_t v18 = 0u;
  long long v19 = 0u;
  __int16 v20 = &off_100998428;
  long long v21 = 0;
  if (*(int *)(a1 + 80) > 1)
  {
    xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    int v4 = sub_1005A6910(a1, value, (uint64_t)&v16);
    *((_DWORD *)v23 + 6) = v4;
    if (v4)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077C4D0();
      }
    }
    else
    {
      uint64_t v5 = sub_100019878();
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3321888768;
      void v7[2] = sub_1005A6C94;
      v7[3] = &unk_1009B7368;
      void v7[4] = &v22;
      void v7[5] = a1;
      int v8 = v16;
      uint64_t v9 = &off_100998428;
      uint64_t v10 = (atomic_uint *)v18[0];
      if (v18[0]) {
        sub_100037354((uint64_t)v18[0]);
      }
      std::string __p = 0;
      id v12 = 0;
      uint64_t v13 = 0;
      sub_100037564((char *)&__p, (long long *)v18[1], (long long *)v19, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - (unint64_t)v18[1]) >> 2));
      id v14 = &off_100998428;
      uint64_t v15 = v21;
      if (v21) {
        sub_100037354((uint64_t)v21);
      }
      sub_1000197D8(v5, v7);
      id v14 = &off_100998428;
      if (v15) {
        sub_1000368F4(v15);
      }
      if (__p)
      {
        id v12 = __p;
        operator delete(__p);
      }
      uint64_t v9 = &off_100998428;
      if (v10) {
        sub_1000368F4(v10);
      }
    }
    xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_int64(v6, "kCBMsgArgResult", *((int *)v23 + 6));
    sub_1000173FC(a1, 49, v6, 1);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077C49C();
  }
  __int16 v20 = &off_100998428;
  if (v21) {
    sub_1000368F4(v21);
  }
  if (v18[1])
  {
    *(void **)&long long v19 = v18[1];
    operator delete(v18[1]);
  }
  uint64_t v17 = &off_100998428;
  if (v18[0]) {
    sub_1000368F4((atomic_uint *)v18[0]);
  }
  _Block_object_dispose(&v22, 8);
}

void sub_10058BB54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, atomic_uint *a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    sub_1000368F4(a17);
  }
  sub_1005A6E90(&a23);
  _Block_object_dispose((const void *)(v23 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10058BBB8(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v22 = 0;
  uint64_t v23 = &v22;
  uint64_t v24 = 0x2020000000;
  int v25 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = &off_100998428;
  *(_OWORD *)uint64_t v18 = 0u;
  long long v19 = 0u;
  __int16 v20 = &off_100998428;
  long long v21 = 0;
  if (*(int *)(a1 + 80) > 1)
  {
    xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    int v4 = sub_1005A6910(a1, value, (uint64_t)&v16);
    *((_DWORD *)v23 + 6) = v4;
    uint64_t v5 = sub_100019878();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3321888768;
    void v7[2] = sub_1005A6F1C;
    v7[3] = &unk_1009B7368;
    void v7[4] = &v22;
    void v7[5] = a1;
    int v8 = v16;
    uint64_t v9 = &off_100998428;
    uint64_t v10 = (atomic_uint *)v18[0];
    if (v18[0]) {
      sub_100037354((uint64_t)v18[0]);
    }
    std::string __p = 0;
    id v12 = 0;
    uint64_t v13 = 0;
    sub_100037564((char *)&__p, (long long *)v18[1], (long long *)v19, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - (unint64_t)v18[1]) >> 2));
    id v14 = &off_100998428;
    uint64_t v15 = v21;
    if (v21) {
      sub_100037354((uint64_t)v21);
    }
    sub_1000197D8(v5, v7);
    xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_int64(v6, "kCBMsgArgResult", *((int *)v23 + 6));
    sub_1000173FC(a1, 50, v6, 1);
    id v14 = &off_100998428;
    if (v15) {
      sub_1000368F4(v15);
    }
    if (__p)
    {
      id v12 = __p;
      operator delete(__p);
    }
    uint64_t v9 = &off_100998428;
    if (v10) {
      sub_1000368F4(v10);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077C538();
  }
  __int16 v20 = &off_100998428;
  if (v21) {
    sub_1000368F4(v21);
  }
  if (v18[1])
  {
    *(void **)&long long v19 = v18[1];
    operator delete(v18[1]);
  }
  uint64_t v17 = &off_100998428;
  if (v18[0]) {
    sub_1000368F4((atomic_uint *)v18[0]);
  }
  _Block_object_dispose(&v22, 8);
}

void sub_10058BE64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, atomic_uint *a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    sub_1000368F4(a17);
  }
  sub_1005A6E90(&a23);
  _Block_object_dispose((const void *)(v23 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10058BEC8(uint64_t a1, void *a2)
{
  uint64_t v24 = 0;
  int v25 = &v24;
  uint64_t v26 = 0x2020000000;
  int v27 = 0;
  int64_t v23 = 0;
  long long v29 = 0uLL;
  int v30 = 0;
  sub_10071D13C(&v29);
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  long long v19 = 0;
  __int16 v20 = 0;
  std::string __p = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v4 = sub_100050530();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)v4 + 632))(v4, *(void *)(a1 + 96), 3);
  xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  int v12 = sub_1000198BC(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgAttributeID");
  *((_DWORD *)v25 + 6) = v12;
  if (v12)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077C5C8();
    }
  }
  else
  {
    if (qword_1009FB230 != -1) {
      dispatch_once(&qword_1009FB230, &stru_1009B7BC8);
    }
    if (sub_100425420(qword_1009FB228, (unsigned __int8 *)&v29, *(unsigned __int8 *)(a1 + 183))) {
      operator new();
    }
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = (void *)(a1 + 56);
      if (*(char *)(a1 + 79) < 0) {
        uint64_t v13 = (void *)*v13;
      }
      sub_1000417A8((uint64_t)&v29, v15);
      sub_10077C56C((uint64_t)v13, (uint64_t)v15, (uint64_t)v28);
    }
    *((_DWORD *)v25 + 6) = 905;
  }
  xpc_object_t v14 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(v14, "kCBMsgArgAttributeID", v23);
  xpc_dictionary_set_int64(v14, "kCBMsgArgResult", *((int *)v25 + 6));
  sub_1000173FC(a1, 51, v14, 1);
  if (__p)
  {
    uint64_t v17 = __p;
    operator delete(__p);
  }
  if (v19)
  {
    __int16 v20 = v19;
    operator delete(v19);
  }
  _Block_object_dispose(&v24, 8);
}

void sub_10058C380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (__p) {
    operator delete(__p);
  }
  long long v38 = *(void **)(v36 - 200);
  if (v38)
  {
    *(void *)(v36 - 192) = v38;
    operator delete(v38);
  }
  _Block_object_dispose((const void *)(v36 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_10058C3FC(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v12 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (!sub_1000198BC(value, 1, v4, v5, v6, v7, v8, v9, (uint64_t)"kCBMsgArgAttributeID"))
  {
    uint64_t v10 = sub_100019878();
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    void v11[2] = sub_1005A7614;
    uint64_t v11[3] = &unk_100998260;
    v11[4] = a1;
    void v11[5] = v12;
    sub_1000197D8(v10, v11);
  }
}

void sub_10058C4C0(uint64_t a1)
{
  uint64_t v2 = sub_100019878();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1005A7680;
  uint64_t v3[3] = &unk_100997528;
  void v3[4] = a1;
  sub_1000197D8(v2, v3);
}

void sub_10058C53C(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v15 = &off_100998428;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (!sub_1000198BC(value, 1, v4, v5, v6, v7, v8, v9, (uint64_t)"kCBMsgArgTransactionID"))
  {
    uint64_t v10 = sub_100019878();
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3321888768;
    void v11[2] = sub_1005A76E4;
    uint64_t v11[3] = &unk_1009B7398;
    v11[4] = a1;
    void v11[5] = v19;
    void v11[6] = v17;
    uint64_t v12 = &off_100998428;
    uint64_t v13 = v16;
    uint64_t v14 = v18;
    sub_1000197D8(v10, v11);
    uint64_t v12 = &off_100998428;
    if (v13) {
      sub_1000368F4(v13);
    }
  }
  uint64_t v15 = &off_100998428;
  if (v16) {
    sub_1000368F4(v16);
  }
}

void sub_10058C6D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,atomic_uint *a30)
{
  if (a30) {
    sub_1000368F4(a30);
  }
  *(void *)(v31 - 72) = v30;
  int64_t v33 = *(atomic_uint **)(v31 - 64);
  if (v33) {
    sub_1000368F4(v33);
  }
  _Unwind_Resume(exception_object);
}

void sub_10058C70C(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v18 = &off_100998428;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v4 = sub_1002D4B14(value, "kCBMsgArgUUIDs");
  if (!sub_1000198BC(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgAttributeID") && v4)
  {
    uint64_t v11 = sub_100019878();
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3321888768;
    void v12[2] = sub_1005A77C4;
    v12[3] = &unk_1009B73D0;
    uint64_t v14 = a1;
    id v13 = v4;
    uint64_t v15 = v20;
    uint64_t v16 = &off_100998428;
    uint64_t v17 = v19;
    sub_1000197D8(v11, v12);
    uint64_t v16 = &off_100998428;
    if (v17) {
      sub_1000368F4(v17);
    }
  }
  uint64_t v18 = &off_100998428;
  if (v19) {
    sub_1000368F4(v19);
  }
}

void sub_10058C8B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  *(void *)(v23 - 72) = v21;
  int v25 = *(atomic_uint **)(v23 - 64);
  if (v25) {
    sub_1000368F4(v25);
  }
  _Unwind_Resume(a1);
}

void sub_10058C90C(uint64_t a1, void *a2)
{
  int v4 = *(unsigned __int8 *)(sub_10003FB34() + 160);
  xpc_object_t reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    uint64_t v6 = reply;
    xpc_dictionary_set_BOOL(reply, "kCBMsgArgData", v4 != 0);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v6);
    xpc_release(v6);
  }
}

void sub_10058C994(int a1, xpc_object_t xdict)
{
  uint64_t v12 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v10 = 0;
  id v11 = 0;
  sub_1000198BC(value, 1, v3, v4, v5, v6, v7, v8, (uint64_t)"kCBMsgArgDeviceUUID");
  uint64_t v9 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)timeval buf = 134218242;
    uint64_t v14 = v12;
    __int16 v15 = 2112;
    id v16 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Enable private mode for time %lld for client session : %@", buf, 0x16u);
  }
}

void sub_10058CC78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  _Unwind_Resume(a1);
}

void sub_10058CCC4(uint64_t a1, void *a2)
{
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v26 = 0;
  uint64_t v4 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)timeval buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Publish L2CAP channel request", buf, 2u);
  }
  uint64_t v5 = sub_100050530();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)v5 + 632))(v5, *(void *)(a1 + 96), 5);
  xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  if (!sub_1000198BC(value, 1, v7, v8, v9, v10, v11, v12, (uint64_t)"kCBMsgArgPSM"))
  {
    uint64_t v24 = 0;
    *(void *)timeval buf = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v21 = 0;
    if (!sub_1000198BC(v26, 0, v13, v14, v15, v16, v17, v18, (uint64_t)"kCBL2CAPChannelInMTU")
      && (v27 & 0x8000000000000000) == 0
      && v27 < 0x10000)
    {
      uint64_t v19 = sub_100019878();
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_1005A7A94;
      v20[3] = &unk_1009A6C88;
      uint8_t v20[4] = a1;
      v20[5] = v27;
      v20[6] = v28;
      v20[7] = *(void *)buf;
      v20[8] = v24;
      v20[9] = v23;
      v20[10] = v22;
      v20[11] = v21;
      sub_1000197D8(v19, v20);
    }
  }
}

void sub_10058CEF0(uint64_t a1, void *a2)
{
  uint64_t v15 = 0;
  uint64_t v4 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)timeval buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Unpublish L2CAP channel request", buf, 2u);
  }
  xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  if (!sub_1000198BC(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgPSM")
    && (v15 & 0x8000000000000000) == 0
    && v15 < 0x10000)
  {
    uint64_t v12 = sub_100019878();
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    void v13[2] = sub_1005A7B34;
    v13[3] = &unk_100998260;
    void v13[4] = a1;
    void v13[5] = v15;
    sub_1000197D8(v12, v13);
  }
}

void sub_10058D010(uint64_t a1, void *a2)
{
  uint64_t v4 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)timeval buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Override local LE Address", buf, 2u);
  }
  xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  uint64_t v6 = sub_100019738(value, "kCBMsgArgAddressString");
  uint64_t v7 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)timeval buf = 138412290;
    uint64_t v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Address is %@", buf, 0xCu);
  }
  if ([v6 length] && *(_DWORD *)(a1 + 80) == 2)
  {
    uint64_t v8 = sub_100019878();
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_1005A7BA0;
    v9[3] = &unk_100997450;
    id v10 = v6;
    sub_1000197D8(v8, v9);
  }
}

void sub_10058D1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10058D1CC(uint64_t a1, void *a2)
{
  if (*(int *)(a1 + 80) <= 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077C5FC();
    }
  }
  else if (_os_feature_enabled_impl())
  {
    xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    xpc_object_t array = xpc_dictionary_get_array(value, "kCBMsgArgData");
    if (array)
    {
      uint64_t v5 = array;
      if (xpc_get_type(array) == (xpc_type_t)&_xpc_type_array)
      {
        v7[0] = 0;
        v7[1] = v7;
        void v7[2] = 0x2020000000;
        char v8 = 0;
        applier[0] = _NSConcreteStackBlock;
        applier[1] = 3221225472;
        applier[2] = sub_1005A7C0C;
        applier[3] = &unk_1009A94B0;
        applier[4] = v7;
        xpc_array_apply(v5, applier);
        if (qword_1009F8758 != -1) {
          dispatch_once(&qword_1009F8758, &stru_1009B7B68);
        }
        sub_10026AD7C((uint64_t)off_1009F8750, 0xFFu, 0, -1);
        _Block_object_dispose(v7, 8);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077C630();
  }
}

void sub_10058D35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10058D374(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v4 = sub_1002D4930(value, "kCBMsgArgAddressBytes");
  id v5 = [v4 copy];

  uint64_t v6 = (uint64_t *)(a1 + 96);
  if ([&off_1009E1978 containsObject:*(void *)(a1 + 96)])
  {
    if ([v5 length] == (id)6 || objc_msgSend(v5, "length") == (id)7)
    {
      *(_DWORD *)&v18[3] = 0;
      *(_DWORD *)uint64_t v18 = 0;
      if ([v5 length] == (id)6)
      {
        uint64_t v7 = 0;
        v18[0] = 1;
      }
      else
      {
        uint64_t v7 = 1;
        [v5 getBytes:v18 length:1];
      }
      [v5 getBytes:&v18[1] range:v7];
      if (*(_DWORD *)(a1 + 80) == 2)
      {
        uint64_t v8 = v18[1];
        uint64_t v9 = v18[2];
        uint64_t v10 = v18[3];
        uint64_t v11 = v18[4];
        uint64_t v12 = v18[5];
        uint64_t v13 = v18[6];
        uint64_t v14 = v18[0];
        uint64_t v15 = sub_100019878();
        v17[0] = _NSConcreteStackBlock;
        v17[1] = 3221225472;
        _DWORD v17[2] = sub_1005A7F28;
        v17[3] = &unk_100997528;
        void v17[4] = (v8 << 40) | (v9 << 32) | (v10 << 24) | (v11 << 16) | (v12 << 8) | v13 | (v14 << 48);
        sub_1000197D8(v15, v17);
      }
    }
    else
    {
      uint64_t v16 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077C664(v6, (uint64_t)v18, (uint64_t)[v5 length], v16);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077C6B4();
  }
}

void sub_10058D5A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10058D5D4(uint64_t a1, xpc_object_t original)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  xpc_object_t reply = 0;
  xpc_object_t reply = xpc_dictionary_create_reply(original);
  if (*(int *)(a1 + 80) >= 1
    && ([&off_1009E1990 containsObject:*(void *)(a1 + 96)] & 1) != 0)
  {
    if (qword_1009F8248 != -1) {
      dispatch_once(&qword_1009F8248, &stru_1009B7B48);
    }
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    void v4[2] = sub_1005A7F8C;
    v4[3] = &unk_1009A7698;
    v4[4] = &v6;
    void v4[5] = a1;
    sub_10065D70C((uint64_t)off_1009F8240, v4);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
    {
      sub_10003AE4C(*(void *)(a1 + 128), (uint64_t)v5);
      sub_10077C71C();
    }
    uint64_t v3 = (void *)v7[3];
    if (v3)
    {
      xpc_dictionary_set_int64(v3, "kCBMsgArgResult", 13);
      xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), (xpc_object_t)v7[3]);
      xpc_release((xpc_object_t)v7[3]);
    }
  }
  _Block_object_dispose(&v6, 8);
}

void sub_10058D774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10058D79C(uint64_t a1, xpc_object_t original)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  xpc_object_t reply = 0;
  xpc_object_t reply = xpc_dictionary_create_reply(original);
  if (*(int *)(a1 + 80) >= 1
    && ([&off_1009E19A8 containsObject:*(void *)(a1 + 96)] & 1) != 0)
  {
    if (qword_1009F8248 != -1) {
      dispatch_once(&qword_1009F8248, &stru_1009B7B48);
    }
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    void v4[2] = sub_1005A800C;
    v4[3] = &unk_1009B7430;
    v4[4] = &v6;
    void v4[5] = a1;
    sub_10065D834((uint64_t)off_1009F8240, v4);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
    {
      sub_10003AE4C(*(void *)(a1 + 128), (uint64_t)v5);
      sub_10077C774();
    }
    uint64_t v3 = (void *)v7[3];
    if (v3)
    {
      xpc_dictionary_set_int64(v3, "kCBMsgArgResult", 13);
      xpc_dictionary_set_int64((xpc_object_t)v7[3], "kCBMsgArgTimeoutInMS", 0);
      xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), (xpc_object_t)v7[3]);
      xpc_release((xpc_object_t)v7[3]);
    }
  }
  _Block_object_dispose(&v6, 8);
}

void sub_10058D954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10058D97C(uint64_t a1, void *a2)
{
  xxpc_object_t array = xpc_array_create(0, 0);
  xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  id v5 = sub_1002D4B14(value, "kCBMsgArgUUIDs");
  if (v5)
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    sub_1006BEDA4((uint64_t)off_1009F7ED8);
    uint64_t v19 = v5;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    id v6 = v5;
    id v7 = [v6 countByEnumeratingWithState:&v21 objects:v27 count:16];
    if (v7)
    {
      uint64_t v8 = *(void *)v22;
      do
      {
        uint64_t v9 = 0;
        do
        {
          if (*(void *)v22 != v8) {
            objc_enumerationMutation(v6);
          }
          uint64_t v10 = *(void **)(*((void *)&v21 + 1) + 8 * (void)v9);
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
          }
          if (!sub_1006BB9D4((uint64_t)off_1009F7ED8, v10))
          {
            uint64_t v12 = qword_100A19EC8;
            if (!os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
              goto LABEL_26;
            }
            *(_DWORD *)timeval buf = 138412290;
            uint64_t v26 = v10;
            uint64_t v13 = v12;
            uint64_t v14 = "Device %@ does not exist";
            goto LABEL_25;
          }
          if (qword_1009F8788 != -1) {
            dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
          }
          if ((sub_1002F56BC((uint64_t)off_1009F8780, *(void *)(a1 + 128), v10) & 1) == 0)
          {
            uint64_t v15 = qword_100A19EC8;
            if (!os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
              goto LABEL_26;
            }
            *(_DWORD *)timeval buf = 138412290;
            uint64_t v26 = v10;
            uint64_t v13 = v15;
            uint64_t v14 = "Cannot access device %@";
            goto LABEL_25;
          }
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
          }
          if (sub_10002F7F0((uint64_t)off_1009F7ED8, v10, *(void **)(a1 + 96), *(void **)(a1 + 48)))
          {
            xpc_object_t v11 = sub_10002FB38(v10, *(unsigned __int8 *)(a1 + 168), *(_DWORD *)(a1 + 80));
            xpc_array_append_value(xarray, v11);
            xpc_release(v11);
            goto LABEL_26;
          }
          uint64_t v16 = qword_100A19EC8;
          if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)timeval buf = 138412290;
            uint64_t v26 = v10;
            uint64_t v13 = v16;
            uint64_t v14 = "Session not allowed for device %@";
LABEL_25:
            _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, v14, buf, 0xCu);
          }
LABEL_26:
          uint64_t v9 = (char *)v9 + 1;
        }
        while (v7 != v9);
        id v7 = [v6 countByEnumeratingWithState:&v21 objects:v27 count:16];
      }
      while (v7);
    }

    id v5 = v19;
  }
  xpc_object_t reply = xpc_dictionary_create_reply(a2);
  uint64_t v18 = reply;
  if (reply)
  {
    xpc_dictionary_set_value(reply, "kCBMsgArgDevices", xarray);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v18);
    xpc_release(v18);
  }
  xpc_release(xarray);
}

void sub_10058DCE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_10058DD20(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v5 = sub_1002D48BC(value, "kCBMsgArgUUID");
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
  }
  BOOL v6 = sub_1006BB9D4((uint64_t)off_1009F7ED8, v5);
  if (!v6 && os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
    sub_10077C868();
  }
  if (*(int *)(a1 + 80) >= 1 && *(unsigned char *)(a1 + 182))
  {
    uint64_t v13 = 0;
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009B7AC8);
    }
    id v7 = off_1009F7EB8;
    sub_1000305AC(v14, v5);
    sub_1006856B8((uint64_t)v7, v14, &v13);
    if (v13) {
      BOOL v8 = v6;
    }
    else {
      BOOL v8 = 0;
    }
    if (v8)
    {
      int64_t v9 = *v13;
      xpc_object_t reply = xpc_dictionary_create_reply(xdict);
      xpc_object_t v11 = reply;
      if (reply)
      {
        xpc_dictionary_set_int64(reply, "kCBMsgArgConnectionHandle", v9);
        xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v11);
        xpc_release(v11);
        goto LABEL_22;
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
    {
      sub_10077C800();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077C7CC();
  }
  xpc_object_t v12 = xpc_dictionary_create_reply(xdict);
  if (v12)
  {
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v12);
    xpc_release(v12);
  }
LABEL_22:
}

void sub_10058DF34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10058DF58(uint64_t a1, void *a2)
{
  xpc_object_t v4 = xpc_array_create(0, 0);
  xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  BOOL v6 = sub_1002D500C(value, "kCBMsgArgTags");
  id v7 = objc_opt_new();
  uint64_t v8 = sub_100019878();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_1005AE12C;
  uint64_t v11[3] = &unk_1009B77B0;
  uint64_t v14 = a1;
  id v9 = v6;
  id v12 = v9;
  id v10 = v7;
  id v13 = v10;
  xpc_object_t v15 = v4;
  uint64_t v16 = a2;
  sub_1000197D8(v8, v11);
}

void sub_10058E070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_10058E0A4(uint64_t a1, void *a2)
{
  xpc_object_t v4 = xpc_array_create(0, 0);
  xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  v17[0] = 0;
  v17[1] = v17;
  _DWORD v17[2] = 0x2020000000;
  xpc_object_t reply = 0;
  xpc_object_t reply = xpc_dictionary_create_reply(a2);
  BOOL v6 = sub_1002D500C(value, "kCBMsgArgCustomProperties");
  id v7 = objc_opt_new();
  uint64_t v8 = sub_100019878();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_1005AE55C;
  uint64_t v11[3] = &unk_1009B77D8;
  uint64_t v15 = a1;
  id v9 = v7;
  id v12 = v9;
  id v10 = v6;
  xpc_object_t v16 = v4;
  id v13 = v10;
  uint64_t v14 = v17;
  sub_1000197D8(v8, v11);

  _Block_object_dispose(v17, 8);
}

void sub_10058E1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10058E238(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v5 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  if (v5)
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    if (sub_10002F7F0((uint64_t)off_1009F7ED8, v5, *(void **)(a1 + 96), *(void **)(a1 + 48)))
    {
      int v6 = *(_DWORD *)(a1 + 80);
      if (v6 > 1 || v6 == 1 && sub_100014448())
      {
        uint64_t v7 = sub_100019878();
        v13[0] = _NSConcreteStackBlock;
        v13[1] = 3221225472;
        void v13[2] = sub_1005AE8B0;
        v13[3] = &unk_100998570;
        uint64_t v15 = a1;
        id v14 = v5;
        xpc_object_t v16 = xdict;
        sub_1000197D8(v7, v13);
      }
      else
      {
        id v10 = qword_100A19EC8;
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)timeval buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "No privileges for running retrievePairingInfoForPeripheral without proper entitlement", buf, 2u);
        }
      }
    }
    else
    {
      uint64_t v8 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v11 = *(void *)(a1 + 96);
        uint64_t v12 = *(void *)(a1 + 48);
        *(_DWORD *)timeval buf = 138412802;
        uint64_t v18 = v11;
        __int16 v19 = 2112;
        uint64_t v20 = v12;
        __int16 v21 = 2112;
        long long v22 = v5;
        _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077C8D0();
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), reply);
    xpc_release(reply);
  }
}

void sub_10058E4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10058E4D0(uint64_t a1, void *a2)
{
  xpc_object_t v4 = xpc_array_create(0, 0);
  unsigned int v43 = 0;
  unsigned int v44 = 0;
  unint64_t v45 = 0;
  uint64_t v42 = 0;
  xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  if (!sub_1000198BC(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgUUIDs"))
  {
    long long v39 = 0;
    id v40 = 0;
    uint64_t v41 = 0;
    sub_100037564((char *)&v39, v43, v44, 0xCCCCCCCCCCCCCCCDLL * (((char *)v44 - (char *)v43) >> 2));
    unsigned int v44 = v43;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG)) {
      sub_10077C904();
    }
    uint64_t v12 = v39;
    id v13 = v40;
    if (v39 != v40)
    {
      do
      {
        sub_1000417A8((uint64_t)v12, __p);
        if (v38 >= 0) {
          id v14 = __p;
        }
        else {
          id v14 = (void **)__p[0];
        }
        uint64_t v15 = +[NSString stringWithUTF8String:v14];
        if (v38 < 0) {
          operator delete(__p[0]);
        }
        if (qword_1009F8788 != -1) {
          dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
        }
        if (sub_10030747C((uint64_t)off_1009F8780, *(void *)(a1 + 128), v15))
        {
          xpc_object_t v16 = v44;
          if ((unint64_t)v44 >= v45)
          {
            unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v44 - (char *)v43) >> 2);
            unint64_t v20 = v19 + 1;
            if (v19 + 1 > 0xCCCCCCCCCCCCCCCLL) {
              abort();
            }
            if (0x999999999999999ALL * ((uint64_t)(v45 - (void)v43) >> 2) > v20) {
              unint64_t v20 = 0x999999999999999ALL * ((uint64_t)(v45 - (void)v43) >> 2);
            }
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v45 - (void)v43) >> 2) >= 0x666666666666666) {
              unint64_t v21 = 0xCCCCCCCCCCCCCCCLL;
            }
            else {
              unint64_t v21 = v20;
            }
            if (v21) {
              long long v22 = (char *)sub_10003767C((uint64_t)&v45, v21);
            }
            else {
              long long v22 = 0;
            }
            long long v23 = &v22[20 * v19];
            long long v24 = *(_OWORD *)v12;
            *((_DWORD *)v23 + 4) = v12[4];
            *(_OWORD *)long long v23 = v24;
            uint64_t v26 = v43;
            int v25 = v44;
            uint64_t v27 = v23;
            if (v44 != v43)
            {
              do
              {
                long long v28 = *(long long *)((char *)v25 - 20);
                *((_DWORD *)v27 - 1) = *((_DWORD *)v25 - 1);
                *(_OWORD *)(v27 - 20) = v28;
                v27 -= 20;
                int v25 = (long long *)((char *)v25 - 20);
              }
              while (v25 != v26);
              int v25 = v43;
            }
            uint64_t v18 = (long long *)(v23 + 20);
            unsigned int v43 = (long long *)v27;
            unsigned int v44 = (long long *)(v23 + 20);
            unint64_t v45 = (unint64_t)&v22[20 * v21];
            if (v25) {
              operator delete(v25);
            }
          }
          else
          {
            long long v17 = *(_OWORD *)v12;
            *((_DWORD *)v44 + 4) = v12[4];
            long long *v16 = v17;
            uint64_t v18 = (long long *)((char *)v16 + 20);
          }
          unsigned int v44 = v18;
        }

        v12 += 5;
      }
      while (v12 != v13);
      uint64_t v12 = v39;
    }
    if (v12)
    {
      id v40 = v12;
      operator delete(v12);
    }
    uint64_t v29 = sub_100019878();
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3321888768;
    void v32[2] = sub_1005AEF6C;
    v32[3] = &unk_1009B77F8;
    v32[4] = a1;
    v32[5] = v42;
    int64_t v34 = 0;
    uint64_t v35 = 0;
    int64_t v33 = 0;
    sub_100037564((char *)&v33, v43, v44, 0xCCCCCCCCCCCCCCCDLL * (((char *)v44 - (char *)v43) >> 2));
    xpc_object_t v36 = v4;
    sub_1000197D8(v29, v32);
    if (v33)
    {
      int64_t v34 = v33;
      operator delete(v33);
    }
  }
  xpc_object_t reply = xpc_dictionary_create_reply(a2);
  uint64_t v31 = reply;
  if (reply)
  {
    xpc_dictionary_set_value(reply, "kCBMsgArgDevices", v4);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v31);
    xpc_release(v31);
  }
  xpc_release(v4);
  if (v43)
  {
    unsigned int v44 = v43;
    operator delete(v43);
  }
}

void sub_10058E8B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v35 = *(void **)(v33 - 112);
  if (v35)
  {
    *(void *)(v33 - 104) = v35;
    operator delete(v35);
  }
  _Unwind_Resume(exception_object);
}

void sub_10058E930(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  long long v37 = sub_1002D500C(value, "kCBMsgArgFindMySerialNumberString");
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
  }
  sub_1006BEDA4((uint64_t)off_1009F7ED8);
  char v38 = +[NSMutableSet set];
  if (*(int *)(a1 + 80) >= 1 && *(unsigned char *)(a1 + 104))
  {
    if (v37 && [v37 count])
    {
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      id v4 = v37;
      id v5 = [v4 countByEnumeratingWithState:&v47 objects:v57 count:16];
      if (!v5) {
        goto LABEL_57;
      }
      uint64_t v6 = *(void *)v48;
      while (1)
      {
        uint64_t v7 = 0;
        do
        {
          if (*(void *)v48 != v6) {
            objc_enumerationMutation(v4);
          }
          uint64_t v8 = *(void **)(*((void *)&v47 + 1) + 8 * (void)v7);
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
          }
          uint64_t v9 = sub_1006C69A0((uint64_t)off_1009F7ED8, v8);
          if (!v9)
          {
            uint64_t v10 = qword_100A19EC8;
            if (!os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
              goto LABEL_29;
            }
            *(_DWORD *)timeval buf = 141558275;
            uint64_t v54 = 1752392040;
            __int16 v55 = 2113;
            char v56 = v8;
            uint64_t v11 = v10;
            uint64_t v12 = "No device with SN %{private, mask.hash}@";
LABEL_26:
            uint32_t v15 = 22;
LABEL_27:
            _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, v12, buf, v15);
            goto LABEL_29;
          }
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
          }
          if ((sub_10002F7F0((uint64_t)off_1009F7ED8, v9, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) == 0)
          {
            uint64_t v13 = qword_100A19EC8;
            if (!os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
              goto LABEL_29;
            }
            uint64_t v14 = *(void *)(a1 + 96);
            *(_DWORD *)timeval buf = 138543618;
            uint64_t v54 = v14;
            __int16 v55 = 2114;
            char v56 = v9;
            uint64_t v11 = v13;
            uint64_t v12 = "Bundle %{public}@ is not allowed to access device %{public}@";
            goto LABEL_26;
          }
          if (qword_1009F8788 != -1) {
            dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
          }
          if (sub_1002F56BC((uint64_t)off_1009F8780, *(void *)(a1 + 128), v9))
          {
            [v38 addObject:v9];
            goto LABEL_29;
          }
          uint64_t v16 = qword_100A19EC8;
          if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)timeval buf = 138543362;
            uint64_t v54 = (uint64_t)v9;
            uint64_t v11 = v16;
            uint64_t v12 = "Session cannot access device %{public}@";
            uint32_t v15 = 12;
            goto LABEL_27;
          }
LABEL_29:

          uint64_t v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        id v17 = [v4 countByEnumeratingWithState:&v47 objects:v57 count:16];
        id v5 = v17;
        if (!v17)
        {
LABEL_57:

          goto LABEL_58;
        }
      }
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    sub_1006B5F9C((uint64_t)off_1009F7ED8);
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    id v18 = [v4 countByEnumeratingWithState:&v43 objects:v52 count:16];
    if (!v18) {
      goto LABEL_56;
    }
    uint64_t v19 = *(void *)v44;
LABEL_38:
    uint64_t v20 = 0;
    while (1)
    {
      if (*(void *)v44 != v19) {
        objc_enumerationMutation(v4);
      }
      unint64_t v21 = *(void **)(*((void *)&v43 + 1) + 8 * v20);
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
      }
      if (sub_10002F7F0((uint64_t)off_1009F7ED8, v21, *(void **)(a1 + 96), *(void **)(a1 + 48)))
      {
        if (qword_1009F8788 != -1) {
          dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
        }
        if (sub_1002F56BC((uint64_t)off_1009F8780, *(void *)(a1 + 128), v21))
        {
          [v38 addObject:v21];
        }
        else
        {
          uint64_t v27 = qword_100A19EC8;
          if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)timeval buf = 138543362;
            uint64_t v54 = (uint64_t)v21;
            long long v24 = v27;
            int v25 = "Session cannot access device %{public}@";
            uint32_t v26 = 12;
            goto LABEL_54;
          }
        }
      }
      else
      {
        uint64_t v22 = qword_100A19EC8;
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v23 = *(void *)(a1 + 96);
          *(_DWORD *)timeval buf = 138543618;
          uint64_t v54 = v23;
          __int16 v55 = 2114;
          char v56 = v21;
          long long v24 = v22;
          int v25 = "Bundle %{public}@ is not allowed to access device %{public}@";
          uint32_t v26 = 22;
LABEL_54:
          _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, v25, buf, v26);
        }
      }
      if (v18 == (id)++v20)
      {
        id v28 = [v4 countByEnumeratingWithState:&v43 objects:v52 count:16];
        id v18 = v28;
        if (!v28)
        {
LABEL_56:

          goto LABEL_57;
        }
        goto LABEL_38;
      }
    }
  }
LABEL_58:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    xpc_object_t v30 = xpc_array_create(0, 0);
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    id v31 = v38;
    id v32 = [v31 countByEnumeratingWithState:&v39 objects:v51 count:16];
    if (v32)
    {
      uint64_t v33 = *(void *)v40;
      do
      {
        for (int i = 0; i != v32; int i = (char *)i + 1)
        {
          if (*(void *)v40 != v33) {
            objc_enumerationMutation(v31);
          }
          xpc_object_t v35 = sub_10002FB38(*(void **)(*((void *)&v39 + 1) + 8 * i), *(unsigned __int8 *)(a1 + 168), *(_DWORD *)(a1 + 80));
          xpc_array_append_value(v30, v35);
          xpc_release(v35);
        }
        id v32 = [v31 countByEnumeratingWithState:&v39 objects:v51 count:16];
      }
      while (v32);
    }

    xpc_dictionary_set_value(reply, "kCBMsgArgDevices", v30);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), reply);
    xpc_release(reply);
    xpc_release(v30);
  }
}

void sub_10058EFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_10058F078(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  long long v37 = sub_1002D4B14(value, "kCBMsgArgUUIDs");
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
  }
  sub_1006BEDA4((uint64_t)off_1009F7ED8);
  char v38 = +[NSMutableSet set];
  if (*(int *)(a1 + 80) >= 1 && *(unsigned char *)(a1 + 104))
  {
    if (v37 && [v37 count])
    {
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      id v4 = v37;
      id v5 = [v4 countByEnumeratingWithState:&v47 objects:v57 count:16];
      if (!v5) {
        goto LABEL_57;
      }
      uint64_t v6 = *(void *)v48;
      while (1)
      {
        uint64_t v7 = 0;
        do
        {
          if (*(void *)v48 != v6) {
            objc_enumerationMutation(v4);
          }
          uint64_t v8 = *(void **)(*((void *)&v47 + 1) + 8 * (void)v7);
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
          }
          uint64_t v9 = sub_1006B7870((uint64_t)off_1009F7ED8, v8);
          if (!v9)
          {
            uint64_t v10 = qword_100A19EC8;
            if (!os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
              goto LABEL_29;
            }
            *(_DWORD *)timeval buf = 141558275;
            uint64_t v54 = 1752392040;
            __int16 v55 = 2113;
            char v56 = v8;
            uint64_t v11 = v10;
            uint64_t v12 = "No device with FindMyID %{private, mask.hash}@";
LABEL_26:
            uint32_t v15 = 22;
LABEL_27:
            _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, v12, buf, v15);
            goto LABEL_29;
          }
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
          }
          if ((sub_10002F7F0((uint64_t)off_1009F7ED8, v9, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) == 0)
          {
            uint64_t v13 = qword_100A19EC8;
            if (!os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
              goto LABEL_29;
            }
            uint64_t v14 = *(void *)(a1 + 96);
            *(_DWORD *)timeval buf = 138543618;
            uint64_t v54 = v14;
            __int16 v55 = 2114;
            char v56 = v9;
            uint64_t v11 = v13;
            uint64_t v12 = "Bundle %{public}@ is not allowed to access device %{public}@";
            goto LABEL_26;
          }
          if (qword_1009F8788 != -1) {
            dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
          }
          if (sub_1002F56BC((uint64_t)off_1009F8780, *(void *)(a1 + 128), v9))
          {
            [v38 addObject:v9];
            goto LABEL_29;
          }
          uint64_t v16 = qword_100A19EC8;
          if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)timeval buf = 138543362;
            uint64_t v54 = (uint64_t)v9;
            uint64_t v11 = v16;
            uint64_t v12 = "Session cannot access device %{public}@";
            uint32_t v15 = 12;
            goto LABEL_27;
          }
LABEL_29:

          uint64_t v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        id v17 = [v4 countByEnumeratingWithState:&v47 objects:v57 count:16];
        id v5 = v17;
        if (!v17)
        {
LABEL_57:

          goto LABEL_58;
        }
      }
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    sub_1006B5F9C((uint64_t)off_1009F7ED8);
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    id v18 = [v4 countByEnumeratingWithState:&v43 objects:v52 count:16];
    if (!v18) {
      goto LABEL_56;
    }
    uint64_t v19 = *(void *)v44;
LABEL_38:
    uint64_t v20 = 0;
    while (1)
    {
      if (*(void *)v44 != v19) {
        objc_enumerationMutation(v4);
      }
      unint64_t v21 = *(void **)(*((void *)&v43 + 1) + 8 * v20);
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
      }
      if (sub_10002F7F0((uint64_t)off_1009F7ED8, v21, *(void **)(a1 + 96), *(void **)(a1 + 48)))
      {
        if (qword_1009F8788 != -1) {
          dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
        }
        if (sub_1002F56BC((uint64_t)off_1009F8780, *(void *)(a1 + 128), v21))
        {
          [v38 addObject:v21];
        }
        else
        {
          uint64_t v27 = qword_100A19EC8;
          if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)timeval buf = 138412290;
            uint64_t v54 = (uint64_t)v21;
            long long v24 = v27;
            int v25 = "Session cannot access device %@";
            uint32_t v26 = 12;
            goto LABEL_54;
          }
        }
      }
      else
      {
        uint64_t v22 = qword_100A19EC8;
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v23 = *(void *)(a1 + 96);
          *(_DWORD *)timeval buf = 138543618;
          uint64_t v54 = v23;
          __int16 v55 = 2114;
          char v56 = v21;
          long long v24 = v22;
          int v25 = "Bundle %{public}@ is not allowed to access device %{public}@";
          uint32_t v26 = 22;
LABEL_54:
          _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, v25, buf, v26);
        }
      }
      if (v18 == (id)++v20)
      {
        id v28 = [v4 countByEnumeratingWithState:&v43 objects:v52 count:16];
        id v18 = v28;
        if (!v28)
        {
LABEL_56:

          goto LABEL_57;
        }
        goto LABEL_38;
      }
    }
  }
LABEL_58:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    xpc_object_t v30 = xpc_array_create(0, 0);
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    id v31 = v38;
    id v32 = [v31 countByEnumeratingWithState:&v39 objects:v51 count:16];
    if (v32)
    {
      uint64_t v33 = *(void *)v40;
      do
      {
        for (int i = 0; i != v32; int i = (char *)i + 1)
        {
          if (*(void *)v40 != v33) {
            objc_enumerationMutation(v31);
          }
          xpc_object_t v35 = sub_10002FB38(*(void **)(*((void *)&v39 + 1) + 8 * i), *(unsigned __int8 *)(a1 + 168), *(_DWORD *)(a1 + 80));
          xpc_array_append_value(v30, v35);
          xpc_release(v35);
        }
        id v32 = [v31 countByEnumeratingWithState:&v39 objects:v51 count:16];
      }
      while (v32);
    }

    xpc_dictionary_set_value(reply, "kCBMsgArgDevices", v30);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), reply);
    xpc_release(reply);
    xpc_release(v30);
  }
}

void sub_10058F730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_10058F7C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100019878();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1005AF324;
  v5[3] = &unk_100998260;
  v5[4] = a1;
  void v5[5] = a2;
  sub_1000197D8(v4, v5);
}

void sub_10058F840(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v31 = 0;
  id v32 = &v31;
  uint64_t v33 = 0x2020000000;
  int v34 = 0;
  xpc_object_t v30 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v5 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  if (sub_1000198BC(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgOptions"))
  {
    sub_1004F1028(a1, 220, xdict, *((_DWORD *)v32 + 6));
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077C9AC();
    }
  }
  uint64_t v29 = 2;
  uint64_t v28 = 1;
  int v18 = sub_1000198BC(v30, 0, v12, v13, v14, v15, v16, v17, (uint64_t)"kCBLEMRCAction");
  *((_DWORD *)v32 + 6) = v18;
  if (!v18
    || (sub_1004F1028(a1, 220, xdict, v18), !os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)))
  {
    if (!v5) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  sub_10077C944();
  if (v5)
  {
LABEL_7:
    uint64_t v19 = sub_100019878();
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    void v22[2] = sub_1005AF4BC;
    v22[3] = &unk_1009B7830;
    long long v24 = &v31;
    uint64_t v25 = a1;
    id v23 = v5;
    uint64_t v26 = v29;
    uint64_t v27 = v28;
    sub_1000197D8(v19, v22);
  }
LABEL_8:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  unint64_t v21 = reply;
  if (reply)
  {
    xpc_dictionary_set_int64(reply, "kCBMsgArgResult", *((int *)v32 + 6));
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v21);
    xpc_release(v21);
  }

  _Block_object_dispose(&v31, 8);
}

void sub_10058FAA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  _Block_object_dispose((const void *)(v22 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10058FAE4(uint64_t a1, void *a2)
{
  xpc_object_t v4 = xpc_array_create(0, 0);
  uint64_t v5 = sub_100019878();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_1005AF538;
  v8[3] = &unk_100998260;
  v8[4] = a1;
  void v8[5] = v4;
  sub_1000197D8(v5, v8);
  xpc_object_t reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    uint64_t v7 = reply;
    xpc_dictionary_set_value(reply, "kCBMsgArgDevices", v4);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v7);
    xpc_release(v7);
  }
  xpc_release(v4);
}

void sub_10058FBB8(uint64_t a1, xpc_object_t original)
{
  v21[0] = 0;
  v21[1] = v21;
  void v21[2] = 0x2020000000;
  xpc_object_t reply = 0;
  xpc_object_t reply = xpc_dictionary_create_reply(original);
  uint64_t v20 = 0;
  xpc_object_t value = xpc_dictionary_get_value(original, "kCBMsgArgs");
  if (!sub_1000198BC(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgOptions"))
  {
    uint64_t v19 = 0;
    sub_1000198BC(v20, 0, v11, v12, v13, v14, v15, v16, (uint64_t)"kCBMsgArgLastMinutes");
    uint64_t v17 = sub_100019878();
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    void v18[2] = sub_1005AF700;
    v18[3] = &unk_100998860;
    v18[5] = a1;
    v18[6] = v19;
    void v18[4] = v21;
    sub_100013018(v17, v18);
  }
  _Block_object_dispose(v21, 8);
}

void sub_10058FCE4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_10058FD04(uint64_t a1, void *a2)
{
  uint64_t v19 = 0;
  uint64_t v20 = &v19;
  uint64_t v21 = 0x2020000000;
  int v22 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v15 = 0;
  uint64_t v4 = sub_100050530();
  (*(void (**)(uint64_t, void, void))(*(void *)v4 + 632))(v4, *(void *)(a1 + 96), 0);
  xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  int v12 = sub_1000198BC(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgUUIDs");
  *((_DWORD *)v20 + 6) = v12;
  if (!v12)
  {
    if (!sub_1002D3F28(v15, "kCBScanOptionReadADVBuffersNow")) {
      operator new();
    }
    if (*(unsigned char *)(a1 + 190))
    {
      uint64_t v13 = sub_100019878();
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      void v14[2] = sub_1005A9488;
      v14[3] = &unk_1009995E0;
      void v14[4] = &v19;
      sub_1000197D8(v13, v14);
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
    {
      sub_10077CA14();
    }
  }
  if (v16)
  {
    uint64_t v17 = v16;
    operator delete(v16);
  }
  _Block_object_dispose(&v19, 8);
}

void sub_1005904E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
}

void sub_10059056C(uint64_t a1)
{
  uint64_t v2 = sub_100019878();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1005AA688;
  uint64_t v3[3] = &unk_100997528;
  void v3[4] = a1;
  sub_1000197D8(v2, v3);
}

void sub_1005905E8(uint64_t a1, xpc_object_t xdict)
{
  __int16 v134 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  uint64_t v6 = sub_100050530();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)v6 + 632))(v6, *(void *)(a1 + 96), 1);
  if (sub_1000198BC(value, 1, v7, v8, v9, v10, v11, v12, (uint64_t)"kCBMsgArgOptions"))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077CC00();
    }
    int v13 = 3;
    goto LABEL_33;
  }
  if (!v5) {
    goto LABEL_201;
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
  }
  if (!sub_1006BB9D4((uint64_t)off_1009F7ED8, v5))
  {
LABEL_201:
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077CA48();
    }
    int v13 = 8;
    goto LABEL_33;
  }
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  if (sub_1002F56BC((uint64_t)off_1009F8780, *(void *)(a1 + 128), v5))
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    if (sub_10002F7F0((uint64_t)off_1009F7ED8, v5, *(void **)(a1 + 96), *(void **)(a1 + 48)))
    {
      uint64_t v132 = 0;
      uint64_t v133 = 0;
      uint64_t v131 = 0;
      uint64_t v130 = 0;
      uint64_t v129 = 0;
      uint64_t v128 = 0;
      uint64_t v127 = 0;
      uint64_t v126 = 0;
      uint64_t v125 = 0;
      uint64_t v124 = 0;
      uint64_t v123 = 0;
      uint64_t v122 = 0;
      uint64_t v121 = 0;
      uint64_t v120 = 0;
      uint64_t v119 = 0;
      uint64_t v118 = 0;
      uint64_t v117 = 0;
      uint64_t v116 = 0;
      uint64_t v115 = 0;
      uint64_t v114 = 0;
      uint64_t v113 = 0;
      uint64_t v112 = 0;
      uint64_t v111 = 0;
      char v110 = 0;
      uint64_t v109 = 0;
      uint64_t v108 = 0;
      uint64_t v107 = 0;
      uint64_t v106 = 0;
      uint64_t v105 = 0;
      uint64_t v104 = 0;
      uint64_t v103 = 0;
      uint64_t v102 = 0;
      int v94 = sub_1000198BC(v134, 0, v14, v15, v16, v17, v18, v19, (uint64_t)"kCBConnectOptionNotifyOnConnection");
      uint64_t v20 = +[ConnectOptions alertOptionsWithConnectionAlerts:disconnectionAlerts:notificationAlerts:delay:bridgeTransport:](ConnectOptions, "alertOptionsWithConnectionAlerts:disconnectionAlerts:notificationAlerts:delay:bridgeTransport:", 0, 0, 0);
      [v20 setWantsObjectDiscoveryData:0];
      [v20 setDisableLeGATT:0];
      [v20 setAncsRequired:0];
      [v20 setResetDisconnectionHistory:0];
      uint64_t v21 = sub_1002D500C(v134, "kCBManagerListOfClients");
      [v20 setConnectingClients:v21];

      [v20 setRequiresLowLatency:0];
      int v22 = [v20 connectingClients];
      LODWORD(v21) = v22 == 0;

      if (v21)
      {
        +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", *(void *)(a1 + 96), 0, sub_100019A00, &v133, "kCBConnectOptionNotifyOnDisconnection", sub_100019A00, &v132, "kCBConnectOptionNotifyOnNotification", sub_100019A00, &v131, "kCBConnectOptionStartDelay", sub_100019A00, &v130, "kCBConnectOptionReceiveObjectDiscoveryData", sub_100019A00, &v129, "kCBConnectOptionEnableTransportBridging",
          sub_100019A00,
          &v128,
          "kCBConnectOptionsDisableLeGATT",
          sub_100019A00,
          &v127,
          "kCBConnectOptionRequiresANCS",
          sub_100019A00,
          &v126,
          "kCBConnectOptionHideFromBTSettings",
          sub_100019A00,
          &v125,
          "kCBConnectOptionInitPHYs",
          sub_100019A00,
          &v124,
          "kCBConnectOptionPHYOptions",
          sub_100019A00,
          &v123,
          "kCBConnectOptionFirstApproachEnable",
          sub_100019A00,
          &v122,
          "kCBConnectOptionGetControllerBTClock",
          sub_100019A00,
          &v121,
          "kCBOptionUsecase",
          sub_100019A00,
          &v120,
          "kCBConnectOptionMaxAllowedConnectionDelay",
          sub_100019A00,
          &v119,
          "kCBConnectOptionMinRSSILevelForConnect",
          sub_100019A00,
          &v118,
          "kCBConnectOptionConnectionCompleteOnPoll",
          sub_100019A00,
          &v117,
          "kCBConnectOptionEnableScanCore",
          sub_100019A00,
          &v116,
          "kCBConnectOptionLatencyCritical",
          sub_100019A00,
          &v115,
          "kCBConnectOptionCtkdTransport",
          sub_100019A00,
        id v23 = &v114);
        [v20 setConnectingClients:v23];
      }
      int v24 = *(unsigned __int8 *)(a1 + 188);
      if (!*(unsigned char *)(a1 + 188))
      {
        uint64_t v25 = (int *)(a1 + 80);
        if (*(int *)(a1 + 80) < 1) {
          goto LABEL_35;
        }
      }
      uint64_t v26 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)timeval buf = 134218240;
        *(void *)&uint8_t buf[4] = v118;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&uint8_t buf[14] = v24;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "configuration for minRSSILevelForConnection to:%lld  fAllowScreenOffScanning=%d", buf, 0x12u);
      }
      [v20 setMinRSSILevelForConnection:v118];
      uint64_t v25 = (int *)(a1 + 80);
      if (*(int *)(a1 + 80) >= 2)
      {
        [v20 setInitPHYs:v124];
        [v20 setPHYOptions:v123];
        [v20 setMinRSSILevelForConnection:v118];
        [v20 setWaitForConnectionPoll:v117 != 0];
        [v20 setEnableScanCore:v116 != 0];
        [v20 setCtkdChosenTransport:v114];
        [v20 setTxPowerConnectInd:v104];
        [v20 setTxPowerAuxConnectReq:v103];
        [v20 setMrcEnable:v102];
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
        }
        sub_1006C8904((uint64_t)off_1009F7ED8, v5, v109, v108, v107, v106, v105, v104, v103, v102);
      }
      else
      {
LABEL_35:
        [v20 setInitPHYs:1];
        [v20 setPHYOptions:0];
        [v20 setEnableScanCore:0];
      }
      if (qword_100A13988 != -1) {
        dispatch_once(&qword_100A13988, &stru_1009B7450);
      }
      if (byte_100A13986)
      {
        uint64_t v28 = qword_100A19EC8;
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)timeval buf = 138543362;
          *(void *)&uint8_t buf[4] = v5;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Warning: Override enableAutoReconnect for device %{public}@", buf, 0xCu);
        }
        [v20 setEnableAutoReconnect:1];
      }
      if (byte_100A13985 == 1)
      {
        uint64_t v29 = qword_100A19EC8;
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)timeval buf = 138543362;
          *(void *)&uint8_t buf[4] = v5;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Warning: Setting override connection parameters to device %{public}@", buf, 0xCu);
        }
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
        }
        sub_1006C8904((uint64_t)off_1009F7ED8, v5, byte_100A13980, byte_100A13981, 0, 0, 0, byte_100A13982, word_100A13983, SHIBYTE(word_100A13983));
      }
      if (![v20 initPHYs]) {
        [v20 setInitPHYs:((unint64_t)objc_msgSend(v20, "initPHYs") | 1)];
      }
      if (v122 == 1)
      {
        xpc_object_t v30 = qword_100A19EC8;
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)timeval buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Enable coded PHY from first approach", buf, 2u);
        }
        [v20 setInitPHYs:(unint64_t)[v20 initPHYs] | 4];
      }
      int v95 = v25;
      if (v121 == 1)
      {
        uint64_t v31 = qword_100A19EC8;
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
        {
          int v32 = *v25;
          *(_DWORD *)timeval buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v32;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "configuration for enableControllerBTClockUpdates for AccessLevel:%d ", buf, 8u);
        }
        if (*v25 < 1) {
          goto LABEL_62;
        }
        [v20 setEnableControllerBTClockUpdates:1];
      }
      if (*v25 >= 1)
      {
        [v20 setOpportunistic:v112 != 0];
        [v20 setResetDisconnectionHistory:v113 != 0];
        uint64_t v33 = sub_1002D49BC(v134, "kCBConnectOptionConnectionScanDutyCycle");
        int v34 = v33;
        if (v33) {
          unsigned __int8 v35 = [v33 intValue];
        }
        else {
          unsigned __int8 v35 = 0;
        }
        long long v37 = sub_1002D49BC(v134, "kCBConnectOptionScreenOffConnectionScanDutyCycle");

        if (v37) {
          unsigned __int8 v36 = [v37 intValue];
        }
        else {
          unsigned __int8 v36 = 3;
        }
        char v38 = sub_1002D49BC(v134, "kCBConnectOptionDoNoDisconnectOnEncryptionFailure");
        unsigned int v39 = [v38 BOOLValue];

        if (v39)
        {
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
          }
          sub_1006C61F8((uint64_t)off_1009F7ED8, v5, 1);
          if (qword_1009F7EC0 != -1) {
            dispatch_once(&qword_1009F7EC0, &stru_1009B7AC8);
          }
          sub_1006A436C((uint64_t)off_1009F7EB8, v5);
        }

        goto LABEL_76;
      }
LABEL_62:
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
      }
      sub_1006C61F8((uint64_t)off_1009F7ED8, v5, 0);
      unsigned __int8 v35 = 0;
      unsigned __int8 v36 = 3;
LABEL_76:
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
      }
      sub_1006C5F3C((uint64_t)off_1009F7ED8, v5, v35);
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
      }
      sub_1006C6054((uint64_t)off_1009F7ED8, v5, v36);
      long long v40 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_INFO))
      {
        sub_10003AE4C(*(void *)(a1 + 128), (uint64_t)v142);
        long long v41 = v145 >= 0 ? v142 : *(unsigned char **)v142;
        *(_DWORD *)timeval buf = 136315906;
        *(void *)&uint8_t buf[4] = v41;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&uint8_t buf[14] = v35;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = v36;
        *(_WORD *)uint64_t v138 = 2112;
        *(void *)&v138[2] = v5;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "Session \"%s\" setting up connection scan level of %d (screenOff %d) for device %@", buf, 0x22u);
        if (v145 < 0) {
          operator delete(*(void **)v142);
        }
      }
      if (*v95 < 1)
      {
        long long v47 = 0;
        goto LABEL_166;
      }
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
      }
      long long v42 = sub_100030C6C((uint64_t)off_1009F7ED8, v5);
      BOOL v43 = v42 == 0;

      if (v43)
      {
        long long v44 = sub_1002D4930(v134, "kCBConnectOptionsTemporaryLTK");
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
        }
        uint64_t v45 = sub_100030DCC((uint64_t)off_1009F7ED8, v5, 0);
        if ([v44 length])
        {
          long long v46 = qword_100A19EC8;
          if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)timeval buf = 138412290;
            *(void *)&uint8_t buf[4] = v5;
            _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "preparing a temporary LTK for device %@", buf, 0xCu);
          }
          if (v45)
          {
            [v20 setTemporaryLTK:v44];
          }
          else
          {
            if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
              sub_10077CB30();
            }
            int v94 = 8;
          }
        }
      }
      if (v125)
      {
        long long v50 = qword_100A19EC8;
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
        {
          sub_10003AE4C(*(void *)(a1 + 128), (uint64_t)buf);
          if (buf[23] >= 0) {
            int64_t v51 = buf;
          }
          else {
            int64_t v51 = *(unsigned char **)buf;
          }
          *(_DWORD *)__int16 v142 = 136315394;
          *(void *)&v142[4] = v51;
          __int16 v143 = 2112;
          __int16 v144 = v5;
          _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "Session \"%s\" is asking to hide %@ from BT Settings menu", v142, 0x16u);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          uint64_t v52 = v125;
        }
        else
        {
          uint64_t v52 = 1;
        }
        [v20 setHideFromBTSettings:v52 != 0];
      }
      sub_100019738(v134, "kCBConnectOptionClientBundleID");
      __int16 v53 = (__CFString *)objc_claimAutoreleasedReturnValue();
      sub_100019738(v134, "kCBConnectOptionClientProcessID");
      uint64_t v54 = (__CFString *)objc_claimAutoreleasedReturnValue();
      __int16 v55 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
      {
        CFStringRef v56 = @"NoClientBundleID";
        CFStringRef v57 = @"NoClientProcessID";
        if (v53) {
          CFStringRef v56 = v53;
        }
        if (v54) {
          CFStringRef v57 = v54;
        }
        *(_DWORD *)timeval buf = 138413314;
        *(void *)&uint8_t buf[4] = v56;
        *(_WORD *)&unsigned char buf[12] = 2112;
        *(void *)&uint8_t buf[14] = v57;
        *(_WORD *)&unsigned char buf[22] = 2048;
        *(void *)uint64_t v138 = v120;
        *(_WORD *)&v138[8] = 2048;
        uint64_t v139 = v119;
        __int16 v140 = 2048;
        uint64_t v141 = v115;
        _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "clientBundleID %@ clientProcessID %@ connectionUseCase %lld maxAllowedConnectionDelay %lld isLatencyCritical %lld", buf, 0x34u);
      }
      [v20 setClientBundleID:v53];
      [v20 setClientProcessID:v54];
      [v20 setConnectionUseCase:v120];
      [v20 setMaxAllowedConnectionDelay:v119];
      if (v115 == 1)
      {
        if (*(unsigned char *)(a1 + 84))
        {
          uint64_t v58 = sub_100035F54();
          if ((*(unsigned int (**)(uint64_t))(*(void *)v58 + 384))(v58))
          {
            __int16 v59 = qword_100A19EC8;
            if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
            {
              CFStringRef v60 = @"NoClientBundleID";
              if (v53) {
                CFStringRef v60 = v53;
              }
              CFStringRef v61 = @"NoClientProcessID";
              if (v54) {
                CFStringRef v61 = v54;
              }
              *(_DWORD *)timeval buf = 138412546;
              *(void *)&uint8_t buf[4] = v60;
              *(_WORD *)&unsigned char buf[12] = 2112;
              *(void *)&uint8_t buf[14] = v61;
              _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "clientBundleID %@ clientProcessID %@ fLatencyCriticalRequest received", buf, 0x16u);
            }
            [v20 setIsLatencyCritical:1];
          }
        }
      }
      id v62 = sub_1002D5194(v134, "kCBOptionUseCaseList");
      __int16 v63 = v62;
      if (v62)
      {
        if ([v62 count])
        {
          char v64 = +[NSSet setWithArray:v63];
          uint64_t v65 = [v64 allObjects];

          uint64_t v66 = [v65 sortedArrayUsingSelector:"compare:"];

          uint64_t v67 = (void *)v66;
        }
        else
        {
          uint64_t v67 = v63;
        }
      }
      else
      {
        uint64_t v67 = 0;
      }
      [v20 setUseCaseList:v67];
      if (v67 && [v67 count])
      {
        uint64_t v68 = sub_1005AA6EC(v67);
        uint64_t v69 = qword_100A19EC8;
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
        {
          id v70 = [v68 componentsJoinedByString:@","];
          *(_DWORD *)timeval buf = 138412290;
          *(void *)&uint8_t buf[4] = v70;
          _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "connUseCaseList: %@", buf, 0xCu);
        }
        if (![v20 connectionUseCase])
        {
          id v71 = [v67 firstObject];
          int v72 = v71;
          if (v71)
          {
            [v20 setConnectionUseCase:[v71 longLongValue]];
            int v73 = qword_100A19EC8;
            if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
            {
              char v74 = sub_10003C778((int)[v72 longLongValue]);
              *(_DWORD *)timeval buf = 136315138;
              *(void *)&uint8_t buf[4] = v74;
              _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "default useCase derived from useCaseList: %s", buf, 0xCu);
            }
          }
        }
      }

      if (*v95 < 1)
      {
LABEL_165:
        long long v47 = v67;
LABEL_166:
        if (v94)
        {
          sub_1004F1028(a1, 85, xdict, v94);
LABEL_184:

          goto LABEL_34;
        }
        if (!_os_feature_enabled_impl()) {
          goto LABEL_179;
        }
        if (([*(id *)(a1 + 96) containsString:@"com.apple.deviceaccessd"] & 1) != 0
          || *(unsigned char *)(a1 + 178)
          || *(unsigned char *)(a1 + 176)
          || *(unsigned char *)(a1 + 177)
          || *(unsigned char *)(a1 + 175))
        {
          goto LABEL_174;
        }
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
        }
        __int16 v91 = off_1009F7ED8;
        sub_10004191C(__p, "DA_ASK_RETAIN_DEVICE");
        int v92 = sub_100030A04((uint64_t)v91, v5, (uint64_t)__p);
        char v93 = v92;
        if (v101 < 0)
        {
          operator delete(__p[0]);
          if ((v93 & 1) == 0) {
            goto LABEL_179;
          }
        }
        else if (!v92)
        {
LABEL_179:
          uint64_t v87 = sub_100019878();
          v96[0] = _NSConcreteStackBlock;
          v96[1] = 3221225472;
          v96[2] = sub_1005AB3D4;
          v96[3] = &unk_1009996F8;
          uint64_t v99 = a1;
          id v97 = v5;
          id v98 = v20;
          sub_1000197D8(v87, v96);

          uint64_t v75 = v97;
          uint64_t v67 = v47;
LABEL_183:

          long long v47 = v67;
          goto LABEL_184;
        }
LABEL_174:
        double v86 = qword_100A19EC8;
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)timeval buf = 138412290;
          *(void *)&uint8_t buf[4] = v5;
          _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEFAULT, "Warning: Blocking HID service on device \"%@\"", buf, 0xCu);
        }
        memset(buf, 0, 20);
        long long v135 = xmmword_1007BA730;
        int v136 = 0;
        sub_100035F98((__n128 *)buf, (__n128 *)&v135);
        if (qword_1009F7F10 != -1) {
          dispatch_once(&qword_1009F7F10, &stru_1009B7A88);
        }
        sub_10063C080(qword_1009F7F08, v5, buf);
        goto LABEL_179;
      }
      uint64_t v75 = sub_1002D4930(v134, "kCBConnectOptionConnectionOptionTemporaryIRKValue");
      if (![v75 length])
      {
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG)) {
          sub_10077CA7C((uint64_t)v5);
        }
        goto LABEL_164;
      }
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
      }
      unint64_t v76 = sub_100030DCC((uint64_t)off_1009F7ED8, v5, 0);
      id v77 = sub_1002D4930(v134, "kCBConnectOptionConnectionOptionTemporaryIdentityAddress");
      id v78 = [v77 copy];

      *(_DWORD *)&v142[3] = 0;
      *(_DWORD *)__int16 v142 = 0;
      if ([v78 length] == (id)6 || objc_msgSend(v78, "length") == (id)7)
      {
        uint64_t v79 = qword_100A19EC8;
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)timeval buf = 138412546;
          *(void *)&uint8_t buf[4] = v5;
          *(_WORD *)&unsigned char buf[12] = 2112;
          *(void *)&uint8_t buf[14] = v78;
          _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "preparing a temporary IRK for device %@ for address %@", buf, 0x16u);
        }
        if ([v78 length] == (id)6)
        {
          uint64_t v80 = 0;
          v142[0] = 1;
        }
        else
        {
          uint64_t v80 = 1;
          [v78 getBytes:v142 length:1];
        }
        [v78 getBytes:&v142[1] range:v80];
        int v81 = sub_1006ACEAC();
        [v20 setTemporaryIdentityAddress:v81];
      }
      else
      {
        if (!v76)
        {
          if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
            sub_10077CB30();
          }
          int v94 = 8;
LABEL_163:

LABEL_164:
          goto LABEL_165;
        }
        __int16 v88 = sub_1006ACEAC();
        [v20 setTemporaryIdentityAddress:v88];

        __int16 v89 = qword_100A19EC8;
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)timeval buf = 138412546;
          *(void *)&uint8_t buf[4] = v5;
          *(_WORD *)&unsigned char buf[12] = 2112;
          *(void *)&uint8_t buf[14] = v78;
          _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEFAULT, "preparing a temporary IRK from device UUID %@ for address %@", buf, 0x16u);
        }
        v142[0] = 0;
        unint64_t v90 = sub_10022A5E0(v76);
        *(_DWORD *)&v142[1] = v90;
        *(_WORD *)&v142[5] = WORD2(v90);
      }
      int64_t v82 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)timeval buf = 138412290;
        *(void *)&uint8_t buf[4] = v5;
        _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEFAULT, "setting up temporary IRK for device %@", buf, 0xCu);
      }
      [v20 setTemporaryIRK:v75];
      __int16 v83 = [v20 temporaryIRK];
      id v84 = [v83 length];

      if (v84 != (id)16)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
          sub_10077CAFC();
        }

        goto LABEL_183;
      }
      *(void *)timeval buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      id v85 = [v20 temporaryIRK];
      *(_OWORD *)timeval buf = *(_OWORD *)[v85 bytes];

      if (qword_1009F7ED0 != -1) {
        dispatch_once(&qword_1009F7ED0, &stru_1009B7A28);
      }
      sub_100714144(qword_1009F7EC8, (uint64_t)v142, (uint64_t)buf, v5);
      goto LABEL_163;
    }
    uint64_t v27 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v48 = *(void *)(a1 + 96);
      uint64_t v49 = *(void *)(a1 + 48);
      *(_DWORD *)timeval buf = 138412802;
      *(void *)&uint8_t buf[4] = v48;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&uint8_t buf[14] = v49;
      *(_WORD *)&unsigned char buf[22] = 2112;
      *(void *)uint64_t v138 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077CB98();
  }
  int v13 = 17;
LABEL_33:
  sub_1004F1028(a1, 85, xdict, v13);
LABEL_34:
}

void sub_10059211C(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x367]) < 0) {
    operator delete((void *)STACK[0x350]);
  }

  _Unwind_Resume(a1);
}

void sub_1005922B0(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  xpc_object_t v30 = 0;
  if (!sub_1000198BC(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgOptions"))
  {
    if (!v5) {
      goto LABEL_31;
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    if (!sub_1006BB9D4((uint64_t)off_1009F7ED8, v5))
    {
LABEL_31:
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077CA48();
      }
      int v12 = 8;
      goto LABEL_20;
    }
    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
    }
    if (sub_1002F56BC((uint64_t)off_1009F8780, *(void *)(a1 + 128), v5))
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
      }
      if (sub_10002F7F0((uint64_t)off_1009F7ED8, v5, *(void **)(a1 + 96), *(void **)(a1 + 48)))
      {
        int v19 = sub_1000198BC(v30, 0, v13, v14, v15, v16, v17, v18, (uint64_t)"kCBCancelConnectOptionForce");
        if (!v19)
        {
          uint64_t v22 = sub_100019878();
          v25[0] = _NSConcreteStackBlock;
          v25[1] = 3221225472;
          void v25[2] = sub_1005AC9B4;
          v25[3] = &unk_1009A0A70;
          uint64_t v27 = a1;
          id v26 = v5;
          uint64_t v28 = v32;
          uint64_t v29 = v31;
          sub_1000197D8(v22, v25);

          goto LABEL_21;
        }
        int64_t v20 = 87;
        goto LABEL_27;
      }
      uint64_t v21 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v23 = *(void *)(a1 + 96);
        uint64_t v24 = *(void *)(a1 + 48);
        *(_DWORD *)timeval buf = 138412802;
        uint64_t v34 = v23;
        __int16 v35 = 2112;
        uint64_t v36 = v24;
        __int16 v37 = 2112;
        char v38 = v5;
        _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
    {
      sub_10077CB98();
    }
    int v19 = 17;
    int64_t v20 = 85;
LABEL_27:
    sub_1004F1028(a1, v20, xdict, v19);
    goto LABEL_21;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
    sub_10077CC00();
  }
  int v12 = 3;
LABEL_20:
  sub_1004F1028(a1, 85, xdict, v12);
LABEL_21:
}

void sub_10059261C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_100592644(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_100019738(value, "kCBMsgArgAddressString");
  if ((sub_1006ADA24(v5) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    sub_1006BEDA4((uint64_t)off_1009F7ED8);
    *(void *)uu = 0;
    uint64_t v29 = 0;
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    uint64_t v6 = off_1009F7ED8;
    unint64_t v7 = sub_1006ADA24(v5);
    sub_100014B58((uint64_t)v6, v7, 0, 1u, 0, 0, uu);
    if (uuid_is_null(uu))
    {
      if (qword_1009F7ED0 != -1) {
        dispatch_once(&qword_1009F7ED0, &stru_1009B7A28);
      }
      uint64_t v8 = qword_1009F7EC8;
      unint64_t v9 = sub_1006ADA24(v5);
      uint64_t v10 = sub_100713998(v8, v9);
      sub_1000305AC(&v22, v10);
      uuid_copy(uu, (const unsigned __int8 *)&v22);
    }
    if (!uuid_is_null(uu))
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
      }
      uint64_t v11 = (uint64_t)off_1009F7ED8;
      int v12 = sub_100031234(uu);
      LOBYTE(v11) = sub_10002F7F0(v11, v12, *(void **)(a1 + 96), *(void **)(a1 + 48));

      if (v11)
      {
        uint64_t v13 = sub_100031234(uu);
        xpc_object_t v14 = sub_10002FB38(v13, *(unsigned __int8 *)(a1 + 168), *(_DWORD *)(a1 + 80));

        goto LABEL_20;
      }
      uint64_t v16 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
      {
        int v19 = *(void **)(a1 + 96);
        uint64_t v20 = *(void *)(a1 + 48);
        uint64_t v21 = sub_100031234(uu);
        int v22 = 138412802;
        uint64_t v23 = v19;
        __int16 v24 = 2112;
        uint64_t v25 = v20;
        __int16 v26 = 2112;
        uint64_t v27 = v21;
        _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", (uint8_t *)&v22, 0x20u);
      }
    }
  }
  else
  {
    uint64_t v15 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
    {
      int v22 = 138412290;
      uint64_t v23 = v5;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Warning: Invalid parameters, cannot retrieve a peripheral with address \"%@\"", (uint8_t *)&v22, 0xCu);
    }
  }
  xpc_object_t v14 = 0;
LABEL_20:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  uint64_t v18 = reply;
  if (reply)
  {
    xpc_dictionary_set_value(reply, "kCBMsgArgDevices", v14);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v18);
    xpc_release(v18);
  }
  if (v14) {
    xpc_release(v14);
  }
}

void sub_100592990(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005929DC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v2 = xdict;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_1002D4930(value, "kCBAdvOptionInstanceRandomAddressBytes");
  id v6 = [v5 copy];

  unint64_t v7 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  if (*(int *)(a1 + 80) < 1)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077CD80();
    }
    goto LABEL_38;
  }
  *(_DWORD *)&v34[3] = 0;
  *(_DWORD *)uint64_t v34 = 0;
  if ([v6 length] != (id)6 && objc_msgSend(v6, "length") != (id)7)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077CD4C();
    }
    goto LABEL_38;
  }
  if ([v6 length] == (id)6)
  {
    uint64_t v8 = 0;
    v34[0] = 1;
  }
  else
  {
    uint64_t v8 = 1;
    [v6 getBytes:v34 length:1];
  }
  [v6 getBytes:&v34[1] range:v8];
  if (v7)
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    if (sub_1006BB9D4((uint64_t)off_1009F7ED8, v7))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077CCE4();
      }
LABEL_38:
      xpc_object_t v28 = 0;
      goto LABEL_39;
    }
  }
  id v32 = v6;
  uint64_t v33 = v7;
  xpc_object_t v9 = v2;
  uint64_t v10 = a1;
  uint64_t v11 = v34[1];
  uint64_t v12 = v34[2];
  uint64_t v13 = v34[3];
  uint64_t v14 = v34[4];
  uint64_t v15 = v34[5];
  uint64_t v16 = v34[6];
  uint64_t v17 = v34[0];
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
  }
  sub_1006BEDA4((uint64_t)off_1009F7ED8);
  unint64_t v18 = (v11 << 40) | (v12 << 32) | (v13 << 24) | (v14 << 16) | (v15 << 8) | v16 | (v17 << 48);
  *(void *)uu = 0;
  uint64_t v42 = 0;
  if (qword_1009F7ED0 != -1) {
    dispatch_once(&qword_1009F7ED0, &stru_1009B7A28);
  }
  id v6 = v32;
  unint64_t v7 = v33;
  a1 = v10;
  sub_100713998(qword_1009F7EC8, v18);
  v19 = xpc_object_t v2 = v9;
  sub_1000305AC(uu, v19);

  if (!uuid_is_null(uu))
  {
    uint64_t v21 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
    {
      sub_100401EBC(uu, src);
      int v22 = v36;
      uint64_t v23 = *(unsigned __int8 **)src;
      uint64_t v24 = sub_1006AD3F0();
      uint64_t v25 = (void *)v24;
      __int16 v26 = src;
      if (v22 < 0) {
        __int16 v26 = v23;
      }
      *(_DWORD *)timeval buf = 136446466;
      char v38 = v26;
      __int16 v39 = 2112;
      uint64_t v40 = v24;
      _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Device %{public}s for address %@ already exists, cannot create a new one", buf, 0x16u);
      if (v36 < 0) {
        operator delete(*(void **)src);
      }
    }
    goto LABEL_38;
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
  }
  sub_100014B58((uint64_t)off_1009F7ED8, v18, 0, 1u, 0, 0, src);
  uuid_copy(uu, src);
  if (!uuid_is_null(uu))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
    {
      sub_1006AD3F0();
      id v27 = (id)objc_claimAutoreleasedReturnValue();
      sub_100401EBC(uu, src);
      sub_10077CC34();
    }
    goto LABEL_38;
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
  }
  sub_100014B58((uint64_t)off_1009F7ED8, v18, 1u, 1u, v33, 0, src);
  uuid_copy(uu, src);
  if (uuid_is_null(uu))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
    {
      sub_1006AD3F0();
      id v20 = (id)objc_claimAutoreleasedReturnValue();
      sub_100401EBC(uu, src);
      sub_10077CC8C();
    }
    goto LABEL_38;
  }
  uint64_t v31 = sub_100031234(uu);
  xpc_object_t v28 = sub_10002FB38(v31, *(unsigned __int8 *)(a1 + 168), *(_DWORD *)(a1 + 80));

LABEL_39:
  xpc_object_t reply = xpc_dictionary_create_reply(v2);
  xpc_object_t v30 = reply;
  if (reply)
  {
    xpc_dictionary_set_value(reply, "kCBMsgArgDevices", v28);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v30);
    xpc_release(v30);
  }
  if (v28) {
    xpc_release(v28);
  }
}

void sub_100592F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _Unwind_Resume(a1);
}

void sub_100592FE8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000;
  xpc_object_t reply = 0;
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (v12[3])
  {
    uint64_t v6 = sub_100019878();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    void v7[2] = sub_1005ACA38;
    void v7[3] = &unk_1009B7308;
    uint64_t v10 = a1;
    id v8 = v5;
    xpc_object_t v9 = &v11;
    sub_100013018(v6, v7);
  }
  _Block_object_dispose(&v11, 8);
}

void sub_1005930F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100593124(uint64_t a1, xpc_object_t xdict)
{
  if (*(unsigned char *)(a1 + 176))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077CE14();
    }
  }
  else if (*(unsigned char *)(a1 + 178))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077CDE0();
    }
  }
  else
  {
    xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_object_t v4 = xpc_dictionary_get_value(value, "kCBMsgArgOptions");
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v24 = sub_1002D4B14(v4, "kCBConnectionEventMatchingOptionPeripheralUUIDs");
    int v22 = v4;
    int v23 = sub_1000198BC(v4, 0, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBConnectionEventMatchingOptionServiceUUIDs");
    uint64_t v11 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v24;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "handleRegisterForConnectionEventsWithOptionsMsg peripherals:%@", (uint8_t *)&buf, 0xCu);
    }
    long long buf = 0uLL;
    uint64_t v38 = 0;
    int v18 = v23;
    if (*(int *)(a1 + 80) > 0
      || (uint64_t v19 = sub_100035F54(), (*(unsigned int (**)(uint64_t))(*(void *)v19 + 384))(v19)))
    {
      int v18 = sub_1000198BC(v22, 0, v12, v13, v14, v15, v16, v17, (uint64_t)"kCBConnectionEventMatchingOptionAllPeripherals");
      id v20 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)char v36 = 134217984;
        *(void *)&v36[4] = v32;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "handleRegisterForConnectionEventsWithOptionsMsg allPeripherals:%lld", v36, 0xCu);
      }
    }
    if (!v18 && (*((void *)&buf + 1) != (void)buf || v32 || v24 && [v24 count]))
    {
      uint64_t v21 = sub_100019878();
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3321888768;
      void v25[2] = sub_1005ACC98;
      v25[3] = &unk_1009B76C8;
      uint64_t v27 = a1;
      id v26 = v24;
      std::string __p = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      sub_100037564((char *)&__p, (long long *)buf, *((long long **)&buf + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&buf + 1) - buf) >> 2));
      uint64_t v31 = v32;
      sub_1000197D8(v21, v25);
      if (__p)
      {
        uint64_t v29 = __p;
        operator delete(__p);
      }
    }
    if ((void)buf)
    {
      *((void *)&buf + 1) = buf;
      operator delete((void *)buf);
    }

    if (v33)
    {
      uint64_t v34 = v33;
      operator delete(v33);
    }
  }
}

void sub_1005936C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p) {
    operator delete(__p);
  }

  uint64_t v35 = *(void **)(v33 - 128);
  if (v35)
  {
    *(void *)(v33 - 120) = v35;
    operator delete(v35);
  }

  if (a32) {
    operator delete(a32);
  }
  _Unwind_Resume(a1);
}

void sub_100593744(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 80) == 2)
  {
    uint64_t v1 = sub_100019878();
    sub_1000197D8(v1, &stru_1009B7718);
  }
}

void sub_100593788(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 80) == 2)
  {
    uint64_t v1 = sub_100019878();
    sub_1000197D8(v1, &stru_1009B76F8);
  }
}

void sub_1005937CC(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 80) == 2)
  {
    uint64_t v2 = sub_100019878();
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    void v3[2] = sub_1005ACECC;
    uint64_t v3[3] = &unk_100997528;
    void v3[4] = a1;
    sub_1000197D8(v2, v3);
  }
}

void sub_100593854(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 80) == 2)
  {
    uint64_t v2 = sub_100019878();
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    void v3[2] = sub_1005ACF40;
    uint64_t v3[3] = &unk_100997528;
    void v3[4] = a1;
    sub_1000197D8(v2, v3);
  }
}

void sub_1005938DC(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v3 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  uint64_t v4 = sub_100019878();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1005AB440;
  v6[3] = &unk_100997450;
  id v5 = v3;
  id v7 = v5;
  sub_1000197D8(v4, v6);
}

void sub_10059399C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1005939BC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v4 = sub_1002D4930(value, "kCBMsgArgLeAFHMap");
  if ([v4 length] == (id)5)
  {
    id v5 = qword_100A19EC8;
    if (*(int *)(a1 + 80) <= 0)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
      {
        sub_10003AE4C(*(void *)(a1 + 128), (uint64_t)__p);
        sub_10077CE48();
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10003AE4C(*(void *)(a1 + 128), (uint64_t)__p);
        uint64_t v6 = v21 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)long long buf = 136315394;
        uint64_t v17 = v6;
        __int16 v18 = 2112;
        uint64_t v19 = v4;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "session %s is trying to set LE AFH Map to %@", buf, 0x16u);
        if (v21 < 0) {
          operator delete(__p[0]);
        }
      }
      char v15 = 0;
      int v14 = 0;
      [v4 getBytes:&v14 length:5];
      char v13 = 0;
      sub_10001B8E0(&v13);
      if (sub_10001BDE0(180, (uint64_t)sub_1005AB510, v7, v8, v9, v10, v11, v12, (uint64_t)&v14)
        && os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
      {
        sub_10003AE4C(*(void *)(a1 + 128), (uint64_t)__p);
        sub_10077CEA0();
      }
      sub_10001B8AC(&v13);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    [v4 length];
    sub_10003AE4C(*(void *)(a1 + 128), (uint64_t)buf);
    sub_10077CF10();
  }
}

void sub_100593BF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100593C34(uint64_t a1, xpc_object_t xdict)
{
  char v21 = 0;
  uint64_t v22 = 1;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int v11 = sub_1000198BC(value, 0, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgOptions");
  if (v11)
  {
    sub_1004F1028(a1, 101, xdict, v11);
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077CFF0();
    }
  }
  int v18 = sub_1000198BC(v21, 0, v12, v13, v14, v15, v16, v17, (uint64_t)"kCBScanOptionAppleFilterTargetCore");
  if (v18)
  {
    sub_1004F1028(a1, 101, xdict, v18);
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077CF88();
    }
  }
  if (*(_DWORD *)(a1 + 80) == 2)
  {
    uint64_t v19 = sub_100019878();
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_1005AB5E4;
    v20[3] = &unk_100998260;
    uint8_t v20[4] = a1;
    v20[5] = v22;
    sub_1000197D8(v19, v20);
  }
}

void sub_100593DC8(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v26 = 1;
  uint64_t v24 = 0;
  uint64_t v25 = 2;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int v11 = sub_1000198BC(value, 0, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgOptions");
  if (v11)
  {
    sub_1004F1028(a1, 102, xdict, v11);
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077D0C0();
    }
  }
  int v18 = sub_1000198BC(v24, 0, v12, v13, v14, v15, v16, v17, (uint64_t)"kCBScanOptionAppleFilterTargetCore");
  if (v18)
  {
    sub_1004F1028(a1, 102, xdict, v18);
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077D058();
    }
  }
  uint64_t v19 = sub_100019738(v24, "kCBScanOptionPeers");
  unint64_t v20 = sub_1006ADA24(v19);
  if (*(_DWORD *)(a1 + 80) == 2)
  {
    unint64_t v21 = v20;
    uint64_t v22 = sub_100019878();
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    void v23[2] = sub_1005AB650;
    v23[3] = &unk_1009A12D0;
    v23[4] = v25;
    v23[5] = v21;
    v23[6] = v26;
    sub_1000197D8(v22, v23);
  }
}

void sub_100593FA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100593FB4(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v28 = 1;
  uint64_t v26 = 0;
  uint64_t v27 = 2;
  uint64_t v25 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int v11 = sub_1000198BC(value, 0, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgOptions");
  if (v11)
  {
    sub_1004F1028(a1, 103, xdict, v11);
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077D190();
    }
  }
  uint64_t v12 = sub_1002D4B14(v26, "kCBScanOptionRemoveMultipleDupFilterEntryUUIDs");
  int v19 = sub_1000198BC(v26, 0, v13, v14, v15, v16, v17, v18, (uint64_t)"kCBScanOptionAppleFilterTargetCore");
  if (v19)
  {
    sub_1004F1028(a1, 103, xdict, v19);
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077D128();
    }
  }
  if (*(_DWORD *)(a1 + 80) == 2)
  {
    uint64_t v20 = sub_100019878();
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    void v21[2] = sub_1005AB6BC;
    void v21[3] = &unk_100998570;
    id v22 = v12;
    uint64_t v23 = v28;
    uint64_t v24 = v25;
    sub_1000197D8(v20, v21);
  }
}

void sub_1005941B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_1005941D0(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v21 = 0;
  id v22 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int v11 = sub_1000198BC(value, 0, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgOptions");
  if (v11)
  {
    sub_1004F1028(a1, 104, xdict, v11);
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077D260();
    }
  }
  int v18 = sub_1000198BC(v22, 0, v12, v13, v14, v15, v16, v17, (uint64_t)"kCBScanOptionRemoveMultipleDupFilterEntryPacketType");
  if (v18)
  {
    sub_1004F1028(a1, 104, xdict, v18);
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077D1F8();
    }
  }
  if (*(_DWORD *)(a1 + 80) == 2)
  {
    uint64_t v19 = sub_100019878();
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_1005AB840;
    v20[3] = &unk_100998260;
    uint8_t v20[4] = a1;
    v20[5] = v21;
    sub_1000197D8(v19, v20);
  }
}

void sub_100594360(uint64_t a1, void *a2)
{
  if (*(_DWORD *)(a1 + 80) == 2)
  {
    __int16 v8 = 0;
    uint64_t v4 = sub_100019878();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    void v7[2] = sub_1005AB8AC;
    void v7[3] = &unk_100998260;
    void v7[4] = (char *)&v8 + 1;
    void v7[5] = &v8;
    sub_1000197D8(v4, v7);
    xpc_object_t reply = xpc_dictionary_create_reply(a2);
    if (reply)
    {
      uint64_t v6 = reply;
      xpc_dictionary_set_uint64(reply, "kCBScanOptionTotalAdvMatchingRules", HIBYTE(v8));
      xpc_dictionary_set_uint64(v6, "kCBScanOptionRemainingAdvMatchingRules", v8);
      xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v6);
      xpc_release(v6);
    }
  }
}

void sub_100594440(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  uint64_t v6 = sub_1002D4930(value, "kCBMsgArgObjectDiscoveryData");
  if (v6) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    sub_1004F1028(a1, 85, xdict, 1);
  }
  else
  {
    uint64_t v8 = sub_100019878();
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_1005ACDB8;
    v9[3] = &unk_1009996F8;
    uint64_t v12 = a1;
    id v10 = v5;
    id v11 = v6;
    sub_1000197D8(v8, v9);
  }
}

void sub_10059455C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_100594590(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v69 = 2;
  uint64_t v70 = 1;
  uint64_t v67 = 1;
  uint64_t v68 = 1;
  uint64_t v65 = 0;
  uint64_t v66 = 1;
  __int16 v63 = 0;
  uint64_t v64 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int v11 = sub_1000198BC(value, 0, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgOptions");
  if (v11)
  {
    sub_1004F1028(a1, 106, xdict, v11);
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077D5A0();
    }
  }
  int v18 = sub_1000198BC(v63, 0, v12, v13, v14, v15, v16, v17, (uint64_t)"kCBScanEnableOptionAppleFilterEnable");
  if (v18)
  {
    sub_1004F1028(a1, 106, xdict, v18);
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077D538();
    }
  }
  int v25 = sub_1000198BC(v63, 0, v19, v20, v21, v22, v23, v24, (uint64_t)"kCBScanEnableOptionAppleFilterType");
  if (v25)
  {
    sub_1004F1028(a1, 106, xdict, v25);
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077D4D0();
    }
  }
  int v32 = sub_1000198BC(v63, 0, v26, v27, v28, v29, v30, v31, (uint64_t)"kCBScanOptionAppleFilterForceDups");
  if (v32)
  {
    sub_1004F1028(a1, 106, xdict, v32);
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077D468();
    }
  }
  int v39 = sub_1000198BC(v63, 0, v33, v34, v35, v36, v37, v38, (uint64_t)"kCBScanOptionAppleFilterBypassFilterDuplicate");
  if (v39)
  {
    sub_1004F1028(a1, 106, xdict, v39);
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077D400();
    }
  }
  int v46 = sub_1000198BC(v63, 0, v40, v41, v42, v43, v44, v45, (uint64_t)"kCBScanOptionAppleFilterTargetCore");
  if (v46)
  {
    sub_1004F1028(a1, 106, xdict, v46);
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077D398();
    }
  }
  int v53 = sub_1000198BC(v63, 0, v47, v48, v49, v50, v51, v52, (uint64_t)"kCBScanEnableOptionAppleFilterScanDuration");
  if (v53)
  {
    sub_1004F1028(a1, 106, xdict, v53);
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077D330();
    }
  }
  int v60 = sub_1000198BC(v63, 0, v54, v55, v56, v57, v58, v59, (uint64_t)"kCBScanEnableOptionAppleFilterScanPeriod");
  if (v60)
  {
    sub_1004F1028(a1, 106, xdict, v60);
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077D2C8();
    }
  }
  if (*(_DWORD *)(a1 + 80) == 2)
  {
    uint64_t v61 = sub_100019878();
    v62[0] = _NSConcreteStackBlock;
    v62[1] = 3221225472;
    v62[2] = sub_1005AB910;
    v62[3] = &unk_1009B7470;
    v62[4] = v70;
    v62[5] = v69;
    v62[6] = v68;
    v62[7] = v67;
    v62[8] = v66;
    v62[9] = v65;
    v62[10] = v64;
    sub_1000197D8(v61, v62);
  }
}

void sub_1005949D4(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v157 = 0;
  uint64_t v158 = 1;
  uint64_t v155 = 0;
  uint64_t v156 = 1;
  uint64_t v153 = 0;
  uint64_t v154 = 0;
  uint64_t v151 = 300;
  uint64_t v152 = 300;
  uint64_t v150 = 300;
  uint64_t v148 = 30;
  uint64_t v149 = 30;
  uint64_t v146 = 1;
  uint64_t v147 = 30;
  uint64_t v144 = 30;
  uint64_t v145 = 1;
  uint64_t v142 = 30;
  uint64_t v143 = 30;
  uint64_t v141 = 0;
  if (*(_DWORD *)(a1 + 80) == 2)
  {
    __int16 v140 = 0;
    xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    int v11 = sub_1000198BC(value, 0, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgOptions");
    if (v11)
    {
      sub_1004F1028(a1, 107, xdict, v11);
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077DD58();
      }
    }
    int v18 = sub_1000198BC(v140, 0, v12, v13, v14, v15, v16, v17, (uint64_t)"kCBSetScanParameterOwnAddress");
    if (v18)
    {
      sub_1004F1028(a1, 107, xdict, v18);
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077DCF0();
      }
    }
    int v25 = sub_1000198BC(v140, 0, v19, v20, v21, v22, v23, v24, (uint64_t)"kCBSetScanParameterScanningFilterPolicy");
    if (v25)
    {
      sub_1004F1028(a1, 107, xdict, v25);
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077DC88();
      }
    }
    int v32 = sub_1000198BC(v140, 0, v26, v27, v28, v29, v30, v31, (uint64_t)"kCBSetScanParameterScanPHY");
    if (v32)
    {
      sub_1004F1028(a1, 107, xdict, v32);
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077DC20();
      }
    }
    int v39 = sub_1000198BC(v140, 0, v33, v34, v35, v36, v37, v38, (uint64_t)"kCBSetScanParameterScanTypeLE1M");
    if (v39)
    {
      sub_1004F1028(a1, 107, xdict, v39);
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077DBB8();
      }
    }
    int v46 = sub_1000198BC(v140, 0, v40, v41, v42, v43, v44, v45, (uint64_t)"kCBSetScanParameterScanTypeLE2M");
    if (v46)
    {
      sub_1004F1028(a1, 107, xdict, v46);
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077DB50();
      }
    }
    int v53 = sub_1000198BC(v140, 0, v47, v48, v49, v50, v51, v52, (uint64_t)"kCBSetScanParameterScanTypeLECoded");
    if (v53)
    {
      sub_1004F1028(a1, 107, xdict, v53);
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077DAE8();
      }
    }
    int v60 = sub_1000198BC(v140, 0, v54, v55, v56, v57, v58, v59, (uint64_t)"kCBSetScanParameterScanIntervalLE1M");
    if (v60)
    {
      sub_1004F1028(a1, 107, xdict, v60);
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077DA80();
      }
    }
    int v67 = sub_1000198BC(v140, 0, v61, v62, v63, v64, v65, v66, (uint64_t)"kCBSetScanParameterScanIntervalLE2M");
    if (v67)
    {
      sub_1004F1028(a1, 107, xdict, v67);
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077DA18();
      }
    }
    int v74 = sub_1000198BC(v140, 0, v68, v69, v70, v71, v72, v73, (uint64_t)"kCBSetScanParameterScanIntervalLECoded");
    if (v74)
    {
      sub_1004F1028(a1, 107, xdict, v74);
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077D9B0();
      }
    }
    int v81 = sub_1000198BC(v140, 0, v75, v76, v77, v78, v79, v80, (uint64_t)"kCBSetScanParameterScanWindowLE1M");
    if (v81)
    {
      sub_1004F1028(a1, 107, xdict, v81);
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077D948();
      }
    }
    int v88 = sub_1000198BC(v140, 0, v82, v83, v84, v85, v86, v87, (uint64_t)"kCBSetScanParameterScanWindowLE2M");
    if (v88)
    {
      sub_1004F1028(a1, 107, xdict, v88);
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077D8E0();
      }
    }
    int v95 = sub_1000198BC(v140, 0, v89, v90, v91, v92, v93, v94, (uint64_t)"kCBSetScanParameterScanWindowLECoded");
    if (v95)
    {
      sub_1004F1028(a1, 107, xdict, v95);
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077D878();
      }
    }
    int v102 = sub_1000198BC(v140, 0, v96, v97, v98, v99, v100, v101, (uint64_t)"kCBSetScanParameterScanIsLegacy");
    if (v102)
    {
      sub_1004F1028(a1, 107, xdict, v102);
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077D810();
      }
    }
    int v109 = sub_1000198BC(v140, 0, v103, v104, v105, v106, v107, v108, (uint64_t)"kCBSetScanParameterScanMaxWindowLE1M");
    if (v109)
    {
      sub_1004F1028(a1, 107, xdict, v109);
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077D7A8();
      }
    }
    int v116 = sub_1000198BC(v140, 0, v110, v111, v112, v113, v114, v115, (uint64_t)"kCBSetScanParameterScanMaxWindowLE2M");
    if (v116)
    {
      sub_1004F1028(a1, 107, xdict, v116);
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077D740();
      }
    }
    int v123 = sub_1000198BC(v140, 0, v117, v118, v119, v120, v121, v122, (uint64_t)"kCBSetScanParameterScanMaxWindowLECoded");
    if (v123)
    {
      sub_1004F1028(a1, 107, xdict, v123);
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077D6D8();
      }
    }
    int v130 = sub_1000198BC(v140, 0, v124, v125, v126, v127, v128, v129, (uint64_t)"kCBSetScanParameterScanTargetCore");
    if (v130)
    {
      sub_1004F1028(a1, 107, xdict, v130);
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077D670();
      }
    }
    int v137 = sub_1000198BC(v140, 0, v131, v132, v133, v134, v135, v136, (uint64_t)"kCBSetScanParameterPriorityConfiguration");
    if (v137)
    {
      sub_1004F1028(a1, 107, xdict, v137);
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077D608();
      }
    }
    uint64_t v138 = sub_100019878();
    v139[0] = _NSConcreteStackBlock;
    v139[1] = 3221225472;
    v139[2] = sub_1005AC5B8;
    v139[3] = &unk_1009B7640;
    v139[4] = v155;
    v139[5] = v154;
    v139[6] = v153;
    v139[7] = v152;
    v139[8] = v151;
    v139[9] = v150;
    v139[10] = v149;
    v139[11] = v148;
    v139[12] = v147;
    v139[13] = v144;
    v139[14] = v143;
    v139[15] = v142;
    v139[16] = v158;
    v139[17] = v157;
    v139[18] = v156;
    v139[19] = v146;
    v139[20] = v145;
    v139[21] = v141;
    sub_1000197D8(v138, v139);
  }
}

void sub_100595310(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v105 = 0;
  uint64_t v106 = 0;
  uint64_t v103 = 0;
  uint64_t v104 = &off_100998428;
  uint64_t v101 = 0;
  int v102 = &off_100998428;
  uint64_t v99 = 1;
  uint64_t v100 = 0;
  uint64_t v97 = 1;
  uint64_t v98 = 1;
  uint64_t v96 = 2;
  uint64_t v94 = 0;
  uint64_t v95 = 0;
  xpc_object_t xdicta = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int v17 = sub_1000198BC(value, 0, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgOptions");
  if (v17)
  {
    sub_1004F1028(a1, 108, xdict, v17);
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077E1B4();
    }
  }
  int v18 = sub_1000198BC(xdicta, 0, v11, v12, v13, v14, v15, v16, (uint64_t)"kCBScanOptionAppleFilterPuckType");
  if (v18)
  {
    sub_1004F1028(a1, 108, xdict, v18);
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077DEF8();
    }
  }
  xpc_object_t v19 = xpc_dictionary_get_value(xdicta, "kCBScanOptionAppleFilterPayload");
  if ((v19 && sub_1002D4184(v19, (uint64_t)&v104) || !sub_100045F00((uint64_t)&v104))
    && os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077E180();
  }
  xpc_object_t v20 = xpc_dictionary_get_value(xdicta, "kCBScanOptionAppleFilterPayloadMask");
  if ((v20 && sub_1002D4184(v20, (uint64_t)&v102) || !sub_100045F00((uint64_t)&v102))
    && os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077E14C();
  }
  unint64_t v21 = sub_100045F00((uint64_t)&v104);
  uint64_t v22 = sub_10003FB34();
  if (v21 > (*(unsigned int (**)(uint64_t))(*(void *)v22 + 3528))(v22)
    || (unint64_t v23 = sub_100045F00((uint64_t)&v102),
        uint64_t v24 = sub_10003FB34(),
        v23 > (*(unsigned int (**)(uint64_t))(*(void *)v24 + 3528))(v24)))
  {
    uint64_t v31 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = sub_100045F00((uint64_t)&v104);
      uint64_t v33 = sub_100045F00((uint64_t)&v102);
      sub_10077E100((uint64_t)v107, v32, v33, v31);
    }
  }
  if (sub_1000198BC(xdicta, 0, v25, v26, v27, v28, v29, v30, (uint64_t)"kCBScanOptionAppleFilterRssi")
    && os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077E098();
  }
  if (sub_1000198BC(xdicta, 0, v34, v35, v36, v37, v38, v39, (uint64_t)"kCBScanOptionAppleFilterForceDups")&& os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077E030();
  }
  if (sub_1000198BC(xdicta, 0, v40, v41, v42, v43, v44, v45, (uint64_t)"kCBScanOptionAppleFilterAddressType")&& os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077DFC8();
  }
  if (sub_1000198BC(xdicta, 0, v46, v47, v48, v49, v50, v51, (uint64_t)"kCBScanOptionAppleFilterBypassFilterDuplicate")&& os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077DF60();
  }
  if (sub_1000198BC(xdicta, 0, v52, v53, v54, v55, v56, v57, (uint64_t)"kCBScanOptionAppleFilterTargetCore")&& os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077DEF8();
  }
  if (sub_1000198BC(xdicta, 0, v58, v59, v60, v61, v62, v63, (uint64_t)"kCBScanOptionAppleFilterRSSIThresholdOrder")&& os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077DE90();
  }
  if (sub_1000198BC(xdicta, 0, v64, v65, v66, v67, v68, v69, (uint64_t)"kCBScanOption127dBmReport")
    && os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077DE28();
  }
  if (sub_1000198BC(xdicta, 0, v70, v71, v72, v73, v74, v75, (uint64_t)"kCBScanOption27dBmReport")
    && os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077DDC0();
  }
  uint64_t v76 = sub_100019738(xdicta, "kCBScanOptionAppleFilterAddress");
  unint64_t v77 = sub_1006ADA24(v76);

  if (*(_DWORD *)(a1 + 80) == 2)
  {
    uint64_t v78 = sub_100019878();
    v79[0] = _NSConcreteStackBlock;
    v79[1] = 3321888768;
    v79[2] = sub_1005AC694;
    v79[3] = &unk_1009B7660;
    v79[4] = a1;
    uint64_t v80 = &off_100998428;
    int v81 = v105;
    if (v105) {
      sub_100037354((uint64_t)v105);
    }
    uint64_t v82 = &off_100998428;
    uint64_t v83 = v103;
    if (v103) {
      sub_100037354((uint64_t)v103);
    }
    uint64_t v84 = v101;
    uint64_t v85 = v106;
    uint64_t v86 = v96;
    unint64_t v87 = v77;
    uint64_t v88 = v99;
    uint64_t v89 = v98;
    uint64_t v90 = v97;
    uint64_t v91 = v95;
    uint64_t v92 = v94;
    sub_1000197D8(v78, v79);
    uint64_t v82 = &off_100998428;
    if (v83) {
      sub_1000368F4(v83);
    }
    uint64_t v80 = &off_100998428;
    if (v81) {
      sub_1000368F4(v81);
    }
  }
  int v102 = &off_100998428;
  if (v103) {
    sub_1000368F4(v103);
  }
  uint64_t v104 = &off_100998428;
  if (v105) {
    sub_1000368F4(v105);
  }
}

void sub_100595A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, atomic_uint *a19, uint64_t a20,uint64_t a21)
{
  if (a19) {
    sub_1000368F4(a19);
  }
  *(void *)(v23 - 136) = v22;
  uint64_t v25 = *(atomic_uint **)(v23 - 128);
  if (v25) {
    sub_1000368F4(v25);
  }
  *(void *)(v23 - 120) = v21;
  uint64_t v26 = *(atomic_uint **)(v23 - 112);
  if (v26) {
    sub_1000368F4(v26);
  }
  _Unwind_Resume(exception_object);
}

void sub_100595A98(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v79 = 0;
  uint64_t v80 = 0;
  unint64_t v77 = 0;
  uint64_t v78 = &off_100998428;
  uint64_t v75 = 0;
  uint64_t v76 = &off_100998428;
  uint64_t v73 = 1;
  uint64_t v74 = 0;
  uint64_t v71 = 1;
  uint64_t v72 = 1;
  uint64_t v70 = 2;
  xpc_object_t xdicta = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (sub_1000198BC(value, 0, v4, v5, v6, v7, v8, v9, (uint64_t)"kCBMsgArgOptions")
    && os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077E4F4();
  }
  if (sub_1000198BC(xdicta, 0, v10, v11, v12, v13, v14, v15, (uint64_t)"kCBScanOptionAppleFilterPuckType")
    && os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077E284();
  }
  xpc_object_t v16 = xpc_dictionary_get_value(xdicta, "kCBScanOptionAppleFilterPayload");
  if ((v16 && sub_1002D4184(v16, (uint64_t)&v78) || !sub_100045F00((uint64_t)&v78))
    && os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077E4C0();
  }
  xpc_object_t v17 = xpc_dictionary_get_value(xdicta, "kCBScanOptionAppleFilterPayloadMask");
  if ((v17 && sub_1002D4184(v17, (uint64_t)&v76) || !sub_100045F00((uint64_t)&v76))
    && os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077E48C();
  }
  if (sub_1000198BC(xdicta, 0, v18, v19, v20, v21, v22, v23, (uint64_t)"kCBScanOptionAppleFilterRssi")
    && os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077E424();
  }
  if (sub_1000198BC(xdicta, 0, v24, v25, v26, v27, v28, v29, (uint64_t)"kCBScanOptionAppleFilterForceDups")&& os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077E3BC();
  }
  if (sub_1000198BC(xdicta, 0, v30, v31, v32, v33, v34, v35, (uint64_t)"kCBScanOptionAppleFilterAddressType")&& os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077E354();
  }
  if (sub_1000198BC(xdicta, 0, v36, v37, v38, v39, v40, v41, (uint64_t)"kCBScanOptionAppleFilterBypassFilterDuplicate")&& os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077E2EC();
  }
  if (sub_1000198BC(xdicta, 0, v42, v43, v44, v45, v46, v47, (uint64_t)"kCBScanOptionAppleFilterTargetCore")&& os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077E284();
  }
  if (sub_1000198BC(xdicta, 0, v48, v49, v50, v51, v52, v53, (uint64_t)"kCBScanOptionAppleFilterRSSIThresholdOrder")&& os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077E21C();
  }
  uint64_t v54 = sub_100019738(xdicta, "kCBScanOptionAppleFilterAddress");
  unint64_t v55 = sub_1006ADA24(v54);

  if (*(_DWORD *)(a1 + 80) == 2)
  {
    uint64_t v56 = sub_100019878();
    v57[0] = _NSConcreteStackBlock;
    v57[1] = 3321888768;
    v57[2] = sub_1005AC8C4;
    v57[3] = &unk_1009B7690;
    v57[4] = a1;
    uint64_t v58 = &off_100998428;
    uint64_t v59 = v79;
    if (v79) {
      sub_100037354((uint64_t)v79);
    }
    uint64_t v60 = &off_100998428;
    uint64_t v61 = v77;
    if (v77) {
      sub_100037354((uint64_t)v77);
    }
    uint64_t v62 = v75;
    uint64_t v63 = v80;
    uint64_t v64 = v70;
    unint64_t v65 = v55;
    uint64_t v66 = v73;
    uint64_t v67 = v72;
    uint64_t v68 = v71;
    sub_1000197D8(v56, v57);
    uint64_t v60 = &off_100998428;
    if (v61) {
      sub_1000368F4(v61);
    }
    uint64_t v58 = &off_100998428;
    if (v59) {
      sub_1000368F4(v59);
    }
  }
  uint64_t v76 = &off_100998428;
  if (v77) {
    sub_1000368F4(v77);
  }
  uint64_t v78 = &off_100998428;
  if (v79) {
    sub_1000368F4(v79);
  }
}

void sub_100595FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, atomic_uint *a19, uint64_t a20,uint64_t a21)
{
  if (a19) {
    sub_1000368F4(a19);
  }
  *(void *)(v23 - 104) = v22;
  uint64_t v25 = *(atomic_uint **)(v23 - 96);
  if (v25) {
    sub_1000368F4(v25);
  }
  *(void *)(v23 - 88) = v21;
  uint64_t v26 = *(atomic_uint **)(v23 - 80);
  if (v26) {
    sub_1000368F4(v26);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059606C(uint64_t a1, void *a2)
{
  if (*(int *)(a1 + 80) > 1)
  {
    uint64_t v3 = +[NSMutableArray array];
    xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    xpc_object_t array = xpc_dictionary_get_array(value, "kCBMsgArgRules");
    uint64_t v6 = array;
    if (!array
      || xpc_get_type(array) != (xpc_type_t)&_xpc_type_array
      || (applier[0] = _NSConcreteStackBlock,
          applier[1] = 3221225472,
          applier[2] = sub_1005B2260,
          applier[3] = &unk_1009B7928,
          id v12 = v3,
          BOOL v7 = xpc_array_apply(v6, applier),
          v12,
          v7))
    {
      uint64_t v8 = sub_100019878();
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472;
      void v9[2] = sub_1005B2420;
      v9[3] = &unk_100997450;
      id v10 = v3;
      sub_1000197D8(v8, v9);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077E55C();
  }
}

void sub_1005961F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_100596220(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v32 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v11 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  if (*(_DWORD *)(a1 + 80) == 2)
  {
    int v18 = sub_1000198BC(value, 0, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgOptions");
    if (v18)
    {
      sub_1004F1028(a1, 113, xdict, v18);
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077E660();
      }
    }
    int v25 = sub_1000198BC(v32, 0, v12, v13, v14, v15, v16, v17, (uint64_t)"kCBDataLengthMaxTxOctets");
    if (v25)
    {
      sub_1004F1028(a1, 113, xdict, v25);
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077E5F8();
      }
    }
    int v26 = sub_1000198BC(v32, 0, v19, v20, v21, v22, v23, v24, (uint64_t)"kCBDataLengthMaxTxTime");
    if (v26)
    {
      sub_1004F1028(a1, 113, xdict, v26);
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077E590();
      }
    }
    uint64_t v27 = sub_100019878();
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472;
    _OWORD v28[2] = sub_1005AB990;
    v28[3] = &unk_100998570;
    id v29 = v11;
    uint64_t v30 = v34;
    uint64_t v31 = v33;
    sub_1000197D8(v27, v28);
  }
}

void sub_10059645C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_10059647C(uint64_t a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  int v8 = 0;
  if (*(int *)(a1 + 80) > 1)
  {
    uint64_t v2 = sub_10003FB34();
    if ((*(uint64_t (**)(uint64_t))(*(void *)v2 + 2768))(v2))
    {
      uint64_t v3 = sub_100019878();
      v4[0] = _NSConcreteStackBlock;
      v4[1] = 3221225472;
      void v4[2] = sub_1005ABC94;
      v4[3] = &unk_100999720;
      v4[4] = &v5;
      void v4[5] = a1;
      sub_1000197D8(v3, v4);
      if (*((_DWORD *)v6 + 6) && os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077E6FC();
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
    {
      sub_10077E764();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077E6C8();
  }
  _Block_object_dispose(&v5, 8);
}

void sub_1005965E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100596600(uint64_t a1, xpc_object_t xdict)
{
  v15[0] = 0;
  v15[1] = v15;
  void v15[2] = 0x2020000000;
  int v16 = 3;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  uint64_t v6 = sub_10003FB34();
  if ((*(uint64_t (**)(uint64_t))(*(void *)v6 + 2768))(v6))
  {
    if (v5)
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
      }
      if (sub_1006BB9D4((uint64_t)off_1009F7ED8, v5))
      {
        if (qword_1009F8788 != -1) {
          dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
        }
        if (sub_1002F56BC((uint64_t)off_1009F8780, *(void *)(a1 + 128), v5))
        {
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
          }
          if (sub_10002F7F0((uint64_t)off_1009F7ED8, v5, *(void **)(a1 + 96), *(void **)(a1 + 48)))
          {
            if (*(int *)(a1 + 80) > 1)
            {
              uint64_t v8 = sub_100019878();
              v11[0] = _NSConcreteStackBlock;
              v11[1] = 3221225472;
              void v11[2] = sub_1005ABCFC;
              uint64_t v11[3] = &unk_1009A9370;
              uint64_t v13 = v15;
              uint64_t v14 = a1;
              id v12 = v5;
              sub_1000197D8(v8, v11);
            }
            else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
            {
              sub_10077E798();
            }
            goto LABEL_25;
          }
          uint64_t v7 = qword_100A19EC8;
          if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
          {
            uint64_t v9 = *(void *)(a1 + 96);
            uint64_t v10 = *(void *)(a1 + 48);
            *(_DWORD *)long long buf = 138412802;
            uint64_t v18 = v9;
            __int16 v19 = 2112;
            uint64_t v20 = v10;
            __int16 v21 = 2112;
            uint64_t v22 = v5;
            _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
          }
        }
        else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
        {
          sub_10077CB98();
        }
        sub_1004F1028(a1, 115, xdict, 17);
        goto LABEL_25;
      }
    }
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077CA48();
    }
    sub_1004F1028(a1, 115, xdict, 8);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077E764();
  }
LABEL_25:

  _Block_object_dispose(v15, 8);
}

void sub_100596964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1005969A4(uint64_t a1, xpc_object_t xdict)
{
  v15[0] = 0;
  v15[1] = v15;
  void v15[2] = 0x2020000000;
  int v16 = 3;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  uint64_t v6 = sub_10003FB34();
  if ((*(uint64_t (**)(uint64_t))(*(void *)v6 + 2768))(v6))
  {
    if (v5)
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
      }
      if (sub_1006BB9D4((uint64_t)off_1009F7ED8, v5))
      {
        if (qword_1009F8788 != -1) {
          dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
        }
        if (sub_1002F56BC((uint64_t)off_1009F8780, *(void *)(a1 + 128), v5))
        {
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
          }
          if (sub_10002F7F0((uint64_t)off_1009F7ED8, v5, *(void **)(a1 + 96), *(void **)(a1 + 48)))
          {
            if (*(int *)(a1 + 80) > 1)
            {
              uint64_t v8 = sub_100019878();
              v11[0] = _NSConcreteStackBlock;
              v11[1] = 3221225472;
              void v11[2] = sub_1005ABDF4;
              uint64_t v11[3] = &unk_1009A9370;
              uint64_t v13 = v15;
              uint64_t v14 = a1;
              id v12 = v5;
              sub_1000197D8(v8, v11);
            }
            else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
            {
              sub_10077E798();
            }
            goto LABEL_25;
          }
          uint64_t v7 = qword_100A19EC8;
          if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
          {
            uint64_t v9 = *(void *)(a1 + 96);
            uint64_t v10 = *(void *)(a1 + 48);
            *(_DWORD *)long long buf = 138412802;
            uint64_t v18 = v9;
            __int16 v19 = 2112;
            uint64_t v20 = v10;
            __int16 v21 = 2112;
            uint64_t v22 = v5;
            _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
          }
        }
        else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
        {
          sub_10077CB98();
        }
        sub_1004F1028(a1, 117, xdict, 17);
        goto LABEL_25;
      }
    }
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077CA48();
    }
    sub_1004F1028(a1, 117, xdict, 8);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077E764();
  }
LABEL_25:

  _Block_object_dispose(v15, 8);
}

void sub_100596D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100596D48(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v26 = 0;
  uint64_t v27 = &v26;
  uint64_t v28 = 0x2020000000;
  int v29 = 3;
  int v25 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  int v12 = sub_1000198BC(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgOptions");
  *((_DWORD *)v27 + 6) = v12;
  uint64_t v13 = sub_10003FB34();
  if ((*(uint64_t (**)(uint64_t))(*(void *)v13 + 2768))(v13))
  {
    if (v5)
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
      }
      if (sub_1006BB9D4((uint64_t)off_1009F7ED8, v5))
      {
        if (qword_1009F8788 != -1) {
          dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
        }
        if (sub_1002F56BC((uint64_t)off_1009F8780, *(void *)(a1 + 128), v5))
        {
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
          }
          if (sub_10002F7F0((uint64_t)off_1009F7ED8, v5, *(void **)(a1 + 96), *(void **)(a1 + 48)))
          {
            if (*(int *)(a1 + 80) > 1)
            {
              *(void *)&uint8_t buf[8] = 0x10000;
              *(void *)&uint8_t buf[16] = 0x100010001;
              *(_WORD *)long long buf = 0;
              *(_OWORD *)&unsigned char buf[24] = xmmword_1007BFA40;
              *(_WORD *)&buf[40] = 0;
              *(void *)&uint8_t buf[2] = 0x200000000;
              int v15 = sub_1000198BC(v25, 0, (uint64_t)&buf[20], (uint64_t)&buf[24], (uint64_t)&buf[26], (uint64_t)&buf[28], (uint64_t)&buf[30], (uint64_t)&buf[32], (uint64_t)"kCBCSWriteRemoteNumConfigSupported");
              *((_DWORD *)v27 + 6) = v15;
              uint64_t v16 = sub_100019878();
              v19[0] = _NSConcreteStackBlock;
              v19[1] = 3221225472;
              void v19[2] = sub_1005ABD68;
              v19[3] = &unk_1009B7498;
              uint64_t v22 = a1;
              __int16 v21 = &v26;
              id v20 = v5;
              long long v23 = *(_OWORD *)buf;
              v24[0] = *(_OWORD *)&buf[16];
              *(_OWORD *)((char *)v24 + 10) = *(_OWORD *)&buf[26];
              sub_1000197D8(v16, v19);
            }
            else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
            {
              sub_10077E798();
            }
            goto LABEL_25;
          }
          uint64_t v14 = qword_100A19EC8;
          if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
          {
            uint64_t v17 = *(void *)(a1 + 96);
            uint64_t v18 = *(void *)(a1 + 48);
            *(_DWORD *)long long buf = 138412802;
            *(void *)&uint8_t buf[4] = v17;
            *(_WORD *)&unsigned char buf[12] = 2112;
            *(void *)&uint8_t buf[14] = v18;
            *(_WORD *)&unsigned char buf[22] = 2112;
            *(void *)&unsigned char buf[24] = v5;
            _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
          }
        }
        else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
        {
          sub_10077CB98();
        }
        sub_1004F1028(a1, 117, xdict, 17);
        goto LABEL_25;
      }
    }
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077CA48();
    }
    sub_1004F1028(a1, 117, xdict, 8);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077E764();
  }
LABEL_25:

  _Block_object_dispose(&v26, 8);
}

void sub_1005972E0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v2 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_100597324(uint64_t a1, xpc_object_t xdict)
{
  v15[0] = 0;
  v15[1] = v15;
  void v15[2] = 0x2020000000;
  int v16 = 3;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  uint64_t v6 = sub_10003FB34();
  if ((*(uint64_t (**)(uint64_t))(*(void *)v6 + 2768))(v6))
  {
    if (v5)
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
      }
      if (sub_1006BB9D4((uint64_t)off_1009F7ED8, v5))
      {
        if (qword_1009F8788 != -1) {
          dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
        }
        if (sub_1002F56BC((uint64_t)off_1009F8780, *(void *)(a1 + 128), v5))
        {
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
          }
          if (sub_10002F7F0((uint64_t)off_1009F7ED8, v5, *(void **)(a1 + 96), *(void **)(a1 + 48)))
          {
            if (*(int *)(a1 + 80) > 1)
            {
              uint64_t v8 = sub_100019878();
              v11[0] = _NSConcreteStackBlock;
              v11[1] = 3221225472;
              void v11[2] = sub_1005ABE60;
              uint64_t v11[3] = &unk_1009A9370;
              uint64_t v13 = v15;
              uint64_t v14 = a1;
              id v12 = v5;
              sub_1000197D8(v8, v11);
            }
            else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
            {
              sub_10077E798();
            }
            goto LABEL_25;
          }
          uint64_t v7 = qword_100A19EC8;
          if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
          {
            uint64_t v9 = *(void *)(a1 + 96);
            uint64_t v10 = *(void *)(a1 + 48);
            *(_DWORD *)long long buf = 138412802;
            uint64_t v18 = v9;
            __int16 v19 = 2112;
            uint64_t v20 = v10;
            __int16 v21 = 2112;
            uint64_t v22 = v5;
            _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
          }
        }
        else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
        {
          sub_10077CB98();
        }
        sub_1004F1028(a1, 118, xdict, 17);
        goto LABEL_25;
      }
    }
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077CA48();
    }
    sub_1004F1028(a1, 118, xdict, 8);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077E764();
  }
LABEL_25:

  _Block_object_dispose(v15, 8);
}

void sub_100597688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1005976C8(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v40 = 0;
  uint64_t v41 = &v40;
  uint64_t v42 = 0x2020000000;
  int v43 = 3;
  uint64_t v39 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  int v12 = sub_1000198BC(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgOptions");
  *((_DWORD *)v41 + 6) = v12;
  uint64_t v13 = sub_10003FB34();
  if ((*(uint64_t (**)(uint64_t))(*(void *)v13 + 2768))(v13))
  {
    if (*((_DWORD *)v41 + 6))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077CC00();
      }
      int v14 = 3;
LABEL_24:
      sub_1004F1028(a1, 119, xdict, v14);
      goto LABEL_25;
    }
    if (!v5) {
      goto LABEL_49;
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    if (!sub_1006BB9D4((uint64_t)off_1009F7ED8, v5))
    {
LABEL_49:
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077CA48();
      }
      int v14 = 8;
      goto LABEL_24;
    }
    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
    }
    if ((sub_1002F56BC((uint64_t)off_1009F8780, *(void *)(a1 + 128), v5) & 1) == 0)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077CB98();
      }
      goto LABEL_30;
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    if ((sub_10002F7F0((uint64_t)off_1009F7ED8, v5, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) == 0)
    {
      int v16 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v27 = *(void *)(a1 + 96);
        uint64_t v28 = *(void *)(a1 + 48);
        *(_DWORD *)uint64_t v45 = 138412802;
        *(void *)&v45[4] = v27;
        *(_WORD *)&v45[12] = 2112;
        *(void *)&v45[14] = v28;
        *(_WORD *)&v45[22] = 2112;
        *(void *)&v45[24] = v5;
        _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", v45, 0x20u);
      }
      goto LABEL_30;
    }
    if (*(int *)(a1 + 80) <= 1)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077E7CC();
      }
LABEL_30:
      sub_1004F1028(a1, 119, xdict, 17);
      goto LABEL_25;
    }
    memset(v45, 0, 18);
    *(_OWORD *)&v45[26] = 0u;
    *(void *)&v45[2] = 0x1000100010001;
    *(_WORD *)&v45[10] = 1;
    *(_WORD *)&v45[14] = 1;
    *(_DWORD *)&v45[18] = 0x10000;
    *(void *)&v45[22] = 0;
    *(_WORD *)&v45[30] = 0;
    *(void *)&v45[42] = 0x2000000000001;
    *(_WORD *)&v45[50] = 0;
    int v17 = sub_1000198BC(v39, 0, (uint64_t)&v45[20], (uint64_t)&v45[42], (uint64_t)&v45[44], (uint64_t)&v45[46], (uint64_t)&v45[48], v15, (uint64_t)"kCBCSCreateConfigConfigID");
    *((_DWORD *)v41 + 6) = v17;
    xpc_object_t v18 = xpc_dictionary_get_value(v39, "kCBCSCreateConfigChannelMap");
    if (v18)
    {
      uint64_t v37 = &off_100998428;
      uint64_t v38 = 0;
      __int16 v19 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Raw bytes Channel map data found", buf, 2u);
      }
      int v20 = sub_1002D4184(v18, (uint64_t)&v37);
      *((_DWORD *)v41 + 6) = v20;
      if (v20 && os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077E8C4();
      }
      if ((unsigned __int16)sub_100045F00((uint64_t)&v37) > 0xAuLL)
      {
        long long v23 = qword_100A19EC8;
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
        {
          unsigned __int16 v24 = sub_100045F00((uint64_t)&v37);
          sub_10077E868(v24, buf, v23);
        }
      }
      else
      {
        __int16 v21 = (const void *)sub_10004A6E4((uint64_t)&v37);
        unsigned __int16 v22 = sub_100045F00((uint64_t)&v37);
        memcpy(&v45[22], v21, v22);
      }
      uint64_t v37 = &off_100998428;
      if (v38) {
        sub_1000368F4(v38);
      }
    }
    int v25 = *((_DWORD *)v41 + 6);
    if (v25) {
      goto LABEL_50;
    }
    uint64_t v26 = sub_100019878();
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    void v29[2] = sub_1005ABECC;
    v29[3] = &unk_1009B74C0;
    uint64_t v31 = &v40;
    uint64_t v32 = a1;
    id v30 = v5;
    long long v33 = *(_OWORD *)v45;
    long long v34 = *(_OWORD *)&v45[16];
    long long v35 = *(_OWORD *)&v45[32];
    int v36 = *(_DWORD *)&v45[48];
    sub_1000197D8(v26, v29);

    int v25 = *((_DWORD *)v41 + 6);
    if (v25)
    {
LABEL_50:
      sub_1004F1028(a1, 119, xdict, v25);
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077E800();
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077E764();
  }
LABEL_25:

  _Block_object_dispose(&v40, 8);
}

void sub_100597DE8(_Unwind_Exception *a1)
{
  *(void *)(v3 - 232) = v2;
  uint64_t v5 = *(atomic_uint **)(v3 - 224);
  if (v5) {
    sub_1000368F4(v5);
  }

  _Block_object_dispose((const void *)(v3 - 208), 8);
  _Unwind_Resume(a1);
}

void sub_100597E4C(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v32 = 0;
  long long v33 = &v32;
  uint64_t v34 = 0x2020000000;
  int v35 = 3;
  uint64_t v31 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  int v12 = sub_1000198BC(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgOptions");
  *((_DWORD *)v33 + 6) = v12;
  uint64_t v13 = sub_10003FB34();
  if ((*(uint64_t (**)(uint64_t))(*(void *)v13 + 2768))(v13))
  {
    if (*((_DWORD *)v33 + 6))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077CC00();
      }
      int v14 = 3;
LABEL_24:
      sub_1004F1028(a1, 120, xdict, v14);
      goto LABEL_25;
    }
    if (!v5) {
      goto LABEL_37;
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    if (!sub_1006BB9D4((uint64_t)off_1009F7ED8, v5))
    {
LABEL_37:
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077CA48();
      }
      int v14 = 8;
      goto LABEL_24;
    }
    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
    }
    if ((sub_1002F56BC((uint64_t)off_1009F8780, *(void *)(a1 + 128), v5) & 1) == 0)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077CB98();
      }
      goto LABEL_30;
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    if ((sub_10002F7F0((uint64_t)off_1009F7ED8, v5, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) == 0)
    {
      __int16 v21 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v24 = *(void *)(a1 + 96);
        uint64_t v25 = *(void *)(a1 + 48);
        *(_DWORD *)long long buf = 138412802;
        uint64_t v37 = v24;
        __int16 v38 = 2112;
        uint64_t v39 = v25;
        __int16 v40 = 2112;
        uint64_t v41 = v5;
        _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
      }
      goto LABEL_30;
    }
    if (*(int *)(a1 + 80) <= 1)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077E92C();
      }
LABEL_30:
      sub_1004F1028(a1, 120, xdict, 17);
      goto LABEL_25;
    }
    buf[0] = 0;
    int v22 = sub_1000198BC(v31, 0, v15, v16, v17, v18, v19, v20, (uint64_t)"kCBCSCreateConfigConfigID");
    *((_DWORD *)v33 + 6) = v22;
    if (v22) {
      goto LABEL_38;
    }
    uint64_t v23 = sub_100019878();
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    v26[2] = sub_1005ABF60;
    v26[3] = &unk_1009A9348;
    uint64_t v28 = &v32;
    uint64_t v29 = a1;
    id v27 = v5;
    uint8_t v30 = buf[0];
    sub_1000197D8(v23, v26);

    int v22 = *((_DWORD *)v33 + 6);
    if (v22)
    {
LABEL_38:
      sub_1004F1028(a1, 120, xdict, v22);
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077E960();
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077E764();
  }
LABEL_25:

  _Block_object_dispose(&v32, 8);
}

void sub_1005982B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1005982F4(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v35 = 0;
  int v36 = &v35;
  uint64_t v37 = 0x2020000000;
  int v38 = 3;
  uint64_t v34 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  v32[3] = 0;
  uint64_t v33 = 0;
  v32[0] = 0;
  v32[1] = v32;
  void v32[2] = 0x2020000000;
  int v12 = sub_1000198BC(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgOptions");
  *((_DWORD *)v36 + 6) = v12;
  uint64_t v13 = sub_10003FB34();
  if ((*(uint64_t (**)(uint64_t))(*(void *)v13 + 2768))(v13))
  {
    if (*((_DWORD *)v36 + 6))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077CC00();
      }
      int v14 = 3;
LABEL_24:
      sub_1004F1028(a1, 121, xdict, v14);
      goto LABEL_25;
    }
    if (!v5) {
      goto LABEL_37;
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    if (!sub_1006BB9D4((uint64_t)off_1009F7ED8, v5))
    {
LABEL_37:
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077CA48();
      }
      int v14 = 8;
      goto LABEL_24;
    }
    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
    }
    if ((sub_1002F56BC((uint64_t)off_1009F8780, *(void *)(a1 + 128), v5) & 1) == 0)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077CB98();
      }
      goto LABEL_30;
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    if ((sub_10002F7F0((uint64_t)off_1009F7ED8, v5, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) == 0)
    {
      __int16 v21 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v24 = *(void *)(a1 + 96);
        uint64_t v25 = *(void *)(a1 + 48);
        *(_DWORD *)long long buf = 138412802;
        uint64_t v40 = v24;
        __int16 v41 = 2112;
        uint64_t v42 = v25;
        __int16 v43 = 2112;
        uint64_t v44 = v5;
        _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
      }
      goto LABEL_30;
    }
    if (*(int *)(a1 + 80) <= 1)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077E9C8();
      }
LABEL_30:
      sub_1004F1028(a1, 121, xdict, 17);
      goto LABEL_25;
    }
    int v22 = sub_1000198BC(v34, 0, v15, v16, v17, v18, v19, v20, (uint64_t)"kCBCSSetConfigID");
    *((_DWORD *)v36 + 6) = v22;
    if (v22) {
      goto LABEL_38;
    }
    uint64_t v23 = sub_100019878();
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    v26[2] = sub_1005ABFD0;
    v26[3] = &unk_1009B74E8;
    uint64_t v30 = a1;
    uint64_t v28 = &v35;
    id v27 = v5;
    uint64_t v29 = v32;
    uint64_t v31 = v33;
    sub_1000197D8(v23, v26);

    int v22 = *((_DWORD *)v36 + 6);
    if (v22)
    {
LABEL_38:
      sub_1004F1028(a1, 121, xdict, v22);
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077E9FC();
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077E764();
  }
LABEL_25:
  _Block_object_dispose(v32, 8);

  _Block_object_dispose(&v35, 8);
}

void sub_1005987A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v18 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1005987F4(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v29 = 0;
  uint64_t v30 = &v29;
  uint64_t v31 = 0x2020000000;
  int v32 = 3;
  uint64_t v28 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  int v12 = sub_1000198BC(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgOptions");
  *((_DWORD *)v30 + 6) = v12;
  uint64_t v13 = sub_10003FB34();
  if ((*(uint64_t (**)(uint64_t))(*(void *)v13 + 2768))(v13))
  {
    if (*((_DWORD *)v30 + 6))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077CC00();
      }
      int v14 = 3;
LABEL_24:
      sub_1004F1028(a1, 122, xdict, v14);
      goto LABEL_25;
    }
    if (!v5) {
      goto LABEL_37;
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    if (!sub_1006BB9D4((uint64_t)off_1009F7ED8, v5))
    {
LABEL_37:
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077CA48();
      }
      int v14 = 8;
      goto LABEL_24;
    }
    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
    }
    if ((sub_1002F56BC((uint64_t)off_1009F8780, *(void *)(a1 + 128), v5) & 1) == 0)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077CB98();
      }
      goto LABEL_30;
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    if ((sub_10002F7F0((uint64_t)off_1009F7ED8, v5, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) == 0)
    {
      uint64_t v17 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v20 = *(void *)(a1 + 96);
        uint64_t v21 = *(void *)(a1 + 48);
        *(_DWORD *)long long buf = 138412802;
        *(void *)&uint8_t buf[4] = v20;
        *(_WORD *)&unsigned char buf[12] = 2112;
        *(void *)&uint8_t buf[14] = v21;
        *(_WORD *)&unsigned char buf[22] = 2112;
        uint64_t v34 = v5;
        _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
      }
      goto LABEL_30;
    }
    if (*(int *)(a1 + 80) <= 1)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077EA64();
      }
LABEL_30:
      sub_1004F1028(a1, 122, xdict, 17);
      goto LABEL_25;
    }
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    *(void *)&uint8_t buf[14] = 0;
    *(_WORD *)&unsigned char buf[22] = 257;
    int v18 = sub_1000198BC(v28, 0, (uint64_t)&buf[18], (uint64_t)&buf[20], (uint64_t)&buf[22], (uint64_t)"kCBCSSNRControlReflector", v15, v16, (uint64_t)"kCBCSCreateConfigConfigID");
    *((_DWORD *)v30 + 6) = v18;
    if (v18) {
      goto LABEL_38;
    }
    uint64_t v19 = sub_100019878();
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    void v22[2] = sub_1005AC04C;
    v22[3] = &unk_1009B7510;
    uint64_t v24 = &v29;
    uint64_t v25 = a1;
    id v23 = v5;
    long long v26 = *(_OWORD *)buf;
    uint64_t v27 = *(void *)&buf[16];
    sub_1000197D8(v19, v22);

    int v18 = *((_DWORD *)v30 + 6);
    if (v18)
    {
LABEL_38:
      sub_1004F1028(a1, 122, xdict, v18);
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077EA98();
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077E764();
  }
LABEL_25:

  _Block_object_dispose(&v29, 8);
}

void sub_100598D50(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v2 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_100598D94(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v25 = 0;
  long long v26 = &v25;
  uint64_t v27 = 0x2020000000;
  int v28 = 3;
  id v23 = &off_100998428;
  uint64_t v24 = 0;
  xpc_object_t xdicta = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int v11 = sub_1000198BC(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgOptions");
  *((_DWORD *)v26 + 6) = v11;
  uint64_t v12 = sub_10003FB34();
  if ((*(uint64_t (**)(uint64_t))(*(void *)v12 + 2768))(v12))
  {
    if (*((_DWORD *)v26 + 6))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077CC00();
      }
      sub_1004F1028(a1, 123, xdict, 3);
      goto LABEL_8;
    }
    if (*(int *)(a1 + 80) <= 1)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077EB00();
      }
      sub_1004F1028(a1, 123, xdict, 17);
      goto LABEL_8;
    }
    xpc_object_t v13 = xpc_dictionary_get_value(xdicta, "kCBCSChannelClassification");
    if (!v13)
    {
      if (*((_DWORD *)v26 + 6))
      {
LABEL_25:
        int v17 = *((_DWORD *)v26 + 6);
        if (v17)
        {
          sub_1004F1028(a1, 123, xdict, v17);
          if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
            sub_10077EB34();
          }
        }
        goto LABEL_8;
      }
LABEL_21:
      uint64_t v16 = sub_100019878();
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3321888768;
      void v18[2] = sub_1005AC0D4;
      v18[3] = &unk_1009B7538;
      void v18[4] = &v25;
      v18[5] = a1;
      uint64_t v19 = &off_100998428;
      uint64_t v20 = v24;
      if (v24) {
        sub_100037354((uint64_t)v24);
      }
      sub_1000197D8(v16, v18);
      uint64_t v19 = &off_100998428;
      if (v20) {
        sub_1000368F4(v20);
      }
      goto LABEL_25;
    }
    int v14 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Channel Classification data found", buf, 2u);
    }
    int v15 = sub_1002D4184(v13, (uint64_t)&v23);
    *((_DWORD *)v26 + 6) = v15;
    if (!v15) {
      goto LABEL_21;
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077E764();
  }
LABEL_8:
  id v23 = &off_100998428;
  if (v24) {
    sub_1000368F4(v24);
  }
  _Block_object_dispose(&v25, 8);
}

void sub_1005990D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, atomic_uint *a20)
{
  if (a20) {
    sub_1000368F4(a20);
  }
  *(void *)(v21 - 96) = v20;
  id v23 = *(atomic_uint **)(v21 - 88);
  if (v23) {
    sub_1000368F4(v23);
  }
  _Block_object_dispose((const void *)(v21 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_100599114(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v33 = 0;
  uint64_t v34 = &v33;
  uint64_t v35 = 0x2020000000;
  int v36 = 3;
  int v32 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v5 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  int v12 = sub_1000198BC(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgOptions");
  *((_DWORD *)v34 + 6) = v12;
  uint64_t v13 = sub_10003FB34();
  if ((*(uint64_t (**)(uint64_t))(*(void *)v13 + 2768))(v13))
  {
    if (*((_DWORD *)v34 + 6))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        goto LABEL_9;
      }
      goto LABEL_10;
    }
    int v20 = sub_1000198BC(v32, 1, v14, v15, v16, v17, v18, v19, (uint64_t)"kCBCSDefaultSettingsRoleEnable");
    *((_DWORD *)v34 + 6) = v20;
    if (v20)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
LABEL_9:
      }
        sub_10077CC00();
LABEL_10:
      sub_1004F1028(a1, 124, xdict, 3);
      goto LABEL_11;
    }
    if (*(int *)(a1 + 80) > 1)
    {
      uint64_t v21 = sub_100019878();
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472;
      void v23[2] = sub_1005AC1A4;
      v23[3] = &unk_1009B7510;
      uint64_t v25 = &v33;
      uint64_t v26 = a1;
      id v24 = v5;
      uint64_t v27 = v31;
      uint64_t v28 = v30;
      uint64_t v29 = 20;
      sub_1000197D8(v21, v23);

      int v22 = *((_DWORD *)v34 + 6);
      if (v22)
      {
        sub_1004F1028(a1, 124, xdict, v22);
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
          sub_10077EB34();
        }
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077EB9C();
      }
      sub_1004F1028(a1, 124, xdict, 17);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077E764();
  }
LABEL_11:

  _Block_object_dispose(&v33, 8);
}

void sub_100599410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Block_object_dispose((const void *)(v21 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_100599448(uint64_t a1, void *a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  int v11 = 3;
  uint64_t v4 = sub_10003FB34();
  if ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 2768))(v4))
  {
    uint64_t v5 = sub_100019878();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    void v7[2] = sub_1005AC21C;
    void v7[3] = &unk_100999720;
    void v7[4] = &v8;
    void v7[5] = a1;
    sub_1000197D8(v5, v7);
    int v6 = *((_DWORD *)v9 + 6);
    if (v6)
    {
      sub_1004F1028(a1, 125, a2, v6);
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077EBD0();
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077E764();
  }
  _Block_object_dispose(&v8, 8);
}

void sub_1005995A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1005995B8(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2020000000;
  int v19 = 3;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  uint64_t v6 = sub_10003FB34();
  if ((*(uint64_t (**)(uint64_t))(*(void *)v6 + 2768))(v6))
  {
    if (!v5) {
      goto LABEL_32;
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    if (sub_1006BB9D4((uint64_t)off_1009F7ED8, v5))
    {
      if (qword_1009F8788 != -1) {
        dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
      }
      if ((sub_1002F56BC((uint64_t)off_1009F8780, *(void *)(a1 + 128), v5) & 1) == 0)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
          sub_10077CB98();
        }
        goto LABEL_24;
      }
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
      }
      if ((sub_10002F7F0((uint64_t)off_1009F7ED8, v5, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) == 0)
      {
        uint64_t v7 = qword_100A19EC8;
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v10 = *(void *)(a1 + 96);
          uint64_t v11 = *(void *)(a1 + 48);
          *(_DWORD *)long long buf = 138412802;
          uint64_t v21 = v10;
          __int16 v22 = 2112;
          uint64_t v23 = v11;
          __int16 v24 = 2112;
          uint64_t v25 = v5;
          _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
        }
        goto LABEL_24;
      }
      if (*(int *)(a1 + 80) <= 1)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
          sub_10077EA64();
        }
LABEL_24:
        sub_1004F1028(a1, 126, xdict, 17);
        goto LABEL_25;
      }
      uint64_t v8 = sub_100019878();
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      void v12[2] = sub_1005AC284;
      v12[3] = &unk_1009A9370;
      uint64_t v14 = &v16;
      uint64_t v15 = a1;
      id v13 = v5;
      sub_1000197D8(v8, v12);
      int v9 = *((_DWORD *)v17 + 6);
      if (v9)
      {
        sub_1004F1028(a1, 126, xdict, v9);
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
          sub_10077EA98();
        }
      }
    }
    else
    {
LABEL_32:
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077CA48();
      }
      sub_1004F1028(a1, 126, xdict, 8);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077E764();
  }
LABEL_25:

  _Block_object_dispose(&v16, 8);
}

void sub_100599960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1005999B0(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v31 = 0;
  int v32 = &v31;
  uint64_t v33 = 0x2020000000;
  int v34 = 3;
  uint64_t v29 = &off_100998428;
  uint64_t v30 = 0;
  xpc_object_t xdicta = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  uint64_t v6 = sub_10003FB34();
  if ((*(uint64_t (**)(uint64_t))(*(void *)v6 + 2768))(v6))
  {
    int v13 = sub_1000198BC(value, 1, v7, v8, v9, v10, v11, v12, (uint64_t)"kCBMsgArgOptions");
    *((_DWORD *)v32 + 6) = v13;
    if (v13)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077CC00();
      }
      int v14 = 3;
LABEL_24:
      sub_1004F1028(a1, 127, xdict, v14);
      goto LABEL_25;
    }
    if (!v5) {
      goto LABEL_49;
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    if (!sub_1006BB9D4((uint64_t)off_1009F7ED8, v5))
    {
LABEL_49:
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077CA48();
      }
      int v14 = 8;
      goto LABEL_24;
    }
    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
    }
    if ((sub_1002F56BC((uint64_t)off_1009F8780, *(void *)(a1 + 128), v5) & 1) == 0)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077CB98();
      }
      goto LABEL_39;
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    if ((sub_10002F7F0((uint64_t)off_1009F7ED8, v5, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) == 0)
    {
      uint64_t v15 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v20 = *(void *)(a1 + 96);
        uint64_t v21 = *(void *)(a1 + 48);
        *(_DWORD *)long long buf = 138412802;
        uint64_t v36 = v20;
        __int16 v37 = 2112;
        uint64_t v38 = v21;
        __int16 v39 = 2112;
        uint64_t v40 = v5;
        _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
      }
      goto LABEL_39;
    }
    if (*(int *)(a1 + 80) <= 1)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077EA64();
      }
LABEL_39:
      sub_1004F1028(a1, 127, xdict, 17);
      goto LABEL_25;
    }
    xpc_object_t v16 = xpc_dictionary_get_value(xdicta, "kCBCSReflectorFAETable");
    if (!v16)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077EC38();
      }
      goto LABEL_39;
    }
    int v17 = sub_1002D4184(v16, (uint64_t)&v29);
    *((_DWORD *)v32 + 6) = v17;
    if (v17)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077EC6C();
      }
    }
    else
    {
      uint64_t v18 = sub_100019878();
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3321888768;
      void v22[2] = sub_1005AC2F0;
      v22[3] = &unk_1009B7570;
      __int16 v24 = &v31;
      uint64_t v25 = a1;
      id v23 = v5;
      uint64_t v26 = &off_100998428;
      uint64_t v27 = v30;
      if (v30) {
        sub_100037354((uint64_t)v30);
      }
      sub_1000197D8(v18, v22);
      uint64_t v26 = &off_100998428;
      if (v27) {
        sub_1000368F4(v27);
      }

      int v19 = *((_DWORD *)v32 + 6);
      if (v19)
      {
        sub_1004F1028(a1, 127, xdict, v19);
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
          sub_10077EA98();
        }
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077E764();
  }
LABEL_25:

  uint64_t v29 = &off_100998428;
  if (v30) {
    sub_1000368F4(v30);
  }
  _Block_object_dispose(&v31, 8);
}

void sub_100599EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, atomic_uint *a17, ...)
{
  va_start(va, a17);

  if (a17) {
    sub_1000368F4(a17);
  }
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100599F48(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v49 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v11 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  int v12 = *(_DWORD *)(a1 + 80);
  if (v12 == 2 || v12 == 1 && sub_100014448())
  {
    int v19 = sub_1000198BC(value, 0, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgOptions");
    if (v19)
    {
      sub_1004F1028(a1, 128, xdict, v19);
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077EE74();
      }
    }
    int v26 = sub_1000198BC(v49, 0, v13, v14, v15, v16, v17, v18, (uint64_t)"kCBLeSetPhyAllPhys");
    if (v26)
    {
      sub_1004F1028(a1, 128, xdict, v26);
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077EE0C();
      }
    }
    int v33 = sub_1000198BC(v49, 0, v20, v21, v22, v23, v24, v25, (uint64_t)"kCBLeSetPhyTxPhys");
    if (v33)
    {
      sub_1004F1028(a1, 128, xdict, v33);
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077EDA4();
      }
    }
    int v40 = sub_1000198BC(v49, 0, v27, v28, v29, v30, v31, v32, (uint64_t)"kCBLeSetPhyRxPhys");
    if (v40)
    {
      sub_1004F1028(a1, 128, xdict, v40);
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077ED3C();
      }
    }
    int v41 = sub_1000198BC(v49, 0, v34, v35, v36, v37, v38, v39, (uint64_t)"kCBLeSetPhyRxPhyOptions");
    if (v41)
    {
      sub_1004F1028(a1, 128, xdict, v41);
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077ECD4();
      }
    }
    uint64_t v42 = sub_100019878();
    v43[0] = _NSConcreteStackBlock;
    v43[1] = 3221225472;
    v43[2] = sub_1005AC360;
    v43[3] = &unk_1009B75A8;
    id v44 = v11;
    uint64_t v45 = v53;
    uint64_t v46 = v52;
    uint64_t v47 = v51;
    uint64_t v48 = v50;
    sub_1000197D8(v42, v43);
  }
}

void sub_10059A284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_10059A2A4(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v96 = 0;
  uint64_t v97 = &v96;
  uint64_t v98 = 0x2020000000;
  int v99 = 3;
  uint64_t v95 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v11 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  uint64_t v94 = 0;
  uint64_t v93 = 0;
  uint64_t v92 = -120;
  uint64_t v91 = -120;
  uint64_t v90 = -120;
  uint64_t v89 = 0;
  uint64_t v88 = 0;
  uint64_t v87 = 0;
  uint64_t v86 = 0;
  uint64_t v85 = 0;
  uint64_t v84 = 0;
  uint64_t v83 = 0;
  uint64_t v82 = 0;
  uint64_t v81 = 0;
  uint64_t v80 = 0;
  uint64_t v79 = 0;
  uint64_t v78 = 0;
  uint64_t v77 = 0;
  if (*(int *)(a1 + 80) >= 1)
  {
    int v12 = sub_1000198BC(value, 0, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgOptions");
    *((_DWORD *)v97 + 6) = v12;
    int v19 = sub_1000198BC(v95, 0, v13, v14, v15, v16, v17, v18, (uint64_t)"kCBRSSIStatisticAndDetectionEnable");
    *((_DWORD *)v97 + 6) = v19;
    BOOL v36 = v94 != 0;
    char v20 = v93;
    char v48 = v92;
    char v47 = v91;
    char v21 = v90;
    char v22 = v89;
    char v46 = v88;
    char v45 = v87;
    __int16 v43 = v85;
    __int16 v44 = v86;
    char v41 = v83;
    __int16 v42 = v84;
    int v40 = v82;
    int v39 = v81;
    int v38 = v80;
    char v50 = v79;
    char v37 = v77;
    char v49 = v78;
    uint64_t v23 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
    {
      id v24 = [*(id *)(a1 + 96) UTF8String];
      *(_DWORD *)long long buf = 136384259;
      id v101 = v24;
      __int16 v102 = 1024;
      BOOL v103 = v94 != 0;
      __int16 v104 = 1024;
      int v105 = v93;
      __int16 v106 = 1024;
      int v107 = (unsigned __int16)v84;
      __int16 v108 = 1024;
      int v109 = v83;
      __int16 v110 = 1024;
      int v111 = (char)v92;
      __int16 v112 = 1024;
      int v113 = (char)v91;
      __int16 v114 = 1024;
      int v115 = (char)v90;
      __int16 v116 = 1024;
      int v117 = (char)v89;
      __int16 v118 = 1024;
      int v119 = (char)v88;
      __int16 v120 = 1024;
      int v121 = (char)v87;
      __int16 v122 = 1024;
      int v123 = (unsigned __int16)v86;
      __int16 v124 = 1024;
      int v125 = (unsigned __int16)v85;
      __int16 v126 = 1024;
      int v127 = v78;
      __int16 v128 = 1024;
      int v129 = v79;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Initiate CBMsgIdConfigureRSSIDetectionAndStatistics by %{private}s enable=%d  window=%d mask=%d:%d Further=%d:%d:%d closer=%d:%d:%d var=%d:%d aopPath=%d Debug=%d", buf, 0x60u);
      int v19 = *((_DWORD *)v97 + 6);
    }
    if (v19)
    {
      sub_1004F1028(a1, 214, xdict, v19);
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077EFB8();
      }
    }
    if (v11)
    {
      uint64_t v76 = 0;
      if (qword_1009F7EC0 != -1) {
        dispatch_once(&qword_1009F7EC0, &stru_1009B7AC8);
      }
      uint64_t v25 = off_1009F7EB8;
      sub_1000305AC(buf, v11);
      if (sub_1006856B8((uint64_t)v25, buf, &v76))
      {
        uint64_t v26 = sub_100019878();
        v51[0] = _NSConcreteStackBlock;
        v51[1] = 3221225472;
        void v51[2] = sub_1005AC40C;
        v51[3] = &unk_1009B75D0;
        uint64_t v54 = a1;
        uint64_t v53 = &v96;
        id v52 = v11;
        BOOL v55 = v36;
        char v56 = v20;
        char v57 = v48;
        char v58 = v47;
        char v59 = v21;
        char v60 = v22;
        char v61 = v46;
        char v62 = v45;
        __int16 v63 = v44;
        __int16 v64 = v43;
        __int16 v65 = v42;
        char v66 = v41;
        char v67 = 0;
        int v68 = v40;
        int v69 = v39;
        int v70 = v38;
        char v71 = v50;
        char v72 = v37;
        char v73 = v49;
        char v74 = 0;
        int v75 = 0;
        sub_1000197D8(v26, v51);
      }
      else
      {
        *((_DWORD *)v97 + 6) = 312;
        uint64_t v27 = qword_100A19EC8;
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
          sub_10077EF44(v27, v28, v29, v30, v31, v32, v33, v34);
        }
      }
    }
    int v35 = *((_DWORD *)v97 + 6);
    if (v35)
    {
      sub_1004F1028(a1, 214, xdict, v35);
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077EEDC();
      }
    }
  }

  _Block_object_dispose(&v96, 8);
}

void sub_10059A930(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v2 - 240), 8);
  _Unwind_Resume(a1);
}

void sub_10059A97C(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v43 = 0;
  __int16 v44 = &v43;
  uint64_t v45 = 0x2020000000;
  int v46 = 3;
  __int16 v42 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v11 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  if (*(int *)(a1 + 80) >= 1)
  {
    int v12 = sub_1000198BC(value, 0, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgOptions");
    *((_DWORD *)v44 + 6) = v12;
    int v19 = sub_1000198BC(v42, 0, v13, v14, v15, v16, v17, v18, (uint64_t)"kCBBluetoothUsageEnable");
    char v20 = v44;
    *((_DWORD *)v44 + 6) = v19;
    __int16 v21 = v40;
    __int16 v22 = v39;
    uint64_t v23 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
    {
      id v24 = [*(id *)(a1 + 96) UTF8String];
      *(_DWORD *)long long buf = 67109635;
      int v48 = v40;
      __int16 v49 = 1024;
      int v50 = v39;
      __int16 v51 = 2081;
      id v52 = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Initiate CBMsgIdConfigureUsageDetection max=%d min=%d for app %{private}s\t", buf, 0x18u);
      char v20 = v44;
      int v19 = *((_DWORD *)v44 + 6);
    }
    if (v19)
    {
      sub_1004F1028(a1, 215, xdict, v19);
      uint64_t v25 = qword_100A19EC8;
      BOOL v26 = os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR);
      char v20 = v44;
      if (v26)
      {
        int v29 = *((_DWORD *)v44 + 6);
        *(_DWORD *)long long buf = 67109120;
        int v48 = v29;
        _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Failed to convertXPC options  for handleConfigureUsageNotification: %d", buf, 8u);
        char v20 = v44;
      }
    }
    int v27 = *((_DWORD *)v20 + 6);
    if (!v27 && v11)
    {
      uint64_t v28 = sub_100019878();
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3221225472;
      void v30[2] = sub_1005AC49C;
      v30[3] = &unk_1009B75F8;
      uint64_t v32 = &v43;
      uint64_t v33 = a1;
      uint64_t v34 = v41;
      __int16 v36 = v21;
      __int16 v37 = v22;
      id v31 = v11;
      uint64_t v35 = v38;
      sub_1000197D8(v28, v30);

      int v27 = *((_DWORD *)v44 + 6);
    }
    if (v27)
    {
      sub_1004F1028(a1, 215, xdict, v27);
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077F020();
      }
    }
  }

  _Block_object_dispose(&v43, 8);
}

void sub_10059ACCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  _Block_object_dispose((const void *)(v27 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_10059AD10(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v40 = 0;
  uint64_t v41 = &v40;
  uint64_t v42 = 0x2020000000;
  int v43 = 3;
  uint64_t v39 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v11 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  uint64_t v38 = 0;
  uint64_t v37 = 0;
  if (*(int *)(a1 + 80) >= 1)
  {
    int v12 = sub_1000198BC(value, 0, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgOptions");
    *((_DWORD *)v41 + 6) = v12;
    int v19 = sub_1000198BC(v39, 0, v13, v14, v15, v16, v17, v18, (uint64_t)"kCBPhyStatsConfigEnable");
    char v20 = v41;
    *((_DWORD *)v41 + 6) = v19;
    __int16 v21 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
    {
      id v22 = [*(id *)(a1 + 96) UTF8String];
      *(_DWORD *)long long buf = 67109379;
      int v45 = v37;
      __int16 v46 = 2081;
      id v47 = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Initiate CBMsgIdConfigureUsageStatistics Subrate=%d for App %{private}s", buf, 0x12u);
      char v20 = v41;
      int v19 = *((_DWORD *)v41 + 6);
    }
    if (v19)
    {
      sub_1004F1028(a1, 216, xdict, v19);
      uint64_t v23 = qword_100A19EC8;
      BOOL v24 = os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR);
      char v20 = v41;
      if (v24)
      {
        int v27 = *((_DWORD *)v41 + 6);
        *(_DWORD *)long long buf = 67109120;
        int v45 = v27;
        _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "Failed to convertXPC options  for handleConfigureUsageNotification: %d", buf, 8u);
        char v20 = v41;
      }
    }
    int v25 = *((_DWORD *)v20 + 6);
    if (!v25 && v11)
    {
      uint64_t v26 = sub_100019878();
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472;
      _OWORD v28[2] = sub_1005AC51C;
      v28[3] = &unk_1009B7620;
      uint64_t v30 = &v40;
      uint64_t v31 = a1;
      uint64_t v32 = v38;
      id v29 = v11;
      uint64_t v33 = v37;
      long long v34 = 0u;
      long long v35 = 0u;
      uint64_t v36 = 0;
      sub_1000197D8(v26, v28);

      int v25 = *((_DWORD *)v41 + 6);
    }
    if (v25)
    {
      sub_1004F1028(a1, 216, xdict, v25);
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077F088();
      }
    }
  }

  _Block_object_dispose(&v40, 8);
}

void sub_10059B02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Block_object_dispose((const void *)(v21 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_10059B070(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v42 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v4 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  if (sub_1000198BC(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgOptions"))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077CC00();
    }
  }
  else
  {
    if (!v4) {
      goto LABEL_39;
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    if (sub_1006BB9D4((uint64_t)off_1009F7ED8, v4))
    {
      if (qword_1009F8788 != -1) {
        dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
      }
      if (sub_1002F56BC((uint64_t)off_1009F8780, *(void *)(a1 + 128), v4))
      {
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
        }
        if (sub_10002F7F0((uint64_t)off_1009F7ED8, v4, *(void **)(a1 + 96), *(void **)(a1 + 48)))
        {
          uint64_t v40 = 0;
          uint64_t v41 = 0;
          int v17 = sub_1000198BC(v42, 0, v11, v12, v13, v14, v15, v16, (uint64_t)"@kCBConnectOptionOpportunistic");
          uint64_t v18 = +[ConnectOptions alertOptionsWithConnectionAlerts:0 disconnectionAlerts:0 notificationAlerts:0 delay:0 bridgeTransport:0];
          int v19 = v18;
          if (*(int *)(a1 + 80) >= 1
            && ([v18 setOpportunistic:v41 != 0],
                sub_1002D5194(v42, "kCBOptionUseCaseList"),
                char v20 = objc_claimAutoreleasedReturnValue(),
                (uint64_t v21 = v20) != 0))
          {
            if ([v20 count])
            {
              id v22 = +[NSSet setWithArray:v21];
              uint64_t v23 = [v22 allObjects];

              uint64_t v21 = [v23 sortedArrayUsingSelector:"compare:"];

              [v19 setUseCaseList:v21];
              BOOL v24 = sub_1005AA6EC(v21);
              int v25 = qword_100A19EC8;
              if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v26 = [v24 componentsJoinedByString:@","];
                *(_DWORD *)long long buf = 138412290;
                __int16 v44 = v26;
                _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "connUseCaseList: %@", buf, 0xCu);
              }
              if (![v19 connectionUseCase])
              {
                int v27 = [v21 firstObject];
                uint64_t v28 = v27;
                if (v27)
                {
                  [v19 setConnectionUseCase:[v27 longLongValue]];
                  id v29 = qword_100A19EC8;
                  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t v30 = sub_10003C778((int)[v28 longLongValue]);
                    *(_DWORD *)long long buf = 136315138;
                    __int16 v44 = v30;
                    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "default useCase derived from useCaseList: %s", buf, 0xCu);
                  }
                }
              }
            }
            uint64_t v31 = v21;
          }
          else
          {
            uint64_t v31 = 0;
          }
          if (!v17)
          {
            uint64_t v35 = sub_100019878();
            v36[0] = _NSConcreteStackBlock;
            v36[1] = 3221225472;
            void v36[2] = sub_1005AA9C8;
            v36[3] = &unk_1009996F8;
            uint64_t v39 = a1;
            id v37 = v4;
            id v38 = v19;
            sub_1000197D8(v35, v36);
          }
        }
        else
        {
          uint64_t v32 = qword_100A19EC8;
          if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
          {
            uint64_t v33 = *(const char **)(a1 + 96);
            uint64_t v34 = *(void *)(a1 + 48);
            *(_DWORD *)long long buf = 138412802;
            __int16 v44 = v33;
            __int16 v45 = 2112;
            uint64_t v46 = v34;
            __int16 v47 = 2112;
            int v48 = v4;
            _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
          }
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
      {
        sub_10077CB98();
      }
    }
    else
    {
LABEL_39:
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077CA48();
      }
    }
  }
}

void sub_10059B5C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10059B648(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  uint64_t v6 = (void *)v5;
  if (*(int *)(a1 + 80) < 1)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077F26C();
    }
    int v9 = 11;
    goto LABEL_21;
  }
  if (!v5)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077F158();
    }
    goto LABEL_20;
  }
  uint64_t v13 = 0;
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009B7AC8);
  }
  uint64_t v7 = off_1009F7EB8;
  sub_1000305AC(buf, v6);
  if (!sub_1006856B8((uint64_t)v7, buf, &v13))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077F204();
    }
    goto LABEL_20;
  }
  buf[0] = 0;
  sub_10001B8E0(buf);
  if (!sub_100197770(v13))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077F18C();
    }
    sub_10001B8AC(buf);
LABEL_20:
    int v9 = 8;
    goto LABEL_21;
  }
  sub_10001B910(buf);
  uint64_t v8 = sub_10003FB34();
  int v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 2928))(v8, v13, 0xFFFFLL, 1, 1, 1);
  sub_10001B8AC(buf);
  if (!v9)
  {
    uint64_t v10 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v15 = v6;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Counter events for %@ started", buf, 0xCu);
      int v9 = 0;
    }
    goto LABEL_23;
  }
LABEL_21:
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
    sub_10077F0F0();
  }
LABEL_23:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  uint64_t v12 = reply;
  if (reply)
  {
    xpc_dictionary_set_int64(reply, "kCBMsgArgResult", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v12);
    xpc_release(v12);
  }
}

void sub_10059B8F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10059B928(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  uint64_t v6 = (void *)v5;
  if (*(int *)(a1 + 80) < 1)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077F2A0();
    }
    int v9 = 11;
    goto LABEL_21;
  }
  if (!v5)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077F158();
    }
    goto LABEL_20;
  }
  uint64_t v13 = 0;
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009B7AC8);
  }
  uint64_t v7 = off_1009F7EB8;
  sub_1000305AC(buf, v6);
  if (!sub_1006856B8((uint64_t)v7, buf, &v13))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077F204();
    }
    goto LABEL_20;
  }
  buf[0] = 0;
  sub_10001B8E0(buf);
  if (!sub_100197770(v13))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077F18C();
    }
    sub_10001B8AC(buf);
LABEL_20:
    int v9 = 8;
    goto LABEL_21;
  }
  sub_10001B910(buf);
  uint64_t v8 = sub_10003FB34();
  int v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t))(*(void *)v8 + 2928))(v8, v13, 0xFFFFLL, 1, 0, 1);
  sub_10001B8AC(buf);
  if (!v9)
  {
    uint64_t v10 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v15 = v6;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Counter events for %@ stopped", buf, 0xCu);
      int v9 = 0;
    }
    goto LABEL_23;
  }
LABEL_21:
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
    sub_10077F0F0();
  }
LABEL_23:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  uint64_t v12 = reply;
  if (reply)
  {
    xpc_dictionary_set_int64(reply, "kCBMsgArgResult", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v12);
    xpc_release(v12);
  }
}

void sub_10059BBD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10059BC08(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  sub_1002D49BC(value, "kCBMsgArgDevices");
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  for (unsigned __int16 i = 0; (uint64_t)[v5 longValue] > i; ++i)
  {
    uint64_t v4 = sub_100019878();
    sub_100013018(v4, &stru_1009B7788);
    usleep(0x64u);
  }
}

void sub_10059BC9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10059BCB0(uint64_t a1, xpc_object_t xdict)
{
  if (*(int *)(a1 + 80) > 1)
  {
    xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    uint64_t v3 = sub_100019738(value, "kCBSetIRKForAddressPublicAddress");
    unint64_t v4 = sub_1006ADA24(v3);
    unint64_t v5 = sub_10022A5E0(v4);
    uint64_t v6 = sub_1002D4930(value, "kCBSetIRKForAddressIRK");
    if ([v6 length] == (id)16)
    {
      uint64_t v7 = sub_100019878();
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      void v8[2] = sub_1005B2500;
      v8[3] = &unk_1009ADAC8;
      id v9 = v6;
      uint64_t v10 = 16;
      char v11 = 0;
      __int16 v13 = WORD2(v5);
      int v12 = v5;
      sub_1000197D8(v7, v8);
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
    {
      sub_10077CAFC();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077F2D4();
  }
}

void sub_10059BE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10059BE50(uint64_t a1, xpc_object_t xdict)
{
  if (*(int *)(a1 + 80) > 1)
  {
    xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    uint64_t v3 = sub_100019738(value, "kCBSetIRKForAddressPublicAddress");
    unint64_t v4 = sub_1006ADA24(v3);
    unint64_t v5 = sub_10022A5E0(v4);
    uint64_t v6 = sub_100019878();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    void v7[2] = sub_1005B25B0;
    void v7[3] = &unk_1009B1ED0;
    char v8 = 0;
    int v9 = v5;
    __int16 v10 = WORD2(v5);
    sub_1000197D8(v6, v7);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077F308();
  }
}

void sub_10059BF40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10059BF54(uint64_t a1, xpc_object_t xdict)
{
  if (*(int *)(a1 + 80) > 1)
  {
    xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    uint64_t v3 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
    uint64_t v4 = sub_100019878();
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    void v6[2] = sub_1005B2614;
    v6[3] = &unk_100997450;
    id v5 = v3;
    id v7 = v5;
    sub_1000197D8(v4, v6);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077F33C();
  }
}

void sub_10059C04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10059C06C(uint64_t a1, xpc_object_t original)
{
  if (*(int *)(a1 + 80) <= 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077F370();
    }
  }
  else
  {
    xpc_object_t reply = xpc_dictionary_create_reply(original);
    if (reply)
    {
      id v5 = reply;
      xpc_object_t value = xpc_dictionary_get_value(original, "kCBMsgArgs");
      xpc_object_t array = xpc_dictionary_get_array(value, "kCBMsgArgAnyConnectedPeripheralsPerApp");
      if (array)
      {
        char v8 = array;
        if (xpc_get_type(array) == (xpc_type_t)&_xpc_type_array)
        {
          if (xpc_array_get_count(v8))
          {
            size_t v9 = 0;
            do
            {
              string = xpc_array_get_string(v8, v9);
              if (string)
              {
                char v11 = string;
                int v12 = +[NSString stringWithUTF8String:string];
                if (qword_1009F8788 != -1) {
                  dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
                }
                char v13 = sub_1002F4970((uint64_t)off_1009F8780, v12);
                xpc_dictionary_set_BOOL(v5, v11, v13);
              }
              ++v9;
            }
            while (v9 < xpc_array_get_count(v8));
          }
        }
      }
      xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v5);
      xpc_release(v5);
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
    {
      sub_10077F3A4();
    }
  }
}

void sub_10059C234(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10059C244(uint64_t a1, void *a2)
{
  if (*(int *)(a1 + 80) >= 1
    && (uint64_t v4 = sub_100035F54(), ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 344))(v4) & 1) != 0))
  {
    memset(bytes, 0, sizeof(bytes));
    uint64_t v5 = sub_10003FB34();
    int v6 = (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t))(*(void *)v5 + 3456))(v5, bytes, 32);
    id v7 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_INFO))
    {
      v10[0] = 68157954;
      v10[1] = 32;
      __int16 v11 = 2096;
      int v12 = bytes;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "LPEM data: %.32P", (uint8_t *)v10, 0x12u);
    }
    xpc_object_t reply = xpc_dictionary_create_reply(a2);
    if (reply)
    {
      size_t v9 = reply;
      xpc_dictionary_set_data(reply, "kCBMsgArgLPEMData", bytes, 0x20uLL);
      xpc_dictionary_set_int64(v9, "kCBMsgArgResult", v6);
      xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v9);
      xpc_release(v9);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077F3D8();
  }
}

void sub_10059C40C(uint64_t a1, xpc_object_t xdict)
{
  if (*(int *)(a1 + 80) <= 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077F40C();
    }
  }
  else
  {
    xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    uint64_t v5 = sub_100019738(value, "kCBMsgArgWhbStableIdentifier");
    if (v5)
    {
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      void v6[2] = sub_1005B2678;
      v6[3] = &unk_1009B7948;
      void v6[4] = a1;
      void v6[5] = xpc_dictionary_create_reply(xdict);
      [gCBDaemonServer optimalWhbDeviceForStableIdentifier:v5 completion:v6];
    }
  }
}

void sub_10059C510(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10059C520(uint64_t a1, xpc_object_t xdict)
{
  if (*(int *)(a1 + 80) <= 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077F440();
    }
  }
  else
  {
    xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    uint64_t v5 = sub_100019738(value, "kCBMsgArgWhbStableIdentifier");
    if (v5)
    {
      int v6 = [gCBDaemonServer localWhbDeviceForStableId:v5];
      xpc_object_t reply = xpc_dictionary_create_reply(xdict);
      if (reply)
      {
        if (v6)
        {
          id v8 = objc_alloc((Class)NSUUID);
          size_t v9 = [v6 identifier];
          id v10 = [v8 initWithUUIDString:v9];

          id v11 = v10;
          int v12 = v11;
          if (v11)
          {
            *(void *)uuid = 0;
            uint64_t v14 = 0;
            [v11 getUUIDBytes:uuid];
            xpc_dictionary_set_uuid(reply, "kCBMsgArgDeviceUUID", uuid);
          }
        }
        xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), reply);
        xpc_release(reply);
      }
    }
  }
}

void sub_10059C69C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10059C6E0(uint64_t a1, xpc_object_t xdict)
{
  if (*(int *)(a1 + 80) <= 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077F474();
    }
  }
  else
  {
    xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    sub_1000198BC(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgUseCase");
    if (qword_1009FB270 != -1) {
      dispatch_once(&qword_1009FB270, &stru_1009B7BA8);
    }
    unsigned int v11 = sub_100735410(qword_1009FB268, 0);
    xpc_object_t reply = xpc_dictionary_create_reply(xdict);
    if (reply)
    {
      char v13 = reply;
      xpc_dictionary_set_int64(reply, "kCBMsgArgUsecaseCount", v11);
      xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v13);
      xpc_release(v13);
    }
  }
}

void sub_10059C7F8(uint64_t a1)
{
  if (*(int *)(a1 + 80) <= 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077F4A8();
    }
  }
  else
  {
    unsigned __int8 v2 = [&off_1009E19C0 containsObject:*(void *)(a1 + 96)];
    uint64_t v3 = qword_100A19EC8;
    if (v2)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_INFO))
      {
        uint64_t v4 = (void *)(a1 + 56);
        if (*(char *)(a1 + 79) < 0) {
          uint64_t v4 = (void *)*v4;
        }
        int v6 = 136446210;
        uint64_t v7 = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Refreshing NonConnectable Identity for session \"%{public}s\" ", (uint8_t *)&v6, 0xCu);
      }
      uint64_t v5 = sub_100019878();
      sub_1000197D8(v5, &stru_1009B7968);
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
    {
      sub_10077F4DC();
    }
  }
}

void sub_10059C934(uint64_t a1, void *a2)
{
  uint64_t v20 = 0;
  uint64_t v21 = &v20;
  uint64_t v22 = 0x3032000000;
  uint64_t v23 = sub_10004D0FC;
  BOOL v24 = sub_10004CE34;
  id v25 = 0;
  if (*(int *)(a1 + 80) <= 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077F4A8();
    }
  }
  else
  {
    unsigned __int8 v4 = [&off_1009E19D8 containsObject:*(void *)(a1 + 96)];
    uint64_t v5 = qword_100A19EC8;
    if (v4)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_INFO))
      {
        int v6 = (void *)(a1 + 56);
        if (*(char *)(a1 + 79) < 0) {
          int v6 = (void *)*v6;
        }
        *(_DWORD *)long long buf = 136446210;
        int v27 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Retrieving NonConnectable Identity for session \"%{public}s\" ", buf, 0xCu);
      }
      uint64_t v7 = sub_100019878();
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472;
      void v19[2] = sub_1005B27FC;
      v19[3] = &unk_1009995E0;
      void v19[4] = &v20;
      sub_1000197D8(v7, v19);
      xpc_object_t reply = xpc_dictionary_create_reply(a2);
      if (reply)
      {
        uint64_t v9 = (void *)v21[5];
        if (v9)
        {
          uint64_t v10 = [v9 objectForKeyedSubscript:@"instance"];
          unsigned int v11 = v10;
          if (v10 && [v10 unsignedShortValue] == 1)
          {
            int v12 = [(id)v21[5] objectForKeyedSubscript:@"identity"];
            char v13 = v12;
            if (v12)
            {
              id v14 = v12;
              xpc_dictionary_set_data(reply, "kCBMsgArgIdentityIRK", [v14 bytes], (size_t)[v14 length]);
            }
            uint64_t v15 = [(id)v21[5] objectForKeyedSubscript:@"address"];
            uint64_t v16 = v15;
            if (v15)
            {
              id v17 = [v15 unsignedLongLongValue];
              if (v17)
              {
                sub_1006ADD84((unint64_t)v17);
                id v18 = objc_claimAutoreleasedReturnValue();
                xpc_dictionary_set_data(reply, "kCBMsgArgIdentityAddress", [v18 bytes], (size_t)[v18 length]);
              }
            }
          }
        }
        xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), reply);
        xpc_release(reply);
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
    {
      sub_10077F544();
    }
  }
  _Block_object_dispose(&v20, 8);
}

void sub_10059CC38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_10059CCA4(uint64_t a1, xpc_object_t original)
{
  v4[0] = 0;
  v4[1] = v4;
  void v4[2] = 0x2020000000;
  xpc_object_t reply = 0;
  xpc_object_t reply = xpc_dictionary_create_reply(original);
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009B7AC8);
  }
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1005B2878;
  uint64_t v3[3] = &unk_1009B71F0;
  void v3[4] = v4;
  void v3[5] = a1;
  sub_1006A6A38((uint64_t)off_1009F7EB8, v3);
  _Block_object_dispose(v4, 8);
}

void sub_10059CD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10059CD98(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v29 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  uint64_t v28 = 0;
  uint64_t v24 = 0;
  id v25 = &v24;
  uint64_t v26 = 0x2020000000;
  int v27 = 0;
  int v27 = sub_1000198BC(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgConnectionLatency");
  int v12 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    uint64_t v31 = v28;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "handlePeerSetConnectionLatencyMsg hasCompletionBlock=%lld", buf, 0xCu);
  }
  if (!*((_DWORD *)v25 + 6) && v5)
  {
    uint64_t v13 = sub_100019878();
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    void v19[2] = sub_1005ACFB4;
    v19[3] = &unk_1009B7740;
    uint64_t v21 = &v24;
    uint64_t v22 = a1;
    id v20 = v5;
    uint64_t v23 = v29;
    sub_1000197D8(v13, v19);
  }
  uint64_t v14 = v28;
  uint64_t v15 = qword_100A19EC8;
  BOOL v16 = os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT);
  if (v14)
  {
    if (v16)
    {
      int v17 = *((_DWORD *)v25 + 6);
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v31) = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Sending error back %d", buf, 8u);
    }
    xpc_object_t reply = xpc_dictionary_create_reply(xdict);
    xpc_dictionary_set_int64(reply, "kCBMsgArgResult", *((int *)v25 + 6));
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), reply);
    xpc_release(reply);
  }
  else if (v16)
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Not sending response !", buf, 2u);
  }
  _Block_object_dispose(&v24, 8);
}

void sub_10059D03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10059D07C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v4 = sub_100019738(value, "kCBMsgArgName");
  uint64_t v5 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  if (v5)
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    if (sub_10002F7F0((uint64_t)off_1009F7ED8, v5, *(void **)(a1 + 96), *(void **)(a1 + 48)))
    {
      if (*(unsigned char *)(a1 + 183) && v4)
      {
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
        }
        uint64_t v6 = off_1009F7ED8;
        sub_10004191C(__p, (char *)[v4 UTF8String]);
        sub_1006BC69C((uint64_t)v6, v5, (unsigned __int8 *)__p);
        if (v11 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else
    {
      uint64_t v7 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v8 = *(void *)(a1 + 96);
        uint64_t v9 = *(void *)(a1 + 48);
        *(_DWORD *)long long buf = 138412802;
        uint64_t v13 = v8;
        __int16 v14 = 2112;
        uint64_t v15 = v9;
        __int16 v16 = 2112;
        int v17 = v5;
        _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077F5AC();
  }
}

void sub_10059D27C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10059D2B8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v4 = sub_100019738(value, "kCBMsgArgName");
  uint64_t v5 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  if (v5)
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    if (sub_10002F7F0((uint64_t)off_1009F7ED8, v5, *(void **)(a1 + 96), *(void **)(a1 + 48)))
    {
      if (*(unsigned char *)(a1 + 183) && v4)
      {
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
        }
        sub_1006B85C0((uint64_t)off_1009F7ED8, v5, v4);
      }
    }
    else
    {
      uint64_t v6 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v7 = *(void *)(a1 + 96);
        uint64_t v8 = *(void *)(a1 + 48);
        int v9 = 138412802;
        uint64_t v10 = v7;
        __int16 v11 = 2112;
        uint64_t v12 = v8;
        __int16 v13 = 2112;
        __int16 v14 = v5;
        _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", (uint8_t *)&v9, 0x20u);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077F5AC();
  }
}

void sub_10059D48C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10059D4B0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_100019738(value, "kCBMsgArgName");
  uint64_t v6 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  if (!v6)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077F5AC();
    }
    goto LABEL_20;
  }
  char v20 = 0;
  uint64_t v7 = sub_100017768();
  sub_10004191C(buf, "Tags");
  sub_10004191C(__p, "AllowEveryone");
  int v8 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v7 + 72))(v7, buf, __p, &v20);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v24) < 0)
  {
    operator delete(*(void **)buf);
    if (!v8) {
      goto LABEL_12;
    }
  }
  else if (!v8)
  {
    goto LABEL_12;
  }
  int v9 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Tags are for everyone !!!!!!", buf, 2u);
  }
LABEL_12:
  char v20 = 1;
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
  }
  if ((sub_10002F7F0((uint64_t)off_1009F7ED8, v6, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) == 0)
  {
    uint64_t v10 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = *(void *)(a1 + 96);
      uint64_t v15 = *(void *)(a1 + 48);
      *(_DWORD *)long long buf = 138412802;
      *(void *)&uint8_t buf[4] = v14;
      __int16 v22 = 2112;
      uint64_t v23 = v15;
      __int16 v24 = 2112;
      id v25 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
    }
    goto LABEL_20;
  }
  if (*(unsigned char *)(a1 + 183))
  {
    if (!v5)
    {
LABEL_20:
      char v11 = 0;
      goto LABEL_21;
    }
  }
  else
  {
    char v11 = 0;
    if (!v20 || !v5) {
      goto LABEL_21;
    }
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
  }
  __int16 v13 = off_1009F7ED8;
  sub_10004191C(v16, (char *)[v5 UTF8String]);
  char v11 = sub_100030A04((uint64_t)v13, v6, (uint64_t)v16);
  if (v17 < 0) {
    operator delete(v16[0]);
  }
LABEL_21:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  xpc_dictionary_set_BOOL(reply, "kCBMsgArgData", v11);
  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), reply);
  xpc_release(reply);
}

void sub_10059D7E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10059D850(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = objc_opt_new();
  uint64_t v6 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  if (v6)
  {
    unsigned __int8 v32 = 0;
    uint64_t v7 = sub_100017768();
    sub_10004191C(buf, "Tags");
    sub_10004191C(__p, "AllowEveryone");
    int v8 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, unsigned __int8 *))(*(void *)v7 + 72))(v7, buf, __p, &v32);
    if (v31 < 0) {
      operator delete(__p[0]);
    }
    if ((char)buf[23] < 0)
    {
      operator delete(*(void **)buf);
      if (!v8)
      {
LABEL_12:
        unsigned __int8 v32 = 1;
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
        }
        if (sub_10002F7F0((uint64_t)off_1009F7ED8, v6, *(void **)(a1 + 96), *(void **)(a1 + 48)))
        {
          if (*(unsigned __int8 *)(a1 + 183) | v32)
          {
            memset(buf, 0, sizeof(buf));
            if (qword_1009F7EE0 != -1) {
              dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
            }
            sub_1006BE040((uint64_t)off_1009F7ED8, v6, (uint64_t *)buf);
            uint64_t v10 = *(uint8_t **)buf;
            if (*(uint8_t **)buf != &buf[8])
            {
              do
              {
                char v11 = v10 + 32;
                if ((char)v10[55] < 0) {
                  char v11 = (void *)*v11;
                }
                uint64_t v12 = +[NSString stringWithCString:v11 encoding:4];
                [v5 addObject:v12];

                __int16 v13 = (uint8_t *)*((void *)v10 + 1);
                if (v13)
                {
                  do
                  {
                    uint64_t v14 = v13;
                    __int16 v13 = *(uint8_t **)v13;
                  }
                  while (v13);
                }
                else
                {
                  do
                  {
                    uint64_t v14 = (uint8_t *)*((void *)v10 + 2);
                    BOOL v15 = *(void *)v14 == (void)v10;
                    uint64_t v10 = v14;
                  }
                  while (!v15);
                }
                uint64_t v10 = v14;
              }
              while (v14 != &buf[8]);
            }
            sub_10004BA28((uint64_t)buf, *(char **)&buf[8]);
          }
        }
        else
        {
          __int16 v16 = qword_100A19EC8;
          if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
          {
            uint64_t v24 = *(void *)(a1 + 96);
            uint64_t v25 = *(void *)(a1 + 48);
            *(_DWORD *)long long buf = 138412802;
            *(void *)&uint8_t buf[4] = v24;
            *(_WORD *)&unsigned char buf[12] = 2112;
            *(void *)&uint8_t buf[14] = v25;
            *(_WORD *)&unsigned char buf[22] = 2112;
            uint64_t v35 = v6;
            _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
          }
        }
        goto LABEL_30;
      }
    }
    else if (!v8)
    {
      goto LABEL_12;
    }
    int v9 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Tags are for everyone !!!!!!", buf, 2u);
    }
    goto LABEL_12;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
    sub_10077F5AC();
  }
LABEL_30:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  xpc_object_t v18 = xpc_array_create(0, 0);
  if (v18)
  {
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    id v19 = v5;
    id v20 = [v19 countByEnumeratingWithState:&v26 objects:v33 count:16];
    if (v20)
    {
      uint64_t v21 = *(void *)v27;
      do
      {
        for (unsigned __int16 i = 0; i != v20; unsigned __int16 i = (char *)i + 1)
        {
          if (*(void *)v27 != v21) {
            objc_enumerationMutation(v19);
          }
          id v23 = *(id *)(*((void *)&v26 + 1) + 8 * i);
          xpc_array_set_string(v18, 0xFFFFFFFFFFFFFFFFLL, (const char *)[v23 UTF8String]);
        }
        id v20 = [v19 countByEnumeratingWithState:&v26 objects:v33 count:16];
      }
      while (v20);
    }

    xpc_dictionary_set_value(reply, "kCBMsgArgData", v18);
    xpc_release(v18);
  }
  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), reply);
  xpc_release(reply);
}

void sub_10059DC98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

void sub_10059DD30(uint64_t a1, void *a2)
{
  if (*(int *)(a1 + 80) >= 1)
  {
    if (sub_100014448())
    {
      xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
      uint64_t v5 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
      if (!v5)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
          sub_10077F5AC();
        }
        goto LABEL_25;
      }
      uint64_t v6 = sub_100019738(value, "kCBMsgArgName");
      uint64_t v7 = sub_100019738(value, "kCBMsgArgValue");
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
      }
      if (sub_10002F7F0((uint64_t)off_1009F7ED8, v5, *(void **)(a1 + 96), *(void **)(a1 + 48)))
      {
        int v8 = *(unsigned __int8 *)(a1 + 183);
        if (*(unsigned char *)(a1 + 183) && v6)
        {
          if ((unint64_t)[v7 length] < 0x401)
          {
            if (qword_1009F7EE0 != -1) {
              dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
            }
            sub_1006BE60C((uint64_t)off_1009F7ED8, v5, v6, v7);
          }
          else
          {
            int v9 = qword_100A19EC8;
            if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
              sub_10077F5E0((uint64_t)v6, (uint8_t *)&v17, (uint64_t)[v7 length], v9);
            }
          }
          goto LABEL_24;
        }
        uint64_t v16 = qword_100A19EC8;
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
        {
          int v17 = 67109890;
          *(_DWORD *)xpc_object_t v18 = v8;
          *(_WORD *)&void v18[4] = 2112;
          *(void *)&void v18[6] = v5;
          *(_WORD *)&v18[14] = 2112;
          *(void *)&v18[16] = v6;
          *(_WORD *)&v18[24] = 2112;
          *(void *)&v18[26] = v7;
          __int16 v13 = "handlePeerSetCustomPropertyMsg not calling LeDeviceManager::setCustomProperty. allowInternalRestrictedSe"
                "rvices:%d id:%@ prop:%@ value:%@";
          uint64_t v14 = v16;
          uint32_t v15 = 38;
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v10 = qword_100A19EC8;
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v11 = *(void *)(a1 + 96);
          uint64_t v12 = *(void *)(a1 + 48);
          int v17 = 138412802;
          *(void *)xpc_object_t v18 = v11;
          *(_WORD *)&uint8_t v18[8] = 2112;
          *(void *)&v18[10] = v12;
          *(_WORD *)&v18[18] = 2112;
          *(void *)&v18[20] = v5;
          __int16 v13 = "App %@ for user %@ is not allowed to access %@";
          uint64_t v14 = v10;
          uint32_t v15 = 32;
LABEL_20:
          _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, v13, (uint8_t *)&v17, v15);
        }
      }
LABEL_24:

LABEL_25:
      return;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077F644();
    }
  }
}

void sub_10059E024(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10059E058(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  if (v5)
  {
    uint64_t v6 = sub_100019878();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    void v7[2] = sub_1005ADBCC;
    void v7[3] = &unk_1009A0A70;
    uint64_t v9 = a1;
    xpc_object_t v10 = value;
    id v8 = v5;
    xpc_object_t v11 = xdict;
    sub_1000197D8(v6, v7);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077F5AC();
  }
}

void sub_10059E160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_10059E180(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  if (v5)
  {
    uint64_t v6 = sub_100019878();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    void v7[2] = sub_1005ADE00;
    void v7[3] = &unk_100998570;
    uint64_t v9 = a1;
    id v8 = v5;
    xpc_object_t v10 = xdict;
    sub_1000197D8(v6, v7);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077F5AC();
  }
}

void sub_10059E27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10059E29C(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v12 = 0;
  __int16 v13 = &v12;
  uint64_t v14 = 0x2020000000;
  int v15 = 3;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  if (v5)
  {
    uint64_t v6 = sub_100019878();
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    void v8[2] = sub_1005B0AE4;
    v8[3] = &unk_1009A9370;
    xpc_object_t v10 = &v12;
    uint64_t v11 = a1;
    id v9 = v5;
    sub_1000197D8(v6, v8);
  }
  int v7 = *((_DWORD *)v13 + 6);
  if (v7) {
    sub_1004F1028(a1, 180, xdict, v7);
  }

  _Block_object_dispose(&v12, 8);
}

void sub_10059E3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10059E3E8(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v21 = 0;
  __int16 v22 = 0;
  uint64_t v23 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  if (v5)
  {
    uint64_t v6 = sub_100050530();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v6 + 632))(v6, *(void *)(a1 + 96), 4);
    if (!sub_1000198BC(value, 1, v7, v8, v9, v10, v11, v12, (uint64_t)"kCBMsgArgUUIDs"))
    {
      uint64_t v13 = sub_100019878();
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3321888768;
      void v14[2] = sub_1005B0B54;
      v14[3] = &unk_1009B76C8;
      uint64_t v16 = a1;
      id v15 = v5;
      std::string __p = 0;
      xpc_object_t v18 = 0;
      uint64_t v19 = 0;
      sub_100037564((char *)&__p, v21, v22, 0xCCCCCCCCCCCCCCCDLL * (((char *)v22 - (char *)v21) >> 2));
      xpc_object_t v20 = xdict;
      sub_1000197D8(v13, v14);
      if (__p)
      {
        xpc_object_t v18 = __p;
        operator delete(__p);
      }
    }
  }

  if (v21)
  {
    __int16 v22 = v21;
    operator delete(v21);
  }
}

void sub_10059E580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }

  uint64_t v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(a1);
}

void sub_10059E5C8(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v13 = 0;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x2020000000;
  int v16 = 3;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  if (v5)
  {
    uint64_t v6 = sub_100019878();
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_1005AE0C0;
    v9[3] = &unk_1009A9370;
    uint64_t v11 = &v13;
    uint64_t v12 = a1;
    id v10 = v5;
    sub_1000197D8(v6, v9);
  }
  int v7 = *((_DWORD *)v14 + 6);
  if (v7) {
    BOOL v8 = v7 == 10;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8) {
    sub_1004F1028(a1, 182, xdict, v7);
  }

  _Block_object_dispose(&v13, 8);
}

void sub_10059E6E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10059E71C(uint64_t a1, void *a2)
{
  uint64_t v35 = 0;
  memset(uu, 0, sizeof(uu));
  uuid_clear(uu);
  uint64_t v34 = 0;
  xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  uint64_t v5 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  uint64_t v6 = sub_100050530();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)v6 + 632))(v6, *(void *)(a1 + 96), 6);
  if (!sub_1000198BC(value, 1, v7, v8, v9, v10, v11, v12, (uint64_t)"kCBMsgArgPSM"))
  {
    if (v5)
    {
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v29 = 0;
      if (!sub_1000198BC(v34, 0, v13, v14, v15, v16, v17, v18, (uint64_t)"kCBL2CAPChannelInMTU"))
      {
        uint64_t v19 = sub_100019878();
        v20[0] = _NSConcreteStackBlock;
        v20[1] = 3221225472;
        v20[2] = sub_1005A78C8;
        v20[3] = &unk_1009B7408;
        uint64_t v22 = a1;
        uint64_t v23 = v35;
        uint64_t v24 = v33;
        uint64_t v25 = v32;
        uint64_t v26 = v31;
        uint64_t v27 = v30;
        id v21 = v5;
        uint64_t v28 = v29;
        sub_1000197D8(v19, v20);
      }
    }
  }
}

void sub_10059E964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  _Unwind_Resume(a1);
}

void sub_10059E990(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v16 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v4 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  if (!sub_1000198BC(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgPSM") && v4)
  {
    uint64_t v11 = sub_100019878();
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_1005A79DC;
    v12[3] = &unk_100998570;
    uint64_t v14 = a1;
    uint64_t v15 = v16;
    id v13 = v4;
    sub_1000197D8(v11, v12);
  }
}

void sub_10059EAA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_10059EAC8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v4 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  uint64_t v5 = sub_100019738(value, "kCBMsgArgName");
  if (v4)
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    if (sub_10002F7F0((uint64_t)off_1009F7ED8, v4, *(void **)(a1 + 96), *(void **)(a1 + 48)))
    {
      if (qword_1009F8788 != -1) {
        dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
      }
      if (sub_1002F56BC((uint64_t)off_1009F8780, *(void *)(a1 + 128), v4))
      {
        uint64_t v6 = sub_100019878();
        v10[0] = _NSConcreteStackBlock;
        v10[1] = 3221225472;
        _DWORD v10[2] = sub_1005B1FB0;
        v10[3] = &unk_1009996F8;
        uint64_t v13 = a1;
        id v11 = v4;
        id v12 = v5;
        sub_1000197D8(v6, v10);
      }
      else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
      {
        sub_10077F678();
      }
    }
    else
    {
      uint64_t v7 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v8 = *(void *)(a1 + 96);
        uint64_t v9 = *(void *)(a1 + 48);
        *(_DWORD *)long long buf = 138412802;
        uint64_t v15 = v8;
        __int16 v16 = 2112;
        uint64_t v17 = v9;
        __int16 v18 = 2112;
        uint64_t v19 = v4;
        _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
      }
    }
  }
}

void sub_10059ED10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_10059ED4C(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v3 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  uint64_t v4 = sub_1002D4A5C(value, "kCBMsgArgSetHighPriorityStream");
  uint64_t v5 = sub_1002D49BC(value, "kCBMsgArgHighPriorityStreamDuration");
  uint64_t v6 = (void *)v5;
  if (v3)
  {
    if (!v5 && os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077F714();
    }
    if (qword_1009FB240 != -1) {
      dispatch_once(&qword_1009FB240, &stru_1009B7C08);
    }
    uint64_t v7 = qword_1009FB238;
    unsigned __int16 v8 = (unsigned __int16)[v6 intValue:sub_1000305AC(v9, v3).n128_f64[0]];
    sub_1004C09CC(v7, v9, v4, v8);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077F6E0();
  }
}

void sub_10059EEAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10059EED4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  uint64_t v6 = sub_1002D4930(value, "kCBFastLeConnectionInfoData");
  LOBYTE(value) = sub_1002D4A5C(value, "kCBMsgArgEnable");
  v16[0] = 0;
  v16[1] = v16;
  void v16[2] = 0x2020000000;
  xpc_object_t reply = 0;
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  uint64_t v7 = sub_100019878();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  _DWORD v10[2] = sub_1005B213C;
  v10[3] = &unk_1009B7900;
  uint64_t v14 = a1;
  id v8 = v5;
  id v11 = v8;
  char v15 = (char)value;
  id v9 = v6;
  id v12 = v9;
  uint64_t v13 = v16;
  sub_100013018(v7, v10);

  _Block_object_dispose(v16, 8);
}

void sub_10059F028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10059F074(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v11 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  if (v11 && !sub_1000198BC(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgServiceStartHandle"))
  {
    uint64_t v12 = sub_100019878();
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3321888768;
    void v13[2] = sub_1005B0E2C;
    v13[3] = &unk_1009B7858;
    uint64_t v15 = a1;
    id v14 = v11;
    uint64_t v16 = v26;
    std::string __p = 0;
    __int16 v18 = 0;
    uint64_t v19 = 0;
    sub_100037564((char *)&__p, v22, v23, 0xCCCCCCCCCCCCCCCDLL * (((char *)v23 - (char *)v22) >> 2));
    uint64_t v20 = v25;
    xpc_object_t v21 = xdict;
    sub_1000197D8(v12, v13);
    if (__p)
    {
      __int16 v18 = __p;
      operator delete(__p);
    }
  }
  if (v22)
  {
    uint64_t v23 = v22;
    operator delete(v22);
  }
}

void sub_10059F20C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }

  uint64_t v31 = *(void **)(v29 - 88);
  if (v31)
  {
    *(void *)(v29 - 80) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(a1);
}

void sub_10059F254(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v11 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  if (v11 && !sub_1000198BC(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgServiceStartHandle"))
  {
    uint64_t v12 = sub_100019878();
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3321888768;
    void v13[2] = sub_1005B1058;
    v13[3] = &unk_1009B7858;
    uint64_t v15 = a1;
    id v14 = v11;
    uint64_t v16 = v26;
    std::string __p = 0;
    __int16 v18 = 0;
    uint64_t v19 = 0;
    sub_100037564((char *)&__p, v22, v23, 0xCCCCCCCCCCCCCCCDLL * (((char *)v23 - (char *)v22) >> 2));
    uint64_t v20 = v25;
    xpc_object_t v21 = xdict;
    sub_1000197D8(v12, v13);
    if (__p)
    {
      __int16 v18 = __p;
      operator delete(__p);
    }
  }
  if (v22)
  {
    uint64_t v23 = v22;
    operator delete(v22);
  }
}

void sub_10059F3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }

  uint64_t v31 = *(void **)(v29 - 88);
  if (v31)
  {
    *(void *)(v29 - 80) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(a1);
}

void sub_10059F434(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v11 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  if (v11 && !sub_1000198BC(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgCharacteristicHandle"))
  {
    uint64_t v12 = sub_100019878();
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    void v13[2] = sub_1005B1254;
    v13[3] = &unk_1009B75A8;
    uint64_t v15 = a1;
    id v14 = v11;
    uint64_t v16 = v20;
    uint64_t v17 = v19;
    xpc_object_t v18 = xdict;
    sub_1000197D8(v12, v13);
  }
}

void sub_10059F55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_10059F57C(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v23 = &off_100998428;
  uint64_t v24 = 0;
  uint64_t v22 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v11 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  if (v11 && !sub_1000198BC(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgCharacteristicHandle"))
  {
    uint64_t v12 = sub_100019878();
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3321888768;
    void v13[2] = sub_1005B1470;
    v13[3] = &unk_1009B7890;
    uint64_t v15 = a1;
    id v14 = v11;
    uint64_t v16 = v26;
    uint64_t v17 = v22;
    uint64_t v18 = v25;
    uint64_t v19 = &off_100998428;
    uint64_t v20 = v24;
    xpc_object_t v21 = xdict;
    sub_1000197D8(v12, v13);
    uint64_t v19 = &off_100998428;
    if (v20) {
      sub_1000368F4(v20);
    }
  }
  uint64_t v23 = &off_100998428;
  if (v24) {
    sub_1000368F4(v24);
  }
}

void sub_10059F764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  *(void *)(v28 - 96) = v26;
  uint64_t v30 = *(atomic_uint **)(v28 - 88);
  if (v30) {
    sub_1000368F4(v30);
  }
  _Unwind_Resume(a1);
}

void sub_10059F7B8(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v19 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v11 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  if (v11 && !sub_1000198BC(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgCharacteristicHandle"))
  {
    uint64_t v12 = sub_100019878();
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    void v13[2] = sub_1005B1728;
    v13[3] = &unk_1009B75A8;
    uint64_t v15 = a1;
    id v14 = v11;
    uint64_t v16 = v21;
    uint64_t v17 = v19;
    xpc_object_t v18 = xdict;
    sub_1000197D8(v12, v13);
  }
}

void sub_10059F8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  _Unwind_Resume(a1);
}

void sub_10059F914(uint64_t a1, void *a2)
{
  memset(uu, 0, sizeof(uu));
  uuid_clear(uu);
  uint64_t v18 = 0;
  xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  id v11 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  if (v11 && !sub_1000198BC(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgCharacteristicHandle"))
  {
    uint64_t v12 = sub_100019878();
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    void v13[2] = sub_1005B1964;
    v13[3] = &unk_1009A0A70;
    uint64_t v15 = a1;
    id v14 = v11;
    uint64_t v16 = v18;
    uint64_t v17 = a2;
    sub_1000197D8(v12, v13);
  }
}

void sub_10059FA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_10059FA80(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v21 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  if (v5)
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    if (sub_10002F7F0((uint64_t)off_1009F7ED8, v5, *(void **)(a1 + 96), *(void **)(a1 + 48)))
    {
      if (!sub_1000198BC(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgDescriptorHandle"))
      {
        uint64_t v12 = sub_100019878();
        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472;
        void v16[2] = sub_1005B1B7C;
        void v16[3] = &unk_1009A0A70;
        uint64_t v18 = a1;
        id v17 = v5;
        uint64_t v19 = v21;
        xpc_object_t v20 = xdict;
        sub_1000197D8(v12, v16);
      }
    }
    else
    {
      uint64_t v13 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v14 = *(void *)(a1 + 96);
        uint64_t v15 = *(void *)(a1 + 48);
        *(_DWORD *)long long buf = 138412802;
        uint64_t v23 = v14;
        __int16 v24 = 2112;
        uint64_t v25 = v15;
        __int16 v26 = 2112;
        uint64_t v27 = v5;
        _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
      }
    }
  }
}

void sub_10059FC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_10059FC98(uint64_t a1, void *a2)
{
  memset(uu, 0, sizeof(uu));
  uuid_clear(uu);
  uint64_t v25 = 0;
  uint64_t v23 = &off_100998428;
  __int16 v24 = 0;
  xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  uint64_t v5 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  if (v5)
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    if (sub_10002F7F0((uint64_t)off_1009F7ED8, v5, *(void **)(a1 + 96), *(void **)(a1 + 48)))
    {
      if (!sub_1000198BC(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgDescriptorHandle"))
      {
        uint64_t v12 = sub_100019878();
        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3321888768;
        void v16[2] = sub_1005B1D94;
        void v16[3] = &unk_1009B78C8;
        uint64_t v18 = a1;
        id v17 = v5;
        uint64_t v19 = v25;
        xpc_object_t v20 = &off_100998428;
        uint64_t v21 = v24;
        uint64_t v22 = a2;
        sub_1000197D8(v12, v16);
        xpc_object_t v20 = &off_100998428;
        if (v21) {
          sub_1000368F4(v21);
        }
      }
    }
    else
    {
      uint64_t v13 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v14 = *(void *)(a1 + 96);
        uint64_t v15 = *(void *)(a1 + 48);
        *(_DWORD *)long long buf = 138412802;
        uint64_t v27 = v14;
        __int16 v28 = 2112;
        uint64_t v29 = v15;
        __int16 v30 = 2112;
        uint64_t v31 = v5;
        _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
      }
    }
  }

  uint64_t v23 = &off_100998428;
  if (v24) {
    sub_1000368F4(v24);
  }
}

void sub_10059FF3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,atomic_uint *a27)
{
  if (a27) {
    sub_1000368F4(a27);
  }
  _Unwind_Resume(a1);
}

void sub_10059FF98(uint64_t a1, void *a2)
{
  uint64_t v4 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = "handleTrackPeripheralMsg";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&buf, 0xCu);
  }
  *(void *)&long long buf = 0;
  *((void *)&buf + 1) = &buf;
  uint64_t v64 = 0x2020000000;
  int v65 = 1;
  xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  uint64_t v12 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  uint64_t v59 = 0;
  char v60 = 0;
  uint64_t v57 = 1;
  uint64_t v58 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  uint64_t v44 = 0;
  if (v12)
  {
    int v13 = sub_1000198BC(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgOptions");
    *(_DWORD *)(*((void *)&buf + 1) + 24) = v13;
    if (v13)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077F77C();
      }
    }
    else
    {
      sub_1000198BC(v60, 0, v14, v15, v16, v17, v18, v19, (uint64_t)"kCBTrackingOptionType");
      unsigned __int8 v20 = v59;
      uint64_t v21 = *((void *)&buf + 1);
      if (v59 >= 101)
      {
        *(_DWORD *)(*((void *)&buf + 1) + 24) = 3;
        uint64_t v22 = qword_100A19EC8;
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)char v61 = 67109120;
          int v62 = v20;
          _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Unsupported apply type: %d", v61, 8u);
          uint64_t v21 = *((void *)&buf + 1);
        }
      }
      if (!*(_DWORD *)(v21 + 24))
      {
        uint64_t v23 = sub_100019878();
        v24[0] = _NSConcreteStackBlock;
        v24[1] = 3221225472;
        _OWORD v24[2] = sub_1005AD0B4;
        v24[3] = &unk_1009B7768;
        p_long long buf = &buf;
        uint64_t v27 = a1;
        id v25 = v12;
        uint64_t v28 = v59;
        uint64_t v29 = v58;
        uint64_t v30 = v57;
        uint64_t v31 = v56;
        uint64_t v32 = v55;
        uint64_t v33 = v54;
        uint64_t v34 = v53;
        uint64_t v35 = v52;
        uint64_t v36 = v51;
        uint64_t v37 = v50;
        uint64_t v38 = v49;
        uint64_t v39 = v48;
        uint64_t v40 = v47;
        uint64_t v41 = v46;
        uint64_t v42 = v45;
        uint64_t v43 = v44;
        sub_1000197D8(v23, v24);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077F748();
  }

  _Block_object_dispose(&buf, 8);
}

void sub_1005A03D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  _Block_object_dispose((const void *)(v64 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1005A0414(uint64_t a1, void *a2)
{
  uint64_t v4 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0]) = 136315138;
    *(void **)((char *)buf + 4) = "handleStopTrackingPeripheralMsg";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)buf, 0xCu);
  }
  xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  uint64_t v12 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  uint64_t v24 = 0;
  buf[0] = 0;
  if (v12)
  {
    if (sub_1000198BC(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgOptions"))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077F77C();
      }
    }
    else
    {
      sub_1000198BC(buf[0], 0, v13, v14, v15, v16, v17, v18, (uint64_t)"kCBTrackingOptionType");
      uint64_t v19 = sub_100019878();
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_1005AD180;
      v20[3] = &unk_100998570;
      uint64_t v22 = a1;
      id v21 = v12;
      uint64_t v23 = v24;
      sub_1000197D8(v19, v20);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10077F748();
  }
}

void sub_1005A0648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1005A0670(uint64_t a1, xpc_object_t original)
{
  xpc_object_t reply = xpc_dictionary_create_reply(original);
  if (reply)
  {
    uint64_t v4 = reply;
    __int16 v6 = 0;
    int bytes = 0;
    xpc_dictionary_set_data(reply, "kCBMsgArgAddressString", &bytes, 6uLL);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v4);
    xpc_release(v4);
  }
}

void sub_1005A06D8(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v89 = 0;
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v11 = sub_1002D48BC(v4, "kCBMsgArgDeviceUUID");
  int64_t value = 0;
  uint64_t v88 = 0;
  if (*(int *)(a1 + 80) <= 1)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
    {
      sub_10003AE4C(*(void *)(a1 + 128), (uint64_t)v91);
      sub_10077F850();
    }
    goto LABEL_41;
  }
  int v12 = sub_1000198BC(v4, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgOptions");
  if (!v12)
  {
    uint64_t v13 = sub_100019738(v89, "kCBLePowerControlCmd");
    int v14 = sub_1002D4A5C(v89, "kCBlePowerControlWait4Result");
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009B7AC8);
    }
    uint64_t v15 = off_1009F7EB8;
    sub_1000305AC(v91, v11);
    sub_1006856B8((uint64_t)v15, (unsigned __int8 *)v91, &v88);
    if ([v13 isEqualToString:@"setLeTxReportEnable"])
    {
      LOBYTE(v91[0]) = 0;
      LOBYTE(v90[0]) = 0;
      int v22 = sub_1000198BC(v89, 0, v16, v17, v18, v19, v20, v21, (uint64_t)"kCBLePowerControlLocalEnable");
      if (!v22)
      {
        HIBYTE(v86) = 0;
        sub_10001B8E0((unsigned char *)&v86 + 1);
        unsigned int v29 = sub_10001BDE0(249, (uint64_t)sub_1005AB5B4, v23, v24, v25, v26, v27, v28, v88);
        sub_10001B910((unsigned char *)&v86 + 1);
        sub_10001B8AC((unsigned char *)&v86 + 1);
        unsigned int v30 = 249;
LABEL_18:
        uint64_t v49 = 0xFFFFFFFFLL;
LABEL_19:
        if ((v14 & 1) == 0) {
          goto LABEL_35;
        }
        if (!v29)
        {
          memset(v91, 0, sizeof(v91));
          sub_100052DA8(v91);
          v90[0] = 0;
          v90[1] = 0;
          sub_10003AED0((uint64_t)v90, (uint64_t)v91);
          if (sub_10001BCA8(&stru_100A19DC8, v90, 0xBB8uLL)) {
            unsigned int v29 = 0;
          }
          else {
            unsigned int v29 = 112;
          }
          sub_10003AFB4((uint64_t)v90);
          sub_100052DA4(v91);
        }
LABEL_25:
        xpc_object_t reply = xpc_dictionary_create_reply(xdict);
        uint64_t v51 = reply;
        if (reply)
        {
          xpc_dictionary_set_int64(reply, "kCBLePowerControlCmd", v30);
          xpc_dictionary_set_int64(v51, "kCBMsgArgResult", v29);
          if (v30 == 246)
          {
            xpc_dictionary_set_int64(v51, "kCBMsgArgConnHandle", (unsigned __int16)value);
            xpc_dictionary_set_int64(v51, "kCBMsgArgReason", BYTE3(value));
            xpc_dictionary_set_int64(v51, "kCBMsgArgPHY", BYTE4(value));
            xpc_dictionary_set_int64(v51, "kCBMsgArgTransmitPowerLevel", SBYTE5(value));
            xpc_dictionary_set_int64(v51, "kCBMsgArgTransmitPowerFlag", BYTE6(value));
            int64_t v52 = SHIBYTE(value);
            uint64_t v53 = "kCBMsgArgDelta";
          }
          else
          {
            if (v30 != 245)
            {
LABEL_34:
              xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v51);
              xpc_release(v51);
              goto LABEL_35;
            }
            xpc_dictionary_set_int64(v51, "kCBMsgArgConnHandle", word_100A19DF8);
            xpc_dictionary_set_int64(v51, "kCBMsgArgCurrentTxPowerLevel", byte_100A19DFB);
            int64_t v52 = byte_100A19DFC;
            uint64_t v53 = "kCBMsgArgMaxTxPowerLevel";
          }
          xpc_dictionary_set_int64(v51, v53, v52);
          goto LABEL_34;
        }
LABEL_35:
        if ((v49 & 0x80000000) == 0) {
          sub_10021D008(v49);
        }
        if (v22)
        {
          sub_1004F1028(a1, 219, xdict, v22);
          if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
            sub_10077F8A8();
          }
        }
        goto LABEL_40;
      }
    }
    else if ([v13 isEqualToString:@"setLePathLossEnable"])
    {
      LOBYTE(v91[0]) = 0;
      int v22 = sub_1000198BC(v89, 0, v31, v32, v33, v34, v35, v36, (uint64_t)"kCBLePathLossReportingEnable");
      if (!v22)
      {
        LOBYTE(v90[0]) = 0;
        sub_10001B8E0(v90);
        unsigned int v29 = sub_10001BDE0(248, (uint64_t)sub_1005AB5B4, v37, v38, v39, v40, v41, v42, v88);
        sub_10001B910(v90);
        sub_10001B8AC(v90);
        unsigned int v30 = 248;
        goto LABEL_18;
      }
    }
    else if ([v13 isEqualToString:@"setLePathLossParam"])
    {
      LOBYTE(v90[0]) = 0;
      __int16 v86 = 0;
      v85[1] = 0;
      LOWORD(v91[0]) = 0;
      int v22 = sub_1000198BC(v89, 0, v43, v44, v45, v46, v47, v48, (uint64_t)"kCBLeHighThreshold");
      if (!v22)
      {
        v85[0] = 0;
        sub_10001B8E0(v85);
        unsigned int v29 = sub_10001BDE0(247, (uint64_t)sub_1005AB5B4, v72, v73, v74, v75, v76, v77, v88);
        sub_10001B910(v85);
        sub_10001B8AC(v85);
        unsigned int v30 = 247;
        goto LABEL_18;
      }
    }
    else
    {
      if ([v13 isEqualToString:@"readLeRemoteTxPower"])
      {
        LOBYTE(v91[0]) = 0;
        int v22 = sub_1000198BC(v89, 0, v54, v55, v56, v57, v58, v59, (uint64_t)"kCBLePHYType");
        if (v22)
        {
          unsigned int v30 = 0;
          uint64_t v49 = 0xFFFFFFFFLL;
          unsigned int v29 = 114;
        }
        else
        {
          LOBYTE(v90[0]) = 0;
          sub_10001B8E0(v90);
          if (v14) {
            uint64_t v49 = sub_10021CFA4(1, (uint64_t)sub_1005AB5B4, (uint64_t)&value, 8);
          }
          else {
            uint64_t v49 = 0xFFFFFFFFLL;
          }
          unsigned int v29 = sub_10019304C(0xF6u, v78, v79, v80, v81, v82, v83, v84, v88);
          sub_10001B910(v90);
          sub_10001B8AC(v90);
          unsigned int v30 = 246;
        }
        goto LABEL_19;
      }
      if (![v13 isEqualToString:@"readLeLocalTxPower"])
      {
        if ((v14 & 1) == 0)
        {
LABEL_40:

          goto LABEL_41;
        }
        int v22 = 0;
        unsigned int v30 = 0;
        unsigned int v29 = 114;
        uint64_t v49 = 0xFFFFFFFFLL;
        goto LABEL_25;
      }
      LOBYTE(v91[0]) = 0;
      int v22 = sub_1000198BC(v89, 0, v60, v61, v62, v63, v64, v65, (uint64_t)"kCBLePHYType");
      if (!v22 && LOBYTE(v91[0]) - 1 <= 3)
      {
        LOBYTE(v90[0]) = 0;
        sub_10001B8E0(v90);
        unsigned int v29 = sub_10001BDE0(245, (uint64_t)sub_1005AB5C0, v66, v67, v68, v69, v70, v71, v88);
        sub_10001B910(v90);
        sub_10001B8AC(v90);
        unsigned int v30 = 245;
        goto LABEL_18;
      }
    }
    unsigned int v30 = 0;
    unsigned int v29 = 114;
    goto LABEL_18;
  }
  sub_1004F1028(a1, 219, xdict, v12);
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
    sub_10077F928();
  }
LABEL_41:
}

void sub_1005A0E88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005A0F38()
{
  if (MGCopyAnswer())
  {
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009B7B28);
    }
    uint64_t v0 = off_1009F8068;
    sub_10004191C(&__p, "BT_CONTROLLER_CORE_DUMP");
    sub_1004E258C((uint64_t)v0, 3703, &__p);
  }
  uint64_t v1 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "CBUtil controller core dump not supported on customer / production / user builds", buf, 2u);
  }
}

void sub_1005A1018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005A1034(uint64_t a1, unsigned int a2)
{
  uint64_t result = 1;
  if (a2 > 0x26 || ((1 << a2) & 0x7300004400) == 0)
  {
    BOOL v4 = a2 == 75 || a2 == 43;
    return a2 == 170 || v4;
  }
  return result;
}

void sub_1005A107C(uint64_t a1, uint64_t **a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *a2;
  if (*a2 != a2[1])
  {
    do
    {
      if (qword_1009F7F10 != -1) {
        dispatch_once(&qword_1009F7F10, &stru_1009B7A88);
      }
      uint64_t v7 = qword_1009F7F08;
      uint64_t v8 = *v6;
      __n128 v13 = *(__n128 *)(*v6 + 72);
      int v14 = *(_DWORD *)(v8 + 88);
      sub_100035F98(&v12, &v13);
      if (sub_10063C2BC(v7, (unsigned __int8 *)&v12, *(unsigned __int8 *)(a1 + 183), *(unsigned int *)(a1 + 196), v5))
      {
        ++v6;
        uint64_t v9 = a2[1];
      }
      else
      {
        uint64_t v10 = a2[1];
        uint64_t v11 = (char *)v10 - (char *)(v6 + 1);
        if (v10 != v6 + 1) {
          memmove(v6, v6 + 1, (char *)v10 - (char *)(v6 + 1));
        }
        uint64_t v9 = (uint64_t *)((char *)v6 + v11);
        a2[1] = (uint64_t *)((char *)v6 + v11);
      }
    }
    while (v6 != v9);
  }
}

void sub_1005A11BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1005A11D4(uint64_t a1, void *a2, unsigned int a3)
{
  id v5 = a2;
  if (*(int *)(a1 + 80) > 0) {
    goto LABEL_14;
  }
  __n128 v19 = 0uLL;
  int v20 = 0;
  if (qword_1009F7F10 != -1) {
    dispatch_once(&qword_1009F7F10, &stru_1009B7A88);
  }
  sub_10063C400(qword_1009F7F08, v5, a3, &v19);
  long long v17 = xmmword_1007BA80C;
  int v18 = 0;
  if (!sub_10022A44C((unsigned __int8 *)&v19, (unsigned __int8 *)&v17)) {
    goto LABEL_14;
  }
  if (qword_1009F7F10 != -1) {
    dispatch_once(&qword_1009F7F10, &stru_1009B7A88);
  }
  uint64_t v6 = qword_1009F7F08;
  long long v13 = xmmword_1007BA80C;
  int v14 = 0;
  sub_100035F98((__n128 *)buf, (__n128 *)&v13);
  if (sub_10063BE8C(v6, v5, buf, a3))
  {
    uint64_t v7 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      v16[0] = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "External Characteristic Restricted for device \"%@\"", buf, 0xCu);
    }
    if (!*(unsigned char *)(a1 + 180))
    {
      id v8 = objc_alloc_init((Class)MTSAuthorization);
      *(unsigned char *)(a1 + 179) = [v8 isRestrictedCharacteristicsAccessAllowed];

      *(unsigned char *)(a1 + 180) = 1;
    }
    int v9 = *(unsigned __int8 *)(a1 + 179);
    BOOL v10 = *(unsigned char *)(a1 + 179) == 0;
    uint64_t v11 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109378;
      LODWORD(v16[0]) = v9 == 0;
      WORD2(v16[0]) = 2112;
      *(void *)((char *)v16 + 6) = v5;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "External Restricted Characteristic restricted:%d for device \"%@\"", buf, 0x12u);
    }
  }
  else
  {
LABEL_14:
    BOOL v10 = 0;
  }

  return v10;
}

void sub_1005A1410(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1005A1438(uint64_t a1, void *a2, unsigned int a3)
{
  id v5 = a2;
  if (qword_1009F7F10 != -1) {
    dispatch_once(&qword_1009F7F10, &stru_1009B7A88);
  }
  __n128 v18 = 0uLL;
  int v19 = 0;
  sub_10063C400(qword_1009F7F08, v5, a3, &v18);
  if (!v18.n128_u8[0])
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077F990();
    }
    goto LABEL_13;
  }
  if (qword_1009F7F10 != -1) {
    dispatch_once(&qword_1009F7F10, &stru_1009B7A88);
  }
  if (!sub_10063C2BC(qword_1009F7F08, (unsigned __int8 *)&v18, *(unsigned __int8 *)(a1 + 183), *(unsigned int *)(a1 + 196), v5))
  {
    uint64_t v7 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
    {
      int v9 = (void *)(a1 + 56);
      if (*(char *)(a1 + 79) < 0) {
        int v9 = (void *)*v9;
      }
      int v10 = 136446722;
      uint64_t v11 = v9;
      __int16 v12 = 1024;
      unsigned int v13 = a3;
      __int16 v14 = 2112;
      id v15 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Session \"%{public}s\" isn't entitled to access restricted handle 0x%04x on device \"%@\"! ಠ_ಠ", (uint8_t *)&v10, 0x1Cu);
    }
    goto LABEL_13;
  }
  long long v16 = xmmword_1007BA80C;
  int v17 = 0;
  if (sub_10022A44C((unsigned __int8 *)&v18, (unsigned __int8 *)&v16) && sub_1005A11D4(a1, v5, a3))
  {
LABEL_13:
    uint64_t v6 = 902;
    goto LABEL_14;
  }
  uint64_t v6 = 0;
LABEL_14:

  return v6;
}

void sub_1005A1634(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1005A164C()
{
  long long v12 = 0u;
  long long v13 = 0u;
  xpc_connection_get_audit_token();
  uint64_t v8 = 0;
  int v9 = &v8;
  uint64_t v10 = 0x2020000000;
  int v11 = 2;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100A13968, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_100A13968))
  {
    qword_100A13960 = tcc_server_create();
    __cxa_guard_release(&qword_100A13968);
  }
  uint64_t v0 = (const void *)tcc_message_options_create();
  tcc_message_options_set_reply_handler_policy();
  tcc_message_options_set_request_prompt_policy();
  long long v6 = v12;
  long long v7 = v13;
  uint64_t v1 = (const void *)tcc_credential_create_for_process_with_audit_token();
  tcc_service_singleton_for_CF_name();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1005A1810;
  v5[3] = &unk_1009B71A0;
  v5[4] = &v8;
  unsigned __int8 v2 = objc_retainBlock(v5);
  tcc_server_message_request_authorization();
  CFRelease(v1);
  CFRelease(v0);
  uint64_t v3 = *((unsigned int *)v9 + 6);

  _Block_object_dispose(&v8, 8);
  return v3;
}

void sub_1005A17D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  __cxa_guard_abort(&qword_100A13968);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1005A1810(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!a3)
  {
    uint64_t v3 = result;
    uint64_t result = tcc_authorization_record_get_authorization_right();
    int v4 = 2 * (result != 2);
    if (!result) {
      int v4 = 1;
    }
    *(_DWORD *)(*(void *)(*(void *)(v3 + 32) + 8) + 24) = v4;
  }
  return result;
}

uint64_t sub_1005A1864(uint64_t a1)
{
  long long v15 = 0u;
  long long v16 = 0u;
  xpc_connection_get_audit_token();
  uint64_t v11 = 0;
  long long v12 = &v11;
  uint64_t v13 = 0x2020000000;
  char v14 = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100A13978, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_100A13978))
  {
    qword_100A13970 = tcc_server_create();
    __cxa_guard_release(&qword_100A13978);
  }
  unsigned __int8 v2 = (const void *)tcc_message_options_create();
  tcc_message_options_set_reply_handler_policy();
  tcc_message_options_set_request_prompt_policy();
  long long v9 = v15;
  long long v10 = v16;
  uint64_t v3 = (const void *)tcc_credential_create_for_process_with_audit_token();
  tcc_service_singleton_for_CF_name();
  int v4 = objc_opt_new();
  [v4 setObject:*(void *)(a1 + 112) forKeyedSubscript:@"mapCentralLabelStringKey"];
  [v4 setObject:*(void *)(a1 + 120) forKeyedSubscript:@"mapLabelArrayForCalloutsKey"];
  tcc_message_options_set_client_dict();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_1005A1A84;
  v8[3] = &unk_1009B71A0;
  void v8[4] = &v11;
  id v5 = objc_retainBlock(v8);
  tcc_server_message_request_authorization();
  CFRelease(v3);
  CFRelease(v2);
  uint64_t v6 = *((unsigned __int8 *)v12 + 24);

  _Block_object_dispose(&v11, 8);
  return v6;
}

void sub_1005A1A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  __cxa_guard_abort(&qword_100A13978);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1005A1A84(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!a3)
  {
    uint64_t v3 = result;
    uint64_t result = tcc_authorization_record_get_authorization_right();
    *(unsigned char *)(*(void *)(*(void *)(v3 + 32) + 8) + 24) = result == 2;
  }
  return result;
}

void sub_1005A1ACC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(void *)(v1 + 128)) {
    return;
  }
  if (!sub_10054003C())
  {
LABEL_15:
    sub_1005A1EF8((unint64_t *)v1);
    return;
  }
  id v2 = *(id *)(v1 + 96);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  uint64_t v3 = (void *)(v1 + 56);
  if (*(char *)(v1 + 79) < 0) {
    uint64_t v3 = (void *)*v3;
  }
  int v4 = off_1009F8780;
  id v5 = +[NSString stringWithUTF8String:v3];
  sub_1002F09F8((uint64_t)v4, v5, v2);

  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  int v6 = sub_1002F4608((uint64_t)off_1009F8780, *(void *)(v1 + 128));
  long long v7 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v1 + 175);
    int v9 = *(unsigned __int8 *)(v1 + 176);
    int v10 = *(unsigned __int8 *)(v1 + 177);
    int v11 = *(unsigned __int8 *)(v1 + 178);
    int v28 = 67110144;
    *(_DWORD *)unsigned int v29 = v8;
    *(_WORD *)&void v29[4] = 1024;
    *(_DWORD *)&v29[6] = v9;
    __int16 v30 = 1024;
    int v31 = v10;
    __int16 v32 = 1024;
    int v33 = v11;
    __int16 v34 = 1024;
    int v35 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "handleTCCDone fDeviceAccessForMediaSession:%d fDeviceAccessForMediaExtension:%d fDeviceAccessPerAccessorySession:%d fDeviceAccessPerAccessoryExtension:%d sessionType:%d", (uint8_t *)&v28, 0x20u);
  }
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  uint64_t v12 = sub_1002F45B8((uint64_t)off_1009F8780, *(void *)(v1 + 128));
  if (*(int *)(v1 + 80) > 0 || *(unsigned char *)(v1 + 185) || v12 == 32) {
    goto LABEL_14;
  }
  if (*(unsigned char *)(v1 + 175) || *(unsigned char *)(v1 + 176) && !v6 || *(unsigned char *)(v1 + 177))
  {
    int v13 = 1;
  }
  else
  {
    BOOL v27 = *(unsigned char *)(v1 + 178) && v6 == 0;
    int v13 = v27;
  }
  if (((sub_10000A068(v12, v2) | v13) & 1) != 0 || *(unsigned char *)(v1 + 88))
  {
    char v14 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
    {
      int v28 = 138412290;
      *(void *)unsigned int v29 = v2;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Overriding TCC for bundleIdentifier %@", (uint8_t *)&v28, 0xCu);
    }
    int v15 = 1;
  }
  else
  {
    int v24 = sub_1005A164C();
    uint64_t v25 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v26 = "unknown";
      if (v24 == 1) {
        uint64_t v26 = "denied";
      }
      if (!v24) {
        uint64_t v26 = "granted";
      }
      int v28 = 136315138;
      *(void *)unsigned int v29 = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Bluetooth user permission alwaysAuth: %s", (uint8_t *)&v28, 0xCu);
    }
    int v15 = sub_1005A1864(v1);
  }
  long long v16 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    int v17 = *(unsigned __int8 *)(v1 + 194);
    int v18 = *(unsigned __int8 *)(v1 + 195);
    int v19 = *(unsigned __int8 *)(v1 + 175);
    int v20 = *(unsigned __int8 *)(v1 + 176);
    int v21 = *(unsigned __int8 *)(v1 + 177);
    int v22 = *(unsigned __int8 *)(v1 + 178);
    int v28 = 67111168;
    *(_DWORD *)unsigned int v29 = v15;
    *(_WORD *)&void v29[4] = 1024;
    *(_DWORD *)&v29[6] = v17;
    __int16 v30 = 1024;
    int v31 = v18;
    __int16 v32 = 1024;
    int v33 = v13;
    __int16 v34 = 1024;
    int v35 = v19;
    __int16 v36 = 1024;
    int v37 = v20;
    __int16 v38 = 1024;
    int v39 = v21;
    __int16 v40 = 1024;
    int v41 = v22;
    __int16 v42 = 1024;
    int v43 = v6;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "BluetoothUserPrivacy: alwaysAccess: %d, isCBPrivacySupported: %d, medicalDeviceOrStateRestorationAppPendingTCC:%d deviceAccessExempt:%d fDeviceAccessForMediaSession:%d fDeviceAccessForMediaExtension:%d fDeviceAccessPerAccessorySession:%d fDeviceAccessPerAccessoryExtension:%d sessionType:%d", (uint8_t *)&v28, 0x38u);
  }
  *(unsigned char *)(v1 + 195) = 0;
  *(unsigned char *)(v1 + 193) = v15;
  if (v15)
  {
LABEL_14:

    goto LABEL_15;
  }
  if (*(unsigned char *)(v1 + 194)) {
    unsigned int v23 = 3;
  }
  else {
    unsigned int v23 = 4;
  }
  sub_1004F10B0(v1, v23);
}

void sub_1005A1EC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005A1EF8(unint64_t *a1)
{
  unsigned int v12 = 0;
  unsigned __int8 v11 = 0;
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  sub_1002F133C((uint64_t)off_1009F8780, a1[16], &v12, &v11);
  unint64_t v2 = a1[16];
  if (*((unsigned char *)a1 + 186) && v12 == 1) {
    (*(void (**)(unint64_t *, unint64_t, void))(*a1 + 312))(a1, v2, v11);
  }
  else {
    (*(void (**)(unint64_t *, unint64_t, void))(*a1 + 304))(a1, v2, v12);
  }
  if (v12 == 1 || v11)
  {
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009B7AC8);
    }
    uint64_t v3 = *((void *)off_1009F7EB8 + 37);
    uint64_t v4 = *((void *)off_1009F7EB8 + 39);
    unint64_t v5 = a1[16];
    v10[0] = *((void *)off_1009F7EB8 + 36);
    v10[1] = v3;
    _DWORD v10[2] = v4;
    (*(void (**)(unint64_t *, unint64_t, void *))(*a1 + 176))(a1, v5, v10);
    if (*((unsigned char *)a1 + 169))
    {
      uint64_t v6 = sub_100019878();
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472;
      void v9[2] = sub_1005A2164;
      v9[3] = &unk_100997528;
      void v9[4] = a1;
      sub_100013018(v6, v9);
    }
    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
    }
    sub_1002F2A04((uint64_t)off_1009F8780, a1[16]);
    if (*((unsigned char *)a1 + 104))
    {
      uint64_t v7 = sub_100019878();
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      void v8[2] = sub_1005A21C8;
      v8[3] = &unk_100997528;
      void v8[4] = a1;
      sub_100013018(v7, v8);
    }
  }
}

void sub_1005A2164(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  unint64_t v2 = off_1009F8780;
  unint64_t v3 = *(void *)(v1 + 128);

  sub_1002F9A5C((uint64_t)v2, v3);
}

void sub_1005A21C8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  unint64_t v2 = off_1009F8780;
  unint64_t v3 = *(void *)(v1 + 128);

  sub_10030669C((uint64_t)v2, v3);
}

void sub_1005A222C(void *a1@<X1>, void *a2@<X2>, void **a3@<X8>)
{
  id v5 = a1;
  id v34 = a2;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  __int16 v32 = v5;
  int v33 = +[LSBundleRecord bundleRecordWithBundleIdentifier:v5 allowPlaceholder:1 error:0];
  uint64_t v6 = [v33 infoDictionary];
  int v35 = [v6 objectForKey:v34 ofClass:objc_opt_class()];

  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v31 = v35;
    if ([v31 count])
    {
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      id obj = v31;
      id v7 = [obj countByEnumeratingWithState:&v37 objects:v43 count:16];
      if (v7)
      {
        uint64_t v8 = *(void *)v38;
        do
        {
          for (unsigned __int16 i = 0; i != v7; unsigned __int16 i = (char *)i + 1)
          {
            if (*(void *)v38 != v8) {
              objc_enumerationMutation(obj);
            }
            uint64_t v10 = *(void *)(*((void *)&v37 + 1) + 8 * i);
            unsigned __int8 v11 = +[CBUUID UUIDWithString:v10];
            id v12 = [v11 data];
            int v13 = (int8x16_t *)[v12 bytes];
            char v14 = +[CBUUID UUIDWithString:v10];
            int v15 = [v14 data];
            sub_10071D1C4((uint64_t)&v41, v13, [v15 length]);
            int v17 = (char *)a3[1];
            long long v16 = (char *)a3[2];
            if (v17 >= v16)
            {
              unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * ((v17 - (unsigned char *)*a3) >> 2);
              unint64_t v21 = v20 + 1;
              if (v20 + 1 > 0xCCCCCCCCCCCCCCCLL) {
                abort();
              }
              unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * ((v16 - (unsigned char *)*a3) >> 2);
              if (2 * v22 > v21) {
                unint64_t v21 = 2 * v22;
              }
              if (v22 >= 0x666666666666666) {
                unint64_t v23 = 0xCCCCCCCCCCCCCCCLL;
              }
              else {
                unint64_t v23 = v21;
              }
              if (v23) {
                int v24 = (char *)sub_10003767C((uint64_t)(a3 + 2), v23);
              }
              else {
                int v24 = 0;
              }
              uint64_t v25 = &v24[20 * v20];
              long long v26 = v41;
              *((_DWORD *)v25 + 4) = v42;
              *(_OWORD *)uint64_t v25 = v26;
              int v28 = (char *)*a3;
              BOOL v27 = (char *)a3[1];
              unsigned int v29 = v25;
              if (v27 != *a3)
              {
                do
                {
                  long long v30 = *(_OWORD *)(v27 - 20);
                  *((_DWORD *)v29 - 1) = *((_DWORD *)v27 - 1);
                  *(_OWORD *)(v29 - 20) = v30;
                  v29 -= 20;
                  v27 -= 20;
                }
                while (v27 != v28);
                BOOL v27 = (char *)*a3;
              }
              int v19 = v25 + 20;
              *a3 = v29;
              a3[1] = v25 + 20;
              a3[2] = &v24[20 * v23];
              if (v27) {
                operator delete(v27);
              }
            }
            else
            {
              long long v18 = v41;
              *((_DWORD *)v17 + 4) = v42;
              *(_OWORD *)int v17 = v18;
              int v19 = v17 + 20;
            }
            a3[1] = v19;
          }
          id v7 = [obj countByEnumeratingWithState:&v37 objects:v43 count:16];
        }
        while (v7);
      }
    }
  }
}

void sub_1005A2578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, void *a16)
{
  long long v18 = *(void **)v16;
  if (*(void *)v16)
  {
    *(void *)(v16 + 8) = v18;
    operator delete(v18);
  }

  _Unwind_Resume(a1);
}

void sub_1005A2638(void *a1@<X1>, void *a2@<X2>, char **a3@<X8>)
{
  id v5 = a1;
  id v6 = a2;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  long long v30 = v5;
  id v31 = v6;
  __int16 v32 = +[LSBundleRecord bundleRecordWithBundleIdentifier:v5 allowPlaceholder:1 error:0];
  id v7 = [v32 infoDictionary];
  uint64_t v8 = [v7 objectForKey:v6 ofClass:objc_opt_class()];

  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    unsigned int v29 = v8;
    id v9 = v8;
    if ([v9 count])
    {
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      id v10 = v9;
      id v11 = [v10 countByEnumeratingWithState:&v34 objects:v38 count:16];
      if (v11)
      {
        uint64_t v12 = *(void *)v35;
        do
        {
          for (unsigned __int16 i = 0; i != v11; unsigned __int16 i = (char *)i + 1)
          {
            if (*(void *)v35 != v12) {
              objc_enumerationMutation(v10);
            }
            uint64_t v14 = *(void *)(*((void *)&v34 + 1) + 8 * i);
            int v33 = 0;
            int v15 = +[NSScanner scannerWithString:v14];
            [v15 scanHexInt:&v33];
            __int16 v16 = v33;
            long long v18 = a3[1];
            unint64_t v17 = (unint64_t)a3[2];
            if ((unint64_t)v18 >= v17)
            {
              unint64_t v20 = *a3;
              uint64_t v21 = v18 - *a3;
              if (v21 <= -3) {
                abort();
              }
              uint64_t v22 = v21 >> 1;
              unint64_t v23 = v17 - (void)v20;
              if (v23 <= (v21 >> 1) + 1) {
                unint64_t v24 = v22 + 1;
              }
              else {
                unint64_t v24 = v23;
              }
              if (v23 >= 0x7FFFFFFFFFFFFFFELL) {
                uint64_t v25 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                uint64_t v25 = v24;
              }
              if (v25)
              {
                long long v26 = (char *)sub_1002C5544((uint64_t)(a3 + 2), v25);
                unint64_t v20 = *a3;
                long long v18 = a3[1];
              }
              else
              {
                long long v26 = 0;
              }
              BOOL v27 = &v26[2 * v22];
              *(_WORD *)BOOL v27 = v16;
              int v19 = v27 + 2;
              while (v18 != v20)
              {
                __int16 v28 = *((_WORD *)v18 - 1);
                v18 -= 2;
                *((_WORD *)v27 - 1) = v28;
                v27 -= 2;
              }
              *a3 = v27;
              a3[1] = v19;
              a3[2] = &v26[2 * v25];
              if (v20) {
                operator delete(v20);
              }
            }
            else
            {
              *(_WORD *)long long v18 = v33;
              int v19 = v18 + 2;
            }
            a3[1] = v19;
          }
          id v11 = [v10 countByEnumeratingWithState:&v34 objects:v38 count:16];
        }
        while (v11);
      }
    }
    uint64_t v8 = v29;
  }
}

void sub_1005A28D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13)
{
  __int16 v16 = *(void **)v13;
  if (*(void *)v13)
  {
    *(void *)(v13 + 8) = v16;
    operator delete(v16);
  }

  _Unwind_Resume(a1);
}

void sub_1005A2978(void *a1@<X1>, void *a2@<X2>, int64x2_t *a3@<X8>)
{
  id v29 = a1;
  id v30 = a2;
  a3->i64[1] = 0;
  a3[1].i64[0] = 0;
  a3->i64[0] = 0;
  id v5 = +[LSBundleRecord bundleRecordWithBundleIdentifier:v29 allowPlaceholder:1 error:0];
  id v6 = [v5 infoDictionary];
  id v31 = [v6 objectForKey:v30 ofClass:objc_opt_class()];

  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v28 = v31;
    if ([v28 count])
    {
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      id obj = v28;
      id v7 = [obj countByEnumeratingWithState:&v35 objects:v43 count:16];
      if (v7)
      {
        uint64_t v8 = *(void *)v36;
        do
        {
          for (unsigned __int16 i = 0; i != v7; unsigned __int16 i = (char *)i + 1)
          {
            if (*(void *)v36 != v8) {
              objc_enumerationMutation(obj);
            }
            sub_10004191C(__p, (char *)[*(id *)(*((void *)&v35 + 1) + 8 * i) UTF8String]);
            unint64_t v11 = a3->u64[1];
            unint64_t v10 = a3[1].u64[0];
            if (v11 >= v10)
            {
              unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - a3->i64[0]) >> 3);
              unint64_t v14 = v13 + 1;
              if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
                abort();
              }
              unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - a3->i64[0]) >> 3);
              if (2 * v15 > v14) {
                unint64_t v14 = 2 * v15;
              }
              if (v15 >= 0x555555555555555) {
                unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v16 = v14;
              }
              int v42 = a3 + 1;
              if (v16) {
                unint64_t v17 = (char *)sub_1002B3440((uint64_t)a3[1].i64, v16);
              }
              else {
                unint64_t v17 = 0;
              }
              long long v18 = &v17[24 * v13];
              long long v19 = *(_OWORD *)__p;
              *((void *)v18 + 2) = v34;
              *(_OWORD *)long long v18 = v19;
              __p[1] = 0;
              uint64_t v34 = 0;
              __p[0] = 0;
              uint64_t v21 = a3->i64[0];
              unint64_t v20 = a3->u64[1];
              if (v20 == a3->i64[0])
              {
                int64x2_t v24 = vdupq_n_s64(v20);
                uint64_t v22 = &v17[24 * v13];
              }
              else
              {
                uint64_t v22 = &v17[24 * v13];
                do
                {
                  long long v23 = *(_OWORD *)(v20 - 24);
                  *((void *)v22 - 1) = *(void *)(v20 - 8);
                  *(_OWORD *)(v22 - 24) = v23;
                  v22 -= 24;
                  *(void *)(v20 - 16) = 0;
                  *(void *)(v20 - 8) = 0;
                  *(void *)(v20 - 24) = 0;
                  v20 -= 24;
                }
                while (v20 != v21);
                int64x2_t v24 = *a3;
              }
              uint64_t v25 = v18 + 24;
              a3->i64[0] = (uint64_t)v22;
              a3->i64[1] = (uint64_t)(v18 + 24);
              int64x2_t v40 = v24;
              uint64_t v26 = a3[1].i64[0];
              a3[1].i64[0] = (uint64_t)&v17[24 * v16];
              uint64_t v41 = v26;
              uint64_t v39 = v24.i64[0];
              sub_1002B4440((uint64_t)&v39);
              int v27 = SHIBYTE(v34);
              a3->i64[1] = (uint64_t)v25;
              if (v27 < 0) {
                operator delete(__p[0]);
              }
            }
            else
            {
              long long v12 = *(_OWORD *)__p;
              *(void *)(v11 + 16) = v34;
              *(_OWORD *)unint64_t v11 = v12;
              a3->i64[1] = v11 + 24;
            }
          }
          id v7 = [obj countByEnumeratingWithState:&v35 objects:v43 count:16];
        }
        while (v7);
      }
    }
  }
}

void sub_1005A2C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_100051568((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_1005A2D34(uint64_t a1, uint64_t a2, int a3)
{
  switch(a3)
  {
    case 0:
      unsigned int v5 = 4;
      break;
    case 1:
      unsigned int v5 = 5;
      break;
    case 2:
    case 4:
      unsigned int v5 = *(_DWORD *)(a1 + 136);
      break;
    case 3:
      unsigned int v5 = 2;
      break;
    default:
      unsigned int v5 = 0;
      break;
  }
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  int v6 = sub_1002F45B8((uint64_t)off_1009F8780, *(void *)(a1 + 128));
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  int v7 = sub_1002F4608((uint64_t)off_1009F8780, *(void *)(a1 + 128));
  int v8 = *(unsigned __int8 *)(a1 + 175);
  if (*(unsigned char *)(a1 + 175) || *(unsigned char *)(a1 + 176) && !v7 || *(unsigned char *)(a1 + 177))
  {
    int v9 = 1;
  }
  else
  {
    if (*(unsigned char *)(a1 + 178)) {
      BOOL v20 = v7 == 0;
    }
    else {
      BOOL v20 = 0;
    }
    int v9 = v20;
  }
  unint64_t v10 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = *(unsigned __int8 *)(a1 + 193);
    int v12 = *(unsigned __int8 *)(a1 + 195);
    int v13 = *(unsigned __int8 *)(a1 + 176);
    int v14 = *(unsigned __int8 *)(a1 + 177);
    int v15 = *(unsigned __int8 *)(a1 + 178);
    *(_DWORD *)long long buf = 67111424;
    int v23 = a3;
    __int16 v24 = 1024;
    unsigned int v25 = v5;
    __int16 v26 = 1024;
    int v27 = v11;
    __int16 v28 = 1024;
    int v29 = v12;
    __int16 v30 = 1024;
    int v31 = v8;
    __int16 v32 = 1024;
    int v33 = v13;
    __int16 v34 = 1024;
    int v35 = v14;
    __int16 v36 = 1024;
    int v37 = v15;
    __int16 v38 = 1024;
    int v39 = v6;
    __int16 v40 = 1024;
    int v41 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Power state changed. PowerState:%d managerState:%d fUserAuthorization: %d\t medicalDeviceorStateRestorationAppPendingTCC:%d fDeviceAccessForMediaSession:%d fDeviceAccessForMediaExtension:%d fDeviceAccessPerAccessorySession:%d fDeviceAccessPerAccessoryExtension:%d appState:%02X deviceAccessExempt:%d", buf, 0x3Eu);
  }
  if (*(int *)(a1 + 80) <= 0 && !*(unsigned char *)(a1 + 185) && v6 != 32 && !*(unsigned char *)(a1 + 193))
  {
    char v19 = *(unsigned char *)(a1 + 195) ? 1 : v9;
    if ((v19 & 1) == 0)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077FA94();
      }
      if (*(unsigned char *)(a1 + 194)) {
        unsigned int v5 = 3;
      }
      else {
        unsigned int v5 = 4;
      }
    }
  }
  sub_1004F10B0(a1, v5);
  if (a3 == 1)
  {
    sub_1005A305C(a1);
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009B7AC8);
    }
    uint64_t v16 = *((void *)off_1009F7EB8 + 37);
    uint64_t v17 = *((void *)off_1009F7EB8 + 39);
    uint64_t v18 = *(void *)(a1 + 128);
    v21[0] = *((void *)off_1009F7EB8 + 36);
    v21[1] = v16;
    void v21[2] = v17;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 176))(a1, v18, v21);
  }
}

void sub_1005A305C(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  uint64_t v3 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 480))(v3)) {
    xpc_dictionary_set_BOOL(v2, "kCBMsgArgSupportsExtendedAdvertising", 1);
  }
  uint64_t v4 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 568))(v4))
  {
    uint64_t v5 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 576))(v5)) {
      xpc_dictionary_set_BOOL(v2, "kCBMsgArgSupportsExtendedScanAndConnect", 1);
    }
  }
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_value(v6, "kCBMsgArgSupportedFeatures", v2);
  sub_1000173FC(a1, 29, v6, 1);

  xpc_release(v2);
}

void sub_1005A31A8(uint64_t a1, uint64_t a2, int a3)
{
}

void sub_1005A31B0(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    unsigned int v3 = 10;
  }
  else {
    unsigned int v3 = 5;
  }
  sub_1004F10B0(a1, v3);
}

void sub_1005A31C4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = a1 - 144;
  if (a3) {
    unsigned int v4 = 10;
  }
  else {
    unsigned int v4 = 5;
  }
  sub_1004F10B0(v3, v4);
}

void sub_1005A31DC(uint64_t a1, uint64_t a2, int a3)
{
}

void sub_1005A31E4(uint64_t a1, uint64_t a2, int a3)
{
}

void sub_1005A31F0(uint64_t a1, int a2, void *a3, unsigned int a4)
{
  id v11 = a3;
  int v7 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 40);
    xpc_dictionary_set_int64(v7, "kCBMsgArgResult", a2);
    if (!a2)
    {
      xpc_dictionary_set_int64(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), "kCBFastLeConnectionInfoVersion", a4);
      xpc_dictionary_set_int64(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), "kCBFastLeConnectionInfoLength", (int64_t)[v11 length]);
      int v9 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      id v10 = v11;
      xpc_dictionary_set_data(v9, "kCBFastLeConnectionInfoData", [v10 bytes], (size_t)[v10 length]);
    }
    xpc_connection_send_message(*(xpc_connection_t *)(v8 + 16), *(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
    xpc_release(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
  }
}

void sub_1005A331C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1005A3330(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (*(void *)(a1 + 32))
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    int64_t v3 = (int)sub_1006C8110((uint64_t)off_1009F7ED8, *(void **)(a1 + 32), *(unsigned __int8 *)(a1 + 64), *(void **)(a1 + 40), 1);
  }
  else
  {
    int64_t v3 = 8;
  }
  xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 56));
  if (reply)
  {
    uint64_t v5 = reply;
    xpc_dictionary_set_int64(reply, "kCBMsgArgResult", v3);
    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), v5);
    xpc_release(v5);
  }
}

void sub_1005A3400(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32))
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    int64_t v3 = (int)sub_1006C81D8((uint64_t)off_1009F7ED8, *(void **)(a1 + 32));
  }
  else
  {
    int64_t v3 = 8;
  }
  xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 48));
  if (reply)
  {
    uint64_t v5 = reply;
    xpc_dictionary_set_int64(reply, "kCBMsgArgResult", v3);
    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), v5);
    xpc_release(v5);
  }
}

void sub_1005A34C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32))
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    int64_t v3 = (int)sub_1006C840C((uint64_t)off_1009F7ED8, *(void **)(a1 + 32), *(unsigned __int8 *)(a1 + 56) == 1);
  }
  else
  {
    int64_t v3 = 8;
  }
  xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 48));
  if (reply)
  {
    uint64_t v5 = reply;
    xpc_dictionary_set_int64(reply, "kCBMsgArgResult", v3);
    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), v5);
    xpc_release(v5);
  }
}

void sub_1005A3594(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (*(void *)(a1 + 32))
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    uint64_t v3 = sub_100030DCC((uint64_t)off_1009F7ED8, *(void **)(a1 + 32), 0);
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    BOOL v4 = sub_1006BB9F4((uint64_t)off_1009F7ED8, *(void **)(a1 + 32));
    uint64_t v5 = sub_10003FB34();
    int64_t v6 = (*(int (**)(uint64_t, uint64_t, BOOL, void, id))(*(void *)v5 + 1840))(v5, v3, v4, [*(id *)(a1 + 40) length], [*(id *)(a1 + 40) bytes]);
  }
  else
  {
    int64_t v6 = 8;
  }
  xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 56));
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_int64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), v8);
    xpc_release(v8);
  }
}

void sub_1005A3710(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32))
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    sub_100030DCC((uint64_t)off_1009F7ED8, *(void **)(a1 + 32), 0);
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    sub_1006BB9F4((uint64_t)off_1009F7ED8, *(void **)(a1 + 32));
    uint64_t v3 = *(void *)sub_10003FB34();
    int64_t v4 = (*(int (**)(void))(v3 + 1848))();
  }
  else
  {
    int64_t v4 = 8;
  }
  xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 48));
  if (reply)
  {
    int64_t v6 = reply;
    xpc_dictionary_set_int64(reply, "kCBMsgArgResult", v4);
    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), v6);
    xpc_release(v6);
  }
}

void sub_1005A3860(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (![*(id *)(a1 + 32) isEqualToString:@"config"])
  {
    if ([*(id *)(a1 + 32) isEqualToString:@"enable"])
    {
      unsigned int v6 = *(unsigned __int8 *)(a1 + 64);
      if (v6 <= 1)
      {
        BOOL v9 = v6 == 1;
        uint64_t v10 = sub_10003FB34();
        int v5 = (*(uint64_t (**)(uint64_t, void, BOOL, BOOL))(*(void *)v10 + 1896))(v10, *(void *)(a1 + 40), v9, v9);
        goto LABEL_10;
      }
    }
    goto LABEL_7;
  }
  int v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 == 2)
  {
    uint64_t v8 = sub_10003FB34();
    int v5 = (*(uint64_t (**)(uint64_t, void))(*(void *)v8 + 1912))(v8, *(void *)(a1 + 40));
    goto LABEL_10;
  }
  if (v3 != 1)
  {
LABEL_7:
    int v7 = 3;
    goto LABEL_11;
  }
  uint64_t v4 = sub_10003FB34();
  int v5 = (*(uint64_t (**)(uint64_t, void))(*(void *)v4 + 1904))(v4, *(void *)(a1 + 40));
LABEL_10:
  int v7 = v5;
LABEL_11:
  xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 56));
  if (reply)
  {
    int v12 = reply;
    xpc_dictionary_set_int64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), v12);
    xpc_release(v12);
  }
}

uint64_t sub_1005A39E0(uint64_t a1)
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009B7AC8);
  }
  uint64_t v2 = off_1009F7EB8;
  sub_1000305AC(v4, *(void *)(a1 + 32));
  return sub_10069D688((uint64_t)v2, v4, *(unsigned __int16 *)(a1 + 52), *(unsigned __int16 *)(a1 + 54), *(unsigned __int16 *)(a1 + 56), *(_WORD *)(a1 + 58), *(unsigned __int16 *)(a1 + 60), *(float *)(a1 + 40), *(float *)(a1 + 44), *(float *)(a1 + 48));
}

void sub_1005A3A9C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32))
  {
    uint64_t v3 = sub_10003FB34();
    int64_t v4 = (*(int (**)(uint64_t, void, void, void, void))(*(void *)v3 + 1584))(v3, *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 56), *(char *)(a1 + 57), *(char *)(a1 + 58));
  }
  else
  {
    int64_t v4 = 8;
  }
  xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 48));
  if (reply)
  {
    unsigned int v6 = reply;
    xpc_dictionary_set_int64(reply, "kCBMsgArgResult", v4);
    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), v6);
    xpc_release(v6);
  }
}

void sub_1005A3B68(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = *(unsigned __int8 *)(a1 + 56);
  if (v3 == 3)
  {
    uint64_t v4 = sub_10003FB34();
    int64_t v5 = (*(int (**)(uint64_t))(*(void *)v4 + 3648))(v4);
    goto LABEL_15;
  }
  if (v3 == 2)
  {
    if (*(void *)(a1 + 32))
    {
      if (qword_1009F7EC0 != -1) {
        dispatch_once(&qword_1009F7EC0, &stru_1009B7AC8);
      }
      sub_1006A4EB8((uint64_t)off_1009F7EB8, *(void **)(a1 + 32));
      goto LABEL_13;
    }
  }
  else if (v3 == 1 && *(void *)(a1 + 32))
  {
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009B7AC8);
    }
    sub_1006A4DD8((uint64_t)off_1009F7EB8, *(void **)(a1 + 32));
LABEL_13:
    int64_t v5 = 0;
    goto LABEL_15;
  }
  int64_t v5 = 3;
LABEL_15:
  xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 48));
  if (reply)
  {
    int v7 = reply;
    xpc_dictionary_set_int64(reply, "kCBMsgArgResult", v5);
    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), v7);
    xpc_release(v7);
  }
}

void sub_1005A3CC8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = *(unsigned __int8 *)(a1 + 56);
  if (v3 == 2)
  {
    if (*(void *)(a1 + 32))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077FB74();
      }
      if (qword_1009F7EC0 != -1) {
        dispatch_once(&qword_1009F7EC0, &stru_1009B7AC8);
      }
      sub_1006A5074((uint64_t)off_1009F7EB8, *(void **)(a1 + 32));
      goto LABEL_15;
    }
  }
  else if (v3 == 1 && *(void *)(a1 + 32))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077FB0C();
    }
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009B7AC8);
    }
    sub_1006A4F94((uint64_t)off_1009F7EB8, *(void **)(a1 + 32));
LABEL_15:
    int64_t v4 = 0;
    goto LABEL_17;
  }
  int64_t v4 = 3;
LABEL_17:
  xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 48));
  if (reply)
  {
    unsigned int v6 = reply;
    xpc_dictionary_set_int64(reply, "kCBMsgArgResult", v4);
    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), v6);
    xpc_release(v6);
  }
}

void sub_1005A3E24(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  int v3 = off_1009F8780;
  unint64_t v4 = *(void *)(v2 + 128);
  int v5 = *(unsigned __int8 *)(a1 + 40);

  sub_1002F60AC((uint64_t)v3, v4, v5);
}

void sub_1005A3E90(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  uint64_t v2 = off_1009F8780;
  unint64_t v3 = *(void *)(v1 + 128);

  sub_100055E1C((uint64_t)v2, v3);
}

void sub_1005A3EF4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  if (qword_1009F7ED0 != -1) {
    dispatch_once(&qword_1009F7ED0, &stru_1009B7A28);
  }
  unint64_t v3 = sub_10070CA20(qword_1009F7EC8);
  id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v9;
    do
    {
      for (unsigned __int16 i = 0; i != v4; unsigned __int16 i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v3);
        }
        xpc_object_t v7 = sub_10002FB38(*(void **)(*((void *)&v8 + 1) + 8 * i), *(unsigned __int8 *)(v2 + 168), *(_DWORD *)(v2 + 80));
        xpc_array_append_value(*(xpc_object_t *)(a1 + 40), v7);
        xpc_release(v7);
      }
      id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v4);
  }
}

void sub_1005A4040(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005A4064(void *a1)
{
  if (qword_1009F7ED0 != -1) {
    dispatch_once(&qword_1009F7ED0, &stru_1009B7A28);
  }
  uint64_t v2 = qword_1009F7EC8;
  unint64_t v3 = (void *)a1[4];
  BOOL v4 = a1[5] == 1;
  BOOL v5 = a1[6] == 1;
  BOOL v6 = a1[7] == 1;

  sub_10070874C(v2, v3, v4, v5, v6);
}

void sub_1005A40E4(void *a1)
{
  uint64_t v2 = a1[5];
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  unint64_t v3 = off_1009F8780;
  unint64_t v4 = *(void *)(v2 + 128);
  BOOL v5 = (void *)a1[4];
  BOOL v6 = a1[6] != 0;

  sub_1002F65F4((uint64_t)v3, v4, v5, v6, (uint64_t)(a1 + 7));
}

void sub_1005A4160(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  unint64_t v3 = off_1009F8780;
  unint64_t v4 = *(void *)(v2 + 128);
  BOOL v5 = *(void **)(a1 + 32);
  BOOL v6 = *(void *)(a1 + 48) != 0;
  unsigned int v7 = *(_DWORD *)(a1 + 56);

  sub_1002F6538((uint64_t)v3, v4, v5, v6, v7);
}

void sub_1005A41DC(uint64_t a1)
{
  if (qword_1009F7ED0 != -1) {
    dispatch_once(&qword_1009F7ED0, &stru_1009B7A28);
  }
  sub_10070BF0C(qword_1009F7EC8, *(void **)(a1 + 32));
  if (*(unsigned char *)(a1 + 40))
  {
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009B7AC8);
    }
    uint64_t v2 = off_1009F7EB8;
    sub_1000305AC(v3, *(void *)(a1 + 32));
    sub_100683CFC((uint64_t)v2, v3, 2u);
  }
}

void sub_1005A42BC(void *a1)
{
  uint64_t v2 = a1[5];
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  unint64_t v3 = off_1009F8780;
  unint64_t v4 = *(void *)(v2 + 128);
  BOOL v5 = (void *)a1[4];
  char v6 = a1[6] != 0;

  sub_1002F630C((uint64_t)v3, v4, v5, v6);
}

uint64_t sub_1005A4334(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  uint64_t result = sub_1002F6494((uint64_t)off_1009F8780, *(void *)(v2 + 128), *(void **)(a1 + 32));
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1005A43A0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v8 = a3;
  v13[0] = v8;
  v12[0] = @"kCBMsgArgDeviceUUID";
  v12[1] = @"kCBMsgArgPairingType";
  long long v9 = +[NSNumber numberWithUnsignedInt:a4];
  v13[1] = v9;
  void v12[2] = @"kCBMsgArgPairingPasskey";
  long long v10 = +[NSNumber numberWithUnsignedInt:a5];
  void v13[2] = v10;
  long long v11 = +[NSDictionary dictionaryWithObjects:v13 forKeys:v12 count:3];

  sub_100017388(a1, 16, v11);
}

void sub_1005A44AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005A44E8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
}

void sub_1005A44F0(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  id v6 = a3;
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  id v8 = v6;
  long long v9 = v8;
  if (v8)
  {
    *(void *)uuid = 0;
    uint64_t v14 = 0;
    [v8 getUUIDBytes:uuid];
    xpc_dictionary_set_uuid(v7, "kCBMsgArgDeviceUUID", uuid);
  }

  xpc_dictionary_set_int64(v7, "kCBMsgArgResult", a4);
  if (a4 == 168)
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    sub_1006C037C((uint64_t)off_1009F7ED8, v9);
    id v11 = (id)objc_claimAutoreleasedReturnValue();
    int v12 = v11;
    if (v11)
    {
      *(void *)uuid = 0;
      uint64_t v14 = 0;
      [v11 getUUIDBytes:uuid];
      xpc_dictionary_set_uuid(v7, "kCBMsgArgDeviceOriginalUUID", uuid);
    }
  }
  else if (!a4)
  {
    unsigned int v10 = sub_1005A46AC(v9);
    xpc_dictionary_set_int64(v7, "kCBMsgArgPairingState", v10);
  }
  sub_1000173FC(a1, 17, v7, 1);
}

void sub_1005A4674(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1005A46AC(void *a1)
{
  id v1 = a1;
  if (qword_1009F7ED0 != -1) {
    dispatch_once(&qword_1009F7ED0, &stru_1009B7A28);
  }
  if (sub_100008DC4(qword_1009F7EC8, v1))
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    sub_1006BE7F4((uint64_t)off_1009F7ED8, v1, (uint64_t)v5);
    if (v6 < 0)
    {
      BOOL v2 = v5[1] == 0;
      operator delete(v5[0]);
    }
    else
    {
      BOOL v2 = v6 == 0;
    }
    if (v2) {
      uint64_t v3 = 1;
    }
    else {
      uint64_t v3 = 2;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void sub_1005A4790(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005A47A4(uint64_t a1, uint64_t a2, void *a3, int a4)
{
}

void sub_1005A47AC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  CFStringRef v6 = @"kCBMsgArgDeviceUUID";
  id v7 = v4;
  BOOL v5 = +[NSDictionary dictionaryWithObjects:&v7 forKeys:&v6 count:1];
  sub_100017388(a1, 18, v5);
}

void sub_1005A4854(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005A4878(uint64_t a1, uint64_t a2, void *a3)
{
}

void sub_1005A4880(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = v6;
  if (*(unsigned char *)(a1 + 168))
  {
    v10[0] = @"kCBMsgArgDeviceUUID";
    v10[1] = @"kCBMsgArgState";
    v11[0] = v6;
    id v8 = +[NSNumber numberWithBool:a4];
    v11[1] = v8;
    long long v9 = +[NSDictionary dictionaryWithObjects:v11 forKeys:v10 count:2];
    sub_100017388(a1, 166, v9);
  }
}

void sub_1005A4960(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005A4990(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
}

void sub_1005A4998(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (*(int *)(v2 + 80) >= 1 && [*(id *)(a1 + 32) length])
  {
    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
    }
    int64_t v3 = sub_100306300((uint64_t)off_1009F8780, *(void **)(a1 + 32));
  }
  else
  {
    int64_t v3 = 0;
  }
  xpc_dictionary_set_int64(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), "kCBMsgArgCount", v3);
  xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), *(xpc_object_t *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
  id v4 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);

  xpc_release(v4);
}

uint64_t sub_1005A4A60(uint64_t a1, xpc_object_t object, uint64_t a3)
{
  int v173 = &off_100998428;
  xpc_object_t v174 = 0;
  int v171 = &off_100998428;
  xpc_object_t v172 = 0;
  if (xpc_get_type(object) != (xpc_type_t)&_xpc_type_dictionary)
  {
    id v6 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
    {
      xpc_type_t type = xpc_get_type(object);
      sub_10077FDB0((uint64_t)type, (uint64_t)buf, v6);
    }
    goto LABEL_4;
  }
  if (*(int *)(a1 + 80) >= 2)
  {
    uint64_t v155 = 0;
    xpc_object_t value = xpc_dictionary_get_value(object, "kCBAdvOptionHoldPowerAssertion");
    if (value)
    {
      uint64_t v8 = sub_100019A00(value, (int64_t *)&v155);
      if (v8) {
        goto LABEL_5;
      }
      if (v155)
      {
        *(unsigned char *)(*(void *)(a3 + 8) + 360) = 1;
        id v11 = qword_100A19EC8;
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
        {
          int v12 = (void *)(a1 + 56);
          if (*(char *)(a1 + 79) < 0) {
            int v12 = (void *)*v12;
          }
          *(_DWORD *)long long buf = 136315138;
          *(void *)&uint8_t buf[4] = v12;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "session \"%s\" asking to hold a power assertion for advertising", buf, 0xCu);
        }
      }
    }
  }
  if (*(unsigned char *)(a1 + 184))
  {
    *(void *)long long buf = 0;
    xpc_object_t v13 = xpc_dictionary_get_value(object, "kCBAdvOptionUseFGInterval");
    if (v13)
    {
      uint64_t v8 = sub_100019A00(v13, (int64_t *)buf);
      if (v8) {
        goto LABEL_5;
      }
      unsigned __int16 v14 = 48;
    }
    else
    {
      unsigned __int16 v14 = 290;
    }
    xpc_object_t v15 = xpc_dictionary_get_value(object, "kCBAdvOptionAdvertisingInterval");
    if (v15)
    {
      uint64_t v8 = sub_100019A00(v15, (int64_t *)buf);
      if (v8) {
        goto LABEL_5;
      }
      unsigned __int16 v14 = *(_WORD *)buf;
      if ((unint64_t)(*(void *)buf - 16385) < 0xFFFFFFFFFFFFC01FLL)
      {
LABEL_4:
        uint64_t v8 = 3;
        goto LABEL_5;
      }
    }
  }
  else
  {
    unsigned __int16 v14 = 290;
  }
  if ((unsigned __int16)(((unsigned __int16)(v14 - 37) >> 1) | ((v14 - 37) << 15)) <= 0xBu
    && ((1 << ((unsigned __int16)(v14 - 37) >> 1)) & 0x92D) != 0
    || (v47 = sub_100035F54(), unsigned int v16 = (*(uint64_t (**)(uint64_t))(*(void *)v47 + 728))(v47), v16 <= v14))
  {
    LOWORD(v16) = v14;
  }
  else
  {
    uint64_t v48 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134218496;
      *(double *)&uint8_t buf[4] = (double)v14 * 0.625;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&uint8_t buf[14] = (double)v16 * 0.625;
      *(_WORD *)&unsigned char buf[22] = 2048;
      *(double *)&uint8_t buf[24] = *(double *)&buf[14];
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "Limit advertising interval from %.2f msec to %.2f msec (hw limit %.2f)", buf, 0x20u);
    }
  }
  *(_WORD *)(*(void *)(a3 + 8) + 222) = v16;
  int64_t v170 = 0;
  if (*(int *)(a1 + 80) <= 0)
  {
    int64_t v169 = 0;
  }
  else
  {
    xpc_object_t v17 = xpc_dictionary_get_value(object, "kCBAdvOptionForcePrimaryPHY");
    if (v17)
    {
      uint64_t v8 = sub_100019A00(v17, &v170);
      if (v8) {
        goto LABEL_5;
      }
      if (v170 - 1 <= 2) {
        *(unsigned char *)(*(void *)(a3 + 8) + 339) = v170;
      }
    }
    int64_t v170 = 0;
    xpc_object_t v18 = xpc_dictionary_get_value(object, "kCBAdvOptionForceSecondaryPHY");
    if (v18)
    {
      uint64_t v8 = sub_100019A00(v18, &v170);
      if (v8) {
        goto LABEL_5;
      }
      if (v170 - 1 <= 2) {
        *(unsigned char *)(*(void *)(a3 + 8) + 340) = v170;
      }
    }
    int v19 = *(_DWORD *)(a1 + 80);
    int64_t v169 = 0;
    if (v19 >= 1)
    {
      xpc_object_t v20 = xpc_dictionary_get_value(object, "kCBAdvOptionForcePrimaryPhyOptions");
      if (v20)
      {
        uint64_t v8 = sub_100019A00(v20, &v169);
        if (v8) {
          goto LABEL_5;
        }
        if (v169 - 1 <= 1) {
          *(unsigned char *)(*(void *)(a3 + 8) + 343) = v169;
        }
      }
      int64_t v169 = 0;
      xpc_object_t v21 = xpc_dictionary_get_value(object, "kCBAdvOptionForceSecondaryPhyOptions");
      if (v21)
      {
        uint64_t v8 = sub_100019A00(v21, &v169);
        if (v8) {
          goto LABEL_5;
        }
        if (v169 - 1 <= 1) {
          *(unsigned char *)(*(void *)(a3 + 8) + 344) = v169;
        }
      }
    }
  }
  __int16 v168 = 0;
  unsigned __int8 v167 = 0;
  __int16 v140 = &off_100998428;
  xpc_object_t v165 = &off_100998428;
  id v166 = 0;
  if (*(int *)(a1 + 80) <= 0)
  {
    id v139 = 0;
    int64_t v164 = 0;
  }
  else
  {
    sub_10003FB34();
    if (sub_1000262C4() && _os_feature_enabled_impl())
    {
      xpc_object_t v22 = xpc_dictionary_get_value(object, "kCBAdvOptionUseDecisionBasedAdvPayload");
      xpc_object_t v23 = xpc_dictionary_get_value(object, "kCBAdvOptionDBAFDecisionTypeFlags");
      xpc_object_t v24 = xpc_dictionary_get_value(object, "kCBAdvOptionDBAFDecisionDataLength");
      xpc_object_t v25 = xpc_dictionary_get_value(object, "kCBAdvOptionDBAFDecisionData");
      id v139 = 0;
      if (v22)
      {
        if (v23)
        {
          if (v24)
          {
            __int16 v26 = v25;
            if (v25)
            {
              if (sub_1002D3F84(v22, (unsigned char *)&v168 + 1)
                || sub_1002D3F84(v23, &v168)
                || sub_1002D3F84(v24, &v167)
                || sub_1002D4184(v26, (uint64_t)&v165))
              {
                if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
                  sub_10077FD7C();
                }
                uint64_t v8 = 3;
                goto LABEL_271;
              }
              uint64_t v60 = sub_10004A6E4((uint64_t)&v165);
              uint64_t v61 = +[NSData dataWithBytes:v60 length:v167];
              uint64_t v62 = *(void *)(a3 + 8);
              char v63 = v168;
              unsigned __int8 v64 = v167;
              *(unsigned char *)(v62 + 345) = HIBYTE(v168);
              *(unsigned char *)(v62 + 346) = v63;
              *(unsigned char *)(v62 + 347) = v64;
              id v139 = v61;
              objc_storeStrong((id *)(v62 + 352), v61);
            }
          }
        }
      }
    }
    else
    {
      id v139 = 0;
    }
    int v27 = *(_DWORD *)(a1 + 80);
    int64_t v164 = 0;
    if (v27 >= 1)
    {
      xpc_object_t v28 = xpc_dictionary_get_value(object, "kCBAdvOptionStopOnAdvertisingAddressChange");
      if (v28)
      {
        uint64_t v8 = sub_100019A00(v28, &v164);
        if (v8) {
          goto LABEL_270;
        }
      }
    }
  }
  *(unsigned char *)(*(void *)(a3 + 8) + 307) = v164 != 0;
  if (*(int *)(a1 + 80) > 1)
  {
    uint64_t v29 = sub_10003FB34();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v29 + 2560))(v29))
    {
      *(void *)long long buf = 0;
      xpc_object_t v30 = xpc_dictionary_get_value(object, "kCBAdvertisementEnableEPA");
      if (v30)
      {
        uint64_t v8 = sub_100019A00(v30, (int64_t *)buf);
        if (v8) {
          goto LABEL_270;
        }
        *(unsigned char *)(*(void *)(a3 + 8) + 409) = *(void *)buf != 0;
      }
    }
    if (*(int *)(a1 + 80) >= 2)
    {
      uint64_t v31 = sub_10003FB34();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v31 + 2344))(v31))
      {
        *(void *)long long buf = 0;
        xpc_object_t v32 = xpc_dictionary_get_value(object, "kCBAdvDataObjectLocatorInstance");
        if (v32)
        {
          uint64_t v8 = sub_100019A00(v32, (int64_t *)buf);
          if (v8) {
            goto LABEL_270;
          }
          *(unsigned char *)(*(void *)(a3 + 8) + 308) = *(void *)buf != 0;
        }
      }
    }
  }
  int64_t v163 = 1;
  xpc_object_t v33 = xpc_dictionary_get_value(object, "kCBAdvDataIsConnectable");
  if (v33)
  {
    uint64_t v8 = sub_100019A00(v33, &v163);
    if (v8) {
      goto LABEL_270;
    }
  }
  uint64_t v34 = *(void *)(a3 + 8);
  BOOL v35 = v163 == 0;
  *(unsigned char *)(v34 + 12) = v163 != 0;
  int v36 = v35;
  *(_DWORD *)(v34 + 264) = v36;
  int64_t v162 = 0;
  xpc_object_t v37 = xpc_dictionary_get_value(object, "kCBAdvDataIsObjectDiscovery");
  if (v37)
  {
    uint64_t v8 = sub_100019A00(v37, &v162);
    if (v8) {
      goto LABEL_270;
    }
    *(_DWORD *)(*(void *)(a3 + 8) + 264) = 3;
  }
  int64_t v161 = 0;
  xpc_object_t v38 = xpc_dictionary_get_value(object, "kCBAdvDataIsExtended");
  if (v38)
  {
    uint64_t v8 = sub_100019A00(v38, &v161);
    if (v8) {
      goto LABEL_270;
    }
    uint64_t v39 = *(void *)(a3 + 8);
    *(_DWORD *)(v39 + 264) = 4;
    *(unsigned char *)(v39 + 12) = 0;
  }
  int64_t v160 = 0;
  xpc_object_t v40 = xpc_dictionary_get_value(object, "kCBAdvDataIsExtendedConnectable");
  if (v40)
  {
    uint64_t v8 = sub_100019A00(v40, &v160);
    if (v8) {
      goto LABEL_270;
    }
    uint64_t v41 = *(void *)(a3 + 8);
    *(_DWORD *)(v41 + 264) = 4;
    *(unsigned char *)(v41 + 12) = 1;
  }
  int64_t v159 = 0;
  xpc_object_t v42 = xpc_dictionary_get_value(object, "kCBAdvDataIsTDS");
  if (!v42)
  {
LABEL_96:
    sub_100019738(object, "kCBAdvDataLocalName");
    id v138 = (id)objc_claimAutoreleasedReturnValue();
    if (v138)
    {
      uint64_t v43 = *(void *)(a3 + 8);
      sub_10004191C(&v158, (char *)[v138 UTF8String]);
      std::string::operator=((std::string *)(v43 + 16), &v158);
      if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v158.__r_.__value_.__l.__data_);
      }
    }
    xpc_object_t v44 = xpc_dictionary_get_value(object, "kCBAdvDataAppearance");
    if (v44)
    {
      *(void *)long long buf = 0;
      uint64_t v8 = sub_100019A00(v44, (int64_t *)buf);
      if (v8)
      {
LABEL_269:

        goto LABEL_270;
      }
      *(_WORD *)(*(void *)(a3 + 8) + 40) = *(_WORD *)buf;
    }
    uint64_t v155 = 0;
    uint64_t v156 = 0;
    uint64_t v157 = 0;
    xpc_object_t v45 = xpc_dictionary_get_value(object, "kCBAdvDataServiceUUIDs");
    if (v45)
    {
      uint64_t v8 = sub_1002D4450(v45, (uint64_t)&v155);
      if (v8)
      {
LABEL_267:
        if (v155)
        {
          uint64_t v156 = v155;
          operator delete(v155);
        }
        goto LABEL_269;
      }
      for (unsigned __int16 i = v155; i != v156; unsigned __int16 i = (long long *)((char *)i + 20))
        sub_1005B4E20(*(void **)(a3 + 8), i);
    }
    uint64_t v152 = 0;
    uint64_t v153 = 0;
    uint64_t v154 = 0;
    xpc_object_t v49 = xpc_dictionary_get_value(object, "kCBAdvDataSolicitedServiceUUIDs");
    if (v49)
    {
      uint64_t v8 = sub_1002D4450(v49, (uint64_t)&v152);
      if (v8) {
        goto LABEL_265;
      }
      for (j = v152; j != v153; j = (long long *)((char *)j + 20))
        sub_1005B4F44(*(void **)(a3 + 8), j);
    }
    if (*(unsigned char *)(a1 + 184))
    {
      xpc_object_t v51 = xpc_dictionary_get_value(object, "kCBAdvDataAppleMfgData");
      if (v51)
      {
        uint64_t v8 = sub_1002D4184(v51, (uint64_t)&v173);
        if (v8) {
          goto LABEL_265;
        }
        sub_100049EE0(*(void *)(a3 + 8) + 48, (uint64_t)&v173);
      }
    }
    xpc_object_t v52 = xpc_dictionary_get_value(object, "kCBAdvDataLeBluetoothDeviceAddress");
    if (v52)
    {
      uint64_t v8 = sub_1002D4184(v52, (uint64_t)&v171);
      if (v8) {
        goto LABEL_265;
      }
      sub_100049EE0(*(void *)(a3 + 8) + 136, (uint64_t)&v171);
    }
    xpc_object_t v53 = xpc_dictionary_get_value(object, "kCBAdvDataNonAppleMfgData");
    if (v53)
    {
      uint64_t v8 = sub_1002D4184(v53, (uint64_t)&v173);
      if (v8) {
        goto LABEL_265;
      }
      sub_100049EE0(*(void *)(a3 + 8) + 152, (uint64_t)&v173);
    }
    if (sub_100013DCC((uint64_t)&v173))
    {
      *(void *)long long buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      *(_DWORD *)&buf[23] = 0;
      *(void *)&uint8_t buf[16] = 0;
      xpc_object_t v54 = xpc_dictionary_get_value(object, "kCBAdvDataAppleBeaconKey");
      if (v54)
      {
        uint64_t v8 = sub_1002D4184(v54, (uint64_t)&v173);
        if (v8) {
          goto LABEL_265;
        }
        if (sub_100045F00((uint64_t)&v173) != 21) {
          goto LABEL_139;
        }
        *(_DWORD *)long long buf = 5046042;
        *(_WORD *)&uint8_t buf[4] = 5378;
        sub_100052430((uint64_t)&v173, &buf[6], 0x15uLL);
        uint64_t v55 = *(void *)(a3 + 8);
        sub_1000335D8(v176, buf, 0x1BuLL);
        sub_100049EE0(v55 + 48, (uint64_t)v176);
        *(void *)v176 = &off_100998428;
        if (*(void *)&v176[8]) {
          sub_1000368F4(*(atomic_uint **)&v176[8]);
        }
      }
    }
    xpc_object_t v56 = xpc_dictionary_get_value(object, "kCBAdvDataTDSData");
    if (v56)
    {
      uint64_t v57 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_INFO, "TDS advertising data found", buf, 2u);
      }
      if (*(unsigned char *)(a1 + 187))
      {
        uint64_t v8 = sub_1002D4184(v56, (uint64_t)&v173);
        if (v8) {
          goto LABEL_265;
        }
        if ((unint64_t)sub_100045F00((uint64_t)&v173) <= 2)
        {
          uint64_t v58 = qword_100A19EC8;
          if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
          {
            uint64_t v59 = sub_100045F00((uint64_t)&v173);
            sub_10077FD3C((uint64_t)buf, v59, v58);
          }
LABEL_139:
          uint64_t v8 = 1;
          goto LABEL_265;
        }
        size_t v66 = sub_100045F00((uint64_t)&v173);
        size_t v67 = v66 + 2;
        uint64_t v68 = (char *)&v134 - ((__chkstk_darwin() + 17) & 0xFFFFFFFFFFFFFFF0);
        bzero(v68, v66 + 2);
        *uint64_t v68 = v66 + 1;
        v68[1] = 38;
        sub_100052430((uint64_t)&v173, v68 + 2, v66);
        uint64_t v69 = *(void *)(a3 + 8);
        sub_1000335D8(buf, v68, v67);
        sub_100049EE0(v69 + 224, (uint64_t)buf);
        *(void *)long long buf = &off_100998428;
        if (*(void *)&buf[8]) {
          sub_1000368F4(*(atomic_uint **)&buf[8]);
        }
      }
      else
      {
        uint64_t v65 = qword_100A19EC8;
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_INFO, "TDS advertising not allowed", buf, 2u);
        }
      }
    }
    xpc_object_t v70 = xpc_dictionary_get_value(object, "kCBAdvDataRawBytesDataAdvInd");
    if (v70 || (xpc_object_t v70 = xpc_dictionary_get_value(object, "kCBAdvDataRawBytesData")) != 0)
    {
      uint64_t v71 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_INFO, "Raw bytes advertising data found for ADV_IND", buf, 2u);
      }
      if (*(unsigned char *)(a1 + 189))
      {
        uint64_t v8 = sub_1002D4184(v70, (uint64_t)&v173);
        if (v8) {
          goto LABEL_265;
        }
        sub_100049EE0(*(void *)(a3 + 8) + 272, (uint64_t)&v173);
      }
      else
      {
        uint64_t v72 = qword_100A19EC8;
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_INFO, "Raw bytes advertising not allowed", buf, 2u);
        }
      }
    }
    xpc_object_t v73 = xpc_dictionary_get_value(object, "kCBAdvDataRawBytesDataScanRsp");
    if (v73)
    {
      uint64_t v74 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_INFO, "Raw bytes advertising data found for SCAN_RSP", buf, 2u);
      }
      if (*(unsigned char *)(a1 + 189))
      {
        uint64_t v8 = sub_1002D4184(v73, (uint64_t)&v173);
        if (v8) {
          goto LABEL_265;
        }
        sub_100049EE0(*(void *)(a3 + 8) + 288, (uint64_t)&v173);
      }
      else
      {
        uint64_t v75 = qword_100A19EC8;
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_INFO, "Raw bytes advertising not allowed", buf, 2u);
        }
      }
    }
    int64_t v151 = 0;
    if (*(int *)(a1 + 80) < 1)
    {
      int64_t v77 = 0;
    }
    else
    {
      xpc_object_t v76 = xpc_dictionary_get_value(object, "kCBAdvDataIsContact");
      if (v76)
      {
        uint64_t v8 = sub_100019A00(v76, &v151);
        if (v8)
        {
LABEL_265:
          if (v152)
          {
            uint64_t v153 = v152;
            operator delete(v152);
          }
          goto LABEL_267;
        }
      }
      int64_t v77 = v151;
      if (v151)
      {
        uint64_t v78 = sub_100035F54();
        if (((*(uint64_t (**)(uint64_t))(*(void *)v78 + 352))(v78) & 1) == 0)
        {
          if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
            sub_10077FD08();
          }
          uint64_t v8 = 11;
          goto LABEL_265;
        }
        uint64_t v79 = *(void *)(a3 + 8);
        *(_DWORD *)(v79 + 264) = 2;
        *(unsigned char *)(v79 + 307) = 1;
        *(void *)long long buf = 0;
        xpc_object_t v80 = xpc_dictionary_get_value(object, "kCBAdvOptionUseFGInterval");
        if (v80)
        {
          uint64_t v8 = sub_100019A00(v80, (int64_t *)buf);
          if (v8) {
            goto LABEL_265;
          }
          __int16 v81 = 48;
        }
        else
        {
          __int16 v81 = 432;
        }
        xpc_object_t v106 = xpc_dictionary_get_value(object, "kCBAdvOptionAdvertisingInterval");
        if (v106)
        {
          uint64_t v8 = sub_100019A00(v106, (int64_t *)buf);
          if (v8) {
            goto LABEL_265;
          }
          __int16 v81 = *(_WORD *)buf;
          if ((unint64_t)(*(void *)buf - 16385) < 0xFFFFFFFFFFFFC01FLL) {
            goto LABEL_172;
          }
        }
        *(_WORD *)(*(void *)(a3 + 8) + 222) = v81;
        int64_t v77 = v151;
      }
    }
    if (sub_1005B5068(a1, v77 != 0, a3))
    {
LABEL_172:
      uint64_t v8 = 3;
      goto LABEL_265;
    }
    if (*(_DWORD *)(a1 + 80) == 2)
    {
      int v137 = sub_1002D4CA0(object, "kCBAdvDataServiceData");
      if (v137)
      {
        uint64_t v82 = qword_100A19EC8;
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_INFO))
        {
          unsigned __int16 v83 = (unsigned __int16)[v137 count];
          *(_DWORD *)long long buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v83;
          _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_INFO, "Service data %d elements", buf, 8u);
        }
        if ([v137 count])
        {
          if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
            sub_10077FCD4();
          }
LABEL_218:

          goto LABEL_172;
        }
        unsigned __int16 v85 = 0;
        uint64_t v135 = &v183;
        unint64_t v136 = (unint64_t)v148;
        *(void *)&long long v84 = 136446466;
        long long v134 = v84;
        while (1)
        {
          long long v184 = 0uLL;
          uint64_t v86 = v85;
          int v185 = 0;
          [v137 objectAtIndexedSubscript:v85, v134];
          id v87 = objc_claimAutoreleasedReturnValue();
          uint64_t v88 = (int8x16_t *)[v87 bytes];
          uint64_t v89 = [v137 objectAtIndexedSubscript:v86];
          sub_10071D1C4((uint64_t)&v184, v88, [v89 length]);

          uint64_t v149 = 0;
          uint64_t v150 = 0;
          id v90 = [v137 objectAtIndexedSubscript:v86 | 1];
          id v91 = [v90 bytes];
          uint64_t v92 = [v137 objectAtIndexedSubscript:v86 | 1];
          sub_1000335D8(&v149, v91, (size_t)[v92 length]);

          if (v184 >= 3u) {
            break;
          }
          unint64_t v93 = sub_100045F00((uint64_t)&v149);
          uint64_t v94 = qword_100A19EC8;
          if (v93 >= 0x15)
          {
            if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
              sub_10077FC88(v182, v135, v94);
            }
            goto LABEL_185;
          }
          if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
          {
            sub_1000417A8((uint64_t)&v184, buf);
            int v96 = buf[23];
            uint64_t v97 = *(unsigned char **)buf;
            sub_10004C2C4((uint64_t)&v149, v176);
            uint64_t v98 = buf;
            if (v96 < 0) {
              uint64_t v98 = v97;
            }
            int v99 = v176;
            if (v177 < 0) {
              int v99 = *(unsigned char **)v176;
            }
            *(_DWORD *)xpc_object_t v178 = v134;
            v179 = v98;
            __int16 v180 = 2080;
            v181 = v99;
            _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEFAULT, "Adding service Data UUID:%{public}s data:%s", v178, 0x16u);
            if (v177 < 0) {
              operator delete(*(void **)v176);
            }
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
          }
          sub_1005B52F4(*(void *)(a3 + 8), &v184, (uint64_t)&v149);
          int v95 = 1;
LABEL_196:
          uint64_t v149 = &off_100998428;
          if (v150) {
            sub_1000368F4(v150);
          }
          if (!v95) {
            goto LABEL_218;
          }
          uint64_t v100 = [v137 objectAtIndexedSubscript:(unsigned __int16)(v86 + 2)];
          BOOL v101 = v100 == 0;

          unsigned __int16 v85 = v86 + 2;
          if (v101) {
            goto LABEL_200;
          }
        }
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
          sub_10077FC5C(&v147, (unsigned char *)v136);
        }
LABEL_185:
        int v95 = 0;
        goto LABEL_196;
      }
LABEL_200:
    }
    int v137 = sub_100019738(object, "kCBAdvOptionInstanceAddress");
    if (v137)
    {
      unint64_t v102 = sub_1006ADA24(v137);
      unint64_t v103 = v102;
      if (v102 && (!BYTE6(v102) || BYTE6(v102) == 1 && (v102 & 0xC00000000000) != 0x800000000000))
      {
        int v107 = qword_100A19EC8;
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
        {
          sub_1006AD3F0();
          id v108 = (id)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)long long buf = 138412546;
          *(void *)&uint8_t buf[4] = v137;
          *(_WORD *)&unsigned char buf[12] = 2112;
          *(void *)&uint8_t buf[14] = v108;
          _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_DEFAULT, "Overriding address with address string %@ (%@)", buf, 0x16u);
        }
      }
      else
      {
        __int16 v104 = qword_100A19EC8;
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
        {
          int v105 = sub_1006AD3F0();
          sub_10077FBDC((uint64_t)v137, v105, (uint64_t)v178, v104);
        }
      }
      *(void *)(*(void *)(a3 + 8) + 256) = v103;
    }
    xpc_object_t v109 = xpc_dictionary_get_value(object, "kCBAdvOptionInstanceRandomAddressBytes");
    if (!v109)
    {
LABEL_242:
      __int16 v126 = sub_1002D500C(object, "kCBManagerListOfClients");
      if (!v126)
      {
        __int16 v126 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", *(void *)(a1 + 96), 0);
      }
      int v127 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        *(void *)&uint8_t buf[4] = v126;
        _os_log_impl((void *)&_mh_execute_header, v127, OS_LOG_TYPE_DEFAULT, "Setting client list to %@", buf, 0xCu);
      }
      *(void *)&uint8_t buf[8] = 0;
      *(void *)&uint8_t buf[16] = 0;
      *(void *)long long buf = &buf[8];
      long long v143 = 0u;
      long long v144 = 0u;
      long long v145 = 0u;
      long long v146 = 0u;
      id v128 = v126;
      id v129 = [v128 countByEnumeratingWithState:&v143 objects:v175 count:16];
      if (v129)
      {
        uint64_t v130 = *(void *)v144;
        do
        {
          for (k = 0; k != v129; k = (char *)k + 1)
          {
            if (*(void *)v144 != v130) {
              objc_enumerationMutation(v128);
            }
            sub_10004191C(v176, (char *)[*(id *)(*((void *)&v143 + 1) + 8 * (void)k) UTF8String]);
            sub_1005B8FE8((uint64_t **)buf, (const void **)v176, (uint64_t)v176);
            if (v177 < 0) {
              operator delete(*(void **)v176);
            }
          }
          id v129 = [v128 countByEnumeratingWithState:&v143 objects:v175 count:16];
        }
        while (v129);
      }

      uint64_t v132 = *(void *)(a3 + 8);
      sub_10030BA54((uint64_t *)&v141, (const void ***)buf);
      if ((void **)(v132 + 416) != &v141) {
        sub_10044FF4C((uint64_t **)(v132 + 416), v141, &v142);
      }
      sub_10004BA28((uint64_t)&v141, v142);
      if (*(int *)(a1 + 80) >= 1)
      {
        *(void *)v176 = 0;
        xpc_object_t v133 = xpc_dictionary_get_value(object, "kCBOptionUseCase");
        if (v133)
        {
          uint64_t v8 = sub_100019A00(v133, (int64_t *)v176);
          if (v8)
          {
LABEL_263:
            sub_10004BA28((uint64_t)buf, *(char **)&buf[8]);

            goto LABEL_264;
          }
          if (*(void *)v176) {
            *(_DWORD *)(*(void *)(a3 + 8) + 440) = *(_DWORD *)v176;
          }
        }
      }
      uint64_t v8 = 0;
      goto LABEL_263;
    }
    uint64_t v8 = sub_1002D4184(v109, (uint64_t)&v173);
    if (v8)
    {
LABEL_264:

      goto LABEL_265;
    }
    if ((unint64_t)sub_100045F00((uint64_t)&v173) < 6)
    {
      uint64_t v8 = 8;
      goto LABEL_264;
    }
    uint64_t v110 = *(unsigned __int8 *)sub_10004A6E4((uint64_t)&v173);
    unint64_t v136 = *(unsigned __int8 *)(sub_10004A6E4((uint64_t)&v173) + 1);
    uint64_t v111 = *(unsigned __int8 *)(sub_10004A6E4((uint64_t)&v173) + 2);
    uint64_t v112 = *(unsigned __int8 *)(sub_10004A6E4((uint64_t)&v173) + 3);
    uint64_t v113 = *(unsigned __int8 *)(sub_10004A6E4((uint64_t)&v173) + 4);
    uint64_t v114 = sub_10004A6E4((uint64_t)&v173);
    uint64_t v115 = (v136 << 32) | (v110 << 40) | (v111 << 24) | (v112 << 16) | (v113 << 8) | *(unsigned __int8 *)(v114 + 5) | 0x1000000000000;
    __int16 v116 = qword_100A19EC8;
    if ((v110 & 0xC0) == 0x80)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
      {
        sub_10004C2C4((uint64_t)&v173, buf);
        int v117 = buf[23];
        __int16 v118 = *(unsigned char **)buf;
        int v119 = sub_1006AD3F0();
        if (v117 >= 0) {
          __int16 v120 = buf;
        }
        else {
          __int16 v120 = v118;
        }
        id v121 = v119;
        *(_DWORD *)v176 = 136315394;
        *(void *)&v176[4] = v120;
        *(_WORD *)&v176[12] = 2112;
        *(void *)&v176[14] = v121;
        _os_log_error_impl((void *)&_mh_execute_header, v116, OS_LOG_TYPE_ERROR, "Overriding address with Invalid address data %s (%@)", v176, 0x16u);

        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
LABEL_240:
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10004C2C4((uint64_t)&v173, buf);
      int v122 = buf[23];
      int v123 = *(unsigned char **)buf;
      __int16 v124 = sub_1006AD3F0();
      if (v122 >= 0) {
        int v125 = buf;
      }
      else {
        int v125 = v123;
      }
      id v121 = v124;
      *(_DWORD *)v176 = 136315394;
      *(void *)&v176[4] = v125;
      *(_WORD *)&v176[12] = 2112;
      *(void *)&v176[14] = v121;
      _os_log_impl((void *)&_mh_execute_header, v116, OS_LOG_TYPE_DEFAULT, "Overriding address with address data %s (%@)", v176, 0x16u);

      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_240;
    }
    *(void *)(*(void *)(a3 + 8) + 256) = v115;
    goto LABEL_242;
  }
  uint64_t v8 = sub_100019A00(v42, &v159);
  if (!v8)
  {
    *(_DWORD *)(*(void *)(a3 + 8) + 264) = 2;
    goto LABEL_96;
  }
LABEL_270:

LABEL_271:
  xpc_object_t v165 = v140;
  if (v166) {
    sub_1000368F4(v166);
  }
LABEL_5:
  int v171 = &off_100998428;
  if (v172) {
    sub_1000368F4(v172);
  }
  int v173 = &off_100998428;
  if (v174) {
    sub_1000368F4(v174);
  }
  return v8;
}

void sub_1005A62AC(_Unwind_Exception *a1)
{
  if (*(char *)(v4 - 121) < 0) {
    operator delete(*(void **)(v4 - 144));
  }

  id v6 = *(void **)(v1 + 192);
  if (v6)
  {
    *(void *)(v1 + 200) = v6;
    operator delete(v6);
  }
  id v7 = *(void **)(v1 + 216);
  if (v7)
  {
    *(void *)(v1 + 224) = v7;
    operator delete(v7);
  }

  *(void *)(v1 + 312) = *(void *)(v1 + 64);
  uint64_t v8 = *(atomic_uint **)(v1 + 320);
  if (v8) {
    sub_1000368F4(v8);
  }
  *(void *)(v1 + 352) = v3;
  long long v9 = *(atomic_uint **)(v1 + 360);
  if (v9) {
    sub_1000368F4(v9);
  }
  *(void *)(v1 + 368) = v2;
  unsigned int v10 = *(atomic_uint **)(v1 + 376);
  if (v10) {
    sub_1000368F4(v10);
  }
  _Unwind_Resume(a1);
}

id sub_1005A6580(uint64_t a1, uint64_t a2)
{
  __uint64_t v3 = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
  uint64_t v4 = sub_1005B7250(v3, a2, v3 / 0xF4240);
  BOOL v5 = v4;
  if (v4) {
    id v6 = v4;
  }

  return v5;
}

void sub_1005A65F0(uint64_t a1, void *a2)
{
  id v2 = a2;
  __uint64_t v3 = +[NSMutableDictionary dictionary];
  id v4 = objc_alloc((Class)NSNumber);
  BOOL v5 = [v2 objectForKeyedSubscript:@"kCBMsgArgTimeXpcLeAttConnHandleStartAdvMsg"];
  id v6 = [v5 longLongValue];
  id v7 = [v2 objectForKeyedSubscript:@"kCBMsgArgTimeXpcWiProxUpdateAdv"];
  id v8 = [v4 initWithLongLong:v6 - (unsigned char *)[v7 longLongValue]];
  [v3 setObject:v8 forKeyedSubscript:@"heySiriXPCDuration"];

  long long v9 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v10 = [v3 objectForKeyedSubscript:@"heySiriXPCDuration"];
    int v12 = 138412290;
    xpc_object_t v13 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Duration of HeySiri BT Advertisement's XPC message from wirpox to controller: %@", (uint8_t *)&v12, 0xCu);
  }
  uint64_t v11 = sub_100050530();
  (*(void (**)(uint64_t, void *))(*(void *)v11 + 504))(v11, v3);
}

void sub_1005A6790(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1005A67DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  uint64_t result = sub_1002FA188((uint64_t)off_1009F8780, *(void *)(v2 + 128), a1 + 48);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1005A6848(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = &off_100998468;
  *(void *)(a1 + 56) = v3;
  if (v3) {
    sub_100037354(v3);
  }
}

void sub_1005A687C(uint64_t a1)
{
  *(void *)(a1 + 48) = &off_100998468;
  uint64_t v1 = *(atomic_uint **)(a1 + 56);
  if (v1) {
    sub_1000368F4(v1);
  }
}

void sub_1005A68AC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  uint64_t v2 = off_1009F8780;
  unint64_t v3 = *(void *)(v1 + 128);

  sub_1002FA200((uint64_t)v2, v3);
}

uint64_t sub_1005A6910(uint64_t a1, xpc_object_t xdict, uint64_t a3)
{
  uint64_t v31 = &off_100998428;
  xpc_object_t v32 = 0;
  if (*(int *)(a1 + 80) < 2) {
    return 0;
  }
  long long __p = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBPeriodicAdvDataAdvHandle");
  if (value)
  {
    uint64_t v3 = sub_100019A00(value, (int64_t *)&__p);
    if (v3) {
      goto LABEL_47;
    }
    if ((unint64_t)__p > 0xEF) {
      goto LABEL_5;
    }
    *(unsigned char *)a3 = (_BYTE)__p;
  }
  if (*(int *)(a1 + 80) < 2) {
    goto LABEL_46;
  }
  long long __p = 0;
  xpc_object_t v8 = xpc_dictionary_get_value(xdict, "KCBPeriodicAdvDataInterval");
  if (v8)
  {
    uint64_t v3 = sub_100019A00(v8, (int64_t *)&__p);
    if (v3) {
      goto LABEL_47;
    }
    if ((char *)__p - 0x10000 < (char *)0xFFFFFFFFFFFF0006)
    {
LABEL_5:
      uint64_t v3 = 3;
      goto LABEL_47;
    }
    *(_WORD *)(a3 + 2) = (_WORD)__p;
  }
  if (*(int *)(a1 + 80) < 2) {
    goto LABEL_46;
  }
  long long __p = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  xpc_object_t v9 = xpc_dictionary_get_value(xdict, "KCBPeriodicAdvDataServiceUUIDs");
  if (v9)
  {
    uint64_t v3 = sub_1002D4450(v9, (uint64_t)&__p);
    if (v3)
    {
      char v10 = 0;
      goto LABEL_37;
    }
    uint64_t v11 = __p;
    if (__p == v29)
    {
      char v10 = 1;
      if (!__p) {
        goto LABEL_39;
      }
      goto LABEL_38;
    }
    uint64_t v3 = a3 + 40;
    int v12 = *(char **)(a3 + 32);
    do
    {
      if ((unint64_t)v12 >= *(void *)v3)
      {
        uint64_t v14 = *(void *)(a3 + 24);
        unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v12[-v14] >> 2);
        unint64_t v16 = v15 + 1;
        if (v15 + 1 > 0xCCCCCCCCCCCCCCCLL) {
          abort();
        }
        if (0x999999999999999ALL * ((*(void *)v3 - v14) >> 2) > v16) {
          unint64_t v16 = 0x999999999999999ALL * ((*(void *)v3 - v14) >> 2);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)v3 - v14) >> 2) >= 0x666666666666666) {
          unint64_t v17 = 0xCCCCCCCCCCCCCCCLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          xpc_object_t v18 = (char *)sub_10003767C(a3 + 40, v17);
        }
        else {
          xpc_object_t v18 = 0;
        }
        int v19 = &v18[20 * v15];
        long long v20 = *(_OWORD *)v11;
        *((_DWORD *)v19 + 4) = v11[4];
        *(_OWORD *)int v19 = v20;
        xpc_object_t v22 = *(char **)(a3 + 24);
        xpc_object_t v21 = *(char **)(a3 + 32);
        xpc_object_t v23 = v19;
        if (v21 != v22)
        {
          do
          {
            long long v24 = *(_OWORD *)(v21 - 20);
            *((_DWORD *)v23 - 1) = *((_DWORD *)v21 - 1);
            *(_OWORD *)(v23 - 20) = v24;
            v23 -= 20;
            v21 -= 20;
          }
          while (v21 != v22);
          xpc_object_t v21 = *(char **)(a3 + 24);
        }
        int v12 = v19 + 20;
        *(void *)(a3 + 24) = v23;
        *(void *)(a3 + 32) = v19 + 20;
        *(void *)(a3 + 40) = &v18[20 * v17];
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        long long v13 = *(_OWORD *)v11;
        *((_DWORD *)v12 + 4) = v11[4];
        *(_OWORD *)int v12 = v13;
        v12 += 20;
      }
      *(void *)(a3 + 32) = v12;
      v11 += 5;
    }
    while (v11 != v29);
  }
  char v10 = 1;
LABEL_37:
  uint64_t v11 = __p;
  if (__p)
  {
LABEL_38:
    uint64_t v29 = v11;
    operator delete(v11);
  }
LABEL_39:
  if ((v10 & 1) == 0) {
    goto LABEL_47;
  }
  if (*(int *)(a1 + 80) >= 2)
  {
    xpc_object_t v25 = xpc_dictionary_get_value(xdict, "KCBPeriodicAdvDataRandomData");
    if (v25)
    {
      __int16 v26 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_INFO))
      {
        LOWORD(__p) = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "Raw bytes advertising data found", (uint8_t *)&__p, 2u);
      }
      uint64_t v3 = sub_1002D4184(v25, (uint64_t)&v31);
      if (v3) {
        goto LABEL_47;
      }
      sub_100049EE0(a3 + 48, (uint64_t)&v31);
    }
  }
LABEL_46:
  uint64_t v3 = 0;
LABEL_47:
  uint64_t v31 = &off_100998428;
  if (v32) {
    sub_1000368F4(v32);
  }
  return v3;
}

void sub_1005A6C50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, atomic_uint *a14)
{
  if (a14) {
    sub_1000368F4(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005A6C94(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1009F8248 != -1) {
    dispatch_once(&qword_1009F8248, &stru_1009B7B48);
  }
  uint64_t result = sub_10065E678((uint64_t)off_1009F8240, *(void *)(v2 + 128), a1 + 48);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1005A6D00(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = &off_100998428;
  *(void *)(a1 + 64) = v4;
  if (v4) {
    sub_100037354(v4);
  }
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  sub_100037564((char *)(a1 + 72), *(long long **)(a2 + 72), *(long long **)(a2 + 80), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 2));
  uint64_t v5 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = &off_100998428;
  *(void *)(a1 + 104) = v5;
  if (v5) {
    sub_100037354(v5);
  }
}

void sub_1005A6DBC(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    v1[10] = v5;
    operator delete(v5);
  }
  v1[7] = v2;
  id v6 = (atomic_uint *)v1[8];
  if (v6) {
    sub_1000368F4(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005A6DF0(void *a1)
{
  a1[12] = &off_100998428;
  uint64_t v2 = (atomic_uint *)a1[13];
  if (v2) {
    sub_1000368F4(v2);
  }
  uint64_t v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }
  a1[7] = &off_100998428;
  uint64_t v4 = (atomic_uint *)a1[8];
  if (v4)
  {
    sub_1000368F4(v4);
  }
}

void *sub_1005A6E90(void *a1)
{
  a1[6] = &off_100998428;
  uint64_t v2 = (atomic_uint *)a1[7];
  if (v2) {
    sub_1000368F4(v2);
  }
  uint64_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  a1[1] = &off_100998428;
  uint64_t v4 = (atomic_uint *)a1[2];
  if (v4) {
    sub_1000368F4(v4);
  }
  return a1;
}

uint64_t sub_1005A6F1C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1009F8248 != -1) {
    dispatch_once(&qword_1009F8248, &stru_1009B7B48);
  }
  uint64_t result = sub_10065EB3C((uint64_t)off_1009F8240, *(void *)(v2 + 128), *(unsigned __int8 *)(a1 + 48));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_1005A6F88(void *a1, uint64_t a2)
{
  if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_array)
  {
    applier[0] = _NSConcreteStackBlock;
    applier[1] = 3221225472;
    applier[2] = sub_1005B4114;
    applier[3] = &unk_1009A3318;
    void applier[4] = a2;
    if (xpc_array_apply(a1, applier)) {
      return 0;
    }
    else {
      return 3;
    }
  }
  else
  {
    uint64_t v4 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077FDF0(a1, v4);
    }
    return 3;
  }
}

uint64_t sub_1005A705C(void *a1, void ***a2)
{
  if (xpc_get_type(a1) != (xpc_type_t)&_xpc_type_array)
  {
    uint64_t v4 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077FDF0(a1, v4);
    }
    return 3;
  }
  applier[0] = _NSConcreteStackBlock;
  applier[1] = 3221225472;
  applier[2] = sub_1005B48E4;
  applier[3] = &unk_1009A3318;
  void applier[4] = a2;
  if (!xpc_array_apply(a1, applier))
  {
    for (unsigned __int16 i = *a2; i != a2[1]; ++i)
    {
      id v7 = *i;
      long long __p = 0;
      int v12 = 0;
      uint64_t v13 = 0;
      sub_100040550(&__p, (uint64_t)(v7 + 13));
      xpc_object_t v9 = __p;
      xpc_object_t v8 = v12;
      while (v9 != v8)
      {
        if (*v9)
        {
          (*(void (**)(void))(*(void *)*v9 + 8))(*v9);
          xpc_object_t v8 = v12;
        }
        ++v9;
      }
      uint64_t v10 = v7[12];
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
      (*(void (**)(void *))(*v7 + 8))(v7);
      if (__p)
      {
        int v12 = __p;
        operator delete(__p);
      }
    }
    return 3;
  }
  return 0;
}

void sub_1005A720C(void *a1)
{
  uint64_t v2 = a1[5];
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = sub_1002F9E40((uint64_t)off_1009F8780, *(void *)(v2 + 128), a1[6]);
  uint64_t v3 = qword_100A19EC8;
  if (*(_DWORD *)(*(void *)(a1[4] + 8) + 24))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077FE70();
    }
    uint64_t v4 = a1[6];
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Collecting GATT metrics to send to Biome", (uint8_t *)__p, 2u);
    }
    uint64_t v5 = objc_opt_new();
    [v5 setObject:@"Peripheral" forKeyedSubscript:@"SessionType"];
    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
    }
    id v6 = +[NSNumber numberWithUnsignedChar:sub_1002F45B8((uint64_t)off_1009F8780, *(void *)(v2 + 128))];
    [v5 setObject:v6 forKeyedSubscript:@"SessionState"];

    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
    }
    if (sub_1002F29B8((uint64_t)off_1009F8780, *(void *)(v2 + 128)))
    {
      if (qword_1009F8788 != -1) {
        dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
      }
      BOOL v7 = sub_100307304((uint64_t)off_1009F8780, *(void *)(v2 + 128));
    }
    else
    {
      BOOL v7 = 0;
    }
    xpc_object_t v8 = +[NSNumber numberWithBool:v7];
    [v5 setObject:v8 forKeyedSubscript:@"SupportsStateRestoration"];

    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
    }
    xpc_object_t v9 = +[NSNumber numberWithBool:sub_1002F4750((uint64_t)off_1009F8780, *(void *)(v2 + 128))];
    [v5 setObject:v9 forKeyedSubscript:@"SupportsBackgrounding"];

    [v5 setObject:*(void *)(v2 + 96) forKeyedSubscript:@"BundleID"];
    uint64_t v10 = a1[6];
    __n128 v17 = *(__n128 *)(v10 + 72);
    int v18 = *(_DWORD *)(v10 + 88);
    sub_100035F98(&v16, &v17);
    sub_1000417A8((uint64_t)&v16, __p);
    if (v15 >= 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    int v12 = +[NSString stringWithUTF8String:v11];
    [v5 setObject:v12 forKeyedSubscript:@"ServiceUUID"];

    if (v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v13 = sub_100050530();
    (*(void (**)(uint64_t, void *))(*(void *)v13 + 296))(v13, v5);
  }
}

void sub_1005A75B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1005A7614(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  uint64_t v3 = off_1009F8780;
  unint64_t v4 = *(void *)(v2 + 128);
  int v5 = *(_DWORD *)(a1 + 40);

  return sub_1002F9EB4((uint64_t)v3, v4, v5);
}

void sub_1005A7680(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  uint64_t v2 = off_1009F8780;
  unint64_t v3 = *(void *)(v1 + 128);

  sub_1002F4518((uint64_t)v2, v3);
}

void sub_1005A76E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  unint64_t v3 = *(void *)(v2 + 128);
  unsigned int v4 = *(_DWORD *)(a1 + 40);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 48);
  int v6 = *(void *)(a1 + 72);
  sub_1002FA400((uint64_t)off_1009F8780, v3, v4, v5, a1 + 56, (unsigned __int16 *)&v6);
}

void sub_1005A7760(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = &off_100998428;
  *(void *)(a1 + 64) = v3;
  if (v3) {
    sub_100037354(v3);
  }
}

void sub_1005A7794(uint64_t a1)
{
  *(void *)(a1 + 56) = &off_100998428;
  uint64_t v1 = *(atomic_uint **)(a1 + 64);
  if (v1) {
    sub_1000368F4(v1);
  }
}

void sub_1005A77C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  uint64_t v3 = off_1009F8780;
  unint64_t v4 = *(void *)(v2 + 128);
  uint64_t v5 = *(void **)(a1 + 32);
  int v6 = *(_DWORD *)(a1 + 48);

  sub_1002FA4AC((uint64_t)v3, v4, v5, v6);
}

void sub_1005A7838(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  if (sub_1002F4090((uint64_t)off_1009F8780, *(void *)(v1 + 128), 1))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077FED8();
    }
  }
}

void sub_1005A78C8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1009FB078 != -1) {
    dispatch_once(&qword_1009FB078, &stru_1009B7AE8);
  }
  uint64_t v3 = qword_1009FB070;
  unint64_t v4 = *(void *)(v2 + 128);
  uint64_t v5 = (void (***)(void, void *, uint64_t, uint64_t, void, void, void))(v2 + 152);
  int v6 = *(_DWORD *)(v2 + 40);
  uint64_t v7 = *(unsigned __int16 *)(a1 + 48);
  int v8 = *(unsigned __int16 *)(a1 + 56);
  int v9 = *(unsigned __int16 *)(a1 + 64);
  int v10 = *(unsigned __int16 *)(a1 + 72);
  uint64_t v11 = *(void *)(a1 + 80);
  sub_1000305AC(uu, *(void *)(a1 + 32));
  sub_100401028(v3, v4, v5, v6, v7, v8, v9, v10, v11, uu, 1, *(void *)(a1 + 88));
}

void sub_1005A79DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1009FB078 != -1) {
    dispatch_once(&qword_1009FB078, &stru_1009B7AE8);
  }
  uint64_t v3 = qword_1009FB070;
  unint64_t v4 = *(void *)(v2 + 128);
  uint64_t v5 = *(unsigned __int16 *)(a1 + 48);
  sub_1000305AC(uu, *(void *)(a1 + 32));
  sub_100402710(v3, v4, v5, uu);
}

void sub_1005A7A94(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (qword_1009FB078 != -1) {
    dispatch_once(&qword_1009FB078, &stru_1009B7AE8);
  }
  sub_1003FFABC(qword_1009FB070, *(void *)(v2 + 128), v2 + 152, *(_DWORD *)(v2 + 40), *(_WORD *)(a1 + 40), *(void *)(a1 + 48) != 0, *(unsigned __int16 *)(a1 + 56), *(unsigned __int16 *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), 1u, *(void *)(a1 + 88));
}

void sub_1005A7B34(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (qword_1009FB078 != -1) {
    dispatch_once(&qword_1009FB078, &stru_1009B7AE8);
  }
  uint64_t v3 = (void *)qword_1009FB070;
  unint64_t v4 = *(void *)(v2 + 128);
  uint64_t v5 = *(unsigned __int16 *)(a1 + 40);

  sub_100400940(v3, v4, v5);
}

uint64_t sub_1005A7BA0(uint64_t a1)
{
  unint64_t v1 = sub_1006ADA24(*(void **)(a1 + 32));
  if (qword_1009F8248 != -1) {
    dispatch_once(&qword_1009F8248, &stru_1009B7B48);
  }
  uint64_t v2 = off_1009F8240;

  return sub_100664320((uint64_t)v2, v1);
}

BOOL sub_1005A7C0C(uint64_t a1, int a2, xpc_object_t object)
{
  xpc_type_t type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    uint64_t v16 = a1;
    sub_1002D4E44(object, "kCBMsgArgOfflineAdvertisingData");
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    id obj = (id)objc_claimAutoreleasedReturnValue();
    id v6 = [obj countByEnumeratingWithState:&v19 objects:v25 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v20;
      do
      {
        for (unsigned __int16 i = 0; i != v6; unsigned __int16 i = (char *)i + 1)
        {
          if (*(void *)v20 != v7) {
            objc_enumerationMutation(obj);
          }
          id v9 = *(id *)(*((void *)&v19 + 1) + 8 * i);
          *(_OWORD *)long long buf = 0u;
          memset(v24, 0, sizeof(v24));
          [v9 getBytes:buf range:0, 6];
          [v9 getBytes:&buf[13] range:6, 22];
          *(_DWORD *)&buf[9] = 1643008;
          *(_DWORD *)&buf[6] = 5046046;
          v24[19] = v24[19] & 0xFC | (buf[0] >> 6);
          buf[0] |= 0xC0u;
          int v10 = +[NSData dataWithBytes:buf length:37];
          [v9 setData:v10];
        }
        id v6 = [obj countByEnumeratingWithState:&v19 objects:v25 count:16];
      }
      while (v6);
    }

    uint64_t v11 = sub_1002D49BC(object, "kCBMsgArgOfflineAdvertisingRotationInterval");
    if (qword_1009F8758 != -1) {
      dispatch_once(&qword_1009F8758, &stru_1009B7B68);
    }
    int v12 = off_1009F8750;
    uint64_t v13 = *(void *)(*(void *)(v16 + 32) + 8);
    unsigned int v14 = *(unsigned __int8 *)(v13 + 24);
    *(unsigned char *)(v13 + 24) = v14 + 1;
    sub_10026AD7C((uint64_t)v12, v14, obj, [v11 intValue:v16]);
  }
  else
  {
    uint64_t v5 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "handleSetOfflineAdvertisingParamsAndData not a dictionary!", buf, 2u);
    }
  }
  return type == (xpc_type_t)&_xpc_type_dictionary;
}

void sub_1005A7ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1005A7F28(uint64_t a1)
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009B7AC8);
  }
  uint64_t v2 = off_1009F7EB8;
  unint64_t v3 = *(void *)(a1 + 32);

  sub_10068A048((uint64_t)v2, v3);
}

void sub_1005A7F8C(uint64_t a1, int a2)
{
  unint64_t v3 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    xpc_dictionary_set_int64(v3, "kCBMsgArgResult", a2);
    xpc_connection_send_message(*(xpc_connection_t *)(v4 + 16), *(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
    uint64_t v5 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    xpc_release(v5);
  }
}

void sub_1005A800C(uint64_t a1, int a2, void *a3)
{
  id v21 = a3;
  uint64_t v5 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 40);
    xpc_dictionary_set_int64(v5, "kCBMsgArgResult", a2);
    uint64_t v7 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    int v8 = [v21 objectForKeyedSubscript:@"kCBMsgArgTimeoutInMS"];
    xpc_dictionary_set_uint64(v7, "kCBMsgArgTimeoutInMS", (uint64_t)[v8 unsignedLongValue]);

    id v9 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    int v10 = [v21 objectForKeyedSubscript:@"kCBMsgArgHoldStableAddressState"];
    xpc_dictionary_set_BOOL(v9, "kCBMsgArgHoldStableAddressState", (BOOL)[v10 BOOLValue]);

    uint64_t v11 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    int v12 = [v21 objectForKeyedSubscript:@"kCBMsgArgOverrideLocalAddressState"];
    xpc_dictionary_set_BOOL(v11, "kCBMsgArgOverrideLocalAddressState", (BOOL)[v12 BOOLValue]);

    uint64_t v13 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    unsigned int v14 = [v21 objectForKeyedSubscript:@"kCBMsgArgPrivateModeState"];
    xpc_dictionary_set_BOOL(v13, "kCBMsgArgPrivateModeState", (BOOL)[v14 BOOLValue]);

    char v15 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    uint64_t v16 = [v21 objectForKeyedSubscript:@"kCBMsgArgHoldStableAddressCount"];
    xpc_dictionary_set_uint64(v15, "kCBMsgArgHoldStableAddressCount", (uint64_t)[v16 unsignedLongValue]);

    __n128 v17 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    int v18 = [v21 objectForKeyedSubscript:@"kCBMsgArgLePrivateAddressTimer"];
    xpc_dictionary_set_uint64(v17, "kCBMsgArgLePrivateAddressTimer", (uint64_t)[v18 unsignedLongValue]);

    long long v19 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    long long v20 = [v21 objectForKeyedSubscript:@"kCBMsgArgLeHoldStablePrivateAddressTimer"];
    xpc_dictionary_set_uint64(v19, "kCBMsgArgLeHoldStablePrivateAddressTimer", (uint64_t)[v20 unsignedLongValue]);

    xpc_connection_send_message(*(xpc_connection_t *)(v6 + 16), *(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
    xpc_release(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
  }
}

void sub_1005A8264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1005A829C(uint64_t a1)
{
}

void sub_1005A82AC(uint64_t a1)
{
}

void sub_1005A82C0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  sub_1004F143C(a1, v4, v5);
  sub_1000173FC(a1, 164, v4, 1);
}

void sub_1005A833C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1005A8350(uint64_t a1, uint64_t a2, void *a3)
{
}

void sub_1005A835C(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 **a4)
{
  id v6 = a3;
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  sub_1004F143C(a1, v7, v6);
  v10[0] = 0;
  v10[1] = 0;
  id v9 = v10;
  xpc_object_t v8 = sub_1004F1520(a4, (uint64_t)&v9);
  sub_1000486F0((uint64_t)&v9, v10[0]);
  xpc_dictionary_set_value(v7, "kCBMsgArgUUIDs", v8);
  xpc_release(v8);
  sub_1000173FC(a1, 58, v7, 1);
}

void sub_1005A841C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
  sub_1000486F0((uint64_t)&a10, a11);

  _Unwind_Resume(a1);
}

void sub_1005A8444(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 **a4)
{
}

void sub_1005A844C(uint64_t a1, void *a2, uint64_t a3)
{
  xpc_object_t v31 = xpc_dictionary_create(0, 0, 0);
  if (!*(void *)(a3 + 8)) {
    goto LABEL_39;
  }
  xpc_object_t xdict = xpc_dictionary_create(0, 0, 0);
  uint64_t v6 = *(void *)(a3 + 8);
  if (*(char *)(v6 + 39) < 0)
  {
    sub_10003B098(__p, *(void **)(v6 + 16), *(void *)(v6 + 24));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)(v6 + 16);
    int64_t value = *(void *)(v6 + 32);
  }
  if ((SHIBYTE(value) & 0x80000000) == 0)
  {
    if (!HIBYTE(value)) {
      goto LABEL_17;
    }
LABEL_9:
    uint64_t v8 = *(void *)(a3 + 8);
    if (*(char *)(v8 + 39) < 0)
    {
      sub_10003B098(__p, *(void **)(v8 + 16), *(void *)(v8 + 24));
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)(v8 + 16);
      int64_t value = *(void *)(v8 + 32);
    }
    if (value >= 0) {
      id v9 = __p;
    }
    else {
      id v9 = (void **)__p[0];
    }
    xpc_dictionary_set_string(xdict, "kCBAdvDataLocalName", (const char *)v9);
    if (SHIBYTE(value) < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_17;
  }
  xpc_object_t v7 = __p[1];
  operator delete(__p[0]);
  if (v7) {
    goto LABEL_9;
  }
LABEL_17:
  uint64_t v10 = *(void *)(a3 + 8);
  if (*(_WORD *)(v10 + 40))
  {
    xpc_dictionary_set_uint64(xdict, "kCBAdvDataAppearance", *(unsigned __int16 *)(v10 + 40));
    uint64_t v10 = *(void *)(a3 + 8);
  }
  __p[0] = 0;
  __p[1] = 0;
  int64_t value = 0;
  sub_100037564((char *)__p, *(long long **)(v10 + 64), *(long long **)(v10 + 72), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v10 + 72) - *(void *)(v10 + 64)) >> 2));
  if (__p[1] != __p[0])
  {
    v34[0] = 0;
    v34[1] = 0;
    xpc_object_t v33 = v34;
    xpc_object_t v11 = sub_1004F1520((unsigned __int8 **)__p, (uint64_t)&v33);
    sub_1000486F0((uint64_t)&v33, v34[0]);
    xpc_dictionary_set_value(xdict, "kCBAdvDataServiceUUIDs", v11);
    xpc_release(v11);
  }
  int v12 = *(void **)(a3 + 8);
  if (v12[16])
  {
    uint64_t v13 = +[NSMutableArray array];
    unsigned int v14 = (unsigned __int8 *)v12[14];
    if (v14 != (unsigned __int8 *)(v12 + 15))
    {
      do
      {
        if (v14[32] == 2)
        {
          xpc_object_t v33 = 0;
          v34[0] = 0;
          char v15 = +[NSData dataWithBytes:&v33 length:sub_10071D240(v14 + 32, &v33)];
          [v13 addObject:v15];

          uint64_t v16 = sub_10004A6E4((uint64_t)(v14 + 56));
          __n128 v17 = +[NSData dataWithBytes:v16 length:sub_100045F00((uint64_t)(v14 + 56))];
          [v13 addObject:v17];
        }
        int v18 = (unsigned __int8 *)*((void *)v14 + 1);
        if (v18)
        {
          do
          {
            long long v19 = v18;
            int v18 = *(unsigned __int8 **)v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            long long v19 = (unsigned __int8 *)*((void *)v14 + 2);
            BOOL v20 = *(void *)v19 == (void)v14;
            unsigned int v14 = v19;
          }
          while (!v20);
        }
        unsigned int v14 = v19;
      }
      while (v19 != (unsigned __int8 *)(v12 + 15));
    }
    if (objc_msgSend(v13, "count", xdict, v31))
    {
      xpc_object_t v21 = sub_1004F1660(v13);
      xpc_dictionary_set_value(xdict, "kCBAdvDataServiceData", v21);
      xpc_release(v21);
    }

    int v12 = *(void **)(a3 + 8);
  }
  if (sub_100045F00((uint64_t)(v12 + 6)) && *(unsigned char *)(a1 + 184))
  {
    long long v22 = (const void *)sub_10004A6E4(*(void *)(a3 + 8) + 48);
    size_t v23 = sub_100045F00(*(void *)(a3 + 8) + 48);
    xpc_dictionary_set_data(xdict, "kCBAdvDataAppleMfgData", v22, v23);
  }
  xpc_dictionary_set_value(v31, "kCBMsgArgAdvertisementData", xdict);
  xpc_release(xdict);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_39:
  if (a2[4] != a2[3])
  {
    sub_100040550(v32, (uint64_t)(a2 + 3));
    xpc_object_t v24 = sub_1003BFD00((uint64_t **)v32);
    if (v32[0])
    {
      v32[1] = v32[0];
      operator delete(v32[0]);
    }
    xpc_dictionary_set_value(v31, "kCBMsgArgServices", v24);
    xpc_release(v24);
  }
  if (a2[7] != a2[6])
  {
    xpc_object_t v25 = xpc_array_create(0, 0);
    uint64_t v27 = a2[6];
    for (uint64_t i = a2[7]; v27 != i; v27 += 18)
    {
      __p[0] = 0;
      __p[1] = 0;
      LOWORD(value) = 0;
      uuid_copy((unsigned __int8 *)__p, (const unsigned __int8 *)v27);
      LOWORD(value) = *(_WORD *)(v27 + 16);
      xpc_object_t v28 = xpc_dictionary_create(0, 0, 0);
      uint64_t v29 = sub_100031234((const unsigned __int8 *)__p);
      sub_1004F143C(a1, v28, v29);

      xpc_dictionary_set_int64(v28, "kCBMsgArgAttributeID", (unsigned __int16)value);
      xpc_array_append_value(v25, v28);
      xpc_release(v28);
    }
    xpc_dictionary_set_value(v31, "kCBMsgArgSubscribedHandles", v25);
    xpc_release(v25);
  }
  sub_1000173FC(a1, 57, v31, 1);
}

void sub_1005A8914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1005A89B4(uint64_t a1, void *a2, uint64_t a3)
{
}

void sub_1005A89BC(uint64_t a1)
{
}

void sub_1005A89CC(uint64_t a1)
{
}

void sub_1005A89E0(uint64_t a1, void *a2, int a3, unsigned int a4, int a5, int a6, int a7)
{
  id v13 = a2;
  unsigned int v14 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109632;
    *(_DWORD *)&uint8_t buf[4] = a4;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = a5;
    *(_WORD *)&uint8_t buf[14] = 1024;
    LODWORD(v27) = a7;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Channel connected callback : sockets : psm %u, cid %u, sock %d", buf, 0x14u);
  }
  xpc_object_t v15 = xpc_dictionary_create(0, 0, 0);
  id v16 = v13;
  __n128 v17 = v16;
  if (v16)
  {
    memset(buf, 0, sizeof(buf));
    [v16 getUUIDBytes:buf];
    xpc_dictionary_set_uuid(v15, "kCBMsgArgDeviceUUID", buf);
  }

  xpc_dictionary_set_int64(v15, "kCBMsgArgResult", a3);
  xpc_dictionary_set_int64(v15, "kCBMsgArgPSM", a4);
  xpc_dictionary_set_fd(v15, "kCBMsgArgSocket", a7);
  uint64_t v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  *(_OWORD *)long long buf = 0u;
  long long v27 = 0u;
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009B7AC8);
  }
  sub_1006773FC((uint64_t)off_1009F7EB8, v17, (uint64_t)buf);
  if (*(void *)buf)
  {
    id v18 = [*(id *)&buf[8] mutableCopy];
    long long v19 = v18;
    if (a6 && ([v18 containsObject:*(void *)(a1 + 96)] & 1) == 0) {
      [v19 addObject:*(void *)(a1 + 96)];
    }
    objc_storeStrong((id *)&buf[8], v19);
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009B7AC8);
    }
    BOOL v20 = off_1009F7EB8;
    v21[0] = *(id *)buf;
    v21[1] = *(id *)&buf[8];
    long long v22 = v27;
    long long v23 = v28;
    long long v24 = v29;
    int v25 = v30;
    sub_100677528((uint64_t)v20, v17, (uint64_t)v21);
  }
  sub_1000173FC(a1, 23, v15, 1);
}

void sub_1005A8C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1005A8CC8(uint64_t a1, void *a2, int a3, unsigned int a4, int a5, int a6, int a7)
{
}

void sub_1005A8CD0(uint64_t a1, void *a2, int a3, unsigned int a4, int a5)
{
  id v9 = a2;
  uint64_t v10 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v14) = 67109632;
    HIDWORD(v14) = a3;
    LOWORD(v15) = 1024;
    *(_DWORD *)((char *)&v15 + 2) = a4;
    HIWORD(v15) = 1024;
    int v16 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Channel disconnected callback result : %d, psm : %u, cid = %u", (uint8_t *)&v14, 0x14u);
  }
  xpc_object_t v11 = xpc_dictionary_create(0, 0, 0);
  id v12 = v9;
  id v13 = v12;
  if (v12)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    [v12 getUUIDBytes:&v14];
    xpc_dictionary_set_uuid(v11, "kCBMsgArgDeviceUUID", (const unsigned __int8 *)&v14);
  }

  xpc_dictionary_set_int64(v11, "kCBMsgArgResult", a3);
  xpc_dictionary_set_int64(v11, "kCBMsgArgPSM", a4);
  sub_1000173FC(a1, 24, v11, 1);
}

void sub_1005A8E34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005A8E58(uint64_t a1, void *a2, int a3, unsigned int a4, int a5)
{
}

void sub_1005A8E60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109376;
    int v13 = a2;
    __int16 v14 = 1024;
    int v15 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Channel published callback PSM : %u result : %d", buf, 0xEu);
  }
  xpc_object_t v7 = +[NSNumber numberWithUnsignedShort:a2, @"kCBMsgArgPSM"];
  v10[1] = @"kCBMsgArgResult";
  v11[0] = v7;
  uint64_t v8 = +[NSNumber numberWithInt:a3];
  v11[1] = v8;
  id v9 = +[NSDictionary dictionaryWithObjects:v11 forKeys:v10 count:2];
  sub_100017388(a1, 21, v9);
}

void sub_1005A8FA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005A8FD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1005A8FDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109376;
    int v13 = a2;
    __int16 v14 = 1024;
    int v15 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Channel unpublished callback PSM : %u, result : %d", buf, 0xEu);
  }
  xpc_object_t v7 = +[NSNumber numberWithUnsignedShort:a2, @"kCBMsgArgPSM"];
  v10[1] = @"kCBMsgArgResult";
  v11[0] = v7;
  uint64_t v8 = +[NSNumber numberWithInt:a3];
  v11[1] = v8;
  id v9 = +[NSDictionary dictionaryWithObjects:v11 forKeys:v10 count:2];
  sub_100017388(a1, 22, v9);
}

void sub_1005A9120(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005A9150(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1005A9158()
{
  uint64_t v0 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "XpcLeAttConnection::advertisingStarted", v1, 2u);
  }
}

void sub_1005A91C0()
{
  uint64_t v0 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "XpcLeAttConnection::advertisingStopped", v1, 2u);
  }
}

void sub_1005A9228(uint64_t a1, int a2)
{
  unint64_t v3 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "XpcLeAttConnection::scanningStarted error:%d", (uint8_t *)v4, 8u);
  }
}

void sub_1005A92CC(uint64_t a1, int a2)
{
  unint64_t v3 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "XpcLeAttConnection::scanningStopped error:%d", (uint8_t *)v4, 8u);
  }
}

void sub_1005A9370(double a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8)
{
  int v15 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = 138413826;
    uint64_t v17 = a3;
    __int16 v18 = 2112;
    uint64_t v19 = a4;
    __int16 v20 = 1024;
    int v21 = a5;
    __int16 v22 = 1024;
    int v23 = a6;
    __int16 v24 = 1024;
    int v25 = a7;
    __int16 v26 = 2048;
    double v27 = a1;
    __int16 v28 = 1024;
    int v29 = a8;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "XpcLeAttConnection::deviceFound data:%@ encryptedAEM:%@ avgRSSI:%d count:%d saturated:%d timestamp:%f lastScanDeltaSeconds:%d", (uint8_t *)&v16, 0x38u);
  }
}

uint64_t sub_1005A9488(uint64_t a1)
{
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009B7B88);
  }
  uint64_t result = sub_1006DBD54(off_1009F85C0);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_1005A94E8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v96 = 0;
  uint64_t v97 = 0;
  uint64_t v94 = 0;
  int v95 = 0;
  uint64_t v92 = 0;
  uint64_t v93 = 0;
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  uint64_t v88 = 0;
  uint64_t v89 = 0;
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  uint64_t v84 = 0;
  uint64_t v85 = 0;
  uint64_t v6 = sub_1002D4B14(a2, "kCBScanOptionPeers");
  uint64_t v82 = 0;
  uint64_t v83 = 0;
  uint64_t v81 = 0;
  uint64_t v80 = 1;
  uint64_t v79 = 0;
  uint64_t v78 = 0;
  uint64_t v77 = 0;
  uint64_t v76 = 0;
  uint64_t v75 = 0;
  uint64_t v74 = 0;
  uint64_t v73 = 0;
  xpc_object_t v7 = sub_1002D500C(a2, "kCBManagerListOfClients");
  uint64_t v8 = +[NSMutableSet setWithArray:v7];

  objc_storeStrong((id *)(a3 + 152), v8);
  uint64_t v72 = 0;
  uint64_t v71 = 0;
  uint64_t v70 = 0;
  uint64_t v69 = 0;
  uint64_t v15 = sub_1000198BC(a2, 0, v9, v10, v11, v12, v13, v14, (uint64_t)"kCBScanOptionAllowDuplicates");
  if (v15)
  {
    int v16 = 0;
    goto LABEL_129;
  }
  if (*(int *)(a1 + 80) < 1)
  {
    int v16 = 0;
  }
  else
  {
    *(_DWORD *)(a3 + 168) = v72;
    uint64_t v17 = sub_1002D5194(a2, "kCBOptionUseCaseList");
    __int16 v18 = v17;
    if (v17)
    {
      if ([v17 count])
      {
        uint64_t v19 = +[NSSet setWithArray:v18];
        __int16 v20 = [v19 allObjects];

        __int16 v18 = [v20 sortedArrayUsingSelector:"compare:"];
      }
      int v16 = v18;
    }
    else
    {
      int v16 = 0;
    }
    objc_storeStrong((id *)(a3 + 176), v16);
    if (v16 && [v16 count])
    {
      int v21 = sub_1005AA6EC(v16);
      __int16 v22 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = [v21 componentsJoinedByString:@","];
        *(_DWORD *)long long buf = 138412290;
        int v99 = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "scanUseCaseList: %@", buf, 0xCu);
      }
      if (!v72)
      {
        __int16 v24 = [v16 firstObject];
        int v25 = v24;
        if (v24)
        {
          *(_DWORD *)(a3 + 168) = [v24 longLongValue];
          __int16 v26 = qword_100A19EC8;
          if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
          {
            double v27 = sub_10003C778((int)[v25 longLongValue]);
            *(_DWORD *)long long buf = 136315138;
            int v99 = v27;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "default scanUseCase derived from scanUseCaseList: %s", buf, 0xCu);
          }
        }
      }
    }
  }
  *(unsigned char *)(a3 + 201) = *(unsigned char *)(a1 + 190);
  uint64_t v28 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v28 + 3536))(v28) == 32)
  {
    if (*(unsigned char *)(a1 + 191)) {
      char v29 = 32;
    }
    else {
      char v29 = 8;
    }
    *(unsigned char *)(a3 + 203) = v29;
  }
  if ((unint64_t)WORD1(v72) << 16 == 0x10000 && (_os_feature_enabled_impl() & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_100780024();
    }
    goto LABEL_77;
  }
  if (sub_1002D3F28(a2, "kCBScanOptionScanRxDuration")) {
    *(void *)(a3 + 188) = v73;
  }
  if (sub_1002D3F28(a2, "kCBScanOptionAllowDuplicates")) {
    *(unsigned char *)a3 = v97 != 0;
  }
  if (sub_1002D3F28(a2, "kCBScanOptionRequiresActive")) {
    *(unsigned char *)(a3 + 2) = v87 != 0;
  }
  if (sub_1002D3F28(a2, "kCBScanOptionSolicitedServiceUUIDs"))
  {
    size_t v67 = 0;
    long long __p = 0;
    uint64_t v68 = 0;
    sub_100037564((char *)&__p, v94, v95, 0xCCCCCCCCCCCCCCCDLL * (((char *)v95 - (char *)v94) >> 2));
    if ((void **)(a3 + 32) != &__p) {
      sub_10003366C((void *)(a3 + 32), (long long *)__p, v67, 0xCCCCCCCCCCCCCCCDLL * (((char *)v67 - (unsigned char *)__p) >> 2));
    }
    if (__p)
    {
      size_t v67 = (long long *)__p;
      operator delete(__p);
    }
  }
  if (sub_1002D3F28(a2, "kCBMsgArgIsPrivilegedDaemon")) {
    *(unsigned char *)(a3 + 1) = v93 != 0;
  }
  if (sub_1002D3F28(a2, "kCBScanOptionPeers")) {
    objc_storeStrong((id *)(a3 + 56), v6);
  }
  if (sub_1002D3F28(a2, "kCBScanOptionPriorityCritical")) {
    *(unsigned char *)(a3 + 141) = v78 != 0;
  }
  if (sub_1002D3F28(a2, "kCBScanOptionRange")) {
    *(unsigned char *)(a3 + 140) = v79 != 0;
  }
  *(unsigned char *)(a3 + 121) = v88 != 0;
  *(unsigned char *)(a3 + 139) = v80;
  *(unsigned char *)(a3 + 184) = v71 != 0;
  if (*(_DWORD *)(a1 + 80) == 2)
  {
    *(unsigned char *)(a3 + 199) = v70 != 0;
    if (!v72)
    {
      unsigned int v37 = sub_1002D3F28(a2, "kCBScanOptionHWObjectDiscovery");
      if (v83) {
        unsigned int v38 = v37;
      }
      else {
        unsigned int v38 = 0;
      }
      if (v38 == 1)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
          sub_10077FFAC();
        }
        uint64_t v81 = 1;
      }
      unsigned int v39 = sub_1002D3F28(a2, "kCBScanOptionHWObjectDiscoveryWild");
      uint64_t v40 = v81;
      unsigned __int8 v41 = sub_1002D3F28(a2, "kCBScanOptionHWObjectDiscoveryNearOwner");
      int v42 = v40 ? v39 : 0;
      int v43 = (v41 & (v82 != 0)) != 0 ? v42 | 2 : v42;
      if (v43)
      {
        if (_os_feature_enabled_impl())
        {
          if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
            sub_10077FF78();
          }
          goto LABEL_77;
        }
        uint64_t v60 = sub_100035F54();
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v60 + 704))(v60)) {
          goto LABEL_80;
        }
        *(unsigned char *)(a3 + 122) = v43;
      }
    }
    *(unsigned char *)(a3 + 3) = v86 != 0;
    if (v77)
    {
      uint64_t v30 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
      {
        xpc_object_t v31 = (const char *)(a1 + 56);
        if (*(char *)(a1 + 79) < 0) {
          xpc_object_t v31 = *(const char **)v31;
        }
        *(_DWORD *)long long buf = 136315138;
        int v99 = v31;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Session \"%s\" requested to hold a scan power assertion", buf, 0xCu);
      }
      *(unsigned char *)(a3 + 142) = 1;
    }
    *(unsigned char *)(a3 + 144) = v75 != 0;
    if (sub_1002D3F28(a2, "kCBScanOptionPriorityConfiguration")) {
      *(unsigned char *)(a3 + 145) = v74;
    }
  }
  if (!v76) {
    goto LABEL_60;
  }
  uint64_t v32 = sub_100035F54();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v32 + 352))(v32) & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077FD08();
    }
LABEL_80:
    uint64_t v15 = 11;
    goto LABEL_129;
  }
  if (*(int *)(a1 + 80) >= 1)
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 143) = 1;
    *(unsigned char *)(a1 + 173) = 1;
  }
LABEL_60:
  if (sub_1002D3F1C()) {
    *(unsigned char *)(a1 + 173) = 1;
  }
  if (*(unsigned char *)(a1 + 185)) {
    *(unsigned char *)(a3 + 137) = v92;
  }
  int v34 = v90;
  int v33 = v91;
  if (v90) {
    BOOL v35 = v91 == 0;
  }
  else {
    BOOL v35 = 1;
  }
  if (!v35 || v83)
  {
    if (v91 == 0xFFFF || v90 == 0xFFFF)
    {
      uint64_t v90 = 0;
      uint64_t v91 = 0;
    }
    else if (v91 && v90)
    {
      BOOL v36 = v89 != 0;
      *(unsigned char *)(a3 + 120) = 1;
      *(_DWORD *)(a3 + 128) = v34;
      *(_DWORD *)(a3 + 132) = v33;
      *(unsigned char *)(a3 + 136) = v36;
    }
  }
  if (v85)
  {
    int v44 = *(unsigned __int8 *)(a1 + 171);
    *(unsigned char *)(a3 + 138) = v44;
    if (!v44 && os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077FF44();
    }
  }
  else
  {
    *(unsigned char *)(a3 + 138) = 0;
  }
  uint64_t v45 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v45 + 2400))(v45))
  {
    xpc_object_t value = xpc_dictionary_get_value(a2, "kCBScanOptionZone");
    if (*(unsigned char *)(a1 + 170))
    {
      uint64_t v47 = value;
      if (value)
      {
        if (xpc_get_type(value) == (xpc_type_t)&_xpc_type_array)
        {
          applier[0] = _NSConcreteStackBlock;
          applier[1] = 3221225472;
          applier[2] = sub_1005B5344;
          applier[3] = &unk_1009A3318;
          void applier[4] = a3;
          if (!xpc_array_apply(v47, applier))
          {
LABEL_77:
            uint64_t v15 = 3;
            goto LABEL_129;
          }
        }
      }
    }
  }
  id v48 = *(id *)(a1 + 96);
  int v49 = _os_feature_enabled_impl();
  if (v8) {
    int v50 = v49;
  }
  else {
    int v50 = 0;
  }
  if (v50 == 1)
  {
    xpc_object_t v51 = [v8 allObjects];
    xpc_object_t v52 = [v51 firstObject];

    if ([v52 length])
    {
      objc_storeStrong((id *)(a1 + 224), v52);
      if (!sub_100056660(a1))
      {
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
          sub_10077BE24();
        }

        goto LABEL_127;
      }
    }
  }
  xpc_object_t v53 = xpc_dictionary_get_value(a2, "kCBScanOptionAppleFilter");
  xpc_object_t v54 = v53;
  if (!v53) {
    goto LABEL_119;
  }
  if (xpc_get_type(v53) != (xpc_type_t)&_xpc_type_array) {
    goto LABEL_119;
  }
  v61[0] = _NSConcreteStackBlock;
  v61[1] = 3221225472;
  v61[2] = sub_1005B54B4;
  v61[3] = &unk_1009B7990;
  uint64_t v63 = a1;
  id v62 = v48;
  uint64_t v64 = a3;
  BOOL v55 = xpc_array_apply(v54, v61);

  if (v55)
  {
LABEL_119:
    id v56 = *(id *)(a3 + 152);
    uint64_t v57 = +[NSMutableSet setWithSet:v56];

    if (![v57 count]) {
      [v57 addObject:*(void *)(a1 + 96)];
    }
    uint64_t v58 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      int v99 = (const char *)v57;
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "Setting client list to %@", buf, 0xCu);
    }
    objc_storeStrong((id *)(a3 + 152), v57);
    sub_1005B7080(a3);
    uint64_t v15 = 0;
    uint64_t v8 = v57;
    goto LABEL_128;
  }
LABEL_127:
  uint64_t v15 = 3;
LABEL_128:

LABEL_129:
  if (v94)
  {
    int v95 = v94;
    operator delete(v94);
  }
  return v15;
}

void sub_1005AA2B8(_Unwind_Exception *a1)
{
  uint64_t v8 = *(void **)(v6 - 160);
  if (v8)
  {
    *(void *)(v6 - 152) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1005AA3A0(uint64_t a1, unsigned __int8 **a2)
{
  if (*(int *)(a1 + 80) <= 1)
  {
    xpc_object_t v4 = *a2;
    id v5 = a2[1];
    if (*a2 == v5)
    {
      uint64_t v6 = *a2;
    }
    else
    {
      while (1)
      {
        *(_OWORD *)long long buf = xmmword_1007BA7E4;
        int v18 = 0;
        if (sub_10022A44C(v4, buf)) {
          break;
        }
        v4 += 20;
        if (v4 == v5)
        {
          xpc_object_t v4 = v5;
          break;
        }
      }
      uint64_t v6 = v4;
      xpc_object_t v4 = a2[1];
    }
    if (v6 != v4)
    {
      xpc_object_t v7 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Contact tracing UUID scanning is not allowed.", buf, 2u);
      }
      return 3;
    }
    uint64_t v9 = *a2;
    if (v9 != v4)
    {
      while (1)
      {
        if (qword_1009F7F10 != -1) {
          dispatch_once(&qword_1009F7F10, &stru_1009B7A88);
        }
        if ((sub_10063C2BC(qword_1009F7F08, v9, *(unsigned __int8 *)(a1 + 183), *(unsigned int *)(a1 + 196), 0) & 1) == 0)
        {
          uint64_t v10 = qword_100A19EC8;
          if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v11 = *(void *)(a1 + 96);
            sub_1000417A8((uint64_t)v9, buf);
            uint64_t v12 = buf;
            if (v19 < 0) {
              uint64_t v12 = *(uint8_t **)buf;
            }
            *(_DWORD *)__int16 v20 = 138412546;
            uint64_t v21 = v11;
            __int16 v22 = 2080;
            int v23 = v12;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%@ wants to scan for restricted service (%s)", v20, 0x16u);
            if (v19 < 0) {
              operator delete(*(void **)buf);
            }
          }
          long long v15 = xmmword_1007BA7BC;
          int v16 = -1171415960;
          if (sub_10022A44C(v9, (unsigned __int8 *)&v15)) {
            break;
          }
          long long v13 = xmmword_1007BA914;
          int v14 = 0;
          if (sub_10022A44C(v9, (unsigned __int8 *)&v13)) {
            break;
          }
        }
        v9 += 20;
        if (v9 == v4) {
          return 0;
        }
      }
      return 3;
    }
  }
  return 0;
}

uint64_t sub_1005AA61C(void *a1)
{
  uint64_t v2 = a1[5];
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  uint64_t result = sub_1002F6784((uint64_t)off_1009F8780, *(void *)(v2 + 128), a1[6]);
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = result;
  return result;
}

void sub_1005AA688(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  uint64_t v2 = off_1009F8780;
  unint64_t v3 = *(void *)(v1 + 128);

  sub_1002F6808((uint64_t)v2, v3);
}

id sub_1005AA6EC(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[NSMutableArray array];
  for (unint64_t i = 0; i < (unint64_t)[v1 count]; ++i)
  {
    xpc_object_t v4 = [v1 objectAtIndex:i];
    id v5 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", sub_10003C778((int)[v4 longLongValue]));
    [v2 addObject:v5];
  }
  id v6 = [v2 copy];

  return v6;
}

void sub_1005AA7C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005AA9C8(void *a1)
{
  uint64_t v2 = a1[6];
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  unint64_t v3 = off_1009F8780;
  unint64_t v4 = *(void *)(v2 + 128);
  id v5 = (void *)a1[4];
  id v6 = (void *)a1[5];

  sub_1002F85D8((uint64_t)v3, v4, v5, v6);
}

void sub_1005AAA34(id a1)
{
  int v47 = 0;
  uint64_t v1 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "DebugOverrideConnectionMinCELength");
  int v2 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v1 + 88))(v1, buf, __p, &v47);
  if (v47) {
    int v3 = v2;
  }
  else {
    int v3 = 0;
  }
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  if (v49 < 0)
  {
    operator delete(*(void **)buf);
    if (!v3) {
      goto LABEL_13;
    }
  }
  else if (!v3)
  {
    goto LABEL_13;
  }
  unint64_t v4 = qword_100A19EC8;
  BOOL v5 = os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT);
  char v6 = v47;
  if (v5)
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v47;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Warning: DebugOverrideConnectionMinCELength:%d", buf, 8u);
    char v6 = v47;
  }
  byte_100A13980 = v6;
  byte_100A13985 = 1;
LABEL_13:
  uint64_t v7 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "DebugOverrideConnectionMaxCELength");
  int v8 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v7 + 88))(v7, buf, __p, &v47);
  if (v47) {
    int v9 = v8;
  }
  else {
    int v9 = 0;
  }
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  if (v49 < 0)
  {
    operator delete(*(void **)buf);
    if (!v9) {
      goto LABEL_25;
    }
  }
  else if (!v9)
  {
    goto LABEL_25;
  }
  uint64_t v10 = qword_100A19EC8;
  BOOL v11 = os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT);
  char v12 = v47;
  if (v11)
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v47;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Warning: DebugOverrideConnectionMaxCELength:%d", buf, 8u);
    char v12 = v47;
  }
  byte_100A13981 = v12;
  byte_100A13985 = 1;
LABEL_25:
  uint64_t v13 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "DebugOverrideConnectionMinCIFrames");
  int v14 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v13 + 88))(v13, buf, __p, &v47);
  if (v47) {
    int v15 = v14;
  }
  else {
    int v15 = 0;
  }
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  if (v49 < 0)
  {
    operator delete(*(void **)buf);
    if (!v15) {
      goto LABEL_37;
    }
  }
  else if (!v15)
  {
    goto LABEL_37;
  }
  int v16 = qword_100A19EC8;
  BOOL v17 = os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT);
  char v18 = v47;
  if (v17)
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v47;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Warning: DebugOverrideConnectionMinCELength:%d", buf, 8u);
    char v18 = v47;
  }
  byte_100A13980 = v18;
  byte_100A13985 = 1;
LABEL_37:
  uint64_t v19 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "DebugOverrideConnectionMaxCIFrames");
  int v20 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v19 + 88))(v19, buf, __p, &v47);
  if (v47) {
    int v21 = v20;
  }
  else {
    int v21 = 0;
  }
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  if (v49 < 0)
  {
    operator delete(*(void **)buf);
    if (!v21) {
      goto LABEL_49;
    }
  }
  else if (!v21)
  {
    goto LABEL_49;
  }
  __int16 v22 = qword_100A19EC8;
  BOOL v23 = os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT);
  char v24 = v47;
  if (v23)
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v47;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Warning: DebugOverrideConnectionMaxCELength:%d", buf, 8u);
    char v24 = v47;
  }
  byte_100A13981 = v24;
  byte_100A13985 = 1;
LABEL_49:
  uint64_t v25 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "DebugOverrideConnectionSupervisionTimeout");
  int v26 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v25 + 88))(v25, buf, __p, &v47);
  if (v47) {
    int v27 = v26;
  }
  else {
    int v27 = 0;
  }
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  if (v49 < 0)
  {
    operator delete(*(void **)buf);
    if (!v27) {
      goto LABEL_61;
    }
  }
  else if (!v27)
  {
    goto LABEL_61;
  }
  uint64_t v28 = qword_100A19EC8;
  BOOL v29 = os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT);
  char v30 = v47;
  if (v29)
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v47;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Warning: DebugOverrideConnectionSupervisionTimeout:%d", buf, 8u);
    char v30 = v47;
  }
  byte_100A13981 = v30;
  byte_100A13985 = 1;
LABEL_61:
  char v44 = 0;
  uint64_t v31 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "DebugOverrideAutoReconnectEnabled");
  int v32 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v31 + 72))(v31, buf, __p, &v44);
  if (v44) {
    int v33 = v32;
  }
  else {
    int v33 = 0;
  }
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  if (v49 < 0)
  {
    operator delete(*(void **)buf);
    if (!v33) {
      goto LABEL_73;
    }
  }
  else if (!v33)
  {
    goto LABEL_73;
  }
  int v34 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Warning: AutoReconnectEnabled for everyone", buf, 2u);
  }
  byte_100A13986 = v44;
LABEL_73:
  uint64_t v35 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "OverrideTxPowerConnectInd");
  int v36 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v35 + 88))(v35, buf, __p, &v47);
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  if (v49 < 0)
  {
    operator delete(*(void **)buf);
    if (!v36) {
      goto LABEL_82;
    }
  }
  else if (!v36)
  {
    goto LABEL_82;
  }
  unsigned int v37 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v47;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Warning: OverrideTxPowerConnectInd:%d", buf, 8u);
  }
  byte_100A13982 = v47;
  byte_100A13985 = 1;
LABEL_82:
  uint64_t v38 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "OverrideTxPowerAuxConnectReq");
  int v39 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v38 + 88))(v38, buf, __p, &v47);
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  if (v49 < 0)
  {
    operator delete(*(void **)buf);
    if (!v39) {
      goto LABEL_91;
    }
  }
  else if (!v39)
  {
    goto LABEL_91;
  }
  uint64_t v40 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v47;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Warning: OverrideTxPowerAuxConnectReq:%d", buf, 8u);
  }
  LOBYTE(word_100A13983) = v47;
  byte_100A13985 = 1;
LABEL_91:
  uint64_t v41 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "OverrideMrcEnable");
  int v42 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v41 + 88))(v41, buf, __p, &v47);
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  if (v49 < 0)
  {
    operator delete(*(void **)buf);
    if (!v42) {
      return;
    }
  }
  else if (!v42)
  {
    return;
  }
  int v43 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v47;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "Warning: OverrideMrcEnable:%d", buf, 8u);
  }
  HIBYTE(word_100A13983) = v47;
  byte_100A13985 = 1;
}

void sub_1005AB358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005AB3D4(void *a1)
{
  uint64_t v2 = a1[6];
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  int v3 = off_1009F8780;
  unint64_t v4 = *(void *)(v2 + 128);
  BOOL v5 = (void *)a1[4];
  char v6 = (void *)a1[5];

  sub_1002F6B48((uint64_t)v3, v4, v5, v6);
}

uint64_t sub_1005AB440(uint64_t a1)
{
  uint64_t v2 = 0;
  char v6 = 0;
  int v5 = 0;
  do
    *((unsigned char *)&v5 + v2++) = arc4random_uniform(0x20u);
  while (v2 != 5);
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009B7AC8);
  }
  int v3 = off_1009F7EB8;
  sub_1000305AC(v7, *(void *)(a1 + 32));
  return sub_1006A2F00((uint64_t)v3, v7, (uint64_t)&v5);
}

void sub_1005AB510(int a1)
{
  uint64_t v2 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Set LE AFH completed with status=%{bluetooth:OI_STATUS}u", (uint8_t *)v3, 8u);
  }
}

void sub_1005AB5B4()
{
}

void sub_1005AB5C0(uint64_t a1, __int16 a2, char a3, char a4, char a5)
{
  word_100A19DF8 = a2;
  byte_100A19DFA = a3;
  byte_100A19DFB = a4;
  byte_100A19DFC = a5;
  sub_100026264(&stru_100A19DC8);
}

uint64_t sub_1005AB5E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009B7B88);
  }
  int v3 = off_1009F85C0;
  uint64_t v4 = *(void *)(v2 + 128);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 40);

  return sub_1006E4628((uint64_t)v3, v4, v5);
}

uint64_t sub_1005AB650(uint64_t a1)
{
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009B7B88);
  }
  uint64_t v2 = off_1009F85C0;
  char v3 = *(unsigned char *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 48);

  return sub_1006E423C((uint64_t)v2, v3, v4, v5);
}

uint64_t sub_1005AB6BC(uint64_t a1)
{
  unsigned __int8 v2 = [*(id *)(a1 + 32) count];
  uint64_t v13 = 0;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v10 = 0u;
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = &v10;
    do
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
      }
      uint64_t v5 = off_1009F7ED8;
      char v6 = [*(id *)(a1 + 32) objectAtIndexedSubscript:v3, v10, v11, v12, v13];
      unint64_t v7 = sub_100030DCC((uint64_t)v5, v6, 0);
      uint64_t v8 = sub_1002284B8(v7);
      *(_DWORD *)uint64_t v4 = v8;
      *((unsigned char *)v4 + 6) = BYTE6(v8);
      *((_WORD *)v4 + 2) = WORD2(v8);

      ++v3;
      uint64_t v4 = (long long *)((char *)v4 + 7);
    }
    while (v2 != v3);
  }
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009B7B88);
  }
  return sub_1006E42E0((uint64_t)off_1009F85C0, (uint64_t)&v10, v2, *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

void sub_1005AB828(_Unwind_Exception *exception_object)
{
}

void sub_1005AB840(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  uint64_t v3 = off_1009F8780;
  unint64_t v4 = *(void *)(v2 + 128);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 40);

  sub_1002F6944((uint64_t)v3, v4, v5);
}

uint64_t sub_1005AB8AC(uint64_t a1)
{
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009B7B88);
  }
  uint64_t v2 = off_1009F85C0;
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);

  return sub_1006E46F0((uint64_t)v2, v3, v4);
}

uint64_t sub_1005AB910()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 664);

  return v0();
}

uint64_t sub_1005AB990(uint64_t a1)
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009B7AC8);
  }
  uint64_t v2 = off_1009F7EB8;
  sub_1000305AC(v4, *(void *)(a1 + 32));
  return sub_100685E5C((uint64_t)v2, v4, *(unsigned __int16 *)(a1 + 40));
}

void sub_1005ABA34(uint64_t a1, void *a2, unsigned __int8 *a3, unsigned int a4)
{
  id v7 = a2;
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t reply = xpc_dictionary_create_reply(v8);
  if (reply)
  {
    id v10 = v7;
    long long v11 = v10;
    if (v10)
    {
      *(void *)uuid = 0;
      uint64_t v13 = 0;
      [v10 getUUIDBytes:uuid];
      xpc_dictionary_set_uuid(reply, "kCBMsgArgDeviceUUID", uuid);
    }

    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", a4);
    xpc_dictionary_set_uint64(reply, "kCBMsgArgNumConfigSupported", *a3);
    xpc_dictionary_set_uint64(reply, "kCBMsgArgMaxProceduresSupported", *((unsigned __int16 *)a3 + 1));
    xpc_dictionary_set_uint64(reply, "kCBMsgArgNumAntennasSupported", a3[4]);
    xpc_dictionary_set_uint64(reply, "kCBMsgArgRolesSupported", a3[5]);
    xpc_dictionary_set_uint64(reply, "kCBMsgArgModes_Supported", a3[6]);
    xpc_dictionary_set_uint64(reply, "kCBMsgArgRTTCapability", a3[7]);
    xpc_dictionary_set_uint64(reply, "kCBMsgArgRTTCoarseN", a3[8]);
    xpc_dictionary_set_uint64(reply, "kCBMsgArgRTTSoundingN", a3[9]);
    xpc_dictionary_set_uint64(reply, "kCBMsgArgRTTRandomPayloadN", a3[10]);
    xpc_dictionary_set_uint64(reply, "kCBMsgArgCSSyncPHYsSupported", a3[11]);
    xpc_dictionary_set_uint64(reply, "kCBMsgArgSubfeaturesSupported", *((unsigned __int16 *)a3 + 6));
    xpc_dictionary_set_uint64(reply, "kCBMsgArgTIP1TimesSupported", *((unsigned __int16 *)a3 + 7));
    xpc_dictionary_set_uint64(reply, "kCBMsgArgTIP2TimesSupported", *((unsigned __int16 *)a3 + 8));
    xpc_dictionary_set_uint64(reply, "kCBMsgArgTFcsTimesSupported", *((unsigned __int16 *)a3 + 9));
    xpc_dictionary_set_uint64(reply, "kCBMsgArgTPMTimesSupported", *((unsigned __int16 *)a3 + 10));
    xpc_dictionary_set_uint64(reply, "kCBMsgArgTSWTimesSupported", a3[22]);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), reply);
    xpc_release(reply);
  }
}

void sub_1005ABC64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005ABC8C(uint64_t a1, void *a2, unsigned __int8 *a3, unsigned int a4)
{
}

uint64_t sub_1005ABC94(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  uint64_t result = sub_1002F938C((uint64_t)off_1009F8780, *(void *)(v2 + 128));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_1005ABCFC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  uint64_t result = sub_1002F93DC((uint64_t)off_1009F8780, *(void *)(v2 + 128), *(void **)(a1 + 32));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_1005ABD68(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  unint64_t v3 = *(void *)(v2 + 128);
  uint64_t v4 = *(void **)(a1 + 32);
  long long v5 = *(_OWORD *)(a1 + 72);
  long long v7 = *(_OWORD *)(a1 + 56);
  v8[0] = v5;
  *(_OWORD *)((char *)v8 + 10) = *(_OWORD *)(a1 + 82);
  uint64_t result = sub_1002F9454((uint64_t)off_1009F8780, v3, v4, &v7);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_1005ABDF4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  uint64_t result = sub_1002F94EC((uint64_t)off_1009F8780, *(void *)(v2 + 128), *(void **)(a1 + 32));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_1005ABE60(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  uint64_t result = sub_1002F9564((uint64_t)off_1009F8780, *(void *)(v2 + 128), *(void **)(a1 + 32));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_1005ABECC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  unint64_t v3 = *(void *)(v2 + 128);
  uint64_t v4 = *(void **)(a1 + 32);
  long long v5 = *(_OWORD *)(a1 + 72);
  v7[0] = *(_OWORD *)(a1 + 56);
  v7[1] = v5;
  void v7[2] = *(_OWORD *)(a1 + 88);
  int v8 = *(_DWORD *)(a1 + 104);
  uint64_t result = sub_1002F95DC((uint64_t)off_1009F8780, v3, v4, (uint64_t)v7);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_1005ABF60(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  uint64_t result = sub_1002F967C((uint64_t)off_1009F8780, *(void *)(v2 + 128), *(void **)(a1 + 32), *(unsigned __int8 *)(a1 + 56));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_1005ABFD0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  uint64_t result = sub_1002F96FC((uint64_t)off_1009F8780, *(void *)(v2 + 128), *(void **)(a1 + 32), *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), *(unsigned __int8 *)(a1 + 64));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_1005AC04C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  unint64_t v3 = *(void *)(v2 + 128);
  uint64_t v4 = *(void **)(a1 + 32);
  long long v6 = *(_OWORD *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 72);
  uint64_t result = sub_1002F978C((uint64_t)off_1009F8780, v3, v4, &v6);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_1005AC0D4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  uint64_t result = sub_1002F9824((uint64_t)off_1009F8780, *(void *)(v2 + 128), a1 + 48);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1005AC140(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = &off_100998428;
  *(void *)(a1 + 56) = v3;
  if (v3) {
    sub_100037354(v3);
  }
}

void sub_1005AC174(uint64_t a1)
{
  *(void *)(a1 + 48) = &off_100998428;
  uint64_t v1 = *(atomic_uint **)(a1 + 56);
  if (v1) {
    sub_1000368F4(v1);
  }
}

uint64_t sub_1005AC1A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  uint64_t result = sub_1002F987C((uint64_t)off_1009F8780, *(void *)(v2 + 128), *(void **)(a1 + 32), *(unsigned __int8 *)(a1 + 56), *(unsigned __int8 *)(a1 + 64), *(unsigned __int8 *)(a1 + 72));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_1005AC21C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  uint64_t result = sub_1002F9914((uint64_t)off_1009F8780, *(void *)(v2 + 128));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_1005AC284(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  uint64_t result = sub_1002F9964((uint64_t)off_1009F8780, *(void *)(v2 + 128), *(void **)(a1 + 32));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_1005AC2F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  uint64_t result = sub_1002F99DC((uint64_t)off_1009F8780, *(void *)(v2 + 128), *(void **)(a1 + 32), a1 + 56);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_1005AC360(uint64_t a1)
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009B7AC8);
  }
  uint64_t v2 = off_1009F7EB8;
  sub_1000305AC(v4, *(void *)(a1 + 32));
  return sub_100685ED4((uint64_t)v2, v4, *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_1005AC40C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  unint64_t v3 = *(void *)(v2 + 128);
  uint64_t v4 = *(void **)(a1 + 32);
  long long v5 = *(_OWORD *)(a1 + 72);
  v7[0] = *(_OWORD *)(a1 + 56);
  v7[1] = v5;
  int v8 = *(_DWORD *)(a1 + 88);
  uint64_t result = sub_1002F916C((uint64_t)off_1009F8780, v3, v4, (uint64_t)v7, *(void **)(v2 + 96));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_1005AC49C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  uint64_t result = sub_1002F9224((uint64_t)off_1009F8780, *(void *)(v2 + 128), *(void *)(a1 + 56) != 0, *(void **)(a1 + 32), *(_DWORD *)(a1 + 72), *(unsigned __int8 *)(a1 + 64));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_1005AC51C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  unint64_t v3 = *(void *)(v2 + 128);
  BOOL v4 = *(void *)(a1 + 56) != 0;
  long long v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(unsigned __int16 *)(a1 + 64);
  long long v7 = *(_OWORD *)(a1 + 88);
  v9[0] = *(_OWORD *)(a1 + 72);
  v9[1] = v7;
  uint64_t result = sub_1002F92BC((uint64_t)off_1009F8780, v3, v4, v5, v6, v9, *(unsigned __int8 *)(a1 + 104), *(void **)(v2 + 96));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_1005AC5B8(uint64_t a1)
{
  uint64_t v2 = sub_10003FB34();
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)v2 + 672))(v2, *(unsigned __int8 *)(a1 + 128), *(unsigned __int8 *)(a1 + 136));
}

uint64_t sub_1005AC694(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009B7B88);
  }
  unint64_t v3 = off_1009F85C0;
  uint64_t v4 = *(void *)(v2 + 128);
  uint64_t v5 = sub_10004A6E4(a1 + 40);
  unsigned __int16 v6 = sub_100045F00(a1 + 40);
  uint64_t v7 = sub_10004A6E4(a1 + 56);
  unsigned __int16 v8 = sub_100045F00(a1 + 56);
  HIBYTE(v10) = *(void *)(a1 + 112);
  LOBYTE(v10) = *(void *)(a1 + 104);
  return sub_1006E438C((uint64_t)v3, v4, v5, v6, v7, v8, *(char *)(a1 + 72), *(unsigned __int8 *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), v10, *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136));
}

void sub_1005AC790(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 48);
  a1[5] = &off_100998428;
  a1[6] = v4;
  if (v4) {
    sub_100037354(v4);
  }
  uint64_t v5 = *(void *)(a2 + 64);
  a1[7] = &off_100998428;
  a1[8] = v5;
  if (v5) {
    sub_100037354(v5);
  }
}

void sub_1005AC818(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 40) = v2;
  uint64_t v4 = *(atomic_uint **)(v1 + 48);
  if (v4) {
    sub_1000368F4(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005AC834(void *a1)
{
  a1[7] = &off_100998428;
  uint64_t v2 = (atomic_uint *)a1[8];
  if (v2) {
    sub_1000368F4(v2);
  }
  a1[5] = &off_100998428;
  unint64_t v3 = (atomic_uint *)a1[6];
  if (v3)
  {
    sub_1000368F4(v3);
  }
}

uint64_t sub_1005AC8C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009B7B88);
  }
  unint64_t v3 = off_1009F85C0;
  uint64_t v4 = *(void *)(v2 + 128);
  uint64_t v5 = sub_10004A6E4(a1 + 40);
  unsigned __int16 v6 = sub_100045F00(a1 + 40);
  uint64_t v7 = sub_10004A6E4(a1 + 56);
  unsigned __int16 v8 = sub_100045F00(a1 + 56);
  HIBYTE(v10) = *(void *)(a1 + 112);
  LOBYTE(v10) = *(void *)(a1 + 104);
  return sub_1006E44E4((uint64_t)v3, v4, v5, v6, v7, v8, *(char *)(a1 + 72), *(unsigned __int8 *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), v10, *(void *)(a1 + 120));
}

void sub_1005AC9B4(void *a1)
{
  uint64_t v2 = a1[5];
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  unint64_t v3 = off_1009F8780;
  unint64_t v4 = *(void *)(v2 + 128);
  uint64_t v5 = (void *)a1[4];
  BOOL v6 = a1[6] != 0;
  BOOL v7 = a1[7] != 0;

  sub_1002F8C80((uint64_t)v3, v4, v5, v6, v7, 0);
}

void sub_1005ACA38(void *a1)
{
  uint64_t v2 = a1[6];
  if (*(int *)(v2 + 80) < 1)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078015C();
    }
    goto LABEL_19;
  }
  unint64_t v3 = (void **)(a1 + 4);
  if (!a1[4])
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_100780058();
    }
    goto LABEL_19;
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
  }
  if (sub_1006BB9D4((uint64_t)off_1009F7ED8, *v3))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078008C();
    }
LABEL_19:
    xpc_object_t v4 = 0;
    goto LABEL_20;
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
  }
  sub_1006BEDA4((uint64_t)off_1009F7ED8);
  *(void *)uuid_t uu = 0;
  uint64_t v9 = 0;
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
  }
  sub_1006C0618((uint64_t)off_1009F7ED8, *v3, uu);
  if (uuid_is_null(uu))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_1007800F4();
    }
    goto LABEL_19;
  }
  BOOL v7 = sub_100031234(uu);
  xpc_object_t v4 = sub_10002FB38(v7, *(unsigned __int8 *)(v2 + 168), *(_DWORD *)(v2 + 80));

LABEL_20:
  uint64_t v6 = a1[5];
  uint64_t v5 = a1 + 5;
  xpc_dictionary_set_value(*(xpc_object_t *)(*(void *)(v6 + 8) + 24), "kCBMsgArgDevices", v4);
  xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), *(xpc_object_t *)(*(void *)(*v5 + 8) + 24));
  xpc_release(*(xpc_object_t *)(*(void *)(*v5 + 8) + 24));
  if (v4) {
    xpc_release(v4);
  }
}

void sub_1005ACC80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005ACC98(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  unint64_t v3 = off_1009F8780;
  unint64_t v4 = *(void *)(v2 + 128);
  uint64_t v5 = *(void **)(a1 + 32);
  BOOL v7 = 0;
  uint64_t v8 = 0;
  long long __p = 0;
  sub_100037564((char *)&__p, *(long long **)(a1 + 48), *(long long **)(a1 + 56), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 2));
  sub_1002FA558((uint64_t)v3, v4, v5, (unsigned __int8 **)&__p, *(void *)(a1 + 72) != 0);
  if (__p)
  {
    BOOL v7 = __p;
    operator delete(__p);
  }
}

void sub_1005ACD5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1005ACD78(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v2 = a1 + 48;
  *(void *)(v2 + 16) = 0;
  return sub_100037564((char *)v2, *(long long **)(a2 + 48), *(long long **)(a2 + 56), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 2));
}

void sub_1005ACDA0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1005ACDB8(void *a1)
{
  uint64_t v2 = a1[6];
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  unint64_t v3 = off_1009F8780;
  unint64_t v4 = *(void *)(v2 + 128);
  uint64_t v5 = (void *)a1[4];
  uint64_t v6 = (void *)a1[5];

  sub_1002F8F04((uint64_t)v3, v4, v5, v6);
}

void sub_1005ACE24(id a1)
{
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }

  sub_1002FA6DC();
}

void sub_1005ACE78(id a1)
{
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }

  sub_1002FA604();
}

uint64_t sub_1005ACECC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009B7B88);
  }
  uint64_t v2 = off_1009F85C0;
  if (*(void *)(v1 + 96)) {
    unint64_t v3 = *(__CFString **)(v1 + 96);
  }
  else {
    unint64_t v3 = @"-";
  }

  return sub_1006F0EF8((uint64_t)v2, v3);
}

uint64_t sub_1005ACF40(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009B7B88);
  }
  uint64_t v2 = off_1009F85C0;
  if (*(void *)(v1 + 96)) {
    unint64_t v3 = *(__CFString **)(v1 + 96);
  }
  else {
    unint64_t v3 = @"-";
  }

  return sub_1006F11B4((uint64_t)v2, v3);
}

void sub_1005ACFB4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = sub_1002FA2A0((uint64_t)off_1009F8780, *(void *)(v2 + 128), *(void **)(a1 + 32), *(unsigned int *)(a1 + 56));
  unint64_t v3 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "AppManager::getInstance()->setConnectionLatency returned %d", (uint8_t *)v5, 8u);
  }
}

uint64_t sub_1005AD0B4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  HIWORD(v5) = *(void *)(a1 + 176);
  LOWORD(v5) = *(void *)(a1 + 168);
  HIWORD(v4) = *(void *)(a1 + 160);
  LOWORD(v4) = *(void *)(a1 + 152);
  uint64_t result = sub_1002F9BA8((uint64_t)off_1009F8780, *(void *)(v2 + 128), *(void **)(a1 + 32), *(unsigned __int8 *)(a1 + 56), *(unsigned __int8 *)(a1 + 64), *(unsigned __int8 *)(a1 + 72), *(char *)(a1 + 80), *(unsigned char *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144), v4, v5);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1005AD180(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  unint64_t v3 = off_1009F8780;
  unint64_t v4 = *(void *)(v2 + 128);
  int v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 48);

  sub_1002F9D74((uint64_t)v3, v4, v5, v6);
}

void sub_1005AD1F0(id a1)
{
  __int16 v9 = 0;
  __long long buf = 0;
  arc4random_buf(&__buf, 6uLL);
  __int16 v7 = 0;
  int v6 = 0;
  arc4random_buf(&v6, 6uLL);
  uint64_t v1 = v6 | 0x3FLL;
  LOBYTE(v6) = v6 | 0x3F;
  uint64_t v2 = HIBYTE(v7) | 0x3FLL;
  HIBYTE(v7) |= 0x3Fu;
  unint64_t v3 = (v1 << 40) | ((unint64_t)BYTE1(v6) << 32) | ((unint64_t)BYTE2(v6) << 24) | ((unint64_t)HIBYTE(v6) << 16) | ((unint64_t)v7 << 8) | v2 | 0x1000000000000;
  *(void *)uuid_t uu = 0;
  uint64_t v11 = 0;
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
  }
  sub_100014B58((uint64_t)off_1009F7ED8, v3, 1u, 1u, 0, 0, uu);
  if (!uuid_is_null(uu))
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    operator new();
  }
}

void sub_1005ADA9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (a16 < 0) {
    operator delete(__p);
  }

  sub_100742518((uint64_t)&a30);
  *(void *)(v31 - 184) = a10;
  int v33 = *(atomic_uint **)(v31 - 176);
  if (v33) {
    sub_1000368F4(v33);
  }
  _Unwind_Resume(a1);
}

void sub_1005ADBCC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = sub_100019738(*(void **)(a1 + 48), "kCBMsgArgName");
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
  }
  if (sub_10002F7F0((uint64_t)off_1009F7ED8, *(void **)(a1 + 32), *(void **)(v2 + 96), *(void **)(v2 + 48)))
  {
    if (*(unsigned char *)(v2 + 183))
    {
      uint64_t v4 = 0;
      if (*(void *)(a1 + 32) && v3)
      {
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
        }
        uint64_t v4 = sub_1006BE4EC((uint64_t)off_1009F7ED8, *(void **)(a1 + 32), v3);
      }
    }
    else
    {
      uint64_t v4 = 0;
    }
    xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 56));
    if (reply)
    {
      __int16 v10 = (void *)_CFXPCCreateXPCObjectFromCFObject();
      xpc_dictionary_set_string(reply, "kCBMsgArgCustomPropertyName", (const char *)[v3 UTF8String]);
      xpc_dictionary_set_value(reply, "kCBMsgArgCustomPropertyValue", v10);
      xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), reply);
      if (v10) {
        xpc_release(v10);
      }
      xpc_release(reply);
    }
  }
  else
  {
    uint64_t v5 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(v2 + 96);
      uint64_t v7 = *(void *)(v2 + 48);
      uint64_t v8 = *(void *)(a1 + 32);
      int v11 = 138412802;
      uint64_t v12 = v6;
      __int16 v13 = 2112;
      uint64_t v14 = v7;
      __int16 v15 = 2112;
      uint64_t v16 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", (uint8_t *)&v11, 0x20u);
    }
  }
}

void sub_1005ADDD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005ADE00(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
  }
  if (sub_10002F7F0((uint64_t)off_1009F7ED8, *(void **)(a1 + 32), *(void **)(v2 + 96), *(void **)(v2 + 48)))
  {
    if (*(unsigned char *)(v2 + 183) && *(void *)(a1 + 32))
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
      }
      unint64_t v3 = sub_1006BE440((uint64_t)off_1009F7ED8, *(void **)(a1 + 32));
    }
    else
    {
      unint64_t v3 = &__NSArray0__struct;
    }
    xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 48));
    if (reply)
    {
      xpc_object_t v9 = xpc_array_create(0, 0);
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      id v10 = v3;
      id v11 = [v10 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (v11)
      {
        uint64_t v12 = *(void *)v16;
        do
        {
          for (unint64_t i = 0; i != v11; unint64_t i = (char *)i + 1)
          {
            if (*(void *)v16 != v12) {
              objc_enumerationMutation(v10);
            }
            id v14 = *(id *)(*((void *)&v15 + 1) + 8 * i);
            xpc_array_set_string(v9, 0xFFFFFFFFFFFFFFFFLL, (const char *)[v14 UTF8String]);
          }
          id v11 = [v10 countByEnumeratingWithState:&v15 objects:v19 count:16];
        }
        while (v11);
      }

      xpc_dictionary_set_value(reply, "kCBMsgArgCustomPropertyNames", v9);
      xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), reply);
      if (v9) {
        xpc_release(v9);
      }
      xpc_release(reply);
    }
  }
  else
  {
    uint64_t v4 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(v2 + 96);
      uint64_t v6 = *(void *)(v2 + 48);
      uint64_t v7 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412802;
      uint64_t v21 = v5;
      __int16 v22 = 2112;
      uint64_t v23 = v6;
      __int16 v24 = 2112;
      uint64_t v25 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
    }
  }
}

void sub_1005AE07C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1005AE0C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  uint64_t result = sub_1002FA380((uint64_t)off_1009F8780, *(void *)(v2 + 128), *(void **)(a1 + 32));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1005AE12C(uint64_t a1)
{
  uint64_t v23 = *(void *)(a1 + 48);
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v30 objects:v37 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v31;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v31 != v4) {
          objc_enumerationMutation(v2);
        }
        uint64_t v6 = *(void **)(*((void *)&v30 + 1) + 8 * (void)v5);
        uint64_t v7 = *(void **)(a1 + 40);
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
        }
        uint64_t v8 = off_1009F7ED8;
        sub_10004191C(__p, (char *)[v6 UTF8String]);
        xpc_object_t v9 = sub_1006BDE30((uint64_t)v8, (uint64_t)__p);
        [v7 addObjectsFromArray:v9];

        if (v29 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id v3 = [v2 countByEnumeratingWithState:&v30 objects:v37 count:16];
    }
    while (v3);
  }

  if (*(void *)(a1 + 40))
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    sub_1006BEDA4((uint64_t)off_1009F7ED8);
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    id v10 = *(id *)(a1 + 40);
    id v11 = [v10 countByEnumeratingWithState:&v24 objects:v36 count:16];
    if (v11)
    {
      uint64_t v12 = *(void *)v25;
      do
      {
        __int16 v13 = 0;
        do
        {
          if (*(void *)v25 != v12) {
            objc_enumerationMutation(v10);
          }
          id v14 = *(void **)(*((void *)&v24 + 1) + 8 * (void)v13);
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
          }
          if (!sub_1006BB9D4((uint64_t)off_1009F7ED8, v14))
          {
            uint64_t v16 = qword_100A19EC8;
            if (!os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
              goto LABEL_30;
            }
            *(_DWORD *)long long buf = 138412290;
            uint64_t v35 = v14;
            long long v17 = v16;
            long long v18 = "Device %@ does not exist";
            goto LABEL_33;
          }
          if (qword_1009F8788 != -1) {
            dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
          }
          if (sub_1002F56BC((uint64_t)off_1009F8780, *(void *)(v23 + 128), v14))
          {
            xpc_object_t v15 = sub_10002FB38(v14, *(unsigned __int8 *)(v23 + 168), *(_DWORD *)(v23 + 80));
            xpc_array_append_value(*(xpc_object_t *)(a1 + 56), v15);
            xpc_release(v15);
            goto LABEL_30;
          }
          uint64_t v19 = qword_100A19EC8;
          if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138412290;
            uint64_t v35 = v14;
            long long v17 = v19;
            long long v18 = "Cannot access device %@";
LABEL_33:
            _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, v18, buf, 0xCu);
          }
LABEL_30:
          __int16 v13 = (char *)v13 + 1;
        }
        while (v11 != v13);
        id v20 = [v10 countByEnumeratingWithState:&v24 objects:v36 count:16];
        id v11 = v20;
      }
      while (v20);
    }
  }
  xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 64));
  __int16 v22 = reply;
  if (reply)
  {
    xpc_dictionary_set_value(reply, "kCBMsgArgDevices", *(xpc_object_t *)(a1 + 56));
    xpc_connection_send_message(*(xpc_connection_t *)(v23 + 16), v22);
    xpc_release(v22);
  }
  xpc_release(*(xpc_object_t *)(a1 + 56));
}

void sub_1005AE508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  _Unwind_Resume(a1);
}

void sub_1005AE55C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  id v3 = *(void **)(a1 + 32);
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
  }
  uint64_t v4 = sub_1006BE280((uint64_t)off_1009F7ED8, *(void **)(a1 + 40));
  [v3 addObjectsFromArray:v4];

  if (*(void *)(a1 + 32))
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    sub_1006BEDA4((uint64_t)off_1009F7ED8);
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    id v5 = *(id *)(a1 + 32);
    id v6 = [v5 countByEnumeratingWithState:&v17 objects:v23 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v18;
      do
      {
        uint64_t v8 = 0;
        do
        {
          if (*(void *)v18 != v7) {
            objc_enumerationMutation(v5);
          }
          xpc_object_t v9 = *(void **)(*((void *)&v17 + 1) + 8 * (void)v8);
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
          }
          if (!sub_1006BB9D4((uint64_t)off_1009F7ED8, v9))
          {
            uint64_t v11 = qword_100A19EC8;
            if (!os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
              goto LABEL_21;
            }
            *(_DWORD *)long long buf = 138412290;
            __int16 v22 = v9;
            uint64_t v12 = v11;
            __int16 v13 = "Device %@ does not exist";
            goto LABEL_24;
          }
          if (qword_1009F8788 != -1) {
            dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
          }
          if (sub_1002F56BC((uint64_t)off_1009F8780, *(void *)(v2 + 128), v9))
          {
            xpc_object_t v10 = sub_10002FB38(v9, *(unsigned __int8 *)(v2 + 168), *(_DWORD *)(v2 + 80));
            xpc_array_append_value(*(xpc_object_t *)(a1 + 64), v10);
            xpc_release(v10);
            goto LABEL_21;
          }
          uint64_t v14 = qword_100A19EC8;
          if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138412290;
            __int16 v22 = v9;
            uint64_t v12 = v14;
            __int16 v13 = "Cannot access device %@";
LABEL_24:
            _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, v13, buf, 0xCu);
          }
LABEL_21:
          uint64_t v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        id v15 = [v5 countByEnumeratingWithState:&v17 objects:v23 count:16];
        id v6 = v15;
      }
      while (v15);
    }
  }
  uint64_t v16 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  if (v16)
  {
    xpc_dictionary_set_value(v16, "kCBMsgArgDevices", *(xpc_object_t *)(a1 + 64));
    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), *(xpc_object_t *)(*(void *)(*(void *)(a1 + 48) + 8) + 24));
    xpc_release(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 48) + 8) + 24));
  }
  xpc_release(*(xpc_object_t *)(a1 + 64));
}

void sub_1005AE880(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005AE8B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int v47 = 0;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v42 = 0u;
  if (qword_1009F7ED0 != -1) {
    dispatch_once(&qword_1009F7ED0, &stru_1009B7A28);
  }
  sub_10070FA68(qword_1009F7EC8, *(void **)(a1 + 32), (uint64_t)&v42);
  __int16 v41 = 0;
  int bytes = 0;
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B7B28);
  }
  sub_1004E219C((uint64_t)off_1009F8068, (uint64_t)&bytes);
  uint64_t v38 = 0;
  int v39 = 0;
  if (qword_1009F7ED0 != -1) {
    dispatch_once(&qword_1009F7ED0, &stru_1009B7A28);
  }
  sub_1000335D8(&v38, (const void *)(qword_1009F7EC8 + 184), 0x10uLL);
  int64_t v3 = BYTE8(v46);
  int v36 = *(_DWORD *)((char *)&v46 + 9);
  __int16 v37 = *(_WORD *)((char *)&v46 + 13);
  int v34 = 0;
  uint64_t v35 = 0;
  sub_1000335D8(&v34, &v42, 0x10uLL);
  long long v32 = 0;
  long long v33 = 0;
  sub_1000335D8(&v32, (char *)&v43 + 12, 0x10uLL);
  long long v30 = 0;
  long long v31 = 0;
  sub_1000335D8(&v30, (char *)&v43 + 4, 8uLL);
  uint64_t v28 = 0;
  char v29 = 0;
  sub_1000335D8(&v28, &v45, 8uLL);
  long long v26 = 0;
  long long v27 = 0;
  sub_1000335D8(&v26, (char *)&v45 + 8, 0x10uLL);
  long long v24 = 0;
  long long v25 = 0;
  sub_1000335D8(&v24, (char *)&v44 + 14, 2uLL);
  __int16 v22 = 0;
  uint64_t v23 = 0;
  sub_1000335D8(&v22, (char *)&v43 + 2, 2uLL);
  xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 48));
  id v5 = reply;
  if (reply)
  {
    xpc_dictionary_set_data(reply, "kCBMsgArgAddressString", &bytes, 6uLL);
    id v6 = (const void *)sub_10004A6E4((uint64_t)&v38);
    size_t v7 = sub_100045F00((uint64_t)&v38);
    xpc_dictionary_set_data(v5, "kCBMsgArgLocalIRK", v6, v7);
    uint64_t v8 = (const void *)sub_10004A6E4((uint64_t)&v34);
    size_t v9 = sub_100045F00((uint64_t)&v34);
    xpc_dictionary_set_data(v5, "kCBMsgArgRemoteLTK", v8, v9);
    xpc_object_t v10 = (const void *)sub_10004A6E4((uint64_t)&v22);
    size_t v11 = sub_100045F00((uint64_t)&v22);
    xpc_dictionary_set_data(v5, "kCBMsgArgRemoteEdiv", v10, v11);
    uint64_t v12 = (const void *)sub_10004A6E4((uint64_t)&v30);
    size_t v13 = sub_100045F00((uint64_t)&v30);
    xpc_dictionary_set_data(v5, "kCBMsgArgRemoteRand", v12, v13);
    uint64_t v14 = (const void *)sub_10004A6E4((uint64_t)&v32);
    size_t v15 = sub_100045F00((uint64_t)&v32);
    xpc_dictionary_set_data(v5, "kCBMsgArgLocalLTK", v14, v15);
    uint64_t v16 = (const void *)sub_10004A6E4((uint64_t)&v24);
    size_t v17 = sub_100045F00((uint64_t)&v24);
    xpc_dictionary_set_data(v5, "kCBMsgArgLocalEdiv", v16, v17);
    long long v18 = (const void *)sub_10004A6E4((uint64_t)&v28);
    size_t v19 = sub_100045F00((uint64_t)&v28);
    xpc_dictionary_set_data(v5, "kCBMsgArgLocalRand", v18, v19);
    long long v20 = (const void *)sub_10004A6E4((uint64_t)&v26);
    size_t v21 = sub_100045F00((uint64_t)&v26);
    xpc_dictionary_set_data(v5, "kCBMsgArgRemoteIRK", v20, v21);
    xpc_dictionary_set_data(v5, "kCBMsgArgRemoteAddress", &v36, 6uLL);
    xpc_dictionary_set_int64(v5, "kCBMsgArgRemoteAddressType", v3);
    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), v5);
    xpc_release(v5);
  }
  __int16 v22 = &off_100998428;
  if (v23) {
    sub_1000368F4(v23);
  }
  long long v24 = &off_100998428;
  if (v25) {
    sub_1000368F4(v25);
  }
  long long v26 = &off_100998428;
  if (v27) {
    sub_1000368F4(v27);
  }
  uint64_t v28 = &off_100998428;
  if (v29) {
    sub_1000368F4(v29);
  }
  long long v30 = &off_100998428;
  if (v31) {
    sub_1000368F4(v31);
  }
  long long v32 = &off_100998428;
  if (v33) {
    sub_1000368F4(v33);
  }
  int v34 = &off_100998428;
  if (v35) {
    sub_1000368F4(v35);
  }
  uint64_t v38 = &off_100998428;
  if (v39) {
    sub_1000368F4(v39);
  }
}

void sub_1005AEDC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, atomic_uint *a12, uint64_t a13, atomic_uint *a14, uint64_t a15, atomic_uint *a16, uint64_t a17, atomic_uint *a18, uint64_t a19, atomic_uint *a20,uint64_t a21,atomic_uint *a22,uint64_t a23,uint64_t a24,atomic_uint *a25)
{
  if (a12) {
    sub_1000368F4(a12);
  }
  if (a14) {
    sub_1000368F4(a14);
  }
  if (a16) {
    sub_1000368F4(a16);
  }
  if (a18) {
    sub_1000368F4(a18);
  }
  if (a20) {
    sub_1000368F4(a20);
  }
  if (a22) {
    sub_1000368F4(a22);
  }
  if (a25) {
    sub_1000368F4(a25);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005AEF6C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  if (qword_1009F7F10 != -1) {
    dispatch_once(&qword_1009F7F10, &stru_1009B7A88);
  }
  uint64_t v2 = sub_10063CC9C(qword_1009F7F08);
  id v3 = [v2 countByEnumeratingWithState:&v17 objects:v25 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v18;
    do
    {
      id v5 = 0;
      do
      {
        if (*(void *)v18 != v4) {
          objc_enumerationMutation(v2);
        }
        id v6 = *(void **)(*((void *)&v17 + 1) + 8 * (void)v5);
        if (qword_1009FB240 != -1) {
          dispatch_once(&qword_1009FB240, &stru_1009B7C08);
        }
        if (!sub_1004C063C(qword_1009FB238, v6))
        {
          uint64_t v8 = qword_100A19EC8;
          if (!os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
            goto LABEL_30;
          }
          *(_DWORD *)long long buf = 138412290;
          __int16 v22 = v6;
          size_t v9 = v8;
          xpc_object_t v10 = "Device %@ is not connected";
          goto LABEL_25;
        }
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
        }
        if ((sub_10002F7F0((uint64_t)off_1009F7ED8, v6, *(void **)(v1 + 96), *(void **)(v1 + 48)) & 1) == 0)
        {
          uint64_t v12 = qword_100A19EC8;
          if (!os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
            goto LABEL_30;
          }
          size_t v13 = *(void **)(v1 + 96);
          *(_DWORD *)long long buf = 138412546;
          __int16 v22 = v13;
          __int16 v23 = 2112;
          long long v24 = v6;
          size_t v9 = v12;
          xpc_object_t v10 = "Bundle %@ is not allowed to access device %@";
          uint32_t v11 = 22;
          goto LABEL_28;
        }
        if (qword_1009F8788 != -1) {
          dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
        }
        if (sub_1002F56BC((uint64_t)off_1009F8780, *(void *)(v1 + 128), v6))
        {
          if (*(void *)(a1 + 40) && *(void *)(a1 + 48) == *(void *)(a1 + 56)) {
            goto LABEL_22;
          }
          if (qword_1009F7F10 != -1) {
            dispatch_once(&qword_1009F7F10, &stru_1009B7A88);
          }
          if (sub_10063C4FC(qword_1009F7F08, v6, (long long **)(a1 + 48), *(unsigned __int8 *)(v1 + 183), *(unsigned int *)(v1 + 196), 0))
          {
LABEL_22:
            xpc_object_t v7 = sub_10002FB38(v6, *(unsigned __int8 *)(v1 + 168), *(_DWORD *)(v1 + 80));
            xpc_array_append_value(*(xpc_object_t *)(a1 + 72), v7);
            xpc_release(v7);
          }
        }
        else
        {
          uint64_t v14 = qword_100A19EC8;
          if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138412290;
            __int16 v22 = v6;
            size_t v9 = v14;
            xpc_object_t v10 = "Session cannot access device %@";
LABEL_25:
            uint32_t v11 = 12;
LABEL_28:
            _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, v10, buf, v11);
          }
        }
LABEL_30:
        id v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id v15 = [v2 countByEnumeratingWithState:&v17 objects:v25 count:16];
      id v3 = v15;
    }
    while (v15);
  }
}

void sub_1005AF300(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005AF324(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  long long v19 = 0u;
  memset(v20, 0, sizeof(v20));
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  int64_t value = 0;
  uint64_t v3 = *(void *)sub_10003FB34();
  int v4 = (*(uint64_t (**)(void))(v3 + 3552))();
  xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 40));
  if (reply)
  {
    id v6 = reply;
    xpc_dictionary_set_int64(reply, "kCBUsageStatsLePercent", WORD4(v9) + (unint64_t)WORD2(v9));
    xpc_dictionary_set_int64(v6, "kCBUsageStatsClPercent", WORD5(v9) + (unint64_t)WORD3(v9));
    if (qword_1009F8158 != -1) {
      dispatch_once(&qword_1009F8158, &stru_1009B7C28);
    }
    BOOL v7 = sub_1004FB404(off_1009F8150);
    xpc_dictionary_set_int64(v6, "kCBUsageStatsIsAudioStreaming", v7);
    xpc_dictionary_set_int64(v6, "kCBUsageStatsTimeStampNsMonotonic", value);
    xpc_dictionary_set_int64(v6, "kCBMsgArgResult", v4);
    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), v6);
    xpc_release(v6);
  }
}

uint64_t sub_1005AF4BC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  uint64_t result = sub_100308AC4((uint64_t)off_1009F8780, *(void *)(v2 + 128), *(void **)(a1 + 32), *(unsigned __int8 *)(a1 + 56), *(void *)(a1 + 64) != 0);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1005AF538(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009B7AC8);
  }
  uint64_t v3 = sub_100685FB4((uint64_t)off_1009F7EB8);
  id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v10;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v3);
        }
        BOOL v7 = *(void **)(*((void *)&v9 + 1) + 8 * (void)v6);
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
        }
        if (sub_10002F7F0((uint64_t)off_1009F7ED8, v7, *(void **)(v2 + 96), *(void **)(v2 + 48)))
        {
          xpc_object_t v8 = sub_10002FB38(v7, *(unsigned __int8 *)(v2 + 168), *(_DWORD *)(v2 + 80));
          xpc_array_append_value(*(xpc_object_t *)(a1 + 40), v8);
          xpc_release(v8);
        }
        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v4);
  }
}

void sub_1005AF6DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005AF700(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(int *)(v2 + 80) < 1 || *(uint64_t *)(a1 + 48) < 1)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_100780190();
    }
    int64_t v3 = 0;
  }
  else
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    int64_t v3 = sub_1006C8B54((uint64_t)off_1009F7ED8, *(unsigned __int16 *)(a1 + 48));
  }
  id v4 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v4)
  {
    if (*(uint64_t *)(a1 + 48) >= 1)
    {
      xpc_dictionary_set_int64(v4, "kCBMsgArgResultDeviceCount", v3);
      id v4 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    }
    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), v4);
    xpc_release(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
  }
}

void sub_1005AF810(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  id v6 = a3;
  if (v6)
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    if (sub_10002F7F0((uint64_t)off_1009F7ED8, v6, *(void **)(a1 + 96), *(void **)(a1 + 48)))
    {
      if (qword_1009F8788 != -1) {
        dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
      }
      if (sub_1002F56BC((uint64_t)off_1009F8780, *(void *)(a1 + 128), v6))
      {
        xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
        xpc_object_t v8 = qword_100A19EC8;
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
        {
          long long v9 = (void *)(a1 + 56);
          if (*(char *)(a1 + 79) < 0) {
            long long v9 = (void *)*v9;
          }
          *(_DWORD *)long long buf = 138412546;
          *(void *)&uint8_t buf[4] = v6;
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&uint8_t buf[14] = v9;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Sending 'connection completed' event for device \"%@\" to session \"%{public}s\"", buf, 0x16u);
        }
        id v10 = v6;
        *(void *)long long buf = 0;
        *(void *)&uint8_t buf[8] = 0;
        [v10 getUUIDBytes:buf];
        xpc_dictionary_set_uuid(v7, "kCBMsgArgDeviceUUID", buf);

        xpc_dictionary_set_int64(v7, "kCBMsgArgResult", a4);
        if (!a4)
        {
          if (qword_1009F7EC0 != -1) {
            dispatch_once(&qword_1009F7EC0, &stru_1009B7AC8);
          }
          long long v11 = off_1009F7EB8;
          sub_1000305AC(buf, v10);
          unsigned int v12 = sub_100030818((uint64_t)v11, buf);
          xpc_dictionary_set_int64(v7, "kCBMsgArgConnectionRole", v12);
          if (qword_1009FB230 != -1) {
            dispatch_once(&qword_1009FB230, &stru_1009B7BC8);
          }
          unsigned int v13 = sub_100031120(qword_1009FB228, v10);
          xpc_dictionary_set_int64(v7, "kCBMsgArgATTMTU", v13);
          if (qword_1009F7EC0 != -1) {
            dispatch_once(&qword_1009F7EC0, &stru_1009B7AC8);
          }
          long long v14 = off_1009F7EB8;
          sub_1000305AC(buf, v10);
          if (sub_1000307A4((uint64_t)v14, buf)) {
            int64_t v15 = 2;
          }
          else {
            int64_t v15 = 1;
          }
          xpc_dictionary_set_int64(v7, "kCBMsgArgConnectionTransport", v15);
          if (*(unsigned char *)(a1 + 168))
          {
            if (qword_1009F7EC0 != -1) {
              dispatch_once(&qword_1009F7EC0, &stru_1009B7AC8);
            }
            long long v16 = off_1009F7EB8;
            sub_1000305AC(buf, v10);
            char v17 = sub_1000306F0((uint64_t)v16, buf);
            xpc_dictionary_set_BOOL(v7, "kCBMsgArgIsLinkEncrypted", v17);
          }
          *(_DWORD *)long long buf = 0;
          if (qword_1009FB240 != -1) {
            dispatch_once(&qword_1009FB240, &stru_1009B7C08);
          }
          uint64_t v18 = qword_1009FB238;
          sub_1000305AC(v22, v10);
          if (!sub_1004C06DC(v18, v22, buf)) {
            xpc_dictionary_set_int64(v7, "kCBMsgArgsTransport", *(unsigned int *)buf);
          }
        }
        sub_1000173FC(a1, 85, v7, 1);
      }
      else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
      {
        sub_10077F678();
      }
    }
    else
    {
      long long v19 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v20 = *(void *)(a1 + 96);
        uint64_t v21 = *(void *)(a1 + 48);
        *(_DWORD *)long long buf = 138412802;
        *(void *)&uint8_t buf[4] = v20;
        *(_WORD *)&unsigned char buf[12] = 2112;
        *(void *)&uint8_t buf[14] = v21;
        __int16 v24 = 2112;
        id v25 = v6;
        _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_1007801FC();
  }
}

void sub_1005AFC78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005AFCB0(uint64_t a1, uint64_t a2, void *a3, int a4)
{
}

void sub_1005AFCB8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  sub_1000305AC(uu2, v4);
  uint64_t v5 = (uint64_t **)(a1 + 200);
  uint64_t v6 = sub_1000308C0(a1 + 200, uu2);
  uint64_t v7 = v6;
  if (a1 + 208 != v6)
  {
    xpc_object_t v8 = *(void **)(v6 + 48);
    long long v9 = (void *)(v6 + 56);
    if (v8 != (void *)(v6 + 56))
    {
      do
      {
        uint64_t v10 = v8[4];
        if (v10) {
          (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
        }
        long long v11 = (void *)v8[1];
        if (v11)
        {
          do
          {
            unsigned int v12 = v11;
            long long v11 = (void *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            unsigned int v12 = (void *)v8[2];
            BOOL v13 = *v12 == (void)v8;
            xpc_object_t v8 = v12;
          }
          while (!v13);
        }
        xpc_object_t v8 = v12;
      }
      while (v12 != v9);
    }
    sub_1005B8E10(v5, v7);
  }
}

void sub_1005AFDD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005AFDF0(uint64_t a1, uint64_t a2, void *a3)
{
}

void sub_1005AFDF8(uint64_t a1, uint64_t a2, void *a3, BOOL a4)
{
  id v6 = a3;
  if (*(unsigned char *)(a1 + 168))
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    char v7 = sub_10002F7F0((uint64_t)off_1009F7ED8, v6, *(void **)(a1 + 96), *(void **)(a1 + 48));
    xpc_object_t v8 = qword_100A19EC8;
    if (v7)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
      {
        long long v9 = (void *)(a1 + 56);
        if (*(char *)(a1 + 79) < 0) {
          long long v9 = (void *)*v9;
        }
        int v13 = 138412546;
        id v14 = v6;
        __int16 v15 = 2082;
        long long v16 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Sending 'connection state updated' event for device \"%@\" to session \"%{public}s\"", (uint8_t *)&v13, 0x16u);
      }
      xpc_object_t v10 = sub_10002FB38(v6, *(unsigned __int8 *)(a1 + 168), *(_DWORD *)(a1 + 80));
      xpc_dictionary_set_BOOL(v10, "kCBMsgArgConnectionState", a4);
      sub_1000173FC(a1, 88, v10, 1);
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
    {
      long long v11 = *(void **)(a1 + 96);
      unsigned int v12 = *(void **)(a1 + 48);
      int v13 = 138412802;
      id v14 = v11;
      __int16 v15 = 2112;
      long long v16 = v12;
      __int16 v17 = 2112;
      id v18 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", (uint8_t *)&v13, 0x20u);
    }
  }
}

void sub_1005AFFBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005AFFD8(uint64_t a1, uint64_t a2, void *a3, BOOL a4)
{
}

void sub_1005AFFE0(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  xpc_object_t xdict = xpc_dictionary_create(0, 0, 0);
  xxpc_object_t array = xpc_array_create(0, 0);
  if (a3)
  {
    xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
    if (*(void *)(a3 + 16) != *(void *)(a3 + 8))
    {
      *(void *)&uint8_t buf[8] = 0;
      *(void *)&uint8_t buf[16] = 0;
      *(void *)long long buf = &buf[8];
      xpc_object_t v7 = sub_1004F1520((unsigned __int8 **)(a3 + 8), (uint64_t)buf);
      sub_1000486F0((uint64_t)buf, *(void **)&buf[8]);
      xpc_dictionary_set_value(v6, "kCBMsgArgUUIDs", v7);
      xpc_release(v7);
    }
    if (*(unsigned char *)a3) {
      xpc_dictionary_set_BOOL(v6, "kCBScanOptionAllowDuplicates", 1);
    }
    uint64_t v8 = *(void *)(a3 + 32);
    uint64_t v9 = *(void *)(a3 + 40);
    xpc_object_t v10 = (unsigned __int8 **)(a3 + 32);
    if (v9 != v8)
    {
      *(void *)&uint8_t buf[8] = 0;
      *(void *)&uint8_t buf[16] = 0;
      *(void *)long long buf = &buf[8];
      xpc_object_t v11 = sub_1004F1520(v10, (uint64_t)buf);
      sub_1000486F0((uint64_t)buf, *(void **)&buf[8]);
      xpc_dictionary_set_value(xdict, "kCBScanOptionSolicitedServiceUUIDs", v11);
      xpc_release(v11);
    }
    xpc_dictionary_set_value(xdict, "kCBMsgArgOptions", v6);
    xpc_release(v6);
  }
  for (unint64_t i = *a2; i != a2[1]; ++i)
  {
    uint64_t v13 = *i;
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    uint64_t v14 = (uint64_t)off_1009F7ED8;
    __int16 v15 = sub_100031234((const unsigned __int8 *)v13);
    LOBYTE(v14) = sub_10002F7F0(v14, v15, *(void **)(a1 + 96), *(void **)(a1 + 48));

    if ((v14 & 1) == 0)
    {
      uint64_t v20 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v21 = *(void *)(a1 + 96);
        uint64_t v22 = *(void *)(a1 + 48);
        __int16 v23 = sub_100031234((const unsigned __int8 *)v13);
        *(_DWORD *)long long buf = 138412802;
        *(void *)&uint8_t buf[4] = v21;
        *(_WORD *)&unsigned char buf[12] = 2112;
        *(void *)&uint8_t buf[14] = v22;
        *(_WORD *)&unsigned char buf[22] = 2112;
        long long v43 = v23;
        _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
      }
      continue;
    }
    memset(buf, 0, sizeof(buf));
    sub_100040550(buf, v13 + 24);
    xpc_object_t v16 = xpc_dictionary_create(0, 0, 0);
    string = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    __int16 v17 = off_1009F7ED8;
    id v18 = sub_100031234((const unsigned __int8 *)v13);
    sub_10003093C((uint64_t)v17, v18, (uint64_t)&string);

    if (SHIBYTE(v41) < 0)
    {
      if (v40)
      {
        p_string = string;
        goto LABEL_22;
      }
    }
    else if (HIBYTE(v41))
    {
      p_string = (const char *)&string;
LABEL_22:
      xpc_dictionary_set_string(v16, "kCBMsgArgName", p_string);
    }
    xpc_dictionary_set_uuid(v16, "kCBMsgArgDeviceUUID", (const unsigned __int8 *)v13);
    if (qword_1009FB230 != -1) {
      dispatch_once(&qword_1009FB230, &stru_1009B7BC8);
    }
    uint64_t v24 = qword_1009FB228;
    id v25 = sub_100031234((const unsigned __int8 *)v13);
    unsigned int v26 = sub_100031120(v24, v25);
    xpc_dictionary_set_int64(v16, "kCBMsgArgATTMTU", v26);

    xpc_dictionary_set_BOOL(v16, "kCBMsgArgState", *(unsigned char *)(v13 + 16));
    xpc_object_t v27 = xpc_array_create(0, 0);
    for (uint64_t j = *(void *)(v13 + 48); j != *(void *)(v13 + 56); j += 18)
      xpc_array_set_int64(v27, 0xFFFFFFFFFFFFFFFFLL, *(unsigned __int16 *)(j + 16));
    xpc_dictionary_set_value(v16, "kCBMsgArgSubscribedHandles", v27);
    xpc_release(v27);
    char v29 = sub_100031234((const unsigned __int8 *)v13);
    sub_1005A107C(a1, (uint64_t **)buf, v29);

    long long __p = 0;
    __dst = 0;
    uint64_t v38 = 0;
    long long v30 = *(const void **)buf;
    int64_t v31 = *(void *)&buf[8] - *(void *)buf;
    if (*(void *)&buf[8] != *(void *)buf)
    {
      sub_1000405B8(&__p, v31 >> 3);
      long long v32 = (char *)__dst;
      memmove(__dst, v30, v31);
      __dst = &v32[8 * (v31 >> 3)];
    }
    xpc_object_t v33 = sub_1003BFD00((uint64_t **)&__p);
    if (__p)
    {
      __dst = __p;
      operator delete(__p);
    }
    xpc_dictionary_set_value(v16, "kCBMsgArgServices", v33);
    xpc_release(v33);
    xpc_array_append_value(xarray, v16);
    xpc_release(v16);
    if (SHIBYTE(v41) < 0) {
      operator delete(string);
    }
    if (*(void *)buf)
    {
      *(void *)&uint8_t buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
  }
  xpc_dictionary_set_value(xdict, "kCBMsgArgDevices", xarray);
  sub_1000173FC(a1, 92, xdict, 1);
  xpc_release(xarray);
}

void sub_1005B0510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,void *a23)
{
}

void sub_1005B05BC(uint64_t a1, uint64_t **a2, uint64_t a3)
{
}

void sub_1005B05C4(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, int a6)
{
  id v10 = a3;
  if (*(unsigned char *)(a1 + 168))
  {
    xpc_object_t v11 = xpc_dictionary_create(0, 0, 0);
    id v12 = v10;
    uint64_t v13 = v12;
    if (v12)
    {
      *(void *)uuid = 0;
      uint64_t v15 = 0;
      [v12 getUUIDBytes:uuid];
      xpc_dictionary_set_uuid(v11, "kCBMsgArgDeviceUUID", uuid);
    }

    xpc_dictionary_set_double(v11, "kCBMsgArgConnectionInterval", (double)a4 * 1.25);
    xpc_dictionary_set_int64(v11, "kCBMsgArgConnectionLatency", a5);
    xpc_dictionary_set_double(v11, "kCBMsgArgSupervisionTimeout", (double)(10 * a6));
    sub_1000173FC(a1, 167, v11, 1);
  }
}

void sub_1005B06F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005B071C(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, int a6)
{
}

void sub_1005B0724(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  id v14 = a3;
  xpc_object_t v15 = xpc_dictionary_create(0, 0, 0);
  id v16 = v14;
  __int16 v17 = v16;
  if (v16)
  {
    *(void *)uuid = 0;
    uint64_t v19 = 0;
    [v16 getUUIDBytes:uuid];
    xpc_dictionary_set_uuid(v15, "kCBMsgArgDeviceUUID", uuid);
  }

  xpc_dictionary_set_uint64(v15, "kCBMsgArgTimeOfDay", a4);
  xpc_dictionary_set_uint64(v15, "kCBMsgArgLocalRefTime", a5);
  xpc_dictionary_set_uint64(v15, "kCBMsgArgRemoteRefTime", a6);
  xpc_dictionary_set_uint64(v15, "kCBMsgArgTimeToSend", a7);
  xpc_dictionary_set_int64(v15, "kCBMsgArgGMTDelta", a8);
  sub_1000173FC(a1, 182, v15, 1);
}

void sub_1005B0878(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005B089C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
}

void sub_1005B08A4(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  id v6 = a3;
  if (*(unsigned char *)(a1 + 168))
  {
    xpc_object_t v7 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = (void *)(a1 + 56);
      if (*(char *)(a1 + 79) < 0) {
        uint64_t v8 = (void *)*v8;
      }
      *(_DWORD *)long long buf = 138412546;
      id v15 = v6;
      __int16 v16 = 2082;
      __int16 v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Sending 'host state updated' event for device \"%@\" to session \"%{public}s\"", buf, 0x16u);
    }
    if (a4) {
      uint64_t v9 = 2;
    }
    else {
      uint64_t v9 = 1;
    }
    id v10 = +[NSNumber numberWithLongLong:v9, @"kCBMsgArgDeviceUUID", @"kCBMsgArgState", v6];
    v13[1] = v10;
    xpc_object_t v11 = +[NSDictionary dictionaryWithObjects:v13 forKeys:&v12 count:2];
    sub_100017388(a1, 165, v11);
  }
}

void sub_1005B09F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005B0A28(uint64_t a1, uint64_t a2, void *a3, int a4)
{
}

void sub_1005B0A30(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (*(unsigned char *)(a1 + 169))
  {
    xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v7 = v6;
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v8 = (const char *)a2;
    }
    else {
      uint64_t v8 = *(const char **)a2;
    }
    xpc_dictionary_set_string(v6, "kCBMsgArgName", v8);
    xpc_dictionary_set_int64(v7, "kCBMsgArgState", a3);
    sub_1000173FC(a1, 91, v7, 1);
  }
}

void sub_1005B0ADC(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t sub_1005B0AE4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  uint64_t result = sub_1002F8FA0((uint64_t)off_1009F8780, *(void *)(v2 + 128), *(void **)(a1 + 32), *(unsigned char *)(v2 + 181));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1005B0B54()
{
}

void sub_1005B0DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005B0E2C()
{
}

void sub_1005B0FEC()
{
}

char *sub_1005B1018(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  uint64_t v2 = a1 + 56;
  *(void *)(v2 + 16) = 0;
  return sub_100037564((char *)v2, *(long long **)(a2 + 56), *(long long **)(a2 + 64), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2));
}

void sub_1005B1040(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
}

void sub_1005B1058()
{
}

void sub_1005B1228()
{
}

void sub_1005B1254()
{
}

void sub_1005B1444()
{
}

void sub_1005B1470(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = sub_1005A1438(v2, *(void **)(a1 + 32), *(unsigned __int16 *)(a1 + 48));
  uint64_t v4 = *(void *)(a1 + 56);
  if (!v4) {
    operator new();
  }
  uint64_t v8 = 0;
  if (!v3)
  {
    if (qword_1009F7F10 != -1) {
      dispatch_once(&qword_1009F7F10, &stru_1009B7A88);
    }
    uint64_t v5 = qword_1009F7F08;
    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
    }
    if (off_1009F8780) {
      xpc_object_t v6 = (char *)off_1009F8780 + 48;
    }
    else {
      xpc_object_t v6 = 0;
    }
    uint64_t v7 = *(void *)(v2 + 128);
    sub_1000305AC(uu1, *(void *)(a1 + 32));
    sub_10063E350(v5, (uint64_t)v6, v7, uu1, v4 == 0, *(unsigned __int16 *)(a1 + 48), *(unsigned __int16 *)(a1 + 64));
  }
}

void sub_1005B1698()
{
}

void sub_1005B16C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = &off_100998428;
  *(void *)(a1 + 80) = v3;
  if (v3) {
    sub_100037354(v3);
  }
}

void sub_1005B16F8(uint64_t a1)
{
  *(void *)(a1 + 72) = &off_100998428;
  uint64_t v1 = *(atomic_uint **)(a1 + 80);
  if (v1) {
    sub_1000368F4(v1);
  }
}

void sub_1005B1728()
{
}

void sub_1005B1938()
{
}

void sub_1005B1964()
{
}

void sub_1005B1B50()
{
}

void sub_1005B1B7C()
{
}

void sub_1005B1D68()
{
}

void sub_1005B1D94()
{
}

void sub_1005B1F84()
{
}

void sub_1005B1FB0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1009F7F10 != -1) {
    dispatch_once(&qword_1009F7F10, &stru_1009B7A88);
  }
  uint64_t v3 = qword_1009F7F08;
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  if (off_1009F8780) {
    uint64_t v4 = (char *)off_1009F8780 + 48;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void *)(v2 + 128);
  sub_1000305AC(v7, *(void *)(a1 + 32));
  sub_10004191C(__p, (char *)[*(id *)(a1 + 40) UTF8String]);
  sub_10063EC3C(v3, (uint64_t)v4, v5, v7, (uint64_t *)__p);
}

void sub_1005B2118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005B213C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (*(int *)(v2 + 80) < 1)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_1007802D8();
    }
    int64_t v3 = 12;
  }
  else if (*(void *)(a1 + 32))
  {
    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
    }
    int64_t v3 = (int)sub_100308B54((uint64_t)off_1009F8780, *(void *)(v2 + 128), *(void **)(a1 + 32), *(unsigned __int8 *)(a1 + 64), *(void **)(a1 + 40));
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_1007802A4();
    }
    int64_t v3 = 8;
  }
  uint64_t v4 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  if (v4)
  {
    xpc_dictionary_set_int64(v4, "kCBMsgArgResult", v3);
    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), *(xpc_object_t *)(*(void *)(*(void *)(a1 + 48) + 8) + 24));
    xpc_release(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 48) + 8) + 24));
  }
}

uint64_t sub_1005B2260(uint64_t a1, int a2, xpc_object_t object)
{
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_dictionary)
  {
    id v6 = objc_alloc_init((Class)NSMutableDictionary);
    uint64_t v7 = sub_1002D4930(object, "kCBMatchActionRulePeerAddress");
    uint64_t v8 = sub_1002D4930(object, "kCBMatchActionRuleLocalToken");
    uint64_t v9 = v8;
    if (v8 && [v8 length] == (id)6)
    {
      if (v7 && [v7 length] == (id)6)
      {
        [v6 setObject:v7 forKeyedSubscript:@"MatchActionRulePeerAddress"];
        [v6 setObject:v9 forKeyedSubscript:@"MatchActionRuleLocalToken"];
        [v6 setObject:&off_1009E0F50 forKeyedSubscript:@"MatchActionRuleHopValue"];
        id v10 = *(void **)(a1 + 32);
        id v11 = [v6 copy];
        [v10 addObject:v11];

        uint64_t v5 = 1;
LABEL_13:

        return v5;
      }
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_100780340();
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
    {
      sub_10078030C();
    }
    uint64_t v5 = 0;
    goto LABEL_13;
  }
  return 0;
}

void sub_1005B23E8(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1005B2420(uint64_t a1)
{
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009B7B88);
  }
  int v2 = sub_1006DAC1C(off_1009F85C0, *(void *)(a1 + 32));
  int64_t v3 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "setMatchActionRules returned %d", (uint8_t *)v4, 8u);
  }
}

void sub_1005B2500(uint64_t a1)
{
  __dst[0] = 0;
  __dst[1] = 0;
  memcpy(__dst, [*(id *)(a1 + 32) bytes], *(void *)(a1 + 40));
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  sub_1002F66B4((uint64_t)off_1009F8780, (unsigned __int8 *)(a1 + 48), (uint64_t)__dst);
}

uint64_t sub_1005B25B0(uint64_t a1)
{
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  int v2 = off_1009F8780;

  return sub_1002F6720((uint64_t)v2, (_DWORD *)(a1 + 32));
}

void sub_1005B2614(uint64_t a1)
{
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  int v2 = off_1009F8780;
  int64_t v3 = *(void **)(a1 + 32);

  sub_1003002D8((uint64_t)v2, v3);
}

void sub_1005B2678(uint64_t a1, void *a2, int a3)
{
  id v10 = a2;
  uint64_t v5 = *(void **)(a1 + 40);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (v10)
    {
      id v7 = [v10 remoteHostID];
      xpc_dictionary_set_string(v5, "kCBMsgArgWhbRemoteControllerId", (const char *)[v7 UTF8String]);

      uint64_t v8 = *(void **)(a1 + 40);
      id v9 = [v10 identifier];
      xpc_dictionary_set_string(v8, "kCBMsgArgWhbRemoteDeviceUUID", (const char *)[v9 UTF8String]);

      uint64_t v5 = *(void **)(a1 + 40);
    }
    xpc_dictionary_set_int64(v5, "kCBMsgArgResult", a3);
    xpc_connection_send_message(*(xpc_connection_t *)(v6 + 16), *(xpc_object_t *)(a1 + 40));
    xpc_release(*(xpc_object_t *)(a1 + 40));
  }
}

void sub_1005B2770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1005B279C(id a1)
{
  if (qword_1009F8248 != -1) {
    dispatch_once(&qword_1009F8248, &stru_1009B7B48);
  }
  uint64_t v1 = off_1009F8240;

  sub_100664118((uint64_t)v1, 1, 3, 1);
}

void sub_1005B27FC(uint64_t a1)
{
  if (qword_1009F7ED0 != -1) {
    dispatch_once(&qword_1009F7ED0, &stru_1009B7A28);
  }
  uint64_t v2 = sub_10071853C(qword_1009F7EC8, 1);
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1005B2878(uint64_t a1, int a2, void *a3, char a4)
{
  id v7 = a3;
  char v13 = a4;
  uint64_t v8 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 40);
    xpc_dictionary_set_int64(v8, "kCBMsgArgResult", a2);
    if (!a2)
    {
      id v10 = objc_opt_new();
      [v10 appendBytes:&v13 length:1];
      [v10 appendData:v7];
      id v11 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      id v12 = v10;
      xpc_dictionary_set_data(v11, "kCBFastLeConnectionInfoData", [v12 bytes], (size_t)[v12 length]);
    }
    xpc_connection_send_message(*(xpc_connection_t *)(v9 + 16), *(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
    xpc_release(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
  }
}

void sub_1005B2988(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005B29A8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = (void *)(a1 + 56);
    if (*(char *)(a1 + 79) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)long long buf = 138412546;
    *(void *)&uint8_t buf[4] = v4;
    __int16 v17 = 2082;
    id v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Sending 'device name updated' event for device \"%@\" to session \"%{public}s\"", buf, 0x16u);
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
  }
  if (sub_10002F7F0((uint64_t)off_1009F7ED8, v4, *(void **)(a1 + 96), *(void **)(a1 + 48)))
  {
    CFStringRef v13 = @"kCBMsgArgDeviceUUID";
    CFStringRef v14 = @"kCBMsgArgName";
    v15[0] = v4;
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    sub_10003093C((uint64_t)off_1009F7ED8, v4, (uint64_t)buf);
    if (v19 >= 0) {
      id v7 = buf;
    }
    else {
      id v7 = *(unsigned char **)buf;
    }
    uint64_t v8 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7, v13, v14, v15[0]);
    v15[1] = v8;
    uint64_t v9 = +[NSDictionary dictionaryWithObjects:v15 forKeys:&v13 count:2];

    if (SHIBYTE(v19) < 0) {
      operator delete(*(void **)buf);
    }
    sub_100017388(a1, 178, v9);
  }
  else
  {
    id v10 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(a1 + 96);
      id v12 = *(void **)(a1 + 48);
      *(_DWORD *)long long buf = 138412802;
      *(void *)&uint8_t buf[4] = v11;
      __int16 v17 = 2112;
      id v18 = v12;
      __int16 v19 = 2112;
      id v20 = v4;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
    }
  }
}

void sub_1005B2BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

void sub_1005B2C44(uint64_t a1, uint64_t a2, void *a3)
{
}

void sub_1005B2C4C(uint64_t a1, uint64_t a2, void *a3, int a4, int a5)
{
  id v8 = a3;
  xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
  id v10 = v8;
  uint64_t v11 = v10;
  if (v10)
  {
    *(void *)uuid = 0;
    uint64_t v13 = 0;
    [v10 getUUIDBytes:uuid];
    xpc_dictionary_set_uuid(v9, "kCBMsgArgDeviceUUID", uuid);
  }

  xpc_dictionary_set_int64(v9, "kCBMsgArgData", a5);
  xpc_dictionary_set_int64(v9, "kCBMsgArgResult", a4);
  sub_1000173FC(a1, 180, v9, 1);
}

void sub_1005B2D48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005B2D6C(uint64_t a1, uint64_t a2, void *a3, int a4, int a5)
{
}

void sub_1005B2D74(uint64_t a1, uint64_t a2, void *a3, unsigned int a4)
{
  id v6 = a3;
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  id v8 = v6;
  xpc_object_t v9 = v8;
  if (v8)
  {
    *(void *)uuid = 0;
    uint64_t v11 = 0;
    [v8 getUUIDBytes:uuid];
    xpc_dictionary_set_uuid(v7, "kCBMsgArgDeviceUUID", uuid);
  }

  xpc_dictionary_set_int64(v7, "kCBMsgArgVisibleInSettings", a4);
  sub_1000173FC(a1, 185, v7, 1);
}

void sub_1005B2E58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005B2E7C(uint64_t a1, uint64_t a2, void *a3, unsigned int a4)
{
}

void sub_1005B2E84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  id v8 = (const void *)sub_10004A6E4(a3);
  size_t v9 = sub_100045F00(a3);
  xpc_dictionary_set_data(v7, "kCBMsgArgLeZone", v8, v9);
  id v10 = (const void *)sub_10004A6E4(a4);
  size_t v11 = sub_100045F00(a4);
  xpc_dictionary_set_data(v7, "kCBMsgArgLeZoneMask", v10, v11);

  sub_1000173FC(a1, 90, v7, 1);
}

void sub_1005B2F48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1005B2F50(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v8 = a3;
  v13[0] = v8;
  v12[0] = @"kCBMsgArgDeviceUUID";
  v12[1] = @"kCBTrackingOptionState";
  size_t v9 = +[NSNumber numberWithUnsignedChar:a4];
  v13[1] = v9;
  void v12[2] = @"kCBTrackingOptionType";
  id v10 = +[NSNumber numberWithUnsignedChar:a5];
  void v13[2] = v10;
  size_t v11 = +[NSDictionary dictionaryWithObjects:v13 forKeys:v12 count:3];
  sub_100017388(a1, 89, v11);
}

void sub_1005B305C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005B3098(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
}

void sub_1005B30A0(uint64_t a1, int a2, void *a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int a7, unsigned int a8, uint64_t value)
{
  id v15 = a3;
  if (*(int *)(a1 + 80) >= 1)
  {
    xpc_object_t v16 = xpc_dictionary_create(0, 0, 0);
    id v17 = v15;
    id v18 = v17;
    if (v17)
    {
      *(void *)uuid = 0;
      uint64_t v20 = 0;
      [v17 getUUIDBytes:uuid];
      xpc_dictionary_set_uuid(v16, "kCBMsgArgDeviceUUID", uuid);
    }

    xpc_dictionary_set_uint64(v16, "kCBGetControllerBTClockEventType", a4);
    xpc_dictionary_set_uint64(v16, "kCBGetControllerBTLocalClock", a5);
    xpc_dictionary_set_uint64(v16, "kCBGetControllerBTRemoteClock", a6);
    xpc_dictionary_set_uint64(v16, "kCBGetControllerBTClockSeconds", a8);
    xpc_dictionary_set_uint64(v16, "kCBGetControllerBTClockMicroSeconds", value);
    xpc_dictionary_set_uint64(v16, "kCBGetControllerBTClockEventCounter", a7);
    sub_1000173FC(a1, 210, v16, 1);
  }
}

void sub_1005B3214(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005B3238(uint64_t a1, int a2, void *a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int a7, unsigned int a8, uint64_t value)
{
}

void sub_1005B3248(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 *a4)
{
  id v6 = a3;
  if (*(int *)(a1 + 80) >= 1)
  {
    xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
    id v8 = v6;
    size_t v9 = v8;
    if (v8)
    {
      *(void *)uuid = 0;
      uint64_t v11 = 0;
      [v8 getUUIDBytes:uuid];
      xpc_dictionary_set_uuid(v7, "kCBMsgArgDeviceUUID", uuid);
    }

    xpc_dictionary_set_uint64(v7, "kCBCSConfigId", *a4);
    xpc_dictionary_set_uint64(v7, "kCBCSStartAclConnEvent", *((unsigned __int16 *)a4 + 1));
    xpc_dictionary_set_uint64(v7, "kCBCSFrequencyCompensation", a4[4]);
    xpc_dictionary_set_uint64(v7, "kCBCSProcedureDoneStatus", a4[5]);
    xpc_dictionary_set_uint64(v7, "kCBCSSubEventDoneStatus", a4[6]);
    xpc_dictionary_set_uint64(v7, "kCBCSReferencePowerLevel", a4[7]);
    xpc_dictionary_set_uint64(v7, "kCBCSNumAntennaPath", a4[8]);
    xpc_dictionary_set_uint64(v7, "kCBCSNumStepsReported", a4[9]);
    xpc_dictionary_set_data(v7, "kCBCSStepMode", a4 + 10, 0xA0uLL);
    xpc_dictionary_set_data(v7, "kCBCSStepChannel", a4 + 170, 0xA0uLL);
    xpc_dictionary_set_data(v7, "kCBCSStepDataLength", a4 + 330, 0xA0uLL);
    xpc_dictionary_set_data(v7, "kCBCSStepData", a4 + 490, 0x6400uLL);
    xpc_dictionary_set_uint64(v7, "kCBCSCurrentStepIndex", a4[26090]);
    sub_1000173FC(a1, 221, v7, 1);
  }
}

void sub_1005B343C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005B3460(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 *a4)
{
}

void sub_1005B3468(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, const void *a8, char a9, char a10, char a11, char a12, char a13, unsigned __int16 value, int value_2, unsigned __int8 value_6)
{
  id v21 = a3;
  if (*(int *)(a1 + 80) >= 1)
  {
    xpc_object_t v22 = xpc_dictionary_create(0, 0, 0);
    id v23 = v21;
    uint64_t v24 = v23;
    if (v23)
    {
      *(void *)uuid = 0;
      uint64_t v28 = 0;
      [v23 getUUIDBytes:uuid];
      xpc_dictionary_set_uuid(v22, "kCBMsgArgDeviceUUID", uuid);
    }

    *(void *)uuid = 0;
    uint64_t v28 = 0;
    sub_1000335D8(uuid, a8, a9);
    id v25 = (const void *)sub_10004A6E4((uint64_t)uuid);
    size_t v26 = sub_100045F00((uint64_t)uuid);
    xpc_dictionary_set_data(v22, "kCBGetRssiStatisticsRawData", v25, v26);
    xpc_dictionary_set_int64(v22, "kCBGetRssiStatisticsDetectionAverage", a10);
    xpc_dictionary_set_int64(v22, "kCBGetRssiStatisticsDetectionMedian", a12);
    xpc_dictionary_set_int64(v22, "kCBGetRssiStatisticsDetectionMaximum", a11);
    xpc_dictionary_set_int64(v22, "kCBGetRssiStatisticsDetectionMinimum", a13);
    xpc_dictionary_set_uint64(v22, "kCBGetRssiStatisticsDetectionCoreMotionAndMask", a4);
    xpc_dictionary_set_uint64(v22, "kCBGetRssiStatisticsDetectionCoreMotionAndMask2", a5);
    xpc_dictionary_set_uint64(v22, "kCBGetRssiStatisticsDetectionCoreMotionXorMask", a6);
    xpc_dictionary_set_uint64(v22, "kCBGetRssiStatisticsDetectionVariance", value);
    xpc_dictionary_set_uint64(v22, "kCBGetRssiStatisticsDetectionState", value_6);
    xpc_dictionary_set_int64(v22, "kCBMsgArgResult", value_2);
    sub_1000173FC(a1, 214, v22, 1);
    *(void *)uuid = &off_100998428;
    if (v28) {
      sub_1000368F4(v28);
    }
  }
}

void sub_1005B36A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005B3700(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, const void *a8, char a9, char a10, char a11, char a12, char a13, unsigned __int16 a14, int a15, unsigned __int8 a16)
{
}

void sub_1005B3748(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, unsigned int a6, int64_t a7, int a8)
{
  id v14 = a3;
  if (*(int *)(a1 + 80) >= 1)
  {
    xpc_object_t v15 = xpc_dictionary_create(0, 0, 0);
    id v16 = v14;
    id v17 = v16;
    if (v16)
    {
      *(void *)uuid = 0;
      uint64_t v19 = 0;
      [v16 getUUIDBytes:uuid];
      xpc_dictionary_set_uuid(v15, "kCBMsgArgDeviceUUID", uuid);
    }

    xpc_dictionary_set_int64(v15, "kCBUsageStatsLePercent", a4);
    xpc_dictionary_set_int64(v15, "kCBUsageStatsClPercent", a5);
    xpc_dictionary_set_int64(v15, "kCBUsageStatsIsAudioStreaming", a6);
    xpc_dictionary_set_int64(v15, "kCBUsageStatsTimeStampNsMonotonic", a7);
    xpc_dictionary_set_int64(v15, "kCBMsgArgResult", a8);
    sub_1000173FC(a1, 215, v15, 1);
  }
}

void sub_1005B38A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005B38CC(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, unsigned int a6, int64_t a7, int a8)
{
}

void sub_1005B38D4(uint64_t a1, uint64_t a2, void *a3, unsigned __int16 *a4, int a5)
{
  id v8 = a3;
  if (*(int *)(a1 + 80) >= 1)
  {
    xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
    id v10 = v8;
    uint64_t v11 = v10;
    if (v10)
    {
      *(void *)uuid = 0;
      uint64_t v13 = 0;
      [v10 getUUIDBytes:uuid];
      xpc_dictionary_set_uuid(v9, "kCBMsgArgDeviceUUID", uuid);
    }

    xpc_dictionary_set_int64(v9, "kCBPhyStatsRSSI", *(char *)a4);
    xpc_dictionary_set_int64(v9, "kCBPhyStatsTransmitPER", a4[1]);
    xpc_dictionary_set_int64(v9, "kCBPhyStatsTransmitPERNumberOfPackets", a4[2]);
    xpc_dictionary_set_int64(v9, "kCBPhyStatsTransmitClassicPER", a4[3]);
    xpc_dictionary_set_int64(v9, "kCBPhyStatsTransmitClassicPERNumberOfPackets", a4[4]);
    xpc_dictionary_set_int64(v9, "kCBPhyStatsReceivePER", a4[5]);
    xpc_dictionary_set_int64(v9, "kCBPhyStatsReceivePERNumberOfPackets", a4[6]);
    xpc_dictionary_set_int64(v9, "kCBPhyStatsReceiveClassicPER", a4[7]);
    xpc_dictionary_set_int64(v9, "kCBPhyStatsReceiveClassicPERNumberOfPackets", a4[8]);
    xpc_dictionary_set_int64(v9, "kCBMsgArgResult", a5);
    sub_1000173FC(a1, 216, v9, 1);
  }
}

void sub_1005B3A7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005B3AA0(uint64_t a1, uint64_t a2, void *a3, unsigned __int16 *a4, int a5)
{
}

void sub_1005B3AA8(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, int a6, unsigned int a7)
{
  id v12 = a3;
  xpc_object_t v13 = xpc_dictionary_create(0, 0, 0);
  id v14 = v12;
  xpc_object_t v15 = v14;
  if (v14)
  {
    *(void *)uuid = 0;
    uint64_t v17 = 0;
    [v14 getUUIDBytes:uuid];
    xpc_dictionary_set_uuid(v13, "kCBMsgArgDeviceUUID", uuid);
  }

  xpc_dictionary_set_int64(v13, "kCBMsgArgPowerAssertionExecutionState", a7);
  xpc_dictionary_set_int64(v13, "kCBMsgArgPowerAssertionDuration", a5);
  xpc_dictionary_set_int64(v13, "kCBMsgArgPowerAssertionBegin", a4);
  xpc_dictionary_set_int64(v13, "kCBMsgArgResult", a6);
  sub_1000173FC(a1, 213, v13, 1);
}

void sub_1005B3BDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005B3C00(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, int a6, unsigned int a7)
{
}

void sub_1005B3C08(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    sub_1006AD3F0();
    id v6 = (id)objc_claimAutoreleasedReturnValue();
    sub_1006AD3F0();
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v8 = a3[2] & 0xFFFFFFFFFFFFLL;
    xpc_object_t v9 = &stru_1009C1AC8;
    if (v8) {
      CFStringRef v10 = @" non-connectable secondary:";
    }
    else {
      CFStringRef v10 = &stru_1009C1AC8;
    }
    if (v8)
    {
      sub_1006AD3F0();
      xpc_object_t v9 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    *(_DWORD *)long long buf = 138413058;
    id v25 = v6;
    __int16 v26 = 2112;
    *(void *)xpc_object_t v27 = v7;
    *(_WORD *)&v27[8] = 2112;
    *(void *)&unsigned char v27[10] = v10;
    __int16 v28 = 2112;
    char v29 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "advertisingAddressDidChange connectable:%@ non-connectable:%@%@%@", buf, 0x2Au);
    if (v8) {
  }
    }
  int v11 = *(_DWORD *)(a1 + 80);
  if (v11 >= 1 && ((int v12 = *(_DWORD *)(a1 + 136), v12 != 5) ? (v13 = v12 == 10) : (v13 = 1), v13))
  {
    xpc_object_t v14 = xpc_dictionary_create(0, 0, 0);
    unint64_t v15 = *a3;
    buf[0] = (unsigned __int16)WORD2(*a3) >> 8;
    buf[1] = BYTE4(v15);
    uint8_t buf[2] = BYTE3(v15);
    _DWORD buf[3] = BYTE2(v15);
    LOBYTE(v25) = BYTE1(v15);
    BYTE1(v25) = v15;
    uint64_t v16 = a3[1];
    bytes[0] = BYTE5(v16);
    bytes[1] = BYTE4(v16);
    _OWORD bytes[2] = BYTE3(v16);
    bytes[3] = BYTE2(v16);
    bytes[4] = BYTE1(v16);
    uint64_t v17 = a3[2];
    bytes[5] = v16;
    v22[0] = BYTE5(v17);
    v22[1] = BYTE4(v17);
    void v22[2] = BYTE3(v17);
    v22[3] = BYTE2(v17);
    void v22[4] = BYTE1(v17);
    void v22[5] = v17;
    xpc_dictionary_set_data(v14, "kCBConnectableAdvertisingAddress", buf, 6uLL);
    xpc_dictionary_set_int64(v14, "kCBConnectableAdvertisingAddressType", *((unsigned __int8 *)a3 + 6));
    xpc_dictionary_set_data(v14, "kCBNonConnectableAdvertisingAddress", bytes, 6uLL);
    xpc_dictionary_set_int64(v14, "kCBNonConnectableAdvertisingAddressType", *((unsigned __int8 *)a3 + 14));
    xpc_dictionary_set_data(v14, "kCBNonConnectableSecondaryAdvertisingAddress", v22, 6uLL);
    xpc_dictionary_set_int64(v14, "kCBNonConnectableSecondaryAdvertisingAddressType", *((unsigned __int8 *)a3 + 22));
    sub_1000173FC(a1, 59, v14, 1);
  }
  else
  {
    id v18 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = (void *)(a1 + 56);
      if (*(char *)(a1 + 79) < 0) {
        uint64_t v19 = (void *)*v19;
      }
      int v20 = *(_DWORD *)(a1 + 136);
      *(_DWORD *)long long buf = 136315650;
      if (v20 == 5) {
        id v21 = "";
      }
      else {
        id v21 = "not ";
      }
      id v25 = v19;
      __int16 v26 = 1024;
      *(_DWORD *)xpc_object_t v27 = v11;
      *(_WORD *)&v27[4] = 2080;
      *(void *)&v27[6] = v21;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Ignore advertisingAddressDidChange for session %s with access level : %d and manager state %spowered on", buf, 0x1Cu);
    }
  }
}

void sub_1005B3F44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005B3F70(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

void sub_1005B3F78(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5, unint64_t a6)
{
  id v10 = a3;
  if (a6)
  {
    sub_1000305AC(uu2, v10);
    uint64_t v11 = sub_1000308C0(a1 + 200, uu2);
    uint64_t v12 = v11;
    if (a1 + 208 != v11)
    {
      BOOL v13 = *(void **)(v11 + 56);
      if (v13)
      {
        xpc_object_t v14 = (uint64_t **)(v11 + 48);
        unint64_t v15 = (uint64_t *)(v11 + 56);
        do
        {
          unint64_t v16 = v13[4];
          BOOL v17 = v16 >= a6;
          if (v16 >= a6) {
            id v18 = v13;
          }
          else {
            id v18 = v13 + 1;
          }
          if (v17) {
            unint64_t v15 = v13;
          }
          BOOL v13 = (void *)*v18;
        }
        while (*v18);
        if (v15 != (uint64_t *)(v11 + 56) && v15[4] <= a6)
        {
          int v19 = *(_DWORD *)(a6 + 8);
          xpc_object_t v20 = sub_1003C0660((id *)a6, a4, a5);
          sub_1000173FC(a1, (unsigned __int16)v19, v20, 1);
          sub_10004D3B8(v14, v15);
          operator delete(v15);
          if (!*(void *)(v12 + 64)) {
            sub_1005B8E10((uint64_t **)(a1 + 200), v12);
          }
          (*(void (**)(unint64_t))(*(void *)a6 + 8))(a6);
        }
      }
    }
  }
}

void sub_1005B40F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005B410C(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5, unint64_t a6)
{
}

BOOL sub_1005B4114(uint64_t a1, uint64_t a2, void *a3)
{
  int64_t v19 = 0;
  int v4 = sub_100019A00(a3, &v19);
  if (!v4)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = *(void **)(v5 + 8);
    unint64_t v7 = *(void *)(v5 + 16);
    if ((unint64_t)v6 >= v7)
    {
      xpc_object_t v9 = *(void **)v5;
      uint64_t v10 = ((uint64_t)v6 - *(void *)v5) >> 3;
      unint64_t v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 61) {
        abort();
      }
      uint64_t v12 = v7 - (void)v9;
      if (v12 >> 2 > v11) {
        unint64_t v11 = v12 >> 2;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v11;
      }
      if (v13)
      {
        xpc_object_t v14 = (char *)sub_1000405F8(v5 + 16, v13);
        xpc_object_t v9 = *(void **)v5;
        id v6 = *(void **)(v5 + 8);
      }
      else
      {
        xpc_object_t v14 = 0;
      }
      unint64_t v15 = &v14[8 * v10];
      unint64_t v16 = &v14[8 * v13];
      *(void *)unint64_t v15 = v19;
      uint64_t v8 = v15 + 8;
      while (v6 != v9)
      {
        uint64_t v17 = *--v6;
        *((void *)v15 - 1) = v17;
        v15 -= 8;
      }
      *(void *)uint64_t v5 = v15;
      *(void *)(v5 + 8) = v8;
      *(void *)(v5 + 16) = v16;
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      void *v6 = v19;
      uint64_t v8 = v6 + 1;
    }
    *(void *)(v5 + 8) = v8;
  }
  return v4 == 0;
}

uint64_t sub_1005B4220(void *a1, uint64_t a2)
{
  if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_array)
  {
    applier[0] = _NSConcreteStackBlock;
    applier[1] = 3221225472;
    applier[2] = sub_1005B42F4;
    applier[3] = &unk_1009A3318;
    void applier[4] = a2;
    if (xpc_array_apply(a1, applier)) {
      return 0;
    }
    else {
      return 3;
    }
  }
  else
  {
    int v4 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077FDF0(a1, v4);
    }
    return 3;
  }
}

uint64_t sub_1005B42F4(uint64_t a1, uint64_t a2, void *a3)
{
  v27[0] = 0;
  v27[1] = 0;
  int v28 = 0;
  sub_10071D13C(v27);
  if (!sub_1000198BC(a3, 1, v4, v5, v6, v7, v8, v9, (uint64_t)"kCBMsgArgUUID"))
  {
    long long v25 = xmmword_1007BA550;
    int v26 = 0;
    if (!sub_10022A44C((unsigned __int8 *)v27, (unsigned __int8 *)&v25))
    {
      long long v23 = xmmword_1007BA564;
      int v24 = 0;
      if (!sub_10022A44C((unsigned __int8 *)v27, (unsigned __int8 *)&v23))
      {
        long long v21 = xmmword_1007BA528;
        int v22 = 0;
        if (!sub_10022A44C((unsigned __int8 *)v27, (unsigned __int8 *)&v21))
        {
          long long v19 = xmmword_1007BA53C;
          int v20 = 0;
          if (sub_10022A44C((unsigned __int8 *)v27, (unsigned __int8 *)&v19))
          {
            uint64_t v10 = sub_100019738(a3, "kCBMsgArgData");
            unint64_t v11 = v10;
            if (v10)
            {
              if (strlen((const char *)[v10 UTF8String]) < 0x10000) {
                operator new();
              }
              if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
                sub_100780374();
              }
            }
          }
          else
          {
            long long v17 = xmmword_1007BA578;
            int v18 = 0;
            if (sub_10022A44C((unsigned __int8 *)v27, (unsigned __int8 *)&v17))
            {
              unint64_t v15 = &off_100998428;
              unint64_t v16 = 0;
              xpc_object_t value = xpc_dictionary_get_value(a3, "kCBMsgArgData");
              if (!sub_1002D4184(value, (uint64_t)&v15) && sub_100045F00((uint64_t)&v15) == 7)
              {
                sub_1006537C0((uint64_t)&v15, 2uLL);
                sub_1006537C0((uint64_t)&v15, 3uLL);
                sub_1006537C0((uint64_t)&v15, 5uLL);
                sub_1006537C0((uint64_t)&v15, 6uLL);
                operator new();
              }
            }
            else
            {
              unint64_t v15 = &off_100998428;
              unint64_t v16 = 0;
              xpc_object_t v13 = xpc_dictionary_get_value(a3, "kCBMsgArgData");
              if (!sub_1002D4184(v13, (uint64_t)&v15)
                && (unint64_t)sub_100045F00((uint64_t)&v15) <= 0x200)
              {
                operator new();
              }
            }
            unint64_t v15 = &off_100998428;
            if (v16) {
              sub_1000368F4(v16);
            }
          }
        }
      }
    }
  }
  return 0;
}

void sub_1005B4788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, atomic_uint *a16)
{
  if (a16) {
    sub_1000368F4(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005B482C(uint64_t a1, __int16 a2, long long *a3, uint64_t a4, int a5)
{
  *(_DWORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 20) = 0;
  *(void *)a1 = off_1009BB478;
  *(void *)(a1 + 8) = a1 + 24;
  long long v6 = *a3;
  int v7 = *((_DWORD *)a3 + 4);
  *(_WORD *)(a1 + 24) = a2;
  *(_WORD *)(a1 + 26) = 0;
  *(_OWORD *)(a1 + 28) = v6;
  *(_DWORD *)(a1 + 44) = v7;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  sub_100614A70(a1, a4, a5);
  return a1;
}

uint64_t sub_1005B48E4(uint64_t a1, uint64_t a2, void *a3)
{
  long long v11 = 0uLL;
  int v12 = 0;
  sub_10071D13C(&v11);
  if (!sub_1000198BC(a3, 1, v4, v5, v6, v7, v8, v9, (uint64_t)"kCBMsgArgAttributeID")) {
    operator new();
  }
  return 0;
}

void sub_1005B4DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,atomic_uint *a33)
{
  if (__p) {
    operator delete(__p);
  }
  if (a33) {
    sub_1000368F4(a33);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005B4E20(void *a1, long long *a2)
{
  unint64_t v6 = a1[10];
  uint64_t v4 = (uint64_t)(a1 + 10);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = a1[8];
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - v10) >> 2);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0xCCCCCCCCCCCCCCCLL) {
      abort();
    }
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - v10) >> 2);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x666666666666666) {
      unint64_t v14 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14) {
      unint64_t v15 = (char *)sub_10003767C(v4, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    unint64_t v16 = &v15[20 * v11];
    long long v17 = &v15[20 * v14];
    long long v18 = *a2;
    *((_DWORD *)v16 + 4) = *((_DWORD *)a2 + 4);
    *(_OWORD *)unint64_t v16 = v18;
    uint64_t v9 = v16 + 20;
    int v20 = (char *)a1[8];
    long long v19 = (char *)a1[9];
    if (v19 != v20)
    {
      do
      {
        long long v21 = *(_OWORD *)(v19 - 20);
        *((_DWORD *)v16 - 1) = *((_DWORD *)v19 - 1);
        *(_OWORD *)(v16 - 20) = v21;
        v16 -= 20;
        v19 -= 20;
      }
      while (v19 != v20);
      long long v19 = (char *)a1[8];
    }
    a1[8] = v16;
    a1[9] = v9;
    a1[10] = v17;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    long long v8 = *a2;
    *(_DWORD *)(v7 + 16) = *((_DWORD *)a2 + 4);
    *(_OWORD *)unint64_t v7 = v8;
    uint64_t v9 = (char *)(v7 + 20);
  }
  a1[9] = v9;
}

void sub_1005B4F44(void *a1, long long *a2)
{
  unint64_t v6 = a1[13];
  uint64_t v4 = (uint64_t)(a1 + 13);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = a1[11];
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - v10) >> 2);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0xCCCCCCCCCCCCCCCLL) {
      abort();
    }
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - v10) >> 2);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x666666666666666) {
      unint64_t v14 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14) {
      unint64_t v15 = (char *)sub_10003767C(v4, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    unint64_t v16 = &v15[20 * v11];
    long long v17 = &v15[20 * v14];
    long long v18 = *a2;
    *((_DWORD *)v16 + 4) = *((_DWORD *)a2 + 4);
    *(_OWORD *)unint64_t v16 = v18;
    uint64_t v9 = v16 + 20;
    int v20 = (char *)a1[11];
    long long v19 = (char *)a1[12];
    if (v19 != v20)
    {
      do
      {
        long long v21 = *(_OWORD *)(v19 - 20);
        *((_DWORD *)v16 - 1) = *((_DWORD *)v19 - 1);
        *(_OWORD *)(v16 - 20) = v21;
        v16 -= 20;
        v19 -= 20;
      }
      while (v19 != v20);
      long long v19 = (char *)a1[11];
    }
    a1[11] = v16;
    a1[12] = v9;
    a1[13] = v17;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    long long v8 = *a2;
    *(_DWORD *)(v7 + 16) = *((_DWORD *)a2 + 4);
    *(_OWORD *)unint64_t v7 = v8;
    uint64_t v9 = (char *)(v7 + 20);
  }
  a1[12] = v9;
}

uint64_t sub_1005B5068(uint64_t a1, int a2, uint64_t a3)
{
  if (*(int *)(a1 + 80) <= 1)
  {
    uint64_t v4 = *(void *)(a3 + 8);
    unint64_t v5 = *(unsigned __int8 **)(v4 + 64);
    if (a2)
    {
      unint64_t v6 = *(unsigned __int8 **)(v4 + 72);
    }
    else
    {
      unint64_t v7 = *(unsigned __int8 **)(v4 + 72);
      if (v5 == v7)
      {
        long long v8 = *(unsigned __int8 **)(v4 + 64);
      }
      else
      {
        while (1)
        {
          *(_OWORD *)long long buf = xmmword_1007BA7E4;
          int v19 = 0;
          if (sub_10022A44C(v5, buf)) {
            break;
          }
          v5 += 20;
          if (v5 == v7)
          {
            unint64_t v5 = v7;
            break;
          }
        }
        long long v8 = v5;
        unint64_t v5 = *(unsigned __int8 **)(v4 + 72);
      }
      if (v8 != v5)
      {
        uint64_t v9 = qword_100A19EC8;
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Contact tracing UUID advertising is not allowed.", buf, 2u);
        }
        return 3;
      }
      unint64_t v6 = v5;
      unint64_t v5 = *(unsigned __int8 **)(v4 + 64);
    }
    if (v5 != v6)
    {
      while (1)
      {
        if (qword_1009FB230 != -1) {
          dispatch_once(&qword_1009FB230, &stru_1009B7BC8);
        }
        if ((sub_100425420(qword_1009FB228, v5, *(unsigned __int8 *)(a1 + 183)) & 1) == 0)
        {
          unint64_t v11 = qword_100A19EC8;
          if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v12 = *(void *)(a1 + 96);
            sub_1000417A8((uint64_t)v5, buf);
            unint64_t v13 = buf;
            if (v20 < 0) {
              unint64_t v13 = *(uint8_t **)buf;
            }
            *(_DWORD *)long long v21 = 138412546;
            uint64_t v22 = v12;
            __int16 v23 = 2080;
            int v24 = v13;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%@ wants to advertise for restricted service (%s)", v21, 0x16u);
            if (v20 < 0) {
              operator delete(*(void **)buf);
            }
          }
          long long v16 = xmmword_1007BA7BC;
          int v17 = -1171415960;
          if (sub_10022A44C(v5, (unsigned __int8 *)&v16)) {
            break;
          }
          long long v14 = xmmword_1007BA914;
          int v15 = 0;
          if (sub_10022A44C(v5, (unsigned __int8 *)&v14)) {
            break;
          }
        }
        v5 += 20;
        if (v5 == v6) {
          return 0;
        }
      }
      return 3;
    }
  }
  return 0;
}

uint64_t sub_1005B52F4(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  unint64_t v6 = a2;
  uint64_t v4 = sub_100085C30((uint64_t **)(a1 + 112), (unsigned __int8 *)a2, (uint64_t)&unk_1007BE9D0, &v6);
  return sub_100049EE0((uint64_t)v4 + 56, a3);
}

uint64_t sub_1005B5344(uint64_t a1, uint64_t a2, xpc_object_t object)
{
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_data)
  {
    bytes_ptr = xpc_data_get_bytes_ptr(object);
    unint64_t v7 = +[NSData dataWithBytes:bytes_ptr length:xpc_data_get_length(object)];
    long long v8 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_INFO))
    {
      int v10 = 134218242;
      uint64_t v11 = a2;
      __int16 v12 = 2114;
      unint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Adding zone %lu = %{public}@", (uint8_t *)&v10, 0x16u);
    }
    [*(id *)(*(void *)(a1 + 32) + 88) addObject:v7];
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_1007803A8();
  }
  return 1;
}

void sub_1005B549C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1005B54B4(uint64_t a1, uint64_t a2, xpc_object_t object)
{
  uint64_t v6 = *(void *)(a1 + 40);
  if (xpc_get_type(object) != (xpc_type_t)&_xpc_type_dictionary) {
    return 0;
  }
  uint64_t v86 = 0;
  int64_t v87 = 0;
  uint64_t v84 = 0;
  uint64_t v85 = &off_100998428;
  int64_t v82 = -127;
  uint64_t v83 = &off_100998428;
  int64_t v80 = 1;
  int64_t v81 = 0;
  int64_t v78 = 1;
  int64_t v79 = 1;
  int64_t v76 = 0;
  int64_t v77 = 2;
  int64_t v74 = 0;
  int64_t v75 = 0;
  int v72 = 0xFFFF;
  int v73 = 0xFFFF;
  int v71 = 0xFFFF;
  long long v99 = 0uLL;
  int v100 = 0;
  sub_10071D13C(&v99);
  unsigned __int16 v70 = 0;
  uint64_t v8 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 616))(v8)) {
    int64_t v79 = 3;
  }
  xpc_object_t value = xpc_dictionary_get_value(object, "kCBScanOptionFilterManufacturerID");
  if (value && sub_1002D4004(value, &v70))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_1007807EC();
    }
    goto LABEL_45;
  }
  xpc_object_t v10 = xpc_dictionary_get_value(object, "kCBScanOptionAppleFilterPayload");
  if (v10 && sub_1002D4184(v10, (uint64_t)&v85))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_1007804AC();
    }
    goto LABEL_45;
  }
  xpc_object_t v11 = xpc_dictionary_get_value(object, "kCBScanOptionAppleFilterPayloadMask");
  if (v11 && sub_1002D4184(v11, (uint64_t)&v83))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_100780478();
    }
    goto LABEL_45;
  }
  xpc_object_t v12 = xpc_dictionary_get_value(object, "kCBScanOptionAppleFilterForceDups");
  if (v12 && sub_100019A00(v12, &v81))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_1007807B8();
    }
    goto LABEL_45;
  }
  xpc_object_t v13 = xpc_dictionary_get_value(object, "kCBScanOptionAppleFilterBypassFilterDuplicate");
  if (v13 && sub_100019A00(v13, &v80))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_100780784();
    }
    goto LABEL_45;
  }
  xpc_object_t v14 = xpc_dictionary_get_value(object, "kCBScanOptionAppleFilterTargetCore");
  if (v14 && sub_100019A00(v14, &v79))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_100780750();
    }
    goto LABEL_45;
  }
  xpc_object_t v15 = xpc_dictionary_get_value(object, "kCBScanOptionAppleFilterRSSIThresholdOrder");
  if (v15 && sub_100019A00(v15, &v78))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_40;
    }
    goto LABEL_45;
  }
  xpc_object_t v16 = xpc_dictionary_get_value(object, "kCBScanOption127dBmReport");
  if (v16 && sub_100019A00(v16, &v75))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_40;
    }
    goto LABEL_45;
  }
  xpc_object_t v17 = xpc_dictionary_get_value(object, "kCBScanOption27dBmReport");
  if (!v17 || !sub_100019A00(v17, &v74))
  {
    if (xpc_dictionary_get_value(object, "kCBScanOptionPeers"))
    {
      long long v18 = sub_1002D4B14(object, "kCBScanOptionPeers");
      if (!v18)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
          sub_1007806E8();
        }
        goto LABEL_45;
      }
    }
    else
    {
      long long v18 = 0;
    }
    xpc_object_t v21 = xpc_dictionary_get_value(object, "kCBScanOptionAppleFilterAddressType");
    if (v21 && sub_100019A00(v21, &v77))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_1007806B4();
      }
      goto LABEL_46;
    }
    if (*(_DWORD *)(v6 + 80) == 2)
    {
      uint64_t v22 = sub_10003FB34();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v22 + 2336))(v22))
      {
        xpc_object_t v23 = xpc_dictionary_get_value(object, "kCBScanOptionRespondToObjectLocatorWithThisType");
        if (v23)
        {
          if (sub_100019A00(v23, &v76))
          {
            if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
              sub_100780680();
            }
            goto LABEL_46;
          }
        }
      }
    }
    if (xpc_dictionary_get_value(object, "kCBOptionUseCaseList"))
    {
      int v19 = sub_1002D5194(object, "kCBOptionUseCaseList");
      if (!v19)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
          sub_10078064C();
        }
        goto LABEL_46;
      }
    }
    else
    {
      int v19 = 0;
    }
    xpc_object_t v24 = xpc_dictionary_get_value(object, "kCBScanOptionScanWindow");
    if (v24 && sub_1002D4084(v24, &v73))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_100780618();
      }
      goto LABEL_47;
    }
    xpc_object_t v25 = xpc_dictionary_get_value(object, "kCBScanOptionScanInterval");
    if (v25 && sub_1002D4084(v25, &v72))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_1007805E4();
      }
      goto LABEL_47;
    }
    xpc_object_t v26 = xpc_dictionary_get_value(object, "kCBScanOptionScanIntervalBackground");
    if (v26 && sub_1002D4084(v26, &v71))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_1007805B0();
      }
      goto LABEL_47;
    }
    xpc_object_t v27 = xpc_dictionary_get_value(object, "kCBScanOptionFilterServiceUUID");
    if (v27)
    {
      sub_1002D42B0(v27, (uint64_t)&v99);
      if (v28)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
          sub_10078057C();
        }
        goto LABEL_47;
      }
    }
    xpc_object_t v29 = xpc_dictionary_get_value(object, "kCBScanOptionFilterIdentifier");
    if (v29)
    {
      *(void *)long long buf = 0;
      if (sub_1002D4104(v29, (int64_t *)buf))
      {
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
          sub_100780548();
        }
        id v62 = 0;
        long long v30 = 0;
        uint64_t v7 = 0;
        goto LABEL_154;
      }
      xpc_object_t v33 = +[NSNumber numberWithUnsignedLongLong:*(void *)buf];
      uint64_t v61 = [v33 stringValue];
    }
    else
    {
      sub_100019738(object, "kCBScanOptionFilterIdentifierString");
      int64_t v31 = (__CFString *)objc_claimAutoreleasedReturnValue();
      long long v32 = v31;
      if (v31 && [(__CFString *)v31 length])
      {
        uint64_t v61 = v32;
      }
      else
      {

        uint64_t v61 = @"default";
      }
    }
    if (v87 == 18 && _os_feature_enabled_impl())
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077FF78();
      }
LABEL_103:
      id v62 = 0;
      uint64_t v7 = 0;
LABEL_153:
      long long v30 = v61;
LABEL_154:

      goto LABEL_48;
    }
    xpc_object_t v34 = xpc_dictionary_get_value(object, "kCBScanOptionAppleFilterRssi");
    xpc_object_t v63 = xpc_dictionary_get_value(object, "kCBScanOptionAppleFilterPuckType");
    if (v34 && sub_100019A00(v34, &v82))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_100780514();
      }
      goto LABEL_103;
    }
    id v62 = sub_100019738(object, "kCBScanOptionFilterNameMatchString");
    uint64_t v60 = sub_1002D49BC(object, "kCBScanOptionFilterNameMatchNSStringCompareOptions");
    if (v60)
    {
      uint64_t v35 = [v60 unsignedIntValue];
      int v59 = 1000;
LABEL_112:
      int v38 = v70;
      if (v70)
      {
        int v39 = qword_100A19EC8;
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_INFO))
        {
          uint64_t v64 = *(void *)(a1 + 32);
          sub_10004C2C4((uint64_t)&v85, v97);
          int v40 = v98;
          uint64_t v41 = *(unsigned char **)v97;
          sub_10004C2C4((uint64_t)&v83, __p);
          long long v42 = v97;
          if (v40 < 0) {
            long long v42 = v41;
          }
          long long v43 = __p;
          if (v69 < 0) {
            long long v43 = (void **)__p[0];
          }
          *(_DWORD *)long long buf = 134220546;
          *(void *)&uint8_t buf[4] = a2;
          __int16 v91 = 2112;
          uint64_t v92 = v61;
          __int16 v93 = 2112;
          uint64_t v94 = v64;
          __int16 v95 = 1024;
          *(_DWORD *)uint64_t v96 = v38;
          *(_WORD *)&void v96[4] = 2080;
          *(void *)&v96[6] = v42;
          *(_WORD *)&v96[14] = 2080;
          *(void *)&v96[16] = v43;
          *(_WORD *)&v96[24] = 2048;
          *(void *)&v96[26] = v82;
          *(_WORD *)&v96[34] = 2048;
          *(void *)&v96[36] = v81;
          *(_WORD *)&v96[44] = 2048;
          *(void *)&v96[46] = v80;
          *(_WORD *)&v96[54] = 2048;
          *(void *)&v96[56] = v79;
          *(_WORD *)&v96[64] = 2048;
          *(void *)&v96[66] = v78;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "addEnhancedFilter index:%zu filterId:%@ clientName:%@ mfgrID:%d payload:%s payloadFilter:%s rssi:%lld forceDups:%lld bypassFilterDuplicate:%lld,t targetCore:%lld, rssiThreshold:%lld", buf, 0x6Cu);
          if (v69 < 0) {
            operator delete(__p[0]);
          }
          if (v98 < 0) {
            operator delete(*(void **)v97);
          }
          LOWORD(v38) = v70;
        }
        sub_1005B6638(*(uint64_t **)(a1 + 48), v61, *(void **)(a1 + 32), v38, (uint64_t)&v85, (uint64_t)&v83, v82, v81, v80, v79, v78, 0, 0, 1);
        goto LABEL_144;
      }
      if ((_BYTE)v99)
      {
        long long v44 = qword_100A19EC8;
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_INFO))
        {
          uint64_t v65 = *(void *)(a1 + 32);
          sub_1000417A8((uint64_t)&v99, v97);
          if (v98 >= 0) {
            long long v45 = v97;
          }
          else {
            long long v45 = *(unsigned char **)v97;
          }
          sub_10004C2C4((uint64_t)&v85, __p);
          int v46 = v69;
          int v47 = (void **)__p[0];
          sub_10004C2C4((uint64_t)&v83, v66);
          id v48 = __p;
          if (v46 < 0) {
            id v48 = v47;
          }
          char v49 = v66;
          if (v67 < 0) {
            char v49 = (void **)v66[0];
          }
          *(_DWORD *)long long buf = 134220546;
          *(void *)&uint8_t buf[4] = a2;
          __int16 v91 = 2112;
          uint64_t v92 = v61;
          __int16 v93 = 2112;
          uint64_t v94 = v65;
          __int16 v95 = 2080;
          *(void *)uint64_t v96 = v45;
          *(_WORD *)&v96[8] = 2080;
          *(void *)&v96[10] = v48;
          *(_WORD *)&v96[18] = 2080;
          *(void *)&v96[20] = v49;
          *(_WORD *)&v96[28] = 2048;
          *(void *)&v96[30] = v82;
          *(_WORD *)&v96[38] = 2048;
          *(void *)&v96[40] = v81;
          *(_WORD *)&v96[48] = 2048;
          *(void *)&v96[50] = v80;
          *(_WORD *)&v96[58] = 2048;
          *(void *)&v96[60] = v79;
          *(_WORD *)&v96[68] = 2048;
          *(void *)&v96[70] = v78;
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, "addEnhancedFilter index:%zu filterId:%@ clientName:%@ uuid:%s payload:%s payloadFilter:%s rssi:%lld forceDups:%lld bypassFilterDuplicate:%lld,t targetCore:%lld, rssiThreshold:%lld", buf, 0x70u);
          if (v67 < 0) {
            operator delete(v66[0]);
          }
          if (v69 < 0) {
            operator delete(__p[0]);
          }
          if (v98 < 0) {
            operator delete(*(void **)v97);
          }
        }
        int v50 = *(void **)(a1 + 48);
        xpc_object_t v51 = *(void **)(a1 + 32);
        long long v88 = v99;
        int v89 = v100;
        sub_1000A3F4C(v50, v61, v51, &v88, (uint64_t)&v85, (uint64_t)&v83, v82, v81, v80, v79, v78, 0, 0, 1);
        goto LABEL_144;
      }
      if ([v62 length])
      {
        xpc_object_t v52 = qword_100A19EC8;
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_INFO))
        {
          uint64_t v53 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 134220546;
          *(void *)&uint8_t buf[4] = a2;
          __int16 v91 = 2112;
          uint64_t v92 = v61;
          __int16 v93 = 2112;
          uint64_t v94 = v53;
          __int16 v95 = 2112;
          *(void *)uint64_t v96 = v62;
          *(_WORD *)&v96[8] = 1024;
          *(_DWORD *)&v96[10] = v59;
          *(_WORD *)&v96[14] = 2048;
          *(void *)&v96[16] = v35;
          *(_WORD *)&v96[24] = 2048;
          *(void *)&v96[26] = v82;
          *(_WORD *)&v96[34] = 2048;
          *(void *)&v96[36] = v81;
          *(_WORD *)&v96[44] = 2048;
          *(void *)&v96[46] = v80;
          *(_WORD *)&v96[54] = 2048;
          *(void *)&v96[56] = v79;
          *(_WORD *)&v96[64] = 2048;
          *(void *)&v96[66] = v78;
          _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_INFO, "addEnhancedFilter index:%zu filterId:%@ clientName:%@ nameMatchStr:%@ nameMatchOpt:%d NSStringCompareOptions:%lu rssi:%lld forceDups:%lld bypassFilterDuplicate:%lld,t targetCore:%lld, rssiThreshold:%lld", buf, 0x6Cu);
        }
        sub_1005B67A0(*(uint64_t **)(a1 + 48), v61, *(void **)(a1 + 32), v62, v59, v35, v82, v81, v80, v79, v78, 0, 0, 1);
        goto LABEL_144;
      }
      if (*(unsigned char *)(v6 + 170))
      {
        if (v63 && !sub_100019A00(v63, &v87))
        {
          if (v34 && !sub_100019A00(v34, &v82))
          {
            if (sub_100045F00((uint64_t)&v83))
            {
              if (sub_100045F00((uint64_t)&v85))
              {
                sub_1000364C4(*(void *)(a1 + 48), *(void **)(a1 + 32), v87, v77, (uint64_t)&v85, (uint64_t)&v83, v82, v81, v80, v79, v78, v18, v76 != 0, 1, v75 != 0, v74 != 0, 1, v19, v73,
                  v72,
                  v71);
LABEL_144:
                uint64_t v54 = *(void *)(a1 + 48);
                uint64_t v55 = *(void *)(v54 + 96);
                for (uint64_t i = *(void *)(v54 + 104); v55 != i; v55 += 112)
                {
                  uint64_t v57 = qword_100A19EC8;
                  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_INFO))
                  {
                    sub_1005B6910(v55);
                    uint64_t v58 = buf;
                    if (v93 < 0) {
                      uint64_t v58 = *(unsigned char **)buf;
                    }
                    *(_DWORD *)uint64_t v97 = 136315138;
                    *(void *)&v97[4] = v58;
                    _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_INFO, "%s", v97, 0xCu);
                    if (SHIBYTE(v93) < 0) {
                      operator delete(*(void **)buf);
                    }
                  }
                }
                uint64_t v7 = 1;
                goto LABEL_152;
              }
              if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
                sub_1007804AC();
              }
            }
            else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
            {
              sub_100780478();
            }
          }
          else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
          {
            sub_100780444();
          }
        }
        else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
        {
          sub_100780410();
        }
      }
LABEL_166:
      uint64_t v7 = 0;
LABEL_152:

      goto LABEL_153;
    }
    int v36 = sub_100019738(object, "kCBScanOptionFilterNameMatchOption");
    if ([v36 isEqualToString:@"kCBScanOptionFilterNameMatchOptionStartsWith"])
    {
      int v37 = 1;
    }
    else
    {
      if (([v36 isEqualToString:@"kCBScanOptionFilterNameMatchOptionEndsWith"] & 1) == 0)
      {
        if (([v36 isEqualToString:@"kCBScanOptionFilterNameMatchOptionContains"] & 1) == 0
          && [v36 length])
        {
          if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
            sub_1007804E0();
          }

          goto LABEL_166;
        }
        int v59 = 0;
        goto LABEL_111;
      }
      int v37 = 2;
    }
    int v59 = v37;
LABEL_111:

    uint64_t v35 = 0;
    goto LABEL_112;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
LABEL_40:
  }
    sub_10078071C();
LABEL_45:
  long long v18 = 0;
LABEL_46:
  int v19 = 0;
LABEL_47:
  uint64_t v7 = 0;
LABEL_48:

  uint64_t v83 = &off_100998428;
  if (v84) {
    sub_1000368F4(v84);
  }
  uint64_t v85 = &off_100998428;
  if (v86) {
    sub_1000368F4(v86);
  }
  return v7;
}

void sub_1005B64A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,atomic_uint *a42,uint64_t a43,atomic_uint *a44)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v46 - 137) < 0) {
    operator delete(*(void **)(v46 - 160));
  }

  if (a42) {
    sub_1000368F4(a42);
  }
  if (a44) {
    sub_1000368F4(a44);
  }
  _Unwind_Resume(a1);
}

void sub_1005B6638(uint64_t *a1, void *a2, void *a3, __int16 a4, uint64_t a5, uint64_t a6, char a7, char a8, char a9, char a10, char a11, char a12, char a13, char a14)
{
  sub_1005B774C((uint64_t)v17, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  unint64_t v15 = a1[13];
  if (v15 >= a1[14])
  {
    uint64_t v16 = sub_1000A8670(a1 + 12, v17);
  }
  else
  {
    sub_1000A8794((uint64_t)(a1 + 14), a1[13], v17);
    uint64_t v16 = v15 + 112;
    a1[13] = v15 + 112;
  }
  a1[13] = v16;

  char v20 = &off_100998428;
  if (v21) {
    sub_1000368F4(v21);
  }
  long long v18 = &off_100998428;
  if (v19) {
    sub_1000368F4(v19);
  }
}

void sub_1005B6774(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000A8124((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1005B67A0(uint64_t *a1, void *a2, void *a3, void *a4, int a5, uint64_t a6, char a7, char a8, char a9, char a10, char a11, char a12, char a13, char a14)
{
  sub_1005B78C0((uint64_t)v17, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, 1);
  unint64_t v15 = a1[13];
  if (v15 >= a1[14])
  {
    uint64_t v16 = sub_1000A8670(a1 + 12, v17);
  }
  else
  {
    sub_1000A8794((uint64_t)(a1 + 14), a1[13], v17);
    uint64_t v16 = v15 + 112;
    a1[13] = v15 + 112;
  }
  a1[13] = v16;

  char v20 = &off_100998428;
  if (v21) {
    sub_1000368F4(v21);
  }
  long long v18 = &off_100998428;
  if (v19) {
    sub_1000368F4(v19);
  }
}

void sub_1005B68E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000A8124((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005B6910(uint64_t a1)
{
  uint64_t v43 = 0;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  *(_OWORD *)int64_t v31 = 0u;
  long long v32 = 0u;
  memset(v30, 0, sizeof(v30));
  sub_1000419CC((uint64_t)v30);
  uint64_t v2 = sub_10003AB28((uint64_t)v30);
  sub_10004191C(&__p, off_1009B7C48[*(int *)(a1 + 104)]);
  uint64_t v3 = sub_10003AB28(v2);
  sub_10003AB28(v3);
  uint64_t v4 = std::ostream::operator<<();
  uint64_t v5 = sub_10003AB28(v4);
  strlen((const char *)[*(id *)a1 UTF8String]);
  uint64_t v6 = sub_10003AB28(v5);
  uint64_t v7 = sub_10003AB28(v6);
  strlen((const char *)[*(id *)(a1 + 8) UTF8String]);
  sub_10003AB28(v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int v8 = *(_DWORD *)(a1 + 104);
  if (v8 == 2)
  {
    sub_10003AB28((uint64_t)v30);
    std::ostream::operator<<();
  }
  else if (v8 == 1)
  {
    uint64_t v9 = sub_10003AB28((uint64_t)v30);
    sub_1000417A8(a1 + 20, &__p);
    sub_10003AB28(v9);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (!sub_100013DCC(a1 + 40))
  {
    uint64_t v10 = sub_10003AB28((uint64_t)v30);
    sub_10004C2C4(a1 + 40, &__p);
    sub_10003AB28(v10);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (!sub_100013DCC(a1 + 56))
  {
    uint64_t v11 = sub_10003AB28((uint64_t)v30);
    sub_10004C2C4(a1 + 56, &__p);
    sub_10003AB28(v11);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (*(_DWORD *)(a1 + 104) == 3)
  {
    int v12 = *(_DWORD *)(a1 + 80);
    if (v12 > 1)
    {
      if (v12 == 1000) {
        xpc_object_t v13 = "NSStringCompareOptions";
      }
      else {
        xpc_object_t v13 = "EndsWith";
      }
    }
    else if (v12)
    {
      xpc_object_t v13 = "StartsWith";
    }
    else
    {
      xpc_object_t v13 = "Contains";
    }
    sub_10004191C(&__p, v13);
    sub_10003AB28((uint64_t)v30);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (*(_DWORD *)(a1 + 80) == 1000)
    {
      sub_1005B7A10(a1, *(void *)(a1 + 88));
      sub_10003AB28((uint64_t)v30);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v14 = sub_10003AB28((uint64_t)v30);
    strlen((const char *)[*(id *)(a1 + 96) UTF8String]);
    sub_10003AB28(v14);
  }
  uint64_t v15 = sub_10003AB28((uint64_t)v30);
  std::to_string(&__p, *(char *)(a1 + 72));
  uint64_t v16 = sub_10003AB28(v15);
  uint64_t v17 = sub_10003AB28(v16);
  std::to_string(&v28, *(unsigned __int8 *)(a1 + 76));
  uint64_t v18 = sub_10003AB28(v17);
  uint64_t v19 = sub_10003AB28(v18);
  std::to_string(&v27, *(unsigned __int8 *)(a1 + 77));
  uint64_t v20 = sub_10003AB28(v19);
  uint64_t v21 = sub_10003AB28(v20);
  std::to_string(&v26, *(unsigned __int8 *)(a1 + 78));
  sub_10003AB28(v21);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v22 = sub_10003AB28((uint64_t)v30);
  std::to_string(&__p, *(unsigned __int8 *)(a1 + 73));
  uint64_t v23 = sub_10003AB28(v22);
  uint64_t v24 = sub_10003AB28(v23);
  std::to_string(&v28, *(unsigned __int8 *)(a1 + 74));
  sub_10003AB28(v24);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::stringbuf::str();
  if (SHIBYTE(v32) < 0) {
    operator delete(v31[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1005B6FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  sub_10027E318((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_1005B7080(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 120))
  {
    unsigned int v2 = *(_DWORD *)(a1 + 128);
    int v3 = *(_DWORD *)(a1 + 132);
    if (v2 && v3 != 0 && 100 * v3 / v2 >= 0x1F)
    {
      uint64_t v5 = *(void *)(a1 + 64);
      for (uint64_t i = *(void *)(a1 + 72); v5 != i; v5 += 96)
      {
        if (*(unsigned __int8 *)(v5 + 8) - 15 <= 1)
        {
          id v7 = *(id *)(v5 + 72);
          long long v14 = 0u;
          long long v15 = 0u;
          long long v16 = 0u;
          long long v17 = 0u;
          id v8 = v7;
          id v9 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
          if (v9)
          {
            uint64_t v10 = *(void *)v15;
            do
            {
              for (uint64_t j = 0; j != v9; uint64_t j = (char *)j + 1)
              {
                if (*(void *)v15 != v10) {
                  objc_enumerationMutation(v8);
                }
                unsigned int v12 = [*(id *)(*((void *)&v14 + 1) + 8 * (void)j) longLongValue];
                BOOL v13 = v12 - 131078 > 9 || ((1 << (v12 - 6)) & 0x203) == 0;
                if (!v13
                  && ((*(_DWORD *)(v5 + 84) - 1) < 0x12B
                   || (*(_DWORD *)(v5 + 88) - 1) <= 0x12A))
                {
                  *(unsigned char *)(a1 + 200) = 1;
                }
              }
              id v9 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
            }
            while (v9);
          }
        }
      }
    }
  }
}

void sub_1005B7228(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1005B7250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_100031230(a2);
  uint64_t v5 = +[NSMutableDictionary dictionaryWithDictionary:v4];

  uint64_t v6 = [v5 objectForKeyedSubscript:@"kCBMsgArgs"];
  id v7 = +[NSMutableDictionary dictionaryWithDictionary:v6];

  if (v7)
  {
    id v8 = [v7 objectForKeyedSubscript:@"kCBMsgArgTimeXpcTimestampsTracking"];
    if (v8)
    {
      id v9 = [v7 objectForKeyedSubscript:@"kCBMsgArgTimeXpcTimestampsTracking"];
      uint64_t v10 = +[NSMutableDictionary dictionaryWithDictionary:v9];
    }
    else
    {
      uint64_t v10 = +[NSMutableDictionary dictionary];
    }

    id v11 = [objc_alloc((Class)NSNumber) initWithLongLong:a3];
    [v10 setObject:v11 forKeyedSubscript:@"kCBMsgArgTimeXpcLeAttConnHandleStartAdvMsg"];

    unsigned int v12 = [v7 objectForKeyedSubscript:@"kCBAdvDataAppleMfgData"];
    [v10 setObject:v12 forKeyedSubscript:@"kCBAdvDataAppleMfgData"];
  }
  else
  {
    uint64_t v10 = 0;
  }

  return v10;
}

void sub_1005B73D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1005B744C(uint64_t a1, void *a2, long long **a3, char a4, int a5)
{
  uint64_t v9 = sub_1003C05DC(a1, 181, a2);
  *(void *)uint64_t v9 = off_1009AB2F8;
  *(void *)(v9 + 32) = 0;
  *(void *)(v9 + 40) = 0;
  *(void *)(v9 + 24) = 0;
  sub_100037564((char *)(v9 + 24), *a3, a3[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)a3[1] - (char *)*a3) >> 2));
  *(unsigned char *)(a1 + 48) = a4;
  *(_DWORD *)(a1 + 52) = a5;
  return a1;
}

void sub_1005B74D8(_Unwind_Exception *a1)
{
  sub_1003C062C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1005B74EC(uint64_t a1, void *a2, uint64_t a3, long long **a4, char a5, int a6)
{
  uint64_t v11 = sub_1003C05DC(a1, 189, a2);
  *(void *)(v11 + 24) = a3;
  *(void *)uint64_t v11 = off_1009AB320;
  *(void *)(v11 + 40) = 0;
  *(void *)(v11 + 48) = 0;
  *(void *)(v11 + 32) = 0;
  sub_100037564((char *)(v11 + 32), *a4, a4[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)a4[1] - (char *)*a4) >> 2));
  *(unsigned char *)(a1 + 56) = a5;
  *(_DWORD *)(a1 + 60) = a6;
  return a1;
}

void sub_1005B7588(_Unwind_Exception *a1)
{
  sub_1003C062C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1005B759C(uint64_t a1, void *a2, uint64_t a3, long long **a4)
{
  uint64_t v7 = sub_1003C05DC(a1, 190, a2);
  *(void *)(v7 + 24) = a3;
  *(void *)uint64_t v7 = off_1009AB348;
  *(void *)(v7 + 40) = 0;
  *(void *)(v7 + 48) = 0;
  *(void *)(v7 + 32) = 0;
  sub_100037564((char *)(v7 + 32), *a4, a4[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)a4[1] - (char *)*a4) >> 2));
  return a1;
}

void sub_1005B7620(_Unwind_Exception *a1)
{
  sub_1003C062C(v1);
  _Unwind_Resume(a1);
}

void sub_1005B7638(uint64_t a1)
{
  sub_1003C062C(a1);

  operator delete();
}

void sub_1005B7674(uint64_t a1)
{
  sub_1003C062C(a1);

  operator delete();
}

uint64_t sub_1005B76AC(uint64_t a1, __int16 a2, uint64_t a3, int a4)
{
  *(_WORD *)(a1 + 24) = a2;
  *(_DWORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 20) = 0;
  *(void *)a1 = off_1009BB3D0;
  *(void *)(a1 + 8) = a1 + 24;
  *(_WORD *)(a1 + 26) = 0;
  *(_DWORD *)(a1 + 44) = 0;
  *(_OWORD *)(a1 + 28) = xmmword_1007BFA8C;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  sub_1006142D0(a1, a3, a4);
  if (a3) {
    BOOL v7 = a4 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  char v8 = !v7;
  *(unsigned char *)(a1 + 20) = v8;
  return a1;
}

uint64_t sub_1005B774C(uint64_t a1, void *a2, void *a3, __int16 a4, uint64_t a5, uint64_t a6, char a7, char a8, char a9, char a10, char a11, char a12, char a13, char a14)
{
  id v21 = a2;
  id v22 = a3;
  id v23 = v21;
  *(void *)a1 = v23;
  id v24 = v22;
  *(void *)(a1 + 8) = v24;
  *(_WORD *)(a1 + 16) = a4;
  sub_10071D13C((unsigned char *)(a1 + 20));
  uint64_t v25 = *(void *)(a5 + 8);
  *(void *)(a1 + 40) = &off_100998428;
  *(void *)(a1 + 48) = v25;
  if (v25) {
    sub_100037354(v25);
  }
  uint64_t v26 = *(void *)(a6 + 8);
  *(void *)(a1 + 56) = &off_100998428;
  *(void *)(a1 + 64) = v26;
  if (v26) {
    sub_100037354(v26);
  }
  *(unsigned char *)(a1 + 72) = a7;
  *(unsigned char *)(a1 + 73) = a8;
  *(unsigned char *)(a1 + 74) = a9;
  *(unsigned char *)(a1 + 75) = a10;
  *(unsigned char *)(a1 + 76) = a11;
  *(unsigned char *)(a1 + 77) = a12;
  *(unsigned char *)(a1 + 78) = a13;
  *(unsigned char *)(a1 + 79) = a14;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 2;

  return a1;
}

void sub_1005B7884(_Unwind_Exception *a1)
{
  *(void *)(v1 + 40) = v4;
  uint64_t v6 = *(atomic_uint **)(v1 + 48);
  if (v6) {
    sub_1000368F4(v6);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1005B78C0(uint64_t a1, void *a2, void *a3, void *a4, int a5, uint64_t a6, char a7, char a8, char a9, char a10, char a11, char a12, char a13, char a14, char a15)
{
  id v22 = a2;
  id v23 = a3;
  id v24 = a4;
  id v25 = v22;
  *(void *)a1 = v25;
  id v26 = v23;
  *(void *)(a1 + 8) = v26;
  *(_WORD *)(a1 + 16) = 0;
  sub_10071D13C((unsigned char *)(a1 + 20));
  *(void *)(a1 + 40) = &off_100998428;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = &off_100998428;
  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = a7;
  *(unsigned char *)(a1 + 73) = a8;
  *(unsigned char *)(a1 + 74) = a9;
  *(unsigned char *)(a1 + 75) = a10;
  *(unsigned char *)(a1 + 76) = a11;
  *(unsigned char *)(a1 + 77) = a13;
  *(unsigned char *)(a1 + 78) = a14;
  *(unsigned char *)(a1 + 79) = a15;
  *(_DWORD *)(a1 + 80) = a5;
  *(void *)(a1 + 88) = a6;
  *(void *)(a1 + 96) = v24;
  *(_DWORD *)(a1 + 104) = 3;

  return a1;
}

void sub_1005B79E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1005B7A10(uint64_t a1, __int16 a2)
{
  uint64_t v17 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v6 = 0u;
  memset(v4, 0, sizeof(v4));
  sub_1000419CC((uint64_t)v4);
  if (a2) {
    sub_10003AB28((uint64_t)v4);
  }
  if ((a2 & 2) != 0) {
    sub_10003AB28((uint64_t)v4);
  }
  if ((a2 & 4) != 0) {
    sub_10003AB28((uint64_t)v4);
  }
  if ((a2 & 8) != 0) {
    sub_10003AB28((uint64_t)v4);
  }
  if ((a2 & 0x40) != 0) {
    sub_10003AB28((uint64_t)v4);
  }
  if ((a2 & 0x80) != 0) {
    sub_10003AB28((uint64_t)v4);
  }
  if ((a2 & 0x100) != 0) {
    sub_10003AB28((uint64_t)v4);
  }
  if ((a2 & 0x400) != 0) {
    sub_10003AB28((uint64_t)v4);
  }
  std::stringbuf::str();
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1005B7C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1005B7C34(id a1)
{
}

void sub_1005B7C78()
{
}

void sub_1005B7C9C(id a1)
{
}

void sub_1005B7CE0()
{
}

void sub_1005B7D04(id a1)
{
}

void sub_1005B7D48()
{
}

void sub_1005B7D6C(id a1)
{
}

void sub_1005B7DB0()
{
}

void sub_1005B7DD4(id a1)
{
}

void sub_1005B7E18()
{
}

void sub_1005B7E3C(id a1)
{
}

void sub_1005B7E80()
{
}

uint64_t sub_1005B7EA4(void **a1, uint64_t a2, long long *a3, long long *a4, uint64_t a5)
{
  uint64_t v5 = *a1;
  uint64_t v6 = (a2 - (uint64_t)*a1) / 20;
  uint64_t v7 = (uint64_t)*a1 + 20 * v6;
  if (a5 < 1) {
    return v7;
  }
  long long v9 = a3;
  long long v13 = a1[2];
  uint64_t v11 = (uint64_t)(a1 + 2);
  long long v12 = v13;
  unint64_t v14 = *(void *)(v11 - 8);
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v13[-v14] >> 2)) >= a5)
  {
    if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v14 - v7) >> 2)) >= a5)
    {
      uint64_t v20 = (long long *)((char *)a3 + 20 * a5);
      id v21 = *(char **)(v11 - 8);
    }
    else
    {
      uint64_t v20 = (long long *)((char *)a3 + 4 * ((uint64_t)(v14 - v7) >> 2));
      id v21 = *(char **)(v11 - 8);
      if (v20 != a4)
      {
        id v22 = (long long *)((char *)a3 + 4 * ((uint64_t)(v14 - v7) >> 2));
        uint64_t v23 = *(void *)(v11 - 8);
        do
        {
          long long v24 = *v22;
          *(_DWORD *)(v23 + 16) = *((_DWORD *)v22 + 4);
          *(_OWORD *)uint64_t v23 = v24;
          v23 += 20;
          id v22 = (long long *)((char *)v22 + 20);
          v21 += 20;
        }
        while (v22 != a4);
      }
      a1[1] = v21;
      if ((uint64_t)(v14 - v7) < 1) {
        return v7;
      }
    }
    uint64_t v25 = v7 + 20 * a5;
    id v26 = &v21[-20 * a5];
    std::string v27 = v21;
    if ((unint64_t)v26 < v14)
    {
      std::string v27 = v21;
      do
      {
        long long v28 = *(_OWORD *)v26;
        *((_DWORD *)v27 + 4) = *((_DWORD *)v26 + 4);
        *(_OWORD *)std::string v27 = v28;
        v27 += 20;
        v26 += 20;
      }
      while ((unint64_t)v26 < v14);
    }
    a1[1] = v27;
    if (v21 != (char *)v25)
    {
      xpc_object_t v29 = v21 - 20;
      uint64_t v30 = 4 * ((uint64_t)&v21[-v25] >> 2);
      uint64_t v31 = (uint64_t)&v5[20 * v6 - 20];
      do
      {
        long long v32 = *(_OWORD *)(v31 + v30);
        *((_DWORD *)v29 + 4) = *(_DWORD *)(v31 + v30 + 16);
        *(_OWORD *)xpc_object_t v29 = v32;
        v29 -= 20;
        v30 -= 20;
      }
      while (v30);
    }
    if (v20 != a3)
    {
      uint64_t v33 = v7;
      do
      {
        long long v34 = *v9;
        *(_DWORD *)(v33 + 16) = *((_DWORD *)v9 + 4);
        *(_OWORD *)uint64_t v33 = v34;
        v33 += 20;
        long long v9 = (long long *)((char *)v9 + 20);
      }
      while (v9 != v20);
    }
    return v7;
  }
  unint64_t v15 = a5 - 0x3333333333333333 * ((uint64_t)(v14 - (void)v5) >> 2);
  if (v15 > 0xCCCCCCCCCCCCCCCLL) {
    abort();
  }
  unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((v12 - v5) >> 2);
  uint64_t v17 = 2 * v16;
  if (2 * v16 <= v15) {
    uint64_t v17 = v15;
  }
  if (v16 >= 0x666666666666666) {
    unint64_t v18 = 0xCCCCCCCCCCCCCCCLL;
  }
  else {
    unint64_t v18 = v17;
  }
  if (v18) {
    uint64_t v19 = (char *)sub_10003767C(v11, v18);
  }
  else {
    uint64_t v19 = 0;
  }
  long long v35 = &v19[20 * v6];
  long long v36 = &v35[20 * a5];
  uint64_t v37 = 20 * a5;
  long long v38 = v35;
  do
  {
    long long v39 = *v9;
    *((_DWORD *)v38 + 4) = *((_DWORD *)v9 + 4);
    *(_OWORD *)long long v38 = v39;
    v38 += 20;
    long long v9 = (long long *)((char *)v9 + 20);
    v37 -= 20;
  }
  while (v37);
  long long v40 = *a1;
  long long v41 = v35;
  if (*a1 != (void *)v7)
  {
    uint64_t v42 = v7;
    uint64_t v43 = v35;
    do
    {
      long long v41 = v43 - 20;
      long long v44 = *(_OWORD *)(v42 - 20);
      *((_DWORD *)v43 - 1) = *(_DWORD *)(v42 - 4);
      *(_OWORD *)(v43 - 20) = v44;
      v42 -= 20;
      v43 -= 20;
    }
    while ((void *)v42 != v40);
  }
  long long v45 = &v19[20 * v18];
  for (uint64_t i = a1[1]; (void *)v7 != i; v7 += 20)
  {
    long long v47 = *(_OWORD *)v7;
    *((_DWORD *)v36 + 4) = *(_DWORD *)(v7 + 16);
    *(_OWORD *)long long v36 = v47;
    v36 += 20;
  }
  id v48 = *a1;
  *a1 = v41;
  a1[1] = v36;
  a1[2] = v45;
  if (v48) {
    operator delete(v48);
  }
  return (uint64_t)v35;
}

char *sub_1005B8170(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 1)
  {
    long long v13 = *(void **)a1;
    if (a5 + ((uint64_t)(v12 - *(void *)a1) >> 1) < 0) {
      abort();
    }
    uint64_t v14 = (__dst - (uint64_t)v13) >> 1;
    unint64_t v15 = v10 - (void)v13;
    if (v15 <= a5 + ((uint64_t)(v12 - *(void *)a1) >> 1)) {
      unint64_t v16 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 1);
    }
    else {
      unint64_t v16 = v15;
    }
    if (v15 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v17 = v16;
    }
    uint64_t v37 = v9;
    if (v17) {
      unint64_t v18 = (char *)sub_1002C5544(v9, v17);
    }
    else {
      unint64_t v18 = 0;
    }
    long long v28 = &v18[2 * v14];
    std::string __p = v18;
    long long v34 = v28;
    long long v36 = &v18[2 * v17];
    uint64_t v29 = 2 * a5;
    uint64_t v30 = &v28[2 * a5];
    do
    {
      __int16 v31 = *(_WORD *)v7;
      v7 += 2;
      *(_WORD *)long long v28 = v31;
      v28 += 2;
      v29 -= 2;
    }
    while (v29);
    long long v35 = v30;
    uint64_t v5 = sub_1005B8374((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 1) & 0xFFFFFFFFFFFFFFFELL;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 1;
  if (v20 >= a5)
  {
    id v21 = &__src[2 * a5];
    uint64_t v23 = *(char **)(v9 - 8);
LABEL_18:
    long long v24 = &v5[2 * a5];
    uint64_t v25 = &v23[-2 * a5];
    id v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      id v26 = v23;
      do
      {
        __int16 v27 = *(_WORD *)v25;
        v25 += 2;
        *(_WORD *)id v26 = v27;
        v26 += 2;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-2 * ((v23 - v24) >> 1)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  id v21 = &__src[2 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[2 * v20], a4 - v21);
  }
  uint64_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_18;
  }
  return v5;
}

void sub_1005B833C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1005B8374(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(char **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    long long v8 = __src;
    uint64_t v7 = *(char **)(a2 + 8);
    do
    {
      __int16 v9 = *((_WORD *)v8 - 1);
      v8 -= 2;
      *((_WORD *)v7 - 1) = v9;
      v7 -= 2;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    uint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  long long v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  uint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  unint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

long long *sub_1005B843C(uint64_t a1, long long *a2, std::string *a3, long long *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v11 = *(void *)(a1 + 16);
    uint64_t v9 = a1 + 16;
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      uint64_t v20 = v12 - (void)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)a2) >> 3)) >= a5)
      {
        id v21 = (long long *)&a3[a5];
      }
      else
      {
        id v21 = (long long *)(&a3->__r_.__value_.__l.__data_ + ((uint64_t)(v12 - (void)a2) >> 3));
        *(void *)(a1 + 8) = sub_1002B3488(v9, v21, a4, *(char **)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      sub_1005B85FC(a1, (uint64_t)v5, v12, (uint64_t)v5 + 24 * a5);
      sub_10048E604(a3, (std::string *)v21, (std::string *)v5);
    }
    else
    {
      long long v13 = *(long long **)a1;
      unint64_t v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *(void *)a1) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL) {
        abort();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v13) >> 3);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - (uint64_t)v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v27 = v9;
      if (v18) {
        uint64_t v19 = (char *)sub_1002B3440(v9, v18);
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v23 = v19;
      long long v24 = &v19[24 * v15];
      uint64_t v25 = v24;
      id v26 = &v19[24 * v18];
      sub_1005B866C(&v23, (long long *)a3, a5);
      uint64_t v5 = sub_1005B8700((long long **)a1, &v23, v5);
      sub_1002B4440((uint64_t)&v23);
    }
  }
  return v5;
}

void sub_1005B85DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005B85FC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      long long v10 = *(_OWORD *)v9;
      *(void *)(v8 + 16) = *(void *)(v9 + 16);
      *(_OWORD *)uint64_t v8 = v10;
      v8 += 24;
      *(void *)(v9 + 8) = 0;
      *(void *)(v9 + 16) = 0;
      *(void *)unint64_t v9 = 0;
      v9 += 24;
    }
    while (v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_1005B87C4((uint64_t)&v12, a2, v7, v6);
}

void *sub_1005B866C(void *result, long long *a2, uint64_t a3)
{
  int v3 = result;
  uint64_t v4 = result[2];
  if (a3)
  {
    uint64_t v6 = v4 + 24 * a3;
    uint64_t v7 = 24 * a3;
    do
    {
      if (*((char *)a2 + 23) < 0)
      {
        uint64_t result = sub_10003B098((unsigned char *)v4, *(void **)a2, *((void *)a2 + 1));
      }
      else
      {
        long long v8 = *a2;
        *(void *)(v4 + 16) = *((void *)a2 + 2);
        *(_OWORD *)uint64_t v4 = v8;
      }
      v4 += 24;
      a2 = (long long *)((char *)a2 + 24);
      v7 -= 24;
    }
    while (v7);
    uint64_t v4 = v6;
  }
  _DWORD v3[2] = v4;
  return result;
}

void sub_1005B86F8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

long long *sub_1005B8700(long long **a1, void *a2, long long *a3)
{
  uint64_t result = (long long *)a2[1];
  uint64_t v5 = *a1;
  uint64_t v6 = result;
  if (*a1 != a3)
  {
    uint64_t v7 = a3;
    uint64_t v8 = a2[1];
    do
    {
      uint64_t v6 = (long long *)(v8 - 24);
      long long v9 = *(long long *)((char *)v7 - 24);
      *(void *)(v8 - 8) = *((void *)v7 - 1);
      *(_OWORD *)(v8 - 24) = v9;
      *((void *)v7 - 2) = 0;
      *((void *)v7 - 1) = 0;
      *((void *)v7 - 3) = 0;
      uint64_t v7 = (long long *)((char *)v7 - 24);
      v8 -= 24;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  long long v10 = a1[1];
  uint64_t v11 = a2[2];
  if (v10 != a3)
  {
    do
    {
      long long v12 = *a3;
      *(void *)(v11 + 16) = *((void *)a3 + 2);
      *(_OWORD *)uint64_t v11 = v12;
      v11 += 24;
      *((void *)a3 + 1) = 0;
      *((void *)a3 + 2) = 0;
      *(void *)a3 = 0;
      a3 = (long long *)((char *)a3 + 24);
    }
    while (a3 != v10);
    uint64_t v6 = (long long *)a2[1];
  }
  a2[2] = v11;
  long long v13 = *a1;
  *a1 = v6;
  a2[1] = v13;
  unint64_t v14 = a1[1];
  a1[1] = (long long *)a2[2];
  a2[2] = v14;
  unint64_t v15 = a1[2];
  a1[2] = (long long *)a2[3];
  a2[3] = v15;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1005B87C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v6 = a3;
    do
    {
      uint64_t v7 = a4 - 24;
      if (*(char *)(a4 - 1) < 0) {
        operator delete(*(void **)v7);
      }
      long long v8 = *(_OWORD *)(v6 - 24);
      *(void *)(v7 + 16) = *(void *)(v6 - 8);
      *(_OWORD *)uint64_t v7 = v8;
      *(unsigned char *)(v6 - 1) = 0;
      *(unsigned char *)(v6 - 24) = 0;
      a4 = v7;
      v6 -= 24;
    }
    while (v6 != a2);
  }
  return a3;
}

void sub_1005B884C(id a1)
{
}

void sub_1005B8890()
{
}

void sub_1005B88B4(id a1)
{
}

void sub_1005B88F8()
{
}

void sub_1005B891C(id a1)
{
}

void sub_1005B8960()
{
}

void sub_1005B8984(id a1)
{
}

void sub_1005B89C8()
{
}

void sub_1005B89EC(id a1)
{
}

void sub_1005B8A30()
{
}

void sub_1005B8A54(id a1)
{
}

void sub_1005B8A98()
{
}

void sub_1005B8ABC(id a1)
{
}

void sub_1005B8B00()
{
}

void sub_1005B8B24(id a1)
{
}

void sub_1005B8B68()
{
}

void sub_1005B8B8C(id a1)
{
}

void sub_1005B8BD0()
{
}

void sub_1005B8BF4(id a1)
{
}

void sub_1005B8C38()
{
}

void sub_1005B8C5C(id a1)
{
}

void sub_1005B8DEC()
{
}

uint64_t *sub_1005B8E10(uint64_t **a1, uint64_t a2)
{
  int v3 = sub_10004D3B8(a1, (uint64_t *)a2);
  sub_1000486F0(a2 + 48, *(void **)(a2 + 56));
  operator delete((void *)a2);
  return v3;
}

uint64_t *sub_1005B8E50(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t v9 = 0;
  uint64_t v6 = (uint64_t **)sub_10004A0BC((uint64_t)a1, &v9, uu1);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1005B8EF4((uint64_t)a1, a4, v8);
    sub_100036CA0(a1, v9, v6, (uint64_t *)v8[0]);
    return (uint64_t *)v8[0];
  }
  return result;
}

void sub_1005B8EF4(uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  uint64_t v6 = a3 + 1;
  uint64_t v7 = (unsigned __int8 *)operator new(0x48uLL);
  *a3 = v7;
  void *v6 = v5;
  *((unsigned char *)a3 + 16) = 0;
  uuid_copy(v7 + 32, *a2);
  *((void *)v7 + 7) = 0;
  *((void *)v7 + 8) = 0;
  *((void *)v7 + 6) = v7 + 56;
  *((unsigned char *)a3 + 16) = 1;
}

void sub_1005B8F70(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_1005B8F8C(v2, v3);
  _Unwind_Resume(a1);
}

void sub_1005B8F8C(uint64_t a1, void **a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    sub_1000486F0((uint64_t)(a2 + 6), a2[7]);
  }
  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

_OWORD *sub_1005B8FE8(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v9 = 0;
  uint64_t v5 = (void **)sub_1000314CC((uint64_t)a1, &v9, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x38uLL);
    void v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_100036CA0(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

unsigned __int8 *sub_1005B9080(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v3 = a1;
  if (a1 != a2)
  {
    while (!sub_10022A44C(v3 + 28, a3))
    {
      uint64_t v6 = (unsigned __int8 *)*((void *)v3 + 1);
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = *(unsigned __int8 **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (unsigned __int8 *)*((void *)v3 + 2);
          BOOL v8 = *(void *)v7 == (void)v3;
          int v3 = v7;
        }
        while (!v8);
      }
      int v3 = v7;
      if (v7 == a2) {
        return a2;
      }
    }
  }
  return v3;
}

void sub_1005B9140(float a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(float *)a3 = a1;
  *(void *)(a3 + 4) = a4;
}

void sub_1005B9158()
{
  sub_1002B80C0(&stru_100A19DC8);
  __cxa_atexit((void (*)(void *))sub_1002B812C, &stru_100A19DC8, (void *)&_mh_execute_header);
}

uint64_t sub_1005B91C4(uint64_t a1, uint64_t a2, void *a3, __int16 a4, char a5, int a6)
{
  id v11 = a3;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v11;
  *(_WORD *)(a1 + 16) = a4;
  *(unsigned char *)(a1 + 18) = a5;
  *(_DWORD *)(a1 + 20) = a6;
  *(void *)(a1 + 24) = 0x300000000;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 120) = 0;
  *(_WORD *)(a1 + 128) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(unsigned char *)(a1 + 112) = 0;
  return a1;
}

uint64_t sub_1005B9250(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = qword_100A1A008;
  if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = off_1009B7C68[*(unsigned int *)(a1 + 32)];
    uint64_t v6 = a2;
    uint64_t v7 = off_1009B7C68[a2];
    BOOL v8 = off_1009B7CB0[*(unsigned int *)(a1 + 48)];
    uint64_t v9 = *(void *)(a1 + 8);
    int v11 = 136446978;
    long long v12 = v5;
    __int16 v13 = 2082;
    unint64_t v14 = v7;
    __int16 v15 = 2082;
    unint64_t v16 = v8;
    __int16 v17 = 2114;
    uint64_t v18 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Protocol state change (P: %{public}s => %{public}s / L: %{public}s) for device \"%{public}@\"", (uint8_t *)&v11, 0x2Au);
  }
  else
  {
    uint64_t v6 = a2;
  }
  *(_DWORD *)(a1 + 32) = a2;
  return qword_1007BFAE8[v6];
}

uint64_t sub_1005B9364(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = qword_100A1A008;
  if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = off_1009B7C68[*(unsigned int *)(a1 + 32)];
    uint64_t v6 = off_1009B7CB0[*(unsigned int *)(a1 + 48)];
    uint64_t v7 = a2;
    BOOL v8 = off_1009B7CB0[a2];
    uint64_t v9 = *(void *)(a1 + 8);
    int v11 = 136446978;
    long long v12 = v5;
    __int16 v13 = 2082;
    unint64_t v14 = v6;
    __int16 v15 = 2082;
    unint64_t v16 = v8;
    __int16 v17 = 2114;
    uint64_t v18 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Link state change (P: %{public}s / L: %{public}s => %{public}s) for device \"%{public}@\"", (uint8_t *)&v11, 0x2Au);
  }
  else
  {
    uint64_t v7 = a2;
  }
  *(_DWORD *)(a1 + 48) = a2;
  return qword_1007BFB30[v7];
}

void sub_1005B9478(uint64_t a1)
{
  uint64_t v2 = qword_100A1A008;
  if (os_log_type_enabled((os_log_t)qword_100A1A008, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = off_1009B7C68[*(unsigned int *)(a1 + 32)];
    uint64_t v4 = off_1009B7CB0[*(unsigned int *)(a1 + 48)];
    uint64_t v5 = *(void *)(a1 + 8);
    int v6 = 136446722;
    uint64_t v7 = v3;
    __int16 v8 = 2082;
    uint64_t v9 = v4;
    __int16 v10 = 2114;
    uint64_t v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: State is (P: %{public}s / L: %{public}s) for device \"%{public}@\"", (uint8_t *)&v6, 0x20u);
  }
}

__n128 sub_1005B9558(uint64_t a1, uint64_t a2, int a3, _OWORD *a4, _OWORD *a5, int a6, __n128 *a7, __n128 *a8)
{
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = &off_1009B7CE0;
  *(void *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 24) = a6;
  *(unsigned char *)(a1 + 92) = a3;
  if (!a3)
  {
    *(_OWORD *)(a1 + 44) = *a4;
    *(_OWORD *)(a1 + 28) = *a5;
    __n128 result = *a7;
    *(__n128 *)(a1 + 60) = *a7;
    if (a8)
    {
      __n128 result = *a8;
      *(__n128 *)(a1 + 76) = *a8;
    }
  }
  return result;
}

void sub_1005B95B8(uint64_t a1)
{
  if (qword_1009F8080 != -1) {
    dispatch_once(&qword_1009F8080, &stru_1009B7D08);
  }
  uint64_t v2 = off_1009F8078;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 92);
  uint64_t v5 = *(unsigned int *)(a1 + 24);

  sub_1004A635C((uint64_t)v2, v3, v4, a1 + 44, (_OWORD *)(a1 + 28), v5, (_OWORD *)(a1 + 60));
}

void sub_1005B9638()
{
}

void sub_1005B964C(id a1)
{
}

void sub_1005B9690()
{
}

uint64_t sub_1005B96B4(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = (std::string *)(a1 + 8);
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v5 = (std::string *)(a1 + 40);
  *(_OWORD *)(a1 + 88) = 0u;
  int v6 = (std::string *)(a1 + 88);
  *(_DWORD *)(a1 + 116) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 120) = 1;
  *(unsigned char *)(a1 + 124) = 0;
  uint64_t v46 = (std::string *)(a1 + 64);
  uint64_t v47 = a1 + 136;
  sub_1005D3BE0(a1 + 136);
  sub_1005D3BE0(a1 + 560);
  sub_10004191C((void *)(a1 + 984), "UNKNOWN");
  uint64_t v79 = 0;
  memset(v78, 0, sizeof(v78));
  long long v76 = 0u;
  *(_OWORD *)__src = 0u;
  sub_1005D3BE0((uint64_t)&v76);
  uint64_t v75 = 0;
  long long v73 = 0u;
  memset(v74, 0, sizeof(v74));
  sub_1005D3BE0((uint64_t)&v73);
  xpc_object_t value = xpc_dictionary_get_value(a2, "kMessageGUID");
  __int16 v8 = value;
  if (value && xpc_get_type(value) == (xpc_type_t)&_xpc_type_string)
  {
    string_ptr = xpc_string_get_string_ptr(v8);
    std::string::assign(v4, string_ptr);
  }
  xpc_object_t v10 = xpc_dictionary_get_value(a2, "kBody");
  uint64_t v11 = v10;
  if (v10 && xpc_get_type(v10) == (xpc_type_t)&_xpc_type_string)
  {
    long long v12 = xpc_string_get_string_ptr(v11);
    std::string::assign(v6, v12);
    *(_DWORD *)(a1 + 112) = strlen(v12);
  }
  xpc_object_t v13 = xpc_dictionary_get_value(a2, "kSubject");
  unint64_t v14 = v13;
  if (v13 && xpc_get_type(v13) == (xpc_type_t)&_xpc_type_string)
  {
    __int16 v15 = xpc_string_get_string_ptr(v14);
    std::string::assign(v46, v15);
  }
  xpc_object_t v16 = xpc_dictionary_get_value(a2, "kSenderFormattedName");
  __int16 v17 = v16;
  if (v16)
  {
    if (xpc_get_type(v16) == (xpc_type_t)&_xpc_type_string)
    {
      long long v36 = (char *)xpc_string_get_string_ptr(v17);
      if (v36)
      {
        sub_10004191C(&v72, v36);
        std::string::operator=((std::string *)__src, &v72);
        if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v72.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  xpc_object_t v18 = xpc_dictionary_get_value(a2, "kSenderEmail");
  uint64_t v19 = v18;
  if (v18 && xpc_get_type(v18) == (xpc_type_t)&_xpc_type_string)
  {
    uint64_t v37 = (char *)xpc_string_get_string_ptr(v19);
    if (v37)
    {
      memset(v66, 0, 24);
      std::string::assign((std::string *)v66, v37);
      if ((v66[23] & 0x80000000) != 0)
      {
        sub_10003B098(__p, *(void **)v66, *(unint64_t *)&v66[8]);
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)v66;
        uint64_t v71 = *(void *)&v66[16];
      }
      sub_10037734C((uint64_t)&v76, (long long *)__p);
      if (SHIBYTE(v71) < 0) {
        operator delete(__p[0]);
      }
      if ((v66[23] & 0x80000000) != 0) {
        operator delete(*(void **)v66);
      }
    }
    if (SBYTE7(v78[0]) < 0)
    {
      sub_10003B098(v66, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      *(_OWORD *)size_t v66 = *(_OWORD *)__src;
      *(void *)&v66[16] = *(void *)&v78[0];
    }
    if ((v66[23] & 0x80000000) != 0)
    {
      uint64_t v42 = *(void *)&v66[8];
      operator delete(*(void **)v66);
      if (!v37 || v42) {
        goto LABEL_14;
      }
    }
    else if (!v37 || v66[23])
    {
      goto LABEL_14;
    }
    sub_10004191C(&v69, v37);
    std::string::operator=((std::string *)__src, &v69);
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v69.__r_.__value_.__l.__data_);
    }
  }
LABEL_14:
  xpc_object_t v20 = xpc_dictionary_get_value(a2, "kSenderPhoneNumber");
  id v21 = v20;
  if (!v20 || xpc_get_type(v20) != (xpc_type_t)&_xpc_type_string) {
    goto LABEL_16;
  }
  long long v38 = (char *)xpc_string_get_string_ptr(v21);
  if (v38)
  {
    uint64_t v68 = 0;
    *(_OWORD *)char v67 = 0u;
    memset(v66, 0, sizeof(v66));
    std::string::assign((std::string *)v66, v38);
    if ((v66[23] & 0x80000000) != 0)
    {
      sub_10003B098(v61, *(void **)v66, *(unint64_t *)&v66[8]);
    }
    else
    {
      *(_OWORD *)uint64_t v61 = *(_OWORD *)v66;
      uint64_t v62 = *(void *)&v66[16];
    }
    int v63 = *(_DWORD *)&v66[24];
    if (SHIBYTE(v68) < 0)
    {
      sub_10003B098(&v64, v67[0], (unint64_t)v67[1]);
    }
    else
    {
      long long v64 = *(_OWORD *)v67;
      uint64_t v65 = v68;
    }
    sub_1003767F0((uint64_t *)&v76, (long long *)v61);
    if (SHIBYTE(v65) < 0) {
      operator delete((void *)v64);
    }
    if (SHIBYTE(v62) < 0) {
      operator delete(v61[0]);
    }
    if (SHIBYTE(v68) < 0) {
      operator delete(v67[0]);
    }
    if ((v66[23] & 0x80000000) != 0) {
      operator delete(*(void **)v66);
    }
  }
  if (SBYTE7(v78[0]) < 0)
  {
    sub_10003B098(v66, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    *(_OWORD *)size_t v66 = *(_OWORD *)__src;
    *(void *)&v66[16] = *(void *)&v78[0];
  }
  if ((v66[23] & 0x80000000) != 0)
  {
    uint64_t v43 = *(void *)&v66[8];
    operator delete(*(void **)v66);
    if (!v38 || v43) {
      goto LABEL_16;
    }
  }
  else if (!v38 || v66[23])
  {
    goto LABEL_16;
  }
  sub_10004191C(&v60, v38);
  std::string::operator=((std::string *)__src, &v60);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
LABEL_16:
  if (SBYTE7(v78[0]) < 0)
  {
    sub_10003B098(&__str, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)__src;
    __str.__r_.__value_.__r.__words[2] = *(void *)&v78[0];
  }
  std::string::operator=((std::string *)((char *)v78 + 8), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  xpc_object_t v22 = xpc_dictionary_get_value(a2, "kRecipientFormattedName");
  uint64_t v23 = v22;
  if (v22)
  {
    if (xpc_get_type(v22) == (xpc_type_t)&_xpc_type_string)
    {
      long long v39 = (char *)xpc_string_get_string_ptr(v23);
      if (v39)
      {
        sub_10004191C(&v58, v39);
        std::string::operator=((std::string *)v74, &v58);
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v58.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  xpc_object_t v24 = xpc_dictionary_get_value(a2, "kRecipientEmail");
  uint64_t v25 = v24;
  if (v24 && xpc_get_type(v24) == (xpc_type_t)&_xpc_type_string)
  {
    long long v40 = (char *)xpc_string_get_string_ptr(v25);
    if (v40)
    {
      memset(v66, 0, 24);
      std::string::assign((std::string *)v66, v40);
      if ((v66[23] & 0x80000000) != 0)
      {
        sub_10003B098(v56, *(void **)v66, *(unint64_t *)&v66[8]);
      }
      else
      {
        *(_OWORD *)id v56 = *(_OWORD *)v66;
        uint64_t v57 = *(void *)&v66[16];
      }
      sub_10037734C((uint64_t)&v73, (long long *)v56);
      if (SHIBYTE(v57) < 0) {
        operator delete(v56[0]);
      }
      if ((v66[23] & 0x80000000) != 0) {
        operator delete(*(void **)v66);
      }
    }
    if ((v74[23] & 0x80000000) != 0)
    {
      sub_10003B098(v66, *(void **)v74, *(unint64_t *)&v74[8]);
    }
    else
    {
      *(_OWORD *)size_t v66 = *(_OWORD *)v74;
      *(void *)&v66[16] = *(void *)&v74[16];
    }
    if ((v66[23] & 0x80000000) != 0)
    {
      uint64_t v44 = *(void *)&v66[8];
      operator delete(*(void **)v66);
      if (!v40 || v44) {
        goto LABEL_25;
      }
    }
    else if (!v40 || v66[23])
    {
      goto LABEL_25;
    }
    sub_10004191C(&v55, v40);
    std::string::operator=((std::string *)v74, &v55);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v55.__r_.__value_.__l.__data_);
    }
  }
LABEL_25:
  xpc_object_t v26 = xpc_dictionary_get_value(a2, "kRecipientPhoneNumber");
  uint64_t v27 = v26;
  if (!v26 || xpc_get_type(v26) != (xpc_type_t)&_xpc_type_string) {
    goto LABEL_27;
  }
  long long v41 = (char *)xpc_string_get_string_ptr(v27);
  if (v41)
  {
    uint64_t v68 = 0;
    *(_OWORD *)char v67 = 0u;
    memset(v66, 0, sizeof(v66));
    std::string::assign((std::string *)v66, v41);
    if ((v66[23] & 0x80000000) != 0)
    {
      sub_10003B098(v50, *(void **)v66, *(unint64_t *)&v66[8]);
    }
    else
    {
      *(_OWORD *)int v50 = *(_OWORD *)v66;
      uint64_t v51 = *(void *)&v66[16];
    }
    int v52 = *(_DWORD *)&v66[24];
    if (SHIBYTE(v68) < 0)
    {
      sub_10003B098(&v53, v67[0], (unint64_t)v67[1]);
    }
    else
    {
      long long v53 = *(_OWORD *)v67;
      uint64_t v54 = v68;
    }
    sub_1003767F0((uint64_t *)&v73, (long long *)v50);
    if (SHIBYTE(v54) < 0) {
      operator delete((void *)v53);
    }
    if (SHIBYTE(v51) < 0) {
      operator delete(v50[0]);
    }
    if (SHIBYTE(v68) < 0) {
      operator delete(v67[0]);
    }
    if ((v66[23] & 0x80000000) != 0) {
      operator delete(*(void **)v66);
    }
  }
  if ((v74[23] & 0x80000000) != 0)
  {
    sub_10003B098(v66, *(void **)v74, *(unint64_t *)&v74[8]);
  }
  else
  {
    *(_OWORD *)size_t v66 = *(_OWORD *)v74;
    *(void *)&v66[16] = *(void *)&v74[16];
  }
  if ((v66[23] & 0x80000000) != 0)
  {
    uint64_t v45 = *(void *)&v66[8];
    operator delete(*(void **)v66);
    if (!v41 || v45) {
      goto LABEL_27;
    }
  }
  else if (!v41 || v66[23])
  {
    goto LABEL_27;
  }
  sub_10004191C(&v49, v41);
  std::string::operator=((std::string *)v74, &v49);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
LABEL_27:
  if ((v74[23] & 0x80000000) != 0) {
    sub_10003B098(&__dst, *(void **)v74, *(unint64_t *)&v74[8]);
  }
  else {
    std::string __dst = *(std::string *)v74;
  }
  std::string::operator=((std::string *)&v74[24], &__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  xpc_object_t v28 = xpc_dictionary_get_value(a2, "kMessageId");
  uint64_t v29 = v28;
  if (v28 && xpc_get_type(v28) == (xpc_type_t)&_xpc_type_int64) {
    *(void *)(a1 + 128) = xpc_int64_get_value(v29);
  }
  xpc_object_t v30 = xpc_dictionary_get_value(a2, "kAppType");
  __int16 v31 = v30;
  if (v30 && xpc_get_type(v30) == (xpc_type_t)&_xpc_type_string)
  {
    long long v32 = xpc_string_get_string_ptr(v31);
    std::string::assign(v5, v32);
  }
  xpc_object_t v33 = xpc_dictionary_get_value(a2, "kIsRead");
  long long v34 = v33;
  if (v33 && xpc_get_type(v33) == (xpc_type_t)&_xpc_type_BOOL) {
    *(unsigned char *)(a1 + 122) = xpc_BOOL_get_value(v34);
  }
  *(void *)(a1 + 32) = xpc_dictionary_get_date(a2, "kDate") / 0x3B9ACA00uLL;
  sub_1005BA2D4(v47, (uint64_t)&v76);
  sub_1005BA2D4(a1 + 560, (uint64_t)&v73);
  *(unsigned char *)(a1 + 123) = 0;
  sub_1005D428C(&v73);
  sub_1005D428C(&v76);
  return a1;
}

void sub_1005BA0A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  sub_100376850((uint64_t)&a52);
  sub_1005D428C(&a68);
  sub_1005D428C(&STACK[0x370]);
  if (v68[1007] < 0) {
    operator delete(*a10);
  }
  sub_1005D428C(v72);
  sub_1005D428C(a12);
  if (v68[111] < 0) {
    operator delete(*v71);
  }
  if (v68[87] < 0) {
    operator delete(*a11);
  }
  if (v68[63] < 0) {
    operator delete(*v70);
  }
  if (v68[31] < 0) {
    operator delete(*v69);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1005BA2D4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  std::string::operator=((std::string *)(a1 + 40), (const std::string *)(a2 + 40));
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
  std::string::operator=((std::string *)(a1 + 88), (const std::string *)(a2 + 88));
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(a2 + 112));
  std::string::operator=((std::string *)(a1 + 136), (const std::string *)(a2 + 136));
  std::string::operator=((std::string *)(a1 + 160), (const std::string *)(a2 + 160));
  std::string::operator=((std::string *)(a1 + 184), (const std::string *)(a2 + 184));
  std::string::operator=((std::string *)(a1 + 208), (const std::string *)(a2 + 208));
  if (a1 == a2)
  {
    std::string::operator=((std::string *)(a1 + 304), (const std::string *)(a2 + 304));
    std::string::operator=((std::string *)(a1 + 328), (const std::string *)(a2 + 328));
    std::string::operator=((std::string *)(a1 + 352), (const std::string *)(a2 + 352));
  }
  else
  {
    sub_1005BB40C(a1 + 232, *(std::string **)(a2 + 232), *(std::string **)(a2 + 240), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 240) - *(void *)(a2 + 232)) >> 3));
    sub_1005BB7CC(a1 + 256, *(std::string **)(a2 + 256), *(std::string **)(a2 + 264), (uint64_t)(*(void *)(a2 + 264) - *(void *)(a2 + 256)) >> 7);
    sub_1005BBAE8(a1 + 280, *(std::string **)(a2 + 280), *(long long **)(a2 + 288), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 288) - *(void *)(a2 + 280)) >> 3));
    std::string::operator=((std::string *)(a1 + 304), (const std::string *)(a2 + 304));
    std::string::operator=((std::string *)(a1 + 328), (const std::string *)(a2 + 328));
    std::string::operator=((std::string *)(a1 + 352), (const std::string *)(a2 + 352));
    sub_1005BBC5C(a1 + 376, *(std::string **)(a2 + 376), *(long long **)(a2 + 384), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 384) - *(void *)(a2 + 376)) >> 3));
  }
  std::string::operator=((std::string *)(a1 + 400), (const std::string *)(a2 + 400));
  return a1;
}

uint64_t sub_1005BA450(uint64_t a1, const std::string *a2)
{
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  uint64_t v4 = (std::string *)(a1 + 88);
  *(_DWORD *)(a1 + 116) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 120) = 1;
  *(unsigned char *)(a1 + 124) = 0;
  uint64_t v96 = a1 + 136;
  sub_1005D3BE0(a1 + 136);
  sub_1005D3BE0(a1 + 560);
  sub_10004191C((void *)(a1 + 984), "UNKNOWN");
  memset(&__str, 0, sizeof(__str));
  memset(&v113, 0, sizeof(v113));
  memset(&v112, 0, sizeof(v112));
  memset(&v111, 0, sizeof(v111));
  uint64_t v5 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t size = a2->__r_.__value_.__l.__size_;
    if (size)
    {
      int v6 = (const std::string *)a2->__r_.__value_.__r.__words[0];
      goto LABEL_6;
    }
LABEL_94:
    *(void *)a1 = ++qword_1009FBD10;
    *(void *)(a1 + 32) = time(0);
    std::string::operator=(v4, &__str);
    if (*(char *)(a1 + 111) < 0) {
      uint64_t v45 = *(void *)(a1 + 96);
    }
    else {
      LODWORD(v45) = *(unsigned __int8 *)(a1 + 111);
    }
    *(_DWORD *)(a1 + 112) = v45;
    uint64_t v109 = 0;
    memset(v108, 0, sizeof(v108));
    sub_1005D3BE0((uint64_t)v108);
    char v46 = HIBYTE(v113.__r_.__value_.__r.__words[2]);
    if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v47 = HIBYTE(v113.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v47 = v113.__r_.__value_.__l.__size_;
    }
    id v48 = &v113;
    if (!v47)
    {
      id v48 = &v112;
      char v46 = HIBYTE(v112.__r_.__value_.__r.__words[2]);
    }
    if (v46 < 0)
    {
      if (v47) {
        std::string::size_type v49 = v113.__r_.__value_.__l.__size_;
      }
      else {
        std::string::size_type v49 = v112.__r_.__value_.__l.__size_;
      }
      sub_10003B098(&__dst, v48->__r_.__value_.__l.__data_, v49);
    }
    else
    {
      std::string __dst = *v48;
    }
    std::string::operator=((std::string *)&v108[16], &__dst);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    std::string::size_type v50 = HIBYTE(v112.__r_.__value_.__r.__words[2]);
    if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v50 = v112.__r_.__value_.__l.__size_;
    }
    if (v50)
    {
      uint64_t v106 = 0;
      *(_OWORD *)int v105 = 0u;
      memset(v104, 0, sizeof(v104));
      std::string::operator=((std::string *)v104, &v112);
      if ((v104[23] & 0x80000000) != 0)
      {
        sub_10003B098(v99, *(void **)v104, *(unint64_t *)&v104[8]);
      }
      else
      {
        *(_OWORD *)long long v99 = *(_OWORD *)v104;
        uint64_t v100 = *(void *)&v104[16];
      }
      int v101 = *(_DWORD *)&v104[24];
      if (SHIBYTE(v106) < 0)
      {
        sub_10003B098(&__p, v105[0], (unint64_t)v105[1]);
      }
      else
      {
        long long __p = *(_OWORD *)v105;
        uint64_t v103 = v106;
      }
      sub_1003767F0((uint64_t *)v108, (long long *)v99);
      if (SHIBYTE(v103) < 0) {
        operator delete((void *)__p);
      }
      if (SHIBYTE(v100) < 0) {
        operator delete(v99[0]);
      }
      if (SHIBYTE(v106) < 0) {
        operator delete(v105[0]);
      }
      if ((v104[23] & 0x80000000) != 0) {
        operator delete(*(void **)v104);
      }
    }
    std::string::size_type v51 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
    if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v51 = v111.__r_.__value_.__l.__size_;
    }
    if (v51)
    {
      memset(v104, 0, 24);
      std::string::operator=((std::string *)v104, &v111);
      if ((v104[23] & 0x80000000) != 0)
      {
        sub_10003B098(v97, *(void **)v104, *(unint64_t *)&v104[8]);
      }
      else
      {
        *(_OWORD *)uint64_t v97 = *(_OWORD *)v104;
        uint64_t v98 = *(void *)&v104[16];
      }
      sub_10037734C((uint64_t)v108, (long long *)v97);
      if (SHIBYTE(v98) < 0) {
        operator delete(v97[0]);
      }
      if ((v104[23] & 0x80000000) != 0) {
        operator delete(*(void **)v104);
      }
    }
    sub_1005BA2D4(v96, (uint64_t)v108);
    sub_1005D428C(v108);
    goto LABEL_138;
  }
  if (!*((unsigned char *)&a2->__r_.__value_.__s + 23)) {
    goto LABEL_94;
  }
  int v6 = a2;
  uint64_t size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
LABEL_6:
  __int16 v8 = (char *)v6 + size;
  if (size >= 9)
  {
    uint64_t v9 = (std::string *)v6;
    do
    {
      xpc_object_t v10 = (char *)memchr(v9, 66, size - 8);
      if (!v10) {
        break;
      }
      if (*(void *)v10 == 0x534D3A4E49474542 && v10[8] == 71) {
        goto LABEL_15;
      }
      uint64_t v9 = (std::string *)(v10 + 1);
      uint64_t size = v8 - (char *)v9;
    }
    while (v8 - (char *)v9 > 8);
  }
  xpc_object_t v10 = v8;
LABEL_15:
  if (v10 == v8) {
    uint64_t v12 = -1;
  }
  else {
    uint64_t v12 = v10 - (char *)v6;
  }
  if ((v5 & 0x80) != 0)
  {
    xpc_object_t v13 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    uint64_t v5 = a2->__r_.__value_.__l.__size_;
  }
  else
  {
    xpc_object_t v13 = a2;
  }
  if (v5 >= 9)
  {
    unint64_t v14 = (char *)v13 + v5;
    __int16 v15 = (std::string *)v13;
    do
    {
      xpc_object_t v16 = (char *)memchr(v15, 13, v5 - 8);
      if (!v16) {
        break;
      }
      if (*(void *)v16 == 0x534D3A444E450A0DLL && v16[8] == 71)
      {
        uint64_t v18 = v16 - (char *)v13;
        if (v16 == v14) {
          uint64_t v18 = -1;
        }
        if (v12 != -1 && v18 != -1)
        {
          std::string::basic_string((std::string *)v108, a2, v12 + 11, v18 - (v12 + 11), (std::allocator<char> *)v104);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string __str = *(std::string *)v108;
          uint64_t v19 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
          if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
          {
            xpc_object_t v20 = (const std::string *)a2->__r_.__value_.__r.__words[0];
            uint64_t v21 = a2->__r_.__value_.__l.__size_;
          }
          else
          {
            xpc_object_t v20 = a2;
            uint64_t v21 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
          }
          xpc_object_t v22 = (char *)v20 + v21;
          if (v21 >= 10)
          {
            uint64_t v23 = (std::string *)v20;
            do
            {
              xpc_object_t v24 = (char *)memchr(v23, 66, v21 - 9);
              if (!v24) {
                break;
              }
              if (*(void *)v24 == 0x45423A4E49474542 && *((_WORD *)v24 + 4) == 22094) {
                goto LABEL_48;
              }
              uint64_t v23 = (std::string *)(v24 + 1);
              uint64_t v21 = v22 - (char *)v23;
            }
            while (v22 - (char *)v23 > 9);
          }
          xpc_object_t v24 = v22;
LABEL_48:
          if (v24 == v22) {
            uint64_t v26 = -1;
          }
          else {
            uint64_t v26 = v24 - (char *)v20;
          }
          if ((v19 & 0x80) != 0)
          {
            uint64_t v27 = (const std::string *)a2->__r_.__value_.__r.__words[0];
            uint64_t v19 = a2->__r_.__value_.__l.__size_;
          }
          else
          {
            uint64_t v27 = a2;
          }
          if (v19 >= 8)
          {
            xpc_object_t v28 = (char *)v27 + v19;
            uint64_t v29 = (std::string *)v27;
            while (1)
            {
              xpc_object_t v30 = (char *)memchr(v29, 69, v19 - 7);
              if (!v30) {
                break;
              }
              if (*(void *)v30 == 0x564E45423A444E45)
              {
                uint64_t v31 = v30 - (char *)v27;
                if (v30 == v28) {
                  uint64_t v31 = -1;
                }
                if (v26 == -1 || v31 == -1) {
                  goto LABEL_138;
                }
                memset(v108, 0, 24);
                std::string::basic_string((std::string *)v108, a2, v26 + 12, v31 - (v26 + 12), (std::allocator<char> *)v104);
                char v32 = v108[23];
                if (v108[23] >= 0) {
                  uint64_t v33 = v108[23];
                }
                else {
                  uint64_t v33 = *(void *)&v108[8];
                }
                if (v108[23] >= 0) {
                  long long v34 = v108;
                }
                else {
                  long long v34 = *(unsigned char **)v108;
                }
                long long v35 = &v34[v33];
                if (v33 >= 11)
                {
                  uint64_t v36 = v33;
                  uint64_t v37 = v34;
                  do
                  {
                    long long v38 = (char *)memchr(v37, 66, v36 - 10);
                    if (!v38) {
                      break;
                    }
                    if (*(void *)v38 == 0x43563A4E49474542 && *(void *)(v38 + 3) == 0x44524143563A4E49) {
                      goto LABEL_79;
                    }
                    uint64_t v37 = v38 + 1;
                    uint64_t v36 = v35 - (unsigned char *)v37;
                  }
                  while (v35 - (unsigned char *)v37 > 10);
                }
                long long v38 = &v34[v33];
LABEL_79:
                if (v38 == v35) {
                  uint64_t v40 = -1;
                }
                else {
                  uint64_t v40 = v38 - v34;
                }
                if (v33 >= 9)
                {
                  long long v41 = v34;
                  do
                  {
                    uint64_t v42 = (char *)memchr(v41, 69, v33 - 8);
                    if (!v42) {
                      break;
                    }
                    if (*(void *)v42 == 0x524143563A444E45 && v42[8] == 68)
                    {
                      long long v53 = v34;
                      char v44 = 0;
                      uint64_t v54 = v42 - v53;
                      if (v42 == v35) {
                        uint64_t v54 = -1;
                      }
                      if (v40 != -1 && v54 != -1)
                      {
                        memset(v104, 0, 24);
                        std::string::basic_string((std::string *)v104, (const std::string *)v108, v40 + 13, v54 - (v40 + 13), (std::allocator<char> *)&v110);
                        if (v104[23] >= 0) {
                          uint64_t v55 = v104[23];
                        }
                        else {
                          uint64_t v55 = *(void *)&v104[8];
                        }
                        if (v104[23] >= 0) {
                          id v56 = v104;
                        }
                        else {
                          id v56 = *(unsigned char **)v104;
                        }
                        uint64_t v57 = &v56[v55];
                        std::string v58 = &v56[v55];
                        if (v55 >= 4)
                        {
                          uint64_t v59 = v55;
                          std::string v60 = v56;
                          do
                          {
                            std::string v58 = (char *)memchr(v60, 13, v59 - 3);
                            if (!v58) {
                              break;
                            }
                            if (*(_DWORD *)v58 == 978192909) {
                              goto LABEL_163;
                            }
                            std::string v60 = v58 + 1;
                            uint64_t v59 = v57 - (unsigned char *)v60;
                          }
                          while (v57 - (unsigned char *)v60 > 3);
                          std::string v58 = &v56[v55];
                        }
LABEL_163:
                        if (v58 == v57) {
                          std::string::size_type v61 = 3;
                        }
                        else {
                          std::string::size_type v61 = v58 - v56 + 4;
                        }
                        if (v55 >= v61)
                        {
                          int v63 = &v56[v61];
                          std::string::size_type v64 = v55 - v61;
                          if ((uint64_t)(v55 - v61) >= 2)
                          {
                            do
                            {
                              uint64_t v65 = (char *)memchr(v63, 13, v64 - 1);
                              if (!v65) {
                                break;
                              }
                              if (*(_WORD *)v65 == 2573) {
                                goto LABEL_173;
                              }
                              int v63 = v65 + 1;
                              std::string::size_type v64 = v57 - v63;
                            }
                            while (v57 - v63 > 1);
                          }
                          uint64_t v65 = &v56[v55];
LABEL_173:
                          uint64_t v62 = v65 - v56;
                          if (v65 == v57) {
                            uint64_t v62 = -1;
                          }
                        }
                        else
                        {
                          uint64_t v62 = -1;
                        }
                        std::string::basic_string(&v110, (const std::string *)v104, v61, v62 - v61, (std::allocator<char> *)v115);
                        uint64_t v66 = v104[23];
                        char v67 = v104[23];
                        uint64_t v69 = *(void *)&v104[8];
                        uint64_t v68 = *(unsigned char **)v104;
                        std::string v113 = v110;
                        if (v104[23] >= 0) {
                          uint64_t v70 = v104[23];
                        }
                        else {
                          uint64_t v70 = *(void *)&v104[8];
                        }
                        if (v104[23] >= 0) {
                          uint64_t v71 = v104;
                        }
                        else {
                          uint64_t v71 = *(unsigned char **)v104;
                        }
                        if (v70 >= 4)
                        {
                          __int16 v95 = *(unsigned char **)v104;
                          uint64_t v72 = &v71[v70];
                          uint64_t v73 = v70;
                          int64_t v74 = v71;
                          while (1)
                          {
                            uint64_t v75 = (char *)memchr(v74, 84, v73 - 3);
                            if (!v75) {
                              goto LABEL_191;
                            }
                            if (*(_DWORD *)v75 == 978077012) {
                              break;
                            }
                            int64_t v74 = v75 + 1;
                            uint64_t v73 = v72 - (unsigned char *)v74;
                            if (v72 - (unsigned char *)v74 < 4) {
                              goto LABEL_191;
                            }
                          }
                          if (v75 == v72)
                          {
LABEL_191:
                            uint64_t v68 = v95;
                            goto LABEL_192;
                          }
                          uint64_t v76 = v75 - v71;
                          uint64_t v68 = v95;
                          if (v75 - v71 != -1)
                          {
                            std::string::size_type v77 = v76 + 4;
                            if (v70 >= (unint64_t)(v76 + 4))
                            {
                              int v89 = &v71[v77];
                              std::string::size_type v90 = v70 - v77;
                              if ((uint64_t)(v70 - v77) >= 2)
                              {
                                do
                                {
                                  __int16 v91 = (char *)memchr(v89, 13, v90 - 1);
                                  if (!v91) {
                                    break;
                                  }
                                  if (*(_WORD *)v91 == 2573) {
                                    goto LABEL_216;
                                  }
                                  int v89 = v91 + 1;
                                  std::string::size_type v90 = v72 - v89;
                                }
                                while (v72 - v89 > 1);
                              }
                              __int16 v91 = &v71[v70];
LABEL_216:
                              uint64_t v78 = v91 - v71;
                              if (v91 == v72) {
                                uint64_t v78 = -1;
                              }
                            }
                            else
                            {
                              uint64_t v78 = -1;
                            }
                            std::string::basic_string(&v110, (const std::string *)v104, v77, v78 - v77, (std::allocator<char> *)v115);
                            if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(v112.__r_.__value_.__l.__data_);
                            }
                            std::string v112 = v110;
                            uint64_t v66 = v104[23];
                            uint64_t v69 = *(void *)&v104[8];
                            uint64_t v68 = *(unsigned char **)v104;
                            char v67 = v104[23];
                          }
                        }
LABEL_192:
                        if (v67 >= 0) {
                          uint64_t v79 = v66;
                        }
                        else {
                          uint64_t v79 = v69;
                        }
                        if (v67 >= 0) {
                          int64_t v80 = v104;
                        }
                        else {
                          int64_t v80 = v68;
                        }
                        if (v79 >= 6)
                        {
                          int64_t v81 = &v80[v79];
                          uint64_t v82 = v79;
                          uint64_t v83 = v80;
                          do
                          {
                            uint64_t v84 = (char *)memchr(v83, 69, v82 - 5);
                            if (!v84) {
                              break;
                            }
                            if (*(_DWORD *)v84 == 1229016389 && *((_WORD *)v84 + 2) == 14924)
                            {
                              if (v84 != v81)
                              {
                                uint64_t v86 = v84 - v80;
                                if (v84 - v80 != -1)
                                {
                                  std::string::size_type v87 = v86 + 8;
                                  if (v79 >= (unint64_t)(v86 + 8))
                                  {
                                    uint64_t v92 = &v80[v87];
                                    std::string::size_type v93 = v79 - v87;
                                    if ((uint64_t)(v79 - v87) >= 2)
                                    {
                                      do
                                      {
                                        uint64_t v94 = (char *)memchr(v92, 13, v93 - 1);
                                        if (!v94) {
                                          break;
                                        }
                                        if (*(_WORD *)v94 == 2573) {
                                          goto LABEL_226;
                                        }
                                        uint64_t v92 = v94 + 1;
                                        std::string::size_type v93 = v81 - v92;
                                      }
                                      while (v81 - v92 > 1);
                                    }
                                    uint64_t v94 = &v80[v79];
LABEL_226:
                                    uint64_t v88 = v94 - v80;
                                    if (v94 == v81) {
                                      uint64_t v88 = -1;
                                    }
                                  }
                                  else
                                  {
                                    uint64_t v88 = -1;
                                  }
                                  std::string::basic_string(&v110, (const std::string *)v104, v87, v88 - v87, (std::allocator<char> *)v115);
                                  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
                                    operator delete(v111.__r_.__value_.__l.__data_);
                                  }
                                  std::string v111 = v110;
                                  char v67 = v104[23];
                                }
                              }
                              break;
                            }
                            uint64_t v83 = v84 + 1;
                            uint64_t v82 = v81 - (unsigned char *)v83;
                          }
                          while (v81 - (unsigned char *)v83 >= 6);
                        }
                        if (v67 < 0) {
                          operator delete(*(void **)v104);
                        }
                        char v44 = 1;
                        char v32 = v108[23];
                      }
                      goto LABEL_91;
                    }
                    long long v41 = v42 + 1;
                    uint64_t v33 = v35 - (unsigned char *)v41;
                  }
                  while (v35 - (unsigned char *)v41 >= 9);
                }
                char v44 = 0;
LABEL_91:
                if (v32 < 0) {
                  operator delete(*(void **)v108);
                }
                if ((v44 & 1) == 0) {
                  goto LABEL_138;
                }
                goto LABEL_94;
              }
              uint64_t v29 = (std::string *)(v30 + 1);
              uint64_t v19 = v28 - (char *)v29;
              if (v28 - (char *)v29 < 8) {
                goto LABEL_138;
              }
            }
          }
        }
        break;
      }
      __int16 v15 = (std::string *)(v16 + 1);
      uint64_t v5 = v14 - (char *)v15;
    }
    while (v14 - (char *)v15 >= 9);
  }
LABEL_138:
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v111.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v112.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v113.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1005BAF08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, void **a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  if (*(char *)(v59 - 201) < 0) {
    operator delete(*(void **)(v59 - 224));
  }
  if (*(char *)(v59 - 169) < 0) {
    operator delete(*(void **)(v59 - 192));
  }
  if (*(char *)(v59 - 137) < 0) {
    operator delete(*(void **)(v59 - 160));
  }
  if (*(char *)(v59 - 105) < 0) {
    operator delete(*(void **)(v59 - 128));
  }
  if (*(char *)(v56 + 1007) < 0) {
    operator delete(*a11);
  }
  sub_1005D428C(a12);
  sub_1005D428C(a14);
  if (*(char *)(v56 + 111) < 0) {
    operator delete(*v57);
  }
  if (*(char *)(v56 + 87) < 0) {
    operator delete(*(void **)(v56 + 64));
  }
  if (*(char *)(v56 + 63) < 0) {
    operator delete(*a13);
  }
  if (*(char *)(v56 + 31) < 0) {
    operator delete(*v58);
  }
  _Unwind_Resume(a1);
}

void sub_1005BB094()
{
}

void sub_1005BB09C()
{
}

void sub_1005BB0A8(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 39) < 0)
  {
    sub_10003B098(__dst, *(void **)(a1 + 16), *(void *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)std::string __dst = *(_OWORD *)(a1 + 16);
    *(void *)&long long v17 = *(void *)(a1 + 32);
  }
  if (SBYTE7(v17) < 0)
  {
    uint64_t v4 = __dst[1];
    operator delete(__dst[0]);
    if (v4) {
      goto LABEL_6;
    }
  }
  else if (BYTE7(v17))
  {
LABEL_6:
    sub_1005D65B0(a1, 0, 391, 0);
    return;
  }
  uint64_t v19 = 0;
  long long v17 = 0u;
  *(_OWORD *)long long __p = 0u;
  *(_OWORD *)std::string __dst = 0u;
  sub_10036C478((void *)a1, 0, (uint64_t)__dst);
  std::operator+<char>();
  uint64_t v5 = std::string::append(&v13, "\r\nTEL;CHARSET=UTF-8:");
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if ((SBYTE7(v17) & 0x80u) == 0) {
    uint64_t v7 = __dst;
  }
  else {
    uint64_t v7 = (void **)__dst[0];
  }
  if ((SBYTE7(v17) & 0x80u) == 0) {
    std::string::size_type v8 = BYTE7(v17);
  }
  else {
    std::string::size_type v8 = (std::string::size_type)__dst[1];
  }
  uint64_t v9 = std::string::append(&v14, (const std::string::value_type *)v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  uint64_t v11 = std::string::append(&v15, "\r\nEND:VCARD\r\n");
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  *(void *)(a2 + 16) = *((void *)&v11->__r_.__value_.__l + 2);
  *(_OWORD *)a2 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v17) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_1005BB24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  sub_100376850((uint64_t)&a30);
  _Unwind_Resume(a1);
}

uint64_t sub_1005BB2A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1005D3F6C(v4, a1 + 136);
  sub_1005BB0A8((uint64_t)v4, a2);
  return sub_1005D428C(v4);
}

void sub_1005BB2F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1005D428C(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005BB304@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1005D3F6C(v4, a1 + 560);
  sub_1005BB0A8((uint64_t)v4, a2);
  return sub_1005D428C(v4);
}

void sub_1005BB34C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1005D428C(va);
  _Unwind_Resume(a1);
}

void *sub_1005BB360@<X0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v9 = 0;
  v10[0] = 0;
  *(void *)((char *)v10 + 5) = 0;
  uint64_t v5 = localtime((const time_t *)(a1 + 32));
  if (a2)
  {
    long long v6 = "%Y%m%dT%H%M%S%z";
    size_t v7 = 21;
  }
  else
  {
    long long v6 = "%Y%m%dT%H%M%S";
    size_t v7 = 16;
  }
  strftime((char *)&v9, v7, v6, v5);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return sub_10004191C(a3, (char *)&v9);
}

void sub_1005BB40C(uint64_t a1, std::string *__str, std::string *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(std::string **)a1;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= a4)
  {
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) >= a4)
    {
      sub_1005BB754((int)&v17, __str, a3, v9);
      uint64_t v14 = v13;
      uint64_t v15 = *(void *)(a1 + 8);
      if (v15 != v13)
      {
        do
        {
          v15 -= 56;
          sub_100378BC4(v8, v15);
        }
        while (v15 != v14);
      }
      *(void *)(a1 + 8) = v14;
    }
    else
    {
      long long v12 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3));
      sub_1005BB754((int)&v16, __str, v12, v9);
      sub_1005BB5CC((unsigned char *)a1, (uint64_t)v12, (uint64_t)a3);
    }
  }
  else
  {
    sub_1005BB648((void **)a1);
    if (a4 > 0x492492492492492) {
      abort();
    }
    unint64_t v10 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3)) >= 0x249249249249249) {
      unint64_t v11 = 0x492492492492492;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_1003C8530((void *)a1, v11);
    sub_1005BB5CC((unsigned char *)a1, (uint64_t)__str, (uint64_t)a3);
  }
}

unsigned char *sub_1005BB5CC(unsigned char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = *((void *)result + 1);
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      __n128 result = sub_1005BB6B8((int)v3 + 16, (void *)(v4 + v7), (long long *)(a2 + v7));
      v7 += 56;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *((void *)v3 + 1) = v4;
  return result;
}

void sub_1005BB640(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1005BB648(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 56;
        sub_100378BC4((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

unsigned char *sub_1005BB6B8(int a1, void *__dst, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    sub_10003B098(__dst, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    void __dst[2] = *((void *)a3 + 2);
    *(_OWORD *)std::string __dst = v5;
  }
  *((_DWORD *)__dst + 6) = *((_DWORD *)a3 + 6);
  __n128 result = __dst + 4;
  if (*((char *)a3 + 55) < 0) {
    return sub_10003B098(result, *((void **)a3 + 4), *((void *)a3 + 5));
  }
  long long v7 = a3[2];
  __dst[6] = *((void *)a3 + 6);
  *(_OWORD *)__n128 result = v7;
  return result;
}

void sub_1005BB738(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_1005BB754(int a1, std::string *__str, std::string *a3, std::string *this)
{
  long long v5 = __str;
  if (__str == a3) {
    return __str;
  }
  long long v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    LODWORD(this[1].__r_.__value_.__l.__data_) = v5[1].__r_.__value_.__l.__data_;
    std::string::operator=((std::string *)((char *)this + 32), (std::string *)((char *)v5 + 32));
    this = (std::string *)((char *)this + 56);
    long long v5 = (std::string *)((char *)v5 + 56);
  }
  while (v5 != v6);
  return v6;
}

void sub_1005BB7CC(uint64_t a1, std::string *__str, std::string *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(std::string **)a1;
  if (a4 <= (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 7)
  {
    unint64_t v13 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 7;
    if (v13 >= a4)
    {
      sub_1005BBA4C((int)&v19, __str, a3, v9);
      uint64_t v16 = v15;
      uint64_t v17 = *(void *)(a1 + 8);
      if (v17 != v15)
      {
        do
        {
          v17 -= 128;
          sub_100378ECC(v8, v17);
        }
        while (v17 != v16);
      }
      *(void *)(a1 + 8) = v16;
    }
    else
    {
      uint64_t v14 = (std::string *)((char *)__str + 128 * v13);
      sub_1005BBA4C((int)&v18, __str, v14, v9);
      sub_1005BB928((char *)a1, (uint64_t)v14, (uint64_t)a3);
    }
  }
  else
  {
    sub_1005BB99C((void **)a1);
    if (a4 >> 57) {
      abort();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 6;
    if (v10 >> 6 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFF80) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    sub_1005BBA0C((void *)a1, v12);
    sub_1005BB928((char *)a1, (uint64_t)__str, (uint64_t)a3);
  }
}

char *sub_1005BB928(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = *((void *)result + 1);
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      __n128 result = sub_100378F54((char *)(v4 + v7), (long long *)(a2 + v7));
      v7 += 128;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *((void *)v3 + 1) = v4;
  return result;
}

void sub_1005BB994(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1005BB99C(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 128;
        sub_100378ECC((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *sub_1005BBA0C(void *a1, unint64_t a2)
{
  if (a2 >> 57) {
    abort();
  }
  __n128 result = (char *)sub_100378E18((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[128 * v4];
  return result;
}

std::string *sub_1005BBA4C(int a1, std::string *__str, std::string *a3, std::string *this)
{
  long long v5 = __str;
  if (__str == a3) {
    return __str;
  }
  long long v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    std::string::operator=(this + 1, v5 + 1);
    std::string::operator=(this + 2, v5 + 2);
    std::string::operator=(this + 3, v5 + 3);
    std::string::operator=(this + 4, v5 + 4);
    LODWORD(this[5].__r_.__value_.__l.__data_) = v5[5].__r_.__value_.__l.__data_;
    this = (std::string *)((char *)this + 128);
    long long v5 = (std::string *)((char *)v5 + 128);
  }
  while (v5 != v6);
  return v6;
}

void sub_1005BBAE8(uint64_t a1, std::string *__str, long long *a3, unint64_t a4)
{
  int v8 = a1 + 16;
  uint64_t v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_10036A268((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_1002B33F0((void *)a1, v11);
    unint64_t v12 = sub_1002B3488(v8, (long long *)__str, a3, *(char **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    unint64_t v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3));
    sub_10048E604(__str, v13, v9);
    unint64_t v12 = sub_1002B3488(v8, (long long *)v13, a3, *(char **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  sub_10048E604(__str, (std::string *)a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      if (*(char *)(v16 - 1) < 0) {
        operator delete(*(void **)(v16 - 24));
      }
      v16 -= 24;
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1005BBC4C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1005BBC54(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1005BBC5C(uint64_t a1, std::string *__str, long long *a3, unint64_t a4)
{
  int v8 = a1 + 16;
  uint64_t v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_10036A268((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_1002B33F0((void *)a1, v11);
    unint64_t v12 = sub_1002B3488(v8, (long long *)__str, a3, *(char **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    unint64_t v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3));
    sub_10048E604(__str, v13, v9);
    unint64_t v12 = sub_1002B3488(v8, (long long *)v13, a3, *(char **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  sub_10048E604(__str, (std::string *)a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      if (*(char *)(v16 - 1) < 0) {
        operator delete(*(void **)(v16 - 24));
      }
      v16 -= 24;
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1005BBDC0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1005BBDC8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1005BBDD0(uint64_t a1)
{
  uint64_t v23 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  *(_OWORD *)unint64_t v11 = 0u;
  long long v12 = 0u;
  memset(v10, 0, sizeof(v10));
  sub_1000419CC((uint64_t)v10);
  if (*(unsigned char *)(a1 + 120))
  {
    sub_10003AB28((uint64_t)v10);
    uint64_t v2 = (_OWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
    {
      sub_10003B098(__p, *(void **)(a1 + 88), *(void *)(a1 + 96));
    }
    else
    {
      *(_OWORD *)long long __p = *v2;
      uint64_t v9 = *(void *)(a1 + 104);
    }
    uint64_t v3 = std::ostream::operator<<();
    sub_10003AB28(v3);
    if (SHIBYTE(v9) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v4 = sub_10003AB28((uint64_t)v10);
    sub_10003AB28(v4);
    if (*(char *)(a1 + 111) < 0)
    {
      sub_10003B098(__p, *(void **)(a1 + 88), *(void *)(a1 + 96));
    }
    else
    {
      *(_OWORD *)long long __p = *v2;
      uint64_t v9 = *(void *)(a1 + 104);
    }
    uint64_t v5 = sub_10003AB28((uint64_t)v10);
    sub_10003AB28(v5);
    if (SHIBYTE(v9) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v6 = sub_10003AB28((uint64_t)v10);
    sub_10003AB28(v6);
  }
  std::stringbuf::str();
  if (SHIBYTE(v12) < 0) {
    operator delete(v11[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1005BC068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
}

uint64_t sub_1005BC0A0(uint64_t a1, char a2)
{
  uint64_t v35 = 0;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  *(_OWORD *)uint64_t v23 = 0u;
  long long v24 = 0u;
  memset(v22, 0, sizeof(v22));
  sub_1000419CC((uint64_t)v22);
  uint64_t v4 = sub_10003AB28((uint64_t)v22);
  sub_10003AB28(v4);
  uint64_t v5 = sub_10003AB28((uint64_t)v22);
  sub_10003AB28(v5);
  uint64_t v6 = sub_10003AB28((uint64_t)v22);
  uint64_t v7 = sub_10003AB28(v6);
  sub_10003AB28(v7);
  uint64_t v8 = sub_10003AB28((uint64_t)v22);
  sub_10003AB28(v8);
  uint64_t v9 = sub_10003AB28((uint64_t)v22);
  sub_10003AB28(v9);
  if ((a2 & 1) == 0)
  {
    uint64_t v10 = sub_10003AB28((uint64_t)v22);
    sub_10003AB28(v10);
  }
  sub_1005BB2A8(a1, (uint64_t)__p);
  sub_10003AB28((uint64_t)v22);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v11 = sub_10003AB28((uint64_t)v22);
  sub_10003AB28(v11);
  sub_1005BB304(a1, (uint64_t)__p);
  sub_10003AB28((uint64_t)v22);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v12 = sub_10003AB28((uint64_t)v22);
  sub_10003AB28(v12);
  if (*(unsigned char *)(a1 + 120))
  {
    uint64_t v13 = sub_10003AB28((uint64_t)v22);
    sub_10003AB28(v13);
    uint64_t v14 = sub_10003AB28((uint64_t)v22);
    if (*(char *)(a1 + 1007) < 0)
    {
      sub_10003B098(__p, *(void **)(a1 + 984), *(void *)(a1 + 992));
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)(a1 + 984);
      uint64_t v21 = *(void *)(a1 + 1000);
    }
    uint64_t v15 = sub_10003AB28(v14);
    sub_10003AB28(v15);
    if (SHIBYTE(v21) < 0) {
      operator delete(__p[0]);
    }
  }
  sub_1005BBDD0(a1);
  sub_10003AB28((uint64_t)v22);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v16 = sub_10003AB28((uint64_t)v22);
  sub_10003AB28(v16);
  uint64_t v17 = sub_10003AB28((uint64_t)v22);
  sub_10003AB28(v17);
  uint64_t v18 = sub_10003AB28((uint64_t)v22);
  sub_10003AB28(v18);
  std::stringbuf::str();
  if (SHIBYTE(v24) < 0) {
    operator delete(v23[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1005BC528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
}

uint64_t sub_1005BC574(uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5)
{
  uint64_t v52 = 0;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  *(_OWORD *)uint64_t v40 = 0u;
  long long v41 = 0u;
  memset(v39, 0, sizeof(v39));
  sub_1000419CC((uint64_t)v39);
  if (a4) {
    __int16 v10 = a4;
  }
  else {
    __int16 v10 = -1;
  }
  sub_10003AB28((uint64_t)v39);
  uint64_t v11 = sub_10003AB28((uint64_t)v39);
  sub_10036B818(a1, &__p);
  uint64_t v12 = sub_10003AB28(v11);
  sub_10003AB28(v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v10 & 1) == 0) {
      goto LABEL_16;
    }
  }
  else if ((v10 & 1) == 0)
  {
    goto LABEL_16;
  }
  uint64_t v13 = sub_10003AB28((uint64_t)v39);
  if (*(char *)(a1 + 87) < 0) {
    sub_10003B098(&v36, *(void **)(a1 + 64), *(void *)(a1 + 72));
  }
  else {
    std::string v36 = *(std::string *)(a1 + 64);
  }
  std::string::basic_string(&__dst, &v36, 0, a3, (std::allocator<char> *)&v53);
  sub_10044A49C((uint64_t)&__dst, &__p);
  uint64_t v14 = sub_10003AB28(v13);
  sub_10003AB28(v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_16:
    if ((v10 & 2) == 0) {
      goto LABEL_20;
    }
    goto LABEL_17;
  }
  operator delete(v36.__r_.__value_.__l.__data_);
  if ((v10 & 2) == 0) {
    goto LABEL_20;
  }
LABEL_17:
  uint64_t v15 = sub_10003AB28((uint64_t)v39);
  sub_1005BB360(a1, a5, &__p);
  uint64_t v16 = sub_10003AB28(v15);
  sub_10003AB28(v16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((v10 & 4) == 0) {
    goto LABEL_27;
  }
LABEL_20:
  uint64_t v17 = sub_10003AB28((uint64_t)v39);
  if (*(char *)(a1 + 175) < 0) {
    sub_10003B098(&__dst, *(void **)(a1 + 152), *(void *)(a1 + 160));
  }
  else {
    std::string __dst = *(std::string *)(a1 + 152);
  }
  sub_10044A49C((uint64_t)&__dst, &__p);
  uint64_t v18 = sub_10003AB28(v17);
  sub_10003AB28(v18);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((v10 & 8) == 0) {
      goto LABEL_33;
    }
  }
  else
  {
LABEL_27:
    if ((v10 & 8) == 0) {
      goto LABEL_33;
    }
  }
  memset(&__p, 0, sizeof(__p));
  sub_1005BD298((void *)(a1 + 136), &__p);
  memset(&__dst, 0, sizeof(__dst));
  sub_10044A49C((uint64_t)&__p, &__dst);
  uint64_t v19 = sub_10003AB28((uint64_t)v39);
  uint64_t v20 = sub_10003AB28(v19);
  sub_10003AB28(v20);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((v10 & 0x10) == 0) {
    goto LABEL_38;
  }
LABEL_33:
  uint64_t v21 = sub_10003AB28((uint64_t)v39);
  if (*(char *)(a1 + 599) < 0) {
    sub_10003B098(&__p, *(void **)(a1 + 576), *(void *)(a1 + 584));
  }
  else {
    std::string __p = *(std::string *)(a1 + 576);
  }
  uint64_t v22 = sub_10003AB28(v21);
  sub_10003AB28(v22);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v10 & 0x20) == 0) {
      goto LABEL_42;
    }
  }
  else
  {
LABEL_38:
    if ((v10 & 0x20) == 0) {
      goto LABEL_42;
    }
  }
  uint64_t v23 = sub_10003AB28((uint64_t)v39);
  sub_1005BD298((void *)(a1 + 560), &__p);
  uint64_t v24 = sub_10003AB28(v23);
  sub_10003AB28(v24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_42:
  if ((v10 & 0x40) != 0 && a2 <= 3) {
    sub_10003AB28((uint64_t)v39);
  }
  if ((v10 & 0x80) != 0)
  {
    sub_10003AB28((uint64_t)v39);
    uint64_t v25 = std::ostream::operator<<();
    sub_10003AB28(v25);
  }
  if ((v10 & 0x100) != 0)
  {
    uint64_t v26 = sub_10003AB28((uint64_t)v39);
    uint64_t v27 = sub_10003AB28(v26);
    sub_10003AB28(v27);
  }
  if ((v10 & 0x200) != 0)
  {
    uint64_t v28 = sub_10003AB28((uint64_t)v39);
    uint64_t v29 = sub_10003AB28(v28);
    sub_10003AB28(v29);
  }
  if ((v10 & 0x400) != 0)
  {
    sub_10003AB28((uint64_t)v39);
    uint64_t v30 = std::ostream::operator<<();
    sub_10003AB28(v30);
  }
  if ((v10 & 0x1000) != 0)
  {
    uint64_t v31 = sub_10003AB28((uint64_t)v39);
    uint64_t v32 = sub_10003AB28(v31);
    sub_10003AB28(v32);
  }
  if ((v10 & 0x2000) != 0)
  {
    uint64_t v33 = sub_10003AB28((uint64_t)v39);
    uint64_t v34 = sub_10003AB28(v33);
    sub_10003AB28(v34);
  }
  sub_10003AB28((uint64_t)v39);
  std::stringbuf::str();
  if (SHIBYTE(v41) < 0) {
    operator delete(v40[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1005BCCB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
}

uint64_t sub_1005BCD94(uint64_t result)
{
  *(unsigned char *)__n128 result = -1;
  *(_DWORD *)(result + 4) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t sub_1005BCDAC(uint64_t a1)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = (void **)(a1 + 16);
  while (v2 != v4)
  {
    v2 -= 1008;
    sub_1005BD37C(a1 + 32, v2);
  }
  *(void *)(a1 + 24) = v4;
  uint64_t v6 = v3;
  sub_1005BD414(&v6);
  return a1;
}

uint64_t sub_1005BCE28(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[3];
  if (v3 >= a1[4])
  {
    uint64_t result = sub_1005BD4AC(a1 + 2, a2);
  }
  else
  {
    sub_1005BD0A4(a1[3], a2);
    uint64_t result = v3 + 1008;
    a1[3] = v3 + 1008;
  }
  a1[3] = result;
  return result;
}

void sub_1005BCE74(_Unwind_Exception *a1)
{
  *(void *)(v1 + 24) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1005BCE7C(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t v21 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v12 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  *(_OWORD *)uint64_t v9 = 0u;
  memset(v8, 0, sizeof(v8));
  sub_1000419CC((uint64_t)v8);
  sub_10003AB28((uint64_t)v8);
  for (uint64_t i = *((void *)a1 + 2); i != *((void *)a1 + 3); i += 1008)
  {
    sub_1005BC574(i, a2, *a1, *((_DWORD *)a1 + 1), a1[8]);
    sub_10003AB28((uint64_t)v8);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  sub_10003AB28((uint64_t)v8);
  std::stringbuf::str();
  if (SHIBYTE(v10) < 0) {
    operator delete(v9[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1005BD074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

uint64_t sub_1005BD0A4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_10003B098((unsigned char *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  if (*(char *)(a2 + 63) < 0)
  {
    sub_10003B098((unsigned char *)(a1 + 40), *(void **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v5;
  }
  if (*(char *)(a2 + 87) < 0)
  {
    sub_10003B098((unsigned char *)(a1 + 64), *(void **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v6;
  }
  if (*(char *)(a2 + 111) < 0)
  {
    sub_10003B098((unsigned char *)(a1 + 88), *(void **)(a2 + 88), *(void *)(a2 + 96));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = v7;
  }
  long long v8 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = v8;
  sub_1005D3F6C(a1 + 136, a2 + 136);
  sub_1005D3F6C(a1 + 560, a2 + 560);
  uint64_t v9 = (unsigned char *)(a1 + 984);
  if (*(char *)(a2 + 1007) < 0)
  {
    sub_10003B098(v9, *(void **)(a2 + 984), *(void *)(a2 + 992));
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 984);
    *(void *)(a1 + 1000) = *(void *)(a2 + 1000);
    *(_OWORD *)uint64_t v9 = v10;
  }
  return a1;
}

void sub_1005BD214(_Unwind_Exception *a1)
{
  sub_1005D428C(v7);
  sub_1005D428C(v6);
  if (v1[111] < 0) {
    operator delete(*v5);
  }
  if (v1[87] < 0) {
    operator delete(*v4);
  }
  if (v1[63] < 0) {
    operator delete(*v3);
  }
  if (v1[31] < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

void sub_1005BD298(void *a1@<X0>, void *a2@<X8>)
{
  sub_10036C478(a1, 0, (uint64_t)v9);
  unint64_t v4 = v10;
  if ((v10 & 0x80u) != 0) {
    unint64_t v4 = (unint64_t)v9[1];
  }
  if (v4)
  {
    sub_10036C478(a1, 0, (uint64_t)v5);
    *(_OWORD *)a2 = *(_OWORD *)v5;
    a2[2] = v6;
    v5[1] = 0;
    uint64_t v6 = 0;
    v5[0] = 0;
    if (v8 < 0)
    {
      operator delete(__p);
      if (SHIBYTE(v6) < 0) {
        operator delete(v5[0]);
      }
    }
  }
  else
  {
    sub_10036C578(a1, 0, a2);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  if ((char)v10 < 0) {
    operator delete(v9[0]);
  }
}

void sub_1005BD364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_100376850((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1005BD37C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 1007) < 0) {
    operator delete(*(void **)(a2 + 984));
  }
  sub_1005D428C(a2 + 560);
  sub_1005D428C(a2 + 136);
  if (*(char *)(a2 + 111) < 0) {
    operator delete(*(void **)(a2 + 88));
  }
  if (*(char *)(a2 + 87) < 0) {
    operator delete(*(void **)(a2 + 64));
  }
  if (*(char *)(a2 + 63) < 0) {
    operator delete(*(void **)(a2 + 40));
  }
  if (*(char *)(a2 + 31) < 0)
  {
    unint64_t v3 = *(void **)(a2 + 8);
    operator delete(v3);
  }
}

void sub_1005BD414(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 1008;
        sub_1005BD37C((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1005BD4AC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0xEFBEFBEFBEFBEFBFLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x41041041041041) {
    abort();
  }
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v9 = 0xEFBEFBEFBEFBEFBFLL * ((v8 - v2) >> 4);
  if (2 * v9 > v4) {
    unint64_t v4 = 2 * v9;
  }
  if (v9 >= 0x20820820820820) {
    unint64_t v10 = 0x41041041041041;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v18 = v7;
  if (v10) {
    long long v11 = (char *)sub_1005BD64C(v7, v10);
  }
  else {
    long long v11 = 0;
  }
  long long v14 = v11;
  long long v15 = &v11[1008 * v3];
  long long v17 = &v11[1008 * v10];
  sub_1005BD0A4((uint64_t)v15, a2);
  long long v16 = v15 + 1008;
  sub_1005BD5C4(a1, &v14);
  uint64_t v12 = a1[1];
  sub_1005BD698(&v14);
  return v12;
}

void sub_1005BD5B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1005BD698((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005BD5C4(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t result = a2[1];
  while (v4 != v5)
  {
    v4 -= 1008;
    uint64_t result = sub_1005BD0A4(result - 1008, v4);
  }
  a2[1] = result;
  uint64_t v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *sub_1005BD64C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x41041041041042) {
    sub_1000616DC();
  }
  return operator new(1008 * a2);
}

void **sub_1005BD698(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_1005BD6CC(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 1008;
    sub_1005BD37C(v4, i - 1008);
  }
}

void **sub_1005BD714(void **a1)
{
  return a1;
}

void sub_1005BD73C(uint64_t a1, __int16 a2, int a3)
{
  *(_WORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 124) = a3;
  operator new();
}

void sub_1005BDA18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v34 + 119) < 0) {
    operator delete(*(void **)(v34 + 96));
  }
  if (*(char *)(v34 + 95) < 0) {
    operator delete(*(void **)(v34 + 72));
  }
  if (*(char *)(v34 + 71) < 0) {
    operator delete(*(void **)(v34 + 48));
  }
  if (*(char *)(v34 + 47) < 0) {
    operator delete(*v35);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_1005BDB34@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a2, "<folder-listing version=\"1.0\">\n");
  for (uint64_t i = *(void *)(a1 + 16); i != a1 + 8; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v5 = *(void *)(i + 16);
    if (*(char *)(v5 + 55) < 0) {
      sub_10003B098(&v13, *(void **)(v5 + 32), *(void *)(v5 + 40));
    }
    else {
      std::string v13 = *(std::string *)(v5 + 32);
    }
    uint64_t v6 = std::string::insert(&v13, 0, "<folder name=\"");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v14.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v14, "\"/>\n");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    int64_t v16 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (v16 >= 0) {
      unint64_t v10 = __p;
    }
    else {
      unint64_t v10 = (void **)__p[0];
    }
    if (v16 >= 0) {
      std::string::size_type v11 = HIBYTE(v16);
    }
    else {
      std::string::size_type v11 = (std::string::size_type)__p[1];
    }
    std::string::append(a2, (const std::string::value_type *)v10, v11);
    if (SHIBYTE(v16) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
  }
  return std::string::append(a2, "</folder-listing>\n");
}

void sub_1005BDC90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 + 23) < 0) {
    operator delete(*(void **)v28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005BDCF8(std::string *a1, void *a2, int a3)
{
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  sub_1005C1314(&v27, a1->__r_.__value_.__l.__size_ + 8);
  memset(&__str, 0, sizeof(__str));
  if (byte_100A19E00[23] < 0) {
    sub_10003B098(&__str, *(void **)byte_100A19E00, *(unint64_t *)&byte_100A19E00[8]);
  }
  else {
    std::string __str = *(std::string *)byte_100A19E00;
  }
  if (a3 && (std::string::size_type v6 = *(void *)a1->__r_.__value_.__l.__size_) != 0)
  {
    uint64_t v7 = 0;
    a1->__r_.__value_.__l.__size_ = v6;
    char v8 = 1;
  }
  else
  {
    char v8 = 0;
    uint64_t v7 = 1738;
  }
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t v10 = a2[1];
    if (v10)
    {
      if (v10 != 1)
      {
LABEL_16:
        std::string::size_type v11 = v28;
        if (v28 == &v27)
        {
LABEL_29:
          if ((v8 & 1) == 0) {
            goto LABEL_44;
          }
          goto LABEL_35;
        }
        while (1)
        {
          uint64_t v12 = v11[2];
          if (*((char *)a2 + 23) < 0)
          {
            sub_10003B098(&__dst, (void *)*a2, a2[1]);
          }
          else
          {
            long long __dst = *(_OWORD *)a2;
            uint64_t v25 = a2[2];
          }
          int v13 = SHIBYTE(v25);
          std::string v14 = (void *)__dst;
          if (v25 >= 0) {
            p_dst = (const char *)&__dst;
          }
          else {
            p_dst = (const char *)__dst;
          }
          int64_t v16 = (const char *)(v12 + 32);
          if (*(char *)(v12 + 55) < 0) {
            int64_t v16 = *(const char **)v16;
          }
          int v17 = strcasecmp(p_dst, v16);
          if (v13 < 0) {
            operator delete(v14);
          }
          if (!v17) {
            break;
          }
          std::string::size_type v11 = (uint64_t *)v11[1];
          if (v11 == &v27) {
            goto LABEL_29;
          }
        }
        uint64_t v18 = (std::string::size_type *)(v11 + 2);
        goto LABEL_34;
      }
      long long v9 = (unsigned char *)*a2;
      goto LABEL_15;
    }
  }
  else if (*((unsigned char *)a2 + 23))
  {
    long long v9 = a2;
    if (*((unsigned char *)a2 + 23) != 1) {
      goto LABEL_16;
    }
LABEL_15:
    if (*v9 != 47) {
      goto LABEL_16;
    }
LABEL_32:
    uint64_t v18 = &a1->__r_.__value_.__r.__words[2];
LABEL_34:
    a1->__r_.__value_.__l.__size_ = *v18;
    goto LABEL_35;
  }
  if ((a3 & 1) == 0) {
    goto LABEL_32;
  }
LABEL_35:
  sub_1005BDB34(a1->__r_.__value_.__l.__size_, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(&__str, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::operator=(a1 + 1, &__str);
  uint64_t v7 = 0;
LABEL_44:
  char v23 = 0;
  sub_10001B8E0(&v23);
  sub_10015D5F4(LOWORD(a1->__r_.__value_.__l.__data_), v7);
  uint64_t v21 = qword_100A1A020;
  if (os_log_type_enabled((os_log_t)qword_100A1A020, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) < 0) {
      a2 = (void *)*a2;
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 67109378;
    HIDWORD(__p.__r_.__value_.__r.__words[0]) = v7;
    LOWORD(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)a2;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Setpath returning %{bluetooth:OI_STATUS}u for folder: %s", (uint8_t *)&__p, 0x12u);
  }
  sub_10001B8AC(&v23);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  sub_1002B308C(&v27);
  return v7;
}

void sub_1005BDFD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
}

double sub_1005BE038(uint64_t a1, unsigned __int8 *a2)
{
  sub_1005BCE7C(a2, *(_DWORD *)(a1 + 4));
  unint64_t v3 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*v3);
  }
  double result = *(double *)&v5;
  *(_OWORD *)unint64_t v3 = v5;
  *(void *)(a1 + 64) = v6;
  return result;
}

uint64_t sub_1005BE098(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_1005C13B0(v2);
    operator delete();
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

uint64_t sub_1005BE11C(uint64_t a1)
{
  uint64_t result = sub_100283C88(a1, 21);
  *(void *)uint64_t result = off_1009B7D58;
  *(void *)(result + 288) = 0;
  *(void *)(result + 264) = 0;
  *(void *)(result + 272) = 0;
  *(void *)(result + 256) = off_1009B7DD8;
  *(_WORD *)(result + 280) = 0;
  return result;
}

uint64_t sub_1005BE180()
{
  long long v4 = off_1009B7E08;
  char v3 = 0;
  sub_10001B8E0(&v3);
  uint64_t v0 = sub_10015C2DC(off_1009FBD18, (uint64_t)off_1009FBD28, (uint64_t *)&v4, 393855, 2);
  if (v0)
  {
    uint64_t v1 = qword_100A1A020;
    if (os_log_type_enabled((os_log_t)qword_100A1A020, OS_LOG_TYPE_ERROR)) {
      sub_1007808A8(v0, v1);
    }
  }
  sub_10001B8AC(&v3);
  return v0;
}

void sub_1005BE224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_1005BE238()
{
  char v1 = 0;
  sub_10001B8E0(&v1);
  sub_10015C64C();
  sub_10001B8AC(&v1);
  return 0;
}

void sub_1005BE278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_1005BE28C(uint64_t a1, uint64_t a2)
{
  long long v4 = qword_100A1A020;
  if (*(void *)(a1 + 288) != a2 && os_log_type_enabled((os_log_t)qword_100A1A020, OS_LOG_TYPE_FAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_fault_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "MAP is being asked to disconnect a device that it's not tracking", (uint8_t *)__p, 2u);
    long long v4 = qword_100A1A020;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_1005BE448(a1, __p);
    long long v5 = v12 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)long long buf = 136446210;
    std::string v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending disconnect indication to device %{public}s", buf, 0xCu);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
  char v10 = 0;
  sub_10001B8E0(&v10);
  int v6 = sub_10015C7D4(*(unsigned __int16 *)(a1 + 280));
  if (v6)
  {
    uint64_t v7 = qword_100A1A020;
    if (os_log_type_enabled((os_log_t)qword_100A1A020, OS_LOG_TYPE_ERROR))
    {
      sub_100474E18(a2, __p);
      sub_100780920((char *)__p, buf, v6, v7);
    }
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v8 = 0;
  }
  sub_10001B8AC(&v10);
  return v8;
}

void sub_1005BE428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_1005BE448(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 288);
  if (v2) {
    sub_100474E18(v2, a2);
  }
  else {
    sub_10004191C(a2, "<null>");
  }
}

uint64_t sub_1005BE464(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009B7F48);
  }
  WORD2(v32) = WORD2(a2);
  LODWORD(v32) = a2;
  uint64_t v6 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v32, 1);
  uint64_t v40 = 0;
  long long v39 = 0u;
  memset(v38, 0, sizeof(v38));
  long long v36 = 0u;
  *(_OWORD *)uint64_t v37 = 0u;
  long long v34 = 0u;
  *(_OWORD *)uint64_t v35 = 0u;
  long long v32 = 0u;
  *(_OWORD *)uint64_t v33 = 0u;
  sub_1006161E0((uint64_t)&v32 + 1);
  BYTE2(v33[0]) = 0;
  BYTE4(v33[0]) = 0;
  BYTE2(v35[0]) = 0;
  BYTE4(v35[0]) = 0;
  DWORD1(v38[1]) = 0;
  long long v34 = 0uLL;
  v33[1] = 0;
  LOBYTE(v35[0]) = 0;
  long long v36 = 0uLL;
  v35[1] = 0;
  LOBYTE(v37[0]) = 0;
  memset(v38, 0, 19);
  v37[1] = 0;
  BYTE8(v38[1]) = 1;
  BYTE2(v40) = 0;
  *(void *)((char *)&v38[1] + 14) = 0;
  *(void *)((char *)&v38[1] + 9) = 0;
  long long v39 = 0uLL;
  *((void *)&v38[2] + 1) = 0;
  LOBYTE(v40) = 0;
  BOOL v7 = sub_1004783B8(v6, (uint64_t)&v32);
  if (BYTE12(v38[2])) {
    BOOL v8 = v7;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8)
  {
    LODWORD(__p[0]) = 0;
    *(_DWORD *)uint64_t v29 = 0;
    *(_DWORD *)uint64_t v31 = 0;
    *(_DWORD *)uint64_t v27 = 0;
    BOOL v9 = sub_10047B7A8(v6, __p, v29, v31, v27);
    if (*(_DWORD *)v29) {
      BOOL v10 = v9;
    }
    else {
      BOOL v10 = 0;
    }
    BOOL v11 = v10 && *(_DWORD *)v31 != 0;
    int v13 = qword_100A1A020;
    if (os_log_type_enabled((os_log_t)qword_100A1A020, OS_LOG_TYPE_DEFAULT))
    {
      std::string v14 = "BANNED";
      if (v11) {
        std::string v14 = "ALLOWED (DId)";
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Device has a denylist, current BAN state is %{public}s\n", buf, 0xCu);
    }
  }
  else
  {
    __p[0] = 0;
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    sub_100026C30((uint64_t)__p);
    *(void *)long long buf = SLODWORD(__p[0]);
    *(void *)&uint8_t buf[8] = SWORD2(__p[0]);
    sub_100477F4C(v6, 0x200u, 4, buf, 0);
    if sub_1004BDDAC(a1, v6) && (sub_10047F788(v6))
    {
      BOOL v11 = 1;
    }
    else
    {
      char v12 = qword_100A1A020;
      if (os_log_type_enabled((os_log_t)qword_100A1A020, OS_LOG_TYPE_ERROR))
      {
        sub_100474E18(v6, buf);
        sub_100780A44((char *)buf, v31, v12);
      }
      BOOL v11 = 0;
    }
  }
  char v26 = 0;
  sub_10001B8E0(&v26);
  int v15 = sub_10015C9CC(a3, v11);
  sub_10001B910(&v26);
  if (v15) {
    BOOL v16 = 0;
  }
  else {
    BOOL v16 = v11;
  }
  if (v16)
  {
    int v17 = qword_100A1A020;
    if (os_log_type_enabled((os_log_t)qword_100A1A020, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(v6, __p);
      uint64_t v18 = v25 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)uint64_t v29 = 136446466;
      *(void *)&void v29[4] = v18;
      *(_WORD *)&unsigned char v29[12] = 1024;
      *(_DWORD *)&v29[14] = a3;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Accepting incoming connection attempt from device %{public}s with connection ID %d", v29, 0x12u);
      if (SHIBYTE(v25) < 0) {
        operator delete(__p[0]);
      }
    }
    *(_OWORD *)uint64_t v29 = xmmword_1007BFB70;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v25 = 0;
    if (sub_10047AE08(v6, (uint64_t)v29, 0x317u, __p))
    {
      int v19 = *((_DWORD *)__p[0] + 2);
      long long v20 = qword_100A1A020;
      if (os_log_type_enabled((os_log_t)qword_100A1A020, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t v27 = 67109120;
        int v28 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Supported features bits are: 0x%x", v27, 8u);
      }
    }
    else
    {
      uint64_t v22 = qword_100A1A020;
      if (os_log_type_enabled((os_log_t)qword_100A1A020, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v27 = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "No supported features", v27, 2u);
      }
    }
    *(void *)(a1 + 288) = v6;
    *(_WORD *)(a1 + 280) = a3;
    operator new();
  }
  if (v15)
  {
    uint64_t v21 = qword_100A1A020;
    if (os_log_type_enabled((os_log_t)qword_100A1A020, OS_LOG_TYPE_ERROR)) {
      sub_1007809A4(v11, v15, v21);
    }
  }
  sub_10001B8AC(&v26);
  if (SHIBYTE(v38[0]) < 0) {
    operator delete(v37[1]);
  }
  if (SHIBYTE(v36) < 0) {
    operator delete(v35[1]);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(v33[1]);
  }
  return nullsub_95((char *)&v32 + 1);
}

void sub_1005BE9A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_1005BEA3C()
{
}

void sub_1005BEA44(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v2 = *(void *)(a1 + 288);
  char v3 = qword_100A1A020;
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A020, OS_LOG_TYPE_DEFAULT))
    {
      sub_1005BE448(a1, __p);
      if (v8 >= 0) {
        long long v5 = __p;
      }
      else {
        long long v5 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received disconnect event from device %{public}s", buf, 0xCu);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v2 = *(void *)(a1 + 288);
    }
    sub_1004BE538(a1, v2, 0);
    (***(void (****)(void))(a1 + 264))();
    *(void *)(a1 + 264) = 0;
    sub_1005C3194((uint64_t *)(a1 + 272), 0);
    *(_WORD *)(a1 + 280) = 0;
    *(void *)(a1 + 288) = 0;
  }
  else if (os_log_type_enabled((os_log_t)qword_100A1A020, OS_LOG_TYPE_ERROR))
  {
    sub_100780AB8(a2, v3);
  }
}

void sub_1005BEBC8(uint64_t a1, uint64_t *a2)
{
  sub_10036B818(*a2, &__p);
  sub_1005BEC38(a1, (uint64_t)&__p, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1005BEC1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005BEC38(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 && (uint64_t v4 = *(void *)(a1 + 272), *(_DWORD *)(v4 + 120)))
  {
    unsigned int v6 = *(_DWORD *)(v4 + 124);
    uint64_t v25 = 0;
    char v26 = 0;
    uint64_t v7 = *(void *)(a1 + 264);
    if (*(char *)(a2 + 23) < 0)
    {
      sub_10003B098(__p, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a2;
      uint64_t v24 = *(void *)(a2 + 16);
    }
    BOOL v9 = (*(void *(**)(uint64_t *__return_ptr, uint64_t, void **))(*(void *)v7 + 32))(&v25, v7, __p);
    if (SHIBYTE(v24) < 0) {
      operator delete(__p[0]);
    }
    unsigned int v10 = *(_DWORD *)(*(void *)(a1 + 272) + 124) & 0x40000;
    long long v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    BOOL v11 = v26;
    v19[0] = v25;
    v19[1] = (uint64_t)v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_1005BF378((uint64_t)v9, 0, v19, a3, (v6 >> 6) & 1, v10 != 0);
    if (v11) {
      sub_10008A294(v11);
    }
    char v12 = qword_100A1A020;
    if (os_log_type_enabled((os_log_t)qword_100A1A020, OS_LOG_TYPE_DEFAULT))
    {
      sub_1005BE448(a1, v17);
      if (v18 >= 0) {
        int v13 = v17;
      }
      else {
        int v13 = (void **)v17[0];
      }
      std::string v14 = &v20;
      if (v22 < 0) {
        std::string v14 = v20;
      }
      *(_DWORD *)long long buf = 136315650;
      int v28 = v13;
      __int16 v29 = 2080;
      uint64_t v30 = v14;
      __int16 v31 = 1024;
      unsigned int v32 = v10 >> 18;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Updating CarKit %s with event: %s and UTCOffsetSupport: %d", buf, 0x1Cu);
      if (v18 < 0) {
        operator delete(v17[0]);
      }
    }
    buf[0] = 0;
    sub_10001B8E0(buf);
    if (v22 >= 0) {
      int v15 = &v20;
    }
    else {
      int v15 = v20;
    }
    unsigned __int16 v16 = HIBYTE(v22);
    if (v22 < 0) {
      unsigned __int16 v16 = v21;
    }
    sub_10015CB60(*(unsigned __int16 *)(a1 + 280), (uint64_t)v15, v16);
    sub_10001B8AC(buf);
    if (SHIBYTE(v22) < 0) {
      operator delete(v20);
    }
    if (v26) {
      sub_10008A294(v26);
    }
  }
  else
  {
    char v8 = qword_100A1A020;
    if (os_log_type_enabled((os_log_t)qword_100A1A020, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Attempting to send event notification which is explicitly filtered out, ignoring.", buf, 2u);
    }
  }
}

void sub_1005BEED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
}

void sub_1005BEF44(uint64_t a1, uint64_t *a2)
{
}

unsigned char *sub_1005BEF4C(uint64_t a1, uint64_t *a2, int a3)
{
  char v10 = 0;
  sub_10001B8E0(&v10);
  unsigned int v6 = *(unsigned __int16 *)(a1 + 280);
  if (a3)
  {
    sub_10036B818(*a2, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_10015CF50(v6, (char *)p_p, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    sub_10015CF50(v6, 0, 114);
  }
  sub_10001B910(&v10);
  return sub_10001B8AC(&v10);
}

void sub_1005BEFF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_10001B8AC(&a18);
  _Unwind_Resume(a1);
}

unsigned char *sub_1005BF028(uint64_t a1, uint64_t *a2, int a3)
{
  return sub_1005BEF4C(a1 - 256, a2, a3);
}

void sub_1005BF030(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(v4 + 123) = 1;
  sub_10036B818(v4, &__p);
  sub_1005BEC38(a1, (uint64_t)&__p, 4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  sub_10036B818(*a2, &v5);
  sub_1005BEC38(a1, (uint64_t)&v5, 8);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_1005BF0BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005BF0F0(uint64_t a1, uint64_t *a2)
{
}

void sub_1005BF0F8(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  if (*(char *)(*a3 + 111) < 0)
  {
    sub_10003B098(buf, *(void **)(v5 + 88), *(void *)(v5 + 96));
  }
  else
  {
    *(_OWORD *)long long buf = *(_OWORD *)(v5 + 88);
    uint64_t v25 = *(void *)(v5 + 104);
  }
  uint64_t v6 = HIBYTE(v25);
  if (v25 < 0) {
    uint64_t v6 = *(void *)&buf[8];
  }
  if (v6)
  {
    sub_10036AB54(*a3, (uint64_t)__p);
    unint64_t v7 = v23;
    if ((v23 & 0x80u) != 0) {
      unint64_t v7 = (unint64_t)__p[1];
    }
    if (v7)
    {
      BOOL v8 = 0;
      if ((v23 & 0x80) == 0) {
        goto LABEL_12;
      }
    }
    else
    {
      sub_10036C578((void *)(*a3 + 136), 0, v20);
      unint64_t v15 = (unint64_t)v20[1];
      if ((v21 & 0x80u) == 0) {
        unint64_t v15 = v21;
      }
      BOOL v8 = v15 == 0;
      if ((char)v21 < 0) {
        operator delete(v20[0]);
      }
      if ((v23 & 0x80) == 0)
      {
LABEL_12:
        if ((v25 & 0x8000000000000000) == 0) {
          goto LABEL_14;
        }
        goto LABEL_13;
      }
    }
    operator delete(__p[0]);
    goto LABEL_12;
  }
  BOOL v8 = 1;
  if (v25 < 0) {
LABEL_13:
  }
    operator delete(*(void **)buf);
LABEL_14:
  BOOL v9 = qword_100A1A020;
  BOOL v10 = os_log_type_enabled((os_log_t)qword_100A1A020, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    if (v10)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Could not send message to BTMap due to missing info", buf, 2u);
    }
    uint64_t v11 = a3[1];
    uint64_t v18 = *a3;
    int v19 = (std::__shared_weak_count *)v11;
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void *, uint64_t *, void))(*a1 + 96))(a1, &v18, 0);
    char v12 = v19;
    if (!v19) {
      return;
    }
LABEL_26:
    sub_10008A294(v12);
    return;
  }
  if (v10)
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Sending message to BTMap to be sent through IMCore", buf, 2u);
  }
  uint64_t v13 = a1[33];
  uint64_t v14 = a3[1];
  uint64_t v16 = *a3;
  int v17 = (std::__shared_weak_count *)v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v13 + 16))(v13, &v16);
  char v12 = v17;
  if (v17) {
    goto LABEL_26;
  }
}

void sub_1005BF320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v21 - 41) < 0) {
    operator delete(*(void **)(v21 - 64));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005BF378(uint64_t a1, unsigned int a2, uint64_t *a3, int a4, int a5, int a6)
{
  uint64_t v66 = 0;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  *(_OWORD *)uint64_t v54 = 0u;
  long long v55 = 0u;
  memset(v53, 0, sizeof(v53));
  long long v52 = 0u;
  sub_10004C67C((uint64_t)&v52);
  memset(&v51, 0, sizeof(v51));
  memset(&v50, 0, sizeof(v50));
  memset(&v49, 0, sizeof(v49));
  uint64_t v11 = sub_10003AB28((uint64_t)v53);
  sub_10003AB28(v11);
  uint64_t v12 = sub_10003AB28((uint64_t)v53);
  uint64_t v13 = sub_10003AB28(v12);
  sub_10003AB28(v13);
  if (a2 < 4) {
    std::string::assign(&v51, (&off_1009B7F68)[a2]);
  }
  if (a4 > 15)
  {
    switch(a4)
    {
      case 16:
        unint64_t v15 = "SendingFailure";
        break;
      case 32:
        uint64_t v16 = "DeliverySuccess";
LABEL_16:
        std::string::assign(&v50, v16);
        uint64_t v14 = "sent";
        goto LABEL_17;
      case 64:
        unint64_t v15 = "DeliveryFailure";
        break;
      default:
        goto LABEL_18;
    }
    std::string::assign(&v50, v15);
    uint64_t v14 = "outbox";
LABEL_17:
    std::string::assign(&v49, v14);
    goto LABEL_18;
  }
  switch(a4)
  {
    case 1:
      std::string::assign(&v50, "NewMessage");
      uint64_t v14 = "inbox";
      goto LABEL_17;
    case 2:
      std::string::assign(&v50, "MessageDeleted");
      uint64_t v14 = "deleted";
      goto LABEL_17;
    case 4:
      uint64_t v16 = "MessageShift";
      goto LABEL_16;
    case 8:
      uint64_t v16 = "SendingSuccess";
      goto LABEL_16;
    default:
      break;
  }
LABEL_18:
  uint64_t v17 = sub_10003AB28((uint64_t)v53);
  uint64_t v18 = sub_10003AB28(v17);
  uint64_t v19 = sub_10003AB28(v18);
  sub_10003AB28(v19);
  uint64_t v20 = sub_10003AB28((uint64_t)v53);
  uint64_t v21 = sub_10003AB28(v20);
  sub_10036B818(*a3, &__p);
  uint64_t v22 = sub_10003AB28(v21);
  sub_10003AB28(v22);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v23 = sub_10003AB28((uint64_t)v53);
  uint64_t v24 = sub_10003AB28(v23);
  uint64_t v25 = sub_10003AB28(v24);
  uint64_t v26 = sub_10003AB28(v25);
  sub_10003AB28(v26);
  if (a4 == 4)
  {
    uint64_t v27 = sub_10003AB28((uint64_t)v53);
    uint64_t v28 = sub_10003AB28(v27);
    __int16 v29 = (_OWORD *)sub_10003AB28(v28);
LABEL_41:
    sub_10003AB28((uint64_t)v29);
    goto LABEL_42;
  }
  if (a4 == 1 && a5)
  {
    uint64_t v30 = sub_10003AB28((uint64_t)v53);
    uint64_t v31 = sub_10003AB28(v30);
    sub_1005BB360(*a3, a6, &__p);
    uint64_t v32 = sub_10003AB28(v31);
    sub_10003AB28(v32);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v33 = sub_10003AB28((uint64_t)v53);
    uint64_t v34 = sub_10003AB28(v33);
    uint64_t v35 = *a3;
    if (*(char *)(*a3 + 87) < 0)
    {
      sub_10003B098(v46, *(void **)(v35 + 64), *(void *)(v35 + 72));
    }
    else
    {
      *(_OWORD *)long long v46 = *(_OWORD *)(v35 + 64);
      uint64_t v47 = *(void *)(v35 + 80);
    }
    sub_10044A49C((uint64_t)v46, &__p);
    uint64_t v36 = sub_10003AB28(v34);
    sub_10003AB28(v36);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v47) < 0) {
      operator delete(v46[0]);
    }
    uint64_t v37 = sub_10003AB28((uint64_t)v53);
    uint64_t v38 = sub_10003AB28(v37);
    uint64_t v39 = *a3;
    if (*(char *)(*a3 + 175) < 0)
    {
      sub_10003B098(v46, *(void **)(v39 + 152), *(void *)(v39 + 160));
    }
    else
    {
      *(_OWORD *)long long v46 = *(_OWORD *)(v39 + 152);
      uint64_t v47 = *(void *)(v39 + 168);
    }
    sub_10044A49C((uint64_t)v46, &__p);
    uint64_t v40 = sub_10003AB28(v38);
    sub_10003AB28(v40);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v47) < 0) {
      operator delete(v46[0]);
    }
    __int16 v29 = v53;
    goto LABEL_41;
  }
LABEL_42:
  uint64_t v41 = sub_10003AB28((uint64_t)v53);
  uint64_t v42 = sub_10003AB28(v41);
  uint64_t v43 = sub_10003AB28(v42);
  sub_10003AB28(v43);
  sub_10003AB28((uint64_t)v53);
  sub_10003AB28((uint64_t)v53);
  std::stringbuf::str();
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  *(void *)((char *)&v53[-1]
  *(void *)&v53[0] = v44;
  if (SHIBYTE(v55) < 0) {
    operator delete(v54[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1005BFAD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  sub_100742518((uint64_t)&a40);
  _Unwind_Resume(a1);
}

void sub_1005BFB9C(void *a1, unsigned int a2, uint64_t *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    unint64_t v7 = (unsigned char *)*a3;
    uint64_t v6 = (unsigned char *)(*a3 + a3[1]);
  }
  else
  {
    uint64_t v6 = (char *)a3 + *((unsigned __int8 *)a3 + 23);
    unint64_t v7 = a3;
  }
  while (v7 != v6)
  {
    *unint64_t v7 = __toupper(*v7);
    ++v7;
  }
  BOOL v8 = qword_100A1A020;
  if (os_log_type_enabled((os_log_t)qword_100A1A020, OS_LOG_TYPE_DEFAULT))
  {
    sub_1005BE448((uint64_t)a1, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    BOOL v10 = a3;
    if (*((char *)a3 + 23) < 0) {
      BOOL v10 = (uint64_t *)*a3;
    }
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = p_p;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&uint8_t buf[14] = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received 'GetMessageEvent' from %{public}s for messageHandle %s", buf, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  uint64_t v11 = a1[33];
  if (!v11) {
    goto LABEL_29;
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_10003B098(v18, (void *)*a3, a3[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v18 = *(_OWORD *)a3;
    uint64_t v19 = a3[2];
  }
  (*(void (**)(unsigned char *__return_ptr, uint64_t, void **))(*(void *)v11 + 32))(buf, v11, v18);
  if (SHIBYTE(v19) < 0) {
    operator delete(v18[0]);
  }
  if (*(void *)buf)
  {
    sub_100475EE0(a1[36], (uint64_t)&__p);
    int v12 = std::string::compare(&__p, "HandsFreeLink");
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v13 = a1[34];
    sub_1005BC0A0(*(uint64_t *)buf, v12 == 0);
    uint64_t v14 = v13 + 96;
    std::string::operator=((std::string *)(v13 + 96), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    unint64_t v15 = qword_100A1A020;
    if (os_log_type_enabled((os_log_t)qword_100A1A020, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Sending BMessage response to 'GetMessageEvent'", (uint8_t *)&__p, 2u);
    }
    __p.__r_.__value_.__s.__data_[0] = 0;
    sub_10001B8E0(&__p);
    if (*(char *)(v13 + 119) < 0)
    {
      uint64_t v14 = *(void *)(v13 + 96);
      uint64_t v16 = *(void *)(v13 + 104);
    }
    else
    {
      LOWORD(v16) = *(unsigned __int8 *)(v13 + 119);
    }
    sub_10015CD5C(a2, v14, v16, 1, 0);
  }
  else
  {
LABEL_29:
    uint64_t v17 = qword_100A1A020;
    if (os_log_type_enabled((os_log_t)qword_100A1A020, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "No matching message found.", (uint8_t *)&__p, 2u);
    }
    __p.__r_.__value_.__s.__data_[0] = 0;
    sub_10001B8E0(&__p);
    sub_10015CD5C(a2, 0, 0, 1, 114);
  }
  sub_10001B8AC(&__p);
  if (*(void *)&buf[8]) {
    sub_10008A294(*(std::__shared_weak_count **)&buf[8]);
  }
}

void sub_1005BFEAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a24) {
    sub_10008A294(a24);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1005BFF1C(uint64_t a1, unsigned int a2, std::string *p_str, int a4, unsigned int a5, char a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  uint64_t v17 = qword_100A1A020;
  if (os_log_type_enabled((os_log_t)qword_100A1A020, OS_LOG_TYPE_DEFAULT))
  {
    sub_1005BE448(a1, __p);
    uint64_t v18 = (void **)__p[0];
    if ((SBYTE7(v72) & 0x80u) == 0) {
      uint64_t v18 = __p;
    }
    uint64_t v19 = p_str;
    if (SHIBYTE(p_str->__r_.__value_.__r.__words[2]) < 0) {
      uint64_t v19 = (std::string *)p_str->__r_.__value_.__r.__words[0];
    }
    int v20 = (*(_DWORD *)(*(void *)(a1 + 272) + 124) >> 18) & 1;
    *(_DWORD *)long long buf = 136448002;
    *(void *)&uint8_t buf[4] = v18;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&uint8_t buf[14] = a2;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v19;
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = a4;
    *(_WORD *)&buf[34] = 1024;
    *(_DWORD *)&buf[36] = a8;
    *(_WORD *)&buf[40] = 1024;
    *(_DWORD *)&unsigned char buf[42] = a7;
    *(_WORD *)&buf[46] = 1024;
    LODWORD(v78[0]) = a11;
    WORD2(v78[0]) = 1024;
    *(_DWORD *)((char *)v78 + 6) = v20;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Received 'GetMessageListingEvent' from device %{public}s (connectionId: %u, path: %s, maxListCount: %u, filterMessageType: %u, parameterMask: %u, filterReadStatus: %u, UTCOffsetTimeSupport: %d)", buf, 0x3Au);
    if (SBYTE7(v72) < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v73 = 0;
  long long v72 = 0u;
  *(_OWORD *)std::string __p = 0u;
  sub_1005BCD94((uint64_t)__p);
  *(void *)__s = 0;
  uint64_t v85 = 0;
  uint64_t v83 = 0;
  long long v82 = 0u;
  memset(v81, 0, sizeof(v81));
  *(_OWORD *)int64_t v80 = 0u;
  long long v79 = 0u;
  *(_OWORD *)uint64_t v78 = 0u;
  memset(buf, 0, sizeof(buf));
  sub_1006161E0((uint64_t)&buf[1]);
  unsigned char buf[18] = 0;
  buf[20] = 0;
  BYTE2(v78[0]) = 0;
  BYTE4(v78[0]) = 0;
  DWORD1(v81[1]) = 0;
  memset(&buf[24], 0, 24);
  LOBYTE(v78[0]) = 0;
  v78[1] = 0;
  long long v79 = 0uLL;
  LOBYTE(v80[0]) = 0;
  v80[1] = 0;
  memset(v81, 0, 19);
  BYTE8(v81[1]) = 1;
  BYTE2(v83) = 0;
  *(void *)((char *)&v81[1] + 14) = 0;
  *(void *)((char *)&v81[1] + 9) = 0;
  *((void *)&v81[2] + 1) = 0;
  long long v82 = 0uLL;
  LOBYTE(v83) = 0;
  LOBYTE(__p[0]) = a6;
  HIDWORD(__p[0]) = a7;
  uint64_t v21 = *(void *)(a1 + 272);
  LOBYTE(__p[1]) = (*(_DWORD *)(v21 + 124) & 0x40000) != 0;
  memset(&__str, 0, sizeof(__str));
  uint64_t v22 = *(void *)(v21 + 8);
  if (*(char *)(v22 + 55) < 0) {
    sub_10003B098(&__str, *(void **)(v22 + 32), *(void *)(v22 + 40));
  }
  else {
    std::string __str = *(std::string *)(v22 + 32);
  }
  memset(&v69, 0, sizeof(v69));
  if ((SHIBYTE(p_str->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((unsigned char *)&p_str->__r_.__value_.__s + 23)) {
      goto LABEL_13;
    }
LABEL_17:
    p_str = &__str;
LABEL_18:
    std::string::operator=(&v69, p_str);
    goto LABEL_25;
  }
  if (!p_str->__r_.__value_.__l.__size_) {
    goto LABEL_17;
  }
LABEL_13:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__str.__r_.__value_.__l.__size_ != 3) {
      goto LABEL_25;
    }
    uint64_t v23 = (std::string *)__str.__r_.__value_.__r.__words[0];
    goto LABEL_21;
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) == 3)
  {
    uint64_t v23 = &__str;
LABEL_21:
    int data_low = LOWORD(v23->__r_.__value_.__l.__data_);
    int v25 = v23->__r_.__value_.__s.__data_[2];
    if (data_low != 29549 || v25 != 103) {
      goto LABEL_25;
    }
    uint64_t v41 = *(void *)(a1 + 272);
    if ((*((unsigned char *)&p_str->__r_.__value_.__s + 23) & 0x80) != 0)
    {
      sub_10003B098(v67, p_str->__r_.__value_.__l.__data_, p_str->__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)char v67 = *(_OWORD *)&p_str->__r_.__value_.__l.__data_;
      std::string::size_type v68 = p_str->__r_.__value_.__r.__words[2];
    }
    char v42 = sub_1005C07C4(v41, (uint64_t)v67);
    if (SHIBYTE(v68) < 0) {
      operator delete(v67[0]);
    }
    if ((v42 & 1) == 0)
    {
      unsigned int v43 = a2;
      uint64_t v44 = qword_100A1A020;
      if (os_log_type_enabled((os_log_t)qword_100A1A020, OS_LOG_TYPE_DEFAULT))
      {
        if (SHIBYTE(p_str->__r_.__value_.__r.__words[2]) < 0) {
          p_str = (std::string *)p_str->__r_.__value_.__r.__words[0];
        }
        uint64_t v45 = *(void *)(*(void *)(a1 + 272) + 8);
        if (*(char *)(v45 + 55) < 0)
        {
          sub_10003B098(v65, *(void **)(v45 + 32), *(void *)(v45 + 40));
        }
        else
        {
          *(_OWORD *)long long v65 = *(_OWORD *)(v45 + 32);
          uint64_t v66 = *(void *)(v45 + 48);
        }
        long long v46 = v65;
        if (v66 < 0) {
          long long v46 = (void **)v65[0];
        }
        *(_DWORD *)int64_t v74 = 136315394;
        *(void *)&v74[4] = p_str;
        __int16 v75 = 2080;
        uint64_t v76 = v46;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "No such folder %s at path %s", v74, 0x16u);
        if (SHIBYTE(v66) < 0) {
          operator delete(v65[0]);
        }
      }
      LOBYTE(v65[0]) = 0;
      sub_10001B8E0(v65);
      uint64_t v39 = sub_10015D198(v43, 0, 0, 0, 0, 0);
      sub_10001B8AC(v65);
      goto LABEL_70;
    }
    goto LABEL_18;
  }
LABEL_25:
  v65[1] = 0;
  v65[0] = 0;
  uint64_t v66 = 0;
  uint64_t v27 = *(void *)(a1 + 264);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    sub_10003B098(&__dst, v69.__r_.__value_.__l.__data_, v69.__r_.__value_.__l.__size_);
  }
  else {
    std::string __dst = v69;
  }
  (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(void *)v27 + 40))(v65, v27, &__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  uint64_t v48 = a1;
  unsigned int v47 = a2;
  uint64_t v28 = (char *)v65[1];
  if (v65[1] != v65[0])
  {
    char v29 = 0;
    unsigned int v30 = 0;
    while (1)
    {
      uint64_t v31 = *((void *)v28 - 2);
      uint64_t v32 = (std::__shared_weak_count *)*((void *)v28 - 1);
      v28 -= 16;
      if (v32) {
        atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v33 = *(unsigned char *)(v31 + 122) == 0;
      if (a11)
      {
        if ((a11 & 2) != 0 || *(unsigned char *)(v31 + 122)) {
          goto LABEL_52;
        }
      }
      else if ((a11 & 2) != 0 && !*(unsigned char *)(v31 + 122))
      {
        goto LABEL_52;
      }
      ++v30;
      if (a4 && v30 > a5 && v30 <= a5 + a4)
      {
        sub_1005BC570((uint64_t)v51, v31);
        sub_1005BCE28((uint64_t *)__p, (uint64_t)v51);
        if (v63 < 0) {
          operator delete(v62);
        }
        sub_1005D428C(&v61);
        sub_1005D428C(&v60);
        if (v59 < 0) {
          operator delete(v58);
        }
        if (v57 < 0) {
          operator delete(v56);
        }
        if (v55 < 0) {
          operator delete(v54);
        }
        if (v53 < 0)
        {
          operator delete(v52);
          if (!v32) {
            goto LABEL_54;
          }
LABEL_53:
          sub_10008A294(v32);
          goto LABEL_54;
        }
      }
LABEL_52:
      if (v32) {
        goto LABEL_53;
      }
LABEL_54:
      v29 |= v33;
      if (v28 == v65[0]) {
        goto LABEL_59;
      }
    }
  }
  unsigned int v30 = 0;
  char v29 = 0;
LABEL_59:
  if (a4)
  {
    sub_1005BE038(*(void *)(a1 + 272), (unsigned __int8 *)__p);
    uint64_t v34 = *(void *)(a1 + 272);
    if (*(char *)(v34 + 71) < 0)
    {
      uint64_t v35 = *(void *)(v34 + 48);
      uint64_t v36 = *(void *)(v34 + 56);
    }
    else
    {
      uint64_t v35 = v34 + 48;
      LOWORD(v36) = *(unsigned __int8 *)(v34 + 71);
    }
    uint64_t v38 = qword_100A1A020;
    if (os_log_type_enabled((os_log_t)qword_100A1A020, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int64_t v74 = 67109120;
      *(_DWORD *)&v74[4] = v30;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "getMessageListingEvent count = %u", v74, 8u);
    }
    a1 = v48;
  }
  else
  {
    uint64_t v37 = qword_100A1A020;
    if (os_log_type_enabled((os_log_t)qword_100A1A020, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int64_t v74 = 67109120;
      *(_DWORD *)&v74[4] = v30;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "getMessageListingEvent only returning the count %d", v74, 8u);
    }
    LOWORD(v36) = 0;
    uint64_t v35 = 0;
  }
  (*(void (**)(void, char *))(**(void **)(a1 + 264) + 8))(*(void *)(a1 + 264), __s);
  v74[0] = 0;
  sub_10001B8E0(v74);
  uint64_t v39 = sub_10015D198(v47, v29 & 1, v30, v35, (unsigned __int16)v36, __s);
  sub_10001B8AC(v74);
  *(void *)int64_t v74 = v65;
  sub_10036CEBC((void ***)v74);
LABEL_70:
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v81[0]) < 0) {
    operator delete(v80[1]);
  }
  if (SHIBYTE(v79) < 0) {
    operator delete(v78[1]);
  }
  if ((char)buf[47] < 0) {
    operator delete(*(void **)&buf[24]);
  }
  nullsub_95(&buf[1]);
  sub_1005BCE24((uint64_t)__p);
  return v39;
}

void sub_1005C06D8(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x47F]) < 0) {
    operator delete((void *)STACK[0x468]);
  }
  if (SLOBYTE(STACK[0x497]) < 0) {
    operator delete((void *)STACK[0x480]);
  }
  sub_100276384((uint64_t)&STACK[0x4F0]);
  sub_1005BCE24((uint64_t)&STACK[0x4A0]);
  _Unwind_Resume(a1);
}

uint64_t sub_1005C07C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10003B098(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v6 = *(void *)(a2 + 16);
  }
  uint64_t v3 = sub_1005C2FA8(v2, (unsigned __int8 *)__p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_1005C083C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005C0858(uint64_t a1)
{
  if (*(char *)(a1 + 1007) < 0) {
    operator delete(*(void **)(a1 + 984));
  }
  sub_1005D428C(a1 + 560);
  sub_1005D428C(a1 + 136);
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_1005C08DC(uint64_t a1, unsigned int a2, int a3, int a4)
{
  BOOL v8 = qword_100A1A020;
  if (os_log_type_enabled((os_log_t)qword_100A1A020, OS_LOG_TYPE_DEFAULT))
  {
    sub_1005BE448(a1, __p);
    if (v18 >= 0) {
      BOOL v9 = __p;
    }
    else {
      BOOL v9 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136446722;
    int v20 = v9;
    __int16 v21 = 1024;
    int v22 = a3;
    __int16 v23 = 1024;
    int v24 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received 'GetFolderListing' event from device %{public}s (maxListCount=%d, startOffset=%d)", buf, 0x18u);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    BOOL v8 = qword_100A1A020;
  }
  uint64_t v10 = *(void *)(a1 + 272);
  uint64_t v11 = *(void *)(*(void *)(v10 + 8) + 24);
  int v12 = (void ***)(v10 + 24);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = (void **)(v10 + 24);
    if (*(char *)(v10 + 47) < 0) {
      uint64_t v13 = *v12;
    }
    *(_DWORD *)long long buf = 136315138;
    int v20 = v13;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Folder listing = %s", buf, 0xCu);
  }
  buf[0] = 0;
  sub_10001B8E0(buf);
  if (*(char *)(v10 + 47) < 0)
  {
    int v12 = *(void ****)(v10 + 24);
    uint64_t v14 = *(void *)(v10 + 32);
  }
  else
  {
    LOWORD(v14) = *(unsigned __int8 *)(v10 + 47);
  }
  uint64_t v15 = sub_10015D414(a2, v11, (uint64_t)v12, v14);
  sub_10001B8AC(buf);
  return v15;
}

void sub_1005C0A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10001B8AC(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005C0AB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, char a6)
{
  uint64_t v6 = *(std::string **)(a1 + 272);
  uint64_t v7 = 1738;
  if (v6 && (a6 & 1) == 0)
  {
    if (*(char *)(a3 + 23) < 0)
    {
      sub_10003B098(__p, *(void **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a3;
      uint64_t v11 = *(void *)(a3 + 16);
    }
    uint64_t v7 = sub_1005BDCF8(v6, __p, a5);
    if (SHIBYTE(v11) < 0) {
      operator delete(__p[0]);
    }
  }
  return v7;
}

void sub_1005C0B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_1005C0B5C(uint64_t a1, unsigned int a2, int a3, uint64_t *a4)
{
  if (*((char *)a4 + 23) < 0)
  {
    BOOL v9 = (unsigned char *)*a4;
    BOOL v8 = (unsigned char *)(*a4 + a4[1]);
  }
  else
  {
    BOOL v8 = (char *)a4 + *((unsigned __int8 *)a4 + 23);
    BOOL v9 = a4;
  }
  while (v9 != v8)
  {
    unsigned char *v9 = __toupper(*v9);
    ++v9;
  }
  uint64_t v10 = qword_100A1A020;
  if (os_log_type_enabled((os_log_t)qword_100A1A020, OS_LOG_TYPE_DEFAULT))
  {
    sub_1005BE448(a1, __p);
    uint64_t v11 = (void **)__p[0];
    if (v18 >= 0) {
      uint64_t v11 = __p;
    }
    int v12 = a4;
    if (*((char *)a4 + 23) < 0) {
      int v12 = (uint64_t *)*a4;
    }
    *(_DWORD *)long long buf = 136446722;
    int v20 = v11;
    __int16 v21 = 1024;
    int v22 = a3;
    __int16 v23 = 2080;
    int v24 = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Received 'SetReadStatus' event from device %{public}s (readFlag=%d, messageGUID=%s)", buf, 0x1Cu);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v13 = *(void *)(a1 + 264);
  if (v13)
  {
    if (*((char *)a4 + 23) < 0)
    {
      sub_10003B098(v15, (void *)*a4, a4[1]);
    }
    else
    {
      *(_OWORD *)uint64_t v15 = *(_OWORD *)a4;
      uint64_t v16 = a4[2];
    }
    (*(void (**)(uint64_t, void **))(*(void *)v13 + 24))(v13, v15);
    if (SHIBYTE(v16) < 0) {
      operator delete(v15[0]);
    }
  }
  buf[0] = 0;
  sub_10001B8E0(buf);
  sub_10015D668(a2, 0);
  return sub_10001B8AC(buf);
}

void sub_1005C0D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_1005C0D6C(uint64_t a1, unsigned int a2, int a3, uint64_t *a4)
{
  if (*((char *)a4 + 23) < 0)
  {
    BOOL v9 = (unsigned char *)*a4;
    BOOL v8 = (unsigned char *)(*a4 + a4[1]);
  }
  else
  {
    BOOL v8 = (char *)a4 + *((unsigned __int8 *)a4 + 23);
    BOOL v9 = a4;
  }
  while (v9 != v8)
  {
    unsigned char *v9 = __toupper(*v9);
    ++v9;
  }
  uint64_t v10 = qword_100A1A020;
  if (!os_log_type_enabled((os_log_t)qword_100A1A020, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_12;
  }
  sub_1005BE448(a1, __p);
  uint64_t v11 = (void **)__p[0];
  if (v22 >= 0) {
    uint64_t v11 = __p;
  }
  int v12 = a4;
  if (*((char *)a4 + 23) < 0) {
    int v12 = (uint64_t *)*a4;
  }
  *(_DWORD *)long long buf = 136446722;
  int v24 = v11;
  __int16 v25 = 1024;
  int v26 = a3;
  __int16 v27 = 2080;
  uint64_t v28 = v12;
  _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Received 'SetDeleteStatus' from device %{public}s (deleteFlag=%d, messageHandle=%s)", buf, 0x1Cu);
  if (v22 < 0)
  {
    operator delete(__p[0]);
    if (a3)
    {
LABEL_13:
      uint64_t v13 = *(void *)(a1 + 264);
      if (v13)
      {
        if (*((char *)a4 + 23) < 0)
        {
          sub_10003B098(__dst, (void *)*a4, a4[1]);
        }
        else
        {
          *(_OWORD *)std::string __dst = *(_OWORD *)a4;
          uint64_t v20 = a4[2];
        }
        (*(void (**)(uint64_t, void **))(*(void *)v13 + 48))(v13, __dst);
        if (SHIBYTE(v20) < 0) {
          operator delete(__dst[0]);
        }
      }
      if (*((char *)a4 + 23) < 0)
      {
        sub_10003B098(v17, (void *)*a4, a4[1]);
      }
      else
      {
        *(_OWORD *)uint64_t v17 = *(_OWORD *)a4;
        uint64_t v18 = a4[2];
      }
      sub_1005BEC38(a1, (uint64_t)v17, 2);
      if (SHIBYTE(v18) < 0) {
        operator delete(v17[0]);
      }
      int v15 = 0;
      goto LABEL_29;
    }
  }
  else
  {
LABEL_12:
    if (a3) {
      goto LABEL_13;
    }
  }
  uint64_t v14 = qword_100A1A020;
  if (os_log_type_enabled((os_log_t)qword_100A1A020, OS_LOG_TYPE_ERROR)) {
    sub_100780B34(v14);
  }
  int v15 = 1706;
LABEL_29:
  buf[0] = 0;
  sub_10001B8E0(buf);
  sub_10015D668(a2, v15);
  return sub_10001B8AC(buf);
}

void sub_1005C0FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_1005C1010(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v6 = qword_100A1A020;
  if (os_log_type_enabled((os_log_t)qword_100A1A020, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(*(void *)(a1 + 288), __p);
    if (v10 >= 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136446210;
    int v12 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received 'SetNotificationFilter' from device %{public}s", buf, 0xCu);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
  *(_DWORD *)(*(void *)(a1 + 272) + 120) = a3;
  LOBYTE(__p[0]) = 0;
  sub_10001B8E0(__p);
  sub_10015D6E4(a2, 0);
  return sub_10001B8AC(__p);
}

void sub_1005C1124(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10001B8AC(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005C1140(void *a1)
{
  *a1 = off_1009B7D58;
  a1[32] = off_1009B7DD8;
  sub_1005C3194(a1 + 34, 0);

  return sub_100283DC8((uint64_t)a1);
}

void sub_1005C11BC(void *a1)
{
  *a1 = off_1009B7D58;
  a1[32] = off_1009B7DD8;
  sub_1005C3194(a1 + 34, 0);
  sub_100283DC8((uint64_t)a1);

  operator delete();
}

uint64_t sub_1005C124C()
{
  return 2;
}

uint64_t sub_1005C1254(uint64_t a1, uint64_t a2, long long *a3)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a1 + 8;
  *(void *)(a1 + 16) = a1 + 8;
  *(void *)(a1 + 24) = 0;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10003B098((unsigned char *)(a1 + 32), *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    *(void *)(a1 + 48) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 32) = v5;
  }
  if (a2)
  {
    uint64_t v6 = operator new(0x18uLL);
    uint64_t v8 = *(void *)(a2 + 8);
    uint64_t v7 = (void *)(a2 + 8);
    v6[1] = v7;
    void v6[2] = a1;
    void *v6 = v8;
    *(void *)(v8 + 8) = v6;
    *uint64_t v7 = v6;
    ++v7[2];
  }
  return a1;
}

void sub_1005C12E8(_Unwind_Exception *a1)
{
  sub_1002B308C(v1);
  _Unwind_Resume(a1);
}

void *sub_1005C1314(void *a1, uint64_t a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != a2)
  {
    uint64_t v5 = 1;
    uint64_t v6 = a1;
    do
    {
      uint64_t v7 = operator new(0x18uLL);
      uint64_t v8 = *(void *)(v3 + 16);
      v7[1] = a1;
      _OWORD v7[2] = v8;
      *uint64_t v7 = v6;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = v5;
      uint64_t v3 = *(void *)(v3 + 8);
      ++v5;
      uint64_t v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1005C139C(_Unwind_Exception *a1)
{
  sub_1002B308C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1005C13B0(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 8);
  for (uint64_t i = *(void **)(a1 + 16); i != v2; uint64_t i = (void *)i[1])
  {
    if (i[2])
    {
      sub_1005C13B0();
      operator delete();
    }
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  sub_1002B308C(v2);
  return a1;
}

void sub_1005C142C(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  int v10 = *a1;
  __int16 v11 = *((_WORD *)a1 + 2);
  if (qword_1009FB398 != -1) {
    dispatch_once(&qword_1009FB398, &stru_1009B7E18);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1005C15A4;
  v6[3] = &unk_100997528;
  int v8 = v10;
  __int16 v9 = v11;
  __int16 v7 = a5;
  sub_1004C9DF0(qword_1009FB390, v6);
}

void sub_1005C14F4(__int16 a1, int a2)
{
  if (qword_1009FB398 != -1) {
    dispatch_once(&qword_1009FB398, &stru_1009B7E18);
  }
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_1005C1730;
  void v4[3] = &unk_100998880;
  __int16 v6 = a1;
  int v5 = a2;
  sub_1004C9DF0(qword_1009FB390, v4);
}

uint64_t sub_1005C15A4(uint64_t a1)
{
  if (qword_1009FBD88 != -1) {
    dispatch_once(&qword_1009FBD88, &stru_1009B7E38);
  }
  uint64_t v2 = qword_1009FBD80;
  unint64_t v3 = *(unsigned int *)(a1 + 34) | ((unint64_t)*(unsigned __int16 *)(a1 + 38) << 32);
  unsigned int v4 = *(unsigned __int16 *)(a1 + 32);

  return sub_1005BE464(v2, v3, v4);
}

void sub_1005C1614(id a1)
{
}

void sub_1005C1658()
{
}

void sub_1005C167C(id a1)
{
}

void sub_1005C170C()
{
}

void sub_1005C1730(uint64_t a1)
{
  if (qword_1009FBD88 != -1) {
    dispatch_once(&qword_1009FBD88, &stru_1009B7E38);
  }
  uint64_t v2 = qword_1009FBD80;
  unsigned __int16 v3 = *(_WORD *)(a1 + 36);

  sub_1005BEA44(v2, v3);
}

void sub_1005C1798(__int16 a1, char *a2, char a3, char a4, char a5)
{
  v17[0] = 0;
  v17[1] = 0;
  uint64_t v18 = 0;
  sub_10004191C(v17, a2);
  if (qword_1009FB398 != -1) {
    dispatch_once(&qword_1009FB398, &stru_1009B7E18);
  }
  uint64_t v9 = qword_1009FB390;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3321888768;
  void v10[2] = sub_1005C2514;
  void v10[3] = &unk_1009B7E58;
  __int16 v13 = a1;
  if (SHIBYTE(v18) < 0)
  {
    sub_10003B098(&__p, v17[0], (unint64_t)v17[1]);
  }
  else
  {
    long long __p = *(_OWORD *)v17;
    uint64_t v12 = v18;
  }
  char v14 = a3;
  char v15 = a4;
  char v16 = a5;
  sub_1004C9DF0(v9, v10);
  if (SHIBYTE(v12) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(v17[0]);
  }
}

void sub_1005C18C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005C18F8(int a1, void *a2, unsigned int a3)
{
  __int16 v6 = qword_100A1A020;
  if (os_log_type_enabled((os_log_t)qword_100A1A020, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = a1;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "sendMessage(connectionId=%u, bodyDataLen=%u)", buf, 0xEu);
  }
  memset(buf, 0, sizeof(buf));
  uint64_t v13 = 0;
  sub_1002E5698(buf, a2, a3);
  if (qword_1009FB398 != -1) {
    dispatch_once(&qword_1009FB398, &stru_1009B7E18);
  }
  uint64_t v7 = qword_1009FB390;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768;
  _OWORD v8[2] = sub_1005C25EC;
  v8[3] = &unk_1009B7E88;
  if (SHIBYTE(v13) < 0)
  {
    sub_10003B098(&__p, *(void **)buf, *(unint64_t *)&buf[8]);
  }
  else
  {
    long long __p = *(_OWORD *)buf;
    uint64_t v10 = v13;
  }
  __int16 v11 = a1;
  sub_1004C9DF0(v7, v8);
  if (SHIBYTE(v10) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(*(void **)buf);
  }
}

void sub_1005C1A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005C1AD8(__int16 a1, char *a2, __int16 a3, __int16 a4, char a5, int a6, char a7, _OWORD *a8, _OWORD *a9, char a10, _OWORD *a11, _OWORD *a12, char a13)
{
  __int16 v21 = qword_100A1A020;
  if (os_log_type_enabled((os_log_t)qword_100A1A020, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Got stack call for getMessageListing", buf, 2u);
  }
  memset(buf, 0, sizeof(buf));
  uint64_t v88 = 0;
  if (a2) {
    char v22 = a2;
  }
  else {
    char v22 = "";
  }
  sub_10004191C(buf, v22);
  __int16 v23 = operator new(0x20uLL);
  long long v24 = a8[1];
  _OWORD *v23 = *a8;
  v23[1] = v24;
  __int16 v25 = operator new(0x20uLL);
  long long v26 = a9[1];
  _OWORD *v25 = *a9;
  v25[1] = v26;
  __int16 v27 = operator new(0xFFuLL);
  long long v28 = a11[13];
  v27[12] = a11[12];
  v27[13] = v28;
  v27[14] = a11[14];
  *(_OWORD *)((char *)v27 + 239) = *(_OWORD *)((char *)a11 + 239);
  long long v29 = a11[9];
  v27[8] = a11[8];
  v27[9] = v29;
  long long v30 = a11[11];
  unsigned char v27[10] = a11[10];
  v27[11] = v30;
  long long v31 = a11[5];
  uint8_t v27[4] = a11[4];
  v27[5] = v31;
  long long v32 = a11[7];
  v27[6] = a11[6];
  v27[7] = v32;
  long long v33 = a11[1];
  _OWORD *v27 = *a11;
  v27[1] = v33;
  long long v34 = a11[3];
  void v27[2] = a11[2];
  v27[3] = v34;
  uint64_t v35 = operator new(0xFFuLL);
  long long v36 = a12[13];
  v35[12] = a12[12];
  v35[13] = v36;
  v35[14] = a12[14];
  *(_OWORD *)((char *)v35 + 239) = *(_OWORD *)((char *)a12 + 239);
  long long v37 = a12[9];
  v35[8] = a12[8];
  v35[9] = v37;
  long long v38 = a12[11];
  v35[10] = a12[10];
  v35[11] = v38;
  long long v39 = a12[5];
  void v35[4] = a12[4];
  v35[5] = v39;
  long long v40 = a12[7];
  v35[6] = a12[6];
  v35[7] = v40;
  long long v41 = a12[1];
  *uint64_t v35 = *a12;
  v35[1] = v41;
  long long v42 = a12[3];
  v35[2] = a12[2];
  v35[3] = v42;
  if (qword_1009FB398 != -1) {
    dispatch_once(&qword_1009FB398, &stru_1009B7E18);
  }
  uint64_t v63 = qword_1009FB390;
  v64[0] = _NSConcreteStackBlock;
  v64[1] = 3321888768;
  v64[2] = sub_1005C276C;
  v64[3] = &unk_1009B7EB8;
  __int16 v80 = a1;
  if (SHIBYTE(v88) < 0)
  {
    sub_10003B098(&v65, *(void **)buf, *(unint64_t *)&buf[8]);
  }
  else
  {
    long long v65 = *(_OWORD *)buf;
    uint64_t v66 = v88;
  }
  __int16 v81 = a3;
  __int16 v82 = a4;
  char v83 = a5;
  int v79 = a6;
  char v84 = a7;
  std::string::size_type v68 = 0;
  std::string v69 = 0;
  char v67 = 0;
  unsigned int v43 = operator new(0x20uLL);
  long long v44 = v23[1];
  *unsigned int v43 = *v23;
  v43[1] = v44;
  char v67 = v43;
  std::string::size_type v68 = v43 + 2;
  std::string v69 = v43 + 2;
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  long long v72 = 0;
  uint64_t v45 = operator new(0x20uLL);
  long long v46 = v25[1];
  *uint64_t v45 = *v25;
  v45[1] = v46;
  uint64_t v70 = v45;
  uint64_t v71 = v45 + 2;
  char v85 = a10;
  long long v72 = v45 + 2;
  uint64_t v73 = 0;
  int64_t v74 = 0;
  __int16 v75 = 0;
  unsigned int v47 = operator new(0xFFuLL);
  long long v48 = v27[13];
  v47[12] = v27[12];
  v47[13] = v48;
  v47[14] = v27[14];
  *(_OWORD *)((char *)v47 + 239) = *(_OWORD *)((char *)v27 + 239);
  long long v49 = v27[9];
  uint8_t v47[8] = v27[8];
  v47[9] = v49;
  long long v50 = v27[11];
  v47[10] = v27[10];
  v47[11] = v50;
  long long v51 = v27[5];
  v47[4] = v27[4];
  void v47[5] = v51;
  long long v52 = v27[7];
  v47[6] = v27[6];
  v47[7] = v52;
  long long v53 = v27[1];
  *unsigned int v47 = *v27;
  v47[1] = v53;
  long long v54 = v27[3];
  v47[2] = v27[2];
  v47[3] = v54;
  uint64_t v73 = v47;
  int64_t v74 = (char *)v47 + 255;
  __int16 v75 = (char *)v47 + 255;
  long long __p = 0;
  std::string::size_type v77 = 0;
  uint64_t v78 = 0;
  char v55 = operator new(0xFFuLL);
  uint64_t v78 = (char *)v55 + 255;
  long long v56 = v35[13];
  v55[12] = v35[12];
  v55[13] = v56;
  v55[14] = v35[14];
  *(_OWORD *)((char *)v55 + 239) = *(_OWORD *)((char *)v35 + 239);
  long long v57 = v35[9];
  v55[8] = v35[8];
  v55[9] = v57;
  long long v58 = v35[11];
  v55[10] = v35[10];
  v55[11] = v58;
  long long v59 = v35[5];
  uint8_t v55[4] = v35[4];
  v55[5] = v59;
  long long v60 = v35[7];
  v55[6] = v35[6];
  v55[7] = v60;
  long long v61 = v35[1];
  *char v55 = *v35;
  v55[1] = v61;
  long long v62 = v35[3];
  v55[2] = v35[2];
  v55[3] = v62;
  long long __p = v55;
  std::string::size_type v77 = (char *)v55 + 255;
  char v86 = a13;
  sub_1004C9DF0(v63, v64);
  if (__p)
  {
    std::string::size_type v77 = __p;
    operator delete(__p);
  }
  if (v73)
  {
    int64_t v74 = v73;
    operator delete(v73);
  }
  if (v70)
  {
    uint64_t v71 = v70;
    operator delete(v70);
  }
  if (v67)
  {
    std::string::size_type v68 = v67;
    operator delete(v67);
  }
  if (SHIBYTE(v66) < 0) {
    operator delete((void *)v65);
  }
  operator delete(v35);
  operator delete(v27);
  operator delete(v25);
  operator delete(v23);
  if (SHIBYTE(v88) < 0) {
    operator delete(*(void **)buf);
  }
}

void sub_1005C1ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  operator delete(v33);
  operator delete(v32);
  operator delete(v31);
  operator delete(v30);
  if (*(char *)(v34 - 89) < 0) {
    operator delete(*(void **)(v34 - 112));
  }
  _Unwind_Resume(a1);
}

void sub_1005C1F84()
{
}

void sub_1005C1F8C()
{
}

void sub_1005C1F94()
{
}

void sub_1005C1F9C()
{
}

void sub_1005C1FA4(__int16 a1, __int16 a2, __int16 a3)
{
  if (qword_1009FB398 != -1) {
    dispatch_once(&qword_1009FB398, &stru_1009B7E18);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1005C2C58;
  v6[3] = &unk_100998880;
  __int16 v7 = a1;
  __int16 v8 = a2;
  __int16 v9 = a3;
  sub_1004C9DF0(qword_1009FB390, v6);
}

void sub_1005C2064(__int16 a1, char *a2, __int16 a3, char a4, char a5)
{
  v17[0] = 0;
  v17[1] = 0;
  uint64_t v18 = 0;
  sub_10004191C(v17, a2);
  if (qword_1009FB398 != -1) {
    dispatch_once(&qword_1009FB398, &stru_1009B7E18);
  }
  uint64_t v9 = qword_1009FB390;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3321888768;
  void v10[2] = sub_1005C2CC4;
  void v10[3] = &unk_1009B7EE8;
  __int16 v13 = a1;
  if (SHIBYTE(v18) < 0)
  {
    sub_10003B098(&__p, v17[0], (unint64_t)v17[1]);
  }
  else
  {
    long long __p = *(_OWORD *)v17;
    uint64_t v12 = v18;
  }
  __int16 v14 = a3;
  char v15 = a4;
  char v16 = a5;
  sub_1004C9DF0(v9, v10);
  if (SHIBYTE(v12) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(v17[0]);
  }
}

void sub_1005C2190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005C21C4(__int16 a1, char a2, char *__s)
{
  long long v11 = 0uLL;
  uint64_t v12 = 0;
  sub_10004191C(&v11, __s);
  if (qword_1009FB398 != -1) {
    dispatch_once(&qword_1009FB398, &stru_1009B7E18);
  }
  uint64_t v5 = qword_1009FB390;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3321888768;
  void v6[2] = sub_1005C2D90;
  v6[3] = &unk_1009B7F18;
  __int16 v9 = a1;
  char v10 = a2;
  if (SHIBYTE(v12) < 0)
  {
    sub_10003B098(&__p, (void *)v11, *((unint64_t *)&v11 + 1));
  }
  else
  {
    long long __p = v11;
    uint64_t v8 = v12;
  }
  sub_1004C9DF0(v5, v6);
  if (SHIBYTE(v8) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete((void *)v11);
  }
}

void sub_1005C22DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (*(char *)(v19 - 33) < 0) {
    operator delete(*(void **)(v19 - 56));
  }
  _Unwind_Resume(exception_object);
}

void sub_1005C2310(__int16 a1, char a2, char *__s)
{
  long long v11 = 0uLL;
  uint64_t v12 = 0;
  sub_10004191C(&v11, __s);
  if (qword_1009FB398 != -1) {
    dispatch_once(&qword_1009FB398, &stru_1009B7E18);
  }
  uint64_t v5 = qword_1009FB390;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3321888768;
  void v6[2] = sub_1005C2E68;
  v6[3] = &unk_1009B7F18;
  __int16 v9 = a1;
  char v10 = a2;
  if (SHIBYTE(v12) < 0)
  {
    sub_10003B098(&__p, (void *)v11, *((unint64_t *)&v11 + 1));
  }
  else
  {
    long long __p = v11;
    uint64_t v8 = v12;
  }
  sub_1004C9DF0(v5, v6);
  if (SHIBYTE(v8) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete((void *)v11);
  }
}

void sub_1005C2428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (*(char *)(v19 - 33) < 0) {
    operator delete(*(void **)(v19 - 56));
  }
  _Unwind_Resume(exception_object);
}

void sub_1005C2464(__int16 a1, int a2)
{
  if (qword_1009FB398 != -1) {
    dispatch_once(&qword_1009FB398, &stru_1009B7E18);
  }
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_1005C2F40;
  void v4[3] = &unk_100998880;
  __int16 v6 = a1;
  int v5 = a2;
  sub_1004C9DF0(qword_1009FB390, v4);
}

void sub_1005C2514(uint64_t a1)
{
  if (qword_1009FBD88 != -1) {
    dispatch_once(&qword_1009FBD88, &stru_1009B7E38);
  }
  uint64_t v2 = (void *)qword_1009FBD80;
  unsigned int v3 = *(unsigned __int16 *)(a1 + 56);
  if (*(char *)(a1 + 55) < 0)
  {
    sub_10003B098(__p, *(void **)(a1 + 32), *(void *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 48);
  }
  sub_1005BFB9C(v2, v3, (uint64_t *)__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1005C25D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005C25EC()
{
  uint64_t v0 = 0;
  uint64_t v1 = 0;
  operator new();
}

void sub_1005C2704(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
}

void sub_1005C276C(uint64_t a1)
{
  if (qword_1009FBD88 != -1) {
    dispatch_once(&qword_1009FBD88, &stru_1009B7E38);
  }
  uint64_t v2 = qword_1009FBD80;
  unsigned int v3 = *(unsigned __int16 *)(a1 + 156);
  if (*(char *)(a1 + 55) < 0) {
    sub_10003B098(&__dst, *(void **)(a1 + 32), *(void *)(a1 + 40));
  }
  else {
    std::string __dst = *(std::string *)(a1 + 32);
  }
  int v4 = *(unsigned __int16 *)(a1 + 158);
  unsigned int v5 = *(unsigned __int16 *)(a1 + 160);
  char v6 = *(unsigned char *)(a1 + 162);
  int v26 = *(unsigned __int8 *)(a1 + 163);
  int v27 = *(_DWORD *)(a1 + 152);
  uint64_t v8 = *(unsigned char **)(a1 + 56);
  __int16 v7 = *(unsigned char **)(a1 + 64);
  size_t v9 = v7 - v8;
  if (v7 == v8)
  {
    char v10 = 0;
  }
  else
  {
    if (v7 - v8 < 0) {
      abort();
    }
    char v10 = operator new(v7 - v8);
    memmove(v10, v8, v9);
  }
  uint64_t v12 = *(unsigned char **)(a1 + 80);
  long long v11 = *(unsigned char **)(a1 + 88);
  size_t v13 = v11 - v12;
  long long v29 = v10;
  if (v11 == v12)
  {
    char v14 = v6;
    long long __p = 0;
  }
  else
  {
    if (v11 - v12 < 0) {
      abort();
    }
    char v14 = v6;
    long long __p = operator new(v11 - v12);
    memmove(__p, v12, v13);
  }
  unsigned __int8 v15 = *(unsigned char *)(a1 + 164);
  uint64_t v17 = *(unsigned char **)(a1 + 104);
  char v16 = *(unsigned char **)(a1 + 112);
  size_t v18 = v16 - v17;
  if (v16 == v17)
  {
    uint64_t v19 = 0;
  }
  else
  {
    if (v16 - v17 < 0) {
      abort();
    }
    uint64_t v19 = operator new(v16 - v17);
    memmove(v19, v17, v18);
  }
  __int16 v21 = *(unsigned char **)(a1 + 128);
  uint64_t v20 = *(unsigned char **)(a1 + 136);
  size_t v22 = v20 - v21;
  if (v20 == v21)
  {
    __int16 v23 = 0;
  }
  else
  {
    if (v20 - v21 < 0) {
      abort();
    }
    __int16 v23 = operator new(v20 - v21);
    memmove(v23, v21, v22);
  }
  sub_1005BFF1C(v2, v3, &__dst, v4, v5, v14, v27, v26, v24, v25, v15);
  if (v23) {
    operator delete(v23);
  }
  if (v19) {
    operator delete(v19);
  }
  if (__p) {
    operator delete(__p);
  }
  if (v29) {
    operator delete(v29);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_1005C2988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, void *a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (v25) {
    operator delete(v25);
  }
  if (v24) {
    operator delete(v24);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1005C29FC(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0)
  {
    sub_10003B098((unsigned char *)(a1 + 32), *(void **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  char v6 = *(unsigned char **)(a2 + 56);
  unsigned int v5 = *(unsigned char **)(a2 + 64);
  size_t v7 = v5 - v6;
  if (v5 != v6)
  {
    sub_1002B1BCC((void *)(a1 + 56), v5 - v6);
    uint64_t v8 = *(char **)(a1 + 64);
    memmove(v8, v6, v7);
    *(void *)(a1 + 64) = &v8[v7];
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  char v10 = *(unsigned char **)(a2 + 80);
  size_t v9 = *(unsigned char **)(a2 + 88);
  size_t v11 = v9 - v10;
  if (v9 != v10)
  {
    sub_1002B1BCC((void *)(a1 + 80), v9 - v10);
    uint64_t v12 = *(char **)(a1 + 88);
    memmove(v12, v10, v11);
    *(void *)(a1 + 88) = &v12[v11];
  }
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  char v14 = *(unsigned char **)(a2 + 104);
  size_t v13 = *(unsigned char **)(a2 + 112);
  size_t v15 = v13 - v14;
  if (v13 != v14)
  {
    sub_1002B1BCC((void *)(a1 + 104), v13 - v14);
    char v16 = *(char **)(a1 + 112);
    memmove(v16, v14, v15);
    *(void *)(a1 + 112) = &v16[v15];
  }
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  uint64_t result = (void *)(a1 + 128);
  *(void *)(a1 + 144) = 0;
  uint64_t v19 = *(unsigned char **)(a2 + 128);
  size_t v18 = *(unsigned char **)(a2 + 136);
  size_t v20 = v18 - v19;
  if (v18 != v19)
  {
    sub_1002B1BCC(result, v18 - v19);
    __int16 v21 = *(char **)(a1 + 136);
    uint64_t result = memmove(v21, v19, v20);
    *(void *)(a1 + 136) = &v21[v20];
  }
  return result;
}

void sub_1005C2B6C(_Unwind_Exception *exception_object)
{
  size_t v7 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 112) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 88) = v8;
    operator delete(v8);
  }
  size_t v9 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 64) = v9;
    operator delete(v9);
  }
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005C2BD0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 128);
  if (v2)
  {
    *(void *)(a1 + 136) = v2;
    operator delete(v2);
  }
  unsigned int v3 = *(void **)(a1 + 104);
  if (v3)
  {
    *(void *)(a1 + 112) = v3;
    operator delete(v3);
  }
  long long v4 = *(void **)(a1 + 80);
  if (v4)
  {
    *(void *)(a1 + 88) = v4;
    operator delete(v4);
  }
  unsigned int v5 = *(void **)(a1 + 56);
  if (v5)
  {
    *(void *)(a1 + 64) = v5;
    operator delete(v5);
  }
  if (*(char *)(a1 + 55) < 0)
  {
    char v6 = *(void **)(a1 + 32);
    operator delete(v6);
  }
}

uint64_t sub_1005C2C58(unsigned __int16 *a1)
{
  if (qword_1009FBD88 != -1) {
    dispatch_once(&qword_1009FBD88, &stru_1009B7E38);
  }
  uint64_t v2 = qword_1009FBD80;
  unsigned int v3 = a1[16];
  int v4 = a1[17];
  int v5 = a1[18];

  return sub_1005C08DC(v2, v3, v4, v5);
}

void sub_1005C2CC4(uint64_t a1)
{
  if (qword_1009FBD88 != -1) {
    dispatch_once(&qword_1009FBD88, &stru_1009B7E38);
  }
  uint64_t v2 = qword_1009FBD80;
  if (*(char *)(a1 + 55) < 0)
  {
    sub_10003B098(__p, *(void **)(a1 + 32), *(void *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  sub_1005C0AB0(v2, 0, (uint64_t)__p, 0, *(unsigned __int8 *)(a1 + 60), *(unsigned char *)(a1 + 61));
  if (SHIBYTE(v4) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1005C2D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005C2D90(uint64_t a1)
{
  if (qword_1009FBD88 != -1) {
    dispatch_once(&qword_1009FBD88, &stru_1009B7E38);
  }
  uint64_t v2 = qword_1009FBD80;
  unsigned int v3 = *(unsigned __int16 *)(a1 + 56);
  int v4 = *(unsigned __int8 *)(a1 + 58);
  if (*(char *)(a1 + 55) < 0)
  {
    sub_10003B098(__p, *(void **)(a1 + 32), *(void *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 48);
  }
  sub_1005C0B5C(v2, v3, v4 != 0, (uint64_t *)__p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1005C2E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005C2E68(uint64_t a1)
{
  if (qword_1009FBD88 != -1) {
    dispatch_once(&qword_1009FBD88, &stru_1009B7E38);
  }
  uint64_t v2 = qword_1009FBD80;
  unsigned int v3 = *(unsigned __int16 *)(a1 + 56);
  int v4 = *(unsigned __int8 *)(a1 + 58);
  if (*(char *)(a1 + 55) < 0)
  {
    sub_10003B098(__p, *(void **)(a1 + 32), *(void *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 48);
  }
  sub_1005C0D6C(v2, v3, v4 != 0, (uint64_t *)__p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1005C2F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_1005C2F40(uint64_t a1)
{
  if (qword_1009FBD88 != -1) {
    dispatch_once(&qword_1009FBD88, &stru_1009B7E38);
  }
  uint64_t v2 = qword_1009FBD80;
  unsigned int v3 = *(unsigned __int16 *)(a1 + 36);
  int v4 = *(_DWORD *)(a1 + 32);

  return sub_1005C1010(v2, v3, v4);
}

uint64_t sub_1005C2FA8(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 == a1 + 8) {
    return 0;
  }
  uint64_t v5 = a2[23];
  size_t v6 = *((void *)a2 + 1);
  if ((v5 & 0x80u) == 0) {
    uint64_t v7 = a2[23];
  }
  else {
    uint64_t v7 = *((void *)a2 + 1);
  }
  while (1)
  {
    uint64_t v8 = *(void *)(v3 + 16);
    uint64_t v9 = *(unsigned __int8 *)(v8 + 55);
    int v10 = (char)v9;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(v8 + 40);
    }
    if (v7 != v9) {
      goto LABEL_18;
    }
    uint64_t v13 = *(void *)(v8 + 32);
    uint64_t v11 = v8 + 32;
    uint64_t v12 = v13;
    char v14 = (unsigned __int8 *)(v10 >= 0 ? v11 : v12);
    if ((v5 & 0x80) != 0) {
      break;
    }
    if (!v5) {
      return 1;
    }
    size_t v15 = a2;
    uint64_t v16 = v5;
    while (*v15 == *v14)
    {
      ++v15;
      ++v14;
      if (!--v16) {
        return 1;
      }
    }
LABEL_18:
    uint64_t v3 = *(void *)(v3 + 8);
    if (v3 == v2) {
      return 0;
    }
  }
  if (memcmp(*(const void **)a2, v14, v6)) {
    goto LABEL_18;
  }
  return 1;
}

uint64_t *sub_1005C3084(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  if (a3)
  {
    uint64_t v5 = 24 * a3;
    do
    {
      size_t v6 = sub_1005C3118((uint64_t)a1, 0, 0, a2);
      uint64_t v7 = *a1;
      void *v6 = *a1;
      v6[1] = a1;
      *(void *)(v7 + 8) = v6;
      *a1 = (uint64_t)v6;
      ++a1[2];
      a2 += 24;
      v5 -= 24;
    }
    while (v5);
  }
  return a1;
}

void sub_1005C3104(_Unwind_Exception *a1)
{
  sub_10037D324(v1);
  _Unwind_Resume(a1);
}

void *sub_1005C3118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = operator new(0x28uLL);
  *uint64_t v7 = a2;
  v7[1] = a3;
  uint64_t v8 = v7 + 2;
  if (*(char *)(a4 + 23) < 0)
  {
    sub_10003B098(v8, *(void **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)a4;
    void v7[4] = *(void *)(a4 + 16);
  }
  return v7;
}

void sub_1005C3180(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1005C3194(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1005BE098(result);
    operator delete();
  }
  return result;
}

void sub_1005C31E4(id a1)
{
}

void sub_1005C3228()
{
}

void sub_1005C324C()
{
  sub_10004191C(byte_100A19E00, "<?xml version=\"1.0\"?>\n<!DOCTYPE folder-listing SYSTEM \"obex-folder-listing.dtd\">\n");
  __cxa_atexit((void (*)(void *))&std::string::~string, byte_100A19E00, (void *)&_mh_execute_header);
  sub_10004191C(v2, "inbox");
  sub_10004191C(v3, "sent");
  sub_10004191C(v4, "outbox");
  sub_10004191C(v5, "deleted");
  sub_1005C3084(&qword_100A19E18, (uint64_t)v2, 4);
  for (uint64_t i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v5[i + 2]) < 0) {
      operator delete((void *)v5[i]);
    }
  }
  __cxa_atexit((void (*)(void *))sub_1005BD714, &qword_100A19E18, (void *)&_mh_execute_header);
}

void sub_1005C33A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 95) < 0) {
      operator delete(*(void **)(v10 + v12 + 72));
    }
    v12 -= 24;
    if (v12 == -96) {
      _Unwind_Resume(exception_object);
    }
  }
}

void *sub_1005C3400(void *result)
{
  *uint64_t result = 0;
  result[1] = 0;
  return result;
}

uint64_t *sub_1005C3408(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

BOOL sub_1005C3484(uint64_t *a1, uint64_t a2)
{
  int v4 = qword_100A19FE8;
  if (os_log_type_enabled((os_log_t)qword_100A19FE8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *a1;
    int v8 = 136315650;
    uint64_t v9 = "isHciTransportCommand";
    __int16 v10 = 2048;
    uint64_t v11 = v5;
    __int16 v12 = 2048;
    uint64_t v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s: fHciTransportCommand %llx, handle %llx", (uint8_t *)&v8, 0x20u);
  }
  return *a1 && *a1 == a2;
}

BOOL sub_1005C3564(uint64_t *a1, _DWORD *a2, uint64_t *a3)
{
  *a3 = 0;
  if (*a2 == 3)
  {
    if (a1[1])
    {
      char v14 = qword_100A19FE8;
      BOOL result = os_log_type_enabled((os_log_t)qword_100A19FE8, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      sub_100780BF0(v14, v15, v16, v17, v18, v19, v20, v21);
      return 0;
    }
    if (qword_1009FBD98 != -1)
    {
      int v26 = a2;
      dispatch_once(&qword_1009FBD98, &stru_1009B7F88);
      a2 = v26;
    }
    sub_10036FCB0(qword_1009FBD90, (uint64_t)a2);
    if (qword_1009FBD98 != -1) {
      dispatch_once(&qword_1009FBD98, &stru_1009B7F88);
    }
    *a1 = qword_1009FBD90;
    *a3 = a1[1];
    __int16 v23 = qword_100A19FE8;
    if (os_log_type_enabled((os_log_t)qword_100A19FE8, OS_LOG_TYPE_DEFAULT))
    {
      int v27 = 136315138;
      long long v28 = "TransportCreate";
      uint64_t v24 = "%s: kBTVirtualTransportInterfaceACL, success";
      goto LABEL_22;
    }
  }
  else if (*a2 == 2)
  {
    if (*a1)
    {
      uint64_t v5 = qword_100A19FE8;
      BOOL result = os_log_type_enabled((os_log_t)qword_100A19FE8, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      sub_100780B78(v5, v7, v8, v9, v10, v11, v12, v13);
      return 0;
    }
    if (qword_1009FBD98 != -1)
    {
      uint64_t v25 = a2;
      dispatch_once(&qword_1009FBD98, &stru_1009B7F88);
      a2 = v25;
    }
    sub_10036FCB0(qword_1009FBD90, (uint64_t)a2);
    if (qword_1009FBD98 != -1) {
      dispatch_once(&qword_1009FBD98, &stru_1009B7F88);
    }
    uint64_t v22 = qword_1009FBD90;
    *a1 = qword_1009FBD90;
    *a3 = v22;
    sub_10050A548(*a1);
    __int16 v23 = qword_100A19FE8;
    if (os_log_type_enabled((os_log_t)qword_100A19FE8, OS_LOG_TYPE_DEFAULT))
    {
      int v27 = 136315138;
      long long v28 = "TransportCreate";
      uint64_t v24 = "%s: BTVirtualTransportInterfaceHCICommand, success";
LABEL_22:
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, v24, (uint8_t *)&v27, 0xCu);
    }
  }
  return 1;
}

uint64_t sub_1005C37D0(void *a1, uint64_t *a2)
{
  int v4 = qword_100A19FE8;
  if (os_log_type_enabled((os_log_t)qword_100A19FE8, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 136315138;
    uint64_t v10 = "TransportFree";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s: TransportFree", (uint8_t *)&v9, 0xCu);
  }
  uint64_t v5 = *a2;
  if (*a2 == *a1)
  {
    sub_10050A5AC(v5);
    if (qword_1009FBD98 != -1) {
      dispatch_once(&qword_1009FBD98, &stru_1009B7F88);
    }
    sub_10036FDC0((void *)qword_1009FBD90);
    *a1 = 0;
    size_t v6 = qword_100A19FE8;
    if (os_log_type_enabled((os_log_t)qword_100A19FE8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315138;
      uint64_t v10 = "TransportFree";
      uint64_t v7 = "%s: BTVirtualTransportInterfaceHCICommand";
      goto LABEL_13;
    }
  }
  else if (v5 == a1[1])
  {
    if (qword_1009FBD98 != -1) {
      dispatch_once(&qword_1009FBD98, &stru_1009B7F88);
    }
    sub_10036FDC0((void *)qword_1009FBD90);
    a1[1] = 0;
    size_t v6 = qword_100A19FE8;
    if (os_log_type_enabled((os_log_t)qword_100A19FE8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315138;
      uint64_t v10 = "TransportFree";
      uint64_t v7 = "%s: kBTVirtualTransportInterfaceACL";
LABEL_13:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v9, 0xCu);
    }
  }
  return 1;
}

uint64_t sub_1005C39AC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (*a1 == a2 || a1[1] == a2)
  {
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16);
    return v16(a2, a3, a4, a5, a6, a7);
  }
  else
  {
    uint64_t v7 = qword_100A19FE8;
    if (os_log_type_enabled((os_log_t)qword_100A19FE8, OS_LOG_TYPE_ERROR)) {
      sub_100780C68(v7, v8, v9, v10, v11, v12, v13, v14);
    }
    return 0;
  }
}

BOOL sub_1005C3A60(void *a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (*a1 == a2) {
    return 1;
  }
  return a1[1] == a2;
}

void sub_1005C3A90(id a1)
{
}

uint64_t sub_1005C3B08(uint64_t a1)
{
  *(void *)sub_1004C9B7C(a1, "MapService", 512) = &off_1009B7FB8;
  if (qword_1009FBD88 != -1) {
    dispatch_once(&qword_1009FBD88, &stru_1009B80A8);
  }
  sub_1004C9E90(a1, qword_1009FBD80);
  return a1;
}

void sub_1005C3B90(_Unwind_Exception *a1)
{
  sub_1004C9C80(v1);
  _Unwind_Resume(a1);
}

void sub_1005C3BAC(uint64_t a1)
{
  sub_1004C9C80(a1);

  operator delete();
}

uint64_t sub_1005C3BEC(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100475E4C(a2, *(_DWORD *)(a1 + 32));
  if (!result)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 32);
    uint64_t v7 = 0;
    sub_100026C30((uint64_t)&v7);
    *(void *)&long long v6 = (int)v7;
    *((void *)&v6 + 1) = SWORD2(v7);
    return sub_100477F4C(a2, v5, 0, &v6, 0);
  }
  return result;
}

uint64_t sub_1005C3C60(uint64_t a1, uint64_t a2, const char *a3, const char *a4)
{
  uint64_t v7 = qword_100A1A020;
  if (os_log_type_enabled((os_log_t)qword_100A1A020, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 136315394;
    uint64_t v13 = a3;
    __int16 v14 = 2080;
    uint64_t v15 = a4;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "In MapService::setServiceSetting with key: %s and value: %s", (uint8_t *)&v12, 0x16u);
  }
  uint64_t result = 3;
  if (a2 && a3 && a4)
  {
    if (!strncmp(a3, "BT_KEY_MAP_ENABLED", 0x13uLL))
    {
      int v9 = strncmp(a4, "BT_VALUE_MAP_ENABLED", 0x15uLL);
      uint64_t v10 = qword_100A1A020;
      BOOL v11 = os_log_type_enabled((os_log_t)qword_100A1A020, OS_LOG_TYPE_DEFAULT);
      if (v9)
      {
        if (v11)
        {
          LOWORD(v12) = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Setting mapEnabled to False", (uint8_t *)&v12, 2u);
        }
        sub_10047F834(a2, 0);
        if (qword_1009FBD88 != -1) {
          dispatch_once(&qword_1009FBD88, &stru_1009B80A8);
        }
        sub_1004BD184(qword_1009FBD80, a2);
      }
      else
      {
        if (v11)
        {
          LOWORD(v12) = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Setting mapEnabled to True", (uint8_t *)&v12, 2u);
        }
        sub_10047F834(a2, 1);
      }
      return 0;
    }
    else
    {
      return 3;
    }
  }
  return result;
}

uint64_t sub_1005C3E34(uint64_t a1, uint64_t a2, const char *a3, char *a4)
{
  uint64_t v7 = qword_100A1A020;
  if (os_log_type_enabled((os_log_t)qword_100A1A020, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 136315138;
    uint64_t v13 = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "In MapService::getServiceSetting with key: %s", (uint8_t *)&v12, 0xCu);
  }
  uint64_t result = 3;
  if (a2 && a3 && a4)
  {
    if (!strncmp(a3, "BT_KEY_MAP_ENABLED", 0x13uLL))
    {
      int v9 = sub_10047F788(a2);
      uint64_t v10 = qword_100A1A020;
      BOOL v11 = os_log_type_enabled((os_log_t)qword_100A1A020, OS_LOG_TYPE_DEFAULT);
      if (v9)
      {
        if (v11)
        {
          LOWORD(v12) = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Returning mapEnabled as True", (uint8_t *)&v12, 2u);
        }
        uint64_t result = 0;
        strcpy(a4, "BT_VALUE_MAP_ENABLED");
      }
      else
      {
        if (v11)
        {
          LOWORD(v12) = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Returning mapEnabled as False", (uint8_t *)&v12, 2u);
        }
        uint64_t result = 0;
        strcpy(a4, "BT_VALUE_MAP_DISABLED");
      }
    }
    else
    {
      return 3;
    }
  }
  return result;
}

void sub_1005C3FD4(id a1)
{
}

void sub_1005C4018()
{
}

uint64_t sub_1005C403C(uint64_t a1)
{
  *(void *)a1 = off_1009B80D8;
  *(void *)(a1 + 8) = off_1009B8180;
  *(void *)(a1 + 16) = off_1009B81E0;
  *(void *)(a1 + 24) = off_1009B8290;
  *(void *)(a1 + 32) = &off_1009B82B0;
  sub_100052DA8(a1 + 40);
  *(_WORD *)(a1 + 174) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 108) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 160) = 0;
  mach_timebase_info((mach_timebase_info_t)(a1 + 176));
  *(unsigned char *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  return a1;
}

void sub_1005C4140(_Unwind_Exception *a1)
{
  sub_100052DA4(v1);
  _Unwind_Resume(a1);
}

void sub_1005C4158(uint64_t a1)
{
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009B8328);
  }
  sub_100457490(qword_1009F8160 + 8, a1 + 24);
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009B8348);
  }
  sub_1000A7BDC((uint64_t)off_1009F85C0 + 1872, a1 + 8);
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009B8368);
  }
  sub_100680938((uint64_t)off_1009F7EB8, a1 + 16, 0);
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B8388);
  }
  sub_10026B36C((uint64_t)off_1009F8068 + 64, a1 + 32);

  sub_1005C427C(a1);
}

void sub_1005C427C(uint64_t a1)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v3 = 0;
  sub_10004191C(__p, "com.apple.bluetooth.Server.FastconnectACL");
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009B8328);
  }
  if (sub_100009254(qword_1009F8160, (uint64_t)__p))
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A030, OS_LOG_TYPE_ERROR)) {
      sub_100780CE0();
    }
  }
  else
  {
    if (qword_1009F8168 != -1) {
      dispatch_once(&qword_1009F8168, &stru_1009B8328);
    }
    *(void *)(a1 + 120) = sub_100019C0C((void *)qword_1009F8160, *(void *)(a1 + 112));
  }
  if (SHIBYTE(v3) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1005C4378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005C4394(uint64_t a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B8388);
  }
  sub_100052718((uint64_t)off_1009F8068 + 64, a1 + 32);
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009B8348);
  }
  sub_100052718((uint64_t)off_1009F85C0 + 1872, a1 + 8);
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009B8328);
  }
  sub_10000A678(qword_1009F8160, *(void *)(a1 + 112));
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009B8328);
  }
  uint64_t v2 = qword_1009F8160 + 8;

  sub_100052718(v2, a1 + 24);
}

uint64_t sub_1005C44AC(uint64_t a1, uint64_t a2)
{
  v13[0] = 0;
  v13[1] = 0;
  sub_10003AED0((uint64_t)v13, a1 + 40);
  if (*(void *)(a1 + 120) && *(void *)(a1 + 128) && *(unsigned char *)(a1 + 104))
  {
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009B8388);
    }
    if (*((unsigned char *)off_1009F8068 + 60))
    {
      uint64_t v4 = *(void *)(a1 + 136);
      if (v4)
      {
        if (v4 == a2)
        {
          unsigned int v5 = qword_100A1A030;
          if (os_log_type_enabled((os_log_t)qword_100A1A030, OS_LOG_TYPE_DEFAULT))
          {
            sub_10003AE4C(*(void *)(a1 + 120), (uint64_t)__p);
            long long v6 = v12 >= 0 ? __p : (void **)__p[0];
            *(_DWORD *)long long buf = 136446210;
            uint64_t v15 = v6;
            _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "LE Scan timeout for session\"%{public}s\" ", buf, 0xCu);
            if (v12 < 0) {
              operator delete(__p[0]);
            }
          }
        }
        else if (*(void *)(a1 + 144) != a2)
        {
          return sub_10003AFB4((uint64_t)v13);
        }
        *(void *)(a1 + 136) = 0;
        sub_10003AFE8((uint64_t)v13);
        *(void *)(a1 + 192) = mach_absolute_time();
        (*(void (**)(uint64_t, void))(*(void *)a1 + 8))(a1, *(void *)(a1 + 128));
        sub_1005C474C(a1);
        if (qword_1009F8248 != -1) {
          dispatch_once(&qword_1009F8248, &stru_1009B83C8);
        }
        sub_100664320((uint64_t)off_1009F8240, 0);
        uint64_t v7 = qword_100A1A030;
        if (os_log_type_enabled((os_log_t)qword_100A1A030, OS_LOG_TYPE_INFO))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Resume leScan", (uint8_t *)__p, 2u);
        }
        uint64_t v8 = sub_100019878();
        v10[0] = _NSConcreteStackBlock;
        v10[1] = 3221225472;
        void v10[2] = sub_1005C47C8;
        void v10[3] = &unk_100997528;
        void v10[4] = a1;
        sub_100013018(v8, v10);
      }
    }
  }
  return sub_10003AFB4((uint64_t)v13);
}

void sub_1005C472C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1005C474C(uint64_t a1)
{
  uint64_t v2 = sub_1004AF8EC();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  _DWORD v3[2] = sub_1005C4FA0;
  void v3[3] = &unk_100997528;
  void v3[4] = a1;
  sub_100013018(v2, v3);
}

uint64_t sub_1005C47C8(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 108) = 1;
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009B8348);
  }
  uint64_t v1 = off_1009F85C0;

  return sub_1006F11B4((uint64_t)v1, @"com.apple.bluetooth.fastConnect");
}

uint64_t sub_1005C4830(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 120)
    || (uint64_t v4 = qword_100A1A030, !os_log_type_enabled((os_log_t)qword_100A1A030, OS_LOG_TYPE_FAULT)))
  {
    if (a2) {
      goto LABEL_4;
    }
LABEL_16:
    uint64_t v16 = qword_100A1A030;
    if (os_log_type_enabled((os_log_t)qword_100A1A030, OS_LOG_TYPE_FAULT)) {
      sub_100780D14(v16, v17, v18, v19, v20, v21, v22, v23);
    }
    return 1;
  }
  sub_100780F10(v4, v5, v6, v7, v8, v9, v10, v11);
  if (!a2) {
    goto LABEL_16;
  }
LABEL_4:
  if (!*(void *)(a1 + 120)) {
    return 1;
  }
  if (*(void *)(a1 + 128))
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A030, OS_LOG_TYPE_ERROR)) {
      sub_100780EDC();
    }
    return 303;
  }
  uint64_t v13 = mach_absolute_time();
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = v13;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(unsigned char *)(a1 + 232) = 0;
  uint64_t v14 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v14 + 8))(v14)
    && *(unsigned char *)(a1 + 175)
    && !*(unsigned char *)(a1 + 174))
  {
    sub_100023344();
    int v15 = sub_10017E160((uint64_t (*)(void, void, void, void, void))sub_1005C4B70);
    sub_1000232E0();
    if (v15)
    {
      if (os_log_type_enabled((os_log_t)qword_100A1A030, OS_LOG_TYPE_ERROR)) {
        sub_100780EA8();
      }
    }
    else
    {
      *(unsigned char *)(a1 + 174) = 1;
    }
  }
  if (*(unsigned char *)(a1 + 104)
    || *(unsigned char *)(a1 + 105)
    || *(unsigned char *)(a1 + 107)
    || *(unsigned char *)(a1 + 106)
    || *(unsigned char *)(a1 + 108))
  {
    uint64_t v24 = qword_100A1A030;
    if (os_log_type_enabled((os_log_t)qword_100A1A030, OS_LOG_TYPE_ERROR)) {
      sub_100780DF4(a2, v24);
    }
    return 400;
  }
  *(void *)(a1 + 128) = a2;
  uint64_t v25 = qword_100A1A030;
  if (os_log_type_enabled((os_log_t)qword_100A1A030, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Start BBFC", v29, 2u);
  }
  uint64_t v26 = mach_absolute_time();
  *(void *)(a1 + 208) = v26;
  if (*(unsigned char *)(a1 + 109))
  {
    if (!sub_1005C4CD4(v26, (long long *)(a1 + 152), (unsigned char *)(a1 + 168))) {
      goto LABEL_33;
    }
LABEL_43:
    if (os_log_type_enabled((os_log_t)qword_100A1A030, OS_LOG_TYPE_ERROR)) {
      sub_100780DC0();
    }
    char v27 = 2;
    goto LABEL_46;
  }
  if (qword_1009F8080 != -1) {
    dispatch_once(&qword_1009F8080, &stru_1009B83E8);
  }
  if (sub_10049ACBC((uint64_t)off_1009F8078, (_OWORD *)(a1 + 152), a1 + 168)) {
    goto LABEL_43;
  }
  int v28 = sub_1005C4CD4(0, (long long *)(a1 + 152), (unsigned char *)(a1 + 168));
  *(unsigned char *)(a1 + 109) = 1;
  if (v28) {
    goto LABEL_43;
  }
LABEL_33:
  *(unsigned char *)(a1 + 105) = 1;
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009B8368);
  }
  uint64_t result = sub_1006A136C((os_unfair_lock_s *)off_1009F7EB8);
  if (result)
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A030, OS_LOG_TYPE_ERROR)) {
      sub_100780D8C();
    }
    *(unsigned char *)(a1 + 105) = 0;
    char v27 = 3;
LABEL_46:
    *(unsigned char *)(a1 + 232) = v27;
    sub_1005C474C(a1);
    return 0;
  }
  return result;
}

void sub_1005C4B70(int a1)
{
  if (qword_1009FB3B8 != -1) {
    dispatch_once(&qword_1009FB3B8, &stru_1009B83A8);
  }
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  (*(void (**)(void *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(void *)off_1009FB3B0 + 24))(off_1009FB3B0, &v8, &v7, &v6, &v5);
  uint64_t v2 = sub_100017768();
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
  if (!a1 && v3)
  {
    uint64_t v4 = qword_100A1A030;
    if (os_log_type_enabled((os_log_t)qword_100A1A030, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134218752;
      uint64_t v10 = v8;
      __int16 v11 = 2048;
      uint64_t v12 = v7;
      __int16 v13 = 2048;
      uint64_t v14 = v6;
      __int16 v15 = 2048;
      uint64_t v16 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BBFC scanprep_time = %llums, scan_time = %llums, page_time = %llums, connection_time = %llums", buf, 0x2Au);
    }
  }
}

uint64_t sub_1005C4CD4(int a1, long long *a2, unsigned char *__buf)
{
  do
  {
    do
      arc4random_buf(__buf, 3uLL);
    while (!(*(unsigned __int16 *)__buf | __buf[2]));
  }
  while (!(*(unsigned __int16 *)__buf ^ 0xFF | __buf[2]));
  *__long long buf = *__buf & 0x3F | 0x40;
  if (*a2 == 0) {
    return 103;
  }
  if (!(*(unsigned __int16 *)__buf | __buf[2])) {
    return 101;
  }

  return sub_100180780(a2, (__int16 *)__buf, (uint64_t)(__buf + 3));
}

void sub_1005C4D88(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 120);
  if (v2
    || (uint64_t v6 = qword_100A1A030, os_log_type_enabled((os_log_t)qword_100A1A030, OS_LOG_TYPE_FAULT))
    && (*(_DWORD *)long long __p = 136446210,
        *(void *)&__p[4] = "m_Session",
        _os_log_fault_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", __p, 0xCu), (uint64_t v2 = *(void *)(a1 + 120)) != 0))
  {
    int v3 = qword_100A1A030;
    if (os_log_type_enabled((os_log_t)qword_100A1A030, OS_LOG_TYPE_DEFAULT))
    {
      sub_10003AE4C(v2, (uint64_t)__p);
      uint64_t v4 = v9 >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)long long buf = 136446210;
      __int16 v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "LE stop scanning for session \"%{public}s\"", buf, 0xCu);
      if (v9 < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (*(unsigned char *)(a1 + 104))
    {
      uint64_t v5 = sub_100019878();
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      _OWORD v7[2] = sub_1005C4F30;
      _OWORD v7[3] = &unk_100997528;
      void v7[4] = a1;
      sub_1000197D8(v5, v7);
      *(unsigned char *)(a1 + 104) = 0;
    }
    *(void *)(a1 + 136) = 0;
    *(void *)(a1 + 144) = 0;
  }
}

uint64_t sub_1005C4F30(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009B8348);
  }
  uint64_t v2 = off_1009F85C0;
  unint64_t v3 = *(void *)(v1 + 120);

  return sub_1006E1A9C((uint64_t)v2, v3, 1, 1, 0);
}

void sub_1005C4FA0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(void *)(v1 + 224) = mach_absolute_time();
  if (*(void *)(v1 + 128))
  {
    if (qword_1009F8090 != -1) {
      dispatch_once(&qword_1009F8090, &stru_1009B8408);
    }
    uint64_t v2 = off_1009F8088;
    unint64_t v3 = *(unsigned __int8 **)(v1 + 128);
    if (sub_100040630(v3)) {
      int v4 = sub_100478B2C(*(void *)(v1 + 128), 21);
    }
    else {
      int v4 = 0;
    }
    sub_1004D5838((uint64_t)v2, (uint64_t)v3, v4);
    *(void *)(v1 + 128) = 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A030, OS_LOG_TYPE_ERROR)) {
      sub_100780F88();
    }
    *(unsigned char *)(v1 + 232) = 4;
  }
}

void sub_1005C5078(uint64_t a1)
{
  if (qword_100A13998 != -1) {
    dispatch_once(&qword_100A13998, &stru_1009B82D0);
  }
  if (*(void *)(a1 + 120)
    || (uint64_t v6 = qword_100A1A030, os_log_type_enabled((os_log_t)qword_100A1A030, OS_LOG_TYPE_FAULT))
    && !sub_100780FBC(v6, (void *)(a1 + 120), v7, v8, v9, v10, v11, v12))
  {
    if (*(unsigned char *)(a1 + 106))
    {
      uint64_t v15 = 0;
      uint64_t v16 = &v15;
      uint64_t v17 = 0x2020000000;
      int v18 = 1;
      uint64_t v2 = qword_100A1A030;
      if (os_log_type_enabled((os_log_t)qword_100A1A030, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "leScanPaused", buf, 2u);
        uint64_t v2 = qword_100A1A030;
      }
      *(unsigned char *)(a1 + 106) = 0;
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "add EventListener In Paused", buf, 2u);
      }
      if (qword_1009F85C8 != -1) {
        dispatch_once(&qword_1009F85C8, &stru_1009B8348);
      }
      sub_1000A7BDC((uint64_t)off_1009F85C0 + 1904, a1 + 8);
      if (qword_1009F8248 != -1) {
        dispatch_once(&qword_1009F8248, &stru_1009B83C8);
      }
      int v3 = sub_100664320((uint64_t)off_1009F8240, ((unint64_t)*(unsigned __int8 *)(a1 + 169) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 168) << 40) | ((unint64_t)*(unsigned __int8 *)(a1 + 170) << 24) | ((unint64_t)*(unsigned __int8 *)(a1 + 171) << 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 172) << 8) | *(unsigned __int8 *)(a1 + 173) | 0x1000000000000);
      *((_DWORD *)v16 + 6) = v3;
      if (!v3) {
        operator new();
      }
      int v4 = qword_100A1A030;
      if (os_log_type_enabled((os_log_t)qword_100A1A030, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Fail to set RPA, skip BBFC", buf, 2u);
      }
      *(unsigned char *)(a1 + 232) = 5;
      uint64_t v5 = sub_100019878();
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      void v13[2] = sub_1005C5540;
      void v13[3] = &unk_100997528;
      void v13[4] = a1;
      sub_100013018(v5, v13);
      sub_1005C474C(a1);
      _Block_object_dispose(&v15, 8);
    }
  }
}

void sub_1005C5390()
{
}

void sub_1005C53CC(id a1)
{
  uint64_t v1 = sub_100017768();
  sub_10004191C(buf, "BBFC");
  sub_10004191C(__p, "ScanTimeOut");
  int v2 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v1 + 88))(v1, buf, __p, &dword_100A13990);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0)
  {
    operator delete(*(void **)buf);
    if (!v2) {
      return;
    }
  }
  else if (!v2)
  {
    return;
  }
  int v3 = qword_100A1A030;
  if (os_log_type_enabled((os_log_t)qword_100A1A030, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = dword_100A13990;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Warning: BBFC: ScanTimeOut overriden %d", buf, 8u);
  }
}

void sub_1005C5504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005C5540(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 108) = 1;
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009B8348);
  }
  uint64_t v1 = off_1009F85C0;

  return sub_1006F11B4((uint64_t)v1, @"com.apple.bluetooth.fastConnect");
}

void sub_1005C55A8(void *a1)
{
  uint64_t v2 = a1[5];
  *(void *)(v2 + 216) = mach_absolute_time();
  uint64_t v3 = a1[6];
  *(unsigned char *)(v3 + 3) = 1;
  uint64_t v4 = +[NSSet setWithObject:@"com.apple.bluetoothd.FastConnectManager"];
  char v5 = *(void **)(v3 + 152);
  *(void *)(v3 + 152) = v4;

  *(_DWORD *)(a1[6] + 168) = 265;
  uint64_t v6 = qword_100A1A030;
  if (os_log_type_enabled((os_log_t)qword_100A1A030, OS_LOG_TYPE_DEFAULT))
  {
    sub_10003AE4C(*(void *)(v2 + 120), (uint64_t)__p);
    char v7 = v18 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)long long buf = 136446210;
    uint64_t v20 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Start LE scanning for session \"%{public}s\"", buf, 0xCu);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
  }
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009B8348);
  }
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = sub_1006DFE0C((uint64_t)off_1009F85C0, *(void *)(v2 + 120), a1[6]);
  if (!*(_DWORD *)(*(void *)(a1[4] + 8) + 24))
  {
    *(void *)(v2 + 184) = mach_absolute_time();
    *(unsigned char *)(v2 + 104) = 1;
    if (dword_100A13990 < 1)
    {
      uint64_t v10 = sub_100035F54();
      if (((*(uint64_t (**)(uint64_t))(*(void *)v10 + 328))(v10) & 1) != 0
        || (uint64_t v11 = sub_100035F54(), ((*(uint64_t (**)(uint64_t))(*(void *)v11 + 384))(v11) & 1) != 0)
        || (uint64_t v12 = sub_100035F54(), (*(unsigned int (**)(uint64_t))(*(void *)v12 + 944))(v12)))
      {
        uint64_t v13 = sub_100035F54();
        (*(uint64_t (**)(uint64_t))(*(void *)v13 + 824))(v13);
      }
    }
    operator new();
  }
  uint64_t v8 = qword_100A1A030;
  if (os_log_type_enabled((os_log_t)qword_100A1A030, OS_LOG_TYPE_ERROR))
  {
    sub_10003AE4C(*(void *)(v2 + 120), (uint64_t)__p);
    uint64_t v14 = v18 >= 0 ? __p : (void **)__p[0];
    int v15 = *(_DWORD *)(*(void *)(a1[4] + 8) + 24);
    *(_DWORD *)long long buf = 136446466;
    uint64_t v20 = v14;
    __int16 v21 = 1024;
    int v22 = v15;
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Fail LE scan for session \"%{public}s\" with error %d, skipp BBFC", buf, 0x12u);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
  }
  *(unsigned char *)(v2 + 232) = 6;
  if (qword_1009F8248 != -1) {
    dispatch_once(&qword_1009F8248, &stru_1009B83C8);
  }
  sub_100664320((uint64_t)off_1009F8240, 0);
  uint64_t v9 = sub_100019878();
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  void v16[2] = sub_1005C59C0;
  void v16[3] = &unk_100997528;
  void v16[4] = v2;
  sub_100013018(v9, v16);
  sub_1005C474C(v2);
}

uint64_t sub_1005C59C0(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 108) = 1;
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009B8348);
  }
  uint64_t v1 = off_1009F85C0;

  return sub_1006F11B4((uint64_t)v1, @"com.apple.bluetooth.fastConnect");
}

void sub_1005C5A28(uint64_t a1)
{
}

uint64_t sub_1005C5A30(uint64_t result)
{
  if (*(unsigned char *)(result + 108))
  {
    uint64_t v1 = result;
    uint64_t v2 = qword_100A1A030;
    if (os_log_type_enabled((os_log_t)qword_100A1A030, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "leScanResumed", v3, 2u);
    }
    *(unsigned char *)(v1 + 108) = 0;
    if (qword_1009F85C8 != -1) {
      dispatch_once(&qword_1009F85C8, &stru_1009B8348);
    }
    sub_100052718((uint64_t)off_1009F85C0 + 1904, v1 + 8);
    *(unsigned char *)(v1 + 107) = 1;
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009B8368);
    }
    return sub_10069F19C((uint64_t)off_1009F7EB8);
  }
  return result;
}

uint64_t sub_1005C5B20(uint64_t a1)
{
  return sub_1005C5A30(a1 - 8);
}

void sub_1005C5B28(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 105))
  {
    *(unsigned char *)(a1 + 105) = 0;
    uint64_t v2 = qword_100A1A030;
    if (os_log_type_enabled((os_log_t)qword_100A1A030, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "leConnectionManagerPaused", buf, 2u);
    }
    uint64_t v3 = sub_100019878();
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    _DWORD v4[2] = sub_1005C5BF4;
    void v4[3] = &unk_100997528;
    void v4[4] = a1;
    sub_100013018(v3, v4);
  }
}

void sub_1005C5BF4(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)(a1 + 32);
  v1[106] = 1;
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009B8348);
  }
  int v2 = sub_1006F0EF8((uint64_t)off_1009F85C0, @"com.apple.bluetooth.fastConnect");
  if (v2)
  {
    if (v2 == 401)
    {
      if (os_log_type_enabled((os_log_t)qword_100A1A030, OS_LOG_TYPE_ERROR)) {
        sub_100781080();
      }
      (*(void (**)(unsigned char *))(*(void *)v1 + 72))(v1);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A1A030, OS_LOG_TYPE_ERROR)) {
        sub_10078104C();
      }
      v1[232] = 7;
      v1[106] = 0;
      uint64_t v4 = sub_100019878();
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      void v6[2] = sub_1005C5D88;
      v6[3] = &unk_100997528;
      void v6[4] = v1;
      sub_100013018(v4, v6);
      sub_1005C474C((uint64_t)v1);
    }
  }
  else
  {
    uint64_t v3 = qword_100A1A030;
    if (os_log_type_enabled((os_log_t)qword_100A1A030, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)char v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Pause LEObserver", v5, 2u);
    }
  }
}

uint64_t sub_1005C5D88(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 107) = 1;
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009B8368);
  }
  uint64_t v1 = off_1009F7EB8;

  return sub_10069F19C((uint64_t)v1);
}

void sub_1005C5DE8(uint64_t a1)
{
}

void sub_1005C5DF0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 107))
  {
    int v2 = qword_100A1A030;
    if (os_log_type_enabled((os_log_t)qword_100A1A030, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "leConnectionManagerResumed", v3, 2u);
    }
    *(unsigned char *)(a1 + 107) = 0;
  }
}

void sub_1005C5E68(uint64_t a1)
{
}

void sub_1005C5E70(uint64_t a1)
{
  int v2 = qword_100A1A030;
  if (os_log_type_enabled((os_log_t)qword_100A1A030, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)char v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "stackDidStart", v5, 2u);
  }
  *(unsigned char *)(a1 + 109) = 0;
  *(unsigned char *)(a1 + 174) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(unsigned char *)(a1 + 232) = 0;
  uint64_t v3 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 8))(v3)
    && *(unsigned char *)(a1 + 175)
    && !*(unsigned char *)(a1 + 174))
  {
    sub_100023344();
    int v4 = sub_10017E160((uint64_t (*)(void, void, void, void, void))sub_1005C4B70);
    sub_1000232E0();
    if (v4)
    {
      if (os_log_type_enabled((os_log_t)qword_100A1A030, OS_LOG_TYPE_ERROR)) {
        sub_1007810B4();
      }
    }
    else
    {
      *(unsigned char *)(a1 + 174) = 1;
    }
  }
}

void sub_1005C5F88(uint64_t a1)
{
}

uint64_t sub_1005C5F90(uint64_t result)
{
  *(unsigned char *)(result + 174) = 0;
  *(_DWORD *)(result + 104) = 0;
  *(_WORD *)(result + 108) = 0;
  *(void *)(result + 136) = 0;
  *(void *)(result + 144) = 0;
  *(void *)(result + 128) = 0;
  return result;
}

uint64_t sub_1005C5FA8(uint64_t result)
{
  *(unsigned char *)(result + 142) = 0;
  *(_DWORD *)(result + 72) = 0;
  *(_WORD *)(result + 76) = 0;
  *(void *)(result + 104) = 0;
  *(void *)(result + 112) = 0;
  *(void *)(result + 96) = 0;
  return result;
}

void sub_1005C5FC0(uint64_t a1, int a2)
{
  int v4 = qword_100A1A030;
  if (os_log_type_enabled((os_log_t)qword_100A1A030, OS_LOG_TYPE_DEFAULT))
  {
    char v5 = "disabled";
    if (a2) {
      char v5 = "enabled";
    }
    int v7 = 136315138;
    uint64_t v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BBFC TimeLogging is %s", (uint8_t *)&v7, 0xCu);
  }
  *(unsigned char *)(a1 + 175) = a2;
  if (*(unsigned char *)(a1 + 174))
  {
    sub_100023344();
    int v6 = sub_10017E240((uint64_t (*)(void, void, void, void, void))sub_1005C4B70);
    sub_1000232E0();
    if (v6)
    {
      if (os_log_type_enabled((os_log_t)qword_100A1A030, OS_LOG_TYPE_ERROR)) {
        sub_1007810E8();
      }
    }
    else
    {
      *(unsigned char *)(a1 + 174) = 0;
    }
  }
}

void sub_1005C60DC(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t v10 = mach_absolute_time();
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(a1 + 184);
  if (v12)
  {
    uint64_t v13 = v12 - *(void *)(a1 + 200);
    uint64_t v14 = *(unsigned int *)(a1 + 176);
    unint64_t v15 = *(unsigned int *)(a1 + 180);
    *a2 = v13 * v14 / v15 / 0xF4240;
    *a3 = (*(void *)(a1 + 192) - *(void *)(a1 + 184)) * v14 / v15 / 0xF4240;
    unint64_t v16 = (v10 - *(void *)(a1 + 192)) * v14 / v15 / 0xF4240;
  }
  else
  {
    uint64_t v17 = qword_100A1A030;
    if (os_log_type_enabled((os_log_t)qword_100A1A030, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)char v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "BBFC wasn't started", v18, 2u);
    }
    unint64_t v16 = 0;
    *a2 = 0;
    *a3 = 0;
    uint64_t v14 = *(unsigned int *)(a1 + 176);
    unint64_t v15 = *(unsigned int *)(a1 + 180);
  }
  *a4 = v16;
  *a5 = (v11 - *(void *)(a1 + 200)) * v14 / v15 / 0xF4240;
}

std::string *sub_1005C6200(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unsigned char *a5, std::string *this)
{
  if (*(void *)(a1 + 184))
  {
    uint64_t v6 = *(unsigned int *)(a1 + 176);
    unint64_t v7 = *(unsigned int *)(a1 + 180);
    *a2 = (*(void *)(a1 + 216) - *(void *)(a1 + 208)) * v6 / v7 / 0xF4240;
    *a3 = (*(void *)(a1 + 192) - *(void *)(a1 + 216)) * v6 / v7 / 0xF4240;
    *a4 = (*(void *)(a1 + 224) - *(void *)(a1 + 208)) * v6 / v7 / 0xF4240;
    *a5 = *(unsigned char *)(a1 + 232);
    unint64_t v8 = *(char *)(a1 + 232);
    if (v8 > 7) {
      uint64_t v9 = "Invalid BBFC Status";
    }
    else {
      uint64_t v9 = (&off_1009B8440)[v8];
    }
  }
  else
  {
    *a2 = 0;
    *a3 = 0;
    *a4 = 0;
    uint64_t v9 = "Unknown";
    *a5 = 0;
  }
  return std::string::assign(this, v9);
}

void sub_1005C62C8(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void *)(a1 + 128);
  if (v2)
  {
    uint64_t v5 = (uint64_t)(a2 + 2);
    unint64_t v6 = (unint64_t)a2[2];
    unint64_t v7 = a2[1];
    if ((unint64_t)v7 >= v6)
    {
      uint64_t v9 = ((char *)v7 - (unsigned char *)*a2) >> 3;
      if ((unint64_t)(v9 + 1) >> 61) {
        abort();
      }
      uint64_t v10 = v6 - (void)*a2;
      uint64_t v11 = v10 >> 2;
      if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
        uint64_t v11 = v9 + 1;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      if (v12)
      {
        uint64_t v13 = (char *)sub_1000405F8(v5, v12);
        uint64_t v2 = *(void *)(a1 + 128);
      }
      else
      {
        uint64_t v13 = 0;
      }
      uint64_t v14 = &v13[8 * v9];
      unint64_t v15 = &v13[8 * v12];
      *(void *)uint64_t v14 = v2;
      unint64_t v8 = v14 + 8;
      uint64_t v17 = (char *)*a2;
      unint64_t v16 = (char *)a2[1];
      if (v16 != *a2)
      {
        do
        {
          uint64_t v18 = *((void *)v16 - 1);
          v16 -= 8;
          *((void *)v14 - 1) = v18;
          v14 -= 8;
        }
        while (v16 != v17);
        unint64_t v16 = (char *)*a2;
      }
      *a2 = v14;
      a2[1] = v8;
      a2[2] = v15;
      if (v16) {
        operator delete(v16);
      }
    }
    else
    {
      *unint64_t v7 = v2;
      unint64_t v8 = v7 + 1;
    }
    a2[1] = v8;
  }
}

void sub_1005C63B0(void *a1)
{
  sub_1005C6484(a1);

  operator delete();
}

void sub_1005C640C()
{
}

uint64_t sub_1005C6420(uint64_t a1)
{
  if (qword_1009FB3B8 != -1) {
    dispatch_once(&qword_1009FB3B8, &stru_1009B83A8);
  }
  uint64_t v2 = off_1009FB3B0;

  return sub_1005C44AC((uint64_t)v2, a1);
}

void *sub_1005C6484(void *a1)
{
  *a1 = off_1009B80D8;
  a1[1] = off_1009B8180;
  a1[2] = off_1009B81E0;
  a1[3] = off_1009B8290;
  a1[4] = &off_1009B82B0;
  sub_100052DA4(a1 + 5);
  return a1;
}

void sub_1005C654C(id a1)
{
}

void sub_1005C6590()
{
}

void sub_1005C65B4(id a1)
{
}

void sub_1005C65F8()
{
}

void sub_1005C661C(id a1)
{
}

void sub_1005C6660()
{
}

void sub_1005C6684(id a1)
{
}

void sub_1005C66C8()
{
}

void sub_1005C66EC(id a1)
{
}

void sub_1005C6730()
{
}

void sub_1005C6754(id a1)
{
}

void sub_1005C6798()
{
}

void sub_1005C67BC(id a1)
{
}

void sub_1005C6800()
{
}

void sub_1005C6824(id a1)
{
}

void sub_1005C6868()
{
}

void sub_1005C699C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005C6A40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005C6E2C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v7);
  objc_destroyWeak(v6);
  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v8 - 104));
  _Unwind_Resume(a1);
}

void sub_1005C6E98()
{
}

void sub_1005C6EA0()
{
}

void sub_1005C6EA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v5 = qword_100A19FE8;
    if (os_log_type_enabled((os_log_t)qword_100A19FE8, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 138412290;
      id v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[BTVCBonjourLink] deviceDidStartScanning with error %@\n", (uint8_t *)&v6, 0xCu);
    }
    if (objc_opt_respondsToSelector()) {
      [WeakRetained[3] enumerateKeysAndObjectsUsingBlock:&stru_1009B84A0];
    }
  }
}

void sub_1005C6F98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005C6FB8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v8 = (id)qword_100A19FE8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = [v5 UUIDString];
      *(_DWORD *)long long buf = 138412546;
      uint64_t v13 = v9;
      __int16 v14 = 2112;
      id v15 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[BTVCBonjourLink] Found device %@ with advertisementData %@\n", buf, 0x16u);
    }
    if (objc_opt_respondsToSelector())
    {
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      void v10[2] = sub_1005C7178;
      void v10[3] = &unk_1009B84F0;
      void v10[4] = WeakRetained;
      id v11 = v5;
      [v6 enumerateObjectsUsingBlock:v10];
    }
  }
}

void sub_1005C713C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1005C7178(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 40);
  id v9 = v3;
  id v6 = [v3 objectForKeyedSubscript:@"BTVCBonjourLinkType"];
  unsigned int v7 = [v6 unsignedIntValue];
  uint64_t v8 = [v9 objectForKeyedSubscript:@"BTVCBonjourPayloadKey"];
  [v5 btvcBonjourLink:v4 didDiscoverType:v7 withData:v8 fromPeer:*(void *)(a1 + 40) peerInfo:0];
}

void sub_1005C722C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1005C7258(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v8 = (id)qword_100A19FE8;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = [v5 UUIDString];
    *(_DWORD *)long long buf = 138412290;
    __int16 v14 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[BTVCBonjourLink] Lost device %@\n", buf, 0xCu);
  }
  if (WeakRetained)
  {
    if (v6) {
      [v6 valueForKey:@"BTVCBonjourLinkType"];
    }
    else {
    uint64_t v10 = [WeakRetained[3] allKeys];
    }
    if (objc_opt_respondsToSelector())
    {
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      void v11[2] = sub_1005C7448;
      uint64_t v11[3] = &unk_1009B84F0;
      void v11[4] = WeakRetained;
      id v12 = v5;
      [v10 enumerateObjectsUsingBlock:v11];
    }
  }
}

void sub_1005C7408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1005C7448(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(*(void *)(a1 + 32) + 40) btvcBonjourLink:didLosePeer:type:[v3 unsignedIntValue]];
}

void sub_1005C74B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1005C74C8(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    unsigned int v7 = qword_100A19FE8;
    if (os_log_type_enabled((os_log_t)qword_100A19FE8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109378;
      int v13 = a2;
      __int16 v14 = 2112;
      id v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[BTVCBonjourLink] Advertising state update isStarted %d with error %@\n", buf, 0x12u);
    }
    uint64_t v8 = (void *)WeakRetained[3];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    long long v9[2] = sub_1005C7638;
    v9[3] = &unk_1009B8540;
    char v11 = a2;
    void v9[4] = WeakRetained;
    id v10 = v5;
    [v8 enumerateKeysAndObjectsUsingBlock:v9];
  }
}

void sub_1005C7614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1005C7638(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (*(unsigned char *)(a1 + 48))
  {
    if (objc_opt_respondsToSelector()) {
      [*(id *)(*(void *)(a1 + 32) + 40) btvcBonjourLink:*(void *)(a1 + 32) didStartAdvertisingType:[v6 unsignedIntValue]];
    }
  }
  else if (objc_opt_respondsToSelector())
  {
    [*(id *)(*(void *)(a1 + 32) + 40) btvcBonjourLink:*(void *)(a1 + 32) didStopAdvertisingType:objc_msgSend(v6, "unsignedIntValue") withError:*(void *)(a1 + 40)];
  }
}

void sub_1005C770C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1005C7724(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v8 = qword_100A19FE8;
    if (os_log_type_enabled((os_log_t)qword_100A19FE8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 138412546;
      id v10 = v5;
      __int16 v11 = 2112;
      id v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[BTVCBonjourLink] Device didConnect %@ with error %@\n", (uint8_t *)&v9, 0x16u);
    }
    if (objc_opt_respondsToSelector()) {
      [WeakRetained[5] btvcBonjourLink:WeakRetained didConnectToPeer:v5 transport:0 error:v6];
    }
  }
}

void sub_1005C7838(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005C7858(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v5 = qword_100A19FE8;
    if (os_log_type_enabled((os_log_t)qword_100A19FE8, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 138412290;
      id v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[BTVCBonjourLink] Device didDisConnect %@", (uint8_t *)&v6, 0xCu);
    }
    if (objc_opt_respondsToSelector()) {
      [WeakRetained[5] btvcBonjourLink:WeakRetained didDisconnectFromPeer:v3 error:0];
    }
  }
}

void sub_1005C794C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005C7968(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v8 = qword_100A19FE8;
    if (os_log_type_enabled((os_log_t)qword_100A19FE8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 138412546;
      id v10 = v5;
      __int16 v11 = 2112;
      id v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[BTVCBonjourLink] Device didReceiveData from %@ with data %@\n", (uint8_t *)&v9, 0x16u);
    }
    if (objc_opt_respondsToSelector()) {
      [WeakRetained[5] btvcBonjourLink:WeakRetained didReceiveData:v6 fromPeer:v5];
    }
  }
}

void sub_1005C7A78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005C7D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v19);

  objc_destroyWeak(&location);
  objc_sync_exit(v17);

  _Unwind_Resume(a1);
}

void sub_1005C7D9C(uint64_t a1, uint64_t a2, void *a3)
{
  id v8 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    id v6 = (void *)*((void *)WeakRetained + 5);
    uint64_t v7 = *(void *)(a1 + 40);
    if (v8) {
      [v6 btvcBonjourLink:v5 didFailToStartAdvertisingOfType:v7 withError:v8];
    }
    else {
      [v6 btvcBonjourLink:v5 didStartAdvertisingType:v7];
    }
  }
}

void sub_1005C7E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1005C8118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);

  objc_sync_exit(v19);
  _Unwind_Resume(a1);
}

void sub_1005C819C(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained[5] btvcBonjourLink:WeakRetained didStopAdvertisingType:*(void *)(a1 + 40) withError:v6];
  }
}

void sub_1005C8208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1005C84A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  objc_sync_exit(v13);
  _Unwind_Resume(a1);
}

void sub_1005C8628(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1005C8724(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005C8800(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005C891C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1005C8950(uint64_t a1, void *a2)
{
  id v4 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained && (objc_opt_respondsToSelector() & 1) != 0) {
    [WeakRetained[5] btvcBonjourLink:WeakRetained didSendData:*(void *)(a1 + 32) toPeer:*(void *)(a1 + 40) error:v4];
  }
}

void sub_1005C89D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1005C8A64(uint64_t a1, uint64_t a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 8);
  *(void *)(a1 + 72) = a2;
  return sub_10003AFB4((uint64_t)v5);
}

uint64_t sub_1005C8AAC(uint64_t a1, uint64_t a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 8);
  *(void *)(a1 + 80) = a2;
  return sub_10003AFB4((uint64_t)v5);
}

void sub_1005C8AF4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = a3;
  long long __dst = 0uLL;
  uint64_t v22 = 0;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10003B098(&__dst, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    long long __dst = *(_OWORD *)a3;
    uint64_t v22 = *(void *)(a3 + 16);
  }
  id v8 = dispatch_group_create();
  dispatch_group_enter(v8);
  global_queue = dispatch_get_global_queue(2, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1005C8D64;
  block[3] = &unk_100998280;
  int v20 = a2;
  void block[4] = a1;
  void block[5] = v8;
  dispatch_async(global_queue, block);
  dispatch_time_t v10 = dispatch_time(0, 15000000000);
  if (dispatch_group_wait(v8, v10))
  {
    __int16 v11 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Timed out printing all debug logs during force restart", buf, 2u);
    }
  }
  uint64_t v12 = sub_100050530();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)v12 + 112))(v12, (unsigned __int16)a2, v5);
  if (a2 == 132)
  {
    if (qword_1009FB088 != -1) {
      dispatch_once(&qword_1009FB088, &stru_1009B8670);
    }
    uint64_t v13 = qword_1009FB080;
    sub_10004191C(buf, "Restart");
    sub_10004191C(__p, "OI_STATUS_INVALID_ROLE");
    sub_1004B7DA8(0.0, v13, (uint64_t *)buf, (uint64_t *)__p);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v18 < 0) {
      operator delete(*(void **)buf);
    }
  }
  int v14 = *(char *)(v5 + 23);
  if (a4)
  {
    if (v14 < 0) {
      uint64_t v5 = *(void *)v5;
    }
    sub_10010B844(a2, (const char *)v5);
  }
  if (v14 < 0) {
    uint64_t v5 = *(void *)v5;
  }
  sub_10010B8FC(a2, v5);
}

void sub_1005C8D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 57) < 0) {
    operator delete(*(void **)(v21 - 80));
  }
  _Unwind_Resume(exception_object);
}

void sub_1005C8D64(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (sub_100017A14()) {
    sub_1005C8DB4(v2, *(_DWORD *)(a1 + 48), 0);
  }
  id v3 = *(NSObject **)(a1 + 40);

  dispatch_group_leave(v3);
}

void sub_1005C8DB4(uint64_t a1, unsigned int a2, int a3)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009B8690);
  }
  sub_1004B6818();
  if (qword_1009F8748 != -1) {
    dispatch_once(&qword_1009F8748, &stru_1009B86B0);
  }
  sub_1004BB78C((uint64_t)off_1009F8740);
  if (qword_1009F8090 != -1) {
    dispatch_once(&qword_1009F8090, &stru_1009B86D0);
  }
  sub_1004D8FDC((uint64_t)off_1009F8088);
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009B86F0);
  }
  sub_100554780(qword_1009F8160);
  if (qword_1009F8778 != -1) {
    dispatch_once(&qword_1009F8778, &stru_1009B8710);
  }
  sub_10061A3E4((uint64_t)off_1009F8770);
  if (qword_1009F87A8 != -1) {
    dispatch_once(&qword_1009F87A8, &stru_1009B8730);
  }
  sub_10047052C((uint64_t)off_1009F87A0);
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009B8750);
  }
  sub_1004AD268((uint64_t)off_1009F7EF8);
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009B8770);
  }
  sub_10057041C((uint64_t)off_1009F80A8);
  if (qword_1009F80A0 != -1) {
    dispatch_once(&qword_1009F80A0, &stru_1009B8790);
  }
  sub_100292798((uint64_t)off_1009F8098);
  if (qword_1009FB288 != -1) {
    dispatch_once(&qword_1009FB288, &stru_1009B87B0);
  }
  sub_10030D8B0(qword_1009FB280);
  uint64_t v3 = sub_100052EB4();
  (*(void (**)(uint64_t))(*(void *)v3 + 152))(v3);
  uint64_t v4 = sub_10003FB34();
  nullsub_95(v4);
  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_1009B87D0);
  }
  sub_100613040((uint64_t)off_1009F8760, (uint64_t)&__p);
  if (v46 < 0) {
    operator delete(__p);
  }
  if (qword_1009F8080 != -1) {
    dispatch_once(&qword_1009F8080, &stru_1009B87F0);
  }
  sub_1004A5D58((uint64_t)off_1009F8078);
  if (qword_1009FB180 != -1) {
    dispatch_once(&qword_1009FB180, &stru_1009B8810);
  }
  sub_1002C3794(qword_1009FB178);
  if (qword_1009FB078 != -1) {
    dispatch_once(&qword_1009FB078, &stru_1009B8830);
  }
  sub_100406278((void *)qword_1009FB070);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B8850);
  }
  sub_100309174((uint64_t)off_1009F8780);
  if (qword_1009FB230 != -1) {
    dispatch_once(&qword_1009FB230, &stru_1009B8870);
  }
  sub_100429E7C(qword_1009FB228);
  if (qword_1009F7F10 != -1) {
    dispatch_once(&qword_1009F7F10, &stru_1009B8890);
  }
  sub_1006424D4((void *)qword_1009F7F08);
  if (qword_1009F8248 != -1) {
    dispatch_once(&qword_1009F8248, &stru_1009B88B0);
  }
  sub_100665D28((uint64_t)off_1009F8240);
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009B88D0);
  }
  sub_1006A6E2C((uint64_t)off_1009F7EB8);
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009B88F0);
  }
  sub_1006F16D4((uint64_t)off_1009F85C0);
  if (qword_1009F7ED0 != -1) {
    dispatch_once(&qword_1009F7ED0, &stru_1009B8910);
  }
  sub_10071936C(qword_1009F7EC8);
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009B8930);
  }
  sub_1006CE84C((uint64_t)off_1009F7ED8);
  if (qword_1009FB270 != -1) {
    dispatch_once(&qword_1009FB270, &stru_1009B8950);
  }
  sub_1007368EC((void *)qword_1009FB268);
  if (qword_1009F85D8 != -1) {
    dispatch_once(&qword_1009F85D8, &stru_1009B8970);
  }
  sub_1005DA048(qword_1009F85D0);
  if (qword_1009FB1A0 != -1) {
    dispatch_once(&qword_1009FB1A0, &stru_1009B8990);
  }
  sub_100616824(qword_1009FB198);
  if (qword_1009FBC88 != -1) {
    dispatch_once(&qword_1009FBC88, &stru_1009B89B0);
  }
  sub_100605464((uint64_t)off_1009FBC80);
  uint64_t v5 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 352))(v5))
  {
    if (qword_1009FB798 != -1) {
      dispatch_once(&qword_1009FB798, &stru_1009B89D0);
    }
    sub_10044FACC((uint64_t)off_1009FB790);
    if (qword_1009FB7D8 != -1) {
      dispatch_once(&qword_1009FB7D8, &stru_1009B89F0);
    }
    sub_10054F96C((uint64_t)off_1009FB7D0);
  }
  sub_10025B8C0();
  CFArrayRef v6 = CFPreferencesCopyKeyList(@"com.apple.BTServer", kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
  uint64_t v7 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    *(void *)long long v49 = "com.apple.BTServer";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "statedump: ------------------ %s -------------------", buf, 0xCu);
  }
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  CFArrayRef obj = v6;
  id v8 = [(__CFArray *)obj countByEnumeratingWithState:&v41 objects:v51 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v42;
    do
    {
      for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v42 != v9) {
          objc_enumerationMutation(obj);
        }
        CFStringRef v11 = *(const __CFString **)(*((void *)&v41 + 1) + 8 * i);
        uint64_t v12 = (void *)CFPreferencesCopyValue(v11, @"com.apple.BTServer", kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
        uint64_t v13 = [v12 description];
        int v14 = [v13 stringByReplacingOccurrencesOfString:@"\n" withString:@" "];

        id v15 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412546;
          *(void *)long long v49 = v11;
          *(_WORD *)&v49[8] = 2112;
          long long v50 = v14;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "statedump: \t%@ -> %@", buf, 0x16u);
        }
      }
      id v8 = [(__CFArray *)obj countByEnumeratingWithState:&v41 objects:v51 count:16];
    }
    while (v8);
  }

  CFArrayRef v16 = CFPreferencesCopyKeyList(@"com.apple.MobileBluetooth.debug", kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
  uint64_t v17 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    *(void *)long long v49 = "com.apple.MobileBluetooth.debug";
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "statedump: ------------------ %s -------------------", buf, 0xCu);
  }
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  CFArrayRef v35 = v16;
  id v18 = [(__CFArray *)v35 countByEnumeratingWithState:&v37 objects:v47 count:16];
  if (v18)
  {
    uint64_t v19 = *(void *)v38;
    do
    {
      for (uint64_t j = 0; j != v18; uint64_t j = (char *)j + 1)
      {
        if (*(void *)v38 != v19) {
          objc_enumerationMutation(v35);
        }
        CFStringRef v21 = *(const __CFString **)(*((void *)&v37 + 1) + 8 * (void)j);
        uint64_t v22 = (void *)CFPreferencesCopyValue(v21, @"com.apple.MobileBluetooth.debug", kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
        uint64_t v23 = [v22 description];
        uint64_t v24 = [v23 stringByReplacingOccurrencesOfString:@"\n" withString:@" "];

        uint64_t v25 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412546;
          *(void *)long long v49 = v21;
          *(_WORD *)&v49[8] = 2112;
          long long v50 = v24;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "statedump: \t%@ -> %@", buf, 0x16u);
        }
      }
      id v18 = [(__CFArray *)v35 countByEnumeratingWithState:&v37 objects:v47 count:16];
    }
    while (v18);
  }

  uint64_t v26 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    *(void *)long long v49 = "os_log state";
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "statedump: ------------------ %s -------------------", buf, 0xCu);
    uint64_t v26 = qword_100A19E50;
  }
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v27 = os_log_type_enabled(v26, OS_LOG_TYPE_INFO);
    BOOL v28 = os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG);
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)long long v49 = v27;
    *(_WORD *)&v49[4] = 1024;
    *(_DWORD *)&v49[6] = v28;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "statedump: os_log settings: info %d, debug %d", buf, 0xEu);
  }
  sub_10025B96C(a2);
  if (a3)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 456))(a1))
    {
      double v29 = sub_10025E0A8(a2);
      (*(void (**)(uint64_t, uint64_t, double))(*(void *)a1 + 496))(a1, v30, v29);
    }
  }
}

void sub_1005C993C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1005C99C8(uint64_t a1, int a2)
{
}

uint64_t sub_1005C99DC(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v3 = sub_1005C8DB4(a1, 3705, 1);
    nullsub_95(v3);
    uint64_t v2 = vars8;
  }
  return sub_10010B390();
}

void sub_1005C9A14(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (qword_100A139A8 != -1) {
    dispatch_once(&qword_100A139A8, &stru_1009B8650);
  }
  uint64_t v5 = (void (*)(id, uint64_t, uint64_t))off_100A139A0;
  if (off_100A139A0)
  {
    if (*((char *)a2 + 23) < 0) {
      a2 = (uint64_t *)*a2;
    }
    id v7 = +[NSString stringWithUTF8String:a2];
    uint64_t v6 = getpid();
    v5(v7, a3, v6);
  }
}

void sub_1005C9ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1005C9AF0(id a1)
{
  off_100A139A0 = dlsym((void *)0xFFFFFFFFFFFFFFFFLL, "WriteStackshotReportWithPID");
}

void sub_1005C9B1C(id a1)
{
}

void sub_1005C9B60(id a1)
{
}

void sub_1005C9BA4()
{
}

void sub_1005C9BC8(id a1)
{
}

void sub_1005C9C0C()
{
}

void sub_1005C9C30(id a1)
{
}

void sub_1005C9C74()
{
}

void sub_1005C9C98(id a1)
{
}

void sub_1005C9CDC()
{
}

void sub_1005C9D00(id a1)
{
}

void sub_1005C9D44()
{
}

void sub_1005C9D68(id a1)
{
}

void sub_1005C9DAC()
{
}

void sub_1005C9DD0(id a1)
{
}

void sub_1005C9E14()
{
}

void sub_1005C9E38(id a1)
{
}

void sub_1005C9E7C()
{
}

void sub_1005C9EA0(id a1)
{
}

void sub_1005C9EE4()
{
}

void sub_1005C9F08(id a1)
{
}

void sub_1005C9F8C()
{
  uint64_t v3 = *v2;
  if (*v2)
  {
    *(void *)(v0 + 48) = v3;
    operator delete(v3);
  }
  sub_10030F284(v1, *(void **)(v0 + 16));

  operator delete();
}

void sub_1005C9FD8(id a1)
{
}

void sub_1005CA01C()
{
}

void sub_1005CA040(id a1)
{
}

void sub_1005CA084()
{
}

void sub_1005CA0A8(id a1)
{
}

void sub_1005CA0EC()
{
}

void sub_1005CA110(id a1)
{
}

void sub_1005CA154()
{
}

void sub_1005CA178(id a1)
{
}

void sub_1005CA1BC()
{
}

void sub_1005CA1E0(id a1)
{
}

void sub_1005CA224()
{
}

void sub_1005CA248(id a1)
{
}

void sub_1005CA28C()
{
}

void sub_1005CA2B0(id a1)
{
}

void sub_1005CA2F4()
{
}

void sub_1005CA318(id a1)
{
}

void sub_1005CA35C()
{
}

void sub_1005CA380(id a1)
{
}

void sub_1005CA3C4()
{
}

void sub_1005CA3E8(id a1)
{
}

void sub_1005CA42C()
{
}

void sub_1005CA450(id a1)
{
}

void sub_1005CA494()
{
}

void sub_1005CA4B8(id a1)
{
}

void sub_1005CA4FC()
{
}

void sub_1005CA520(id a1)
{
}

void sub_1005CA564()
{
}

void sub_1005CA588(id a1)
{
}

void sub_1005CA5CC()
{
}

void sub_1005CA5F0(id a1)
{
}

void sub_1005CA634()
{
}

void sub_1005CA658(id a1)
{
}

void sub_1005CA69C()
{
}

void sub_1005CA6C0(id a1)
{
}

void sub_1005CA704()
{
}

void sub_1005CA728()
{
  qword_100A19E30 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.A2DP");
  qword_100A19E38 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.AACP");
  qword_100A19E40 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.Accessory");
  qword_100A19E48 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.Audio");
  qword_100A19E50 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.Core");
  qword_100A19E58 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.Coex");
  qword_100A19E60 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.CloudPairing");
  qword_100A19E68 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.Discovery");
  qword_100A19E70 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.Handsfree");
  qword_100A19E78 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.LE");
  qword_100A19E80 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.LE.Security");
  qword_100A19E88 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.GATT");
  qword_100A19E90 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.LE.Scan");
  qword_100A19E98 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.NVRAM");
  qword_100A19EA0 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.ScalablePipe");
  qword_100A19EA8 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.Remote");
  qword_100A19EB0 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.SDP");
  qword_100A19EB8 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.Security");
  qword_100A19EC0 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.Telephony");
  qword_100A19EC8 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.XPC");
  qword_100A19ED0 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.PipeMgr");
  qword_100A19ED8 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.MagicPairing");
  qword_100A19EE0 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.MobileAsset");
  qword_100A19EE8 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.L2CAPChannel");
  qword_100A19EF0 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.Phonebook");
  qword_100A19EF8 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.LE.Connection");
  qword_100A19F00 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.App");
  qword_100A19F08 = (uint64_t)os_log_create("com.apple.magnetpacketlog", "bluetooth");
  qword_100A19F18 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.ANCSAuthorization");
  qword_100A19F20 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.LE.Advertise");
  qword_100A19F28 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.LE.AdvertiseEx");
  qword_100A19F30 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.TimeLine.App");
  qword_100A19F38 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.TimeLine.Device");
  qword_100A19F40 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.TimeLine.Power");
  qword_100A19F48 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.TimeLine.Error");
  qword_100A19F50 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.TimeLine.Local");
  qword_100A19F58 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.AppRestoration");
  qword_100A19F60 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.USBPairing");
  qword_100A19F68 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.SonyGamepadPairing");
  qword_100A19F70 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.BTResourceManager");
  qword_100A19F78 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.LinkQuality");
  qword_100A19F80 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.RFCOMMChannel");
  qword_100A19F88 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.MacCoex");
  qword_100A19F90 = (uint64_t)os_log_create("com.apple.bluetooth", "ExposureNotification");
  qword_100A19F98 = (uint64_t)os_log_create("com.apple.ExposureNotification", "Crypto");
  qword_100A19FA0 = (uint64_t)os_log_create("com.apple.ExposureNotification", "Manager");
  qword_100A19FA8 = (uint64_t)os_log_create("com.apple.ExposureNotification", "Database");
  qword_100A19FB0 = (uint64_t)os_log_create("com.apple.ExposureNotification", "Scanning");
  qword_100A19FB8 = (uint64_t)os_log_create("com.apple.ExposureNotification", "Advertising");
  qword_100A19FC0 = (uint64_t)os_log_create("com.apple.bluetooth", "SensorTracking");
  qword_100A19FC8 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.LEAudio");
  qword_100A19FD0 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.BandSwitchManager");
  qword_100A19FD8 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.EventDispatcher");
  qword_100A19FE0 = (uint64_t)os_log_create("com.apple.bluetooth", "AOPInterfaceManager");
  qword_100A19FE8 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.VirtualController");
  qword_100A19FF0 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.XPCParameters");
  if (sub_10053FF64()) {
    uint64_t v1 = ct_green_tea_logger_create();
  }
  else {
    uint64_t v1 = 0;
  }
  qword_100A19FF8 = v1;
  qword_100A1A000 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.NetSharing");
  qword_100A1A008 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.LEA");
  qword_100A1A010 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.Gaming");
  qword_100A1A018 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.HID");
  qword_100A1A020 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.MAP");
  qword_100A1A028 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.Braille");
  qword_100A1A030 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.FastconnectACL");
  qword_100A1A038 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.FastConnect");
  qword_100A1A040 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.LPM");
  qword_100A1A048 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.BTDaemon");
}

uint64_t sub_1005CADD0(uint64_t a1)
{
  uint64_t v2 = (void *)sub_1004C9B7C(a1, "NetworkConsumerService", 4096);
  void *v2 = &off_1009B8A20;
  v2[41] = &off_1009B8B28;
  if (qword_1009FBDA8 != -1) {
    dispatch_once(&qword_1009FBDA8, &stru_1009B8B30);
  }
  sub_1004C9E90(a1, (uint64_t)off_1009FBDA0);
  return a1;
}

void sub_1005CAE78(_Unwind_Exception *a1)
{
  sub_1004C9C80(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1005CAE90(uint64_t a1)
{
  uint64_t v2 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v2 + 48))(v2, 256))
  {
    uint64_t v3 = sub_10003FFD4();
    sub_1004E9968(v3 + 248, a1 + 328);
  }

  return sub_1004CA044(a1);
}

uint64_t sub_1005CAF04(uint64_t a1)
{
  uint64_t v2 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v2 + 48))(v2, 256))
  {
    uint64_t v3 = sub_10003FFD4();
    sub_1004E9F88(v3 + 248, a1 + 328);
  }

  return sub_1004CA358(a1);
}

uint64_t sub_1005CAF78(uint64_t a1, uint64_t a2)
{
  long long v14 = xmmword_1007BFB90;
  long long v15 = xmmword_1007BFB80;
  memset(v17, 0, sizeof(v17));
  char v13 = 0;
  int v12 = 0;
  if (sub_10047B300(a2))
  {
    if (sub_100478F30(a2, &v15, 4u))
    {
      int v4 = 4;
    }
    else if (sub_100478F30(a2, &v14, 4u))
    {
      int v4 = 4;
    }
    else
    {
      int v4 = 1;
    }
  }
  else
  {
    BOOL v5 = sub_10048A2B0(a2, v17, &v13);
    if (v13) {
      BOOL v6 = v5;
    }
    else {
      BOOL v6 = 0;
    }
    if (v6)
    {
      BOOL v7 = sub_10018BDDC((unsigned __int8 *)v17, 4374, &v12) == 0;
      if (sub_10018BDDC((unsigned __int8 *)v17, 4375, &v12)) {
        int v8 = v7;
      }
      else {
        int v8 = 1;
      }
      if (v8) {
        int v4 = 4;
      }
      else {
        int v4 = 0;
      }
    }
    else
    {
      int v4 = 0;
    }
  }
  unsigned int v9 = *(_DWORD *)(a1 + 32);
  uint64_t v16 = 0;
  sub_100026C30((uint64_t)&v16);
  *(void *)&long long v11 = (int)v16;
  *((void *)&v11 + 1) = SWORD2(v16);
  return sub_100477F4C(a2, v9, v4, &v11, 0);
}

uint64_t sub_1005CB10C(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  long long v9 = xmmword_1007BFB90;
  long long v10 = xmmword_1007BFB80;
  int v8 = 0;
  memset(v11, 0, sizeof(v11));
  char v7 = 0;
  int v6 = 0;
  *a3 = 0;
  if (sub_10047B300(a2))
  {
    uint64_t result = sub_100478F30(a2, &v10, 4u);
    if ((result & 1) == 0)
    {
      uint64_t result = sub_100478F30(a2, &v9, 4u);
      if ((result & 1) == 0) {
        return result;
      }
    }
    goto LABEL_13;
  }
  if (sub_10048A2B0(a2, v11, &v7) && v7)
  {
    uint64_t result = sub_10018BDDC((unsigned __int8 *)v11, 4374, &v6);
    if (!result) {
      goto LABEL_13;
    }
    uint64_t result = sub_10018BDDC((unsigned __int8 *)v11, 4375, &v6);
    if (!result) {
      goto LABEL_13;
    }
    if (v6 == 1) {
      return result;
    }
  }
  uint64_t result = sub_100476250(a2, &v8);
  if (result)
  {
    if ((v8 & 0x20000) != 0)
    {
      uint64_t result = sub_100476054(a2);
      if (result != 21) {
LABEL_13:
      }
        *a3 = 1;
    }
  }
  return result;
}

BOOL sub_1005CB278(uint64_t a1, uint64_t a2)
{
  long long v12 = xmmword_1007BFB80;
  long long v11 = xmmword_1007BFB90;
  long long __p = 0;
  long long v9 = 0;
  uint64_t v10 = 0;
  if ((sub_10047AE08(a2, (uint64_t)&v12, 8u, &__p) & 1) != 0 || sub_10047AE08(a2, (uint64_t)&v11, 8u, &__p))
  {
    int v4 = __p;
    uint64_t v3 = v9;
    BOOL v6 = v9 - (unsigned char *)__p != 16 || *(unsigned char *)__p != 1 || *((_DWORD *)__p + 2) != 0;
    while (v4 != v3)
    {
      sub_1002D5394(v4);
      v4 += 16;
      uint64_t v3 = v9;
    }
  }
  else
  {
    BOOL v6 = 1;
  }
  if (__p)
  {
    long long v9 = __p;
    operator delete(__p);
  }
  return v6;
}

void sub_1005CB35C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005CB37C(uint64_t result, int a2, int a3)
{
  if (a3 == 1)
  {
    if (a2)
    {
      uint64_t v3 = result;
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 112))(result);
      if (result)
      {
        int v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 96);
        return v4(v3);
      }
    }
  }
  return result;
}

uint64_t sub_1005CB410(uint64_t result, int a2, int a3)
{
  if (a3 == 1)
  {
    if (a2)
    {
      uint64_t v3 = result - 328;
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(result - 328) + 112))(result - 328);
      if (result)
      {
        int v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 96);
        return v4(v3);
      }
    }
  }
  return result;
}

void sub_1005CB4AC(uint64_t a1)
{
  sub_1004C9C80(a1);

  operator delete();
}

void sub_1005CB4E4(id a1)
{
}

void sub_1005CB528()
{
}

uint64_t sub_1005CB54C(uint64_t a1)
{
  *(void *)a1 = off_1009B8B60;
  *(void *)(a1 + 8) = &off_1009B8BA8;
  sub_100052DA8(a1 + 24);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 96) = a1 + 104;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 91) = 0;
  return a1;
}

uint64_t sub_1005CB5D4(uint64_t a1)
{
  *(void *)a1 = off_1009B8B60;
  *(void *)(a1 + 8) = &off_1009B8BA8;
  uint64_t v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(void *)(a1 + 128) = v2;
    operator delete(v2);
  }
  sub_1000486F0(a1 + 96, *(void **)(a1 + 104));
  sub_100052DA4(a1 + 24);
  return a1;
}

void sub_1005CB65C(uint64_t a1)
{
  sub_1005CB5D4(a1);

  operator delete();
}

void sub_1005CB694(uint64_t a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B8BE8);
  }
  sub_10026B36C((uint64_t)off_1009F8068 + 64, a1 + 8);
  *(void *)(a1 + 16) = 0;
}

void sub_1005CB6F4(uint64_t a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B8BE8);
  }
  uint64_t v2 = (char *)off_1009F8068 + 64;

  sub_100052718((uint64_t)v2, a1 + 8);
}

uint64_t sub_1005CB75C(uint64_t a1)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 24);
  if (!*(unsigned char *)(a1 + 88))
  {
    *(unsigned char *)(a1 + 88) = 1;
    __int16 v4 = 0;
    int v3 = 0;
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009B8BE8);
    }
    sub_1004E219C((uint64_t)off_1009F8068, (uint64_t)&v3);
    *(_DWORD *)(a1 + 89) = v3;
    *(_WORD *)(a1 + 93) = v4;
    sub_1005CB818((IOHIDManagerRef *)a1);
  }
  return sub_10003AFB4((uint64_t)v5);
}

void sub_1005CB804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1005CB818(IOHIDManagerRef *a1)
{
  uint64_t v2 = qword_100A19F60;
  if (os_log_type_enabled((os_log_t)qword_100A19F60, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Setting up USB Listener for USB Pairing", buf, 2u);
  }
  sub_1005CC348((uint64_t)a1);
  strcpy((char *)buf, "\v");
  CFNumberRef v33 = CFNumberCreate(0, kCFNumberShortType, buf);
  __int16 valuePtr = 1452;
  CFNumberRef v32 = CFNumberCreate(0, kCFNumberShortType, &valuePtr);
  __int16 v46 = 615;
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberShortType, &v46);
  __int16 v45 = 620;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberShortType, &v45);
  __int16 v44 = 668;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberShortType, &v44);
  __int16 v43 = 666;
  CFNumberRef v6 = CFNumberCreate(0, kCFNumberShortType, &v43);
  __int16 v42 = 671;
  CFNumberRef v7 = CFNumberCreate(0, kCFNumberShortType, &v42);
  __int16 v41 = 800;
  CFNumberRef v31 = CFNumberCreate(0, kCFNumberShortType, &v41);
  __int16 v40 = 801;
  CFNumberRef v30 = CFNumberCreate(0, kCFNumberShortType, &v40);
  __int16 v39 = 802;
  CFNumberRef cf = CFNumberCreate(0, kCFNumberShortType, &v39);
  __int16 v38 = 617;
  CFNumberRef v27 = CFNumberCreate(0, kCFNumberShortType, &v38);
  __int16 v37 = 613;
  CFNumberRef v29 = CFNumberCreate(0, kCFNumberShortType, &v37);
  __int16 v36 = 803;
  CFNumberRef v25 = CFNumberCreate(0, kCFNumberShortType, &v36);
  __int16 v35 = 804;
  CFNumberRef v26 = CFNumberCreate(0, kCFNumberShortType, &v35);
  if (!a1[2])
  {
    IOHIDManagerRef v8 = IOHIDManagerCreate(kCFAllocatorDefault, 0);
    a1[2] = v8;
    if (v8)
    {
      Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, 0, 0);
      theDict = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, 0, 0);
      id v18 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, 0, 0);
      uint64_t v19 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, 0, 0);
      int v20 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, 0, 0);
      CFStringRef v21 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, 0, 0);
      uint64_t v22 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, 0, 0);
      uint64_t v23 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, 0, 0);
      uint64_t v24 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, 0, 0);
      long long v14 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, 0, 0);
      long long v15 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, 0, 0);
      uint64_t v16 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, 0, 0);
      char v13 = CFArrayCreateMutable(kCFAllocatorDefault, 0, 0);
      CFDictionaryAddValue(Mutable, @"Transport", @"USB");
      CFDictionaryAddValue(Mutable, @"VendorID", v32);
      CFDictionaryAddValue(Mutable, @"ProductID", v3);
      CFDictionaryAddValue(Mutable, @"PrimaryUsage", v33);
      CFDictionaryAddValue(theDict, @"Transport", @"USB");
      CFDictionaryAddValue(theDict, @"VendorID", v32);
      CFDictionaryAddValue(theDict, @"ProductID", v4);
      CFDictionaryAddValue(theDict, @"PrimaryUsage", v33);
      CFDictionaryAddValue(v18, @"Transport", @"USB");
      CFDictionaryAddValue(v18, @"VendorID", v32);
      CFDictionaryAddValue(v18, @"ProductID", v5);
      CFDictionaryAddValue(v18, @"PrimaryUsage", v33);
      CFDictionaryAddValue(v19, @"Transport", @"USB");
      CFDictionaryAddValue(v19, @"VendorID", v32);
      CFDictionaryAddValue(v19, @"ProductID", v6);
      CFDictionaryAddValue(v19, @"PrimaryUsage", v33);
      CFDictionaryAddValue(v20, @"Transport", @"USB");
      CFDictionaryAddValue(v20, @"VendorID", v32);
      CFDictionaryAddValue(v20, @"ProductID", v7);
      CFDictionaryAddValue(v20, @"PrimaryUsage", v33);
      CFDictionaryAddValue(v21, @"Transport", @"USB");
      CFDictionaryAddValue(v21, @"VendorID", v32);
      CFDictionaryAddValue(v21, @"ProductID", v31);
      CFDictionaryAddValue(v21, @"PrimaryUsage", v33);
      CFDictionaryAddValue(v22, @"Transport", @"USB");
      CFDictionaryAddValue(v22, @"VendorID", v32);
      CFDictionaryAddValue(v22, @"ProductID", v30);
      CFDictionaryAddValue(v22, @"PrimaryUsage", v33);
      CFDictionaryAddValue(v23, @"Transport", @"USB");
      CFDictionaryAddValue(v23, @"VendorID", v32);
      CFDictionaryAddValue(v23, @"ProductID", cf);
      CFDictionaryAddValue(v23, @"PrimaryUsage", v33);
      CFDictionaryAddValue(v24, @"Transport", @"USB");
      CFDictionaryAddValue(v24, @"VendorID", v32);
      CFDictionaryAddValue(v24, @"ProductID", v27);
      CFDictionaryAddValue(v24, @"PrimaryUsage", v33);
      CFDictionaryAddValue(v14, @"Transport", @"USB");
      CFDictionaryAddValue(v14, @"VendorID", v32);
      CFDictionaryAddValue(v14, @"ProductID", v25);
      CFDictionaryAddValue(v14, @"PrimaryUsage", v33);
      CFDictionaryAddValue(v15, @"Transport", @"USB");
      CFDictionaryAddValue(v15, @"VendorID", v32);
      CFDictionaryAddValue(v15, @"ProductID", v29);
      CFDictionaryAddValue(v15, @"PrimaryUsage", v33);
      CFDictionaryAddValue(v16, @"Transport", @"USB");
      CFDictionaryAddValue(v16, @"VendorID", v32);
      CFDictionaryAddValue(v16, @"ProductID", v26);
      CFDictionaryAddValue(v16, @"PrimaryUsage", v33);
      CFArrayAppendValue(v13, Mutable);
      CFArrayAppendValue(v13, theDict);
      CFArrayAppendValue(v13, v18);
      CFArrayAppendValue(v13, v19);
      CFArrayAppendValue(v13, v20);
      CFArrayAppendValue(v13, v21);
      CFArrayAppendValue(v13, v22);
      CFArrayAppendValue(v13, v23);
      CFArrayAppendValue(v13, v24);
      CFArrayAppendValue(v13, v14);
      CFArrayAppendValue(v13, v15);
      CFArrayAppendValue(v13, v16);
      IOHIDManagerSetDeviceMatchingMultiple(a1[2], v13);
      if (IOHIDManagerOpen(a1[2], 0))
      {
        if (os_log_type_enabled((os_log_t)qword_100A19F60, OS_LOG_TYPE_ERROR)) {
          sub_100781150();
        }
      }
      else
      {
        IOHIDManagerRegisterDeviceMatchingCallback(a1[2], (IOHIDDeviceCallback)sub_1005CC3B4, a1);
        IOHIDManagerRegisterDeviceRemovalCallback(a1[2], (IOHIDDeviceCallback)sub_1005CC420, a1);
        uint64_t v10 = a1[2];
        Main = CFRunLoopGetMain();
        IOHIDManagerScheduleWithRunLoop(v10, Main, kCFRunLoopCommonModes);
        long long v12 = qword_100A19F60;
        if (os_log_type_enabled((os_log_t)qword_100A19F60, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v34 = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Created USB HIDManager", v34, 2u);
        }
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
      if (theDict) {
        CFRelease(theDict);
      }
      if (v18) {
        CFRelease(v18);
      }
      if (v19) {
        CFRelease(v19);
      }
      if (v20) {
        CFRelease(v20);
      }
      if (v21) {
        CFRelease(v21);
      }
      if (v22) {
        CFRelease(v22);
      }
      if (v23) {
        CFRelease(v23);
      }
      if (v24) {
        CFRelease(v24);
      }
      if (v14) {
        CFRelease(v14);
      }
      if (v15) {
        CFRelease(v15);
      }
      if (v16) {
        CFRelease(v16);
      }
      if (v13) {
        CFRelease(v13);
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19F60, OS_LOG_TYPE_ERROR))
    {
      sub_10078111C();
    }
  }
  if (v33) {
    CFRelease(v33);
  }
  if (v32) {
    CFRelease(v32);
  }
  if (v3) {
    CFRelease(v3);
  }
  if (v4) {
    CFRelease(v4);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v31) {
    CFRelease(v31);
  }
  if (v30) {
    CFRelease(v30);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v27) {
    CFRelease(v27);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (v29) {
    CFRelease(v29);
  }
  if (v26) {
    CFRelease(v26);
  }
}

uint64_t sub_1005CC258(uint64_t a1)
{
  return sub_1005CB75C(a1 - 8);
}

uint64_t sub_1005CC260(uint64_t a1)
{
  uint64_t v2 = qword_100A19F60;
  if (os_log_type_enabled((os_log_t)qword_100A19F60, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "USBPairingManager::stackWillStop enter", buf, 2u);
  }
  *(void *)long long buf = 0;
  uint64_t v7 = 0;
  sub_10003AED0((uint64_t)buf, a1 + 24);
  *(unsigned char *)(a1 + 88) = 0;
  sub_1005CC348(a1);
  CFNumberRef v3 = qword_100A19F60;
  if (os_log_type_enabled((os_log_t)qword_100A19F60, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)CFNumberRef v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "USBPairingManager::stackWillStop exit", v5, 2u);
  }
  return sub_10003AFB4((uint64_t)buf);
}

void sub_1005CC334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1005CC348(uint64_t a1)
{
  uint64_t v1 = *(__IOHIDManager **)(a1 + 16);
  if (v1)
  {
    Main = CFRunLoopGetMain();
    IOHIDManagerUnscheduleFromRunLoop(v1, Main, kCFRunLoopCommonModes);
    IOHIDManagerClose(*(IOHIDManagerRef *)(a1 + 16), 0);
    CFRelease(*(CFTypeRef *)(a1 + 16));
    *(void *)(a1 + 16) = 0;
  }
}

uint64_t sub_1005CC3A4(uint64_t a1)
{
  return sub_1005CC260(a1 - 8);
}

void sub_1005CC3B4(uint64_t a1, uint64_t a2, uint64_t a3, __IOHIDDevice *a4)
{
  if (qword_1009FB250 != -1) {
    dispatch_once(&qword_1009FB250, &stru_1009B8BC8);
  }
  uint64_t v6 = qword_1009FB248;

  sub_1005CCC48(v6, a1, a4);
}

void sub_1005CC420(uint64_t a1, uint64_t a2, uint64_t a3, __IOHIDDevice *a4)
{
  if (qword_1009FB250 != -1) {
    dispatch_once(&qword_1009FB250, &stru_1009B8BC8);
  }
  uint64_t v5 = qword_1009FB248;

  sub_1005CC484(v5, a2, a4);
}

void sub_1005CC484(uint64_t a1, uint64_t a2, __IOHIDDevice *a3)
{
  uint64_t v5 = sub_1005CC64C(a1, a3);
  uint64_t v6 = qword_100A19F60;
  BOOL v7 = os_log_type_enabled((os_log_t)qword_100A19F60, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v7)
    {
      sub_100475F84(v5, (uint64_t)__p);
      IOHIDManagerRef v8 = v11 >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)long long buf = 136315138;
      char v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Disconnecting USB device to initiate Bluetooth Connection to device %s", buf, 0xCu);
      if (v11 < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (qword_1009F8090 != -1) {
      dispatch_once(&qword_1009F8090, &stru_1009B8C08);
    }
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    long long v9[2] = sub_1005CC838;
    v9[3] = &unk_100997528;
    void v9[4] = v5;
    sub_1004D3990((uint64_t)off_1009F8088, v9);
    *(unsigned char *)(v5 + 1296) = 0;
    sub_1005CC8D8(a1, v5);
    sub_1005CCA94(a1, v5);
  }
  else if (v7)
  {
    *(_DWORD *)long long __p = 134217984;
    *(void *)&__p[4] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Can't find device with ioHIDRef %p", __p, 0xCu);
  }
}

uint64_t sub_1005CC64C(uint64_t a1, __IOHIDDevice *a2)
{
  v20[0] = 0;
  v20[1] = 0;
  sub_10003AED0((uint64_t)v20, a1 + 24);
  if (a2)
  {
    CFNumberRef v4 = IOHIDDeviceGetProperty(a2, @"LocationID");
    uint64_t v5 = *(void **)(a1 + 96);
    uint64_t v6 = (void *)(a1 + 104);
    if (v5 == v6)
    {
LABEL_10:
      uint64_t v11 = 0;
    }
    else
    {
      while (1)
      {
        int v7 = *((_DWORD *)v5 + 10);
        if (v7 == [v4 intValue]) {
          break;
        }
        IOHIDManagerRef v8 = (void *)v5[1];
        if (v8)
        {
          do
          {
            long long v9 = v8;
            IOHIDManagerRef v8 = (void *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            long long v9 = (void *)v5[2];
            BOOL v10 = *v9 == (void)v5;
            uint64_t v5 = v9;
          }
          while (!v10);
        }
        uint64_t v5 = v9;
        if (v9 == v6) {
          goto LABEL_10;
        }
      }
      long long v12 = qword_100A19F60;
      if (os_log_type_enabled((os_log_t)qword_100A19F60, OS_LOG_TYPE_DEFAULT))
      {
        sub_100475F84(v5[4], (uint64_t)__p);
        int v13 = v19;
        long long v14 = (void **)__p[0];
        unsigned int v15 = [v4 intValue];
        uint64_t v16 = __p;
        if (v13 < 0) {
          uint64_t v16 = v14;
        }
        *(_DWORD *)long long buf = 136315394;
        uint64_t v22 = v16;
        __int16 v23 = 1024;
        unsigned int v24 = v15;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Found HID device %s with location ID %d", buf, 0x12u);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
      }
      uint64_t v11 = v5[4];
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  sub_10003AFB4((uint64_t)v20);
  return v11;
}

void sub_1005CC7F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  sub_10003AFB4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1005CC838(uint64_t a1)
{
  if (qword_1009F8090 != -1) {
    dispatch_once(&qword_1009F8090, &stru_1009B8C08);
  }
  uint64_t v2 = *(void *)(a1 + 32);
  memset(&__p, 0, sizeof(__p));
  sub_1004D2DCC((int64x2_t *)off_1009F8088, v2, 32, &__p, 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1005CC8BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005CC8D8(uint64_t a1, uint64_t a2)
{
  v14[0] = 0;
  v14[1] = 0;
  sub_10003AED0((uint64_t)v14, a1 + 24);
  uint64_t v11 = 0;
  long long v12 = 0;
  uint64_t v13 = 0;
  sub_100040550(&v11, a1 + 120);
  sub_10003AFE8((uint64_t)v14);
  CFNumberRef v4 = qword_100A19F60;
  if (os_log_type_enabled((os_log_t)qword_100A19F60, OS_LOG_TYPE_INFO))
  {
    sub_100474E18(a2, __p);
    uint64_t v5 = v10 >= 0 ? __p : (void **)__p[0];
    int v6 = *(unsigned __int8 *)(a2 + 1296);
    *(_DWORD *)long long buf = 136446466;
    uint64_t v16 = v5;
    __int16 v17 = 1024;
    int v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Device %{public}s reported a USB State changed to %d", buf, 0x12u);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
  int v7 = v11;
  if (v11 != v12)
  {
    do
    {
      (*(void (**)(void, uint64_t))(*(void *)*v7 + 16))(*v7, a2);
      ++v7;
    }
    while (v7 != v12);
    int v7 = v11;
  }
  if (v7)
  {
    long long v12 = v7;
    operator delete(v7);
  }
  return sub_10003AFB4((uint64_t)v14);
}

void sub_1005CCA58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1005CCA94(uint64_t a1, unint64_t a2)
{
  v18[0] = 0;
  v18[1] = 0;
  sub_10003AED0((uint64_t)v18, a1 + 24);
  if (a2)
  {
    int v6 = *(void **)(a1 + 104);
    uint64_t v5 = (uint64_t *)(a1 + 104);
    CFNumberRef v4 = v6;
    if (!v6) {
      goto LABEL_13;
    }
    int v7 = (uint64_t **)(v5 - 1);
    IOHIDManagerRef v8 = v5;
    do
    {
      unint64_t v9 = v4[4];
      BOOL v10 = v9 >= a2;
      if (v9 >= a2) {
        uint64_t v11 = v4;
      }
      else {
        uint64_t v11 = v4 + 1;
      }
      if (v10) {
        IOHIDManagerRef v8 = v4;
      }
      CFNumberRef v4 = (void *)*v11;
    }
    while (*v11);
    if (v8 != v5 && v8[4] <= a2)
    {
      uint64_t v13 = qword_100A19F60;
      if (os_log_type_enabled((os_log_t)qword_100A19F60, OS_LOG_TYPE_DEFAULT))
      {
        sub_100475F84(a2, (uint64_t)__p);
        long long v14 = v17 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)long long buf = 136315138;
        int v20 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Removing HID device %s from map", buf, 0xCu);
        if (v17 < 0) {
          operator delete(__p[0]);
        }
      }
      sub_10004D3B8(v7, v8);
      operator delete(v8);
    }
    else
    {
LABEL_13:
      long long v12 = qword_100A19F60;
      if (os_log_type_enabled((os_log_t)qword_100A19F60, OS_LOG_TYPE_ERROR))
      {
        sub_100475F84(a2, (uint64_t)__p);
        sub_100781184((char *)__p, buf, v12);
      }
    }
  }
  return sub_10003AFB4((uint64_t)v18);
}

void sub_1005CCC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1005CCC48(uint64_t a1, uint64_t a2, __IOHIDDevice *a3)
{
  int v6 = qword_100A19F60;
  if (os_log_type_enabled((os_log_t)qword_100A19F60, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = os_variant_is_recovery();
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "handleIncomingUSBDevice called isBaseSystem %d", buf, 8u);
  }
  int v7 = qword_100A19F60;
  if (a2 && a3)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19F60, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Found USB Device", buf, 2u);
    }
    __n128 bytes = 0uLL;
    if (IOHIDDeviceOpen(a3, 0))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19F60, OS_LOG_TYPE_ERROR)) {
        sub_100781350();
      }
      return;
    }
    long long v55 = 0u;
    memset(v56, 0, sizeof(v56));
    *(_OWORD *)long long buf = 0u;
    long long v54 = 0u;
    CFIndex pReportLength = 77;
    IOReturn Report = IOHIDDeviceGetReport(a3, kIOHIDReportTypeFeature, 52, buf, &pReportLength);
    unint64_t v9 = qword_100A19F60;
    if (Report)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19F60, OS_LOG_TYPE_ERROR)) {
        sub_1007812E8();
      }
      dispatch_time_t v10 = dispatch_time(0, 5000000000);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1005CDD84;
      block[3] = &unk_100997528;
      void block[4] = a1;
      dispatch_after(v10, (dispatch_queue_t)&_dispatch_main_q, block);
      return;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19F60, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int16 v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Successfully got device report", v44, 2u);
    }
    int v37 = *(_DWORD *)&buf[4];
    __int16 v38 = *(_WORD *)&buf[8];
    if (*(_DWORD *)&buf[4] | *(unsigned __int16 *)&buf[8])
    {
      int v34 = *(_DWORD *)&buf[4];
      __int16 v35 = *(_WORD *)&buf[8];
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v33 = 0;
      sub_10004191C(__p, (char *)((unint64_t)buf | 0xD));
      uint64_t v11 = qword_100A19F60;
      BOOL v12 = os_log_type_enabled((os_log_t)qword_100A19F60, OS_LOG_TYPE_DEFAULT);
      if (v12)
      {
        sub_1004A82EC((unsigned __int8 *)&v34, v44);
        if (v46 >= 0) {
          uint64_t v13 = v44;
        }
        else {
          uint64_t v13 = *(unsigned char **)v44;
        }
        long long v14 = __p;
        if (v33 < 0) {
          long long v14 = (void **)__p[0];
        }
        *(_DWORD *)__int16 v40 = 136315394;
        *(void *)&v40[4] = v13;
        __int16 v41 = 2082;
        __int16 v42 = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "BT ADDR %s for device name: %{public}s", v40, 0x16u);
        if (SHIBYTE(v46) < 0) {
          operator delete(*(void **)v44);
        }
      }
      unsigned int v15 = (unsigned __int8 *)sub_1005CD45C(v12, (uint64_t)&v37);
      if (v15)
      {
        sub_1005CD59C(a1, a3, (unint64_t)v15);
        if (sub_1005CD860(a1, a3))
        {
          v15[1296] = 1;
          sub_1005CC8D8(a1, (uint64_t)v15);
LABEL_66:
          if (SHIBYTE(v33) < 0) {
            operator delete(__p[0]);
          }
          return;
        }
        uint64_t v16 = qword_100A19F60;
        if (os_log_type_enabled((os_log_t)qword_100A19F60, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int16 v44 = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Did not find existing link key. Must generate new one", v44, 2u);
        }
      }
      CCRNGStatus v17 = CCRandomGenerateBytes(&bytes, 0x10uLL);
      int v18 = qword_100A19F60;
      if (v17)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19F60, OS_LOG_TYPE_ERROR)) {
          sub_1007812B4();
        }
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_100A19F60, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int16 v44 = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Successfully generated Link Key preparing it to send to device", v44, 2u);
        }
        if (sub_1005CDA90(a1, a3, (int8x16_t *)&bytes))
        {
          char v19 = qword_100A19F60;
          if (os_log_type_enabled((os_log_t)qword_100A19F60, OS_LOG_TYPE_ERROR)) {
            sub_10078122C((uint64_t *)__p, v19);
          }
        }
        else
        {
          __n128 v51 = 0uLL;
          int v52 = 0;
          sub_100600E74(&v51, &bytes, 5u);
          if (!v15)
          {
            if (qword_1009F7F00 != -1) {
              dispatch_once(&qword_1009F7F00, &stru_1009B8C28);
            }
            unsigned int v15 = (unsigned __int8 *)sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v34, 1);
          }
          *(void *)__int16 v40 = 0;
          *(void *)__int16 v44 = 0;
          *(void *)&v44[8] = 0;
          sub_100026C30((uint64_t)v40);
          *(void *)__int16 v44 = *(int *)v40;
          *(void *)&v44[8] = *(__int16 *)&v40[4];
          sub_100476E14((uint64_t)v15, (uint64_t)__p, v44);
          v15[578] = 1;
          sub_100486CBC((uint64_t)v15, 1);
          int v20 = buf[10];
          int v21 = buf[11];
          unsigned int v28 = buf[12];
          uint64_t v31 = 0;
          int valuePtr = 0;
          CFNumberRef Property = (const __CFNumber *)IOHIDDeviceGetProperty(a3, @"ProductID");
          CFNumberRef v23 = (const __CFNumber *)IOHIDDeviceGetProperty(a3, @"VendorID");
          CFNumberRef v24 = (const __CFNumber *)IOHIDDeviceGetProperty(a3, @"VersionNumber");
          if (Property) {
            CFNumberGetValue(Property, kCFNumberIntType, &valuePtr);
          }
          if (v23) {
            CFNumberGetValue(v23, kCFNumberIntType, &v31);
          }
          if (v24) {
            CFNumberGetValue(v24, kCFNumberIntType, (char *)&v31 + 4);
          }
          if (qword_1009F7F00 != -1) {
            dispatch_once(&qword_1009F7F00, &stru_1009B8C28);
          }
          sub_1004AA7FC((uint64_t)off_1009F7EF8, (uint64_t)v15, (v20 << 16) | (v21 << 8) | v28);
          if (qword_1009F7F00 != -1) {
            dispatch_once(&qword_1009F7F00, &stru_1009B8C28);
          }
          uint64_t v25 = (*(uint64_t (**)(void *, unsigned __int8 *, uint64_t))(*(void *)off_1009F7EF8 + 48))(off_1009F7EF8, v15, 1);
          sub_1005CDC08(v25, v15, &v51);
          v15[1296] = 1;
          CFNumberRef v26 = qword_100A19F60;
          if (os_log_type_enabled((os_log_t)qword_100A19F60, OS_LOG_TYPE_DEFAULT))
          {
            sub_100475EE0((uint64_t)v15, (uint64_t)v40);
            CFNumberRef v27 = v43 >= 0 ? v40 : *(unsigned char **)v40;
            *(_DWORD *)__int16 v44 = 136447234;
            *(void *)&void v44[4] = v27;
            *(_WORD *)&v44[12] = 1024;
            *(_DWORD *)&v44[14] = 76;
            __int16 v45 = 1024;
            int v46 = v31;
            __int16 v47 = 1024;
            int v48 = valuePtr;
            __int16 v49 = 1024;
            int v50 = HIDWORD(v31);
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "handleIncomingUSBDevice %{public}s deviceId information: vidSrc 0x%x vid 0x%x pid 0x%x version 0x%x", v44, 0x24u);
            if (v43 < 0) {
              operator delete(*(void **)v40);
            }
          }
          sub_10047C89C((uint64_t)v15, 1, 76, valuePtr, SHIDWORD(v31));
          sub_1005CC8D8(a1, (uint64_t)v15);
          sub_1005CD59C(a1, a3, (unint64_t)v15);
          if (qword_1009F8768 != -1) {
            dispatch_once(&qword_1009F8768, &stru_1009B8C48);
          }
          sub_1006121CC((uint64_t)off_1009F8760, v15);
          sub_100600E48(&v39, &v51);
          nullsub_95(&v39);
          nullsub_95(&v51);
        }
      }
      goto LABEL_66;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19F60, OS_LOG_TYPE_ERROR)) {
      sub_1007811F8();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19F60, OS_LOG_TYPE_ERROR))
  {
    sub_100781384(a2, (uint64_t)a3, v7);
  }
}

void sub_1005CD408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1005CD45C(uint64_t a1, uint64_t a2)
{
  std::string __p = 0;
  unsigned int v15 = 0;
  uint64_t v16 = 0;
  if (qword_1009F8778 != -1) {
    dispatch_once(&qword_1009F8778, &stru_1009B8C68);
  }
  int v3 = sub_100618318(off_1009F8770, (char **)&__p);
  CFNumberRef v4 = (char *)__p;
  if (v3 || __p == v15)
  {
LABEL_4:
    uint64_t v5 = 0;
  }
  else
  {
    int v7 = (char *)__p;
    while (1)
    {
      uint64_t v5 = *(void *)v7;
      int v12 = *(_DWORD *)(*(void *)v7 + 128);
      int v8 = *(unsigned __int16 *)(v5 + 132);
      __int16 v13 = *(_WORD *)(v5 + 132);
      if (v12 == *(_DWORD *)a2 && v8 == *(unsigned __int16 *)(a2 + 4)) {
        break;
      }
      v7 += 8;
      if (v7 == v15) {
        goto LABEL_4;
      }
    }
    dispatch_time_t v10 = qword_100A19F60;
    if (os_log_type_enabled((os_log_t)qword_100A19F60, OS_LOG_TYPE_DEFAULT))
    {
      v11[0] = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Device Already paired", (uint8_t *)v11, 2u);
      CFNumberRef v4 = (char *)__p;
    }
  }
  if (v4)
  {
    unsigned int v15 = v4;
    operator delete(v4);
  }
  return v5;
}

void sub_1005CD580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005CD59C(uint64_t a1, __IOHIDDevice *a2, unint64_t a3)
{
  v28[1] = 0;
  unint64_t v29 = a3;
  v28[0] = 0;
  sub_10003AED0((uint64_t)v28, a1 + 24);
  if (a2 && a3)
  {
    int v6 = IOHIDDeviceGetProperty(a2, @"LocationID");
    if (v6)
    {
      unint64_t v9 = *(void **)(a1 + 104);
      int v8 = (void *)(a1 + 104);
      int v7 = v9;
      if (!v9) {
        goto LABEL_15;
      }
      dispatch_time_t v10 = v8;
      do
      {
        unint64_t v11 = v7[4];
        BOOL v12 = v11 >= a3;
        if (v11 >= a3) {
          __int16 v13 = v7;
        }
        else {
          __int16 v13 = v7 + 1;
        }
        if (v12) {
          dispatch_time_t v10 = v7;
        }
        int v7 = (void *)*v13;
      }
      while (*v13);
      if (v10 != v8 && v10[4] <= a3)
      {
        int v20 = qword_100A19F60;
        if (os_log_type_enabled((os_log_t)qword_100A19F60, OS_LOG_TYPE_ERROR))
        {
          sub_100475F84(a3, (uint64_t)__p);
          int v22 = v27;
          CFNumberRef v23 = (void **)__p[0];
          unsigned int v24 = [v6 intValue];
          uint64_t v25 = __p;
          if (v22 < 0) {
            uint64_t v25 = v23;
          }
          *(_DWORD *)long long buf = 136315394;
          uint64_t v31 = v25;
          __int16 v32 = 1024;
          unsigned int v33 = v24;
          _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Already have a USB HID device %s with location ID %d", buf, 0x12u);
          if (v27 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      else
      {
LABEL_15:
        long long v14 = qword_100A19F60;
        if (os_log_type_enabled((os_log_t)qword_100A19F60, OS_LOG_TYPE_DEFAULT))
        {
          sub_100475F84(a3, (uint64_t)__p);
          int v15 = v27;
          uint64_t v16 = (void **)__p[0];
          unsigned int v17 = [v6 intValue];
          int v18 = __p;
          if (v15 < 0) {
            int v18 = v16;
          }
          *(_DWORD *)long long buf = 136315394;
          uint64_t v31 = v18;
          __int16 v32 = 1024;
          unsigned int v33 = v17;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Adding HID device %s with location ID %d", buf, 0x12u);
          if (v27 < 0) {
            operator delete(__p[0]);
          }
        }
        unsigned int v19 = [v6 intValue];
        __p[0] = &v29;
        *((_DWORD *)sub_1005031E0((uint64_t **)v8 - 1, &v29, (uint64_t)&unk_1007BE9D0, (void **)__p) + 10) = v19;
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19F60, OS_LOG_TYPE_ERROR))
    {
      sub_10078140C();
    }
  }
  return sub_10003AFB4((uint64_t)v28);
}

void sub_1005CD814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  sub_10003AFB4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1005CD860(uint64_t a1, __IOHIDDevice *a2)
{
  CFNumberRef v4 = qword_100A19F60;
  if (os_log_type_enabled((os_log_t)qword_100A19F60, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string __p = 134217984;
    *(void *)&__p[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Seeing if paired device Link Key already exists for iohid ref %p", __p, 0xCu);
  }
  uint64_t v5 = (unsigned __int8 *)sub_1005CC64C(a1, a2);
  if (v5)
  {
    __n128 v15 = 0uLL;
    int v16 = 0;
    sub_100600E3C((uint64_t)&v15);
    if (qword_1009F8778 != -1) {
      dispatch_once(&qword_1009F8778, &stru_1009B8C68);
    }
    if (sub_100618630((uint64_t)off_1009F8770, v5, &v15)) {
      goto LABEL_7;
    }
    int v8 = qword_100A19F60;
    if (os_log_type_enabled((os_log_t)qword_100A19F60, OS_LOG_TYPE_DEFAULT))
    {
      sub_100475EE0((uint64_t)v5, (uint64_t)__p);
      if (v12 >= 0) {
        unint64_t v9 = __p;
      }
      else {
        unint64_t v9 = *(unsigned char **)__p;
      }
      *(_DWORD *)long long buf = 136315138;
      long long v14 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Preparing to send existing Link Key to %s", buf, 0xCu);
      if (v12 < 0) {
        operator delete(*(void **)__p);
      }
    }
    dispatch_time_t v10 = (int8x16_t *)nullsub_95(&v15);
    if (sub_1005CDA90(a1, a2, v10))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19F60, OS_LOG_TYPE_ERROR)) {
        sub_1007814B8();
      }
LABEL_7:
      nullsub_95(&v15);
      return 0;
    }
    nullsub_95(&v15);
  }
  else
  {
    int v7 = qword_100A19F60;
    if (os_log_type_enabled((os_log_t)qword_100A19F60, OS_LOG_TYPE_ERROR)) {
      sub_100781440((uint64_t)a2, v7);
    }
  }
  return 1;
}

void sub_1005CDA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  nullsub_95(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005CDA90(uint64_t a1, IOHIDDeviceRef device, int8x16_t *a3)
{
  int8x16_t v4 = vrev64q_s8(*a3);
  char v12 = 1;
  *(_WORD *)report = 309;
  CFIndex pReportLength = 25;
  int v13 = *(_DWORD *)(a1 + 89);
  __int16 v14 = *(_WORD *)(a1 + 93);
  int8x16_t v15 = vextq_s8(v4, v4, 8uLL);
  uint64_t v5 = IOHIDDeviceSetReport(device, kIOHIDReportTypeFeature, 53, report, 25);
  if (v5)
  {
    uint64_t v6 = v5;
    if (os_log_type_enabled((os_log_t)qword_100A19F60, OS_LOG_TYPE_ERROR)) {
      sub_100781554();
    }
  }
  else
  {
    uint64_t v6 = IOHIDDeviceGetReport(device, kIOHIDReportTypeFeature, 53, report, &pReportLength);
    int v7 = qword_100A19F60;
    if (v6 || pReportLength != 25)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19F60, OS_LOG_TYPE_ERROR)) {
        sub_1007814EC();
      }
    }
    else
    {
      uint64_t v6 = 0;
      if (os_log_type_enabled((os_log_t)qword_100A19F60, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)unint64_t v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Successfully resent Link Key to paired device", v9, 2u);
        return 0;
      }
    }
  }
  return v6;
}

void sub_1005CDC08(uint64_t a1, unsigned __int8 *a2, __n128 *a3)
{
  uint64_t v5 = qword_100A19F60;
  if (os_log_type_enabled((os_log_t)qword_100A19F60, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Attempting To Pair device", (uint8_t *)__p, 2u);
  }
  if (qword_1009F8778 != -1) {
    dispatch_once(&qword_1009F8778, &stru_1009B8C68);
  }
  int v6 = sub_100618730((uint64_t)off_1009F8770, a2, a3, 1);
  int v7 = qword_100A19F60;
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19F60, OS_LOG_TYPE_ERROR)) {
      sub_1007815BC();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19F60, OS_LOG_TYPE_DEFAULT))
  {
    sub_1004A82EC(a2 + 128, __p);
    if (v10 >= 0) {
      int v8 = __p;
    }
    else {
      int v8 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136446210;
    char v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "SUCCESSFULLY PAIRED ADDR: %{public}s", buf, 0xCu);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
}

uint64_t sub_1005CDD84(uint64_t a1)
{
  return sub_1005CB818(*(void *)(a1 + 32));
}

uint64_t sub_1005CDD8C(void *a1, uint64_t a2)
{
  v20[0] = 0;
  v20[1] = 0;
  sub_10003AED0((uint64_t)v20, (uint64_t)(a1 + 3));
  int8x16_t v4 = (void *)a1[15];
  uint64_t v5 = (void *)a1[16];
  int v6 = v4;
  if (v4 != v5)
  {
    while (*v6 != a2)
    {
      if (++v6 == v5)
      {
        int v6 = (void *)a1[16];
        break;
      }
    }
  }
  if (v6 == v5)
  {
    unint64_t v7 = a1[17];
    if ((unint64_t)v5 >= v7)
    {
      uint64_t v9 = v5 - v4;
      if ((unint64_t)(v9 + 1) >> 61) {
        abort();
      }
      uint64_t v10 = v7 - (void)v4;
      uint64_t v11 = v10 >> 2;
      if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
        uint64_t v11 = v9 + 1;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      if (v12) {
        int v13 = (char *)sub_1000405F8((uint64_t)(a1 + 17), v12);
      }
      else {
        int v13 = 0;
      }
      __int16 v14 = &v13[8 * v9];
      int8x16_t v15 = &v13[8 * v12];
      *(void *)__int16 v14 = a2;
      int v8 = v14 + 8;
      unsigned int v17 = (char *)a1[15];
      int v16 = (char *)a1[16];
      if (v16 != v17)
      {
        do
        {
          uint64_t v18 = *((void *)v16 - 1);
          v16 -= 8;
          *((void *)v14 - 1) = v18;
          v14 -= 8;
        }
        while (v16 != v17);
        int v16 = (char *)a1[15];
      }
      a1[15] = v14;
      a1[16] = v8;
      a1[17] = v15;
      if (v16) {
        operator delete(v16);
      }
    }
    else
    {
      void *v5 = a2;
      int v8 = v5 + 1;
    }
    a1[16] = v8;
  }
  return sub_10003AFB4((uint64_t)v20);
}

void sub_1005CDEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1005CDEC8(id a1)
{
}

void sub_1005CDF6C()
{
}

void sub_1005CDF90(id a1)
{
}

void sub_1005CDFD4()
{
}

void sub_1005CDFF8(id a1)
{
}

void sub_1005CE03C()
{
}

void sub_1005CE060(id a1)
{
}

void sub_1005CE0A4()
{
}

void sub_1005CE0C8(id a1)
{
}

void sub_1005CE10C()
{
}

void sub_1005CE130(id a1)
{
}

void sub_1005CE174()
{
}

void *sub_1005CE198(uint64_t a1, uint64_t a2, _xpc_connection_s *a3, uint64_t a4)
{
  uint64_t result = (void *)sub_100056C90(a1, a2, a3, a4);
  *uint64_t result = &off_1009B8D30;
  result[18] = off_1009B8DB8;
  return result;
}

void sub_1005CE1F0(uint64_t a1)
{
  sub_10000C178(a1);

  operator delete();
}

void (*sub_1005CE228(uint64_t a1, int a2))(void *a1, xpc_object_t xdict)
{
  uint64_t result = sub_1005CE368;
  switch(a2)
  {
    case 1:
      return result;
    case 2:
      int8x16_t v4 = (void (*)(void *, xpc_object_t))sub_1005CE7FC;
      goto LABEL_11;
    case 8:
      int8x16_t v4 = (void (*)(void *, xpc_object_t))sub_1005CE864;
      goto LABEL_11;
    case 9:
      int8x16_t v4 = (void (*)(void *, xpc_object_t))sub_1005CEC14;
      goto LABEL_11;
    case 10:
      int8x16_t v4 = (void (*)(void *, xpc_object_t))sub_1005CED6C;
      goto LABEL_11;
    case 11:
      int8x16_t v4 = (void (*)(void *, xpc_object_t))sub_1005CF03C;
      goto LABEL_11;
    case 12:
      int8x16_t v4 = (void (*)(void *, xpc_object_t))sub_1005CF254;
LABEL_11:
      uint64_t result = v4;
      break;
    default:
      uint64_t v5 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_1007815F0(a2, v5);
      }
      uint64_t result = 0;
      break;
  }
  return result;
}

void sub_1005CE368(void *a1, xpc_object_t xdict)
{
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v14 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int8x16_t v4 = sub_100019738(value, "kCBMsgArgName");
  if (sub_1000198BC(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgType") || !v4)
  {
    uint64_t v12 = a1[16];
    if (v12)
    {
      if (qword_1009F8748 != -1) {
        dispatch_once(&qword_1009F8748, &stru_1009B8E60);
      }
      uint64_t v13 = sub_100028CB4((uint64_t)off_1009F8740);
      (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 104))(a1, v12, v13);
    }
    else
    {
      sub_1004F10B0((uint64_t)a1, 2u);
    }
  }
  else
  {
    uint64_t v11 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_100781668((uint64_t)v4, v11);
    }
  }
}

void sub_1005CE7BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, ...)
{
  va_start(va, a17);

  sub_10027E318((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1005CE7FC(uint64_t a1)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, 1);

  sub_1000173FC(a1, 5, 0, 0);
}

void sub_1005CE864(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v37 = 0;
  __int16 v38 = &v37;
  uint64_t v39 = 0x2020000000;
  int v40 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_100019738(value, "kCBMsgArgName");
  xpc_object_t v6 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int v13 = sub_1000198BC(v6, 1, v7, v8, v9, v10, v11, v12, (uint64_t)"kCBMsgArgType");
  *((_DWORD *)v38 + 6) = v13;
  if (v30)
  {
    uint64_t v14 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "ScalablePipeTrace set. Parse metadata", buf, 2u);
    }
  }
  if (v34 == 2 && !*(unsigned char *)(a1 + 85))
  {
    *((_DWORD *)v38 + 6) = 13;
    uint64_t v15 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138543362;
      id v42 = v5;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Failing registration of endpoint \"%{public}@\" due to insufficient entitlements", buf, 0xCu);
    }
  }
  if (*(_DWORD *)(a1 + 80) != 2)
  {
    uint64_t v32 = 0;
    uint64_t v33 = 1;
  }
  int v16 = *((_DWORD *)v38 + 6);
  if (v16 || !v5) {
    goto LABEL_17;
  }
  uint64_t v17 = sub_100019878();
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  void v20[2] = sub_1005CF5F8;
  v20[3] = &unk_1009B8DF8;
  int v22 = &v37;
  uint64_t v23 = a1;
  id v18 = v5;
  id v21 = v18;
  uint64_t v24 = v36;
  uint64_t v25 = v35;
  uint64_t v26 = v34;
  uint64_t v27 = v33;
  uint64_t v28 = v32;
  uint64_t v29 = v31;
  sub_1000197D8(v17, v20);
  if (*((_DWORD *)v38 + 6) != 10)
  {

    int v16 = *((_DWORD *)v38 + 6);
LABEL_17:
    sub_1004F1028(a1, 13, xdict, v16);
    goto LABEL_18;
  }
  unsigned int v19 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138543362;
    id v42 = v18;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Delaying registration of endpoint \"%{public}@\" as it is currently being unregistered", buf, 0xCu);
  }

LABEL_18:
  _Block_object_dispose(&v37, 8);
}

void sub_1005CEBD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35)
{
  _Block_object_dispose((const void *)(v36 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1005CEC14(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000;
  int v14 = 3;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_100019738(value, "kCBMsgArgName");
  if (!v5) {
    goto LABEL_3;
  }
  uint64_t v6 = sub_100019878();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _OWORD v7[2] = sub_1005CF6F0;
  _OWORD v7[3] = &unk_1009A9370;
  uint64_t v9 = &v11;
  uint64_t v10 = a1;
  id v8 = v5;
  sub_1000197D8(v6, v7);
  LODWORD(v6) = *((_DWORD *)v12 + 6);

  if (v6 != 10) {
LABEL_3:
  }
    sub_1004F1028(a1, 14, xdict, *((_DWORD *)v12 + 6));

  _Block_object_dispose(&v11, 8);
}

void sub_1005CED34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1005CED6C(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v22 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int8x16_t v4 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  sub_100019738(value, "kCBMsgArgClientName");
  uint64_t v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
  int v12 = sub_1000198BC(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgPacketsPerSecond");
  if (![(__CFString *)v5 length])
  {

    uint64_t v5 = @"default";
  }
  uint64_t v13 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138543362;
    uint64_t v26 = v5;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "SetLinkRequirementsForPeer received for %{public}@", buf, 0xCu);
  }
  if (!v12 && v4)
  {
    uint64_t v14 = sub_100019878();
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    void v15[2] = sub_1005CF7B8;
    void v15[3] = &unk_1009B8E20;
    uint64_t v18 = a1;
    id v16 = v4;
    uint64_t v19 = v24;
    uint64_t v20 = v23;
    uint64_t v21 = v22;
    uint64_t v5 = v5;
    uint64_t v17 = v5;
    sub_1000197D8(v14, v15);
  }
}

void sub_1005CF000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25)
{
  _Unwind_Resume(a1);
}

void sub_1005CF03C(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v18 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int8x16_t v4 = sub_1002D48BC(value, "kCBMsgArgDeviceUUID");
  if (!sub_1000198BC(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgLatencyInMs") && v4)
  {
    uint64_t v11 = sub_100019878();
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_1005CF830;
    void v12[3] = &unk_1009B75A8;
    uint64_t v14 = a1;
    id v13 = v4;
    uint64_t v15 = v18;
    uint64_t v16 = v20;
    uint64_t v17 = v19;
    sub_1000197D8(v11, v12);
  }
}

void sub_1005CF22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  _Unwind_Resume(a1);
}

unsigned char *sub_1005CF254(uint64_t a1, void *a2)
{
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  unsigned int v13 = 0;
  unint64_t v12 = 0;
  unsigned __int8 v11 = 0;
  uint64_t v10 = 0;
  char v9 = 0;
  sub_10001B8E0(&v9);
  sub_10016F1D8((_DWORD *)&v15 + 1, &v15, (_DWORD *)&v14 + 1, &v14, &v13, 0, &v11, &v12, &v10);
  sub_10001B910(&v9);
  int8x16_t v4 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67110656;
    int v17 = HIDWORD(v15);
    __int16 v18 = 1024;
    int v19 = v15;
    __int16 v20 = 1024;
    int v21 = HIDWORD(v14);
    __int16 v22 = 1024;
    int v23 = v14;
    __int16 v24 = 1024;
    unsigned int v25 = v13;
    __int16 v26 = 1024;
    int v27 = v11;
    __int16 v28 = 2048;
    unint64_t v29 = v12;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PipeStatistics:connected:%d start:%d stop:%d upCount:%d upDuration:%d tech:%d timSpentInThisTransportMS:%llu", buf, 0x30u);
  }
  int64_t v5 = v13;
  if (v11 == 2) {
    int64_t v5 = v13 + v12 / 0x3E8;
  }
  xpc_object_t reply = xpc_dictionary_create_reply(a2);
  uint64_t v7 = reply;
  if (reply)
  {
    xpc_dictionary_set_int64(reply, "kCBLePipeStatisticsTotalTimeSpentUpgraded", v5);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v7);
    xpc_release(v7);
  }
  return sub_10001B8AC(&v9);
}

void sub_1005CF414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

BOOL sub_1005CF434(uint64_t a1, __int16 a2)
{
  return (a2 & 0xFFFE) == 8;
}

void sub_1005CF444(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1009FB180 != -1) {
    dispatch_once(&qword_1009FB180, &stru_1009B8E40);
  }
  uint64_t v3 = qword_1009FB178;
  sub_10004191C(__p, (char *)[*(id *)(a1 + 32) UTF8String]);
  *(void *)(v2 + 128) = sub_1002BAA9C(v3, v2 + 144, (uint64_t)__p, v2 + 56);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1005CF4F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005CF50C(uint64_t a1)
{
  if (*(void *)(a1 + 128))
  {
    uint64_t v2 = sub_100019878();
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    _DWORD v3[2] = sub_1005CF594;
    void v3[3] = &unk_100997528;
    void v3[4] = a1;
    sub_1000197D8(v2, v3);
    *(void *)(a1 + 128) = 0;
  }
}

uint64_t sub_1005CF594(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1009FB180 != -1) {
    dispatch_once(&qword_1009FB180, &stru_1009B8E40);
  }
  uint64_t v2 = qword_1009FB178;

  return sub_1002BAE54(v2, v1 + 144);
}

void sub_1005CF5F8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1009FB180 != -1) {
    dispatch_once(&qword_1009FB180, &stru_1009B8E40);
  }
  uint64_t v3 = qword_1009FB178;
  unint64_t v4 = *(void *)(v2 + 128);
  sub_10004191C(__p, (char *)[*(id *)(a1 + 32) UTF8String]);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = sub_1002BB560(v3, v4, __p, *(_DWORD *)(a1 + 56), *(_DWORD *)(a1 + 64), *(_DWORD *)(a1 + 72), *(void *)(a1 + 80) != 0, *(void *)(a1 + 88) != 0, *(void *)(a1 + 96) != 0);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1005CF6D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005CF6F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1009FB180 != -1) {
    dispatch_once(&qword_1009FB180, &stru_1009B8E40);
  }
  uint64_t v3 = (void *)qword_1009FB178;
  unint64_t v4 = *(void *)(v2 + 128);
  sub_10004191C(__p, (char *)[*(id *)(a1 + 32) UTF8String]);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = sub_1002BC1F0(v3, v4, (char *)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1005CF79C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005CF7B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1009FB180 != -1) {
    dispatch_once(&qword_1009FB180, &stru_1009B8E40);
  }
  uint64_t v3 = qword_1009FB178;
  unint64_t v4 = *(void *)(v2 + 128);
  uint64_t v5 = *(unsigned int *)(a1 + 56);
  int v6 = *(_DWORD *)(a1 + 64);
  int v7 = *(_DWORD *)(a1 + 72);
  uint64_t v8 = *(void **)(a1 + 32);
  char v9 = *(void **)(a1 + 40);

  sub_1002BC744(v3, v4, v8, v5, v6, v7, v9);
}

void sub_1005CF830(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1009FB180 != -1) {
    dispatch_once(&qword_1009FB180, &stru_1009B8E40);
  }
  uint64_t v3 = qword_1009FB178;
  unint64_t v4 = *(void *)(v2 + 128);
  uint64_t v5 = *(void **)(a1 + 32);
  int v6 = *(_DWORD *)(a1 + 48);
  int v7 = *(_DWORD *)(a1 + 56);
  int v8 = *(_DWORD *)(a1 + 64);

  sub_1002BCCE4(v3, v4, v5, v6, v7, v8);
}

void sub_1005CF8A8(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, int a6, int a7, unsigned int a8, int64_t value)
{
  id v16 = a3;
  xpc_object_t v17 = xpc_dictionary_create(0, 0, 0);
  sub_1004F143C(a1, v17, v16);
  if (*(char *)(a2 + 23) >= 0) {
    __int16 v18 = (const char *)a2;
  }
  else {
    __int16 v18 = *(const char **)a2;
  }
  xpc_dictionary_set_string(v17, "kCBMsgArgName", v18);
  xpc_dictionary_set_int64(v17, "kCBMsgArgType", a4);
  xpc_dictionary_set_int64(v17, "kCBLePipeMsgArgPriority", a5);
  xpc_dictionary_set_fd(v17, "kCBLePipeMsgArgSocket", a6);
  xpc_dictionary_set_int64(v17, "kCBLePipeMsgArgReliable", a7 ^ 1u);
  xpc_dictionary_set_int64(v17, "kCBLePipeMsgArgPeerCLVersion", a8);
  xpc_dictionary_set_int64(v17, "kCBLePipeMsgArgPeerCLFeatures", value);
  xpc_dictionary_set_int64(v17, "kCBLePipeMsgArgPeerType", HIDWORD(value));
  unsigned __int8 v20 = 0;
  unsigned int v19 = 0;
  if (qword_1009FB180 != -1) {
    dispatch_once(&qword_1009FB180, &stru_1009B8E40);
  }
  sub_1002C3780(qword_1009FB178, &v20, &v19);
  xpc_dictionary_set_int64(v17, "kCBLePipeMsgArglocalCLVersion", v20);
  xpc_dictionary_set_int64(v17, "kCBLePipeMsgArglocalCLFeatures", v19);
  sub_1000173FC(a1, 15, v17, 1);
}

void sub_1005CFA64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005CFA78(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, int a6, int a7, unsigned int a8, int64_t value)
{
}

void sub_1005CFA88(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, const unsigned __int8 *a6, int a7, unsigned int a8, int64_t value)
{
  id v16 = a3;
  xpc_object_t v17 = xpc_dictionary_create(0, 0, 0);
  sub_1004F143C(a1, v17, v16);
  if (*(char *)(a2 + 23) >= 0) {
    __int16 v18 = (const char *)a2;
  }
  else {
    __int16 v18 = *(const char **)a2;
  }
  xpc_dictionary_set_string(v17, "kCBMsgArgName", v18);
  xpc_dictionary_set_int64(v17, "kCBMsgArgType", a4);
  xpc_dictionary_set_int64(v17, "kCBLePipeMsgArgPriority", a5);
  xpc_dictionary_set_uuid(v17, "kCBLePipeMsgArgSocket", a6);
  xpc_dictionary_set_int64(v17, "kCBLePipeMsgArgReliable", a7 ^ 1u);
  xpc_dictionary_set_int64(v17, "kCBLePipeMsgArgPeerCLVersion", a8);
  xpc_dictionary_set_int64(v17, "kCBLePipeMsgArgPeerCLFeatures", value);
  xpc_dictionary_set_int64(v17, "kCBLePipeMsgArgPeerType", HIDWORD(value));
  unsigned __int8 v20 = 0;
  unsigned int v19 = 0;
  if (qword_1009FB180 != -1) {
    dispatch_once(&qword_1009FB180, &stru_1009B8E40);
  }
  sub_1002C3780(qword_1009FB178, &v20, &v19);
  xpc_dictionary_set_int64(v17, "kCBLePipeMsgArglocalCLVersion", v20);
  xpc_dictionary_set_int64(v17, "kCBLePipeMsgArglocalCLFeatures", v19);
  sub_1000173FC(a1, 15, v17, 1);
}

void sub_1005CFC44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005CFC58(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, const unsigned __int8 *a6, int a7, unsigned int a8, int64_t value)
{
}

void sub_1005CFC68(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  id v9 = a3;
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  sub_1004F143C(a1, v7, v9);
  if (*(char *)(a2 + 23) >= 0) {
    int v8 = (const char *)a2;
  }
  else {
    int v8 = *(const char **)a2;
  }
  xpc_dictionary_set_string(v7, "kCBMsgArgName", v8);
  xpc_dictionary_set_int64(v7, "kCBMsgArgResult", a4);
  sub_1000173FC(a1, 16, v7, 1);
}

void sub_1005CFD28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1005CFD3C(uint64_t a1, uint64_t a2, void *a3, int a4)
{
}

void sub_1005CFD44(uint64_t a1, uint64_t a2, int a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v7 = v6;
  if (*(char *)(a2 + 23) >= 0) {
    int v8 = (const char *)a2;
  }
  else {
    int v8 = *(const char **)a2;
  }
  xpc_dictionary_set_string(v6, "kCBMsgArgName", v8);
  xpc_dictionary_set_int64(v7, "kCBMsgArgResult", a3);

  sub_1000173FC(a1, 13, v7, 1);
}

void sub_1005CFDD8(uint64_t a1, uint64_t a2, int a3)
{
}

void sub_1005CFDE0(uint64_t a1, void *a2)
{
  id v3 = a2;
  CFStringRef v5 = @"kCBMsgArgName";
  id v6 = v3;
  unint64_t v4 = +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];
  sub_100017388(a1, 14, v4);
}

void sub_1005CFE88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005CFEAC(uint64_t a1, void *a2)
{
}

void sub_1005CFEB4(uint64_t a1, uint64_t a2, int a3)
{
  if ((a3 - 2) >= 3)
  {
    if (a3) {
      int v4 = 0;
    }
    else {
      int v4 = 4;
    }
    if (a3 == 1) {
      unsigned int v3 = 5;
    }
    else {
      unsigned int v3 = v4;
    }
  }
  else
  {
    unsigned int v3 = *(_DWORD *)(a1 + 136);
  }
  sub_1004F10B0(a1, v3);
}

void sub_1005CFEE4(uint64_t a1, uint64_t a2, int a3)
{
}

void sub_1005CFEEC(uint64_t a1, void *a2, void *a3, int a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = v8;
  if (a4) {
    uint64_t v10 = 2;
  }
  else {
    uint64_t v10 = 1;
  }
  v13[0] = @"kCBMsgArgName";
  v13[1] = @"kCBMsgArgDeviceUUID";
  v14[0] = v7;
  v14[1] = v8;
  void v13[2] = @"kCBMsgArgState";
  unsigned __int8 v11 = +[NSNumber numberWithLongLong:v10];
  void v14[2] = v11;
  unint64_t v12 = +[NSDictionary dictionaryWithObjects:v14 forKeys:v13 count:3];
  sub_100017388(a1, 17, v12);
}

void sub_1005CFFF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005D0024(uint64_t a1, void *a2, void *a3, int a4)
{
}

uint64_t sub_1005D002C()
{
  return 0;
}

char *sub_1005D0034(uint64_t a1, int a2)
{
  return off_1009B8C88[a2];
}

void sub_1005D0044(id a1)
{
}

void sub_1005D0088()
{
}

void sub_1005D00AC(id a1)
{
}

void sub_1005D00F0()
{
}

uint64_t sub_1005D0114(uint64_t a1)
{
  *(void *)sub_1004C9B7C(a1, "NetworkProviderService", 256) = &off_1009B8E90;
  if (qword_1009FBDB8 != -1) {
    dispatch_once(&qword_1009FBDB8, &stru_1009B8F80);
  }
  sub_1004C9E90(a1, (uint64_t)off_1009FBDB0);
  return a1;
}

void sub_1005D019C(_Unwind_Exception *a1)
{
  sub_1004C9C80(v1);
  _Unwind_Resume(a1);
}

void sub_1005D01B8(uint64_t a1)
{
  sub_1004C9C80(a1);

  operator delete();
}

void sub_1005D01F4(id a1)
{
}

void sub_1005D0238()
{
}

uint64_t sub_1005D025C(uint64_t a1, __int16 a2, uint64_t a3, int *a4, uint64_t a5)
{
  uint64_t v10 = (void *)sub_1002E6D1C(a1, 1953719151);
  void *v10 = &off_1009B8FB0;
  sub_100276204((uint64_t)(v10 + 50), a3, a2, a4);
  *(void *)(a1 + 584) = a5;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 600) = 0;
  *(_DWORD *)(a1 + 616) = 0;
  return a1;
}

void sub_1005D02F0(_Unwind_Exception *a1)
{
  sub_1002E6E4C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1005D0308(void *a1)
{
  *a1 = &off_1009B8FB0;
  if (a1[74]) {
    sub_1005D039C((uint64_t)a1);
  }
  sub_100276208((uint64_t)(a1 + 50));

  return sub_1002E6E4C((uint64_t)a1);
}

void sub_1005D0370(_Unwind_Exception *a1)
{
  sub_100276208(v1 + 400);
  sub_1002E6E4C(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1005D038C(uint64_t a1)
{
  return *(void *)(a1 + 592) != 0;
}

uint64_t sub_1005D039C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 592);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
    if ((result & 1) == 0)
    {
      uint64_t result = *(void *)(a1 + 592);
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  *(void *)(a1 + 592) = 0;
  return result;
}

void sub_1005D0420(void *a1)
{
  sub_1005D0308(a1);

  operator delete();
}

void sub_1005D0458(uint64_t a1, char *__s1, const __CFBoolean *a3)
{
  if (!strcmp(__s1, "kBTAudioMsgPropertyAllowSCOForTBT"))
  {
    CFBooleanGetValue(a3);
    id v6 = *(void (**)(void))(**(void **)(a1 + 584) + 64);
    v6();
  }
  else if (!strcmp(__s1, "kBTAudioMsgPropertyScoSampleRate"))
  {
    unsigned int valuePtr = 8000;
    CFNumberGetValue(a3, kCFNumberIntType, &valuePtr);
    (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 584) + 72))(*(void *)(a1 + 584), a1, valuePtr);
  }
  else if (!strcmp(__s1, "kBTAudioMsgPropertyScoCodecTypeChanged"))
  {
    CFNumberRef number = 0;
    xpc_object_t value = 0;
    CFNumberRef v17 = 0;
    if (CFDictionaryGetValueIfPresent(a3, @"kBTAudioMsgPropertyScoChannelFormat", (const void **)&value))
    {
      if (CFDictionaryGetValueIfPresent(a3, @"kBTAudioMsgPropertyScoSampleRate", (const void **)&number))
      {
        if (CFDictionaryGetValueIfPresent(a3, @"kBTAudioMsgPropertyTransportType", (const void **)&v17))
        {
          LODWORD(v15) = 0;
          uint64_t v16 = 0x1F4000000000;
          CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &v15);
          CFNumberGetValue(number, kCFNumberIntType, (char *)&v16 + 4);
          CFNumberGetValue(v17, kCFNumberIntType, &v16);
          (*(void (**)(void, uint64_t, void, uint64_t, void))(**(void **)(a1 + 584) + 88))(*(void *)(a1 + 584), a1, HIDWORD(v16), 1, v15);
          (*(void (**)(void, uint64_t, BOOL))(**(void **)(a1 + 584) + 96))(*(void *)(a1 + 584), a1, v16 != 0);
          id v7 = qword_100A19E48;
          if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int valuePtr = 67109632;
            int v21 = (int)v15;
            __int16 v22 = 1024;
            *(_DWORD *)int v23 = HIDWORD(v16);
            *(_WORD *)&void v23[4] = 1024;
            *(_DWORD *)&v23[6] = v16;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "propertyDidUpdate codecID:%d, sampleRate:%u advancedTransport:%u", (uint8_t *)&valuePtr, 0x14u);
          }
        }
      }
    }
  }
  else if (!strcmp(__s1, "kBTAudioMsgPropertyExpanseInA2DP"))
  {
    int v8 = CFBooleanGetValue(a3);
    id v9 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int valuePtr = 67109120;
      int v21 = v8 != 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "kBTAudioMsgPropertyExpanseInA2DP: %d", (uint8_t *)&valuePtr, 8u);
    }
    (*(void (**)(void, uint64_t, BOOL))(**(void **)(a1 + 584) + 112))(*(void *)(a1 + 584), a1, v8 != 0);
  }
  else if (!strcmp(__s1, "kBTAudioMsgPropertyCallScreening"))
  {
    int v10 = CFBooleanGetValue(a3);
    unsigned __int8 v11 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int valuePtr = 67109120;
      int v21 = v10 != 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "kBTAudioMsgPropertyCallScreening: %d", (uint8_t *)&valuePtr, 8u);
    }
    (*(void (**)(void, uint64_t, BOOL))(**(void **)(a1 + 584) + 120))(*(void *)(a1 + 584), a1, v10 != 0);
  }
  else if (!strcmp(__s1, "kBTAudioMsgPropertyManualVolumeUpdate"))
  {
    CFNumberRef number = 0;
    xpc_object_t value = 0;
    uint64_t v16 = 0;
    CFNumberRef v17 = 0;
    CFNumberRef v15 = 0;
    int v14 = 0;
    if (CFDictionaryGetValueIfPresent(a3, @"kBTAudioMsgPropertyManualVolumeUpdateNewVolume", (const void **)&v17)) {
      CFNumberGetValue(v17, kCFNumberSInt32Type, (char *)&v16 + 4);
    }
    if (CFDictionaryGetValueIfPresent(a3, @"kBTAudioMsgPropertyManualVolumeUpdateCurrentVolume", (const void **)&value))
    {
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &v16);
    }
    if (CFDictionaryGetValueIfPresent(a3, @"kBTAudioMsgPropertyManualVolumeUpdateRampInProgress", (const void **)&v15))
    {
      CFNumberGetValue(v15, kCFNumberSInt32Type, &v14);
    }
    if (CFDictionaryGetValueIfPresent(a3, @"kBTAudioMsgPropertyManualVolumeUpdateCurrentAudioCategory", (const void **)&number))
    {
      id v12 = [(__CFNumber *)number copy];
    }
    else
    {
      id v12 = 0;
    }
    unsigned int v13 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int valuePtr = 67109890;
      int v21 = v16;
      __int16 v22 = 2112;
      *(void *)int v23 = v12;
      *(_WORD *)&v23[8] = 1024;
      int v24 = BYTE4(v16);
      __int16 v25 = 1024;
      int v26 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Manual Volume update received currentVolume: %d audioCategory %@ newVolume %d isRampInProgress %d", (uint8_t *)&valuePtr, 0x1Eu);
    }
    (*(void (**)(void, uint64_t, void, id, void, BOOL))(**(void **)(a1 + 584) + 104))(*(void *)(a1 + 584), a1, v16, v12, HIDWORD(v16), v14 != 0);
  }
  else
  {
    sub_1002E93B0((uint64_t *)a1, __s1, a3);
  }
}

void sub_1005D0A78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005D0A90(uint64_t a1, int a2, CFDictionaryRef theDict)
{
  if (a2 == 11)
  {
    xpc_object_t value = 0;
    CFNumberRef v8 = 0;
    CFNumberRef number = 0;
    uint64_t valuePtr = 0;
    unsigned int v6 = 8000;
    if (CFDictionaryGetValueIfPresent(theDict, @"kBTAudioMsgPropertyScoDataSource", (const void **)&value)) {
      CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, (char *)&valuePtr + 4);
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"kBTAudioMsgPropertyScoRouteReason", (const void **)&number)) {
      CFNumberGetValue(number, kCFNumberIntType, &valuePtr);
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"kBTAudioMsgPropertyScoSampleRate", (const void **)&v8))
    {
      CFNumberGetValue(v8, kCFNumberIntType, &v6);
      uint64_t v5 = v6;
    }
    else
    {
      uint64_t v5 = 8000;
    }
    (*(void (**)(void, uint64_t, void, void, uint64_t))(**(void **)(a1 + 584) + 48))(*(void *)(a1 + 584), a1, HIDWORD(valuePtr), valuePtr, v5);
  }
  else
  {
    sub_1002E9954(a1, a2);
  }
}

uint64_t sub_1005D0BB8(uint64_t a1)
{
  return (***(uint64_t (****)(void, uint64_t))(a1 + 584))(*(void *)(a1 + 584), a1);
}

uint64_t sub_1005D0BE4(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 584) + 8))(*(void *)(a1 + 584), a1);
}

uint64_t sub_1005D0C10(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 584) + 16))(*(void *)(a1 + 584), a1);
}

uint64_t sub_1005D0C3C(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 584) + 32))(*(void *)(a1 + 584), a1);
}

uint64_t sub_1005D0C68(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 584) + 40))(*(void *)(a1 + 584), a1);
}

uint64_t sub_1005D0C94(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 584) + 24))(*(void *)(a1 + 584), a1);
}

uint64_t sub_1005D0CC8(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 584) + 80))(*(void *)(a1 + 584), a1);
}

uint64_t sub_1005D0CF4(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 584) + 128))(*(void *)(a1 + 584), a1);
}

__n128 sub_1005D0D20(uint64_t a1, __n128 *a2)
{
  __n128 result = *(__n128 *)(a1 + 600);
  a2[1].n128_u32[0] = *(_DWORD *)(a1 + 616);
  *a2 = result;
  return result;
}

double sub_1005D0D38(uint64_t a1)
{
  *(_DWORD *)(a1 + 616) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 600) = 0u;
  return result;
}

uint64_t sub_1005D0D4C(uint64_t a1, int a2)
{
  uint64_t v4 = a1 + 400;
  unsigned __int8 v5 = sub_10027676C(a1 + 400);
  ++*(_DWORD *)(a1 + 600);
  if (v5 != a2 && a2 != 0 && v5 != 0) {
    ++*(_DWORD *)(a1 + 608);
  }
  uint64_t result = sub_10027672C(v4);
  if (result) {
    *(unsigned char *)(a1 + 616) = 1;
  }
  return result;
}

uint64_t sub_1005D0DC4(uint64_t result)
{
  return result;
}

uint64_t sub_1005D0DD4(uint64_t result)
{
  return result;
}

void sub_1005D0DE4(uint64_t a1, int a2, int a3)
{
  int valuePtr = a3;
  *(_OWORD *)keys = *(_OWORD *)off_1009B90C0;
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  CFNumberRef v6 = v5;
  id v7 = &kCFBooleanTrue;
  if (!a2) {
    id v7 = &kCFBooleanFalse;
  }
  values[0] = *(void **)v7;
  values[1] = v5;
  CFDictionaryRef v8 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  sub_1002E87D0(a1, "kBTAudioMsgPropertyScoIsEnabled", v8);
  CFRelease(v6);
  CFRelease(v8);
}

void sub_1005D0EE4(uint64_t a1, int a2)
{
}

void sub_1005D0EF4(uint64_t a1, int a2)
{
}

void sub_1005D0F04(uint64_t a1, int a2)
{
}

void sub_1005D0F14(uint64_t a1, int a2)
{
}

void sub_1005D0F24(uint64_t a1, int a2)
{
}

void sub_1005D0F34(uint64_t a1, int a2)
{
}

void sub_1005D0F44(uint64_t a1, int a2)
{
}

void sub_1005D0F54(uint64_t a1, int a2)
{
}

void sub_1005D0F64(uint64_t a1, int a2)
{
}

void sub_1005D0F74(uint64_t a1, int a2)
{
}

void sub_1005D0F84(uint64_t a1, int a2)
{
}

void sub_1005D0F94(uint64_t a1, int a2)
{
}

void sub_1005D0FA4(uint64_t a1, int a2)
{
}

void sub_1005D0FB4(uint64_t a1, int a2)
{
  uint64_t v4 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "setUWBSStereoSupport: %d", (uint8_t *)v5, 8u);
  }
  sub_1002E83A4(a1, "kBTAudioMsgPropertyUWBSStereoSupport", a2);
}

void sub_1005D1078(uint64_t a1, int a2)
{
  uint64_t v4 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "setIncompatibleHidConnected: %d", (uint8_t *)v5, 8u);
  }
  sub_1002E83A4(a1, "kBTAudioMsgPropertyIncompatibleHidConnected", a2);
}

void sub_1005D113C(uint64_t a1, int a2)
{
}

void sub_1005D114C(uint64_t a1, int a2)
{
}

void sub_1005D115C(uint64_t a1, int a2)
{
}

void sub_1005D116C(uint64_t a1, int a2)
{
}

void sub_1005D117C(uint64_t a1, int a2)
{
}

void sub_1005D118C(uint64_t a1, int a2)
{
}

void sub_1005D119C(uint64_t a1, int a2)
{
}

uint64_t sub_1005D11AC()
{
  return 0;
}

void sub_1005D11B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 134217984;
    uint64_t v6 = a3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "HFPAudioDevice readHandler called on data of size %lu", (uint8_t *)&v5, 0xCu);
  }
}

uint64_t sub_1005D1258(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 592);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

void sub_1005D1288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  if (a7 > 129)
  {
    if ((a7 - 255) < 2 || a7 == 130) {
      goto LABEL_9;
    }
  }
  else
  {
    if ((a7 - 127) < 2) {
      goto LABEL_9;
    }
    if (a7 == 129)
    {
      if (_os_feature_enabled_impl())
      {
        uint64_t v7 = sub_100035F54();
        if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 328))(v7)) {
          operator new();
        }
      }
LABEL_9:
      operator new();
    }
  }
  operator new();
}

void sub_1005D1410()
{
}

void sub_1005D144C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 592);
  if (v2
    && (*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2)
    && ((*(uint64_t (**)(void))(**(void **)(a1 + 592) + 24))(*(void *)(a1 + 592)) & 1) == 0)
  {
    sub_1002B8298(*(pthread_t **)(a1 + 592));
    uint64_t v4 = *(void (**)(void))(**(void **)(a1 + 592) + 32);
    v4();
  }
  else
  {
    unsigned int v3 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 592);
      uint64_t v6 = "Doesn't";
      if (v5)
      {
        if ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 64))(v5)) {
          uint64_t v6 = "Does";
        }
        uint64_t v8 = *(void *)(a1 + 592);
        uint64_t v7 = "Not Running";
        if (v8)
        {
          if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 24))(v8)) {
            uint64_t v7 = "Running";
          }
        }
      }
      else
      {
        uint64_t v7 = "Not Running";
      }
      int v9 = 136315394;
      int v10 = v6;
      __int16 v11 = 2080;
      id v12 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Sendthread %s have an associated connection handle, Thread already %s: not starting", (uint8_t *)&v9, 0x16u);
    }
  }
}

uint64_t sub_1005D1664(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 592);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void *sub_1005D1694(uint64_t a1)
{
  uint64_t result = (void *)sub_100283C88(a1, 17);
  *uint64_t result = &off_1009B90E0;
  result[32] = 0;
  result[33] = 0;
  return result;
}

uint64_t sub_1005D16D0(void *a1)
{
  *a1 = &off_1009B90E0;
  uint64_t v2 = (std::__shared_weak_count *)a1[33];
  if (v2) {
    sub_10008A294(v2);
  }

  return sub_100283DC8((uint64_t)a1);
}

void sub_1005D1730(void *a1)
{
  sub_1005D16D0(a1);

  operator delete();
}

uint64_t sub_1005D1768()
{
  return 0;
}

uint64_t sub_1005D1770()
{
  return 0;
}

uint64_t sub_1005D1778(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 256);
  if (v2)
  {
    sub_10036EAFC(v2);
    unsigned int v3 = *(std::__shared_weak_count **)(a1 + 264);
    *(void *)(a1 + 256) = 0;
    *(void *)(a1 + 264) = 0;
    if (v3) {
      sub_10008A294(v3);
    }
  }
  return 0;
}

uint64_t sub_1005D17B8(uint64_t a1, uint64_t a2)
{
  char v12 = 0;
  sub_10001B8E0(&v12);
  uint64_t v3 = sub_100163F78(2, 8, a2 + 128, 15, (uint64_t)sub_1005D18B8, (uint64_t (*)(uint64_t (*)(int *, unsigned int)))sub_1005D1980, (void (*)(void))sub_1005D19E4, (uint64_t)sub_1005D1A30, (uint64_t)sub_1005D1AB4, (uint64_t)sub_1005D1B18);
  if (v3)
  {
    uint64_t v4 = qword_100A1A000;
    if (os_log_type_enabled((os_log_t)qword_100A1A000, OS_LOG_TYPE_ERROR)) {
      sub_1007816E0(v3, v4, v5, v6, v7, v8, v9, v10);
    }
    uint64_t v3 = 305;
  }
  sub_10001B8AC(&v12);
  return v3;
}

void sub_1005D18A4(_Unwind_Exception *a1)
{
  sub_10001B8AC((unsigned char *)(v1 - 17));
  _Unwind_Resume(a1);
}

void sub_1005D18B8(__int16 a1, int *a2, uint64_t a3)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009B9138);
  }
  int v7 = *a2;
  __int16 v8 = *((_WORD *)a2 + 2);
  unint64_t v6 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v7, 1);
  if (qword_1009FBDA8 != -1) {
    dispatch_once(&qword_1009FBDA8, &stru_1009B9158);
  }
  sub_1005D1C38((uint64_t)off_1009FBDA0, v6, a1, a3);
}

uint64_t sub_1005D1980(uint64_t a1)
{
  if (qword_1009FBDA8 != -1) {
    dispatch_once(&qword_1009FBDA8, &stru_1009B9158);
  }
  uint64_t v2 = off_1009FBDA0;

  return sub_1005D1D44(v2, a1);
}

uint64_t sub_1005D19E4()
{
  if (qword_1009FBDA8 != -1) {
    dispatch_once(&qword_1009FBDA8, &stru_1009B9158);
  }
  sub_1005D1DD8((uint64_t)off_1009FBDA0);
  return 0;
}

uint64_t sub_1005D1A30(const void *a1, unsigned int a2)
{
  if (qword_1009FBDA8 != -1) {
    dispatch_once(&qword_1009FBDA8, &stru_1009B9158);
  }
  uint64_t v4 = *((void *)off_1009FBDA0 + 32);
  if (!v4) {
    return 3400;
  }

  return sub_10036EE7C(v4, a1, a2);
}

pthread_cond_t *sub_1005D1AB4()
{
  if (qword_1009FBDA8 != -1) {
    dispatch_once(&qword_1009FBDA8, &stru_1009B9158);
  }
  uint64_t result = (pthread_cond_t *)*((void *)off_1009FBDA0 + 32);
  if (result)
  {
    return (pthread_cond_t *)sub_10036EE08(result);
  }
  return result;
}

uint64_t sub_1005D1B18(int a1)
{
  if (qword_1009FBDA8 != -1) {
    dispatch_once(&qword_1009FBDA8, &stru_1009B9158);
  }
  uint64_t v2 = off_1009FBDA0;
  uint64_t v3 = sub_1004BE238(off_1009FBDA0, a1);

  return sub_1004BE538((uint64_t)v2, v3, 0);
}

uint64_t sub_1005D1BA0(void *a1, unint64_t a2)
{
  unsigned int v2 = sub_1004BE120(a1, a2);
  char v12 = 0;
  sub_10001B8E0(&v12);
  uint64_t v3 = sub_100164158(v2);
  if (v3)
  {
    uint64_t v4 = qword_100A1A000;
    if (os_log_type_enabled((os_log_t)qword_100A1A000, OS_LOG_TYPE_ERROR)) {
      sub_10078174C(v3, v4, v5, v6, v7, v8, v9, v10);
    }
    uint64_t v3 = 306;
  }
  sub_10001B8AC(&v12);
  return v3;
}

void sub_1005D1C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_1005D1C38(uint64_t a1, unint64_t a2, __int16 a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v7 = qword_100A1A000;
    if (os_log_type_enabled((os_log_t)qword_100A1A000, OS_LOG_TYPE_ERROR)) {
      sub_1007816E0(a4, v7, v8, v9, v10, v11, v12, v13);
    }
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009B9178);
    }
    int v14 = sub_1004E2340((uint64_t)off_1009F8068, a4, 20000);
    sub_1004BD6C8(a1, a2, v14);
  }
  sub_1004BE028(a1, a2, a3);
  sub_1004BD6C8(a1, a2, 0);
}

uint64_t sub_1005D1D44(void *a1, uint64_t a2)
{
  uint64_t v9 = 0;
  sub_100510DE4((unsigned int *)&v9 + 1, (unsigned int *)&v9, a1 + 1, &v10);
  long long v4 = v10;
  long long v10 = 0uLL;
  uint64_t v5 = (std::__shared_weak_count *)a1[33];
  *((_OWORD *)a1 + 16) = v4;
  if (v5)
  {
    sub_10008A294(v5);
    if (*((void *)&v10 + 1)) {
      sub_10008A294(*((std::__shared_weak_count **)&v10 + 1));
    }
  }
  uint64_t v6 = sub_10036E55C(a1[32], a2);
  if (v6)
  {
    uint64_t v7 = (std::__shared_weak_count *)a1[33];
    a1[32] = 0;
    a1[33] = 0;
    if (v7) {
      sub_10008A294(v7);
    }
  }
  return v6;
}

uint64_t sub_1005D1DD8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 256);
  if (v2)
  {
    sub_10036EAFC(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 264);
    *(void *)(a1 + 256) = 0;
    *(void *)(a1 + 264) = 0;
    if (v3) {
      sub_10008A294(v3);
    }
  }
  return 0;
}

void sub_1005D1E18(id a1)
{
}

void sub_1005D1E5C()
{
}

void sub_1005D1E80(id a1)
{
}

void sub_1005D1EE8()
{
}

void sub_1005D1F0C(id a1)
{
}

void sub_1005D1F50()
{
}

uint64_t sub_1005D1F74(uint64_t a1)
{
  uint64_t result = sub_100283C88(a1, 16);
  *(void *)uint64_t result = off_1009B91A8;
  *(void *)(result + 264) = 0;
  *(void *)(result + 272) = 0;
  *(void *)(result + 256) = &off_1009B9218;
  *(_DWORD *)(result + 280) = 0;
  return result;
}

uint64_t sub_1005D1FD4(void *a1)
{
  *a1 = off_1009B91A8;
  a1[32] = &off_1009B9218;
  uint64_t v2 = (std::__shared_weak_count *)a1[34];
  if (v2) {
    sub_10008A294(v2);
  }

  return sub_100283DC8((uint64_t)a1);
}

void sub_1005D2054(void *a1)
{
  sub_1005D1FD4(a1);

  operator delete();
}

uint64_t sub_1005D208C(uint64_t a1)
{
  long long v11 = off_1009B9238;
  char v10 = 0;
  sub_10001B8E0(&v10);
  int v2 = sub_100164C7C((uint64_t)sub_1005D21F4, (uint64_t)sub_1005D2270, (uint64_t)&off_1009B9248, (uint64_t)sub_1005D22C8, (uint64_t)&off_1009B9258, (uint64_t)&v11, 1, 13, 256000, 1);
  sub_10001B910(&v10);
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A000, OS_LOG_TYPE_ERROR)) {
      sub_1007817FC();
    }
    uint64_t v3 = 1;
  }
  else
  {
    unsigned __int8 v9 = 0;
    __int16 v8 = 0;
    uint64_t v4 = sub_10003FFD4();
    sub_1004E9968(v4 + 248, a1 + 256);
    uint64_t v5 = sub_10003FFD4();
    uint64_t v6 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, char *, __int16 *))(*(void *)v5 + 24))(v5, &v9, (char *)&v8 + 1, &v8);
    sub_1005D2320(v6, v9, HIBYTE(v8), v8);
    uint64_t v3 = 0;
  }
  sub_10001B8AC(&v10);
  return v3;
}

void sub_1005D21DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_1005D21F4(unsigned int a1, int *a2, int a3)
{
  if (qword_1009FBDB8 != -1) {
    dispatch_once(&qword_1009FBDB8, &stru_1009B9268);
  }
  uint64_t v6 = off_1009FBDB0;

  sub_1005D270C(v6, a2, a1, a3);
}

void sub_1005D2270(unsigned int a1)
{
  uint64_t v1 = sub_1001641E0(a1, 0);
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = qword_100A1A000;
    if (os_log_type_enabled((os_log_t)qword_100A1A000, OS_LOG_TYPE_ERROR)) {
      sub_100781830(v2, v3, v4, v5, v6, v7, v8, v9);
    }
  }
}

void sub_1005D22C8(unsigned int a1)
{
  uint64_t v1 = sub_100164228(a1, 0);
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = qword_100A1A000;
    if (os_log_type_enabled((os_log_t)qword_100A1A000, OS_LOG_TYPE_ERROR)) {
      sub_10078189C(v2, v3, v4, v5, v6, v7, v8, v9);
    }
  }
}

unsigned char *sub_1005D2320(uint64_t a1, int a2, unsigned int a3, unsigned int a4)
{
  if (a2)
  {
    if (a4)
    {
      unsigned int v4 = a4 - a3;
      if (a4 < a3) {
        unsigned int v4 = 0;
      }
      unsigned int v5 = 255 * v4 / a4;
    }
    else
    {
      LOBYTE(v5) = -1;
    }
  }
  else
  {
    LOBYTE(v5) = 0;
  }
  char v8 = 0;
  sub_10001B8E0(&v8);
  int v7 = 0;
  sub_1001653F0(&v7);
  sub_10024E3E0(v7, v5);
  return sub_10001B8AC(&v8);
}

void sub_1005D239C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_1005D23B0(uint64_t a1)
{
  uint64_t v2 = sub_10003FFD4();
  sub_1004E9F88(v2 + 248, a1 + 256);
  char v5 = 0;
  sub_10001B8E0(&v5);
  if (sub_10016415C(8))
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A000, OS_LOG_TYPE_ERROR)) {
      sub_100781908();
    }
    uint64_t v3 = 1;
  }
  else
  {
    uint64_t v3 = 0;
  }
  sub_10001B8AC(&v5);
  return v3;
}

void sub_1005D2440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_1005D2454(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 264);
  if (v2)
  {
    sub_10036EAFC(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 272);
    *(void *)(a1 + 264) = 0;
    *(void *)(a1 + 272) = 0;
    if (v3) {
      sub_10008A294(v3);
    }
  }
  *(_DWORD *)(a1 + 280) = 0;
  return 0;
}

unsigned char *sub_1005D249C(uint64_t a1, int a2, unsigned int a3, unsigned int a4)
{
  char v4 = a2;
  uint64_t result = sub_1005D2320(a1, a2, a3, a4);
  if ((v4 & 1) == 0) {
    operator new();
  }
  return result;
}

unsigned char *sub_1005D2534(uint64_t a1, int a2, unsigned int a3, unsigned int a4)
{
  return sub_1005D249C(a1 - 256, a2, a3, a4);
}

uint64_t sub_1005D253C(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = 0;
  long long v12 = 0u;
  memset(v11, 0, sizeof(v11));
  long long v9 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v7 = 0u;
  *(_OWORD *)char v8 = 0u;
  long long v5 = 0u;
  *(_OWORD *)uint64_t v6 = 0u;
  sub_1006161E0((uint64_t)&v5 + 1);
  BYTE2(v6[0]) = 0;
  BYTE4(v6[0]) = 0;
  BYTE2(v8[0]) = 0;
  BYTE4(v8[0]) = 0;
  DWORD1(v11[1]) = 0;
  long long v7 = 0uLL;
  v6[1] = 0;
  LOBYTE(v8[0]) = 0;
  long long v9 = 0uLL;
  v8[1] = 0;
  LOBYTE(__p[0]) = 0;
  memset(v11, 0, 19);
  __p[1] = 0;
  BYTE8(v11[1]) = 1;
  BYTE2(v13) = 0;
  *(void *)((char *)&v11[1] + 14) = 0;
  *(void *)((char *)&v11[1] + 9) = 0;
  long long v12 = 0uLL;
  *((void *)&v11[2] + 1) = 0;
  LOBYTE(v13) = 0;
  LODWORD(a2) = sub_1004783B8(a2, (uint64_t)&v5);
  int v3 = v12;
  if (SHIBYTE(v11[0]) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(v8[1]);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(v6[1]);
  }
  if (v3) {
    a2 = a2;
  }
  else {
    a2 = 0;
  }
  nullsub_95((char *)&v5 + 1);
  return a2;
}

void sub_1005D2674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1005D2690()
{
  return 305;
}

BOOL sub_1005D2698(void *a1, unint64_t a2)
{
  char v7 = 0;
  sub_10001B8E0(&v7);
  unsigned int v4 = sub_1004BE120(a1, a2);
  BOOL v5 = sub_100164158(v4) != 0;
  sub_10001B8AC(&v7);
  return v5;
}

void sub_1005D26F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_1005D270C(void *a1, int *a2, unsigned int a3, int a4)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009B9288);
  }
  int v18 = *a2;
  __int16 v19 = *((_WORD *)a2 + 2);
  uint64_t v8 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v18, 1);
  if (sub_1004BDDAC((uint64_t)a1, v8)) {
    sub_1004BD554(a1, v8);
  }
  uint64_t v9 = sub_100163EB0(a3, a4, (uint64_t)sub_1005D2880, (uint64_t (*)(uint64_t (*)(int *, unsigned int)))sub_1005D2948, (uint64_t)sub_1005D29AC, (uint64_t)sub_1005D29F8, (uint64_t)sub_1005D2A7C, (uint64_t)sub_1005D2AE0, 0);
  if (v9)
  {
    uint64_t v10 = v9;
    long long v11 = qword_100A1A000;
    if (os_log_type_enabled((os_log_t)qword_100A1A000, OS_LOG_TYPE_ERROR)) {
      sub_10078193C(v10, v11, v12, v13, v14, v15, v16, v17);
    }
  }
}

void sub_1005D2880(__int16 a1, int *a2, uint64_t a3)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009B9288);
  }
  int v7 = *a2;
  __int16 v8 = *((_WORD *)a2 + 2);
  unint64_t v6 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v7, 1);
  if (qword_1009FBDB8 != -1) {
    dispatch_once(&qword_1009FBDB8, &stru_1009B9268);
  }
  sub_1005D2B4C((uint64_t)off_1009FBDB0, v6, a1, a3);
}

uint64_t sub_1005D2948(uint64_t a1)
{
  if (qword_1009FBDB8 != -1) {
    dispatch_once(&qword_1009FBDB8, &stru_1009B9268);
  }
  uint64_t v2 = off_1009FBDB0;

  return sub_1005D2DEC((uint64_t)v2, a1);
}

uint64_t sub_1005D29AC()
{
  if (qword_1009FBDB8 != -1) {
    dispatch_once(&qword_1009FBDB8, &stru_1009B9268);
  }
  sub_1005D2F04((uint64_t)off_1009FBDB0);
  return 0;
}

uint64_t sub_1005D29F8(const void *a1, unsigned int a2)
{
  if (qword_1009FBDB8 != -1) {
    dispatch_once(&qword_1009FBDB8, &stru_1009B9268);
  }
  uint64_t v4 = *((void *)off_1009FBDB0 + 33);
  if (!v4) {
    return 3402;
  }

  return sub_10036EE7C(v4, a1, a2);
}

pthread_cond_t *sub_1005D2A7C()
{
  if (qword_1009FBDB8 != -1) {
    dispatch_once(&qword_1009FBDB8, &stru_1009B9268);
  }
  uint64_t result = (pthread_cond_t *)*((void *)off_1009FBDB0 + 33);
  if (result)
  {
    return (pthread_cond_t *)sub_10036EE08(result);
  }
  return result;
}

void sub_1005D2AE0(int a1)
{
  if (qword_1009FBDB8 != -1) {
    dispatch_once(&qword_1009FBDB8, &stru_1009B9268);
  }
  uint64_t v2 = off_1009FBDB0;

  sub_1005D2CD0(v2, a1);
}

void sub_1005D2B4C(uint64_t a1, unint64_t a2, __int16 a3, uint64_t a4)
{
  if (a4)
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A000, OS_LOG_TYPE_ERROR)) {
      sub_1007819DC();
    }
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009B92A8);
    }
    int v7 = sub_1004E2340((uint64_t)off_1009F8068, a4, 20000);
    sub_1004BD6C8(a1, a2, v7);
  }
  if (!*(unsigned char *)(*(void *)(a1 + 264) + 24976) && sub_1005D253C(a1, a2))
  {
    uint64_t v9 = qword_100A1A000;
    if (os_log_type_enabled((os_log_t)qword_100A1A000, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Activating Parrot hack", v10, 2u);
    }
    *(unsigned char *)(*(void *)(a1 + 264) + 24976) = 1;
  }
  sub_1004BE028(a1, a2, a3);
  sub_1004BD6C8(a1, a2, 0);
}

void sub_1005D2CD0(void *a1, int a2)
{
  uint64_t v3 = sub_1004BE238(a1, a2);
  sub_1004BE538((uint64_t)a1, v3, 0);
  uint64_t v4 = a1[33];
  if (v4 && *(unsigned char *)(v4 + 24976))
  {
    std::string __p = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v5 = sub_1004BDCF8((uint64_t)a1, &__p);
    unint64_t v6 = (uint64_t *)__p;
    int v7 = v12;
    if (__p == v12) {
      goto LABEL_7;
    }
    char v8 = 0;
    do
    {
      uint64_t v5 = sub_1005D253C(v5, *v6);
      v8 |= v5;
      ++v6;
    }
    while (v6 != v7);
    if ((v8 & 1) == 0)
    {
LABEL_7:
      uint64_t v9 = qword_100A1A000;
      if (os_log_type_enabled((os_log_t)qword_100A1A000, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Deactivating Parrot hack", (uint8_t *)&v10, 2u);
      }
      *(unsigned char *)(a1[33] + 24976) = 0;
    }
    if (__p)
    {
      uint64_t v12 = (uint64_t *)__p;
      operator delete(__p);
    }
  }
}

void sub_1005D2DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005D2DEC(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 280);
  uint64_t v4 = *(void *)(a1 + 264);
  if (v3)
  {
    uint64_t v5 = sub_10036ECB0(v4);
    if (!v5) {
      goto LABEL_14;
    }
    return v5;
  }
  int v7 = (_OWORD *)(a1 + 264);
  if (v4)
  {
    char v8 = qword_100A1A000;
    if (os_log_type_enabled((os_log_t)qword_100A1A000, OS_LOG_TYPE_FAULT)) {
      sub_100781A10(v8);
    }
  }
  unsigned int v15 = 2;
  unsigned int v16 = 1;
  sub_100510DE4(&v16, &v15, (void *)(a1 + 8), &v17);
  long long v9 = v17;
  long long v17 = 0uLL;
  __int16 v10 = *(std::__shared_weak_count **)(a1 + 272);
  *int v7 = v9;
  if (v10)
  {
    sub_10008A294(v10);
    if (*((void *)&v17 + 1)) {
      sub_10008A294(*((std::__shared_weak_count **)&v17 + 1));
    }
    uint64_t v11 = *(void *)v7;
    if (*(void *)v7) {
      goto LABEL_11;
    }
    return 3401;
  }
  uint64_t v11 = v9;
  if (!(void)v9) {
    return 3401;
  }
LABEL_11:
  uint64_t v12 = sub_10036E55C(v11, a2);
  if (!v12)
  {
LABEL_14:
    uint64_t v5 = 0;
    ++*(_DWORD *)(a1 + 280);
    return v5;
  }
  uint64_t v5 = v12;
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 272);
  *(void *)int v7 = 0;
  *(void *)(a1 + 272) = 0;
  if (v13) {
    sub_10008A294(v13);
  }
  return v5;
}

uint64_t sub_1005D2F04(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 280);
  uint64_t v3 = *(void *)(a1 + 264);
  *(_DWORD *)(a1 + 280) = --v2;
  if (v2)
  {
    sub_10036ED54(v3);
  }
  else
  {
    sub_10036EAFC(v3);
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 272);
    *(void *)(a1 + 264) = 0;
    *(void *)(a1 + 272) = 0;
    if (v4) {
      sub_10008A294(v4);
    }
  }
  return 0;
}

uint64_t sub_1005D2F5C()
{
  return 3;
}

uint64_t sub_1005D2F64()
{
  return 0;
}

void sub_1005D2F6C(id a1)
{
}

void sub_1005D2FF8()
{
}

void sub_1005D301C(id a1)
{
}

void sub_1005D3060()
{
}

void sub_1005D3084(id a1)
{
}

void sub_1005D30C8()
{
}

void *sub_1005D30EC(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t result = (void *)sub_1004EC10C(a1, a2, a3);
  *uint64_t result = &off_1009B92D8;
  return result;
}

void sub_1005D3120(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  if (!a3)
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
      sub_100781A94();
    }
    return;
  }
  uint64_t v5 = *a2;
  if (!*(void *)(a1 + 216))
  {
    __int16 v10 = qword_100A1A018;
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
      sub_10074BEC8(v5, v10, v11, v12, v13, v14, v15, v16);
    }
    return;
  }
  int v7 = (void *)(a1 + 192);
  if (*a2 > 0xBFu)
  {
    if (*a2 > 0xFBu)
    {
      if ((v5 - 252) <= 2)
      {
        sub_1004EC7CC((id *)a1, a2, a3);
        return;
      }
      goto LABEL_42;
    }
    if (v5 == 192)
    {
      uint8_t v9 = -14;
LABEL_19:
      buf[0] = v9;
      if (sub_10026D430(v7, buf))
      {
        uint8_t v42 = v9;
        *(void *)long long buf = &v42;
        long long v17 = (__IOHIDUserDevice *)sub_10026D4E4((uint64_t)v7, &v42, (uint64_t)&unk_1007BE9D0, (unsigned char **)buf)[3];
        if (v17)
        {
          uint64_t v18 = mach_absolute_time();
          __int16 v19 = v17;
          unsigned __int8 v20 = a2;
          CFIndex v21 = a3;
LABEL_22:
          IOHIDUserDeviceHandleReportWithTimeStamp(v19, v18, v20, v21);
          return;
        }
      }
      __int16 v22 = qword_100A1A018;
      if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
        sub_100781B34(v5, v22, v23, v24, v25, v26, v27, v28);
      }
      return;
    }
    if (v5 != 198 && v5 != 224) {
      goto LABEL_42;
    }
LABEL_18:
    uint8_t v9 = -16;
    goto LABEL_19;
  }
  char v8 = v5 - 96;
  if ((v5 - 96) <= 0x3B)
  {
    if (((1 << v8) & 0x380001) != 0)
    {
LABEL_9:
      uint8_t v9 = -15;
      goto LABEL_19;
    }
    if (((1 << v8) & 0xC01000000000000) != 0) {
      goto LABEL_18;
    }
  }
  if (v5 > 0x31) {
    goto LABEL_42;
  }
  if (((1 << v5) & 0x3000000040004) != 0) {
    goto LABEL_9;
  }
  if (*a2 == 19)
  {
    uint64_t v34 = qword_100A1A018;
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = 19;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Received power-off notice input report (ID %u)", buf, 8u);
    }
    return;
  }
  if (*a2 != 20)
  {
LABEL_42:
    uint64_t v35 = qword_100A1A018;
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
      sub_100781AC8(v5, v35, v36, v37, v38, v39, v40, v41);
    }
    return;
  }
  unint64_t v29 = qword_100A1A018;
  if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
  {
    int v30 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), *(unsigned __int16 *)(a1 + 40));
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = 20;
    __int16 v45 = 1024;
    int v46 = v30;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Received exit suspend input report (ID %u), should undim %d", buf, 0xEu);
  }
  if ((*(unsigned int (**)(void, void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), *(unsigned __int16 *)(a1 + 40)))
  {
    uint64_t v31 = qword_100A1A018;
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Waking screen with spoofed click", buf, 2u);
    }
    buf[0] = -15;
    if (sub_10026D430((void *)(a1 + 192), buf))
    {
      uint8_t v42 = -15;
      *(void *)long long buf = &v42;
      uint64_t v32 = (__IOHIDUserDevice *)sub_10026D4E4(a1 + 192, &v42, (uint64_t)&unk_1007BE9D0, (unsigned char **)buf)[3];
      *(void *)long long buf = 274;
      uint64_t v33 = mach_absolute_time();
      IOHIDUserDeviceHandleReportWithTimeStamp(v32, v33, buf, 8);
      uint64_t v43 = 18;
      uint64_t v18 = mach_absolute_time();
      unsigned __int8 v20 = (const uint8_t *)&v43;
      __int16 v19 = v32;
      CFIndex v21 = 8;
      goto LABEL_22;
    }
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
      sub_100781BA0();
    }
  }
}

uint64_t sub_1005D35A4(uint64_t a1, void *a2)
{
  sub_1004EC630(a1, a2);
  sub_1005D367C(a1, a2);
  sub_1005D37F4(a1, a2);
  id v4 = a2;
  uint64_t v5 = [v4 valueForKey:@"ProductID"];
  unsigned int v6 = [v5 intValue];
  int v9 = 21;
  int v7 = *(unsigned __int16 *)sub_10026CEEC((uint64_t)&unk_100A19C10, &v9);

  if (v6 != v7) {
    sub_1005D390C(a1, v4);
  }

  return 1;
}

void sub_1005D365C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1005D367C(uint64_t a1, void *a2)
{
  long long v8 = xmmword_1007BFBD0;
  long long v9 = unk_1007BFBE0;
  *(_OWORD *)__int16 v10 = xmmword_1007BFBF0;
  long long v6 = xmmword_1007BFBB0;
  long long v7 = unk_1007BFBC0;
  *(_DWORD *)&v10[15] = -1073577627;
  *(void *)(a1 + 304) = a1;
  *(unsigned char *)(a1 + 312) = -16;
  id v3 = [a2 mutableCopy:v6 v7 v8 v9 *(_OWORD *)v10 *(void *)&v10[16]];
  [v3 setObject:@"Mouse" forKeyedSubscript:@"Accessory Category"];
  [v3 setObject:&off_1009E19F0 forKeyedSubscript:@"ExtendedData"];
  uint64_t v4 = sub_1004EC498(a1, v3, (uint64_t)&v6, 83, *(unsigned __int8 *)(a1 + 312), 0);
  if (v4)
  {
    IOHIDUserDeviceRegisterGetReportWithReturnLengthCallback();
    IOHIDUserDeviceRegisterSetReportCallback();
  }
  else if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR))
  {
    sub_100781BD4();
  }

  return v4;
}

void sub_1005D37D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1005D37F4(uint64_t a1, void *a2)
{
  void v4[4] = xmmword_1007BFC43;
  void v4[5] = unk_1007BFC53;
  v5[0] = xmmword_1007BFC63;
  *(_OWORD *)((char *)v5 + 10) = *(long long *)((char *)&xmmword_1007BFC63 + 10);
  v4[0] = xmmword_1007BFC03;
  v4[1] = unk_1007BFC13;
  _DWORD v4[2] = xmmword_1007BFC23;
  void v4[3] = unk_1007BFC33;
  *(void *)(a1 + 320) = a1;
  *(unsigned char *)(a1 + 328) = -15;
  uint64_t v2 = sub_1004EC498(a1, a2, (uint64_t)v4, 122, 241, 1);
  if (v2)
  {
    IOHIDUserDeviceRegisterGetReportWithReturnLengthCallback();
    IOHIDUserDeviceRegisterSetReportCallback();
  }
  else if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR))
  {
    sub_100781C08();
  }
  return v2;
}

uint64_t sub_1005D390C(uint64_t a1, void *a2)
{
  v4[0] = xmmword_1007BFC7D;
  *(_OWORD *)((char *)v4 + 11) = *(long long *)((char *)&xmmword_1007BFC7D + 11);
  *(void *)(a1 + 336) = a1;
  *(unsigned char *)(a1 + 344) = -14;
  uint64_t v2 = sub_1004EC498(a1, a2, (uint64_t)v4, 27, 242, 2);
  if (v2)
  {
    IOHIDUserDeviceRegisterGetReportWithReturnLengthCallback();
    IOHIDUserDeviceRegisterSetReportCallback();
  }
  else if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR))
  {
    sub_100781C3C();
  }
  return v2;
}

uint64_t sub_1005D3A0C(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, void))(**(void **)a1 + 112))(*(void *)a1, a2, a3, a4, a5, a1[8]);
}

uint64_t sub_1005D3A3C(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 == 178 && a1[8] == 240)
  {
    __int16 v10 = qword_100A1A018;
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "FW update detected; invalidating SDP cache",
        v12,
        2u);
    }
    (*(void (**)(void))(**(void **)(*(void *)a1 + 8) + 24))(*(void *)(*(void *)a1 + 8));
  }
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, void))(**(void **)a1 + 120))(*(void *)a1, a2, a3, a4, a5, a1[8]);
}

void sub_1005D3B48(uint64_t a1)
{
  sub_1004EC1D4(a1);

  operator delete();
}

id sub_1005D3B80(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1 + 8);
  id v2 = *(id *)(a1 + 72);
  sub_10003AFB4((uint64_t)v4);

  return v2;
}

double sub_1005D3BE0(uint64_t a1)
{
  *(void *)a1 = off_1009B9368;
  *(_DWORD *)(a1 + 8) = -1;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(void *)(a1 + 416) = 0;
  return result;
}

uint64_t sub_1005D3C44(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1009B9368;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  uint64_t v4 = (std::string *)(a1 + 64);
  *(_OWORD *)(a1 + 112) = 0u;
  uint64_t v5 = (std::string *)(a1 + 112);
  *(_OWORD *)(a1 + 160) = 0u;
  long long v6 = (std::string *)(a1 + 160);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  long long v17 = (std::string *)(a1 + 88);
  uint64_t v18 = (std::string *)(a1 + 40);
  uint64_t v15 = (std::string *)(a1 + 184);
  uint64_t v16 = (std::string *)(a1 + 136);
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  uint64_t v13 = a1 + 256;
  uint64_t v14 = a1 + 232;
  long long v7 = (std::string *)(a1 + 304);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  long long v8 = (std::string *)(a1 + 328);
  long long v9 = (std::string *)(a1 + 352);
  uint64_t v12 = a1 + 280;
  __int16 v10 = (std::string *)(a1 + 400);
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(void *)(a1 + 416) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  std::string::operator=(v18, (const std::string *)(a2 + 40));
  std::string::operator=(v4, (const std::string *)(a2 + 64));
  std::string::operator=(v17, (const std::string *)(a2 + 88));
  std::string::operator=(v5, (const std::string *)(a2 + 112));
  std::string::operator=(v16, (const std::string *)(a2 + 136));
  std::string::operator=(v6, (const std::string *)(a2 + 160));
  std::string::operator=(v15, (const std::string *)(a2 + 184));
  if (a1 != a2)
  {
    sub_1005BB40C(v14, *(std::string **)(a2 + 232), *(std::string **)(a2 + 240), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 240) - *(void *)(a2 + 232)) >> 3));
    sub_1005BB7CC(v13, *(std::string **)(a2 + 256), *(std::string **)(a2 + 264), (uint64_t)(*(void *)(a2 + 264) - *(void *)(a2 + 256)) >> 7);
    sub_1005BBAE8(v12, *(std::string **)(a2 + 280), *(long long **)(a2 + 288), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 288) - *(void *)(a2 + 280)) >> 3));
  }
  std::string::operator=(v7, (const std::string *)(a2 + 304));
  std::string::operator=(v8, (const std::string *)(a2 + 328));
  std::string::operator=(v9, (const std::string *)(a2 + 352));
  std::string::operator=(v10, (const std::string *)(a2 + 400));
  return a1;
}

void sub_1005D3E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18)
{
  if (*(char *)(v18 + 423) < 0) {
    operator delete(*v26);
  }
  a18 = a10;
  sub_100051568(&a18);
  if (*(char *)(v18 + 375) < 0) {
    operator delete(*v25);
  }
  if (*(char *)(v18 + 351) < 0) {
    operator delete(*v21);
  }
  if (*(char *)(v18 + 327) < 0) {
    operator delete(*v23);
  }
  a18 = a11;
  sub_100051568(&a18);
  a18 = a12;
  sub_1005D6AE4(&a18);
  a18 = a13;
  sub_1005D6A4C(&a18);
  if (*(char *)(v18 + 231) < 0) {
    operator delete(*(void **)(v18 + 208));
  }
  if (*(char *)(v18 + 207) < 0) {
    operator delete(*a14);
  }
  if (*(char *)(v18 + 183) < 0) {
    operator delete(*v24);
  }
  if (*(char *)(v18 + 159) < 0) {
    operator delete(*a15);
  }
  if (*(char *)(v18 + 135) < 0) {
    operator delete(*v22);
  }
  if (*(char *)(v18 + 111) < 0) {
    operator delete(*a16);
  }
  if (*(char *)(v18 + 87) < 0) {
    operator delete(*v20);
  }
  if (*(char *)(v18 + 63) < 0) {
    operator delete(*a17);
  }
  if (*(char *)(v18 + 39) < 0) {
    operator delete(*v19);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1005D3F70(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)a1 = off_1009B9368;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(void *)(a1 + 416) = 0;
  sub_1005BA2D4(a1, a2);
  return a1;
}

void sub_1005D4024(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 423) < 0) {
    operator delete(*(void **)(v2 + 400));
  }
  sub_100051568((void ***)va);
  if (*(char *)(v2 + 375) < 0) {
    operator delete(*(void **)(v2 + 352));
  }
  if (*(char *)(v2 + 351) < 0) {
    operator delete(*(void **)(v2 + 328));
  }
  if (*(char *)(v2 + 327) < 0) {
    operator delete(*(void **)(v2 + 304));
  }
  sub_100051568((void ***)va);
  sub_1005D6AE4((void ***)va);
  sub_1005D6A4C((void ***)va);
  if (*(char *)(v2 + 231) < 0) {
    operator delete(*(void **)(v2 + 208));
  }
  if (*(char *)(v2 + 207) < 0) {
    operator delete(*(void **)(v2 + 184));
  }
  if (*(char *)(v2 + 183) < 0) {
    operator delete(*(void **)(v2 + 160));
  }
  if (*(char *)(v2 + 159) < 0) {
    operator delete(*(void **)(v2 + 136));
  }
  if (*(char *)(v2 + 135) < 0) {
    operator delete(*(void **)(v2 + 112));
  }
  if (*(char *)(v2 + 111) < 0) {
    operator delete(*(void **)(v2 + 88));
  }
  if (*(char *)(v2 + 87) < 0) {
    operator delete(*(void **)(v2 + 64));
  }
  if (*(char *)(v2 + 63) < 0) {
    operator delete(*(void **)(v2 + 40));
  }
  if (*(char *)(v2 + 39) < 0) {
    operator delete(*v3);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1005D4134(uint64_t a1)
{
  *(void *)a1 = off_1009B9368;
  if (*(char *)(a1 + 423) < 0) {
    operator delete(*(void **)(a1 + 400));
  }
  id v3 = (void **)(a1 + 376);
  sub_100051568(&v3);
  if (*(char *)(a1 + 375) < 0) {
    operator delete(*(void **)(a1 + 352));
  }
  if (*(char *)(a1 + 351) < 0) {
    operator delete(*(void **)(a1 + 328));
  }
  if (*(char *)(a1 + 327) < 0) {
    operator delete(*(void **)(a1 + 304));
  }
  id v3 = (void **)(a1 + 280);
  sub_100051568(&v3);
  id v3 = (void **)(a1 + 256);
  sub_1005D6AE4(&v3);
  id v3 = (void **)(a1 + 232);
  sub_1005D6A4C(&v3);
  if (*(char *)(a1 + 231) < 0) {
    operator delete(*(void **)(a1 + 208));
  }
  if (*(char *)(a1 + 207) < 0) {
    operator delete(*(void **)(a1 + 184));
  }
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*(void **)(a1 + 160));
  }
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1005D4290(uint64_t a1)
{
  sub_1005D4134(a1);

  operator delete();
}

std::string *sub_1005D42C8@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  if ((a1 - 1) < 6) {
    double result = std::string::append((std::string *)a2, off_1009B93A8[a1 - 1]);
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (v4) {
    return std::string::insert((std::string *)a2, 0, ";TYPE=");
  }
  return result;
}

void sub_1005D433C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005D4358(std::string *a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  memset(&v21, 0, sizeof(v21));
  sub_10004191C(&v21, ";\n\\"");
  if (a2 == 1) {
    std::string::append(&v21, ",");
  }
  for (std::string::size_type i = 0; ; std::string::size_type i = v18 + 2)
  {
    if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v7 = a1->__r_.__value_.__r.__words[0];
      std::string::size_type size = a1->__r_.__value_.__l.__size_;
    }
    else
    {
      std::string::size_type v7 = (std::string::size_type)a1;
      std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    }
    std::string::size_type v9 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
    int v10 = SHIBYTE(v21.__r_.__value_.__r.__words[2]);
    uint64_t v11 = (void *)v21.__r_.__value_.__r.__words[0];
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v12 = &v21;
    }
    else {
      uint64_t v12 = (std::string *)v21.__r_.__value_.__r.__words[0];
    }
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v9 = v21.__r_.__value_.__l.__size_;
    }
    if (size <= i || v9 == 0) {
      break;
    }
    uint64_t v14 = (unsigned __int8 *)(v7 + i);
    uint64_t v15 = (unsigned __int8 *)(v7 + size);
LABEL_17:
    std::string::size_type v16 = v9;
    long long v17 = v12;
    while (*v14 != v17->__r_.__value_.__s.__data_[0])
    {
      long long v17 = (std::string *)((char *)v17 + 1);
      if (!--v16)
      {
        if (++v14 != v15) {
          goto LABEL_17;
        }
        goto LABEL_31;
      }
    }
    if (v14 == v15) {
      break;
    }
    std::string::size_type v18 = (std::string::size_type)&v14[-v7];
    if (&v14[-v7] == (unsigned __int8 *)-1) {
      break;
    }
    __int16 v19 = a1;
    if ((*((unsigned char *)&a1->__r_.__value_.__s + 23) & 0x80) != 0) {
      __int16 v19 = (std::string *)a1->__r_.__value_.__r.__words[0];
    }
    if (v19->__r_.__value_.__s.__data_[v18] == 10)
    {
      unsigned __int8 v20 = a1;
      if ((*((unsigned char *)&a1->__r_.__value_.__s + 23) & 0x80) != 0) {
        unsigned __int8 v20 = (std::string *)a1->__r_.__value_.__r.__words[0];
      }
      v20->__r_.__value_.__s.__data_[v18] = 110;
    }
    std::string::insert(a1, v18, 1uLL, 92);
  }
LABEL_31:
  *(_OWORD *)a3 = *(_OWORD *)&a1->__r_.__value_.__l.__data_;
  *(void *)(a3 + 16) = *((void *)&a1->__r_.__value_.__l + 2);
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  if (v10 < 0) {
    operator delete(v11);
  }
}

void sub_1005D44C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_1005D44E8@<Q0>(std::string *this@<X1>, char a2@<W2>, uint64_t a3@<X8>)
{
  std::string::size_type v6 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  std::string::size_type v7 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    std::string::size_type v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  while (1)
  {
    long long v8 = this;
    std::string::size_type size = v6;
    if ((v6 & 0x80) != 0)
    {
      long long v8 = (std::string *)this->__r_.__value_.__r.__words[0];
      std::string::size_type size = this->__r_.__value_.__l.__size_;
    }
    if (v7 == (std::string *)((char *)v8 + size)) {
      break;
    }
    uint64_t v10 = v7->__r_.__value_.__s.__data_[0];
    if (v7->__r_.__value_.__s.__data_[0] < 0)
    {
      if (!__maskrune(v10, 0x100uLL)) {
        goto LABEL_13;
      }
    }
    else if ((_DefaultRuneLocale.__runetype[v10] & 0x100) == 0)
    {
      goto LABEL_13;
    }
    unsigned __int8 v11 = __tolower(v7->__r_.__value_.__s.__data_[0]);
    uint64_t v12 = 0;
    do
      unsigned int v13 = byte_1007BFC98[v12++];
    while (v13 < v11);
    v7->__r_.__value_.__s.__data_[0] = v12 + 49;
LABEL_13:
    std::string::size_type v7 = (std::string *)((char *)v7 + 1);
    std::string::size_type v6 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  uint64_t v14 = this;
  if (a2)
  {
    std::string::size_type v15 = v6;
    if ((char)v6 < 0)
    {
      uint64_t v14 = (std::string *)this->__r_.__value_.__r.__words[0];
      std::string::size_type v15 = this->__r_.__value_.__l.__size_;
    }
    if (v15)
    {
      do
      {
        if (v14->__r_.__value_.__s.__data_[0] == 44) {
          v14->__r_.__value_.__s.__data_[0] = 112;
        }
        uint64_t v14 = (std::string *)((char *)v14 + 1);
        --v15;
      }
      while (v15);
      std::string::size_type v6 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    }
    std::string::size_type v16 = this;
    if ((v6 & 0x80) != 0)
    {
      std::string::size_type v16 = (std::string *)this->__r_.__value_.__r.__words[0];
      std::string::size_type v6 = this->__r_.__value_.__l.__size_;
    }
    for (; v6; --v6)
    {
      if (v16->__r_.__value_.__s.__data_[0] == 59) {
        v16->__r_.__value_.__s.__data_[0] = 119;
      }
      std::string::size_type v16 = (std::string *)((char *)v16 + 1);
    }
  }
  else
  {
    if ((char)v6 < 0)
    {
      uint64_t v14 = (std::string *)this->__r_.__value_.__r.__words[0];
      std::string::size_type v6 = this->__r_.__value_.__l.__size_;
    }
    if (v6)
    {
      long long v17 = (unsigned __int8 *)v14 + v6;
      std::string::size_type v18 = v14;
      while (2)
      {
        for (uint64_t i = 0; i != 2; ++i)
        {
          if (v18->__r_.__value_.__s.__data_[0] == asc_1008ABF7A[i])
          {
            if (v18 != (std::string *)v17 && (char *)v18 - (char *)v14 != -1) {
              std::string::erase(this, (char *)v18 - (char *)v14, 0xFFFFFFFFFFFFFFFFLL);
            }
            goto LABEL_41;
          }
        }
        std::string::size_type v18 = (std::string *)((char *)v18 + 1);
        if (v18 != (std::string *)v17) {
          continue;
        }
        break;
      }
    }
  }
LABEL_41:
  __n128 result = *(__n128 *)&this->__r_.__value_.__l.__data_;
  *(_OWORD *)a3 = *(_OWORD *)&this->__r_.__value_.__l.__data_;
  *(void *)(a3 + 16) = *((void *)&this->__r_.__value_.__l + 2);
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  this->__r_.__value_.__r.__words[0] = 0;
  return result;
}

void sub_1005D46B4(uint64_t a1, uint64_t a2, unsigned int a3, int a4, char a5)
{
  uint64_t v8 = sub_10003AB28(a2);
  strlen(off_1009FBDC0);
  sub_10003AB28(v8);
  if (a4)
  {
    sub_10003AB28(a2);
    if (a3 <= 1) {
      sub_10003AB28(a2);
    }
    strlen(off_1009FBDC0);
    sub_10003AB28(a2);
  }
  if ((a4 & 2) != 0)
  {
    uint64_t v9 = sub_10003AB28(a2);
    if (a3) {
      uint64_t v10 = "";
    }
    else {
      uint64_t v10 = ";CHARSET=UTF-8";
    }
    sub_10004191C(&v152, v10);
    uint64_t v11 = sub_10003AB28(v9);
    sub_10003AB28(v11);
    if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v152.__r_.__value_.__l.__data_);
    }
    if (*(char *)(a1 + 39) < 0) {
      sub_10003B098(&__dst, *(void **)(a1 + 16), *(void *)(a1 + 24));
    }
    else {
      std::string __dst = *(std::string *)(a1 + 16);
    }
    sub_1005D4358(&__dst, a3, (uint64_t)&v152);
    sub_10003AB28(a2);
    if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v152.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    strlen(off_1009FBDC0);
    sub_10003AB28(a2);
  }
  if ((a4 & 4) == 0) {
    goto LABEL_126;
  }
  uint64_t v12 = sub_10003AB28(a2);
  if (a3) {
    unsigned int v13 = "";
  }
  else {
    unsigned int v13 = ";CHARSET=UTF-8";
  }
  sub_10004191C(&v152, v13);
  uint64_t v14 = sub_10003AB28(v12);
  sub_10003AB28(v14);
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v152.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a1 + 63) < 0) {
    sub_10003B098(&v150, *(void **)(a1 + 40), *(void *)(a1 + 48));
  }
  else {
    std::string v150 = *(std::string *)(a1 + 40);
  }
  sub_1005D4358(&v150, a3, (uint64_t)&v152);
  sub_10003AB28(a2);
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v152.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v150.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a1 + 87) < 0)
  {
    if (*(void *)(a1 + 72)) {
      goto LABEL_48;
    }
  }
  else if (*(unsigned char *)(a1 + 87))
  {
    goto LABEL_48;
  }
  if (*(char *)(a1 + 111) < 0)
  {
    if (*(void *)(a1 + 96)) {
      goto LABEL_48;
    }
  }
  else if (*(unsigned char *)(a1 + 111))
  {
    goto LABEL_48;
  }
  if (*(char *)(a1 + 135) < 0)
  {
    if (*(void *)(a1 + 120)) {
      goto LABEL_48;
    }
  }
  else if (*(unsigned char *)(a1 + 135))
  {
    goto LABEL_48;
  }
  if (*(char *)(a1 + 159) < 0) {
    uint64_t v15 = *(void *)(a1 + 144);
  }
  else {
    uint64_t v15 = *(unsigned __int8 *)(a1 + 159);
  }
  if (!v15) {
    goto LABEL_100;
  }
LABEL_48:
  uint64_t v16 = sub_10003AB28(a2);
  if (*(char *)(a1 + 87) < 0) {
    sub_10003B098(&v149, *(void **)(a1 + 64), *(void *)(a1 + 72));
  }
  else {
    std::string v149 = *(std::string *)(a1 + 64);
  }
  sub_1005D4358(&v149, a3, (uint64_t)&v152);
  sub_10003AB28(v16);
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v152.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v149.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a1 + 111) < 0)
  {
    if (*(void *)(a1 + 96)) {
      goto LABEL_67;
    }
  }
  else if (*(unsigned char *)(a1 + 111))
  {
    goto LABEL_67;
  }
  if (*(char *)(a1 + 135) < 0)
  {
    if (*(void *)(a1 + 120)) {
      goto LABEL_67;
    }
  }
  else if (*(unsigned char *)(a1 + 135))
  {
    goto LABEL_67;
  }
  if (*(char *)(a1 + 159) < 0)
  {
    if (!*(void *)(a1 + 144)) {
      goto LABEL_100;
    }
  }
  else if (!*(unsigned char *)(a1 + 159))
  {
    goto LABEL_100;
  }
LABEL_67:
  uint64_t v17 = sub_10003AB28(a2);
  if (*(char *)(a1 + 111) < 0) {
    sub_10003B098(&v148, *(void **)(a1 + 88), *(void *)(a1 + 96));
  }
  else {
    std::string v148 = *(std::string *)(a1 + 88);
  }
  sub_1005D4358(&v148, a3, (uint64_t)&v152);
  sub_10003AB28(v17);
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v152.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v148.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a1 + 135) < 0)
  {
    if (!*(void *)(a1 + 120)) {
      goto LABEL_78;
    }
  }
  else if (!*(unsigned char *)(a1 + 135))
  {
LABEL_78:
    if (*(char *)(a1 + 159) < 0)
    {
      if (!*(void *)(a1 + 144)) {
        goto LABEL_100;
      }
    }
    else if (!*(unsigned char *)(a1 + 159))
    {
      goto LABEL_100;
    }
  }
  uint64_t v18 = sub_10003AB28(a2);
  if (*(char *)(a1 + 135) < 0) {
    sub_10003B098(&__p, *(void **)(a1 + 112), *(void *)(a1 + 120));
  }
  else {
    std::string __p = *(std::string *)(a1 + 112);
  }
  sub_1005D4358(&__p, a3, (uint64_t)&v152);
  sub_10003AB28(v18);
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v152.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a1 + 159) < 0)
  {
    if (!*(void *)(a1 + 144)) {
      goto LABEL_100;
    }
  }
  else if (!*(unsigned char *)(a1 + 159))
  {
    goto LABEL_100;
  }
  uint64_t v19 = sub_10003AB28(a2);
  if (*(char *)(a1 + 159) < 0) {
    sub_10003B098(&v146, *(void **)(a1 + 136), *(void *)(a1 + 144));
  }
  else {
    std::string v146 = *(std::string *)(a1 + 136);
  }
  sub_1005D4358(&v146, a3, (uint64_t)&v152);
  sub_10003AB28(v19);
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v152.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v146.__r_.__value_.__l.__data_);
  }
LABEL_100:
  strlen(off_1009FBDC0);
  sub_10003AB28(a2);
  if (*(char *)(a1 + 183) < 0)
  {
    if (!*(void *)(a1 + 168)) {
      goto LABEL_113;
    }
  }
  else if (!*(unsigned char *)(a1 + 183))
  {
    goto LABEL_113;
  }
  uint64_t v20 = sub_10003AB28(a2);
  sub_10004191C(&v152, v13);
  uint64_t v21 = sub_10003AB28(v20);
  uint64_t v22 = sub_10003AB28(v21);
  if (*(char *)(a1 + 183) < 0) {
    sub_10003B098(&v144, *(void **)(a1 + 160), *(void *)(a1 + 168));
  }
  else {
    std::string v144 = *(std::string *)(a1 + 160);
  }
  sub_1005D4358(&v144, a3, (uint64_t)&v145);
  uint64_t v23 = sub_10003AB28(v22);
  strlen(off_1009FBDC0);
  sub_10003AB28(v23);
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v145.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v144.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v152.__r_.__value_.__l.__data_);
  }
LABEL_113:
  if ((*(char *)(a1 + 207) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a1 + 207)) {
      goto LABEL_126;
    }
LABEL_117:
    uint64_t v24 = sub_10003AB28(a2);
    sub_10004191C(&v152, v13);
    uint64_t v25 = sub_10003AB28(v24);
    uint64_t v26 = sub_10003AB28(v25);
    if (*(char *)(a1 + 207) < 0) {
      sub_10003B098(&v143, *(void **)(a1 + 184), *(void *)(a1 + 192));
    }
    else {
      std::string v143 = *(std::string *)(a1 + 184);
    }
    sub_1005D4358(&v143, a3, (uint64_t)&v145);
    uint64_t v27 = sub_10003AB28(v26);
    strlen(off_1009FBDC0);
    sub_10003AB28(v27);
    if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v145.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v143.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v152.__r_.__value_.__l.__data_);
    }
    goto LABEL_126;
  }
  if (*(void *)(a1 + 192)) {
    goto LABEL_117;
  }
LABEL_126:
  int v117 = a3;
  int v114 = a4;
  if ((a4 & 0x80) != 0)
  {
    if (*(void *)(a1 + 240) == *(void *)(a1 + 232))
    {
      uint64_t v36 = sub_10003AB28(a2);
      strlen(off_1009FBDC0);
      sub_10003AB28(v36);
    }
    else
    {
      uint64_t v28 = 0;
      unint64_t v29 = 0;
      do
      {
        uint64_t v30 = sub_10003AB28(a2);
        sub_1005D42C8(*(_DWORD *)(*(void *)(a1 + 232) + v28 + 24), (uint64_t)&v152);
        uint64_t v31 = sub_10003AB28(v30);
        uint64_t v32 = sub_10003AB28(v31);
        uint64_t v33 = (long long *)(*(void *)(a1 + 232) + v28);
        if (*((char *)v33 + 23) < 0)
        {
          sub_10003B098(&v142, *(void **)v33, *((void *)v33 + 1));
        }
        else
        {
          long long v34 = *v33;
          v142.__r_.__value_.__r.__words[2] = *((void *)v33 + 2);
          *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v34;
        }
        sub_1005D44E8(&v142, a5, (uint64_t)&v145);
        uint64_t v35 = sub_10003AB28(v32);
        strlen(off_1009FBDC0);
        sub_10003AB28(v35);
        if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v145.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v142.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v152.__r_.__value_.__l.__data_);
        }
        ++v29;
        v28 += 56;
      }
      while (v29 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 240) - *(void *)(a1 + 232)) >> 3));
    }
  }
  if ((a4 & 8) == 0) {
    goto LABEL_167;
  }
  if (*(char *)(a1 + 231) < 0)
  {
    if (!*(void *)(a1 + 216)) {
      goto LABEL_167;
    }
  }
  else if (!*(unsigned char *)(a1 + 231))
  {
    goto LABEL_167;
  }
  memset(&v152, 0, sizeof(v152));
  if (a3) {
    uint64_t v37 = "b";
  }
  else {
    uint64_t v37 = "BASE64";
  }
  sub_10004191C(&v152, v37);
  uint64_t v38 = sub_10003AB28(a2);
  if (a3) {
    uint64_t v39 = "";
  }
  else {
    uint64_t v39 = ";CHARSET=UTF-8";
  }
  sub_10004191C(&v145, v39);
  uint64_t v40 = sub_10003AB28(v38);
  uint64_t v41 = sub_10003AB28(v40);
  uint64_t v42 = sub_10003AB28(v41);
  sub_10003AB28(v42);
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v145.__r_.__value_.__l.__data_);
  }
  std::string::size_type v43 = 0;
  while (1)
  {
    std::string::size_type v44 = *(char *)(a1 + 231) < 0 ? *(void *)(a1 + 216) : *(unsigned __int8 *)(a1 + 231);
    if (v43 >= v44) {
      break;
    }
    std::string::basic_string(&v145, (const std::string *)(a1 + 208), v43, 0x4BuLL, (std::allocator<char> *)&v138);
    uint64_t v45 = sub_10003AB28(a2);
    strlen(off_1009FBDC0);
    sub_10003AB28(v45);
    if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v145.__r_.__value_.__l.__data_);
    }
    if (*(char *)(a1 + 231) < 0) {
      std::string::size_type v46 = *(void *)(a1 + 216);
    }
    else {
      std::string::size_type v46 = *(unsigned __int8 *)(a1 + 231);
    }
    v43 += 75;
    if (v43 < v46) {
      sub_10003AB28(a2);
    }
  }
  if ((SHIBYTE(v152.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_167:
    if ((a4 & 0x20) != 0) {
      goto LABEL_168;
    }
    goto LABEL_231;
  }
  operator delete(v152.__r_.__value_.__l.__data_);
  if ((a4 & 0x20) != 0)
  {
LABEL_168:
    if (*(void *)(a1 + 264) != *(void *)(a1 + 256))
    {
      uint64_t v47 = 0;
      unint64_t v48 = 0;
      if (a3) {
        __int16 v49 = "";
      }
      else {
        __int16 v49 = ";CHARSET=UTF-8";
      }
      __sa = (char *)v49;
      do
      {
        uint64_t v50 = sub_10003AB28(a2);
        sub_10004191C(&v152, __sa);
        uint64_t v51 = sub_10003AB28(v50);
        sub_1005D42C8(*(_DWORD *)(*(void *)(a1 + 256) + v47 + 120), (uint64_t)&v145);
        uint64_t v52 = sub_10003AB28(v51);
        sub_10003AB28(v52);
        if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v145.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v152.__r_.__value_.__l.__data_);
        }
        memset(&v152, 0, sizeof(v152));
        *(_DWORD *)((char *)v141 + 3) = 0;
        v141[0] = 0;
        std::string::size_type v53 = std::string::find((const std::string *)(*(void *)(a1 + 256) + v47), 10, 0);
        if (v53 == -1)
        {
          long long v56 = 0;
          char v57 = 0;
          std::string::operator=(&v152, (const std::string *)(*(void *)(a1 + 256) + v47));
          std::string::size_type size = 0;
        }
        else
        {
          std::string::size_type v54 = v53;
          std::string::basic_string(&v145, (const std::string *)(*(void *)(a1 + 256) + v47), 0, v53, (std::allocator<char> *)&v138);
          if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v152.__r_.__value_.__l.__data_);
          }
          std::string v152 = v145;
          std::string::basic_string(&v145, (const std::string *)(*(void *)(a1 + 256) + v47), v54 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v138);
          std::string::size_type size = v145.__r_.__value_.__l.__size_;
          long long v56 = (void *)v145.__r_.__value_.__r.__words[0];
          v141[0] = v145.__r_.__value_.__r.__words[2];
          *(_DWORD *)((char *)v141 + 3) = *(_DWORD *)((char *)&v145.__r_.__value_.__r.__words[2] + 3);
          char v57 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
        }
        uint64_t v58 = sub_10003AB28(a2);
        if (v57 < 0)
        {
          sub_10003B098(&v140, v56, size);
        }
        else
        {
          v140.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
          v140.__r_.__value_.__l.__size_ = size;
          LODWORD(v140.__r_.__value_.__r.__words[2]) = v141[0];
          *(_DWORD *)((char *)&v140.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v141 + 3);
          *((unsigned char *)&v140.__r_.__value_.__s + 23) = v57;
        }
        sub_1005D4358(&v140, a3, (uint64_t)&v145);
        uint64_t v59 = sub_10003AB28(v58);
        uint64_t v60 = sub_10003AB28(v59);
        if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
          sub_10003B098(&v137, v152.__r_.__value_.__l.__data_, v152.__r_.__value_.__l.__size_);
        }
        else {
          std::string v137 = v152;
        }
        sub_1005D4358(&v137, a3, (uint64_t)&v138);
        uint64_t v61 = sub_10003AB28(v60);
        uint64_t v62 = sub_10003AB28(v61);
        uint64_t v63 = *(void *)(a1 + 256) + v47;
        long long v64 = (void **)(v63 + 24);
        if (*(char *)(v63 + 47) < 0)
        {
          sub_10003B098(&v134, *v64, *(void *)(v63 + 32));
        }
        else
        {
          long long v65 = *(_OWORD *)v64;
          v134.__r_.__value_.__r.__words[2] = *(void *)(v63 + 40);
          *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v65;
        }
        sub_1005D4358(&v134, a3, (uint64_t)&v135);
        uint64_t v66 = sub_10003AB28(v62);
        uint64_t v67 = sub_10003AB28(v66);
        uint64_t v68 = *(void *)(a1 + 256) + v47;
        std::string v69 = (void **)(v68 + 48);
        if (*(char *)(v68 + 71) < 0)
        {
          sub_10003B098(&v131, *v69, *(void *)(v68 + 56));
        }
        else
        {
          long long v70 = *(_OWORD *)v69;
          v131.__r_.__value_.__r.__words[2] = *(void *)(v68 + 64);
          *(_OWORD *)&v131.__r_.__value_.__l.__data_ = v70;
        }
        sub_1005D4358(&v131, a3, (uint64_t)&v132);
        uint64_t v71 = sub_10003AB28(v67);
        uint64_t v72 = sub_10003AB28(v71);
        uint64_t v73 = *(void *)(a1 + 256) + v47;
        int64_t v74 = (void **)(v73 + 72);
        if (*(char *)(v73 + 95) < 0)
        {
          sub_10003B098(&v128, *v74, *(void *)(v73 + 80));
        }
        else
        {
          long long v75 = *(_OWORD *)v74;
          v128.__r_.__value_.__r.__words[2] = *(void *)(v73 + 88);
          *(_OWORD *)&v128.__r_.__value_.__l.__data_ = v75;
        }
        sub_1005D4358(&v128, a3, (uint64_t)&v129);
        uint64_t v76 = sub_10003AB28(v72);
        uint64_t v77 = sub_10003AB28(v76);
        uint64_t v78 = *(void *)(a1 + 256) + v47;
        int v79 = (void **)(v78 + 96);
        if (*(char *)(v78 + 119) < 0)
        {
          sub_10003B098(&v125, *v79, *(void *)(v78 + 104));
        }
        else
        {
          long long v80 = *(_OWORD *)v79;
          v125.__r_.__value_.__r.__words[2] = *(void *)(v78 + 112);
          *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v80;
        }
        sub_1005D4358(&v125, a3, (uint64_t)&v126);
        uint64_t v81 = sub_10003AB28(v77);
        strlen(off_1009FBDC0);
        sub_10003AB28(v81);
        if (v127 < 0) {
          operator delete(v126);
        }
        if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v125.__r_.__value_.__l.__data_);
        }
        if (v130 < 0) {
          operator delete(v129);
        }
        if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v128.__r_.__value_.__l.__data_);
        }
        if (v133 < 0) {
          operator delete(v132);
        }
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v131.__r_.__value_.__l.__data_);
        }
        if (v136 < 0) {
          operator delete(v135);
        }
        if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v134.__r_.__value_.__l.__data_);
        }
        if (v139 < 0) {
          operator delete(v138);
        }
        if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v137.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v145.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v140.__r_.__value_.__l.__data_);
          if (v57 < 0) {
LABEL_229:
          }
            operator delete(v56);
        }
        else if (v57 < 0)
        {
          goto LABEL_229;
        }
        if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v152.__r_.__value_.__l.__data_);
        }
        ++v48;
        v47 += 128;
      }
      while (v48 < (uint64_t)(*(void *)(a1 + 264) - *(void *)(a1 + 256)) >> 7);
    }
  }
LABEL_231:
  if ((v114 & 0x100) != 0 && *(void *)(a1 + 288) != *(void *)(a1 + 280))
  {
    uint64_t v82 = 0;
    unint64_t v83 = 0;
    if (a3) {
      char v84 = "";
    }
    else {
      char v84 = ";CHARSET=UTF-8";
    }
    do
    {
      uint64_t v85 = sub_10003AB28(a2);
      sub_10004191C(&v152, v84);
      uint64_t v86 = sub_10003AB28(v85);
      uint64_t v87 = sub_10003AB28(v86);
      uint64_t v88 = (long long *)(*(void *)(a1 + 280) + v82);
      if (*((char *)v88 + 23) < 0)
      {
        sub_10003B098(&v124, *(void **)v88, *((void *)v88 + 1));
      }
      else
      {
        long long v89 = *v88;
        v124.__r_.__value_.__r.__words[2] = *((void *)v88 + 2);
        *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v89;
      }
      sub_1005D4358(&v124, a3, (uint64_t)&v145);
      uint64_t v90 = sub_10003AB28(v87);
      strlen(off_1009FBDC0);
      sub_10003AB28(v90);
      if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v145.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v124.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v152.__r_.__value_.__l.__data_);
      }
      ++v83;
      v82 += 24;
    }
    while (v83 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 288) - *(void *)(a1 + 280)) >> 3));
  }
  if ((v114 & 0x1000) == 0) {
    goto LABEL_262;
  }
  if (*(char *)(a1 + 327) < 0)
  {
    if (!*(void *)(a1 + 312)) {
      goto LABEL_262;
    }
  }
  else if (!*(unsigned char *)(a1 + 327))
  {
    goto LABEL_262;
  }
  uint64_t v91 = sub_10003AB28(a2);
  if (a3) {
    uint64_t v92 = "";
  }
  else {
    uint64_t v92 = ";CHARSET=UTF-8";
  }
  sub_10004191C(&v152, v92);
  uint64_t v93 = sub_10003AB28(v91);
  uint64_t v94 = sub_10003AB28(v93);
  if (*(char *)(a1 + 327) < 0) {
    sub_10003B098(&v123, *(void **)(a1 + 304), *(void *)(a1 + 312));
  }
  else {
    std::string v123 = *(std::string *)(a1 + 304);
  }
  sub_1005D4358(&v123, a3, (uint64_t)&v145);
  uint64_t v95 = sub_10003AB28(v94);
  strlen(off_1009FBDC0);
  sub_10003AB28(v95);
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v145.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v123.__r_.__value_.__l.__data_);
  }
  if ((SHIBYTE(v152.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_262:
    if ((v114 & 0x10000) == 0) {
      goto LABEL_263;
    }
    goto LABEL_266;
  }
  operator delete(v152.__r_.__value_.__l.__data_);
  if ((v114 & 0x10000) == 0) {
    goto LABEL_263;
  }
LABEL_266:
  if (*(char *)(a1 + 351) < 0)
  {
    if (!*(void *)(a1 + 336)) {
      goto LABEL_263;
    }
LABEL_270:
    uint64_t v96 = sub_10003AB28(a2);
    if (a3) {
      uint64_t v97 = "";
    }
    else {
      uint64_t v97 = ";CHARSET=UTF-8";
    }
    sub_10004191C(&v152, v97);
    uint64_t v98 = sub_10003AB28(v96);
    uint64_t v99 = sub_10003AB28(v98);
    if (*(char *)(a1 + 351) < 0) {
      sub_10003B098(&v122, *(void **)(a1 + 328), *(void *)(a1 + 336));
    }
    else {
      std::string v122 = *(std::string *)(a1 + 328);
    }
    sub_1005D4358(&v122, a3, (uint64_t)&v145);
    sub_10003AB28(v99);
    if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v145.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v122.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v152.__r_.__value_.__l.__data_);
    }
    if (*(char *)(a1 + 375) < 0)
    {
      if (!*(void *)(a1 + 360)) {
        goto LABEL_293;
      }
    }
    else if (!*(unsigned char *)(a1 + 375))
    {
      goto LABEL_293;
    }
    uint64_t v100 = sub_10003AB28(a2);
    if (*(char *)(a1 + 375) < 0) {
      sub_10003B098(&v121, *(void **)(a1 + 352), *(void *)(a1 + 360));
    }
    else {
      std::string v121 = *(std::string *)(a1 + 352);
    }
    sub_1005D4358(&v121, a3, (uint64_t)&v152);
    sub_10003AB28(v100);
    if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v152.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v121.__r_.__value_.__l.__data_);
    }
LABEL_293:
    strlen(off_1009FBDC0);
    sub_10003AB28(a2);
    if ((v114 & 0x100000) == 0) {
      goto LABEL_304;
    }
    goto LABEL_294;
  }
  if (*(unsigned char *)(a1 + 351)) {
    goto LABEL_270;
  }
LABEL_263:
  if ((v114 & 0x100000) == 0) {
    goto LABEL_304;
  }
LABEL_294:
  if (*(void *)(a1 + 384) != *(void *)(a1 + 376))
  {
    uint64_t v101 = 0;
    unint64_t v102 = 0;
    do
    {
      uint64_t v103 = sub_10003AB28(a2);
      __int16 v104 = (long long *)(*(void *)(a1 + 376) + v101);
      if (*((char *)v104 + 23) < 0)
      {
        sub_10003B098(&v120, *(void **)v104, *((void *)v104 + 1));
      }
      else
      {
        long long v105 = *v104;
        v120.__r_.__value_.__r.__words[2] = *((void *)v104 + 2);
        *(_OWORD *)&v120.__r_.__value_.__l.__data_ = v105;
      }
      sub_1005D4358(&v120, v117, (uint64_t)&v152);
      uint64_t v106 = sub_10003AB28(v103);
      strlen(off_1009FBDC0);
      sub_10003AB28(v106);
      if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v152.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v120.__r_.__value_.__l.__data_);
      }
      ++v102;
      v101 += 24;
    }
    while (v102 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 384) - *(void *)(a1 + 376)) >> 3));
  }
LABEL_304:
  if ((v114 & 0x200000) != 0 && *(_DWORD *)(a1 + 8) != -1)
  {
    int v107 = (void *)sub_10003AB28(a2);
    *(_DWORD *)((char *)v107 + *(void *)(*v107 - 24) + 8) = *(_DWORD *)((unsigned char *)v107 + *(void *)(*v107 - 24)
                                                                                          + 8) & 0xFFFFFFB5 | 8;
    id v108 = (void *)std::ostream::operator<<();
    *(_DWORD *)((char *)v108 + *(void *)(*v108 - 24) + 8) = *(_DWORD *)((unsigned char *)v108 + *(void *)(*v108 - 24)
                                                                                          + 8) & 0xFFFFFFB5 | 2;
    strlen(off_1009FBDC0);
    sub_10003AB28((uint64_t)v108);
  }
  if ((v114 & 0x800000) != 0)
  {
    if (*(char *)(a1 + 423) < 0)
    {
      if (!*(void *)(a1 + 408)) {
        return;
      }
    }
    else if (!*(unsigned char *)(a1 + 423))
    {
      return;
    }
    uint64_t v109 = sub_10003AB28(a2);
    if (v117) {
      std::string v110 = "";
    }
    else {
      std::string v110 = ";CHARSET=UTF-8";
    }
    sub_10004191C(&v152, v110);
    uint64_t v111 = sub_10003AB28(v109);
    uint64_t v112 = sub_10003AB28(v111);
    if (*(char *)(a1 + 423) < 0) {
      sub_10003B098(&v119, *(void **)(a1 + 400), *(void *)(a1 + 408));
    }
    else {
      std::string v119 = *(std::string *)(a1 + 400);
    }
    sub_1005D4358(&v119, v117, (uint64_t)&v145);
    uint64_t v113 = sub_10003AB28(v112);
    strlen(off_1009FBDC0);
    sub_10003AB28(v113);
    if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v145.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v119.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v152.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1005D60DC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 105) < 0) {
    operator delete(*(void **)(v1 - 128));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1005D6550(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_10003AB28(a2);
  strlen(off_1009FBDC0);

  return sub_10003AB28(v2);
}

uint64_t sub_1005D65B0(uint64_t a1, unsigned int a2, int a3, char a4)
{
  uint64_t v23 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v12 = 0u;
  memset(v10, 0, sizeof(v10));
  sub_1000419CC((uint64_t)v10);
  sub_1005D46B4(a1, (uint64_t)v10, a2, a3, a4);
  sub_1005D6550(v8, (uint64_t)v10);
  std::stringbuf::str();
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1005D6734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1005D6748(uint64_t a1, unsigned int a2, int a3, char a4)
{
  uint64_t v25 = 0;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v14 = 0u;
  memset(v12, 0, sizeof(v12));
  sub_1000419CC((uint64_t)v12);
  sub_1005D46B4(a1, (uint64_t)v12, a2, a3, a4);
  sub_10003AB28((uint64_t)v12);
  if (*(_DWORD *)(a1 + 424) < 3u) {
    sub_10003AB28((uint64_t)v12);
  }
  uint64_t v8 = sub_10003AB28((uint64_t)v12);
  uint64_t v9 = sub_10003AB28(v8);
  strlen(off_1009FBDC0);
  uint64_t v10 = sub_10003AB28(v9);
  sub_1005D6550(v10, (uint64_t)v12);
  std::stringbuf::str();
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1005D6964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1005D6978(uint64_t a1)
{
  *(void *)a1 = off_1009B9390;
  if (*(char *)(a1 + 455) < 0) {
    operator delete(*(void **)(a1 + 432));
  }

  return sub_1005D4134(a1);
}

void sub_1005D69D8(uint64_t a1)
{
  *(void *)a1 = off_1009B9390;
  if (*(char *)(a1 + 455) < 0) {
    operator delete(*(void **)(a1 + 432));
  }
  sub_1005D4134(a1);

  operator delete();
}

void sub_1005D6A4C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        sub_100378BC4((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1005D6AE4(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 128;
        sub_100378ECC((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1005D6D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

double sub_1005D6F44(uint64_t a1)
{
  *(void *)a1 = off_1009B9400;
  *(void *)(a1 + 8) = off_1009B9448;
  *(_WORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 18) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  return result;
}

void sub_1005D6F9C(uint64_t a1)
{
  uint64_t v2 = qword_100A19FC0;
  if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "LeSensorTrackingManager: initialize", v3, 2u);
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009B9648);
  }
  sub_10026B36C((uint64_t)off_1009F8068 + 64, a1);
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009B9668);
  }
  sub_1000A7BDC((uint64_t)off_1009F85C0 + 1872, a1 + 8);
}

void sub_1005D7080(uint64_t a1)
{
  uint64_t v2 = qword_100A19FC0;
  if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 19);
    int v4 = *(unsigned __int8 *)(a1 + 20);
    v12[0] = 67109376;
    v12[1] = v3;
    __int16 v13 = 1024;
    int v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Stack will start: ftotalTrackingCapacity: %d, fremainingTrackingCapacity: %d", (uint8_t *)v12, 0xEu);
  }
  *(unsigned char *)(a1 + 64) = 0;
  uint64_t v5 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 2416))(v5))
  {
    *(unsigned char *)(a1 + 16) = 1;
    uint64_t v6 = sub_10003FB34();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 2424))(v6)) {
      *(unsigned char *)(a1 + 17) = 1;
    }
    uint64_t v7 = sub_10003FB34();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 2432))(v7)) {
      *(unsigned char *)(a1 + 18) = 1;
    }
    uint64_t v8 = +[NSMutableDictionary dictionary];
    uint64_t v9 = *(void **)(a1 + 48);
    *(void *)(a1 + 48) = v8;

    uint64_t v10 = +[NSMutableSet set];
    uint64_t v11 = *(void **)(a1 + 56);
    *(void *)(a1 + 56) = v10;

    *(_WORD *)(a1 + 19) = 25700;
  }
}

void sub_1005D722C(uint64_t a1)
{
  uint64_t v2 = qword_100A19FC0;
  if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 56) count];
    id v4 = [*(id *)(a1 + 48) count];
    uint64_t v5 = (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3;
    *(_DWORD *)long long buf = 134218496;
    id v10 = v3;
    __int16 v11 = 2048;
    id v12 = v4;
    __int16 v13 = 2048;
    uint64_t v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Stack did stop fcurrentlyTrackedDevices: %lu, fsensorTrackingRequests: %lu, fsensorTrackingSessions: %lu", buf, 0x20u);
  }
  uint64_t v6 = sub_100019878();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _OWORD v8[2] = sub_1005D739C;
  v8[3] = &unk_100997528;
  void v8[4] = a1;
  sub_1000197D8(v6, v8);
  uint64_t v7 = qword_100A19FC0;
  if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "LeSensorTrackingManager::stackWillStop exit", buf, 2u);
  }
}

void *sub_1005D739C(void *result)
{
  uint64_t v1 = result[4];
  if (*(unsigned char *)(v1 + 16) || *(unsigned char *)(v1 + 18))
  {
    *(_WORD *)(v1 + 19) = 0;
    *(void *)(v1 + 32) = *(void *)(v1 + 24);
    [*(id *)(v1 + 56) removeAllObjects];
    uint64_t v2 = *(void **)(v1 + 48);
    return [v2 removeAllObjects];
  }
  return result;
}

uint64_t sub_1005D7400(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, unsigned __int8 a8, __int16 a9, char a10, unsigned __int8 a11, unsigned __int8 a12, char a13, char a14, int a15, int a16)
{
  id v23 = a3;
  long long v24 = v23;
  if (*(unsigned char *)(a1 + 16) || *(unsigned char *)(a1 + 18))
  {
    if (!a2)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_ERROR)) {
        sub_100781CA4();
      }
      goto LABEL_32;
    }
    if (!v23)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_ERROR)) {
        sub_100781CD8();
      }
      goto LABEL_32;
    }
    if (a4 >= 0x65)
    {
      uint64_t v25 = qword_100A19FC0;
      if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_ERROR)) {
        sub_100781D0C(a4, v25, v26, v27, v28, v29, v30, v31);
      }
LABEL_32:
      uint64_t v40 = 3;
      goto LABEL_33;
    }
    if ((a5 & 0x80) != 0)
    {
      uint64_t v41 = qword_100A19FC0;
      if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_ERROR)) {
        sub_100781D78(a5, v41, v42, v43, v44, v45, v46, v47);
      }
      goto LABEL_32;
    }
    sub_10003AE4C(a2, (uint64_t)__p);
    if (v81[9] >= 0) {
      uint64_t v32 = __p;
    }
    else {
      uint64_t v32 = *(unsigned char **)__p;
    }
    uint64_t v77 = +[NSString stringWithUTF8String:v32];
    if ((v81[9] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    uint64_t v33 = qword_100A19FC0;
    if (!v77)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_ERROR)) {
        sub_100781DE4();
      }
      uint64_t v40 = 1;
      goto LABEL_80;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string __p = 138545410;
      *(void *)&__p[4] = v77;
      *(_WORD *)&unsigned char __p[12] = 2114;
      *(void *)uint64_t v81 = v24;
      *(_WORD *)&v81[8] = 1024;
      *(_DWORD *)&v81[10] = a4;
      *(_WORD *)&v81[14] = 1024;
      *(_DWORD *)&v81[16] = a5;
      *(_WORD *)uint64_t v82 = 1024;
      *(_DWORD *)&v82[2] = a7;
      __int16 v83 = 1024;
      int v84 = a9;
      __int16 v85 = 1024;
      int v86 = HIBYTE(a9);
      __int16 v87 = 1024;
      int v88 = a11;
      __int16 v89 = 1024;
      int v90 = a12;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "startTracking for session: %{public}@ for device %{public}@ for type %d with timeout value %d rssi:%d:%d:%d eCfg:%d:%d", __p, 0x40u);
    }
    uint64_t v76 = [*(id *)(a1 + 48) objectForKeyedSubscript:v77];
    uint64_t v78 = sub_1005D7FA4((uint64_t)v76, v76, v24);
    long long v34 = qword_100A19FC0;
    if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v69 = *(void *)(a1 + 48);
      *(_DWORD *)std::string __p = 138543874;
      *(void *)&__p[4] = v69;
      *(_WORD *)&unsigned char __p[12] = 2114;
      *(void *)uint64_t v81 = v76;
      *(_WORD *)&v81[8] = 2114;
      *(void *)&v81[10] = v78;
      _os_log_debug_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "Current sensor tracking requests: %{public}@, tracking devices set %{public}@ for foundDevice %{public}@", __p, 0x20u);
    }
    sub_1005D8130(a1);
    if (v78)
    {
      uint64_t v35 = [v78 appleTypes];
      uint64_t v36 = +[NSNumber numberWithUnsignedChar:a4];
      unsigned __int8 v37 = [v35 containsObject:v36];

      if (v37)
      {
        uint64_t v38 = qword_100A19FC0;
        if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v39 = [v78 appleTypes];
          *(_DWORD *)std::string __p = 138543874;
          *(void *)&__p[4] = v24;
          *(_WORD *)&unsigned char __p[12] = 1024;
          *(_DWORD *)uint64_t v81 = a4;
          *(_WORD *)&v81[4] = 2114;
          *(void *)&v81[6] = v39;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Already tracking same device %{public}@ and same type: %d, %{public}@", __p, 0x1Cu);
        }
      }
      else
      {
        long long v56 = [v78 appleTypes];
        BOOL v57 = v56 == 0;

        if (v57)
        {
          uint64_t v58 = +[NSMutableSet set];
          [v78 setAppleTypes:v58];
        }
        uint64_t v59 = [v78 appleTypes];
        uint64_t v60 = +[NSNumber numberWithUnsignedChar:a4];
        [v59 addObject:v60];

        uint64_t v61 = qword_100A19FC0;
        if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v62 = [v78 appleTypes];
          sub_100781EE8(v62, buf, v61);
        }
        if ([v78 currentState] == 1
          || [v78 currentState] == 3)
        {
          if (qword_1009F8788 != -1) {
            dispatch_once(&qword_1009F8788, &stru_1009B9688);
          }
          sub_1002FDF88((uint64_t)off_1009F8780, a2, v24, (uint64_t)[v78 currentState], a4);
        }
      }
      if (sub_1005D81F0(a1, v78))
      {
        uint64_t v40 = sub_1005D8438(a1, 0, (uint64_t)[v78 rssiIncreaseScanThreshold], (uint64_t)[v78 rssiIncreaseScanWindowThreshold], (uint64_t)[v78 rssiIncreaseScanIntervalThreshold], (uint64_t)[v78 rssiIncreaseScanTimeoutThreshold], (uint64_t)[v78 sensorTimeoutBetweenIncreaseScan]);
        if (v40)
        {
          if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_ERROR)) {
            sub_100781E18();
          }
          goto LABEL_79;
        }
      }
LABEL_77:
      uint64_t v71 = qword_100A19FC0;
      uint64_t v40 = 0;
      if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v72 = *(void *)(a1 + 48);
        uint64_t v73 = *(void *)(a1 + 56);
        *(_DWORD *)std::string __p = 138543618;
        *(void *)&__p[4] = v72;
        *(_WORD *)&unsigned char __p[12] = 2114;
        *(void *)uint64_t v81 = v73;
        _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "Now tracking requests: %{public}@ with currently tracking devices: %{public}@", __p, 0x16u);
        uint64_t v40 = 0;
      }
      goto LABEL_79;
    }
    __int16 v49 = qword_100A19FC0;
    if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string __p = 0;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "New session or new device to add in trackign list", __p, 2u);
    }
    *(_DWORD *)((char *)&v74 + 10) = a16;
    *(_DWORD *)((char *)&v74 + 6) = a15;
    BYTE5(v74) = a14;
    BYTE4(v74) = a12;
    BYTE3(v74) = a11;
    BYTE2(v74) = a10;
    LOWORD(v74) = a9;
    uint64_t v50 = -[TrackingDevice initWithDevice:type:timeoutValue:targetCore:rssiThreshold:rssiThresholdGone:invalidRssiHandling:rssiPrecision:rssiPrecisionGone:eventConfiguration:vseBuffering:rssiIncreaseScanThreshold:rssiIncreaseScanWindowThreshold:rssiIncreaseScanIntervalThreshold:rssiIncreaseScanTimeoutThreshold:sensorTimeoutBetweenIncreaseScan:]([TrackingDevice alloc], "initWithDevice:type:timeoutValue:targetCore:rssiThreshold:rssiThresholdGone:invalidRssiHandling:rssiPrecision:rssiPrecisionGone:eventConfiguration:vseBuffering:rssiIncreaseScanThreshold:rssiIncreaseScanWindowThreshold:rssiIncreaseScanIntervalThreshold:rssiIncreaseScanTimeoutThreshold:sensorTimeoutBetweenIncreaseScan:", v24, a4, a5, a6, a7, a8, v74);
    uint64_t v51 = sub_1005D85D4(a1, v24);
    uint64_t v52 = qword_100A19FC0;
    BOOL v53 = os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_DEFAULT);
    long long v75 = v51;
    if (v51)
    {
      if (v53)
      {
        unsigned int v54 = [v51 currentState] - 1;
        if (v54 > 2) {
          CFStringRef v55 = @"Not Set";
        }
        else {
          CFStringRef v55 = off_1009B96C8[(char)v54];
        }
        *(_DWORD *)std::string __p = 138543362;
        *(void *)&__p[4] = v55;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "Some other sesssion is tracking this device with state: %{public}@", __p, 0xCu);
      }
      -[TrackingDevice setCurrentState:](v50, "setCurrentState:", [v51 currentState]);
      if ([(TrackingDevice *)v50 currentState] == 1
        || [(TrackingDevice *)v50 currentState] == 3)
      {
        if (qword_1009F8788 != -1) {
          dispatch_once(&qword_1009F8788, &stru_1009B9688);
        }
        sub_1002FDF88((uint64_t)off_1009F8780, a2, v24, [(TrackingDevice *)v50 currentState], a4);
      }
    }
    else
    {
      if (v53)
      {
        unsigned int v63 = [(TrackingDevice *)v50 timeoutValue];
        unsigned int v64 = [(TrackingDevice *)v50 rssiThreshold];
        unsigned int v65 = [(TrackingDevice *)v50 rssiPrecision];
        unsigned int v66 = [(TrackingDevice *)v50 invalidRssiHandling];
        unsigned int v67 = [(TrackingDevice *)v50 eventConfiguration];
        unsigned int v68 = [(TrackingDevice *)v50 vseBuffering];
        *(_DWORD *)std::string __p = 67110400;
        *(_DWORD *)&__p[4] = v63;
        *(_WORD *)&__p[8] = 1024;
        *(_DWORD *)&__p[10] = v64;
        *(_WORD *)uint64_t v81 = 1024;
        *(_DWORD *)&v81[2] = v65;
        *(_WORD *)&v81[6] = 1024;
        *(_DWORD *)&v81[8] = v66;
        *(_WORD *)&v81[12] = 1024;
        *(_DWORD *)&v81[14] = v67;
        *(_WORD *)&v81[18] = 1024;
        *(_DWORD *)uint64_t v82 = v68;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "No other session is tracking this device - start tracking with timeout: %d rssi:%d:%d handling:%d eventCfg:%d vseBuf:%d", __p, 0x26u);
      }
      uint64_t v40 = sub_1005D87B0(a1, v24, [(TrackingDevice *)v50 timeoutValue], [(TrackingDevice *)v50 targetCore], [(TrackingDevice *)v50 rssiThreshold], [(TrackingDevice *)v50 rssiThresholdGone], [(TrackingDevice *)v50 invalidRssiHandling], [(TrackingDevice *)v50 rssiPrecision], [(TrackingDevice *)v50 rssiPrecisionGone], [(TrackingDevice *)v50 eventConfiguration], [(TrackingDevice *)v50 vseBuffering]);
      if (v40)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_ERROR)) {
          sub_100781E80();
        }
        goto LABEL_75;
      }
    }
    if (v76)
    {
      [v76 addObject:v50];
    }
    else
    {
      long long v70 = +[NSMutableSet setWithObject:v50];
      [*(id *)(a1 + 48) setObject:v70 forKeyedSubscript:v77];

      sub_1005D8A54((void *)a1, a2);
    }
    if (!sub_1005D81F0(a1, v50)
      || (uint64_t v40 = sub_1005D8438(a1, 0, [(TrackingDevice *)v50 rssiIncreaseScanThreshold], [(TrackingDevice *)v50 rssiIncreaseScanWindowThreshold], [(TrackingDevice *)v50 rssiIncreaseScanIntervalThreshold], [(TrackingDevice *)v50 rssiIncreaseScanTimeoutThreshold], [(TrackingDevice *)v50 sensorTimeoutBetweenIncreaseScan]), !v40))
    {

      goto LABEL_77;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_ERROR)) {
      sub_100781E18();
    }
LABEL_75:

LABEL_79:
LABEL_80:

    goto LABEL_33;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_ERROR)) {
    sub_100781C70();
  }
  uint64_t v40 = 11;
LABEL_33:

  return v40;
}

void sub_1005D7ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  _Unwind_Resume(a1);
}

id sub_1005D7FA4(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v6 = v4;
  id v7 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v15;
    while (2)
    {
      for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v8) {
          objc_enumerationMutation(v6);
        }
        id v10 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        __int16 v11 = [v10 deviceUUID];
        unsigned __int8 v12 = [v11 isEqual:v5];

        if (v12)
        {
          id v7 = v10;
          goto LABEL_11;
        }
      }
      id v7 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  return v7;
}

void sub_1005D80FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1005D8130(uint64_t a1)
{
  uint64_t v5 = 0;
  id v6 = &v5;
  uint64_t v7 = 0x2020000000;
  char v8 = 0;
  uint64_t v1 = *(void **)(a1 + 48);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_1005D9574;
  void v4[3] = &unk_1009B94C8;
  void v4[4] = &v5;
  [v1 enumerateKeysAndObjectsUsingBlock:v4];
  uint64_t v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1005D81D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1005D81F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  v18[0] = 0;
  v18[1] = v18;
  void v18[2] = 0x3032000000;
  v18[3] = sub_10004D10C;
  void v18[4] = sub_10004CE3C;
  id v19 = 0;
  uint64_t v14 = 0;
  long long v15 = &v14;
  uint64_t v16 = 0x2020000000;
  char v17 = 0;
  id v4 = qword_100A19FC0;
  if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v5 = [v3 rssiIncreaseScanThreshold];
    uint64_t v6 = *(void *)(a1 + 48);
    *(_DWORD *)long long buf = 67109378;
    unsigned int v21 = v5;
    __int16 v22 = 2114;
    uint64_t v23 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "getMinThresholdForAllSessionAskingIncreaseScanParams: %d in %{public}@", buf, 0x12u);
  }
  if (*(unsigned char *)(a1 + 18))
  {
    if (*(unsigned char *)(a1 + 64) || ![v3 rssiIncreaseScanThreshold])
    {
      uint64_t v7 = *(void **)(a1 + 48);
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      void v10[2] = sub_1005D96A4;
      void v10[3] = &unk_1009B94F0;
      id v11 = v3;
      unsigned __int8 v12 = v18;
      __int16 v13 = &v14;
      [v7 enumerateKeysAndObjectsUsingBlock:v10];
      BOOL v8 = *((unsigned char *)v15 + 24) != 0;
    }
    else
    {
      BOOL v8 = 1;
      *((unsigned char *)v15 + 24) = 1;
    }
  }
  else
  {
    BOOL v8 = 0;
  }
  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(v18, 8);

  return v8;
}

void sub_1005D83EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a21, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1005D8438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __int16 v13 = qword_100A19FC0;
  if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_DEFAULT))
  {
    id v14 = [*(id *)(a1 + 56) count];
    int v15 = *(unsigned __int8 *)(a1 + 19);
    int v16 = *(unsigned __int8 *)(a1 + 20);
    int v20 = 134218496;
    id v21 = v14;
    __int16 v22 = 1024;
    int v23 = v15;
    __int16 v24 = 1024;
    int v25 = v16;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "startTrackingForNewDevice - tracked devices: %lu, total: %d, remaining: %d", (uint8_t *)&v20, 0x18u);
  }
  if (a3)
  {
    uint64_t v17 = sub_10003FB34();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v17 + 840))(v17, 1, a3, a4, a5, a6, a7);
    if (!result) {
      *(unsigned char *)(a1 + 64) = 1;
    }
  }
  else
  {
    id v19 = qword_100A19FC0;
    if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = 67109120;
      LODWORD(v21) = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "rssiIncreaseScanThreshold is not configured %d", (uint8_t *)&v20, 8u);
    }
    return 1;
  }
  return result;
}

id sub_1005D85D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v14 = 0;
  int v15 = &v14;
  uint64_t v16 = 0x3032000000;
  uint64_t v17 = sub_10004D10C;
  long long v18 = sub_10004CE3C;
  id v19 = 0;
  id v4 = qword_100A19FC0;
  if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 48);
    *(_DWORD *)long long buf = 138543618;
    id v21 = v3;
    __int16 v22 = 2114;
    uint64_t v23 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "anySessionTrackingThisDevice: %{public}@ in %{public}@", buf, 0x16u);
  }
  uint64_t v6 = *(void **)(a1 + 48);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_1005D94DC;
  void v10[3] = &unk_1009B94A0;
  unsigned __int8 v12 = &v14;
  uint64_t v13 = a1;
  id v11 = v3;
  id v7 = v3;
  [v6 enumerateKeysAndObjectsUsingBlock:v10];
  id v8 = (id)v15[5];

  _Block_object_dispose(&v14, 8);

  return v8;
}

void sub_1005D877C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1005D87B0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8, char a9, unsigned __int8 a10, unsigned __int8 a11)
{
  id v18 = a2;
  if ([*(id *)(a1 + 56) count] == (id)*(unsigned __int8 *)(a1 + 19))
  {
    id v19 = qword_100A19FC0;
    if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_ERROR))
    {
      id v28 = [*(id *)(a1 + 56) count];
      int v29 = *(unsigned __int8 *)(a1 + 19);
      int v30 = *(unsigned __int8 *)(a1 + 20);
      *(_DWORD *)long long buf = 134218496;
      id v34 = v28;
      __int16 v35 = 1024;
      int v36 = v29;
      __int16 v37 = 1024;
      int v38 = v30;
      _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "startTrackingForNewDevice - maxed out tracked devices: %lu, total: %d, remaining: %d", buf, 0x18u);
    }
    uint64_t v20 = 4;
  }
  else
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B96A8);
    }
    id v32 = v18;
    uint64_t v21 = sub_100030DCC((uint64_t)off_1009F7ED8, v18, 0);
    uint64_t v22 = sub_10003FB34();
    *(_WORD *)((char *)&v31 + 3) = __PAIR16__(a11, a10);
    BYTE2(v31) = a9;
    BYTE1(v31) = a8;
    LOBYTE(v31) = a7;
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v22 + 832))(v22, v21, a3, a1 + 19, a1 + 20, a4, a5, a6, v31);
    if (!v20) {
      [*(id *)(a1 + 56) addObject:v32];
    }
    uint64_t v23 = qword_100A19FC0;
    if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_DEFAULT))
    {
      id v24 = [*(id *)(a1 + 56) count];
      int v25 = *(unsigned __int8 *)(a1 + 19);
      int v26 = *(unsigned __int8 *)(a1 + 20);
      *(_DWORD *)long long buf = 134218496;
      id v34 = v24;
      __int16 v35 = 1024;
      int v36 = v25;
      __int16 v37 = 1024;
      int v38 = v26;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "startTrackingForNewDevice - tracked devices: %lu, total: %d, remaining: %d", buf, 0x18u);
    }
    id v18 = v32;
  }

  return v20;
}

void sub_1005D8A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1005D8A54(void *a1, uint64_t a2)
{
  id v4 = qword_100A19FC0;
  if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (uint64_t)(a1[4] - a1[3]) >> 3;
    int v22 = 134217984;
    uint64_t v23 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "addSessionToTrackingSessions: number of currently tracking sessions %lu", (uint8_t *)&v22, 0xCu);
  }
  if (a2)
  {
    uint64_t v6 = (void *)a1[3];
    id v7 = (void *)a1[4];
    id v8 = v6;
    if (v6 != v7)
    {
      while (*v8 != a2)
      {
        if (++v8 == v7)
        {
          id v8 = (void *)a1[4];
          break;
        }
      }
    }
    if (v8 == v7)
    {
      unint64_t v9 = a1[5];
      if ((unint64_t)v7 >= v9)
      {
        uint64_t v10 = v7 - v6;
        if ((unint64_t)(v10 + 1) >> 61) {
          abort();
        }
        uint64_t v11 = v9 - (void)v6;
        uint64_t v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
          uint64_t v12 = v10 + 1;
        }
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v12;
        }
        if (v13) {
          uint64_t v14 = (char *)sub_1000405F8((uint64_t)(a1 + 5), v13);
        }
        else {
          uint64_t v14 = 0;
        }
        int v15 = &v14[8 * v10];
        uint64_t v16 = &v14[8 * v13];
        *(void *)int v15 = a2;
        id v7 = v15 + 8;
        id v18 = (char *)a1[3];
        uint64_t v17 = (char *)a1[4];
        if (v17 != v18)
        {
          do
          {
            uint64_t v19 = *((void *)v17 - 1);
            v17 -= 8;
            *((void *)v15 - 1) = v19;
            v15 -= 8;
          }
          while (v17 != v18);
          uint64_t v17 = (char *)a1[3];
        }
        a1[3] = v15;
        a1[4] = v7;
        a1[5] = v16;
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        *v7++ = a2;
      }
      a1[4] = v7;
    }
    uint64_t v20 = qword_100A19FC0;
    if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = ((uint64_t)v7 - a1[3]) >> 3;
      int v22 = 134217984;
      uint64_t v23 = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Currently tracking sessions: %lu", (uint8_t *)&v22, 0xCu);
    }
  }
}

void sub_1005D8C48(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v8 = v7;
  if (*(unsigned char *)(a1 + 16) || *(unsigned char *)(a1 + 18))
  {
    if (a2)
    {
      if (v7)
      {
        if (a4 < 0x65)
        {
          sub_10003AE4C(a2, (uint64_t)__p);
          if (v40 >= 0) {
            uint64_t v16 = __p;
          }
          else {
            uint64_t v16 = *(unsigned char **)__p;
          }
          uint64_t v17 = +[NSString stringWithUTF8String:v16];
          if (SHIBYTE(v40) < 0) {
            operator delete(*(void **)__p);
          }
          id v18 = qword_100A19FC0;
          if (v17)
          {
            if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v19 = *(void *)(a1 + 48);
              uint64_t v20 = *(void *)(a1 + 56);
              *(_DWORD *)std::string __p = 138544386;
              *(void *)&__p[4] = v17;
              __int16 v38 = 2114;
              uint64_t v39 = v8;
              __int16 v40 = 1024;
              int v41 = a4;
              __int16 v42 = 2114;
              uint64_t v43 = v19;
              __int16 v44 = 2114;
              uint64_t v45 = v20;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "stopTracking for session: %{public}@ for device %{public}@ for type %d with current requests %{public}@ and devices %{public}@", __p, 0x30u);
            }
            uint64_t v21 = [*(id *)(a1 + 48) objectForKeyedSubscript:v17];
            int v22 = sub_1005D7FA4((uint64_t)v21, v21, v8);
            uint64_t v23 = v22;
            if (v22)
            {
              id v24 = [v22 appleTypes];
              int v25 = +[NSNumber numberWithUnsignedChar:a4];
              unsigned int v26 = [v24 containsObject:v25];

              if (v26)
              {
                uint64_t v27 = [v23 appleTypes];
                id v28 = +[NSNumber numberWithUnsignedChar:a4];
                [v27 removeObject:v28];
              }
              int v29 = [v23 appleTypes];
              BOOL v30 = [v29 count] == 0;

              if (v30)
              {
                [v21 removeObject:v23];
                uint64_t v31 = sub_1005D85D4(a1, v8);
                if (!v31)
                {
                  id v32 = qword_100A19FC0;
                  if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)std::string __p = 0;
                    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "No other session is tracking this device - stop tracking", __p, 2u);
                  }
                  sub_1005D9124(a1, v8);
                }
              }
            }
            if (![v21 count])
            {
              uint64_t v33 = qword_100A19FC0;
              if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)std::string __p = 0;
                _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "This session is not tracking any devices, remove session ID from tracking requests", __p, 2u);
              }
              [*(id *)(a1 + 48) removeObjectForKey:v17];
              sub_1005D92B4(a1, v17);
            }
            id v34 = qword_100A19FC0;
            if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v35 = *(void *)(a1 + 48);
              int v36 = *(void **)(a1 + 56);
              *(_DWORD *)std::string __p = 138543618;
              *(void *)&__p[4] = v35;
              __int16 v38 = 2114;
              uint64_t v39 = v36;
              _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Now tracking requests: %{public}@ with currently tracking devices: %{public}@", __p, 0x16u);
            }
          }
          else if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_ERROR))
          {
            sub_100782048();
          }
        }
        else
        {
          unint64_t v9 = qword_100A19FC0;
          if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_ERROR)) {
            sub_100781FDC(a4, v9, v10, v11, v12, v13, v14, v15);
          }
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_ERROR))
      {
        sub_100781FA8();
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_ERROR))
    {
      sub_100781F74();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_ERROR))
  {
    sub_100781F40();
  }
}