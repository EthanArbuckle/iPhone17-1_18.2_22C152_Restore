unsigned char *sub_1002BA6B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  BOOL v18;
  uint64_t v19;
  void *v20;
  void *v21;
  unint64_t *v22;
  unint64_t *v23;
  void *v24;
  unint64_t v25;
  void *v26;
  unint64_t v27;
  BOOL v28;
  void *v29;
  uint64_t v30;
  void *v32;
  void *v33;
  uint64_t *v34;
  long long v35;
  long long v36;
  long long v37;
  long long v38;
  void v39[2];
  char v40;
  unsigned char v41[128];

  v1 = *(void *)(a1 + 32);
  v40 = 0;
  sub_10001B8E0(&v40);
  if (sub_10022A2F0())
  {
    v2 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 88))(v2))
    {
      sub_10016CEC8();
      sub_1000E7378();
      sub_10001B910(&v40);
      *(unsigned char *)(v1 + 56) = 0;
      v39[0] = 0;
      v39[1] = 0;
      sub_10003AED0((uint64_t)v39, v1 + 80);
      v3 = *(void **)(v1 + 144);
      v33 = (void *)(v1 + 144);
      v4 = (void *)(v1 + 152);
      if (v3 != (void *)(v1 + 152))
      {
        v32 = (void *)(v1 + 152);
        do
        {
          v5 = v3[5];
          v7 = *(uint64_t **)(v5 + 32);
          v6 = *(uint64_t **)(v5 + 40);
          v34 = v6;
          while (v7 != v6)
          {
            v8 = v1;
            v9 = *v7;
            v37 = 0u;
            v38 = 0u;
            v35 = 0u;
            v36 = 0u;
            v10 = *(id *)(v9 + 40);
            v11 = [v10 countByEnumeratingWithState:&v35 objects:v41 count:16];
            if (v11)
            {
              v12 = *(void *)v36;
              do
              {
                for (i = 0; i != v11; i = (char *)i + 1)
                {
                  if (*(void *)v36 != v12) {
                    objc_enumerationMutation(v10);
                  }
                  v14 = *(void **)(*((void *)&v35 + 1) + 8 * i);
                  v15 = sub_1002C5648();
                  sub_1002C8D38(v15, (__int16)[v14 pipeHandle]);
                }
                v11 = [v10 countByEnumeratingWithState:&v35 objects:v41 count:16];
              }
              while (v11);
            }

            v1 = v8;
            [*(id *)(v9 + 40) removeAllObjects];
            ++v7;
            v6 = v34;
          }
          v16 = (void *)v3[1];
          if (v16)
          {
            do
            {
              v17 = v16;
              v16 = (void *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              v17 = (void *)v3[2];
              v18 = *v17 == (void)v3;
              v3 = v17;
            }
            while (!v18);
          }
          v3 = v17;
          v4 = v32;
        }
        while (v17 != v32);
        v3 = (void *)*v33;
      }
      if (v3 != v4)
      {
        do
        {
          v19 = v3[5];
          if (*(unsigned char *)(v19 + 56))
          {
            sub_1002C4260(v19);
            operator delete();
          }
          v20 = (void *)v3[1];
          if (v20)
          {
            do
            {
              v21 = v20;
              v20 = (void *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              v21 = (void *)v3[2];
              v18 = *v21 == (void)v3;
              v3 = v21;
            }
            while (!v18);
          }
          v3 = v21;
        }
        while (v21 != v4);
      }
      v23 = *(unint64_t **)(v1 + 168);
      v22 = *(unint64_t **)(v1 + 176);
      while (v23 != v22)
      {
        v24 = (void *)*v4;
        if (*v4)
        {
          v25 = *v23;
          v26 = v4;
          do
          {
            v27 = v24[4];
            v28 = v27 >= v25;
            if (v27 >= v25) {
              v29 = v24;
            }
            else {
              v29 = v24 + 1;
            }
            if (v28) {
              v26 = v24;
            }
            v24 = (void *)*v29;
          }
          while (*v29);
          if (v26 != v4 && v25 >= v26[4])
          {
            v30 = *(void *)v26[5];
            if (v30)
            {
              (*(void (**)(uint64_t, unint64_t *, uint64_t))(*(void *)v30 + 24))(v30, v23 + 1, 1);
              v22 = *(unint64_t **)(v1 + 176);
            }
          }
        }
        v23 += 6;
      }
      sub_1002C4E98((uint64_t *)(v1 + 168));
      *(void *)(v1 + 200) = *(void *)(v1 + 192);
      sub_10003AFB4((uint64_t)v39);
    }
  }
  return sub_10001B8AC(&v40);
}

void sub_1002BAA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
}

void sub_1002BAA94(uint64_t a1)
{
}

uint64_t sub_1002BAA9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100035F54();
  if ((*(uint64_t (**)(uint64_t))(*(void *)v8 + 88))(v8))
  {
    v9 = *(void **)(a1 + 144);
    if (v9 == (void *)(a1 + 152))
    {
LABEL_10:
      unint64_t v20 = 0;
      if (qword_1009F8168 != -1) {
        dispatch_once(&qword_1009F8168, &stru_1009A2AE8);
      }
      if (!sub_100009254(qword_1009F8160, a4))
      {
        __p[0] = 0;
        __p[1] = 0;
        sub_10003AED0((uint64_t)__p, a1 + 80);
        v15 = qword_100A19EA0;
        if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_DEFAULT))
        {
          if (*(char *)(a4 + 23) >= 0) {
            uint64_t v16 = a4;
          }
          else {
            uint64_t v16 = *(void *)a4;
          }
          buf[0] = 136446210;
          *(void *)&buf[1] = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Registering scalable pipe session \"%{public}s\"", (uint8_t *)buf, 0xCu);
        }
        if (qword_1009F8168 != -1) {
          dispatch_once(&qword_1009F8168, &stru_1009A2AE8);
        }
        uint64_t v19 = sub_100019C0C((void *)qword_1009F8160, v20);
        operator new();
      }
      if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_ERROR)) {
        sub_10075168C();
      }
    }
    else
    {
      while (*(void *)v9[5] != a2)
      {
        v10 = (void *)v9[1];
        if (v10)
        {
          do
          {
            v11 = v10;
            v10 = (void *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (void *)v9[2];
            BOOL v12 = *v11 == (void)v9;
            v9 = v11;
          }
          while (!v12);
        }
        v9 = v11;
        if (v11 == (void *)(a1 + 152)) {
          goto LABEL_10;
        }
      }
      v13 = qword_100A19EA0;
      if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_ERROR))
      {
        sub_10003AE4C(v9[4], (uint64_t)__p);
        v17 = v22 >= 0 ? __p : (void **)__p[0];
        uint64_t v18 = *(char *)(a3 + 23) >= 0 ? a3 : *(void *)a3;
        buf[0] = 136446466;
        *(void *)&buf[1] = v17;
        __int16 v24 = 2082;
        uint64_t v25 = v18;
        _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Duplicate check-in message from session \"%{public}s\" in application \"%{public}s\"", (uint8_t *)buf, 0x16u);
        if (v22 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_ERROR))
  {
    sub_1007516F8();
  }
  return 0;
}

void sub_1002BAE18()
{
}

uint64_t sub_1002BAE54(uint64_t a1, uint64_t a2)
{
  v24[0] = 0;
  v24[1] = 0;
  sub_10003AED0((uint64_t)v24, a1 + 80);
  v4 = *(uint64_t **)(a1 + 144);
  if (v4 != (uint64_t *)(a1 + 152))
  {
    while (1)
    {
      uint64_t v5 = v4[5];
      if (*(void *)v5 == a2) {
        break;
      }
      v6 = (uint64_t *)v4[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (uint64_t *)v4[2];
          BOOL v8 = *v7 == (void)v4;
          v4 = v7;
        }
        while (!v8);
      }
      v4 = v7;
      if (v7 == (uint64_t *)(a1 + 152)) {
        return sub_10003AFB4((uint64_t)v24);
      }
    }
    uint64_t v9 = v4[4];
    v10 = qword_100A19EA0;
    if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_DEFAULT))
    {
      sub_10003AE4C(v9, (uint64_t)__p);
      v11 = v23 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v26 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Unregistering scalable pipe session \"%{public}s\"", buf, 0xCu);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
    }
    int v12 = *(unsigned __int8 *)(v5 + 57);
    v13 = *(void **)(a1 + 168);
    uint64_t v14 = *(void *)(a1 + 176);
    while (v13 != (void *)v14)
    {
      if (v9 == *v13)
      {
        sub_1002C4EE8((uint64_t)__p, (uint64_t)(v13 + 6), v14, (uint64_t)v13);
        uint64_t v14 = v15;
        for (uint64_t i = *(void *)(a1 + 176); i != v14; i -= 48)
        {
          if (*(char *)(i - 17) < 0) {
            operator delete(*(void **)(i - 40));
          }
        }
        *(void *)(a1 + 176) = v14;
      }
      else
      {
        v13 += 6;
      }
    }
    v17 = *(uint64_t **)(v5 + 32);
    if (*(uint64_t **)(v5 + 40) == v17) {
      goto LABEL_38;
    }
    *(unsigned char *)(v5 + 56) = 1;
    *(void *)uint64_t v5 = 0;
    do
    {
      uint64_t v18 = *v17;
      if (!*(unsigned char *)(*v17 + 39) && !sub_1002BB188(a1, v9, (const void **)*v17))
      {
        uint64_t v19 = *(uint64_t **)(v5 + 40);
        uint64_t v20 = (char *)v19 - (char *)(v17 + 1);
        if (v19 != v17 + 1) {
          memmove(v17, v17 + 1, (char *)v19 - (char *)(v17 + 1));
        }
        *(void *)(v5 + 40) = (char *)v17 + v20;

        if (*(char *)(v18 + 23) < 0) {
          operator delete(*(void **)v18);
        }
        operator delete();
      }
      ++v17;
    }
    while (v17 != *(uint64_t **)(v5 + 40));
    if (v17 == *(uint64_t **)(v5 + 32))
    {
LABEL_38:
      sub_10004D3B8((uint64_t **)(a1 + 144), v4);
      operator delete(v4);
      sub_1002C4260(v5);
      operator delete();
    }
    if (v12) {
      sub_1002BB3CC(a1);
    }
  }
  return sub_10003AFB4((uint64_t)v24);
}

void sub_1002BB160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002BB188(uint64_t a1, uint64_t a2, const void **a3)
{
  v6 = qword_100A19EA0;
  if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_DEFAULT))
  {
    v7 = a3;
    if (*((char *)a3 + 23) < 0) {
      v7 = *a3;
    }
    sub_10003AE4C(a2, (uint64_t)__p);
    if (v21 >= 0) {
      BOOL v8 = __p;
    }
    else {
      BOOL v8 = *(unsigned char **)__p;
    }
    *(_DWORD *)buf = 136446466;
    char v23 = v7;
    __int16 v24 = 2082;
    uint64_t v25 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Unregistering endpoint \"%{public}s\" on session \"%{public}s\"", buf, 0x16u);
    if (v21 < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (*(unsigned char *)(a1 + 56))
  {
    *((unsigned char *)a3 + 39) = 1;
    buf[0] = 0;
    sub_10001B8E0(buf);
    if (*((char *)a3 + 23) < 0)
    {
      v10 = *a3;
      uint64_t v9 = a3[1];
    }
    else
    {
      LODWORD(v9) = *((unsigned __int8 *)a3 + 23);
      v10 = a3;
    }
    unsigned int v12 = v9 + 1;
    unsigned int v13 = *((_DWORD *)a3 + 7) - 1;
    if (v13 > 3) {
      int v14 = 1;
    }
    else {
      int v14 = dword_1007BB7D0[v13];
    }
    int v15 = sub_1000EA0F4(v10, v12, *((unsigned int *)a3 + 6), v14);
    if (v15)
    {
      uint64_t v16 = qword_100A19EA0;
      if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_FAULT))
      {
        if (*((char *)a3 + 23) < 0) {
          a3 = (const void **)*a3;
        }
        *(_DWORD *)__p = 136446466;
        *(void *)&__p[4] = a3;
        __int16 v19 = 1024;
        int v20 = v15;
        _os_log_fault_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "Couldn't unregister valid endpoint \"%{public}s\" with result %{bluetooth:OI_STATUS}u", __p, 0x12u);
      }
      uint64_t v11 = 0;
    }
    else
    {
      uint64_t v11 = 10;
    }
    sub_10001B8AC(buf);
  }
  else
  {
    if ([(id)a3[5] count] && os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_FAULT)) {
      sub_100751764();
    }
    return 0;
  }
  return v11;
}

void sub_1002BB3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10001B8AC(va);
  _Unwind_Resume(a1);
}

void sub_1002BB3CC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    v1 = *(void **)(a1 + 144);
    v2 = (void *)(a1 + 152);
    if (v1 != (void *)(a1 + 152))
    {
      do
      {
        uint64_t v3 = v1[5];
        if (*(unsigned char *)(v3 + 57))
        {
          if (!*(unsigned char *)(v3 + 56)) {
            return;
          }
          uint64_t v4 = v1[4];
          uint64_t v5 = qword_100A19EA0;
          if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_DEFAULT))
          {
            sub_10003AE4C(v4, (uint64_t)__p);
            v6 = v11 >= 0 ? __p : (void **)__p[0];
            *(_DWORD *)buf = 136446210;
            unsigned int v13 = v6;
            _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Session %{public}s has link requirements but it's zombied", buf, 0xCu);
            if (v11 < 0) {
              operator delete(__p[0]);
            }
          }
        }
        v7 = (void *)v1[1];
        if (v7)
        {
          do
          {
            BOOL v8 = v7;
            v7 = (void *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            BOOL v8 = (void *)v1[2];
            BOOL v9 = *v8 == (void)v1;
            v1 = v8;
          }
          while (!v9);
        }
        v1 = v8;
      }
      while (v8 != v2);
    }
    LOBYTE(__p[0]) = 0;
    sub_10001B8E0(__p);
    sub_1000E4824();
    sub_10001B8AC(__p);
  }
}

void sub_1002BB544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10001B8AC(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002BB560(uint64_t a1, unint64_t a2, void *a3, int a4, unsigned int a5, int a6, int a7, int a8, char a9)
{
  v125[0] = 0;
  v125[1] = 0;
  sub_10003AED0((uint64_t)v125, a1 + 80);
  v17 = (void *)(a1 + 152);
  uint64_t v16 = *(void **)(a1 + 152);
  if (!v16) {
    goto LABEL_222;
  }
  uint64_t v18 = (void *)(a1 + 152);
  do
  {
    unint64_t v19 = v16[4];
    BOOL v20 = v19 >= a2;
    if (v19 >= a2) {
      char v21 = v16;
    }
    else {
      char v21 = v16 + 1;
    }
    if (v20) {
      uint64_t v18 = v16;
    }
    uint64_t v16 = (void *)*v21;
  }
  while (*v21);
  if (v18 == v17 || v18[4] > a2)
  {
LABEL_222:
    if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_FAULT))
    {
      sub_10003AE4C(a2, (uint64_t)__p);
      sub_1007517DC();
    }
LABEL_14:
    uint64_t v22 = 1;
    goto LABEL_15;
  }
  uint64_t v24 = *((unsigned __int8 *)a3 + 23);
  if ((v24 & 0x80u) != 0) {
    uint64_t v24 = a3[1];
  }
  if (!v24)
  {
    uint64_t v22 = 5;
    goto LABEL_15;
  }
  if (a5 == 4)
  {
    sub_10003AE4C(a2, (uint64_t)__p);
    unint64_t v25 = __p[23];
    char v26 = __p[23];
    v27 = *(unsigned char **)__p;
    if (__p[23] < 0) {
      unint64_t v25 = *(void *)&__p[8];
    }
    else {
      v27 = __p;
    }
    if (v25 >= 0x1F) {
      unint64_t v25 = 31;
    }
    if (!v25) {
      goto LABEL_60;
    }
    v28 = &v27[v25];
    v29 = v27;
    v30 = v28;
    do
    {
      if (*v29 == 99)
      {
        uint64_t v31 = &_mh_execute_header.magic + 1;
        while (v31 != 31)
        {
          if (&v29[v31] == v28) {
            goto LABEL_37;
          }
          int v32 = v29[v31];
          int v33 = aComAppleSharin_0[v31++];
          if (v32 != v33) {
            goto LABEL_28;
          }
        }
        v30 = v29;
      }
LABEL_28:
      ++v29;
    }
    while (v29 != v28);
    if (v30 == v28 || v30 != v27) {
      goto LABEL_60;
    }
    unint64_t v34 = *((unsigned __int8 *)a3 + 23);
    if ((v34 & 0x80u) == 0) {
      v35 = a3;
    }
    else {
      v35 = (unsigned char *)*a3;
    }
    if ((v34 & 0x80u) != 0) {
      unint64_t v34 = a3[1];
    }
    if (v34 >= 0x1D) {
      unint64_t v34 = 29;
    }
    if (!v34) {
      goto LABEL_60;
    }
LABEL_37:
    v36 = &v35[v34];
    v37 = v35;
    v38 = v36;
    do
    {
      if (*v37 == 99)
      {
        uint64_t v39 = &_mh_execute_header.magic + 1;
        while (v39 != 29)
        {
          if (&v37[v39] == v36) {
            goto LABEL_57;
          }
          int v40 = v37[v39];
          int v41 = aComAppleSharin_1[v39++];
          if (v40 != v41) {
            goto LABEL_49;
          }
        }
        v38 = v37;
      }
LABEL_49:
      ++v37;
    }
    while (v37 != v36);
LABEL_57:
    if (v38 != v36 && v38 == v35)
    {
      char v42 = 1;
    }
    else
    {
LABEL_60:
      sub_10003AE4C(a2, (uint64_t)buf);
      unint64_t v43 = HIBYTE(v127);
      if (v127 >= 0) {
        v44 = buf;
      }
      else {
        v44 = *(unsigned char **)buf;
      }
      if (v127 < 0) {
        unint64_t v43 = *(void *)&buf[8];
      }
      uint64_t v45 = 15;
      if (v43 < 0xF) {
        uint64_t v45 = v43;
      }
      v46 = &v44[v45];
      if (v45)
      {
        v47 = v44;
        v48 = &v44[v45];
        do
        {
          if (*v47 == 99)
          {
            uint64_t v49 = &_mh_execute_header.magic + 1;
            while (v49 != 15)
            {
              if (&v47[v49] == v46) {
                goto LABEL_79;
              }
              int v50 = v47[v49];
              int v51 = aComAppleLeapp[v49++];
              if (v50 != v51) {
                goto LABEL_70;
              }
            }
            v48 = v47;
          }
LABEL_70:
          ++v47;
        }
        while (v47 != v46);
      }
      else
      {
        v48 = v44;
      }
LABEL_79:
      BOOL v52 = v48 != v46 && v48 == v44;
      char v42 = v52;
      if (SHIBYTE(v127) < 0) {
        operator delete(*(void **)buf);
      }
      char v26 = __p[23];
    }
    if (v26 < 0) {
      operator delete(*(void **)__p);
    }
    if ((v42 & 1) == 0)
    {
      v85 = qword_100A19EA0;
      if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_ERROR))
      {
        sub_10003AE4C(a2, (uint64_t)__p);
        v86 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
        v87 = *((char *)a3 + 23) >= 0 ? a3 : (void *)*a3;
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = v86;
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v87;
        _os_log_error_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_ERROR, "session %{public}s name %{public}s is not allowed to use PipeEndpointPriorityHighLeOnly", buf, 0x16u);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      goto LABEL_14;
    }
  }
  unsigned int v117 = a5;
  int v116 = a6;
  int v118 = a7;
  int v119 = a8;
  v53 = *(void **)(a1 + 144);
  if (v53 == v17)
  {
LABEL_119:
    v69 = qword_100A19EA0;
    unsigned int v70 = v117;
    if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_DEFAULT))
    {
      if (v117 < 5 && ((0x17u >> v117) & 1) != 0)
      {
        v71 = (&off_1009A2BC8)[v117];
      }
      else if (v117 == 3)
      {
        v71 = "isochronous";
      }
      else
      {
        v71 = "unknown";
      }
      v93 = a3;
      int v94 = *((char *)a3 + 23);
      v95 = (void *)*v93;
      sub_10003AE4C(a2, (uint64_t)buf);
      if (v94 >= 0) {
        v96 = v93;
      }
      else {
        v96 = v95;
      }
      v97 = "client";
      if (a4 == 1) {
        v97 = "server";
      }
      *(_DWORD *)__p = 136448002;
      *(void *)&__p[4] = v71;
      if (a4 == 2) {
        v97 = "peer-to-peer";
      }
      if (v127 >= 0) {
        v98 = buf;
      }
      else {
        v98 = *(unsigned char **)buf;
      }
      v99 = "No ";
      *(_WORD *)&unsigned char __p[12] = 2082;
      *(void *)&__p[14] = v97;
      v100 = "";
      if (v118) {
        v99 = "";
      }
      *(_WORD *)&__p[22] = 2082;
      *(void *)&__p[24] = v96;
      v101 = "NO";
      if (v119) {
        v100 = "NO";
      }
      *(_WORD *)v130 = 2082;
      *(void *)&v130[2] = v98;
      v102 = "Socket";
      if (v116) {
        v102 = "Skywalk";
      }
      *(_WORD *)&v130[10] = 2082;
      *(void *)&v130[12] = v99;
      __int16 v131 = 2082;
      v132 = v100;
      unsigned int v70 = v117;
      __int16 v133 = 2082;
      v134 = v102;
      if (v117 == 4) {
        v101 = "YES";
      }
      __int16 v135 = 2082;
      v136 = v101;
      _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "Registering %{public}s priority %{public}s endpoint \"%{public}s\" for session \"%{public}s\" %{public}sencryption required, %{public}sERTM, with %{public}s transport, staOnLe:%{public}s.", __p, 0x52u);
      a3 = v93;
      if (SHIBYTE(v127) < 0) {
        operator delete(*(void **)buf);
      }
    }
    if (*(unsigned char *)(a1 + 56))
    {
      char v124 = 0;
      sub_10001B8E0(&v124);
      *(_OWORD *)__p = *(_OWORD *)&off_1009A2850;
      *(_OWORD *)&__p[16] = *(_OWORD *)&off_1009A2860;
      *(void *)v130 = sub_1002BA1B0;
      int v103 = *((unsigned __int8 *)a3 + 23);
      if ((v103 & 0x80u) == 0) {
        v104 = a3;
      }
      else {
        v104 = (void *)*a3;
      }
      if ((v103 & 0x80u) != 0) {
        int v103 = *((_DWORD *)a3 + 2);
      }
      if (v70 - 1 > 3) {
        uint64_t v105 = 1;
      }
      else {
        uint64_t v105 = dword_1007BB7D0[v70 - 1];
      }
      int v106 = sub_1000E9608(v104, (v103 + 1), a4, v105, v118, v119, a9, v70 == 4, (long long *)__p);
      if (v106)
      {
        v107 = qword_100A19EA0;
        if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_ERROR))
        {
          int v108 = *((char *)a3 + 23);
          v109 = (void *)*a3;
          sub_10003AE4C(a2, (uint64_t)v122);
          v110 = v108 >= 0 ? a3 : v109;
          v111 = v123 >= 0 ? v122 : (void **)v122[0];
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = v110;
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v111;
          __int16 v127 = 1024;
          int v128 = v106;
          _os_log_error_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_ERROR, "Failed to register endpoint \"%{public}s\" for session \"%{public}s\" with result %{bluetooth:OI_STATUS}u", buf, 0x1Cu);
          if (v123 < 0) {
            operator delete(v122[0]);
          }
        }
        sub_10001B8AC(&v124);
        goto LABEL_14;
      }
      sub_10001B8AC(&v124);
    }
    operator new();
  }
  unsigned __int8 v54 = *((unsigned char *)a3 + 23);
  int v115 = (char)v54;
  size_t v113 = a3[1];
  uint64_t v114 = v54;
  if ((v54 & 0x80u) == 0) {
    uint64_t v55 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    uint64_t v55 = a3[1];
  }
  v112 = (const void *)*a3;
  if ((v54 & 0x80u) == 0) {
    v56 = (unsigned __int8 *)a3;
  }
  else {
    v56 = (unsigned __int8 *)*a3;
  }
  v120 = a3;
LABEL_99:
  uint64_t v57 = v53[5];
  v59 = *(unsigned __int8 ***)(v57 + 32);
  v58 = *(unsigned __int8 ***)(v57 + 40);
  while (1)
  {
    if (v59 == v58)
    {
      v67 = (void *)v53[1];
      if (v67)
      {
        do
        {
          v68 = v67;
          v67 = (void *)*v67;
        }
        while (v67);
      }
      else
      {
        do
        {
          v68 = (void *)v53[2];
          BOOL v52 = *v68 == (void)v53;
          v53 = v68;
        }
        while (!v52);
      }
      v53 = v68;
      a3 = v120;
      if (v68 == v17) {
        goto LABEL_119;
      }
      goto LABEL_99;
    }
    v60 = *v59;
    uint64_t v61 = (*v59)[23];
    uint64_t v62 = (v61 & 0x80u) == 0 ? (*v59)[23] : *((void *)*v59 + 1);
    if (v62 == v55) {
      break;
    }
LABEL_112:
    ++v59;
  }
  if ((v61 & 0x80) == 0)
  {
    if (!(*v59)[23]) {
      goto LABEL_125;
    }
    v63 = v56;
    v64 = *v59;
    while (*v64 == *v63)
    {
      ++v64;
      ++v63;
      if (!--v61) {
        goto LABEL_125;
      }
    }
    goto LABEL_112;
  }
  uint64_t v65 = v55;
  int v66 = memcmp(*(const void **)v60, v56, *((void *)*v59 + 1));
  uint64_t v55 = v65;
  if (v66) {
    goto LABEL_112;
  }
LABEL_125:
  if (!v60[39])
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_ERROR))
    {
      sub_10003AE4C(v53[4], (uint64_t)__p);
      sub_100751834();
    }
    goto LABEL_166;
  }
  uint64_t v72 = *(void *)(a1 + 168);
  uint64_t v73 = *(void *)(a1 + 176);
  char v74 = v115;
  if (v72 == v73)
  {
LABEL_141:
    v81 = qword_100A19EA0;
    if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_INFO))
    {
      v82 = (void *)*v120;
      sub_10003AE4C(v53[4], (uint64_t)__p);
      if (v115 >= 0) {
        v83 = v120;
      }
      else {
        v83 = v82;
      }
      if (__p[23] >= 0) {
        v84 = __p;
      }
      else {
        v84 = *(unsigned char **)__p;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = v83;
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v84;
      _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_INFO, "Delaying registration of endpoint \"%{public}s\" as it is currently being unregistered by session \"%{public}s\"", buf, 0x16u);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      char v74 = *((unsigned char *)v120 + 23);
    }
    *(void *)__p = a2;
    if (v74 < 0)
    {
      sub_10003B098(&__p[8], (void *)*v120, v120[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v120;
      *(void *)&__p[24] = v120[2];
    }
    *(_DWORD *)v130 = a4;
    *(_DWORD *)&v130[4] = v117;
    *(_DWORD *)&v130[8] = v116;
    v130[12] = v118;
    v130[13] = v119;
    v130[14] = a9;
    unint64_t v88 = *(void *)(a1 + 176);
    if (v88 >= *(void *)(a1 + 184))
    {
      v91 = sub_1002C4F80((char **)(a1 + 168), (uint64_t)__p);
      int v92 = __p[31];
      *(void *)(a1 + 176) = v91;
      if (v92 < 0) {
        operator delete(*(void **)&__p[8]);
      }
    }
    else
    {
      *(void *)unint64_t v88 = *(void *)__p;
      long long v89 = *(_OWORD *)&__p[8];
      *(void *)(v88 + 24) = *(void *)&__p[24];
      *(_OWORD *)(v88 + 8) = v89;
      memset(&__p[8], 0, 24);
      uint64_t v90 = *(void *)&v130[7];
      *(void *)(v88 + 32) = *(void *)v130;
      *(void *)(v88 + 39) = v90;
      *(void *)(a1 + 176) = v88 + 48;
    }
    uint64_t v22 = 10;
    goto LABEL_15;
  }
  while (2)
  {
    uint64_t v75 = *(unsigned __int8 *)(v72 + 31);
    int v76 = (char)v75;
    if ((v75 & 0x80u) != 0) {
      uint64_t v75 = *(void *)(v72 + 16);
    }
    if (v55 != v75)
    {
LABEL_140:
      v72 += 48;
      if (v72 == v73) {
        goto LABEL_141;
      }
      continue;
    }
    break;
  }
  if (v76 >= 0) {
    v77 = (unsigned __int8 *)(v72 + 8);
  }
  else {
    v77 = *(unsigned __int8 **)(v72 + 8);
  }
  if (v115 < 0)
  {
    uint64_t v79 = v55;
    int v80 = memcmp(v112, v77, v113);
    uint64_t v55 = v79;
    if (!v80)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_ERROR)) {
        goto LABEL_165;
      }
      goto LABEL_166;
    }
    goto LABEL_140;
  }
  if (v115)
  {
    uint64_t v78 = 0;
    while (*((unsigned __int8 *)v120 + v78) == v77[v78])
    {
      if (v114 == ++v78)
      {
        if (!os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_ERROR)) {
          goto LABEL_166;
        }
        goto LABEL_165;
      }
    }
    goto LABEL_140;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_ERROR))
  {
LABEL_165:
    sub_10003AE4C(*(void *)v72, (uint64_t)__p);
    sub_100751890();
  }
LABEL_166:
  uint64_t v22 = 103;
LABEL_15:
  sub_10003AFB4((uint64_t)v125);
  return v22;
}

void sub_1002BC150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,int a34,__int16 a35,char a36,char a37,int a38,__int16 a39,char a40,char a41)
{
}

uint64_t sub_1002BC1F0(void *a1, unint64_t a2, char *a3)
{
  v51[0] = 0;
  v51[1] = 0;
  sub_10003AED0((uint64_t)v51, (uint64_t)(a1 + 10));
  v6 = (void *)a1[19];
  if (!v6) {
    goto LABEL_98;
  }
  v7 = a1 + 19;
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      v10 = v6;
    }
    else {
      v10 = v6 + 1;
    }
    if (v9) {
      v7 = v6;
    }
    v6 = (void *)*v10;
  }
  while (*v10);
  if (v7 == a1 + 19 || v7[4] > a2)
  {
LABEL_98:
    if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_FAULT))
    {
      sub_10003AE4C(a2, (uint64_t)__p);
      sub_1007517DC();
    }
LABEL_14:
    uint64_t v11 = 1;
    goto LABEL_15;
  }
  uint64_t v13 = v7[5];
  uint64_t v14 = a1[21];
  uint64_t v15 = a1[22];
  if (v14 != v15)
  {
    uint64_t v16 = a3[23];
    uint64_t v18 = *(char **)a3;
    size_t v17 = *((void *)a3 + 1);
    if ((v16 & 0x80u) == 0) {
      uint64_t v19 = a3[23];
    }
    else {
      uint64_t v19 = *((void *)a3 + 1);
    }
    do
    {
      if (*(void *)v14 == a2)
      {
        uint64_t v20 = *(unsigned __int8 *)(v14 + 31);
        int v21 = (char)v20;
        if ((v20 & 0x80u) != 0) {
          uint64_t v20 = *(void *)(v14 + 16);
        }
        if (v19 == v20)
        {
          if (v21 >= 0) {
            uint64_t v22 = (unsigned __int8 *)(v14 + 8);
          }
          else {
            uint64_t v22 = *(unsigned __int8 **)(v14 + 8);
          }
          if ((v16 & 0x80) == 0)
          {
            if (v16)
            {
              for (uint64_t i = 0; i != v16; ++i)
              {
                if (a3[i] != v22[i]) {
                  goto LABEL_34;
                }
              }
              int v40 = qword_100A19EA0;
              if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_DEFAULT))
              {
LABEL_64:
                sub_10003AE4C(a2, (uint64_t)__p);
                if (v50 >= 0) {
                  int v41 = __p;
                }
                else {
                  int v41 = (void **)__p[0];
                }
                *(_DWORD *)buf = 136446466;
                v53 = a3;
                __int16 v54 = 2082;
                uint64_t v55 = v41;
                _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Unregistering pending endpoint \"%{public}s\" on session \"%{public}s\"", buf, 0x16u);
                if (v50 < 0) {
                  operator delete(__p[0]);
                }
                uint64_t v15 = a1[22];
              }
            }
            else
            {
              int v40 = qword_100A19EA0;
              if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_64;
              }
            }
            goto LABEL_70;
          }
          if (!memcmp(v18, v22, v17))
          {
            int v40 = qword_100A19EA0;
            if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_DEFAULT))
            {
              a3 = *(char **)a3;
              goto LABEL_64;
            }
LABEL_70:
            sub_1002C4EE8((uint64_t)__p, v14 + 48, v15, v14);
            uint64_t v43 = v42;
            for (uint64_t j = a1[22]; j != v43; j -= 48)
            {
              if (*(char *)(j - 17) < 0) {
                operator delete(*(void **)(j - 40));
              }
            }
            uint64_t v11 = 0;
            a1[22] = v43;
            goto LABEL_15;
          }
        }
      }
LABEL_34:
      v14 += 48;
    }
    while (v14 != v15);
  }
  uint64_t v24 = *(unsigned __int8 ***)(v13 + 32);
  unint64_t v25 = *(unsigned __int8 ***)(v13 + 40);
  if (v24 == v25)
  {
LABEL_54:
    v35 = qword_100A19EA0;
    if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_ERROR))
    {
      int v36 = a3[23];
      v37 = *(char **)a3;
      sub_10003AE4C(a2, (uint64_t)__p);
      v38 = v36 >= 0 ? a3 : v37;
      uint64_t v39 = v50 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446466;
      v53 = v38;
      __int16 v54 = 2082;
      uint64_t v55 = v39;
      _os_log_error_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "Unable to unregister endpoint \"%{public}s\" on session \"%{public}s\" as it wasn't registered", buf, 0x16u);
      if (v50 < 0) {
        operator delete(__p[0]);
      }
    }
    goto LABEL_14;
  }
  char v26 = a3[23];
  if (v26 >= 0) {
    uint64_t v27 = a3[23];
  }
  else {
    uint64_t v27 = *((void *)a3 + 1);
  }
  if (v26 >= 0) {
    v28 = a3;
  }
  else {
    v28 = *(char **)a3;
  }
  while (1)
  {
    v29 = (char *)*v24;
    signed __int8 v30 = (*v24)[23];
    if (v30 >= 0) {
      uint64_t v31 = (*v24)[23];
    }
    else {
      uint64_t v31 = *((void *)*v24 + 1);
    }
    if (v31 != v27) {
      goto LABEL_53;
    }
    if (((*v24)[23] & 0x80) != 0) {
      break;
    }
    if (!(*v24)[23]) {
      goto LABEL_76;
    }
    int v32 = v28;
    int v33 = *v24;
    uint64_t v34 = (*v24)[23];
    while (*v33 == *v32)
    {
      ++v33;
      ++v32;
      if (!--v34) {
        goto LABEL_76;
      }
    }
LABEL_53:
    if (++v24 == v25) {
      goto LABEL_54;
    }
  }
  if (memcmp(*(const void **)v29, v28, *((void *)*v24 + 1))) {
    goto LABEL_53;
  }
LABEL_76:
  if (v29[39])
  {
    uint64_t v45 = qword_100A19EA0;
    if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_DEFAULT))
    {
      if (v30 < 0) {
        v29 = *(char **)v29;
      }
      sub_10003AE4C(a2, (uint64_t)__p);
      if (v50 >= 0) {
        v46 = __p;
      }
      else {
        v46 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136446466;
      v53 = v29;
      __int16 v54 = 2082;
      uint64_t v55 = v46;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "Endpoint \"%{public}s\" on session \"%{public}s\" is already being unregistered", buf, 0x16u);
      if (v50 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v11 = 10;
  }
  else
  {
    uint64_t v11 = sub_1002BB188((uint64_t)a1, a2, (const void **)v29);
    if (!v11)
    {
      v47 = *(unsigned __int8 ***)(v13 + 40);
      int64_t v48 = (char *)v47 - (char *)(v24 + 1);
      if (v47 != v24 + 1) {
        memmove(v24, v24 + 1, (char *)v47 - (char *)(v24 + 1));
      }
      *(void *)(v13 + 40) = (char *)v24 + v48;

      if (v29[23] < 0) {
        operator delete(*(void **)v29);
      }
      operator delete();
    }
  }
LABEL_15:
  sub_10003AFB4((uint64_t)v51);
  return v11;
}

void sub_1002BC714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002BC744(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, int a5, int a6, void *a7)
{
  id v13 = a3;
  id v14 = a7;
  if (*(unsigned char *)(a1 + 56))
  {
    size_t v17 = *(void **)(a1 + 152);
    uint64_t v16 = (void *)(a1 + 152);
    uint64_t v15 = v17;
    if (!v17) {
      goto LABEL_53;
    }
    uint64_t v18 = v16;
    do
    {
      unint64_t v19 = v15[4];
      BOOL v20 = v19 >= a2;
      if (v19 >= a2) {
        int v21 = v15;
      }
      else {
        int v21 = v15 + 1;
      }
      if (v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = (void *)*v21;
    }
    while (*v21);
    if (v18 != v16 && v18[4] <= a2)
    {
      uint64_t v22 = qword_100A19EA0;
      if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_DEFAULT))
      {
        sub_10003AE4C(a2, (uint64_t)__p);
        char v23 = (SBYTE7(v47) & 0x80u) == 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = v23;
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v13;
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&buf[24] = a4;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = a5;
        *(_WORD *)&buf[34] = 1024;
        *(_DWORD *)&buf[36] = a6;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" is requesting %{public}@ link requirements of %d pps, %d Bps input, %d Bps output", buf, 0x28u);
        if (SBYTE7(v47) < 0) {
          operator delete(__p[0]);
        }
      }
      *(unsigned char *)(v18[5] + 57) = a4 != 0;
      int v34 = [v14 isEqualToString:@"com.apple.private.alloy.siri.proxy"];
      if ([v14 isEqualToString:@"metrics"])
      {
        uint64_t v24 = qword_100A19EA0;
        if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "Metrics!", buf, 2u);
        }
        if (qword_1009FB180 != -1) {
          dispatch_once(&qword_1009FB180, &stru_1009A2A48);
        }
        sub_1002BCC68(qword_1009FB178);
      }
      memcpy(buf, "clientname", 0x400uLL);
      v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      sub_10003AE4C(a2, (uint64_t)&v38);
      v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      id v25 = v14;
      sub_10004191C(&v35, (char *)[v25 UTF8String]);
      *(_OWORD *)__p = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      LOBYTE(__p[0]) = 4;
      __int16 v26 = HIBYTE(v37);
      if (v37 >= 0)
      {
        uint64_t v27 = &v35;
      }
      else
      {
        __int16 v26 = v36;
        uint64_t v27 = v35;
      }
      WORD1(__p[0]) = v26;
      __p[1] = v27;
      LOBYTE(v47) = 4;
      __int16 v28 = HIBYTE(v40);
      if (v40 < 0) {
        __int16 v28 = v39;
      }
      v29 = &v38;
      if (v40 < 0) {
        v29 = v38;
      }
      WORD1(v47) = v28;
      *((void *)&v47 + 1) = v29;
      LOBYTE(v48) = 1;
      WORD1(v48) = 4;
      DWORD2(v48) = a5;
      LOBYTE(v49) = 1;
      WORD1(v49) = 4;
      DWORD2(v49) = a4;
      sub_10010CA6C("Magnet", (const char *)buf, __p, 4);
      signed __int8 v30 = qword_100A19EA0;
      if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_DEFAULT))
      {
        id v31 = [v25 UTF8String];
        sub_10003AE4C(a2, (uint64_t)v41);
        int v32 = v42 >= 0 ? v41 : (void **)v41[0];
        *(_DWORD *)uint64_t v43 = 136446466;
        *(void *)&v43[4] = v31;
        __int16 v44 = 2082;
        uint64_t v45 = v32;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Magnet clientname %{public}s: %{public}s", v43, 0x16u);
        if (v42 < 0) {
          operator delete(v41[0]);
        }
      }
      *(void *)uint64_t v43 = 0;
      if (qword_1009F7EC0 != -1) {
        dispatch_once(&qword_1009F7EC0, &stru_1009A2A88);
      }
      int v33 = off_1009F7EB8;
      sub_1000305AC(v41, v13);
      if (sub_1006856B8((uint64_t)v33, (unsigned __int8 *)v41, v43))
      {
        LOBYTE(v41[0]) = 0;
        sub_10001B8E0(v41);
        sub_1000E44E4(*(uint64_t *)v43, a4, a5, a6, v34);
        sub_10001B8AC(v41);
      }
      else if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_ERROR))
      {
        sub_1007518EC();
      }
      if (SHIBYTE(v37) < 0) {
        operator delete(v35);
      }
      if (SHIBYTE(v40) < 0) {
        operator delete(v38);
      }
    }
    else
    {
LABEL_53:
      if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_FAULT))
      {
        sub_10003AE4C(a2, (uint64_t)buf);
        sub_1007517DC();
      }
    }
  }
}

void sub_1002BCBF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  sub_10001B8AC(&a22);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }

  _Unwind_Resume(a1);
}

void sub_1002BCC68(uint64_t a1)
{
  uint64_t v2 = sub_100019878();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1002C0B78;
  v3[3] = &unk_100997528;
  v3[4] = a1;
  sub_100013018(v2, v3);
}

void sub_1002BCCE4(uint64_t a1, unint64_t a2, void *a3, int a4, int a5, int a6)
{
  id v11 = a3;
  if (*(unsigned char *)(a1 + 56))
  {
    id v14 = *(void **)(a1 + 152);
    id v13 = (void *)(a1 + 152);
    unsigned int v12 = v14;
    if (!v14) {
      goto LABEL_31;
    }
    uint64_t v15 = v13;
    do
    {
      unint64_t v16 = v12[4];
      BOOL v17 = v16 >= a2;
      if (v16 >= a2) {
        uint64_t v18 = v12;
      }
      else {
        uint64_t v18 = v12 + 1;
      }
      if (v17) {
        uint64_t v15 = v12;
      }
      unsigned int v12 = (void *)*v18;
    }
    while (*v18);
    if (v15 != v13 && v15[4] <= a2)
    {
      unint64_t v19 = qword_100A19EA0;
      if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_DEFAULT))
      {
        sub_10003AE4C(a2, (uint64_t)__p);
        BOOL v20 = v24 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136447234;
        __int16 v26 = v20;
        __int16 v27 = 2114;
        id v28 = v11;
        __int16 v29 = 1024;
        int v30 = a4;
        __int16 v31 = 1024;
        int v32 = a5;
        __int16 v33 = 1024;
        int v34 = a6;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" is requesting %{public}@ link requirements of latency %d ms, %d Bps input, %d Bps output", buf, 0x28u);
        if (v24 < 0) {
          operator delete(__p[0]);
        }
      }
      *(unsigned char *)(v15[5] + 57) = a4 != 0;
      char v22 = 0;
      sub_10001B8E0(&v22);
      __p[0] = 0;
      if (qword_1009F7EC0 != -1) {
        dispatch_once(&qword_1009F7EC0, &stru_1009A2A88);
      }
      int v21 = off_1009F7EB8;
      sub_1000305AC(buf, v11);
      if (sub_1006856B8((uint64_t)v21, buf, __p))
      {
        sub_1000E4794((uint64_t)__p[0], a4, a5, a6);
      }
      else if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_ERROR))
      {
        sub_1007518EC();
      }
      sub_10001B8AC(&v22);
    }
    else
    {
LABEL_31:
      if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_FAULT))
      {
        sub_10003AE4C(a2, (uint64_t)buf);
        sub_1007517DC();
      }
    }
  }
}

void sub_1002BCF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_10001B8AC(&a13);

  _Unwind_Resume(a1);
}

id sub_1002BCF7C(uint64_t a1)
{
  uint64_t v2 = +[NSMutableSet set];
  v22[0] = 0;
  v22[1] = 0;
  sub_10003AED0((uint64_t)v22, a1 + 80);
  uint64_t v3 = *(void **)(a1 + 144);
  uint64_t v4 = (void *)(a1 + 152);
  if (v3 != (void *)(a1 + 152))
  {
    do
    {
      uint64_t v5 = v3[5];
      for (uint64_t i = *(uint64_t **)(v5 + 32); i != *(uint64_t **)(v5 + 40); ++i)
      {
        uint64_t v7 = *i;
        long long v20 = 0u;
        long long v21 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        id v8 = *(id *)(v7 + 40);
        id v9 = [v8 countByEnumeratingWithState:&v18 objects:v23 count:16];
        if (v9)
        {
          uint64_t v10 = *(void *)v19;
          do
          {
            for (uint64_t j = 0; j != v9; uint64_t j = (char *)j + 1)
            {
              if (*(void *)v19 != v10) {
                objc_enumerationMutation(v8);
              }
              unsigned int v12 = [*(id *)(*((void *)&v18 + 1) + 8 * (void)j) identifier];
              [v2 addObject:v12];
            }
            id v9 = [v8 countByEnumeratingWithState:&v18 objects:v23 count:16];
          }
          while (v9);
        }
      }
      id v13 = (void *)v3[1];
      if (v13)
      {
        do
        {
          id v14 = v13;
          id v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          id v14 = (void *)v3[2];
          BOOL v15 = *v14 == (void)v3;
          uint64_t v3 = v14;
        }
        while (!v15);
      }
      uint64_t v3 = v14;
    }
    while (v14 != v4);
  }
  unint64_t v16 = [v2 allObjects];
  sub_10003AFB4((uint64_t)v22);

  return v16;
}

void sub_1002BD150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_10003AFB4((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t sub_1002BD198(uint64_t a1)
{
  uint64_t v2 = +[NSMutableSet set];
  v29[0] = 0;
  v29[1] = 0;
  sub_10003AED0((uint64_t)v29, a1 + 80);
  uint64_t v3 = *(void **)(a1 + 144);
  long long v21 = (void *)(a1 + 152);
  if (v3 != (void *)(a1 + 152))
  {
    do
    {
      uint64_t v4 = v3[5];
      uint64_t v5 = *(void **)(v4 + 32);
      uint64_t v22 = v4;
      while (v5 != *(void **)(v4 + 40))
      {
        char v23 = v5;
        uint64_t v6 = *v5;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        id v7 = *(id *)(v6 + 40);
        id v8 = [v7 countByEnumeratingWithState:&v25 objects:v31 count:16];
        if (v8)
        {
          uint64_t v9 = *(void *)v26;
          while (2)
          {
            uint64_t v10 = 0;
            do
            {
              if (*(void *)v26 != v9) {
                objc_enumerationMutation(v7);
              }
              id v11 = *(void **)(*((void *)&v25 + 1) + 8 * (void)v10);
              unsigned int v12 = [v11 identifier:v21];
              unsigned __int8 v13 = [v2 containsObject:v12];

              if ((v13 & 1) == 0)
              {
                uint64_t v24 = 0;
                if (qword_1009F7EC0 != -1) {
                  dispatch_once(&qword_1009F7EC0, &stru_1009A2A88);
                }
                id v14 = off_1009F7EB8;
                BOOL v15 = [v11 identifier];
                sub_1000305AC(v30, v15);
                LODWORD(v14) = sub_1006856B8((uint64_t)v14, v30, &v24);

                if (v14)
                {
                  if (sub_100225F4C(v24))
                  {

                    uint64_t v19 = 1;
                    goto LABEL_25;
                  }
                }
              }
              uint64_t v10 = (char *)v10 + 1;
            }
            while (v8 != v10);
            id v8 = [v7 countByEnumeratingWithState:&v25 objects:v31 count:16];
            if (v8) {
              continue;
            }
            break;
          }
        }

        uint64_t v4 = v22;
        uint64_t v5 = v23 + 1;
      }
      unint64_t v16 = (void *)v3[1];
      if (v16)
      {
        do
        {
          BOOL v17 = v16;
          unint64_t v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          BOOL v17 = (void *)v3[2];
          BOOL v18 = *v17 == (void)v3;
          uint64_t v3 = v17;
        }
        while (!v18);
      }
      uint64_t v3 = v17;
    }
    while (v17 != v21);
  }
  uint64_t v19 = 0;
LABEL_25:
  sub_10003AFB4((uint64_t)v29);

  return v19;
}

void sub_1002BD3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1002BD44C(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v23 = +[NSMutableSet set];
  v32[0] = 0;
  v32[1] = 0;
  sub_10003AED0((uint64_t)v32, a1 + 80);
  uint64_t v4 = *(void **)(a1 + 144);
  uint64_t v24 = (void *)(a1 + 152);
  if (v4 != (void *)(a1 + 152))
  {
    do
    {
      uint64_t v5 = v4[5];
      uint64_t v6 = *(void **)(v5 + 32);
      uint64_t v25 = v5;
      while (1)
      {
        long long v26 = v6;
        if (v6 == *(void **)(v5 + 40)) {
          break;
        }
        uint64_t v7 = *v6;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        id v8 = *(id *)(v7 + 40);
        id v9 = [v8 countByEnumeratingWithState:&v28 objects:v33 count:16];
        if (v9)
        {
          uint64_t v10 = *(void *)v29;
          while (2)
          {
            for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v29 != v10) {
                objc_enumerationMutation(v8);
              }
              unsigned int v12 = [*(id *)(*((void *)&v28 + 1) + 8 * i) identifier];
              unsigned __int8 v13 = [v12 UUIDString];
              id v14 = [v3 UUIDString];
              unsigned int v15 = [v13 isEqualToString:v14];

              if (v15)
              {
                sub_100551758(v4[4], &__p);
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  p_p = &__p;
                }
                else {
                  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                BOOL v17 = +[NSString stringWithUTF8String:p_p];
                [v23 addObject:v17];

                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }

                goto LABEL_19;
              }
            }
            id v9 = [v8 countByEnumeratingWithState:&v28 objects:v33 count:16];
            if (v9) {
              continue;
            }
            break;
          }
        }

        uint64_t v5 = v25;
        uint64_t v6 = v26 + 1;
      }
LABEL_19:
      BOOL v18 = (void *)v4[1];
      if (v18)
      {
        do
        {
          uint64_t v19 = v18;
          BOOL v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          uint64_t v19 = (void *)v4[2];
          BOOL v20 = *v19 == (void)v4;
          uint64_t v4 = v19;
        }
        while (!v20);
      }
      uint64_t v4 = v19;
    }
    while (v19 != v24);
  }
  long long v21 = [v23 allObjects];
  sub_10003AFB4((uint64_t)v32);

  return v21;
}

void sub_1002BD6D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_10003AFB4((uint64_t)&a28);

  _Unwind_Resume(a1);
}

void sub_1002BD768(unsigned char *a1, uint64_t a2, char a3)
{
  __int16 v38 = 0;
  char v37 = 0;
  sub_1002BDC1C((uint64_t)a1, a1 + 57, &v38, &v37, (unsigned char *)&v38 + 1);
  if (a1[57])
  {
    uint64_t v6 = qword_100A19EA0;
    if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "ePA disabled by defaults write", buf, 2u);
    }
    return;
  }
  sub_10003FB34();
  uint64_t v7 = sub_100351610();
  if (!v7)
  {
    sub_10003FB34();
    if (!sub_1003518C8()) {
      return;
    }
    BOOL v17 = qword_100A19EA0;
    if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Enable increased Tx power for Marconi2", buf, 2u);
    }
    uint64_t v18 = sub_10003FB34();
    (*(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(*(void *)v18 + 184))(v18, a2, 2, 0, 30, 10);
    goto LABEL_20;
  }
  id v8 = a1 + 61;
  sub_1002BDEE4(v7, a1 + 61);
  uint64_t v9 = sub_100035F54();
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 160))(v9);
  if (v10)
  {
    id v11 = qword_100A19EA0;
    BOOL v12 = os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_DEFAULT);
    uint64_t v13 = HIBYTE(v38);
    if (v12)
    {
      int v14 = *v8;
      *(_DWORD *)buf = 67109376;
      int v40 = HIBYTE(v38);
      __int16 v41 = 1024;
      int v42 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Enabling ePABF on HDR magnet (available >= 4378B1/4378B3), policy: %#x, RSSI threshold: %d dBm", buf, 0xEu);
    }
    uint64_t v15 = sub_10003FB34();
    uint64_t v16 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, void, void, void))(*(void *)v15 + 128))(v15, 0, a2, v13, *v8, 0, 0);
    sub_1002BE068(v16, a2, 1);
    goto LABEL_20;
  }
  uint64_t v19 = a1 + 59;
  BOOL v20 = a1 + 60;
  sub_1002BE254(v10, a3, a1 + 59, a1 + 60);
  sub_1002BE2B8((uint64_t)a1);
  sub_10003FB34();
  int v21 = sub_100351A70();
  int v22 = a1[60];
  uint64_t v23 = qword_100A19EA0;
  BOOL v24 = os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_DEFAULT);
  uint64_t v25 = HIBYTE(v38);
  if (v21 == v22)
  {
    if (v24)
    {
      int v26 = *v8;
      int v27 = 25 * *v19;
      *(_DWORD *)buf = 67109888;
      int v40 = HIBYTE(v38);
      __int16 v41 = 1024;
      int v42 = v26;
      __int16 v43 = 1024;
      int v44 = v27;
      __int16 v45 = 1024;
      int v46 = 25 * v21;
      long long v28 = "Enabling ePA, policy: %#x, Threshold: %d dBm, Tx power high: %d, low: %d";
      long long v29 = v23;
      uint32_t v30 = 26;
LABEL_18:
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, v28, buf, v30);
    }
  }
  else if (v24)
  {
    int v31 = *v8;
    int v32 = 25 * *v19;
    *(_DWORD *)buf = 67110144;
    int v40 = HIBYTE(v38);
    __int16 v41 = 1024;
    int v42 = v31;
    __int16 v43 = 1024;
    int v44 = v32;
    __int16 v45 = 1024;
    int v46 = 25 * v22;
    __int16 v47 = 1024;
    int v48 = 25 * v21;
    long long v28 = "Enabling ePA, policy: %#x, Threshold: %d dBm, Tx power high: %d, medium: %d, low (unused): %d";
    long long v29 = v23;
    uint32_t v30 = 32;
    goto LABEL_18;
  }
  uint64_t v33 = sub_10003FB34();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void))(*(void *)v33 + 104))(v33, a2, 3, v25, *v19, *v20, *v8);
  uint64_t v34 = sub_10003FB34();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v34 + 120))(v34, 1);
  uint64_t v35 = sub_10003FB34();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void))(*(void *)v35 + 104))(v35, a2, 4, v25, *v19, *v20, *v8);
  uint64_t v36 = sub_10003FB34();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v36 + 120))(v36, 1);
LABEL_20:
  if (qword_1009F8090 != -1) {
    dispatch_once(&qword_1009F8090, &stru_1009A2B08);
  }
  sub_1004D55B8((uint64_t)off_1009F8088, a2, 0xFFFFFFFFLL, 0, 702, 0);
}

void sub_1002BDC1C(uint64_t a1, unsigned char *a2, unsigned char *a3, unsigned char *a4, unsigned char *a5)
{
  __int16 v19 = 0;
  char v18 = 0;
  uint64_t v9 = sub_100017768();
  sub_10004191C(buf, "ePA");
  sub_10004191C(__p, "DisableMagnetEPA");
  (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v9 + 72))(v9, buf, __p, (char *)&v19 + 1);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v10 = sub_100017768();
  sub_10004191C(buf, "ePA");
  sub_10004191C(__p, "DisableReTxEPA");
  (*(void (**)(uint64_t, uint8_t *, void **, __int16 *))(*(void *)v10 + 72))(v10, buf, __p, &v19);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v11 = sub_100017768();
  sub_10004191C(buf, "ePA");
  sub_10004191C(__p, "DisableThresholdEPA");
  (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v11 + 72))(v11, buf, __p, &v18);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete(*(void **)buf);
  }
  *a2 = HIBYTE(v19);
  *a3 = v19;
  *a4 = v18;
  *a5 = 3;
  if (*a3)
  {
    *a5 = 1;
    BOOL v12 = qword_100A19EA0;
    if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Warning: Disabling ePA for retransmission policy through defaults write", buf, 2u);
    }
  }
  if (*a4)
  {
    *a5 &= ~1u;
    uint64_t v13 = qword_100A19EA0;
    if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Warning: Disabling threshold based ePA policy through defaults write", buf, 2u);
    }
  }
}

void sub_1002BDEA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002BDEE4(uint64_t a1, unsigned char *a2)
{
  int v9 = 0;
  uint64_t v3 = sub_100017768();
  sub_10004191C(buf, "ePA");
  sub_10004191C(__p, "ePAThreshold");
  int v4 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v3 + 88))(v3, buf, __p, &v9);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if ((v11 & 0x80000000) == 0)
  {
    if (v4) {
      goto LABEL_5;
    }
LABEL_8:
    *a2 = -69;
    return;
  }
  operator delete(*(void **)buf);
  if (!v4) {
    goto LABEL_8;
  }
LABEL_5:
  char v5 = v9;
  *a2 = v9;
  uint64_t v6 = qword_100A19EA0;
  if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Warning: Setting user defined ePA threshold to %d dBm through defaults write", buf, 8u);
  }
}

void sub_1002BE02C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002BE068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_100017768();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v5 + 384))(v5)) {
    return 0;
  }
  uint64_t v6 = sub_100017768();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v6 + 392))(v6)) {
    return 0;
  }
  uint64_t v7 = qword_100A19EA0;
  BOOL v8 = os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_DEFAULT);
  if (a3)
  {
    if (!v8) {
      goto LABEL_9;
    }
    __int16 v29 = 0;
    int v9 = "Enabling ePA/beamforming VSE Logging for Magnet";
    uint64_t v10 = (uint8_t *)&v29;
  }
  else
  {
    if (!v8) {
      goto LABEL_9;
    }
    *(_WORD *)buf = 0;
    int v9 = "Disabling ePA/beamforming VSE Logging for Magnet";
    uint64_t v10 = buf;
  }
  _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v9, v10, 2u);
LABEL_9:
  uint64_t v11 = sub_10003FB34();
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void))(*(void *)v11 + 128))(v11, 2, a2, a3, 0, 0, 0);
  uint64_t v13 = qword_100A19EA0;
  if (!v12)
  {
    BOOL v22 = os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_INFO);
    if (a3)
    {
      if (v22)
      {
        __int16 v27 = 0;
        uint64_t v23 = "Beamforming VSE Logging enabled for Magnet";
        BOOL v24 = (uint8_t *)&v27;
LABEL_20:
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, v23, v24, 2u);
      }
    }
    else if (v22)
    {
      __int16 v26 = 0;
      uint64_t v23 = "Beamforming VSE Logging disabled for Magnet";
      BOOL v24 = (uint8_t *)&v26;
      goto LABEL_20;
    }
    return 0;
  }
  uint64_t v14 = v12;
  BOOL v15 = os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_ERROR);
  if (a3)
  {
    if (v15) {
      sub_100751920(v14, v13, v16, v17, v18, v19, v20, v21);
    }
  }
  else if (v15)
  {
    sub_10075198C(v14, v13, v16, v17, v18, v19, v20, v21);
  }
  return v14;
}

uint64_t sub_1002BE254(uint64_t a1, char a2, unsigned char *a3, unsigned char *a4)
{
  sub_10003FB34();
  *a3 = sub_100351C10();
  sub_10003FB34();
  *a4 = sub_100351A70();
  sub_10003FB34();
  uint64_t result = sub_100351A4C();
  if (result)
  {
    if ((a2 & 1) == 0)
    {
      sub_10003FB34();
      uint64_t result = sub_100351E88();
      *a4 = result;
    }
  }
  return result;
}

uint64_t sub_1002BE2B8(uint64_t result)
{
  if (!*(unsigned char *)(result + 57))
  {
    uint64_t v1 = result;
    int v2 = *(unsigned __int8 *)(result + 58);
    uint64_t v3 = sub_10003FB34();
    if (v2) {
      uint64_t v4 = 5;
    }
    else {
      uint64_t v4 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, void, void, void))(*(void *)v3 + 80))(v3, 3, v4, *(unsigned __int8 *)(v1 + 59), *(unsigned __int8 *)(v1 + 60), *(char *)(v1 + 61));
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 80);
    return v5();
  }
  return result;
}

void sub_1002BE380(uint64_t a1, int a2, int a3)
{
  if (a2 == 1)
  {
    uint64_t v10 = v3;
    uint64_t v11 = v4;
    uint64_t v7 = sub_100019878();
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1002BE410;
    v8[3] = &unk_100997570;
    v8[4] = a1;
    int v9 = a3;
    sub_100013018(v7, v8);
  }
}

void *sub_1002BE410(void *result)
{
  uint64_t v1 = result[4];
  int v2 = *(void **)(v1 + 144);
  uint64_t v3 = (void *)(v1 + 152);
  if (v2 != (void *)(v1 + 152))
  {
    uint64_t v4 = result;
    do
    {
      uint64_t result = *(void **)v2[5];
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *, void, void))(*result + 40))(result, v2[4], *((unsigned int *)v4 + 10));
      }
      uint64_t v5 = (void *)v2[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (void *)v2[2];
          BOOL v7 = *v6 == (void)v2;
          int v2 = v6;
        }
        while (!v7);
      }
      int v2 = v6;
    }
    while (v6 != v3);
  }
  return result;
}

void sub_1002BE4BC(uint64_t a1)
{
  if (sub_1002BA33C(a1))
  {
    uint64_t v2 = sub_100019878();
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1002BE540;
    v3[3] = &unk_100997528;
    v3[4] = a1;
    sub_100013018(v2, v3);
  }
}

void sub_1002BE540(uint64_t a1)
{
}

void sub_1002BE548(uint64_t a1)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v2 = sub_1002BCF7C(a1);
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v16 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v11;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v11 != v4) {
          objc_enumerationMutation(v2);
        }
        uint64_t v6 = *(void *)(*((void *)&v10 + 1) + 8 * (void)v5);
        uint64_t v9 = 0;
        if (qword_1009F7EC0 != -1) {
          dispatch_once(&qword_1009F7EC0, &stru_1009A2A88);
        }
        BOOL v7 = off_1009F7EB8;
        sub_1000305AC(buf, v6);
        if (sub_1006856B8((uint64_t)v7, buf, &v9))
        {
          sub_1002C29F8(a1, v9);
        }
        else
        {
          BOOL v8 = qword_100A19EA0;
          if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            uint64_t v15 = v6;
            _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Could not get handle from uuid %{public}@", buf, 0xCu);
          }
        }
        uint64_t v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id v3 = [v2 countByEnumeratingWithState:&v10 objects:v16 count:16];
    }
    while (v3);
  }
}

void sub_1002BE708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002BE730(uint64_t a1)
{
}

void sub_1002BE738(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  if (!a3 && *(unsigned char *)(a1 + 56))
  {
    uint64_t v17 = 0;
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009A2A88);
    }
    uint64_t v6 = off_1009F7EB8;
    sub_1000305AC(buf, v5);
    if (sub_1006856B8((uint64_t)v6, buf, &v17))
    {
      char v16 = 0;
      sub_10001B8E0(&v16);
      if (!sub_100225F4C(v17))
      {
        BOOL v7 = qword_100A19EA0;
        if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138543362;
          id v19 = v5;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Initiating pipe capability exchange with device \"%{public}@\"", buf, 0xCu);
        }
        uint64_t v8 = sub_1000E7DAC(v17);
        if (v8)
        {
          uint64_t v9 = qword_100A19EA0;
          if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_ERROR)) {
            sub_1007519F8(v8, v9, v10, v11, v12, v13, v14, v15);
          }
        }
      }
      sub_10001B8AC(&v16);
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_ERROR))
    {
      sub_100751A64();
    }
  }
}

void sub_1002BE8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_10001B8AC(&a12);

  _Unwind_Resume(a1);
}

void sub_1002BE900(uint64_t a1, void *a2, int a3)
{
}

void sub_1002BE908(uint64_t a1, void *a2, int a3, int a4, int a5, int a6)
{
  id v11 = a2;
  uint64_t v12 = qword_100A19EA0;
  if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109888;
    int v23 = a3;
    __int16 v24 = 1024;
    int v25 = a4;
    __int16 v26 = 1024;
    int v27 = a5;
    __int16 v28 = 1024;
    int v29 = a6;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "CL Ready in ScalablePipe peerVersion:%d peerFeatures:%x localVersion:%d localFeatures:%x", buf, 0x1Au);
  }
  uint64_t v13 = sub_100019878();
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1002BEA9C;
  v15[3] = &unk_100998A10;
  uint64_t v17 = a1;
  id v14 = v11;
  id v16 = v14;
  char v20 = a3;
  char v21 = a5;
  int v18 = a4;
  int v19 = a6;
  sub_100013018(v13, v15);
}

void sub_1002BEA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1002BEA9C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009A2A88);
  }
  uint64_t v9 = 0;
  id v3 = off_1009F7EB8;
  sub_1000305AC(buf, *(void *)(a1 + 32));
  if (sub_1006856B8((uint64_t)v3, buf, &v9))
  {
    char v8 = 0;
    sub_10001B8E0(&v8);
    int v4 = sub_1000EB238(v9);
    if (sub_1000EB32C(v9)) {
      *(unsigned char *)(v9 + 32) = 1;
    }
    sub_10001B910(&v8);
    id v5 = qword_100A19EA0;
    if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      uint64_t v11 = v6;
      __int16 v12 = 1024;
      int v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "device %{public}@ companionLink=%d", buf, 0x12u);
    }
    if (v4)
    {
      BOOL v7 = qword_100A19EA0;
      if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "This is a companion link, pre-taggine with HasTS", buf, 2u);
      }
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009A2B28);
      }
      sub_1006BDCDC((uint64_t)off_1009F7ED8, *(void **)(a1 + 32));
    }
    sub_10001B8AC(&v8);
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009A2B28);
  }
  sub_1006C6318((uint64_t)off_1009F7ED8, *(void **)(a1 + 32), *(unsigned char *)(a1 + 56), *(_DWORD *)(a1 + 48));
  *(unsigned char *)(v2 + 224) = *(unsigned char *)(a1 + 57);
  *(_DWORD *)(v2 + 228) = *(_DWORD *)(a1 + 52);
}

void sub_1002BECC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

void sub_1002BECE4(uint64_t a1, void *a2, int a3, int a4, int a5, int a6)
{
}

void sub_1002BECEC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  v30[0] = 0;
  v30[1] = 0;
  sub_10003AED0((uint64_t)v30, a1 + 80);
  uint64_t v6 = *(void **)(a1 + 144);
  int v23 = (void *)(a1 + 152);
  if (v6 != (void *)(a1 + 152))
  {
    do
    {
      __int16 v24 = v6;
      BOOL v7 = (uint64_t *)v6[5];
      if (*v7)
      {
        for (uint64_t i = (void *)v7[4]; i != (void *)v7[5]; uint64_t i = v25 + 1)
        {
          int v25 = i;
          uint64_t v9 = (uint64_t *)*i;
          long long v28 = 0u;
          long long v29 = 0u;
          long long v26 = 0u;
          long long v27 = 0u;
          id v10 = (id)v9[5];
          id v11 = [v10 countByEnumeratingWithState:&v26 objects:v31 count:16];
          if (v11)
          {
            uint64_t v12 = *(void *)v27;
            do
            {
              for (uint64_t j = 0; j != v11; uint64_t j = (char *)j + 1)
              {
                if (*(void *)v27 != v12) {
                  objc_enumerationMutation(v10);
                }
                id v14 = [*(id *)(*((void *)&v26 + 1) + 8 * (void)j) identifier];
                unsigned int v15 = [v5 isEqual:v14];

                if (v15)
                {
                  id v16 = v9;
                  if (*((char *)v9 + 23) < 0) {
                    id v16 = (uint64_t *)*v9;
                  }
                  uint64_t v17 = *v7;
                  int v18 = +[NSString stringWithUTF8String:v16];
                  (*(void (**)(uint64_t, void *, id, uint64_t))(*(void *)v17 + 48))(v17, v18, v5, a3);
                }
              }
              id v11 = [v10 countByEnumeratingWithState:&v26 objects:v31 count:16];
            }
            while (v11);
          }
        }
      }
      int v19 = v24;
      char v20 = (void *)v24[1];
      if (v20)
      {
        do
        {
          char v21 = v20;
          char v20 = (void *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          char v21 = (void *)v19[2];
          BOOL v22 = *v21 == (void)v19;
          int v19 = v21;
        }
        while (!v22);
      }
      uint64_t v6 = v21;
    }
    while (v21 != v23);
  }
  sub_10003AFB4((uint64_t)v30);
}

void sub_1002BEF1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002BEF68(uint64_t a1, void *a2, uint64_t a3)
{
}

void sub_1002BEF70(uint64_t a1, void *a2, int a3, int a4)
{
  id v6 = a2;
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009A2A88);
  }
  uint64_t v10 = 0;
  BOOL v7 = off_1009F7EB8;
  sub_1000305AC(buf, v6);
  if (sub_1006856B8((uint64_t)v7, buf, &v10))
  {
    char v8 = qword_100A19EA0;
    if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = "high";
      if (a3) {
        uint64_t v9 = "low";
      }
      *(_DWORD *)buf = 67109378;
      int v12 = a4;
      __int16 v13 = 2082;
      id v14 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "RSSI threshold crossed with RSSI=%d, crossed %{public}s threshold", buf, 0x12u);
    }
    buf[0] = 0;
    sub_10001B8E0(buf);
    sub_10016E224(v10, a4);
    sub_10001B8AC(buf);
  }
}

void sub_1002BF0C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10001B8AC(va);

  _Unwind_Resume(a1);
}

uint64_t sub_1002BF0F4()
{
  return 1;
}

uint64_t sub_1002BF0FC()
{
  return 1;
}

void sub_1002BF104(uint64_t a1)
{
  uint64_t v2 = sub_100019878();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1002BF180;
  v3[3] = &unk_100997528;
  v3[4] = a1;
  sub_1000197D8(v2, v3);
}

uint64_t sub_1002BF180(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(unsigned char *)(v1 + 62))
  {
    uint64_t v2 = qword_100A19EA0;
    if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "System will sleep, disabling asymmetric peripheral latency", v4, 2u);
    }
    uint64_t v3 = sub_10003FB34();
    uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)v3 + 808))(v3, 0);
    *(unsigned char *)(v1 + 62) = 0;
  }
  return result;
}

void sub_1002BF22C(uint64_t a1)
{
}

void sub_1002BF234(uint64_t a1)
{
  uint64_t v2 = sub_100019878();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1002BF2B0;
  v3[3] = &unk_100997528;
  v3[4] = a1;
  sub_100013018(v2, v3);
}

void sub_1002BF2B0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v1 + 62))
  {
    sub_1002BCF7C(*(void *)(a1 + 32));
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    if ([v5 count])
    {
      int v2 = sub_1002BD198(v1);

      if (v2)
      {
        uint64_t v3 = qword_100A19EA0;
        if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Peripheral connection exists, enabling asymmetric peripheral latency", buf, 2u);
        }
        uint64_t v4 = sub_10003FB34();
        (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 808))(v4, 1);
        *(unsigned char *)(v1 + 62) = 1;
      }
    }
    else
    {
    }
  }
}

void sub_1002BF3C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1002BF3D8(uint64_t a1)
{
}

void sub_1002BF3E0(uint64_t a1)
{
  if (*(void *)(a1 + 216))
  {
    uint64_t v1 = qword_100A19EA0;
    if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_FAULT)) {
      sub_100751ACC(v1, v2, v3);
    }
  }
  sub_1003733D8();
}

uint64_t sub_1002BF500(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 216);
  if (v1)
  {
    uint64_t v3 = qword_100A19F40;
    if (!os_log_type_enabled((os_log_t)qword_100A19F40, OS_LOG_TYPE_DEFAULT)
      || (uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 16))(v1),
          int v7 = 136446210,
          uint64_t v8 = v4,
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Destroying %{public}s", (uint8_t *)&v7, 0xCu), (uint64_t v1 = *(void *)(a1 + 216)) != 0))
    {
      (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
    }
    *(void *)(a1 + 216) = 0;
  }
  else
  {
    id v5 = qword_100A19EA0;
    if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v7) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "fUpgradeAssertion was NULL when trying to deassert", (uint8_t *)&v7, 2u);
    }
  }
  return sub_1000E4898(0);
}

void sub_1002BF660()
{
  if (qword_1009FB180 != -1) {
    dispatch_once(&qword_1009FB180, &stru_1009A2A48);
  }
  sub_1002BF3E0(qword_1009FB178);
}

const char *sub_1002BF820(int a1)
{
  if (a1 > 15)
  {
    switch(a1)
    {
      case 16:
        return "USB";
      case 17:
        return "AWDL";
      case 18:
        return "NAN";
      default:
        return "Unknown";
    }
  }
  else
  {
    uint64_t result = "Invalid Transport";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        uint64_t result = "Bluetooth LE";
        break;
      case 2:
        uint64_t result = "Bluetooth Classic";
        break;
      case 3:
        uint64_t result = "WL";
        break;
      default:
        return "Unknown";
    }
  }
  return result;
}

void sub_1002BF8DC(id a1)
{
  if (qword_1009FB180 != -1) {
    dispatch_once(&qword_1009FB180, &stru_1009A2A48);
  }
  sub_1002BF500(qword_1009FB178);

  sub_1000E4898(0);
}

void sub_1002BF938(uint64_t a1, char a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  sub_1004B8C30(&v27, 14);
  BYTE4(v27) = a2;
  uint64_t v28 = 0;
  __int16 v26 = 0;
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009A2A88);
  }
  uint64_t v10 = sub_100686130((uint64_t)off_1009F7EB8, a1);
  if (v10)
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009A2B28);
    }
    uint64_t v11 = sub_1006BBBA0((uint64_t)off_1009F7ED8, v10);
    if (v11) {
      uint64_t v28 = a6 / 1000 + 1000 * a5 - v11;
    }
    if (sub_100050530())
    {
      uint64_t v12 = sub_100050530();
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v12 + 40))(v12, &v27);
    }
    uint64_t v13 = sub_100017768();
    sub_10004191C(v24, "Magnet");
    sub_10004191C(__p, "EnableRSSIHistory");
    (*(void (**)(uint64_t, void **, void **, __int16 *))(*(void *)v13 + 72))(v13, v24, __p, &v26);
    if (v23 < 0) {
      operator delete(__p[0]);
    }
    if (v25 < 0) {
      operator delete(v24[0]);
    }
    if ((_BYTE)v26)
    {
      uint64_t v14 = sub_10003FB34();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v14 + 816))(v14, a1, 1, 1);
    }
    uint64_t v15 = sub_100017768();
    sub_10004191C(v24, "Magnet");
    sub_10004191C(__p, "EnableRSSIMonitoring");
    (*(void (**)(uint64_t, void **, void **, char *))(*(void *)v15 + 72))(v15, v24, __p, (char *)&v26 + 1);
    if (v23 < 0) {
      operator delete(__p[0]);
    }
    if (v25 < 0) {
      operator delete(v24[0]);
    }
    if (HIBYTE(v26))
    {
      uint64_t v16 = sub_10003FB34();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v16 + 824))(v16, a1, 1);
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009A2B28);
    }
    if (sub_1006BDD68((uint64_t)off_1009F7ED8, v10))
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009A2B28);
      }
      uint64_t v17 = off_1009F7ED8;
      sub_10004191C(v20, "_CTKD_");
      char v18 = sub_100030A04((uint64_t)v17, v10, (uint64_t)v20);
      char v19 = v18;
      if (v21 < 0)
      {
        operator delete(v20[0]);
        if (v19)
        {
LABEL_37:
          if (qword_1009FB190 != -1) {
            dispatch_once(&qword_1009FB190, &stru_1009A2BA8);
          }
          sub_10072B748();
          goto LABEL_40;
        }
      }
      else if (v18)
      {
        goto LABEL_37;
      }
      if (qword_1009F7ED0 == -1)
      {
LABEL_36:
        sub_100706D34(qword_1009F7EC8, v10, 0);
        goto LABEL_37;
      }
    }
    else
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009A2B28);
      }
      sub_1006BDCDC((uint64_t)off_1009F7ED8, v10);
      if (qword_1009F7ED0 == -1) {
        goto LABEL_36;
      }
    }
    dispatch_once(&qword_1009F7ED0, &stru_1009A2B88);
    goto LABEL_36;
  }
LABEL_40:
}

void sub_1002BFD74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1002BFDD8(uint64_t a1)
{
  if (qword_1009FB180 != -1) {
    dispatch_once(&qword_1009FB180, &stru_1009A2A48);
  }
  uint64_t v2 = *(void *)(a1 + 32);
  char v3 = *(unsigned char *)(a1 + 48);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 49);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 50);
  int v6 = *(_DWORD *)(a1 + 40);
  int v7 = *(_DWORD *)(a1 + 44);

  sub_1002BF938(v2, v3, v4, v5, v6, v7);
}

void sub_1002BFE44(char a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, unsigned int a7, unsigned int a8)
{
  uint64_t v22 = a3;
  uint64_t v21 = a4;
  uint64_t v11 = a5;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v12 = a7;
  uint64_t v13 = a8;
  sub_1004B8C30(&v17, 15);
  BYTE4(v17) = a1;
  DWORD2(v17) = a2;
  long long v18 = 0uLL;
  *(void *)&long long v19 = v11;
  DWORD2(v19) = a6;
  *(void *)&long long v20 = v12;
  *((void *)&v20 + 1) = v13;
  *(void *)&long long v18 = sub_100262880((uint64_t)&v22);
  *((void *)&v18 + 1) = sub_100262880((uint64_t)&v21);
  if (sub_100050530())
  {
    uint64_t v14 = sub_100050530();
    (*(void (**)(uint64_t, long long *))(*(void *)v14 + 40))(v14, &v17);
  }
  uint64_t v15 = sub_1002C5648();
  sub_1002CB524(v15);
  uint64_t v16 = sub_100019878();
  sub_100013018(v16, &stru_1009A28B8);
}

void sub_1002BFF34(id a1)
{
  if (qword_1009FB180 != -1) {
    dispatch_once(&qword_1009FB180, &stru_1009A2A48);
  }
  uint64_t v1 = qword_1009FB178;

  sub_1002BF500(v1);
}

uint64_t sub_1002BFF88(unsigned int a1, char a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, unsigned int a7, unint64_t a8)
{
  uint64_t v21 = a4;
  uint64_t v22 = a3;
  uint64_t v20 = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v10 = a1;
  uint64_t v11 = a5;
  uint64_t v12 = a7;
  uint64_t v13 = 1000 * (int)a8 + ((int)(a8 >> 16) >> 16);
  sub_1004B8C30(&v16, 16);
  *((void *)&v16 + 1) = v10;
  LOBYTE(v17) = a2;
  *((void *)&v17 + 1) = 0;
  *(void *)&long long v18 = 0;
  *((void *)&v18 + 1) = v11;
  LODWORD(v19) = a6;
  *((void *)&v19 + 1) = v12;
  uint64_t v20 = v13;
  *((void *)&v17 + 1) = sub_100262880((uint64_t)&v22);
  *(void *)&long long v18 = sub_100262880((uint64_t)&v21);
  uint64_t result = sub_100050530();
  if (result)
  {
    uint64_t v15 = sub_100050530();
    return (*(uint64_t (**)(uint64_t, long long *))(*(void *)v15 + 40))(v15, &v16);
  }
  return result;
}

void sub_1002C0070(uint64_t a1, int a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t v16 = 0;
  unint64_t v17 = 0;
  sub_1004B8C30(&v16, 17);
  HIDWORD(v16) = a2;
  unint64_t v17 = __PAIR64__(a4, a3);
  if (sub_100050530())
  {
    uint64_t v10 = sub_100050530();
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v10 + 40))(v10, &v16);
  }
  uint64_t v11 = sub_100035F54();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v11 + 344))(v11) & 1) == 0 && (a4 == 723 || a4 == 705))
  {
    uint64_t v12 = qword_100A19EA0;
    if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_ERROR)) {
      sub_100751C14(a5, v12);
    }
    if (a5)
    {
      memset(uu, 0, sizeof(uu));
      uuid_clear(uu);
      if (qword_1009F7EC0 != -1) {
        dispatch_once(&qword_1009F7EC0, &stru_1009A2A88);
      }
      if (sub_10067F618((uint64_t)off_1009F7EB8, a1, uu) && !uuid_is_null(uu))
      {
        uint64_t v13 = qword_100A19EA0;
        if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_ERROR)) {
          sub_100751B48(uu, v13);
        }
        if (qword_1009F7ED0 != -1) {
          dispatch_once(&qword_1009F7ED0, &stru_1009A2B88);
        }
        uint64_t v14 = qword_1009F7EC8;
        uint64_t v15 = sub_100031234(uu);
        sub_100706D34(v14, v15, 1);
      }
      else if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_ERROR))
      {
        sub_100751BE0();
      }
    }
  }
}

void sub_1002C028C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002C02A4(uint64_t a1)
{
  if (qword_1009FB180 != -1) {
    dispatch_once(&qword_1009FB180, &stru_1009A2A48);
  }
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(_DWORD *)(a1 + 40);
  unsigned int v4 = *(_DWORD *)(a1 + 44);
  unsigned int v5 = *(_DWORD *)(a1 + 48);
  int v6 = *(unsigned __int8 *)(a1 + 52);

  sub_1002C0070(v2, v3, v4, v5, v6);
}

void sub_1002C030C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v30 = a2;
  int v46 = &off_100998428;
  __int16 v47 = 0;
  v45[0] = 0;
  v45[1] = 0;
  sub_10003AED0((uint64_t)v45, a1 + 80);
  unsigned int v5 = *(void **)(a1 + 144);
  int v31 = (void *)(a1 + 152);
  if (v5 != (void *)(a1 + 152))
  {
    do
    {
      uint64_t v6 = v5[5];
      for (uint64_t i = *(uint64_t **)(v6 + 32); i != *(uint64_t **)(v6 + 40); ++i)
      {
        uint64_t v8 = *i;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        id v9 = *(id *)(v8 + 40);
        id v10 = [v9 countByEnumeratingWithState:&v41 objects:v48 count:16];
        if (v10)
        {
          uint64_t v11 = *(void *)v42;
          while (2)
          {
            for (uint64_t j = 0; j != v10; uint64_t j = (char *)j + 1)
            {
              if (*(void *)v42 != v11) {
                objc_enumerationMutation(v9);
              }
              uint64_t v13 = *(void **)(*((void *)&v41 + 1) + 8 * (void)j);
              if (objc_msgSend(v13, "pipeHandle", v30) == a3)
              {
                sub_100551758(v5[4], &v36);
                unint64_t v17 = std::string::append(&v36, "(");
                long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
                v37.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v18;
                v17->__r_.__value_.__l.__size_ = 0;
                v17->__r_.__value_.__r.__words[2] = 0;
                v17->__r_.__value_.__r.__words[0] = 0;
                int v19 = *(char *)(v8 + 23);
                if (v19 >= 0) {
                  uint64_t v20 = (const std::string::value_type *)v8;
                }
                else {
                  uint64_t v20 = *(const std::string::value_type **)v8;
                }
                if (v19 >= 0) {
                  std::string::size_type v21 = *(unsigned __int8 *)(v8 + 23);
                }
                else {
                  std::string::size_type v21 = *(void *)(v8 + 8);
                }
                uint64_t v22 = std::string::append(&v37, v20, v21);
                long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
                v38.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v23;
                v22->__r_.__value_.__l.__size_ = 0;
                v22->__r_.__value_.__r.__words[2] = 0;
                v22->__r_.__value_.__r.__words[0] = 0;
                __int16 v24 = std::string::append(&v38, ")");
                long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
                int64_t v40 = v24->__r_.__value_.__r.__words[2];
                *(_OWORD *)std::string __p = v25;
                v24->__r_.__value_.__l.__size_ = 0;
                v24->__r_.__value_.__r.__words[2] = 0;
                v24->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v38.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v37.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v36.__r_.__value_.__l.__data_);
                }
                uint64_t v26 = sub_1003731C0();
                if (v40 >= 0) {
                  uint64_t v27 = __p;
                }
                else {
                  uint64_t v27 = (void **)__p[0];
                }
                uint64_t v28 = [v13 identifier];
                uint64_t v34 = &off_100998428;
                uint64_t v35 = v47;
                if (v47) {
                  sub_100037354((uint64_t)v47);
                }
                (*(void (**)(uint64_t, uint64_t, void **, void *, uint64_t (***)()))(*(void *)v26 + 40))(v26, 4, v27, v28, &v34);
                uint64_t v34 = &off_100998428;
                if (v35) {
                  sub_1000368F4(v35);
                }

                if (SHIBYTE(v40) < 0) {
                  operator delete(__p[0]);
                }
                goto LABEL_48;
              }
            }
            id v10 = [v9 countByEnumeratingWithState:&v41 objects:v48 count:16];
            if (v10) {
              continue;
            }
            break;
          }
        }
      }
      uint64_t v14 = (void *)v5[1];
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          uint64_t v15 = (void *)v5[2];
          BOOL v16 = *v15 == (void)v5;
          unsigned int v5 = v15;
        }
        while (!v16);
      }
      unsigned int v5 = v15;
    }
    while (v15 != v31);
  }
  sub_10003AFE8((uint64_t)v45);
  if (v30)
  {
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009A2A88);
    }
    sub_100686130((uint64_t)off_1009F7EB8, v30);
    id v9 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v9 = 0;
  }
  uint64_t v29 = sub_1003731C0();
  int v32 = &off_100998428;
  uint64_t v33 = v47;
  if (v47) {
    sub_100037354((uint64_t)v47);
  }
  (*(void (**)(uint64_t, uint64_t, const char *, id, uint64_t (***)()))(*(void *)v29 + 40))(v29, 4, "com.apple.bluetoothd", v9, &v32);
  int v32 = &off_100998428;
  if (v33) {
    sub_1000368F4(v33);
  }
LABEL_48:

  sub_10003AFB4((uint64_t)v45);
  int v46 = &off_100998428;
  if (v47) {
    sub_1000368F4(v47);
  }
}

void sub_1002C0750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, atomic_uint *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  if (a13) {
    sub_1000368F4(a13);
  }

  sub_10003AFB4((uint64_t)&a52);
  *(void *)(v53 - 248) = a11;
  uint64_t v55 = *(atomic_uint **)(v53 - 240);
  if (v55) {
    sub_1000368F4(v55);
  }
  _Unwind_Resume(a1);
}

void sub_1002C0844(uint64_t a1)
{
  if (qword_1009FB180 != -1) {
    dispatch_once(&qword_1009FB180, &stru_1009A2A48);
  }
  uint64_t v2 = qword_1009FB178;
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(unsigned __int16 *)(a1 + 40);

  sub_1002C030C(v2, v3, v4);
}

void sub_1002C08B0(uint64_t a1)
{
  uint64_t v2 = sub_100019878();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1002C092C;
  v3[3] = &unk_100997528;
  v3[4] = a1;
  sub_100013018(v2, v3);
}

unsigned char *sub_1002C092C(unsigned char *result)
{
  if (!*(unsigned char *)(*((void *)result + 4) + 56)) {
    return result;
  }
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  unsigned int v13 = 0;
  char v12 = 0;
  uint64_t v11 = 0;
  char v10 = 0;
  sub_10001B8E0(&v10);
  sub_10016F1D8((_DWORD *)&v15 + 1, &v15, (_DWORD *)&v14 + 1, &v14, &v13, 0, 0, 0, &v11);
  sub_10001B910(&v10);
  long long v8 = 0u;
  long long v9 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  sub_1004B8C30(&v6, 18);
  BYTE4(v6) = HIDWORD(v15) != 0;
  *((void *)&v6 + 1) = v15;
  *(void *)&long long v7 = HIDWORD(v14);
  *((void *)&v7 + 1) = (HIDWORD(v14) - v15);
  LODWORD(v8) = v14;
  *((void *)&v8 + 1) = v13;
  if (v14) {
    uint64_t v1 = (HIDWORD(v14) - (v15 + v13)) / v14;
  }
  else {
    uint64_t v1 = 0;
  }
  *(void *)&long long v9 = v1;
  if (!HIDWORD(v15)) {
    goto LABEL_9;
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A2AA8);
  }
  if (!sub_1004E76DC((uint64_t)off_1009F8068, v11, &v12))
  {
    int v4 = v12;
    *((void *)&v9 + 1) = v12;
    uint64_t v2 = qword_100A19EA0;
    if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      int v17 = v4;
      uint64_t v3 = "LE Rssi %d";
      goto LABEL_13;
    }
  }
  else
  {
LABEL_9:
    *((void *)&v9 + 1) = 0;
    uint64_t v2 = qword_100A19EA0;
    if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      int v17 = BYTE4(v6);
      uint64_t v3 = "LE Rssi read with link connected = %d";
LABEL_13:
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, v3, buf, 8u);
    }
  }
  if (sub_100050530())
  {
    uint64_t v5 = sub_100050530();
    (*(void (**)(uint64_t, long long *))(*(void *)v5 + 40))(v5, &v6);
  }
  return sub_10001B8AC(&v10);
}

void sub_1002C0B58(_Unwind_Exception *exception_object)
{
}

unsigned char *sub_1002C0B78(unsigned char *result)
{
  if (*(unsigned char *)(*((void *)result + 4) + 56))
  {
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v30 = 0;
    unsigned int v29 = 0;
    int v54 = 0;
    memset(v53, 0, sizeof(v53));
    int v52 = 0;
    memset(v51, 0, sizeof(v51));
    int v50 = 0;
    memset(v49, 0, sizeof(v49));
    int v48 = 0;
    memset(v47, 0, sizeof(v47));
    memset(__dst, 0, sizeof(__dst));
    memset(v45, 0, sizeof(v45));
    char v28 = 0;
    sub_10001B8E0(&v28);
    sub_10016E8A8((_DWORD *)&v34 + 1, &v34, (_DWORD *)&v33 + 1, (_DWORD *)&v32 + 1, &v33, __dst, (uint64_t)v53, (uint64_t)v51, &v32, (_DWORD *)&v31 + 1, &v31, &v30, (_DWORD *)&v30 + 1, v45, (uint64_t)v49, (uint64_t)v47, &v29);
    sub_10001B910(&v28);
    uint64_t v1 = qword_100A19EA0;
    if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67111424;
      *(_DWORD *)&uint8_t buf[4] = HIDWORD(v34);
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v34;
      *(_WORD *)&buf[14] = 1024;
      LODWORD(v36[0]) = HIDWORD(v33);
      WORD2(v36[0]) = 1024;
      *(_DWORD *)((char *)v36 + 6) = HIDWORD(v32);
      WORD5(v36[0]) = 1024;
      HIDWORD(v36[0]) = v33;
      LOWORD(v36[1]) = 1024;
      *(_DWORD *)((char *)&v36[1] + 2) = v32;
      WORD3(v36[1]) = 1024;
      DWORD2(v36[1]) = HIDWORD(v31);
      WORD6(v36[1]) = 1024;
      *(_DWORD *)((char *)&v36[1] + 14) = v31;
      WORD1(v36[2]) = 1024;
      DWORD1(v36[2]) = HIDWORD(v30);
      WORD4(v36[2]) = 1024;
      *(_DWORD *)((char *)&v36[2] + 10) = v30;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "Stats fetched successfully : lePhy : %d, cumTx : %u, cumRx : %u, coexDen : %x, durationInMs : %u, classicPhy : %d,\t\t\t\t\t\t   cumTx : %u, cumRx : %u, durationInMs : %u, coexDen : %u", buf, 0x3Eu);
    }
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    *(_OWORD *)buf = 0u;
    memset(v36, 0, sizeof(v36));
    unint64_t v3 = v34;
    unint64_t v2 = HIDWORD(v34);
    int v26 = HIDWORD(v33);
    unint64_t v4 = v32;
    unsigned int v23 = HIDWORD(v32);
    unsigned int v24 = v33;
    unsigned int v6 = v31;
    unsigned int v5 = HIDWORD(v31);
    int v8 = v30;
    unsigned int v7 = HIDWORD(v30);
    unint64_t v9 = v29;
    sub_1004B8C30(buf, 24);
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    *(_DWORD *)&uint8_t buf[4] = v2;
    *(_DWORD *)&uint8_t buf[8] = v3;
    memset((char *)v36 + 8, 0, 96);
    long long v38 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    *(_DWORD *)&buf[12] = v26;
    *(void *)&v36[0] = __PAIR64__(v23, v24);
    *((void *)&v36[6] + 1) = __PAIR64__(v5, v4);
    *(void *)&long long v37 = __PAIR64__(v7, v6);
    DWORD2(v37) = v8;
    long long v44 = v9;
    do
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v25 = v10;
      uint64_t v27 = &v53[v10];
      uint64_t v14 = &v51[v10];
      uint64_t v15 = &v49[v10];
      BOOL v16 = &v47[v10];
      do
      {
        if (v27[v13])
        {
          unint64_t v4 = v4 & 0xFFFFFFFF00000000 | v27[v13];
          sub_1002C100C((uint64_t)buf, 1, 0);
        }
        if (v14[v13])
        {
          unint64_t v3 = v3 & 0xFFFFFFFF00000000 | v14[v13];
          sub_1002C100C((uint64_t)buf, 1, 1);
        }
        if (v15[v13])
        {
          unint64_t v2 = v2 & 0xFFFFFFFF00000000 | v15[v13];
          sub_1002C100C((uint64_t)buf, 2, 0);
        }
        if (v16[v13])
        {
          unint64_t v9 = v9 & 0xFFFFFFFF00000000 | v16[v13];
          sub_1002C100C((uint64_t)buf, 2, 1);
        }
        ++v13;
        v12 += (uint64_t)&_mh_execute_header;
      }
      while (v13 != 10);
      ++v11;
      uint64_t v10 = v25 + 10;
    }
    while (v11 != 10);
    for (uint64_t i = 0; i != 80; i += 4)
    {
      int v18 = __dst[i + 2];
      if (*(_WORD *)&__dst[i]) {
        BOOL v19 = 0;
      }
      else {
        BOOL v19 = v18 == 0;
      }
      if (!v19) {
        sub_1002C13B0(buf, 1, *(unsigned __int16 *)&__dst[i], (char)v18);
      }
      int v20 = v45[i + 2];
      if (*(_WORD *)&v45[i]) {
        BOOL v21 = 0;
      }
      else {
        BOOL v21 = v20 == 0;
      }
      if (!v21) {
        sub_1002C13B0(buf, 2, *(unsigned __int16 *)&v45[i], (char)v20);
      }
    }
    if (sub_100050530())
    {
      uint64_t v22 = sub_100050530();
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v22 + 40))(v22, buf);
    }
    sub_1002C4528(buf);
    return sub_10001B8AC(&v28);
  }
  return result;
}

void sub_1002C0FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,__int16 a21,char a22,char a23)
{
}

void sub_1002C100C(uint64_t a1, int a2, int a3)
{
  if (a2 == 2)
  {
    if (a3 == 1) {
      operator new();
    }
    if (!a3) {
      operator new();
    }
  }
  else if (a2 == 1)
  {
    if (a3 == 1) {
      operator new();
    }
    if (!a3) {
      operator new();
    }
  }
}

void sub_1002C13B0(void *a1, int a2, int a3, int a4)
{
  if (a2 == 2)
  {
    unint64_t v10 = a1[29];
    uint64_t v11 = (char *)a1[28];
    if ((unint64_t)v11 >= v10)
    {
      BOOL v19 = (char *)a1[27];
      uint64_t v20 = (v11 - v19) >> 2;
      unint64_t v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 62) {
        goto LABEL_70;
      }
      uint64_t v22 = v10 - (void)v19;
      if (v22 >> 1 > v21) {
        unint64_t v21 = v22 >> 1;
      }
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23)
      {
        unsigned int v24 = (char *)sub_1002C44F0((uint64_t)(a1 + 29), v23);
        BOOL v19 = (char *)a1[27];
        uint64_t v11 = (char *)a1[28];
      }
      else
      {
        unsigned int v24 = 0;
      }
      long long v37 = &v24[4 * v20];
      long long v38 = &v24[4 * v23];
      *(_DWORD *)long long v37 = a4;
      uint64_t v12 = v37 + 4;
      while (v11 != v19)
      {
        int v39 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v37 - 1) = v39;
        v37 -= 4;
      }
      a1[27] = v37;
      a1[28] = v12;
      a1[29] = v38;
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v11 = a4;
      uint64_t v12 = v11 + 4;
    }
    unint64_t v40 = a1[26];
    a1[28] = v12;
    long long v41 = (char *)a1[25];
    if ((unint64_t)v41 >= v40)
    {
      long long v43 = (char *)a1[24];
      uint64_t v44 = (v41 - v43) >> 2;
      unint64_t v45 = v44 + 1;
      if ((unint64_t)(v44 + 1) >> 62) {
        goto LABEL_70;
      }
      uint64_t v46 = v40 - (void)v43;
      if (v46 >> 1 > v45) {
        unint64_t v45 = v46 >> 1;
      }
      if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v47 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v47 = v45;
      }
      if (v47)
      {
        int v48 = (char *)sub_1002C44F0((uint64_t)(a1 + 26), v47);
        long long v43 = (char *)a1[24];
        long long v41 = (char *)a1[25];
      }
      else
      {
        int v48 = 0;
      }
      int v52 = &v48[4 * v44];
      uint64_t v53 = &v48[4 * v47];
      *(_DWORD *)int v52 = a3;
      long long v42 = v52 + 4;
      while (v41 != v43)
      {
        int v54 = *((_DWORD *)v41 - 1);
        v41 -= 4;
        *((_DWORD *)v52 - 1) = v54;
        v52 -= 4;
      }
      a1[24] = v52;
      a1[25] = v42;
      a1[26] = v53;
      if (v43) {
        operator delete(v43);
      }
    }
    else
    {
      *(_DWORD *)long long v41 = a3;
      long long v42 = v41 + 4;
    }
    a1[25] = v42;
  }
  else if (a2 == 1)
  {
    unint64_t v7 = a1[14];
    int v8 = (char *)a1[13];
    if ((unint64_t)v8 >= v7)
    {
      uint64_t v13 = (char *)a1[12];
      uint64_t v14 = (v8 - v13) >> 2;
      unint64_t v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 62) {
        goto LABEL_70;
      }
      uint64_t v16 = v7 - (void)v13;
      if (v16 >> 1 > v15) {
        unint64_t v15 = v16 >> 1;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17)
      {
        int v18 = (char *)sub_1002C44F0((uint64_t)(a1 + 14), v17);
        uint64_t v13 = (char *)a1[12];
        int v8 = (char *)a1[13];
      }
      else
      {
        int v18 = 0;
      }
      uint64_t v25 = &v18[4 * v14];
      int v26 = &v18[4 * v17];
      *(_DWORD *)uint64_t v25 = a4;
      unint64_t v9 = v25 + 4;
      while (v8 != v13)
      {
        int v27 = *((_DWORD *)v8 - 1);
        v8 -= 4;
        *((_DWORD *)v25 - 1) = v27;
        v25 -= 4;
      }
      a1[12] = v25;
      a1[13] = v9;
      a1[14] = v26;
      if (v13) {
        operator delete(v13);
      }
    }
    else
    {
      *(_DWORD *)int v8 = a4;
      unint64_t v9 = v8 + 4;
    }
    unint64_t v28 = a1[11];
    a1[13] = v9;
    unsigned int v29 = (char *)a1[10];
    if ((unint64_t)v29 < v28)
    {
      *(_DWORD *)unsigned int v29 = a3;
      uint64_t v30 = v29 + 4;
LABEL_61:
      a1[10] = v30;
      return;
    }
    uint64_t v31 = (char *)a1[9];
    uint64_t v32 = (v29 - v31) >> 2;
    unint64_t v33 = v32 + 1;
    if (!((unint64_t)(v32 + 1) >> 62))
    {
      uint64_t v34 = v28 - (void)v31;
      if (v34 >> 1 > v33) {
        unint64_t v33 = v34 >> 1;
      }
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v35 = v33;
      }
      if (v35)
      {
        std::string v36 = (char *)sub_1002C44F0((uint64_t)(a1 + 11), v35);
        uint64_t v31 = (char *)a1[9];
        unsigned int v29 = (char *)a1[10];
      }
      else
      {
        std::string v36 = 0;
      }
      long long v49 = &v36[4 * v32];
      int v50 = &v36[4 * v35];
      *(_DWORD *)long long v49 = a3;
      uint64_t v30 = v49 + 4;
      while (v29 != v31)
      {
        int v51 = *((_DWORD *)v29 - 1);
        v29 -= 4;
        *((_DWORD *)v49 - 1) = v51;
        v49 -= 4;
      }
      a1[9] = v49;
      a1[10] = v30;
      a1[11] = v50;
      if (v31) {
        operator delete(v31);
      }
      goto LABEL_61;
    }
LABEL_70:
    abort();
  }
}

uint64_t sub_1002C16A8(void *a1, const void **a2)
{
  v50[0] = 0;
  v50[1] = 0;
  sub_10003AED0((uint64_t)v50, (uint64_t)(a1 + 10));
  unint64_t v4 = (void *)a1[18];
  long long v49 = a1 + 19;
  if (v4 != a1 + 19)
  {
    char v5 = *((unsigned char *)a2 + 23);
    if (v5 >= 0) {
      unsigned int v6 = (const void *)*((unsigned __int8 *)a2 + 23);
    }
    else {
      unsigned int v6 = a2[1];
    }
    if (v5 >= 0) {
      unint64_t v7 = (unsigned __int8 *)a2;
    }
    else {
      unint64_t v7 = (unsigned __int8 *)*a2;
    }
    do
    {
      uint64_t v8 = v4[5];
      unint64_t v9 = *(unsigned __int8 ***)(v8 + 32);
      unint64_t v10 = *(unsigned __int8 ***)(v8 + 40);
      while (v9 != v10)
      {
        uint64_t v11 = *v9;
        uint64_t v12 = (*v9)[23];
        if ((v12 & 0x80u) == 0) {
          uint64_t v13 = (const void *)(*v9)[23];
        }
        else {
          uint64_t v13 = (const void *)*((void *)*v9 + 1);
        }
        if (v13 == v6)
        {
          if ((v12 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v11, v7, *((void *)*v9 + 1)))
            {
LABEL_29:
              if (!v11[39] && os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_FAULT)) {
                sub_100751D38();
              }
              id v19 = [*((id *)v11 + 5) count];
              uint64_t v20 = qword_100A19EA0;
              if (v19 && os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_FAULT))
              {
                if (*((char *)a2 + 23) >= 0) {
                  int v48 = (unsigned __int8 *)a2;
                }
                else {
                  int v48 = (unsigned __int8 *)*a2;
                }
                *(_DWORD *)buf = 136446210;
                int v52 = v48;
                _os_log_fault_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "Endpoint \"%{public}s\" has been unregistered with pipes remaining!", buf, 0xCu);
                uint64_t v20 = qword_100A19EA0;
              }
              if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
              {
                if (*((char *)a2 + 23) >= 0) {
                  unint64_t v21 = (unsigned __int8 *)a2;
                }
                else {
                  unint64_t v21 = (unsigned __int8 *)*a2;
                }
                *(_DWORD *)buf = 136446210;
                int v52 = v21;
                _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Successfully unregistered endpoint \"%{public}s\"", buf, 0xCu);
              }
              uint64_t v22 = *(unsigned __int8 ***)(v8 + 40);
              int64_t v23 = (char *)v22 - (char *)(v9 + 1);
              if (v22 != v9 + 1) {
                memmove(v9, v9 + 1, (char *)v22 - (char *)(v9 + 1));
              }
              *(void *)(v8 + 40) = (char *)v9 + v23;

              if ((char)v11[23] < 0) {
                operator delete(*(void **)v11);
              }
              operator delete();
            }
          }
          else
          {
            if (!(*v9)[23]) {
              goto LABEL_29;
            }
            uint64_t v14 = v7;
            unint64_t v15 = *v9;
            while (*v15 == *v14)
            {
              ++v15;
              ++v14;
              if (!--v12) {
                goto LABEL_29;
              }
            }
          }
        }
        ++v9;
      }
      uint64_t v16 = (void *)v4[1];
      if (v16)
      {
        do
        {
          unint64_t v17 = v16;
          uint64_t v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          unint64_t v17 = (void *)v4[2];
          BOOL v18 = *v17 == (void)v4;
          unint64_t v4 = v17;
        }
        while (!v18);
      }
      unint64_t v4 = v17;
    }
    while (v17 != v49);
  }
  uint64_t v24 = a1[21];
  uint64_t v25 = a1[22];
  if (v24 == v25) {
    return sub_10003AFB4((uint64_t)v50);
  }
  uint64_t v26 = *((unsigned __int8 *)a2 + 23);
  unint64_t v28 = (unsigned __int8 *)*a2;
  size_t v27 = (size_t)a2[1];
  if ((v26 & 0x80u) == 0) {
    unsigned int v29 = (const void *)*((unsigned __int8 *)a2 + 23);
  }
  else {
    unsigned int v29 = a2[1];
  }
  while (1)
  {
    uint64_t v30 = (const void *)*(unsigned __int8 *)(v24 + 31);
    int v31 = (char)v30;
    if ((char)v30 < 0) {
      uint64_t v30 = *(const void **)(v24 + 16);
    }
    if (v29 != v30) {
      goto LABEL_61;
    }
    uint64_t v32 = v31 >= 0 ? (unsigned __int8 *)(v24 + 8) : *(unsigned __int8 **)(v24 + 8);
    if ((v26 & 0x80) != 0) {
      break;
    }
    if (!v26) {
      goto LABEL_63;
    }
    unint64_t v33 = a2;
    uint64_t v34 = v26;
    while (*(unsigned __int8 *)v33 == *v32)
    {
      unint64_t v33 = (const void **)((char *)v33 + 1);
      ++v32;
      if (!--v34) {
        goto LABEL_63;
      }
    }
LABEL_61:
    v24 += 48;
    if (v24 == v25) {
      return sub_10003AFB4((uint64_t)v50);
    }
  }
  if (memcmp(v28, v32, v27)) {
    goto LABEL_61;
  }
LABEL_63:
  unint64_t v35 = (void *)*v49;
  if (!*v49) {
    goto LABEL_74;
  }
  unint64_t v36 = *(void *)v24;
  long long v37 = a1 + 19;
  do
  {
    unint64_t v38 = v35[4];
    BOOL v39 = v38 >= v36;
    if (v38 >= v36) {
      unint64_t v40 = v35;
    }
    else {
      unint64_t v40 = v35 + 1;
    }
    if (v39) {
      long long v37 = v35;
    }
    unint64_t v35 = (void *)*v40;
  }
  while (*v40);
  if (v37 != v49 && v36 >= v37[4])
  {
    uint64_t v42 = sub_1002BB560((uint64_t)a1, v36, (void *)(v24 + 8), *(_DWORD *)(v24 + 32), *(_DWORD *)(v24 + 36), *(_DWORD *)(v24 + 40), *(unsigned __int8 *)(v24 + 44), 0, 0);
    uint64_t v43 = *(void *)v37[5];
    if (v43) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v43 + 24))(v43, v24 + 8, v42);
    }
  }
  else
  {
LABEL_74:
    long long v41 = qword_100A19EA0;
    if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_FAULT)) {
      sub_100751CB8(a2, v26 >> 7, v41);
    }
  }
  sub_1002C4EE8((uint64_t)buf, v24 + 48, a1[22], v24);
  uint64_t v45 = v44;
  for (uint64_t i = a1[22]; i != v45; i -= 48)
  {
    if (*(char *)(i - 17) < 0) {
      operator delete(*(void **)(i - 40));
    }
  }
  a1[22] = v45;
  return sub_10003AFB4((uint64_t)v50);
}

void sub_1002C1C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002C1C3C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unsigned int a5, unsigned int a6, int a7)
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009A2A88);
  }
  unint64_t v10 = sub_100686130((uint64_t)off_1009F7EB8, a2);
  unsigned __int16 v94 = 2031;
  v81 = v10;
  if (!v10)
  {
    v67 = qword_100A19EA0;
    if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218752;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = a3;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = a5;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = a6;
      _os_log_error_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "Connection manager wasn't tracking a device for connection handle %p, pipeID 0x%x, type %d, priority %d", buf, 0x1Eu);
    }
    buf[0] = 0;
    sub_10001B8E0(buf);
    int v68 = sub_100223D18(a2);
    sub_10001B910(buf);
    if (v68)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_ERROR)) {
        sub_100751DA4();
      }
      uint64_t v76 = sub_100017768();
      sub_1005C99C8(v76, 1);
    }
    sub_10001B8AC(buf);
    goto LABEL_120;
  }
  if (a7)
  {
    uint64_t v98 = 0;
    memset(buf, 0, sizeof(buf));
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009A2A88);
    }
    sub_1006773FC((uint64_t)off_1009F7EB8, v10, (uint64_t)buf);
    if (*(void *)buf)
    {
      id v11 = objc_alloc((Class)NSString);
      if ((a4[23] & 0x80u) == 0) {
        uint64_t v12 = a4;
      }
      else {
        uint64_t v12 = *(unsigned __int8 **)a4;
      }
      id v13 = [v11 initWithUTF8String:v12];
      id v14 = [*(id *)&buf[8] mutableCopy];
      if (([v14 containsObject:v13] & 1) == 0) {
        [v14 addObject:v13];
      }
      objc_storeStrong((id *)&buf[8], v14);
      if (qword_1009F7EC0 != -1) {
        dispatch_once(&qword_1009F7EC0, &stru_1009A2A88);
      }
      unint64_t v15 = off_1009F7EB8;
      v89[0] = *(id *)buf;
      v89[1] = *(id *)&buf[8];
      long long v90 = *(_OWORD *)&buf[16];
      long long v91 = *(_OWORD *)&buf[32];
      long long v92 = *(_OWORD *)&buf[48];
      int v93 = v98;
      sub_100677528((uint64_t)v15, v10, (uint64_t)v89);
    }
  }
  v88[0] = 0;
  v88[1] = 0;
  uint64_t v16 = a1;
  sub_10003AED0((uint64_t)v88, a1 + 80);
  unint64_t v17 = *(void **)(a1 + 144);
  if (v17 == (void *)(a1 + 152)) {
    goto LABEL_98;
  }
  uint64_t v77 = (int)(a6 - 1);
  unsigned int v78 = a3;
  do
  {
    BOOL v18 = (void *)v17[5];
    id v19 = (unsigned __int8 **)v18[4];
    uint64_t v20 = (unsigned __int8 **)v18[5];
    while (v19 != v20)
    {
      unint64_t v21 = *v19;
      signed __int8 v22 = (*v19)[23];
      if (v22 >= 0) {
        uint64_t v23 = (*v19)[23];
      }
      else {
        uint64_t v23 = *((void *)*v19 + 1);
      }
      uint64_t v24 = a4[23];
      int v25 = (char)v24;
      if ((v24 & 0x80u) != 0) {
        uint64_t v24 = *((void *)a4 + 1);
      }
      if (v23 != v24) {
        goto LABEL_91;
      }
      if (v25 >= 0) {
        uint64_t v26 = a4;
      }
      else {
        uint64_t v26 = *(unsigned __int8 **)a4;
      }
      if (((*v19)[23] & 0x80) != 0)
      {
        if (memcmp(*(const void **)v21, v26, *((void *)*v19 + 1))) {
          goto LABEL_91;
        }
      }
      else if ((*v19)[23])
      {
        size_t v27 = *v19;
        uint64_t v28 = (*v19)[23];
        while (*v27 == *v26)
        {
          ++v27;
          ++v26;
          if (!--v28) {
            goto LABEL_37;
          }
        }
        goto LABEL_91;
      }
LABEL_37:
      if (v21[39])
      {
        v69 = qword_100A19EA0;
        unint64_t v10 = v81;
        if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_ERROR))
        {
          if (v22 < 0) {
            unint64_t v21 = *(unsigned __int8 **)v21;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = v21;
          _os_log_error_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_ERROR, "Ignoring pipe event as endpoint \"%{public}s\" is pending deletion", buf, 0xCu);
        }
        goto LABEL_117;
      }
      unsigned __int8 v87 = 0;
      unsigned int v86 = 0;
      unint64_t v10 = v81;
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009A2B28);
      }
      sub_1006C63AC((uint64_t)off_1009F7ED8, v81, &v87, &v86);
      if ((v86 & 0x100) != 0) {
        int v29 = 1;
      }
      else {
        int v29 = 3;
      }
      if ((v86 & 0x80) != 0) {
        int v30 = 2;
      }
      else {
        int v30 = v29;
      }
      int v82 = v30;
      int v31 = *((_DWORD *)v21 + 8);
      if ((v31 - 1) >= 2)
      {
        *(_DWORD *)uuid_t uu = 0;
        uint64_t v35 = sub_1002C5648();
        if (sub_1002C69E0(v35, a2, a3, *((unsigned int *)v18 + 15), (uint64_t)uu, a6, v21[37]))
        {
          unsigned int v70 = qword_100A19EA0;
          if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_ERROR))
          {
            if ((a4[23] & 0x80u) == 0) {
              uint64_t v73 = a4;
            }
            else {
              uint64_t v73 = *(unsigned __int8 **)a4;
            }
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = v73;
            *(_WORD *)&buf[12] = 2114;
            *(void *)&buf[14] = v81;
            _os_log_error_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_ERROR, "Failed to register pipe for endpoint \"%{public}s\" on device \"%{public}@\"", buf, 0x16u);
          }
          goto LABEL_117;
        }
        unint64_t v36 = (void *)*((void *)v21 + 5);
        long long v37 = [[PipeMapping alloc] initWithIdentifier:v81 handle:a3];
        [v36 addObject:v37];

        unint64_t v38 = qword_100A19EA0;
        if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_DEFAULT))
        {
          if ((a4[23] & 0x80u) == 0) {
            BOOL v39 = a4;
          }
          else {
            BOOL v39 = *(unsigned __int8 **)a4;
          }
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = a3;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = v39;
          *(_WORD *)&buf[18] = 2114;
          *(void *)&buf[20] = v81;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = a6;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Successfully created pipe 0x%04X to endpoint \"%{public}s\" on device \"%{public}@\" with priority %d", buf, 0x22u);
        }
        uint64_t v16 = a1;
        if (*v18) {
          (**(void (***)(void, unsigned __int8 *, void *, void, void, void, void, void, unint64_t))*v18)(*v18, a4, v81, a5, a6, *(unsigned int *)uu, v21[37], v87, __PAIR64__(v82, v86));
        }
      }
      else
      {
        if (v31 == 1) {
          uint64_t v32 = "skywalk";
        }
        else {
          uint64_t v32 = "networkrelay";
        }
        if (v31 == 2 && (_os_feature_enabled_impl() & 1) == 0)
        {
          uint64_t v72 = qword_100A19EA0;
          if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_FAULT))
          {
            if ((a4[23] & 0x80u) == 0) {
              uint64_t v75 = a4;
            }
            else {
              uint64_t v75 = *(unsigned __int8 **)a4;
            }
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = v32;
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v75;
            *(_WORD *)&unsigned char buf[22] = 2114;
            *(void *)&buf[24] = v81;
            _os_log_fault_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_FAULT, "Failed to register %{public}s pipe for endpoint \"%{public}s\" on device \"%{public}@\" due to missing feature", buf, 0x20u);
          }
          goto LABEL_117;
        }
        memset(uu, 0, sizeof(uu));
        v95[0] = 0;
        v95[1] = 0;
        [v81 getUUIDBytes:v95];
        uint64_t v79 = v32;
        if (*((_DWORD *)v21 + 8) == 2)
        {
          uuid_clear(uu);
          uint64_t v33 = sub_1002C5648();
          int v34 = sub_1002C6E24(v33, a2, a3, a6, &v94, v21[37], 1, (uint64_t)v95);
        }
        else
        {
          uint64_t v40 = sub_1002C5648();
          int v41 = *((_DWORD *)v18 + 15);
          int v42 = v21[37];
          uint64_t v43 = a4[23];
          BOOL v44 = (v43 & 0x80u) != 0;
          if ((v43 & 0x80u) != 0) {
            uint64_t v43 = *((void *)a4 + 1);
          }
          if (v44) {
            uint64_t v45 = *(unsigned __int8 **)a4;
          }
          else {
            uint64_t v45 = a4;
          }
          uint64_t v46 = (char *)&v45[v43];
          if (v43 >= 8)
          {
            unint64_t v47 = v45;
            do
            {
              int v48 = (char *)memchr(v47, 116, v43 - 7);
              if (!v48) {
                break;
              }
              if (*(void *)v48 == 0x73756E696D726574) {
                goto LABEL_73;
              }
              unint64_t v47 = (unsigned __int8 *)(v48 + 1);
              uint64_t v43 = v46 - (char *)v47;
            }
            while (v46 - (char *)v47 > 7);
          }
          int v48 = v46;
LABEL_73:
          BOOL v49 = v48 == v46 || v48 - (char *)v45 == -1;
          char v50 = !v49;
          a3 = v78;
          unint64_t v10 = v81;
          int v34 = sub_1002C7E80(v40, a2, v78, v41, (uint64_t)uu, a6, &v94, v42 != 0, v50);
          uint64_t v16 = a1;
        }
        if (v34)
        {
          v71 = qword_100A19EA0;
          if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_ERROR))
          {
            if ((a4[23] & 0x80u) == 0) {
              char v74 = a4;
            }
            else {
              char v74 = *(unsigned __int8 **)a4;
            }
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = v79;
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v74;
            *(_WORD *)&unsigned char buf[22] = 2114;
            *(void *)&buf[24] = v10;
            _os_log_error_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_ERROR, "Failed to register %{public}s pipe for endpoint \"%{public}s\" on device \"%{public}@\"", buf, 0x20u);
          }
LABEL_117:
          sub_1002C295C(v16, v78);
          goto LABEL_119;
        }
        int v51 = (void *)*((void *)v21 + 5);
        int v52 = [[PipeMapping alloc] initWithIdentifier:v10 handle:a3];
        [v51 addObject:v52];

        uint64_t v53 = qword_100A19EA0;
        if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_DEFAULT))
        {
          int v54 = *(unsigned __int8 **)a4;
          if ((a4[23] & 0x80u) == 0) {
            int v54 = a4;
          }
          if (v77 > 3) {
            unsigned int v55 = 1;
          }
          else {
            unsigned int v55 = dword_1007BB7D0[v77];
          }
          *(_DWORD *)buf = 136447746;
          *(void *)&uint8_t buf[4] = v79;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = a3;
          *(_WORD *)&buf[18] = 2082;
          *(void *)&buf[20] = v54;
          *(_WORD *)&buf[28] = 2114;
          *(void *)&buf[30] = v10;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = a6;
          *(_WORD *)&buf[44] = 1024;
          *(_DWORD *)&buf[46] = v55;
          *(_WORD *)&buf[50] = 1024;
          *(_DWORD *)&buf[52] = v94;
          _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "Successfully created %{public}s pipe 0x%04X to endpoint \"%{public}s\" on device \"%{public}@\"  with priority [%d, stack %d] and MTU=%d", buf, 0x38u);
        }
        uint64_t v16 = a1;
        if (*v18) {
          (*(void (**)(void, unsigned __int8 *, void *, void, void, unsigned __int8 *, void, void, unint64_t))(*(void *)*v18 + 8))(*v18, a4, v10, a5, a6, uu, v21[37], v87, __PAIR64__(v82, v86));
        }
      }
      sub_1002C29F8(v16, a2);
      uint64_t v56 = sub_10003FB34();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v56 + 968))(v56, a2, 1, 1);
      uint64_t v57 = sub_10003FB34();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v57 + 560))(v57, 1, 1);
      uint64_t v20 = (unsigned __int8 **)v18[5];
LABEL_91:
      ++v19;
    }
    v58 = (void *)v17[1];
    if (v58)
    {
      do
      {
        v59 = v58;
        v58 = (void *)*v58;
      }
      while (v58);
    }
    else
    {
      do
      {
        v59 = (void *)v17[2];
        BOOL v49 = *v59 == (void)v17;
        unint64_t v17 = v59;
      }
      while (!v49);
    }
    unint64_t v17 = v59;
  }
  while (v59 != (void *)(a1 + 152));
LABEL_98:
  unint64_t v10 = v81;
  sub_1002C295C(v16, a3);
  sub_10003AFE8((uint64_t)v88);
  v60 = sub_1002BCF7C(a1);
  BOOL v61 = [v60 count] == (id)1;

  if (v61)
  {
    uint64_t v62 = sub_10003FB34();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v62 + 856))(v62, 1, 1);
  }
  if (!*(unsigned char *)(a1 + 62))
  {
    v63 = sub_1002BCF7C(a1);
    if ([v63 count])
    {
      int v64 = sub_1002BD198(a1);

      if (v64)
      {
        uint64_t v65 = qword_100A19EA0;
        if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_INFO, "Peripheral connection exists, enabling asymmetric peripheral latency", buf, 2u);
        }
        uint64_t v66 = sub_10003FB34();
        (*(void (**)(uint64_t, uint64_t))(*(void *)v66 + 808))(v66, 1);
        *(unsigned char *)(a1 + 62) = 1;
      }
    }
    else
    {
    }
  }
LABEL_119:
  sub_10003AFB4((uint64_t)v88);
LABEL_120:
}

void sub_1002C2890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Unwind_Resume(a1);
}

unsigned char *sub_1002C295C(uint64_t a1, int a2)
{
  char v11 = 0;
  sub_10001B8E0(&v11);
  char v5 = *(char **)(a1 + 192);
  unint64_t v4 = *(char **)(a1 + 200);
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    while (*(unsigned __int16 *)&v5[v6] != a2)
    {
      v6 += 2;
      if (&v5[v6] == v4) {
        return sub_10001B8AC(&v11);
      }
    }
    unint64_t v7 = &v5[v6];
    uint64_t v8 = &v5[v6 + 2];
    int64_t v9 = v4 - v8;
    if (v4 != v8) {
      memmove(&v5[v6], v8, v4 - v8);
    }
    *(void *)(a1 + 200) = &v7[v9];
  }
  return sub_10001B8AC(&v11);
}

uint64_t sub_1002C29F8(uint64_t a1, uint64_t a2)
{
  char v13 = 0;
  unsigned __int8 v12 = 1;
  char v11 = 1;
  uint64_t v4 = sub_100035F54();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v4 + 120))(v4) & 1) != 0 || (sub_10003FB34(), sub_1003542E4()))
  {
    uint64_t v5 = sub_100373254();
    uint64_t result = (*(uint64_t (**)(uint64_t, void, char *, unsigned __int8 *, char *))(*(void *)v5 + 8))(v5, *(void *)(a1 + 64), &v13, &v12, &v11);
    if (v12 != *(unsigned __int8 *)(a1 + 72))
    {
      *(unsigned char *)(a1 + 72) = v12;
      unint64_t v7 = qword_100A19EA0;
      if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)unint64_t v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Updating power settings for BlackMagick", v10, 2u);
      }
      uint64_t v8 = sub_10003FB34();
      return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v8 + 960))(v8, a2, v12);
    }
  }
  else
  {
    [*(id *)(a1 + 64) isEqualToString:@"us"];
    int64_t v9 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 960);
    return v9();
  }
  return result;
}

void sub_1002C2BB4(void *a1, __int16 a2)
{
  uint64_t v4 = (uint64_t)(a1 + 26);
  unint64_t v5 = a1[26];
  uint64_t v6 = (char *)a1[25];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = (char *)a1[24];
    uint64_t v9 = v6 - v8;
    if (v6 - v8 <= -3) {
      abort();
    }
    uint64_t v10 = v9 >> 1;
    unint64_t v11 = v5 - (void)v8;
    if (v11 <= (v9 >> 1) + 1) {
      unint64_t v12 = v10 + 1;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v11 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v13 = v12;
    }
    if (v13)
    {
      id v14 = (char *)sub_1002C5544(v4, v13);
      uint64_t v8 = (char *)a1[24];
      uint64_t v6 = (char *)a1[25];
    }
    else
    {
      id v14 = 0;
    }
    unint64_t v15 = &v14[2 * v10];
    uint64_t v16 = &v14[2 * v13];
    *(_WORD *)unint64_t v15 = a2;
    unint64_t v7 = v15 + 2;
    while (v6 != v8)
    {
      __int16 v17 = *((_WORD *)v6 - 1);
      v6 -= 2;
      *((_WORD *)v15 - 1) = v17;
      v15 -= 2;
    }
    a1[24] = v15;
    a1[25] = v7;
    a1[26] = v16;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(_WORD *)uint64_t v6 = a2;
    unint64_t v7 = v6 + 2;
  }
  a1[25] = v7;
}

uint64_t sub_1002C2C8C(uint64_t a1, int a2, unsigned int a3)
{
  v36[0] = 0;
  v36[1] = 0;
  sub_10003AED0((uint64_t)v36, a1 + 80);
  uint64_t v4 = *(void **)(a1 + 144);
  if (v4 != (void *)(a1 + 152))
  {
    do
    {
      int v30 = v4;
      unint64_t v5 = (uint64_t *)v4[5];
      for (uint64_t i = (uint64_t **)v5[4]; i != (uint64_t **)v5[5]; ++i)
      {
        unint64_t v7 = *i;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        id v8 = (id)v7[5];
        id v9 = [v8 countByEnumeratingWithState:&v32 objects:v43 count:16];
        if (v9)
        {
          uint64_t v10 = *(void *)v33;
          while (2)
          {
            for (uint64_t j = 0; j != v9; uint64_t j = (char *)j + 1)
            {
              if (*(void *)v33 != v10) {
                objc_enumerationMutation(v8);
              }
              unint64_t v12 = *(void **)(*((void *)&v32 + 1) + 8 * (void)j);
              if ([v12 pipeHandle] == a2)
              {
                id v14 = qword_100A19EA0;
                if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_DEFAULT))
                {
                  unsigned int v15 = [v12 pipeHandle];
                  uint64_t v16 = v7;
                  if (*((char *)v7 + 23) < 0) {
                    uint64_t v16 = (uint64_t *)*v7;
                  }
                  __int16 v17 = [v12 identifier];
                  *(_DWORD *)buf = 67109634;
                  unsigned int v38 = v15;
                  __int16 v39 = 2082;
                  uint64_t v40 = v16;
                  __int16 v41 = 2114;
                  int v42 = v17;
                  _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Destroying pipe 0x%04x from endpoint \"%{public}s\" on device \"%{public}@\"", buf, 0x1Cu);
                }
                uint64_t v18 = sub_1002C5648();
                sub_1002C8D38(v18, (__int16)[v12 pipeHandle]);
                uint64_t v19 = *v5;
                if (*v5)
                {
                  uint64_t v20 = [v12 identifier];
                  (*(void (**)(uint64_t, uint64_t *, void *, void))(*(void *)v19 + 16))(v19, v7, v20, a3);
                }
                id v13 = v12;

                if (v13) {
                  [(id)v7[5] removeObject:v13];
                }
                goto LABEL_21;
              }
            }
            id v9 = [v8 countByEnumeratingWithState:&v32 objects:v43 count:16];
            if (v9) {
              continue;
            }
            break;
          }
        }

        id v13 = 0;
LABEL_21:
      }
      unint64_t v21 = v30;
      signed __int8 v22 = (void *)v30[1];
      if (v22)
      {
        do
        {
          uint64_t v23 = v22;
          signed __int8 v22 = (void *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          uint64_t v23 = (void *)v21[2];
          BOOL v24 = *v23 == (void)v21;
          unint64_t v21 = v23;
        }
        while (!v24);
      }
      uint64_t v4 = v23;
    }
    while (v23 != (void *)(a1 + 152));
  }
  sub_10003AFE8((uint64_t)v36);
  int v25 = sub_1002BCF7C(a1);
  BOOL v26 = [v25 count] == 0;

  if (v26)
  {
    uint64_t v27 = sub_10003FB34();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v27 + 856))(v27, 2, 1);
  }
  return sub_10003AFB4((uint64_t)v36);
}

void sub_1002C2FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);

  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002C3024(uint64_t a1, unsigned int a2, const void *a3, unsigned int a4, __int16 a5, int a6)
{
  unint64_t v12 = *(unsigned __int16 **)(a1 + 192);
  unint64_t v11 = *(unsigned __int16 **)(a1 + 200);
  if (v12 != v11)
  {
    while (*v12 != a2)
    {
      if (++v12 == v11)
      {
        unint64_t v12 = *(unsigned __int16 **)(a1 + 200);
        break;
      }
    }
  }
  if (v12 != v11)
  {
    id v13 = qword_100A19EA0;
    if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Queueing initial data on pipe 0x%04x as the scalable pipe hasn't finished registration", buf, 8u);
    }
    sub_100019878();
    operator new();
  }
  uint64_t v14 = sub_1002C5648();
  sub_1002C9534(v14, a2, a3, a4, a5, 1, a6);
  if (a6)
  {
    uint64_t v15 = sub_100019878();
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_1002C329C;
    v16[3] = &unk_100998300;
    __int16 v17 = a2;
    __int16 v18 = a4;
    sub_100013018(v15, v16);
  }
}

void sub_1002C3234()
{
}

void sub_1002C329C(uint64_t a1)
{
  if (qword_1009FB180 != -1) {
    dispatch_once(&qword_1009FB180, &stru_1009A2A48);
  }
  uint64_t v2 = qword_1009FB178;
  int v3 = *(unsigned __int16 *)(a1 + 32);

  sub_1002C030C(v2, 0, v3);
}

void sub_1002C3308(uint64_t a1, void *a2, int a3, int a4, int a5)
{
  id v9 = a2;
  uint64_t v10 = qword_100A19EA0;
  if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138544130;
    id v14 = v9;
    __int16 v15 = 1024;
    int v16 = a3;
    __int16 v17 = 1024;
    int v18 = a4;
    __int16 v19 = 1024;
    int v20 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "CountryCode callback: %{public}@ %d %d %d", buf, 0x1Eu);
  }
  if (sub_1002BA33C(a1))
  {
    uint64_t v11 = sub_100019878();
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1002C3468;
    v12[3] = &unk_100997528;
    v12[4] = a1;
    sub_100013018(v11, v12);
  }
}

void sub_1002C3450(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002C3468(uint64_t a1)
{
}

void sub_1002C3470(uint64_t a1, void *a2, int a3, int a4, int a5)
{
}

void sub_1002C3478(uint64_t a1, int a2)
{
  v4[0] = 0;
  v4[1] = v4;
  v4[2] = 0x2020000000;
  int v5 = a2;
  uint64_t v2 = *(NSObject **)(a1 + 48);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1002C3510;
  v3[3] = &unk_100999720;
  v3[4] = v4;
  void v3[5] = a1;
  dispatch_async(v2, v3);
  _Block_object_dispose(v4, 8);
}

void sub_1002C3510(uint64_t a1)
{
}

void sub_1002C3524(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 312))(v4))
  {
    if (!*(unsigned char *)(a1 + 56))
    {
      uint64_t v10 = qword_100A19EA0;
      if (!os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      __int16 v20 = 0;
      uint64_t v11 = "Stack is not ready, cannot update power source";
      unint64_t v12 = (uint8_t *)&v20;
      goto LABEL_13;
    }
    if (*a2 == 2)
    {
      *(unsigned char *)(a1 + 58) = 1;
      if (*(void *)(a1 + 216))
      {
        uint64_t v5 = *(unsigned __int8 *)(a1 + 59);
        uint64_t v6 = *(unsigned __int8 *)(a1 + 60);
        uint64_t v7 = *(char *)(a1 + 61);
        uint64_t v8 = sub_10003FB34();
        (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 80))(v8, 3, 0, v5, v6, v7);
        uint64_t v9 = sub_10003FB34();
        (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 80))(v9, 4, 0, v5, v6, v7);
        uint64_t v10 = qword_100A19EA0;
        if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v19 = 0;
          uint64_t v11 = "Wireless charging started: PCAP limits bypassed";
          unint64_t v12 = (uint8_t *)&v19;
LABEL_13:
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v11, v12, 2u);
        }
      }
    }
    else if (*(unsigned char *)(a1 + 58))
    {
      *(unsigned char *)(a1 + 58) = 0;
      if (*(void *)(a1 + 216))
      {
        uint64_t v13 = *(unsigned __int8 *)(a1 + 59);
        uint64_t v14 = *(unsigned __int8 *)(a1 + 60);
        uint64_t v15 = *(char *)(a1 + 61);
        uint64_t v16 = sub_10003FB34();
        (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))(*(void *)v16 + 80))(v16, 3, 0, v13, v14, v15);
        uint64_t v17 = sub_10003FB34();
        (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))(*(void *)v17 + 80))(v17, 4, 0, v13, v14, v15);
        uint64_t v10 = qword_100A19EA0;
        if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v18 = 0;
          uint64_t v11 = "Wireless charging stopped: PCAP limits enforced";
          unint64_t v12 = (uint8_t *)&v18;
          goto LABEL_13;
        }
      }
    }
  }
}

uint64_t sub_1002C3780(uint64_t result, unsigned char *a2, _DWORD *a3)
{
  *a2 = *(unsigned char *)(result + 224);
  *a3 = *(_DWORD *)(result + 228);
  return result;
}

uint64_t sub_1002C3794(uint64_t a1)
{
  uint64_t v2 = qword_100A19EA0;
  if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: ------------------ LE Scalable Pipes -------------------", buf, 2u);
    uint64_t v2 = qword_100A19EA0;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Registered Sessions:", buf, 2u);
  }
  v42[0] = 0;
  v42[1] = 0;
  sub_10003AED0((uint64_t)v42, a1 + 80);
  int v3 = *(void **)(a1 + 144);
  long long v34 = (void *)(a1 + 152);
  if (v3 != (void *)(a1 + 152))
  {
    do
    {
      uint64_t v36 = v3[5];
      uint64_t v4 = qword_100A19EA0;
      if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_DEFAULT))
      {
        sub_10003AE4C(v3[4], (uint64_t)buf);
        uint64_t v5 = buf;
        if (v47 < 0) {
          uint64_t v5 = *(unsigned char **)buf;
        }
        *(_DWORD *)int v48 = 136446210;
        BOOL v49 = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump: \"%{public}s\"", v48, 0xCu);
        if (v47 < 0) {
          operator delete(*(void **)buf);
        }
        uint64_t v4 = qword_100A19EA0;
      }
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = "Yes";
        if (!*(unsigned char *)(v36 + 56)) {
          uint64_t v6 = "No";
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = v6;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump:    Zombied: %{public}s", buf, 0xCu);
        uint64_t v4 = qword_100A19EA0;
      }
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = "Yes";
        if (!*(unsigned char *)(v36 + 57)) {
          uint64_t v7 = "No";
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = v7;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump:    Link requirement:  %{public}s", buf, 0xCu);
        uint64_t v4 = qword_100A19EA0;
      }
      long long v35 = v3;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump:    Endpoints:", buf, 2u);
      }
      uint64_t v8 = v36;
      for (uint64_t i = *(void **)(v36 + 32); i != *(void **)(v8 + 40); uint64_t i = v37 + 1)
      {
        uint64_t v10 = (uint64_t *)*i;
        uint64_t v11 = qword_100A19EA0;
        if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v12 = v10;
          if (*((char *)v10 + 23) < 0) {
            unint64_t v12 = (uint64_t *)*v10;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = v12;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "statedump:       \"%{public}s\"", buf, 0xCu);
          uint64_t v11 = qword_100A19EA0;
        }
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          int v13 = *((_DWORD *)v10 + 6);
          uint64_t v14 = "client";
          if (v13 == 1) {
            uint64_t v14 = "server";
          }
          BOOL v15 = v13 == 2;
          uint64_t v16 = "peer-to-peer";
          if (!v15) {
            uint64_t v16 = v14;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = v16;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "statedump:          Type: %{public}s", buf, 0xCu);
          uint64_t v11 = qword_100A19EA0;
        }
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v17 = *((int *)v10 + 7);
          if v17 < 5 && ((0x17u >> v17))
          {
            __int16 v18 = (&off_1009A2BC8)[v17];
          }
          else
          {
            BOOL v15 = v17 == 3;
            __int16 v18 = "unknown";
            if (v15) {
              __int16 v18 = "isochronous";
            }
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = v18;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "statedump:          Priority: %{public}s", buf, 0xCu);
          uint64_t v11 = qword_100A19EA0;
        }
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v19 = "Yes";
          if (!*((unsigned char *)v10 + 39)) {
            __int16 v19 = "No";
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = v19;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "statedump:          Zombied: %{public}s", buf, 0xCu);
          uint64_t v11 = qword_100A19EA0;
        }
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v20 = "Non-";
          if (!*((unsigned char *)v10 + 37)) {
            __int16 v20 = "";
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = v20;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "statedump:          %{public}sReliable Pipe", buf, 0xCu);
          uint64_t v11 = qword_100A19EA0;
        }
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v21 = "NO";
          if (*((_DWORD *)v10 + 7) == 4) {
            unint64_t v21 = "YES";
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = v21;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "statedump:          LE Only: %{public}s", buf, 0xCu);
          uint64_t v11 = qword_100A19EA0;
        }
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "statedump:          Connected devices:", buf, 2u);
        }
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        id v22 = (id)v10[5];
        id v23 = [v22 countByEnumeratingWithState:&v38 objects:v43 count:16];
        long long v37 = i;
        if (v23)
        {
          uint64_t v24 = *(void *)v39;
          do
          {
            for (uint64_t j = 0; j != v23; uint64_t j = (char *)j + 1)
            {
              if (*(void *)v39 != v24) {
                objc_enumerationMutation(v22);
              }
              BOOL v26 = qword_100A19EA0;
              if (os_log_type_enabled((os_log_t)qword_100A19EA0, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v27 = v10;
                if (*((char *)v10 + 23) < 0) {
                  uint64_t v27 = (uint64_t *)*v10;
                }
                uint64_t v28 = *(void *)(*((void *)&v38 + 1) + 8 * (void)j);
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v45 = 2114;
                uint64_t v46 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "statedump:             \"%{public}s\"; %{public}@",
                  buf,
                  0x16u);
              }
            }
            id v23 = [v22 countByEnumeratingWithState:&v38 objects:v43 count:16];
          }
          while (v23);
        }

        uint64_t v8 = v36;
      }
      int v29 = v35;
      int v30 = (void *)v35[1];
      if (v30)
      {
        do
        {
          int v31 = v30;
          int v30 = (void *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          int v31 = (void *)v29[2];
          BOOL v15 = *v31 == (void)v29;
          int v29 = v31;
        }
        while (!v15);
      }
      int v3 = v31;
    }
    while (v31 != v34);
  }
  uint64_t v32 = sub_1002C5648();
  nullsub_95(v32);
  return sub_10003AFB4((uint64_t)v42);
}

void sub_1002C3E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002C3EA0()
{
  return 1;
}

void sub_1002C3EBC(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    uint64_t v6 = a2;
    sub_1002C3F48(a1 + 8, v4, (char *)&v6);
    sub_100061554(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_1002C3F48(uint64_t a1, char *__src, char *a3)
{
  int v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    int v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      __int16 v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      __int16 v19 = 0;
    }
    __int16 v20 = &v19[8 * v16];
    std::string __p = v19;
    uint64_t v27 = v20;
    uint64_t v28 = v20;
    int v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        id v23 = (char *)sub_1000405F8(v8, v22);
        __int16 v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        uint64_t v27 = v20;
        int v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        uint64_t v27 = v20;
      }
    }
    *(void *)__int16 v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    uint64_t v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    uint64_t v9 = __src + 8;
    uint64_t v10 = v6 - 8;
    uint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_1002C4150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002C4188(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 != v4)
  {
    int64_t v6 = v4 - (v5 + 8);
    if (v4 != v5 + 8) {
      memmove(v5, v5 + 8, v4 - (v5 + 8));
    }
    *(void *)(a1 + 16) = &v5[v6];
    sub_100061554(a1 + 8);
    if (*(void *)(a1 + 8) == *(void *)(a1 + 16)) {
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 32) + 8))(*(void *)(a1 + 32), a1);
    }
  }

  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

uint64_t sub_1002C4260(uint64_t a1)
{
  int v3 = *(uint64_t **)(a1 + 32);
  uint64_t v2 = *(uint64_t **)(a1 + 40);
  if (v3 != v2)
  {
    do
    {
      uint64_t v4 = *v3;
      if (*v3)
      {

        if (*(char *)(v4 + 23) < 0) {
          operator delete(*(void **)v4);
        }
        operator delete();
      }
      ++v3;
    }
    while (v3 != v2);
    int v3 = *(uint64_t **)(a1 + 32);
  }
  if (v3)
  {
    *(void *)(a1 + 40) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void *sub_1002C4304(void *__dst, long long *a2, int a3, int a4, int a5, char a6, char a7, char a8)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10003B098(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v15 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__dst = v15;
  }
  *((_DWORD *)__dst + 6) = a3;
  *((_DWORD *)__dst + 7) = a4;
  *((_DWORD *)__dst + 8) = a5;
  *((unsigned char *)__dst + 36) = a6;
  *((unsigned char *)__dst + 37) = a7;
  *((unsigned char *)__dst + 38) = a8;
  *((unsigned char *)__dst + 39) = 0;
  __dst[5] = 0;
  uint64_t v16 = +[NSMutableArray array];
  uint64_t v17 = (void *)__dst[5];
  __dst[5] = v16;

  return __dst;
}

void sub_1002C43BC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

void sub_1002C43E4()
{
}

void sub_1002C43F8(uint64_t a1)
{
  if (qword_1009FB180 != -1) {
    dispatch_once(&qword_1009FB180, &stru_1009A2A48);
  }
  char v2 = *(unsigned char *)(a1 + 10);
  int v3 = *(_DWORD *)(a1 + 12);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  unsigned int v6 = *(_DWORD *)(a1 + 32);
  int v7 = *(_DWORD *)(a1 + 36);
  unsigned int v8 = *(_DWORD *)(a1 + 40);
  unsigned int v9 = *(_DWORD *)(a1 + 44);

  sub_1002BFE44(v2, v3, v4, v5, v6, v7, v8, v9);
}

void sub_1002C4468()
{
}

uint64_t sub_1002C447C(uint64_t a1)
{
  if (qword_1009FB180 != -1) {
    dispatch_once(&qword_1009FB180, &stru_1009A2A48);
  }
  unsigned int v2 = *(unsigned __int8 *)(a1 + 10);
  char v3 = *(unsigned char *)(a1 + 11);
  uint64_t v4 = *(void *)(a1 + 12);
  uint64_t v5 = *(void *)(a1 + 20);
  unsigned int v6 = *(_DWORD *)(a1 + 28);
  int v7 = *(_DWORD *)(a1 + 32);
  unsigned int v8 = *(_DWORD *)(a1 + 36);
  unint64_t v9 = *(void *)(a1 + 40);

  return sub_1002BFF88(v2, v3, v4, v5, v6, v7, v8, v9);
}

void *sub_1002C44F0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_1000616DC();
  }
  return operator new(4 * a2);
}

void *sub_1002C4528(void *a1)
{
  for (uint64_t i = (void *)a1[3]; i != (void *)a1[4]; ++i)
  {
    if (*i) {
      operator delete();
    }
  }
  for (uint64_t j = (void *)a1[6]; j != (void *)a1[7]; ++j)
  {
    if (*j) {
      operator delete();
    }
  }
  for (k = (void *)a1[18]; k != (void *)a1[19]; ++k)
  {
    if (*k) {
      operator delete();
    }
  }
  for (m = (void *)a1[21]; m != (void *)a1[22]; ++m)
  {
    if (*m) {
      operator delete();
    }
  }
  unsigned int v6 = (void *)a1[27];
  if (v6)
  {
    a1[28] = v6;
    operator delete(v6);
  }
  int v7 = (void *)a1[24];
  if (v7)
  {
    a1[25] = v7;
    operator delete(v7);
  }
  unsigned int v8 = (void *)a1[21];
  if (v8)
  {
    a1[22] = v8;
    operator delete(v8);
  }
  unint64_t v9 = (void *)a1[18];
  if (v9)
  {
    a1[19] = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)a1[12];
  if (v10)
  {
    a1[13] = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)a1[9];
  if (v11)
  {
    a1[10] = v11;
    operator delete(v11);
  }
  uint64_t v12 = (void *)a1[6];
  if (v12)
  {
    a1[7] = v12;
    operator delete(v12);
  }
  int v13 = (void *)a1[3];
  if (v13)
  {
    a1[4] = v13;
    operator delete(v13);
  }
  return a1;
}

uint64_t sub_1002C4694(uint64_t a1)
{
  *(void *)a1 = off_1009A2978;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1002C46E4(uint64_t a1)
{
  *(void *)a1 = off_1009A2978;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  operator delete();
}

uint64_t sub_1002C4754(uint64_t a1)
{
  if (qword_1009FB180 != -1) {
    dispatch_once(&qword_1009FB180, &stru_1009A2A48);
  }
  unsigned int v2 = (void *)qword_1009FB178;

  return sub_1002C16A8(v2, (const void **)(a1 + 16));
}

uint64_t sub_1002C47B8(uint64_t a1, uint64_t a2, __int16 a3, long long *a4, int a5, int a6, char a7)
{
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = off_1009A29B0;
  *(void *)(a1 + 16) = a2;
  *(_WORD *)(a1 + 24) = a3;
  uint64_t v11 = a1 + 32;
  if (*((char *)a4 + 23) < 0)
  {
    sub_10003B098((unsigned char *)v11, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v12 = *a4;
    *(void *)(v11 + 16) = *((void *)a4 + 2);
    *(_OWORD *)uint64_t v11 = v12;
  }
  *(unsigned char *)(a1 + 64) = a7;
  if (a6 == 6) {
    int v13 = 2;
  }
  else {
    int v13 = 3;
  }
  if (a6 == 2) {
    int v14 = 1;
  }
  else {
    int v14 = v13;
  }
  if (a6 == 1) {
    int v14 = 0;
  }
  *(_DWORD *)(a1 + 56) = a5;
  *(_DWORD *)(a1 + 60) = v14;
  return a1;
}

uint64_t sub_1002C486C(uint64_t a1)
{
  *(void *)a1 = off_1009A29B0;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

void sub_1002C48BC(uint64_t a1)
{
  *(void *)a1 = off_1009A29B0;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }

  operator delete();
}

void sub_1002C492C(uint64_t a1)
{
  if (qword_1009FB180 != -1) {
    dispatch_once(&qword_1009FB180, &stru_1009A2A48);
  }
  uint64_t v2 = qword_1009FB178;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(unsigned __int16 *)(a1 + 24);
  unsigned int v5 = *(_DWORD *)(a1 + 56);
  unsigned int v6 = *(_DWORD *)(a1 + 60);
  int v7 = *(unsigned __int8 *)(a1 + 64);

  sub_1002C1C3C(v2, v3, v4, (unsigned __int8 *)(a1 + 32), v5, v6, v7);
}

void sub_1002C49A4()
{
}

uint64_t sub_1002C49B8(uint64_t a1)
{
  if (qword_1009FB180 != -1) {
    dispatch_once(&qword_1009FB180, &stru_1009A2A48);
  }
  uint64_t v2 = qword_1009FB178;
  int v3 = *(unsigned __int16 *)(a1 + 10);
  unsigned int v4 = *(_DWORD *)(a1 + 12);

  return sub_1002C2C8C(v2, v3, v4);
}

uint64_t sub_1002C4A20(uint64_t a1, __int16 a2, uint64_t a3, __int16 a4, char a5)
{
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = &off_1009A2A20;
  *(_WORD *)(a1 + 10) = a2;
  uint64_t v8 = *(void *)(a3 + 8);
  *(void *)(a1 + 16) = &off_100998428;
  *(void *)(a1 + 24) = v8;
  if (v8) {
    sub_100037354(v8);
  }
  *(_WORD *)(a1 + 32) = a4;
  *(unsigned char *)(a1 + 34) = a5;
  return a1;
}

void *sub_1002C4AB0(void *a1)
{
  *a1 = &off_1009A2A20;
  a1[2] = &off_100998428;
  uint64_t v2 = (atomic_uint *)a1[3];
  if (v2) {
    sub_1000368F4(v2);
  }
  return a1;
}

void sub_1002C4B1C(void *a1)
{
  *a1 = &off_1009A2A20;
  a1[2] = &off_100998428;
  uint64_t v1 = (atomic_uint *)a1[3];
  if (v1) {
    sub_1000368F4(v1);
  }

  operator delete();
}

void sub_1002C4BA8(uint64_t a1)
{
  uint64_t v2 = sub_1002C5648();
  unsigned int v3 = *(unsigned __int16 *)(a1 + 10);
  unsigned int v4 = (const void *)sub_10004A6E4(a1 + 16);
  size_t v5 = sub_100045F00(a1 + 16);
  __int16 v6 = *(_WORD *)(a1 + 32);
  char v7 = *(unsigned char *)(a1 + 34);

  sub_1002C9534(v2, v3, v4, v5, v6, 0, v7);
}

void sub_1002C4C28(id a1)
{
}

void sub_1002C4C6C()
{
}

void sub_1002C4C90(id a1)
{
}

void sub_1002C4CD4()
{
}

void sub_1002C4CF8(id a1)
{
}

void sub_1002C4D3C()
{
}

void sub_1002C4D60(id a1)
{
}

void sub_1002C4DA4()
{
}

void sub_1002C4DC8(id a1)
{
}

void sub_1002C4E0C()
{
}

void sub_1002C4E30(id a1)
{
}

void sub_1002C4E74()
{
}

void sub_1002C4E98(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 48)
  {
    if (*(char *)(i - 17) < 0) {
      operator delete(*(void **)(i - 40));
    }
  }
  a1[1] = v2;
}

uint64_t sub_1002C4EE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      *(void *)a4 = *(void *)v5;
      char v7 = (void **)(a4 + 8);
      if (*(char *)(a4 + 31) < 0) {
        operator delete(*v7);
      }
      long long v8 = *(_OWORD *)(v5 + 8);
      *(void *)(a4 + 24) = *(void *)(v5 + 24);
      *(_OWORD *)char v7 = v8;
      *(unsigned char *)(v5 + 31) = 0;
      *(unsigned char *)(v5 + 8) = 0;
      uint64_t v9 = *(void *)(v5 + 32);
      *(void *)(a4 + 39) = *(void *)(v5 + 39);
      *(void *)(a4 + 32) = v9;
      a4 += 48;
      v5 += 48;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

char *sub_1002C4F80(char **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    abort();
  }
  long long v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v2) >> 4);
  if (2 * v9 > v4) {
    unint64_t v4 = 2 * v9;
  }
  if (v9 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v28 = v7;
  if (v10) {
    uint64_t v11 = (char *)sub_1002C50E8(v7, v10);
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v25 = 0;
  v26.i64[0] = 0;
  long long v12 = &v11[48 * v3];
  int v13 = &v11[48 * v10];
  uint64_t v27 = v13;
  *(void *)long long v12 = *(void *)a2;
  long long v14 = *(_OWORD *)(a2 + 8);
  *((void *)v12 + 3) = *(void *)(a2 + 24);
  *(_OWORD *)(v12 + 8) = v14;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v15 = *(void *)(a2 + 32);
  *(void *)(v12 + 39) = *(void *)(a2 + 39);
  *((void *)v12 + 4) = v15;
  uint64_t v16 = v12 + 48;
  v26.i64[1] = (uint64_t)(v12 + 48);
  unint64_t v18 = *a1;
  unint64_t v17 = (unint64_t)a1[1];
  if ((char *)v17 == *a1)
  {
    int64x2_t v22 = vdupq_n_s64(v17);
  }
  else
  {
    do
    {
      uint64_t v19 = *(void *)(v17 - 48);
      v17 -= 48;
      *((void *)v12 - 6) = v19;
      v12 -= 48;
      long long v20 = *(_OWORD *)(v17 + 8);
      *((void *)v12 + 3) = *(void *)(v17 + 24);
      *(_OWORD *)(v12 + 8) = v20;
      *(void *)(v17 + 16) = 0;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 8) = 0;
      uint64_t v21 = *(void *)(v17 + 32);
      *(void *)(v12 + 39) = *(void *)(v17 + 39);
      *((void *)v12 + 4) = v21;
    }
    while ((char *)v17 != v18);
    int64x2_t v22 = *(int64x2_t *)a1;
    uint64_t v16 = (char *)v26.i64[1];
    int v13 = v27;
  }
  *a1 = v12;
  a1[1] = v16;
  int64x2_t v26 = v22;
  id v23 = a1[2];
  a1[2] = v13;
  uint64_t v27 = v23;
  uint64_t v25 = v22.i64[0];
  sub_1002C5130((uint64_t)&v25);
  return v16;
}

void *sub_1002C50E8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    sub_1000616DC();
  }
  return operator new(48 * a2);
}

uint64_t sub_1002C5130(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1002C5168(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 48;
      *(void *)(a1 + 16) = v2 - 48;
      if (*(char *)(v2 - 17) < 0)
      {
        operator delete(*(void **)(v2 - 40));
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void sub_1002C51C0(id a1)
{
}

void sub_1002C5204()
{
}

void sub_1002C5228(id a1)
{
}

void sub_1002C526C()
{
}

void sub_1002C5290(id a1)
{
}

void sub_1002C52D4()
{
}

void sub_1002C52F8(id a1)
{
}

void sub_1002C5488()
{
}

void sub_1002C54AC(id a1)
{
}

void sub_1002C54F0()
{
}

void sub_1002C5514(id a1)
{
}

void *sub_1002C5544(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    sub_1000616DC();
  }
  return operator new(2 * a2);
}

void sub_1002C5578(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, a5, 0xCu);
}

uint64_t sub_1002C5590(uint64_t result, void *a2, uint64_t a3, float a4)
{
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = (void *)*a2;
  }
  *(float *)a3 = a4;
  *(void *)(a3 + 4) = result;
  *(_WORD *)(a3 + 12) = 2082;
  *(void *)(a3 + 14) = v5;
  return result;
}

void sub_1002C55B4(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_1002C55E0(uint64_t a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A2D40);
  }
  uint64_t v2 = (char *)off_1009F8068 + 64;

  sub_10026B36C((uint64_t)v2, a1);
}

uint64_t sub_1002C5648()
{
  if (qword_100A120D0 != -1) {
    dispatch_once(&qword_100A120D0, &stru_1009A2BF0);
  }
  return qword_100A19A50;
}

void sub_1002C568C(id a1)
{
}

void sub_1002C56D0()
{
}

uint64_t sub_1002C56F4(uint64_t a1)
{
  *(void *)a1 = &off_1009A2C20;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = a1 + 24;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = a1 + 48;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 64) = a1 + 72;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 88) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 140) = 0;
  uint64_t v2 = (unsigned char *)(a1 + 140);
  *(_DWORD *)(a1 + 136) = 0;
  qword_100A19A50 = a1;
  memset(&__attr, 0, sizeof(__attr));
  pthread_attr_init(&__attr);
  pthread_attr_set_qos_class_np(&__attr, QOS_CLASS_USER_INTERACTIVE, 0);
  unint64_t v3 = dispatch_pthread_root_queue_create();
  pthread_attr_destroy(&__attr);
  *(void *)(a1 + 8) = dispatch_queue_create_with_target_V2("com.apple.MobileBluetooth.Pipe", 0, v3);
  dispatch_release(v3);
  uint64_t v4 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 8))(v4))
  {
    unsigned int v25 = 0;
    uint64_t v5 = sub_100017768();
    sub_10004191C(buf, "Pipe");
    sub_10004191C(__p, "TxSlotSize");
    (*(void (**)(uint64_t, unsigned char *, void **, unsigned int *))(*(void *)v5 + 128))(v5, buf, __p, &v25);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v6 = v25;
    if (v25)
    {
      uint64_t v7 = qword_100A19ED0;
      if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&uint8_t buf[4] = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Setting custom Skywalk TxSlotSize to %llu", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v6 = 32;
    }
    unsigned int v22 = 0;
    uint64_t v9 = sub_100017768();
    sub_10004191C(buf, "Pipe");
    sub_10004191C(__p, "RxSlotSize");
    (*(void (**)(uint64_t, unsigned char *, void **, unsigned int *))(*(void *)v9 + 128))(v9, buf, __p, &v22);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v8 = v22;
    if (v22)
    {
      unint64_t v10 = qword_100A19ED0;
      if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&uint8_t buf[4] = v8;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Setting custom Skywalk RxSlotSize to %llu", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v8 = 32;
    }
    uint64_t v11 = sub_100017768();
    sub_10004191C(buf, "Magnet");
    sub_10004191C(__p, "EnableCrossLayerLogs");
    (*(void (**)(uint64_t, unsigned char *, void **, uint64_t))(*(void *)v11 + 72))(v11, buf, __p, a1 + 138);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (*(unsigned char *)(a1 + 138))
    {
      long long v12 = qword_100A19ED0;
      if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_ERROR)) {
        sub_100751E0C(v12);
      }
    }
    uint64_t v13 = sub_100017768();
    sub_10004191C(buf, "Magnet");
    sub_10004191C(__p, "EnableSkywalkDataLogs");
    long long v14 = (unsigned char *)(a1 + 139);
    (*(void (**)(uint64_t, unsigned char *, void **, uint64_t))(*(void *)v13 + 72))(v13, buf, __p, a1 + 139);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (*v14)
    {
      uint64_t v15 = qword_100A19ED0;
      if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "Enable";
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%{public}s Skywalk data logs", buf, 0xCu);
      }
    }
    uint64_t v16 = sub_100017768();
    sub_10004191C(buf, "Magnet");
    sub_10004191C(__p, "EnableSkywalkDataCRC");
    (*(void (**)(uint64_t, unsigned char *, void **, unsigned char *))(*(void *)v16 + 72))(v16, buf, __p, v2);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (*v2)
    {
      unint64_t v17 = qword_100A19ED0;
      if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_DEFAULT))
      {
        if (*v14) {
          unint64_t v18 = "Enable";
        }
        else {
          unint64_t v18 = "Disable";
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "Enable";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%{public}s Skywalk data logs CRC, %{public}s fSkywalkDataLogs", buf, 0x16u);
      }
    }
  }
  else
  {
    uint64_t v6 = 32;
    uint64_t v8 = 32;
  }
  uint64_t v19 = os_nexus_controller_create();
  *(void *)(a1 + 112) = v19;
  long long v20 = qword_100A19ED0;
  if (v19)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134219008;
      *(void *)&uint8_t buf[4] = 2048;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = 1;
      *(_WORD *)&unsigned char buf[22] = 2048;
      *(void *)&buf[24] = 1;
      *(_WORD *)&buf[32] = 2048;
      *(void *)&buf[34] = v6;
      *(_WORD *)&buf[42] = 2048;
      *(void *)&buf[44] = v8;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Creating nexus with NEXUS_ATTR_SLOT_BUF_SIZE: %llu, NEXUS_ATTR_RX_RINGS: %llu, NEXUS_ATTR_TX_RINGS: %llu, NEXUS_ATTR_TX_SLOTS: %llu, NEXUS_ATTR_RX_SLOTS: %llu", buf, 0x34u);
    }
    os_nexus_attr_create();
    os_nexus_attr_set();
    os_nexus_attr_set();
    os_nexus_attr_set();
    os_nexus_attr_set();
    os_nexus_attr_set();
    strcpy(buf, "com.apple.bluetooth.Pipe");
    memset(&buf[25], 0, 39);
    os_nexus_controller_register_provider();
    os_nexus_attr_destroy();
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_ERROR))
  {
    sub_100751DD8();
  }
  return a1;
}

void sub_1002C5E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
}

uint64_t sub_1002C5ED8(uint64_t a1)
{
  *(void *)a1 = &off_1009A2C20;
  if (*(void *)(a1 + 112))
  {
    os_nexus_controller_deregister_provider();
    os_nexus_controller_destroy();
  }
  dispatch_release(*(dispatch_object_t *)(a1 + 8));
  sub_1000486F0(a1 + 88, *(void **)(a1 + 96));
  sub_1000486F0(a1 + 64, *(void **)(a1 + 72));
  sub_1002CBCC8(a1 + 40, *(void **)(a1 + 48));
  sub_1000486F0(a1 + 16, *(void **)(a1 + 24));
  return a1;
}

void sub_1002C5F68(_Unwind_Exception *a1)
{
  sub_1000486F0((uint64_t)(v1 + 11), v1[12]);
  sub_1000486F0((uint64_t)(v1 + 8), v1[9]);
  sub_1002CBCC8((uint64_t)(v1 + 5), v1[6]);
  sub_1000486F0((uint64_t)(v1 + 2), v1[3]);
  _Unwind_Resume(a1);
}

void sub_1002C5FA8(uint64_t a1)
{
  sub_1002C5ED8(a1);

  operator delete();
}

uint64_t sub_1002C5FE0(uint64_t a1, int a2, uint64_t a3, __int16 a4, uint64_t a5, uint64_t a6, int a7, char a8)
{
  if (!a6)
  {
    uint64_t v15 = qword_100A19ED0;
    if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_FAULT)) {
      sub_100751E90(v15, v16, v17, v18, v19, v20, v21, v22);
    }
  }
  uint64_t v31 = 0;
  uint64_t v32 = &v31;
  uint64_t v33 = 0x2020000000;
  int v34 = 0;
  id v23 = *(NSObject **)(a1 + 8);
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  v26[2] = sub_1002C60F8;
  v26[3] = &unk_1009A2C78;
  __int16 v29 = a4;
  v26[4] = &v31;
  v26[5] = a1;
  int v27 = a2;
  int v28 = a7;
  char v30 = a8;
  v26[6] = a3;
  v26[7] = a6;
  dispatch_sync(v23, v26);
  uint64_t v24 = *((unsigned int *)v32 + 6);
  _Block_object_dispose(&v31, 8);
  return v24;
}

void sub_1002C60F8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(v2 + 24);
  if (!v3) {
    goto LABEL_12;
  }
  unsigned int v4 = *(unsigned __int16 *)(a1 + 72);
  uint64_t v5 = v2 + 24;
  do
  {
    unsigned int v6 = *(unsigned __int16 *)(v3 + 32);
    BOOL v7 = v6 >= v4;
    if (v6 >= v4) {
      uint64_t v8 = (uint64_t *)v3;
    }
    else {
      uint64_t v8 = (uint64_t *)(v3 + 8);
    }
    if (v7) {
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v5 != v2 + 24 && v4 >= *(unsigned __int16 *)(v5 + 32))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_FAULT)) {
      sub_100752088();
    }
    uint64_t v17 = *(void *)(*(void *)(a1 + 32) + 8);
    int v18 = 103;
  }
  else
  {
LABEL_12:
    uint64_t v27 = 0;
    if (socketpair(1, 1, 0, (int *)&v27))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_ERROR)) {
        sub_100752008();
      }
    }
    else
    {
      int v9 = v27;
      int v10 = fcntl(v27, 3, 0);
      fcntl(v9, 4, v10 | 4u);
      uint64_t v11 = dispatch_group_create();
      dispatch_source_t v12 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_read, v9, 0, *(dispatch_queue_t *)(v2 + 8));
      if (v12)
      {
        uint64_t v13 = v12;
        dispatch_source_t v14 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_write, v9, 0, *(dispatch_queue_t *)(v2 + 8));
        if (v14)
        {
          uint64_t v15 = v14;
          handler[0] = _NSConcreteStackBlock;
          handler[1] = 3221225472;
          handler[2] = sub_1002C6594;
          handler[3] = &unk_100997570;
          handler[4] = v2;
          int v26 = v9;
          dispatch_source_set_event_handler(v13, handler);
          dispatch_group_enter(v11);
          v24[0] = _NSConcreteStackBlock;
          v24[1] = 3221225472;
          void v24[2] = sub_1002C6754;
          v24[3] = &unk_100997528;
          v24[4] = v11;
          dispatch_source_set_cancel_handler(v13, v24);
          v22[0] = _NSConcreteStackBlock;
          v22[1] = 3221225472;
          void v22[2] = sub_1002C675C;
          v22[3] = &unk_100997570;
          v22[4] = v2;
          int v23 = v9;
          dispatch_source_set_event_handler(v15, v22);
          dispatch_group_enter(v11);
          v21[0] = _NSConcreteStackBlock;
          v21[1] = 3221225472;
          v21[2] = sub_1002C69D0;
          v21[3] = &unk_100997528;
          v21[4] = v11;
          dispatch_source_set_cancel_handler(v15, v21);
          dispatch_resume(v13);
          uint64_t v16 = *(NSObject **)(v2 + 8);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_1002C69D8;
          block[3] = &unk_100998300;
          int v20 = v9;
          dispatch_group_notify(v11, v16, block);
          dispatch_release(v11);
          operator new();
        }
        if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_ERROR)) {
          sub_100751F88();
        }
        dispatch_release(v13);
      }
      else if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_ERROR))
      {
        sub_100751F08();
      }
    }
    uint64_t v17 = *(void *)(*(void *)(a1 + 32) + 8);
    int v18 = 4;
  }
  *(_DWORD *)(v17 + 24) = v18;
}

void sub_1002C6568()
{
}

void sub_1002C6594(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 72);
  if (v3)
  {
    int v4 = *(_DWORD *)(a1 + 40);
    uint64_t v5 = v2 + 72;
    do
    {
      int v6 = *(_DWORD *)(v3 + 28);
      BOOL v7 = v6 < v4;
      if (v6 >= v4) {
        uint64_t v8 = (uint64_t *)v3;
      }
      else {
        uint64_t v8 = (uint64_t *)(v3 + 8);
      }
      if (!v7) {
        uint64_t v5 = v3;
      }
      uint64_t v3 = *v8;
    }
    while (*v8);
    if (v5 != v2 + 72 && v4 >= *(_DWORD *)(v5 + 28))
    {
      uint64_t v9 = *(void *)(v2 + 24);
      if (!v9) {
        goto LABEL_30;
      }
      uint64_t v10 = *(unsigned __int16 *)(v5 + 32);
      uint64_t v11 = v2 + 24;
      do
      {
        unsigned int v12 = *(unsigned __int16 *)(v9 + 32);
        BOOL v13 = v12 >= v10;
        if (v12 >= v10) {
          dispatch_source_t v14 = (uint64_t *)v9;
        }
        else {
          dispatch_source_t v14 = (uint64_t *)(v9 + 8);
        }
        if (v13) {
          uint64_t v11 = v9;
        }
        uint64_t v9 = *v14;
      }
      while (*v14);
      if (v11 != v2 + 24 && v10 >= *(unsigned __int16 *)(v11 + 32))
      {
        uint64_t v15 = *(void *)(v11 + 40);
        sub_1002C6690(v2, v10, v15);
      }
      else
      {
LABEL_30:
        if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_FAULT)) {
          sub_1007520F4();
        }
      }
    }
  }
}

void sub_1002C6690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = a2;
  if ((sub_1002CA700(a1, a2, a3) & 1) == 0)
  {
    uint64_t v5 = qword_100A19ED0;
    if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_INFO))
    {
      v6[0] = 67109120;
      v6[1] = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Stack is now full on pipe 0x%04x - stopping read source", (uint8_t *)v6, 8u);
    }
    sub_1002CB9FC(a3, 1);
  }
}

void sub_1002C6754(uint64_t a1)
{
}

void sub_1002C675C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 72);
  if (v3)
  {
    int v4 = *(_DWORD *)(a1 + 40);
    uint64_t v5 = v2 + 72;
    do
    {
      int v6 = *(_DWORD *)(v3 + 28);
      BOOL v7 = v6 < v4;
      if (v6 >= v4) {
        uint64_t v8 = (uint64_t *)v3;
      }
      else {
        uint64_t v8 = (uint64_t *)(v3 + 8);
      }
      if (!v7) {
        uint64_t v5 = v3;
      }
      uint64_t v3 = *v8;
    }
    while (*v8);
    if (v5 != v2 + 72 && v4 >= *(_DWORD *)(v5 + 28))
    {
      uint64_t v9 = *(void *)(v2 + 24);
      if (!v9) {
        goto LABEL_30;
      }
      unsigned int v10 = *(unsigned __int16 *)(v5 + 32);
      uint64_t v11 = v2 + 24;
      do
      {
        unsigned int v12 = *(unsigned __int16 *)(v9 + 32);
        BOOL v13 = v12 >= v10;
        if (v12 >= v10) {
          dispatch_source_t v14 = (uint64_t *)v9;
        }
        else {
          dispatch_source_t v14 = (uint64_t *)(v9 + 8);
        }
        if (v13) {
          uint64_t v11 = v9;
        }
        uint64_t v9 = *v14;
      }
      while (*v14);
      if (v11 != v2 + 24 && v10 >= *(unsigned __int16 *)(v11 + 32))
      {
        uint64_t v15 = *(void *)(v11 + 40);
        sub_1002C6858(v2, v10, v15);
      }
      else
      {
LABEL_30:
        if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_FAULT)) {
          sub_1007520F4();
        }
      }
    }
  }
}

void sub_1002C6858(uint64_t a1, int a2, uint64_t a3)
{
  int v6 = (void *)(a3 + 168);
  if (*(void *)(a3 + 168)
    || (uint64_t v9 = qword_100A19ED0, os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_FAULT))
    && !sub_10075215C(v9, v6, v10, v11, v12, v13, v14, v15))
  {
    uint64_t v7 = (uint64_t)(v6 - 5);
    while (1)
    {
      uint64_t v8 = *(void *)(*(void *)(*(void *)(a3 + 136) + ((*(void *)(a3 + 160) >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (*(void *)(a3 + 160) & 0x1FFLL));
      if (!sub_1002C991C(a1, a2, a3, v8 + 19, *(void *)(v8 + 8), *(unsigned __int16 *)(v8 + 16), *(unsigned __int8 *)(v8 + 18)))break; {
      free((void *)v8);
      }
      *(int64x2_t *)(a3 + 160) = vaddq_s64(*(int64x2_t *)(a3 + 160), (int64x2_t)xmmword_1007BB7F0);
      sub_1002CBC00(v7, 1);
      if (!*(void *)(a3 + 168)) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    uint64_t v16 = qword_100A19ED0;
    if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      int v18 = a2;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Socket queue is now empty on pipe 0x%04x - stopping write source", buf, 8u);
    }
    dispatch_suspend(*(dispatch_object_t *)(a3 + 192));
  }
}

void sub_1002C69D0(uint64_t a1)
{
}

uint64_t sub_1002C69D8(uint64_t a1)
{
  return close(*(_DWORD *)(a1 + 32));
}

uint64_t sub_1002C69E0(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5, int a6, char a7)
{
  return sub_1002C5FE0(a1, 0, a2, a3, a5, a5, a6, a7);
}

uint64_t sub_1002C69FC(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5, int *a6, int a7)
{
  uint64_t v14 = qword_100A19ED0;
  if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = *a6;
    v34[0] = 67110144;
    v34[1] = a3;
    __int16 v35 = 1024;
    int v36 = a4;
    __int16 v37 = 1024;
    int v38 = a5;
    __int16 v39 = 1024;
    int v40 = v16;
    __int16 v41 = 1024;
    int v42 = a7;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "cid:%d pid:%d outMTU:%d sock:%d priority:%d", (uint8_t *)v34, 0x20u);
  }
  uint64_t v17 = sub_1002C5FE0(a1, 1, a2, a3, v15, (uint64_t)a6, a7, 0);
  if (!v17)
  {
    uint64_t v20 = *(void *)(a1 + 24);
    uint64_t v19 = a1 + 24;
    uint64_t v18 = v20;
    if (!v20) {
      goto LABEL_15;
    }
    uint64_t v21 = v19;
    do
    {
      unsigned int v22 = *(unsigned __int16 *)(v18 + 32);
      BOOL v23 = v22 >= a3;
      if (v22 >= a3) {
        uint64_t v24 = (uint64_t *)v18;
      }
      else {
        uint64_t v24 = (uint64_t *)(v18 + 8);
      }
      if (v23) {
        uint64_t v21 = v18;
      }
      uint64_t v18 = *v24;
    }
    while (*v24);
    if (v21 == v19 || *(unsigned __int16 *)(v21 + 32) > a3)
    {
LABEL_15:
      unsigned int v25 = qword_100A19ED0;
      if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_FAULT)) {
        sub_1007521EC(v25, v26, v27, v28, v29, v30, v31, v32);
      }
      uint64_t v21 = v19;
    }
    *(_WORD *)(*(void *)(v21 + 40) + 376) = a5;
  }
  return v17;
}

BOOL sub_1002C6B94(uint64_t *a1, uint64_t a2, unint64_t a3, unint64_t *a4)
{
  return !a1 || !*a1 || sub_1002C6BC0(*a1, a1[1], a2, a3, a4);
}

BOOL sub_1002C6BC0(uint64_t a1, unsigned __int16 a2, uint64_t a3, unint64_t a4, unint64_t *a5)
{
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v5 = a1 + 24;
  uint64_t v6 = v7;
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v11 = v5;
  do
  {
    unsigned int v12 = *(unsigned __int16 *)(v6 + 32);
    BOOL v13 = v12 >= a2;
    if (v12 >= a2) {
      uint64_t v14 = (uint64_t *)v6;
    }
    else {
      uint64_t v14 = (uint64_t *)(v6 + 8);
    }
    if (v13) {
      uint64_t v11 = v6;
    }
    uint64_t v6 = *v14;
  }
  while (*v14);
  if (v11 != v5 && *(unsigned __int16 *)(v11 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v11 + 40);
    return sub_1002CB118(v5, a2, v16, a3, a4, a5);
  }
  else
  {
LABEL_20:
    if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_ERROR)) {
      sub_100752264();
    }
    return 0;
  }
}

void sub_1002C6C7C(uint64_t *a1)
{
  if (a1)
  {
    if (*a1)
    {
      uint64_t v1 = a1[1];
      uint64_t v2 = *a1;
      sub_1002C6CF0(v2, v1);
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_ERROR))
    {
      sub_1007522D0();
    }
  }
}

void sub_1002C6CF0(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    goto LABEL_20;
  }
  uint64_t v5 = a1 + 24;
  do
  {
    unsigned int v6 = *(unsigned __int16 *)(v3 + 32);
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      uint64_t v8 = (uint64_t *)v3;
    }
    else {
      uint64_t v8 = (uint64_t *)(v3 + 8);
    }
    if (v7) {
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 24 && *(unsigned __int16 *)(v5 + 32) <= a2)
  {
    for (uint64_t i = *(int64x2_t **)(v5 + 40); i[10].i64[1]; sub_1002CBC00((uint64_t)i[8].i64, 1))
    {
      uint64_t v10 = *(void *)(*(void *)(i[8].i64[1] + (((unint64_t)i[10].i64[0] >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * (i[10].i64[0] & 0x1FF));
      if (!sub_1002C991C(a1, a2, (uint64_t)i, v10 + 19, *(void *)(v10 + 8), *(unsigned __int16 *)(v10 + 16), *(unsigned __int8 *)(v10 + 18)))break; {
      free((void *)v10);
      }
      i[10] = vaddq_s64(i[10], (int64x2_t)xmmword_1007BB7F0);
    }
  }
  else
  {
LABEL_20:
    if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_ERROR)) {
      sub_100752304();
    }
  }
}

uint64_t sub_1002C6E24(uint64_t a1, uint64_t a2, int a3, int a4, _WORD *a5, char a6, char a7, uint64_t a8)
{
  uint64_t v25 = 0;
  uint64_t v26 = &v25;
  uint64_t v27 = 0x2020000000;
  int v28 = 0;
  uint64_t v16 = qword_100A19ED0;
  if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    int v30 = a3;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Registering networkrelay pipe for pipeID:0x%4x", buf, 8u);
  }
  *a5 = 0;
  uint64_t v17 = *(NSObject **)(a1 + 8);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_1002C6FA4;
  v20[3] = &unk_1009A2CA0;
  __int16 v22 = a3;
  v20[4] = &v25;
  v20[5] = a1;
  int v21 = a4;
  v20[6] = a8;
  v20[7] = a2;
  char v23 = a7;
  v20[8] = a5;
  char v24 = a6;
  dispatch_sync(v17, v20);
  uint64_t v18 = *((unsigned int *)v26 + 6);
  _Block_object_dispose(&v25, 8);
  return v18;
}

void sub_1002C6FA4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(v2 + 24);
  if (!v3) {
    goto LABEL_12;
  }
  unsigned int v4 = *(unsigned __int16 *)(a1 + 76);
  uint64_t v5 = v2 + 24;
  do
  {
    unsigned int v6 = *(unsigned __int16 *)(v3 + 32);
    BOOL v7 = v6 >= v4;
    if (v6 >= v4) {
      uint64_t v8 = (uint64_t *)v3;
    }
    else {
      uint64_t v8 = (uint64_t *)(v3 + 8);
    }
    if (v7) {
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v5 != v2 + 24 && v4 >= *(unsigned __int16 *)(v5 + 32))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_FAULT)) {
      sub_1007524C0();
    }
    uint64_t v29 = *(void *)(*(void *)(a1 + 32) + 8);
    int v30 = 103;
  }
  else
  {
LABEL_12:
    signed int v9 = arc4random_uniform(0xFFFFFFFF);
    int v40 = v9;
    uint64_t v11 = (uint64_t *)(v2 + 72);
    uint64_t v10 = *(void *)(v2 + 72);
    if (v10)
    {
      uint64_t v12 = v2 + 72;
      do
      {
        signed int v13 = *(_DWORD *)(v10 + 28);
        BOOL v14 = v13 < v9;
        if (v13 >= v9) {
          uint64_t v15 = (uint64_t *)v10;
        }
        else {
          uint64_t v15 = (uint64_t *)(v10 + 8);
        }
        if (!v14) {
          uint64_t v12 = v10;
        }
        uint64_t v10 = *v15;
      }
      while (*v15);
      if ((uint64_t *)v12 != v11 && v9 >= *(_DWORD *)(v12 + 28))
      {
        do
        {
          signed int v16 = arc4random_uniform(0xFFFFFFFF);
          uint64_t v17 = *v11;
          if (!*v11) {
            break;
          }
          uint64_t v18 = v2 + 72;
          do
          {
            signed int v19 = *(_DWORD *)(v17 + 28);
            BOOL v20 = v19 < v16;
            if (v19 >= v16) {
              int v21 = (uint64_t *)v17;
            }
            else {
              int v21 = (uint64_t *)(v17 + 8);
            }
            if (!v20) {
              uint64_t v18 = v17;
            }
            uint64_t v17 = *v21;
          }
          while (*v21);
        }
        while ((uint64_t *)v18 != v11 && v16 >= *(_DWORD *)(v18 + 28));
        int v40 = v16;
      }
    }
    __int16 v22 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(v2 + 8));
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1002C77B4;
    handler[3] = &unk_100997528;
    handler[4] = v22;
    dispatch_source_set_event_handler(v22, handler);
    memset(dst, 0, sizeof(dst));
    uuid_copy(dst, *(const unsigned __int8 **)(a1 + 48));
    uint64_t v23 = sub_1000308C0(v2 + 88, dst);
    if (v2 + 96 == v23)
    {
      __int16 v25 = 0;
    }
    else
    {
      uint64_t v24 = *(void *)(v23 + 48);
      __int16 v25 = *(_WORD *)(v23 + 56);
      if (v24) {
        goto LABEL_38;
      }
    }
    uint64_t v24 = NRBluetoothPacketParserCreate();
    if (v24)
    {
LABEL_38:
      *(void *)buf = dst;
      uint64_t v26 = sub_1002CBEB0((uint64_t **)(v2 + 88), dst, (uint64_t)&unk_1007BE9D0, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)buf);
      v26[6] = v24;
      *((_WORD *)v26 + 28) = v25 + 1;
      uint64_t v27 = qword_100A19ED0;
      if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_DEFAULT))
      {
        int v28 = *(_DWORD *)(a1 + 72);
        *(_DWORD *)buf = 134218240;
        *(void *)&uint8_t buf[4] = v24;
        __int16 v42 = 1024;
        int v43 = v28;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "created networkrelay parser (%p) for pipe priority: %u", buf, 0x12u);
      }
      int v38 = 0;
      NRBluetoothPacketParserGetSlotCount();
      *(void *)src = 0;
      uint64_t v46 = 0;
      memset(v44, 0, sizeof(v44));
      uuid_copy(v44, src);
      operator new();
    }
    uint64_t v31 = qword_100A19ED0;
    if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_FAULT)) {
      sub_100752370(a1 + 48, v31, v32, v33, v34, v35, v36, v37);
    }
    uint64_t v29 = *(void *)(*(void *)(a1 + 32) + 8);
    int v30 = 124;
  }
  *(_DWORD *)(v29 + 24) = v30;
}

void sub_1002C7758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002C77B4(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 32);
  context = dispatch_get_context(v1);
  if (context)
  {
    uint64_t v3 = context;
    sub_1002C78E0((uint64_t)context, 0);
    unsigned int v4 = qword_100A19ED0;
    if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_INFO))
    {
      int v5 = v3[66];
      v9[0] = 67109120;
      v9[1] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "TIMER: flushing %u held up packets", (uint8_t *)v9, 8u);
    }
    if (v3[66])
    {
      __uint64_t v6 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
      v3[66] = 0;
      *((void *)v3 + 41) = v6;
      BOOL v7 = (void *)*((void *)v3 + 2);
      if (v7)
      {
        uint64_t v8 = (void (*)(void))v7[2];
        if (v8) {
          v8(*v7);
        }
      }
    }
  }
  else
  {
    dispatch_suspend(v1);
  }
}

void sub_1002C78E0(uint64_t a1, int a2)
{
  unint64_t v3 = *(void *)(a1 + 304);
  unint64_t v4 = 2 * v3;
  if (2 * v3 >= 0x1312D00) {
    unint64_t v4 = 20000000;
  }
  if (v4 <= 0xF4240) {
    int64_t v5 = 1000000;
  }
  else {
    int64_t v5 = v4;
  }
  int v6 = *(unsigned __int8 *)(a1 + 344);
  if (a2)
  {
    BOOL v7 = *(NSObject **)(a1 + 336);
    dispatch_time_t v8 = dispatch_time(0, v5);
    dispatch_source_set_timer(v7, v8, 0xFFFFFFFFFFFFFFFFLL, 0x989680uLL);
    if (!*(unsigned char *)(a1 + 344))
    {
      *(unsigned char *)(a1 + 344) = 1;
      dispatch_resume(*(dispatch_object_t *)(a1 + 336));
    }
    signed int v9 = qword_100A19ED0;
    if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = "RE-ARMED";
      if (!v6) {
        uint64_t v10 = "ARMED";
      }
      int v11 = *(_DWORD *)(a1 + 276);
      unint64_t v12 = *(void *)(a1 + 304) / 0xF4240uLL;
      int v15 = 136446978;
      *(void *)signed int v16 = v10;
      *(_WORD *)&v16[8] = 1024;
      *(_DWORD *)&v16[10] = v11;
      __int16 v17 = 2048;
      unint64_t v18 = v12;
      __int16 v19 = 2048;
      unint64_t v20 = v5 / 0xF4240uLL;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%{public}s: lenAvg %u, ivalAvg %llu ms, deadline %llu ms", (uint8_t *)&v15, 0x26u);
    }
  }
  else if (*(unsigned char *)(a1 + 344))
  {
    signed int v13 = qword_100A19ED0;
    if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_INFO))
    {
      int v14 = *(_DWORD *)(a1 + 276);
      int v15 = 67109376;
      *(_DWORD *)signed int v16 = v14;
      *(_WORD *)&void v16[4] = 2048;
      *(void *)&v16[6] = v3 / 0xF4240;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "DISARMED: lenAvg %u, ivalAvg %llu ms", (uint8_t *)&v15, 0x12u);
    }
    *(unsigned char *)(a1 + 344) = 0;
    dispatch_suspend(*(dispatch_object_t *)(a1 + 336));
  }
}

void sub_1002C7AF4(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3)
  {
    int64_t v5 = (uint64_t **)(a1 + 16);
    uint64_t v6 = a1 + 24;
    do
    {
      unsigned int v7 = *(unsigned __int16 *)(v3 + 32);
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        signed int v9 = (uint64_t *)v3;
      }
      else {
        signed int v9 = (uint64_t *)(v3 + 8);
      }
      if (v8) {
        uint64_t v6 = v3;
      }
      uint64_t v3 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 24 && *(unsigned __int16 *)(v6 + 32) <= a2)
    {
      uint64_t v10 = *(void *)(v6 + 40);
      uint64_t v11 = *(void *)(a1 + 72);
      int v12 = *(_DWORD *)(v10 + 200);
      if (!v11) {
        goto LABEL_25;
      }
      uint64_t v13 = a1 + 72;
      do
      {
        int v14 = *(_DWORD *)(v11 + 28);
        BOOL v15 = v14 < v12;
        if (v14 >= v12) {
          signed int v16 = (uint64_t *)v11;
        }
        else {
          signed int v16 = (uint64_t *)(v11 + 8);
        }
        if (!v15) {
          uint64_t v13 = v11;
        }
        uint64_t v11 = *v16;
      }
      while (*v16);
      if (v13 == a1 + 72 || v12 < *(_DWORD *)(v13 + 28))
      {
LABEL_25:
        __int16 v17 = qword_100A19ED0;
        if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = a2;
          _os_log_fault_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Wasn't tracking a server socket for pipe 0x%04x", buf, 8u);
          int v12 = *(_DWORD *)(v10 + 200);
        }
      }
      *(_DWORD *)buf = v12;
      sub_1002CC188(a1 + 64, (int *)buf);
      sub_10004D3B8(v5, (uint64_t *)v6);
      operator delete((void *)v6);
      if (*(_DWORD *)(v10 + 368) == 3)
      {
        uint64_t v18 = *(void *)(v10 + 112);
        *(unsigned char *)(a1 + 137) = 0;
        if (qword_1009F8158 != -1) {
          dispatch_once(&qword_1009F8158, &stru_1009A2D60);
        }
        sub_1004FAFC8(off_1009F8150, 0);
        LOBYTE(v23) = 0;
        sub_10001B8E0(&v23);
        BOOL v19 = sub_100197770(v18);
        sub_10001B910(&v23);
        if (v19)
        {
          uint64_t v20 = sub_10003FB34();
          int v21 = (*(uint64_t (**)(uint64_t, unint64_t, void, uint64_t, void, void, uint64_t, void))(*(void *)v20 + 72))(v20, *(unsigned int *)(v18 + 57) | ((unint64_t)*(unsigned __int16 *)(v18 + 61) << 32), 0, 8, 0, 0, 1, 0);
          __int16 v22 = qword_100A19ED0;
          if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v21;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Untag iso link as high priority with result %d", buf, 8u);
          }
        }
        sub_10001B8AC(&v23);
      }
      *(void *)buf = 0;
      uint64_t v25 = 0;
      uuid_copy(buf, (const unsigned __int8 *)(v10 + 400));
      sub_1002CB858(v10);
      operator delete();
    }
  }
  if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_FAULT)) {
    sub_10075252C();
  }
}

void sub_1002C7E60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10001B8AC(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002C7E80(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, int a6, _WORD *a7, char a8, char a9)
{
  uint64_t v27 = 0;
  int v28 = &v27;
  uint64_t v29 = 0x2020000000;
  int v30 = 0;
  __int16 v17 = qword_100A19ED0;
  if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    int v32 = a3;
    __int16 v33 = 1024;
    int v34 = a4;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Registering skywalk pipe for pipeID:0x%4x pid:%d", buf, 0xEu);
  }
  if (*(void *)(a1 + 112))
  {
    *a7 = 0;
    uint64_t v18 = *(NSObject **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002C8024;
    block[3] = &unk_1009A2CF8;
    __int16 v24 = a3;
    void block[4] = &v27;
    block[5] = a1;
    int v22 = a4;
    int v23 = a6;
    char v25 = a9;
    block[6] = a2;
    block[7] = a7;
    char v26 = a8;
    block[8] = a5;
    dispatch_sync(v18, block);
    uint64_t v19 = *((unsigned int *)v28 + 6);
  }
  else
  {
    uint64_t v19 = 114;
  }
  _Block_object_dispose(&v27, 8);
  return v19;
}

void sub_1002C8024(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(v2 + 24);
  if (!v3) {
    goto LABEL_12;
  }
  unsigned int v4 = *(unsigned __int16 *)(a1 + 80);
  uint64_t v5 = v2 + 24;
  do
  {
    unsigned int v6 = *(unsigned __int16 *)(v3 + 32);
    BOOL v7 = v6 >= v4;
    if (v6 >= v4) {
      BOOL v8 = (uint64_t *)v3;
    }
    else {
      BOOL v8 = (uint64_t *)(v3 + 8);
    }
    if (v7) {
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v5 != v2 + 24 && v4 >= *(unsigned __int16 *)(v5 + 32))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_FAULT)) {
      sub_10075279C();
    }
    uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
    int v10 = 103;
  }
  else
  {
LABEL_12:
    *(void *)src = 0;
    uint64_t v34 = 0;
    if (!os_nexus_controller_alloc_provider_instance())
    {
      getpid();
      os_nexus_controller_bind_provider_instance();
      os_nexus_controller_bind_provider_instance();
      os_channel_attr_create();
      os_channel_attr_set();
      uint64_t extended = os_channel_create_extended();
      if (!extended)
      {
        int v12 = qword_100A19ED0;
        if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_FAULT)) {
          sub_100752704(v12);
        }
      }
      int v28 = 0;
      uint64_t v29 = 0;
      os_channel_attr_get();
      os_channel_attr_get();
      os_channel_attr_destroy();
      uintptr_t handle = os_channel_get_fd();
      uint64_t v13 = dispatch_group_create();
      int v14 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_read, (int)handle, 0, *(dispatch_queue_t *)(v2 + 8));
      if (v14)
      {
        BOOL v15 = v14;
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472;
        handler[2] = sub_1002C89A4;
        handler[3] = &unk_100997570;
        handler[4] = v2;
        int v26 = handle;
        dispatch_source_set_event_handler(v14, handler);
        dispatch_group_enter(v13);
        v24[0] = _NSConcreteStackBlock;
        v24[1] = 3221225472;
        void v24[2] = sub_1002C8AA0;
        v24[3] = &unk_100997528;
        v24[4] = v13;
        dispatch_source_set_cancel_handler(v15, v24);
        signed int v16 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_write, (int)handle, 0, *(dispatch_queue_t *)(v2 + 8));
        if (v16)
        {
          __int16 v17 = v16;
          v22[0] = _NSConcreteStackBlock;
          v22[1] = 3221225472;
          void v22[2] = sub_1002C8AA8;
          v22[3] = &unk_100997570;
          v22[4] = v2;
          int v23 = handle;
          dispatch_source_set_event_handler(v16, v22);
          dispatch_group_enter(v13);
          v21[0] = _NSConcreteStackBlock;
          v21[1] = 3221225472;
          v21[2] = sub_1002C8BA4;
          v21[3] = &unk_100998260;
          v21[4] = extended;
          void v21[5] = v13;
          dispatch_source_set_cancel_handler(v17, v21);
          dispatch_resume(v15);
          memset(dst, 0, sizeof(dst));
          uuid_copy(dst, src);
          uint64_t v18 = *(NSObject **)(v2 + 8);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3321888768;
          block[2] = sub_1002C8BE0;
          block[3] = &unk_1009A2CC0;
          void block[4] = v2;
          uuid_copy(v31, dst);
          dispatch_group_notify(v13, v18, block);
          dispatch_release(v13);
          uint64_t v19 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(v2 + 8));
          v20[0] = _NSConcreteStackBlock;
          v20[1] = 3221225472;
          v20[2] = sub_1002C8C04;
          v20[3] = &unk_100997528;
          v20[4] = v19;
          dispatch_source_set_event_handler(v19, v20);
          operator new();
        }
        if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_ERROR)) {
          sub_100752618();
        }
        dispatch_release(v15);
      }
      else if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_ERROR))
      {
        sub_100752598();
      }
    }
    uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
    int v10 = 4;
  }
  *(_DWORD *)(v9 + 24) = v10;
}

void sub_1002C8948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a55 < 0) {
    operator delete(a50);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002C89A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 72);
  if (v3)
  {
    int v4 = *(_DWORD *)(a1 + 40);
    uint64_t v5 = v2 + 72;
    do
    {
      int v6 = *(_DWORD *)(v3 + 28);
      BOOL v7 = v6 < v4;
      if (v6 >= v4) {
        BOOL v8 = (uint64_t *)v3;
      }
      else {
        BOOL v8 = (uint64_t *)(v3 + 8);
      }
      if (!v7) {
        uint64_t v5 = v3;
      }
      uint64_t v3 = *v8;
    }
    while (*v8);
    if (v5 != v2 + 72 && v4 >= *(_DWORD *)(v5 + 28))
    {
      uint64_t v9 = *(void *)(v2 + 24);
      if (!v9) {
        goto LABEL_30;
      }
      uint64_t v10 = *(unsigned __int16 *)(v5 + 32);
      uint64_t v11 = v2 + 24;
      do
      {
        unsigned int v12 = *(unsigned __int16 *)(v9 + 32);
        BOOL v13 = v12 >= v10;
        if (v12 >= v10) {
          int v14 = (uint64_t *)v9;
        }
        else {
          int v14 = (uint64_t *)(v9 + 8);
        }
        if (v13) {
          uint64_t v11 = v9;
        }
        uint64_t v9 = *v14;
      }
      while (*v14);
      if (v11 != v2 + 24 && v10 >= *(unsigned __int16 *)(v11 + 32))
      {
        uint64_t v15 = *(void *)(v11 + 40);
        sub_1002C6690(v2, v10, v15);
      }
      else
      {
LABEL_30:
        if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_FAULT)) {
          sub_1007520F4();
        }
      }
    }
  }
}

void sub_1002C8AA0(uint64_t a1)
{
}

void sub_1002C8AA8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 72);
  if (v3)
  {
    int v4 = *(_DWORD *)(a1 + 40);
    uint64_t v5 = v2 + 72;
    do
    {
      int v6 = *(_DWORD *)(v3 + 28);
      BOOL v7 = v6 < v4;
      if (v6 >= v4) {
        BOOL v8 = (uint64_t *)v3;
      }
      else {
        BOOL v8 = (uint64_t *)(v3 + 8);
      }
      if (!v7) {
        uint64_t v5 = v3;
      }
      uint64_t v3 = *v8;
    }
    while (*v8);
    if (v5 != v2 + 72 && v4 >= *(_DWORD *)(v5 + 28))
    {
      uint64_t v9 = *(void *)(v2 + 24);
      if (!v9) {
        goto LABEL_30;
      }
      unsigned int v10 = *(unsigned __int16 *)(v5 + 32);
      uint64_t v11 = v2 + 24;
      do
      {
        unsigned int v12 = *(unsigned __int16 *)(v9 + 32);
        BOOL v13 = v12 >= v10;
        if (v12 >= v10) {
          int v14 = (uint64_t *)v9;
        }
        else {
          int v14 = (uint64_t *)(v9 + 8);
        }
        if (v13) {
          uint64_t v11 = v9;
        }
        uint64_t v9 = *v14;
      }
      while (*v14);
      if (v11 != v2 + 24 && v10 >= *(unsigned __int16 *)(v11 + 32))
      {
        uint64_t v15 = *(void *)(v11 + 40);
        sub_1002C6858(v2, v10, v15);
      }
      else
      {
LABEL_30:
        if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_FAULT)) {
          sub_1007520F4();
        }
      }
    }
  }
}

void sub_1002C8BA4(uint64_t a1)
{
  os_channel_destroy();
  uint64_t v2 = *(NSObject **)(a1 + 40);

  dispatch_group_leave(v2);
}

uint64_t sub_1002C8BE0()
{
  return os_nexus_controller_free_provider_instance();
}

void sub_1002C8BF4(uint64_t a1, uint64_t a2)
{
}

void sub_1002C8C04(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 32);
  context = dispatch_get_context(v1);
  if (context)
  {
    uint64_t v3 = context;
    sub_1002C78E0((uint64_t)context, 0);
    if (*((void *)v3 + 28))
    {
      int v4 = qword_100A19ED0;
      if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_INFO))
      {
        int v5 = v3[66];
        v7[0] = 67109120;
        v7[1] = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "TIMER: flushing %u held up packets", (uint8_t *)v7, 8u);
      }
      if (v3[66])
      {
        __uint64_t v6 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
        v3[66] = 0;
        *((void *)v3 + 41) = v6;
        os_channel_sync();
      }
    }
  }
  else
  {
    dispatch_suspend(v1);
  }
}

void sub_1002C8D38(uint64_t a1, __int16 a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1002C8DB0;
  v3[3] = &unk_1009A0B58;
  v3[4] = a1;
  __int16 v4 = a2;
  dispatch_sync(v2, v3);
}

void sub_1002C8DB0(uint64_t a1)
{
}

uint64_t sub_1002C8DC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2 == (void *)(a1 + 24)) {
    return 0;
  }
  while (1)
  {
    uint64_t v3 = v2[5];
    if (*(void *)(v3 + 112) == a2 && *(_DWORD *)(v3 + 368) == 3) {
      break;
    }
    __int16 v4 = (void *)v2[1];
    if (v4)
    {
      do
      {
        int v5 = v4;
        __int16 v4 = (void *)*v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        int v5 = (void *)v2[2];
        BOOL v6 = *v5 == (void)v2;
        uint64_t v2 = v5;
      }
      while (!v6);
    }
    uint64_t v2 = v5;
    if (v5 == (void *)(a1 + 24)) {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_1002C8E34(uint64_t a1, uint64_t a2, const void *a3, unsigned __int8 a4)
{
  char v16 = 0;
  sub_10001B8E0(&v16);
  uint64_t v7 = sub_1000E920C(a2, a3, a4);
  if (v7)
  {
    BOOL v8 = qword_100A19ED0;
    if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_ERROR)) {
      sub_100752808(v7, v8, v9, v10, v11, v12, v13, v14);
    }
    uint64_t v7 = 1;
  }
  sub_10001B8AC(&v16);
  return v7;
}

void sub_1002C8ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_1002C8EE0(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v19 = a3;
  unint64_t v20 = a2;
  uint64_t v3 = (void *)(a1 + 48);
  __int16 v4 = *(void **)(a1 + 48);
  int v5 = (uint64_t **)(a1 + 40);
  if (v4)
  {
    BOOL v6 = v3;
    do
    {
      unint64_t v7 = v4[4];
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        uint64_t v9 = v4;
      }
      else {
        uint64_t v9 = v4 + 1;
      }
      if (v8) {
        BOOL v6 = v4;
      }
      __int16 v4 = (void *)*v9;
    }
    while (*v9);
    if (v6 != v3 && v6[4] <= a2)
    {
      uint64_t v12 = (void *)v6[6];
      uint64_t v10 = v6 + 6;
      uint64_t v11 = v12;
      if (v12)
      {
        uint64_t v13 = v10;
        do
        {
          unint64_t v14 = v11[4];
          BOOL v15 = v14 >= a3;
          if (v14 >= a3) {
            char v16 = v11;
          }
          else {
            char v16 = v11 + 1;
          }
          if (v15) {
            uint64_t v13 = v11;
          }
          uint64_t v11 = (void *)*v16;
        }
        while (*v16);
        if (v13 != v10 && v13[4] <= a3) {
          return 15;
        }
      }
    }
  }
  int v21 = &v20;
  __int16 v17 = sub_1002CC204(v5, &v20, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v21);
  sub_100051620((uint64_t **)v17 + 5, &v19, (uint64_t *)&v19);
  return 0;
}

uint64_t sub_1002C8FBC(uint64_t a1, unint64_t a2, unint64_t a3)
{
  int v5 = *(void **)(a1 + 48);
  uint64_t v3 = (void *)(a1 + 48);
  __int16 v4 = v5;
  if (!v5) {
    return 16;
  }
  BOOL v6 = v3;
  do
  {
    unint64_t v7 = v4[4];
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      uint64_t v9 = v4;
    }
    else {
      uint64_t v9 = v4 + 1;
    }
    if (v8) {
      BOOL v6 = v4;
    }
    __int16 v4 = (void *)*v9;
  }
  while (*v9);
  if (v6 == v3) {
    return 16;
  }
  if (v6[4] > a2) {
    return 16;
  }
  uint64_t v12 = (void *)v6[6];
  uint64_t v10 = v6 + 6;
  uint64_t v11 = v12;
  if (!v12) {
    return 16;
  }
  uint64_t v13 = v10;
  unint64_t v14 = v11;
  do
  {
    unint64_t v15 = v14[4];
    BOOL v16 = v15 >= a3;
    if (v15 >= a3) {
      __int16 v17 = v14;
    }
    else {
      __int16 v17 = v14 + 1;
    }
    if (v16) {
      uint64_t v13 = v14;
    }
    unint64_t v14 = (void *)*v17;
  }
  while (*v17);
  if (v13 == v10 || v13[4] > a3) {
    return 16;
  }
  unint64_t v19 = v10;
  do
  {
    unint64_t v20 = v11[4];
    BOOL v21 = v20 >= a3;
    if (v20 >= a3) {
      int v22 = v11;
    }
    else {
      int v22 = v11 + 1;
    }
    if (v21) {
      unint64_t v19 = v11;
    }
    uint64_t v11 = (void *)*v22;
  }
  while (*v22);
  if (v19 == v10 || v19[4] > a3) {
    unint64_t v19 = v10;
  }
  sub_10004D3B8((uint64_t **)v10 - 1, v19);
  operator delete(v19);
  return 0;
}

void sub_1002C90AC(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, char a5)
{
  if (qword_100A120D0 != -1) {
    dispatch_once(&qword_100A120D0, &stru_1009A2BF0);
  }
  uint64_t v9 = qword_100A19A50;

  sub_1002C9130(v9, a1, a2, a3, a5);
}

void sub_1002C9130(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, char a5)
{
  BOOL v8 = +[NSData dataWithBytes:a3 length:a4];
  uint64_t v9 = sub_100019878();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1002C9220;
  v11[3] = &unk_1009A2D20;
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  id v10 = v8;
  id v12 = v10;
  char v15 = a5;
  sub_100013018(v9, v11);
}

void sub_1002C9200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1002C9220(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void **)(v1 + 40);
  uint64_t v3 = (void *)(v1 + 48);
  if (v2 != (void *)(v1 + 48))
  {
    do
    {
      if (v2[4] == *(void *)(a1 + 48))
      {
        BOOL v8 = (void *)v2[5];
        if (v8 != v2 + 6)
        {
          do
          {
            uint64_t v9 = (void (***)(void, void *, void, void))v8[4];
            memset(uu, 0, sizeof(uu));
            uuid_clear(uu);
            if (qword_1009F7EC0 != -1) {
              dispatch_once(&qword_1009F7EC0, &stru_1009A2D80);
            }
            if (sub_10067F618((uint64_t)off_1009F7EB8, *(void *)(a1 + 48), uu))
            {
              id v10 = sub_100031234(uu);
              (**v9)(v9, v10, *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 56));
            }
            uint64_t v11 = (void *)v8[1];
            if (v11)
            {
              do
              {
                id v12 = v11;
                uint64_t v11 = (void *)*v11;
              }
              while (v11);
            }
            else
            {
              do
              {
                id v12 = (void *)v8[2];
                BOOL v7 = *v12 == (void)v8;
                BOOL v8 = v12;
              }
              while (!v7);
            }
            BOOL v8 = v12;
          }
          while (v12 != v2 + 6);
        }
      }
      int v5 = (void *)v2[1];
      if (v5)
      {
        do
        {
          BOOL v6 = v5;
          int v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          BOOL v6 = (void *)v2[2];
          BOOL v7 = *v6 == (void)v2;
          uint64_t v2 = v6;
        }
        while (!v7);
      }
      uint64_t v2 = v6;
    }
    while (v6 != v3);
  }
}

void sub_1002C93DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002C93F4(uint64_t a1, int a2, const void *a3, size_t a4, uint64_t a5, char a6)
{
  uint64_t v11 = malloc_type_malloc(a4 + 24, 0x744BC97EuLL);
  id v12 = qword_100A19ED0;
  if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_INFO))
  {
    int v13 = 134218240;
    size_t v14 = a4;
    __int16 v15 = 1024;
    int v16 = a2;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Received %zu bytes on pipe id:%04X", (uint8_t *)&v13, 0x12u);
  }
  *(_WORD *)uint64_t v11 = a2;
  v11[1] = a4;
  *((unsigned char *)v11 + 18) = a6;
  memcpy((char *)v11 + 19, a3, a4);
  sub_1002B7D94(21, 0);
  dispatch_async_f(*(dispatch_queue_t *)(a1 + 8), v11, (dispatch_function_t)sub_1002C9524);
}

void sub_1002C9524(unint64_t *a1)
{
}

void sub_1002C9534(uint64_t a1, unsigned int a2, const void *a3, size_t a4, __int16 a5, int a6, char a7)
{
  size_t v14 = malloc_type_malloc(a4 + 24, 0xB9B72F0DuLL);
  *(_WORD *)size_t v14 = a2;
  v14[1] = a4;
  *((_WORD *)v14 + 8) = a5;
  *((unsigned char *)v14 + 18) = a7;
  memcpy((char *)v14 + 19, a3, a4);
  uint64_t v15 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v15 + 8))(v15))
  {
    uint64_t v16 = sub_10003FB34();
    if ((sub_100354254(v16) & 1) == 0)
    {
      if (a6)
      {
        sub_1000E8D04(a2);
      }
      else
      {
        char v17 = 0;
        sub_10001B8E0(&v17);
        sub_1000E8D04(a2);
        sub_10001B910(&v17);
        sub_10001B8AC(&v17);
      }
    }
  }
  dispatch_async_f(*(dispatch_queue_t *)(a1 + 8), v14, (dispatch_function_t)sub_1002C9524);
}

void sub_1002C9658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_1002C966C(uint64_t a1, unint64_t *a2)
{
  uint64_t v15 = a2;
  if (a2)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    if (!v3) {
      goto LABEL_37;
    }
    unsigned int v4 = *(unsigned __int16 *)a2;
    uint64_t v5 = a1 + 24;
    do
    {
      unsigned int v6 = *(unsigned __int16 *)(v3 + 32);
      BOOL v7 = v6 >= v4;
      if (v6 >= v4) {
        BOOL v8 = (uint64_t *)v3;
      }
      else {
        BOOL v8 = (uint64_t *)(v3 + 8);
      }
      if (v7) {
        uint64_t v5 = v3;
      }
      uint64_t v3 = *v8;
    }
    while (*v8);
    if (v5 == a1 + 24 || v4 < *(unsigned __int16 *)(v5 + 32))
    {
LABEL_37:
      if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_ERROR)) {
        sub_1007528A8();
      }
LABEL_30:
      free(a2);
      return;
    }
    uint64_t v10 = *(void *)(v5 + 40);
    if (*(void *)(v10 + 168))
    {
      sub_1002CC37C((void *)(v10 + 128), &v15);
    }
    else
    {
      if (sub_1002C991C(a1, v4, *(void *)(v5 + 40), (uint64_t)a2 + 19, a2[1], *((unsigned __int16 *)a2 + 8), *((unsigned __int8 *)a2 + 18)))
      {
        goto LABEL_30;
      }
      uint64_t v11 = qword_100A19ED0;
      if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_INFO))
      {
        int v12 = *(unsigned __int16 *)a2;
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Socket is now full on pipe 0x%04x - starting write source", buf, 8u);
      }
      sub_1002CC37C((void *)(v10 + 128), &v15);
      if (!*(void *)(v10 + 8)) {
        dispatch_resume(*(dispatch_object_t *)(v10 + 192));
      }
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_ERROR)) {
      sub_100752874();
    }
    if (qword_1009FB088 != -1) {
      dispatch_once(&qword_1009FB088, &stru_1009A2DA0);
    }
    uint64_t v9 = qword_1009FB080;
    sub_10004191C(buf, "Magnet");
    sub_10004191C(__p, "receivedDataFromStackDispatched");
    sub_1004B7DA8(0.0, v9, (uint64_t *)buf, (uint64_t *)__p);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0) {
      operator delete(*(void **)buf);
    }
  }
}

void sub_1002C98E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002C991C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6, unsigned int a7)
{
  if (*(unsigned char *)(a1 + 139)) {
    sub_1002CA204();
  }
  if (!*(void *)(a3 + 8))
  {
    if (a7)
    {
      uint64_t v15 = qword_100A19ED0;
      if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "WakeUpState=1. Waking up packet", buf, 2u);
      }
    }
    if (!*(void *)(a3 + 224))
    {
      size_t v38 = a5 - *(void *)(a3 + 176);
      sub_1002B7D94(22, 0);
      __int16 v39 = qword_100A19ED0;
      if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134218240;
        *(void *)&uint8_t buf[4] = a5;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = a2;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "Writing %zu bytes to pipe %#06x", buf, 0x12u);
      }
      ssize_t v40 = write(*(_DWORD *)(a3 + 200), (const void *)(a4 + *(void *)(a3 + 176)), v38);
      if (v40 == -1)
      {
        if (*__error() != 35 && os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_ERROR)) {
          sub_100752910();
        }
        return 0;
      }
      else
      {
        unint64_t v41 = *(void *)(a3 + 176) + v40;
        if (v41 >= a5)
        {
          *(void *)(a3 + 176) = 0;
          return 1;
        }
        else
        {
          uint64_t v42 = 0;
          *(void *)(a3 + 176) = v41;
        }
      }
      return v42;
    }
    int v48 = a6;
    long long v74 = 0u;
    long long v75 = 0u;
    memset(buf, 0, sizeof(buf));
    if (!*(void *)(a3 + 232))
    {
      uint64_t v16 = qword_100A19ED0;
      if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_FAULT)) {
        sub_100752AA0(v16, v17, v18, v19, v20, v21, v22, v23);
      }
    }
    uint64_t next_slot = os_channel_get_next_slot();
    uint64_t v25 = *(void *)(a3 + 176);
    uint64_t v71 = 0;
    uint64_t v72 = 0;
    unint64_t v44 = a5 - v25;
    if (a5 == v25) {
      goto LABEL_58;
    }
    uint64_t v26 = next_slot;
    if (next_slot)
    {
      uint64_t v46 = a1;
      uint64_t v47 = a4;
      unint64_t v27 = a5 - v25;
      __int16 v28 = v48;
      char v45 = a7;
      while (1)
      {
        uint64_t v29 = *(void *)(a3 + 176);
        ++*(_DWORD *)(a3 + 264);
        os_channel_slot_get_packet();
        if (!os_packet_get_next_buflet() && os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_FAULT)) {
          sub_100752A74(&v57, v58);
        }
        object_address = (void *)os_buflet_get_object_address();
        LOWORD(v71) = v28;
        BYTE2(v71) = a7;
        LOWORD(v72) = v28;
        os_packet_set_flow_uuid();
        __int16 v31 = *(_WORD *)&buf[2];
        if (v27 < *(unsigned __int16 *)&buf[2]) {
          __int16 v31 = v27;
        }
        *(_WORD *)&uint8_t buf[2] = v31;
        unsigned int data_limit = os_buflet_get_data_limit();
        LOWORD(v33) = data_limit;
        if (data_limit >= 0x10000 && os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_FAULT)) {
          sub_100752A48(&v55, v56);
        }
        if (v27 >= (unsigned __int16)v33) {
          size_t v33 = (unsigned __int16)v33;
        }
        else {
          size_t v33 = v27;
        }
        if ((unsigned __int16)os_buflet_set_data_length()
          && os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_FAULT))
        {
          sub_100752A1C(&v53, v54);
        }
        if ((unsigned __int16)os_packet_finalize() && os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_FAULT)) {
          sub_1007529F0(&v51, v52);
        }
        if (v33 != *(unsigned __int16 *)&buf[2]
          && os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_FAULT))
        {
          sub_1007529C4(&v49, v50);
        }
        memcpy(object_address, (const void *)(v47 + v29), v33);
        *(void *)(a3 + 176) = v33 + v29;
        os_channel_set_slot_properties();
        __int16 v28 = v48;
        if (*(unsigned char *)(v46 + 138))
        {
          uint64_t v34 = qword_100A19F08;
          if (os_log_type_enabled((os_log_t)qword_100A19F08, OS_LOG_TYPE_DEFAULT))
          {
            int v35 = byte_100A19F10++;
            *(_DWORD *)v59 = 67110400;
            int v60 = 20;
            __int16 v61 = 1024;
            int v62 = 60;
            __int16 v63 = 1024;
            int v64 = v48;
            __int16 v65 = 1024;
            int v66 = v48;
            __int16 v67 = 1024;
            int v68 = v33;
            __int16 v69 = 1024;
            int v70 = v35;
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "27 {curProtocol: %hhu, nextProtocol: %hhu, curSeqnStart: %hu, curSeqnEnd: %hu, curLen: %hu, logSeqn: %hhu}", v59, 0x26u);
          }
        }
        v27 -= v33;
        uint64_t v36 = os_channel_get_next_slot();
        if (!v27) {
          break;
        }
        uint64_t v37 = v26;
        uint64_t v26 = v36;
        LOBYTE(a7) = v45;
        if (!v36) {
          goto LABEL_49;
        }
      }
      os_channel_advance_slot();
LABEL_58:
      *(void *)(a3 + 176) = 0;
      uint64_t v42 = 1;
      goto LABEL_59;
    }
    uint64_t v37 = 0;
LABEL_49:
    if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_ERROR))
    {
      sub_100752990();
      if (!v37) {
        goto LABEL_52;
      }
    }
    else if (!v37)
    {
LABEL_52:
      uint64_t v42 = 0;
LABEL_59:
      __uint64_t v43 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
      if (sub_1002CA12C(a3, v43, v44) || !v42)
      {
        *(_DWORD *)(a3 + 264) = 0;
        *(void *)(a3 + 328) = v43;
        sub_1002C78E0(a3, 0);
        os_channel_sync();
      }
      else
      {
        sub_1002C78E0(a3, 1);
      }
      return v42;
    }
    os_channel_advance_slot();
    goto LABEL_52;
  }

  return sub_1002C9FF4(a1, 0, a3, a4, a5, 0, a7);
}

unsigned char *sub_1002C9F90()
{
  char v1 = 0;
  sub_10001B8E0(&v1);
  sub_1000E6518((uint64_t)sub_1002C90AC, 0);
  return sub_10001B8AC(&v1);
}

void sub_1002C9FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_1002C9FF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unsigned int a7)
{
  uint64_t v8 = *(void *)(a3 + 176);
  uint64_t v9 = *(void **)(a3 + 16);
  unint64_t v10 = a5 - v8;
  if (a5 == v8)
  {
LABEL_14:
    *(void *)(a3 + 176) = 0;
    uint64_t v17 = 1;
    goto LABEL_15;
  }
  uint64_t v13 = a7;
  unint64_t v14 = a5 - v8;
  do
  {
    ++*(_DWORD *)(a3 + 264);
    if (v14 >= a5) {
      unint64_t v15 = a5;
    }
    else {
      unint64_t v15 = v14;
    }
    uint64_t v21 = 0;
    if (!v9)
    {
      uint64_t v16 = 0;
LABEL_10:
      uint64_t v17 = 1;
      goto LABEL_11;
    }
    uint64_t v16 = v9[1];
    if (!v16) {
      goto LABEL_10;
    }
    uint64_t v17 = ((uint64_t (*)(void, uint64_t, unint64_t, void, uint64_t, void))v16)(*v9, a4 + v8, v15, &v21, v13, 0);
    uint64_t v16 = (uint64_t)v21;
LABEL_11:
    v8 += v16;
    *(void *)(a3 + 176) = v8;
    v14 -= v16;
  }
  while (v17 && v14);
  if (!v14) {
    goto LABEL_14;
  }
LABEL_15:
  __uint64_t v18 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
  if (sub_1002CA12C(a3, v18, v10) || !v17)
  {
    *(_DWORD *)(a3 + 264) = 0;
    *(void *)(a3 + 328) = v18;
    sub_1002C78E0(a3, 0);
    if (v9)
    {
      uint64_t v19 = (void (*)(void))v9[2];
      if (v19) {
        v19(*v9);
      }
    }
  }
  else
  {
    sub_1002C78E0(a3, 1);
  }
  return v17;
}

BOOL sub_1002CA12C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 276);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 304);
    if (v4) {
      BOOL v5 = *(void *)(a1 + 328) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (*(_DWORD *)(a1 + 368) == 3) {
      return 1;
    }
    a3 = (a3 - v3 + (v3 << *(_DWORD *)(a1 + 280))) >> *(_DWORD *)(a1 + 280);
  }
  else
  {
    if (*(_DWORD *)(a1 + 368) == 3) {
      return 1;
    }
    uint64_t v4 = *(void *)(a1 + 304);
    BOOL v5 = 1;
  }
  *(_DWORD *)(a1 + 276) = a3;
  uint64_t v6 = *(void *)(a1 + 288);
  *(void *)(a1 + 288) = a2;
  if (v4) {
    unint64_t v7 = (unint64_t)(a2 - v4 - v6 + (v4 << *(_DWORD *)(a1 + 312))) >> *(_DWORD *)(a1 + 312);
  }
  else {
    unint64_t v7 = *(void *)(a1 + 296);
  }
  *(void *)(a1 + 304) = v7;
  if (!v5
    && v7 <= *(void *)(a1 + 296)
    && *(_DWORD *)(a1 + 272) < a3
    && *(_DWORD *)(a1 + 264) < *(_DWORD *)(a1 + 256))
  {
    return (unint64_t)(a2 - *(void *)(a1 + 328)) > *(void *)(a1 + 320);
  }
  return 1;
}

void sub_1002CA204()
{
  __chkstk_darwin();
  int v1 = v0;
  int v3 = v2;
  int v29 = v4;
  unint64_t v6 = v5;
  uint64_t v8 = v7;
  bzero(v35, 0x3E9FuLL);
  uint64_t v9 = "ToSocket:";
  if (!v3) {
    uint64_t v9 = "ToStack:";
  }
  __int16 v28 = v9;
  unint64_t v10 = (os_log_t *)&qword_100A19ED0;
  if (v6 <= 4 && v3 == 1)
  {
    if (v1)
    {
      uint64_t v11 = qword_100A19ED0;
      if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_ERROR)) {
        sub_100752B18(v6, v11, v12, v13, v14, v15, v16, v17);
      }
    }
  }
  char v34 = 0;
  int v27 = v6;
  if (v6)
  {
    unsigned int v18 = 0;
    uint64_t v19 = v6 - 1;
    if (v6 - 1 >= 0x3E9F) {
      uint64_t v19 = 16031;
    }
    uint64_t v20 = v19 + 1;
    unsigned int v21 = -1;
    int v22 = 449;
    do
    {
      sprintf(&v34, "%s%02x", &v34, *v8);
      if (v1) {
        unsigned int v21 = dword_1007BB840[(*v8 ^ v21)] ^ (v21 >> 8);
      }
      if (!(v22 + 450 * (v18 / 0x1C2)))
      {
        uint64_t v23 = v10;
        __int16 v24 = *v10;
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)__int16 v31 = v29;
          *(_WORD *)&v31[4] = 2080;
          *(void *)&v31[6] = v28;
          __int16 v32 = 2080;
          size_t v33 = &v34;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "SkwData:%05u:=%s %s ", buf, 0x1Cu);
        }
        char v34 = 0;
        unint64_t v10 = v23;
      }
      ++v8;
      --v22;
      ++v18;
      --v20;
    }
    while (v20);
  }
  else
  {
    unsigned int v21 = -1;
  }
  uint64_t v25 = *v10;
  if (os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)__int16 v31 = v29;
    *(_WORD *)&v31[4] = 2080;
    *(void *)&v31[6] = v28;
    __int16 v32 = 2080;
    size_t v33 = &v34;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "SkwData:%05u:=%s %s ", buf, 0x1Cu);
    uint64_t v25 = *v10;
  }
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)__int16 v31 = v27;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Got packet: size=%u  ", buf, 8u);
  }
  if (v1)
  {
    uint64_t v26 = *v10;
    if (os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)__int16 v31 = v28;
      *(_WORD *)&v31[8] = 1024;
      *(_DWORD *)&v31[10] = v29;
      __int16 v32 = 1024;
      LODWORD(v33) = v21;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "%s:Seq=%02u CRC value:0x%08x  ", buf, 0x18u);
    }
  }
}

void sub_1002CA550(void *context)
{
}

void sub_1002CA578(unsigned __int16 a1)
{
}

void sub_1002CA58C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    goto LABEL_27;
  }
  uint64_t v5 = a1 + 24;
  do
  {
    unsigned int v6 = *(unsigned __int16 *)(v3 + 32);
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      uint64_t v8 = (uint64_t *)v3;
    }
    else {
      uint64_t v8 = (uint64_t *)(v3 + 8);
    }
    if (v7) {
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 24 && *(unsigned __int16 *)(v5 + 32) <= a2)
  {
    uint64_t v9 = *(void *)(v5 + 40);
    unint64_t v10 = qword_100A19ED0;
    if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Stack is ready for more data", buf, 2u);
    }
    if (*(void *)(v9 + 8))
    {
      uint64_t v11 = *(void *)(v9 + 24);
      if (v11)
      {
        uint64_t v12 = *(void (**)(void))(v11 + 16);
        if (v12) {
          v12(*(void *)(v11 + 24));
        }
      }
    }
    else if (sub_1002CA700(a1, a2, v9))
    {
      uint64_t v13 = qword_100A19ED0;
      if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v14 = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Starting the read source for the pipe", v14, 2u);
      }
      sub_1002CB9FC(v9, 0);
    }
  }
  else
  {
LABEL_27:
    if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_ERROR)) {
      sub_100752B84();
    }
  }
}

uint64_t sub_1002CA700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  bzero(v93, 0xA0AuLL);
  uint64_t v5 = *(void *)(a3 + 224);
  unsigned int v71 = 0;
  unsigned int v61 = a2;
  if (!v5)
  {
    while (1)
    {
      *(void *)buf = v93;
      LODWORD(v87) = 2570;
      int v34 = *(_DWORD *)(a3 + 372);
      if (v34 == 2) {
        break;
      }
      if (v34 == 1)
      {
        if (*(unsigned __int16 *)(a3 + 376) >= 0xA0Au) {
          int v43 = 2570;
        }
        else {
          int v43 = *(unsigned __int16 *)(a3 + 376);
        }
        LODWORD(v87) = v43;
        uint64_t v44 = qword_100A19ED0;
        if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_DEFAULT))
        {
          int v45 = *(_DWORD *)(a3 + 364);
          LODWORD(v89) = 67109376;
          DWORD1(v89) = v43;
          WORD4(v89) = 1024;
          *(_DWORD *)((char *)&v89 + 10) = v45;
          unint64_t v41 = v44;
          uint64_t v42 = "MAX buffer size for the L2CAP Channel is %d getWriteBufferUsed=%d";
LABEL_74:
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, v42, (uint8_t *)&v89, 0xEu);
        }
        goto LABEL_75;
      }
      if (v34)
      {
        BOOL v36 = 0;
        int v35 = 0;
      }
      else
      {
        char v69 = 0;
        sub_10001B8E0(&v69);
        int v35 = sub_100171DE8(*(void *)(a3 + 112), buf, (int *)&v87);
        sub_10001B910(&v69);
        BOOL v36 = v35 == 0;
        if (v35)
        {
          uint64_t v37 = qword_100A19ED0;
          if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_ERROR))
          {
            LODWORD(v89) = 67109632;
            DWORD1(v89) = a2;
            WORD4(v89) = 1024;
            *(_DWORD *)((char *)&v89 + 10) = v35;
            HIWORD(v89) = 1024;
            LODWORD(v90) = v87;
            _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "Failed to get a buffer from the stack for pipe 0x%04x with result %{bluetooth:OI_STATUS}u, default size %d", (uint8_t *)&v89, 0x14u);
          }
        }
        sub_10001B8AC(&v69);
      }
LABEL_77:
      ssize_t v46 = read(*(_DWORD *)(a3 + 200), *(void **)buf, v87);
      unsigned __int16 v47 = v46;
      if (v46 < 1)
      {
        if (v46)
        {
          if (*__error() == 35)
          {
            if (v36)
            {
              LOBYTE(v89) = 0;
              sub_10001B8E0(&v89);
              sub_100171E30(*(void **)buf);
              sub_10001B910(&v89);
              sub_10001B8AC(&v89);
            }
            return 1;
          }
          if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_ERROR)) {
            sub_100752C5C();
          }
        }
        else
        {
          int v52 = qword_100A19ED0;
          if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_ERROR)) {
            sub_100752BF0(a2, v52, v53, v54, v55, v56, v57, v58);
          }
        }
        if (v36)
        {
          LOBYTE(v89) = 0;
          sub_10001B8E0(&v89);
          sub_100171E30(*(void **)buf);
          sub_10001B910(&v89);
          sub_10001B8AC(&v89);
        }
        return 0;
      }
      if (*(unsigned char *)(a1 + 139))
      {
        sub_1001F16B4(a2);
        sub_1002CA204();
      }
      char v69 = 0;
      sub_10001B8E0(&v69);
      int v48 = *(_DWORD *)(a3 + 372);
      if (v48 == 2)
      {
        int v49 = sub_1002460B0((uint64_t)sub_1002CA550, a2, *(char **)buf, v47);
      }
      else if (v48 == 1)
      {
        int v49 = sub_1001DE4D0((uint64_t)sub_1002CA550, a2, 0, *(char **)buf, v47);
      }
      else
      {
        if (v48) {
          goto LABEL_87;
        }
        int v49 = sub_1000E8FC8((uint64_t)sub_1002CA550, *(void *)(a3 + 112), a2, *(char **)buf, v47, v36);
      }
      int v35 = v49;
LABEL_87:
      sub_10001B910(&v69);
      if (v35)
      {
        if (v35 != 412)
        {
          char v50 = qword_100A19ED0;
          if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_ERROR))
          {
            LODWORD(v89) = 67109376;
            DWORD1(v89) = a2;
            WORD4(v89) = 1024;
            *(_DWORD *)((char *)&v89 + 10) = v35;
            _os_log_error_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_ERROR, "Failed to transmit data from socket on pipe 0x%04x with result %{bluetooth:OI_STATUS}u", (uint8_t *)&v89, 0xEu);
          }
        }
      }
      sub_10001B8AC(&v69);
      if (v35 != 412) {
        return 0;
      }
    }
    if (*(unsigned __int16 *)(a3 + 376) >= 0xA0Au) {
      int v38 = 2570;
    }
    else {
      int v38 = *(unsigned __int16 *)(a3 + 376);
    }
    LODWORD(v87) = v38;
    uint64_t v39 = qword_100A19ED0;
    if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_DEFAULT))
    {
      int v40 = *(_DWORD *)(a3 + 364);
      LODWORD(v89) = 67109376;
      DWORD1(v89) = v38;
      WORD4(v89) = 1024;
      *(_DWORD *)((char *)&v89 + 10) = v40;
      unint64_t v41 = v39;
      uint64_t v42 = "MAX buffer size for the RFCOMM Channel is %d getWriteBufferUsed=%d";
      goto LABEL_74;
    }
LABEL_75:
    BOOL v36 = 0;
    int v35 = 0;
    a2 = v61;
    goto LABEL_77;
  }
  if (!*(void *)(a3 + 240))
  {
    unsigned int v6 = qword_100A19ED0;
    if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_FAULT)) {
      sub_100752D74(v6, v7, v8, v9, v10, v11, v12, v13);
    }
  }
  long long v91 = 0u;
  long long v92 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  uint64_t next_slot = os_channel_get_next_slot();
  uint64_t v15 = 0;
  __int16 v60 = 0;
  unsigned __int16 v62 = 0;
  size_t v87 = 0;
  uint64_t v88 = 0;
  while (1)
  {
    if (*(_DWORD *)(a3 + 372) && os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_FAULT)) {
      sub_100752D48(&v69, v70);
    }
    if (next_slot)
    {
      int v16 = 0;
      while (1)
      {
        uint64_t v17 = next_slot;
        int v18 = *(_DWORD *)(a3 + 364);
        if (*(_DWORD *)(a3 + 360) - v18 < WORD1(v89)) {
          goto LABEL_37;
        }
        if (v18) {
          BOOL v19 = *(_DWORD *)(a3 + 368) == 3;
        }
        else {
          BOOL v19 = 0;
        }
        if (v19)
        {
          uint64_t v25 = next_slot;
          goto LABEL_36;
        }
        os_channel_slot_get_packet();
        if (!os_packet_get_next_buflet() && os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_FAULT)) {
          sub_100752D1C(&v67, v68);
        }
        unsigned int data_offset = os_buflet_get_data_offset();
        uint64_t object_address = os_buflet_get_object_address();
        unsigned int data_length = os_buflet_get_data_length();
        os_packet_get_flow_uuid();
        unsigned int v23 = WORD1(v89);
        if (*(_DWORD *)(a3 + 368) == 3
          && WORD1(v89) >= 0x2A4u
          && (__int16 v24 = qword_100A19ED0, os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_FAULT)))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v23;
          _os_log_fault_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "Payload length %d exceeds supported MTU for isoch channel", buf, 8u);
          unsigned int v23 = WORD1(v89);
          if (data_length)
          {
LABEL_26:
            if (data_length)
            {
              sub_1002CB274(a3, (const void *)(object_address + data_offset), data_length);
            }
            else if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_ERROR))
            {
              sub_100752CE4(&v65, v66);
            }
            goto LABEL_30;
          }
        }
        else if (data_length)
        {
          goto LABEL_26;
        }
        if (!v23) {
          goto LABEL_26;
        }
        sub_1002CB274(a3, (const void *)v90, v23);
LABEL_30:
        if (!v16) {
          int v16 = (unsigned __int16)v88;
        }
        uint64_t next_slot = os_channel_get_next_slot();
        uint64_t v15 = v17;
        if (!next_slot)
        {
          uint64_t v25 = 0;
          uint64_t v15 = v17;
          goto LABEL_36;
        }
      }
    }
    uint64_t v25 = 0;
    int v16 = 0;
LABEL_36:
    int v18 = *(_DWORD *)(a3 + 364);
    uint64_t v17 = v25;
LABEL_37:
    BOOL v26 = v18 == 0;
    if (!v18) {
      goto LABEL_96;
    }
    char v64 = 0;
    sub_10001B8E0(&v64);
    int v27 = sub_100171CD8(*(void *)(a3 + 112), (int *)&v71);
    if (v27 && v27 != 5007) {
      unsigned int v71 = 1015;
    }
    unsigned int v28 = *(_DWORD *)(a3 + 364);
    if (v71 >= v28) {
      unint64_t v29 = v28;
    }
    else {
      unint64_t v29 = v71;
    }
    if (!*(unsigned char *)(a3 + 378)) {
      unsigned __int16 v62 = sub_1001F16B4(a2);
    }
    if (*(unsigned char *)(a1 + 139)) {
      sub_1002CA204();
    }
    int v30 = sub_1000E8FC8((uint64_t)sub_1002CA550, *(void *)(a3 + 112), a2, *(char **)(a3 + 352), (unsigned __int16)v29, 0);
    if (!*(unsigned char *)(a3 + 378)) {
      __int16 v60 = sub_1001F16B4(a2);
    }
    sub_10001B910(&v64);
    if (*(unsigned char *)(a1 + 138))
    {
      int v31 = (unsigned __int16)v88;
      __int16 v32 = qword_100A19F08;
      if (os_log_type_enabled((os_log_t)qword_100A19F08, OS_LOG_TYPE_DEFAULT))
      {
        int v33 = byte_100A19F10++;
        *(_DWORD *)buf = 67110912;
        *(_DWORD *)&uint8_t buf[4] = 20;
        __int16 v73 = 1024;
        int v74 = 60;
        __int16 v75 = 1024;
        int v76 = v16;
        __int16 v77 = 1024;
        int v78 = v31;
        __int16 v79 = 1024;
        int v80 = (unsigned __int16)v29;
        __int16 v81 = 1024;
        int v82 = v62;
        __int16 v83 = 1024;
        int v84 = (unsigned __int16)(v60 - 1);
        __int16 v85 = 1024;
        int v86 = v33;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "28 {curProtocol: %hhu, prevProtocol: %hhu, prevSeqnStart: %hu, prevSeqnEnd: %hu, prevLen: %hu, curSeqNStart: %hu, curSeqnEnd:%hu, logSeqn: %hhu}", buf, 0x32u);
      }
    }
    ++*(_DWORD *)(a3 + 268);
    if (v30 != 412) {
      break;
    }
    sub_1002CB3D0(a3, v29);
    a2 = v61;
    sub_10001B8AC(&v64);
    uint64_t next_slot = v17;
  }
  if (v30)
  {
    char v51 = qword_100A19ED0;
    if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v61;
      __int16 v73 = 1024;
      int v74 = v30;
      _os_log_error_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_ERROR, "Failed to transmit data from socket on pipe 0x%04x with result %{bluetooth:OI_STATUS}u", buf, 0xEu);
    }
  }
  else
  {
    sub_1002CB3D0(a3, v29);
  }
  sub_10001B8AC(&v64);
LABEL_96:
  if (v15) {
    os_channel_advance_slot();
  }
  if (*(_DWORD *)(a3 + 368) == 3
    || *(_DWORD *)(a3 + 268) >= *(_DWORD *)(a3 + 260)
    || os_channel_available_slot_count() <= 1)
  {
    *(_DWORD *)(a3 + 268) = 0;
    os_channel_sync();
  }
  return v26;
}

void sub_1002CB0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
}

BOOL sub_1002CB118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t *a6)
{
  *a6 = 0;
  while (1)
  {
    unsigned int v17 = 0;
    char v16 = 0;
    sub_10001B8E0(&v16);
    int v11 = sub_100171CD8(*(void *)(a3 + 112), (int *)&v17);
    if (v11) {
      BOOL v12 = v11 == 5007;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12) {
      unsigned int v17 = 1015;
    }
    unsigned int v13 = v17 >= a5 - *a6 ? a5 - *a6 : v17;
    int v14 = sub_1000E8FC8((uint64_t)sub_1002CA550, *(void *)(a3 + 112), a2, (char *)(a4 + *a6), (unsigned __int16)v13, 0);
    sub_10001B910(&v16);
    *a6 += v13;
    if (v14 != 412) {
      break;
    }
    sub_10001B8AC(&v16);
    if (*a6 >= a5) {
      return v14 == 412;
    }
  }
  if (v14 && os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_ERROR)) {
    sub_100752DEC();
  }
  sub_10001B8AC(&v16);
  return v14 == 412;
}

void sub_1002CB260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int16 a10, char a11, char a12)
{
}

void *sub_1002CB274(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 364);
  if (v3 + a3 > *(unsigned int *)(a1 + 360))
  {
    uint64_t v7 = sub_100017768();
    sub_1005C99DC(v7, 1);
    _os_log_pack_size();
    __chkstk_darwin();
    __error();
    uint64_t v8 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v8 = 136446210;
    *(void *)(v8 + 4) = "fWriteBufferUsed + length <= fWriteBufferSize";
    os_log_create("com.apple.bluetooth", "CBCrash");
    qword_1009FC078 = os_log_pack_send_and_compose();
    abort_with_payload();
  }
  int v4 = a3;
  uint64_t result = memcpy((void *)(*(void *)(a1 + 352) + v3), a2, a3);
  *(_DWORD *)(a1 + 364) += v4;
  return result;
}

void *sub_1002CB3D0(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 364);
  if (v2 < a2)
  {
    uint64_t v6 = sub_100017768();
    sub_1005C99DC(v6, 1);
    _os_log_pack_size();
    __chkstk_darwin();
    __error();
    uint64_t v7 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v7 = 136446210;
    *(void *)(v7 + 4) = "fWriteBufferUsed >= length";
    os_log_create("com.apple.bluetooth", "CBCrash");
    qword_1009FC078 = os_log_pack_send_and_compose();
    abort_with_payload();
  }
  int v3 = a2;
  uint64_t result = memmove(*(void **)(a1 + 352), (const void *)(*(void *)(a1 + 352) + a2), v2 - a2);
  *(_DWORD *)(a1 + 364) -= v3;
  return result;
}

void sub_1002CB524(uint64_t a1)
{
  int v1 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002CB598;
  block[3] = &unk_100997528;
  void block[4] = a1;
  dispatch_sync(v1, block);
}

unsigned char *sub_1002CB598(unsigned char *result)
{
  uint64_t v1 = *((void *)result + 4);
  if (*(unsigned char *)(v1 + 136))
  {
    *(unsigned char *)(v1 + 136) = 0;
    if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_ERROR)) {
      sub_100752E6C();
    }
    char v2 = 0;
    sub_10001B8E0(&v2);
    return sub_10001B8AC(&v2);
  }
  return result;
}

uint64_t sub_1002CB60C(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  *(_OWORD *)(a1 + 128) = 0u;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)(a1 + 112) = a3;
  *(unsigned char *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = a5;
  *(void *)(a1 + 192) = a6;
  *(_DWORD *)(a1 + 200) = a4;
  *(_DWORD *)(a1 + 204) = a7;
  uuid_clear((unsigned __int8 *)(a1 + 208));
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 368) = a8;
  *(_DWORD *)(a1 + 372) = a2;
  *(unsigned char *)(a1 + 378) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  uuid_clear((unsigned __int8 *)(a1 + 400));
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  return a1;
}

void sub_1002CB6A0(_Unwind_Exception *a1)
{
  sub_1002B5410(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002CB6B8(uint64_t a1, int a2, uint64_t a3, unsigned __int8 *src, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, int a12, char a13)
{
  *(unsigned char *)a1 = a13;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 112) = a3;
  *(unsigned char *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = a7;
  *(void *)(a1 + 192) = a8;
  *(_DWORD *)(a1 + 200) = a6;
  *(_DWORD *)(a1 + 204) = a6;
  uuid_copy((unsigned __int8 *)(a1 + 208), src);
  *(void *)(a1 + 224) = a5;
  *(_DWORD *)(a1 + 248) = a10;
  *(_DWORD *)(a1 + 252) = a11;
  *(void *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 276) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = a9;
  *(unsigned char *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 368) = a12;
  *(_DWORD *)(a1 + 372) = a2;
  *(unsigned char *)(a1 + 378) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  uuid_clear((unsigned __int8 *)(a1 + 400));
  if (*(_DWORD *)(a1 + 368) == 3) {
    size_t v16 = 675;
  }
  else {
    size_t v16 = 4096;
  }
  dispatch_set_context(*(dispatch_object_t *)(a1 + 336), (void *)a1);
  if (a5)
  {
    os_channel_ring_id();
    *(void *)(a1 + 232) = os_channel_tx_ring();
    os_channel_ring_id();
    *(void *)(a1 + 240) = os_channel_rx_ring();
  }
  *(uint32x2_t *)(a1 + 256) = vshr_n_u32(*(uint32x2_t *)(a1 + 248), 1uLL);
  *(void *)(a1 + 320) = 250000000;
  *(_DWORD *)(a1 + 272) = 2496;
  *(void *)(a1 + 296) = 20000000;
  *(_DWORD *)(a1 + 280) = 2;
  *(_DWORD *)(a1 + 312) = 2;
  *(void *)(a1 + 352) = malloc_type_malloc(v16, 0x9FDFA2DuLL);
  *(_DWORD *)(a1 + 360) = v16;
  *(_DWORD *)(a1 + 364) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(unsigned char *)(a1 + 108) = 1;
  *(void *)(a1 + 8) = 0;
  return a1;
}

void sub_1002CB83C(_Unwind_Exception *a1)
{
  sub_1002B5410(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002CB858(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    NRBluetoothPacketParserResetContext();
    *(void *)(a1 + 8) = 0;
  }
  char v2 = *(NSObject **)(a1 + 184);
  if (v2)
  {
    dispatch_source_cancel(v2);
    if (*(unsigned char *)(a1 + 120)) {
      dispatch_resume(*(dispatch_object_t *)(a1 + 184));
    }
    dispatch_release(*(dispatch_object_t *)(a1 + 184));
  }
  int v3 = *(NSObject **)(a1 + 192);
  if (v3)
  {
    dispatch_source_cancel(v3);
    if (!*(void *)(a1 + 168)) {
      dispatch_resume(*(dispatch_object_t *)(a1 + 192));
    }
    dispatch_release(*(dispatch_object_t *)(a1 + 192));
  }
  int v4 = *(NSObject **)(a1 + 336);
  if (v4)
  {
    dispatch_set_context(v4, 0);
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 336));
    if (!*(unsigned char *)(a1 + 344))
    {
      *(unsigned char *)(a1 + 344) = 1;
      dispatch_resume(*(dispatch_object_t *)(a1 + 336));
    }
    dispatch_release(*(dispatch_object_t *)(a1 + 336));
    *(unsigned char *)(a1 + 344) = 0;
    *(void *)(a1 + 336) = 0;
  }
  if (*(void *)(a1 + 224))
  {
    *(_OWORD *)(a1 + 268) = 0u;
    *(_OWORD *)(a1 + 240) = 0u;
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 224) = 0u;
    *(void *)(a1 + 296) = 0;
    *(void *)(a1 + 304) = 0;
    *(void *)(a1 + 288) = 0;
    *(_DWORD *)(a1 + 312) = 0;
    *(void *)(a1 + 320) = 0;
    *(void *)(a1 + 328) = 0;
  }
  else
  {
    int v5 = *(_DWORD *)(a1 + 204);
    if (v5 != -1)
    {
      close(v5);
      *(_DWORD *)(a1 + 204) = -1;
    }
  }
  while (*(void *)(a1 + 168))
  {
    free(*(void **)(*(void *)(*(void *)(a1 + 136) + ((*(void *)(a1 + 160) >> 6) & 0x3FFFFFFFFFFFFF8))
                  + 8 * (*(void *)(a1 + 160) & 0x1FFLL)));
    *(int64x2_t *)(a1 + 160) = vaddq_s64(*(int64x2_t *)(a1 + 160), (int64x2_t)xmmword_1007BB7F0);
    sub_1002CBC00(a1 + 128, 1);
  }
  uint64_t v6 = *(void **)(a1 + 352);
  if (v6)
  {
    free(v6);
    *(void *)(a1 + 352) = 0;
  }
  sub_1002B5410((void *)(a1 + 128));
  return a1;
}

void sub_1002CB9E4(_Unwind_Exception *a1)
{
  sub_1002B5410((void *)(v1 + 128));
  _Unwind_Resume(a1);
}

void sub_1002CB9FC(uint64_t a1, int a2)
{
  char v2 = a2;
  if (*(unsigned __int8 *)(a1 + 120) == a2)
  {
    int v4 = qword_100A19ED0;
    if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_FAULT)) {
      sub_100752EA0(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }
  *(unsigned char *)(a1 + 120) = v2;
  if (v2)
  {
    BOOL v12 = qword_100A19ED0;
    if (os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)unsigned int v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Read Source Suspend", v21, 2u);
    }
    dispatch_suspend(*(dispatch_object_t *)(a1 + 184));
    *(void *)unsigned int v21 = 0;
    sub_100026C30((uint64_t)v21);
    uint64_t v13 = *(__int16 *)&v21[4];
    *(void *)(a1 + 384) = *(int *)v21;
    *(void *)(a1 + 392) = v13;
  }
  else
  {
    *(void *)unsigned int v21 = 0;
    sub_100026C30((uint64_t)v21);
    unint64_t v14 = 1000 * (*(int *)v21 - *(void *)(a1 + 384)) - *(void *)(a1 + 392) + *(__int16 *)&v21[4];
    unint64_t v15 = v14 >> 3;
    unint64_t v16 = v14 / 0x3E8;
    unint64_t v17 = v14 % 0x3E8;
    dispatch_resume(*(dispatch_object_t *)(a1 + 184));
    uint64_t v18 = qword_100A19ED0;
    if (v15 < 0x271)
    {
      if (!os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_INFO)) {
        return;
      }
      *(_DWORD *)unsigned int v21 = 134218240;
      *(void *)&v21[4] = v16;
      __int16 v22 = 2048;
      unint64_t v23 = v17;
      BOOL v19 = v18;
      os_log_type_t v20 = OS_LOG_TYPE_INFO;
    }
    else
    {
      if (!os_log_type_enabled((os_log_t)qword_100A19ED0, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      *(_DWORD *)unsigned int v21 = 134218240;
      *(void *)&v21[4] = v16;
      __int16 v22 = 2048;
      unint64_t v23 = v17;
      BOOL v19 = v18;
      os_log_type_t v20 = OS_LOG_TYPE_DEFAULT;
    }
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Read Source Resume.  Suspended for %lld.%03lld seconds", v21, 0x16u);
  }
}

uint64_t sub_1002CBC00(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x200) {
    a2 = 1;
  }
  if (v2 < 0x400) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 512;
  }
  return v4 ^ 1u;
}

void sub_1002CBC60(id a1)
{
}

void sub_1002CBCA4()
{
}

void sub_1002CBCC8(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1002CBCC8(a1, *a2);
    sub_1002CBCC8(a1, a2[1]);
    sub_1000486F0((uint64_t)(a2 + 5), (void *)a2[6]);
    operator delete(a2);
  }
}

uint64_t **sub_1002CBD28(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((unsigned __int16 *)v6 + 16);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x30uLL);
    v11[16] = **a4;
    *((void *)v11 + 5) = 0;
    sub_100036CA0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **sub_1002CBDEC(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x28uLL);
    v11[7] = **a4;
    *((_WORD *)v11 + 16) = 0;
    sub_100036CA0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t *sub_1002CBEB0(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t v9 = 0;
  uint64_t v6 = (uint64_t **)sub_10004A0BC((uint64_t)a1, &v9, uu1);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1002CBF54((uint64_t)a1, a4, v8);
    sub_100036CA0(a1, v9, v6, (uint64_t *)v8[0]);
    return (uint64_t *)v8[0];
  }
  return result;
}

void sub_1002CBF54(uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  uint64_t v5 = (unsigned __int8 *)(a1 + 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = (unsigned __int8 *)operator new(0x40uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uuid_copy(v6 + 32, *a2);
  *((void *)v6 + 6) = 0;
  *((_WORD *)v6 + 28) = 0;
  *((unsigned char *)a3 + 16) = 1;
}

void sub_1002CBFBC(_Unwind_Exception *a1)
{
  void *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1002CBFD4(id a1)
{
}

void sub_1002CC164()
{
}

uint64_t sub_1002CC188(uint64_t a1, int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    int v5 = *(_DWORD *)(v2 + 28);
    BOOL v6 = v5 < v3;
    if (v5 >= v3) {
      uint64_t v7 = (uint64_t *)v2;
    }
    else {
      uint64_t v7 = (uint64_t *)(v2 + 8);
    }
    if (!v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 28)) {
    return 0;
  }
  sub_10004D3B8((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

uint64_t *sub_1002CC204(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = a1 + 1;
  BOOL v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        BOOL v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      BOOL v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (uint64_t *)operator new(0x40uLL);
    uint64_t v12 = **a4;
    v11[7] = 0;
    v11[6] = 0;
    void v11[4] = v12;
    v11[5] = (uint64_t)(v11 + 6);
    sub_100036CA0(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void sub_1002CC2D0(id a1)
{
}

void sub_1002CC314()
{
}

void sub_1002CC338(id a1)
{
}

void sub_1002CC37C(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1002CC404(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_1002CC404(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)sub_1000405F8(v5, v33);
      int v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      int v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    BOOL v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_1002B4FA4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1002B50BC((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)sub_1000405F8((uint64_t)(a1 + 3), v46);
      int v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        char v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)char v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      int v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000405F8((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  sub_1002B51DC(&v54, &v53);
  int v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002B52F4((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1002CC6D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1002CC734(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xEu);
}

uint64_t sub_1002CC780(uint64_t a1, char *a2)
{
  uint64_t v3 = sub_1002B81E0(a1, a2, 1);
  *(void *)uint64_t v3 = off_1009A2DE8;
  *(unsigned char *)(v3 + 96) = 0;
  mach_timebase_info((mach_timebase_info_t)(v3 + 100));
  unint64_t v4 = 20000000 * (unint64_t)*(unsigned int *)(a1 + 104) / *(unsigned int *)(a1 + 100);
  *(void *)(a1 + 112) = v4;
  *(void *)(a1 + 120) = v4;
  return a1;
}

void sub_1002CC7EC(_Unwind_Exception *a1)
{
  sub_1002B8240(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_1002CC80C(uint64_t a1, uint64_t a2)
{
  return (unint64_t)*(unsigned int *)(a1 + 100) * a2 / *(unsigned int *)(a1 + 104) / 0xF4240;
}

void sub_1002CC834(uint64_t a1)
{
  unint64_t v2 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "AudioSendThread starting", buf, 2u);
  }
  sub_1002B833C(a1, 63);
  (*(void (**)(uint64_t))(*(void *)a1 + 80))(a1);
  char v12 = 0;
  uint64_t v3 = sub_100017768();
  sub_10004191C(buf, "A2DP");
  sub_10004191C(__p, "DisableDiagnosingLoop");
  int v4 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v3 + 72))(v3, buf, __p, &v12);
  if (v12) {
    int v5 = v4;
  }
  else {
    int v5 = 0;
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0)
  {
    operator delete(*(void **)buf);
    if (!v5) {
      goto LABEL_14;
    }
  }
  else if (!v5)
  {
    goto LABEL_14;
  }
  uint64_t v6 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "DiagnosingAudioLoop for A2DP disabled by defaults write -  No AudioSendThread overwait / overrun reporting", buf, 2u);
  }
LABEL_14:
  sub_1002CCA2C(a1, 1);
  uint64_t v7 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "AudioSendThread stopping", buf, 2u);
  }
}

void sub_1002CC9F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002CCA2C(uint64_t a1, int a2)
{
  uint64_t v4 = mach_absolute_time();
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (result)
  {
    do
    {
      if (a2 && !*(unsigned char *)(a1 + 96))
      {
        uint64_t v6 = mach_absolute_time();
        if (v6 >= *(void *)(a1 + 112) + v4)
        {
          char v12 = qword_100A19E48;
          uint64_t v13 = v6 - v4;
          if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR))
          {
            unint64_t v15 = v13 * *(unsigned int *)(a1 + 100) / *(unsigned int *)(a1 + 104) / 0xF4240;
            *(_DWORD *)buf = 67109120;
            int v17 = v15;
            _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "AudioSendThread overrun (%u ms)", buf, 8u);
          }
          kdebug_trace();
        }
      }
      else
      {
        uint64_t v6 = v4;
      }
      uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
      if (a2)
      {
        uint64_t v8 = v7;
        uint64_t v9 = mach_absolute_time();
        uint64_t v4 = v9;
        if (*(unsigned char *)(a1 + 96)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 56))(a1, (v9 - v6) * *(unsigned int *)(a1 + 100) / *(unsigned int *)(a1 + 104) / 0xF4240);
        }
        if (v4 >= v8 + v6 + *(void *)(a1 + 120))
        {
          uint64_t v10 = qword_100A19E48;
          uint64_t v11 = v4 - v6;
          if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR))
          {
            unint64_t v14 = v11 * *(unsigned int *)(a1 + 100) / *(unsigned int *)(a1 + 104) / 0xF4240;
            *(_DWORD *)buf = 67109120;
            int v17 = v14;
            _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "AudioSendThread overwait (%u ms)", buf, 8u);
          }
          kdebug_trace();
        }
      }
      else
      {
        uint64_t v4 = v6;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
    }
    while ((result & 1) != 0);
  }
  return result;
}

uint64_t sub_1002CCCF8(uint64_t a1, char *a2)
{
  uint64_t result = sub_1002CC780(a1, a2);
  *(void *)uint64_t result = off_1009A2E60;
  *(unsigned char *)(result + 144) = 0;
  return result;
}

BOOL sub_1002CCD30(uint64_t a1)
{
  *(void *)(a1 + 128) = mach_absolute_time();
  unint64_t v2 = 1000
     * (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1)
     * (unint64_t)*(unsigned int *)(a1 + 104)
     / *(unsigned int *)(a1 + 100);
  *(void *)(a1 + 136) = v2;
  *(unsigned char *)(a1 + 144) = 1;
  if (HIDWORD(v2))
  {
    uint64_t v3 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_FAULT))
    {
      int v5 = 136446210;
      uint64_t v6 = "fAudioInterval <= UINT32_MAX";
      _os_log_fault_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", (uint8_t *)&v5, 0xCu);
      unint64_t v2 = *(void *)(a1 + 136);
    }
  }
  return sub_1002B8334(a1, v2, v2 >> 2, v2 >> 2, 0);
}

uint64_t sub_1002CCE5C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 128) + *(void *)(a1 + 136);
  *(void *)(a1 + 128) = v2;
  mach_wait_until(v2);
  return *(void *)(a1 + 136);
}

uint64_t sub_1002CCE90(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 144);
}

void sub_1002CCE98(uint64_t a1, char a2)
{
  uint64_t v4 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "setThreadStarted", v5, 2u);
  }
  *(unsigned char *)(a1 + 144) = a2;
}

uint64_t sub_1002CCF14(uint64_t a1, char *a2, int a3)
{
  uint64_t v5 = sub_1002CC780(a1, a2);
  *(void *)uint64_t v5 = off_1009A2ED8;
  *(unsigned char *)(v5 + 144) = 0;
  *(unsigned char *)(v5 + 168) = a3;
  if (a3) {
    *(void *)(a1 + 152) = dispatch_semaphore_create(0);
  }
  return a1;
}

uint64_t sub_1002CCF74(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 168);
}

uint64_t sub_1002CCF7C(uint64_t a1)
{
  *(void *)a1 = off_1009A2ED8;
  if (*(unsigned char *)(a1 + 168)) {
    dispatch_release(*(dispatch_object_t *)(a1 + 152));
  }

  return sub_1002B8240(a1);
}

uint64_t sub_1002CCFE4(uint64_t a1)
{
  *(void *)(a1 + 128) = mach_absolute_time();
  unint64_t v2 = 1000
     * (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1)
     * (unint64_t)*(unsigned int *)(a1 + 104)
     / *(unsigned int *)(a1 + 100);
  *(void *)(a1 + 136) = v2;
  *(unsigned char *)(a1 + 144) = 1;
  if (HIDWORD(v2))
  {
    uint64_t v3 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_FAULT))
    {
      int v5 = 136446210;
      uint64_t v6 = "fAudioInterval <= UINT32_MAX";
      _os_log_fault_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", (uint8_t *)&v5, 0xCu);
      unint64_t v2 = *(void *)(a1 + 136);
    }
  }
  sub_1002B8334(a1, v2, v2 >> 2, v2 >> 2, 0);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  *(void *)(a1 + 160) = 1000 * result * (unint64_t)*(unsigned int *)(a1 + 104) / *(unsigned int *)(a1 + 100);
  if (*(unsigned char *)(a1 + 168)) {
    return sub_1002CD160(a1);
  }
  return result;
}

uint64_t sub_1002CD160(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 168))
  {
    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 152), 0xFFFFFFFFFFFFFFFFLL);
    uint64_t v2 = a1 + 160;
  }
  else
  {
    uint64_t v2 = a1 + 136;
    uint64_t v3 = *(void *)(a1 + 128) + *(void *)(a1 + 136);
    *(void *)(v2 - 8) = v3;
    mach_wait_until(v3);
  }
  return *(void *)v2;
}

uint64_t sub_1002CD1B4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 144);
}

void sub_1002CD1BC(uint64_t a1, char a2)
{
  uint64_t v4 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "setThreadStarted", v5, 2u);
  }
  *(unsigned char *)(a1 + 144) = a2;
}

intptr_t sub_1002CD238(intptr_t result)
{
  if (*(unsigned char *)(result + 168)) {
    return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(result + 152));
  }
  return result;
}

uint64_t sub_1002CD258()
{
  return 0;
}

void sub_1002CD304(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002CD3AC(uint64_t a1)
{
  *(void *)a1 = off_1009A2F50;
  *(void *)(a1 + 8) = off_1009A2FF8;
  *(void *)(a1 + 16) = &off_1009A3028;
  *(void *)(a1 + 24) = off_1009A3040;
  *(void *)(a1 + 32) = &off_1009A3098;
  *(void *)(a1 + 40) = off_1009A30B0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 52) = 0;
  *(unsigned char *)(a1 + 54) = 1;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 10;
  *(_DWORD *)(a1 + 68) = 134742017;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 135) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 143) = 1;
  *(void *)(a1 + 144) = 0x800000000;
  *(_DWORD *)(a1 + 152) = 8;
  *(_WORD *)(a1 + 156) = -1;
  *(unsigned char *)(a1 + 158) = -1;
  *(unsigned char *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 164) = 0;
  *(unsigned char *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 172) = 0;
  *(_DWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 224) = 21;
  *(unsigned char *)(a1 + 228) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 240) = 0;
  uint64_t v2 = (void *)(a1 + 240);
  *(void *)(a1 + 232) = a1 + 240;
  uint64_t v3 = (void *)(a1 + 232);
  *(_DWORD *)(a1 + 259) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 263) = xmmword_1007BBC60;
  *(_WORD *)(a1 + 279) = 1280;
  sub_1000486F0(a1 + 232, 0);
  *uint64_t v3 = v2;
  *(void *)(a1 + 248) = 0;
  void *v2 = 0;
  sub_1002CD5DC(a1);
  *(void *)(a1 + 80) = *(void *)(a1 + 72);
  return a1;
}

void sub_1002CD5A0(_Unwind_Exception *a1)
{
  uint64_t v6 = v3;
  sub_1000486F0(v2, *v5);
  uint64_t v8 = *v6;
  if (*v6)
  {
    *(void *)(v1 + 120) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 80) = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

void sub_1002CD5DC(uint64_t a1)
{
  if (_os_feature_enabled_impl())
  {
    uint64_t v2 = qword_100A19FD0;
    if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Warning: BandSwitchManager: CoreWifi Defaults right Figaro5GTDD is enabled", buf, 2u);
    }
  }
  char v29 = 0;
  uint64_t v3 = sub_100017768();
  sub_10004191C(buf, "Filippo");
  sub_10004191C(__p, "ForceISM24");
  int v4 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v3 + 72))(v3, buf, __p, &v29);
  if (v29) {
    int v5 = v4;
  }
  else {
    int v5 = 0;
  }
  if (v28 < 0) {
    operator delete(__p[0]);
  }
  if ((v31 & 0x80000000) == 0)
  {
    if (!v5) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  operator delete(*(void **)buf);
  if (v5) {
LABEL_11:
  }
    *(_DWORD *)(a1 + 152) = 0;
LABEL_12:
  uint64_t v6 = sub_100017768();
  sub_10004191C(buf, "Filippo");
  sub_10004191C(__p, "ForceUnii1");
  int v7 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v6 + 72))(v6, buf, __p, &v29);
  if (v29) {
    int v8 = v7;
  }
  else {
    int v8 = 0;
  }
  if (v28 < 0) {
    operator delete(__p[0]);
  }
  if (v31 < 0)
  {
    operator delete(*(void **)buf);
    if (v8) {
      goto LABEL_19;
    }
  }
  else if (v8)
  {
LABEL_19:
    unsigned int v9 = 1;
    goto LABEL_68;
  }
  uint64_t v10 = sub_100017768();
  sub_10004191C(buf, "Filippo");
  sub_10004191C(__p, "ForceUnii3");
  int v11 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v10 + 72))(v10, buf, __p, &v29);
  if (v29) {
    int v12 = v11;
  }
  else {
    int v12 = 0;
  }
  if (v28 < 0) {
    operator delete(__p[0]);
  }
  if (v31 < 0)
  {
    operator delete(*(void **)buf);
    if (v12) {
      goto LABEL_30;
    }
  }
  else if (v12)
  {
LABEL_30:
    unsigned int v9 = 2;
    goto LABEL_68;
  }
  uint64_t v13 = sub_100017768();
  sub_10004191C(buf, "Filippo");
  sub_10004191C(__p, "ForceUnii5a");
  int v14 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v13 + 72))(v13, buf, __p, &v29);
  if (v29) {
    int v15 = v14;
  }
  else {
    int v15 = 0;
  }
  if (v28 < 0) {
    operator delete(__p[0]);
  }
  if (v31 < 0)
  {
    operator delete(*(void **)buf);
    if (v15) {
      goto LABEL_39;
    }
  }
  else if (v15)
  {
LABEL_39:
    unsigned int v9 = 4;
    goto LABEL_68;
  }
  uint64_t v16 = sub_100017768();
  sub_10004191C(buf, "Filippo");
  sub_10004191C(__p, "ForceUnii5b");
  int v17 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v16 + 72))(v16, buf, __p, &v29);
  if (v29) {
    int v18 = v17;
  }
  else {
    int v18 = 0;
  }
  if (v28 < 0) {
    operator delete(__p[0]);
  }
  if (v31 < 0)
  {
    operator delete(*(void **)buf);
    if (v18) {
      goto LABEL_48;
    }
  }
  else if (v18)
  {
LABEL_48:
    unsigned int v9 = 5;
    goto LABEL_68;
  }
  uint64_t v19 = sub_100017768();
  sub_10004191C(buf, "Filippo");
  sub_10004191C(__p, "ForceUnii5c");
  int v20 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v19 + 72))(v19, buf, __p, &v29);
  if (v29) {
    int v21 = v20;
  }
  else {
    int v21 = 0;
  }
  if (v28 < 0) {
    operator delete(__p[0]);
  }
  if (v31 < 0) {
    operator delete(*(void **)buf);
  }
  if (v21)
  {
    unsigned int v9 = 6;
  }
  else
  {
    uint64_t v22 = sub_100017768();
    sub_10004191C(buf, "Filippo");
    sub_10004191C(__p, "ForceUnii5d");
    int v23 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v22 + 72))(v22, buf, __p, &v29);
    if (v29) {
      int v24 = v23;
    }
    else {
      int v24 = 0;
    }
    if (v28 < 0) {
      operator delete(__p[0]);
    }
    if (v31 < 0) {
      operator delete(*(void **)buf);
    }
    if (!v24)
    {
      unsigned int v9 = *(_DWORD *)(a1 + 152);
      if (v9 == 8) {
        return;
      }
      goto LABEL_69;
    }
    unsigned int v9 = 7;
  }
LABEL_68:
  *(_DWORD *)(a1 + 152) = v9;
LABEL_69:
  unint64_t v25 = qword_100A19FD0;
  if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
  {
    if (v9 > 7) {
      uint64_t v26 = "Unknown BSM Band Code";
    }
    else {
      uint64_t v26 = off_1009A3200[v9];
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v26;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Warning: BandSwitchManager: Defaults write ForceUnii is enabled for UNII %s", buf, 0xCu);
  }
  *(unsigned char *)(a1 + 144) = 1;
}

void sub_1002CDB38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002CDBA8(uint64_t a1, uint64_t a2)
{
  sub_1002CDC58(a1 + 104, a2);
  uint64_t v2 = qword_100A19FD0;
  if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315138;
    int v4 = "void BT::BandSwitchManager::addEventListener(BandSwitchManagerListener *)";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v3, 0xCu);
  }
}

void sub_1002CDC58(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  int v5 = *(char **)(a1 + 8);
  int v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        int v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    uint64_t v6 = a2;
    sub_1002D3A34(a1 + 8, v4, (char *)&v6);
    sub_100061554(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_1002CDCE4(os_unfair_lock_s *a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1002CDEAC;
  v3[3] = &unk_1009A30D0;
  char v4 = a2;
  sub_1002CDDE0(a1 + 26, v3);
  uint64_t v2 = qword_100A19FD0;
  if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    uint64_t v6 = "virtual void BT::BandSwitchManager::notifyHRBEnabled(BOOL)";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
  }
}

void sub_1002CDDE0(os_unfair_lock_s *a1, void *a2)
{
  int v3 = a2;
  os_unfair_lock_lock(a1);
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  char v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    char v4 = v5;
  }
  if (v4)
  {
    uint64_t v6 = v4;
    operator delete(v4);
  }
}

void sub_1002CDE84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002CDEAC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 8))(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_1002CDEDC(os_unfair_lock_s *a1, uint64_t a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1002CDFD8;
  v3[3] = &unk_1009A30F0;
  void v3[4] = a2;
  sub_1002CDDE0(a1 + 26, v3);
  uint64_t v2 = qword_100A19FD0;
  if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    int v5 = "virtual void BT::BandSwitchManager::notifyBandSwitched(Device *)";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
  }
}

uint64_t sub_1002CDFD8(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(void *)(a1 + 32));
}

void sub_1002CE008(uint64_t a1)
{
  if (sub_1002CE1CC())
  {
    uint64_t v2 = sub_100373254();
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 48))(v2, a1 + 16);
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009A3110);
    }
    sub_100061288((uint64_t)off_1009F7EF8 + 240, a1 + 40);
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009A3130);
    }
    sub_10026B36C((uint64_t)off_1009F8068 + 64, a1 + 8);
    uint64_t v3 = sub_100052EB4();
    (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 128))(v3, a1 + 24);
    uint64_t v4 = sub_10003FFD4();
    sub_10026B948(v4 + 288, a1 + 32);
    if ((_os_feature_enabled_impl() & 1) == 0)
    {
      uint64_t v5 = sub_1004AF8EC();
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_1002CE2E0;
      v8[3] = &unk_100997528;
      v8[4] = a1;
      sub_100013018(v5, v8);
    }
  }
  else
  {
    uint64_t v6 = qword_100A19FD0;
    if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Did not init as Chipset isn't supported", v7, 2u);
    }
  }
}

uint64_t sub_1002CE1CC()
{
  char v7 = 0;
  uint64_t v0 = sub_100017768();
  sub_10004191C(v5, "Device");
  sub_10004191C(__p, "EnableHRB");
  (*(void (**)(uint64_t, void **, void **, char *))(*(void *)v0 + 72))(v0, v5, __p, &v7);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  uint64_t v1 = sub_10003FB34();
  LODWORD(result) = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 2488))(v1);
  if (v7) {
    return 1;
  }
  else {
    return result;
  }
}

void sub_1002CE2AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002CE2E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  __int16 v8 = 0;
  __int16 v7 = 0;
  char v6 = 0;
  int v5 = 0;
  uint64_t v2 = sub_10003FFD4();
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, __int16 *, char *, __int16 *, char *, int *))(*(void *)v2 + 48))(v2, (char *)&v8 + 1, &v8, (char *)&v7 + 1, &v7, &v6, &v5);
  if (!result)
  {
    *(unsigned char *)(v1 + 160) = v7;
    if (HIBYTE(v8))
    {
      int v4 = 1;
    }
    else if ((_BYTE)v8)
    {
      int v4 = 2;
    }
    else
    {
      if (!HIBYTE(v7))
      {
        *(_DWORD *)(v1 + 164) = 0;
        return result;
      }
      int v4 = 3;
    }
    *(_DWORD *)(v1 + 164) = v4;
  }
  return result;
}

void sub_1002CE39C(uint64_t a1)
{
  sub_1002CE420(a1, 0);
  uint64_t v2 = sub_1004AF8EC();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1002CE4A4;
  v3[3] = &unk_100997528;
  void v3[4] = a1;
  sub_100013018(v2, v3);
}

void sub_1002CE420(uint64_t a1, int a2)
{
  uint64_t v4 = sub_1004AF8EC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1002D18BC;
  v5[3] = &unk_100997570;
  v5[4] = a1;
  int v6 = a2;
  sub_100013018(v4, v5);
}

void sub_1002CE4A4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = qword_100A19FD0;
  if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Update Bands after Stack Start", v3, 2u);
  }
  sub_1002CE420(v1, 3);
}

void sub_1002CE51C(uint64_t a1)
{
}

void sub_1002CE524(uint64_t a1)
{
}

void sub_1002CE52C(uint64_t a1)
{
}

const char *sub_1002CE538(uint64_t a1, unsigned int a2)
{
  if (a2 > 0x15) {
    return "BandSwitchManager: Unknown BSM Event";
  }
  else {
    return off_1009A3150[a2];
  }
}

uint64_t sub_1002CE55C(uint64_t a1)
{
  uint64_t v2 = qword_100A19FD0;
  if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 136315138;
    int v12 = "BOOL BT::BandSwitchManager::BSMHRBEnablementConditionsMet()";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Entering %s", (uint8_t *)&v11, 0xCu);
  }
  sub_1002CE7C8(a1);
  uint64_t v3 = *(void *)(a1 + 56);
  if (!v3 || !*(unsigned char *)(a1 + 52) || !*(unsigned char *)(a1 + 53) || *(unsigned char *)(a1 + 54))
  {
    uint64_t v4 = qword_100A19FD0;
    BOOL v5 = os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v5) {
      return result;
    }
    LOWORD(v11) = 0;
    __int16 v7 = "BandSwitchManager: BSM isn't ready to enable HRB yet";
    goto LABEL_9;
  }
  if (*(unsigned char *)(a1 + 144))
  {
    __int16 v8 = qword_100A19FD0;
    if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v11) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Warning: BandSwitchManager: HRB conditions met by overriding, due to defaults rights flag forceHRB being set!", (uint8_t *)&v11, 2u);
    }
    *(unsigned char *)(a1 + 69) = *(_DWORD *)(a1 + 152);
    return 1;
  }
  if (*(unsigned char *)(v3 + 1372)
    && *(unsigned char *)(v3 + 1374)
    && !*(unsigned char *)(a1 + 136)
    && *(unsigned __int8 *)(a1 + 68) >= 2u
    && *(unsigned char *)(a1 + 69)
    && *(unsigned char *)(a1 + 143)
    && !*(unsigned char *)(a1 + 142)
    && !*(unsigned char *)(a1 + 137)
    && !*(unsigned char *)(a1 + 141)
    && !*(unsigned char *)(a1 + 138)
    && !*(unsigned char *)(a1 + 139)
    && *(unsigned char *)(a1 + 145)
    && !*(unsigned char *)(a1 + 140)
    && (*(_DWORD *)(a1 + 164) < 2u || !*(unsigned char *)(a1 + 160)))
  {
    uint64_t v10 = qword_100A19FD0;
    if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v11) = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: HRB conditions met", (uint8_t *)&v11, 2u);
    }
    return 1;
  }
  uint64_t v4 = qword_100A19FD0;
  BOOL v9 = os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v9)
  {
    LOWORD(v11) = 0;
    __int16 v7 = "BandSwitchManager: HRB conditions are not met";
LABEL_9:
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v11, 2u);
    return 0;
  }
  return result;
}

void sub_1002CE7C8(uint64_t a1)
{
  uint64_t v2 = qword_100A19FD0;
  if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "---------- BandSwitchManager START DUMP STATE ----------", buf, 2u);
  }
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v4 = qword_100A19FD0;
  BOOL v5 = os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT);
  if (!v3)
  {
    if (!v5) {
      goto LABEL_26;
    }
    *(_WORD *)buf = 0;
    uint64_t v10 = "BandSwitchManager: Device is NULL";
    int v11 = v4;
    uint32_t v12 = 2;
    goto LABEL_25;
  }
  if (v5)
  {
    sub_100474E18(v3, buf);
    if (v46 >= 0) {
      int v6 = buf;
    }
    else {
      int v6 = *(unsigned char **)buf;
    }
    *(_DWORD *)uint64_t v47 = 136446210;
    int v48 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Device                     : %{public}s", v47, 0xCu);
    if (v46 < 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v4 = qword_100A19FD0;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(unsigned __int8 *)(*(void *)(a1 + 56) + 1372);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "AoS State                  : %d", buf, 8u);
    uint64_t v4 = qword_100A19FD0;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(*(void *)(a1 + 56) + 1374)) {
      __int16 v8 = "Yes";
    }
    else {
      __int16 v8 = "No";
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "AllowedBandSet             : %s", buf, 0xCu);
    uint64_t v4 = qword_100A19FD0;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(*(void *)(a1 + 56) + 1373)) {
      BOOL v9 = "HRB";
    }
    else {
      BOOL v9 = "2.4Ghz";
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v9;
    uint64_t v10 = "CurrentFrequency           : %s";
    int v11 = v4;
    uint32_t v12 = 12;
LABEL_25:
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v10, buf, v12);
  }
LABEL_26:
  uint64_t v13 = qword_100A19FD0;
  if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = *(unsigned __int8 *)(a1 + 52);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Stack State                : %d", buf, 8u);
    uint64_t v13 = qword_100A19FD0;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = *(unsigned __int8 *)(a1 + 53);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Location Update Complete   : %d", buf, 8u);
    uint64_t v13 = qword_100A19FD0;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = *(unsigned __int8 *)(a1 + 54);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v16;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Band Update Pending        : %d", buf, 8u);
    uint64_t v13 = qword_100A19FD0;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    int v17 = *(unsigned __int8 *)(a1 + 136);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v17;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Debounce Enabled           : %d", buf, 8u);
    uint64_t v13 = qword_100A19FD0;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    int v18 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v18;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Debounce Retry Value       : %d", buf, 8u);
    uint64_t v13 = qword_100A19FD0;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    int v19 = *(unsigned __int8 *)(a1 + 68);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v19;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Allowed Band               : 0x%X", buf, 8u);
    uint64_t v13 = qword_100A19FD0;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    int v20 = *(unsigned __int8 *)(a1 + 69);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v20;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Current Band               : 0x%X", buf, 8u);
    uint64_t v13 = qword_100A19FD0;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    int v21 = *(unsigned __int8 *)(a1 + 137);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v21;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "AWDL State                 : %d", buf, 8u);
    uint64_t v13 = qword_100A19FD0;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    int v22 = *(unsigned __int8 *)(a1 + 138);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v22;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Low Wi-Fi Rate             : %d", buf, 8u);
    uint64_t v13 = qword_100A19FD0;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    int v23 = *(unsigned __int8 *)(a1 + 139);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v23;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "AWDL RTG State             : %d", buf, 8u);
    uint64_t v13 = qword_100A19FD0;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    int v24 = *(unsigned __int8 *)(a1 + 141);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v24;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Nan State                  : %d", buf, 8u);
    uint64_t v13 = qword_100A19FD0;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    int v25 = *(unsigned __int8 *)(a1 + 142);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v25;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Host 5GHz AP State         : %d", buf, 8u);
    uint64_t v13 = qword_100A19FD0;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    int v26 = *(unsigned __int8 *)(a1 + 140);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v26;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "UWB 5Ghz                   : %d", buf, 8u);
    uint64_t v13 = qword_100A19FD0;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    sub_10001A260(a1 + 160);
    if (v46 >= 0) {
      int v27 = buf;
    }
    else {
      int v27 = *(unsigned char **)buf;
    }
    *(_DWORD *)uint64_t v47 = 136315138;
    int v48 = v27;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "WiFiState                  : %s", v47, 0xCu);
    if (v46 < 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v13 = qword_100A19FD0;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    int v28 = *(unsigned __int8 *)(a1 + 143);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v28;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "HRB Requested              : %d", buf, 8u);
    uint64_t v13 = qword_100A19FD0;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    int v29 = *(unsigned __int8 *)(a1 + 145);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v29;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Suffucient BW for BT       : %d", buf, 8u);
    uint64_t v13 = qword_100A19FD0;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    int v30 = *(unsigned __int8 *)(a1 + 146);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v30;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Wi-Fi BW GT Max            : %d", buf, 8u);
    uint64_t v13 = qword_100A19FD0;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v31 = *(int *)(a1 + 148);
    if (v31 > 8) {
      long long v32 = "Unknown BSM Band Code";
    }
    else {
      long long v32 = off_1009A32A0[v31];
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v32;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Wi-Fi Current Band         : %s", buf, 0xCu);
    uint64_t v13 = qword_100A19FD0;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    int v33 = ((*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 2) + 1;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v33;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Num Bands Available        : %d", buf, 8u);
    uint64_t v13 = qword_100A19FD0;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v34 = *(char *)(a1 + 69);
    if (v34 > 8) {
      int v35 = "Unknown BSM Band Code";
    }
    else {
      int v35 = off_1009A32A0[v34];
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v35;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Current Selected HRB Band  : %s", buf, 0xCu);
    uint64_t v13 = qword_100A19FD0;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    int v36 = *(_DWORD *)(a1 + 96);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v36;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Current HRB Band Idx       : %d", buf, 8u);
    uint64_t v13 = qword_100A19FD0;
  }
  uint64_t v37 = *(void *)(a1 + 72);
  uint64_t v38 = *(void *)(a1 + 80);
  if (v38 != v37)
  {
    unint64_t v39 = 0;
    do
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v40 = *(int *)(v37 + 4 * v39);
        unint64_t v41 = "Unknown BSM Band Code";
        if (v40 <= 8) {
          unint64_t v41 = off_1009A32A0[v40];
        }
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = v41;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "           %s ", buf, 0xCu);
        uint64_t v13 = qword_100A19FD0;
        uint64_t v37 = *(void *)(a1 + 72);
        uint64_t v38 = *(void *)(a1 + 80);
      }
      ++v39;
    }
    while (v39 < (v38 - v37) >> 2);
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = "BSM_BAND_CODE_ISM24";
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "           %s ", buf, 0xCu);
    uint64_t v13 = qword_100A19FD0;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    int v42 = _os_feature_enabled_impl();
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v42;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "HRBTDD Allowed             : %d", buf, 8u);
    uint64_t v13 = qword_100A19FD0;
  }
  if (*(unsigned char *)(a1 + 144) && os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "ForceHRB                   : On", buf, 2u);
    uint64_t v13 = qword_100A19FD0;
  }
  uint64_t v43 = *(int *)(a1 + 152);
  if (v43 != 8 && os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    if (v43 > 7) {
      uint64_t v44 = "Unknown BSM Band Code";
    }
    else {
      uint64_t v44 = off_1009A3200[v43];
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v44;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Force UNII for band        : %s", buf, 0xCu);
    uint64_t v13 = qword_100A19FD0;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "---------- BandSwitchManager END DUMP STATE ----------", buf, 2u);
  }
}

uint64_t sub_1002CF334(uint64_t a1)
{
  uint64_t v2 = qword_100A19FD0;
  if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 136315138;
    BOOL v9 = "BOOL BT::BandSwitchManager::BSMHRBDebounceConditionsMet()";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Entering %s", (uint8_t *)&v8, 0xCu);
  }
  sub_1002CE7C8(a1);
  uint64_t v3 = *(void *)(a1 + 56);
  if (v3 && *(unsigned char *)(v3 + 1372) && !*(unsigned char *)(v3 + 1373))
  {
    int v7 = qword_100A19FD0;
    if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: HRB Debounce conditions met", (uint8_t *)&v8, 2u);
    }
    return 1;
  }
  else
  {
    uint64_t v4 = qword_100A19FD0;
    BOOL v5 = os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v5)
    {
      LOWORD(v8) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: HRB Debounce conditions are not met", (uint8_t *)&v8, 2u);
      return 0;
    }
  }
  return result;
}

void sub_1002CF494(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 184);
  uint64_t v3 = qword_100A19FD0;
  BOOL v4 = os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT);
  if (!v2)
  {
    if (!v4) {
      return;
    }
    *(_WORD *)buf = 0;
    int v16 = "BandSwitchManager: No Metrics to display";
    goto LABEL_27;
  }
  if (v4)
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "---------- BandSwitchManager START DUMP LAST SESSION METRICS ----------", buf, 2u);
    uint64_t v3 = qword_100A19FD0;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 176);
    *(_DWORD *)buf = 67109120;
    LODWORD(v18) = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Session PID                : 0x%X", buf, 8u);
    uint64_t v3 = qword_100A19FD0;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(const char **)(a1 + 192);
    *(_DWORD *)buf = 134217984;
    int v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Session Duration           : %llu", buf, 0xCu);
    uint64_t v3 = qword_100A19FD0;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(const char **)(a1 + 208);
    *(_DWORD *)buf = 134217984;
    int v18 = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "HRB Duration                : %llu", buf, 0xCu);
    uint64_t v3 = qword_100A19FD0;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(a1 + 228);
    *(_DWORD *)buf = 67109120;
    LODWORD(v18) = v8;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Band Code                  : 0x%X", buf, 8u);
    uint64_t v3 = qword_100A19FD0;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Downswitch Reason", buf, 2u);
    uint64_t v3 = qword_100A19FD0;
  }
  BOOL v9 = *(void **)(a1 + 232);
  if (v9 != (void *)(a1 + 240))
  {
    do
    {
      BOOL v10 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
      if (v10)
      {
        int v11 = sub_1002CE538(v10, *((_DWORD *)v9 + 7));
        int v12 = *((unsigned __int16 *)v9 + 16);
        *(_DWORD *)buf = 136315394;
        int v18 = v11;
        __int16 v19 = 1024;
        int v20 = v12;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%s                         : %d", buf, 0x12u);
        uint64_t v3 = qword_100A19FD0;
      }
      uint64_t v13 = (void *)v9[1];
      if (v13)
      {
        do
        {
          int v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          int v14 = (void *)v9[2];
          BOOL v15 = *v14 == (void)v9;
          BOOL v9 = v14;
        }
        while (!v15);
      }
      BOOL v9 = v14;
    }
    while (v14 != (void *)(a1 + 240));
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    int v16 = "---------- BandSwitchManager END DUMP LAST SESSION METRICS ----------";
LABEL_27:
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, v16, buf, 2u);
  }
}

uint64_t sub_1002CF7C0(uint64_t a1, unsigned int a2)
{
  switch(a2)
  {
    case 0u:
      unsigned int v4 = *(_DWORD *)(a1 + 48);
      if (v4) {
        goto LABEL_5;
      }
      return 0;
    case 1u:
      unsigned int v4 = *(_DWORD *)(a1 + 48);
LABEL_5:
      if (v4 > 4 || ((1 << v4) & 0x19) == 0) {
        goto LABEL_18;
      }
      int v7 = qword_100A19FD0;
      if (!os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_45;
      }
      int v8 = "Unknown BSM State";
      BOOL v9 = "Unknown BSM State";
      if (v4 <= 4) {
        BOOL v9 = off_1009A3278[v4];
      }
      if (a2 == 1) {
        int v8 = "BSM_STATE_IDLE";
      }
      if (!a2) {
        int v8 = "BSM_STATE_OFF";
      }
      int v15 = 136446466;
      int v16 = v9;
      __int16 v17 = 2082;
      int v18 = v8;
      goto LABEL_44;
    case 2u:
      unsigned int v4 = *(_DWORD *)(a1 + 48);
LABEL_18:
      if (v4 != 1) {
        goto LABEL_23;
      }
      int v7 = qword_100A19FD0;
      if (!os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_45;
      }
      if (a2 > 2) {
        BOOL v10 = "Unknown BSM State";
      }
      else {
        BOOL v10 = off_1009A3240[a2];
      }
      int v15 = 136446466;
      int v16 = "BSM_STATE_IDLE";
      __int16 v17 = 2082;
      int v18 = v10;
      goto LABEL_44;
    case 3u:
      unsigned int v4 = *(_DWORD *)(a1 + 48);
LABEL_23:
      if (v4 != 2) {
        goto LABEL_28;
      }
      int v7 = qword_100A19FD0;
      if (!os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_45;
      }
      if (a2 > 3) {
        int v11 = "Unknown BSM State";
      }
      else {
        int v11 = off_1009A3258[a2];
      }
      int v15 = 136446466;
      int v16 = "BSM_STATE_ANALYZE";
      __int16 v17 = 2082;
      int v18 = v11;
      goto LABEL_44;
    case 4u:
      unsigned int v4 = *(_DWORD *)(a1 + 48);
LABEL_28:
      if ((v4 & 0xFFFFFFFE) != 2) {
        goto LABEL_37;
      }
      int v7 = qword_100A19FD0;
      if (!os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_45;
      }
      int v12 = "Unknown BSM State";
      uint64_t v13 = "BSM_STATE_ANALYZE";
      if (v4 != 2) {
        uint64_t v13 = "Unknown BSM State";
      }
      if (v4 == 3) {
        uint64_t v13 = "BSM_STATE_CONFIGURE";
      }
      if (a2 <= 4) {
        int v12 = off_1009A3278[a2];
      }
      int v15 = 136446466;
      int v16 = v13;
      __int16 v17 = 2082;
      int v18 = v12;
LABEL_44:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: %{public}s -> %{public}s", (uint8_t *)&v15, 0x16u);
LABEL_45:
      uint64_t result = 0;
      *(_DWORD *)(a1 + 48) = a2;
      return result;
    default:
LABEL_37:
      int v14 = qword_100A19FD0;
      if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_FAULT)) {
        sub_100752F20(a1, a2, v14);
      }
      return 1;
  }
}

void sub_1002CFB04(uint64_t a1, char a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v6 = sub_1004AF8EC();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_1002CFB9C;
    v7[3] = &unk_1009A0160;
    v7[4] = a1;
    v7[5] = a3;
    char v8 = a2;
    sub_100013018(v6, v7);
  }
}

void sub_1002CFB9C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 56);
  if (v3 && *(unsigned char *)(v3 + 1372) && *(void *)(a1 + 40) != v3 && *(unsigned char *)(a1 + 48))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_ERROR)) {
      sub_10075304C();
    }
    return;
  }
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4 != v3)
  {
    int v5 = qword_100A19FD0;
    if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(v4, __p);
      if (v10 >= 0) {
        uint64_t v6 = __p;
      }
      else {
        uint64_t v6 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136446210;
      int v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: AoS update on new device %{public}s.", buf, 0xCu);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v4 = *(void *)(a1 + 40);
    }
    *(void *)(v2 + 56) = v4;
    uint64_t v3 = v4;
  }
  if (!v3)
  {
    if (!*(unsigned char *)(a1 + 48))
    {
LABEL_22:
      uint64_t v7 = v2;
      int v8 = 5;
LABEL_25:
      sub_1002CE420(v7, v8);
      return;
    }
LABEL_24:
    uint64_t v7 = v2;
    int v8 = 4;
    goto LABEL_25;
  }
  if (*(unsigned char *)(v3 + 1372))
  {
    if (*(unsigned char *)(a1 + 48))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_ERROR)) {
        sub_100753018();
      }
      return;
    }
    goto LABEL_22;
  }
  if (*(unsigned char *)(a1 + 48)) {
    goto LABEL_24;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_ERROR)) {
    sub_100752FE4();
  }
}

void sub_1002CFD70(uint64_t a1, void *a2, char a3, char a4, char a5, char a6, char a7)
{
  id v13 = a2;
  uint64_t v14 = sub_1004AF8EC();
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1002CFE74;
  v16[3] = &unk_1009999C0;
  uint64_t v18 = a1;
  id v15 = v13;
  id v17 = v15;
  char v19 = a3;
  char v20 = a4;
  char v21 = a5;
  char v22 = a6;
  char v23 = a7;
  sub_100013018(v14, v16);
}

void sub_1002CFE54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1002CFE74(uint64_t a1)
{
  uint64_t v2 = *(unsigned char **)(a1 + 40);
  uint64_t v3 = qword_100A19FD0;
  if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(unsigned __int8 *)(a1 + 48);
    int v6 = *(unsigned __int8 *)(a1 + 49);
    int v7 = *(unsigned __int8 *)(a1 + 50);
    int v8 = *(unsigned __int8 *)(a1 + 51);
    int v9 = *(unsigned __int8 *)(a1 + 52);
    *(_DWORD *)buf = 138544642;
    uint64_t v14 = v4;
    __int16 v15 = 1024;
    int v16 = v5;
    __int16 v17 = 1024;
    int v18 = v6;
    __int16 v19 = 1024;
    int v20 = v7;
    __int16 v21 = 1024;
    int v22 = v8;
    __int16 v23 = 1024;
    int v24 = v9;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "BandSwitchManager::locationUpdate - country: %{public}@, ISM 2.4 CC: %u, LEFlag: %u, UNII-1 CC: %u, UNII-3 CC: %u, UNII-5 CC: %u", buf, 0x2Au);
  }
  v2[156] = *(unsigned char *)(a1 + 50);
  v2[157] = *(unsigned char *)(a1 + 51);
  v2[158] = *(unsigned char *)(a1 + 52);
  v2[53] = 0;
  sub_1002CE420((uint64_t)v2, 2);
  if ([*(id *)(a1 + 32) isEqualToString:@"KR"]) {
    char v10 = 22;
  }
  else {
    char v10 = 5;
  }
  v2[275] = v10;
  uint64_t v11 = sub_1004AF8EC();
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1002D000C;
  v12[3] = &unk_100997528;
  v12[4] = v2;
  sub_1004AFF58(v11, 1000, v12);
}

void sub_1002D000C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = qword_100A19FD0;
  if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Update Bands after Location Update", v3, 2u);
  }
  sub_1002CE420(v1, 3);
}

void sub_1002D0084(uint64_t a1, void *a2, char a3, char a4, char a5, char a6, char a7)
{
}

BOOL sub_1002D008C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  return v1 && *(unsigned char *)(v1 + 1373) != 0;
}

void sub_1002D00AC(uint64_t a1, unsigned int a2)
{
  sub_1002CF7C0(a1, 1u);
  if (a2 == 1)
  {
    sub_1002D0124(a1);
  }
  else
  {
    if (!a2) {
      *(unsigned char *)(a1 + 52) = 1;
    }
    sub_1002D01BC(a1, a2);
  }
}

void sub_1002D0124(uint64_t a1)
{
  *(unsigned char *)(a1 + 52) = 0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 70) = 2056;
  *(_DWORD *)(a1 + 64) = 10;
  *(unsigned char *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 54) = 1;
  *(unsigned char *)(a1 + 145) = 1;
  sub_1002D0F0C(a1);
  uint64_t v1 = qword_100A19FD0;
  if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: ---------- BSM State Machine Shutdown ----------", v2, 2u);
  }
}

void sub_1002D01BC(uint64_t a1, unsigned int a2)
{
  sub_1002CF7C0(a1, 2u);
  if (a2 <= 3 && a2 != 1)
  {
    sub_1002D05D0(a1, a2);
    return;
  }
  uint64_t v4 = *(void *)(a1 + 56);
  if (!v4)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_ERROR)) {
      sub_100753080();
    }
    if (a2 != 6) {
      goto LABEL_31;
    }
    goto LABEL_20;
  }
  switch(a2)
  {
    case 6u:
LABEL_20:
      uint64_t v11 = qword_100A19FD0;
      if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Debounce Expired", buf, 2u);
      }
      *(unsigned char *)(a1 + 136) = 0;
      goto LABEL_31;
    case 5u:
      int v12 = qword_100A19FD0;
      if (!*(unsigned char *)(v4 + 1372) && os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Received AoS End when AoS was already disabled.", buf, 2u);
        uint64_t v4 = *(void *)(a1 + 56);
        int v12 = qword_100A19FD0;
      }
      *(unsigned char *)(v4 + 1372) = 0;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v18) = 1;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Resetting hrbClassificationBands VSC with value 0x%x", buf, 8u);
      }
      uint64_t v13 = sub_10003FB34();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13 + 1392))(v13, 1, 1);
      __uint64_t v14 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW) - *(void *)(a1 + 184);
      *(void *)(a1 + 192) = v14;
      *(unsigned char *)(a1 + 136) = 0;
      int v9 = qword_100A19FD0;
      if (!os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_31;
      }
      *(_DWORD *)buf = 134217984;
      __uint64_t v18 = v14;
      char v10 = "BandSwitchManager: Ending AoS Session. Duration was 0x%llX nSec";
      break;
    case 4u:
      int v5 = qword_100A19FD0;
      if (*(unsigned char *)(v4 + 1372) && os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Received AoS Start when AoS was already enabled.", buf, 2u);
        uint64_t v4 = *(void *)(a1 + 56);
        int v5 = qword_100A19FD0;
      }
      *(unsigned char *)(v4 + 1372) = 1;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = *(unsigned __int8 *)(a1 + 68);
        *(_DWORD *)buf = 67109120;
        LODWORD(v18) = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Sending hrbClassificationBands VSC with value 0x%X", buf, 8u);
      }
      uint64_t v7 = sub_10003FB34();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)v7 + 1392))(v7, *(unsigned __int8 *)(a1 + 68), 1);
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      sub_10047B7A8(*(void *)(a1 + 56), (_DWORD *)&v16 + 1, &v16, (_DWORD *)&v15 + 1, &v15);
      sub_1002D0F0C(a1);
      *(_DWORD *)(a1 + 176) = HIDWORD(v15);
      __uint64_t v8 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
      *(void *)(a1 + 184) = v8;
      *(_WORD *)(a1 + 70) = 2056;
      int v9 = qword_100A19FD0;
      if (!os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_31;
      }
      *(_DWORD *)buf = 134217984;
      __uint64_t v18 = v8;
      char v10 = "BandSwitchManager: Starting AoS Session at 0x%llX nSec";
      break;
    default:
      goto LABEL_31;
  }
  _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v10, buf, 0xCu);
LABEL_31:
  if ((sub_1002D0FA8(a1, a2) & 1) == 0) {
    sub_1002D1160(a1);
  }
}

void sub_1002D05D0(uint64_t a1, unsigned int a2)
{
  sub_1002CF7C0(a1, 3u);
  if (a2 == 3)
  {
    if (*(unsigned char *)(a1 + 53) && *(unsigned char *)(a1 + 54))
    {
      uint64_t v16 = qword_100A19FD0;
      if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v82[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Sending hrbAllowedBands VSC", (uint8_t *)v82, 2u);
      }
      uint64_t v17 = sub_10003FB34();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)v17 + 1384))(v17, *(unsigned __int8 *)(a1 + 68), 1);
      __uint64_t v18 = qword_100A19FD0;
      if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v82[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Sending HRB BE blocking VSC", (uint8_t *)v82, 2u);
      }
      uint64_t v19 = sub_10003FB34();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v19 + 1496))(v19, 6, a1 + 263, a1 + 269, a1 + 275, 1);
      *(unsigned char *)(a1 + 54) = 0;
    }
    goto LABEL_132;
  }
  if (a2 != 2)
  {
    if (!a2)
    {
      uint64_t v4 = qword_100A19FD0;
      if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v82[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Configuring Retry delay", (uint8_t *)v82, 2u);
      }
      sub_1002D11D0(a1);
      int v5 = qword_100A19FD0;
      if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v82[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Sending hrbControl VSC", (uint8_t *)v82, 2u);
      }
      uint64_t v6 = sub_10003FB34();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 1376))(v6, 1, 1);
      *(unsigned char *)(a1 + 54) = 1;
      uint64_t v7 = qword_100A19FD0;
      if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v82[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Sending Initial hrbAllowedBands VSC", (uint8_t *)v82, 2u);
      }
      uint64_t v8 = sub_10003FB34();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)v8 + 1384))(v8, *(unsigned __int8 *)(a1 + 68), 1);
      int v9 = qword_100A19FD0;
      if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
      {
        v82[0] = 67109120;
        v82[1] = 1;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Resetting hrbClassificationBands VSC with value 0x%x", (uint8_t *)v82, 8u);
      }
      uint64_t v10 = sub_10003FB34();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10 + 1392))(v10, 1, 1);
      uint64_t v11 = qword_100A19FD0;
      if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v82[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Sending Initial HRB BE blocking VSC", (uint8_t *)v82, 2u);
      }
      uint64_t v12 = sub_10003FB34();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 1496))(v12, 6, a1 + 263, a1 + 269, a1 + 275, 1);
    }
    goto LABEL_132;
  }
  uint64_t v13 = (void **)(a1 + 72);
  __uint64_t v14 = *(char **)(a1 + 72);
  *(unsigned char *)(a1 + 68) = 1;
  *(void *)(a1 + 80) = v14;
  if (*(unsigned __int8 *)(a1 + 156) != 255)
  {
    unint64_t v15 = *(void *)(a1 + 88);
    *(unsigned char *)(a1 + 68) = 3;
    *(unsigned char *)(a1 + 256) = 1;
    if ((unint64_t)v14 >= v15)
    {
      unint64_t v20 = v15 - (void)v14;
      unint64_t v21 = (uint64_t)(v15 - (void)v14) >> 1;
      if (v21 <= 1) {
        unint64_t v21 = 1;
      }
      if (v20 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v22 = v21;
      }
      __int16 v23 = sub_1002C44F0(a1 + 88, v22);
      int v24 = *(char **)(a1 + 72);
      int v25 = *(char **)(a1 + 80);
      int v27 = &v23[v26];
      *__int16 v23 = 1;
      __uint64_t v14 = (char *)(v23 + 1);
      while (v25 != v24)
      {
        int v28 = *((_DWORD *)v25 - 1);
        v25 -= 4;
        *--__int16 v23 = v28;
      }
      *(void *)(a1 + 72) = v23;
      *(void *)(a1 + 80) = v14;
      *(void *)(a1 + 88) = v27;
      if (v24) {
        operator delete(v24);
      }
    }
    else
    {
      *(_DWORD *)__uint64_t v14 = 1;
      v14 += 4;
    }
    *(void *)(a1 + 80) = v14;
  }
  if (*(unsigned __int8 *)(a1 + 157) != 255)
  {
    *(unsigned char *)(a1 + 68) |= 4u;
    *(unsigned char *)(a1 + 257) = 1;
    int v29 = *(char **)(a1 + 72);
    v82[0] = 2;
    sub_1002D136C(a1 + 72, v29, v82);
    __uint64_t v14 = *(char **)(a1 + 80);
  }
  if (*(unsigned __int8 *)(a1 + 158) != 255)
  {
    uint64_t v31 = (char **)(a1 + 88);
    int v30 = *(char **)(a1 + 88);
    *(_DWORD *)(a1 + 259) = 16843009;
    if (v14 >= v30)
    {
      int v33 = (char *)*v13;
      uint64_t v34 = (v14 - (unsigned char *)*v13) >> 2;
      unint64_t v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 62) {
        abort();
      }
      uint64_t v36 = v30 - v33;
      if (v36 >> 1 > v35) {
        unint64_t v35 = v36 >> 1;
      }
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v37 = v35;
      }
      if (v37)
      {
        uint64_t v38 = (char *)sub_1002C44F0(a1 + 88, v37);
        int v33 = *(char **)(a1 + 72);
        __uint64_t v14 = *(char **)(a1 + 80);
      }
      else
      {
        uint64_t v38 = 0;
      }
      unint64_t v39 = &v38[4 * v34];
      int v30 = &v38[4 * v37];
      *(_DWORD *)unint64_t v39 = 4;
      long long v32 = v39 + 4;
      while (v14 != v33)
      {
        int v40 = *((_DWORD *)v14 - 1);
        v14 -= 4;
        *((_DWORD *)v39 - 1) = v40;
        v39 -= 4;
      }
      *(void *)(a1 + 72) = v39;
      *(void *)(a1 + 80) = v32;
      *(void *)(a1 + 88) = v30;
      if (v33)
      {
        operator delete(v33);
        int v30 = *v31;
      }
    }
    else
    {
      *(_DWORD *)__uint64_t v14 = 4;
      long long v32 = v14 + 4;
    }
    *(void *)(a1 + 80) = v32;
    if (v32 >= v30)
    {
      int v42 = (char *)*v13;
      uint64_t v43 = (v32 - (unsigned char *)*v13) >> 2;
      unint64_t v44 = v43 + 1;
      if ((unint64_t)(v43 + 1) >> 62) {
        abort();
      }
      uint64_t v45 = v30 - v42;
      if (v45 >> 1 > v44) {
        unint64_t v44 = v45 >> 1;
      }
      if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v46 = v44;
      }
      if (v46)
      {
        uint64_t v47 = (char *)sub_1002C44F0(a1 + 88, v46);
        int v42 = *(char **)(a1 + 72);
        long long v32 = *(char **)(a1 + 80);
      }
      else
      {
        uint64_t v47 = 0;
      }
      int v48 = &v47[4 * v43];
      int v30 = &v47[4 * v46];
      *(_DWORD *)int v48 = 5;
      unint64_t v41 = v48 + 4;
      while (v32 != v42)
      {
        int v49 = *((_DWORD *)v32 - 1);
        v32 -= 4;
        *((_DWORD *)v48 - 1) = v49;
        v48 -= 4;
      }
      *(void *)(a1 + 72) = v48;
      *(void *)(a1 + 80) = v41;
      *(void *)(a1 + 88) = v30;
      if (v42)
      {
        operator delete(v42);
        int v30 = *v31;
      }
    }
    else
    {
      *(_DWORD *)long long v32 = 5;
      unint64_t v41 = v32 + 4;
    }
    *(void *)(a1 + 80) = v41;
    if (v41 >= v30)
    {
      char v51 = (char *)*v13;
      uint64_t v52 = (v41 - (unsigned char *)*v13) >> 2;
      unint64_t v53 = v52 + 1;
      if ((unint64_t)(v52 + 1) >> 62) {
        abort();
      }
      uint64_t v54 = v30 - v51;
      if (v54 >> 1 > v53) {
        unint64_t v53 = v54 >> 1;
      }
      if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v55 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v55 = v53;
      }
      if (v55)
      {
        uint64_t v56 = (char *)sub_1002C44F0(a1 + 88, v55);
        char v51 = *(char **)(a1 + 72);
        unint64_t v41 = *(char **)(a1 + 80);
      }
      else
      {
        uint64_t v56 = 0;
      }
      uint64_t v57 = &v56[4 * v52];
      int v30 = &v56[4 * v55];
      *(_DWORD *)uint64_t v57 = 6;
      uint64_t v50 = v57 + 4;
      while (v41 != v51)
      {
        int v58 = *((_DWORD *)v41 - 1);
        v41 -= 4;
        *((_DWORD *)v57 - 1) = v58;
        v57 -= 4;
      }
      *(void *)(a1 + 72) = v57;
      *(void *)(a1 + 80) = v50;
      *(void *)(a1 + 88) = v30;
      if (v51)
      {
        operator delete(v51);
        int v30 = *v31;
      }
    }
    else
    {
      *(_DWORD *)unint64_t v41 = 6;
      uint64_t v50 = v41 + 4;
    }
    *(void *)(a1 + 80) = v50;
    if (v50 >= v30)
    {
      v59 = (char *)*v13;
      uint64_t v60 = (v50 - (unsigned char *)*v13) >> 2;
      unint64_t v61 = v60 + 1;
      if ((unint64_t)(v60 + 1) >> 62) {
        abort();
      }
      uint64_t v62 = v30 - v59;
      if (v62 >> 1 > v61) {
        unint64_t v61 = v62 >> 1;
      }
      if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v63 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v63 = v61;
      }
      if (v63)
      {
        char v64 = (char *)sub_1002C44F0(a1 + 88, v63);
        v59 = *(char **)(a1 + 72);
        uint64_t v50 = *(char **)(a1 + 80);
      }
      else
      {
        char v64 = 0;
      }
      char v65 = &v64[4 * v60];
      int v66 = &v64[4 * v63];
      *(_DWORD *)char v65 = 7;
      __uint64_t v14 = v65 + 4;
      while (v50 != v59)
      {
        int v67 = *((_DWORD *)v50 - 1);
        v50 -= 4;
        *((_DWORD *)v65 - 1) = v67;
        v65 -= 4;
      }
      *(void *)(a1 + 72) = v65;
      *(void *)(a1 + 80) = v14;
      *(void *)(a1 + 88) = v66;
      if (v59) {
        operator delete(v59);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v50 = 7;
      __uint64_t v14 = v50 + 4;
    }
    *(void *)(a1 + 80) = v14;
    *(unsigned char *)(a1 + 68) |= 0xF0u;
  }
  *(_DWORD *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 69) = 1;
  int v68 = *(int **)(a1 + 72);
  if (v68 == (int *)v14)
  {
    int v70 = *(_DWORD *)(a1 + 152);
  }
  else
  {
    uint64_t v69 = 0;
    int v70 = *(_DWORD *)(a1 + 152);
    do
    {
      int v71 = *v68++;
      if (v71 == v70) {
        ++v69;
      }
    }
    while (v68 != (int *)v14);
    if (v69)
    {
LABEL_114:
      *(unsigned char *)(a1 + 69) = v70;
      *(unsigned char *)(a1 + 144) = 1;
      uint64_t v72 = qword_100A19FD0;
      if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v82[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: fDebugForceUNIIBand set to a band to a supported band", (uint8_t *)v82, 2u);
      }
      goto LABEL_119;
    }
  }
  if (v70 != 8)
  {
    if (v70)
    {
      __int16 v73 = qword_100A19FD0;
      if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v82[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: fDebugForceUNIIBand set to a band that is not supported, ignoring fDebugForceUNIIBand", (uint8_t *)v82, 2u);
      }
      *(unsigned char *)(a1 + 144) = 0;
      goto LABEL_119;
    }
    goto LABEL_114;
  }
LABEL_119:
  uint64_t v74 = *(void *)(a1 + 72);
  uint64_t v75 = *(void *)(a1 + 80);
  int v76 = *(_DWORD *)(a1 + 148);
  uint64_t v77 = v75 - v74;
  if (v75 != v74)
  {
    uint64_t v78 = 0;
    unsigned int v79 = 0;
    unint64_t v80 = v77 >> 2;
    while (1)
    {
      int v81 = *(_DWORD *)(v74 + 4 * v78);
      if (v76 != v81) {
        break;
      }
      if (!*(unsigned char *)(a1 + 146))
      {
        int v81 = *(_DWORD *)(a1 + 148);
        break;
      }
      uint64_t v78 = ++v79;
      if (v80 <= v79) {
        goto LABEL_127;
      }
    }
    *(unsigned char *)(a1 + 69) = v81;
    *(_DWORD *)(a1 + 96) = v79;
  }
LABEL_127:
  *(_WORD *)(a1 + 53) = 257;
  *(unsigned char *)(a1 + 145) = v76 != *(unsigned __int8 *)(a1 + 69) || v76 == 1 || !*(unsigned char *)(a1 + 146);
LABEL_132:
  if ((sub_1002D0FA8(a1, a2) & 1) == 0) {
    sub_1002D1160(a1);
  }
}

void sub_1002D0F0C(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 240);
  uint64_t v1 = *(void **)(a1 + 240);
  *(_DWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 228) = 8;
  sub_1000486F0(a1 + 232, v1);
  *(v2 - 1) = v2;
  void *v2 = 0;
  v2[1] = 0;
  uint64_t v3 = qword_100A19FD0;
  if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Session Metrics cleared", v4, 2u);
  }
}

uint64_t sub_1002D0FA8(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(a1 + 56);
  if (!v4)
  {
    if (sub_1002CE55C(a1))
    {
LABEL_9:
      uint64_t v7 = qword_100A19FD0;
      if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        uint64_t v8 = "BandSwitchManager: ---------- Switch from ISM to HRB ----------";
        int v9 = buf;
        goto LABEL_11;
      }
LABEL_12:
      uint64_t v10 = 1;
LABEL_21:
      sub_1002D150C(a1, a2, v10);
      return 1;
    }
    goto LABEL_16;
  }
  int v5 = *(unsigned __int8 *)(v4 + 1373);
  if ((sub_1002CE55C(a1) & 1) == 0)
  {
    if (v5)
    {
      uint64_t v11 = qword_100A19FD0;
      BOOL v12 = os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT);
      uint64_t v10 = 0;
      if (!v12) {
        goto LABEL_21;
      }
      __int16 v17 = 0;
      uint64_t v13 = "BandSwitchManager: ---------- Switch from HRB to ISM ----------";
      __uint64_t v14 = (uint8_t *)&v17;
LABEL_20:
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v13, v14, 2u);
      uint64_t v10 = 0;
      goto LABEL_21;
    }
LABEL_16:
    if ((*(unsigned __int8 *)(a1 + 71) | 8) == 8) {
      return 0;
    }
    uint64_t v11 = qword_100A19FD0;
    BOOL v15 = os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT);
    uint64_t v10 = 0;
    if (!v15) {
      goto LABEL_21;
    }
    __int16 v16 = 0;
    uint64_t v13 = "BandSwitchManager: ---------- Switch from HRB in progress to ISM ----------";
    __uint64_t v14 = (uint8_t *)&v16;
    goto LABEL_20;
  }
  if (!v5) {
    goto LABEL_9;
  }
  uint64_t result = 0;
  if (a2 <= 0x13 && ((1 << a2) & 0xC8000) != 0)
  {
    uint64_t v7 = qword_100A19FD0;
    if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v18 = 0;
      uint64_t v8 = "BandSwitchManager: ---------- Change from HRB to HRB ----------";
      int v9 = (uint8_t *)&v18;
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v8, v9, 2u);
      goto LABEL_12;
    }
    goto LABEL_12;
  }
  return result;
}

void sub_1002D1160(uint64_t a1)
{
  sub_1002CF7C0(a1, 1u);
  uint64_t v1 = qword_100A19FD0;
  if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: ---------- BSM State Machine END ----------", v2, 2u);
  }
}

void sub_1002D11D0(uint64_t a1)
{
  int v7 = 0;
  uint64_t v2 = sub_100017768();
  sub_10004191C(buf, "BSM");
  sub_10004191C(__p, "DebounceOverride");
  (*(void (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v2 + 128))(v2, buf, __p, &v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(*(void **)buf);
  }
  int v3 = v7;
  if ((v7 - 1) > 0x77)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_ERROR)) {
      sub_1007530B4();
    }
  }
  else
  {
    *(_DWORD *)(a1 + 64) = v7;
    uint64_t v4 = qword_100A19FD0;
    if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Overriding Debounce value to %d seconds", buf, 8u);
    }
  }
}

void sub_1002D1330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1002D136C(uint64_t a1, char *__src, _DWORD *a3)
{
  uint64_t v4 = __src;
  char v6 = *(char **)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  uint64_t v7 = a1 + 16;
  unint64_t v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    __uint64_t v14 = *(unsigned char **)a1;
    unint64_t v15 = ((uint64_t)&v6[-*(void *)a1] >> 2) + 1;
    if (v15 >> 62) {
      abort();
    }
    uint64_t v16 = (__src - v14) >> 2;
    uint64_t v17 = v8 - (void)v14;
    if (v17 >> 1 > v15) {
      unint64_t v15 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v15;
    }
    uint64_t v25 = v7;
    if (v18) {
      uint64_t v19 = (char *)sub_1002C44F0(v7, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    std::string __p = v19;
    unint64_t v22 = &v19[4 * v16];
    __int16 v23 = v22;
    int v24 = &v19[4 * v18];
    sub_1002D3D44(&__p, a3);
    uint64_t v4 = sub_1002D3E54((void **)a1, (uint64_t)&__p, v4);
    if (v23 != v22) {
      v23 += (v22 - v23 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(_DWORD *)__src = *a3;
    *(void *)(a1 + 8) = __src + 4;
  }
  else
  {
    uint64_t v10 = __src + 4;
    uint64_t v11 = v6 - 4;
    BOOL v12 = v6;
    while (v11 < v6)
    {
      int v13 = *(_DWORD *)v11;
      v11 += 4;
      *(_DWORD *)BOOL v12 = v13;
      v12 += 4;
    }
    *(void *)(a1 + 8) = v12;
    if (v6 != v10) {
      memmove(&v6[-4 * ((v6 - v10) >> 2)], __src, v6 - v10);
    }
    *(_DWORD *)uint64_t v4 = *a3;
  }
  return v4;
}

void sub_1002D14D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002D150C(uint64_t a1, int a2, uint64_t a3)
{
  sub_1002CF7C0(a1, 4u);
  char v6 = qword_100A19FD0;
  if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = "2.4Ghz";
    if (a3 == 1) {
      uint64_t v7 = "HRB";
    }
    int v18 = 136315138;
    uint64_t v19 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Switching band to %s", (uint8_t *)&v18, 0xCu);
  }
  if (a3 == 1)
  {
    a3 = *(unsigned __int8 *)(a1 + 69);
    *(unsigned char *)(a1 + 228) = a3;
  }
  else
  {
    if (*(_DWORD *)(a1 + 224) != 6) {
      *(_DWORD *)(a1 + 224) = a2;
    }
    if (a3) {
      a3 = *(unsigned __int8 *)(a1 + 69);
    }
  }
  unint64_t v8 = qword_100A19FD0;
  if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
  {
    if (a3 > 8) {
      unint64_t v9 = "Unknown BSM Band Code";
    }
    else {
      unint64_t v9 = off_1009A32A0[(char)a3];
    }
    unint64_t v10 = *(char *)(a1 + 71);
    if (v10 > 8) {
      uint64_t v11 = "Unknown BSM Band Code";
    }
    else {
      uint64_t v11 = off_1009A32A0[v10];
    }
    unint64_t v12 = *(char *)(a1 + 70);
    if (v12 > 8) {
      int v13 = "Unknown BSM Band Code";
    }
    else {
      int v13 = off_1009A32A0[v12];
    }
    int v18 = 136315650;
    uint64_t v19 = v9;
    __int16 v20 = 2080;
    unint64_t v21 = v11;
    __int16 v22 = 2080;
    __int16 v23 = v13;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Band to Switch to %s, Band Switch under progress %s, Band Switch Queued %s", (uint8_t *)&v18, 0x20u);
  }
  *(unsigned char *)(a1 + 70) = a3;
  int v14 = *(unsigned __int8 *)(a1 + 71);
  if (v14 != 8)
  {
    if (a3 == v14)
    {
      *(unsigned char *)(a1 + 70) = 8;
      uint64_t v16 = qword_100A19FD0;
      if (!os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_32;
      }
      LOWORD(v18) = 0;
      uint64_t v17 = "BandSwitchManager: redundant Band Switch to the same band, Ignoring Bandswitch";
    }
    else
    {
      uint64_t v16 = qword_100A19FD0;
      if (!os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_32;
      }
      LOWORD(v18) = 0;
      uint64_t v17 = "BandSwitchManager: Band switch under progress for a different band, will wait for it to complete";
    }
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v17, (uint8_t *)&v18, 2u);
    goto LABEL_32;
  }
  *(unsigned char *)(a1 + 71) = a3;
  *(unsigned char *)(a1 + 70) = 8;
  unint64_t v15 = qword_100A19FD0;
  if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v18) = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: No bandswitch in progress, starting one ASAP", (uint8_t *)&v18, 2u);
  }
  sub_1002D17B8(a1, *(void *)(a1 + 56) + 128, a3);
LABEL_32:
  sub_1002D1160(a1);
}

BOOL sub_1002D17B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = *(_DWORD *)(a1 + 48);
  if (v6 != 4 && !*(unsigned char *)(a1 + 147))
  {
    uint64_t v7 = qword_100A19FD0;
    if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_FAULT)) {
      sub_1007530E8(v6, v7);
    }
  }
  *(unsigned char *)(a1 + 147) = 0;
  unint64_t v8 = qword_100A19FD0;
  if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Sending hrbChangeConnectionBand VSC", v11, 2u);
  }
  uint64_t v9 = sub_10003FB34();
  return (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 1416))(v9, a2, a3, 1) == 0;
}

void sub_1002D18BC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = qword_100A19FD0;
  BOOL v4 = os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    uint64_t v5 = *(int *)(v2 + 48);
    if (v5 > 4) {
      unsigned int v6 = "Unknown BSM State";
    }
    else {
      unsigned int v6 = off_1009A3278[v5];
    }
    uint64_t v7 = sub_1002CE538(v4, *(_DWORD *)(a1 + 40));
    int v8 = 136446466;
    uint64_t v9 = v6;
    __int16 v10 = 2082;
    uint64_t v11 = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: ---------- BSM State Machine START. Current State: %{public}s, Input Event: %{public}s ----------", (uint8_t *)&v8, 0x16u);
  }
  sub_1002D00AC(v2, *(_DWORD *)(a1 + 40));
}

void sub_1002D19B0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = sub_1004AF8EC();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_1002D1A40;
  v7[3] = &unk_1009A0160;
  v7[4] = a1;
  v7[5] = a2;
  char v8 = a3;
  sub_100013018(v6, v7);
}

void sub_1002D1A40(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(int **)(a1 + 40);
  __int16 v4 = *((_WORD *)v2 + 2);
  int v27 = *v2;
  __int16 v28 = v4;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009A3110);
  }
  uint64_t v5 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v27, 1);
  if (v5)
  {
    uint64_t v6 = v5;
    int v7 = *(unsigned __int8 *)(a1 + 48);
    if (*(void *)(v3 + 56) != v5)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_ERROR)) {
        sub_1007531D4();
      }
      *(void *)(v3 + 56) = v6;
    }
    sub_10048DF48(v6, v7 != 1);
    __uint64_t v8 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
    if (v7 == 1)
    {
      __uint64_t v9 = v8 - *(void *)(v3 + 200);
      *(void *)(v3 + 200) = 0;
      *(void *)(v3 + 208) = v9;
      *(void *)buf = v3 + 224;
      __int16 v10 = sub_1002CBDEC((uint64_t **)(v3 + 232), (int *)(v3 + 224), (uint64_t)&unk_1007BE9D0, (_DWORD **)buf);
      ++*((_WORD *)v10 + 16);
      if (*(_DWORD *)(v3 + 224) == 5) {
        sub_1002CF494(v3);
      }
      *(_DWORD *)(v3 + 224) = 21;
    }
    else
    {
      *(void *)(v3 + 200) = v8;
    }
    if (*(void *)(v3 + 216))
    {
      __uint64_t v11 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
      unint64_t v12 = qword_100A19FD0;
      if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v13 = (v11 - *(void *)(v3 + 216)) / 0xF4240;
        sub_100474E18(*(void *)(v3 + 56), __p);
        if (v32 >= 0) {
          int v14 = __p;
        }
        else {
          int v14 = *(unsigned char **)__p;
        }
        unint64_t v15 = "2.4Ghz";
        *(_DWORD *)buf = 136446722;
        if (v7 != 1) {
          unint64_t v15 = "HRB";
        }
        *(void *)&uint8_t buf[4] = v14;
        __int16 v34 = 2080;
        unint64_t v35 = v15;
        __int16 v36 = 2048;
        unint64_t v37 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: ---------- BSM HRB band changed. Device %{public}s Frequency %s ----------(%llu ms)", buf, 0x20u);
        if (v32 < 0) {
          operator delete(*(void **)__p);
        }
      }
      *(void *)(v3 + 216) = 0;
    }
    else
    {
      uint64_t v16 = qword_100A19FD0;
      if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(*(void *)(v3 + 56), buf);
        uint64_t v17 = *(unsigned char **)buf;
        int v18 = "2.4Ghz";
        if (v36 >= 0) {
          uint64_t v17 = buf;
        }
        if (v7 != 1) {
          int v18 = "HRB";
        }
        *(_DWORD *)std::string __p = 136446466;
        *(void *)&__p[4] = v17;
        __int16 v30 = 2080;
        uint64_t v31 = v18;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: ---------- BSM HRB band changed. Device %{public}s Frequency %s ----------(Not initiated by BSM)", __p, 0x16u);
        if (SHIBYTE(v36) < 0) {
          operator delete(*(void **)buf);
        }
      }
    }
    sub_1002D1F60(v3);
    (**(void (***)(uint64_t, void))v3)(v3, *(void *)(v3 + 56));
    (*(void (**)(uint64_t, BOOL))(*(void *)v3 + 8))(v3, v7 != 1);
    uint64_t v19 = qword_100A19FD0;
    if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v20 = *(char *)(v3 + 71);
      if (v20 > 8) {
        unint64_t v21 = "Unknown BSM Band Code";
      }
      else {
        unint64_t v21 = off_1009A32A0[v20];
      }
      unint64_t v22 = *(char *)(v3 + 70);
      if (v22 > 8) {
        __int16 v23 = "Unknown BSM Band Code";
      }
      else {
        __int16 v23 = off_1009A32A0[v22];
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = v21;
      __int16 v34 = 2080;
      unint64_t v35 = v23;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Completed BandSwitch to %s and pending %s", buf, 0x16u);
    }
    uint64_t v24 = *(unsigned __int8 *)(v3 + 70);
    if (v24 == 8)
    {
      *(unsigned char *)(v3 + 71) = 8;
      *(unsigned char *)(v3 + 147) = 0;
    }
    else
    {
      uint64_t v25 = qword_100A19FD0;
      if (*(unsigned char *)(v3 + 136))
      {
        if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Debounce timer is enabled, will not band switch", buf, 2u);
          uint64_t v25 = qword_100A19FD0;
        }
        *(_WORD *)(v3 + 70) = 2056;
        uint64_t v24 = 8;
      }
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        if (v24 > 8) {
          uint64_t v26 = "Unknown BSM Band Code";
        }
        else {
          uint64_t v26 = off_1009A32A0[(char)v24];
        }
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = v26;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Starting pending BandSwitch to %s", buf, 0xCu);
        uint64_t v24 = *(unsigned __int8 *)(v3 + 70);
      }
      *(unsigned char *)(v3 + 71) = v24;
      *(unsigned char *)(v3 + 147) = 1;
      sub_1002D17B8(v3, *(void *)(v3 + 56) + 128, v24);
      *(unsigned char *)(v3 + 70) = 8;
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_FAULT))
  {
    sub_100753194();
  }
}

void sub_1002D1F60(uint64_t a1)
{
  if (sub_1002CF334(a1))
  {
    *(unsigned char *)(a1 + 136) = 1;
    uint64_t v2 = qword_100A19FD0;
    if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = *(_DWORD *)(a1 + 64);
      *(_DWORD *)buf = 67109120;
      int v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: AoS enabled on 2.4. Debounce for %d seconds", buf, 8u);
    }
    uint64_t v4 = sub_1004AF8EC();
    uint64_t v5 = (1000 * *(_DWORD *)(a1 + 64));
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    _DWORD v6[2] = sub_1002D2638;
    v6[3] = &unk_100997528;
    v6[4] = a1;
    sub_1004AFF58(v4, v5, v6);
  }
}

void sub_1002D2078(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v8 = sub_1004AF8EC();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_1002D2110;
  v9[3] = &unk_1009988A0;
  v9[4] = a1;
  v9[5] = a2;
  char v10 = a4;
  char v11 = a3;
  sub_100013018(v8, v9);
}

void sub_1002D2110(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(int **)(a1 + 40);
  __int16 v4 = *((_WORD *)v2 + 2);
  int v21 = *v2;
  __int16 v22 = v4;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009A3110);
  }
  uint64_t v5 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v21, 1);
  uint64_t v6 = qword_100A19FD0;
  if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(v5, __p);
    int v7 = v20 >= 0 ? __p : (void **)__p[0];
    int v8 = *(unsigned __int8 *)(a1 + 48);
    __uint64_t v9 = *(unsigned char *)(a1 + 49) == 1 ? "2.4Ghz" : "HRB";
    *(_DWORD *)buf = 136446722;
    uint64_t v24 = v7;
    __int16 v25 = 1024;
    int v26 = v8;
    __int16 v27 = 2080;
    __int16 v28 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: HRB band change for device %{public}s failed status:%d. Current band is still %s", buf, 0x1Cu);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
  }
  *(_WORD *)(v3 + 70) = 2056;
  if (*(unsigned char *)(a1 + 49) != 1)
  {
    *(unsigned char *)(v3 + 145) = 0;
    uint64_t v10 = *(int *)(v3 + 96);
    uint64_t v11 = *(void *)(v3 + 72);
    uint64_t v12 = *(void *)(v3 + 80) - v11;
    unint64_t v13 = v12 >> 2;
    unint64_t v14 = v10 + 1;
    if (v12 >> 2 <= (unint64_t)(v10 + 1)) {
      uint64_t v15 = v10 + 1;
    }
    else {
      uint64_t v15 = v12 >> 2;
    }
    while (1)
    {
      if (v13 <= v14)
      {
        uint64_t v16 = v15;
        goto LABEL_23;
      }
      uint64_t v16 = v14;
      int v17 = *(_DWORD *)(v11 + 4 * v14);
      if (*(_DWORD *)(v3 + 148) != v17) {
        break;
      }
      ++v14;
      if (!*(unsigned char *)(v3 + 146))
      {
        int v17 = *(_DWORD *)(v3 + 148);
        break;
      }
    }
    *(unsigned char *)(v3 + 69) = v17;
    *(_DWORD *)(v3 + 96) = v16;
    *(unsigned char *)(v3 + 145) = 1;
    int v18 = qword_100A19FD0;
    if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v24) = v17;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Sufficient Bandwidth for HRB TDD in band %d", buf, 8u);
      unint64_t v13 = (uint64_t)(*(void *)(v3 + 80) - *(void *)(v3 + 72)) >> 2;
    }
LABEL_23:
    if (v13 == v16) {
      *(_DWORD *)(v3 + 96) = -1;
    }
    sub_1002CE420(v3, 19);
  }
}

void sub_1002D236C(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v4 = sub_1004AF8EC();
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1002D2404;
    v5[3] = &unk_100997570;
    v5[4] = a1;
    int v6 = a2;
    sub_100013018(v4, v5);
  }
  else
  {
    *(void *)(a1 + 216) = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
  }
}

void sub_1002D2404(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = qword_100A19FD0;
  if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(a1 + 40);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: ---------- BSM Change Band VSC Failed status:%d, switching to ISM band----------", (uint8_t *)v5, 8u);
  }
  *(unsigned char *)(v2 + 145) = 0;
  *(_WORD *)(v2 + 70) = 2056;
  sub_1002CE420(v2, 19);
}

void sub_1002D24D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1004AF8EC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1002D2550;
  v5[3] = &unk_100998260;
  v5[4] = a1;
  void v5[5] = a2;
  sub_100013018(v4, v5);
}

void sub_1002D2550(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(int **)(a1 + 40);
  __int16 v3 = *((_WORD *)v1 + 2);
  int v7 = *v1;
  __int16 v8 = v3;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009A3110);
  }
  uint64_t v4 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v7, 1);
  if (v4)
  {
    uint64_t v5 = v4;
    if (*(void *)(v2 + 56) != v4)
    {
      int v6 = qword_100A19FD0;
      if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_ERROR)) {
        sub_100753208(v5, v6);
      }
      *(void *)(v2 + 56) = v5;
      sub_10048DF48(v5, 0);
      uint64_t v5 = *(void *)(v2 + 56);
      *(unsigned char *)(v5 + 1372) = 0;
    }
    *(unsigned char *)(v5 + 1374) = 1;
    sub_1002CE420(v2, 16);
  }
}

void sub_1002D2638(uint64_t a1)
{
}

void sub_1002D2644(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1004AF8EC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1002D26C4;
  v5[3] = &unk_100998260;
  v5[4] = a1;
  void v5[5] = a2;
  sub_100013018(v4, v5);
}

void sub_1002D26C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1 == *(void *)(v2 + 56))
  {
    if (*(unsigned char *)(v1 + 1373))
    {
      if (*(void *)(v2 + 184)) {
        *(void *)(v2 + 192) = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW) - *(void *)(v2 + 184);
      }
      *(void *)(v2 + 208) = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW) - *(void *)(v2 + 200);
      *(_DWORD *)uint64_t v11 = 7;
      *(void *)buf = v11;
      uint64_t v4 = sub_1002CBDEC((uint64_t **)(v2 + 232), (int *)v11, (uint64_t)&unk_1007BE9D0, (_DWORD **)buf);
      ++*((_WORD *)v4 + 16);
      *(void *)(v2 + 200) = 0;
      sub_10048DF48(*(void *)(a1 + 40), 0);
      (*(void (**)(uint64_t, void))(*(void *)v2 + 8))(v2, 0);
      uint64_t v1 = *(void *)(a1 + 40);
    }
    *(unsigned char *)(v1 + 1372) = 0;
    uint64_t v5 = qword_100A19FD0;
    if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = 1;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Resetting hrbClassificationBands VSC with value 0x%x", buf, 8u);
    }
    uint64_t v6 = sub_10003FB34();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 1392))(v6, 1, 1);
    *(unsigned char *)(v2 + 143) = 1;
    *(unsigned char *)(v2 + 136) = 0;
    sub_1002CF494(v2);
    int v7 = qword_100A19FD0;
    if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(*(void *)(v2 + 56), buf);
      if (v10 >= 0) {
        __int16 v8 = buf;
      }
      else {
        __int16 v8 = *(uint8_t **)buf;
      }
      *(_DWORD *)uint64_t v11 = 136446210;
      uint64_t v12 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Discarding reference to %{public}s as it disconnected", v11, 0xCu);
      if (v10 < 0) {
        operator delete(*(void **)buf);
      }
    }
    *(void *)(v2 + 56) = 0;
  }
}

void sub_1002D2900(uint64_t a1, uint64_t a2)
{
}

void sub_1002D2908(uint64_t a1, char a2)
{
  if ((_os_feature_enabled_impl() & 1) == 0)
  {
    uint64_t v4 = sub_1004AF8EC();
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    _DWORD v5[2] = sub_1002D29A4;
    v5[3] = &unk_100998A58;
    v5[4] = a1;
    char v6 = a2;
    sub_100013018(v4, v5);
  }
}

void sub_1002D29A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (*(unsigned __int8 *)(v2 + 137) != v3)
  {
    *(unsigned char *)(v2 + 137) = v3;
    sub_1002CE420(v2, 8);
  }
}

void sub_1002D29CC(uint64_t a1, char a2)
{
}

void sub_1002D29D4(uint64_t a1, char a2)
{
  uint64_t v4 = sub_1004AF8EC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1002D2A58;
  v5[3] = &unk_100998A58;
  v5[4] = a1;
  char v6 = a2;
  sub_100013018(v4, v5);
}

void sub_1002D2A58(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (*(unsigned __int8 *)(v2 + 138) != v3)
  {
    *(unsigned char *)(v2 + 138) = v3;
    sub_1002CE420(v2, 9);
  }
}

void sub_1002D2A80(uint64_t a1, char a2)
{
}

void sub_1002D2A88(uint64_t a1, char a2)
{
  uint64_t v4 = sub_1004AF8EC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1002D2B0C;
  v5[3] = &unk_100998A58;
  v5[4] = a1;
  char v6 = a2;
  sub_100013018(v4, v5);
}

void sub_1002D2B0C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (*(unsigned __int8 *)(v2 + 139) != v3)
  {
    *(unsigned char *)(v2 + 139) = v3;
    sub_1002CE420(v2, 10);
  }
}

void sub_1002D2B34(uint64_t a1, char a2)
{
}

void sub_1002D2B3C(uint64_t a1, char a2)
{
  uint64_t v4 = sub_1004AF8EC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1002D2BC0;
  v5[3] = &unk_100998A58;
  v5[4] = a1;
  char v6 = a2;
  sub_100013018(v4, v5);
}

void sub_1002D2BC0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (*(unsigned __int8 *)(v2 + 140) != v3)
  {
    *(unsigned char *)(v2 + 140) = v3;
    sub_1002CE420(v2, 11);
  }
}

void sub_1002D2BE8(uint64_t a1, char a2)
{
}

void sub_1002D2BF0(uint64_t a1, char a2)
{
  if ((_os_feature_enabled_impl() & 1) == 0)
  {
    uint64_t v4 = sub_1004AF8EC();
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    _DWORD v5[2] = sub_1002D2C8C;
    v5[3] = &unk_100998A58;
    v5[4] = a1;
    char v6 = a2;
    sub_100013018(v4, v5);
  }
}

void sub_1002D2C8C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (*(unsigned __int8 *)(v2 + 141) != v3)
  {
    *(unsigned char *)(v2 + 141) = v3;
    sub_1002CE420(v2, 12);
  }
}

void sub_1002D2CB4(uint64_t a1, char a2)
{
}

void sub_1002D2CBC(uint64_t a1, char a2)
{
  uint64_t v4 = sub_1004AF8EC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1002D2D40;
  v5[3] = &unk_100998A58;
  v5[4] = a1;
  char v6 = a2;
  sub_100013018(v4, v5);
}

void sub_1002D2D40(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (*(unsigned __int8 *)(v2 + 142) != v3)
  {
    *(unsigned char *)(v2 + 142) = v3;
    sub_1002CE420(v2, 13);
  }
}

void sub_1002D2D68(uint64_t a1, char a2)
{
}

void sub_1002D2D70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_os_feature_enabled_impl() & 1) == 0)
  {
    uint64_t v6 = sub_1004AF8EC();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_1002D2E18;
    v7[3] = &unk_1009A12D0;
    v7[4] = a1;
    v7[5] = a2;
    void v7[6] = a3;
    sub_100013018(v6, v7);
  }
}

void sub_1002D2E18(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = (unsigned __int8 *)(v2 + 160);
  uint64_t v4 = (unsigned __int8 *)(a1 + 40);
  if (*(_DWORD *)(v2 + 164) != *(_DWORD *)(a1 + 44)
    || *v3 != *v4
    || *(unsigned __int8 *)(v2 + 168) != *(unsigned __int8 *)(a1 + 48))
  {
    *(_OWORD *)int v3 = *(_OWORD *)v4;
    sub_1002CE420(v2, 14);
  }
}

void sub_1002D2E6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1002D2E74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1004AF8EC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1002D2EF4;
  v5[3] = &unk_100998260;
  v5[4] = a1;
  void v5[5] = a2;
  sub_100013018(v4, v5);
}

void sub_1002D2EF4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(int **)(a1 + 40);
  int v3 = *v1;
  *(_DWORD *)(v2 + 259) = *(int *)((char *)v1 + 3);
  *(_DWORD *)(v2 + 256) = v3;
  uint64_t v4 = qword_100A19FD0;
  if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(v2 + 256);
    int v6 = *(unsigned __int8 *)(v2 + 257);
    int v7 = *(unsigned __int8 *)(v2 + 258);
    int v8 = *(unsigned __int8 *)(v2 + 259);
    int v9 = *(unsigned __int8 *)(v2 + 260);
    int v10 = *(unsigned __int8 *)(v2 + 261);
    int v11 = *(unsigned __int8 *)(v2 + 262);
    int v92 = 67110656;
    *(_DWORD *)int v93 = v5;
    *(_WORD *)&v93[4] = 1024;
    *(_DWORD *)&v93[6] = v6;
    LOWORD(v94) = 1024;
    *(_DWORD *)((char *)&v94 + 2) = v7;
    HIWORD(v94) = 1024;
    int v95 = v8;
    __int16 v96 = 1024;
    int v97 = v9;
    __int16 v98 = 1024;
    int v99 = v10;
    __int16 v100 = 1024;
    int v101 = v11;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Allowed channels array - unii1 %d, unii3 %d, unii4 %d, unii5a %d, unii5b %d, unii5c %d, unii5d %d", (uint8_t *)&v92, 0x2Cu);
  }
  uint64_t v12 = *(char *)(v2 + 69);
  unint64_t v13 = *(char **)(v2 + 72);
  *(void *)(v2 + 80) = v13;
  if (*(unsigned char *)(v2 + 257) && *(unsigned __int8 *)(v2 + 157) != 255)
  {
    unint64_t v14 = *(void *)(v2 + 88);
    if ((unint64_t)v13 >= v14)
    {
      uint64_t v15 = v14 - (void)v13;
      uint64_t v16 = v15 >> 1;
      if ((unint64_t)(v15 >> 1) <= 1) {
        uint64_t v16 = 1;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v16;
      }
      int v18 = sub_1002C44F0(v2 + 88, v17);
      uint64_t v19 = *(char **)(v2 + 72);
      char v20 = *(char **)(v2 + 80);
      __int16 v22 = &v18[v21];
      *int v18 = 2;
      unint64_t v13 = (char *)(v18 + 1);
      while (v20 != v19)
      {
        int v23 = *((_DWORD *)v20 - 1);
        v20 -= 4;
        *--int v18 = v23;
      }
      *(void *)(v2 + 72) = v18;
      *(void *)(v2 + 80) = v13;
      *(void *)(v2 + 88) = v22;
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v13 = 2;
      v13 += 4;
    }
    *(void *)(v2 + 80) = v13;
  }
  if (*(unsigned char *)(v2 + 256) && *(unsigned __int8 *)(v2 + 156) != 255)
  {
    unint64_t v24 = *(void *)(v2 + 88);
    if ((unint64_t)v13 >= v24)
    {
      int v26 = *(char **)(v2 + 72);
      uint64_t v27 = (v13 - v26) >> 2;
      unint64_t v28 = v27 + 1;
      if ((unint64_t)(v27 + 1) >> 62) {
        abort();
      }
      uint64_t v29 = v24 - (void)v26;
      if (v29 >> 1 > v28) {
        unint64_t v28 = v29 >> 1;
      }
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v30 = v28;
      }
      if (v30)
      {
        uint64_t v31 = (char *)sub_1002C44F0(v2 + 88, v30);
        int v26 = *(char **)(v2 + 72);
        unint64_t v13 = *(char **)(v2 + 80);
      }
      else
      {
        uint64_t v31 = 0;
      }
      char v32 = &v31[4 * v27];
      int v33 = &v31[4 * v30];
      *(_DWORD *)char v32 = 1;
      __int16 v25 = v32 + 4;
      while (v13 != v26)
      {
        int v34 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *((_DWORD *)v32 - 1) = v34;
        v32 -= 4;
      }
      *(void *)(v2 + 72) = v32;
      *(void *)(v2 + 80) = v25;
      *(void *)(v2 + 88) = v33;
      if (v26) {
        operator delete(v26);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v13 = 1;
      __int16 v25 = v13 + 4;
    }
    *(void *)(v2 + 80) = v25;
    unint64_t v13 = v25;
  }
  if (*(unsigned char *)(v2 + 259) && *(unsigned __int8 *)(v2 + 158) != 255)
  {
    unint64_t v35 = *(void *)(v2 + 88);
    if ((unint64_t)v13 >= v35)
    {
      unint64_t v37 = *(char **)(v2 + 72);
      uint64_t v38 = (v13 - v37) >> 2;
      unint64_t v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 62) {
        abort();
      }
      uint64_t v40 = v35 - (void)v37;
      if (v40 >> 1 > v39) {
        unint64_t v39 = v40 >> 1;
      }
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v41 = v39;
      }
      if (v41)
      {
        int v42 = (char *)sub_1002C44F0(v2 + 88, v41);
        unint64_t v37 = *(char **)(v2 + 72);
        unint64_t v13 = *(char **)(v2 + 80);
      }
      else
      {
        int v42 = 0;
      }
      uint64_t v43 = &v42[4 * v38];
      unint64_t v44 = &v42[4 * v41];
      *(_DWORD *)uint64_t v43 = 4;
      __int16 v36 = v43 + 4;
      while (v13 != v37)
      {
        int v45 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *((_DWORD *)v43 - 1) = v45;
        v43 -= 4;
      }
      *(void *)(v2 + 72) = v43;
      *(void *)(v2 + 80) = v36;
      *(void *)(v2 + 88) = v44;
      if (v37) {
        operator delete(v37);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v13 = 4;
      __int16 v36 = v13 + 4;
    }
    *(void *)(v2 + 80) = v36;
    unint64_t v13 = v36;
  }
  if (*(unsigned char *)(v2 + 260) && *(unsigned __int8 *)(v2 + 158) != 255)
  {
    unint64_t v46 = *(void *)(v2 + 88);
    if ((unint64_t)v13 >= v46)
    {
      int v48 = *(char **)(v2 + 72);
      uint64_t v49 = (v13 - v48) >> 2;
      unint64_t v50 = v49 + 1;
      if ((unint64_t)(v49 + 1) >> 62) {
        abort();
      }
      uint64_t v51 = v46 - (void)v48;
      if (v51 >> 1 > v50) {
        unint64_t v50 = v51 >> 1;
      }
      if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v52 = v50;
      }
      if (v52)
      {
        unint64_t v53 = (char *)sub_1002C44F0(v2 + 88, v52);
        int v48 = *(char **)(v2 + 72);
        unint64_t v13 = *(char **)(v2 + 80);
      }
      else
      {
        unint64_t v53 = 0;
      }
      uint64_t v54 = &v53[4 * v49];
      unint64_t v55 = &v53[4 * v52];
      *(_DWORD *)uint64_t v54 = 5;
      uint64_t v47 = v54 + 4;
      while (v13 != v48)
      {
        int v56 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *((_DWORD *)v54 - 1) = v56;
        v54 -= 4;
      }
      *(void *)(v2 + 72) = v54;
      *(void *)(v2 + 80) = v47;
      *(void *)(v2 + 88) = v55;
      if (v48) {
        operator delete(v48);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v13 = 5;
      uint64_t v47 = v13 + 4;
    }
    *(void *)(v2 + 80) = v47;
    unint64_t v13 = v47;
  }
  if (*(unsigned char *)(v2 + 261) && *(unsigned __int8 *)(v2 + 158) != 255)
  {
    unint64_t v57 = *(void *)(v2 + 88);
    if ((unint64_t)v13 >= v57)
    {
      v59 = *(char **)(v2 + 72);
      uint64_t v60 = (v13 - v59) >> 2;
      unint64_t v61 = v60 + 1;
      if ((unint64_t)(v60 + 1) >> 62) {
        abort();
      }
      uint64_t v62 = v57 - (void)v59;
      if (v62 >> 1 > v61) {
        unint64_t v61 = v62 >> 1;
      }
      if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v63 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v63 = v61;
      }
      if (v63)
      {
        char v64 = (char *)sub_1002C44F0(v2 + 88, v63);
        v59 = *(char **)(v2 + 72);
        unint64_t v13 = *(char **)(v2 + 80);
      }
      else
      {
        char v64 = 0;
      }
      char v65 = &v64[4 * v60];
      int v66 = &v64[4 * v63];
      *(_DWORD *)char v65 = 6;
      int v58 = v65 + 4;
      while (v13 != v59)
      {
        int v67 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *((_DWORD *)v65 - 1) = v67;
        v65 -= 4;
      }
      *(void *)(v2 + 72) = v65;
      *(void *)(v2 + 80) = v58;
      *(void *)(v2 + 88) = v66;
      if (v59) {
        operator delete(v59);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v13 = 6;
      int v58 = v13 + 4;
    }
    *(void *)(v2 + 80) = v58;
    unint64_t v13 = v58;
  }
  if (*(unsigned char *)(v2 + 262) && *(unsigned __int8 *)(v2 + 158) != 255)
  {
    unint64_t v68 = *(void *)(v2 + 88);
    if ((unint64_t)v13 >= v68)
    {
      int v70 = *(char **)(v2 + 72);
      uint64_t v71 = (v13 - v70) >> 2;
      unint64_t v72 = v71 + 1;
      if ((unint64_t)(v71 + 1) >> 62) {
        abort();
      }
      uint64_t v73 = v68 - (void)v70;
      if (v73 >> 1 > v72) {
        unint64_t v72 = v73 >> 1;
      }
      if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v74 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v74 = v72;
      }
      if (v74)
      {
        uint64_t v75 = (char *)sub_1002C44F0(v2 + 88, v74);
        int v70 = *(char **)(v2 + 72);
        unint64_t v13 = *(char **)(v2 + 80);
      }
      else
      {
        uint64_t v75 = 0;
      }
      int v76 = &v75[4 * v71];
      uint64_t v77 = &v75[4 * v74];
      *(_DWORD *)int v76 = 7;
      uint64_t v69 = v76 + 4;
      while (v13 != v70)
      {
        int v78 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *((_DWORD *)v76 - 1) = v78;
        v76 -= 4;
      }
      *(void *)(v2 + 72) = v76;
      *(void *)(v2 + 80) = v69;
      *(void *)(v2 + 88) = v77;
      if (v70) {
        operator delete(v70);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v13 = 7;
      uint64_t v69 = v13 + 4;
    }
    *(void *)(v2 + 80) = v69;
    unint64_t v13 = v69;
  }
  unsigned int v79 = *(char **)(v2 + 72);
  unint64_t v80 = v13;
  if (v79 != v13)
  {
    unint64_t v80 = *(char **)(v2 + 72);
    while (*(_DWORD *)v80 != *(unsigned __int8 *)(v2 + 69))
    {
      v80 += 4;
      if (v80 == v13)
      {
        unint64_t v80 = v13;
        break;
      }
    }
  }
  if (v80 == v13)
  {
    int v81 = *(unsigned __int8 *)(v2 + 145);
    *(unsigned char *)(v2 + 145) = 0;
    if (v13 != v79)
    {
      uint64_t v82 = 0;
      unsigned int v83 = 0;
      int v84 = *(_DWORD *)(v2 + 148);
      while (1)
      {
        int v85 = *(_DWORD *)&v79[4 * v82];
        if (v85 != v84) {
          break;
        }
        if (!*(unsigned char *)(v2 + 146)) {
          goto LABEL_127;
        }
        uint64_t v82 = ++v83;
        if ((v13 - v79) >> 2 <= (unint64_t)v83) {
          goto LABEL_132;
        }
      }
      LOBYTE(v84) = v85;
LABEL_127:
      *(unsigned char *)(v2 + 69) = v84;
      *(_DWORD *)(v2 + 96) = v83;
      *(unsigned char *)(v2 + 145) = 1;
      int v86 = qword_100A19FD0;
      if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
      {
        if (v84 > 8u) {
          size_t v87 = "Unknown BSM Band Code";
        }
        else {
          size_t v87 = off_1009A32A0[(char)v84];
        }
        int v92 = 136315138;
        *(void *)int v93 = v87;
        _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Channel map update - Sufficient Bandwidth for HRB TDD in band %s", (uint8_t *)&v92, 0xCu);
      }
    }
LABEL_132:
    int v88 = *(unsigned __int8 *)(v2 + 69);
    if (v88 != v12 || v81 != *(unsigned __int8 *)(v2 + 145))
    {
      long long v89 = qword_100A19FD0;
      if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
      {
        if (v12 > 8) {
          long long v90 = "Unknown BSM Band Code";
        }
        else {
          long long v90 = off_1009A32A0[v12];
        }
        if ((char)v88 > 8) {
          long long v91 = "Unknown BSM Band Code";
        }
        else {
          long long v91 = off_1009A32A0[(char)v88];
        }
        int v92 = 136315394;
        *(void *)int v93 = v90;
        *(_WORD *)&v93[8] = 2080;
        unsigned __int16 v94 = v91;
        _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEFAULT, "BandSwitchManager change channel map: ---------- Changing HRB Bands from %s to %s ----------", (uint8_t *)&v92, 0x16u);
      }
      sub_1002CE420(v2, 15);
    }
  }
  else
  {
    *(_DWORD *)(v2 + 96) = (unint64_t)(v80 - v79) >> 2;
  }
}

void sub_1002D3694(uint64_t a1, uint64_t a2)
{
}

void sub_1002D369C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_1004AF8EC();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1002D372C;
  v8[3] = &unk_1009A12D0;
  v8[4] = a1;
  void v8[5] = a4;
  v8[6] = a3;
  sub_100013018(v7, v8);
}

void sub_1002D372C(void *a1)
{
  uint64_t v1 = a1[4];
  unsigned int v2 = *(_DWORD *)(v1 + 148);
  unsigned int v3 = v2;
  unint64_t v4 = a1[5] - 1;
  if (v4 <= 9 && ((0x3D3u >> v4) & 1) != 0)
  {
    unsigned int v3 = dword_1007BBC70[v4];
    *(_DWORD *)(v1 + 148) = v3;
  }
  unint64_t v5 = a1[6];
  *(unsigned char *)(v1 + 146) = v5 > 0x28;
  int v6 = *(unsigned __int8 *)(v1 + 145);
  uint64_t v7 = *(char *)(v1 + 69);
  int v8 = qword_100A19FD0;
  if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
  {
    if (v2 > 8) {
      int v9 = "Unknown BSM Band Code";
    }
    else {
      int v9 = off_1009A32A0[v2];
    }
    if (v3 > 8) {
      int v10 = "Unknown BSM Band Code";
    }
    else {
      int v10 = off_1009A32A0[v3];
    }
    if (v7 > 8) {
      int v11 = "Unknown BSM Band Code";
    }
    else {
      int v11 = off_1009A32A0[v7];
    }
    int v25 = 136315906;
    int v26 = v9;
    __int16 v27 = 2080;
    unint64_t v28 = v10;
    __int16 v29 = 2048;
    unint64_t v30 = v5;
    __int16 v31 = 2080;
    char v32 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Wi-Fi switched from %s to %s and BW %lluMHz with HRB band %s", (uint8_t *)&v25, 0x2Au);
  }
  *(unsigned char *)(v1 + 145) = 0;
  if (*(unsigned char *)(v1 + 144))
  {
    uint64_t v12 = qword_100A19FD0;
    if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v25) = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Wi-Fi band change ignored because forced UNII band is set", (uint8_t *)&v25, 2u);
    }
  }
  else
  {
    uint64_t v14 = *(void *)(v1 + 72);
    uint64_t v13 = *(void *)(v1 + 80);
    uint64_t v15 = v13 - v14;
    if (v13 == v14)
    {
LABEL_23:
      int v21 = 0;
    }
    else
    {
      uint64_t v16 = 0;
      unsigned int v17 = 0;
      unint64_t v18 = v15 >> 2;
      int v19 = *(_DWORD *)(v1 + 148);
      while (1)
      {
        int v20 = *(_DWORD *)(v14 + 4 * v16);
        if (v20 != v19) {
          break;
        }
        if (!*(unsigned char *)(v1 + 146)) {
          goto LABEL_25;
        }
        uint64_t v16 = ++v17;
        if (v18 <= v17) {
          goto LABEL_23;
        }
      }
      LOBYTE(v19) = v20;
LABEL_25:
      *(unsigned char *)(v1 + 69) = v19;
      *(_DWORD *)(v1 + 96) = v17;
      int v21 = 1;
      *(unsigned char *)(v1 + 145) = 1;
      __int16 v22 = qword_100A19FD0;
      if (os_log_type_enabled((os_log_t)qword_100A19FD0, OS_LOG_TYPE_DEFAULT))
      {
        if (v19 > 8u) {
          int v23 = "Unknown BSM Band Code";
        }
        else {
          int v23 = off_1009A32A0[(char)v19];
        }
        if (v7 > 8) {
          unint64_t v24 = "Unknown BSM Band Code";
        }
        else {
          unint64_t v24 = off_1009A32A0[v7];
        }
        int v25 = 136315394;
        int v26 = v23;
        __int16 v27 = 2080;
        unint64_t v28 = v24;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Sufficient Bandwidth for HRB TDD in band %s and previous HRB %s", (uint8_t *)&v25, 0x16u);
        int v21 = *(unsigned __int8 *)(v1 + 145);
      }
    }
    if (v6 != v21 || *(unsigned __int8 *)(v1 + 69) != v7) {
      sub_1002CE420(v1, 18);
    }
  }
}

void sub_1002D3A14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

char *sub_1002D3A34(uint64_t a1, char *__src, char *a3)
{
  unsigned int v3 = a3;
  unint64_t v4 = __src;
  int v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      int v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      int v19 = 0;
    }
    int v20 = &v19[8 * v16];
    std::string __p = v19;
    __int16 v27 = v20;
    unint64_t v28 = v20;
    __int16 v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        int v23 = (char *)sub_1000405F8(v8, v22);
        int v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        __int16 v27 = v20;
        __int16 v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        __int16 v27 = v20;
      }
    }
    *(void *)int v20 = *(void *)v3;
    unint64_t v28 = v20 + 8;
    unint64_t v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    int v9 = __src + 8;
    int v10 = v6 - 8;
    int v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)unint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_1002D3C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002D3C74(id a1)
{
}

void sub_1002D3CB8()
{
}

void sub_1002D3CDC(id a1)
{
}

void sub_1002D3D20()
{
}

void sub_1002D3D44(void *a1, _DWORD *a2)
{
  unint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    unint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 1;
      }
      uint64_t v17 = (char *)sub_1002C44F0(a1[4], v16);
      int v19 = &v17[v16 & 0xFFFFFFFFFFFFFFFCLL];
      int v20 = (int *)a1[1];
      unint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        unint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFFCLL];
        uint64_t v22 = 4 * (v21 >> 2);
        int v23 = &v17[v16 & 0xFFFFFFFFFFFFFFFCLL];
        do
        {
          int v24 = *v20++;
          *(_DWORD *)int v23 = v24;
          v23 += 4;
          v22 -= 4;
        }
        while (v22);
      }
      int v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[4 * v18];
      if (v25)
      {
        operator delete(v25);
        unint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 2;
      BOOL v8 = v6 >> 2 < -1;
      uint64_t v9 = (v6 >> 2) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-4 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-4 * v12], v5, v4 - v5);
        unint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[4 * v11];
      unint64_t v4 = &v13[v14];
      a1[1] = v15;
    }
  }
  *(_DWORD *)unint64_t v4 = *a2;
  a1[2] = v4 + 4;
}

char *sub_1002D3E54(void **a1, uint64_t a2, char *__src)
{
  unint64_t v5 = *(char **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    BOOL v8 = __src;
    uint64_t v7 = *(char **)(a2 + 8);
    do
    {
      int v9 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v7 - 1) = v9;
      v7 -= 4;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    uint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  uint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  int64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

BOOL sub_1002D3F1C()
{
  return sub_100014448();
}

void *sub_1002D3F28(void *result, const char *a2)
{
  if (result)
  {
    unsigned int v3 = result;
    if (xpc_get_type(result) == (xpc_type_t)&_xpc_type_dictionary) {
      return (void *)(xpc_dictionary_get_value(v3, a2) != 0);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1002D3F84(void *a1, unsigned char *a2)
{
  if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_int64)
  {
    char value = xpc_int64_get_value(a1);
    uint64_t result = 0;
    *a2 = value;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_100753410(a1);
    }
    return 3;
  }
  return result;
}

uint64_t sub_1002D4004(void *a1, _WORD *a2)
{
  if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_int64)
  {
    __int16 value = xpc_int64_get_value(a1);
    uint64_t result = 0;
    *a2 = value;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_100753410(a1);
    }
    return 3;
  }
  return result;
}

uint64_t sub_1002D4084(void *a1, _DWORD *a2)
{
  if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_int64)
  {
    int value = xpc_int64_get_value(a1);
    uint64_t result = 0;
    *a2 = value;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_100753410(a1);
    }
    return 3;
  }
  return result;
}

uint64_t sub_1002D4104(void *a1, int64_t *a2)
{
  if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_int64)
  {
    int64_t value = xpc_int64_get_value(a1);
    uint64_t result = 0;
    *a2 = value;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_100753410(a1);
    }
    return 3;
  }
  return result;
}

uint64_t sub_1002D4184(void *a1, uint64_t a2)
{
  if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_data)
  {
    bytes_ptr = xpc_data_get_bytes_ptr(a1);
    size_t length = xpc_data_get_length(a1);
    sub_1000335D8(&v7, bytes_ptr, length);
    sub_100049EE0(a2, (uint64_t)&v7);
    uint64_t v7 = &off_100998428;
    if (v8) {
      sub_1000368F4(v8);
    }
    return 0;
  }
  if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_null) {
    return 0;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
    sub_100753488(a1);
  }
  return 3;
}

void sub_1002D4278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10) {
    sub_1000368F4(a10);
  }
  _Unwind_Resume(exception_object);
}

double sub_1002D42B0(void *a1, uint64_t a2)
{
  if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_data)
  {
    bytes_ptr = (int8x16_t *)xpc_data_get_bytes_ptr(a1);
    unsigned __int8 length = xpc_data_get_length(a1);
    sub_10071D1C4((uint64_t)&v7, bytes_ptr, length);
    double result = *(double *)&v7;
    *(_OWORD *)a2 = v7;
    *(_DWORD *)(a2 + 16) = v8;
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_100753500(a1);
  }
  return result;
}

uint64_t sub_1002D4390(void *a1, void *a2)
{
  unint64_t v5 = &off_100998428;
  uint64_t v6 = 0;
  uint64_t v3 = sub_1002D4184(a1, (uint64_t)&v5);
  if (!v3)
  {
    if (sub_100045F00((uint64_t)&v5) == 6)
    {
      sub_100052430((uint64_t)&v5, a2, 6uLL);
      uint64_t v3 = 0;
    }
    else
    {
      uint64_t v3 = 3;
    }
  }
  unint64_t v5 = &off_100998428;
  if (v6) {
    sub_1000368F4(v6);
  }
  return v3;
}

void sub_1002D4434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10) {
    sub_1000368F4(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002D4450(void *a1, uint64_t a2)
{
  if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_array)
  {
    applier[0] = _NSConcreteStackBlock;
    applier[1] = 3221225472;
    applier[2] = sub_1002D4524;
    applier[3] = &unk_1009A3318;
    applier[4] = a2;
    if (xpc_array_apply(a1, applier)) {
      return 0;
    }
    else {
      return 3;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_100753578(a1);
    }
    return 3;
  }
}

BOOL sub_1002D4524(uint64_t a1, uint64_t a2, void *a3)
{
  long long v24 = 0uLL;
  int v25 = 0;
  sub_10071D13C(&v24);
  sub_1002D42B0(a3, (uint64_t)&v24);
  int v6 = v5;
  if (!v5)
  {
    long long v7 = *(void **)(a1 + 32);
    for (uint64_t i = (unsigned __int8 *)*v7; i != (unsigned __int8 *)v7[1]; i += 20)
    {
      if (sub_10022A44C(i, (unsigned __int8 *)&v24)) {
        return v6 == 0;
      }
      long long v7 = *(void **)(a1 + 32);
    }
    unint64_t v9 = v7[2];
    if ((unint64_t)i >= v9)
    {
      unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&i[-*v7] >> 2);
      if (v12 + 1 > 0xCCCCCCCCCCCCCCCLL) {
        abort();
      }
      unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - *v7) >> 2);
      uint64_t v14 = 2 * v13;
      if (2 * v13 <= v12 + 1) {
        uint64_t v14 = v12 + 1;
      }
      if (v13 >= 0x666666666666666) {
        unint64_t v15 = 0xCCCCCCCCCCCCCCCLL;
      }
      else {
        unint64_t v15 = v14;
      }
      if (v15) {
        unint64_t v16 = (char *)sub_10003767C((uint64_t)(v7 + 2), v15);
      }
      else {
        unint64_t v16 = 0;
      }
      uint64_t v17 = &v16[20 * v12];
      uint64_t v18 = &v16[20 * v15];
      long long v19 = v24;
      *((_DWORD *)v17 + 4) = v25;
      *(_OWORD *)uint64_t v17 = v19;
      uint64_t v11 = v17 + 20;
      uint64_t v21 = (char *)*v7;
      int v20 = (char *)v7[1];
      if (v20 != (char *)*v7)
      {
        do
        {
          long long v22 = *(_OWORD *)(v20 - 20);
          *((_DWORD *)v17 - 1) = *((_DWORD *)v20 - 1);
          *(_OWORD *)(v17 - 20) = v22;
          v17 -= 20;
          v20 -= 20;
        }
        while (v20 != v21);
        int v20 = (char *)*v7;
      }
      void *v7 = v17;
      v7[1] = v11;
      _DWORD v7[2] = v18;
      if (v20) {
        operator delete(v20);
      }
    }
    else
    {
      long long v10 = v24;
      *((_DWORD *)i + 4) = v25;
      *(_OWORD *)uint64_t i = v10;
      uint64_t v11 = (char *)(i + 20);
    }
    v7[1] = v11;
  }
  return v6 == 0;
}

uint64_t sub_1002D46E0(void *a1, uint64_t a2)
{
  if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_array)
  {
    applier[0] = _NSConcreteStackBlock;
    applier[1] = 3221225472;
    applier[2] = sub_1002D47B4;
    applier[3] = &unk_1009A3318;
    applier[4] = a2;
    if (xpc_array_apply(a1, applier)) {
      return 0;
    }
    else {
      return 3;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_100753578(a1);
    }
    return 3;
  }
}

BOOL sub_1002D47B4(uint64_t a1, uint64_t a2, void *a3)
{
  __int16 v20 = 0;
  int v4 = sub_1002D4004(a3, &v20);
  if (!v4)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_WORD **)(v5 + 8);
    unint64_t v7 = *(void *)(v5 + 16);
    if ((unint64_t)v6 >= v7)
    {
      unint64_t v9 = *(_WORD **)v5;
      uint64_t v10 = (uint64_t)v6 - *(void *)v5;
      if (v10 <= -3) {
        abort();
      }
      uint64_t v11 = v10 >> 1;
      unint64_t v12 = v7 - (void)v9;
      if (v12 <= (v10 >> 1) + 1) {
        unint64_t v13 = v11 + 1;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v12 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v14 = v13;
      }
      if (v14)
      {
        unint64_t v15 = (char *)sub_1002C5544(v5 + 16, v14);
        unint64_t v9 = *(_WORD **)v5;
        int v6 = *(_WORD **)(v5 + 8);
      }
      else
      {
        unint64_t v15 = 0;
      }
      unint64_t v16 = &v15[2 * v11];
      uint64_t v17 = &v15[2 * v14];
      *(_WORD *)unint64_t v16 = v20;
      int v8 = v16 + 2;
      while (v6 != v9)
      {
        __int16 v18 = *--v6;
        *((_WORD *)v16 - 1) = v18;
        v16 -= 2;
      }
      *(void *)uint64_t v5 = v16;
      *(void *)(v5 + 8) = v8;
      *(void *)(v5 + 16) = v17;
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      _WORD *v6 = v20;
      int v8 = v6 + 1;
    }
    *(void *)(v5 + 8) = v8;
  }
  return v4 == 0;
}

id sub_1002D48BC(void *a1, const char *a2)
{
  xpc_object_t value = xpc_dictionary_get_value(a1, a2);
  if (value)
  {
    uint64_t v3 = value;
    if (xpc_get_type(value) == (xpc_type_t)&_xpc_type_uuid) {
      xpc_object_t value = [objc_alloc((Class)NSUUID) initWithUUIDBytes:xpc_uuid_get_bytes(v3)];
    }
    else {
      xpc_object_t value = 0;
    }
  }

  return value;
}

id sub_1002D4930(void *a1, const char *a2)
{
  xpc_object_t value = xpc_dictionary_get_value(a1, a2);
  if (value)
  {
    uint64_t v3 = value;
    if (xpc_get_type(value) == (xpc_type_t)&_xpc_type_data)
    {
      bytes_ptr = xpc_data_get_bytes_ptr(v3);
      xpc_object_t value = +[NSData dataWithBytes:bytes_ptr length:xpc_data_get_length(v3)];
    }
    else
    {
      xpc_object_t value = 0;
    }
  }

  return value;
}

id sub_1002D49BC(void *a1, const char *a2)
{
  xpc_object_t value = xpc_dictionary_get_value(a1, a2);
  if (value)
  {
    uint64_t v3 = value;
    if (xpc_get_type(value) == (xpc_type_t)&_xpc_type_int64)
    {
      xpc_object_t value = +[NSNumber numberWithLongLong:xpc_int64_get_value(v3)];
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_100753658();
      }
      xpc_object_t value = 0;
    }
  }

  return value;
}

uint64_t sub_1002D4A5C(void *a1, const char *a2)
{
  uint64_t result = (uint64_t)xpc_dictionary_get_value(a1, a2);
  if (result)
  {
    uint64_t v3 = (void *)result;
    if (xpc_get_type((xpc_object_t)result) == (xpc_type_t)&_xpc_type_int64)
    {
      return xpc_int64_get_value(v3) != 0;
    }
    else if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_BOOL)
    {
      return xpc_BOOL_get_value(v3);
    }
    else
    {
      uint64_t result = os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR);
      if (result)
      {
        sub_1007536C0();
        return 0;
      }
    }
  }
  return result;
}

id sub_1002D4B14(void *a1, const char *a2)
{
  xpc_object_t value = xpc_dictionary_get_value(a1, a2);
  id v3 = value;
  if (value)
  {
    if (xpc_get_type(value) == (xpc_type_t)&_xpc_type_array)
    {
      int v4 = +[NSMutableArray array];
      for (size_t i = 0; ; ++i)
      {
        if (i >= xpc_array_get_count(v3))
        {
          id v3 = v4;
          goto LABEL_16;
        }
        xpc_object_t v6 = xpc_array_get_value(v3, i);
        unint64_t v7 = v6;
        if (!v6) {
          break;
        }
        if (xpc_get_type(v6) != (xpc_type_t)&_xpc_type_uuid) {
          break;
        }
        id v8 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:xpc_uuid_get_bytes(v7)];
        if (!v8) {
          break;
        }
        [v4 addObject:v8];
      }
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_100753728();
      }
      id v3 = 0;
LABEL_16:
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10075375C();
      }
      id v3 = 0;
    }
  }

  return v3;
}

void sub_1002D4C80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1002D4CA0(void *a1, const char *a2)
{
  xpc_object_t value = xpc_dictionary_get_value(a1, a2);
  id v3 = value;
  if (value)
  {
    if (xpc_get_type(value) == (xpc_type_t)&_xpc_type_array)
    {
      int v4 = +[NSMutableArray array];
      for (size_t i = 0; ; ++i)
      {
        if (i >= xpc_array_get_count(v3))
        {
          id v3 = v4;
          goto LABEL_16;
        }
        xpc_object_t v6 = xpc_array_get_value(v3, i);
        unint64_t v7 = v6;
        if (!v6) {
          break;
        }
        if (xpc_get_type(v6) != (xpc_type_t)&_xpc_type_data) {
          break;
        }
        bytes_ptr = xpc_data_get_bytes_ptr(v7);
        unint64_t v9 = +[NSData dataWithBytes:bytes_ptr length:xpc_data_get_length(v7)];
        if (!v9) {
          break;
        }
        [v4 addObject:v9];
      }
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_1007537C4();
      }
      id v3 = 0;
LABEL_16:
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10075375C();
      }
      id v3 = 0;
    }
  }

  return v3;
}

void sub_1002D4E24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1002D4E44(void *a1, const char *a2)
{
  xpc_object_t value = xpc_dictionary_get_value(a1, a2);
  id v3 = value;
  if (value)
  {
    if (xpc_get_type(value) == (xpc_type_t)&_xpc_type_array)
    {
      int v4 = +[NSMutableArray array];
      for (size_t i = 0; ; ++i)
      {
        if (i >= xpc_array_get_count(v3))
        {
          id v3 = v4;
          goto LABEL_18;
        }
        xpc_object_t v6 = xpc_array_get_value(v3, i);
        unint64_t v7 = v6;
        if (v6 && xpc_get_type(v6) == (xpc_type_t)&_xpc_type_data)
        {
          bytes_ptr = xpc_data_get_bytes_ptr(v7);
          id v8 = +[NSData dataWithBytes:bytes_ptr length:xpc_data_get_length(v7)];
        }
        else
        {
          id v8 = 0;
        }
        id v10 = [v8 mutableCopy];

        if (!v10) {
          break;
        }
        [v4 addObject:v10];
      }
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_1007537C4();
      }
      id v3 = 0;
LABEL_18:
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10075375C();
      }
      id v3 = 0;
    }
  }

  return v3;
}

void sub_1002D4FE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1002D500C(void *a1, const char *a2)
{
  xpc_object_t value = xpc_dictionary_get_value(a1, a2);
  id v3 = value;
  if (value)
  {
    if (xpc_get_type(value) == (xpc_type_t)&_xpc_type_array)
    {
      int v4 = +[NSMutableArray array];
      for (size_t i = 0; ; ++i)
      {
        if (i >= xpc_array_get_count(v3))
        {
          id v3 = v4;
          goto LABEL_16;
        }
        xpc_object_t v6 = xpc_array_get_value(v3, i);
        unint64_t v7 = v6;
        if (!v6) {
          break;
        }
        if (xpc_get_type(v6) != (xpc_type_t)&_xpc_type_string) {
          break;
        }
        id v8 = +[NSString stringWithUTF8String:xpc_string_get_string_ptr(v7)];
        if (!v8) {
          break;
        }
        [v4 addObject:v8];
      }
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_100753728();
      }
      id v3 = 0;
LABEL_16:
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10075375C();
      }
      id v3 = 0;
    }
  }

  return v3;
}

void sub_1002D5174(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1002D5194(void *a1, const char *a2)
{
  xpc_object_t value = xpc_dictionary_get_value(a1, a2);
  id v3 = value;
  if (value)
  {
    if (xpc_get_type(value) == (xpc_type_t)&_xpc_type_array)
    {
      int v4 = +[NSMutableArray array];
      size_t count = xpc_array_get_count(v3);
      if (count)
      {
        size_t v6 = 0;
        while (1)
        {
          xpc_object_t v7 = xpc_array_get_value(v3, v6);
          id v8 = v7;
          if (!v7) {
            break;
          }
          if (xpc_get_type(v7) != (xpc_type_t)&_xpc_type_int64) {
            break;
          }
          unint64_t v9 = +[NSNumber numberWithLongLong:xpc_int64_get_value(v8)];
          if (!v9) {
            break;
          }
          [v4 addObject:v9];

          if (count == ++v6) {
            goto LABEL_12;
          }
        }
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
          sub_1007537F8();
        }
        id v3 = 0;
      }
      else
      {
LABEL_12:
        id v3 = v4;
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10075375C();
      }
      id v3 = 0;
    }
  }

  return v3;
}

void sub_1002D530C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002D532C(id a1)
{
}

void sub_1002D5370()
{
}

void sub_1002D5394(unsigned char *a1)
{
  switch(*a1)
  {
    case 1:
    case 2:
      int v2 = *((unsigned __int16 *)a1 + 1);
      if (v2 == 16 || v2 == 8) {
        goto LABEL_7;
      }
      goto LABEL_20;
    case 3:
      if (*((_WORD *)a1 + 1) == 16)
      {
LABEL_7:
        int v4 = (void **)(a1 + 8);
        goto LABEL_19;
      }
      goto LABEL_20;
    case 4:
    case 8:
      int v4 = (void **)(a1 + 8);
      id v3 = (void *)*((void *)a1 + 1);
      size_t v5 = *((unsigned __int16 *)a1 + 1);
      goto LABEL_18;
    case 6:
      if (!*((_WORD *)a1 + 1)) {
        goto LABEL_16;
      }
      uint64_t v6 = 0;
      unint64_t v7 = 0;
      do
      {
        sub_1002D5394(*((void *)a1 + 1) + v6);
        ++v7;
        unint64_t v8 = *((unsigned __int16 *)a1 + 1);
        v6 += 16;
      }
      while (v7 < v8);
      goto LABEL_15;
    case 7:
      if (*((_WORD *)a1 + 1))
      {
        uint64_t v9 = 0;
        unint64_t v10 = 0;
        do
        {
          sub_1002D5394(*((void *)a1 + 1) + v9);
          ++v10;
          unint64_t v8 = *((unsigned __int16 *)a1 + 1);
          v9 += 16;
        }
        while (v10 < v8);
LABEL_15:
        size_t v5 = 16 * v8;
      }
      else
      {
LABEL_16:
        size_t v5 = 0;
      }
      int v4 = (void **)(a1 + 8);
      id v3 = (void *)*((void *)a1 + 1);
LABEL_18:
      bzero(v3, v5);
LABEL_19:
      free(*v4);
LABEL_20:
      bzero(a1, 0x10uLL);
      return;
    default:
      goto LABEL_20;
  }
}

uint64_t sub_1002D54E4(uint64_t *a1, uint64_t a2)
{
  if (*((unsigned char *)a1 + 15))
  {
    sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
    goto LABEL_75;
  }
  unsigned int v3 = *((unsigned __int16 *)a1 + 5);
  uint64_t v4 = *((unsigned __int16 *)a1 + 6);
  if (v3 <= v4)
  {
LABEL_75:
    uint64_t v40 = "ByteStream_NumReadBytesAvail(*pByteStream) >= 1";
    goto LABEL_77;
  }
  if (*((unsigned char *)a1 + 14) != 1)
  {
    uint64_t v40 = "(*pByteStream).__RWFlag == BYTESTREAM_READ";
LABEL_77:
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 336, v40);
  }
  uint64_t v6 = *a1;
  *((_WORD *)a1 + 6) = v4 + 1;
  int v7 = *(unsigned __int8 *)(v6 + v4);
  *(unsigned char *)a2 = v7;
  if ((int)(v3 - (v4 + 1)) <= 1) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 337, "ByteStream_NumReadBytesAvail(*pByteStream) >= 2");
  }
  size_t v8 = *(unsigned __int16 *)(v6 + v4 + 1);
  *(_WORD *)(a2 + 2) = v8;
  unsigned __int16 v9 = v4 + 3;
  *((_WORD *)a1 + 6) = v4 + 3;
  switch(v7)
  {
    case 0:
      return 1;
    case 1:
      if (v8 != 16)
      {
        if (v8 == 8)
        {
          unint64_t v10 = malloc_type_malloc(8uLL, 0x100004000313F17uLL);
          *(void *)(a2 + 8) = v10;
          if (*((unsigned char *)a1 + 14) != 1)
          {
            uint64_t v43 = "(*pByteStream).__RWFlag == BYTESTREAM_READ";
            goto LABEL_92;
          }
          if (*((unsigned char *)a1 + 15))
          {
            sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT"
                                   "_DataElements.cpp");
LABEL_91:
            uint64_t v43 = "ByteStream_NumReadBytesAvail(*pByteStream) >= (sizeof(OI_UINT64))";
LABEL_92:
            sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 347, v43);
          }
          uint64_t v11 = *((unsigned __int16 *)a1 + 6);
          if ((unint64_t)*((unsigned __int16 *)a1 + 5) - v11 <= 7) {
            goto LABEL_91;
          }
          goto LABEL_17;
        }
        if ((int)(v3 - v9) <= 3) {
          sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 352, "ByteStream_NumReadBytesAvail(*pByteStream) >= 4");
        }
        goto LABEL_67;
      }
      __int16 v20 = malloc_type_malloc(0x10uLL, 0x1000040451B5BE8uLL);
      *(void *)(a2 + 8) = v20;
      if (*((unsigned char *)a1 + 14) != 1)
      {
        int v45 = "(*pByteStream).__RWFlag == BYTESTREAM_READ";
        goto LABEL_100;
      }
      if (*((unsigned char *)a1 + 15))
      {
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
LABEL_99:
        int v45 = "ByteStream_NumReadBytesAvail(*pByteStream) >= (sizeof(OI_UINT128))";
LABEL_100:
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 350, v45);
      }
      uint64_t v21 = *((unsigned __int16 *)a1 + 6);
      if ((unint64_t)*((unsigned __int16 *)a1 + 5) - v21 <= 0xF) {
        goto LABEL_99;
      }
      goto LABEL_63;
    case 2:
      if (v8 != 16)
      {
        if (v8 == 8)
        {
          unint64_t v10 = malloc_type_malloc(8uLL, 0x100004000313F17uLL);
          *(void *)(a2 + 8) = v10;
          if (*((unsigned char *)a1 + 14) == 1)
          {
            if (*((unsigned char *)a1 + 15))
            {
              sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/"
                                     "BT_DataElements.cpp");
            }
            else
            {
              uint64_t v11 = *((unsigned __int16 *)a1 + 6);
              if ((unint64_t)*((unsigned __int16 *)a1 + 5) - v11 > 7)
              {
LABEL_17:
                void *v10 = *(void *)(*a1 + v11);
                __int16 v12 = *((_WORD *)a1 + 6) + 8;
                goto LABEL_68;
              }
            }
            unint64_t v44 = "ByteStream_NumReadBytesAvail(*pByteStream) >= (sizeof(OI_INT64))";
          }
          else
          {
            unint64_t v44 = "(*pByteStream).__RWFlag == BYTESTREAM_READ";
          }
          sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 359, v44);
        }
        if ((int)(v3 - v9) <= 3) {
          sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 364, "ByteStream_NumReadBytesAvail(*pByteStream) >= 4");
        }
        goto LABEL_67;
      }
      __int16 v20 = malloc_type_malloc(0x10uLL, 0x1000040451B5BE8uLL);
      *(void *)(a2 + 8) = v20;
      if (*((unsigned char *)a1 + 14) == 1)
      {
        if (*((unsigned char *)a1 + 15))
        {
          sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
        }
        else
        {
          uint64_t v21 = *((unsigned __int16 *)a1 + 6);
          if ((unint64_t)*((unsigned __int16 *)a1 + 5) - v21 > 0xF) {
            goto LABEL_63;
          }
        }
        unint64_t v46 = "ByteStream_NumReadBytesAvail(*pByteStream) >= (sizeof(OI_INT128))";
      }
      else
      {
        unint64_t v46 = "(*pByteStream).__RWFlag == BYTESTREAM_READ";
      }
      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 362, v46);
    case 3:
      if (v8 == 16)
      {
        __int16 v20 = malloc_type_malloc(0x10uLL, 0x1000040451B5BE8uLL);
        *(void *)(a2 + 8) = v20;
        if (*((unsigned char *)a1 + 14) == 1)
        {
          if (*((unsigned char *)a1 + 15))
          {
            sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT"
                                   "_DataElements.cpp");
          }
          else
          {
            uint64_t v21 = *((unsigned __int16 *)a1 + 6);
            if (*((unsigned __int16 *)a1 + 5) - (int)v21 > 15)
            {
LABEL_63:
              *__int16 v20 = *(_OWORD *)(*a1 + v21);
              __int16 v12 = *((_WORD *)a1 + 6) + 16;
              goto LABEL_68;
            }
          }
          int v42 = "ByteStream_NumReadBytesAvail(*pByteStream) >= (16)";
        }
        else
        {
          int v42 = "(*pByteStream).__RWFlag == BYTESTREAM_READ";
        }
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 371, v42);
      }
      if ((int)(v3 - v9) <= 3) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 373, "ByteStream_NumReadBytesAvail(*pByteStream) >= 4");
      }
LABEL_67:
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(v6 + (unsigned __int16)(v4 + 3));
      __int16 v12 = *((_WORD *)a1 + 6) + 4;
LABEL_68:
      *((_WORD *)a1 + 6) = v12;
      return 1;
    case 4:
      unint64_t v13 = malloc_type_malloc(v8, 0x100004077774924uLL);
      *(void *)(a2 + 8) = v13;
      if (*((unsigned char *)a1 + 14) != 1)
      {
        uint64_t v30 = "(*pByteStream).__RWFlag == BYTESTREAM_READ";
LABEL_80:
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 379, v30);
      }
      uint64_t v14 = v13;
      uint64_t v15 = *a1;
      uint64_t v16 = *((unsigned __int16 *)a1 + 6);
      if (*((unsigned char *)a1 + 15))
      {
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
        int v17 = 0;
      }
      else
      {
        int v17 = *((unsigned __int16 *)a1 + 5) - v16;
      }
      size_t v29 = *(unsigned __int16 *)(a2 + 2);
      if (v17 < (int)v29)
      {
        uint64_t v30 = "ByteStream_NumReadBytesAvail(*pByteStream) >= (copy->Size)";
        goto LABEL_80;
      }
      goto LABEL_55;
    case 5:
      if (v3 <= v9) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 383, "ByteStream_NumReadBytesAvail(*pByteStream) >= 1");
      }
      *((_WORD *)a1 + 6) = v4 + 4;
      *(unsigned char *)(a2 + 8) = *(unsigned char *)(v6 + (unsigned __int16)(v4 + 3)) != 0;
      return 1;
    case 6:
      uint64_t result = (uint64_t)malloc_type_malloc(16 * v8, 0x10F2040C8FBA5E1uLL);
      *(void *)(a2 + 8) = result;
      if (!result) {
        return result;
      }
      if (!*(_WORD *)(a2 + 2)) {
        return 0;
      }
      uint64_t v22 = 0;
      unint64_t v23 = 0;
      do
      {
        if ((sub_1002D54E4(a1, *(void *)(a2 + 8) + v22) & 1) == 0)
        {
          uint64_t v39 = sub_100017768();
          sub_1005C99C8(v39, 1);
        }
        ++v23;
        unint64_t v24 = *(unsigned __int16 *)(a2 + 2);
        v22 += 16;
      }
      while (v23 < v24);
      return v24 != 0;
    case 7:
      uint64_t result = (uint64_t)malloc_type_malloc(16 * v8, 0x10F2040C8FBA5E1uLL);
      *(void *)(a2 + 8) = result;
      if (!result) {
        return result;
      }
      if (!*(_WORD *)(a2 + 2)) {
        return 0;
      }
      uint64_t v25 = 0;
      unint64_t v26 = 0;
      while ((sub_1002D54E4(a1, *(void *)(a2 + 8) + v25) & 1) != 0)
      {
        ++v26;
        unint64_t v24 = *(unsigned __int16 *)(a2 + 2);
        v25 += 16;
        if (v26 >= v24) {
          return v24 != 0;
        }
      }
      __int16 v31 = qword_100A19EB0;
      uint64_t result = os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_ERROR);
      if (result)
      {
        sub_1007538B0(v31, v32, v33, v34, v35, v36, v37, v38);
        return 0;
      }
      return result;
    case 8:
      __int16 v27 = malloc_type_malloc(v8, 0x100004077774924uLL);
      *(void *)(a2 + 8) = v27;
      if (*((unsigned char *)a1 + 14) == 1)
      {
        uint64_t v14 = v27;
        uint64_t v15 = *a1;
        uint64_t v16 = *((unsigned __int16 *)a1 + 6);
        if (*((unsigned char *)a1 + 15))
        {
          sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
          int v28 = 0;
        }
        else
        {
          int v28 = *((unsigned __int16 *)a1 + 5) - v16;
        }
        size_t v29 = *(unsigned __int16 *)(a2 + 2);
        if (v28 >= (int)v29)
        {
LABEL_55:
          memmove(v14, (const void *)(v15 + v16), v29);
          __int16 v12 = *((_WORD *)a1 + 6) + *(_WORD *)(a2 + 2);
          goto LABEL_68;
        }
        unint64_t v41 = "ByteStream_NumReadBytesAvail(*pByteStream) >= (copy->Size)";
      }
      else
      {
        unint64_t v41 = "(*pByteStream).__RWFlag == BYTESTREAM_READ";
      }
      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 424, v41);
    default:
      __int16 v18 = qword_100A19EB0;
      if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_ERROR))
      {
        v47[0] = 67109376;
        v47[1] = v7;
        __int16 v48 = 1024;
        int v49 = v9;
        _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "SDP data element extraction error with type 0x%x, bytestream pos %d", (uint8_t *)v47, 0xEu);
        __int16 v18 = qword_100A19EB0;
      }
      uint64_t result = os_log_type_enabled(v18, OS_LOG_TYPE_FAULT);
      if (!result) {
        return result;
      }
      sub_10075382C(v18);
      return 0;
  }
}

BOOL sub_1002D5CE8(uint64_t *a1, unsigned __int8 *a2)
{
  if (*((unsigned char *)a1 + 15))
  {
    sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
    goto LABEL_84;
  }
  uint64_t v3 = *((unsigned __int16 *)a1 + 6);
  if (*((unsigned __int16 *)a1 + 5) <= v3)
  {
LABEL_84:
    unint64_t v50 = "ByteStream_NumReadBytesAvail(*pByteStream) >= 1";
    goto LABEL_86;
  }
  if (*((unsigned char *)a1 + 14) != 2)
  {
    unint64_t v50 = "(*pByteStream).__RWFlag == BYTESTREAM_WRITE";
LABEL_86:
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 439, v50);
  }
  char v5 = *a2;
  uint64_t v6 = *a1;
  *((_WORD *)a1 + 6) = v3 + 1;
  *(unsigned char *)(v6 + v3) = v5;
  if (*((unsigned char *)a1 + 15))
  {
    sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
    goto LABEL_88;
  }
  uint64_t v7 = *((unsigned __int16 *)a1 + 6);
  if (*((unsigned __int16 *)a1 + 5) - (int)v7 <= 1)
  {
LABEL_88:
    uint64_t v51 = "ByteStream_NumReadBytesAvail(*pByteStream) >= 2";
    goto LABEL_90;
  }
  if (*((unsigned char *)a1 + 14) != 2)
  {
    uint64_t v51 = "(*pByteStream).__RWFlag == BYTESTREAM_WRITE";
LABEL_90:
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 440, v51);
  }
  *(unsigned char *)(*a1 + v7) = a2[2];
  *(unsigned char *)(*a1 + *((unsigned __int16 *)a1 + 6) + 1) = a2[3];
  __int16 v8 = *((_WORD *)a1 + 6);
  unsigned __int16 v9 = v8 + 2;
  *((_WORD *)a1 + 6) = v8 + 2;
  int v10 = *a2;
  BOOL result = 1;
  switch(*a2)
  {
    case 0u:
      return result;
    case 1u:
      int v12 = *((unsigned __int16 *)a2 + 1);
      if (v12 != 16)
      {
        if (v12 == 8)
        {
          if (*((unsigned char *)a1 + 15))
          {
            sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT"
                                   "_DataElements.cpp");
          }
          else
          {
            uint64_t v13 = v9;
            if (*((unsigned __int16 *)a1 + 5) - (unint64_t)v9 > 7)
            {
              if (*((unsigned char *)a1 + 14) != 2)
              {
                uint64_t v14 = "(*pByteStream).__RWFlag == BYTESTREAM_WRITE";
                goto LABEL_108;
              }
              goto LABEL_19;
            }
          }
          uint64_t v14 = "ByteStream_NumReadBytesAvail(*pByteStream) >= (sizeof(OI_UINT64))";
LABEL_108:
          sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 450, v14);
        }
        if (*((unsigned char *)a1 + 15))
        {
          sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
        }
        else if (*((unsigned __int16 *)a1 + 5) - v9 > 3)
        {
          if (*((unsigned char *)a1 + 14) != 2)
          {
            uint64_t v33 = "(*pByteStream).__RWFlag == BYTESTREAM_WRITE";
            goto LABEL_118;
          }
LABEL_75:
          *(unsigned char *)(*a1 + v9) = *((_DWORD *)a2 + 2);
          *(unsigned char *)(*a1 + *((unsigned __int16 *)a1 + 6) + 1) = BYTE1(*((_DWORD *)a2 + 2));
          *(unsigned char *)(*a1 + *((unsigned __int16 *)a1 + 6) + 2) = *((_WORD *)a2 + 5);
          *(unsigned char *)(*a1 + *((unsigned __int16 *)a1 + 6) + 3) = a2[11];
          __int16 v16 = *((_WORD *)a1 + 6) + 4;
          goto LABEL_76;
        }
        uint64_t v33 = "ByteStream_NumReadBytesAvail(*pByteStream) >= 4";
LABEL_118:
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 454, v33);
      }
      if (*((unsigned char *)a1 + 15))
      {
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
      }
      else if (*((unsigned __int16 *)a1 + 5) - (unint64_t)v9 > 0xF)
      {
        if (*((unsigned char *)a1 + 14) != 2)
        {
          uint64_t v32 = "(*pByteStream).__RWFlag == BYTESTREAM_WRITE";
          goto LABEL_115;
        }
LABEL_71:
        *(_OWORD *)(*a1 + v9) = *(_OWORD *)*((void *)a2 + 1);
        __int16 v16 = *((_WORD *)a1 + 6) + 16;
        goto LABEL_76;
      }
      uint64_t v32 = "ByteStream_NumReadBytesAvail(*pByteStream) >= (sizeof(OI_UINT128))";
LABEL_115:
      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 452, v32);
    case 2u:
      int v15 = *((unsigned __int16 *)a2 + 1);
      if (v15 != 16)
      {
        if (v15 == 8)
        {
          if (*((unsigned char *)a1 + 15))
          {
            sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT"
                                   "_DataElements.cpp");
          }
          else
          {
            uint64_t v13 = v9;
            if (*((unsigned __int16 *)a1 + 5) - (unint64_t)v9 > 7)
            {
              if (*((unsigned char *)a1 + 14) == 2)
              {
LABEL_19:
                *(void *)(*a1 + v13) = **((void **)a2 + 1);
                __int16 v16 = *((_WORD *)a1 + 6) + 8;
LABEL_76:
                *((_WORD *)a1 + 6) = v16;
                return result;
              }
              uint64_t v54 = "(*pByteStream).__RWFlag == BYTESTREAM_WRITE";
LABEL_112:
              sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 460, v54);
            }
          }
          uint64_t v54 = "ByteStream_NumReadBytesAvail(*pByteStream) >= (sizeof(OI_INT64))";
          goto LABEL_112;
        }
        if (*((unsigned char *)a1 + 15))
        {
          sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
        }
        else if (*((unsigned __int16 *)a1 + 5) - v9 > 3)
        {
          if (*((unsigned char *)a1 + 14) == 2) {
            goto LABEL_75;
          }
          int v56 = "(*pByteStream).__RWFlag == BYTESTREAM_WRITE";
LABEL_126:
          sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 464, v56);
        }
        int v56 = "ByteStream_NumReadBytesAvail(*pByteStream) >= 4";
        goto LABEL_126;
      }
      if (*((unsigned char *)a1 + 15))
      {
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
      }
      else if (*((unsigned __int16 *)a1 + 5) - (unint64_t)v9 > 0xF)
      {
        if (*((unsigned char *)a1 + 14) == 2) {
          goto LABEL_71;
        }
        unint64_t v55 = "(*pByteStream).__RWFlag == BYTESTREAM_WRITE";
LABEL_122:
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 462, v55);
      }
      unint64_t v55 = "ByteStream_NumReadBytesAvail(*pByteStream) >= (sizeof(OI_INT128))";
      goto LABEL_122;
    case 3u:
      if (*((_WORD *)a2 + 1) == 16)
      {
        if (*((unsigned char *)a1 + 15))
        {
          sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
        }
        else if (*((unsigned __int16 *)a1 + 5) - (unint64_t)(unsigned __int16)(v8 + 2) > 0xF)
        {
          if (*((unsigned char *)a1 + 14) == 2) {
            goto LABEL_71;
          }
          int v17 = "(*pByteStream).__RWFlag == BYTESTREAM_WRITE";
LABEL_102:
          sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 470, v17);
        }
        int v17 = "ByteStream_NumReadBytesAvail(*pByteStream) >= (sizeof (OI_UUID128))";
        goto LABEL_102;
      }
      if (*((unsigned char *)a1 + 15))
      {
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
      }
      else if (*((unsigned __int16 *)a1 + 5) - v9 > 3)
      {
        if (*((unsigned char *)a1 + 14) == 2) {
          goto LABEL_75;
        }
        size_t v29 = "(*pByteStream).__RWFlag == BYTESTREAM_WRITE";
LABEL_105:
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 472, v29);
      }
      size_t v29 = "ByteStream_NumReadBytesAvail(*pByteStream) >= 4";
      goto LABEL_105;
    case 4u:
      uint64_t v18 = *a1;
      long long v19 = (const void *)*((void *)a2 + 1);
      if (*((unsigned char *)a1 + 15))
      {
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
        int v20 = 0;
      }
      else
      {
        int v20 = *((unsigned __int16 *)a1 + 5) - v9;
      }
      size_t v30 = *((unsigned __int16 *)a2 + 1);
      if (v20 < (int)v30)
      {
        __int16 v31 = "ByteStream_NumReadBytesAvail(*pByteStream) >= (elem->Size)";
LABEL_96:
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 477, v31);
      }
      if (*((unsigned char *)a1 + 14) != 2)
      {
        __int16 v31 = "(*pByteStream).__RWFlag == BYTESTREAM_WRITE";
        goto LABEL_96;
      }
      goto LABEL_58;
    case 5u:
      if (*((unsigned char *)a1 + 15))
      {
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
      }
      else if (*((unsigned __int16 *)a1 + 5) > v9)
      {
        if (*((unsigned char *)a1 + 14) == 2)
        {
          unsigned __int8 v21 = a2[8];
          uint64_t v22 = *a1;
          *((_WORD *)a1 + 6) = v8 + 3;
          *(unsigned char *)(v22 + (unsigned __int16)(v8 + 2)) = v21;
          return result;
        }
        unint64_t v52 = "(*pByteStream).__RWFlag == BYTESTREAM_WRITE";
LABEL_94:
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 481, v52);
      }
      unint64_t v52 = "ByteStream_NumReadBytesAvail(*pByteStream) >= 1";
      goto LABEL_94;
    case 6u:
      if (!*((_WORD *)a2 + 1)) {
        return result;
      }
      uint64_t v23 = 0;
      unint64_t v24 = 0;
      while ((sub_1002D5CE8(a1, *((void *)a2 + 1) + v23) & 1) != 0)
      {
        ++v24;
        v23 += 16;
        if (v24 >= *((unsigned __int16 *)a2 + 1)) {
          return 1;
        }
      }
      uint64_t v34 = qword_100A19EB0;
      BOOL result = os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      sub_1007538E8(v34, v35, v36, v37, v38, v39, v40, v41);
      return 0;
    case 7u:
      if (!*((_WORD *)a2 + 1)) {
        return result;
      }
      uint64_t v25 = 0;
      unint64_t v26 = 0;
      while ((sub_1002D5CE8(a1, *((void *)a2 + 1) + v25) & 1) != 0)
      {
        ++v26;
        v25 += 16;
        if (v26 >= *((unsigned __int16 *)a2 + 1)) {
          return 1;
        }
      }
      int v42 = qword_100A19EB0;
      BOOL result = os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_ERROR);
      if (result)
      {
        sub_100753920(v42, v43, v44, v45, v46, v47, v48, v49);
        return 0;
      }
      return result;
    case 8u:
      uint64_t v18 = *a1;
      long long v19 = (const void *)*((void *)a2 + 1);
      if (*((unsigned char *)a1 + 15))
      {
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
        int v27 = 0;
      }
      else
      {
        int v27 = *((unsigned __int16 *)a1 + 5) - v9;
      }
      size_t v30 = *((unsigned __int16 *)a2 + 1);
      if (v27 < (int)v30)
      {
        unint64_t v53 = "ByteStream_NumReadBytesAvail(*pByteStream) >= (elem->Size)";
        goto LABEL_99;
      }
      if (*((unsigned char *)a1 + 14) != 2)
      {
        unint64_t v53 = "(*pByteStream).__RWFlag == BYTESTREAM_WRITE";
LABEL_99:
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 506, v53);
      }
LABEL_58:
      memmove((void *)(v18 + v9), v19, v30);
      *((_WORD *)a1 + 6) += *((_WORD *)a2 + 1);
      return 1;
    default:
      int v28 = qword_100A19EB0;
      if (os_log_type_enabled((os_log_t)qword_100A19EB0, OS_LOG_TYPE_ERROR))
      {
        v57[0] = 67109376;
        v57[1] = v10;
        __int16 v58 = 1024;
        int v59 = v9;
        _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "Serialization: invalid SDP element type of 0x%x, bytestream pos %d", (uint8_t *)v57, 0xEu);
        int v28 = qword_100A19EB0;
      }
      BOOL result = os_log_type_enabled(v28, OS_LOG_TYPE_FAULT);
      if (!result) {
        return result;
      }
      sub_10075382C(v28);
      return 0;
  }
}

BOOL sub_1002D65C8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1 != 3 || *(unsigned char *)a2 != 3) {
    return 0;
  }
  int v2 = *(unsigned __int16 *)(a1 + 2);
  if (v2 != 2)
  {
    if (v2 == 16)
    {
      if (*(_WORD *)(a2 + 2) == 16)
      {
        uint64_t v6 = *(uint64_t **)(a1 + 8);
        uint64_t v7 = *(uint64_t **)(a2 + 8);
        uint64_t v9 = *v6;
        uint64_t v8 = v6[1];
        uint64_t v11 = *v7;
        uint64_t v10 = v7[1];
        return v9 == v11 && v8 == v10;
      }
      unsigned int v3 = *(_DWORD *)(a2 + 8);
      uint64_t v4 = *(uint64_t **)(a1 + 8);
      goto LABEL_15;
    }
    if (v2 != 4) {
      return 0;
    }
  }
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  if (*(_WORD *)(a2 + 2) == 16)
  {
    uint64_t v4 = *(uint64_t **)(a2 + 8);
LABEL_15:
    uint64_t v15 = v3 | 0x10000000000000;
    uint64_t v13 = *v4;
    uint64_t v14 = v4[1];
    return v13 == v15 && v14 == 0xFB349B5F80000080;
  }
  return v3 == *(_DWORD *)(a2 + 8);
}

uint64_t sub_1002D66C8(unsigned char *a1, uint64_t a2)
{
  bzero(a1, 0x10uLL);
  *((_WORD *)a1 + 1) = *(_WORD *)(a2 + 2);
  *a1 = *(unsigned char *)a2;
  switch(*(unsigned char *)a2)
  {
    case 0:
      return 1;
    case 1:
    case 2:
      int v4 = *(unsigned __int16 *)(a2 + 2);
      if (v4 == 16) {
        goto LABEL_7;
      }
      if (v4 != 8) {
        goto LABEL_8;
      }
      char v5 = malloc_type_malloc(8uLL, 0x100004000313F17uLL);
      *((void *)a1 + 1) = v5;
      *char v5 = **(void **)(a2 + 8);
      return 1;
    case 3:
      if (*(_WORD *)(a2 + 2) == 16)
      {
LABEL_7:
        uint64_t v7 = malloc_type_malloc(0x10uLL, 0x1000040451B5BE8uLL);
        *((void *)a1 + 1) = v7;
        _OWORD *v7 = *(_OWORD *)*(void *)(a2 + 8);
      }
      else
      {
LABEL_8:
        *((_DWORD *)a1 + 2) = *(_DWORD *)(a2 + 8);
      }
      return 1;
    case 4:
    case 8:
      uint64_t v6 = malloc_type_malloc(*(unsigned __int16 *)(a2 + 2), 0x100004077774924uLL);
      *((void *)a1 + 1) = v6;
      memcpy(v6, *(const void **)(a2 + 8), *(unsigned __int16 *)(a2 + 2));
      return 1;
    case 5:
      a1[8] = *(unsigned char *)(a2 + 8);
      return 1;
    case 6:
      uint64_t result = (uint64_t)malloc_type_malloc(16 * *(unsigned __int16 *)(a2 + 2), 0x10F2040C8FBA5E1uLL);
      *((void *)a1 + 1) = result;
      if (!result) {
        return result;
      }
      if (*(_WORD *)(a2 + 2))
      {
        uint64_t v9 = 0;
        unint64_t v10 = 0;
        int v11 = 0;
        do
        {
          if ((sub_1002D66C8(*((void *)a1 + 1) + 16 * v11, *(void *)(a2 + 8) + v9) & 1) == 0)
          {
            --*((_WORD *)a1 + 1);
            --v11;
          }
          ++v10;
          ++v11;
          v9 += 16;
        }
        while (v10 < *(unsigned __int16 *)(a2 + 2));
      }
      break;
    case 7:
      uint64_t result = (uint64_t)malloc_type_malloc(16 * *(unsigned __int16 *)(a2 + 2), 0x10F2040C8FBA5E1uLL);
      *((void *)a1 + 1) = result;
      if (!result) {
        return result;
      }
      if (*(_WORD *)(a2 + 2))
      {
        uint64_t v12 = 0;
        unint64_t v13 = 0;
        do
        {
          if ((sub_1002D66C8(*((void *)a1 + 1) + v12, *(void *)(a2 + 8) + v12) & 1) == 0) {
            --*((_WORD *)a1 + 1);
          }
          ++v13;
          v12 += 16;
        }
        while (v13 < *(unsigned __int16 *)(a2 + 2));
      }
      break;
    default:
      return 0;
  }
  return *((_WORD *)a1 + 1) != 0;
}

os_log_t *sub_1002D691C(os_log_t *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = os_log_create("com.apple.bluetooth", "BTAudio");
  return a1;
}

BOOL sub_1002D695C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  unsigned int v3 = off_1009FB1A8;
  *(void *)(a1 + 16) = a2 + (strlen(off_1009FB1A8) & 0xFFFFFFFFFFFFFFF8) + 56;
  size_t v4 = strlen(v3);
  return strncmp((const char *)(a2 + 41), v3, v4) == 0;
}

uint64_t sub_1002D69D0(uint64_t result)
{
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  return result;
}

unint64_t sub_1002D69D8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    if (!*(unsigned char *)(v1 + 40)) {
      return atomic_load((unint64_t *)(v1 + 24));
    }
    *(void *)(v1 + 8) = 0;
    *(void *)(v1 + 16) = 0;
    unint64_t v2 = atomic_load((unint64_t *)(v1 + 24));
    atomic_fetch_add((atomic_ullong *volatile)(*(void *)(a1 + 8) + 24), -(uint64_t)v2);
    uint64_t v3 = *(void *)(a1 + 8);
    *(unsigned char *)(v3 + 40) = 0;
    atomic_store(0, (unint64_t *)(v3 + 32));
    uint64_t v1 = *(void *)(a1 + 8);
    if (v1) {
      return atomic_load((unint64_t *)(v1 + 24));
    }
  }
  else if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR))
  {
    sub_100753958();
  }
  return 0;
}

void *sub_1002D6A6C(uint64_t a1, char *__dst, size_t a3)
{
  char v5 = *(size_t **)(a1 + 8);
  size_t v6 = v5[1];
  size_t v7 = *v5;
  size_t v8 = v6 + a3;
  size_t v9 = *v5 - v6;
  if (a3 - v9 >= v6) {
    size_t v10 = v6;
  }
  else {
    size_t v10 = a3 - v9;
  }
  if (v8 >= v7) {
    size_t v11 = v9;
  }
  else {
    size_t v11 = a3;
  }
  uint64_t result = memcpy(__dst, (const void *)(v6 + *(void *)(a1 + 16)), v11);
  if (v8 >= v7 && v10 != 0) {
    uint64_t result = memcpy(&__dst[v11], *(const void **)(a1 + 16), v10);
  }
  if (v8 >= v7) {
    size_t v14 = v10;
  }
  else {
    size_t v14 = v8;
  }
  *(void *)(*(void *)(a1 + 8) + 8) = v14;
  return result;
}

unint64_t sub_1002D6B08(uint64_t a1, char *a2, size_t *a3, size_t a4)
{
  uint64_t v6 = a1 + 8;
  char v5 = *(void **)(a1 + 8);
  if ((unint64_t)(v5[1] + 2) > *v5)
  {
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR)) {
      sub_10075398C();
    }
    return 0;
  }
  uint64_t v7 = v5[1];
  size_t v8 = *(unsigned __int16 *)(v7 + *(void *)(a1 + 16));
  if (!*(_WORD *)(v7 + *(void *)(a1 + 16))) {
    return 0;
  }
  if (v8 >= a4) {
    size_t v8 = a4;
  }
  *a3 = v8;
  size_t v10 = v8 & 1;
  unint64_t v11 = v8 + v10 + 2;
  unint64_t v12 = atomic_load(v5 + 3);
  if (v11 > v12)
  {
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR)) {
      sub_1007539C0((uint64_t)a3, v6);
    }
    return 0;
  }
  size_t v14 = *(void **)(a1 + 8);
  v14[1] += 2;
  v14[1] %= *v14;
  sub_1002D6A6C(a1, a2, *a3);
  uint64_t v15 = *(void **)(a1 + 8);
  if (v10) {
    v15[1] = (unint64_t)(v15[1] + 1) % *v15;
  }
  atomic_fetch_add(v15 + 4, 0xFFFFFFFFFFFFFFFFLL);
  return v11;
}

size_t sub_1002D6C40(uint64_t a1, char *a2, size_t a3)
{
  unint64_t v6 = sub_1002D69D8(a1);
  if (!v6) {
    return 0;
  }
  if (v6 < a3) {
    a3 = v6;
  }
  sub_1002D6A6C(a1, a2, a3);
  atomic_fetch_add((atomic_ullong *volatile)(*(void *)(a1 + 8) + 24), -(uint64_t)a3);
  return a3;
}

unint64_t sub_1002D6CAC(uint64_t a1, char *a2, size_t a3)
{
  unint64_t result = sub_1002D69D8(a1);
  if (result)
  {
    size_t v7 = 0;
    unint64_t result = sub_1002D6B08(a1, a2, &v7, a3);
    if (result)
    {
      atomic_fetch_add((atomic_ullong *volatile)(*(void *)(a1 + 8) + 24), -(uint64_t)result);
      return v7;
    }
  }
  return result;
}

BOOL sub_1002D6D1C(uint64_t a1, char *a2, size_t *a3, size_t a4, char *a5, size_t *a6, size_t a7)
{
  unint64_t v14 = sub_1002D69D8(a1);
  if (v14)
  {
    unint64_t v15 = sub_1002D6B08(a1, a2, a3, a4);
    atomic_fetch_add((atomic_ullong *volatile)(*(void *)(a1 + 8) + 24), -(uint64_t)(sub_1002D6B08(a1, a5, a6, a7) + v15));
  }
  return v14 != 0;
}

BOOL sub_1002D6DC0(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = a1 + 8;
  unint64_t v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    if (*((unsigned char *)v2 + 40)) {
      return 0;
    }
    uint64_t v5 = *v2;
    unint64_t v6 = atomic_load((unint64_t *)v2 + 3);
    if (v5 + ~v6 >= a2)
    {
      return 1;
    }
    else
    {
      if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR)) {
        sub_100753A74(v3);
      }
      BOOL result = 0;
      *(unsigned char *)(*(void *)v3 + 40) = 1;
    }
  }
  else
  {
    BOOL result = os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_100753A40();
      return 0;
    }
  }
  return result;
}

void sub_1002D6E7C(uint64_t a1, __int16 a2)
{
  unint64_t v2 = *(unint64_t **)(a1 + 8);
  unint64_t v3 = v2[2];
  unint64_t v4 = *v2;
  if (v3 + 2 <= *v2)
  {
    *(_WORD *)(v3 + *(void *)(a1 + 16)) = a2;
    v2[2] = (v3 + 2) % v4;
  }
  else if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR))
  {
    sub_100753AF4();
  }
}

void *sub_1002D6EE4(uint64_t a1, char *a2, size_t a3)
{
  unint64_t v6 = *(size_t **)(a1 + 8);
  size_t v7 = v6[2];
  size_t v8 = *v6;
  size_t v9 = v7 + a3;
  size_t v10 = *v6 - v7;
  size_t v11 = a3 - v10;
  if (v7 + a3 >= *v6) {
    size_t v12 = *v6 - v7;
  }
  else {
    size_t v12 = a3;
  }
  BOOL result = memcpy((void *)(v7 + *(void *)(a1 + 16)), a2, v12);
  if (v9 >= v8 && a3 != v10) {
    BOOL result = memcpy(*(void **)(a1 + 16), &a2[v12], v11);
  }
  if (v9 >= v8) {
    size_t v15 = v11;
  }
  else {
    size_t v15 = v9;
  }
  *(void *)(*(void *)(a1 + 8) + 16) = v15;
  return result;
}

void sub_1002D6F80(uint64_t a1, char **a2, size_t *a3, uint64_t a4, __int16 a5, uint64_t a6)
{
  sub_1002D6E7C(a1, a5);
  for (; a4; --a4)
  {
    size_t v12 = *a2++;
    size_t v11 = v12;
    size_t v13 = *a3++;
    sub_1002D6EE4(a1, v11, v13);
  }
  unint64_t v14 = *(void **)(a1 + 8);
  if (a6)
  {
    v14[2] += a6;
    v14[2] %= *v14;
  }
  atomic_fetch_add(v14 + 4, 1uLL);
}

size_t sub_1002D7018(uint64_t a1, char *a2, unint64_t a3)
{
  size_t v3 = a3;
  if (!sub_1002D6DC0(a1, a3)) {
    return 0;
  }
  sub_1002D6EE4(a1, a2, v3);
  atomic_fetch_add((atomic_ullong *volatile)(*(void *)(a1 + 8) + 24), v3);
  return v3;
}

unint64_t sub_1002D707C(uint64_t a1, char *a2, size_t a3)
{
  __int16 v3 = a3;
  size_t v8 = a3;
  size_t v9 = a2;
  uint64_t v5 = a3 & 1;
  unint64_t v6 = a3 + v5 + 2;
  if (!sub_1002D6DC0(a1, v6)) {
    return 0;
  }
  sub_1002D6F80(a1, &v9, &v8, 1, v3, v5);
  atomic_fetch_add((atomic_ullong *volatile)(*(void *)(a1 + 8) + 24), v6);
  return v6;
}

unint64_t sub_1002D7100(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1) {
    return atomic_load((unint64_t *)(v1 + 32));
  }
  else {
    return 0;
  }
}

void sub_1002D7130(uint64_t a1, uint64_t a2, _xpc_connection_s *a3, uint64_t a4)
{
  unint64_t v4 = (void *)sub_100013DDC(a1, a2, a3, a4);
  void *v4 = off_1009A3368;
  v4[17] = 0;
  uint8_t v4[16] = v4 + 17;
  v4[18] = 0;
  operator new();
}

void sub_1002D7538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10027E318((uint64_t)va);
  sub_1000486F0(v6, *(void **)(v5 + 136));
  sub_10000C178(v5);
  _Unwind_Resume(a1);
}

void sub_1002D75F8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (void *)(a1 + 56);
    if (*(char *)(a1 + 79) < 0) {
      uint64_t v5 = (void *)*v5;
    }
    *(_DWORD *)buf = 136315138;
    size_t v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "XpcMBFrameworkConnection::handleDisconnection name:%s", buf, 0xCu);
  }
  *(unsigned char *)(a1 + 160) = 0;
  uint64_t v6 = *(void **)(a1 + 128);
  if (v6 != (void *)(a1 + 136))
  {
    do
    {
      (*(void (**)(void, void, uint64_t))(*(void *)v6[4] + 8))(v6[4], *(void *)(a1 + 16), a2);
      if (qword_1009FB160 != -1) {
        dispatch_once(&qword_1009FB160, &stru_1009A3398);
      }
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_1002D784C;
      v11[3] = &unk_100997528;
      uint8_t v11[4] = v6 + 4;
      sub_100551610((uint64_t)off_1009FB158, v11);
      size_t v7 = (void *)v6[1];
      if (v7)
      {
        do
        {
          size_t v8 = v7;
          size_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          size_t v8 = (void *)v6[2];
          BOOL v9 = *v8 == (void)v6;
          uint64_t v6 = v8;
        }
        while (!v9);
      }
      uint64_t v6 = v8;
    }
    while (v8 != (void *)(a1 + 136));
  }
  if (qword_1009FB160 != -1) {
    dispatch_once(&qword_1009FB160, &stru_1009A3398);
  }
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1002D7880;
  v10[3] = &unk_100997528;
  v10[4] = a1;
  sub_100551610((uint64_t)off_1009FB158, v10);
}

uint64_t sub_1002D784C(uint64_t a1)
{
  uint64_t result = **(void **)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

void sub_1002D7880(uint64_t a1)
{
}

void sub_1002D788C(uint64_t a1, xpc_object_t xdict)
{
  if (*(int *)(a1 + 80) <= 0)
  {
    unint64_t v14 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_FAULT)) {
      sub_100753B28(a1, v14);
    }
    return;
  }
  string = (char *)xpc_dictionary_get_string(xdict, "kCBMsgId");
  uint64_t v5 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = (void *)(a1 + 56);
    if (*(char *)(a1 + 79) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    int v17 = 136446466;
    uint64_t v18 = string;
    __int16 v19 = 2082;
    int v20 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Received MBFramework XPC message \"%{public}s\" from session \"%{public}s\"", (uint8_t *)&v17, 0x16u);
  }
  if (!string)
  {
    xpc_object_t reply = xpc_dictionary_create_reply(xdict);
    if (!reply) {
      return;
    }
    size_t v12 = reply;
    uint64_t v13 = 19;
    goto LABEL_25;
  }
  if (qword_1009FB1A0 != -1) {
    dispatch_once(&qword_1009FB1A0, &stru_1009A33B8);
  }
  sub_1006165B8(qword_1009FB198, string, *(_DWORD *)(a1 + 40));
  size_t v7 = *(void **)(a1 + 128);
  if (v7 == (void *)(a1 + 136))
  {
LABEL_17:
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_100753BB0();
    }
    xpc_object_t reply = xpc_dictionary_create_reply(xdict);
    if (!reply) {
      return;
    }
    size_t v12 = reply;
    uint64_t v13 = 2;
LABEL_25:
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v13);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v12);
    xpc_release(v12);
    return;
  }
  while (!(**(unsigned int (***)(void, xpc_object_t))v7[4])(v7[4], xdict))
  {
    size_t v8 = (void *)v7[1];
    if (v8)
    {
      do
      {
        BOOL v9 = v8;
        size_t v8 = (void *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        BOOL v9 = (void *)v7[2];
        BOOL v10 = *v9 == (void)v7;
        size_t v7 = v9;
      }
      while (!v10);
    }
    size_t v7 = v9;
    if (v9 == (void *)(a1 + 136)) {
      goto LABEL_17;
    }
  }
  size_t v15 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_INFO))
  {
    __int16 v16 = (void *)(a1 + 56);
    if (*(char *)(a1 + 79) < 0) {
      __int16 v16 = (void *)*v16;
    }
    int v17 = 136446466;
    uint64_t v18 = string;
    __int16 v19 = 2082;
    int v20 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Handled MBFramework XPC message \"%{public}s\" from session \"%{public}s\"", (uint8_t *)&v17, 0x16u);
  }
}

void sub_1002D7B48(uint64_t a1, char *string, void *a3, int a4)
{
  *(_OWORD *)keys = *(_OWORD *)&off_1009A3388;
  object[0] = xpc_string_create(string);
  object[1] = a3;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG)) {
    sub_100753C38();
  }
  if (a3) {
    size_t v8 = 2;
  }
  else {
    size_t v8 = 1;
  }
  xpc_object_t v9 = xpc_dictionary_create((const char *const *)keys, object, v8);
  sub_1002D7C5C(a1, (uint64_t)string, v9);
  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v9);
  xpc_release(v9);
  xpc_release(object[0]);
  if (a3)
  {
    if (a4) {
      xpc_release(a3);
    }
  }
}

void sub_1002D7C5C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = sub_100017768();
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 448))(v6);
  if (a3 && v7)
  {
    if (xpc_get_type(a3) == (xpc_type_t)&_xpc_type_error)
    {
      size_t v11 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_100753CC0(v11);
      }
    }
    else
    {
      size_t v8 = xpc_copy_description(a3);
      xpc_object_t v9 = qword_100A19FF0;
      if (os_log_type_enabled((os_log_t)qword_100A19FF0, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v10 = (void *)(a1 + 56);
        if (*(char *)(a1 + 79) < 0) {
          BOOL v10 = (void *)*v10;
        }
        int v12 = 136446978;
        uint64_t v13 = a2;
        __int16 v14 = 2082;
        size_t v15 = v10;
        __int16 v16 = 1024;
        int count = xpc_dictionary_get_count(a3);
        __int16 v18 = 2080;
        __int16 v19 = v8;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Msg:\"%{public}s\", Session:\"%{public}s\", Count:%d, xpc_copy_description(args): %s ", (uint8_t *)&v12, 0x26u);
      }
      free(v8);
    }
  }
}

uint64_t sub_1002D7DE4(uint64_t a1)
{
  *(void *)a1 = off_1009A3368;
  sub_1000486F0(a1 + 128, *(void **)(a1 + 136));

  return sub_10000C178(a1);
}

void sub_1002D7E3C(uint64_t a1)
{
  *(void *)a1 = off_1009A3368;
  sub_1000486F0(a1 + 128, *(void **)(a1 + 136));
  sub_10000C178(a1);

  operator delete();
}

uint64_t **sub_1002D7EA8(uint64_t **result, unint64_t *a2, unint64_t *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    int v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    _DWORD v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      size_t v8 = (uint64_t *)v6[1];
    }
    else {
      size_t v8 = v6;
    }
    BOOL v10 = result;
    size_t v11 = v8;
    int v12 = v8;
    if (v8)
    {
      size_t v11 = sub_1002D8040((uint64_t)v8);
      while (a2 != a3)
      {
        sub_1002D7FB0(v5, a2, v8);
        if (v9)
        {
          size_t v8 = v11;
          int v12 = v11;
          if (!v11)
          {
            ++a2;
            break;
          }
          size_t v11 = sub_1002D8040((uint64_t)v11);
        }
        else
        {
          size_t v8 = v12;
        }
        ++a2;
        if (!v8) {
          break;
        }
      }
    }
    uint64_t result = (uint64_t **)sub_1002D8094((uint64_t)&v10);
  }
  while (a2 != a3)
  {
    uint64_t result = (uint64_t **)sub_100051620(v5, a2, (uint64_t *)a2);
    ++a2;
  }
  return result;
}

void sub_1002D7F9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002D8094((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1002D7FB0(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v4 = a1 + 1;
  uint64_t v5 = a1[1];
  unint64_t v6 = *a2;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v6 >= v8) {
          break;
        }
        uint64_t v5 = *v7;
        unint64_t v4 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= v6) {
        return (uint64_t *)v7;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        unint64_t v4 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v7 = a1 + 1;
LABEL_9:
    a3[4] = v6;
    sub_100036CA0(a1, (uint64_t)v7, v4, a3);
  }
  return a3;
}

void *sub_1002D8040(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 16);
  if (result)
  {
    __int16 v3 = (void *)*result;
    if (*result == a1)
    {
      *uint64_t result = 0;
      while (1)
      {
        unint64_t v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          uint64_t result = v4;
          unint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; __int16 v3 = (void *)result[1])
      {
        do
        {
          uint64_t result = v3;
          __int16 v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t sub_1002D8094(uint64_t a1)
{
  sub_1000486F0(*(void *)a1, *(void **)(a1 + 16));
  unint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    __int16 v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        unint64_t v2 = v3;
        __int16 v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_1000486F0(*(void *)a1, v2);
  }
  return a1;
}

void sub_1002D80EC(id a1)
{
}

void sub_1002D8130()
{
}

void sub_1002D8154(id a1)
{
}

void sub_1002D8198()
{
}

uint64_t *sub_1002D81D4(uint64_t *a1, unsigned __int8 a2, char a3)
{
  unint64_t v6 = malloc_type_malloc(0x101uLL, 0x46874C2AuLL);
  *((unsigned char *)a1 + 16) = a2;
  if (v6)
  {
    *a1 = (uint64_t)v6;
    *((_WORD *)a1 + 4) = 257;
    *((_WORD *)a1 + 7) = 2;
    *(_DWORD *)((char *)a1 + 10) = 65793;
    unsigned char *v6 = a2;
    if (*((unsigned char *)a1 + 15))
    {
      sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/VirtualC"
                             "ontroller/BTVirtualHciPacket.mm");
    }
    else
    {
      uint64_t v7 = *((unsigned __int16 *)a1 + 6);
      if (*((unsigned __int16 *)a1 + 5) > v7)
      {
        if (*((unsigned char *)a1 + 14) == 2)
        {
          uint64_t v8 = *a1;
          *((_WORD *)a1 + 6) = v7 + 1;
          *(unsigned char *)(v8 + v7) = a3;
          return a1;
        }
        size_t v11 = "(fBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_12:
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/VirtualController/BTVirtualHciPacket.mm", 27, v11);
      }
    }
    size_t v11 = "ByteStream_NumReadBytesAvail(fBs) >= 1";
    goto LABEL_12;
  }
  char v9 = qword_100A19FE8;
  if (os_log_type_enabled((os_log_t)qword_100A19FE8, OS_LOG_TYPE_ERROR)) {
    sub_100753D04(a2, v9);
  }
  return a1;
}

void sub_1002D8344(id a1)
{
  uint64_t v1 = qword_100A19FE8;
  if (os_log_type_enabled((os_log_t)qword_100A19FE8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    uint64_t v5 = "+[BTVCLinkClient btvcLinkClient]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v4, 0xCu);
  }
  unint64_t v2 = objc_alloc_init(BTVCLinkClient);
  __int16 v3 = (void *)qword_100A120E0;
  qword_100A120E0 = (uint64_t)v2;
}

void sub_1002D8640(_Unwind_Exception *a1)
{
  objc_sync_exit(v2);

  _Unwind_Resume(a1);
}

void sub_1002D87B8(_Unwind_Exception *a1)
{
  objc_sync_exit(v2);

  _Unwind_Resume(a1);
}

void sub_1002D8A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  objc_sync_exit(v10);
  _Unwind_Resume(a1);
}

id sub_1002D8A70(uint64_t a1)
{
  return [*(id *)(a1 + 32) btvcBonjourLinkDidUpdateState:*(void *)(a1 + 40)];
}

void sub_1002D8CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  objc_sync_exit(v12);
  _Unwind_Resume(a1);
}

id sub_1002D8D24(uint64_t a1)
{
  return [*(id *)(a1 + 32) btvcBonjourLink:*(void *)(a1 + 40) didStartAdvertisingType:*(void *)(a1 + 48)];
}

void sub_1002D8F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  objc_sync_exit(v12);
  _Unwind_Resume(a1);
}

id sub_1002D8FBC(uint64_t a1)
{
  return [*(id *)(a1 + 32) btvcBonjourLink:*(void *)(a1 + 40) didStopAdvertisingType:*(void *)(a1 + 56) withError:*(void *)(a1 + 48)];
}

void sub_1002D91D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  objc_sync_exit(v12);
  _Unwind_Resume(a1);
}

id sub_1002D921C(uint64_t a1)
{
  return [*(id *)(a1 + 32) btvcBonjourLink:*(void *)(a1 + 40) didDeferAdvertisingType:*(void *)(a1 + 48)];
}

void sub_1002D9464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  objc_sync_exit(v12);
  _Unwind_Resume(a1);
}

id sub_1002D94B4(uint64_t a1)
{
  return [*(id *)(a1 + 32) btvcBonjourLink:*(void *)(a1 + 40) didFailToStartAdvertisingOfType:*(void *)(a1 + 56) withError:*(void *)(a1 + 48)];
}

void sub_1002D96CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  objc_sync_exit(v12);
  _Unwind_Resume(a1);
}

id sub_1002D9714(uint64_t a1)
{
  return [*(id *)(a1 + 32) btvcBonjourLink:*(void *)(a1 + 40) didStartScanningForType:*(void *)(a1 + 48)];
}

void sub_1002D995C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  objc_sync_exit(v12);
  _Unwind_Resume(a1);
}

id sub_1002D99AC(uint64_t a1)
{
  return [*(id *)(a1 + 32) btvcBonjourLink:*(void *)(a1 + 40) didFailToStartScanningForType:*(void *)(a1 + 56) WithError:*(void *)(a1 + 48)];
}

void sub_1002D9C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

id sub_1002D9CB8(uint64_t a1)
{
  return [*(id *)(a1 + 32) btvcBonjourLink:*(void *)(a1 + 40) didDiscoverType:*(void *)(a1 + 72) withData:*(void *)(a1 + 48) fromPeer:*(void *)(a1 + 56) peerInfo:*(void *)(a1 + 64)];
}

void sub_1002D9F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  objc_sync_exit(v12);
  _Unwind_Resume(a1);
}

id sub_1002D9F50(uint64_t a1)
{
  return [*(id *)(a1 + 32) btvcBonjourLink:*(void *)(a1 + 40) didLosePeer:*(void *)(a1 + 48) type:*(void *)(a1 + 56)];
}

void sub_1002DA1CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

id sub_1002DA228(uint64_t a1)
{
  return [*(id *)(a1 + 32) btvcBonjourLink:*(void *)(a1 + 40) didConnectToPeer:*(void *)(a1 + 48) transport:*(void *)(a1 + 64) error:*(void *)(a1 + 56)];
}

void sub_1002DA490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  objc_sync_exit(v12);
  _Unwind_Resume(a1);
}

id sub_1002DA4E8(uint64_t a1)
{
  return [*(id *)(a1 + 32) btvcBonjourLink:*(void *)(a1 + 40) didDisconnectFromPeer:*(void *)(a1 + 48) error:*(void *)(a1 + 56)];
}

void sub_1002DA778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  objc_sync_exit(v13);
  _Unwind_Resume(a1);
}

id sub_1002DA7D8(uint64_t a1)
{
  return [*(id *)(a1 + 32) btvcBonjourLink:*(void *)(a1 + 40) didSendData:*(void *)(a1 + 48) toPeer:*(void *)(a1 + 56) error:*(void *)(a1 + 64)];
}

void sub_1002DAA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  objc_sync_exit(v12);
  _Unwind_Resume(a1);
}

id sub_1002DAA98(uint64_t a1)
{
  return [*(id *)(a1 + 32) btvcBonjourLink:*(void *)(a1 + 40) didReceiveData:*(void *)(a1 + 48) fromPeer:*(void *)(a1 + 56)];
}

uint64_t sub_1002DAAF8(uint64_t a1)
{
  *(void *)a1 = off_1009A34D0;
  *(void *)(a1 + 8) = off_1009A35C8;
  uint64_t v2 = a1 + 88;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  sub_10027710C(a1 + 88, a1 + 8, "com.apple.BTServer.cloudpairing", 0);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  sub_10027714C(v2);
  return a1;
}

void sub_1002DAB90(_Unwind_Exception *a1)
{
  sub_100277148(v2);
  int v4 = *(void **)(v1 + 24);
  if (v4)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void *sub_1002DABC0(void *a1)
{
  *a1 = off_1009A34D0;
  a1[1] = off_1009A35C8;
  a1[4] = a1[3];
  sub_100277148(a1 + 11);
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1002DAC44(void *a1)
{
  sub_1002DABC0(a1);

  operator delete();
}

uint64_t sub_1002DAC7C(uint64_t a1)
{
  uint64_t v2 = qword_100A19E60;
  if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Sending get master key message to cloudkit", v5, 2u);
  }
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  sub_100277398(a1 + 88, "getMasterKey", v3, 0);
  return 1;
}

uint64_t sub_1002DAD14(uint64_t a1)
{
  uint64_t v2 = qword_100A19E60;
  if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "launchCloudPairing", v4, 2u);
  }
  sub_100277398(a1 + 88, "Start", 0, 0);
  return 1;
}

uint64_t sub_1002DAD9C(uint64_t a1)
{
  uint64_t v2 = qword_100A19E60;
  if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "getDeviceInfoList", v5, 2u);
  }
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  sub_100277398(a1 + 88, "getAccessoryKey", v3, 0);
  return 1;
}

void sub_1002DAE34(uint64_t a1, int a2)
{
  int v4 = qword_100A19E60;
  if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = "logged-out";
    if (a2) {
      uint64_t v5 = "logged-in";
    }
    int v7 = 136446210;
    uint64_t v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Account login Status changed %{public}s", (uint8_t *)&v7, 0xCu);
  }
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  sub_100277398(a1 + 88, "getSignInStatus", v6, 0);
}

void sub_1002DAF24(uint64_t a1, uint64_t a2, void **a3)
{
  xpc_object_t v6 = qword_100A19E60;
  if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = a3;
    if (*((char *)a3 + 23) < 0) {
      int v7 = *a3;
    }
    *(_DWORD *)buf = 67109635;
    int v12 = a2;
    __int16 v13 = 2160;
    uint64_t v14 = 1752392040;
    __int16 v15 = 2081;
    __int16 v16 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Sign in status changed came from cloudkit, status = %d, loginID = %{private, mask.hash}s", buf, 0x1Cu);
  }
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_10;
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_10003B098(__p, *a3, (unint64_t)a3[1]);
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a3;
    BOOL v10 = a3[2];
  }
  (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v8 + 16))(v8, a2, __p);
  if (SHIBYTE(v10) < 0)
  {
    operator delete(__p[0]);
    if (a2) {
      return;
    }
  }
  else
  {
LABEL_10:
    if (a2) {
      return;
    }
  }
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
}

void sub_1002DB08C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t sub_1002DB0B0(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 80) = a2;
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    BOOL v3 = a2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t sub_1002DB0EC()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_100373114() + 32);

  return v0();
}

void sub_1002DB134(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);

  sub_100277398(a1 + 88, "readOldContainer", v2, 0);
}

uint64_t sub_1002DB188(uint64_t a1)
{
  xpc_object_t v2 = qword_100A19E60;
  if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Re-upgradeToManatee, this should be called after Identity is Lost", buf, 2u);
  }
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    if (*(_OWORD *)(a1 + 48) == 0 || *(_OWORD *)(a1 + 64) == 0)
    {
      int v4 = qword_100A19E60;
      if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v5 = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "No Master or Hint Key Found generate new ones", v5, 2u);
      }
      sub_1002DB290(a1);
      uint64_t result = *(void *)(a1 + 16);
    }
    *(unsigned char *)(a1 + 80) = 1;
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  return result;
}

void sub_1002DB290(uint64_t a1)
{
  xpc_object_t v2 = qword_100A19E60;
  if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)BOOL v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "==============Generate New Keys=============", v3, 2u);
  }
  arc4random_buf((void *)(a1 + 48), 0x10uLL);
  arc4random_buf((void *)(a1 + 64), 0x10uLL);
}

void sub_1002DB314(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  xpc_object_t v6 = qword_100A19E60;
  if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v20[0] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received length %zu", buf, 0xCu);
  }
  int v7 = *a2;
  if (v7 != 2)
  {
    BOOL v10 = qword_100A19E60;
    if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_ERROR)) {
      sub_100753E40(v7, v10);
    }
    dispatch_time_t v11 = dispatch_time(0, 30000000000);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_1002DB6C0;
    v18[3] = &unk_100997528;
    v18[4] = a1;
    int v12 = v18;
    goto LABEL_13;
  }
  if (a3 != 33)
  {
    __int16 v13 = qword_100A19E60;
    if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_ERROR)) {
      sub_100753DC8(a3, v13);
    }
    dispatch_time_t v11 = dispatch_time(0, 30000000000);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002DB77C;
    block[3] = &unk_100997528;
    void block[4] = a1;
    int v12 = block;
    goto LABEL_13;
  }
  long long v8 = *(_OWORD *)(a2 + 1);
  long long v21 = *(_OWORD *)(a2 + 17);
  long long v22 = v8;
  if (v8 == 0)
  {
    char v9 = qword_100A19E60;
    if (v21 != 0) {
      goto LABEL_16;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_ERROR)) {
      sub_100753D94();
    }
    dispatch_time_t v11 = dispatch_time(0, 30000000000);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_1002DB784;
    v16[3] = &unk_100997528;
    void v16[4] = a1;
    int v12 = v16;
LABEL_13:
    dispatch_after(v11, (dispatch_queue_t)&_dispatch_main_q, v12);
    return;
  }
  char v9 = qword_100A19E60;
LABEL_16:
  long long v14 = v21;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 64) = v14;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68157954;
    LODWORD(v20[0]) = 16;
    WORD2(v20[0]) = 2096;
    *(void *)((char *)v20 + 6) = a1 + 48;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Acc Master Key:%.16P", buf, 0x12u);
    char v9 = qword_100A19E60;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68157954;
    LODWORD(v20[0]) = 16;
    WORD2(v20[0]) = 2096;
    *(void *)((char *)v20 + 6) = a1 + 64;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Acc Master Hint:%.16P", buf, 0x12u);
  }
  __int16 v15 = *(void (****)(void, uint64_t, uint64_t))(a1 + 16);
  if (v15) {
    (**v15)(v15, a1 + 48, a1 + 64);
  }
}

void sub_1002DB6C0(uint64_t a1)
{
}

void sub_1002DB6C8(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  char bytes = 2;
  sub_1002DB290(a1);
  long long v3 = *(_OWORD *)(a1 + 64);
  long long v5 = *(_OWORD *)(a1 + 48);
  long long v6 = v3;
  xpc_dictionary_set_data(v2, "kMasterKeyBlob", &bytes, 0x21uLL);
  sub_100277398(a1 + 88, "writeMasterKey", v2, 0);
}

void sub_1002DB77C(uint64_t a1)
{
}

void sub_1002DB784(uint64_t a1)
{
}

void sub_1002DB78C(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_ERROR)) {
    sub_100753EBC();
  }
  dispatch_time_t v2 = dispatch_time(0, 30000000000);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002DB848;
  block[3] = &unk_100997528;
  void block[4] = a1;
  dispatch_after(v2, (dispatch_queue_t)&_dispatch_main_q, block);
}

void sub_1002DB848(uint64_t a1)
{
}

void sub_1002DB850(void *a1, unsigned __int8 *a2, unint64_t a3)
{
  if (a2 && a3 > 1)
  {
    uint64_t v6 = a2[1];
    unsigned int v7 = v6 | (*a2 << 8);
    long long v8 = qword_100A19E60;
    if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT))
    {
      v12[0] = 67109120;
      v12[1] = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received Device info for %d devices", (uint8_t *)v12, 8u);
    }
    if (a3 - 2 >= 152 * (unint64_t)v7)
    {
      a1[4] = a1[3];
      if (v7)
      {
        char v9 = malloc_type_malloc(152 * v7, 0x10000401CC6BE04uLL);
        memcpy(v9, a2 + 2, 152 * v7);
        uint64_t v10 = a1[2];
        if (v10) {
          (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v10 + 8))(v10, v9, v6);
        }
        if (v9) {
          free(v9);
        }
      }
      else
      {
        uint64_t v11 = a1[2];
        if (v11) {
          (*(void (**)(uint64_t, void, void))(*(void *)v11 + 8))(v11, 0, 0);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_ERROR))
    {
      sub_100753F24();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_ERROR))
  {
    sub_100753EF0();
  }
}

uint64_t sub_1002DBA40(uint64_t a1, uint64_t a2)
{
  int v4 = qword_100A19E60;
  if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT))
  {
    long long v5 = "not reachable";
    if (a2) {
      long long v5 = "reachable";
    }
    int v7 = 136446210;
    long long v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "reachability Status is %{public}s", (uint8_t *)&v7, 0xCu);
  }
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 24))(result, a2);
  }
  return result;
}

uint64_t sub_1002DBB38(uint64_t a1, uint64_t a2)
{
  int v4 = qword_100A19E60;
  if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT))
  {
    long long v5 = "fail";
    if (a2) {
      long long v5 = "success";
    }
    int v7 = 136446210;
    long long v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Device info uploaded status from cloudkit with status = %{public}s", (uint8_t *)&v7, 0xCu);
  }
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 32))(result, a2);
  }
  return result;
}

uint64_t sub_1002DBC30(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = qword_100A19E60;
  if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v49[0]) = 67109120;
    DWORD1(v49[0]) = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Upload Magic pairing device info to cloud for %d devices", (uint8_t *)v49, 8u);
  }
  int v7 = *(char **)(a1 + 24);
  *(void *)(a1 + 32) = v7;
  if (a3)
  {
    uint64_t v8 = 0;
    char v9 = (void *)(a1 + 40);
    uint64_t v10 = a3;
    do
    {
      uint64_t v11 = *(char **)(a1 + 24);
      if (v11 != v7)
      {
        uint64_t v12 = 0;
        uint64_t v13 = a2 + 152 * v8;
        while (1)
        {
          long long v14 = &v11[v12];
          v49[6] = *(_OWORD *)&v11[v12 + 96];
          v49[7] = *(_OWORD *)&v11[v12 + 112];
          v49[8] = *(_OWORD *)&v11[v12 + 128];
          uint64_t v50 = *(void *)&v11[v12 + 144];
          v49[2] = *(_OWORD *)&v11[v12 + 32];
          v49[3] = *(_OWORD *)&v11[v12 + 48];
          v49[4] = *(_OWORD *)&v11[v12 + 64];
          v49[5] = *(_OWORD *)&v11[v12 + 80];
          v49[0] = *(_OWORD *)&v11[v12];
          v49[1] = *(_OWORD *)&v11[v12 + 16];
          if (LODWORD(v49[0]) == *(_DWORD *)v13 && WORD2(v49[0]) == *(unsigned __int16 *)(v13 + 4)) {
            break;
          }
          v12 += 152;
          if (&v11[v12] == v7) {
            goto LABEL_16;
          }
        }
        size_t v16 = v7 - (v14 + 152);
        if (v16) {
          memmove(&v11[v12], v14 + 152, v16);
        }
        int v7 = &v14[v16];
        *(void *)(a1 + 32) = v7;
      }
LABEL_16:
      uint64_t v17 = a2 + 152 * v8;
      if ((unint64_t)v7 >= *v9)
      {
        uint64_t v25 = *(void *)(a1 + 24);
        unint64_t v26 = 0x86BCA1AF286BCA1BLL * ((uint64_t)&v7[-v25] >> 3);
        unint64_t v27 = v26 + 1;
        if (v26 + 1 > 0x1AF286BCA1AF286) {
          abort();
        }
        if (0xD79435E50D79436 * ((*v9 - v25) >> 3) > v27) {
          unint64_t v27 = 0xD79435E50D79436 * ((*v9 - v25) >> 3);
        }
        if (0x86BCA1AF286BCA1BLL * ((*v9 - v25) >> 3) >= 0xD79435E50D7943) {
          unint64_t v28 = 0x1AF286BCA1AF286;
        }
        else {
          unint64_t v28 = v27;
        }
        if (v28) {
          size_t v29 = (char *)sub_1002DDC78(a1 + 40, v28);
        }
        else {
          size_t v29 = 0;
        }
        size_t v30 = &v29[152 * v26];
        long long v31 = *(_OWORD *)(v17 + 16);
        *(_OWORD *)size_t v30 = *(_OWORD *)v17;
        *((_OWORD *)v30 + 1) = v31;
        long long v32 = *(_OWORD *)(v17 + 32);
        long long v33 = *(_OWORD *)(v17 + 48);
        long long v34 = *(_OWORD *)(v17 + 80);
        *((_OWORD *)v30 + 4) = *(_OWORD *)(v17 + 64);
        *((_OWORD *)v30 + 5) = v34;
        *((_OWORD *)v30 + 2) = v32;
        *((_OWORD *)v30 + 3) = v33;
        long long v35 = *(_OWORD *)(v17 + 96);
        long long v36 = *(_OWORD *)(v17 + 112);
        long long v37 = *(_OWORD *)(v17 + 128);
        *((void *)v30 + 18) = *(void *)(v17 + 144);
        *((_OWORD *)v30 + 7) = v36;
        *((_OWORD *)v30 + 8) = v37;
        *((_OWORD *)v30 + 6) = v35;
        uint64_t v39 = *(char **)(a1 + 24);
        uint64_t v38 = *(char **)(a1 + 32);
        uint64_t v40 = v30;
        if (v38 != v39)
        {
          do
          {
            long long v41 = *(_OWORD *)(v38 - 152);
            *(_OWORD *)(v40 - 136) = *(_OWORD *)(v38 - 136);
            *(_OWORD *)(v40 - 152) = v41;
            long long v42 = *(_OWORD *)(v38 - 120);
            long long v43 = *(_OWORD *)(v38 - 104);
            long long v44 = *(_OWORD *)(v38 - 88);
            *(_OWORD *)(v40 - 72) = *(_OWORD *)(v38 - 72);
            *(_OWORD *)(v40 - 88) = v44;
            *(_OWORD *)(v40 - 104) = v43;
            *(_OWORD *)(v40 - 120) = v42;
            long long v45 = *(_OWORD *)(v38 - 56);
            long long v46 = *(_OWORD *)(v38 - 40);
            long long v47 = *(_OWORD *)(v38 - 24);
            *((void *)v40 - 1) = *((void *)v38 - 1);
            *(_OWORD *)(v40 - 24) = v47;
            *(_OWORD *)(v40 - 40) = v46;
            *(_OWORD *)(v40 - 56) = v45;
            v40 -= 152;
            v38 -= 152;
          }
          while (v38 != v39);
          uint64_t v38 = *(char **)(a1 + 24);
        }
        int v7 = v30 + 152;
        *(void *)(a1 + 24) = v40;
        *(void *)(a1 + 32) = v30 + 152;
        *(void *)(a1 + 40) = &v29[152 * v28];
        if (v38) {
          operator delete(v38);
        }
      }
      else
      {
        long long v18 = *(_OWORD *)(v17 + 16);
        *(_OWORD *)int v7 = *(_OWORD *)v17;
        *((_OWORD *)v7 + 1) = v18;
        long long v19 = *(_OWORD *)(v17 + 32);
        long long v20 = *(_OWORD *)(v17 + 48);
        long long v21 = *(_OWORD *)(v17 + 80);
        *((_OWORD *)v7 + 4) = *(_OWORD *)(v17 + 64);
        *((_OWORD *)v7 + 5) = v21;
        *((_OWORD *)v7 + 2) = v19;
        *((_OWORD *)v7 + 3) = v20;
        long long v22 = *(_OWORD *)(v17 + 96);
        long long v23 = *(_OWORD *)(v17 + 112);
        long long v24 = *(_OWORD *)(v17 + 128);
        *((void *)v7 + 18) = *(void *)(v17 + 144);
        *((_OWORD *)v7 + 7) = v23;
        *((_OWORD *)v7 + 8) = v24;
        *((_OWORD *)v7 + 6) = v22;
        v7 += 152;
      }
      *(void *)(a1 + 32) = v7;
      ++v8;
    }
    while (v8 != v10);
  }
  sub_1002DBF88((_DWORD *)a1);
  return 1;
}

void sub_1002DBF88(_DWORD *a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  size_t v3 = ((a1[8] - a1[6]) | 2u) & 0xFFFALL;
  int v4 = malloc_type_malloc(v3, 0x42774671uLL);
  unsigned char *v4 = (unsigned __int16)(-13797 * ((a1[8] - a1[6]) >> 3)) >> 8;
  v4[1] = 27 * ((a1[8] - a1[6]) >> 3);
  (*(void (**)(_DWORD *))(*(void *)a1 + 128))(a1);
  long long v5 = qword_100A19E60;
  if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v6 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(*((void *)a1 + 4) - *((void *)a1 + 3)) >> 3);
    v10[0] = 67109376;
    v10[1] = v3 - 2;
    __int16 v11 = 2048;
    unint64_t v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Size deviceinfo Blob is %d for %lu of devices", (uint8_t *)v10, 0x12u);
  }
  int v7 = (char *)*((void *)a1 + 3);
  if (v7 != *((char **)a1 + 4))
  {
    int v8 = 2;
    do
    {
      memmove(&v4[(unsigned __int16)v8], v7, 0x98uLL);
      v8 += 152;
      v7 += 152;
    }
    while (v7 != *((char **)a1 + 4));
  }
  xpc_dictionary_set_data(v2, "kDeviceInfoBlob", v4, v3);
  if (*((void *)a1 + 4) == *((void *)a1 + 3)) {
    char v9 = "deleteAllAccessories";
  }
  else {
    char v9 = "writeAccessoryKey";
  }
  sub_100277398((uint64_t)(a1 + 22), v9, v2, 0);
  free(v4);
}

void sub_1002DC190(uint64_t a1, void **a2, void **a3)
{
  unint64_t v6 = qword_100A19E60;
  if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = a2;
    if (*((char *)a2 + 23) < 0) {
      int v7 = *a2;
    }
    int v8 = a3;
    if (*((char *)a3 + 23) < 0) {
      int v8 = *a3;
    }
    *(_DWORD *)buf = 136315394;
    __int16 v15 = v7;
    __int16 v16 = 2080;
    uint64_t v17 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Update local device %s with nickname %s", buf, 0x16u);
  }
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9)
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_10003B098(__dst, *a2, (unint64_t)a2[1]);
    }
    else
    {
      *(_OWORD *)__uuid_t dst = *(_OWORD *)a2;
      uint64_t v13 = a2[2];
    }
    if (*((char *)a3 + 23) < 0)
    {
      sub_10003B098(__p, *a3, (unint64_t)a3[1]);
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a3;
      __int16 v11 = a3[2];
    }
    (*(void (**)(uint64_t, void **, void **))(*(void *)v9 + 48))(v9, __dst, __p);
    if (SHIBYTE(v11) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v13) < 0) {
      operator delete(__dst[0]);
    }
  }
}

void sub_1002DC318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002DC354(uint64_t a1, void **a2)
{
  int v4 = qword_100A19E60;
  if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT))
  {
    long long v5 = a2;
    if (*((char *)a2 + 23) < 0) {
      long long v5 = *a2;
    }
    *(_DWORD *)buf = 136315138;
    uint64_t v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Remove nickname for local device %s", buf, 0xCu);
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_10003B098(__p, *a2, (unint64_t)a2[1]);
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a2;
      int v8 = a2[2];
    }
    (*(void (**)(uint64_t, void **))(*(void *)v6 + 56))(v6, __p);
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1002DC480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void sub_1002DC4A4(uint64_t a1, unsigned __int16 *a2, unint64_t a3)
{
  if (a2 && a3 > 1)
  {
    unsigned int v4 = __rev16(*a2);
    unint64_t v5 = (27 * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3)) | ((0x86BCA1AF286BCA1BLL
                                                                                                 * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3)) >> 8);
    uint64_t v6 = qword_100A19E60;
    if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 67109376;
      unsigned int v10 = (unsigned __int16)v5;
      __int16 v11 = 1024;
      unsigned int v12 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "localDevice %d devices cloud numDevices %d", (uint8_t *)&v9, 0xEu);
    }
    int v7 = qword_100A19E60;
    BOOL v8 = os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT);
    if (v4 == (unsigned __int16)v5)
    {
      if (v8)
      {
        int v9 = 67109120;
        unsigned int v10 = v4;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Received Device info for %d devices matches what we have locally", (uint8_t *)&v9, 8u);
      }
    }
    else
    {
      if (v8)
      {
        int v9 = 67109120;
        unsigned int v10 = v4;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Received Device info for %d devices does not match what we have so write back to cloud", (uint8_t *)&v9, 8u);
      }
      sub_1002DBF88((_DWORD *)a1);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_ERROR))
  {
    sub_100753EF0();
  }
}

uint64_t sub_1002DC660()
{
  return 1;
}

uint64_t sub_1002DC668()
{
  return 1;
}

uint64_t sub_1002DC670(void *a1, uint64_t a2)
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, a1, (CFNotificationCallback)sub_1002DC7AC, @"com.apple.bluetooth.cloudpairing.fetch", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  if (a2) {
    BOOL v5 = a1[2] == 0;
  }
  else {
    BOOL v5 = 0;
  }
  uint64_t v6 = v5;
  if (v5)
  {
    a1[2] = a2;
    uint64_t v7 = qword_100A19E60;
    if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = 134217984;
      uint64_t v15 = a2;
      BOOL v8 = "Registered listener = %p";
      int v9 = v7;
      uint32_t v10 = 12;
LABEL_13:
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v14, v10);
    }
  }
  else
  {
    uint64_t v11 = qword_100A19E60;
    if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v14) = 0;
      BOOL v8 = "failed to registe fListener";
      int v9 = v11;
      uint32_t v10 = 2;
      goto LABEL_13;
    }
  }
  return v6;
}

void sub_1002DC7AC(uint64_t a1, uint64_t a2)
{
  size_t v3 = qword_100A19E60;
  if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)BOOL v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received notification for cloudpairing push\n", v5, 2u);
  }
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  sub_100277398(a2 + 88, "getAccessoryKey", v4, 0);
}

BOOL sub_1002DC840(void *a1, uint64_t a2)
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, a1, @"com.apple.bluetooth.cloudpairing.fetch", 0);
  uint64_t v5 = a1[2];
  if (v5 == a2) {
    a1[2] = 0;
  }
  return v5 == a2;
}

void sub_1002DC894(uint64_t a1)
{
  v1[0] = _NSConcreteStackBlock;
  v1[1] = 3221225472;
  v1[2] = sub_1002DC908;
  v1[3] = &unk_100997528;
  v1[4] = a1;
  sub_1002771FC(a1 + 88, v1);
}

uint64_t sub_1002DC908(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 216))();
  }
  return result;
}

void sub_1002DC938(uint64_t a1)
{
  xpc_object_t v2 = qword_100A19E60;
  if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "==============Start Dump MagicPairing structure in cloud=============", buf, 2u);
    xpc_object_t v2 = qword_100A19E60;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v3 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3);
    *(_DWORD *)buf = 134217984;
    *(void *)&uint8_t buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Number of devices in list %lu", buf, 0xCu);
  }
  uint64_t v4 = sub_100017768();
  if ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    for (size_t i = qword_100A19E60; v5 != *(void *)(a1 + 32); v5 += 152)
    {
      long long v7 = *(_OWORD *)(v5 + 16);
      *(_OWORD *)buf = *(_OWORD *)v5;
      long long v23 = v7;
      long long v8 = *(_OWORD *)(v5 + 32);
      long long v9 = *(_OWORD *)(v5 + 48);
      long long v10 = *(_OWORD *)(v5 + 80);
      v26[0] = *(_OWORD *)(v5 + 64);
      v26[1] = v10;
      long long v24 = v8;
      long long v25 = v9;
      long long v11 = *(_OWORD *)(v5 + 96);
      long long v12 = *(_OWORD *)(v5 + 112);
      long long v13 = *(_OWORD *)(v5 + 128);
      uint64_t v28 = *(void *)(v5 + 144);
      v26[3] = v12;
      long long v27 = v13;
      v26[2] = v11;
      if (os_log_type_enabled(i, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int v14 = 67110400;
        LODWORD(v15) = buf[0];
        WORD2(v15) = 1024;
        *(_DWORD *)((char *)&v15 + 6) = buf[1];
        WORD5(v15) = 1024;
        HIDWORD(v15) = buf[2];
        __int16 v16 = 1024;
        int v17 = buf[3];
        __int16 v18 = 1024;
        int v19 = buf[4];
        __int16 v20 = 1024;
        int v21 = buf[5];
        _os_log_impl((void *)&_mh_execute_header, i, OS_LOG_TYPE_DEFAULT, "Device Address: %02x-%02x-%02x-%02x-%02x-%02x", v14, 0x26u);
        size_t i = qword_100A19E60;
      }
      if (os_log_type_enabled(i, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int v14 = 136315138;
        *(void *)&long long v15 = (char *)v26 + 10;
        _os_log_impl((void *)&_mh_execute_header, i, OS_LOG_TYPE_DEFAULT, "Device Name : %s", v14, 0xCu);
        size_t i = qword_100A19E60;
      }
      if (os_log_type_enabled(i, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int v14 = 67109120;
        LODWORD(v15) = *(_DWORD *)((char *)&v24 + 6);
        _os_log_impl((void *)&_mh_execute_header, i, OS_LOG_TYPE_DEFAULT, "Device Ratchet %x", v14, 8u);
        size_t i = qword_100A19E60;
      }
      if (os_log_type_enabled(i, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int v14 = 67109120;
        LODWORD(v15) = *(_DWORD *)((char *)&v27 + 10);
        _os_log_impl((void *)&_mh_execute_header, i, OS_LOG_TYPE_DEFAULT, "Device supported services %x", v14, 8u);
        size_t i = qword_100A19E60;
      }
      if (os_log_type_enabled(i, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int v14 = 68157954;
        LODWORD(v15) = 16;
        WORD2(v15) = 2096;
        *(void *)((char *)&v15 + 6) = (char *)&v24 + 10;
        _os_log_impl((void *)&_mh_execute_header, i, OS_LOG_TYPE_DEFAULT, "Device IRK: %.16P", v14, 0x12u);
        size_t i = qword_100A19E60;
      }
      if (os_log_type_enabled(i, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int v14 = 68157954;
        LODWORD(v15) = 16;
        WORD2(v15) = 2096;
        *(void *)((char *)&v15 + 6) = (char *)&v25 + 10;
        _os_log_impl((void *)&_mh_execute_header, i, OS_LOG_TYPE_DEFAULT, "Device EncKey:%.16P", v14, 0x12u);
        size_t i = qword_100A19E60;
      }
      if (os_log_type_enabled(i, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int v14 = 68157954;
        LODWORD(v15) = 16;
        WORD2(v15) = 2096;
        *(void *)((char *)&v15 + 6) = (char *)&v23 + 6;
        _os_log_impl((void *)&_mh_execute_header, i, OS_LOG_TYPE_DEFAULT, "Device Hint:%.16P", v14, 0x12u);
        size_t i = qword_100A19E60;
      }
      if (os_log_type_enabled(i, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int v14 = 68157954;
        LODWORD(v15) = 16;
        WORD2(v15) = 2096;
        *(void *)((char *)&v15 + 6) = &buf[6];
        _os_log_impl((void *)&_mh_execute_header, i, OS_LOG_TYPE_DEFAULT, "Device AccKey:%.16P", v14, 0x12u);
        size_t i = qword_100A19E60;
      }
    }
  }
  else
  {
    size_t i = qword_100A19E60;
  }
  if (os_log_type_enabled(i, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, i, OS_LOG_TYPE_DEFAULT, "==============End Dump MagicPairing structure in cloud=============", buf, 2u);
  }
}

void sub_1002DCDF0(uint64_t a1)
{
  xpc_object_t v2 = qword_100A19E60;
  if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Fetching Account status from Cloud pairing", buf, 2u);
  }
  dispatch_time_t v3 = dispatch_time(0, 30000000000);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002DCEC8;
  block[3] = &unk_100997528;
  void block[4] = a1;
  dispatch_after(v3, (dispatch_queue_t)&_dispatch_main_q, block);
}

void sub_1002DCEC8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);

  sub_100277398(v1 + 88, "getSignInStatus", v2, 0);
}

void sub_1002DCF1C(uint64_t a1, uint64_t a2, unsigned int a3, _OWORD *a4, _OWORD *a5)
{
  if (*a4 == 0 || *a5 == 0)
  {
    uint64_t v54 = qword_100A19E60;
    if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "upgradeDeviceToManatee Empty Master or Hint Key", buf, 2u);
      uint64_t v54 = qword_100A19E60;
    }
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68157954;
      *(_DWORD *)&uint8_t buf[4] = 16;
      *(_WORD *)&uint8_t buf[8] = 2096;
      *(void *)&buf[10] = a4;
      _os_log_error_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "upgradeDeviceToManatee Acc Master Key:%.16P", buf, 0x12u);
      uint64_t v54 = qword_100A19E60;
    }
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR)) {
      sub_100753F8C((uint64_t)a5, v54);
    }
  }
  else
  {
    uint64_t v8 = a1 + 48;
    *(_OWORD *)(a1 + 48) = *a4;
    char v64 = (_OWORD *)(a1 + 64);
    *(_OWORD *)(a1 + 64) = *a5;
    long long v9 = qword_100A19E60;
    uint64_t v62 = (_OWORD *)(a1 + 48);
    if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68157954;
      *(_DWORD *)&uint8_t buf[4] = 16;
      *(_WORD *)&uint8_t buf[8] = 2096;
      *(void *)&buf[10] = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "upgradeDeviceToManatee Acc Master Key:%.16P", buf, 0x12u);
      long long v9 = qword_100A19E60;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68157954;
      *(_DWORD *)&uint8_t buf[4] = 16;
      *(_WORD *)&uint8_t buf[8] = 2096;
      *(void *)&buf[10] = v64;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "upgradeDeviceToManatee Acc Master Hint:%.16P", buf, 0x12u);
    }
    xpc_object_t xdict = xpc_dictionary_create(0, 0, 0);
    long long v10 = qword_100A19E60;
    if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = a3;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "upgradeDeviceToManatee Upload Magic pairing device info to cloud for %d devices", buf, 8u);
    }
    long long v11 = *(char **)(a1 + 24);
    *(void *)(a1 + 32) = v11;
    if (a3)
    {
      uint64_t v12 = 0;
      long long v13 = (void *)(a1 + 40);
      uint64_t v14 = a3;
      do
      {
        long long v15 = *(char **)(a1 + 24);
        if (v15 != v11)
        {
          uint64_t v16 = 0;
          uint64_t v17 = a2 + 152 * v12;
          while (1)
          {
            __int16 v18 = &v15[v16];
            long long v71 = *(_OWORD *)&v15[v16 + 96];
            long long v72 = *(_OWORD *)&v15[v16 + 112];
            long long v73 = *(_OWORD *)&v15[v16 + 128];
            uint64_t v74 = *(void *)&v15[v16 + 144];
            *(_OWORD *)&uint8_t buf[32] = *(_OWORD *)&v15[v16 + 32];
            long long v68 = *(_OWORD *)&v15[v16 + 48];
            long long v69 = *(_OWORD *)&v15[v16 + 64];
            long long v70 = *(_OWORD *)&v15[v16 + 80];
            *(_OWORD *)buf = *(_OWORD *)&v15[v16];
            *(_OWORD *)&uint8_t buf[16] = *(_OWORD *)&v15[v16 + 16];
            if (*(_DWORD *)buf == *(_DWORD *)v17 && *(unsigned __int16 *)&buf[4] == *(unsigned __int16 *)(v17 + 4)) {
              break;
            }
            v16 += 152;
            if (&v15[v16] == v11) {
              goto LABEL_22;
            }
          }
          size_t v20 = v11 - (v18 + 152);
          if (v20) {
            memmove(&v15[v16], v18 + 152, v20);
          }
          long long v11 = &v18[v20];
          *(void *)(a1 + 32) = v11;
        }
LABEL_22:
        uint64_t v21 = a2 + 152 * v12;
        if ((unint64_t)v11 >= *v13)
        {
          uint64_t v29 = *(void *)(a1 + 24);
          unint64_t v30 = 0x86BCA1AF286BCA1BLL * ((uint64_t)&v11[-v29] >> 3);
          unint64_t v31 = v30 + 1;
          if (v30 + 1 > 0x1AF286BCA1AF286) {
            abort();
          }
          if (0xD79435E50D79436 * ((*v13 - v29) >> 3) > v31) {
            unint64_t v31 = 0xD79435E50D79436 * ((*v13 - v29) >> 3);
          }
          if (0x86BCA1AF286BCA1BLL * ((*v13 - v29) >> 3) >= 0xD79435E50D7943) {
            unint64_t v32 = 0x1AF286BCA1AF286;
          }
          else {
            unint64_t v32 = v31;
          }
          if (v32) {
            long long v33 = (char *)sub_1002DDC78(a1 + 40, v32);
          }
          else {
            long long v33 = 0;
          }
          long long v34 = &v33[152 * v30];
          long long v35 = *(_OWORD *)(v21 + 16);
          *(_OWORD *)long long v34 = *(_OWORD *)v21;
          *((_OWORD *)v34 + 1) = v35;
          long long v36 = *(_OWORD *)(v21 + 32);
          long long v37 = *(_OWORD *)(v21 + 48);
          long long v38 = *(_OWORD *)(v21 + 80);
          *((_OWORD *)v34 + 4) = *(_OWORD *)(v21 + 64);
          *((_OWORD *)v34 + 5) = v38;
          *((_OWORD *)v34 + 2) = v36;
          *((_OWORD *)v34 + 3) = v37;
          long long v39 = *(_OWORD *)(v21 + 96);
          long long v40 = *(_OWORD *)(v21 + 112);
          long long v41 = *(_OWORD *)(v21 + 128);
          *((void *)v34 + 18) = *(void *)(v21 + 144);
          *((_OWORD *)v34 + 7) = v40;
          *((_OWORD *)v34 + 8) = v41;
          *((_OWORD *)v34 + 6) = v39;
          long long v43 = *(char **)(a1 + 24);
          long long v42 = *(char **)(a1 + 32);
          long long v44 = v34;
          if (v42 != v43)
          {
            do
            {
              long long v45 = *(_OWORD *)(v42 - 152);
              *(_OWORD *)(v44 - 136) = *(_OWORD *)(v42 - 136);
              *(_OWORD *)(v44 - 152) = v45;
              long long v46 = *(_OWORD *)(v42 - 120);
              long long v47 = *(_OWORD *)(v42 - 104);
              long long v48 = *(_OWORD *)(v42 - 88);
              *(_OWORD *)(v44 - 72) = *(_OWORD *)(v42 - 72);
              *(_OWORD *)(v44 - 88) = v48;
              *(_OWORD *)(v44 - 104) = v47;
              *(_OWORD *)(v44 - 120) = v46;
              long long v49 = *(_OWORD *)(v42 - 56);
              long long v50 = *(_OWORD *)(v42 - 40);
              long long v51 = *(_OWORD *)(v42 - 24);
              *((void *)v44 - 1) = *((void *)v42 - 1);
              *(_OWORD *)(v44 - 24) = v51;
              *(_OWORD *)(v44 - 40) = v50;
              *(_OWORD *)(v44 - 56) = v49;
              v44 -= 152;
              v42 -= 152;
            }
            while (v42 != v43);
            long long v42 = *(char **)(a1 + 24);
          }
          long long v11 = v34 + 152;
          *(void *)(a1 + 24) = v44;
          *(void *)(a1 + 32) = v34 + 152;
          *(void *)(a1 + 40) = &v33[152 * v32];
          if (v42) {
            operator delete(v42);
          }
        }
        else
        {
          long long v22 = *(_OWORD *)(v21 + 16);
          *(_OWORD *)long long v11 = *(_OWORD *)v21;
          *((_OWORD *)v11 + 1) = v22;
          long long v23 = *(_OWORD *)(v21 + 32);
          long long v24 = *(_OWORD *)(v21 + 48);
          long long v25 = *(_OWORD *)(v21 + 80);
          *((_OWORD *)v11 + 4) = *(_OWORD *)(v21 + 64);
          *((_OWORD *)v11 + 5) = v25;
          *((_OWORD *)v11 + 2) = v23;
          *((_OWORD *)v11 + 3) = v24;
          long long v26 = *(_OWORD *)(v21 + 96);
          long long v27 = *(_OWORD *)(v21 + 112);
          long long v28 = *(_OWORD *)(v21 + 128);
          *((void *)v11 + 18) = *(void *)(v21 + 144);
          *((_OWORD *)v11 + 7) = v27;
          *((_OWORD *)v11 + 8) = v28;
          *((_OWORD *)v11 + 6) = v26;
          v11 += 152;
        }
        *(void *)(a1 + 32) = v11;
        ++v12;
      }
      while (v12 != v14);
      uint64_t v52 = *(void *)(a1 + 24);
    }
    else
    {
      LOWORD(v52) = (_WORD)v11;
    }
    size_t v55 = ((_WORD)v11 - (_WORD)v52) & 0xFFF8 | 2u;
    int v56 = malloc_type_malloc(v55, 0x86654511uLL);
    unsigned char *v56 = (unsigned __int16)(-13797 * ((*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 24)) >> 3)) >> 8;
    v56[1] = 27 * ((*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 24)) >> 3);
    (*(void (**)(uint64_t))(*(void *)a1 + 128))(a1);
    unint64_t v57 = qword_100A19E60;
    if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v58 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v55 - 2;
      *(_WORD *)&uint8_t buf[8] = 2048;
      *(void *)&buf[10] = v58;
      _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "upgradeDeviceToManatee Size deviceinfo Blob is %d for %lu of devices", buf, 0x12u);
    }
    int v59 = *(char **)(a1 + 24);
    if (v59 != *(char **)(a1 + 32))
    {
      int v60 = 2;
      do
      {
        memmove(&v56[(unsigned __int16)v60], v59, 0x98uLL);
        v60 += 152;
        v59 += 152;
      }
      while (v59 != *(char **)(a1 + 32));
    }
    xpc_dictionary_set_data(xdict, "kDeviceInfoBlob", v56, v55);
    buf[0] = 2;
    long long v61 = *a4;
    *uint64_t v62 = *a4;
    _OWORD *v64 = *a5;
    *(_OWORD *)&buf[1] = v61;
    *(_OWORD *)&buf[17] = *a5;
    xpc_dictionary_set_data(xdict, "kMasterKeyBlob", buf, 0x21uLL);
    if (*(unsigned char *)(a1 + 80)) {
      sub_100277398(a1 + 88, "upgradeToManatee", xdict, 0);
    }
    free(v56);
  }
}

void sub_1002DD608(void *a1, const char *a2, void *a3)
{
  uint64_t v6 = qword_100A19E60;
  if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received %{public}s message from CloudKit", buf, 0xCu);
  }
  if (!strcmp(a2, "MasterKeysAvailable"))
  {
    xpc_object_t value = xpc_dictionary_get_value(a3, "kMasterKeyBlob");
    size_t length = xpc_data_get_length(value);
    long long v13 = qword_100A19E60;
    if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)&uint8_t buf[4] = length;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Client Received length %zu", buf, 0xCu);
    }
    if (value && length == 33)
    {
      memset(buf, 0, 33);
      if (xpc_data_get_bytes(value, buf, 0, 0x21uLL) == 33)
      {
        (*(void (**)(void *, uint8_t *, uint64_t))(*a1 + 88))(a1, buf, 33);
      }
      else if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_ERROR))
      {
        sub_100754048();
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_ERROR)) {
        sub_100754014();
      }
      dispatch_time_t v22 = dispatch_time(0, 30000000000);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1002DDC60;
      block[3] = &unk_100997528;
      void block[4] = a1;
      dispatch_after(v22, (dispatch_queue_t)&_dispatch_main_q, block);
    }
  }
  else if (!strcmp(a2, "DeviceInfoAvailable"))
  {
    xpc_object_t v14 = xpc_dictionary_get_value(a3, "kDeviceInfoBlob");
    size_t v15 = xpc_data_get_length(v14);
    if (v14 && (size_t v16 = v15, v15 > 1))
    {
      __int16 buffer = 0;
      if (xpc_data_get_bytes(v14, &buffer, 0, 2uLL) == 2)
      {
        uint64_t v17 = HIBYTE(buffer);
        unsigned int v18 = HIBYTE(buffer) | (buffer << 8);
        int v19 = qword_100A19E60;
        if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v18;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "XPC Received Device info for %d devices", buf, 8u);
        }
        unint64_t v20 = v16 - 2;
        unint64_t v21 = 152 * v18;
        if (v20 >= v21)
        {
          a1[4] = a1[3];
          if (v18)
          {
            unint64_t v30 = malloc_type_malloc(152 * v18, 0x10000401CC6BE04uLL);
            if (xpc_data_get_bytes(v14, v30, 2uLL, 152 * v18) != v21) {
              goto LABEL_50;
            }
            uint64_t v31 = a1[2];
            if (v31) {
              (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v31 + 8))(v31, v30, v17);
            }
            if (v30) {
LABEL_50:
            }
              free(v30);
          }
          else
          {
            uint64_t v32 = a1[2];
            if (v32) {
              (*(void (**)(uint64_t, void, void))(*(void *)v32 + 8))(v32, 0, 0);
            }
          }
        }
        else if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_ERROR))
        {
          sub_10075407C();
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_ERROR))
    {
      sub_100753EF0();
    }
  }
  else if (!strcmp(a2, "OnlineStatusChanged"))
  {
    BOOL v23 = xpc_dictionary_get_BOOL(a3, "kOnlineStatus");
    uint64_t v24 = a1[2];
    if (v24) {
      (*(void (**)(uint64_t, BOOL))(*(void *)v24 + 24))(v24, v23);
    }
  }
  else if (!strcmp(a2, "SignInStatusChanged"))
  {
    BOOL v25 = xpc_dictionary_get_BOOL(a3, "kSignInStatus");
    string = xpc_dictionary_get_string(a3, "kSignInAppleID");
    long long v27 = qword_100A19E60;
    if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109635;
      *(_DWORD *)&uint8_t buf[4] = v25;
      *(_WORD *)&uint8_t buf[8] = 2160;
      *(void *)&buf[10] = 1752392040;
      *(_WORD *)&buf[18] = 2081;
      *(void *)&buf[20] = string;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Sign in status changed came from cloudkit, status = %d with loginID: %{private, mask.hash}s", buf, 0x1Cu);
    }
    uint64_t v28 = a1[2];
    if (v28)
    {
      uint64_t v29 = string ? (char *)string : "";
      sub_10004191C(__p, v29);
      (*(void (**)(uint64_t, BOOL, void **))(*(void *)v28 + 16))(v28, v25, __p);
      if (v34 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  else if (!strcmp(a2, "DeviceInfoUploadStatus"))
  {
    BOOL v7 = xpc_dictionary_get_BOOL(a3, "kUploadStatus");
    uint64_t v8 = qword_100A19E60;
    if (os_log_type_enabled((os_log_t)qword_100A19E60, OS_LOG_TYPE_DEFAULT))
    {
      long long v9 = "fail";
      if (v7) {
        long long v9 = "success";
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Device info uploaded status from cloudkit with status = %{public}s", buf, 0xCu);
    }
    uint64_t v10 = a1[2];
    if (v10) {
      (*(void (**)(uint64_t, BOOL))(*(void *)v10 + 32))(v10, v7);
    }
  }
}

void sub_1002DDC3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002DDC60(uint64_t a1)
{
}

void sub_1002DDC68(uint64_t a1, const char *a2, void *a3)
{
}

void *sub_1002DDC78(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1AF286BCA1AF287) {
    sub_1000616DC();
  }
  return operator new(152 * a2);
}

uint64_t sub_1002DDCDC(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = a1 + 16;
  *(void *)a1 = off_1009A35F0;
  *(void *)(a1 + 8) = &off_1009A3618;
  *(void *)(a1 + 16) = &off_1009A3630;
  sub_100052DA8(a1 + 24);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = a1 + 96;
  *(unsigned char *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  uint64_t v4 = sub_10003FFD4();
  sub_1002DEA7C(v4 + 608, a1);
  uint64_t v5 = sub_10003FFD4();
  sub_1002DED8C(v5 + 648, v2);
  char v13 = 0;
  uint64_t v6 = sub_10003FFD4();
  (*(void (**)(uint64_t, char *))(*(void *)v6 + 104))(v6, &v13);
  if (v13)
  {
    unsigned int v7 = sub_1002DDF28();
    *(unsigned char *)(a1 + 112) = v7;
    uint64_t v8 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      long long v9 = "disabled";
      if (v7) {
        long long v9 = "enabled";
      }
      *(_DWORD *)buf = 136315138;
      size_t v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "VoiceTrigger state is initially %s", buf, 0xCu);
    }
  }
  else
  {
    uint64_t v10 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Device not unlocked yet, deferring VoiceTrigger read", buf, 2u);
    }
    uint64_t v11 = sub_10003FFD4();
    sub_1002DF09C(v11 + 448, v3);
  }
  return a1;
}

void sub_1002DDEF0(_Unwind_Exception *a1)
{
  uint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 136) = v6;
    operator delete(v6);
  }
  sub_1000486F0((uint64_t)(v3 - 1), *v3);
  sub_100052DA4(v2);
  _Unwind_Resume(a1);
}

id sub_1002DDF28()
{
  if (!sub_100540050()) {
    return 0;
  }
  uint64_t v0 = +[VTPreferences sharedPreferences];
  id v1 = [v0 voiceTriggerEnabled];

  return v1;
}

void sub_1002DDF78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002DDF8C(uint64_t a1, unint64_t a2)
{
  unint64_t v16 = a2;
  char v15 = 0;
  uint64_t v4 = sub_10003FFD4();
  uint64_t v5 = 0;
  if (!(*(unsigned int (**)(uint64_t, char *))(*(void *)v4 + 136))(v4, &v15))
  {
    if (v15) {
      uint64_t v5 = 1;
    }
    else {
      uint64_t v5 = 2;
    }
    v14[0] = 0;
    v14[1] = 0;
    sub_10003AED0((uint64_t)v14, a1 + 24);
    uint64_t v8 = *(void **)(a1 + 96);
    unsigned int v7 = (void *)(a1 + 96);
    uint64_t v6 = v8;
    if (!v8) {
      goto LABEL_16;
    }
    long long v9 = v7;
    do
    {
      unint64_t v10 = v6[4];
      BOOL v11 = v10 >= a2;
      if (v10 >= a2) {
        uint64_t v12 = v6;
      }
      else {
        uint64_t v12 = v6 + 1;
      }
      if (v11) {
        long long v9 = v6;
      }
      uint64_t v6 = (void *)*v12;
    }
    while (*v12);
    if (v9 == v7 || v9[4] > a2) {
LABEL_16:
    }
      operator new();
    sub_10003AFB4((uint64_t)v14);
  }
  return v5;
}

void sub_1002DE0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002DE0C0(uint64_t a1, int a2)
{
  memset(&v15, 0, sizeof(v15));
  uint64_t v4 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = "disabled";
    if (a2) {
      uint64_t v5 = "enabled";
    }
    LODWORD(buf) = 136446210;
    *(void *)((char *)&buf + 4) = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "APLSIRI support has changed to %{public}s", (uint8_t *)&buf, 0xCu);
  }
  if (a2) {
    uint64_t v6 = "\r\n+APLSIRI:1\r\n";
  }
  else {
    uint64_t v6 = "\r\n+APLSIRI:2\r\n";
  }
  std::string::assign(&v15, v6);
  v14[0] = 0;
  v14[1] = 0;
  sub_10003AED0((uint64_t)v14, a1 + 24);
  long long buf = 0uLL;
  uint64_t v17 = 0;
  sub_1002DF484((uint64_t *)&buf, a1 + 88);
  sub_10003AFE8((uint64_t)v14);
  unsigned int v7 = (_OWORD *)buf;
  if ((long long *)buf != (long long *)((char *)&buf + 8))
  {
    do
    {
      if (qword_1009FB058 != -1) {
        dispatch_once(&qword_1009FB058, &stru_1009A3658);
      }
      uint64_t v8 = off_1009FB050;
      uint64_t v9 = **((void **)v7 + 5);
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        sub_10003B098(&__p, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v15;
      }
      sub_100523814((uint64_t)v8, v9, (char *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      unint64_t v10 = (void *)*((void *)v7 + 1);
      if (v10)
      {
        do
        {
          BOOL v11 = v10;
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          BOOL v11 = (_OWORD *)*((void *)v7 + 2);
          BOOL v12 = *(void *)v11 == (void)v7;
          unsigned int v7 = v11;
        }
        while (!v12);
      }
      unsigned int v7 = v11;
    }
    while (v11 != (long long *)((char *)&buf + 8));
  }
  sub_1000486F0((uint64_t)&buf, *((void **)&buf + 1));
  sub_10003AFB4((uint64_t)v14);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_1002DE2E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,void *a24)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1002DE348(uint64_t a1)
{
  int v2 = sub_1002DDF28();

  sub_1002DE384(a1, v2);
}

void sub_1002DE384(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 112) != a2)
  {
    uint64_t v4 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = "disabled";
      if (a2) {
        uint64_t v5 = "enabled";
      }
      *(_DWORD *)long long buf = 136315138;
      uint64_t v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "VoiceTrigger status changed to %s", buf, 0xCu);
    }
    *(unsigned char *)(a1 + 112) = a2;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    _DWORD v6[2] = sub_1002DE5B8;
    v6[3] = &unk_1009A3638;
    char v7 = a2;
    sub_1002DE4EC((os_unfair_lock_s *)(a1 + 120), v6);
  }
}

void sub_1002DE4B0(uint64_t a1)
{
  uint64_t v1 = a1 - 8;
  int v2 = sub_1002DDF28();

  sub_1002DE384(v1, v2);
}

void sub_1002DE4EC(os_unfair_lock_s *a1, void *a2)
{
  uint64_t v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }
  if (v4)
  {
    uint64_t v6 = v4;
    operator delete(v4);
  }
}

void sub_1002DE590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002DE5B8(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

uint64_t sub_1002DE5E8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 112);
}

uint64_t sub_1002DE5F0(uint64_t a1, unint64_t a2, int a3)
{
  v14[0] = 0;
  v14[1] = 0;
  sub_10003AED0((uint64_t)v14, a1 + 24);
  uint64_t v8 = *(void **)(a1 + 96);
  uint64_t v7 = (void *)(a1 + 96);
  uint64_t v6 = v8;
  if (v8)
  {
    uint64_t v9 = v7;
    do
    {
      unint64_t v10 = v6[4];
      BOOL v11 = v10 >= a2;
      if (v10 >= a2) {
        BOOL v12 = v6;
      }
      else {
        BOOL v12 = v6 + 1;
      }
      if (v11) {
        uint64_t v9 = v6;
      }
      uint64_t v6 = (void *)*v12;
    }
    while (*v12);
    if (v9 != v7 && v9[4] <= a2) {
      *(_DWORD *)(v9[5] + 8) = a3;
    }
  }
  return sub_10003AFB4((uint64_t)v14);
}

uint64_t sub_1002DE684(uint64_t a1, unint64_t a2, int a3)
{
  v14[0] = 0;
  v14[1] = 0;
  sub_10003AED0((uint64_t)v14, a1 + 24);
  uint64_t v8 = *(void **)(a1 + 96);
  uint64_t v7 = (void *)(a1 + 96);
  uint64_t v6 = v8;
  if (v8)
  {
    uint64_t v9 = v7;
    do
    {
      unint64_t v10 = v6[4];
      BOOL v11 = v10 >= a2;
      if (v10 >= a2) {
        BOOL v12 = v6;
      }
      else {
        BOOL v12 = v6 + 1;
      }
      if (v11) {
        uint64_t v9 = v6;
      }
      uint64_t v6 = (void *)*v12;
    }
    while (*v12);
    if (v9 != v7 && v9[4] <= a2) {
      *(_DWORD *)(v9[5] + 12) = a3;
    }
  }
  return sub_10003AFB4((uint64_t)v14);
}

uint64_t sub_1002DE718(uint64_t a1, unint64_t a2)
{
  v13[0] = 0;
  v13[1] = 0;
  sub_10003AED0((uint64_t)v13, a1 + 24);
  uint64_t v6 = *(void **)(a1 + 96);
  uint64_t v5 = (void *)(a1 + 96);
  uint64_t v4 = v6;
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = v5;
  do
  {
    unint64_t v8 = v4[4];
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      unint64_t v10 = v4;
    }
    else {
      unint64_t v10 = v4 + 1;
    }
    if (v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = (void *)*v10;
  }
  while (*v10);
  if (v7 != v5 && v7[4] <= a2) {
    uint64_t v11 = *(unsigned int *)(v7[5] + 8);
  }
  else {
LABEL_12:
  }
    uint64_t v11 = 0;
  sub_10003AFB4((uint64_t)v13);
  return v11;
}

uint64_t sub_1002DE7AC(uint64_t a1, unint64_t a2)
{
  v13[0] = 0;
  v13[1] = 0;
  sub_10003AED0((uint64_t)v13, a1 + 24);
  uint64_t v6 = *(void **)(a1 + 96);
  uint64_t v5 = (void *)(a1 + 96);
  uint64_t v4 = v6;
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = v5;
  do
  {
    unint64_t v8 = v4[4];
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      unint64_t v10 = v4;
    }
    else {
      unint64_t v10 = v4 + 1;
    }
    if (v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = (void *)*v10;
  }
  while (*v10);
  if (v7 != v5 && v7[4] <= a2) {
    uint64_t v11 = *(unsigned int *)(v7[5] + 12);
  }
  else {
LABEL_12:
  }
    uint64_t v11 = 0;
  sub_10003AFB4((uint64_t)v13);
  return v11;
}

BOOL sub_1002DE840(uint64_t a1, unint64_t a2)
{
  v13[0] = 0;
  v13[1] = 0;
  sub_10003AED0((uint64_t)v13, a1 + 24);
  uint64_t v6 = *(void **)(a1 + 96);
  uint64_t v5 = (void *)(a1 + 96);
  uint64_t v4 = v6;
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = v5;
  do
  {
    unint64_t v8 = v4[4];
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      unint64_t v10 = v4;
    }
    else {
      unint64_t v10 = v4 + 1;
    }
    if (v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = (void *)*v10;
  }
  while (*v10);
  if (v7 == v5 || v7[4] > a2) {
LABEL_12:
  }
    uint64_t v7 = v5;
  BOOL v11 = v7 != v5;
  sub_10003AFB4((uint64_t)v13);
  return v11;
}

uint64_t sub_1002DE8D0(uint64_t a1, unint64_t a2)
{
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, a1 + 24);
  if (a2)
  {
    uint64_t v6 = *(void **)(a1 + 96);
    uint64_t v5 = (uint64_t *)(a1 + 96);
    uint64_t v4 = v6;
    if (v6)
    {
      uint64_t v7 = v5;
      do
      {
        unint64_t v8 = v4[4];
        BOOL v9 = v8 >= a2;
        if (v8 >= a2) {
          unint64_t v10 = v4;
        }
        else {
          unint64_t v10 = v4 + 1;
        }
        if (v9) {
          uint64_t v7 = v4;
        }
        uint64_t v4 = (void *)*v10;
      }
      while (*v10);
      if (v7 != v5 && v7[4] <= a2)
      {
        if (v7[5]) {
          operator delete();
        }
        sub_10004D3B8((uint64_t **)v5 - 1, v7);
        operator delete(v7);
      }
    }
  }
  return sub_10003AFB4((uint64_t)v12);
}

void sub_1002DE990(uint64_t a1)
{
  int v2 = sub_1002DDF28();
  sub_1002DE384(a1, v2);
  uint64_t v3 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 112)) {
      uint64_t v4 = "enabled";
    }
    else {
      uint64_t v4 = "disabled";
    }
    int v6 = 136315138;
    uint64_t v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Device is now unlocked, read VoiceTrigger setting as %s", (uint8_t *)&v6, 0xCu);
  }
  uint64_t v5 = sub_10003FFD4();
  sub_1002DF3AC(v5 + 448, a1 + 16);
}

void sub_1002DEA70(uint64_t a1)
{
}

void sub_1002DEA7C(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    int v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  int v6 = *(char **)(a1 + 8);
  while (*(void *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      int v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      uint64_t v7 = a2;
      sub_1002DEB4C(a1 + 8, v6, (char *)&v7);
      sub_100061554(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(void, uint64_t))(a1 + 32))(*(void *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_1002DEB4C(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  int v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    char v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      int v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      int v19 = 0;
    }
    unint64_t v20 = &v19[8 * v16];
    std::string __p = v19;
    long long v27 = v20;
    uint64_t v28 = v20;
    uint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        BOOL v23 = (char *)sub_1000405F8(v8, v22);
        unint64_t v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        long long v27 = v20;
        uint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        long long v27 = v20;
      }
    }
    *(void *)unint64_t v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    uint64_t v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    BOOL v9 = __src + 8;
    unint64_t v10 = v6 - 8;
    BOOL v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_1002DED54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002DED8C(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    int v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  int v6 = *(char **)(a1 + 8);
  while (*(void *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      int v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      uint64_t v7 = a2;
      sub_1002DEE5C(a1 + 8, v6, (char *)&v7);
      sub_100061554(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(void, uint64_t))(a1 + 32))(*(void *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_1002DEE5C(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  int v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    char v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      int v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      int v19 = 0;
    }
    unint64_t v20 = &v19[8 * v16];
    std::string __p = v19;
    long long v27 = v20;
    uint64_t v28 = v20;
    uint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        BOOL v23 = (char *)sub_1000405F8(v8, v22);
        unint64_t v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        long long v27 = v20;
        uint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        long long v27 = v20;
      }
    }
    *(void *)unint64_t v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    uint64_t v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    BOOL v9 = __src + 8;
    unint64_t v10 = v6 - 8;
    BOOL v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_1002DF064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002DF09C(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    int v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  int v6 = *(char **)(a1 + 8);
  while (*(void *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      int v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      uint64_t v7 = a2;
      sub_1002DF16C(a1 + 8, v6, (char *)&v7);
      sub_100061554(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(void, uint64_t))(a1 + 32))(*(void *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_1002DF16C(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  int v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    char v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      int v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      int v19 = 0;
    }
    unint64_t v20 = &v19[8 * v16];
    std::string __p = v19;
    long long v27 = v20;
    uint64_t v28 = v20;
    uint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        BOOL v23 = (char *)sub_1000405F8(v8, v22);
        unint64_t v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        long long v27 = v20;
        uint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        long long v27 = v20;
      }
    }
    *(void *)unint64_t v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    uint64_t v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    BOOL v9 = __src + 8;
    unint64_t v10 = v6 - 8;
    BOOL v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_1002DF374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002DF3AC(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 != v4)
  {
    int64_t v6 = v4 - (v5 + 8);
    if (v4 != v5 + 8) {
      memmove(v5, v5 + 8, v4 - (v5 + 8));
    }
    *(void *)(a1 + 16) = &v5[v6];
    sub_100061554(a1 + 8);
    if (*(void *)(a1 + 8) == *(void *)(a1 + 16)) {
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 32) + 8))(*(void *)(a1 + 32), a1);
    }
  }

  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

uint64_t *sub_1002DF484(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1002DF4DC(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_1002DF4C4(_Unwind_Exception *a1)
{
  sub_1000486F0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1002DF4DC(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    int64_t v6 = result + 1;
    do
    {
      uint64_t result = sub_1002DF568(v5, v6, v4 + 4, (_OWORD *)v4 + 2);
      unint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          unint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_1002DF568(uint64_t **a1, void *a2, unint64_t *a3, _OWORD *a4)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int64_t v6 = (void **)sub_1002DF5F4(a1, a2, &v11, &v10, a3);
  unint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    unint64_t v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    sub_100036CA0(a1, v11, v8, v7);
  }
  return v7;
}

void *sub_1002DF5F4(void *a1, void *a2, void *a3, void *a4, unint64_t *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, unint64_t v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      char v13 = a2;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        char v13 = v10;
      }
      while (v14);
    }
    unint64_t v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = v16;
          unint64_t v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = (void *)*v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = (void *)v17[1];
      }
      while (v16);
    }
    else
    {
      uint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (void *)*v12;
    }
    while (v12);
  }
  else
  {
    int v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      int v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    unint64_t v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          unint64_t v21 = v20;
          unint64_t v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          unint64_t v20 = (void *)*v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        unint64_t v20 = (void *)v21[1];
      }
      while (v20);
    }
    else
    {
      unint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void sub_1002DF79C(id a1)
{
}

void sub_1002DF7E0()
{
}

uint64_t sub_1002DF804(uint64_t result)
{
  *(void *)uint64_t result = &off_1009A3688;
  *(void *)(result + 8) = &off_1009A3860;
  *(void *)(result + 16) = &off_1009A3880;
  *(void *)(result + 24) = &off_1009A38A0;
  *(void *)(result + 32) = &off_1009A38C0;
  *(void *)(result + 40) = &off_1009A38E0;
  *(void *)(result + 48) = &off_1009A3900;
  *(void *)(result + 56) = &off_1009A3920;
  *(void *)(result + 64) = &off_1009A3940;
  *(void *)(result + 72) = &off_1009A3960;
  *(void *)(result + 80) = &off_1009A3980;
  *(void *)(result + 88) = &off_1009A39A0;
  *(void *)(result + 96) = &off_1009A39C0;
  *(void *)(result + 104) = &off_1009A39E0;
  *(void *)(result + 112) = &off_1009A3A00;
  *(void *)(result + 120) = &off_1009A3A20;
  *(void *)(result + 128) = &off_1009A3A40;
  *(void *)(result + 136) = &off_1009A3A60;
  *(void *)(result + 144) = &off_1009A3A80;
  *(void *)(result + 152) = &off_1009A3AA0;
  *(void *)(result + 160) = &off_1009A3AC0;
  *(void *)(result + 168) = &off_1009A3AE0;
  *(void *)(result + 176) = &off_1009A3B00;
  *(void *)(result + 184) = &off_1009A3B20;
  *(void *)(result + 192) = &off_1009A3B40;
  *(void *)(result + 280) = result + 8;
  *(void *)(result + 320) = result + 16;
  *(void *)(result + 360) = result + 24;
  *(void *)(result + 400) = result + 32;
  *(void *)(result + 440) = result + 40;
  *(void *)(result + 480) = result + 48;
  *(void *)(result + 520) = result + 56;
  *(void *)(result + 560) = result + 64;
  *(void *)(result + 600) = result + 72;
  *(void *)(result + 640) = result + 80;
  *(void *)(result + 680) = result + 88;
  *(void *)(result + 720) = result + 96;
  *(void *)(result + 760) = result + 104;
  *(void *)(result + 800) = result + 112;
  *(void *)(result + 840) = result + 120;
  *(void *)(result + 880) = result + 128;
  *(void *)(result + 920) = result + 136;
  *(void *)(result + 960) = result + 144;
  *(void *)(result + 1000) = result + 152;
  *(void *)(result + 1040) = result + 160;
  *(void *)(result + 1080) = result + 168;
  *(void *)(result + 1120) = result + 176;
  *(void *)(result + 1160) = result + 184;
  *(void *)(result + 1200) = result + 192;
  *(void *)(result + 1240) = result + 200;
  *(void *)(result + 264) = 0;
  *(void *)(result + 272) = 0;
  *(void *)(result + 304) = 0;
  *(void *)(result + 312) = 0;
  *(void *)(result + 344) = 0;
  *(void *)(result + 352) = 0;
  *(void *)(result + 384) = 0;
  *(void *)(result + 392) = 0;
  *(void *)(result + 424) = 0;
  *(void *)(result + 432) = 0;
  *(void *)(result + 464) = 0;
  *(void *)(result + 472) = 0;
  *(void *)(result + 200) = &off_1009A3B60;
  *(_DWORD *)(result + 208) = 0;
  *(void *)(result + 216) = 0;
  *(void *)(result + 224) = 0;
  *(void *)(result + 232) = 0;
  *(void *)(result + 240) = result;
  *(_DWORD *)(result + 248) = 0;
  *(void *)(result + 256) = 0;
  *(_DWORD *)(result + 288) = 0;
  *(void *)(result + 296) = 0;
  *(_DWORD *)(result + 328) = 0;
  *(void *)(result + 336) = 0;
  *(_DWORD *)(result + 368) = 0;
  *(void *)(result + 376) = 0;
  *(_DWORD *)(result + 408) = 0;
  *(void *)(result + 416) = 0;
  *(_DWORD *)(result + 448) = 0;
  *(void *)(result + 456) = 0;
  *(_DWORD *)(result + 488) = 0;
  *(void *)(result + 496) = 0;
  *(void *)(result + 504) = 0;
  *(void *)(result + 512) = 0;
  *(_DWORD *)(result + 528) = 0;
  *(void *)(result + 544) = 0;
  *(void *)(result + 536) = 0;
  *(void *)(result + 552) = 0;
  *(_DWORD *)(result + 568) = 0;
  *(void *)(result + 584) = 0;
  *(void *)(result + 576) = 0;
  *(void *)(result + 592) = 0;
  *(_DWORD *)(result + 608) = 0;
  *(void *)(result + 624) = 0;
  *(void *)(result + 616) = 0;
  *(void *)(result + 632) = 0;
  *(_DWORD *)(result + 648) = 0;
  *(void *)(result + 664) = 0;
  *(void *)(result + 656) = 0;
  *(void *)(result + 672) = 0;
  *(_DWORD *)(result + 688) = 0;
  *(void *)(result + 704) = 0;
  *(void *)(result + 696) = 0;
  *(void *)(result + 712) = 0;
  *(_DWORD *)(result + 728) = 0;
  *(void *)(result + 744) = 0;
  *(void *)(result + 736) = 0;
  *(void *)(result + 752) = 0;
  *(_DWORD *)(result + 768) = 0;
  *(void *)(result + 784) = 0;
  *(void *)(result + 776) = 0;
  *(void *)(result + 792) = 0;
  *(_DWORD *)(result + 808) = 0;
  *(void *)(result + 824) = 0;
  *(void *)(result + 816) = 0;
  *(void *)(result + 832) = 0;
  *(_DWORD *)(result + 848) = 0;
  *(void *)(result + 864) = 0;
  *(void *)(result + 856) = 0;
  *(void *)(result + 872) = 0;
  *(_DWORD *)(result + 888) = 0;
  *(void *)(result + 904) = 0;
  *(void *)(result + 896) = 0;
  *(void *)(result + 912) = 0;
  *(_DWORD *)(result + 928) = 0;
  *(void *)(result + 944) = 0;
  *(void *)(result + 936) = 0;
  *(void *)(result + 952) = 0;
  *(_DWORD *)(result + 968) = 0;
  *(void *)(result + 984) = 0;
  *(void *)(result + 976) = 0;
  *(void *)(result + 992) = 0;
  *(_DWORD *)(result + 1008) = 0;
  *(void *)(result + 1024) = 0;
  *(void *)(result + 1016) = 0;
  *(void *)(result + 1032) = 0;
  *(_DWORD *)(result + 1048) = 0;
  *(void *)(result + 1064) = 0;
  *(void *)(result + 1056) = 0;
  *(void *)(result + 1072) = 0;
  *(_DWORD *)(result + 1088) = 0;
  *(void *)(result + 1104) = 0;
  *(void *)(result + 1096) = 0;
  *(void *)(result + 1112) = 0;
  *(_DWORD *)(result + 1128) = 0;
  *(void *)(result + 1144) = 0;
  *(void *)(result + 1136) = 0;
  *(void *)(result + 1152) = 0;
  *(_DWORD *)(result + 1168) = 0;
  *(void *)(result + 1184) = 0;
  *(void *)(result + 1176) = 0;
  *(void *)(result + 1192) = 0;
  *(_DWORD *)(result + 1208) = 0;
  *(void *)(result + 1224) = 0;
  *(void *)(result + 1216) = 0;
  *(void *)(result + 1232) = 0;
  *(_DWORD *)(result + 1248) = 0;
  return result;
}

void sub_1002DFD54(os_unfair_lock_s *a1, void **a2)
{
  uint64_t v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a2;
    if (*((char *)a2 + 23) < 0) {
      uint64_t v5 = *a2;
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Hostname has been set to \"%s\"", buf, 0xCu);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3321888768;
  _DWORD v6[2] = sub_1002DFF8C;
  v6[3] = &unk_1009A3B70;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10003B098(&__p, *a2, (unint64_t)a2[1]);
  }
  else
  {
    long long __p = *(_OWORD *)a2;
    uint64_t v8 = a2[2];
  }
  sub_1002DFEC0(a1 + 52, v6);
  if (SHIBYTE(v8) < 0) {
    operator delete((void *)__p);
  }
}

void sub_1002DFE9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
}

void sub_1002DFEC0(os_unfair_lock_s *a1, void *a2)
{
  uint64_t v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }
  if (v4)
  {
    unint64_t v6 = v4;
    operator delete(v4);
  }
}

void sub_1002DFF64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

void sub_1002DFF8C(uint64_t a1, void (***a2)(void, void **))
{
  if (*(char *)(a1 + 55) < 0)
  {
    sub_10003B098(__p, *(void **)(a1 + 32), *(void *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  (**a2)(a2, __p);
  if (SHIBYTE(v4) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1002E001C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1002E0038(uint64_t a1, uint64_t a2)
{
  uint64_t result = (void *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0) {
    return sub_10003B098(result, *(void **)(a2 + 32), *(void *)(a2 + 40));
  }
  long long v3 = *(_OWORD *)(a2 + 32);
  result[2] = *(void *)(a2 + 48);
  *(_OWORD *)uint64_t result = v3;
  return result;
}

void sub_1002E0068(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
}

void sub_1002E007C(os_unfair_lock_s *a1, int a2, int a3, int a4)
{
  uint64_t v8 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v9 = "disabled";
    *(_DWORD *)long long buf = 136446722;
    if (a2) {
      BOOL v9 = "enabled";
    }
    unint64_t v15 = v9;
    __int16 v16 = 1024;
    int v17 = a3;
    __int16 v18 = 1024;
    int v19 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Tethering is now %{public}s with %u out of %u clients connected", buf, 0x18u);
  }
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  _DWORD v10[2] = sub_1002E0290;
  v10[3] = &unk_1009A3BA0;
  char v11 = a2;
  char v12 = a3;
  char v13 = a4;
  sub_1002E01C4(a1 + 62, v10);
}

void sub_1002E01C4(os_unfair_lock_s *a1, void *a2)
{
  long long v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }
  if (v4)
  {
    unint64_t v6 = v4;
    operator delete(v4);
  }
}

void sub_1002E0268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002E0290(unsigned __int8 *a1, uint64_t (***a2)(void, void, void, void))
{
  return (**a2)(a2, a1[32], a1[33], a1[34]);
}

void sub_1002E02C8(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3)
{
  *(void *)&long long v10 = a2;
  *((void *)&v10 + 1) = a3;
  uint64_t v4 = (id)qword_100A19E50;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_10001A260((uint64_t)&v10);
    if (v9 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)long long buf = 136446210;
    char v12 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    if (v9 < 0) {
      operator delete(__p);
    }
  }

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_1002E04EC;
  v6[3] = &unk_1009A3BC0;
  long long v7 = v10;
  sub_1002E0420(a1 + 72, v6);
}

void sub_1002E0408(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002E0420(os_unfair_lock_s *a1, void *a2)
{
  long long v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }
  if (v4)
  {
    unint64_t v6 = v4;
    operator delete(v4);
  }
}

void sub_1002E04C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002E04EC(uint64_t a1, uint64_t (***a2)(void, void, void))
{
  return (**a2)(a2, *(void *)(a1 + 32), *(void *)(a1 + 40));
}

void sub_1002E051C(os_unfair_lock_s *a1, int a2)
{
  uint64_t v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    int v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Airplane Mode is now %d", buf, 8u);
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1002E06EC;
  v5[3] = &unk_1009A3BE0;
  char v6 = a2;
  sub_1002E0620(a1 + 82, v5);
}

void sub_1002E0620(os_unfair_lock_s *a1, void *a2)
{
  long long v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }
  if (v4)
  {
    char v6 = v4;
    operator delete(v4);
  }
}

void sub_1002E06C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002E06EC(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_1002E071C(os_unfair_lock_s *a1, int a2)
{
  uint64_t v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    int v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Low Power Mode is now %d", buf, 8u);
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1002E0820;
  v5[3] = &unk_1009A3BE0;
  char v6 = a2;
  sub_1002E0620(a1 + 82, v5);
}

uint64_t sub_1002E0820(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 8))(a2, *(unsigned __int8 *)(a1 + 32));
}

uint64_t sub_1002E0850(os_unfair_lock_s *a1, unsigned int a2, int a3)
{
  char v6 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (a2 >= 3)
    {
      uint64_t v7 = "systemWillShutDown";
      if (a2 == 3) {
        uint64_t v7 = "systemWillPowerOn";
      }
    }
    else
    {
      uint64_t v7 = off_1009A3EC8[a2];
    }
    LODWORD(buf) = 136446210;
    *(void *)((char *)&buf + 4) = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "PowerManagement event: %{public}s", (uint8_t *)&buf, 0xCu);
  }
  *(void *)&long long buf = 0;
  *((void *)&buf + 1) = &buf;
  uint64_t v15 = 0x2020000000;
  char v16 = 1;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1002E0AD8;
  v11[3] = &unk_1009A3C08;
  uint8_t v11[4] = &buf;
  unsigned int v12 = a2;
  int v13 = a3;
  sub_1002E0A0C(a1 + 92, v11);
  if (a2 == 1)
  {
    uint64_t v8 = sub_10003FB34();
    (*(void (**)(uint64_t))(*(void *)v8 + 3304))(v8);
  }
  uint64_t v9 = *(unsigned __int8 *)(*((void *)&buf + 1) + 24);
  _Block_object_dispose(&buf, 8);
  return v9;
}

void sub_1002E09F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1002E0A0C(os_unfair_lock_s *a1, void *a2)
{
  long long v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }
  if (v4)
  {
    char v6 = v4;
    operator delete(v4);
  }
}

void sub_1002E0AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002E0AD8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  switch(*(_DWORD *)(result + 40))
  {
    case 0:
      uint64_t result = (**(uint64_t (***)(uint64_t))a2)(a2);
      goto LABEL_10;
    case 1:
      long long v3 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 8);
      uint64_t v4 = a2;
      goto LABEL_5;
    case 2:
      long long v3 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 16);
      uint64_t v4 = a2;
LABEL_5:
      uint64_t result = v3(v4);
      break;
    case 4:
      uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(unsigned int *)(result + 44));
LABEL_10:
      uint64_t v5 = *(void *)(*(void *)(v2 + 32) + 8);
      if (*(unsigned char *)(v5 + 24)) {
        char v6 = result;
      }
      else {
        char v6 = 0;
      }
      *(unsigned char *)(v5 + 24) = v6;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1002E0C2C(os_unfair_lock_s *a1, int a2)
{
  uint64_t v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    int v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "System keybag unlocked : %d", buf, 8u);
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1002E0DFC;
  v5[3] = &unk_1009A3C28;
  char v6 = a2;
  sub_1002E0D30(a1 + 112, v5);
}

void sub_1002E0D30(os_unfair_lock_s *a1, void *a2)
{
  long long v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }
  if (v4)
  {
    char v6 = v4;
    operator delete(v4);
  }
}

void sub_1002E0DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002E0DFC(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_1002E0E2C(os_unfair_lock_s *a1, char a2)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1002E0F68;
  v2[3] = &unk_1009A3C48;
  char v3 = a2;
  sub_1002E0E9C(a1 + 122, v2);
}

void sub_1002E0E9C(os_unfair_lock_s *a1, void *a2)
{
  char v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }
  if (v4)
  {
    char v6 = v4;
    operator delete(v4);
  }
}

void sub_1002E0F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002E0F68(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_1002E0F98(os_unfair_lock_s *a1, int a2, int a3)
{
  char v6 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = "dis";
    if (a2) {
      uint64_t v7 = "";
    }
    *(_DWORD *)long long buf = 67109378;
    int v12 = a3;
    __int16 v13 = 2082;
    BOOL v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Battery capacity is now at %u%% (%{public}scharging)", buf, 0x12u);
  }
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1002E1194;
  v8[3] = &unk_1009A3C68;
  char v9 = a2;
  char v10 = a3;
  sub_1002E10C8(a1 + 102, v8);
}

void sub_1002E10C8(os_unfair_lock_s *a1, void *a2)
{
  char v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }
  if (v4)
  {
    char v6 = v4;
    operator delete(v4);
  }
}

void sub_1002E116C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002E1194(uint64_t a1, uint64_t (***a2)(void, void, void))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32), *(unsigned __int8 *)(a1 + 33));
}

void sub_1002E11C8(os_unfair_lock_s *a1, unsigned int a2)
{
  if (a2 > 2) {
    uint64_t v4 = "unknown";
  }
  else {
    uint64_t v4 = off_1009A3EE0[a2];
  }
  uint64_t v5 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    char v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Power source is now %s", buf, 0xCu);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_1002E13B8;
  v6[3] = &unk_1009A3C88;
  unsigned int v7 = a2;
  sub_1002E12EC(a1 + 132, v6);
}

void sub_1002E12EC(os_unfair_lock_s *a1, void *a2)
{
  char v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }
  if (v4)
  {
    char v6 = v4;
    operator delete(v4);
  }
}

void sub_1002E1390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002E13B8(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(unsigned int *)(a1 + 32));
}

void sub_1002E13E8(os_unfair_lock_s *a1, int a2)
{
  uint64_t v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = "disabled";
    if (a2) {
      uint64_t v5 = "enabled";
    }
    *(_DWORD *)long long buf = 136446210;
    char v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Siri is now %{public}s", buf, 0xCu);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_1002E15D0;
  v6[3] = &unk_1009A3CC8;
  char v7 = a2;
  sub_1002E1504(a1 + 152, v6);
}

void sub_1002E1504(os_unfair_lock_s *a1, void *a2)
{
  char v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }
  if (v4)
  {
    char v6 = v4;
    operator delete(v4);
  }
}

void sub_1002E15A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002E15D0(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_1002E1600(os_unfair_lock_s *a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)char v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Siri VoiceTrigger state changed", v3, 2u);
  }
  sub_1002E167C(a1 + 162, &stru_1009A3D08);
}

void sub_1002E167C(os_unfair_lock_s *a1, void *a2)
{
  char v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }
  if (v4)
  {
    char v6 = v4;
    operator delete(v4);
  }
}

void sub_1002E1720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

void sub_1002E1748(id a1, SiriVoiceTriggerListener *a2)
{
}

void sub_1002E1770(os_unfair_lock_s *a1, int a2)
{
  uint64_t v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = "disabled";
    if (a2) {
      uint64_t v5 = "enabled";
    }
    *(_DWORD *)long long buf = 136446210;
    char v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Carplay is now %{public}s", buf, 0xCu);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_1002E1958;
  v6[3] = &unk_1009A3D28;
  char v7 = a2;
  sub_1002E188C(a1 + 172, v6);
}

void sub_1002E188C(os_unfair_lock_s *a1, void *a2)
{
  char v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }
  if (v4)
  {
    char v6 = v4;
    operator delete(v4);
  }
}

void sub_1002E1930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002E1958(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_1002E1988(os_unfair_lock_s *a1, int a2)
{
  uint64_t v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = "off";
    if (a2) {
      uint64_t v5 = "on";
    }
    *(_DWORD *)long long buf = 136446210;
    char v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Screen state is now %{public}s", buf, 0xCu);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_1002E1B70;
  v6[3] = &unk_1009A3D48;
  char v7 = a2;
  sub_1002E1AA4(a1 + 182, v6);
}

void sub_1002E1AA4(os_unfair_lock_s *a1, void *a2)
{
  char v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }
  if (v4)
  {
    char v6 = v4;
    operator delete(v4);
  }
}

void sub_1002E1B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002E1B70(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_1002E1BA0(os_unfair_lock_s *a1, int a2)
{
  uint64_t v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = "Closed";
    if (a2) {
      uint64_t v5 = "Lauched";
    }
    *(_DWORD *)long long buf = 136446210;
    char v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "GarageBand is now %{public}s", buf, 0xCu);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_1002E1D88;
  v6[3] = &unk_1009A3D68;
  char v7 = a2;
  sub_1002E1CBC(a1 + 222, v6);
}

void sub_1002E1CBC(os_unfair_lock_s *a1, void *a2)
{
  char v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }
  if (v4)
  {
    char v6 = v4;
    operator delete(v4);
  }
}

void sub_1002E1D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002E1D88(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_1002E1DB8(os_unfair_lock_s *a1, int a2)
{
  uint64_t v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = "off";
    if (a2) {
      uint64_t v5 = "on";
    }
    *(_DWORD *)long long buf = 136446210;
    char v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Accessibility head tracking is now %{public}s", buf, 0xCu);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_1002E1FA0;
  v6[3] = &unk_1009A3D88;
  char v7 = a2;
  sub_1002E1ED4(a1 + 232, v6);
}

void sub_1002E1ED4(os_unfair_lock_s *a1, void *a2)
{
  char v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }
  if (v4)
  {
    char v6 = v4;
    operator delete(v4);
  }
}

void sub_1002E1F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002E1FA0(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_1002E1FD0(os_unfair_lock_s *a1, int a2)
{
  uint64_t v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = "Not Allowed";
    if (a2) {
      uint64_t v5 = "Allowed";
    }
    *(_DWORD *)long long buf = 136446210;
    char v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Spatial Profile is now %{public}s", buf, 0xCu);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_1002E21B8;
  v6[3] = &unk_1009A3DA8;
  char v7 = a2;
  sub_1002E20EC(a1 + 252, v6);
}

void sub_1002E20EC(os_unfair_lock_s *a1, void *a2)
{
  char v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }
  if (v4)
  {
    char v6 = v4;
    operator delete(v4);
  }
}

void sub_1002E2190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002E21B8(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_1002E21E8(os_unfair_lock_s *a1, int a2)
{
  uint64_t v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = "Disabled";
    if (a2) {
      uint64_t v5 = "Enabled";
    }
    *(_DWORD *)long long buf = 136446210;
    char v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "HID 3pp LE to Low Latency is now %{public}s", buf, 0xCu);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_1002E23D0;
  v6[3] = &unk_1009A3DC8;
  char v7 = a2;
  sub_1002E2304(a1 + 262, v6);
}

void sub_1002E2304(os_unfair_lock_s *a1, void *a2)
{
  char v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }
  if (v4)
  {
    char v6 = v4;
    operator delete(v4);
  }
}

void sub_1002E23A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002E23D0(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_1002E2400(os_unfair_lock_s *a1, int a2)
{
  uint64_t v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = "off";
    if (a2) {
      uint64_t v5 = "on";
    }
    *(_DWORD *)long long buf = 136446210;
    char v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Keyboard is now %{public}s", buf, 0xCu);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_1002E25E8;
  v6[3] = &unk_1009A3DE8;
  char v7 = a2;
  sub_1002E251C(a1 + 202, v6);
}

void sub_1002E251C(os_unfair_lock_s *a1, void *a2)
{
  char v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }
  if (v4)
  {
    char v6 = v4;
    operator delete(v4);
  }
}

void sub_1002E25C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002E25E8(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_1002E2618(os_unfair_lock_s *a1, int a2)
{
  if ((a2 - 1) > 6) {
    uint64_t v4 = "unknown";
  }
  else {
    uint64_t v4 = off_1009A3EF8[a2 - 1];
  }
  uint64_t v5 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    char v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Device orientation is now %s", buf, 0xCu);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_1002E280C;
  v6[3] = &unk_1009A3E08;
  int v7 = a2;
  sub_1002E2740(a1 + 212, v6);
}

void sub_1002E2740(os_unfair_lock_s *a1, void *a2)
{
  char v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }
  if (v4)
  {
    char v6 = v4;
    operator delete(v4);
  }
}

void sub_1002E27E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002E280C(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(unsigned int *)(a1 + 32));
}

void sub_1002E283C(os_unfair_lock_s *a1, int a2)
{
  uint64_t v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    int v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "SystemSettingsModel::systemMonitor device lock state changed:%d", buf, 8u);
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1002E2A0C;
  v5[3] = &unk_1009A3E28;
  char v6 = a2;
  sub_1002E2940(a1 + 272, v5);
}

void sub_1002E2940(os_unfair_lock_s *a1, void *a2)
{
  char v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }
  if (v4)
  {
    char v6 = v4;
    operator delete(v4);
  }
}

void sub_1002E29E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002E2A0C(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_1002E2A3C(os_unfair_lock_s *a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)char v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "SystemSettingsModel::systemMonitor first unlock", v3, 2u);
  }
  sub_1002E2AB8(a1 + 282, &stru_1009A3E68);
}

void sub_1002E2AB8(os_unfair_lock_s *a1, void *a2)
{
  char v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }
  if (v4)
  {
    char v6 = v4;
    operator delete(v4);
  }
}

void sub_1002E2B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

void sub_1002E2B84(id a1, DeviceFirstUnlockedListener *a2)
{
}

void sub_1002E2BAC(os_unfair_lock_s *a1, int a2)
{
  uint64_t v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    int v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "SystemSettingsModel::systemMonitor game console mode changed:%d", buf, 8u);
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1002E2D7C;
  v5[3] = &unk_1009A3E88;
  char v6 = a2;
  sub_1002E2CB0(a1 + 292, v5);
}

void sub_1002E2CB0(os_unfair_lock_s *a1, void *a2)
{
  char v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }
  if (v4)
  {
    char v6 = v4;
    operator delete(v4);
  }
}

void sub_1002E2D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002E2D7C(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_1002E2DAC(os_unfair_lock_s *a1, int a2)
{
  uint64_t v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    int v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "SystemSettingsModel::notifySmartCoverStateChanged Smart Cover State Changed:%d", buf, 8u);
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1002E2F7C;
  v5[3] = &unk_1009A3EA8;
  int v6 = a2;
  sub_1002E2EB0(a1 + 302, v5);
}

void sub_1002E2EB0(os_unfair_lock_s *a1, void *a2)
{
  char v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0;
  int v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }
  if (v4)
  {
    int v6 = v4;
    operator delete(v4);
  }
}

void sub_1002E2F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002E2F7C(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(unsigned int *)(a1 + 32));
}

void sub_1002E2FAC(os_unfair_lock_s *a1, int a2)
{
  a1[312]._os_unfair_lock_opaque = a2;
  sub_1002E2DAC(a1, a2);
}

uint64_t sub_1002E2FB4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1248);
}

void sub_1002E30DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)BTVCLinkAdvertiser;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1002E3214(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002E32A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);

  _Unwind_Resume(a1);
}

void sub_1002E3418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  objc_sync_exit(v21);
  _Unwind_Resume(a1);
}

void sub_1002E344C(uint64_t a1)
{
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 32), *(id *)(a1 + 40));
  uint64_t v2 = *(void *)(a1 + 32);
  char v3 = *(void **)(v2 + 48);
  *(void *)(v2 + 48) = 0;

  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 56);
  *(void *)(v4 + 56) = 0;
}

unsigned char *sub_1002E34A4(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t result = *(unsigned char **)(a1 + 32);
  if (result[25])
  {
    return [result _restartIfNeeded:0];
  }
  return result;
}

void sub_1002E3654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  objc_sync_exit(v21);
  _Unwind_Resume(a1);
}

void sub_1002E3688(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  char v3 = *(void **)(v2 + 32);
  *(void *)(v2 + 32) = 0;

  objc_storeStrong((id *)(*(void *)(a1 + 32) + 48), *(id *)(a1 + 40));
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 56);
  *(void *)(v4 + 56) = 0;
}

unsigned char *sub_1002E36E0(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t result = *(unsigned char **)(a1 + 32);
  if (result[25])
  {
    return [result _restartIfNeeded:0];
  }
  return result;
}

id sub_1002E3800(uint64_t a1)
{
  return [*(id *)(a1 + 32) _activateWithCompletion:*(void *)(a1 + 40)];
}

void sub_1002E3AE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1002E3BCC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _advertisingEnable:*(unsigned __int8 *)(a1 + 40)];
}

void sub_1002E3E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002E3E54(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = qword_100A19FE8;
  if (os_log_type_enabled((os_log_t)qword_100A19FE8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315138;
    uint64_t v4 = "-[BTVCLinkAdvertiser _advertisingEnable:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s _restartIfNeeded\n", (uint8_t *)&v3, 0xCu);
  }
  [WeakRetained _restartIfNeeded:1];
}

void sub_1002E3F18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1002E3FA4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

void sub_1002E4128(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002E4544(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002E465C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002E4780(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002E4870(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002E49A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002E4B20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002E4C18(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_1002E4C28(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_1002E4C44(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

uint64_t sub_1002E4C60(uint64_t a1, uint64_t a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v19 = 0;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  *(_OWORD *)long long __p = 0u;
  long long v8 = 0u;
  memset(v6, 0, sizeof(v6));
  sub_1000419CC((uint64_t)v6);
  if (v3)
  {
    uint64_t v3 = v3;
    do
    {
      *(_DWORD *)((char *)v6 + *(void *)(*(void *)&v6[0] - 24) + 8) = *(_DWORD *)((unsigned char *)v6
                                                                                      + *(void *)(*(void *)&v6[0]
                                                                                                  - 24)
                                                                                      + 8) & 0xFFFFFFB5 | 8;
      ++a2;
      std::ostream::operator<<();
      --v3;
    }
    while (v3);
  }
  std::stringbuf::str();
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1002E4E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id sub_1002E4E24(uint64_t a1, int a2)
{
  id v3 = objc_alloc_init((Class)NSMutableString);
  uint64_t v4 = v3;
  if (a2 == -1)
  {
    CFStringRef v5 = @"ALL";
    goto LABEL_5;
  }
  if (!a2)
  {
    CFStringRef v5 = @"NONE";
LABEL_5:
    [v3 appendString:v5];
    goto LABEL_12;
  }
  for (int i = 0; i != 32; ++i)
  {
    if (((1 << i) & a2) != 0)
    {
      if ([v4 length]) {
        [v4 appendString:@","];
      }
      int v9 = (1 << i) & a2;
      uint64_t v7 = +[NSString stringWithUTF8String:sub_1004D53E8(&v9)];
      [v4 appendString:v7];
    }
  }
LABEL_12:

  return v4;
}

void sub_1002E4F2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1002E4F50(uint64_t a1, uint64_t a2)
{
  id v3 = objc_alloc_init((Class)NSMutableString);
  uint64_t v4 = v3;
  if (a2)
  {
    for (uint64_t i = 0; i != 64; ++i)
    {
      uint64_t v6 = (1 << i) & a2;
      if (v6)
      {
        if ([v4 length]) {
          [v4 appendString:@","];
        }
        uint64_t v7 = "ContactSyncSettingsSupported";
        switch(v6)
        {
          case 1:
            break;
          case 2:
            uint64_t v7 = "ContactSyncSettingsEnabled";
            break;
          case 3:
          case 5:
          case 6:
          case 7:
            goto LABEL_11;
          case 4:
            uint64_t v7 = "RecentCallsSyncSettingsEnabled";
            break;
          case 8:
            uint64_t v7 = "FavoritedSyncSettingsEnabled";
            break;
          default:
            if (v6 == 16)
            {
              uint64_t v7 = "ContactSyncSettingsGranted";
            }
            else if (v6 == 32)
            {
              uint64_t v7 = "MapSyncEnabled";
            }
            else
            {
LABEL_11:
              uint64_t v7 = "Unknown";
            }
            break;
        }
        long long v8 = +[NSString stringWithUTF8String:v7];
        [v4 appendString:v8];
      }
    }
  }
  else
  {
    [v3 appendString:@"SyncSettingsCleared"];
  }

  return v4;
}

void sub_1002E50C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFStringRef sub_1002E5104(uint64_t a1, int a2)
{
  if (a2 <= 100)
  {
    if (a2 > 10)
    {
      if (a2 == 11) {
        return @"CONNECTION_RESULT";
      }
      if (a2 == 12) {
        return @"DISCONNECTION_RESULT";
      }
    }
    else
    {
      if (a2 == 1) {
        return @"CONNECTION_ATTEMPT";
      }
      if (a2 == 2) {
        return @"DISCONNECTION_ATTEMPT";
      }
    }
  }
  else if (a2 <= 200)
  {
    if (a2 == 101) {
      return @"HANDSFREE_AUDIO_CONNECTED";
    }
    if (a2 == 102) {
      return @"HANDSFREE_AUDIO_DISCONNECTED";
    }
  }
  else
  {
    switch(a2)
    {
      case 201:
        return @"A2DP_AUDIO_CONNECTED";
      case 202:
        return @"A2DP_AUDIO_DISCONNECTED";
      case 412:
        return @"HANDSFREE_AUDIO_CONNECTION_LOOPS";
    }
  }
  return @"Unknown";
}

uint64_t sub_1002E51DC(uint64_t result, int a2)
{
  *(void *)uint64_t result = off_1009A3FD0;
  *(unsigned char *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(_DWORD *)(result + 40) = a2;
  switch(a2)
  {
    case 0:
      int v2 = 1536;
      goto LABEL_6;
    case 1:
      *(_DWORD *)(result + 24) = -1;
      operator new();
    case 2:
      int v2 = 513;
      goto LABEL_6;
    case 3:
      int v2 = 268435712;
      goto LABEL_6;
    case 4:
      int v2 = 134217984;
LABEL_6:
      *(_DWORD *)(result + 24) = v2;
      *(void *)(result + 32) = 0;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1002E52E0()
{
}

void *sub_1002E531C(void *a1)
{
  *a1 = off_1009A3FD0;
  int v2 = (ctu::TextConverter *)a1[4];
  if (v2)
  {
    ctu::TextConverter::~TextConverter(v2);
    operator delete();
  }
  return a1;
}

void sub_1002E5380(void *a1)
{
  sub_1002E531C(a1);

  operator delete();
}

double sub_1002E53B8@<D0>(uint64_t a1@<X0>, const char *a2@<X1>, std::string *a3@<X8>)
{
  if (*(_DWORD *)(a1 + 24) == -1) {
    sub_1002E562C(a1, a2, &__str);
  }
  else {
    sub_1002E54E8(a1, a2, &__str);
  }
  double result = *(double *)&__str.__r_.__value_.__l.__data_;
  std::string __p = __str;
  if (*(unsigned char *)(a1 + 8))
  {
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
    int v6 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      do
      {
        __str.__r_.__value_.__s.__data_[2] = 0;
        LOWORD(__str.__r_.__value_.__l.__data_) = 0;
        int v9 = p_p->__r_.__value_.__s.__data_[0];
        p_p = (std::string *)((char *)p_p + 1);
        snprintf((char *)&__str, 3uLL, "%02X", v9);
        std::string::append(a3, (const std::string::value_type *)&__str);
        --size;
      }
      while (size);
    }
    if (v6 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    double result = *(double *)&__p.__r_.__value_.__l.__data_;
    *a3 = __p;
  }
  return result;
}

void sub_1002E54C0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  if (v3 < 0) {
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1002E54E8@<X0>(uint64_t a1@<X0>, const char *a2@<X1>, void *a3@<X8>)
{
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  CFStringRef v5 = CFStringCreateWithCStringNoCopy(kCFAllocatorDefault, a2, 0x8000100u, kCFAllocatorNull);
  CFIndex Length = CFStringGetLength(v5);
  unint64_t MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, *(_DWORD *)(a1 + 24));
  unint64_t v9 = *(void *)(a1 + 16);
  if (MaximumSizeForEncoding <= v9 || v9 == 0) {
    size_t v11 = MaximumSizeForEncoding;
  }
  else {
    size_t v11 = *(void *)(a1 + 16);
  }
  __chkstk_darwin(MaximumSizeForEncoding, v8);
  long long v13 = (UInt8 *)&v15 - v12;
  bzero((char *)&v15 - v12, v11);
  size_t v15 = 0;
  v16.size_t length = CFStringGetLength(v5);
  v16.location = 0;
  CFStringGetBytes(v5, v16, *(_DWORD *)(a1 + 24), 0x20u, 0, v13, v11, (CFIndex *)&v15);
  CFRelease(v5);
  return sub_1002E5698(a3, v13, v15);
}

void sub_1002E562C(uint64_t a1@<X0>, const char *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *((void *)a2 + 1);
  if (a2[23] >= 0)
  {
    int v7 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const char **)a2;
    int v7 = v6;
  }
  ctu::TextConverter::setSource(v5, a2, v7);
  uint64_t v8 = *(ctu::TextConverter **)(a1 + 32);
  if (*(void *)(a1 + 16)) {
    uint64_t v9 = *(void *)(a1 + 16);
  }
  else {
    uint64_t v9 = 0x7FFFFFFFLL;
  }

  ctu::TextConverter::readChars(v8, v9, a3);
}

void *sub_1002E5698(void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__uuid_t dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    uint64_t v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

void *sub_1002E5740(void *a1)
{
  *a1 = &off_1009A4118;
  sub_100052DA8(a1 + 1);
  a1[9] = 0;
  a1[10] = 0;
  *a1 = off_1009A3FF0;
  a1[11] = off_1009A40E8;
  a1[13] = 0;
  a1[12] = a1 + 13;
  a1[14] = 0;
  int v3 = +[BTAppInteraction instance];
  [v3 setListener:a1 + 11];

  return a1;
}

void sub_1002E582C(_Unwind_Exception *a1)
{
  sub_1002E6A5C(v4, *(void **)(v1 + 104));
  *(void *)uint64_t v1 = v2;
  sub_100052DA4(v3);
  _Unwind_Resume(a1);
}

void sub_1002E5860(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v10 = a2;
  id v6 = a3;
  id v7 = a4;
  uint64_t v9 = +[BTAppInteraction instance];
  [v9 launchApplication:v10 restoringCentrals:v6 peripherals:v7];
}

void sub_1002E5900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1002E5928(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  uint64_t v5 = +[BTAppInteraction instance];
  [v5 updateApplicationAliveStatus:v6 isAlive:a3];
}

void sub_1002E59A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1002E59C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = +[BTAppInteraction instance];
  [v4 updateApplicationState:a2];
}

void sub_1002E5A2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002E5A3C(uint64_t a1, uint64_t a2)
{
  sub_10001854C(a1, a2, __p);
  if (v9 >= 0) {
    uint64_t v5 = __p;
  }
  else {
    uint64_t v5 = (void **)__p[0];
  }
  id v6 = +[NSString stringWithUTF8String:v5];
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  id v7 = +[BTAppInteraction instance];
  [v7 setCentralBackgroundingSupported:v6];
}

void sub_1002E5AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_1002E5B2C(uint64_t a1, uint64_t a2)
{
  sub_10001854C(a1, a2, __p);
  if (v9 >= 0) {
    uint64_t v5 = __p;
  }
  else {
    uint64_t v5 = (void **)__p[0];
  }
  id v6 = +[NSString stringWithUTF8String:v5];
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  id v7 = +[BTAppInteraction instance];
  [v7 setPeripheralBackgroundingSupported:v6];
}

void sub_1002E5BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002E5C1C(uint64_t a1, const void **a2, int a3)
{
  v17[0] = 0;
  v17[1] = 0;
  sub_10003AED0((uint64_t)v17, a1 + 8);
  uint64_t v6 = sub_10003156C(a1 + 96, a2);
  if (a1 + 104 != v6)
  {
    if (*(void *)(a1 + 80))
    {
      id v7 = *(void **)(v6 + 56);
      size_t v8 = (void *)(v6 + 64);
      if (v7 != (void *)(v6 + 64))
      {
        do
        {
          uint64_t v9 = v7[4];
          uint64_t v10 = sub_100019878();
          v15[0] = _NSConcreteStackBlock;
          v15[1] = 3221225472;
          v15[2] = sub_1002E5D60;
          v15[3] = &unk_100998280;
          void v15[4] = a1;
          v15[5] = v9;
          int v16 = a3;
          sub_100013018(v10, v15);
          size_t v11 = (void *)v7[1];
          if (v11)
          {
            do
            {
              uint64_t v12 = v11;
              size_t v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              uint64_t v12 = (void *)v7[2];
              BOOL v13 = *v12 == (void)v7;
              id v7 = v12;
            }
            while (!v13);
          }
          id v7 = v12;
        }
        while (v12 != v8);
      }
    }
  }
  return sub_10003AFB4((uint64_t)v17);
}

void sub_1002E5D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002E5D60(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(**(void **)(*(void *)(a1 + 32) + 80) + 8))(*(void *)(*(void *)(a1 + 32) + 80), *(void *)(a1 + 40), *(unsigned int *)(a1 + 48));
}

uint64_t sub_1002E5D94(uint64_t a1, const void **a2, int a3)
{
  return sub_1002E5C1C(a1 - 88, a2, a3);
}

uint64_t sub_1002E5D9C(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v9 = +[BTAppInteraction instance];
  sub_10001854C(a1, a2, __p);
  if (v14 >= 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  size_t v11 = +[NSString stringWithUTF8String:v10];
  [v9 takeAssertionForProcess:v11 duration:a3 isUrgent:a4];

  if (v14 < 0) {
    operator delete(__p[0]);
  }

  return 1;
}

void sub_1002E5E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1002E5EAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v7 = +[BTAppInteraction instance];
  sub_10001854C(a1, a2, __p);
  if (v11 >= 0) {
    size_t v8 = __p;
  }
  else {
    size_t v8 = (void **)__p[0];
  }
  uint64_t v9 = +[NSString stringWithUTF8String:v8];
  [v7 showPowerAlert:v9 forDenylistMode:a3 validateBundle:1];

  if (v11 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1002E5F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1002E5FB4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = +[BTAppInteraction instance];
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = (uint64_t *)*a2;
  }
  uint64_t v6 = +[NSString stringWithUTF8String:v5];
  [v4 showPowerAlert:v6 forDenylistMode:0 validateBundle:0];
}

void sub_1002E604C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002E6068(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  uint64_t v9 = +[BTAppInteraction instance];
  sub_10001854C(a1, a2, __p);
  if (v13 >= 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  char v11 = +[NSString stringWithUTF8String:v10];
  [v9 showAppLaunchAlert:v11 device:v7 type:a4];

  if (v13 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1002E6148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1002E6188(uint64_t a1, void *a2, uint64_t a3, unsigned int a4)
{
  id v8 = a2;
  id v7 = +[BTAppInteraction instance];
  [v7 showPairingAlert:v8 type:a3 passkey:a4];
}

void sub_1002E6210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1002E6230()
{
  uint64_t v1 = +[BTAppInteraction instance];
  [v1 showPairingAlert:0 type:0 passkey:0];
}

void sub_1002E6290(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002E62A0(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v3 = +[BTAppInteraction instance];
  [v3 cancelPairingAlert:v4];
}

void sub_1002E6310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1002E6330(uint64_t a1, void *a2)
{
  id v3 = a2;
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 8);
  if (*(void *)(a1 + 72))
  {
    uint64_t v4 = sub_100019878();
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    _DWORD v5[2] = sub_1002E6428;
    v5[3] = &unk_100998A38;
    uint64_t v7 = a1;
    id v6 = v3;
    sub_100013018(v4, v5);
  }
  sub_10003AFB4((uint64_t)v8);
}

void sub_1002E63F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  va_start(va, a7);

  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002E6428(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 40) + 72) + 8))(*(void *)(*(void *)(a1 + 40) + 72), *(void *)(a1 + 32));
}

void sub_1002E6454(uint64_t a1, void *a2)
{
}

void sub_1002E645C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v10 = a5;
  uint64_t v9 = +[BTAppInteraction instance];
  [v9 displayAirWaveLaunchNotification:a2 forProduct:a3 reason:a4 findMySerialNumber:v10];
}

void sub_1002E64F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1002E6514(uint64_t a1, uint64_t a2, unsigned int a3, void *a4, void *a5)
{
  id v11 = a4;
  id v8 = a5;
  id v10 = +[BTAppInteraction instance];
  [v10 showFoundAccessoryCrashAlert:a2 & 0xFFFFFFFFFFFFLL productID:a3 accessoryName:v11 firmwareVersion:v8];
}

void sub_1002E65B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1002E65DC(uint64_t a1, void *a2, uint64_t a3, unsigned int a4, void *a5)
{
  id v11 = a2;
  id v8 = a5;
  id v10 = +[BTAppInteraction instance];
  [v10 showFoundAccessoryLogAlert:v11 isCrash:a3 pid:a4 accessoryName:v8];
}

void sub_1002E6680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1002E66A4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  id v8 = +[BTAppInteraction instance];
  [v8 showFileRadarNotification:a2 & 0xFFFFFFFFFFFFLL reason:a3 pid:a4];
}

void sub_1002E6720(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002E6730(uint64_t a1, void *a2, uint64_t a3, unsigned int a4)
{
  id v8 = a2;
  uint64_t v7 = +[BTAppInteraction instance];
  [v7 openTapToRadarWithAccessoryLogs:v8 reason:a3 pid:a4];
}

void sub_1002E67B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1002E67D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = +[BTAppInteraction instance];
  id v13 = [objc_alloc((Class)NSString) initWithUTF8String:a3];
  id v14 = [objc_alloc((Class)NSString) initWithUTF8String:a4];
  id v15 = [objc_alloc((Class)NSString) initWithUTF8String:a5];
  id v16 = [objc_alloc((Class)NSString) initWithUTF8String:a6];
  [v12 btControllerTapToRadar:a2 reason:v13 cid:v14 cname:v15 cvers:v16];
}

void sub_1002E68D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002E6914(uint64_t a1)
{
  *(void *)a1 = off_1009A3FF0;
  *(void *)(a1 + 88) = off_1009A40E8;
  sub_1002E6A5C(a1 + 96, *(void **)(a1 + 104));
  *(void *)a1 = &off_1009A4118;
  sub_100052DA4(a1 + 8);
  return a1;
}

void sub_1002E69A4(uint64_t a1)
{
  *(void *)a1 = off_1009A3FF0;
  *(void *)(a1 + 88) = off_1009A40E8;
  sub_1002E6A5C(a1 + 96, *(void **)(a1 + 104));
  *(void *)a1 = &off_1009A4118;
  sub_100052DA4(a1 + 8);

  operator delete();
}

void sub_1002E6A5C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1002E6A5C(a1, *a2);
    sub_1002E6A5C(a1, a2[1]);
    sub_100051C18((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t **sub_1002E6AB8(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    id v6 = *result;
    uint64_t v7 = result[1];
    *double result = (uint64_t *)(result + 1);
    _DWORD v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      id v8 = (uint64_t *)v6[1];
    }
    else {
      id v8 = v6;
    }
    id v14 = result;
    id v15 = v8;
    id v16 = v8;
    if (v8)
    {
      id v15 = sub_1002D8040((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          void v8[4] = v9[4];
          sub_1002E6C1C(v5, v8);
          id v8 = v15;
          id v16 = v15;
          if (v15) {
            id v15 = sub_1002D8040((uint64_t)v15);
          }
          id v10 = (void *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              id v10 = (void *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v11 = *a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          uint64_t v9 = a2;
        }
        while (a2 != a3);
      }
    }
    double result = (uint64_t **)sub_1002D8094((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      double result = (uint64_t **)sub_1002E6C8C(v5, a2 + 4);
      uint64_t v12 = (void *)a2[1];
      if (v12)
      {
        do
        {
          id v13 = v12;
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          id v13 = (void *)a2[2];
          BOOL v11 = *v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1002E6C08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002D8094((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1002E6C1C(uint64_t **a1, uint64_t *a2)
{
  id v3 = a1 + 1;
  uint64_t v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        id v3 = (uint64_t **)v4;
        if (a2[4] >= (unint64_t)v4[4]) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v4;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    uint64_t v5 = v3 + 1;
  }
  else
  {
    uint64_t v5 = a1 + 1;
  }
LABEL_8:
  sub_100036CA0(a1, (uint64_t)v3, v5, a2);
  return a2;
}

uint64_t *sub_1002E6C8C(uint64_t **a1, unint64_t *a2)
{
  uint64_t v4 = (uint64_t *)operator new(0x28uLL);
  unint64_t v5 = *a2;
  v4[4] = *a2;
  id v6 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        id v6 = (uint64_t **)v7;
        if (v5 >= v7[4]) {
          break;
        }
        uint64_t v7 = (uint64_t *)*v7;
        id v8 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      uint64_t v7 = (uint64_t *)v7[1];
    }
    while (v7);
    id v8 = v6 + 1;
  }
  else
  {
    id v8 = a1 + 1;
  }
LABEL_8:
  sub_100036CA0(a1, (uint64_t)v6, v8, v4);
  return v4;
}

uint64_t sub_1002E6D1C(uint64_t a1, int a2)
{
  *(void *)a1 = &off_1009A41F0;
  *(_DWORD *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(unsigned char *)(a1 + 24) = 0;
  sub_100052DA8(a1 + 32);
  sub_100052DA8(a1 + 96);
  sub_100052DA8(a1 + 160);
  sub_10030F3A8(a1 + 224, a1);
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  sub_1002D691C((os_log_t *)(a1 + 288));
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  sub_1002D691C((os_log_t *)(a1 + 328));
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 389) = 0;
  *(_WORD *)(a1 + 397) = 2;
  return a1;
}

void sub_1002E6E08(_Unwind_Exception *a1)
{
  sub_100052DA4(v3);
  sub_100052DA4(v2);
  sub_100052DA4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002E6E4C(uint64_t a1)
{
  *(void *)a1 = &off_1009A41F0;
  uint64_t v2 = *(void **)(a1 + 272);
  if (v2) {
    munmap(v2, *(void *)(a1 + 280));
  }
  uint64_t v3 = *(void **)(a1 + 312);
  if (v3) {
    munmap(v3, *(void *)(a1 + 320));
  }
  CFRelease(*(CFTypeRef *)(a1 + 16));
  if (*(char *)(a1 + 391) < 0) {
    operator delete(*(void **)(a1 + 368));
  }
  sub_10030F3E0(a1 + 224);
  sub_100052DA4(a1 + 160);
  sub_100052DA4(a1 + 96);
  sub_100052DA4(a1 + 32);
  return a1;
}

void sub_1002E6EE4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 391) < 0) {
    operator delete(*(void **)(v1 + 368));
  }
  sub_10030F3E0(v1 + 224);
  sub_100052DA4(v1 + 160);
  sub_100052DA4(v1 + 96);
  sub_100052DA4(v1 + 32);
  _Unwind_Resume(a1);
}

uint64_t sub_1002E6F28(unint64_t *a1)
{
  uint64_t v2 = sub_100017768();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2) & 1) != 0
    || (uint64_t v3 = sub_100017768(), (*(unsigned int (**)(uint64_t))(*(void *)v3 + 24))(v3)))
  {
    *((unsigned char *)a1 + 396) = 0;
    LOBYTE(valuePtr) = 0;
    unsigned __int8 v28 = 0;
    uint64_t v4 = sub_100017768();
    sub_10004191C(buf, "BTAudioHALPlugin");
    sub_10004191C(__p, "EnableAudioCaptures");
    (*(void (**)(uint64_t, unsigned char *, void **, uint64_t *))(*(void *)v4 + 72))(v4, buf, __p, &valuePtr);
    if (v31 < 0) {
      operator delete(__p[0]);
    }
    if (v33 < 0) {
      operator delete(*(void **)buf);
    }
    if ((_BYTE)valuePtr) {
      sub_1002E76D4((uint64_t)a1, "kBTAudioDebugEnableAudioCaptures", kCFBooleanTrue);
    }
    uint64_t v5 = sub_100017768();
    sub_10004191C(buf, "BTAudioHALPlugin");
    sub_10004191C(__p, "BTAudioHALEnableAudioLogging");
    (*(void (**)(uint64_t, unsigned char *, void **, unsigned char *))(*(void *)v5 + 72))(v5, buf, __p, (unsigned char *)a1 + 396);
    if (v31 < 0) {
      operator delete(__p[0]);
    }
    if (v33 < 0) {
      operator delete(*(void **)buf);
    }
    if (*((unsigned char *)a1 + 396)) {
      CFBooleanRef v6 = kCFBooleanTrue;
    }
    else {
      CFBooleanRef v6 = kCFBooleanFalse;
    }
    sub_1002E76D4((uint64_t)a1, "kBTAudioDebugEnableAudioLogging", v6);
    uint64_t v7 = sub_100017768();
    sub_10004191C(buf, "BTAudioHALPlugin");
    sub_10004191C(__p, "BTAudioDebugEnableUWBSStereoTest");
    (*(void (**)(uint64_t, unsigned char *, void **, unsigned __int8 *))(*(void *)v7 + 72))(v7, buf, __p, &v28);
    if (v31 < 0) {
      operator delete(__p[0]);
    }
    if (v33 < 0) {
      operator delete(*(void **)buf);
    }
    if (v28) {
      CFBooleanRef v8 = kCFBooleanTrue;
    }
    else {
      CFBooleanRef v8 = kCFBooleanFalse;
    }
    sub_1002E76D4((uint64_t)a1, "kBTAudioDebugEnableUWBSStereoTest", v8);
    uint64_t v9 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v28;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "BTAudioDebugEnableUWBSStereoTest:%d", buf, 8u);
    }
  }
  if ((*(unsigned int (**)(unint64_t *))(*a1 + 112))(a1))
  {
    id v10 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Device supports Skywalk Path", buf, 2u);
    }
    BOOL v11 = +[AudioDeviceManager sharedManager];
    [v11 getAudioSkywalkProvider];

    if (!(*(uint64_t (**)(unint64_t *))(*a1 + 120))(a1))
    {
      uint64_t v12 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_FAULT)) {
        sub_1007543FC(v12, v13, v14, v15, v16, v17, v18, v19);
      }
    }
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    sub_10003AED0((uint64_t)buf, (uint64_t)(a1 + 20));
    operator new();
  }
  LODWORD(valuePtr) = 0;
  if (qword_1009FB218 != -1) {
    dispatch_once(&qword_1009FB218, &stru_1009A4340);
  }
  if (sub_1005F2FE4((uint64_t)off_1009FB210, a1[45], (float *)&valuePtr)
    && *((_DWORD *)a1 + 2) == 1952539500)
  {
    unint64_t v20 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v21 = a1 + 46;
      if (*((char *)a1 + 391) < 0) {
        unint64_t v21 = (void *)*v21;
      }
      *(_DWORD *)long long buf = 134218242;
      *(double *)&uint8_t buf[4] = *(float *)&valuePtr;
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Received initial absolute volume of %f for device %{public}s before publishing", buf, 0x16u);
    }
    CFNumberRef v22 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloatType, &valuePtr);
    sub_1002E76D4((uint64_t)a1, "kBTAudioMsgPropertyVolumeScalar", v22);
    CFRelease(v22);
    sub_1002E83EC((uint64_t)a1, "kBTAudioMsgPropertyVolumeScalar", *(float *)&valuePtr);
  }
  __p[0] = 0;
  __p[1] = 0;
  sub_10003AED0((uint64_t)__p, (uint64_t)(a1 + 4));
  BOOL v23 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Sending publish message", buf, 2u);
  }
  CFDictionaryRef Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, (CFDictionaryRef)a1[2]);
  if (Copy)
  {
    sub_10030F4A0((uint64_t)(a1 + 28), *((_DWORD *)a1 + 2), Copy);
    CFRelease(Copy);
    *((unsigned char *)a1 + 24) = 1;
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    uint64_t v25 = sub_10003AED0((uint64_t)buf, (uint64_t)(a1 + 20));
    *((unsigned char *)a1 + 398) = 1;
    sub_10003AFB4(v25);
  }
  else
  {
    long long v26 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
      sub_1007543B8(v26);
    }
  }
  return sub_10003AFB4((uint64_t)__p);
}

void sub_1002E7620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  sub_10003AFB4(v28 - 80);
  _Unwind_Resume(a1);
}

uint64_t sub_1002E76D4(uint64_t a1, const char *a2, const void *a3)
{
  v19[0] = 0;
  v19[1] = 0;
  sub_10003AED0((uint64_t)v19, a1 + 32);
  CFStringRef v6 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  xpc_object_t value = 0;
  if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 16), v6, (const void **)&value) && CFEqual(value, a3))
  {
    uint64_t v7 = 0;
  }
  else
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), v6, a3);
    uint64_t v7 = 1;
  }
  CFRelease(v6);
  uint64_t v8 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 8))(v8))
  {
    uint64_t v9 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (v9)
    {
      xpc_release(v9);
    }
    else
    {
      id v10 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
        sub_10075446C((uint64_t)a2, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
  sub_10003AFB4((uint64_t)v19);
  return v7;
}

void sub_1002E7800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002E781C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 152))();
}

uint64_t sub_1002E7844(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 240))();
}

void sub_1002E786C(uint64_t a1, float a2)
{
}

uint64_t sub_1002E7878(uint64_t a1)
{
  uint64_t v2 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = (void *)(a1 + 368);
    if (*(char *)(a1 + 391) < 0) {
      uint64_t v3 = (void *)*v3;
    }
    LODWORD(v6) = 136446210;
    *(void *)((char *)&v6 + 4) = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Unpublishing audio device %{public}s", (uint8_t *)&v6, 0xCu);
  }
  long long v6 = 0uLL;
  sub_10003AED0((uint64_t)&v6, a1 + 160);
  *(unsigned char *)(a1 + 398) = 0;
  sub_10003AFB4((uint64_t)&v6);
  long long v6 = 0uLL;
  sub_10003AED0((uint64_t)&v6, a1 + 160);
  uint64_t v4 = *(void *)(a1 + 352);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  sub_10003AFE8((uint64_t)&v6);
  sub_10030FC40(a1 + 224);
  return sub_10003AFB4((uint64_t)&v6);
}

void sub_1002E79A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002E79BC(uint64_t a1, uint64_t a2)
{
}

void sub_1002E79CC(uint64_t a1, const char *a2, uint64_t a3)
{
  if (*(char *)(a3 + 23) >= 0) {
    uint64_t v5 = (const char *)a3;
  }
  else {
    uint64_t v5 = *(const char **)a3;
  }
  CFStringRef v6 = CFStringCreateWithCString(kCFAllocatorDefault, v5, 0x8000100u);
  sub_1002E87D0(a1, a2, v6);

  CFRelease(v6);
}

void sub_1002E7A48(uint64_t a1, const void **a2)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v4 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v4 = (size_t)a2[1];
  }
  memset(&v15, 0, sizeof(v15));
  uint64_t v5 = &v15;
  sub_1002EA240((uint64_t)&v15, v4 + 1);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v5 = (std::string *)v15.__r_.__value_.__r.__words[0];
  }
  if (v4)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = *a2;
    }
    memmove(v5, v7, v4);
  }
  *(_WORD *)((char *)&v5->__r_.__value_.__l.__data_ + v4) = 45;
  v6.i32[0] = *(_DWORD *)(a1 + 8);
  int16x8_t v8 = (int16x8_t)vmovl_u8(v6);
  *(int16x4_t *)v8.i8 = vrev64_s16(*(int16x4_t *)v8.i8);
  *(_DWORD *)__s = vmovn_s16(v8).u32[0];
  char v14 = 0;
  uint64_t v9 = std::string::append(&v15, __s);
  std::string::size_type v10 = v9->__r_.__value_.__r.__words[0];
  v16[0] = v9->__r_.__value_.__l.__size_;
  *(void *)((char *)v16 + 7) = *(std::string::size_type *)((char *)&v9->__r_.__value_.__r.__words[1] + 7);
  char v11 = HIBYTE(v9->__r_.__value_.__r.__words[2]);
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 391) < 0) {
    operator delete(*(void **)(a1 + 368));
  }
  uint64_t v12 = v16[0];
  *(void *)(a1 + 368) = v10;
  *(void *)(a1 + 376) = v12;
  *(void *)(a1 + 383) = *(void *)((char *)v16 + 7);
  *(unsigned char *)(a1 + 391) = v11;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  std::string::operator=((std::string *)(a1 + 232), (const std::string *)(a1 + 368));
  sub_1002E79CC(a1, "kBTAudioMsgPropertyDeviceUID", a1 + 368);
}

void sub_1002E7BA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002E7BCC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 360) = a2;
  return result;
}

void sub_1002E7BD4(uint64_t a1, uint64_t a2)
{
}

void sub_1002E7BE4(uint64_t a1, const char *a2, CFUUIDBytes *a3)
{
  CFUUIDRef v5 = CFUUIDCreateFromUUIDBytes(kCFAllocatorDefault, *a3);
  sub_1002E87D0(a1, a2, v5);

  CFRelease(v5);
}

uint64_t sub_1002E7C4C(uint64_t a1, void *a2)
{
  id v2 = a2;
  if ([v2 isEqualToString:@"Audio/Video"])
  {
    uint64_t v3 = 1;
  }
  else if ([v2 isEqualToString:@"PhoneCall"])
  {
    uint64_t v3 = 2;
  }
  else if ([v2 isEqualToString:@"VoiceCommand"])
  {
    uint64_t v3 = 3;
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void sub_1002E7CC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1002E7CD8(uint64_t a1)
{
  return *(void *)(a1 + 272) != 0;
}

BOOL sub_1002E7CE8(uint64_t a1)
{
  return *(void *)(a1 + 312) != 0;
}

unint64_t sub_1002E7CF8(uint64_t a1)
{
  return sub_1002D69D8(a1 + 288);
}

unint64_t sub_1002E7D00(uint64_t a1)
{
  return sub_1002D7100(a1 + 288);
}

size_t sub_1002E7D08(uint64_t a1, char *a2, size_t a3)
{
  if (!*(void *)(a1 + 272))
  {
    uint8x8_t v6 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_FAULT)) {
      sub_1007544D8(v6, v7, v8, v9, v10, v11, v12, v13);
    }
  }
  return sub_1002D6C40(a1 + 288, a2, a3);
}

unint64_t sub_1002E7D78(uint64_t a1, char *a2, size_t a3)
{
  if (!*(void *)(a1 + 272))
  {
    uint8x8_t v6 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_FAULT)) {
      sub_1007544D8(v6, v7, v8, v9, v10, v11, v12, v13);
    }
  }
  return sub_1002D6CAC(a1 + 288, a2, a3);
}

BOOL sub_1002E7DE8(uint64_t a1, char *a2, size_t *a3, size_t a4, char *a5, size_t *a6, size_t a7)
{
  if (!*(void *)(a1 + 272))
  {
    char v14 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_FAULT)) {
      sub_1007544D8(v14, v15, v16, v17, v18, v19, v20, v21);
    }
  }
  return sub_1002D6D1C(a1 + 288, a2, a3, a4, a5, a6, a7);
}

size_t sub_1002E7E88(uint64_t a1, char *a2, unint64_t a3, int a4)
{
  if (!*(void *)(a1 + 312))
  {
    uint64_t v8 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_FAULT)) {
      sub_100754550(v8, v9, v10, v11, v12, v13, v14, v15);
    }
  }
  v18[0] = 0;
  v18[1] = 0;
  sub_10003AED0((uint64_t)v18, a1 + 96);
  size_t v16 = sub_1002D7018(a1 + 328, a2, a3);
  sub_1002E7F54(a1, a2, a3, a4);
  sub_10003AFB4((uint64_t)v18);
  return v16;
}

void sub_1002E7F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002E7F54(uint64_t a1, const void *a2, size_t a3, int a4)
{
  if (a4)
  {
    BOOL v23 = 0;
    uint64_t v24 = 0;
    sub_1000335D8(&v23, a2, a3);
    memset(&v22, 0, sizeof(v22));
    int v5 = *(_DWORD *)(a1 + 8);
    uint8x8_t v6 = "AudioDeviceLEA";
    uint64_t v7 = "AudioDeviceOther";
    if (v5 == 1953719151) {
      uint64_t v7 = "AudioDeviceSCO";
    }
    if (v5 != 1953260897) {
      uint8x8_t v6 = v7;
    }
    if (v5 == 1952539500) {
      uint64_t v8 = "AudioDeviceA2DP";
    }
    else {
      uint64_t v8 = v6;
    }
    std::string::assign(&v22, v8);
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v9 = +[AudioDeviceManager sharedManager];
    uint64_t v10 = v9;
    if (v9)
    {
      [v9 getClientBundleIDs];
    }
    else
    {
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
    }

    uint64_t v11 = sub_1003731C0();
    uint64_t v17 = &off_100998428;
    uint64_t v18 = v24;
    if (v24) {
      sub_100037354((uint64_t)v24);
    }
    if (v21 >= 0) {
      uint64_t v12 = &v19;
    }
    else {
      uint64_t v12 = v19;
    }
    uint64_t v13 = (void *)(a1 + 368);
    if (*(char *)(a1 + 391) < 0) {
      uint64_t v13 = (void *)*v13;
    }
    sub_100475EE0(*(void *)(a1 + 360), (uint64_t)__p);
    if (v16 >= 0) {
      uint64_t v14 = __p;
    }
    else {
      uint64_t v14 = (void **)__p[0];
    }
    (*(void (**)(uint64_t, uint64_t (***)(), uint64_t, void *, void *, void **))(*(void *)v11 + 32))(v11, &v17, 4, v12, v13, v14);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v17 = &off_100998428;
    if (v18) {
      sub_1000368F4(v18);
    }
    if (SHIBYTE(v21) < 0) {
      operator delete(v19);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    BOOL v23 = &off_100998428;
    if (v24) {
      sub_1000368F4(v24);
    }
  }
}

void sub_1002E815C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  *(void *)(v30 - 64) = &off_100998428;
  uint64_t v32 = *(atomic_uint **)(v30 - 56);
  if (v32) {
    sub_1000368F4(v32);
  }
  _Unwind_Resume(a1);
}

unint64_t sub_1002E81FC(uint64_t a1, char *a2, size_t a3, int a4)
{
  if (!*(void *)(a1 + 312)
    && (uint64_t v8 = qword_100A19E48, os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_FAULT)))
  {
    sub_100754550(v8, v9, v10, v11, v12, v13, v14, v15);
    if (a2) {
      goto LABEL_4;
    }
  }
  else if (a2)
  {
LABEL_4:
    v25[0] = 0;
    v25[1] = 0;
    sub_10003AED0((uint64_t)v25, a1 + 96);
    unint64_t v16 = sub_1002D707C(a1 + 328, a2, a3);
    sub_1002E7F54(a1, a2, a3, a4);
    sub_10003AFB4((uint64_t)v25);
    return v16;
  }
  uint64_t v17 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
    sub_1007545C8(a3, v17, v18, v19, v20, v21, v22, v23);
  }
  return 0;
}

void sub_1002E82EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002E8300(uint64_t a1)
{
}

void sub_1002E8308(uint64_t a1, int a2)
{
  uint64_t v3 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    uint64_t v3 = (const void **)&kCFBooleanFalse;
  }
  size_t v4 = *v3;
  sub_1002E76D4(a1, "kBTAudioMsgPropertyTipiConnected", *v3);

  sub_10030F8C8(a1 + 224, (uint64_t)"kBTAudioMsgPropertyTipiConnected", v4);
}

void sub_1002E837C(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002E87D0(a1, "kBTAudioMsgPropertyVolumeIsAbsolute", *v2);
}

void sub_1002E83A4(uint64_t a1, const char *a2, int a3)
{
  uint64_t v3 = (const void **)&kCFBooleanTrue;
  if (!a3) {
    uint64_t v3 = (const void **)&kCFBooleanFalse;
  }
  sub_1002E87D0(a1, a2, *v3);
}

void sub_1002E83C4(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002E87D0(a1, "kBTAudioMsgPropertyTipiSupported", *v2);
}

void sub_1002E83EC(uint64_t a1, const char *a2, float a3)
{
  float valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloatType, &valuePtr);
  sub_1002E76D4(a1, a2, v5);
  sub_10030F8C8(a1 + 224, (uint64_t)a2, v5);
  CFRelease(v5);
}

void sub_1002E8468(uint64_t a1, float a2)
{
}

void sub_1002E8474(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002E87D0(a1, "kBTAudioMsgPropertySupportRemoteVolumeChange", *v2);
}

BOOL sub_1002E849C(uint64_t a1, const char *a2, BOOL *a3)
{
  CFBooleanRef v4 = (const __CFBoolean *)sub_1002E924C(a1, a2);
  CFBooleanRef v5 = v4;
  if (v4) {
    *a3 = CFBooleanGetValue(v4) != 0;
  }
  return v5 != 0;
}

CFNumberRef sub_1002E84E4(uint64_t a1, void *a2)
{
  return sub_1002E84F4(a1, "kBTAudioMsgPropertyProductID", a2);
}

CFNumberRef sub_1002E84F4(uint64_t a1, const char *a2, void *a3)
{
  CFNumberRef result = (const __CFNumber *)sub_1002E924C(a1, a2);
  if (result) {
    return (const __CFNumber *)(CFNumberGetValue(result, kCFNumberIntType, a3) != 0);
  }
  return result;
}

CFNumberRef sub_1002E8530(uint64_t a1, void *a2)
{
  return sub_1002E8540(a1, "kBTAudioMsgPropertyVolumeScalar", a2);
}

CFNumberRef sub_1002E8540(uint64_t a1, const char *a2, void *a3)
{
  CFNumberRef result = (const __CFNumber *)sub_1002E924C(a1, a2);
  if (result) {
    return (const __CFNumber *)(CFNumberGetValue(result, kCFNumberFloatType, a3) != 0);
  }
  return result;
}

void sub_1002E857C(uint64_t a1, int a2)
{
}

void sub_1002E858C(uint64_t a1, const char *a2, int a3)
{
  int valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  sub_1002E87D0(a1, a2, v5);
  CFRelease(v5);
}

void sub_1002E85F8(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002E87D0(a1, "kBTAudioMsgPropertyIsAppleAudioDevice", *v2);
}

void sub_1002E8620(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002E87D0(a1, "kBTAudioMsgPropertyInEarDetection", *v2);
}

void sub_1002E8648(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002E87D0(a1, "kBTAudioMsgPropertyInEarEnabled", *v2);
}

void sub_1002E8670(uint64_t a1, int a2, int a3)
{
}

void sub_1002E8680(uint64_t a1, int a2)
{
}

void sub_1002E8690(uint64_t a1, int a2)
{
}

void sub_1002E86A0(uint64_t a1, int a2)
{
}

void sub_1002E86B0(uint64_t a1, int a2)
{
}

void sub_1002E86C0(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 392) != a2)
  {
    *(_DWORD *)(a1 + 392) = a2;
    sub_1002E858C(a1, "kBTAudioMsgPropertyListenMode", a2);
  }
}

void sub_1002E86E4(uint64_t a1, int a2)
{
}

void sub_1002E86F4(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002E87D0(a1, "kBTAudioMsgPropertyAllowSpatialAudio", *v2);
}

void sub_1002E871C(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002E87D0(a1, "kBTAudioMsgPropertyAccessHeadTrack", *v2);
}

void sub_1002E8744(uint64_t a1, void *a2)
{
  CFBooleanRef v4 = a2;
  CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, v4);
  sub_1002E87D0(a1, "kBTAudioMsgPropertyForegroundApp", Copy);
  CFRelease(Copy);
}

void sub_1002E87BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1002E87D0(uint64_t a1, const char *a2, const void *a3)
{
  if (sub_1002E76D4(a1, a2, a3))
  {
    sub_10030F8C8(a1 + 224, (uint64_t)a2, a3);
  }
}

void sub_1002E8834(uint64_t a1, int a2, void *a3, int a4)
{
  int valuePtr = a2;
  id v7 = a3;
  uint64_t v8 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412802;
    id v14 = v7;
    __int16 v15 = 1024;
    int v16 = a2;
    __int16 v17 = 1024;
    int v18 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Update SpatialAudio App Based to BTHAL %@ Mode %d headTrack %d", buf, 0x18u);
  }
  if (a4) {
    uint64_t v9 = (const void **)&kCFBooleanTrue;
  }
  else {
    uint64_t v9 = (const void **)&kCFBooleanFalse;
  }
  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFNumberRef v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(Mutable, @"kBTAudioMsgPropertySpatialBundleID", v7);
  CFDictionaryAddValue(Mutable, @"kBTAudioMsgPropertySpatialMode", v11);
  CFDictionaryAddValue(Mutable, @"kBTAudioMsgPropertyHeadTrack", *v9);
  sub_1002E76D4(a1, "kBTAudioMsgPropertySpatialAudioAppBasedMode", Mutable);
  sub_10030F8C8(a1 + 224, (uint64_t)"kBTAudioMsgPropertySpatialAudioAppBasedMode", Mutable);
  CFRelease(v11);
  CFRelease(Mutable);
}

void sub_1002E89E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002E89FC(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 397) != a2)
  {
    *(unsigned char *)(a1 + 397) = a2;
    sub_1002E858C(a1, "kBTAudioMsgPropertyOneBudANCMode", a2);
  }
}

void sub_1002E8A20(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002E87D0(a1, "kBTAudioMsgPropertyDOAPSupported", *v2);
}

void sub_1002E8A48(uint64_t a1, CFUUIDBytes *a2)
{
}

void sub_1002E8A58(uint64_t a1, CFUUIDBytes *a2)
{
}

void sub_1002E8A68(uint64_t a1, int a2)
{
}

void sub_1002E8A78(uint64_t a1, int a2)
{
}

void sub_1002E8A88(uint64_t a1, int a2)
{
}

void sub_1002E8A98(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002E87D0(a1, "kBTAudioMsgPropertyLiveListenSupported", *v2);
}

void sub_1002E8AC0(uint64_t a1, float a2)
{
}

void sub_1002E8ACC(uint64_t a1, const char *a2, float a3)
{
  float valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloatType, &valuePtr);
  sub_1002E87D0(a1, a2, v5);
  CFRelease(v5);
}

void sub_1002E8B38(uint64_t a1, int a2)
{
}

void sub_1002E8B48(uint64_t a1, int **a2)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, a2[1] - *a2, &kCFTypeArrayCallBacks);
  if (Mutable)
  {
    CFNumberRef v5 = Mutable;
    uint8x8_t v6 = *a2;
    while (v6 != a2[1])
    {
      int v7 = *v6++;
      int valuePtr = v7;
      CFNumberRef v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloat32Type, &valuePtr);
      CFArrayAppendValue(v5, v8);
      CFRelease(v8);
    }
    uint64_t v9 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)CFNumberRef v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "setDosimetryVolumeCurve set", v11, 2u);
    }
    sub_1002E87D0(a1, "kBTAudioMsgPropertyDosimetryVolumeCurve", v5);
    CFRelease(v5);
  }
  else
  {
    uint64_t v10 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "setDosimetryVolumeCurve failed", buf, 2u);
    }
  }
}

void sub_1002E8CA0(uint64_t a1, int a2)
{
}

void sub_1002E8CB0(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002E87D0(a1, "kBTAudioMsgPropertyWSModeSupported", *v2);
}

void sub_1002E8CD8(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002E87D0(a1, "kBTAudioMsgPropertyWSModeEnabled", *v2);
}

void sub_1002E8D00(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002E87D0(a1, "kBTAudioMsgPropertyWSIsGuestDevice", *v2);
}

void sub_1002E8D28(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002E87D0(a1, "kBTAudioMsgPropertyWSIsGuestNotInContactsDevice", *v2);
}

void sub_1002E8D50(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002E87D0(a1, "kBTAudioMsgPropertySoftwareVolumeSupported", *v2);
}

void sub_1002E8D78(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002E87D0(a1, "kBTAudioMsgPropertySupportSpatialAudio", *v2);
}

void sub_1002E8DA0(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002E87D0(a1, "kBTAudioMsgPropertySupportHighQualityBiDirectionalAudio", *v2);
}

void sub_1002E8DC8(uint64_t a1, void *a2)
{
  CFDataRef v3 = a2;
  if (v3) {
    CFDataRef Copy = CFDataCreateCopy(kCFAllocatorDefault, v3);
  }
  else {
    CFDataRef Copy = (CFDataRef)objc_alloc_init((Class)NSData);
  }
  CFDataRef v5 = Copy;
  if (Copy)
  {
    uint8x8_t v6 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      v7[0] = 67109120;
      v7[1] = CFDataGetLength(v5);
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Spatial Profile Size %d", (uint8_t *)v7, 8u);
    }
    sub_1002E87D0(a1, "kBTAudioMsgPropertySoundProfile", v5);
    CFRelease(v5);
  }
}

void sub_1002E8ED4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002E8EF0(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002E87D0(a1, "kBTAudioMsgPropertySupportSoundProfile", *v2);
}

void sub_1002E8F18(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002E87D0(a1, "kBTAudioMsgPropertyAdaptiveVolume", *v2);
}

void sub_1002E8F40(uint64_t a1, int a2)
{
}

void sub_1002E8F50(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002E87D0(a1, "kBTAudioMsgPropertyMuteControl", *v2);
}

void sub_1002E8F78(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002E87D0(a1, "kBTAudioMsgPropertyConversationDetect", *v2);
}

void sub_1002E8FA0(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002E87D0(a1, "kBTAudioMsgPropertyBudSideLoudnessEqControlSupported", *v2);
}

void sub_1002E8FC8(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002E87D0(a1, "kBTAudioMsgPropertyBudSideLoudnessEqEnabled", *v2);
}

void sub_1002E8FF0(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002E87D0(a1, "kBTAudioMsgPropertyDigitalCrownSupported", *v2);
}

void sub_1002E9018(uint64_t a1, int a2)
{
  CFDataRef v3 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    CFDataRef v3 = (const void **)&kCFBooleanFalse;
  }
  CFBooleanRef v4 = *v3;
  sub_1002E76D4(a1, "kBTAudioMsgPropertyOwnershipHijack", *v3);

  sub_10030F8C8(a1 + 224, (uint64_t)"kBTAudioMsgPropertyOwnershipHijack", v4);
}

void sub_1002E908C(uint64_t a1, int a2)
{
  CFDataRef v3 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    CFDataRef v3 = (const void **)&kCFBooleanFalse;
  }
  CFBooleanRef v4 = *v3;
  sub_1002E76D4(a1, "kBTAudioMsgPropertyAllowAutoRoute", *v3);

  sub_10030F8C8(a1 + 224, (uint64_t)"kBTAudioMsgPropertyAllowAutoRoute", v4);
}

void sub_1002E9100(uint64_t a1, int a2)
{
  CFDataRef v3 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    CFDataRef v3 = (const void **)&kCFBooleanFalse;
  }
  CFBooleanRef v4 = *v3;
  sub_1002E76D4(a1, "kBTAudioMsgPropertyIsHidden", *v3);

  sub_10030F8C8(a1 + 224, (uint64_t)"kBTAudioMsgPropertyIsHidden", v4);
}

void sub_1002E9174(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, &valuePtr);
  sub_1002E87D0(a1, a2, v5);
  CFRelease(v5);
}

void sub_1002E91E0(uint64_t a1, const char *a2, double a3)
{
  double valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &valuePtr);
  sub_1002E87D0(a1, a2, v5);
  CFRelease(v5);
}

const void *sub_1002E924C(uint64_t a1, const char *a2)
{
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 32);
  CFStringRef v4 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), v4);
  CFRelease(v4);
  sub_10003AFB4((uint64_t)v7);
  return Value;
}

void sub_1002E92CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1002E92E4(uint64_t a1, const char *a2, const void *a3)
{
  uint64_t result = sub_1002E76D4(a1, a2, a3);
  if (result)
  {
    int v7 = *(uint64_t (**)(uint64_t, const char *, const void *))(*(void *)a1 + 160);
    return v7(a1, a2, a3);
  }
  return result;
}

uint64_t sub_1002E9368(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1 + 160);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 398);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

void sub_1002E93B0(uint64_t *a1, char *__s1, const __CFNumber *a3)
{
  if (!strcmp(__s1, "kBTAudioMsgPropertyVolumeScalar"))
  {
    LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
    if (CFNumberGetValue(a3, kCFNumberFloatType, &valuePtr)) {
      (*(void (**)(uint64_t *, float))(*a1 + 208))(a1, *(float *)&valuePtr.__r_.__value_.__l.__data_);
    }
  }
  else if (!strcmp(__s1, "kBTAudioMsgPropertyInputVolumeScalar"))
  {
    LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
    if (CFNumberGetValue(a3, kCFNumberFloatType, &valuePtr)) {
      (*(void (**)(uint64_t *, float))(*a1 + 216))(a1, *(float *)&valuePtr.__r_.__value_.__l.__data_);
    }
  }
  else if (!strcmp(__s1, "kBTAudioMsgPropertyOwnershipStateChanged"))
  {
    CFBooleanRef BOOLean = 0;
    xpc_object_t value = 0;
    memset(&valuePtr, 0, sizeof(valuePtr));
    sub_10004191C(&valuePtr, "");
    if (CFDictionaryGetValueIfPresent(a3, @"kBTAudioMsgPropertyOwnershipStateAddr", (const void **)&value))
    {
      CStringPtr = CFStringGetCStringPtr((CFStringRef)value, 0x8000100u);
      std::string::assign(&valuePtr, CStringPtr);
    }
    if (CFDictionaryGetValueIfPresent(a3, @"kBTAudioMsgPropertyOwnershipState", (const void **)&BOOLean)) {
      BOOL v14 = CFBooleanGetValue(BOOLean) != 0;
    }
    else {
      BOOL v14 = 0;
    }
    __int16 v15 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = "false";
      if (v14) {
        int v16 = "true";
      }
      p_std::string valuePtr = &valuePtr;
      if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_std::string valuePtr = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 136446466;
      long long v46 = v16;
      __int16 v47 = 2082;
      long long v48 = p_valuePtr;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Got ownership state change of %{public}s for device %{public}s", buf, 0x16u);
    }
    if (qword_1009F80A0 != -1) {
      dispatch_once(&qword_1009F80A0, &stru_1009A4360);
    }
    int v18 = off_1009F8098;
    if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0) {
      sub_10003B098(&__p, valuePtr.__r_.__value_.__l.__data_, valuePtr.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = valuePtr;
    }
    sub_100287FA0((uint64_t)v18, (unsigned __int8 *)&__p, v14);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v19 = (void *)valuePtr.__r_.__value_.__r.__words[0];
LABEL_63:
      operator delete(v19);
    }
  }
  else if (!strcmp(__s1, "kBTAudioMsgPropertyListenMode"))
  {
    LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
    CFNumberGetValue(a3, kCFNumberSInt32Type, &valuePtr);
    if (qword_1009F80A0 != -1) {
      dispatch_once(&qword_1009F80A0, &stru_1009A4360);
    }
    sub_10028C6C0((uint64_t)off_1009F8098, a1[45], LODWORD(valuePtr.__r_.__value_.__l.__data_));
  }
  else
  {
    if (!strcmp(__s1, "kBTAudioMsgPropertyDosimetrySensitivity"))
    {
      LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
      CFNumberGetValue(a3, kCFNumberFloat32Type, &valuePtr);
      sub_100489360(a1[45], *(float *)&valuePtr.__r_.__value_.__l.__data_);
      return;
    }
    if (strcmp(__s1, "kBTAudioMsgPropertyDosimetryVolumeCurve"))
    {
      uint8x8_t v6 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
        sub_100754634((uint64_t)__s1, v6, v7, v8, v9, v10, v11, v12);
      }
      return;
    }
    int Count = CFArrayGetCount(a3);
    memset(&valuePtr, 0, sizeof(valuePtr));
    if (Count <= 0)
    {
      uint64_t v35 = a1[45];
      __uuid_t dst = 0;
      uint64_t v40 = 0;
      long long v38 = 0;
    }
    else
    {
      CFIndex v21 = 0;
      uint64_t v22 = Count;
      do
      {
        *(_DWORD *)long long buf = 0;
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a3, v21);
        CFNumberGetValue(ValueAtIndex, kCFNumberFloat32Type, buf);
        std::string::size_type size = valuePtr.__r_.__value_.__l.__size_;
        if (valuePtr.__r_.__value_.__l.__size_ >= valuePtr.__r_.__value_.__r.__words[2])
        {
          long long v26 = (void *)valuePtr.__r_.__value_.__r.__words[0];
          uint64_t v27 = (uint64_t)(valuePtr.__r_.__value_.__l.__size_ - valuePtr.__r_.__value_.__r.__words[0]) >> 2;
          unint64_t v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 62) {
            abort();
          }
          int64_t v29 = valuePtr.__r_.__value_.__r.__words[2] - valuePtr.__r_.__value_.__r.__words[0];
          if ((uint64_t)(valuePtr.__r_.__value_.__r.__words[2] - valuePtr.__r_.__value_.__r.__words[0]) >> 1 > v28) {
            unint64_t v28 = v29 >> 1;
          }
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v30 = v28;
          }
          if (v30)
          {
            char v31 = (char *)sub_1002C44F0((uint64_t)&valuePtr.__r_.__value_.__r.__words[2], v30);
            std::string::size_type size = valuePtr.__r_.__value_.__l.__size_;
            long long v26 = (void *)valuePtr.__r_.__value_.__r.__words[0];
          }
          else
          {
            char v31 = 0;
          }
          uint64_t v32 = &v31[4 * v27];
          *(_DWORD *)uint64_t v32 = *(_DWORD *)buf;
          std::string::size_type v25 = (std::string::size_type)(v32 + 4);
          while ((void *)size != v26)
          {
            int v33 = *(_DWORD *)(size - 4);
            size -= 4;
            *((_DWORD *)v32 - 1) = v33;
            v32 -= 4;
          }
          valuePtr.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
          valuePtr.__r_.__value_.__l.__size_ = v25;
          valuePtr.__r_.__value_.__r.__words[2] = (std::string::size_type)&v31[4 * v30];
          if (v26) {
            operator delete(v26);
          }
        }
        else
        {
          *(_DWORD *)valuePtr.__r_.__value_.__l.__size_ = *(_DWORD *)buf;
          std::string::size_type v25 = size + 4;
        }
        valuePtr.__r_.__value_.__l.__size_ = v25;
        ++v21;
      }
      while (v21 != v22);
      char v34 = (const void *)valuePtr.__r_.__value_.__r.__words[0];
      uint64_t v35 = a1[45];
      __uuid_t dst = 0;
      uint64_t v40 = 0;
      long long v38 = 0;
      int64_t v36 = v25 - valuePtr.__r_.__value_.__r.__words[0];
      if (v25 != valuePtr.__r_.__value_.__r.__words[0])
      {
        sub_1002EA03C(&v38, v36 >> 2);
        long long v37 = (char *)__dst;
        memmove(__dst, v34, v36);
        __uuid_t dst = &v37[4 * (v36 >> 2)];
      }
    }
    sub_1004894DC(v35, (uint64_t)&v38);
    if (v38)
    {
      __uuid_t dst = v38;
      operator delete(v38);
    }
    uint64_t v19 = (void *)valuePtr.__r_.__value_.__r.__words[0];
    if (valuePtr.__r_.__value_.__r.__words[0])
    {
      valuePtr.__r_.__value_.__l.__size_ = valuePtr.__r_.__value_.__r.__words[0];
      goto LABEL_63;
    }
  }
}

void sub_1002E98E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002E9954(uint64_t a1, int a2)
{
  CFDataRef v3 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
    sub_1007546A0(a2, v3);
  }
}

void sub_1002E99A0(uint64_t a1, int a2)
{
  CFDataRef v3 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
    sub_100754718(a2, v3);
  }
}

uint64_t sub_1002E99EC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1[34] && (uint64_t v10 = qword_100A19E48, os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_FAULT)))
  {
    sub_100754808(v10, v11, v12, v13, v14, v15, v16, v17);
    if (!a2) {
      goto LABEL_6;
    }
  }
  else if (!a2)
  {
    goto LABEL_6;
  }
  if (a3)
  {
    a1[34] = a2;
    a1[35] = a3;
    sub_1002D695C((uint64_t)(a1 + 36), a2);
  }
LABEL_6:
  if (a1[39] && (int v18 = qword_100A19E48, os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_FAULT)))
  {
    sub_100754790(v18, v19, v20, v21, v22, v23, v24, v25);
    if (!a4) {
      goto LABEL_14;
    }
  }
  else if (!a4)
  {
    goto LABEL_14;
  }
  if (a5)
  {
    a1[39] = a4;
    a1[40] = a5;
    sub_1002D695C((uint64_t)(a1 + 41), a4);
    return (*(uint64_t (**)(void *))(*a1 + 184))(a1);
  }
LABEL_14:
  if (!(a2 | a4))
  {
    v28[0] = 0;
    v28[1] = 0;
    sub_10003AED0((uint64_t)v28, (uint64_t)(a1 + 20));
    uint64_t v26 = a1[44];
    if (v26) {
      sub_10050A178(v26);
    }
    sub_10003AFE8((uint64_t)v28);
    sub_10003AFB4((uint64_t)v28);
  }
  return (*(uint64_t (**)(void *))(*a1 + 184))(a1);
}

void sub_1002E9B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002E9B3C(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 232))(a1);
  uint64_t v1 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Timed audio delivery speed modification completed", v2, 2u);
  }
}

uint64_t sub_1002E9BC8(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 200))(a1);
  if (*(void *)(a1 + 272) && *(void *)(a1 + 280))
  {
    sub_1002D69D0(a1 + 288);
    uint64_t result = munmap(*(void **)(a1 + 272), *(void *)(a1 + 280));
    *(void *)(a1 + 272) = 0;
    *(void *)(a1 + 280) = 0;
  }
  if (*(void *)(a1 + 312))
  {
    if (*(void *)(a1 + 320))
    {
      v3[0] = 0;
      v3[1] = 0;
      sub_10003AED0((uint64_t)v3, a1 + 96);
      sub_1002D69D0(a1 + 328);
      sub_10003AFE8((uint64_t)v3);
      munmap(*(void **)(a1 + 312), *(void *)(a1 + 320));
      *(void *)(a1 + 312) = 0;
      *(void *)(a1 + 320) = 0;
      return sub_10003AFB4((uint64_t)v3);
    }
  }
  return result;
}

void sub_1002E9C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1002E9CA0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 192))();
}

uint64_t sub_1002E9CC8(uint64_t a1)
{
  uint64_t v2 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)CFStringRef v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "audioPluginBiToUniTransition", v4, 2u);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 256))(a1);
}

uint64_t sub_1002E9D64(uint64_t a1)
{
  uint64_t v2 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)CFStringRef v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "audioPluginUniToBiTransition", v4, 2u);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 264))(a1);
}

uint64_t sub_1002E9E00(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 168))();
}

uint64_t sub_1002E9E24(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 176))();
}

uint64_t sub_1002E9E48(uint64_t a1)
{
  if (*(void *)(a1 + 272) || *(void *)(a1 + 312)) {
    sub_1002E9BC8(a1);
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 224))(a1);
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 32);
  CFDictionaryRef Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, *(CFDictionaryRef *)(a1 + 16));
  if (Copy)
  {
    sub_10030F4A0(a1 + 224, *(_DWORD *)(a1 + 8), Copy);
    CFRelease(Copy);
  }
  else
  {
    CFDataRef v3 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
      sub_1007543B8(v3);
    }
  }
  return sub_10003AFB4((uint64_t)v5);
}

void sub_1002E9F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002E9F3C(uint64_t a1)
{
  uint64_t v2 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)CFDataRef v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "AudioDevice self deleting", v3, 2u);
  }
  if (a1) {
    (*(void (**)(uint64_t))(*(void *)a1 + 104))(a1);
  }
}

uint64_t sub_1002E9FD4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 248))();
}

void sub_1002E9FF8(uint64_t a1, int a2)
{
  uint64_t v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    uint64_t v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002E87D0(a1, "kBTAudioMsgPropertyIsGenuineAirPods", *v2);
}

uint64_t sub_1002EA020()
{
  return 0;
}

char *sub_1002EA03C(void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    abort();
  }
  uint64_t result = (char *)sub_1002C44F0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void sub_1002EA07C(id a1)
{
}

void sub_1002EA0C0()
{
}

uint64_t sub_1002EA0E4(uint64_t a1)
{
  uint64_t v2 = (void *)sub_100283C88(a1, 8);
  void *v2 = off_1009BA420;
  v2[32] = off_1009BA4E0;
  v2[33] = off_1009BA508;
  v2[34] = &off_1009BA550;
  sub_100052DA8(v2 + 35);
  *(void *)(a1 + 344) = a1 + 352;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = a1 + 376;
  sub_100052DA8(a1 + 392);
  *(void *)(a1 + 456) = a1 + 464;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = a1 + 488;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 520) = 0;
  *(void *)(a1 + 504) = a1 + 512;
  *(void *)(a1 + 512) = 0;
  *(_WORD *)(a1 + 536) = 0;
  *(unsigned char *)(a1 + 544) = 0;
  *(void *)(a1 + 552) = 0;
  return a1;
}

void sub_1002EA1FC(_Unwind_Exception *a1)
{
  uint64_t v7 = v6;
  uint64_t v8 = v4;
  sub_1000486F0(v7, *v5);
  sub_1000486F0(v3, *v8);
  sub_100052DA4(v2);
  sub_100283DC8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002EA240(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    uint64_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

void sub_1002EA2C4(id a1)
{
}

void sub_1002EA308()
{
}

uint64_t sub_1002EA32C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)sub_1002E6D1C(a1, 1953260897);
  void *v4 = &off_1009A4390;
  v4[50] = a2;
  v4[51] = 0;
  v4[52] = 0;
  v4[53] = 0;
  sub_1002E837C((uint64_t)v4, 1);
  return a1;
}

void sub_1002EA398(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 416) = v4;
    operator delete(v4);
  }
  sub_1002E6E4C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002EA3C0(void *a1)
{
  *a1 = &off_1009A4390;
  uint64_t v2 = (void *)a1[51];
  if (v2)
  {
    a1[52] = v2;
    operator delete(v2);
  }

  return sub_1002E6E4C((uint64_t)a1);
}

void sub_1002EA424(void *a1)
{
  sub_1002EA3C0(a1);

  operator delete();
}

void sub_1002EA460(uint64_t a1, int a2, CFNumberRef number)
{
  if (a2 == 10)
  {
    unsigned int v4 = 0;
    if (CFNumberGetValue(number, kCFNumberIntType, &v4)) {
      (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 400) + 48))(*(void *)(a1 + 400), a1, v4);
    }
  }
  else if (a2 == 9)
  {
    unsigned int valuePtr = 0;
    if (CFNumberGetValue(number, kCFNumberIntType, &valuePtr)) {
      (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 400) + 40))(*(void *)(a1 + 400), a1, valuePtr);
    }
  }
  else
  {
    sub_1002E9954(a1, a2);
  }
}

uint64_t sub_1002EA55C(uint64_t a1)
{
  return (***(uint64_t (****)(void, uint64_t))(a1 + 400))(*(void *)(a1 + 400), a1);
}

uint64_t sub_1002EA588(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 400) + 8))(*(void *)(a1 + 400), a1);
}

uint64_t sub_1002EA5B4(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 400) + 16))(*(void *)(a1 + 400), a1);
}

uint64_t sub_1002EA5E0(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 400) + 32))(*(void *)(a1 + 400), a1);
}

uint64_t sub_1002EA60C(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 400) + 24))(*(void *)(a1 + 400), a1);
}

BOOL sub_1002EA638(uint64_t a1)
{
  if (sub_1002E7CD8(a1)) {
    return 1;
  }

  return sub_1002E7CE8(a1);
}

uint64_t sub_1002EA68C(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 400) + 56))(*(void *)(a1 + 400), a1);
}

uint64_t *sub_1002EA6B8@<X0>(uint64_t **a1@<X1>, uint64_t **a2@<X2>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::__sort<std::__less<int,int> &,int *>();
  LOBYTE(v7) = 0;
  std::__sort<std::__less<int,int> &,int *>();
  return sub_1002EAA48(*a1, a1[1], *a2, a2[1], (uint64_t)a3, &v7);
}

void sub_1002EA730(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002EA74C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t **)(a1 + 408);
  if (*(void *)(a1 + 408) != *(void *)(a1 + 416))
  {
    std::string __p = 0;
    int v18 = 0;
    uint64_t v19 = 0;
    sub_1002EACE8(&__p, a2);
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    sub_1002EA6B8(v3, (uint64_t **)&__p, &v14);
    unsigned int v4 = *(const void **)(a1 + 408);
    size_t v5 = *(void *)(a1 + 416) - (void)v4;
    uint64_t v6 = v14;
    uint64_t v7 = (uint64_t)v15;
    uint64_t v8 = v15 - v14;
    if (v5 == v15 - v14)
    {
      int v9 = memcmp(v4, v14, v5);
      if (v3 == (uint64_t **)&v14 || !v9) {
        goto LABEL_10;
      }
    }
    else if (v3 == (uint64_t **)&v14)
    {
LABEL_10:
      if (v6)
      {
        uint64_t v15 = v6;
        operator delete(v6);
      }
      if (__p)
      {
        int v18 = __p;
        operator delete(__p);
      }
      goto LABEL_14;
    }
    sub_1002EABE0((char *)v3, v6, v7, v8 >> 2);
    uint64_t v6 = v14;
    goto LABEL_10;
  }
  if (v3 != (uint64_t **)a2) {
    sub_1002EABE0((char *)(a1 + 408), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
LABEL_14:
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, (uint64_t)(*(void *)(a1 + 416) - *(void *)(a1 + 408)) >> 2, &kCFTypeArrayCallBacks);
  uint64_t v11 = *(int **)(a1 + 408);
  while (v11 != *(int **)(a1 + 416))
  {
    int v12 = *v11++;
    LODWORD(__p) = v12;
    CFNumberRef v13 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &__p);
    CFArrayAppendValue(Mutable, v13);
    CFRelease(v13);
  }
  sub_1002E87D0(a1, "kBTAudioMsgPropertySupportedCodecs", Mutable);
  CFRelease(Mutable);
}

void sub_1002EA8E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002EA918(uint64_t a1, uint64_t a2)
{
}

void sub_1002EA928(uint64_t a1, int a2)
{
}

BOOL sub_1002EA938(uint64_t a1, BOOL *a2)
{
  return sub_1002E849C(a1, "kBTAudioMsgPropertyIsStereo", a2);
}

void sub_1002EA948(uint64_t a1, int a2)
{
}

CFNumberRef sub_1002EA958(uint64_t a1, void *a2)
{
  return sub_1002E84F4(a1, "kBTAudioMsgPropertyDirection", a2);
}

void sub_1002EA968(uint64_t a1, int a2)
{
}

void sub_1002EA978(uint64_t a1, int a2)
{
}

uint64_t sub_1002EA988()
{
  return 0;
}

void sub_1002EA990(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 134217984;
    uint64_t v6 = a3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "LEAAudioDevice readHandler called on data of size %lu", (uint8_t *)&v5, 0xCu);
  }
}

void sub_1002EAA34(uint64_t a1, int a2)
{
}

uint64_t *sub_1002EAA48@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t **a6@<X8>)
{
  uint64_t v11 = a5;
  if (result != a2)
  {
    int v9 = a3;
    if (a3 != a4)
    {
      uint64_t v10 = result;
      do
      {
        if (*(_DWORD *)v10 >= *(_DWORD *)v9)
        {
          if (*(_DWORD *)v9 >= *(_DWORD *)v10)
          {
            uint64_t result = sub_1002EAAF4(&v11, v10);
            uint64_t v10 = (uint64_t *)((char *)v10 + 4);
          }
          int v9 = (uint64_t *)((char *)v9 + 4);
        }
        else
        {
          uint64_t v10 = (uint64_t *)((char *)v10 + 4);
        }
      }
      while (v10 != a2 && v9 != a4);
      a5 = v11;
    }
  }
  *a6 = a2;
  a6[1] = a4;
  a6[2] = (uint64_t *)a5;
  return result;
}

uint64_t *sub_1002EAAF4(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4 = *a1;
  int v5 = *(_DWORD **)(*a1 + 8);
  uint64_t v6 = (void *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    uint64_t v8 = *(_DWORD **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      abort();
    }
    uint64_t v11 = *v6 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      CFNumberRef v13 = (char *)sub_1002C44F0((uint64_t)v6, v12);
      uint64_t v8 = *(_DWORD **)v4;
      int v5 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      CFNumberRef v13 = 0;
    }
    uint64_t v14 = &v13[4 * v9];
    uint64_t v15 = &v13[4 * v12];
    *(_DWORD *)uint64_t v14 = *a2;
    uint64_t v7 = v14 + 4;
    while (v5 != v8)
    {
      int v16 = *--v5;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *int v5 = *a2;
    uint64_t v7 = v5 + 1;
  }
  *(void *)(v4 + 8) = v7;
  return a1;
}

char *sub_1002EABE0(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 >> 62) {
      abort();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = sub_1002EA03C(v7, v11);
    CFNumberRef v13 = (char *)v7[1];
    unint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      int v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  int v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    int v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *unint64_t v12 = &v9[v17];
  return result;
}

void *sub_1002EACE8(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    sub_1002EA03C(a1, v5 >> 2);
    uint64_t v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

uint64_t sub_1002EAD50(uint64_t a1, int a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &off_1009A44B0;
  *(void *)(a1 + 80) = 0;
  uint64_t v4 = (void **)(a1 + 80);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 70) = 0;
  uint64_t v5 = TSNullClockIdentifier;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = v5;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 104) = a1 + 112;
  *(void *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 208) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 200) = a1 + 208;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  sub_100052DA8(a1 + 224);
  *(unsigned char *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 164) = a2;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v6 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    v11[0] = 67109120;
    v11[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Timesync engine Instance created Accuracy=%d", (uint8_t *)v11, 8u);
  }
  uint64_t v7 = +[TSClockManager sharedClockManager];
  uint64_t v8 = *v4;
  const void *v4 = (void *)v7;

  if (!*v4)
  {
    uint64_t v9 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v11[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Warning: Audio Time Synchronization Shared Clock manager initialization failed", (uint8_t *)v11, 2u);
    }
  }
  *(_WORD *)(a1 + 76) = 0;
  return a1;
}

void sub_1002EAF24(_Unwind_Exception *a1)
{
  sub_100052DA4(v4);
  sub_1000486F0(v3, *(void **)(v1 + 208));
  uint64_t v7 = *(std::__shared_weak_count **)(v1 + 184);
  if (v7) {
    sub_10008A294(v7);
  }
  uint64_t v8 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 144) = v8;
    operator delete(v8);
  }
  sub_1000486F0(v2, *(void **)(v1 + 112));

  uint64_t v9 = *(std::__shared_weak_count **)(v1 + 16);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1002EAF9C(uint64_t a1)
{
  uint64_t v2 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Timesync engine Cleanup", buf, 2u);
  }
  sub_1002EB234(a1, 0, *(_DWORD *)(a1 + 164));
  uint64_t v3 = *(void *)(a1 + 96);
  uint64_t v4 = TSNullClockIdentifier;
  if (v3 == TSNullClockIdentifier)
  {
    id v5 = 0;
  }
  else
  {
    uint64_t v6 = *(void **)(a1 + 80);
    id v25 = 0;
    unsigned __int8 v7 = [v6 removeUserFilteredClockWithIdentifier:v3 error:&v25];
    id v5 = v25;
    if ((v7 & 1) == 0)
    {
      uint64_t v8 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Warning: Audio Time Synchronization Shared Clock Engine cleanup Failed", buf, 2u);
      }
    }
  }
  *(void *)long long buf = 0;
  uint64_t v24 = 0;
  sub_10003AED0((uint64_t)buf, a1 + 224);
  uint64_t v9 = *(void **)(a1 + 104);
  uint64_t v10 = (void *)(a1 + 112);
  if (v9 != (void *)(a1 + 112))
  {
    do
    {
      if (v9[4]) {
        operator delete();
      }
      unint64_t v11 = (void *)v9[1];
      if (v11)
      {
        do
        {
          unint64_t v12 = v11;
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          unint64_t v12 = (void *)v9[2];
          BOOL v13 = *v12 == (void)v9;
          uint64_t v9 = v12;
        }
        while (!v13);
      }
      uint64_t v9 = v12;
    }
    while (v12 != v10);
  }
  sub_1000486F0(a1 + 104, *(void **)(a1 + 112));
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = v10;
  *(_WORD *)(a1 + 76) = 0;
  uint64_t v14 = *(void **)(a1 + 80);
  *(void *)(a1 + 80) = 0;

  unint64_t v15 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = 0;

  *(void *)(a1 + 96) = v4;
  int v16 = *(std::__shared_weak_count **)(a1 + 184);
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  if (v16) {
    sub_10008A294(v16);
  }
  size_t v17 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Timesync engine Cleanup - Completed", v22, 2u);
  }
  sub_10003AFB4((uint64_t)buf);

  sub_100052DA4(a1 + 224);
  sub_1000486F0(a1 + 200, *(void **)(a1 + 208));
  int v18 = *(std::__shared_weak_count **)(a1 + 184);
  if (v18) {
    sub_10008A294(v18);
  }
  uint64_t v19 = *(void **)(a1 + 136);
  if (v19)
  {
    *(void *)(a1 + 144) = v19;
    operator delete(v19);
  }
  sub_1000486F0(a1 + 104, *(void **)(a1 + 112));

  uint64_t v20 = *(std::__shared_weak_count **)(a1 + 16);
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
  return a1;
}

void sub_1002EB214(_Unwind_Exception *a1)
{
  sub_100754880(v1);
  _Unwind_Resume(a1);
}

void sub_1002EB234(uint64_t a1, char a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 104);
  if (v3 == a1 + 112) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(v3 + 32) + 8);
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1002EDB7C;
  v5[3] = &unk_1009A44E8;
  void v5[4] = a1;
  void v5[5] = v4;
  char v7 = a2;
  int v6 = a3;
  sub_1002EDAB0((os_unfair_lock_s *)(a1 + 128), v5);
}

void sub_1002EB2D8(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (uint64_t **)(a1 + 104);
  uint64_t v4 = *(uint64_t **)(a1 + 104);
  id v5 = (uint64_t *)(a1 + 112);
  if (v4 != (uint64_t *)(a1 + 112))
  {
    do
    {
      if (*(void *)v4[4] == a2)
      {
        if (qword_1009F8168 != -1) {
          dispatch_once(&qword_1009F8168, &stru_1009A4560);
        }
        uint64_t v10 = sub_100019C0C((void *)qword_1009F8160, a2);
        uint64_t v11 = v4[4];
        uint64_t v8 = sub_10004D3B8(v3, v4);
        operator delete(v4);
        unsigned __int8 v12 = *(unsigned char *)(a1 + 76) - 1;
        *(unsigned char *)(a1 + 76) = v12;
        BOOL v13 = qword_100A19E48;
        if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v14 = *(void *)(v11 + 8);
          if (v10)
          {
            sub_10003AE4C(v10, (uint64_t)__p);
            unint64_t v15 = __p;
            if (v22 < 0) {
              unint64_t v15 = (void **)__p[0];
            }
            int v16 = *(unsigned __int8 *)(a1 + 76);
            *(_DWORD *)long long buf = 134218498;
            uint64_t v24 = v14;
            __int16 v25 = 2082;
            uint64_t v26 = (const char *)v15;
            __int16 v27 = 1024;
            int v28 = v16;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Audio Timesync: removeRemoteTimesyncSesssion  : Remote Timesync BTAddr = %llx] session= %{public}s mNumBTTimeSyncClient=%d", buf, 0x1Cu);
            if (v22 < 0) {
              operator delete(__p[0]);
            }
          }
          else
          {
            *(_DWORD *)long long buf = 134218498;
            uint64_t v24 = v14;
            __int16 v25 = 2082;
            uint64_t v26 = "(NULL)";
            __int16 v27 = 1024;
            int v28 = v12;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Audio Timesync: removeRemoteTimesyncSesssion  : Remote Timesync BTAddr = %llx] session= %{public}s mNumBTTimeSyncClient=%d", buf, 0x1Cu);
          }
LABEL_20:
          operator delete();
        }
        if (v11) {
          goto LABEL_20;
        }
      }
      else
      {
        char v7 = (uint64_t *)v4[1];
        if (v7)
        {
          do
          {
            uint64_t v8 = v7;
            char v7 = (uint64_t *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            uint64_t v8 = (uint64_t *)v4[2];
            BOOL v9 = *v8 == (void)v4;
            uint64_t v4 = v8;
          }
          while (!v9);
        }
      }
      uint64_t v4 = v8;
    }
    while (v8 != v5);
  }
  size_t v17 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    int v18 = *(unsigned __int8 *)(a1 + 76);
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v24) = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Timesync engine un-Register : ref count %d ", buf, 8u);
  }
  if (!*(unsigned char *)(a1 + 76))
  {
    if (*(unsigned char *)(a1 + 77))
    {
      uint64_t v19 = *(void *)(a1 + 192);
      if (v19)
      {
        sub_1002EC7A4(a1, v19, 0, 0);
        sub_1002EC7A4(a1, *(void *)(a1 + 192), 0, 1);
        sub_1002EC7A4(a1, *(void *)(a1 + 192), 0, 2);
        uint64_t v20 = qword_100A19E48;
        if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Timesync engine un-Register : No more reference counter should be freed by parent now", buf, 2u);
        }
      }
    }
  }
}

uint64_t sub_1002EB630(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v19[0] = 0;
  v19[1] = 0;
  sub_10003AED0((uint64_t)v19, a1 + 224);
  if (*(unsigned char *)(a1 + 76))
  {
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(std::__shared_weak_count **)(a1 + 16);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    if (qword_1009F80B0 != -1) {
      dispatch_once(&qword_1009F80B0, &stru_1009A4540);
    }
    uint64_t v10 = *((void *)off_1009F80A8 + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768;
    block[2] = sub_1002EB7A4;
    block[3] = &unk_1009A44B8;
    void block[4] = v9;
    uint64_t v14 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v15 = a3;
    uint64_t v16 = a2;
    int v17 = a4;
    dispatch_async(v10, block);
    if (v14) {
      std::__shared_weak_count::__release_weak(v14);
    }
    if (v8) {
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    uint64_t v11 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Audio Timesync: No Timesync clients, return", buf, 2u);
    }
  }
  return sub_10003AFB4((uint64_t)v19);
}

void sub_1002EB7A4(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)(a1 + 32);
      if (v5) {
        sub_1002EB820(v5, *(void *)(a1 + 48), *(void *)(a1 + 56), *(_DWORD *)(a1 + 64));
      }
      sub_10008A294(v4);
    }
  }
}

void sub_1002EB80C(_Unwind_Exception *a1)
{
  sub_10008A294(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002EB820(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  int v6 = (_OWORD *)(a1 + 24);
  unint64_t v7 = *(void *)(a1 + 32);
  if (v7 <= a2)
  {
    _OWORD *v6 = *(_OWORD *)(a1 + 40);
    sub_1002EE268(a1, a2, a3);
    *(void *)(a1 + 40) = a3;
    *(void *)(a1 + 48) = a2;
    uint64_t result = sub_1002EC018(a1);
    if (result)
    {
      if ((sub_1002EE138(a1, a3, *(void *)(a1 + 24)) & 1) == 0) {
        sub_1002EDFC0((void *)a1, *(void *)(a1 + 40), *(void *)(a1 + 24));
      }
    }
    else
    {
      if (!*(void *)(a1 + 32)) {
        goto LABEL_18;
      }
      uint64_t result = sub_1002EE138(a1, *(void *)(a1 + 40), *(void *)(a1 + 24));
      if (!result || *(void *)(a1 + 40) <= *(void *)v6 || *(void *)(a1 + 48) <= *(void *)(a1 + 32)) {
        goto LABEL_18;
      }
      sub_1002EDBB8(a1);
      sub_1002EDEFC(a1, *(void *)(a1 + 32), *(void *)(a1 + 24));
    }
    uint64_t result = sub_1002EDEFC(a1, a2, a3);
LABEL_18:
    *(_DWORD *)(a1 + 72) = a4;
    return result;
  }
  uint64_t v8 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134218240;
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Warning: Audio Timesync: GPIO Toggle TS wrapped around Previous TS=%llu New TS=%llu", buf, 0x16u);
  }
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  sub_10003AED0((uint64_t)buf, a1 + 224);
  if (*(void *)(a1 + 88))
  {
    sub_10003AFE8((uint64_t)buf);
    uint64_t v9 = *(void **)(a1 + 88);
    id v25 = 0;
    unsigned __int8 v10 = [v9 resetSyncServiceWithError:&v25];
    id v11 = v25;
    if ((v10 & 1) == 0)
    {
      unsigned __int8 v12 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v13 = [v11 code];
        *(_DWORD *)uint64_t v26 = 67109120;
        unsigned int v27 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Warning: Audio Timesync: Timesync Reset Failed with status %x", v26, 8u);
      }
    }
    _OWORD *v6 = 0u;
    v6[1] = 0u;
  }
  else
  {
    int v17 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
      sub_1007548F8(v17, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  return sub_10003AFB4((uint64_t)buf);
}

void sub_1002EBA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);

  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002EBAA8(uint64_t a1, uint64_t a2, unint64_t a3, unsigned char *a4)
{
  if (a3)
  {
    if (qword_1009F8168 != -1) {
      dispatch_once(&qword_1009F8168, &stru_1009A4560);
    }
    uint64_t v8 = sub_100019C0C((void *)qword_1009F8160, a3);
    uint64_t v9 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      if (v8)
      {
        sub_10003AE4C(v8, (uint64_t)__p);
        if (v17 >= 0) {
          unsigned __int8 v10 = __p;
        }
        else {
          unsigned __int8 v10 = (void **)__p[0];
        }
        *(_DWORD *)long long buf = 134218242;
        uint64_t v19 = a2;
        __int16 v20 = 2082;
        uint64_t v21 = (const char *)v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Registering Remote timesync : Remote Timesync BTAddr = %llx] session= %{public}s", buf, 0x16u);
        if (v17 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        *(_DWORD *)long long buf = 134218242;
        uint64_t v19 = a2;
        __int16 v20 = 2082;
        uint64_t v21 = "(NULL)";
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Registering Remote timesync : Remote Timesync BTAddr = %llx] session= %{public}s", buf, 0x16u);
      }
    }
    sub_1002EBCCC(a1, a3, a2);
    char v11 = *(unsigned char *)(a1 + 76);
  }
  else
  {
    char v11 = *(unsigned char *)(a1 + 76) + 1;
    *(unsigned char *)(a1 + 76) = v11;
  }
  *a4 = v11;
  unsigned __int8 v12 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = *(unsigned __int8 *)(a1 + 76);
    LODWORD(__p[0]) = 67109120;
    HIDWORD(__p[0]) = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Timesync engine Register : ref count %d ", (uint8_t *)__p, 8u);
  }
  char v14 = sub_1002EC018(a1);
  sub_1002EB234(a1, v14, *(_DWORD *)(a1 + 164));
  return 1;
}

void sub_1002EBCCC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  int v6 = *(void **)(a1 + 104);
  if (v6 == (void *)(a1 + 112)) {
LABEL_10:
  }
    operator new();
  while (1)
  {
    unint64_t v7 = (void *)v6[4];
    if (v7[1] == a3 && *v7 == a2) {
      break;
    }
    uint64_t v8 = (void *)v6[1];
    if (v8)
    {
      do
      {
        uint64_t v9 = v8;
        uint64_t v8 = (void *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        uint64_t v9 = (void *)v6[2];
        BOOL v10 = *v9 == (void)v6;
        int v6 = v9;
      }
      while (!v10);
    }
    int v6 = v9;
    if (v9 == (void *)(a1 + 112)) {
      goto LABEL_10;
    }
  }
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009A4560);
  }
  uint64_t v11 = sub_100019C0C((void *)qword_1009F8160, a2);
  unsigned __int8 v12 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    if (v11)
    {
      sub_10003AE4C(v11, (uint64_t)__p);
      if (v17 >= 0) {
        int v13 = __p;
      }
      else {
        int v13 = (void **)__p[0];
      }
      int v14 = *(unsigned __int8 *)(a1 + 76);
      *(_DWORD *)long long buf = 134218498;
      uint64_t v19 = a3;
      __int16 v20 = 2082;
      uint64_t v21 = (const char *)v13;
      __int16 v22 = 1024;
      int v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Registering  BTAddr = %llx for already registered session= %{public}s dropping! mNumBTTimeSyncClient=%d", buf, 0x1Cu);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      int v15 = *(unsigned __int8 *)(a1 + 76);
      *(_DWORD *)long long buf = 134218498;
      uint64_t v19 = a3;
      __int16 v20 = 2082;
      uint64_t v21 = "(NULL)";
      __int16 v22 = 1024;
      int v23 = v15;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Registering  BTAddr = %llx for already registered session= %{public}s dropping! mNumBTTimeSyncClient=%d", buf, 0x1Cu);
    }
  }
}

uint64_t sub_1002EC018(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 160))
  {
    if (qword_1009F80B0 != -1) {
      dispatch_once(&qword_1009F80B0, &stru_1009A4540);
    }
    uint64_t v2 = off_1009F80A8;
    uint64_t v3 = mach_absolute_time();
    if (sub_100568CF4((uint64_t)v2, v3 - *(void *)(a1 + 40), 0) > 10.0)
    {
      unint64_t v7 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Warning: Audio Timesync: GPIO Toggle stopped, releasing timesync resources", buf, 2u);
      }
      *(_OWORD *)long long buf = 0uLL;
      sub_10003AED0((uint64_t)buf, a1 + 224);
      if (*(void *)(a1 + 80))
      {
        sub_10003AFE8((uint64_t)buf);
        uint64_t v8 = *(void **)(a1 + 80);
        uint64_t v9 = *(void *)(a1 + 96);
        id v23 = 0;
        unsigned __int8 v10 = [v8 removeUserFilteredClockWithIdentifier:v9 error:&v23];
        id v11 = v23;
        if ((v10 & 1) == 0)
        {
          unsigned __int8 v12 = qword_100A19E48;
          if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)__int16 v22 = 0;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Warning: Audio Time Synchronization Shared Clock Engine cleanup Failed", v22, 2u);
          }
        }
        int v13 = *(void **)(a1 + 88);
        *(void *)(a1 + 88) = 0;

        *(void *)(a1 + 96) = TSNullClockIdentifier;
        sub_1002EDE04(a1, 0, 1);
        sub_10003AFB4((uint64_t)buf);
      }
      else
      {
        int v14 = qword_100A19E48;
        if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
          sub_100754930(v14, v15, v16, v17, v18, v19, v20, v21);
        }
        sub_10003AFB4((uint64_t)buf);
      }
      return 0;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    uint64_t result = *(void *)(a1 + 88);
    if (result)
    {
      sub_1002EDE04(a1, [(id)result lockState] == 2, 1);
      uint64_t v5 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        if (*(unsigned char *)(a1 + 160)) {
          int v6 = "Ready";
        }
        else {
          int v6 = "Not Ready";
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Timesync engine Lock State = %s", buf, 0xCu);
      }
      return *(unsigned char *)(a1 + 160) != 0;
    }
  }
  return result;
}

void sub_1002EC2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t sub_1002EC2C8(uint64_t a1, uint64_t a2, unint64_t a3, unsigned char *a4)
{
  if (a3)
  {
    if (qword_1009F8168 != -1) {
      dispatch_once(&qword_1009F8168, &stru_1009A4560);
    }
    uint64_t v8 = sub_100019C0C((void *)qword_1009F8160, a3);
    sub_1002EC564(a1, a3, a2);
    uint64_t v9 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      if (v8)
      {
        sub_10003AE4C(v8, (uint64_t)__p);
        if (v17 >= 0) {
          unsigned __int8 v10 = __p;
        }
        else {
          unsigned __int8 v10 = (void **)__p[0];
        }
        *(_DWORD *)long long buf = 134218242;
        uint64_t v19 = a2;
        __int16 v20 = 2082;
        uint64_t v21 = (const char *)v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Un Registering Remote timesync : Remote Timesync BTAddr = %llx] session= %{public}s", buf, 0x16u);
        if (v17 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        *(_DWORD *)long long buf = 134218242;
        uint64_t v19 = a2;
        __int16 v20 = 2082;
        uint64_t v21 = "(NULL)";
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Un Registering Remote timesync : Remote Timesync BTAddr = %llx] session= %{public}s", buf, 0x16u);
      }
    }
  }
  else
  {
    --*(unsigned char *)(a1 + 76);
  }
  *a4 = *(unsigned char *)(a1 + 76);
  id v11 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = *(unsigned __int8 *)(a1 + 76);
    LODWORD(__p[0]) = 67109120;
    HIDWORD(__p[0]) = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Timesync engine un-Register : ref count %d ", (uint8_t *)__p, 8u);
  }
  if (!*(unsigned char *)(a1 + 76))
  {
    if (*(unsigned char *)(a1 + 77))
    {
      uint64_t v14 = *(void *)(a1 + 192);
      if (v14)
      {
        sub_1002EC7A4(a1, v14, 0, 0);
        sub_1002EC7A4(a1, *(void *)(a1 + 192), 0, 1);
        sub_1002EC7A4(a1, *(void *)(a1 + 192), 0, 2);
        uint64_t v15 = qword_100A19E48;
        if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Timesync engine un-Register : No more reference counter should be freed by parent now", (uint8_t *)__p, 2u);
        }
      }
    }
  }
  return 1;
}

uint64_t sub_1002EC564(uint64_t a1, unint64_t a2, uint64_t a3)
{
  int v6 = *(void **)(a1 + 104);
  uint64_t result = a1 + 104;
  uint64_t v5 = v6;
  if (v6 != (void *)(result + 8))
  {
    while (1)
    {
      uint64_t v9 = (void *)v5[4];
      if (v9[1] == a3 && *v9 == a2) {
        break;
      }
      unsigned __int8 v10 = (void *)v5[1];
      if (v10)
      {
        do
        {
          id v11 = v10;
          unsigned __int8 v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          id v11 = (void *)v5[2];
          BOOL v12 = *v11 == (void)v5;
          uint64_t v5 = v11;
        }
        while (!v12);
      }
      uint64_t v5 = v11;
      if (v11 == (void *)(result + 8)) {
        return result;
      }
    }
    uint64_t v20 = v5[4];
    --*(unsigned char *)(a1 + 76);
    sub_1000517A4(result, (unint64_t *)&v20);
    if (qword_1009F8168 != -1) {
      dispatch_once(&qword_1009F8168, &stru_1009A4560);
    }
    uint64_t v13 = sub_100019C0C((void *)qword_1009F8160, a2);
    uint64_t v14 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      if (v13)
      {
        sub_10003AE4C(v13, (uint64_t)__p);
        if (v19 >= 0) {
          uint64_t v15 = __p;
        }
        else {
          uint64_t v15 = (void **)__p[0];
        }
        int v16 = *(unsigned __int8 *)(a1 + 76);
        *(_DWORD *)long long buf = 134218498;
        uint64_t v22 = a3;
        __int16 v23 = 2082;
        uint64_t v24 = (const char *)v15;
        __int16 v25 = 1024;
        int v26 = v16;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Unregister Remote timesync Completed  : Remote Timesync BTAddr = %llx] session= %{public}s mNumBTTimeSyncClient=%d", buf, 0x1Cu);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        int v17 = *(unsigned __int8 *)(a1 + 76);
        *(_DWORD *)long long buf = 134218498;
        uint64_t v22 = a3;
        __int16 v23 = 2082;
        uint64_t v24 = "(NULL)";
        __int16 v25 = 1024;
        int v26 = v17;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Unregister Remote timesync Completed  : Remote Timesync BTAddr = %llx] session= %{public}s mNumBTTimeSyncClient=%d", buf, 0x1Cu);
      }
    }
    uint64_t result = v20;
    if (v20) {
      operator delete();
    }
  }
  return result;
}

void sub_1002EC7A4(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_1009A4580);
  }
  int v8 = *((unsigned __int8 *)off_1009F8150 + 198);
  if (a4)
  {
    if (a4 == 2)
    {
      int v9 = *(_DWORD *)(a1 + 172);
      if (a3)
      {
        int v10 = v9 + 1;
LABEL_12:
        *(_DWORD *)(a1 + 172) = v10;
        goto LABEL_13;
      }
      if (v9)
      {
        int v10 = v9 - 1;
        goto LABEL_12;
      }
    }
LABEL_13:
    int v11 = 2;
    goto LABEL_14;
  }
  if (*((unsigned char *)off_1009F8150 + 198)) {
    int v11 = 2;
  }
  else {
    int v11 = *(_DWORD *)(a1 + 164);
  }
LABEL_14:
  BOOL v12 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = *(_DWORD *)(a1 + 164);
    uint64_t v14 = "true";
    *(_DWORD *)long long buf = 67109634;
    if (!v8) {
      uint64_t v14 = "false";
    }
    *(_DWORD *)&uint8_t buf[4] = a3;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v13;
    *(_WORD *)uint64_t v54 = 2080;
    *(void *)&v54[2] = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Trigger updateReferenceTimeStampHardWareTrigger %d Accuracy %d, HfpStreaming %s", buf, 0x18u);
  }
  *(void *)(a1 + 192) = a2;
  unsigned int v15 = a4 - 1;
  if ((a4 - 1) < 2)
  {
    int v16 = 3;
    if (v11 != 2)
    {
      if (v11 != 1)
      {
LABEL_84:
        long long v43 = qword_100A19E48;
        if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
        {
          long long v44 = (uint64_t **)(a1 + 200);
          int v52 = 1;
          *(void *)long long buf = &v52;
          int v45 = *((_DWORD *)sub_1002EE82C(v44, &v52, (uint64_t)&unk_1007BE9D0, (unsigned int **)buf) + 8);
          int v51 = 2;
          *(void *)long long buf = &v51;
          int v46 = *((_DWORD *)sub_1002EE82C(v44, &v51, (uint64_t)&unk_1007BE9D0, (unsigned int **)buf) + 8);
          int v50 = 3;
          *(void *)long long buf = &v50;
          int v47 = *((_DWORD *)sub_1002EE82C(v44, &v50, (uint64_t)&unk_1007BE9D0, (unsigned int **)buf) + 8);
          *(_DWORD *)long long buf = 67109632;
          *(_DWORD *)&uint8_t buf[4] = v45;
          *(_WORD *)&uint8_t buf[8] = 1024;
          *(_DWORD *)&buf[10] = v46;
          *(_WORD *)uint64_t v54 = 1024;
          *(_DWORD *)&v54[2] = v47;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "Audio Timesync: States: SpatialHigh: %d, SpatialLow: %d, SensorLow: %d", buf, 0x14u);
        }
        return;
      }
      goto LABEL_51;
    }
    int v11 = 3;
    goto LABEL_29;
  }
  if (!a4)
  {
    if (v11 == 1)
    {
      int v16 = 1;
LABEL_51:
      if (a3)
      {
        int v52 = 3;
        *(void *)long long buf = &v52;
        if (*((int *)sub_1002EE82C((uint64_t **)(a1 + 200), &v52, (uint64_t)&unk_1007BE9D0, (unsigned int **)buf) + 8) > 0
          || (int v52 = 2,
              *(void *)long long buf = &v52,
              *((int *)sub_1002EE82C((uint64_t **)(a1 + 200), &v52, (uint64_t)&unk_1007BE9D0, (unsigned int **)buf) + 8) >= 1))
        {
          char v31 = qword_100A19E48;
          if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Start Spatial High, Low is running, stop it first", buf, 2u);
          }
          sub_1002ED38C(a1, a2, 0, 2);
        }
        int v52 = 1;
        *(void *)long long buf = &v52;
        if (*((int *)sub_1002EE82C((uint64_t **)(a1 + 200), &v52, (uint64_t)&unk_1007BE9D0, (unsigned int **)buf) + 8) < 1)
        {
          sub_1002ED38C(a1, a2, 1, 1);
        }
        else
        {
          uint64_t v32 = qword_100A19E48;
          if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Start Spatial High, High is running, do nothing", buf, 2u);
          }
        }
        uint64_t v35 = a1;
        int v36 = v16;
LABEL_78:
        sub_1002ED670(v35, v36, 1);
        goto LABEL_84;
      }
      int v52 = 1;
      *(void *)long long buf = &v52;
      if (*((int *)sub_1002EE82C((uint64_t **)(a1 + 200), &v52, (uint64_t)&unk_1007BE9D0, (unsigned int **)buf) + 8) <= 0)
      {
        uint64_t v33 = qword_100A19E48;
        if (!os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_84;
        }
        *(_WORD *)long long buf = 0;
        char v34 = "Audio Timesync: Stop Spatial High, No High is running, do nothing";
        goto LABEL_68;
      }
      sub_1002ED670(a1, v16, 0);
      int v52 = 1;
      *(void *)long long buf = &v52;
      if (*((int *)sub_1002EE82C((uint64_t **)(a1 + 200), &v52, (uint64_t)&unk_1007BE9D0, (unsigned int **)buf) + 8) >= 1)
      {
        uint64_t v33 = qword_100A19E48;
        if (!os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_84;
        }
        *(_WORD *)long long buf = 0;
        char v34 = "Audio Timesync: Stop Spatial High, High is still running, do nothing";
LABEL_68:
        long long v37 = v33;
        uint32_t v38 = 2;
        goto LABEL_83;
      }
      sub_1002ED38C(a1, a2, 0, 1);
      int v52 = 3;
      *(void *)long long buf = &v52;
      if (*((int *)sub_1002EE82C((uint64_t **)(a1 + 200), &v52, (uint64_t)&unk_1007BE9D0, (unsigned int **)buf) + 8) < 1) {
        goto LABEL_84;
      }
      long long v39 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Audio Timesync: After Stop Spatial High, Sensor Low exists, resume it", buf, 2u);
      }
      uint64_t v40 = a1;
      uint64_t v41 = a2;
      int v42 = 1;
LABEL_93:
      sub_1002ED38C(v40, v41, v42, 2);
      goto LABEL_84;
    }
    if (v11 == 2)
    {
LABEL_29:
      if (a3)
      {
        int v52 = 1;
        *(void *)long long buf = &v52;
        if (*((int *)sub_1002EE82C((uint64_t **)(a1 + 200), &v52, (uint64_t)&unk_1007BE9D0, (unsigned int **)buf) + 8) <= 0
          && (int v52 = 2,
              *(void *)long long buf = &v52,
              *((int *)sub_1002EE82C((uint64_t **)(a1 + 200), &v52, (uint64_t)&unk_1007BE9D0, (unsigned int **)buf) + 8) <= 0)
          && (int v52 = 3,
              *(void *)long long buf = &v52,
              *((int *)sub_1002EE82C((uint64_t **)(a1 + 200), &v52, (uint64_t)&unk_1007BE9D0, (unsigned int **)buf) + 8) < 1))
        {
          sub_1002ED38C(a1, a2, 1, 2);
        }
        else
        {
          __int16 v25 = qword_100A19E48;
          if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
          {
            if (v15 >= 2) {
              int v26 = "Spatial Low";
            }
            else {
              int v26 = "Sensor Low";
            }
            int v52 = 1;
            *(void *)long long buf = &v52;
            if (*((int *)sub_1002EE82C((uint64_t **)(a1 + 200), &v52, (uint64_t)&unk_1007BE9D0, (unsigned int **)buf) + 8) <= 0)
            {
              int v52 = 2;
              *(void *)long long buf = &v52;
              if (*((int *)sub_1002EE82C((uint64_t **)(a1 + 200), &v52, (uint64_t)&unk_1007BE9D0, (unsigned int **)buf)
                   + 8) <= 0)
                unsigned int v27 = "Sensor Low";
              else {
                unsigned int v27 = "Spatial Low";
              }
            }
            else
            {
              unsigned int v27 = "Spatial High";
            }
            *(_DWORD *)long long buf = 136315394;
            *(void *)&uint8_t buf[4] = v26;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)uint64_t v54 = v27;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Start %s, %s is running, do nothing", buf, 0x16u);
          }
        }
        uint64_t v35 = a1;
        int v36 = v11;
        goto LABEL_78;
      }
      int v52 = 2;
      *(void *)long long buf = &v52;
      if (*((int *)sub_1002EE82C((uint64_t **)(a1 + 200), &v52, (uint64_t)&unk_1007BE9D0, (unsigned int **)buf) + 8) <= 0)
      {
        int v52 = 3;
        *(void *)long long buf = &v52;
        if (*((int *)sub_1002EE82C((uint64_t **)(a1 + 200), &v52, (uint64_t)&unk_1007BE9D0, (unsigned int **)buf) + 8) <= 0)
        {
          uint64_t v48 = qword_100A19E48;
          if (!os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_84;
          }
          long long v49 = "Spatial Low";
          if (v15 < 2) {
            long long v49 = "Sensor Low";
          }
          *(_DWORD *)long long buf = 136315138;
          *(void *)&uint8_t buf[4] = v49;
          char v34 = "Audio Timesync: Stop %s, not running, do nothing";
          long long v37 = v48;
          uint32_t v38 = 12;
LABEL_83:
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, v34, buf, v38);
          goto LABEL_84;
        }
      }
      sub_1002ED670(a1, v11, 0);
      int v52 = 1;
      *(void *)long long buf = &v52;
      if (*((int *)sub_1002EE82C((uint64_t **)(a1 + 200), &v52, (uint64_t)&unk_1007BE9D0, (unsigned int **)buf) + 8) > 0
        || (int v52 = 2,
            *(void *)long long buf = &v52,
            *((int *)sub_1002EE82C((uint64_t **)(a1 + 200), &v52, (uint64_t)&unk_1007BE9D0, (unsigned int **)buf) + 8) > 0)
        || (int v52 = 3,
            *(void *)long long buf = &v52,
            *((int *)sub_1002EE82C((uint64_t **)(a1 + 200), &v52, (uint64_t)&unk_1007BE9D0, (unsigned int **)buf) + 8) >= 1))
      {
        uint64_t v28 = qword_100A19E48;
        if (!os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_84;
        }
        if (v15 >= 2) {
          int64_t v29 = "Spatial Low";
        }
        else {
          int64_t v29 = "Sensor Low";
        }
        int v52 = 1;
        *(void *)long long buf = &v52;
        if (*((int *)sub_1002EE82C((uint64_t **)(a1 + 200), &v52, (uint64_t)&unk_1007BE9D0, (unsigned int **)buf) + 8) <= 0)
        {
          if (sub_1002ED338(a1)) {
            unint64_t v30 = "Spatial Low";
          }
          else {
            unint64_t v30 = "Sensor Low";
          }
        }
        else
        {
          unint64_t v30 = "Spatial High";
        }
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = v29;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)uint64_t v54 = v30;
        char v34 = "Audio Timesync: Stop %s, %s is running, do nothing";
        long long v37 = v28;
        uint32_t v38 = 22;
        goto LABEL_83;
      }
      uint64_t v40 = a1;
      uint64_t v41 = a2;
      int v42 = 0;
      goto LABEL_93;
    }
  }
  int v17 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
    sub_100754968(v17, v18, v19, v20, v21, v22, v23, v24);
  }
}

uint64_t sub_1002ED154(uint64_t a1, void *a2, uint64_t a3)
{
  *a2 = TSNullClockIdentifier;
  int v6 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 77)) {
      unint64_t v7 = "Yes";
    }
    else {
      unint64_t v7 = "No";
    }
    int v8 = " No";
    if (a3 && !sub_1002ED2BC(a1, a3)) {
      int v8 = " Yes";
    }
    int v10 = 134218498;
    uint64_t v11 = a3;
    __int16 v12 = 2080;
    int v13 = v7;
    __int16 v14 = 2080;
    unsigned int v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Request for TimesyncID, address = %llx Timesync Running=%s Registered ? %s", (uint8_t *)&v10, 0x20u);
  }
  if (!*(unsigned char *)(a1 + 77)) {
    return 0;
  }
  if (!a3 || (uint64_t result = sub_1002ED2BC(a1, a3), result))
  {
    uint64_t result = *(void *)(a1 + 88);
    if (result)
    {
      if ([(id)result lockState] == 2)
      {
        *a2 = *(void *)(a1 + 96);
        return 1;
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1002ED2BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 104);
  if (v2 == (void *)(a1 + 112))
  {
    char v3 = 0;
  }
  else
  {
    char v3 = 0;
    while (1)
    {
      BOOL v4 = *(void *)(v2[4] + 8) == a2;
      if (*(void *)(v2[4] + 8) == a2) {
        break;
      }
      uint64_t v5 = (void *)v2[1];
      if (v5)
      {
        do
        {
          int v6 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          int v6 = (void *)v2[2];
          BOOL v7 = *v6 == (void)v2;
          uint64_t v2 = v6;
        }
        while (!v7);
      }
      v3 |= v4;
      uint64_t v2 = v6;
      if (v6 == (void *)(a1 + 112)) {
        return v3 & 1;
      }
    }
    char v3 = 1;
  }
  return v3 & 1;
}

BOOL sub_1002ED338(uint64_t a1)
{
  int v2 = 2;
  char v3 = (unsigned int *)&v2;
  return *((_DWORD *)sub_1002EE82C((uint64_t **)(a1 + 200), &v2, (uint64_t)&unk_1007BE9D0, &v3) + 8) > 0;
}

void sub_1002ED38C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (a2)
  {
    if (a3)
    {
      if (a4 == 2)
      {
        int v9 = qword_100A19E48;
        if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)int v16 = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Start Low", v16, 2u);
        }
        *(_DWORD *)(a1 + 168) = 1000;
        operator new();
      }
      if (a4 == 1)
      {
        int v6 = qword_100A19E48;
        if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Start High", buf, 2u);
        }
        *(_DWORD *)(a1 + 168) = 250;
        if (qword_1009F80B0 != -1) {
          dispatch_once(&qword_1009F80B0, &stru_1009A4540);
        }
        sub_10056A038((uint64_t)off_1009F80A8, a2, 1, 2, 2, 2);
      }
      uint64_t v10 = a1;
      int v11 = 1;
    }
    else
    {
      if (a4 == 2)
      {
        __int16 v12 = qword_100A19E48;
        if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int16 v14 = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Stop Low", v14, 2u);
        }
        if (*(void *)(a1 + 176))
        {
          if (*(unsigned char *)(a1 + 77))
          {
            int v13 = *(std::__shared_weak_count **)(a1 + 184);
            *(void *)(a1 + 176) = 0;
            *(void *)(a1 + 184) = 0;
            if (v13) {
              sub_10008A294(v13);
            }
          }
        }
      }
      else if (a4 == 1)
      {
        int v8 = qword_100A19E48;
        if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)unsigned int v15 = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Stop High", v15, 2u);
        }
        if (*(unsigned char *)(a1 + 77))
        {
          if (qword_1009F80B0 != -1) {
            dispatch_once(&qword_1009F80B0, &stru_1009A4540);
          }
          sub_10056A038((uint64_t)off_1009F80A8, a2, 0, 2, 0, 0);
        }
      }
      *(void *)(a1 + 192) = 0;
      uint64_t v10 = a1;
      int v11 = 0;
    }
    sub_1002ED7E8(v10, v11);
  }
  else
  {
    BOOL v7 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Cannot update Time Sync state, invalid device", v18, 2u);
    }
  }
}

uint64_t *sub_1002ED670(uint64_t a1, int a2, int a3)
{
  int v9 = a2;
  BOOL v4 = (uint64_t **)(a1 + 200);
  uint64_t v10 = (unsigned int *)&v9;
  uint64_t v5 = sub_1002EE82C((uint64_t **)(a1 + 200), &v9, (uint64_t)&unk_1007BE9D0, &v10);
  int v6 = *((_DWORD *)v5 + 8);
  if (a3) {
    int v7 = v6 + 1;
  }
  else {
    int v7 = v6 - 1;
  }
  *((_DWORD *)v5 + 8) = v7;
  uint64_t v10 = (unsigned int *)&v9;
  uint64_t result = sub_1002EE82C(v4, &v9, (uint64_t)&unk_1007BE9D0, &v10);
  if (*((int *)result + 8) <= 0) {
    return (uint64_t *)sub_1002CC188((uint64_t)v4, &v9);
  }
  return result;
}

void sub_1002ED718(uint64_t a1, uint64_t a2)
{
  sub_1002EEB70(&v2, a2);
}

uint64_t sub_1002ED760(uint64_t a1)
{
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009A4540);
  }
  uint64_t v2 = *((void *)off_1009F80A8 + 32);
  char v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24);

  return v3(a1, v2);
}

void sub_1002ED7E8(uint64_t a1, int a2)
{
  if ((a2 & 1) == 0) {
    sub_1002ED8B8(a1);
  }
  *(unsigned char *)(a1 + 77) = a2;
  BOOL v4 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = "Not Running";
    if (a2) {
      uint64_t v5 = "Running";
    }
    int v6 = 136446210;
    int v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Reference Timestamp status: %{public}s ", (uint8_t *)&v6, 0xCu);
  }
}

void sub_1002ED8B8(uint64_t a1)
{
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v2 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Timesync engine Reset", buf, 2u);
  }
  sub_1002EDE04(a1, 0, 1);
  uint64_t v3 = *(void *)(a1 + 96);
  uint64_t v4 = TSNullClockIdentifier;
  if (v3 != TSNullClockIdentifier)
  {
    uint64_t v5 = *(void **)(a1 + 80);
    id v11 = 0;
    unsigned __int8 v6 = [v5 removeUserFilteredClockWithIdentifier:v3 error:&v11];
    id v7 = v11;
    if ((v6 & 1) == 0)
    {
      int v8 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Warning: Audio Time Synchronization Shared Clock Engine cleanup Failed", v10, 2u);
      }
    }
  }
  int v9 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = v4;
}

void sub_1002ED9D8(uint64_t a1, uint64_t a2)
{
  sub_1002EDA24(a1 + 128, a2);
  char v3 = sub_1002EC018(a1);
  int v4 = *(_DWORD *)(a1 + 164);

  sub_1002EB234(a1, v3, v4);
}

void sub_1002EDA24(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v5 = *(char **)(a1 + 8);
  int v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    uint64_t v6 = a2;
    sub_1002EED00(a1 + 8, v4, (char *)&v6);
    sub_100061554(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_1002EDAB0(os_unfair_lock_s *a1, void *a2)
{
  char v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  int v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    int v4 = v5;
  }
  if (v4)
  {
    uint64_t v6 = v4;
    operator delete(v4);
  }
}

void sub_1002EDB54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002EDB7C(uint64_t a1, uint64_t (***a2)(void, void, void, void, void))
{
  return (**a2)(a2, *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 52), *(unsigned int *)(a1 + 48), *(void *)(*(void *)(a1 + 32) + 96));
}

uint64_t sub_1002EDBB8(uint64_t a1)
{
  if (*(void *)(a1 + 88))
  {
    uint64_t v1 = 0;
    id v2 = 0;
    goto LABEL_17;
  }
  int v4 = *(const char **)(a1 + 96);
  if (v4 == (const char *)TSNullClockIdentifier)
  {
    int64x2_t v5 = vsubq_s64(*(int64x2_t *)(a1 + 40), *(int64x2_t *)(a1 + 24));
    *(int64x2_t *)(a1 + 56) = v5;
    uint64_t v6 = *(void **)(a1 + 80);
    id v18 = 0;
    uint64_t v7 = (const char *)[v6 addUserFilteredClockWithMachInterval:*(_OWORD *)&v5 domainInterval:4 usingFilterShift:0 isAdaptive:&v18 error:&v18];
    id v2 = v18;
    *(void *)(a1 + 96) = v7;
    int v8 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134218242;
      uint64_t v20 = v7;
      __int16 v21 = 2112;
      id v22 = v2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Timesync engine initializing ID %llu error %@", buf, 0x16u);
      uint64_t v7 = *(const char **)(a1 + 96);
    }
    if (v7 == v4)
    {
      int v9 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Warning: Audio Timesync: Timesync engine initialization failed", buf, 2u);
      }
      goto LABEL_16;
    }
  }
  else
  {
    id v2 = 0;
    uint64_t v7 = *(const char **)(a1 + 96);
  }
  uint64_t v10 = [*(id *)(a1 + 80) clockWithClockIdentifier:v7];
  __int16 v12 = *(void **)(a1 + 88);
  id v11 = (uint64_t *)(a1 + 88);
  uint64_t *v11 = v10;

  int v13 = (void *)*v11;
  if (!*v11)
  {
LABEL_16:
    uint64_t v1 = 0;
    goto LABEL_17;
  }
  __int16 v14 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v15 = [v13 lockState];
    int v16 = "Not Ready";
    if (v15 == 2) {
      int v16 = "Ready";
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v20 = v16;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Timesync engine Ready Lock State = %s", buf, 0xCu);
  }
  uint64_t v1 = 1;
LABEL_17:

  return v1;
}

void sub_1002EDDE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002EDE04(uint64_t a1, int a2, int a3)
{
  if (*(unsigned __int8 *)(a1 + 160) != a2)
  {
    int v4 = a2;
    *(unsigned char *)(a1 + 160) = a2;
    uint64_t v6 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = "Not Ready";
      if (v4) {
        uint64_t v7 = "Ready";
      }
      int v8 = 136315138;
      int v9 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Notify Timesync State update: %s", (uint8_t *)&v8, 0xCu);
      LOBYTE(v4) = *(unsigned char *)(a1 + 160) != 0;
    }
    sub_1002EB234(a1, v4, a3);
  }
}

BOOL sub_1002EDEFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = *(void **)(a1 + 88);
  if (v3)
  {
    id v8 = 0;
    [v3 addTimestampWithMachAbsolute:a3 andDomainTime:a2 error:&v8];
    id v5 = v8;
    if (v5)
    {
      uint64_t v6 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
        sub_1007549A0((uint64_t)v5, v6);
      }
    }
    sub_1002EDE04(a1, [*(id *)(a1 + 88) lockState] == 2, 1);
  }
  return v3 != 0;
}

void sub_1002EDFB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002EDFC0(void *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009A4540);
  }
  float v8 = sub_100568CF4((uint64_t)off_1009F80A8, a2 - a3, 0);
  int v9 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = a1[3];
    uint64_t v11 = a1[7];
    int v14 = 134218752;
    uint64_t v15 = v10;
    __int16 v16 = 2048;
    unint64_t v17 = a2;
    __int16 v18 = 2048;
    uint64_t v19 = v11;
    __int16 v20 = 2048;
    double v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Missed GPIO toggles Missing  Host TS [%llu - %llu] expected approximate delta=%llu, actual delta=%f", (uint8_t *)&v14, 0x2Au);
  }
  if (v8 < 10.0 && v6 < a2)
  {
    do
    {
      uint64_t v13 = a1[7];
      v6 += v13;
      if (v6 + v13 > a2) {
        break;
      }
      v7 += a1[8];
      sub_1002EDEFC((uint64_t)a1, v7, v6);
    }
    while (v6 < a2);
  }
}

uint64_t sub_1002EE138(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009A4540);
  }
  uint64_t v6 = a2 - a3;
  uint64_t v7 = 1;
  float v8 = sub_100568CF4((uint64_t)off_1009F80A8, v6, 1);
  if (!*(_DWORD *)(a1 + 172))
  {
    float v9 = v8;
    if (v8 > (float)((float)*(unsigned int *)(a1 + 168) * 1.5))
    {
      uint64_t v10 = qword_100A19E48;
      uint64_t v7 = 0;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = 134217984;
        double v13 = v9;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Audio Timesync: GPIO Toggle more than expected delta=%f", (uint8_t *)&v12, 0xCu);
        return 0;
      }
    }
  }
  return v7;
}

void sub_1002EE268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((unint64_t)(a2 - qword_100A120E8) >= 0x77359401) {
    qword_100A120E8 = a2;
  }
  if (sub_1002EC018(a1)) {
    uint64_t v6 = [*(id *)(a1 + 88) convertFromDomainToMachAbsoluteTime:a2];
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void *)(a1 + 32);
  if (sub_1002EC018(a1)) {
    float v8 = [*(id *)(a1 + 88) convertFromDomainToMachAbsoluteTime:v7];
  }
  else {
    float v8 = 0;
  }
  float v9 = (double)(unint64_t)(a2 - *(void *)(a1 + 32)) / 1000.0;
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009A4540);
  }
  float v10 = sub_100568CF4((uint64_t)off_1009F80A8, v6 - v8, 2);
  if (v10 <= v9) {
    float v11 = v9 - v10;
  }
  else {
    float v11 = v10 - v9;
  }
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009A4540);
  }
  float v12 = sub_100568CF4((uint64_t)off_1009F80A8, a3 - *(void *)(a1 + 24), 1);
  if (v11 >= 3000.0 || qword_100A120E8 == a2)
  {
    int v14 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = 134219520;
      double v16 = v9;
      __int16 v17 = 2048;
      double v18 = v10;
      __int16 v19 = 2048;
      double v20 = v11;
      __int16 v21 = 2048;
      double v22 = v12;
      __int16 v23 = 2048;
      uint64_t v24 = a2;
      __int16 v25 = 2048;
      uint64_t v26 = a3;
      __int16 v27 = 2048;
      uint64_t v28 = v6;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Audio Timesync: FW_prev_Diff = %.1fus, FWDiff_after_TS = %.1fus, delta_after_TS = %.1fus, last_event = %.1fms, fwTimestamp = %llu, hostTimestamp = %llu, Trans_FW_Timestamp = %llu", (uint8_t *)&v15, 0x48u);
    }
  }
}

uint64_t sub_1002EE4AC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = sub_1002EC018(a1);
  if (v6) {
    *a3 = [*(id *)(a1 + 88) convertFromDomainToMachAbsoluteTime:a2];
  }
  return v6;
}

void sub_1002EE4FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 176);
  char v3 = *(std::__shared_weak_count **)(a1 + 184);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v2) {
    sub_1002ED760(v2);
  }
  if (v3)
  {
    sub_10008A294(v3);
  }
}

void sub_1002EE560(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10008A294(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1002EE578(uint64_t a1)
{
  return *(void *)(a1 + 176) != 0;
}

uint64_t sub_1002EE588(uint64_t a1, uint64_t a2, int a3, int a4)
{
  *(_WORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(void *)a1 = &off_1009A4518;
  *(void *)(a1 + 64) = a2;
  *(_DWORD *)(a1 + 72) = a3;
  *(unsigned char *)(a1 + 76) = a4;
  uint64_t v6 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 134218240;
    uint64_t v9 = a1;
    __int16 v10 = 1024;
    int v11 = a4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Legacy Timesync Timed Event started (0x%p); Repeating Timer? %d",
      (uint8_t *)&v8,
      0x12u);
  }
  return a1;
}

void *sub_1002EE680(void *a1)
{
  *a1 = &off_1009A4518;
  uint64_t v2 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 134217984;
    uint64_t v7 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Legacy Timesync Timed Event ended (0x%p)", (uint8_t *)&v6, 0xCu);
  }
  *a1 = off_1009B05D0;
  char v3 = (std::__shared_weak_count *)a1[6];
  if (v3) {
    sub_10008A294(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[4];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void sub_1002EE77C(void *a1)
{
  sub_1002EE680(a1);

  operator delete();
}

void sub_1002EE7B4(uint64_t a1)
{
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009A4540);
  }
  uint64_t v2 = off_1009F80A8;
  uint64_t v3 = *(void *)(a1 + 64);

  sub_10056004C((uint64_t)v2, v3);
}

void (*sub_1002EE818())(uint64_t a1)
{
  return sub_1004B04C0;
}

uint64_t *sub_1002EE82C(uint64_t **a1, int *a2, uint64_t a3, unsigned int **a4)
{
  uint64_t v7 = a1 + 1;
  int v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        int v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      int v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    int v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 28) = **a4;
    sub_100036CA0(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void sub_1002EE8EC(id a1)
{
}

void sub_1002EE930()
{
}

void sub_1002EE954(id a1)
{
}

void sub_1002EE998()
{
}

void sub_1002EE9BC(id a1)
{
}

void sub_1002EEB4C()
{
}

void sub_1002EEB70(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1002EEBF0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_100754A18(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002EEC08(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    int v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      id v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        int v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      if (v5)
      {
        sub_10008A294(v5);
      }
    }
  }
}

void sub_1002EEC94(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1002EECCC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

char *sub_1002EED00(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  int v4 = __src;
  int v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    double v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      __int16 v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      __int16 v19 = 0;
    }
    double v20 = &v19[8 * v16];
    std::string __p = v19;
    __int16 v27 = v20;
    uint64_t v28 = v20;
    int64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        __int16 v23 = (char *)sub_1000405F8(v8, v22);
        double v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        __int16 v27 = v20;
        int64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        __int16 v27 = v20;
      }
    }
    *(void *)double v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    int v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    uint64_t v9 = __src + 8;
    int v10 = v6 - 8;
    int v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)int v4 = *(void *)v3;
  }
  return v4;
}

void sub_1002EEF08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002EEF40(uint64_t a1)
{
  *(void *)a1 = off_1009A45E8;
  *(void *)(a1 + 8) = off_1009A4828;
  *(void *)(a1 + 16) = off_1009A4860;
  *(void *)(a1 + 24) = off_1009A4880;
  *(void *)(a1 + 32) = off_1009A4930;
  *(void *)(a1 + 40) = off_1009A4990;
  *(void *)(a1 + 48) = &off_1009A49D0;
  *(void *)(a1 + 56) = off_1009A49E8;
  *(void *)(a1 + 64) = off_1009A4A30;
  *(void *)(a1 + 72) = off_1009A4A50;
  *(void *)(a1 + 80) = &off_1009A4A78;
  *(void *)(a1 + 88) = off_1009A4A90;
  *(void *)(a1 + 96) = off_1009A4AC0;
  *(void *)(a1 + 104) = &off_1009A4AE8;
  *(void *)(a1 + 112) = off_1009A4B00;
  *(void *)(a1 + 120) = &off_1009A4B28;
  *(void *)(a1 + 128) = &off_1009A4B40;
  *(void *)(a1 + 136) = off_1009A4B58;
  *(void *)(a1 + 144) = &off_1009A4B98;
  *(void *)(a1 + 152) = off_1009A4BB0;
  *(void *)(a1 + 160) = off_1009A4C28;
  *(void *)(a1 + 168) = &off_1009A4C50;
  *(unsigned char *)(a1 + 176) = 0;
  *(_WORD *)(a1 + 178) = 0;
  *(unsigned char *)(a1 + 180) = 0;
  *(void *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = a1 + 232;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 248) = a1 + 256;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 272) = a1 + 280;
  *(void *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 372) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(void *)(a1 + 400) = a1 + 408;
  *(_WORD *)(a1 + 424) = 256;
  *(unsigned char *)(a1 + 426) = 1;
  int v21 = 0;
  uint64_t v2 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "ConnectionGracePeriod");
  int v3 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v2 + 88))(v2, buf, __p, &v21);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  if (v23 < 0)
  {
    operator delete(*(void **)buf);
    if (!v3) {
      goto LABEL_13;
    }
  }
  else if (!v3)
  {
    goto LABEL_13;
  }
  int v4 = v21;
  id v5 = qword_100A19F00;
  if (v21 >= (unsigned __int16)word_1009FB220)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Warning: Using override value (%d) for connection grace period", buf, 8u);
      LOWORD(v4) = v21;
    }
    word_1009FB220 = v4;
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
  {
    sub_100754A3C();
  }
LABEL_13:
  uint64_t v6 = +[NSMutableSet set];
  unint64_t v7 = *(void **)(a1 + 296);
  *(void *)(a1 + 296) = v6;

  uint64_t v8 = +[NSMutableDictionary dictionary];
  uint64_t v9 = *(void **)(a1 + 304);
  *(void *)(a1 + 304) = v8;

  uint64_t v10 = +[NSMutableSet set];
  int v11 = *(void **)(a1 + 328);
  *(void *)(a1 + 328) = v10;

  mach_timebase_info((mach_timebase_info_t)(a1 + 184));
  uint64_t v12 = +[NSMutableSet set];
  double v13 = *(void **)(a1 + 336);
  *(void *)(a1 + 336) = v12;

  uint64_t v14 = +[NSMutableSet set];
  uint64_t v15 = *(void **)(a1 + 344);
  *(void *)(a1 + 344) = v14;

  uint64_t v16 = +[NSMutableSet set];
  uint64_t v17 = *(void **)(a1 + 352);
  *(void *)(a1 + 352) = v16;

  return a1;
}

void sub_1002EF4B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  sub_10030BEA8(v24 + 168, *(void **)(v21 + 408));
  sub_100051568((void ***)&a16);

  sub_10004BA28(v23, *(char **)(v21 + 280));
  sub_10000EDA0(v22, *(void **)(v21 + 256));
  sub_1000486F0(v24 - 8, *(void **)(v21 + 232));
  uint64_t v26 = *(void **)(v21 + 200);
  if (v26)
  {
    *(void *)(v21 + 208) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

void sub_1002EF594(uint64_t a1)
{
  sub_1002EFD24(a1);
  if (qword_1009F8748 != -1) {
    dispatch_once(&qword_1009F8748, &stru_1009A4DF8);
  }
  sub_1002C3EBC((uint64_t)off_1009F8740 + 80, a1);
  if (qword_1009F7F10 != -1) {
    dispatch_once(&qword_1009F7F10, &stru_1009A4E18);
  }
  sub_1000619B8(qword_1009F7F08 + 40, a1 + 40);
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009A4E38);
  }
  sub_100680938((uint64_t)off_1009F7EB8, a1 + 24, 0);
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009A4E58);
  }
  sub_1000A7BDC((uint64_t)off_1009F85C0 + 1872, a1 + 32);
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009A4E58);
  }
  sub_1000A7BDC((uint64_t)off_1009F85C0 + 1904, a1 + 32);
  uint64_t v2 = sub_100052E70();
  sub_1005C8A64(v2, a1 + 8);
  if (qword_1009FB230 != -1) {
    dispatch_once(&qword_1009FB230, &stru_1009A4E78);
  }
  sub_100423958(qword_1009FB228, a1 + 56);
  uint64_t v3 = sub_100052E70();
  sub_1005C8AAC(v3, a1 + 16);
  uint64_t v4 = sub_10003FFD4();
  sub_1002DF09C(v4 + 448, a1 + 80);
  if (qword_1009F7ED0 != -1) {
    dispatch_once(&qword_1009F7ED0, &stru_1009A4E98);
  }
  sub_10070851C(qword_1009F7EC8, a1 + 64);
  if (qword_1009F7ED0 != -1) {
    dispatch_once(&qword_1009F7ED0, &stru_1009A4E98);
  }
  sub_100708564((void *)qword_1009F7EC8, a1 + 72);
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009A4EB8);
  }
  sub_1006CF2B4((uint64_t)off_1009F7ED8, a1 + 168);
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A4ED8);
  }
  sub_10026B36C((uint64_t)off_1009F8068 + 64, a1 + 88);
  if (qword_1009FB240 != -1) {
    dispatch_once(&qword_1009FB240, &stru_1009A4EF8);
  }
  sub_1004C0E38(qword_1009FB238, a1 + 96);
  if (qword_1009F8248 != -1) {
    dispatch_once(&qword_1009F8248, &stru_1009A4F18);
  }
  sub_10065B134((uint64_t)off_1009F8240, a1 + 112);
  uint64_t v5 = *(void *)sub_100035F54();
  if ((*(unsigned int (**)(void))(v5 + 384))())
  {
    if (qword_1009F7EB0 != -1) {
      dispatch_once(&qword_1009F7EB0, &stru_1009A4F38);
    }
    sub_1000616EC((uint64_t)off_1009F7EA8 + 64, a1 + 128);
    if (qword_1009F8768 != -1) {
      dispatch_once(&qword_1009F8768, &stru_1009A4F58);
    }
    sub_10060C070(off_1009F8760, a1 + 136);
    if (qword_1009F8090 != -1) {
      dispatch_once(&qword_1009F8090, &stru_1009A4F78);
    }
    sub_1004D12B0(off_1009F8088, a1 + 144);
    if (qword_1009F7EF0 != -1) {
      dispatch_once(&qword_1009F7EF0, &stru_1009A4F98);
    }
    sub_100451228(off_1009F7EE8, a1 + 152);
    if (qword_1009FB250 != -1) {
      dispatch_once(&qword_1009FB250, &stru_1009A4FB8);
    }
    sub_1005CDD8C((void *)qword_1009FB248, a1 + 160);
  }
  uint64_t v6 = sub_10003FFD4();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 112))(v6, a1 + 312);
  if (*(unsigned char *)(a1 + 312))
  {
    unint64_t v7 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "In buddy setup. Registering for buddy state change notifications.", buf, 2u);
    }
    uint64_t v8 = sub_10003FFD4();
    sub_10030B0B0(v8 + 488, a1 + 120);
  }
  char v21 = 0;
  uint64_t v9 = sub_10003FFD4();
  (*(void (**)(uint64_t, char *))(*(void *)v9 + 104))(v9, &v21);
  if (v21) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 416))(a1, 1);
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A4ED8);
  }
  *(unsigned char *)(a1 + 179) = sub_1004E1EE0((uint64_t)off_1009F8068);
  uint64_t v10 = sub_100017768();
  *(unsigned char *)(a1 + 372) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 792))(v10, a1 + 376);
  int out_token = 0;
  int v11 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "registering for TCC change notifications", buf, 2u);
  }
  uint64_t v12 = sub_100019878();
  notify_register_dispatch("com.apple.tcc.access.changed", &out_token, *(dispatch_queue_t *)(v12 + 8), &stru_1009A4C60);
  uint64_t v13 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "AppRestorationEnable");
  (*(void (**)(uint64_t, unsigned char *, void **, uint64_t))(*(void *)v13 + 72))(v13, buf, __p, a1 + 425);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  if (v23 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v14 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 425)) {
      CFStringRef v15 = @"Enabled";
    }
    else {
      CFStringRef v15 = @"Disabled";
    }
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "AppRestorationEnable is %@ ", buf, 0xCu);
  }
  uint64_t v16 = +[NSMutableDictionary dictionary];
  uint64_t v17 = *(void **)(a1 + 320);
  *(void *)(a1 + 320) = v16;
}

void sub_1002EFCE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002EFD24(uint64_t a1)
{
  if (sub_10054003C())
  {
    uint64_t v2 = (void *)TCCAccessCopyBundleIdentifiersForService();
    uint64_t v3 = +[NSSet setWithArray:v2];
    uint64_t v4 = *(void **)(a1 + 336);
    *(void *)(a1 + 336) = v3;

    uint64_t v5 = (void *)TCCAccessCopyBundleIdentifiersDisabledForService();
    uint64_t v6 = +[NSSet setWithArray:v5];
    unint64_t v7 = *(void **)(a1 + 344);
    *(void *)(a1 + 344) = v6;

    uint64_t v8 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = *(void *)(a1 + 336);
      int v11 = 138543362;
      uint64_t v12 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "BundleId's allowed to use BT:%{public}@", (uint8_t *)&v11, 0xCu);
      uint64_t v8 = qword_100A19F00;
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = *(void *)(a1 + 344);
      int v11 = 138543362;
      uint64_t v12 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "BundleId's disallowed to use BT:%{public}@", (uint8_t *)&v11, 0xCu);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
  {
    sub_100754AA4();
  }
}

void sub_1002EFEC0(_Unwind_Exception *exception_object)
{
}

void sub_1002EFEDC(id a1, int a2)
{
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009A4FD8);
  }
  uint64_t v2 = off_1009F8780;

  sub_1002EFF30((uint64_t)v2);
}

void sub_1002EFF30(uint64_t a1)
{
  uint64_t v2 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "TCC changed, lets figure out if one of our sessions needs to be removed", buf, 2u);
  }
  *(void *)long long buf = 0;
  long long v37 = 0;
  uint32_t v38 = 0;
  id v31 = [*(id *)(a1 + 336) copy];
  id v30 = [*(id *)(a1 + 344) copy];
  sub_1002EFD24(a1);
  sub_1002F0334(a1, v31, v30);
  uint64_t v3 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void **)(a1 + 344);
    *(_DWORD *)uint64_t v40 = 138543362;
    uint64_t v41 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "bundle ID's not allowed to use bluetooth %{public}@", v40, 0xCu);
  }
  uint64_t v5 = *(void **)(a1 + 224);
  if (v5 != (void *)(a1 + 232))
  {
    int64_t v29 = &v38;
    do
    {
      uint64_t v6 = (void *)v5[5];
      if (!v6[15] && v6[12])
      {
        unint64_t v7 = v5[4];
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        id v8 = *(id *)(a1 + 344);
        id v9 = [v8 countByEnumeratingWithState:&v32 objects:v39 count:16];
        if (v9)
        {
          uint64_t v10 = *(void *)v33;
          while (2)
          {
            for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v33 != v10) {
                objc_enumerationMutation(v8);
              }
              uint64_t v12 = *(void **)(*((void *)&v32 + 1) + 8 * i);
              if (objc_msgSend(v12, "isEqualToString:", v6[11], v29, v30))
              {
                uint64_t v13 = qword_100A19F58;
                if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)uint64_t v40 = 138543362;
                  uint64_t v41 = v12;
                  _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Removing restorable bundle %{public}@ because user disabled TCC access to bluetooth", v40, 0xCu);
                }
                uint64_t v14 = v37;
                if (v37 >= v38)
                {
                  uint64_t v16 = ((uint64_t)v37 - *(void *)buf) >> 3;
                  if ((unint64_t)(v16 + 1) >> 61) {
                    abort();
                  }
                  unint64_t v17 = ((uint64_t)v38 - *(void *)buf) >> 2;
                  if (v17 <= v16 + 1) {
                    unint64_t v17 = v16 + 1;
                  }
                  if ((unint64_t)v38 - *(void *)buf >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v18 = v17;
                  }
                  if (v18) {
                    char v19 = (char *)sub_1000405F8((uint64_t)v29, v18);
                  }
                  else {
                    char v19 = 0;
                  }
                  char v20 = &v19[8 * v16];
                  *(void *)char v20 = v7;
                  CFStringRef v15 = (unint64_t *)(v20 + 8);
                  uint64_t v22 = *(unint64_t **)buf;
                  char v21 = v37;
                  if (v37 != *(unint64_t **)buf)
                  {
                    do
                    {
                      uint64_t v23 = *--v21;
                      *((void *)v20 - 1) = v23;
                      v20 -= 8;
                    }
                    while (v21 != v22);
                    char v21 = *(unint64_t **)buf;
                  }
                  *(void *)long long buf = v20;
                  long long v37 = v15;
                  uint32_t v38 = (unint64_t *)&v19[8 * v18];
                  if (v21) {
                    operator delete(v21);
                  }
                }
                else
                {
                  unint64_t *v37 = v7;
                  CFStringRef v15 = v14 + 1;
                }
                long long v37 = v15;
                [*(id *)(a1 + 296) removeObject:v6[11]];
                goto LABEL_37;
              }
            }
            id v9 = [v8 countByEnumeratingWithState:&v32 objects:v39 count:16];
            if (v9) {
              continue;
            }
            break;
          }
        }
LABEL_37:
      }
      uint64_t v24 = (void *)v5[1];
      if (v24)
      {
        do
        {
          __int16 v25 = v24;
          uint64_t v24 = (void *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          __int16 v25 = (void *)v5[2];
          BOOL v26 = *v25 == (void)v5;
          uint64_t v5 = v25;
        }
        while (!v26);
      }
      uint64_t v5 = v25;
    }
    while (v25 != (void *)(a1 + 232));
  }
  __int16 v27 = *(unint64_t **)buf;
  uint64_t v28 = v37;
  while (v27 != v28)
    sub_10002CE08(a1, *v27++, 1);

  if (*(void *)buf)
  {
    long long v37 = *(unint64_t **)buf;
    operator delete(*(void **)buf);
  }
}

void sub_1002F02D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1002F0334(uint64_t a1, void *a2, void *a3)
{
  id v28 = a2;
  id v29 = a3;
  id v25 = [*(id *)(a1 + 336) mutableCopy];
  id v24 = [*(id *)(a1 + 344) mutableCopy];
  if ([v28 count]) {
    [v25 minusSet:v28];
  }
  if ([v29 count]) {
    [v24 minusSet:v29];
  }
  id v5 = [v25 mutableCopy];
  [v5 unionSet:v24];
  uint64_t v6 = [v5 anyObject];

  if (v6)
  {
    unint64_t v7 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "BluetoothTCC changed", buf, 2u);
    }
    id v8 = v5;
    if ([v25 count])
    {
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      obuint64_t j = v25;
      id v9 = [obj countByEnumeratingWithState:&v35 objects:v43 count:16];
      if (v9)
      {
        uint64_t v10 = *(void *)v36;
        int v11 = 0xFFFF;
        do
        {
          uint64_t v12 = 0;
          do
          {
            if (*(void *)v36 != v10) {
              objc_enumerationMutation(obj);
            }
            uint64_t v13 = *(void **)(*((void *)&v35 + 1) + 8 * (void)v12);
            uint64_t v14 = qword_100A19F00;
            if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 138543362;
              *(void *)&uint8_t buf[4] = v13;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "App %{public}@ bluetooth authorization changed", buf, 0xCu);
            }
            int v15 = [v29 containsObject:v13];
            if (v15) {
              int v11 = 1;
            }
            uint64_t v16 = qword_100A19F00;
            if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 138544130;
              *(void *)&uint8_t buf[4] = v13;
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&unsigned char buf[14] = v15;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v11;
              *(_WORD *)&uint8_t buf[24] = 1024;
              *(_DWORD *)&buf[26] = 0;
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Push AWD stats for %{public}@: triggerLoc: %u, prevPermission: %u, currPermission: %u", buf, 0x1Eu);
            }
            long long v41 = 0u;
            long long v42 = 0u;
            memset(buf, 0, sizeof(buf));
            id v5 = v8;
            sub_10004191C(&__p, (char *)[v13 UTF8String]);
            sub_10030B3C0(buf, &__p, 0, v15, v11, 0, 0, 0, 0xFFFF);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (qword_1009FB260 != -1) {
              dispatch_once(&qword_1009FB260, &stru_1009A4FF8);
            }
            sub_1000504D8();
            if ((char)buf[31] < 0) {
              operator delete(*(void **)&buf[8]);
            }
            uint64_t v12 = (char *)v12 + 1;
          }
          while (v9 != v12);
          id v9 = [obj countByEnumeratingWithState:&v35 objects:v43 count:16];
        }
        while (v9);
      }
      else
      {
        int v11 = 0xFFFF;
      }
    }
    else
    {
      int v11 = 0xFFFF;
    }
    if ([v24 count])
    {
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      id obja = v24;
      id v17 = [obja countByEnumeratingWithState:&v30 objects:v39 count:16];
      if (v17)
      {
        uint64_t v18 = *(void *)v31;
        do
        {
          char v19 = 0;
          do
          {
            if (*(void *)v31 != v18) {
              objc_enumerationMutation(obja);
            }
            char v20 = *(void **)(*((void *)&v30 + 1) + 8 * (void)v19);
            char v21 = qword_100A19F00;
            if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 138543362;
              *(void *)&uint8_t buf[4] = v20;
              _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "App %{public}@ bluetooth authorization changed", buf, 0xCu);
            }
            int v22 = [v28 containsObject:v20];
            if (v22) {
              int v11 = 0;
            }
            uint64_t v23 = qword_100A19F00;
            if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 138544130;
              *(void *)&uint8_t buf[4] = v20;
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&unsigned char buf[14] = v22;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v11;
              *(_WORD *)&uint8_t buf[24] = 1024;
              *(_DWORD *)&buf[26] = 1;
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Push AWD stats for %{public}@: triggerLoc: %u, prevPermission: %u, currPermission: %u", buf, 0x1Eu);
            }
            long long v41 = 0u;
            long long v42 = 0u;
            memset(buf, 0, sizeof(buf));
            id v5 = v8;
            sub_10004191C(&__p, (char *)[v20 UTF8String]);
            sub_10030B3C0(buf, &__p, 0, v22, v11, 1, 0, 0, 0xFFFF);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (qword_1009FB260 != -1) {
              dispatch_once(&qword_1009FB260, &stru_1009A4FF8);
            }
            sub_1000504D8();
            if ((char)buf[31] < 0) {
              operator delete(*(void **)&buf[8]);
            }
            char v19 = (char *)v19 + 1;
          }
          while (v17 != v19);
          id v17 = [obja countByEnumeratingWithState:&v30 objects:v39 count:16];
        }
        while (v17);
      }
    }
  }
}

void sub_1002F0910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1002F09F8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([*(id *)(a1 + 352) containsObject:v5])
  {
    unint64_t v7 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string __p = 138543362;
      *(void *)&__p[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Remove %{public}@ from tccPendingBundleList", __p, 0xCu);
    }
    [*(id *)(a1 + 352) removeObject:v5];
  }
  id v8 = *(void **)(a1 + 224);
  if (v8 != (void *)(a1 + 232))
  {
    do
    {
      uint64_t v9 = v8[5];
      sub_10003AE4C(v8[4], (uint64_t)__p);
      if (v22 >= 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = *(unsigned char **)__p;
      }
      int v11 = +[NSString stringWithUTF8String:v10];
      if (v22 < 0) {
        operator delete(*(void **)__p);
      }
      if ([v11 isEqualToString:v5]) {
        *(unsigned char *)(v9 + 39) = 1;
      }

      uint64_t v12 = (void *)v8[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)v8[2];
          BOOL v14 = *v13 == (void)v8;
          id v8 = v13;
        }
        while (!v14);
      }
      id v8 = v13;
    }
    while (v13 != (void *)(a1 + 232));
  }
  id v17 = *(uint64_t ***)(a1 + 248);
  int v15 = (uint64_t **)(a1 + 248);
  uint64_t v16 = (uint64_t)v17;
  if (v17 != v15 + 1)
  {
    while (![*(id *)(v16 + 32) isEqualToString:v6])
    {
      uint64_t v18 = *(uint64_t **)(v16 + 8);
      if (v18)
      {
        do
        {
          char v19 = (uint64_t **)v18;
          uint64_t v18 = (uint64_t *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          char v19 = *(uint64_t ***)(v16 + 16);
          BOOL v14 = *v19 == (uint64_t *)v16;
          uint64_t v16 = (uint64_t)v19;
        }
        while (!v14);
      }
      uint64_t v16 = (uint64_t)v19;
      if (v19 == v15 + 1) {
        goto LABEL_31;
      }
    }
    char v20 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string __p = 138543362;
      *(void *)&__p[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Erasing %{public}@ from fBundleCheckinMap", __p, 0xCu);
    }
    sub_10030C604(v15, v16);
  }
LABEL_31:
}

void sub_1002F0C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

void sub_1002F0CA4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_100019878();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_1002F0D70;
  v6[3] = &unk_100998A38;
  uint64_t v8 = a1;
  id v5 = v3;
  id v7 = v5;
  sub_100013018(v4, v6);
}

void sub_1002F0D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1002F0D70(uint64_t a1)
{
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  uint64_t v34 = *(void *)(a1 + 40);
  obuint64_t j = [*(id *)(a1 + 32) elements];
  char v1 = 0;
  char v2 = 0;
  id v3 = [obj countByEnumeratingWithState:&v42 objects:v49 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v43;
    do
    {
      for (uint64_t i = 0; i != v3; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v43 != v4) {
          objc_enumerationMutation(obj);
        }
        id v6 = *(void **)(*((void *)&v42 + 1) + 8 * i);
        uint64_t v7 = [v6 identifier];
        unsigned __int8 v8 = [(id)v7 isEqualToString:@"com.apple.springboard.home-screen"];

        uint64_t v9 = [v6 identifier];
        LOBYTE(v7) = [v9 isEqualToString:@"com.apple.lock-screen"];

        v2 |= v8;
        v1 |= v7;
      }
      id v3 = [obj countByEnumeratingWithState:&v42 objects:v49 count:16];
    }
    while (v3);
  }

  uint64_t v10 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v2 & 1;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v1 & 1;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "springboardHomeScreenIsActive: %d\t deviceScreenIsLocked: %d", buf, 0xEu);
  }
  if (!(v1 & 1 | ((v2 & 1) == 0)))
  {
    int v11 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "User is in SpringBoard and device is unlocked. Check TCC for backgrounded sessions", buf, 2u);
    }
    uint64_t v12 = *(void **)(v34 + 360);
    if (v12)
    {
      uint64_t v13 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Deregistering FrontBoard services", buf, 2u);
        uint64_t v12 = *(void **)(v34 + 360);
      }
      [v12 invalidate];
      BOOL v14 = *(void **)(v34 + 360);
      *(void *)(v34 + 360) = 0;
    }
    if ([*(id *)(v34 + 352) count])
    {
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      id obja = *(id *)(v34 + 352);
      id v15 = [obja countByEnumeratingWithState:&v38 objects:v48 count:16];
      if (v15)
      {
        uint64_t v33 = *(void *)v39;
        id v17 = (void *)(v34 + 232);
        *(void *)&long long v16 = 138543362;
        long long v32 = v16;
        do
        {
          id v35 = v15;
          for (uint64_t j = 0; j != v35; uint64_t j = (char *)j + 1)
          {
            if (*(void *)v39 != v33) {
              objc_enumerationMutation(obja);
            }
            char v19 = *(void **)(v34 + 224);
            if (v19 != v17)
            {
              char v20 = *(void **)(*((void *)&v38 + 1) + 8 * (void)j);
              do
              {
                uint64_t v21 = v19[5];
                sub_10003AE4C(v19[4], (uint64_t)buf);
                if (v47 >= 0) {
                  char v22 = buf;
                }
                else {
                  char v22 = *(unsigned char **)buf;
                }
                uint64_t v23 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v22, v32);
                if (v47 < 0) {
                  operator delete(*(void **)buf);
                }
                id v24 = [v20 isEqualToString:v23];
                if (v24 && !*(unsigned char *)(v21 + 38) && *(unsigned char *)(v21 + 24))
                {
                  uint64_t v28 = sub_100055BEC((uint64_t)v24, v21) ^ 1;
                  uint64_t v29 = *(void *)(v21 + 120);
                  if (v29)
                  {
                    long long v31 = qword_100A19F00;
                    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)long long buf = v32;
                      *(void *)&uint8_t buf[4] = v23;
                      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Complete TCC for %{public}@", buf, 0xCu);
                      uint64_t v29 = *(void *)(v21 + 120);
                    }
                    *(unsigned char *)(v21 + 38) = 1;
                    (*(void (**)(uint64_t, uint64_t))(*(void *)v29 + 264))(v29, v28);

                    break;
                  }
                  long long v30 = qword_100A19F00;
                  if (*(void *)(v21 + 96))
                  {
                    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)long long buf = v32;
                      *(void *)&uint8_t buf[4] = v23;
                      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Launch application %{public}@ for TCC", buf, 0xCu);
                    }
                    sub_10042EF2C((void *)v21, v28);
                  }
                  else if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)long long buf = v32;
                    *(void *)&uint8_t buf[4] = v23;
                    _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "Wait for %{public}@ to check-in again", buf, 0xCu);
                  }
                }

                id v25 = (void *)v19[1];
                if (v25)
                {
                  do
                  {
                    BOOL v26 = v25;
                    id v25 = (void *)*v25;
                  }
                  while (v25);
                }
                else
                {
                  do
                  {
                    BOOL v26 = (void *)v19[2];
                    BOOL v27 = *v26 == (void)v19;
                    char v19 = v26;
                  }
                  while (!v27);
                }
                char v19 = v26;
              }
              while (v26 != v17);
            }
          }
          id v15 = [obja countByEnumeratingWithState:&v38 objects:v48 count:16];
        }
        while (v15);
      }
    }
  }
}

void sub_1002F12C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002F133C(uint64_t a1, unint64_t a2, _DWORD *a3, unsigned char *a4)
{
  *a3 = 0;
  uint64_t v4 = *(void **)(a1 + 232);
  if (v4)
  {
    unsigned __int8 v8 = (void *)(a1 + 232);
    do
    {
      unint64_t v9 = v4[4];
      BOOL v10 = v9 >= a2;
      if (v9 >= a2) {
        int v11 = v4;
      }
      else {
        int v11 = v4 + 1;
      }
      if (v10) {
        unsigned __int8 v8 = v4;
      }
      uint64_t v4 = (void *)*v11;
    }
    while (*v11);
    if (v8 != (void *)(a1 + 232) && v8[4] <= a2)
    {
      uint64_t v12 = (unsigned char *)v8[5];
      *a4 = 0;
      if ((*(unsigned int (**)(unsigned char *))(*(void *)v12 + 16))(v12)
        || !sub_1000536B4((uint64_t)v12))
      {
        if (!v12[36]) {
          goto LABEL_31;
        }
        if (qword_1009F8748 != -1) {
          dispatch_once(&qword_1009F8748, &stru_1009A4DF8);
        }
        int v13 = sub_100028CB4((uint64_t)off_1009F8740);
        if (v13 == 1)
        {
          *a4 = *(unsigned char *)(a1 + 179);
        }
        else
        {
LABEL_31:
          if (v12[37] || !*(unsigned char *)(a1 + 179))
          {
            if (qword_1009F8748 != -1) {
              dispatch_once(&qword_1009F8748, &stru_1009A4DF8);
            }
            int v13 = sub_100028CB4((uint64_t)off_1009F8740);
          }
          else
          {
            int v13 = 0;
          }
        }
      }
      else
      {
        int v13 = sub_10043B290((uint64_t)v12);
        if (v13) {
          int v13 = *(unsigned __int8 *)(a1 + 179) ^ 1;
        }
      }
      *a3 = v13;
    }
  }
  return 0;
}

uint64_t sub_1002F14AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    if (a2) {
      CFStringRef v7 = *(const __CFString **)(a2 + 88);
    }
    else {
      CFStringRef v7 = @"NONE";
    }
    int v15 = 138412546;
    CFStringRef v16 = v7;
    __int16 v17 = 1024;
    int v18 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "AppManager::setAppSessionPowerState bundle:%@ power:%d", (uint8_t *)&v15, 0x12u);
  }
  unsigned __int8 v8 = *(void **)(a1 + 224);
  if (v8 != (void *)(a1 + 232))
  {
    while (v8[5] != a2)
    {
      unint64_t v9 = (void *)v8[1];
      if (v9)
      {
        do
        {
          BOOL v10 = v9;
          unint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          BOOL v10 = (void *)v8[2];
          BOOL v11 = *v10 == (void)v8;
          unsigned __int8 v8 = v10;
        }
        while (!v11);
      }
      unsigned __int8 v8 = v10;
      if (v10 == (void *)(a1 + 232)) {
        return 3;
      }
    }
    uint64_t v12 = v8[4];
    if (v12)
    {
      uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      if (v13 == 3)
      {
        if (!a3) {
          uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 72))(a2, v12);
        }
        if (*(void *)(a2 + 216))
        {
          sub_10002FAB0(v13, a2, v12, 5, 1);
          (***(void (****)(void))(a2 + 216))();
          return 0;
        }
      }
      else
      {
        if (!a3)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 72))(a2, v12);
          if (qword_1009F8788 != -1) {
            dispatch_once(&qword_1009F8788, &stru_1009A4FD8);
          }
          sub_1002F1770((uint64_t)off_1009F8780);
        }
        if (*(void *)(a2 + 120))
        {
          sub_10002FAB0(v13, a2, v12, 5, 1);
          (*(void (**)(void, void, uint64_t))(**(void **)(a2 + 120) + 200))(*(void *)(a2 + 120), 0, a3);
          return 0;
        }
      }
    }
  }
  return 3;
}

void sub_1002F1770(uint64_t a1)
{
  char v1 = +[NSMutableSet set];
  if (*(unsigned char *)(a1 + 180))
  {
    char v2 = *(void **)(a1 + 224);
    if (v2 != (void *)(a1 + 232))
    {
      while (1)
      {
        unint64_t v80 = v2;
        int v3 = (*(uint64_t (**)(void))(*(void *)v2[5] + 16))(v2[5]);
        uint64_t v4 = (id *)v80[5];
        if (!v3) {
          break;
        }
        if ((*((unsigned int (**)(id *))*v4 + 2))(v4) == 1)
        {
          uint64_t v5 = v80[5];
          long long v112 = 0u;
          long long v113 = 0u;
          long long v114 = 0u;
          long long v115 = 0u;
          uint64_t v82 = v5;
          id v6 = *(id *)(v5 + 216);
          id v7 = [v6 countByEnumeratingWithState:&v112 objects:v136 count:16];
          if (v7)
          {
            uint64_t v81 = *(void *)v113;
            do
            {
              for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
              {
                if (*(void *)v113 != v81) {
                  objc_enumerationMutation(v6);
                }
                unint64_t v9 = [*(id *)(v82 + 216) objectForKeyedSubscript:*(void *)(*((void *)&v112 + 1) + 8 * i)];
                long long v110 = 0u;
                long long v111 = 0u;
                long long v108 = 0u;
                long long v109 = 0u;
                id v10 = v9;
                id v11 = [v10 countByEnumeratingWithState:&v108 objects:v135 count:16];
                if (v11)
                {
                  uint64_t v12 = *(void *)v109;
                  do
                  {
                    for (uint64_t j = 0; j != v11; uint64_t j = (char *)j + 1)
                    {
                      if (*(void *)v109 != v12) {
                        objc_enumerationMutation(v10);
                      }
                      uint64_t v14 = *(void *)(*((void *)&v108 + 1) + 8 * (void)j);
                      int v15 = [v10 objectForKey:v14];
                      [v15 timeIntervalSinceNow];
                      if (v16 >= -30.0) {
                        [v1 addObject:v14];
                      }
                    }
                    id v11 = [v10 countByEnumeratingWithState:&v108 objects:v135 count:16];
                  }
                  while (v11);
                }
              }
              id v7 = [v6 countByEnumeratingWithState:&v112 objects:v136 count:16];
            }
            while (v7);
          }
LABEL_32:
        }
        id v24 = v80;
        id v25 = (void *)v80[1];
        if (v25)
        {
          do
          {
            BOOL v26 = v25;
            id v25 = (void *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            BOOL v26 = (void *)v24[2];
            BOOL v27 = *v26 == (void)v24;
            id v24 = v26;
          }
          while (!v27);
        }
        char v2 = v26;
        if (v26 == (void *)(a1 + 232)) {
          goto LABEL_39;
        }
      }
      id v17 = v4[31];
      long long v116 = 0u;
      long long v117 = 0u;
      long long v118 = 0u;
      long long v119 = 0u;
      id v6 = v17;
      id v18 = [v6 countByEnumeratingWithState:&v116 objects:v137 count:16];
      if (v18)
      {
        uint64_t v19 = *(void *)v117;
        do
        {
          for (k = 0; k != v18; k = (char *)k + 1)
          {
            if (*(void *)v117 != v19) {
              objc_enumerationMutation(v6);
            }
            uint64_t v21 = *(void *)(*((void *)&v116 + 1) + 8 * (void)k);
            char v22 = [v6 objectForKeyedSubscript:v21];
            unsigned __int8 v23 = [v22 opportunistic];

            if ((v23 & 1) == 0) {
              [v1 addObject:v21];
            }
          }
          id v18 = [v6 countByEnumeratingWithState:&v116 objects:v137 count:16];
        }
        while (v18);
      }

      goto LABEL_32;
    }
LABEL_39:
    if (qword_1009FB230 != -1) {
      dispatch_once(&qword_1009FB230, &stru_1009A4E78);
    }
    uint64_t v28 = sub_100426930(qword_1009FB228);
    [v1 addObjectsFromArray:v28];

    long long v106 = 0u;
    long long v107 = 0u;
    long long v104 = 0u;
    long long v105 = 0u;
    if (qword_1009FB078 != -1) {
      dispatch_once(&qword_1009FB078, &stru_1009A50D8);
    }
    uint64_t v29 = sub_100402A58(qword_1009FB070);
    id v30 = [v29 countByEnumeratingWithState:&v104 objects:v134 count:16];
    if (v30)
    {
      uint64_t v31 = *(void *)v105;
      do
      {
        long long v32 = 0;
        do
        {
          if (*(void *)v105 != v31) {
            objc_enumerationMutation(v29);
          }
          uint64_t v33 = *(void **)(*((void *)&v104 + 1) + 8 * (void)v32);
          uint64_t v103 = 0;
          if (qword_1009F7EC0 != -1) {
            dispatch_once(&qword_1009F7EC0, &stru_1009A4E38);
          }
          uint64_t v34 = off_1009F7EB8;
          sub_1000305AC(buf, v33);
          if (sub_1006856B8((uint64_t)v34, buf, &v103))
          {
            LOBYTE(v90) = 0;
            sub_10001B8E0(&v90);
            if (sub_100225F4C(v103))
            {
              id v35 = qword_100A19F00;
              if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)long long buf = 138543362;
                v122 = v33;
                _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "Skipping LE L2CAP device \"%{public}@\"", buf, 0xCu);
              }
              [v1 addObject:v33];
            }
            sub_10001B8AC(&v90);
          }
          long long v32 = (char *)v32 + 1;
        }
        while (v30 != v32);
        id v30 = [v29 countByEnumeratingWithState:&v104 objects:v134 count:16];
      }
      while (v30);
    }

    long long v101 = 0u;
    long long v102 = 0u;
    long long v99 = 0u;
    long long v100 = 0u;
    if (qword_1009FB180 != -1) {
      dispatch_once(&qword_1009FB180, &stru_1009A50F8);
    }
    long long v36 = sub_1002BCF7C(qword_1009FB178);
    id v37 = [v36 countByEnumeratingWithState:&v99 objects:v133 count:16];
    if (v37)
    {
      uint64_t v38 = *(void *)v100;
      do
      {
        long long v39 = 0;
        do
        {
          if (*(void *)v100 != v38) {
            objc_enumerationMutation(v36);
          }
          long long v40 = *(void **)(*((void *)&v99 + 1) + 8 * (void)v39);
          uint64_t v103 = 0;
          if (qword_1009F7EC0 != -1) {
            dispatch_once(&qword_1009F7EC0, &stru_1009A4E38);
          }
          long long v41 = off_1009F7EB8;
          sub_1000305AC(buf, v40);
          if (sub_1006856B8((uint64_t)v41, buf, &v103))
          {
            LOBYTE(v90) = 0;
            sub_10001B8E0(&v90);
            if (sub_100225F4C(v103))
            {
              BOOL v42 = sub_1000E81EC(v103);
              long long v43 = qword_100A19F00;
              BOOL v44 = os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO);
              if (v42)
              {
                if (v44)
                {
                  *(_DWORD *)long long buf = 138543362;
                  v122 = v40;
                  _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "disconnecting device device \"%{public}@\" since its scalable pipes are idle", buf, 0xCu);
                }
              }
              else
              {
                if (v44)
                {
                  *(_DWORD *)long long buf = 138543362;
                  v122 = v40;
                  _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "Skipping scalable pipe device \"%{public}@\" since it is still active", buf, 0xCu);
                }
                [v1 addObject:v40];
              }
            }
            sub_10001B8AC(&v90);
          }
          long long v39 = (char *)v39 + 1;
        }
        while (v37 != v39);
        id v37 = [v36 countByEnumeratingWithState:&v99 objects:v133 count:16];
      }
      while (v37);
    }

    if (qword_1009FB240 != -1) {
      dispatch_once(&qword_1009FB240, &stru_1009A4EF8);
    }
    long long v45 = sub_1004C09C4(qword_1009FB238);
    [v1 addObjectsFromArray:v45];

    long long v97 = 0u;
    long long v98 = 0u;
    long long v95 = 0u;
    long long v96 = 0u;
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009A4E38);
    }
    int v46 = sub_100685FB4((uint64_t)off_1009F7EB8);
    id v47 = [v46 countByEnumeratingWithState:&v95 objects:v132 count:16];
    if (v47)
    {
      uint64_t v48 = *(void *)v96;
      do
      {
        long long v49 = 0;
        do
        {
          if (*(void *)v96 != v48) {
            objc_enumerationMutation(v46);
          }
          uint64_t v50 = *(void *)(*((void *)&v95 + 1) + 8 * (void)v49);
          if (([v1 containsObject:v50] & 1) == 0)
          {
            if (qword_1009F7EC0 != -1) {
              dispatch_once(&qword_1009F7EC0, &stru_1009A4E38);
            }
            int v51 = off_1009F7EB8;
            sub_1000305AC(buf, v50);
            sub_100683CFC((uint64_t)v51, buf, 0);
          }
          long long v49 = (char *)v49 + 1;
        }
        while (v47 != v49);
        id v47 = [v46 countByEnumeratingWithState:&v95 objects:v132 count:16];
      }
      while (v47);
    }

    long long v93 = 0u;
    long long v94 = 0u;
    long long v91 = 0u;
    long long v92 = 0u;
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009A4E38);
    }
    int v52 = sub_10004034C((uint64_t)off_1009F7EB8);
    id v53 = [v52 countByEnumeratingWithState:&v91 objects:v131 count:16];
    if (v53)
    {
      uint64_t v54 = *(void *)v92;
      unsigned int v83 = v52;
      do
      {
        size_t v55 = 0;
        do
        {
          if (*(void *)v92 != v54) {
            objc_enumerationMutation(v52);
          }
          int v56 = *(void **)(*((void *)&v91 + 1) + 8 * (void)v55);
          if (([v1 containsObject:v56] & 1) == 0)
          {
            if (qword_1009F7EC0 != -1) {
              dispatch_once(&qword_1009F7EC0, &stru_1009A4E38);
            }
            unint64_t v57 = off_1009F7EB8;
            sub_1000305AC(buf, v56);
            if (sub_100030818((uint64_t)v57, buf) == 1)
            {
              int v90 = 0;
              sub_10010BB74(&v90, 0);
              if (qword_1009F7EE0 != -1) {
                dispatch_once(&qword_1009F7EE0, &stru_1009A4EB8);
              }
              int v58 = sub_1006BBA88((uint64_t)off_1009F7ED8, v56) + (unsigned __int16)word_1009FB220;
              int v59 = qword_100A19F00;
              if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
              {
                int v60 = v90;
                if (qword_1009F7EE0 != -1) {
                  dispatch_once(&qword_1009F7EE0, &stru_1009A4EB8);
                }
                int v61 = sub_1006BBA88((uint64_t)off_1009F7ED8, v56);
                *(_DWORD *)long long buf = 138544386;
                v122 = v56;
                __int16 v123 = 1024;
                int v124 = v58;
                __int16 v125 = 1024;
                int v126 = v60;
                __int16 v127 = 1024;
                int v128 = v61;
                __int16 v129 = 1024;
                int v130 = (unsigned __int16)word_1009FB220;
                _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "Device \"%{public}@\" is unused, graceTime=%d curSecs=%d lastConnected=%d fConnectionGracePeriod=%d", buf, 0x24u);
              }
              int v62 = v58 - v90;
              if (v58 >= v90)
              {
                uint64_t v66 = qword_100A19F00;
                int v52 = v83;
                if (!os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO)) {
                  goto LABEL_134;
                }
                *(_DWORD *)long long buf = 138543618;
                v122 = v56;
                __int16 v123 = 1024;
                int v124 = v62;
                int v67 = v66;
                long long v68 = "Device \"%{public}@\" is unused, but is within the grace period for %d more seconds - skipping";
                uint32_t v69 = 18;
LABEL_130:
                _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_INFO, v68, buf, v69);
                goto LABEL_134;
              }
              uint64_t v63 = sub_100035F54();
              int v52 = v83;
              if ((*(unsigned int (**)(uint64_t))(*(void *)v63 + 344))(v63))
              {
                uint64_t v103 = 0;
                if (qword_1009F7EC0 != -1) {
                  dispatch_once(&qword_1009F7EC0, &stru_1009A4E38);
                }
                char v64 = off_1009F7EB8;
                sub_1000305AC(buf, v56);
                if (sub_1006856B8((uint64_t)v64, buf, &v103))
                {
                  char v89 = 0;
                  sub_10001B8E0(&v89);
                  if (sub_1000EAA20(v103))
                  {
                    if (qword_1009F7ED0 != -1) {
                      dispatch_once(&qword_1009F7ED0, &stru_1009A4E98);
                    }
                    if (sub_100008DC4(qword_1009F7EC8, v56))
                    {
                      char v65 = qword_100A19F00;
                      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO))
                      {
                        *(_DWORD *)long long buf = 138543362;
                        v122 = v56;
                        _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_INFO, "Device \"%{public}@\" is unused, but is in the middle of pipe negotiaion - skipping", buf, 0xCu);
                      }
                      sub_10001B8AC(&v89);
                      goto LABEL_134;
                    }
                  }
                  sub_10001B8AC(&v89);
                }
              }
            }
            if (qword_1009F7ED0 != -1) {
              dispatch_once(&qword_1009F7ED0, &stru_1009A4E98);
            }
            if (sub_10070C7E4(qword_1009F7EC8, v56))
            {
              uint64_t v70 = qword_100A19F00;
              if (!os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO)) {
                goto LABEL_134;
              }
              *(_DWORD *)long long buf = 138543362;
              v122 = v56;
              int v67 = v70;
              long long v68 = "Device \"%{public}@\" is unused, but is in the middle of pairing - skipping";
              uint32_t v69 = 12;
              goto LABEL_130;
            }
            if (qword_1009F7EC0 != -1) {
              dispatch_once(&qword_1009F7EC0, &stru_1009A4E38);
            }
            long long v71 = off_1009F7EB8;
            sub_1000305AC(buf, v56);
            sub_100683CFC((uint64_t)v71, buf, 1u);
          }
LABEL_134:
          size_t v55 = (char *)v55 + 1;
        }
        while (v53 != v55);
        id v53 = [v52 countByEnumeratingWithState:&v91 objects:v131 count:16];
      }
      while (v53);
    }

    long long v87 = 0u;
    long long v88 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    id v72 = *(id *)(a1 + 328);
    id v73 = [v72 countByEnumeratingWithState:&v85 objects:v120 count:16];
    if (v73)
    {
      uint64_t v74 = *(void *)v86;
      do
      {
        uint64_t v75 = 0;
        do
        {
          if (*(void *)v86 != v74) {
            objc_enumerationMutation(v72);
          }
          int v76 = *(void **)(*((void *)&v85 + 1) + 8 * (void)v75);
          if (([v1 containsObject:v76] & 1) == 0)
          {
            if (qword_1009F7EE0 != -1) {
              dispatch_once(&qword_1009F7EE0, &stru_1009A4EB8);
            }
            uint64_t v77 = sub_100030DCC((uint64_t)off_1009F7ED8, v76, 0);
            if (qword_1009F8090 != -1) {
              dispatch_once(&qword_1009F8090, &stru_1009A4F78);
            }
            v84[0] = _NSConcreteStackBlock;
            v84[1] = 3221225472;
            v84[2] = sub_100304664;
            v84[3] = &unk_100998A38;
            v84[4] = v76;
            v84[5] = v77;
            sub_1004D3990((uint64_t)off_1009F8088, v84);
          }
          uint64_t v75 = (char *)v75 + 1;
        }
        while (v73 != v75);
        id v73 = [v72 countByEnumeratingWithState:&v85 objects:v120 count:16];
      }
      while (v73);
    }
  }
  else
  {
    int v78 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "Stack is shutting down, unused devices will be cleaned up", buf, 2u);
    }
  }
}

void sub_1002F2678(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1002F27F4(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 232);
  char v2 = (void *)(a1 + 232);
  int v3 = v4;
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v2;
  do
  {
    unint64_t v6 = v3[4];
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      unsigned __int8 v8 = v3;
    }
    else {
      unsigned __int8 v8 = v3 + 1;
    }
    if (v7) {
      uint64_t v5 = v3;
    }
    int v3 = (void *)*v8;
  }
  while (*v8);
  return v5 != v2 && v5[4] <= a2 && (uint64_t v9 = v5[5]) != 0 && *(unsigned char *)(v9 + 73) != 0;
}

id sub_1002F2850(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 232);
  char v2 = (void *)(a1 + 232);
  int v3 = v4;
  if (!v4) {
    goto LABEL_14;
  }
  uint64_t v5 = v2;
  do
  {
    unint64_t v6 = v3[4];
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      unsigned __int8 v8 = v3;
    }
    else {
      unsigned __int8 v8 = v3 + 1;
    }
    if (v7) {
      uint64_t v5 = v3;
    }
    int v3 = (void *)*v8;
  }
  while (*v8);
  if (v5 != v2 && v5[4] <= a2 && (uint64_t v9 = v5[5]) != 0) {
    id v10 = *(id *)(v9 + 192);
  }
  else {
LABEL_14:
  }
    id v10 = 0;

  return v10;
}

id sub_1002F28C8(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 232);
  char v2 = (void *)(a1 + 232);
  int v3 = v4;
  if (!v4) {
    goto LABEL_14;
  }
  uint64_t v5 = v2;
  do
  {
    unint64_t v6 = v3[4];
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      unsigned __int8 v8 = v3;
    }
    else {
      unsigned __int8 v8 = v3 + 1;
    }
    if (v7) {
      uint64_t v5 = v3;
    }
    int v3 = (void *)*v8;
  }
  while (*v8);
  if (v5 != v2 && v5[4] <= a2 && (uint64_t v9 = v5[5]) != 0) {
    id v10 = *(id *)(v9 + 200);
  }
  else {
LABEL_14:
  }
    id v10 = 0;

  return v10;
}

id sub_1002F2940(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 232);
  char v2 = (void *)(a1 + 232);
  int v3 = v4;
  if (!v4) {
    goto LABEL_14;
  }
  uint64_t v5 = v2;
  do
  {
    unint64_t v6 = v3[4];
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      unsigned __int8 v8 = v3;
    }
    else {
      unsigned __int8 v8 = v3 + 1;
    }
    if (v7) {
      uint64_t v5 = v3;
    }
    int v3 = (void *)*v8;
  }
  while (*v8);
  if (v5 != v2 && v5[4] <= a2 && (uint64_t v9 = v5[5]) != 0) {
    id v10 = *(id *)(v9 + 88);
  }
  else {
LABEL_14:
  }
    id v10 = 0;

  return v10;
}

BOOL sub_1002F29B8(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 232);
  char v2 = (void *)(a1 + 232);
  int v3 = v4;
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = v2;
  do
  {
    unint64_t v6 = v3[4];
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      unsigned __int8 v8 = v3;
    }
    else {
      unsigned __int8 v8 = v3 + 1;
    }
    if (v7) {
      uint64_t v5 = v3;
    }
    int v3 = (void *)*v8;
  }
  while (*v8);
  if (v5 == v2 || v5[4] > a2) {
LABEL_12:
  }
    uint64_t v5 = v2;
  return v5 != v2;
}

void sub_1002F2A04(uint64_t a1, unint64_t a2)
{
  int v14 = 0;
  sub_1002F133C(a1, a2, &v14, &v13);
  if (v14)
  {
    uint64_t v4 = *(void **)(a1 + 232);
    if (v4)
    {
      uint64_t v5 = a1 + 232;
      do
      {
        unint64_t v6 = v4[4];
        BOOL v7 = v6 >= a2;
        if (v6 >= a2) {
          unsigned __int8 v8 = v4;
        }
        else {
          unsigned __int8 v8 = v4 + 1;
        }
        if (v7) {
          uint64_t v5 = (uint64_t)v4;
        }
        uint64_t v4 = (void *)*v8;
      }
      while (*v8);
      if (v5 != a1 + 232 && *(void *)(v5 + 32) <= a2)
      {
        uint64_t v9 = *(void *)(v5 + 40);
        uint64_t v10 = sub_100019878();
        v12[0] = _NSConcreteStackBlock;
        v12[1] = 3221225472;
        void v12[2] = sub_1002F2B6C;
        v12[3] = &unk_1009A12D0;
        v12[4] = a1;
        void v12[5] = a2;
        v12[6] = v9;
        sub_100013018(v10, v12);
      }
    }
  }
  else
  {
    id v11 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 67109120;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Not sending enqueued messages. powerState :%d", (uint8_t *)&buf, 8u);
    }
  }
}

void sub_1002F2B6C(void *a1)
{
  uint64_t v1 = a1[4];
  uint64_t v4 = *(void **)(v1 + 232);
  char v2 = (void *)(v1 + 232);
  int v3 = v4;
  if (!v4) {
    goto LABEL_12;
  }
  unint64_t v5 = a1[5];
  unint64_t v6 = v2;
  do
  {
    unint64_t v7 = v3[4];
    BOOL v8 = v7 >= v5;
    if (v7 >= v5) {
      uint64_t v9 = v3;
    }
    else {
      uint64_t v9 = v3 + 1;
    }
    if (v8) {
      unint64_t v6 = v3;
    }
    int v3 = (void *)*v9;
  }
  while (*v9);
  if (v6 != v2 && v5 >= v6[4])
  {
    id v11 = (void *)a1[6];
    sub_10042EB6C(v11);
  }
  else
  {
LABEL_12:
    uint64_t v10 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      v12[0] = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Dropping enqueued messages as session has been terminated", (uint8_t *)v12, 2u);
    }
  }
}

void sub_1002F2C3C(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  unint64_t v6 = [*(id *)(a1 + 304) objectForKey:v5];

  unint64_t v7 = qword_100A19F58;
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 138543362;
      v22[0] = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Death Timer Already Exists For <%{public}@> Skipping", buf, 0xCu);
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67240450;
      LODWORD(v22[0]) = a3;
      WORD2(v22[0]) = 2114;
      *(void *)((char *)v22 + 6) = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Starting Resurrection Timer (%{public}d secs) for <%{public}@>", buf, 0x12u);
    }
    int v15 = _NSConcreteStackBlock;
    uint64_t v16 = 3221225472;
    id v17 = sub_100303FEC;
    id v18 = &unk_100998A38;
    uint64_t v20 = a1;
    id v8 = v5;
    id v19 = v8;
    dispatch_block_t v9 = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, &v15);
    uint64_t v10 = [[*(id *)(a1 + 304) objectForKey:v8, v15, v16, v17, v18];
    id v11 = v10;
    if (v10) {
      dispatch_block_cancel(v10);
    }
    uint64_t v12 = *(void **)(a1 + 304);
    id v13 = objc_retainBlock(v9);
    [v12 setObject:v13 forKey:v8];

    uint64_t v14 = sub_100019878();
    sub_1004AFF58(v14, 1000 * a3, v9);
  }
}

void sub_1002F2E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1002F2E88(void *a1)
{
  uint64_t v1 = a1[4];
  uint64_t v4 = *(void **)(v1 + 232);
  char v2 = (void *)(v1 + 232);
  int v3 = v4;
  if (!v4) {
    goto LABEL_12;
  }
  unint64_t v5 = a1[5];
  unint64_t v6 = v2;
  do
  {
    unint64_t v7 = v3[4];
    BOOL v8 = v7 >= v5;
    if (v7 >= v5) {
      dispatch_block_t v9 = v3;
    }
    else {
      dispatch_block_t v9 = v3 + 1;
    }
    if (v8) {
      unint64_t v6 = v3;
    }
    int v3 = (void *)*v9;
  }
  while (*v9);
  if (v6 != v2 && v5 >= v6[4])
  {
    id v11 = (void *)a1[6];
    sub_10042EB6C(v11);
  }
  else
  {
LABEL_12:
    uint64_t v10 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      v12[0] = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Dropping enqueued messages as session has been terminated", (uint8_t *)v12, 2u);
    }
  }
}

void sub_1002F2F58(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unint64_t v7 = v6;
  if (v5 && v6)
  {
    BOOL v8 = [*(id *)(a1 + 320) objectForKeyedSubscript:v5];
    if (v8)
    {
      uint64_t v9 = +[NSMutableSet set];

      BOOL v8 = (void *)v9;
    }
    [v8 addObject:v7];
    [*(id *)(a1 + 320) setObject:v8 forKeyedSubscript:v5];
    uint64_t v10 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 138543618;
      id v12 = v5;
      __int16 v13 = 2112;
      uint64_t v14 = v7;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Application %{public}@ for user %@ is interested in FindMy devices", (uint8_t *)&v11, 0x16u);
    }
  }
}

void sub_1002F3090(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002F30B8(uint64_t a1, uint64_t a2, unsigned int a3, void *a4, uint64_t a5, unsigned int a6, void *a7, _DWORD *a8, unsigned char *a9, uint64_t a10)
{
  obuint64_t j = a4;
  id v15 = a4;
  id v58 = a7;
  id v63 = a7;
  uint64_t v61 = sub_100052E70();
  id v17 = *(void **)(a1 + 224);
  int v62 = (unsigned char *)a1;
  id v18 = (void *)(a1 + 232);
  if (v17 == v18)
  {
LABEL_23:
    unint64_t v66 = 0;
    if (*(char *)(a5 + 23) < 0)
    {
      BOOL v26 = *(char **)a5;
      uint64_t v25 = *(void *)(a5 + 8);
    }
    else
    {
      uint64_t v25 = *(unsigned __int8 *)(a5 + 23);
      BOOL v26 = (char *)a5;
    }
    if (v25 >= 20)
    {
      BOOL v27 = &v26[v25];
      uint64_t v28 = v26;
      do
      {
        uint64_t v29 = memchr(v28, 99, v25 - 19);
        if (!v29) {
          break;
        }
        BOOL v30 = *v29 == 0x6C7070612E6D6F63 && v29[1] == 0x6F7465756C622E65;
        if (v30 && *((_DWORD *)v29 + 4) == 1684567151) {
          break;
        }
        uint64_t v28 = (char *)v29 + 1;
        uint64_t v25 = v27 - (unsigned char *)v28;
      }
      while (v27 - (unsigned char *)v28 >= 20);
    }
    if (qword_1009F8168 != -1) {
      dispatch_once(&qword_1009F8168, &stru_1009A5018);
    }
    if (sub_100009254(qword_1009F8160, a5))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
        sub_100754BA8();
      }
      goto LABEL_121;
    }
    if (qword_1009F8168 != -1) {
      dispatch_once(&qword_1009F8168, &stru_1009A5018);
    }
    uint64_t v19 = sub_100019C0C((void *)qword_1009F8160, v66);
    if (!v19) {
      goto LABEL_150;
    }
    if (qword_1009F8168 != -1) {
      dispatch_once(&qword_1009F8168, &stru_1009A5018);
    }
    if (!sub_100553210(qword_1009F8160, v19))
    {
LABEL_150:
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
        sub_100754D44();
      }
      goto LABEL_121;
    }
    (**(void (***)(uint64_t, uint64_t, id, void))v61)(v61, v19, v15, a3);
    if ((a10 & 1) == 0)
    {
LABEL_94:
      if ((*(unsigned int (**)(uint64_t, uint64_t, BOOL))(*(void *)v61 + 48))(v61, v19, a6 == 0))
      {
        int v44 = 1;
        if (a6 != 1 || (a10 & 0x100) == 0) {
          goto LABEL_100;
        }
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
        {
          sub_10003AE4C(v19, (uint64_t)buf);
          sub_100754DAC();
        }
      }
      int v44 = 0;
LABEL_100:
      long long v45 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
      {
        sub_10003AE4C(v19, (uint64_t)v64);
        int v46 = "unknonw";
        if (a6 == 3) {
          int v46 = "classic";
        }
        if (a6 == 1) {
          int v46 = "peripheral";
        }
        if (!a6) {
          int v46 = "central";
        }
        if (v65 >= 0) {
          id v47 = v64;
        }
        else {
          id v47 = (void **)v64[0];
        }
        *(_DWORD *)std::string __p = 136447234;
        *(void *)&__p[4] = v46;
        uint64_t v48 = "on";
        __int16 v69 = 2082;
        *(void *)uint64_t v70 = v47;
        if (v44) {
          long long v49 = "on";
        }
        else {
          long long v49 = "off";
        }
        *(_WORD *)&v70[8] = 2082;
        long long v71 = v49;
        if (!v63) {
          uint64_t v48 = "off";
        }
        __int16 v72 = 2082;
        id v73 = v48;
        __int16 v74 = 2114;
        id v75 = v63;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "Registering %{public}s session \"%{public}s\" with backgrounding: %{public}s, persistence: %{public}s restoreID: %{public}@", __p, 0x34u);
        if (v65 < 0) {
          operator delete(v64[0]);
        }
      }
      if (!sub_10000DB50((uint64_t)v62, v19, v15, a6))
      {
        if (qword_1009F8788 != -1) {
          dispatch_once(&qword_1009F8788, &stru_1009A4FD8);
        }
        uint64_t v51 = sub_1000066B0((uint64_t)off_1009F8780, v19, a6);
        uint64_t v52 = v51;
        if (v51)
        {
          if ((*(unsigned int (**)(uint64_t))(*(void *)v51 + 16))(v51) == 3) {
            *(void *)(v52 + 216) = a2;
          }
          objc_storeStrong((id *)(v52 + 88), obj);
          objc_storeStrong((id *)(v52 + 96), v58);
          if (*(void *)(v52 + 96)) {
            v62[178] = 1;
          }
          *(unsigned char *)(v52 + 28) = (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v61 + 56))(v61, v19) != 32;
          *(unsigned char *)(v52 + 27) = BYTE2(a10) & 1;
          *(unsigned char *)(v52 + 36) = BYTE3(a10) & 1;
          *(unsigned char *)(v52 + 37) = BYTE4(a10) & 1;
        }
        id v53 = qword_100A19F00;
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
        {
          sub_10003AE4C(v19, (uint64_t)v64);
          uint64_t v54 = v65 >= 0 ? v64 : (void **)v64[0];
          int v55 = v62[179];
          *(_DWORD *)std::string __p = 136446978;
          *(void *)&__p[4] = v54;
          __int16 v69 = 1024;
          *(_DWORD *)uint64_t v70 = BYTE3(a10) & 1;
          *(_WORD *)&v70[4] = 1024;
          *(_DWORD *)&v70[6] = BYTE4(a10) & 1;
          LOWORD(v71) = 1024;
          *(_DWORD *)((char *)&v71 + 2) = v55;
          _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" : needsRestrictedStateOperation = %d, overrideRestrictedState = %d , denylistMode = %d", __p, 0x1Eu);
          if (v65 < 0) {
            operator delete(v64[0]);
          }
        }
        if ((a10 & 0x1000000) != 0)
        {
          if (qword_1009F8748 != -1) {
            dispatch_once(&qword_1009F8748, &stru_1009A4DF8);
          }
          if (sub_100028CB4((uint64_t)off_1009F8740) == 1)
          {
            *a9 = v62[179];
            *a8 = 1;
            goto LABEL_122;
          }
        }
        if ((a10 & 0x100000000) != 0 || !v62[179])
        {
          if (qword_1009F8748 != -1) {
            dispatch_once(&qword_1009F8748, &stru_1009A4DF8);
          }
          *a8 = sub_100028CB4((uint64_t)off_1009F8740);
          goto LABEL_122;
        }
LABEL_144:
        *a8 = 0;
        goto LABEL_122;
      }
      (*(void (**)(uint64_t, uint64_t, id))(*(void *)v61 + 8))(v61, v19, v15);
      if (qword_1009F8168 != -1) {
        dispatch_once(&qword_1009F8168, &stru_1009A5018);
      }
      sub_10000A678(qword_1009F8160, v66);
LABEL_121:
      uint64_t v19 = 0;
      goto LABEL_122;
    }
    if (qword_1009F8748 != -1) {
      dispatch_once(&qword_1009F8748, &stru_1009A4DF8);
    }
    int v32 = sub_100028CB4((uint64_t)off_1009F8740);
    if (v32)
    {
      if (!v62[179]) {
        goto LABEL_94;
      }
      uint64_t v33 = qword_100A19F00;
      if (!os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_93;
      }
      sub_10003AE4C(v19, (uint64_t)__p);
      if (v70[9] >= 0) {
        uint64_t v34 = __p;
      }
      else {
        uint64_t v34 = *(unsigned char **)__p;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = v34;
      id v35 = "Bluetooth is in denylist mode - show LE_DENYLIST_ENABLED alert for \"%{public}s\"";
    }
    else
    {
      uint64_t v33 = qword_100A19F00;
      if (!os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
      {
LABEL_93:
        (*(void (**)(uint64_t, uint64_t, BOOL))(*(void *)v61 + 24))(v61, v19, v32 != 0);
        goto LABEL_94;
      }
      sub_10003AE4C(v19, (uint64_t)__p);
      if (v70[9] >= 0) {
        long long v43 = __p;
      }
      else {
        long long v43 = *(unsigned char **)__p;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = v43;
      id v35 = "Bluetooth is powered off - notifying session \"%{public}s\"";
    }
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, v35, buf, 0xCu);
    if ((v70[9] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    goto LABEL_93;
  }
  *(void *)&long long v16 = 136446466;
  long long v56 = v16;
  while (1)
  {
    uint64_t v19 = v17[4];
    uint64_t v20 = v17[5];
    if ((*(unsigned int (**)(uint64_t))(*(void *)v20 + 16))(v20) == 3)
    {
      if (*(void *)(v20 + 216) == a2)
      {
        uint64_t v21 = qword_100A19F00;
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_FAULT))
        {
          sub_10003AE4C(v19, (uint64_t)__p);
          id v24 = __p;
          if (v70[9] < 0) {
            id v24 = *(unsigned char **)__p;
          }
          *(_DWORD *)uint64_t buf = v56;
          *(void *)&uint8_t buf[4] = v24;
          __int16 v77 = 2114;
          id v78 = v15;
          _os_log_fault_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "Duplicate check-in message from session \"%{public}s\" in application \"%{public}@\"", buf, 0x16u);
          if ((v70[9] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }
      }
      if (objc_msgSend(*(id *)(v20 + 88), "isEqualToString:", v15, v56, obj, v58))
      {
        if (!*(void *)(v20 + 216) && *(void *)(v20 + 96)) {
          sub_1002F2C3C((uint64_t)v62, *(void **)(v20 + 88), 15);
        }
        if ([*(id *)(v20 + 96) isEqualToString:v63]
          && (*(unsigned int (**)(uint64_t))(*(void *)v20 + 16))(v20) == a6)
        {
          break;
        }
      }
    }
    char v22 = (void *)v17[1];
    if (v22)
    {
      do
      {
        unsigned __int8 v23 = v22;
        char v22 = (void *)*v22;
      }
      while (v22);
    }
    else
    {
      do
      {
        unsigned __int8 v23 = (void *)v17[2];
        BOOL v30 = *v23 == (void)v17;
        id v17 = v23;
      }
      while (!v30);
    }
    id v17 = v23;
    if (v23 == v18) {
      goto LABEL_23;
    }
  }
  long long v36 = qword_100A19F00;
  if (*(void *)(v20 + 216))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
    {
      sub_10003AE4C(v19, (uint64_t)buf);
      id v37 = v79 >= 0 ? buf : *(unsigned char **)buf;
      *(_DWORD *)std::string __p = 138543874;
      *(void *)&__p[4] = v63;
      __int16 v69 = 2082;
      *(void *)uint64_t v70 = v37;
      *(_WORD *)&v70[8] = 2114;
      long long v71 = (const char *)v15;
      _os_log_error_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "(CBSR) Duplicate restore identifier \"%{public}@\" from session \"%{public}s\" in application \"%{public}@\"", __p, 0x20u);
      if (v79 < 0) {
        operator delete(*(void **)buf);
      }
    }
    goto LABEL_121;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    sub_10003AE4C(v19, (uint64_t)buf);
    uint64_t v38 = "unknown";
    if (a6 == 3) {
      uint64_t v38 = "classic";
    }
    if (a6 == 1) {
      uint64_t v38 = "peripheral";
    }
    if (!a6) {
      uint64_t v38 = "central";
    }
    *(_DWORD *)std::string __p = 136446722;
    *(void *)&__p[4] = v38;
    if (v79 >= 0) {
      long long v39 = buf;
    }
    else {
      long long v39 = *(unsigned char **)buf;
    }
    __int16 v69 = 2082;
    *(void *)uint64_t v70 = v39;
    *(_WORD *)&v70[8] = 2114;
    long long v71 = (const char *)v15;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "(CBSR) Restoring zombie'd %{public}s session \"%{public}s\" for application \"%{public}@\"", __p, 0x20u);
    if (v79 < 0) {
      operator delete(*(void **)buf);
    }
  }
  *(void *)(v20 + 216) = a2;
  sub_100551A1C(v19, (const std::string *)a5);
  (*(void (**)(unsigned char *, uint64_t))(*(void *)v62 + 16))(v62, v19);
  long long v40 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string __p = 0;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Ignore needsRestrictedStateOperation since restorable sessions are always apps", __p, 2u);
  }
  if (v62[179]) {
    goto LABEL_144;
  }
  if (qword_1009F8748 != -1) {
    dispatch_once(&qword_1009F8748, &stru_1009A4DF8);
  }
  int v41 = sub_100028CB4((uint64_t)off_1009F8740);
  *a8 = v41;
  if (v41)
  {
    uint64_t v42 = sub_100019878();
    v67[0] = _NSConcreteStackBlock;
    v67[1] = 3221225472;
    v67[2] = sub_1002F3DB4;
    v67[3] = &unk_1009A12D0;
    v67[4] = v62;
    v67[5] = v19;
    v67[6] = v20;
    sub_100013018(v42, v67);
  }
LABEL_122:

  return v19;
}

void sub_1002F3D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1002F3DB4(void *a1)
{
  uint64_t v1 = a1[4];
  uint64_t v4 = *(void **)(v1 + 232);
  char v2 = (void *)(v1 + 232);
  int v3 = v4;
  if (!v4) {
    goto LABEL_12;
  }
  unint64_t v5 = a1[5];
  id v6 = v2;
  do
  {
    unint64_t v7 = v3[4];
    BOOL v8 = v7 >= v5;
    if (v7 >= v5) {
      uint64_t v9 = v3;
    }
    else {
      uint64_t v9 = v3 + 1;
    }
    if (v8) {
      id v6 = v3;
    }
    int v3 = (void *)*v9;
  }
  while (*v9);
  if (v6 != v2 && v5 >= v6[4])
  {
    int v11 = (void *)a1[6];
    sub_10042EB6C(v11);
  }
  else
  {
LABEL_12:
    uint64_t v10 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      v12[0] = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Dropping enqueued messages as session has been terminated", (uint8_t *)v12, 2u);
    }
  }
}

uint64_t sub_1002F3E84(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v17 = v3;
  id v6 = *(uint64_t ***)(a1 + 248);
  uint64_t v4 = (uint64_t **)(a1 + 248);
  unint64_t v5 = v6;
  unint64_t v7 = v4 + 1;
  if (v6 == v4 + 1)
  {
    uint64_t v11 = 0;
  }
  else
  {
    while (!objc_msgSend(v5[4], "isEqualToString:", v3, v17))
    {
      BOOL v8 = v5[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = (uint64_t **)v8;
          BOOL v8 = (uint64_t *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (uint64_t **)v5[2];
          BOOL v10 = *v9 == (uint64_t *)v5;
          unint64_t v5 = v9;
        }
        while (!v10);
      }
      unint64_t v5 = v9;
      if (v9 == v7) {
        goto LABEL_14;
      }
    }
    uint64_t v11 = (*((_DWORD *)v5 + 10) + 1);
    *((_DWORD *)v5 + 10) = v11;
    id v12 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v13 = v5[4];
      *(_DWORD *)uint64_t buf = 138543618;
      *(void *)&uint8_t buf[4] = v13;
      __int16 v19 = 1024;
      int v20 = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Existing bundleID %{public}@ check-in before TCC, checkinTimes %d ", buf, 0x12u);
    }
  }
  if (v5 == v7)
  {
LABEL_14:
    *(void *)uint64_t buf = &v17;
    uint64_t v11 = 1;
    *((_DWORD *)sub_10030C710(v4, (unint64_t *)&v17, (uint64_t)&unk_1007BE9D0, (id **)buf) + 10) = 1;
    uint64_t v14 = qword_100A19F00;
    BOOL v15 = os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT);
    id v3 = v17;
    if (v15)
    {
      *(_DWORD *)uint64_t buf = 138543362;
      *(void *)&uint8_t buf[4] = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "New bundleID %{public}@ check-in before TCC, start tracking", buf, 0xCu);
      id v3 = v17;
    }
  }

  return v11;
}

void sub_1002F4058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id sub_1002F407C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 336) containsObject:a2];
}

void sub_1002F4088(uint64_t a1, void *a2)
{
}

uint64_t sub_1002F4090(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1000066B0(a1, a2, 0);
  if (!v5) {
    return 1;
  }
  uint64_t v6 = v5;
  unint64_t v7 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    sub_10003AE4C(a2, (uint64_t)__p);
    if (v11 >= 0) {
      BOOL v8 = __p;
    }
    else {
      BOOL v8 = (void **)__p[0];
    }
    *(_DWORD *)uint64_t buf = 136446210;
    __int16 v13 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Set session %{public}s needs private mode", buf, 0xCu);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 32))(v6, a3);
  return 0;
}

void sub_1002F41C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009A4EB8);
  }
  BOOL v4 = sub_1006C3EF4((uint64_t)off_1009F7ED8, v3);
  BOOL v5 = v4;
  uint64_t v6 = *(void **)(a1 + 224);
  unint64_t v7 = (void *)(a1 + 232);
  if (v6 == (void *)(a1 + 232))
  {
    if (!v4) {
      goto LABEL_27;
    }
    BOOL v17 = 0;
    goto LABEL_21;
  }
  __int16 v8 = 0;
  __int16 v9 = 0;
  do
  {
    BOOL v10 = (id *)v6[5];
    if (!(*((unsigned int (**)(id *))*v10 + 2))(v10))
    {
      char v11 = [v10[31] objectForKey:v3];

      if (v11)
      {
        id v12 = [v10[31] objectForKeyedSubscript:v3];
        unsigned __int16 v13 = (unsigned __int16)[v12 enableAutoReconnect];
        v9 += v13;
        v8 += v13 ^ 1;
      }
    }
    uint64_t v14 = (void *)v6[1];
    if (v14)
    {
      do
      {
        BOOL v15 = v14;
        uint64_t v14 = (void *)*v14;
      }
      while (v14);
    }
    else
    {
      do
      {
        BOOL v15 = (void *)v6[2];
        BOOL v16 = *v15 == (void)v6;
        uint64_t v6 = v15;
      }
      while (!v16);
    }
    uint64_t v6 = v15;
  }
  while (v15 != v7);
  if (v8) {
    BOOL v17 = 0;
  }
  else {
    BOOL v17 = v9 != 0;
  }
  if (v5 != v17)
  {
LABEL_21:
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009A4E38);
    }
    id v18 = off_1009F7EB8;
    sub_1000305AC(v19, v3);
    if (!sub_10068D758((uint64_t)v18, v19, v17 ^ 1, v17, 255, 0, 0))
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009A4EB8);
      }
      sub_1006C3DBC((uint64_t)off_1009F7ED8, v3, v17);
    }
  }
LABEL_27:
}

void sub_1002F43F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002F4430(uint64_t a1, void *a2)
{
  char v2 = sub_100304ACC(a1, a2);
  uint64_t v3 = sub_100304F9C((uint64_t)v2, v2);
  BOOL v4 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136446210;
    unint64_t v7 = sub_100304F74(v3);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "combinedLatencyForDevice returning %{public}s", (uint8_t *)&v6, 0xCu);
  }

  return v3;
}

void sub_1002F4500(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002F4518(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_1000066B0(a1, a2, 1u);
  if (v4)
  {
    uint64_t v5 = v4;
    sub_10043D3AC(v4, a2);
    if (*(unsigned char *)(v5 + 24) && *(void *)(v5 + 96))
    {
      sub_1000560F8(a1);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
  {
    sub_100754E38();
  }
}

uint64_t sub_1002F45B8(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 232);
  char v2 = (void *)(a1 + 232);
  uint64_t v3 = v4;
  if (!v4) {
    return 1;
  }
  uint64_t v5 = v2;
  do
  {
    unint64_t v6 = v3[4];
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      __int16 v8 = v3;
    }
    else {
      __int16 v8 = v3 + 1;
    }
    if (v7) {
      uint64_t v5 = v3;
    }
    uint64_t v3 = (void *)*v8;
  }
  while (*v8);
  if (v5 != v2 && v5[4] <= a2) {
    return *(unsigned __int8 *)(v5[5] + 129);
  }
  else {
    return 1;
  }
}

uint64_t sub_1002F4608(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 232);
  char v2 = (void *)(a1 + 232);
  uint64_t v3 = v4;
  if (!v4) {
    return 4;
  }
  uint64_t v5 = v2;
  do
  {
    unint64_t v6 = v3[4];
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      __int16 v8 = v3;
    }
    else {
      __int16 v8 = v3 + 1;
    }
    if (v7) {
      uint64_t v5 = v3;
    }
    uint64_t v3 = (void *)*v8;
  }
  while (*v8);
  if (v5 != v2 && v5[4] <= a2) {
    return (*(uint64_t (**)(void))(*(void *)v5[5] + 16))();
  }
  else {
    return 4;
  }
}

uint64_t sub_1002F4674(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  BOOL v7 = *(void **)(a1 + 224);
  __int16 v8 = (void *)(a1 + 232);
  if (v7 == v8)
  {
LABEL_10:
    uint64_t v13 = 0;
  }
  else
  {
    while (1)
    {
      uint64_t v9 = v7[5];
      if ([*(id *)(v9 + 88) isEqualToString:v5])
      {
        if ([*(id *)(v9 + 96) isEqualToString:v6]) {
          break;
        }
      }
      BOOL v10 = (void *)v7[1];
      if (v10)
      {
        do
        {
          char v11 = v10;
          BOOL v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          char v11 = (void *)v7[2];
          BOOL v12 = *v11 == (void)v7;
          BOOL v7 = v11;
        }
        while (!v12);
      }
      BOOL v7 = v11;
      if (v11 == v8) {
        goto LABEL_10;
      }
    }
    uint64_t v13 = 1;
  }

  return v13;
}

void sub_1002F473C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1002F4750(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 232);
  char v2 = (void *)(a1 + 232);
  uint64_t v3 = v4;
  if (!v4) {
    return 0;
  }
  id v5 = v2;
  do
  {
    unint64_t v6 = v3[4];
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      __int16 v8 = v3;
    }
    else {
      __int16 v8 = v3 + 1;
    }
    if (v7) {
      id v5 = v3;
    }
    uint64_t v3 = (void *)*v8;
  }
  while (*v8);
  return v5 != v2 && v5[4] <= a2 && *(unsigned char *)(v5[5] + 24) != 0;
}

BOOL sub_1002F47A8(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 232);
  char v2 = (void *)(a1 + 232);
  uint64_t v3 = v4;
  if (!v4) {
    return 0;
  }
  id v5 = v2;
  do
  {
    unint64_t v6 = v3[4];
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      __int16 v8 = v3;
    }
    else {
      __int16 v8 = v3 + 1;
    }
    if (v7) {
      id v5 = v3;
    }
    uint64_t v3 = (void *)*v8;
  }
  while (*v8);
  return v5 != v2 && v5[4] <= a2 && *(unsigned char *)(v5[5] + 25) != 0;
}

id sub_1002F4800(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[NSMutableArray array];
  id v5 = *(void **)(a1 + 224);
  unint64_t v6 = (void *)(a1 + 232);
  if (v5 != (void *)(a1 + 232))
  {
    do
    {
      int v7 = (*(uint64_t (**)(void))(*(void *)v5[5] + 16))(v5[5]);
      __int16 v8 = (void *)v5[5];
      if (v7)
      {
        if ((*(unsigned int (**)(void))(*v8 + 16))(v5[5]) == 1)
        {
          __int16 v8 = (void *)v5[5];
          if (sub_10043FFC8((uint64_t)v8, (uint64_t)v3)) {
LABEL_7:
          }
            [v4 addObject:v8[11]];
        }
      }
      else if (sub_1002F407C(v5[5], (uint64_t)v3))
      {
        goto LABEL_7;
      }
      uint64_t v9 = (void *)v5[1];
      if (v9)
      {
        do
        {
          BOOL v10 = v9;
          uint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          BOOL v10 = (void *)v5[2];
          BOOL v11 = *v10 == (void)v5;
          id v5 = v10;
        }
        while (!v11);
      }
      id v5 = v10;
    }
    while (v10 != v6);
  }

  return v4;
}

void sub_1002F494C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002F4970(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 224);
  id v5 = (void *)(a1 + 232);
  if (v4 == v5)
  {
LABEL_12:
    uint64_t v10 = 0;
  }
  else
  {
    while (1)
    {
      unint64_t v6 = (unsigned char *)v4[5];
      if (v6[28])
      {
        if (!(*(unsigned int (**)(unsigned char *))(*(void *)v6 + 16))(v6)
          && [*(id *)(v4[5] + 88) localizedStandardContainsString:v3]
          && *(_DWORD *)(v4[5] + 376))
        {
          break;
        }
      }
      int v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          __int16 v8 = v7;
          int v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          __int16 v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
      if (v8 == v5) {
        goto LABEL_12;
      }
    }
    uint64_t v10 = 1;
  }

  return v10;
}

void sub_1002F4A50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002F4A60(uint64_t a1, unint64_t a2)
{
  memset(v51, 0, sizeof(v51));
  uint64_t v4 = sub_1000066B0(a1, a2, 2u);
  if (!v4 && os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_FAULT)) {
    sub_100754F80();
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 16))(v4))
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 16))(v4) != 3)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 16))(v4) == 1)
      {
        id v5 = qword_100A19F58;
        if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT))
        {
          sub_10003AE4C(a2, (uint64_t)__p);
          unint64_t v6 = (SBYTE7(v54) & 0x80u) == 0 ? __p : (void **)__p[0];
          LODWORD(buf) = 136446210;
          *(void *)((char *)&buf + 4) = v6;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Resurrecting Peripheral session: %{public}s", (uint8_t *)&buf, 0xCu);
          if (SBYTE7(v54) < 0) {
            operator delete(__p[0]);
          }
        }
        uint64_t v42 = 0;
        long long v43 = 0;
        if (qword_1009F8788 != -1) {
          dispatch_once(&qword_1009F8788, &stru_1009A4FD8);
        }
        sub_1002F57B0((uint64_t)off_1009F8780, a2, &v42);
        long long buf = 0uLL;
        uint64_t v61 = 0;
        int v44 = 0;
        unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v45 = 0;
        unint64_t v46 = 0;
        sub_1002F5858(a1, a2, (void **)&buf, (uint64_t *)&v44);
        uint64_t v57 = 0;
        long long v55 = 0u;
        *(_OWORD *)long long v56 = 0u;
        *(_OWORD *)std::string __p = 0u;
        long long v54 = 0u;
        uuid_clear(uu);
        long long v39 = 0;
        __uuid_t dst = 0;
        uint64_t v41 = 0;
        int v7 = (const void *)buf;
        int64_t v8 = *((void *)&buf + 1) - buf;
        if (*((void *)&buf + 1) != (void)buf)
        {
          sub_1000405B8(&v39, v8 >> 3);
          BOOL v9 = (char *)__dst;
          memmove(__dst, v7, v8);
          __uuid_t dst = &v9[8 * (v8 >> 3)];
        }
        long long v36 = 0;
        id v37 = 0;
        uint64_t v38 = 0;
        sub_10030BC74(&v36, (uint64_t)v44, (uint64_t)v45, 0x8E38E38E38E38E39 * ((v45 - (unsigned char *)v44) >> 1));
        sub_10030B470((uint64_t)__p, uu, 0, (uint64_t)&v39, (uint64_t *)&v36);
        if (v36)
        {
          id v37 = v36;
          operator delete(v36);
        }
        uint64_t v10 = v39;
        if (v39)
        {
          __uuid_t dst = v39;
          operator delete(v39);
        }
        sub_10002FAB0((uint64_t)v10, v4, a2, 10, 0);
        (*(void (**)(void, void **, uint64_t (***)()))(**(void **)(v4 + 120) + 256))(*(void *)(v4 + 120), __p, &v42);
        if (v56[0])
        {
          v56[1] = v56[0];
          operator delete(v56[0]);
        }
        if (*((void *)&v54 + 1))
        {
          *(void *)&long long v55 = *((void *)&v54 + 1);
          operator delete(*((void **)&v54 + 1));
        }
        if (v44)
        {
          unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v45 = (unsigned __int8 *)v44;
          operator delete(v44);
        }
        if ((void)buf)
        {
          *((void *)&buf + 1) = buf;
          operator delete((void *)buf);
        }
        uint64_t v42 = &off_100998468;
        if (v43) {
          sub_1000368F4(v43);
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
      {
        sub_10003AE4C(a2, (uint64_t)__p);
        sub_100754F28();
      }
    }
  }
  else
  {
    BOOL v11 = qword_100A19F58;
    if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT))
    {
      sub_10003AE4C(a2, (uint64_t)__p);
      BOOL v12 = (SBYTE7(v54) & 0x80u) == 0 ? __p : (void **)__p[0];
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Resurrecting Central session: %{public}s", (uint8_t *)&buf, 0xCu);
      if (SBYTE7(v54) < 0) {
        operator delete(__p[0]);
      }
    }
    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009A4FD8);
    }
    uint64_t v34 = sub_1002F5634((uint64_t)off_1009F8780, a2);
    __p[0] = 0;
    __p[1] = 0;
    *(void *)&long long v54 = 0;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    uint64_t v33 = v4;
    obuint64_t j = *(id *)(v4 + 336);
    id v13 = [obj countByEnumeratingWithState:&v47 objects:v62 count:16];
    if (v13)
    {
      uint64_t v14 = *(void *)v48;
      do
      {
        BOOL v15 = 0;
        do
        {
          if (*(void *)v48 != v14) {
            objc_enumerationMutation(obj);
          }
          BOOL v16 = *(void **)(*((void *)&v47 + 1) + 8 * (void)v15);
          if (sub_1002F56BC(a1, a2, v16))
          {
            if (qword_1009F7EC0 != -1) {
              dispatch_once(&qword_1009F7EC0, &stru_1009A4E38);
            }
            BOOL v17 = off_1009F7EB8;
            sub_1000305AC(&buf, v16);
            sub_1000307A4((uint64_t)v17, (unsigned __int8 *)&buf);
            long long buf = 0uLL;
            uint64_t v61 = 0;
            if (qword_1009F7F10 != -1) {
              dispatch_once(&qword_1009F7F10, &stru_1009A4E18);
            }
            sub_10063B5B0(qword_1009F7F08, v16, (char **)&buf);
            int v44 = 0;
            unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v45 = 0;
            unint64_t v46 = 0;
            if (qword_1009F7F10 != -1) {
              dispatch_once(&qword_1009F7F10, &stru_1009A4E18);
            }
            sub_10063BA1C(qword_1009F7F08, a2, v16, (char **)&v42);
            __int16 v19 = (atomic_uint *)v42;
            id v18 = v43;
            if (v42 != (uint64_t (**)())v43)
            {
              do
              {
                __int16 v20 = *(_WORD *)v19;
                id v21 = v16;
                sub_1000305AC(src, v21);
                __int16 v59 = v20;
                unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v22 = v45;
                if ((unint64_t)v45 >= v46)
                {
                  unsigned __int8 v23 = (unsigned __int8 *)sub_10030C8C8((uint64_t *)&v44, (uint64_t)src);
                }
                else
                {
                  uuid_copy(v45, src);
                  *((_WORD *)v22 + 8) = v59;
                  unsigned __int8 v23 = v22 + 18;
                }
                unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v45 = v23;

                __int16 v19 = (atomic_uint *)((char *)v19 + 2);
              }
              while (v19 != v18);
              __int16 v19 = (atomic_uint *)v42;
            }
            if (v19)
            {
              long long v43 = v19;
              operator delete(v19);
            }
            operator new();
          }
          id v24 = qword_100A19F00;
          if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf) = 138412290;
            *(void *)((char *)&buf + 4) = v16;
            _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "Session cannot access device %@", (uint8_t *)&buf, 0xCu);
          }
          BOOL v15 = (char *)v15 + 1;
        }
        while (v15 != v13);
        id v13 = [obj countByEnumeratingWithState:&v47 objects:v62 count:16];
      }
      while (v13);
    }

    sub_10002FAB0(v25, v33, a2, 10, 1);
    (*(void (**)(void, void **, uint64_t))(**(void **)(v33 + 120) + 248))(*(void *)(v33 + 120), __p, v34);
    BOOL v26 = (char *)__p[0];
    BOOL v27 = (char *)__p[1];
    while (v26 != v27)
    {
      uint64_t v28 = *(void **)v26;
      uint64_t v29 = *(void **)(*(void *)v26 + 24);
      BOOL v30 = *(void **)(*(void *)v26 + 32);
      if (v29 == v30) {
        goto LABEL_71;
      }
      do
      {
        if (*v29) {
          (*(void (**)(void))(*(void *)*v29 + 8))(*v29);
        }
        ++v29;
      }
      while (v29 != v30);
      uint64_t v28 = *(void **)v26;
      if (*(void *)v26)
      {
LABEL_71:
        uint64_t v31 = (void *)v28[6];
        if (v31)
        {
          v28[7] = v31;
          operator delete(v31);
        }
        int v32 = (void *)v28[3];
        if (v32)
        {
          v28[4] = v32;
          operator delete(v32);
        }
        operator delete();
      }
      v26 += 8;
    }
    if (v34)
    {
      sub_1000A7EA8(v34);
      operator delete();
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  int v44 = v51;
  sub_10030C7D8((void ***)&v44);
}

void sub_1002F5484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char *a51,uint64_t a52)
{
  a51 = &a46;
  sub_10030C7D8((void ***)&a51);
  _Unwind_Resume(a1);
}

uint64_t sub_1002F5634(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = sub_1000066B0(a1, a2, 0);
  if (!v3 || !*(unsigned char *)(v3 + 304)) {
    return 0;
  }
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009A4E58);
  }
  uint64_t v4 = off_1009F85C0;

  return sub_1006E48A0((uint64_t)v4, a2);
}

uint64_t sub_1002F56BC(uint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  if (!a2) {
    goto LABEL_16;
  }
  int64_t v8 = *(void **)(a1 + 232);
  int v7 = (void *)(a1 + 232);
  unint64_t v6 = v8;
  if (v8)
  {
    BOOL v9 = v7;
    do
    {
      unint64_t v10 = v6[4];
      BOOL v11 = v10 >= a2;
      if (v10 >= a2) {
        BOOL v12 = v6;
      }
      else {
        BOOL v12 = v6 + 1;
      }
      if (v11) {
        BOOL v9 = v6;
      }
      unint64_t v6 = (void *)*v12;
    }
    while (*v12);
    if (v9 != v7 && v9[4] <= a2)
    {
      uint64_t v14 = v9[5];
      if (v14)
      {
        uint64_t v13 = sub_10002F690(v14, v5);
        goto LABEL_17;
      }
LABEL_16:
      uint64_t v13 = 1;
      goto LABEL_17;
    }
  }
  uint64_t v13 = 0;
LABEL_17:

  return v13;
}

void sub_1002F575C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1002F576C(void *a1)
{
  char v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_1002F57B0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t result = sub_1000066B0(a1, a2, 1u);
  if (result && *(unsigned char *)(result + 226))
  {
    if (qword_1009F8248 != -1) {
      dispatch_once(&qword_1009F8248, &stru_1009A4F18);
    }
    unint64_t v6 = off_1009F8240;
    return sub_10065EF28((uint64_t)v6, a2, a3);
  }
  else
  {
    *a3 = &off_100998468;
    a3[1] = 0;
  }
  return result;
}

void sub_1002F5858(uint64_t a1, unint64_t a2, void **a3, uint64_t *a4)
{
  uint64_t v6 = sub_1000066B0(a1, a2, 1u);
  if (v6)
  {
    int v7 = *(unsigned __int16 *)(v6 + 224);
    long long v36 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    obuint64_t j = *(id *)(v6 + 216);
    id v8 = [obj countByEnumeratingWithState:&v36 objects:v42 count:16];
    if (!v8) {
      goto LABEL_36;
    }
    int v9 = v7 << 16;
    uint64_t v10 = *(void *)v37;
    while (1)
    {
      BOOL v11 = 0;
      do
      {
        if (*(void *)v37 != v10) {
          objc_enumerationMutation(obj);
        }
        BOOL v12 = *(void **)(*((void *)&v36 + 1) + 8 * (void)v11);
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        unsigned int v13 = [v12 unsignedShortValue];
        if (qword_1009FB230 != -1) {
          dispatch_once(&qword_1009FB230, &stru_1009A4E78);
        }
        *(_DWORD *)uuid_t dst = v9 | v13;
        uint64_t v14 = sub_100424F2C(qword_1009FB228, (int *)dst, &v33);
        uint64_t v15 = v14;
        if (!v14) {
          goto LABEL_31;
        }
        BOOL v17 = (uint64_t *)a3[1];
        unint64_t v16 = (unint64_t)a3[2];
        if ((unint64_t)v17 >= v16)
        {
          uint64_t v19 = ((char *)v17 - (unsigned char *)*a3) >> 3;
          if ((unint64_t)(v19 + 1) >> 61) {
            abort();
          }
          uint64_t v20 = v16 - (void)*a3;
          uint64_t v21 = v20 >> 2;
          if (v20 >> 2 <= (unint64_t)(v19 + 1)) {
            uint64_t v21 = v19 + 1;
          }
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v22 = v21;
          }
          if (v22) {
            unsigned __int8 v23 = (char *)sub_1000405F8((uint64_t)(a3 + 2), v22);
          }
          else {
            unsigned __int8 v23 = 0;
          }
          id v24 = (uint64_t *)&v23[8 * v19];
          *id v24 = v15;
          id v18 = v24 + 1;
          BOOL v26 = (char *)*a3;
          uint64_t v25 = (char *)a3[1];
          if (v25 != *a3)
          {
            do
            {
              uint64_t v27 = *((void *)v25 - 1);
              v25 -= 8;
              *--id v24 = v27;
            }
            while (v25 != v26);
            uint64_t v25 = (char *)*a3;
          }
          *a3 = v24;
          a3[1] = v18;
          a3[2] = &v23[8 * v22];
          if (v25) {
            operator delete(v25);
          }
        }
        else
        {
          uint64_t *v17 = v14;
          id v18 = v17 + 1;
        }
        a3[1] = v18;
        uint64_t v28 = v33;
        if (v33 != v34)
        {
          do
          {
            int v29 = *(_DWORD *)(v28 + 16);
            uuid_copy(dst, (const unsigned __int8 *)v28);
            __int16 v41 = v29 & 0x7FFF;
            unint64_t v30 = a4[1];
            if (v30 >= a4[2])
            {
              uint64_t v31 = sub_10030C8C8(a4, (uint64_t)dst);
            }
            else
            {
              uuid_copy((unsigned __int8 *)a4[1], dst);
              *(_WORD *)(v30 + 16) = v41;
              uint64_t v31 = v30 + 18;
              a4[1] = v30 + 18;
            }
            a4[1] = v31;
            v28 += 20;
          }
          while (v28 != v34);
LABEL_31:
          uint64_t v28 = v33;
        }
        if (v28)
        {
          uint64_t v34 = v28;
          operator delete((void *)v28);
        }
        BOOL v11 = (char *)v11 + 1;
      }
      while (v11 != v8);
      id v8 = [obj countByEnumeratingWithState:&v36 objects:v42 count:16];
      if (!v8)
      {
LABEL_36:

        return;
      }
    }
  }
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
    sub_100754FB4();
  }
}

void sub_1002F5B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13)
{
  _Unwind_Resume(a1);
}

void sub_1002F5B8C(uint64_t a1, unint64_t a2)
{
}

void sub_1002F5B94(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v3 = *(void **)(a1 + 232);
  if (v3)
  {
    uint64_t v7 = a1 + 232;
    do
    {
      unint64_t v8 = v3[4];
      BOOL v9 = v8 >= a2;
      if (v8 >= a2) {
        uint64_t v10 = v3;
      }
      else {
        uint64_t v10 = v3 + 1;
      }
      if (v9) {
        uint64_t v7 = (uint64_t)v3;
      }
      uint64_t v3 = (void *)*v10;
    }
    while (*v10);
    if (v7 != a1 + 232)
    {
      unint64_t v11 = *(void *)(v7 + 32);
      if (v11 <= a2)
      {
        BOOL v12 = (void *)sub_1000066B0(a1, v11, 2u);
        if (!v12 && os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_FAULT)) {
          sub_100754FE8();
        }
        char v27 = 0;
        uint64_t v13 = sub_100017768();
        sub_10004191C(buf, "LE");
        sub_10004191C(__p, "PersistUserKilledApplications");
        (*(void (**)(uint64_t, unsigned char *, unsigned char *, char *))(*(void *)v13 + 72))(v13, buf, __p, &v27);
        if (v31 < 0) {
          operator delete(*(void **)__p);
        }
        if (v33 < 0) {
          operator delete(*(void **)buf);
        }
        if (a3 && (a3 != 1 || !v27)) {
          goto LABEL_58;
        }
        char v14 = (*(uint64_t (**)(void *))(*v12 + 40))(v12);
        if (v14)
        {
          uint64_t v15 = qword_100A19F58;
          if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT))
          {
            sub_10003AE4C(a2, (uint64_t)buf);
            unint64_t v16 = v33 >= 0 ? buf : *(unsigned char **)buf;
            *(_DWORD *)std::string __p = 136446466;
            *(void *)&__p[4] = v16;
            __int16 v29 = 1024;
            int v30 = a3;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" will be persisted, as it was performing long-term action.  Kill reason %d", __p, 0x12u);
            if (v33 < 0) {
              operator delete(*(void **)buf);
            }
          }
          if (qword_1009F85C8 != -1) {
            dispatch_once(&qword_1009F85C8, &stru_1009A4E58);
          }
          (**(void (***)(void *, unint64_t, uint64_t))off_1009F85C0)(off_1009F85C0, a2, 2);
        }
        BOOL v17 = qword_100A19F58;
        if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v18 = *(void *)(*(void *)(v7 + 40) + 88);
          *(_DWORD *)long long buf = 138543362;
          *(void *)&uint8_t buf[4] = v18;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "appSessionTerminated:{isAlive: false, bundleId: \"%{public}@\"}", buf, 0xCu);
        }
        uint64_t v19 = sub_100052E70();
        (*(void (**)(uint64_t, void, void))(*(void *)v19 + 72))(v19, *(void *)(*(void *)(v7 + 40) + 88), 0);
        if ((v14 & 1) == 0)
        {
LABEL_58:
          if ((*(unsigned int (**)(void *))(*v12 + 40))(v12))
          {
            uint64_t v20 = qword_100A19F58;
            if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT))
            {
              sub_10003AE4C(a2, (uint64_t)buf);
              uint64_t v21 = v33 >= 0 ? buf : *(unsigned char **)buf;
              *(_DWORD *)std::string __p = 136446466;
              *(void *)&__p[4] = v21;
              __int16 v29 = 1024;
              int v30 = a3;
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Removing restorable session \"%{public}s\" due to termination reason %d", __p, 0x12u);
              if (v33 < 0) {
                operator delete(*(void **)buf);
              }
            }
          }
          uint64_t v22 = v12[15];
          unsigned __int8 v23 = qword_100A19F58;
          BOOL v24 = os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT);
          if (v22)
          {
            if (v24)
            {
              sub_10003AE4C(a2, (uint64_t)buf);
              if (v33 >= 0) {
                uint64_t v25 = buf;
              }
              else {
                uint64_t v25 = *(unsigned char **)buf;
              }
              *(_DWORD *)std::string __p = 136446210;
              *(void *)&__p[4] = v25;
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "skipping session \"%{public}s\" as it is still alive", __p, 0xCu);
              if (v33 < 0) {
                operator delete(*(void **)buf);
              }
            }
          }
          else
          {
            if (v24)
            {
              sub_10003AE4C(a2, (uint64_t)buf);
              BOOL v26 = v33 >= 0 ? buf : *(unsigned char **)buf;
              *(_DWORD *)std::string __p = 136446210;
              *(void *)&__p[4] = v26;
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "unregistering session \"%{public}s\" as it is not longer alive", __p, 0xCu);
              if (v33 < 0) {
                operator delete(*(void **)buf);
              }
            }
            sub_10002CE08(a1, a2, 1);
          }
        }
      }
    }
  }
}

void sub_1002F6068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002F60A4(uint64_t a1, unint64_t a2, int a3)
{
}

void sub_1002F60AC(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v6 = *(void **)(a1 + 232);
  uint64_t v4 = (void *)(a1 + 232);
  id v5 = v6;
  if (!v6) {
    goto LABEL_38;
  }
  unint64_t v8 = v4;
  do
  {
    unint64_t v9 = v5[4];
    BOOL v10 = v9 >= a2;
    if (v9 >= a2) {
      unint64_t v11 = v5;
    }
    else {
      unint64_t v11 = v5 + 1;
    }
    if (v10) {
      unint64_t v8 = v5;
    }
    id v5 = (void *)*v11;
  }
  while (*v11);
  if (v8 != v4 && v8[4] <= a2)
  {
    BOOL v12 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      sub_10003AE4C(a2, (uint64_t)__p);
      uint64_t v13 = (void **)__p[0];
      char v14 = "disabled";
      if (v22 >= 0) {
        uint64_t v13 = __p;
      }
      if (a3) {
        char v14 = "enabled";
      }
      *(_DWORD *)long long buf = 136446466;
      BOOL v24 = v13;
      __int16 v25 = 2082;
      BOOL v26 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Registering pairing agent for session \"%{public}s\" with programmatic pairing %{public}s", buf, 0x16u);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }
    if ((*(unsigned int (**)(void))(*(void *)v8[5] + 16))(v8[5]) == 3)
    {
      uint64_t v15 = v8[5];
      if (v15)
      {
        uint64_t v17 = *(void *)(v15 + 224);
        unint64_t v16 = (unint64_t *)(v15 + 224);
        if (v17)
        {
          if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
            sub_100755050();
          }
        }
        else
        {
          __p[0] = 0;
          if (qword_1009F8768 != -1) {
            dispatch_once(&qword_1009F8768, &stru_1009A4F58);
          }
          uint64_t v19 = off_1009F8760;
          unint64_t v20 = sub_100019D1C(a2);
          if (sub_10060A8A0(v19, v20, __p, v16)
            && os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
          {
            sub_10075501C();
          }
        }
      }
    }
    else
    {
      if (a3) {
        int v18 = 2;
      }
      else {
        int v18 = 1;
      }
      *(_DWORD *)(v8[5] + 32) = v18;
    }
  }
  else
  {
LABEL_38:
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_FAULT)) {
      sub_100754E6C(a2);
    }
  }
}

void sub_1002F630C(uint64_t a1, unint64_t a2, void *a3, char a4)
{
  id v7 = a3;
  if (sub_1002F63C4(a1, a2))
  {
    if (qword_1009F7ED0 != -1) {
      dispatch_once(&qword_1009F7ED0, &stru_1009A4E98);
    }
    sub_100709978(qword_1009F7EC8, a2, v7, a4);
  }
}

void sub_1002F63B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL sub_1002F63C4(uint64_t a1, unint64_t a2)
{
  id v5 = *(void **)(a1 + 232);
  uint64_t v3 = (void *)(a1 + 232);
  uint64_t v4 = v5;
  if (!v5) {
    goto LABEL_12;
  }
  uint64_t v6 = v3;
  do
  {
    unint64_t v7 = v4[4];
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      unint64_t v9 = v4;
    }
    else {
      unint64_t v9 = v4 + 1;
    }
    if (v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = (void *)*v9;
  }
  while (*v9);
  if (v6 == v3 || v6[4] > a2)
  {
LABEL_12:
    BOOL result = os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_FAULT);
    if (!result) {
      return result;
    }
    sub_100754E6C(a2);
    return 0;
  }
  if (*(_DWORD *)(v6[5] + 32) == 2) {
    return 1;
  }
  unint64_t v11 = qword_100A19F00;
  BOOL result = os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_100755084(a2, v11);
    return 0;
  }
  return result;
}

uint64_t sub_1002F6494(uint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  if (sub_1002F63C4(a1, a2))
  {
    if (qword_1009F7ED0 != -1) {
      dispatch_once(&qword_1009F7ED0, &stru_1009A4E98);
    }
    uint64_t v6 = sub_10070962C(qword_1009F7EC8, a2, v5);
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

void sub_1002F6528(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002F6538(uint64_t a1, unint64_t a2, void *a3, int a4, unsigned int a5)
{
  id v9 = a3;
  if (sub_1002F63C4(a1, a2))
  {
    if (qword_1009F7ED0 != -1) {
      dispatch_once(&qword_1009F7ED0, &stru_1009A4E98);
    }
    sub_100708CB4(qword_1009F7EC8, v9, a4, a5);
  }
}

void sub_1002F65E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1002F65F4(uint64_t a1, unint64_t a2, void *a3, int a4, uint64_t a5)
{
  id v9 = a3;
  if (sub_1002F63C4(a1, a2))
  {
    if (qword_1009F7ED0 != -1) {
      dispatch_once(&qword_1009F7ED0, &stru_1009A4E98);
    }
    sub_100709010(qword_1009F7EC8, a2, v9, a4, a5);
  }
}

void sub_1002F66A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1002F66B4(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  if (qword_1009F7ED0 != -1) {
    dispatch_once(&qword_1009F7ED0, &stru_1009A4E98);
  }
  uint64_t v5 = qword_1009F7EC8;

  sub_1007071C4(v5, a2, a3);
}

uint64_t sub_1002F6720(uint64_t a1, _DWORD *a2)
{
  if (qword_1009F7ED0 != -1) {
    dispatch_once(&qword_1009F7ED0, &stru_1009A4E98);
  }
  uint64_t v3 = qword_1009F7EC8;

  return sub_10071170C(v3, a2);
}

uint64_t sub_1002F6784(uint64_t a1, unint64_t a2, uint64_t a3)
{
  sub_1002B7D94(15, a2);
  uint64_t v6 = sub_1000066B0(a1, a2, 0);
  if (!v6) {
    return 12;
  }
  uint64_t v7 = v6;
  uint64_t result = sub_10042F344(v6, a2, a3);
  if (!result)
  {
    if (*(unsigned char *)(v7 + 24))
    {
      if (*(void *)(v7 + 96)) {
        sub_1000560F8(a1);
      }
    }
    return 0;
  }
  return result;
}

void sub_1002F6808(uint64_t a1, unint64_t a2)
{
  sub_1002B7D94(16, a2);
  uint64_t v4 = sub_1000066B0(a1, a2, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    sub_10042FA58(v4, a2);
    if (qword_1009F85D8 != -1) {
      dispatch_once(&qword_1009F85D8, &stru_1009A5058);
    }
    sub_10000E3F4(qword_1009F85D0, a2);
    uint64_t v6 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(v5 + 88);
      uint64_t v8 = *(void *)(v5 + 368);
      int v9 = 138543618;
      uint64_t v10 = v7;
      __int16 v11 = 2048;
      uint64_t v12 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Stopping scan for session \"%{public}@\" - %llu advertisements delivered", (uint8_t *)&v9, 0x16u);
    }
    if (*(unsigned char *)(v5 + 24))
    {
      if (*(void *)(v5 + 96)) {
        sub_1000560F8(a1);
      }
    }
  }
}

void sub_1002F6944(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1000066B0(a1, a2, 0);
  if (v5)
  {
    uint64_t v6 = v5;
    sub_10042FADC(v5, a2, a3);
    uint64_t v7 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(v6 + 88);
      int v9 = 138543618;
      uint64_t v10 = v8;
      __int16 v11 = 1024;
      int v12 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "clearDuplicateFilterCache for session \"%{public}@\" type %d", (uint8_t *)&v9, 0x12u);
    }
  }
}

uint64_t sub_1002F6A20(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  uint64_t v6 = v5;
  if (v5
    && [v5 length]
    && (v7 = *(void **)(a1 + 224), uint64_t v8 = (void *)(a1 + 232), v7 != (void *)(a1 + 232)))
  {
    unsigned __int16 v9 = 0;
    do
    {
      uint64_t v10 = v7[5];
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v10 + 16))(v10)
        && [*(id *)(v10 + 88) isEqualToString:v6]
        && (!a3 || *(unsigned char *)(v10 + 129) != 32))
      {
        v9 += (unsigned __int16)[*(id *)(v10 + 248) count];
      }
      __int16 v11 = (void *)v7[1];
      if (v11)
      {
        do
        {
          int v12 = v11;
          __int16 v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          int v12 = (void *)v7[2];
          BOOL v13 = *v12 == (void)v7;
          uint64_t v7 = v12;
        }
        while (!v13);
      }
      uint64_t v7 = v12;
    }
    while (v12 != v8);
  }
  else
  {
    unsigned __int16 v9 = 0;
  }

  return v9;
}

void sub_1002F6B30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002F6B48(uint64_t a1, unint64_t a2, void *a3, void *a4)
{
  id v94 = a3;
  uint64_t v92 = a2;
  id v93 = a4;
  uint64_t v7 = sub_1000066B0(a1, a2, 2u);
  uint64_t v8 = v7;
  if (!v7)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
      sub_100755114();
    }
    goto LABEL_167;
  }
  int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
  if (v9)
  {
    if (v9 == 3)
    {
      uint64_t v10 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(v8 + 88);
        *(_DWORD *)long long buf = 138543618;
        *(void *)&uint8_t buf[4] = v94;
        *(_WORD *)&unsigned char buf[12] = 2114;
        *(void *)&unsigned char buf[14] = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "UN: connectDeviceForApp for classic  %{public}@ for %{public}@", buf, 0x16u);
      }
      sub_100440340(v8, a2, v94, v93);
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
    {
      sub_100755148();
    }
    goto LABEL_167;
  }
  sub_1002B7E74(17, a2, v94);
  int v12 = *(void **)(a1 + 224);
  long long v95 = (void *)(a1 + 232);
  uint64_t v90 = a1;
  uint64_t v91 = v8;
  unsigned int v13 = 0;
  if (v12 != (void *)(a1 + 232))
  {
    do
    {
      char v14 = (id *)v12[5];
      if (!(*((unsigned int (**)(id *))*v14 + 2))(v14)
        && [v14[11] isEqualToString:*(void *)(v8 + 88)])
      {
        long long v101 = 0u;
        long long v102 = 0u;
        long long v99 = 0u;
        long long v100 = 0u;
        id v15 = v14[31];
        id v16 = [v15 countByEnumeratingWithState:&v99 objects:v114 count:16];
        if (v16)
        {
          uint64_t v17 = *(void *)v100;
          do
          {
            int v18 = 0;
            do
            {
              if (*(void *)v100 != v17) {
                objc_enumerationMutation(v15);
              }
              uint64_t v19 = *(void *)(*((void *)&v99 + 1) + 8 * (void)v18);
              if (qword_1009F7EC0 != -1) {
                dispatch_once(&qword_1009F7EC0, &stru_1009A4E38);
              }
              unint64_t v20 = off_1009F7EB8;
              sub_1000305AC(buf, v19);
              v13 += sub_10067E248(v20, buf);
              int v18 = (char *)v18 + 1;
            }
            while (v16 != v18);
            id v16 = [v15 countByEnumeratingWithState:&v99 objects:v114 count:16];
          }
          while (v16);
        }

        a1 = v90;
        uint64_t v8 = v91;
      }
      uint64_t v21 = (void *)v12[1];
      if (v21)
      {
        do
        {
          char v22 = v21;
          uint64_t v21 = (void *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          char v22 = (void *)v12[2];
          BOOL v23 = *v22 == (void)v12;
          int v12 = v22;
        }
        while (!v23);
      }
      int v12 = v22;
    }
    while (v22 != v95);
  }
  BOOL v24 = (id *)(v8 + 88);
  unsigned __int8 v25 = sub_1002F6A20(a1, *(void **)(v8 + 88), 1);
  sub_100551758(a2, (std::string *)buf);
  if (a1 + 280 == sub_10003156C(a1 + 272, (const void **)buf))
  {
    BOOL v26 = 1;
  }
  else
  {
    sub_100551758(a2, &v113);
    uint64_t v103 = &v113;
    BOOL v26 = v13 + 1 > *((unsigned __int8 *)sub_10030CB90((uint64_t **)(a1 + 272), (const void **)&v113.__r_.__value_.__l.__data_, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v103)+ 56);
    if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v113.__r_.__value_.__l.__data_);
    }
  }
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v26) {
      goto LABEL_40;
    }
  }
  else if (!v26)
  {
    goto LABEL_40;
  }
  sub_100551758(v92, (std::string *)buf);
  v113.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
  *((unsigned char *)sub_10030CB90((uint64_t **)(a1 + 272), (const void **)buf, (uint64_t)&unk_1007BE9D0, &v113) + 56) = v13 + 1;
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
LABEL_40:
  if (qword_1009FB270 != -1) {
    dispatch_once(&qword_1009FB270, &stru_1009A5038);
  }
  if (v13 >= sub_100735844(qword_1009FB268, *v24))
  {
    char v27 = qword_100A19F00;
    BOOL v28 = os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR);
    if (v28) {
      sub_100755200(v8 + 88, v27, v29, v30, v31, v32, v33, v34);
    }
    if (*(unsigned char *)(v8 + 129) == 32)
    {
      int v35 = 345;
LABEL_122:
      sub_1002F7D44(v28, v92, v8, v94, v35, v13);
      goto LABEL_167;
    }
    memset(buf, 0, 56);
    sub_10004191C(&v113, (char *)[*v24 UTF8String]);
    sub_1004B8F04((uint64_t)buf, (long long *)&v113, *(unsigned char *)(v8 + 129), v94, v13, 345);
    if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v113.__r_.__value_.__l.__data_);
    }
    if (qword_1009FB260 != -1) {
      dispatch_once(&qword_1009FB260, &stru_1009A4FF8);
    }
    sub_1000504D8();

    if ((buf[31] & 0x80000000) != 0) {
      operator delete(*(void **)&buf[8]);
    }
  }
  uint64_t v36 = sub_100035F54();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v36 + 336))(v36) & 1) != 0
    || (uint64_t v37 = sub_100035F54(), ((*(uint64_t (**)(uint64_t))(*(void *)v37 + 344))(v37) & 1) != 0)
    || (uint64_t v38 = sub_100035F54(), (*(unsigned int (**)(uint64_t))(*(void *)v38 + 424))(v38)))
  {
    if (*(unsigned char *)(v8 + 129) != 32 && !sub_10042F320(v8))
    {
      long long v39 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
      {
        sub_10003AE4C(v92, (uint64_t)&v113);
        if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v40 = &v113;
        }
        else {
          long long v40 = (std::string *)v113.__r_.__value_.__r.__words[0];
        }
        id v41 = *v24;
        if (qword_1009FB270 != -1) {
          dispatch_once(&qword_1009FB270, &stru_1009A5038);
        }
        int v42 = sub_100735778();
        *(_DWORD *)long long buf = 136447234;
        *(void *)&uint8_t buf[4] = v40;
        *(_WORD *)&unsigned char buf[12] = 2114;
        *(void *)&unsigned char buf[14] = v94;
        *(_WORD *)&unsigned char buf[22] = 2114;
        *(void *)&uint8_t buf[24] = v41;
        *(_WORD *)&uint8_t buf[32] = 1024;
        *(_DWORD *)&buf[34] = v25;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&uint8_t buf[40] = v42;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Session %{public}s trying to connect to device %{public}@, total connections for bundleID %{public}@ = %d, max for this platform=%d", buf, 0x2Cu);
        if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v113.__r_.__value_.__l.__data_);
        }
        uint64_t v8 = v91;
      }
      if (qword_1009FB270 != -1) {
        dispatch_once(&qword_1009FB270, &stru_1009A5038);
      }
      if (sub_100735778() <= v25)
      {
        unint64_t v80 = qword_100A19F00;
        BOOL v81 = os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT);
        if (v81)
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEFAULT, "Exceeded MAX connection limit", buf, 2u);
        }
        sub_1002F7D44(v81, v92, v8, v94, 309, 0);
        memset(buf, 0, 24);
        sub_10004191C(buf, (char *)[*v24 UTF8String]);
        uint64_t v82 = sub_1003731C0();
        if (buf[23] >= 0) {
          unsigned int v83 = buf;
        }
        else {
          unsigned int v83 = *(unsigned char **)buf;
        }
        (*(void (**)(uint64_t, uint64_t, unsigned char *, id))(*(void *)v82 + 48))(v82, 1, v83, v94);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        goto LABEL_167;
      }
    }
  }
  uint64_t v43 = sub_100035F54();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v43 + 336))(v43)) {
    goto LABEL_101;
  }
  int v44 = [v93 clientBundleID];
  if ([v93 connectionUseCase] == (id)327680)
  {
    if (!v44 || (id v45 = [(__CFString *)v44 length], v46 = v44, !v45))
    {
      long long v47 = qword_100A19F00;
      BOOL v48 = os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT);
      if (v48)
      {
        sub_10003AE4C(v92, (uint64_t)&v113);
        int v49 = SHIBYTE(v113.__r_.__value_.__r.__words[2]);
        long long v50 = (std::string *)v113.__r_.__value_.__r.__words[0];
        int v51 = [v93 connectionUseCase];
        if (v49 >= 0) {
          long long v50 = &v113;
        }
        uint64_t v52 = sub_10003B14C(v51);
        *(_DWORD *)long long buf = 136446722;
        *(void *)&uint8_t buf[4] = v50;
        *(_WORD *)&unsigned char buf[12] = 2114;
        *(void *)&unsigned char buf[14] = v94;
        *(_WORD *)&unsigned char buf[22] = 2082;
        *(void *)&uint8_t buf[24] = v52;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "Session %{public}s trying to connect to device %{public}@ without providing client bundleID for useCase %{public}s", buf, 0x20u);
        if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v113.__r_.__value_.__l.__data_);
        }
      }
      sub_1002F7D44(v48, v92, v8, v94, 346, 0);
      id v53 = 0;
LABEL_133:

      goto LABEL_167;
    }
    goto LABEL_83;
  }
  if (*(unsigned char *)(v8 + 129) != 32)
  {
    id v46 = *v24;
LABEL_83:
    id v53 = v46;
    goto LABEL_84;
  }
  id v53 = 0;
LABEL_84:
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009A4E38);
  }
  char v89 = v44;
  int v54 = sub_10068D4F8((uint64_t)off_1009F7EB8, v53, 327680);
  int v55 = sub_1002F6A20(a1, v53, 1);
  if (qword_1009FB270 != -1) {
    dispatch_once(&qword_1009FB270, &stru_1009A5038);
  }
  unsigned int v56 = sub_1007358B8(qword_1009FB268);
  unsigned __int16 v57 = v55 + v54;
  id v58 = qword_100A19F00;
  int v88 = v54;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    sub_10003AE4C(v92, (uint64_t)&v113);
    int v59 = SHIBYTE(v113.__r_.__value_.__r.__words[2]);
    std::string::size_type v60 = v113.__r_.__value_.__r.__words[0];
    int v61 = [v93 connectionUseCase];
    if (v59 >= 0) {
      int v62 = &v113;
    }
    else {
      int v62 = (std::string *)v60;
    }
    if (v89) {
      CFStringRef v63 = v89;
    }
    else {
      CFStringRef v63 = @"none";
    }
    char v64 = sub_10003B14C(v61);
    id v65 = *v24;
    int v66 = v57;
    *(_DWORD *)long long buf = 136448514;
    *(void *)&uint8_t buf[4] = v62;
    *(_WORD *)&unsigned char buf[12] = 2114;
    *(void *)&unsigned char buf[14] = v94;
    *(_WORD *)&unsigned char buf[22] = 2112;
    *(void *)&uint8_t buf[24] = v63;
    *(_WORD *)&uint8_t buf[32] = 2080;
    *(void *)&buf[34] = v64;
    *(_WORD *)&buf[42] = 2112;
    *(void *)&buf[44] = v65;
    *(_WORD *)&buf[52] = 2112;
    *(void *)&buf[54] = v53;
    __int16 v105 = 1024;
    int v106 = v88;
    __int16 v107 = 1024;
    int v108 = v55;
    __int16 v109 = 1024;
    int v110 = v57;
    __int16 v111 = 1024;
    unsigned int v112 = v56;
    _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "Session %{public}s trying to connect to device %{public}@ clientBundleID %@ useCase %s session bundleID %@ thirdPartyBundleID %@ indirect %d direct %d all %d max %d ", buf, 0x56u);
    if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v113.__r_.__value_.__l.__data_);
    }
    uint64_t v8 = v91;
  }
  else
  {
    int v66 = (unsigned __int16)(v55 + v54);
  }
  if (v56 <= v57)
  {
    __int16 v77 = qword_100A19F00;
    BOOL v78 = os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT);
    if (v78)
    {
      sub_10003AE4C(v92, (uint64_t)&v113);
      char v79 = (v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v113
          : (std::string *)v113.__r_.__value_.__r.__words[0];
      *(_DWORD *)long long buf = 136447490;
      *(void *)&uint8_t buf[4] = v79;
      *(_WORD *)&unsigned char buf[12] = 2114;
      *(void *)&unsigned char buf[14] = v94;
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&uint8_t buf[24] = v66;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = v88;
      *(_WORD *)&buf[34] = 1024;
      *(_DWORD *)&buf[36] = v55;
      *(_WORD *)&uint8_t buf[40] = 1024;
      *(_DWORD *)&buf[42] = v56;
      _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "Session %{public}s trying to connect to device %{public}@ max num connections %d (indirect %d direct %d max allowed %d) reached ", buf, 0x2Eu);
      if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v113.__r_.__value_.__l.__data_);
      }
    }
    sub_1002F7D44(v78, v92, v8, v94, 347, 0);
    int v44 = v89;
    goto LABEL_133;
  }

  a1 = v90;
LABEL_101:
  if ([v93 hideFromBTSettings])
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009A4EB8);
    }
    sub_1006C3F88((uint64_t)off_1009F7ED8, v94, (char)[v93 hideFromBTSettings]);
    int v67 = *(void **)(a1 + 224);
    if (v67 != v95)
    {
      do
      {
        uint64_t v68 = v67[4];
        __int16 v69 = (void *)v67[5];
        if (!(*(unsigned int (**)(void *))(*v69 + 16))(v69))
        {
          uint64_t v70 = v69[15];
          if (v70) {
            (*(void (**)(uint64_t, uint64_t, id, void))(*(void *)v70 + 56))(v70, v68, v94, 0);
          }
        }
        long long v71 = (void *)v67[1];
        if (v71)
        {
          do
          {
            __int16 v72 = v71;
            long long v71 = (void *)*v71;
          }
          while (v71);
        }
        else
        {
          do
          {
            __int16 v72 = (void *)v67[2];
            BOOL v23 = *v72 == (void)v67;
            int v67 = v72;
          }
          while (!v23);
        }
        int v67 = v72;
      }
      while (v72 != v95);
    }
  }
  if (sub_1002F81C0(a1, v92))
  {
    id v73 = qword_100A19F00;
    BOOL v28 = os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT);
    if (v28)
    {
      sub_10003AE4C(v92, (uint64_t)buf);
      __int16 v74 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
      int v75 = *(unsigned __int8 *)(a1 + 372);
      LODWORD(v113.__r_.__value_.__l.__data_) = 136446466;
      *(std::string::size_type *)((char *)v113.__r_.__value_.__r.__words + 4) = (std::string::size_type)v74;
      WORD2(v113.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&v113.__r_.__value_.__r.__words[1] + 6) = v75;
      _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "Rejecting the custom Connection Scan for %{public}s for list type %d", (uint8_t *)&v113, 0x12u);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    unsigned int v13 = 0;
    int v35 = 343;
    goto LABEL_122;
  }
  if (*(unsigned char *)(v8 + 28))
  {
    int v76 = [*v24 lowercaseString];
    if ([v76 hasPrefix:@"com.apple."])
    {
    }
    else
    {
      BOOL v84 = [v93 connectionUseCase] == 0;

      if (v84) {
        [v93 setConnectionUseCase:23];
      }
    }
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009A4EB8);
  }
  sub_1006BEE48((uint64_t)off_1009F7ED8, v94, [v93 initPHYs]);
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009A4EB8);
  }
  sub_1006BEF98((uint64_t)off_1009F7ED8, v94, [v93 PHYOptions]);
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009A4EB8);
  }
  sub_1006BF0F4((uint64_t)off_1009F7ED8, v94, (char)[v93 enableControllerBTClockUpdates]);
  *(unsigned char *)(v8 + 184) = [v93 enableControllerBTClockUpdates];
  long long v85 = [*(id *)(v8 + 248) objectForKey:v94];
  if (v85)
  {
    BOOL v86 = 1;
  }
  else
  {
    long long v87 = [*(id *)(v8 + 256) objectForKey:v94];
    BOOL v86 = v87 != 0;
  }
  sub_100430414(v8, v92, v94, v93);
  if (!v86 && *(unsigned char *)(v8 + 28))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEBUG))
    {
      sub_10003AE4C(v92, (uint64_t)buf);
      sub_1007551B0();
    }
    sub_1002F84F0((os_unfair_lock_s *)a1, v92, v94);
    if ([v93 ancsRequired])
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009A4EB8);
      }
      if (sub_1006BB9D4((uint64_t)off_1009F7ED8, v94)) {
        goto LABEL_163;
      }
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009A4EB8);
      }
      if (sub_100030B78((uint64_t)off_1009F7ED8, v94))
      {
LABEL_163:
        v96[0] = _NSConcreteStackBlock;
        v96[1] = 3221225472;
        v96[2] = sub_1002F85A4;
        v96[3] = &unk_1009A4CA8;
        uint64_t v98 = v8;
        id v97 = v94;
        sub_1000098F0((os_unfair_lock_s *)(a1 + 192), v96);
      }
    }
  }
  sub_1002F41C0(a1, v94);
  if (*(unsigned char *)(v8 + 24) && *(void *)(v8 + 96)) {
    sub_1000560F8(a1);
  }
LABEL_167:
}

void sub_1002F7BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  _Unwind_Resume(a1);
}

void sub_1002F7D44(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5, int a6)
{
  id v10 = a4;
  sub_1002B7E74(18, a2, v10);
  uint64_t v11 = (uint64_t)sub_1002F407C(a3, (uint64_t)v10);
  if ((v11 & 1) != 0 || (a5 - 341) <= 7 && ((1 << (a5 - 85)) & 0xF1) != 0 || a5 == 202)
  {
    sub_10002FAB0(v11, a3, a2, 10, 1);
    sub_100436508(a3, v10, a5);
    uint64_t v12 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 344))(v12))
    {
      unsigned int v13 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134217984;
        *(double *)&uint8_t buf[4] = CFAbsoluteTimeGetCurrent() + 5.0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Adding grace period fLastGattAssertionGraceInit %f", buf, 0xCu);
      }
      *(CFAbsoluteTime *)(a3 + 56) = CFAbsoluteTimeGetCurrent() + 5.0;
    }
    uint64_t v19 = 0;
    long long v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)long long buf = 0u;
    sub_10004191C(__p, (char *)[*(id *)(a3 + 88) UTF8String]);
    sub_1004B8F04((uint64_t)buf, (long long *)__p, *(unsigned char *)(a3 + 129), v10, a6, a5);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (qword_1009FB260 != -1) {
      dispatch_once(&qword_1009FB260, &stru_1009A4FF8);
    }
    sub_1000504D8();

    if (SHIBYTE(v17) < 0) {
      operator delete(*(void **)&buf[8]);
    }
  }
}

void sub_1002F7F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002F7FBC(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_1002F81C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  int v3 = *(unsigned __int8 *)(a1 + 372);
  if (v3 == 2)
  {
    uint64_t v21 = *(long long **)(a1 + 376);
    long long v40 = *(long long **)(a1 + 384);
    if (v21 == v40) {
      return 0;
    }
    while (1)
    {
      __dst[1] = 0;
      uint64_t v45 = 0;
      __dst[0] = 0;
      if (*((char *)v21 + 23) < 0)
      {
        sub_10003B098(__dst, *(void **)v21, *((void *)v21 + 1));
      }
      else
      {
        long long v22 = *v21;
        uint64_t v45 = *((void *)v21 + 2);
        *(_OWORD *)__uuid_t dst = v22;
      }
      sub_10003AE4C(v2, (uint64_t)&__p);
      unsigned __int8 v23 = v43;
      BOOL v24 = __p;
      if ((v43 & 0x80u) == 0) {
        p_p = (char *)&__p;
      }
      else {
        p_p = (char *)__p;
      }
      char v26 = HIBYTE(v45);
      if (v45 >= 0) {
        char v27 = __dst;
      }
      else {
        char v27 = (void **)__dst[0];
      }
      if (v45 >= 0) {
        int64_t v28 = HIBYTE(v45);
      }
      else {
        int64_t v28 = (int64_t)__dst[1];
      }
      if (v28)
      {
        if ((v43 & 0x80u) == 0) {
          int64_t v29 = v43;
        }
        else {
          int64_t v29 = v42;
        }
        uint64_t v30 = &p_p[v29];
        if (v29 >= v28)
        {
          int v33 = *(unsigned __int8 *)v27;
          uint64_t v34 = p_p;
          do
          {
            uint64_t v35 = v29 - v28;
            if (v35 == -1) {
              break;
            }
            uint64_t v36 = (char *)memchr(v34, v33, v35 + 1);
            if (!v36) {
              break;
            }
            uint64_t v31 = v36;
            if (!memcmp(v36, v27, v28)) {
              goto LABEL_66;
            }
            uint64_t v34 = v31 + 1;
            int64_t v29 = v30 - (v31 + 1);
          }
          while (v29 >= v28);
          uint64_t v31 = v30;
LABEL_66:
          uint64_t v2 = a2;
        }
        else
        {
          uint64_t v31 = &p_p[v29];
        }
        if (v31 == v30) {
          uint64_t v32 = -1;
        }
        else {
          uint64_t v32 = v31 - p_p;
        }
      }
      else
      {
        uint64_t v32 = 0;
      }
      BOOL v20 = v32 != -1;
      if ((v23 & 0x80) != 0)
      {
        operator delete(v24);
        if ((v45 & 0x8000000000000000) == 0) {
          goto LABEL_72;
        }
      }
      else if ((v26 & 0x80) == 0)
      {
        goto LABEL_72;
      }
      operator delete(__dst[0]);
LABEL_72:
      if (v32 == -1)
      {
        uint64_t v21 = (long long *)((char *)v21 + 24);
        if (v21 != v40) {
          continue;
        }
      }
      return v20;
    }
  }
  if (v3 != 1) {
    return 0;
  }
  uint64_t v4 = *(long long **)(a1 + 376);
  long long v39 = *(long long **)(a1 + 384);
  if (v4 != v39)
  {
    while (1)
    {
      __dst[1] = 0;
      uint64_t v45 = 0;
      __dst[0] = 0;
      if (*((char *)v4 + 23) < 0)
      {
        sub_10003B098(__dst, *(void **)v4, *((void *)v4 + 1));
      }
      else
      {
        long long v5 = *v4;
        uint64_t v45 = *((void *)v4 + 2);
        *(_OWORD *)__uuid_t dst = v5;
      }
      sub_10003AE4C(v2, (uint64_t)&__p);
      unsigned __int8 v6 = v43;
      uint64_t v7 = __p;
      if ((v43 & 0x80u) == 0) {
        uint64_t v8 = (char *)&__p;
      }
      else {
        uint64_t v8 = (char *)__p;
      }
      char v9 = HIBYTE(v45);
      if (v45 >= 0) {
        id v10 = __dst;
      }
      else {
        id v10 = (void **)__dst[0];
      }
      if (v45 >= 0) {
        int64_t v11 = HIBYTE(v45);
      }
      else {
        int64_t v11 = (int64_t)__dst[1];
      }
      if (v11)
      {
        if ((v43 & 0x80u) == 0) {
          int64_t v12 = v43;
        }
        else {
          int64_t v12 = v42;
        }
        unsigned int v13 = &v8[v12];
        if (v12 >= v11)
        {
          int v16 = *(unsigned __int8 *)v10;
          long long v17 = v8;
          do
          {
            uint64_t v18 = v12 - v11;
            if (v18 == -1) {
              break;
            }
            uint64_t v19 = (char *)memchr(v17, v16, v18 + 1);
            if (!v19) {
              break;
            }
            char v14 = v19;
            if (!memcmp(v19, v10, v11)) {
              goto LABEL_29;
            }
            long long v17 = v14 + 1;
            int64_t v12 = v13 - (v14 + 1);
          }
          while (v12 >= v11);
          char v14 = v13;
LABEL_29:
          uint64_t v2 = a2;
        }
        else
        {
          char v14 = &v8[v12];
        }
        if (v14 == v13) {
          uint64_t v15 = -1;
        }
        else {
          uint64_t v15 = v14 - v8;
        }
      }
      else
      {
        uint64_t v15 = 0;
      }
      BOOL v20 = v15 == -1;
      if ((v6 & 0x80) != 0)
      {
        operator delete(v7);
        if ((v45 & 0x8000000000000000) == 0) {
          goto LABEL_35;
        }
      }
      else if ((v9 & 0x80) == 0)
      {
        goto LABEL_35;
      }
      operator delete(__dst[0]);
LABEL_35:
      if (v15 == -1)
      {
        uint64_t v4 = (long long *)((char *)v4 + 24);
        if (v4 != v39) {
          continue;
        }
      }
      return v20;
    }
  }
  return 1;
}

void sub_1002F84D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002F84F0(os_unfair_lock_s *a1, uint64_t a2, void *a3)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_1003000F4;
  v6[3] = &unk_1009A4CA8;
  id v7 = a3;
  uint64_t v8 = a2;
  id v5 = v7;
  sub_1000098F0(a1 + 48, v6);
}

void sub_1002F858C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002F85A4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)(a1 + 40) + 88), *(void *)(a1 + 32));
}

void sub_1002F85D8(uint64_t a1, unint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = sub_1000066B0(a1, a2, 2u);
  if (!a2 || !v7 || (id v10 = (id *)v9) == 0 || (*(unsigned int (**)(uint64_t))(*(void *)v9 + 16))(v9))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
      sub_100755270();
    }
    goto LABEL_7;
  }
  if ([v8 connectionUseCase]
    || ([v8 useCaseList], (int64_t v12 = objc_claimAutoreleasedReturnValue()) != 0)
    && ([v8 useCaseList],
        unsigned int v13 = objc_claimAutoreleasedReturnValue(),
        id v14 = [v13 count],
        v13,
        v12,
        v14))
  {
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009A4E38);
    }
    int64_t v11 = off_1009F7EB8;
    sub_1000305AC(v21, v7);
    if (sub_1000307A4((uint64_t)v11, v21)) {
      sub_1004335F0((uint64_t)v10, a2, v7, v8);
    }
  }
  else
  {
    uint64_t v15 = [v10[31] objectForKey:v7];

    if (v15)
    {
      int v16 = [v10[31] objectForKeyedSubscript:v7];
      [v16 setOpportunistic:[v8 opportunistic]];
      [v10[31] removeObjectForKey:v7];
      sub_100430414((uint64_t)v10, a2, v7, v16);
      sub_1002F1770(a1);
      goto LABEL_19;
    }
    long long v17 = [v10[32] objectForKey:v7];

    if (v17)
    {
      int v16 = [v10[32] objectForKeyedSubscript:v7];
      [v16 setOpportunistic:[v8 opportunistic]];
      [v10[32] setObject:v16 forKeyedSubscript:v7];
LABEL_19:

      uint64_t v18 = [v10[10] objectForKey:v7];

      if (v18)
      {
        if (qword_1009F7EC0 != -1) {
          dispatch_once(&qword_1009F7EC0, &stru_1009A4E38);
        }
        uint64_t v19 = off_1009F7EB8;
        int v20 = sub_1002F4430(a1, v7);
        sub_10067F6EC((uint64_t)v19, v7, v20, 0);
      }
      goto LABEL_7;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
    {
      sub_10003AE4C(a2, (uint64_t)v21);
      sub_1007552A4();
    }
  }
LABEL_7:
}

void sub_1002F88F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002F8944(os_unfair_lock_s *a1, unint64_t a2, uint64_t a3, void *a4, int a5, int a6, unsigned int a7)
{
  id v13 = a4;
  id v14 = v13;
  if (a3 && a2 && v13)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a3 + 16))(a3) == 3)
    {
      uint64_t v15 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = *(void *)(a3 + 88);
        int v24 = 138543618;
        unsigned __int8 v25 = v14;
        __int16 v26 = 2114;
        uint64_t v27 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "UN: disconnectDeviceForApp for classic  %{public}@ for %{public}@", (uint8_t *)&v24, 0x16u);
      }
      sub_100440CBC(a3, a2, v14, a5);
    }
    else if ((*(unsigned int (**)(uint64_t))(*(void *)a3 + 16))(a3))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
        sub_1007553A0();
      }
    }
    else
    {
      long long v17 = [*(id *)(a3 + 248) objectForKey:v14];
      if (v17)
      {
        BOOL v18 = 1;
      }
      else
      {
        uint64_t v19 = [*(id *)(a3 + 256) objectForKey:v14];
        BOOL v18 = v19 != 0;
      }
      sub_100433F54(a3, a2, v14, a5, a6, a7);
      if (v18 && *(unsigned char *)(a3 + 28))
      {
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEBUG))
        {
          sub_10003AE4C(a2, (uint64_t)&v24);
          sub_100755350();
        }
        sub_1002F84F0(a1, a2, v14);
      }
      if (*(unsigned char *)(a3 + 24) && *(void *)(a3 + 96)) {
        sub_1000560F8((uint64_t)a1);
      }
      int v20 = [*(id *)(a3 + 80) objectForKey:v14];
      BOOL v21 = v20 == 0;

      if (!v21)
      {
        if (qword_1009F7EC0 != -1) {
          dispatch_once(&qword_1009F7EC0, &stru_1009A4E38);
        }
        long long v22 = off_1009F7EB8;
        int v23 = sub_1002F4430((uint64_t)a1, v14);
        sub_10067F6EC((uint64_t)v22, v14, v23, 0);
      }
      sub_1002F41C0((uint64_t)a1, v14);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
  {
    sub_10075531C();
  }
}

void sub_1002F8C58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002F8C80(uint64_t a1, unint64_t a2, void *a3, int a4, int a5, unsigned int a6)
{
  id v17 = a3;
  if (a2)
  {
    int64_t v11 = *(void **)(a1 + 232);
    if (v11)
    {
      int64_t v12 = (void *)(a1 + 232);
      do
      {
        unint64_t v13 = v11[4];
        BOOL v14 = v13 >= a2;
        if (v13 >= a2) {
          uint64_t v15 = v11;
        }
        else {
          uint64_t v15 = v11 + 1;
        }
        if (v14) {
          int64_t v12 = v11;
        }
        int64_t v11 = (void *)*v15;
      }
      while (*v15);
      if (v12 != (void *)(a1 + 232))
      {
        unint64_t v16 = v12[4];
        if (v16 <= a2) {
          sub_1002F8944((os_unfair_lock_s *)a1, v16, v12[5], v17, a4, a5, a6);
        }
      }
    }
  }
}

void sub_1002F8D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1002F8D58(uint64_t a1, void *a2, unsigned int a3)
{
  id v5 = a2;
  unsigned __int8 v6 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = 138412290;
    id v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Disconnecting device %@ for all apps", (uint8_t *)&v13, 0xCu);
  }
  id v7 = *(void **)(a1 + 224);
  if (v7 != (void *)(a1 + 232))
  {
    do
    {
      unint64_t v8 = v7[4];
      uint64_t v9 = v7[5];
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v9 + 16))(v9)
        || (*(unsigned int (**)(uint64_t))(*(void *)v9 + 16))(v9) == 3)
      {
        sub_1002F8944((os_unfair_lock_s *)a1, v8, v9, v5, 1, 0, a3);
      }
      id v10 = (void *)v7[1];
      if (v10)
      {
        do
        {
          int64_t v11 = v10;
          id v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          int64_t v11 = (void *)v7[2];
          BOOL v12 = *v11 == (void)v7;
          id v7 = v11;
        }
        while (!v12);
      }
      id v7 = v11;
    }
    while (v11 != (void *)(a1 + 232));
  }
}

void sub_1002F8EEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002F8F04(uint64_t a1, unint64_t a2, void *a3, void *a4)
{
  id v9 = a3;
  id v7 = a4;
  uint64_t v8 = sub_1000066B0(a1, a2, 0);
  if (v8) {
    sub_10042FB48(v8, a2, v9, v7);
  }
}

void sub_1002F8F88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002F8FA0(uint64_t a1, unint64_t a2, void *a3, char a4)
{
  id v7 = a3;
  uint64_t v8 = sub_1000066B0(a1, a2, 0);
  if (v8) {
    uint64_t v9 = sub_100435844(v8, a2, v7, a4);
  }
  else {
    uint64_t v9 = 12;
  }

  return v9;
}

void sub_1002F9010(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002F9020(uint64_t a1, void *a2, uint64_t a3)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v14 = 0;
  id v5 = a2;
  sub_10004191C(__p, (char *)[v5 UTF8String]);
  unsigned __int8 v6 = *(void **)(a1 + 224);
  id v7 = (void *)(a1 + 232);
  if (v6 != (void *)(a1 + 232))
  {
    do
    {
      uint64_t v8 = (void *)v6[5];
      if (!(*(unsigned int (**)(void *))(*v8 + 16))(v8))
      {
        uint64_t v9 = v8[15];
        if (v9) {
          (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 240))(v9, __p, a3);
        }
      }
      id v10 = (void *)v6[1];
      if (v10)
      {
        do
        {
          int64_t v11 = v10;
          id v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          int64_t v11 = (void *)v6[2];
          BOOL v12 = *v11 == (void)v6;
          unsigned __int8 v6 = v11;
        }
        while (!v12);
      }
      unsigned __int8 v6 = v11;
    }
    while (v11 != v7);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1002F9140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002F916C(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, void *a5)
{
  id v9 = a3;
  id v10 = a5;
  uint64_t v11 = sub_1000066B0(a1, a2, 0);
  if (v11)
  {
    long long v12 = *(_OWORD *)(a4 + 16);
    v15[0] = *(_OWORD *)a4;
    v15[1] = v12;
    int v16 = *(_DWORD *)(a4 + 32);
    uint64_t v13 = sub_10043598C(v11, a2, v9, (uint64_t)v15, v10);
  }
  else
  {
    uint64_t v13 = 12;
  }

  return v13;
}

void sub_1002F9210(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002F9224(uint64_t a1, unint64_t a2, int a3, void *a4, int a5, uint64_t a6)
{
  id v11 = a4;
  uint64_t v12 = sub_1000066B0(a1, a2, 0);
  if (v12) {
    uint64_t v13 = sub_100435A4C(v12, a2, a3, v11, a5, a6);
  }
  else {
    uint64_t v13 = 12;
  }

  return v13;
}

void sub_1002F92AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002F92BC(uint64_t a1, unint64_t a2, int a3, void *a4, uint64_t a5, long long *a6, uint64_t a7, void *a8)
{
  id v15 = a4;
  id v16 = a8;
  uint64_t v17 = sub_1000066B0(a1, a2, 0);
  if (v17)
  {
    long long v18 = a6[1];
    v21[0] = *a6;
    v21[1] = v18;
    uint64_t v19 = sub_100009D78(v17, a2, a3, v15, a5, v21, a7, v16);
  }
  else
  {
    uint64_t v19 = 12;
  }

  return v19;
}

void sub_1002F9378(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002F938C(uint64_t a1, unint64_t a2)
{
  if (!sub_1000066B0(a1, a2, 0)) {
    return 12;
  }

  return sub_100435AF4();
}

uint64_t sub_1002F93DC(uint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = sub_1000066B0(a1, a2, 0);
  if (v6) {
    uint64_t v7 = sub_100435B58(v6, a2, v5);
  }
  else {
    uint64_t v7 = 12;
  }

  return v7;
}

void sub_1002F9444(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002F9454(uint64_t a1, unint64_t a2, void *a3, long long *a4)
{
  id v7 = a3;
  uint64_t v8 = sub_1000066B0(a1, a2, 0);
  if (v8)
  {
    long long v9 = a4[1];
    long long v12 = *a4;
    v13[0] = v9;
    *(_OWORD *)((char *)v13 + 10) = *(long long *)((char *)a4 + 26);
    uint64_t v10 = sub_100435BD8(v8, a2, v7, &v12);
  }
  else
  {
    uint64_t v10 = 12;
  }

  return v10;
}

void sub_1002F94DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002F94EC(uint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = sub_1000066B0(a1, a2, 0);
  if (v6) {
    uint64_t v7 = sub_100435C80(v6, a2, v5);
  }
  else {
    uint64_t v7 = 12;
  }

  return v7;
}

void sub_1002F9554(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002F9564(uint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = sub_1000066B0(a1, a2, 0);
  if (v6) {
    uint64_t v7 = sub_100435D00(v6, a2, v5);
  }
  else {
    uint64_t v7 = 12;
  }

  return v7;
}

void sub_1002F95CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002F95DC(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  uint64_t v8 = sub_1000066B0(a1, a2, 0);
  if (v8)
  {
    long long v9 = *(_OWORD *)(a4 + 16);
    v12[0] = *(_OWORD *)a4;
    v12[1] = v9;
    void v12[2] = *(_OWORD *)(a4 + 32);
    int v13 = *(_DWORD *)(a4 + 48);
    uint64_t v10 = sub_100435D80(v8, a2, v7, (uint64_t)v12);
  }
  else
  {
    uint64_t v10 = 12;
  }

  return v10;
}

void sub_1002F966C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002F967C(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  uint64_t v8 = sub_1000066B0(a1, a2, 0);
  if (v8) {
    uint64_t v9 = sub_100435E30(v8, a2, v7, a4);
  }
  else {
    uint64_t v9 = 12;
  }

  return v9;
}

void sub_1002F96EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002F96FC(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9 = a3;
  uint64_t v10 = sub_1000066B0(a1, a2, 0);
  if (v10) {
    uint64_t v11 = sub_100435EC0(v10, a2, v9, a4, a5);
  }
  else {
    uint64_t v11 = 12;
  }

  return v11;
}

void sub_1002F977C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002F978C(uint64_t a1, unint64_t a2, void *a3, long long *a4)
{
  id v7 = a3;
  uint64_t v8 = sub_1000066B0(a1, a2, 0);
  if (v8)
  {
    long long v11 = *a4;
    uint64_t v12 = *((void *)a4 + 2);
    uint64_t v9 = sub_100435F58(v8, a2, v7, (uint64_t)&v11);
  }
  else
  {
    uint64_t v9 = 12;
  }

  return v9;
}

void sub_1002F9814(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002F9824(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1000066B0(a1, a2, 0);
  if (!v5) {
    return 12;
  }

  return sub_100436000(v5, a2, a3);
}

uint64_t sub_1002F987C(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v11 = a3;
  uint64_t v12 = sub_1000066B0(a1, a2, 0);
  if (v12) {
    uint64_t v13 = sub_10043606C(v12, a2, v11, a4, a5, a6);
  }
  else {
    uint64_t v13 = 12;
  }

  return v13;
}

void sub_1002F9904(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002F9914(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = sub_1000066B0(a1, a2, 0);
  if (!v3) {
    return 12;
  }

  return sub_100436114(v3, a2);
}

uint64_t sub_1002F9964(uint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = sub_1000066B0(a1, a2, 0);
  if (v6) {
    uint64_t v7 = sub_100436178(v6, a2, v5);
  }
  else {
    uint64_t v7 = 12;
  }

  return v7;
}

void sub_1002F99CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002F99DC(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  uint64_t v8 = sub_1000066B0(a1, a2, 0);
  if (v8) {
    uint64_t v9 = sub_1004361F8(v8, a2, v7, a4);
  }
  else {
    uint64_t v9 = 12;
  }

  return v9;
}

void sub_1002F9A4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002F9A5C(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = sub_1000066B0(a1, a2, 0);
  if (v3)
  {
    uint64_t v4 = v3;
    if (*(void *)(v3 + 120))
    {
      id v5 = *(void **)(a1 + 224);
      uint64_t v6 = (void *)(a1 + 232);
      if (v5 != (void *)(a1 + 232))
      {
        do
        {
          uint64_t v7 = v5[5];
          if (!(*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7) && *(int *)(v7 + 376) >= 1)
          {
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v12 = 0;
            sub_10004191C(__p, (char *)[*(id *)(v7 + 88) UTF8String]);
            (*(void (**)(void, void **, uint64_t))(**(void **)(v4 + 120) + 240))(*(void *)(v4 + 120), __p, 1);
            if (SHIBYTE(v12) < 0) {
              operator delete(__p[0]);
            }
          }
          uint64_t v8 = (void *)v5[1];
          if (v8)
          {
            do
            {
              uint64_t v9 = v8;
              uint64_t v8 = (void *)*v8;
            }
            while (v8);
          }
          else
          {
            do
            {
              uint64_t v9 = (void *)v5[2];
              BOOL v10 = *v9 == (void)v5;
              id v5 = v9;
            }
            while (!v10);
          }
          id v5 = v9;
        }
        while (v9 != v6);
      }
    }
  }
}

void sub_1002F9B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002F9BA8(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, unsigned __int8 a8, char a9, char a10, char a11, unsigned __int8 a12, unsigned __int8 a13, char a14, char a15, int a16, int a17)
{
  id v24 = a3;
  uint64_t v25 = sub_1000066B0(a1, a2, 0);
  if (v25)
  {
    if (*(unsigned char *)(v25 + 304))
    {
      char v26 = a15;
      char v27 = a14;
      unsigned __int8 v28 = a13;
      unsigned __int8 v29 = a12;
      char v30 = a11;
      char v31 = a10;
      char v32 = a9;
      if (qword_1009F85D8 != -1)
      {
        dispatch_once(&qword_1009F85D8, &stru_1009A5058);
        char v32 = a9;
        char v31 = a10;
        char v30 = a11;
        unsigned __int8 v29 = a12;
        unsigned __int8 v28 = a13;
        char v27 = a14;
        char v26 = a15;
      }
      HIBYTE(v35) = v31;
      LOBYTE(v35) = v32;
      uint64_t v33 = sub_1005D7400(qword_1009F85D0, a2, v24, a4, a5, a6, a7, a8, v35, v30, v29, v28, v27, v26, a16, a17);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
        sub_100755408();
      }
      uint64_t v33 = 17;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
      sub_1007553D4();
    }
    uint64_t v33 = 1;
  }

  return v33;
}

void sub_1002F9D64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002F9D74(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  if (sub_1000066B0(a1, a2, 0))
  {
    if (qword_1009F85D8 != -1) {
      dispatch_once(&qword_1009F85D8, &stru_1009A5058);
    }
    sub_1005D8C48(qword_1009F85D0, a2, v7, a4);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
  {
    sub_10075543C();
  }
}

void sub_1002F9E30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002F9E40(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000066B0(a1, a2, 1u);
  if (!v6) {
    return 12;
  }
  uint64_t v7 = v6;
  uint64_t result = sub_10043CBFC(v6, a2, a3);
  if (!result)
  {
    if (*(unsigned char *)(v7 + 24))
    {
      if (*(void *)(v7 + 96)) {
        sub_1000560F8(a1);
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_1002F9EB4(uint64_t a1, unint64_t a2, unsigned __int16 a3)
{
  uint64_t v6 = sub_1000066B0(a1, a2, 1u);
  if (!v6) {
    return 12;
  }
  uint64_t v7 = v6;
  uint64_t result = sub_10043D090(v6, a2, a3);
  if (!result)
  {
    if (*(unsigned char *)(v7 + 24))
    {
      if (*(void *)(v7 + 96)) {
        sub_1000560F8(a1);
      }
    }
    return 0;
  }
  return result;
}

void *sub_1002F9F28(void *result, uint64_t a2)
{
  uint64_t v3 = result;
  id v5 = (char *)result[13];
  uint64_t v4 = (char *)result[14];
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        id v5 = (char *)result[14];
        break;
      }
    }
  }
  if (v5 != v4)
  {
    int64_t v6 = v4 - (v5 + 8);
    if (v4 != v5 + 8) {
      uint64_t result = memmove(v5, v5 + 8, v4 - (v5 + 8));
    }
    v3[14] = &v5[v6];
    if (a2)
    {
      uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 8);
      return (void *)v7(a2);
    }
  }
  return result;
}

void sub_1002F9FEC(uint64_t a1, uint64_t a2, int a3)
{
  int64_t v6 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    sub_10003AE4C(a2, (uint64_t)__p);
    uint64_t v7 = v16 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)long long buf = 136446466;
    long long v18 = v7;
    __int16 v19 = 1024;
    int v20 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "advertisingStoppedForSession session:%{public}s result:%d", buf, 0x12u);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
  }
  if (a3 == 116)
  {
    uint64_t v8 = *(void **)(a1 + 224);
    uint64_t v9 = (void *)(a1 + 232);
    if (v8 != (void *)(a1 + 232))
    {
      while (1)
      {
        uint64_t v11 = v8[4];
        uint64_t v10 = v8[5];
        BOOL v12 = (*(unsigned int (**)(uint64_t))(*(void *)v10 + 16))(v10) == 1 && v11 == a2;
        if (v12) {
          break;
        }
        uint64_t v13 = (void *)v8[1];
        if (v13)
        {
          do
          {
            uint64_t v14 = v13;
            uint64_t v13 = (void *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            uint64_t v14 = (void *)v8[2];
            BOOL v12 = *v14 == (void)v8;
            uint64_t v8 = v14;
          }
          while (!v12);
        }
        uint64_t v8 = v14;
        if (v14 == v9) {
          return;
        }
      }
      sub_10043FCF8(v10);
    }
  }
}

void sub_1002FA180(uint64_t a1, uint64_t a2, int a3)
{
}

uint64_t sub_1002FA188(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000066B0(a1, a2, 1u);
  if (!v6) {
    return 12;
  }
  uint64_t v7 = v6;
  uint64_t result = sub_10043D6FC(v6, a2, a3, *(unsigned char *)(v6 + 24));
  if (!result)
  {
    if (*(unsigned char *)(v7 + 24))
    {
      if (*(void *)(v7 + 96)) {
        sub_1000560F8(a1);
      }
    }
    return 0;
  }
  return result;
}

void sub_1002FA200(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_1000066B0(a1, a2, 1u);
  if (v4)
  {
    uint64_t v5 = v4;
    sub_10043DF24(v4, a2);
    if (*(unsigned char *)(v5 + 24) && *(void *)(v5 + 96))
    {
      sub_1000560F8(a1);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
  {
    sub_100755470();
  }
}

uint64_t sub_1002FA2A0(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  uint64_t v8 = sub_1000066B0(a1, a2, 2u);
  uint64_t v9 = v8;
  if (v8)
  {
    BOOL v10 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8) == 1;
    uint64_t v11 = sub_10043E7B8(v9, a2, v7, a4, v10);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
      sub_1007554A4();
    }
    uint64_t v11 = 3;
  }

  return v11;
}

void sub_1002FA370(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002FA380(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009A4E38);
  }
  uint64_t v5 = sub_100686208((uint64_t)off_1009F7EB8, a2, v4);

  return v5;
}

void sub_1002FA3F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002FA400(uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, unsigned __int16 *a6)
{
  uint64_t v11 = sub_1000066B0(a1, a2, 1u);
  if (v11)
  {
    sub_10043F4A0(v11, a2, a3, a4, a5, a6);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
  {
    sub_1007554D8();
  }
}

void sub_1002FA4AC(uint64_t a1, unint64_t a2, void *a3, unsigned __int16 a4)
{
  id v7 = a3;
  uint64_t v8 = sub_1000066B0(a1, a2, 1u);
  if (v8)
  {
    sub_10043F52C(v8, a2, v7, a4);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
  {
    sub_10075550C();
  }
}

void sub_1002FA548(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002FA558(uint64_t a1, unint64_t a2, void *a3, unsigned __int8 **a4, char a5)
{
  id v9 = a3;
  uint64_t v10 = sub_1000066B0(a1, a2, 0);
  if (v10)
  {
    sub_100434C24(v10, a2, v9, a4, a5);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
  {
    sub_100755540();
  }
}

void sub_1002FA5F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002FA604()
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009A4E38);
  }
  int v0 = sub_1006A136C((os_unfair_lock_s *)off_1009F7EB8);
  uint64_t v1 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    v2[0] = 67109120;
    v2[1] = v0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "pauseLeConnectionManager returned %d", (uint8_t *)v2, 8u);
  }
}

void sub_1002FA6DC()
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009A4E38);
  }
  int v0 = sub_10069F19C((uint64_t)off_1009F7EB8);
  uint64_t v1 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    v2[0] = 67109120;
    v2[1] = v0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "resumeConnectionManager returned %d", (uint8_t *)v2, 8u);
  }
}

void sub_1002FA7B4(uint64_t a1, int a2, int a3)
{
  if (a2 == 1)
  {
    uint64_t v10 = v3;
    uint64_t v11 = v4;
    uint64_t v7 = sub_100019878();
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    void v8[2] = sub_1002FA844;
    v8[3] = &unk_100997570;
    void v8[4] = a1;
    int v9 = a3;
    sub_1000197D8(v7, v8);
  }
}

void sub_1002FA844(uint64_t a1, __n128 a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 224);
  uint64_t v5 = (void *)(v3 + 232);
  if (v4 != (void *)(v3 + 232))
  {
    a2.n128_u64[0] = 136315138;
    __n128 v19 = a2;
    while (1)
    {
      uint64_t v7 = v4[4];
      uint64_t v6 = v4[5];
      uint64_t v8 = *(unsigned int *)(a1 + 40);
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
      if (v9 != 3) {
        break;
      }
      if (!v8) {
        uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 72))(v6, v7);
      }
      if (*(void *)(v6 + 216))
      {
        sub_10002FAB0(v9, v6, v7, 5, 1);
        (***(void (****)(void, void, uint64_t))(v6 + 216))(*(void *)(v6 + 216), 0, v8);
      }
LABEL_15:
      uint64_t v11 = (void *)v4[1];
      if (v11)
      {
        do
        {
          BOOL v12 = v11;
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          BOOL v12 = (void *)v4[2];
          BOOL v13 = *v12 == (void)v4;
          uint64_t v4 = v12;
        }
        while (!v13);
      }
      uint64_t v4 = v12;
      if (v12 == v5) {
        goto LABEL_28;
      }
    }
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
    if v10 || (uint64_t v10 = sub_1000536B4(v6), !v10) || (uint64_t v10 = sub_10043B290(v6), (v10))
    {
      if (v8) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v14 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
      {
        sub_10003AE4C(v7, (uint64_t)__p);
        id v15 = v21 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)long long buf = v19.n128_u32[0];
        int v23 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Overriding power to off for session %s", buf, 0xCu);
        if (v21 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 72))(v6, v7);
    uint64_t v8 = 0;
LABEL_13:
    if (*(void *)(v6 + 120))
    {
      sub_10002FAB0(v10, v6, v7, 5, 1);
      (*(void (**)(void, void, uint64_t))(**(void **)(v6 + 120) + 200))(*(void *)(v6 + 120), 0, v8);
    }
    goto LABEL_15;
  }
LABEL_28:
  if (!*(_DWORD *)(a1 + 40))
  {
    if (qword_1009F8158 != -1) {
      dispatch_once(&qword_1009F8158, &stru_1009A5078);
    }
    if (!*((unsigned char *)off_1009F8150 + 202))
    {
      char v16 = qword_100A19F58;
      if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Power toggled off, clearing state restoration data", (uint8_t *)__p, 2u);
      }
      uint64_t v17 = +[NSFileManager defaultManager];
      long long v18 = sub_1002FABF0();
      [v17 removeItemAtURL:v18 error:0];
    }
  }
}

void sub_1002FABD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1002FABF0()
{
  if (qword_100A120F8 != -1) {
    dispatch_once(&qword_100A120F8, &stru_1009A4DD8);
  }
  int v0 = (void *)qword_100A120F0;

  return v0;
}

void sub_1002FAC44(uint64_t a1, char a2)
{
  uint64_t v4 = sub_100019878();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1002FACC8;
  v5[3] = &unk_100998A58;
  void v5[4] = a1;
  char v6 = a2;
  sub_100013018(v4, v5);
}

void sub_1002FACC8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(a1 + 40);
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v30) = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Setting AppManager denylist %d", buf, 8u);
  }
  *(unsigned char *)(v2 + 179) = *(unsigned char *)(a1 + 40);
  if (qword_1009F8748 != -1) {
    dispatch_once(&qword_1009F8748, &stru_1009A4DF8);
  }
  if (sub_100028CB4((uint64_t)off_1009F8740) == 1)
  {
    LODWORD(v6) = *(unsigned char *)(a1 + 40) == 0;
    uint64_t v7 = *(void **)(v2 + 224);
    if (v7 != (void *)(v2 + 232))
    {
      *(void *)&long long v5 = 138543362;
      long long v28 = v5;
      while (1)
      {
        uint64_t v8 = v7[5];
        uint64_t v9 = *(void *)(v8 + 120);
        if (v9)
        {
          if (*(unsigned char *)(v8 + 36))
          {
            uint64_t v10 = qword_100A19F00;
            BOOL v11 = os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT);
            int v12 = *(unsigned __int8 *)(a1 + 40);
            if (v11)
            {
              uint64_t v13 = *(void *)(v8 + 88);
              BOOL v14 = v12 == 0;
              id v15 = "needs";
              if (v14) {
                id v15 = "does not need";
              }
              *(_DWORD *)long long buf = 138543618;
              uint64_t v30 = v13;
              __int16 v31 = 2082;
              char v32 = v15;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "BundleIdentifier %{public}@ %{public}s restricted state operation. Update manager state", buf, 0x16u);
              uint64_t v9 = *(void *)(v8 + 120);
              int v12 = *(unsigned __int8 *)(a1 + 40);
            }
            (*(void (**)(uint64_t, void, BOOL))(*(void *)v9 + 208))(v9, 0, v12 != 0);
            goto LABEL_26;
          }
          if (!*(unsigned char *)(v8 + 37)) {
            break;
          }
        }
LABEL_26:
        char v21 = (void *)v7[1];
        if (v21)
        {
          do
          {
            long long v22 = v21;
            char v21 = (void *)*v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            long long v22 = (void *)v7[2];
            BOOL v14 = *v22 == (void)v7;
            uint64_t v7 = v22;
          }
          while (!v14);
        }
        uint64_t v7 = v22;
        if (v22 == (void *)(v2 + 232)) {
          goto LABEL_32;
        }
      }
      uint64_t v16 = v7[4];
      uint64_t v17 = *(void *)v8;
      if (v6)
      {
        uint64_t v18 = (*(uint64_t (**)(uint64_t))(v17 + 16))(v8);
        if (v18 || (uint64_t v18 = sub_1000536B4(v8), !v18))
        {
          uint64_t v6 = 1;
          goto LABEL_25;
        }
        uint64_t v18 = sub_10043B290(v8);
        if (v18)
        {
          uint64_t v6 = *(unsigned __int8 *)(v2 + 179) ^ 1u;
LABEL_25:
          sub_10002FAB0(v18, v8, v16, 5, 1);
          (*(void (**)(void, void, uint64_t))(**(void **)(v8 + 120) + 200))(*(void *)(v8 + 120), 0, v6);
          goto LABEL_26;
        }
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(v17 + 72))(v8, v16);
        __n128 v19 = qword_100A19F00;
        uint64_t v18 = os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO);
        if (v18)
        {
          uint64_t v20 = *(void *)(v8 + 88);
          *(_DWORD *)long long buf = v28;
          uint64_t v30 = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Faking off power state for bundleIdentifier %{public}@", buf, 0xCu);
        }
      }
      uint64_t v6 = 0;
      goto LABEL_25;
    }
LABEL_32:
    if (!v6)
    {
      int v23 = qword_100A19F58;
      if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT))
      {
        int v24 = *(unsigned __int8 *)(a1 + 40);
        *(_DWORD *)long long buf = 67109120;
        LODWORD(v30) = v24;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Denylist mode turned %d, clearing state restoration data", buf, 8u);
      }
      uint64_t v25 = +[NSFileManager defaultManager];
      char v26 = sub_1002FABF0();
      [v25 removeItemAtURL:v26 error:0];

      sub_1002F1770(v2);
    }
  }
  else
  {
    char v27 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "Ignoring denylist change while power is not ON", buf, 2u);
    }
  }
}

void sub_1002FB104(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002FB120(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = sub_1002FB2C0(a1, v3, 1);
  long long v5 = (void *)(a1 + 232);
  uint64_t v6 = qword_100A19F00;
  if (v5 == v4)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
      sub_1007555E0();
    }
    uint64_t v9 = sub_100052E70();
    (*(void (**)(uint64_t, id))(*(void *)v9 + 128))(v9, v3);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO))
    {
      sub_10003AE4C(v4[4], (uint64_t)__p);
      if (v11 >= 0) {
        uint64_t v7 = __p;
      }
      else {
        uint64_t v7 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 138543618;
      id v13 = v3;
      __int16 v14 = 2082;
      id v15 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Dispatching queued pairing request for device \"%{public}@\" to session \"%{public}s\"", buf, 0x16u);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v8 = sub_100052E70();
    (*(void (**)(uint64_t))(*(void *)v8 + 120))(v8);
  }
}

void sub_1002FB2A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1002FB2C0(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  int v6 = _os_feature_enabled_impl();
  uint64_t v7 = (void *)(a1 + 232);
  uint64_t v8 = *(void **)(a1 + 224);
  if (!v6)
  {
LABEL_13:
    if (v8 != v7)
    {
      id v13 = (void *)(a1 + 232);
      do
      {
        uint64_t v14 = v8[5];
        int v15 = *(unsigned __int8 *)(v14 + 129);
        if (v15 == 16)
        {
          uint64_t v16 = v8;
          if (!(*(unsigned int (**)(void))(*(void *)v14 + 16))(v8[5]))
          {
            uint64_t v16 = v13;
            if (sub_1002F407C(v14, (uint64_t)v5)) {
              goto LABEL_36;
            }
          }
        }
        else if (v15 == 32 && (a3 & 1) == 0 && *(_DWORD *)(v14 + 32) == 2)
        {
          if (!(*(unsigned int (**)(void))(*(void *)v14 + 16))(v8[5])
            && (sub_1002F407C(v14, (uint64_t)v5) & 1) != 0)
          {
            goto LABEL_36;
          }
          if (v13 == v7) {
            uint64_t v16 = v8;
          }
          else {
            uint64_t v16 = v13;
          }
        }
        else
        {
          uint64_t v16 = v13;
        }
        uint64_t v17 = (void *)v8[1];
        if (v17)
        {
          do
          {
            uint64_t v18 = v17;
            uint64_t v17 = (void *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            uint64_t v18 = (void *)v8[2];
            BOOL v12 = *v18 == (void)v8;
            uint64_t v8 = v18;
          }
          while (!v12);
        }
        id v13 = v16;
        uint64_t v8 = v18;
      }
      while (v18 != v7);
      goto LABEL_37;
    }
LABEL_35:
    uint64_t v16 = (void *)(a1 + 232);
    goto LABEL_37;
  }
  if (v8 == v7) {
    goto LABEL_35;
  }
  while (1)
  {
    uint64_t v9 = (id *)v8[5];
    if (!(*((unsigned int (**)(id *))*v9 + 2))(v9)
      && [v9[11] containsString:@"com.apple.deviceaccessd"]
      && (sub_1002F407C((uint64_t)v9, (uint64_t)v5) & 1) != 0)
    {
      break;
    }
    uint64_t v10 = (void *)v8[1];
    if (v10)
    {
      do
      {
        char v11 = v10;
        uint64_t v10 = (void *)*v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        char v11 = (void *)v8[2];
        BOOL v12 = *v11 == (void)v8;
        uint64_t v8 = v11;
      }
      while (!v12);
    }
    uint64_t v8 = v11;
    if (v11 == v7)
    {
      uint64_t v8 = *(void **)(a1 + 224);
      goto LABEL_13;
    }
  }
LABEL_36:
  uint64_t v16 = v8;
LABEL_37:

  return v16;
}

void sub_1002FB4DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002FB4F8(uint64_t a1, void *a2)
{
}

void sub_1002FB500()
{
  int v0 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "LeConnectionManager Paused now", v1, 2u);
  }
}

void sub_1002FB56C()
{
  int v0 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "LeConnectionManager Active now", v1, 2u);
  }
}

void sub_1002FB5D8(uint64_t a1, void *a2, unsigned int a3)
{
  id v5 = a2;
  if (a3) {
    sub_1002FB650(a1, v5, 1u, a3, 1);
  }
}

void sub_1002FB63C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1002FB650(uint64_t a1, void *a2, unsigned int a3, unsigned int a4, int a5)
{
  id v7 = a2;
  int v63 = a5;
  char v66 = a3 | a5;
  unsigned int v67 = a3;
  if ((a3 | a5) == 1)
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009A4EB8);
    }
    uint64_t v8 = off_1009F7ED8;
    sub_10004191C(__p, "_CTKD_");
    int v9 = sub_100030A04((uint64_t)v8, v7, (uint64_t)__p);
    if (v82 < 0) {
      operator delete(__p[0]);
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009A4EB8);
    }
    int v10 = sub_1006BEC8C((uint64_t)off_1009F7ED8, v7);
    char v11 = qword_100A19F38;
    if (os_log_type_enabled((os_log_t)qword_100A19F38, OS_LOG_TYPE_DEFAULT))
    {
      if (a3) {
        id v13 = "ready";
      }
      else {
        id v13 = "disconnected";
      }
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009A4EB8);
      }
      sub_10003093C((uint64_t)off_1009F7ED8, v7, (uint64_t)&v80);
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v14 = &v80;
      }
      else {
        uint64_t v14 = (std::string *)v80.__r_.__value_.__r.__words[0];
      }
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009A4EB8);
      }
      sub_100030DCC((uint64_t)off_1009F7ED8, v7, 1);
      sub_1006AD488();
      id v15 = (id)objc_claimAutoreleasedReturnValue();
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009A4EB8);
      }
      BOOL v16 = sub_1006BB9F4((uint64_t)off_1009F7ED8, v7);
      if (v16)
      {
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009A4EB8);
        }
        sub_100030DCC((uint64_t)off_1009F7ED8, v7, 0);
        sub_1006AD488();
        uint64_t v17 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        uint64_t v17 = &stru_1009C1AC8;
      }
      *(_DWORD *)long long buf = 136447746;
      *(void *)&uint8_t buf[4] = v13;
      *(_WORD *)&unsigned char buf[12] = 2114;
      *(void *)&unsigned char buf[14] = v7;
      *(_WORD *)&unsigned char buf[22] = 2082;
      *(void *)&uint8_t buf[24] = v14;
      __int16 v89 = 1024;
      int v90 = v10;
      __int16 v91 = 2114;
      id v92 = v15;
      __int16 v93 = 2114;
      id v94 = v17;
      __int16 v95 = 1024;
      unsigned int v96 = a4;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Device %{public}s - {cbuuid: %{public}@, devicename: %{public}s, lmHandle: 0x%x, adv-addr: %{public}@, resolved-addr: %{public}@, result: %d}", buf, 0x40u);
      if (v16) {

      }
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v80.__r_.__value_.__l.__data_);
      }
    }
    if (v9) {
      sub_1002FC7F4(a1, v7, v67, a4);
    }
    if (v67) {
      sub_1002F41C0(a1, v7);
    }
    uint64_t v18 = *(void **)(a1 + 224);
    if (v18 != (void *)(a1 + 232))
    {
      __n128 v19 = "disconnection";
      if (v67) {
        __n128 v19 = "connection";
      }
      id v58 = v19;
      if (v67) {
        int v20 = 2;
      }
      else {
        int v20 = 1;
      }
      unsigned int v59 = v20;
      if (a4) {
        unsigned int v21 = 0;
      }
      else {
        unsigned int v21 = v67;
      }
      unint64_t v60 = a1 + 104;
      if (a4) {
        char v22 = v67;
      }
      else {
        char v22 = 0;
      }
      unsigned int v61 = v21;
      char v62 = v22;
      *(void *)&long long v12 = 67109634;
      long long v57 = v12;
      while (1)
      {
        uint64_t v23 = v18[4];
        uint64_t v24 = v18[5];
        memset(&v80, 0, sizeof(v80));
        sub_100551758(v23, &v80);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v24 + 16))(v24) == 1)
        {
          if ((v67 & 1) == 0)
          {
            [*(id *)(v24 + 80) removeObjectForKey:v7];
            long long v78 = 0u;
            long long v79 = 0u;
            long long v76 = 0u;
            long long v77 = 0u;
            id v25 = *(id *)(v24 + 216);
            id v26 = [v25 countByEnumeratingWithState:&v76 objects:v87 count:16];
            if (v26)
            {
              uint64_t v27 = *(void *)v77;
              do
              {
                for (uint64_t i = 0; i != v26; uint64_t i = (char *)i + 1)
                {
                  if (*(void *)v77 != v27) {
                    objc_enumerationMutation(v25);
                  }
                  unsigned __int8 v29 = [*(id *)(v24 + 216) objectForKeyedSubscript:*(void *)(*((void *)&v76 + 1) + 8 * i), v57];
                  [v29 removeObjectForKey:v7];
                }
                id v26 = [v25 countByEnumeratingWithState:&v76 objects:v87 count:16];
              }
              while (v26);
            }

            if (!sub_10043FDF0(v24, v7, 0) && *(unsigned char *)(v24 + 28))
            {
              uint64_t v30 = qword_100A19F00;
              if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEBUG))
              {
                sub_10003AE4C(v23, (uint64_t)v83);
                BOOL v48 = v83;
                if (v86 < 0) {
                  BOOL v48 = *(unsigned char **)v83;
                }
                *(void *)long long buf = v57;
                *(_WORD *)&uint8_t buf[8] = 2082;
                *(void *)&buf[10] = v48;
                *(_WORD *)&buf[18] = 2114;
                *(void *)&buf[20] = v7;
                _os_log_debug_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "deviceConnectionChanged, isConnection=%d, Notifying listeners that %{public}s is not interested in %{public}@", buf, 0x1Cu);
                if (v86 < 0) {
                  operator delete(*(void **)v83);
                }
              }
              sub_1002F84F0((os_unfair_lock_s *)a1, v23, v7);
            }
          }
          goto LABEL_103;
        }
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v24 + 16))(v24)) {
          break;
        }
LABEL_103:
        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v80.__r_.__value_.__l.__data_);
        }
        uint64_t v45 = (void *)v18[1];
        if (v45)
        {
          do
          {
            id v46 = v45;
            uint64_t v45 = (void *)*v45;
          }
          while (v45);
        }
        else
        {
          do
          {
            id v46 = (void *)v18[2];
            BOOL v47 = *v46 == (void)v18;
            uint64_t v18 = v46;
          }
          while (!v47);
        }
        uint64_t v18 = v46;
        if (v46 == (void *)(a1 + 232)) {
          goto LABEL_116;
        }
      }
      __int16 v31 = [*(id *)(v24 + 248) objectForKeyedSubscript:v7];
      if (sub_10042FE64(v24))
      {
        *(void *)unsigned int v83 = 0;
        if (qword_1009F7EC0 != -1) {
          dispatch_once(&qword_1009F7EC0, &stru_1009A4E38);
        }
        char v32 = off_1009F7EB8;
        sub_1000305AC(buf, v7);
        if (sub_1006856B8((uint64_t)v32, buf, v83))
        {
          uint64_t v33 = sub_1002C5648();
          if (v67) {
            sub_1002C8EE0(v33, *(unint64_t *)v83, v60);
          }
          else {
            sub_1002C8FBC(v33, *(unint64_t *)v83, v60);
          }
        }
      }
      if (v31)
      {
        uint64_t v34 = qword_100A19F00;
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
        {
          sub_10003AE4C(v23, (uint64_t)buf);
          __int16 v35 = buf;
          if (buf[23] < 0) {
            __int16 v35 = *(unsigned char **)buf;
          }
          *(_DWORD *)unsigned int v83 = 138543618;
          *(void *)&v83[4] = v7;
          __int16 v84 = 2082;
          long long v85 = v35;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Dispatching connection status update for device \"%{public}@\" to session \"%{public}s\"", v83, 0x16u);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
        if (v61)
        {
          memset(buf, 0, 24);
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009A4EB8);
          }
          sub_1006BE040((uint64_t)off_1009F7ED8, v7, (uint64_t *)buf);
          uint64_t v36 = sub_100050530();
          sub_10030BA54(v75, (const void ***)buf);
          (*(void (**)(uint64_t, id, uint64_t *, void))(*(void *)v36 + 672))(v36, v7, v75, 0);
          sub_10004BA28((uint64_t)v75, (char *)v75[1]);
          sub_1002F7D44(v37, v23, v24, v7, 0, 0);
          sub_10004BA28((uint64_t)buf, *(char **)&buf[8]);
        }
        else
        {
          id v40 = [*(id *)(v24 + 80) removeObjectForKey:v7];
          if (v67)
          {
            sub_1002F7D44((uint64_t)v40, v23, v24, v7, a4, 0);
LABEL_102:

            goto LABEL_103;
          }
          id v41 = [v31 enableAutoReconnect];
          sub_1002FC9CC((uint64_t)v41, v23, v24, v7, a4, (uint64_t)v41);
          if ([v31 enableAutoReconnect])
          {
            uint64_t v42 = sub_100019878();
            v68[0] = _NSConcreteStackBlock;
            v68[1] = 3221225472;
            v68[2] = sub_1002FCC78;
            v68[3] = &unk_1009A4CF0;
            uint64_t v71 = a1;
            uint64_t v72 = v23;
            uint64_t v73 = v24;
            id v69 = v7;
            char v74 = v63;
            id v70 = v31;
            sub_100013018(v42, v68);
          }
          else
          {
            [*(id *)(v24 + 248) removeObjectForKey:v7];
          }
        }
        if (!*(unsigned char *)(v24 + 24) && *(unsigned char *)(v24 + 129) == 4)
        {
          if (v67)
          {
            if (([v31 connectionAlerts] & 1) == 0) {
              goto LABEL_83;
            }
          }
          else if (![v31 disconnectionAlerts])
          {
LABEL_83:
            uint64_t v38 = qword_100A19F00;
            if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO))
            {
              sub_10003AE4C(v23, (uint64_t)v83);
              long long v39 = v83;
              if (v86 < 0) {
                long long v39 = *(unsigned char **)v83;
              }
              *(_DWORD *)long long buf = 136446722;
              *(void *)&uint8_t buf[4] = v58;
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&unsigned char buf[14] = v39;
              *(_WORD *)&unsigned char buf[22] = 2114;
              *(void *)&uint8_t buf[24] = v7;
              _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "Suppressing %{public}s alert on session \"%{public}s\" for device \"%{public}@\"", buf, 0x20u);
              if (v86 < 0) {
                operator delete(*(void **)v83);
              }
            }
            goto LABEL_95;
          }
          uint64_t v43 = sub_100052E70();
          (*(void (**)(uint64_t, uint64_t, id, void))(*(void *)v43 + 96))(v43, v23, v7, v59);
        }
      }
LABEL_95:
      if (*(unsigned char *)(v24 + 45))
      {
        if (qword_1009F7ED0 != -1) {
          dispatch_once(&qword_1009F7ED0, &stru_1009A4E98);
        }
        sub_100708B14(qword_1009F7EC8, v7, 1);
      }
      if ((v62 & 1) == 0)
      {
        uint64_t v44 = *(void *)(v24 + 120);
        if (v44) {
          (*(void (**)(uint64_t, void, id, void))(*(void *)v44 + 24))(v44, 0, v7, v67);
        }
      }
      goto LABEL_102;
    }
  }
LABEL_116:
  int v49 = *(void **)(a1 + 224);
  if (v49 != (void *)(a1 + 232))
  {
    do
    {
      uint64_t v51 = v49[4];
      long long v50 = (id *)v49[5];
      if (!(*((unsigned int (**)(id *))*v50 + 2))(v50))
      {
        uint64_t v52 = [v50[31] objectForKeyedSubscript:v7];
        if (v52)
        {
          if ((v66 & 1) == 0)
          {
            sub_1002F7D44((uint64_t)[v50[10] removeObjectForKey:v7], v51, (uint64_t)v50, v7, a4, 0);
            [v50[31] removeObjectForKey:v7];
          }
        }
        else
        {
          uint64_t v52 = [v50[32] objectForKey:v7];
          if (v52)
          {
            id v53 = qword_100A19F00;
            if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
            {
              sub_10003AE4C(v51, (uint64_t)&v80);
              int v54 = (v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                  ? &v80
                  : (std::string *)v80.__r_.__value_.__r.__words[0];
              *(_DWORD *)long long buf = 138543874;
              *(void *)&uint8_t buf[4] = v7;
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&unsigned char buf[14] = v54;
              *(_WORD *)&unsigned char buf[22] = 1024;
              *(_DWORD *)&uint8_t buf[24] = v63;
              _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "Reconnecting device \"%{public}@\" for session \"%{public}s\" linkReady %d", buf, 0x1Cu);
              if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v80.__r_.__value_.__l.__data_);
              }
            }
            [v50[32] removeObjectForKey:v7];
            sub_100430414((uint64_t)v50, v51, v7, v52);
          }
        }
      }
      int v55 = (void *)v49[1];
      if (v55)
      {
        do
        {
          unsigned int v56 = v55;
          int v55 = (void *)*v55;
        }
        while (v55);
      }
      else
      {
        do
        {
          unsigned int v56 = (void *)v49[2];
          BOOL v47 = *v56 == (void)v49;
          int v49 = v56;
        }
        while (!v47);
      }
      int v49 = v56;
    }
    while (v56 != (void *)(a1 + 232));
  }
}

void sub_1002FC2DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a52 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1002FC3E4(uint64_t a1, void *a2, unsigned int a3)
{
}

void sub_1002FC3EC(uint64_t a1, void *a2, char a3, int a4, char a5, int a6)
{
  id v11 = a2;
  uint64_t v12 = sub_100019878();
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  void v14[2] = sub_1002FC4E4;
  v14[3] = &unk_100998A10;
  uint64_t v16 = a1;
  id v13 = v11;
  id v15 = v13;
  char v19 = a3;
  char v20 = a5;
  int v17 = a4;
  int v18 = a6;
  sub_100013018(v12, v14);
}

void sub_1002FC4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1002FC4E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(unsigned __int8 *)(a1 + 56);
    int v6 = *(unsigned __int8 *)(a1 + 57);
    int v7 = *(_DWORD *)(a1 + 48);
    int v8 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)long long buf = 138544386;
    uint64_t v18 = v4;
    __int16 v19 = 1024;
    int v20 = v5;
    __int16 v21 = 1024;
    int v22 = v7;
    __int16 v23 = 1024;
    int v24 = v6;
    __int16 v25 = 1024;
    int v26 = v8;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "PeerInfoCB device:%{public}@ peerVersion:%d peerFeatures:%x localVersoin:%d localFeatures:%x", buf, 0x24u);
  }
  int v9 = *(void **)(v2 + 224);
  int v10 = (void *)(v2 + 232);
  if (v9 != (void *)(v2 + 232))
  {
    do
    {
      uint64_t v11 = v9[4];
      uint64_t v12 = (void *)v9[5];
      uint64_t v13 = (*(uint64_t (**)(void *))(*v12 + 16))(v12);
      if (!v13) {
        sub_1002FC66C(v13, v11, v12, *(void **)(a1 + 32), 0);
      }
      uint64_t v14 = (void *)v9[1];
      if (v14)
      {
        do
        {
          id v15 = v14;
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          id v15 = (void *)v9[2];
          BOOL v16 = *v15 == (void)v9;
          int v9 = v15;
        }
        while (!v16);
      }
      int v9 = v15;
    }
    while (v15 != v10);
  }
}

void sub_1002FC66C(uint64_t a1, uint64_t a2, void *a3, void *a4, int a5)
{
  id v8 = a4;
  if (sub_1002F407C((uint64_t)a3, (uint64_t)v8))
  {
    int v9 = qword_100A19F00;
    BOOL v10 = os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      int v11 = 138543362;
      id v12 = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Device %{public}@ ready for CL", (uint8_t *)&v11, 0xCu);
    }
    sub_10002FAB0(v10, (uint64_t)a3, a2, 10, 1);
    sub_100436354(a3, v8, a5);
  }
}

void sub_1002FC78C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002FC7A4(uint64_t a1, void *a2, char a3, int a4, char a5, int a6)
{
}

void sub_1002FC7AC(uint64_t a1, void *a2, unsigned int a3)
{
}

void sub_1002FC7BC(uint64_t a1, void *a2, unsigned int a3)
{
}

void sub_1002FC7D0(uint64_t a1, void *a2, unsigned int a3)
{
}

void sub_1002FC7E0(uint64_t a1, void *a2, unsigned int a3)
{
}

void sub_1002FC7F4(uint64_t a1, void *a2, int a3, int a4)
{
  id v7 = a2;
  if (a4) {
    goto LABEL_17;
  }
  if (!a3) {
    goto LABEL_17;
  }
  id v8 = *(void **)(a1 + 224);
  int v9 = (void *)(a1 + 232);
  if (v8 == (void *)(a1 + 232)) {
    goto LABEL_17;
  }
  while ((*(unsigned int (**)(void))(*(void *)v8[5] + 16))(v8[5]))
  {
LABEL_11:
    uint64_t v14 = (void *)v8[1];
    if (v14)
    {
      do
      {
        id v15 = v14;
        uint64_t v14 = (void *)*v14;
      }
      while (v14);
    }
    else
    {
      do
      {
        id v15 = (void *)v8[2];
        BOOL v16 = *v15 == (void)v8;
        id v8 = v15;
      }
      while (!v16);
    }
    id v8 = v15;
    if (v15 == v9) {
      goto LABEL_17;
    }
  }
  uint64_t v10 = v8[5];
  int v11 = [*(id *)(v10 + 248) objectForKeyedSubscript:v7];
  unsigned int v12 = sub_1002F407C(v10, (uint64_t)v7);
  if (v11) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v13 != 1 || ![v11 enableTransportBridging])
  {

    goto LABEL_11;
  }
  int v17 = qword_100A19F00;
  BOOL v18 = os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT);
  if (v18)
  {
    uint64_t v19 = *(void *)(v10 + 88);
    int v20 = 138543618;
    id v21 = v7;
    __int16 v22 = 2114;
    uint64_t v23 = v19;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Bridgable device %{public}@ connected for %{public}@", (uint8_t *)&v20, 0x16u);
  }
  sub_100305684(v18, v10, v7);

LABEL_17:
}

void sub_1002FC9A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002FC9CC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  id v10 = a4;
  int v11 = qword_100A19F30;
  BOOL v12 = os_log_type_enabled((os_log_t)qword_100A19F30, OS_LOG_TYPE_DEFAULT);
  if (v12)
  {
    uint64_t v13 = *(void *)(a3 + 88);
    uint64_t v14 = "N";
    *(_DWORD *)long long buf = 138543874;
    if (a6) {
      uint64_t v14 = "Y";
    }
    *(void *)&uint8_t buf[4] = v10;
    *(_WORD *)&unsigned char buf[12] = 2114;
    *(void *)&unsigned char buf[14] = v13;
    *(_WORD *)&unsigned char buf[22] = 2080;
    *(void *)&uint8_t buf[24] = v14;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "App disconnected - {cbuuid: %{public}@, bundle: %{public}@, reconnecting: %s}", buf, 0x20u);
  }
  sub_10002FAB0(v12, a3, a2, 10, 1);
  sub_100437FB8(a3, v10, a5, a6);
  uint64_t v15 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v15 + 344))(v15))
  {
    BOOL v16 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      *(_DWORD *)long long buf = 134217984;
      *(double *)&uint8_t buf[4] = Current + 5.0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Adding grace period fLastGattAssertionGraceInit %f", buf, 0xCu);
    }
    *(CFAbsoluteTime *)(a3 + 56) = CFAbsoluteTimeGetCurrent() + 5.0;
  }
  uint64_t v22 = 0;
  long long v21 = 0u;
  memset(buf, 0, sizeof(buf));
  sub_10004191C(__p, (char *)[*(id *)(a3 + 88) UTF8String]);
  sub_1004B8F54((uint64_t)buf, (long long *)__p, *(unsigned char *)(a3 + 129), v10, a5);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  if (qword_1009FB260 != -1) {
    dispatch_once(&qword_1009FB260, &stru_1009A4FF8);
  }
  sub_1000504D8();

  if ((char)buf[31] < 0) {
    operator delete(*(void **)&buf[8]);
  }
}

void sub_1002FCC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  _Unwind_Resume(a1);
}

void sub_1002FCC78(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v4 = *(void **)(v1 + 232);
  uint64_t v2 = (void *)(v1 + 232);
  id v3 = v4;
  if (v4)
  {
    unint64_t v6 = *(void *)(a1 + 56);
    id v7 = v2;
    do
    {
      unint64_t v8 = v3[4];
      BOOL v9 = v8 >= v6;
      if (v8 >= v6) {
        id v10 = v3;
      }
      else {
        id v10 = v3 + 1;
      }
      if (v9) {
        id v7 = v3;
      }
      id v3 = (void *)*v10;
    }
    while (*v10);
    if (v7 != v2 && v6 >= v7[4])
    {
      [*(id *)(*(void *)(a1 + 64) + 248) removeObjectForKey:*(void *)(a1 + 32)];
      int v11 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 32);
        sub_10003AE4C(*(void *)(a1 + 56), (uint64_t)__p);
        if (v16 >= 0) {
          uint64_t v13 = __p;
        }
        else {
          uint64_t v13 = (void **)__p[0];
        }
        int v14 = *(unsigned __int8 *)(a1 + 72);
        *(_DWORD *)long long buf = 138543874;
        uint64_t v18 = v12;
        __int16 v19 = 2082;
        int v20 = v13;
        __int16 v21 = 1024;
        int v22 = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Auto Reconnecting device \"%{public}@\" for session \"%{public}s\" linkReady %d", buf, 0x1Cu);
        if (v16 < 0) {
          operator delete(__p[0]);
        }
      }
      sub_100430414(*(void *)(a1 + 64), *(void *)(a1 + 56), *(void **)(a1 + 32), *(void **)(a1 + 40));
    }
  }
}

void sub_1002FCDD4(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v11 = a3;
  uint64_t v9 = sub_1000066B0(a1, a2, 0);
  if (v9)
  {
    uint64_t v10 = *(void *)(v9 + 120);
    if (v10) {
      (*(void (**)(uint64_t, void, id, uint64_t, uint64_t))(*(void *)v10 + 48))(v10, 0, v11, a4, a5);
    }
  }
}

void sub_1002FCE7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1002FCE90(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
}

void sub_1002FCE98(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v9 = a2;
  uint64_t v10 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO))
  {
    int v17 = 138543362;
    id v18 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Dispatching connection parameters update for device \"%{public}@\"", (uint8_t *)&v17, 0xCu);
  }
  id v11 = *(void **)(a1 + 224);
  uint64_t v12 = (void *)(a1 + 232);
  if (v11 != v12)
  {
    do
    {
      uint64_t v13 = *(void *)(v11[5] + 120);
      if (v13) {
        (*(void (**)(uint64_t, void, id, uint64_t, uint64_t, uint64_t))(*(void *)v13 + 216))(v13, 0, v9, a3, a4, a5);
      }
      int v14 = (void *)v11[1];
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          int v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          uint64_t v15 = (void *)v11[2];
          BOOL v16 = *v15 == (void)v11;
          id v11 = v15;
        }
        while (!v16);
      }
      id v11 = v15;
    }
    while (v15 != v12);
  }
}

void sub_1002FCFF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002FD008(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void sub_1002FD018(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v15 = a3;
  id v18 = *(void **)(a1 + 232);
  int v17 = (void *)(a1 + 232);
  BOOL v16 = v18;
  if (!v18) {
    goto LABEL_12;
  }
  __int16 v19 = v17;
  do
  {
    unint64_t v20 = v16[4];
    BOOL v21 = v20 >= a2;
    if (v20 >= a2) {
      int v22 = v16;
    }
    else {
      int v22 = v16 + 1;
    }
    if (v21) {
      __int16 v19 = v16;
    }
    BOOL v16 = (void *)*v22;
  }
  while (*v22);
  if (v19 != v17 && (unint64_t v23 = v19[4], v23 <= a2))
  {
    __int16 v25 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO))
    {
      sub_10003AE4C(v23, (uint64_t)__p);
      int v26 = v29 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)long long buf = 138543618;
      id v31 = v15;
      __int16 v32 = 2082;
      uint64_t v33 = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "Dispatching leDeviceTimeSyncResponse for device \"%{public}@\" to session \"%{public}s\"", buf, 0x16u);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v27 = *(void *)(v19[5] + 120);
    if (v27) {
      (*(void (**)(uint64_t, void, id, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v27 + 224))(v27, 0, v15, a4, a5, a6, a7, a8);
    }
  }
  else
  {
LABEL_12:
    int v24 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "leDeviceTimeSyncResponse no session found", (uint8_t *)__p, 2u);
    }
  }
}

void sub_1002FD20C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002FD228(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1002FD230(uint64_t a1, void *a2, uint64_t a3)
{
  id v11 = a2;
  int v5 = *(void **)(a1 + 224);
  unint64_t v6 = (void *)(a1 + 232);
  if (v5 != v6)
  {
    do
    {
      uint64_t v7 = *(void *)(v5[5] + 120);
      if (v7) {
        (*(void (**)(uint64_t, void, id, uint64_t))(*(void *)v7 + 232))(v7, 0, v11, a3);
      }
      unint64_t v8 = (void *)v5[1];
      if (v8)
      {
        do
        {
          id v9 = v8;
          unint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          id v9 = (void *)v5[2];
          BOOL v10 = *v9 == (void)v5;
          int v5 = v9;
        }
        while (!v10);
      }
      int v5 = v9;
    }
    while (v9 != v6);
  }
}

void sub_1002FD304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1002FD318(uint64_t a1, void *a2, uint64_t a3)
{
}

void sub_1002FD320(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  id v22 = a2;
  id v15 = *(void **)(a1 + 224);
  BOOL v16 = (void *)(a1 + 232);
  if (v15 != (void *)(a1 + 232))
  {
    do
    {
      uint64_t v17 = v15[5];
      uint64_t v18 = *(void *)(v17 + 120);
      if (v18 && *(unsigned char *)(v17 + 184))
      {
        if (a3 == 138)
        {
          if (!(*(unsigned int (**)(void))(*(void *)v17 + 16))(v15[5]))
          {
            sub_10043C2F0(v17, v22, 138, a4, a5, a6, a7, a8);
            goto LABEL_8;
          }
          uint64_t v18 = *(void *)(v17 + 120);
        }
        (*(void (**)(uint64_t, void, id, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))(*(void *)v18 + 80))(v18, 0, v22, a3, a4, a5, a6, a7, a8);
      }
LABEL_8:
      __int16 v19 = (void *)v15[1];
      if (v19)
      {
        do
        {
          unint64_t v20 = v19;
          __int16 v19 = (void *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          unint64_t v20 = (void *)v15[2];
          BOOL v21 = *v20 == (void)v15;
          id v15 = v20;
        }
        while (!v21);
      }
      id v15 = v20;
    }
    while (v20 != v16);
  }
}

void sub_1002FD4A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1002FD4B8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
}

void sub_1002FD4C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __chkstk_darwin(a1, a2);
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  id v7 = v6;
  unint64_t v8 = *(void **)(v5 + 224);
  id v9 = (void *)(v5 + 232);
  if (v8 != (void *)(v5 + 232))
  {
    do
    {
      uint64_t v10 = v8[5];
      uint64_t v11 = *(void *)(v10 + 120);
      if (v11 && *(unsigned char *)(v10 + 185))
      {
        memcpy(__dst, v4, sizeof(__dst));
        (*(void (**)(uint64_t, void, id, unsigned char *))(*(void *)v11 + 88))(v11, 0, v7, __dst);
      }
      uint64_t v12 = (void *)v8[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)v8[2];
          BOOL v14 = *v13 == (void)v8;
          unint64_t v8 = v13;
        }
        while (!v14);
      }
      unint64_t v8 = v13;
    }
    while (v13 != v9);
  }
}

void sub_1002FD5F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002FD608(uint64_t a1, uint64_t a2)
{
}

void sub_1002FD610(uint64_t a1, void *a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, char a8, char a9, char a10, char a11, char a12, __int16 a13, int a14, char a15)
{
  id v30 = a2;
  uint64_t v17 = *(void **)(a1 + 224);
  uint64_t v18 = (void *)(a1 + 232);
  if (v17 != v18)
  {
    do
    {
      uint64_t v19 = *(void *)(v17[5] + 120);
      if (v19)
      {
        BYTE4(v24) = a15;
        LODWORD(v24) = a14;
        HIWORD(v23) = a13;
        BYTE4(v23) = a12;
        BYTE3(v23) = a11;
        BYTE2(v23) = a10;
        BYTE1(v23) = a9;
        LOBYTE(v23) = a8;
        (*(void (**)(uint64_t, void, id, uint64_t, void, void, void, uint64_t, uint64_t, uint64_t))(*(void *)v19 + 96))(v19, 0, v30, a3, a4, a5, a6, a7, v23, v24);
      }
      unint64_t v20 = (void *)v17[1];
      if (v20)
      {
        do
        {
          BOOL v21 = v20;
          unint64_t v20 = (void *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          BOOL v21 = (void *)v17[2];
          BOOL v22 = *v21 == (void)v17;
          uint64_t v17 = v21;
        }
        while (!v22);
      }
      uint64_t v17 = v21;
    }
    while (v21 != v18);
  }
}

void sub_1002FD758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  _Unwind_Resume(a1);
}

void sub_1002FD76C(uint64_t a1, void *a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, char a8, char a9, char a10, char a11, char a12, __int16 a13, int a14, char a15)
{
}

void sub_1002FD7AC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v19 = a2;
  uint64_t v13 = *(void **)(a1 + 224);
  BOOL v14 = (void *)(a1 + 232);
  if (v13 != v14)
  {
    do
    {
      uint64_t v15 = *(void *)(v13[5] + 120);
      if (v15) {
        (*(void (**)(uint64_t, void, id, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v15 + 104))(v15, 0, v19, a3, a4, a5, a6, a7);
      }
      BOOL v16 = (void *)v13[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          BOOL v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (void *)v13[2];
          BOOL v18 = *v17 == (void)v13;
          uint64_t v13 = v17;
        }
        while (!v18);
      }
      uint64_t v13 = v17;
    }
    while (v17 != v14);
  }
}

void sub_1002FD8B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1002FD8C4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

void sub_1002FD8CC(uint64_t a1, void *a2, _OWORD *a3, uint64_t a4)
{
  id v7 = a2;
  unint64_t v8 = *(void **)(a1 + 224);
  id v9 = (void *)(a1 + 232);
  if (v8 != (void *)(a1 + 232))
  {
    do
    {
      uint64_t v10 = v8[5];
      if (*(void *)(v10 + 120))
      {
        unint64_t v11 = v8[4];
        if (qword_1009F7EC0 != -1) {
          dispatch_once(&qword_1009F7EC0, &stru_1009A4E38);
        }
        uint64_t v12 = off_1009F7EB8;
        sub_1000305AC(v19, v7);
        if (sub_100052EFC((uint64_t)v12, v11, v19))
        {
          uint64_t v13 = *(void *)(v10 + 120);
          long long v14 = a3[1];
          v18[0] = *a3;
          v18[1] = v14;
          (*(void (**)(uint64_t, void, id, _OWORD *, uint64_t))(*(void *)v13 + 112))(v13, 0, v7, v18, a4);
        }
      }
      uint64_t v15 = (void *)v8[1];
      if (v15)
      {
        do
        {
          BOOL v16 = v15;
          uint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          BOOL v16 = (void *)v8[2];
          BOOL v17 = *v16 == (void)v8;
          unint64_t v8 = v16;
        }
        while (!v17);
      }
      unint64_t v8 = v16;
    }
    while (v16 != v9);
  }
}

void sub_1002FDA40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002FDA5C(uint64_t a1, void *a2, _OWORD *a3, uint64_t a4)
{
}

void sub_1002FDA64(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 176))
  {
    uint64_t v2 = sub_100019878();
    sub_1004AFF58(v2, 5000, &stru_1009A4D10);
    *(unsigned char *)(a1 + 176) = 1;
  }
}

void sub_1002FDAA8(id a1)
{
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009A4FD8);
  }
  uint64_t v1 = off_1009F8780;

  sub_1002FDAFC((uint64_t)v1);
}

void sub_1002FDAFC(uint64_t a1)
{
  *(unsigned char *)(a1 + 176) = 0;
  sub_1002F1770(a1);
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009A4E38);
  }
  uint64_t v2 = sub_10004034C((uint64_t)off_1009F7EB8);
  if ([v2 count])
  {

LABEL_6:
    sub_1002FDA64(a1);
    return;
  }
  id v3 = [*(id *)(a1 + 328) count];

  if (v3) {
    goto LABEL_6;
  }
  uint64_t v4 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Stopping device disconnection watchdog, as there are no more devices connected", v5, 2u);
  }
}

void sub_1002FDC00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002FDC10(uint64_t a1, unint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  id v7 = *(void **)(a1 + 232);
  uint64_t v5 = (void *)(a1 + 232);
  id v6 = v7;
  if (v7)
  {
    uint64_t v12 = v5;
    do
    {
      unint64_t v13 = v6[4];
      BOOL v14 = v13 >= a2;
      if (v13 >= a2) {
        uint64_t v15 = v6;
      }
      else {
        uint64_t v15 = v6 + 1;
      }
      if (v14) {
        uint64_t v12 = v6;
      }
      id v6 = (void *)*v15;
    }
    while (*v15);
    if (v12 != v5 && v12[4] <= a2 && !(*(unsigned int (**)(void))(*(void *)v12[5] + 16))(v12[5]))
    {
      uint64_t v16 = v12[5];
      BOOL v17 = qword_100A19F00;
      BOOL v18 = os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT);
      if (v18)
      {
        sub_10003AE4C(a2, (uint64_t)__p);
        if (v21 >= 0) {
          id v19 = __p;
        }
        else {
          id v19 = (void **)__p[0];
        }
        *(_DWORD *)long long buf = 136446978;
        uint64_t v23 = v19;
        __int16 v24 = 1024;
        int v25 = a3;
        __int16 v26 = 2048;
        uint64_t v27 = a4;
        __int16 v28 = 2048;
        uint64_t v29 = a5;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "leScanComplete session %{public}s result=%d totalRXTimeMS:%llu BtMCRxTimeMS:%llu", buf, 0x26u);
        if (v21 < 0) {
          operator delete(__p[0]);
        }
      }
      sub_10002FAB0(v18, v16, a2, 10, 0);
      sub_100437740(v16, a2, a3, a4);
    }
  }
}

void sub_1002FDDBC(uint64_t a1, unint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
}

void *sub_1002FDDC4(void *result, uint64_t a2, uint64_t a3)
{
  id v3 = (void *)result[28];
  uint64_t v4 = result + 29;
  if (v3 != result + 29)
  {
    do
    {
      id v7 = (void *)v3[5];
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*v7 + 16))(v7);
      if (!result)
      {
        uint64_t result = (void *)v7[15];
        if (result) {
          uint64_t result = (void *)(*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*result + 64))(result, 0, a2, a3);
        }
      }
      unint64_t v8 = (void *)v3[1];
      if (v8)
      {
        do
        {
          id v9 = v8;
          unint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          id v9 = (void *)v3[2];
          BOOL v10 = *v9 == (void)v3;
          id v3 = v9;
        }
        while (!v10);
      }
      id v3 = v9;
    }
    while (v9 != v4);
  }
  return result;
}

void *sub_1002FDEA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FDDC4((void *)(a1 - 32), a2, a3);
}

void sub_1002FDEB0()
{
  int v0 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "LE Scans Paused", v1, 2u);
  }
}

void sub_1002FDF1C()
{
  int v0 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "LE Scans Resumed", v1, 2u);
  }
}

void sub_1002FDF88(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9 = a3;
  BOOL v10 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    int v19 = 138543874;
    id v20 = v9;
    __int16 v21 = 1024;
    int v22 = a4;
    __int16 v23 = 1024;
    int v24 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "notifyLeSensorStateChanged: device: %{public}@, state: %d, type: %d", (uint8_t *)&v19, 0x18u);
  }
  unint64_t v13 = *(void **)(a1 + 232);
  uint64_t v12 = (void *)(a1 + 232);
  unint64_t v11 = v13;
  if (v13)
  {
    BOOL v14 = v12;
    do
    {
      unint64_t v15 = v11[4];
      BOOL v16 = v15 >= a2;
      if (v15 >= a2) {
        BOOL v17 = v11;
      }
      else {
        BOOL v17 = v11 + 1;
      }
      if (v16) {
        BOOL v14 = v11;
      }
      unint64_t v11 = (void *)*v17;
    }
    while (*v17);
    if (v14 != v12 && v14[4] <= a2 && !(*(unsigned int (**)(void))(*(void *)v14[5] + 16))(v14[5]))
    {
      uint64_t v18 = v14[5];
      if (*(unsigned char *)(v18 + 304)) {
        (*(void (**)(void, unint64_t, id, uint64_t, uint64_t))(**(void **)(v18 + 120) + 280))(*(void *)(v18 + 120), a2, v9, a4, a5);
      }
    }
  }
}

void sub_1002FE11C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002FE138(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v11 = a2;
  BOOL v14 = *(void **)(a1 + 232);
  unint64_t v13 = (void *)(a1 + 232);
  uint64_t v12 = v14;
  if (!v14) {
    goto LABEL_13;
  }
  unint64_t v15 = v13;
  do
  {
    unint64_t v16 = v12[4];
    BOOL v17 = v16 >= a3;
    if (v16 >= a3) {
      uint64_t v18 = v12;
    }
    else {
      uint64_t v18 = v12 + 1;
    }
    if (v17) {
      unint64_t v15 = v12;
    }
    uint64_t v12 = (void *)*v18;
  }
  while (*v18);
  if (v15 == v13 || v15[4] > a3 || (*(unsigned int (**)(void))(*(void *)v15[5] + 16))(v15[5]))
  {
LABEL_13:
    uint64_t v19 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO))
    {
      LOWORD(__p[0]) = 0;
      id v20 = "Received GATT command complete for unregistered central session";
      __int16 v21 = (uint8_t *)__p;
      int v22 = v19;
      uint32_t v23 = 2;
LABEL_15:
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, v20, v21, v23);
    }
  }
  else
  {
    uint64_t v24 = v15[5];
    uint64_t v25 = (uint64_t)sub_1002F407C(v24, (uint64_t)v11);
    if (v25)
    {
      if (*(void *)(v24 + 120))
      {
        sub_10002FAB0(v25, v24, a3, 10, 1);
        (*(void (**)(void, void, id, uint64_t, uint64_t, uint64_t))(**(void **)(v24 + 120) + 160))(*(void *)(v24 + 120), 0, v11, a4, a5, a6);
      }
    }
    else
    {
      __int16 v26 = qword_100A19F00;
      if (!os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO)) {
        goto LABEL_16;
      }
      if (!a3)
      {
        *(_DWORD *)long long buf = 136446210;
        id v31 = "NULL";
        id v20 = "Received GATT command complete for session \"%{public}s\" with unknown device";
        __int16 v21 = buf;
        int v22 = v26;
        uint32_t v23 = 12;
        goto LABEL_15;
      }
      sub_10003AE4C(a3, (uint64_t)__p);
      if (v29 >= 0) {
        uint64_t v27 = __p;
      }
      else {
        uint64_t v27 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136446210;
      id v31 = (const char *)v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "Received GATT command complete for session \"%{public}s\" with unknown device", buf, 0xCu);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
    }
  }
LABEL_16:
}

void sub_1002FE3A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002FE3C0(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

void sub_1002FE3C8(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v11 = a2;
  BOOL v14 = *(void **)(a1 + 232);
  unint64_t v13 = (void *)(a1 + 232);
  uint64_t v12 = v14;
  if (v14)
  {
    unint64_t v15 = v13;
    do
    {
      unint64_t v16 = v12[4];
      BOOL v17 = v16 >= a3;
      if (v16 >= a3) {
        uint64_t v18 = v12;
      }
      else {
        uint64_t v18 = v12 + 1;
      }
      if (v17) {
        unint64_t v15 = v12;
      }
      uint64_t v12 = (void *)*v18;
    }
    while (*v18);
    if (v15 != v13 && v15[4] <= a3 && !(*(unsigned int (**)(void))(*(void *)v15[5] + 16))(v15[5]))
    {
      uint64_t v20 = v15[5];
      __int16 v21 = [*(id *)(v20 + 248) objectForKeyedSubscript:v11];
      int v22 = v21;
      if (v21)
      {
        if (*(unsigned char *)(v20 + 24) || (int v23 = *(unsigned __int8 *)(v20 + 129), (v23 & 0x30) != 0))
        {
          uint64_t v24 = qword_100A19F00;
          BOOL v25 = os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO);
          if (v25)
          {
            sub_10003AE4C(a3, (uint64_t)__p);
            __int16 v26 = v38 >= 0 ? __p : (void **)__p[0];
            *(_DWORD *)long long buf = 138543618;
            id v40 = v11;
            __int16 v41 = 2082;
            uint64_t v42 = v26;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "Dispatching GATT indication for device \"%{public}@\" to session \"%{public}s\"", buf, 0x16u);
            if (v38 < 0) {
              operator delete(__p[0]);
            }
          }
          if (sub_10002FAB0(v25, v20, a3, 10, 1))
          {
            int v27 = *(unsigned __int8 *)(v20 + 129);
            if (v27 == 8 || v27 == 4) {
              (*(void (**)(void, void, void **, uint64_t, uint64_t, void))(**(void **)(v20 + 120)
            }
                                                                                        + 120))(*(void *)(v20 + 120), 0, v11, 1, 10, 0);
          }
          sub_10043A0C0((void *)v20, v11, a4, a5, a6, 0);
          goto LABEL_48;
        }
        if (v23 != 2)
        {
          if ([v21 notificationAlerts])
          {
            uint64_t v34 = sub_100052E70();
            (*(void (**)(uint64_t, unint64_t, void **, uint64_t))(*(void *)v34 + 96))(v34, a3, v11, 3);
            goto LABEL_48;
          }
          uint64_t v35 = qword_100A19F00;
          if (!os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO)) {
            goto LABEL_48;
          }
          sub_10003AE4C(a3, (uint64_t)__p);
          if (v38 >= 0) {
            uint64_t v36 = __p;
          }
          else {
            uint64_t v36 = (void **)__p[0];
          }
          *(_DWORD *)long long buf = 138543618;
          id v40 = v11;
          __int16 v41 = 2082;
          uint64_t v42 = v36;
          id v31 = "Ignoring indication for device \"%{public}@\" on suspended session \"%{public}s\" ";
          __int16 v32 = v35;
          uint32_t v33 = 22;
LABEL_38:
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, v31, buf, v33);
          if (v38 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      else
      {
        uint64_t v29 = qword_100A19F00;
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO))
        {
          sub_10003AE4C(a3, (uint64_t)__p);
          if (v38 >= 0) {
            id v30 = __p;
          }
          else {
            id v30 = (void **)__p[0];
          }
          *(_DWORD *)long long buf = 136446210;
          id v40 = v30;
          id v31 = "Received GATT indication for session \"%{public}s\" with unknown device";
          __int16 v32 = v29;
          uint32_t v33 = 12;
          goto LABEL_38;
        }
      }
LABEL_48:

      goto LABEL_15;
    }
  }
  uint64_t v19 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Received GATT indication for unregistered central session", (uint8_t *)__p, 2u);
  }
LABEL_15:
}

void sub_1002FE798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002FE7CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 224);
  if (v4 != (void *)(a1 + 232))
  {
    do
    {
      if (!(*(unsigned int (**)(void))(*(void *)v4[5] + 16))(v4[5]))
      {
        uint64_t v8 = v4[5];
        if (*(void *)(v8 + 120))
        {
          uint64_t v9 = v4[4];
          if (sub_1002F407C(v4[5], (uint64_t)v3))
          {
            BOOL v10 = qword_100A19F00;
            if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO))
            {
              sub_10003AE4C(v9, (uint64_t)__p);
              id v11 = __p;
              if (v13 < 0) {
                id v11 = (void **)__p[0];
              }
              *(_DWORD *)long long buf = 138543618;
              id v15 = v3;
              __int16 v16 = 2082;
              BOOL v17 = v11;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Dispatching GAP name update for device \"%{public}@\" to session \"%{public}s\"", buf, 0x16u);
              if (v13 < 0) {
                operator delete(__p[0]);
              }
            }
            (*(void (**)(void, void, id))(**(void **)(v8 + 120) + 32))(*(void *)(v8 + 120), 0, v3);
          }
        }
      }
      uint64_t v5 = (void *)v4[1];
      if (v5)
      {
        do
        {
          id v6 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          id v6 = (void *)v4[2];
          BOOL v7 = *v6 == (void)v4;
          uint64_t v4 = v6;
        }
        while (!v7);
      }
      uint64_t v4 = v6;
    }
    while (v6 != (void *)(a1 + 232));
  }
}

void sub_1002FE9B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002FE9D4(uint64_t a1, void *a2)
{
}

void sub_1002FE9DC(uint64_t a1, void *a2, uint64_t *a3)
{
  id v39 = a2;
  uint64_t v5 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = v39;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "GATT Device %@ services discovered", buf, 0xCu);
  }
  id v6 = *(void **)(a1 + 224);
  id v40 = (void *)(a1 + 232);
  if (v6 != (void *)(a1 + 232))
  {
    do
    {
      if (!(*(unsigned int (**)(void))(*(void *)v6[5] + 16))(v6[5]))
      {
        uint64_t v8 = v6[4];
        BOOL v7 = (void *)v6[5];
        if (sub_10043495C(v7, v39))
        {
          uint64_t v9 = (uint64_t)sub_1004379D4((uint64_t)v7, (uint64_t)v39);
          if ((v9 & 1) == 0) {
            sub_1002FF088(v9, v8, (uint64_t)v7, v39, 1u);
          }
        }
      }
      if ((*(unsigned int (**)(void))(*(void *)v6[5] + 16))(v6[5]) == 1
        && [*(id *)(v6[5] + 232) count])
      {
        uint64_t v11 = v6[4];
        uint64_t v10 = v6[5];
        uint64_t v43 = 0;
        uint64_t v44 = 0;
        uint64_t v45 = 0;
        uint64_t v69 = 0;
        long long v67 = 0u;
        long long v68 = 0u;
        long long v65 = 0u;
        long long v66 = 0u;
        long long v63 = 0u;
        long long v64 = 0u;
        long long v61 = 0u;
        long long v62 = 0u;
        long long v59 = 0u;
        long long v60 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        *(_OWORD *)long long buf = 0u;
        long long v54 = 0u;
        sub_1000419CC((uint64_t)buf);
        for (uint64_t i = *a3; i != a3[1]; i += 20)
        {
          v46[0] = 0;
          v46[1] = 0;
          char v13 = +[BTUUID UUIDWithBytes:v46 length:sub_10071D240((unsigned __int8 *)i, v46)];
          if ([*(id *)(v10 + 232) containsObject:v13])
          {
            BOOL v14 = v44;
            if (v44 >= (_DWORD *)v45)
            {
              unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v44 - (unsigned char *)v43) >> 2);
              unint64_t v18 = v17 + 1;
              if (v17 + 1 > 0xCCCCCCCCCCCCCCCLL) {
                abort();
              }
              if (0x999999999999999ALL * ((v45 - (unsigned char *)v43) >> 2) > v18) {
                unint64_t v18 = 0x999999999999999ALL * ((v45 - (unsigned char *)v43) >> 2);
              }
              if (0xCCCCCCCCCCCCCCCDLL * ((v45 - (unsigned char *)v43) >> 2) >= 0x666666666666666) {
                unint64_t v19 = 0xCCCCCCCCCCCCCCCLL;
              }
              else {
                unint64_t v19 = v18;
              }
              if (v19) {
                uint64_t v20 = (char *)sub_10003767C((uint64_t)&v45, v19);
              }
              else {
                uint64_t v20 = 0;
              }
              __int16 v21 = &v20[20 * v17];
              long long v22 = *(_OWORD *)i;
              *((_DWORD *)v21 + 4) = *(_DWORD *)(i + 16);
              *(_OWORD *)__int16 v21 = v22;
              uint64_t v24 = (char *)v43;
              int v23 = (char *)v44;
              BOOL v25 = v21;
              if (v44 != v43)
              {
                do
                {
                  long long v26 = *(_OWORD *)(v23 - 20);
                  *((_DWORD *)v25 - 1) = *((_DWORD *)v23 - 1);
                  *(_OWORD *)(v25 - 20) = v26;
                  v25 -= 20;
                  v23 -= 20;
                }
                while (v23 != v24);
                int v23 = (char *)v43;
              }
              __int16 v16 = v21 + 20;
              uint64_t v43 = v25;
              uint64_t v44 = v21 + 20;
              uint64_t v45 = &v20[20 * v19];
              if (v23) {
                operator delete(v23);
              }
            }
            else
            {
              long long v15 = *(_OWORD *)i;
              v44[4] = *(_DWORD *)(i + 16);
              *BOOL v14 = v15;
              __int16 v16 = (_DWORD *)v14 + 5;
            }
            uint64_t v44 = v16;
            sub_1000417A8(i, __p);
            uint64_t v27 = sub_10003AB28((uint64_t)buf);
            sub_10003AB28(v27);
            if (SHIBYTE(v51) < 0) {
              operator delete(*(void **)__p);
            }
          }
        }
        if (v44 != v43 && *(void *)(v10 + 120))
        {
          __int16 v28 = qword_100A19F00;
          BOOL v29 = os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO);
          if (v29)
          {
            std::stringbuf::str();
            int v30 = v47;
            id v31 = (void **)v46[0];
            sub_10003AE4C(v11, (uint64_t)v41);
            __int16 v32 = v46;
            if (v30 < 0) {
              __int16 v32 = v31;
            }
            uint32_t v33 = v41;
            if (v42 < 0) {
              uint32_t v33 = (void **)v41[0];
            }
            *(_DWORD *)std::string __p = 136446722;
            *(void *)&__p[4] = v32;
            __int16 v49 = 2114;
            id v50 = v39;
            __int16 v51 = 2082;
            uint64_t v52 = v33;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "Dispatching solicited services update [%{public}s] for device \"%{public}@\" to session \"%{public}s\"", __p, 0x20u);
            if (v42 < 0) {
              operator delete(v41[0]);
            }
            if (v47 < 0) {
              operator delete(v46[0]);
            }
          }
          sub_10002FAB0(v29, v10, v11, 10, 0);
          (*(void (**)(void, void, id, void **))(**(void **)(v10 + 120) + 184))(*(void *)(v10 + 120), 0, v39, &v43);
        }
        *(void *)long long buf = v38;
        *(void *)&buf[*(void *)(v38 - 24)] = v37;
        if (SHIBYTE(v58) < 0) {
          operator delete(*((void **)&v57 + 1));
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
        if (v43)
        {
          uint64_t v44 = v43;
          operator delete(v43);
        }
      }
      uint64_t v34 = (void *)v6[1];
      if (v34)
      {
        do
        {
          uint64_t v35 = v34;
          uint64_t v34 = (void *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          uint64_t v35 = (void *)v6[2];
          BOOL v36 = *v35 == (void)v6;
          id v6 = v35;
        }
        while (!v36);
      }
      id v6 = v35;
    }
    while (v35 != v40);
  }
}

void sub_1002FEFF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,char a39)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  sub_10027E318((uint64_t)&a39);
  if (a23) {
    operator delete(a23);
  }

  _Unwind_Resume(a1);
}

void sub_1002FF088(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unsigned int a5)
{
  id v8 = a4;
  uint64_t v9 = qword_100A19F00;
  BOOL v10 = os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    sub_10003AE4C(a2, (uint64_t)__p);
    if (v13 >= 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136315650;
    long long v15 = v11;
    __int16 v16 = 2112;
    id v17 = v8;
    __int16 v18 = 1024;
    unsigned int v19 = a5;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "sending connectionEvent session:%s device:%@ connected:%d", buf, 0x1Cu);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_10002FAB0(v10, a3, a2, 5, 1);
  sub_1004379E0(a3, v8, a5);
}

void sub_1002FF1BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002FF1D8(uint64_t a1, void *a2, uint64_t *a3)
{
}

void sub_1002FF1E0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v13 = a2;
  BOOL v7 = *(void **)(a1 + 224);
  id v8 = (void *)(a1 + 232);
  if (v7 != (void *)(a1 + 232))
  {
    do
    {
      if (!(*(unsigned int (**)(void))(*(void *)v7[5] + 16))(v7[5]))
      {
        uint64_t v9 = (void *)v7[5];
        if (sub_1002F407C((uint64_t)v9, (uint64_t)v13)) {
          sub_100439F78(v9, v13, a3, a4);
        }
      }
      BOOL v10 = (void *)v7[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          BOOL v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (void *)v7[2];
          BOOL v12 = *v11 == (void)v7;
          BOOL v7 = v11;
        }
        while (!v12);
      }
      BOOL v7 = v11;
    }
    while (v11 != v8);
  }
}

void sub_1002FF2D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1002FF2F0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void *sub_1002FF2F8(void *result)
{
  uint64_t v1 = (void *)result[28];
  uint64_t v2 = result + 29;
  if (v1 != result + 29)
  {
    do
    {
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v1[5] + 16))(v1[5]);
      if (!result)
      {
        uint64_t v6 = v1[5];
        uint64_t result = [*(id *)(v6 + 248) count];
        if (result)
        {
          uint64_t result = *(void **)(v6 + 120);
          if (result) {
            uint64_t result = (void *)(*(uint64_t (**)(void *, void))(*result + 192))(result, 0);
          }
        }
      }
      id v3 = (void *)v1[1];
      if (v3)
      {
        do
        {
          uint64_t v4 = v3;
          id v3 = (void *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          uint64_t v4 = (void *)v1[2];
          BOOL v5 = *v4 == (void)v1;
          uint64_t v1 = v4;
        }
        while (!v5);
      }
      uint64_t v1 = v4;
    }
    while (v4 != v2);
  }
  return result;
}

void *sub_1002FF3D8(uint64_t a1)
{
  return sub_1002FF2F8((void *)(a1 - 40));
}

void sub_1002FF3E8(uint64_t a1, void *a2, unsigned int a3)
{
  id v5 = a2;
  uint64_t v11 = 0;
  uint64_t v6 = sub_1002FF4E8(a1, a3, &v11);
  if (v6 && v11)
  {
    BOOL v7 = *(void **)(v6 + 216);
    id v8 = +[NSNumber numberWithUnsignedInt:(unsigned __int16)a3];
    uint64_t v9 = [v7 objectForKeyedSubscript:v8];

    BOOL v10 = +[NSDate date];
    [v9 setObject:v10 forKey:v5];
  }
}

void sub_1002FF4A8(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1002FF4E8(uint64_t a1, unsigned int a2, void *a3)
{
  id v3 = *(void **)(a1 + 224);
  uint64_t v4 = (void *)(a1 + 232);
  if (v3 == (void *)(a1 + 232)) {
    return 0;
  }
  unsigned int v6 = HIWORD(a2);
  while (1)
  {
    if ((*(unsigned int (**)(void))(*(void *)v3[5] + 16))(v3[5]) == 1)
    {
      uint64_t result = v3[5];
      if (v6 == *(unsigned __int16 *)(result + 224)) {
        break;
      }
    }
    id v8 = (void *)v3[1];
    if (v8)
    {
      do
      {
        uint64_t v9 = v8;
        id v8 = (void *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        uint64_t v9 = (void *)v3[2];
        BOOL v10 = *v9 == (void)v3;
        id v3 = v9;
      }
      while (!v10);
    }
    id v3 = v9;
    if (v9 == v4) {
      return 0;
    }
  }
  if (a3) {
    *a3 = v3[4];
  }
  return result;
}

void sub_1002FF5B0(uint64_t a1, void *a2, unsigned int a3)
{
}

void *sub_1002FF5B8(void *result)
{
  uint64_t v1 = (void *)result[28];
  uint64_t v2 = result + 29;
  if (v1 != result + 29)
  {
    do
    {
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v1[5] + 16))(v1[5]);
      if (result != 3)
      {
        uint64_t result = *(void **)(v1[5] + 120);
        if (result) {
          uint64_t result = (void *)(*(uint64_t (**)(void *, void))(*result + 168))(result, 0);
        }
      }
      id v3 = (void *)v1[1];
      if (v3)
      {
        do
        {
          uint64_t v4 = v3;
          id v3 = (void *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          uint64_t v4 = (void *)v1[2];
          BOOL v5 = *v4 == (void)v1;
          uint64_t v1 = v4;
        }
        while (!v5);
      }
      uint64_t v1 = v4;
    }
    while (v4 != v2);
  }
  return result;
}

void *sub_1002FF680(uint64_t a1)
{
  return sub_1002FF5B8((void *)(a1 - 56));
}

void sub_1002FF688(os_unfair_lock_s *a1, void *a2, unsigned int *a3, unsigned __int16 *a4, uint64_t a5, unsigned int *a6, char a7)
{
  id v13 = a2;
  uint64_t v34 = 0;
  unsigned int v14 = *a3;
  uint64_t v15 = sub_1002FF4E8((uint64_t)a1, *a3, &v34);
  uint64_t v16 = v15;
  uint64_t v17 = v34;
  if (v15) {
    BOOL v18 = v34 == 0;
  }
  else {
    BOOL v18 = 1;
  }
  if (v18)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
      sub_1007556F4();
    }
    if (qword_1009FB230 != -1) {
      dispatch_once(&qword_1009FB230, &stru_1009A4E78);
    }
    __int16 v32 = &off_100998428;
    uint32_t v33 = 0;
    sub_100425490(qword_1009FB228, a6, 242, (uint64_t)&v32, (int *)a3);
    __int16 v32 = &off_100998428;
    std::string::size_type size = v33;
    if (v33) {
      goto LABEL_38;
    }
  }
  else if (*(unsigned char *)(v15 + 24) || (*(unsigned char *)(v15 + 129) & 0x30) != 0)
  {
    if (!sub_10043FDF0(v15, v13, 1) && *(unsigned char *)(v16 + 28))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEBUG))
      {
        sub_10003AE4C(v34, (uint64_t)&v32);
        sub_1007556A4();
      }
      sub_1002F84F0(a1, v34, v13);
    }
    BOOL v20 = sub_100013DCC(a5);
    if (v20)
    {
      sub_10002FAB0(v20, v16, v34, 10, 0);
      LODWORD(__p.__r_.__value_.__l.__data_) = (unsigned __int16)v14;
      sub_10043DFD8((void *)v16, 0, v13, (unsigned int *)&__p, a4, a6);
      if (a7)
      {
        uint64_t v21 = sub_1003731C0();
        sub_100551758(v34, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        int v23 = *(atomic_uint **)(a5 + 8);
        BOOL v29 = &off_100998428;
        int v30 = v23;
        if (v23) {
          sub_100037354((uint64_t)v23);
        }
        (*(void (**)(uint64_t, uint64_t, std::string *, id, uint64_t (***)()))(*(void *)v21 + 40))(v21, 4, p_p, v13, &v29);
        BOOL v29 = &off_100998428;
        if (v30) {
          sub_1000368F4(v30);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      goto LABEL_39;
    }
    unint64_t v24 = *a4;
    if (sub_100045F00(a5) >= v24)
    {
      if (qword_1009FB230 != -1) {
        dispatch_once(&qword_1009FB230, &stru_1009A4E78);
      }
      uint64_t v25 = qword_1009FB228;
      uint64_t v26 = sub_10004A6E4(a5);
      uint64_t v27 = *a4;
      uint64_t v28 = sub_100045F00(a5);
      sub_1000335D8(&__p, (const void *)(v26 + v27), v28 - *a4);
      int v31 = 0;
      sub_100425490(v25, a6, 0, (uint64_t)&__p, &v31);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_100998428;
    }
    else
    {
      if (qword_1009FB230 != -1) {
        dispatch_once(&qword_1009FB230, &stru_1009A4E78);
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_100998428;
      __p.__r_.__value_.__l.__size_ = 0;
      sub_100425490(qword_1009FB228, a6, 7, (uint64_t)&__p, (int *)a3);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_100998428;
    }
    std::string::size_type size = (atomic_uint *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_) {
LABEL_38:
    }
      sub_1000368F4(size);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
    {
      sub_10003AE4C(v17, (uint64_t)&v32);
      sub_100755648();
    }
    if (qword_1009FB230 != -1) {
      dispatch_once(&qword_1009FB230, &stru_1009A4E78);
    }
    BOOL v36 = &off_100998428;
    uint64_t v37 = 0;
    sub_100425490(qword_1009FB228, a6, 242, (uint64_t)&v36, (int *)a3);
    BOOL v36 = &off_100998428;
    std::string::size_type size = v37;
    if (v37) {
      goto LABEL_38;
    }
  }
LABEL_39:
}

void sub_1002FFB3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  _Unwind_Resume(a1);
}

void sub_1002FFBFC(uint64_t a1, void *a2, unsigned int *a3, unsigned __int16 *a4, uint64_t a5, unsigned int *a6, char a7)
{
}

void sub_1002FFC04(os_unfair_lock_s *a1, void *a2, unsigned int **a3, unsigned int *a4, int a5)
{
  id v9 = a2;
  BOOL v10 = *a3;
  if (*a3 == a3[1])
  {
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_FAULT)) {
      sub_10075575C();
    }
    if (qword_1009FB230 != -1) {
      dispatch_once(&qword_1009FB230, &stru_1009A4E78);
    }
    unint64_t v24 = &off_100998428;
    uint64_t v25 = 0;
    LODWORD(__p.__r_.__value_.__l.__data_) = 0;
    sub_100425490(qword_1009FB228, a4, 242, (uint64_t)&v24, (int *)&__p);
LABEL_17:
    unint64_t v24 = &off_100998428;
    uint64_t v15 = v25;
    if (!v25) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v26 = 0;
  uint64_t v11 = sub_1002FF4E8((uint64_t)a1, *v10, &v26);
  uint64_t v12 = v11;
  uint64_t v13 = v26;
  if (v11) {
    BOOL v14 = v26 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
      sub_1007556F4();
    }
    if (qword_1009FB230 != -1) {
      dispatch_once(&qword_1009FB230, &stru_1009A4E78);
    }
    unint64_t v24 = &off_100998428;
    uint64_t v25 = 0;
    sub_100425490(qword_1009FB228, a4, 242, (uint64_t)&v24, (int *)v10);
    goto LABEL_17;
  }
  if (*(unsigned char *)(v11 + 24) || (*(unsigned char *)(v11 + 129) & 0x30) != 0)
  {
    uint64_t v16 = sub_10043FDF0(v11, v9, 1);
    if (!v16 && *(unsigned char *)(v12 + 28))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEBUG))
      {
        sub_10003AE4C(v26, (uint64_t)&v24);
        sub_1007557EC();
      }
      sub_1002F84F0(a1, v26, v9);
    }
    uint64_t v17 = a3[1];
    while (v10 != v17)
    {
      unsigned int *v10 = *(unsigned __int16 *)v10;
      v10 += 8;
    }
    sub_10002FAB0(v16, v12, v26, 10, 0);
    sub_10043E1D0((void *)v12, 0, v9, a3, a4);
    long long v22 = &off_100998428;
    int v23 = 0;
    if (!a5) {
      goto LABEL_19;
    }
    uint64_t v18 = sub_1003731C0();
    sub_100551758(v26, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    BOOL v20 = &off_100998428;
    uint64_t v21 = v23;
    (*(void (**)(uint64_t, uint64_t, std::string *, id, uint64_t (***)()))(*(void *)v18 + 40))(v18, 4, p_p, v9, &v20);
    BOOL v20 = &off_100998428;
    if (v21) {
      sub_1000368F4(v21);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v15 = v23;
    long long v22 = &off_100998428;
    if (!v23) {
      goto LABEL_19;
    }
LABEL_18:
    sub_1000368F4(v15);
    goto LABEL_19;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
  {
    sub_10003AE4C(v13, (uint64_t)&v24);
    sub_100755790();
  }
  if (qword_1009FB230 != -1) {
    dispatch_once(&qword_1009FB230, &stru_1009A4E78);
  }
  uint64_t v28 = &off_100998428;
  BOOL v29 = 0;
  sub_100425490(qword_1009FB228, a4, 242, (uint64_t)&v28, (int *)v10);
  uint64_t v28 = &off_100998428;
  uint64_t v15 = v29;
  if (v29) {
    goto LABEL_18;
  }
LABEL_19:
}

void sub_100300054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  _Unwind_Resume(a1);
}

void sub_1003000EC(uint64_t a1, void *a2, unsigned int **a3, unsigned int *a4, int a5)
{
}

void sub_1003000F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEBUG)) {
    sub_10075583C(a1, v4);
  }
  sub_10003AE4C(*(void *)(a1 + 40), (uint64_t)&__str);
  BOOL v5 = __p;
  sub_10003AE4C(*(void *)(a1 + 40), (uint64_t)__p);
  if ((v14 & 0x80u) == 0) {
    int64_t v6 = v14;
  }
  else {
    int64_t v6 = (int64_t)__p[1];
  }
  if ((v14 & 0x80u) != 0) {
    BOOL v5 = (void **)__p[0];
  }
  BOOL v7 = (char *)v5 + v6;
  if (v6 >= 1)
  {
    id v8 = v5;
    do
    {
      id v9 = memchr(v8, 45, v6);
      if (!v9) {
        break;
      }
      if (*v9 == 45) {
        goto LABEL_14;
      }
      id v8 = (void **)(v9 + 1);
      int64_t v6 = v7 - (unsigned char *)v8;
    }
    while (v7 - (unsigned char *)v8 > 0);
  }
  id v9 = v7;
LABEL_14:
  if (v9 == v7) {
    std::string::size_type v10 = -1;
  }
  else {
    std::string::size_type v10 = v9 - (unsigned char *)v5;
  }
  std::string::basic_string(&v16, &__str, 0, v10, (std::allocator<char> *)&v17);
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v11 = &v16;
  }
  else {
    uint64_t v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
  }
  uint64_t v12 = +[NSString stringWithUTF8String:v11];
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if ((char)v14 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  (*(void (**)(uint64_t, void *, void, uint64_t))(*(void *)a2 + 24))(a2, v12, *(void *)(a1 + 32), 1);
}

void sub_100300280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  _Unwind_Resume(a1);
}

void sub_1003002D8(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v4 = v2;
  if (qword_1009F7EE0 == -1)
  {
    id v3 = v2;
  }
  else
  {
    dispatch_once(&qword_1009F7EE0, &stru_1009A4EB8);
    id v3 = v4;
  }
  sub_1006B7A50((uint64_t)off_1009F7ED8, v3);
}

void sub_100300354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100300368(os_unfair_lock_s *a1, unsigned int *a2, void *a3, int a4)
{
  id v7 = a3;
  uint64_t v15 = 0;
  unsigned int v8 = *a2;
  uint64_t v9 = sub_1002FF4E8((uint64_t)a1, *a2, &v15);
  uint64_t v10 = v9;
  if (v9) {
    BOOL v11 = v15 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
      sub_1007556F4();
    }
  }
  else
  {
    uint64_t v12 = sub_10043FDF0(v9, v7, 1);
    if (!v12 && *(unsigned char *)(v10 + 28))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEBUG))
      {
        sub_10003AE4C(v15, (uint64_t)v14);
        sub_100755910();
      }
      sub_1002F84F0(a1, v15, v7);
    }
    sub_10002FAB0(v12, v10, v15, 10, 0);
    unsigned int v13 = (unsigned __int16)v8;
    sub_10043E4D4((void *)v10, 0, &v13, v7, a4);
  }
}

void sub_1003004D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003004F8(uint64_t a1, unsigned int *a2, void *a3, int a4)
{
}

void sub_100300500(uint64_t a1, unsigned int *a2, void *a3)
{
  id v5 = a3;
  uint64_t v11 = 0;
  unsigned int v6 = *a2;
  uint64_t v7 = sub_1002FF4E8(a1, *a2, &v11);
  unsigned int v8 = (void *)v7;
  if (v7) {
    BOOL v9 = v11 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
      sub_1007556F4();
    }
  }
  else
  {
    sub_10002FAB0(v7, v7, v11, 10, 0);
    unsigned int v10 = (unsigned __int16)v6;
    sub_10043E65C(v8, 0, &v10, v5);
  }
}

void sub_1003005C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003005D8(uint64_t a1, unsigned int *a2, void *a3)
{
}

BOOL sub_1003005E0(uint64_t a1, void *a2, BOOL *a3)
{
  id v5 = a2;
  unsigned int v6 = sub_1002FB2C0(a1, v5, 0);
  uint64_t v7 = (void *)(a1 + 232);
  if (a3 && v7 != v6) {
    *a3 = *(_DWORD *)(v6[5] + 32) == 2;
  }
  BOOL v8 = v7 != v6;

  return v8;
}

void sub_100300658(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_100300668(uint64_t a1, void *a2, BOOL *a3)
{
  return sub_1003005E0(a1 - 64, a2, a3);
}

void sub_100300670(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  BOOL v8 = sub_1002FB2C0(a1, v7, 0);
  BOOL v9 = v8;
  if ((void *)(a1 + 232) == v8)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
      sub_100755960();
    }
  }
  else
  {
    uint64_t v10 = v8[5];
    if (*(_DWORD *)(v10 + 32) == 2)
    {
      uint64_t v11 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
      {
        sub_10003AE4C(v9[4], (uint64_t)__p);
        uint64_t v12 = (SBYTE7(v18) & 0x80u) == 0 ? __p : (void **)__p[0];
        *(_DWORD *)long long buf = 138543618;
        id v30 = v7;
        __int16 v31 = 2082;
        __int16 v32 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Dispatching programmatic pairing request for device \"%{public}@\" to session \"%{public}s\"", buf, 0x16u);
        if (SBYTE7(v18) < 0) {
          operator delete(__p[0]);
        }
      }
      uint64_t v13 = *(void *)(v10 + 120);
      if (v13)
      {
        (*(void (**)(uint64_t, void, id, uint64_t, uint64_t))(*(void *)v13 + 128))(v13, 0, v7, a3, a4);
      }
      else if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
      {
        sub_10003AE4C(v9[4], (uint64_t)__p);
        sub_1007559C8();
      }
    }
    else
    {
      unsigned __int8 v14 = qword_100A19F00;
      if (a3 == 5)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
          sub_100755A20();
        }
        long long v27 = 0u;
        long long v28 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        *(_OWORD *)std::string __p = 0u;
        long long v18 = 0u;
        sub_1006FE6F0(__p, 0, 0);
        if (qword_1009F7ED0 != -1) {
          dispatch_once(&qword_1009F7ED0, &stru_1009A4E98);
        }
        sub_100709010(qword_1009F7EC8, 0, v7, 0, (uint64_t)__p);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
        {
          sub_10003AE4C(v9[4], (uint64_t)__p);
          uint64_t v15 = (SBYTE7(v18) & 0x80u) == 0 ? __p : (void **)__p[0];
          *(_DWORD *)long long buf = 138543618;
          id v30 = v7;
          __int16 v31 = 2082;
          __int16 v32 = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Displaying pairing request alert for device \"%{public}@\" on behalf of session \"%{public}s\"", buf, 0x16u);
          if (SBYTE7(v18) < 0) {
            operator delete(__p[0]);
          }
        }
        uint64_t v16 = sub_100052E70();
        (*(void (**)(uint64_t, id, uint64_t, uint64_t))(*(void *)v16 + 112))(v16, v7, a3, a4);
        if (a3 == 1)
        {
          if (qword_1009F7ED0 != -1) {
            dispatch_once(&qword_1009F7ED0, &stru_1009A4E98);
          }
          sub_100708CB4(qword_1009F7EC8, v7, 1, a4);
        }
      }
    }
  }
}

void sub_1003009F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100300A20(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void sub_100300A28(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  sub_1002B7E74(20, 0, v5);
  uint64_t v6 = sub_100052E70();
  (*(void (**)(uint64_t, id))(*(void *)v6 + 128))(v6, v5);
  id v7 = *(void **)(a1 + 224);
  BOOL v8 = (void *)(a1 + 232);
  if (v7 != (void *)(a1 + 232))
  {
    do
    {
      uint64_t v9 = v7[5];
      if (*(_DWORD *)(v9 + 32))
      {
        uint64_t v10 = *(void *)(v9 + 120);
        if (v10) {
          (*(void (**)(uint64_t, void, id, uint64_t))(*(void *)v10 + 136))(v10, 0, v5, a3);
        }
      }
      uint64_t v11 = (void *)v7[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (void *)v7[2];
          BOOL v13 = *v12 == (void)v7;
          id v7 = v12;
        }
        while (!v13);
      }
      id v7 = v12;
    }
    while (v12 != v8);
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009A4EB8);
  }
  unsigned __int8 v14 = off_1009F7ED8;
  sub_10004191C(__p, "_CTKD_");
  int v15 = sub_100030A04((uint64_t)v14, v5, (uint64_t)__p);
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v16 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138543618;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&unsigned char buf[14] = v15;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Pairing completed, checking if %{public}@ has tag \"_CTKD_\" %d", buf, 0x12u);
  }
  if (v15)
  {
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009A4E38);
    }
    char v17 = off_1009F7EB8;
    sub_1000305AC(buf, v5);
    BOOL v18 = sub_1000307A4((uint64_t)v17, buf);
    sub_1002FC7F4(a1, v5, v18, a3);
  }
  if (!a3)
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009A4EB8);
    }
    long long v19 = off_1009F7ED8;
    sub_10004191C(v30, "_UNPAIR_AFTER_DISCONNECTION_");
    int v20 = sub_100030A04((uint64_t)v19, v5, (uint64_t)v30);
    char v21 = v20;
    if (v31 < 0)
    {
      operator delete(v30[0]);
      if ((v21 & 1) == 0) {
        goto LABEL_22;
      }
    }
    else if (!v20)
    {
      goto LABEL_22;
    }
    long long v22 = *(void **)(a1 + 224);
    if (v22 != v8)
    {
      while (1)
      {
        uint64_t v23 = v22[5];
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v23 + 16))(v23))
        {
          if (sub_1002F407C(v23, (uint64_t)v5)) {
            break;
          }
        }
        long long v24 = (void *)v22[1];
        if (v24)
        {
          do
          {
            long long v25 = v24;
            long long v24 = (void *)*v24;
          }
          while (v24);
        }
        else
        {
          do
          {
            long long v25 = (void *)v22[2];
            BOOL v13 = *v25 == (void)v22;
            long long v22 = v25;
          }
          while (!v13);
        }
        long long v22 = v25;
        if (v25 == v8) {
          goto LABEL_22;
        }
      }
      long long v26 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
      {
        sub_10003AE4C(v22[4], (uint64_t)v29);
        sub_100755A88((uint64_t)v5, v29, v37, v26);
      }
      uint64_t v36 = 0;
      long long v35 = 0u;
      memset(buf, 0, sizeof(buf));
      sub_10004191C(v27, (char *)[*(id *)(v23 + 88) UTF8String]);
      sub_1004B8F04((uint64_t)buf, (long long *)v27, *(unsigned char *)(v23 + 129), v5, 0, 178);
      if (v28 < 0) {
        operator delete(v27[0]);
      }
      if (qword_1009FB260 != -1) {
        dispatch_once(&qword_1009FB260, &stru_1009A4FF8);
      }
      sub_1000504D8();

      if ((char)buf[31] < 0) {
        operator delete(*(void **)&buf[8]);
      }
    }
  }
LABEL_22:
}

void sub_100300E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  _Unwind_Resume(a1);
}

void sub_100300EE4(uint64_t a1, void *a2, uint64_t a3)
{
}

void sub_100300EEC(void *a1, void *a2)
{
  id v9 = a2;
  id v3 = (void *)a1[28];
  if (v3 != a1 + 29)
  {
    do
    {
      uint64_t v4 = v3[5];
      if (*(_DWORD *)(v4 + 32))
      {
        uint64_t v5 = *(void *)(v4 + 120);
        if (v5)
        {
          (*(void (**)(uint64_t, void, id))(*(void *)v5 + 144))(v5, 0, v9);
          (*(void (**)(void *, id, void))(*a1 + 64))(a1, v9, 0);
        }
      }
      uint64_t v6 = (void *)v3[1];
      if (v6)
      {
        do
        {
          id v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          id v7 = (void *)v3[2];
          BOOL v8 = *v7 == (void)v3;
          id v3 = v7;
        }
        while (!v8);
      }
      id v3 = v7;
    }
    while (v7 != a1 + 29);
  }
}

void sub_100300FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100301004(uint64_t a1, void *a2)
{
}

void sub_10030100C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = *(void **)(a1 + 224);
  id v7 = (void *)(a1 + 232);
  if (v6 != (void *)(a1 + 232))
  {
    do
    {
      if (!(*(unsigned int (**)(void))(*(void *)v6[5] + 16))(v6[5]))
      {
        uint64_t v11 = v6[5];
        if (*(void *)(v11 + 120))
        {
          if (sub_1002F407C(v6[5], (uint64_t)v5))
          {
            (*(void (**)(void, void, id, uint64_t))(**(void **)(v11 + 120) + 152))(*(void *)(v11 + 120), 0, v5, a3);
            if (sub_10043495C((void *)v11, v5))
            {
              uint64_t v12 = (uint64_t)sub_1004379D4(v11, (uint64_t)v5);
              if ((v12 & 1) == 0) {
                sub_1002FF088(v12, v6[4], v11, v5, 1u);
              }
            }
          }
        }
      }
      BOOL v8 = (void *)v6[1];
      if (v8)
      {
        do
        {
          id v9 = v8;
          BOOL v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          id v9 = (void *)v6[2];
          BOOL v10 = *v9 == (void)v6;
          uint64_t v6 = v9;
        }
        while (!v10);
      }
      uint64_t v6 = v9;
    }
    while (v9 != v7);
  }
  if (a3)
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009A4EB8);
    }
    BOOL v13 = sub_100030C6C((uint64_t)off_1009F7ED8, v5);

    if (v13)
    {
      unsigned __int8 v14 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO))
      {
        int v15 = 138412290;
        id v16 = v5;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Resetting FindMy invalid LTK's for device %@", (uint8_t *)&v15, 0xCu);
      }
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009A4EB8);
      }
      sub_1006C7128((uint64_t)off_1009F7ED8, v5);
    }
  }
}

void sub_10030124C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030126C(uint64_t a1, void *a2, uint64_t a3)
{
}

void sub_100301274(uint64_t a1, char a2)
{
  if (a2)
  {
    uint64_t v3 = mach_continuous_time() * *(unsigned int *)(a1 + 184) / *(unsigned int *)(a1 + 188) / 0x3B9ACA00;
    uint64_t v4 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 134217984;
      uint64_t v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "System Keybag was unlocked, boot time is %lld sec", (uint8_t *)&v7, 0xCu);
    }
    uint64_t v5 = sub_10003FFD4();
    sub_1002DF3AC(v5 + 448, a1 + 80);
    if (*(unsigned char *)(a1 + 312))
    {
      uint64_t v6 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v7) = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "System Keybag was unlocked but buddyHasNotCompleted is true", (uint8_t *)&v7, 2u);
      }
    }
    else
    {
      sub_1003013DC(a1, v3);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
  {
    sub_100755B0C();
  }
}

void sub_1003013DC(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_1002FABF0();
  uint64_t v5 = qword_100A19F58;
  if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = [v4 absoluteString];
    *(_DWORD *)long long buf = 138412290;
    long long v26 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Reading state restoration data after unlock at %@", buf, 0xCu);
  }
  int v7 = +[NSFileManager defaultManager];
  uint64_t v8 = [v4 URLByDeletingLastPathComponent];
  id v24 = 0;
  unsigned __int8 v9 = [v7 createDirectoryAtURL:v8 withIntermediateDirectories:1 attributes:0 error:&v24];
  id v10 = v24;

  if ((v9 & 1) == 0 && os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_ERROR)) {
    sub_100755B74();
  }
  uint64_t v11 = +[NSFileManager defaultManager];
  uint64_t v12 = sub_1002FABF0();
  BOOL v13 = [v12 path];
  unsigned __int8 v14 = [v11 fileExistsAtPath:v13];

  if (v14)
  {
    int v15 = sub_1002FABF0();
    id v16 = +[NSDictionary dictionaryWithContentsOfURL:v15];

    if (a2 < 0x12D)
    {
      uint64_t v20 = sub_100019878();
      uint64_t v21 = 1000 * (unsigned __int16)word_1009FB224;
      long long v19 = v22;
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      void v22[2] = sub_1003024F4;
      v22[3] = &unk_100998A38;
      void v22[5] = a1;
      v22[4] = v16;
      sub_1004AFF58(v20, v21, v22);
    }
    else
    {
      uint64_t v17 = sub_100019878();
      uint64_t v18 = 1000 * (unsigned __int16)word_1009FB226;
      long long v19 = v23;
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472;
      v23[2] = sub_100301790;
      v23[3] = &unk_100998A38;
      v23[5] = a1;
      v23[4] = v16;
      sub_1004AFF58(v17, v18, v23);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_ERROR))
  {
    sub_100755B40();
  }
}

void sub_1003016EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_100301788(uint64_t a1, char a2)
{
}

void sub_100301790(uint64_t a1)
{
}

void sub_10030179C(uint64_t a1, void *a2)
{
  id v10 = a2;
  uint64_t v12 = [v10 objectForKey:@"centralSessions"];
  uint64_t v11 = [v10 objectForKey:@"peripheralSessions"];
  sub_100052E70();
  id v2 = qword_100A19F58;
  if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = [v12 allKeys];
    uint64_t v4 = [v11 allKeys];
    buf[0] = 138543618;
    *(void *)&buf[1] = v3;
    __int16 v18 = 2114;
    long long v19 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "RestoreAppSessions - Central:%{public}@ - Peripheral:%{public}@", (uint8_t *)buf, 0x16u);
  }
  memset(v15, 0, sizeof(v15));
  obuint64_t j = v12;
  if ([obj countByEnumeratingWithState:v15 objects:v20 count:16])
  {
    uint64_t v5 = **((void **)&v15[0] + 1);
    uint64_t v6 = qword_100A19F58;
    if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 138543362;
      *(void *)&buf[1] = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Restoring session for %{public}@", (uint8_t *)buf, 0xCu);
    }
    operator new();
  }

  memset(v14, 0, sizeof(v14));
  id v7 = v11;
  if ([v7 countByEnumeratingWithState:v14 objects:v16 count:16])
  {
    uint64_t v8 = **((void **)&v14[0] + 1);
    unsigned __int8 v9 = qword_100A19F58;
    if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 138543362;
      *(void *)&buf[1] = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Restoring Peripheral session for %{public}@", (uint8_t *)buf, 0xCu);
    }
    operator new();
  }
}

void sub_100302388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1003024F4(uint64_t a1)
{
}

uint64_t sub_100302500(uint64_t a1, int a2, int a3)
{
  switch(a2)
  {
    case 2:
      if (!a3) {
        a1 = sub_100302570(a1);
      }
      break;
    case 3:
      if (!a3) {
        a1 = sub_100302734(a1);
      }
      break;
    case 6:
      if (!a3)
      {
        uint64_t v3 = 1;
        goto LABEL_8;
      }
      break;
    case 7:
      if (!a3)
      {
        uint64_t v3 = 0;
LABEL_8:
        a1 = (uint64_t)sub_1003028F0((void *)a1, v3);
      }
      break;
    default:
      return a1;
  }
  return a1;
}

uint64_t sub_100302570(uint64_t a1)
{
  unsigned __int8 v9 = 0;
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A4ED8);
  }
  uint64_t result = sub_1004E3008((uint64_t)off_1009F8068, &v9);
  uint64_t v3 = *(void **)(a1 + 224);
  if (v3 != (void *)(a1 + 232))
  {
    do
    {
      uint64_t v4 = (void *)v3[5];
      uint64_t result = (*(uint64_t (**)(void *))(*v4 + 16))(v4);
      if (result == 3)
      {
        uint64_t v5 = qword_100A19F00;
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 67109120;
          int v11 = v9;
          _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "classic: notifyDiscoverabiltyChanged: %d", buf, 8u);
        }
        uint64_t result = v4[27];
        if (result) {
          uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)result + 16))(result, 0, v9);
        }
      }
      uint64_t v6 = (void *)v3[1];
      if (v6)
      {
        do
        {
          id v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          id v7 = (void *)v3[2];
          BOOL v8 = *v7 == (void)v3;
          uint64_t v3 = v7;
        }
        while (!v8);
      }
      uint64_t v3 = v7;
    }
    while (v7 != (void *)(a1 + 232));
  }
  return result;
}

uint64_t sub_100302734(uint64_t a1)
{
  unsigned __int8 v9 = 0;
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A4ED8);
  }
  uint64_t result = sub_1004E4370((uint64_t)off_1009F8068, &v9);
  uint64_t v3 = *(void **)(a1 + 224);
  if (v3 != (void *)(a1 + 232))
  {
    do
    {
      uint64_t v4 = (void *)v3[5];
      uint64_t result = (*(uint64_t (**)(void *))(*v4 + 16))(v4);
      if (result == 3)
      {
        uint64_t v5 = qword_100A19F00;
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 67109120;
          int v11 = v9;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "classic: notifyConnectabilityChanged: %d", buf, 8u);
        }
        uint64_t result = v4[27];
        if (result) {
          uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)result + 8))(result, 0, v9);
        }
      }
      uint64_t v6 = (void *)v3[1];
      if (v6)
      {
        do
        {
          id v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          id v7 = (void *)v3[2];
          BOOL v8 = *v7 == (void)v3;
          uint64_t v3 = v7;
        }
        while (!v8);
      }
      uint64_t v3 = v7;
    }
    while (v7 != (void *)(a1 + 232));
  }
  return result;
}

void *sub_1003028F0(void *result, uint64_t a2)
{
  id v2 = (void *)result[28];
  uint64_t v3 = result + 29;
  if (v2 != result + 29)
  {
    do
    {
      uint64_t v5 = (void *)v2[5];
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*v5 + 16))(v5);
      if (result == 3)
      {
        uint64_t v6 = qword_100A19F00;
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 67109120;
          int v11 = a2;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "classic: notifyInquiryStateChanged: %d", buf, 8u);
        }
        uint64_t result = (void *)v5[27];
        if (result) {
          uint64_t result = (void *)(*(uint64_t (**)(void *, void, uint64_t))(*result + 24))(result, 0, a2);
        }
      }
      id v7 = (void *)v2[1];
      if (v7)
      {
        do
        {
          BOOL v8 = v7;
          id v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v8 = (void *)v2[2];
          BOOL v9 = *v8 == (void)v2;
          id v2 = v8;
        }
        while (!v9);
      }
      id v2 = v8;
    }
    while (v8 != v3);
  }
  return result;
}

uint64_t sub_100302A6C(uint64_t a1, int a2, int a3)
{
  return sub_100302500(a1 - 128, a2, a3);
}

void sub_100302A74(uint64_t a1, unsigned __int8 *a2, int a3)
{
  uint64_t v3 = *(void **)(a1 + 224);
  uint64_t v4 = (void *)(a1 + 232);
  if (v3 != (void *)(a1 + 232))
  {
    do
    {
      id v7 = (void *)v3[5];
      if ((*(unsigned int (**)(void *))(*v7 + 16))(v7) == 3)
      {
        BOOL v8 = qword_100A19F00;
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 67109120;
          int v13 = a3;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "classic: pairingStarted incoming?: %d", buf, 8u);
        }
        if (v7[28]) {
          sub_1004411A4((uint64_t)v7, 0, a2);
        }
      }
      BOOL v9 = (void *)v3[1];
      if (v9)
      {
        do
        {
          id v10 = v9;
          BOOL v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          id v10 = (void *)v3[2];
          BOOL v11 = *v10 == (void)v3;
          uint64_t v3 = v10;
        }
        while (!v11);
      }
      uint64_t v3 = v10;
    }
    while (v10 != v4);
  }
}

void sub_100302BE0(uint64_t a1, unsigned __int8 *a2, int a3)
{
}

void sub_100302BE8(uint64_t a1, unsigned __int8 *a2, int a3)
{
  uint64_t v3 = *(void **)(a1 + 224);
  uint64_t v4 = (void *)(a1 + 232);
  if (v3 != (void *)(a1 + 232))
  {
    do
    {
      id v7 = (void *)v3[5];
      if ((*(unsigned int (**)(void *))(*v7 + 16))(v7) == 3)
      {
        BOOL v8 = qword_100A19F00;
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 67109376;
          int v13 = a3;
          __int16 v14 = 1024;
          int v15 = a3;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "classic: pairingComplete: %d (0x%x)", buf, 0xEu);
        }
        if (v7[28]) {
          sub_1004412FC((uint64_t)v7, 0, a2, a3);
        }
      }
      BOOL v9 = (void *)v3[1];
      if (v9)
      {
        do
        {
          id v10 = v9;
          BOOL v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          id v10 = (void *)v3[2];
          BOOL v11 = *v10 == (void)v3;
          uint64_t v3 = v10;
        }
        while (!v11);
      }
      uint64_t v3 = v10;
    }
    while (v10 != v4);
  }
}

void sub_100302D64(uint64_t a1, unsigned __int8 *a2, int a3)
{
}

void sub_100302D6C(uint64_t a1, unsigned __int8 *a2, int a3)
{
  uint64_t v3 = *(void **)(a1 + 224);
  uint64_t v4 = (void *)(a1 + 232);
  if (v3 != (void *)(a1 + 232))
  {
    do
    {
      id v7 = (void *)v3[5];
      if ((*(unsigned int (**)(void *))(*v7 + 16))(v7) == 3)
      {
        BOOL v8 = qword_100A19F00;
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 67109376;
          int v13 = a3;
          __int16 v14 = 1024;
          int v15 = a3;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "classic: deviceWillUnpair: %d (0x%x)", buf, 0xEu);
        }
        if (v7[28]) {
          sub_100441474((uint64_t)v7, 0, a2);
        }
      }
      BOOL v9 = (void *)v3[1];
      if (v9)
      {
        do
        {
          id v10 = v9;
          BOOL v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          id v10 = (void *)v3[2];
          BOOL v11 = *v10 == (void)v3;
          uint64_t v3 = v10;
        }
        while (!v11);
      }
      uint64_t v3 = v10;
    }
    while (v10 != v4);
  }
}

void sub_100302EE8(uint64_t a1, unsigned __int8 *a2, int a3)
{
}

void sub_100302EF0(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009A4EB8);
  }
  v19[0] = 0;
  v19[1] = 0;
  sub_100014B58((uint64_t)off_1009F7ED8, ((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133], 1u, 0, 0, 0, (unsigned __int8 *)v19);
  uint64_t v6 = sub_100031234((const unsigned __int8 *)v19);
  id v7 = qword_100A19F00;
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = a2[1332];
      v16[0] = 67109376;
      v16[1] = v8;
      __int16 v17 = 2048;
      uint64_t v18 = sub_100480A58((uint64_t)a2);
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "UN: notifyDeviceConnected: ACL? %d, sevices: %lu", (uint8_t *)v16, 0x12u);
    }
    BOOL v9 = *(void **)(a1 + 224);
    id v10 = (void *)(a1 + 232);
    if (v9 != (void *)(a1 + 232))
    {
      uint64_t v11 = 2 * a2[1332];
      do
      {
        uint64_t v12 = v9[5];
        if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 16))(v12) == 3) {
          sub_1004407BC(v12, v6, a3, v11);
        }
        int v13 = (void *)v9[1];
        if (v13)
        {
          do
          {
            __int16 v14 = v13;
            int v13 = (void *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            __int16 v14 = (void *)v9[2];
            BOOL v15 = *v14 == (void)v9;
            BOOL v9 = v14;
          }
          while (!v15);
        }
        BOOL v9 = v14;
      }
      while (v14 != v10);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
  {
    sub_100755BDC();
  }
}

void sub_10030310C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030312C(uint64_t a1, unsigned __int8 *a2, int a3, int a4, uint64_t a5)
{
  id v10 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    sub_100475EE0((uint64_t)a2, (uint64_t)__p);
    uint64_t v11 = v20 >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)long long buf = 136446722;
    *(void *)&uint8_t buf[4] = v11;
    __int16 v22 = 1024;
    int v23 = a3;
    __int16 v24 = 1024;
    int v25 = a4;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "AppManager::serviceEvent Device: %{public}s BTServiceID: %d, BTServiceSpecificEvent %d", buf, 0x18u);
    if (v20 < 0) {
      operator delete(*(void **)__p);
    }
  }
  if ((a4 - 11) < 2)
  {
    sub_10030340C(a1, a2, a3, a4, a5);
  }
  else if (a4 == 701)
  {
    int v13 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18((uint64_t)a2, buf);
      __int16 v14 = v25 >= 0 ? buf : *(unsigned char **)buf;
      *(_DWORD *)std::string __p = 136446210;
      *(void *)&__p[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "UN: notify name changed after remote name request %{public}s", __p, 0xCu);
      if (SHIBYTE(v25) < 0) {
        operator delete(*(void **)buf);
      }
    }
    if (!a5)
    {
      BOOL v15 = *(void **)(a1 + 224);
      if (v15 != (void *)(a1 + 232))
      {
        do
        {
          if ((*(unsigned int (**)(void))(*(void *)v15[5] + 16))(v15[5]) == 3) {
            (*(void (**)(void, unsigned __int8 *))(**(void **)(v15[5] + 216) + 32))(*(void *)(v15[5] + 216), a2);
          }
          id v16 = (void *)v15[1];
          if (v16)
          {
            do
            {
              __int16 v17 = v16;
              id v16 = (void *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              __int16 v17 = (void *)v15[2];
              BOOL v18 = *v17 == (void)v15;
              BOOL v15 = v17;
            }
            while (!v18);
          }
          BOOL v15 = v17;
        }
        while (v17 != (void *)(a1 + 232));
      }
    }
  }
  else if (a4 == 4)
  {
    if (qword_1009F87A8 != -1) {
      dispatch_once(&qword_1009F87A8, &stru_1009A5098);
    }
    if ((sub_10046EB8C((uint64_t)off_1009F87A0, (uint64_t)a2) & 1) == 0)
    {
      uint64_t v12 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEBUG)) {
        sub_100755C10((uint64_t)a2, v12);
      }
      sub_100302EF0(a1, a2, a5);
    }
  }
}

void sub_10030340C(uint64_t a1, unsigned __int8 *a2, int a3, int a4, uint64_t a5)
{
  id v10 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109632;
    *(_DWORD *)&uint8_t buf[4] = a4;
    __int16 v16 = 1024;
    int v17 = a3;
    __int16 v18 = 1024;
    int v19 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "UN: notifyServiceConnectionChanged  event: %d, for serviceID: 0x%x, result %d ", buf, 0x14u);
  }
  if (a4 == 11)
  {
    if (a5 == 114 || a5 == 109)
    {
      if (sub_100040630(a2))
      {
LABEL_23:
        sub_100302EF0(a1, a2, 0);
        return;
      }
      char v14 = 0;
      sub_10001B8E0(&v14);
      int v13 = 0;
      uint64_t v11 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18((uint64_t)a2, buf);
        uint64_t v12 = v20 >= 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)uint64_t v21 = 136446210;
        __int16 v22 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "UN: force pairing to %{public}s", v21, 0xCu);
        if (v20 < 0) {
          operator delete(*(void **)buf);
        }
      }
      if (sub_10025CE54((uint64_t)sub_100303684, (uint64_t)(a2 + 128), (long long *)&unk_1009A4D30, &v13, 1))
      {
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
          sub_100755CB4();
        }
      }
      sub_100302EF0(a1, a2, 0);
      sub_10001B8AC(&v14);
    }
    else
    {
      if (a3 == -1 && a5)
      {
        sub_100302EF0(a1, a2, a5);
        return;
      }
      if (!a5 && sub_100480A58((uint64_t)a2) == 1) {
        goto LABEL_23;
      }
    }
  }
}

void sub_10030365C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_10030367C(uint64_t a1, unsigned __int8 *a2, int a3, int a4, uint64_t a5)
{
}

void sub_100303684(uint64_t a1, int a2)
{
  uint64_t v3 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "UN: Pairing complete with status %d", (uint8_t *)v4, 8u);
  }
}

void sub_100303728(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100019878();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1003037A8;
  v5[3] = &unk_100998260;
  void v5[4] = a1;
  void v5[5] = a2;
  sub_100013018(v4, v5);
}

void sub_1003037A8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(void **)(v1 + 224);
  uint64_t v3 = (void *)(v1 + 232);
  if (v2 != (void *)(v1 + 232))
  {
    do
    {
      uint64_t v5 = v2[5];
      if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5) == 3) {
        sub_1004415CC(v5, 0, *(void *)(a1 + 40));
      }
      uint64_t v6 = (void *)v2[1];
      if (v6)
      {
        do
        {
          id v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          id v7 = (void *)v2[2];
          BOOL v8 = *v7 == (void)v2;
          id v2 = v7;
        }
        while (!v8);
      }
      id v2 = v7;
    }
    while (v7 != v3);
  }
}

void sub_100303860(uint64_t a1, uint64_t a2)
{
}

void sub_100303870(uint64_t a1, unsigned __int8 *a2)
{
  id v2 = *(void **)(a1 + 224);
  uint64_t v3 = (void *)(a1 + 232);
  if (v2 != (void *)(a1 + 232))
  {
    do
    {
      uint64_t v5 = v2[5];
      if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5) == 3) {
        sub_10044188C(v5, 0, a2);
      }
      uint64_t v6 = (void *)v2[1];
      if (v6)
      {
        do
        {
          id v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          id v7 = (void *)v2[2];
          BOOL v8 = *v7 == (void)v2;
          id v2 = v7;
        }
        while (!v8);
      }
      id v2 = v7;
    }
    while (v7 != v3);
  }
}

void sub_100303924(uint64_t a1, unsigned __int8 *a2)
{
}

uint64_t sub_10030392C(uint64_t a1, unint64_t a2)
{
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009A4FD8);
  }
  uint64_t v2 = sub_1000066B0((uint64_t)off_1009F8780, a2, 2u);
  if (v2 && (uint64_t v3 = v2, !(*(unsigned int (**)(uint64_t))(*(void *)v2 + 16))(v2)))
  {
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    obuint64_t j = *(id *)(v3 + 336);
    uint64_t v5 = 0;
    id v6 = [obj countByEnumeratingWithState:&v20 objects:v32 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v21;
      do
      {
        BOOL v8 = 0;
        do
        {
          if (*(void *)v21 != v7) {
            objc_enumerationMutation(obj);
          }
          BOOL v9 = *(void **)(*((void *)&v20 + 1) + 8 * (void)v8);
          if (qword_1009F7EC0 != -1) {
            dispatch_once(&qword_1009F7EC0, &stru_1009A4E38);
          }
          id v10 = off_1009F7EB8;
          sub_1000305AC(buf, v9);
          BOOL v11 = sub_1000307A4((uint64_t)v10, buf);
          if (qword_1009F7ED0 != -1) {
            dispatch_once(&qword_1009F7ED0, &stru_1009A4E98);
          }
          BOOL v12 = sub_100008DC4(qword_1009F7EC8, v9);
          int v13 = qword_100A19F58;
          if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT))
          {
            sub_10003AE4C(a2, (uint64_t)__p);
            char v14 = __p;
            if (v19 < 0) {
              char v14 = (void **)__p[0];
            }
            *(_DWORD *)long long buf = 136446978;
            int v25 = v14;
            __int16 v26 = 2114;
            long long v27 = v9;
            __int16 v28 = 1024;
            BOOL v29 = v12;
            __int16 v30 = 1024;
            BOOL v31 = v11;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Session %{public}s is associated with %{public}@ : isPaired %d, isConnected %d", buf, 0x22u);
            if (v19 < 0) {
              operator delete(__p[0]);
            }
          }
          uint64_t v5 = (v5 + v12);
          BOOL v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        id v6 = [obj countByEnumeratingWithState:&v20 objects:v32 count:16];
      }
      while (v6);
    }
  }
  else
  {
    uint64_t v4 = qword_100A19F58;
    uint64_t v5 = 0;
    if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "No central session found for associated session", buf, 2u);
      return 0;
    }
  }
  return v5;
}

void sub_100303C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_100303C58(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (![*(id *)(a1 + 296) containsObject:v3])
  {
    uint64_t v5 = +[NSMutableArray array];
    id v6 = +[NSMutableArray array];
    uint64_t v7 = qword_100A19F58;
    if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138543362;
      id v26 = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Resurrecting zombie application \"%{public}@\"", buf, 0xCu);
    }
    BOOL v9 = *(void **)(a1 + 224);
    if (v9 == (void *)(a1 + 232))
    {
LABEL_26:
      sub_1002F2C3C(a1, v3, 15);
      uint64_t v21 = sub_100052E70();
      (*(void (**)(uint64_t, id, void *, void *))(*(void *)v21 + 16))(v21, v3, v5, v6);
      [*(id *)(a1 + 296) addObject:v3];

      goto LABEL_27;
    }
    *(void *)&long long v8 = 138543362;
    long long v22 = v8;
    while (1)
    {
      uint64_t v10 = v9[5];
      if (objc_msgSend(*(id *)(v10 + 88), "isEqualToString:", v3, v22)
        && *(unsigned char *)(v10 + 24)
        && *(void *)(v10 + 96))
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 16))(v10) == 1)
        {
          [v6 addObject:*(void *)(v10 + 96)];
          uint64_t v11 = qword_100A19F58;
          if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT))
          {
            BOOL v12 = *(void **)(v10 + 96);
            *(_DWORD *)long long buf = v22;
            id v26 = v12;
            int v13 = v11;
            char v14 = "Peripheral session is undead: %{public}@";
LABEL_19:
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v14, buf, 0xCu);
          }
        }
        else
        {
          if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 16))(v10))
          {
            BOOL v15 = qword_100A19F00;
            if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
              sub_100755D1C(&v23, v24, v15);
            }
            goto LABEL_20;
          }
          [v5 addObject:*(void *)(v10 + 96)];
          uint64_t v16 = qword_100A19F58;
          if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT))
          {
            int v17 = *(void **)(v10 + 96);
            *(_DWORD *)long long buf = v22;
            id v26 = v17;
            int v13 = v16;
            char v14 = "Central session is undead: %{public}@";
            goto LABEL_19;
          }
        }
      }
LABEL_20:
      __int16 v18 = (void *)v9[1];
      if (v18)
      {
        do
        {
          char v19 = v18;
          __int16 v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          char v19 = (void *)v9[2];
          BOOL v20 = *v19 == (void)v9;
          BOOL v9 = v19;
        }
        while (!v20);
      }
      BOOL v9 = v19;
      if (v19 == (void *)(a1 + 232)) {
        goto LABEL_26;
      }
    }
  }
  uint64_t v4 = qword_100A19F58;
  if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138543362;
    id v26 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Already attempting to resurrect \"%{public}@\"", buf, 0xCu);
  }
LABEL_27:
}

void sub_100303FB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100303FEC(uint64_t a1)
{
}

void sub_100303FF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = qword_100A19F58;
  if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138543362;
    *(void *)((char *)&buf + 4) = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Verifying Application Resurrected <%{public}@>", (uint8_t *)&buf, 0xCu);
  }
  uint64_t v5 = [*(id *)(a1 + 304) objectForKey:v3];
  BOOL v6 = v5 == 0;

  uint64_t v7 = qword_100A19F58;
  BOOL v8 = os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Verify Application Resurrected for Id <%{public}@> was not in resurrectionTimers", (uint8_t *)&buf, 0xCu);
    }
  }
  else
  {
    if (v8)
    {
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Removing Application Id <%{public}@>", (uint8_t *)&buf, 0xCu);
    }
    [*(id *)(a1 + 304) removeObjectForKey:v3];
  }
  long long buf = 0uLL;
  __int16 v41 = 0;
  BOOL v9 = *(void **)(a1 + 224);
  if (v9 == (void *)(a1 + 232))
  {
    char v10 = 0;
  }
  else
  {
    char v10 = 0;
    do
    {
      uint64_t v12 = v9[4];
      uint64_t v11 = v9[5];
      if ([*(id *)(v11 + 88) isEqualToString:v3])
      {
        if (*(void *)(v11 + 120))
        {
          char v10 = 1;
        }
        else
        {
          int v13 = qword_100A19F58;
          if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v14 = *(void *)(v11 + 88);
            uint64_t v15 = *(void *)(v11 + 96);
            *(_DWORD *)uint64_t v36 = 138543618;
            *(void *)&v36[4] = v14;
            __int16 v37 = 2114;
            uint64_t v38 = v15;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Reaping Disconnected Session %{public}@ %{public}@", v36, 0x16u);
          }
          uint64_t v16 = *((void *)&buf + 1);
          if (*((void *)&buf + 1) >= (unint64_t)v41)
          {
            uint64_t v18 = (uint64_t)(*((void *)&buf + 1) - buf) >> 3;
            if ((unint64_t)(v18 + 1) >> 61) {
              abort();
            }
            unint64_t v19 = (uint64_t)&v41[-buf] >> 2;
            if (v19 <= v18 + 1) {
              unint64_t v19 = v18 + 1;
            }
            if ((unint64_t)&v41[-buf] >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v20 = v19;
            }
            if (v20) {
              uint64_t v21 = (char *)sub_1000405F8((uint64_t)&v41, v20);
            }
            else {
              uint64_t v21 = 0;
            }
            long long v22 = &v21[8 * v18];
            *(void *)long long v22 = v12;
            int v17 = v22 + 8;
            uint8_t v23 = (char *)*((void *)&buf + 1);
            __int16 v24 = (char *)buf;
            if (*((void *)&buf + 1) != (void)buf)
            {
              do
              {
                uint64_t v25 = *((void *)v23 - 1);
                v23 -= 8;
                *((void *)v22 - 1) = v25;
                v22 -= 8;
              }
              while (v23 != v24);
              uint8_t v23 = (char *)buf;
            }
            *(void *)&long long buf = v22;
            *((void *)&buf + 1) = v17;
            __int16 v41 = &v21[8 * v20];
            if (v23) {
              operator delete(v23);
            }
          }
          else
          {
            **((void **)&buf + 1) = v12;
            int v17 = (void *)(v16 + 8);
          }
          *((void *)&buf + 1) = v17;
        }
        if (!*(unsigned char *)(v11 + 39))
        {
          id v26 = qword_100A19F00;
          if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v27 = *(void *)(v11 + 88);
            *(_DWORD *)uint64_t v36 = 138543362;
            *(void *)&v36[4] = v27;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "App Restored but TCCDone missing %{public}@", v36, 0xCu);
          }
          if ([*(id *)(v11 + 88) isEqual:@"com.teslamotors.TeslaApp"])
          {
            if (qword_1009FB088 != -1) {
              dispatch_once(&qword_1009FB088, &stru_1009A50B8);
            }
            uint64_t v28 = qword_1009FB080;
            sub_10004191C(v36, "App Restoration");
            sub_10004191C(__p, "TCCDoneMissing");
            sub_1004B7DA8(60.0, v28, (uint64_t *)v36, (uint64_t *)__p);
            if (v35 < 0) {
              operator delete(__p[0]);
            }
            if (v39 < 0) {
              operator delete(*(void **)v36);
            }
          }
        }
      }
      BOOL v29 = (void *)v9[1];
      if (v29)
      {
        do
        {
          __int16 v30 = v29;
          BOOL v29 = (void *)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          __int16 v30 = (void *)v9[2];
          BOOL v31 = *v30 == (void)v9;
          BOOL v9 = v30;
        }
        while (!v31);
      }
      BOOL v9 = v30;
    }
    while (v30 != (void *)(a1 + 232));
    char v33 = (unint64_t *)*((void *)&buf + 1);
    for (uint64_t i = (unint64_t *)buf; i != v33; ++i)
      sub_10002CE08(a1, *i, 1);
  }
  [*(id *)(a1 + 296) removeObject:v3];
  if ((v10 & 1) == 0 && os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
    sub_100755DC4();
  }
  if ([*(id *)(a1 + 352) containsObject:v3]
    && os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
  {
    sub_100755D5C();
  }
  if ((void)buf)
  {
    *((void *)&buf + 1) = buf;
    operator delete((void *)buf);
  }
}

void sub_1003044BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30)
{
  _Unwind_Resume(a1);
}

void sub_10030452C(uint64_t a1, int a2)
{
  uint64_t v4 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = "Completed";
    if (a2) {
      uint64_t v5 = "Needs to run.";
    }
    int v8 = 136446210;
    BOOL v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Current SetupBuddy state: %{public}s.", (uint8_t *)&v8, 0xCu);
  }
  *(unsigned char *)(a1 + 312) = a2;
  LOBYTE(v8) = 0;
  uint64_t v6 = sub_10003FFD4();
  (*(void (**)(uint64_t, int *))(*(void *)v6 + 104))(v6, &v8);
  if ((_BYTE)v8)
  {
    if (*(unsigned char *)(a1 + 312)) {
      return;
    }
    sub_1003013DC(a1, 0);
  }
  if (!*(unsigned char *)(a1 + 312))
  {
    uint64_t v7 = sub_10003FFD4();
    sub_10030B604(v7 + 488, a1 + 120);
  }
}

void sub_10030465C(uint64_t a1, int a2)
{
}

void sub_100304664(uint64_t a1)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009A5118);
  }
  uint64_t v2 = sub_100030F10((uint64_t)off_1009F7EF8, *(void *)(a1 + 40), 0);
  if (v2)
  {
    uint64_t v3 = v2;
    if (sub_10047945C(v2))
    {
      if (qword_1009F8090 != -1) {
        dispatch_once(&qword_1009F8090, &stru_1009A4F78);
      }
      int v4 = sub_1004D41B4((uint64_t)off_1009F8088, v3);
      if ((v4 & 0x100000) == 0)
      {
        int v5 = v4;
        uint64_t v6 = qword_100A19F00;
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
        {
          uint64_t v7 = *(void *)(a1 + 32);
          if (qword_1009F8090 != -1) {
            dispatch_once(&qword_1009F8090, &stru_1009A4F78);
          }
          *(_DWORD *)long long buf = 138543874;
          *(void *)&uint8_t buf[4] = v7;
          *(_WORD *)&unsigned char buf[12] = 1024;
          int v28 = v5;
          __int16 v29 = 1024;
          int v30 = sub_1004D6124((uint64_t)off_1009F8088, v3);
          _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Attempting to disconnectUnusedDevices to %{public}@ that doesn't have GATT connected (connected services %d, supported services %d)", buf, 0x18u);
        }
        return;
      }
      int v26 = 0;
      sub_10010BB74(&v26, 0);
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009A4EB8);
      }
      int v8 = sub_1006BBB14((uint64_t)off_1009F7ED8, *(void **)(a1 + 32)) + (unsigned __int16)word_1009FB220;
      int v9 = v26;
      char v10 = qword_100A19F00;
      int v11 = v8 - v26;
      if (v8 >= v26)
      {
        if (!os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO)) {
          return;
        }
        uint64_t v20 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 138543618;
        *(void *)&uint8_t buf[4] = v20;
        *(_WORD *)&unsigned char buf[12] = 1024;
        int v28 = v11;
        uint64_t v16 = "Device \"%{public}@\" is unused, but is within the grace period for %d more seconds - skipping";
        int v17 = v10;
        os_log_type_t v18 = OS_LOG_TYPE_INFO;
        uint32_t v19 = 18;
        goto LABEL_27;
      }
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v8;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v9;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Disconnecting due to grace time %d curTime %d", buf, 0xEu);
      }
      uint64_t v12 = sub_100017768();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 8))(v12))
      {
        char v25 = 0;
        uint64_t v13 = sub_100017768();
        sub_10004191C(buf, "CATT");
        sub_10004191C(__p, "DisableClassicGraceTimer");
        (*(void (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v13 + 72))(v13, buf, __p, &v25);
        if (v24 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v30) < 0) {
          operator delete(*(void **)buf);
        }
        if (v25)
        {
          uint64_t v14 = qword_100A19F00;
          if (!os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT)) {
            return;
          }
          uint64_t v15 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 138543362;
          *(void *)&uint8_t buf[4] = v15;
          uint64_t v16 = "Grace timer disabled for classic devices, not disconnecting %{public}@";
          int v17 = v14;
          os_log_type_t v18 = OS_LOG_TYPE_DEFAULT;
          uint32_t v19 = 12;
LABEL_27:
          _os_log_impl((void *)&_mh_execute_header, v17, v18, v16, buf, v19);
          return;
        }
      }
      uint64_t v21 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v22 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 138543362;
        *(void *)&uint8_t buf[4] = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Disconnecting GATT for unused classic device \"%{public}@\"", buf, 0xCu);
      }
      if (qword_1009F8090 != -1) {
        dispatch_once(&qword_1009F8090, &stru_1009A4F78);
      }
      sub_1004D76C0((uint64_t)off_1009F8088, v3, 0x100000);
    }
  }
}

void sub_100304A90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

id sub_100304ACC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v35 = 0;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  *(_OWORD *)uint8_t v23 = 0u;
  long long v24 = 0u;
  memset(v22, 0, sizeof(v22));
  long long v21 = 0u;
  sub_10004C67C((uint64_t)&v21);
  int v4 = objc_opt_new();
  int v5 = *(void **)(a1 + 224);
  if (v5 != (void *)(a1 + 232))
  {
    while (1)
    {
      if ((*(unsigned int (**)(void))(*(void *)v5[5] + 16))(v5[5])) {
        goto LABEL_7;
      }
      uint64_t v6 = [*(id *)(v5[5] + 248) objectForKeyedSubscript:v3];
      if (![v6 opportunistic]) {
        break;
      }
      sub_10003AE4C(v5[4], (uint64_t)&__p);
      uint64_t v7 = sub_10003AB28((uint64_t)v22);
      sub_10003AB28(v7);
      if (v20 < 0) {
        operator delete(__p);
      }
LABEL_11:

      uint64_t v12 = (void *)v5[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)v5[2];
          BOOL v14 = *v13 == (void)v5;
          int v5 = v13;
        }
        while (!v14);
      }
      int v5 = v13;
      if (v13 == (void *)(a1 + 232)) {
        goto LABEL_17;
      }
    }

LABEL_7:
    uint64_t v6 = [*(id *)(v5[5] + 80) objectForKeyedSubscript:v3];
    if (v6)
    {
      sub_10003AE4C(v5[4], (uint64_t)&__p);
      uint64_t v8 = sub_10003AB28((uint64_t)v22);
      uint64_t v9 = sub_10003AB28(v8);
      char v10 = sub_100304F74((int)[v6 intValue]);
      strlen(v10);
      uint64_t v11 = sub_10003AB28(v9);
      sub_10003AB28(v11);
      if (v20 < 0) {
        operator delete(__p);
      }
      [v4 addObject:v6];
    }
    goto LABEL_11;
  }
LABEL_17:
  uint64_t v15 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO))
  {
    std::stringbuf::str();
    uint64_t v16 = v20 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)long long buf = 136315138;
    __int16 v37 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "desired latencies:%s", buf, 0xCu);
    if (v20 < 0) {
      operator delete(__p);
    }
  }
  *(void *)((char *)&v22[-1]
  *(void *)&v22[0] = v17;
  if (SHIBYTE(v24) < 0) {
    operator delete(v23[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();

  return v4;
}

void sub_100304EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_100742518((uint64_t)&a16);
  _Unwind_Resume(a1);
}

const char *sub_100304F74(int a1)
{
  if ((a1 + 11) > 0xD) {
    return "unknown";
  }
  else {
    return off_1009A5158[a1 + 11];
  }
}

uint64_t sub_100304F9C(uint64_t a1, void *a2)
{
  int v59 = 0;
  int v58 = 0;
  int v57 = 0;
  int v56 = 0;
  int v55 = 0;
  __int16 v54 = 0;
  __int16 v53 = 0;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  id v2 = a2;
  id v3 = [v2 countByEnumeratingWithState:&v49 objects:v62 count:16];
  if (v3)
  {
    char v4 = 0;
    uint64_t v5 = 0;
    uint64_t v31 = *(void *)v50;
    unsigned __int16 v6 = -1;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v50 != v31) {
          objc_enumerationMutation(v2);
        }
        unsigned int v8 = [*(id *)(*((void *)&v49 + 1) + 8 * (void)v7) intValue];
        if (qword_1009F7EC0 != -1) {
          dispatch_once(&qword_1009F7EC0, &stru_1009A4E38);
        }
        if (!sub_100684D50(off_1009F7EB8, v8, (__int16 *)&v59 + 1, (__int16 *)&v59, (__int16 *)&v57, (__int16 *)&v57 + 1, (_WORD *)&v58 + 1, (__int16 *)&v58, (_WORD *)&v56 + 1, &v56, (_WORD *)&v55 + 1, &v55, &v54, (unsigned char *)&v53 + 1, &v53))
        {
          uint64_t v48 = 0;
          long long v46 = 0u;
          long long v47 = 0u;
          long long v44 = 0u;
          long long v45 = 0u;
          long long v42 = 0u;
          long long v43 = 0u;
          long long v40 = 0u;
          long long v41 = 0u;
          long long v38 = 0u;
          long long v39 = 0u;
          *(_OWORD *)uint64_t v36 = 0u;
          long long v37 = 0u;
          memset(v35, 0, sizeof(v35));
          long long v34 = 0u;
          sub_10004C67C((uint64_t)&v34);
          uint64_t v9 = sub_10003AB28((uint64_t)v35);
          char v10 = sub_100304F74(v8);
          strlen(v10);
          uint64_t v11 = sub_10003AB28(v9);
          uint64_t v12 = sub_10003AB28(v11);
          uint64_t v13 = sub_100304F74(v5);
          strlen(v13);
          uint64_t v14 = sub_10003AB28(v12);
          sub_10003AB28(v14);
          uint64_t v15 = std::ostream::operator<<();
          uint64_t v16 = sub_10003AB28(v15);
          uint64_t v17 = sub_10003AB28(v16);
          sub_10003AB28(v17);
          if (v4) {
            unsigned int v18 = v5;
          }
          else {
            unsigned int v18 = v8;
          }
          if ((unsigned __int16)v59 != v6 || (unsigned __int16)v59 != HIWORD(v59)) {
            unsigned int v18 = v5;
          }
          if ((unsigned __int16)v59 >= v6) {
            v4 |= (unsigned __int16)v59 == v6 && (unsigned __int16)v59 == HIWORD(v59);
          }
          else {
            char v4 = (unsigned __int16)v59 == HIWORD(v59);
          }
          if ((unsigned __int16)v59 >= v6) {
            uint64_t v5 = v18;
          }
          else {
            uint64_t v5 = v8;
          }
          if ((unsigned __int16)v59 < v6) {
            unsigned __int16 v6 = v59;
          }
          uint64_t v19 = sub_10003AB28((uint64_t)v35);
          char v20 = sub_100304F74(v5);
          strlen(v20);
          uint64_t v21 = sub_10003AB28(v19);
          sub_10003AB28(v21);
          uint64_t v22 = std::ostream::operator<<();
          uint64_t v23 = sub_10003AB28(v22);
          uint64_t v24 = sub_10003AB28(v23);
          sub_10003AB28(v24);
          long long v25 = qword_100A19F00;
          if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO))
          {
            std::stringbuf::str();
            p_p = &__p;
            if (v33 < 0) {
              p_p = __p;
            }
            *(_DWORD *)long long buf = 136315138;
            long long v61 = p_p;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "%s", buf, 0xCu);
            if (v33 < 0) {
              operator delete(__p);
            }
          }
          *(void *)&long long v34 = v30;
          *(void *)((char *)&v35[-1] + *(void *)(v30 - 24)) = v29;
          *(void *)&v35[0] = v28;
          if (SHIBYTE(v37) < 0) {
            operator delete(v36[1]);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          std::ios::~ios();
        }
        uint64_t v7 = (char *)v7 + 1;
      }
      while (v3 != v7);
      id v3 = [v2 countByEnumeratingWithState:&v49 objects:v62 count:16];
    }
    while (v3);
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

void sub_100305508(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100305550(uint64_t a1, void *a2, uint64_t a3)
{
  id v11 = a2;
  uint64_t v5 = *(void **)(a1 + 224);
  unsigned __int16 v6 = (void *)(a1 + 232);
  if (v5 != (void *)(a1 + 232))
  {
    do
    {
      if (!(*(unsigned int (**)(void))(*(void *)v5[5] + 16))(v5[5]))
      {
        uint64_t v10 = v5[5];
        if (*(void *)(v10 + 120))
        {
          if (sub_1002F407C(v5[5], (uint64_t)v11)) {
            (*(void (**)(void, void, id, uint64_t))(**(void **)(v10 + 120) + 176))(*(void *)(v10 + 120), 0, v11, a3);
          }
        }
      }
      uint64_t v7 = (void *)v5[1];
      if (v7)
      {
        do
        {
          unsigned int v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unsigned int v8 = (void *)v5[2];
          BOOL v9 = *v8 == (void)v5;
          uint64_t v5 = v8;
        }
        while (!v9);
      }
      uint64_t v5 = v8;
    }
    while (v8 != v6);
  }
}

void sub_10030566C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100305684(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  int v5 = *(unsigned char *)(a2 + 129) & 0x30;
  unsigned __int16 v6 = qword_100A19F00;
  BOOL v7 = os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v7)
    {
      int v10 = 138543362;
      id v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Foreground active, notifying ServiceManager CTKD device %{public}@ connected to bridge", (uint8_t *)&v10, 0xCu);
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009A4EB8);
    }
    uint64_t v8 = sub_100030DCC((uint64_t)off_1009F7ED8, v4, 0);
    if (qword_1009F8090 != -1) {
      dispatch_once(&qword_1009F8090, &stru_1009A4F78);
    }
    sub_1004D7D08((uint64_t)off_1009F8088, v8);
  }
  else if (v7)
  {
    uint64_t v9 = *(void *)(a2 + 88);
    int v10 = 138543618;
    id v11 = v4;
    __int16 v12 = 2114;
    uint64_t v13 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "TransportBridging enabled, CTKD device %{public}@ connected, but %{public}@ is not foregrounded, not bridging.", (uint8_t *)&v10, 0x16u);
  }
}

void sub_10030580C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100305824(uint64_t a1, void *a2, void *a3, char a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v41 = 0;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v30 = 0u;
  memset(v28, 0, sizeof(v28));
  long long v27 = 0u;
  sub_10004C67C((uint64_t)&v27);
  uint64_t v9 = *(void **)(a1 + 224);
  if (v9 != (void *)(a1 + 232))
  {
    do
    {
      uint64_t v10 = v9[4];
      id v11 = (id *)v9[5];
      if (!(*((unsigned int (**)(id *))*v11 + 2))(v11))
      {
        sub_10042FE84((uint64_t)v11, v7, v8);
        uint64_t v15 = [v11[31] objectForKeyedSubscript:v7];
        if (v15)
        {
          BOOL v16 = sub_10042FE64((uint64_t)v11);

          if (v16)
          {
            sub_100551758(v10, v44);
            uint64_t v17 = sub_10003AB28((uint64_t)v28);
            sub_10003AB28(v17);
            if (SHIBYTE(v44[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v44[0].__r_.__value_.__l.__data_);
            }
          }
        }
      }
      __int16 v12 = (void *)v9[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          __int16 v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)v9[2];
          BOOL v14 = *v13 == (void)v9;
          uint64_t v9 = v13;
        }
        while (!v14);
      }
      uint64_t v9 = v13;
    }
    while (v13 != (void *)(a1 + 232));
  }
  if (a4)
  {
    long long v25 = &off_100998428;
    long long v26 = 0;
    std::stringbuf::str();
    if (SHIBYTE(v44[0].__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type size = v44[0].__r_.__value_.__l.__size_;
      operator delete(v44[0].__r_.__value_.__l.__data_);
      if (!size)
      {
LABEL_23:
        uint64_t v20 = sub_1003731C0();
        std::stringbuf::str();
        if ((v44[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v21 = v44;
        }
        else {
          uint64_t v21 = (std::string *)v44[0].__r_.__value_.__r.__words[0];
        }
        uint64_t v23 = &off_100998428;
        uint64_t v24 = v26;
        (*(void (**)(uint64_t, uint64_t, std::string *, id, uint64_t (***)()))(*(void *)v20 + 40))(v20, 4, v21, v7, &v23);
        uint64_t v23 = &off_100998428;
        if (v24) {
          sub_1000368F4(v24);
        }
        if (SHIBYTE(v44[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v44[0].__r_.__value_.__l.__data_);
        }
        long long v25 = &off_100998428;
        if (v26) {
          sub_1000368F4(v26);
        }
        goto LABEL_32;
      }
    }
    else if (!*((unsigned char *)&v44[0].__r_.__value_.__s + 23))
    {
      goto LABEL_23;
    }
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    std::ostream::sentry::sentry();
    uint64_t v19 = (char *)v28 + *(void *)(*(void *)&v28[0] - 24);
    if ((v19[32] & 5) == 0)
    {
      (*(void (**)(std::string *__return_ptr))(**((void **)v19 + 5) + 32))(v44);
      if (v45 == -1) {
        std::ios_base::clear((std::ios_base *)((char *)v28 + *(void *)(*(void *)&v28[0] - 24)), *(_DWORD *)((char *)&v28[2] + *(void *)(*(void *)&v28[0] - 24)) | 4);
      }
    }
    std::ostream::sentry::~sentry();
    v44[0].__r_.__value_.__s.__data_[0] = 0;
    sub_10003AB28((uint64_t)v28);
    goto LABEL_23;
  }
LABEL_32:
  *(void *)((char *)&v28[-1]
  *(void *)&v28[0] = v22;
  if (SHIBYTE(v30) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
}

void sub_100305CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, atomic_uint *a5, ...)
{
  va_start(va, a5);
  std::ostream::sentry::~sentry();
  if (a5) {
    sub_1000368F4(a5);
  }
  sub_100742518((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_100305DAC(uint64_t a1, void *a2, void *a3, char a4)
{
}

void sub_100305DB4(void *a1)
{
  id v2 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[36];
    *(_DWORD *)long long buf = 67109120;
    int v18 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Sending Daily LEAppConnect metrics to CoreAnalytics %d", buf, 8u);
  }
  id v4 = (void *)a1[34];
  int v5 = a1 + 35;
  if (v4 != a1 + 35)
  {
    do
    {
      char v6 = *((unsigned char *)v4 + 55);
      if (v6 < 0)
      {
        if (v4[5])
        {
LABEL_8:
          if (*((unsigned char *)v4 + 56))
          {
            id v7 = v4 + 4;
            v15[0] = @"BundleID";
            if (v6 < 0) {
              id v7 = (void *)*v7;
            }
            id v8 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7, v15[0]);
            v15[1] = @"ConnectAttemptWatermark";
            v16[0] = v8;
            uint64_t v9 = +[NSNumber numberWithUnsignedChar:*((unsigned __int8 *)v4 + 56)];
            v16[1] = v9;
            uint64_t v10 = +[NSDictionary dictionaryWithObjects:v16 forKeys:v15 count:2];

            uint64_t v11 = sub_100050530();
            (*(void (**)(uint64_t, void *))(*(void *)v11 + 328))(v11, v10);
          }
        }
      }
      else if (*((unsigned char *)v4 + 55))
      {
        goto LABEL_8;
      }
      __int16 v12 = (void *)v4[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          __int16 v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)v4[2];
          BOOL v14 = *v13 == (void)v4;
          id v4 = v13;
        }
        while (!v14);
      }
      id v4 = v13;
    }
    while (v13 != v5);
  }
  sub_10004BA28((uint64_t)(a1 + 34), (char *)a1[35]);
  a1[35] = 0;
  a1[36] = 0;
  a1[34] = v5;
}

void sub_100305FB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100305FE4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  char v6 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    v16[0] = 67109378;
    v16[1] = a3;
    __int16 v17 = 2114;
    id v18 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Sending ancsAuthChanged to %d for device %{public}@", (uint8_t *)v16, 0x12u);
  }
  id v7 = *(void **)(a1 + 224);
  id v8 = (void *)(a1 + 232);
  if (v7 != (void *)(a1 + 232))
  {
    do
    {
      int v9 = (*(uint64_t (**)(void))(*(void *)v7[5] + 16))(v7[5]);
      uint64_t v10 = (id *)v7[5];
      if (v9)
      {
        if ((*((unsigned int (**)(void))*v10 + 2))(v7[5]) == 1) {
          sub_10042EDC0(v7[5], v5, a3);
        }
      }
      else
      {
        uint64_t v11 = [v10[31] objectForKeyedSubscript:v5];
        __int16 v12 = v11;
        if (v11 && [v11 ancsRequired]) {
          sub_10042EDC0((uint64_t)v10, v5, a3);
        }
      }
      uint64_t v13 = (void *)v7[1];
      if (v13)
      {
        do
        {
          BOOL v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          BOOL v14 = (void *)v7[2];
          BOOL v15 = *v14 == (void)v7;
          id v7 = v14;
        }
        while (!v15);
      }
      id v7 = v14;
    }
    while (v14 != v8);
  }
}

void sub_1003061A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1003061D4(void *result, long long *a2)
{
  id v2 = (void *)result[28];
  uint64_t v3 = result + 29;
  if (v2 != result + 29)
  {
    do
    {
      uint64_t result = *(void **)(v2[5] + 120);
      if (result)
      {
        long long v8 = *a2;
        uint64_t v9 = *((void *)a2 + 2);
        uint64_t result = (void *)(*(uint64_t (**)(void *, void, long long *))(*result + 72))(result, 0, &v8);
      }
      id v5 = (void *)v2[1];
      if (v5)
      {
        do
        {
          char v6 = v5;
          id v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          char v6 = (void *)v2[2];
          BOOL v7 = *v6 == (void)v2;
          id v2 = v6;
        }
        while (!v7);
      }
      id v2 = v6;
    }
    while (v6 != v3);
  }
  return result;
}

void *sub_100306294(uint64_t a1, long long *a2)
{
  return sub_1003061D4((void *)(a1 - 24), a2);
}

uint64_t sub_10030629C(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a1 + 224);
  if (v2 == (void *)(a1 + 232)) {
    return 0;
  }
  while (v2[5] != a2)
  {
    uint64_t v3 = (void *)v2[1];
    if (v3)
    {
      do
      {
        id v4 = v3;
        uint64_t v3 = (void *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        id v4 = (void *)v2[2];
        BOOL v5 = *v4 == (void)v2;
        id v2 = v4;
      }
      while (!v5);
    }
    id v2 = v4;
    if (v4 == (void *)(a1 + 232)) {
      return 0;
    }
  }
  return v2[4];
}

uint64_t sub_100306300(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 224);
  BOOL v5 = (void *)(a1 + 232);
  if (v4 == (void *)(a1 + 232))
  {
    unsigned __int16 v6 = 0;
  }
  else
  {
    unsigned __int16 v6 = 0;
    do
    {
      sub_10003AE4C(v4[4], (uint64_t)__p);
      if (v15 >= 0) {
        BOOL v7 = __p;
      }
      else {
        BOOL v7 = (void **)__p[0];
      }
      long long v8 = +[NSString stringWithUTF8String:v7];
      if (v15 < 0) {
        operator delete(__p[0]);
      }
      unsigned __int16 v9 = (unsigned __int16)[v8 containsString:v3];

      uint64_t v10 = (void *)v4[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (void *)v4[2];
          BOOL v12 = *v11 == (void)v4;
          id v4 = v11;
        }
        while (!v12);
      }
      v6 += v9;
      id v4 = v11;
    }
    while (v11 != v5);
  }

  return v6;
}

void sub_100306404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100306438(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEBUG)) {
    sub_100755E2C();
  }
  id v4 = *(void **)(a1 + 224);
  if (v4 != (void *)(a1 + 232))
  {
    do
    {
      uint64_t v5 = v4[5];
      if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5) == 1 && *(unsigned char *)(v5 + 264))
      {
        unsigned __int16 v6 = qword_100A19F00;
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
        {
          sub_10003AE4C(v4[4], (uint64_t)__p);
          BOOL v7 = v12 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)long long buf = 136446210;
          BOOL v14 = v7;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "AppManager::requestOfflineAdvertisingData notifying %{public}s", buf, 0xCu);
          if (v12 < 0) {
            operator delete(__p[0]);
          }
        }
        sub_10043F3C0((void *)v5, a2);
      }
      long long v8 = (void *)v4[1];
      if (v8)
      {
        do
        {
          unsigned __int16 v9 = v8;
          long long v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          unsigned __int16 v9 = (void *)v4[2];
          BOOL v10 = *v9 == (void)v4;
          id v4 = v9;
        }
        while (!v10);
      }
      id v4 = v9;
    }
    while (v9 != (void *)(a1 + 232));
  }
}

void sub_1003065F4(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 224);
  id v2 = (void *)(a1 + 232);
  if (v1 != (void *)(a1 + 232))
  {
    do
    {
      if (!(*(unsigned int (**)(void))(*(void *)v1[5] + 16))(v1[5])) {
        sub_10030669C(a1, v1[4]);
      }
      id v4 = (void *)v1[1];
      if (v4)
      {
        do
        {
          uint64_t v5 = v4;
          id v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v5 = (void *)v1[2];
          BOOL v6 = *v5 == (void)v1;
          uint64_t v1 = v5;
        }
        while (!v6);
      }
      uint64_t v1 = v5;
    }
    while (v5 != v2);
  }
}

void sub_10030669C(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    id v4 = *(void **)(a1 + 232);
    id v2 = (void *)(a1 + 232);
    id v3 = v4;
    if (v4)
    {
      BOOL v6 = v2;
      do
      {
        unint64_t v7 = v3[4];
        BOOL v8 = v7 >= a2;
        if (v7 >= a2) {
          unsigned __int16 v9 = v3;
        }
        else {
          unsigned __int16 v9 = v3 + 1;
        }
        if (v8) {
          BOOL v6 = v3;
        }
        id v3 = (void *)*v9;
      }
      while (*v9);
      if (v6 != v2 && v6[4] <= a2 && !(*(unsigned int (**)(void))(*(void *)v6[5] + 16))(v6[5]))
      {
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009A4EB8);
        }
        BOOL v10 = sub_1006B5F9C((uint64_t)off_1009F7ED8);
        if (sub_1004372D0(v6[5], v10) && os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEBUG))
        {
          sub_10003AE4C(a2, (uint64_t)v11);
          sub_100755EA0();
        }
      }
    }
  }
}

void sub_1003067EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100306808(uint64_t result)
{
  *(unsigned char *)(result + 180) = 1;
  return result;
}

uint64_t sub_100306814(uint64_t result)
{
  *(unsigned char *)(result + 92) = 1;
  return result;
}

id sub_100306820(uint64_t a1)
{
  *(unsigned char *)(a1 + 180) = 0;
  id result = [*(id *)(a1 + 320) removeAllObjects];
  id v3 = *(void **)(a1 + 224);
  id v4 = (void *)(a1 + 232);
  if (v3 != (void *)(a1 + 232))
  {
    do
    {
      uint64_t v5 = (id *)v3[5];
      id result = (id)(*((uint64_t (**)(id *))*v5 + 2))(v5);
      if (!result)
      {
        id result = v5[49];
        if (result)
        {
          id result = [result count];
          if (result)
          {
            long long v15 = 0u;
            long long v16 = 0u;
            long long v13 = 0u;
            long long v14 = 0u;
            id v9 = v5[49];
            id v10 = [v9 countByEnumeratingWithState:&v13 objects:v17 count:16];
            if (v10)
            {
              uint64_t v11 = *(void *)v14;
              do
              {
                for (uint64_t i = 0; i != v10; uint64_t i = (char *)i + 1)
                {
                  if (*(void *)v14 != v11) {
                    objc_enumerationMutation(v9);
                  }
                  sub_10043C4B8((uint64_t)v5, *(void **)(*((void *)&v13 + 1) + 8 * i), 0, 0);
                }
                id v10 = [v9 countByEnumeratingWithState:&v13 objects:v17 count:16];
              }
              while (v10);
            }

            id result = [v5[49] removeAllObjects];
          }
        }
      }
      BOOL v6 = (void *)v3[1];
      if (v6)
      {
        do
        {
          unint64_t v7 = v6;
          BOOL v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          unint64_t v7 = (void *)v3[2];
          BOOL v8 = *v7 == (void)v3;
          id v3 = v7;
        }
        while (!v8);
      }
      id v3 = v7;
    }
    while (v7 != v4);
  }
  return result;
}

void sub_1003069C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1003069E8(uint64_t a1)
{
  return sub_100306820(a1 - 88);
}

void sub_1003069F0(uint64_t a1, uint64_t a2)
{
  id v3 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138543362;
    uint64_t v5 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "GATT Device %{public}@ connected", (uint8_t *)&v4, 0xCu);
  }
}

void sub_100306A94(uint64_t a1, uint64_t a2)
{
}

void sub_100306A9C(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  BOOL v6 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    int v19 = 138543362;
    id v20 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "GATT Device %{public}@ disconnected", (uint8_t *)&v19, 0xCu);
  }
  unint64_t v7 = *(void **)(a1 + 224);
  if (v7 != (void *)(a1 + 232))
  {
    do
    {
      uint64_t v8 = v7[4];
      id v9 = (id *)v7[5];
      if (!(*((unsigned int (**)(id *))*v9 + 2))(v9))
      {
        id v10 = sub_1004379D4((uint64_t)v9, (uint64_t)v5);
        if (v10) {
          sub_1002FF088((uint64_t)v10, v8, (uint64_t)v9, v5, 0);
        }
        if (a3 == 1)
        {
          uint64_t v11 = [v9[31] objectForKeyedSubscript:v5];
          char v12 = v11;
          if (v11)
          {
            id v13 = [v11 enableAutoReconnect];
            sub_1002FC9CC((uint64_t)v13, v8, (uint64_t)v9, v5, 0, (uint64_t)v13);
          }
        }
      }
      long long v14 = (void *)v7[1];
      if (v14)
      {
        do
        {
          long long v15 = v14;
          long long v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          long long v15 = (void *)v7[2];
          BOOL v16 = *v15 == (void)v7;
          unint64_t v7 = v15;
        }
        while (!v16);
      }
      unint64_t v7 = v15;
    }
    while (v15 != (void *)(a1 + 232));
  }
  if (a3 == 1)
  {
    unsigned int v17 = [*(id *)(a1 + 328) containsObject:v5];
    id v18 = qword_100A19F00;
    if (v17)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
      {
        int v19 = 138543362;
        id v20 = v5;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Removing %{public}@ from classic gatt device tracking list", (uint8_t *)&v19, 0xCu);
      }
      [*(id *)(a1 + 328) removeObject:v5];
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_FAULT))
    {
      sub_100755F00();
    }
  }
}

void sub_100306CDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100306D0C(uint64_t a1, void *a2, int a3)
{
}

void sub_100306D14(uint64_t a1, void *a2, int a3, int a4)
{
  id v7 = a2;
  uint64_t v8 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138543874;
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&unsigned char buf[14] = a3;
    __int16 v25 = 1024;
    int v26 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "GATT Device %{public}@ ready isInitiator=%d mtu=%d", buf, 0x18u);
  }
  int v20 = 0;
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  sub_1000305AC(buf, v7);
  if (qword_1009FB240 != -1) {
    dispatch_once(&qword_1009FB240, &stru_1009A4EF8);
  }
  uint64_t v9 = qword_1009FB238;
  uuid_copy(dst, buf);
  if (sub_1004C06DC(v9, dst, &v20))
  {
    id v10 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t v21 = 138543362;
      id v22 = v7;
      _os_log_fault_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Failed to get GATT transport for device %{public}@, this is not good", v21, 0xCu);
      id v10 = qword_100A19F00;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_100755FA8();
    }
  }
  else
  {
    uint64_t v11 = *(void **)(a1 + 224);
    if (v11 != (void *)(a1 + 232))
    {
      do
      {
        uint64_t v12 = v11[4];
        uint64_t v13 = v11[5];
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v13 + 16))(v13) && sub_10043782C(v13, v7))
        {
          uint64_t v14 = (uint64_t)sub_1004379D4(v13, (uint64_t)v7);
          if ((v14 & 1) == 0) {
            sub_1002FF088(v14, v12, v13, v7, 1u);
          }
        }
        long long v15 = (void *)v11[1];
        if (v15)
        {
          do
          {
            BOOL v16 = v15;
            long long v15 = (void *)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            BOOL v16 = (void *)v11[2];
            BOOL v17 = *v16 == (void)v11;
            uint64_t v11 = v16;
          }
          while (!v17);
        }
        uint64_t v11 = v16;
      }
      while (v16 != (void *)(a1 + 232));
    }
    if (v20 == 1)
    {
      if (([*(id *)(a1 + 328) containsObject:v7] & 1) == 0)
      {
        id v18 = qword_100A19F00;
        if (v7)
        {
          if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)uint64_t v21 = 138543362;
            id v22 = v7;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Keeping track of classic device %{public}@", v21, 0xCu);
          }
          [*(id *)(a1 + 328) addObject:v7];
        }
        else if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
        {
          sub_100755F74();
        }
      }
    }
    else
    {
      int v19 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v21 = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Starting device disconnection watchdog", v21, 2u);
      }
      sub_1002FB650(a1, v7, 1u, 0, 0);
    }
    sub_1002FDA64(a1);
  }
}

void sub_100307064(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100307088(uint64_t a1, void *a2, int a3, int a4)
{
}

uint64_t sub_100307090(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009A4EB8);
  }
  int v3 = sub_1006BBC2C((uint64_t)off_1009F7ED8, v2);
  if (qword_1009F7ED0 != -1) {
    dispatch_once(&qword_1009F7ED0, &stru_1009A4E98);
  }
  BOOL v4 = sub_100008DC4(qword_1009F7EC8, v2);
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009A4EB8);
  }
  uint64_t v5 = sub_100030DCC((uint64_t)off_1009F7ED8, v2, 0);
  if (v5)
  {
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009A5118);
    }
    BOOL v6 = (unsigned __int8 *)sub_100030F10((uint64_t)off_1009F7EF8, v5, 0);
    if (v6) {
      LODWORD(v5) = sub_100040630(v6);
    }
    else {
      LODWORD(v5) = 0;
    }
  }
  id v7 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 138544130;
    id v10 = v2;
    __int16 v11 = 1024;
    int v12 = v5;
    __int16 v13 = 1024;
    BOOL v14 = v4;
    __int16 v15 = 1024;
    BOOL v16 = v3 != 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Device %{public}@ classicPaired %d, lePaired %d, discoveredViaLeScan %d", (uint8_t *)&v9, 0x1Eu);
  }

  return v5 & ((v3 == 0) & ~v4);
}

void sub_100307284(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1003072A8(uint64_t a1, unint64_t a2)
{
  BOOL v4 = *(void **)(a1 + 232);
  id v2 = (void *)(a1 + 232);
  int v3 = v4;
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v2;
  do
  {
    unint64_t v6 = v3[4];
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      uint64_t v8 = v3;
    }
    else {
      uint64_t v8 = v3 + 1;
    }
    if (v7) {
      uint64_t v5 = v3;
    }
    int v3 = (void *)*v8;
  }
  while (*v8);
  return v5 != v2 && v5[4] <= a2 && (uint64_t v9 = v5[5]) != 0 && *(unsigned char *)(v9 + 24) != 0;
}

BOOL sub_100307304(uint64_t a1, unint64_t a2)
{
  BOOL v4 = *(void **)(a1 + 232);
  id v2 = (void *)(a1 + 232);
  int v3 = v4;
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v2;
  do
  {
    unint64_t v6 = v3[4];
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      uint64_t v8 = v3;
    }
    else {
      uint64_t v8 = v3 + 1;
    }
    if (v7) {
      uint64_t v5 = v3;
    }
    int v3 = (void *)*v8;
  }
  while (*v8);
  return v5 != v2 && v5[4] <= a2 && (uint64_t v9 = v5[5]) != 0 && *(unsigned char *)(v9 + 24) && *(void *)(v9 + 96) != 0;
}

BOOL sub_100307368(uint64_t a1, unint64_t a2)
{
  BOOL v4 = *(void **)(a1 + 232);
  id v2 = (void *)(a1 + 232);
  int v3 = v4;
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v2;
  do
  {
    unint64_t v6 = v3[4];
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      uint64_t v8 = v3;
    }
    else {
      uint64_t v8 = v3 + 1;
    }
    if (v7) {
      uint64_t v5 = v3;
    }
    int v3 = (void *)*v8;
  }
  while (*v8);
  return v5 != v2 && v5[4] <= a2 && (uint64_t v9 = v5[5]) != 0 && *(void *)(v9 + 496) != 0;
}

BOOL sub_1003073C4(uint64_t a1, unint64_t a2)
{
  BOOL v4 = *(void **)(a1 + 232);
  id v2 = (void *)(a1 + 232);
  int v3 = v4;
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v2;
  do
  {
    unint64_t v6 = v3[4];
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      uint64_t v8 = v3;
    }
    else {
      uint64_t v8 = v3 + 1;
    }
    if (v7) {
      uint64_t v5 = v3;
    }
    int v3 = (void *)*v8;
  }
  while (*v8);
  return v5 != v2 && v5[4] <= a2 && (uint64_t v9 = v5[5]) != 0 && *(unsigned char *)(v9 + 505) != 0;
}

BOOL sub_100307420(uint64_t a1, unint64_t a2)
{
  BOOL v4 = *(void **)(a1 + 232);
  id v2 = (void *)(a1 + 232);
  int v3 = v4;
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v2;
  do
  {
    unint64_t v6 = v3[4];
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      uint64_t v8 = v3;
    }
    else {
      uint64_t v8 = v3 + 1;
    }
    if (v7) {
      uint64_t v5 = v3;
    }
    int v3 = (void *)*v8;
  }
  while (*v8);
  return v5 != v2 && v5[4] <= a2 && (uint64_t v9 = v5[5]) != 0 && *(unsigned char *)(v9 + 506) != 0;
}

uint64_t sub_10030747C(uint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  if (!a2) {
    goto LABEL_17;
  }
  uint64_t v8 = *(void **)(a1 + 232);
  BOOL v7 = (void *)(a1 + 232);
  unint64_t v6 = v8;
  if (v8)
  {
    uint64_t v9 = v7;
    do
    {
      unint64_t v10 = v6[4];
      BOOL v11 = v10 >= a2;
      if (v10 >= a2) {
        int v12 = v6;
      }
      else {
        int v12 = v6 + 1;
      }
      if (v11) {
        uint64_t v9 = v6;
      }
      unint64_t v6 = (void *)*v12;
    }
    while (*v12);
    if (v9 != v7 && v9[4] <= a2 && !(*(unsigned int (**)(void))(*(void *)v9[5] + 16))(v9[5]))
    {
      uint64_t v14 = v9[5];
      if (v14)
      {
        uint64_t v13 = sub_10043A9BC(v14, v5);
        goto LABEL_18;
      }
LABEL_17:
      uint64_t v13 = 1;
      goto LABEL_18;
    }
  }
  uint64_t v13 = 0;
LABEL_18:

  return v13;
}

void sub_100307548(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030755C(uint64_t a1@<X0>, unint64_t a2@<X1>, void **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  unint64_t v6 = *(void **)(a1 + 232);
  BOOL v4 = (void *)(a1 + 232);
  id v5 = v6;
  a3[2] = 0;
  if (v6)
  {
    BOOL v7 = v4;
    do
    {
      unint64_t v8 = v5[4];
      BOOL v9 = v8 >= a2;
      if (v8 >= a2) {
        unint64_t v10 = v5;
      }
      else {
        unint64_t v10 = v5 + 1;
      }
      if (v9) {
        BOOL v7 = v5;
      }
      id v5 = (void *)*v10;
    }
    while (*v10);
    if (v7 != v4 && v7[4] <= a2 && !(*(unsigned int (**)(void))(*(void *)v7[5] + 16))(v7[5]))
    {
      uint64_t v11 = v7[5];
      if (v11)
      {
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        obuint64_t j = *(id *)(v11 + 224);
        id v12 = [obj countByEnumeratingWithState:&v32 objects:v39 count:16];
        if (v12)
        {
          uint64_t v13 = *(void *)v33;
          do
          {
            for (uint64_t i = 0; i != v12; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v33 != v13) {
                objc_enumerationMutation(obj);
              }
              id v15 = [objc_alloc((Class)NSUUID) initWithUUIDString:*(void *)(*((void *)&v32 + 1) + 8 * i)];
              int8x16_t v38 = 0uLL;
              [v15 getUUIDBytes:&v38];
              sub_10071D1C4((uint64_t)&v36, &v38, 16);
              BOOL v17 = (char *)a3[1];
              BOOL v16 = (char *)a3[2];
              if (v17 >= v16)
              {
                unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * ((v17 - (unsigned char *)*a3) >> 2);
                unint64_t v21 = v20 + 1;
                if (v20 + 1 > 0xCCCCCCCCCCCCCCCLL) {
                  abort();
                }
                unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * ((v16 - (unsigned char *)*a3) >> 2);
                if (2 * v22 > v21) {
                  unint64_t v21 = 2 * v22;
                }
                if (v22 >= 0x666666666666666) {
                  unint64_t v23 = 0xCCCCCCCCCCCCCCCLL;
                }
                else {
                  unint64_t v23 = v21;
                }
                if (v23) {
                  uint64_t v24 = (char *)sub_10003767C((uint64_t)(a3 + 2), v23);
                }
                else {
                  uint64_t v24 = 0;
                }
                __int16 v25 = &v24[20 * v20];
                long long v26 = v36;
                *((_DWORD *)v25 + 4) = v37;
                *(_OWORD *)__int16 v25 = v26;
                uint64_t v28 = (char *)*a3;
                long long v27 = (char *)a3[1];
                uint64_t v29 = v25;
                if (v27 != *a3)
                {
                  do
                  {
                    long long v30 = *(_OWORD *)(v27 - 20);
                    *((_DWORD *)v29 - 1) = *((_DWORD *)v27 - 1);
                    *(_OWORD *)(v29 - 20) = v30;
                    v29 -= 20;
                    v27 -= 20;
                  }
                  while (v27 != v28);
                  long long v27 = (char *)*a3;
                }
                int v19 = v25 + 20;
                *a3 = v29;
                a3[1] = v25 + 20;
                a3[2] = &v24[20 * v23];
                if (v27) {
                  operator delete(v27);
                }
              }
              else
              {
                long long v18 = v36;
                *((_DWORD *)v17 + 4) = v37;
                *(_OWORD *)BOOL v17 = v18;
                int v19 = v17 + 20;
              }
              a3[1] = v19;
            }
            id v12 = [obj countByEnumeratingWithState:&v32 objects:v39 count:16];
          }
          while (v12);
        }
      }
    }
  }
}

void sub_100307818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  id v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

void sub_10030786C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v6 = (void *)(a1 + 232);
  id v5 = *(void **)(a1 + 232);
  if (!v5) {
    goto LABEL_12;
  }
  BOOL v7 = (void *)(a1 + 232);
  do
  {
    unint64_t v8 = v5[4];
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      uint64_t v10 = v5;
    }
    else {
      uint64_t v10 = v5 + 1;
    }
    if (v9) {
      BOOL v7 = v5;
    }
    id v5 = (void *)*v10;
  }
  while (*v10);
  if (v7 == v6 || v7[4] > a2) {
LABEL_12:
  }
    BOOL v7 = (void *)(a1 + 232);
  uint64_t v11 = +[NSMutableArray array];
  if (v7 != v6 && !(*(unsigned int (**)(void))(*(void *)v7[5] + 16))(v7[5]))
  {
    uint64_t v12 = v7[5];
    if (v12)
    {
      uint64_t v13 = *a3;
      uint64_t v14 = a3[1];
      if (*a3 != v14)
      {
        do
        {
          sub_1000417A8(v13, __p);
          if (v25 >= 0) {
            id v15 = __p;
          }
          else {
            id v15 = *(unsigned char **)__p;
          }
          BOOL v16 = +[NSString stringWithUTF8String:v15];
          [v11 addObject:v16];

          if (SHIBYTE(v25) < 0) {
            operator delete(*(void **)__p);
          }
          v13 += 20;
        }
        while (v13 != v14);
      }
      objc_storeStrong((id *)(v12 + 224), v11);
    }
  }
  BOOL v17 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    sub_10003AE4C(a2, (uint64_t)v20);
    if (v21 >= 0) {
      long long v18 = v20;
    }
    else {
      long long v18 = (void **)v20[0];
    }
    unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 2);
    *(_DWORD *)std::string __p = 136315650;
    *(void *)&__p[4] = v18;
    __int16 v23 = 2048;
    unint64_t v24 = v19;
    __int16 v25 = 2112;
    long long v26 = v11;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Limiting session %s services (%lu) %@", __p, 0x20u);
    if (v21 < 0) {
      operator delete(v20[0]);
    }
  }
}

void sub_100307AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

void sub_100307AEC(uint64_t a1, unint64_t a2, unsigned __int16 **a3)
{
  unint64_t v6 = (void *)(a1 + 232);
  id v5 = *(void **)(a1 + 232);
  if (!v5) {
    goto LABEL_12;
  }
  BOOL v7 = (void *)(a1 + 232);
  do
  {
    unint64_t v8 = v5[4];
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      uint64_t v10 = v5;
    }
    else {
      uint64_t v10 = v5 + 1;
    }
    if (v9) {
      BOOL v7 = v5;
    }
    id v5 = (void *)*v10;
  }
  while (*v10);
  if (v7 == v6 || v7[4] > a2) {
LABEL_12:
  }
    BOOL v7 = (void *)(a1 + 232);
  uint64_t v11 = +[NSMutableArray array];
  if (v7 != v6 && !(*(unsigned int (**)(void))(*(void *)v7[5] + 16))(v7[5]))
  {
    uint64_t v12 = v7[5];
    if (v12)
    {
      uint64_t v13 = *a3;
      uint64_t v14 = a3[1];
      if (*a3 != v14)
      {
        do
        {
          id v15 = +[NSNumber numberWithUnsignedShort:*v13];
          [v11 addObject:v15];

          ++v13;
        }
        while (v13 != v14);
      }
      objc_storeStrong((id *)(v12 + 232), v11);
    }
  }
  BOOL v16 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    sub_10003AE4C(a2, (uint64_t)__p);
    if (v20 >= 0) {
      BOOL v17 = __p;
    }
    else {
      BOOL v17 = (void **)__p[0];
    }
    uint64_t v18 = a3[1] - *a3;
    *(_DWORD *)long long buf = 136315650;
    unint64_t v22 = v17;
    __int16 v23 = 2048;
    uint64_t v24 = v18;
    __int16 v25 = 2112;
    long long v26 = v11;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Limiting session %s manufacturer IDs (%lu) %@", buf, 0x20u);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_100307CE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100307D10(uint64_t a1, unint64_t a2, uint64_t **a3)
{
  BOOL v7 = *(void **)(a1 + 232);
  id v5 = (void *)(a1 + 232);
  unint64_t v6 = v7;
  if (!v7) {
    goto LABEL_12;
  }
  unint64_t v8 = v5;
  do
  {
    unint64_t v9 = v6[4];
    BOOL v10 = v9 >= a2;
    if (v9 >= a2) {
      uint64_t v11 = v6;
    }
    else {
      uint64_t v11 = v6 + 1;
    }
    if (v10) {
      unint64_t v8 = v6;
    }
    unint64_t v6 = (void *)*v11;
  }
  while (*v11);
  if (v8 != v5 && v8[4] <= a2)
  {
    uint64_t v12 = objc_opt_new();
    if (!(*(unsigned int (**)(void))(*(void *)v8[5] + 16))(v8[5]))
    {
      uint64_t v16 = v8[5];
      if (v16)
      {
        BOOL v17 = *a3;
        uint64_t v18 = a3[1];
        if (*a3 != v18)
        {
          do
          {
            unint64_t v19 = v17;
            if (*((char *)v17 + 23) < 0) {
              unint64_t v19 = (uint64_t *)*v17;
            }
            char v20 = +[NSString stringWithUTF8String:v19];
            [v12 addObject:v20];

            v17 += 3;
          }
          while (v17 != v18);
        }
        objc_storeStrong((id *)(v16 + 240), v12);
      }
    }
  }
  else
  {
LABEL_12:
    uint64_t v12 = objc_opt_new();
  }
  uint64_t v13 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    sub_10003AE4C(a2, (uint64_t)__p);
    if (v22 >= 0) {
      uint64_t v14 = __p;
    }
    else {
      uint64_t v14 = (void **)__p[0];
    }
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3);
    *(_DWORD *)long long buf = 136315650;
    uint64_t v24 = v14;
    __int16 v25 = 2048;
    unint64_t v26 = v15;
    __int16 v27 = 2112;
    uint64_t v28 = v12;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Limiting session %s scan name substrings (%lu) %@", buf, 0x20u);
    if (v22 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_100307F20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100307F4C(uint64_t a1, void *a2, void *a3, long long **a4, uint64_t a5, long long **a6)
{
  id v11 = a2;
  id v12 = a3;
  uint64_t v13 = sub_100019878();
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3321888768;
  _DWORD v16[2] = sub_100308138;
  v16[3] = &unk_1009A4D68;
  uint64_t v19 = a1;
  id v14 = v11;
  id v17 = v14;
  char v20 = 0;
  char v21 = 0;
  uint64_t v22 = 0;
  sub_100037564((char *)&v20, *a4, a4[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)a4[1] - (char *)*a4) >> 2));
  sub_10030BE04(__p, a5);
  memset(v24, 0, sizeof(v24));
  sub_1002B3390((char *)v24, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  id v15 = v12;
  id v18 = v15;
  sub_100013018(v13, v16);

  __int16 v25 = (void **)v24;
  sub_100051568(&v25);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v20)
  {
    char v21 = v20;
    operator delete(v20);
  }
}

void sub_1003080C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  *(void *)(v24 - 72) = v23;
  sub_100051568((void ***)(v24 - 72));
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }

  _Unwind_Resume(a1);
}

void sub_100308138(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  id v2 = *(void **)(v1 + 224);
  int v3 = (void *)(v1 + 232);
  if (v2 != (void *)(v1 + 232))
  {
    uint64_t v23 = (void *)(v1 + 232);
    do
    {
      id v5 = (id *)v2[5];
      if (objc_msgSend(v5[11], "isEqualToString:", *(void *)(a1 + 32), v23)
        && !(*((unsigned int (**)(id *))*v5 + 2))(v5)
        && sub_1000536B4((uint64_t)v5))
      {
        unint64_t v6 = +[NSMutableArray array];
        uint64_t v7 = *(void *)(a1 + 56);
        uint64_t v8 = *(void *)(a1 + 64);
        while (v7 != v8)
        {
          sub_1000417A8(v7, __p);
          if (v25 >= 0) {
            unint64_t v9 = __p;
          }
          else {
            unint64_t v9 = (void **)__p[0];
          }
          BOOL v10 = +[NSString stringWithUTF8String:v9];
          [v6 addObject:v10];

          if (v25 < 0) {
            operator delete(__p[0]);
          }
          v7 += 20;
        }
        id v11 = +[NSMutableArray arrayWithCapacity:(uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 1];
        id v12 = *(unsigned __int16 **)(a1 + 80);
        uint64_t v13 = *(unsigned __int16 **)(a1 + 88);
        while (v12 != v13)
        {
          id v14 = +[NSNumber numberWithUnsignedShort:*v12];
          [v11 addObject:v14];

          ++v12;
        }
        id v15 = +[NSMutableArray arrayWithCapacity:0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 3)];
        id v17 = *(uint64_t **)(a1 + 104);
        uint64_t v16 = *(uint64_t **)(a1 + 112);
        while (v17 != v16)
        {
          id v18 = v17;
          if (*((char *)v17 + 23) < 0) {
            id v18 = (uint64_t *)*v17;
          }
          uint64_t v19 = +[NSString stringWithUTF8String:v18];
          [v15 addObject:v19];

          v17 += 3;
        }
        sub_10043A520((uint64_t)v5, 1, *(void **)(a1 + 40), v6, v11, v15);

        int v3 = v23;
      }
      char v20 = (void *)v2[1];
      if (v20)
      {
        do
        {
          char v21 = v20;
          char v20 = (void *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          char v21 = (void *)v2[2];
          BOOL v22 = *v21 == (void)v2;
          id v2 = v21;
        }
        while (!v22);
      }
      id v2 = v21;
    }
    while (v21 != v3);
  }
}

void sub_100308398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

char *sub_100308400(uint64_t a1, long long **a2)
{
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  uint64_t v4 = a1 + 56;
  *(void *)(a1 + 72) = 0;
  sub_100037564((char *)(a1 + 56), a2[7], a2[8], 0xCCCCCCCCCCCCCCCDLL * (((char *)a2[8] - (char *)a2[7]) >> 2));
  sub_10030BE04((void *)(v4 + 24), (uint64_t)(a2 + 10));
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  return sub_1002B3390((char *)(a1 + 104), a2[13], a2[14], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[14] - (char *)a2[13]) >> 3));
}

void sub_100308494(_Unwind_Exception *exception_object)
{
  id v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 88) = v5;
    operator delete(v5);
  }
  unint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 64) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003084C8(uint64_t a1)
{
  uint64_t v4 = (void **)(a1 + 104);
  sub_100051568(&v4);
  id v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }
  int v3 = *(void **)(a1 + 56);
  if (v3)
  {
    *(void *)(a1 + 64) = v3;
    operator delete(v3);
  }
}

void sub_100308520(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_100019878();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_1003085EC;
  v6[3] = &unk_100998A38;
  uint64_t v8 = a1;
  id v5 = v3;
  id v7 = v5;
  sub_100013018(v4, v6);
}

void sub_1003085CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1003085EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = *(void **)(v1 + 224);
  id v3 = (void *)(v1 + 232);
  if (v2 != (void *)(v1 + 232))
  {
    do
    {
      id v5 = (id *)v2[5];
      if ([v5[11] isEqualToString:*(void *)(a1 + 32)]
        && !(*((unsigned int (**)(id *))*v5 + 2))(v5)
        && sub_1000536B4((uint64_t)v5))
      {
        sub_10043A520((uint64_t)v5, 0, 0, 0, 0, 0);
      }
      unint64_t v6 = (void *)v2[1];
      if (v6)
      {
        do
        {
          id v7 = v6;
          unint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          id v7 = (void *)v2[2];
          BOOL v8 = *v7 == (void)v2;
          id v2 = v7;
        }
        while (!v8);
      }
      id v2 = v7;
    }
    while (v7 != v3);
  }
}

void sub_1003086C8(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSDateFormatter);
  [v2 setDateFormat:@"yyyy-MM-dd H:mm:ss"];
  id v3 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    *(void *)char v25 = CFAbsoluteTimeGetCurrent();
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump:         fScreenOffWakeHistoryMap: %f", buf, 0xCu);
  }
  uint64_t v4 = *(void **)(a1 + 400);
  char v20 = (void *)(a1 + 408);
  if (v4 != (void *)(a1 + 408))
  {
    do
    {
      id v5 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v6 = v4 + 4;
        if (*((char *)v4 + 55) < 0) {
          unint64_t v6 = (void *)*v6;
        }
        *(_DWORD *)long long buf = 136446210;
        *(void *)char v25 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump:         %{public}s:", buf, 0xCu);
      }
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      sub_10030CFC8(&v21, (uint64_t)(v4 + 7));
      for (uint64_t i = v22; (uint64_t *)i != &v21; uint64_t i = *(void *)(i + 8))
      {
        double v8 = *(double *)(i + 16);
        unint64_t v9 = +[NSDate dateWithTimeIntervalSinceReferenceDate:v8];
        BOOL v10 = [v2 stringFromDate:v9];
        LODWORD(v11) = llround((v8 - floor(v8)) * 1000.0);
        id v12 = +[NSString stringWithFormat:@"%@.%000d", v10, v11];
        uint64_t v13 = qword_100A19F00;
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
        {
          int v14 = *(unsigned __int8 *)(i + 24);
          id v15 = [v12 UTF8String];
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          *(_DWORD *)long long buf = 67109890;
          *(_DWORD *)char v25 = v14;
          *(_WORD *)&v25[4] = 2082;
          *(void *)&v25[6] = v15;
          __int16 v26 = 2048;
          double v27 = v8;
          __int16 v28 = 2048;
          double v29 = Current - v8;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "statedump:       reason %d time:%{public}s %.3f secs(%-12.2f secs ago)", buf, 0x26u);
        }
      }
      sub_1002B308C(&v21);
      id v17 = (void *)v4[1];
      if (v17)
      {
        do
        {
          id v18 = v17;
          id v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          id v18 = (void *)v4[2];
          BOOL v19 = *v18 == (void)v4;
          uint64_t v4 = v18;
        }
        while (!v19);
      }
      uint64_t v4 = v18;
    }
    while (v18 != v20);
  }
}

void sub_1003089B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100308A04(uint64_t a1, unint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 140) - 1;
  if (v2 < 5 && ((0x17u >> v2) & 1) != 0) {
    return 1;
  }
  id v5 = *(void **)(a1 + 232);
  id v3 = (void *)(a1 + 232);
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  unint64_t v6 = v3;
  do
  {
    unint64_t v7 = v4[4];
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      unint64_t v9 = v4;
    }
    else {
      unint64_t v9 = v4 + 1;
    }
    if (v8) {
      unint64_t v6 = v4;
    }
    uint64_t v4 = (void *)*v9;
  }
  while (*v9);
  if (v6 == v3 || v6[4] > a2) {
    return 0;
  }
  uint64_t v11 = [*(id *)(v6[5] + 88) lowercaseString];
  id v10 = [v11 hasPrefix:@"com.apple."];

  return (uint64_t)v10;
}

void sub_100308AB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100308AC4(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9 = a3;
  uint64_t v10 = sub_1000066B0(a1, a2, 0);
  if (v10) {
    uint64_t v11 = sub_10043C420(v10, a2, v9, a4, a5);
  }
  else {
    uint64_t v11 = 12;
  }

  return v11;
}

void sub_100308B44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100308B54(uint64_t a1, unint64_t a2, void *a3, int a4, void *a5)
{
  id v9 = a3;
  id v10 = a5;
  uint64_t v11 = sub_1000066B0(a1, a2, 2u);
  if (v11)
  {
    id v12 = *(void **)(a1 + 224);
    uint64_t v13 = (void *)(a1 + 232);
    if (v12 == (void *)(a1 + 232))
    {
LABEL_13:
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v11 + 16))(v11))
      {
        uint64_t v19 = sub_10043C4B8(v11, v9, a4, v10);
        goto LABEL_20;
      }
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
        sub_100756044();
      }
    }
    else
    {
      while (1)
      {
        if (v12[4] != a2)
        {
          int v14 = (void *)v12[5];
          if (!(*(unsigned int (**)(void *))(*v14 + 16))(v14))
          {
            id v15 = (void *)v14[49];
            if (v15)
            {
              if ([v15 containsObject:v9]) {
                break;
              }
            }
          }
        }
        uint64_t v16 = (void *)v12[1];
        if (v16)
        {
          do
          {
            id v17 = v16;
            uint64_t v16 = (void *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            id v17 = (void *)v12[2];
            BOOL v18 = *v17 == (void)v12;
            id v12 = v17;
          }
          while (!v18);
        }
        id v12 = v17;
        if (v17 == v13) {
          goto LABEL_13;
        }
      }
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
        sub_100756078();
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
  {
    sub_100756010();
  }
  uint64_t v19 = 3;
LABEL_20:

  return v19;
}

void sub_100308D28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100308D4C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_100019878();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_100308E18;
  v6[3] = &unk_100998A38;
  uint64_t v8 = a1;
  id v5 = v3;
  id v7 = v5;
  sub_100013018(v4, v6);
}

void sub_100308DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_100308E18(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v12 = 138412290;
    uint64_t v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "FastLEConnection:AppManager::fastLeConnectionDisabledForDevice device %@", (uint8_t *)&v12, 0xCu);
  }
  id v5 = *(void **)(v2 + 224);
  unint64_t v6 = (void *)(v2 + 232);
  if (v5 != v6)
  {
    do
    {
      id v7 = (id *)v5[5];
      if (!(*((unsigned int (**)(id *))*v7 + 2))(v7))
      {
        id v11 = v7[49];
        if (v11)
        {
          if ([v11 count]) {
            [v7[49] removeObject:*(void *)(a1 + 32)];
          }
        }
      }
      uint64_t v8 = (void *)v5[1];
      if (v8)
      {
        do
        {
          id v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          id v9 = (void *)v5[2];
          BOOL v10 = *v9 == (void)v5;
          id v5 = v9;
        }
        while (!v10);
      }
      id v5 = v9;
    }
    while (v9 != v6);
  }
}

void sub_100308F68(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_100019878();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_100309034;
  v6[3] = &unk_100998A38;
  uint64_t v8 = a1;
  id v5 = v3;
  id v7 = v5;
  sub_100013018(v4, v6);
}

void sub_100309014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_100309034(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v11 = 138543362;
    uint64_t v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Device %{public}@ evicted", (uint8_t *)&v11, 0xCu);
  }
  id v5 = *(void **)(v2 + 224);
  unint64_t v6 = (void *)(v2 + 232);
  if (v5 != v6)
  {
    do
    {
      id v7 = (void *)v5[5];
      if (!(*(unsigned int (**)(void *))(*v7 + 16))(v7)) {
        sub_10043C8E4(v7, *(void **)(a1 + 32));
      }
      uint64_t v8 = (void *)v5[1];
      if (v8)
      {
        do
        {
          id v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          id v9 = (void *)v5[2];
          BOOL v10 = *v9 == (void)v5;
          id v5 = v9;
        }
        while (!v10);
      }
      id v5 = v9;
    }
    while (v9 != v6);
  }
}

void sub_10030916C(uint64_t a1, void *a2)
{
}

void sub_100309174(uint64_t a1)
{
  uint64_t v1 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "statedump: ---------------- Application Manager ----------------", buf, 2u);
    uint64_t v1 = qword_100A19F00;
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 176)) {
      uint64_t v2 = "running";
    }
    else {
      uint64_t v2 = "stopped";
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v2;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "statedump: Cleanup Timer: %{public}s", buf, 0xCu);
    uint64_t v1 = qword_100A19F00;
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "statedump: Known Classic GATT peripheral UUID's:", buf, 2u);
  }
  long long v221 = 0u;
  long long v222 = 0u;
  long long v219 = 0u;
  long long v220 = 0u;
  obuint64_t j = *(id *)(a1 + 328);
  id v3 = [obj countByEnumeratingWithState:&v219 objects:v250 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v220;
    do
    {
      for (uint64_t i = 0; i != v3; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v220 != v4) {
          objc_enumerationMutation(obj);
        }
        unint64_t v6 = qword_100A19F00;
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v7 = *(void *)(*((void *)&v219 + 1) + 8 * i);
          *(_DWORD *)long long buf = 138543362;
          *(void *)&uint8_t buf[4] = v7;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "statedump: \t%{public}@", buf, 0xCu);
        }
      }
      id v3 = [obj countByEnumeratingWithState:&v219 objects:v250 count:16];
    }
    while (v3);
  }

  uint64_t v8 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "statedump: CBCentralSessions interested in devices:", buf, 2u);
  }
  BOOL v10 = *(void **)(a1 + 224);
  v158 = (void *)(a1 + 232);
  if (v10 != (void *)(a1 + 232))
  {
    *(void *)&long long v9 = 136446210;
    long long v155 = v9;
    do
    {
      uint64_t v12 = v10[4];
      int v11 = (id *)v10[5];
      v157 = v10;
      if (!(*((unsigned int (**)(id *))*v11 + 2))(v11))
      {
        id v17 = qword_100A19F00;
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
        {
          sub_10003AE4C(v12, (uint64_t)buf);
          BOOL v18 = buf;
          if (SBYTE1(v234) < 0) {
            BOOL v18 = *(unsigned char **)buf;
          }
          *(_DWORD *)v248 = v155;
          v249 = v18;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "statedump: \t\"%{public}s\":", v248, 0xCu);
          if (SBYTE1(v234) < 0) {
            operator delete(*(void **)buf);
          }
          id v17 = qword_100A19F00;
        }
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "statedump:         deviceConnections:", buf, 2u);
        }
        if (objc_msgSend(v11[31], "count", v155))
        {
          long long v217 = 0u;
          long long v218 = 0u;
          long long v215 = 0u;
          long long v216 = 0u;
          id obja = v11[31];
          id v19 = [obja countByEnumeratingWithState:&v215 objects:v247 count:16];
          if (v19)
          {
            uint64_t v20 = *(void *)v216;
            uint64_t v159 = *(void *)v216;
            v160 = v11;
            do
            {
              uint64_t v21 = 0;
              id v161 = v19;
              do
              {
                if (*(void *)v216 != v20) {
                  objc_enumerationMutation(obja);
                }
                id v166 = *(id *)(*((void *)&v215 + 1) + 8 * (void)v21);
                uint64_t v22 = [v11[31] objectForKeyedSubscript:];
                uint64_t v23 = qword_100A19F00;
                if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)long long buf = 138543362;
                  *(void *)&uint8_t buf[4] = v166;
                  _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "statedump: \t\t         Peripheral:\"%{public}@\"", buf, 0xCu);
                  uint64_t v23 = qword_100A19F00;
                }
                if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
                {
                  if ([v22 connectionAlerts]) {
                    int v24 = 89;
                  }
                  else {
                    int v24 = 78;
                  }
                  int v165 = v24;
                  if ([v22 disconnectionAlerts]) {
                    int v25 = 89;
                  }
                  else {
                    int v25 = 78;
                  }
                  int v164 = v25;
                  if ([v22 notificationAlerts]) {
                    int v26 = 89;
                  }
                  else {
                    int v26 = 78;
                  }
                  int v163 = v26;
                  id v162 = [v22 delay];
                  if ([v22 wantsObjectDiscoveryData]) {
                    int v27 = 89;
                  }
                  else {
                    int v27 = 78;
                  }
                  if ([v22 enableTransportBridging]) {
                    int v28 = 89;
                  }
                  else {
                    int v28 = 78;
                  }
                  if ([v22 disableLeGATT]) {
                    int v29 = 89;
                  }
                  else {
                    int v29 = 78;
                  }
                  if ([v22 ancsRequired]) {
                    int v30 = 89;
                  }
                  else {
                    int v30 = 78;
                  }
                  unsigned int v31 = [v22 hideFromBTSettings];
                  unsigned int v32 = [v22 enableAutoReconnect];
                  *(_DWORD *)long long buf = 67111424;
                  if (v31) {
                    int v33 = 89;
                  }
                  else {
                    int v33 = 78;
                  }
                  *(_DWORD *)&uint8_t buf[4] = v165;
                  if (v32) {
                    int v34 = 89;
                  }
                  else {
                    int v34 = 78;
                  }
                  *(_WORD *)&uint8_t buf[8] = 1024;
                  *(_DWORD *)&buf[10] = v164;
                  LOWORD(v233) = 1024;
                  *(_DWORD *)((char *)&v233 + 2) = v163;
                  HIWORD(v233) = 2048;
                  id v234 = v162;
                  __int16 v235 = 1024;
                  int v236 = v27;
                  __int16 v237 = 1024;
                  int v238 = v28;
                  __int16 v239 = 1024;
                  int v240 = v29;
                  __int16 v241 = 1024;
                  int v242 = v30;
                  __int16 v243 = 1024;
                  int v244 = v33;
                  __int16 v245 = 1024;
                  int v246 = v34;
                  _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "statedump: \t\t         \toptions: connectAlrts:%c disconAlrts:%c notifAlrts:%c delay:%lu ObjDisc:%c TrsprtBrdge:%c noLeGATT:%c ANCS:%c hide:%c autoReconn:%c", buf, 0x42u);
                  uint64_t v20 = v159;
                  int v11 = v160;
                  id v19 = v161;
                }

                uint64_t v21 = (char *)v21 + 1;
              }
              while (v19 != v21);
              id v19 = [obja countByEnumeratingWithState:&v215 objects:v247 count:16];
            }
            while (v19);
          }
        }
        long long v35 = qword_100A19F00;
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "statedump:         pending deviceConnections:", buf, 2u);
        }
        if ([v11[32] count])
        {
          long long v213 = 0u;
          long long v214 = 0u;
          long long v211 = 0u;
          long long v212 = 0u;
          id objb = v11[32];
          id v36 = [objb countByEnumeratingWithState:&v211 objects:v231 count:16];
          if (v36)
          {
            uint64_t v37 = *(void *)v212;
            do
            {
              for (uint64_t j = 0; j != v36; uint64_t j = (char *)j + 1)
              {
                if (*(void *)v212 != v37) {
                  objc_enumerationMutation(objb);
                }
                id v39 = *(id *)(*((void *)&v211 + 1) + 8 * (void)j);
                long long v40 = qword_100A19F00;
                if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)long long buf = 138543362;
                  *(void *)&uint8_t buf[4] = v39;
                  _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "statedump: \t\t         Peripheral:\"%{public}@\"", buf, 0xCu);
                }
              }
              id v36 = [objb countByEnumeratingWithState:&v211 objects:v231 count:16];
            }
            while (v36);
          }
        }
        (*((void (**)(id *))*v11 + 15))(v11);
        id v41 = v11[49];
        if (v41 && [v41 count])
        {
          uint64_t v42 = qword_100A19F00;
          if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "statedump:         Fast LE Connection Devices:", buf, 2u);
          }
          long long v209 = 0u;
          long long v210 = 0u;
          long long v207 = 0u;
          long long v208 = 0u;
          id objc = v11[49];
          id v43 = [objc countByEnumeratingWithState:&v207 objects:v230 count:16];
          if (v43)
          {
            uint64_t v44 = *(void *)v208;
            do
            {
              for (k = 0; k != v43; k = (char *)k + 1)
              {
                if (*(void *)v208 != v44) {
                  objc_enumerationMutation(objc);
                }
                id v46 = *(id *)(*((void *)&v207 + 1) + 8 * (void)k);
                long long v47 = qword_100A19F00;
                if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)long long buf = 138543362;
                  *(void *)&uint8_t buf[4] = v46;
                  _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "statedump: \t\t         Peripheral:\"%{public}@\"", buf, 0xCu);
                }
              }
              id v43 = [objc countByEnumeratingWithState:&v207 objects:v230 count:16];
            }
            while (v43);
          }
        }
      }
      uint64_t v13 = v157;
      int v14 = (void *)v157[1];
      if (v14)
      {
        do
        {
          id v15 = v14;
          int v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          id v15 = (void *)v13[2];
          BOOL v16 = *v15 == (void)v13;
          uint64_t v13 = v15;
        }
        while (!v16);
      }
      BOOL v10 = v15;
    }
    while (v15 != v158);
  }
  uint64_t v48 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "statedump: CBPeripheralSession interested in devices:", buf, 2u);
  }
  long long v49 = *(void **)(a1 + 224);
  if (v49 != v158)
  {
    do
    {
      uint64_t v51 = v49[4];
      long long v50 = (id *)v49[5];
      if ((*((unsigned int (**)(id *))*v50 + 2))(v50) == 1)
      {
        long long v52 = qword_100A19F00;
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
        {
          sub_10003AE4C(v51, (uint64_t)buf);
          __int16 v53 = buf;
          if (SBYTE1(v234) < 0) {
            __int16 v53 = *(unsigned char **)buf;
          }
          *(_DWORD *)v248 = 136446210;
          v249 = v53;
          _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "statedump: \t\"%{public}s\":", v248, 0xCu);
          if (SBYTE1(v234) < 0) {
            operator delete(*(void **)buf);
          }
          long long v52 = qword_100A19F00;
        }
        if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "statedump:         devices Read/Write GATT:", buf, 2u);
        }
        id v54 = v50[32];
        BOOL v55 = [v54 count] == 0;

        if (!v55)
        {
          long long v205 = 0u;
          long long v206 = 0u;
          long long v203 = 0u;
          long long v204 = 0u;
          id objd = v50[32];
          id v56 = [objd countByEnumeratingWithState:&v203 objects:v229 count:16];
          if (v56)
          {
            uint64_t v57 = *(void *)v204;
            do
            {
              for (m = 0; m != v56; m = (char *)m + 1)
              {
                if (*(void *)v204 != v57) {
                  objc_enumerationMutation(objd);
                }
                id v59 = *(id *)(*((void *)&v203 + 1) + 8 * (void)m);
                long long v60 = qword_100A19F00;
                if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)long long buf = 138543362;
                  *(void *)&uint8_t buf[4] = v59;
                  _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "statedump: \t\t         Peripheral:\"%{public}@\"", buf, 0xCu);
                }
              }
              id v56 = [objd countByEnumeratingWithState:&v203 objects:v229 count:16];
            }
            while (v56);
          }
        }
      }
      long long v61 = (void *)v49[1];
      if (v61)
      {
        do
        {
          long long v62 = v61;
          long long v61 = (void *)*v61;
        }
        while (v61);
      }
      else
      {
        do
        {
          long long v62 = (void *)v49[2];
          BOOL v16 = *v62 == (void)v49;
          long long v49 = v62;
        }
        while (!v16);
      }
      long long v49 = v62;
    }
    while (v62 != v158);
  }
  long long v63 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "statedump: Registered Connecton Events:", buf, 2u);
  }
  long long v64 = *(void **)(a1 + 224);
  if (v64 != v158)
  {
    do
    {
      uint64_t v66 = v64[4];
      uint64_t v65 = v64[5];
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v65 + 16))(v65)
        && (*(void *)(v65 + 288) || [*(id *)(v65 + 264) count]))
      {
        uint64_t v69 = qword_100A19F00;
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
        {
          sub_10003AE4C(v66, (uint64_t)buf);
          id v70 = SBYTE1(v234) >= 0 ? buf : *(unsigned char **)buf;
          *(_DWORD *)v248 = 136446210;
          v249 = v70;
          _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "statedump: \t\"%{public}s\":", v248, 0xCu);
          if (SBYTE1(v234) < 0) {
            operator delete(*(void **)buf);
          }
        }
        if (*(unsigned char *)(v65 + 305))
        {
          uint64_t v71 = qword_100A19F00;
          if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "statedump: \t\tAll Devices", buf, 2u);
          }
        }
        else
        {
          uint64_t v72 = *(void **)(v65 + 272);
          if (v72 != (void *)(v65 + 280))
          {
            do
            {
              uint64_t v73 = qword_100A19F00;
              if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
              {
                sub_1000417A8((uint64_t)(v72 + 4), buf);
                char v74 = SBYTE1(v234) >= 0 ? buf : *(unsigned char **)buf;
                *(_DWORD *)v248 = 136446210;
                v249 = v74;
                _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "statedump: \t\tGATT Service:\"%{public}s\"", v248, 0xCu);
                if (SBYTE1(v234) < 0) {
                  operator delete(*(void **)buf);
                }
              }
              int v75 = (void *)v72[1];
              if (v75)
              {
                do
                {
                  long long v76 = v75;
                  int v75 = (void *)*v75;
                }
                while (v75);
              }
              else
              {
                do
                {
                  long long v76 = (void *)v72[2];
                  BOOL v16 = *v76 == (void)v72;
                  uint64_t v72 = v76;
                }
                while (!v16);
              }
              uint64_t v72 = v76;
            }
            while (v76 != (void *)(v65 + 280));
          }
          long long v201 = 0u;
          long long v202 = 0u;
          long long v199 = 0u;
          long long v200 = 0u;
          id obje = *(id *)(v65 + 264);
          id v77 = [obje countByEnumeratingWithState:&v199 objects:v228 count:16];
          if (v77)
          {
            uint64_t v78 = *(void *)v200;
            do
            {
              for (n = 0; n != v77; n = (char *)n + 1)
              {
                if (*(void *)v200 != v78) {
                  objc_enumerationMutation(obje);
                }
                std::string v80 = qword_100A19F00;
                if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v81 = *(void *)(*((void *)&v199 + 1) + 8 * (void)n);
                  *(_DWORD *)long long buf = 138543362;
                  *(void *)&uint8_t buf[4] = v81;
                  _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEFAULT, "statedump: \t\tPeripheral:\"%{public}@\"", buf, 0xCu);
                }
              }
              id v77 = [obje countByEnumeratingWithState:&v199 objects:v228 count:16];
            }
            while (v77);
          }
        }
      }
      long long v67 = (void *)v64[1];
      if (v67)
      {
        do
        {
          long long v68 = v67;
          long long v67 = (void *)*v67;
        }
        while (v67);
      }
      else
      {
        do
        {
          long long v68 = (void *)v64[2];
          BOOL v16 = *v68 == (void)v64;
          long long v64 = v68;
        }
        while (!v16);
      }
      long long v64 = v68;
    }
    while (v68 != v158);
  }
  char v82 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEFAULT, "statedump: Apps allowed to use bluetooth:", buf, 2u);
  }
  long long v197 = 0u;
  long long v198 = 0u;
  long long v195 = 0u;
  long long v196 = 0u;
  id objf = *(id *)(a1 + 336);
  id v83 = [objf countByEnumeratingWithState:&v195 objects:v227 count:16];
  if (v83)
  {
    uint64_t v84 = *(void *)v196;
    do
    {
      for (iuint64_t i = 0; ii != v83; iuint64_t i = (char *)ii + 1)
      {
        if (*(void *)v196 != v84) {
          objc_enumerationMutation(objf);
        }
        char v86 = qword_100A19F00;
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
        {
          id v87 = [*(id *)(*((void *)&v195 + 1) + 8 * (void)ii) UTF8String];
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = v87;
          _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEFAULT, "statedump: \t\"%{public}s\":", buf, 0xCu);
        }
      }
      id v83 = [objf countByEnumeratingWithState:&v195 objects:v227 count:16];
    }
    while (v83);
  }

  int v88 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEFAULT, "statedump: Apps disallowed to use bluetooth:", buf, 2u);
  }
  long long v193 = 0u;
  long long v194 = 0u;
  long long v191 = 0u;
  long long v192 = 0u;
  id objg = *(id *)(a1 + 344);
  id v89 = [objg countByEnumeratingWithState:&v191 objects:v226 count:16];
  if (v89)
  {
    uint64_t v90 = *(void *)v192;
    do
    {
      for (juint64_t j = 0; jj != v89; juint64_t j = (char *)jj + 1)
      {
        if (*(void *)v192 != v90) {
          objc_enumerationMutation(objg);
        }
        id v92 = qword_100A19F00;
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
        {
          id v93 = [*(id *)(*((void *)&v191 + 1) + 8 * (void)jj) UTF8String];
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = v93;
          _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEFAULT, "statedump: \t\"%{public}s\":", buf, 0xCu);
        }
      }
      id v89 = [objg countByEnumeratingWithState:&v191 objects:v226 count:16];
    }
    while (v89);
  }

  id v94 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEFAULT, "statedump: Apps Interested in FindMy devices:", buf, 2u);
  }
  [*(id *)(a1 + 320) enumerateKeysAndObjectsUsingBlock:&stru_1009A4DB8, v155];
  __int16 v95 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEFAULT, "statedump: Sessions pending TCC:", buf, 2u);
  }
  long long v189 = 0u;
  long long v190 = 0u;
  long long v187 = 0u;
  long long v188 = 0u;
  id objh = *(id *)(a1 + 352);
  id v96 = [objh countByEnumeratingWithState:&v187 objects:v225 count:16];
  if (v96)
  {
    uint64_t v97 = *(void *)v188;
    do
    {
      for (kk = 0; kk != v96; kk = (char *)kk + 1)
      {
        if (*(void *)v188 != v97) {
          objc_enumerationMutation(objh);
        }
        long long v99 = qword_100A19F00;
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
        {
          id v100 = [*(id *)(*((void *)&v187 + 1) + 8 * (void)kk) UTF8String];
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = v100;
          _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEFAULT, "statedump: \t\"%{public}s\":", buf, 0xCu);
        }
      }
      id v96 = [objh countByEnumeratingWithState:&v187 objects:v225 count:16];
    }
    while (v96);
  }

  long long v101 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEFAULT, "statedump: Sessions with readyForTCCSent:", buf, 2u);
  }
  long long v102 = *(void **)(a1 + 224);
  if (v102 != v158)
  {
    do
    {
      uint64_t v103 = v102[5];
      objuint64_t i = *(id *)(v103 + 88);
      if (objc_msgSend(*(id *)(a1 + 352), "containsObject:"))
      {
        if (*(unsigned char *)(v103 + 38))
        {
          long long v104 = qword_100A19F00;
          if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
          {
            id v105 = [obji UTF8String];
            *(_DWORD *)long long buf = 136446210;
            *(void *)&uint8_t buf[4] = v105;
            _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_DEFAULT, "statedump: \t\"%{public}s\":", buf, 0xCu);
          }
        }
      }

      int v106 = (void *)v102[1];
      if (v106)
      {
        do
        {
          __int16 v107 = v106;
          int v106 = (void *)*v106;
        }
        while (v106);
      }
      else
      {
        do
        {
          __int16 v107 = (void *)v102[2];
          BOOL v16 = *v107 == (void)v102;
          long long v102 = v107;
        }
        while (!v16);
      }
      long long v102 = v107;
    }
    while (v107 != v158);
  }
  long long v185 = 0u;
  long long v186 = 0u;
  long long v183 = 0u;
  long long v184 = 0u;
  objuint64_t j = *(id *)(a1 + 296);
  id v108 = [objj countByEnumeratingWithState:&v183 objects:v224 count:16];
  if (v108)
  {
    uint64_t v109 = *(void *)v184;
    do
    {
      for (mm = 0; mm != v108; mm = (char *)mm + 1)
      {
        if (*(void *)v184 != v109) {
          objc_enumerationMutation(objj);
        }
        __int16 v111 = qword_100A19F00;
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v112 = *(void *)(*((void *)&v183 + 1) + 8 * (void)mm);
          *(_DWORD *)long long buf = 138543362;
          *(void *)&uint8_t buf[4] = v112;
          _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_DEFAULT, "statedump: Applications to be Resurrected %{public}@", buf, 0xCu);
        }
      }
      id v108 = [objj countByEnumeratingWithState:&v183 objects:v224 count:16];
    }
    while (v108);
  }

  std::string v113 = *(void **)(a1 + 248);
  long long v114 = qword_100A19F00;
  if (v113 != (void *)(a1 + 256))
  {
    do
    {
      if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v115 = v113[4];
        int v116 = *((_DWORD *)v113 + 10);
        *(_DWORD *)long long buf = 138543618;
        *(void *)&uint8_t buf[4] = v115;
        *(_WORD *)&unsigned char buf[12] = 1024;
        LODWORD(v233) = v116;
        _os_log_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_DEFAULT, "statedump: Bundle checkin map: BundleID %{public}@, checkinTimes %d", buf, 0x12u);
        long long v114 = qword_100A19F00;
      }
      long long v117 = (void *)v113[1];
      if (v117)
      {
        do
        {
          long long v118 = v117;
          long long v117 = (void *)*v117;
        }
        while (v117);
      }
      else
      {
        do
        {
          long long v118 = (void *)v113[2];
          BOOL v16 = *v118 == (void)v113;
          std::string v113 = v118;
        }
        while (!v16);
      }
      std::string v113 = v118;
    }
    while (v118 != (void *)(a1 + 256));
  }
  if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_DEFAULT, "statedump: Sessions with pending FindMy device connections:", buf, 2u);
  }
  long long v119 = *(void **)(a1 + 224);
  if (v119 != v158)
  {
    do
    {
      v120 = (void *)v119[5];
      if (!(*(unsigned int (**)(void *))(*v120 + 16))(v120) && v120[41])
      {
        __int16 v123 = qword_100A19F00;
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v124 = v120[11];
          *(_DWORD *)long long buf = 138543362;
          *(void *)&uint8_t buf[4] = v124;
          _os_log_impl((void *)&_mh_execute_header, v123, OS_LOG_TYPE_DEFAULT, "statedump:     %{public}@:", buf, 0xCu);
        }
        __int16 v125 = (void *)v120[39];
        int v126 = v120 + 40;
        if (v125 != v120 + 40)
        {
          __int16 v127 = qword_100A19F00;
          do
          {
            if (os_log_type_enabled(v127, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v128 = v125[4];
              *(_DWORD *)long long buf = 138543362;
              *(void *)&uint8_t buf[4] = v128;
              _os_log_impl((void *)&_mh_execute_header, v127, OS_LOG_TYPE_DEFAULT, "statedump:     %{public}@:", buf, 0xCu);
              __int16 v127 = qword_100A19F00;
            }
            __int16 v129 = (void *)v125[1];
            if (v129)
            {
              do
              {
                int v130 = v129;
                __int16 v129 = (void *)*v129;
              }
              while (v129);
            }
            else
            {
              do
              {
                int v130 = (void *)v125[2];
                BOOL v16 = *v130 == (void)v125;
                __int16 v125 = v130;
              }
              while (!v16);
            }
            __int16 v125 = v130;
          }
          while (v130 != v126);
        }
      }
      v121 = (void *)v119[1];
      if (v121)
      {
        do
        {
          v122 = v121;
          v121 = (void *)*v121;
        }
        while (v121);
      }
      else
      {
        do
        {
          v122 = (void *)v119[2];
          BOOL v16 = *v122 == (void)v119;
          long long v119 = v122;
        }
        while (!v16);
      }
      long long v119 = v122;
    }
    while (v122 != v158);
  }
  __int16 v131 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v131, OS_LOG_TYPE_DEFAULT, "statedump: Sessions with pending latency requirements for device connections:", buf, 2u);
  }
  v132 = *(void **)(a1 + 224);
  if (v132 != v158)
  {
    do
    {
      if (!(*(unsigned int (**)(void))(*(void *)v132[5] + 16))(v132[5]))
      {
        uint64_t v133 = v132[5];
        v134 = [*(id *)(v133 + 80) allKeys];
        BOOL v135 = [v134 count] == 0;

        if (!v135)
        {
          v136 = qword_100A19F00;
          if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
          {
            sub_10003AE4C(v132[4], (uint64_t)buf);
            v137 = buf;
            if (SBYTE1(v234) < 0) {
              v137 = *(unsigned char **)buf;
            }
            *(_DWORD *)v248 = 136446210;
            v249 = v137;
            _os_log_impl((void *)&_mh_execute_header, v136, OS_LOG_TYPE_DEFAULT, "statedump:     %{public}s:", v248, 0xCu);
            if (SBYTE1(v234) < 0) {
              operator delete(*(void **)buf);
            }
          }
          long long v181 = 0u;
          long long v182 = 0u;
          long long v179 = 0u;
          long long v180 = 0u;
          id objk = *(id *)(v133 + 80);
          id v138 = [objk countByEnumeratingWithState:&v179 objects:v223 count:16];
          if (v138)
          {
            uint64_t v139 = *(void *)v180;
            do
            {
              for (nn = 0; nn != v138; nn = (char *)nn + 1)
              {
                if (*(void *)v180 != v139) {
                  objc_enumerationMutation(objk);
                }
                v141 = qword_100A19F00;
                if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v142 = *(void *)(*((void *)&v179 + 1) + 8 * (void)nn);
                  v143 = [*(id *)(v133 + 80) objectForKeyedSubscript:v142];
                  v144 = sub_100304F74((int)[v143 intValue]);
                  *(_DWORD *)long long buf = 138543618;
                  *(void *)&uint8_t buf[4] = v142;
                  *(_WORD *)&unsigned char buf[12] = 2080;
                  v233 = v144;
                  _os_log_impl((void *)&_mh_execute_header, v141, OS_LOG_TYPE_DEFAULT, "statedump:         %{public}@-->%s", buf, 0x16u);
                }
              }
              id v138 = [objk countByEnumeratingWithState:&v179 objects:v223 count:16];
            }
            while (v138);
          }
        }
      }
      v145 = (void *)v132[1];
      if (v145)
      {
        do
        {
          v146 = v145;
          v145 = (void *)*v145;
        }
        while (v145);
      }
      else
      {
        do
        {
          v146 = (void *)v132[2];
          BOOL v16 = *v146 == (void)v132;
          v132 = v146;
        }
        while (!v16);
      }
      v132 = v146;
    }
    while (v146 != v158);
  }
  v147 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v147, OS_LOG_TYPE_DEFAULT, "statedump: CBCentralManager LE Sessions:", buf, 2u);
  }
  v148 = *(void **)(a1 + 224);
  if (v148 != v158)
  {
    do
    {
      uint64_t v149 = v148[4];
      if (!(*(unsigned int (**)(void))(*(void *)v148[5] + 16))(v148[5]))
      {
        v150 = qword_100A19F00;
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
        {
          sub_10003AE4C(v149, (uint64_t)buf);
          v151 = SBYTE1(v234) >= 0 ? buf : *(unsigned char **)buf;
          *(_DWORD *)v248 = 136446210;
          v249 = v151;
          _os_log_impl((void *)&_mh_execute_header, v150, OS_LOG_TYPE_DEFAULT, "statedump: \t\"%{public}s\":", v248, 0xCu);
          if (SBYTE1(v234) < 0) {
            operator delete(*(void **)buf);
          }
        }
      }
      v152 = (void *)v148[1];
      if (v152)
      {
        do
        {
          v153 = v152;
          v152 = (void *)*v152;
        }
        while (v152);
      }
      else
      {
        do
        {
          v153 = (void *)v148[2];
          BOOL v16 = *v153 == (void)v148;
          v148 = v153;
        }
        while (!v16);
      }
      v148 = v153;
    }
    while (v153 != v158);
  }
  v154 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v154, OS_LOG_TYPE_DEFAULT, "statedump: fScreenOffWakeHistoryMap:", buf, 2u);
  }
  sub_1003086C8(a1);
}

void sub_10030ADA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  _Unwind_Resume(a1);
}

void sub_10030AE98(id a1, NSString *a2, NSSet *a3, BOOL *a4)
{
  unint64_t v6 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138543618;
    uint64_t v8 = a2;
    __int16 v9 = 2112;
    BOOL v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "statedump: \t\"%{public}@\":%@", (uint8_t *)&v7, 0x16u);
  }
}

void sub_10030AF70(uint64_t a1)
{
  sub_10030B6DC(a1);

  operator delete();
}

void sub_10030AFB8(uint64_t a1, void *a2, uint64_t a3)
{
}

void sub_10030AFC0(uint64_t a1, void *a2, uint64_t a3)
{
}

uint64_t sub_10030AFD0(uint64_t a1)
{
  return sub_10030B6DC(a1 - 136);
}

void sub_10030AFD8(uint64_t a1)
{
  sub_10030B6DC(a1 - 136);

  operator delete();
}

uint64_t sub_10030B018(uint64_t a1)
{
  return sub_10030B6DC(a1 - 152);
}

void sub_10030B020(uint64_t a1)
{
  sub_10030B6DC(a1 - 152);

  operator delete();
}

uint64_t sub_10030B068(uint64_t a1)
{
  return sub_10030B6DC(a1 - 160);
}

void sub_10030B070(uint64_t a1)
{
  sub_10030B6DC(a1 - 160);

  operator delete();
}

void sub_10030B0B0(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v4 = *(char **)(a1 + 8);
  id v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    unint64_t v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  unint64_t v6 = *(char **)(a1 + 8);
  while (*(void *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      unint64_t v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      uint64_t v7 = a2;
      sub_10030B180(a1 + 8, v6, (char *)&v7);
      sub_100061554(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(void, uint64_t))(a1 + 32))(*(void *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_10030B180(uint64_t a1, char *__src, char *a3)
{
  id v3 = a3;
  uint64_t v4 = __src;
  unint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      id v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      id v19 = 0;
    }
    uint64_t v20 = &v19[8 * v16];
    std::string __p = v19;
    int v27 = v20;
    int v28 = v20;
    int v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        uint64_t v23 = (char *)sub_1000405F8(v8, v22);
        uint64_t v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        int v27 = v20;
        int v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        int v27 = v20;
      }
    }
    *(void *)uint64_t v20 = *(void *)v3;
    int v28 = v20 + 8;
    uint64_t v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    __int16 v9 = __src + 8;
    BOOL v10 = v6 - 8;
    int v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_10030B388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_10030B3C0(_DWORD *a1, const std::string *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  uint64_t v17 = sub_1004B8C30(a1, 25);
  *((void *)v17 + 1) = 0;
  *((void *)v17 + 2) = 0;
  *((void *)v17 + 3) = 0;
  std::string::operator=((std::string *)(v17 + 2), a2);
  a1[8] = a3;
  a1[9] = a4;
  a1[10] = a5;
  a1[11] = a6;
  a1[12] = a7;
  a1[13] = a8;
  a1[14] = a9;
  return a1;
}

void sub_10030B454(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10030B470(uint64_t a1, const unsigned __int8 *a2, char a3, uint64_t a4, uint64_t *a5)
{
  *(unsigned char *)(a1 + 16) = a3;
  sub_100040550((void *)(a1 + 24), a4);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  sub_10030BC74((void *)(a1 + 48), *a5, a5[1], 0x8E38E38E38E38E39 * ((a5[1] - *a5) >> 1));
  return a1;
}

void sub_10030B4F0(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_10030B50C(id a1)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v7 = 0;
  sub_10004191C(__p, "");
  uint64_t v1 = sub_10003FFD4();
  (*(void (**)(uint64_t, void **))(*(void *)v1 + 168))(v1, __p);
  if (v7 >= 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  id v3 = +[NSURL fileURLWithFileSystemRepresentation:v2 isDirectory:1 relativeToURL:0];
  uint64_t v4 = [v3 URLByAppendingPathComponent:@"/Library/Database/com.apple.bluetooth-restoration-v1.plist"];
  id v5 = (void *)qword_100A120F0;
  qword_100A120F0 = v4;

  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10030B5D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10030B604(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  id v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        id v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 != v4)
  {
    int64_t v6 = v4 - (v5 + 8);
    if (v4 != v5 + 8) {
      memmove(v5, v5 + 8, v4 - (v5 + 8));
    }
    *(void *)(a1 + 16) = &v5[v6];
    sub_100061554(a1 + 8);
    if (*(void *)(a1 + 8) == *(void *)(a1 + 16)) {
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 32) + 8))(*(void *)(a1 + 32), a1);
    }
  }

  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

uint64_t sub_10030B6DC(uint64_t a1)
{
  *(void *)a1 = off_1009A45E8;
  *(void *)(a1 + 8) = off_1009A4828;
  *(void *)(a1 + 16) = off_1009A4860;
  *(void *)(a1 + 24) = off_1009A4880;
  *(void *)(a1 + 32) = off_1009A4930;
  *(void *)(a1 + 40) = off_1009A4990;
  *(void *)(a1 + 48) = &off_1009A49D0;
  *(void *)(a1 + 56) = off_1009A49E8;
  *(void *)(a1 + 64) = off_1009A4A30;
  *(void *)(a1 + 72) = off_1009A4A50;
  *(void *)(a1 + 80) = &off_1009A4A78;
  *(void *)(a1 + 88) = off_1009A4A90;
  *(void *)(a1 + 96) = off_1009A4AC0;
  *(void *)(a1 + 104) = &off_1009A4AE8;
  *(void *)(a1 + 112) = off_1009A4B00;
  *(void *)(a1 + 120) = &off_1009A4B28;
  *(void *)(a1 + 128) = &off_1009A4B40;
  *(void *)(a1 + 136) = off_1009A4B58;
  *(void *)(a1 + 144) = &off_1009A4B98;
  *(void *)(a1 + 152) = off_1009A4BB0;
  *(void *)(a1 + 160) = off_1009A4C28;
  *(void *)(a1 + 168) = &off_1009A4C50;
  sub_10030BEA8(a1 + 400, *(void **)(a1 + 408));
  uint64_t v4 = (void **)(a1 + 376);
  sub_100051568(&v4);

  sub_10004BA28(a1 + 272, *(char **)(a1 + 280));
  sub_10000EDA0(a1 + 248, *(void **)(a1 + 256));
  sub_1000486F0(a1 + 224, *(void **)(a1 + 232));
  uint64_t v2 = *(void **)(a1 + 200);
  if (v2)
  {
    *(void *)(a1 + 208) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t *sub_10030BA54(uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_10030BAAC(a1, *a2, a2 + 1);
  return a1;
}

void sub_10030BA94(_Unwind_Exception *a1)
{
  sub_10004BA28(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_10030BAAC(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    uint64_t v4 = a2;
    id v5 = (uint64_t **)result;
    int64_t v6 = result + 1;
    do
    {
      id result = sub_10030BB38(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      uint64_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (const void ***)v7;
          uint64_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      uint64_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_10030BB38(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v9 = 0;
  BOOL v10 = 0;
  int64_t v6 = (uint64_t **)sub_1002B360C(a1, a2, &v10, &v9, a3);
  id result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_10030BBC8((uint64_t)a1, a4, v8);
    sub_100036CA0(a1, (uint64_t)v10, v6, v8[0]);
    return v8[0];
  }
  return result;
}

void *sub_10030BBC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  int64_t v6 = a3 + 1;
  uint64_t v7 = (char *)operator new(0x38uLL);
  *a3 = v7;
  void *v6 = v5;
  *((unsigned char *)a3 + 16) = 0;
  id result = v7 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    id result = sub_10003B098(result, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)id result = *(_OWORD *)a2;
    result[2] = *(void *)(a2 + 16);
  }
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_10030BC58(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_1002B386C(v2, v3);
  _Unwind_Resume(a1);
}

void sub_10030BC74(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    sub_10030BCD8(a1, a4);
    sub_10030BD2C((uint64_t)a1, a2, a3);
  }
}

char *sub_10030BCD8(void *a1, unint64_t a2)
{
  if (a2 >= 0xE38E38E38E38E39) {
    abort();
  }
  id result = (char *)sub_10030BDB8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[18 * v4];
  return result;
}

void sub_10030BD2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a2 + v7;
      uuid_copy((unsigned __int8 *)(v4 + v7), (const unsigned __int8 *)(a2 + v7));
      *(_WORD *)(v4 + v7 + 16) = *(_WORD *)(a2 + v7 + 16);
      v7 += 18;
    }
    while (v8 + 18 != a3);
    v4 += v7;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_10030BDB0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *sub_10030BDB8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xE38E38E38E38E39) {
    sub_1000616DC();
  }
  return operator new(18 * a2);
}

void *sub_10030BE04(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    sub_10030BE6C(a1, v5 >> 1);
    int64_t v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

char *sub_10030BE6C(void *a1, uint64_t a2)
{
  if (a2 < 0) {
    abort();
  }
  id result = (char *)sub_1002C5544((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void sub_10030BEA8(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10030BEA8(a1, *a2);
    sub_10030BEA8(a1, a2[1]);
    sub_10030BF04((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_10030BF04(uint64_t a1)
{
  sub_1002B308C((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void sub_10030BF54(id a1)
{
}

void sub_10030BF98()
{
}

void sub_10030BFBC(id a1)
{
}

void sub_10030C000()
{
}

void sub_10030C024(id a1)
{
}

void sub_10030C068()
{
}

void sub_10030C08C(id a1)
{
}

void sub_10030C0D0()
{
}

void sub_10030C0F4(id a1)
{
}

void sub_10030C138()
{
}

void sub_10030C15C(id a1)
{
}

void sub_10030C1A0()
{
}

void sub_10030C1C4(id a1)
{
}

void sub_10030C208()
{
}

void sub_10030C22C(id a1)
{
}

void sub_10030C270()
{
}

void sub_10030C294(id a1)
{
}

void sub_10030C2D8()
{
}

void sub_10030C2FC(id a1)
{
}

void sub_10030C340()
{
}

void sub_10030C364(id a1)
{
}

void sub_10030C3A8()
{
}

void sub_10030C3CC(id a1)
{
}

void sub_10030C410()
{
}

void sub_10030C434(id a1)
{
}

void sub_10030C478()
{
}

void sub_10030C49C(id a1)
{
}

void sub_10030C4E0()
{
}

void sub_10030C504(id a1)
{
}

void sub_10030C548()
{
}

void sub_10030C56C(id a1)
{
}

void sub_10030C5B0()
{
}

void sub_10030C5D4(id a1)
{
}

uint64_t *sub_10030C604(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = sub_10004D3B8(a1, (uint64_t *)a2);

  operator delete((void *)a2);
  return v3;
}

void sub_10030C640(id a1)
{
}

void sub_10030C684()
{
}

void sub_10030C6A8(id a1)
{
}

void sub_10030C6EC()
{
}

uint64_t **sub_10030C710(uint64_t **a1, unint64_t *a2, uint64_t a3, id **a4)
{
  uint64_t v7 = a1 + 1;
  int64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        int64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      int64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    int v11 = operator new(0x30uLL);
    uint8_t v11[4] = **a4;
    *((_DWORD *)v11 + 10) = 0;
    sub_100036CA0(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_10030C7D8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    int64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 9;
        sub_10030C870((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      int64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_10030C870(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[6];
  if (v3)
  {
    a2[7] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a2[3];
  if (v4)
  {
    a2[4] = v4;
    operator delete(v4);
  }
}

uint64_t sub_10030C8C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 1);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xE38E38E38E38E38) {
    abort();
  }
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v9 = 0x8E38E38E38E38E39 * ((v8 - v2) >> 1);
  if (2 * v9 > v4) {
    unint64_t v4 = 2 * v9;
  }
  if (v9 >= 0x71C71C71C71C71CLL) {
    unint64_t v10 = 0xE38E38E38E38E38;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v18 = v7;
  if (v10) {
    int v11 = (char *)sub_10030BDB8(v7, v10);
  }
  else {
    int v11 = 0;
  }
  std::string __p = v11;
  unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v15 = (unsigned __int8 *)&v11[18 * v3];
  uint64_t v16 = v15;
  uint64_t v17 = &v11[18 * v10];
  uuid_copy(v15, (const unsigned __int8 *)a2);
  *((_WORD *)v15 + 8) = *(_WORD *)(a2 + 16);
  v16 += 18;
  sub_10030CA70(a1, &__p);
  uint64_t v12 = a1[1];
  if (v16 != v15) {
    uint64_t v16 = &v15[(v16 - v15 - 18) % 0x12uLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v12;
}

void sub_10030CA1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10030CA70(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a2[1];
  if (v5 == *a1)
  {
    uint64_t v7 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v7 = v6 - 18;
      uuid_copy((unsigned __int8 *)(v6 - 18), (const unsigned __int8 *)(v5 - 18));
      *(_WORD *)(v6 - 2) = *(_WORD *)(v5 - 2);
      v5 -= 18;
      v6 -= 18;
    }
    while (v5 != v4);
  }
  a2[1] = v7;
  uint64_t v8 = *a1;
  *a1 = v7;
  a2[1] = v8;
  uint64_t v9 = a1[1];
  a1[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = a1[2];
  a1[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
}

void sub_10030CB28(id a1)
{
}

void sub_10030CB6C()
{
}

_OWORD *sub_10030CB90(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v12 = 0;
  uint64_t v6 = (void **)sub_1000314CC((uint64_t)a1, &v12, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x40uLL);
    uint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    void v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    _DWORD v9[2] = 0;
    void *v9 = 0;
    *((unsigned char *)v7 + 56) = 0;
    sub_100036CA0(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

void sub_10030CC30(id a1)
{
}

void sub_10030CDC0()
{
}

void sub_10030CDE4(id a1)
{
}

void sub_10030CE28()
{
}

void sub_10030CE4C(id a1)
{
}

void sub_10030CE90(id a1)
{
}

void sub_10030CED4()
{
}

void sub_10030CEF8(id a1)
{
}

void sub_10030CF3C()
{
}

void sub_10030CF60(id a1)
{
}

void sub_10030CFA4()
{
}

void *sub_10030CFC8(void *a1, uint64_t a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != a2)
  {
    uint64_t v5 = 1;
    uint64_t v6 = a1;
    do
    {
      uint64_t v7 = operator new(0x20uLL);
      v7[1] = *(_OWORD *)(v3 + 16);
      *(void *)uint64_t v7 = v6;
      *((void *)v7 + 1) = a1;
      *((void *)v6 + 1) = v7;
      *a1 = v7;
      a1[2] = v5;
      uint64_t v3 = *(void *)(v3 + 8);
      ++v5;
      uint64_t v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_10030D050(_Unwind_Exception *a1)
{
  sub_1002B308C(v1);
  _Unwind_Resume(a1);
}

void *sub_10030D064(void *result, uint64_t a2, uint64_t a3, float a4)
{
  if (v4 >= 0) {
    uint64_t v5 = result;
  }
  else {
    uint64_t v5 = (void *)*result;
  }
  *(float *)a3 = a4;
  *(void *)(a3 + 4) = v5;
  *(_WORD *)(a3 + 12) = 2114;
  *(void *)(a3 + 14) = a2;
  return result;
}

void sub_10030D09C(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_debug_impl(a1, a4, OS_LOG_TYPE_DEBUG, a2, a3, 0x16u);
}

void *sub_10030D0B8(void *result, uint64_t a2, int a3, float a4)
{
  if (v4 >= 0) {
    uint64_t v5 = result;
  }
  else {
    uint64_t v5 = (void *)*result;
  }
  *(float *)a2 = a4;
  *(_DWORD *)(a2 + 4) = a3;
  *(_WORD *)(a2 + 8) = 2082;
  *(void *)(a2 + 10) = v5;
  return result;
}

uint64_t sub_10030D0DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, ...)
{
  va_start(va, a3);
  *(void *)(v3 - 24) = a2;
  return sub_10003AE4C(a1, (uint64_t)va);
}

void sub_10030D0F8(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  _os_log_fault_impl(a1, v13, OS_LOG_TYPE_FAULT, a4, &buf, 0xCu);
}

void sub_10030D118(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

void sub_10030D140()
{
  if (sub_10053FF78()) {
    operator new();
  }
  int v0 = qword_100A19EE0;
  if (os_log_type_enabled((os_log_t)qword_100A19EE0, OS_LOG_TYPE_ERROR)) {
    sub_1007560B4(v0);
  }
}

void sub_10030D2FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = a10;
  a10 = 0;
  if (v11) {
    sub_10030F1B8((uint64_t)&a10, v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10030D374(void *a1, uint64_t a2)
{
  v14[0] = 0;
  v14[1] = 0;
  sub_10003AED0((uint64_t)v14, (uint64_t)(a1 + 8));
  uint64_t v4 = qword_100A19EE0;
  if (os_log_type_enabled((os_log_t)qword_100A19EE0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = "remote and installed";
    if (a2) {
      uint64_t v5 = "installed";
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Querying %s assets", buf, 0xCu);
  }
  id v6 = [objc_alloc((Class)MAAssetQuery) initWithType:*a1];
  [v6 setDoNotBlockBeforeFirstUnlock:1];
  [v6 setDoNotBlockOnNetworkStatus:a2];
  if (a2) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = 2;
  }
  [v6 returnTypes:v7];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  _DWORD v10[2] = sub_10030DF1C;
  v10[3] = &unk_1009A5210;
  uint64_t v12 = a1;
  char v13 = a2;
  id v8 = v6;
  id v11 = v8;
  [v8 queryMetaData:v10];

  return sub_10003AFB4((uint64_t)v14);
}

void sub_10030D500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10030D53C(uint64_t a1)
{
  char v13 = 0;
  uint64_t v2 = sub_100017768();
  sub_10004191C(buf, "MobileAsset");
  sub_10004191C(__p, "EnableFiveMinDownloads");
  int v3 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v2 + 72))(v2, buf, __p, &v13);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  int64_t v4 = XPC_ACTIVITY_INTERVAL_1_DAY;
  if (v12 < 0) {
    operator delete(*(void **)buf);
  }
  if (v13) {
    int v5 = v3;
  }
  else {
    int v5 = 0;
  }
  if (v5 == 1)
  {
    id v6 = qword_100A19EE0;
    if (os_log_type_enabled((os_log_t)qword_100A19EE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Warning: Enabling aggressive 5 minute download timer!", buf, 2u);
    }
    int64_t v4 = XPC_ACTIVITY_INTERVAL_5_MIN;
  }
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_BOOL(v7, XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY, 1);
  xpc_dictionary_set_uint64(v7, XPC_ACTIVITY_NETWORK_DOWNLOAD_SIZE, 0x400uLL);
  xpc_dictionary_set_int64(v7, XPC_ACTIVITY_INTERVAL, v4);
  xpc_dictionary_set_string(v7, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_10030DC64;
  v8[3] = &unk_1009A51C8;
  void v8[4] = a1;
  xpc_activity_register("com.apple.bluetooth.mobileassets", v7, v8);
  xpc_release(v7);
}

void sub_10030D73C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10030D770(void *a1)
{
  uint64_t v1 = a1;
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, (uint64_t)(a1 + 8));
  uint64_t v2 = (void *)v1[2];
  v1 += 2;
  sub_10030F284((uint64_t)(v1 - 1), v2);
  *(v1 - 1) = v1;
  void *v1 = 0;
  v1[1] = 0;
  return sub_10003AFB4((uint64_t)v4);
}

uint64_t sub_10030D7C4(uint64_t a1, int a2)
{
  int v9 = a2;
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 64);
  int64_t v4 = *(uint64_t **)(a1 + 16);
  if (!v4)
  {
LABEL_7:
    uint64_t v6 = 0;
    goto LABEL_8;
  }
  while (1)
  {
    int v5 = *((_DWORD *)v4 + 8);
    if (v5 <= a2) {
      break;
    }
LABEL_6:
    int64_t v4 = (uint64_t *)*v4;
    if (!v4) {
      goto LABEL_7;
    }
  }
  if (v5 < a2)
  {
    ++v4;
    goto LABEL_6;
  }
  uint64_t v6 = *sub_10030D860(a1 + 8, &v9);
LABEL_8:
  sub_10003AFB4((uint64_t)v8);
  return v6;
}

void sub_10030D84C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_10030D860(uint64_t a1, int *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  if (!v2) {
LABEL_8:
  }
    abort();
  int v3 = *a2;
  while (1)
  {
    while (1)
    {
      int v4 = *((_DWORD *)v2 + 8);
      if (v3 >= v4) {
        break;
      }
      uint64_t v2 = (uint64_t *)*v2;
      if (!v2) {
        goto LABEL_8;
      }
    }
    if (v4 >= v3) {
      return v2 + 5;
    }
    uint64_t v2 = (uint64_t *)v2[1];
    if (!v2) {
      goto LABEL_8;
    }
  }
}

void sub_10030D8B0(uint64_t a1)
{
  uint64_t v2 = qword_100A19EE0;
  if (os_log_type_enabled((os_log_t)qword_100A19EE0, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: ---------------- MobileAsset Manager ----------------", (uint8_t *)&buf, 2u);
    uint64_t v2 = qword_100A19EE0;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 128);
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: fRetryLocalAssetReadCounter:%d", (uint8_t *)&buf, 8u);
  }
  int v4 = *(void **)(a1 + 8);
  if (v4 != (void *)(a1 + 16))
  {
    do
    {
      int v5 = sub_1005D3B80(v4[5]);
      if (v5)
      {
        uint64_t v6 = qword_100A19EE0;
        if (os_log_type_enabled((os_log_t)qword_100A19EE0, OS_LOG_TYPE_DEFAULT))
        {
          sub_10030DAB8(v5, &buf);
          xpc_object_t v7 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
             ? &buf
             : (std::string *)buf.__r_.__value_.__r.__words[0];
          *(_DWORD *)char v12 = 136446210;
          char v13 = v7;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "statedump: %{public}s", v12, 0xCu);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
        }
      }

      id v8 = (void *)v4[1];
      if (v8)
      {
        do
        {
          int v9 = v8;
          id v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          int v9 = (void *)v4[2];
          BOOL v10 = *v9 == (void)v4;
          int v4 = v9;
        }
        while (!v10);
      }
      int v4 = v9;
    }
    while (v9 != (void *)(a1 + 16));
  }
}

void sub_10030DAA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030DAB8(void *a1@<X1>, std::string *a2@<X8>)
{
  id v3 = a1;
  std::string __p = 0;
  size_t v15 = 0;
  uint64_t v16 = 0;
  sub_10030EFD4(v3, &__p);
  unsigned int v5 = sub_10030E98C(v4, v3);
  if (v16 >= 0) {
    size_t v6 = HIBYTE(v16);
  }
  else {
    size_t v6 = v15;
  }
  memset(&v13, 0, sizeof(v13));
  xpc_object_t v7 = &v13;
  sub_1002EA240((uint64_t)&v13, v6 + 2);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    xpc_object_t v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (v16 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    memmove(v7, p_p, v6);
  }
  strcpy((char *)v7 + v6, " v");
  std::to_string(&v12, v5);
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v9 = &v12;
  }
  else {
    int v9 = (std::string *)v12.__r_.__value_.__r.__words[0];
  }
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v12.__r_.__value_.__l.__size_;
  }
  id v11 = std::string::append(&v13, (const std::string::value_type *)v9, size);
  *a2 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(__p);
  }
}

void sub_10030DC08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }

  _Unwind_Resume(a1);
}

void sub_10030DC64(uint64_t a1, xpc_activity_t activity)
{
  id v3 = *(uint64_t **)(a1 + 32);
  xpc_activity_state_t state = xpc_activity_get_state(activity);
  unsigned int v5 = qword_100A19EE0;
  if (os_log_type_enabled((os_log_t)qword_100A19EE0, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 134217984;
    xpc_activity_state_t v8 = state;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "com.apple.bluetooth.mobileassets activity triggered with state %ld", (uint8_t *)&v7, 0xCu);
  }
  if (state == 2)
  {
    sub_10030DD68(v3);
    if (!xpc_activity_set_state(activity, 5))
    {
      size_t v6 = qword_100A19EE0;
      if (os_log_type_enabled((os_log_t)qword_100A19EE0, OS_LOG_TYPE_ERROR)) {
        sub_1007560F8(v6);
      }
    }
  }
}

id sub_10030DD68(uint64_t *a1)
{
  uint64_t v2 = qword_100A19EE0;
  if (os_log_type_enabled((os_log_t)qword_100A19EE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Downloading MobileBluetoothAssets catalog", buf, 2u);
  }
  uint64_t v3 = *a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_10030DE30;
  v5[3] = &unk_1009A51E8;
  void v5[4] = a1;
  return +[MAAsset startCatalogDownload:v3 then:v5];
}

void sub_10030DE30(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = qword_100A19EE0;
  BOOL v5 = os_log_type_enabled((os_log_t)qword_100A19EE0, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    int v6 = 136315138;
    int v7 = sub_10030DEF8(v5, a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Catalog download completed with result: %s", (uint8_t *)&v6, 0xCu);
  }
  if (!a2) {
    sub_10030D374(v3, 0);
  }
}

const char *sub_10030DEF8(uint64_t a1, unint64_t a2)
{
  if (a2 > 0x24) {
    return "UnknownDownloadResultType";
  }
  else {
    return off_1009A52C0[a2];
  }
}

void sub_10030DF1C(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  BOOL v5 = qword_100A19EE0;
  BOOL v6 = os_log_type_enabled((os_log_t)qword_100A19EE0, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    int v7 = sub_10030E398(v6, a2);
    int v8 = *(unsigned __int8 *)(v4 + 128);
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&unsigned char buf[14] = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Mobile asset query completed with result: %s fRetryLocalAssetReadCounter:%d", buf, 0x12u);
  }
  if (!a2 || a2 == 2 && *(unsigned char *)(a1 + 48))
  {
    memset(buf, 0, sizeof(buf));
    int v9 = [*(id *)(a1 + 32) results];
    sub_10030E3BC(v4, v9, (uint64_t)buf);

    BOOL v10 = *(uint8_t **)buf;
    if (*(uint8_t **)buf != &buf[8])
    {
      do
      {
        if (*(unsigned char *)(a1 + 48))
        {
          id v11 = qword_100A19EE0;
          if (os_log_type_enabled((os_log_t)qword_100A19EE0, OS_LOG_TYPE_DEFAULT))
          {
            sub_10030DAB8(*((void **)v10 + 5), &__p);
            p_p = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)uint64_t v24 = 136315138;
            int v25 = p_p;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Reading %s asset", v24, 0xCu);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v10 + 32);
          std::string v13 = sub_10030F06C((uint64_t **)(v4 + 8), (int *)v10 + 8, (uint64_t)&unk_1007BE9D0, &__p);
          (*(void (**)(uint64_t *, void))(*v13[5] + 16))(v13[5], *((void *)v10 + 5));
          *(unsigned char *)(v4 + 128) = 0;
        }
        else if ([*((id *)v10 + 5) wasLocal])
        {
          uint64_t v14 = qword_100A19EE0;
          if (os_log_type_enabled((os_log_t)qword_100A19EE0, OS_LOG_TYPE_DEBUG))
          {
            sub_10030DAB8(*((void **)v10 + 5), &__p);
            size_t v15 = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              size_t v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)uint64_t v24 = 136315138;
            int v25 = v15;
            _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "%s asset is already present, no need to redownload", v24, 0xCu);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
        }
        else
        {
          sub_10030E61C(v4, *((void **)v10 + 5));
        }
        uint64_t v16 = (uint8_t *)*((void *)v10 + 1);
        if (v16)
        {
          do
          {
            uint64_t v17 = v16;
            uint64_t v16 = *(uint8_t **)v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            uint64_t v17 = (uint8_t *)*((void *)v10 + 2);
            BOOL v18 = *(void *)v17 == (void)v10;
            BOOL v10 = v17;
          }
          while (!v18);
        }
        BOOL v10 = v17;
      }
      while (v17 != &buf[8]);
    }
    sub_10030F308((uint64_t)buf, *(void **)&buf[8]);
  }
  else if (*(unsigned char *)(a1 + 48))
  {
    unsigned int v20 = *(unsigned __int8 *)(v4 + 128);
    if (v20 <= 4)
    {
      *(unsigned char *)(v4 + 128) = v20 + 1;
      dispatch_time_t v21 = dispatch_time(0, 5000000000);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10030E7D0;
      block[3] = &unk_100997528;
      void block[4] = v4;
      dispatch_after(v21, (dispatch_queue_t)&_dispatch_main_q, block);
    }
  }
  if (*(unsigned char *)(a1 + 48) && !*(void *)(v4 + 24))
  {
    if (qword_1009FB088 != -1) {
      dispatch_once(&qword_1009FB088, &stru_1009A52A0);
    }
    uint64_t v19 = qword_1009FB080;
    sub_10004191C(buf, "MobileAsset");
    sub_10004191C(&__p, "No assets found from querying local assets");
    sub_1004B7DA8(0.0, v19, (uint64_t *)buf, (uint64_t *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((char)buf[23] < 0) {
      operator delete(*(void **)buf);
    }
  }
}

void sub_10030E334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

const char *sub_10030E398(uint64_t a1, unint64_t a2)
{
  if (a2 > 0xE) {
    return "UnknownQueryResultType";
  }
  else {
    return off_1009A53E8[a2];
  }
}

void sub_10030E3BC(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v5 = a2;
  *(void *)(a3 + 8) = 0;
  BOOL v6 = (uint64_t **)(a3 + 8);
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = a3 + 8;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  obuint64_t j = v5;
  id v7 = [obj countByEnumeratingWithState:&v22 objects:v27 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v23;
    do
    {
      int v9 = 0;
      do
      {
        if (*(void *)v23 != v8) {
          objc_enumerationMutation(obj);
        }
        BOOL v10 = *(void **)(*((void *)&v22 + 1) + 8 * (void)v9);
        int v21 = 0;
        int v11 = sub_10030E7DC(a1, v10);
        int v21 = v11;
        std::string v12 = *v6;
        if (!*v6)
        {
LABEL_11:
          int v26 = &v21;
          uint64_t v14 = sub_10030F06C((uint64_t **)a3, &v21, (uint64_t)&unk_1007BE9D0, &v26);
          size_t v15 = v10;
          uint64_t v16 = v14[5];
          v14[5] = v15;
          goto LABEL_12;
        }
        while (1)
        {
          int v13 = *((_DWORD *)v12 + 8);
          if (v11 >= v13) {
            break;
          }
LABEL_10:
          std::string v12 = (uint64_t *)*v12;
          if (!v12) {
            goto LABEL_11;
          }
        }
        if (v13 < v11)
        {
          ++v12;
          goto LABEL_10;
        }
        int v26 = &v21;
        uint64_t v16 = sub_10030F06C((uint64_t **)a3, &v21, (uint64_t)&unk_1007BE9D0, &v26)[5];
        id v17 = sub_10030E98C((uint64_t)v16, v16);
        if (sub_10030E98C((uint64_t)v17, v10) > v17)
        {
          int v26 = &v21;
          BOOL v18 = sub_10030F06C((uint64_t **)a3, &v21, (uint64_t)&unk_1007BE9D0, &v26);
          objc_storeStrong((id *)v18 + 5, v10);
        }
LABEL_12:

        int v9 = (char *)v9 + 1;
      }
      while (v9 != v7);
      id v19 = [obj countByEnumeratingWithState:&v22 objects:v27 count:16];
      id v7 = v19;
    }
    while (v19);
  }
}

void sub_10030E5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_10030F308(v9, *(void **)(v9 + 8));
  _Unwind_Resume(a1);
}

void sub_10030E61C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = qword_100A19EE0;
  if (os_log_type_enabled((os_log_t)qword_100A19EE0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10030DAB8(v3, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    int v13 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Downloading %s asset", buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  [v3 logAsset];
  id v6 = objc_alloc_init((Class)MADownloadOptions);
  [v6 setDiscretionary:0];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_10030EA08;
  v8[3] = &unk_1009A5258;
  uint64_t v10 = a1;
  id v7 = v3;
  id v9 = v7;
  [v7 startDownload:v6 then:v8];
}

void sub_10030E794(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10030E7D0(uint64_t a1)
{
  return sub_10030D374(*(void *)(a1 + 32), 1);
}

BOOL sub_10030E7DC(uint64_t a1, void *a2)
{
  std::string __p = 0;
  long long v13 = 0uLL;
  sub_10030EFD4(a2, &__p);
  if (SHIBYTE(v13) < 0)
  {
    p_p = (unint64_t *)__p;
    if ((void)v13 != 21)
    {
      if ((void)v13 != 23
        || (*(void *)__p == 0x6C42656C69626F4DLL ? (BOOL v6 = *((void *)__p + 1) == 0x4468746F6F746575) : (BOOL v6 = 0),
            v6 ? (BOOL v7 = *(void *)((char *)__p + 15) == 0x6573616261746144) : (BOOL v7 = 0),
            !v7))
      {
        uint64_t v4 = 0;
LABEL_33:
        operator delete(p_p);
        return v4;
      }
      uint64_t v4 = 1;
      if ((HIBYTE(v13) & 0x80) == 0) {
        return v4;
      }
LABEL_32:
      p_p = (unint64_t *)__p;
      goto LABEL_33;
    }
  }
  else
  {
    if (HIBYTE(v13) != 21)
    {
      if (HIBYTE(v13) != 23) {
        return 0;
      }
      return __p == (void *)0x6C42656C69626F4DLL
          && (void)v13 == 0x4468746F6F746575
          && *(void *)((char *)&v13 + 7) == 0x6573616261746144;
    }
    p_p = (unint64_t *)&__p;
  }
  unint64_t v8 = 0x4D6F62696C65426CLL;
  unint64_t v9 = bswap64(*p_p);
  if (v9 == 0x4D6F62696C65426CLL
    && (unint64_t v8 = 0x7565746F6F746843, v9 = bswap64(p_p[1]), v9 == 0x7565746F6F746843)
    && (unint64_t v8 = 0x7468436F6E666967, v9 = bswap64(*(unint64_t *)((char *)p_p + 13)), v9 == 0x7468436F6E666967))
  {
    int v10 = 0;
  }
  else if (v9 < v8)
  {
    int v10 = -1;
  }
  else
  {
    int v10 = 1;
  }
  uint64_t v4 = 2 * (v10 == 0);
  if ((HIBYTE(v13) & 0x80) != 0) {
    goto LABEL_32;
  }
  return v4;
}

id sub_10030E98C(uint64_t a1, void *a2)
{
  uint64_t v2 = [a2 attributes];
  id v3 = [v2 objectForKey:ASAttributeContentVersion];
  id v4 = [v3 intValue];

  return v4;
}

void sub_10030E9EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030EA08(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = qword_100A19EE0;
  if (!os_log_type_enabled((os_log_t)qword_100A19EE0, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_5;
  }
  p_p = &__p;
  sub_10030DAB8(*(void **)(a1 + 32), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  unint64_t v8 = sub_10030DEF8(v7, a2);
  *(_DWORD *)std::string buf = 136315394;
  uint64_t v16 = p_p;
  __int16 v17 = 2080;
  BOOL v18 = v8;
  _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%s asset download completed with result: %s", buf, 0x16u);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (a2) {
      return;
    }
  }
  else
  {
LABEL_5:
    if (a2) {
      return;
    }
  }
  *(_DWORD *)std::string buf = sub_10030E7DC(v4, *(void **)(a1 + 32));
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
  unint64_t v9 = sub_10030F06C((uint64_t **)(v4 + 8), (int *)buf, (uint64_t)&unk_1007BE9D0, &__p);
  int v10 = sub_1005D3B80((uint64_t)v9[5]);
  if (sub_10030EC44((uint64_t)v10, *(void **)(a1 + 32), v10)) {
    sub_10030ED20(v4, v10);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
  int v11 = sub_10030F06C((uint64_t **)(v4 + 8), (int *)buf, (uint64_t)&unk_1007BE9D0, &__p);
  (*(void (**)(uint64_t *, void))(*v11[5] + 16))(v11[5], *(void *)(a1 + 32));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_10030EE94;
  _OWORD v12[3] = &unk_1009A5230;
  int v13 = *(_DWORD *)buf;
  sub_10030EDC8((os_unfair_lock_s *)(v4 + 32), v12);
}

void sub_10030EC2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10030EC44(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  BOOL v6 = v5;
  if (!v5 || [v5 state] == (id)5 || objc_msgSend(v6, "state") == (id)6)
  {
    uint64_t v7 = 0;
  }
  else
  {
    unint64_t v9 = [v4 assetId];
    int v10 = [v6 assetId];
    uint64_t v7 = [v9 isEqualToString:v10] ^ 1;
  }
  return v7;
}

void sub_10030ECF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030ED20(uint64_t a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_10030EEC4;
  void v4[3] = &unk_1009A5258;
  id v5 = a2;
  uint64_t v6 = a1;
  id v3 = v5;
  [v3 purge:v4];
}

void sub_10030EDB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_10030EDC8(os_unfair_lock_s *a1, void *a2)
{
  id v3 = a2;
  os_unfair_lock_lock(a1);
  id v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  id v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    id v4 = v5;
  }
  if (v4)
  {
    uint64_t v6 = v4;
    operator delete(v4);
  }
}

void sub_10030EE6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10030EE94(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(unsigned int *)(a1 + 32));
}

void sub_10030EEC4(uint64_t a1, unint64_t a2)
{
  id v4 = qword_100A19EE0;
  if (os_log_type_enabled((os_log_t)qword_100A19EE0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10030DAB8(*(void **)(a1 + 32), &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (a2 > 0xB) {
      uint64_t v6 = "UnknownPurgeResultType";
    }
    else {
      uint64_t v6 = off_1009A5460[a2];
    }
    *(_DWORD *)std::string buf = 136315394;
    unint64_t v9 = p_p;
    __int16 v10 = 2080;
    int v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Outdated %s asset has been purged with result %s", buf, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_10030EFD4(void *a1@<X1>, void *a2@<X8>)
{
  id v4 = [a1 attributes];
  id v3 = [v4 objectForKey:@"AssetName"];
  sub_10004191C(a2, (char *)[v3 UTF8String]);
}

void sub_10030F04C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t **sub_10030F06C(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v9 = a1 + 1;
LABEL_10:
    int v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((void *)v11 + 5) = 0;
    sub_100036CA0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_10030F130(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 111) < 0) {
      operator delete(*(void **)(a2 + 88));
    }
    *(void *)a2 = off_1009A5288;

    sub_100052DA4(a2 + 8);
    operator delete();
  }
}

void sub_10030F1B8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_10004BA28(a2 + 232, *(char **)(a2 + 240));
    sub_1000486F0(a2 + 208, *(void **)(a2 + 216));
    sub_10004BA28(a2 + 184, *(char **)(a2 + 192));
    sub_1000486F0(a2 + 160, *(void **)(a2 + 168));
    sub_10004BA28(a2 + 136, *(char **)(a2 + 144));
    sub_10004BA28(a2 + 112, *(char **)(a2 + 120));
    sub_10004BA28(a2 + 88, *(char **)(a2 + 96));
    *(void *)a2 = off_1009A5288;

    sub_100052DA4(a2 + 8);
    operator delete();
  }
}

void sub_10030F284(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10030F284(a1, *a2);
    sub_10030F284(a1, a2[1]);
    uint64_t v4 = a2[5];
    a2[5] = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    operator delete(a2);
  }
}

void sub_10030F308(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10030F308(a1, *a2);
    sub_10030F308(a1, a2[1]);

    operator delete(a2);
  }
}

void sub_10030F364(id a1)
{
}

void sub_10030F3A8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1009A54D0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a2;
  atomic_store(0, (unsigned __int8 *)(a1 + 40));
  atomic_store(0, (unsigned __int8 *)(a1 + 41));
}

uint64_t sub_10030F3E0(uint64_t a1)
{
  *(void *)a1 = off_1009A54D0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_10030F430(uint64_t a1)
{
  *(void *)a1 = off_1009A54D0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  operator delete();
}

void sub_10030F4A0(uint64_t a1, int a2, void *a3)
{
  if (a3)
  {
    id v5 = a3;
    uint64_t v6 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = [v5 description];
      *(_DWORD *)std::string buf = 138412290;
      int v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Publishing device with the following properties %@", buf, 0xCu);
    }
    atomic_store(1u, (unsigned __int8 *)(a1 + 40));
    CFRetain(v5);
    int v8 = +[AudioDeviceManager sharedManager];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10030F64C;
    block[3] = &unk_100998280;
    void block[4] = a1;
    void block[5] = v5;
    int v11 = a2;
    dispatch_async((dispatch_queue_t)[v8 getXpcQueue], block);
  }
  else
  {
    unint64_t v9 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
      sub_10075613C(v9);
    }
  }
}

void sub_10030F628(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030F64C(uint64_t a1)
{
  *(_OWORD *)keys = *(_OWORD *)off_1009A54E0;
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  values[0] = xpc_int64_create(*(int *)(a1 + 48));
  values[1] = v3;
  xpc_object_t v4 = xpc_dictionary_create((const char *const *)keys, values, 2uLL);
  id v5 = v4;
  if (v3) {
    BOOL v6 = v4 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    id v7 = *(id *)(a1 + 40);
    int v8 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR))
    {
      int v11 = [v7 description];
      *(_DWORD *)std::string buf = 67109634;
      BOOL v15 = v3 == 0;
      __int16 v16 = 1024;
      BOOL v17 = v5 == 0;
      __int16 v18 = 2112;
      id v19 = v11;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to create an xpc msg (reason: xpcProperties %d, xpcArgs %d) to send publish msg with following parameters %@", buf, 0x18u);
    }
    (*(void (**)(void))(**(void **)(v2 + 32) + 80))(*(void *)(v2 + 32));
  }
  else
  {
    id v7 = +[AudioDeviceManager sharedManager];
    if (*(char *)(v2 + 31) < 0)
    {
      sub_10003B098(__p, *(void **)(v2 + 8), *(void *)(v2 + 16));
    }
    else
    {
      long long v9 = *(_OWORD *)(v2 + 8);
      uint64_t v13 = *(void *)(v2 + 24);
      *(_OWORD *)std::string __p = v9;
    }
    [v7 publishAndRegisterDevice:2 withArgs:v5 uid:__p device:v2];
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[0]);
    }
  }

  CFRelease(*(CFTypeRef *)(a1 + 40));
  xpc_release(v5);
  if (v3)
  {
    xpc_release(v3);
  }
  else
  {
    int v10 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
      sub_100756180((int *)(a1 + 48), v10);
    }
  }
  xpc_release(values[0]);
}

void sub_10030F890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

void sub_10030F8C8(uint64_t a1, uint64_t a2, const void *a3)
{
  BOOL v6 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEBUG)) {
    sub_1007561FC(a2, v6);
  }
  CFRetain(a3);
  id v7 = +[AudioDeviceManager sharedManager];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10030F9B4;
  block[3] = &unk_1009A12D0;
  void block[4] = a1;
  void block[5] = a2;
  void block[6] = a3;
  dispatch_async((dispatch_queue_t)[v7 getXpcQueue], block);
}

void sub_10030F9A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030F9B4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (uint64_t *)(a1 + 40);
  keys = *(char **)(a1 + 40);
  xpc_object_t values = (xpc_object_t)_CFXPCCreateXPCObjectFromCFObject();
  xpc_object_t v4 = xpc_dictionary_create((const char *const *)&keys, &values, 1uLL);
  sub_10030FA98(v2, 3, (uint64_t)v4);
  xpc_release(v4);
  if (values)
  {
    xpc_release(values);
  }
  else
  {
    id v5 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
      sub_100756274(v3, v5);
    }
  }
  CFRelease(*(CFTypeRef *)(a1 + 48));
}

void sub_10030FA98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v6 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEBUG)) {
    sub_1007562F0(a2, v6);
  }
  id v7 = +[AudioDeviceManager sharedManager];
  if (*(char *)(a1 + 31) < 0)
  {
    sub_10003B098(__p, *(void **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 8);
    uint64_t v9 = *(void *)(a1 + 24);
  }
  [v7 sendMsg:a2 withArgs:a3 uid:__p];
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10030FB64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

void sub_10030FB8C(uint64_t a1)
{
  uint64_t v2 = +[AudioDeviceManager sharedManager];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10030FC30;
  block[3] = &unk_100997528;
  void block[4] = a1;
  dispatch_async((dispatch_queue_t)[v2 getXpcQueue], block);
}

void sub_10030FC20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030FC30(uint64_t a1)
{
}

void sub_10030FC40(uint64_t a1)
{
  uint64_t v2 = (unsigned __int8 *)(a1 + 41);
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(a1 + 41));
  xpc_object_t v4 = qword_100A19E48;
  if ((v3 & 1) != 0 && os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Close called when Plugin device is already in closing state.", buf, 2u);
    xpc_object_t v4 = qword_100A19E48;
  }
  atomic_store(1u, v2);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending XpcAudioPluginDevice close", buf, 2u);
  }
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)(a1 + 40));
  if (v5)
  {
    sub_10030FA98(a1, 4, 0);
  }
  else
  {
    BOOL v6 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
      sub_100756368(v6);
    }
    id v7 = +[AudioDeviceManager sharedManager];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10030FDC4;
    block[3] = &unk_100997528;
    void block[4] = a1;
    dispatch_async((dispatch_queue_t)[v7 getXpcQueue], block);
  }
}

void sub_10030FDB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10030FDC4(uint64_t a1)
{
  return sub_10030FDCC(*(void *)(a1 + 32));
}

uint64_t sub_10030FDCC(uint64_t a1)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a1 + 41));
  unsigned __int8 v3 = qword_100A19E48;
  if ((v2 & 1) == 0 && os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "readyForDelete called when Plugin device isn't in closing state.", buf, 2u);
    unsigned __int8 v3 = qword_100A19E48;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned __int8 v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "XpcAudioPluginDevice is closing ready for delete", v5, 2u);
  }
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 72))(*(void *)(a1 + 32));
}

void sub_10030FEB4(uint64_t a1, xpc_object_t xdict)
{
  unsigned __int8 v3 = (unsigned __int8 *)(a1 + 40);
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)(a1 + 40));
  if (v4 & 1) == 0 || (unsigned __int8 v5 = atomic_load((unsigned __int8 *)(a1 + 41)), (v5))
  {
    int v10 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
      sub_1007563AC(v3, a1, v10);
    }
  }
  else
  {
    int64_t int64 = xpc_dictionary_get_int64(xdict, "kBTAudioMsgId");
    xpc_object_t value = xpc_dictionary_get_value(xdict, "kBTAudioMsgArgs");
    uint64_t v9 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEBUG)) {
      sub_100756448(int64, v9);
    }
    switch((int)int64)
    {
      case 3:
        v13[0] = _NSConcreteStackBlock;
        v13[1] = 3221225472;
        _OWORD v13[2] = sub_100310414;
        v13[3] = &unk_1009A54F0;
        v13[4] = a1;
        xpc_dictionary_apply(value, v13);
        break;
      case 5:
        sub_1003101CC(a1, value);
        break;
      case 6:
        (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
        break;
      case 7:
        (*(void (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
        break;
      case 9:
      case 10:
      case 11:
        sub_100310298(a1, int64);
        break;
      case 14:
        sub_100310314(a1);
        break;
      case 20:
        int v11 = qword_100A19E48;
        if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v13[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Received Uni-Bi Direction Transition", (uint8_t *)v13, 2u);
        }
        (*(void (**)(void))(**(void **)(a1 + 32) + 40))(*(void *)(a1 + 32));
        break;
      case 21:
        std::string v12 = qword_100A19E48;
        if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v13[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Received Bi-Uni Direction Transition", (uint8_t *)v13, 2u);
        }
        (*(void (**)(void))(**(void **)(a1 + 32) + 32))(*(void *)(a1 + 32));
        break;
      default:
        sub_100310398(a1, int64);
        break;
    }
  }
}

uint64_t sub_1003101CC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kBTAudioMsgArgDeviceSharedMemoryOutput");
  xpc_object_t v5 = xpc_dictionary_get_value(xdict, "kBTAudioMsgArgDeviceSharedMemoryInput");
  region = 0;
  if (value) {
    xpc_object_t value = (void *)xpc_shmem_map(value, &region);
  }
  uint64_t v9 = 0;
  if (v5)
  {
    size_t v6 = xpc_shmem_map(v5, &v9);
    id v7 = v9;
  }
  else
  {
    id v7 = 0;
    size_t v6 = 0;
  }
  return (*(uint64_t (**)(void, void *, void *, void *, size_t))(**(void **)(a1 + 32) + 8))(*(void *)(a1 + 32), region, value, v7, v6);
}

void sub_100310298(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4 = (const void *)_CFXPCCreateCFObjectFromXPCObject();
  (*(void (**)(void, uint64_t, const void *))(**(void **)(a1 + 32) + 48))(*(void *)(a1 + 32), a2, v4);

  CFRelease(v4);
}

void sub_100310314(uint64_t a1)
{
  CFBooleanRef v2 = (const __CFBoolean *)_CFXPCCreateCFObjectFromXPCObject();
  if (v2)
  {
    CFBooleanRef v3 = v2;
    BOOL v4 = CFBooleanGetValue(v2) != 0;
    (*(void (**)(void, BOOL))(**(void **)(a1 + 32) + 56))(*(void *)(a1 + 32), v4);
    CFRelease(v3);
  }
}

void sub_100310398(uint64_t a1, uint64_t a2)
{
  BOOL v4 = (const void *)_CFXPCCreateCFObjectFromXPCObject();
  (*(void (**)(void, uint64_t, const void *))(**(void **)(a1 + 32) + 88))(*(void *)(a1 + 32), a2, v4);

  CFRelease(v4);
}

uint64_t sub_100310414(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  BOOL v4 = (const void *)_CFXPCCreateCFObjectFromXPCObject();
  (***(void (****)(void, uint64_t, const void *))(v3 + 32))(*(void *)(v3 + 32), a2, v4);
  CFRelease(v4);
  return 1;
}

uint64_t sub_100310488(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 64))();
}

uint64_t sub_1003104B0(int a1, char *__s1, const char *a3, int a4)
{
  unsigned int v19 = 0;
  if (!strcmp(__s1, "00:00:00:00:00:00"))
  {
    BOOL v15 = qword_100A19EB8;
    uint64_t result = os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_FAULT);
    if (result)
    {
      sub_1007564C0(v15);
      return 0;
    }
  }
  else
  {
    if (!a1) {
      return 4294902295;
    }
    uint64_t result = 4294902295;
    if (a1 <= 1024)
    {
      v8.i32[0] = a1;
      uint8x8_t v10 = (uint8x8_t)vcnt_s8(v8);
      v10.i16[0] = vaddlv_u8(v10);
      if (v10.i32[0] <= 1u)
      {
        CFStringRef v11 = CFStringCreateWithCString(kCFAllocatorDefault, a3, 0x8000100u);
        if (v11)
        {
          CFStringRef v12 = v11;
          CFMutableArrayRef Mutable = (__CFDictionary *)sub_10031081C((int *)&v19, __s1, 0, 0);
          uint64_t v14 = qword_100A19EB8;
          if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 67109120;
            unsigned int v21 = v19;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "BTKCSetData calling _BTKCGetDataCopy, returned %d", buf, 8u);
          }
          if (v19 == -34019)
          {
            if (!Mutable) {
              goto LABEL_41;
            }
            goto LABEL_40;
          }
          if (!Mutable)
          {
            CFMutableArrayRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 3, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
            if (!Mutable)
            {
              unsigned int v19 = 4;
LABEL_41:
              CFRelease(v12);
              return v19;
            }
          }
          if (a1 > 63)
          {
            if (a1 <= 255)
            {
              if (a1 == 64)
              {
                CFStringRef v16 = @"MagicAccKey";
              }
              else
              {
                if (a1 != 128) {
                  goto LABEL_38;
                }
                CFStringRef v16 = @"MagicAccHint";
              }
            }
            else
            {
              switch(a1)
              {
                case 256:
                  CFStringRef v16 = @"MagicAccRachet";
                  break;
                case 512:
                  CFStringRef v16 = @"GuestAccIRK";
                  break;
                case 1024:
                  CFStringRef v16 = @"GuestAccEncKey";
                  break;
                default:
                  goto LABEL_38;
              }
            }
          }
          else
          {
            CFStringRef v16 = @"Pincode";
            switch(a1)
            {
              case 1:
                break;
              case 2:
                CFStringRef v16 = @"LinkKey";
                break;
              case 3:
              case 5:
              case 6:
              case 7:
                goto LABEL_38;
              case 4:
                CFStringRef v16 = @"LinkKeyType";
                break;
              case 8:
                CFStringRef v16 = @"LocalAddress";
                break;
              default:
                if (a1 == 16)
                {
                  CFStringRef v16 = @"MagicAccIRK";
                }
                else
                {
                  if (a1 != 32) {
                    goto LABEL_38;
                  }
                  CFStringRef v16 = @"MagicAccEncKey";
                }
                break;
            }
          }
          CFDictionarySetValue(Mutable, v16, v12);
LABEL_38:
          unsigned int v17 = sub_100310F24(__s1, 0, Mutable, 0, 0, a4, 1);
          unsigned int v19 = v17;
          __int16 v18 = qword_100A19EB8;
          if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 67109120;
            unsigned int v21 = v17;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "BTKCSetData calling _BTKCSetData, returned %d", buf, 8u);
          }
LABEL_40:
          CFRelease(Mutable);
          goto LABEL_41;
        }
        return 4294902295;
      }
    }
  }
  return result;
}

const void *sub_10031081C(int *a1, const char *a2, const __CFString *a3, int a4)
{
  CFTypeRef result = 0;
  CFStringRef v7 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionaryAddValue(Mutable, kSecClass, kSecClassGenericPassword);
  if (a3) {
    CFStringRef v9 = a3;
  }
  else {
    CFStringRef v9 = @"MobileBluetooth";
  }
  CFDictionaryAddValue(Mutable, kSecAttrService, v9);
  CFDictionaryAddValue(Mutable, kSecAttrAccount, v7);
  uint8x8_t v10 = (const void *)kSecUseSystemKeychain;
  CFDictionaryAddValue(Mutable, kSecUseSystemKeychain, kCFBooleanTrue);
  CFDictionaryAddValue(Mutable, kSecMatchLimit, kSecMatchLimitOne);
  CFDictionaryAddValue(Mutable, kSecReturnData, kCFBooleanTrue);
  if (a4) {
    CFBooleanRef v11 = kCFBooleanTrue;
  }
  else {
    CFBooleanRef v11 = kCFBooleanFalse;
  }
  CFDictionaryAddValue(Mutable, kSecAttrSynchronizable, v11);
  CFDictionaryAddValue(Mutable, kSecReturnAttributes, kCFBooleanTrue);
  OSStatus v12 = SecItemCopyMatching(Mutable, &result);
  int v13 = v12;
  if (!result || v12)
  {
    if (v12 == -25300)
    {
      int v29 = 0;
      int v13 = -25300;
LABEL_37:
      CFStringRef v19 = v7;
      goto LABEL_46;
    }
LABEL_34:
    uint64_t v30 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v42 = a2;
      __int16 v43 = 1024;
      int v44 = v13;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Failed to query keychain for device %{public}s with result %d", buf, 0x12u);
    }
    int v29 = 0;
    goto LABEL_37;
  }
  int8x16_t v38 = a1;
  CFTypeID TypeID = CFDictionaryGetTypeID();
  BOOL v15 = TypeID == CFGetTypeID(result);
  a1 = v38;
  if (!v15) {
    goto LABEL_34;
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)result, @"agrp");
  CFDataRef data = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)result, @"v_Data");
  CStringPtr = CFStringGetCStringPtr(Value, 0x8000100u);
  unsigned int v17 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 136446722;
    uint64_t v42 = a2;
    __int16 v43 = 1024;
    int v44 = 0;
    __int16 v45 = 2080;
    id v46 = CStringPtr;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "_BTKCGetDataCopy found keychain item for device %{public}s with result %d with accessgroup=%s", buf, 0x1Cu);
  }
  if (!Value
    || (v47.size_t length = CFStringGetLength(Value),
        v47.location = 0,
        CFStringCompareWithOptions(Value, @"com.apple.bluetooth", v47, 1uLL) == kCFCompareEqualTo))
  {
    a1 = v38;
    CFStringRef v19 = v7;
LABEL_39:
    CFPropertyListRef v28 = CFPropertyListCreateWithData(kCFAllocatorDefault, data, 2uLL, 0, 0);
LABEL_40:
    int v29 = v28;
    if (v28)
    {
      CFTypeID v31 = CFDictionaryGetTypeID();
      if (v31 != CFGetTypeID(v29))
      {
        unsigned int v32 = qword_100A19EB8;
        if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
          sub_100756504((uint64_t)a2, v29, v32);
        }
        CFRelease(v29);
        int v29 = 0;
      }
    }
    int v13 = 0;
    goto LABEL_46;
  }
  __int16 v18 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionaryAddValue(v18, kSecClass, kSecClassGenericPassword);
  CFDictionaryAddValue(v18, kSecAttrService, v9);
  CFStringRef v19 = v7;
  CFDictionaryAddValue(v18, kSecAttrAccount, v7);
  CFDictionaryAddValue(v18, v10, kCFBooleanTrue);
  unsigned int v20 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionaryAddValue(v20, kSecAttrAccessGroup, @"com.apple.bluetooth");
  OSStatus v21 = SecItemUpdate(v18, v20);
  CFRelease(v20);
  long long v22 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 136446466;
    uint64_t v42 = a2;
    __int16 v43 = 1024;
    int v44 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "updating keychain access group for device %{public}s with result %d", buf, 0x12u);
  }
  if (!v21)
  {
    a1 = v38;
    goto LABEL_39;
  }
  long long v23 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 136446466;
    uint64_t v42 = a2;
    __int16 v43 = 1024;
    int v44 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "failed to update keychain access group for device %{public}s with result %d", buf, 0x12u);
  }
  a1 = v38;
  if (v21 != -25299) {
    goto LABEL_39;
  }
  OSStatus v24 = SecItemDelete(v18);
  if (v18) {
    CFRelease(v18);
  }
  if (v24)
  {
    long long v25 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v42 = a2;
      __int16 v43 = 1024;
      int v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "failed to delete duplicate keychain item for device %{public}s with result %d", buf, 0x12u);
    }
  }
  if (result)
  {
    CFRelease(result);
    CFTypeRef result = 0;
  }
  CFDictionaryAddValue(Mutable, kSecAttrAccessGroup, @"com.apple.bluetooth");
  OSStatus v26 = SecItemCopyMatching(Mutable, &result);
  int v13 = v26;
  if (!result || v26)
  {
    if (v26 == -25300)
    {
      int v29 = 0;
      int v13 = -25300;
      goto LABEL_46;
    }
  }
  else
  {
    CFTypeID v27 = CFDictionaryGetTypeID();
    if (v27 == CFGetTypeID(result))
    {
      CFDataRef dataa = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)result, @"v_Data");
      CFPropertyListRef v28 = CFPropertyListCreateWithData(kCFAllocatorDefault, dataa, 2uLL, 0, 0);
      goto LABEL_40;
    }
  }
  int v34 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136446466;
    uint64_t v42 = a2;
    __int16 v43 = 1024;
    int v44 = v13;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Failed to query keychain with access group com.apple.bluetooth for device %{public}s with result %d", buf, 0x12u);
  }
  int v29 = 0;
LABEL_46:
  if (result) {
    CFRelease(result);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v19) {
    CFRelease(v19);
  }
  if (a1) {
    *a1 = v13;
  }
  return v29;
}

uint64_t sub_100310F24(const char *a1, const char *a2, const void *a3, const __CFString *a4, int a5, int a6, char a7)
{
  OSStatus v12 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 136446466;
    uint64_t v37 = a1;
    __int16 v38 = 1024;
    int v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "_BTKCSetData found keychain item for device %{public}s with result %d, updating", buf, 0x12u);
  }
  if (CFDictionaryGetCount((CFDictionaryRef)a3))
  {
    int v29 = a1;
    CFStringRef v13 = CFStringCreateWithCString(kCFAllocatorDefault, a1, 0x8000100u);
    CFDataRef value = CFPropertyListCreateData(kCFAllocatorDefault, a3, kCFPropertyListXMLFormat_v1_0, 0, 0);
    if (a2) {
      CFStringRef v14 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
    }
    else {
      CFStringRef v14 = 0;
    }
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFDictionaryAddValue(Mutable, kSecClass, kSecClassGenericPassword);
    if (a4) {
      CFStringRef v18 = a4;
    }
    else {
      CFStringRef v18 = @"MobileBluetooth";
    }
    CFStringRef v30 = v18;
    CFDictionaryAddValue(Mutable, kSecAttrService, v18);
    CFStringRef v32 = v13;
    CFDictionaryAddValue(Mutable, kSecAttrAccount, v13);
    CFDictionaryAddValue(Mutable, kSecAttrAccessGroup, @"com.apple.bluetooth");
    if (a5) {
      CFBooleanRef v19 = kCFBooleanTrue;
    }
    else {
      CFBooleanRef v19 = kCFBooleanFalse;
    }
    CFBooleanRef v31 = v19;
    CFDictionaryAddValue(Mutable, kSecAttrSynchronizable, v19);
    unsigned int v20 = (const void *)kSecUseSystemKeychain;
    CFDictionaryAddValue(Mutable, kSecUseSystemKeychain, kCFBooleanTrue);
    OSStatus v21 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFDictionaryAddValue(v21, kSecValueData, value);
    if (v14) {
      CFDictionaryAddValue(v21, kSecAttrLabel, v14);
    }
    if ((a7 & 1) == 0) {
      CFDictionaryAddValue(v21, kSecAttrSysBound, &off_1009E0DD0);
    }
    if (a6) {
      CFDictionaryAddValue(v21, kSecAttrAccessible, kSecAttrAccessibleUntilReboot);
    }
    if (a5) {
      CFDictionaryAddValue(v21, kSecAttrSyncViewHint, @"PCS-MasterKey");
    }
    long long v22 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v37 = v29;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "updating keychain data for device %{public}s", buf, 0xCu);
    }
    OSStatus v23 = SecItemUpdate(Mutable, v21);
    CFRelease(v21);
    CFRelease(Mutable);
    if (!v23)
    {
      uint64_t v16 = 0;
      CFStringRef v27 = v32;
      CFDataRef v25 = value;
      goto LABEL_44;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
      sub_100756634();
    }
    OSStatus v24 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFDictionaryAddValue(v24, kSecClass, kSecClassGenericPassword);
    CFDictionaryAddValue(v24, kSecAttrService, v30);
    CFDictionaryAddValue(v24, kSecAttrAccount, v32);
    CFDataRef v25 = value;
    CFDictionaryAddValue(v24, kSecValueData, value);
    OSStatus v26 = (const void **)&kSecAttrAccessibleAlwaysPrivate;
    if (!a5) {
      OSStatus v26 = (const void **)&kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate;
    }
    if (a6) {
      OSStatus v26 = (const void **)&kSecAttrAccessibleUntilReboot;
    }
    CFDictionaryAddValue(v24, kSecAttrAccessible, *v26);
    CFDictionaryAddValue(v24, v20, kCFBooleanTrue);
    CFDictionaryAddValue(v24, kSecAttrAccessGroup, @"com.apple.bluetooth");
    CFDictionaryAddValue(v24, kSecAttrSynchronizable, v31);
    if (a5) {
      CFDictionaryAddValue(v24, kSecAttrSyncViewHint, @"PCS-MasterKey");
    }
    if ((a7 & 1) == 0) {
      CFDictionaryAddValue(v24, kSecAttrSysBound, &off_1009E0DD0);
    }
    CFStringRef v27 = v32;
    if (v14) {
      CFDictionaryAddValue(v24, kSecAttrLabel, v14);
    }
    uint64_t v16 = SecItemAdd(v24, 0);
    if (v16 && os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR))
    {
      sub_1007565CC();
      if (!v24) {
        goto LABEL_44;
      }
    }
    else if (!v24)
    {
LABEL_44:
      if (v27) {
        CFRelease(v27);
      }
      if (v25) {
        CFRelease(v25);
      }
      if (v14) {
        CFRelease(v14);
      }
      return v16;
    }
    CFRelease(v24);
    goto LABEL_44;
  }
  BOOL v15 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "will not update an empty dict.", buf, 2u);
  }
  return 0;
}

uint64_t sub_1003114E4(int a1, const char *a2, char *a3, int *a4, const __CFDictionary **a5, int8x8_t a6)
{
  unsigned int v18 = 0;
  if (!a1) {
    return 4294902295;
  }
  uint64_t result = 4294902295;
  if (a1 <= 256)
  {
    a6.i32[0] = a1;
    uint8x8_t v8 = (uint8x8_t)vcnt_s8(a6);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.i32[0] <= 1u)
    {
      CFDictionaryRef v12 = *a5;
      if (*a5) {
        goto LABEL_5;
      }
      *a5 = (const __CFDictionary *)sub_10031081C((int *)&v18, a2, 0, 0);
      CFStringRef v14 = qword_100A19EB8;
      if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67109120;
        unsigned int v20 = v18;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "BTKCGetData calling _BTKCGetDataCopy, returned %d", buf, 8u);
      }
      uint64_t result = 4294933277;
      if (v18 != -34019)
      {
        CFDictionaryRef v12 = *a5;
        if (!*a5)
        {
          *a3 = 0;
          *a4 = 0;
          return 4294902294;
        }
LABEL_5:
        if (a1 <= 31)
        {
          CFStringRef v13 = @"Pincode";
          switch(a1)
          {
            case 1:
              break;
            case 2:
              CFStringRef v13 = @"LinkKey";
              break;
            case 3:
            case 5:
            case 6:
            case 7:
              goto LABEL_30;
            case 4:
              CFStringRef v13 = @"LinkKeyType";
              break;
            case 8:
              CFStringRef v13 = @"LocalAddress";
              break;
            default:
              if (a1 != 16) {
                goto LABEL_30;
              }
              CFStringRef v13 = @"MagicAccIRK";
              break;
          }
LABEL_27:
          CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v12, v13);
          if (Value)
          {
            CFStringRef v16 = Value;
            CFTypeID TypeID = CFStringGetTypeID();
            if (TypeID == CFGetTypeID(v16))
            {
              CFStringGetCString(v16, a3, *a4, 0x8000100u);
              *a4 = strlen(a3);
              return v18;
            }
          }
          goto LABEL_30;
        }
        if (a1 > 127)
        {
          if (a1 == 128)
          {
            CFStringRef v13 = @"MagicAccHint";
            goto LABEL_27;
          }
          if (a1 == 256)
          {
            CFStringRef v13 = @"MagicAccRachet";
            goto LABEL_27;
          }
        }
        else
        {
          if (a1 == 32)
          {
            CFStringRef v13 = @"MagicAccEncKey";
            goto LABEL_27;
          }
          if (a1 == 64)
          {
            CFStringRef v13 = @"MagicAccKey";
            goto LABEL_27;
          }
        }
LABEL_30:
        *a3 = 0;
        *a4 = 0;
        return 155;
      }
    }
  }
  return result;
}

uint64_t sub_100311764(char *a1, unsigned int a2)
{
  unsigned int v17 = 0;
  BOOL v4 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109634;
    unsigned int v19 = a2;
    __int16 v20 = 1040;
    int v21 = 6;
    __int16 v22 = 2096;
    OSStatus v23 = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Deleting keychain data (mask=%02x) for %{bluetooth:BD_ADDR}.6P)", buf, 0x18u);
  }
  xpc_object_t v5 = (__CFDictionary *)sub_10031081C((int *)&v17, a1, 0, 0);
  size_t v6 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    unsigned int v19 = v17;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "BTKCDeleteData calling _BTKCGetDataCopy, returned %d", buf, 8u);
  }
  if (v17 == -34019)
  {
    if (!v5) {
      return 4294933277;
    }
    goto LABEL_42;
  }
  if (!v17 && !v5)
  {
    uint8x8_t v8 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
      sub_10075669C(v8, v9, v10, v11, v12, v13, v14, v15);
    }
    return 4294902294;
  }
  if (!v5) {
    return 4294902294;
  }
  if (a2)
  {
    CFDictionaryRemoveValue(v5, @"Pincode");
    if ((a2 & 2) == 0)
    {
LABEL_15:
      if ((a2 & 4) == 0) {
        goto LABEL_16;
      }
      goto LABEL_32;
    }
  }
  else if ((a2 & 2) == 0)
  {
    goto LABEL_15;
  }
  CFDictionaryRemoveValue(v5, @"LinkKey");
  if ((a2 & 4) == 0)
  {
LABEL_16:
    if ((a2 & 0x10) == 0) {
      goto LABEL_17;
    }
    goto LABEL_33;
  }
LABEL_32:
  CFDictionaryRemoveValue(v5, @"LinkKeyType");
  if ((a2 & 0x10) == 0)
  {
LABEL_17:
    if ((a2 & 0x20) == 0) {
      goto LABEL_18;
    }
    goto LABEL_34;
  }
LABEL_33:
  CFDictionaryRemoveValue(v5, @"MagicAccIRK");
  if ((a2 & 0x20) == 0)
  {
LABEL_18:
    if ((a2 & 0x40) == 0) {
      goto LABEL_19;
    }
    goto LABEL_35;
  }
LABEL_34:
  CFDictionaryRemoveValue(v5, @"MagicAccEncKey");
  if ((a2 & 0x40) == 0)
  {
LABEL_19:
    if ((a2 & 0x80) == 0) {
      goto LABEL_20;
    }
    goto LABEL_36;
  }
LABEL_35:
  CFDictionaryRemoveValue(v5, @"MagicAccKey");
  if ((a2 & 0x80) == 0)
  {
LABEL_20:
    if ((a2 & 0x100) == 0) {
      goto LABEL_21;
    }
    goto LABEL_37;
  }
LABEL_36:
  CFDictionaryRemoveValue(v5, @"MagicAccHint");
  if ((a2 & 0x100) == 0)
  {
LABEL_21:
    if ((a2 & 0x200) == 0) {
      goto LABEL_22;
    }
    goto LABEL_38;
  }
LABEL_37:
  CFDictionaryRemoveValue(v5, @"MagicAccRachet");
  if ((a2 & 0x200) == 0)
  {
LABEL_22:
    if ((a2 & 0x400) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
LABEL_38:
  CFDictionaryRemoveValue(v5, @"GuestAccIRK");
  if ((a2 & 0x400) != 0) {
LABEL_23:
  }
    CFDictionaryRemoveValue(v5, @"GuestAccEncKey");
LABEL_24:
  if (CFDictionaryGetCount(v5) == 1 && CFDictionaryContainsKey(v5, @"LocalAddress")) {
    CFDictionaryRemoveValue(v5, @"LocalAddress");
  }
  if (CFDictionaryGetCount(v5)) {
    unsigned int v16 = sub_100310F24(a1, 0, v5, 0, 0, 0, 1);
  }
  else {
    unsigned int v16 = sub_100311A64(a1, 0, 0);
  }
  unsigned int v17 = v16;
LABEL_42:
  CFRelease(v5);
  return v17;
}

uint64_t sub_100311A64(char *cStr, const __CFString *a2, int a3)
{
  CFStringRef v6 = CFStringCreateWithCString(kCFAllocatorDefault, cStr, 0x8000100u);
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    uint64_t v11 = 0;
    if (!v6) {
      return v11;
    }
    goto LABEL_12;
  }
  uint8x8_t v8 = Mutable;
  CFDictionaryAddValue(Mutable, kSecClass, kSecClassGenericPassword);
  if (a2) {
    CFStringRef v9 = a2;
  }
  else {
    CFStringRef v9 = @"MobileBluetooth";
  }
  CFDictionaryAddValue(v8, kSecAttrService, v9);
  CFDictionaryAddValue(v8, kSecAttrAccount, v6);
  if (a3) {
    CFBooleanRef v10 = kCFBooleanTrue;
  }
  else {
    CFBooleanRef v10 = kCFBooleanFalse;
  }
  CFDictionaryAddValue(v8, kSecAttrSynchronizable, v10);
  CFDictionaryAddValue(v8, kSecUseSystemKeychain, kCFBooleanTrue);
  uint64_t v11 = SecItemDelete(v8);
  if (v11)
  {
    uint64_t v12 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = 136446722;
      uint64_t v15 = cStr;
      __int16 v16 = 1024;
      int v17 = v11;
      __int16 v18 = 1024;
      int v19 = a3;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Failed to remove item from keychain for device %{public}s with result %d sync=%d", (uint8_t *)&v14, 0x18u);
    }
  }
  CFRelease(v8);
  if (v6) {
LABEL_12:
  }
    CFRelease(v6);
  return v11;
}

uint64_t sub_100311C54(void **a1)
{
  CFTypeRef result = 0;
  *(_OWORD *)__int16 buffer = 0u;
  long long v33 = 0u;
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable) {
    return 0;
  }
  uint64_t v3 = Mutable;
  CFDictionaryAddValue(Mutable, kSecClass, kSecClassGenericPassword);
  CFDictionaryAddValue(v3, kSecAttrService, @"MobileBluetooth");
  CFDictionaryAddValue(v3, kSecMatchLimit, kSecMatchLimitAll);
  CFDictionaryAddValue(v3, kSecReturnAttributes, kCFBooleanTrue);
  CFDictionaryAddValue(v3, kSecUseSystemKeychain, kCFBooleanTrue);
  OSStatus v4 = SecItemCopyMatching(v3, &result);
  CFTypeRef v5 = result;
  if (!v4 && result)
  {
    CFIndex Count = CFArrayGetCount((CFArrayRef)result);
    if (Count)
    {
      CFIndex v7 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)result, v7);
        if (ValueAtIndex)
        {
          CFStringRef Value = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, kSecAttrAccount);
          if (CFStringGetCString(Value, buffer, 32, 0x8000100u))
          {
            __int16 v28 = 0;
            int v27 = 0;
            if (!sub_1004A82DC((uint64_t)&v27, (unsigned __int8 *)buffer)) {
              goto LABEL_19;
            }
            if (!(_BYTE)v27)
            {
              uint64_t v14 = 1;
              while (v14 != 6)
              {
                if (*((unsigned __int8 *)&v27 + v14++))
                {
                  if ((unint64_t)(v14 - 2) <= 4) {
                    goto LABEL_10;
                  }
                  break;
                }
              }
LABEL_19:
              __int16 v16 = qword_100A19EB8;
              if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)std::string buf = 136446210;
                CFBooleanRef v31 = buffer;
                _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Read invalid address %{public}s from keychain, not creating a device", buf, 0xCu);
              }
              goto LABEL_36;
            }
LABEL_10:
            if (qword_1009F7F00 != -1) {
              dispatch_once(&qword_1009F7F00, &stru_1009A5510);
            }
            uint64_t v10 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v27, 1);
            if (!sub_1004A8390((uint64_t)a1, v10))
            {
              uint64_t v12 = (uint64_t *)a1[1];
              unint64_t v11 = (unint64_t)a1[2];
              if ((unint64_t)v12 >= v11)
              {
                uint64_t v17 = ((char *)v12 - (unsigned char *)*a1) >> 3;
                if ((unint64_t)(v17 + 1) >> 61) {
                  abort();
                }
                uint64_t v18 = v11 - (void)*a1;
                uint64_t v19 = v18 >> 2;
                if (v18 >> 2 <= (unint64_t)(v17 + 1)) {
                  uint64_t v19 = v17 + 1;
                }
                if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v20 = v19;
                }
                if (v20) {
                  int v21 = (char *)sub_1000405F8((uint64_t)(a1 + 2), v20);
                }
                else {
                  int v21 = 0;
                }
                __int16 v22 = (uint64_t *)&v21[8 * v17];
                *__int16 v22 = v10;
                uint64_t v13 = v22 + 1;
                OSStatus v24 = (char *)*a1;
                OSStatus v23 = (char *)a1[1];
                if (v23 != *a1)
                {
                  do
                  {
                    uint64_t v25 = *((void *)v23 - 1);
                    v23 -= 8;
                    *--__int16 v22 = v25;
                  }
                  while (v23 != v24);
                  OSStatus v23 = (char *)*a1;
                }
                *a1 = v22;
                a1[1] = v13;
                a1[2] = &v21[8 * v20];
                if (v23) {
                  operator delete(v23);
                }
              }
              else
              {
                *uint64_t v12 = v10;
                uint64_t v13 = v12 + 1;
              }
              a1[1] = v13;
            }
          }
        }
LABEL_36:
        if (++v7 == Count) {
          goto LABEL_41;
        }
      }
    }
    goto LABEL_41;
  }
  if (v4 != -25300)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
      sub_10075670C();
    }
LABEL_41:
    CFTypeRef v5 = result;
  }
  if (v5) {
    CFRelease(v5);
  }
  CFRelease(v3);
  return 0;
}

CFStringRef sub_10031200C(int a1)
{
  switch(a1)
  {
    case 0:
    case 5:
      CFAllocatorRef v1 = kCFAllocatorDefault;
      CFStringRef v2 = @"Long-term Key";
      goto LABEL_16;
    case 1:
    case 6:
      CFAllocatorRef v1 = kCFAllocatorDefault;
      CFStringRef v2 = @"Long-term Key Length";
      goto LABEL_16;
    case 2:
    case 7:
      CFAllocatorRef v1 = kCFAllocatorDefault;
      CFStringRef v2 = @"Long-term Key Type";
      goto LABEL_16;
    case 3:
    case 8:
      CFAllocatorRef v1 = kCFAllocatorDefault;
      CFStringRef v2 = @"Encrypted Diversifier";
      goto LABEL_16;
    case 4:
    case 9:
      CFAllocatorRef v1 = kCFAllocatorDefault;
      CFStringRef v2 = @"Random Number";
      goto LABEL_16;
    case 10:
      CFAllocatorRef v1 = kCFAllocatorDefault;
      CFStringRef v2 = @"Remote IRK";
      goto LABEL_16;
    case 12:
      CFAllocatorRef v1 = kCFAllocatorDefault;
      CFStringRef v2 = @"Remote CSRK";
      goto LABEL_16;
    case 13:
      CFAllocatorRef v1 = kCFAllocatorDefault;
      CFStringRef v2 = @"Local CSRK";
      goto LABEL_16;
    case 14:
      CFAllocatorRef v1 = kCFAllocatorDefault;
      CFStringRef v2 = @"Local Sign Counter";
      goto LABEL_16;
    case 15:
      CFAllocatorRef v1 = kCFAllocatorDefault;
      CFStringRef v2 = @"Remote Sign Counter";
      goto LABEL_16;
    case 16:
      CFAllocatorRef v1 = kCFAllocatorDefault;
      CFStringRef v2 = @"Derive LKLTK";
LABEL_16:
      CFStringRef result = CFStringCreateCopy(v1, v2);
      break;
    default:
      if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_FAULT)) {
        sub_100756774();
      }
      CFStringRef result = 0;
      break;
  }
  return result;
}

id sub_1003121EC(const void *a1, int a2, const void *a3)
{
  int v29 = +[NSMutableDictionary dictionary];
  CFTypeRef result = 0;
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFIndex v7 = Mutable;
  if (Mutable)
  {
    CFDictionaryAddValue(Mutable, kSecClass, kSecClassGenericPassword);
    CFDictionaryAddValue(v7, kSecAttrService, a1);
    CFDictionaryAddValue(v7, kSecMatchLimit, kSecMatchLimitAll);
    CFDictionaryAddValue(v7, kSecReturnAttributes, kCFBooleanTrue);
    CFDictionaryAddValue(v7, kSecUseSystemKeychain, kCFBooleanTrue);
    if (a2) {
      CFBooleanRef v8 = kCFBooleanTrue;
    }
    else {
      CFBooleanRef v8 = kCFBooleanFalse;
    }
    CFDictionaryAddValue(v7, kSecAttrSynchronizable, v8);
    OSStatus v9 = SecItemCopyMatching(v7, &result);
    if (v9 || !result)
    {
      int v27 = qword_100A19EB8;
      if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67109120;
        LODWORD(v36) = v9;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Failed to query keychain with result %d", buf, 8u);
      }
    }
    else
    {
      CFIndex Count = CFArrayGetCount((CFArrayRef)result);
      if (Count >= 1)
      {
        for (CFIndex i = 0; i != Count; ++i)
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)result, i);
          CFDictionaryRef v13 = ValueAtIndex;
          if (ValueAtIndex)
          {
            CFStringRef Value = (void *)CFDictionaryGetValue(ValueAtIndex, kSecAttrAccount);
            if (Value)
            {
              id v15 = Value;
              unint64_t v16 = sub_1006ADA24(v15);
              if (v16)
              {
                if (a3)
                {
                  uint64_t v17 = qword_100A19EB8;
                  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_FAULT))
                  {
                    *(_DWORD *)std::string buf = 134217984;
                    id v36 = a3;
                    _os_log_fault_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Local address is not zero!! 0x%llx", buf, 0xCu);
                  }
                }
                uint64_t v18 = CFDictionaryGetValue(v13, kSecAttrLabel);
                if (v18
                  && (id v19 = [objc_alloc((Class)NSUUID) initWithUUIDString:v18]) != 0)
                {
                  unint64_t v20 = +[NSNumber numberWithUnsignedLongLong:v16];
                  [v29 setObject:v20 forKey:v19];
                }
                else
                {
                  __int16 v22 = qword_100A19EB8;
                  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)std::string buf = 138543362;
                    id v36 = v18;
                    _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Unable to build UUID from string %{public}@", buf, 0xCu);
                  }
                }

                a3 = 0;
              }
              else
              {
                OSStatus v23 = qword_100A19EB8;
                if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
                  sub_10075686C(&v32, v33, v23);
                }
              }
            }
            else
            {
              int v21 = qword_100A19EB8;
              if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_FAULT)) {
                sub_10075682C(&v30, v31, v21);
              }
            }
          }
        }
      }
    }
    if (result) {
      CFRelease(result);
    }
    CFRelease(v7);
    OSStatus v26 = v29;
    id v25 = v29;
  }
  else
  {
    OSStatus v24 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
      sub_1007567E8(v24);
    }
    id v25 = 0;
    OSStatus v26 = v29;
  }

  return v25;
}

void sub_10031264C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

id sub_100312698(const void *a1)
{
  return sub_1003121EC(@"BluetoothLE", 0, a1);
}

id sub_1003126AC()
{
  return sub_1003121EC(@"BluetoothLESync", 1, 0);
}

uint64_t sub_1003126C0(uint64_t a1, void *a2, int a3, const void **a4)
{
  id v6 = a2;
  if (CFDictionaryGetCount((CFDictionaryRef)*a4) < 1)
  {
    sub_10004BDF8();
    if (v13 >= 0) {
      uint64_t v10 = (char *)__p;
    }
    else {
      uint64_t v10 = (char *)__p[0];
    }
    uint64_t v9 = sub_100311A64(v10, @"BluetoothLE", a3);
  }
  else
  {
    CFIndex v7 = __p;
    sub_10004BDF8();
    if (v13 < 0) {
      CFIndex v7 = (void **)__p[0];
    }
    id v8 = [v6 UUIDString];
    uint64_t v9 = sub_100310F24((const char *)v7, (const char *)[v8 UTF8String], *a4, @"BluetoothLE", a3, 0, 1);
  }
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  CFRelease(@"BluetoothLE");

  return v9;
}

void sub_1003127D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100312818(uint64_t a1, void *a2, unsigned int a3, const UInt8 *a4, CFIndex a5, int a6, const void **a7, int a8)
{
  id v36 = a2;
  unsigned int v37 = 0;
  if (((a3 == 10) & a6) != 0) {
    CFStringRef v14 = @"BluetoothLESync";
  }
  else {
    CFStringRef v14 = @"BluetoothLE";
  }
  if (!a4)
  {
    id v15 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_FAULT)) {
      sub_1007568AC(v15, v16, v17, v18, v19, v20, v21, v22);
    }
  }
  CFStringRef v23 = sub_10031200C(a3);
  CFMutableArrayRef Mutable = (__CFDictionary *)*a7;
  if (!*a7)
  {
    sub_10004BDF8();
    if (v39 >= 0) {
      OSStatus v26 = __p;
    }
    else {
      OSStatus v26 = (void **)__p[0];
    }
    *a7 = sub_10031081C((int *)&v37, (const char *)v26, v14, a6);
    if (v39 < 0) {
      operator delete(__p[0]);
    }
    int v27 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = v37;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "BTKCSetLEData calling _BTKCGetDataCopy, returned %d", (uint8_t *)__p, 8u);
    }
    if (v37 == -34019) {
      goto LABEL_51;
    }
    CFMutableArrayRef Mutable = (__CFDictionary *)*a7;
    if (!*a7)
    {
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 6, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      *a7 = Mutable;
      if (!Mutable) {
        goto LABEL_10;
      }
    }
  }
  if (a5)
  {
    CFDataRef v25 = CFDataCreate(kCFAllocatorDefault, a4, a5);
    if (!v25)
    {
LABEL_10:
      unsigned int v37 = 4;
      goto LABEL_51;
    }
  }
  else
  {
    CFDictionaryRemoveValue(Mutable, v23);
    CFDataRef v25 = 0;
  }
  if (a3 >= 5)
  {
    if (a3 - 5 > 4)
    {
      CFStringRef Value = (__CFDictionary *)*a7;
      if (a5)
      {
        CFDictionarySetValue(Value, v23, v25);
        goto LABEL_38;
      }
LABEL_37:
      CFDictionaryRemoveValue(Value, v23);
LABEL_38:
      if (a8)
      {
        if (CFDictionaryGetCount((CFDictionaryRef)*a7) < 1)
        {
          sub_10004BDF8();
          if (v39 >= 0) {
            long long v33 = (char *)__p;
          }
          else {
            long long v33 = (char *)__p[0];
          }
          unsigned int v37 = sub_100311A64(v33, v14, a6);
        }
        else
        {
          CFBooleanRef v31 = __p;
          sub_10004BDF8();
          if (v39 < 0) {
            CFBooleanRef v31 = (void **)__p[0];
          }
          id v32 = [v36 UUIDString];
          unsigned int v37 = sub_100310F24((const char *)v31, (const char *)[v32 UTF8String], *a7, v14, a6, 0, 1);
        }
        if (v39 < 0) {
          operator delete(__p[0]);
        }
      }
      if (v25) {
        goto LABEL_50;
      }
      goto LABEL_51;
    }
    CFStringRef v28 = @"Local Encryption";
  }
  else
  {
    CFStringRef v28 = @"Remote Encryption";
  }
  CFStringRef Value = (__CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)*a7, v28);
  uint8_t v30 = Value;
  if (!a4 || !a5)
  {
    if (!Value) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  if (Value)
  {
LABEL_32:
    CFDictionarySetValue(v30, v23, v25);
    goto LABEL_38;
  }
  uint8_t v30 = CFDictionaryCreateMutable(kCFAllocatorDefault, 4, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (v30)
  {
    CFDictionarySetValue((CFMutableDictionaryRef)*a7, v28, v30);
    CFRelease(v30);
    goto LABEL_32;
  }
  unsigned int v37 = 4;
  if (v25) {
LABEL_50:
  }
    CFRelease(v25);
LABEL_51:
  if (v23) {
    CFRelease(v23);
  }
  CFRelease(v14);
  uint64_t v34 = v37;

  return v34;
}

void sub_100312BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100312C44(uint64_t a1, void *a2, unsigned int a3, const UInt8 *a4, CFIndex a5, int a6)
{
  id v11 = a2;
  CFTypeRef cf = 0;
  uint64_t v12 = sub_100312818(a1, v11, a3, a4, a5, a6, &cf, 1);
  if (cf) {
    CFRelease(cf);
  }

  return v12;
}

void sub_100312CD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100312CE4(uint64_t a1, unsigned int a2, uint64_t a3, _DWORD *a4, const __CFString *a5, int a6, const __CFDictionary **a7)
{
  CFStringRef v13 = sub_10031200C(a2);
  unsigned int v29 = 0;
  if (!a3)
  {
    CFStringRef v14 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_FAULT)) {
      sub_1007568AC(v14, v15, v16, v17, v18, v19, v20, v21);
    }
  }
  *a4 = 0;
  CFDictionaryRef v22 = *a7;
  if (*a7)
  {
    CFStringRef v23 = qword_100A19EB8;
    if (!os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_16;
    }
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "_BTKCCopyLEData using cached dictionary", buf, 2u);
LABEL_15:
    CFDictionaryRef v22 = *a7;
    if (!*a7) {
      goto LABEL_24;
    }
LABEL_16:
    if (a2 >= 5)
    {
      if (a2 - 5 > 4)
      {
LABEL_21:
        CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v22, v13);
        if (Value && CFDataGetLength(Value)) {
          operator new[]();
        }
        goto LABEL_24;
      }
      CFStringRef v26 = @"Local Encryption";
    }
    else
    {
      CFStringRef v26 = @"Remote Encryption";
    }
    CFDictionaryRef v22 = (const __CFDictionary *)CFDictionaryGetValue(v22, v26);
    if (!v22) {
      goto LABEL_24;
    }
    goto LABEL_21;
  }
  sub_10004BDF8();
  if (v31 >= 0) {
    OSStatus v24 = buf;
  }
  else {
    OSStatus v24 = *(uint8_t **)buf;
  }
  *a7 = (const __CFDictionary *)sub_10031081C((int *)&v29, (const char *)v24, a5, a6);
  if (v31 < 0) {
    operator delete(*(void **)buf);
  }
  CFDataRef v25 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v29;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "_BTKCCopyLEData calling _BTKCGetDataCopy, returned %d", buf, 8u);
  }
  if (v29 != -34019) {
    goto LABEL_15;
  }
LABEL_24:
  if (v13) {
    CFRelease(v13);
  }
  return v29;
}

void sub_100312F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100312F6C(uint64_t a1, unsigned int a2, uint64_t a3, _DWORD *a4, const __CFString *a5, int a6)
{
  CFTypeRef cf = 0;
  uint64_t v6 = sub_100312CE4(a1, a2, a3, a4, a5, a6, (const __CFDictionary **)&cf);
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t sub_100312FB0(uint64_t result, unsigned int a2, uint64_t a3, _DWORD *a4, _DWORD *a5, int a6, const __CFDictionary **a7)
{
  int v10 = 0;
  if (a3)
  {
    if (a6) {
      CFStringRef v9 = @"BluetoothLESync";
    }
    else {
      CFStringRef v9 = @"BluetoothLE";
    }
    CFTypeRef result = sub_100312CE4(result, a2, a3, &v10, v9, a6, a7);
    *a4 = v10;
    *a5 = result;
  }
  return result;
}

void sub_100313010(uint64_t a1, unsigned int a2, uint64_t a3, _DWORD *a4, _DWORD *a5, uint64_t a6, _DWORD *a7, _DWORD *a8)
{
  int v27 = 0;
  if (a3 && a4)
  {
    int v16 = sub_100312F6C(a1, a2, a3, &v27, @"BluetoothLE", 0);
LABEL_9:
    *a4 = v27;
    goto LABEL_10;
  }
  if (a6 && a7
    || (uint64_t v17 = qword_100A19EB8, !os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_FAULT)))
  {
    if (!a3) {
      goto LABEL_12;
    }
  }
  else
  {
    sub_100756924(v17, v18, v19, v20, v21, v22, v23, v24);
    if (!a3) {
      goto LABEL_12;
    }
  }
  int v16 = sub_100312F6C(a1, a2, a3, &v27, @"BluetoothLE", 0);
  if (a4) {
    goto LABEL_9;
  }
LABEL_10:
  if (a5) {
    *a5 = v16;
  }
LABEL_12:
  if (a6)
  {
    int v25 = sub_100312F6C(a1, a2, a6, &v27, @"BluetoothLESync", 1);
    CFStringRef v26 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109120;
      int v29 = v25;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "BTKCCopyLEData is calling _BTKCCopyLEData, returned %d", buf, 8u);
    }
    if (a7) {
      *a7 = v27;
    }
    if (a8) {
      *a8 = v25;
    }
  }
}

uint64_t sub_1003131C8(uint64_t a1, uint64_t a2, int a3)
{
  sub_10004BDF8();
  if (v11 >= 0) {
    OSStatus v4 = (char *)__p;
  }
  else {
    OSStatus v4 = (char *)__p[0];
  }
  uint64_t v5 = sub_100311A64(v4, @"BluetoothLE", 0);
  uint64_t v6 = v5;
  if (v11 < 0)
  {
    operator delete(__p[0]);
    if (!v6) {
      goto LABEL_10;
    }
  }
  else if (!v5)
  {
    goto LABEL_10;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
    sub_10075699C();
  }
LABEL_10:
  if (a3)
  {
    sub_10004BDF8();
    if (v11 >= 0) {
      CFIndex v7 = (char *)__p;
    }
    else {
      CFIndex v7 = (char *)__p[0];
    }
    uint64_t v6 = sub_100311A64(v7, @"BluetoothLESync", 1);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    if (v6)
    {
      id v8 = qword_100A19EB8;
      if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(__p[0]) = 67109120;
        HIDWORD(__p[0]) = v6;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Could not erase LE Data from synced keychain with result %d", (uint8_t *)__p, 8u);
      }
    }
  }
  return v6;
}

void sub_10031333C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100313364(int a1, UInt8 *a2, uint64_t a3, unsigned int *a4)
{
  unsigned int v15 = 0;
  if ((a1 - 18) > 0xFFFFFFF1)
  {
    if ((a1 - 4) >= 0xE) {
      return 4294902292;
    }
    uint64_t v6 = off_1009A5530[a1 - 4];
LABEL_10:
    CFDictionaryRef v7 = (const __CFDictionary *)sub_10031081C((int *)&v15, v6, @"BluetoothGlobal", 0);
    unsigned int v8 = v15;
    if (v15)
    {
      CFStringRef v9 = qword_100A19EB8;
      if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 67109120;
        unsigned int v17 = v8;
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "_BTKCGetDataCopy returned %d", buf, 8u);
        unsigned int v8 = v15;
      }
      if (v8 == -34019)
      {
        if (!v7) {
          return 4294933277;
        }
        goto LABEL_23;
      }
    }
    if (v7)
    {
      CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v7, @"KEY");
      if (Value && (CFDataRef v12 = Value, TypeID = CFDataGetTypeID(), TypeID == CFGetTypeID(v12)))
      {
        unsigned int Length = CFDataGetLength(v12);
        *a4 = Length;
        if (Length)
        {
          v18.size_t length = Length;
          v18.location = 0;
          CFDataGetBytes(v12, v18, a2);
        }
      }
      else
      {
        unsigned int v15 = -65004;
      }
LABEL_23:
      CFRelease(v7);
      return v15;
    }
    return 4294902292;
  }
  switch(a1)
  {
    case 1:
      uint64_t v6 = "Encryption Root";
      goto LABEL_10;
    case 2:
      uint64_t v6 = "Identity Root";
      goto LABEL_10;
    case 19:
      uint64_t v6 = "Non Connectable identity address";
      goto LABEL_10;
  }
  return 4294902295;
}

uint64_t sub_100313540(unsigned int a1, const UInt8 *a2, unsigned int a3)
{
  if (a1 - 18 > 0xFFFFFFF1 || (uint64_t v6 = 4294902295, a1 <= 0x13) && ((1 << a1) & 0x80006) != 0)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (Mutable)
    {
      unsigned int v8 = Mutable;
      CFDataRef v9 = CFDataCreate(kCFAllocatorDefault, a2, a3);
      if (v9)
      {
        CFDataRef v10 = v9;
        CFDictionarySetValue(v8, @"KEY", v9);
        uint64_t v6 = 0;
        switch(a1)
        {
          case 1u:
            char v11 = "Encryption Root";
            goto LABEL_17;
          case 2u:
            char v11 = "Identity Root";
            goto LABEL_17;
          case 4u:
            char v11 = "Cloud Master Key Root";
            goto LABEL_17;
          case 5u:
            char v11 = "Cloud Private Key Root";
            goto LABEL_17;
          case 6u:
            char v11 = "Cloud Public Key Root";
            goto LABEL_17;
          case 7u:
            char v11 = "Cloud Nonce Root";
            goto LABEL_17;
          case 8u:
            char v11 = "Identity Root Key";
            goto LABEL_17;
          case 9u:
            char v11 = "Cloud FC Address";
LABEL_17:
            CFDataRef v12 = v8;
            char v13 = 1;
            goto LABEL_27;
          case 0xAu:
            char v11 = "CT TTK BUFF";
            goto LABEL_26;
          case 0xBu:
            char v11 = "CT TKPeriod";
            goto LABEL_26;
          case 0xCu:
            char v11 = "CT Last RPI And Address";
            goto LABEL_26;
          case 0xDu:
            char v11 = "CT TEK BUFF V2 LEN";
            goto LABEL_26;
          case 0xEu:
            char v11 = "CT TEK BUFF V2";
            goto LABEL_26;
          case 0xFu:
            char v11 = "Local Device Identifier";
            goto LABEL_26;
          case 0x11u:
            char v11 = "Non Connectable identity root";
            goto LABEL_26;
          case 0x13u:
            char v11 = "Non Connectable identity address";
LABEL_26:
            CFDataRef v12 = v8;
            char v13 = 0;
LABEL_27:
            uint64_t v6 = sub_100310F24(v11, 0, v12, @"BluetoothGlobal", 0, 0, v13);
            break;
          default:
            break;
        }
        CFRelease(v10);
      }
      else
      {
        uint64_t v6 = 4;
      }
      CFRelease(v8);
    }
    else
    {
      return 4;
    }
  }
  return v6;
}

uint64_t sub_1003137A0(int a1)
{
  if (a1 == 4) {
    return sub_100311A64("Cloud Master Key Root", @"BluetoothGlobal", 0);
  }
  else {
    return 4294902295;
  }
}

uint64_t sub_1003137C8(const void *a1)
{
  CFStringRef v2 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 138412290;
    CFDataRef v10 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Deleting all keychain data for service:%@", (uint8_t *)&v9, 0xCu);
  }
  if (a1)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (Mutable)
    {
      OSStatus v4 = Mutable;
      CFDictionaryAddValue(Mutable, kSecClass, kSecClassGenericPassword);
      CFDictionaryAddValue(v4, kSecAttrService, a1);
      CFDictionaryAddValue(v4, kSecAttrSynchronizable, kCFBooleanFalse);
      CFDictionaryAddValue(v4, kSecUseSystemKeychain, kCFBooleanTrue);
      CFDictionaryAddValue(v4, kSecAttrAccessGroup, @"com.apple.bluetooth");
      do
        uint64_t v5 = SecItemDelete(v4);
      while (!v5);
      uint64_t v6 = v5;
      CFRelease(v4);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    CFDictionaryRef v7 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
      sub_100756A04(v7);
    }
    return 3;
  }
  return v6;
}

uint64_t sub_100313980()
{
  return 0;
}

void sub_1003139BC(id a1)
{
}

void sub_100313A00()
{
}

void sub_100313A3C(void *a1, uint64_t a2, __int16 a3)
{
  uint64_t v6 = sub_1002CCCF8((uint64_t)a1, "HFPSendThread");
  *(void *)uint64_t v6 = off_1009A55B0;
  *(void *)(v6 + 152) = a2;
  *(_WORD *)(v6 + 168) = a3;
  *(void *)(v6 + 176) = 0;
  a1[25] = 0;
  a1[26] = 0;
  a1[24] = 0;
  operator new[]();
}

void sub_100313D94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

uint64_t sub_100313E10(uint64_t a1)
{
  *(void *)a1 = off_1009A55B0;
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, *(void *)(a1 + 152) + 760);
  CFStringRef v2 = sub_100511724(*(void *)(a1 + 152), *(unsigned __int16 *)(a1 + 168));
  if (v2) {
    sub_1005D1258((uint64_t)v2);
  }
  *(void *)(a1 + 176) = 0;
  sub_10003AFB4((uint64_t)v4);
  if (*(void *)(a1 + 184)) {
    operator delete[]();
  }
  return sub_1002CC800(a1);
}

void sub_100313EB0(_Unwind_Exception *a1)
{
  if (*(void *)(v1 + 184)) {
    operator delete[]();
  }
  sub_1002CC800(v1);
  _Unwind_Resume(a1);
}

void sub_100313EF4(uint64_t a1)
{
  sub_100313E10(a1);

  operator delete();
}

unint64_t sub_100313F2C(uint64_t a1)
{
  CFStringRef v2 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 216);
    v6[0] = 67109120;
    v6[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "calculateSleepIntervalInUs codec type:%d", (uint8_t *)v6, 8u);
  }
  int v4 = *(_DWORD *)(a1 + 216);
  unint64_t result = 7500;
  if (v4 > 129)
  {
    if (v4 == 130) {
      return 10000;
    }
    if (v4 != 255)
    {
      if (v4 == 256) {
        return result;
      }
      return (unint64_t)(float)((float)((float)((float)*(unint64_t *)(a1 + 224) / 16000.0) * 1000.0)
                                     * 1000.0);
    }
    return 15000;
  }
  if ((v4 - 128) < 2) {
    return 15000;
  }
  if (v4 != 2)
  {
    if (v4 == 127) {
      return result;
    }
    return (unint64_t)(float)((float)((float)((float)*(unint64_t *)(a1 + 224) / 16000.0) * 1000.0) * 1000.0);
  }
  return (unint64_t)((float)*(unint64_t *)(a1 + 224) / 32000.0 * 1000.0 * 1000.0);
}

uint64_t sub_100314084(uint64_t a1)
{
  CFStringRef v2 = (uint64_t *)(a1 + 160);
  uint64_t v1 = *(void *)(a1 + 160);
  if (!v1)
  {
    uint64_t result = os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    sub_100756B38();
    return 0;
  }
  int v3 = *(_DWORD *)(a1 + 216);
  if (v3 == 129) {
    return 1;
  }
  if (v3 != 128) {
    return 0;
  }
  uint64_t v4 = sub_10027653C(v1 + 400);
  if (!v4)
  {
    uint64_t v6 = qword_100A19E70;
    uint64_t result = os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    sub_100756B70(v2, v6);
    return 0;
  }

  return sub_100478B2C(v4, 41);
}

uint64_t sub_10031414C(uint64_t a1)
{
  v13[0] = 0;
  v13[1] = 0;
  CFStringRef v2 = (uint64_t *)(a1 + 152);
  sub_10003AED0((uint64_t)v13, *(void *)(a1 + 152) + 760);
  int v3 = sub_100511724(*v2, *(unsigned __int16 *)(a1 + 168));
  if (v3 && v3[74] == a1)
  {
    unint64_t v5 = *(unsigned __int16 *)(a1 + 242);
    if (!*(_WORD *)(a1 + 242)) {
      goto LABEL_11;
    }
    unint64_t v6 = *(void *)(a1 + 224);
    CFDictionaryRef v7 = qword_100A19E70;
    if (v6 > v5 && os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 136446210;
      unsigned int v15 = "fAudioBytesOutstanding >= fAudioBufferSize";
      _os_log_fault_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", buf, 0xCu);
      unint64_t v6 = *(void *)(a1 + 224);
      LOWORD(v5) = *(_WORD *)(a1 + 242);
      CFDictionaryRef v7 = qword_100A19E70;
    }
    unsigned __int16 v8 = v5 - v6;
    *(_WORD *)(a1 + 242) = v8;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 67109120;
      LODWORD(v15) = v8;
      _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Draining controller voice to %d bytes", buf, 8u);
      unsigned __int16 v8 = *(_WORD *)(a1 + 242);
    }
    if (!v8) {
LABEL_11:
    }
      sub_100314388(a1, 1u);
    if (*(_DWORD *)(a1 + 296) != 2) {
      goto LABEL_22;
    }
    if (*(unsigned char *)(a1 + 300))
    {
      unint64_t v9 = 576 - *(unsigned __int16 *)(a1 + 242);
      unint64_t v10 = *(void *)(a1 + 224);
      *(unsigned char *)(a1 + 300) = 0;
      uint64_t v11 = v9 / v10;
    }
    else
    {
      uint64_t v11 = 1;
    }
    if (sub_100314084(a1))
    {
      if (!sub_1002E7D00(*(void *)(a1 + 160))) {
        goto LABEL_22;
      }
      if (sub_1002E7D00(*(void *)(a1 + 160)) >= 4 && !*(_WORD *)(a1 + 242))
      {
        uint64_t v11 = 2;
        do
        {
LABEL_21:
          sub_100314638(a1);
          --v11;
        }
        while (v11);
        goto LABEL_22;
      }
    }
    if (v11) {
      goto LABEL_21;
    }
LABEL_22:
    uint64_t v4 = 1;
    goto LABEL_23;
  }
  uint64_t v4 = 0;
LABEL_23:
  sub_10003AFB4((uint64_t)v13);
  return v4;
}

void sub_100314364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100314388(uint64_t a1, unsigned int a2)
{
  v33[0] = 0;
  v33[1] = 0;
  sub_10003AED0((uint64_t)v33, *(void *)(a1 + 152) + 760);
  uint64_t v4 = *(unsigned int *)(a1 + 296);
  if (a2 != 2)
  {
    if (a2 == 1)
    {
      if (!v4)
      {
        if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1)) {
          goto LABEL_26;
        }
        goto LABEL_22;
      }
      if (v4 == 2)
      {
        if (sub_100314084(a1))
        {
          if (sub_1002E7D00(*(void *)(a1 + 160)) > 1) {
            goto LABEL_26;
          }
        }
        else
        {
          uint64_t v23 = *(void *)(a1 + 192);
          if (sub_1002E7CF8(*(void *)(a1 + 160)) + v23 >= *(void *)(a1 + 224) * *(int *)(a1 + 304)) {
            goto LABEL_26;
          }
        }
        int v22 = 1;
        goto LABEL_25;
      }
    }
    else if (a2)
    {
      char v13 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_FAULT)) {
        sub_100756A48(v13, v14, v15, v16, v17, v18, v19, v20);
      }
    }
    else if (v4 == 1)
    {
      if (*(_WORD *)(a1 + 242))
      {
        unint64_t v5 = qword_100A19E70;
        if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_FAULT)) {
          sub_100756BEC(v5, v6, v7, v8, v9, v10, v11, v12);
        }
      }
      if (sub_100314084(a1))
      {
        if (sub_1002E7D00(*(void *)(a1 + 160)) < 2) {
          goto LABEL_26;
        }
        goto LABEL_21;
      }
      uint64_t v21 = *(void *)(a1 + 192);
      if (sub_1002E7CF8(*(void *)(a1 + 160)) + v21 >= *(void *)(a1 + 224) * *(int *)(a1 + 304))
      {
LABEL_21:
        *(unsigned char *)(a1 + 300) = 1;
LABEL_22:
        int v22 = 2;
LABEL_25:
        *(_DWORD *)(a1 + 296) = v22;
      }
    }
  }
LABEL_26:
  uint64_t v24 = *(unsigned int *)(a1 + 296);
  if (v4 != v24)
  {
    int v25 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_INFO))
    {
      uint64_t v26 = *(void *)(a1 + 8 * a2 + 272);
      uint64_t v27 = *(void *)(a1 + 248 + 8 * v4);
      uint64_t v28 = *(void *)(a1 + 248 + 8 * v24);
      uint64_t v29 = *(void *)(a1 + 8 * *(unsigned int *)(a1 + 336) + 312);
      unint64_t v30 = sub_1002E7D00(*(void *)(a1 + 160));
      int v31 = *(unsigned __int16 *)(a1 + 242);
      *(_DWORD *)std::string buf = 136447490;
      uint64_t v35 = v26;
      __int16 v36 = 2082;
      uint64_t v37 = v27;
      __int16 v38 = 2082;
      uint64_t v39 = v28;
      __int16 v40 = 2082;
      uint64_t v41 = v29;
      __int16 v42 = 2048;
      unint64_t v43 = v30;
      __int16 v44 = 1024;
      int v45 = v31;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "Input: %{public}s. State: %{public}s -> %{public}s. SendState %{public}s, %zu, %hu", buf, 0x3Au);
    }
  }
  return sub_10003AFB4((uint64_t)v33);
}

void sub_100314618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100314638(uint64_t a1)
{
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, *(void *)(a1 + 152) + 760);
  int v2 = *(_DWORD *)(a1 + 336);
  switch(v2)
  {
    case 2:
      goto LABEL_7;
    case 1:
LABEL_6:
      sub_10031472C(a1);
      *(_DWORD *)(a1 + 336) = 2;
LABEL_7:
      *(void *)(a1 + 192) = 0;
      *(void *)(a1 + 200) = 0;
      *(_DWORD *)(a1 + 336) = 0;
      return sub_10003AFB4((uint64_t)v12);
    case 0:
      if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 104))(a1))
      {
        sub_100314388(a1, 2u);
        return sub_10003AFB4((uint64_t)v12);
      }
      *(_DWORD *)(a1 + 336) = 1;
      goto LABEL_6;
  }
  int v3 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_FAULT)) {
    sub_100756A48(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  return sub_10003AFB4((uint64_t)v12);
}

void sub_100314718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10031472C(uint64_t a1)
{
  int v2 = *(char **)(a1 + 184);
  unint64_t v3 = *(void *)(a1 + 192);
  if (!v2)
  {
    uint64_t v4 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_FAULT)) {
      sub_100756CEC(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }
  for (; v3; v3 -= v12)
  {
    if (v3 >= *(void *)(a1 + 224)) {
      unint64_t v12 = *(void *)(a1 + 224);
    }
    else {
      unint64_t v12 = v3;
    }
    char v13 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v17 = *(unsigned __int16 *)(a1 + 242);
      *(_DWORD *)std::string buf = 134218752;
      unint64_t v24 = v12;
      __int16 v25 = 2048;
      unint64_t v26 = v3;
      __int16 v27 = 1024;
      int v28 = v17;
      __int16 v29 = 2048;
      uint64_t v30 = v12 + v17;
      _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, ">> Sending, %zu bytes of total %zu. Oustanding %d -> %lu", buf, 0x26u);
    }
    if (*(void *)(a1 + 176))
    {
      buf[0] = 0;
      sub_10001B8E0(buf);
      sub_100189950(*(unsigned __int16 **)(a1 + 176), v2, (unsigned __int16)v12, 1);
      sub_10001B910(buf);
      sub_10001B8AC(buf);
    }
    else
    {
      uint64_t v14 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
        sub_100756CB4(&v19, v20, v14);
      }
    }
    unsigned int v15 = (unsigned __int16)(*(_WORD *)(a1 + 242) + v12);
    *(_WORD *)(a1 + 242) += v12;
    if (v15 >= 0x2D1)
    {
      uint64_t v16 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_FAULT)) {
        sub_100756C64(v21, &v22, v16);
      }
    }
    v2 += v12;
  }
  return 1;
}

void sub_100314924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

size_t sub_100314940(uint64_t a1)
{
  int v2 = *(char **)(a1 + 184);
  unint64_t v3 = sub_1002E7CF8(*(void *)(a1 + 160));
  unint64_t v4 = *(void *)(a1 + 224);
  if (v3 >= v4)
  {
    size_t result = sub_1002E7D08(*(void *)(a1 + 160), v2, v4 * *(int *)(a1 + 220));
    if (result)
    {
      size_t v9 = result;
      *(void *)(a1 + 192) = result;
      uint64_t v10 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v11 = sub_1002E7CF8(*(void *)(a1 + 160));
        int v12 = *(unsigned __int16 *)(a1 + 242);
        int v13 = 134218496;
        unint64_t v14 = v9;
        __int16 v15 = 2048;
        unint64_t v16 = v11;
        __int16 v17 = 1024;
        int v18 = v12;
        _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Filling, read %zu bytes, shared %zu, oustanding %d", (uint8_t *)&v13, 0x1Cu);
      }
      return 1;
    }
  }
  else
  {
    uint64_t v5 = qword_100A19E70;
    size_t result = os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_INFO);
    if (result)
    {
      unint64_t v7 = sub_1002E7CF8(*(void *)(a1 + 160));
      unint64_t v8 = *(void *)(a1 + 192);
      int v13 = 134218240;
      unint64_t v14 = v7;
      __int16 v15 = 2048;
      unint64_t v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Filling done, not enough data.  shared %zu, fill %zu", (uint8_t *)&v13, 0x16u);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100314AC0(uint64_t a1)
{
  return sub_100314388(a1, 0);
}

uint64_t sub_100314AC8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 176) = a2;
  return result;
}

uint64_t sub_100314AD0(uint64_t a1)
{
  return *(void *)(a1 + 176);
}

BOOL sub_100314AD8(uint64_t a1)
{
  int v2 = *(unsigned char **)(a1 + 208);
  int v3 = sub_100028CB4(*(void *)(a1 + 184) + 400);
  if (_os_feature_enabled_impl() && v3 == 130)
  {
    if (*(unsigned char *)(a1 + 333))
    {
      if (sub_100315034(a1))
      {
LABEL_5:
        *(void *)(a1 + 232) = 0;
        *(void *)(a1 + 216) = *(void *)(a1 + 248);
LABEL_6:
        sub_1005D0DC4(*(void *)(a1 + 184));
        return 1;
      }
      return 0;
    }
    goto LABEL_9;
  }
  if ((v3 - 128) < 3 || v3 == 255)
  {
LABEL_9:
    if (*(void *)(a1 + 216))
    {
      uint64_t v5 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_FAULT)) {
        sub_100756EC0(v5, v6, v7, v8, v9, v10, v11, v12);
      }
    }
    unint64_t v13 = *(void *)(a1 + 248);
    if (v13 <= 1)
    {
      unint64_t v14 = qword_100A19E70;
      BOOL result = os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      goto LABEL_14;
    }
    unint64_t v21 = sub_1002E7D00(*(void *)(a1 + 184));
    if (v21 < sub_1003151B0(a1)) {
      return 0;
    }
    unint64_t v22 = sub_1002E7D78(*(void *)(a1 + 184), v2 + 2, *(void *)(a1 + 248) - 2);
    if (v22)
    {
      unint64_t v23 = v22;
      char v24 = *(unsigned char *)(a1 + 264);
      *(unsigned char *)(a1 + 264) = v24 + 1;
      unsigned char *v2 = v24;
      v2[1] = v22;
      __int16 v25 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v61 = *(void *)(a1 + 248);
        unint64_t v26 = v23 + 4;
        int v64 = 134218240;
        *(void *)uint64_t v65 = v61;
        *(_WORD *)&v65[8] = 2048;
        *(void *)&v65[10] = v23 + 4;
        _os_log_debug_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "Buffer Length: %zu, offset: %lu", (uint8_t *)&v64, 0x16u);
      }
      else
      {
        unint64_t v26 = v23 + 4;
      }
      unint64_t v27 = *(void *)(a1 + 248);
      if (v27 < v26)
      {
        int v28 = qword_100A19E70;
        if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_FAULT))
        {
          int v64 = 67109120;
          *(_DWORD *)uint64_t v65 = v27;
          _os_log_fault_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_FAULT, "Byte offset exceeds data buffer length, buffer length: %d", (uint8_t *)&v64, 8u);
          unint64_t v27 = *(void *)(a1 + 248);
        }
      }
      if (v27 >= v26)
      {
        unint64_t v50 = sub_1002E7D78(*(void *)(a1 + 184), &v2[v23 + 4], v27 - v26);
        uint64_t v51 = qword_100A19E70;
        if (v50)
        {
          unint64_t v52 = v50;
          if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_INFO))
          {
            int v53 = *(unsigned __int8 *)(a1 + 264);
            uint64_t v54 = *(void *)(a1 + 248);
            int v55 = *(unsigned __int16 *)(a1 + 266);
            int v64 = 67110400;
            *(_DWORD *)uint64_t v65 = v53;
            *(_WORD *)&v65[4] = 2048;
            *(void *)&v65[6] = v23;
            *(_WORD *)&v65[14] = 2048;
            *(void *)&v65[16] = v52;
            __int16 v66 = 2048;
            uint64_t v67 = v54;
            __int16 v68 = 1024;
            int v69 = v55;
            __int16 v70 = 1024;
            int v71 = v55 + 1;
            _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_INFO, "HF Seq:%hhu, Sending %zu+%zu of %zu filled. Outstanding %d -> %d", (uint8_t *)&v64, 0x32u);
          }
          char v56 = *(unsigned char *)(a1 + 264);
          *(unsigned char *)(a1 + 264) = v56 + 1;
          uint64_t v57 = &v2[v23];
          _DWORD v57[2] = v56;
          v57[3] = v52;
          unint64_t v58 = (unint64_t)&v2[-*(void *)(a1 + 208)];
          unint64_t v59 = *(void *)(a1 + 248);
          if (v58 > v59)
          {
            long long v60 = qword_100A19E70;
            if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_FAULT)) {
              sub_100756E38(v58, v59, v60);
            }
          }
          goto LABEL_5;
        }
        BOOL result = os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEBUG);
        if (result)
        {
          sub_100756E04();
          return 0;
        }
      }
      else
      {
        __int16 v29 = qword_100A19E70;
        BOOL result = os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR);
        if (result)
        {
          sub_100756D64(v27, v29, v30, v31, v32, v33, v34, v35);
          return 0;
        }
      }
    }
    else
    {
      BOOL result = os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEBUG);
      if (result)
      {
        sub_100756DD0();
        return 0;
      }
    }
    return result;
  }
  if (*(void *)(a1 + 216))
  {
    __int16 v36 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_FAULT)) {
      sub_100756EC0(v36, v37, v38, v39, v40, v41, v42, v43);
    }
  }
  unint64_t v13 = *(void *)(a1 + 248);
  if (v13 > 1)
  {
    unint64_t v44 = sub_1002E7D78(*(void *)(a1 + 184), v2 + 2, v13 - 2);
    int v45 = qword_100A19E70;
    BOOL result = os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEBUG);
    if (v44)
    {
      if (result)
      {
        uint64_t v62 = *(void *)(a1 + 248);
        int v63 = *(unsigned __int16 *)(a1 + 266);
        int v64 = 134218752;
        *(void *)uint64_t v65 = v44;
        *(_WORD *)&v65[8] = 2048;
        *(void *)&v65[10] = v62;
        *(_WORD *)&v65[18] = 1024;
        *(_DWORD *)&v65[20] = v63;
        __int16 v66 = 1024;
        LODWORD(v67) = v63 + 1;
        _os_log_debug_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "HF Sending %zu of %zu filled. Oustanding %d -> %d ", (uint8_t *)&v64, 0x22u);
      }
      char v46 = *(unsigned char *)(a1 + 264);
      *(unsigned char *)(a1 + 264) = v46 + 1;
      unsigned char *v2 = v46;
      v2[1] = v44;
      CFRange v47 = &v2[-*(void *)(a1 + 208)];
      unint64_t v48 = *(void *)(a1 + 248);
      if ((unint64_t)v47 > v48)
      {
        long long v49 = qword_100A19E70;
        if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_FAULT))
        {
          int v64 = 134218240;
          *(void *)uint64_t v65 = v47;
          *(_WORD *)&v65[8] = 2048;
          *(void *)&v65[10] = v48;
          _os_log_fault_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_FAULT, "wrote %ld bytes to audio buffer when max size is %zu", (uint8_t *)&v64, 0x16u);
          unint64_t v48 = *(void *)(a1 + 248);
        }
      }
      *(void *)(a1 + 232) = 0;
      *(void *)(a1 + 216) = v48;
      goto LABEL_6;
    }
    if (result)
    {
      sub_100756F38();
      return 0;
    }
  }
  else
  {
    unint64_t v14 = qword_100A19E70;
    BOOL result = os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR);
    if (result)
    {
LABEL_14:
      sub_100756D64(v13, v14, v15, v16, v17, v18, v19, v20);
      return 0;
    }
  }
  return result;
}

BOOL sub_100315034(uint64_t a1)
{
  int v2 = *(char **)(a1 + 208);
  if (*(void *)(a1 + 216))
  {
    int v3 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_FAULT)) {
      sub_100756EC0(v3, v4, v5, v6, v7, v8, v9, v10);
    }
  }
  unint64_t v11 = sub_1002E7D78(*(void *)(a1 + 184), v2, *(void *)(a1 + 248));
  unint64_t v12 = v11;
  if (v11)
  {
    bzero(&v2[v11], *(void *)(a1 + 248) - v11);
    uint64_t v13 = mach_absolute_time();
    uint64_t v14 = *(void *)(a1 + 184);
    if (*(unsigned char *)(a1 + 268))
    {
      uint64_t v15 = *(void *)(v14 + 576);
      if (v15)
      {
        sub_100315420(a1, v2);
        uint64_t v16 = *(void *)(a1 + 184);
        *(_WORD *)(v16 + 572) += sub_1002CC80C(a1, v13 - v15) / (10 * *(int *)(a1 + 244));
        sub_100315420(a1, v2);
        uint64_t v14 = *(void *)(a1 + 184);
      }
      *(unsigned char *)(a1 + 268) = 0;
    }
    unsigned int v17 = *(unsigned __int16 *)(v14 + 572);
    v2[5] = (v17 >> 15) | 0xF8;
    v2[6] = v17 >> 7;
    v2[7] = v17 & 0x7F;
    uint64_t v18 = *(void *)(a1 + 184);
    ++*(_WORD *)(v18 + 572);
    if (*(unsigned char *)(v18 + 396))
    {
      sub_100315420(a1, v2);
      uint64_t v18 = *(void *)(a1 + 184);
    }
    *(void *)(a1 + 232) = 0;
    *(void *)(a1 + 216) = *(void *)(a1 + 248);
    sub_1005D0DC4(v18);
    *(void *)(*(void *)(a1 + 184) + 576) = v13;
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEBUG))
  {
    sub_100756F6C();
  }
  return v12 != 0;
}

uint64_t sub_1003151B0(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 240);
  uint64_t result = 2;
  if ((int)v1 <= 129)
  {
    if ((v1 - 128) < 2) {
      return result;
    }
    if (v1 == 127) {
      return 1;
    }
    goto LABEL_8;
  }
  if (v1 != 256)
  {
    if (v1 == 255) {
      return result;
    }
    if (v1 != 130)
    {
LABEL_8:
      int v3 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
        sub_100756FA0(v1, v3, v4, v5, v6, v7, v8, v9);
      }
    }
  }
  return 1;
}

uint64_t sub_10031523C(uint64_t a1, int a2)
{
  v12[0] = 0;
  v12[1] = 0;
  uint64_t v4 = (uint64_t *)(a1 + 176);
  sub_10003AED0((uint64_t)v12, *(void *)(a1 + 176) + 760);
  uint64_t v5 = sub_100511724(*v4, *(unsigned __int16 *)(a1 + 192));
  if (v5 && v5[74] == a1)
  {
    if (*(_DWORD *)(a1 + 240) != 130)
    {
      unint64_t v6 = sub_1002E7D00(*(void *)(a1 + 184));
      if (v6 < sub_1003151B0(a1))
      {
LABEL_9:
        unsigned int v7 = *(_DWORD *)(a1 + 172) + a2;
        *(_DWORD *)(a1 + 172) = v7;
        if (v7 < 0x3D) {
          return sub_10003AFB4((uint64_t)v12);
        }
        uint64_t v8 = qword_100A19E70;
        if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR))
        {
          int v10 = *(unsigned __int16 *)(*(void *)(a1 + 184) + 572);
          unsigned int v11 = 10 * *(_DWORD *)(a1 + 244);
          *(_DWORD *)std::string buf = 67109632;
          unsigned int v14 = v7;
          __int16 v15 = 1024;
          int v16 = v10;
          __int16 v17 = 1024;
          int v18 = v7 / v11;
          _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Overwait detected %d currentSequenceNumber %d incrementing sequenceNumber by %d", buf, 0x14u);
          unsigned int v7 = *(_DWORD *)(a1 + 172);
        }
        *(_WORD *)(*(void *)(a1 + 184) + 572) += v7 / (10 * *(_DWORD *)(a1 + 244));
LABEL_14:
        *(_DWORD *)(a1 + 172) = 0;
        return sub_10003AFB4((uint64_t)v12);
      }
      if (*(_DWORD *)(a1 + 240) != 130) {
        goto LABEL_14;
      }
    }
    if (sub_1002E7D00(*(void *)(a1 + 184))) {
      goto LABEL_14;
    }
    goto LABEL_9;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
    sub_10075700C();
  }
  return sub_10003AFB4((uint64_t)v12);
}

void sub_100315404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100315420(uint64_t a1, unsigned char *a2)
{
  uint64_t v4 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = a2[9] | ((a2[8] & 0xF) << 8);
    int v6 = (a2[3] << 7) & 0x7F80 | ((a2[2] & 7) << 15) | a2[4] & 0x7F;
    int v7 = a2[1] | ((*a2 & 7) << 8);
    int v8 = (a2[6] << 7) & 0x7F80 | ((a2[5] & 1) << 15) | a2[7] & 0x7F;
    uint64_t v9 = *(void *)(a1 + 184);
    int v10 = *(unsigned __int16 *)(v9 + 572);
    int v11 = *(unsigned __int8 *)(a1 + 268);
    uint64_t v12 = *(void *)(v9 + 576);
    v13[0] = 67110912;
    v13[1] = v7;
    __int16 v14 = 1024;
    int v15 = v6;
    __int16 v16 = 1024;
    int v17 = v5;
    __int16 v18 = 1024;
    int v19 = v8;
    __int16 v20 = 1024;
    int v21 = v10;
    __int16 v22 = 1024;
    int v23 = v11;
    __int16 v24 = 2048;
    uint64_t v25 = v12;
    __int16 v26 = 2048;
    uint64_t v27 = mach_absolute_time();
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "bluetoothd: FrameNumber: %d; HostTime(ms): %d; FrameLength: %d sequenceNumberDecoded %d, newSequenceNumber %d fInt"
      "erIOSessionSeqCompensation %d anchortimestamp %llu currentTimestamp %llu",
      (uint8_t *)v13,
      0x3Au);
  }
}

void sub_10031557C(void *a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v11 = sub_1002CCF14((uint64_t)a1, "HFPSendThreadHostCodec", a8);
  *(void *)uint64_t v11 = off_1009A5630;
  *(_DWORD *)(v11 + 172) = 0;
  *(void *)(v11 + 176) = a2;
  *(_WORD *)(v11 + 192) = a3;
  *(void *)(v11 + 200) = 0;
  a1[28] = 0;
  a1[29] = 0;
  a1[27] = 0;
  operator new[]();
}

void sub_100315930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

uint64_t sub_1003159AC(uint64_t a1)
{
  *(void *)a1 = off_1009A5630;
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, *(void *)(a1 + 176) + 760);
  int v2 = sub_100511724(*(void *)(a1 + 176), *(unsigned __int16 *)(a1 + 192));
  if (v2) {
    sub_1005D1258((uint64_t)v2);
  }
  *(void *)(a1 + 200) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  sub_10003AFB4((uint64_t)v4);
  if (*(void *)(a1 + 208)) {
    operator delete[]();
  }
  return sub_1002CCF7C(a1);
}

void sub_100315A50(_Unwind_Exception *a1)
{
  if (*(void *)(v1 + 208)) {
    operator delete[]();
  }
  sub_1002CCF7C(v1);
  _Unwind_Resume(a1);
}

void sub_100315A94(uint64_t a1)
{
  sub_1003159AC(a1);

  operator delete();
}

unint64_t sub_100315ACC(uint64_t a1)
{
  int v2 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 240);
    v6[0] = 67109120;
    v6[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "calculateSleepIntervalInUs codec type:%d", (uint8_t *)v6, 8u);
  }
  int v4 = *(_DWORD *)(a1 + 240);
  unint64_t result = 7500;
  if (v4 > 129)
  {
    if (v4 == 130) {
      return 10000;
    }
    if (v4 != 255)
    {
      if (v4 == 256) {
        return result;
      }
      return (unint64_t)(float)((float)((float)((float)*(unint64_t *)(a1 + 248) / 16000.0) * 1000.0)
                                     * 1000.0);
    }
    return 15000;
  }
  if ((v4 - 128) < 2) {
    return 15000;
  }
  if (v4 != 2)
  {
    if (v4 == 127) {
      return result;
    }
    return (unint64_t)(float)((float)((float)((float)*(unint64_t *)(a1 + 248) / 16000.0) * 1000.0) * 1000.0);
  }
  return (unint64_t)((float)*(unint64_t *)(a1 + 248) / 32000.0 * 1000.0 * 1000.0);
}

uint64_t sub_100315C24(uint64_t a1)
{
  v23[0] = 0;
  v23[1] = 0;
  int v2 = (uint64_t *)(a1 + 176);
  sub_10003AED0((uint64_t)v23, *(void *)(a1 + 176) + 760);
  int v3 = sub_100511724(*v2, *(unsigned __int16 *)(a1 + 192));
  if (v3 && v3[74] == a1)
  {
    if (!*(_WORD *)(a1 + 266)) {
      goto LABEL_16;
    }
    char v5 = sub_1002CCF74(a1);
    unint64_t v6 = *(unsigned __int16 *)(a1 + 266);
    unint64_t v7 = *(void *)(a1 + 248);
    if (v5)
    {
      unsigned __int16 v8 = v7 <= v6 ? v6 - v7 : 0;
    }
    else
    {
      if (v7 > v6)
      {
        uint64_t v9 = qword_100A19E70;
        if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)std::string buf = 136446210;
          v25[0] = "fAudioBytesOutstanding >= fAudioBufferSize";
          _os_log_fault_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", buf, 0xCu);
          unint64_t v7 = *(void *)(a1 + 248);
          LOWORD(v6) = *(_WORD *)(a1 + 266);
        }
      }
      unsigned __int16 v8 = v6 - v7;
    }
    *(_WORD *)(a1 + 266) = v8;
    int v10 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v22 = sub_1002E7D00(*(void *)(a1 + 184));
      *(_DWORD *)std::string buf = 67109376;
      LODWORD(v25[0]) = v8;
      WORD2(v25[0]) = 2048;
      *(void *)((char *)v25 + 6) = v22;
      _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Draining controller voice to %d bytes, frame available %zu", buf, 0x12u);
      unsigned __int16 v8 = *(_WORD *)(a1 + 266);
    }
    if (!v8) {
LABEL_16:
    }
      sub_100315F34(a1, 1u);
    unint64_t v11 = sub_1002E7D00(*(void *)(a1 + 184));
    if (v11 >= sub_1003151B0(a1) && *(_DWORD *)(a1 + 320) == 1) {
      sub_100315F34(a1, 0);
    }
    if (*(_DWORD *)(a1 + 320) != 2) {
      goto LABEL_37;
    }
    if (*(unsigned char *)(a1 + 324))
    {
      unint64_t v12 = 576 - *(unsigned __int16 *)(a1 + 266);
      unint64_t v13 = *(void *)(a1 + 248);
      *(unsigned char *)(a1 + 324) = 0;
      uint64_t v14 = v12 / v13;
    }
    else
    {
      uint64_t v14 = 1;
    }
    int v15 = *(_DWORD *)(a1 + 240);
    if ((v15 - 127) < 4 || v15 == 256)
    {
      if (!sub_1002E7D00(*(void *)(a1 + 184)))
      {
LABEL_37:
        uint64_t v4 = 1;
        goto LABEL_38;
      }
      int v16 = sub_1002CCF74(a1);
      uint64_t v17 = *(void *)(a1 + 184);
      if (v16)
      {
        unint64_t v18 = sub_1002E7D00(v17);
        uint64_t v14 = v18 / sub_1003151B0(a1);
      }
      else
      {
        unint64_t v19 = sub_1002E7D00(v17);
        if (v19 <= sub_1003151B0(a1))
        {
          uint64_t v14 = 1;
          goto LABEL_36;
        }
        unint64_t v20 = sub_1002E7D00(*(void *)(a1 + 184));
        if (v20 >= 2 * (sub_1003151B0(a1) & 0x7FuLL) && !*(_WORD *)(a1 + 266))
        {
          uint64_t v14 = 2;
          goto LABEL_36;
        }
      }
    }
    if (!v14) {
      goto LABEL_37;
    }
    do
    {
LABEL_36:
      sub_100316214(a1);
      --v14;
    }
    while (v14);
    goto LABEL_37;
  }
  uint64_t v4 = 0;
LABEL_38:
  sub_10003AFB4((uint64_t)v23);
  return v4;
}

void sub_100315F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100315F34(uint64_t a1, unsigned int a2)
{
  v37[0] = 0;
  v37[1] = 0;
  sub_10003AED0((uint64_t)v37, *(void *)(a1 + 176) + 760);
  uint64_t v4 = *(unsigned int *)(a1 + 320);
  if (a2 != 2)
  {
    if (a2 == 1)
    {
      if (v4)
      {
        if (v4 == 2)
        {
          int v15 = *(_DWORD *)(a1 + 240);
          if ((v15 - 127) < 4 || v15 == 256)
          {
            unint64_t v16 = sub_1002E7D00(*(void *)(a1 + 184));
            if (v16 >= sub_1003151B0(a1)) {
              goto LABEL_21;
            }
          }
          else
          {
            uint64_t v36 = *(void *)(a1 + 216);
            if (sub_1002E7CF8(*(void *)(a1 + 184)) + v36 >= *(void *)(a1 + 248) * *(int *)(a1 + 328)) {
              goto LABEL_21;
            }
          }
          int v17 = 1;
LABEL_20:
          *(_DWORD *)(a1 + 320) = v17;
        }
      }
      else if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1))
      {
        goto LABEL_19;
      }
    }
    else if (a2)
    {
      unint64_t v18 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_FAULT)) {
        sub_100756A48(v18, v19, v20, v21, v22, v23, v24, v25);
      }
    }
    else if (v4 == 1)
    {
      if (*(_WORD *)(a1 + 266))
      {
        char v5 = qword_100A19E70;
        if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_FAULT)) {
          sub_100756BEC(v5, v6, v7, v8, v9, v10, v11, v12);
        }
      }
      int v13 = *(_DWORD *)(a1 + 240);
      if ((v13 - 127) >= 4 && v13 != 256)
      {
        uint64_t v35 = *(void *)(a1 + 216);
        if (sub_1002E7CF8(*(void *)(a1 + 184)) + v35 < *(void *)(a1 + 248) * *(int *)(a1 + 328)) {
          goto LABEL_21;
        }
        goto LABEL_10;
      }
      unint64_t v14 = sub_1002E7D00(*(void *)(a1 + 184));
      if (v14 >= sub_1003151B0(a1))
      {
LABEL_10:
        *(unsigned char *)(a1 + 324) = 1;
LABEL_19:
        int v17 = 2;
        goto LABEL_20;
      }
    }
  }
LABEL_21:
  uint64_t v26 = *(unsigned int *)(a1 + 320);
  if (v4 != v26)
  {
    uint64_t v27 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_INFO))
    {
      uint64_t v28 = *(void *)(a1 + 8 * a2 + 296);
      uint64_t v29 = *(void *)(a1 + 272 + 8 * v4);
      uint64_t v30 = *(void *)(a1 + 272 + 8 * v26);
      uint64_t v31 = *(void *)(a1 + 8 * *(unsigned int *)(a1 + 360) + 336);
      unint64_t v32 = sub_1002E7D00(*(void *)(a1 + 184));
      int v33 = *(unsigned __int16 *)(a1 + 266);
      *(_DWORD *)std::string buf = 136447490;
      uint64_t v39 = v28;
      __int16 v40 = 2082;
      uint64_t v41 = v29;
      __int16 v42 = 2082;
      uint64_t v43 = v30;
      __int16 v44 = 2082;
      uint64_t v45 = v31;
      __int16 v46 = 2048;
      unint64_t v47 = v32;
      __int16 v48 = 1024;
      int v49 = v33;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "Input: %{public}s. State: %{public}s -> %{public}s. SendState %{public}s, %zu, %hu", buf, 0x3Au);
    }
  }
  return sub_10003AFB4((uint64_t)v37);
}

void sub_1003161F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100316214(uint64_t a1)
{
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, *(void *)(a1 + 176) + 760);
  int v2 = *(_DWORD *)(a1 + 360);
  switch(v2)
  {
    case 2:
      goto LABEL_7;
    case 1:
LABEL_6:
      sub_1003162E8(a1);
      *(_DWORD *)(a1 + 360) = 2;
LABEL_7:
      *(void *)(a1 + 216) = 0;
      *(void *)(a1 + 224) = 0;
      *(_DWORD *)(a1 + 360) = 0;
      return sub_10003AFB4((uint64_t)v12);
    case 0:
      if (!sub_100314AD8(a1))
      {
        sub_100315F34(a1, 2u);
        return sub_10003AFB4((uint64_t)v12);
      }
      *(_DWORD *)(a1 + 360) = 1;
      goto LABEL_6;
  }
  int v3 = qword_100A19E70;
  if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_FAULT)) {
    sub_100756A48(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  return sub_10003AFB4((uint64_t)v12);
}

void sub_1003162D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003162E8(uint64_t a1)
{
  int v2 = *(char **)(a1 + 208);
  unint64_t v3 = *(void *)(a1 + 216);
  if (!v2)
  {
    uint64_t v4 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_FAULT)) {
      sub_100756CEC(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }
  for (; v3; v3 -= v12)
  {
    if (v3 >= *(void *)(a1 + 248)) {
      unint64_t v12 = *(void *)(a1 + 248);
    }
    else {
      unint64_t v12 = v3;
    }
    int v13 = qword_100A19E70;
    if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v17 = *(unsigned __int16 *)(a1 + 266);
      *(_DWORD *)std::string buf = 134218752;
      unint64_t v24 = v12;
      __int16 v25 = 2048;
      unint64_t v26 = v3;
      __int16 v27 = 1024;
      int v28 = v17;
      __int16 v29 = 2048;
      uint64_t v30 = v12 + v17;
      _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, ">> Sending, %zu bytes of total %zu. Oustanding %d -> %lu", buf, 0x26u);
    }
    if (*(void *)(a1 + 200))
    {
      buf[0] = 0;
      sub_10001B8E0(buf);
      if (*(unsigned char *)(a1 + 332))
      {
        uint64_t v14 = sub_10027653C(*(void *)(a1 + 184) + 400);
        sub_100264B20(v14 + 128, v2, (unsigned __int16)v12);
      }
      else
      {
        sub_100189950(*(unsigned __int16 **)(a1 + 200), v2, (unsigned __int16)v12, 1);
      }
      sub_10001B910(buf);
      sub_10001B8AC(buf);
    }
    else
    {
      int v15 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_ERROR)) {
        sub_100756CB4(&v19, v20, v15);
      }
    }
    *(_WORD *)(a1 + 266) += v12;
    if ((sub_1002CCF74(a1) & 1) == 0 && *(unsigned __int16 *)(a1 + 266) >= 0x2D1u)
    {
      unint64_t v16 = qword_100A19E70;
      if (os_log_type_enabled((os_log_t)qword_100A19E70, OS_LOG_TYPE_FAULT)) {
        sub_100756C64(v21, &v22, v16);
      }
    }
    v2 += v12;
  }
  return 1;
}

void sub_100316514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10001B8AC(va);
  _Unwind_Resume(a1);
}

intptr_t sub_100316538(uint64_t a1)
{
  sub_100315F34(a1, 0);
  intptr_t result = sub_1002CCF74(a1);
  if (result)
  {
    return sub_1002CD238(a1);
  }
  return result;
}

uint64_t sub_10031658C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 200) = a2;
  return result;
}

uint64_t sub_100316594(uint64_t a1)
{
  return *(void *)(a1 + 200);
}

void sub_10031659C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 2u);
}

uint64_t sub_1003165B4(uint64_t a1, int a2)
{
  uint64_t v4 = sub_1003170E4(a1, a2);
  *(void *)uint64_t v4 = off_1009A56F0;
  *(unsigned char *)(v4 + 1176) = 0;
  *(_DWORD *)(v4 + 1180) = 4135;
  *(int32x2_t *)(v4 + 1184) = vdup_n_s32(0x80000007);
  *(_WORD *)(v4 + 1192) = 0;
  *(void *)(v4 + 1216) = 0;
  *(_DWORD *)(v4 + 1430) = 0;
  *(_DWORD *)(v4 + 1440) = 0;
  *(_WORD *)(v4 + 1444) = 0;
  *(_DWORD *)(v4 + 1203) = 0;
  *(_WORD *)(v4 + 1207) = 0;
  if ((a2 - 2000) < 0x7D0
    || ((a2 - 1) < 0x7CF ? (BOOL v5 = a2 == 9) : (BOOL v5 = 1), !v5 || a2 == 6000))
  {
    *(unsigned char *)(a1 + 160) = 1;
  }
  char v48 = 0;
  uint64_t v6 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "SupportsMultipleAdvertising");
  int v7 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v6 + 72))(v6, buf, __p, &v48);
  if (v47 < 0) {
    operator delete(__p[0]);
  }
  if (v50 < 0)
  {
    operator delete(*(void **)buf);
    if (!v7) {
      goto LABEL_21;
    }
  }
  else if (!v7)
  {
    goto LABEL_21;
  }
  uint64_t v8 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (v48) {
      uint64_t v9 = "enabled";
    }
    else {
      uint64_t v9 = "disabled";
    }
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Warning: Overriding Multiple Advertising support - %{public}s", buf, 0xCu);
  }
  *(unsigned char *)(a1 + 160) = v48;
LABEL_21:
  uint64_t v10 = sub_100035F54();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v10 + 360))(v10) & 1) == 0)
  {
    uint64_t v11 = sub_100035F54();
    char v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 336))(v11);
    char v13 = (a2 - 2000) < 0xFFFFF837 ? 1 : v12;
    if ((v13 & 1) == 0)
    {
      LOBYTE(v44) = 0;
      uint64_t v14 = sub_100017768();
      sub_10004191C(buf, "CATT");
      sub_10004191C(__p, "AllowAppleDevices");
      (*(void (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v14 + 72))(v14, buf, __p, &v44);
      if (v47 < 0) {
        operator delete(__p[0]);
      }
      if (v50 < 0) {
        operator delete(*(void **)buf);
      }
      int v15 = v44;
      unint64_t v16 = qword_100A19E50;
      BOOL v17 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT);
      if (v15)
      {
        if (v17)
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Warning: Allowing CATT between Apple Devices, transport switch will be turned off", buf, 2u);
        }
      }
      else
      {
        if (v17)
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Enable transport switch on non-iPad devices", buf, 2u);
        }
        *(_DWORD *)(a1 + 1180) |= 0x100000u;
      }
    }
  }
  if (a2 == 19)
  {
    *(_DWORD *)(a1 + 1180) |= 0x200000u;
  }
  else if ((a2 - 19) >= 0x7BD && (*(_DWORD *)(a1 + 712) - 2001) > 0x7CE)
  {
    goto LABEL_61;
  }
  LOBYTE(v44) = 0;
  *(_DWORD *)(a1 + 1180) |= 0x40000u;
  uint64_t v18 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "DisableSensorTrack");
  (*(void (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v18 + 72))(v18, buf, __p, &v44);
  if (v47 < 0) {
    operator delete(__p[0]);
  }
  if (v50 < 0) {
    operator delete(*(void **)buf);
  }
  if ((_BYTE)v44)
  {
    uint8_t v19 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Force Disable SensorTrack", buf, 2u);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 1180) |= 8u;
  }
  if ((a2 - 20) < 0x7BC || (*(_DWORD *)(a1 + 712) - 2001) <= 0x7CE)
  {
    *(_DWORD *)(a1 + 1180) |= 0x1000000u;
    LOBYTE(v44) = 0;
    uint64_t v20 = sub_100017768();
    sub_10004191C(buf, "LE");
    sub_10004191C(__p, "DisableControllerBTClock");
    int v21 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v20 + 72))(v20, buf, __p, &v44);
    if (v47 < 0) {
      operator delete(__p[0]);
    }
    if (v50 < 0) {
      operator delete(*(void **)buf);
    }
    if ((_BYTE)v44) {
      int v22 = v21;
    }
    else {
      int v22 = 0;
    }
    if (v22 == 1)
    {
      *(unsigned char *)(a1 + 1208) = 1;
      uint64_t v23 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Force Disable  DisableControllerBTClock", buf, 2u);
      }
      *(_DWORD *)(a1 + 1180) &= ~0x1000000u;
    }
  }
LABEL_61:
  char v45 = 0;
  uint64_t v24 = sub_100017768();
  sub_10004191C(buf, "Magnet");
  sub_10004191C(__p, "DisableClassic");
  (*(void (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v24 + 72))(v24, buf, __p, &v45);
  if (v47 < 0) {
    operator delete(__p[0]);
  }
  if (v50 < 0) {
    operator delete(*(void **)buf);
  }
  if (v45) {
    *(unsigned char *)(a1 + 1193) = 1;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 3288))(a1);
  *(_WORD *)(a1 + 1200) = 0;
  uint64_t v25 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "forceHostSlowDownLEScanOnACLProtectMode");
  int v26 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, uint64_t))(*(void *)v25 + 72))(v25, buf, __p, a1 + 1201);
  if (v47 < 0) {
    operator delete(__p[0]);
  }
  if (v50 < 0)
  {
    operator delete(*(void **)buf);
    if (!v26) {
      goto LABEL_79;
    }
  }
  else if (!v26)
  {
    goto LABEL_79;
  }
  __int16 v27 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 1201)) {
      int v28 = "Yes";
    }
    else {
      int v28 = "No";
    }
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = v28;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Overriding HostSlowDownLEScanOnACLProtectMode - %{public}s", buf, 0xCu);
  }
  *(unsigned char *)(a1 + 1200) = 1;
LABEL_79:
  *(unsigned char *)(a1 + 1202) = 87;
  int v44 = 0;
  uint64_t v29 = sub_100017768();
  sub_10004191C(buf, "Zone");
  sub_10004191C(__p, "CuffoffRSSIValue");
  int v30 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v29 + 88))(v29, buf, __p, &v44);
  if (v47 < 0) {
    operator delete(__p[0]);
  }
  if (v50 < 0)
  {
    operator delete(*(void **)buf);
    if (!v30) {
      goto LABEL_87;
    }
  }
  else if (!v30)
  {
    goto LABEL_87;
  }
  char v31 = v44;
  *(unsigned char *)(a1 + 1202) = v44;
  unint64_t v32 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v31;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Zone Cutoff RSSI CFDataRef value = -%d dBm", buf, 8u);
  }
LABEL_87:
  *(unsigned char *)(a1 + 1446) = 0;
  *(_DWORD *)(a1 + 1448) = 0;
  int v43 = 0;
  uint64_t v33 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "ForceRssiThresholdOrderType19");
  int v34 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v33 + 88))(v33, buf, __p, &v43);
  if (v47 < 0) {
    operator delete(__p[0]);
  }
  if (v50 < 0)
  {
    operator delete(*(void **)buf);
    if (!v34) {
      goto LABEL_95;
    }
  }
  else if (!v34)
  {
    goto LABEL_95;
  }
  *(unsigned char *)(a1 + 1446) = 1;
  int v35 = v43;
  *(_DWORD *)(a1 + 1448) = v43;
  uint64_t v36 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = 1;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v35;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Force %d RSSI Threshold Order RSSI CFDataRef value = %d ", buf, 0xEu);
  }
LABEL_95:
  *(_WORD *)(a1 + 1452) = 2048;
  int v42 = 0;
  uint64_t v37 = sub_100017768();
  sub_10004191C(buf, "AoS");
  sub_10004191C(__p, "MaxRetryInFrames");
  int v38 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v37 + 128))(v37, buf, __p, &v42);
  if (v47 < 0) {
    operator delete(__p[0]);
  }
  if (v50 < 0)
  {
    operator delete(*(void **)buf);
    if (!v38) {
      goto LABEL_103;
    }
  }
  else if (!v38)
  {
    goto LABEL_103;
  }
  *(unsigned char *)(a1 + 1452) = 1;
  unsigned __int8 v39 = v42;
  *(unsigned char *)(a1 + 1453) = v42;
  __int16 v40 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = 1;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v39;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Override Advanced sniff mode Parameters %d, MaxRetryInFrames= %d ", buf, 0xEu);
  }
LABEL_103:
  *(unsigned char *)(a1 + 1435) = 0;
  *(_WORD *)(a1 + 1438) = 0;
  return a1;
}

void sub_10031701C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  sub_10031717C(v23);
  _Unwind_Resume(a1);
}

uint64_t sub_1003170E4(uint64_t a1, int a2)
{
  *(void *)a1 = off_1009A7918;
  uint64_t v4 = a1 + 72;
  sub_100052DA8(a1 + 8);
  sub_100052DA8(v4);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 136) = a1 + 144;
  *(unsigned char *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 164) = 0;
  *(_DWORD *)(a1 + 712) = a2;
  *(_DWORD *)(a1 + 716) = 0;
  return a1;
}

void sub_100317168(_Unwind_Exception *a1)
{
  sub_100052DA4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10031717C(uint64_t a1)
{
  *(void *)a1 = off_1009A7918;
  sub_1000486F0(a1 + 136, *(void **)(a1 + 144));
  sub_100052DA4(a1 + 72);
  sub_100052DA4(a1 + 8);
  return a1;
}

void sub_1003171D8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100A12118, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_100A12118))
  {
    sub_10004191C(&xmmword_100A12100, "");
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100A12100, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100A12118);
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10031732C;
  block[3] = &unk_100997528;
  void block[4] = a1;
  if (qword_100A12120 != -1) {
    dispatch_once(&qword_100A12120, block);
  }
  if (byte_100A12117 < 0)
  {
    sub_10003B098((unsigned char *)a2, (void *)xmmword_100A12100, *((unint64_t *)&xmmword_100A12100 + 1));
  }
  else
  {
    *(_OWORD *)a2 = xmmword_100A12100;
    *(void *)(a2 + 16) = unk_100A12110;
  }
}

void sub_100317314(_Unwind_Exception *a1)
{
}

void sub_10031732C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  __s = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  if (*(_DWORD *)(v1 + 712) != 22) {
    goto LABEL_20;
  }
  uint64_t v2 = sub_1003705E4();
  if ((*(unsigned int (**)(uint64_t, void ***))(*(void *)v2 + 64))(v2, &__s)) {
    goto LABEL_20;
  }
  if (SHIBYTE(v11) < 0)
  {
    uint64_t v3 = v10;
    if (!v10) {
      goto LABEL_20;
    }
    p_s = __s;
  }
  else
  {
    uint64_t v3 = HIBYTE(v11);
    if (!HIBYTE(v11)) {
      goto LABEL_20;
    }
    p_s = (void **)&__s;
  }
  if (v3 >= 2)
  {
    BOOL v5 = (char *)p_s + v3;
    uint64_t v6 = p_s;
    do
    {
      int v7 = (char *)memchr(v6, 67, v3 - 1);
      if (!v7) {
        break;
      }
      if (*(_WORD *)v7 == 12355)
      {
        if (v7 != v5 && v7 - (char *)p_s != -1)
        {
          uint64_t v8 = "C0";
          goto LABEL_19;
        }
        break;
      }
      uint64_t v6 = (void **)(v7 + 1);
      uint64_t v3 = v5 - (char *)v6;
    }
    while (v5 - (char *)v6 >= 2);
  }
  uint64_t v8 = "C2";
  if (sub_1003174A4((uint64_t *)&__s, "C2", 0) != -1
    || (uint64_t v8 = "C3", sub_1003174A4((uint64_t *)&__s, "C3", 0) != -1))
  {
LABEL_19:
    std::string::assign((std::string *)&xmmword_100A12100, v8);
  }
LABEL_20:
  if (SHIBYTE(v11) < 0) {
    operator delete(__s);
  }
}

void sub_100317488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1003174A4(uint64_t *a1, char *__s, unint64_t a3)
{
  uint64_t v5 = (uint64_t)a1;
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v5 = *a1;
    unint64_t v6 = a1[1];
  }
  else
  {
    unint64_t v6 = *((unsigned __int8 *)a1 + 23);
  }
  size_t v7 = strlen(__s);
  if (v6 < a3) {
    return -1;
  }
  int64_t v8 = v7;
  if (v7)
  {
    uint64_t v9 = (void *)(v5 + a3);
    uint64_t v10 = (char *)(v5 + v6);
    int64_t v11 = v6 - a3;
    if ((uint64_t)(v6 - a3) >= v8)
    {
      int v14 = *__s;
      do
      {
        uint64_t v15 = v11 - v8;
        if (v15 == -1) {
          break;
        }
        unint64_t v16 = (char *)memchr(v9, v14, v15 + 1);
        if (!v16) {
          break;
        }
        char v12 = v16;
        if (!memcmp(v16, __s, v8)) {
          goto LABEL_9;
        }
        uint64_t v9 = v12 + 1;
        int64_t v11 = v10 - (v12 + 1);
      }
      while (v11 >= v8);
    }
    char v12 = v10;
LABEL_9:
    if (v12 == v10) {
      return -1;
    }
    else {
      return (unint64_t)&v12[-v5];
    }
  }
  return a3;
}

uint64_t sub_10031757C(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10031760C;
  block[3] = &unk_100997528;
  void block[4] = a1;
  if (qword_100A12130 != -1) {
    dispatch_once(&qword_100A12130, block);
  }
  return byte_100A12128;
}

void sub_10031760C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  std::string __p = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  if (*(_DWORD *)(v1 + 712) == 23)
  {
    uint64_t v2 = sub_1003705E4();
    if (!(*(unsigned int (**)(uint64_t, void **))(*(void *)v2 + 64))(v2, &__p))
    {
      if (SHIBYTE(v10) < 0)
      {
        uint64_t v3 = v9;
        if (!v9) {
          goto LABEL_3;
        }
        p_p = (char *)__p;
      }
      else
      {
        uint64_t v3 = HIBYTE(v10);
        if (!HIBYTE(v10)) {
          goto LABEL_3;
        }
        p_p = (char *)&__p;
      }
      if (v3 >= 2)
      {
        uint64_t v5 = &p_p[v3];
        unint64_t v6 = p_p;
        do
        {
          size_t v7 = (char *)memchr(v6, 66, v3 - 1);
          if (!v7) {
            break;
          }
          if (*(_WORD *)v7 == 12354)
          {
            if (v7 != v5 && v7 - p_p != -1) {
              byte_100A12128 = 1;
            }
            break;
          }
          unint64_t v6 = v7 + 1;
          uint64_t v3 = v5 - (unsigned char *)v6;
        }
        while (v5 - (unsigned char *)v6 >= 2);
      }
    }
  }
LABEL_3:
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEBUG)) {
    sub_100757044();
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(__p);
  }
}

void sub_100317744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100317760(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003177F0;
  block[3] = &unk_100997528;
  void block[4] = a1;
  if (qword_100A12140 != -1) {
    dispatch_once(&qword_100A12140, block);
  }
  return byte_100A12138;
}

void sub_1003177F0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  std::string __p = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  if (*(_DWORD *)(v1 + 712) == 23)
  {
    uint64_t v2 = sub_1003705E4();
    if (!(*(unsigned int (**)(uint64_t, void **))(*(void *)v2 + 64))(v2, &__p))
    {
      if (SHIBYTE(v10) < 0)
      {
        uint64_t v3 = v9;
        if (!v9) {
          goto LABEL_3;
        }
        p_p = (char *)__p;
      }
      else
      {
        uint64_t v3 = HIBYTE(v10);
        if (!HIBYTE(v10)) {
          goto LABEL_3;
        }
        p_p = (char *)&__p;
      }
      if (v3 >= 2)
      {
        uint64_t v5 = &p_p[v3];
        unint64_t v6 = p_p;
        do
        {
          size_t v7 = (char *)memchr(v6, 67, v3 - 1);
          if (!v7) {
            break;
          }
          if (*(_WORD *)v7 == 12355)
          {
            if (v7 != v5 && v7 - p_p != -1) {
              byte_100A12138 = 1;
            }
            break;
          }
          unint64_t v6 = v7 + 1;
          uint64_t v3 = v5 - (unsigned char *)v6;
        }
        while (v5 - (unsigned char *)v6 >= 2);
      }
    }
  }
LABEL_3:
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEBUG)) {
    sub_1007570B8();
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(__p);
  }
}

void sub_100317928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100317944(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003179D4;
  block[3] = &unk_100997528;
  void block[4] = a1;
  if (qword_100A12150 != -1) {
    dispatch_once(&qword_100A12150, block);
  }
  return byte_100A12148;
}

void sub_1003179D4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  std::string __p = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  if (*(_DWORD *)(v1 + 712) == 23)
  {
    uint64_t v2 = sub_1003705E4();
    if (!(*(unsigned int (**)(uint64_t, void **))(*(void *)v2 + 64))(v2, &__p))
    {
      if (SHIBYTE(v10) < 0)
      {
        uint64_t v3 = v9;
        if (!v9) {
          goto LABEL_3;
        }
        p_p = (char *)__p;
      }
      else
      {
        uint64_t v3 = HIBYTE(v10);
        if (!HIBYTE(v10)) {
          goto LABEL_3;
        }
        p_p = (char *)&__p;
      }
      if (v3 >= 2)
      {
        uint64_t v5 = &p_p[v3];
        unint64_t v6 = p_p;
        do
        {
          size_t v7 = (char *)memchr(v6, 67, v3 - 1);
          if (!v7) {
            break;
          }
          if (*(_WORD *)v7 == 12867)
          {
            if (v7 != v5 && v7 - p_p != -1) {
              byte_100A12148 = 1;
            }
            break;
          }
          unint64_t v6 = v7 + 1;
          uint64_t v3 = v5 - (unsigned char *)v6;
        }
        while (v5 - (unsigned char *)v6 >= 2);
      }
    }
  }
LABEL_3:
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEBUG)) {
    sub_10075712C();
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(__p);
  }
}

void sub_100317B0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100317B28(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100317BB8;
  block[3] = &unk_100997528;
  void block[4] = a1;
  if (qword_100A12160 != -1) {
    dispatch_once(&qword_100A12160, block);
  }
  return byte_100A12158;
}

void sub_100317BB8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  std::string __p = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  if (*(_DWORD *)(v1 + 712) == 25)
  {
    uint64_t v2 = sub_1003705E4();
    if (!(*(unsigned int (**)(uint64_t, void **))(*(void *)v2 + 64))(v2, &__p))
    {
      if (SHIBYTE(v10) < 0)
      {
        uint64_t v3 = v9;
        if (!v9) {
          goto LABEL_3;
        }
        p_p = (char *)__p;
      }
      else
      {
        uint64_t v3 = HIBYTE(v10);
        if (!HIBYTE(v10)) {
          goto LABEL_3;
        }
        p_p = (char *)&__p;
      }
      if (v3 >= 2)
      {
        uint64_t v5 = &p_p[v3];
        unint64_t v6 = p_p;
        do
        {
          size_t v7 = (char *)memchr(v6, 66, v3 - 1);
          if (!v7) {
            break;
          }
          if (*(_WORD *)v7 == 12354)
          {
            if (v7 != v5 && v7 - p_p != -1) {
              byte_100A12158 = 1;
            }
            break;
          }
          unint64_t v6 = v7 + 1;
          uint64_t v3 = v5 - (unsigned char *)v6;
        }
        while (v5 - (unsigned char *)v6 >= 2);
      }
    }
  }
LABEL_3:
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEBUG)) {
    sub_1007571A0();
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(__p);
  }
}

void sub_100317CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100317D0C(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100317D9C;
  block[3] = &unk_100997528;
  void block[4] = a1;
  if (qword_100A12170 != -1) {
    dispatch_once(&qword_100A12170, block);
  }
  return byte_100A12168;
}

void sub_100317D9C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  std::string __p = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  if (*(_DWORD *)(v1 + 712) == 25)
  {
    uint64_t v2 = sub_1003705E4();
    if (!(*(unsigned int (**)(uint64_t, void **))(*(void *)v2 + 64))(v2, &__p))
    {
      if (SHIBYTE(v10) < 0)
      {
        uint64_t v3 = v9;
        if (!v9) {
          goto LABEL_3;
        }
        p_p = (char *)__p;
      }
      else
      {
        uint64_t v3 = HIBYTE(v10);
        if (!HIBYTE(v10)) {
          goto LABEL_3;
        }
        p_p = (char *)&__p;
      }
      if (v3 >= 2)
      {
        uint64_t v5 = &p_p[v3];
        unint64_t v6 = p_p;
        do
        {
          size_t v7 = (char *)memchr(v6, 67, v3 - 1);
          if (!v7) {
            break;
          }
          if (*(_WORD *)v7 == 12867)
          {
            if (v7 != v5 && v7 - p_p != -1) {
              byte_100A12168 = 1;
            }
            break;
          }
          unint64_t v6 = v7 + 1;
          uint64_t v3 = v5 - (unsigned char *)v6;
        }
        while (v5 - (unsigned char *)v6 >= 2);
      }
    }
  }
LABEL_3:
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEBUG)) {
    sub_100757214();
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(__p);
  }
}

void sub_100317ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100317EF0(uint64_t a1)
{
  int v12 = 0;
  uint64_t v2 = sub_100017768();
  sub_10004191C(buf, "Magnet");
  sub_10004191C(__p, "ForcedLERSSIValue");
  int v3 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v2 + 88))(v2, buf, __p, &v12);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0)
  {
    operator delete(*(void **)buf);
    if (v3) {
      goto LABEL_5;
    }
LABEL_9:
    *(unsigned char *)(a1 + 1194) = 0;
    goto LABEL_10;
  }
  if (!v3) {
    goto LABEL_9;
  }
LABEL_5:
  __int16 v4 = v12;
  uint64_t v5 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Enable force LE RSSI CFDataRef value = %d dBm", buf, 8u);
  }
  *(unsigned char *)(a1 + 1194) = 1;
  *(_WORD *)(a1 + 1196) = v4;
LABEL_10:
  uint64_t v6 = sub_100017768();
  sub_10004191C(buf, "Magnet");
  sub_10004191C(__p, "ForcedClassicRSSIValue");
  int v7 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v6 + 88))(v6, buf, __p, &v12);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0)
  {
    operator delete(*(void **)buf);
    if (v7) {
      goto LABEL_14;
    }
LABEL_18:
    *(unsigned char *)(a1 + 1195) = 0;
    return;
  }
  if (!v7) {
    goto LABEL_18;
  }
LABEL_14:
  __int16 v8 = v12;
  uint64_t v9 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Enable force Classic RSSI CFDataRef value = %d dBm", buf, 8u);
  }
  *(unsigned char *)(a1 + 1195) = 1;
  *(_WORD *)(a1 + 1198) = v8;
}

void sub_100318138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10031817C(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 712);
  if (v1 < 0x7D0)
  {
    if (v1 - 19 < 7) {
      return 1;
    }
  }
  else if (v1 <= 0xF9F && v1 != 2000)
  {
    return 1;
  }
  return v1 == 6000;
}

BOOL sub_1003181BC(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 712);
  return v1 == 6000 || (v1 - 22) < 0x7BA;
}

BOOL sub_1003181DC(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 22) < 0x7BA;
}

BOOL sub_1003181F0(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 22) < 0x7BA;
}

BOOL sub_100318204(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 22) < 0x7BA;
}

BOOL sub_100318218(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 20) < 6;
}

BOOL sub_10031822C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 712);
  return v1 == 6000 || (v1 - 20) < 6;
}

BOOL sub_100318248(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 22) < 0x7BA;
}

BOOL sub_10031825C(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 22) < 0x7BA;
}

BOOL sub_100318270(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 19) < 7;
}

BOOL sub_100318284()
{
  return (*(_DWORD *)(sub_10003FB34() + 712) - 21) < 0x7BB;
}

uint64_t sub_1003182AC()
{
  return 0;
}

BOOL sub_1003182B4(uint64_t a1)
{
  if (qword_100A12178 != -1) {
    dispatch_once(&qword_100A12178, &stru_1009A6558);
  }
  BOOL v2 = sub_100354CA4(a1, 0x14u);
  BOOL result = 0;
  if (v2 && byte_100A12180)
  {
    __int16 v4 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      if (byte_100A12181) {
        uint64_t v5 = "Enabled";
      }
      else {
        uint64_t v5 = "Disabled";
      }
      int v6 = 136315138;
      int v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Overriding Apple Enhanced Advertising Report support to : %s", (uint8_t *)&v6, 0xCu);
    }
    return byte_100A12181 != 0;
  }
  return result;
}

void sub_1003183D0(id a1)
{
  uint64_t v1 = sub_100017768();
  sub_10004191C(v4, "LE");
  sub_10004191C(__p, "AppleExtendedAdvertisingReport");
  byte_100A12180 = (*(uint64_t (**)(uint64_t, void **, void **, char *))(*(void *)v1 + 72))(v1, v4, __p, &byte_100A12181);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_10031847C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1003184B0()
{
  return (*(_DWORD *)(sub_10003FB34() + 712) - 21) < 5;
}

BOOL sub_1003184D8(uint64_t a1)
{
  return (*(_DWORD *)(sub_10003FB34() + 712) - 1) <= 0x7CE
      && (*(_DWORD *)(a1 + 712) - 22) < 4;
}

BOOL sub_100318524(uint64_t a1)
{
  return (*(_DWORD *)(sub_10003FB34() + 712) - 1) <= 0x7CE
      && (*(_DWORD *)(a1 + 712) - 23) < 3;
}

uint64_t sub_100318570(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 712);
  if (v1 < 0x7D0)
  {
    if (v1 - 19 < 7) {
      return 1;
    }
  }
  else if (v1 <= 0xF9F && v1 != 2000)
  {
    return 1;
  }
  return 0;
}

BOOL sub_1003185A8(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 21) < 5;
}

BOOL sub_1003185BC(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 2001) < 0x7CF;
}

BOOL sub_1003185D0(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 20) < 6;
}

BOOL sub_1003185E4(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 712);
  if (!v1) {
    return 0;
  }
  if (v1 > 0x7CF) {
    return v1 <= 0xF9F && v1 != 2000;
  }
  return v1 - 20 < 6;
}

BOOL sub_100318624()
{
  return sub_1003FAF7C() == 28 || sub_1003FAF7C() == 23;
}

BOOL sub_100318658(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 2001) < 0x7CF;
}

uint64_t sub_10031866C()
{
  unsigned int v0 = sub_1003FAF7C() - 186;
  return (v0 < 0x20) & (0xF3FF0F0F >> v0);
}

BOOL sub_1003186A0()
{
  return sub_1003FAF7C() == 150;
}

BOOL sub_1003186C0(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 1) < 0x7CF;
}

BOOL sub_1003186D4(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 22) < 0x7BA;
}

BOOL sub_1003186E8(uint64_t a1)
{
  return *(_DWORD *)(a1 + 712) == 22;
}

BOOL sub_1003186F8(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 22) < 0x7BA;
}

uint64_t sub_10031870C(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 712);
  if (v1 - 1 > 0x7CE) {
    return 0;
  }
  if (v1 > 0x16) {
    return 2;
  }
  return v1 == 22;
}

uint64_t sub_100318740(_DWORD *a1)
{
  if ((a1[178] - 22) > 0x7B9) {
    return 0;
  }
  else {
    return (*(unsigned int (**)(_DWORD *))(*(void *)a1 + 24))(a1) ^ 1;
  }
}

BOOL sub_100318794(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 712);
  if (!v1) {
    return 0;
  }
  if (v1 <= 0x7CF)
  {
    if (v1 <= 0x13) {
      return 0;
    }
    return *(unsigned char *)(a1 + 1208) == 0;
  }
  uint64_t v2 = 0;
  if (v1 <= 0xF9F && v1 != 2000) {
    return *(unsigned char *)(a1 + 1208) == 0;
  }
  return v2;
}

uint64_t sub_1003187DC(_DWORD *a1)
{
  unsigned int v1 = a1[178];
  if (!v1) {
    return 0;
  }
  if (v1 > 0x7CF) {
    return v1 - 2001 < 0x7CF;
  }
  if (v1 < 0x14) {
    return 0;
  }
  if ((*(unsigned int (**)(_DWORD *))(*(void *)a1 + 24))(a1))
  {
    unsigned int v1 = a1[178];
    if (v1 >= 0x7D0) {
      return v1 - 2001 < 0x7CF;
    }
    return 0;
  }
  return 1;
}

BOOL sub_100318864(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 2001) < 0x7CF;
}

BOOL sub_100318878(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 712);
  if (!v1) {
    return 0;
  }
  if (v1 <= 0x7CF) {
    return v1 > 0x12;
  }
  return v1 < 0xFA0 && v1 != 2000;
}

BOOL sub_1003188B4(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 20) < 0x7BC;
}

BOOL sub_1003188C8(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 23) < 0x7B9;
}

uint64_t sub_1003188DC(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 712);
  if (v1 < 0x7D0)
  {
    if (v1 > 0xE) {
      return 1;
    }
  }
  else if (v1 <= 0xF9F && v1 != 2000)
  {
    return 1;
  }
  return 0;
}

uint64_t sub_100318910(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 712);
  if (!v1) {
    return v1 == 6000;
  }
  if (v1 > 0x7CF)
  {
    if (v1 > 0xF9F || v1 == 2000) {
      return v1 == 6000;
    }
    return 1;
  }
  if (v1 - 19 < 7) {
    return 1;
  }
  return v1 == 6000;
}

uint64_t sub_100318958(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 712);
  if (!v1) {
    return v1 == 6000;
  }
  if (v1 > 0x7CF)
  {
    if (v1 > 0xF9F || v1 == 2000) {
      return v1 == 6000;
    }
    return 1;
  }
  if (v1 - 19 < 7) {
    return 1;
  }
  return v1 == 6000;
}

BOOL sub_1003189A0(uint64_t a1)
{
  return *(_DWORD *)(a1 + 712) == 25;
}

BOOL sub_1003189B0(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 712);
  if (v1 < 0x7D0)
  {
    if (v1 - 19 < 7) {
      return 1;
    }
  }
  else if (v1 <= 0xF9F && v1 != 2000)
  {
    return 1;
  }
  return v1 >> 4 > 0x176;
}

uint64_t sub_1003189F0(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 712);
  if (v1 < 0x7D0)
  {
    if (v1 - 19 < 4) {
      return 1;
    }
  }
  else if (v1 <= 0xF9F && v1 != 2000)
  {
    return 1;
  }
  return 0;
}

BOOL sub_100318A28(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 2001) < 0x7CF;
}

uint64_t sub_100318A3C(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 712);
  if (!v1) {
    return 0;
  }
  if (v1 > 0x7CF)
  {
    if (v1 <= 0xF9F && v1 != 2000) {
      return 2;
    }
    return 0;
  }
  if (v1 < 0x13) {
    return 0;
  }
  if (v1 < 0x16) {
    return 1;
  }
  else {
    return 2;
  }
}

uint64_t sub_100318A88(_DWORD *a1)
{
  int v1 = a1[178];
  if ((v1 - 1) <= 0x7CE
    && ((v1 - 22) < 2
     || v1 == 25 && ((*(uint64_t (**)(_DWORD *))(*(void *)a1 + 56))(a1) & 1) != 0))
  {
    return 32;
  }
  else
  {
    return 8;
  }
}

uint64_t sub_100318AF4(_DWORD *a1)
{
  uint64_t result = _os_feature_enabled_impl();
  if (result)
  {
    unsigned int v3 = a1[178];
    if (v3 - 22 <= 0x7B9
      && (v3 < 0x18 || v3 == 25 && ((*(uint64_t (**)(_DWORD *))(*(void *)a1 + 48))(a1) & 1) == 0))
    {
      return 8;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL sub_100318B84(uint64_t a1)
{
  (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 16))(&v3);
  int v1 = std::string::compare(&v3, "C2");
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
  return v1 >= 0;
}

unint64_t sub_100318BFC(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 712) - 20) < 6) {
    return 1;
  }
  int v2 = sub_1003FAF7C();
  if ((v2 - 156) <= 0x3D) {
    return (0x3CFFC3C3C0000003uLL >> (v2 + 100)) & 1;
  }
  else {
    return 0;
  }
}

unint64_t sub_100318C4C(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 712) - 20) < 6) {
    return 1;
  }
  int v2 = sub_1003FAF7C();
  if ((v2 - 156) <= 0x3D) {
    return (0x3CFFC3C3C0000003uLL >> (v2 + 100)) & 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_100318C9C(uint64_t a1)
{
  uint64_t result = sub_100351F98();
  if (result)
  {
    std::string v3 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 2464);
    return v3(a1);
  }
  return result;
}

uint64_t sub_100318D0C(uint64_t a1)
{
  if (!MGGetBoolAnswer() || !sub_100351F98()) {
    return 0;
  }
  int v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 2464);

  return v2(a1);
}

uint64_t sub_100318D94(_DWORD *a1)
{
  uint64_t result = MGGetBoolAnswer();
  if (result)
  {
    uint64_t result = sub_100351F98();
    if (result)
    {
      uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 2464))(a1);
      if (result)
      {
        if ((a1[178] - 22) > 3)
        {
          return 0;
        }
        else
        {
          uint64_t v3 = sub_100035F54();
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 352))(v3);
          if (result) {
            return (int)sub_1003FAF7C() > 41;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_100318E5C()
{
  if (qword_100A12188 != -1) {
    dispatch_once(&qword_100A12188, &stru_1009A6578);
  }
  return byte_100A12182;
}

void sub_100318EA0(id a1)
{
  byte_100A12182 = MGGetBoolAnswer();
}

uint64_t sub_100318EC8(uint64_t a1)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 2360))(a1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 2368))(a1) & 1) != 0)
  {
    return 1;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 2384);

  return v3(a1);
}

uint64_t sub_100318F98()
{
  unsigned int v0 = sub_1003FAF7C() - 156;
  return (v0 < 0x3E) & (0x3CFFC3C3C0000003uLL >> v0);
}

uint64_t sub_100318FD0()
{
  return 1;
}

uint64_t sub_100318FD8(uint64_t a1)
{
  return (char)-*(unsigned char *)(a1 + 1202);
}

uint64_t sub_100318FE8()
{
  return 0;
}

uint64_t sub_100318FF0(_DWORD *a1)
{
  if ((*(uint64_t (**)(_DWORD *))(*(void *)a1 + 2448))(a1)) {
    return 0;
  }
  unsigned int v2 = a1[178];
  if (!v2) {
    return 0;
  }
  if (v2 > 0x7CF) {
    return v2 - 2001 < 0x7CF;
  }
  if (v2 < 0x15) {
    return 0;
  }
  if ((*(unsigned int (**)(_DWORD *))(*(void *)a1 + 24))(a1))
  {
    unsigned int v2 = a1[178];
    if (v2 >= 0x7D0) {
      return v2 - 2001 < 0x7CF;
    }
    return 0;
  }
  return 1;
}

BOOL sub_1003190AC(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 712);
  if (!v1) {
    return 0;
  }
  if (v1 <= 0x7CF) {
    return v1 > 0x15;
  }
  return v1 < 0xFA0 && v1 != 2000;
}

BOOL sub_1003190E8(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 1180) & 8) == 0) {
    return 0;
  }
  unsigned int v1 = *(_DWORD *)(a1 + 712);
  if (!v1) {
    return 0;
  }
  if (v1 <= 0x7CF) {
    return v1 > 0x12;
  }
  BOOL result = 0;
  if (v1 <= 0xF9F && v1 != 2000) {
    return 1;
  }
  return result;
}

BOOL sub_10031912C(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 1180) & 8) == 0) {
    return 0;
  }
  unsigned int v1 = *(_DWORD *)(a1 + 712);
  if (!v1) {
    return 0;
  }
  if (v1 <= 0x7CF) {
    return v1 > 0x15;
  }
  BOOL result = 0;
  if (v1 <= 0xF9F && v1 != 2000) {
    return 1;
  }
  return result;
}

BOOL sub_100319170(uint64_t a1)
{
  return (*(unsigned char *)(a1 + 1180) & 8) != 0 && (*(_DWORD *)(a1 + 712) - 21) < 0x7BB;
}

uint64_t sub_100319194(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 1183) & 0x10) == 0) {
    return 0;
  }
  int v1 = *(_DWORD *)(a1 + 712);
  if ((v1 - 1) > 0x7CE) {
    return 0;
  }
  if (v1 == 21) {
    return 1;
  }
  (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 16))(&v4);
  BOOL v2 = std::string::compare(&v4, "C2") >= 0;
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  return v2;
}

BOOL sub_10031923C(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 19) < 0x7BD;
}

unint64_t sub_100319250(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 712) - 19) < 0x7BD) {
    return 1;
  }
  int v2 = sub_1003FAF7C();
  if ((v2 - 156) <= 0x3D) {
    return (0x3CFFC3C3C0000003uLL >> (v2 + 100)) & 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_1003192A0()
{
  return 0;
}

BOOL sub_1003192A8(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 23) < 0x7B9;
}

BOOL sub_1003192BC(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 23) < 0x7B9;
}

uint64_t sub_1003192D0(uint64_t a1)
{
  uint64_t result = _os_feature_enabled_impl();
  if (result) {
    return (*(_DWORD *)(a1 + 712) - 23) < 0x7B9;
  }
  return result;
}

uint64_t sub_100319318()
{
  return _os_feature_enabled_impl();
}

BOOL sub_10031932C(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 23) < 0x7B9;
}

BOOL sub_100319340(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 23) < 0x7B9;
}

BOOL sub_100319354(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 23) < 0x7B9;
}

BOOL sub_100319368(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 22) < 0x7BA;
}

BOOL sub_10031937C(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 23) < 0x7B9;
}

uint64_t sub_100319390()
{
  return 0;
}

uint64_t sub_100319398(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 712) = a2;
  return 0;
}

uint64_t sub_1003193A4()
{
  return 0;
}

uint64_t sub_1003193AC()
{
  return 0;
}

uint64_t sub_1003193B4(uint64_t a1)
{
  char v18 = 0;
  uint64_t v2 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "OverrideSupportLEAdvTxPowerIncrease");
  int v3 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v2 + 72))(v2, buf, __p, &v18);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v20 < 0)
  {
    operator delete(*(void **)buf);
    if (v3) {
      goto LABEL_5;
    }
LABEL_12:
    uint64_t v7 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 384))(v7))
    {
      unsigned int v8 = *(_DWORD *)(a1 + 712);
      if (v8 - 1 <= 0x7CE)
      {
        if (v8 == 23)
        {
          int v9 = sub_1003FAF7C();
          return (v9 & 0xFFFFFFFD) != 0xE9 && (v9 & 0xFFFFFFFE) != 236 && (v9 - 238) > 8;
        }
        if (v8 > 0x17) {
          return 1;
        }
      }
    }
    else
    {
      uint64_t v12 = sub_100035F54();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 352))(v12))
      {
        int v13 = *(_DWORD *)(a1 + 712);
        if ((v13 - 1) <= 0x7CE)
        {
          if (v13 == 22)
          {
            if (sub_1003FAF7C() == 43 || sub_1003FAF7C() == 42) {
              return 1;
            }
            int v13 = *(_DWORD *)(a1 + 712);
          }
          if ((v13 - 23) < 0x7B9) {
            return 1;
          }
        }
      }
      else
      {
        uint64_t v14 = sub_100035F54();
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 344))(v14);
        if (!result) {
          return result;
        }
        unsigned int v15 = sub_1003FAF7C() - 207;
        if (v15 <= 0xA) {
          return (0x79Fu >> v15) & 1;
        }
      }
    }
    return 0;
  }
  if (!v3) {
    goto LABEL_12;
  }
LABEL_5:
  std::string v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (v18) {
      char v5 = "enabled";
    }
    else {
      char v5 = "disabled";
    }
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Warning: Support LE Adv Tx Power Increase - %{public}s", buf, 0xCu);
  }
  return v18 != 0;
}

void sub_100319660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10031969C()
{
  return 0;
}

BOOL sub_1003196B8()
{
  char v10 = 0;
  uint64_t v0 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "OverrideSupportLEConnTxPowerIncrease");
  int v1 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v0 + 72))(v0, buf, __p, &v10);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v12 < 0)
  {
    operator delete(*(void **)buf);
    if (v1) {
      goto LABEL_5;
    }
  }
  else if (v1)
  {
LABEL_5:
    uint64_t v2 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      if (v10) {
        int v3 = "enabled";
      }
      else {
        int v3 = "disabled";
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Warning: Support LE Connection Tx Power Increase - %{public}s", buf, 0xCu);
    }
    return v10 != 0;
  }
  uint64_t v5 = sub_100035F54();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v5 + 384))(v5) & 1) == 0)
  {
    uint64_t v6 = sub_100035F54();
    if (((*(uint64_t (**)(uint64_t))(*(void *)v6 + 352))(v6) & 1) == 0)
    {
      uint64_t v7 = sub_100035F54();
      (*(void (**)(uint64_t))(*(void *)v7 + 344))(v7);
    }
  }
  return 0;
}

void sub_1003198AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003198E8(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 712) - 20) >= 0x7BC) {
    return 48;
  }
  else {
    return 32;
  }
}

BOOL sub_100319904(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 2001) < 0x7CF;
}

BOOL sub_100319918(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 2001) < 0x7CF;
}

BOOL sub_10031992C(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 2001) < 0x7CF;
}

BOOL sub_100319940(uint64_t a1)
{
  return *(_DWORD *)(a1 + 712) > 0x16u;
}

uint64_t sub_100319950(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 712);
  if (v1)
  {
    if (v1 > 0x7CF)
    {
      if (v1 - 2002 < 0x7CE) {
        return 1;
      }
    }
    else if (v1 - 20 < 6)
    {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_100319988()
{
  return 0;
}

BOOL sub_100319990(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 712);
  if (!v1) {
    return 0;
  }
  if (v1 > 0x7CF) {
    return v1 <= 0xF9F && v1 != 2000;
  }
  return v1 > 0x15;
}

uint64_t sub_1003199CC(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x58u);
}

uint64_t sub_100319A2C(uint64_t a1, char a2, __int16 a3, uint64_t a4, int a5)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_100319AAC;
  v6[3] = &unk_1009A6598;
  void v6[4] = a4;
  __int16 v7 = a3;
  char v8 = a2;
  return sub_10001A7D4(a1, 88, a5, v6, 0);
}

uint64_t sub_100319AAC(uint64_t a1)
{
  unint64_t v2 = sub_10022A5E0(*(void *)(a1 + 32));
  int v13 = v2;
  __int16 v14 = WORD2(v2);
  uint64_t v3 = sub_100197A30((uint64_t)&v13);
  if (v3)
  {
    uint64_t v4 = sub_1002010A4(v3, *(unsigned __int16 *)(a1 + 40), *(unsigned __int8 *)(a1 + 42));
    uint64_t v5 = v4;
    if (*(unsigned char *)(a1 + 42) || v4 != 408)
    {
LABEL_8:
      if (!v5) {
        return v5;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v5 = 101;
  }
  uint64_t v6 = sub_100197AF8(*(void *)(a1 + 32));
  if (v6)
  {
    uint64_t v5 = sub_1002010A4(v6, *(unsigned __int16 *)(a1 + 40), *(unsigned __int8 *)(a1 + 42));
    goto LABEL_8;
  }
LABEL_9:
  __int16 v7 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
  {
    if (*(unsigned char *)(a1 + 42)) {
      char v9 = "enable";
    }
    else {
      char v9 = "disable";
    }
    sub_10004BDF8();
    if (v12 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)std::string buf = 136315650;
    unint64_t v16 = v9;
    __int16 v17 = 2080;
    char v18 = p_p;
    __int16 v19 = 1024;
    int v20 = v5;
    _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Could not %s phy statistics for address %s result %d", buf, 0x1Cu);
    if (v12 < 0) {
      operator delete(__p);
    }
  }
  return v5;
}

uint64_t sub_100319C4C(uint64_t a1, int a2, __int16 a3, uint64_t a4, int a5)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_100319CCC;
  v6[3] = &unk_1009A65B8;
  void v6[4] = a4;
  __int16 v8 = a3;
  int v7 = a2;
  return sub_10001A7D4(a1, 88, a5, v6, 0);
}

uint64_t sub_100319CCC(uint64_t a1)
{
  unint64_t v2 = sub_10022A5E0(*(void *)(a1 + 32));
  int v13 = v2;
  __int16 v14 = WORD2(v2);
  uint64_t v3 = sub_100197A30((uint64_t)&v13);
  if (v3)
  {
    uint64_t v4 = sub_1002011C4(v3, *(unsigned __int16 *)(a1 + 44), *(unsigned __int8 *)(a1 + 40));
    uint64_t v5 = v4;
    if (*(_DWORD *)(a1 + 40) || v4 != 408)
    {
LABEL_8:
      if (!v5) {
        return v5;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v5 = 101;
  }
  uint64_t v6 = sub_100197AF8(*(void *)(a1 + 32));
  if (v6)
  {
    uint64_t v5 = sub_1002011C4(v6, *(unsigned __int16 *)(a1 + 44), *(unsigned __int8 *)(a1 + 40));
    goto LABEL_8;
  }
LABEL_9:
  int v7 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
  {
    sub_10004BDF8();
    if (v12 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    int v10 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)std::string buf = 136315650;
    unint64_t v16 = p_p;
    __int16 v17 = 1024;
    int v18 = v10;
    __int16 v19 = 1024;
    int v20 = v5;
    _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Could not config dual core phy statistics for address %s, config %d, result %d", buf, 0x18u);
    if (v12 < 0) {
      operator delete(__p);
    }
  }
  return v5;
}

uint64_t sub_100319E50(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xC4u);
}

uint64_t sub_100319EB0(uint64_t a1, int a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_100319F2C;
  v3[3] = &unk_1009A65D8;
  void v3[4] = a1;
  char v4 = a2;
  return sub_10001A7D4(a1, 196, a2, v3, 0);
}

uint64_t sub_100319F2C(uint64_t a1)
{
  unsigned int v1 = *(_DWORD **)(a1 + 32);
  if (v1[178] == 9)
  {
    std::string __p = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v2 = sub_1003705E4();
    int v3 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v2 + 64))(v2, &__p);
    char v4 = HIBYTE(v18);
    if (v3) {
      goto LABEL_3;
    }
    if (v18 < 0)
    {
      uint64_t v12 = v17;
      if (!v17)
      {
LABEL_4:
        operator delete(__p);
        goto LABEL_5;
      }
      p_p = (char *)__p;
      goto LABEL_23;
    }
    if (HIBYTE(v18))
    {
      p_p = (char *)&__p;
      uint64_t v12 = HIBYTE(v18);
LABEL_23:
      if (v12 >= 2)
      {
        int v13 = &p_p[v12];
        __int16 v14 = p_p;
        do
        {
          unsigned int v15 = (char *)memchr(v14, 66, v12 - 1);
          if (!v15) {
            break;
          }
          if (*(_WORD *)v15 == 12354)
          {
            if (v15 != v13 && v15 - p_p != -1) {
              v1[295] &= ~0x100000u;
            }
            break;
          }
          __int16 v14 = v15 + 1;
          uint64_t v12 = v13 - (unsigned char *)v14;
        }
        while (v13 - (unsigned char *)v14 >= 2);
      }
LABEL_3:
      if ((v4 & 0x80) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
LABEL_5:
  uint64_t v5 = sub_10003FB34();
  if (sub_100354F18(v5, 100)) {
    v1[295] |= 0x2000000u;
  }
  if ((*(unsigned int (**)(_DWORD *))(*(void *)v1 + 2632))(v1)) {
    v1[295] |= 0x4000000u;
  }
  if ((*(unsigned int (**)(_DWORD *))(*(void *)v1 + 2256))(v1)) {
    v1[295] |= 0x1000000u;
  }
  uint64_t v6 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 744))(v6)) {
    v1[295] |= 0x8000000u;
  }
  uint64_t v7 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 760))(v7)) {
    v1[295] |= 0x10000000u;
  }
  __int16 v8 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    int v9 = v1[295];
    LODWORD(__p) = 67109120;
    HIDWORD(__p) = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "fEnabledFeatures: %x", (uint8_t *)&__p, 8u);
  }
  return sub_1001F9D50();
}

void sub_10031A200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10031A224(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x104u);
}

uint64_t sub_10031A284(uint64_t a1, int a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10031A300;
  v3[3] = &unk_1009A65D8;
  void v3[4] = a1;
  char v4 = a2;
  return sub_10001A7D4(a1, 260, a2, v3, 0);
}

uint64_t sub_10031A300(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(v1 + 1184);
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "fEnabledFilteringFeatures: %x", (uint8_t *)v5, 8u);
  }
  return sub_1001F9DDC();
}

uint64_t sub_10031A3D8(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xC5u);
}

uint64_t sub_10031A438(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_10031A4B8;
  v5[3] = &unk_1009A65F8;
  void v5[4] = a2;
  void v5[5] = a3;
  char v6 = a4;
  return sub_10001A7D4(a1, 197, a4, v5, 0);
}

uint64_t sub_10031A4B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (BYTE6(v2))
  {
    if (BYTE6(v2) != 1 || (~v2 & 0xC00000000000) != 0)
    {
      char v4 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT))
      {
        int v6 = 136446210;
        uint64_t v7 = "BTAddressIsPublic(address) || BTAddressIsStatic(address)";
        _os_log_fault_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", (uint8_t *)&v6, 0xCu);
        uint64_t v2 = *(void *)(a1 + 32);
      }
    }
  }
  LOBYTE(v6) = BYTE5(v2);
  BYTE1(v6) = BYTE4(v2);
  BYTE2(v6) = BYTE3(v2);
  HIBYTE(v6) = BYTE2(v2);
  LOBYTE(v7) = BYTE1(v2);
  BYTE1(v7) = v2;
  return sub_1001F9F90((v2 & 0xFF000000000000) != 0, (uint64_t)&v6, *(void *)(a1 + 40));
}

uint64_t sub_10031A5F0(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xFDu);
}

uint64_t sub_10031A650(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_10031A6CC;
  v5[3] = &unk_1009A65D8;
  void v5[4] = a2;
  char v6 = a4;
  return sub_10001A7D4(a1, 253, a4, v5, 0);
}

uint64_t sub_10031A6CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (BYTE6(v2))
  {
    if (BYTE6(v2) != 1 || (~v2 & 0xC00000000000) != 0)
    {
      char v4 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT))
      {
        int v6 = 136446210;
        uint64_t v7 = "BTAddressIsPublic(address) || BTAddressIsStatic(address)";
        _os_log_fault_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", (uint8_t *)&v6, 0xCu);
        uint64_t v2 = *(void *)(a1 + 32);
      }
    }
  }
  return sub_1001F9EF4(0, v2);
}

uint64_t sub_10031A7CC(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xC6u);
}

uint64_t sub_10031A82C(uint64_t a1, uint64_t a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_10031A8A4;
  void v4[3] = &unk_1009A65D8;
  void v4[4] = a2;
  char v5 = a3;
  return sub_10001A7D4(a1, 198, a3, v4, 0);
}

uint64_t sub_10031A8A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (BYTE6(v2))
  {
    if (BYTE6(v2) != 1 || (~v2 & 0xC00000000000) != 0)
    {
      char v4 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT))
      {
        int v6 = 136446210;
        uint64_t v7 = "BTAddressIsPublic(address) || BTAddressIsStatic(address)";
        _os_log_fault_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", (uint8_t *)&v6, 0xCu);
        uint64_t v2 = *(void *)(a1 + 32);
      }
    }
  }
  LOBYTE(v6) = BYTE5(v2);
  BYTE1(v6) = BYTE4(v2);
  BYTE2(v6) = BYTE3(v2);
  HIBYTE(v6) = BYTE2(v2);
  LOBYTE(v7) = BYTE1(v2);
  BYTE1(v7) = v2;
  return sub_1001FA028((v2 & 0xFF000000000000) != 0, (uint64_t)&v6);
}

uint64_t sub_10031A9D4(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xC7u);
}

uint64_t sub_10031AA34(uint64_t a1, int a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10031AAAC;
  v3[3] = &unk_1009A6618;
  char v4 = a2;
  return sub_10001A7D4(a1, 199, a2, v3, 0);
}

uint64_t sub_10031AAAC()
{
  return sub_1001FA0C0();
}

uint64_t sub_10031AAC8(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xC8u);
}

uint64_t sub_10031AB28(uint64_t a1, int a2)
{
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 72);
  if (*(_DWORD *)(sub_10003FB34() + 712) && *(_DWORD *)(sub_10003FB34() + 712) <= 0x7CFu)
  {
    char v4 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
    {
      char v5 = sub_10001AA04(a1, 200);
      *(_DWORD *)std::string buf = 136446210;
      char v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Sending: %{public}s", buf, 0xCu);
    }
    if (sub_10001B700(a1, 200))
    {
      buf[0] = 0;
      sub_10001B8E0(buf);
      int v6 = sub_1001FA14C();
      sub_10001B910(buf);
      if (!v6)
      {
        if (!a2) {
          goto LABEL_11;
        }
        if (qword_1009F8070 != -1) {
          dispatch_once(&qword_1009F8070, &stru_1009A6E78);
        }
        int v6 = sub_10001B918((uint64_t)off_1009F8068, 200);
        if (!v6)
        {
LABEL_11:
          int v6 = 0;
          *(unsigned char *)(a1 + 1176) = 1;
        }
      }
      sub_1000262B8(a1, 0xC8u);
      sub_10001B8AC(buf);
      uint64_t v7 = v6 != 0;
    }
    else
    {
      uint64_t v7 = 2;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 1180) |= 0x100000u;
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 344))(a1, 1)) {
      *(_DWORD *)(a1 + 1180) &= ~0x100000u;
    }
    else {
      *(unsigned char *)(a1 + 1176) = 1;
    }
    *(_DWORD *)(a1 + 1184) |= 1u;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 352))(a1, 1);
    uint64_t v7 = 0;
  }
  sub_10003AFB4((uint64_t)v9);
  return v7;
}

void sub_10031AD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10031ADAC(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xC8u);
}

uint64_t sub_10031AE0C(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xC9u);
}

uint64_t sub_10031AE6C(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 1176)) {
    return 0;
  }
  if (*(_DWORD *)(sub_10003FB34() + 712) && *(_DWORD *)(sub_10003FB34() + 712) <= 0x7CFu)
  {
    sub_10001A7D4(a1, 200, a2, &stru_1009A6658, 0);
    *(unsigned char *)(a1 + 1176) = 0;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    void v8[2] = sub_10031B158;
    v8[3] = &unk_1009A65D8;
    void v8[4] = a1;
    char v9 = a2;
    return sub_10001A7D4(a1, 201, a2, v8, 0);
  }
  else
  {
    *(int8x8_t *)(a1 + 1180) = vand_s8(*(int8x8_t *)(a1 + 1180), (int8x8_t)0xFFFFFFFEFFEFFFFFLL);
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 344))(a1, 1))
    {
      BOOL v4 = 0;
      *(_DWORD *)(a1 + 1180) |= 0x100000u;
    }
    else
    {
      *(unsigned char *)(a1 + 1176) = 0;
      char v5 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 136446210;
        char v11 = sub_10001AA04(a1, 201);
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Sending: %{public}s", buf, 0xCu);
      }
      if (!sub_10001B700(a1, 201)) {
        return 2;
      }
      buf[0] = 0;
      sub_10001B8E0(buf);
      int v6 = sub_1001FA1D8();
      sub_10001B910(buf);
      if (!v6)
      {
        if (a2)
        {
          if (qword_1009F8070 != -1) {
            dispatch_once(&qword_1009F8070, &stru_1009A6E78);
          }
          sub_10001B918((uint64_t)off_1009F8068, 201);
        }
        *(unsigned char *)(a1 + 1176) = 1;
      }
      sub_1000262B8(a1, 0xC9u);
      sub_10001B8AC(buf);
      BOOL v4 = v6 != 0;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 352))(a1, 1);
  }
  return v4;
}

void sub_10031B128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10001B8AC(va);
  _Unwind_Resume(a1);
}

int sub_10031B144(id a1)
{
  return sub_1001FA1D8();
}

uint64_t sub_10031B158(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v1 + 2448))(v1))
  {
    char v4 = 0;
    return sub_1001FA420((uint64_t)&v4, 0);
  }
  else if ((*(unsigned int (**)(uint64_t))(*(void *)v1 + 2440))(v1))
  {
    char v3 = 0;
    return sub_1001FA388((uint64_t)&v3);
  }
  else
  {
    return sub_1001FA264();
  }
}

uint64_t sub_10031B2A4(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xC9u);
}

uint64_t sub_10031B304(uint64_t a1, long long *a2, char a3, char a4, char a5, char a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  _DWORD v10[2] = sub_10031B3D4;
  v10[3] = &unk_1009A6678;
  long long v11 = *a2;
  int v12 = *((_DWORD *)a2 + 4);
  char v13 = a3;
  char v14 = a4;
  char v15 = a5;
  char v16 = a6;
  void v10[4] = a1;
  void v10[5] = a7;
  v10[6] = a8;
  unsigned __int8 v17 = a9;
  return sub_10001A7D4(a1, 201, a9, v10, 0);
}

uint64_t sub_10031B3D4(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)(a1 + 32);
  if (!v1[1176]) {
    return 114;
  }
  v5[0] = 0;
  v5[1] = 0;
  uint64_t v3 = sub_10071D240((unsigned __int8 *)(a1 + 56), v5);
  if ((*(unsigned int (**)(unsigned char *))(*(void *)v1 + 2448))(v1)) {
    return sub_1001FA420((uint64_t)v5, v3);
  }
  if (!(*(unsigned int (**)(unsigned char *))(*(void *)v1 + 2440))(v1)) {
    return sub_1001FA2F0((uint64_t)v5);
  }
  if ((*(unsigned char *)(a1 + 79) || *(void *)(a1 + 40) || *(void *)(a1 + 48))
    && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
  {
    sub_100757288();
  }
  return sub_1001FA388((uint64_t)v5);
}

uint64_t sub_10031B5B4(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  long long v8 = *a2;
  int v9 = *((_DWORD *)a2 + 4);
  return (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, void, void, void, char))(*(void *)a1 + 424))(a1, &v8, a3, a4, a5, 0, 0, 0, a6);
}

uint64_t sub_10031B64C(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xC9u);
}

uint64_t sub_10031B6AC(uint64_t a1, long long *a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_10031B760;
  void v4[3] = &unk_1009A6698;
  void v4[4] = a1;
  long long v5 = *a2;
  int v6 = *((_DWORD *)a2 + 4);
  char v7 = a3;
  return sub_10001A7D4(a1, 201, a3, v4, 0);
}

uint64_t sub_10031B760(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)(a1 + 32);
  if (!v1[1176]) {
    return 114;
  }
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v2 = sub_10071D240((unsigned __int8 *)(a1 + 40), v4);
  if ((*(unsigned int (**)(unsigned char *))(*(void *)v1 + 2448))(v1)) {
    return sub_1001FA420((uint64_t)v4, v2);
  }
  if ((*(unsigned int (**)(unsigned char *))(*(void *)v1 + 2440))(v1)) {
    return sub_1001FA388((uint64_t)v4);
  }
  return sub_1001FA2F0((uint64_t)v4);
}

uint64_t sub_10031B8F4(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x9Au);
}

uint64_t sub_10031B954(uint64_t a1, uint64_t a2, char a3, char a4, int a5)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_10031B9D8;
  v6[3] = &unk_1009A6598;
  void v6[4] = a2;
  char v7 = a3;
  char v8 = a4;
  char v9 = a5;
  return sub_10001A7D4(a1, 154, a5, v6, 0);
}

uint64_t sub_10031B9D8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 42)) {
    uint64_t v1 = sub_10031B8F4;
  }
  else {
    uint64_t v1 = 0;
  }
  return sub_1001F83A8(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 41), (uint64_t)v1);
}

uint64_t sub_10031BA04(int a1, int a2)
{
  char v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "leaBuffersize %d", (uint8_t *)v6, 8u);
  }
  LOBYTE(dword_100A12190) = a2;
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0x9Cu);
}

uint64_t sub_10031BAF0(uint64_t a1, uint64_t a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10031BB80;
  v3[3] = &unk_100997528;
  void v3[4] = a2;
  return sub_10001A7D4(a1, 156, 1, &stru_1009A66B8, v3);
}

int sub_10031BB6C(id a1)
{
  return sub_1001F8290();
}

uint64_t sub_10031BB80(uint64_t result)
{
  **(void **)(result + 32) = dword_100A12190;
  return result;
}

uint64_t sub_10031BB94(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x9Du);
}

uint64_t sub_10031BBF4(uint64_t a1, char a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_10031BC6C;
  void v4[3] = &unk_1009A66D8;
  char v5 = a2;
  char v6 = a3;
  return sub_10001A7D4(a1, 157, a3, v4, 0);
}

uint64_t sub_10031BC6C()
{
  return sub_1001F831C();
}

uint64_t sub_10031BC90(int a1, char a2)
{
  LOBYTE(dword_100A12190) = a2;
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xCEu);
}

uint64_t sub_10031BCF8(uint64_t a1, unsigned char *a2)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 2400))(a1))
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    void v5[2] = sub_10031BDD8;
    v5[3] = &unk_100997528;
    void v5[4] = a2;
    return sub_10001A7D4(a1, 206, 1, &stru_1009A66F8, v5);
  }
  else
  {
    uint64_t result = 0;
    *a2 = 0;
  }
  return result;
}

int sub_10031BDC4(id a1)
{
  return sub_1001FA54C();
}

uint64_t sub_10031BDD8(uint64_t result)
{
  **(unsigned char **)(result + 32) = dword_100A12190;
  return result;
}

uint64_t sub_10031BDEC(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xCFu);
}

uint64_t sub_10031BE4C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 2400))(a1)) {
    return 1;
  }
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, a1 + 72);
  char v6 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    char v7 = sub_10001AA04(a1, 207);
    *(_DWORD *)std::string buf = 136446210;
    char v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Sending: %{public}s", buf, 0xCu);
  }
  if (sub_10001B700(a1, 207))
  {
    uint64_t v8 = sub_10031C090(a1);
    if (!v8)
    {
      buf[0] = 0;
      sub_10001B8E0(buf);
      int v9 = sub_1001FA5D8(a2, a3);
      sub_10001B910(buf);
      if (!v9)
      {
        if (qword_1009F8070 != -1) {
          dispatch_once(&qword_1009F8070, &stru_1009A6E78);
        }
        int v9 = sub_10001B918((uint64_t)off_1009F8068, 207);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 632))(a1, 1);
      }
      uint64_t v8 = v9 != 0;
      sub_10001B8AC(buf);
    }
    sub_1000262B8(a1, 0xCFu);
  }
  else
  {
    uint64_t v8 = 2;
  }
  sub_10003AFB4((uint64_t)v11);
  return v8;
}

void sub_10031C05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10031C090(uint64_t a1)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 2400))(a1)) {
    return 1;
  }
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_10031C56C;
  void v4[3] = &unk_1009A6738;
  void v4[4] = a1;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10031C588;
  v3[3] = &unk_100997528;
  void v3[4] = a1;
  return sub_10001A7D4(a1, 205, 1, v4, v3);
}

uint64_t sub_10031C190(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xD1u);
}

uint64_t sub_10031C1F0(uint64_t a1, uint64_t a2, __int16 a3, int a4)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 2400))(a1)) {
    return 1;
  }
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_10031C2CC;
  v9[3] = &unk_1009A6598;
  v9[4] = a2;
  __int16 v10 = a3;
  char v11 = a4;
  return sub_10001A7D4(a1, 209, a4, v9, 0);
}

uint64_t sub_10031C2CC(uint64_t a1)
{
  return sub_1001FA674(*(void *)(a1 + 32), *(unsigned __int16 *)(a1 + 40));
}

uint64_t sub_10031C2F4(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xD2u);
}

uint64_t sub_10031C354(uint64_t a1)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 2400))(a1)) {
    return 1;
  }
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10031C42C;
  v3[3] = &unk_100997528;
  void v3[4] = a1;
  return sub_10001A7D4(a1, 210, 1, &stru_1009A6718, v3);
}

int sub_10031C418(id a1)
{
  return sub_1001FA710();
}

uint64_t sub_10031C42C(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 32) + 1180) &= ~0x10000u;
  return result;
}

uint64_t sub_10031C440(_DWORD *a1, int a2)
{
  if (!(*(unsigned int (**)(_DWORD *))(*(void *)a1 + 2400))(a1)) {
    return 1;
  }
  int v4 = a1[295];
  if (!a2)
  {
    if ((v4 & 0x10000) != 0)
    {
      unsigned int v5 = v4 & 0xFFFEFFFF;
      goto LABEL_9;
    }
    return 0;
  }
  if ((v4 & 0x10000) != 0) {
    return 0;
  }
  unsigned int v5 = v4 | 0x10000;
LABEL_9:
  a1[295] = v5;
  char v7 = *(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a1 + 344);

  return v7(a1, 1);
}

uint64_t sub_10031C50C(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xCDu);
}

uint64_t sub_10031C56C()
{
  return sub_1001F8BF4();
}

uint64_t sub_10031C588(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 1192) = 1;
  return result;
}

uint64_t sub_10031C598(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xD3u);
}

uint64_t sub_10031C5F8(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, __int16 a5, char a6, char a7, char a8, uint64_t a9)
{
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_10031C6CC;
  v11[3] = &unk_1009A6758;
  __int16 v12 = a3;
  uint8_t v11[4] = a2;
  void v11[5] = a4;
  __int16 v13 = a5;
  char v14 = a6;
  char v15 = a7;
  char v16 = a8;
  v11[6] = a9;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  _DWORD v10[2] = sub_10031C720;
  v10[3] = &unk_100997528;
  void v10[4] = a1;
  return sub_10001A7D4(a1, 211, 1, v11, v10);
}

uint64_t sub_10031C6CC(uint64_t a1)
{
  return sub_1001FB074(*(void *)(a1 + 32), *(unsigned __int16 *)(a1 + 56), *(void *)(a1 + 40), *(unsigned __int16 *)(a1 + 58));
}

uint64_t sub_10031C720(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 760))(*(void *)(a1 + 32), 1);
}

uint64_t sub_10031C754(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xD4u);
}

uint64_t sub_10031C7B4(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, __int16 a5, char a6, char a7, uint64_t a8)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_10031C844;
  v9[3] = &unk_1009A6778;
  __int16 v10 = a3;
  v9[4] = a2;
  void v9[5] = a4;
  __int16 v11 = a5;
  char v12 = a6;
  char v13 = a7;
  void v9[6] = a8;
  return sub_10001A7D4(a1, 212, 1, v9, &stru_1009A6798);
}

uint64_t sub_10031C844(uint64_t a1)
{
  return sub_1001FB074(*(void *)(a1 + 32), *(unsigned __int16 *)(a1 + 56), *(void *)(a1 + 40), *(unsigned __int16 *)(a1 + 58));
}

uint64_t sub_10031C89C(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, int a8, uint64_t a9, char a10, char a11, char a12, char a13, char a14)
{
  unsigned int v14 = a5;
  LODWORD(v15) = a3;
  char v41 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 3544))(a1))
  {
    if (v15 >= 0x16) {
      uint64_t v15 = 22;
    }
    else {
      uint64_t v15 = v15;
    }
    if (v14 >= 0x16) {
      unsigned int v14 = 22;
    }
  }
  else
  {
    unsigned int v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 3528))(a1);
    if (v18 >= v15) {
      uint64_t v15 = v15;
    }
    else {
      uint64_t v15 = v18;
    }
    unsigned int v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 3528))(a1);
    if (v19 < v14) {
      unsigned int v14 = v19;
    }
  }
  uint64_t v20 = sub_10031CBC4(a1, a2, v15, a4, v14, a6, a7, a8, a9, a10, a11, a12, a13, a14, (uint64_t)&v41);
  if (!v20)
  {
    if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 3544))(a1)) {
      return 0;
    }
    unsigned int v21 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 3528))(a1);
    uint64_t v20 = 0;
    if (a5 < 0x17 || a3 < 0x17 || v21 < 0x17) {
      return v20;
    }
    unsigned int v22 = (unsigned __int16)(a3 - v15);
    size_t v23 = v22 >= 3 ? 3 : (unsigned __int16)(a3 - v15);
    size_t v24 = v22 <= 2 ? v23 ^ 3 : 0;
    bzero((char *)&__dst + v23, v24);
    memcpy(&__dst, (const void *)(a2 + 22), v23);
    unsigned int v25 = (unsigned __int16)(a5 - v14);
    size_t v26 = v25 >= 3 ? 3 : (unsigned __int16)(a5 - v14);
    size_t v27 = v25 <= 2 ? v26 ^ 3 : 0;
    bzero((char *)&v39 + v26, v27);
    memcpy(&v39, (const void *)(a4 + 22), v26);
    if (!v39 && v40 == 0 && !__dst && v38 == 0) {
      return 0;
    }
    uint64_t v20 = sub_10031CF64(a1, v41, (uint64_t)&__dst, 3, (uint64_t)&v39, 3);
    if (v20 && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_1007572F4();
    }
  }
  return v20;
}

uint64_t sub_10031CBC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, int a8, uint64_t a9, char a10, char a11, char a12, char a13, char a14, uint64_t a15)
{
  uint64_t v21 = sub_100035F54();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v21 + 592))(v21) & 1) != 0
    || (uint64_t v22 = sub_100035F54(), ((*(uint64_t (**)(uint64_t))(*(void *)v22 + 384))(v22) & 1) != 0)
    && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 3520))(a1))
  {
    char v23 = a12 | 2;
    if (a13) {
      char v23 = a12;
    }
    if (a14) {
      LOBYTE(v24) = v23;
    }
    else {
      LOBYTE(v24) = v23 | 4;
    }
    if (a7 == 19 && *(unsigned char *)(a1 + 1446)) {
      int v24 = *(_DWORD *)(a1 + 1448);
    }
    uint64_t v25 = sub_10003FB34();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v25 + 3544))(v25))
    {
      v43[0] = _NSConcreteStackBlock;
      v43[1] = 3221225472;
      v43[2] = sub_10031D168;
      v43[3] = &unk_1009A67B8;
      __int16 v44 = a3;
      v43[4] = a2;
      v43[5] = a4;
      __int16 v45 = a5;
      char v46 = a6;
      char v47 = a7;
      char v48 = a8;
      v43[6] = a9;
      char v49 = a10;
      char v50 = a11;
      char v51 = v24;
      v42[0] = _NSConcreteStackBlock;
      v42[1] = 3221225472;
      void v42[2] = sub_10031D1D0;
      v42[3] = &unk_100998260;
      v42[4] = a1;
      v42[5] = a15;
      size_t v26 = v43;
      size_t v27 = v42;
    }
    else
    {
      v33[0] = _NSConcreteStackBlock;
      v33[1] = 3221225472;
      void v33[2] = sub_10031D234;
      v33[3] = &unk_1009A67B8;
      __int16 v34 = a3;
      v33[4] = a2;
      v33[5] = a4;
      __int16 v35 = a5;
      char v36 = a6;
      char v37 = a7;
      char v38 = a8;
      v33[6] = a9;
      char v39 = a10;
      char v40 = a11;
      char v41 = v24;
      v32[0] = _NSConcreteStackBlock;
      v32[1] = 3221225472;
      void v32[2] = sub_10031D29C;
      v32[3] = &unk_100997528;
      v32[4] = a1;
      size_t v26 = v33;
      size_t v27 = v32;
    }
    return sub_10001A7D4(a1, 219, 1, v26, v27);
  }
  else
  {
    int v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, BOOL, uint64_t))(*(void *)a1 + 648);
    return v28(a1, a2, a3, a4, a5, a6, a7, a8 == 2, a9);
  }
}

uint64_t sub_10031CF64(uint64_t a1, char a2, uint64_t a3, __int16 a4, uint64_t a5, __int16 a6)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 3544))(a1);
  if (result)
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    _DWORD v13[2] = sub_10031DB54;
    v13[3] = &unk_1009A6858;
    char v16 = a2;
    __int16 v14 = a4;
    v13[4] = a3;
    v13[5] = a5;
    __int16 v15 = a6;
    return sub_10001A7D4(a1, 227, 1, v13, 0);
  }
  return result;
}

uint64_t sub_10031D04C(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xDBu);
}

uint64_t sub_10031D0AC(int a1, char a2, char a3, char a4)
{
  LOBYTE(xmmword_100A121A0) = a2;
  BYTE1(xmmword_100A121A0) = a3;
  uint64_t v6 = *(void *)sub_10003FB34();
  if ((*(unsigned int (**)(void))(v6 + 3544))()) {
    BYTE2(xmmword_100A121A0) = a4;
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xDBu);
}

uint64_t sub_10031D168(uint64_t a1)
{
  return sub_1001FAAE8(*(void *)(a1 + 32), *(unsigned __int16 *)(a1 + 56), *(void *)(a1 + 40), *(unsigned __int16 *)(a1 + 58));
}

uint64_t sub_10031D1D0(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 760))(*(void *)(a1 + 32), 1);
  **(unsigned char **)(a1 + 40) = BYTE2(xmmword_100A121A0);
  return result;
}

uint64_t sub_10031D234(uint64_t a1)
{
  return sub_1001FAA18(*(void *)(a1 + 32), *(unsigned __int16 *)(a1 + 56), *(void *)(a1 + 40), *(unsigned __int16 *)(a1 + 58));
}

uint64_t sub_10031D29C(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 760))(*(void *)(a1 + 32), 1);
}

uint64_t sub_10031D2D0(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xDEu);
}

uint64_t sub_10031D330(uint64_t a1, char a2, char a3, uint64_t a4)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_10031D3F0;
  v6[3] = &unk_1009A67D8;
  char v7 = a2;
  char v8 = a3;
  void v6[4] = a4;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_10031D414;
  v5[3] = &unk_100997528;
  void v5[4] = a1;
  return sub_10001A7D4(a1, 222, 1, v6, v5);
}

uint64_t sub_10031D3F0(uint64_t a1)
{
  return sub_1001FABB8(*(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 41), *(void *)(a1 + 32));
}

uint64_t sub_10031D414(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 760))(*(void *)(a1 + 32), 1);
}

uint64_t sub_10031D448(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xB5u);
}

uint64_t sub_10031D4A8(uint64_t a1, char a2, char a3, char a4, char a5, char a6, char a7, char a8)
{
  uint64_t v16 = sub_100035F54();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v16 + 592))(v16)) {
    return 2;
  }
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  _OWORD v18[2] = sub_10031D5B8;
  v18[3] = &unk_1009A67F8;
  char v19 = a2;
  char v20 = a3;
  char v21 = a4;
  char v22 = a5;
  char v23 = a6;
  char v24 = a7;
  char v25 = a8;
  return sub_10001A7D4(a1, 181, 1, v18, 0);
}

uint64_t sub_10031D5B8(unsigned __int8 *a1)
{
  return sub_1001FA79C(a1[32], a1[33], a1[34], a1[35], a1[36]);
}

uint64_t sub_10031D5EC(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xB6u);
}

uint64_t sub_10031D64C(uint64_t a1, char a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9, uint64_t a10, char a11)
{
  uint64_t v19 = sub_100035F54();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v19 + 592))(v19)) {
    return 2;
  }
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  long long v21[2] = sub_10031D76C;
  v21[3] = &unk_1009A6818;
  char v22 = a2;
  char v23 = a3;
  char v24 = a4;
  uint8_t v21[4] = a5;
  void v21[5] = a6;
  char v25 = a8;
  char v26 = a9;
  void v21[6] = a7;
  v21[7] = a10;
  char v27 = a11;
  return sub_10001A7D4(a1, 182, 1, v21, 0);
}

uint64_t sub_10031D76C(uint64_t a1)
{
  return sub_1001FA954(*(unsigned __int8 *)(a1 + 64), *(unsigned __int8 *)(a1 + 65), *(unsigned __int8 *)(a1 + 66), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned __int8 *)(a1 + 67), *(unsigned __int8 *)(a1 + 68));
}

uint64_t sub_10031D7C8(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xDCu);
}

uint64_t sub_10031D828(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, __int16 a5, char a6, char a7, char a8, uint64_t a9, char a10, char a11, char a12)
{
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  _DWORD v13[2] = sub_10031D8D4;
  v13[3] = &unk_1009A67B8;
  __int16 v14 = a3;
  v13[4] = a2;
  v13[5] = a4;
  __int16 v15 = a5;
  char v16 = a6;
  char v17 = a7;
  char v18 = a8;
  void v13[6] = a9;
  char v19 = a10;
  char v20 = a11;
  char v21 = a12;
  return sub_10001A7D4(a1, 220, 1, v13, 0);
}

uint64_t sub_10031D8D4(uint64_t a1)
{
  return sub_1001FAA18(*(void *)(a1 + 32), *(unsigned __int16 *)(a1 + 56), *(void *)(a1 + 40), *(unsigned __int16 *)(a1 + 58));
}

uint64_t sub_10031D93C(int a1, int a2, int a3)
{
  uint64_t v6 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v8[0] = 67109376;
    v8[1] = a2;
    __int16 v9 = 1024;
    int v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Advanced match filter : Total %d  remainaing: %d", (uint8_t *)v8, 0xEu);
  }
  LOBYTE(xmmword_100A121A0) = a2;
  BYTE1(xmmword_100A121A0) = a3;
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0xE2u);
}

uint64_t sub_10031DA40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_10031DAD0;
  void v4[3] = &unk_100998260;
  void v4[4] = a2;
  void v4[5] = a3;
  return sub_10001A7D4(a1, 226, 1, &stru_1009A6838, v4);
}

int sub_10031DABC(id a1)
{
  return sub_1001FAD04();
}

uint64_t sub_10031DAD0(uint64_t result)
{
  **(unsigned char **)(result + 32) = xmmword_100A121A0;
  **(unsigned char **)(result + 40) = BYTE1(xmmword_100A121A0);
  return result;
}

uint64_t sub_10031DAF4(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xE3u);
}

uint64_t sub_10031DB54(uint64_t a1)
{
  return sub_1001FAD90(*(unsigned __int8 *)(a1 + 52), *(void *)(a1 + 32), *(unsigned __int16 *)(a1 + 48), *(void *)(a1 + 40), *(unsigned __int16 *)(a1 + 50));
}

uint64_t sub_10031DB7C(int a1, unsigned int a2, unsigned int a3, int a4, int a5, unsigned int a6, unsigned int a7, int a8, int a9, int a10, int a11, int a12, int a13, unsigned int a14, unsigned int a15, unsigned int a16, unsigned int a17, int a18, int a19, int a20,int a21,int a22,int a23,int a24,int a25,int a26,int a27,int a28,int a29,int a30,int a31,int a32,int a33,int a34,int a35,int a36,int a37,int a38,int a39,int a40,int a41,int a42,int a43,int a44,int a45,int a46,int a47,int a48,int a49,int a50,int a51,int a52,int a53,int a54,int a55,int a56,int a57,int a58)
{
  unint64_t v62 = __PAIR64__(a7, a6);
  unint64_t v64 = __PAIR64__(a3, a2);
  unint64_t v58 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109632;
    int v67 = v64;
    __int16 v68 = 1024;
    int v69 = HIDWORD(v64);
    __int16 v70 = 1024;
    int v71 = a4;
    _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_INFO, "getLPCoreStatisticsCB : TotalTime %d:%d:%d ", buf, 0x14u);
  }
  *(void *)&xmmword_100A121A0 = v64;
  DWORD2(xmmword_100A121A0) = a4;
  HIDWORD(xmmword_100A121A0) = a5;
  *(void *)&xmmword_100A121B0 = v62;
  DWORD2(xmmword_100A121B0) = a8;
  HIDWORD(xmmword_100A121B0) = a9;
  dword_100A121C0 = a10;
  dword_100A121C4 = a11;
  dword_100A121C8 = a12;
  dword_100A121CC = a13;
  *(void *)&xmmword_100A121D0 = __PAIR64__(a15, a14);
  *((void *)&xmmword_100A121D0 + 1) = __PAIR64__(a17, a16);
  dword_100A121E0 = a18;
  dword_100A121E4 = a19;
  dword_100A121E8 = a20;
  dword_100A121EC = a21;
  dword_100A121F0 = a22;
  dword_100A121F4 = a23;
  dword_100A121F8 = a24;
  dword_100A121FC = a25;
  dword_100A12200 = a26;
  dword_100A12204 = a27;
  dword_100A12208 = a28;
  dword_100A1220C = a29;
  dword_100A12210 = a30;
  dword_100A12214 = a31;
  dword_100A12218 = a32;
  dword_100A1221C = a33;
  dword_100A12220 = a34;
  dword_100A12224 = a35;
  dword_100A12228 = a36;
  dword_100A1222C = a37;
  dword_100A12230 = a38;
  dword_100A12234 = a39;
  dword_100A12238 = a40;
  dword_100A1223C = a41;
  dword_100A12240 = a42;
  dword_100A12244 = a43;
  dword_100A12248 = a44;
  dword_100A1224C = a45;
  dword_100A12250 = a46;
  dword_100A12254 = a47;
  dword_100A12258 = a48;
  dword_100A1225C = a49;
  dword_100A12260 = a50;
  dword_100A12264 = a51;
  dword_100A12268 = a52;
  dword_100A1226C = a53;
  dword_100A12270 = a54;
  dword_100A12274 = a55;
  dword_100A12278 = a56;
  dword_100A1227C = a57;
  dword_100A12280 = a58;
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0xE4u);
}

uint64_t sub_10031DF2C()
{
  long long v7 = 0u;
  long long v8 = 0u;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v3 = 0u;
  long long v4 = 0u;
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009A6E98);
  }
  long long v9 = 0u;
  long long v10 = 0u;
  sub_1006DF950((uint64_t)off_1009F85C0, (uint64_t)&v9);
  sub_100231104(0x5Fu, 0, &v3);
  v2[6] = v9;
  v2[7] = v10;
  v2[0] = v3;
  v2[1] = v4;
  _DWORD v2[2] = v5;
  v2[3] = v6;
  void v2[4] = v7;
  v2[5] = v8;
  uint64_t result = sub_100050530();
  if (result)
  {
    uint64_t v1 = sub_100050530();
    return (*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)v1 + 208))(v1, v2);
  }
  return result;
}

uint64_t sub_10031E004(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10, long long a11, long long a12, long long a13, long long a14, long long a15, long long a16, long long a17, long long a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25,long long a26,long long a27,long long a28,long long a29,long long a30,long long a31,long long a32,long long a33,uint64_t a34)
{
  v62[0] = _NSConcreteStackBlock;
  v62[1] = 3221225472;
  v62[2] = sub_10031E144;
  v62[3] = &unk_1009A6878;
  int v63 = a2;
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3221225472;
  v35[2] = sub_10031E160;
  v35[3] = &unk_1009A6898;
  _OWORD v35[4] = a3;
  v35[5] = a4;
  v35[6] = a5;
  unsigned char v35[7] = a6;
  v35[8] = a7;
  v35[9] = a8;
  long long v36 = a9;
  long long v37 = a10;
  long long v38 = a11;
  long long v39 = a12;
  long long v40 = a13;
  long long v41 = a14;
  long long v42 = a15;
  long long v43 = a16;
  long long v44 = a17;
  long long v45 = a18;
  long long v46 = a19;
  long long v47 = a20;
  long long v48 = a21;
  long long v49 = a22;
  long long v50 = a23;
  long long v51 = a24;
  long long v52 = a25;
  long long v53 = a26;
  long long v54 = a27;
  long long v55 = a28;
  long long v56 = a29;
  long long v57 = a30;
  long long v58 = a31;
  long long v59 = a32;
  long long v60 = a33;
  uint64_t v61 = a34;
  return sub_10001A7D4(a1, 228, 1, v62, v35);
}

uint64_t sub_10031E144()
{
  return sub_1001FAE40();
}

uint64_t sub_10031E160(uint64_t result)
{
  uint64_t v1 = *(_DWORD **)(result + 40);
  **(_DWORD **)(result + 32) = xmmword_100A121A0;
  _DWORD *v1 = DWORD1(xmmword_100A121A0);
  uint64_t v2 = *(_DWORD **)(result + 56);
  **(_DWORD **)(result + 48) = DWORD2(xmmword_100A121A0);
  _DWORD *v2 = HIDWORD(xmmword_100A121A0);
  long long v3 = *(_DWORD **)(result + 72);
  **(_DWORD **)(result + 64) = xmmword_100A121B0;
  *long long v3 = DWORD1(xmmword_100A121B0);
  long long v4 = *(_DWORD **)(result + 88);
  **(_DWORD **)(result + 80) = DWORD2(xmmword_100A121B0);
  _DWORD *v4 = HIDWORD(xmmword_100A121B0);
  long long v5 = *(_DWORD **)(result + 104);
  **(_DWORD **)(result + 96) = dword_100A121C0;
  *long long v5 = dword_100A121C4;
  long long v6 = *(_DWORD **)(result + 120);
  **(_DWORD **)(result + 112) = dword_100A121C8;
  _DWORD *v6 = dword_100A121CC;
  long long v7 = *(_DWORD **)(result + 136);
  **(_DWORD **)(result + 128) = xmmword_100A121D0;
  _DWORD *v7 = DWORD1(xmmword_100A121D0);
  long long v8 = *(_DWORD **)(result + 152);
  **(_DWORD **)(result + 144) = DWORD2(xmmword_100A121D0);
  *long long v8 = HIDWORD(xmmword_100A121D0);
  long long v9 = *(_DWORD **)(result + 168);
  **(_DWORD **)(result + 160) = dword_100A121E0;
  _DWORD *v9 = dword_100A121E4;
  long long v10 = *(_DWORD **)(result + 184);
  **(_DWORD **)(result + 176) = dword_100A121E8;
  _DWORD *v10 = dword_100A121EC;
  __int16 v11 = *(_DWORD **)(result + 200);
  **(_DWORD **)(result + 192) = dword_100A121F0;
  _DWORD *v11 = dword_100A121F4;
  char v12 = *(_DWORD **)(result + 216);
  **(_DWORD **)(result + 208) = dword_100A121F8;
  *char v12 = dword_100A121FC;
  char v13 = *(_DWORD **)(result + 232);
  **(_DWORD **)(result + 224) = dword_100A12200;
  _DWORD *v13 = dword_100A12204;
  __int16 v14 = *(_DWORD **)(result + 248);
  **(_DWORD **)(result + 240) = dword_100A12208;
  *__int16 v14 = dword_100A1220C;
  __int16 v15 = *(_DWORD **)(result + 264);
  **(_DWORD **)(result + 256) = dword_100A12210;
  _DWORD *v15 = dword_100A12214;
  char v16 = *(_DWORD **)(result + 280);
  **(_DWORD **)(result + 272) = dword_100A12218;
  *char v16 = dword_100A1221C;
  char v17 = *(_DWORD **)(result + 296);
  **(_DWORD **)(result + 288) = dword_100A12220;
  _DWORD *v17 = dword_100A12224;
  char v18 = *(_DWORD **)(result + 312);
  **(_DWORD **)(result + 304) = dword_100A12228;
  *char v18 = dword_100A1222C;
  char v19 = *(_DWORD **)(result + 328);
  **(_DWORD **)(result + 320) = dword_100A12230;
  *char v19 = dword_100A12234;
  char v20 = *(_DWORD **)(result + 344);
  **(_DWORD **)(result + 336) = dword_100A12238;
  *char v20 = dword_100A1223C;
  char v21 = *(_DWORD **)(result + 360);
  **(_DWORD **)(result + 352) = dword_100A12240;
  *char v21 = dword_100A12244;
  char v22 = *(_DWORD **)(result + 376);
  **(_DWORD **)(result + 368) = dword_100A12248;
  *char v22 = dword_100A1224C;
  char v23 = *(_DWORD **)(result + 392);
  **(_DWORD **)(result + 384) = dword_100A12250;
  *char v23 = dword_100A12254;
  char v24 = *(_DWORD **)(result + 408);
  **(_DWORD **)(result + 400) = dword_100A12258;
  *char v24 = dword_100A1225C;
  char v25 = *(_DWORD **)(result + 424);
  **(_DWORD **)(result + 416) = dword_100A12260;
  *char v25 = dword_100A12264;
  char v26 = *(_DWORD **)(result + 440);
  **(_DWORD **)(result + 432) = dword_100A12268;
  *char v26 = dword_100A1226C;
  char v27 = *(_DWORD **)(result + 456);
  **(_DWORD **)(result + 448) = dword_100A12270;
  _DWORD *v27 = dword_100A12274;
  int v28 = *(_DWORD **)(result + 472);
  **(_DWORD **)(result + 464) = dword_100A12278;
  _DWORD *v28 = dword_100A1227C;
  **(_DWORD **)(result + 480) = dword_100A12280;
  return result;
}

uint64_t sub_10031E3A8(int a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "BD_VSC_LE_META_GET_SCAN_STATS completed status %d.", (uint8_t *)v4, 8u);
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0xE5u);
}

uint64_t sub_10031E480(uint64_t a1, char a2)
{
  char v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2240))(a1);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_10031E53C;
  v6[3] = &unk_1009A66D8;
  char v7 = a2;
  char v8 = v4;
  return sub_10001A7D4(a1, 229, 1, v6, 0);
}

uint64_t sub_10031E53C()
{
  return sub_1001FAECC();
}

uint64_t sub_10031E55C(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xDDu);
}

uint64_t sub_10031E5BC(uint64_t a1, char a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_10031E674;
  void v4[3] = &unk_1009A6618;
  char v5 = a2;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10031E68C;
  v3[3] = &unk_100997528;
  void v3[4] = a1;
  return sub_10001A7D4(a1, 221, 1, v4, v3);
}

uint64_t sub_10031E674()
{
  return sub_1001FAC78();
}

uint64_t sub_10031E68C(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 760))(*(void *)(a1 + 32), 1);
}

uint64_t sub_10031E6C0(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xE0u);
}

uint64_t sub_10031E720(uint64_t a1, char a2, uint64_t a3, char a4)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_10031E7E0;
  v6[3] = &unk_1009A68B8;
  void v6[4] = a1;
  void v6[5] = a3;
  char v7 = a2;
  char v8 = a4;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_10031E8F4;
  v5[3] = &unk_100997528;
  void v5[4] = a1;
  return sub_10001A7D4(a1, 224, 1, v6, v5);
}

uint64_t sub_10031E7E0(uint64_t a1)
{
  if ((*(_DWORD *)(*(void *)(a1 + 32) + 712) - 22) > 0x7B9)
  {
    unsigned __int8 v2 = *(unsigned char *)(a1 + 48);
    return sub_1001FAF58(v2);
  }
  else
  {
    sub_1002284B8(*(void *)(a1 + 40));
    return sub_1001FAFE8();
  }
}

uint64_t sub_10031E8F4(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 760))(*(void *)(a1 + 32), 1);
}

uint64_t sub_10031E928(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xE1u);
}

uint64_t sub_10031E988(uint64_t a1, uint64_t a2, char a3, char a4, char a5)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_10031EA4C;
  v7[3] = &unk_1009A6598;
  v7[4] = a2;
  char v8 = a3;
  char v9 = a5;
  char v10 = a4;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_10031EA74;
  v6[3] = &unk_100997528;
  void v6[4] = a1;
  return sub_10001A7D4(a1, 225, 1, v7, v6);
}

uint64_t sub_10031EA4C()
{
  return sub_1001FAFE8();
}

uint64_t sub_10031EA74(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 760))(*(void *)(a1 + 32), 1);
}

uint64_t sub_10031EAA8(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xADu);
}

uint64_t sub_10031EB08(uint64_t a1, int a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10031EB80;
  v3[3] = &unk_1009A6878;
  int v4 = a2;
  return sub_10001A7D4(a1, 173, 1, v3, 0);
}

uint64_t sub_10031EB80()
{
  return sub_1001F8C80();
}

uint64_t sub_10031EB98(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xD0u);
}

uint64_t sub_10031EBF8(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  _DWORD v2[2] = sub_10031EC88;
  v2[3] = &unk_100997528;
  void v2[4] = a1;
  return sub_10001A7D4(a1, 208, 1, &stru_1009A68D8, v2);
}

int sub_10031EC74(id a1)
{
  return sub_1001FB124();
}

uint64_t sub_10031EC88(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 32) + 1180) &= ~0x40000u;
  return result;
}

uint64_t sub_10031EC9C(_DWORD *a1, int a2)
{
  int v2 = a1[295];
  if (!a2)
  {
    if ((v2 & 0x40000) != 0)
    {
      unsigned int v3 = v2 & 0xFFFBFFFF;
      goto LABEL_7;
    }
    return 0;
  }
  if ((v2 & 0x40000) != 0) {
    return 0;
  }
  unsigned int v3 = v2 | 0x40000;
LABEL_7:
  a1[295] = v3;
  return (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a1 + 344))(a1, 1);
}

uint64_t sub_10031ECF4(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xDAu);
}

uint64_t sub_10031ED54(uint64_t a1, uint64_t a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10031EDCC;
  v3[3] = &unk_1009A6738;
  void v3[4] = a2;
  return sub_10001A7D4(a1, 218, 1, v3, 0);
}

uint64_t sub_10031EDCC()
{
  return sub_1001FB1B0();
}

uint64_t sub_10031EDE4(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xDAu);
}

uint64_t sub_10031EE44(uint64_t a1, uint64_t a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10031EEBC;
  v3[3] = &unk_1009A6738;
  void v3[4] = a2;
  return sub_10001A7D4(a1, 218, 1, v3, 0);
}

uint64_t sub_10031EEBC()
{
  return sub_1001FB23C();
}

uint64_t sub_10031EED4(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xDAu);
}

uint64_t sub_10031EF34(uint64_t a1, char a2, uint64_t a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_10031EFB0;
  void v4[3] = &unk_1009A65D8;
  char v5 = a2;
  void v4[4] = a3;
  return sub_10001A7D4(a1, 223, 1, v4, 0);
}

uint64_t sub_10031EFB0(uint64_t a1)
{
  return sub_1001FB2C8(*(unsigned char *)(a1 + 40), 0, *(void *)(a1 + 32));
}

uint64_t sub_10031EFD4(uint64_t a1, char a2, uint64_t a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_10031F050;
  void v4[3] = &unk_1009A65D8;
  char v5 = a2;
  void v4[4] = a3;
  return sub_10001A7D4(a1, 223, 1, v4, 0);
}

uint64_t sub_10031F050(uint64_t a1)
{
  return sub_1001FB2C8(*(unsigned char *)(a1 + 40), 1u, *(void *)(a1 + 32));
}

uint64_t sub_10031F074(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xDAu);
}

uint64_t sub_10031F0D4(uint64_t a1)
{
  return sub_10001A7D4(a1, 218, 1, &stru_1009A68F8, 0);
}

int sub_10031F0EC(id a1)
{
  return sub_1001FB374();
}

uint64_t sub_10031F100(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xD7u);
}

uint64_t sub_10031F160(_DWORD *a1, int a2)
{
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, (uint64_t)(a1 + 18));
  if (*(_DWORD *)(sub_10003FB34() + 712) && *(_DWORD *)(sub_10003FB34() + 712) <= 0x7CFu)
  {
    int v4 = a1[295];
    if (a2)
    {
      if ((v4 & 0x80000) == 0)
      {
        unsigned int v5 = v4 | 0x80000;
LABEL_12:
        a1[295] = v5;
        uint64_t v6 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a1 + 344))(a1, 1);
        goto LABEL_7;
      }
    }
    else if ((v4 & 0x80000) != 0)
    {
      unsigned int v5 = v4 & 0xFFF7FFFF;
      goto LABEL_12;
    }
    uint64_t v7 = 0;
    goto LABEL_8;
  }
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_10031F29C;
  v9[3] = &unk_1009A6618;
  char v10 = a2;
  uint64_t v6 = sub_10001A7D4((uint64_t)a1, 215, 1, v9, 0);
LABEL_7:
  uint64_t v7 = v6;
LABEL_8:
  sub_10003AFB4((uint64_t)v11);
  return v7;
}

void sub_10031F288(_Unwind_Exception *a1)
{
  sub_10003AFB4(v1 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_10031F29C()
{
  return sub_1001FB400();
}

uint64_t sub_10031F2B4(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xD5u);
}

uint64_t sub_10031F314(uint64_t a1, uint64_t a2, char a3, int a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_10031F398;
  v5[3] = &unk_1009A67D8;
  void v5[4] = a2;
  char v6 = a3;
  char v7 = a4;
  return sub_10001A7D4(a1, 213, a4, v5, 0);
}

uint64_t sub_10031F398(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 41)) {
    uint64_t v1 = sub_10031F2B4;
  }
  else {
    uint64_t v1 = 0;
  }
  return sub_1001FB48C(*(void *)(a1 + 32), *(unsigned char *)(a1 + 40) != 0, 0xBB8u, (uint64_t)v1);
}

uint64_t sub_10031F3CC(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xA1u);
}

uint64_t sub_10031F42C(uint64_t a1, char a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_10031F4A4;
  void v4[3] = &unk_1009A66D8;
  char v5 = a2;
  char v6 = a3;
  return sub_10001A7D4(a1, 161, a3, v4, 0);
}

uint64_t sub_10031F4A4()
{
  return sub_1001F8528();
}

uint64_t sub_10031F4C8(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xA2u);
}

uint64_t sub_10031F528(uint64_t a1, char a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_10031F5A0;
  void v4[3] = &unk_1009A66D8;
  char v5 = a2;
  char v6 = a3;
  return sub_10001A7D4(a1, 162, a3, v4, 0);
}

uint64_t sub_10031F5A0()
{
  return sub_1001F85B4();
}

uint64_t sub_10031F5C4(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x15u);
}

uint64_t sub_10031F624(uint64_t a1, char a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_10031F69C;
  void v4[3] = &unk_1009A66D8;
  char v5 = a2;
  char v6 = a3;
  return sub_10001A7D4(a1, 21, a3, v4, 0);
}

uint64_t sub_10031F69C()
{
  return sub_1001FBF2C();
}

uint64_t sub_10031F6C8(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xA9u);
}

uint64_t sub_10031F728(uint64_t a1, char a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_10031F7A0;
  void v4[3] = &unk_1009A66D8;
  char v5 = a2;
  char v6 = a3;
  return sub_10001A7D4(a1, 169, a3, v4, 0);
}

uint64_t sub_10031F7A0()
{
  return sub_1001F8640();
}

uint64_t sub_10031F7C4(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x19u);
}

uint64_t sub_10031F824(uint64_t a1, unint64_t a2, uint64_t a3)
{
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, a1 + 72);
  char v6 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    char v7 = sub_10001AA04(a1, 25);
    *(_DWORD *)std::string buf = 136446210;
    char v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Sending: %{public}s", buf, 0xCu);
  }
  if (sub_10001B700(a1, 25))
  {
    buf[0] = 0;
    sub_10001B8E0(buf);
    if (a3) {
      char v8 = sub_10031F7C4;
    }
    else {
      char v8 = 0;
    }
    int v9 = sub_1001FB974(a2, (uint64_t)v8);
    sub_10001B910(buf);
    if (v9)
    {
      if (v9 == 101)
      {
        a3 = 3;
      }
      else if (v9 == 122)
      {
        a3 = 7;
      }
      else
      {
        a3 = 1;
      }
    }
    else if (a3)
    {
      if (qword_1009F8070 != -1) {
        dispatch_once(&qword_1009F8070, &stru_1009A6E78);
      }
      a3 = sub_10001B918((uint64_t)off_1009F8068, 25) != 0;
      goto LABEL_20;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10075735C();
    }
LABEL_20:
    sub_1000262B8(a1, 0x19u);
    sub_10001B8AC(buf);
    goto LABEL_21;
  }
  a3 = 2;
LABEL_21:
  sub_10003AFB4((uint64_t)v11);
  return a3;
}

void sub_10031F9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10031FA30(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xA7u);
}

uint64_t sub_10031FA90(uint64_t a1, uint64_t a2, char a3, int a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_10031FB14;
  v5[3] = &unk_1009A67D8;
  void v5[4] = a2;
  char v6 = a3;
  char v7 = a4;
  return sub_10001A7D4(a1, 167, a4, v5, 0);
}

uint64_t sub_10031FB14(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 41)) {
    uint64_t v1 = sub_10031FA30;
  }
  else {
    uint64_t v1 = 0;
  }
  return sub_1001F86CC(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), (uint64_t)v1);
}

uint64_t sub_10031FB3C(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xCAu);
}

uint64_t sub_10031FB9C(uint64_t a1, uint64_t a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_10031FC14;
  void v4[3] = &unk_1009A65D8;
  void v4[4] = a2;
  char v5 = a3;
  return sub_10001A7D4(a1, 202, a3, v4, 0);
}

uint64_t sub_10031FC14(uint64_t a1)
{
  __int16 v3 = -21335;
  char v4 = -80;
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v1 = sub_10031FB3C;
  }
  else {
    uint64_t v1 = 0;
  }
  return sub_1001FB57C(*(void *)(a1 + 32), (uint64_t)&v3, 3, (uint64_t)v1);
}

uint64_t sub_10031FC6C(int a1, char a2, char a3)
{
  LOBYTE(xmmword_100A121A0) = a2;
  BYTE1(xmmword_100A121A0) = a3;
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xCBu);
}

uint64_t sub_10031FCDC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, char a7, char a8, char a9, char a10, char a11, char a12, char a13)
{
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  void v15[2] = sub_10031FDCC;
  v15[3] = &unk_1009A6938;
  char v16 = a3;
  _OWORD v15[4] = a1;
  v15[5] = a2;
  char v17 = a6;
  char v18 = a7;
  char v19 = a8;
  char v20 = a9;
  char v21 = a10;
  char v22 = a11;
  char v23 = a12;
  char v24 = a13;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  void v14[2] = sub_10031FF2C;
  v14[3] = &unk_100998260;
  _OWORD v14[4] = a4;
  v14[5] = a5;
  return sub_10001A7D4(a1, 203, 1, v15, v14);
}

uint64_t sub_10031FDCC(uint64_t a1, double a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  LOBYTE(a2) = *(unsigned char *)(a1 + 48);
  LODWORD(v2) = vcvtpd_s64_f64((double)*(unint64_t *)&a2 / 1.25);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 2432))(v4)) {
    return sub_1001FB6E4(*(void *)(a1 + 40), v2);
  }
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 2424))(v4);
  uint64_t v7 = *(void *)(a1 + 40);
  if (v6) {
    return sub_1001FB820(v7);
  }

  return sub_1001FB64C(v7);
}

uint64_t sub_10031FF2C(uint64_t result)
{
  **(unsigned char **)(result + 32) = xmmword_100A121A0;
  **(unsigned char **)(result + 40) = BYTE1(xmmword_100A121A0);
  return result;
}

uint64_t sub_10031FF50(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xCCu);
}

uint64_t sub_10031FFB0(uint64_t a1, uint64_t a2, int a3)
{
  v16[0] = 0;
  v16[1] = 0;
  sub_10003AED0((uint64_t)v16, a1 + 72);
  char v5 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    int v6 = sub_10001AA04(a1, 204);
    *(_DWORD *)std::string buf = 136446210;
    char v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Sending: %{public}s", buf, 0xCu);
  }
  if (!sub_10001B700(a1, 204))
  {
    uint64_t v8 = 2;
    goto LABEL_19;
  }
  char v15 = 0;
  sub_10001B8E0(&v15);
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 2432))(a1))
  {
    uint64_t v9 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      char v10 = "Error sending SensorIncreaseScanParams, sensor track V3 not supported ";
      __int16 v11 = v9;
      uint32_t v12 = 2;
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v10, buf, v12);
    }
LABEL_13:
    int v7 = 114;
    goto LABEL_14;
  }
  if (!a3)
  {
    uint64_t v13 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109120;
      LODWORD(v18) = 0;
      char v10 = "Error sending SensorIncreaseScanParams, rssiIncreaseScanThreshold is disabled : %d ";
      __int16 v11 = v13;
      uint32_t v12 = 8;
      goto LABEL_12;
    }
    goto LABEL_13;
  }
  int v7 = sub_1001FB794();
LABEL_14:
  sub_10001B910(&v15);
  if (!v7)
  {
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009A6E78);
    }
    int v7 = sub_10001B918((uint64_t)off_1009F8068, 204);
  }
  sub_1000262B8(a1, 0xCCu);
  uint64_t v8 = v7 != 0;
  sub_10001B8AC(&v15);
LABEL_19:
  sub_10003AFB4((uint64_t)v16);
  return v8;
}

void sub_100320230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100320264(int a1, char a2, char a3)
{
  LOBYTE(xmmword_100A121A0) = a2;
  BYTE1(xmmword_100A121A0) = a3;
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xCBu);
}

uint64_t sub_1003202D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_10032038C;
  v6[3] = &unk_1009A6958;
  void v6[4] = a1;
  void v6[5] = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1003204C8;
  v5[3] = &unk_100998260;
  void v5[4] = a3;
  void v5[5] = a4;
  return sub_10001A7D4(a1, 203, 1, v6, v5);
}

uint64_t sub_10032038C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 2432))(v2)) {
    return sub_1001FB6E4(*(void *)(a1 + 40), 0);
  }
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2424))(v2);
  uint64_t v5 = *(void *)(a1 + 40);
  if (v4) {
    return sub_1001FB820(v5);
  }

  return sub_1001FB64C(v5);
}

uint64_t sub_1003204C8(uint64_t result)
{
  **(unsigned char **)(result + 32) = xmmword_100A121A0;
  **(unsigned char **)(result + 40) = BYTE1(xmmword_100A121A0);
  return result;
}

uint64_t sub_1003204EC(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xD6u);
}

uint64_t sub_10032054C(uint64_t a1, uint64_t a2, __int16 a3, __int16 a4, __int16 a5, __int16 a6, __int16 a7, __int16 a8)
{
  if (!a2) {
    return 3;
  }
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_1003205EC;
  v9[3] = &unk_1009A6978;
  void v9[4] = a2;
  __int16 v10 = a3;
  __int16 v11 = a4;
  __int16 v12 = a5;
  __int16 v13 = a6;
  __int16 v14 = a7;
  __int16 v15 = a8;
  return sub_10001A7D4(a1, 214, 1, v9, 0);
}

uint64_t sub_1003205EC(uint64_t a1)
{
  uint64_t v5 = 0;
  uint64_t v1 = *(char **)(a1 + 32);
  char v2 = *v1;
  v4[0] = v1 + 1;
  v4[1] = *(void *)(a1 + 40);
  LODWORD(v5) = *(_DWORD *)(a1 + 48);
  BYTE4(v5) = v2;
  return sub_1001FBB20(v4);
}

uint64_t sub_100320644(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x1Eu);
}

uint64_t sub_1003206A4(uint64_t a1, uint64_t a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10032071C;
  v3[3] = &unk_1009A6738;
  void v3[4] = a2;
  return sub_10001A7D4(a1, 30, 1, v3, 0);
}

uint64_t sub_10032071C()
{
  return sub_1001FD57C();
}

uint64_t sub_100320734(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x1Fu);
}

uint64_t sub_100320794(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10032080C;
  v3[3] = &unk_1009A6618;
  char v4 = a2;
  return sub_10001A7D4(a1, 31, 1, v3, 0);
}

uint64_t sub_10032080C()
{
  return sub_1001FD608();
}

uint64_t sub_100320828(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x20u);
}

uint64_t sub_100320888(uint64_t a1, uint64_t a2, char a3, char a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_100320908;
  v5[3] = &unk_1009A67D8;
  void v5[4] = a2;
  char v6 = a3;
  char v7 = a4;
  return sub_10001A7D4(a1, 32, 1, v5, 0);
}

uint64_t sub_100320908(uint64_t a1)
{
  return sub_1001FD3DC(*(unsigned __int16 **)(a1 + 32), *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 41), (uint64_t)sub_100320828);
}

uint64_t sub_10032092C(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x28u);
}

uint64_t sub_10032098C(uint64_t a1, uint64_t a2, char a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_100320A08;
  void v4[3] = &unk_1009A65D8;
  void v4[4] = a2;
  char v5 = a3;
  return sub_10001A7D4(a1, 40, 1, v4, 0);
}

uint64_t sub_100320A08(uint64_t a1)
{
  return sub_1001FD880(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), (uint64_t)sub_10032092C);
}

uint64_t sub_100320A28(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xACu);
}

uint64_t sub_100320A88(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_100320B00;
  v3[3] = &unk_1009A6618;
  char v4 = a2;
  return sub_10001A7D4(a1, 172, 1, v3, 0);
}

uint64_t sub_100320B00()
{
  return sub_1001F9144();
}

uint64_t sub_100320B18(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x36u);
}

uint64_t sub_100320B78(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009A6EB8);
  }
  uint64_t v11 = 0;
  char v6 = off_1009F7EB8;
  sub_1000305AC(v12, v5);
  if (sub_1006856B8((uint64_t)v6, v12, &v11))
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_100320CCC;
    v9[3] = &unk_1009A65D8;
    void v9[4] = v11;
    char v10 = a3;
    uint64_t v7 = sub_10001A7D4(a1, 54, 1, v9, 0);
  }
  else
  {
    uint64_t v7 = 7;
  }

  return v7;
}

void sub_100320CB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100320CCC(uint64_t a1)
{
  return sub_1001FDB6C(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), (uint64_t)sub_100320B18);
}

uint64_t sub_100320CEC(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xB7u);
}

uint64_t sub_100320D4C(uint64_t a1, char a2, __int16 a3, char a4, __int16 a5, char a6)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_100320DD4;
  v7[3] = &unk_1009A67F8;
  char v10 = a2;
  __int16 v8 = a3;
  char v11 = a4;
  __int16 v9 = a5;
  char v12 = a6;
  return sub_10001A7D4(a1, 183, 1, v7, 0);
}

uint64_t sub_100320DD4()
{
  return sub_1001F925C();
}

uint64_t sub_100320E00(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xBAu);
}

uint64_t sub_100320E60(uint64_t a1, char a2, __int16 a3, char a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_100320EE0;
  v5[3] = &unk_1009A6878;
  char v7 = a2;
  __int16 v6 = a3;
  char v8 = a4;
  return sub_10001A7D4(a1, 186, 1, v5, 0);
}

uint64_t sub_100320EE0()
{
  return sub_1001F92E8();
}

uint64_t sub_100320F04(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xC2u);
}

uint64_t sub_100320F64(uint64_t a1, __int16 a2, char a3, char a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_100320FE8;
  v5[3] = &unk_1009A6998;
  void v5[4] = a1;
  __int16 v6 = a2;
  char v7 = a4;
  char v8 = a3;
  return sub_10001A7D4(a1, 194, 1, v5, 0);
}

uint64_t sub_100320FE8(uint64_t a1)
{
  char v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v3 = sub_10001AA04(*(void *)(a1 + 32), 194);
    int v4 = *(unsigned __int16 *)(a1 + 40);
    int v5 = *(unsigned __int8 *)(a1 + 42);
    int v7 = 136446722;
    char v8 = v3;
    __int16 v9 = 1024;
    int v10 = v4;
    __int16 v11 = 1024;
    int v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Sending: %{public}s LM Handle 0x%02x  enable %d", (uint8_t *)&v7, 0x18u);
  }
  return sub_1001F9BAC();
}

uint64_t sub_1003210D4(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xC3u);
}

uint64_t sub_100321134(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1003211AC;
  v3[3] = &unk_1009A6618;
  char v4 = a2;
  return sub_10001A7D4(a1, 195, 1, v3, 0);
}

uint64_t sub_1003211AC()
{
  return sub_1001F9CC4();
}

uint64_t sub_1003211CC(int a1, int a2)
{
  dword_100A12190 = a2;
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xB8u);
}

uint64_t sub_100321234(uint64_t a1, uint64_t a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1003212C4;
  v3[3] = &unk_100997528;
  void v3[4] = a2;
  return sub_10001A7D4(a1, 184, 1, &stru_1009A69B8, v3);
}

int sub_1003212B0(id a1)
{
  return sub_1001F9374();
}

uint64_t sub_1003212C4(uint64_t result)
{
  **(_DWORD **)(result + 32) = dword_100A12190;
  return result;
}

uint64_t sub_1003212D8(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xB9u);
}

uint64_t sub_100321338(uint64_t a1, char a2, __int16 a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_1003213B4;
  void v4[3] = &unk_1009A69D8;
  char v6 = a2;
  __int16 v5 = a3;
  return sub_10001A7D4(a1, 185, 1, v4, 0);
}

uint64_t sub_1003213B4()
{
  return sub_1001F9400();
}

uint64_t sub_1003213D4(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xBBu);
}

uint64_t sub_100321434(uint64_t a1, char a2, uint64_t a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_1003214B0;
  void v4[3] = &unk_1009A65D8;
  char v5 = a2;
  void v4[4] = a3;
  return sub_10001A7D4(a1, 187, 1, v4, 0);
}

uint64_t sub_1003214B0(uint64_t a1)
{
  return sub_1001F9518(*(unsigned __int8 *)(a1 + 40), *(void *)(a1 + 32), (uint64_t)sub_1003213D4);
}

uint64_t sub_1003214D0(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xBDu);
}

uint64_t sub_100321530(uint64_t a1, int a2, int a3, int a4)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1003215BC;
  v7[3] = &unk_1009A65F8;
  if (!a2) {
    a3 = 0;
  }
  void v7[4] = a1;
  char v10 = a2;
  if (!a2) {
    a4 = 0;
  }
  int v8 = a3;
  int v9 = a4;
  return sub_10001A7D4(a1, 189, 1, v7, 0);
}

uint64_t sub_1003215BC(uint64_t a1)
{
  char v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v3 = sub_10001AA04(*(void *)(a1 + 32), 189);
    int v4 = *(unsigned __int8 *)(a1 + 48);
    int v5 = *(_DWORD *)(a1 + 40);
    int v6 = *(_DWORD *)(a1 + 44);
    int v8 = 136446978;
    int v9 = v3;
    __int16 v10 = 1024;
    int v11 = v4;
    __int16 v12 = 1024;
    int v13 = v5;
    __int16 v14 = 1024;
    int v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Sending: %{public}s enable %d, duration %d, interval %d", (uint8_t *)&v8, 0x1Eu);
  }
  return sub_1001F9678();
}

uint64_t sub_1003216A8(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xBEu);
}

uint64_t sub_100321708(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_100321780;
  v3[3] = &unk_1009A6618;
  char v4 = a2;
  return sub_10001A7D4(a1, 190, 1, v3, 0);
}

uint64_t sub_100321780()
{
  return sub_1001F9704();
}

uint64_t sub_100321798(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xBFu);
}

uint64_t sub_1003217F8(uint64_t a1, char a2, uint64_t a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_100321874;
  void v4[3] = &unk_1009A65D8;
  char v5 = a2;
  void v4[4] = a3;
  return sub_10001A7D4(a1, 191, 1, v4, 0);
}

uint64_t sub_100321874()
{
  return sub_1001F9790();
}

uint64_t sub_100321894(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xC0u);
}

uint64_t sub_1003218F4(uint64_t a1, uint64_t a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10032196C;
  v3[3] = &unk_1009A6738;
  void v3[4] = a2;
  return sub_10001A7D4(a1, 192, 1, v3, 0);
}

uint64_t sub_10032196C()
{
  return sub_1001F981C();
}

uint64_t sub_100321984(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xC1u);
}

uint64_t sub_1003219E4(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_100321A5C;
  v3[3] = &unk_1009A6618;
  char v4 = a2;
  return sub_10001A7D4(a1, 193, 1, v3, 0);
}

uint64_t sub_100321A5C()
{
  return sub_1001F948C();
}

uint64_t sub_100321A74(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xF5u);
}

uint64_t sub_100321AD4(uint64_t a1, void *a2, char a3, char a4)
{
  id v7 = a2;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2752))(a1))
  {
    uint64_t v14 = 0;
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009A6EB8);
    }
    int v8 = off_1009F7EB8;
    sub_1000305AC(v15, v7);
    if (sub_1006856B8((uint64_t)v8, v15, &v14))
    {
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      void v11[2] = sub_100321C78;
      v11[3] = &unk_1009A67D8;
      char v12 = a3;
      char v13 = a4;
      uint8_t v11[4] = v14;
      uint64_t v9 = sub_10001A7D4(a1, 245, 1, v11, 0);
    }
    else
    {
      uint64_t v9 = 7;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

void sub_100321C58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100321C78(uint64_t a1)
{
  __int16 v4 = 0;
  if (*(unsigned char *)(a1 + 40))
  {
    LOBYTE(v4) = sub_10020A6B8(0);
    unsigned int v2 = 1;
  }
  else
  {
    unsigned int v2 = 0;
  }
  if (*(unsigned char *)(a1 + 41)) {
    *(unsigned char *)((unint64_t)&v4 | v2) = sub_10020A6B8(1u);
  }
  return sub_100201F60();
}

uint64_t sub_100321D0C(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x10Cu);
}

uint64_t sub_100321D6C(uint64_t a1, int a2, int a3)
{
  uint64_t v6 = sub_10003FB34();
  unsigned int v7 = a3 & 0xFFFFFFFE;
  if (a2) {
    unsigned int v7 = a3 & 0xFFFFFFFE | a2 | 0xA;
  }
  if ((*(_DWORD *)(v6 + 712) - 1) >= 0x7CF) {
    unsigned int v8 = a3 & 0xFFFFFFFE | a2;
  }
  else {
    unsigned int v8 = v7;
  }
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  _DWORD v10[2] = sub_100321E30;
  v10[3] = &unk_1009A6878;
  unsigned int v11 = v8;
  return sub_10001A7D4(a1, 268, 1, v10, 0);
}

uint64_t sub_100321E30()
{
  return sub_1001FF3D0();
}

uint64_t sub_100321E48(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x10Eu);
}

uint64_t sub_100321EA8(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_100321F20;
  v3[3] = &unk_1009A6618;
  char v4 = a2;
  return sub_10001A7D4(a1, 270, 1, v3, 0);
}

uint64_t sub_100321F20()
{
  return sub_1001FF45C();
}

uint64_t sub_100321F38(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xF6u);
}

uint64_t sub_100321F98(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2752))(a1))
  {
    uint64_t v8 = 0;
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009A6EB8);
    }
    char v4 = off_1009F7EB8;
    sub_1000305AC(v9, v3);
    if (sub_1006856B8((uint64_t)v4, v9, &v8))
    {
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      void v7[2] = sub_100322124;
      v7[3] = &unk_1009A6738;
      void v7[4] = v8;
      uint64_t v5 = sub_10001A7D4(a1, 246, 1, v7, 0);
    }
    else
    {
      uint64_t v5 = 7;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

void sub_100322104(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100322124()
{
  return sub_100202078();
}

uint64_t sub_100322144(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2752))(a1))
  {
    uint64_t v8 = 0;
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009A6EB8);
    }
    char v4 = off_1009F7EB8;
    sub_1000305AC(v9, v3);
    if (sub_1006856B8((uint64_t)v4, v9, &v8))
    {
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      void v7[2] = sub_1003222D0;
      v7[3] = &unk_1009A6738;
      void v7[4] = v8;
      uint64_t v5 = sub_10001A7D4(a1, 246, 1, v7, 0);
    }
    else
    {
      uint64_t v5 = 7;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

void sub_1003222B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003222D0()
{
  return sub_100202078();
}

uint64_t sub_1003222F4(uint64_t a1)
{
  return sub_10001A7D4(a1, 28, 0, &stru_1009A69F8, &stru_1009A6A18);
}

int sub_100322310(id a1)
{
  return sub_1001FCEF0();
}

uint64_t sub_100322328(uint64_t a1, const void *a2, unsigned int a3, const void *a4, unsigned int a5)
{
  v21[0] = 0;
  v21[1] = 0;
  sub_10003AED0((uint64_t)v21, a1 + 8);
  char v19 = 0;
  v20[0] = 0;
  v20[1] = 0;
  sub_10033CE04((uint64_t *)&v19, a1 + 136);
  sub_10003AFE8((uint64_t)v21);
  char v17 = 0;
  char v18 = 0;
  sub_1000335D8(&v17, a2, a3);
  int v15 = 0;
  char v16 = 0;
  sub_1000335D8(&v15, a4, a5);
  __int16 v10 = v19;
  if (v19 != v20)
  {
    do
    {
      (*(void (**)(void *, uint64_t (***)(), uint64_t (***)()))*v10[4])(v10[4], &v17, &v15);
      unsigned int v11 = v10[1];
      if (v11)
      {
        do
        {
          char v12 = (void **)v11;
          unsigned int v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          char v12 = (void **)v10[2];
          BOOL v13 = *v12 == v10;
          __int16 v10 = v12;
        }
        while (!v13);
      }
      __int16 v10 = v12;
    }
    while (v12 != v20);
  }
  int v15 = &off_100998428;
  if (v16) {
    sub_1000368F4(v16);
  }
  char v17 = &off_100998428;
  if (v18) {
    sub_1000368F4(v18);
  }
  sub_1000486F0((uint64_t)&v19, v20[0]);
  sub_10003AFB4((uint64_t)v21);
  return 0;
}

void sub_1003224B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, atomic_uint *a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void *);
  uint64_t v10 = va_arg(va1, void);
  if (a6) {
    sub_1000368F4(a6);
  }
  sub_1000486F0((uint64_t)va, v9);
  sub_10003AFB4((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_100322544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v18[0] = 0;
  v18[1] = 0;
  sub_10003AED0((uint64_t)v18, a1 + 8);
  char v16 = 0;
  v17[0] = 0;
  v17[1] = 0;
  sub_10033CE04((uint64_t *)&v16, a1 + 136);
  sub_10003AFE8((uint64_t)v18);
  uint64_t v10 = v16;
  if (v16 != v17)
  {
    uint64_t v11 = a2 & 0xFFFFFFFFFFFFLL;
    do
    {
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(*v10[4] + 72))(v10[4], v11, a3, a4, a5);
      char v12 = v10[1];
      if (v12)
      {
        do
        {
          BOOL v13 = (void **)v12;
          char v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          BOOL v13 = (void **)v10[2];
          BOOL v14 = *v13 == v10;
          uint64_t v10 = v13;
        }
        while (!v14);
      }
      uint64_t v10 = v13;
    }
    while (v13 != v17);
  }
  sub_1000486F0((uint64_t)&v16, v17[0]);
  sub_10003AFB4((uint64_t)v18);
  return 0;
}

void sub_100322658(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  sub_1000486F0((uint64_t)va, v5);
  sub_10003AFB4((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_100322684(uint64_t a1, char a2)
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009A6EB8);
  }
  char v4 = off_1009F7EB8;

  sub_1006A24F4((uint64_t)v4, a1, a2);
}

uint64_t sub_1003226F0()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 3064);

  return v0();
}

void sub_100322770(uint64_t a1, char a2, uint64_t a3, int a4, __int16 a5, int a6, int a7)
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009A6EB8);
  }
  BOOL v14 = off_1009F7EB8;

  sub_1006A25E0((uint64_t)v14, a1, a2, a3, a4, a5, a6, a7);
}

void sub_10032281C(uint64_t a1, int a2, int a3, int a4, int a5, char *a6, unsigned int a7, char a8, char a9, char a10, __int16 a11, char a12, char a13, char a14)
{
  char v14 = a7;
  int v19 = a2;
  char v21 = a6;
  if (a7 >= 2)
  {
    char v23 = a6 + 1;
    char v22 = *a6;
    uint64_t v24 = a7 - 1;
    char v21 = a6;
    char v25 = a6 + 1;
    do
    {
      int v27 = *v25++;
      char v26 = v27;
      if (v27 < v22)
      {
        char v22 = v26;
        char v21 = v23;
      }
      char v23 = v25;
      --v24;
    }
    while (v24);
  }
  if (qword_1009F7EC0 != -1)
  {
    int v31 = a4;
    int v32 = a5;
    int v29 = a3;
    char v30 = a8;
    dispatch_once(&qword_1009F7EC0, &stru_1009A6EB8);
    int v19 = a2;
    a3 = v29;
    a8 = v30;
    a4 = v31;
    a5 = v32;
  }
  sub_100680814((uint64_t)off_1009F7EB8, a1, v19, a3, a4, a5, (uint64_t)a6, v14, a8, a9, a10, *v21, a11, 0, a13, a14);
}

void sub_100322958(uint64_t a1, int a2, char a3)
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009A6EB8);
  }
  uint64_t v6 = off_1009F7EB8;

  sub_1006A29DC((uint64_t)v6, a1, a2 == 2, a3);
}

uint64_t sub_1003229D8()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_100373068() + 40);

  return v0();
}

void sub_100322A38(uint64_t a1, int a2)
{
  if (a2)
  {
    char v2 = a2;
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009A6E78);
    }
    char v4 = off_1009F8068;
    sub_1004E2710((uint64_t)v4, a1, v2);
  }
}

uint64_t sub_100322AAC()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 3016);

  return v0();
}

uint64_t sub_100322B3C(unsigned char *a1, unsigned int a2)
{
  memset(v8, 0, 223);
  sub_10003FB34();
  if (sub_100350EC8()) {
    unsigned __int16 v4 = 217;
  }
  else {
    unsigned __int16 v4 = 215;
  }
  sub_10003FB34();
  if (!sub_100350EC8()) {
    v4 -= 2;
  }
  if ((*a1 & 0x80) != 0)
  {
    if (a2 < 0xC9) {
      v4 -= 18;
    }
  }
  else if ((*a1 & 0x60) != 0 {
         && (uint64_t v5 = sub_100035F54(), !(*(unsigned int (**)(uint64_t))(*(void *)v5 + 384))(v5)))
  }
  {
    v4 -= 34;
  }
  else
  {
    v4 -= 38;
  }
  if (a2 != v4) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Chipsets/LEHardwareModel.cpp", 4456, "expectedEnhancedLinkQualityInfoSize == vseSize && expectedEnhancedLinkQualityInfoSize <= sizeof(EnhancedLinkQualityInfo)");
  }
  memcpy(v8, a1, v4);
  uint64_t v6 = *(void *)sub_10003FB34();
  (*(void (**)(void))(v6 + 3024))();
  return v4;
}

uint64_t sub_100322CC0(void *__src, size_t __n)
{
  memset(&v5[11], 0, 44);
  if (__n == 173) {
    uint64_t v2 = 173;
  }
  else {
    uint64_t v2 = 220;
  }
  memset(v5, 0, 176);
  if (v2 != __n) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Chipsets/LEHardwareModel.cpp", 4473, "(expectedEnhancedLinkQualityHRBInfoSize == vseSize) && expectedEnhancedLinkQualityHRBInfoSize <= sizeof(EnhancedLinkQualityInfo_HRB)");
  }
  memcpy(v5, __src, __n);
  uint64_t v3 = *(void *)sub_10003FB34();
  (*(void (**)(void))(v3 + 3032))();
  return v2;
}

uint64_t sub_100322DB8(_OWORD *a1, int a2)
{
  if (a2 != 189) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Chipsets/LEHardwareModel.cpp", 4488, "expectedadditionalBtCoexStatsInfoSize == vseSize && expectedadditionalBtCoexStatsInfoSize <= sizeof(additionalBtCoexStatsInfo)");
  }
  long long v2 = a1[9];
  v15[8] = a1[8];
  v15[9] = v2;
  v16[0] = a1[10];
  *(_OWORD *)((char *)v16 + 13) = *(_OWORD *)((char *)a1 + 173);
  long long v3 = a1[5];
  _OWORD v15[4] = a1[4];
  v15[5] = v3;
  long long v4 = a1[7];
  void v15[6] = a1[6];
  v15[7] = v4;
  long long v5 = a1[1];
  v15[0] = *a1;
  v15[1] = v5;
  long long v6 = a1[3];
  void v15[2] = a1[2];
  v15[3] = v6;
  uint64_t v7 = sub_10003FB34();
  (*(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v7
                                                                                                  + 3040))(v7, v15, v8, v9, v10, v11, v12, v13);
  return 189;
}

uint64_t sub_100322E9C(long long *a1, int a2)
{
  if (a2 != 24) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Chipsets/LEHardwareModel.cpp", 4500, "expectedBeamformingStatsSize == vseSize");
  }
  long long v4 = *a1;
  uint64_t v5 = *((void *)a1 + 2);
  uint64_t v2 = sub_10003FB34();
  (*(void (**)(uint64_t, long long *))(*(void *)v2 + 3048))(v2, &v4);
  return 24;
}

uint64_t sub_100322F20()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 3056);

  return v0();
}

void sub_100322F98(long long *a1)
{
  if (sub_100050530())
  {
    uint64_t v2 = malloc_type_malloc(0xFBuLL, 0x10000404B49FA39uLL);
    if (v2)
    {
      long long v3 = v2;
      long long v4 = *a1;
      long long v5 = a1[1];
      long long v6 = a1[3];
      _DWORD v2[2] = a1[2];
      v2[3] = v6;
      _OWORD *v2 = v4;
      v2[1] = v5;
      long long v7 = a1[4];
      long long v8 = a1[5];
      long long v9 = a1[7];
      v2[6] = a1[6];
      v2[7] = v9;
      void v2[4] = v7;
      void v2[5] = v8;
      long long v10 = a1[8];
      long long v11 = a1[9];
      long long v12 = a1[11];
      v2[10] = a1[10];
      v2[11] = v12;
      _OWORD v2[8] = v10;
      v2[9] = v11;
      long long v13 = a1[12];
      long long v14 = a1[13];
      long long v15 = a1[14];
      *(_OWORD *)((char *)v2 + 235) = *(long long *)((char *)a1 + 235);
      v2[13] = v14;
      v2[14] = v15;
      v2[12] = v13;
      v18[0] = 0;
      v18[1] = v18;
      void v18[2] = 0x4012000000;
      v18[3] = sub_10004CFB0;
      void v18[4] = nullsub_22;
      void v18[5] = "";
      uint64_t v19 = 0;
      char v20 = 0;
      sub_1004B8C30(&v19, 0);
      char v20 = v3;
      uint64_t v16 = sub_100019878();
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      void v17[2] = sub_100323100;
      v17[3] = &unk_100999720;
      v17[4] = v18;
      v17[5] = v3;
      sub_100013018(v16, v17);
      _Block_object_dispose(v18, 8);
    }
  }
}

void sub_1003230E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100323100(uint64_t a1)
{
  uint64_t v2 = sub_100050530();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 120))(v2, *(void *)(*(void *)(a1 + 32) + 8) + 48);
  long long v3 = *(void **)(a1 + 40);

  free(v3);
}

void sub_100323168(_OWORD *a1)
{
  if (sub_100050530())
  {
    uint64_t v2 = malloc_type_malloc(0xDCuLL, 0x1000040EC76111FuLL);
    if (v2)
    {
      long long v3 = v2;
      long long v4 = a1[1];
      _OWORD *v2 = *a1;
      v2[1] = v4;
      long long v5 = a1[2];
      long long v6 = a1[3];
      long long v7 = a1[5];
      void v2[4] = a1[4];
      void v2[5] = v7;
      _DWORD v2[2] = v5;
      v2[3] = v6;
      long long v8 = a1[6];
      long long v9 = a1[7];
      long long v10 = a1[9];
      _OWORD v2[8] = a1[8];
      v2[9] = v10;
      v2[6] = v8;
      v2[7] = v9;
      long long v11 = a1[10];
      long long v12 = a1[11];
      long long v13 = a1[12];
      *(_OWORD *)((char *)v2 + 204) = *(_OWORD *)((char *)a1 + 204);
      v2[11] = v12;
      v2[12] = v13;
      v2[10] = v11;
      v16[0] = 0;
      v16[1] = v16;
      _OWORD v16[2] = 0x4012000000;
      v16[3] = sub_1003232C8;
      void v16[4] = nullsub_203;
      void v16[5] = "";
      uint64_t v17 = 0;
      char v18 = 0;
      sub_1004B8C30(&v17, 1);
      char v18 = v3;
      uint64_t v14 = sub_100019878();
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      void v15[2] = sub_1003232D8;
      v15[3] = &unk_100999720;
      _OWORD v15[4] = v16;
      v15[5] = v3;
      sub_100013018(v14, v15);
      _Block_object_dispose(v16, 8);
    }
  }
}

void sub_1003232B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_1003232C8(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1003232D8(uint64_t a1)
{
  uint64_t v2 = sub_100050530();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 120))(v2, *(void *)(*(void *)(a1 + 32) + 8) + 48);
  long long v3 = *(void **)(a1 + 40);

  free(v3);
}

void sub_100323340(long long *a1)
{
  if (sub_100050530())
  {
    uint64_t v2 = malloc_type_malloc(0x40uLL, 0x1000040FA0F61DDuLL);
    if (v2)
    {
      long long v3 = v2;
      long long v4 = *a1;
      long long v5 = a1[1];
      long long v6 = a1[3];
      _DWORD v2[2] = a1[2];
      v2[3] = v6;
      _OWORD *v2 = v4;
      v2[1] = v5;
      v9[0] = 0;
      v9[1] = v9;
      void v9[2] = 0x4012000000;
      v9[3] = sub_100323470;
      void v9[4] = nullsub_204;
      void v9[5] = "";
      uint64_t v10 = 0;
      long long v11 = 0;
      sub_1004B8C30(&v10, 2);
      long long v11 = v3;
      uint64_t v7 = sub_100019878();
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      _DWORD v8[2] = sub_100323480;
      v8[3] = &unk_100999720;
      void v8[4] = v9;
      void v8[5] = v3;
      sub_100013018(v7, v8);
      _Block_object_dispose(v9, 8);
    }
  }
}

void sub_100323458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_100323470(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

void sub_100323480(uint64_t a1)
{
  uint64_t v2 = sub_100050530();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 120))(v2, *(void *)(*(void *)(a1 + 32) + 8) + 48);
  long long v3 = *(void **)(a1 + 40);

  free(v3);
}

void sub_1003234E8(_OWORD *a1)
{
  if (sub_100050530())
  {
    uint64_t v2 = malloc_type_malloc(0xE0uLL, 0x10000405DF52C91uLL);
    if (v2)
    {
      long long v3 = v2;
      long long v4 = a1[1];
      _OWORD *v2 = *a1;
      v2[1] = v4;
      long long v5 = a1[2];
      long long v6 = a1[3];
      long long v7 = a1[5];
      void v2[4] = a1[4];
      void v2[5] = v7;
      _DWORD v2[2] = v5;
      v2[3] = v6;
      long long v8 = a1[6];
      long long v9 = a1[7];
      long long v10 = a1[9];
      _OWORD v2[8] = a1[8];
      v2[9] = v10;
      v2[6] = v8;
      v2[7] = v9;
      long long v11 = a1[10];
      long long v12 = a1[11];
      long long v13 = a1[13];
      v2[12] = a1[12];
      v2[13] = v13;
      v2[10] = v11;
      v2[11] = v12;
      v16[0] = 0;
      v16[1] = v16;
      _OWORD v16[2] = 0x4012000000;
      v16[3] = sub_100323640;
      void v16[4] = nullsub_205;
      void v16[5] = "";
      uint64_t v17 = 0;
      char v18 = 0;
      sub_1004B8C30(&v17, 3);
      char v18 = v3;
      uint64_t v14 = sub_100019878();
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      void v15[2] = sub_100323650;
      v15[3] = &unk_100999720;
      _OWORD v15[4] = v16;
      v15[5] = v3;
      sub_100013018(v14, v15);
      _Block_object_dispose(v16, 8);
    }
  }
}

void sub_100323628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_100323640(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

void sub_100323650(uint64_t a1)
{
  uint64_t v2 = sub_100050530();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 120))(v2, *(void *)(*(void *)(a1 + 32) + 8) + 48);
  long long v3 = *(void **)(a1 + 40);

  free(v3);
}

void sub_1003236B8(_OWORD *a1)
{
  if (sub_100050530())
  {
    uint64_t v2 = malloc_type_malloc(0xDAuLL, 0x10000400A093148uLL);
    if (v2)
    {
      long long v3 = v2;
      long long v4 = a1[1];
      _OWORD *v2 = *a1;
      v2[1] = v4;
      long long v5 = a1[2];
      long long v6 = a1[3];
      long long v7 = a1[5];
      void v2[4] = a1[4];
      void v2[5] = v7;
      _DWORD v2[2] = v5;
      v2[3] = v6;
      long long v8 = a1[6];
      long long v9 = a1[7];
      long long v10 = a1[9];
      _OWORD v2[8] = a1[8];
      v2[9] = v10;
      v2[6] = v8;
      v2[7] = v9;
      long long v11 = a1[10];
      long long v12 = a1[11];
      long long v13 = a1[12];
      *(_OWORD *)((char *)v2 + 202) = *(_OWORD *)((char *)a1 + 202);
      v2[11] = v12;
      v2[12] = v13;
      v2[10] = v11;
      v16[0] = 0;
      v16[1] = v16;
      _OWORD v16[2] = 0x4012000000;
      v16[3] = sub_100323818;
      void v16[4] = nullsub_206;
      void v16[5] = "";
      uint64_t v17 = 0;
      char v18 = 0;
      sub_1004B8C30(&v17, 4);
      char v18 = v3;
      uint64_t v14 = sub_100019878();
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      void v15[2] = sub_100323828;
      v15[3] = &unk_100999720;
      _OWORD v15[4] = v16;
      v15[5] = v3;
      sub_100013018(v14, v15);
      _Block_object_dispose(v16, 8);
    }
  }
}

void sub_100323800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_100323818(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

void sub_100323828(uint64_t a1)
{
  uint64_t v2 = sub_100050530();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 120))(v2, *(void *)(*(void *)(a1 + 32) + 8) + 48);
  long long v3 = *(void **)(a1 + 40);

  free(v3);
}

void sub_100323890(long long *a1)
{
  if (sub_100050530())
  {
    uint64_t v2 = malloc_type_malloc(0xF0uLL, 0x100004019FCA701uLL);
    if (v2)
    {
      long long v3 = v2;
      long long v4 = *a1;
      long long v5 = a1[2];
      v2[1] = a1[1];
      _DWORD v2[2] = v5;
      _OWORD *v2 = v4;
      long long v6 = a1[3];
      long long v7 = a1[4];
      long long v8 = a1[6];
      void v2[5] = a1[5];
      v2[6] = v8;
      v2[3] = v6;
      void v2[4] = v7;
      long long v9 = a1[7];
      long long v10 = a1[8];
      long long v11 = a1[10];
      v2[9] = a1[9];
      v2[10] = v11;
      v2[7] = v9;
      _OWORD v2[8] = v10;
      long long v12 = a1[11];
      long long v13 = a1[12];
      long long v14 = a1[14];
      v2[13] = a1[13];
      v2[14] = v14;
      v2[11] = v12;
      v2[12] = v13;
      v17[0] = 0;
      v17[1] = v17;
      void v17[2] = 0x4012000000;
      v17[3] = sub_1003239F0;
      v17[4] = nullsub_207;
      v17[5] = "";
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      sub_1004B8C30(&v18, 5);
      uint64_t v19 = v3;
      uint64_t v15 = sub_100019878();
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      _OWORD v16[2] = sub_100323A00;
      v16[3] = &unk_100999720;
      void v16[4] = v17;
      void v16[5] = v3;
      sub_100013018(v15, v16);
      _Block_object_dispose(v17, 8);
    }
  }
}

void sub_1003239D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_1003239F0(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

void sub_100323A00(uint64_t a1)
{
  uint64_t v2 = sub_100050530();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 120))(v2, *(void *)(*(void *)(a1 + 32) + 8) + 48);
  long long v3 = *(void **)(a1 + 40);

  free(v3);
}

uint64_t sub_100323A68()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 3072);

  return v0();
}

uint64_t sub_100323AD0()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 3080);

  return v0();
}

uint64_t sub_100323B30()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 3088);

  return v0();
}

uint64_t sub_100323B98()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 3096);

  return v0();
}

uint64_t sub_100323C2C()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 3104);

  return v0();
}

uint64_t sub_100323C94()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 3112);

  return v0();
}

uint64_t sub_100323CFC()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 3120);

  return v0();
}

uint64_t sub_100323D64()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 3128);

  return v0();
}

uint64_t sub_100323DDC()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 3136);

  return v0();
}

uint64_t sub_100323E44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __int16 a8)
{
  uint64_t v16 = sub_10003FB34();
  __int16 v18 = a8;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16))(*(void *)v16 + 3144))(v16, a1, a2, a3, a4, a5, a6, a7, v18);
}

uint64_t sub_100323EF0()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 3152);

  return v0();
}

uint64_t sub_100323F70()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 3160);

  return v0();
}

uint64_t sub_100323FD8()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 3168);

  return v0();
}

uint64_t sub_100324038()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 3192);

  return v0();
}

uint64_t sub_1003240A0()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 3200);

  return v0();
}

uint64_t sub_100324100()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 3208);

  return v0();
}

uint64_t sub_100324160()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 3224);

  return v0();
}

uint64_t sub_1003241C0()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 3216);

  return v0();
}

uint64_t sub_100324220(uint64_t a1)
{
  memset(&v14[1], 0, 143);
  long long v13 = 0u;
  v14[0] = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v10 = 0u;
  *(_WORD *)((char *)&v10 + 7) = *(_WORD *)(a1 + 85);
  BYTE6(v10) = *(unsigned char *)(a1 + 87);
  WORD5(v10) = *(_WORD *)(a1 + 88);
  BYTE9(v10) = *(unsigned char *)(a1 + 90);
  WORD5(v12) = *(_DWORD *)(a1 + 14);
  WORD4(v12) = *(_WORD *)(a1 + 4);
  HIWORD(v12) = *(_DWORD *)(a1 + 18) + WORD5(v12);
  WORD6(v11) = *(_DWORD *)(a1 + 26);
  int v1 = *(_DWORD *)(a1 + 30);
  HIWORD(v11) = v1;
  WORD6(v12) = *(_DWORD *)(a1 + 81);
  WORD3(v13) = *(_DWORD *)(a1 + 38) + *(_DWORD *)(a1 + 22) + *(_DWORD *)(a1 + 54);
  WORD2(v13) = *(_DWORD *)(a1 + 42) + WORD6(v11) + *(_DWORD *)(a1 + 58);
  int v2 = *(_DWORD *)(a1 + 62);
  int v3 = *(_DWORD *)(a1 + 46) + v1;
  WORD3(v14[0]) = v3 + *(_DWORD *)(a1 + 34) + *(_DWORD *)(a1 + 50) + v2 + *(_DWORD *)(a1 + 66);
  WORD1(v14[0]) = v3 + v2;
  WORD2(v14[1]) = *(_WORD *)(a1 + 99);
  *(void *)((char *)v14 + 12) = *(void *)(a1 + 91);
  *(_OWORD *)((char *)&v14[1] + 6) = *(_OWORD *)(a1 + 101);
  long long v4 = *(_OWORD *)(a1 + 117);
  long long v5 = *(_OWORD *)(a1 + 133);
  long long v6 = *(_OWORD *)(a1 + 149);
  *(_OWORD *)((char *)&v14[5] + 5) = *(_OWORD *)(a1 + 164);
  *(_OWORD *)((char *)&v14[4] + 6) = v6;
  *(_OWORD *)((char *)&v14[3] + 6) = v5;
  *(_OWORD *)((char *)&v14[2] + 6) = v4;
  uint64_t v7 = sub_10003FB34();
  return (*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)v7 + 3024))(v7, &v10, v8);
}

uint64_t sub_1003243CC(uint64_t a1)
{
  long long v5 = 0u;
  long long v6 = 0u;
  memset(&v9[1], 0, 143);
  long long v8 = 0u;
  v9[0] = 0u;
  long long v7 = 0u;
  WORD1(v5) = *(_WORD *)a1;
  __int16 v1 = *(_WORD *)(a1 + 2);
  __int16 v2 = *(_WORD *)(a1 + 4);
  LOWORD(v6) = v2 + v1;
  WORD1(v6) = v2;
  WORD3(v6) = *(_WORD *)(a1 + 8);
  WORD6(v5) = *(_WORD *)(a1 + 12);
  *(_WORD *)((char *)&v5 + 7) = *(_WORD *)(a1 + 15);
  BYTE6(v5) = *(unsigned char *)(a1 + 17);
  WORD5(v5) = *(_WORD *)(a1 + 18);
  BYTE9(v5) = BYTE11(v5);
  *(void *)((char *)v9 + 12) = *(void *)(a1 + 21);
  WORD2(v9[1]) = *(_WORD *)(a1 + 29);
  *(_OWORD *)((char *)&v9[1] + 6) = *(_OWORD *)(a1 + 31);
  *(_OWORD *)((char *)&v9[5] + 5) = *(_OWORD *)(a1 + 94);
  *(_OWORD *)((char *)&v9[4] + 6) = *(_OWORD *)(a1 + 79);
  *(_OWORD *)((char *)&v9[3] + 6) = *(_OWORD *)(a1 + 63);
  *(_OWORD *)((char *)&v9[2] + 6) = *(_OWORD *)(a1 + 47);
  if (*(unsigned char *)(a1 + 14) == 2) {
    HIWORD(v5) = v1;
  }
  uint64_t v3 = sub_10003FB34();
  return (*(uint64_t (**)(uint64_t, long long *))(*(void *)v3 + 3024))(v3, &v5);
}

void sub_100324518(uint64_t a1)
{
  if (qword_1009F7F20 != -1) {
    dispatch_once(&qword_1009F7F20, &stru_1009A6ED8);
  }
  sub_100581834(qword_1009F7F18, *(_WORD *)a1, *(unsigned char *)(a1 + 23), *(_WORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 15) / (*(unsigned __int8 *)(a1 + 7) + *(unsigned __int8 *)(a1 + 15)), *(unsigned char *)(a1 + 3), *(unsigned char *)(a1 + 27), *(unsigned char *)(a1 + 28), *(_WORD *)(a1 + 29), HIBYTE(*(_WORD *)(a1 + 29)));
}

void sub_1003245A4(uint64_t a1)
{
  if (qword_1009F7F20 != -1) {
    dispatch_once(&qword_1009F7F20, &stru_1009A6ED8);
  }
  uint64_t v2 = qword_1009F7F18;

  sub_100581938(v2, a1);
}

uint64_t sub_100324608()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 3176);

  return v0();
}

uint64_t sub_100324670()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 3184);

  return v0();
}

uint64_t sub_1003246F0()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 1088);

  return v0();
}

uint64_t sub_100324750()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 1096);

  return v0();
}

uint64_t sub_1003247B0()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 1104);

  return v0();
}

uint64_t sub_100324810()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 1112);

  return v0();
}

uint64_t sub_100324890()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 1120);

  return v0();
}

uint64_t sub_1003248F0()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 3232);

  return v0();
}

uint64_t sub_100324958(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = sub_10003FB34();
  long long v5 = a2[3];
  _DWORD v13[2] = a2[2];
  v13[3] = v5;
  v13[4] = a2[4];
  long long v6 = a2[1];
  v13[0] = *a2;
  v13[1] = v6;
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v4 + 3240))(v4, a1, v13, v7, v8, v9, v10, v11);
}

uint64_t sub_100324A0C()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 3248);

  return v0();
}

uint64_t sub_100324AA4()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 3256);

  return v0();
}

uint64_t sub_100324B34()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 3264);

  return v0();
}

uint64_t sub_100324B94()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 3272);

  return v0();
}

uint64_t sub_100324BF4()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 3280);

  return v0();
}

uint64_t sub_100324C54(uint64_t a1, void (**a2)(uint64_t a1, char a2))
{
  if (!a2) {
    return 1;
  }
  *a2 = sub_100322684;
  a2[1] = (void (*)(uint64_t, char))sub_1003226F0;
  a2[43] = (void (*)(uint64_t, char))sub_100322770;
  a2[42] = (void (*)(uint64_t, char))sub_10032281C;
  a2[2] = (void (*)(uint64_t, char))sub_100322958;
  a2[3] = (void (*)(uint64_t, char))sub_1003229D8;
  a2[4] = (void (*)(uint64_t, char))sub_100322A38;
  a2[5] = (void (*)(uint64_t, char))sub_100322AAC;
  a2[6] = (void (*)(uint64_t, char))sub_100322F20;
  a2[7] = (void (*)(uint64_t, char))sub_100322F98;
  a2[8] = (void (*)(uint64_t, char))sub_100323168;
  a2[9] = (void (*)(uint64_t, char))sub_100323340;
  a2[10] = (void (*)(uint64_t, char))sub_1003234E8;
  a2[11] = (void (*)(uint64_t, char))sub_1003236B8;
  a2[12] = (void (*)(uint64_t, char))sub_100323890;
  a2[30] = (void (*)(uint64_t, char))sub_100324220;
  a2[31] = (void (*)(uint64_t, char))sub_1003243CC;
  a2[13] = (void (*)(uint64_t, char))sub_100322B3C;
  a2[14] = (void (*)(uint64_t, char))sub_100322CC0;
  a2[15] = (void (*)(uint64_t, char))sub_100322DB8;
  a2[16] = (void (*)(uint64_t, char))sub_100323A68;
  a2[17] = (void (*)(uint64_t, char))sub_100323AD0;
  a2[18] = (void (*)(uint64_t, char))sub_100323B30;
  a2[19] = (void (*)(uint64_t, char))sub_100323B98;
  a2[20] = (void (*)(uint64_t, char))nullsub_208;
  a2[21] = (void (*)(uint64_t, char))sub_100323C2C;
  a2[22] = (void (*)(uint64_t, char))sub_100323C94;
  a2[23] = (void (*)(uint64_t, char))sub_100323CFC;
  a2[24] = (void (*)(uint64_t, char))sub_100323D64;
  a2[25] = (void (*)(uint64_t, char))sub_100323DDC;
  a2[27] = (void (*)(uint64_t, char))sub_100323E44;
  a2[28] = (void (*)(uint64_t, char))sub_100323EF0;
  a2[29] = (void (*)(uint64_t, char))sub_100323F70;
  a2[26] = (void (*)(uint64_t, char))sub_100323FD8;
  a2[32] = (void (*)(uint64_t, char))sub_100324608;
  a2[33] = (void (*)(uint64_t, char))sub_100324670;
  a2[34] = (void (*)(uint64_t, char))sub_100324038;
  a2[36] = (void (*)(uint64_t, char))sub_1003240A0;
  a2[35] = (void (*)(uint64_t, char))sub_100324100;
  a2[37] = (void (*)(uint64_t, char))sub_100324160;
  a2[38] = (void (*)(uint64_t, char))sub_1003241C0;
  a2[39] = (void (*)(uint64_t, char))sub_100324518;
  a2[40] = (void (*)(uint64_t, char))sub_1003245A4;
  a2[41] = (void (*)(uint64_t, char))sub_100322E9C;
  a2[44] = (void (*)(uint64_t, char))sub_1003246F0;
  a2[47] = (void (*)(uint64_t, char))sub_100324810;
  a2[45] = (void (*)(uint64_t, char))sub_100324750;
  a2[46] = (void (*)(uint64_t, char))sub_1003247B0;
  a2[48] = (void (*)(uint64_t, char))sub_100324890;
  a2[49] = (void (*)(uint64_t, char))sub_1003248F0;
  a2[50] = (void (*)(uint64_t, char))sub_100324958;
  int v3 = _os_feature_enabled_impl();
  uint64_t result = 0;
  if (v3) {
    long long v5 = sub_100324A0C;
  }
  else {
    long long v5 = 0;
  }
  a2[52] = (void (*)(uint64_t, char))v5;
  a2[53] = (void (*)(uint64_t, char))sub_100324AA4;
  a2[54] = (void (*)(uint64_t, char))sub_100324B34;
  a2[55] = (void (*)(uint64_t, char))sub_100324B94;
  a2[56] = (void (*)(uint64_t, char))sub_100324BF4;
  return result;
}

uint64_t sub_100325024(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xAEu);
}

uint64_t sub_100325084(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 4u);
}

uint64_t sub_1003250E4(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 5u);
}

uint64_t sub_100325144(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x27u);
}

uint64_t sub_1003251A4(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x99u);
}

uint64_t sub_100325204(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x32u);
}

uint64_t sub_100325264(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x5Fu);
}

uint64_t sub_1003252C4(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x7Cu);
}

uint64_t sub_100325324(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x7Fu);
}

uint64_t sub_100325384(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x80u);
}

uint64_t sub_1003253E4(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x81u);
}

uint64_t sub_100325444(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x82u);
}

uint64_t sub_1003254A4(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xABu);
}

uint64_t sub_100325504(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x34u);
}

uint64_t sub_100325564(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8)
{
  int v35 = 0;
  int v36 = a2;
  __int16 v37 = WORD2(a2);
  v34[0] = 0;
  v34[1] = 0;
  sub_10003AED0((uint64_t)v34, a1 + 72);
  if (sub_10001B700(a1, 4))
  {
    uint64_t v15 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = sub_10001AA04(a1, 4);
      *(_DWORD *)std::string buf = 136447746;
      *(void *)&uint8_t buf[4] = v16;
      __int16 v39 = 1024;
      int v40 = a4;
      __int16 v41 = 1024;
      int v42 = a5;
      __int16 v43 = 1024;
      int v44 = a6;
      __int16 v45 = 1024;
      int v46 = a3;
      __int16 v47 = 1040;
      int v48 = 6;
      __int16 v49 = 2096;
      long long v50 = &v36;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Sending: %{public}s, requesterID 0x%x, high %d, enableEPA %d, type %d, addr %{bluetooth:BD_ADDR}.6P", buf, 0x34u);
    }
    char v33 = 0;
    sub_10001B8E0(&v33);
    if (a7) {
      uint64_t v17 = sub_100325084;
    }
    else {
      uint64_t v17 = 0;
    }
    int v18 = sub_1001FBDA8((uint64_t)&v36, a4, a5, &v35, (uint64_t)v17);
    sub_10001B910(&v33);
    if (!v18 && a7)
    {
      if (qword_1009F8070 != -1) {
        dispatch_once(&qword_1009F8070, &stru_1009A6E78);
      }
      int v18 = sub_10001B918((uint64_t)off_1009F8068, 4);
    }
    sub_1000262B8(a1, 4u);
    uint64_t v19 = v18 != 3603 && v18 != 0;
    if ((v18 == 3603 || !v18) && a6)
    {
      if (a3 == 22 || a3 == 17) {
        char v21 = 60;
      }
      else {
        char v21 = 45;
      }
      if (a8) {
        LOBYTE(v22) = 75;
      }
      else {
        LOBYTE(v22) = v21;
      }
      int v32 = 0;
      uint64_t v23 = sub_100017768();
      sub_10004191C(buf, "ePA");
      sub_10004191C(__p, "iPAMaxThreshold");
      int v24 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v23 + 88))(v23, buf, __p, &v32);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v42) < 0) {
        operator delete(*(void **)buf);
      }
      if (v24)
      {
        int v22 = -v32;
        char v25 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v22;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Warning: Setting user defined iPA-Max threshold to -%d dBm through defaults write", buf, 8u);
        }
      }
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472;
      v27[2] = sub_100325958;
      v27[3] = &unk_1009A66D8;
      char v28 = v22;
      char v29 = a7;
      uint64_t v19 = sub_10001A7D4(a1, 174, a7, v27, 0);
    }
    sub_10001B8AC(&v33);
  }
  else
  {
    uint64_t v19 = 2;
  }
  sub_10003AFB4((uint64_t)v34);
  return v19;
}

void sub_1003258EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  sub_10001B8AC(&a24);
  sub_10003AFB4((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_100325958()
{
  return sub_1001F8EF0();
}

uint64_t sub_10032597C(uint64_t a1, uint64_t a2, char a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_1003259F8;
  void v4[3] = &unk_1009A65D8;
  void v4[4] = a2;
  char v5 = a3;
  return sub_10001A7D4(a1, 5, 1, v4, 0);
}

uint64_t sub_1003259F8(uint64_t a1)
{
  return sub_1001FD7AC(*(void *)(a1 + 32) + 128);
}

uint64_t sub_100325A1C(uint64_t a1, char a2, char a3, char a4, char a5, char a6)
{
  if (*(_DWORD *)(sub_10003FB34() + 712) < 0x13u)
  {
    if (*(_DWORD *)(sub_10003FB34() + 712) < 0xFu)
    {
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      _OWORD v16[2] = sub_100325C04;
      v16[3] = &unk_1009A6878;
      char v17 = a3;
      char v18 = a4;
      char v19 = a5;
      char v20 = a6;
      long long v12 = v16;
      uint64_t v13 = a1;
      uint64_t v14 = 39;
    }
    else
    {
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472;
      void v21[2] = sub_100325BE0;
      v21[3] = &unk_1009A69D8;
      char v22 = a3;
      char v23 = a4;
      char v24 = a6;
      long long v12 = v21;
      uint64_t v13 = a1;
      uint64_t v14 = 50;
    }
  }
  else
  {
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    void v25[2] = sub_100325BB8;
    v25[3] = &unk_1009A6878;
    char v26 = a2;
    char v27 = a3;
    char v28 = a4;
    char v29 = a6;
    long long v12 = v25;
    uint64_t v13 = a1;
    uint64_t v14 = 95;
  }
  return sub_10001A7D4(v13, v14, 1, v12, 0);
}

uint64_t sub_100325BB8()
{
  return sub_100200CD0();
}

uint64_t sub_100325BE0()
{
  return sub_100200C44();
}

uint64_t sub_100325C04()
{
  return sub_1001FD694();
}

uint64_t sub_100325C2C(uint64_t a1, char a2, char a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_100325CA8;
  void v4[3] = &unk_1009A66D8;
  char v5 = a2;
  char v6 = a3;
  return sub_10001A7D4(a1, 171, 1, v4, 0);
}

uint64_t sub_100325CA8()
{
  return sub_1001F91D0();
}

uint64_t sub_100325CC8(uint64_t a1, uint64_t a2, char a3, char a4, char a5, char a6, char a7)
{
  if (*(_DWORD *)(sub_10003FB34() + 712) < 0x13u)
  {
    if (*(_DWORD *)(sub_10003FB34() + 712) < 0xFu)
    {
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      void v18[2] = sub_100325FC0;
      v18[3] = &unk_1009A6998;
      void v18[4] = a2;
      char v19 = a4;
      char v20 = a5;
      char v21 = a6;
      char v22 = a7;
      uint64_t v14 = v18;
      uint64_t v15 = a1;
      uint64_t v16 = 39;
    }
    else
    {
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472;
      void v23[2] = sub_100325F20;
      v23[3] = &unk_1009A6598;
      v23[4] = a2;
      char v24 = a4;
      char v25 = a5;
      char v26 = a7;
      uint64_t v14 = v23;
      uint64_t v15 = a1;
      uint64_t v16 = 50;
    }
  }
  else
  {
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_100325E7C;
    v27[3] = &unk_1009A6998;
    void v27[4] = a2;
    char v28 = a3;
    char v29 = a4;
    char v30 = a5;
    char v31 = a7;
    uint64_t v14 = v27;
    uint64_t v15 = a1;
    uint64_t v16 = 95;
  }
  return sub_10001A7D4(v15, v16, 1, v14, 0);
}

uint64_t sub_100325E7C(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v1 = sub_10017E2D4(*(void *)(a1 + 32) + 128, &v4);
  if (!v1) {
    return sub_100200CD0();
  }
  uint64_t v2 = v1;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
    sub_1007573D0();
  }
  return v2;
}

uint64_t sub_100325F20(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v1 = sub_10017E2D4(*(void *)(a1 + 32) + 128, &v4);
  if (!v1) {
    return sub_100200C44();
  }
  uint64_t v2 = v1;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
    sub_1007573D0();
  }
  return v2;
}

uint64_t sub_100325FC0(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v1 = sub_10017E2D4(*(void *)(a1 + 32) + 128, &v4);
  if (!v1) {
    return sub_1001FD694();
  }
  uint64_t v2 = v1;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
    sub_1007573D0();
  }
  return v2;
}

uint64_t sub_100326064(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1003260DC;
  v3[3] = &unk_1009A6618;
  char v4 = a2;
  return sub_10001A7D4(a1, 153, 1, v3, 0);
}

uint64_t sub_1003260DC()
{
  return sub_1001FD720();
}

uint64_t sub_1003260F4(uint64_t a1, char a2, int a3, char a4, char a5, char a6, char a7)
{
  if (!a3) {
    return 7;
  }
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_100326190;
  v8[3] = &unk_1009A67F8;
  char v10 = a4;
  char v11 = a5;
  char v12 = a7;
  char v13 = a6;
  char v14 = a2;
  __int16 v9 = a3;
  return sub_10001A7D4(a1, 124, 1, v8, 0);
}

uint64_t sub_100326190()
{
  return sub_100200D5C();
}

uint64_t sub_10032621C(uint64_t a1, char a2, uint64_t a3, char a4, char a5, char a6, char a7)
{
  if (!a3) {
    return 2;
  }
  uint64_t v22 = 0;
  uint64_t v13 = sub_10017E2D4(a3 + 128, &v22);
  if (v13)
  {
    uint64_t v14 = v13;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_1007573D0();
    }
  }
  else
  {
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    _OWORD v16[2] = sub_100326340;
    v16[3] = &unk_1009A6A38;
    char v17 = a4;
    char v18 = a5;
    char v19 = a7;
    char v20 = a6;
    char v21 = a2;
    void v16[4] = v22;
    return sub_10001A7D4(a1, 124, 1, v16, 0);
  }
  return v14;
}

uint64_t sub_100326340()
{
  return sub_100200D5C();
}

uint64_t sub_1003263D0(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  if (!a2) {
    return 7;
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_10032645C;
  v5[3] = &unk_1009A65F8;
  char v6 = a3;
  void v5[4] = a2;
  void v5[5] = a4;
  return sub_10001A7D4(a1, 124, 1, v5, 0);
}

uint64_t sub_10032645C(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v1 = sub_10017E2D4(*(void *)(a1 + 32) + 128, &v4);
  if (!v1) {
    return sub_100200D5C();
  }
  uint64_t v2 = v1;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
    sub_1007573D0();
  }
  return v2;
}

uint64_t sub_1003264FC(uint64_t a1, char a2, uint64_t a3, char a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_10032657C;
  v5[3] = &unk_1009A67D8;
  void v5[4] = a3;
  char v6 = a2;
  char v7 = a4;
  return sub_10001A7D4(a1, 127, 1, v5, 0);
}

uint64_t sub_10032657C()
{
  return sub_100200DE8();
}

uint64_t sub_1003265D8(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if (!a3) {
    return 2;
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_100326668;
  v5[3] = &unk_1009A67D8;
  void v5[4] = a3;
  char v6 = a2;
  char v7 = a4;
  return sub_10001A7D4(a1, 128, 1, v5, 0);
}

uint64_t sub_100326668()
{
  return sub_100200E74();
}

uint64_t sub_100326688(uint64_t a1, char a2, uint64_t a3)
{
  if (!a3) {
    return 2;
  }
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, a1 + 72);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_100326764;
  v8[3] = &unk_1009A65D8;
  void v8[4] = a3;
  char v9 = a2;
  uint64_t v6 = sub_10001A7D4(a1, 129, 1, v8, 0);
  sub_10003AFB4((uint64_t)v10);
  return v6;
}

void sub_100326750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100326764()
{
  return sub_100200F8C();
}

uint64_t sub_100326784(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1003267FC;
  v3[3] = &unk_1009A6618;
  char v4 = a2;
  return sub_10001A7D4(a1, 130, 1, v3, 0);
}

uint64_t sub_1003267FC()
{
  return sub_100201018();
}

uint64_t sub_100326814(uint64_t a1, uint64_t a2, char a3, char a4, char a5, char a6)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_10032689C;
  v7[3] = &unk_1009A6998;
  void v7[4] = a2;
  char v8 = a3;
  char v9 = a4;
  char v10 = a5;
  char v11 = a6;
  return sub_10001A7D4(a1, 52, 1, v7, 0);
}

uint64_t sub_10032689C()
{
  return sub_100200F00();
}

uint64_t sub_1003268CC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v22[0] = 0;
  v22[1] = 0;
  sub_10003AED0((uint64_t)v22, a1 + 8);
  char v20 = 0;
  v21[0] = 0;
  v21[1] = 0;
  sub_10033CE04((uint64_t *)&v20, a1 + 136);
  char v12 = sub_100197864(a2);
  if (sub_100197698((uint64_t)v12))
  {
    uint64_t v13 = sub_100197CD8((uint64_t)v12);
    uint64_t v14 = v20;
    if (v20 != v21)
    {
      uint64_t v15 = v13;
      do
      {
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v14[4] + 8))(v14[4], v15, a3, a4, a5, a6);
        uint64_t v16 = v14[1];
        if (v16)
        {
          do
          {
            char v17 = (void **)v16;
            uint64_t v16 = (void *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            char v17 = (void **)v14[2];
            BOOL v18 = *v17 == v14;
            uint64_t v14 = v17;
          }
          while (!v18);
        }
        uint64_t v14 = v17;
      }
      while (v17 != v21);
    }
  }
  sub_1000486F0((uint64_t)&v20, v21[0]);
  sub_10003AFB4((uint64_t)v22);
  return 0;
}

void sub_100326A04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  char v5 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  sub_1000486F0((uint64_t)va, v5);
  sub_10003AFB4((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_100326A34(uint64_t a1, uint64_t a2)
{
  v14[0] = 0;
  v14[1] = 0;
  sub_10003AED0((uint64_t)v14, a1 + 8);
  char v12 = 0;
  v13[0] = 0;
  v13[1] = 0;
  sub_10033CE04((uint64_t *)&v12, a1 + 136);
  char v4 = sub_100197864(*(unsigned __int16 *)(a2 + 2));
  if (sub_100197698((uint64_t)v4))
  {
    uint64_t v5 = sub_100197CD8((uint64_t)v4);
    uint64_t v6 = v12;
    if (v12 != v13)
    {
      uint64_t v7 = v5;
      do
      {
        (*(void (**)(void *, uint64_t, uint64_t))(*v6[4] + 16))(v6[4], a2, v7);
        char v8 = v6[1];
        if (v8)
        {
          do
          {
            char v9 = (void **)v8;
            char v8 = (void *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            char v9 = (void **)v6[2];
            BOOL v10 = *v9 == v6;
            uint64_t v6 = v9;
          }
          while (!v10);
        }
        uint64_t v6 = v9;
      }
      while (v9 != v13);
    }
  }
  sub_1000486F0((uint64_t)&v12, v13[0]);
  sub_10003AFB4((uint64_t)v14);
  return 0;
}

void sub_100326B40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  sub_1000486F0((uint64_t)va, v5);
  sub_10003AFB4((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_100326B70(uint64_t a1, unsigned __int16 *a2)
{
  v14[0] = 0;
  v14[1] = 0;
  sub_10003AED0((uint64_t)v14, a1 + 8);
  char v12 = 0;
  v13[0] = 0;
  v13[1] = 0;
  sub_10033CE04((uint64_t *)&v12, a1 + 136);
  char v4 = sub_100197864(*a2);
  if (sub_100197698((uint64_t)v4))
  {
    uint64_t v5 = sub_100197CD8((uint64_t)v4);
    uint64_t v6 = v12;
    if (v12 != v13)
    {
      uint64_t v7 = v5;
      do
      {
        (*(void (**)(void *, unsigned __int16 *, uint64_t))(*v6[4] + 24))(v6[4], a2, v7);
        char v8 = v6[1];
        if (v8)
        {
          do
          {
            char v9 = (void **)v8;
            char v8 = (void *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            char v9 = (void **)v6[2];
            BOOL v10 = *v9 == v6;
            uint64_t v6 = v9;
          }
          while (!v10);
        }
        uint64_t v6 = v9;
      }
      while (v9 != v13);
    }
  }
  sub_1000486F0((uint64_t)&v12, v13[0]);
  sub_10003AFB4((uint64_t)v14);
  return 0;
}

void sub_100326C7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  sub_1000486F0((uint64_t)va, v5);
  sub_10003AFB4((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_100326CAC(uint64_t a1, uint64_t a2)
{
  v14[0] = 0;
  v14[1] = 0;
  sub_10003AED0((uint64_t)v14, a1 + 8);
  char v12 = 0;
  v13[0] = 0;
  v13[1] = 0;
  sub_10033CE04((uint64_t *)&v12, a1 + 136);
  char v4 = sub_100197864(*(unsigned __int16 *)(a2 + 7));
  if (sub_100197698((uint64_t)v4))
  {
    uint64_t v5 = sub_100197CD8((uint64_t)v4);
    uint64_t v6 = v12;
    if (v12 != v13)
    {
      uint64_t v7 = v5;
      do
      {
        (*(void (**)(void *, uint64_t, uint64_t))(*v6[4] + 32))(v6[4], a2, v7);
        char v8 = v6[1];
        if (v8)
        {
          do
          {
            char v9 = (void **)v8;
            char v8 = (void *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            char v9 = (void **)v6[2];
            BOOL v10 = *v9 == v6;
            uint64_t v6 = v9;
          }
          while (!v10);
        }
        uint64_t v6 = v9;
      }
      while (v9 != v13);
    }
  }
  sub_1000486F0((uint64_t)&v12, v13[0]);
  sub_10003AFB4((uint64_t)v14);
  return 0;
}

void sub_100326DB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  sub_1000486F0((uint64_t)va, v5);
  sub_10003AFB4((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_100326DE8(uint64_t a1, uint64_t a2)
{
  v14[0] = 0;
  v14[1] = 0;
  sub_10003AED0((uint64_t)v14, a1 + 8);
  char v12 = 0;
  v13[0] = 0;
  v13[1] = 0;
  sub_10033CE04((uint64_t *)&v12, a1 + 136);
  char v4 = sub_100197864(*(unsigned __int16 *)(a2 + 2));
  if (sub_100197698((uint64_t)v4))
  {
    uint64_t v5 = sub_100197CD8((uint64_t)v4);
    uint64_t v6 = v12;
    if (v12 != v13)
    {
      uint64_t v7 = v5;
      do
      {
        (*(void (**)(void *, uint64_t, uint64_t))(*v6[4] + 40))(v6[4], a2, v7);
        char v8 = v6[1];
        if (v8)
        {
          do
          {
            char v9 = (void **)v8;
            char v8 = (void *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            char v9 = (void **)v6[2];
            BOOL v10 = *v9 == v6;
            uint64_t v6 = v9;
          }
          while (!v10);
        }
        uint64_t v6 = v9;
      }
      while (v9 != v13);
    }
  }
  sub_1000486F0((uint64_t)&v12, v13[0]);
  sub_10003AFB4((uint64_t)v14);
  return 0;
}

void sub_100326EF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  sub_1000486F0((uint64_t)va, v5);
  sub_10003AFB4((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_100326F24(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v3 = ((unint64_t)a2[2] << 40) | ((unint64_t)a2[3] << 32) | ((unint64_t)a2[4] << 24) | ((unint64_t)a2[5] << 16) | ((unint64_t)a2[6] << 8) | a2[7];
  char v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int16 *)a2;
    sub_1006ACF44();
    if (v23 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if (a2[8]) {
      uint64_t v7 = "ACL";
    }
    else {
      uint64_t v7 = "SCO";
    }
    int v8 = a2[10];
    int v9 = a2[11];
    if (a2[9]) {
      BOOL v10 = "eLNAOn";
    }
    else {
      BOOL v10 = "eLNAByPass";
    }
    *(_DWORD *)std::string buf = 67110402;
    *(_DWORD *)&uint8_t buf[4] = v5;
    __int16 v25 = 2080;
    char v26 = p_p;
    if (v8) {
      char v11 = "BTSC";
    }
    else {
      char v11 = "BTMC";
    }
    __int16 v27 = 2080;
    char v28 = v7;
    char v12 = "Central";
    __int16 v29 = 2080;
    if (v9) {
      char v12 = "Peripheral";
    }
    char v30 = v10;
    __int16 v31 = 2080;
    int v32 = v11;
    __int16 v33 = 2080;
    __int16 v34 = v12;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Scan Core Classic Connection Event: lm handle: 0x%x, BT address: %s, link type: %s, Elna mode: %s, Initiated Core: %s, role: %s", buf, 0x3Au);
    if (v23 < 0) {
      operator delete(__p);
    }
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009A6EF8);
  }
  uint64_t v13 = sub_100030F10((uint64_t)off_1009F7EF8, v3, 0);
  if (v13)
  {
    uint64_t v14 = v13;
    int v15 = a2[10];
    if (a2[10])
    {
      if (v15 == 1)
      {
        ++*(_WORD *)(v13 + 1414);
      }
      else
      {
        char v17 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
        {
          sub_100474E18(v14, buf);
          if (SBYTE3(v28) >= 0) {
            char v19 = buf;
          }
          else {
            char v19 = *(uint8_t **)buf;
          }
          LODWORD(__p) = 67109378;
          HIDWORD(__p) = v15;
          __int16 v21 = 2082;
          uint64_t v22 = v19;
          _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Scan Core Classic Connection Event: Invalid core initiator value %d for %{public}s", (uint8_t *)&__p, 0x12u);
          if (SBYTE3(v28) < 0) {
            operator delete(*(void **)buf);
          }
        }
      }
    }
    else
    {
      ++*(_WORD *)(v13 + 1416);
    }
  }
  else
  {
    uint64_t v16 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_100757438(v3, v16);
    }
  }
  return 0;
}

uint64_t sub_1003271FC(uint64_t a1, const void *a2)
{
  memcpy(__dst, a2, sizeof(__dst));
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009A6E98);
  }
  sub_1006DD3E0((uint64_t)off_1009F85C0, __dst);
  return 0;
}

uint64_t sub_100327268(uint64_t a1, _DWORD *a2)
{
  unint64_t v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEBUG)) {
    sub_1007574EC(a2, v3);
  }
  return 0;
}

uint64_t sub_1003272B8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  v4[0] = *(_OWORD *)a2;
  v4[1] = v2;
  int v5 = *(_DWORD *)(a2 + 32);
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_1009A6F18);
  }
  sub_1004FED7C((uint64_t)off_1009F8150, v4);
  return 0;
}

void sub_100327320(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009A6F38);
  }
  *(void *)uuid_t uu = 0;
  uint64_t v14 = 0;
  sub_100014B58((uint64_t)off_1009F7ED8, a3, 0, 1u, 0, 0, uu);
  if (uuid_is_null(uu))
  {
    int v5 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *(unsigned __int16 *)(a2 + 204);
      v12[0] = 67109120;
      v12[1] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Something is wrong. Skipping update LE metrics connectionHandle : %d", (uint8_t *)v12, 8u);
    }
  }
  else if (*(_WORD *)(a2 + 18))
  {
    if ((unsigned __int16)(*(_WORD *)(a2 + 18) + 127) <= 0x93u)
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009A6F38);
      }
      uint64_t v7 = off_1009F7ED8;
      int v8 = sub_100031234(uu);
      sub_1006C36C0((uint64_t)v7, v8, *(__int16 *)(a2 + 18));
    }
    unsigned int v9 = *(unsigned __int16 *)(a2 + 21) + *(unsigned __int16 *)(a2 + 23);
    if (v9)
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009A6F38);
      }
      BOOL v10 = off_1009F7ED8;
      char v11 = sub_100031234(uu);
      sub_1006C37D0((uint64_t)v10, v11, 100 * *(unsigned __int16 *)(a2 + 23) / v9);
    }
  }
}

void sub_100327508(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100327524(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  int v4 = *(unsigned __int16 *)(a2 + 202);
  if (*(_WORD *)(a2 + 202))
  {
    if (*a3)
    {
LABEL_3:
      int v6 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = *(unsigned __int16 *)(a2 + 6);
        int v8 = *(unsigned __int16 *)(a2 + 14);
        int v9 = *(__int16 *)(a2 + 16);
        int v10 = *(unsigned __int16 *)(a2 + 30);
        int v11 = *(unsigned __int16 *)(a2 + 32);
        int v12 = *(unsigned __int16 *)(a2 + 34);
        int v13 = *(unsigned __int16 *)(a2 + 36);
        int v14 = *(unsigned __int8 *)(a2 + 185);
        int v15 = *(unsigned __int8 *)(a2 + 187);
        int v16 = *(unsigned __int8 *)(a2 + 189);
        int v17 = *(unsigned __int8 *)(a2 + 191);
        int v18 = *(unsigned __int8 *)(a2 + 193);
        int v19 = *(unsigned __int8 *)(a2 + 195);
        int v20 = *(unsigned __int8 *)(a2 + 197);
        int v21 = *(unsigned __int8 *)(a2 + 199);
        int v22 = *(unsigned __int8 *)(a2 + 201);
        int v23 = *(unsigned __int8 *)(a2 + 190);
        int v24 = *(unsigned __int8 *)(a2 + 192);
        int v25 = *(unsigned __int8 *)(a2 + 194);
        int v26 = *(unsigned __int8 *)(a2 + 184);
        int v27 = *(unsigned __int8 *)(a2 + 186);
        int v28 = *(unsigned __int8 *)(a2 + 188);
        int v29 = *(unsigned __int8 *)(a2 + 196);
        int v30 = *(unsigned __int8 *)(a2 + 198);
        int v51 = *(unsigned __int8 *)(a2 + 200);
        *(_DWORD *)std::string buf = 67115520;
        int v53 = v4;
        __int16 v54 = 1024;
        int v55 = v7;
        __int16 v56 = 1024;
        int v57 = v8;
        __int16 v58 = 1024;
        int v59 = v9;
        __int16 v60 = 1024;
        int v61 = v10;
        __int16 v62 = 1024;
        int v63 = v11;
        __int16 v64 = 1024;
        int v65 = v12;
        __int16 v66 = 1024;
        int v67 = v13;
        __int16 v68 = 1024;
        int v69 = v14;
        __int16 v70 = 1024;
        int v71 = v15;
        __int16 v72 = 1024;
        int v73 = v16;
        __int16 v74 = 1024;
        int v75 = v17;
        __int16 v76 = 1024;
        int v77 = v18;
        __int16 v78 = 1024;
        int v79 = v19;
        __int16 v80 = 1024;
        int v81 = v20;
        __int16 v82 = 1024;
        int v83 = v21;
        __int16 v84 = 1024;
        int v85 = v22;
        __int16 v86 = 1024;
        int v87 = v23;
        __int16 v88 = 1024;
        int v89 = v24;
        __int16 v90 = 1024;
        int v91 = v25;
        __int16 v92 = 1024;
        int v93 = v26;
        __int16 v94 = 1024;
        int v95 = v27;
        __int16 v96 = 1024;
        int v97 = v28;
        __int16 v98 = 1024;
        int v99 = v29;
        __int16 v100 = 1024;
        int v101 = v30;
        __int16 v102 = 1024;
        int v103 = v51;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Classic [0x%x]: time %3d, coex %3d, rssi %3d, tx [S=%3d:F=%3d], rx [S=%3d:F=%3d], Pkt Tx{%d %d %d}{%d %d %d}{%d %d %d} Rx{%d %d %d}{%d %d %d}{%d %d %d}", buf, 0x9Eu);
      }
      if (qword_1009F7F00 != -1) {
        dispatch_once(&qword_1009F7F00, &stru_1009A6EF8);
      }
      uint64_t v31 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)a3, 1);
      if (v31)
      {
        uint64_t v32 = v31;
        int v33 = *(__int16 *)(a2 + 16);
        if ((v33 + 127) <= 0x93) {
          sub_10047BBE0(v31, v33);
        }
        int v34 = *(unsigned __int16 *)(a2 + 36);
        unsigned int v35 = *(unsigned __int16 *)(a2 + 34) + v34;
        if (v35) {
          sub_10047BBFC(v32, 100 * v34 / v35);
        }
      }
      return;
    }
    uint64_t v36 = 1;
    while (v36 != 6)
    {
      if (a3[v36++])
      {
        if ((unint64_t)(v36 - 2) <= 4) {
          goto LABEL_3;
        }
        break;
      }
    }
  }
  long long v38 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v39 = *(unsigned __int16 *)(a2 + 204);
    int v40 = *(unsigned __int16 *)(a2 + 4);
    int v41 = *(unsigned __int16 *)(a2 + 12);
    int v42 = *(__int16 *)(a2 + 18);
    int v43 = *(unsigned __int16 *)(a2 + 21);
    int v44 = *(unsigned __int16 *)(a2 + 23);
    int v45 = *(unsigned __int16 *)(a2 + 25);
    int v46 = *(unsigned __int16 *)(a2 + 27);
    int v47 = *(unsigned __int8 *)(a2 + 180);
    int v48 = *(unsigned __int8 *)(a2 + 181);
    int v49 = *(unsigned __int8 *)(a2 + 182);
    int v50 = *(unsigned __int8 *)(a2 + 183);
    *(_DWORD *)std::string buf = 67111936;
    int v53 = v39;
    __int16 v54 = 1024;
    int v55 = v40;
    __int16 v56 = 1024;
    int v57 = v41;
    __int16 v58 = 1024;
    int v59 = v42;
    __int16 v60 = 1024;
    int v61 = v43;
    __int16 v62 = 1024;
    int v63 = v44;
    __int16 v64 = 1024;
    int v65 = v45;
    __int16 v66 = 1024;
    int v67 = v46;
    __int16 v68 = 1024;
    int v69 = v47;
    __int16 v70 = 1024;
    int v71 = v48;
    __int16 v72 = 1024;
    int v73 = v49;
    __int16 v74 = 1024;
    int v75 = v50;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Le [0x%x]: time %3d, coex %3d, rssi %3d, tx [S=%3d:F=%3d], rx [S=%3d:F=%3d], 1M {rx %d, tx %d}, 2M {rx %d, tx %d}", buf, 0x4Au);
  }
}

uint64_t sub_1003278C0(uint64_t a1, _WORD *a2)
{
  __int16 v4 = a2[2];
  __int16 v5 = a2[3];
  __int16 v6 = a2[4];
  __int16 v7 = a2[5];
  __int16 v23 = a2[9];
  int v24 = *(unsigned __int16 *)((char *)a2 + 23);
  int v26 = *(unsigned __int16 *)((char *)a2 + 21);
  int v27 = *(unsigned __int16 *)((char *)a2 + 25);
  int v25 = *(unsigned __int16 *)((char *)a2 + 27);
  int v8 = (unsigned __int16)a2[16];
  int v28 = (unsigned __int16)a2[15];
  int v29 = (unsigned __int16)a2[17];
  int v9 = (unsigned __int16)a2[18];
  *(void *)(a1 + 1216) = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_1009A6F18);
  }
  unsigned __int16 v10 = v6 + v4;
  unsigned __int16 v11 = v7 + v5;
  char v12 = sub_1004FB404(off_1009F8150);
  if (*(unsigned char *)(a1 + 1434)
    || (unsigned int v13 = v11 + v10, v13 > *(unsigned __int16 *)(a1 + 1430))
    || v13 < *(unsigned __int16 *)(a1 + 1432))
  {
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009A6EB8);
    }
    int v14 = off_1009F7EB8;
    int v15 = sub_100197864((unsigned __int16)a2[102]);
    sub_1006A27A8((uint64_t)v14, (uint64_t)v15, v10, v11, v12, *(void *)(a1 + 1216), 0);
  }
  if (*(unsigned char *)(a1 + 1435))
  {
    __int16 v16 = *(_WORD *)(a1 + 1438);
    unsigned __int16 v17 = (unsigned __int16)(v16 + 1) <= 0xFFF0u ? v16 + 1 : 0;
    *(_WORD *)(a1 + 1438) = v17;
    if (!(v17 % *(unsigned __int16 *)(a1 + 1436)))
    {
      unsigned int v18 = 100 * v9 / (v9 + v29);
      uint64_t v19 = *(void *)(a1 + 1216);
      if (qword_1009F7EC0 != -1) {
        dispatch_once(&qword_1009F7EC0, &stru_1009A6EB8);
      }
      int v20 = off_1009F7EB8;
      int v21 = sub_100197864((unsigned __int16)a2[102]);
      LOWORD(v30) = v23;
      WORD1(v30) = 100 * v24 / (v24 + v26);
      WORD2(v30) = v26;
      WORD3(v30) = 100 * v8 / (v8 + v28);
      WORD4(v30) = v28;
      WORD5(v30) = 100 * v25 / (v25 + v27);
      WORD6(v30) = v27;
      HIWORD(v30) = v18;
      __int16 v31 = v29;
      int v32 = 0;
      __int16 v33 = 0;
      uint64_t v34 = v19;
      sub_1006A28CC((uint64_t)v20, (uint64_t)v21, &v30, 0);
    }
  }
  return 0;
}

uint64_t sub_100327B48(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    __int16 v5 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *(unsigned __int16 *)(a2 + 202);
      int v7 = *(unsigned __int16 *)(a2 + 204);
      *(_DWORD *)std::string buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v6;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "PhyStats caused system to wake up -- Classic connection uintptr_t handle = 0x%02x, LE connection uintptr_t handle = 0x%02x", buf, 0xEu);
    }
    uint64_t v8 = sub_100017768();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 8))(v8))
    {
      int v9 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = *(unsigned __int16 *)(a2 + 202);
        int v11 = *(unsigned __int16 *)(a2 + 204);
        *(_DWORD *)std::string buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v10;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "PhyStats caused system to wake up -- Classic connection uintptr_t handle = 0x%02x, LE connection uintptr_t handle = 0x%02x -- getting ABCSnapshot ", buf, 0xEu);
      }
      sub_1004B8B04("PhyStats", "parseWakeupCause", 60.0);
    }
  }
  if (*(unsigned char *)(a1 + 1194) && *(_WORD *)(a2 + 18)) {
    *(_WORD *)(a2 + 18) = *(_WORD *)(a1 + 1196);
  }
  if (*(unsigned char *)(a1 + 1195) && *(_WORD *)(a2 + 16)) {
    *(_WORD *)(a2 + 16) = *(_WORD *)(a1 + 1198);
  }
  uint64_t v12 = sub_10003FB34();
  if ((sub_100354254(v12) & 1) == 0)
  {
    unsigned int v13 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
      sub_1007575D0(v13, v14, v15, v16, v17, v18, v19, v20);
    }
  }
  uint64_t v21 = sub_10003FB34();
  uint64_t result = sub_100354254(v21);
  if (result)
  {
    long long v23 = *(_OWORD *)(a2 + 176);
    long long v95 = *(_OWORD *)(a2 + 160);
    v96[0] = v23;
    *(_OWORD *)((char *)v96 + 14) = *(_OWORD *)(a2 + 190);
    long long v24 = *(_OWORD *)(a2 + 112);
    long long v91 = *(_OWORD *)(a2 + 96);
    long long v92 = v24;
    long long v25 = *(_OWORD *)(a2 + 144);
    long long v93 = *(_OWORD *)(a2 + 128);
    long long v94 = v25;
    long long v26 = *(_OWORD *)(a2 + 48);
    long long v87 = *(_OWORD *)(a2 + 32);
    long long v88 = v26;
    long long v27 = *(_OWORD *)(a2 + 80);
    long long v89 = *(_OWORD *)(a2 + 64);
    long long v90 = v27;
    long long v28 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)std::string buf = *(_OWORD *)a2;
    long long v86 = v28;
    if (*(unsigned char *)(a1 + 1193))
    {
      sub_1000E8334(0, (uint64_t)buf);
      long long v29 = v96[0];
      *(_OWORD *)(a1 + 1384) = v95;
      *(_OWORD *)(a1 + 1400) = v29;
      *(_OWORD *)(a1 + 1414) = *(_OWORD *)((char *)v96 + 14);
      long long v30 = v92;
      *(_OWORD *)(a1 + 1320) = v91;
      *(_OWORD *)(a1 + 1336) = v30;
      long long v31 = v94;
      *(_OWORD *)(a1 + 1352) = v93;
      *(_OWORD *)(a1 + 1368) = v31;
      long long v32 = v88;
      *(_OWORD *)(a1 + 1256) = v87;
      *(_OWORD *)(a1 + 1272) = v32;
      long long v33 = v90;
      *(_OWORD *)(a1 + 1288) = v89;
      *(_OWORD *)(a1 + 1304) = v33;
      long long v34 = v86;
      *(_OWORD *)(a1 + 1224) = *(_OWORD *)buf;
      *(_OWORD *)(a1 + 1240) = v34;
      *(void *)(a1 + 1216) = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
      return 0;
    }
    int v55 = 0;
    if (sub_10016E134((uint64_t)buf, &v55))
    {
      long long v35 = v96[0];
      *(_OWORD *)(a1 + 1384) = v95;
      *(_OWORD *)(a1 + 1400) = v35;
      *(_OWORD *)(a1 + 1414) = *(_OWORD *)((char *)v96 + 14);
      long long v36 = v92;
      *(_OWORD *)(a1 + 1320) = v91;
      *(_OWORD *)(a1 + 1336) = v36;
      long long v37 = v94;
      *(_OWORD *)(a1 + 1352) = v93;
      *(_OWORD *)(a1 + 1368) = v37;
      long long v38 = v88;
      *(_OWORD *)(a1 + 1256) = v87;
      *(_OWORD *)(a1 + 1272) = v38;
      long long v39 = v90;
      *(_OWORD *)(a1 + 1288) = v89;
      *(_OWORD *)(a1 + 1304) = v39;
      long long v40 = v86;
      *(_OWORD *)(a1 + 1224) = *(_OWORD *)buf;
      *(_OWORD *)(a1 + 1240) = v40;
      *(void *)(a1 + 1216) = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
      sub_1003278C0(a1, (_WORD *)a2);
      uint64_t v41 = sub_1004AF8EC();
      v71[0] = _NSConcreteStackBlock;
      v71[1] = 3221225472;
      long long v82 = v94;
      long long v83 = v95;
      v84[0] = v96[0];
      *(_OWORD *)((char *)v84 + 14) = *(_OWORD *)((char *)v96 + 14);
      long long v78 = v90;
      long long v79 = v91;
      long long v80 = v92;
      long long v81 = v93;
      long long v74 = v86;
      long long v75 = v87;
      long long v76 = v88;
      long long v77 = v89;
      v71[2] = sub_100328138;
      v71[3] = &unk_1009A6A58;
      long long v73 = *(_OWORD *)buf;
      int v72 = v55;
      sub_100013018(v41, v71);
      return 0;
    }
    uint64_t v42 = sub_100035F54();
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v42 + 336))(v42) || !*(_WORD *)(a2 + 204))
    {
LABEL_28:
      __int16 v53 = 0;
      int v52 = 0;
      if (*(_WORD *)(a2 + 202))
      {
        int v47 = sub_100197864(*(unsigned __int16 *)(a2 + 202));
        if (sub_100197698((uint64_t)v47))
        {
          uint64_t v48 = sub_100197CD8((uint64_t)v47);
          int v52 = *(_DWORD *)v48;
          __int16 v53 = *(_WORD *)(v48 + 4);
        }
      }
      uint64_t v49 = sub_1004AF8EC();
      v56[0] = _NSConcreteStackBlock;
      v56[1] = 3321888768;
      long long v66 = v94;
      long long v67 = v95;
      *(_OWORD *)__int16 v68 = v96[0];
      *(_OWORD *)&v68[14] = *(_OWORD *)((char *)v96 + 14);
      long long v62 = v90;
      long long v63 = v91;
      long long v64 = v92;
      long long v65 = v93;
      long long v58 = v86;
      long long v59 = v87;
      long long v60 = v88;
      long long v61 = v89;
      v56[2] = sub_1003281A8;
      v56[3] = &unk_1009A6A78;
      v56[4] = a1;
      long long v57 = *(_OWORD *)buf;
      int v69 = v52;
      __int16 v70 = v53;
      sub_100013018(v49, v56);
      if (sub_100050530())
      {
        uint64_t v50 = sub_100050530();
        (*(void (**)(uint64_t, uint64_t))(*(void *)v50 + 568))(v50, a2);
      }
      return 0;
    }
    int v43 = sub_100197864(*(unsigned __int16 *)(a2 + 204));
    if (sub_100197770((uint64_t)v43))
    {
      int v44 = (unsigned __int8 *)sub_100197C84((uint64_t)v43);
      if (v44)
      {
        unint64_t v45 = ((unint64_t)v44[1] << 40) | ((unint64_t)v44[2] << 32) | ((unint64_t)v44[3] << 24) | ((unint64_t)v44[4] << 16) | ((unint64_t)v44[5] << 8) | v44[6] | ((unint64_t)*v44 << 48);
        if (v45)
        {
          uint64_t v46 = sub_1004AF8EC();
          v54[0] = _NSConcreteStackBlock;
          v54[1] = 3221225472;
          v54[2] = sub_1003281A0;
          v54[3] = &unk_1009A12D0;
          v54[4] = a1;
          v54[5] = a2;
          v54[6] = v45;
          sub_100013018(v46, v54);
          goto LABEL_28;
        }
      }
    }
    int v51 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v52) = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "No BT address to update PhyStats", (uint8_t *)&v52, 2u);
    }
    return 1;
  }
  return result;
}

uint64_t sub_100328138()
{
  if (qword_1009FB190 != -1) {
    dispatch_once(&qword_1009FB190, &stru_1009A6F58);
  }

  return sub_10072B6D8();
}

void sub_1003281A0(uint64_t a1)
{
}

void sub_1003281A8(uint64_t a1)
{
}

uint64_t sub_1003281B4(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 246);
  *(_WORD *)(result + 250) = *(_WORD *)(a2 + 250);
  *(_DWORD *)(result + 246) = v2;
  return result;
}

uint64_t sub_1003281CC(uint64_t a1, uint64_t a2, int a3)
{
  if (!a2) {
    return 3;
  }
  if (sub_100050530())
  {
    uint64_t v5 = sub_100050530();
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 528))(v5, a2);
  }
  if (a3) {
    sub_1004B8B04("HIDLatencyStats", "parseWakeupCause", 60.0);
  }
  return 0;
}

uint64_t sub_100328260(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  long long v3 = a3[3];
  _DWORD v6[2] = a3[2];
  v6[3] = v3;
  void v6[4] = a3[4];
  long long v4 = a3[1];
  v6[0] = *a3;
  v6[1] = v4;
  sub_10021C63C(a2, v6);
  return 0;
}

uint64_t sub_1003282D0(uint64_t a1, unsigned __int8 *a2)
{
  long long v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *a2;
    int v5 = *((_DWORD *)a2 + 1);
    int v6 = a2[8];
    int v7 = *((_DWORD *)a2 + 3);
    int v8 = *((_DWORD *)a2 + 4);
    int v9 = *((_DWORD *)a2 + 5);
    int v10 = *((_DWORD *)a2 + 6);
    int v11 = *((_DWORD *)a2 + 7);
    int v12 = *((_DWORD *)a2 + 8);
    int v14 = *((_DWORD *)a2 + 9);
    int v13 = *((_DWORD *)a2 + 10);
    int v15 = *((_DWORD *)a2 + 11);
    int v16 = *((_DWORD *)a2 + 12);
    int v17 = (char)a2[52];
    int v18 = (char)a2[53];
    int v19 = (char)a2[54];
    v21[0] = 67112960;
    v21[1] = v4;
    __int16 v22 = 1024;
    int v23 = v5;
    __int16 v24 = 1024;
    int v25 = v6;
    __int16 v26 = 1024;
    int v27 = v7;
    __int16 v28 = 1024;
    int v29 = v8;
    __int16 v30 = 1024;
    int v31 = v9;
    __int16 v32 = 1024;
    int v33 = v10;
    __int16 v34 = 1024;
    int v35 = v11;
    __int16 v36 = 1024;
    int v37 = v12;
    __int16 v38 = 1024;
    int v39 = v14;
    __int16 v40 = 1024;
    int v41 = v13;
    __int16 v42 = 1024;
    int v43 = v15;
    __int16 v44 = 1024;
    int v45 = v16;
    __int16 v46 = 1024;
    int v47 = v17;
    __int16 v48 = 1024;
    int v49 = v18;
    __int16 v50 = 1024;
    int v51 = v19;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "vseAdvStatsEvent - ver %u duration %u (secs) instance %u num ADVs [total %u NonExtended %u Extended %u] Ch [37 %u 38 %u 39 %u] FailedOnAllCh %u Denied by [Coex %u BT %u Others %u] txPower [min %d max %d mode %d]", (uint8_t *)v21, 0x62u);
  }
  return 0;
}

uint64_t sub_100328420(uint64_t a1)
{
  return 0;
}

uint64_t sub_100328464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return 0;
}

uint64_t sub_100328494(uint64_t a1, unsigned __int8 *a2)
{
  if (!a2) {
    return 3;
  }
  long long v3 = qword_100A19E50;
  BOOL v4 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v4)
  {
    int v6 = *a2;
    sub_1003285A8(a2[1], __p);
    if (v10 >= 0) {
      int v7 = __p;
    }
    else {
      int v7 = (void **)__p[0];
    }
    int v8 = a2[2];
    *(_DWORD *)std::string buf = 67109634;
    int v12 = v6;
    __int16 v13 = 2080;
    int v14 = v7;
    __int16 v15 = 1024;
    int v16 = v8;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "vseAntennaRestrictEvent - version %u status %s AntennaBlockingBitMask 0x%02x", buf, 0x18u);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  return result;
}

void *sub_1003285A8@<X0>(unsigned int a1@<W1>, void *a2@<X8>)
{
  if (a1 > 0xB) {
    int v2 = "Unknown";
  }
  else {
    int v2 = off_1009A6FD8[(char)a1];
  }
  return sub_10004191C(a2, v2);
}

uint64_t sub_1003285D4(uint64_t a1, unsigned __int8 *a2)
{
  if (!a2) {
    return 3;
  }
  long long v3 = qword_100A19E50;
  BOOL v4 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v4)
  {
    int v6 = *a2;
    int v7 = a2[7];
    int v8 = a2[4];
    int v9 = "Switched";
    if (!a2[8]) {
      int v9 = "Not Switched";
    }
    if (a2[9]) {
      char v10 = "Gated By Hybrid Coex";
    }
    else {
      char v10 = "None";
    }
    v11[0] = 67110146;
    v11[1] = v6;
    __int16 v12 = 1024;
    int v13 = v7;
    __int16 v14 = 1024;
    int v15 = v8;
    __int16 v16 = 2080;
    int v17 = v9;
    __int16 v18 = 2080;
    int v19 = v10;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "vseAntennaDiversityEvent - version %u ThresholdTriggered %u DiversityRSSIThreshold %u DiversityAntennaSwitched %s ReasonForGating %s", (uint8_t *)v11, 0x28u);
    return 0;
  }
  return result;
}

void *sub_1003286FC@<X0>(unsigned int a1@<W1>, void *a2@<X8>)
{
  if (a1 > 0x12) {
    int v2 = "NA";
  }
  else {
    int v2 = off_1009A7038[(char)a1];
  }
  return sub_10004191C(a2, v2);
}

uint64_t sub_100328728(uint64_t a1, long long *a2, char a3)
{
  uint64_t v6 = sub_10003FB34();
  if (sub_1003542CC(v6))
  {
    long long v7 = a2[9];
    long long v23 = a2[8];
    long long v24 = v7;
    *(_OWORD *)int v25 = a2[10];
    long long v8 = a2[5];
    long long v19 = a2[4];
    long long v20 = v8;
    long long v9 = a2[7];
    long long v21 = a2[6];
    long long v22 = v9;
    long long v10 = a2[1];
    long long v15 = *a2;
    long long v16 = v10;
    long long v11 = a2[3];
    long long v17 = a2[2];
    long long v18 = v11;
    *(void *)&unsigned char v25[14] = *(void *)((char *)a2 + 174);
    global_queue = dispatch_get_global_queue(0, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100328844;
    block[3] = &unk_1009A6AA8;
    void block[4] = a1;
    char v26 = a3;
    dispatch_async(global_queue, block);
  }
  return 0;
}

unsigned char *sub_100328844(uint64_t a1)
{
  __int16 v60 = 0;
  int v59 = 0;
  char v58 = 0;
  sub_10001B8E0(&v58);
  int v2 = sub_100197864(*(unsigned __int16 *)(a1 + 40));
  BOOL v3 = sub_100197770((uint64_t)v2);
  if (v3)
  {
    *((unsigned char *)v2 + 280) = *(unsigned char *)(a1 + 222);
LABEL_4:
    sub_10001B910(&v58);
    uint64_t v47 = 0;
    goto LABEL_5;
  }
  if (sub_10017E37C((uint64_t)v2, (uint64_t)&v59)) {
    goto LABEL_4;
  }
  sub_10001B910(&v58);
  *(_DWORD *)long long v61 = v59;
  *(_WORD *)&v61[4] = v60;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009A6EF8);
  }
  uint64_t v47 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)v61, 1);
LABEL_5:
  uint64_t v4 = 0;
  LOWORD(v5) = 0;
  int v6 = 0;
  memset(&v57, 0, sizeof(v57));
  memset(&v56, 0, sizeof(v56));
  memset(&v55, 0, sizeof(v55));
  memset(&v54, 0, sizeof(v54));
  memset(&v53, 0, sizeof(v53));
  memset(&v52, 0, sizeof(v52));
  do
  {
    std::to_string((std::string *)v61, *(char *)(a1 + v4 + 42));
    if (v61[23] >= 0) {
      long long v7 = v61;
    }
    else {
      long long v7 = *(const std::string::value_type **)v61;
    }
    if (v61[23] >= 0) {
      std::string::size_type v8 = v61[23];
    }
    else {
      std::string::size_type v8 = *(void *)&v61[8];
    }
    std::string::append(&v57, v7, v8);
    if ((v61[23] & 0x80000000) != 0) {
      operator delete(*(void **)v61);
    }
    std::to_string((std::string *)v61, *(char *)(a1 + v4 + 72));
    if (v61[23] >= 0) {
      long long v9 = v61;
    }
    else {
      long long v9 = *(const std::string::value_type **)v61;
    }
    if (v61[23] >= 0) {
      std::string::size_type v10 = v61[23];
    }
    else {
      std::string::size_type v10 = *(void *)&v61[8];
    }
    std::string::append(&v56, v9, v10);
    if ((v61[23] & 0x80000000) != 0) {
      operator delete(*(void **)v61);
    }
    std::string::append(&v57, " ");
    std::string::append(&v56, " ");
    v6 += *(char *)(a1 + v4 + 42);
    int v5 = (__int16)(v5 + *(char *)(a1 + v4++ + 72));
  }
  while (v4 != 30);
  BOOL v45 = v3;
  uint64_t v46 = (uint64_t)v2;
  uint64_t v11 = 0;
  int v12 = 0;
  int v13 = 0;
  do
  {
    uint64_t v14 = a1 + v11;
    if (v11)
    {
      unint64_t v22 = *(char *)(v14 + 102);
      long long v23 = "Unknown";
      if (v22 <= 3) {
        long long v23 = off_1009A70F0[v22];
      }
      sub_10004191C(v61, v23);
      if (v61[23] >= 0) {
        long long v24 = v61;
      }
      else {
        long long v24 = *(const std::string::value_type **)v61;
      }
      if (v61[23] >= 0) {
        std::string::size_type v25 = v61[23];
      }
      else {
        std::string::size_type v25 = *(void *)&v61[8];
      }
      std::string::append(&v54, v24, v25);
      if ((v61[23] & 0x80000000) != 0) {
        operator delete(*(void **)v61);
      }
      sub_1003286FC(*(unsigned __int8 *)(a1 + v11 + 162), v61);
      if (v61[23] >= 0) {
        char v26 = v61;
      }
      else {
        char v26 = *(const std::string::value_type **)v61;
      }
      if (v61[23] >= 0) {
        std::string::size_type v27 = v61[23];
      }
      else {
        std::string::size_type v27 = *(void *)&v61[8];
      }
      std::string::append(&v52, v26, v27);
      if ((v61[23] & 0x80000000) != 0) {
        operator delete(*(void **)v61);
      }
      std::string::append(&v54, " ");
      long long v21 = &v52;
    }
    else
    {
      unint64_t v15 = *(char *)(v14 + 102);
      long long v16 = "Unknown";
      if (v15 <= 3) {
        long long v16 = off_1009A70D0[v15];
      }
      sub_10004191C(v61, v16);
      if (v61[23] >= 0) {
        long long v17 = v61;
      }
      else {
        long long v17 = *(const std::string::value_type **)v61;
      }
      if (v61[23] >= 0) {
        std::string::size_type v18 = v61[23];
      }
      else {
        std::string::size_type v18 = *(void *)&v61[8];
      }
      std::string::append(&v55, v17, v18);
      if ((v61[23] & 0x80000000) != 0) {
        operator delete(*(void **)v61);
      }
      sub_1003286FC(*(unsigned __int8 *)(a1 + v11 + 162), v61);
      if (v61[23] >= 0) {
        long long v19 = v61;
      }
      else {
        long long v19 = *(const std::string::value_type **)v61;
      }
      if (v61[23] >= 0) {
        std::string::size_type v20 = v61[23];
      }
      else {
        std::string::size_type v20 = *(void *)&v61[8];
      }
      std::string::append(&v53, v19, v20);
      if ((v61[23] & 0x80000000) != 0) {
        operator delete(*(void **)v61);
      }
      std::string::append(&v55, " ");
      long long v21 = &v53;
    }
    std::string::append(v21, " ");
    v12 += *(unsigned __int8 *)(v14 + 102);
    v13 += *(unsigned __int8 *)(a1 + v11++ + 162);
  }
  while (v11 != 60);
  __int16 v28 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v29 = *(unsigned __int16 *)(a1 + 40);
    __int16 v30 = "Yes";
    if (!*(unsigned char *)(a1 + 222)) {
      __int16 v30 = "No";
    }
    int v31 = &v57;
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v31 = (std::string *)v57.__r_.__value_.__r.__words[0];
    }
    __int16 v32 = &v56;
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      __int16 v32 = (std::string *)v56.__r_.__value_.__r.__words[0];
    }
    int v33 = &v55;
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v33 = (std::string *)v55.__r_.__value_.__r.__words[0];
    }
    __int16 v34 = &v54;
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      __int16 v34 = (std::string *)v54.__r_.__value_.__r.__words[0];
    }
    int v35 = &v53;
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v35 = (std::string *)v53.__r_.__value_.__r.__words[0];
    }
    __int16 v36 = &v52;
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      __int16 v36 = (std::string *)v52.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)long long v61 = 67111170;
    *(_DWORD *)&v61[4] = v29;
    *(_WORD *)&v61[8] = 1024;
    *(_DWORD *)&v61[10] = v29;
    *(_WORD *)&v61[14] = 2080;
    *(void *)&v61[16] = v30;
    *(_WORD *)&v61[24] = 2082;
    *(void *)&v61[26] = v31;
    *(_WORD *)&v61[34] = 2082;
    *(void *)&v61[36] = v32;
    *(_WORD *)&v61[44] = 2082;
    *(void *)&v61[46] = v33;
    *(_WORD *)&v61[54] = 2082;
    long long v62 = v34;
    __int16 v63 = 2082;
    long long v64 = v35;
    __int16 v65 = 2082;
    long long v66 = v36;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Disconnect connection handle: 0x%x (%d) wakeUp: %s SNR: %{public}s RSSI: %{public}s\nRetransmission Rx: %{public}s Retransmission Tx: %{public}s Packet Type Rx: %{public}s Packet Type Tx: %{public}s", v61, 0x54u);
  }
  memset(v61, 0, sizeof(v61));
  *(_WORD *)long long v61 = *(_WORD *)(a1 + 40);
  sub_1003286FC((((v13 + ((-30583 * (__int16)v13) >> 16)) >> 5)+ (((v13 + ((-30583 * (__int16)v13) >> 16)) & 0x8000) >> 15)), &v50);
  if ((v61[39] & 0x80000000) != 0) {
    operator delete(*(void **)&v61[16]);
  }
  *(_OWORD *)&v61[16] = v50;
  *(void *)&v61[32] = v51;
  *(_WORD *)&v61[6] = ((__int16)((34953 * (__int16)v6) >> 16) >> 4)
                    + (((v6 + ((-30583 * (__int16)v6) >> 16)) & 0x8000) >> 15);
  *(_WORD *)&v61[4] = ((__int16)((34953 * v5) >> 16) >> 4)
                    + (((v5 + ((-30583 * v5) >> 16)) & 0x8000) >> 15);
  *(_WORD *)&v61[8] = ((__int16)((34953 * (__int16)v12) >> 16) >> 5)
                    + (((v12 + ((-30583 * (__int16)v12) >> 16)) & 0x8000) >> 15);
  *(void *)&v61[48] = v47;
  sub_100225DB8(v46, &v61[2]);
  v61[44] = v45;
  uint64_t v37 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v37 + 8))(v37))
  {
    uint64_t v38 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v38 + 408))(v38))
    {
      if (v5 >= 30 && v45)
      {
        if (qword_1009F7EC0 != -1) {
          dispatch_once(&qword_1009F7EC0, &stru_1009A6EB8);
        }
        int v39 = sub_100686130((uint64_t)off_1009F7EB8, v46);
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009A6F38);
        }
        __int16 v40 = off_1009F7ED8;
        sub_10004191C(__p, "BluetoothTVRemote");
        int v41 = sub_100030A04((uint64_t)v40, v39, (uint64_t)__p);
        int v42 = v41;
        if (v49 < 0)
        {
          operator delete(__p[0]);
          if (!v42)
          {
LABEL_98:

            goto LABEL_99;
          }
        }
        else if (!v41)
        {
          goto LABEL_98;
        }
        sub_1004B8B04("AppleTVInternal", "AppleTVRemoteDisconnectionInvalidRSSI", 60.0);
        goto LABEL_98;
      }
    }
  }
LABEL_99:
  if (sub_100050530())
  {
    uint64_t v43 = sub_100050530();
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v43 + 256))(v43, v61);
  }
  if ((v61[39] & 0x80000000) != 0) {
    operator delete(*(void **)&v61[16]);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  return sub_10001B8AC(&v58);
}

void sub_100329010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  sub_10001B8AC((unsigned char *)(v57 - 201));
  _Unwind_Resume(a1);
}

uint64_t sub_100329124(uint64_t a1, int a2, int a3)
{
  uint64_t v4 = sub_100197864(a2);
  int v5 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v7[0] = 67109120;
    v7[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "HDR PPT = %d", (uint8_t *)v7, 8u);
  }
  if (sub_100197698((uint64_t)v4)) {
    *((unsigned char *)v4 + 288) = a3;
  }
  return 0;
}

uint64_t sub_1003291F0(uint64_t a1, int a2, int a3)
{
  uint64_t v4 = sub_100197864(a2);
  int v5 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v7[0] = 67109120;
    v7[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "HDR Change connection Packet Type = %d", (uint8_t *)v7, 8u);
  }
  if (sub_100197698((uint64_t)v4)) {
    *((_DWORD *)v4 + 71) = a3;
  }
  return 0;
}

uint64_t sub_1003292BC(uint64_t a1, int a2, int a3)
{
  uint64_t v4 = sub_100197864(a2);
  uint64_t v5 = sub_100197CD8((uint64_t)v4);
  int v6 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    int v10 = 67109120;
    int v11 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "HRB Band changed band = %02X", (uint8_t *)&v10, 8u);
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009A6EF8);
  }
  int v7 = *(_DWORD *)v5;
  LOWORD(v11) = *(_WORD *)(v5 + 4);
  int v10 = v7;
  uint64_t v8 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v10, 0);
  if (qword_1009F8738 != -1) {
    dispatch_once(&qword_1009F8738, &stru_1009A6F78);
  }
  sub_1002701F4(qword_1009F8730, v8, a3);
  if (sub_100197698((uint64_t)v4)) {
    *((unsigned char *)v4 + 289) = a3;
  }
  if (_os_feature_enabled_impl())
  {
    if (qword_1009F8130 != -1) {
      dispatch_once(&qword_1009F8130, &stru_1009A6F98);
    }
    sub_1002D19B0(qword_1009F8128, v5, a3);
  }
  return 0;
}

uint64_t sub_100329470(uint64_t a1, int a2, int a3, int a4)
{
  int v6 = sub_100197864(a2);
  uint64_t v7 = sub_100197CD8((uint64_t)v6);
  uint64_t v8 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v10[0] = 67109376;
    v10[1] = a3;
    __int16 v11 = 1024;
    int v12 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "HRB Band changed Failed, band = %02X, status = %d", (uint8_t *)v10, 0xEu);
  }
  if (sub_100197698((uint64_t)v6)) {
    *((unsigned char *)v6 + 289) = a3;
  }
  if (_os_feature_enabled_impl())
  {
    if (qword_1009F8130 != -1) {
      dispatch_once(&qword_1009F8130, &stru_1009A6F98);
    }
    sub_1002D2078(qword_1009F8128, v7, a3, a4);
  }
  return 0;
}

uint64_t sub_1003295B4(uint64_t a1, int a2, int a3)
{
  uint64_t v5 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v9[0] = 67109120;
    v9[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "HRB Peripheral Allowed Bands Received, bands = %02X", (uint8_t *)v9, 8u);
  }
  int v6 = sub_100197864(a2);
  uint64_t v7 = sub_100197CD8((uint64_t)v6);
  if (_os_feature_enabled_impl())
  {
    if (qword_1009F8130 != -1) {
      dispatch_once(&qword_1009F8130, &stru_1009A6F98);
    }
    sub_1002D24D0(qword_1009F8128, v7);
  }
  return 0;
}

uint64_t sub_1003296CC(uint64_t a1, int a2)
{
  BOOL v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "HRB Band Classification Request band = %d", (uint8_t *)v5, 8u);
  }
  if (_os_feature_enabled_impl())
  {
    if (qword_1009F8130 != -1) {
      dispatch_once(&qword_1009F8130, &stru_1009A6F98);
    }
    nullsub_95(qword_1009F8128);
  }
  return 0;
}

uint64_t sub_1003297C4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int16 a9)
{
  long long v17 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67110912;
    *(_DWORD *)&uint8_t buf[4] = a2;
    LOWORD(v32) = 1024;
    *(_DWORD *)((char *)&v32 + 2) = a3;
    HIWORD(v32) = 1024;
    *(_DWORD *)int v33 = a4;
    *(_WORD *)&v33[4] = 1024;
    *(_DWORD *)&v33[6] = a5;
    __int16 v34 = 1024;
    int v35 = a6;
    __int16 v36 = 1024;
    int v37 = a7;
    __int16 v38 = 1024;
    int v39 = a8;
    __int16 v40 = 1024;
    int v41 = a9;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Advanced Sniff Mode Change status = %d lmHandle=%x, mode=%d anchorPointHost=%d anchorPointController=%d maxAge=%d(ms), maxRetry=%d(frames), sniffInterval=%d(slots)", buf, 0x32u);
  }
  v28[0] = 0;
  v28[1] = 0;
  sub_10003AED0((uint64_t)v28, a1 + 8);
  *(void *)std::string buf = 0;
  __int16 v32 = 0;
  *(void *)int v33 = 0;
  sub_10033CE04((uint64_t *)buf, a1 + 136);
  sub_10003AFE8((uint64_t)v28);
  std::string::size_type v18 = sub_100197864(a3);
  if (sub_100197698((uint64_t)v18))
  {
    uint64_t v19 = sub_100197CD8((uint64_t)v18);
    std::string::size_type v20 = *(void ***)buf;
    if (*(void ***)buf != &v32)
    {
      uint64_t v21 = v19;
      do
      {
        LOWORD(v27) = a9;
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))(*v20[4] + 80))(v20[4], a2, v21, a4, a5, a6, a7, a8, v27);
        unint64_t v22 = v20[1];
        if (v22)
        {
          do
          {
            long long v23 = (void **)v22;
            unint64_t v22 = (void *)*v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            long long v23 = (void **)v20[2];
            BOOL v24 = *v23 == v20;
            std::string::size_type v20 = v23;
          }
          while (!v24);
        }
        std::string::size_type v20 = v23;
      }
      while (v23 != &v32);
    }
  }
  else
  {
    std::string::size_type v25 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int v29 = 67109120;
      int v30 = a3;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "vseAdvancedSniffModeChange Bad lmHandle: %x", v29, 8u);
    }
  }
  sub_1000486F0((uint64_t)buf, v32);
  sub_10003AFB4((uint64_t)v28);
  return 0;
}

void sub_100329A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *a16)
{
}

uint64_t sub_100329A6C(uint64_t a1, int a2, int a3, int a4, int a5)
{
  long long v9 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v11[0] = 67109888;
    v11[1] = a2;
    __int16 v12 = 1024;
    int v13 = a3;
    __int16 v14 = 1024;
    int v15 = a4;
    __int16 v16 = 1024;
    int v17 = a5;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Advanced Sniff Anchor Point Timestamp Report lmHandle=%x sniffInterval=%x anchorPointHost=%d anchorPointController=%d", (uint8_t *)v11, 0x1Au);
  }
  return 0;
}

uint64_t sub_100329B48(uint64_t a1, int a2, int a3)
{
  uint64_t v5 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v7[0] = 67109376;
    v7[1] = a2;
    __int16 v8 = 1024;
    int v9 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Flow Status lmHandle=%x flow=%d", (uint8_t *)v7, 0xEu);
  }
  return 0;
}

uint64_t sub_100329C08(uint64_t a1, const void *a2, unsigned int a3)
{
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009A6E98);
  }
  sub_1006D74D8((uint64_t)off_1009F85C0, a2, a3);
  return 0;
}

uint64_t sub_100329C6C()
{
  uint64_t v0 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "AdvRead Buffer Full VSE", v2, 2u);
  }
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009A6E98);
  }
  nullsub_95(off_1009F85C0);
  return 0;
}

uint64_t sub_100329D14(uint64_t a1, uint64_t a2)
{
  BOOL v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    int v4 = *(unsigned __int8 *)(a2 + 6);
    v6[0] = 67109120;
    v6[1] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Match Buffer Data Match Event VSE - payload = %d", (uint8_t *)v6, 8u);
  }
  return 0;
}

uint64_t sub_100329DC0(uint64_t a1, _OWORD *a2)
{
  BOOL v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    int v4 = *(_DWORD *)a2;
    v6[0] = 67109120;
    v6[1] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Match Buffer Read VSE - native clock = %d", (uint8_t *)v6, 8u);
  }
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009A6E98);
  }
  sub_1006D9C0C((uint64_t)off_1009F85C0, a2);
  return 0;
}

uint64_t sub_100329EA4(uint64_t a1, uint64_t a2)
{
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009A6E98);
  }
  sub_1006DAB84((uint64_t)off_1009F85C0, a2);
  return 0;
}

uint64_t sub_100329F00(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x98u);
}

uint64_t sub_100329F60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v15[0] = 0;
  v15[1] = 0;
  sub_10003AED0((uint64_t)v15, a1 + 8);
  int v13 = 0;
  v14[0] = 0;
  v14[1] = 0;
  sub_10033CE04((uint64_t *)&v13, a1 + 136);
  __int16 v8 = v13;
  if (v13 != v14)
  {
    do
    {
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*v8[4] + 48))(v8[4], a2, a3, a4);
      int v9 = v8[1];
      if (v9)
      {
        do
        {
          int v10 = (void **)v9;
          int v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          int v10 = (void **)v8[2];
          BOOL v11 = *v10 == v8;
          __int16 v8 = v10;
        }
        while (!v11);
      }
      __int16 v8 = v10;
    }
    while (v10 != v14);
  }
  sub_1000486F0((uint64_t)&v13, v14[0]);
  sub_10003AFB4((uint64_t)v15);
  return 0;
}

void sub_10032A060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10032A088(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x93u);
}

uint64_t sub_10032A0E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v19[0] = 0;
  v19[1] = 0;
  sub_10003AED0((uint64_t)v19, a1 + 8);
  int v17 = 0;
  v18[0] = 0;
  v18[1] = 0;
  sub_10033CE04((uint64_t *)&v17, a1 + 136);
  __int16 v12 = v17;
  if (v17 != v18)
  {
    do
    {
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v12[4] + 56))(v12[4], a2, a3, a4, a5, a6);
      int v13 = v12[1];
      if (v13)
      {
        do
        {
          __int16 v14 = (void **)v13;
          int v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          __int16 v14 = (void **)v12[2];
          BOOL v15 = *v14 == v12;
          __int16 v12 = v14;
        }
        while (!v15);
      }
      __int16 v12 = v14;
    }
    while (v14 != v18);
  }
  sub_1000486F0((uint64_t)&v17, v18[0]);
  sub_10003AFB4((uint64_t)v19);
  return 0;
}

void sub_10032A200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10032A228(uint64_t a1, char a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  long long v4[2] = sub_10032A2A0;
  void v4[3] = &unk_1009A66D8;
  char v5 = a2;
  char v6 = a3;
  return sub_10001A7D4(a1, 147, a3, v4, 0);
}

uint64_t sub_10032A2A0()
{
  return sub_1001F8D0C();
}

uint64_t sub_10032A2C4(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x94u);
}

uint64_t sub_10032A324(uint64_t a1, char a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  long long v4[2] = sub_10032A39C;
  void v4[3] = &unk_1009A66D8;
  char v5 = a2;
  char v6 = a3;
  return sub_10001A7D4(a1, 148, a3, v4, 0);
}

uint64_t sub_10032A39C()
{
  return sub_1001F8D98();
}

uint64_t sub_10032A3D8(int a1, int a2)
{
  int v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "power %d", (uint8_t *)v6, 8u);
  }
  LODWORD(xmmword_100A121A0) = a2;
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0);
}

uint64_t sub_10032A4C4(uint64_t a1, uint64_t a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10032A554;
  v3[3] = &unk_100997528;
  void v3[4] = a2;
  return sub_10001A7D4(a1, 0, 1, &stru_1009A6AC8, v3);
}

int sub_10032A540(id a1)
{
  return sub_1001FBFB8();
}

uint64_t sub_10032A554(uint64_t result)
{
  **(_DWORD **)(result + 32) = xmmword_100A121A0;
  return result;
}

uint64_t sub_10032A568(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x17u);
}

uint64_t sub_10032A5C8(uint64_t a1, char a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  long long v4[2] = sub_10032A640;
  void v4[3] = &unk_1009A66D8;
  char v5 = a2;
  char v6 = a3;
  return sub_10001A7D4(a1, 23, a3, v4, 0);
}

uint64_t sub_10032A640()
{
  return sub_1001FC044();
}

uint64_t sub_10032A664(int a1, int a2)
{
  int v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "isWbsSupported %d", (uint8_t *)v6, 8u);
  }
  LOBYTE(xmmword_100A121A0) = a2;
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0x95u);
}

uint64_t sub_10032A750(uint64_t a1, uint64_t a2, int a3)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_10032A804;
  v5[3] = &unk_1009A6618;
  char v6 = a3;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  long long v4[2] = sub_10032A820;
  void v4[3] = &unk_100997528;
  void v4[4] = a2;
  return sub_10001A7D4(a1, 149, a3, v5, v4);
}

uint64_t sub_10032A804()
{
  return sub_1001F8204();
}

uint64_t sub_10032A820(uint64_t result)
{
  **(unsigned char **)(result + 32) = (_BYTE)xmmword_100A121A0 != 0;
  return result;
}

uint64_t sub_10032A83C(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 8u);
}

uint64_t sub_10032A89C(uint64_t a1, uint64_t a2, char a3, int a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_10032A920;
  v5[3] = &unk_1009A67D8;
  void v5[4] = a2;
  char v6 = a3;
  char v7 = a4;
  return sub_10001A7D4(a1, 8, a4, v5, 0);
}

uint64_t sub_10032A920(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 41)) {
    uint64_t v1 = sub_10032A83C;
  }
  else {
    uint64_t v1 = 0;
  }
  return sub_1001FC15C(*(unsigned __int8 *)(a1 + 40), *(void *)(a1 + 32) + 128, (uint64_t)v1);
}

uint64_t sub_10032A94C(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x96u);
}

uint64_t sub_10032A9AC(uint64_t a1, uint64_t a2, char a3, int a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_10032AA30;
  v5[3] = &unk_1009A67D8;
  void v5[4] = a2;
  char v6 = a3;
  char v7 = a4;
  return sub_10001A7D4(a1, 150, a4, v5, 0);
}

uint64_t sub_10032AA30(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 41)) {
    uint64_t v1 = sub_10032A94C;
  }
  else {
    uint64_t v1 = 0;
  }
  return sub_1001F8E24(*(unsigned __int8 *)(a1 + 40), *(void *)(a1 + 32) + 128, (uint64_t)v1);
}

uint64_t sub_10032AA5C(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xAFu);
}

uint64_t sub_10032AABC(uint64_t a1, int a2, int a3, int a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_10032AB3C;
  v5[3] = &unk_1009A65D8;
  int v6 = a2;
  int v7 = a3;
  char v8 = a4;
  return sub_10001A7D4(a1, 175, a4, v5, 0);
}

uint64_t sub_10032AB3C()
{
  return sub_1001F8F7C();
}

uint64_t sub_10032AB60(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 1u);
}

uint64_t sub_10032ABC0(uint64_t a1)
{
  return sub_10001A7D4(a1, 1, 1, &stru_1009A6AE8, 0);
}

int sub_10032ABD8(id a1)
{
  return sub_1001FC228();
}

uint64_t sub_10032ABF0(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 6u);
}

uint64_t sub_10032AC50(uint64_t a1)
{
  char v10 = 9;
  int v9 = 134809857;
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 72);
  int v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    BOOL v3 = sub_10001AA04(a1, 1);
    int v4 = sub_10001AA04(a1, 6);
    *(_DWORD *)std::string buf = 136446466;
    __int16 v12 = v3;
    __int16 v13 = 2082;
    __int16 v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Sending: %{public}s and %{public}s", buf, 0x16u);
  }
  if (sub_10001B700(a1, 1) && sub_10001B700(a1, 6))
  {
    buf[0] = 0;
    sub_10001B8E0(buf);
    int v5 = sub_1001FC2B4((uint64_t)&v9);
    sub_10001B910(buf);
    if (!v5)
    {
      if (qword_1009F8070 != -1) {
        dispatch_once(&qword_1009F8070, &stru_1009A6E78);
      }
      sub_10001B918((uint64_t)off_1009F8068, 6);
      sub_1002B804C(buf);
      int v5 = sub_1001FC228();
      sub_10001B910(buf);
      if (!v5)
      {
        if (qword_1009F8070 != -1) {
          dispatch_once(&qword_1009F8070, &stru_1009A6E78);
        }
        int v5 = sub_10001B918((uint64_t)off_1009F8068, 1);
      }
    }
    sub_1000262B8(a1, 1u);
    sub_1000262B8(a1, 6u);
    uint64_t v6 = v5 != 0;
    sub_10001B8AC(buf);
  }
  else
  {
    sub_1000262B8(a1, 1u);
    sub_1000262B8(a1, 6u);
    uint64_t v6 = 2;
  }
  sub_10003AFB4((uint64_t)v8);
  return v6;
}

void sub_10032AE90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10032AEC4(int a1, int a2, int a3)
{
  uint64_t v6 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v8[0] = 67109376;
    v8[1] = a2;
    __int16 v9 = 1024;
    int v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "connection handle %x rssi %d", (uint8_t *)v8, 0xEu);
  }
  LOBYTE(xmmword_100A121A0) = a3;
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 3u);
}

uint64_t sub_10032AFC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_10032B078;
  v5[3] = &unk_1009A6738;
  void v5[4] = a2;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  long long v4[2] = sub_10032B090;
  void v4[3] = &unk_100997528;
  void v4[4] = a3;
  return sub_10001A7D4(a1, 3, 1, v5, v4);
}

uint64_t sub_10032B078(uint64_t a1)
{
  return sub_1001FC34C(*(void *)(a1 + 32), (uint64_t)sub_10032AEC4);
}

uint64_t sub_10032B090(uint64_t result)
{
  **(unsigned char **)(result + 32) = xmmword_100A121A0;
  return result;
}

uint64_t sub_10032B0A4()
{
  return 0;
}

uint64_t sub_10032B0AC(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 1u);
}

uint64_t sub_10032B10C(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 7u);
}

uint64_t sub_10032B16C(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 9u);
}

uint64_t sub_10032B1CC(uint64_t a1, uint64_t a2)
{
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, a1 + 72);
  int v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    int v5 = sub_10001AA04(a1, 1);
    uint64_t v6 = sub_10001AA04(a1, 7);
    int v7 = sub_10001AA04(a1, 9);
    *(_DWORD *)std::string buf = 136446722;
    __int16 v12 = v5;
    __int16 v13 = 2082;
    __int16 v14 = v6;
    __int16 v15 = 2082;
    __int16 v16 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Sending: %{public}s, %{public}s, %{public}s", buf, 0x20u);
  }
  if (sub_10001B700(a1, 1) && sub_10001B700(a1, 7) && sub_10001B700(a1, 9))
  {
    buf[0] = 0;
    sub_10001B8E0(buf);
    uint64_t v8 = sub_1001FC228();
    sub_10001B910(buf);
    if (!v8)
    {
      if (qword_1009F8070 != -1) {
        dispatch_once(&qword_1009F8070, &stru_1009A6E78);
      }
      uint64_t v8 = sub_10001B918((uint64_t)off_1009F8068, 1);
      if (!v8)
      {
        sub_1002B804C(buf);
        uint64_t v8 = sub_1001FC400();
        sub_10001B910(buf);
        if (!v8)
        {
          if (qword_1009F8070 != -1) {
            dispatch_once(&qword_1009F8070, &stru_1009A6E78);
          }
          uint64_t v8 = sub_10001B918((uint64_t)off_1009F8068, 7);
          if (!v8)
          {
            sub_1002B804C(buf);
            uint64_t v8 = sub_1001FC48C(a2 + 128, (uint64_t)sub_10032B16C);
            sub_10001B910(buf);
            if (!v8)
            {
              if (qword_1009F8070 != -1) {
                dispatch_once(&qword_1009F8070, &stru_1009A6E78);
              }
              uint64_t v8 = sub_10001B918((uint64_t)off_1009F8068, 9);
            }
          }
        }
      }
    }
    sub_1000262B8(a1, 1u);
    sub_1000262B8(a1, 7u);
    sub_1000262B8(a1, 9u);
    sub_10001B8AC(buf);
  }
  else
  {
    sub_1000262B8(a1, 1u);
    sub_1000262B8(a1, 7u);
    sub_1000262B8(a1, 9u);
    uint64_t v8 = 3601;
  }
  sub_10003AFB4((uint64_t)v10);
  return v8;
}

void sub_10032B4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_10032B4E4(uint64_t a1, uint64_t a2)
{
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 72);
  int v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "setScoRouteI2S16K", v7, 2u);
  }
  BOOL v5 = sub_10032B1CC(a1, a2) != 0;
  sub_10003AFB4((uint64_t)v8);
  return v5;
}

void sub_10032B590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10032B5A4(uint64_t a1, uint64_t a2)
{
  int v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "setScoRouteI2S8K", v6, 2u);
  }
  return sub_10032B1CC(a1, a2) != 0;
}

uint64_t sub_10032B634(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xFu);
}

uint64_t sub_10032B694(uint64_t a1, __int16 a2, uint64_t a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  long long v4[2] = sub_10032B710;
  void v4[3] = &unk_1009A67D8;
  void v4[4] = a3;
  __int16 v5 = a2;
  return sub_10001A7D4(a1, 15, 1, v4, 0);
}

uint64_t sub_10032B710(uint64_t a1)
{
  return sub_1001FC540(*(void *)(a1 + 32));
}

uint64_t sub_10032B730(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x10u);
}

uint64_t sub_10032B790(uint64_t a1, __int16 a2, uint64_t a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  long long v4[2] = sub_10032B80C;
  void v4[3] = &unk_1009A67D8;
  void v4[4] = a3;
  __int16 v5 = a2;
  return sub_10001A7D4(a1, 16, 1, v4, 0);
}

uint64_t sub_10032B80C(uint64_t a1)
{
  return sub_1001FC5D8(*(void *)(a1 + 32));
}

uint64_t sub_10032B82C(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xEu);
}

uint64_t sub_10032B88C(uint64_t a1, __int16 a2, uint64_t a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  long long v4[2] = sub_10032B908;
  void v4[3] = &unk_1009A67D8;
  void v4[4] = a3;
  __int16 v5 = a2;
  return sub_10001A7D4(a1, 14, 1, v4, 0);
}

uint64_t sub_10032B908(uint64_t a1)
{
  return sub_1001FC670(*(void *)(a1 + 32));
}

uint64_t sub_10032B928(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xDu);
}

uint64_t sub_10032B988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_10032BA00;
  v5[3] = &unk_1009A6958;
  void v5[4] = a4;
  void v5[5] = a3;
  return sub_10001A7D4(a1, 13, 1, v5, 0);
}

uint64_t sub_10032BA00(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  *(_OWORD *)std::string __p = 0u;
  long long v12 = 0u;
  sub_100053710((uint64_t)__p, 0);
  sub_10001195C((uint64_t)__p, **(_WORD **)(a1 + 40));
  sub_10001195C((uint64_t)__p, 0);
  sub_100011B98((uint64_t)__p, *(unsigned char *)(*(void *)(a1 + 40) + 2));
  sub_10001195C((uint64_t)__p, *(_WORD *)(*(void *)(a1 + 40) + 4));
  sub_1000335D8(&v9, __p[1], v12 - (unint64_t)__p[1]);
  uint64_t v3 = sub_10004A6E4((uint64_t)&v9);
  sub_1000335D8(&v7, __p[1], v12 - (unint64_t)__p[1]);
  unsigned __int8 v4 = sub_100045F00((uint64_t)&v7);
  uint64_t v5 = sub_1001FC708(v2 + 128, v3, v4, (uint64_t)sub_10032B928);
  int v7 = &off_100998428;
  if (v8) {
    sub_1000368F4(v8);
  }
  __int16 v9 = &off_100998428;
  if (v10) {
    sub_1000368F4(v10);
  }
  if (__p[1])
  {
    *(void **)&long long v12 = __p[1];
    operator delete(__p[1]);
  }
  return v5;
}

void sub_10032BB50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, atomic_uint *a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (a12) {
    sub_1000368F4(a12);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10032BBD8(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x9Bu);
}

uint64_t sub_10032BC38(uint64_t a1, char a2, char a3, uint64_t a4)
{
  if (*(_DWORD *)(sub_10003FB34() + 712) < 0x7D0u || *(_DWORD *)(sub_10003FB34() + 712) > 0xF9Fu)
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    _DWORD v12[2] = sub_10032BDDC;
    _OWORD v12[3] = &unk_1009A65D8;
    void v12[4] = a4;
    char v13 = a2;
    uint64_t v8 = v12;
    uint64_t v9 = a1;
    uint64_t v10 = 155;
  }
  else
  {
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    void v14[2] = sub_10032BD58;
    v14[3] = &unk_1009A67D8;
    _OWORD v14[4] = a4;
    char v15 = a2;
    char v16 = a3;
    uint64_t v8 = v14;
    uint64_t v9 = a1;
    uint64_t v10 = 91;
  }
  return sub_10001A7D4(v9, v10, 1, v8, 0);
}

uint64_t sub_10032BD58()
{
  return sub_1001FDA54();
}

uint64_t sub_10032BD7C(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x5Bu);
}

uint64_t sub_10032BDDC(uint64_t a1)
{
  return sub_1001F846C(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), (uint64_t)sub_10032BBD8);
}

uint64_t sub_10032BDFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a4 + 128;
  if (sub_100350F3C())
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    _DWORD v13[2] = sub_10032BF6C;
    v13[3] = &unk_1009A6958;
    v13[4] = v6;
    _OWORD v13[5] = a3;
    int v7 = v13;
    uint64_t v8 = a1;
    uint64_t v9 = 152;
  }
  else if (*(_DWORD *)(sub_10003FB34() + 712) < 0x7D0u || *(_DWORD *)(sub_10003FB34() + 712) > 0xF9Fu)
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    _DWORD v11[2] = sub_10032C040;
    v11[3] = &unk_1009A6958;
    uint8_t v11[4] = v6;
    void v11[5] = a3;
    int v7 = v11;
    uint64_t v8 = a1;
    uint64_t v9 = 151;
  }
  else
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    _DWORD v12[2] = sub_10032BFC8;
    _OWORD v12[3] = &unk_1009A6958;
    void v12[4] = a3;
    void v12[5] = v6;
    int v7 = v12;
    uint64_t v8 = a1;
    uint64_t v9 = 91;
  }
  return sub_10001A7D4(v8, v9, 1, v7, 0);
}

uint64_t sub_10032BF6C(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 **)(a1 + 40);
  return sub_1001FC8C8(*(void *)(a1 + 32), *v1, v1[1], v1[2], v1[3], v1[4], v1[5], v1[6], v1[16], (uint64_t)sub_100329F00);
}

uint64_t sub_10032BFC8(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(void *)(a1 + 40);
  if (*(unsigned char *)(v2 + 17) == 1)
  {
    uint64_t result = sub_10017E2D4(v1, &v4);
    if (result) {
      return result;
    }
  }
  else
  {
    uint64_t result = sub_10017E328(v1, &v4);
    if (result) {
      return result;
    }
  }
  return sub_1001FDA54();
}

uint64_t sub_10032C040(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int16 **)(a1 + 40);
  return sub_1001FC7D4(*(void *)(a1 + 32), *(unsigned __int8 *)v1, v1[4], v1[5], v1[6], v1[7], (uint64_t)sub_10032C070);
}

uint64_t sub_10032C070(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x97u);
}

uint64_t sub_10032C0D0(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 2u);
}

uint64_t sub_10032C130(uint64_t a1, __int16 a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10032C1A8;
  v3[3] = &unk_1009A66D8;
  __int16 v4 = a2;
  return sub_10001A7D4(a1, 2, 1, v3, 0);
}

uint64_t sub_10032C1A8()
{
  return sub_1001FC9D4();
}

uint64_t sub_10032C1C0(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xA8u);
}

uint64_t sub_10032C220(uint64_t a1, __int16 a2, char a3, char a4, char a5, char a6)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_10032C2AC;
  v7[3] = &unk_1009A6B08;
  __int16 v8 = a2;
  char v9 = a3;
  char v10 = a4;
  char v11 = a5;
  char v12 = a6;
  return sub_10001A7D4(a1, 168, 1, v7, &stru_1009A6B28);
}

uint64_t sub_10032C2AC(uint64_t a1)
{
  __int16 v2 = *(_WORD *)(a1 + 32);
  int v3 = *(_DWORD *)(a1 + 34);
  return sub_1001F89B8((uint64_t)&v2);
}

uint64_t sub_10032C2F4(int a1, const void *a2, size_t __n)
{
  word_100A122A0 = __n;
  memcpy(&xmmword_100A121A0, a2, __n);
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x12u);
}

uint64_t sub_10032C368(uint64_t a1, char a2, __int16 a3, char a4, uint64_t a5, char a6, __int16 a7, __int16 a8, char a9, char a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15)
{
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  void v17[2] = sub_10032C460;
  v17[3] = &unk_1009A65B8;
  __int16 v18 = a3;
  char v21 = a2;
  char v22 = a4;
  char v23 = a6;
  __int16 v19 = a7;
  __int16 v20 = a8;
  char v24 = a9;
  char v25 = a10;
  char v26 = a11;
  char v27 = a12;
  char v28 = a13;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  _OWORD v16[2] = sub_10032C4D4;
  v16[3] = &unk_100998260;
  void v16[4] = a14;
  void v16[5] = a15;
  return sub_10001A7D4(a1, 18, 1, v17, v16);
}

uint64_t sub_10032C460(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  __int16 v4 = 0;
  LOBYTE(v2) = *(unsigned char *)(a1 + 32);
  WORD1(v2) = *(unsigned __int8 *)(a1 + 38);
  BYTE4(v2) = *(unsigned char *)(a1 + 39);
  BYTE6(v2) = *(unsigned char *)(a1 + 40);
  LODWORD(v3) = *(_DWORD *)(a1 + 34);
  HIDWORD(v3) = *(_DWORD *)(a1 + 41);
  LOBYTE(v4) = *(unsigned char *)(a1 + 45);
  return sub_1001FCAEC((uint64_t)&v2);
}

void *sub_10032C4D4(void *result)
{
  uint64_t v1 = (_WORD *)*((void *)result + 4);
  if ((unsigned __int16)word_100A122A0 <= (unsigned __int16)*v1)
  {
    _WORD *v1 = word_100A122A0;
    return memcpy(*((void **)result + 5), &xmmword_100A121A0, (unsigned __int16)word_100A122A0);
  }
  return result;
}

uint64_t sub_10032C508(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x13u);
}

uint64_t sub_10032C568(uint64_t a1, char a2, uint64_t a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  long long v4[2] = sub_10032C5E4;
  void v4[3] = &unk_1009A65D8;
  char v5 = a2;
  void v4[4] = a3;
  return sub_10001A7D4(a1, 19, 1, v4, 0);
}

uint64_t sub_10032C5E4(uint64_t a1)
{
  char v7 = *(unsigned char *)(a1 + 40);
  uint64_t v1 = *(__int16 **)(a1 + 32);
  __int16 v8 = *v1;
  uint64_t v2 = *(void *)(v1 + 1);
  __int16 v10 = v1[5];
  uint64_t v9 = v2;
  char v11 = *((unsigned char *)v1 + 12);
  char v12 = *((unsigned char *)v1 + 13);
  uint64_t v3 = *(void *)(v1 + 7);
  __int16 v14 = v1[11];
  uint64_t v13 = v3;
  char v15 = *((unsigned char *)v1 + 24);
  char v16 = *((unsigned char *)v1 + 25);
  uint64_t v4 = *(void *)(v1 + 13);
  __int16 v18 = v1[17];
  uint64_t v17 = v4;
  char v19 = *((unsigned char *)v1 + 36);
  char v20 = *((unsigned char *)v1 + 37);
  uint64_t v5 = *(void *)(v1 + 19);
  __int16 v22 = v1[23];
  uint64_t v21 = v5;
  return sub_1001FCB84((uint64_t)&v7);
}

uint64_t sub_10032C6C8(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x14u);
}

uint64_t sub_10032C728(uint64_t a1, char a2, int a3, char a4, uint64_t a5)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_10032C7AC;
  v6[3] = &unk_1009A65B8;
  char v8 = a2;
  int v7 = a3;
  char v9 = a4;
  void v6[4] = a5;
  return sub_10001A7D4(a1, 20, 1, v6, 0);
}

uint64_t sub_10032C7AC(uint64_t a1)
{
  v5[0] = 1;
  v5[1] = *(unsigned char *)(a1 + 44);
  int v1 = *(_DWORD *)(a1 + 40);
  _DWORD v5[2] = v1 != 3;
  v5[3] = (v1 - 1) < 2;
  void v5[4] = v1 == 2;
  void v5[5] = *(unsigned char *)(a1 + 45);
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  __int16 v3 = *((_WORD *)v2 + 4);
  uint64_t v6 = *v2;
  __int16 v7 = v3;
  return sub_1001FCC1C((uint64_t)v5);
}

uint64_t sub_10032C864(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xA4u);
}

uint64_t sub_10032C8C4(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x1Au);
}

uint64_t sub_10032C924(uint64_t a1, uint64_t a2, char a3)
{
  if (*(_DWORD *)(sub_10003FB34() + 712) >= 6u
    && (uint64_t v6 = sub_100035F54(), (*(unsigned int (**)(uint64_t))(*(void *)v6 + 120))(v6)))
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    _DWORD v13[2] = sub_10032CA58;
    v13[3] = &unk_1009A65D8;
    v13[4] = a2;
    char v14 = a3;
    __int16 v7 = v13;
    uint64_t v8 = a1;
    uint64_t v9 = 26;
  }
  else
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    _DWORD v11[2] = sub_10032CA78;
    v11[3] = &unk_1009A65D8;
    char v12 = a3;
    uint8_t v11[4] = a2;
    __int16 v7 = v11;
    uint64_t v8 = a1;
    uint64_t v9 = 164;
  }
  return sub_10001A7D4(v8, v9, 1, v7, 0);
}

uint64_t sub_10032CA58()
{
  return sub_1001FCDD8();
}

uint64_t sub_10032CA78()
{
  return sub_1001F892C();
}

uint64_t sub_10032CA98(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x18u);
}

uint64_t sub_10032CAF8()
{
  return sub_1001FCA60();
}

uint64_t sub_10032CB10(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x16u);
}

uint64_t sub_10032CB70(uint64_t a1, void *a2, __int16 a3)
{
  id v5 = a2;
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009A6EB8);
  }
  uint64_t v11 = 0;
  uint64_t v6 = off_1009F7EB8;
  sub_1000305AC(v12, v5);
  if (sub_1006856B8((uint64_t)v6, v12, &v11))
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    _DWORD v9[2] = sub_10032CCC4;
    v9[3] = &unk_1009A67D8;
    void v9[4] = v11;
    __int16 v10 = a3;
    uint64_t v7 = sub_10001A7D4(a1, 22, 1, v9, 0);
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_10032CCA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10032CCC4(uint64_t a1)
{
  return sub_1001FCCB4(*(void *)(a1 + 32));
}

uint64_t sub_10032CCE4(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xCu);
}

uint64_t sub_10032CD44(uint64_t a1, __int16 a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10032CDBC;
  v3[3] = &unk_1009A66D8;
  __int16 v4 = a2;
  return sub_10001A7D4(a1, 12, 1, v3, 0);
}

uint64_t sub_10032CDBC()
{
  return sub_1001FCD4C();
}

uint64_t sub_10032CDD4(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xF8u);
}

uint64_t sub_10032CE34(uint64_t a1, __int16 a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10032CEAC;
  v3[3] = &unk_1009A66D8;
  __int16 v4 = a2;
  return sub_10001A7D4(a1, 248, 1, v3, 0);
}

uint64_t sub_10032CEAC()
{
  return sub_1002012FC();
}

uint64_t sub_10032CEC4(int a1, const void *a2, size_t __n)
{
  word_100A122A0 = __n;
  memcpy(&xmmword_100A121A0, a2, __n);
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x11u);
}

uint64_t sub_10032CF38(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_10032CFF0;
  v6[3] = &unk_1009A6618;
  char v7 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_10032D008;
  v5[3] = &unk_100998260;
  void v5[4] = a3;
  void v5[5] = a4;
  return sub_10001A7D4(a1, 17, 1, v6, v5);
}

uint64_t sub_10032CFF0()
{
  return sub_1001FCE64();
}

void *sub_10032D008(void *result)
{
  int v1 = (_WORD *)*((void *)result + 4);
  if ((unsigned __int16)word_100A122A0 <= (unsigned __int16)*v1)
  {
    _WORD *v1 = word_100A122A0;
    return memcpy(*((void **)result + 5), &xmmword_100A121A0, (unsigned __int16)word_100A122A0);
  }
  return result;
}

uint64_t sub_10032D03C(int a1, int a2, int a3, int a4, int a5)
{
  __int16 v10 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v12[0] = 67109888;
    v12[1] = a2;
    __int16 v13 = 1024;
    int v14 = a3;
    __int16 v15 = 1024;
    int v16 = a4;
    __int16 v17 = 1024;
    int v18 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "transmitting %d, receiving %d, sleep %d, others %d", (uint8_t *)v12, 0x1Au);
  }
  LOWORD(xmmword_100A121A0) = a2;
  WORD1(xmmword_100A121A0) = a3;
  WORD2(xmmword_100A121A0) = a4;
  WORD3(xmmword_100A121A0) = a5;
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0x9Eu);
}

uint64_t sub_10032D164(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_10032D220;
  v8[3] = &unk_1009A66D8;
  __int16 v9 = a2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_10032D240;
  v7[3] = &unk_1009983C8;
  void v7[4] = a3;
  void v7[5] = a4;
  void v7[6] = a5;
  void v7[7] = a6;
  return sub_10001A7D4(a1, 158, 1, v8, v7);
}

uint64_t sub_10032D220()
{
  return sub_1001F8788();
}

uint64_t sub_10032D240(uint64_t result)
{
  int v1 = *(_WORD **)(result + 40);
  **(_WORD **)(result + 32) = xmmword_100A121A0;
  _WORD *v1 = WORD1(xmmword_100A121A0);
  uint64_t v2 = *(_WORD **)(result + 56);
  **(_WORD **)(result + 48) = WORD2(xmmword_100A121A0);
  _WORD *v2 = WORD3(xmmword_100A121A0);
  return result;
}

uint64_t sub_10032D274(int a1, int a2, int a3, int a4, int a5)
{
  LODWORD(xmmword_100A121A0) = a2;
  DWORD1(xmmword_100A121A0) = a3;
  DWORD2(xmmword_100A121A0) = a4;
  HIDWORD(xmmword_100A121A0) = a5;
  __int16 v10 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v12[0] = 67109888;
    v12[1] = a2;
    __int16 v13 = 1024;
    int v14 = a3;
    __int16 v15 = 1024;
    int v16 = a4;
    __int16 v17 = 1024;
    int v18 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "(BTPowerLog): iPACount: %u, ePACount: %u, iPAThreadCount: %u, ePAThreadCount: %u", (uint8_t *)v12, 0x1Au);
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0xA0u);
}

uint64_t sub_10032D394(int a1, int *a2)
{
  __int16 v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = *a2;
    LODWORD(v5) = a2[1];
    LODWORD(v6) = a2[2];
    LODWORD(v7) = a2[3];
    LODWORD(v8) = a2[4];
    double v15 = (float)a2[38] / 100.0;
    LODWORD(v9) = a2[42];
    double v16 = (float)a2[41] / 100.0;
    LODWORD(v10) = a2[43];
    LODWORD(v11) = a2[44];
    LODWORD(v12) = a2[45];
    LODWORD(v13) = a2[46];
    int v40 = 67112192;
    double v17 = (double)a2[47];
    *(_DWORD *)int v41 = v14;
    *(_WORD *)&v41[4] = 2048;
    *(double *)&v41[6] = (double)v5 / 100.0;
    *(_WORD *)&v41[14] = 2048;
    *(double *)&v41[16] = (double)v6 / 100.0;
    *(_WORD *)&v41[24] = 2048;
    *(double *)&v41[26] = (double)v7 / 100.0;
    *(_WORD *)&v41[34] = 2048;
    *(double *)&v41[36] = (double)v8 / 100.0;
    *(_WORD *)&v41[44] = 2048;
    *(double *)&v41[46] = v15;
    *(_WORD *)&v41[54] = 2048;
    *(double *)&v41[56] = v16;
    *(_WORD *)&v41[64] = 2048;
    *(double *)&v41[66] = (double)v9 / 100.0;
    __int16 v42 = 2048;
    double v43 = (double)v10 / 100.0;
    __int16 v44 = 2048;
    double v45 = (double)v11 / 100.0;
    __int16 v46 = 2048;
    double v47 = (double)v12 / 100.0;
    __int16 v48 = 2048;
    double v49 = (double)v13 / 100.0;
    __int16 v50 = 2048;
    double v51 = v17 / 100.0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "(BTPowerLog): commandType %d, txPct %0.1f%%, rxPct %0.1f%%, sleepPct %0.1f%%, idlePct %0.1f%% LP:%0.1f%% EPA:%0.1f%% TxBfEPA:%0.1f%% RxScan%0.1f%%, MainCore:%0.1f%%:%0.1f%%, ScanCore:%0.1f%%: %0.1f%%", (uint8_t *)&v40, 0x80u);
    __int16 v4 = qword_100A19E50;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v18) = a2[48];
    LODWORD(v19) = a2[49];
    int v40 = 134218240;
    *(double *)int v41 = (double)v18 / 100.0;
    *(_WORD *)&v41[8] = 2048;
    *(double *)&v41[10] = (double)v19 / 100.0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "(BTPowerLog): m154Tx %0.1f%%,m154Rx %0.1f%%", (uint8_t *)&v40, 0x16u);
    __int16 v4 = qword_100A19E50;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v23 = a2[50];
    int v24 = a2[51];
    LODWORD(v20) = a2[52];
    LODWORD(v21) = a2[53];
    int v40 = 67110912;
    LODWORD(v22) = a2[55];
    double v25 = (double)a2[54] / 100.0;
    uint64_t v26 = *((void *)a2 + 28);
    uint64_t v27 = *((void *)a2 + 29);
    *(_DWORD *)int v41 = v23;
    *(_WORD *)&v41[4] = 1024;
    *(_DWORD *)&v41[6] = v24;
    *(_WORD *)&v41[10] = 2048;
    *(double *)&v41[12] = (double)v20 / 100.0;
    *(_WORD *)&v41[20] = 2048;
    *(double *)&v41[22] = (double)v21 / 100.0;
    *(_WORD *)&v41[30] = 2048;
    *(double *)&v41[32] = v25;
    *(_WORD *)&v41[40] = 2048;
    *(double *)&v41[42] = (double)v22 / 100.0;
    *(_WORD *)&v41[50] = 2048;
    *(void *)&v41[52] = v26;
    *(_WORD *)&v41[60] = 2048;
    *(void *)&v41[62] = v27;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "(BTPowerLog): ipa5g %u, epa5g %u, txbf5gTxPct %0.1f%%, mrc5gRxPct %0.1f%%, epa5gTxPct %0.1f%%, txbf5gEpaRxPct %0.1f%%, duration5gTx %llu, duration5gRx %llu", (uint8_t *)&v40, 0x4Au);
  }
  long long v28 = *(_OWORD *)a2;
  long long v29 = *((_OWORD *)a2 + 2);
  xmmword_100A122C0 = *((_OWORD *)a2 + 1);
  xmmword_100A122D0 = v29;
  xmmword_100A122B0 = v28;
  long long v30 = *((_OWORD *)a2 + 3);
  long long v31 = *((_OWORD *)a2 + 4);
  long long v32 = *((_OWORD *)a2 + 6);
  xmmword_100A12300 = *((_OWORD *)a2 + 5);
  xmmword_100A12310 = v32;
  xmmword_100A122E0 = v30;
  xmmword_100A122F0 = v31;
  long long v33 = *((_OWORD *)a2 + 7);
  long long v34 = *((_OWORD *)a2 + 8);
  long long v35 = *((_OWORD *)a2 + 10);
  xmmword_100A12340 = *((_OWORD *)a2 + 9);
  *(_OWORD *)&dword_100A12350 = v35;
  xmmword_100A12320 = v33;
  xmmword_100A12330 = v34;
  long long v36 = *((_OWORD *)a2 + 11);
  long long v37 = *((_OWORD *)a2 + 12);
  long long v38 = *((_OWORD *)a2 + 14);
  xmmword_100A12380 = *((_OWORD *)a2 + 13);
  *(_OWORD *)&qword_100A12390 = v38;
  xmmword_100A12360 = v36;
  *(_OWORD *)&dword_100A12370 = v37;
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0x9Fu);
}

uint64_t sub_10032D6E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v53[0] = 0;
  v53[1] = 0;
  sub_10003AED0((uint64_t)v53, a1 + 72);
  sub_10003FB34();
  BOOL v5 = sub_100350FB0();
  uint64_t v6 = sub_10003FB34();
  int v7 = sub_100350FD8(v6);
  sub_10003FB34();
  BOOL v8 = sub_10035109C();
  uint64_t v9 = sub_10003FB34();
  BOOL v10 = sub_1003510C0(v9);
  BOOL v11 = v10;
  if (v5) {
    char v12 = 2;
  }
  else {
    char v12 = 1;
  }
  if (v7) {
    char v12 = 3;
  }
  if (v8) {
    char v12 = 4;
  }
  if (v10) {
    unsigned __int8 v13 = 5;
  }
  else {
    unsigned __int8 v13 = v12;
  }
  int v14 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    double v15 = sub_10001AA04(a1, 159);
    *(_DWORD *)std::string buf = 136446466;
    std::string v55 = v15;
    __int16 v56 = 1024;
    int v57 = v13;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "(BTPowerLog): Sending: %{public}s, version=%d", buf, 0x12u);
  }
  if (sub_10001B700(a1, 159))
  {
    char v52 = 0;
    sub_10001B8E0(&v52);
    int v16 = sub_1001F8814();
    sub_10001B910(&v52);
    if (!v16)
    {
      if (qword_1009F8070 != -1) {
        dispatch_once(&qword_1009F8070, &stru_1009A6E78);
      }
      int v16 = sub_10001B918((uint64_t)off_1009F8068, 159);
      if (!v16)
      {
        long long v17 = xmmword_100A122C0;
        *(_OWORD *)a3 = xmmword_100A122B0;
        *(_OWORD *)(a3 + 16) = v17;
        long long v18 = xmmword_100A122E0;
        *(_OWORD *)(a3 + 32) = xmmword_100A122D0;
        *(_OWORD *)(a3 + 48) = v18;
        long long v19 = xmmword_100A12300;
        *(_OWORD *)(a3 + 64) = xmmword_100A122F0;
        *(_OWORD *)(a3 + 80) = v19;
        long long v20 = xmmword_100A12320;
        *(_OWORD *)(a3 + 96) = xmmword_100A12310;
        *(_OWORD *)(a3 + 112) = v20;
        *(_OWORD *)(a3 + 128) = xmmword_100A12330;
        *(void *)(a3 + 144) = xmmword_100A12340;
        if (sub_10001B700(a1, 160))
        {
          unint64_t v21 = qword_100A19E50;
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
          {
            unint64_t v22 = sub_10001AA04(a1, 160);
            *(_DWORD *)std::string buf = 136446210;
            std::string v55 = v22;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "(BTPowerLog): Sending: %{public}s", buf, 0xCu);
          }
          sub_1002B804C(&v52);
          int v16 = sub_1001F88A0();
          sub_10001B910(&v52);
          if (!v16)
          {
            if (qword_1009F8070 != -1) {
              dispatch_once(&qword_1009F8070, &stru_1009A6E78);
            }
            int v16 = sub_10001B918((uint64_t)off_1009F8068, 160);
            if (!v16)
            {
              *(void *)(a3 + 152) = xmmword_100A121A0;
              int v23 = DWORD2(xmmword_100A12340);
              int v24 = HIDWORD(xmmword_100A12340);
              if (!v5)
              {
                int v23 = 0;
                int v24 = 0;
              }
              *(_DWORD *)(a3 + 160) = v23;
              *(_DWORD *)(a3 + 164) = v24;
              int v25 = dword_100A12350;
              int v26 = unk_100A12354;
              if (!v5)
              {
                int v25 = 0;
                int v26 = 0;
              }
              *(_DWORD *)(a3 + 168) = v25;
              *(_DWORD *)(a3 + 172) = v26;
              int v27 = dword_100A12358;
              int v28 = unk_100A1235C;
              if (!v7) {
                int v28 = 0;
              }
              int v29 = xmmword_100A12360;
              int v30 = DWORD1(xmmword_100A12360);
              if (!v7)
              {
                int v29 = 0;
                int v30 = 0;
              }
              *(_DWORD *)(a3 + 184) = v29;
              *(_DWORD *)(a3 + 188) = v30;
              int v31 = DWORD2(xmmword_100A12360);
              int v32 = HIDWORD(xmmword_100A12360);
              if (!v7)
              {
                int v31 = 0;
                int v32 = 0;
              }
              *(_DWORD *)(a3 + 192) = v31;
              *(_DWORD *)(a3 + 196) = v32;
              int v33 = dword_100A12370;
              int v34 = unk_100A12374;
              if (!v8)
              {
                int v33 = 0;
                int v34 = 0;
              }
              *(_DWORD *)(a3 + 200) = v33;
              *(_DWORD *)(a3 + 204) = v34;
              int v35 = dword_100A12378;
              int v36 = unk_100A1237C;
              if (!v11)
              {
                int v35 = 0;
                int v36 = 0;
              }
              *(_DWORD *)(a3 + 216) = v35;
              *(_DWORD *)(a3 + 220) = v36;
              __int16 v37 = xmmword_100A12380;
              if (!v11) {
                __int16 v37 = 0;
              }
              *(_WORD *)(a3 + 224) = v37;
              __int16 v38 = WORD2(xmmword_100A12380);
              if (!v11) {
                __int16 v38 = 0;
              }
              *(_WORD *)(a3 + 226) = v38;
              __int16 v39 = WORD4(xmmword_100A12380);
              if (!v11) {
                __int16 v39 = 0;
              }
              *(_WORD *)(a3 + 228) = v39;
              if (!v11) {
                int v27 = 0;
              }
              *(_DWORD *)(a3 + 176) = v27;
              *(_DWORD *)(a3 + 180) = v28;
              uint64_t v41 = qword_100A12390;
              uint64_t v40 = unk_100A12398;
              if (!v11)
              {
                uint64_t v41 = 0;
                uint64_t v40 = 0;
              }
              *(void *)(a3 + 232) = v41;
              *(void *)(a3 + 240) = v40;
            }
          }
        }
        else
        {
          int v16 = 0;
        }
      }
    }
    sub_1000262B8(a1, 0x9Fu);
    sub_1000262B8(a1, 0xA0u);
    uint64_t v50 = v16 != 0;
    sub_10001B8AC(&v52);
  }
  else
  {
    __int16 v42 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_100757648(v42, v43, v44, v45, v46, v47, v48, v49);
    }
    sub_1000262B8(a1, 0x9Fu);
    sub_1000262B8(a1, 0xA0u);
    uint64_t v50 = 2;
  }
  sub_10003AFB4((uint64_t)v53);
  return v50;
}

void sub_10032DB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14)
{
}

uint64_t sub_10032DB70(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, unsigned int a14, unsigned int a15)
{
  long long v20 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67112448;
    int v26 = a2;
    __int16 v27 = 1024;
    int v28 = a3;
    __int16 v29 = 1024;
    int v30 = a4;
    __int16 v31 = 1024;
    int v32 = a5;
    __int16 v33 = 1024;
    int v34 = a6;
    __int16 v35 = 1024;
    int v36 = a7;
    __int16 v37 = 1024;
    int v38 = a8;
    __int16 v39 = 1024;
    int v40 = a9;
    __int16 v41 = 1024;
    int v42 = a10;
    __int16 v43 = 1024;
    int v44 = a11;
    __int16 v45 = 1024;
    int v46 = a12;
    __int16 v47 = 1024;
    int v48 = a13;
    __int16 v49 = 1024;
    unsigned int v50 = a14;
    __int16 v51 = 1024;
    unsigned int v52 = a15;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "(BTPowerLog): durationTotal %d, durationActive %d, durationIdle %d, durationSleep %d disableCounter %d, iPATxBT %d, ePATxBT %d, iPATxLE %d, ePATxLE %d, connectedRxBT %d, connectedRxLE %d, scanRxBT %d scanRxLE %d, totalPHYCal %d", buf, 0x56u);
  }
  LODWORD(xmmword_100A121A0) = a2;
  DWORD1(xmmword_100A121A0) = a3;
  DWORD2(xmmword_100A121A0) = a4;
  HIDWORD(xmmword_100A121A0) = a5;
  LODWORD(xmmword_100A121B0) = a6;
  DWORD1(xmmword_100A121B0) = a7;
  DWORD2(xmmword_100A121B0) = a8;
  HIDWORD(xmmword_100A121B0) = a9;
  dword_100A121C0 = a10;
  dword_100A121C4 = a11;
  dword_100A121C8 = a12;
  dword_100A121CC = a13;
  *(void *)&xmmword_100A121D0 = __PAIR64__(a15, a14);
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0x2Eu);
}

uint64_t sub_10032DD5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10, long long a11, uint64_t a12)
{
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  _DWORD v13[2] = sub_10032DE14;
  v13[3] = &unk_1009A6B68;
  v13[4] = a2;
  void v13[5] = a3;
  void v13[6] = a4;
  void v13[7] = a5;
  v13[8] = a6;
  v13[9] = a7;
  v13[10] = a8;
  long long v14 = a9;
  long long v15 = a10;
  long long v16 = a11;
  uint64_t v17 = a12;
  return sub_10001A7D4(a1, 46, 1, &stru_1009A6B48, v13);
}

int sub_10032DE00(id a1)
{
  return sub_1001FDD58();
}

uint64_t sub_10032DE14(uint64_t result)
{
  int v1 = *(_DWORD **)(result + 40);
  **(_DWORD **)(result + 32) = xmmword_100A121A0;
  _DWORD *v1 = DWORD1(xmmword_100A121A0);
  uint64_t v2 = *(_DWORD **)(result + 56);
  **(_DWORD **)(result + 48) = DWORD2(xmmword_100A121A0);
  _DWORD *v2 = HIDWORD(xmmword_100A121A0);
  __int16 v3 = *(_DWORD **)(result + 72);
  **(_DWORD **)(result + 64) = xmmword_100A121B0;
  *__int16 v3 = DWORD1(xmmword_100A121B0);
  __int16 v4 = *(_DWORD **)(result + 88);
  **(_DWORD **)(result + 80) = DWORD2(xmmword_100A121B0);
  _DWORD *v4 = HIDWORD(xmmword_100A121B0);
  BOOL v5 = *(_DWORD **)(result + 104);
  **(_DWORD **)(result + 96) = dword_100A121C0;
  *BOOL v5 = dword_100A121C4;
  uint64_t v6 = *(_DWORD **)(result + 120);
  **(_DWORD **)(result + 112) = dword_100A121C8;
  _DWORD *v6 = dword_100A121CC;
  int v7 = *(_DWORD **)(result + 136);
  **(_DWORD **)(result + 128) = xmmword_100A121D0;
  _DWORD *v7 = DWORD1(xmmword_100A121D0);
  return result;
}

uint64_t sub_10032DEAC(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x2Fu);
}

uint64_t sub_10032DF0C(uint64_t a1)
{
  return sub_10001A7D4(a1, 47, 1, &stru_1009A6B88, 0);
}

int sub_10032DF24(id a1)
{
  return sub_1001FDDE4();
}

uint64_t sub_10032DF38(int a1, int a2, int a3, int a4, int a5)
{
  BOOL v10 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v12[0] = 67109888;
    v12[1] = a2;
    __int16 v13 = 1024;
    int v14 = a3;
    __int16 v15 = 1024;
    int v16 = a4;
    __int16 v17 = 1024;
    int v18 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "total %d, successful %d, downgraded %d, involuntaryDowngraded %d", (uint8_t *)v12, 0x1Au);
  }
  LODWORD(xmmword_100A121A0) = a2;
  DWORD1(xmmword_100A121A0) = a3;
  DWORD2(xmmword_100A121A0) = a4;
  HIDWORD(xmmword_100A121A0) = a5;
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0x30u);
}

uint64_t sub_10032E058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_10032E0EC;
  v6[3] = &unk_1009983C8;
  void v6[4] = a2;
  void v6[5] = a3;
  void v6[6] = a4;
  v6[7] = a5;
  return sub_10001A7D4(a1, 48, 1, &stru_1009A6BA8, v6);
}

int sub_10032E0D8(id a1)
{
  return sub_1001FDE70();
}

uint64_t sub_10032E0EC(uint64_t result)
{
  int v1 = *(_DWORD **)(result + 40);
  **(_DWORD **)(result + 32) = xmmword_100A121A0;
  _DWORD *v1 = DWORD1(xmmword_100A121A0);
  uint64_t v2 = *(_DWORD **)(result + 56);
  **(_DWORD **)(result + 48) = DWORD2(xmmword_100A121A0);
  _DWORD *v2 = HIDWORD(xmmword_100A121A0);
  return result;
}

uint64_t sub_10032E120(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x31u);
}

uint64_t sub_10032E180(uint64_t a1)
{
  return sub_10001A7D4(a1, 49, 1, &stru_1009A6BC8, 0);
}

int sub_10032E198(id a1)
{
  return sub_1001FDEFC();
}

uint64_t sub_10032E1AC(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xAAu);
}

uint64_t sub_10032E20C(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10032E284;
  v3[3] = &unk_1009A6618;
  char v4 = a2;
  return sub_10001A7D4(a1, 170, 1, v3, 0);
}

uint64_t sub_10032E284()
{
  return sub_1001F8A50();
}

uint64_t sub_10032E29C(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x1Du);
}

uint64_t sub_10032E2FC(uint64_t a1, uint64_t a2, char a3, char a4, char a5)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_10032E380;
  v6[3] = &unk_1009A6598;
  void v6[4] = a2;
  char v7 = a3;
  char v8 = a4;
  char v9 = a5;
  return sub_10001A7D4(a1, 29, 1, v6, 0);
}

uint64_t sub_10032E380(uint64_t a1)
{
  return sub_1001FD4A0(*(void *)(a1 + 32) + 128, *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 41), *(unsigned __int8 *)(a1 + 42), (uint64_t)sub_10032E29C);
}

uint64_t sub_10032E3AC(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x2Bu);
}

uint64_t sub_10032E40C(uint64_t a1)
{
  for (uint64_t i = 0; i != 6; ++i)
  {
    char v3 = byte_1009FB278[i];
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    _DWORD v5[2] = sub_10032E4D0;
    v5[3] = &unk_1009A6618;
    char v6 = v3;
    uint64_t result = sub_10001A7D4(a1, 43, 1, v5, 0);
  }
  return result;
}

uint64_t sub_10032E4D0()
{
  return sub_1001FDAE0();
}

uint64_t sub_10032E4E8(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x2Cu);
}

uint64_t sub_10032E548(uint64_t a1, int a2)
{
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, a1 + 72);
  char v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    BOOL v5 = sub_10001AA04(a1, 44);
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Sending: %{public}s", buf, 0xCu);
  }
  if (sub_10001B700(a1, 44))
  {
    char v6 = qword_100A19E50;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      char v8 = "Disabling";
      if (a2) {
        char v8 = "Enabling";
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%s FW Log Streaming", buf, 0xCu);
    }
    IOBTDebug::create((IOBTDebug *)v7);
  }
  sub_10003AFB4((uint64_t)v10);
  return 2;
}

void sub_10032E8A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  char v3 = va_arg(va1, IOBTDebug *);
  sub_10033D370((IOBTDebug **)va, 0);
  sub_10003AFB4((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_10032E8F8(int a1, _DWORD *a2, unsigned int a3)
{
  if (!a1 && a2 && a3 >= 4)
  {
    LOBYTE(xmmword_100A121A0) = 4;
    *(_DWORD *)((char *)&xmmword_100A121A0 + 1) = *a2;
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xA5u);
}

uint64_t sub_10032E980(uint64_t a1, char a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_10032EA40;
  v8[3] = &unk_1009A69D8;
  char v9 = a2;
  char v10 = a3;
  char v11 = a4;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_10032EA64;
  v7[3] = &unk_100998260;
  void v7[4] = a6;
  void v7[5] = a5;
  return sub_10001A7D4(a1, 165, 1, v8, v7);
}

uint64_t sub_10032EA40()
{
  return sub_1001F8ADC();
}

void *sub_10032EA64(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 32);
  if (result)
  {
    size_t v3 = xmmword_100A121A0;
    **(_WORD **)(a1 + 40) = xmmword_100A121A0;
    return memcpy(result, (char *)&xmmword_100A121A0 + 1, v3);
  }
  return result;
}

uint64_t sub_10032EA8C(int a1, uint64_t *a2, unsigned int a3)
{
  if (!a1 && a2 && a3 >= 9)
  {
    LOBYTE(xmmword_100A121A0) = 9;
    uint64_t v4 = *a2;
    BYTE9(xmmword_100A121A0) = *((unsigned char *)a2 + 8);
    *(void *)((char *)&xmmword_100A121A0 + 1) = v4;
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xA6u);
}

uint64_t sub_10032EB1C(uint64_t a1, char a2, char a3, char a4, char a5, char a6, char a7, uint64_t a8, uint64_t a9)
{
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  _DWORD v11[2] = sub_10032EBEC;
  v11[3] = &unk_1009A6B08;
  char v12 = a2;
  char v13 = a3;
  char v14 = a4;
  char v15 = a5;
  char v16 = a6;
  char v17 = a7;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_10032EC1C;
  v10[3] = &unk_100998260;
  void v10[4] = a9;
  void v10[5] = a8;
  return sub_10001A7D4(a1, 166, 1, v11, v10);
}

uint64_t sub_10032EBEC()
{
  return sub_1001F8B68();
}

void *sub_10032EC1C(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 32);
  if (result)
  {
    size_t v3 = xmmword_100A121A0;
    **(_WORD **)(a1 + 40) = xmmword_100A121A0;
    return memcpy(result, (char *)&xmmword_100A121A0 + 1, v3);
  }
  return result;
}

uint64_t sub_10032EC44(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x2Du);
}

uint64_t sub_10032ECA4(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10032ED1C;
  v3[3] = &unk_1009A6618;
  char v4 = a2;
  return sub_10001A7D4(a1, 45, 1, v3, 0);
}

uint64_t sub_10032ED1C()
{
  return sub_1002009C4();
}

uint64_t sub_10032ED34(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x33u);
}

uint64_t sub_10032ED94(uint64_t a1)
{
  return sub_10001A7D4(a1, 51, 1, &stru_1009A6BE8, 0);
}

int sub_10032EDAC(id a1)
{
  return sub_1001FCF7C();
}

uint64_t sub_10032EDC0(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x29u);
}

uint64_t sub_10032EE20(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10032EE98;
  v3[3] = &unk_1009A6618;
  char v4 = a2;
  return sub_10001A7D4(a1, 41, 1, v3, 0);
}

uint64_t sub_10032EE98()
{
  return sub_1001FD93C();
}

uint64_t sub_10032EEB0(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x2Au);
}

uint64_t sub_10032EF10(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10032EF88;
  v3[3] = &unk_1009A6618;
  char v4 = a2;
  return sub_10001A7D4(a1, 42, 1, v3, 0);
}

uint64_t sub_10032EF88()
{
  return sub_1001FD9C8();
}

uint64_t sub_10032EFA0(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x35u);
}

uint64_t sub_10032F000(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10032F078;
  v3[3] = &unk_1009A6618;
  char v4 = a2;
  return sub_10001A7D4(a1, 53, 1, v3, 0);
}

uint64_t sub_10032F078()
{
  return sub_1002004D8();
}

uint64_t sub_10032F090(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x37u);
}

uint64_t sub_10032F0F0(uint64_t a1, char a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  long long v4[2] = sub_10032F168;
  void v4[3] = &unk_1009A66D8;
  char v5 = a2;
  char v6 = a3;
  return sub_10001A7D4(a1, 55, a3, v4, 0);
}

uint64_t sub_10032F168()
{
  return sub_1001FDF88();
}

uint64_t sub_10032F18C(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xB0u);
}

uint64_t sub_10032F1EC(uint64_t a1, char a2, char a3, __int16 a4, __int16 a5, __int16 a6)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_10032F274;
  v7[3] = &unk_1009A6738;
  char v11 = a2;
  char v12 = a3;
  __int16 v8 = a4;
  __int16 v9 = a5;
  __int16 v10 = a6;
  return sub_10001A7D4(a1, 176, 1, v7, 0);
}

uint64_t sub_10032F274()
{
  return sub_100201388();
}

uint64_t sub_10032F2A0(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xB2u);
}

uint64_t sub_10032F300(uint64_t a1, uint64_t a2, int a3, __int16 a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_10032F380;
  v5[3] = &unk_1009A65B8;
  void v5[4] = a2;
  int v6 = a3;
  __int16 v7 = a4;
  return sub_10001A7D4(a1, 178, 1, v5, 0);
}

uint64_t sub_10032F380()
{
  return sub_100201414();
}

uint64_t sub_10032F3A4(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x38u);
}

uint64_t sub_10032F404(uint64_t a1, char a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  long long v4[2] = sub_10032F47C;
  void v4[3] = &unk_1009A66D8;
  char v5 = a2;
  char v6 = a3;
  return sub_10001A7D4(a1, 56, a3, v4, 0);
}

uint64_t sub_10032F47C(uint64_t a1)
{
  uint64_t result = sub_1001FE014();
  BYTE10(xmmword_100A19600) = *(unsigned char *)(a1 + 32);
  return result;
}

uint64_t sub_10032F4CC(int a1, int a2)
{
  char v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Proprietary (HDR) Local Read Features=%d", (uint8_t *)v6, 8u);
  }
  dword_100A195FC = a2;
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0x39u);
}

uint64_t sub_10032F5BC(uint64_t a1, int a2)
{
  return sub_10001A7D4(a1, 57, a2, &stru_1009A6C08, 0);
}

int sub_10032F5D4(id a1)
{
  return sub_1001FE0A0();
}

uint64_t sub_10032F5E8(int a1, int a2, int a3)
{
  char v6 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    LODWORD(v17) = 67109120;
    HIDWORD(v17) = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Proprietary (HDR) Remote Read Features=%d", (uint8_t *)&v17, 8u);
  }
  __int16 v7 = sub_100197864(a2);
  if (sub_100197698((uint64_t)v7))
  {
    *((_DWORD *)v7 + 73) = a3;
  }
  else if (sub_100058654())
  {
    sub_100056E24((uint64_t)"Device disconnected during the name request. Ignoring event.", v8, v9, v10, v11, v12, v13, v14, v17);
    char v15 = sub_100050B4C(0x5Cu);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      sub_100757720(v15);
    }
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0x3Au);
}

uint64_t sub_10032F72C(uint64_t a1, __int16 a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  long long v4[2] = sub_10032F7A0;
  void v4[3] = &unk_1009A66D8;
  __int16 v5 = a2;
  return sub_10001A7D4(a1, 58, a3, v4, 0);
}

uint64_t sub_10032F7A0()
{
  return sub_1001FE12C();
}

uint64_t sub_10032F7B8(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x3Bu);
}

uint64_t sub_10032F818(uint64_t a1, __int16 a2, int a3, int a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_10032F89C;
  v5[3] = &unk_1009A67F8;
  __int16 v7 = a2;
  int v6 = a3;
  char v8 = a4;
  return sub_10001A7D4(a1, 59, a4, v5, 0);
}

uint64_t sub_10032F89C()
{
  return sub_1001FE1B8();
}

uint64_t sub_10032F8C4(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x3Cu);
}

uint64_t sub_10032F924(uint64_t a1, __int16 a2, int a3, int a4, __int16 a5, __int16 a6, char a7, int a8, unsigned __int8 a9)
{
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_10032F9B8;
  v10[3] = &unk_1009A6978;
  __int16 v14 = a2;
  int v11 = a3;
  int v12 = a4;
  __int16 v15 = a5;
  __int16 v16 = a6;
  char v17 = a7;
  int v13 = a8;
  unsigned __int8 v18 = a9;
  return sub_10001A7D4(a1, 60, a9, v10, 0);
}

uint64_t sub_10032F9B8()
{
  return sub_1001FE244();
}

uint64_t sub_10032F9F0(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x3Du);
}

uint64_t sub_10032FA50(uint64_t a1, uint64_t a2, int a3, int a4, __int16 a5, __int16 a6, char a7, int a8, unsigned __int8 a9)
{
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_10032FAE4;
  v10[3] = &unk_1009A6C28;
  void v10[4] = a2;
  int v11 = a3;
  int v12 = a4;
  __int16 v14 = a5;
  __int16 v15 = a6;
  char v16 = a7;
  int v13 = a8;
  unsigned __int8 v17 = a9;
  return sub_10001A7D4(a1, 61, a9, v10, 0);
}

uint64_t sub_10032FAE4()
{
  return sub_1001FE2D0();
}

uint64_t sub_10032FB1C(int a1, uint64_t a2, int a3, int a4)
{
  __int16 v7 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v9[0] = 67109632;
    v9[1] = a1;
    __int16 v10 = 1024;
    int v11 = a3;
    __int16 v12 = 1024;
    int v13 = a4;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "SCO Buffer Size Control callback status=%d controllerBufferSize=%d controllerNumBuffer=%d", (uint8_t *)v9, 0x14u);
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  uint64_t result = sub_100026140(a1, 0x3Eu);
  if (!a1)
  {
    sub_100189A5C(a3, 1);
    return sub_100189AB4();
  }
  return result;
}

uint64_t sub_10032FC2C(uint64_t a1, char a2, __int16 a3, char a4, int a5)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_10032FCB0;
  v6[3] = &unk_1009A6C48;
  char v8 = a2;
  __int16 v7 = a3;
  char v9 = a4;
  char v10 = a5;
  return sub_10001A7D4(a1, 62, a5, v6, 0);
}

uint64_t sub_10032FCB0()
{
  return sub_1001FE35C();
}

uint64_t sub_10032FCDC(int a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "HBR Control callback status=%d", (uint8_t *)v4, 8u);
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0x3Fu);
}

uint64_t sub_10032FDB4(uint64_t a1, char a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_10032FE2C;
  void v4[3] = &unk_1009A66D8;
  char v5 = a2;
  char v6 = a3;
  return sub_10001A7D4(a1, 63, a3, v4, 0);
}

uint64_t sub_10032FE2C()
{
  return sub_1001FE3E8();
}

uint64_t sub_10032FE50(int a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "HRB Allowed Bands callback status=%d", (uint8_t *)v4, 8u);
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0x40u);
}

uint64_t sub_10032FF28(uint64_t a1, char a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_10032FFA0;
  void v4[3] = &unk_1009A66D8;
  char v5 = a2;
  char v6 = a3;
  return sub_10001A7D4(a1, 64, a3, v4, 0);
}

uint64_t sub_10032FFA0()
{
  return sub_1001FE474();
}

uint64_t sub_10032FFC4(int a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "HRB Classification Bands callback status=%d", (uint8_t *)v4, 8u);
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0x41u);
}

uint64_t sub_10033009C(uint64_t a1, char a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_100330114;
  void v4[3] = &unk_1009A66D8;
  char v5 = a2;
  char v6 = a3;
  return sub_10001A7D4(a1, 65, a3, v4, 0);
}

uint64_t sub_100330114()
{
  return sub_1001FE500();
}

uint64_t sub_100330138(uint64_t a1, uint64_t a2, __int16 a3, char a4, __int16 a5, char a6, char a7, char a8)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_1003301C8;
  v9[3] = &unk_1009A6958;
  void v9[4] = a2;
  __int16 v10 = a3;
  char v12 = a4;
  __int16 v11 = a5;
  char v13 = a6;
  char v14 = a7;
  char v15 = a8;
  return sub_10001A7D4(a1, 66, 1, v9, 0);
}

uint64_t sub_1003301C8()
{
  return sub_1001FE58C();
}

uint64_t sub_1003301EC(int a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "HRB Change Connection Band callback status=%d", (uint8_t *)v4, 8u);
  }
  if (_os_feature_enabled_impl())
  {
    if (qword_1009F8130 != -1) {
      dispatch_once(&qword_1009F8130, &stru_1009A6F98);
    }
    sub_1002D236C(qword_1009F8128, a1);
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0x43u);
}

uint64_t sub_100330314(uint64_t a1, __int16 a2, char a3, int a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_100330398;
  v5[3] = &unk_1009A6878;
  __int16 v6 = a2;
  char v7 = a3;
  char v8 = a4;
  return sub_10001A7D4(a1, 67, a4, v5, 0);
}

uint64_t sub_100330398()
{
  return sub_1001FE618();
}

uint64_t sub_1003303C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_100197A08(a2);
  char v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 1408);

  return v8(a1, v7, a3, a4);
}

uint64_t sub_100330440(int a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "HRB Write Scan Enable callback status=%d", (uint8_t *)v4, 8u);
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0x44u);
}

uint64_t sub_100330518(uint64_t a1, char a2, char a3, int a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_10033059C;
  v5[3] = &unk_1009A69D8;
  char v6 = a2;
  char v7 = a3;
  char v8 = a4;
  return sub_10001A7D4(a1, 68, a4, v5, 0);
}

uint64_t sub_10033059C()
{
  return sub_1001FE6A4();
}

uint64_t sub_1003305C4(int a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "HRB Write Page Scan Activity callback status=%d", (uint8_t *)v4, 8u);
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0x45u);
}

uint64_t sub_10033069C(uint64_t a1, __int16 a2, __int16 a3, int a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_100330720;
  v5[3] = &unk_1009A6C48;
  __int16 v6 = a2;
  __int16 v7 = a3;
  char v8 = a4;
  return sub_10001A7D4(a1, 69, a4, v5, 0);
}

uint64_t sub_100330720()
{
  return sub_1001FE730();
}

uint64_t sub_100330748(int a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "HRB Set AFH Host Channle Classification callback status=%d", (uint8_t *)v4, 8u);
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0x47u);
}

uint64_t sub_100330820(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_1003308A4;
  v7[3] = &unk_1009A6C28;
  char v8 = a2;
  void v7[4] = a3;
  void v7[5] = a4;
  void v7[6] = a5;
  char v9 = a6;
  return sub_10001A7D4(a1, 71, a6, v7, 0);
}

uint64_t sub_1003308A4()
{
  return sub_1001FE7BC();
}

uint64_t sub_1003308D0(int a1, int a2, int a3, char a4, int a5, int *a6, int *a7, int *a8, char a9)
{
  unsigned __int8 v17 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v22[0] = 67109888;
    v22[1] = a1;
    __int16 v23 = 1024;
    int v24 = a2;
    __int16 v25 = 1024;
    int v26 = a3;
    __int16 v27 = 1024;
    int v28 = a5;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Get Essential Power Database Entries status=%d vscVersion=%d, countryCode=%d, pCap=%d", (uint8_t *)v22, 0x1Au);
  }
  LOBYTE(xmmword_100A121A0) = a2;
  BYTE1(xmmword_100A121A0) = a3;
  BYTE2(xmmword_100A121A0) = a4;
  BYTE3(xmmword_100A121A0) = a5;
  int v18 = *a6;
  BYTE8(xmmword_100A121A0) = *((unsigned char *)a6 + 4);
  DWORD1(xmmword_100A121A0) = v18;
  int v19 = *a7;
  BYTE13(xmmword_100A121A0) = *((unsigned char *)a7 + 4);
  *(_DWORD *)((char *)&xmmword_100A121A0 + 9) = v19;
  int v20 = *a8;
  BYTE2(xmmword_100A121B0) = *((unsigned char *)a8 + 4);
  *(_DWORD *)((char *)&xmmword_100A121A0 + 14) = v20;
  BYTE3(xmmword_100A121B0) = a9;
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0x48u);
}

uint64_t sub_100330A4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  _DWORD v12[2] = sub_100330B20;
  _OWORD v12[3] = &unk_1009A6C68;
  void v12[4] = a2;
  void v12[5] = a3;
  void v12[6] = a4;
  void v12[7] = a5;
  unsigned __int8 v13 = a10;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  _DWORD v11[2] = sub_100330B58;
  v11[3] = &unk_1009A6C88;
  void v11[4] = a2;
  void v11[5] = a6;
  void v11[6] = a3;
  void v11[7] = a4;
  v11[8] = a7;
  v11[9] = a8;
  v11[10] = a9;
  v11[11] = a5;
  return sub_10001A7D4(a1, 72, a10, v12, v11);
}

uint64_t sub_100330B20()
{
  return sub_1001FE848();
}

uint64_t sub_100330B58(uint64_t result)
{
  **(unsigned char **)(result + 32) = xmmword_100A121A0;
  **(unsigned char **)(result + 40) = BYTE1(xmmword_100A121A0);
  **(unsigned char **)(result + 48) = BYTE2(xmmword_100A121A0);
  **(unsigned char **)(result + 56) = BYTE3(xmmword_100A121A0);
  uint64_t v1 = *(void *)(result + 64);
  int v2 = DWORD1(xmmword_100A121A0);
  *(unsigned char *)(v1 + 4) = BYTE8(xmmword_100A121A0);
  *(_DWORD *)uint64_t v1 = v2;
  uint64_t v3 = *(void *)(result + 72);
  int v4 = *(_DWORD *)((char *)&xmmword_100A121A0 + 9);
  *(unsigned char *)(v3 + 4) = BYTE13(xmmword_100A121A0);
  *(_DWORD *)uint64_t v3 = v4;
  uint64_t v5 = *(void *)(result + 80);
  int v6 = *(_DWORD *)((char *)&xmmword_100A121A0 + 14);
  *(unsigned char *)(v5 + 4) = BYTE2(xmmword_100A121B0);
  *(_DWORD *)uint64_t v5 = v6;
  **(unsigned char **)(result + 88) = BYTE3(xmmword_100A121B0);
  return result;
}

uint64_t sub_100330BDC(int a1, __int16 a2, char a3, char a4, char a5, char a6, char a7, char a8, int a9)
{
  char v15 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v20 = a1;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "HRB Read Enhanced Transmit Power Level callback status=%d", buf, 8u);
  }
  LOWORD(xmmword_100A121A0) = a2;
  BYTE2(xmmword_100A121A0) = a3;
  BYTE3(xmmword_100A121A0) = a4;
  BYTE4(xmmword_100A121A0) = a5;
  BYTE5(xmmword_100A121A0) = a6;
  BYTE6(xmmword_100A121A0) = a7;
  BYTE7(xmmword_100A121A0) = a8;
  DWORD2(xmmword_100A121A0) = a9;
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0x4Bu);
}

uint64_t sub_100330D40(uint64_t a1, __int16 a2, char a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10, long long a11, uint64_t a12)
{
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  void v18[2] = sub_100330E20;
  v18[3] = &unk_1009A6878;
  __int16 v19 = a2;
  char v20 = a3;
  char v21 = a4;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  _DWORD v13[2] = sub_100330E48;
  v13[3] = &unk_1009A6CA8;
  v13[4] = a5;
  void v13[5] = a6;
  void v13[6] = a7;
  void v13[7] = a8;
  long long v14 = a9;
  long long v15 = a10;
  long long v16 = a11;
  uint64_t v17 = a12;
  return sub_10001A7D4(a1, 75, a4, v18, v13);
}

uint64_t sub_100330E20()
{
  return sub_1001FE8D4();
}

uint64_t sub_100330E48(uint64_t result)
{
  uint64_t v1 = *(unsigned char **)(result + 40);
  **(_WORD **)(result + 32) = xmmword_100A121A0;
  unsigned char *v1 = BYTE2(xmmword_100A121A0);
  **(unsigned char **)(result + 48) = BYTE3(xmmword_100A121A0);
  **(unsigned char **)(result + 56) = BYTE4(xmmword_100A121A0);
  **(unsigned char **)(result + 64) = BYTE5(xmmword_100A121A0);
  **(unsigned char **)(result + 72) = BYTE6(xmmword_100A121A0);
  **(unsigned char **)(result + 80) = BYTE7(xmmword_100A121A0);
  **(unsigned char **)(result + 88) = BYTE8(xmmword_100A121A0);
  **(unsigned char **)(result + 96) = BYTE9(xmmword_100A121A0);
  **(unsigned char **)(result + 104) = BYTE10(xmmword_100A121A0);
  **(unsigned char **)(result + 112) = BYTE11(xmmword_100A121A0);
  return result;
}

uint64_t sub_100330ED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v18 = sub_100197A08(a2);
  __int16 v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 1456);

  return v19(a1, v18, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_100330FA4(int a1, uint64_t *a2, long long *a3)
{
  int v6 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v16[0] = 67109120;
    v16[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "HRB Read AFH Channel Map callback status=%d", (uint8_t *)v16, 8u);
  }
  if (!a1)
  {
    uint64_t v7 = *a2;
    WORD4(xmmword_100A121A0) = *((_WORD *)a2 + 4);
    *(void *)&xmmword_100A121A0 = v7;
    long long v8 = a3[4];
    long long v9 = a3[5];
    long long v10 = a3[3];
    *(_OWORD *)((char *)&dword_100A121C8 + 2) = a3[2];
    *(_OWORD *)((char *)&dword_100A121F8 + 2) = v9;
    *(_OWORD *)((char *)&dword_100A121E8 + 2) = v8;
    *(long long *)((char *)&xmmword_100A121D0 + 10) = v10;
    long long v11 = a3[8];
    long long v12 = a3[9];
    long long v13 = a3[7];
    *(_OWORD *)((char *)&dword_100A12208 + 2) = a3[6];
    *(_OWORD *)((char *)&dword_100A12238 + 2) = v12;
    *(_OWORD *)((char *)&dword_100A12228 + 2) = v11;
    *(_OWORD *)((char *)&dword_100A12218 + 2) = v13;
    long long v14 = *a3;
    *(long long *)((char *)&xmmword_100A121B0 + 10) = a3[1];
    *(long long *)((char *)&xmmword_100A121A0 + 10) = v14;
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0x46u);
}

uint64_t sub_1003310E4(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, int a5)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_1003311A4;
  v7[3] = &unk_1009A69D8;
  __int16 v8 = a2;
  char v9 = a5;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_1003311C8;
  v6[3] = &unk_100998260;
  void v6[4] = a3;
  void v6[5] = a4;
  return sub_10001A7D4(a1, 70, a5, v7, v6);
}

uint64_t sub_1003311A4()
{
  return sub_1001FE960();
}

__n128 sub_1003311C8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = xmmword_100A121A0;
  *(_WORD *)(v1 + 8) = WORD4(xmmword_100A121A0);
  *(void *)uint64_t v1 = v2;
  uint64_t v3 = *(void *)(a1 + 40);
  long long v4 = *(long long *)((char *)&xmmword_100A121B0 + 10);
  *(_OWORD *)uint64_t v3 = *(long long *)((char *)&xmmword_100A121A0 + 10);
  *(_OWORD *)(v3 + 16) = v4;
  long long v5 = *(_OWORD *)((char *)&dword_100A121C8 + 2);
  long long v6 = *(long long *)((char *)&xmmword_100A121D0 + 10);
  long long v7 = *(_OWORD *)((char *)&dword_100A121F8 + 2);
  *(_OWORD *)(v3 + 64) = *(_OWORD *)((char *)&dword_100A121E8 + 2);
  *(_OWORD *)(v3 + 80) = v7;
  *(_OWORD *)(v3 + 32) = v5;
  *(_OWORD *)(v3 + 48) = v6;
  __n128 result = *(__n128 *)((char *)&dword_100A12208 + 2);
  long long v9 = *(_OWORD *)((char *)&dword_100A12218 + 2);
  long long v10 = *(_OWORD *)((char *)&dword_100A12238 + 2);
  *(_OWORD *)(v3 + 128) = *(_OWORD *)((char *)&dword_100A12228 + 2);
  *(_OWORD *)(v3 + 144) = v10;
  *(__n128 *)(v3 + 96) = result;
  *(_OWORD *)(v3 + 112) = v9;
  return result;
}

uint64_t sub_100331228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_100197A08(a2);
  long long v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 1472);

  return v10(a1, v9, a3, a4, a5);
}

uint64_t sub_1003312B0(int a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "HRB Read Limit Channel Map callback status=%d", (uint8_t *)v4, 8u);
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0x49u);
}

uint64_t sub_100331388(uint64_t a1, char a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_100331400;
  void v4[3] = &unk_1009A66D8;
  char v5 = a2;
  char v6 = a3;
  return sub_10001A7D4(a1, 73, a3, v4, 0);
}

uint64_t sub_100331400()
{
  return sub_1001FE9EC();
}

uint64_t sub_100331424(int a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "HRB Set Band Edges callback status=%d", (uint8_t *)v4, 8u);
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0x4Au);
}

uint64_t sub_1003314FC(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_100331580;
  v7[3] = &unk_1009A6C28;
  char v8 = a2;
  void v7[4] = a3;
  void v7[5] = a4;
  void v7[6] = a5;
  char v9 = a6;
  return sub_10001A7D4(a1, 74, a6, v7, 0);
}

uint64_t sub_100331580()
{
  return sub_1001FEA78();
}

uint64_t sub_1003315AC(int a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Enhanced Tx Test callback status=%d", (uint8_t *)v4, 8u);
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0x4Cu);
}

uint64_t sub_100331684(uint64_t a1, uint64_t a2, char a3, char a4, char a5, char a6, uint64_t a7, char a8, char a9, char a10, char a11, __int16 a12, char a13, char a14, unsigned __int8 a15)
{
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  _DWORD v16[2] = sub_100331750;
  v16[3] = &unk_1009A6698;
  char v18 = a3;
  char v19 = a4;
  char v20 = a5;
  char v21 = a6;
  void v16[4] = a2;
  void v16[5] = a7;
  char v22 = a8;
  char v23 = a9;
  char v24 = a10;
  char v25 = a11;
  __int16 v17 = a12;
  char v26 = a13;
  char v27 = a14;
  unsigned __int8 v28 = a15;
  return sub_10001A7D4(a1, 76, a15, v16, 0);
}

uint64_t sub_100331750(uint64_t a1)
{
  return sub_1001FEB04(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 50));
}

uint64_t sub_1003317C4(uint64_t a1, uint64_t a2, __int16 a3, char a4, char a5, char a6, char a7, char a8, char a9, char a10, __int16 a11, unsigned __int8 a12)
{
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  _DWORD v13[2] = sub_100331874;
  v13[3] = &unk_1009A6978;
  v13[4] = a2;
  __int16 v14 = a3;
  char v16 = a4;
  char v17 = a5;
  char v18 = a6;
  char v19 = a7;
  char v20 = a8;
  char v21 = a9;
  char v22 = a10;
  __int16 v15 = a11;
  unsigned __int8 v23 = a12;
  return sub_10001A7D4(a1, 77, a12, v13, 0);
}

uint64_t sub_100331874(uint64_t a1)
{
  return sub_1001FEBC0(*(void *)(a1 + 32), *(unsigned __int16 *)(a1 + 40));
}

uint64_t sub_1003318E4(int a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Enhanced Rx Test callback status=%d", (uint8_t *)v4, 8u);
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0x4Eu);
}

uint64_t sub_1003319BC(uint64_t a1, char a2, char a3, char a4, char a5, char a6, char a7, char a8, char a9, char a10, char a11, __int16 a12, unsigned __int8 a13)
{
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  void v14[2] = sub_100331A74;
  v14[3] = &unk_1009A6A38;
  char v16 = a2;
  char v17 = a3;
  char v18 = a4;
  char v19 = a5;
  char v20 = a6;
  char v21 = a7;
  char v22 = a8;
  char v23 = a9;
  char v24 = a10;
  char v25 = a11;
  __int16 v15 = a12;
  unsigned __int8 v26 = a13;
  return sub_10001A7D4(a1, 78, a13, v14, 0);
}

uint64_t sub_100331A74(uint64_t a1)
{
  return sub_1001FEC64(*(unsigned __int8 *)(a1 + 34), *(unsigned __int8 *)(a1 + 35));
}

uint64_t sub_100331AE4(int a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Advanced Sniff Mode callback status=%d", (uint8_t *)v4, 8u);
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0x4Fu);
}

uint64_t sub_100331BBC(uint64_t a1, __int16 a2, __int16 a3, char a4, char a5, char a6, __int16 a7, __int16 a8, __int16 a9, __int16 a10, __int16 a11, __int16 a12, char a13, char a14, unsigned __int8 a15)
{
  __int16 v20 = a12;
  __int16 v21 = a11;
  __int16 v22 = a10;
  if (*(unsigned char *)(a1 + 1452))
  {
    __int16 v26 = a3;
    char v27 = a4;
    char v23 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
    {
      int v24 = *(unsigned __int8 *)(a1 + 1453);
      *(_DWORD *)std::string buf = 67109120;
      int v44 = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Advanced Sniff Mode Override MaxRetryInFrames=%d", buf, 8u);
    }
    a5 = *(unsigned char *)(a1 + 1453);
    a4 = v27;
    __int16 v20 = a12;
    a3 = v26;
    __int16 v21 = a11;
    __int16 v22 = a10;
  }
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472;
  void v28[2] = sub_100331D68;
  v28[3] = &unk_1009A6CC8;
  __int16 v29 = a2;
  __int16 v30 = a3;
  char v37 = a4;
  char v38 = a5;
  char v39 = a6;
  __int16 v31 = a7;
  __int16 v32 = a8;
  __int16 v33 = a9;
  __int16 v34 = v22;
  __int16 v35 = v21;
  __int16 v36 = v20;
  char v40 = a13;
  char v41 = a14;
  unsigned __int8 v42 = a15;
  return sub_10001A7D4(a1, 79, a15, v28, 0);
}

uint64_t sub_100331D68(uint64_t a1)
{
  return sub_1001FED10(*(unsigned __int16 *)(a1 + 32), *(unsigned __int16 *)(a1 + 34));
}

uint64_t sub_100331DE0(int a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Exit Advanced Sniff Mode callback status=%d", (uint8_t *)v4, 8u);
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0x50u);
}

uint64_t sub_100331EB8(uint64_t a1, __int16 a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_100331F30;
  void v4[3] = &unk_1009A69D8;
  __int16 v5 = a2;
  char v6 = a3;
  return sub_10001A7D4(a1, 80, a3, v4, 0);
}

uint64_t sub_100331F30()
{
  return sub_1001FEDCC();
}

uint64_t sub_100331F54(int a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Advanced Sniff Reconfigure callback status=%d", (uint8_t *)v4, 8u);
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0x51u);
}

uint64_t sub_10033202C(uint64_t a1, __int16 a2, __int16 a3, __int16 a4, __int16 a5, char a6, __int16 a7, int a8)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_1003320BC;
  v9[3] = &unk_1009A6998;
  __int16 v10 = a2;
  __int16 v11 = a3;
  __int16 v12 = a4;
  __int16 v13 = a5;
  char v15 = a6;
  __int16 v14 = a7;
  char v16 = a8;
  return sub_10001A7D4(a1, 81, a8, v9, 0);
}

uint64_t sub_1003320BC()
{
  return sub_1001FEE58();
}

uint64_t sub_1003320F4(int a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Set Peripheral Max Age callback status=%d", (uint8_t *)v4, 8u);
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0x52u);
}

uint64_t sub_1003321CC(uint64_t a1, __int16 a2, char a3, int a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_100332250;
  v5[3] = &unk_1009A6878;
  __int16 v6 = a2;
  char v7 = a3;
  char v8 = a4;
  return sub_10001A7D4(a1, 82, a4, v5, 0);
}

uint64_t sub_100332250()
{
  return sub_1001FEEE4();
}

uint64_t sub_100332278(int a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "LMP Flow callback status=%d", (uint8_t *)v4, 8u);
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0x53u);
}

uint64_t sub_100332350(uint64_t a1, __int16 a2, char a3, int a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1003323D4;
  v5[3] = &unk_1009A6878;
  __int16 v6 = a2;
  char v7 = a3;
  char v8 = a4;
  return sub_10001A7D4(a1, 83, a4, v5, 0);
}

uint64_t sub_1003323D4()
{
  return sub_1001FEF70();
}

uint64_t sub_1003323FC(int a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "AoS Empty Packet Report callback status=%d", (uint8_t *)v4, 8u);
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0x54u);
}

uint64_t sub_1003324D4(uint64_t a1, __int16 a2, char a3, int a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_100332558;
  v5[3] = &unk_1009A6878;
  __int16 v6 = a2;
  char v7 = a3;
  char v8 = a4;
  return sub_10001A7D4(a1, 84, a4, v5, 0);
}

uint64_t sub_100332558()
{
  return sub_1001FEFFC();
}

uint64_t sub_100332580(int a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Control AoS callback status=%d", (uint8_t *)v4, 8u);
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0x55u);
}

uint64_t sub_100332658(uint64_t a1, char a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_1003326D0;
  void v4[3] = &unk_1009A66D8;
  char v5 = a2;
  char v6 = a3;
  return sub_10001A7D4(a1, 85, a3, v4, 0);
}

uint64_t sub_1003326D0()
{
  return sub_1001FF088();
}

uint64_t sub_1003326F4(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x56u);
}

uint64_t sub_100332754(uint64_t a1, void *a2, char a3, char a4, char a5)
{
  id v9 = a2;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2520))(a1))
  {
    uint64_t v17 = 0;
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009A6EB8);
    }
    __int16 v10 = off_1009F7EB8;
    sub_1000305AC(v18, v9);
    if (sub_1006856B8((uint64_t)v10, v18, &v17))
    {
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      _DWORD v13[2] = sub_100332900;
      v13[3] = &unk_1009A6598;
      v13[4] = v17;
      char v14 = a3;
      char v15 = a4;
      char v16 = a5;
      uint64_t v11 = sub_10001A7D4(a1, 86, 1, v13, 0);
    }
    else
    {
      uint64_t v11 = 7;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }

  return v11;
}

void sub_1003328E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100332900()
{
  return sub_1001FA83C();
}

uint64_t sub_10033292C(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x57u);
}

uint64_t sub_10033298C(uint64_t a1, char a2, char a3, char a4, int a5, char a6)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2528))(a1);
  if (result)
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    _DWORD v13[2] = sub_100332A78;
    v13[3] = &unk_1009A6738;
    char v15 = a2;
    char v16 = a3;
    char v17 = a4;
    int v14 = a5;
    char v18 = a6;
    return sub_10001A7D4(a1, 87, 1, v13, 0);
  }
  return result;
}

uint64_t sub_100332A78()
{
  return sub_1001FA8C8();
}

uint64_t sub_100332AA4(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x5Au);
}

uint64_t sub_100332B04(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_100332B7C;
  v3[3] = &unk_1009A6618;
  char v4 = a2;
  return sub_10001A7D4(a1, 90, 1, v3, 0);
}

uint64_t sub_100332B7C()
{
  return sub_10020152C();
}

uint64_t sub_100332B94(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x5Cu);
}

uint64_t sub_100332BF4(uint64_t a1, char a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_100332C6C;
  void v4[3] = &unk_1009A66D8;
  char v5 = a2;
  char v6 = a3;
  return sub_10001A7D4(a1, 92, a3, v4, 0);
}

uint64_t sub_100332C6C()
{
  return sub_1001FF114();
}

uint64_t sub_100332C90(int a1, int a2, int a3, int a4)
{
  char v8 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v10[0] = 67109632;
    v10[1] = a2;
    __int16 v11 = 1024;
    int v12 = a3;
    __int16 v13 = 1024;
    int v14 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "ePA GPIO state: enabled %d, num %d, sleep %d", (uint8_t *)v10, 0x14u);
  }
  LOBYTE(xmmword_100A121A0) = a2;
  BYTE1(xmmword_100A121A0) = a3;
  BYTE2(xmmword_100A121A0) = a4;
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0x5Du);
}

uint64_t sub_100332DAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_100332E6C;
  v7[3] = &unk_1009A6618;
  char v8 = a5;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_100332E88;
  v6[3] = &unk_1009A12D0;
  void v6[4] = a2;
  void v6[5] = a3;
  void v6[6] = a4;
  return sub_10001A7D4(a1, 93, a5, v7, v6);
}

uint64_t sub_100332E6C()
{
  return sub_1001FF1A0();
}

unsigned char **sub_100332E88(unsigned char **result)
{
  *result[4] = xmmword_100A121A0;
  *result[5] = BYTE1(xmmword_100A121A0);
  *result[6] = BYTE2(xmmword_100A121A0);
  return result;
}

uint64_t sub_100332EB8(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xFEu);
}

uint64_t sub_100332F18(uint64_t a1, char a2, char a3, char a4, char a5)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_100332F9C;
  v6[3] = &unk_1009A6878;
  char v7 = a2;
  char v8 = a3;
  char v9 = a4;
  char v10 = a5;
  return sub_10001A7D4(a1, 254, 1, v6, 0);
}

uint64_t sub_100332F9C()
{
  return sub_1002015B8();
}

uint64_t sub_100332FC4(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x5Eu);
}

uint64_t sub_100333024(uint64_t a1, uint64_t a2, char a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_1003330A0;
  void v4[3] = &unk_1009A65D8;
  void v4[4] = a2;
  char v5 = a3;
  return sub_10001A7D4(a1, 94, 1, v4, 0);
}

uint64_t sub_1003330A0()
{
  return sub_100201644();
}

uint64_t sub_1003330C0(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xB1u);
}

uint64_t sub_100333120(uint64_t a1, char a2, char a3, int a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1003331A4;
  v5[3] = &unk_1009A69D8;
  char v6 = a2;
  char v7 = a3;
  char v8 = a4;
  return sub_10001A7D4(a1, 177, a4, v5, 0);
}

uint64_t sub_1003331A4()
{
  return sub_1001FC0D0();
}

uint64_t sub_1003331CC(int a1, const void *a2, size_t __n)
{
  *(_DWORD *)((char *)&xmmword_100A121A0 + 9) = 0;
  *(void *)((char *)&xmmword_100A121A0 + 1) = 0;
  LOBYTE(xmmword_100A121A0) = __n;
  if (!a1 && __n <= 0xC) {
    memcpy((char *)&xmmword_100A121A0 + 1, a2, __n);
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xB3u);
}

uint64_t sub_10033325C(int a1, const void *a2, size_t __n)
{
  unk_100A1228C = 0u;
  *(_OWORD *)((char *)&dword_100A12280 + 1) = 0u;
  *(_OWORD *)((char *)&dword_100A12270 + 1) = 0u;
  *(_OWORD *)((char *)&dword_100A12260 + 1) = 0u;
  *(_OWORD *)((char *)&dword_100A12250 + 1) = 0u;
  *(_OWORD *)((char *)&dword_100A12240 + 1) = 0u;
  *(_OWORD *)((char *)&dword_100A12230 + 1) = 0u;
  *(_OWORD *)((char *)&dword_100A12220 + 1) = 0u;
  *(_OWORD *)((char *)&dword_100A12210 + 1) = 0u;
  *(_OWORD *)((char *)&dword_100A12200 + 1) = 0u;
  *(_OWORD *)((char *)&dword_100A121F0 + 1) = 0u;
  *(_OWORD *)((char *)&dword_100A121E0 + 1) = 0u;
  *(long long *)((char *)&xmmword_100A121D0 + 1) = 0u;
  *(_OWORD *)((char *)&dword_100A121C0 + 1) = 0u;
  *(long long *)((char *)&xmmword_100A121B0 + 1) = 0u;
  *(long long *)((char *)&xmmword_100A121A0 + 1) = 0u;
  LOBYTE(xmmword_100A121A0) = __n;
  if (!a1 && __n <= 0xFB) {
    memcpy((char *)&xmmword_100A121A0 + 1, a2, __n);
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xB4u);
}

uint64_t sub_100333328(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, int a5)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_1003333E8;
  v7[3] = &unk_1009A69D8;
  __int16 v8 = a2;
  char v9 = a5;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_10033340C;
  v6[3] = &unk_100998260;
  void v6[4] = a3;
  void v6[5] = a4;
  return sub_10001A7D4(a1, 179, a5, v7, v6);
}

uint64_t sub_1003333E8()
{
  return sub_1002016D0();
}

void sub_10033340C(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (xmmword_100A121A0 > 0xCu)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_1007577BC();
      }
    }
    else
    {
      **(unsigned char **)(a1 + 40) = xmmword_100A121A0;
      uint64_t v1 = *(void **)(a1 + 32);
      size_t v2 = xmmword_100A121A0;
      memcpy(v1, (char *)&xmmword_100A121A0 + 1, v2);
    }
  }
}

uint64_t sub_1003334A0(uint64_t a1, __int16 a2, char a3, uint64_t a4, uint64_t a5, int a6)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_100333560;
  v8[3] = &unk_1009A6878;
  __int16 v9 = a2;
  char v10 = a3;
  char v11 = a6;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_100333588;
  v7[3] = &unk_100998260;
  void v7[4] = a4;
  void v7[5] = a5;
  return sub_10001A7D4(a1, 180, a6, v8, v7);
}

uint64_t sub_100333560()
{
  return sub_10020175C();
}

void sub_100333588(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (xmmword_100A121A0 > 0xFBu)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_100757828();
      }
    }
    else
    {
      **(unsigned char **)(a1 + 40) = xmmword_100A121A0;
      uint64_t v1 = *(void **)(a1 + 32);
      size_t v2 = xmmword_100A121A0;
      memcpy(v1, (char *)&xmmword_100A121A0 + 1, v2);
    }
  }
}

uint64_t sub_10033361C(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x17u);
}

uint64_t sub_10033367C(uint64_t a1, char a2, char a3, int a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_100333700;
  v5[3] = &unk_1009A69D8;
  char v6 = a2;
  char v7 = a3;
  char v8 = a4;
  return sub_10001A7D4(a1, 23, a4, v5, 0);
}

uint64_t sub_100333700()
{
  return sub_1002017E8();
}

uint64_t sub_100333730(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x60u);
}

uint64_t sub_100333790(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_100333808;
  v3[3] = &unk_1009A6618;
  char v4 = a2;
  return sub_10001A7D4(a1, 96, 1, v3, 0);
}

uint64_t sub_100333808()
{
  return sub_1001FF22C();
}

uint64_t sub_100333820(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  __int16 v13 = 0;
  int v14 = 0;
  sub_1000335D8(&v13, a2, a3);
  if (a3 >= 3)
  {
    char v5 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *a2;
      unsigned int v7 = __rev16(*(unsigned __int16 *)(a2 + 1));
      *(_DWORD *)std::string buf = 67109376;
      int v16 = v6;
      __int16 v17 = 1024;
      unsigned int v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "HostwakeReport: type(%d), reasonCode(%d)", buf, 0xEu);
    }
  }
  uint64_t v8 = sub_1004AF8EC();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3321888768;
  _DWORD v10[2] = sub_100333A18;
  v10[3] = &unk_1009A6CE8;
  char v11 = &off_100998428;
  int v12 = v14;
  if (v14) {
    sub_100037354((uint64_t)v14);
  }
  sub_100013018(v8, v10);
  char v11 = &off_100998428;
  if (v12) {
    sub_1000368F4(v12);
  }
  __int16 v13 = &off_100998428;
  if (v14) {
    sub_1000368F4(v14);
  }
  return 0;
}

void sub_1003339C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, atomic_uint *a14, uint64_t a15, atomic_uint *a16)
{
  if (a14) {
    sub_1000368F4(a14);
  }
  if (a16) {
    sub_1000368F4(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_100333A18(uint64_t a1)
{
  uint64_t v2 = sub_1003731C0();
  uint64_t v3 = *(atomic_uint **)(a1 + 40);
  char v4 = &off_100998428;
  char v5 = v3;
  if (v3) {
    sub_100037354((uint64_t)v3);
  }
  (*(void (**)(uint64_t, uint64_t (***)(), void, const char *, const char *, const char *))(*(void *)v2 + 32))(v2, &v4, 0, "", "", "");
  char v4 = &off_100998428;
  if (v5) {
    sub_1000368F4(v5);
  }
}

void sub_100333AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10) {
    sub_1000368F4(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100333AEC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = &off_100998428;
  *(void *)(a1 + 40) = v3;
  if (v3) {
    sub_100037354(v3);
  }
}

void sub_100333B20(uint64_t a1)
{
  *(void *)(a1 + 32) = &off_100998428;
  uint64_t v1 = *(atomic_uint **)(a1 + 40);
  if (v1) {
    sub_1000368F4(v1);
  }
}

uint64_t sub_100333B50(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x61u);
}

uint64_t sub_100333BB0(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_100333C28;
  v3[3] = &unk_1009A6618;
  char v4 = a2;
  return sub_10001A7D4(a1, 97, 1, v3, 0);
}

uint64_t sub_100333C28()
{
  return sub_1001FF2B8();
}

uint64_t sub_100333C40(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x62u);
}

uint64_t sub_100333CA0(uint64_t a1, int a2, char a3, __int16 a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_100333D20;
  v5[3] = &unk_1009A67F8;
  int v6 = a2;
  char v8 = a3;
  __int16 v7 = a4;
  return sub_10001A7D4(a1, 98, 1, v5, 0);
}

uint64_t sub_100333D20()
{
  return sub_1001FF344();
}

uint64_t sub_100333D44(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x63u);
}

uint64_t sub_100333DA4(uint64_t a1, __int16 a2, __int16 a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_100333E20;
  void v4[3] = &unk_1009A6878;
  __int16 v5 = a2;
  __int16 v6 = a3;
  return sub_10001A7D4(a1, 99, 1, v4, 0);
}

uint64_t sub_100333E20()
{
  return sub_1001FF4E8();
}

uint64_t sub_100333E40(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x64u);
}

uint64_t sub_100333EA0(uint64_t a1, __int16 a2, char a3, char a4, char a5, uint64_t a6, char a7, char a8, __int16 a9, __int16 a10, char a11, __int16 a12, __int16 a13)
{
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  void v14[2] = sub_100333F58;
  v14[3] = &unk_1009A6D18;
  __int16 v15 = a2;
  char v20 = a3;
  char v21 = a4;
  char v22 = a5;
  void v14[4] = a6;
  char v23 = a7;
  char v24 = a8;
  __int16 v16 = a9;
  __int16 v17 = a10;
  char v25 = a11;
  __int16 v18 = a12;
  __int16 v19 = a13;
  return sub_10001A7D4(a1, 100, 1, v14, 0);
}

uint64_t sub_100333F58(uint64_t a1)
{
  return sub_1001FB8C0(*(unsigned __int16 *)(a1 + 40), *(unsigned __int8 *)(a1 + 50));
}

uint64_t sub_100333FC4(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x66u);
}

uint64_t sub_100334024(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10033409C;
  v3[3] = &unk_1009A6618;
  char v4 = a2;
  return sub_10001A7D4(a1, 102, 1, v3, 0);
}

uint64_t sub_10033409C()
{
  return sub_100200BB8();
}

uint64_t sub_1003340B4(int a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "enable2MBPHYForDenylistedDevicesCB status %d", (uint8_t *)v4, 8u);
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0x65u);
}

uint64_t sub_10033418C(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_100334204;
  v3[3] = &unk_1009A6618;
  char v4 = a2;
  return sub_10001A7D4(a1, 101, 1, v3, 0);
}

uint64_t sub_100334204()
{
  return sub_100201874();
}

uint64_t sub_10033421C(int a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "enableWirelessSplitterCB status %d", (uint8_t *)v4, 8u);
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0x67u);
}

uint64_t sub_1003342F4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, __int16 a5, __int16 a6, __int16 a7, __int16 a8)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_100334380;
  v9[3] = &unk_1009A6938;
  void v9[4] = a3;
  void v9[5] = a4;
  char v14 = a2;
  __int16 v10 = a5;
  __int16 v11 = a6;
  __int16 v12 = a7;
  __int16 v13 = a8;
  return sub_10001A7D4(a1, 103, 1, v9, 0);
}

uint64_t sub_100334380(uint64_t a1)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t result = sub_10017E2D4(*(void *)(a1 + 32), &v4);
  if (!result)
  {
    uint64_t result = sub_10017E2D4(*(void *)(a1 + 40), &v3);
    if (!result) {
      return sub_100201944();
    }
  }
  return result;
}

uint64_t sub_1003343F8(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x68u);
}

uint64_t sub_100334458(uint64_t a1, __int16 a2, char a3, uint64_t a4, char a5, __int16 a6, char a7, char a8, char a9)
{
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  _DWORD v10[2] = sub_1003344F0;
  v10[3] = &unk_1009A65F8;
  __int16 v11 = a2;
  char v13 = a3;
  void v10[4] = a4;
  char v14 = a5;
  __int16 v12 = a6;
  char v15 = a7;
  char v16 = a8;
  char v17 = a9;
  return sub_10001A7D4(a1, 104, 1, v10, 0);
}

uint64_t sub_1003344F0(uint64_t a1)
{
  return sub_1001FF600(*(unsigned __int16 *)(a1 + 40));
}

uint64_t sub_100334544(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x72u);
}

uint64_t sub_1003345A4(uint64_t a1, __int16 a2, char a3, uint64_t a4, char a5, __int16 a6, char a7, char a8, char a9, char a10, char a11, uint64_t a12, uint64_t a13)
{
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  void v14[2] = sub_100334654;
  v14[3] = &unk_1009A6D38;
  __int16 v15 = a2;
  char v17 = a3;
  char v18 = a5;
  __int16 v16 = a6;
  char v19 = a7;
  char v20 = a8;
  char v21 = a9;
  char v22 = a10;
  char v23 = a11;
  void v14[4] = a4;
  void v14[5] = a12;
  void v14[6] = a13;
  return sub_10001A7D4(a1, 114, 1, v14, 0);
}

uint64_t sub_100334654(uint64_t a1)
{
  return sub_1001FFBD8(*(unsigned __int16 *)(a1 + 56), 0, *(unsigned __int8 *)(a1 + 60), *(void *)(a1 + 32));
}

uint64_t sub_1003346C0(uint64_t a1, __int16 a2, char a3, uint64_t a4, char a5, __int16 a6, char a7, char a8, char a9, char a10, char a11, uint64_t a12, uint64_t a13)
{
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  void v14[2] = sub_100334770;
  v14[3] = &unk_1009A6D38;
  __int16 v15 = a2;
  char v17 = a3;
  char v18 = a5;
  __int16 v16 = a6;
  char v19 = a7;
  char v20 = a8;
  char v21 = a9;
  char v22 = a10;
  char v23 = a11;
  void v14[4] = a4;
  void v14[5] = a12;
  void v14[6] = a13;
  return sub_10001A7D4(a1, 114, 1, v14, 0);
}

uint64_t sub_100334770(uint64_t a1)
{
  return sub_1001FFBD8(*(unsigned __int16 *)(a1 + 56), 1, *(unsigned __int8 *)(a1 + 60), *(void *)(a1 + 32));
}

uint64_t sub_1003347DC(uint64_t a1, __int16 a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_100334854;
  v3[3] = &unk_1009A66D8;
  __int16 v4 = a2;
  return sub_10001A7D4(a1, 114, 1, v3, 0);
}

uint64_t sub_100334854(uint64_t a1)
{
  __int16 v3 = 0;
  int v2 = 0;
  return sub_1001FFBD8(*(unsigned __int16 *)(a1 + 32), 2, 0, (uint64_t)&v2);
}

uint64_t sub_1003348B8(int a1, char a2, char a3, char a4, char a5)
{
  LOBYTE(xmmword_100A121A0) = a2;
  BYTE1(xmmword_100A121A0) = a3;
  BYTE2(xmmword_100A121A0) = a4;
  BYTE3(xmmword_100A121A0) = a5;
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x69u);
}

uint64_t sub_100334930(uint64_t a1, uint64_t a2, unsigned char *a3, unsigned char *a4, _WORD *a5)
{
  v18[0] = 0uLL;
  sub_10003AED0((uint64_t)v18, a1 + 72);
  __int16 v9 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    __int16 v10 = sub_10001AA04(a1, 105);
    *(_DWORD *)std::string buf = 136446210;
    *(void *)char v20 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Sending: %{public}s", buf, 0xCu);
  }
  if (sub_10001B700(a1, 105))
  {
    char v17 = 0;
    sub_10001B8E0(&v17);
    int v11 = sub_1001FF694();
    sub_10001B910(&v17);
    if (!v11)
    {
      if (qword_1009F8070 != -1) {
        dispatch_once(&qword_1009F8070, &stru_1009A6E78);
      }
      int v11 = sub_10001B918((uint64_t)off_1009F8068, 105);
      *a3 = BYTE1(xmmword_100A121A0);
      *a4 = BYTE2(xmmword_100A121A0);
      *a5 = BYTE3(xmmword_100A121A0);
    }
    memset((char *)&v18[1] + 8, 0, 56);
    if (BYTE1(xmmword_100A121A0) <= 0x64u)
    {
      if (BYTE1(xmmword_100A121A0))
      {
        if (BYTE1(xmmword_100A121A0) % 0x14u) {
          uint64_t v12 = BYTE1(xmmword_100A121A0) / 0x14u + 1;
        }
        else {
          uint64_t v12 = BYTE1(xmmword_100A121A0) / 0x14u;
        }
      }
      else
      {
        uint64_t v12 = 0;
      }
    }
    else
    {
      uint64_t v12 = 6;
    }
    *((_DWORD *)&v18[1] + v12 + 2) = 1;
    if (*a4)
    {
      if (BYTE3(xmmword_100A121A0) <= 0x64u)
      {
        if (BYTE3(xmmword_100A121A0))
        {
          if (BYTE3(xmmword_100A121A0) % 0x14u) {
            uint64_t v14 = BYTE3(xmmword_100A121A0) / 0x14u + 1;
          }
          else {
            uint64_t v14 = BYTE3(xmmword_100A121A0) / 0x14u;
          }
        }
        else
        {
          uint64_t v14 = 0;
        }
      }
      else
      {
        uint64_t v14 = 6;
      }
      *((_DWORD *)&v18[3] + v14 + 1) = 1;
    }
    *(_DWORD *)std::string buf = 1;
    *(_OWORD *)char v20 = *(_OWORD *)((char *)&v18[1] + 8);
    *(_OWORD *)&v20[12] = *(_OWORD *)((char *)&v18[2] + 4);
    v21[0] = *(_OWORD *)((char *)&v18[3] + 4);
    *(_OWORD *)((char *)v21 + 12) = v18[4];
    if (sub_100050530())
    {
      uint64_t v15 = sub_100050530();
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v15 + 200))(v15, buf);
    }
    sub_1000262B8(a1, 0x69u);
    uint64_t v13 = v11 != 0;
    sub_10001B8AC(&v17);
  }
  else
  {
    uint64_t v13 = 2;
  }
  sub_10003AFB4((uint64_t)v18);
  return v13;
}

void sub_100334BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100334C30(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x6Au);
}

uint64_t sub_100334C90(_DWORD *a1, unsigned int a2, __int16 a3, int a4, int a5, int a6, int a7, char a8, char a9, unsigned __int16 a10, unsigned __int16 a11, uint64_t a12, unsigned __int8 a13, uint64_t a14, uint64_t a15, char a16)
{
  if (!sub_100351F98()) {
    return 2;
  }
  __int16 v24 = a3 & 0xFFF0 | (a4 != 0) | (2 * (a5 != 0)) | (4 * (a6 != 0)) | (8 * (a7 != 0));
  uint64_t v25 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v25 + 256))(v25))
  {
    v58[0] = _NSConcreteStackBlock;
    v58[1] = 3221225472;
    v58[2] = sub_1003351D4;
    v58[3] = &unk_1009A6D58;
    __int16 v59 = a2;
    __int16 v60 = v24 & 0xFF1F | (32 * (a9 != 0)) | ((a10 != 0) << 6) | ((a11 != 0) << 7);
    char v63 = a4;
    __int16 v61 = a5;
    char v64 = a6;
    char v65 = a7;
    char v66 = a8;
    char v67 = a9;
    unsigned __int16 v62 = a11;
    unsigned __int8 v68 = a13;
    v58[4] = a12;
    v58[5] = a14;
    v58[6] = a15;
    char v69 = a16;
    __int16 v26 = v58;
    uint64_t v27 = (uint64_t)a1;
    uint64_t v28 = 108;
    return sub_10001A7D4(v27, v28, 1, v26, 0);
  }
  uint64_t v30 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v30 + 248))(v30))
  {
    v48[0] = _NSConcreteStackBlock;
    v48[1] = 3221225472;
    v48[2] = sub_1003352B0;
    v48[3] = &unk_1009A6A38;
    __int16 v49 = a2;
    __int16 v50 = v24 & 0xFF1F | (32 * (a9 != 0)) | ((a10 != 0) << 6) | ((a11 != 0) << 7);
    char v53 = a4;
    __int16 v51 = a5;
    char v54 = a6;
    char v55 = a7;
    char v56 = a8;
    char v57 = a9;
    unsigned __int16 v52 = a11;
    __int16 v26 = v48;
    uint64_t v27 = (uint64_t)a1;
    uint64_t v28 = 107;
    return sub_10001A7D4(v27, v28, 1, v26, 0);
  }
  v40[0] = _NSConcreteStackBlock;
  v40[1] = 3221225472;
  v40[2] = sub_10033536C;
  v40[3] = &unk_1009A67D8;
  __int16 v41 = a2;
  __int16 v42 = v24;
  char v44 = a4;
  __int16 v43 = a5;
  char v45 = a6;
  char v46 = a7;
  char v47 = a8;
  uint64_t v29 = sub_10001A7D4((uint64_t)a1, 106, 1, v40, 0);
  __int16 v33 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    __int16 v34 = sub_10001AA04((uint64_t)a1, 106);
    *(_DWORD *)std::string buf = 136446466;
    int v71 = v34;
    __int16 v72 = 1024;
    int v73 = v29;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "%{public}s returned with result: %d", buf, 0x12u);
  }
  uint64_t v35 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v35 + 352))(v35))
  {
    unsigned int v36 = a1[178];
    if (v36)
    {
      if (v36 <= 0x7CF && !v29)
      {
        unsigned int v37 = a9 != 0;
        if (a10) {
          v37 |= 2u;
        }
        uint64_t v29 = a11 ? v37 | 4 : v37;
        if (v29)
        {
          int v38 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 2472))(a1);
          uint64_t v39 = *(void *)a1;
          if (v38) {
            return (*(uint64_t (**)(_DWORD *, void, uint64_t, void, void, void, uint64_t, void, uint64_t, uint64_t, char))(v39 + 2840))(a1, a2, v29, a9, a10, a11, a12, a13, a14, a15, a16);
          }
          else {
            return (*(uint64_t (**)(_DWORD *, void, uint64_t, void, void, void))(v39 + 2832))(a1, a2, v29, a9, a10, a11);
          }
        }
      }
    }
  }
  return v29;
}

uint64_t sub_1003351D4(uint64_t a1)
{
  return sub_1001FF848(*(unsigned __int16 *)(a1 + 56), *(unsigned __int16 *)(a1 + 58), *(unsigned __int8 *)(a1 + 64), *(unsigned __int16 *)(a1 + 60), *(unsigned __int8 *)(a1 + 65), *(unsigned __int8 *)(a1 + 66), *(unsigned __int8 *)(a1 + 67));
}

uint64_t sub_100335250(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x6Cu);
}

uint64_t sub_1003352B0(uint64_t a1)
{
  return sub_1001FF7AC(*(unsigned __int16 *)(a1 + 32), *(unsigned __int16 *)(a1 + 34));
}

uint64_t sub_10033530C(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x6Bu);
}

uint64_t sub_10033536C()
{
  return sub_1001FF720();
}

uint64_t sub_1003353A0(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x6Du);
}

uint64_t sub_100335400(uint64_t a1, __int16 a2, char a3, char a4, __int16 a5, __int16 a6)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_100335488;
  v7[3] = &unk_1009A6738;
  __int16 v8 = a2;
  char v11 = a3;
  char v12 = a4;
  __int16 v9 = a5;
  __int16 v10 = a6;
  return sub_10001A7D4(a1, 109, 1, v7, 0);
}

uint64_t sub_100335488()
{
  return sub_1001FF904();
}

uint64_t sub_1003354B4(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x6Eu);
}

uint64_t sub_100335514(uint64_t a1, __int16 a2, char a3, char a4, __int16 a5, __int16 a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, char a11)
{
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  _DWORD v12[2] = sub_1003355B4;
  _OWORD v12[3] = &unk_1009A67B8;
  __int16 v13 = a2;
  char v16 = a3;
  char v17 = a4;
  __int16 v14 = a5;
  __int16 v15 = a6;
  char v18 = a8;
  void v12[4] = a7;
  void v12[5] = a9;
  void v12[6] = a10;
  char v19 = a11;
  return sub_10001A7D4(a1, 110, 1, v12, 0);
}

uint64_t sub_1003355B4(uint64_t a1)
{
  return sub_1001FF990(*(unsigned __int16 *)(a1 + 56), *(unsigned __int8 *)(a1 + 62), *(char *)(a1 + 63));
}

uint64_t sub_100335614(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x6Fu);
}

uint64_t sub_100335674(uint64_t a1, __int16 a2, char a3, char a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1003356F4;
  v5[3] = &unk_1009A6878;
  __int16 v6 = a2;
  char v7 = a3;
  char v8 = a4;
  return sub_10001A7D4(a1, 111, 1, v5, 0);
}

uint64_t sub_1003356F4()
{
  return sub_1001FFA34();
}

uint64_t sub_100335718(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x70u);
}

uint64_t sub_100335778(uint64_t a1, __int16 a2, char a3, char a4, char a5)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_1003357FC;
  v6[3] = &unk_1009A6C48;
  __int16 v7 = a2;
  char v8 = a3;
  char v9 = a4;
  char v10 = a5;
  return sub_10001A7D4(a1, 112, 1, v6, 0);
}

uint64_t sub_1003357FC()
{
  return sub_1001FFAC0();
}

uint64_t sub_100335824(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x71u);
}

uint64_t sub_100335884(uint64_t a1, __int16 a2, __int16 a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_100335900;
  void v4[3] = &unk_1009A6878;
  __int16 v5 = a2;
  __int16 v6 = a3;
  return sub_10001A7D4(a1, 113, 1, v4, 0);
}

uint64_t sub_100335900()
{
  return sub_1001FFB4C();
}

uint64_t sub_100335920(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x73u);
}

uint64_t sub_100335980(uint64_t a1, __int16 a2, char a3, char a4, uint64_t a5)
{
  if (!sub_100351F98()) {
    return 2;
  }
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  _DWORD v11[2] = sub_100335A44;
  v11[3] = &unk_1009A6998;
  __int16 v12 = a2;
  char v13 = a3;
  char v14 = a4;
  void v11[4] = a5;
  return sub_10001A7D4(a1, 115, 1, v11, 0);
}

uint64_t sub_100335A44()
{
  return sub_1001FFC8C();
}

uint64_t sub_100335A6C(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x74u);
}

uint64_t sub_100335ACC(uint64_t a1, __int16 a2, char a3, char a4, char a5, char a6)
{
  if (!sub_100351F98()) {
    return 2;
  }
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  _DWORD v13[2] = sub_100335B98;
  v13[3] = &unk_1009A6B08;
  __int16 v14 = a2;
  char v15 = a3;
  char v16 = a4;
  char v17 = a5;
  char v18 = a6;
  return sub_10001A7D4(a1, 116, 1, v13, 0);
}

uint64_t sub_100335B98()
{
  return sub_1001FFD18();
}

uint64_t sub_100335BC4(int a1, int a2, int a3)
{
  __int16 v6 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v8[0] = 67109376;
    v8[1] = a2;
    __int16 v9 = 1024;
    int v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Match Buffer Read : subOpcode %d, numEntries %d", (uint8_t *)v8, 0xEu);
  }
  LOBYTE(xmmword_100A121A0) = a2;
  BYTE1(xmmword_100A121A0) = a3;
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0x75u);
}

uint64_t sub_100335CC8(uint64_t a1, __int16 a2, uint64_t a3)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_100335D80;
  v5[3] = &unk_1009A66D8;
  __int16 v6 = a2;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_100335D98;
  void v4[3] = &unk_100997528;
  void v4[4] = a3;
  return sub_10001A7D4(a1, 117, 1, v5, v4);
}

uint64_t sub_100335D80()
{
  return sub_1001FFDA4();
}

uint64_t sub_100335D98(uint64_t result)
{
  **(unsigned char **)(result + 32) = BYTE1(xmmword_100A121A0);
  return result;
}

uint64_t sub_100335DAC(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x76u);
}

uint64_t sub_100335E0C(uint64_t a1, char a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_100335E84;
  void v4[3] = &unk_1009A66D8;
  char v5 = a2;
  char v6 = a3;
  return sub_10001A7D4(a1, 118, a3, v4, 0);
}

uint64_t sub_100335E84()
{
  return sub_1001FFE30();
}

uint64_t sub_100335EA8(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x77u);
}

uint64_t sub_100335F08(uint64_t a1, __int16 a2, char a3, int a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_100335F8C;
  v5[3] = &unk_1009A6878;
  __int16 v6 = a2;
  char v7 = a3;
  char v8 = a4;
  return sub_10001A7D4(a1, 119, a4, v5, 0);
}

uint64_t sub_100335F8C()
{
  return sub_1001FFEBC();
}

uint64_t sub_100335FB4(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x78u);
}

uint64_t sub_100336014(uint64_t a1, char a2, char a3, int a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_100336098;
  v5[3] = &unk_1009A69D8;
  char v6 = a2;
  char v7 = a3;
  char v8 = a4;
  return sub_10001A7D4(a1, 120, a4, v5, 0);
}

uint64_t sub_100336098()
{
  return sub_1001FFF48();
}

uint64_t sub_1003360C0(int a1, int a2)
{
  __int16 v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Read Connection Event Counter : connEventCounter %d", (uint8_t *)v6, 8u);
  }
  LOWORD(xmmword_100A121A0) = a2;
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0x79u);
}

uint64_t sub_1003361AC(uint64_t a1, __int16 a2, uint64_t a3, int a4)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_10033626C;
  v6[3] = &unk_1009A69D8;
  __int16 v7 = a2;
  char v8 = a4;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_100336290;
  v5[3] = &unk_100997528;
  void v5[4] = a3;
  return sub_10001A7D4(a1, 121, a4, v6, v5);
}

uint64_t sub_10033626C()
{
  return sub_1001FFFD4();
}

uint64_t sub_100336290(uint64_t result)
{
  **(_WORD **)(result + 32) = xmmword_100A121A0;
  return result;
}

uint64_t sub_1003362A4(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x7Au);
}

uint64_t sub_100336304(uint64_t a1, uint64_t a2, __int16 a3, char a4, char a5, int a6)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_1003363D0;
  v9[3] = &unk_1009A6858;
  void v9[4] = a1;
  void v9[5] = a2;
  char v11 = a5;
  __int16 v10 = a3;
  char v12 = a4;
  char v13 = a6;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_100336448;
  v7[3] = &unk_100998A58;
  void v7[4] = a2;
  char v8 = a5;
  return sub_10001A7D4(a1, 122, a6, v9, v7);
}

uint64_t sub_1003363D0(uint64_t a1)
{
  if (*(unsigned __int8 *)(*(void *)(a1 + 40) + 220) == *(unsigned __int8 *)(a1 + 50))
  {
    sub_1000262B8(*(void *)(a1 + 32), 0x7Au);
    return 408;
  }
  else
  {
    return sub_100200060();
  }
}

uint64_t sub_100336448(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 220) = *(unsigned char *)(result + 40) != 0;
  return result;
}

uint64_t sub_100336460(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x7Bu);
}

uint64_t sub_1003364C0(uint64_t a1, char a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_100336538;
  void v4[3] = &unk_1009A66D8;
  char v5 = a2;
  char v6 = a3;
  return sub_10001A7D4(a1, 123, a3, v4, 0);
}

uint64_t sub_100336538()
{
  return sub_1002000EC();
}

uint64_t sub_10033655C(int a1, long long *a2)
{
  xmmword_100A121A0 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[2];
  long long v5 = a2[4];
  xmmword_100A121D0 = a2[3];
  *(_OWORD *)&dword_100A121E0 = v5;
  xmmword_100A121B0 = v3;
  *(_OWORD *)&dword_100A121C0 = v4;
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xFFu);
}

uint64_t sub_1003365DC(uint64_t a1, int a2, uint64_t a3)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_100336698;
  v5[3] = &unk_1009A6618;
  char v6 = a2;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_1003366B4;
  void v4[3] = &unk_100997528;
  void v4[4] = a3;
  return sub_10001A7D4(a1, 255, a2, v5, v4);
}

uint64_t sub_100336698()
{
  return sub_100200178();
}

__n128 sub_1003366B4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(_OWORD *)uint64_t v1 = xmmword_100A121A0;
  __n128 result = (__n128)xmmword_100A121B0;
  long long v3 = *(_OWORD *)&dword_100A121C0;
  long long v4 = *(_OWORD *)&dword_100A121E0;
  *(_OWORD *)(v1 + 48) = xmmword_100A121D0;
  *(_OWORD *)(v1 + 64) = v4;
  *(__n128 *)(v1 + 16) = result;
  *(_OWORD *)(v1 + 32) = v3;
  return result;
}

uint64_t sub_1003366DC(uint64_t a1, int a2, int a3, uint64_t a4)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_100336794;
  v6[3] = &unk_1009A6C48;
  int v7 = a2;
  char v8 = a3;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1003367B8;
  v5[3] = &unk_100997528;
  void v5[4] = a4;
  return sub_10001A7D4(a1, 255, a3, v6, v5);
}

uint64_t sub_100336794()
{
  return sub_100200204();
}

__n128 sub_1003367B8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(_OWORD *)uint64_t v1 = xmmword_100A121A0;
  __n128 result = (__n128)xmmword_100A121B0;
  long long v3 = *(_OWORD *)&dword_100A121C0;
  long long v4 = *(_OWORD *)&dword_100A121E0;
  *(_OWORD *)(v1 + 48) = xmmword_100A121D0;
  *(_OWORD *)(v1 + 64) = v4;
  *(__n128 *)(v1 + 16) = result;
  *(_OWORD *)(v1 + 32) = v3;
  return result;
}

uint64_t sub_1003367E0(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x100u);
}

uint64_t sub_100336840(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_1003368C0;
  v6[3] = &unk_1009A6858;
  int v7 = a2;
  void v6[4] = a3;
  void v6[5] = a4;
  char v8 = a5;
  return sub_10001A7D4(a1, 256, a5, v6, 0);
}

uint64_t sub_1003368C0(uint64_t a1)
{
  return sub_100200290(*(unsigned int *)(a1 + 48), *(void *)(a1 + 32), *(void **)(a1 + 40));
}

uint64_t sub_1003368E8(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x103u);
}

uint64_t sub_100336948(uint64_t a1, uint64_t a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_1003369C0;
  void v4[3] = &unk_1009A65D8;
  void v4[4] = a2;
  char v5 = a3;
  return sub_10001A7D4(a1, 259, a3, v4, 0);
}

uint64_t sub_1003369C0()
{
  return sub_100200334();
}

uint64_t sub_1003369E4(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xF9u);
}

uint64_t sub_100336A44(uint64_t a1, char a2, char a3, char a4, int a5)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_100336AC8;
  v6[3] = &unk_1009A6878;
  char v7 = a2;
  char v8 = a3;
  char v9 = a4;
  char v10 = a5;
  return sub_10001A7D4(a1, 249, a5, v6, 0);
}

uint64_t sub_100336AC8()
{
  return sub_1002003C0();
}

uint64_t sub_100336AF4(_DWORD *a1)
{
  unsigned int v1 = a1[178];
  if (v1 < 0x7D0)
  {
    if (v1)
    {
      uint64_t v4 = sub_100035F54();
      if ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 344))(v4))
      {
        return 1;
      }
      else
      {
        uint64_t v5 = sub_100035F54();
        if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 384))(v5))
        {
          if ((a1[178] - 2000) < 0xFFFFF839) {
            return 4;
          }
          else {
            return 5;
          }
        }
        else if ((*(unsigned int (**)(_DWORD *))(*(void *)a1 + 1984))(a1))
        {
          return 5;
        }
        else
        {
          return 4;
        }
      }
    }
  }
  else
  {
    if (v1 < 0xFA0) {
      return 4;
    }
    if (v1 == 6000) {
      return 5;
    }
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
    sub_100757894();
  }
  return 0;
}

uint64_t sub_100336C44(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2528))(a1)) {
    return 2;
  }
  else {
    return 0;
  }
}

uint64_t sub_100336C90(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x7Du);
}

uint64_t sub_100336CF0(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_100336D68;
  v3[3] = &unk_1009A6618;
  char v4 = a2;
  return sub_10001A7D4(a1, 125, 1, v3, 0);
}

uint64_t sub_100336D68()
{
  return sub_1002014A0();
}

uint64_t sub_100336D80(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x85u);
}

uint64_t sub_100336DE0(uint64_t a1, int a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_100336E58;
  v3[3] = &unk_1009A6878;
  int v4 = a2;
  return sub_10001A7D4(a1, 133, 1, v3, 0);
}

uint64_t sub_100336E58()
{
  return sub_1001FDCCC();
}

uint64_t sub_100336E70(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x7Eu);
}

uint64_t sub_100336ED0(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_100336F48;
  v3[3] = &unk_1009A6618;
  char v4 = a2;
  return sub_10001A7D4(a1, 126, 1, v3, 0);
}

uint64_t sub_100336F48()
{
  return sub_1001FF574();
}

uint64_t sub_100336F60(uint64_t a1, char a2, char a3, __int16 a4, __int16 a5)
{
  uint64_t v9 = sub_1004AF8EC();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  _DWORD v11[2] = sub_100337000;
  v11[3] = &unk_100998880;
  char v14 = a2;
  char v15 = a3;
  __int16 v12 = a4;
  __int16 v13 = a5;
  sub_100013018(v9, v11);
  return 0;
}

uint64_t sub_100337000()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_1003731C0() + 56);

  return v0();
}

uint64_t sub_100337064(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x83u);
}

uint64_t sub_1003370C4(uint64_t a1, __int16 a2, int a3, int a4, uint64_t a5, __int16 a6)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_100337148;
  v7[3] = &unk_1009A6978;
  __int16 v10 = a2;
  int v8 = a3;
  int v9 = a4;
  void v7[4] = a5;
  __int16 v11 = a6;
  return sub_10001A7D4(a1, 131, 1, v7, 0);
}

uint64_t sub_100337148()
{
  return sub_100200A50();
}

uint64_t sub_100337170(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x89u);
}

uint64_t sub_1003371D0(uint64_t a1, char a2, __int16 a3, char a4, char a5, char a6, char a7, char a8, char a9, char a10, __int16 a11, __int16 a12, __int16 a13, char a14, int a15, int a16, int a17, char a18, int a19)
{
  uint64_t v27 = sub_100035F54();
  if ((*(uint64_t (**)(uint64_t))(*(void *)v27 + 744))(v27))
  {
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472;
    v31[2] = sub_100337380;
    v31[3] = &unk_1009A67B8;
    char v40 = a2;
    __int16 v36 = a3;
    char v41 = a4;
    char v42 = a5;
    char v43 = a6;
    char v44 = a7;
    char v45 = a8;
    char v46 = a9;
    char v47 = a10;
    __int16 v37 = a11;
    __int16 v38 = a12;
    __int16 v39 = a13;
    char v48 = a14;
    int v32 = a15;
    int v33 = a16;
    char v49 = a18;
    int v34 = a17;
    int v35 = a19;
    return sub_10001A7D4(a1, 137, 1, v31, 0);
  }
  else
  {
    uint64_t v29 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      uint64_t v28 = 2;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "isRssiStatisticAndDetectionEnabled is not supported", buf, 2u);
    }
    else
    {
      return 2;
    }
  }
  return v28;
}

uint64_t sub_100337380(uint64_t a1)
{
  return sub_100200ADC(*(unsigned __int8 *)(a1 + 56), *(unsigned __int16 *)(a1 + 48), *(unsigned __int8 *)(a1 + 57), *(char *)(a1 + 58), *(char *)(a1 + 59));
}

uint64_t sub_100337410(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v8 = sub_100035F54();
  if ((*(uint64_t (**)(uint64_t))(*(void *)v8 + 768))(v8))
  {
    *(_WORD *)(a1 + 1430) = a2;
    *(_WORD *)(a1 + 1432) = a3;
    *(unsigned char *)(a1 + 1434) = a4 != 0;
    int v9 = qword_100A19E50;
    uint64_t v10 = 0;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      v13[0] = 67109376;
      v13[1] = a2;
      __int16 v14 = 1024;
      int v15 = a3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "configureMinMaxUsageNotification is now : max:%d min:%d", (uint8_t *)v13, 0xEu);
      return 0;
    }
  }
  else
  {
    __int16 v11 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v13[0]) = 0;
      uint64_t v10 = 2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "isBluetoothUsageEnabled is not supported", (uint8_t *)v13, 2u);
    }
    else
    {
      return 2;
    }
  }
  return v10;
}

uint64_t sub_10033757C(uint64_t a1, char a2, int a3)
{
  uint64_t v6 = sub_100035F54();
  if ((*(uint64_t (**)(uint64_t))(*(void *)v6 + 776))(v6))
  {
    *(unsigned char *)(a1 + 1435) = a2;
    *(_WORD *)(a1 + 1438) = 0;
    *(_WORD *)(a1 + 1436) = a3;
    char v7 = qword_100A19E50;
    uint64_t v8 = 0;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      v11[0] = 67109120;
      v11[1] = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "configurePhyStatisticsUsageNotification is now : subrate Factor:%d", (uint8_t *)v11, 8u);
      return 0;
    }
  }
  else
  {
    int v9 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v11[0]) = 0;
      uint64_t v8 = 2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "isBluetoothPhyStatisticsUsageEnabled is not supported", (uint8_t *)v11, 2u);
    }
    else
    {
      return 2;
    }
  }
  return v8;
}

uint64_t sub_1003376D0(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x84u);
}

uint64_t sub_100337730(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1003377A8;
  v3[3] = &unk_1009A6618;
  char v4 = a2;
  return sub_10001A7D4(a1, 132, 1, v3, 0);
}

uint64_t sub_1003377A8()
{
  return sub_10020044C();
}

uint64_t sub_1003377C0(uint64_t a1, uint64_t a2, char a3, char a4, char a5, char a6, char a7, char a8, char a9)
{
  uint64_t v17 = sub_10003FB34();
  BOOL v18 = sub_100354F18(v17, 5);
  uint64_t v19 = *(void *)sub_10003FB34();
  int v20 = (*(uint64_t (**)(void))(v19 + 2568))();
  uint64_t result = 3;
  if (a2)
  {
    if (v18) {
      int v22 = 2;
    }
    else {
      int v22 = 1;
    }
    if (v20) {
      int v23 = 3;
    }
    else {
      int v23 = v22;
    }
    if (v23 == 3)
    {
      v32[0] = _NSConcreteStackBlock;
      v32[1] = 3221225472;
      void v32[2] = sub_100337AAC;
      v32[3] = &unk_1009A65B8;
      v32[4] = a2;
      char v33 = a3;
      char v34 = a4;
      char v35 = a5;
      char v36 = a7;
      char v37 = a8;
      char v38 = a9;
      __int16 v24 = v32;
      uint64_t v25 = a1;
      uint64_t v26 = 239;
    }
    else if (v23 == 1)
    {
      v39[0] = _NSConcreteStackBlock;
      v39[1] = 3221225472;
      v39[2] = sub_1003379E8;
      v39[3] = &unk_1009A6598;
      v39[4] = a2;
      char v40 = a3;
      char v41 = a4;
      char v42 = a5;
      __int16 v24 = v39;
      uint64_t v25 = a1;
      uint64_t v26 = 233;
    }
    else
    {
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472;
      v27[2] = sub_100337B80;
      v27[3] = &unk_1009A6998;
      void v27[4] = a2;
      char v28 = a3;
      char v29 = a4;
      char v30 = a5;
      char v31 = a6;
      __int16 v24 = v27;
      uint64_t v25 = a1;
      uint64_t v26 = 235;
    }
    return sub_10001A7D4(v25, v26, 1, v24, 0);
  }
  return result;
}

uint64_t sub_1003379E8(uint64_t a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v4 = 1;
  unsigned int v1 = *(char **)(a1 + 32);
  char v2 = *v1;
  uint64_t v5 = v1 + 1;
  LOBYTE(v6) = v2;
  BYTE1(v6) = *(unsigned char *)(a1 + 40);
  WORD1(v6) = *(_WORD *)(a1 + 41);
  return sub_1001FBBBC((uint64_t)&v4);
}

uint64_t sub_100337A4C(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xE9u);
}

uint64_t sub_100337AAC(uint64_t a1)
{
  v4[0] = 3;
  unsigned int v1 = *(char **)(a1 + 32);
  char v2 = *v1;
  v4[1] = v1 + 1;
  char v5 = v2;
  char v6 = *(unsigned char *)(a1 + 40);
  __int16 v7 = *(_WORD *)(a1 + 41);
  char v8 = 0;
  char v9 = *(unsigned char *)(a1 + 43);
  __int16 v10 = *(_WORD *)(a1 + 44);
  return sub_1001FBBBC((uint64_t)v4);
}

uint64_t sub_100337B20(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xEFu);
}

uint64_t sub_100337B80(uint64_t a1)
{
  char v5 = 0;
  uint64_t v6 = 0;
  uint64_t v4 = 2;
  unsigned int v1 = *(char **)(a1 + 32);
  char v2 = *v1;
  char v5 = v1 + 1;
  LOBYTE(v6) = v2;
  *(_DWORD *)((char *)&v6 + 1) = *(_DWORD *)(a1 + 40);
  return sub_1001FBBBC((uint64_t)&v4);
}

uint64_t sub_100337BDC(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xEBu);
}

uint64_t sub_100337C3C(int a1, int a2, int a3, int a4)
{
  char v8 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v10[0] = 67109888;
    v10[1] = a1;
    __int16 v11 = 1024;
    int v12 = a2;
    __int16 v13 = 1024;
    int v14 = a3;
    __int16 v15 = 1024;
    int v16 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "pollStatsForDevicesAddedToFilterAcceptListWithOptionsCB: status %d, numAdvs %u, rssi %d, lastRssiTimeDifference %u msec", (uint8_t *)v10, 0x1Au);
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0xEAu);
}

uint64_t sub_100337D48(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 3;
  }
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_100337DD0;
  v3[3] = &unk_1009A6738;
  void v3[4] = a2;
  return sub_10001A7D4(a1, 234, 1, v3, 0);
}

uint64_t sub_100337DD0(uint64_t a1)
{
  uint64_t v5 = 0;
  unsigned int v1 = *(char **)(a1 + 32);
  char v2 = *v1;
  uint64_t v4 = v1 + 1;
  LOBYTE(v5) = v2;
  return sub_1001FBC58(&v4);
}

uint64_t sub_100337E18(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x86u);
}

uint64_t sub_100337E78(uint64_t a1, char a2, __int16 a3, __int16 a4, char a5, char a6, char a7, char a8, char a9, char a10)
{
  if (*(_DWORD *)(a1 + 712) > 0x16u) {
    char v10 = a7;
  }
  else {
    char v10 = 0;
  }
  if ((v10 & 1) == 0)
  {
    a8 = 0;
    a9 = 0;
    a10 = 0;
  }
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  void v14[2] = sub_100337F38;
  v14[3] = &unk_1009A6598;
  char v17 = a2;
  __int16 v15 = a3;
  __int16 v16 = a4;
  char v18 = a5;
  char v19 = a6;
  char v20 = v10;
  char v21 = a8;
  char v22 = a9;
  char v23 = a10;
  return sub_10001A7D4(a1, 134, 1, v14, 0);
}

uint64_t sub_100337F38(uint64_t a1)
{
  return sub_1001F98A8(*(unsigned __int8 *)(a1 + 36), *(unsigned __int16 *)(a1 + 32));
}

uint64_t sub_100337F94(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x87u);
}

uint64_t sub_100337FF4(uint64_t a1, char a2, char a3, char a4, char a5, char a6, char a7, char a8, char a9, char a10, char a11, char a12, char a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,int a31,char a32)
{
  *(_DWORD *)&v59[104] = a30;
  *(void *)&v59[96] = a29;
  *(void *)&v59[88] = a28;
  *(void *)&v59[80] = a27;
  *(void *)&v59[72] = a26;
  *(void *)&v59[64] = a25;
  *(void *)&v59[56] = a24;
  *(void *)&v59[48] = a23;
  *(void *)&v59[40] = a22;
  *(void *)&v59[32] = a21;
  *(void *)&v59[24] = a20;
  *(void *)&v59[16] = a19;
  *(void *)&v59[8] = a18;
  *(void *)__int16 v59 = a17;
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472;
  void v33[2] = sub_100338120;
  v33[3] = &unk_1009A6D78;
  char v42 = a2;
  char v43 = a3;
  char v44 = a4;
  char v45 = a5;
  char v46 = a6;
  char v47 = a7;
  char v48 = a8;
  char v49 = a9;
  char v50 = a10;
  char v51 = a11;
  char v52 = a12;
  char v53 = a13;
  char v54 = a14;
  char v55 = a15;
  char v56 = a16;
  char v57 = v59[0];
  long long v34 = *(_OWORD *)&v59[4];
  long long v35 = *(_OWORD *)&v59[20];
  long long v36 = *(_OWORD *)&v59[36];
  long long v37 = *(_OWORD *)&v59[52];
  long long v38 = *(_OWORD *)&v59[68];
  long long v39 = *(_OWORD *)&v59[84];
  uint64_t v40 = *(void *)&v59[100];
  int v41 = a31;
  char v58 = a32;
  return sub_10001A7D4(a1, 135, 1, v33, 0);
}

uint64_t sub_100338120(uint64_t a1)
{
  return sub_1001F9944(*(unsigned __int8 *)(a1 + 140), *(unsigned __int8 *)(a1 + 141), *(unsigned __int8 *)(a1 + 142), *(unsigned __int8 *)(a1 + 143), *(unsigned __int8 *)(a1 + 144), *(unsigned __int8 *)(a1 + 145), *(unsigned __int8 *)(a1 + 146), *(unsigned __int8 *)(a1 + 147), *(void *)(a1 + 148), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104),
           *(void *)(a1 + 112),
           *(void *)(a1 + 120),
           *(void *)(a1 + 128),
           *(_DWORD *)(a1 + 136),
           *(unsigned char *)(a1 + 156),
           (uint64_t)sub_100337F94);
}

uint64_t sub_1003381B8(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x88u);
}

uint64_t sub_100338218(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_100338290;
  v3[3] = &unk_1009A6618;
  char v4 = a2;
  return sub_10001A7D4(a1, 136, 1, v3, 0);
}

uint64_t sub_100338290()
{
  return sub_1001F9B20();
}

uint64_t sub_1003382A8(uint64_t a1, int a2, int a3)
{
  if (qword_1009FB288 != -1) {
    dispatch_once(&qword_1009FB288, &stru_1009A6FB8);
  }
  uint64_t v6 = sub_10030D7C4(qword_1009FB280, 2);
  if (a3)
  {
    if (a2 == 1)
    {
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      sub_1006355D4(v6, (uint64_t *)&v26);
      unsigned int v7 = *(_DWORD *)(a1 + 712);
      if (v7 - 1 <= 0x7CE)
      {
        LODWORD(__p[0]) = v7 > 0xC;
LABEL_7:
        v24[0] = __p;
        char v8 = sub_10033D490(&v26, (int *)__p, (uint64_t)&unk_1007BE9D0, (_DWORD **)v24);
LABEL_29:
        uint64_t v10 = *((unsigned __int8 *)v8 + 32);
        sub_1000486F0((uint64_t)&v26, v27);
        return v10;
      }
      goto LABEL_14;
    }
    return 100;
  }
  switch(a2)
  {
    case 131091:
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      sub_100635680(v6, (uint64_t *)&v26);
      if (GestaltGetDeviceClass() != 7)
      {
        uint64_t v10 = 100;
LABEL_33:
        sub_10004BA28((uint64_t)&v26, v27);
        return v10;
      }
      sub_1003FC624((uint64_t)v24);
      unint64_t v11 = v25;
      if ((v25 & 0x80u) != 0) {
        unint64_t v11 = (unint64_t)v24[1];
      }
      if (v11)
      {
        sub_1003FC624((uint64_t)__p);
        BOOL v12 = &v27 != (char **)sub_10003156C((uint64_t)&v26, (const void **)__p);
        if (v23 < 0) {
          operator delete(__p[0]);
        }
        if ((v25 & 0x80) == 0) {
          goto LABEL_23;
        }
      }
      else
      {
        BOOL v12 = 0;
        if ((v25 & 0x80) == 0)
        {
LABEL_23:
          if (v12)
          {
            sub_1003FC624((uint64_t)v24);
            __p[0] = v24;
            uint64_t v10 = *((unsigned __int8 *)sub_10030CB90(&v26, (const void **)v24, (uint64_t)&unk_1007BE9D0, (_OWORD **)__p)
                  + 56);
            if ((char)v25 < 0) {
              operator delete(v24[0]);
            }
          }
          else
          {
            __int16 v13 = qword_100A19E50;
            if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
              sub_100757908(v13, v14, v15, v16, v17, v18, v19, v20);
            }
            uint64_t v10 = 5;
          }
          goto LABEL_33;
        }
      }
      operator delete(v24[0]);
      goto LABEL_23;
    case 4:
      return sub_100635638(v6);
    case 3:
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      sub_1006355D4(v6, (uint64_t *)&v26);
      unsigned int v9 = *(_DWORD *)(a1 + 712);
      if (v9 - 1 <= 0x7CE)
      {
        LODWORD(__p[0]) = v9 > 0xC;
        goto LABEL_7;
      }
LABEL_14:
      LODWORD(__p[0]) = 2;
      v24[0] = __p;
      char v8 = sub_10033D490(&v26, (int *)__p, (uint64_t)&unk_1007BE9D0, (_DWORD **)v24);
      goto LABEL_29;
  }
  return 100;
}

void sub_1003385E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,void *a22)
{
}

uint64_t sub_100338664(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xECu);
}

uint64_t sub_1003386C4(uint64_t a1, int a2, int a3, int a4, char a5)
{
  int v10 = *(unsigned __int8 *)(a1 + 1203);
  if (v10 == a2 && (!a2 || *(unsigned __int16 *)(a1 + 1206) == a3 && *(unsigned __int16 *)(a1 + 1204) == a4))
  {
    unint64_t v11 = qword_100A19E50;
    uint64_t result = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEBUG);
    if (result)
    {
      __int16 v13 = "No";
      *(_DWORD *)std::string buf = 136315650;
      if (a2) {
        __int16 v13 = "Yes";
      }
      char v29 = v13;
      __int16 v30 = 1024;
      *(_DWORD *)char v31 = a3;
      *(_WORD *)&void v31[4] = 1024;
      *(_DWORD *)&v31[6] = a4;
      _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "btscLeSetConnectionScan: same as current ScanCore config enable %s interval %d window %d", buf, 0x18u);
      return 0;
    }
  }
  else
  {
    uint64_t v14 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = "Yes";
      int v16 = *(unsigned __int16 *)(a1 + 1206);
      int v17 = *(unsigned __int16 *)(a1 + 1204);
      if (v10) {
        uint64_t v18 = "Yes";
      }
      else {
        uint64_t v18 = "No";
      }
      *(_DWORD *)std::string buf = 136316418;
      if (!a2) {
        uint64_t v15 = "No";
      }
      char v29 = v18;
      __int16 v30 = 2080;
      *(void *)char v31 = v15;
      *(_WORD *)&v31[8] = 1024;
      int v32 = v16;
      __int16 v33 = 1024;
      int v34 = a3;
      __int16 v35 = 1024;
      int v36 = v17;
      __int16 v37 = 1024;
      int v38 = a4;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "btscLeSetConnectionScan: ScanCore Connection Scan Params to be updated enabled %s -> %s interval %d -> %d window %d -> %d", buf, 0x2Eu);
    }
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    void v23[2] = sub_10033894C;
    v23[3] = &unk_1009A6B08;
    char v26 = a2;
    __int16 v24 = a3;
    __int16 v25 = a4;
    char v27 = a5;
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    void v19[2] = sub_100338974;
    v19[3] = &unk_1009A6D98;
    v19[4] = a1;
    char v22 = a2;
    __int16 v20 = a3;
    __int16 v21 = a4;
    return sub_10001A7D4(a1, 236, 1, v23, v19);
  }
  return result;
}

uint64_t sub_10033894C(uint64_t a1)
{
  return sub_1001FBCF4(*(unsigned __int8 *)(a1 + 36), *(_WORD *)(a1 + 32), *(_WORD *)(a1 + 34));
}

uint64_t sub_100338974(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  *(unsigned char *)(v1 + 1203) = *(unsigned char *)(result + 44);
  *(_WORD *)(v1 + 1206) = *(_WORD *)(result + 40);
  *(_WORD *)(v1 + 1204) = *(_WORD *)(result + 42);
  return result;
}

BOOL sub_100338994()
{
  return sub_1003FAF7C() == 156;
}

uint64_t sub_1003389B4(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xFAu);
}

uint64_t sub_100338A14(uint64_t a1, char a2)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 3440))(a1))
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    _DWORD v6[2] = sub_100338B60;
    v6[3] = &unk_1009A6618;
    char v7 = a2;
    return sub_10001A7D4(a1, 250, 1, v6, 0);
  }
  else
  {
    uint64_t v5 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 136446210;
      unsigned int v9 = sub_10001AA04(a1, 250);
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "setAGCTableOverrideCB %{public}s is not implemented on this platform", buf, 0xCu);
    }
    return 2;
  }
}

uint64_t sub_100338B60()
{
  return sub_1002019D0();
}

void sub_100338B78(int a1, long long *a2, int a3)
{
  if (a3 == 32)
  {
    long long v4 = a2[1];
    xmmword_100A121A0 = *a2;
    xmmword_100A121B0 = v4;
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009A6E78);
    }
    sub_100026140(a1, 0xFBu);
  }
  else
  {
    uint64_t v5 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_100757940(v5, v6, v7, v8, v9, v10, v11, v12);
    }
  }
}

uint64_t sub_100338C24(uint64_t a1, uint64_t a2, char a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_100338CB8;
  void v4[3] = &unk_100998A58;
  void v4[4] = a2;
  char v5 = a3;
  return sub_10001A7D4(a1, 251, 1, &stru_1009A6DB8, v4);
}

int sub_100338CA4(id a1)
{
  return sub_100201A5C();
}

void *sub_100338CB8(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 40) >= 0x20u) {
    size_t v1 = 32;
  }
  else {
    size_t v1 = *(unsigned __int8 *)(a1 + 40);
  }
  return memcpy(*(void **)(a1 + 32), &xmmword_100A121A0, v1);
}

uint64_t sub_100338CDC(uint64_t a1, const void *a2, size_t __n)
{
  int v3 = __n;
  if (a1)
  {
    uint64_t v4 = a1;
    byte_100A1229B = 0;
    char v5 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_100757A38(v3, v4, v5);
    }
  }
  else if (__n > 0xFB)
  {
    uint64_t v6 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_1007579B4(v3, v6);
    }
    byte_100A1229B = 0;
    LODWORD(v4) = 114;
  }
  else
  {
    byte_100A1229B = __n;
    memcpy(&xmmword_100A121A0, a2, __n);
    LODWORD(v4) = 0;
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(v4, 0xFCu);
}

uint64_t sub_100338DD4(uint64_t a1, int a2, char a3, uint64_t a4)
{
  if ((a3 + 4) > 5u)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_100338EE4;
    v7[3] = &unk_1009A6C48;
    int v8 = a2;
    char v9 = a3;
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    _DWORD v5[2] = sub_100338F04;
    v5[3] = &unk_100998A58;
    char v6 = a3;
    void v5[4] = a4;
    return sub_10001A7D4(a1, 252, 1, v7, v5);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_100757AB4();
    }
    return 3;
  }
}

uint64_t sub_100338EE4()
{
  return sub_100201AE8();
}

void sub_100338F04(uint64_t a1)
{
  if (byte_100A1229B == *(unsigned char *)(a1 + 40))
  {
    size_t v1 = *(void **)(a1 + 32);
    size_t v2 = byte_100A1229B;
    memcpy(v1, &xmmword_100A121A0, v2);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
  {
    sub_100757B1C();
  }
}

uint64_t sub_100338F8C(uint64_t a1, unsigned int a2)
{
  if ((*(_DWORD *)(a1 + 712) - 2000) <= 0x7CF) {
    return (171 * a2) >> 10;
  }
  else {
    return a2 >> 1;
  }
}

uint64_t sub_100338FB0()
{
  unsigned int v0 = *(_DWORD *)(sub_10003FB34() + 712);
  unsigned int v1 = v0 - 1;
  if (v0 <= 0x15) {
    unsigned int v2 = 28;
  }
  else {
    unsigned int v2 = 102;
  }
  if (v1 >= 0x7CF) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t sub_100338FE8()
{
  unsigned int v0 = *(_DWORD *)(sub_10003FB34() + 712);
  unsigned int v1 = v0 - 1;
  if (v0 <= 0x15) {
    unsigned __int8 v2 = 63;
  }
  else {
    unsigned __int8 v2 = -38;
  }
  if (v1 >= 0x7CF) {
    return 0;
  }
  return v2;
}

uint64_t sub_100339024(uint64_t a1, _OWORD *a2, void *a3)
{
  *a2 = *(_OWORD *)(a1 + 1224);
  long long v3 = *(_OWORD *)(a1 + 1240);
  long long v4 = *(_OWORD *)(a1 + 1256);
  long long v5 = *(_OWORD *)(a1 + 1288);
  a2[3] = *(_OWORD *)(a1 + 1272);
  a2[4] = v5;
  a2[1] = v3;
  a2[2] = v4;
  long long v6 = *(_OWORD *)(a1 + 1304);
  long long v7 = *(_OWORD *)(a1 + 1320);
  long long v8 = *(_OWORD *)(a1 + 1352);
  a2[7] = *(_OWORD *)(a1 + 1336);
  a2[8] = v8;
  a2[5] = v6;
  a2[6] = v7;
  long long v9 = *(_OWORD *)(a1 + 1368);
  long long v10 = *(_OWORD *)(a1 + 1384);
  long long v11 = *(_OWORD *)(a1 + 1400);
  *(_OWORD *)((char *)a2 + 190) = *(_OWORD *)(a1 + 1414);
  a2[10] = v10;
  a2[11] = v11;
  a2[9] = v9;
  *a3 = *(void *)(a1 + 1216);
  return 0;
}

uint64_t sub_100339078(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x8Au);
}

uint64_t sub_1003390D8(uint64_t a1, char a2, char a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, char a11)
{
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  _DWORD v12[2] = sub_100339170;
  _OWORD v12[3] = &unk_1009A6758;
  char v20 = a2;
  char v21 = a3;
  int v13 = a4;
  int v14 = a5;
  int v15 = a6;
  int v16 = a7;
  int v17 = a8;
  int v18 = a9;
  int v19 = a10;
  char v22 = a11;
  return sub_10001A7D4(a1, 138, 1, v12, 0);
}

uint64_t sub_100339170(uint64_t a1)
{
  return sub_100201B74(*(unsigned __int8 *)(a1 + 60), *(unsigned __int8 *)(a1 + 61));
}

uint64_t sub_1003391C8(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x8Bu);
}

uint64_t sub_100339228(uint64_t a1, char a2, char a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_1003392A4;
  void v4[3] = &unk_1009A66D8;
  char v5 = a2;
  char v6 = a3;
  return sub_10001A7D4(a1, 139, 1, v4, 0);
}

uint64_t sub_1003392A4()
{
  return sub_100201C18();
}

BOOL sub_1003392C4()
{
  int v0 = *(_DWORD *)(sub_10003FB34() + 712);
  unsigned int v1 = v0 - 2001;
  unsigned int v2 = v0 - 21;
  return v1 < 0x7CF || v2 < 5;
}

uint64_t sub_1003392F4(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xEEu);
}

uint64_t sub_100339354(uint64_t a1, __int16 a2, char a3, char a4, char a5, char a6, char a7)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_1003393E0;
  v8[3] = &unk_1009A67F8;
  __int16 v9 = a2;
  char v10 = a3;
  char v11 = a4;
  char v12 = a5;
  char v13 = a6;
  char v14 = a7;
  return sub_10001A7D4(a1, 238, 1, v8, 0);
}

uint64_t sub_1003393E0()
{
  return sub_1001FA4C0();
}

uint64_t sub_100339410(int a1, int a2)
{
  long long v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v6[0] = 67109120;
    v6[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "loadMSFFileCB: status = %d", (uint8_t *)v6, 8u);
  }
  if ((a1 || a2) && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
    sub_100757B88();
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0x105u);
}

uint64_t sub_100339520(uint64_t a1, char a2, __int16 a3, uint64_t a4, __int16 a5, int a6)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_1003395A4;
  v7[3] = &unk_1009A6A38;
  char v10 = a2;
  __int16 v8 = a3;
  void v7[4] = a4;
  __int16 v9 = a5;
  return sub_10001A7D4(a1, 261, a6, v7, 0);
}

uint64_t sub_1003395A4(uint64_t a1)
{
  return sub_100201CA4(*(unsigned __int8 *)(a1 + 44), *(_WORD *)(a1 + 40), *(void *)(a1 + 32), *(unsigned __int16 *)(a1 + 42));
}

uint64_t sub_1003395CC(int a1)
{
  unsigned int v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "loadPwrRegulatoryFileCB: status = %d", (uint8_t *)v4, 8u);
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0x106u);
}

uint64_t sub_1003396A4(uint64_t a1, uint64_t a2, __int16 a3, int a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_100339724;
  v5[3] = &unk_1009A67D8;
  void v5[4] = a2;
  __int16 v6 = a3;
  return sub_10001A7D4(a1, 262, a4, v5, 0);
}

uint64_t sub_100339724(uint64_t a1)
{
  return sub_100201D60(*(void *)(a1 + 32), *(unsigned __int16 *)(a1 + 40));
}

uint64_t sub_100339744(int a1)
{
  unsigned int v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "loadPwrRegulatoryFileA3CB: status = %d", (uint8_t *)v4, 8u);
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0x107u);
}

uint64_t sub_10033981C(uint64_t a1, __int16 a2, uint64_t a3, __int16 a4, int a5)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_10033989C;
  v6[3] = &unk_1009A6998;
  __int16 v7 = a2;
  void v6[4] = a3;
  __int16 v8 = a4;
  return sub_10001A7D4(a1, 263, a5, v6, 0);
}

uint64_t sub_10033989C(uint64_t a1)
{
  return sub_100201E1C(*(unsigned __int16 *)(a1 + 40), *(void *)(a1 + 32), *(unsigned __int16 *)(a1 + 42));
}

uint64_t sub_1003398C0(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x108u);
}

uint64_t sub_100339920(uint64_t a1, uint64_t a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_100339998;
  v3[3] = &unk_1009A6738;
  void v3[4] = a2;
  return sub_10001A7D4(a1, 264, 1, v3, 0);
}

uint64_t sub_100339998(uint64_t a1)
{
  return sub_100202334(*(void *)(a1 + 32));
}

uint64_t sub_1003399B0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 2744))();
}

uint64_t sub_1003399DC(uint64_t a1)
{
  uint64_t result = _os_feature_enabled_impl();
  if (result) {
    return (*(_DWORD *)(a1 + 712) - 21) < 5;
  }
  return result;
}

uint64_t sub_100339A24()
{
  unsigned __int8 v7 = 0;
  uint64_t v0 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "SupportsChannelSounding");
  uint64_t v1 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, unsigned __int8 *))(*(void *)v0 + 72))(v0, buf, __p, &v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0)
  {
    operator delete(*(void **)buf);
    if (!v1) {
      return v1;
    }
  }
  else if (!v1)
  {
    return v1;
  }
  int v2 = v7;
  uint64_t v1 = v7 != 0;
  long long v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Overriding Channel sounding support to : %d", buf, 8u);
  }
  return v1;
}

void sub_100339B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100339BA8()
{
  return 0;
}

uint64_t sub_100339BB0(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xF0u);
}

uint64_t sub_100339C10(unsigned __int8 *a1, uint64_t a2, char a3, int a4, uint64_t a5)
{
  char v10 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    char v11 = sub_1006AD3F0();
    int v12 = a1[1444];
    *(_DWORD *)std::string buf = 138412802;
    char v20 = v11;
    __int16 v21 = 1024;
    int v22 = a4;
    __int16 v23 = 1024;
    int v24 = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "FastLEConnection:writeStoredLTKForDevice %@ length:%d fStoredLTKCount:%d", buf, 0x18u);
  }
  if (!(*(unsigned int (**)(unsigned __int8 *))(*(void *)a1 + 2736))(a1)) {
    return 11;
  }
  unsigned int v13 = a1[1444];
  if ((*(unsigned int (**)(unsigned __int8 *))(*(void *)a1 + 2744))(a1)) {
    unsigned int v14 = 16;
  }
  else {
    unsigned int v14 = 8;
  }
  if (v14 <= v13) {
    return 23;
  }
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  _DWORD v16[2] = sub_100339E04;
  v16[3] = &unk_1009A6C28;
  void v16[4] = a1;
  void v16[5] = a2;
  char v17 = a3;
  char v18 = a4;
  void v16[6] = a5;
  return sub_10001A7D4((uint64_t)a1, 240, 1, v16, 0);
}

uint64_t sub_100339E04(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t result = sub_100201ED4();
  if (!result) {
    ++*(unsigned char *)(v1 + 1444);
  }
  return result;
}

uint64_t sub_100339E58(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xF1u);
}

uint64_t sub_100339EB8(unsigned __int8 *a1, uint64_t a2, char a3)
{
  char v6 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    unsigned __int8 v7 = sub_1006AD3F0();
    int v8 = a1[1444];
    *(_DWORD *)std::string buf = 138412546;
    unsigned int v13 = v7;
    __int16 v14 = 1024;
    int v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "FastLEConnection:removeStoredLTKForDevice %@ fStoredLTKCount:%d", buf, 0x12u);
  }
  if (!a1[1444]) {
    return 0;
  }
  if (!(*(unsigned int (**)(unsigned __int8 *))(*(void *)a1 + 2736))(a1)) {
    return 11;
  }
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  _DWORD v10[2] = sub_10033A048;
  v10[3] = &unk_1009A65F8;
  void v10[4] = a1;
  void v10[5] = a2;
  char v11 = a3;
  return sub_10001A7D4((uint64_t)a1, 241, 1, v10, 0);
}

uint64_t sub_10033A048(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t result = sub_100201FEC();
  if (!result) {
    --*(unsigned char *)(v1 + 1444);
  }
  return result;
}

uint64_t sub_10033A094(int a1, int a2, size_t size, const void *a4)
{
  int v4 = a1;
  if (!a1)
  {
    char v6 = a2;
    int v4 = 105;
    if (a2)
    {
      unsigned int v7 = size;
      if (size)
      {
        if (a4)
        {
          char v9 = malloc_type_malloc(size, 0xCC5D2DF4uLL);
          *((void *)&xmmword_100A121A0 + 1) = v9;
          if (v9)
          {
            LOBYTE(xmmword_100A121A0) = v6;
            WORD1(xmmword_100A121A0) = v7;
            memcpy(v9, a4, v7);
            int v4 = 0;
          }
          else
          {
            int v4 = 106;
          }
        }
      }
    }
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(v4, 0xF2u);
}

uint64_t sub_10033A168(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  int v8 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = *a3;
    *(_DWORD *)std::string buf = 67109120;
    int v13 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "FastLEConnection:readLocalControllerCachedInfo maxLen:%d", buf, 8u);
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 2736))(a1)) {
    return 11;
  }
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  _DWORD v11[2] = sub_10033A2E4;
  v11[3] = &unk_1009A12D0;
  void v11[4] = a3;
  void v11[5] = a2;
  void v11[6] = a4;
  return sub_10001A7D4(a1, 242, 1, &stru_1009A6DD8, v11);
}

int sub_10033A2D0(id a1)
{
  return sub_100202104();
}

void sub_10033A2E4(uint64_t a1)
{
  uint64_t v2 = *((void *)&xmmword_100A121A0 + 1);
  uint64_t v3 = WORD1(xmmword_100A121A0);
  if (*((void *)&xmmword_100A121A0 + 1)) {
    BOOL v4 = WORD1(xmmword_100A121A0) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    **(unsigned char **)(a1 + 32) = 0;
    **(unsigned char **)(a1 + 40) = 0;
  }
  else
  {
    char v5 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = xmmword_100A121A0;
      int v8 = +[NSData dataWithBytes:v2 length:v3];
      v12[0] = 67109378;
      v12[1] = v7;
      __int16 v13 = 2112;
      __int16 v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "FastLEConnection:readLocalControllerCachedInfo version:%d data:%@", (uint8_t *)v12, 0x12u);
    }
    unsigned int v9 = **(unsigned __int8 **)(a1 + 32);
    **(unsigned char **)(a1 + 40) = xmmword_100A121A0;
    if (WORD1(xmmword_100A121A0) < v9) {
      LOBYTE(v9) = BYTE2(xmmword_100A121A0);
    }
    **(unsigned char **)(a1 + 32) = v9;
    char v10 = *(void **)(a1 + 48);
    char v11 = (void *)*((void *)&xmmword_100A121A0 + 1);
    memcpy(v10, *((const void **)&xmmword_100A121A0 + 1), WORD1(xmmword_100A121A0));
    free(v11);
  }
}

uint64_t sub_10033A444(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xF3u);
}

uint64_t sub_10033A4A4(unsigned __int8 *a1, uint64_t a2, int a3, int a4, unsigned int a5, uint64_t a6)
{
  int v12 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v13 = sub_1006AD3F0();
    int v14 = a1[1445];
    *(_DWORD *)std::string buf = 138413314;
    int v24 = v13;
    __int16 v25 = 1024;
    int v26 = a3;
    __int16 v27 = 1024;
    int v28 = a4;
    __int16 v29 = 1024;
    unsigned int v30 = a5;
    __int16 v31 = 1024;
    int v32 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "FastLEConnection:writePeerControllerCachedInfo %@ resolvedAddress:%d version:%d length:%d fStoredPeerControllerCachedInfo:%d", buf, 0x24u);
  }
  if (!(*(unsigned int (**)(unsigned __int8 *))(*(void *)a1 + 2736))(a1)) {
    return 11;
  }
  unsigned int v15 = a1[1445];
  if ((*(unsigned int (**)(unsigned __int8 *))(*(void *)a1 + 2744))(a1)) {
    unsigned int v16 = 16;
  }
  else {
    unsigned int v16 = 8;
  }
  uint64_t result = 23;
  if (v16 > v15)
  {
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    void v19[2] = sub_10033A6BC;
    v19[3] = &unk_1009A6DF8;
    if (a5 >= 0x17) {
      __int16 v18 = 23;
    }
    else {
      __int16 v18 = a5;
    }
    v19[4] = a1;
    void v19[5] = a2;
    char v21 = a3;
    BOOL v22 = a4 != 0;
    __int16 v20 = v18;
    v19[6] = a6;
    return sub_10001A7D4((uint64_t)a1, 243, 1, v19, 0);
  }
  return result;
}

uint64_t sub_10033A6BC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t result = sub_100202190();
  if (!result) {
    ++*(unsigned char *)(v1 + 1445);
  }
  return result;
}

uint64_t sub_10033A714(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xF3u);
}

uint64_t sub_10033A774(unsigned __int8 *a1, uint64_t a2, char a3)
{
  char v6 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = sub_1006AD3F0();
    int v8 = a1[1445];
    *(_DWORD *)std::string buf = 138412546;
    __int16 v13 = v7;
    __int16 v14 = 1024;
    int v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "FastLEConnection:removePeerControllerCachedInfo %@ fStoredPeerControllerCachedInfo:%d", buf, 0x12u);
  }
  if (!a1[1445]) {
    return 0;
  }
  if (!(*(unsigned int (**)(unsigned __int8 *))(*(void *)a1 + 2736))(a1)) {
    return 11;
  }
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  _DWORD v10[2] = sub_10033A904;
  v10[3] = &unk_1009A65F8;
  void v10[4] = a1;
  void v10[5] = a2;
  char v11 = a3;
  return sub_10001A7D4((uint64_t)a1, 243, 1, v10, 0);
}

uint64_t sub_10033A904(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t result = sub_100202190();
  if (!result) {
    --*(unsigned char *)(v1 + 1445);
  }
  return result;
}

uint64_t sub_10033A95C(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0xF4u);
}

uint64_t sub_10033A9BC(uint64_t a1, int a2)
{
  BOOL v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "FastLEConnection:setMaxInstantUpdateForFastLEConnection %d", buf, 8u);
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 2736))(a1)) {
    return 11;
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_10033AB08;
  v6[3] = &unk_1009A6618;
  char v7 = a2;
  return sub_10001A7D4(a1, 244, 1, v6, 0);
}

uint64_t sub_10033AB08()
{
  return sub_10020221C();
}

uint64_t sub_10033AB20(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x10Au);
}

uint64_t sub_10033AB80(uint64_t a1, int a2, char a3, int a4, char a5, char a6)
{
  int v12 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v22 = a2;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "FastLEConnection:setLEAdvTxPowerIncrease %d", buf, 8u);
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 2560))(a1)) {
    return 11;
  }
  if ((a4 - 21) <= 0xAEu)
  {
    __int16 v13 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109120;
      int v22 = a4;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "TxPowerDesired is not supported (%d dBm)", buf, 8u);
    }
    return 11;
  }
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  void v15[2] = sub_10033AD54;
  v15[3] = &unk_1009A6C48;
  char v16 = a2;
  char v17 = a3;
  char v18 = a4;
  char v19 = a5;
  char v20 = a6;
  return sub_10001A7D4(a1, 266, 1, v15, 0);
}

uint64_t sub_10033AD54()
{
  return sub_1002022A8();
}

BOOL sub_10033AD80(uint64_t a1)
{
  if (!_os_feature_enabled_impl()) {
    goto LABEL_6;
  }
  unsigned int v2 = *(_DWORD *)(a1 + 712);
  if (!v2) {
    goto LABEL_6;
  }
  if (v2 > 0x7CF)
  {
    BOOL v3 = v2 < 0xFA0 && v2 != 2000;
    goto LABEL_7;
  }
  BOOL v3 = 1;
  if (v2 <= 0x14 && v2 != 19) {
LABEL_6:
  }
    BOOL v3 = 0;
LABEL_7:
  BOOL v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109120;
    v7[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "supportsIncomingLEConnectionsDenyList %d", (uint8_t *)v7, 8u);
  }
  return v3;
}

uint64_t sub_10033AE7C(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x8Eu);
}

uint64_t sub_10033AEDC(uint64_t a1, int a2)
{
  BOOL v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "LEHardwareModel::enableIncomingLEConnectionDenyList %d", buf, 8u);
  }
  if (byte_100A123A0 == a2) {
    return 0;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 2760))(a1)) {
    return 11;
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_10033B040;
  v6[3] = &unk_1009A6618;
  char v7 = a2;
  return sub_10001A7D4(a1, 142, 1, v6, 0);
}

uint64_t sub_10033B040(uint64_t a1)
{
  byte_100A123A0 = *(unsigned char *)(a1 + 32);
  return sub_1002023CC();
}

uint64_t sub_10033B060(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x8Cu);
}

uint64_t sub_10033B0C0(_DWORD *a1, uint64_t a2)
{
  BOOL v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    char v5 = sub_1006AD3F0();
    *(_DWORD *)std::string buf = 138412290;
    char v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "LEHardwareModel::addAddressToIncomingLEConnectionDenyList %@", buf, 0xCu);
  }
  if (!(*(unsigned int (**)(_DWORD *))(*(void *)a1 + 2760))(a1)) {
    return 11;
  }
  uint64_t v6 = sub_10033AEDC((uint64_t)a1, 1);
  if (!v6)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    _DWORD v9[2] = sub_10033B260;
    v9[3] = &unk_1009A6738;
    void v9[4] = a2;
    uint64_t v6 = sub_10001A7D4((uint64_t)a1, 140, 1, v9, 0);
    int v7 = a1[360];
    if (!v6 || v7) {
      a1[360] = v7 + 1;
    }
    else {
      sub_10033AEDC((uint64_t)a1, 0);
    }
  }
  return v6;
}

uint64_t sub_10033B260(uint64_t a1)
{
  return sub_100202458(*(void *)(a1 + 32));
}

uint64_t sub_10033B278(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x8Du);
}

uint64_t sub_10033B2D8(_DWORD *a1, uint64_t a2)
{
  BOOL v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    char v5 = sub_1006AD3F0();
    *(_DWORD *)std::string buf = 138412290;
    char v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "LEHardwareModel::removeAddressFromIncomingLEConnectionDenyList %@", buf, 0xCu);
  }
  if (!(*(unsigned int (**)(_DWORD *))(*(void *)a1 + 2760))(a1)) {
    return 11;
  }
  if (!a1[360]) {
    return 12;
  }
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_10033B46C;
  v8[3] = &unk_1009A6738;
  void v8[4] = a2;
  uint64_t result = sub_10001A7D4((uint64_t)a1, 141, 1, v8, 0);
  if (!result)
  {
    int v7 = a1[360] - 1;
    a1[360] = v7;
    if (!v7) {
      sub_10033AEDC((uint64_t)a1, 0);
    }
    return 0;
  }
  return result;
}

uint64_t sub_10033B46C(uint64_t a1)
{
  return sub_1002024F0(*(void *)(a1 + 32));
}

uint64_t sub_10033B484(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x8Fu);
}

uint64_t sub_10033B4E4(_DWORD *a1)
{
  unsigned int v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)BOOL v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "LEHardwareModel::clearIncomingLEConnectionDenyList()", v4, 2u);
  }
  if (!(*(unsigned int (**)(_DWORD *))(*(void *)a1 + 2760))(a1)) {
    return 11;
  }
  a1[360] = 0;
  uint64_t result = sub_10001A7D4((uint64_t)a1, 143, 1, &stru_1009A6E18, 0);
  if (!result)
  {
    sub_10033AEDC((uint64_t)a1, 0);
    return 0;
  }
  return result;
}

int sub_10033B5C0(id a1)
{
  return sub_100202588();
}

uint64_t sub_10033B5D4(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x109u);
}

uint64_t sub_10033B634(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x10Bu);
}

uint64_t sub_10033B694(void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned __int16 a9, uint64_t a10, unsigned __int8 a11, char a12, unsigned __int8 a13, unsigned __int8 a14, uint64_t a15, unsigned __int8 a16, unsigned __int8 a17)
{
  uint64_t v22 = sub_10003FB34();
  if (sub_100354EC4(v22))
  {
    v37[0] = _NSConcreteStackBlock;
    v37[1] = 3221225472;
    void v37[2] = sub_10033B8B8;
    v37[3] = &unk_1009A6C68;
    unsigned __int8 v44 = a14;
    char v45 = a3;
    __int16 v38 = a4;
    __int16 v39 = a5;
    __int16 v40 = a6;
    __int16 v41 = a7;
    __int16 v42 = a8;
    unsigned __int16 v43 = a9;
    v37[4] = a2;
    v37[5] = a10;
    unsigned __int8 v46 = a11;
    char v47 = a12;
    unsigned __int8 v48 = a13;
    return sub_10001A7D4((uint64_t)a1, 265, 1, v37, 0);
  }
  else
  {
    uint64_t v24 = a6;
    uint64_t v25 = a7;
    uint64_t v26 = a8;
    uint64_t v27 = *a1;
    if (a3)
    {
      int v28 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 1128);
      __int16 v29 = a1;
      uint64_t v30 = a2;
      uint64_t v31 = a4;
      uint64_t v32 = a5;
      uint64_t v33 = a9;
    }
    else
    {
      int v28 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 1808);
      __int16 v29 = a1;
      uint64_t v30 = a2;
      uint64_t v31 = a11;
      uint64_t v32 = a12;
      uint64_t v24 = a13;
      uint64_t v25 = a14;
      uint64_t v26 = a16;
      uint64_t v33 = a17;
    }
    return v28(v29, v30, v31, v32, v24, v25, v26, v33);
  }
}

uint64_t sub_10033B8B8(uint64_t a1)
{
  __int16 v12 = 0;
  int v11 = 0;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v8 = 0u;
  uint64_t v1 = *(char **)(a1 + 32);
  char v2 = *v1;
  *((void *)&v8 + 1) = v1 + 1;
  BYTE1(v8) = v2;
  int v3 = *(unsigned __int8 *)(a1 + 60);
  BYTE11(v10) = *(unsigned char *)(a1 + 60);
  char v4 = *(unsigned char *)(a1 + 61);
  if (v4)
  {
    *(void *)((char *)&v9 + 2) = *(void *)(a1 + 48);
    *(_DWORD *)((char *)&v9 + 10) = *(_DWORD *)(a1 + 56);
    char v4 = 1;
    LOBYTE(v9) = 1;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (!v5 || (v11 == *(_DWORD *)(v5 + 1) ? (BOOL v6 = v12 == *(_WORD *)(v5 + 5)) : (BOOL v6 = 0), v6))
  {
    BYTE14(v9) = -1;
    *(void *)&long long v10 = &v11;
  }
  else
  {
    BYTE14(v9) = *(unsigned char *)v5;
    *(void *)&long long v10 = v5 + 1;
    v4 |= 2u;
    LOBYTE(v9) = v4;
  }
  if (*(unsigned char *)(a1 + 62))
  {
    BYTE8(v10) = *(unsigned char *)(a1 + 62);
    v4 |= 4u;
    LOBYTE(v9) = v4;
  }
  if (*(unsigned char *)(a1 + 63))
  {
    BYTE9(v10) = *(unsigned char *)(a1 + 63);
    v4 |= 8u;
    LOBYTE(v9) = v4;
  }
  if (*(unsigned char *)(a1 + 64))
  {
    BYTE10(v10) = *(unsigned char *)(a1 + 64);
    v4 |= 0x10u;
    LOBYTE(v9) = v4;
  }
  if (v3) {
    LOBYTE(v9) = v4 | 0x20;
  }
  return sub_100202614((uint64_t)&v8);
}

uint64_t sub_10033B9D0(uint64_t a1, unsigned int a2, const void *a3, unsigned int a4, uint64_t (*a5)(void, void, void, void), uint64_t a6)
{
  v17[0] = 0;
  v17[1] = 0;
  sub_10003AED0((uint64_t)v17, a1 + 72);
  char v16 = 0;
  sub_10001B8E0(&v16);
  uint64_t v14 = sub_1002027E8(a2, a3, a4, a5, a6, v11, v12, v13);
  sub_10001B8AC(&v16);
  sub_10003AFB4((uint64_t)v17);
  return v14;
}

void sub_10033BA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14)
{
}

uint64_t sub_10033BA88(uint64_t a1, __int16 a2, __int16 a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_10033BB04;
  void v4[3] = &unk_1009A6878;
  __int16 v5 = a2;
  __int16 v6 = a3;
  return sub_10001A7D4(a1, 267, 1, v4, 0);
}

uint64_t sub_10033BB04()
{
  return sub_1002026C0();
}

uint64_t sub_10033BB24(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x10Du);
}

uint64_t sub_10033BB84(uint64_t a1, char a2, uint64_t a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_10033BC00;
  void v4[3] = &unk_1009A65D8;
  char v5 = a2;
  void v4[4] = a3;
  return sub_10001A7D4(a1, 269, 1, v4, 0);
}

uint64_t sub_10033BC00(uint64_t a1)
{
  return sub_10020274C(*(unsigned __int8 *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_10033BC20(int a1)
{
  char v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Init Done callback status=%d", (uint8_t *)v4, 8u);
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0x91u);
}

uint64_t sub_10033BCF8(uint64_t a1)
{
  return sub_10001A7D4(a1, 145, 1, &stru_1009A6E38, 0);
}

int sub_10033BD10(id a1)
{
  return sub_10020286C();
}

uint64_t sub_10033BD24(int a1)
{
  char v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Set Random Seed callback status=%d", (uint8_t *)v4, 8u);
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0x92u);
}

uint64_t sub_10033BDFC(uint64_t a1, uint64_t a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10033BE74;
  v3[3] = &unk_1009A6738;
  void v3[4] = a2;
  return sub_10001A7D4(a1, 146, 1, v3, 0);
}

uint64_t sub_10033BE74()
{
  return sub_100202984();
}

uint64_t sub_10033BE8C(int a1, __int16 a2, __int16 a3, __int16 a4, __int16 a5, __int16 a6, __int16 a7, __int16 a8, __int16 a9)
{
  char v17 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    v19[0] = 67109120;
    v19[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Get FW Versions callback status=%d", (uint8_t *)v19, 8u);
  }
  LOWORD(xmmword_100A121A0) = a2;
  WORD1(xmmword_100A121A0) = a3;
  WORD2(xmmword_100A121A0) = a4;
  WORD3(xmmword_100A121A0) = a5;
  WORD4(xmmword_100A121A0) = a6;
  WORD5(xmmword_100A121A0) = a7;
  WORD6(xmmword_100A121A0) = a8;
  HIWORD(xmmword_100A121A0) = a9;
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }
  return sub_100026140(a1, 0x90u);
}

uint64_t sub_10033BFCC(uint64_t a1, uint64_t a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10033C05C;
  v3[3] = &unk_100997528;
  void v3[4] = a2;
  return sub_10001A7D4(a1, 144, 1, &stru_1009A6E58, v3);
}

int sub_10033C048(id a1)
{
  return sub_1002028F8();
}

double sub_10033C05C(uint64_t a1)
{
  double result = *(double *)&xmmword_100A121A0;
  *(_OWORD *)*(void *)(a1 + 32) = xmmword_100A121A0;
  return result;
}

uint64_t sub_10033C070(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x10Fu);
}

uint64_t sub_10033C0D0(uint64_t a1, uint64_t a2, char a3, int *a4, uint64_t a5)
{
  uint64_t v8 = a1;
  int v9 = *a4;
  if (*a4 == 129)
  {
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    void v23[2] = sub_10033C594;
    v23[3] = &unk_1009A65F8;
    void v23[4] = a4;
    void v23[5] = a2;
    char v24 = a3;
    uint64_t v11 = 1;
    sub_10001A7D4(a1, 238, 1, v23, 0);
  }
  else
  {
    if (v9 == 128)
    {
      int v12 = *((unsigned __int8 *)a4 + 20);
      if (*((unsigned char *)a4 + 27))
      {
        v26[0] = _NSConcreteStackBlock;
        v26[1] = 3221225472;
        v26[2] = sub_10033C548;
        v26[3] = &unk_1009A6958;
        BOOL v13 = v12 != 0;
        uint8_t v26[4] = a2;
        v26[5] = a4;
        uint64_t v14 = v26;
        uint64_t v15 = 40;
      }
      else
      {
        v25[0] = _NSConcreteStackBlock;
        v25[1] = 3221225472;
        void v25[2] = sub_10033C568;
        v25[3] = &unk_1009A6958;
        BOOL v13 = v12 != 0;
        void v25[4] = a2;
        v25[5] = a4;
        uint64_t v14 = v25;
        uint64_t v15 = 32;
      }
      return sub_10001A7D4(a1, v15, v13, v14, 0);
    }
    if (v9)
    {
      return 1;
    }
    else
    {
      if (*((unsigned char *)a4 + 21))
      {
        BOOL v16 = *((unsigned char *)a4 + 20) != 0;
        v32[0] = _NSConcreteStackBlock;
        v32[1] = 3221225472;
        void v32[2] = sub_10033C470;
        v32[3] = &unk_1009A65F8;
        v32[4] = a5;
        void v32[5] = a4;
        char v33 = a3;
        int v10 = sub_10001A7D4(a1, 4, v16, v32, 0);
      }
      else
      {
        int v10 = 1;
      }
      if (v10) {
        BOOL v17 = v10 == 3603;
      }
      else {
        BOOL v17 = 1;
      }
      int v18 = v17;
      uint64_t v11 = v18 ^ 1u;
      int v19 = a4[1];
      if ((v19 & 1) != 0 && v18 && *((unsigned char *)a4 + 16))
      {
        BOOL v20 = *((unsigned char *)a4 + 20) != 0;
        v31[0] = _NSConcreteStackBlock;
        v31[1] = 3221225472;
        v31[2] = sub_10033C4C8;
        v31[3] = &unk_1009A6738;
        void v31[4] = a4;
        uint64_t v11 = sub_10001A7D4(v8, 174, v20, v31, 0);
        int v19 = a4[1];
      }
      if ((v19 & 4) != 0)
      {
        BOOL v21 = *((unsigned char *)a4 + 20) != 0;
        v29[0] = _NSConcreteStackBlock;
        v29[1] = 3221225472;
        void v29[2] = sub_10033C4EC;
        v29[3] = &unk_1009A65D8;
        char v30 = a3;
        uint8_t v29[4] = a4;
        uint64_t v11 = sub_10001A7D4(v8, 169, v21, v29, 0);
      }
      if ((*((unsigned char *)a4 + 21) & 2) != 0)
      {
        BOOL v13 = *((unsigned char *)a4 + 20) != 0;
        v27[0] = _NSConcreteStackBlock;
        v27[1] = 3221225472;
        v27[2] = sub_10033C51C;
        v27[3] = &unk_1009A65D8;
        void v27[4] = a2;
        char v28 = a3;
        uint64_t v14 = v27;
        a1 = v8;
        uint64_t v15 = 5;
        return sub_10001A7D4(a1, v15, v13, v14, 0);
      }
    }
  }
  return v11;
}

uint64_t sub_10033C470(uint64_t a1)
{
  int v4 = 0;
  uint64_t v1 = *(void *)(a1 + 40);
  if (*(unsigned char *)(v1 + 20)) {
    char v2 = sub_100325084;
  }
  else {
    char v2 = 0;
  }
  return sub_1001FBDA8(*(void *)(a1 + 32), *(unsigned int *)(v1 + 12), *(unsigned char *)(a1 + 48) != 0, &v4, (uint64_t)v2);
}

uint64_t sub_10033C4C8()
{
  return sub_1001F8EF0();
}

uint64_t sub_10033C4EC()
{
  return sub_1001F8640();
}

uint64_t sub_10033C51C(uint64_t a1)
{
  return sub_1001FD7AC(*(void *)(a1 + 32) + 48);
}

uint64_t sub_10033C548(uint64_t a1)
{
  return sub_1001FD880(*(void *)(a1 + 32), *(unsigned __int8 *)(*(void *)(a1 + 40) + 27), (uint64_t)sub_10032092C);
}

uint64_t sub_10033C568(uint64_t a1)
{
  return sub_1001FD3DC(*(unsigned __int16 **)(a1 + 32), *(unsigned char *)(*(void *)(a1 + 40) + 28) != 0, 0, (uint64_t)sub_100320828);
}

uint64_t sub_10033C594()
{
  return sub_1001FA4C0();
}

uint64_t sub_10033C5CC(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  int v4 = *(_DWORD *)a4;
  uint64_t v5 = 1;
  if (*(int *)a4 > 127)
  {
    if (v4 != 128)
    {
      if (v4 != 129) {
        return v5;
      }
      uint64_t v6 = a4 + 29;
      __int16 v7 = 3;
      goto LABEL_11;
    }
    uint64_t v6 = a4 + 27;
    goto LABEL_10;
  }
  if (!v4)
  {
    uint64_t v6 = a4 + 21;
LABEL_10:
    __int16 v7 = 2;
    goto LABEL_11;
  }
  if (v4 != 1) {
    return v5;
  }
  uint64_t v6 = a4 + 23;
  __int16 v7 = 4;
LABEL_11:
  BOOL v8 = *(unsigned char *)(a4 + 20) == 0;
  v11[0] = _NSConcreteStackBlock;
  int v9 = !v8;
  v11[1] = 3221225472;
  _DWORD v11[2] = sub_10033C6B8;
  v11[3] = &unk_1009A6918;
  char v13 = a3;
  void v11[4] = a2;
  void v11[5] = a4;
  __int16 v12 = v7;
  void v11[6] = v6;
  return sub_10001A7D4(a1, 271, v9, v11, 0);
}

uint64_t sub_10033C6B8()
{
  return sub_100202A10();
}

uint64_t sub_10033C6E8(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5)
{
  if (!a5)
  {
    int v10 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
      sub_100757BF0(v10, v11, v12, v13, v14, v15, v16, v17);
    }
  }
  char v22 = 0;
  sub_10001B8E0(&v22);
  uint64_t v18 = sub_100197B9C(a2);
  sub_10001B910(&v22);
  if (v18)
  {
    *(unsigned char *)(a5 + 20) = a4;
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1936))(a1)) {
      uint64_t v19 = sub_10033C5CC(a1, v18, a3, a5);
    }
    else {
      uint64_t v19 = sub_10033C0D0(a1, v18, a3, (int *)a5, a2);
    }
    uint64_t v20 = v19;
  }
  else
  {
    uint64_t v20 = 12;
  }
  sub_10001B8AC(&v22);
  return v20;
}

void sub_10033C800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_10033C814(uint64_t a1, uint64_t a2, int a3, char a4, char a5)
{
  if (!a2 || a3 != 128)
  {
    int v9 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
      sub_100757C68(v9, v10, v11, v12, v13, v14, v15, v16);
    }
  }
  *(_DWORD *)a2 = a3;
  *(unsigned char *)(a2 + 27) = a4;
  *(unsigned char *)(a2 + 28) = a5;
}

void sub_10033C890(uint64_t a1, uint64_t a2, int a3, char a4, int a5, int a6, int a7, int a8, char a9)
{
  if (!a2 || a3)
  {
    uint64_t v16 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
      sub_100757CE0(v16, v17, v18, v19, v20, v21, v22, v23);
    }
  }
  *(_DWORD *)a2 = a3;
  *(_DWORD *)(a2 + 4) = a5;
  *(_DWORD *)(a2 + 8) = a6;
  *(_DWORD *)(a2 + 12) = a7;
  *(unsigned char *)(a2 + 16) = a8;
  *(unsigned char *)(a2 + 17) = a9;
  *(unsigned char *)(a2 + 21) = a4;
  *(unsigned char *)(a2 + 22) = 0;
  if ((a5 & 1) != 0 && a8)
  {
    if (a6 == 22 || a6 == 17) {
      char v25 = 60;
    }
    else {
      char v25 = 45;
    }
    int v32 = 0;
    if (a9) {
      LOBYTE(v26) = 75;
    }
    else {
      LOBYTE(v26) = v25;
    }
    uint64_t v27 = sub_100017768();
    sub_10004191C(buf, "ePA");
    sub_10004191C(__p, "iPAMaxThreshold");
    int v28 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v27 + 88))(v27, buf, __p, &v32);
    if (v31 < 0) {
      operator delete(__p[0]);
    }
    if (v34 < 0)
    {
      operator delete(*(void **)buf);
      if (!v28)
      {
LABEL_24:
        *(unsigned char *)(a2 + 22) = v26;
        return;
      }
    }
    else if (!v28)
    {
      goto LABEL_24;
    }
    int v26 = -v32;
    __int16 v29 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v26;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Warning: Setting user defined iPA-Max threshold to -%d dBm through defaults write", buf, 8u);
    }
    goto LABEL_24;
  }
}

void sub_10033CA74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_10033CAB0(uint64_t a1, uint64_t a2, int a3, __int16 a4, char a5, char a6)
{
  if (!a2 || a3 != 1)
  {
    uint64_t v11 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
      sub_100757D58(v11, v12, v13, v14, v15, v16, v17, v18);
    }
  }
  *(_DWORD *)a2 = a3;
  *(_WORD *)(a2 + 23) = a4;
  *(unsigned char *)(a2 + 25) = a5;
  *(unsigned char *)(a2 + 26) = a6;
}

void sub_10033CB34(uint64_t a1, uint64_t a2, int a3, char a4, __int16 a5)
{
  if (!a2 || a3 != 129)
  {
    int v9 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
      sub_100757DD0(v9, v10, v11, v12, v13, v14, v15, v16);
    }
  }
  *(_DWORD *)a2 = a3;
  *(unsigned char *)(a2 + 29) = a4;
  *(_WORD *)(a2 + 30) = a5;
}

BOOL sub_10033CBB0(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 712);
  return v1 >= 0x7D0 && v1 <= 0xF9F && v1 != 2000;
}

void sub_10033CBE4(uint64_t a1)
{
  sub_10031717C(a1);

  operator delete();
}

uint64_t sub_10033CC1C()
{
  return 0;
}

uint64_t sub_10033CC24()
{
  return 0;
}

uint64_t sub_10033CC2C()
{
  return 1;
}

uint64_t sub_10033CC34()
{
  return 0;
}

uint64_t sub_10033CC3C()
{
  return 0;
}

uint64_t sub_10033CC44()
{
  return 0;
}

uint64_t sub_10033CC4C()
{
  return 0;
}

uint64_t sub_10033CC54()
{
  return 0;
}

uint64_t sub_10033CC5C()
{
  return 0;
}

uint64_t sub_10033CC64()
{
  return 0;
}

uint64_t sub_10033CC6C()
{
  return 0;
}

uint64_t sub_10033CC74()
{
  return 2;
}

uint64_t sub_10033CC7C()
{
  return 2;
}

uint64_t sub_10033CC84()
{
  return 2;
}

uint64_t sub_10033CC8C()
{
  return 2;
}

uint64_t sub_10033CC94()
{
  return 2;
}

uint64_t sub_10033CC9C()
{
  return 2;
}

uint64_t sub_10033CCA4()
{
  return 2;
}

uint64_t sub_10033CCAC()
{
  return 2;
}

uint64_t sub_10033CCB4()
{
  return 2;
}

uint64_t sub_10033CCBC()
{
  return 2;
}

uint64_t sub_10033CCC4()
{
  return 1;
}

void sub_10033CCCC(id a1)
{
}

void sub_10033CD10()
{
}

void sub_10033CD34(id a1)
{
}

void sub_10033CD78()
{
}

void sub_10033CD9C(id a1)
{
}

void sub_10033CDE0()
{
}

uint64_t *sub_10033CE04(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_10033CE5C(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_10033CE44(_Unwind_Exception *a1)
{
  sub_1000486F0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_10033CE5C(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    int v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      double result = sub_10033CEE8(v5, v6, v4 + 4, v4 + 4);
      __int16 v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          BOOL v8 = v7;
          __int16 v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          int v4 = v8;
        }
        while (!v9);
      }
      int v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_10033CEE8(uint64_t **a1, void *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v6 = (uint64_t **)sub_1002DF5F4(a1, a2, &v11, &v10, a3);
  __int16 v7 = *v6;
  if (!*v6)
  {
    BOOL v8 = v6;
    __int16 v7 = (uint64_t *)operator new(0x28uLL);
    void v7[4] = *a4;
    sub_100036CA0(a1, v11, v8, v7);
  }
  return v7;
}

void sub_10033CF74(id a1)
{
}

void sub_10033CFB8()
{
}

void sub_10033CFDC(id a1)
{
}

void sub_10033D020()
{
}

void sub_10033D044(id a1)
{
}

void sub_10033D1D4()
{
}

void sub_10033D1F8(id a1)
{
}

void sub_10033D23C()
{
}

void sub_10033D260(id a1)
{
}

void sub_10033D290(id a1)
{
}

void sub_10033D2E4()
{
}

void sub_10033D308(id a1)
{
}

void sub_10033D34C()
{
}

IOBTDebug *sub_10033D370(IOBTDebug **a1, IOBTDebug *a2)
{
  double result = *a1;
  *a1 = a2;
  if (result)
  {
    IOBTDebug::~IOBTDebug(result);
    operator delete();
  }
  return result;
}

void sub_10033D3C0(id a1)
{
}

void sub_10033D444()
{
  int v3 = *v2;
  if (*v2)
  {
    *(void *)(v0 + 48) = v3;
    operator delete(v3);
  }
  sub_10030F284(v1, *(void **)(v0 + 16));

  operator delete();
}

uint64_t **sub_10033D490(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  __int16 v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        BOOL v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        __int16 v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        __int16 v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    BOOL v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x28uLL);
    void v11[7] = **a4;
    *((unsigned char *)v11 + 32) = 0;
    sub_100036CA0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_10033D554(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 8u);
}

uint64_t sub_10033D570()
{
  uint64_t v0 = sub_100017768();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v0 + 8))(v0)) {
    goto LABEL_12;
  }
  unsigned int v10 = 0;
  uint64_t v1 = sub_100017768();
  sub_10004191C(buf, "HWRepair");
  sub_10004191C(__p, "BlueToolBTResult");
  char v2 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, unsigned int *))(*(void *)v1 + 88))(v1, buf, __p, &v10);
  if (v10) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    if (v3) {
      goto LABEL_9;
    }
LABEL_12:
    clock_gettime_nsec_np(_CLOCK_MONOTONIC);
    *(void *)std::string buf = 0;
    uint64_t v12 = buf;
    uint64_t v13 = 0x2020000000;
    int v14 = 0;
    operator new();
  }
  operator delete(*(void **)buf);
  if ((v3 & 1) == 0) {
    goto LABEL_12;
  }
LABEL_9:
  int v4 = qword_100A19E50;
  BOOL v5 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT);
  uint64_t v6 = v10;
  if (v5)
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v10;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Using override value (%d) for runBlueTool BTResult", buf, 8u);
    return v10;
  }
  return v6;
}

void sub_10033D8E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v28 - 105) < 0) {
    operator delete(*(void **)(v28 - 128));
  }
  _Unwind_Resume(exception_object);
}

void sub_10033D974(uint64_t a1)
{
  if (*(void *)(a1 + 120))
  {
    uint64_t v1 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
      sub_100757E48(v1);
    }
  }
  sub_1003733D8();
}

uint64_t sub_10033DA8C(void *a1, xpc_object_t object)
{
  uint64_t v4 = a1[5];
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_dictionary)
  {
    int64_t int64 = xpc_dictionary_get_int64(object, "result");
    uint64_t v9 = int64;
    BOOL v11 = int64 == 10 || int64 == 13;
    if (int64)
    {
      if ((int64 == 13 || int64 == 10) && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_100757F58();
      }
      uint64_t v12 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_100757ECC((uint64_t)a1, v9, v12);
      }
    }
    else
    {
      uint64_t v16 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = a1[6];
        *(_DWORD *)std::string __str = 136446210;
        *(void *)&__str[4] = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "BlueTool finished running %{public}s script", (uint8_t *)__str, 0xCu);
      }
    }
    if (v11) {
      int v13 = 2;
    }
    else {
      int v13 = 1;
    }
    if (!v9) {
      int v13 = 0;
    }
    *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = v13;
    *(_DWORD *)(v4 + 128) = *(_DWORD *)(*(void *)(a1[4] + 8) + 24);
    string = xpc_dictionary_get_string(object, "firmware");
    int64_t v15 = xpc_dictionary_get_int64(object, "manufacturer");
    if (string) {
      std::string::assign((std::string *)(v4 + 96), string);
    }
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    *(_OWORD *)std::string __str = 0u;
    long long v19 = 0u;
    snprintf(__str, 0x80uLL, "%lld/%s", v15, string);
    clock_gettime_nsec_np(_CLOCK_MONOTONIC);
    uint64_t result = sub_100050530();
    if (result)
    {
      __int16 v7 = *(uint64_t (**)(void))(*(void *)sub_100050530() + 64);
      return v7();
    }
  }
  else
  {
    BOOL v5 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_100757F8C((uint64_t)a1, v5);
    }
    *(_DWORD *)(v4 + 128) = 213;
    *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = 1;
    clock_gettime_nsec_np(_CLOCK_MONOTONIC);
    uint64_t result = sub_100050530();
    if (result)
    {
      __int16 v7 = *(uint64_t (**)(void))(*(void *)sub_100050530() + 64);
      return v7();
    }
  }
  return result;
}

uint64_t sub_10033DD98(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    sub_100277148(result);
    operator delete();
  }
  return result;
}

void sub_10033DDE0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 120);
  if (v2
    || (BOOL v5 = qword_100A19E50, os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT))
    && (int v6 = 136446210,
        __int16 v7 = "fPowerAssertion != NULL",
        _os_log_fault_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", (uint8_t *)&v6, 0xCu), (uint64_t v2 = *(void *)(a1 + 120)) != 0))
  {
    char v3 = qword_100A19F40;
    if (!os_log_type_enabled((os_log_t)qword_100A19F40, OS_LOG_TYPE_DEFAULT)
      || (uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2),
          int v6 = 136315138,
          __int16 v7 = (const char *)v4,
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Destroying %s", (uint8_t *)&v6, 0xCu),
          (uint64_t v2 = *(void *)(a1 + 120)) != 0))
    {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    *(void *)(a1 + 120) = 0;
  }
}

void sub_10033DF58(uint64_t a1, int a2)
{
  if (a2)
  {
    if (!*(unsigned char *)(a1 + 132))
    {
      int v3 = dword_100A123A8++;
      __uint64_t v4 = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
      uint64_t v5 = v4;
      if (v3)
      {
        if (v4 > qword_100A123B0 + 5000000000)
        {
          int v6 = qword_100A19E50;
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEBUG)) {
            sub_100758190(v5, v6);
          }
          int v7 = dword_100A123A8;
          if (dword_100A123A8 < 0xB)
          {
            dword_100A123A8 = 0;
            unsigned int v10 = qword_100A19E50;
            if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEBUG)) {
              sub_100758114(v10);
            }
          }
          else
          {
            int v8 = qword_100A19E50;
            if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEBUG)) {
              sub_100758080(v5, v7, v8);
            }
            *(unsigned char *)(a1 + 132) = 1;
          }
        }
      }
      else
      {
        qword_100A123B0 = v4;
        uint64_t v9 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEBUG)) {
          sub_100758008(v5, v9);
        }
      }
    }
  }
  else
  {
    dword_100A123A8 = 0;
    *(unsigned char *)(a1 + 132) = 0;
  }
}

void sub_10033E0A0()
{
}

void sub_10033E22C()
{
}

void sub_10033E264(uint64_t a1, xpc_object_t object)
{
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_dictionary)
  {
    string = xpc_dictionary_get_string(object, "output");
    if (string) {
      strlcpy(*(char **)(a1 + 40), string, *(void *)(a1 + 48));
    }
    int v6 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 56);
      uint64_t v8 = *(void *)(a1 + 40);
      int v9 = 136446466;
      uint64_t v10 = v7;
      __int16 v11 = 2082;
      uint64_t v12 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "BlueTool finished running \"%{public}s\" command - output was \"%{public}s\"", (uint8_t *)&v9, 0x16u);
    }
  }
  else
  {
    __uint64_t v4 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10075821C(a1, v4);
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
}

uint64_t sub_10033E398(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    sub_100277148(result);
    operator delete();
  }
  return result;
}

uint64_t sub_10033E3E0(uint64_t a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Booting chipset", v5, 2u);
  }
  uint64_t v3 = sub_10033E4EC(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 144))(a1, v3);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 136))(a1) == 11) {
    return sub_10033D570();
  }
  else {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  }
}

uint64_t sub_10033E4EC(uint64_t a1)
{
  __int16 v29 = 0;
  int v28 = 0;
  sub_10018F638((uint64_t)&v28);
  if (sub_10016B718() != 7 && sub_10016B718() != 8 || sub_10016AA08()) {
    return 11;
  }
  char v27 = 0;
  uint64_t v4 = sub_100017768();
  sub_10004191C(__p, "ChipBoot");
  sub_10004191C(&buf, "DisableInitChipSimpleFast");
  (*(void (**)(uint64_t, unsigned char *, std::string *, char *))(*(void *)v4 + 72))(v4, __p, &buf, &v27);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  uint64_t v5 = qword_100A19E50;
  if (v27)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_1007582D8();
    }
    return 11;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string __p = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Booting chipset simple and fast", __p, 2u);
  }
  __uint64_t v6 = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
  int v26 = 0;
  long long v25 = 0;
  memset(&__p[4], 0, 60);
  *(_DWORD *)std::string __p = 1818845542;
  uint64_t v7 = sub_10003FFD4();
  sub_10004191C(v23, ".bin");
  uint64_t v8 = (void **)(a1 + 96);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, void **, void **, int *, uint64_t))(*(void *)v7 + 408))(v7, v23, &v25, &v26, a1 + 96);
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
      sub_100758298();
    }
    goto LABEL_28;
  }
  unsigned int v9 = sub_10016ABB0();
  if (!v9)
  {
    uint64_t v10 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Function Level Reset (FLR) of Bluetooth PCIe transport -- Completed", (uint8_t *)&buf, 2u);
    }
    int v11 = sub_10016ABC8();
    if (!v11)
    {
      int64_t v15 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "PCIe successfully transferred firmware image file", (uint8_t *)&buf, 2u);
      }
      if (!std::string::compare((const std::string *)(a1 + 96), 0, 0xEuLL, "/etc/bluetool/"))
      {
        *(_OWORD *)std::string __p = *(_OWORD *)"override";
        memset(&__p[16], 0, 48);
      }
      else
      {
        uint64_t v16 = sub_10003FFD4();
        (*(void (**)(std::string *__return_ptr))(*(void *)v16 + 344))(&buf);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        {
          uint64_t v17 = (void *)buf.__r_.__value_.__r.__words[0];
          strncpy(__p, buf.__r_.__value_.__l.__data_, 0x40uLL);
          operator delete(v17);
        }
        else
        {
          strncpy(__p, (const char *)&buf, 0x40uLL);
        }
        __p[63] = 0;
        std::string::size_type v18 = std::string::rfind((const std::string *)(a1 + 96), 47, 0xFFFFFFFFFFFFFFFFLL);
        std::string::basic_string(&buf, (const std::string *)(a1 + 96), v18 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v30);
        if (*(char *)(a1 + 119) < 0) {
          operator delete(*v8);
        }
        *(_OWORD *)uint64_t v8 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
        *(void *)(a1 + 112) = *((void *)&buf.__r_.__value_.__l + 2);
      }
      long long v19 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a1 + 119) < 0) {
          uint64_t v8 = (void **)*v8;
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Setting firmware filename to %s", (uint8_t *)&buf, 0xCu);
      }
      uint64_t v20 = sub_1003705E4();
      (*(void (**)(uint64_t, int *))(*(void *)v20 + 32))(v20, &v28);
      sub_10018F638((uint64_t)&v28);
      long long v21 = qword_100A19E50;
      uint64_t v2 = 0;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        sub_1004A82EC((unsigned __int8 *)&v28, &buf);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)char v30 = 136315138;
        char v31 = p_buf;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Providing the local device address of %s", v30, 0xCu);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        uint64_t v2 = 0;
      }
      goto LABEL_28;
    }
    if (v11 != 1220)
    {
      uint64_t v2 = 2410;
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v9 == 1220)
  {
LABEL_27:
    uint64_t v2 = 2411;
    goto LABEL_28;
  }
  uint64_t v2 = 2408;
LABEL_28:
  if (v25) {
    free(v25);
  }
  uint64_t v12 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = v2;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Booting chipset simple and fast returns %d", (uint8_t *)&buf, 8u);
  }
  __uint64_t v13 = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
  if (sub_100050530())
  {
    uint64_t v14 = sub_100050530();
    (*(void (**)(uint64_t, unsigned char *, uint64_t, const char *, __uint64_t))(*(void *)v14 + 64))(v14, __p, v2, "boot", (v13 - v6) / 0xF4240);
  }
  return v2;
}

void sub_10033EAA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10033EAF4(uint64_t a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Powering on chipset", v4, 2u);
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 136))(a1) == 11) {
    return sub_10033D570();
  }
  else {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  }
}

uint64_t sub_10033EBCC(uint64_t a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Powering off chipset", v4, 2u);
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 136))(a1) == 11) {
    return sub_10033D570();
  }
  else {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  }
}

uint64_t sub_10033ECA4(uint64_t a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Resetting chipset", v4, 2u);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (!result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
  }
  return result;
}

uint64_t sub_10033ED64(int a1, char *name, uint64_t a3)
{
  CFDictionaryRef v4 = IOServiceNameMatching(name);
  if (!v4) {
    return 1;
  }
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v4);
  if (!MatchingService) {
    return 1;
  }
  io_object_t v6 = MatchingService;
  __int16 v13 = 0;
  *(_DWORD *)__int16 buffer = 0;
  uint64_t v7 = 1;
  CFDataRef v8 = (const __CFData *)IORegistryEntrySearchCFProperty(MatchingService, "IODeviceTree", @"local-mac-address", kCFAllocatorDefault, 1u);
  if (v8)
  {
    CFDataRef v9 = v8;
    v18.location = 0;
    v18.size_t length = 6;
    CFDataGetBytes(v8, v18, buffer);
    *(_DWORD *)a3 = *(_DWORD *)buffer;
    *(_WORD *)(a3 + 4) = v13;
    uint64_t v10 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 68157954;
      int v15 = 6;
      __int16 v16 = 2096;
      uint64_t v17 = buffer;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "DeviceTree address = %{bluetooth:BD_ADDR}.6P", buf, 0x12u);
    }
    CFRelease(v9);
    uint64_t v7 = 0;
  }
  IOObjectRelease(v6);
  return v7;
}

uint64_t sub_10033EECC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 80))
  {
LABEL_2:
    int v3 = *(_DWORD *)(a1 + 80);
    *(_WORD *)(a2 + 4) = *(_WORD *)(a1 + 84);
    *(_DWORD *)a2 = v3;
    return 0;
  }
  uint64_t v5 = 0;
  while (v5 != 5)
  {
    if (*(unsigned __int8 *)(a1 + 81 + v5++))
    {
      if ((unint64_t)(v5 - 1) <= 4) {
        goto LABEL_2;
      }
      break;
    }
  }
  int v7 = sub_10033ED64(a1, "marconi-bt", a2);
  if (!v7) {
    return 0;
  }

  return sub_10033ED64(v7, "bluetooth", a2);
}

uint64_t sub_10033EF70(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(_WORD *)(result + 84) = *((_WORD *)a2 + 2);
  *(_DWORD *)(result + 80) = v2;
  return result;
}

uint64_t sub_10033EF84()
{
  return 203;
}

uint64_t sub_10033EF8C()
{
  return 203;
}

uint64_t sub_10033EF94(uint64_t a1, std::string *this)
{
  if (*(char *)(a1 + 119) < 0)
  {
    if (*(void *)(a1 + 104)) {
      goto LABEL_3;
    }
  }
  else if (*(unsigned char *)(a1 + 119))
  {
LABEL_3:
    std::string::operator=(this, (const std::string *)(a1 + 96));
    return 0;
  }
  return 203;
}

uint64_t sub_10033EFDC(std::string *a1, const std::string *a2)
{
  std::string::operator=(a1 + 4, a2);
  return 0;
}

uint64_t sub_10033EFFC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 132)) {
    return 214;
  }
  else {
    return *(unsigned int *)(a1 + 128);
  }
}

uint64_t sub_10033F014()
{
  CFPropertyListRef v0 = CFPreferencesCopyAppValue(@"defaultPoweredState", @"com.apple.BTServer");
  if (v0)
  {
    uint64_t v1 = v0;
    if (CFEqual(v0, @"off"))
    {
      uint64_t v2 = 0;
    }
    else
    {
      CFEqual(v1, @"on");
      uint64_t v2 = 1;
    }
    CFRelease(v1);
  }
  else
  {
    uint64_t v2 = 1;
  }
  int v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Default power state : %d", (uint8_t *)v5, 8u);
  }
  return v2;
}

uint64_t sub_10033F110(uint64_t a1, int a2)
{
  int v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109120;
    v7[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Write default power state : %d", (uint8_t *)v7, 8u);
  }
  CFStringRef v4 = @"on";
  if (a2 != 1) {
    CFStringRef v4 = 0;
  }
  if (a2) {
    CFStringRef v5 = v4;
  }
  else {
    CFStringRef v5 = @"off";
  }
  CFPreferencesSetAppValue(@"defaultPoweredState", v5, @"com.apple.BTServer");
  return CFPreferencesAppSynchronize(@"com.apple.BTServer");
}

uint64_t sub_10033F1F4()
{
  CFPropertyListRef v0 = CFPreferencesCopyAppValue(@"defaultAirplaneModePowerState", @"com.apple.BTServer");
  if (v0)
  {
    uint64_t v1 = v0;
    if (CFEqual(v0, @"off"))
    {
      uint64_t v2 = 0;
    }
    else
    {
      CFEqual(v1, @"on");
      uint64_t v2 = 1;
    }
    CFRelease(v1);
  }
  else
  {
    uint64_t v2 = 1;
  }
  int v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Default airplane mode power state : %d", (uint8_t *)v5, 8u);
  }
  return v2;
}

uint64_t sub_10033F2F0(uint64_t a1, int a2)
{
  int v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109120;
    v7[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Write default airplane mode power state : %d", (uint8_t *)v7, 8u);
  }
  CFStringRef v4 = @"on";
  if (a2 != 1) {
    CFStringRef v4 = 0;
  }
  if (a2) {
    CFStringRef v5 = v4;
  }
  else {
    CFStringRef v5 = @"off";
  }
  CFPreferencesSetAppValue(@"defaultAirplaneModePowerState", v5, @"com.apple.BTServer");
  return CFPreferencesAppSynchronize(@"com.apple.BTServer");
}

uint64_t sub_10033F3D4(uint64_t a1, int a2, int a3)
{
  int valuePtr = a3;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFDateRef v6 = CFDateCreate(kCFAllocatorDefault, Current + (double)a2);
  if (!v6)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10075830C();
    }
    return 1;
  }
  CFDateRef v7 = v6;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 3, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    CFRelease(v7);
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_100758340();
    }
    return 1;
  }
  CFDataRef v9 = Mutable;
  CFDictionarySetValue(Mutable, @"scheduledby", @"BT_Wakeup");
  CFDictionarySetValue(v9, @"time", v7);
  if (a3 >= 1)
  {
    CFNumberRef v10 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
    if (v10)
    {
      CFNumberRef v11 = v10;
      CFDictionarySetValue(v9, @"leeway", v10);
      CFRelease(v11);
    }
  }
  int v12 = IOPMRequestSysWake();
  CFRelease(v9);
  CFRelease(v7);
  if (v12)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_100758374();
    }
    return 1;
  }
  return 0;
}

uint64_t sub_10033F568(uint64_t a1)
{
  return *(unsigned int *)(a1 + 88);
}

uint64_t sub_10033F570(uint64_t result, int a2)
{
  *(_DWORD *)(result + 88) = a2;
  return result;
}

uint64_t sub_10033F578(uint64_t a1)
{
  *(void *)a1 = off_1009A7148;
  *(void *)(a1 + 8) = off_1009A7208;
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  sub_100052DA4(a1 + 16);
  return a1;
}

void sub_10033F5F0(uint64_t a1)
{
  *(void *)a1 = off_1009A7148;
  *(void *)(a1 + 8) = off_1009A7208;
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  sub_100052DA4(a1 + 16);

  operator delete();
}

void sub_10033F690(uint64_t a1, char a2, char a3, int a4)
{
  *(void *)a1 = off_1009A7230;
  *(unsigned char *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 9) = a3;
  *(_DWORD *)(a1 + 12) = a4;
  sub_100052DA8(a1 + 16);
  sub_100052DA8(a1 + 88);
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 152) = a1 + 160;
  *(void *)(a1 + 168) = 0;
  sub_100052DA8(a1 + 176);
  operator new();
}

void sub_10033F764()
{
}

uint64_t sub_10033F7C4(uint64_t a1)
{
  *(void *)a1 = off_1009A7230;
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2)
  {
    sub_1004AFF30(v2);
    operator delete();
  }
  sub_100052DA4(a1 + 176);
  sub_1000486F0(a1 + 152, *(void **)(a1 + 160));
  sub_100052DA4(a1 + 88);
  sub_100052DA4(a1 + 16);
  return a1;
}

id sub_10033F850(uint64_t a1, unint64_t a2)
{
  v13[1] = 0;
  unint64_t v14 = a2;
  v13[0] = 0;
  sub_10003AED0((uint64_t)v13, a1 + 88);
  CFDateRef v6 = *(void **)(a1 + 160);
  CFStringRef v5 = (void *)(a1 + 160);
  CFStringRef v4 = v6;
  if (!v6) {
    goto LABEL_12;
  }
  CFDateRef v7 = v5;
  do
  {
    unint64_t v8 = v4[4];
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      CFNumberRef v10 = v4;
    }
    else {
      CFNumberRef v10 = v4 + 1;
    }
    if (v9) {
      CFDateRef v7 = v4;
    }
    CFStringRef v4 = (void *)*v10;
  }
  while (*v10);
  if (v7 != v5 && v7[4] <= a2)
  {
    int v15 = &v14;
    CFNumberRef v11 = +[NSString stringWithUTF8String:*(void *)(sub_1000097B0((uint64_t **)v5 - 1, &v14, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v15)[5] + 8)];
  }
  else
  {
LABEL_12:
    CFNumberRef v11 = 0;
  }
  sub_10003AFB4((uint64_t)v13);

  return v11;
}

void sub_10033F930(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10033F944(uint64_t a1, unint64_t a2)
{
  v22[1] = 0;
  unint64_t v23 = a2;
  v22[0] = 0;
  sub_10003AED0((uint64_t)v22, a1 + 88);
  CFStringRef v5 = (uint64_t **)(a1 + 160);
  CFStringRef v4 = *(void **)(a1 + 160);
  if (v4)
  {
    CFDateRef v6 = (uint64_t **)(a1 + 160);
    do
    {
      unint64_t v7 = v4[4];
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        BOOL v9 = v4;
      }
      else {
        BOOL v9 = v4 + 1;
      }
      if (v8) {
        CFDateRef v6 = (uint64_t **)v4;
      }
      CFStringRef v4 = (void *)*v9;
    }
    while (*v9);
    if (v6 != v5 && (unint64_t)v6[4] <= a2) {
      goto LABEL_15;
    }
  }
  uint64_t v10 = *(void *)(a1 + 168);
  sub_10003AFE8((uint64_t)v22);
  if (!*(unsigned char *)(a1 + 9) && v10)
  {
    sub_10003AF00((uint64_t)v22);
    uint64_t v11 = *(void *)(*(void *)(a1 + 152) + 40);
    *(void *)&__s1[0] = &v23;
    sub_1000097B0(v5 - 1, &v23, (uint64_t)&unk_1007BE9D0, (uint64_t **)__s1)[5] = v11;
LABEL_15:
    uint64_t v12 = 1;
    goto LABEL_22;
  }
  *(void *)long long v21 = 0;
  memset(__s1, 0, sizeof(__s1));
  memset(&v31, 0, sizeof(v31));
  int v13 = openpty(&v21[1], v21, (char *)__s1, 0, 0);
  unint64_t v14 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109890;
    *(_DWORD *)&uint8_t buf[4] = v21[1];
    __int16 v25 = 1024;
    int v26 = v21[0];
    __int16 v27 = 2080;
    int v28 = __s1;
    __int16 v29 = 1024;
    int v30 = v13;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Tried to open PTY with central = %d, peripheral = %d, name = %s - result was %d", buf, 0x1Eu);
  }
  if (!v13)
  {
    if (*(unsigned char *)(a1 + 8) == 2)
    {
      int v18 = fcntl(v21[1], 3);
      long long v19 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Flags are 0x%08x", buf, 8u);
      }
      fcntl(v21[1], 4, v18 | 4u);
    }
    tcgetattr(v21[1], &v31);
    cfsetspeed(&v31, 0x38400uLL);
    cfmakeraw(&v31);
    tcsetattr(v21[1], 0, &v31);
    int v20 = 3145728;
    ioctl(v21[1], 0x80085402uLL, &v20);
    operator new();
  }
  int v15 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
  {
    __int16 v16 = __error();
    sub_1007583A8(v16, buf, v15);
  }
  uint64_t v12 = 0;
LABEL_22:
  sub_10003AFB4((uint64_t)v22);
  return v12;
}

void sub_10033FECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10033FF20(uint64_t a1)
{
  return sub_10033FF2C(*(void *)(a1 + 32), *(void *)(a1 + 40));
}

uint64_t sub_10033FF2C(uint64_t a1, unint64_t a2)
{
  v31[1] = 0;
  unint64_t v32 = a2;
  v31[0] = 0;
  sub_10003AED0((uint64_t)v31, a1 + 88);
  CFStringRef v4 = *(void **)(a1 + 160);
  if (!v4) {
    goto LABEL_12;
  }
  CFStringRef v5 = (void *)(a1 + 160);
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      BOOL v8 = v4;
    }
    else {
      BOOL v8 = v4 + 1;
    }
    if (v7) {
      CFStringRef v5 = v4;
    }
    CFStringRef v4 = (void *)*v8;
  }
  while (*v8);
  if (v5 != (void *)(a1 + 160) && v5[4] <= a2)
  {
    v30[0] = (uint64_t *)&v32;
    uint64_t v17 = sub_1000097B0((uint64_t **)(a1 + 152), &v32, (uint64_t)&unk_1007BE9D0, v30)[5];
    sub_10003AFE8((uint64_t)v31);
    v30[0] = 0;
    v30[1] = 0;
    sub_10003AED0((uint64_t)v30, a1 + 176);
    ssize_t v18 = read(*(_DWORD *)v17, *(void **)(v17 + 40), *(unsigned int *)(a1 + 12));
    if (v18 < 1)
    {
      __int16 v27 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
      {
        int v28 = __error();
        sub_100758464(v28, buf, v27);
      }
    }
    else
    {
      *(unsigned char *)(v17 + 32) = 1;
      dispatch_suspend(*(dispatch_object_t *)(v17 + 24));
      if (((*(uint64_t (**)(uint64_t, unint64_t, void, ssize_t))(*(void *)a1 + 24))(a1, v32, *(void *)(v17 + 40), v18) & 1) == 0)
      {
        long long v19 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
          sub_10075842C(v19, v20, v21, v22, v23, v24, v25, v26);
        }
      }
    }
    sub_10003AFB4((uint64_t)v30);
  }
  else
  {
LABEL_12:
    BOOL v9 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_1007583F4(v9, v10, v11, v12, v13, v14, v15, v16);
    }
  }
  return sub_10003AFB4((uint64_t)v31);
}

void sub_100340110(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_10003AFB4((uint64_t)va);
  sub_10003AFB4((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_100340144(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v2 + 32))
  {
    dispatch_release(*(dispatch_object_t *)(v2 + 24));
    uint64_t v2 = *(void *)(a1 + 32);
  }
  uint64_t result = close(*(_DWORD *)v2);
  **(_DWORD **)(a1 + 32) = -1;
  return result;
}

void sub_100340190(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 80);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_100340204;
  v3[3] = &unk_100998260;
  void v3[4] = a1;
  void v3[5] = a2;
  sub_100013018(v2, v3);
}

uint64_t sub_100340204(uint64_t a1)
{
  return sub_100340210(*(void *)(a1 + 32), *(void *)(a1 + 40));
}

uint64_t sub_100340210(uint64_t a1, unint64_t a2)
{
  v14[1] = 0;
  unint64_t v15 = a2;
  v14[0] = 0;
  sub_10003AED0((uint64_t)v14, a1 + 88);
  CFStringRef v4 = *(void **)(a1 + 160);
  if (v4)
  {
    uint64_t v5 = (uint64_t **)(a1 + 152);
    unint64_t v6 = (void *)(a1 + 160);
    do
    {
      unint64_t v7 = v4[4];
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        BOOL v9 = v4;
      }
      else {
        BOOL v9 = v4 + 1;
      }
      if (v8) {
        unint64_t v6 = v4;
      }
      CFStringRef v4 = (void *)*v9;
    }
    while (*v9);
    if (v6 != (void *)(a1 + 160) && v6[4] <= a2)
    {
      v13[0] = (uint64_t *)&v15;
      uint64_t v10 = sub_1000097B0(v5, &v15, (uint64_t)&unk_1007BE9D0, v13)[5];
      sub_1000517A4((uint64_t)v5, &v15);
      if (*(unsigned char *)(a1 + 9) || !*(void *)(a1 + 168))
      {
        v13[0] = 0;
        v13[1] = 0;
        sub_10003AED0((uint64_t)v13, a1 + 176);
        sub_1004AFEC4(*(void *)(v10 + 16));
        uint64_t v11 = *(NSObject **)(v10 + 24);
        if (!v11) {
          sub_100340384(v10);
        }
        dispatch_set_finalizer_f(v11, (dispatch_function_t)sub_100340384);
        dispatch_set_context(*(dispatch_object_t *)(v10 + 24), (void *)v10);
        if (*(unsigned char *)(v10 + 32))
        {
          *(unsigned char *)(v10 + 32) = 0;
          dispatch_resume(*(dispatch_object_t *)(v10 + 24));
        }
        dispatch_source_cancel(*(dispatch_source_t *)(v10 + 24));
        sub_10003AFB4((uint64_t)v13);
      }
    }
  }
  return sub_10003AFB4((uint64_t)v14);
}

void sub_10034035C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100340384(uint64_t a1)
{
  close(*(_DWORD *)(a1 + 4));
  *(_DWORD *)(a1 + 4) = -1;
  free(*(void **)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  free(*(void **)(a1 + 40));
  *(void *)(a1 + 40) = 0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_1004AFF30(v2);
    operator delete();
  }

  operator delete();
}

void sub_100340410(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  _DWORD v2[2] = sub_100340484;
  v2[3] = &unk_100997528;
  void v2[4] = a1;
  sub_100013018(v1, v2);
}

uint64_t sub_100340484(uint64_t a1)
{
  return sub_10034048C(*(void *)(a1 + 32));
}

uint64_t sub_10034048C(uint64_t a1)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 88);
  while (1)
  {
    uint64_t v2 = *(void *)(a1 + 152);
    if (v2 == a1 + 160) {
      break;
    }
    unint64_t v3 = *(void *)(v2 + 32);
    sub_10003AFE8((uint64_t)v5);
    sub_100340210(a1, v3);
    sub_10003AF00((uint64_t)v5);
  }
  return sub_10003AFB4((uint64_t)v5);
}

void sub_100340508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10034051C(uint64_t a1, unint64_t a2, uint64_t a3, int a4, int a5)
{
  v27[1] = 0;
  unint64_t v28 = a2;
  v27[0] = 0;
  sub_10003AED0((uint64_t)v27, a1 + 88);
  uint64_t v12 = *(void **)(a1 + 160);
  uint64_t v11 = (void *)(a1 + 160);
  uint64_t v10 = v12;
  if (v12)
  {
    uint64_t v13 = v11;
    do
    {
      unint64_t v14 = v10[4];
      BOOL v15 = v14 >= a2;
      if (v14 >= a2) {
        uint64_t v16 = v10;
      }
      else {
        uint64_t v16 = v10 + 1;
      }
      if (v15) {
        uint64_t v13 = v10;
      }
      uint64_t v10 = (void *)*v16;
    }
    while (*v16);
    if (v13 != v11 && v13[4] <= a2)
    {
      __int16 v29 = &v28;
      uint64_t v17 = sub_1000097B0((uint64_t **)v11 - 1, &v28, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v29)[5];
      ssize_t v18 = +[NSData dataWithBytes:a3 length:a4];
      uint64_t v19 = 4;
      if (!a5) {
        uint64_t v19 = 0;
      }
      int v20 = *(_DWORD *)(v17 + v19);
      uint64_t v21 = *(void *)(v17 + 16);
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      void v24[2] = sub_1003406A8;
      void v24[3] = &unk_100997550;
      id v25 = v18;
      int v26 = v20;
      id v22 = v18;
      sub_100013018(v21, v24);
    }
  }
  return sub_10003AFB4((uint64_t)v27);
}

void sub_10034067C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, ...)
{
  va_start(va, a8);

  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1003406A8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) length];
  if (v2 != (id) write(*(_DWORD *)(a1 + 40), [*(id *)(a1 + 32) bytes], (size_t)objc_msgSend(*(id *)(a1 + 32), "length")))
  {
    unint64_t v3 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_1007584B0(v3);
    }
  }
}

uint64_t sub_100340738(uint64_t a1, unint64_t a2)
{
  v21[1] = 0;
  unint64_t v22 = a2;
  v21[0] = 0;
  sub_10003AED0((uint64_t)v21, a1 + 88);
  unint64_t v6 = *(void **)(a1 + 160);
  uint64_t v5 = (void *)(a1 + 160);
  CFStringRef v4 = v6;
  if (!v6) {
    goto LABEL_12;
  }
  unint64_t v7 = v5;
  do
  {
    unint64_t v8 = v4[4];
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      uint64_t v10 = v4;
    }
    else {
      uint64_t v10 = v4 + 1;
    }
    if (v9) {
      unint64_t v7 = v4;
    }
    CFStringRef v4 = (void *)*v10;
  }
  while (*v10);
  if (v7 != v5 && v7[4] <= a2)
  {
    uint64_t v23 = &v22;
    uint64_t v20 = sub_1000097B0((uint64_t **)v5 - 1, &v22, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v23)[5];
    sub_10003AFE8((uint64_t)v21);
    if (*(unsigned char *)(v20 + 32))
    {
      *(unsigned char *)(v20 + 32) = 0;
      dispatch_resume(*(dispatch_object_t *)(v20 + 24));
    }
  }
  else
  {
LABEL_12:
    uint64_t v11 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_1007583F4(v11, v12, v13, v14, v15, v16, v17, v18);
    }
  }
  return sub_10003AFB4((uint64_t)v21);
}

void sub_10034082C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100340840()
{
  CFPropertyListRef v0 = *(uint64_t (**)(void))(*(void *)sub_100052E70() + 176);

  return v0();
}

uint64_t sub_1003408C8(uint64_t a1)
{
  *(void *)a1 = off_1009A7260;
  *(void *)(a1 + 8) = off_1009A7620;
  *(void *)(a1 + 16) = -1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = &off_1009A78C8;
  sub_10034FEE4(a1 + 72);
  *(_WORD *)(a1 + 92) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 5;
  *(unsigned char *)(a1 + 100) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  *(unsigned char *)(a1 + 127) = 0;
  *(unsigned char *)(a1 + 218) = 0;
  *(_WORD *)(a1 + 220) = 0;
  *(unsigned char *)(a1 + 222) = 0;
  *(_DWORD *)(a1 + 176) = 0;
  *(unsigned char *)(a1 + 180) = 0;
  *(void *)(a1 + 183) = 0;
  *(void *)(a1 + 190) = 0;
  *(_DWORD *)(a1 + 224) = 1;
  *(unsigned char *)(a1 + 228) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  *(_WORD *)(a1 + 241) = 0;
  *(_DWORD *)(a1 + 237) = 0;
  *(_DWORD *)(a1 + 243) = 257;
  *(unsigned char *)(a1 + 247) = 1;
  *(void *)(a1 + 248) = 0;
  *(unsigned char *)(a1 + 257) = 1;
  *(void *)(a1 + 268) = &_mh_execute_header;
  *(void *)(a1 + 258) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 60000;
  sub_100052DA8(a1 + 296);
  *(unsigned char *)(a1 + 360) = 0;
  *(_WORD *)(a1 + 198) = 0;
  *(unsigned char *)(a1 + 204) = 0;
  *(unsigned char *)(a1 + 219) = 0;
  *(_DWORD *)(a1 + 172) = 0;
  *(_DWORD *)(a1 + 212) = 0;
  *(_WORD *)(a1 + 216) = 0;
  unint64_t v3 = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 1uLL, 1);
  id v4 = objc_alloc((Class)NSString);
  uint64_t v5 = [v3 objectAtIndexedSubscript:0];
  id v6 = [v4 initWithFormat:@"%@/Logs/Bluetooth", v5];
  unint64_t v7 = (void *)qword_100A123B8;
  qword_100A123B8 = (uint64_t)v6;

  unint64_t v8 = [(id)qword_100A123B8 stringByAppendingPathComponent:@"PacketLogs"];
  id v9 = [v8 copy];
  uint64_t v10 = (void *)qword_100A123C0;
  qword_100A123C0 = (uint64_t)v9;

  *(void *)(a1 + 24) = dispatch_queue_create("com.apple.MobileBluetooth.debugSettings", 0);
  return a1;
}

void sub_100340AE8(_Unwind_Exception *a1)
{
  sub_100052DA4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100340B20(uint64_t a1)
{
  *(void *)a1 = off_1009A7260;
  uint64_t v2 = a1 + 8;
  *(void *)(a1 + 8) = off_1009A7620;
  notify_cancel(*(_DWORD *)(a1 + 20));
  notify_cancel(*(_DWORD *)(a1 + 16));
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A7798);
  }
  sub_100052718((uint64_t)off_1009F8068 + 64, v2);
  sub_100052DA4(a1 + 296);
  return a1;
}

void sub_100340BD4(_Unwind_Exception *a1)
{
  sub_100052DA4(v1 + 296);
  _Unwind_Resume(a1);
}

void sub_100340BEC(uint64_t a1)
{
  sub_100340B20(a1);

  operator delete();
}

void sub_100340C24(unsigned char *a1, BOOL *a2, BOOL *a3, unsigned __int8 *a4)
{
  char v23 = 0;
  BOOL v8 = ((*(uint64_t (**)(unsigned char *))(*(void *)a1 + 8))(a1) & 1) != 0 || a1[89] != 0;
  *a2 = v8;
  BOOL v9 = ((*(uint64_t (**)(unsigned char *))(*(void *)a1 + 8))(a1) & 1) != 0 || a1[89] != 0;
  *a3 = v9;
  int v10 = *(_DWORD *)(sub_10003FB34() + 712);
  uint64_t v11 = *(void *)sub_100035F54();
  if ((*(unsigned int (**)(void))(v11 + 344))()) {
    BOOL v12 = v10 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12 && v10 == 9)
  {
    *a2 = 0;
    *a3 = 0;
  }
  sub_10004191C(buf, "HCITraces");
  sub_10004191C(__p, "StackDebugEnabled");
  (*(void (**)(unsigned char *, unsigned char *, void **, char *))(*(void *)a1 + 72))(a1, buf, __p, &v23);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(*(void **)buf);
  }
  if (v23)
  {
    *a2 = 1;
    *a3 = 1;
  }
  if (!(*(unsigned int (**)(unsigned char *))(*(void *)a1 + 8))(a1)) {
    goto LABEL_31;
  }
  unsigned __int8 v20 = 0;
  sub_10004191C(buf, "Stack");
  sub_10004191C(__p, "HCILiteLogging");
  (*(void (**)(unsigned char *, unsigned char *, void **, unsigned __int8 *))(*(void *)a1 + 72))(a1, buf, __p, &v20);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(*(void **)buf);
  }
  int v13 = _os_feature_enabled_impl();
  if ((v13 & ~(*(unsigned int (**)(unsigned char *))(*(void *)a1 + 8))(a1)) != 1 || v23)
  {
    if (((*(unsigned int (**)(unsigned char *))(*(void *)a1 + 8))(a1) & v13) == 1)
    {
      int v14 = v20;
      *a4 = v20;
      if (!v14) {
        goto LABEL_32;
      }
      goto LABEL_29;
    }
LABEL_31:
    *a4 = 0;
    goto LABEL_32;
  }
  *a4 = 1;
LABEL_29:
  if (!*a3) {
    *a3 = 1;
  }
LABEL_32:
  if ((*(unsigned int (**)(unsigned char *))(*(void *)a1 + 24))(a1))
  {
    *a2 = 1;
    *a3 = 1;
  }
  sub_10004191C(buf, "HCITraces");
  sub_10004191C(__p, "HCILiveTraces");
  (*(void (**)(unsigned char *, unsigned char *, void **, BOOL *))(*(void *)a1 + 72))(a1, buf, __p, a2);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(*(void **)buf);
  }
  sub_10004191C(buf, "HCITraces");
  sub_10004191C(__p, "HCIFileTraces");
  (*(void (**)(unsigned char *, unsigned char *, void **, BOOL *))(*(void *)a1 + 72))(a1, buf, __p, a3);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v15 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = "enabled";
    if (*a2) {
      uint64_t v17 = "enabled";
    }
    else {
      uint64_t v17 = "disabled";
    }
    int v18 = *a4;
    if (*a3) {
      uint64_t v19 = "enabled";
    }
    else {
      uint64_t v19 = "disabled";
    }
    *(_DWORD *)std::string buf = 136446722;
    if (!v18) {
      uint64_t v16 = "disabled";
    }
    *(void *)&uint8_t buf[4] = v17;
    __int16 v25 = 2082;
    int v26 = v19;
    __int16 v27 = 2082;
    unint64_t v28 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "liveTracing:%{public}s fileTracing:%{public}s hciLiteLogging:%{public}s", buf, 0x20u);
  }
}

void sub_100341120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_100341174(char a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10034B60C;
  block[3] = &unk_1009A7758;
  char v2 = a1;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
}

uint64_t sub_1003411E8(uint64_t a1)
{
  return (***(uint64_t (****)(void))(a1 + 32))(*(void *)(a1 + 32));
}

uint64_t sub_100341210(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (****)(void))(a1 + 32);
  char v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Root prefs changed", v4, 2u);
  }
  return (**v1)(v1);
}

void sub_1003412AC(unsigned char *a1)
{
  a1[88] = 1;
  memset(&v69, 0, sizeof(v69));
  char v66 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  char v63 = 0;
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  uint64_t v2 = sub_100035F54();
  if (!(*(unsigned int (**)(uint64_t, void **))(*(void *)v2 + 24))(v2, &v66))
  {
    uint64_t v29 = HIBYTE(v68);
    if (v68 < 0) {
      uint64_t v29 = v67;
    }
    if (v29)
    {
      std::operator+<char>();
      int v30 = std::string::append(&v60, "\n");
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      int64_t v62 = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      if (v62 >= 0) {
        unint64_t v32 = __p;
      }
      else {
        unint64_t v32 = (void **)__p[0];
      }
      if (v62 >= 0) {
        std::string::size_type v33 = HIBYTE(v62);
      }
      else {
        std::string::size_type v33 = (std::string::size_type)__p[1];
      }
      std::string::append(&v69, (const std::string::value_type *)v32, v33);
      if (SHIBYTE(v62) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
    }
  }
  unint64_t v3 = [gCBDaemonServer stackController];
  id v4 = [v3 controllerInfo];

  uint64_t v5 = [v4 firmwareVersion];

  if (v5)
  {
    id v6 = [gCBDaemonServer stackController];
    unint64_t v7 = [v6 controllerInfo];
    id v8 = [v7 firmwareVersion];
    sub_10004191C(&v59, (char *)[v8 UTF8String]);
    BOOL v9 = std::string::insert(&v59, 0, "Firmware Version: ");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    uint64_t v11 = std::string::append(&v60, "\n");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    int64_t v62 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (v62 >= 0) {
      int v13 = __p;
    }
    else {
      int v13 = (void **)__p[0];
    }
    if (v62 >= 0) {
      std::string::size_type v14 = HIBYTE(v62);
    }
    else {
      std::string::size_type v14 = (std::string::size_type)__p[1];
    }
    std::string::append(&v69, (const std::string::value_type *)v13, v14);
    if (SHIBYTE(v62) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v15 = [v4 chipsetID];

  if (v15)
  {
    uint64_t v16 = [gCBDaemonServer stackController];
    uint64_t v17 = [v16 controllerInfo];
    id v18 = [v17 chipsetID];
    sub_10004191C(&v59, (char *)[v18 UTF8String]);
    uint64_t v19 = std::string::insert(&v59, 0, "Chipset: ");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    uint64_t v21 = std::string::append(&v60, "\n");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    int64_t v62 = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (v62 >= 0) {
      char v23 = __p;
    }
    else {
      char v23 = (void **)__p[0];
    }
    if (v62 >= 0) {
      std::string::size_type v24 = HIBYTE(v62);
    }
    else {
      std::string::size_type v24 = (std::string::size_type)__p[1];
    }
    std::string::append(&v69, (const std::string::value_type *)v23, v24);
    if (SHIBYTE(v62) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
  }
  if ([v4 hciTransportType])
  {
    __int16 v25 = [gCBDaemonServer stackController];
    int v26 = [v25 controllerInfo];
    unsigned int v27 = [v26 hciTransportType];
    if (v27 > 4) {
      unint64_t v28 = "?";
    }
    else {
      unint64_t v28 = off_1009A7818[v27];
    }
    sub_10004191C(&v59, v28);
    char v34 = std::string::insert(&v59, 0, "Transport: ");
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    int v36 = std::string::append(&v60, "\n");
    long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    int64_t v62 = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    if (v62 >= 0) {
      __int16 v38 = __p;
    }
    else {
      __int16 v38 = (void **)__p[0];
    }
    if (v62 >= 0) {
      std::string::size_type v39 = HIBYTE(v62);
    }
    else {
      std::string::size_type v39 = (std::string::size_type)__p[1];
    }
    std::string::append(&v69, (const std::string::value_type *)v38, v39);
    if (SHIBYTE(v62) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
  }
  __int16 v40 = [v4 firmwareName];

  if (v40)
  {
    id v41 = [v4 firmwareName];
    sub_10004191C(&v59, (char *)[v41 UTF8String]);
    __int16 v42 = std::string::insert(&v59, 0, "Firmware Filename: ");
    long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    unsigned __int8 v44 = std::string::append(&v60, "\n");
    long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    int64_t v62 = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    if (v62 >= 0) {
      unsigned __int8 v46 = __p;
    }
    else {
      unsigned __int8 v46 = (void **)__p[0];
    }
    if (v62 >= 0) {
      std::string::size_type v47 = HIBYTE(v62);
    }
    else {
      std::string::size_type v47 = (std::string::size_type)__p[1];
    }
    std::string::append(&v69, (const std::string::value_type *)v46, v47);
    if (SHIBYTE(v62) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v48 = sub_100035F54();
  if (!(*(unsigned int (**)(uint64_t, void **, uint64_t))(*(void *)v48 + 32))(v48, &v63, 1))
  {
    uint64_t v53 = HIBYTE(v65);
    if (v65 < 0) {
      uint64_t v53 = v64;
    }
    if (v53)
    {
      std::operator+<char>();
      char v54 = std::string::append(&v60, "\n");
      long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
      int64_t v62 = v54->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v55;
      v54->__r_.__value_.__l.__size_ = 0;
      v54->__r_.__value_.__r.__words[2] = 0;
      v54->__r_.__value_.__r.__words[0] = 0;
      if (v62 >= 0) {
        char v56 = __p;
      }
      else {
        char v56 = (void **)__p[0];
      }
      if (v62 >= 0) {
        std::string::size_type v57 = HIBYTE(v62);
      }
      else {
        std::string::size_type v57 = (std::string::size_type)__p[1];
      }
      std::string::append(&v69, (const std::string::value_type *)v56, v57);
      if (SHIBYTE(v62) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
    }
  }
  v59.__r_.__value_.__s.__data_[0] = 0;
  sub_10004191C(__p, "Stack");
  sub_10004191C(&v60, "HCILiteLogging");
  (*(void (**)(unsigned char *, void **, std::string *, std::string *))(*(void *)a1 + 72))(a1, __p, &v60, &v59);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v62) < 0) {
    operator delete(__p[0]);
  }
  int v49 = _os_feature_enabled_impl();
  if (((*(unsigned int (**)(unsigned char *))(*(void *)a1 + 8))(a1) | v49 ^ 1) != 1
    || ((*(unsigned int (**)(unsigned char *))(*(void *)a1 + 8))(a1) & v49) == 1
    && v59.__r_.__value_.__s.__data_[0])
  {
    std::string::append(&v69, "HCILite Logging Mode\n");
  }
  char v58 = 0;
  uint64_t v50 = sub_100017768();
  sub_10004191C(__p, "LE");
  sub_10004191C(&v60, "EnableXPCLog");
  int v51 = (*(uint64_t (**)(uint64_t, void **, std::string *, char *))(*(void *)v50 + 72))(v50, __p, &v60, &v58);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  if ((SHIBYTE(v62) & 0x80000000) == 0)
  {
    if (!v51) {
      goto LABEL_88;
    }
    goto LABEL_87;
  }
  operator delete(__p[0]);
  if (v51) {
LABEL_87:
  }
    a1[236] = 1;
LABEL_88:
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v52 = &v69;
  }
  else {
    char v52 = (std::string *)v69.__r_.__value_.__r.__words[0];
  }
  sub_100115670((const char *)v52);
  sub_10034E3B8((void (***)(void, void, const UInt8 *, void))a1 + 8);
  sub_10034FEE8((uint64_t)(a1 + 72));
  (*(void (**)(unsigned char *, uint64_t))(*(void *)a1 + 488))(a1, 1);
  if ((*(unsigned int (**)(unsigned char *))(*(void *)a1 + 8))(a1)) {
    sub_100341DD4((uint64_t)a1);
  }
  (*(void (**)(unsigned char *))(*(void *)a1 + 520))(a1);
  (*(void (**)(unsigned char *))(*(void *)a1 + 824))(a1);

  if (SHIBYTE(v65) < 0) {
    operator delete(v63);
  }
  if (SHIBYTE(v68) < 0) {
    operator delete(v66);
  }
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
}

void sub_100341BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }

  if (a34 < 0) {
    operator delete(a29);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (*(char *)(v42 - 65) < 0) {
    operator delete(*v41);
  }
  _Unwind_Resume(a1);
}

void sub_100341DD4(uint64_t a1)
{
  uint64_t v2 = sub_100035F54();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v2 + 136))(v2)) {
    return;
  }
  memset(&v31, 0, sizeof(v31));
  *(_DWORD *)(a1 + 96) = 5;
  sub_10004191C(&buf, "Diversity");
  sub_10004191C(&__p, "DiversityMode");
  *(unsigned char *)(a1 + 93) = (*(uint64_t (**)(uint64_t, std::string *, std::string *, std::string *))(*(void *)a1 + 56))(a1, &buf, &__p, &v31);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (*(unsigned char *)(a1 + 93))
  {
    if (!std::string::compare(&v31, "AUTO"))
    {
      *(_DWORD *)(a1 + 96) = 5;
      unint64_t v3 = qword_100A19E50;
      if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_34;
      }
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      id v4 = "Diversity mode override: Auto";
    }
    else if (!std::string::compare(&v31, "AUTO_NO_COEX"))
    {
      *(_DWORD *)(a1 + 96) = 4;
      unint64_t v3 = qword_100A19E50;
      if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_34;
      }
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      id v4 = "Diversity mode override: Auto with no cellular coex support";
    }
    else if (!std::string::compare(&v31, "DISABLED"))
    {
      *(_DWORD *)(a1 + 96) = 3;
      unint64_t v3 = qword_100A19E50;
      if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_34;
      }
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      id v4 = "Diversity mode override: Disabled";
    }
    else if (!std::string::compare(&v31, "FORCE_ANT0"))
    {
      *(_DWORD *)(a1 + 96) = 0;
      unint64_t v3 = qword_100A19E50;
      if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_34;
      }
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      id v4 = "Diversity mode override: Force Antenna 0";
    }
    else if (!std::string::compare(&v31, "FORCE_ANT1"))
    {
      *(_DWORD *)(a1 + 96) = 1;
      unint64_t v3 = qword_100A19E50;
      if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_34;
      }
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      id v4 = "Diversity mode override: Force Antenna 1";
    }
    else if (!std::string::compare(&v31, "MRC_BF"))
    {
      *(_DWORD *)(a1 + 96) = 6;
      unint64_t v3 = qword_100A19E50;
      if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_34;
      }
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      id v4 = "Diversity/beamforming mode override: MRC diversity with tx beamforming";
    }
    else if (!std::string::compare(&v31, "HYBRID_BF"))
    {
      *(_DWORD *)(a1 + 96) = 7;
      unint64_t v3 = qword_100A19E50;
      if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_34;
      }
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      id v4 = "Diversity/beamforming mode override: Hybrid diversity with tx beamforming";
    }
    else if (!std::string::compare(&v31, "MRC_DISABLE_BF"))
    {
      *(_DWORD *)(a1 + 96) = 8;
      unint64_t v3 = qword_100A19E50;
      if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_34;
      }
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      id v4 = "Diversity/beamforming mode override: MRC diversity without tx beamforming";
    }
    else
    {
      *(unsigned char *)(a1 + 93) = 0;
      unint64_t v3 = qword_100A19E50;
      if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_34;
      }
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      id v4 = "Warning: Diversity mode override: Invalid.  Using default diversity mode.";
    }
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, v4, (uint8_t *)&buf, 2u);
  }
LABEL_34:
  memset(&__p, 0, sizeof(__p));
  *(_DWORD *)(a1 + 104) = 0;
  sub_10004191C(&buf, "Diversity");
  sub_10004191C(&v29, "DiversityLogMode");
  *(unsigned char *)(a1 + 100) = (*(uint64_t (**)(uint64_t, std::string *, std::string *, std::string *))(*(void *)a1 + 56))(a1, &buf, &v29, &__p);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (*(unsigned char *)(a1 + 100))
  {
    if (!std::string::compare(&__p, "LOG_DENIALS"))
    {
      *(_DWORD *)(a1 + 104) = 3;
      uint64_t v5 = qword_100A19E50;
      if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_52;
      }
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      id v6 = "Diversity log mode override: Log Denials";
      goto LABEL_51;
    }
    if (!std::string::compare(&__p, "LOG_CHANNELS"))
    {
      *(_DWORD *)(a1 + 104) = 4;
      uint64_t v5 = qword_100A19E50;
      if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_52;
      }
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      id v6 = "Diversity log mode override: Log Channels";
      goto LABEL_51;
    }
    if (!std::string::compare(&__p, "DISABLED"))
    {
      *(_DWORD *)(a1 + 104) = 0;
      uint64_t v5 = qword_100A19E50;
      if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_52;
      }
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      id v6 = "Diversity log mode override: Log Disabled";
      goto LABEL_51;
    }
    if (std::string::compare(&__p, "LOG_DENIALS_3ANT"))
    {
      *(unsigned char *)(a1 + 100) = 0;
      uint64_t v5 = qword_100A19E50;
      if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_52;
      }
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      id v6 = "Warning: Diversity log mode override: Invalid.  Override disabled.";
LABEL_51:
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&buf, 2u);
      goto LABEL_52;
    }
    *(_DWORD *)(a1 + 104) = 5;
  }
LABEL_52:
  uint64_t v7 = sub_100035F54();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v7 + 144))(v7)) {
    goto LABEL_69;
  }
  memset(&buf, 0, sizeof(buf));
  *(_DWORD *)(a1 + 224) = 1;
  sub_10004191C(&v29, "Diversity");
  sub_10004191C(v27, "DiversityAntennaConfig");
  *(unsigned char *)(a1 + 222) = (*(uint64_t (**)(uint64_t, std::string *, void **, std::string *))(*(void *)a1 + 56))(a1, &v29, v27, &buf);
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (*(unsigned char *)(a1 + 222))
  {
    if (!std::string::compare(&buf, "DIVERSITY_ANT1"))
    {
      *(_DWORD *)(a1 + 224) = 1;
      id v8 = qword_100A19E50;
      if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_67;
      }
      LOWORD(v29.__r_.__value_.__l.__data_) = 0;
      BOOL v9 = "Diversity antenna configuration override: Diversity Antenna 1";
    }
    else if (!std::string::compare(&buf, "DIVERSITY_ANT2"))
    {
      *(_DWORD *)(a1 + 224) = 2;
      id v8 = qword_100A19E50;
      if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_67;
      }
      LOWORD(v29.__r_.__value_.__l.__data_) = 0;
      BOOL v9 = "Diversity antenna configuration override: Diversity Antenna 2";
    }
    else
    {
      *(unsigned char *)(a1 + 222) = 0;
      id v8 = qword_100A19E50;
      if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_67;
      }
      LOWORD(v29.__r_.__value_.__l.__data_) = 0;
      BOOL v9 = "Warning: Diversity antenna configuration override: Invalid.  Using default diversity antenna.";
    }
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v29, 2u);
  }
LABEL_67:
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
LABEL_69:
  uint64_t v10 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 152))(v10))
  {
    memset(&buf, 0, sizeof(buf));
    int v26 = 0;
    sub_10004191C(&v29, "Diversity");
    sub_10004191C(v27, "Diversity2GThresholOverride");
    *(unsigned char *)(a1 + 172) = (*(uint64_t (**)(uint64_t, std::string *, void **, std::string *))(*(void *)a1 + 56))(a1, &v29, v27, &buf);
    if (v28 < 0) {
      operator delete(v27[0]);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (*(unsigned char *)(a1 + 172))
    {
      sub_10004191C(&v29, "Diversity");
      sub_10004191C(v27, "Diversity2GRSSIThreshold");
      int v11 = (*(uint64_t (**)(uint64_t, std::string *, void **, int *))(*(void *)a1 + 88))(a1, &v29, v27, &v26);
      if (v28 < 0) {
        operator delete(v27[0]);
      }
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      if (v11) {
        *(unsigned char *)(a1 + 173) = v26;
      }
    }
    sub_10004191C(&v29, "Diversity");
    sub_10004191C(v27, "Diversity5GThresholdOverride");
    *(unsigned char *)(a1 + 174) = (*(uint64_t (**)(uint64_t, std::string *, void **, std::string *))(*(void *)a1 + 56))(a1, &v29, v27, &buf);
    if (v28 < 0) {
      operator delete(v27[0]);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (*(unsigned char *)(a1 + 174))
    {
      sub_10004191C(&v29, "Diversity");
      sub_10004191C(v27, "Diversity5GRSSIThreshold");
      int v12 = (*(uint64_t (**)(uint64_t, std::string *, void **, int *))(*(void *)a1 + 88))(a1, &v29, v27, &v26);
      if (v28 < 0) {
        operator delete(v27[0]);
      }
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      if (v12) {
        *(unsigned char *)(a1 + 175) = v26;
      }
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v13 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v13 + 160))(v13))
  {
    memset(&buf, 0, sizeof(buf));
    *(_DWORD *)(a1 + 232) = 0;
    sub_10004191C(&v29, "Diversity");
    sub_10004191C(v27, "BeamformingLogMode");
    *(unsigned char *)(a1 + 228) = (*(uint64_t (**)(uint64_t, std::string *, void **, std::string *))(*(void *)a1 + 56))(a1, &v29, v27, &buf);
    if (v28 < 0) {
      operator delete(v27[0]);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (!*(unsigned char *)(a1 + 228)) {
      goto LABEL_109;
    }
    if (!std::string::compare(&buf, "BF_MRC_LOG_ENABLED"))
    {
      *(_DWORD *)(a1 + 232) = 1;
      std::string::size_type v14 = qword_100A19E50;
      if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_109;
      }
      LOWORD(v29.__r_.__value_.__l.__data_) = 0;
      uint64_t v15 = "Beamforming log mode override: Log enabled";
    }
    else if (!std::string::compare(&buf, "BF_MRC_LOG_DISABLED"))
    {
      *(_DWORD *)(a1 + 232) = 0;
      std::string::size_type v14 = qword_100A19E50;
      if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_109;
      }
      LOWORD(v29.__r_.__value_.__l.__data_) = 0;
      uint64_t v15 = "Beamforming log mode override: Log disabled";
    }
    else
    {
      *(unsigned char *)(a1 + 228) = 0;
      std::string::size_type v14 = qword_100A19E50;
      if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_109;
      }
      LOWORD(v29.__r_.__value_.__l.__data_) = 0;
      uint64_t v15 = "Warning: Beamforming log mode override: Invalid. VSE Logging disabled.";
    }
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&v29, 2u);
LABEL_109:
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
  }
  *(unsigned char *)(a1 + 108) = 0;
  sub_10004191C(&buf, "Diversity");
  sub_10004191C(&v29, "DiversityPeripheralOverride");
  (*(void (**)(uint64_t, std::string *, std::string *, uint64_t))(*(void *)a1 + 72))(a1, &buf, &v29, a1 + 108);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (*(unsigned char *)(a1 + 108))
  {
    uint64_t v16 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Diversity peripheral override: Enabled.  Diversity can now be enabled when role is peripheral.", (uint8_t *)&buf, 2u);
    }
  }
  *(unsigned char *)(a1 + 109) = 0;
  sub_10004191C(&buf, "Diversity");
  sub_10004191C(&v29, "DiversityCoexLogEnabled");
  (*(void (**)(uint64_t, std::string *, std::string *, uint64_t))(*(void *)a1 + 72))(a1, &buf, &v29, a1 + 109);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (*(unsigned char *)(a1 + 109))
  {
    uint64_t v17 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Diversity coex log: Enabled", (uint8_t *)&buf, 2u);
    }
  }
  memset(&v29, 0, sizeof(v29));
  *(_DWORD *)(a1 + 112) = 3;
  sub_10004191C(&buf, "Diversity");
  sub_10004191C(v27, "DiversityCoexCellOverride");
  *(unsigned char *)(a1 + 110) = (*(uint64_t (**)(uint64_t, std::string *, void **, std::string *))(*(void *)a1 + 56))(a1, &buf, v27, &v29);
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (*(unsigned char *)(a1 + 110))
  {
    if (!std::string::compare(&v29, "CELL_OFF"))
    {
      *(_DWORD *)(a1 + 112) = 0;
      id v18 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        uint64_t v19 = "Diversity coex cell override: Cell off";
        goto LABEL_145;
      }
    }
    else if (!std::string::compare(&v29, "CELL_ON_ANT_0"))
    {
      *(_DWORD *)(a1 + 112) = 1;
      id v18 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        uint64_t v19 = "Diversity coex cell override: Cell on antenna 0";
        goto LABEL_145;
      }
    }
    else if (!std::string::compare(&v29, "CELL_ON_ANT_1"))
    {
      *(_DWORD *)(a1 + 112) = 2;
      id v18 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        uint64_t v19 = "Diversity coex cell override: Cell on antenna 1";
        goto LABEL_145;
      }
    }
    else if (!std::string::compare(&v29, "DISABLED"))
    {
      *(_DWORD *)(a1 + 112) = 3;
      id v18 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        uint64_t v19 = "Diversity coex cell override: Disabled";
        goto LABEL_145;
      }
    }
    else
    {
      *(unsigned char *)(a1 + 110) = 0;
      id v18 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        uint64_t v19 = "Warning: Diversity coex cell override: Invalid.  Override disabled.";
LABEL_145:
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v19, (uint8_t *)&buf, 2u);
      }
    }
  }
  sub_10034CA28(a1, "DiversityCoexAFHMapOverride", (unsigned char *)(a1 + 116), a1 + 117, (uint64_t)"AFH map");
  sub_10034CA28(a1, "DiversityCoexHAAMapC0B0Override", (unsigned char *)(a1 + 128), a1 + 129, (uint64_t)"HAA map C0B0");
  sub_10034CA28(a1, "DiversityCoexHAAMapC0B1Override", (unsigned char *)(a1 + 139), a1 + 140, (uint64_t)"HAA map C0B1");
  long long v20 = (unsigned char *)(a1 + 150);
  sub_10034CA28(a1, "DiversityCoexHAAMapC1B0Override", (unsigned char *)(a1 + 150), a1 + 151, (uint64_t)"HAA map C1B0");
  sub_10034CA28(a1, "DiversityCoexHAAMapC1B1Override", (unsigned char *)(a1 + 161), a1 + 162, (uint64_t)"HAA map C1B1");
  uint64_t v21 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t, void, void, void, uint64_t))(*(void *)v21 + 928))(v21, *(unsigned __int8 *)(a1 + 109), *(unsigned int *)(a1 + 112), *(unsigned __int8 *)(a1 + 116), a1 + 117)&& os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
  {
    sub_100758574();
  }
  if (*(unsigned char *)(a1 + 128))
  {
    if (*(unsigned char *)(a1 + 139) && *v20)
    {
      int v22 = *(unsigned __int8 *)(a1 + 161);
      *(unsigned char *)(a1 + 127) = v22;
      if (v22)
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 2) = *(void *)(a1 + 129);
        WORD1(buf.__r_.__value_.__r.__words[1]) = *(_WORD *)(a1 + 137);
        WORD2(buf.__r_.__value_.__r.__words[1]) = 256;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = *(void *)(a1 + 140);
        HIWORD(buf.__r_.__value_.__r.__words[2]) = *(_WORD *)(a1 + 148);
        __int16 v33 = 512;
        uint64_t v34 = *(void *)(a1 + 151);
        __int16 v35 = *(_WORD *)(a1 + 159);
        __int16 v36 = 768;
        uint64_t v23 = *(void *)(a1 + 162);
        __int16 v38 = *(_WORD *)(a1 + 170);
        uint64_t v37 = v23;
        uint64_t v24 = sub_10003FB34();
        if ((*(unsigned int (**)(uint64_t, uint64_t, std::string *))(*(void *)v24 + 920))(v24, 4, &buf)
          && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
        {
          sub_100758540();
        }
        goto LABEL_162;
      }
    }
    else
    {
      *(unsigned char *)(a1 + 127) = 0;
    }
LABEL_160:
    __int16 v25 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Warning: Diversity coex HAA maps ignored: all 4 HAA maps must be set", (uint8_t *)&buf, 2u);
    }
    goto LABEL_162;
  }
  *(unsigned char *)(a1 + 127) = 0;
  if (*(unsigned char *)(a1 + 139) || *v20 || *(unsigned char *)(a1 + 161)) {
    goto LABEL_160;
  }
LABEL_162:
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
}

void sub_100342FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  _Unwind_Resume(exception_object);
}

void sub_100343100(uint64_t a1)
{
}

uint64_t sub_100343108(uint64_t result)
{
  *(unsigned char *)(result + 88) = 0;
  return result;
}

uint64_t sub_100343110(uint64_t result)
{
  *(unsigned char *)(result + 80) = 0;
  return result;
}

uint64_t sub_100343118(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 360);
}

void sub_100343120(uint64_t a1)
{
  uint64_t v2 = (const void *)MGCopyAnswer();
  unint64_t v3 = v2;
  if (v2) {
    BOOL v4 = CFEqual(v2, @"Vendor") != 0;
  }
  else {
    BOOL v4 = 0;
  }
  *(unsigned char *)(a1 + 360) = v4;
  uint64_t v5 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138412802;
    uint64_t v7 = v3;
    __int16 v8 = 2112;
    CFStringRef v9 = @"Vendor";
    __int16 v10 = 1024;
    BOOL v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "check Vendor build %@ %@ %d", (uint8_t *)&v6, 0x1Cu);
  }
  if (v3) {
    CFRelease(v3);
  }
}

BOOL sub_100343234()
{
  return MGCopyAnswer() != 0;
}

uint64_t sub_100343260(NSObject **a1)
{
  *((unsigned char *)a1 + 248) = 0;
  uint64_t v2 = (unsigned __int8 *)(a1 + 31);
  sub_10004191C(buf, "ExposureNotification");
  sub_10004191C(__p, "insecureDatabasePath");
  ((void (*)(NSObject **, unsigned char *, void **, unsigned __int8 *))(*a1)[9].isa)(a1, buf, __p, v2);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (v25 < 0) {
    operator delete(*(void **)buf);
  }
  unint64_t v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    int v4 = *v2;
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "fInsecureDatabasePath is %d", buf, 8u);
  }
  *((unsigned char *)a1 + 252) = 0;
  sub_10004191C(buf, "ExposureNotification");
  sub_10004191C(__p, "RequireEntitlementAndProfileOnInternalForLogging");
  ((void (*)(NSObject **, unsigned char *, void **, unsigned char *))(*a1)[9].isa)(a1, buf, __p, (unsigned char *)a1 + 252);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (v25 < 0) {
    operator delete(*(void **)buf);
  }
  int v5 = ((uint64_t (*)(NSObject **))(*a1)[26].isa)(a1);
  *((unsigned char *)a1 + 249) = v5;
  int v6 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *((unsigned __int8 *)a1 + 252);
    int v8 = *v2;
    *(_DWORD *)std::string buf = 67109632;
    *(_DWORD *)&uint8_t buf[4] = v5;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v7;
    LOWORD(v24) = 1024;
    *(_DWORD *)((char *)&v24 + 2) = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "loading fENAppHasLoggingEntitlement:%d fRequireENLoggingProfileOnInternal:%d fInsecureDatabasePath:%d", buf, 0x14u);
  }
  *((unsigned char *)a1 + 89) = CFPrefs_GetInt64() != 0;
  char v20 = 0;
  sub_10004191C(buf, "HCI");
  sub_10004191C(__p, "lmpRouting");
  ((void (*)(NSObject **, unsigned char *, void **, char *))(*a1)[9].isa)(a1, buf, __p, &v20);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (v25 < 0) {
    operator delete(*(void **)buf);
  }
  char v9 = ((uint64_t (*)(NSObject **))(*a1)[1].isa)(a1);
  if (v20) {
    char v10 = 1;
  }
  else {
    char v10 = v9;
  }
  BOOL v11 = (v10 & 1) != 0 || *((unsigned char *)a1 + 89) != 0;
  *((unsigned char *)a1 + 237) = v11;
  int v12 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = "disabled";
    if (v11) {
      uint64_t v13 = "enabled";
    }
    std::string::size_type v14 = " [cloud]";
    if (!*((unsigned char *)a1 + 89)) {
      std::string::size_type v14 = "";
    }
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v13;
    *(_WORD *)&unsigned char buf[12] = 2080;
    uint64_t v24 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "LMP logging is %s%s", buf, 0x16u);
  }
  uint64_t v15 = a1[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003437F4;
  block[3] = &unk_100997528;
  void block[4] = a1;
  dispatch_async(v15, block);
  uint64_t result = ((uint64_t (*)(NSObject **, void))(*a1)[61].isa)(a1, 0);
  if (*((unsigned char *)a1 + 88))
  {
    sub_10034E3B8((void (***)(void, void, const UInt8 *, void))a1 + 8);
    sub_10034FEE8((uint64_t)(a1 + 9));
    if (((unsigned int (*)(NSObject **))(*a1)[1].isa)(a1)) {
      sub_100341DD4((uint64_t)a1);
    }
    ((void (*)(NSObject **))(*a1)[65].isa)(a1);
    ((void (*)(NSObject **))(*a1)[103].isa)(a1);
    uint64_t v17 = sub_10003FFD4();
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    uint64_t v18 = sub_100052EB4();
    return (*(uint64_t (**)(uint64_t))(*(void *)v18 + 144))(v18);
  }
  return result;
}

void sub_1003437A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003437F4(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)(a1 + 32);
  v1[250] = (*(uint64_t (**)(unsigned char *))(*(void *)v1 + 240))(v1);
  v1[251] = (*(uint64_t (**)(unsigned char *))(*(void *)v1 + 248))(v1);
  (*(void (**)(unsigned char *))(*(void *)v1 + 256))(v1);
  sub_1003475BC((uint64_t)v1);
  sub_10004191C(buf, "ControllerStatistics");
  sub_10004191C(&__p, "ControllerStatisticsEnabled");
  (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 72))(v1, buf, &__p, v1 + 197);
  if (SHIBYTE(v128) < 0) {
    operator delete(__p);
  }
  if ((v131[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  memset(v125, 0, 14);
  int v123 = 8;
  int v124 = 1023;
  int v121 = 0;
  int v122 = 100000;
  __int16 v120 = 0;
  sub_10004191C(buf, "AccessoryLogging");
  sub_10004191C(&__p, "TimeStampPeriodically");
  (*(void (**)(unsigned char *, unsigned char *, void **, unint64_t *))(*(void *)v1 + 72))(v1, buf, &__p, v125);
  if (SHIBYTE(v128) < 0) {
    operator delete(__p);
  }
  if ((v131[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10004191C(buf, "AccessoryLogging");
  sub_10004191C(&__p, "DisableDiagnosticsPeriodically");
  (*(void (**)(unsigned char *, unsigned char *, void **, char *))(*(void *)v1 + 72))(v1, buf, &__p, (char *)v125 + 1);
  if (SHIBYTE(v128) < 0) {
    operator delete(__p);
  }
  if ((v131[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10004191C(buf, "AccessoryLogging");
  sub_10004191C(&__p, "CrashLoggingDisabled");
  (*(void (**)(unsigned char *, unsigned char *, void **, char *))(*(void *)v1 + 72))(v1, buf, &__p, (char *)v125 + 2);
  if (SHIBYTE(v128) < 0) {
    operator delete(__p);
  }
  if ((v131[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10004191C(buf, "AccessoryLogging");
  sub_10004191C(&__p, "AccessoryW1LogModule");
  (*(void (**)(unsigned char *, unsigned char *, void **, int *))(*(void *)v1 + 88))(v1, buf, &__p, &v124);
  if (SHIBYTE(v128) < 0) {
    operator delete(__p);
  }
  if ((v131[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10004191C(buf, "AccessoryLogging");
  sub_10004191C(&__p, "AccessoryW1LogLevel");
  (*(void (**)(unsigned char *, unsigned char *, void **, int *))(*(void *)v1 + 88))(v1, buf, &__p, &v123);
  if (SHIBYTE(v128) < 0) {
    operator delete(__p);
  }
  if ((v131[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10004191C(buf, "AccessoryLogging");
  sub_10004191C(&__p, "AccessoryLogPrintInterval");
  (*(void (**)(unsigned char *, unsigned char *, void **, int *))(*(void *)v1 + 88))(v1, buf, &__p, &v122);
  if (SHIBYTE(v128) < 0) {
    operator delete(__p);
  }
  if ((v131[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10004191C(buf, "AccessoryLogging");
  sub_10004191C(&__p, "AccessoryLogPowerLoggingInterval");
  (*(void (**)(unsigned char *, unsigned char *, void **, int *))(*(void *)v1 + 88))(v1, buf, &__p, &v121);
  if (SHIBYTE(v128) < 0) {
    operator delete(__p);
  }
  if ((v131[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10004191C(buf, "AccessoryLogging");
  sub_10004191C(&__p, "TriggerAccessoryW1AWD");
  (*(void (**)(unsigned char *, unsigned char *, void **, char *))(*(void *)v1 + 72))(v1, buf, &__p, (char *)&v120 + 1);
  if (SHIBYTE(v128) < 0) {
    operator delete(__p);
  }
  if ((v131[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10004191C(buf, "AccessoryLogging");
  sub_10004191C(&__p, "DumpAccessoryW1TraceLog");
  (*(void (**)(unsigned char *, unsigned char *, void **, __int16 *))(*(void *)v1 + 72))(v1, buf, &__p, &v120);
  if (SHIBYTE(v128) < 0) {
    operator delete(__p);
  }
  if ((v131[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  *(_WORD *)((char *)v125 + 3) = v124;
  BYTE5(v125[0]) = v123;
  *(_DWORD *)((char *)v125 + 6) = v122;
  *(_DWORD *)((char *)&v125[1] + 2) = v121;
  if (qword_1009F8798 != -1) {
    dispatch_once(&qword_1009F8798, &stru_1009A77B8);
  }
  sub_1003EF0F0(qword_1009F8790, v125[0], LODWORD(v125[1]) | ((unint64_t)WORD2(v125[1]) << 32));
  int v118 = 0;
  int v119 = 255;
  int v117 = 2;
  int v123 = 2;
  int v124 = 255;
  __int16 v116 = 0;
  __int16 v115 = 0;
  __int16 v114 = 0;
  __int16 v113 = 0;
  __int16 v112 = 0;
  std::string __p = 0;
  uint64_t v127 = 0;
  uint64_t v128 = 0;
  sub_10004191C(buf, "AccessoryLogging");
  sub_10004191C(v110, "AccessoryLogDevice");
  (*(void (**)(unsigned char *, unsigned char *, void **, int *))(*(void *)v1 + 88))(v1, buf, v110, &v119);
  if (v111 < 0) {
    operator delete(v110[0]);
  }
  if ((v131[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10004191C(buf, "AccessoryLogging");
  sub_10004191C(v110, "AccessoryLog2Module");
  (*(void (**)(unsigned char *, unsigned char *, void **, int *))(*(void *)v1 + 88))(v1, buf, v110, &v124);
  if (v111 < 0) {
    operator delete(v110[0]);
  }
  if ((v131[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10004191C(buf, "AccessoryLogging");
  sub_10004191C(v110, "AccessoryLogSubModule");
  (*(void (**)(unsigned char *, unsigned char *, void **, int *))(*(void *)v1 + 88))(v1, buf, v110, &v118);
  if (v111 < 0) {
    operator delete(v110[0]);
  }
  if ((v131[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10004191C(buf, "AccessoryLogging");
  sub_10004191C(v110, "AccessoryLogType");
  (*(void (**)(unsigned char *, unsigned char *, void **, int *))(*(void *)v1 + 88))(v1, buf, v110, &v117);
  if (v111 < 0) {
    operator delete(v110[0]);
  }
  if ((v131[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10004191C(buf, "AccessoryLogging");
  sub_10004191C(v110, "AccessoryLog2Level");
  (*(void (**)(unsigned char *, unsigned char *, void **, int *))(*(void *)v1 + 88))(v1, buf, v110, &v123);
  if (v111 < 0) {
    operator delete(v110[0]);
  }
  if ((v131[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10004191C(buf, "AccessoryLogging");
  sub_10004191C(v110, "AccessoryLogStart");
  (*(void (**)(unsigned char *, unsigned char *, void **, char *))(*(void *)v1 + 72))(v1, buf, v110, (char *)&v116 + 1);
  if (v111 < 0) {
    operator delete(v110[0]);
  }
  if ((v131[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10004191C(buf, "AccessoryLogging");
  sub_10004191C(v110, "AccessoryLogStop");
  (*(void (**)(unsigned char *, unsigned char *, void **, __int16 *))(*(void *)v1 + 72))(v1, buf, v110, &v116);
  if (v111 < 0) {
    operator delete(v110[0]);
  }
  if ((v131[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10004191C(buf, "AccessoryLogging");
  sub_10004191C(v110, "AccessoryLogConfigSet");
  (*(void (**)(unsigned char *, unsigned char *, void **, char *))(*(void *)v1 + 72))(v1, buf, v110, (char *)&v115 + 1);
  if (v111 < 0) {
    operator delete(v110[0]);
  }
  if ((v131[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10004191C(buf, "AccessoryLogging");
  sub_10004191C(v110, "AccessoryLogConfigGet");
  (*(void (**)(unsigned char *, unsigned char *, void **, __int16 *))(*(void *)v1 + 72))(v1, buf, v110, &v115);
  if (v111 < 0) {
    operator delete(v110[0]);
  }
  if ((v131[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10004191C(buf, "AccessoryLogging");
  sub_10004191C(v110, "AccessoryLogDump");
  (*(void (**)(unsigned char *, unsigned char *, void **, char *))(*(void *)v1 + 72))(v1, buf, v110, (char *)&v114 + 1);
  if (v111 < 0) {
    operator delete(v110[0]);
  }
  if ((v131[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10004191C(buf, "AccessoryLogging");
  sub_10004191C(v110, "AccessoryLogDismiss");
  (*(void (**)(unsigned char *, unsigned char *, void **, __int16 *))(*(void *)v1 + 72))(v1, buf, v110, &v114);
  if (v111 < 0) {
    operator delete(v110[0]);
  }
  if ((v131[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10004191C(buf, "AccessoryLogging");
  sub_10004191C(v110, "AccessoryVSCCaptureTraceHistory");
  (*(void (**)(unsigned char *, unsigned char *, void **, char *))(*(void *)v1 + 72))(v1, buf, v110, (char *)&v113 + 1);
  if (v111 < 0) {
    operator delete(v110[0]);
  }
  if ((v131[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10004191C(buf, "AccessoryLogging");
  sub_10004191C(v110, "AccessoryCoredumpEnable");
  (*(void (**)(unsigned char *, unsigned char *, void **, __int16 *))(*(void *)v1 + 72))(v1, buf, v110, &v113);
  if (v111 < 0) {
    operator delete(v110[0]);
  }
  if ((v131[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10004191C(buf, "AccessoryLogging");
  sub_10004191C(v110, "AccessoryCoredumpAACP");
  (*(void (**)(unsigned char *, unsigned char *, void **, char *))(*(void *)v1 + 72))(v1, buf, v110, (char *)&v112 + 1);
  if (v111 < 0) {
    operator delete(v110[0]);
  }
  if ((v131[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10004191C(buf, "AccessoryLogging");
  sub_10004191C(v110, "AccessoryCoredumpDisable");
  (*(void (**)(unsigned char *, unsigned char *, void **, __int16 *))(*(void *)v1 + 72))(v1, buf, v110, &v112);
  if (v111 < 0) {
    operator delete(v110[0]);
  }
  if ((v131[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10004191C(buf, "AccessoryLogging");
  sub_10004191C(v110, "AccessoryLogCommand");
  (*(void (**)(unsigned char *, unsigned char *, void **, void **))(*(void *)v1 + 56))(v1, buf, v110, &__p);
  if (v111 < 0) {
    operator delete(v110[0]);
  }
  if ((v131[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v2 = v119;
  unsigned __int8 v3 = v124;
  int v5 = v117;
  unsigned __int8 v4 = v118;
  uint64_t v6 = v123;
  if (qword_1009F8798 != -1) {
    dispatch_once(&qword_1009F8798, &stru_1009A77B8);
  }
  sub_1003EF214(qword_1009F8790, (v5 << 24) | (unint64_t)(v6 << 32) | ((unint64_t)v4 << 16) | ((unint64_t)v3 << 8) | v2);
  if ((_BYTE)v120)
  {
    if (qword_1009F8798 != -1) {
      dispatch_once(&qword_1009F8798, &stru_1009A77B8);
    }
    sub_1003EF858(qword_1009F8790, 0, 0);
  }
  if (HIBYTE(v120))
  {
    if (qword_1009F8798 != -1) {
      dispatch_once(&qword_1009F8798, &stru_1009A77B8);
    }
    sub_1003EF310();
  }
  if (HIBYTE(v116))
  {
    if (qword_1009F8798 != -1) {
      dispatch_once(&qword_1009F8798, &stru_1009A77B8);
    }
    sub_1003ED54C(qword_1009F8790, 0, 1, 0);
  }
  if ((_BYTE)v116)
  {
    if (qword_1009F8798 != -1) {
      dispatch_once(&qword_1009F8798, &stru_1009A77B8);
    }
    sub_1003ED54C(qword_1009F8790, 0, 2, 0);
  }
  if (HIBYTE(v115))
  {
    if (qword_1009F8798 != -1) {
      dispatch_once(&qword_1009F8798, &stru_1009A77B8);
    }
    sub_1003ED54C(qword_1009F8790, 0, 3, 0);
  }
  if ((_BYTE)v115)
  {
    if (qword_1009F8798 != -1) {
      dispatch_once(&qword_1009F8798, &stru_1009A77B8);
    }
    sub_1003ED54C(qword_1009F8790, 0, 4, 0);
  }
  if (HIBYTE(v114))
  {
    if (qword_1009F8798 != -1) {
      dispatch_once(&qword_1009F8798, &stru_1009A77B8);
    }
    sub_1003ED54C(qword_1009F8790, 0, 5, 0);
  }
  if ((_BYTE)v114)
  {
    if (qword_1009F8798 != -1) {
      dispatch_once(&qword_1009F8798, &stru_1009A77B8);
    }
    sub_1003ED54C(qword_1009F8790, 0, 6, 0);
  }
  if (HIBYTE(v113))
  {
    if (qword_1009F8798 != -1) {
      dispatch_once(&qword_1009F8798, &stru_1009A77B8);
    }
    sub_1003ED54C(qword_1009F8790, 0, 7, 0);
  }
  if ((*(unsigned int (**)(unsigned char *))(*(void *)v1 + 8))(v1))
  {
    if ((_BYTE)v112)
    {
      if (qword_1009F8798 != -1) {
        dispatch_once(&qword_1009F8798, &stru_1009A77B8);
      }
      sub_1003ED54C(qword_1009F8790, 0, 18, 0);
      sub_10004191C(buf, "AccessoryLogging");
      sub_10004191C(v110, "AccessoryCoredumpDisable");
      (*(void (**)(unsigned char *, unsigned char *, void **, void))(*(void *)v1 + 80))(v1, buf, v110, 0);
      if (v111 < 0) {
        operator delete(v110[0]);
      }
      if ((v131[1] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    else
    {
      if ((_BYTE)v113)
      {
        if (qword_1009F8798 != -1) {
          dispatch_once(&qword_1009F8798, &stru_1009A77B8);
        }
        int v7 = 16;
      }
      else
      {
        if (!HIBYTE(v112)) {
          goto LABEL_162;
        }
        if (qword_1009F8798 != -1) {
          dispatch_once(&qword_1009F8798, &stru_1009A77B8);
        }
        int v7 = 17;
      }
      sub_1003ED54C(qword_1009F8790, 0, v7, 0);
    }
  }
LABEL_162:
  uint64_t v8 = HIBYTE(v128);
  if (v128 < 0) {
    uint64_t v8 = v127;
  }
  if (v8)
  {
    sub_10004191C(buf, "AccessoryLogging");
    sub_10004191C(v110, "AccessoryLogCommand");
    sub_10004191C(v108, "");
    (*(void (**)(unsigned char *, unsigned char *, void **, void **))(*(void *)v1 + 64))(v1, buf, v110, v108);
    if (v109 < 0) {
      operator delete(v108[0]);
    }
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v128 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    char v10 = +[NSString stringWithUTF8String:p_p];
    BOOL v11 = +[NSCharacterSet characterSetWithCharactersInString:@" ,"];
    int v12 = [v10 componentsSeparatedByCharactersInSet:v11];
    if ([v12 count] == (id)2)
    {
      uint64_t v13 = [v12 objectAtIndexedSubscript:0];
      unsigned __int8 v14 = [v13 intValue];

      uint64_t v15 = [v12 objectAtIndexedSubscript:1];
      unsigned __int8 v16 = [v15 intValue];

      if (qword_1009F8798 != -1) {
        dispatch_once(&qword_1009F8798, &stru_1009A77B8);
      }
      sub_1003ED54C(qword_1009F8790, 0, v14, v16);
    }
  }
  unsigned __int8 v107 = 0;
  sub_10004191C(buf, "AccessoryLogging");
  sub_10004191C(v110, "BBFCTimeLogging");
  (*(void (**)(unsigned char *, unsigned char *, void **, unsigned __int8 *))(*(void *)v1 + 72))(v1, buf, v110, &v107);
  if (v111 < 0) {
    operator delete(v110[0]);
  }
  if ((v131[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v17 = sub_100373558();
  (*(void (**)(void *, void))(*(void *)v17 + 16))(v17, v107);
  v1[216] = 0;
  uint64_t v18 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v18 + 384))(v18))
  {
    sub_10004191C(buf, "A2DP");
    sub_10004191C(v110, "EnableUltraHighPriorityVSC");
    (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 72))(v1, buf, v110, v1 + 216);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  if ((*(unsigned int (**)(unsigned char *))(*(void *)v1 + 8))(v1))
  {
    v1[90] = 0;
    sub_10004191C(buf, "Audio");
    sub_10004191C(v110, "EnableAudioLogging");
    (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 72))(v1, buf, v110, v1 + 90);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v19 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      if (v1[90]) {
        char v20 = "enabled";
      }
      else {
        char v20 = "disabled";
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Audio Logging %{public}s", buf, 0xCu);
    }
    v1[91] = 0;
    sub_10004191C(buf, "Audio");
    sub_10004191C(v110, "DisableEnhancedAudioLogging");
    (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 72))(v1, buf, v110, v1 + 91);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v21 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      if (v1[91]) {
        char v22 = "enabled";
      }
      else {
        char v22 = "disabled";
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Audio Enhanced Logging %{public}s", buf, 0xCu);
    }
    v1[92] = 0;
    sub_10004191C(buf, "Audio");
    sub_10004191C(v110, "DisableAdaptiveEncoderBitrate");
    (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 72))(v1, buf, v110, v1 + 92);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v23 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      if (v1[92]) {
        uint64_t v24 = "enabled";
      }
      else {
        uint64_t v24 = "disabled";
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Audio Adaptive Encoder Bitrate %{public}s", buf, 0xCu);
    }
    v1[221] = 0;
    sub_10004191C(buf, "A2DP");
    sub_10004191C(v110, "Disable3EDR");
    (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 72))(v1, buf, v110, v1 + 221);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    char v25 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      if (v1[221]) {
        int v26 = "on";
      }
      else {
        int v26 = "off";
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Disable 3EDR packet type (force 2EDR instead) is %{public}s based on defaults write", buf, 0xCu);
    }
    v1[220] = 0;
    sub_10004191C(buf, "A2DP");
    sub_10004191C(v110, "DisableAdaptivePacketType");
    (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 72))(v1, buf, v110, v1 + 220);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    unsigned int v27 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      if (v1[220]) {
        char v28 = "enabled";
      }
      else {
        char v28 = "disabled";
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v28;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Audio Adaptive Packet type %{public}s", buf, 0xCu);
    }
    v1[176] = 0;
    sub_10004191C(buf, "A2DP");
    sub_10004191C(v110, "DisableAudioTimeSync");
    (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 72))(v1, buf, v110, v1 + 176);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    std::string v29 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      if (v1[176]) {
        int v30 = "enabled";
      }
      else {
        int v30 = "disabled";
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v30;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Audio Time Sync Disable %{public}s", buf, 0xCu);
    }
    v1[180] = 0;
    sub_10004191C(buf, "A2DP");
    sub_10004191C(v110, "SubJitterBufferEnable");
    (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 72))(v1, buf, v110, v1 + 180);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    std::string v31 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      if (v1[180]) {
        unint64_t v32 = "enabled";
      }
      else {
        unint64_t v32 = "disabled";
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v32;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Sub Jitter Buffer %{public}s", buf, 0xCu);
    }
    v1[181] = 0;
    __int16 v33 = v1 + 181;
    sub_10004191C(buf, "A2DP");
    sub_10004191C(v110, "AdaptiveEQEnable");
    (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 72))(v1, buf, v110, v1 + 181);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v34 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      if (*v33) {
        __int16 v35 = "enabled";
      }
      else {
        __int16 v35 = "disabled";
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v35;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Adaptive EQ %{public}s", buf, 0xCu);
    }
    v1[182] = 0;
    __int16 v36 = v1 + 182;
    sub_10004191C(buf, "A2DP");
    sub_10004191C(v110, "LoudnessCompensationEQEnable");
    (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 72))(v1, buf, v110, v1 + 182);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v37 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      if (*v36) {
        __int16 v38 = "enabled";
      }
      else {
        __int16 v38 = "disabled";
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v38;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Loudness Compensation EQ %{public}s", buf, 0xCu);
    }
    LODWORD(v108[0]) = 0;
    int v105 = 0;
    int v106 = 0;
    sub_10004191C(buf, "GyroJammingSimulationKey");
    sub_10004191C(v110, "GyroJammingSimulationIsEnabledKey");
    (*(void (**)(unsigned char *, unsigned char *, void **, void **))(*(void *)v1 + 128))(v1, buf, v110, v108);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    sub_10004191C(buf, "GyroJammingSimulationKey");
    sub_10004191C(v110, "GyroJammingSimulationRightBudInfoKey");
    (*(void (**)(unsigned char *, unsigned char *, void **, int *))(*(void *)v1 + 128))(v1, buf, v110, &v106);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    sub_10004191C(buf, "GyroJammingSimulationKey");
    sub_10004191C(v110, "GyroJammingSimulationLeftBudInfoKey");
    (*(void (**)(unsigned char *, unsigned char *, void **, int *))(*(void *)v1 + 128))(v1, buf, v110, &v105);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    std::string::size_type v39 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109888;
      *(_DWORD *)&uint8_t buf[4] = v108[0];
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = 1;
      LOWORD(v130) = 1024;
      *(_DWORD *)((char *)&v130 + 2) = v106;
      HIWORD(v130) = 1024;
      *(_DWORD *)__int16 v131 = v105;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "DebugSettings::loadDebugSettings: Gyro jam simulation is enabled = %u, info version = %u, right bud is jammed = %u, left bud is jammed = %u", buf, 0x1Au);
    }
    char v40 = (char)v108[0];
    id v41 = operator new(1uLL);
    *id v41 = v40;
    uint64_t v42 = operator new(2uLL);
    v42[1] = 1;
    *uint64_t v42 = v40;
    operator delete(v41);
    char v43 = v106;
    unsigned __int8 v44 = operator new(4uLL);
    v44[2] = v43;
    *(_WORD *)unsigned __int8 v44 = *(_WORD *)v42;
    operator delete(v42);
    v44[3] = v105;
    LODWORD(v42) = *v33;
    long long v45 = malloc_type_malloc(0x10uLL, 0x18608D9DuLL);
    unsigned __int8 v46 = v45;
    float v47 = 0.0;
    if (v42) {
      float v47 = 1.0;
    }
    *long long v45 = 514;
    *((_DWORD *)v45 + 2) = 1677721850;
    *((float *)v45 + 3) = v47;
    if (qword_1009F80A0 != -1) {
      dispatch_once(&qword_1009F80A0, &stru_1009A77D8);
    }
    sub_100287C70((uint64_t)off_1009F8098, 1, 16, (uint64_t)v46);
    free(v46);
    if (qword_1009F80A0 != -1) {
      dispatch_once(&qword_1009F80A0, &stru_1009A77D8);
    }
    uint64_t v48 = sub_100287E30((uint64_t)off_1009F8098);
    if (v48)
    {
      if (qword_1009F8418 != -1) {
        dispatch_once(&qword_1009F8418, &stru_1009A77F8);
      }
      double v49 = sub_10041911C((void *)qword_1009F8410, v48);
      if (qword_1009F80A0 != -1) {
        dispatch_once(&qword_1009F80A0, &stru_1009A77D8);
      }
      int v50 = sub_100287DB8(v49);
      if (v50)
      {
        int v51 = *v36;
        char v52 = malloc_type_malloc(0x10uLL, 0x96151E8FuLL);
        uint64_t v53 = v52;
        float v54 = 0.0;
        if (v51) {
          float v54 = 1.0;
        }
        *char v52 = 258;
        v52[1] = v50 - 1;
        v52[2] = 1409286394;
        *((float *)v52 + 3) = v54;
        if (qword_1009F80A0 != -1) {
          dispatch_once(&qword_1009F80A0, &stru_1009A77D8);
        }
        sub_10028502C((uint64_t)off_1009F8098, v48, 1, 16, (uint64_t)v53);
        free(v53);
      }
      else
      {
        long long v55 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
          sub_1007585A8(v55, v49);
        }
      }
    }
    *((_DWORD *)v1 + 65) = 0;
    sub_10004191C(buf, "HFP");
    sub_10004191C(v110, "HfpUplinkMode");
    char v56 = v1 + 260;
    (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 128))(v1, buf, v110, v1 + 260);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (*v56 >= 3u) {
      _DWORD *v56 = 0;
    }
    if (qword_1009F80A0 != -1) {
      dispatch_once(&qword_1009F80A0, &stru_1009A77D8);
    }
    sub_100287B18((uint64_t)off_1009F8098, 34, *v56, 1u);
    v1[178] = 0;
    sub_10004191C(buf, "A2DP");
    sub_10004191C(v110, "DisableSoftwareVolume");
    (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 72))(v1, buf, v110, v1 + 178);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    std::string::size_type v57 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      if (v1[178]) {
        char v58 = "enabled";
      }
      else {
        char v58 = "disabled";
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v58;
      _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "Software Volume Disable %{public}s", buf, 0xCu);
    }
    v1[179] = 0;
    sub_10004191C(buf, "A2DP");
    sub_10004191C(v110, "DisableVolumeUpdateToCM");
    (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 72))(v1, buf, v110, v1 + 179);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    std::string v59 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      if (v1[179]) {
        std::string v60 = "enabled";
      }
      else {
        std::string v60 = "disabled";
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v60;
      _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "Direct volume rocker update to CMSession %{public}s", buf, 0xCu);
    }
    v1[177] = 0;
    if (!v1[176])
    {
      sub_10004191C(buf, "A2DP");
      sub_10004191C(v110, "EnableRemoteAudioTimeSync");
      (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 72))(v1, buf, v110, v1 + 177);
      if (v111 < 0) {
        operator delete(v110[0]);
      }
      if ((v131[1] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    __int16 v61 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      if (v1[177]) {
        int64_t v62 = "enabled";
      }
      else {
        int64_t v62 = "disabled";
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v62;
      _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "Remote Audio Time Sync : %{public}s", buf, 0xCu);
    }
    v1[198] = 0;
    sub_10004191C(buf, "A2DP");
    sub_10004191C(v110, "DynamicLatencyDebugDisable");
    (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 72))(v1, buf, v110, v1 + 198);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    v1[199] = 0;
    sub_10004191C(buf, "A2DP");
    sub_10004191C(v110, "DynamicLatencyHighEnable");
    (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 72))(v1, buf, v110, v1 + 199);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    *((_DWORD *)v1 + 50) = 0;
    char v63 = (int *)(v1 + 200);
    sub_10004191C(buf, "A2DP");
    sub_10004191C(v110, "DynamicLatencyLowEnable");
    (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 88))(v1, buf, v110, v1 + 200);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    *((_DWORD *)v1 + 52) = 100;
    sub_10004191C(buf, "A2DP");
    sub_10004191C(v110, "DynamicAdaptiveLowJitterBufferCutoff");
    (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 88))(v1, buf, v110, v1 + 208);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    v1[214] = 0;
    sub_10004191C(buf, "A2DP");
    sub_10004191C(v110, "DynamicLatencyDefaultEnable");
    (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 72))(v1, buf, v110, v1 + 214);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    v1[215] = 0;
    sub_10004191C(buf, "A2DP");
    sub_10004191C(v110, "SpatialProfileTuningEnable");
    (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 72))(v1, buf, v110, v1 + 215);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    v1[204] = 0;
    uint64_t v64 = v1 + 204;
    sub_10004191C(buf, "A2DP");
    sub_10004191C(v110, "DynamicAdaptiveLowJitterBufferDisable");
    (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 72))(v1, buf, v110, v1 + 204);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    v1[212] = 0;
    sub_10004191C(buf, "A2DP");
    sub_10004191C(v110, "DynamicAdaptiveLowDebugJitterBufferEnable");
    (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 72))(v1, buf, v110, v1 + 212);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    v1[213] = 0;
    sub_10004191C(buf, "A2DP");
    sub_10004191C(v110, "DynamicAdaptiveLowJitterBufferLogging");
    (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 72))(v1, buf, v110, v1 + 213);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v65 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      char v66 = "disabled";
      if (*v64) {
        uint64_t v67 = "disabled";
      }
      else {
        uint64_t v67 = "enabled";
      }
      int v68 = v1[212];
      if (v1[213]) {
        std::string v69 = "enabled";
      }
      else {
        std::string v69 = "disabled";
      }
      *(_DWORD *)std::string buf = 136446722;
      if (v68) {
        char v66 = "enabled";
      }
      *(void *)&uint8_t buf[4] = v67;
      *(_WORD *)&unsigned char buf[12] = 2082;
      int v130 = v69;
      *(_WORD *)__int16 v131 = 2082;
      *(void *)&v131[2] = v66;
      _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "Adaptive Low Latency is %{public}s, Logging is %{public}s DEBUG Low Latency is %{public}s", buf, 0x20u);
    }
    v1[217] = 0;
    sub_10004191C(buf, "A2DP");
    sub_10004191C(v110, "DisableSpatialOnMacOS");
    (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 72))(v1, buf, v110, v1 + 217);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    __int16 v70 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      int v71 = "disabled";
      if (!v1[198]) {
        int v71 = "enabled";
      }
      __int16 v72 = "FORCED";
      int v73 = v1[214];
      if (v1[199]) {
        long long v74 = "FORCED";
      }
      else {
        long long v74 = "NOT FORCED";
      }
      int v75 = v1[216];
      if (*v63 <= 0) {
        long long v76 = "NOT FORCED";
      }
      else {
        long long v76 = "FORCED";
      }
      int v77 = v1[217];
      if (*v64) {
        long long v78 = "NOT FORCED";
      }
      else {
        long long v78 = "FORCED";
      }
      *(_DWORD *)std::string buf = 136447746;
      if (v73) {
        long long v79 = "FORCED";
      }
      else {
        long long v79 = "NOT FORCED";
      }
      *(void *)&uint8_t buf[4] = v71;
      *(_WORD *)&unsigned char buf[12] = 2080;
      int v130 = v74;
      long long v80 = "AUTO";
      *(_WORD *)__int16 v131 = 2080;
      if (!v75) {
        __int16 v72 = "NOT FORCED";
      }
      *(void *)&v131[2] = v76;
      if (v77) {
        long long v80 = "FORCED OFF";
      }
      __int16 v132 = 2080;
      uint64_t v133 = v78;
      __int16 v134 = 2080;
      BOOL v135 = v79;
      __int16 v136 = 2080;
      v137 = v72;
      __int16 v138 = 2080;
      uint64_t v139 = v80;
      _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "A2DP Dynamic Latency is %{public}s, it is %s into HLM, it is %s into LLM, it is %s into adaptive latency,it is %s into MLM Ultra High Priority VSC is %s Spatial On MacOS is %s", buf, 0x48u);
    }
    int v81 = *v63;
    if (*v63 >= 1)
    {
      long long v82 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v81;
        _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEFAULT, "A2DP Dynamic Latency JBL %i", buf, 8u);
      }
    }
    v1[218] = 0;
    sub_10004191C(buf, "Audio");
    sub_10004191C(v110, "EnableTailspinLogging");
    (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 72))(v1, buf, v110, v1 + 218);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    long long v83 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      if (v1[218]) {
        __int16 v84 = "enabled";
      }
      else {
        __int16 v84 = "disabled";
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v84;
      _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEFAULT, "A2DP Tailspin logging %{public}s", buf, 0xCu);
    }
    v1[219] = 0;
    sub_10004191C(buf, "Audio");
    sub_10004191C(v110, "DisableOverwaitMitigaton");
    (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 72))(v1, buf, v110, v1 + 219);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    int v85 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      if (v1[219]) {
        long long v86 = "disabled";
      }
      else {
        long long v86 = "enabled";
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v86;
      _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEFAULT, "A2DP Overwait Mitigation %{public}s", buf, 0xCu);
    }
    v1[238] = 0;
    sub_10004191C(buf, "BTPageScan");
    sub_10004191C(v110, "BTPageScanDisabled");
    (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 72))(v1, buf, v110, v1 + 238);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v1[238])
    {
      long long v87 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEFAULT, "BT Page Scan is explicitly disabled", buf, 2u);
      }
    }
    sub_10004191C(buf, "GAPA");
    sub_10004191C(v110, "ForceAuthPassEnabled");
    (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 72))(v1, buf, v110, v1 + 239);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v1[239])
    {
      long long v88 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEFAULT, "GAPA force auth pass explicitly enabled", buf, 2u);
      }
    }
    sub_10004191C(buf, "GAPA");
    sub_10004191C(v110, "ForceAuthFailEnabled");
    (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 72))(v1, buf, v110, v1 + 240);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v1[240])
    {
      long long v89 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEFAULT, "GAPA force auth fail explicitly enabled", buf, 2u);
      }
    }
    if ((*(unsigned int (**)(unsigned char *))(*(void *)v1 + 8))(v1)) {
      v1[241] = 0;
    }
    sub_10004191C(buf, "GAPA");
    sub_10004191C(v110, "HideAuthFailEnabled");
    (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 72))(v1, buf, v110, v1 + 241);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v1[241])
    {
      long long v90 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEFAULT, "GAPA hide auth fail explicitly enabled", buf, 2u);
      }
    }
    sub_10004191C(buf, "GAPA");
    sub_10004191C(v110, "ForceNonAppleMfgEnabled");
    (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 72))(v1, buf, v110, v1 + 242);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v1[242])
    {
      long long v91 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEFAULT, "GAPA force non Apple manufacturer explicitly enabled", buf, 2u);
      }
    }
    sub_10004191C(buf, "GAPA");
    sub_10004191C(v110, "AuthEnabled");
    (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 72))(v1, buf, v110, v1 + 243);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (!v1[243])
    {
      long long v92 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEFAULT, "GAPA auth explicity disabled", buf, 2u);
      }
    }
    sub_10004191C(buf, "GAPA");
    sub_10004191C(v110, "NonAuthEnabled");
    (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 72))(v1, buf, v110, v1 + 244);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (!v1[244])
    {
      long long v93 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEFAULT, "GAPA non-auth explicity disabled", buf, 2u);
      }
    }
    sub_10004191C(buf, "GAPA");
    sub_10004191C(v110, "ForceZeroEnabled");
    (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 72))(v1, buf, v110, v1 + 245);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v1[245])
    {
      long long v94 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEFAULT, "GAPA force zero device explicity enabled", buf, 2u);
      }
    }
    sub_10004191C(buf, "GAPA");
    sub_10004191C(v110, "ForceInvalidCertsEnabled");
    (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 72))(v1, buf, v110, v1 + 246);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v1[246])
    {
      long long v95 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEFAULT, "GAPA force invalid certificate support explicitly enabled", buf, 2u);
      }
    }
    sub_10004191C(buf, "GAPA");
    sub_10004191C(v110, "SkipCertFailEnabled");
    (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 72))(v1, buf, v110, v1 + 247);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v1[247])
    {
      __int16 v96 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_DEFAULT, "GAPA skip certificate fail explicitly enabled", buf, 2u);
      }
    }
    v1[257] = 1;
    sub_10004191C(buf, "DebugLevel");
    sub_10004191C(v110, "EnableNotifyCrashes");
    (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 72))(v1, buf, v110, v1 + 257);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    v1[258] = 0;
    sub_10004191C(buf, "XPC");
    sub_10004191C(v110, "XpcStackshotReportEnabled");
    (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 72))(v1, buf, v110, v1 + 258);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    v1[259] = 0;
    sub_10004191C(buf, "XPC");
    sub_10004191C(v110, "XpcAbcReportEnabled");
    (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 72))(v1, buf, v110, v1 + 259);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    v1[264] = 0;
    sub_10004191C(buf, "LEConnectedAudioServerModeKey");
    sub_10004191C(v110, "LEConnectedAudioServerModeEnable");
    (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 72))(v1, buf, v110, v1 + 264);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v1[264])
    {
      int v97 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEFAULT, "LE Connected Audio Server Mode enabled", buf, 2u);
      }
    }
    sub_10004191C(buf, "LEConnectedAudioServerModeKey");
    sub_10004191C(v110, "LEConnectedAudioFakeCISStackCallbacksEnabled");
    (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 72))(v1, buf, v110, v1 + 265);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if ((v131[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v1[265])
    {
      __int16 v98 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_DEFAULT, "LE Connected Stack Bypass enabled", buf, 2u);
      }
    }
    if (_os_feature_enabled_impl())
    {
      *((_DWORD *)v1 + 67) = 0;
      sub_10004191C(buf, "A2DP");
      sub_10004191C(v110, "A2DPOverSniffJBL");
      int v99 = (int *)(v1 + 268);
      (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 88))(v1, buf, v110, v1 + 268);
      if (v111 < 0) {
        operator delete(v110[0]);
      }
      if ((v131[1] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      int v100 = *v99;
      if ((*v99 - 301) <= 0xFFFFFEE1)
      {
        int v100 = 60;
        int *v99 = 60;
      }
      int v101 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v100;
        _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEFAULT, "JBL Value: %d", buf, 8u);
      }
    }
    if (_os_feature_enabled_impl())
    {
      *((_DWORD *)v1 + 68) = 1;
      sub_10004191C(buf, "A2DP");
      sub_10004191C(v110, "A2DPOverSniffAACELDFrames");
      __int16 v102 = (int *)(v1 + 272);
      (*(void (**)(unsigned char *, unsigned char *, void **, unsigned char *))(*(void *)v1 + 88))(v1, buf, v110, v1 + 272);
      if (v111 < 0) {
        operator delete(v110[0]);
      }
      if ((v131[1] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      int v103 = *v102;
      if ((*v102 - 4) <= 0xFFFFFFFC)
      {
        int v103 = 1;
        int *v102 = 1;
      }
      long long v104 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v103;
        _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_DEFAULT, "Overriden AACELD Frame Count: %d", buf, 8u);
      }
    }
    operator delete(v44);
  }
  if (SHIBYTE(v128) < 0) {
    operator delete(__p);
  }
}

void sub_100347114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  operator delete(a9);
  if (a37 < 0) {
    operator delete(a32);
  }
  _Unwind_Resume(a1);
}

void sub_1003475B4()
{
}

void sub_1003475BC(uint64_t a1)
{
  __int16 v50 = 0;
  unsigned __int8 v49 = 0;
  sub_100340C24((unsigned char *)a1, (BOOL *)&v50 + 1, (BOOL *)&v50, &v49);
  int v2 = 4997400;
  unsigned __int8 v48 = 0;
  __int16 v47 = 0;
  __int16 v46 = 0;
  int v44 = 4997400;
  int v45 = 3;
  unsigned __int8 v43 = 0;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 184))(a1);
  sub_10004191C(&__p, "HCITraces");
  sub_10004191C(buf, "UnlimitedHCIFileSize");
  (*(void (**)(uint64_t, void **, unsigned char *, char *))(*(void *)a1 + 72))(a1, &__p, buf, (char *)&v46 + 1);
  if (v67 < 0) {
    operator delete(*(void **)buf);
  }
  if ((v53[7] & 0x80000000) != 0) {
    operator delete(__p);
  }
  sub_10004191C(&__p, "HCITraces");
  sub_10004191C(buf, "RawAudioTrace");
  (*(void (**)(uint64_t, void **, unsigned char *, unsigned __int8 *))(*(void *)a1 + 72))(a1, &__p, buf, &v48);
  if (v67 < 0) {
    operator delete(*(void **)buf);
  }
  if ((v53[7] & 0x80000000) != 0) {
    operator delete(__p);
  }
  sub_10004191C(&__p, "HCITraces");
  sub_10004191C(buf, "HIDTrace");
  (*(void (**)(uint64_t, void **, unsigned char *, __int16 *))(*(void *)a1 + 72))(a1, &__p, buf, &v47);
  if (v67 < 0) {
    operator delete(*(void **)buf);
  }
  if ((v53[7] & 0x80000000) != 0) {
    operator delete(__p);
  }
  sub_10004191C(&__p, "HCITraces");
  sub_10004191C(buf, "AudioTimeSyncAudioLog");
  (*(void (**)(uint64_t, void **, unsigned char *, char *))(*(void *)a1 + 72))(a1, &__p, buf, (char *)&v47 + 1);
  if (v67 < 0) {
    operator delete(*(void **)buf);
  }
  if ((v53[7] & 0x80000000) != 0) {
    operator delete(__p);
  }
  sub_10004191C(&__p, "HCITraces");
  sub_10004191C(buf, "MaxFileSize");
  (*(void (**)(uint64_t, void **, unsigned char *, __int16 *))(*(void *)a1 + 72))(a1, &__p, buf, &v46);
  if (v67 < 0) {
    operator delete(*(void **)buf);
  }
  if ((v53[7] & 0x80000000) != 0) {
    operator delete(__p);
  }
  sub_10004191C(&__p, "HCITraces");
  sub_10004191C(buf, "MaxTraces");
  (*(void (**)(uint64_t, void **, unsigned char *, int *))(*(void *)a1 + 88))(a1, &__p, buf, &v45);
  if (v67 < 0) {
    operator delete(*(void **)buf);
  }
  if ((v53[7] & 0x80000000) != 0) {
    operator delete(__p);
  }
  sub_10004191C(&__p, "HCITraces");
  sub_10004191C(buf, "MaxFileSize");
  (*(void (**)(uint64_t, void **, unsigned char *, int *))(*(void *)a1 + 88))(a1, &__p, buf, &v44);
  if (v67 < 0) {
    operator delete(*(void **)buf);
  }
  if ((v53[7] & 0x80000000) != 0) {
    operator delete(__p);
  }
  sub_10004191C(&__p, "HCITraces");
  sub_10004191C(buf, "HCISkipAuth");
  (*(void (**)(uint64_t, void **, unsigned char *, unsigned __int8 *))(*(void *)a1 + 72))(a1, &__p, buf, &v43);
  if (v67 < 0) {
    operator delete(*(void **)buf);
  }
  if ((v53[7] & 0x80000000) != 0) {
    operator delete(__p);
  }
  Boolean keyExistsAndHasValidFormat = 0;
  AppBooleanCFDataRef Value = CFPreferencesGetAppBooleanValue(@"enableHIDLogging", @"com.apple.bluetooth", &keyExistsAndHasValidFormat);
  Boolean keyExistsAndHasValidFormat = 0;
  int v5 = CFPreferencesGetAppBooleanValue(@"enableHRMLogging", @"com.apple.bluetooth", &keyExistsAndHasValidFormat);
  int v6 = v45;
  if (v45 < 0 || v44 <= 999999)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_100758658();
    }
    int v6 = 5;
    int v44 = 4997400;
    int v45 = 5;
  }
  else
  {
    int v2 = v44;
  }
  if (HIBYTE(v46) && !(_BYTE)v46)
  {
    int v2 = 200000000;
    int v44 = 200000000;
  }
  int v7 = qword_100A19E50;
  BOOL v8 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT);
  int v9 = v49;
  if (v8)
  {
    LODWORD(__p) = 67111424;
    HIDWORD(__p) = v48;
    LOWORD(v52) = 1024;
    *(_DWORD *)((char *)&v52 + 2) = v47;
    HIWORD(v52) = 1024;
    *(_DWORD *)uint64_t v53 = AppBooleanValue != 0;
    *(_WORD *)&v53[4] = 1024;
    *(_DWORD *)&v53[6] = v2;
    __int16 v54 = 1024;
    int v55 = v6;
    __int16 v56 = 1024;
    int v57 = HIBYTE(v50);
    __int16 v58 = 1024;
    int v59 = v50;
    __int16 v60 = 1024;
    int v61 = HIBYTE(v47);
    __int16 v62 = 1024;
    int v63 = v3;
    __int16 v64 = 1024;
    int v65 = v49;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Set HCI config raw:%d HID:%d developerEnableHIDLogging:%d size:%d files:%d liveTracing:%d fileTracing:%d timesync:%d logENPackets:%d hciLiteLogging:%d", (uint8_t *)&__p, 0x3Eu);
    int v2 = v44;
    int v6 = v45;
  }
  sub_100114958(v48, (v47 | AppBooleanValue) != 0, v5 != 0, v2, v6, SHIBYTE(v50), v50, SHIBYTE(v47), v3, v9 != 0);
  sub_100114EA4(v43);
  std::string __p = 0;
  uint64_t v52 = 0;
  *(void *)uint64_t v53 = 0;
  sub_10004191C(buf, "HCITraces");
  sub_10004191C(v40, "AutoDisableTime");
  if ((*(unsigned int (**)(uint64_t, unsigned char *, void **, void **))(*(void *)a1 + 56))(a1, buf, v40, &__p))
  {
    if (v53[7] >= 0) {
      uint64_t v10 = v53[7];
    }
    else {
      uint64_t v10 = v52;
    }
    if (v41 < 0) {
      operator delete(v40[0]);
    }
    if (v67 < 0)
    {
      operator delete(*(void **)buf);
      if (!v10) {
        goto LABEL_74;
      }
    }
    else if (!v10)
    {
      goto LABEL_74;
    }
    if (v53[7] >= 0) {
      p_p = (const char *)&__p;
    }
    else {
      p_p = (const char *)__p;
    }
    CFStringRef v12 = CFStringCreateWithCString(0, p_p, 0x600u);
    uint64_t v13 = CFDateFormatterCreate(0, 0, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
    CFDateFormatterSetFormat(v13, @"HH:mm:ss MM-dd-yyyy");
    CFDateRef DateFromString = CFDateFormatterCreateDateFromString(0, v13, v12, 0);
    CFDateRef v15 = DateFromString;
    if (DateFromString)
    {
      CFDateRef v16 = *(const __CFDate **)(a1 + 40);
      if (!v16 || CFDateCompare(DateFromString, v16, 0))
      {
        uint64_t v17 = *(NSObject **)(a1 + 32);
        if (v17)
        {
          dispatch_suspend(v17);
        }
        else
        {
          uint64_t v18 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(a1 + 24));
          *(void *)(a1 + 32) = v18;
          handler[0] = _NSConcreteStackBlock;
          handler[1] = 3221225472;
          handler[2] = sub_10034A0D8;
          handler[3] = &unk_100997528;
          handler[4] = a1;
          dispatch_source_set_event_handler(v18, handler);
          uint64_t v19 = *(NSObject **)(a1 + 32);
          v38[0] = _NSConcreteStackBlock;
          v38[1] = 3221225472;
          v38[2] = sub_10034A114;
          v38[3] = &unk_100997528;
          v38[4] = a1;
          dispatch_source_set_cancel_handler(v19, v38);
        }
        char v20 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v21 = &__p;
          if (v53[7] < 0) {
            uint64_t v21 = __p;
          }
          *(_DWORD *)std::string buf = 136315138;
          *(void *)&uint8_t buf[4] = v21;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Enabling HCI unlimited tracing auto-disable for %s", buf, 0xCu);
        }
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        CFDateRef v23 = CFDateCreate(0, Current);
        double AbsoluteTime = CFDateGetAbsoluteTime(v15);
        double v25 = CFDateGetAbsoluteTime(v23);
        CFRelease(v23);
        int v26 = *(NSObject **)(a1 + 32);
        dispatch_time_t v27 = dispatch_walltime(0, (uint64_t)((AbsoluteTime - v25) * 1000000000.0));
        dispatch_source_set_timer(v26, v27, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
        dispatch_resume(*(dispatch_object_t *)(a1 + 32));
      }
      CFRelease(v15);
    }
    CFRelease(v13);
    CFRelease(v12);
  }
  else
  {
    if (v41 < 0) {
      operator delete(v40[0]);
    }
    if (v67 < 0) {
      operator delete(*(void **)buf);
    }
  }
LABEL_74:
  if ((_BYTE)v50)
  {
    int v29 = sub_100115A40();
    int v30 = qword_100A19E50;
    if (v29)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Successfully started HCI tracing", buf, 2u);
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
    {
      sub_100758624();
    }
  }
  else
  {
    std::string v31 = CFDateFormatterCreate(kCFAllocatorDefault, 0, kCFDateFormatterShortStyle, kCFDateFormatterFullStyle);
    CFDateFormatterSetFormat(v31, @"yyyy_MM_dd-HH_mm_ss");
    CFDateRef v32 = +[NSDate date];
    CFStringRef StringWithDate = CFDateFormatterCreateStringWithDate(kCFAllocatorDefault, v31, v32);
    if (v9) {
      CFStringRef v34 = @"%@/bluetoothd-hcilite-%@.pklg";
    }
    else {
      CFStringRef v34 = @"%@/bluetoothd-hci-%@.pklg";
    }
    __int16 v35 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v34, qword_100A123B8, StringWithDate);
    CFRelease(v31);
    id v36 = v35;
    sub_100115EF0((uint64_t)[v36 UTF8String]);
    uint64_t v37 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Successfully stopped HCI tracing", buf, 2u);
    }
    CFRelease(StringWithDate);
  }
  if ((v53[7] & 0x80000000) != 0) {
    operator delete(__p);
  }
}

void sub_100348060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10034812C(unsigned char *a1)
{
  uint64_t v2 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 2392))(v2))
  {
    unsigned int v8 = 0;
    sub_10004191C(buf, "SPMI");
    sub_10004191C(__p, "DebugControl");
    a1[255] = (*(uint64_t (**)(unsigned char *, uint8_t *, void **, unsigned int *))(*(void *)a1 + 128))(a1, buf, __p, &v8);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (v10 < 0) {
      operator delete(*(void **)buf);
    }
    if (a1[255])
    {
      int v3 = v8;
      if (v8 > 3)
      {
        a1[255] = 0;
        int v5 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
          sub_10075868C(v3, v5);
        }
      }
      else
      {
        a1[256] = v8;
        unsigned __int8 v4 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::string buf = 67240192;
          *(_DWORD *)&uint8_t buf[4] = v3;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "SPMI Debug Control is %{public}d", buf, 8u);
        }
      }
    }
  }
}

void sub_1003482C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100348304(uint64_t a1)
{
  uint64_t v2 = sub_100017768();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v2 + 8))(v2))
  {
    BOOL v4 = 0;
    return sub_10010D408(v4);
  }
  unsigned int v3 = *(_DWORD *)(sub_10003FB34() + 712) - 2000;
  BOOL v4 = v3 < 0x7D0;
  char v13 = 0;
  sub_10004191C(buf, "Firmware");
  sub_10004191C(__p, "DisableAppleFwLogsCapture");
  int v5 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, char *))(*(void *)a1 + 72))(a1, buf, __p, &v13);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12 < 0)
  {
    operator delete(*(void **)buf);
    if (!v5) {
      return sub_10010D408(v4);
    }
  }
  else if (!v5)
  {
    return sub_10010D408(v4);
  }
  BOOL v4 = v3 < 0x7D0 && v13 == 0;
  unsigned int v8 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Default writes disabling AppleFwLogCapture", buf, 2u);
  }
  return sub_10010D408(v4);
}

void sub_100348460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100348494(uint64_t a1, uint64_t *a2, uint64_t *a3, std::string *a4)
{
  if (*((char *)a2 + 23) >= 0) {
    unsigned int v8 = a2;
  }
  else {
    unsigned int v8 = (uint64_t *)*a2;
  }
  int v9 = +[NSString stringWithUTF8String:v8];
  char v10 = (void *)CFPreferencesCopyAppValue(v9, @"com.apple.MobileBluetooth.debug");

  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    if (*((char *)a3 + 23) >= 0) {
      BOOL v11 = a3;
    }
    else {
      BOOL v11 = (uint64_t *)*a3;
    }
    char v12 = +[NSString stringWithUTF8String:v11];
    char v13 = [v10 objectForKey:v12];

    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    if (isKindOfClass) {
      std::string::assign(a4, (const std::string::value_type *)[v13 UTF8String]);
    }
  }
  else
  {
    char isKindOfClass = 0;
  }

  return isKindOfClass & 1;
}

void sub_1003485B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003485E8(uint64_t a1, uint64_t *a2, int64x2_t *a3)
{
  if (*((char *)a2 + 23) >= 0) {
    int v5 = a2;
  }
  else {
    int v5 = (uint64_t *)*a2;
  }
  int v6 = +[NSString stringWithUTF8String:v5];
  __int16 v35 = (void *)CFPreferencesCopyAppValue(v6, @"com.apple.MobileBluetooth.debug");

  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    id v7 = v35;
    char v8 = 0;
    id v9 = [v7 countByEnumeratingWithState:&v38 objects:v46 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v39;
      do
      {
        for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v39 != v10) {
            objc_enumerationMutation(v7);
          }
          char v12 = *(void **)(*((void *)&v38 + 1) + 8 * i);
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            id v13 = v12;
            sub_10004191C(__p, (char *)[v13 UTF8String]);
            unint64_t v15 = a3->u64[1];
            unint64_t v14 = a3[1].u64[0];
            if (v15 >= v14)
            {
              unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - a3->i64[0]) >> 3);
              unint64_t v18 = v17 + 1;
              if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
                abort();
              }
              unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - a3->i64[0]) >> 3);
              if (2 * v19 > v18) {
                unint64_t v18 = 2 * v19;
              }
              if (v19 >= 0x555555555555555) {
                unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v20 = v18;
              }
              int v45 = a3 + 1;
              if (v20) {
                uint64_t v21 = (char *)sub_1002B3440((uint64_t)a3[1].i64, v20);
              }
              else {
                uint64_t v21 = 0;
              }
              char v22 = &v21[24 * v17];
              long long v23 = *(_OWORD *)__p;
              *((void *)v22 + 2) = v37;
              *(_OWORD *)char v22 = v23;
              __p[1] = 0;
              uint64_t v37 = 0;
              __p[0] = 0;
              uint64_t v25 = a3->i64[0];
              unint64_t v24 = a3->u64[1];
              if (v24 == a3->i64[0])
              {
                int64x2_t v28 = vdupq_n_s64(v24);
                int v26 = &v21[24 * v17];
              }
              else
              {
                int v26 = &v21[24 * v17];
                do
                {
                  long long v27 = *(_OWORD *)(v24 - 24);
                  *((void *)v26 - 1) = *(void *)(v24 - 8);
                  *(_OWORD *)(v26 - 24) = v27;
                  v26 -= 24;
                  *(void *)(v24 - 16) = 0;
                  *(void *)(v24 - 8) = 0;
                  *(void *)(v24 - 24) = 0;
                  v24 -= 24;
                }
                while (v24 != v25);
                int64x2_t v28 = *a3;
              }
              int v29 = v22 + 24;
              a3->i64[0] = (uint64_t)v26;
              a3->i64[1] = (uint64_t)(v22 + 24);
              int64x2_t v43 = v28;
              uint64_t v30 = a3[1].i64[0];
              a3[1].i64[0] = (uint64_t)&v21[24 * v20];
              uint64_t v44 = v30;
              uint64_t v42 = v28.i64[0];
              sub_1002B4440((uint64_t)&v42);
              int v31 = SHIBYTE(v37);
              a3->i64[1] = (uint64_t)v29;
              if (v31 < 0) {
                operator delete(__p[0]);
              }
            }
            else
            {
              long long v16 = *(_OWORD *)__p;
              *(void *)(v15 + 16) = v37;
              *(_OWORD *)unint64_t v15 = v16;
              a3->i64[1] = v15 + 24;
            }

            char v8 = 1;
          }
        }
        id v9 = [v7 countByEnumeratingWithState:&v38 objects:v46 count:16];
      }
      while (v9);
    }

    uint64_t v32 = v8 & 1;
  }
  else
  {
    uint64_t v32 = 0;
  }

  return v32;
}

void sub_1003488EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _Unwind_Resume(a1);
}

void sub_100348950(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  if (*((char *)a2 + 23) >= 0) {
    char v8 = a2;
  }
  else {
    char v8 = (uint64_t *)*a2;
  }
  id v9 = +[NSString stringWithUTF8String:v8];
  uint64_t v10 = (void *)CFPreferencesCopyAppValue(v9, @"com.apple.MobileBluetooth.debug");

  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v11 = [v10 mutableCopy];
    if (*((char *)a4 + 23) >= 0) {
      char v12 = a4;
    }
    else {
      char v12 = (uint64_t *)*a4;
    }
    id v13 = +[NSString stringWithUTF8String:v12];
    if (*((char *)a3 + 23) >= 0) {
      unint64_t v14 = a3;
    }
    else {
      unint64_t v14 = (uint64_t *)*a3;
    }
    unint64_t v15 = +[NSString stringWithUTF8String:v14];
    [v11 setObject:v13 forKey:v15];

    if (*((char *)a2 + 23) >= 0) {
      long long v16 = a2;
    }
    else {
      long long v16 = (uint64_t *)*a2;
    }
  }
  else
  {
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v17 = a4;
    }
    else {
      unint64_t v17 = (uint64_t *)*a4;
    }
    unint64_t v18 = +[NSString stringWithUTF8String:v17];
    if (*((char *)a3 + 23) >= 0) {
      unint64_t v19 = a3;
    }
    else {
      unint64_t v19 = (uint64_t *)*a3;
    }
    unint64_t v20 = +[NSString stringWithUTF8String:v19];
    id v11 = +[NSDictionary dictionaryWithObject:v18 forKey:v20];

    if (*((char *)a2 + 23) >= 0) {
      long long v16 = a2;
    }
    else {
      long long v16 = (uint64_t *)*a2;
    }
  }
  uint64_t v21 = +[NSString stringWithUTF8String:v16];
  CFPreferencesSetAppValue(v21, v11, @"com.apple.MobileBluetooth.debug");

  CFPreferencesAppSynchronize(@"com.apple.MobileBluetooth.debug");
}

void sub_100348B54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100348BC8(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if (*((char *)a2 + 23) >= 0) {
    char v8 = a2;
  }
  else {
    char v8 = (uint64_t *)*a2;
  }
  id v9 = +[NSString stringWithUTF8String:v8];
  uint64_t v10 = (void *)CFPreferencesCopyAppValue(v9, @"com.apple.MobileBluetooth.debug");

  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v11 = [v10 mutableCopy];
    char v12 = +[NSNumber numberWithBool:a4];
    if (*((char *)a3 + 23) >= 0) {
      id v13 = a3;
    }
    else {
      id v13 = (uint64_t *)*a3;
    }
    unint64_t v14 = +[NSString stringWithUTF8String:v13];
    [v11 setObject:v12 forKey:v14];

    if (*((char *)a2 + 23) >= 0) {
      unint64_t v15 = a2;
    }
    else {
      unint64_t v15 = (uint64_t *)*a2;
    }
  }
  else
  {
    long long v16 = +[NSNumber numberWithBool:a4];
    if (*((char *)a3 + 23) >= 0) {
      unint64_t v17 = a3;
    }
    else {
      unint64_t v17 = (uint64_t *)*a3;
    }
    unint64_t v18 = +[NSString stringWithUTF8String:v17];
    id v11 = +[NSDictionary dictionaryWithObject:v16 forKey:v18];

    if (*((char *)a2 + 23) >= 0) {
      unint64_t v15 = a2;
    }
    else {
      unint64_t v15 = (uint64_t *)*a2;
    }
  }
  unint64_t v19 = +[NSString stringWithUTF8String:v15];
  CFPreferencesSetAppValue(v19, v11, @"com.apple.MobileBluetooth.debug");

  CFPreferencesAppSynchronize(@"com.apple.MobileBluetooth.debug");
}

void sub_100348DBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100348E30(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  if (*((char *)a2 + 23) >= 0) {
    char v8 = a2;
  }
  else {
    char v8 = (uint64_t *)*a2;
  }
  id v9 = +[NSString stringWithUTF8String:v8];
  uint64_t v10 = (void *)CFPreferencesCopyAppValue(v9, @"com.apple.MobileBluetooth.debug");

  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v11 = [v10 mutableCopy];
    char v12 = +[NSNumber numberWithInteger:a4];
    if (*((char *)a3 + 23) >= 0) {
      id v13 = a3;
    }
    else {
      id v13 = (uint64_t *)*a3;
    }
    unint64_t v14 = +[NSString stringWithUTF8String:v13];
    [v11 setObject:v12 forKey:v14];

    if (*((char *)a2 + 23) >= 0) {
      unint64_t v15 = a2;
    }
    else {
      unint64_t v15 = (uint64_t *)*a2;
    }
  }
  else
  {
    long long v16 = +[NSNumber numberWithInteger:a4];
    if (*((char *)a3 + 23) >= 0) {
      unint64_t v17 = a3;
    }
    else {
      unint64_t v17 = (uint64_t *)*a3;
    }
    unint64_t v18 = +[NSString stringWithUTF8String:v17];
    id v11 = +[NSDictionary dictionaryWithObject:v16 forKey:v18];

    if (*((char *)a2 + 23) >= 0) {
      unint64_t v15 = a2;
    }
    else {
      unint64_t v15 = (uint64_t *)*a2;
    }
  }
  unint64_t v19 = +[NSString stringWithUTF8String:v15];
  CFPreferencesSetAppValue(v19, v11, @"com.apple.MobileBluetooth.debug");

  CFPreferencesAppSynchronize(@"com.apple.MobileBluetooth.debug");
}

void sub_100349024(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100349098(uint64_t a1, uint64_t *a2, uint64_t *a3, _DWORD *a4)
{
  if (*((char *)a2 + 23) >= 0) {
    char v8 = a2;
  }
  else {
    char v8 = (uint64_t *)*a2;
  }
  id v9 = +[NSString stringWithUTF8String:v8];
  uint64_t v10 = (void *)CFPreferencesCopyAppValue(v9, @"com.apple.MobileBluetooth.debug");

  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    if (*((char *)a3 + 23) >= 0) {
      id v11 = a3;
    }
    else {
      id v11 = (uint64_t *)*a3;
    }
    char v12 = +[NSString stringWithUTF8String:v11];
    id v13 = [v10 objectForKey:v12];

    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    if (isKindOfClass)
    {
      [v13 floatValue];
      *a4 = v15;
    }
  }
  else
  {
    char isKindOfClass = 0;
  }

  return isKindOfClass & 1;
}

void sub_1003491AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003491E4(float a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  if (*((char *)a3 + 23) >= 0) {
    char v8 = a3;
  }
  else {
    char v8 = (uint64_t *)*a3;
  }
  id v9 = +[NSString stringWithUTF8String:v8];
  uint64_t v10 = (void *)CFPreferencesCopyAppValue(v9, @"com.apple.MobileBluetooth.debug");

  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v12 = [v10 mutableCopy];
    *(float *)&double v13 = a1;
    unint64_t v14 = +[NSNumber numberWithFloat:v13];
    if (*((char *)a4 + 23) >= 0) {
      int v15 = a4;
    }
    else {
      int v15 = (uint64_t *)*a4;
    }
    long long v16 = +[NSString stringWithUTF8String:v15];
    [v12 setObject:v14 forKey:v16];

    if (*((char *)a3 + 23) >= 0) {
      unint64_t v17 = a3;
    }
    else {
      unint64_t v17 = (uint64_t *)*a3;
    }
  }
  else
  {
    *(float *)&double v11 = a1;
    unint64_t v18 = +[NSNumber numberWithFloat:v11];
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v19 = a4;
    }
    else {
      unint64_t v19 = (uint64_t *)*a4;
    }
    unint64_t v20 = +[NSString stringWithUTF8String:v19];
    id v12 = +[NSDictionary dictionaryWithObject:v18 forKey:v20];

    if (*((char *)a3 + 23) >= 0) {
      unint64_t v17 = a3;
    }
    else {
      unint64_t v17 = (uint64_t *)*a3;
    }
  }
  uint64_t v21 = +[NSString stringWithUTF8String:v17];
  CFPreferencesSetAppValue(v21, v12, @"com.apple.MobileBluetooth.debug");

  CFPreferencesAppSynchronize(@"com.apple.MobileBluetooth.debug");
}

void sub_1003493E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100349454(uint64_t a1, uint64_t *a2, uint64_t *a3, _DWORD *a4)
{
  if (*((char *)a2 + 23) >= 0) {
    char v8 = a2;
  }
  else {
    char v8 = (uint64_t *)*a2;
  }
  id v9 = +[NSString stringWithUTF8String:v8];
  uint64_t v10 = (void *)CFPreferencesCopyAppValue(v9, @"com.apple.MobileBluetooth.debug");

  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    if (*((char *)a3 + 23) >= 0) {
      double v11 = a3;
    }
    else {
      double v11 = (uint64_t *)*a3;
    }
    id v12 = +[NSString stringWithUTF8String:v11];
    double v13 = [v10 objectForKey:v12];

    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    if (isKindOfClass) {
      *a4 = [v13 unsignedIntValue];
    }
  }
  else
  {
    char isKindOfClass = 0;
  }

  return isKindOfClass & 1;
}

void sub_100349568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003495A0(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned int a4)
{
  if (*((char *)a2 + 23) >= 0) {
    char v8 = a2;
  }
  else {
    char v8 = (uint64_t *)*a2;
  }
  id v9 = +[NSString stringWithUTF8String:v8];
  uint64_t v10 = (void *)CFPreferencesCopyAppValue(v9, @"com.apple.MobileBluetooth.debug");

  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v11 = [v10 mutableCopy];
    id v12 = +[NSNumber numberWithUnsignedInteger:a4];
    if (*((char *)a3 + 23) >= 0) {
      double v13 = a3;
    }
    else {
      double v13 = (uint64_t *)*a3;
    }
    unint64_t v14 = +[NSString stringWithUTF8String:v13];
    [v11 setObject:v12 forKey:v14];

    if (*((char *)a2 + 23) >= 0) {
      int v15 = a2;
    }
    else {
      int v15 = (uint64_t *)*a2;
    }
  }
  else
  {
    long long v16 = +[NSNumber numberWithUnsignedInteger:a4];
    if (*((char *)a3 + 23) >= 0) {
      unint64_t v17 = a3;
    }
    else {
      unint64_t v17 = (uint64_t *)*a3;
    }
    unint64_t v18 = +[NSString stringWithUTF8String:v17];
    id v11 = +[NSDictionary dictionaryWithObject:v16 forKey:v18];

    if (*((char *)a2 + 23) >= 0) {
      int v15 = a2;
    }
    else {
      int v15 = (uint64_t *)*a2;
    }
  }
  unint64_t v19 = +[NSString stringWithUTF8String:v15];
  CFPreferencesSetAppValue(v19, v11, @"com.apple.MobileBluetooth.debug");

  CFPreferencesAppSynchronize(@"com.apple.MobileBluetooth.debug");
}

void sub_100349794(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100349808(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  if (*((char *)a2 + 23) >= 0) {
    char v8 = a2;
  }
  else {
    char v8 = (uint64_t *)*a2;
  }
  id v9 = +[NSString stringWithUTF8String:v8];
  uint64_t v10 = (void *)CFPreferencesCopyAppValue(v9, @"com.apple.MobileBluetooth.debug");

  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    if (*((char *)a3 + 23) >= 0) {
      id v11 = a3;
    }
    else {
      id v11 = (uint64_t *)*a3;
    }
    id v12 = +[NSString stringWithUTF8String:v11];
    double v13 = [v10 objectForKey:v12];

    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    if (isKindOfClass) {
      *a4 = [v13 unsignedLongLongValue];
    }
  }
  else
  {
    char isKindOfClass = 0;
  }

  return isKindOfClass & 1;
}

void sub_10034991C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100349954(uint64_t a1, uint64_t *a2, int64x2_t *a3)
{
  if (*((char *)a2 + 23) >= 0) {
    int v5 = a2;
  }
  else {
    int v5 = (uint64_t *)*a2;
  }
  int v6 = +[NSString stringWithUTF8String:v5];
  __int16 v35 = (void *)CFPreferencesCopyAppValue(v6, @"com.apple.MobileBluetooth.debug");

  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    id v7 = v35;
    char v8 = 0;
    id v9 = [v7 countByEnumeratingWithState:&v38 objects:v46 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v39;
      do
      {
        for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v39 != v10) {
            objc_enumerationMutation(v7);
          }
          id v12 = *(void **)(*((void *)&v38 + 1) + 8 * i);
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            id v13 = v12;
            sub_10004191C(__p, (char *)[v13 UTF8String]);
            unint64_t v15 = a3->u64[1];
            unint64_t v14 = a3[1].u64[0];
            if (v15 >= v14)
            {
              unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - a3->i64[0]) >> 3);
              unint64_t v18 = v17 + 1;
              if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
                abort();
              }
              unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - a3->i64[0]) >> 3);
              if (2 * v19 > v18) {
                unint64_t v18 = 2 * v19;
              }
              if (v19 >= 0x555555555555555) {
                unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v20 = v18;
              }
              int v45 = a3 + 1;
              if (v20) {
                uint64_t v21 = (char *)sub_1002B3440((uint64_t)a3[1].i64, v20);
              }
              else {
                uint64_t v21 = 0;
              }
              char v22 = &v21[24 * v17];
              long long v23 = *(_OWORD *)__p;
              *((void *)v22 + 2) = v37;
              *(_OWORD *)char v22 = v23;
              __p[1] = 0;
              uint64_t v37 = 0;
              __p[0] = 0;
              uint64_t v25 = a3->i64[0];
              unint64_t v24 = a3->u64[1];
              if (v24 == a3->i64[0])
              {
                int64x2_t v28 = vdupq_n_s64(v24);
                int v26 = &v21[24 * v17];
              }
              else
              {
                int v26 = &v21[24 * v17];
                do
                {
                  long long v27 = *(_OWORD *)(v24 - 24);
                  *((void *)v26 - 1) = *(void *)(v24 - 8);
                  *(_OWORD *)(v26 - 24) = v27;
                  v26 -= 24;
                  *(void *)(v24 - 16) = 0;
                  *(void *)(v24 - 8) = 0;
                  *(void *)(v24 - 24) = 0;
                  v24 -= 24;
                }
                while (v24 != v25);
                int64x2_t v28 = *a3;
              }
              int v29 = v22 + 24;
              a3->i64[0] = (uint64_t)v26;
              a3->i64[1] = (uint64_t)(v22 + 24);
              int64x2_t v43 = v28;
              uint64_t v30 = a3[1].i64[0];
              a3[1].i64[0] = (uint64_t)&v21[24 * v20];
              uint64_t v44 = v30;
              uint64_t v42 = v28.i64[0];
              sub_1002B4440((uint64_t)&v42);
              int v31 = SHIBYTE(v37);
              a3->i64[1] = (uint64_t)v29;
              if (v31 < 0) {
                operator delete(__p[0]);
              }
            }
            else
            {
              long long v16 = *(_OWORD *)__p;
              *(void *)(v15 + 16) = v37;
              *(_OWORD *)unint64_t v15 = v16;
              a3->i64[1] = v15 + 24;
            }

            char v8 = 1;
          }
        }
        id v9 = [v7 countByEnumeratingWithState:&v38 objects:v46 count:16];
      }
      while (v9);
    }

    uint64_t v32 = v8 & 1;
  }
  else
  {
    uint64_t v32 = 0;
  }

  return v32;
}

void sub_100349C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _Unwind_Resume(a1);
}

void sub_100349CBC(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if (*((char *)a2 + 23) >= 0) {
    char v8 = a2;
  }
  else {
    char v8 = (uint64_t *)*a2;
  }
  id v9 = +[NSString stringWithUTF8String:v8];
  uint64_t v10 = (void *)CFPreferencesCopyAppValue(v9, @"com.apple.MobileBluetooth.debug");

  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v11 = [v10 mutableCopy];
    id v12 = +[NSNumber numberWithUnsignedLongLong:a4];
    if (*((char *)a3 + 23) >= 0) {
      id v13 = a3;
    }
    else {
      id v13 = (uint64_t *)*a3;
    }
    unint64_t v14 = +[NSString stringWithUTF8String:v13];
    [v11 setObject:v12 forKey:v14];

    if (*((char *)a2 + 23) >= 0) {
      unint64_t v15 = a2;
    }
    else {
      unint64_t v15 = (uint64_t *)*a2;
    }
  }
  else
  {
    long long v16 = +[NSNumber numberWithUnsignedLongLong:a4];
    if (*((char *)a3 + 23) >= 0) {
      unint64_t v17 = a3;
    }
    else {
      unint64_t v17 = (uint64_t *)*a3;
    }
    unint64_t v18 = +[NSString stringWithUTF8String:v17];
    id v11 = +[NSDictionary dictionaryWithObject:v16 forKey:v18];

    if (*((char *)a2 + 23) >= 0) {
      unint64_t v15 = a2;
    }
    else {
      unint64_t v15 = (uint64_t *)*a2;
    }
  }
  unint64_t v19 = +[NSString stringWithUTF8String:v15];
  CFPreferencesSetAppValue(v19, v11, @"com.apple.MobileBluetooth.debug");

  CFPreferencesAppSynchronize(@"com.apple.MobileBluetooth.debug");
}

void sub_100349EB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_100349F24(unsigned char *a1)
{
  if (a1[250] || a1[248]) {
    return 1;
  }
  if ((*(uint64_t (**)(unsigned char *))(*(void *)a1 + 8))(a1)) {
    return 0;
  }
  uint64_t v2 = qword_100A19FA0;

  return os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
}

void sub_100349FA4(uint64_t a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "HCI tracing timer expired - disabling unlimited tracing", v7, 2u);
  }
  CFDictionaryRef v3 = (const __CFDictionary *)CFPreferencesCopyAppValue(@"HCITraces", @"com.apple.MobileBluetooth.debug");
  CFDictionaryRef v4 = v3;
  if (v3 && (CFTypeID v5 = CFGetTypeID(v3), v5 == CFDictionaryGetTypeID()))
  {
    MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(0, 0, v4);
    CFDictionaryRemoveValue(MutableCopy, @"UnlimitedHCIFileSize");
    CFDictionaryRemoveValue(MutableCopy, @"MaxFileSize");
    CFDictionaryRemoveValue(MutableCopy, @"AutoDisableTime");
  }
  else
  {
    MutableCFDictionaryRef Copy = 0;
  }
  CFPreferencesSetAppValue(@"HCITraces", MutableCopy, @"com.apple.MobileBluetooth.debug");
  CFPreferencesAppSynchronize(@"com.apple.MobileBluetooth.debug");
  sub_1003475BC(a1);
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (v4) {
    CFRelease(v4);
  }
}

void sub_10034A0D8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  dispatch_source_cancel(*(dispatch_source_t *)(v1 + 32));

  sub_100349FA4(v1);
}

void sub_10034A114(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  dispatch_release(*(dispatch_object_t *)(v1 + 32));
  *(void *)(v1 + 32) = 0;
}

void sub_10034A140(uint64_t a1, int a2)
{
  uint64_t v4 = sub_100017768();
  *(unsigned char *)(a1 + 196) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
  sub_10004191C(&v57, "FWStreamLogging");
  sub_10004191C(__p, "FWCoreDumpEnable");
  (*(void (**)(uint64_t, std::string *, void **, uint64_t))(*(void *)a1 + 72))(a1, &v57, __p, a1 + 196);
  if (v56 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  sub_10010D204(*(unsigned __int8 *)(a1 + 196));
  if (!*(unsigned char *)(a1 + 88)) {
    return;
  }
  sub_10003FB34();
  if (sub_100351A24())
  {
    LOBYTE(v43[0]) = 0;
    uint64_t v5 = sub_100017768();
    LOBYTE(v43[0]) = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
    sub_10004191C(&v57, "Enable FW Logs");
    sub_10004191C(__p, "FWEnhancedLoggingEnable");
    int v6 = (*(uint64_t (**)(uint64_t, std::string *, void **, void **))(*(void *)a1 + 72))(a1, &v57, __p, v43);
    if (v56 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    int v7 = *(unsigned __int8 *)(a1 + 183);
    BOOL v8 = v7 != LOBYTE(v43[0]);
    if (v7 != LOBYTE(v43[0])) {
      *(unsigned char *)(a1 + 183) = v43[0];
    }
    uint64_t v9 = sub_100035F54();
    BOOL v11 = (*(unsigned int (**)(uint64_t))(*(void *)v9 + 384))(v9)
       && (uint64_t v10 = sub_100017768(), (*(unsigned int (**)(uint64_t))(*(void *)v10 + 8))(v10))
       && *(_DWORD *)(sub_10003FB34() + 712) > 0x16u;
    if (*(unsigned char *)(a1 + 183))
    {
      if (*(_DWORD *)(sub_10003FB34() + 712) == 15) {
        int v12 = 2048;
      }
      else {
        int v12 = 3072;
      }
      if (*(_DWORD *)(a1 + 184) != v12)
      {
        *(_DWORD *)(a1 + 184) = v12;
        BOOL v8 = 1;
      }
      if (*(_DWORD *)(a1 + 188) != 4)
      {
        *(_DWORD *)(a1 + 188) = 4;
        BOOL v8 = 1;
      }
      BOOL v54 = v11;
      BOOL v53 = v11;
      BOOL v52 = v11;
      unsigned __int8 v51 = 0;
      BOOL v50 = v11;
      BOOL v49 = v11;
      __int16 v48 = 0;
      unsigned __int8 v47 = 0;
      BOOL v46 = v11;
      __int16 v45 = 0;
      sub_10004191C(&v57, "Route to HCI");
      sub_10004191C(__p, "FWEnhancedLoggingEnable");
      (*(void (**)(uint64_t, std::string *, void **, BOOL *))(*(void *)a1 + 72))(a1, &v57, __p, &v54);
      if (v56 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57.__r_.__value_.__l.__data_);
      }
      BOOL v13 = v54;
      sub_10004191C(&v57, "Log Level Lite");
      sub_10004191C(__p, "FWEnhancedLoggingEnable");
      (*(void (**)(uint64_t, std::string *, void **, BOOL *))(*(void *)a1 + 72))(a1, &v57, __p, &v53);
      if (v56 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57.__r_.__value_.__l.__data_);
      }
      BOOL v14 = v53;
      sub_10004191C(&v57, "Log Level Advanced");
      sub_10004191C(__p, "FWEnhancedLoggingEnable");
      (*(void (**)(uint64_t, std::string *, void **, BOOL *))(*(void *)a1 + 72))(a1, &v57, __p, &v52);
      if (v56 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57.__r_.__value_.__l.__data_);
      }
      BOOL v15 = v52;
      sub_10004191C(&v57, "Voice");
      sub_10004191C(__p, "FWEnhancedLoggingEnable");
      (*(void (**)(uint64_t, std::string *, void **, unsigned __int8 *))(*(void *)a1 + 72))(a1, &v57, __p, &v51);
      if (v56 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57.__r_.__value_.__l.__data_);
      }
      int v16 = v51;
      sub_10004191C(&v57, "CoEx");
      sub_10004191C(__p, "FWEnhancedLoggingEnable");
      (*(void (**)(uint64_t, std::string *, void **, BOOL *))(*(void *)a1 + 72))(a1, &v57, __p, &v50);
      if (v56 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57.__r_.__value_.__l.__data_);
      }
      BOOL v17 = v50;
      sub_10004191C(&v57, "CoEx1");
      sub_10004191C(__p, "FWEnhancedLoggingEnable");
      (*(void (**)(uint64_t, std::string *, void **, BOOL *))(*(void *)a1 + 72))(a1, &v57, __p, &v49);
      if (v56 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57.__r_.__value_.__l.__data_);
      }
      BOOL v40 = v49;
      sub_10004191C(&v57, "CoEx2");
      sub_10004191C(__p, "FWEnhancedLoggingEnable");
      (*(void (**)(uint64_t, std::string *, void **, char *))(*(void *)a1 + 72))(a1, &v57, __p, (char *)&v48 + 1);
      if (v56 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57.__r_.__value_.__l.__data_);
      }
      int v39 = HIBYTE(v48);
      sub_10004191C(&v57, "LTE CoEx");
      sub_10004191C(__p, "FWEnhancedLoggingEnable");
      (*(void (**)(uint64_t, std::string *, void **, __int16 *))(*(void *)a1 + 72))(a1, &v57, __p, &v48);
      if (v56 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57.__r_.__value_.__l.__data_);
      }
      int v38 = v48;
      sub_10004191C(&v57, "Apipe");
      sub_10004191C(__p, "FWEnhancedLoggingEnable");
      (*(void (**)(uint64_t, std::string *, void **, unsigned __int8 *))(*(void *)a1 + 72))(a1, &v57, __p, &v47);
      if (v56 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57.__r_.__value_.__l.__data_);
      }
      int v37 = v47;
      sub_10004191C(&v57, "Non Connection");
      sub_10004191C(__p, "FWEnhancedLoggingEnable");
      (*(void (**)(uint64_t, std::string *, void **, BOOL *))(*(void *)a1 + 72))(a1, &v57, __p, &v46);
      BOOL v35 = v17;
      if (v56 < 0) {
        operator delete(__p[0]);
      }
      int v18 = v16;
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57.__r_.__value_.__l.__data_);
      }
      BOOL v36 = v11;
      int v19 = v46;
      sub_10004191C(&v57, "Scan Core");
      sub_10004191C(__p, "FWEnhancedLoggingEnable");
      int v20 = a2;
      (*(void (**)(uint64_t, std::string *, void **, char *))(*(void *)a1 + 72))(a1, &v57, __p, (char *)&v45 + 1);
      BOOL v21 = v8;
      if (v56 < 0) {
        operator delete(__p[0]);
      }
      int v22 = v6;
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57.__r_.__value_.__l.__data_);
      }
      int v23 = HIBYTE(v45);
      sub_10004191C(&v57, "HP Link");
      sub_10004191C(__p, "FWEnhancedLoggingEnable");
      (*(void (**)(uint64_t, std::string *, void **, __int16 *))(*(void *)a1 + 72))(a1, &v57, __p, &v45);
      int v24 = v13 | (2 * v14) | (4 * v15) | (8 * v18) | (16 * v35) | (32 * v40) | (v39 << 6) | (v38 << 7) | (v37 << 8) | (v19 << 9);
      if (v56 < 0) {
        operator delete(__p[0]);
      }
      int v25 = v24 | (v23 << 10);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57.__r_.__value_.__l.__data_);
      }
      int v26 = v25 | (v45 << 12);
      int v6 = v22;
      BOOL v8 = v21;
      if (*(_DWORD *)(a1 + 192) != v26)
      {
        *(_DWORD *)(a1 + 192) = v26;
        BOOL v8 = 1;
      }
      a2 = v20;
      BOOL v11 = v36;
    }
    if (v8 || a2)
    {
      if (*(unsigned char *)(a1 + 183))
      {
        uint64_t v27 = sub_10003FB34();
        (*(void (**)(uint64_t, void, void, void))(*(void *)v27 + 1240))(v27, 0, 0, 0);
      }
      uint64_t v28 = sub_10003FB34();
      (*(void (**)(uint64_t, void, void, void))(*(void *)v28 + 1240))(v28, *(unsigned __int8 *)(a1 + 183), *(unsigned int *)(a1 + 184), *(unsigned int *)(a1 + 188));
      if (*(unsigned char *)(a1 + 183))
      {
        uint64_t v29 = sub_10003FB34();
        if ((v6 | v11) == 1) {
          uint64_t v30 = *(unsigned int *)(a1 + 192);
        }
        else {
          uint64_t v30 = 2;
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v29 + 3360))(v29, v30);
      }
    }
  }
  BOOL v54 = 0;
  sub_10004191C(&v57, "FWStreamLogging");
  sub_10004191C(__p, "FWStreamLoggingTriggerLogDump");
  (*(void (**)(uint64_t, std::string *, void **, BOOL *))(*(void *)a1 + 72))(a1, &v57, __p, &v54);
  if (v56 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (v54)
  {
    sub_10004191C(&v57, "FWStreamLogging");
    sub_10004191C(__p, "FWStreamLoggingTriggerLogDump");
    (*(void (**)(uint64_t, std::string *, void **, void))(*(void *)a1 + 80))(a1, &v57, __p, 0);
    if (v56 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    memset(&v57, 0, sizeof(v57));
    sub_10004191C(__p, "FWStreamLogging");
    sub_10004191C(v43, "FWStreamLoggingLogDumpReason");
    char v31 = (*(uint64_t (**)(uint64_t, void **, void **, std::string *))(*(void *)a1 + 56))(a1, __p, v43, &v57);
    if (v44 < 0) {
      operator delete(v43[0]);
    }
    if (v56 < 0)
    {
      operator delete(__p[0]);
      if (v31) {
        goto LABEL_101;
      }
    }
    else if (v31)
    {
LABEL_101:
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v32 = &v57;
      }
      else {
        uint64_t v32 = (std::string *)v57.__r_.__value_.__r.__words[0];
      }
      (*(void (**)(uint64_t, std::string *))(*(void *)a1 + 496))(a1, v32);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57.__r_.__value_.__l.__data_);
      }
      goto LABEL_106;
    }
    std::string::assign(&v57, "Manually triggered log dump");
    goto LABEL_101;
  }
LABEL_106:
  BOOL v53 = 0;
  sub_10004191C(&v57, "FWStreamLogging");
  sub_10004191C(__p, "FWCoreDumpTrigger");
  (*(void (**)(uint64_t, std::string *, void **, BOOL *))(*(void *)a1 + 72))(a1, &v57, __p, &v53);
  if (v56 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (v53)
  {
    sub_10004191C(&v57, "FWStreamLogging");
    sub_10004191C(__p, "FWCoreDumpTrigger");
    (*(void (**)(uint64_t, std::string *, void **, void))(*(void *)a1 + 80))(a1, &v57, __p, 0);
    if (v56 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    memset(&v57, 0, sizeof(v57));
    sub_10004191C(__p, "FWStreamLogging");
    sub_10004191C(v43, "FWCoreDumpReason");
    char v33 = (*(uint64_t (**)(uint64_t, void **, void **, std::string *))(*(void *)a1 + 56))(a1, __p, v43, &v57);
    if (v44 < 0) {
      operator delete(v43[0]);
    }
    if (v56 < 0)
    {
      operator delete(__p[0]);
      if (v33)
      {
LABEL_122:
        block[0] = _NSConcreteStackBlock;
        block[1] = 3321888768;
        block[2] = sub_10034AFFC;
        block[3] = &unk_1009A7660;
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
          sub_10003B098(&v42, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
        }
        else {
          std::string v42 = v57;
        }
        global_queue = dispatch_get_global_queue(0, 0);
        dispatch_async(global_queue, block);
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v42.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v57.__r_.__value_.__l.__data_);
        }
        return;
      }
    }
    else if (v33)
    {
      goto LABEL_122;
    }
    std::string::assign(&v57, "Manually triggered core dump");
    goto LABEL_122;
  }
}

void sub_10034AF0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 89) < 0) {
    operator delete(*(void **)(v32 - 112));
  }
  _Unwind_Resume(exception_object);
}

void sub_10034AFFC(uint64_t a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A7798);
  }
  uint64_t v2 = off_1009F8068;
  if (*(char *)(a1 + 55) < 0)
  {
    sub_10003B098(__p, *(void **)(a1 + 32), *(void *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  sub_1004E258C((uint64_t)v2, 3703, (long long *)__p);
}

void sub_10034B0A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10034B0BC(IOBTDebug *a1)
{
  if (*((unsigned char *)a1 + 183)) {
    IOBTDebug::create(a1);
  }
  uint64_t v1 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "FW log streaming disabled, skipping BTDebug log dump", v2, 2u);
  }
}

void sub_10034B194(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10033D370((IOBTDebug **)va, 0);
  _Unwind_Resume(a1);
}

void sub_10034B1AC(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10034B1B4(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  int v11 = -536870186;
  sub_10003FB34();
  BOOL v5 = sub_100351A24();
  if (v5 && a1[196]) {
    IOBTDebug::create((IOBTDebug *)v5);
  }
  int v6 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "FW PCIe core dumps disabled or not supported", buf, 2u);
  }
  if (*((_DWORD *)v9 + 6)) {
    (*(void (**)(unsigned char *, uint64_t))(*(void *)a1 + 496))(a1, a3);
  }

  _Block_object_dispose(&v8, 8);
  return 0;
}

void sub_10034B4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v10 = va_arg(va1, IOBTDebug *);
  sub_10033D370((IOBTDebug **)va, 0);

  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10034B518(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  CFDictionaryRef v3 = *(NSObject **)(a1 + 40);
  *(_DWORD *)(*(void *)(v2 + 8) + 24) = a2;
  dispatch_group_leave(v3);
}

void sub_10034B528(void *a1, uint64_t a2)
{
  CFDictionaryRef v3 = objc_retainBlock(a1);
  uint64_t v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PCIe core dump complete: 0x%08X", (uint8_t *)v5, 8u);
  }
  v3[2](v3, a2);
}

void sub_10034B5F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10034B60C(uint64_t a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 32);
    int v14 = 67109376;
    int v15 = v3;
    __int16 v16 = 2048;
    uint64_t v17 = qword_100A123D0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "setDoubleHeightStatusBar: %d %p", (uint8_t *)&v14, 0x12u);
  }
  uint64_t v4 = dword_100A123E8;
  if (!dword_100A123E8)
  {
    uint64_t v4 = getpid();
    dword_100A123E8 = v4;
  }
  uint64_t v5 = qword_100A123D0;
  if (v4) {
    BOOL v6 = qword_100A123D0 == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    uint64_t v7 = +[SBSStatusBarStyleOverridesAssertion assertionWithStatusBarStyleOverrides:0x200000 forPID:v4 exclusive:0 showsWhenForeground:1];
    uint64_t v8 = (void *)qword_100A123D0;
    qword_100A123D0 = v7;

    LODWORD(v4) = dword_100A123E8;
    uint64_t v5 = qword_100A123D0;
  }
  if (v4 && v5)
  {
    if (*(unsigned char *)(a1 + 32))
    {
      if (qword_100A123E0)
      {
        [(id)qword_100A123E0 invalidate];
        uint64_t v9 = (void *)qword_100A123E0;
        qword_100A123E0 = 0;
      }
      if (!byte_100A123D8)
      {
        uint64_t v10 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v14) = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Acquire assertion", (uint8_t *)&v14, 2u);
        }
        [(id)qword_100A123D0 acquireWithHandler:&stru_1009A76D8 invalidationHandler:&stru_1009A76F8];
        [(id)qword_100A123D0 setStatusString:@"Recording Bluetooth Data"];
      }
    }
    else if (byte_100A123D8 && !qword_100A123E0)
    {
      uint64_t v12 = +[NSTimer scheduledTimerWithTimeInterval:0 repeats:&stru_1009A7738 block:2.0];
      BOOL v13 = (void *)qword_100A123E0;
      qword_100A123E0 = v12;
    }
  }
  else
  {
    int v11 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = 67109376;
      int v15 = v4;
      __int16 v16 = 2048;
      uint64_t v17 = v5;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Couldn't get pid: %d or assertion: %p", (uint8_t *)&v14, 0x12u);
    }
  }
}

void sub_10034B870(id a1, BOOL a2)
{
  BOOL v2 = a2;
  int v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "SBSStatusBarStyleOverridesAssertion: Acquire handler, acquired: %d", (uint8_t *)v4, 8u);
  }
  byte_100A123D8 = v2;
}

void sub_10034B91C(id a1)
{
  uint64_t v1 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)BOOL v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "SBSStatusBarStyleOverridesAssertion: Invalidation handler", v2, 2u);
  }
  byte_100A123D8 = 0;
}

void sub_10034B98C(id a1, NSTimer *a2)
{
  BOOL v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Invalidating assert", v3, 2u);
  }
  [(id)qword_100A123D0 invalidate];
  byte_100A123D8 = 0;
}

uint64_t sub_10034BA08(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 176);
}

uint64_t sub_10034BA10(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 180);
}

uint64_t sub_10034BA18(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 178);
}

uint64_t sub_10034BA20(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 179);
}

uint64_t sub_10034BA28(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 177);
}

uint64_t sub_10034BA30(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10034BAC0;
  block[3] = &unk_100997528;
  void block[4] = a1;
  if (qword_100A123F0 != -1) {
    dispatch_once(&qword_100A123F0, block);
  }
  return byte_100A123EC;
}

void sub_10034BAC0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "ForcePhyStats");
  int v3 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v2 + 72))(v2, buf, __p, &byte_100A123EC);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0)
  {
    operator delete(*(void **)buf);
    if (!v3) {
      return;
    }
  }
  else if (!v3)
  {
    return;
  }
  uint64_t v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A123EC) {
      uint64_t v5 = "enabled";
    }
    else {
      uint64_t v5 = "disabled";
    }
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Forcing PHY Stats - %{public}s", buf, 0xCu);
  }
  *(unsigned char *)(v1 + 197) = byte_100A123EC;
}

void sub_10034BC24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10034BC60()
{
  if (qword_100A12400 != -1) {
    dispatch_once(&qword_100A12400, &stru_1009A7778);
  }
  return byte_100A123F8;
}

void sub_10034BCA4(id a1)
{
  uint64_t v1 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "ForceLatencyStats");
  int v2 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v1 + 72))(v1, buf, __p, &byte_100A123F8);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0)
  {
    operator delete(*(void **)buf);
    if (!v2) {
      return;
    }
  }
  else if (!v2)
  {
    return;
  }
  int v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A123F8) {
      uint64_t v4 = "enabled";
    }
    else {
      uint64_t v4 = "disabled";
    }
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Forcing Latency Stats - %{public}s", buf, 0xCu);
  }
}

void sub_10034BDF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10034BE30(uint64_t a1, uint64_t a2)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10034BEC0;
  block[3] = &unk_100997528;
  void block[4] = a2;
  if (qword_100A12410 != -1) {
    dispatch_once(&qword_100A12410, block);
  }
  return byte_100A12408;
}

void sub_10034BEC0(uint64_t a1)
{
  __int16 v12 = 0;
  uint64_t v2 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "ScanAllowListEnabled");
  (*(void (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v2 + 72))(v2, buf, __p, (char *)&v12 + 1);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(*(void **)buf);
  }
  int v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (HIBYTE(v12)) {
      uint64_t v4 = "enabled";
    }
    else {
      uint64_t v4 = "disabled";
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "ScanAllowList is %s", buf, 0xCu);
  }
  if (HIBYTE(v12))
  {
    byte_100A12408 = 1;
    uint64_t v5 = sub_100017768();
    sub_10004191C(buf, "LEScanAgentList");
    (*(void (**)(uint64_t, unsigned char *, void))(*(void *)v5 + 48))(v5, buf, *(void *)(a1 + 32));
    goto LABEL_23;
  }
  uint64_t v6 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "ScanDenyListEnabled");
  (*(void (**)(uint64_t, unsigned char *, void **, __int16 *))(*(void *)v6 + 72))(v6, buf, __p, &v12);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(*(void **)buf);
  }
  char v7 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if ((_BYTE)v12) {
      char v8 = "enabled";
    }
    else {
      char v8 = "disabled";
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "ScanDenyList is %s", buf, 0xCu);
  }
  if ((_BYTE)v12)
  {
    byte_100A12408 = 2;
    uint64_t v9 = sub_100017768();
    sub_10004191C(buf, "LEScanAgentList");
    (*(void (**)(uint64_t, unsigned char *, void))(*(void *)v9 + 48))(v9, buf, *(void *)(a1 + 32));
LABEL_23:
    if (v14 < 0) {
      operator delete(*(void **)buf);
    }
  }
}

void sub_10034C1B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10034C200(uint64_t a1, uint64_t a2)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10034C290;
  block[3] = &unk_100997528;
  void block[4] = a2;
  if (qword_100A12420 != -1) {
    dispatch_once(&qword_100A12420, block);
  }
  return byte_100A12418;
}

void sub_10034C290(uint64_t a1)
{
  __int16 v12 = 0;
  uint64_t v2 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "ConnectionScanAllowListEnabled");
  (*(void (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v2 + 72))(v2, buf, __p, (char *)&v12 + 1);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(*(void **)buf);
  }
  int v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (HIBYTE(v12)) {
      uint64_t v4 = "enabled";
    }
    else {
      uint64_t v4 = "disabled";
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "ConnectionScanAllowList is %s", buf, 0xCu);
  }
  if (HIBYTE(v12))
  {
    byte_100A12418 = 1;
    uint64_t v5 = sub_100017768();
    sub_10004191C(buf, "LEConnectionScanAgentList");
    (*(void (**)(uint64_t, unsigned char *, void))(*(void *)v5 + 48))(v5, buf, *(void *)(a1 + 32));
    goto LABEL_23;
  }
  uint64_t v6 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "ConnectionScanDenyListEnabled");
  (*(void (**)(uint64_t, unsigned char *, void **, __int16 *))(*(void *)v6 + 72))(v6, buf, __p, &v12);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(*(void **)buf);
  }
  char v7 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if ((_BYTE)v12) {
      char v8 = "enabled";
    }
    else {
      char v8 = "disabled";
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "ConnectionScanDenyList is %s", buf, 0xCu);
  }
  if ((_BYTE)v12)
  {
    byte_100A12418 = 2;
    uint64_t v9 = sub_100017768();
    sub_10004191C(buf, "LEConnectionScanAgentList");
    (*(void (**)(uint64_t, unsigned char *, void))(*(void *)v9 + 48))(v9, buf, *(void *)(a1 + 32));
LABEL_23:
    if (v14 < 0) {
      operator delete(*(void **)buf);
    }
  }
}

void sub_10034C584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10034C5D0(uint64_t a1, uint64_t a2)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10034C660;
  block[3] = &unk_100997528;
  void block[4] = a2;
  if (qword_100A12430 != -1) {
    dispatch_once(&qword_100A12430, block);
  }
  return byte_100A12428;
}

void sub_10034C660(uint64_t a1)
{
  __int16 v12 = 0;
  uint64_t v2 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "advAllowListEnabled");
  (*(void (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v2 + 72))(v2, buf, __p, (char *)&v12 + 1);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(*(void **)buf);
  }
  int v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (HIBYTE(v12)) {
      uint64_t v4 = "enabled";
    }
    else {
      uint64_t v4 = "disabled";
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "AdvAllowList is %s", buf, 0xCu);
  }
  if (HIBYTE(v12))
  {
    byte_100A12428 = 1;
    uint64_t v5 = sub_100017768();
    sub_10004191C(buf, "AdvAgentList");
    (*(void (**)(uint64_t, unsigned char *, void))(*(void *)v5 + 48))(v5, buf, *(void *)(a1 + 32));
    goto LABEL_23;
  }
  uint64_t v6 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "AdvDenyListEnabled");
  (*(void (**)(uint64_t, unsigned char *, void **, __int16 *))(*(void *)v6 + 72))(v6, buf, __p, &v12);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(*(void **)buf);
  }
  char v7 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if ((_BYTE)v12) {
      char v8 = "enabled";
    }
    else {
      char v8 = "disabled";
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "AdvDenyList is %s", buf, 0xCu);
  }
  if ((_BYTE)v12)
  {
    byte_100A12428 = 2;
    uint64_t v9 = sub_100017768();
    sub_10004191C(buf, "AdvAgentList");
    (*(void (**)(uint64_t, unsigned char *, void))(*(void *)v9 + 48))(v9, buf, *(void *)(a1 + 32));
LABEL_23:
    if (v14 < 0) {
      operator delete(*(void **)buf);
    }
  }
}

void sub_10034C954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10034C9A0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 90);
}

uint64_t sub_10034C9A8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 91);
}

uint64_t sub_10034C9B0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 198);
}

uint64_t sub_10034C9B8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 199);
}

uint64_t sub_10034C9C0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 200);
}

uint64_t sub_10034C9C8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 208);
}

uint64_t sub_10034C9D0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 214);
}

uint64_t sub_10034C9D8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 215);
}

BOOL sub_10034C9E0(uint64_t a1)
{
  return *(unsigned char *)(a1 + 204) == 0;
}

uint64_t sub_10034C9F0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 212);
}

uint64_t sub_10034C9F8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 213);
}

uint64_t sub_10034CA00(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 217);
}

uint64_t sub_10034CA08(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 216);
}

uint64_t sub_10034CA10(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 92);
}

uint64_t sub_10034CA18(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 220);
}

uint64_t sub_10034CA20(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 221);
}

void sub_10034CA28(uint64_t a1, char *a2, unsigned char *a3, uint64_t a4, uint64_t a5)
{
  memset(&__str, 0, sizeof(__str));
  *(void *)a4 = 0;
  *(_WORD *)(a4 + 8) = 0;
  sub_10004191C(buf, "Diversity");
  sub_10004191C(__p, a2);
  int v10 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, std::string *))(*(void *)a1 + 56))(a1, buf, __p, &__str);
  *a3 = v10;
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  if (v23 < 0) {
    operator delete(*(void **)buf);
  }
  if (*a3)
  {
    if (sub_10034CC5C(v10, &__str, a4))
    {
      uint64_t v11 = qword_100A19E50;
      if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_14;
      }
      p_str = &__str;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = a5;
      __int16 v21 = 2080;
      int v22 = p_str;
      BOOL v13 = "Diversity coex %s override: %s";
      char v14 = v11;
      uint32_t v15 = 22;
    }
    else
    {
      *a3 = 0;
      uint64_t v16 = qword_100A19E50;
      if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_14;
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = a5;
      BOOL v13 = "Warning: Diversity coex %s override: Invalid.  Override disabled.";
      char v14 = v16;
      uint32_t v15 = 12;
    }
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v13, buf, v15);
  }
LABEL_14:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_10034CC0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10034CC5C(int a1, std::string *__str, uint64_t a3)
{
  std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
  }
  if (size == 20)
  {
    std::string::size_type v6 = 0;
    unint64_t v7 = 0;
    BOOL v8 = 0;
    __int16 v15 = 0;
    uint64_t v14 = 0;
    while (1)
    {
      memset(&v13, 0, sizeof(v13));
      std::string::basic_string(&v13, __str, v6, 2uLL, (std::allocator<char> *)&__endptr);
      __endptr = 0;
      uint64_t v9 = (v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &v13
         : (std::string *)v13.__r_.__value_.__r.__words[0];
      *((unsigned char *)&v14 + v7) = strtol((const char *)v9, &__endptr, 16);
      int v10 = *__endptr;
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
      if (v10) {
        break;
      }
      BOOL v8 = v7 > 8;
      v6 += 2;
      if (++v7 == 10)
      {
        *(void *)a3 = v14;
        *(_WORD *)(a3 + 8) = v15;
        return 1;
      }
    }
  }
  else
  {
    return 0;
  }
  return v8;
}

uint64_t sub_10034CDA4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 93);
}

uint64_t sub_10034CDAC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 96);
}

uint64_t sub_10034CDB4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 100);
}

uint64_t sub_10034CDBC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

uint64_t sub_10034CDC4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 108);
}

uint64_t sub_10034CDCC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 127);
}

uint64_t sub_10034CDD4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 222);
}

uint64_t sub_10034CDDC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 224);
}

uint64_t sub_10034CDE4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 228);
}

uint64_t sub_10034CDEC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 172);
}

uint64_t sub_10034CDF4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 173);
}

uint64_t sub_10034CDFC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 174);
}

uint64_t sub_10034CE04(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 175);
}

uint64_t sub_10034CE0C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 232);
}

void sub_10034CE14(unsigned char *a1, int a2)
{
  uint64_t v4 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 352))(v4))
  {
    if (a1[249] != a2)
    {
      a1[249] = a2;
      if (a2) {
        CFStringRef v5 = @"yes";
      }
      else {
        CFStringRef v5 = @"no";
      }
      CFPreferencesSetAppValue(@"ENLoggingEntitledApp", v5, @"com.apple.MobileBluetooth.debug");
      CFPreferencesAppSynchronize(@"com.apple.MobileBluetooth.debug");
      int v6 = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 208))(a1);
      unint64_t v7 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = a1[249];
        v10[0] = 67109376;
        v10[1] = v8;
        __int16 v11 = 1024;
        int v12 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "fENAppHasLoggingEntitlement:%d plistEntitled:%d", (uint8_t *)v10, 0xEu);
      }
      (*(void (**)(unsigned char *))(*(void *)a1 + 256))(a1);
      sub_1003475BC((uint64_t)a1);
    }
    uint64_t v9 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v10[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "setENAppHasLoggingEntitlement", (uint8_t *)v10, 2u);
    }
  }
}

uint64_t sub_10034CFF0()
{
  return 1;
}

uint64_t sub_10034CFF8()
{
  return 0;
}

void sub_10034D000(uint64_t a1, char a2, char a3)
{
  int v3 = *(NSObject **)(a1 + 24);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_10034D07C;
  void v4[3] = &unk_1009A0B58;
  void v4[4] = a1;
  char v5 = a2;
  char v6 = a3;
  dispatch_sync(v3, v4);
}

void sub_10034D07C(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int8 **)(a1 + 32);
  uint64_t v3 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 352))(v3))
  {
    int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 == v2[251])
    {
      int v5 = *(unsigned __int8 *)(a1 + 41);
      int v6 = v2[250];
      if (v5 == v6)
      {
LABEL_15:
        uint64_t v9 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)int v10 = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "setENLoggingParams", v10, 2u);
        }
        return;
      }
    }
    else
    {
      v2[251] = v4;
      if (v4) {
        CFStringRef v7 = @"yes";
      }
      else {
        CFStringRef v7 = @"no";
      }
      CFPreferencesSetAppValue(@"rpiLogging", v7, @"com.apple.MobileBluetooth.debug");
      CFPreferencesAppSynchronize(@"com.apple.MobileBluetooth.debug");
      int v5 = *(unsigned __int8 *)(a1 + 41);
      int v6 = v2[250];
    }
    if (v5 != v6)
    {
      v2[250] = v5;
      if (v5) {
        CFStringRef v8 = @"yes";
      }
      else {
        CFStringRef v8 = @"no";
      }
      CFPreferencesSetAppValue(@"sensitiveLogging", v8, @"com.apple.MobileBluetooth.debug");
      CFPreferencesAppSynchronize(@"com.apple.MobileBluetooth.debug");
    }
    (*(void (**)(unsigned __int8 *))(*(void *)v2 + 256))(v2);
    sub_1003475BC((uint64_t)v2);
    goto LABEL_15;
  }
}