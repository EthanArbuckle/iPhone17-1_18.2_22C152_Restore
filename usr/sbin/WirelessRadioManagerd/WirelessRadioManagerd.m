void sub_100003F20()
{
  void *v0;
  uint64_t vars8;

  dispatch_async([+[WCM_Server singleton](WCM_Server, "singleton") getQueue], &stru_1002114B0);
}

uint64_t sub_10000851C(uint64_t a1, char *a2)
{
  if (!strncasecmp(a2, "kWCMCellularNetworkConfiguration_TTDUL_DL", 0x2AuLL))
  {
    +[WCM_Logging logLevel:4, @"SUB%ld: %s key found", *(void *)(a1 + 32), "kWCMCellularNetworkConfiguration_TTDUL_DL" message];
    *(unsigned char *)(*(void *)(a1 + 40) + 104) = 1;
  }
  return 1;
}

void sub_100008F50(id a1)
{
  +[WCM_Logging logLevel:3 message:@"Received locationd techstatus notifcation callback"];
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, @"currentThread is %@, mainThread is %@", +[NSThread currentThread](NSThread, "currentThread"), +[NSThread mainThread]);
  CFArrayRef v1 = (const __CFArray *)CLCopyTechnologiesInUse();
  if (v1)
  {
    CFArrayRef v2 = v1;
    BOOL v3 = sub_10000BD70(v1);
    CFRelease(v2);
  }
  else
  {
    +[WCM_Logging logLevel:3 message:@"activeTechs is null"];
    BOOL v3 = 0;
  }
  id v4 = +[WCM_PolicyManager singleton];

  [v4 updateGPSRadioActiveState:v3];
}

NSDictionary *sub_1000098FC(uint64_t a1)
{
  v3[0] = @"ULCAHasCoexBand";
  v4[0] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 64)];
  v3[1] = @"ULCAPrimaryCarrierULFreq";
  v4[1] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 32)];
  v3[2] = @"ULCAPrimaryCarrierDLFreq";
  v4[2] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 36)];
  v3[3] = @"ULCAPrimaryCarrierULBW";
  v4[3] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 40)];
  v3[4] = @"ULCAPrimaryCarrierDLBW";
  v4[4] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 44)];
  v3[5] = @"ULCACriticalCarrierULFreq";
  v4[5] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];
  v3[6] = @"ULCACriticalCarrierDLFreq";
  v4[6] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 52)];
  v3[7] = @"ULCACriticalCarrierULBW";
  v4[7] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 56)];
  v3[8] = @"ULCACriticalCarrierDLBW";
  v4[8] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 60)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:9];
}

id sub_100009A68(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) sacCreateRawFreqList:*(void *)(a1 + 40) bufferSize:64 buffer:v2];
  if (result) {
    return (id)TelephonyBasebandAddFreqListExt();
  }
  return result;
}

id sub_100009AE8(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) sacCreateRawFreqList:*(void *)(a1 + 40) bufferSize:64 buffer:v2];
  if (result) {
    return (id)TelephonyBasebandRemoveFreqListExt();
  }
  return result;
}

void sub_100009B68(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 512))
  {
    uint64_t v2 = WiFiDeviceClientCopyCurrentNetwork();
    if (v2)
    {
      BOOL v3 = (const void *)v2;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = WiFiNetworkIsCaptive() != 0;
      CFRelease(v3);
    }
  }
}

void sub_100009C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100009EA0(id a1, __CFString *a2, __CFDictionary *a3)
{
  if (objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "isEnhancedCTServiceNeeded"))
  {
    +[WCM_Logging logLevel:22 message:@"WRM_CTService:serverConnectionCallback for MultiSIM device"];
    id v5 = [[+[WRM_EnhancedCTService wrm_EnhancedCTServiceSingleton](WRM_EnhancedCTService, "wrm_EnhancedCTServiceSingleton") mCTService];
  }
  else
  {
    id v5 = [[+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton") getCTService];
    +[WCM_Logging logLevel:22 message:@"WRM_CTService:serverConnectionCallback"];
  }
  if (CFEqual(a2, kCTRegistrationStatusChangedNotification))
  {
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a3, kCTRegistrationStatus);
    if (Value)
    {
      CFStringRef v7 = Value;
      CFComparisonResult v8 = CFStringCompare(Value, kCTRegistrationStatusRegisteredHome, 0);
      CFStringRef v9 = (const __CFString *)kCTRegistrationStatusRegisteredRoaming;
      if (v8) {
        BOOL v10 = CFEqual(v7, kCTRegistrationStatusRegisteredRoaming);
      }
      else {
        BOOL v10 = 1;
      }
      BOOL v13 = CFEqual(v7, v9);
      [v5 updateRegistrationStatus:v10 :v13];
      uint64_t v36 = v10;
      uint64_t v37 = v13;
      CFStringRef v14 = @"WRM_CTService:kCTRegistrationStatusChangedNotification reg status %d, roaming Status %d";
LABEL_17:
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, v14, v36, v37);
      return;
    }
    CFStringRef v12 = @"WRM_CTService:kCTRegistrationStatusChangedNotification returned null";
LABEL_12:
    +[WCM_Logging logLevel:22 message:v12];
    return;
  }
  if (CFEqual(a2, kCTRegistrationDataStatusChangedNotification))
  {
    BOOL v11 = kCFBooleanTrue == CFDictionaryGetValue(a3, kCTRegistrationDataAttached);
    +[WCM_Logging logLevel:22, @"WRM_CTService:kCTRegistrationDataStatusChangedNotification data attach: %d", v11 message];
    [v5 updatePSAttachStatus:v11];
    sub_10000C870((uint64_t)[v5 getCTConnectionReference], v5);
    goto LABEL_10;
  }
  if (CFEqual(a2, kCTCellularDataSettingsChangeNotification))
  {
    unsigned __int8 v43 = 0;
    [v5 getCTConnectionReference];
    if (_CTServerConnectionGetCellularDataIsEnabled())
    {
      +[WCM_Logging logLevel:22, @"Unable to retrieve data enable status %d", v43, v37 message];
      return;
    }
    +[WCM_Logging logLevel:22, @"WRM_CTService:kCTCellularDataSettingsChangeNotification %d", v43 message];
    [v5 updateDataEnableStatus:v43 != 0];
LABEL_10:
    dispatch_async([+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton") getQueue], &stru_100211A08);
    return;
  }
  if (CFEqual(a2, kCTIndicatorsSignalStrengthNotification))
  {
    +[WCM_Logging logLevel:22 message:@"WRM_CTService:kCTIndicatorsSignalStrengthNotification"];
    [v5 getCTConnectionReference];
    sub_1000D874C(a3, v5);
    goto LABEL_10;
  }
  if (CFEqual(a2, kCTRegistrationCellChangedNotification))
  {
    +[WCM_Logging logLevel:22 message:@"WRM_CTService:kCTRegistrationCellChangedNotification"];
    id v15 = [v5 getCTConnectionReference];
    sub_10000C870((uint64_t)v15, v5);
    return;
  }
  if (CFEqual(a2, kCTCallStatusChangeNotification))
  {
    if (CFDictionaryGetValue(a3, kCTCall))
    {
      uint64_t Status = CTCallGetStatus();
      [v5 setCallState:Status];
      +[WCM_Logging logLevel:22, @"kCTCallStatusChangeNotification changed: %d", Status message];
      if (!Status || Status == 5)
      {
        [v5 setSrvccHandoverState:0];
        +[WCM_Logging logLevel:22 message:@"Call Disconnected or IDLE: resetting SRVCC flag"];
        if (Status == 5)
        {
          +[WCM_Logging logLevel:22 message:@"Call Disconnected : submit callend metrics"];
          id v18 = +[WRM_HandoverManager WRM_HandoverManagerSingleton];
          [v18 submitCallEndMetics];
        }
      }
      else if (Status == 1)
      {
        id v17 = +[WRM_HandoverManager WRM_HandoverManagerSingleton];
        [v17 resetActiveCallTimer];
      }
    }
    return;
  }
  if (CFEqual(a2, kCTCallSubTypeChangeNotification))
  {
    if (!CFDictionaryGetValue(a3, kCTCall)) {
      return;
    }
    CFStringRef v12 = @"kCTCallSubTypeChangeNotification changed";
    goto LABEL_12;
  }
  if (!CFEqual(a2, kCTRadioVoiceLinkQualityNotification))
  {
    if (CFEqual(a2, kCTRadioEnhancedLinkQualityNotification))
    {
      int valuePtr = 0;
      v24 = CFDictionaryGetValue(a3, kCTRadioEnhancedLinkQualityNotificationType);
      +[WCM_Logging logLevel:22 message:@"Recevied kCTRadioEnhancedLinkQualityNotificationType notification"];
      if (v24)
      {
        CFTypeID v25 = CFGetTypeID(v24);
        if (v25 == CFNumberGetTypeID())
        {
          if (CFNumberGetValue((CFNumberRef)v24, kCFNumberIntType, &valuePtr))
          {
            CFDataRef v26 = (const __CFData *)CFDictionaryGetValue(a3, kCTRadioEnhancedLinkQualityNotificationData);
            if (v26)
            {
              sub_1000D76D8(v26, valuePtr);
              return;
            }
          }
        }
      }
      CFStringRef v14 = @"Recevied kCTRadioEnhancedLinkQualityNotificationType with empty BLOB";
      goto LABEL_17;
    }
    if (CFEqual(a2, kCTCallHandoverStartedNotification))
    {
      CFStringRef v31 = @"SRVCC Handover started";
    }
    else
    {
      if (CFEqual(a2, kCTCallHandoverEndedNotification))
      {
        +[WCM_Logging logLevel:22 message:@"SRVCC Handover ended"];
        [v5 setSrvccHandoverState:0];
        if (kCFBooleanTrue == CFDictionaryGetValue(a3, kCTCallHandoverSuccess)) {
          CFStringRef v33 = @"SRVCC Handover successful";
        }
        else {
          CFStringRef v33 = @"SRVCC Handover failed";
        }
LABEL_85:
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, v33, v36, v37, v38);
        goto LABEL_10;
      }
      if (!CFEqual(a2, kCTCallHandoverLikelyNotification))
      {
        if (CFEqual(a2, kCTSettingCallCapabilitiesChangedNotification))
        {
          +[WCM_Logging logLevel:22, @"kCTSettingCallCapabilitiesChangedNotification:kCTCapabilityVoLTE:%@", a3 message];
          if (kCFBooleanTrue == CFDictionaryGetValue(a3, kCTCapabilityAgent))
          {
            uint64_t v35 = 1;
            +[WCM_Logging logLevel:22, @"kCTSettingCallCapabilitiesChangedNotification:kCTCapabilityVoLTE %d", 1 message];
          }
          else
          {
            uint64_t v35 = 0;
          }
          +[WCM_Logging logLevel:22, @"kCTSettingCallCapabilitiesChangedNotification received %d", v35, v37 message];
        }
        return;
      }
      CFStringRef v31 = @"SRVCC Handover likely";
    }
    +[WCM_Logging logLevel:22 message:v31];
    [v5 setSrvccHandoverState:1];
    return;
  }
  UInt8 v42 = 0;
  char v41 = 0;
  unsigned int v19 = [v5 getLteVoiceLQM];
  +[WCM_Logging logLevel:22 message:@"Recevied kCTRadioVoiceLinkQualityNotification"];
  CFDataRef v20 = (const __CFData *)CFDictionaryGetValue(a3, kCTRadioEnhancedVoiceLinkQualityKey);
  if (v20)
  {
    CFDataRef v21 = v20;
    +[WCM_Logging logLevel:22 message:@"WRM_CTService:Voice LQM notification received"];
    sub_1000D782C(v21, &v42, (UInt8 *)&v41);
    if (v19 == v42) {
      return;
    }
    uint64_t v22 = (uint64_t)[v5 getCurrentSignalBars];
    if (v42 == 10 && v22 >= 3)
    {
      if (v41 >= 3)
      {
        v23 = "Unknown";
        if (v41 == 4) {
          v23 = "lqmBadLQE";
        }
      }
      else
      {
        v23 = off_100211A28[v41];
      }
      +[WCM_Logging logLevel:22, @"Ignoring LQM: Bars: %lld, LQM: %d, Reason Code: %d, Reason: (%s)", v22, 10, v41, v23 message];
    }
    else
    {
      if (v41 >= 3)
      {
        if (v41 == 4) {
          v32 = "lqmBadLQE";
        }
        else {
          v32 = "Unknown";
        }
      }
      else
      {
        v32 = off_100211A28[v41];
      }
      +[WCM_Logging logLevel:22, @"Bars: %lld, LQM: %d, Reason Code: %d, Reason: (%s)", v22, v42, v41, v32 message];
      [v5 setLteVoiceLQM:v42];
      [v5 setVoiceLQMReasonCode:v41];
    }
    if (v41 >= 3u)
    {
      v34 = "Unknown";
      if (v41 == 4) {
        v34 = "lqmBadLQE";
      }
    }
    else
    {
      v34 = off_100211A28[v41];
    }
    uint64_t v37 = v41;
    v38 = v34;
    uint64_t v36 = v42;
    CFStringRef v33 = @"LQM: %d, Reason Code: %d, Reason: (%s)";
    goto LABEL_85;
  }
  unsigned int v40 = 0;
  +[WCM_Logging logLevel:22 message:@"LQM BLOB is empty"];
  CFNumberRef v27 = (const __CFNumber *)CFDictionaryGetValue(a3, kCTRadioVoiceLinkQualityKey);
  if (v27)
  {
    CFNumberRef v28 = v27;
    CFTypeID v29 = CFGetTypeID(v27);
    if (v29 == CFNumberGetTypeID())
    {
      uint64_t v30 = (uint64_t)[v5 getCurrentSignalBars];
      CFNumberGetValue(v28, kCFNumberIntType, &v40);
      if (v40 == 10 && v30 >= 3)
      {
        +[WCM_Logging logLevel:22, @"Ignoring LQM: Bars: %lld, LQM: %d", v30, 10 message];
      }
      else
      {
        +[WCM_Logging logLevel:22, @"Rcvd Voice LQM from CT: %d", v40 message];
        [v5 setLteVoiceLQM:v40];
      }
    }
  }
}

id sub_10000AFCC(uint64_t a1)
{
  id result = [[+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton") wifiController];
  if (!result) {
    return result;
  }
  BOOL v3 = result;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, @"WiFiController TxRate: %d RxRate: %d and BW: %d ", *(unsigned int *)(a1 + 32), *(unsigned int *)(a1 + 36), [result channelBandwidthMHz]);
  if ([v3 wifiState] == 3 || objc_msgSend(v3, "wifiState") == 4)
  {
    if ([v3 channelBandwidthMHz] == 20)
    {
      if (*(_DWORD *)(a1 + 36) >> 4 >= 0x753u)
      {
        BOOL v4 = *(_DWORD *)(a1 + 32) >> 4 >= 0x753u;
        goto LABEL_18;
      }
      goto LABEL_15;
    }
    if ([v3 channelBandwidthMHz] == 40)
    {
      if (*(_DWORD *)(a1 + 36) >> 6 >= 0x271u)
      {
        BOOL v4 = *(_DWORD *)(a1 + 32) >> 6 >= 0x271u;
        goto LABEL_18;
      }
LABEL_15:
      unsigned int v5 = 1;
      goto LABEL_21;
    }
    unsigned int v6 = [v3 channelBandwidthMHz];
    unsigned int v7 = *(_DWORD *)(a1 + 36);
    if (v6 == 80)
    {
      if (v7 >> 5 < 0xC35) {
        goto LABEL_15;
      }
      unsigned int v8 = 100000;
    }
    else
    {
      if (v7 >> 6 < 0xC35) {
        goto LABEL_15;
      }
      unsigned int v8 = 200000;
    }
    BOOL v4 = *(_DWORD *)(a1 + 32) >= v8;
LABEL_18:
    unsigned int v5 = !v4;
    goto LABEL_21;
  }
  unsigned int v5 = 0;
  byte_10027D320 = 0;
  byte_10027D321 = 0;
LABEL_21:
  +[WCM_Logging logLevel:3, @"WiFiController Low5GRate Check cureRate: %d Prev1Rate: %d Prev2Rate: %d", v5, byte_10027D320, byte_10027D321 message];
  id v9 = +[WCM_PolicyManager singleton];
  BOOL v10 = 0;
  if (v5)
  {
    if (byte_10027D320) {
      BOOL v10 = byte_10027D321 != 0;
    }
  }
  id result = [v9 handleLow5GRate:v10];
  byte_10027D321 = byte_10027D320;
  byte_10027D320 = v5;
  return result;
}

void sub_10000B254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_10000BD70(const __CFArray *a1)
{
  CFIndex Count = CFArrayGetCount(a1);
  +[WCM_Logging logLevel:3, @"Location activeTechs contains %d elements", Count message];
  if (Count < 1)
  {
    return 0;
  }
  else
  {
    CFIndex v3 = 0;
    BOOL v4 = 1;
    do
    {
      int valuePtr = 0;
      ValueAtIndex = CFArrayGetValueAtIndex(a1, v3);
      CFTypeID v6 = CFGetTypeID(ValueAtIndex);
      if (v6 == CFNumberGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
        +[WCM_Logging logLevel:3, @"Location activeTechs element at index %d is %s", v3, off_1002114D0[valuePtr] message];
        if ((valuePtr & 0xFFFFFFF7) == 1) {
          return v4;
        }
      }
      else
      {
        +[WCM_Logging logLevel:0, @"Location activeTechs element at index %d is not number type", v3 message];
      }
      BOOL v4 = Count > ++v3;
    }
    while (Count != v3);
  }
  return v4;
}

id sub_10000BE9C(uint64_t a1, const __CFDictionary *a2, void *a3)
{
  value = 0;
  unsigned int valuePtr = 0;
  unsigned int v9 = 0;
  uint64_t v8 = 0;
  id result = +[WCM_Logging logLevel:18, @"WiFiS: callbackWiFiDeviceClientWeightAvgLQMCallback", a2 message];
  if (a2)
  {
    +[WCM_Logging logLevel:19, @"%@", a2 message];
    if (CFDictionaryGetValueIfPresent(a2, @"WEIGHT_AVG_RSSI", (const void **)&value) && value) {
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr);
    }
    if (CFDictionaryGetValueIfPresent(a2, @"WEIGHT_AVG_SNR", (const void **)&value) && value) {
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &v9);
    }
    if (CFDictionaryGetValueIfPresent(a2, @"WEIGHT_AVG_TX_RATE", (const void **)&value) && value) {
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, (char *)&v8 + 4);
    }
    int ValueIfPresent = CFDictionaryGetValueIfPresent(a2, @"WEIGHT_AVG_RX_RATE", (const void **)&value);
    uint64_t v7 = 0;
    if (ValueIfPresent)
    {
      if (value)
      {
        CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &v8);
        uint64_t v7 = v8;
      }
    }
    [a3 updateWeightedAverageMetrics:valuePtr :v9 :HIDWORD(v8) :v7];
    return +[WCM_Logging logLevel:3, @"WiFiS: weightedWiFiAvgLQM RSSI: %d SNR: %d TX Rate: %d Rx Rate: %d", valuePtr, v9, HIDWORD(v8), v8 message];
  }
  return result;
}

id sub_10000C870(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (_CTServerConnectionGetRadioAccessTechnology())
    {
      CFStringRef v3 = @"_CTServerConnectionGetRadioAccessTechnology returned failed";
LABEL_4:
      +[WCM_Logging logLevel:22 message:v3];
      uint64_t v4 = 10;
      unsigned int v5 = "UNKNOWN_RADIO ";
LABEL_12:
      +[WCM_Logging logLevel:22, @"Serving cell type is (%s)", v5 message];
      return [a2 setServingCellType:v4];
    }
    if (CFEqual(0, kCTRegistrationRadioAccessTechnologyGSM)) {
      goto LABEL_9;
    }
    if (CFEqual(0, kCTRegistrationRadioAccessTechnologyUTRAN2))
    {
      uint64_t v4 = 7;
      unsigned int v5 = "TDSCDMA_RADIO";
      goto LABEL_12;
    }
    if (CFEqual(0, kCTRegistrationRadioAccessTechnologyGSMCompact))
    {
LABEL_9:
      uint64_t v4 = 8;
      unsigned int v5 = "GSM_RADIO";
      goto LABEL_12;
    }
    if (CFEqual(0, kCTRegistrationRadioAccessTechnologyUTRAN))
    {
      uint64_t v4 = 2;
      unsigned int v5 = "UMTS_RADIO";
      goto LABEL_12;
    }
    if (CFEqual(0, kCTRegistrationRadioAccessTechnologyCDMA1x))
    {
      uint64_t v4 = 3;
      unsigned int v5 = "CDMA1X_RADIO";
      goto LABEL_12;
    }
    if (CFEqual(0, kCTRegistrationRadioAccessTechnologyCDMAEVDO))
    {
      uint64_t v4 = 4;
      unsigned int v5 = "CDMAEVDO";
      goto LABEL_12;
    }
    if (CFEqual(0, kCTRegistrationRadioAccessTechnologyCDMAHybrid))
    {
      uint64_t v4 = 5;
      unsigned int v5 = "CDMAHybrid";
      goto LABEL_12;
    }
    if (CFEqual(0, kCTRegistrationRadioAccessTechnologyeHRPD))
    {
      uint64_t v4 = 6;
      unsigned int v5 = "eHRPD_RADIO";
      goto LABEL_12;
    }
    if (!CFEqual(0, kCTRegistrationRadioAccessTechnologyLTE))
    {
      if (CFEqual(0, kCTRegistrationRadioAccessTechnologyNR))
      {
        uint64_t v4 = 9;
        unsigned int v5 = "N_RADIO";
        goto LABEL_12;
      }
      CFStringRef v3 = @"Unknown registered technology";
      goto LABEL_4;
    }
    +[WCM_Logging logLevel:22, @"Serving cell type is (%s)", "LTE Radio" message];
    [a2 setServingCellType:1];
    _CTServerConnectionGetCapabilityStatusExtended();
    [a2 updateVoLTEEnableStatus:0];
    return +[WCM_Logging logLevel:22 message:@"_CTServerConnectionGetCapabilityStatusExtended: volte not Supported"];
  }
  else
  {
    return +[WCM_Logging logLevel:22 message:@"iRAT currently not connected to telephony service"];
  }
}

void sub_10000CDD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id obj)
{
}

void sub_10000DB20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
}

void sub_10000E020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
}

void sub_10000EE60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
}

id sub_10000EE80(uint64_t a1)
{
  id result = [[+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton") wifiController];
  if (result)
  {
    CFStringRef v3 = result;
    [result setCatsAppPriority:*(unsigned __int8 *)(a1 + 40)];
    [v3 setCatsAppBitmap:*(void *)(a1 + 32)];
    [+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton") updateControllerState:2200];
    id v4 = +[WCM_PolicyManager singleton];
    return [v4 updateControllerState:1000];
  }
  return result;
}

id sub_10000F8BC(void *a1)
{
  +[WCM_Logging logLevel:24, @"evaluateWiFiVersusCell: start evaluateCellularScore, PrivateNetwork:%d", byte_10027CE3D message];
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = *(void *)(a1[5] + 8) + 24;
  uint64_t v4 = *(void *)(a1[6] + 8) + 24;
  BOOL v5 = byte_10027CE59 != 0;
  BOOL v6 = byte_10027CE58 != 0;
  if (byte_10027CE3D) {
    [v2 evaluateCellularScorePrivateNw:byte_10027CE3A currnetConf:byte_10027CE3B score:v3 conf:v4 evalMode:v6 outrankExit:v5];
  }
  else {
    [v2 evaluateCellularScore:byte_10027CE3A currnetConf:byte_10027CE3B score:v3 conf:v4 evalMode:v6 outrankExit:v5];
  }
  return +[WCM_Logging logLevel:24, @"evaluateWiFiVersusCell: end evaluateCellularScore, PrivateNetwork enabled: %d", byte_10027CE3D message];
}

id sub_10000F988(uint64_t a1)
{
  if ([*(id *)(a1 + 32) activeSlot])
  {
    if ([*(id *)(a1 + 32) activeSlot] == (id)1)
    {
      uint64_t v2 = "CTSubscriptionSlotOne";
    }
    else if ([*(id *)(a1 + 32) activeSlot] == (id)2)
    {
      uint64_t v2 = "CTSubscriptionSlotTwo";
    }
    else
    {
      uint64_t v2 = "Unknown CTSubscriptionSlot!!!";
    }
  }
  else
  {
    uint64_t v2 = "CTSubscriptionSlotUnknown";
  }
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: active slot %s MovAvgSignalBars %@", "-[WRM_EnhancedCTService getCurrentMovAvgSignalBars]_block_invoke", v2, [*(id *)(a1 + 32) movingAverageSignalBars]);
  id result = [[[objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "movingAverageSignalBars"), "objectAtIndex:", (char *)objc_msgSend(*(id *)(a1 + 32), "activeSlot") - 1)) floatValue];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v4;
  return result;
}

id sub_10000FA70(uint64_t a1)
{
  uint64_t v2 = 0;
  char v3 = 1;
  do
  {
    char v4 = v3;
    [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "movingAverageSignalBars"), "objectAtIndex:", v2), "floatValue"]
    float v6 = v5;
    int v7 = [[[*(id *)(a1 + 32) bars] objectAtIndex:v2] intValue];
    uint64_t v8 = v7;
    float v9 = (float)((float)v7 + (float)(v6 * 23.0)) / 24.0;
    id v10 = [*(id *)(a1 + 32) movingAverageSignalBars];
    *(float *)&double v11 = v9;
    [v10 replaceObjectAtIndex:v2 withObject:[NSNumber numberWithFloat:v11]];
    id result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, @"%s Sampled Moving Average: %f, CurrentSignal Bars:%lld, Slot id: %d", "-[WRM_EnhancedCTService updateMovAverageOfSignalBar]_block_invoke", v9, v8, (v2 + 1));
    char v3 = 0;
    uint64_t v2 = 1;
  }
  while ((v4 & 1) != 0);
  return result;
}

void sub_10000FDB0(uint64_t a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  double v11 = [*(id *)(a1 + 32) queue];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10002456C;
  v12[3] = &unk_10020DFF8;
  v12[4] = *(void *)(a1 + 32);
  *(double *)&v12[5] = a7;
  *(double *)&v12[6] = a2;
  *(double *)&v12[7] = a3;
  dispatch_async(v11, v12);
}

id sub_10000FE60(uint64_t a1, const __CFDictionary *a2, void *a3)
{
  +[WCM_Logging logLevel:2 message:@"WiFiS: callbackWiFiDeviceClientCatsUpdateCallback"];
  unsigned __int8 valuePtr = 0;
  uint64_t v8 = 0;
  if (a2)
  {
    value = 0;
    if (CFDictionaryGetValueIfPresent(a2, @"CATS_APP_PRIORITY", (const void **)&value) && value) {
      CFNumberGetValue((CFNumberRef)value, kCFNumberShortType, &valuePtr);
    }
    int ValueIfPresent = CFDictionaryGetValueIfPresent(a2, @"CATS_APP_BITMAP", (const void **)&value);
    uint64_t v6 = 0;
    if (ValueIfPresent && value)
    {
      CFNumberGetValue((CFNumberRef)value, kCFNumberLongLongType, &v8);
      uint64_t v6 = v8;
    }
    id result = +[WCM_Logging logLevel:2, @"WiFiS: Cats event: priority %d, bitmap 0x%x\n", valuePtr, v6 message];
    if (a3) {
      return [a3 setCatsState:valuePtr bitmap:v8];
    }
  }
  else
  {
    return +[WCM_Logging logLevel:2 message:@"Cats update dictionary is null"];
  }
  return result;
}

void sub_100010B18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100012714(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isEqualToString:@"kCTRegistrationRadioAccessTechnologyGSM"])goto LABEL_5; {
  if ([*(id *)(a1 + 32) isEqualToString:@"kCTRegistrationRadioAccessTechnologyTDSCDMA"])
  }
  {
    uint64_t v2 = 7;
    goto LABEL_6;
  }
  if ([*(id *)(a1 + 32) isEqualToString:@"kCTRegistrationRadioAccessTechnologyGSMCompact"])
  {
LABEL_5:
    uint64_t v2 = 8;
  }
  else if ([*(id *)(a1 + 32) isEqualToString:@"kCTRegistrationRadioAccessTechnologyUTRAN"])
  {
    uint64_t v2 = 2;
  }
  else if ([*(id *)(a1 + 32) isEqualToString:@"kCTRegistrationRadioAccessTechnologyCDMA1x"])
  {
    uint64_t v2 = 3;
  }
  else if ([*(id *)(a1 + 32) isEqualToString:@"kCTRegistrationRadioAccessTechnologyCDMAEVDO"])
  {
    uint64_t v2 = 4;
  }
  else if ([*(id *)(a1 + 32) isEqualToString:@"kCTRegistrationRadioAccessTechnologyCDMAHybrid"])
  {
    uint64_t v2 = 5;
  }
  else if ([*(id *)(a1 + 32) isEqualToString:@"kCTRegistrationRadioAccessTechnologyeHRPD"])
  {
    uint64_t v2 = 6;
  }
  else if ([*(id *)(a1 + 32) isEqualToString:@"kCTRegistrationRadioAccessTechnologyLTE"])
  {
    uint64_t v2 = 1;
  }
  else if ([*(id *)(a1 + 32) isEqualToString:@"kCTRegistrationRadioAccessTechnologyNR"])
  {
    uint64_t v2 = 9;
  }
  else
  {
    +[WCM_Logging logLevel:22 message:@"Unknown registered technology"];
    uint64_t v2 = 10;
  }
LABEL_6:
  [objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType") replaceObjectAtIndex:*(void *)(a1 + 48) - 1 withObject:[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v2)];
  if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", *(void *)(a1 + 48) - 1), "intValue") == 10)
  {
    char v3 = "UNKNOWN_RADIO ";
  }
  else if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", *(void *)(a1 + 48) - 1), "intValue") == 1)
  {
    char v3 = "LTE Radio";
  }
  else if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", *(void *)(a1 + 48) - 1), "intValue") == 2)
  {
    char v3 = "UMTS_RADIO";
  }
  else if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", *(void *)(a1 + 48) - 1), "intValue") == 3)
  {
    char v3 = "CDMA1X_RADIO";
  }
  else if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", *(void *)(a1 + 48) - 1), "intValue") == 4)
  {
    char v3 = "CDMAEVDO";
  }
  else if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", *(void *)(a1 + 48) - 1), "intValue") == 5)
  {
    char v3 = "CDMAHybrid";
  }
  else if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", *(void *)(a1 + 48) - 1), "intValue") == 6)
  {
    char v3 = "eHRPD_RADIO";
  }
  else if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", *(void *)(a1 + 48) - 1), "intValue") == 7)
  {
    char v3 = "TDSCDMA_RADIO";
  }
  else if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", *(void *)(a1 + 48) - 1), "intValue") == 8)
  {
    char v3 = "GSM_RADIO";
  }
  else
  {
    unsigned int v4 = [[objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", *(void *)(a1 + 48) - 1) intValue];
    char v3 = "UNKNOWN_RADIO!!!";
    if (v4 == 9) {
      char v3 = "N_RADIO";
    }
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: servCellRadioTechnologyType %s", "-[WRM_EnhancedCTService processRadioTechnologyInfo::]_block_invoke", v3);
}

void sub_100013174(uint64_t a1)
{
  +[WCM_Logging logLevel:24, @"Received handleAppStateChange changeInfo: %@", *(void *)(a1 + 32) message];
  id v2 = [*(id *)(a1 + 32) objectForKey:BKSApplicationStateDisplayIDKey];
  id v3 = [*(id *)(a1 + 32) objectForKey:BKSApplicationStateKey];
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    +[WCM_Logging logLevel:24 message:@"invalid applicationBundleId or appState"];
  }
  else
  {
    unsigned int v19 = [v3 unsignedIntValue];
    unsigned __int8 v5 = [*(id *)(a1 + 40) isCallKitAppInDenyList:v2];
    if ((v5 & 1) == 0)
    {
      uint64_t v30 = 0;
      CFStringRef v31 = &v30;
      uint64_t v32 = 0x3052000000;
      CFStringRef v33 = sub_10003B998;
      v34 = sub_10003B9A8;
      uint64_t v6 = (objc_class *)qword_10027CF88;
      uint64_t v35 = qword_10027CF88;
      if (!qword_10027CF88)
      {
        v29[0] = _NSConcreteStackBlock;
        v29[1] = 3221225472;
        v29[2] = sub_10003B9B4;
        v29[3] = &unk_10020DAF8;
        v29[4] = &v30;
        sub_10003B9B4((uint64_t)v29);
        uint64_t v6 = (objc_class *)v31[5];
      }
      _Block_object_dispose(&v30, 8);
      id v7 = [[v6 alloc] initWithBundleIdentifier:v2 allowPlaceholder:0 error:0];
      CFDataRef v20 = v7;
      if (v7)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, 24, @"app category %@, genreID: %llu", [objc_msgSend(objc_msgSend(v7, "iTunesMetadata"), "genre"), [objc_msgSend(objc_msgSend(v7, "iTunesMetadata"), "genreIdentifier")]]);
        if (objc_msgSend(objc_msgSend(v20, "iTunesMetadata"), "genreIdentifier") == (id)6005
          || [v2 isEqualToString:@"com.linkedin.LinkedIn"])
        {
          long long v27 = 0u;
          long long v28 = 0u;
          long long v25 = 0u;
          long long v26 = 0u;
          id v8 = [[objc_msgSend(v20, "infoDictionary") objectForKey:@"UIBackgroundModes" ofClass:objc_opt_class()];
          id v9 = [v8 countByEnumeratingWithState:&v25 objects:v37 count:16];
          if (v9)
          {
            uint64_t v10 = *(void *)v26;
            while (2)
            {
              for (i = 0; i != v9; i = (char *)i + 1)
              {
                if (*(void *)v26 != v10) {
                  objc_enumerationMutation(v8);
                }
                CFStringRef v12 = *(void **)(*((void *)&v25 + 1) + 8 * i);
                +[WCM_Logging logLevel:24, @"UIBackgroundModes: %@", v12 message];
                if (([v12 isEqualToString:@"voip"] & 1) != 0
                  || [v12 isEqualToString:@"audio"])
                {
                  [*(id *)(a1 + 40) handleVoIPStateChange:v19 appId:v2];
                  goto LABEL_26;
                }
              }
              id v9 = [v8 countByEnumeratingWithState:&v25 objects:v37 count:16];
              uint64_t v13 = 0;
              if (v9) {
                continue;
              }
              goto LABEL_45;
            }
          }
          goto LABEL_44;
        }
        if (objc_msgSend(objc_msgSend(v20, "iTunesMetadata"), "genreIdentifier") == (id)6000)
        {
          long long v23 = 0u;
          long long v24 = 0u;
          long long v21 = 0u;
          long long v22 = 0u;
          id v14 = [[[v20 infoDictionary] objectForKey:@"UIBackgroundModes"] ofClass:objc_opt_class()];
          id v15 = [v14 countByEnumeratingWithState:&v21 objects:v36 count:16];
          if (v15)
          {
            uint64_t v16 = *(void *)v22;
            while (2)
            {
              for (j = 0; j != v15; j = (char *)j + 1)
              {
                if (*(void *)v22 != v16) {
                  objc_enumerationMutation(v14);
                }
                id v18 = *(void **)(*((void *)&v21 + 1) + 8 * (void)j);
                +[WCM_Logging logLevel:24, @"UIBackgroundModes: %@", v18 message];
                if (([v18 isEqualToString:@"voip"] & 1) != 0
                  || [v18 isEqualToString:@"audio"])
                {
                  [*(id *)(a1 + 40) handleVoIPStateChangeConference:v19 appId:v2];
LABEL_26:
                  uint64_t v13 = 2;
                  goto LABEL_45;
                }
              }
              id v15 = [v14 countByEnumeratingWithState:&v21 objects:v36 count:16];
              uint64_t v13 = 0;
              if (v15) {
                continue;
              }
              goto LABEL_45;
            }
          }
          goto LABEL_44;
        }
        if (objc_msgSend(objc_msgSend(v20, "iTunesMetadata"), "genreIdentifier") == (id)6016
          || objc_msgSend(objc_msgSend(v20, "iTunesMetadata"), "genreIdentifier") == (id)6008)
        {
          [*(id *)(a1 + 40) handleStreamingStateChange:v19 appId:v2];
          uint64_t v13 = 1;
        }
        else
        {
          if (objc_msgSend(objc_msgSend(v20, "iTunesMetadata"), "genreIdentifier") != (id)6002)
          {
LABEL_44:
            uint64_t v13 = 0;
            goto LABEL_45;
          }
          +[WCM_Logging logLevel:message:](WCM_Logging, 24, @"Speed NSAppTransportSecurity: %@", [objc_msgSend(objc_msgSend(v20, "infoDictionary"), "objectForKey:ofClass:", @"NSAppTransportSecurity", objc_opt_class())]);
          uint64_t v13 = 4;
        }
LABEL_45:
        [+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton") updateAppState:v19 Category:[objc_msgSend(objc_msgSend(v20, "iTunesMetadata"), "genre")] sessionType:v13];
      }
    }
  }
}

void sub_10001371C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

id sub_100014020(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) handleAppStateChange:a2];
  id v3 = *(void **)(a1 + 32);

  return [v3 registerLPMNotifier];
}

void sub_100014060(uint64_t a1, const __CFDictionary *a2, void *a3)
{
  +[WCM_Logging logLevel:18, @"WiFiS: callbackWiFiDeviceClientLQMCallback", a2 message];
  +[WCM_Logging logLevel:19, @"%@", a2 message];
  v46 = 0;
  v47 = 0;
  v44 = 0;
  v45 = 0;
  value = 0;
  unsigned __int8 v43 = 0;
  char v41 = 0;
  int valuePtr = -600;
  uint64_t v38 = -600;
  uint64_t v39 = -600;
  uint64_t v36 = -600;
  uint64_t v37 = -600;
  uint64_t v35 = -600;
  uint64_t v33 = -600;
  uint64_t v34 = -600;
  uint64_t v31 = -600;
  uint64_t v32 = -600;
  uint64_t v29 = -600;
  uint64_t v30 = -600;
  uint64_t v27 = -600;
  uint64_t v28 = -600;
  uint64_t v25 = -600;
  uint64_t v26 = -600;
  uint64_t v23 = -600;
  uint64_t v24 = -600;
  uint64_t v22 = 3;
  if (a2)
  {
    CFNumberRef v5 = (const __CFNumber *)CFDictionaryGetValue(a2, @"RSSI");
    if (v5) {
      CFNumberGetValue(v5, kCFNumberIntType, &valuePtr);
    }
    if (CFDictionaryGetValueIfPresent(a2, @"SNR", (const void **)&value) && value) {
      CFNumberGetValue((CFNumberRef)value, kCFNumberLongLongType, &v39);
    }
    if ((valuePtr & 0x80000000) == 0)
    {
      +[WCM_Logging logLevel:18 message:@"WiFiS: callbackWiFiDeviceClientLQMCallback, ignoring invalid RSSI value"];
      int valuePtr = -600;
      uint64_t v39 = -600;
    }
    CFNumberRef v6 = (const __CFNumber *)CFDictionaryGetValue(a2, @"TXFAIL");
    if (v6) {
      CFNumberGetValue(v6, kCFNumberLongLongType, &v37);
    }
    CFNumberRef v7 = (const __CFNumber *)CFDictionaryGetValue(a2, @"TXFRAMES");
    if (v7) {
      CFNumberGetValue(v7, kCFNumberLongLongType, &v36);
    }
    CFNumberRef v8 = (const __CFNumber *)CFDictionaryGetValue(a2, @"TXRETRANS");
    if (v8) {
      CFNumberGetValue(v8, kCFNumberLongLongType, &v35);
    }
    CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue(a2, @"TXFWFAIL");
    if (v9) {
      CFNumberGetValue(v9, kCFNumberLongLongType, &v34);
    }
    CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(a2, @"TXFWFRAMES");
    if (v10) {
      CFNumberGetValue(v10, kCFNumberLongLongType, &v33);
    }
    CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(a2, @"TXFWRETRANS");
    if (v11) {
      CFNumberGetValue(v11, kCFNumberLongLongType, &v32);
    }
    CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue(a2, @"RXFRAMES");
    if (v12) {
      CFNumberGetValue(v12, kCFNumberLongLongType, &v31);
    }
    CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue(a2, @"RXRETRYFRMS");
    if (v13) {
      CFNumberGetValue(v13, kCFNumberLongLongType, &v30);
    }
    CFNumberRef v14 = (const __CFNumber *)CFDictionaryGetValue(a2, @"RXBEACONFRMS");
    if (v14) {
      CFNumberGetValue(v14, kCFNumberLongLongType, &v29);
    }
    CFNumberRef v15 = (const __CFNumber *)CFDictionaryGetValue(a2, @"RXBEACONSCHED");
    if (v15) {
      CFNumberGetValue(v15, kCFNumberLongLongType, &v28);
    }
    CFNumberRef v16 = (const __CFNumber *)CFDictionaryGetValue(a2, @"CCA");
    if (v16) {
      CFNumberGetValue(v16, kCFNumberLongLongType, &v38);
    }
    if (CFDictionaryGetValueIfPresent(a2, @"TXRATE", (const void **)&v45) && v45) {
      CFNumberGetValue((CFNumberRef)v45, kCFNumberLongLongType, &v25);
    }
    if (CFDictionaryGetValueIfPresent(a2, @"TXFBRATE", (const void **)&v43) && v43) {
      CFNumberGetValue((CFNumberRef)v43, kCFNumberLongLongType, &v24);
    }
    if (CFDictionaryGetValueIfPresent(a2, @"RXRATE", (const void **)&v44) && v44) {
      CFNumberGetValue((CFNumberRef)v44, kCFNumberLongLongType, &v23);
    }
    if (CFDictionaryGetValueIfPresent(a2, @"QBSS_STA_COUNT", (const void **)&v47) && v47) {
      CFNumberGetValue((CFNumberRef)v47, kCFNumberLongLongType, &v26);
    }
    if (CFDictionaryGetValueIfPresent(a2, @"QBSS_CHAN_UTIL", (const void **)&v46) && v46) {
      CFNumberGetValue((CFNumberRef)v46, kCFNumberLongLongType, &v27);
    }
    int ValueIfPresent = CFDictionaryGetValueIfPresent(a2, @"kLQM_HOME_WORK_STATUS", (const void **)&v41);
    uint64_t v18 = 3;
    if (ValueIfPresent && v41)
    {
      CFNumberGetValue((CFNumberRef)v41, kCFNumberLongLongType, &v22);
      uint64_t v18 = v22;
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 19, @"WiFiS: WiFiLQM rssi %d, snr %lld, txFail %lld, txFrame %lld, txRetran %lld, fwTxFail %lld, fwTxFrame %lld, fwTxRetran %lld, rxFrame %lld, rxRetry %lld, rxBeacon %lld, rxBeaconSched %lld, cca %lld, AP chn util %lld, station count %lld, TX Phy Rate %lld, TX FB Rate %lld, Rx PHY Rate %lld, POI %d", valuePtr, v39, v37, v36, v35, v34, v33, v32, v31, v30, v29, v28, v38, v27, v26,
      v25,
      v24,
      v23,
      v18);
    [a3 updateLQMReceived];
    [a3 setRSSI:valuePtr];
    if (v39) {
      [a3 setSNR:];
    }
    else {
      +[WCM_Logging logLevel:17 message:@"WiFiS: Check WiFi reported SNR 0"];
    }
    [a3 updateTxStats:v36 :v35 :v37];
    [a3 updateTxPer];
    [a3 updateFwTxStats:v33 :v32 :v34];
    [a3 updateFwTxPer];
    [a3 updateRxStats:v31 :v30];
    [a3 updateRxRatio];
    [a3 updateRxBeacons:v29 :v28];
    [a3 updateRxBeaconPer];
    [a3 updateCCA:v38];
    if (v47)
    {
      [a3 updateChanUtilization:v27];
      [a3 updateStationCount:v26];
    }
    else
    {
      [a3 updateChanUtilization:0];
      [a3 resetStationCount:0];
    }
    if (v45) {
      [a3 updatePhyRates:v25 :v24 :v23];
    }
    if (v41) {
      [a3 updatePointOfInterest:v22];
    }
    if (v38 != -600)
    {
      [a3 setWiFiLinkUP];
      [+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton") setWiFiLinkDown:0];
      [+[WRM_FT_HandoverManager WRM_FT_HandoverManagerSingleton](WRM_FT_HandoverManager, "WRM_FT_HandoverManagerSingleton") setWiFiLinkDown:0];
    }
    xpc_object_t v19 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_int64(v19, "kWRMM_WIFI_NOTIFICATION_TYPE", 1);
    *(_OWORD *)keys = *(_OWORD *)off_100211C58;
    values[0] = xpc_uint64_create(0x3EBuLL);
    values[1] = v19;
    xpc_object_t v20 = xpc_dictionary_create((const char *const *)keys, values, 2uLL);
    *(_OWORD *)v49 = *(_OWORD *)off_100211C68;
    v48[0] = xpc_uint64_create(0x3E8uLL);
    v48[1] = v20;
    xpc_object_t v21 = xpc_dictionary_create((const char *const *)v49, v48, 2uLL);
    +[WCM_Logging logLevel:19, @"%s: ready to send a xpc message: %@.", "NotifyiRATClients", v21 message];
    if (objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "needWiFiLQM"))
    {
      +[WCM_Logging logLevel:19 message:@"NotifyiRATClients - Sending to HandoverManager"];
      [+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton") updateControllerState:v21];
    }
    if (objc_msgSend(+[WRM_IDSLinkEvalManager WRM_IDSLinkEvalManagerSingleton](WRM_IDSLinkEvalManager, "WRM_IDSLinkEvalManagerSingleton"), "needWiFiLQM"))
    {
      +[WCM_Logging logLevel:19 message:@"NotifyiRATClients - Sending to IDS link Evaluator"];
      [+[WRM_IDSLinkEvalManager WRM_IDSLinkEvalManagerSingleton](WRM_IDSLinkEvalManager, "WRM_IDSLinkEvalManagerSingleton") updateControllerState:v21];
    }
    if (objc_msgSend(+[WRM_BWEvalManager WRM_BWEvalManagerSingleton](WRM_BWEvalManager, "WRM_BWEvalManagerSingleton"), "needWiFiLQM"))
    {
      +[WCM_Logging logLevel:19 message:@"NotifyiRATClients - Sending to BW Evaluator"];
      [+[WRM_BWEvalManager WRM_BWEvalManagerSingleton](WRM_BWEvalManager, "WRM_BWEvalManagerSingleton") updateControllerState:v21];
    }
    if (objc_msgSend(+[WRM_FT_HandoverManager WRM_FT_HandoverManagerSingleton](WRM_FT_HandoverManager, "WRM_FT_HandoverManagerSingleton"), "needWiFiLQM"))
    {
      +[WCM_Logging logLevel:19 message:@"NotifyiRATClients - Sending to FaceTime link Evaluator"];
      [+[WRM_FT_HandoverManager WRM_FT_HandoverManagerSingleton](WRM_FT_HandoverManager, "WRM_FT_HandoverManagerSingleton") updateControllerState:v21];
    }
    xpc_release(v48[0]);
    xpc_release(v21);
    xpc_release(values[0]);
    xpc_release(v20);
    xpc_release(v19);
  }
}

void sub_10001B864(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

NSMutableData *sub_10001C8A4(void *a1)
{
  __int16 v17 = 0x8000;
  uint64_t v16 = 0;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v2 = [a1 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v12;
    do
    {
      CFNumberRef v5 = 0;
      do
      {
        if (*(void *)v12 != v4) {
          objc_enumerationMutation(a1);
        }
        int v6 = [*(id *)(*((void *)&v11 + 1) + 8 * (void)v5) intValue];
        *((unsigned char *)&v16 + (v6 >> 3)) |= 1 << (v6 & 7);
        CFNumberRef v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id v3 = [a1 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v3);
  }
  CFNumberRef v7 = +[NSMutableData dataWithCapacity:10];
  for (uint64_t i = 0; i != 10; ++i)
  {
    char v10 = ~*((unsigned char *)&v16 + i);
    [(NSMutableData *)v7 appendBytes:&v10 length:1];
  }
  return v7;
}

NSMutableData *sub_10001CF40(void *a1, uint64_t a2)
{
  id v4 = +[NSMutableArray array];
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v5 = [a1 countByEnumeratingWithState:&v22 objects:v28 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v23;
    do
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v23 != v7) {
          objc_enumerationMutation(a1);
        }
        [v4 addObject:*(void *)(*((void *)&v22 + 1) + 8 * i)];
      }
      id v6 = [a1 countByEnumeratingWithState:&v22 objects:v28 count:16];
    }
    while (v6);
  }
  if ((int)a2 <= 127)
  {
    do
    {
      [v4 addObject:[NSNumber numberWithInt:a2]];
      a2 = (a2 + 1);
    }
    while (a2 != 128);
  }
  v27[0] = 0;
  v27[1] = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v9 = [v4 countByEnumeratingWithState:&v18 objects:v26 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v19;
    do
    {
      for (j = 0; j != v10; j = (char *)j + 1)
      {
        if (*(void *)v19 != v11) {
          objc_enumerationMutation(v4);
        }
        int v13 = [*(id *)(*((void *)&v18 + 1) + 8 * (void)j) intValue];
        *((unsigned char *)v27 + (v13 >> 3)) |= 1 << (~(_BYTE)v13 & 7);
      }
      id v10 = [v4 countByEnumeratingWithState:&v18 objects:v26 count:16];
    }
    while (v10);
  }
  long long v14 = +[NSMutableData dataWithCapacity:16];
  for (uint64_t k = 0; k != 16; ++k)
  {
    char v17 = ~*((unsigned char *)v27 + k);
    [(NSMutableData *)v14 appendBytes:&v17 length:1];
  }
  return v14;
}

void sub_10001DAB0(uint64_t a1)
{
  uint64_t v31 = 0;
  uint64_t v32 = &v31;
  uint64_t v33 = 0x2020000000;
  char v34 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = &v27;
  uint64_t v29 = 0x2020000000;
  char v30 = 0;
  id v2 = +[WRM_EnhancedCTService wrm_EnhancedCTServiceSingleton];
  uint64_t v3 = dword_10027CA60;
  [v2 setActiveSlot:[v2 getUserDataPreferredSlot]];
  [v2 getCTDataIndictor];
  unsigned int v4 = [v2 getCurrentNRStatusDataSlot];
  unsigned int v5 = [v2 getWiFiNRStatusDataSlot];
  unsigned int v6 = [v2 isDeviceUsingFR2Radio];
  id v7 = [v2 getBandWidthDataSlot];
  byte_10027CE3D = [v2 isDataPreferredSlotCBRS];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10000F8BC;
  block[3] = &unk_10020E358;
  block[4] = v2;
  block[5] = &v31;
  block[6] = &v27;
  dispatch_sync((dispatch_queue_t)[v2 getClientQueue], block);
  unsigned __int8 v8 = *((unsigned char *)v32 + 24);
  +[WCM_Logging logLevel:24, @"evaluateWiFiVersusCell: isCurrentCellNR: %d, iswifiCellNR: %d, isDeviceUsingFR2: %d, cellBandwidth: %d, cellScoreBad: %d", v4 != 0, v5 != 0, v6, v7, v8 message];
  id v9 = [*(id *)(*(void *)(a1 + 32) + 40) wifiService];
  int v10 = [v9 getWghtAverageRSSI];
  uint64_t v11 = (uint64_t)[v9 getCCA];
  [v9 getTxPer];
  double v13 = v12;
  int v14 = [v9 getWghtAverageSNR];
  [v9 isSlowWiFi];
  if (![*(id *)(*(void *)(a1 + 32) + 24) isWiFiPrimary])
  {
    byte_10027CE3C = 0;
    goto LABEL_20;
  }
  uint64_t v15 = (uint64_t)(v13 * 100.0);
  if (!v3)
  {
    unsigned __int8 v24 = [*(id *)(a1 + 32) isWiFiAppEntryCriteriaMet];
    if (v14 >= 11 && v10 >= -75 && v11 <= 70)
    {
      unsigned __int8 v25 = v15 >= 0 ? v24 : 0;
      if (v25)
      {
        dword_10027CA60 = 1;
        int v21 = byte_10027CE38;
LABEL_40:
        long long v23 = WRM_MotionController;
        uint64_t v20 = 1;
        unsigned int v22 = 1;
        goto LABEL_22;
      }
    }
    goto LABEL_20;
  }
  BOOL v19 = v14 > 5 && v10 > -80 && v11 < 86 && v15 < 20;
  if (v8 != 3 && !v19)
  {
LABEL_20:
    uint64_t v20 = 0;
    dword_10027CA60 = 0;
    int v21 = byte_10027CE38;
    goto LABEL_21;
  }
  uint64_t v20 = 1;
  dword_10027CA60 = 1;
  int v21 = byte_10027CE38;
  if (v19) {
    goto LABEL_40;
  }
LABEL_21:
  unsigned int v22 = 3;
  long long v23 = WRM_MotionController;
LABEL_22:
  byte_10027CE38 = v22;
  byte_10027CE39 = 2;
  [&v23[50] logLevel:24, @"evaluateWiFiVersusCell:  mCellScore: %d, mWiFiScore: %d, mRecommendation: %d", byte_10027CE3A, v22, v20 message];
  if (v3 == dword_10027CA60
    && *((unsigned __int8 *)v32 + 24) == byte_10027CE3A
    && v21 == byte_10027CE38)
  {
    [&v23[50] logLevel:24 message:@"evaluateWiFiVersusCell: no change in recommendation"];
  }
  else
  {
    [&v23[50] logLevel:24 message:@"evaluateWiFiVersusCell: recommendation changed"];
    byte_10027CE3A = *((unsigned char *)v32 + 24);
    byte_10027CE3B = *((unsigned char *)v28 + 24);
    if ([v2 deviceICheapFR2CoverageSync]) {
      byte_10027CE3C = 1;
    }
    [*(id *)(a1 + 32) notifyRecommendations];
    [&v23[50] logLevel:24 message:@"evaluateWiFiVersusCell: m5GAvailable: %d", byte_10027CE3C];
  }
  if (v3 != dword_10027CA60)
  {
    [&v23[50] logLevel:24 message:@"evaluateWiFiVersusCell: awd: eval link changed: %d" dword_10027CA60];
    [*(id *)(a1 + 32) submitWiFiVersusCellAWDMetrics];
    uint64_t v3 = dword_10027CA60;
  }
  [&v23[50] logLevel:24 message:@"evaluateWiFiVersusCell: current recommended link: %d", v3];
  _Block_object_dispose(&v27, 8);
  _Block_object_dispose(&v31, 8);
}

void sub_10001DECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

id sub_10001DF04(uint64_t a1)
{
  id v2 = +[WRM_EnhancedCTService wrm_EnhancedCTServiceSingleton];
  unsigned int v3 = [*(id *)(*(void *)(a1 + 32) + 24) isWiFiConnectedToCarPlay];
  id result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 26, @"toggleSAState:mCallOnWiFi %d, mCallKitCallActive:%d, isCarPlayWiFi: %d,exitSaDepriotizationEval:%d", byte_10027CF25, byte_10027CF11, [v2 exitSaDepriotizationEval], v3);
  if ((v3 & 1) == 0)
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 26, @"toggleSAState:mCallOnWiFi %d, mCallKitCallActive:%d,exitSaDepriotizationEval:%d", byte_10027CF25, byte_10027CF11, [v2 exitSaDepriotizationEval]);
    id result = [v2 exitSaDepriotizationEval];
    if ((!result || byte_10027CF25 || !*(unsigned char *)(a1 + 40)) && (byte_10027CF25 || !byte_10027CF11))
    {
      if ([v2 isWiFiCallingSupportedAnySlot])
      {
        +[WCM_Logging logLevel:26 message:@"toggleSAState: isWiFiCallingSupportedAnySlot true"];
        +[WCM_Logging logLevel:26, @"evaluate toggleSAState: prev SA state disabled %d, wifiState: %d", byte_10027CD00, *(unsigned __int8 *)(a1 + 40) message];
        uint64_t v5 = *(unsigned __int8 *)(a1 + 40);
        BOOL v6 = *(unsigned char *)(a1 + 40) != 0;
      }
      else
      {
        BOOL v6 = 0;
        uint64_t v5 = 0;
      }
      unsigned int v7 = [*(id *)(*(void *)(a1 + 32) + 16) isWiFiCallingSupportedSlot1];
      if ([*(id *)(*(void *)(a1 + 32) + 16) isWiFiCallingSupportedSlot2]) {
        int v8 = 2;
      }
      else {
        int v8 = 0;
      }
      uint64_t v9 = v8 | v7;
      if (v5 != byte_10027CD00 || (unsigned int v10 = v9, v9 != byte_10027CD01))
      {
        [*(id *)(a1 + 32) setBBSAState:v6];
        byte_10027CD00 = v5;
        unsigned int v10 = byte_10027CD01;
      }
      return +[WCM_Logging logLevel:26, @"evaluate toggleSAState: current SA disabled %d, prev mSAMask %d, current saMask %d", v5, v10, v9 message];
    }
  }
  return result;
}

void sub_10001EAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10001EB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10001EC78(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

id sub_10001ECA0(uint64_t a1)
{
  id result = [[[objc_msgSend(*(id *)(a1 + 32), "isWiFiCallingSupported") objectAtIndex:0] BOOLValue];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

id sub_10001ECE0(uint64_t a1)
{
  id result = [[[objc_msgSend(*(id *)(a1 + 32), "isWiFiCallingSupported") objectAtIndex:1] BOOLValue];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

id sub_10001ED20(uint64_t a1)
{
  uint64_t v2 = 0;
  char v3 = 1;
  do
  {
    char v4 = v3;
    id result = [[[objc_msgSend(*(id *)(a1 + 32), "isWiFiCallingSupported") objectAtIndex:v2] BOOLValue];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (_BYTE)result;
    char v3 = *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    if (v3) {
      break;
    }
    uint64_t v2 = 1;
  }
  while ((v4 & 1) != 0);
  return result;
}

void sub_10001EE48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10001FDA4(uint64_t a1)
{
  if ([*(id *)(a1 + 32) activeSlot])
  {
    if ([*(id *)(a1 + 32) activeSlot] == (id)1)
    {
      uint64_t v2 = "CTSubscriptionSlotOne";
    }
    else if ([*(id *)(a1 + 32) activeSlot] == (id)2)
    {
      uint64_t v2 = "CTSubscriptionSlotTwo";
    }
    else
    {
      uint64_t v2 = "Unknown CTSubscriptionSlot!!!";
    }
  }
  else
  {
    uint64_t v2 = "CTSubscriptionSlotUnknown";
  }
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: active slot %s bars %@", "-[WRM_EnhancedCTService getCurrentSignalBars]_block_invoke", v2, [*(id *)(a1 + 32) bars]);
  id result = [[[objc_msgSend(*(id *)(a1 + 32), "bars") objectAtIndex:objc_msgSend(*(id *)(a1 + 32), "activeSlot") - 1] intValue];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (int)result;
  return result;
}

void sub_100021584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
}

void sub_100022EB0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100023F60(uint64_t a1)
{
  +[WCM_Logging logLevel:2, @"WiFiS: Update WiFi Limited Aggregation state (%d) and useCase (%d)", *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44) message];
  v4[0] = @"MWS_BT_SCO_HID_TRAFFIC_INDICATION";
  uint64_t v2 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 40)];
  v4[1] = @"MWS_BT_SCO_HID_TRAFFIC_USE_CASE";
  v5[0] = v2;
  v5[1] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 44)];
  return [*(id *)(a1 + 32) sendMessage:@"MWS_BT_SCO_HID_TRAFFIC_PARAM" withValue:[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 2)];
}

id sub_100024038(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleSessionNotification:*(void *)(a1 + 40)];
}

BOOL sub_1000241A0(id a1, FreqRangeInfo *a2, FreqRangeInfo *a3)
{
  return [(FreqRangeInfo *)a2 isEqual:a3];
}

BOOL sub_1000241A8(id a1, FreqRangeInfo *a2, FreqRangeInfo *a3)
{
  return [(FreqRangeInfo *)a2 isEqual:a3];
}

void sub_1000242E4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

const char *sub_1000244DC(unsigned int a1)
{
  if (a1 <= 0xE) {
    return off_10020F988[a1];
  }
  else {
    return "<ISSUE_TYPE_INVALID>";
  }
}

const char *sub_100024500(unsigned int a1)
{
  if (a1 > 0xD2) {
    return "<ISSUE_BAND_INVALID: beyond the range>";
  }
  unsigned int v2 = a1 - 200;
  if (a1 >= 0xC8)
  {
    char v3 = off_10020F908;
LABEL_7:
    char v4 = &v3[v2];
    return *v4;
  }
  unsigned int v2 = a1 - 100;
  if (a1 - 100 <= 0x10)
  {
    char v3 = off_10020F880;
    goto LABEL_7;
  }
  if (a1 <= 0x1B)
  {
    char v4 = &off_10020F7A0[a1];
    return *v4;
  }
  return "<ISSUE_BAND_INVALID: Negative number.>";
}

id sub_10002456C(double *a1)
{
  if (a1[5] <= 30.0)
  {
    *(double *)(*((void *)a1 + 4) + 332) = a1[6];
    *(double *)(*((void *)a1 + 4) + 340) = a1[7];
    id result = [+[NSDate date] timeIntervalSince1970];
    *(void *)(*((void *)a1 + 4) + 348) = v3;
  }
  else
  {
    *(void *)(*((void *)a1 + 4) + 332) = 0;
    *(void *)(*((void *)a1 + 4) + 340) = 0;
    return +[WCM_Logging logLevel:22, @"wrmSdmLocationController: invalidate location since speed %f> 30m/s", *((void *)a1 + 5) message];
  }
  return result;
}

uint64_t sub_100024630(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 487);
  return result;
}

id sub_100024650(uint64_t a1)
{
  return [*(id *)(a1 + 32) sacHandleDesenseNetworkConfig:*(void *)(a1 + 40)];
}

id sub_10002465C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) handleMessage:a2];
}

id sub_100024668(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleXPCMessage:*(void *)(a1 + 40)];
}

id sub_100024674(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleSessionNotification:*(void *)(a1 + 40)];
}

id sub_100024680(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleSessionNotification:*(void *)(a1 + 40)];
}

id sub_10002468C(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 184) sacUpdateWiFiFreqInfo:1000000 * [*(id *)(a1 + 40) channelCenterFreqMHz] Bandwidth:1000000 * [*(id *)(a1 + 40) channelBandwidthMHz]];
  [*(id *)(*(void *)(a1 + 32) + 184) sacReportWifiVictimFreqListOnTargetSac:1 action:1];
  id result = [[[+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton") activeCoexFeatures] containsObject:@"SacPolicyJasperSupport"];
  if (result)
  {
    uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 184);
    return [v3 sacReportWifiVictimFreqListOnTargetSac:2 action:1];
  }
  return result;
}

void sub_1000271D0(void *a1, char *newValue)
{
  if (a1) {
    objc_setProperty_nonatomic(a1, newValue, newValue, 8);
  }
}

id *sub_1000271E8(id *result)
{
  if (result) {
    return (id *)[result[1] removeAllObjects];
  }
  return result;
}

void *sub_100027200(void *result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    id v4 = (id)result[1];
    if (!v4)
    {
      id v4 = objc_alloc_init((Class)NSMutableArray);
      v3[1] = v4;
    }
    return [v4 addObject:a2];
  }
  return result;
}

id *sub_10002726C(id *result)
{
  if (result) {
    return (id *)[result[1] count];
  }
  return result;
}

id *sub_100027284(id *result, uint64_t a2)
{
  if (result) {
    return (id *)[result[1] objectAtIndex:a2];
  }
  return result;
}

uint64_t sub_1000272A0()
{
  self;

  return objc_opt_class();
}

uint64_t sub_1000274A8(void *a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      double v12 = objc_alloc_init(DYNAMICRATSELECTIONDynamicRatSelectionMetrics);
      sub_100027200(a1, (uint64_t)v12);

      if (!PBReaderPlaceMark() || (sub_100037100((uint64_t)v12, a2) & 1) == 0) {
        return 0;
      }
      PBReaderRecallMark();
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void *sub_100027774(void *result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t result = [(id)result[1] count];
    if (result)
    {
      if (a2) {
        [*(id *)(a2 + 8) removeAllObjects];
      }
      uint64_t result = [(id)v3[1] count];
      if (result)
      {
        char v4 = result;
        for (uint64_t i = 0; i != v4; uint64_t i = (void *)((char *)i + 1))
          uint64_t result = sub_100027200((void *)a2, (uint64_t)[(id)v3[1] objectAtIndex:i]);
      }
    }
  }
  return result;
}

void *sub_1000279C0(void *result, uint64_t a2)
{
  if (result)
  {
    unsigned int v2 = result;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    uint64_t v3 = *(void **)(a2 + 8);
    uint64_t result = [v3 countByEnumeratingWithState:&v7 objects:v11 count:16];
    if (result)
    {
      char v4 = result;
      uint64_t v5 = *(void *)v8;
      do
      {
        unint64_t v6 = 0;
        do
        {
          if (*(void *)v8 != v5) {
            objc_enumerationMutation(v3);
          }
          sub_100027200(v2, *(void *)(*((void *)&v7 + 1) + 8 * (void)v6));
          unint64_t v6 = (void *)((char *)v6 + 1);
        }
        while (v4 != v6);
        uint64_t result = [v3 countByEnumeratingWithState:&v7 objects:v11 count:16];
        char v4 = result;
      }
      while (result);
    }
  }
  return result;
}

uint64_t sub_100027AB8(uint64_t result)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

void sub_100027B54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100027BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100027C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100027D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100027DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100027E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100027F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100027FE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100028088(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100028138(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000281E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100028298(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100028824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_100028944(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100028B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  BOOL v19 = v18;

  _Unwind_Resume(a1);
}

id sub_100028BCC(uint64_t a1)
{
  return [*(id *)(a1 + 32) clientStarted];
}

id sub_100028BD4(uint64_t a1)
{
  return [*(id *)(a1 + 32) clientStopped];
}

id sub_100028D68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) UtaIdcCellConfigEventIndHandle:a2 size:a3];
}

id sub_100028D78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) desenseCellConfigEventIndHandle:a2 size:a3];
}

void sub_100028EA4(_Unwind_Exception *a1)
{
  for (uint64_t i = 16; i != -8; i -= 8)

  _Unwind_Resume(a1);
}

void sub_100028FC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100029080(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100029230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10002937C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100029390(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleCoexManagerEvent:*(void *)(a1 + 40)];
}

void sub_10002973C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

id sub_1000297F4(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleGnssImdAntBlockPowerLimitConfig:*(void *)(a1 + 40)];
}

void sub_100029AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100029CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  for (uint64_t i = 16; i != -8; i -= 8)

  _Unwind_Resume(a1);
}

void sub_10002A110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  AriSdk::ARI_UtaIdcConfigEventReq_SDK::~ARI_UtaIdcConfigEventReq_SDK((AriSdk::ARI_UtaIdcConfigEventReq_SDK *)va);
  AriSdk::ARI_UtaIdcConfigEventReq_SDK::~ARI_UtaIdcConfigEventReq_SDK((AriSdk::ARI_UtaIdcConfigEventReq_SDK *)(v16 - 120));
  _Unwind_Resume(a1);
}

void sub_10002A14C()
{
}

void sub_10002A1B8()
{
}

void sub_10002A224(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  AriSdk::ARI_UtaIdcConfigEventRspCb_SDK::ARI_UtaIdcConfigEventRspCb_SDK((AriSdk::ARI_UtaIdcConfigEventRspCb_SDK *)v10, a2, a3);
  int isARIResponseValid = ice::isARIResponseValid((ice *)v10, (const AriSdk::MsgBase *)0x490A8000, v4);
  unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v10);
  [*(id *)(a1 + 32) checkErrorMsgGmid:((GMID >> 17) & 0xFFFF8000 | (GMID << 26)) expectedGMID:1225424896 API_Str:*(void *)(a1 + 40)];
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcConfigEventRspCb_SDK::unpack((AriSdk::ARI_UtaIdcConfigEventRspCb_SDK *)v10))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      CFStringRef v8 = @"Coex ARI driver(subId %u): Failed to set %s (unpack error)";
    }
    else
    {
      uint64_t v9 = *v11;
      uint64_t v7 = *(void *)(a1 + 40);
      if (v9)
      {
        +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s (error = %d)", 0, *(void *)(a1 + 40), v9 message];
        goto LABEL_6;
      }
      CFStringRef v8 = @"Coex ARI driver(subId %u): Set %s (SUCCESS)";
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v8, 0, v7);
  }
  else
  {
    +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)", 0, *(void *)(a1 + 40) message];
  }
LABEL_6:
  AriSdk::ARI_UtaIdcConfigEventRspCb_SDK::~ARI_UtaIdcConfigEventRspCb_SDK((AriSdk::ARI_UtaIdcConfigEventRspCb_SDK *)v10);
}

void sub_10002A328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  AriSdk::ARI_UtaIdcConfigEventRspCb_SDK::~ARI_UtaIdcConfigEventRspCb_SDK((AriSdk::ARI_UtaIdcConfigEventRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_10002A348(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  AriSdk::ARI_UtaIdcConfigEventRspCb_SDK::ARI_UtaIdcConfigEventRspCb_SDK((AriSdk::ARI_UtaIdcConfigEventRspCb_SDK *)v10, a2, a3);
  int isARIResponseValid = ice::isARIResponseValid((ice *)v10, (const AriSdk::MsgBase *)0x490A8000, v4);
  unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v10);
  [*(id *)(a1 + 32) checkErrorMsgGmid:(GMID >> 17) & 0xFFFF8000 | (GMID << 26) expectedGMID:1225424896 API_Str:*(void *)(a1 + 40)];
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcConfigEventRspCb_SDK::unpack((AriSdk::ARI_UtaIdcConfigEventRspCb_SDK *)v10))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      CFStringRef v8 = @"Coex ARI driver(subId %u): Failed to set %s (unpack error)";
    }
    else
    {
      uint64_t v9 = *v11;
      uint64_t v7 = *(void *)(a1 + 40);
      if (v9)
      {
        +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s (error = %d)", 1, *(void *)(a1 + 40), v9 message];
        goto LABEL_6;
      }
      CFStringRef v8 = @"Coex ARI driver(subId %u): Set %s (SUCCESS)";
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v8, 1, v7);
  }
  else
  {
    +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)", 1, *(void *)(a1 + 40) message];
  }
LABEL_6:
  AriSdk::ARI_UtaIdcConfigEventRspCb_SDK::~ARI_UtaIdcConfigEventRspCb_SDK((AriSdk::ARI_UtaIdcConfigEventRspCb_SDK *)v10);
}

void sub_10002A458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  AriSdk::ARI_UtaIdcConfigEventRspCb_SDK::~ARI_UtaIdcConfigEventRspCb_SDK((AriSdk::ARI_UtaIdcConfigEventRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_10002AABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  AriSdk::ARI_UtaIdcSetTunerVoterConfigReq_SDK::~ARI_UtaIdcSetTunerVoterConfigReq_SDK((AriSdk::ARI_UtaIdcSetTunerVoterConfigReq_SDK *)&a28);

  _Unwind_Resume(a1);
}

void sub_10002AB14()
{
}

void sub_10002AB80(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  AriSdk::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK *)v11, a2, a3);
  int isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x49130000, v4);
  unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  [*(id *)(a1 + 32) checkErrorMsgGmid:(GMID >> 17) & 0xFFFF8000 | (GMID << 26) expectedGMID:1225981952 API_Str:*(void *)(a1 + 40)];
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK::unpack((AriSdk::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK *)v11))
    {
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      CFStringRef v9 = @"Coex ARI driver(subId %u): Failed to set %s (unpack error)";
    }
    else
    {
      uint64_t v10 = *v12;
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      if (v10)
      {
        +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s (error = %d)", v7, *(void *)(a1 + 40), v10 message];
        goto LABEL_6;
      }
      CFStringRef v9 = @"Coex ARI driver(subId %u): Set %s (SUCCESS)";
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)", *(unsigned int *)(a1 + 48), *(void *)(a1 + 40) message];
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK::~ARI_UtaIdcSetTunerVoterConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK *)v11);
}

void sub_10002AC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK::~ARI_UtaIdcSetTunerVoterConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_10002ACA8(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  AriSdk::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK *)v11, a2, a3);
  int isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x49130000, v4);
  unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  [*(id *)(a1 + 32) checkErrorMsgGmid:(GMID >> 17) & 0xFFFF8000 | (GMID << 26) expectedGMID:1225981952 API_Str:*(void *)(a1 + 40)];
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK::unpack((AriSdk::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK *)v11))
    {
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      CFStringRef v9 = @"Coex ARI driver(subId %u): Failed to set %s (unpack error)";
    }
    else
    {
      uint64_t v10 = *v12;
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      if (v10)
      {
        +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s (error = %d)", v7, *(void *)(a1 + 40), v10 message];
        goto LABEL_6;
      }
      CFStringRef v9 = @"Coex ARI driver(subId %u): Set %s (SUCCESS)";
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)", *(unsigned int *)(a1 + 48), *(void *)(a1 + 40) message];
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK::~ARI_UtaIdcSetTunerVoterConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK *)v11);
}

void sub_10002ADB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK::~ARI_UtaIdcSetTunerVoterConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_10002AEDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10002B610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  AriSdk::ARI_UtaIdcSetCameraStatusReqV2_SDK::~ARI_UtaIdcSetCameraStatusReqV2_SDK((AriSdk::ARI_UtaIdcSetCameraStatusReqV2_SDK *)(v13 - 224));

  _Unwind_Resume(a1);
}

void sub_10002B684(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::ARI_UtaIdcSetCameraStatusRspCbV2_SDK((AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *)v11, a2, a3);
  int isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x491B8000, v4);
  unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  [*(id *)(a1 + 32) checkErrorMsgGmid:(GMID >> 17) & 0xFFFF8000 | (GMID << 26) expectedGMID:1226539008 API_Str:*(void *)(a1 + 40)];
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::unpack((AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *)v11))
    {
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      CFStringRef v9 = @"Coex ARI driver(subId %u): Failed to set %s (unpack error)";
    }
    else
    {
      uint64_t v10 = *v12;
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      if (v10)
      {
        +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s (error = %d)", v7, *(void *)(a1 + 40), v10 message];
        goto LABEL_6;
      }
      CFStringRef v9 = @"Coex ARI driver(subId %u): Set %s (SUCCESS)";
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)", *(unsigned int *)(a1 + 48), *(void *)(a1 + 40) message];
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::~ARI_UtaIdcSetCameraStatusRspCbV2_SDK((AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *)v11);
}

void sub_10002B794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::~ARI_UtaIdcSetCameraStatusRspCbV2_SDK((AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_10002B7B4(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::ARI_UtaIdcSetCameraStatusRspCbV2_SDK((AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *)v11, a2, a3);
  int isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x491B8000, v4);
  unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  [*(id *)(a1 + 32) checkErrorMsgGmid:(GMID >> 17) & 0xFFFF8000 | (GMID << 26) expectedGMID:1226539008 API_Str:*(void *)(a1 + 40)];
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::unpack((AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *)v11))
    {
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      CFStringRef v9 = @"Coex ARI driver(subId %u): Failed to set %s (unpack error)";
    }
    else
    {
      uint64_t v10 = *v12;
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      if (v10)
      {
        +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s (error = %d)", v7, *(void *)(a1 + 40), v10 message];
        goto LABEL_6;
      }
      CFStringRef v9 = @"Coex ARI driver(subId %u): Set %s (SUCCESS)";
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)", *(unsigned int *)(a1 + 48), *(void *)(a1 + 40) message];
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::~ARI_UtaIdcSetCameraStatusRspCbV2_SDK((AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *)v11);
}

void sub_10002B8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::~ARI_UtaIdcSetCameraStatusRspCbV2_SDK((AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_10002B8E4(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::ARI_UtaIdcSetCameraStatusRspCbV2_SDK((AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *)v11, a2, a3);
  int isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x491B8000, v4);
  unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  [*(id *)(a1 + 32) checkErrorMsgGmid:((GMID >> 17) & 0xFFFF8000 | (GMID << 26)) expectedGMID:1226539008 API_Str:*(void *)(a1 + 40)];
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::unpack((AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *)v11))
    {
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      CFStringRef v9 = @"Coex ARI driver(subId %u): Failed to set %s (unpack error)";
    }
    else
    {
      uint64_t v10 = *v12;
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      if (v10)
      {
        +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s (error = %d)", v7, *(void *)(a1 + 40), v10 message];
        goto LABEL_6;
      }
      CFStringRef v9 = @"Coex ARI driver(subId %u): Set %s (SUCCESS)";
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)", *(unsigned int *)(a1 + 48), *(void *)(a1 + 40) message];
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::~ARI_UtaIdcSetCameraStatusRspCbV2_SDK((AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *)v11);
}

void sub_10002B9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::~ARI_UtaIdcSetCameraStatusRspCbV2_SDK((AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_10002BA14(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::ARI_UtaIdcSetCameraStatusRspCbV2_SDK((AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *)v11, a2, a3);
  int isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x491B8000, v4);
  unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  [*(id *)(a1 + 32) checkErrorMsgGmid:(GMID >> 17) & 0xFFFF8000 | (GMID << 26) expectedGMID:1226539008 API_Str:*(void *)(a1 + 40)];
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::unpack((AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *)v11))
    {
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      CFStringRef v9 = @"Coex ARI driver(subId %u): Failed to set %s (unpack error)";
    }
    else
    {
      uint64_t v10 = *v12;
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      if (v10)
      {
        +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s (error = %d)", v7, *(void *)(a1 + 40), v10 message];
        goto LABEL_6;
      }
      CFStringRef v9 = @"Coex ARI driver(subId %u): Set %s (SUCCESS)";
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)", *(unsigned int *)(a1 + 48), *(void *)(a1 + 40) message];
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::~ARI_UtaIdcSetCameraStatusRspCbV2_SDK((AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *)v11);
}

void sub_10002BB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::~ARI_UtaIdcSetCameraStatusRspCbV2_SDK((AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_10002BB44(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::ARI_UtaIdcSetCameraStatusRspCbV2_SDK((AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *)v11, a2, a3);
  int isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x491B8000, v4);
  unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  [*(id *)(a1 + 32) checkErrorMsgGmid:(GMID >> 17) & 0xFFFF8000 | (GMID << 26) expectedGMID:1226539008 API_Str:*(void *)(a1 + 40)];
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::unpack((AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *)v11))
    {
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      CFStringRef v9 = @"Coex ARI driver(subId %u): Failed to set %s (unpack error)";
    }
    else
    {
      uint64_t v10 = *v12;
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      if (v10)
      {
        +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s (error = %d)", v7, *(void *)(a1 + 40), v10 message];
        goto LABEL_6;
      }
      CFStringRef v9 = @"Coex ARI driver(subId %u): Set %s (SUCCESS)";
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)", *(unsigned int *)(a1 + 48), *(void *)(a1 + 40) message];
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::~ARI_UtaIdcSetCameraStatusRspCbV2_SDK((AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *)v11);
}

void sub_10002BC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::~ARI_UtaIdcSetCameraStatusRspCbV2_SDK((AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_10002BCD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10002BDA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  AriSdk::ARI_UtaIdcGetLaaMeasInfoReq_SDK::~ARI_UtaIdcGetLaaMeasInfoReq_SDK((AriSdk::ARI_UtaIdcGetLaaMeasInfoReq_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_10002BDB8(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  AriSdk::ARI_UtaIdcGetLaaMeasInfoRspCb_SDK::ARI_UtaIdcGetLaaMeasInfoRspCb_SDK((AriSdk::ARI_UtaIdcGetLaaMeasInfoRspCb_SDK *)v9, a2, a3);
  if (ice::isARIResponseValid((ice *)v9, (const AriSdk::MsgBase *)0x490B0000, v4))
  {
    if (AriSdk::ARI_UtaIdcGetLaaMeasInfoRspCb_SDK::unpack((AriSdk::ARI_UtaIdcGetLaaMeasInfoRspCb_SDK *)v9))
    {
      CFStringRef v5 = @"Coex ARI driver: Failed to get LAA Measurement Info (unpack error)";
    }
    else
    {
      if (!*v11)
      {
        +[WCM_Logging logLevel:3 message:@"Coex ARI driver: get LAA Measurement Info (SUCCESS)"];
        unint64_t v6 = v12;
        uint64_t v7 = *v10;
        +[WCM_Logging logLevel:3, @"Coex ARI driver: UtaIdcGetLaaMeasInfoRspCb SubId=%u\n", v7 message];
        xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
        xpc_dictionary_set_BOOL(v8, "kWCMCellularLaaMeasInfo_LaaMeasConfigured", *v6 != 0);
        [*(id *)(a1 + 32) sendMessage:1232 withArgs:v8 withSubId:v7];

        goto LABEL_8;
      }
      CFStringRef v5 = @"Coex ARI driver: Failed to get LAA Measurement Info (result error)";
    }
    +[WCM_Logging logLevel:3 message:v5];
  }
  else
  {
    +[WCM_Logging logLevel:3 message:@"Coex ARI driver: Failed to get LAA Measurement Info"];
  }
LABEL_8:
  AriSdk::ARI_UtaIdcGetLaaMeasInfoRspCb_SDK::~ARI_UtaIdcGetLaaMeasInfoRspCb_SDK((AriSdk::ARI_UtaIdcGetLaaMeasInfoRspCb_SDK *)v9);
}

void sub_10002BEE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  AriSdk::ARI_UtaIdcGetLaaMeasInfoRspCb_SDK::~ARI_UtaIdcGetLaaMeasInfoRspCb_SDK((AriSdk::ARI_UtaIdcGetLaaMeasInfoRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_10002C0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  AriSdk::ARI_UtaIdcConfigTxActParamReq_SDK::~ARI_UtaIdcConfigTxActParamReq_SDK((AriSdk::ARI_UtaIdcConfigTxActParamReq_SDK *)va);

  _Unwind_Resume(a1);
}

void sub_10002C0F8()
{
}

void sub_10002C16C(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  AriSdk::ARI_UtaIdcConfigTxActParamRspCb_SDK::ARI_UtaIdcConfigTxActParamRspCb_SDK((AriSdk::ARI_UtaIdcConfigTxActParamRspCb_SDK *)v11, a2, a3);
  int isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x49100000, v4);
  unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  [*(id *)(a1 + 32) checkErrorMsgGmid:(GMID >> 17) & 0xFFFF8000 | (GMID << 26) expectedGMID:1225785344 API_Str:*(void *)(a1 + 40)];
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcConfigTxActParamRspCb_SDK::unpack((AriSdk::ARI_UtaIdcConfigTxActParamRspCb_SDK *)v11))
    {
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      CFStringRef v9 = @"Coex ARI driver(subId %u): Failed to set %s (unpack error)";
    }
    else
    {
      uint64_t v10 = *v12;
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      if (v10)
      {
        +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s (error = %d)", v7, *(void *)(a1 + 40), v10 message];
        goto LABEL_6;
      }
      CFStringRef v9 = @"Coex ARI driver(subId %u): Set %s (SUCCESS)";
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)", *(unsigned int *)(a1 + 48), *(void *)(a1 + 40) message];
  }
LABEL_6:
  AriSdk::ARI_UtaIdcConfigTxActParamRspCb_SDK::~ARI_UtaIdcConfigTxActParamRspCb_SDK((AriSdk::ARI_UtaIdcConfigTxActParamRspCb_SDK *)v11);
}

void sub_10002C274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  AriSdk::ARI_UtaIdcConfigTxActParamRspCb_SDK::~ARI_UtaIdcConfigTxActParamRspCb_SDK((AriSdk::ARI_UtaIdcConfigTxActParamRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_10002C318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10002C45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  AriSdk::ARI_UtaIdcConfigMiscParamReqV2_SDK::~ARI_UtaIdcConfigMiscParamReqV2_SDK((AriSdk::ARI_UtaIdcConfigMiscParamReqV2_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_10002C478(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  AriSdk::ARI_UtaIdcConfigMiscParamRspCbV2_SDK::ARI_UtaIdcConfigMiscParamRspCbV2_SDK((AriSdk::ARI_UtaIdcConfigMiscParamRspCbV2_SDK *)v11, a2, a3);
  int isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x491A8000, v4);
  unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  [*(id *)(a1 + 32) checkErrorMsgGmid:(GMID >> 17) & 0xFFFF8000 | (GMID << 26) expectedGMID:1226473472 API_Str:*(void *)(a1 + 40)];
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcConfigMiscParamRspCbV2_SDK::unpack((AriSdk::ARI_UtaIdcConfigMiscParamRspCbV2_SDK *)v11))
    {
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      CFStringRef v9 = @"Coex ARI driver(subId %u): Failed to set %s (unpack error)";
    }
    else
    {
      uint64_t v10 = *v12;
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      if (v10)
      {
        +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s (error = %d)", v7, *(void *)(a1 + 40), v10 message];
        goto LABEL_6;
      }
      CFStringRef v9 = @"Coex ARI driver(subId %u): Set %s (SUCCESS)";
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)", *(unsigned int *)(a1 + 48), *(void *)(a1 + 40) message];
  }
LABEL_6:
  AriSdk::ARI_UtaIdcConfigMiscParamRspCbV2_SDK::~ARI_UtaIdcConfigMiscParamRspCbV2_SDK((AriSdk::ARI_UtaIdcConfigMiscParamRspCbV2_SDK *)v11);
}

void sub_10002C588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  AriSdk::ARI_UtaIdcConfigMiscParamRspCbV2_SDK::~ARI_UtaIdcConfigMiscParamRspCbV2_SDK((AriSdk::ARI_UtaIdcConfigMiscParamRspCbV2_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_10002C834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  AriSdk::ARI_UtaIdcSetTxAntMappingTableReq_SDK::~ARI_UtaIdcSetTxAntMappingTableReq_SDK((AriSdk::ARI_UtaIdcSetTxAntMappingTableReq_SDK *)va);

  _Unwind_Resume(a1);
}

void sub_10002C898(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  AriSdk::ARI_UtaIdcSetTxAntMappingTableRspCb_SDK::ARI_UtaIdcSetTxAntMappingTableRspCb_SDK((AriSdk::ARI_UtaIdcSetTxAntMappingTableRspCb_SDK *)v11, a2, a3);
  int isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x49110000, v4);
  unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  [*(id *)(a1 + 32) checkErrorMsgGmid:(GMID >> 17) & 0xFFFF8000 | (GMID << 26) expectedGMID:1225850880 API_Str:*(void *)(a1 + 40)];
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetTxAntMappingTableRspCb_SDK::unpack((AriSdk::ARI_UtaIdcSetTxAntMappingTableRspCb_SDK *)v11))
    {
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      CFStringRef v9 = @"Coex ARI driver(subId %u): Failed to set %s (unpack error)";
    }
    else
    {
      uint64_t v10 = *v12;
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      if (v10)
      {
        +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s (error = %d)", v7, *(void *)(a1 + 40), v10 message];
        goto LABEL_6;
      }
      CFStringRef v9 = @"Coex ARI driver(subId %u): Set %s (SUCCESS)";
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)", *(unsigned int *)(a1 + 48), *(void *)(a1 + 40) message];
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetTxAntMappingTableRspCb_SDK::~ARI_UtaIdcSetTxAntMappingTableRspCb_SDK((AriSdk::ARI_UtaIdcSetTxAntMappingTableRspCb_SDK *)v11);
}

void sub_10002C9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetTxAntMappingTableRspCb_SDK::~ARI_UtaIdcSetTxAntMappingTableRspCb_SDK((AriSdk::ARI_UtaIdcSetTxAntMappingTableRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_10002D274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxReqV3_SDK::~ARI_UtaIdcSetRTFeatureSpmiRxReqV3_SDK((AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxReqV3_SDK *)&a26);
  AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxReqV3_SDK::~ARI_UtaIdcSetRTFeatureSpmiTxReqV3_SDK((AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxReqV3_SDK *)&a36);
  AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxReqV3_SDK::~ARI_UtaIdcSetRTFeatureSpmiRxReqV3_SDK((AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxReqV3_SDK *)&a58);
  AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxReqV3_SDK::~ARI_UtaIdcSetRTFeatureSpmiTxReqV3_SDK((AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxReqV3_SDK *)&a68);

  _Unwind_Resume(a1);
}

void sub_10002D364()
{
}

void sub_10002D3DC(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK((AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK *)v10, a2, a3);
  int isARIResponseValid = ice::isARIResponseValid((ice *)v10, (const AriSdk::MsgBase *)0x49198000, v4);
  unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v10);
  [*(id *)(a1 + 32) checkErrorMsgGmid:((GMID >> 17) & 0xFFFF8000 | (GMID << 26)) expectedGMID:1226407936 API_Str:*(void *)(a1 + 40)];
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK::unpack((AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK *)v10))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      CFStringRef v8 = @"Coex ARI driver(subId %u): Failed to set %s (unpack error)";
    }
    else
    {
      uint64_t v9 = *v11;
      uint64_t v7 = *(void *)(a1 + 40);
      if (v9)
      {
        +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s (error = %d)", 0, *(void *)(a1 + 40), v9 message];
        goto LABEL_6;
      }
      CFStringRef v8 = @"Coex ARI driver(subId %u): Set %s (SUCCESS)";
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v8, 0, v7);
  }
  else
  {
    +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)", 0, *(void *)(a1 + 40) message];
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK::~ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK((AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK *)v10);
}

void sub_10002D4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK::~ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK((AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_10002D500(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK((AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK *)v10, a2, a3);
  int isARIResponseValid = ice::isARIResponseValid((ice *)v10, (const AriSdk::MsgBase *)0x491A0000, v4);
  unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v10);
  [*(id *)(a1 + 32) checkErrorMsgGmid:(GMID >> 17) & 0xFFFF8000 | (GMID << 26) expectedGMID:1226440704 API_Str:*(void *)(a1 + 40)];
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK::unpack((AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK *)v10))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      CFStringRef v8 = @"Coex ARI driver(subId %u): Failed to set %s (unpack error)";
    }
    else
    {
      uint64_t v9 = *v11;
      uint64_t v7 = *(void *)(a1 + 40);
      if (v9)
      {
        +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s (error = %d)", 0, *(void *)(a1 + 40), v9 message];
        goto LABEL_6;
      }
      CFStringRef v8 = @"Coex ARI driver(subId %u): Set %s (SUCCESS)";
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v8, 0, v7);
  }
  else
  {
    +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)", 0, *(void *)(a1 + 40) message];
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK::~ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK((AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK *)v10);
}

void sub_10002D5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK::~ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK((AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_10002D61C(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK((AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK *)v10, a2, a3);
  int isARIResponseValid = ice::isARIResponseValid((ice *)v10, (const AriSdk::MsgBase *)0x49198000, v4);
  unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v10);
  [*(id *)(a1 + 32) checkErrorMsgGmid:(GMID >> 17) & 0xFFFF8000 | (GMID << 26) expectedGMID:1226407936 API_Str:*(void *)(a1 + 40)];
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK::unpack((AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK *)v10))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      CFStringRef v8 = @"Coex ARI driver(subId %u): Failed to set %s (unpack error)";
    }
    else
    {
      uint64_t v9 = *v11;
      uint64_t v7 = *(void *)(a1 + 40);
      if (v9)
      {
        +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s (error = %d)", 1, *(void *)(a1 + 40), v9 message];
        goto LABEL_6;
      }
      CFStringRef v8 = @"Coex ARI driver(subId %u): Set %s (SUCCESS)";
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v8, 1, v7);
  }
  else
  {
    +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)", 1, *(void *)(a1 + 40) message];
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK::~ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK((AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK *)v10);
}

void sub_10002D72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK::~ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK((AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_10002D74C(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK((AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK *)v10, a2, a3);
  int isARIResponseValid = ice::isARIResponseValid((ice *)v10, (const AriSdk::MsgBase *)0x491A0000, v4);
  unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v10);
  [*(id *)(a1 + 32) checkErrorMsgGmid:(GMID >> 17) & 0xFFFF8000 | (GMID << 26) expectedGMID:1226440704 API_Str:*(void *)(a1 + 40)];
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK::unpack((AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK *)v10))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      CFStringRef v8 = @"Coex ARI driver(subId %u): Failed to set %s (unpack error)";
    }
    else
    {
      uint64_t v9 = *v11;
      uint64_t v7 = *(void *)(a1 + 40);
      if (v9)
      {
        +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s (error = %d)", 1, *(void *)(a1 + 40), v9 message];
        goto LABEL_6;
      }
      CFStringRef v8 = @"Coex ARI driver(subId %u): Set %s (SUCCESS)";
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v8, 1, v7);
  }
  else
  {
    +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)", 1, *(void *)(a1 + 40) message];
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK::~ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK((AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK *)v10);
}

void sub_10002D854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK::~ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK((AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_10002DCD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _Unwind_Resume(a1);
}

void sub_10002DD60()
{
}

void sub_10002DDD8(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  AriSdk::ARI_UtaIdcSetCnvAntBlockPwrLmtConfigRspCb_SDK::ARI_UtaIdcSetCnvAntBlockPwrLmtConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetCnvAntBlockPwrLmtConfigRspCb_SDK *)v11, a2, a3);
  int isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x49138000, v4);
  unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  [*(id *)(a1 + 32) checkErrorMsgGmid:(GMID >> 17) & 0xFFFF8000 | (GMID << 26) expectedGMID:1226014720 API_Str:*(void *)(a1 + 40)];
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetCnvAntBlockPwrLmtConfigRspCb_SDK::unpack((AriSdk::ARI_UtaIdcSetCnvAntBlockPwrLmtConfigRspCb_SDK *)v11))
    {
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      CFStringRef v9 = @"Coex ARI driver(subId %u): Failed to set %s (unpack error)";
    }
    else
    {
      uint64_t v10 = *v12;
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      if (v10)
      {
        +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s (error = %d)", v7, *(void *)(a1 + 40), v10 message];
        goto LABEL_6;
      }
      CFStringRef v9 = @"Coex ARI driver(subId %u): Set %s (SUCCESS)";
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)", *(unsigned int *)(a1 + 48), *(void *)(a1 + 40) message];
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetCnvAntBlockPwrLmtConfigRspCb_SDK::~ARI_UtaIdcSetCnvAntBlockPwrLmtConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetCnvAntBlockPwrLmtConfigRspCb_SDK *)v11);
}

void sub_10002DEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetCnvAntBlockPwrLmtConfigRspCb_SDK::~ARI_UtaIdcSetCnvAntBlockPwrLmtConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetCnvAntBlockPwrLmtConfigRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_10002E2D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_10002E608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigReqV3_SDK::~ARI_UtaIdcSetCamAntBlockPwrLmtConfigReqV3_SDK((AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigReqV3_SDK *)va);

  _Unwind_Resume(a1);
}

void sub_10002E664()
{
}

void sub_10002E66C()
{
}

void sub_10002E674()
{
}

void sub_10002E6EC(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV3_SDK::ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV3_SDK((AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV3_SDK *)v11, a2, a3);
  int isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x491B0000, v4);
  unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  [*(id *)(a1 + 32) checkErrorMsgGmid:((GMID >> 17) & 0xFFFF8000 | (GMID << 26)) expectedGMID:1226506240 API_Str:*(void *)(a1 + 40)];
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV3_SDK::unpack((AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV3_SDK *)v11))
    {
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      CFStringRef v9 = @"Coex ARI driver(subId %u): Failed to set %s (unpack error)";
    }
    else
    {
      uint64_t v10 = *v12;
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      if (v10)
      {
        +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s (error = %d)", v7, *(void *)(a1 + 40), v10 message];
        goto LABEL_6;
      }
      CFStringRef v9 = @"Coex ARI driver(subId %u): Set %s (SUCCESS)";
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)", *(unsigned int *)(a1 + 48), *(void *)(a1 + 40) message];
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV3_SDK::~ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV3_SDK((AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV3_SDK *)v11);
}

void sub_10002E7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV3_SDK::~ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV3_SDK((AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV3_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_10002EE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  AriSdk::ARI_UtaIdcSetUwbAntBlockPwrLmtConfigReqV2_SDK::~ARI_UtaIdcSetUwbAntBlockPwrLmtConfigReqV2_SDK((AriSdk::ARI_UtaIdcSetUwbAntBlockPwrLmtConfigReqV2_SDK *)&a33);

  _Unwind_Resume(a1);
}

void sub_10002EED0()
{
}

void sub_10002EF48(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  AriSdk::ARI_UtaIdcSetUwbAntBlockPwrLmtConfigRspCbV2_SDK::ARI_UtaIdcSetUwbAntBlockPwrLmtConfigRspCbV2_SDK((AriSdk::ARI_UtaIdcSetUwbAntBlockPwrLmtConfigRspCbV2_SDK *)v11, a2, a3);
  int isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x49140000, v4);
  unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  [*(id *)(a1 + 32) checkErrorMsgGmid:((GMID >> 17) & 0xFFFF8000 | (GMID << 26)) expectedGMID:1226047488 API_Str:*(void *)(a1 + 40)];
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetUwbAntBlockPwrLmtConfigRspCbV2_SDK::unpack((AriSdk::ARI_UtaIdcSetUwbAntBlockPwrLmtConfigRspCbV2_SDK *)v11))
    {
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      CFStringRef v9 = @"Coex ARI driver(subId %u): Failed to set %s (unpack error)";
    }
    else
    {
      uint64_t v10 = *v12;
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      if (v10)
      {
        +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s (error = %d)", v7, *(void *)(a1 + 40), v10 message];
        goto LABEL_6;
      }
      CFStringRef v9 = @"Coex ARI driver(subId %u): Set %s (SUCCESS)";
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)", *(unsigned int *)(a1 + 48), *(void *)(a1 + 40) message];
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetUwbAntBlockPwrLmtConfigRspCbV2_SDK::~ARI_UtaIdcSetUwbAntBlockPwrLmtConfigRspCbV2_SDK((AriSdk::ARI_UtaIdcSetUwbAntBlockPwrLmtConfigRspCbV2_SDK *)v11);
}

void sub_10002F050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetUwbAntBlockPwrLmtConfigRspCbV2_SDK::~ARI_UtaIdcSetUwbAntBlockPwrLmtConfigRspCbV2_SDK((AriSdk::ARI_UtaIdcSetUwbAntBlockPwrLmtConfigRspCbV2_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_10002F450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Unwind_Resume(a1);
}

void sub_10002F4D4()
{
}

void sub_10002F54C(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  AriSdk::ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigRspCb_SDK::ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigRspCb_SDK *)v11, a2, a3);
  int isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x49178000, v4);
  unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  [*(id *)(a1 + 32) checkErrorMsgGmid:(GMID >> 17) & 0xFFFF8000 | (GMID << 26) expectedGMID:1226276864 API_Str:*(void *)(a1 + 40)];
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigRspCb_SDK::unpack((AriSdk::ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigRspCb_SDK *)v11))
    {
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      CFStringRef v9 = @"Coex ARI driver(subId %u): Failed to set %s (unpack error)";
    }
    else
    {
      uint64_t v10 = *v12;
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      if (v10)
      {
        +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s (error = %d)", v7, *(void *)(a1 + 40), v10 message];
        goto LABEL_6;
      }
      CFStringRef v9 = @"Coex ARI driver(subId %u): Set %s (SUCCESS)";
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)", *(unsigned int *)(a1 + 48), *(void *)(a1 + 40) message];
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigRspCb_SDK::~ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigRspCb_SDK *)v11);
}

void sub_10002F65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigRspCb_SDK::~ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_10002F814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  AriSdk::ARI_UtaIdcSetTimeSharingConfigReq_SDK::~ARI_UtaIdcSetTimeSharingConfigReq_SDK((AriSdk::ARI_UtaIdcSetTimeSharingConfigReq_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_10002F834()
{
}

void sub_10002F8B0(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  AriSdk::ARI_UtaIdcSetTimeSharingConfigRspCb_SDK::ARI_UtaIdcSetTimeSharingConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetTimeSharingConfigRspCb_SDK *)v11, a2, a3);
  int isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x490F0000, v4);
  unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  [*(id *)(a1 + 32) checkErrorMsgGmid:(GMID >> 17) & 0xFFFF8000 | (GMID << 26) expectedGMID:1225719808 API_Str:*(void *)(a1 + 40)];
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetTimeSharingConfigRspCb_SDK::unpack((AriSdk::ARI_UtaIdcSetTimeSharingConfigRspCb_SDK *)v11))
    {
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      CFStringRef v9 = @"Coex ARI driver(subId %u): Failed to set %s (unpack error)";
    }
    else
    {
      uint64_t v10 = *v12;
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      if (v10)
      {
        +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s (error = %d)", v7, *(void *)(a1 + 40), v10 message];
        goto LABEL_6;
      }
      CFStringRef v9 = @"Coex ARI driver(subId %u): Set %s (SUCCESS)";
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)", *(unsigned int *)(a1 + 48), *(void *)(a1 + 40) message];
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetTimeSharingConfigRspCb_SDK::~ARI_UtaIdcSetTimeSharingConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetTimeSharingConfigRspCb_SDK *)v11);
}

void sub_10002F9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetTimeSharingConfigRspCb_SDK::~ARI_UtaIdcSetTimeSharingConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetTimeSharingConfigRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_10002FD1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Unwind_Resume(a1);
}

void sub_10002FD94(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  AriSdk::ARI_UtaIdcSetTimeSharingConfigRspCb_SDK::ARI_UtaIdcSetTimeSharingConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetTimeSharingConfigRspCb_SDK *)v11, a2, a3);
  int isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x490F0000, v4);
  unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  [*(id *)(a1 + 32) checkErrorMsgGmid:((GMID >> 17) & 0xFFFF8000 | (GMID << 26)) expectedGMID:1225719808 API_Str:*(void *)(a1 + 40)];
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetTimeSharingConfigRspCb_SDK::unpack((AriSdk::ARI_UtaIdcSetTimeSharingConfigRspCb_SDK *)v11))
    {
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      CFStringRef v9 = @"Coex ARI driver(subId %u): Failed to set %s (unpack error)";
    }
    else
    {
      uint64_t v10 = *v12;
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      if (v10)
      {
        +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s (error = %d)", v7, *(void *)(a1 + 40), v10 message];
        goto LABEL_6;
      }
      CFStringRef v9 = @"Coex ARI driver(subId %u): Set %s (SUCCESS)";
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)", *(unsigned int *)(a1 + 48), *(void *)(a1 + 40) message];
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetTimeSharingConfigRspCb_SDK::~ARI_UtaIdcSetTimeSharingConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetTimeSharingConfigRspCb_SDK *)v11);
}

void sub_10002FE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetTimeSharingConfigRspCb_SDK::~ARI_UtaIdcSetTimeSharingConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetTimeSharingConfigRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_1000300DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  _Unwind_Resume(a1);
}

void sub_10003032C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  _Unwind_Resume(a1);
}

void sub_100030778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  AriSdk::ARI_UtaIdcSetCriticalCarrierConfigReqV2_SDK::~ARI_UtaIdcSetCriticalCarrierConfigReqV2_SDK((AriSdk::ARI_UtaIdcSetCriticalCarrierConfigReqV2_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100030798()
{
}

void sub_10003080C(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  AriSdk::ARI_UtaIdcSetCriticalCarrierConfigRspCbV2_SDK::ARI_UtaIdcSetCriticalCarrierConfigRspCbV2_SDK((AriSdk::ARI_UtaIdcSetCriticalCarrierConfigRspCbV2_SDK *)v11, a2, a3);
  int isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x49168000, v4);
  unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  [*(id *)(a1 + 32) checkErrorMsgGmid:(GMID >> 17) & 0xFFFF8000 | (GMID << 26) expectedGMID:1226211328 API_Str:*(void *)(a1 + 40)];
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetCriticalCarrierConfigRspCbV2_SDK::unpack((AriSdk::ARI_UtaIdcSetCriticalCarrierConfigRspCbV2_SDK *)v11))
    {
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      CFStringRef v9 = @"Coex ARI driver(subId %u): Failed to set %s (unpack error)";
    }
    else
    {
      uint64_t v10 = *v12;
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      if (v10)
      {
        +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s (error = %d)", v7, *(void *)(a1 + 40), v10 message];
        goto LABEL_6;
      }
      CFStringRef v9 = @"Coex ARI driver(subId %u): Set %s (SUCCESS)";
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)", *(unsigned int *)(a1 + 48), *(void *)(a1 + 40) message];
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetCriticalCarrierConfigRspCbV2_SDK::~ARI_UtaIdcSetCriticalCarrierConfigRspCbV2_SDK((AriSdk::ARI_UtaIdcSetCriticalCarrierConfigRspCbV2_SDK *)v11);
}

void sub_10003091C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetCriticalCarrierConfigRspCbV2_SDK::~ARI_UtaIdcSetCriticalCarrierConfigRspCbV2_SDK((AriSdk::ARI_UtaIdcSetCriticalCarrierConfigRspCbV2_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100030D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  AriSdk::ARI_UtaIdcSetTxBlankingConfigReq_SDK::~ARI_UtaIdcSetTxBlankingConfigReq_SDK((AriSdk::ARI_UtaIdcSetTxBlankingConfigReq_SDK *)&a37);
  AriSdk::ARI_UtaIdcSetTxPowerLimitingConfigReq_SDK::~ARI_UtaIdcSetTxPowerLimitingConfigReq_SDK((AriSdk::ARI_UtaIdcSetTxPowerLimitingConfigReq_SDK *)(v38 - 224));

  _Unwind_Resume(a1);
}

void sub_100030E00()
{
}

void sub_100030E74()
{
}

void sub_100030EE0(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  AriSdk::ARI_UtaIdcSetTxPowerLimitingConfigRspCb_SDK::ARI_UtaIdcSetTxPowerLimitingConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetTxPowerLimitingConfigRspCb_SDK *)v11, a2, a3);
  int isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x490D0000, v4);
  unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  [*(id *)(a1 + 32) checkErrorMsgGmid:(GMID >> 17) & 0xFFFF8000 | (GMID << 26) expectedGMID:1225588736 API_Str:*(void *)(a1 + 40)];
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetTxPowerLimitingConfigRspCb_SDK::unpack((AriSdk::ARI_UtaIdcSetTxPowerLimitingConfigRspCb_SDK *)v11))
    {
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      CFStringRef v9 = @"Coex ARI driver(subId %u): Failed to set %s (unpack error)";
    }
    else
    {
      uint64_t v10 = *v12;
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      if (v10)
      {
        +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s (error = %d)", v7, *(void *)(a1 + 40), v10 message];
        goto LABEL_6;
      }
      CFStringRef v9 = @"Coex ARI driver(subId %u): Set %s (SUCCESS)";
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)", *(unsigned int *)(a1 + 48), *(void *)(a1 + 40) message];
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetTxPowerLimitingConfigRspCb_SDK::~ARI_UtaIdcSetTxPowerLimitingConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetTxPowerLimitingConfigRspCb_SDK *)v11);
}

void sub_100030FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetTxPowerLimitingConfigRspCb_SDK::~ARI_UtaIdcSetTxPowerLimitingConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetTxPowerLimitingConfigRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100031008(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  AriSdk::ARI_UtaIdcSetTxBlankingConfigRspCb_SDK::ARI_UtaIdcSetTxBlankingConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetTxBlankingConfigRspCb_SDK *)v11, a2, a3);
  int isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x490C8000, v4);
  unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  [*(id *)(a1 + 32) checkErrorMsgGmid:((GMID >> 17) & 0xFFFF8000 | (GMID << 26)) expectedGMID:1225555968 API_Str:*(void *)(a1 + 40)];
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetTxBlankingConfigRspCb_SDK::unpack((AriSdk::ARI_UtaIdcSetTxBlankingConfigRspCb_SDK *)v11))
    {
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      CFStringRef v9 = @"Coex ARI driver(subId %u): Failed to set %s (unpack error)";
    }
    else
    {
      uint64_t v10 = *v12;
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      if (v10)
      {
        +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s (error = %d)", v7, *(void *)(a1 + 40), v10 message];
        goto LABEL_6;
      }
      CFStringRef v9 = @"Coex ARI driver(subId %u): Set %s (SUCCESS)";
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)", *(unsigned int *)(a1 + 48), *(void *)(a1 + 40) message];
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetTxBlankingConfigRspCb_SDK::~ARI_UtaIdcSetTxBlankingConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetTxBlankingConfigRspCb_SDK *)v11);
}

void sub_100031118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetTxBlankingConfigRspCb_SDK::~ARI_UtaIdcSetTxBlankingConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetTxBlankingConfigRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100031318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  AriSdk::ARI_UtaIdcRTSetScanFreqReqV2_SDK::~ARI_UtaIdcRTSetScanFreqReqV2_SDK((AriSdk::ARI_UtaIdcRTSetScanFreqReqV2_SDK *)va);

  _Unwind_Resume(a1);
}

void sub_100031360()
{
}

void sub_1000313FC(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  AriSdk::ARI_UtaIdcRTSetScanFreqRspCbV2_SDK::ARI_UtaIdcRTSetScanFreqRspCbV2_SDK((AriSdk::ARI_UtaIdcRTSetScanFreqRspCbV2_SDK *)v11, a2, a3);
  int isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x49158000, v4);
  unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  [*(id *)(a1 + 32) checkErrorMsgGmid:((GMID >> 17) & 0xFFFF8000 | (GMID << 26)) expectedGMID:1226145792 API_Str:*(void *)(a1 + 40)];
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcRTSetScanFreqRspCbV2_SDK::unpack((AriSdk::ARI_UtaIdcRTSetScanFreqRspCbV2_SDK *)v11))
    {
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      CFStringRef v9 = @"Coex ARI driver(subId %u): Failed to set %s (unpack error)";
    }
    else
    {
      uint64_t v10 = *v12;
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      if (v10)
      {
        +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s (error = %d)", v7, *(void *)(a1 + 40), v10 message];
        goto LABEL_6;
      }
      CFStringRef v9 = @"Coex ARI driver(subId %u): Set %s (SUCCESS)";
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)", *(unsigned int *)(a1 + 48), *(void *)(a1 + 40) message];
  }
LABEL_6:
  AriSdk::ARI_UtaIdcRTSetScanFreqRspCbV2_SDK::~ARI_UtaIdcRTSetScanFreqRspCbV2_SDK((AriSdk::ARI_UtaIdcRTSetScanFreqRspCbV2_SDK *)v11);
}

void sub_10003150C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  AriSdk::ARI_UtaIdcRTSetScanFreqRspCbV2_SDK::~ARI_UtaIdcRTSetScanFreqRspCbV2_SDK((AriSdk::ARI_UtaIdcRTSetScanFreqRspCbV2_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100031880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  AriSdk::ARI_UtaIdcSetLaaConfigReq_SDK::~ARI_UtaIdcSetLaaConfigReq_SDK((AriSdk::ARI_UtaIdcSetLaaConfigReq_SDK *)va);

  _Unwind_Resume(a1);
}

void sub_1000318BC()
{
}

void sub_100031928(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  AriSdk::ARI_UtaIdcSetLaaConfigRspCb_SDK::ARI_UtaIdcSetLaaConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetLaaConfigRspCb_SDK *)v11, a2, a3);
  int isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x490E0000, v4);
  unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  [*(id *)(a1 + 32) checkErrorMsgGmid:((GMID >> 17) & 0xFFFF8000 | (GMID << 26)) expectedGMID:1225654272 API_Str:*(void *)(a1 + 40)];
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetLaaConfigRspCb_SDK::unpack((AriSdk::ARI_UtaIdcSetLaaConfigRspCb_SDK *)v11))
    {
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      CFStringRef v9 = @"Coex ARI driver(subId %u): Failed to set %s (unpack error)";
    }
    else
    {
      uint64_t v10 = *v12;
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      if (v10)
      {
        +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s (error = %d)", v7, *(void *)(a1 + 40), v10 message];
        goto LABEL_6;
      }
      CFStringRef v9 = @"Coex ARI driver(subId %u): Set %s (SUCCESS)";
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)", *(unsigned int *)(a1 + 48), *(void *)(a1 + 40) message];
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetLaaConfigRspCb_SDK::~ARI_UtaIdcSetLaaConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetLaaConfigRspCb_SDK *)v11);
}

void sub_100031A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetLaaConfigRspCb_SDK::~ARI_UtaIdcSetLaaConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetLaaConfigRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100031DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  AriSdk::ARI_UtaIdcSetLaaConfigReq_SDK::~ARI_UtaIdcSetLaaConfigReq_SDK((AriSdk::ARI_UtaIdcSetLaaConfigReq_SDK *)va);

  _Unwind_Resume(a1);
}

void sub_100031DE8(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  AriSdk::ARI_UtaIdcSetLaaConfigRspCb_SDK::ARI_UtaIdcSetLaaConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetLaaConfigRspCb_SDK *)v11, a2, a3);
  int isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x490E0000, v4);
  unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  [*(id *)(a1 + 32) checkErrorMsgGmid:(GMID >> 17) & 0xFFFF8000 | (GMID << 26) expectedGMID:1225654272 API_Str:*(void *)(a1 + 40)];
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetLaaConfigRspCb_SDK::unpack((AriSdk::ARI_UtaIdcSetLaaConfigRspCb_SDK *)v11))
    {
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      CFStringRef v9 = @"Coex ARI driver(subId %u): Failed to set %s (unpack error)";
    }
    else
    {
      uint64_t v10 = *v12;
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      if (v10)
      {
        +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s (error = %d)", v7, *(void *)(a1 + 40), v10 message];
        goto LABEL_6;
      }
      CFStringRef v9 = @"Coex ARI driver(subId %u): Set %s (SUCCESS)";
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)", *(unsigned int *)(a1 + 48), *(void *)(a1 + 40) message];
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetLaaConfigRspCb_SDK::~ARI_UtaIdcSetLaaConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetLaaConfigRspCb_SDK *)v11);
}

void sub_100031EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetLaaConfigRspCb_SDK::~ARI_UtaIdcSetLaaConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetLaaConfigRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100032184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100032338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000326C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000327D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  AriSdk::ARI_UtaIdcGetCellConfigReq_SDK::~ARI_UtaIdcGetCellConfigReq_SDK((AriSdk::ARI_UtaIdcGetCellConfigReq_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_1000327E8(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  AriSdk::ARI_UtaIdcGetCellConfigRspCb_SDK::ARI_UtaIdcGetCellConfigRspCb_SDK((AriSdk::ARI_UtaIdcGetCellConfigRspCb_SDK *)v9, a2, a3);
  if (ice::isARIResponseValid((ice *)v9, (const AriSdk::MsgBase *)0x490A0000, v4))
  {
    if (AriSdk::ARI_UtaIdcGetCellConfigRspCb_SDK::unpack((AriSdk::ARI_UtaIdcGetCellConfigRspCb_SDK *)v9))
    {
      CFStringRef v5 = @"Coex ARI driver: Failed to get cell config (unpack error)";
    }
    else
    {
      if (!*v11)
      {
        +[WCM_Logging logLevel:3 message:@"Coex ARI driver: get cell config (SUCCESS)"];
        uint64_t v6 = v12;
        uint64_t v7 = *v10;
        +[WCM_Logging logLevel:3, @"Coex ARI driver: UtaIdcGetCellConfigRspCb SubId=%u\n", v7 message];
        uint64_t v8 = [*(id *)(a1 + 32) assembleCellularConfigXpcMsg:v6];
        [*(id *)(a1 + 32) sendMessage:300 withArgs:v8 withSubId:v7];

        goto LABEL_8;
      }
      CFStringRef v5 = @"Coex ARI driver: Failed to get cell config (result error)";
    }
    +[WCM_Logging logLevel:3 message:v5];
  }
  else
  {
    +[WCM_Logging logLevel:3 message:@"Coex ARI driver: Failed to get cell config"];
  }
LABEL_8:
  AriSdk::ARI_UtaIdcGetCellConfigRspCb_SDK::~ARI_UtaIdcGetCellConfigRspCb_SDK((AriSdk::ARI_UtaIdcGetCellConfigRspCb_SDK *)v9);
}

void sub_1000328FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  AriSdk::ARI_UtaIdcGetCellConfigRspCb_SDK::~ARI_UtaIdcGetCellConfigRspCb_SDK((AriSdk::ARI_UtaIdcGetCellConfigRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100032A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);

  AriSdk::ARI_UtaIdcCellConfigEventIndCb_SDK::~ARI_UtaIdcCellConfigEventIndCb_SDK((AriSdk::ARI_UtaIdcCellConfigEventIndCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100032C38(_Unwind_Exception *a1)
{
  AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK::~ARI_IBIMsAccCurrentFreqInfoReq_SDK((AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK *)(v1 - 136));
  _Unwind_Resume(a1);
}

void sub_100032C60(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK((AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *)v10, a2, a3);
  int isARIResponseValid = ice::isARIResponseValid((ice *)v10, (const AriSdk::MsgBase *)0x25100000, v4);
  unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v10);
  [*(id *)(a1 + 32) checkErrorMsgGmid:(GMID >> 17) & 0xFFFF8000 | (GMID << 26) expectedGMID:621805568 API_Str:*(void *)(a1 + 40)];
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::unpack((AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *)v10))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      CFStringRef v8 = @"Coex ARI driver(subId %u): Failed to set %s (unpack error)";
    }
    else
    {
      uint64_t v9 = *v11;
      uint64_t v7 = *(void *)(a1 + 40);
      if (v9)
      {
        +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s (error = %d)", 0, *(void *)(a1 + 40), v9 message];
        goto LABEL_6;
      }
      CFStringRef v8 = @"Coex ARI driver(subId %u): Set %s (SUCCESS)";
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v8, 0, v7);
  }
  else
  {
    +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)", 0, *(void *)(a1 + 40) message];
  }
LABEL_6:
  AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::~ARI_IBIMsAccCurrentFreqInfoRspCb_SDK((AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *)v10);
}

void sub_100032D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::~ARI_IBIMsAccCurrentFreqInfoRspCb_SDK((AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100032D7C(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK((AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *)v10, a2, a3);
  int isARIResponseValid = ice::isARIResponseValid((ice *)v10, (const AriSdk::MsgBase *)0x25100000, v4);
  unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v10);
  [*(id *)(a1 + 32) checkErrorMsgGmid:(GMID >> 17) & 0xFFFF8000 | (GMID << 26) expectedGMID:621805568 API_Str:*(void *)(a1 + 40)];
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::unpack((AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *)v10))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      CFStringRef v8 = @"Coex ARI driver(subId %u): Failed to set %s (unpack error)";
    }
    else
    {
      uint64_t v9 = *v11;
      uint64_t v7 = *(void *)(a1 + 40);
      if (v9)
      {
        +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s (error = %d)", 1, *(void *)(a1 + 40), v9 message];
        goto LABEL_6;
      }
      CFStringRef v8 = @"Coex ARI driver(subId %u): Set %s (SUCCESS)";
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v8, 1, v7);
  }
  else
  {
    +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)", 1, *(void *)(a1 + 40) message];
  }
LABEL_6:
  AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::~ARI_IBIMsAccCurrentFreqInfoRspCb_SDK((AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *)v10);
}

void sub_100032E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::~ARI_IBIMsAccCurrentFreqInfoRspCb_SDK((AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100032EA4(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK((AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *)v10, a2, a3);
  int isARIResponseValid = ice::isARIResponseValid((ice *)v10, (const AriSdk::MsgBase *)0x25100000, v4);
  unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v10);
  [*(id *)(a1 + 32) checkErrorMsgGmid:((GMID >> 17) & 0xFFFF8000 | (GMID << 26)) expectedGMID:621805568 API_Str:*(void *)(a1 + 40)];
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::unpack((AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *)v10))
    {
      +[WCM_Logging logLevel:3, @"Coex ARI driver: Failed to set %s (unpack error)", *(void *)(a1 + 40) message];
    }
    else
    {
      uint64_t v7 = *v12;
      if (v7)
      {
        +[WCM_Logging logLevel:3, @"Coex ARI driver: Failed to set %s (error = %d)", *(void *)(a1 + 40), v7 message];
      }
      else
      {
        +[WCM_Logging logLevel:3, @"Coex ARI driver: Set %s (SUCCESS)", *(void *)(a1 + 40) message];
        uint64_t v8 = *v11;
        uint64_t v9 = [*(id *)(a1 + 32) assembleDesenseCellularConfigXpcMsgwithDownlinkFreq:v13 DownlinkFreqExt:v19 UlFreq:v14 UplinkFreqExt:v20 SearchFreq:v15 HoppingFreq:v16 NeighborFreq:v17 RPLMNFreq:v18];
        [*(id *)(a1 + 32) sendMessage:399 withArgs:v9 withSubId:v8];
      }
    }
  }
  else
  {
    +[WCM_Logging logLevel:3, @"Coex ARI driver: Failed to set %s, invalid response (NACK or wrong GMID)", *(void *)(a1 + 40) message];
  }
  AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::~ARI_IBIMsAccCurrentFreqInfoRspCb_SDK((AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *)v10);
}

void sub_100032FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);

  AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::~ARI_IBIMsAccCurrentFreqInfoRspCb_SDK((AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100033128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1000334F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_100033678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);

  AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK::~ARI_IBIMsAccCurrentFreqInfoIndCb_SDK((AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_1000346B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  AriSdk::ARI_UtaIdcSetTunerArbitrationConfigReqV2_SDK::~ARI_UtaIdcSetTunerArbitrationConfigReqV2_SDK((AriSdk::ARI_UtaIdcSetTunerArbitrationConfigReqV2_SDK *)&a25);
  AriSdk::ARI_UtaIdcSetTunerArbitrationConfigReqV2_SDK::~ARI_UtaIdcSetTunerArbitrationConfigReqV2_SDK((AriSdk::ARI_UtaIdcSetTunerArbitrationConfigReqV2_SDK *)&a41);
  AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigReq_SDK::~ARI_UtaIdcSetCellImdGnssMitigationConfigReq_SDK((AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigReq_SDK *)&a57);
  AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigReq_SDK::~ARI_UtaIdcSetCellImdGnssMitigationConfigReq_SDK((AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigReq_SDK *)&STACK[0x200]);

  _Unwind_Resume(a1);
}

void sub_10003492C()
{
}

void sub_1000349A4(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK *)v10, a2, a3);
  int isARIResponseValid = ice::isARIResponseValid((ice *)v10, (const AriSdk::MsgBase *)0x49188000, v4);
  unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v10);
  [*(id *)(a1 + 32) checkErrorMsgGmid:((GMID >> 17) & 0xFFFF8000 | (GMID << 26)) expectedGMID:1226342400 API_Str:*(void *)(a1 + 40)];
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK::unpack((AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK *)v10))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      CFStringRef v8 = @"Coex ARI driver(subId %u): Failed to set %s (unpack error)";
    }
    else
    {
      uint64_t v9 = *v11;
      uint64_t v7 = *(void *)(a1 + 40);
      if (v9)
      {
        +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s (error = %d)", 0, *(void *)(a1 + 40), v9 message];
        goto LABEL_6;
      }
      CFStringRef v8 = @"Coex ARI driver(subId %u): Set %s (SUCCESS)";
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v8, 0, v7);
  }
  else
  {
    +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)", 0, *(void *)(a1 + 40) message];
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK::~ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK *)v10);
}

void sub_100034AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK::~ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100034AC8(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK *)v10, a2, a3);
  int isARIResponseValid = ice::isARIResponseValid((ice *)v10, (const AriSdk::MsgBase *)0x49188000, v4);
  unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v10);
  [*(id *)(a1 + 32) checkErrorMsgGmid:(GMID >> 17) & 0xFFFF8000 | (GMID << 26) expectedGMID:1226342400 API_Str:*(void *)(a1 + 40)];
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK::unpack((AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK *)v10))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      CFStringRef v8 = @"Coex ARI driver(subId %u): Failed to set %s (unpack error)";
    }
    else
    {
      uint64_t v9 = *v11;
      uint64_t v7 = *(void *)(a1 + 40);
      if (v9)
      {
        +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s (error = %d)", 1, *(void *)(a1 + 40), v9 message];
        goto LABEL_6;
      }
      CFStringRef v8 = @"Coex ARI driver(subId %u): Set %s (SUCCESS)";
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v8, 1, v7);
  }
  else
  {
    +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)", 1, *(void *)(a1 + 40) message];
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK::~ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK *)v10);
}

void sub_100034BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK::~ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100034BF8(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK((AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK *)v10, a2, a3);
  int isARIResponseValid = ice::isARIResponseValid((ice *)v10, (const AriSdk::MsgBase *)0x491C8000, v4);
  unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v10);
  [*(id *)(a1 + 32) checkErrorMsgGmid:((GMID >> 17) & 0xFFFF8000 | (GMID << 26)) expectedGMID:1226604544 API_Str:*(void *)(a1 + 40)];
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK::unpack((AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK *)v10))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      CFStringRef v8 = @"Coex ARI driver(subId %u): Failed to set %s (unpack error)";
    }
    else
    {
      uint64_t v9 = *v11;
      uint64_t v7 = *(void *)(a1 + 40);
      if (v9)
      {
        +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s (error = %d)", 0, *(void *)(a1 + 40), v9 message];
        goto LABEL_6;
      }
      CFStringRef v8 = @"Coex ARI driver(subId %u): Set %s (SUCCESS)";
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v8, 0, v7);
  }
  else
  {
    +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)", 0, *(void *)(a1 + 40) message];
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK::~ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK((AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK *)v10);
}

void sub_100034CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK::~ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK((AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100034D1C(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK((AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK *)v10, a2, a3);
  int isARIResponseValid = ice::isARIResponseValid((ice *)v10, (const AriSdk::MsgBase *)0x491C8000, v4);
  unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v10);
  [*(id *)(a1 + 32) checkErrorMsgGmid:(GMID >> 17) & 0xFFFF8000 | (GMID << 26) expectedGMID:1226604544 API_Str:*(void *)(a1 + 40)];
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK::unpack((AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK *)v10))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      CFStringRef v8 = @"Coex ARI driver(subId %u): Failed to set %s (unpack error)";
    }
    else
    {
      uint64_t v9 = *v11;
      uint64_t v7 = *(void *)(a1 + 40);
      if (v9)
      {
        +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s (error = %d)", 1, *(void *)(a1 + 40), v9 message];
        goto LABEL_6;
      }
      CFStringRef v8 = @"Coex ARI driver(subId %u): Set %s (SUCCESS)";
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v8, 1, v7);
  }
  else
  {
    +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)", 1, *(void *)(a1 + 40) message];
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK::~ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK((AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK *)v10);
}

void sub_100034E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK::~ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK((AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100035384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _Unwind_Resume(a1);
}

void sub_1000353DC()
{
}

void sub_100035454(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  AriSdk::ARI_UtaIdcSetUwbRtActivityMitigationConfigRspCbV2_SDK::ARI_UtaIdcSetUwbRtActivityMitigationConfigRspCbV2_SDK((AriSdk::ARI_UtaIdcSetUwbRtActivityMitigationConfigRspCbV2_SDK *)v11, a2, a3);
  int isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x491C0000, v4);
  unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  [*(id *)(a1 + 32) checkErrorMsgGmid:(GMID >> 17) & 0xFFFF8000 | (GMID << 26) expectedGMID:1226571776 API_Str:*(void *)(a1 + 40)];
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetUwbRtActivityMitigationConfigRspCbV2_SDK::unpack((AriSdk::ARI_UtaIdcSetUwbRtActivityMitigationConfigRspCbV2_SDK *)v11))
    {
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      CFStringRef v9 = @"Coex ARI driver(subId %u): Failed to set %s (unpack error)";
    }
    else
    {
      uint64_t v10 = *v12;
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      if (v10)
      {
        +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s (error = %d)", v7, *(void *)(a1 + 40), v10 message];
        goto LABEL_6;
      }
      CFStringRef v9 = @"Coex ARI driver(subId %u): Set %s (SUCCESS)";
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:3, @"Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)", *(unsigned int *)(a1 + 48), *(void *)(a1 + 40) message];
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetUwbRtActivityMitigationConfigRspCbV2_SDK::~ARI_UtaIdcSetUwbRtActivityMitigationConfigRspCbV2_SDK((AriSdk::ARI_UtaIdcSetUwbRtActivityMitigationConfigRspCbV2_SDK *)v11);
}

void sub_10003555C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetUwbRtActivityMitigationConfigRspCbV2_SDK::~ARI_UtaIdcSetUwbRtActivityMitigationConfigRspCbV2_SDK((AriSdk::ARI_UtaIdcSetUwbRtActivityMitigationConfigRspCbV2_SDK *)va);
  _Unwind_Resume(a1);
}

void *sub_100035610@<X0>(id *a1@<X1>, OS_dispatch_object *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x28uLL);
  uint64_t result = sub_100035674(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_100035660(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100035674(void *a1, id *a2, OS_dispatch_object *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10020D8B8;
  sub_100035770((uint64_t)&v5, a1 + 24, a2, a3);
  return a1;
}

void sub_1000356D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000356E8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10020D8B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100035708(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10020D8B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10003575C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    sub_1000357EC(v1);
  }
}

void sub_100035770(uint64_t a1, int a2, id *a3, OS_dispatch_object *a4)
{
  id v8 = *a3;
  v6.fObj.fObj = a4;
  sub_1000D54C8(a2, (int)&v8, v6);
  id v7 = v8;
  id v8 = 0;
}

void sub_1000357CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1000357EC(std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void sub_100035860()
{
  v1[0] = &off_10023B580;
  v1[1] = &off_10023B5B0;
  v2[0] = &off_10023B598;
  v2[1] = &off_10023B598;
  v1[2] = &off_10023B5C8;
  v1[3] = &off_10023B5E0;
  v2[2] = &off_10023B598;
  v2[3] = &off_10023B5F8;
  v1[4] = &off_10023B610;
  v1[5] = &off_10023B628;
  v2[4] = &off_10023B5F8;
  v2[5] = &off_10023B5F8;
  v1[6] = &off_10023B640;
  v1[7] = &off_10023B658;
  v2[6] = &off_10023B5F8;
  v2[7] = &off_10023B5F8;
  v1[8] = &off_10023B670;
  v1[9] = &off_10023B688;
  v2[8] = &off_10023B5F8;
  v2[9] = &off_10023B5F8;
  v1[10] = &off_10023B6A0;
  v1[11] = &off_10023B6B8;
  v2[10] = &off_10023B5F8;
  v2[11] = &off_10023B5F8;
  v1[12] = &off_10023B6D0;
  v1[13] = &off_10023B6E8;
  v2[12] = &off_10023B5F8;
  v2[13] = &off_10023B700;
  v1[14] = &off_10023B718;
  v1[15] = &off_10023B748;
  v2[14] = &off_10023B730;
  v2[15] = &off_10023B760;
  v1[16] = &off_10023B778;
  v1[17] = &off_10023B790;
  v2[16] = &off_10023B760;
  v2[17] = &off_10023B7A8;
  v1[18] = &off_10023B7C0;
  v1[19] = &off_10023B7F0;
  v2[18] = &off_10023B7D8;
  v2[19] = &off_10023B808;
  v1[20] = &off_10023B820;
  v1[21] = &off_10023B838;
  v2[20] = &off_10023B808;
  v2[21] = &off_10023B850;
  v1[22] = &off_10023B868;
  v1[23] = &off_10023B898;
  v2[22] = &off_10023B880;
  v2[23] = &off_10023B880;
  qword_10027CDD8 = +[NSDictionary dictionaryWithObjects:v2 forKeys:v1 count:24];
}

void sub_100035AC4(void *a1, char *newValue)
{
  if (a1) {
    objc_setProperty_nonatomic(a1, newValue, newValue, 8);
  }
}

void sub_100035ADC(void *a1, char *newValue)
{
  if (a1) {
    objc_setProperty_nonatomic(a1, newValue, newValue, 16);
  }
}

id *sub_100035AF4(id *result)
{
  if (result) {
    return (id *)[result[1] removeAllObjects];
  }
  return result;
}

void *sub_100035B0C(void *result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    id v4 = (id)result[1];
    if (!v4)
    {
      id v4 = objc_alloc_init((Class)NSMutableArray);
      v3[1] = v4;
    }
    return [v4 addObject:a2];
  }
  return result;
}

id *sub_100035B78(id *result)
{
  if (result) {
    return (id *)[result[1] count];
  }
  return result;
}

id *sub_100035B90(id *result, uint64_t a2)
{
  if (result) {
    return (id *)[result[1] objectAtIndex:a2];
  }
  return result;
}

uint64_t sub_100035BAC()
{
  self;

  return objc_opt_class();
}

id *sub_100035BDC(id *result)
{
  if (result) {
    return (id *)[result[2] removeAllObjects];
  }
  return result;
}

void *sub_100035BF4(void *result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    id v4 = (id)result[2];
    if (!v4)
    {
      id v4 = objc_alloc_init((Class)NSMutableArray);
      v3[2] = v4;
    }
    return [v4 addObject:a2];
  }
  return result;
}

id *sub_100035C60(id *result)
{
  if (result) {
    return (id *)[result[2] count];
  }
  return result;
}

id *sub_100035C78(id *result, uint64_t a2)
{
  if (result) {
    return (id *)[result[2] objectAtIndex:a2];
  }
  return result;
}

uint64_t sub_100035F54(void *a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    if ((v6 >> 3) == 2)
    {
      uint64_t v12 = objc_alloc_init(CellPerformanceMetrics);
      sub_100035BF4(a1, (uint64_t)v12);
    }
    else
    {
      if ((v6 >> 3) != 1)
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
      }
      uint64_t v12 = objc_alloc_init(CellPerformanceMetrics);
      sub_100035B0C(a1, (uint64_t)v12);
    }

    if (!PBReaderPlaceMark() || (sub_100038C24((uint64_t)v12, a2) & 1) == 0) {
      return 0;
    }
    PBReaderRecallMark();
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void *sub_1000362E4(void *result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    if ([(id)result[1] count])
    {
      if (a2) {
        [*(id *)(a2 + 8) removeAllObjects];
      }
      char v4 = (char *)[(id)v3[1] count];
      if (v4)
      {
        unsigned int v5 = v4;
        for (uint64_t i = 0; i != v5; ++i)
          sub_100035B0C((void *)a2, (uint64_t)[(id)v3[1] objectAtIndex:i]);
      }
    }
    uint64_t result = [(id)v3[2] count];
    if (result)
    {
      if (a2) {
        [*(id *)(a2 + 16) removeAllObjects];
      }
      uint64_t result = [(id)v3[2] count];
      if (result)
      {
        unint64_t v7 = result;
        for (j = 0; j != v7; j = (void *)((char *)j + 1))
          uint64_t result = sub_100035BF4((void *)a2, (uint64_t)[(id)v3[2] objectAtIndex:j]);
      }
    }
  }
  return result;
}

void *sub_100036698(void *result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    char v4 = *(void **)(a2 + 8);
    id v5 = [v4 countByEnumeratingWithState:&v17 objects:v22 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v18;
      do
      {
        for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v18 != v7) {
            objc_enumerationMutation(v4);
          }
          sub_100035B0C(v3, *(void *)(*((void *)&v17 + 1) + 8 * i));
        }
        id v6 = [v4 countByEnumeratingWithState:&v17 objects:v22 count:16];
      }
      while (v6);
    }
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    CFStringRef v9 = *(void **)(a2 + 16);
    uint64_t result = [v9 countByEnumeratingWithState:&v13 objects:v21 count:16];
    if (result)
    {
      int v10 = result;
      uint64_t v11 = *(void *)v14;
      do
      {
        uint64_t v12 = 0;
        do
        {
          if (*(void *)v14 != v11) {
            objc_enumerationMutation(v9);
          }
          sub_100035BF4(v3, *(void *)(*((void *)&v13 + 1) + 8 * (void)v12));
          uint64_t v12 = (void *)((char *)v12 + 1);
        }
        while (v10 != v12);
        uint64_t result = [v9 countByEnumeratingWithState:&v13 objects:v21 count:16];
        int v10 = result;
      }
      while (result);
    }
  }
  return result;
}

uint64_t sub_10003682C(uint64_t result)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

uint64_t sub_100036840(uint64_t result)
{
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

uint64_t sub_100036854(uint64_t result)
{
  if (result)
  {
    if ((*(_WORD *)(result + 44) & 0x40) != 0) {
      return *(unsigned int *)(result + 32);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100036880(uint64_t result, int a2)
{
  if (result)
  {
    *(_WORD *)(result + 44) |= 0x40u;
    *(_DWORD *)(result + 32) = a2;
  }
  return result;
}

uint64_t sub_1000368A8(uint64_t result, int a2)
{
  if (result)
  {
    if (a2) {
      __int16 v2 = 64;
    }
    else {
      __int16 v2 = 0;
    }
    *(_WORD *)(result + 44) = *(_WORD *)(result + 44) & 0xFFBF | v2;
  }
  return result;
}

uint64_t sub_1000368D4(uint64_t result)
{
  if (result) {
    return (*(unsigned __int16 *)(result + 44) >> 6) & 1;
  }
  return result;
}

__CFString *sub_1000368EC(__CFString *result, uint64_t a2)
{
  if (result)
  {
    if (a2 >= 4) {
      return (__CFString *)+[NSString stringWithFormat:@"(unknown: %i)", a2];
    }
    else {
      return off_10020D918[(int)a2];
    }
  }
  return result;
}

uint64_t sub_10003693C(uint64_t result, void *a2)
{
  if (result)
  {
    if ([a2 isEqualToString:@"DYNAMIC_RAT_SELECTION_RAT_TYPE_UNKNOWN"])
    {
      return 0;
    }
    else if ([a2 isEqualToString:@"DYNAMIC_RAT_SELECTION_RAT_TYPE_LTE"])
    {
      return 1;
    }
    else if ([a2 isEqualToString:@"DYNAMIC_RAT_SELECTION_RAT_TYPE_NR_SA"])
    {
      return 2;
    }
    else if ([a2 isEqualToString:@"DYNAMIC_RAT_SELECTION_RAT_TYPE_NR_NSA"])
    {
      return 3;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000369D4(uint64_t result)
{
  if (result)
  {
    if ((*(_WORD *)(result + 44) & 2) != 0) {
      return *(unsigned int *)(result + 12);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100036A00(uint64_t result, int a2)
{
  if (result)
  {
    *(_WORD *)(result + 44) |= 2u;
    *(_DWORD *)(result + 12) = a2;
  }
  return result;
}

uint64_t sub_100036A28(uint64_t result, int a2)
{
  if (result)
  {
    if (a2) {
      __int16 v2 = 2;
    }
    else {
      __int16 v2 = 0;
    }
    *(_WORD *)(result + 44) = *(_WORD *)(result + 44) & 0xFFFD | v2;
  }
  return result;
}

uint64_t sub_100036A54(uint64_t result)
{
  if (result) {
    return (*(unsigned __int16 *)(result + 44) >> 1) & 1;
  }
  return result;
}

__CFString *sub_100036A6C(__CFString *result, uint64_t a2)
{
  if (result)
  {
    if (a2 >= 3) {
      return (__CFString *)+[NSString stringWithFormat:@"(unknown: %i)", a2];
    }
    else {
      return off_10020D938[(int)a2];
    }
  }
  return result;
}

uint64_t sub_100036ABC(uint64_t result, void *a2)
{
  if (result)
  {
    if ([a2 isEqualToString:@"DYNAMIC_RAT_SELECTION_BB_CHIPSET_TYPE_UNKNOWN"])
    {
      return 0;
    }
    else if ([a2 isEqualToString:@"DYNAMIC_RAT_SELECTION_BB_CHIPSET_TYPE_MAV21_22"])
    {
      return 1;
    }
    else if ([a2 isEqualToString:@"DYNAMIC_RAT_SELECTION_BB_CHIPSET_TYPE_MAV30"])
    {
      return 2;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100036B38(uint64_t result, int a2)
{
  if (result)
  {
    *(_WORD *)(result + 44) |= 0x10u;
    *(_DWORD *)(result + 24) = a2;
  }
  return result;
}

uint64_t sub_100036B60(uint64_t result, int a2)
{
  if (result)
  {
    if (a2) {
      __int16 v2 = 16;
    }
    else {
      __int16 v2 = 0;
    }
    *(_WORD *)(result + 44) = *(_WORD *)(result + 44) & 0xFFEF | v2;
  }
  return result;
}

uint64_t sub_100036B8C(uint64_t result)
{
  if (result) {
    return (*(unsigned __int16 *)(result + 44) >> 4) & 1;
  }
  return result;
}

uint64_t sub_100036BA4(uint64_t result, int a2)
{
  if (result)
  {
    *(_WORD *)(result + 44) |= 0x20u;
    *(_DWORD *)(result + 28) = a2;
  }
  return result;
}

uint64_t sub_100036BCC(uint64_t result, int a2)
{
  if (result)
  {
    if (a2) {
      __int16 v2 = 32;
    }
    else {
      __int16 v2 = 0;
    }
    *(_WORD *)(result + 44) = *(_WORD *)(result + 44) & 0xFFDF | v2;
  }
  return result;
}

uint64_t sub_100036BF8(uint64_t result)
{
  if (result) {
    return (*(unsigned __int16 *)(result + 44) >> 5) & 1;
  }
  return result;
}

uint64_t sub_100036C10(uint64_t result, int a2)
{
  if (result)
  {
    *(_WORD *)(result + 44) |= 1u;
    *(_DWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t sub_100036C38(uint64_t result, __int16 a2)
{
  if (result) {
    *(_WORD *)(result + 44) = *(_WORD *)(result + 44) & 0xFFFE | a2;
  }
  return result;
}

uint64_t sub_100036C58(uint64_t result)
{
  if (result) {
    return *(_WORD *)(result + 44) & 1;
  }
  return result;
}

uint64_t sub_100036C70(uint64_t result, int a2)
{
  if (result)
  {
    *(_WORD *)(result + 44) |= 8u;
    *(_DWORD *)(result + 20) = a2;
  }
  return result;
}

uint64_t sub_100036C98(uint64_t result, int a2)
{
  if (result)
  {
    if (a2) {
      __int16 v2 = 8;
    }
    else {
      __int16 v2 = 0;
    }
    *(_WORD *)(result + 44) = *(_WORD *)(result + 44) & 0xFFF7 | v2;
  }
  return result;
}

uint64_t sub_100036CC4(uint64_t result)
{
  if (result) {
    return (*(unsigned __int16 *)(result + 44) >> 3) & 1;
  }
  return result;
}

uint64_t sub_100036CDC(uint64_t result, char a2)
{
  if (result)
  {
    *(_WORD *)(result + 44) |= 0x100u;
    *(unsigned char *)(result + 40) = a2;
  }
  return result;
}

uint64_t sub_100036D04(uint64_t result, int a2)
{
  if (result)
  {
    if (a2) {
      __int16 v2 = 256;
    }
    else {
      __int16 v2 = 0;
    }
    *(_WORD *)(result + 44) = *(_WORD *)(result + 44) & 0xFEFF | v2;
  }
  return result;
}

uint64_t sub_100036D30(uint64_t result)
{
  if (result) {
    return HIBYTE(*(unsigned __int16 *)(result + 44)) & 1;
  }
  return result;
}

uint64_t sub_100036D48(uint64_t result, int a2)
{
  if (result)
  {
    *(_WORD *)(result + 44) |= 0x80u;
    *(_DWORD *)(result + 36) = a2;
  }
  return result;
}

uint64_t sub_100036D70(uint64_t result, int a2)
{
  if (result)
  {
    if (a2) {
      __int16 v2 = 128;
    }
    else {
      __int16 v2 = 0;
    }
    *(_WORD *)(result + 44) = *(_WORD *)(result + 44) & 0xFF7F | v2;
  }
  return result;
}

uint64_t sub_100036D9C(uint64_t result)
{
  if (result) {
    return (*(unsigned __int16 *)(result + 44) >> 7) & 1;
  }
  return result;
}

uint64_t sub_100036DB4(uint64_t result, int a2)
{
  if (result)
  {
    *(_WORD *)(result + 44) |= 4u;
    *(_DWORD *)(result + 16) = a2;
  }
  return result;
}

uint64_t sub_100036DDC(uint64_t result, int a2)
{
  if (result)
  {
    if (a2) {
      __int16 v2 = 4;
    }
    else {
      __int16 v2 = 0;
    }
    *(_WORD *)(result + 44) = *(_WORD *)(result + 44) & 0xFFFB | v2;
  }
  return result;
}

uint64_t sub_100036E08(uint64_t result)
{
  if (result) {
    return (*(unsigned __int16 *)(result + 44) >> 2) & 1;
  }
  return result;
}

uint64_t sub_100037100(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(_WORD *)(a1 + 44) |= 0x40u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_84;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_86;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_84:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_86:
        uint64_t v51 = 32;
        goto LABEL_119;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v14 = 0;
        *(_WORD *)(a1 + 44) |= 2u;
        while (2)
        {
          unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v21 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              BOOL v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_90;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_90:
        uint64_t v51 = 12;
        goto LABEL_119;
      case 3u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v14 = 0;
        *(_WORD *)(a1 + 44) |= 0x10u;
        while (2)
        {
          unint64_t v24 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v24 == -1 || v24 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v25 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
            v14 |= (unint64_t)(v25 & 0x7F) << v22;
            if (v25 < 0)
            {
              v22 += 7;
              BOOL v9 = v23++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_94;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_94:
        uint64_t v51 = 24;
        goto LABEL_119;
      case 4u:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v14 = 0;
        *(_WORD *)(a1 + 44) |= 0x20u;
        while (2)
        {
          unint64_t v28 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v28 == -1 || v28 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v29 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28 + 1;
            v14 |= (unint64_t)(v29 & 0x7F) << v26;
            if (v29 < 0)
            {
              v26 += 7;
              BOOL v9 = v27++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_98;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_98:
        uint64_t v51 = 28;
        goto LABEL_119;
      case 5u:
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v14 = 0;
        *(_WORD *)(a1 + 44) |= 1u;
        while (2)
        {
          unint64_t v32 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v32 == -1 || v32 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v33 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v32);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v32 + 1;
            v14 |= (unint64_t)(v33 & 0x7F) << v30;
            if (v33 < 0)
            {
              v30 += 7;
              BOOL v9 = v31++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_102;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_102:
        uint64_t v51 = 8;
        goto LABEL_119;
      case 6u:
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v14 = 0;
        *(_WORD *)(a1 + 44) |= 8u;
        while (2)
        {
          unint64_t v36 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v36 == -1 || v36 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v37 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v36);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v36 + 1;
            v14 |= (unint64_t)(v37 & 0x7F) << v34;
            if (v37 < 0)
            {
              v34 += 7;
              BOOL v9 = v35++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_106;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_106:
        uint64_t v51 = 20;
        goto LABEL_119;
      case 7u:
        char v38 = 0;
        unsigned int v39 = 0;
        uint64_t v40 = 0;
        *(_WORD *)(a1 + 44) |= 0x100u;
        while (2)
        {
          unint64_t v41 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v41 == -1 || v41 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v42 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v41);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v41 + 1;
            v40 |= (unint64_t)(v42 & 0x7F) << v38;
            if (v42 < 0)
            {
              v38 += 7;
              BOOL v9 = v39++ >= 9;
              if (v9)
              {
                uint64_t v40 = 0;
                goto LABEL_110;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v40 = 0;
        }
LABEL_110:
        *(unsigned char *)(a1 + 40) = v40 != 0;
        continue;
      case 8u:
        char v43 = 0;
        unsigned int v44 = 0;
        uint64_t v14 = 0;
        *(_WORD *)(a1 + 44) |= 0x80u;
        while (2)
        {
          unint64_t v45 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v45 == -1 || v45 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v46 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v45);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v45 + 1;
            v14 |= (unint64_t)(v46 & 0x7F) << v43;
            if (v46 < 0)
            {
              v43 += 7;
              BOOL v9 = v44++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_114;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_114:
        uint64_t v51 = 36;
        goto LABEL_119;
      case 9u:
        char v47 = 0;
        unsigned int v48 = 0;
        uint64_t v14 = 0;
        *(_WORD *)(a1 + 44) |= 4u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      unint64_t v49 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v49 == -1 || v49 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v50 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v49);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v49 + 1;
      v14 |= (unint64_t)(v50 & 0x7F) << v47;
      if ((v50 & 0x80) == 0) {
        goto LABEL_116;
      }
      v47 += 7;
      BOOL v9 = v48++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_118;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_116:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v14) = 0;
    }
LABEL_118:
    uint64_t v51 = 16;
LABEL_119:
    *(_DWORD *)(a1 + v51) = v14;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_1000379FC(uint64_t result, uint64_t a2)
{
  if (result)
  {
    __int16 v2 = *(_WORD *)(result + 44);
    if ((v2 & 0x40) != 0)
    {
      *(_DWORD *)(a2 + 32) = *(_DWORD *)(result + 32);
      *(_WORD *)(a2 + 44) |= 0x40u;
      __int16 v2 = *(_WORD *)(result + 44);
      if ((v2 & 2) == 0)
      {
LABEL_4:
        if ((v2 & 0x10) == 0) {
          goto LABEL_5;
        }
        goto LABEL_15;
      }
    }
    else if ((v2 & 2) == 0)
    {
      goto LABEL_4;
    }
    *(_DWORD *)(a2 + 12) = *(_DWORD *)(result + 12);
    *(_WORD *)(a2 + 44) |= 2u;
    __int16 v2 = *(_WORD *)(result + 44);
    if ((v2 & 0x10) == 0)
    {
LABEL_5:
      if ((v2 & 0x20) == 0) {
        goto LABEL_6;
      }
      goto LABEL_16;
    }
LABEL_15:
    *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
    *(_WORD *)(a2 + 44) |= 0x10u;
    __int16 v2 = *(_WORD *)(result + 44);
    if ((v2 & 0x20) == 0)
    {
LABEL_6:
      if ((v2 & 1) == 0) {
        goto LABEL_7;
      }
      goto LABEL_17;
    }
LABEL_16:
    *(_DWORD *)(a2 + 28) = *(_DWORD *)(result + 28);
    *(_WORD *)(a2 + 44) |= 0x20u;
    __int16 v2 = *(_WORD *)(result + 44);
    if ((v2 & 1) == 0)
    {
LABEL_7:
      if ((v2 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_18;
    }
LABEL_17:
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
    *(_WORD *)(a2 + 44) |= 1u;
    __int16 v2 = *(_WORD *)(result + 44);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0) {
        goto LABEL_9;
      }
      goto LABEL_19;
    }
LABEL_18:
    *(_DWORD *)(a2 + 20) = *(_DWORD *)(result + 20);
    *(_WORD *)(a2 + 44) |= 8u;
    __int16 v2 = *(_WORD *)(result + 44);
    if ((v2 & 0x100) == 0)
    {
LABEL_9:
      if ((v2 & 0x80) == 0) {
        goto LABEL_10;
      }
      goto LABEL_20;
    }
LABEL_19:
    *(unsigned char *)(a2 + 40) = *(unsigned char *)(result + 40);
    *(_WORD *)(a2 + 44) |= 0x100u;
    __int16 v2 = *(_WORD *)(result + 44);
    if ((v2 & 0x80) == 0)
    {
LABEL_10:
      if ((v2 & 4) == 0) {
        return result;
      }
      goto LABEL_11;
    }
LABEL_20:
    *(_DWORD *)(a2 + 36) = *(_DWORD *)(result + 36);
    *(_WORD *)(a2 + 44) |= 0x80u;
    if ((*(_WORD *)(result + 44) & 4) == 0) {
      return result;
    }
LABEL_11:
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
    *(_WORD *)(a2 + 44) |= 4u;
  }
  return result;
}

uint64_t sub_100038054(uint64_t result, uint64_t a2)
{
  if (result)
  {
    __int16 v2 = *(_WORD *)(a2 + 44);
    if ((v2 & 0x40) != 0)
    {
      *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
      *(_WORD *)(result + 44) |= 0x40u;
      __int16 v2 = *(_WORD *)(a2 + 44);
      if ((v2 & 2) == 0)
      {
LABEL_4:
        if ((v2 & 0x10) == 0) {
          goto LABEL_5;
        }
        goto LABEL_15;
      }
    }
    else if ((v2 & 2) == 0)
    {
      goto LABEL_4;
    }
    *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
    *(_WORD *)(result + 44) |= 2u;
    __int16 v2 = *(_WORD *)(a2 + 44);
    if ((v2 & 0x10) == 0)
    {
LABEL_5:
      if ((v2 & 0x20) == 0) {
        goto LABEL_6;
      }
      goto LABEL_16;
    }
LABEL_15:
    *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
    *(_WORD *)(result + 44) |= 0x10u;
    __int16 v2 = *(_WORD *)(a2 + 44);
    if ((v2 & 0x20) == 0)
    {
LABEL_6:
      if ((v2 & 1) == 0) {
        goto LABEL_7;
      }
      goto LABEL_17;
    }
LABEL_16:
    *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
    *(_WORD *)(result + 44) |= 0x20u;
    __int16 v2 = *(_WORD *)(a2 + 44);
    if ((v2 & 1) == 0)
    {
LABEL_7:
      if ((v2 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_18;
    }
LABEL_17:
    *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
    *(_WORD *)(result + 44) |= 1u;
    __int16 v2 = *(_WORD *)(a2 + 44);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0) {
        goto LABEL_9;
      }
      goto LABEL_19;
    }
LABEL_18:
    *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
    *(_WORD *)(result + 44) |= 8u;
    __int16 v2 = *(_WORD *)(a2 + 44);
    if ((v2 & 0x100) == 0)
    {
LABEL_9:
      if ((v2 & 0x80) == 0) {
        goto LABEL_10;
      }
      goto LABEL_20;
    }
LABEL_19:
    *(unsigned char *)(result + 40) = *(unsigned char *)(a2 + 40);
    *(_WORD *)(result + 44) |= 0x100u;
    __int16 v2 = *(_WORD *)(a2 + 44);
    if ((v2 & 0x80) == 0)
    {
LABEL_10:
      if ((v2 & 4) == 0) {
        return result;
      }
      goto LABEL_11;
    }
LABEL_20:
    *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 36);
    *(_WORD *)(result + 44) |= 0x80u;
    if ((*(_WORD *)(a2 + 44) & 4) == 0) {
      return result;
    }
LABEL_11:
    *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
    *(_WORD *)(result + 44) |= 4u;
  }
  return result;
}

uint64_t sub_100038210(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 24);
  }
  return result;
}

uint64_t sub_100038224(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 28);
  }
  return result;
}

uint64_t sub_100038238(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 8);
  }
  return result;
}

uint64_t sub_10003824C(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 20);
  }
  return result;
}

BOOL sub_100038260(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 40) != 0;
  }
  return result;
}

uint64_t sub_10003827C(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 36);
  }
  return result;
}

uint64_t sub_100038290(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 16);
  }
  return result;
}

void sub_100038300(void *a1, char *newValue)
{
  if (a1) {
    objc_setProperty_nonatomic(a1, newValue, newValue, 16);
  }
}

BOOL sub_100038318(BOOL result)
{
  if (result) {
    return *(void *)(result + 16) != 0;
  }
  return result;
}

uint64_t sub_100038334(uint64_t result, int a2)
{
  if (result)
  {
    *(_WORD *)(result + 68) |= 2u;
    *(_DWORD *)(result + 12) = a2;
  }
  return result;
}

uint64_t sub_10003835C(uint64_t result, int a2)
{
  if (result)
  {
    if (a2) {
      __int16 v2 = 2;
    }
    else {
      __int16 v2 = 0;
    }
    *(_WORD *)(result + 68) = *(_WORD *)(result + 68) & 0xFFFD | v2;
  }
  return result;
}

uint64_t sub_100038388(uint64_t result)
{
  if (result) {
    return (*(unsigned __int16 *)(result + 68) >> 1) & 1;
  }
  return result;
}

uint64_t sub_1000383A0(uint64_t result, int a2)
{
  if (result)
  {
    *(_WORD *)(result + 68) |= 0x40u;
    *(_DWORD *)(result + 40) = a2;
  }
  return result;
}

uint64_t sub_1000383C8(uint64_t result, int a2)
{
  if (result)
  {
    if (a2) {
      __int16 v2 = 64;
    }
    else {
      __int16 v2 = 0;
    }
    *(_WORD *)(result + 68) = *(_WORD *)(result + 68) & 0xFFBF | v2;
  }
  return result;
}

uint64_t sub_1000383F4(uint64_t result)
{
  if (result) {
    return (*(unsigned __int16 *)(result + 68) >> 6) & 1;
  }
  return result;
}

uint64_t sub_10003840C(uint64_t result, int a2)
{
  if (result)
  {
    *(_WORD *)(result + 68) |= 0x80u;
    *(_DWORD *)(result + 44) = a2;
  }
  return result;
}

uint64_t sub_100038434(uint64_t result, int a2)
{
  if (result)
  {
    if (a2) {
      __int16 v2 = 128;
    }
    else {
      __int16 v2 = 0;
    }
    *(_WORD *)(result + 68) = *(_WORD *)(result + 68) & 0xFF7F | v2;
  }
  return result;
}

uint64_t sub_100038460(uint64_t result)
{
  if (result) {
    return (*(unsigned __int16 *)(result + 68) >> 7) & 1;
  }
  return result;
}

uint64_t sub_100038478(uint64_t result, int a2)
{
  if (result)
  {
    *(_WORD *)(result + 68) |= 0x100u;
    *(_DWORD *)(result + 48) = a2;
  }
  return result;
}

uint64_t sub_1000384A0(uint64_t result, int a2)
{
  if (result)
  {
    if (a2) {
      __int16 v2 = 256;
    }
    else {
      __int16 v2 = 0;
    }
    *(_WORD *)(result + 68) = *(_WORD *)(result + 68) & 0xFEFF | v2;
  }
  return result;
}

uint64_t sub_1000384CC(uint64_t result)
{
  if (result) {
    return HIBYTE(*(unsigned __int16 *)(result + 68)) & 1;
  }
  return result;
}

uint64_t sub_1000384E4(uint64_t result, int a2)
{
  if (result)
  {
    *(_WORD *)(result + 68) |= 0x400u;
    *(_DWORD *)(result + 56) = a2;
  }
  return result;
}

uint64_t sub_10003850C(uint64_t result, int a2)
{
  if (result)
  {
    if (a2) {
      __int16 v2 = 1024;
    }
    else {
      __int16 v2 = 0;
    }
    *(_WORD *)(result + 68) = *(_WORD *)(result + 68) & 0xFBFF | v2;
  }
  return result;
}

uint64_t sub_100038538(uint64_t result)
{
  if (result) {
    return (*(unsigned __int16 *)(result + 68) >> 10) & 1;
  }
  return result;
}

uint64_t sub_100038550(uint64_t result, int a2)
{
  if (result)
  {
    *(_WORD *)(result + 68) |= 0x20u;
    *(_DWORD *)(result + 36) = a2;
  }
  return result;
}

uint64_t sub_100038578(uint64_t result, int a2)
{
  if (result)
  {
    if (a2) {
      __int16 v2 = 32;
    }
    else {
      __int16 v2 = 0;
    }
    *(_WORD *)(result + 68) = *(_WORD *)(result + 68) & 0xFFDF | v2;
  }
  return result;
}

uint64_t sub_1000385A4(uint64_t result)
{
  if (result) {
    return (*(unsigned __int16 *)(result + 68) >> 5) & 1;
  }
  return result;
}

uint64_t sub_1000385BC(uint64_t result, int a2)
{
  if (result)
  {
    *(_WORD *)(result + 68) |= 0x1000u;
    *(_DWORD *)(result + 64) = a2;
  }
  return result;
}

uint64_t sub_1000385E4(uint64_t result, int a2)
{
  if (result)
  {
    if (a2) {
      __int16 v2 = 4096;
    }
    else {
      __int16 v2 = 0;
    }
    *(_WORD *)(result + 68) = *(_WORD *)(result + 68) & 0xEFFF | v2;
  }
  return result;
}

uint64_t sub_100038610(uint64_t result)
{
  if (result) {
    return (*(unsigned __int16 *)(result + 68) >> 12) & 1;
  }
  return result;
}

uint64_t sub_100038628(uint64_t result, int a2)
{
  if (result)
  {
    *(_WORD *)(result + 68) |= 4u;
    *(_DWORD *)(result + 24) = a2;
  }
  return result;
}

uint64_t sub_100038650(uint64_t result, int a2)
{
  if (result)
  {
    if (a2) {
      __int16 v2 = 4;
    }
    else {
      __int16 v2 = 0;
    }
    *(_WORD *)(result + 68) = *(_WORD *)(result + 68) & 0xFFFB | v2;
  }
  return result;
}

uint64_t sub_10003867C(uint64_t result)
{
  if (result) {
    return (*(unsigned __int16 *)(result + 68) >> 2) & 1;
  }
  return result;
}

uint64_t sub_100038694(uint64_t result, int a2)
{
  if (result)
  {
    *(_WORD *)(result + 68) |= 0x800u;
    *(_DWORD *)(result + 60) = a2;
  }
  return result;
}

uint64_t sub_1000386BC(uint64_t result, int a2)
{
  if (result)
  {
    if (a2) {
      __int16 v2 = 2048;
    }
    else {
      __int16 v2 = 0;
    }
    *(_WORD *)(result + 68) = *(_WORD *)(result + 68) & 0xF7FF | v2;
  }
  return result;
}

uint64_t sub_1000386E8(uint64_t result)
{
  if (result) {
    return (*(unsigned __int16 *)(result + 68) >> 11) & 1;
  }
  return result;
}

uint64_t sub_100038700(uint64_t result, int a2)
{
  if (result)
  {
    *(_WORD *)(result + 68) |= 1u;
    *(_DWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t sub_100038728(uint64_t result, __int16 a2)
{
  if (result) {
    *(_WORD *)(result + 68) = *(_WORD *)(result + 68) & 0xFFFE | a2;
  }
  return result;
}

uint64_t sub_100038748(uint64_t result)
{
  if (result) {
    return *(_WORD *)(result + 68) & 1;
  }
  return result;
}

uint64_t sub_100038760(uint64_t result, int a2)
{
  if (result)
  {
    *(_WORD *)(result + 68) |= 8u;
    *(_DWORD *)(result + 28) = a2;
  }
  return result;
}

uint64_t sub_100038788(uint64_t result, int a2)
{
  if (result)
  {
    if (a2) {
      __int16 v2 = 8;
    }
    else {
      __int16 v2 = 0;
    }
    *(_WORD *)(result + 68) = *(_WORD *)(result + 68) & 0xFFF7 | v2;
  }
  return result;
}

uint64_t sub_1000387B4(uint64_t result)
{
  if (result) {
    return (*(unsigned __int16 *)(result + 68) >> 3) & 1;
  }
  return result;
}

uint64_t sub_1000387CC(uint64_t result, int a2)
{
  if (result)
  {
    *(_WORD *)(result + 68) |= 0x10u;
    *(_DWORD *)(result + 32) = a2;
  }
  return result;
}

uint64_t sub_1000387F4(uint64_t result, int a2)
{
  if (result)
  {
    if (a2) {
      __int16 v2 = 16;
    }
    else {
      __int16 v2 = 0;
    }
    *(_WORD *)(result + 68) = *(_WORD *)(result + 68) & 0xFFEF | v2;
  }
  return result;
}

uint64_t sub_100038820(uint64_t result)
{
  if (result) {
    return (*(unsigned __int16 *)(result + 68) >> 4) & 1;
  }
  return result;
}

uint64_t sub_100038838(uint64_t result, int a2)
{
  if (result)
  {
    *(_WORD *)(result + 68) |= 0x200u;
    *(_DWORD *)(result + 52) = a2;
  }
  return result;
}

uint64_t sub_100038860(uint64_t result, int a2)
{
  if (result)
  {
    if (a2) {
      __int16 v2 = 512;
    }
    else {
      __int16 v2 = 0;
    }
    *(_WORD *)(result + 68) = *(_WORD *)(result + 68) & 0xFDFF | v2;
  }
  return result;
}

uint64_t sub_10003888C(uint64_t result)
{
  if (result) {
    return (*(unsigned __int16 *)(result + 68) >> 9) & 1;
  }
  return result;
}

uint64_t sub_100038C24(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    char v4 = &selRef_setMMitigationRequired_;
    unsigned int v5 = &selRef_setMMitigationRequired_;
    do
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        unint64_t v9 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v9 == -1 || v9 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v10 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v9);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v9 + 1;
        v8 |= (unint64_t)(v10 & 0x7F) << v6;
        if ((v10 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        BOOL v11 = v7++ >= 9;
        if (v11)
        {
          unint64_t v8 = 0;
          int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
      int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v8 = 0;
      }
LABEL_14:
      if (v12 || (v8 & 7) == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          uint64_t v14 = v4;
          unint64_t v15 = v5;
          String = (void *)PBReaderReadString();

          id v17 = String;
          unsigned int v5 = v15;
          char v4 = v14;
          *(void *)(a1 + 16) = v17;
          continue;
        case 2u:
          char v19 = 0;
          unsigned int v20 = 0;
          uint64_t v21 = 0;
          *(_WORD *)(a1 + *((int *)v4 + 441)) |= 2u;
          while (2)
          {
            unint64_t v22 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v22 == -1 || v22 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v23 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22 + 1;
              v21 |= (unint64_t)(v23 & 0x7F) << v19;
              if (v23 < 0)
              {
                v19 += 7;
                BOOL v11 = v20++ >= 9;
                if (v11)
                {
                  LODWORD(v21) = 0;
                  goto LABEL_116;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v21) = 0;
          }
LABEL_116:
          uint64_t v74 = *((int *)v5 + 442);
          goto LABEL_166;
        case 3u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v21 = 0;
          *(_WORD *)(a1 + *((int *)v4 + 441)) |= 0x40u;
          while (2)
          {
            unint64_t v26 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v26 == -1 || v26 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v27 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26 + 1;
              v21 |= (unint64_t)(v27 & 0x7F) << v24;
              if (v27 < 0)
              {
                v24 += 7;
                BOOL v11 = v25++ >= 9;
                if (v11)
                {
                  LODWORD(v21) = 0;
                  goto LABEL_120;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v21) = 0;
          }
LABEL_120:
          uint64_t v74 = 40;
          goto LABEL_166;
        case 4u:
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v21 = 0;
          *(_WORD *)(a1 + *((int *)v4 + 441)) |= 0x80u;
          while (2)
          {
            unint64_t v30 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v30 == -1 || v30 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v31 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30 + 1;
              v21 |= (unint64_t)(v31 & 0x7F) << v28;
              if (v31 < 0)
              {
                v28 += 7;
                BOOL v11 = v29++ >= 9;
                if (v11)
                {
                  LODWORD(v21) = 0;
                  goto LABEL_124;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v21) = 0;
          }
LABEL_124:
          uint64_t v74 = 44;
          goto LABEL_166;
        case 5u:
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v21 = 0;
          *(_WORD *)(a1 + *((int *)v4 + 441)) |= 0x100u;
          while (2)
          {
            unint64_t v34 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v34 == -1 || v34 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v35 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v34);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v34 + 1;
              v21 |= (unint64_t)(v35 & 0x7F) << v32;
              if (v35 < 0)
              {
                v32 += 7;
                BOOL v11 = v33++ >= 9;
                if (v11)
                {
                  LODWORD(v21) = 0;
                  goto LABEL_128;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v21) = 0;
          }
LABEL_128:
          uint64_t v74 = 48;
          goto LABEL_166;
        case 6u:
          char v36 = 0;
          unsigned int v37 = 0;
          uint64_t v21 = 0;
          *(_WORD *)(a1 + *((int *)v4 + 441)) |= 0x400u;
          while (2)
          {
            unint64_t v38 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v38 == -1 || v38 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v39 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v38);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v38 + 1;
              v21 |= (unint64_t)(v39 & 0x7F) << v36;
              if (v39 < 0)
              {
                v36 += 7;
                BOOL v11 = v37++ >= 9;
                if (v11)
                {
                  LODWORD(v21) = 0;
                  goto LABEL_132;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v21) = 0;
          }
LABEL_132:
          uint64_t v74 = 56;
          goto LABEL_166;
        case 7u:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v21 = 0;
          *(_WORD *)(a1 + *((int *)v4 + 441)) |= 0x20u;
          while (2)
          {
            unint64_t v42 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v42 == -1 || v42 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v43 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v42);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v42 + 1;
              v21 |= (unint64_t)(v43 & 0x7F) << v40;
              if (v43 < 0)
              {
                v40 += 7;
                BOOL v11 = v41++ >= 9;
                if (v11)
                {
                  LODWORD(v21) = 0;
                  goto LABEL_136;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v21) = 0;
          }
LABEL_136:
          uint64_t v74 = 36;
          goto LABEL_166;
        case 8u:
          char v44 = 0;
          unsigned int v45 = 0;
          uint64_t v21 = 0;
          *(_WORD *)(a1 + *((int *)v4 + 441)) |= 0x1000u;
          while (2)
          {
            unint64_t v46 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v46 == -1 || v46 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v47 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v46);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v46 + 1;
              v21 |= (unint64_t)(v47 & 0x7F) << v44;
              if (v47 < 0)
              {
                v44 += 7;
                BOOL v11 = v45++ >= 9;
                if (v11)
                {
                  LODWORD(v21) = 0;
                  goto LABEL_140;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v21) = 0;
          }
LABEL_140:
          uint64_t v74 = 64;
          goto LABEL_166;
        case 9u:
          char v48 = 0;
          unsigned int v49 = 0;
          uint64_t v21 = 0;
          *(_WORD *)(a1 + *((int *)v4 + 441)) |= 4u;
          while (2)
          {
            unint64_t v50 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v50 == -1 || v50 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v51 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v50);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v50 + 1;
              v21 |= (unint64_t)(v51 & 0x7F) << v48;
              if (v51 < 0)
              {
                v48 += 7;
                BOOL v11 = v49++ >= 9;
                if (v11)
                {
                  LODWORD(v21) = 0;
                  goto LABEL_144;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v21) = 0;
          }
LABEL_144:
          uint64_t v74 = 24;
          goto LABEL_166;
        case 0xAu:
          char v52 = 0;
          unsigned int v53 = 0;
          uint64_t v21 = 0;
          *(_WORD *)(a1 + *((int *)v4 + 441)) |= 0x800u;
          while (2)
          {
            unint64_t v54 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v54 == -1 || v54 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v55 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v54);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v54 + 1;
              v21 |= (unint64_t)(v55 & 0x7F) << v52;
              if (v55 < 0)
              {
                v52 += 7;
                BOOL v11 = v53++ >= 9;
                if (v11)
                {
                  LODWORD(v21) = 0;
                  goto LABEL_148;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v21) = 0;
          }
LABEL_148:
          uint64_t v74 = 60;
          goto LABEL_166;
        case 0xBu:
          char v56 = 0;
          unsigned int v57 = 0;
          uint64_t v21 = 0;
          *(_WORD *)(a1 + *((int *)v4 + 441)) |= 1u;
          while (2)
          {
            unint64_t v58 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v58 == -1 || v58 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v59 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v58);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v58 + 1;
              v21 |= (unint64_t)(v59 & 0x7F) << v56;
              if (v59 < 0)
              {
                v56 += 7;
                BOOL v11 = v57++ >= 9;
                if (v11)
                {
                  LODWORD(v21) = 0;
                  goto LABEL_152;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v21) = 0;
          }
LABEL_152:
          uint64_t v74 = 8;
          goto LABEL_166;
        case 0xCu:
          char v60 = 0;
          unsigned int v61 = 0;
          uint64_t v62 = 0;
          *(_WORD *)(a1 + *((int *)v4 + 441)) |= 8u;
          while (2)
          {
            unint64_t v63 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v63 == -1 || v63 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v64 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v63);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v63 + 1;
              v62 |= (unint64_t)(v64 & 0x7F) << v60;
              if (v64 < 0)
              {
                v60 += 7;
                BOOL v11 = v61++ >= 9;
                if (v11)
                {
                  LODWORD(v62) = 0;
                  goto LABEL_156;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v62) = 0;
          }
LABEL_156:
          int v75 = -(v62 & 1) ^ ((int)v62 >> 1);
          uint64_t v76 = 28;
          goto LABEL_161;
        case 0xDu:
          char v65 = 0;
          unsigned int v66 = 0;
          uint64_t v67 = 0;
          *(_WORD *)(a1 + *((int *)v4 + 441)) |= 0x10u;
          while (2)
          {
            unint64_t v68 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v68 == -1 || v68 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v69 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v68);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v68 + 1;
              v67 |= (unint64_t)(v69 & 0x7F) << v65;
              if (v69 < 0)
              {
                v65 += 7;
                BOOL v11 = v66++ >= 9;
                if (v11)
                {
                  LODWORD(v67) = 0;
                  goto LABEL_160;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v67) = 0;
          }
LABEL_160:
          int v75 = -(v67 & 1) ^ ((int)v67 >> 1);
          uint64_t v76 = 32;
LABEL_161:
          *(_DWORD *)(a1 + v76) = v75;
          continue;
        case 0xEu:
          char v70 = 0;
          unsigned int v71 = 0;
          uint64_t v21 = 0;
          *(_WORD *)(a1 + *((int *)v4 + 441)) |= 0x200u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        unint64_t v72 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v72 == -1 || v72 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v73 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v72);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v72 + 1;
        v21 |= (unint64_t)(v73 & 0x7F) << v70;
        if ((v73 & 0x80) == 0) {
          goto LABEL_163;
        }
        v70 += 7;
        BOOL v11 = v71++ >= 9;
        if (v11)
        {
          LODWORD(v21) = 0;
          goto LABEL_165;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_163:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v21) = 0;
      }
LABEL_165:
      uint64_t v74 = 52;
LABEL_166:
      *(_DWORD *)(a1 + v74) = v21;
    }
    while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length));
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000398B4(uint64_t a1, id self)
{
  if (a1)
  {
    if (self)
    {
      char v4 = *(void **)(a1 + 16);
      if (v4) {
        objc_setProperty_nonatomic(self, (SEL)self, v4, 16);
      }
    }
    __int16 v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 2) != 0)
    {
      *((_DWORD *)self + 3) = *(_DWORD *)(a1 + 12);
      *((_WORD *)self + 34) |= 2u;
      __int16 v5 = *(_WORD *)(a1 + 68);
      if ((v5 & 0x40) == 0)
      {
LABEL_7:
        if ((v5 & 0x80) == 0) {
          goto LABEL_8;
        }
        goto LABEL_22;
      }
    }
    else if ((v5 & 0x40) == 0)
    {
      goto LABEL_7;
    }
    *((_DWORD *)self + 10) = *(_DWORD *)(a1 + 40);
    *((_WORD *)self + 34) |= 0x40u;
    __int16 v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 0x80) == 0)
    {
LABEL_8:
      if ((v5 & 0x100) == 0) {
        goto LABEL_9;
      }
      goto LABEL_23;
    }
LABEL_22:
    *((_DWORD *)self + 11) = *(_DWORD *)(a1 + 44);
    *((_WORD *)self + 34) |= 0x80u;
    __int16 v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 0x100) == 0)
    {
LABEL_9:
      if ((v5 & 0x400) == 0) {
        goto LABEL_10;
      }
      goto LABEL_24;
    }
LABEL_23:
    *((_DWORD *)self + 12) = *(_DWORD *)(a1 + 48);
    *((_WORD *)self + 34) |= 0x100u;
    __int16 v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 0x400) == 0)
    {
LABEL_10:
      if ((v5 & 0x20) == 0) {
        goto LABEL_11;
      }
      goto LABEL_25;
    }
LABEL_24:
    *((_DWORD *)self + 14) = *(_DWORD *)(a1 + 56);
    *((_WORD *)self + 34) |= 0x400u;
    __int16 v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 0x20) == 0)
    {
LABEL_11:
      if ((v5 & 0x1000) == 0) {
        goto LABEL_12;
      }
      goto LABEL_26;
    }
LABEL_25:
    *((_DWORD *)self + 9) = *(_DWORD *)(a1 + 36);
    *((_WORD *)self + 34) |= 0x20u;
    __int16 v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 0x1000) == 0)
    {
LABEL_12:
      if ((v5 & 4) == 0) {
        goto LABEL_13;
      }
      goto LABEL_27;
    }
LABEL_26:
    *((_DWORD *)self + 16) = *(_DWORD *)(a1 + 64);
    *((_WORD *)self + 34) |= 0x1000u;
    __int16 v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 4) == 0)
    {
LABEL_13:
      if ((v5 & 0x800) == 0) {
        goto LABEL_14;
      }
      goto LABEL_28;
    }
LABEL_27:
    *((_DWORD *)self + 6) = *(_DWORD *)(a1 + 24);
    *((_WORD *)self + 34) |= 4u;
    __int16 v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 0x800) == 0)
    {
LABEL_14:
      if ((v5 & 1) == 0) {
        goto LABEL_15;
      }
      goto LABEL_29;
    }
LABEL_28:
    *((_DWORD *)self + 15) = *(_DWORD *)(a1 + 60);
    *((_WORD *)self + 34) |= 0x800u;
    __int16 v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 1) == 0)
    {
LABEL_15:
      if ((v5 & 8) == 0) {
        goto LABEL_16;
      }
      goto LABEL_30;
    }
LABEL_29:
    *((_DWORD *)self + 2) = *(_DWORD *)(a1 + 8);
    *((_WORD *)self + 34) |= 1u;
    __int16 v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 8) == 0)
    {
LABEL_16:
      if ((v5 & 0x10) == 0) {
        goto LABEL_17;
      }
      goto LABEL_31;
    }
LABEL_30:
    *((_DWORD *)self + 7) = *(_DWORD *)(a1 + 28);
    *((_WORD *)self + 34) |= 8u;
    __int16 v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 0x10) == 0)
    {
LABEL_17:
      if ((v5 & 0x200) == 0) {
        return;
      }
      goto LABEL_18;
    }
LABEL_31:
    *((_DWORD *)self + 8) = *(_DWORD *)(a1 + 32);
    *((_WORD *)self + 34) |= 0x10u;
    if ((*(_WORD *)(a1 + 68) & 0x200) == 0) {
      return;
    }
LABEL_18:
    *((_DWORD *)self + 13) = *(_DWORD *)(a1 + 52);
    *((_WORD *)self + 34) |= 0x200u;
  }
}

void sub_10003A244(id self, uint64_t a2)
{
  if (self)
  {
    char v4 = *(void **)(a2 + 16);
    if (v4) {
      objc_setProperty_nonatomic(self, (SEL)a2, v4, 16);
    }
    __int16 v5 = *(_WORD *)(a2 + 68);
    if ((v5 & 2) != 0)
    {
      *((_DWORD *)self + 3) = *(_DWORD *)(a2 + 12);
      *((_WORD *)self + 34) |= 2u;
      __int16 v5 = *(_WORD *)(a2 + 68);
      if ((v5 & 0x40) == 0)
      {
LABEL_6:
        if ((v5 & 0x80) == 0) {
          goto LABEL_7;
        }
        goto LABEL_21;
      }
    }
    else if ((v5 & 0x40) == 0)
    {
      goto LABEL_6;
    }
    *((_DWORD *)self + 10) = *(_DWORD *)(a2 + 40);
    *((_WORD *)self + 34) |= 0x40u;
    __int16 v5 = *(_WORD *)(a2 + 68);
    if ((v5 & 0x80) == 0)
    {
LABEL_7:
      if ((v5 & 0x100) == 0) {
        goto LABEL_8;
      }
      goto LABEL_22;
    }
LABEL_21:
    *((_DWORD *)self + 11) = *(_DWORD *)(a2 + 44);
    *((_WORD *)self + 34) |= 0x80u;
    __int16 v5 = *(_WORD *)(a2 + 68);
    if ((v5 & 0x100) == 0)
    {
LABEL_8:
      if ((v5 & 0x400) == 0) {
        goto LABEL_9;
      }
      goto LABEL_23;
    }
LABEL_22:
    *((_DWORD *)self + 12) = *(_DWORD *)(a2 + 48);
    *((_WORD *)self + 34) |= 0x100u;
    __int16 v5 = *(_WORD *)(a2 + 68);
    if ((v5 & 0x400) == 0)
    {
LABEL_9:
      if ((v5 & 0x20) == 0) {
        goto LABEL_10;
      }
      goto LABEL_24;
    }
LABEL_23:
    *((_DWORD *)self + 14) = *(_DWORD *)(a2 + 56);
    *((_WORD *)self + 34) |= 0x400u;
    __int16 v5 = *(_WORD *)(a2 + 68);
    if ((v5 & 0x20) == 0)
    {
LABEL_10:
      if ((v5 & 0x1000) == 0) {
        goto LABEL_11;
      }
      goto LABEL_25;
    }
LABEL_24:
    *((_DWORD *)self + 9) = *(_DWORD *)(a2 + 36);
    *((_WORD *)self + 34) |= 0x20u;
    __int16 v5 = *(_WORD *)(a2 + 68);
    if ((v5 & 0x1000) == 0)
    {
LABEL_11:
      if ((v5 & 4) == 0) {
        goto LABEL_12;
      }
      goto LABEL_26;
    }
LABEL_25:
    *((_DWORD *)self + 16) = *(_DWORD *)(a2 + 64);
    *((_WORD *)self + 34) |= 0x1000u;
    __int16 v5 = *(_WORD *)(a2 + 68);
    if ((v5 & 4) == 0)
    {
LABEL_12:
      if ((v5 & 0x800) == 0) {
        goto LABEL_13;
      }
      goto LABEL_27;
    }
LABEL_26:
    *((_DWORD *)self + 6) = *(_DWORD *)(a2 + 24);
    *((_WORD *)self + 34) |= 4u;
    __int16 v5 = *(_WORD *)(a2 + 68);
    if ((v5 & 0x800) == 0)
    {
LABEL_13:
      if ((v5 & 1) == 0) {
        goto LABEL_14;
      }
      goto LABEL_28;
    }
LABEL_27:
    *((_DWORD *)self + 15) = *(_DWORD *)(a2 + 60);
    *((_WORD *)self + 34) |= 0x800u;
    __int16 v5 = *(_WORD *)(a2 + 68);
    if ((v5 & 1) == 0)
    {
LABEL_14:
      if ((v5 & 8) == 0) {
        goto LABEL_15;
      }
      goto LABEL_29;
    }
LABEL_28:
    *((_DWORD *)self + 2) = *(_DWORD *)(a2 + 8);
    *((_WORD *)self + 34) |= 1u;
    __int16 v5 = *(_WORD *)(a2 + 68);
    if ((v5 & 8) == 0)
    {
LABEL_15:
      if ((v5 & 0x10) == 0) {
        goto LABEL_16;
      }
      goto LABEL_30;
    }
LABEL_29:
    *((_DWORD *)self + 7) = *(_DWORD *)(a2 + 28);
    *((_WORD *)self + 34) |= 8u;
    __int16 v5 = *(_WORD *)(a2 + 68);
    if ((v5 & 0x10) == 0)
    {
LABEL_16:
      if ((v5 & 0x200) == 0) {
        return;
      }
      goto LABEL_17;
    }
LABEL_30:
    *((_DWORD *)self + 8) = *(_DWORD *)(a2 + 32);
    *((_WORD *)self + 34) |= 0x10u;
    if ((*(_WORD *)(a2 + 68) & 0x200) == 0) {
      return;
    }
LABEL_17:
    *((_DWORD *)self + 13) = *(_DWORD *)(a2 + 52);
    *((_WORD *)self + 34) |= 0x200u;
  }
}

uint64_t sub_10003A4FC(uint64_t result)
{
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

uint64_t sub_10003A510(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 12);
  }
  return result;
}

uint64_t sub_10003A524(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 40);
  }
  return result;
}

uint64_t sub_10003A538(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 44);
  }
  return result;
}

uint64_t sub_10003A54C(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 48);
  }
  return result;
}

uint64_t sub_10003A560(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 56);
  }
  return result;
}

uint64_t sub_10003A574(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 36);
  }
  return result;
}

uint64_t sub_10003A588(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 64);
  }
  return result;
}

uint64_t sub_10003A59C(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 24);
  }
  return result;
}

uint64_t sub_10003A5B0(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 60);
  }
  return result;
}

uint64_t sub_10003A5C4(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 8);
  }
  return result;
}

uint64_t sub_10003A5D8(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 28);
  }
  return result;
}

uint64_t sub_10003A5EC(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 32);
  }
  return result;
}

uint64_t sub_10003A600(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 52);
  }
  return result;
}

id *sub_10003A894(id *result, int a2)
{
  if (dword_10027CE10 == a2)
  {
    Weauint64_t k = objc_loadWeak(result + 4);
    return (id *)[Weak updateLPMState];
  }
  return result;
}

id sub_10003A8D8(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) getLPMState];
  byte_10027CE14 = result != 0;
  return result;
}

void sub_10003AA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 72), 8);
  _Unwind_Resume(a1);
}

id sub_10003AA5C(void *a1)
{
  uint64_t state64 = 0;
  notify_get_state(dword_10027C870, &state64);
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 1;
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = state64 != 0;
  if (*(unsigned char *)(*(void *)(a1[6] + 8) + 24)) {
    uint64_t v2 = (dword_10027CE18 + 1);
  }
  else {
    uint64_t v2 = (dword_10027CE18 - 1);
  }
  dword_10027CE18 = v2;
  if (v2 == 1)
  {
    +[WCM_Logging logLevel:24 message:@"registerWebkitStreamingNotification: WebKit streaming Started"];
    uint64_t v3 = (void *)a1[4];
    uint64_t v4 = 1;
LABEL_9:
    [v3 notifyStreamingState:v4 :0];
    return +[WCM_Logging logLevel:24, @"registerWebkitStreamingNotification isMediaStreamingChanged: %d, isMediaStreaming: %d", *(unsigned __int8 *)(*(void *)(a1[5] + 8) + 24), *(unsigned __int8 *)(*(void *)(a1[6] + 8) + 24) message];
  }
  if ((int)v2 <= 0)
  {
    dword_10027CE18 = 0;
    +[WCM_Logging logLevel:24 message:@"registerWebkitStreamingNotification: WebKit streaming Ended"];
    uint64_t v3 = (void *)a1[4];
    uint64_t v4 = 2;
    goto LABEL_9;
  }
  +[WCM_Logging logLevel:24, @"registerWebkitStreamingNotification:refcount: %d", v2 message];
  return +[WCM_Logging logLevel:24, @"registerWebkitStreamingNotification isMediaStreamingChanged: %d, isMediaStreaming: %d", *(unsigned __int8 *)(*(void *)(a1[5] + 8) + 24), *(unsigned __int8 *)(*(void *)(a1[6] + 8) + 24) message];
}

void sub_10003B140(uint64_t a1)
{
  if (qword_10027CE00)
  {
    dispatch_source_cancel((dispatch_source_t)qword_10027CE00);
    dispatch_release((dispatch_object_t)qword_10027CE00);
    qword_10027CE00 = 0;
  }
  qword_10027CE00 = (uint64_t)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(a1 + 32));
  dispatch_time_t v2 = dispatch_time(0, 0);
  dispatch_source_set_timer((dispatch_source_t)qword_10027CE00, v2, (uint64_t)(*(double *)(a1 + 56) * 1000000000.0), 0);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_10003B238;
  handler[3] = &unk_10020D9F8;
  uint64_t v5 = *(void *)(a1 + 56);
  long long v4 = *(_OWORD *)(a1 + 40);
  dispatch_source_set_event_handler((dispatch_source_t)qword_10027CE00, handler);
  dispatch_resume((dispatch_object_t)qword_10027CE00);
}

id sub_10003B238(uint64_t a1)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unint64_t v7 = 0;
  unint64_t v8 = 0;
  unsigned int v2 = [*(id *)(a1 + 32) getDeltaIPStats:&v10 :&v9 :&v8 :&v7];
  double v3 = *(double *)(a1 + 48) * 1000.0;
  float v4 = (double)v7 / v3;
  float v5 = (double)v8 / v3;
  id result = +[WCM_Logging logLevel:24, @"Delta TX Rate: %f, RX Rate: %f", v5, v4 message];
  if (v2 != 1) {
    return (id)(*(uint64_t (**)(float, float))(*(void *)(a1 + 40) + 16))(v5, v4);
  }
  return result;
}

void sub_10003B45C(id a1, unint64_t a2, unint64_t a3, float a4, float a5)
{
  int v9 = (int)(float)(a5 - a4);
  if (v9 >= 0) {
    int v10 = (int)(float)(a5 - a4);
  }
  else {
    int v10 = -v9;
  }
  float v11 = (float)v10;
  if (objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "isVoIPCallActive"))
  {
    +[WCM_Logging logLevel:24, @"VoIP Delta: TX rate: %f, RX Rate: %f, VoIP active Diff: %f", a4, a5, v11 message];
  }
  else
  {
    +[WCM_Logging logLevel:24, @"VoIP Delta: TX rate: %f, RX Rate: %f, Diff: %f", a4, a5, v11 message];
    if (a4 > 7.0 && a2 >= 0x64 && a3 >= 0x64 && a5 > 7.0 && v10 <= 0x1D)
    {
      id v12 = +[WRM_HandoverManager WRM_HandoverManagerSingleton];
      [v12 rxVoIPAppNotification:1];
    }
  }
}

id sub_10003B730(uint64_t a1)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  unint64_t v6 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10003B828;
  v3[3] = &unk_10020DA88;
  id v4 = *(id *)(a1 + 32);
  uint64_t v5 = 0;
  [v4 getDeltaIPStats:&v8 :&v7 :&v5 :&v6];
  id result = [*(id *)(a1 + 32) isCoreMediaStreamingActive];
  if ((result & 1) == 0 && byte_10027CF60 == 1)
  {
    if (v6 >= 0x7C830 && !byte_10027CE14)
    {
      [*(id *)(a1 + 32) notifyStreamingState:1 :0];
      byte_10027CDE9 = 1;
    }
    return [*(id *)(a1 + 32) startPeriodicTask:v3 :10.0];
  }
  return result;
}

id sub_10003B828(uint64_t a1, float a2, float a3)
{
  id result = +[WCM_Logging logLevel:24, @"streaming Delta: TX rate: %f, RX Rate: %f", a2, a3 message];
  if (byte_10027CF60 == 1 && a3 > 50.0 && byte_10027CDE9 == 0 && byte_10027CE14 == 0)
  {
    id result = [*(id *)(a1 + 32) notifyStreamingState:1 :0];
    byte_10027CDE9 = 1;
  }
  return result;
}

uint64_t sub_10003B988(uint64_t result)
{
  byte_10027CDE9 = *(unsigned char *)(result + 32);
  return result;
}

void sub_10003B998(uint64_t a1, uint64_t a2)
{
}

void sub_10003B9A8(uint64_t a1)
{
}

Class sub_10003B9B4(uint64_t a1)
{
  v3[0] = 0;
  if (!qword_10027CF90)
  {
    v3[1] = _NSConcreteStackBlock;
    v3[2] = (void *)3221225472;
    v3[3] = sub_10003BAE0;
    void v3[4] = &unk_10020DB30;
    v3[5] = v3;
    long long v4 = off_10020DB18;
    uint64_t v5 = 0;
    qword_10027CF90 = _sl_dlopen();
  }
  if (!qword_10027CF90) {
    sub_10013A318(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("LSApplicationRecord");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    sub_10013A380();
  }
  qword_10027CF88 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t sub_10003BAE0()
{
  uint64_t result = _sl_dlopen();
  qword_10027CF90 = result;
  return result;
}

id sub_10003C0C0(uint64_t a1)
{
  if (!qword_10027CFA0)
  {
    v2.receiver = *(id *)(a1 + 32);
    v2.super_class = (Class)&OBJC_METACLASS___WRM_EnhancedCTService;
    qword_10027CFA0 = (uint64_t)[[objc_msgSendSuper2(&v2, "allocWithZone:", 0) init];
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s", "+[WRM_EnhancedCTService wrm_EnhancedCTServiceSingleton]_block_invoke");
}

id sub_10003D57C(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 428) = +[WRM_SCService WRM_SCServiceControllerSingleton];
  id v2 = +[WRM_HandoverManager WRM_HandoverManagerSingleton];
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 428);

  return [v2 setSCService:v3];
}

void sub_10003E404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10003E41C(uint64_t a1)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = *(_DWORD *)(*(void *)(a1 + 32) + 452);
  return +[WCM_Logging logLevel:22, @"CellularProductExperimentsManager: getWRMCellOutrankWifiBWThreshold: mWRMCellOutrankWifiBWThreshold, value: %d", *(unsigned int *)(*(void *)(a1 + 32) + 452) message];
}

void sub_10003E524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10003E53C(uint64_t a1)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = *(_DWORD *)(*(void *)(a1 + 32) + 456);
  return +[WCM_Logging logLevel:22, @"CellularProductExperimentsManager: getCellConfiguredBandwidthThreshold: mCellConfiguredBandwidth, value: %d", *(unsigned int *)(*(void *)(a1 + 32) + 456) message];
}

void sub_10003E644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10003E65C(uint64_t a1)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = *(_DWORD *)(*(void *)(a1 + 32) + 460);
  return +[WCM_Logging logLevel:22, @"CellularProductExperimentsManager: getCellRSRP4G5GvsWiFiThreshold: mCellRSRP4G5GvsWiFiThreshold, value: %d", *(unsigned int *)(*(void *)(a1 + 32) + 460) message];
}

void sub_10003E764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10003E77C(uint64_t a1)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = *(_DWORD *)(*(void *)(a1 + 32) + 464);
  return +[WCM_Logging logLevel:22, @"CellularProductExperimentsManager: getCellRSRQ4G5GvsWiFiThreshold: mCellRSRQ4G5GvsWiFiThreshold, value: %d", *(unsigned int *)(*(void *)(a1 + 32) + 464) message];
}

id sub_10003E858(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"Cell_Outrank_WiFi_Bandwidth_Threshold"];
  if (v2)
  {
    *(_DWORD *)(*(void *)(a1 + 40) + 452) = [v2 intValue];
    +[WCM_Logging logLevel:22, @"CellularProductExperimentsManager: setTrialParameters: mWRMCellOutrankWifiBWThreshold, value: %d", *(unsigned int *)(*(void *)(a1 + 40) + 452) message];
  }
  id v3 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"Cell_Configured_Bandwidth_Threshold"];
  if (v3)
  {
    *(_DWORD *)(*(void *)(a1 + 40) + 456) = [v3 intValue];
    +[WCM_Logging logLevel:22, @"CellularProductExperimentsManager: setTrialParameters: mCellConfiguredBandwidth, value: %d", *(unsigned int *)(*(void *)(a1 + 40) + 456) message];
  }
  id v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"Cell_RSRP_4G5GvsWiFi_Threshold"];
  if (v4)
  {
    *(_DWORD *)(*(void *)(a1 + 40) + 460) = [v4 intValue];
    +[WCM_Logging logLevel:22, @"CellularProductExperimentsManager: setTrialParameters: mCellRSRP4G5GvsWiFiThreshold, value: %d", *(unsigned int *)(*(void *)(a1 + 40) + 460) message];
  }
  id result = [*(id *)(a1 + 32) objectForKeyedSubscript:@"Cell_RSRQ_4G5GvsWiFi_Threshold"];
  if (result)
  {
    *(_DWORD *)(*(void *)(a1 + 40) + 464) = [result intValue];
    return +[WCM_Logging logLevel:22, @"CellularProductExperimentsManager: setTrialParameters: mCellRSRQ4G5GvsWiFiThreshold, value: %d", *(unsigned int *)(*(void *)(a1 + 40) + 464) message];
  }
  return result;
}

void sub_10003EBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10003EBD8(uint64_t a1)
{
  [objc_msgSend(*(id *)(a1 + 32), "PrevAudioErasurePercent") objectAtIndex:[*(id *)(a1 + 32) activeSlot] - 1] doubleValue];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v2;
  if ([*(id *)(a1 + 32) activeSlot])
  {
    if ([*(id *)(a1 + 32) activeSlot] == (id)1)
    {
      id v3 = "CTSubscriptionSlotOne";
    }
    else
    {
      id v4 = [*(id *)(a1 + 32) activeSlot];
      id v3 = "Unknown CTSubscriptionSlot!!!";
      if (v4 == (id)2) {
        id v3 = "CTSubscriptionSlotTwo";
      }
    }
  }
  else
  {
    id v3 = "CTSubscriptionSlotUnknown";
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: active slot %s Erasure %f", "-[WRM_EnhancedCTService getCurrentAudioErasure]_block_invoke", v3, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
}

id sub_10003ED48(uint64_t a1)
{
  [objc_msgSend(*(id *)(a1 + 32), "PrevAudioErasurePercent") replaceObjectAtIndex:((char *)objc_msgSend(*(id *)(a1 + 32), "activeSlot") - 1) withObject:[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", (double)*(unint64_t *)(a1 + 40))];
  if ([*(id *)(a1 + 32) activeSlot])
  {
    if ([*(id *)(a1 + 32) activeSlot] == (id)1)
    {
      uint64_t v2 = "CTSubscriptionSlotOne";
    }
    else
    {
      id v3 = [*(id *)(a1 + 32) activeSlot];
      uint64_t v2 = "Unknown CTSubscriptionSlot!!!";
      if (v3 == (id)2) {
        uint64_t v2 = "CTSubscriptionSlotTwo";
      }
    }
  }
  else
  {
    uint64_t v2 = "CTSubscriptionSlotUnknown";
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: active slot %s Erasure %f", "-[WRM_EnhancedCTService updateVoLTESpeechErasure:]_block_invoke", v2, *(void *)(a1 + 40));
}

id sub_10003F4B8(uint64_t a1)
{
  float v2 = (float)[[(id)[*(id *)(a1 + 32) bars] objectAtIndex:0] intValue];
  id v3 = [*(id *)(a1 + 32) movingAverageSignalBars];
  *(float *)&double v4 = v2;
  [v3 replaceObjectAtIndex:0 withObject:[NSNumber numberWithFloat:v4]];
  float v5 = (float)[[(id)[*(id *)(a1 + 32) bars] objectAtIndex:1] intValue];
  id v6 = [*(id *)(a1 + 32) movingAverageSignalBars];
  *(float *)&double v7 = v5;
  uint64_t v8 = +[NSNumber numberWithFloat:v7];

  return [v6 replaceObjectAtIndex:1 withObject:v8];
}

id sub_10003F5F4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) movingAverageSignalBars];
  LODWORD(v3) = 5.0;
  [v2 replaceObjectAtIndex:0 withObject:[NSNumber numberWithFloat:v3]];
  id v4 = [*(id *)(a1 + 32) movingAverageSignalBars];
  LODWORD(v5) = 5.0;
  id v6 = +[NSNumber numberWithFloat:v5];

  return [v4 replaceObjectAtIndex:1 withObject:v6];
}

void sub_10003F810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10003F828(uint64_t a1)
{
  id result = [[[objc_msgSend(*(id *)(a1 + 32), "stallDetected") objectAtIndex:*(void *)(a1 + 48) - 1] intValue];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result != 0;
  return result;
}

id sub_10003F9A4(uint64_t a1)
{
  [objc_msgSend(*(id *)(a1 + 32), "servCellRSSI") replaceObjectAtIndex:*(void *)(a1 + 40) - 1 withObject:[NSNumber numberWithDouble:*(double *)(a1 + 48)]];
  id v2 = "CTSubscriptionSlotUnknown";
  double v3 = "CTSubscriptionSlotOne";
  uint64_t v4 = *(void *)(a1 + 40);
  double v5 = "Unknown CTSubscriptionSlot!!!";
  if (v4 == 2) {
    double v5 = "CTSubscriptionSlotTwo";
  }
  if (v4 != 1) {
    double v3 = v5;
  }
  if (v4) {
    id v2 = v3;
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: slot %s RSSI %f", "-[WRM_EnhancedCTService setServingCellRSSI:forSim:]_block_invoke", v2, *(void *)(a1 + 48));
}

_DWORD *sub_10003FB00(uint64_t a1)
{
  [objc_msgSend(*(id *)(a1 + 32), "servCellRSRP") replaceObjectAtIndex:*(void *)(a1 + 40) - 1 withObject:[NSNumber numberWithDouble:*(double *)(a1 + 48)]];
  id v2 = "CTSubscriptionSlotUnknown";
  double v3 = "CTSubscriptionSlotOne";
  uint64_t v4 = *(void *)(a1 + 40);
  double v5 = "Unknown CTSubscriptionSlot!!!";
  if (v4 == 2) {
    double v5 = "CTSubscriptionSlotTwo";
  }
  if (v4 != 1) {
    double v3 = v5;
  }
  if (v4) {
    id v2 = v3;
  }
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: slot %d RSRP %f", "-[WRM_EnhancedCTService setServingCellRSRP:forSim:]_block_invoke", v2, *(void *)(a1 + 48));
  id result = *(_DWORD **)(a1 + 32);
  if (result[95] == 2)
  {
    double v7 = *(double *)(a1 + 48);
    return [result monitorStrongSOSSignal:v7];
  }
  return result;
}

id sub_10003FC9C(uint64_t a1)
{
  [objc_msgSend(*(id *)(a1 + 32), "servCellSNR") replaceObjectAtIndex:*(void *)(a1 + 40) - 1 withObject:[NSNumber numberWithDouble:*(double *)(a1 + 48)]];
  id v2 = "CTSubscriptionSlotUnknown";
  double v3 = "CTSubscriptionSlotOne";
  uint64_t v4 = *(void *)(a1 + 40);
  double v5 = "Unknown CTSubscriptionSlot!!!";
  if (v4 == 2) {
    double v5 = "CTSubscriptionSlotTwo";
  }
  if (v4 != 1) {
    double v3 = v5;
  }
  if (v4) {
    id v2 = v3;
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: slot %s SNR %f", "-[WRM_EnhancedCTService setServingCellSNR:forSim:]_block_invoke", v2, *(void *)(a1 + 48));
}

id sub_10003FDF8(uint64_t a1)
{
  [objc_msgSend(*(id *)(a1 + 32), "servCellSINR") replaceObjectAtIndex:*(void *)(a1 + 40) - 1 withObject:[NSNumber numberWithDouble:*(double *)(a1 + 48)]];
  id v2 = "CTSubscriptionSlotUnknown";
  double v3 = "CTSubscriptionSlotOne";
  uint64_t v4 = *(void *)(a1 + 40);
  double v5 = "Unknown CTSubscriptionSlot!!!";
  if (v4 == 2) {
    double v5 = "CTSubscriptionSlotTwo";
  }
  if (v4 != 1) {
    double v3 = v5;
  }
  if (v4) {
    id v2 = v3;
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: slot %s SNR %f", "-[WRM_EnhancedCTService setServingCellSINR:forSim:]_block_invoke", v2, *(void *)(a1 + 48));
}

id sub_10003FF54(uint64_t a1)
{
  [objc_msgSend(*(id *)(a1 + 32), "servCellRSRQ") replaceObjectAtIndex:*(void *)(a1 + 40) - 1 withObject:[NSNumber numberWithDouble:*(double *)(a1 + 48)]];
  id v2 = "CTSubscriptionSlotUnknown";
  double v3 = "CTSubscriptionSlotOne";
  uint64_t v4 = *(void *)(a1 + 40);
  double v5 = "Unknown CTSubscriptionSlot!!!";
  if (v4 == 2) {
    double v5 = "CTSubscriptionSlotTwo";
  }
  if (v4 != 1) {
    double v3 = v5;
  }
  if (v4) {
    id v2 = v3;
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: slot %s RSRQ %f", "-[WRM_EnhancedCTService setServingCellRSRQ:forSim:]_block_invoke", v2, *(void *)(a1 + 48));
}

void sub_1000400D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000400EC(uint64_t a1)
{
  [objc_msgSend(*(id *)(a1 + 32), "servCellRSSI") objectAtIndex:objc_msgSend(*(id *)(a1 + 32), "activeSlot") - 1] doubleValue];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v2;
  if ([*(id *)(a1 + 32) activeSlot])
  {
    if ([*(id *)(a1 + 32) activeSlot] == (id)1)
    {
      double v3 = "CTSubscriptionSlotOne";
    }
    else
    {
      id v4 = [*(id *)(a1 + 32) activeSlot];
      double v3 = "Unknown CTSubscriptionSlot!!!";
      if (v4 == (id)2) {
        double v3 = "CTSubscriptionSlotTwo";
      }
    }
  }
  else
  {
    double v3 = "CTSubscriptionSlotUnknown";
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: active slot %s RSSI %f", "-[WRM_EnhancedCTService getServingCellRSSI]_block_invoke", v3, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
}

void sub_100040284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10004029C(uint64_t a1)
{
  [objc_msgSend(*(id *)(a1 + 32), "servCellRSRP") objectAtIndex:objc_msgSend(*(id *)(a1 + 32), "activeSlot") - 1] doubleValue];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v2;
  if ([*(id *)(a1 + 32) activeSlot])
  {
    if ([*(id *)(a1 + 32) activeSlot] == (id)1)
    {
      double v3 = "CTSubscriptionSlotOne";
    }
    else
    {
      id v4 = [*(id *)(a1 + 32) activeSlot];
      double v3 = "Unknown CTSubscriptionSlot!!!";
      if (v4 == (id)2) {
        double v3 = "CTSubscriptionSlotTwo";
      }
    }
  }
  else
  {
    double v3 = "CTSubscriptionSlotUnknown";
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: active slot %s RSRP %f", "-[WRM_EnhancedCTService getServingCellRSRP]_block_invoke", v3, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
}

void sub_100040444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10004045C(uint64_t a1)
{
  [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "servCellRSRP"), "objectAtIndex:", *(void *)(a1 + 48) - 1), "doubleValue");
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v2;
  double v3 = "CTSubscriptionSlotUnknown";
  id v4 = "CTSubscriptionSlotOne";
  double v5 = "Unknown CTSubscriptionSlot!!!";
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6 == 2) {
    double v5 = "CTSubscriptionSlotTwo";
  }
  if (v6 != 1) {
    id v4 = v5;
  }
  if (v6) {
    double v3 = v4;
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: sim slot %s RSRP %f", "-[WRM_EnhancedCTService getServingCellRSRP:]_block_invoke", v3, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
}

void sub_1000405CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000405E4(uint64_t a1)
{
  [objc_msgSend(*(id *)(a1 + 32), "servCellSNR") objectAtIndex:[*(id *)(a1 + 32) activeSlot] - 1] doubleValue];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v2;
  if ([*(id *)(a1 + 32) activeSlot])
  {
    if ([*(id *)(a1 + 32) activeSlot] == (id)1)
    {
      double v3 = "CTSubscriptionSlotOne";
    }
    else
    {
      id v4 = [*(id *)(a1 + 32) activeSlot];
      double v3 = "Unknown CTSubscriptionSlot!!!";
      if (v4 == (id)2) {
        double v3 = "CTSubscriptionSlotTwo";
      }
    }
  }
  else
  {
    double v3 = "CTSubscriptionSlotUnknown";
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: active slot %s SNR %f", "-[WRM_EnhancedCTService getServingCellSNR]_block_invoke", v3, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
}

void sub_10004078C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000407A4(uint64_t a1)
{
  [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "servCellSNR"), "objectAtIndex:", *(void *)(a1 + 48) - 1), "doubleValue");
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v2;
  double v3 = "CTSubscriptionSlotUnknown";
  id v4 = "CTSubscriptionSlotOne";
  double v5 = "Unknown CTSubscriptionSlot!!!";
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6 == 2) {
    double v5 = "CTSubscriptionSlotTwo";
  }
  if (v6 != 1) {
    id v4 = v5;
  }
  if (v6) {
    double v3 = v4;
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: sim slot %s SNR %f", "-[WRM_EnhancedCTService getServingCellSNR:]_block_invoke", v3, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
}

void sub_100040910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100040928(uint64_t a1)
{
  [objc_msgSend(*(id *)(a1 + 32), "servCellSINR") objectAtIndex:[*(id *)(a1 + 32) activeSlot] - 1] doubleValue];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v2;
  if ([*(id *)(a1 + 32) activeSlot])
  {
    if ([*(id *)(a1 + 32) activeSlot] == (id)1)
    {
      double v3 = "CTSubscriptionSlotOne";
    }
    else
    {
      id v4 = [*(id *)(a1 + 32) activeSlot];
      double v3 = "Unknown CTSubscriptionSlot!!!";
      if (v4 == (id)2) {
        double v3 = "CTSubscriptionSlotTwo";
      }
    }
  }
  else
  {
    double v3 = "CTSubscriptionSlotUnknown";
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: active slot %s SNR %f", "-[WRM_EnhancedCTService getServingCellSINR]_block_invoke", v3, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
}

void sub_100040AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100040AD8(uint64_t a1)
{
  [objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "servCellRSRQ"), "objectAtIndex:", (char *)objc_msgSend(*(id *)(a1 + 32), "activeSlot") - 1) doubleValue];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v2;
  if ([*(id *)(a1 + 32) activeSlot])
  {
    if ([*(id *)(a1 + 32) activeSlot] == (id)1)
    {
      double v3 = "CTSubscriptionSlotOne";
    }
    else
    {
      id v4 = [*(id *)(a1 + 32) activeSlot];
      double v3 = "Unknown CTSubscriptionSlot!!!";
      if (v4 == (id)2) {
        double v3 = "CTSubscriptionSlotTwo";
      }
    }
  }
  else
  {
    double v3 = "CTSubscriptionSlotUnknown";
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: active slot %s RSRQ %f", "-[WRM_EnhancedCTService getServingCellRSRQ]_block_invoke", v3, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
}

void sub_100040C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100040C98(uint64_t a1)
{
  [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "servCellRSRQ"), "objectAtIndex:", *(void *)(a1 + 48) - 1), "doubleValue"];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v2;
  double v3 = "CTSubscriptionSlotUnknown";
  id v4 = "CTSubscriptionSlotOne";
  double v5 = "Unknown CTSubscriptionSlot!!!";
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6 == 2) {
    double v5 = "CTSubscriptionSlotTwo";
  }
  if (v6 != 1) {
    id v4 = v5;
  }
  if (v6) {
    double v3 = v4;
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: sim slot %s RSRQ %f", "-[WRM_EnhancedCTService getServingCellRSRQ:]_block_invoke", v3, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
}

void sub_100040E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100040E1C(uint64_t a1)
{
  [objc_msgSend(*(id *)(a1 + 32), "servCellRSCP") objectAtIndex:[*(id *)(a1 + 32) activeSlot] - 1] doubleValue];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v2;
  if ([*(id *)(a1 + 32) activeSlot])
  {
    if ([*(id *)(a1 + 32) activeSlot] == (id)1)
    {
      double v3 = "CTSubscriptionSlotOne";
    }
    else
    {
      id v4 = [*(id *)(a1 + 32) activeSlot];
      double v3 = "Unknown CTSubscriptionSlot!!!";
      if (v4 == (id)2) {
        double v3 = "CTSubscriptionSlotTwo";
      }
    }
  }
  else
  {
    double v3 = "CTSubscriptionSlotUnknown";
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: active slot %s RSCP %f", "-[WRM_EnhancedCTService getServingCellRSCP]_block_invoke", v3, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
}

void sub_100040FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100040FDC(uint64_t a1)
{
  [objc_msgSend(*(id *)(a1 + 32), "servCellRSCP") objectAtIndex:*(void *)(a1 + 48) - 1]
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v2;
  double v3 = "CTSubscriptionSlotUnknown";
  id v4 = "CTSubscriptionSlotOne";
  double v5 = "Unknown CTSubscriptionSlot!!!";
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6 == 2) {
    double v5 = "CTSubscriptionSlotTwo";
  }
  if (v6 != 1) {
    id v4 = v5;
  }
  if (v6) {
    double v3 = v4;
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: sim slot %s RSCP %f", "-[WRM_EnhancedCTService getServingCellRSCP:]_block_invoke", v3, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
}

void sub_100041148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100041160(uint64_t a1)
{
  [objc_msgSend(*(id *)(a1 + 32), "servCellECIO") objectAtIndex:[*(id *)(a1 + 32) activeSlot] - 1] doubleValue];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v2;
  if ([*(id *)(a1 + 32) activeSlot])
  {
    if ([*(id *)(a1 + 32) activeSlot] == (id)1)
    {
      double v3 = "CTSubscriptionSlotOne";
    }
    else
    {
      id v4 = [*(id *)(a1 + 32) activeSlot];
      double v3 = "Unknown CTSubscriptionSlot!!!";
      if (v4 == (id)2) {
        double v3 = "CTSubscriptionSlotTwo";
      }
    }
  }
  else
  {
    double v3 = "CTSubscriptionSlotUnknown";
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: active slot %s ECIO %f", "-[WRM_EnhancedCTService getServingCellECIO]_block_invoke", v3, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
}

void sub_100041308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100041320(uint64_t a1)
{
  [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "servCellECIO"), "objectAtIndex:", *(void *)(a1 + 48) - 1), "doubleValue"];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v2;
  double v3 = "CTSubscriptionSlotUnknown";
  id v4 = "CTSubscriptionSlotOne";
  double v5 = "Unknown CTSubscriptionSlot!!!";
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6 == 2) {
    double v5 = "CTSubscriptionSlotTwo";
  }
  if (v6 != 1) {
    id v4 = v5;
  }
  if (v6) {
    double v3 = v4;
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: sim slot %s ECIO %f", "-[WRM_EnhancedCTService getServingCellECIO:]_block_invoke", v3, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
}

void sub_100041494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000414AC(uint64_t a1)
{
  uint64_t v2 = "CTSubscriptionSlotOne";
  uint64_t v3 = *(void *)(a1 + 48);
  id v4 = "Unknown CTSubscriptionSlot!!!";
  if (v3 == 2) {
    id v4 = "CTSubscriptionSlotTwo";
  }
  if (v3 != 1) {
    uint64_t v2 = v4;
  }
  if (v3) {
    double v5 = v2;
  }
  else {
    double v5 = "CTSubscriptionSlotUnknown";
  }
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: sim slot %s bars %@", "-[WRM_EnhancedCTService getCurrentSignalBars:]_block_invoke", v5, [*(id *)(a1 + 32) bars]);
  id result = [[[*(id *)(a1 + 32) bars] objectAtIndex:*(void *)(a1 + 48) - 1] intValue];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (int)result;
  return result;
}

id sub_100042464(uint64_t a1, uint64_t a2, void *a3)
{
  id result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"CTSubscriptionSlotOne: CTSignalStrengthInfo %@ error %@", a2, [a3 description]);
  if (a2 && !a3)
  {
    double v7 = *(void **)(a1 + 32);
    return [v7 processSignalStrengthInfo:a2 :1];
  }
  return result;
}

id sub_1000424FC(uint64_t a1, uint64_t a2, void *a3)
{
  id result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"CTSubscriptionSlotOne: isDataAttached %d error %@", a2, [a3 localizedDescription]);
  if (!a3)
  {
    double v7 = *(void **)(a1 + 32);
    return [v7 processDataAttached:a2 :1];
  }
  return result;
}

id sub_100042594(uint64_t a1, uint64_t a2, void *a3)
{
  id result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"CTSubscriptionSlotOne:  Registration status %@ error %@", a2, [a3 localizedDescription]);
  if (a2 && !a3)
  {
    double v7 = *(void **)(a1 + 32);
    return [v7 processRegistrationStatus:a2 :1];
  }
  return result;
}

id sub_10004262C(uint64_t a1, uint64_t a2, void *a3)
{
  id result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"CTSubscriptionSlotOne:  copyMobileCountryCode %@ error %@", a2, [a3 localizedDescription]);
  if (a2 && !a3)
  {
    double v7 = *(void **)(a1 + 32);
    return [v7 processMobileCountryCode:a2 :1];
  }
  return result;
}

id sub_1000426C4(uint64_t a1, uint64_t a2, void *a3)
{
  id result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"CTSubscriptionSlotOne:  copyMobileNetworkCode %@ error %@", a2, [a3 localizedDescription]);
  if (a2 && !a3)
  {
    double v7 = *(void **)(a1 + 32);
    return [v7 processMobileNetworkCode:a2 :1];
  }
  return result;
}

id sub_10004275C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"CTSubscriptionSlotOne: kCTCapabilityVoLTE %d info %@ error %@", a2, a3, [a4 localizedDescription]);
  if (!a4)
  {
    uint64_t v8 = *(void **)(a1 + 32);
    return [v8 processVolteStatus:a2 :1];
  }
  return result;
}

id sub_100042808(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"CTSubscriptionSlotOne: kCTCapabilityWiFiCalling %d info %@ error %@", a2, a3, [a4 localizedDescription]);
  if (!a4)
  {
    uint64_t v8 = *(void **)(a1 + 32);
    return [v8 processWiFiCallingStatus:a2 :1];
  }
  return result;
}

id sub_1000428B4(uint64_t a1, uint64_t a2, void *a3)
{
  id result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"CTSubscriptionSlotOne:  RAT info %@ error %@", a2, [a3 localizedDescription]);
  if (a2 && !a3)
  {
    double v7 = *(void **)(a1 + 32);
    return [v7 processRadioTechnologyInfo:a2 :1];
  }
  return result;
}

id sub_10004294C(uint64_t a1, uint64_t a2, void *a3)
{
  id result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"CTSubscriptionSlotOne:  Voice linkQuality %@ error %@", a2, [a3 localizedDescription]);
  if (a2 && !a3)
  {
    double v7 = *(void **)(a1 + 32);
    return [v7 processVoiceLinkQualityInfo:a2 :1];
  }
  return result;
}

id sub_1000429E4(uint64_t a1, uint64_t a2, void *a3)
{
  id result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"CTSubscriptionSlotOne:  Enhanced Voice linkQuality %@ error %@", a2, [a3 localizedDescription]);
  if (a2 && !a3)
  {
    double v7 = *(void **)(a1 + 32);
    return [v7 processEnhancedVoiceLinkQualityBlob:a2 :1];
  }
  return result;
}

id sub_100042A7C(uint64_t a1, uint64_t a2, void *a3)
{
  id result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"CTSubscriptionSlotTwo: isDataattached %d error %@", a2, [a3 localizedDescription]);
  if (!a3)
  {
    double v7 = *(void **)(a1 + 32);
    return [v7 processDataAttached:a2 :2];
  }
  return result;
}

id sub_100042B14(uint64_t a1, uint64_t a2, void *a3)
{
  id result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"CTSubscriptionSlotTwo: CTSignalStrengthInfo %@ error %@", a2, [a3 localizedDescription]);
  if (a2 && !a3)
  {
    double v7 = *(void **)(a1 + 32);
    return [v7 processSignalStrengthInfo:a2 :2];
  }
  return result;
}

id sub_100042BAC(uint64_t a1, uint64_t a2, void *a3)
{
  id result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"CTSubscriptionSlotTwo:  Registration status %@ error %@", a2, [a3 localizedDescription]);
  if (a2 && !a3)
  {
    double v7 = *(void **)(a1 + 32);
    return [v7 processRegistrationStatus:a2 :2];
  }
  return result;
}

id sub_100042C44(uint64_t a1, uint64_t a2, void *a3)
{
  id result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"CTSubscriptionSlotTwo:  copyMobileCountryCode %@ error %@", a2, [a3 localizedDescription]);
  if (a2 && !a3)
  {
    double v7 = *(void **)(a1 + 32);
    return [v7 processMobileCountryCode:a2 :2];
  }
  return result;
}

id sub_100042CDC(uint64_t a1, uint64_t a2, void *a3)
{
  id result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"CTSubscriptionSlotTwo:  copyMobileNetworkCode %@ error %@", a2, [a3 localizedDescription]);
  if (a2 && !a3)
  {
    double v7 = *(void **)(a1 + 32);
    return [v7 processMobileNetworkCode:a2 :2];
  }
  return result;
}

id sub_100042D74(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"CTSubscriptionSlotTwo: kCTCapabilityVoLTE %d info %@ error %@", a2, a3, [a4 localizedDescription]);
  if (!a4)
  {
    uint64_t v8 = *(void **)(a1 + 32);
    return [v8 processVolteStatus:a2 :2];
  }
  return result;
}

id sub_100042E20(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"CTSubscriptionSlotTwo: kCTCapabilityWiFiCalling %d info %@ error %@", a2, a3, [a4 localizedDescription]);
  if (!a4)
  {
    uint64_t v8 = *(void **)(a1 + 32);
    return [v8 processWiFiCallingStatus:a2 :2];
  }
  return result;
}

id sub_100042ECC(uint64_t a1, uint64_t a2, void *a3)
{
  id result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"CTSubscriptionSlotTwo:  RAT info %@ error %@", a2, [a3 localizedDescription]);
  if (a2 && !a3)
  {
    double v7 = *(void **)(a1 + 32);
    return [v7 processRadioTechnologyInfo:a2 :2];
  }
  return result;
}

id sub_100042F64(uint64_t a1, uint64_t a2, void *a3)
{
  id result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"CTSubscriptionSlotTwo:  Voice linkQuality %@ error %@", a2, [a3 localizedDescription]);
  if (a2 && !a3)
  {
    double v7 = *(void **)(a1 + 32);
    return [v7 processVoiceLinkQualityInfo:a2 :2];
  }
  return result;
}

id sub_100042FFC(uint64_t a1, uint64_t a2, void *a3)
{
  id result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"CTSubscriptionSlotTwo: Enhanced Voice linkQuality %@ error %@", a2, [a3 localizedDescription]);
  if (a2 && !a3)
  {
    double v7 = *(void **)(a1 + 32);
    return [v7 processEnhancedVoiceLinkQualityBlob:a2 :2];
  }
  return result;
}

id sub_100043124(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) isDataAttached];
  uint64_t v3 = *(void *)(a1 + 40) - 1;
  id v4 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 48)];

  return [v2 replaceObjectAtIndex:v3 withObject:v4];
}

id sub_10004321C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) isVolteSupported];
  uint64_t v3 = *(void *)(a1 + 40) - 1;
  id v4 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 48)];

  return [v2 replaceObjectAtIndex:v3 withObject:v4];
}

id sub_100043314(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    CFStringRef v2 = @"expensive";
  }
  else {
    CFStringRef v2 = @"in-expensive";
  }
  [*(id *)(a1 + 32) slotID];
  +[WCM_Logging logLevel:22, @"Interface cost is %@ for %s", v2, CTSubscriptionSlotAsString() message];
  [objc_msgSend(*(id *)(a1 + 40), "isExpensive") replaceObjectAtIndex:(char *)objc_msgSend(*(id *)(a1 + 32), "slotID") - 1 withObject:[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 48))];
  id v3 = [*(id *)(a1 + 40) deviceICheapFR2Coverage];
  id v4 = +[WRM_HandoverManager WRM_HandoverManagerSingleton];

  return [v4 evalFR2CoverageLikely:v3];
}

id sub_10004353C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    CFStringRef v2 = @"enabled";
  }
  else {
    CFStringRef v2 = @"disabled";
  }
  [*(id *)(a1 + 32) slotID];
  +[WCM_Logging logLevel:22, @"smartDataModeChanged  %@ for %s", v2, CTSubscriptionSlotAsString() message];
  id v3 = [*(id *)(a1 + 40) CTClient];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_100043614;
  v5[3] = &unk_10020DD98;
  return [v3 getMaxDataRate:*(void *)(a1 + 32) completion:v5];
}

id sub_100043614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    return +[WCM_Logging logLevel:22, @"smartDataModeChanged: getMaxDataRate %@", a3 message];
  }
  BOOL v5 = a2 == 3;
  +[WCM_Logging logLevel:22, @"smartDataModeChanged: contenxt: %@: data mode LTE %d", *(void *)(a1 + 32), v5 message];
  [objc_msgSend(*(id *)(a1 + 40), "dataModeLTE") replaceObjectAtIndex:((char *)objc_msgSend(*(id *)(a1 + 32), "slotID") - 1) withObject:[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v5)];
  id v6 = [*(id *)(a1 + 40) deviceICheapFR2Coverage];
  id v7 = +[WRM_HandoverManager WRM_HandoverManagerSingleton];

  return [v7 evalFR2CoverageLikely:v6];
}

id sub_100043794(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) isWiFiCallingSupported];
  uint64_t v3 = *(void *)(a1 + 40) - 1;
  id v4 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 48)];

  return [v2 replaceObjectAtIndex:v3 withObject:v4];
}

id sub_10004388C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) isPrivateNetworkSim];
  uint64_t v3 = *(void *)(a1 + 40) - 1;
  id v4 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 48)];

  return [v2 replaceObjectAtIndex:v3 withObject:v4];
}

id sub_100043984(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) isPrivateNetworkPreferredOverWifi];
  uint64_t v3 = *(void *)(a1 + 40) - 1;
  id v4 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 48)];

  return [v2 replaceObjectAtIndex:v3 withObject:v4];
}

id sub_100043A7C(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 428) getAirPlaneMode];
  id v2 = [*(id *)(*(void *)(a1 + 32) + 428) isAirPlaneModeEnabled];
  [+[NSDate date] timeIntervalSince1970];
  double v4 = v3;
  if ([*(id *)(a1 + 40) isEqualToString:@"kCTRegistrationStatusRegisteredHome"]) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = (uint64_t)[*(id *)(a1 + 40) isEqualToString:@"kCTRegistrationStatusRegisteredRoaming"];
  }
  id v6 = [*(id *)(a1 + 40) isEqualToString:@"kCTRegistrationStatusRegisteredRoaming"];
  [objc_msgSend(*(id *)(a1 + 32), "isDeviceRegistered") replaceObjectAtIndex:*(void *)(a1 + 48) - 1 withObject:[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v5)];
  [objc_msgSend(*(id *)(a1 + 32), "isRoaming") replaceObjectAtIndex:*(void *)(a1 + 48) - 1 withObject:[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v6)];
  [WCM_Logging logLevel:22 message:@"%s: isDeviceRegistered %@ isRoaming %@", @"-[WRM_EnhancedCTService processRegistrationStatus::]_block_invoke", [*(id *)(a1 + 32) isDeviceRegistered], objc_msgSend(*(id *)(a1 + 32), "isRoaming")];
  id v7 = *(void **)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);

  return [v7 updateCellularAvailabilityStatus:v8 :v9 :v2 :v4];
}

unsigned char *sub_100043E40(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 372) replaceObjectAtIndex:*(void *)(a1 + 48) - 1 withObject:[NSNumber numberWithInt:objc_msgSend(*(id *)(a1 + 32), "parseRegistrationStatusForBiomeStream:", *(void *)(a1 + 40))]];
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: CTSubscriptionSlot %d mCellularAvailabilityStatus %@ (%@)", "-[WRM_EnhancedCTService updateCellularAvailabilityStatus::::]_block_invoke", *(void *)(a1 + 48), [*(id *)(*(void *)(a1 + 32) + 372) objectAtIndexedSubscript:*(void *)(a1 + 48) - 1], *(void *)(a1 + 40));
  id result = *(unsigned char **)(a1 + 32);
  if (result[420]
    || (*(unsigned char *)(*(void *)(a1 + 32) + 420) = [result isWatchAssociated],
        id result = *(unsigned char **)(a1 + 32),
        result[420]))
  {
    double v3 = *(double *)(a1 + 56);
    uint64_t v4 = *(unsigned __int8 *)(a1 + 64);
    return [result writeToCellularAvailabilityStatusBiomeStream:v4 :v3];
  }
  return result;
}

id sub_100043FE0(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) intValue];
  if (result != 0xFFFF)
  {
    id v3 = result;
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"slot %d processMobileCountryCode current self.mcc=%@, new mcc=%d", *(void *)(a1 + 48), [*(id *)(a1 + 40) mcc], result);
    id v4 = [*(id *)(a1 + 40) mcc];
    uint64_t v5 = *(void *)(a1 + 48) - 1;
    id v6 = +[NSNumber numberWithInt:v3];
    return [v4 replaceObjectAtIndex:v5 withObject:v6];
  }
  return result;
}

id sub_100044138(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) intValue];
  if (result != 0xFFFF)
  {
    id v3 = result;
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"slot %d processMobileNetworkCode current self.mnc=%@, new mnc=%d", *(void *)(a1 + 48), [*(id *)(a1 + 40) mnc], result);
    id v4 = [*(id *)(a1 + 40) mnc];
    uint64_t v5 = *(void *)(a1 + 48) - 1;
    id v6 = +[NSNumber numberWithInt:v3];
    return [v4 replaceObjectAtIndex:v5 withObject:v6];
  }
  return result;
}

id sub_100044290(uint64_t a1)
{
  id v2 = [[objc_msgSend(*(id *)(a1 + 32), "linkQuality") intValue];
  id v3 = [[[*(id *)(a1 + 40) bars] objectAtIndex:*(void *)(a1 + 48) - 1] intValue];
  if (v2 != 10 || (int)v3 < 3)
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: Rcvd Voice LQM from CT: %d", "-[WRM_EnhancedCTService processVoiceLinkQualityInfo::]_block_invoke", v2);
    if (v2 && (v2 + 2) <= 0x66)
    {
      [objc_msgSend(*(id *)(a1 + 40), "VoiceLqmValue") replaceObjectAtIndex:*(void *)(a1 + 48) - 1 withObject:[NSNumber numberWithInt:v2]];
      [objc_msgSend(*(id *)(a1 + 40), "VoiceLqmIsValid") replaceObjectAtIndex:*(void *)(a1 + 48) - 1 withObject:[NSNumber numberWithBool:1]];
    }
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: Ignoring Rcvd Voice LQM from CT: %d since signalbars %d", "-[WRM_EnhancedCTService processVoiceLinkQualityInfo::]_block_invoke", 10, v3);
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: vLQM valid %d vLQM %d", "-[WRM_EnhancedCTService processVoiceLinkQualityInfo::]_block_invoke", [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "VoiceLqmIsValid"), "objectAtIndex:", *(void *)(a1 + 48) - 1), "BOOLValue") intValue], [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "VoiceLqmValue"), "objectAtIndex:", *(void *)(a1 + 48) - 1), "intValue") intValue]);
}

id *sub_100044744(id *result)
{
  unsigned __int8 v13 = 0;
  __int16 v11 = 0;
  unsigned __int8 v10 = 0;
  if (result[6])
  {
    uint64_t v1 = result;
    [result[4] checkAndScheduleSpeedTest];
    if (![v1[5] enhancedLinkQuality]) {
      return (id *)+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: Data LQM BLOB is empty", "-[WRM_EnhancedCTService processEnhancedDataLQMBlob::]_block_invoke");
    }
    char v12 = 0;
    [objc_msgSend(v1[5], "enhancedLinkQuality") getBytes:&v13 range:0, 1];
    if (v13 - 1 >= 2)
    {
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s Data LQM version is not supported ver=%u", "-[WRM_EnhancedCTService processEnhancedDataLQMBlob::]_block_invoke", v13);
      goto LABEL_36;
    }
    if ([v1[5] metricType] != (id)1)
    {
      if ([v1[5] metricType])
      {
        if ([v1[5] metricType] == (id)1)
        {
          id v3 = "CTEnhancedLQMIndicationTypeLinkState";
        }
        else if ([v1[5] metricType] == (id)2)
        {
          id v3 = "CTEnhancedLQMIndicationTypeLinkQualityFingerprint";
        }
        else if ([v1[5] metricType] == (id)3)
        {
          id v3 = "CTEnhancedLQMIndicationTypeTrafficClass";
        }
        else if ([v1[5] metricType] == (id)4)
        {
          id v3 = "CTEnhancedLQMIndicationTypeDataTransferTime";
        }
        else
        {
          id v9 = [v1[5] metricType];
          id v3 = "Unknown CTEnhancedLQMIndicationType!!!";
          if (v9 == (id)5) {
            id v3 = "CTEnhancedLQMIndicationTypeLinkPowerCost";
          }
        }
      }
      else
      {
        id v3 = "CTEnhancedLQMIndicationTypeUnknown";
      }
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: metricType %s", "-[WRM_EnhancedCTService processEnhancedDataLQMBlob::]_block_invoke", v3);
      goto LABEL_36;
    }
    [objc_msgSend(v1[5], "enhancedLinkQuality") getBytes:&v12 range:1];
    if (v12)
    {
      int v2 = 1;
      [objc_msgSend(v1[5], "enhancedLinkQuality") getBytes:&v11 + 1 range:NSMakeRange(1, 2)];
      if (HIBYTE(v11) > 9u) {
        goto LABEL_9;
      }
      +[WCM_Logging logLevel:22, @"Discarding invalid data LQM %d", HIBYTE(v11) message];
    }
    int v2 = 0;
LABEL_9:
    if ((v12 & 2) != 0)
    {
      [objc_msgSend(v1[5], "enhancedLinkQuality") getBytes:&v11 range:3];
      id v4 = [v1[4] rrcState];
      [v4 replaceObjectAtIndex:(char *)v1[6] - 1 withObject:[NSNumber numberWithInt:v11]];
      if ((v12 & 4) == 0)
      {
LABEL_11:
        if (!v2)
        {
LABEL_36:
          id result = [[+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton") isRecentDevice];
          if (result) {
            return (id *)[+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton") evaluateWiFiVersusCell];
          }
          return result;
        }
LABEL_20:
        id v5 = [v1[4] DataLqmValue];
        [v5 replaceObjectAtIndex:(char *)v1[6] - 1 withObject:[NSNumber numberWithInt:SHIBYTE(v11)]];
        [objc_msgSend(v1[4], "DataLqmIsValid") replaceObjectAtIndex:(char *)v1[6] - 1 withObject:[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1)];
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s Received eLQM notification from BB, Version: %d, LQM: %d, RRC state: %d, Cell interface state: %d", "-[WRM_EnhancedCTService processEnhancedDataLQMBlob::]_block_invoke", v13, SHIBYTE(v11), v11, v10);
        id v6 = +[WCM_PolicyManager singleton];
        [v6 updateLqmState:SHIBYTE(v11) deviceRRCState:v11 subscriptionSlot:v1[6]];
        id v7 = v1[4];
        if (v7[484])
        {
          if (HIBYTE(v11) == 10
            && (objc_msgSend(objc_msgSend(objc_msgSend(v7, "cbrsCoreAnalyticsMetricsSent"), "objectAtIndex:", (char *)v1[6] - 1), "BOOLValue") & 1) == 0)
          {
            uint64_t v8 = (char *)v1[4];
            if (v1[6] == *(id *)(v8 + 476) && (unint64_t)[v8 numberofSubscriptions] >= 2)
            {
              [+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton") submitMetricsCBRSWithDataSimRecommendation:0 forSimSlot:v1[6]];
              [objc_msgSend(v1[4], "cbrsCoreAnalyticsMetricsSent") replaceObjectAtIndex:(char *)v1[6] - 1 withObject:&__kCFBooleanTrue];
            }
          }
        }
        goto LABEL_36;
      }
    }
    else if ((v12 & 4) == 0)
    {
      goto LABEL_11;
    }
    [objc_msgSend(v1[5], "enhancedLinkQuality") getBytes:&v10 range:4];
    if (!v2) {
      goto LABEL_36;
    }
    goto LABEL_20;
  }
  return result;
}

id sub_100044BE0(uint64_t a1)
{
  if (![*(id *)(a1 + 32) enhancedLinkQuality]) {
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: LQM BLOB is empty", "-[WRM_EnhancedCTService processEnhancedVoiceLinkQualityBlob::]_block_invoke", v40, v42, v43, v44);
  }
  unsigned __int8 v2 = [[objc_msgSend(*(id *)(a1 + 32), "enhancedLinkQuality") length];
  uint64_t v3 = v2;
  id result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s Blob size: %d", "-[WRM_EnhancedCTService processEnhancedVoiceLinkQualityBlob::]_block_invoke", v2);
  if (!v2) {
    return result;
  }
  unsigned __int8 v49 = 0;
  unsigned int v48 = 0;
  [objc_msgSend(*(id *)(a1 + 32), "enhancedLinkQuality") getBytes:&v49 range:0, 1];
  if (v49 <= 3u)
  {
    if (v49 == 1)
    {
      LOBYTE(v47[0]) = 0;
      [objc_msgSend(*(id *)(a1 + 32), "enhancedLinkQuality") getBytes:v47 range:1, 1];
      id v37 = [*(id *)(a1 + 40) VoiceLqmValue];
      [v37 replaceObjectAtIndex:*(void *)(a1 + 48) - 1 withObject:[NSNumber numberWithInt:LOBYTE(v47[0])]];
      [objc_msgSend(*(id *)(a1 + 40), "VoiceLqmIsValid") replaceObjectAtIndex:*(void *)(a1 + 48) - 1 withObject:[NSNumber numberWithBool:1]];
      [objc_msgSend(*(id *)(a1 + 32), "enhancedLinkQuality") getBytes:&v48 range:2];
      id v38 = [*(id *)(a1 + 40) VoiceLqmReasonCode];
      [v38 replaceObjectAtIndex:*(void *)(a1 + 48) - 1 withObject:[NSNumber numberWithInt:v48]];
      return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s BLOB Size: %d, Voice LQM BLOB Version: %d, VoiceLQM: %d, ReasonCode: %d", "-[WRM_EnhancedCTService processEnhancedVoiceLinkQualityBlob::]_block_invoke", v3, v49, LOBYTE(v47[0]), v48);
    }
    if (v49 != 2) {
      return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s processVoiceLQMBlob: LQM version is not supported", "-[WRM_EnhancedCTService processEnhancedVoiceLinkQualityBlob::]_block_invoke", v41, v42, v43, v44);
    }
    memset(v47, 0, 32);
    [objc_msgSend(*(id *)(a1 + 32), "enhancedLinkQuality") getBytes:v47 length:32];
    id v14 = [*(id *)(a1 + 40) VoiceLqmValue];
    [v14 replaceObjectAtIndex:*(void *)(a1 + 48) - 1 withObject:[NSNumber numberWithInt:BYTE1(v47[0])]];
    [objc_msgSend(*(id *)(a1 + 40), "VoiceLqmIsValid") replaceObjectAtIndex:*(void *)(a1 + 48) - 1 withObject:[NSNumber numberWithBool:1]];
    id v15 = [*(id *)(a1 + 40) VoiceLqmReasonCode];
    [v15 replaceObjectAtIndex:*(void *)(a1 + 48) - 1 withObject:[NSNumber numberWithInt:BYTE2(v47[0])]];
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s BLOB Size: %d, Expected size: %d, Voice LQM BLOB Version: %d, VoiceLQM: %d, ReasonCode: %d", "-[WRM_EnhancedCTService processEnhancedVoiceLinkQualityBlob::]_block_invoke", v3, 32, LOBYTE(v47[0]), BYTE1(v47[0]), BYTE2(v47[0]));
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s IMS preference: %d, CodecType: %d, Total Erasures: %u, Total PlayBacks:%u", "-[WRM_EnhancedCTService processEnhancedVoiceLinkQualityBlob::]_block_invoke", BYTE3(v47[0]), HIDWORD(v47[0]), DWORD1(v47[0]), DWORD2(v47[0]));
    id v16 = [*(id *)(a1 + 40) imsVoiceOverPSSupported];
    [v16 replaceObjectAtIndex:*(void *)(a1 + 48) - 1 withObject:[NSNumber numberWithBool:BYTE3(v47[0]) != 0]];
    if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", *(void *)(a1 + 48) - 1), "intValue") == 1)
    {
      double v17 = (double)SLODWORD(v47[1]) * 0.2 + -20.0;
      id v18 = [*(id *)(a1 + 40) servCellRSRP];
      [v18 replaceObjectAtIndex:*(void *)(a1 + 48) - 1 withObject:[NSNumber numberWithDouble:SDWORD1(v47[1])]];
      [objc_msgSend(*(id *)(a1 + 40), "servCellSINR") replaceObjectAtIndex:*(void *)(a1 + 48) - 1 withObject:[NSNumber numberWithDouble:v17]];
      [objc_msgSend(*(id *)(a1 + 40), "servCellRSRP") objectAtIndex:*(void *)(a1 + 48) - 1]
      uint64_t v20 = v19;
      [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellSINR"), "objectAtIndex:", *(void *)(a1 + 48) - 1), "doubleValue"];
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s RSRP: %f, SINR: %f", "-[WRM_EnhancedCTService processEnhancedVoiceLinkQualityBlob::]_block_invoke", v20, v21);
    }
    else
    {
      [*(id *)(a1 + 40) dataPreferredSlot];
    }
    [*(id *)(a1 + 40) updateAudioQuality:*(void *)((char *)v47 + 4) HIDWORD(v47[0]) *(void *)(a1 + 48)];
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: DLBW: %d, ULBW: %d", "-[WRM_EnhancedCTService processEnhancedVoiceLinkQualityBlob::]_block_invoke", DWORD2(v47[1]), HIDWORD(v47[1]));
    goto LABEL_24;
  }
  if (v49 == 4)
  {
    memset(v47, 0, 32);
    [objc_msgSend(*(id *)(a1 + 32), "enhancedLinkQuality") getBytes:v47 length:32];
    id v22 = [*(id *)(a1 + 40) VoiceLqmValue];
    [v22 replaceObjectAtIndex:*(void *)(a1 + 48) - 1 withObject:[NSNumber numberWithInt:BYTE1(v47[0])]];
    [objc_msgSend(*(id *)(a1 + 40), "VoiceLqmIsValid") replaceObjectAtIndex:*(void *)(a1 + 48) - 1 withObject:[NSNumber numberWithBool:1]];
    id v23 = [*(id *)(a1 + 40) VoiceLqmReasonCode];
    [v23 replaceObjectAtIndex:*(void *)(a1 + 48) - 1 withObject:[NSNumber numberWithInt:BYTE2(v47[0])]];
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s BLOB Size: %d, MavVoiceLqmBlob4: %d  Voice LQM BLOB Version: %d, VoiceLQM: %d, ReasonCode: %d", "-[WRM_EnhancedCTService processEnhancedVoiceLinkQualityBlob::]_block_invoke", v3, 32, LOBYTE(v47[0]), BYTE1(v47[0]), BYTE2(v47[0]));
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s IMS preference: %d, CodecType: %d, Total Erasures: %u, Total PlayBacks:%u", "-[WRM_EnhancedCTService processEnhancedVoiceLinkQualityBlob::]_block_invoke", BYTE3(v47[0]), HIDWORD(v47[0]), DWORD1(v47[0]), DWORD2(v47[0]));
    id v24 = [*(id *)(a1 + 40) imsVoiceOverPSSupported];
    [v24 replaceObjectAtIndex:*(void *)(a1 + 48) - 1 withObject:[NSNumber numberWithBool:BYTE3(v47[0]) != 0]];
    if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", *(void *)(a1 + 48) - 1), "intValue") == 1)
    {
      double v25 = (double)SLODWORD(v47[1]) * 0.2 + -20.0;
      id v26 = [*(id *)(a1 + 40) servCellRSRP];
      [v26 replaceObjectAtIndex:*(void *)(a1 + 48) - 1 withObject:[NSNumber numberWithDouble:SDWORD1(v47[1])]];
      [objc_msgSend(*(id *)(a1 + 40), "servCellSINR") replaceObjectAtIndex:*(void *)(a1 + 48) - 1 withObject:[NSNumber numberWithDouble:v25]];
      [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRSRP"), "objectAtIndex:", *(void *)(a1 + 48) - 1), "doubleValue");
      uint64_t v28 = v27;
      [objc_msgSend(*(id *)(a1 + 40), "servCellSINR") objectAtIndex:*(void *)(a1 + 48) - 1]
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s RSRP: %f, SINR: %f", "-[WRM_EnhancedCTService processEnhancedVoiceLinkQualityBlob::]_block_invoke", v28, v29);
    }
    else
    {
      [*(id *)(a1 + 40) dataPreferredSlot];
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: DLBW: %d, ULBW: %d", "-[WRM_EnhancedCTService processEnhancedVoiceLinkQualityBlob::]_block_invoke", DWORD2(v47[1]), HIDWORD(v47[1]));
    [*(id *)(a1 + 40) updateAudioQuality:::*((void *)((char *)v47 + 4)), HIDWORD(v47[0]), *(void *)(a1 + 48)];
LABEL_24:
    id result = [*(id *)(a1 + 40) dataPreferredSlot];
    if (result != *(id *)(a1 + 48)) {
      return result;
    }
    id v34 = [*(id *)(a1 + 40) dataBW];
    uint64_t v35 = *(void *)(a1 + 48) - 1;
    LODWORD(v39) = DWORD2(v47[1]);
    double v36 = (double)v39;
    return [v34 replaceObjectAtIndex:v35 withObject:[NSNumber numberWithDouble:v36]];
  }
  if (v49 == 240)
  {
    memset(v47, 0, 37);
    [objc_msgSend(*(id *)(a1 + 32), "enhancedLinkQuality") getBytes:v47 length:37];
    uint64_t v30 = BYTE1(v47[0]);
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s Init BLOB Size: %d, Version: %d", "-[WRM_EnhancedCTService processEnhancedVoiceLinkQualityBlob::]_block_invoke", v3, v49);
    [objc_msgSend(*(id *)(a1 + 40), "VoiceLqmValue") replaceObjectAtIndex:*(void *)(a1 + 48) - 1 withObject:[NSNumber numberWithInt:v30]];
    [objc_msgSend(*(id *)(a1 + 40), "VoiceLqmIsValid") replaceObjectAtIndex:*(void *)(a1 + 48) - 1 withObject:[NSNumber numberWithBool:1]];
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @" %s Version %d, Voice LQM: %d, PDCP TX SDU Count: %d, PDCP TX discard count: %d, RLC RX PDU count: %d, RLC RX missing pdu count: %d, LQE: %d ", "-[WRM_EnhancedCTService processEnhancedVoiceLinkQualityBlob::]_block_invoke", v49, v30, *(unsigned int *)((char *)v47 + 2), *(unsigned int *)((char *)v47 + 6), *(unsigned int *)((char *)v47 + 10), *(unsigned int *)((char *)v47 + 14), *(unsigned int *)((char *)&v47[1] + 2));
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s Meas Serving cell type : %d, SINR: %d, RSSI:%d, RSRP: %f, RSRQ: %f ", "-[WRM_EnhancedCTService processEnhancedVoiceLinkQualityBlob::]_block_invoke", *(unsigned int *)((char *)&v47[1] + 6), SBYTE10(v47[1]), *(__int16 *)((char *)&v47[1] + 11), *(float *)((char *)&v47[1] + 13), *(float *)((char *)&v47[2] + 1));
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s Voice LQM BLOB Version: %d, VoiceLQM: %d, ", "-[WRM_EnhancedCTService processEnhancedVoiceLinkQualityBlob::]_block_invoke", v49, v30);
    id v31 = [*(id *)(a1 + 40) servCellRSSI];
    [v31 replaceObjectAtIndex:*(void *)(a1 + 48) - 1 withObject:[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", (double)*(__int16 *)((char *)&v47[1] + 11))];
    id v32 = [*(id *)(a1 + 40) servCellRSRP];
    [v32 replaceObjectAtIndex:*(void *)(a1 + 48) - 1 withObject:[NSNumber numberWithDouble:*(float *)((char *)&v47[1] + 13)]];
    id v33 = [*(id *)(a1 + 40) servCellSINR];
    [v33 replaceObjectAtIndex:*(void *)(a1 + 48) - 1 withObject:[NSNumber numberWithDouble:SBYTE10(v47[1])]];
    id v34 = [*(id *)(a1 + 40) servCellRSRQ];
    uint64_t v35 = *(void *)(a1 + 48) - 1;
    double v36 = *(float *)((char *)&v47[2] + 1);
    return [v34 replaceObjectAtIndex:v35 withObject:[NSNumber numberWithDouble:v36]];
  }
  if (v49 != 241) {
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s processVoiceLQMBlob: LQM version is not supported", "-[WRM_EnhancedCTService processEnhancedVoiceLinkQualityBlob::]_block_invoke", v41, v42, v43, v44);
  }
  memset(v47, 0, 74);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s Init BLOB Size: %d, Version: %d", "-[WRM_EnhancedCTService processEnhancedVoiceLinkQualityBlob::]_block_invoke", v2, 241);
  [objc_msgSend(*(id *)(a1 + 32), "enhancedLinkQuality") getBytes:v47 length:74];
  uint64_t v5 = BYTE1(v47[0]);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @" %s Version %d, Voice LQM: %d, PDCP TX SDU Count: %d, PDCP TX discard count: %d, RLC RX PDU count: %d, RLC RX missing pdu count: %d, LQE: %d ", "-[WRM_EnhancedCTService processEnhancedVoiceLinkQualityBlob::]_block_invoke", v49, BYTE1(v47[0]), *(unsigned int *)((char *)v47 + 2), *(unsigned int *)((char *)v47 + 6), *(unsigned int *)((char *)v47 + 10), *(unsigned int *)((char *)v47 + 14), *(unsigned int *)((char *)&v47[1] + 2));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s Meas Serving cell type : %d, SINR: %d, RSSI:%d, RSRP: %f, RSRQ: %f ", "-[WRM_EnhancedCTService processEnhancedVoiceLinkQualityBlob::]_block_invoke", *(unsigned int *)((char *)&v47[1] + 6), SLOBYTE(v47[4]), SWORD5(v47[1]), *((float *)&v47[1] + 3), *(float *)&v47[2]);
  +[WCM_Logging logLevel:22, @"CodecType: %d, Total Erasures: %d, Total PlayBacks:%d, Audio Erasure Speech:%d,Audio Erasure Silence: %d", DWORD1(v47[3]), HIDWORD(v47[2]), LODWORD(v47[3]), DWORD2(v47[3]), HIDWORD(v47[3]) message];
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s IMS preference : %d, WCDMA RSCP: %d, WCDMA ECIO:%d", "-[WRM_EnhancedCTService processEnhancedVoiceLinkQualityBlob::]_block_invoke", *(unsigned int *)((char *)&v47[4] + 1), DWORD2(v47[2]), DWORD1(v47[2]));
  +[WCM_Logging logLevel:22, @"Voice LQM BLOB Version: %d, VoiceLQM: %d, ", v49, v5 message];
  +[WCM_Logging logLevel:22, @"Voice LQM BLOB Cell load valid: %d, est cell load: %d, ", *(unsigned int *)((char *)&v47[4] + 5), SBYTE9(v47[4]) message];
  if (*(_DWORD *)((char *)&v47[4] + 5))
  {
    id v6 = [*(id *)(a1 + 40) loads];
    [v6 replaceObjectAtIndex:*(void *)(a1 + 48) - 1 withObject:[NSNumber numberWithInt:SBYTE9(v47[4])]];
  }
  id v7 = [*(id *)(a1 + 40) servCellRSSI];
  [v7 replaceObjectAtIndex:*(void *)(a1 + 48) - 1 withObject:[NSNumber numberWithDouble:SWORD5(v47[1])]];
  id v8 = [*(id *)(a1 + 40) servCellRSRP];
  [v8 replaceObjectAtIndex:*(void *)(a1 + 48) - 1 withObject:[NSNumber numberWithDouble:*((float *)&v47[1] + 3)]];
  id v9 = [*(id *)(a1 + 40) servCellSINR];
  [v9 replaceObjectAtIndex:*(void *)(a1 + 48) - 1 withObject:[NSNumber numberWithDouble:SLOBYTE(v47[4])]];
  id v10 = [*(id *)(a1 + 40) servCellRSRQ];
  [v10 replaceObjectAtIndex:*(void *)(a1 + 48) - 1 withObject:[NSNumber numberWithDouble:*(float *)&v47[2]]];
  id v11 = [*(id *)(a1 + 40) imsVoiceOverPSSupported];
  [v11 replaceObjectAtIndex:*(void *)(a1 + 48) - 1 withObject:[NSNumber numberWithBool:*(_DWORD *)((char *)&v47[4] + 1) != 0]];
  id v12 = [*(id *)(a1 + 40) servCellRSCP];
  [v12 replaceObjectAtIndex:*(void *)(a1 + 48) - 1 withObject:[NSNumber numberWithDouble:SDWORD2(v47[2])]];
  id v13 = [*(id *)(a1 + 40) servCellECIO];
  [v13 replaceObjectAtIndex:*(void *)(a1 + 48) - 1 withObject:[NSNumber numberWithDouble:SDWORD1(v47[2])]];
  long long v45 = *(_OWORD *)((char *)&v47[2] + 12);
  int v46 = HIDWORD(v47[3]);
  return [*(id *)(a1 + 40) updateAudioQualityKaroo:&v45 :*(void *)(a1 + 48)];
}

id sub_1000458C8(uint64_t a1)
{
  id result = +[WCM_Logging logLevel:24, @"nrSliceAppStateChanged: APPID : %@, State : %d, refCount:%d", *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), dword_10027CFA8 message];
  if (*(unsigned char *)(a1 + 40)) {
    int v3 = dword_10027CFA8 + 1;
  }
  else {
    int v3 = dword_10027CFA8 - 1;
  }
  dword_10027CFA8 = v3;
  if (v3 != 1)
  {
    if (v3 > 0) {
      return result;
    }
    dword_10027CFA8 = 0;
    [+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton") evalSAStateSlice];
  }
  id v4 = +[WRM_HandoverManager WRM_HandoverManagerSingleton];

  return [v4 triggerEnableSA:v3 == 1];
}

id sub_100045A24(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) indicator];
  [objc_msgSend(*(id *)(a1 + 40), "dataIndicator") replaceObjectAtIndex:*(void *)(a1 + 48) - 1 withObject:[NSNumber numberWithInt:v2]];
  id v3 = [*(id *)(a1 + 32) attached];
  [objc_msgSend(*(id *)(a1 + 40), "isDataAttached") replaceObjectAtIndex:*(void *)(a1 + 48) - 1 withObject:[NSNumber numberWithBool:v3]];
  uint64_t v4 = 4;
  if (objc_opt_respondsToSelector())
  {
    if ([*(id *)(a1 + 32) newRadioCoverage]) {
      uint64_t v4 = 1;
    }
    else {
      uint64_t v4 = 4;
    }
  }
  if ((objc_opt_respondsToSelector() & 1) != 0
    && ([*(id *)(a1 + 32) newRadioSaCoverage] & 1) != 0)
  {
    uint64_t v4 = 2;
  }
  else if (objc_opt_respondsToSelector())
  {
    if ([*(id *)(a1 + 32) newRadioNsaCoverage]) {
      uint64_t v4 = 3;
    }
    else {
      uint64_t v4 = v4;
    }
  }
  [objc_msgSend(*(id *)(a1 + 40), "radioCoverage") replaceObjectAtIndex:*(void *)(a1 + 48) - 1 withObject:[NSNumber numberWithInt:v4]];
  uint64_t v5 = [*(id *)(a1 + 32) dataBearerTechnology] == 4;
  if ([*(id *)(a1 + 32) dataBearerTechnology] == 6)
  {
    if (objc_opt_respondsToSelector())
    {
      if ([*(id *)(a1 + 32) newRadioMmWaveDataBearer]) {
        uint64_t v5 = 4;
      }
      else {
        uint64_t v5 = v5;
      }
    }
    if (objc_opt_respondsToSelector())
    {
      if ([*(id *)(a1 + 32) newRadioSub6DataBearer]) {
        uint64_t v5 = 5;
      }
      else {
        uint64_t v5 = v5;
      }
    }
  }
  if ([*(id *)(a1 + 32) dataBearerTechnology] == 5)
  {
    if (objc_opt_respondsToSelector())
    {
      if ([*(id *)(a1 + 32) newRadioMmWaveDataBearer]) {
        uint64_t v5 = 2;
      }
      else {
        uint64_t v5 = v5;
      }
    }
    if (objc_opt_respondsToSelector())
    {
      if ([*(id *)(a1 + 32) newRadioSub6DataBearer]) {
        uint64_t v5 = 3;
      }
      else {
        uint64_t v5 = v5;
      }
    }
  }
  [objc_msgSend(*(id *)(a1 + 40), "radioFrequency") replaceObjectAtIndex:*(void *)(a1 + 48) - 1 withObject:[NSNumber numberWithInt:v5]];
  BOOL v6 = (objc_opt_respondsToSelector() & 1) != 0
    && ([*(id *)(a1 + 32) newRadioMmWaveDataBearer] & 1) != 0;
  [objc_msgSend(*(id *)(a1 + 40), "isFR2Radio") replaceObjectAtIndex:*(void *)(a1 + 48) - 1 withObject:[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v6)];
  id v7 = [*(id *)(a1 + 32) cellularDataPossible];
  [objc_msgSend(*(id *)(a1 + 40), "isDataEnabled") replaceObjectAtIndex:*(void *)(a1 + 48) - 1 withObject:[NSNumber numberWithBool:v7]];
  if ((v3 & v7) == 1)
  {
    id v8 = *(id *)(a1 + 48);
    if (v8 == [*(id *)(a1 + 40) dataPreferredSlot])
    {
      unsigned int v9 = [[objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "isPrivateNetworkSim"), "objectAtIndex:", *(void *)(a1 + 48) - 1) BOOLValue];
      unsigned int v10 = [[[objc_msgSend(*(id *)(a1 + 40), "isPrivateNetworkPreferredOverWifi") objectAtIndex:*(void *)(a1 + 48) - 1] BOOLValue];
      [*(id *)(a1 + 40) setDataPreferredSlotOnCBRS:v9 & v10];
      uint64_t v11 = *(void *)(a1 + 48);
      if (v11)
      {
        if (v11 == 1)
        {
          id v12 = "CTSubscriptionSlotOne";
        }
        else if (v11 == 2)
        {
          id v12 = "CTSubscriptionSlotTwo";
        }
        else
        {
          id v12 = "Unknown CTSubscriptionSlot!!!";
        }
      }
      else
      {
        id v12 = "CTSubscriptionSlotUnknown";
      }
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: isPrivateNwSim %d, isPrivateNwPreferredOverWifi: %d, dataPreferredSlotOnPrivateNetwork %d", v12, v9, v10, [*(id *)(a1 + 40) dataPreferredSlotOnCBRS]);
    }
  }
  if ([*(id *)(a1 + 32) radioTechnology])
  {
    if ([*(id *)(a1 + 32) radioTechnology] == 2)
    {
      uint64_t v13 = 2;
    }
    else if ([*(id *)(a1 + 32) radioTechnology] == 3)
    {
      uint64_t v13 = 3;
    }
    else if ([*(id *)(a1 + 32) radioTechnology] == 4)
    {
      uint64_t v13 = 4;
    }
    else if ([*(id *)(a1 + 32) radioTechnology] == 5)
    {
      uint64_t v13 = 5;
    }
    else if ([*(id *)(a1 + 32) radioTechnology] == 7 {
           || [*(id *)(a1 + 32) radioTechnology] == 8)
    }
    {
      uint64_t v13 = 1;
    }
    else if ([*(id *)(a1 + 32) radioTechnology] == 9)
    {
      uint64_t v13 = 7;
    }
    else if ([*(id *)(a1 + 32) radioTechnology] == 10)
    {
      uint64_t v13 = 9;
    }
    else
    {
      +[WCM_Logging logLevel:22 message:@"Unknown registered technology"];
      uint64_t v13 = 10;
    }
  }
  else
  {
    uint64_t v13 = 8;
  }
  [objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType") replaceObjectAtIndex:*(void *)(a1 + 48) - 1 withObject:[NSNumber numberWithInt:v13]];
  uint64_t v14 = *(void *)(a1 + 48);
  if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", v14 - 1), "intValue") == 10)
  {
    id v15 = "UNKNOWN_RADIO ";
  }
  else if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", *(void *)(a1 + 48) - 1), "intValue") == 1)
  {
    id v15 = "LTE Radio";
  }
  else if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", *(void *)(a1 + 48) - 1), "intValue") == 2)
  {
    id v15 = "UMTS_RADIO";
  }
  else if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", *(void *)(a1 + 48) - 1), "intValue") == 3)
  {
    id v15 = "CDMA1X_RADIO";
  }
  else if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", *(void *)(a1 + 48) - 1), "intValue") == 4)
  {
    id v15 = "CDMAEVDO";
  }
  else if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", *(void *)(a1 + 48) - 1), "intValue") == 5)
  {
    id v15 = "CDMAHybrid";
  }
  else if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", *(void *)(a1 + 48) - 1), "intValue") == 6)
  {
    id v15 = "eHRPD_RADIO";
  }
  else if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", *(void *)(a1 + 48) - 1), "intValue") == 7)
  {
    id v15 = "TDSCDMA_RADIO";
  }
  else if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", *(void *)(a1 + 48) - 1), "intValue") == 8)
  {
    id v15 = "GSM_RADIO";
  }
  else
  {
    unsigned int v16 = [[[objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType") objectAtIndex:*(void *)(a1 + 48) - 1] intValue];
    id v15 = "UNKNOWN_RADIO!!!";
    if (v16 == 9) {
      id v15 = "N_RADIO";
    }
  }
  unsigned int v17 = v2 - 12;
  if v2 < 0xC && ((0xFF7u >> (char)v2))
  {
    id v18 = (&off_10020E1C0)[(int)v2];
  }
  else if (v17 >= 7)
  {
    id v18 = "Unknown kCTDataIndicatorStatusUnknown!!!";
    if (v2 == 19) {
      id v18 = "5G_CA";
    }
  }
  else
  {
    id v18 = (&off_10020E220)[v17];
  }
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: SIM %d servCellRadioTechnologyType %s Data Attached %d Data enabled %d, data indicator: %s", "-[WRM_EnhancedCTService processDataStatus::]_block_invoke", v14, v15, v3, v7, v18);
  uint64_t v19 = *(void **)(a1 + 40);

  return [v19 evaluateCbrsInDualSimMode:0];
}

id sub_1000461F8(uint64_t a1)
{
  if (objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "bars"), "intValue"))
  {
    [objc_msgSend(*(id *)(a1 + 40), "bars") replaceObjectAtIndex:*(void *)(a1 + 48) - 1 withObject:objc_msgSend(*(id *)(a1 + 32), "bars")];
    return +[WCM_Logging logLevel:message:](WCM_Logging, @"%s: update  bars %d", @"-[WRM_EnhancedCTService processSignalStrengthInfo::]_block_invoke", [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "bars"), "objectAtIndex:", *(void *)(a1 + 48) - 1), "intValue") intValue]);
  }
  else
  {
    +[WCM_Logging logLevel:22 message:@"set signal bar 5"];
    id v3 = [*(id *)(a1 + 40) bars];
    uint64_t v4 = *(void *)(a1 + 48) - 1;
    uint64_t v5 = +[NSNumber numberWithInt:5];
    return [v3 replaceObjectAtIndex:v4 withObject:v5];
  }
}

unsigned char *sub_100046390(uint64_t a1)
{
  [objc_msgSend(*(id *)(a1 + 32), "subscriptions") removeAllObjects];
  [*(id *)(a1 + 32) setNumberofSubscriptions:0];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v2 = [*(id *)(a1 + 40) subscriptions];
  id v3 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v13 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        if ([v7 slotID] && objc_msgSend(v7, "isSimPresent"))
        {
          [objc_msgSend(*(id *)(a1 + 32), "subscriptions") addObject:v7];
          if ([v7 slotID])
          {
            id v8 = "CTSubscriptionSlotOne";
            if ([v7 slotID] != (id)1)
            {
              if ([v7 slotID] == (id)2) {
                id v8 = "CTSubscriptionSlotTwo";
              }
              else {
                id v8 = "Unknown CTSubscriptionSlot!!!";
              }
            }
          }
          else
          {
            id v8 = "CTSubscriptionSlotUnknown";
          }
          +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s slotID %s current subscriptions %@", "-[WRM_EnhancedCTService processSubscriptionInfo::]_block_invoke", v8, [*(id *)(a1 + 32) subscriptions]);
          [*(id *)(a1 + 32) setNumberofSubscriptions:((char *)[*(id *)(a1 + 32) numberofSubscriptions]) + 1];
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v4);
  }
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s total numberofSubscriptions=%lu", "-[WRM_EnhancedCTService processSubscriptionInfo::]_block_invoke", [*(id *)(a1 + 32) numberofSubscriptions]);
  [*(id *)(a1 + 32) setMSubscriptionInfoDidChange:1];
  [*(id *)(a1 + 32) getCurrentEnhancedCTMetrics];
  id result = *(unsigned char **)(a1 + 32);
  if (result[484])
  {
    id v10 = [result numberofSubscriptions];
    uint64_t v11 = *(void **)(a1 + 32);
    if (v10 == (id)1)
    {
      return [v11 evaluateCbrsInSingleSimMode];
    }
    else
    {
      id result = [v11 numberofSubscriptions];
      if ((unint64_t)result >= 2) {
        return [*(id *)(a1 + 32) evaluateCbrsInDualSimMode:1];
      }
    }
  }
  return result;
}

id sub_100046724(uint64_t a1)
{
  if ([*(id *)(a1 + 32) CTClientInitDone])
  {
    return +[WCM_Logging logLevel:22 message:@"enhancedCTService: Already initialized, returning"];
  }
  else
  {
    [*(id *)(a1 + 32) setCTClient:[objc_alloc((Class)CoreTelephonyClient) initWithQueue:[*(id *)(a1 + 32) serverQueue]]];
    [objc_msgSend(*(id *)(a1 + 32), "CTClient") setDelegate: *(void *)(a1 + 32)];
    [*(id *)(a1 + 32) setMCTService:+[WRM_CTService WRM_CTServiceControllerSingleton](WRM_CTService, "WRM_CTServiceControllerSingleton")];
    id v3 = [*(id *)(a1 + 32) CTClient];
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1000468CC;
    v6[3] = &unk_10020DE38;
    v6[4] = *(void *)(a1 + 32);
    [v3 getSubscriptionInfo:v6];
    id v5 = 0;
    id v4 = [[objc_msgSend(*(id *)(a1 + 32), "CTClient") getCurrentDataSubscriptionContextSync:&v5];
    if (v5 || !v4)
    {
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"getCurrentDataSubscriptionContextSync error %@", [v5 localizedDescription]);
    }
    else
    {
      [*(id *)(a1 + 32) setDataPreferredSlot:[v4 slotID]];
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"getCurrentDataSubscriptionContextSync dataPreferredSlot=%lu", [*(id *)(a1 + 32) dataPreferredSlot]);
    }
    return [*(id *)(a1 + 32) setCTClientInitDone:1];
  }
}

id sub_1000468CC(uint64_t a1, void *a2, void *a3)
{
  [WCM_Logging logLevel:22 message:@"getSubscriptionInfo Subscription info %@ count %lu error %@", a2, [objc_msgSend(objc_msgSend(a2, "subscriptions"), "count")], [a3 localizedDescription]];
  BOOL v6 = *(void **)(a1 + 32);

  return [v6 processSubscriptionInfo:a2 :a3];
}

void sub_100046A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100046A4C(uint64_t a1, uint64_t a2)
{
}

void sub_100046A5C(uint64_t a1)
{
}

uint64_t sub_100046A68(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8) + 40) = *(void *)(*(void *)(result + 32) + 444);
  return result;
}

id sub_100046B04(uint64_t a1)
{
  +[WCM_Logging logLevel:22, @"dataConnectionStatusInfo %@", *(void *)(a1 + 32) message];
  id result = *(id *)(a1 + 32);
  if (result)
  {
    id result = [result interfaceName];
    if (result)
    {
      id v3 = *(void **)(*(void *)(a1 + 40) + 444);
      if (v3) {

      }
      *(void *)(*(void *)(a1 + 40) + 444) = [objc_alloc((Class)NSString) initWithString:[*(id *)(a1 + 32) interfaceName]];
      return +[WCM_Logging logLevel:22, @"mInternetInterfaceName = %@", *(void *)(*(void *)(a1 + 40) + 444) message];
    }
  }
  return result;
}

id sub_100046C6C(uint64_t a1, void *a2, void *a3)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"getSubscriptionInfo Subscription info %@ count %lu error %@", a2, [objc_msgSend(objc_msgSend(a2, "subscriptions"), "count") localizedDescription]);
  BOOL v6 = *(void **)(a1 + 32);

  return [v6 processSubscriptionInfo:a2 :a3];
}

id sub_100046E68(uint64_t a1, uint64_t a2, void *a3)
{
  id result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"copyRegistrationStatus:  Registration status %@ error %@", a2, [a3 localizedDescription]);
  if (a2 && !a3)
  {
    id v7 = *(void **)(a1 + 32);
    id v8 = [*(id *)(a1 + 40) slotID];
    return [v7 processRegistrationStatus:a2 :v8];
  }
  return result;
}

uint64_t sub_1000470D8(uint64_t a1)
{
  uint64_t v5 = 0;
  BOOL v6 = &v5;
  uint64_t v7 = 0x2020000000;
  id v2 = (uint64_t (*)(uint64_t))off_10027CFC8;
  id v8 = off_10027CFC8;
  if (!off_10027CFC8)
  {
    id v3 = (void *)sub_10004F8B0();
    v6[3] = (uint64_t)dlsym(v3, "BMDeviceCellularAvailabilityStatusStateAsString");
    off_10027CFC8 = (_UNKNOWN *)v6[3];
    id v2 = (uint64_t (*)(uint64_t))v6[3];
  }
  _Block_object_dispose(&v5, 8);
  if (!v2) {
    sub_10013A3E8();
  }
  return v2(a1);
}

void sub_1000471C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100047B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100047B84()
{
  uint64_t v3 = 0;
  id v4 = &v3;
  uint64_t v5 = 0x3052000000;
  BOOL v6 = sub_100046A4C;
  uint64_t v7 = sub_100046A5C;
  uint64_t v0 = qword_10027CFE0;
  uint64_t v8 = qword_10027CFE0;
  if (!qword_10027CFE0)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_10004FA6C;
    v2[3] = &unk_10020DAF8;
    v2[4] = &v3;
    sub_10004FA6C((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_100047C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100047D04(id *a1)
{
  id v2 = [[objc_msgSend(a1[4], "instance") intValue];
  uint64_t v3 = (int)v2 - 1;
  [objc_msgSend(a1[5], "mcc") replaceObjectAtIndex:v3 withObject:[NSNumber numberWithInt:[objc_msgSend(objc_msgSend(a1[6], "mcc"), "intValue")]]];
  [objc_msgSend(a1[5], "mnc") replaceObjectAtIndex:v3 withObject:[NSNumber numberWithInt:objc_msgSend(objc_msgSend(a1[6], "mnc"), "intValue")]];
  return [WCM_Logging logLevel:22 message:[NSString stringWithFormat:@"%s: plmnChanged mcc=%s, mnc=%s, slot=%d", @"-[WRM_EnhancedCTService plmnChanged:plmn:]_block_invoke", objc_msgSend(objc_msgSend(a1[6], "mcc"), "UTF8String"), objc_msgSend(objc_msgSend(a1[6], "mnc"), "UTF8String"), v2]];
}

void sub_100048578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

char *sub_1000485A0(uint64_t a1)
{
  id result = (char *)objc_loadWeak((id *)(a1 + 32));
  if (result)
  {
    id v2 = result;
    +[WCM_Logging logLevel:22 message:@"CBRS ping-pong timer expired"];
    uint64_t v3 = *(void **)(v2 + 468);
    if (v3)
    {
      [v3 invalidate];

      *(void *)(v2 + 468) = 0;
    }
    return (char *)[v2 evaluateCbrsInDualSimMode:0];
  }
  return result;
}

void *sub_100048804(void *result)
{
  if (!*(unsigned char *)(result[4] + 484)) {
    return result;
  }
  uint64_t v1 = result;
  id result = [[+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton") isRecentDevice];
  if (!result) {
    return result;
  }
  if ([(id)v1[4] numberofSubscriptions] != (id)2)
  {
    CFStringRef v4 = @"evaluateCbrsInDualSimMode error: not in dual sim mode";
LABEL_15:
    return +[WCM_Logging logLevel:22 message:v4];
  }
  if (objc_msgSend(objc_msgSend(objc_msgSend((id)v1[4], "isPrivateNetworkSim"), "objectAtIndex:", 0), "BOOLValue"))
  {
    uint64_t v2 = 2;
    uint64_t v3 = 1;
  }
  else
  {
    uint64_t v2 = 1;
    if ((objc_msgSend(objc_msgSend(objc_msgSend((id)v1[4], "isPrivateNetworkSim"), "objectAtIndex:", 1), "BOOLValue") & 1) == 0)
    {
      CFStringRef v4 = @"evaluateCbrsInDualSimMode error: CBRS/PNW sim not present in dual sim mode";
      goto LABEL_15;
    }
    uint64_t v3 = 2;
  }
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"evaluateCbrsInDualSimMode forceRecommendation=%u, (priNwSlot=%d, nonpriNwSlot=%d), currentDataSlot=%d", *((unsigned __int8 *)v1 + 40), v3, v2, [(id)v1[4] dataPreferredSlot]);
  id v5 = [[+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton") getiRATConfigController];
  if (!v5)
  {
    CFStringRef v4 = @"evaluateCbrsInDualSimMode Error: invalid tempiRATConfig";
    goto LABEL_15;
  }
  BOOL v6 = v5;
  uint64_t v7 = v2 - 1;
  unsigned int v8 = [[[v1[4] mcc] objectAtIndex:v2 - 1] intValue];
  unsigned int v42 = [[[v1[4] mnc] objectAtIndex:v2 - 1] intValue];
  +[WCM_Logging logLevel:message:](WCM_Logging, @"%s: self.mcc = %@, self.mnc=%@", @"-[WRM_EnhancedCTService evaluateCbrsInDualSimMode:]_block_invoke", [(id)v1[4] mcc], objc_msgSend((id)v1[4], "mnc"));
  unsigned int v9 = [[[objc_msgSend((id)v1[4], "servCellRadioTechnologyType") objectAtIndex:v3 - 1] intValue];
  if (v9 == 9)
  {
    [objc_msgSend(objc_msgSend(objc_msgSend((id)v1[4], "nrCellRSRP"), "objectAtIndex:", v3 - 1), "doubleValue"];
    double v11 = v14;
    id v13 = [(id)v1[4] nrCellRSRQ];
  }
  else
  {
    double v10 = 0.0;
    double v11 = 0.0;
    if (v9 != 1) {
      goto LABEL_20;
    }
    [objc_msgSend(objc_msgSend(objc_msgSend((id)v1[4], "servCellRSRP"), "objectAtIndex:", v3 - 1), "doubleValue");
    double v11 = v12;
    id v13 = [(id)v1[4] servCellRSRQ];
  }
  [objc_msgSend(v13, "objectAtIndex:", v3 - 1) doubleValue];
  double v10 = v15;
LABEL_20:
  unsigned int v16 = [[[objc_msgSend((id)v1[4], "servCellRadioTechnologyType") objectAtIndex:v2 - 1] intValue];
  if (v16 == 9)
  {
    [objc_msgSend(objc_msgSend(objc_msgSend((id)v1[4], "nrCellRSRP"), "objectAtIndex:", v2 - 1), "doubleValue");
    double v18 = v21;
    id v20 = [(id)v1[4] nrCellRSRQ];
  }
  else
  {
    double v17 = 0.0;
    double v18 = 0.0;
    if (v16 != 1) {
      goto LABEL_25;
    }
    [objc_msgSend(objc_msgSend(objc_msgSend((id)v1[4], "servCellRSRP"), "objectAtIndex:", v2 - 1), "doubleValue");
    double v18 = v19;
    id v20 = [(id)v1[4] servCellRSRQ];
  }
  [objc_msgSend(v20, "objectAtIndex:", v2 - 1) doubleValue];
  double v17 = v22;
LABEL_25:
  uint64_t v40 = (void *)v2;
  unsigned int v23 = [[[objc_msgSend(objc_msgSend(objc_msgSend((id)v1[4], "isDataAttached"), "objectAtIndex:", v3 - 1), "BOOLValue");
  unsigned int v24 = [[[objc_msgSend((id)v1[4], "isDataEnabled") objectAtIndex:v3 - 1] BOOLValue];
  unsigned int v41 = v23;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s privNwRSRP=%f, privNwRSRQ=%f, nonPrivNwRSRP=%f, nonPrivNwRSRQ=%f, isCbrsDataAttached=%d, isCbrsDataEnabled=%d", "-[WRM_EnhancedCTService evaluateCbrsInDualSimMode:]_block_invoke", *(void *)&v11, *(void *)&v10, *(void *)&v18, *(void *)&v17, v23, v24);
  unsigned int v25 = [(id)v1[4] getBandInfoOnSlot:v3];
  double v26 = (double)(uint64_t)[v6 cbrsEnterRsrqMin];
  double v27 = (double)(uint64_t)[v6 cbrsEnterRsrpMin];
  double v28 = (double)(uint64_t)[v6 cbrsExitRsrqMin];
  double v29 = (double)(uint64_t)[v6 cbrsExitRsrpMin];
  unsigned int v39 = v24;
  if (objc_msgSend(objc_msgSend(objc_msgSend((id)v1[4], "servCellRadioTechnologyType"), "objectAtIndex:", v3 - 1), "intValue") == 9&& v25 == 71)
  {
    uint64_t v30 = v7;
    id v31 = (void *)v3;
    double v27 = v27 + (double)(uint64_t)[v6 cbrsEnterRsrpOffset];
    double v26 = v26 + (double)(uint64_t)[v6 cbrsEnterRsrqOffset];
    double v29 = v29 + (double)(uint64_t)[v6 cbrsExitRsrpOffset];
    double v28 = v28 + (double)(uint64_t)[v6 cbrsExitRsrqOffset];
    +[WCM_Logging logLevel:22, @"Band 71, applied offset enterRsrp:%f enterRsrq:%f exitRsrp:%f, exitRsrq:%f", *(void *)&v27, *(void *)&v26, *(void *)&v29, *(void *)&v28 message];
  }
  else
  {
    uint64_t v30 = v7;
    id v31 = (void *)v3;
  }
  id result = [[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s cbrsEnterRsrpMin=%f, cbrsEnterRsrqMin=%f, nonCbrsExitRsrpMin=%lld, nonCbrsExitRsrqMin=%lld, cbrsExitRsrpMin=%f, cbrsExitRsrqMin=%f, nonCbrsEnterRsrpMin=%lld,nonCbrsEnterRsrqMin=%lld", "-[WRM_EnhancedCTService evaluateCbrsInDualSimMode:]_block_invoke", *(void *)&v27, *(void *)&v26, [v6 nonCbrsExitRsrpMin], objc_msgSend(v6, "nonCbrsExitRsrqMin"), *(void *)&v29, *(void *)&v28, objc_msgSend(v6, "nonCbrsEnterRsrpMin"), objc_msgSend(v6, "nonCbrsEnterRsrqMin"));
  if (v10 != 0.0 && v10 > v26 && v11 != 0.0 && v11 > v27)
  {
    id result = [(id)v1[4] dataPreferredSlot];
    if (v31 != result)
    {
      +[WCM_Logging logLevel:22 message:@"evaluateCbrsInDualSimMode privateNw slot signal becomes good"];
      if ((objc_msgSend(objc_msgSend(objc_msgSend((id)v1[4], "isRoaming"), "objectAtIndex:", v3 - 1), "BOOLValue") & 1) == 0&& ((v41 ^ 1) & 1) == 0&& ((v39 ^ 1) & 1) == 0)
      {
        BOOL v32 = v18 > (double)(uint64_t)[v6 nonCbrsExitRsrpMin]
           && v17 > (double)(uint64_t)[v6 nonCbrsExitRsrqMin];
        +[WCM_Logging logLevel:22, @"evaluateCbrsInDualSimMode Recommend data on privateNwSlot %d, dataSlotQuality %llu, anyCallState %d", v31, v32, *(unsigned int *)(v1[4] + 436) message];
        id result = [(id)v1[4] switchPrivateNwDataSim:v31 currentSlotQuality:v32 anyCallState:*(unsigned int *)(v1[4] + 436) forceRecommend:*((unsigned __int8 *)v1 + 40)];
        *(void *)(v1[4] + 476) = v31;
        return result;
      }
      id result = +[WCM_Logging logLevel:22, @"evaluateCbrsInDualSimMode PrivateNw SIM %d not attached yet", v31 message];
    }
  }
  if (v8 && v42)
  {
    unsigned int v33 = v10 > v28 ? v41 : 0;
    if ((v33 != 1 || v11 <= v29) && v17 != 0.0)
    {
      id result = [v6 nonCbrsEnterRsrqMin];
      if (v17 >= (double)(uint64_t)result && v18 != 0.0)
      {
        id result = [v6 nonCbrsEnterRsrpMin];
        if (v18 >= (double)(uint64_t)result)
        {
          id result = [(id)v1[4] dataPreferredSlot];
          if (v40 != result)
          {
            +[WCM_Logging logLevel:22 message:@"evaluateCbrsInDualSimMode PrivateNw degrades while nonPrivateNw signal is good"];
            unsigned int v34 = [[[objc_msgSend((id)v1[4], "isDataAttached") objectAtIndex:v30] BOOLValue];
            unsigned int v35 = [[[objc_msgSend(objc_msgSend(objc_msgSend((id)v1[4], "isDataEnabled"), "objectAtIndex:", v30), "BOOLValue"]
            if (v34 && v35)
            {
              +[WCM_Logging logLevel:22, @"evaluateCbrsInDualSimMode Recommend data on nonPrivateNw SIM %d anyCallState %d", v40, *(unsigned int *)(v1[4] + 436) message];
              id result = [(id)v1[4] switchPrivateNwDataSim:v40 currentSlotQuality:0 anyCallState:*(unsigned int *)(v1[4] + 436) forceRecommend:*((unsigned __int8 *)v1 + 40)];
              *(void *)(v1[4] + 476) = v40;
              return result;
            }
            id result = +[WCM_Logging logLevel:22, @"evaluateCbrsInDualSimMode nonPrivateNw SIM %d not attached yet", v40 message];
          }
        }
      }
    }
  }
  if (*((unsigned char *)v1 + 40))
  {
    if ([(id)v1[4] dataPreferredSlot] == v31) {
      BOOL v36 = v11 > v29 && v10 > v28;
    }
    else {
      BOOL v36 = [(id)v1[4] dataPreferredSlot] != v40
    }
         || v18 > (double)(uint64_t)[v6 nonCbrsExitRsrpMin]
         && v17 > (double)(uint64_t)[v6 nonCbrsExitRsrqMin];
    +[WCM_Logging logLevel:22, @"evaluateCbrsInDualSimMode Force Recommend dataSlotQuality=%d, anyCallState=%d", v36, *(unsigned int *)(v1[4] + 436) message];
    id v37 = (unsigned int *)v1[4];
    uint64_t v38 = v37[109];
    return [v37 switchPrivateNwDataSim:0 currentSlotQuality:v36 anyCallState:v38 forceRecommend:1];
  }
  return result;
}

_DWORD *sub_1000495C4(uint64_t a1)
{
  [objc_msgSend(*(id *)(a1 + 32), "nrCellRSRP") replaceObjectAtIndex:*(void *)(a1 + 40) - 1 withObject:[NSNumber numberWithDouble:*(double *)(a1 + 48)]];
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: slot %d NrRSRP %f", "-[WRM_EnhancedCTService setNrRSRP:forSim:]_block_invoke", *(void *)(a1 + 40), *(void *)(a1 + 48));
  id result = *(_DWORD **)(a1 + 32);
  if (result[95] == 2)
  {
    double v3 = *(double *)(a1 + 48);
    return [result monitorStrongSOSSignal:v3];
  }
  return result;
}

id sub_100049728(uint64_t a1)
{
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: slot %d NrSNR %f", "-[WRM_EnhancedCTService setNrSNR:forSim:]_block_invoke", *(void *)(a1 + 40), *(void *)(a1 + 48));
}

id sub_10004984C(uint64_t a1)
{
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: slot %d ECIO %f", "-[WRM_EnhancedCTService setServingCellECIO:forSim:]_block_invoke", *(void *)(a1 + 40), *(void *)(a1 + 48));
}

id sub_100049970(uint64_t a1)
{
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: slot %d RSCP %f", "-[WRM_EnhancedCTService setServingCellRSCP:forSim:]_block_invoke", *(void *)(a1 + 40), *(void *)(a1 + 48));
}

id sub_100049A94(uint64_t a1)
{
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: slot %d NrRSRQ %f", "-[WRM_EnhancedCTService setNrRSRQ:forSim:]_block_invoke", *(void *)(a1 + 40), *(void *)(a1 + 48));
}

void sub_100049BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100049BF4(uint64_t a1)
{
  [objc_msgSend(*(id *)(a1 + 32), "nrCellRSRP") objectAtIndex:[*(id *)(a1 + 32) dataPreferredSlot] - 1] doubleValue];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v2;
  if ([*(id *)(a1 + 32) dataPreferredSlot])
  {
    if ([*(id *)(a1 + 32) dataPreferredSlot] == (id)1)
    {
      double v3 = "CTSubscriptionSlotOne";
    }
    else
    {
      id v4 = [*(id *)(a1 + 32) dataPreferredSlot];
      double v3 = "Unknown CTSubscriptionSlot!!!";
      if (v4 == (id)2) {
        double v3 = "CTSubscriptionSlotTwo";
      }
    }
  }
  else
  {
    double v3 = "CTSubscriptionSlotUnknown";
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: active data slot %s RSRP %f", "-[WRM_EnhancedCTService getNrRSRP]_block_invoke", v3, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
}

void sub_100049D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100049DB4(uint64_t a1)
{
  [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "nrCellRSRP"), "objectAtIndex:", *(void *)(a1 + 48) - 1), "doubleValue");
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v2;
  double v3 = "CTSubscriptionSlotUnknown";
  id v4 = "CTSubscriptionSlotOne";
  id v5 = "Unknown CTSubscriptionSlot!!!";
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6 == 2) {
    id v5 = "CTSubscriptionSlotTwo";
  }
  if (v6 != 1) {
    id v4 = v5;
  }
  if (v6) {
    double v3 = v4;
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: sim slot %s NrRSRP %f", "-[WRM_EnhancedCTService getNrRSRP:]_block_invoke", v3, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
}

void sub_100049F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100049F38(uint64_t a1)
{
  [objc_msgSend(*(id *)(a1 + 32), "nrCellSNR") objectAtIndex:[*(id *)(a1 + 32) dataPreferredSlot] - 1] doubleValue];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v2;
  if ([*(id *)(a1 + 32) dataPreferredSlot])
  {
    if ([*(id *)(a1 + 32) dataPreferredSlot] == (id)1)
    {
      double v3 = "CTSubscriptionSlotOne";
    }
    else
    {
      id v4 = [*(id *)(a1 + 32) dataPreferredSlot];
      double v3 = "Unknown CTSubscriptionSlot!!!";
      if (v4 == (id)2) {
        double v3 = "CTSubscriptionSlotTwo";
      }
    }
  }
  else
  {
    double v3 = "CTSubscriptionSlotUnknown";
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: active slot %s SNR %f", "-[WRM_EnhancedCTService getNrSNR]_block_invoke", v3, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
}

void sub_10004A0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10004A0F8(uint64_t a1)
{
  [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "nrCellSNR"), "objectAtIndex:", *(void *)(a1 + 48) - 1), "doubleValue");
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v2;
  double v3 = "CTSubscriptionSlotUnknown";
  id v4 = "CTSubscriptionSlotOne";
  id v5 = "Unknown CTSubscriptionSlot!!!";
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6 == 2) {
    id v5 = "CTSubscriptionSlotTwo";
  }
  if (v6 != 1) {
    id v4 = v5;
  }
  if (v6) {
    double v3 = v4;
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: sim slot %s SNR %f", "-[WRM_EnhancedCTService getNrSNR:]_block_invoke", v3, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
}

void sub_10004A264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10004A27C(uint64_t a1)
{
  [objc_msgSend(*(id *)(a1 + 32), "nrCellRSRQ") objectAtIndex:[*(id *)(a1 + 32) dataPreferredSlot] - 1] doubleValue];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v2;
  if ([*(id *)(a1 + 32) dataPreferredSlot])
  {
    if ([*(id *)(a1 + 32) dataPreferredSlot] == (id)1)
    {
      double v3 = "CTSubscriptionSlotOne";
    }
    else
    {
      id v4 = [*(id *)(a1 + 32) dataPreferredSlot];
      double v3 = "Unknown CTSubscriptionSlot!!!";
      if (v4 == (id)2) {
        double v3 = "CTSubscriptionSlotTwo";
      }
    }
  }
  else
  {
    double v3 = "CTSubscriptionSlotUnknown";
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: active slot %s RSRQ %f", "-[WRM_EnhancedCTService getNrRSRQ]_block_invoke", v3, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
}

void sub_10004A424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10004A43C(uint64_t a1)
{
  [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "nrCellRSRQ"), "objectAtIndex:", *(void *)(a1 + 48) - 1), "doubleValue");
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v2;
  double v3 = "CTSubscriptionSlotUnknown";
  id v4 = "CTSubscriptionSlotOne";
  id v5 = "Unknown CTSubscriptionSlot!!!";
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6 == 2) {
    id v5 = "CTSubscriptionSlotTwo";
  }
  if (v6 != 1) {
    id v4 = v5;
  }
  if (v6) {
    double v3 = v4;
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: sim slot %s RSRQ %f", "-[WRM_EnhancedCTService getNrRSRQ:]_block_invoke", v3, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
}

unint64_t sub_10004AD14(unint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  if (v1)
  {
    unint64_t v2 = result;
    double v3 = "Unknown CTSubscriptionSlot!!!";
    if (v1 == 2) {
      double v3 = "CTSubscriptionSlotTwo";
    }
    if (v1 == 1) {
      id v4 = "CTSubscriptionSlotOne";
    }
    else {
      id v4 = v3;
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: slot %s stall detected %d", "-[WRM_EnhancedCTService updateDataStallState:stall:]_block_invoke", v4, *(unsigned __int8 *)(result + 48));
    [objc_msgSend(*(id *)(v2 + 32), "stallDetected") replaceObjectAtIndex:*(void *)(v2 + 40) - 1 withObject:[NSNumber numberWithInt:*(unsigned __int8 *)(v2 + 48)]];
    id result = *(void *)(v2 + 32);
    if (*(unsigned char *)(result + 484))
    {
      if (*(unsigned char *)(v2 + 48))
      {
        id result = [(unint64_t)[(id)[(id)[(id)[(id)[result cbrsCoreAnalyticsMetricsSent] objectAtIndex:*(void *)(v2 + 40) - 1] BOOLValue]]];
        if ((result & 1) == 0)
        {
          id result = *(void *)(v2 + 32);
          if (*(void *)(v2 + 40) == *(void *)(result + 476))
          {
            id result = (unint64_t)[(id)result numberofSubscriptions];
            if (result >= 2)
            {
              [+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton") submitMetricsCBRSWithDataSimRecommendation:0 forSimSlot:*(void *)(v2 + 40)];
              id v5 = [*(id *)(v2 + 32) cbrsCoreAnalyticsMetricsSent];
              uint64_t v6 = *(void *)(v2 + 40) - 1;
              return (unint64_t)[v5 replaceObjectAtIndex:v6 withObject:&__kCFBooleanTrue];
            }
          }
        }
      }
    }
  }
  return result;
}

id sub_10004AF10(uint64_t a1)
{
  unint64_t v2 = "CTSubscriptionSlotUnknown";
  double v3 = "CTSubscriptionSlotOne";
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = "Unknown CTSubscriptionSlot!!!";
  if (v4 == 2) {
    id v5 = "CTSubscriptionSlotTwo";
  }
  if (v4 != 1) {
    double v3 = v5;
  }
  if (v4) {
    unint64_t v2 = v3;
  }
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: slot %s Current RAT %d", "-[WRM_EnhancedCTService updateCurrentRatInfo:currentNRCell:]_block_invoke", v2, *(unsigned int *)(a1 + 48));
  id v6 = [*(id *)(a1 + 32) currentNRCellType];
  uint64_t v7 = *(void *)(a1 + 40) - 1;
  unsigned int v8 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];

  return [v6 replaceObjectAtIndex:v7 withObject:v8];
}

id sub_10004B078(uint64_t a1)
{
  unint64_t v2 = "CTSubscriptionSlotUnknown";
  double v3 = "CTSubscriptionSlotOne";
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = "Unknown CTSubscriptionSlot!!!";
  if (v4 == 2) {
    id v5 = "CTSubscriptionSlotTwo";
  }
  if (v4 != 1) {
    double v3 = v5;
  }
  if (v4) {
    unint64_t v2 = v3;
  }
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: slot %s DL Configued BW %d", "-[WRM_EnhancedCTService updateLTEBandwidth:LTEBW:]_block_invoke", v2, *(unsigned int *)(a1 + 48));
  id v6 = [*(id *)(a1 + 32) cellBandwidth];
  uint64_t v7 = *(void *)(a1 + 40) - 1;
  unsigned int v8 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];

  return [v6 replaceObjectAtIndex:v7 withObject:v8];
}

id sub_10004B1E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  double v3 = "CTSubscriptionSlotOne";
  uint64_t v4 = "Unknown CTSubscriptionSlot!!!";
  if (v2 == 2) {
    uint64_t v4 = "CTSubscriptionSlotTwo";
  }
  if (v2 != 1) {
    double v3 = v4;
  }
  if (v2) {
    id v5 = v3;
  }
  else {
    id v5 = "CTSubscriptionSlotUnknown";
  }
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: slot %s DL Configued BW %d, UL configued BW:%d", "-[WRM_EnhancedCTService updateConfiguredMaxBW:dlbw:ulbw:]_block_invoke", v5, *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52));
  [objc_msgSend(*(id *)(a1 + 32), "configuredMaxDLBW") replaceObjectAtIndex:*(void *)(a1 + 40) - 1 withObject:[NSNumber numberWithInt:*(unsigned int *)(a1 + 48)]];
  id v6 = [*(id *)(a1 + 32) configuredMaxULBW];
  uint64_t v7 = *(void *)(a1 + 40) - 1;
  unsigned int v8 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 52)];

  return [v6 replaceObjectAtIndex:v7 withObject:v8];
}

id sub_10004B384(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 48);
  double v3 = "CTSubscriptionSlotOne";
  uint64_t v4 = "Unknown CTSubscriptionSlot!!!";
  if (v2 == 2) {
    uint64_t v4 = "CTSubscriptionSlotTwo";
  }
  if (v2 != 1) {
    double v3 = v4;
  }
  if (*(unsigned char *)(a1 + 48)) {
    id v5 = v3;
  }
  else {
    id v5 = "CTSubscriptionSlotUnknown";
  }
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: slot %s DL BW %d, Conf:%d", "-[WRM_EnhancedCTService updateDownlinkEstimatedBW:bw:conf:lte:nr:]_block_invoke", v5, *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44));
  [objc_msgSend(*(id *)(a1 + 32), "estimatedBWDL") replaceObjectAtIndex:*(unsigned __int8 *)(a1 + 48) - 1 withObject:[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 40))];
  id v6 = [*(id *)(a1 + 32) estimatedBWDLConf];
  uint64_t v7 = *(unsigned __int8 *)(a1 + 48) - 1;
  unsigned int v8 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 44)];

  return [v6 replaceObjectAtIndex:v7 withObject:v8];
}

id sub_10004B534(uint64_t a1)
{
  int v2 = "CTSubscriptionSlotUnknown";
  double v3 = "CTSubscriptionSlotOne";
  uint64_t v4 = "Unknown CTSubscriptionSlot!!!";
  int v5 = *(unsigned __int8 *)(a1 + 52);
  if (v5 == 2) {
    uint64_t v4 = "CTSubscriptionSlotTwo";
  }
  if (v5 != 1) {
    double v3 = v4;
  }
  if (*(unsigned char *)(a1 + 52)) {
    int v2 = v3;
  }
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: slot %s, UL BW %d, Conf:%d, Queue:%d", "-[WRM_EnhancedCTService updateUplinkEstimatedBW:bw:conf:queue:]_block_invoke", v2, *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44), *(unsigned int *)(a1 + 48));
  [objc_msgSend(*(id *)(a1 + 32), "estimatedBWUL") replaceObjectAtIndex:*(unsigned __int8 *)(a1 + 52) - 1 withObject:[NSNumber numberWithInt:*(unsigned int *)(a1 + 40)]];
  id v6 = [*(id *)(a1 + 32) estimatedBWULConf];
  uint64_t v7 = *(unsigned __int8 *)(a1 + 52) - 1;
  unsigned int v8 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 44)];

  return [v6 replaceObjectAtIndex:v7 withObject:v8];
}

id sub_10004B6D4(uint64_t a1)
{
  int v2 = "CTSubscriptionSlotUnknown";
  double v3 = "CTSubscriptionSlotOne";
  uint64_t v4 = *(void *)(a1 + 40);
  int v5 = "Unknown CTSubscriptionSlot!!!";
  if (v4 == 2) {
    int v5 = "CTSubscriptionSlotTwo";
  }
  if (v4 != 1) {
    double v3 = v5;
  }
  if (v4) {
    int v2 = v3;
  }
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: slot %s, High rate indictor:%d", "-[WRM_EnhancedCTService updateHighRateLikely:highrateIndicator:]_block_invoke", v2, *(unsigned __int8 *)(a1 + 48));
  id v6 = [*(id *)(a1 + 32) highDataRateObserved];
  uint64_t v7 = *(void *)(a1 + 40) - 1;
  unsigned int v8 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 48)];

  return [v6 replaceObjectAtIndex:v7 withObject:v8];
}

id sub_10004B83C(uint64_t a1)
{
  int v2 = "CTSubscriptionSlotUnknown";
  double v3 = "CTSubscriptionSlotOne";
  uint64_t v4 = *(void *)(a1 + 40);
  int v5 = "Unknown CTSubscriptionSlot!!!";
  if (v4 == 2) {
    int v5 = "CTSubscriptionSlotTwo";
  }
  if (v4 != 1) {
    double v3 = v5;
  }
  if (v4) {
    int v2 = v3;
  }
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"%s: slot %s, NeighberNRCell %d", "-[WRM_EnhancedCTService updateConnectedStateSummary:neighberNRCell:highrateIndicator:]_block_invoke", v2, *(unsigned int *)(a1 + 48));
  id v6 = [*(id *)(a1 + 32) neighberCellType];
  uint64_t v7 = *(void *)(a1 + 40) - 1;
  unsigned int v8 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];

  return [v6 replaceObjectAtIndex:v7 withObject:v8];
}

void sub_10004BAD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10004BC4C(id a1, NSString *a2)
{
  byte_10027CFC2 = 0;
}

id sub_10004C844(uint64_t a1)
{
  return [*(id *)(a1 + 32) reloadCellularSpeedTestSettingsFromPreferences];
}

void sub_10004CA04(uint64_t a1, char a2)
{
  double v3 = [*(id *)(a1 + 32) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10004CA84;
  block[3] = &unk_10020DAD0;
  char v5 = a2;
  dispatch_async(v3, block);
}

id sub_10004CA84(uint64_t a1)
{
  id result = +[WCM_Logging logLevel:22, @"LocationController: ClientLocationAuthorized callback authorized: %d", *(unsigned __int8 *)(a1 + 32) message];
  byte_10027C878 = *(unsigned char *)(a1 + 32);
  return result;
}

void sub_10004CAD8(uint64_t a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  double v11 = [*(id *)(a1 + 32) queue];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10004CB80;
  v12[3] = &unk_10020DFF8;
  *(double *)&v12[5] = a2;
  *(double *)&v12[6] = a3;
  *(double *)&v12[7] = a7;
  v12[4] = *(void *)(a1 + 32);
  dispatch_async(v11, v12);
}

id sub_10004CB80(uint64_t a1)
{
  +[WCM_Logging logLevel:22, @"LocationController: ClientLocationHandler callback, latitude=%f, longitude=%f, speed=%f", *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56) message];
  *(void *)(*(void *)(a1 + 32) + 316) = *(void *)(a1 + 40);
  *(void *)(*(void *)(a1 + 32) + 324) = *(void *)(a1 + 48);
  [*(id *)(a1 + 32) queryLocationdDBForHarvestingData:*(double *)(a1 + 40) :*(double *)(a1 + 48)];
  int v2 = *(void **)(*(void *)(a1 + 32) + 308);

  return [v2 stopMonitoring];
}

void sub_10004CD7C(uint64_t a1, char a2)
{
  double v3 = [*(id *)(a1 + 32) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10004CDFC;
  block[3] = &unk_10020DAD0;
  char v5 = a2;
  dispatch_async(v3, block);
}

id sub_10004CDFC(uint64_t a1)
{
  return +[WCM_Logging logLevel:22, @"wrmSdmLocationController: ClientLocationAuthorized callback authorized: %d", *(unsigned __int8 *)(a1 + 32) message];
}

char *sub_10004CECC(uint64_t a1)
{
  [objc_msgSend(*(id *)(a1 + 32), "locDbRequired") replaceObjectAtIndex:*(void *)(a1 + 40) - 1 withObject:[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 48))];
  unsigned __int8 v2 = [[[objc_msgSend(*(id *)(a1 + 32), "locDbRequired") objectAtIndex:0] BOOLValue];
  id result = *(char **)(a1 + 32);
  if (v2)
  {
    if (!*(void *)(result + 356)) {
      goto LABEL_8;
    }
LABEL_6:
    if (!result[364])
    {
      result[364] = 1;
      return (char *)+[WCM_Logging logLevel:22, @"updateWrmSdmLocationDbInfoRegister for sub %d start location monitoring", *(void *)(a1 + 40) message];
    }
    return result;
  }
  unsigned int v4 = [[[result locDbRequired] objectAtIndex:1] BOOLValue];
  id result = *(char **)(a1 + 32);
  if (!*(void *)(result + 356))
  {
LABEL_8:
    return (char *)+[WCM_Logging logLevel:22 message:@"updateWrmSdmLocationDbInfoRegister Failed: locationController not initialized"];
  }
  if (v4) {
    goto LABEL_6;
  }
  if (result[364])
  {
    result[364] = 0;
    return (char *)+[WCM_Logging logLevel:22, @"updateWrmSdmLocationDbInfoRegister for sub %d stop location monitoring", *(void *)(a1 + 40) message];
  }
  return result;
}

id sub_10004D0D4(uint64_t a1)
{
  id v2 = [objc_alloc((Class)NSDate) initWithTimeIntervalSince1970:*(double *)(*(void *)(a1 + 32) + 348)];
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(v5 + 332);
  uint64_t v7 = *(void *)(v5 + 340);
  uint64_t v8 = *(unsigned int *)(a1 + 56);
  uint64_t v9 = *(unsigned int *)(a1 + 60);
  [v2 timeIntervalSinceNow];
  +[WCM_Logging logLevel:22, @"fetchWrmSdmLocationDbInfoWithMcc from BB: mcc=%u, mnc=%u, cellId=%llu, simSlot=%d, lastKnown latitude=%f, longitude=%f location obtained from %fsec before", v8, v9, v4, v3, v6, v7, -v10 message];

  id result = [*(id *)(a1 + 32) fetchSmartDataModeDataForLocation:*(unsigned __int16 *)(a1 + 56) :*(unsigned __int16 *)(a1 + 60) :*(void *)(a1 + 40) :*(void *)(a1 + 48) :*(double *)(*(void *)(a1 + 32) + 332) :*(double *)(*(void *)(a1 + 32) + 340)];
  uint64_t v12 = *(void *)(a1 + 32);
  if (*(void *)(v12 + 356))
  {
    if (!*(unsigned char *)(v12 + 364))
    {
      *(unsigned char *)(v12 + 364) = 1;
      return +[WCM_Logging logLevel:22, @"fetchSmartDataModeDataForLocation for sub %d start location monitoring", *(void *)(a1 + 48) message];
    }
  }
  return result;
}

id sub_10004D284(uint64_t a1)
{
  id result = *(id *)(*(void *)(a1 + 32) + 308);
  if (result) {
    return [result startMonitoring];
  }
  return result;
}

void sub_10004D31C(uint64_t a1)
{
  if (qword_10027CE20)
  {
    if (*(void *)(*(void *)(a1 + 32) + 300))
    {
      id v2 = [(id)qword_10027CE20 copy];
      +[WCM_Logging logLevel:22, @"CellStationManager: cell ID to check: %@", v2 message];
      uint64_t v3 = *(void *)(a1 + 32);
      uint64_t v4 = *(void **)(v3 + 300);
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      v6[2] = sub_10004D440;
      v6[3] = &unk_10020DFD0;
      v6[4] = v3;
      [v4 isFR2:v2 completionHandler:v6];
      if (v2) {

      }
      return;
    }
    CFStringRef v5 = @"CellStationManager: cellStationManager is nil";
  }
  else
  {
    CFStringRef v5 = @"CellStationManager: cell ID to check is nil";
  }

  +[WCM_Logging logLevel:22 message:v5];
}

id sub_10004D440(uint64_t a1, uint64_t a2)
{
  if (a2) {
    CFStringRef v4 = @"triggerHarvestedCellEval, CellStationManager: FR2 cell found: 1";
  }
  else {
    CFStringRef v4 = @"triggerHarvestedCellEval, CellStationManager: FR2 cell found: 0";
  }
  +[WCM_Logging logLevel:22 message:v4];
  id v5 = [*(id *)(a1 + 32) currentHarvestedCellTypeFR2Capable];
  uint64_t v6 = (char *)[*(id *)(a1 + 32) dataPreferredSlot] - 1;
  uint64_t v7 = +[NSNumber numberWithInt:a2];

  return [v5 replaceObjectAtIndex:v6 withObject:v7];
}

id sub_10004D580(uint64_t a1)
{
  if (qword_10027CE20)
  {

    qword_10027CE20 = 0;
  }
  dword_10027CE30 = *(_DWORD *)(a1 + 48);
  qword_10027CE20 = (uint64_t)[*(id *)(a1 + 32) copy];
  qword_10027CE28 = (uint64_t)[(id)qword_10027CE20 substringToIndex:*(int *)(a1 + 48)];
  if (objc_msgSend(objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "getSCService"), "isWiFiPrimary"))
  {
    +[WCM_Logging logLevel:22 message:@"triggerHarvestedCellEval, cell changed"];
    [*(id *)(a1 + 40) triggerHarvestedCellEval];
  }
  else
  {
    +[WCM_Logging logLevel:22 message:@"resetting updateGlobalCellID"];
    [objc_msgSend(*(id *)(a1 + 40), "detectedFR1CellCountLocDB") replaceObjectAtIndex:(char *)objc_msgSend(*(id *)(a1 + 40), "dataPreferredSlot") - 1 withObject:[NSNumber numberWithInt:0]];
    [objc_msgSend(*(id *)(a1 + 40), "detectedFR2CellCountLocDB") replaceObjectAtIndex:[*(id *)(a1 + 40) dataPreferredSlot] - 1 withObject:[NSNumber numberWithInt:0]];
  }
  return +[WCM_Logging logLevel:22, @"Global Cell ID: %@", qword_10027CE20 message];
}

uint64_t sub_10004D7A4()
{
  uint64_t v3 = 0;
  CFStringRef v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = sub_100046A4C;
  uint64_t v7 = sub_100046A5C;
  uint64_t v0 = qword_10027CFF8;
  uint64_t v8 = qword_10027CFF8;
  if (!qword_10027CFF8)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_10004FC64;
    v2[3] = &unk_10020DAF8;
    v2[4] = &v3;
    sub_10004FC64((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_10004D87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10004D894()
{
  uint64_t v3 = 0;
  CFStringRef v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = sub_100046A4C;
  uint64_t v7 = sub_100046A5C;
  uint64_t v0 = qword_10027D008;
  uint64_t v8 = qword_10027D008;
  if (!qword_10027D008)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_10004FE24;
    v2[3] = &unk_10020DAF8;
    v2[4] = &v3;
    sub_10004FE24((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_10004D96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10004D984(uint64_t a1, void *a2, void *a3)
{
  CFStringRef v4 = a2;
  if (![a2 count]) {
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"queryLocationdDBForHarvestingData: returned empty BLOB, lat:%f, lon:%f, error %@", *(void *)(a1 + 40), *(void *)(a1 + 48), [a3 description]);
  }
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"queryLocationdDBForHarvestingData: results.count %lu, lat:%f, lon:%f", [v4 count], *(void *)(a1 + 40), *(void *)(a1 + 48));
  uint64_t v6 = &xpc_dictionary_get_BOOL_ptr;
  [objc_msgSend(*(id *)(a1 + 32), "detectedFR1CellCountLocDB") replaceObjectAtIndex:(char *)objc_msgSend(*(id *)(a1 + 32), "dataPreferredSlot") - 1 withObject:[NSNumber numberWithInt:0]];
  [objc_msgSend(*(id *)(a1 + 32), "detectedFR2CellCountLocDB") replaceObjectAtIndex:((char *)objc_msgSend(*(id *)(a1 + 32), "dataPreferredSlot") - 1) withObject:[NSNumber numberWithInt:0]];
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  id result = [v4 countByEnumeratingWithState:&v43 objects:v47 count:16];
  id v38 = result;
  if (result)
  {
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    BOOL v36 = v4;
    uint64_t v37 = *(void *)v44;
    uint64_t v8 = (void **)(WCM_ExternalAccessoryIOS + 16);
    p_cache = WCM_ExternalAccessoryIOS.cache;
    do
    {
      double v10 = 0;
      do
      {
        if (*(void *)v44 != v37) {
          objc_enumerationMutation(v4);
        }
        double v11 = [[CellPreformanceTile alloc] initWithData:*(void *)(*((void *)&v43 + 1) + 8 * (void)v10)];
        if (v11)
        {
          unsigned int v39 = v10;
          +[WCM_Logging logLevel:22, @"queryLocationdDBForHarvestingData: tile %@", v11 message];
          +[WCM_Logging logLevel:22, @"queryLocationdDBForHarvestingData: LTE CELL count: %lu", sub_100035B78((id *)v11) message];
          unsigned int v42 = (id *)v11;
          if (sub_100035B78((id *)v11))
          {
            uint64_t v12 = (id *)v11;
            unint64_t v13 = 0;
            do
            {
              double v14 = sub_100035B90(v12, v13);
              +[WCM_Logging logLevel:22, @"queryLocationdDBForHarvestingData: LTE CELL: %@", v14 message];
              if (p_cache[452])
              {
                double v15 = (void *)sub_10003A4FC((uint64_t)v14);
                if ([v15 isEqualToString:p_cache[452]])
                {
                  unsigned int v16 = v6;
                  uint64_t v17 = sub_10003A524((uint64_t)v14);
                  uint64_t v18 = sub_10003A538((uint64_t)v14);
                  unint64_t v19 = sub_10003A574((uint64_t)v14) / 0xF4240uLL;
                  +[WCM_Logging logLevel:22, @"queryLocationdDBForHarvestingData: GCI:%@ FR1 count: %d, FR2: %d,NRBW: %d", v15, v17, v18, v19 message];
                  id v20 = [*(id *)(a1 + 32) detectedFR1CellCountLocDB];
                  double v21 = (char *)[*(id *)(a1 + 32) dataPreferredSlot] - 1;
                  uint64_t v22 = v17;
                  uint64_t v6 = v16;
                  [v20 replaceObjectAtIndex:v21 withObject:[v16[76] numberWithInt:v22]];
                  if (v18) {
                    [objc_msgSend(*(id *)(a1 + 32), "detectedFR2CellCountLocDB") replaceObjectAtIndex:[*(id *)(a1 + 32) dataPreferredSlot] - 1 withObject:[v16[76] numberWithInt:v18]];
                  }
                  [objc_msgSend(*(id *)(a1 + 32), "detectedFR1CellBW") replaceObjectAtIndex:(char *)objc_msgSend(*(id *)(a1 + 32), "dataPreferredSlot") - 1 withObject:[v16[76] numberWithInt:v19]];
                  uint64_t v8 = WCM_ExternalAccessoryIOS.cache;
                  p_cache = WCM_ExternalAccessoryIOS.cache;
                  uint64_t v12 = v42;
                }
                id v23 = [p_cache[452] substringToIndex:dword_10027CE30];
                v8[453] = v23;
                if (v23 && [v15 containsString:v23])
                {
                  int v24 = sub_10003A538((uint64_t)v14);
                  uint64_t v40 = sub_10003A524((uint64_t)v14) + v40;
                  uint64_t v25 = (v24 + v41);
                  uint64_t v12 = v42;
                  uint64_t v41 = v25;
                }
              }
              ++v13;
            }
            while ((unint64_t)sub_100035B78(v12) > v13);
          }
          +[WCM_Logging logLevel:22, @"queryLocationdDBForHarvestingData: prefix GCI:%@ total FR2: %d, total FR1: %d", v8[453], v41, v40 message];
          if (v41 > v40)
          {
            +[WCM_Logging logLevel:22, @"queryLocationdDBForHarvestingData: updating FR2 count:%d", v41 message];
            [objc_msgSend(*(id *)(a1 + 32), "detectedFR2CellCountLocDB") replaceObjectAtIndex:[*(id *)(a1 + 32) dataPreferredSlot] - 1 withObject:[v6[76] numberWithInt:v41]];
          }
          double v26 = v42;
          +[WCM_Logging logLevel:22, @"queryLocationdDBForHarvestingData: NR CELL count: %lu", sub_100035C60(v42) message];
          if (sub_100035C60(v42))
          {
            unint64_t v27 = 0;
            do
            {
              double v28 = sub_100035C78(v26, v27);
              +[WCM_Logging logLevel:22, @"queryLocationdDBForHarvestingData: NR CELL: %@", v28 message];
              id v29 = [p_cache[452] substringToIndex:dword_10027CE30];
              v8[453] = v29;
              if (v29)
              {
                uint64_t v30 = (void *)sub_10003A4FC((uint64_t)v28);
                if ([v30 containsString:v8[453]])
                {
                  uint64_t v31 = sub_10003A524((uint64_t)v28);
                  uint64_t v32 = sub_10003A538((uint64_t)v28);
                  +[WCM_Logging logLevel:22, @"queryLocationdDBForHarvestingData: NR GCI:%@ FR1 count: %d, FR2: %d, NRBW: %d", v30, v31, v32, sub_10003A600((uint64_t)v28) message];
                  if ([*(id *)(a1 + 32) determineifSABWCriteriaMet])
                  {
                    unsigned int v33 = *(unsigned int **)(a1 + 32);
                    uint64_t v34 = v33[113];
                  }
                  else
                  {
                    unsigned int v35 = sub_10003A600((uint64_t)v28);
                    unsigned int v33 = *(unsigned int **)(a1 + 32);
                    uint64_t v34 = v33[113];
                    if (v35 < v34) {
                      uint64_t v34 = 10;
                    }
                  }
                  p_cache = (void **)(WCM_ExternalAccessoryIOS + 16);
                  [objc_msgSend(objc_msgSend(v33, "detectedFR1CellCountLocDB"), "replaceObjectAtIndex:withObject:", (char *)objc_msgSend(*(id *)(a1 + 32), "dataPreferredSlot") - 1, objc_msgSend(v6[76], "numberWithInt:", 1)];
                  [objc_msgSend(*(id *)(a1 + 32), "detectedFR1CellBW") replaceObjectAtIndex:[objc_msgSend(*(id *)(a1 + 32), "dataPreferredSlot") - 1] withObject:[v6[76] numberWithInt:v34]];
                  double v26 = v42;
                }
              }
              ++v27;
            }
            while ((unint64_t)sub_100035C60(v26) > v27);
          }

          CFStringRef v4 = v36;
          double v10 = v39;
        }
        else
        {
          +[WCM_Logging logLevel:22 message:@"queryLocationdDBForHarvestingData: returned BLOB tile nil"];
        }
        double v10 = (char *)v10 + 1;
      }
      while (v10 != v38);
      id result = [v4 countByEnumeratingWithState:&v43 objects:v47 count:16];
      id v38 = result;
    }
    while (result);
  }
  return result;
}

void sub_10004E090(uint64_t a1)
{
  [objc_msgSend(*(id *)(a1 + 32), "VoiceLqmValue") replaceObjectAtIndex:*(unsigned __int8 *)(a1 + 56) withObject:[NSNumber numberWithInt:*(unsigned __int8 *)(a1 + 57)]];
  [objc_msgSend(*(id *)(a1 + 32), "VoiceLqmIsValid") replaceObjectAtIndex:*(unsigned __int8 *)(a1 + 56) withObject:[NSNumber numberWithBool:1]];
  [objc_msgSend(*(id *)(a1 + 32), "imsVoiceOverPSSupported") replaceObjectAtIndex:*(unsigned __int8 *)(a1 + 56) withObject:[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 58)]];
  [objc_msgSend(*(id *)(a1 + 32), "PrevAudioErasurePercent") replaceObjectAtIndex:*(unsigned __int8 *)(a1 + 56) withObject:[NSNumber numberWithDouble:*(double *)(a1 + 40)]];
  [objc_msgSend(*(id *)(a1 + 32), "servCellRSRP") replaceObjectAtIndex:*(unsigned __int8 *)(a1 + 56) withObject:[NSNumber numberWithDouble:*(double *)(a1 + 48)]];
  id v2 = [[+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton") getQueue];

  dispatch_async(v2, &stru_10020E090);
}

void sub_10004E1C0(id a1)
{
  id v1 = +[WRM_HandoverManager WRM_HandoverManagerSingleton];

  [v1 evaluateHandover];
}

id sub_10004E4C4(uint64_t a1, void *a2, void *a3)
{
  CFStringRef v4 = a2;
  uint64_t v6 = WRM_MotionController;
  if ([a2 count])
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"fetchSmartDataModeDataForLocation: results.count %lu, lat:%f, lon:%f", [v4 count], *(void *)(a1 + 40), *(void *)(a1 + 48));
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    id v32 = [v4 countByEnumeratingWithState:&v36 objects:v40 count:16];
    if (!v32) {
      return [*(id *)(a1 + 32) sendWrmSdmLocationDbInfo:*(void *)(a1 + 56) dbAvailable:1 mcc:*(unsigned __int16 *)(a1 + 72) mnc:*(unsigned __int16 *)(a1 + 74) cellId:*(void *)(a1 + 64)];
    }
    uint64_t v30 = v4;
    uint64_t v31 = *(void *)v37;
    while (1)
    {
      for (uint64_t i = 0; i != v32; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v37 != v31) {
          objc_enumerationMutation(v4);
        }
        uint64_t v8 = [[DYNAMICRATSELECTIONDynamicRatSelectionTile alloc] initWithData:*(void *)(*((void *)&v36 + 1) + 8 * i)];
        if (v8)
        {
          uint64_t v9 = (id *)v8;
          unsigned int v33 = i;
          if (sub_10002726C((id *)v8))
          {
            uint64_t v10 = 0;
            uint64_t v34 = v9;
            while (1)
            {
              double v11 = sub_100027284(v9, v10);
              [&v6[50] logLevel:22, @"fetchSmartDataModeDataForLocation: tile %@", v11 message];
              if (sub_100036854((uint64_t)v11) == 1)
              {
                uint64_t v12 = 0;
                goto LABEL_16;
              }
              if (sub_100036854((uint64_t)v11) == 3) {
                break;
              }
              if (sub_100036854((uint64_t)v11) == 2)
              {
                uint64_t v12 = 3;
LABEL_16:
                if (sub_1000369D4((uint64_t)v11) != 2)
                {
                  unint64_t v13 = *(void **)(a1 + 32);
                  uint64_t v35 = *(void *)(a1 + 56);
                  uint64_t v14 = sub_100038238((uint64_t)v11);
                  BOOL v15 = sub_100038260((BOOL)v11);
                  unsigned int v16 = v6;
                  uint64_t v17 = sub_10003824C((uint64_t)v11);
                  uint64_t v18 = a1;
                  uint64_t v19 = sub_10003827C((uint64_t)v11);
                  LODWORD(v29) = sub_100038290((uint64_t)v11);
                  uint64_t v20 = v14;
                  uint64_t v9 = v34;
                  uint64_t v21 = v17;
                  uint64_t v6 = v16;
                  uint64_t v22 = v19;
                  a1 = v18;
                  [v13 setWrmSdmLocationDbPushOneEntryForCellType:v35 cellType:v12 anchorCellBandwidth:v20 mmWavePresent:v15 downlinkThroughput:v21 sampleCount:v22 deploymentCount:v29];
                }
                goto LABEL_19;
              }
              [&v6[50] logLevel:22 message:@"fetchSmartDataModeDataForLocation: returned BLOB rat type not correct"];
LABEL_19:
              if ((unint64_t)sub_10002726C(v9) <= ++v10) {
                goto LABEL_20;
              }
            }
            uint64_t v12 = 4;
            goto LABEL_16;
          }
LABEL_20:

          CFStringRef v4 = v30;
          uint64_t i = v33;
        }
        else
        {
          [&v6[50] logLevel:22 message:@"fetchSmartDataModeDataForLocation: returned BLOB tile nil"];
        }
      }
      id v32 = [v4 countByEnumeratingWithState:&v36 objects:v40 count:16];
      if (!v32) {
        return [*(id *)(a1 + 32) sendWrmSdmLocationDbInfo:*(void *)(a1 + 56) dbAvailable:1 mcc:*(unsigned __int16 *)(a1 + 72) mnc:*(unsigned __int16 *)(a1 + 74) cellId:*(void *)(a1 + 64)];
      }
    }
  }
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"fetchSmartDataModeDataForLocation: returned empty BLOB, lat:%f, lon:%f, error %@", *(void *)(a1 + 40), *(void *)(a1 + 48), [a3 description]);
  int v24 = *(void **)(a1 + 32);
  uint64_t v25 = *(unsigned __int16 *)(a1 + 72);
  uint64_t v26 = *(unsigned __int16 *)(a1 + 74);
  uint64_t v27 = *(void *)(a1 + 56);
  uint64_t v28 = *(void *)(a1 + 64);

  return [v24 sendWrmSdmLocationDbInfo:v27 dbAvailable:0 mcc:v25 mnc:v26 cellId:v28];
}

void sub_10004E8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double sub_10004E8F8(uint64_t a1)
{
  double result = *(double *)(*(void *)(a1 + 32) + 332);
  *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_10004E9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double sub_10004E9E0(uint64_t a1)
{
  double result = *(double *)(*(void *)(a1 + 32) + 340);
  *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_10004EAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double sub_10004EAC8(uint64_t a1)
{
  double result = *(double *)(*(void *)(a1 + 32) + 348);
  *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

id *sub_10004EBB8(id *result)
{
  if (result[5])
  {
    id v1 = result;
    id v2 = [result[4] cbrsCoreAnalyticsMetricsSent];
    uint64_t v3 = (uint64_t)v1[5] - 1;
    return (id *)[v2 replaceObjectAtIndex:v3 withObject:&__kCFBooleanFalse];
  }
  return result;
}

void sub_10004EF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10004EF54(uint64_t a1)
{
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v2 = [*(id *)(a1 + 32) subscriptions];
  id result = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (result)
  {
    id v4 = result;
    uint64_t v5 = *(void *)v12;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v12 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v11 + 1) + 8 * (void)v6);
        if ([v7 slotID])
        {
          if (*(void *)(a1 + 40))
          {
            if ([v7 uuid])
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                [v7 uuid];
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0
                  && !objc_msgSend(*(id *)(a1 + 40), "compare:", objc_msgSend(v7, "uuid")))
                {
                  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v7 slotID];
                  uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
                  if (v8)
                  {
                    if (v8 == 1)
                    {
                      uint64_t v9 = "CTSubscriptionSlotOne";
                    }
                    else
                    {
                      BOOL v10 = v8 == 2;
                      uint64_t v9 = "Unknown CTSubscriptionSlot!!!";
                      if (v10) {
                        uint64_t v9 = "CTSubscriptionSlotTwo";
                      }
                    }
                  }
                  else
                  {
                    uint64_t v9 = "CTSubscriptionSlotUnknown";
                  }
                  +[WCM_Logging logLevel:22, @"feedCellularMetricsWithUUID found matching slot=%s", v9 message];
                }
              }
            }
          }
        }
        uint64_t v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id result = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
      id v4 = result;
    }
    while (result);
  }
  return result;
}

void *sub_10004F860(uint64_t a1)
{
  id v2 = (void *)sub_10004F8B0();
  id result = dlsym(v2, "BMDeviceCellularAvailabilityStatusStateAsString");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_10027CFC8 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_10004F8B0()
{
  v2[0] = 0;
  if (!qword_10027CFD0)
  {
    v2[1] = _NSConcreteStackBlock;
    v2[2] = (void *)3221225472;
    v2[3] = sub_10004F9A8;
    v2[4] = &unk_10020DB30;
    void v2[5] = v2;
    long long v3 = off_10020E128;
    uint64_t v4 = 0;
    qword_10027CFD0 = _sl_dlopen();
  }
  uint64_t v0 = qword_10027CFD0;
  if (!qword_10027CFD0) {
    sub_10013A4B8(v2);
  }
  if (v2[0]) {
    free(v2[0]);
  }
  return v0;
}

uint64_t sub_10004F9A8()
{
  uint64_t result = _sl_dlopen();
  qword_10027CFD0 = result;
  return result;
}

void *sub_10004FA1C(uint64_t a1)
{
  id v2 = (void *)sub_10004F8B0();
  uint64_t result = dlsym(v2, "__BMRootLibrary");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_10027CFD8 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_10004FA6C(uint64_t a1)
{
  sub_10004F8B0();
  Class result = objc_getClass("BMDeviceCellularAvailabilityStatus");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    sub_10013A520();
  }
  qword_10027CFE0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

Class sub_10004FAC4(uint64_t a1)
{
  v3[0] = 0;
  if (!qword_10027CFF0)
  {
    v3[1] = _NSConcreteStackBlock;
    v3[2] = (void *)3221225472;
    v3[3] = sub_10004FBF0;
    void v3[4] = &unk_10020DB30;
    v3[5] = v3;
    long long v4 = off_10020E140;
    uint64_t v5 = 0;
    qword_10027CFF0 = _sl_dlopen();
  }
  if (!qword_10027CFF0) {
    sub_10013A588(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("OSASystemConfiguration");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    sub_10013A5F0();
  }
  qword_10027CFE8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t sub_10004FBF0()
{
  uint64_t result = _sl_dlopen();
  qword_10027CFF0 = result;
  return result;
}

Class sub_10004FC64(uint64_t a1)
{
  sub_10004FCBC();
  Class result = objc_getClass("GEOLocation");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    sub_10013A658();
  }
  qword_10027CFF8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

void sub_10004FCBC()
{
  v0[0] = 0;
  if (!qword_10027D000)
  {
    v0[1] = _NSConcreteStackBlock;
    v0[2] = (void *)3221225472;
    v0[3] = sub_10004FDB0;
    v0[4] = &unk_10020DB30;
    v0[5] = v0;
    long long v1 = off_10020E158;
    uint64_t v2 = 0;
    qword_10027D000 = _sl_dlopen();
  }
  if (!qword_10027D000) {
    sub_10013A6C0(v0);
  }
  if (v0[0]) {
    free(v0[0]);
  }
}

uint64_t sub_10004FDB0()
{
  uint64_t result = _sl_dlopen();
  qword_10027D000 = result;
  return result;
}

Class sub_10004FE24(uint64_t a1)
{
  sub_10004FCBC();
  Class result = objc_getClass("GEOGeographicMetadataRequester");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    sub_10013A728();
  }
  qword_10027D008 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t sub_10004FF80(uint64_t result)
{
  byte_10027CE58 = *(unsigned char *)(result + 32);
  return result;
}

id sub_100050364(uint64_t a1)
{
  +[WCM_Logging logLevel:24 message:@"registerSFOutrankDecisionNotification: received notification"];
  uint64_t state64 = 0;
  notify_get_state(dword_10027CE5C, &state64);
  if (state64)
  {
    byte_10027CE6C = 1;
    dispatch_time_t v2 = dispatch_time(0, (uint64_t)(*(double *)&qword_10027CA68 * 1000000000.0));
    +[WCM_Logging logLevel:24, @"evaluateWiFiVersusCell: received cellular outrank notification from Symptoms, submit AWD metrics after waiting for %d seconds", qword_10027CA68 message];
    uint64_t v3 = *(void *)(a1 + 32);
    long long v4 = *(NSObject **)(v3 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000504B8;
    block[3] = &unk_10020D980;
    void block[4] = v3;
    dispatch_after(v2, v4, block);
  }
  else
  {
    byte_10027CE6C = 0;
    [*(id *)(a1 + 32) triggerEnableSA:0];
  }
  return +[WCM_Logging logLevel:24, @"registerSFOutrankDecisionNotification: state : %d, trigger reason: %d", state64, byte_10027CE6C message];
}

id sub_1000504B8(uint64_t a1)
{
  [*(id *)(a1 + 32) triggerEnableSA:1];
  [*(id *)(a1 + 32) evalExitForceOutranking];
  id result = [*(id *)(a1 + 32) submitWiFiVersusCellAWDMetrics];
  byte_10027CE6C = 0;
  return result;
}

id sub_10005059C(uint64_t a1)
{
  [*(id *)(a1 + 32) notifyRecommendations];

  return +[WCM_Logging logLevel:24 message:@"registerSFRestartNotification:Detected symptomsd restart"];
}

void sub_1000506C0(id a1, int a2)
{
  +[WCM_Logging logLevel:24 message:@"registerThermalTimeToThrottleNotification:Detected time to throttle high temperature"];
  uint64_t state64 = 0;
  notify_get_state(dword_10027CE64, &state64);
  BOOL v3 = state64 <= 0x1E && ((1 << state64) & 0x40100400) != 0;
  BOOL v6 = state64 == 30 || state64 == 20 || state64 == 10;
  byte_10027CE5A = v3;
  +[WCM_Logging logLevel:24, @"registerThermalTimeToThrottleNotification: time : %d, %d", state64, v6 message];
}

id sub_100050768()
{
  uint64_t state64 = 0;
  notify_get_state(dword_10027CE64, &state64);
  BOOL v1 = state64 <= 0x1E && ((1 << state64) & 0x40100400) != 0;
  BOOL v4 = state64 == 30 || state64 == 20 || state64 == 10;
  byte_10027CE5A = v1;
  return +[WCM_Logging logLevel:24, @"registerThermalTimeToThrottleNotification: time : notifyCallback(): %d, %d", state64, v4 message];
}

void sub_1000508C8(id a1, int a2)
{
  +[WCM_Logging logLevel:24 message:@"registerThermalNotificationReasonToThrottle:Detected reason to throttle high teperature"];
  uint64_t state64 = 0;
  notify_get_state(dword_10027CE60, &state64);
  +[WCM_Logging logLevel:24, @"registerThermalNotificationReasonToThrottle: reason : %d", state64 message];
}

void sub_100050934()
{
  uint64_t state64 = 0;
  notify_get_state(dword_10027CE60, &state64);
  NSLog(@"notifyCallback(): %d", state64);
}

id sub_100050EAC(uint64_t a1)
{
  id v2 = +[WRM_EnhancedCTService wrm_EnhancedCTServiceSingleton];
  unsigned int v3 = [v2 getConfiguredMaxBW];
  unsigned int v4 = [v2 getCellConfiguredBandwidthThreshold];
  if (v3) {
    BOOL v5 = v3 >= v4;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    return +[WCM_Logging logLevel:24 message:@"evaluateWiFiVersusCell: do not evalExitForceOutranking"];
  }
  else
  {
    id result = +[WCM_Logging logLevel:24, @"evaluateWiFiVersusCell: evalExitForceOutranking, wifi state: %d", byte_10027CE38 message];
    if (byte_10027CE38 == 1)
    {
      byte_10027CE59 = 1;
      uint64_t v7 = *(void **)(a1 + 32);
      return [v7 evaluateWiFiVersusCell];
    }
  }
  return result;
}

uint64_t sub_100050FBC(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = dispatch_queue_create("CoexMgr.IOKit.Camera", 0);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = v4;
  if (v4)
  {
    BOOL v5 = v4;
    dispatch_retain(v4);
    *(void *)(a1 + 24) = 0;
    dispatch_release(v5);
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  *(void *)(a1 + 32) = 0;
  ctu::iokit::Controller::create();
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 152) = a2;
  *(void *)(a1 + 160) = 0;
  BOOL v6 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
  dispatch_queue_t v7 = dispatch_queue_create("com.apple.CoexManager.Camera", v6);
  uint64_t v8 = *(NSObject **)(a1 + 160);
  *(void *)(a1 + 160) = v7;
  if (v8) {
    dispatch_release(v8);
  }
  *(_WORD *)(a1 + 144) = 0;
  return a1;
}

void sub_1000510A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000357EC(a10);
  }
  long long v12 = v10[4];
  if (v12) {
    dispatch_release(v12);
  }
  sub_100051210(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_1000510D0(uint64_t a1)
{
  id v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

uint64_t sub_100051110(uint64_t a1)
{
  id v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

uint64_t sub_100051150(uint64_t a1)
{
  id v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

uint64_t sub_100051190(uint64_t a1)
{
  id v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

uint64_t sub_1000511D0(uint64_t a1)
{
  id v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void *sub_100051210(void *a1)
{
  id v2 = a1[3];
  if (v2) {
    dispatch_release(v2);
  }
  unsigned int v3 = a1[2];
  if (v3) {
    dispatch_release(v3);
  }
  unsigned int v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void sub_10005125C(void *a1@<X8>)
{
  CFRunLoopRef Main = CFRunLoopGetMain();
  sub_100052B8C((uint64_t *)&Main, a1);
}

uint64_t sub_10005129C(uint64_t result, char a2)
{
  *(unsigned char *)(result + 144) = a2;
  return result;
}

uint64_t sub_1000512A4(uint64_t result, char a2)
{
  *(unsigned char *)(result + 145) = a2;
  return result;
}

uint64_t sub_1000512AC(uint64_t result, char a2)
{
  *(unsigned char *)(result + 146) = a2;
  return result;
}

uint64_t sub_1000512B4(uint64_t result, char a2)
{
  *(unsigned char *)(result + 147) = a2;
  return result;
}

uint64_t sub_1000512BC(uint64_t result, char a2)
{
  *(unsigned char *)(result + 148) = a2;
  return result;
}

void sub_1000512C4(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(void **)a2;
  if (*(void *)a2) {
    unsigned int v4 = _Block_copy(v4);
  }
  BOOL v5 = *(const void **)(a1 + 56);
  *(void *)(a1 + 56) = v4;
  if (v5) {
    _Block_release(v5);
  }
  BOOL v6 = *(NSObject **)(a2 + 8);
  if (v6) {
    dispatch_retain(v6);
  }
  dispatch_queue_t v7 = *(NSObject **)(a1 + 64);
  *(void *)(a1 + 64) = v6;
  if (v7)
  {
    dispatch_release(v7);
  }
}

void sub_100051348(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(void **)a2;
  if (*(void *)a2) {
    unsigned int v4 = _Block_copy(v4);
  }
  BOOL v5 = *(const void **)(a1 + 72);
  *(void *)(a1 + 72) = v4;
  if (v5) {
    _Block_release(v5);
  }
  BOOL v6 = *(NSObject **)(a2 + 8);
  if (v6) {
    dispatch_retain(v6);
  }
  dispatch_queue_t v7 = *(NSObject **)(a1 + 80);
  *(void *)(a1 + 80) = v6;
  if (v7)
  {
    dispatch_release(v7);
  }
}

void sub_1000513CC(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(void **)a2;
  if (*(void *)a2) {
    unsigned int v4 = _Block_copy(v4);
  }
  BOOL v5 = *(const void **)(a1 + 88);
  *(void *)(a1 + 88) = v4;
  if (v5) {
    _Block_release(v5);
  }
  BOOL v6 = *(NSObject **)(a2 + 8);
  if (v6) {
    dispatch_retain(v6);
  }
  dispatch_queue_t v7 = *(NSObject **)(a1 + 96);
  *(void *)(a1 + 96) = v6;
  if (v7)
  {
    dispatch_release(v7);
  }
}

void sub_100051450(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(void **)a2;
  if (*(void *)a2) {
    unsigned int v4 = _Block_copy(v4);
  }
  BOOL v5 = *(const void **)(a1 + 104);
  *(void *)(a1 + 104) = v4;
  if (v5) {
    _Block_release(v5);
  }
  BOOL v6 = *(NSObject **)(a2 + 8);
  if (v6) {
    dispatch_retain(v6);
  }
  dispatch_queue_t v7 = *(NSObject **)(a1 + 112);
  *(void *)(a1 + 112) = v6;
  if (v7)
  {
    dispatch_release(v7);
  }
}

void sub_1000514D4(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(void **)a2;
  if (*(void *)a2) {
    unsigned int v4 = _Block_copy(v4);
  }
  BOOL v5 = *(const void **)(a1 + 128);
  *(void *)(a1 + 128) = v4;
  if (v5) {
    _Block_release(v5);
  }
  BOOL v6 = *(NSObject **)(a2 + 8);
  if (v6) {
    dispatch_retain(v6);
  }
  dispatch_queue_t v7 = *(NSObject **)(a1 + 136);
  *(void *)(a1 + 136) = v6;
  if (v7)
  {
    dispatch_release(v7);
  }
}

uint64_t sub_100051558(uint64_t a1)
{
  sub_100052D68(&v13, (void *)a1);
  uint64_t v3 = v13;
  id v2 = v14;
  if (v14)
  {
    atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_1000357EC(v2);
  }
  if (!*(unsigned char *)(a1 + 148))
  {
    uint64_t v7 = 0x1000000;
    if (!v2) {
      return v7;
    }
    goto LABEL_16;
  }
  *(_DWORD *)(a1 + 124) = 1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1174405120;
  aBlock[2] = sub_1000516A8;
  aBlock[3] = &unk_10020E378;
  aBlock[4] = a1;
  aBlock[5] = v3;
  BOOL v10 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v4 = _Block_copy(aBlock);
  BOOL v5 = v4;
  BOOL v6 = *(NSObject **)(a1 + 160);
  if (!v6)
  {
    long long v11 = v4;
    long long v12 = 0;
    sub_1000514D4(a1, (uint64_t)&v11);
    if (!v5) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  dispatch_retain(*(dispatch_object_t *)(a1 + 160));
  long long v11 = v5;
  long long v12 = v6;
  sub_1000514D4(a1, (uint64_t)&v11);
  dispatch_release(v6);
  if (v5) {
LABEL_12:
  }
    _Block_release(v5);
LABEL_13:
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v7 = 16;
  if (v2) {
LABEL_16:
  }
    std::__shared_weak_count::__release_weak(v2);
  return v7;
}

void sub_1000516A8(void *a1, uint64_t a2, int a3)
{
  unsigned int v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = a1[5];
      sub_1000357EC(v8);
      if (v9)
      {
        sub_100051724(v7, a2, a3);
      }
    }
  }
}

void sub_100051724(uint64_t a1, uint64_t a2, int a3)
{
  if ((const mach_header_64 *)(a2 & 0xFFFFFFFF00000000) == &_mh_execute_header && a2 == 1 && a3 == 257)
  {
    int v3 = 2;
    goto LABEL_9;
  }
  if ((const mach_header_64 *)(a2 & 0xFFFFFFFF00000000) == &_mh_execute_header && a2 == 2 && a3 == 257)
  {
    int v3 = 4;
LABEL_9:
    if (v3 != *(_DWORD *)(a1 + 124))
    {
      *(_DWORD *)(a1 + 124) = v3;
      sub_100052B10(a1);
    }
  }
}

uint64_t sub_100051784(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1000517A0(uint64_t a1)
{
  BOOL v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t sub_1000517B0(uint64_t a1)
{
  sub_100052D68(&v37, (void *)a1);
  uint64_t v3 = v37;
  uint64_t v2 = v38;
  if (v38)
  {
    atomic_fetch_add_explicit(&v38->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_1000357EC(v2);
  }
  if (!*(unsigned char *)(a1 + 144))
  {
    int v7 = 0x100000;
    goto LABEL_15;
  }
  *(unsigned char *)(a1 + 120) = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1174405120;
  aBlock[2] = sub_100051B9C;
  aBlock[3] = &unk_10020E3A8;
  aBlock[4] = a1;
  aBlock[5] = v3;
  uint64_t v34 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v4 = _Block_copy(aBlock);
  BOOL v5 = v4;
  BOOL v6 = *(NSObject **)(a1 + 160);
  if (v6)
  {
    dispatch_retain(*(dispatch_object_t *)(a1 + 160));
    uint64_t v35 = v5;
    long long v36 = v6;
    sub_1000512C4(a1, (uint64_t)&v35);
    dispatch_release(v6);
    if (!v5) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  uint64_t v35 = v4;
  long long v36 = 0;
  sub_1000512C4(a1, (uint64_t)&v35);
  if (v5) {
LABEL_11:
  }
    _Block_release(v5);
LABEL_12:
  if (v34) {
    std::__shared_weak_count::__release_weak(v34);
  }
  int v7 = 1;
LABEL_15:
  if (!*(unsigned char *)(a1 + 145))
  {
    int v11 = v7 | 0x200000;
    goto LABEL_26;
  }
  *(unsigned char *)(a1 + 121) = 0;
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 1174405120;
  v29[2] = sub_100051DAC;
  v29[3] = &unk_10020E3D8;
  v29[4] = a1;
  void v29[5] = v3;
  uint64_t v30 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = _Block_copy(v29);
  uint64_t v9 = v8;
  BOOL v10 = *(NSObject **)(a1 + 160);
  if (!v10)
  {
    uint64_t v31 = v8;
    id v32 = 0;
    sub_100051348(a1, (uint64_t)&v31);
    if (!v9) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  dispatch_retain(*(dispatch_object_t *)(a1 + 160));
  uint64_t v31 = v9;
  id v32 = v10;
  sub_100051348(a1, (uint64_t)&v31);
  dispatch_release(v10);
  if (v9) {
LABEL_23:
  }
    _Block_release(v9);
LABEL_24:
  int v11 = v7 | 2;
  if (v30) {
    std::__shared_weak_count::__release_weak(v30);
  }
LABEL_26:
  if (!*(unsigned char *)(a1 + 146))
  {
    int v15 = v11 | 0x400000;
    goto LABEL_37;
  }
  *(unsigned char *)(a1 + 122) = 0;
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 1174405120;
  v25[2] = sub_100051FBC;
  v25[3] = &unk_10020E408;
  v25[4] = a1;
  v25[5] = v3;
  uint64_t v26 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  long long v12 = _Block_copy(v25);
  uint64_t v13 = v12;
  long long v14 = *(NSObject **)(a1 + 160);
  if (!v14)
  {
    uint64_t v27 = v12;
    uint64_t v28 = 0;
    sub_1000513CC(a1, (uint64_t)&v27);
    if (!v13) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  dispatch_retain(*(dispatch_object_t *)(a1 + 160));
  uint64_t v27 = v13;
  uint64_t v28 = v14;
  sub_1000513CC(a1, (uint64_t)&v27);
  dispatch_release(v14);
  if (v13) {
LABEL_34:
  }
    _Block_release(v13);
LABEL_35:
  int v15 = v11 | 4;
  if (v26) {
    std::__shared_weak_count::__release_weak(v26);
  }
LABEL_37:
  if (!*(unsigned char *)(a1 + 147))
  {
    uint64_t v19 = v15 | 0x800000u;
    goto LABEL_48;
  }
  *(unsigned char *)(a1 + 123) = 0;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 1174405120;
  v21[2] = sub_1000521CC;
  v21[3] = &unk_10020E438;
  v21[4] = a1;
  v21[5] = v3;
  uint64_t v22 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v16 = _Block_copy(v21);
  uint64_t v17 = v16;
  uint64_t v18 = *(NSObject **)(a1 + 160);
  if (!v18)
  {
    id v23 = v16;
    int v24 = 0;
    sub_100051450(a1, (uint64_t)&v23);
    if (!v17) {
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  dispatch_retain(*(dispatch_object_t *)(a1 + 160));
  id v23 = v17;
  int v24 = v18;
  sub_100051450(a1, (uint64_t)&v23);
  dispatch_release(v18);
  if (v17) {
LABEL_45:
  }
    _Block_release(v17);
LABEL_46:
  uint64_t v19 = v15 | 8u;
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
LABEL_48:
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return v19;
}

void sub_100051B9C(void *a1, int a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    BOOL v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = a1[5];
      sub_1000357EC(v6);
      if (v7)
      {
        sub_100051C14(v5, (unsigned char *)(v5 + 120), a2);
      }
    }
  }
}

void sub_100051C14(uint64_t a1, unsigned char *a2, int a3)
{
  int v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v3 == a3)
  {
    if (!v4) {
      return;
    }
    goto LABEL_5;
  }
  if (v4)
  {
LABEL_5:
    *a2 = a3;
    return;
  }
  if (a3 || v3 != 1)
  {
    *a2 = a3;
    sub_100052A74(a1);
  }
  else
  {
    *a2 = 0;
    sub_100052D68(&v14, (void *)a1);
    uint64_t v7 = v14;
    BOOL v6 = v15;
    if (v15)
    {
      atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_1000357EC(v6);
    }
    uint64_t v8 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 1uLL, 0, *(dispatch_queue_t *)(a1 + 160));
    uint64_t v9 = *(NSObject **)(a1 + 32);
    *(void *)(a1 + 32) = v8;
    if (v9)
    {
      dispatch_release(v9);
      uint64_t v8 = *(NSObject **)(a1 + 32);
    }
    dispatch_time_t v10 = dispatch_time(0, 300000000);
    dispatch_source_set_timer(v8, v10, 0xFFFFFFFFFFFFFFFFLL, 0x1312D00uLL);
    int v11 = *(NSObject **)(a1 + 32);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 1174405120;
    handler[2] = sub_100052DF8;
    handler[3] = &unk_10020E4E8;
    void handler[4] = a1;
    handler[5] = v7;
    uint64_t v13 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    dispatch_source_set_event_handler(v11, handler);
    dispatch_activate(*(dispatch_object_t *)(a1 + 32));
    if (v13) {
      std::__shared_weak_count::__release_weak(v13);
    }
    if (v6) {
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_100051DAC(void *a1, int a2)
{
  int v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    BOOL v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = a1[5];
      sub_1000357EC(v6);
      if (v7)
      {
        sub_100051E24(v5, (unsigned char *)(v5 + 121), a2);
      }
    }
  }
}

void sub_100051E24(uint64_t a1, unsigned char *a2, int a3)
{
  int v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v3 == a3)
  {
    if (!v4) {
      return;
    }
    goto LABEL_5;
  }
  if (v4)
  {
LABEL_5:
    *a2 = a3;
    return;
  }
  if (a3 || v3 != 1)
  {
    *a2 = a3;
    sub_100052A74(a1);
  }
  else
  {
    *a2 = 0;
    sub_100052D68(&v14, (void *)a1);
    uint64_t v7 = v14;
    BOOL v6 = v15;
    if (v15)
    {
      atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_1000357EC(v6);
    }
    uint64_t v8 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 1uLL, 0, *(dispatch_queue_t *)(a1 + 160));
    uint64_t v9 = *(NSObject **)(a1 + 32);
    *(void *)(a1 + 32) = v8;
    if (v9)
    {
      dispatch_release(v9);
      uint64_t v8 = *(NSObject **)(a1 + 32);
    }
    dispatch_time_t v10 = dispatch_time(0, 300000000);
    dispatch_source_set_timer(v8, v10, 0xFFFFFFFFFFFFFFFFLL, 0x1312D00uLL);
    int v11 = *(NSObject **)(a1 + 32);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 1174405120;
    handler[2] = sub_100052E70;
    handler[3] = &unk_10020E518;
    void handler[4] = a1;
    handler[5] = v7;
    uint64_t v13 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    dispatch_source_set_event_handler(v11, handler);
    dispatch_activate(*(dispatch_object_t *)(a1 + 32));
    if (v13) {
      std::__shared_weak_count::__release_weak(v13);
    }
    if (v6) {
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_100051FBC(void *a1, int a2)
{
  int v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    BOOL v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = a1[5];
      sub_1000357EC(v6);
      if (v7)
      {
        sub_100052034(v5, (unsigned char *)(v5 + 122), a2);
      }
    }
  }
}

void sub_100052034(uint64_t a1, unsigned char *a2, int a3)
{
  int v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v3 == a3)
  {
    if (!v4) {
      return;
    }
    goto LABEL_5;
  }
  if (v4)
  {
LABEL_5:
    *a2 = a3;
    return;
  }
  if (a3 || v3 != 1)
  {
    *a2 = a3;
    sub_100052A74(a1);
  }
  else
  {
    *a2 = 0;
    sub_100052D68(&v14, (void *)a1);
    uint64_t v7 = v14;
    BOOL v6 = v15;
    if (v15)
    {
      atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_1000357EC(v6);
    }
    uint64_t v8 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 1uLL, 0, *(dispatch_queue_t *)(a1 + 160));
    uint64_t v9 = *(NSObject **)(a1 + 32);
    *(void *)(a1 + 32) = v8;
    if (v9)
    {
      dispatch_release(v9);
      uint64_t v8 = *(NSObject **)(a1 + 32);
    }
    dispatch_time_t v10 = dispatch_time(0, 300000000);
    dispatch_source_set_timer(v8, v10, 0xFFFFFFFFFFFFFFFFLL, 0x1312D00uLL);
    int v11 = *(NSObject **)(a1 + 32);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 1174405120;
    handler[2] = sub_100052EE8;
    handler[3] = &unk_10020E548;
    void handler[4] = a1;
    handler[5] = v7;
    uint64_t v13 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    dispatch_source_set_event_handler(v11, handler);
    dispatch_activate(*(dispatch_object_t *)(a1 + 32));
    if (v13) {
      std::__shared_weak_count::__release_weak(v13);
    }
    if (v6) {
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1000521CC(void *a1, int a2)
{
  int v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    BOOL v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = a1[5];
      sub_1000357EC(v6);
      if (v7)
      {
        sub_100052244(v5, (unsigned char *)(v5 + 123), a2);
      }
    }
  }
}

void sub_100052244(uint64_t a1, unsigned char *a2, int a3)
{
  int v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v3 == a3)
  {
    if (!v4) {
      return;
    }
    goto LABEL_5;
  }
  if (v4)
  {
LABEL_5:
    *a2 = a3;
    return;
  }
  if (a3 || v3 != 1)
  {
    *a2 = a3;
    sub_100052A74(a1);
  }
  else
  {
    *a2 = 0;
    sub_100052D68(&v14, (void *)a1);
    uint64_t v7 = v14;
    BOOL v6 = v15;
    if (v15)
    {
      atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_1000357EC(v6);
    }
    uint64_t v8 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 1uLL, 0, *(dispatch_queue_t *)(a1 + 160));
    uint64_t v9 = *(NSObject **)(a1 + 32);
    *(void *)(a1 + 32) = v8;
    if (v9)
    {
      dispatch_release(v9);
      uint64_t v8 = *(NSObject **)(a1 + 32);
    }
    dispatch_time_t v10 = dispatch_time(0, 300000000);
    dispatch_source_set_timer(v8, v10, 0xFFFFFFFFFFFFFFFFLL, 0x1312D00uLL);
    int v11 = *(NSObject **)(a1 + 32);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 1174405120;
    handler[2] = sub_100052F60;
    handler[3] = &unk_10020E578;
    void handler[4] = a1;
    handler[5] = v7;
    uint64_t v13 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    dispatch_source_set_event_handler(v11, handler);
    dispatch_activate(*(dispatch_object_t *)(a1 + 32));
    if (v13) {
      std::__shared_weak_count::__release_weak(v13);
    }
    if (v6) {
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

uint64_t sub_1000523DC(void *a1)
{
  uint64_t v2 = (ctu::iokit::Controller *)a1[5];
  if (!v2) {
    return 0x40000;
  }
  uint64_t v3 = a1[7];
  if (v3 && a1[8]) {
    goto LABEL_21;
  }
  uint64_t v4 = a1[9];
  if ((!v4 || !a1[10]) && (!a1[11] || !a1[12]) && (!a1[13] || !a1[14]) && (!a1[16] || !a1[17])) {
    return 0x80000;
  }
  if (v3)
  {
    if (a1[8])
    {
LABEL_21:
      if (!ctu::iokit::Controller::setupCameraService(v2)) {
        return 0x20000;
      }
      uint64_t v5 = (const void *)a1[7];
      if (v5 && a1[8])
      {
        BOOL v6 = _Block_copy(v5);
        uint64_t v7 = a1[8];
        uint64_t v35 = v6;
        long long v36 = v7;
        if (v7) {
          dispatch_retain(v7);
        }
        int v8 = ctu::iokit::Controller::setFaceIDCallback();
        if (v36) {
          dispatch_release(v36);
        }
        if (v35) {
          _Block_release(v35);
        }
        if (v8) {
          uint64_t v9 = 1;
        }
        else {
          uint64_t v9 = 0x100000;
        }
      }
      else
      {
        uint64_t v9 = 0;
      }
      dispatch_time_t v10 = (const void *)a1[9];
      if (v10 && a1[10])
      {
        int v11 = _Block_copy(v10);
        long long v12 = a1[10];
        aBlocuint64_t k = v11;
        object = v12;
        if (v12) {
          dispatch_retain(v12);
        }
        char v13 = ctu::iokit::Controller::setFrontCameraCallback();
        if (object) {
          dispatch_release(object);
        }
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v13) {
          uint64_t v9 = v9 | 2;
        }
        else {
          uint64_t v9 = v9 | 0x200000;
        }
      }
      uint64_t v14 = (const void *)a1[11];
      if (v14 && a1[12])
      {
        int v15 = _Block_copy(v14);
        unsigned int v16 = a1[12];
        uint64_t v31 = v15;
        id v32 = v16;
        if (v16) {
          dispatch_retain(v16);
        }
        char v17 = ctu::iokit::Controller::setBackTeleCameraCallback();
        if (v32) {
          dispatch_release(v32);
        }
        if (v31) {
          _Block_release(v31);
        }
        if (v17) {
          uint64_t v9 = v9 | 4;
        }
        else {
          uint64_t v9 = v9 | 0x400000;
        }
      }
      uint64_t v18 = (const void *)a1[13];
      if (v18 && a1[14])
      {
        uint64_t v19 = _Block_copy(v18);
        uint64_t v20 = a1[14];
        uint64_t v29 = v19;
        uint64_t v30 = v20;
        if (v20) {
          dispatch_retain(v20);
        }
        char v21 = ctu::iokit::Controller::setBackSuperWideCameraCallback();
        if (v30) {
          dispatch_release(v30);
        }
        if (v29) {
          _Block_release(v29);
        }
        if (v21) {
          uint64_t v9 = v9 | 8;
        }
        else {
          uint64_t v9 = v9 | 0x800000;
        }
      }
      goto LABEL_71;
    }
    uint64_t v4 = a1[9];
  }
  if (v4 && a1[10] || a1[11] && a1[12] || a1[13] && a1[14]) {
    goto LABEL_21;
  }
  uint64_t v9 = 0;
LABEL_71:
  uint64_t v22 = (const void *)a1[16];
  if (v22 && a1[17])
  {
    id v23 = _Block_copy(v22);
    int v24 = a1[17];
    uint64_t v27 = v23;
    uint64_t v28 = v24;
    if (v24) {
      dispatch_retain(v24);
    }
    char v25 = ctu::iokit::Controller::setAccessoryCallback();
    if (v28) {
      dispatch_release(v28);
    }
    if (v27) {
      _Block_release(v27);
    }
    if (v25) {
      return v9 | 0x10;
    }
    else {
      return v9 | 0x1000000;
    }
  }
  return v9;
}

void sub_1000526D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100051110((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100052740(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  if (v2) {
    sub_1000357EC(v2);
  }
  uint64_t v3 = *(__CFRunLoop **)(a1 + 152);
  if (v3 && CFRunLoopIsWaiting(v3))
  {
    uint64_t v4 = dispatch_group_create();
    uint64_t v5 = v4;
    if (v4)
    {
      dispatch_retain(v4);
      dispatch_group_enter(v5);
    }
    BOOL v6 = *(__CFRunLoop **)(a1 + 152);
    block[0] = _NSConcreteStackBlock;
    block[1] = 1174405120;
    block[2] = nullsub_3;
    block[3] = &unk_10020E468;
    dispatch_group_t group = v5;
    if (v5)
    {
      dispatch_retain(v5);
      dispatch_group_enter(group);
    }
    CFRunLoopPerformBlock(v6, kCFRunLoopDefaultMode, block);
    CFRunLoopWakeUp(*(CFRunLoopRef *)(a1 + 152));
    if (group)
    {
      dispatch_group_leave(group);
      if (group) {
        dispatch_release(group);
      }
    }
    if (v5)
    {
      dispatch_group_leave(v5);
      dispatch_release(v5);
      dispatch_group_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
      dispatch_release(v5);
    }
    else
    {
      dispatch_group_wait(0, 0xFFFFFFFFFFFFFFFFLL);
    }
  }
}

void sub_100052884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  if (v14)
  {
    dispatch_group_leave(v14);
    dispatch_release(v14);
    dispatch_release(v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000528CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(NSObject **)(a2 + 32);
  *(void *)(a1 + 32) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    uint64_t v4 = *(NSObject **)(a1 + 32);
    if (v4)
    {
      dispatch_group_enter(v4);
    }
  }
}

void sub_100052920(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 32);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 32);
    if (v3)
    {
      dispatch_release(v3);
    }
  }
}

void *sub_100052970(void *a1)
{
  sub_100052740((uint64_t)a1);
  uint64_t v2 = a1[20];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[17];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (const void *)a1[16];
  if (v4) {
    _Block_release(v4);
  }
  uint64_t v5 = a1[14];
  if (v5) {
    dispatch_release(v5);
  }
  BOOL v6 = (const void *)a1[13];
  if (v6) {
    _Block_release(v6);
  }
  uint64_t v7 = a1[12];
  if (v7) {
    dispatch_release(v7);
  }
  int v8 = (const void *)a1[11];
  if (v8) {
    _Block_release(v8);
  }
  uint64_t v9 = a1[10];
  if (v9) {
    dispatch_release(v9);
  }
  dispatch_time_t v10 = (const void *)a1[9];
  if (v10) {
    _Block_release(v10);
  }
  int v11 = a1[8];
  if (v11) {
    dispatch_release(v11);
  }
  long long v12 = (const void *)a1[7];
  if (v12) {
    _Block_release(v12);
  }
  char v13 = (std::__shared_weak_count *)a1[6];
  if (v13) {
    sub_1000357EC(v13);
  }
  uint64_t v14 = a1[4];
  if (v14) {
    dispatch_release(v14);
  }

  return sub_100051210(a1);
}

void sub_100052A5C(void *a1)
{
}

void sub_100052A74(uint64_t a1)
{
  sub_100052D68(&v3, (void *)a1);
  uint64_t v2 = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_1000357EC(v2);
  }
  sub_100055278(((*(unsigned char *)(a1 + 122) & 7) << 6) & 0xF1C0 | ((*(unsigned char *)(a1 + 123) & 7) << 9) | (8
                                                                                                * (*(unsigned char *)(a1 + 121) & 7)) | *(unsigned char *)(a1 + 120) & 7u);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_100052AF8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100052B10(uint64_t a1)
{
  sub_100052D68(&v3, (void *)a1);
  uint64_t v2 = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_1000357EC(v2);
  }
  sub_1000553FC(*(unsigned int *)(a1 + 124));
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_100052B74(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100052B8C(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xC0uLL);
  sub_100052C00(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_100052CE0((uint64_t)a2, v4 + 3, (uint64_t)(v4 + 3));
}

void sub_100052BEC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100052C00(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10020E4A8;
  sub_100050FBC((uint64_t)(a1 + 3), *a2);
  return a1;
}

void sub_100052C4C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100052C60(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10020E4A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100052C80(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10020E4A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void *sub_100052CD4(uint64_t a1)
{
  return sub_100052970((void *)(a1 + 24));
}

void sub_100052CE0(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      uint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      if (v5)
      {
        sub_1000357EC(v5);
      }
    }
  }
}

void *sub_100052D68(void *a1, void *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  *a1 = *a2;
  if (!v3)
  {
    a1[1] = 0;
LABEL_5:
    sub_100052DAC();
  }
  uint64_t v4 = std::__shared_weak_count::lock(v3);
  a1[1] = v4;
  if (!v4) {
    goto LABEL_5;
  }
  return a1;
}

void sub_100052DAC()
{
  exception = __cxa_allocate_exception(8uLL);
}

void sub_100052DF8(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = a1[5];
      sub_1000357EC(v4);
      if (v5)
      {
        sub_100052A74(v3);
        dispatch_source_cancel(*(dispatch_source_t *)(v3 + 32));
        BOOL v6 = *(NSObject **)(v3 + 32);
        *(void *)(v3 + 32) = 0;
        if (v6)
        {
          dispatch_release(v6);
        }
      }
    }
  }
}

void sub_100052E70(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = a1[5];
      sub_1000357EC(v4);
      if (v5)
      {
        sub_100052A74(v3);
        dispatch_source_cancel(*(dispatch_source_t *)(v3 + 32));
        BOOL v6 = *(NSObject **)(v3 + 32);
        *(void *)(v3 + 32) = 0;
        if (v6)
        {
          dispatch_release(v6);
        }
      }
    }
  }
}

void sub_100052EE8(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = a1[5];
      sub_1000357EC(v4);
      if (v5)
      {
        sub_100052A74(v3);
        dispatch_source_cancel(*(dispatch_source_t *)(v3 + 32));
        BOOL v6 = *(NSObject **)(v3 + 32);
        *(void *)(v3 + 32) = 0;
        if (v6)
        {
          dispatch_release(v6);
        }
      }
    }
  }
}

void sub_100052F60(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = a1[5];
      sub_1000357EC(v4);
      if (v5)
      {
        sub_100052A74(v3);
        dispatch_source_cancel(*(dispatch_source_t *)(v3 + 32));
        BOOL v6 = *(NSObject **)(v3 + 32);
        *(void *)(v3 + 32) = 0;
        if (v6)
        {
          dispatch_release(v6);
        }
      }
    }
  }
}

const char *sub_1000536A0(int a1)
{
  BOOL v1 = "kGood";
  uint64_t v2 = "Unknown";
  if (a1 == 50) {
    uint64_t v2 = "kPoor";
  }
  if (a1 != 100) {
    BOOL v1 = v2;
  }
  if (a1 == 10) {
    return "kBad";
  }
  else {
    return v1;
  }
}

const char *sub_1000536DC(int a1)
{
  id result = "kNone";
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      id result = "kPdcp_Uplink";
      break;
    case 2:
      id result = "kRlc_Downlink";
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      goto LABEL_6;
    case 4:
      id result = "kLqe";
      break;
    case 8:
      id result = "kRach";
      break;
    default:
      if (a1 == 16)
      {
        id result = "kRF";
      }
      else if (a1 == 32)
      {
        id result = "kNWReject";
      }
      else
      {
LABEL_6:
        id result = "Unknown";
      }
      break;
  }
  return result;
}

const char *sub_10005379C(int a1)
{
  if (a1 > 1)
  {
    if (a1 != 2)
    {
      if (a1 == 255) {
        return "kMax";
      }
      return "Unknown";
    }
    return "kEVS";
  }
  else
  {
    if (a1)
    {
      if (a1 == 1) {
        return "kWBAMR";
      }
      return "Unknown";
    }
    return "kNBAMR";
  }
}

const char *sub_1000537FC(unsigned int a1)
{
  if (a1 > 3) {
    return "Unknown";
  }
  else {
    return off_10020E5A8[(char)a1];
  }
}

id sub_100053F40(id result)
{
  if (!qword_10027D018)
  {
    v1.receiver = (id)*((void *)result + 4);
    v1.super_class = (Class)&OBJC_METACLASS___WRM_IDSP2PController;
    id result = [[[objc_msgSendSuper2(&v1, "allocWithZone:", 0) init];
    qword_10027D018 = (uint64_t)result;
  }
  return result;
}

id sub_100054374(uint64_t a1)
{
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  if ([*(id *)(a1 + 32) ConnectedDevices]
    && objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "ConnectedDevices"), "count")
    && (sub_100054554([*(id *)(a1 + 32) ConnectedDevices]),
        long long v15 = 0u,
        long long v16 = 0u,
        long long v13 = 0u,
        long long v14 = 0u,
        id v2 = [*(id *)(a1 + 32) ConnectedDevices],
        (uint64_t v3 = (char *)[v2 countByEnumeratingWithState:&v13 objects:v19 count:16]) != 0))
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v14 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = (void *)IDSCopyIDForDevice();
        int v8 = +[NSSet setWithObject:v7];
      }
      uint64_t v4 = (char *)[v2 countByEnumeratingWithState:&v13 objects:v19 count:16];
    }
    while (v4);
  }
  else
  {
    int v8 = 0;
  }
  +[WCM_Logging logLevel:27, @"IDSP2PSync: Destination count is %d device(s)", [(NSSet *)v8 count] message];
  if (v8)
  {
    if ([objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "service"), "sendMessage:toDestinations:priority:options:identifier:error:", *(void *)(a1 + 40), v8, 300, *(void *)(a1 + 48), &v17, &v18))return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, @"IDSP2PSync: Requested IDS to send message with uuid %@", v17, v12); {
    uint64_t v11 = v17;
    }
    uint64_t v12 = v18;
    CFStringRef v10 = @"IDSP2PSync: Failed to send with uuid %@ error %@";
  }
  else
  {
    CFStringRef v10 = @"IDSP2PSync: Not sending message due to issue with destination!!!";
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, v10, v11, v12);
}

void sub_100054554(void *a1)
{
  if (a1)
  {
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    id v2 = [a1 countByEnumeratingWithState:&v9 objects:v13 count:16];
    if (v2)
    {
      id v3 = v2;
      uint64_t v4 = *(void *)v10;
      do
      {
        for (uint64_t i = 0; i != v3; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v10 != v4) {
            objc_enumerationMutation(a1);
          }
          BOOL v6 = *(void **)(*((void *)&v9 + 1) + 8 * i);
          uint64_t v7 = (void *)IDSCopyIDForDevice();
          [WCM_Logging logLevel:27 message:@"WRM_IDSP2PController (%p) - %s %s %s (%s)", v6, objc_msgSend(objc_msgSend(v6, "uniqueIDOverride"), "UTF8String"), objc_msgSend(v7, "UTF8String"), objc_msgSend(objc_msgSend(v6, "name"), "UTF8String"), objc_msgSend(objc_msgSend(v6, "modelIdentifier"), "UTF8String"), context];
        }
        id v3 = [a1 countByEnumeratingWithState:&v9 objects:v13 count:16];
      }
      while (v3);
    }
  }
  else
  {
    +[WCM_Logging logLevel:27 message:@"WRM_IDSP2PController: No Devices !!"];
  }
}

void sub_100054BD0(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, @"IDSP2PSync: Set of registered devices changed: %lu device(s)", [*(id *)(a1 + 32) count]);
  id v2 = (id)objc_opt_new();
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v3 = *(void **)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v9;
    do
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v3);
        }
        if (*(void *)(*((void *)&v8 + 1) + 8 * i)) {
          [v2 addObject:];
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v5);
  }
  [*(id *)(a1 + 40) setConnectedDevices:v2];
  [*(id *)(a1 + 40) setDevicePaired:[*(id *)(a1 + 40) updateDevicePairingState]];
  +[WCM_Logging logLevel:message:](WCM_Logging, @"IDSP2PSync: Set of registered devices changed (devicesChanged): %lu device(s)", [objc_msgSend(*(id *)(a1 + 40), "ConnectedDevices") count]);
  sub_100054554([*(id *)(a1 + 40) ConnectedDevices]);
}

void sub_100054DFC(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, @"IDSP2PSync: Set of connected devices changed: %lu device(s)", [*(id *)(a1 + 32) count]);
  id v2 = *(void **)(a1 + 32);
}

void sub_100054FA4(uint64_t a1)
{
  if ([*(id *)(a1 + 32) IsIDSInitDone] == 1)
  {
    +[WCM_Logging logLevel:27 message:@"IDSP2PSync: Already initialized, returning"];
  }
  else
  {
    [*(id *)(a1 + 32) setService:[objc_alloc((Class)IDSService) initWithService:@"com.apple.private.alloy.iratmanager"]];
    [objc_msgSend(*(id *)(a1 + 32), "service") addDelegate:*(void *)(a1 + 32) queue:objc_msgSend(*(id *)(a1 + 32), "queue")];
    [*(id *)(a1 + 32) setServiceInitDone:1];
    id v2 = [[objc_msgSend(*(id *)(a1 + 32), "service") devices];
    id v3 = (id)objc_opt_new();
    long long v8 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v9;
      do
      {
        for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v9 != v6) {
            objc_enumerationMutation(v2);
          }
          if (*(void *)(*((void *)&v8 + 1) + 8 * i)) {
            [v3 addObject:];
          }
        }
        id v5 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
      }
      while (v5);
    }
    [*(id *)(a1 + 32) setConnectedDevices:v3];
    [*(id *)(a1 + 32) setDevicePaired:[*(id *)(a1 + 32) updateDevicePairingState]];
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, @"IDSP2PSync: Initial set of connected devices: %lu devices", [v3 count]);
    sub_100054554([*(id *)(a1 + 32) ConnectedDevices]);
  }
}

void sub_100055278(uint64_t a1)
{
  xpc_object_t v2 = xpc_uint64_create(0);
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  +[WCM_Logging logLevel:3, @"IOKIT callback camera state = %d", a1 message];
  if (v3)
  {
    id v4 = +[WCM_PolicyManager singleton];
    id v5 = v4;
    if (v4 && [v4 cameraState] != a1)
    {
      [v5 setCameraState:a1];
      uint64_t v6 = +[WCM_Server singleton];
      uint64_t v7 = [v6 getQueue];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000553F0;
      block[3] = &unk_10020D7D0;
      id v9 = v5;
      dispatch_async(v7, block);
    }
  }
}

void sub_1000553B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000553F0(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleSessionNotification:2800];
}

void sub_1000553FC(uint64_t a1)
{
  xpc_object_t v2 = xpc_uint64_create(0);
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  +[WCM_Logging logLevel:3, @"YYDebug_ IOKIT callback pencil state [state = %d]", a1 message];
  if (v3)
  {
    id v4 = +[WCM_PolicyManager singleton];
    switch(a1)
    {
      case 1:
        CFStringRef v6 = @"YYDebug_ Pencil state unknown";
        break;
      case 2:
        +[WCM_Logging logLevel:3 message:@"YYDebug_ Pencil state attached"];
        uint64_t v5 = 1;
        if (!v4) {
          goto LABEL_14;
        }
        goto LABEL_12;
      case 4:
        +[WCM_Logging logLevel:3 message:@"YYDebug_ Pencil state detached"];
        uint64_t v5 = 0;
        if (!v4) {
          goto LABEL_14;
        }
        goto LABEL_12;
      default:
        CFStringRef v6 = @"YYDebug_ Cannot determine pencil state. This should never happen.";
        break;
    }
    +[WCM_Logging logLevel:3 message:v6];
    uint64_t v5 = 100;
    if (!v4)
    {
LABEL_14:

      goto LABEL_15;
    }
LABEL_12:
    if ([v4 pencilState] != v5)
    {
      [v4 setPencilState:v5];
      uint64_t v7 = +[WCM_Server singleton];
      long long v8 = [v7 getQueue];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000555F0;
      block[3] = &unk_10020D7D0;
      id v10 = v4;
      dispatch_async(v8, block);
    }
    goto LABEL_14;
  }
LABEL_15:
}

void sub_1000555B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000555F0(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleSessionNotification:2801];
}

void sub_100055F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, char a17)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_100055F70(uint64_t a1)
{
  +[WCM_Logging logLevel:22 message:@"CellularProductExperimentsManager: checkTreatmentUpdate: Trial Treatment Updated"];
  +[WCM_Logging logLevel:22 message:@"CellularProductExperimentsManager: checkTreatmentUpdate: trialCallbackReceived : YES"];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  xpc_object_t v3 = WeakRetained;
  if (WeakRetained)
  {
    id v4 = (void *)WeakRetained[1];
    id v9 = off_10027CAD0;
    uint64_t v5 = +[NSArray arrayWithObjects:&v9 count:1];
    uint64_t v6 = v3[2];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1000560AC;
    v8[3] = &unk_10020E5D8;
    uint64_t v7 = *(void *)(a1 + 32);
    v8[4] = v3;
    v8[5] = v7;
    [v4 downloadLevelsForFactors:v5 withNamespace:@"WIRELESS_DATA_ANALYTICS_CELLULAR_PRODUCT_EXPERIMENTATION_INTERNAL" queue:v6 options:0 progress:0 completion:v8];
  }
}

id sub_1000560AC(uint64_t a1, int a2)
{
  if (a2)
  {
    +[WCM_Logging logLevel:22 message:@"CellularProductExperimentsManager: checkTreatmentUpdate: Downloaded modified asset"];
    id result = [*(id *)(a1 + 32) updateTreatment];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  else
  {
    return +[WCM_Logging logLevel:22 message:@"CellularProductExperimentsManager: checkTreatmentUpdate: downloadLevelsForFactors failed"];
  }
  return result;
}

char *sub_10005683C(tlv *a1, const unsigned __int8 *a2, _WORD *a3, unint64_t a4)
{
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

_WORD *sub_100056874(_WORD *a1, __int16 a2)
{
  *a1 = a2;
  return a1 + 1;
}

uint64_t sub_10005687C()
{
  return 2;
}

uint64_t sub_100056884(uint64_t a1, const unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1, a4);
  *(unsigned char *)a3 = *(unsigned char *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)2, v7);
  *(_WORD *)(a3 + 2) = *(_WORD *)(a1 + 1);
  return a1 + 3;
}

uint64_t sub_1000568E0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 2);
  return a1 + 3;
}

uint64_t sub_1000568F8()
{
  return 3;
}

uint64_t sub_100056900(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = *a1;
  uint64_t v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1, a4);
  unsigned int v7 = *(unsigned __int8 *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 1), v6, (const unsigned __int8 *)2, v8);
  int v9 = *(unsigned __int16 *)((char *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 3);
  return (v9 << 16) | v7;
}

void sub_10005696C(void *a1)
{
  __cxa_begin_catch(a1);
  *objc_super v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100056958);
}

uint64_t sub_100056980()
{
  return 6;
}

uint64_t *sub_100056988(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(unsigned char *)uint64_t v2 = *(unsigned char *)a2;
  *(_WORD *)(v2 + 1) = *(_WORD *)(a2 + 2);
  *id result = v2 + 3;
  return result;
}

uint64_t sub_1000569A8(uint64_t a1, const unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1, a4);
  *(unsigned char *)a3 = *(unsigned char *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)2, v7);
  *(_WORD *)(a3 + 2) = *(_WORD *)(a1 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 3), a2, (const unsigned __int8 *)1, v8);
  *(unsigned char *)(a3 + 4) = *(unsigned char *)(a1 + 3);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4, v9);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

uint64_t sub_100056A34(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 2);
  *(unsigned char *)(a1 + 3) = *(unsigned char *)(a2 + 4);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 8);
  return a1 + 8;
}

uint64_t sub_100056A5C()
{
  return 8;
}

uint64_t sub_100056A64(uint64_t *a1, int a2, uint64_t a3, unint64_t a4)
{
  LOBYTE(v5) = 0;
  WORD1(v5) = 0;
  BYTE4(v5) = 0;
  int v6 = 0;
  *a1 = sub_1000569A8(*a1, (const unsigned __int8 *)(*a1 + a2), (uint64_t)&v5, a4);
  return v5;
}

void sub_100056AB8(void *a1)
{
  __cxa_begin_catch(a1);
  *objc_super v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100056AA0);
}

uint64_t sub_100056AC8()
{
  return 11;
}

uint64_t *sub_100056AD0(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(unsigned char *)uint64_t v2 = *(unsigned char *)a2;
  *(_WORD *)(v2 + 1) = *(_WORD *)(a2 + 2);
  *(unsigned char *)(v2 + 3) = *(unsigned char *)(a2 + 4);
  *(_DWORD *)(v2 + 4) = *(_DWORD *)(a2 + 8);
  *id result = v2 + 8;
  return result;
}

char *sub_100056B00(tlv *a1, const unsigned __int8 *a2, unsigned char *a3, unint64_t a4)
{
  *a3 = *(unsigned char *)a1;
  return (char *)a1 + 1;
}

unsigned char *sub_100056B38(unsigned char *a1, unsigned char *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t sub_100056B44()
{
  return 1;
}

uint64_t sub_100056B4C(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  uint64_t result = *(unsigned __int8 *)v5;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_100056B88(void *a1)
{
  __cxa_begin_catch(a1);
  *objc_super v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100056B7CLL);
}

uint64_t sub_100056B9C()
{
  return 4;
}

unsigned char **sub_100056BA4(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  *uint64_t result = v2 + 1;
  return result;
}

uint64_t sub_100056BB8(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = *a1;
  int v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1, a4);
  unsigned int v7 = *(unsigned __int8 *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 1), v6, (const unsigned __int8 *)2, v8);
  int v9 = *(unsigned __int16 *)((char *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 3);
  return (v9 << 16) | v7;
}

void sub_100056C24(void *a1)
{
  __cxa_begin_catch(a1);
  *objc_super v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100056C10);
}

uint64_t sub_100056C38(uint64_t a1, const unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1, a4);
  *(unsigned char *)a3 = *(unsigned char *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)1, v7);
  *(unsigned char *)(a3 + 1) = *(unsigned char *)(a1 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2, v8);
  *(_WORD *)(a3 + 2) = *(_WORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)2, v9);
  *(_WORD *)(a3 + 4) = *(_WORD *)(a1 + 4);
  return a1 + 6;
}

uint64_t sub_100056CC4(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  return a1 + 6;
}

unint64_t sub_100056CEC(uint64_t *a1, int a2, uint64_t a3, unint64_t a4)
{
  unsigned __int16 v6 = 0;
  unsigned int v5 = 0;
  *a1 = sub_100056C38(*a1, (const unsigned __int8 *)(*a1 + a2), (uint64_t)&v5, a4);
  return v5 | ((unint64_t)v6 << 32);
}

void sub_100056D3C(void *a1)
{
  __cxa_begin_catch(a1);
  *objc_super v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100056D20);
}

uint64_t sub_100056D4C()
{
  return 9;
}

uint64_t *sub_100056D54(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(unsigned char *)uint64_t v2 = *(unsigned char *)a2;
  *(unsigned char *)(v2 + 1) = *(unsigned char *)(a2 + 1);
  *(_WORD *)(v2 + 2) = *(_WORD *)(a2 + 2);
  *(_WORD *)(v2 + 4) = *(_WORD *)(a2 + 4);
  *uint64_t result = v2 + 6;
  return result;
}

uint64_t sub_100056D84(uint64_t a1, const unsigned __int8 *a2, _WORD *a3, unint64_t a4)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2, a4);
  *a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2, v7);
  a3[1] = *(_WORD *)(a1 + 2);
  return a1 + 4;
}

_WORD *sub_100056DE0(_WORD *a1, _WORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

uint64_t sub_100056DF8(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  unsigned int v5 = *a1;
  unsigned __int16 v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)2, a4);
  unsigned int v7 = *(unsigned __int16 *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 2), v6, (const unsigned __int8 *)2, v8);
  int v9 = *((unsigned __int16 *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 4);
  return (v9 << 16) | v7;
}

void sub_100056E64(void *a1)
{
  __cxa_begin_catch(a1);
  *objc_super v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100056E50);
}

uint64_t sub_100056E78()
{
  return 7;
}

_WORD **sub_100056E80(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  v2[1] = a2[1];
  *uint64_t result = v2 + 2;
  return result;
}

_WORD *sub_100056EA0(_WORD *a1, _WORD *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t sub_100056EAC(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  unsigned int v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  uint64_t result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_100056EE8(void *a1)
{
  __cxa_begin_catch(a1);
  *objc_super v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100056EDCLL);
}

uint64_t sub_100056EFC()
{
  return 5;
}

_WORD **sub_100056F04(_WORD **result, _WORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  *uint64_t result = v2 + 1;
  return result;
}

uint64_t sub_100056F18(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  unsigned int v5 = *a1;
  unsigned __int16 v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1, a4);
  unsigned int v7 = *(unsigned __int8 *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 1), v6, (const unsigned __int8 *)2, v8);
  int v9 = *(unsigned __int16 *)((char *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 3);
  return (v9 << 16) | v7;
}

void sub_100056F84(void *a1)
{
  __cxa_begin_catch(a1);
  *objc_super v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100056F70);
}

uint64_t sub_100056F98(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  unsigned int v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  uint64_t result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_100056FD4(void *a1)
{
  __cxa_begin_catch(a1);
  *objc_super v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100056FC8);
}

uint64_t sub_100056FE8(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  unsigned int v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  uint64_t result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_100057024(void *a1)
{
  __cxa_begin_catch(a1);
  *objc_super v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100057018);
}

uint64_t sub_100057038(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  unsigned int v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  uint64_t result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_100057074(void *a1)
{
  __cxa_begin_catch(a1);
  *objc_super v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100057068);
}

uint64_t sub_100057088(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  unsigned int v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  uint64_t result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_1000570C4(void *a1)
{
  __cxa_begin_catch(a1);
  *objc_super v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000570B8);
}

uint64_t sub_1000570D8(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  unsigned int v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  uint64_t result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_100057114(void *a1)
{
  __cxa_begin_catch(a1);
  *objc_super v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100057108);
}

uint64_t sub_100057128(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  unsigned int v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  uint64_t result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_100057164(void *a1)
{
  __cxa_begin_catch(a1);
  *objc_super v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100057158);
}

uint64_t sub_100057178(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  unsigned int v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  uint64_t result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_1000571B4(void *a1)
{
  __cxa_begin_catch(a1);
  *objc_super v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000571A8);
}

uint64_t sub_1000571C8(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  unsigned int v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  uint64_t result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_100057204(void *a1)
{
  __cxa_begin_catch(a1);
  *objc_super v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000571F8);
}

tlv *sub_100057218(tlv *a1, const unsigned __int8 *a2, void *a3, unint64_t a4)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1, a4);
  unsigned int v8 = *(unsigned __int8 *)a1;
  unsigned int v7 = (tlv *)((char *)a1 + 1);
  sub_100057BEC((uint64_t)a3, v8);
  long long v11 = (_WORD *)*a3;
  id v10 = (_WORD *)a3[1];
  while (v11 != v10)
  {
    tlv::throwIfNotEnoughBytes(v7, a2, (const unsigned __int8 *)2, v9);
    __int16 v12 = *(_WORD *)v7;
    unsigned int v7 = (tlv *)((char *)v7 + 2);
    *v11++ = v12;
  }
  return v7;
}

_WORD *sub_100057288(unsigned char *a1, _DWORD *a2)
{
  *a1 = (a2[2] - *a2) >> 1;
  uint64_t result = a1 + 1;
  xpc_object_t v3 = *(__int16 **)a2;
  id v4 = (__int16 *)*((void *)a2 + 1);
  while (v3 != v4)
  {
    __int16 v5 = *v3++;
    *result++ = v5;
  }
  return result;
}

uint64_t sub_1000572B8(void *a1)
{
  uint64_t v1 = a1[1];
  if (v1 == *a1) {
    return 1;
  }
  else {
    return (v1 - *a1) | 1;
  }
}

tlv *sub_1000572CC@<X0>(tlv **a1@<X0>, int a2@<W1>, unint64_t a3@<X3>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t result = sub_100057218(*a1, (const unsigned __int8 *)*a1 + a2, a4, a3);
  *a1 = result;
  return result;
}

void sub_10005730C(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100057300);
}

void sub_10005731C(_Unwind_Exception *exception_object)
{
  xpc_object_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100057338(void *a1)
{
  uint64_t v1 = a1[1];
  if (v1 == *a1) {
    return 4;
  }
  else {
    return ((v1 - *a1) | 1) + 3;
  }
}

unsigned char **sub_100057354(unsigned char **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = (a2[2] - *a2) >> 1;
  xpc_object_t v3 = v2 + 1;
  id v4 = *(__int16 **)a2;
  __int16 v5 = (__int16 *)*((void *)a2 + 1);
  while (v4 != v5)
  {
    __int16 v6 = *v4++;
    *v3++ = v6;
  }
  *uint64_t result = v3;
  return result;
}

uint64_t sub_10005738C(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  __int16 v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  uint64_t result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_1000573C8(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000573BCLL);
}

tlv *sub_1000573DC@<X0>(tlv **a1@<X0>, int a2@<W1>, unint64_t a3@<X3>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t result = sub_100057218(*a1, (const unsigned __int8 *)*a1 + a2, a4, a3);
  *a1 = result;
  return result;
}

void sub_10005741C(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100057410);
}

void sub_10005742C(_Unwind_Exception *exception_object)
{
  xpc_object_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100057448(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  __int16 v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  uint64_t result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_100057484(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100057478);
}

tlv *sub_100057498@<X0>(tlv **a1@<X0>, int a2@<W1>, unint64_t a3@<X3>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t result = sub_100057218(*a1, (const unsigned __int8 *)*a1 + a2, a4, a3);
  *a1 = result;
  return result;
}

void sub_1000574D8(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000574CCLL);
}

void sub_1000574E8(_Unwind_Exception *exception_object)
{
  xpc_object_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100057504(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  __int16 v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  uint64_t result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_100057540(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100057534);
}

tlv *sub_100057554@<X0>(tlv **a1@<X0>, int a2@<W1>, unint64_t a3@<X3>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t result = sub_100057218(*a1, (const unsigned __int8 *)*a1 + a2, a4, a3);
  *a1 = result;
  return result;
}

void sub_100057594(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100057588);
}

void sub_1000575A4(_Unwind_Exception *exception_object)
{
  xpc_object_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000575C0(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  __int16 v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  uint64_t result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_1000575FC(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000575F0);
}

tlv *sub_100057610@<X0>(tlv **a1@<X0>, int a2@<W1>, unint64_t a3@<X3>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t result = sub_100057218(*a1, (const unsigned __int8 *)*a1 + a2, a4, a3);
  *a1 = result;
  return result;
}

void sub_100057650(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100057644);
}

void sub_100057660(_Unwind_Exception *exception_object)
{
  xpc_object_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10005767C(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  __int16 v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  uint64_t result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_1000576B8(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000576ACLL);
}

tlv *sub_1000576CC@<X0>(tlv **a1@<X0>, int a2@<W1>, unint64_t a3@<X3>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t result = sub_100057218(*a1, (const unsigned __int8 *)*a1 + a2, a4, a3);
  *a1 = result;
  return result;
}

void sub_10005770C(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100057700);
}

void sub_10005771C(_Unwind_Exception *exception_object)
{
  xpc_object_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100057738(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  __int16 v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  uint64_t result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_100057774(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100057768);
}

uint64_t sub_100057788(uint64_t a1, const unsigned __int8 *a2, unsigned char *a3, unint64_t a4)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1, a4);
  *a3 = *(unsigned char *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)1, v7);
  a3[1] = *(unsigned char *)(a1 + 1);
  return a1 + 2;
}

unsigned char *sub_1000577E4(unsigned char *a1, unsigned char *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

uint64_t sub_100057800(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  __int16 v5 = *a1;
  __int16 v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1, a4);
  int v7 = *(unsigned __int8 *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 1), v6, (const unsigned __int8 *)1, v8);
  int v9 = *((unsigned __int8 *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 2);
  return v7 | (v9 << 8);
}

void sub_100057868(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100057854);
}

unsigned char **sub_10005787C(unsigned char **result, unsigned char *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  v2[1] = a2[1];
  *uint64_t result = v2 + 2;
  return result;
}

tlv *sub_10005789C@<X0>(tlv **a1@<X0>, int a2@<W1>, unint64_t a3@<X3>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t result = sub_100057218(*a1, (const unsigned __int8 *)*a1 + a2, a4, a3);
  *a1 = result;
  return result;
}

void sub_1000578DC(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000578D0);
}

void sub_1000578EC(_Unwind_Exception *exception_object)
{
  xpc_object_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100057908(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  __int16 v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  uint64_t result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_100057944(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100057938);
}

tlv *sub_100057958@<X0>(tlv **a1@<X0>, int a2@<W1>, unint64_t a3@<X3>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t result = sub_100057218(*a1, (const unsigned __int8 *)*a1 + a2, a4, a3);
  *a1 = result;
  return result;
}

void sub_100057998(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10005798CLL);
}

void sub_1000579A8(_Unwind_Exception *exception_object)
{
  xpc_object_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000579C4(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  __int16 v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  uint64_t result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_100057A00(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000579F4);
}

uint64_t sub_100057A14(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  __int16 v5 = *a1;
  __int16 v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1, a4);
  int v7 = *(unsigned __int8 *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 1), v6, (const unsigned __int8 *)1, v8);
  int v9 = *((unsigned __int8 *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 2);
  return v7 | (v9 << 8);
}

void sub_100057A7C(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100057A68);
}

tlv *sub_100057A90@<X0>(tlv **a1@<X0>, int a2@<W1>, unint64_t a3@<X3>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t result = sub_100057218(*a1, (const unsigned __int8 *)*a1 + a2, a4, a3);
  *a1 = result;
  return result;
}

void sub_100057AD0(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100057AC4);
}

void sub_100057AE0(_Unwind_Exception *exception_object)
{
  xpc_object_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100057AFC(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  __int16 v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  uint64_t result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_100057B38(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100057B2CLL);
}

uint64_t sub_100057B4C(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  __int16 v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  uint64_t result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_100057B88(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100057B7CLL);
}

uint64_t sub_100057B9C(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  __int16 v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  uint64_t result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_100057BD8(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100057BCCLL);
}

void sub_100057BEC(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 2 * a2;
    }
  }
  else
  {
    sub_100057C1C((char **)a1, a2 - v2);
  }
}

void sub_100057C1C(char **a1, unint64_t a2)
{
  __int16 v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  __int16 v5 = v6;
  int v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    uint64_t v10 = a2 + (v9 >> 1);
    if (v10 < 0) {
      sub_100057D30();
    }
    uint64_t v11 = v9 >> 1;
    unint64_t v12 = v5 - v8;
    if (v12 > v10) {
      uint64_t v10 = v12;
    }
    if (v12 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v13 = v10;
    }
    if (v13)
    {
      long long v14 = (char *)sub_100057DD8(v4, v13);
      unint64_t v8 = *a1;
      int v7 = a1[1];
    }
    else
    {
      long long v14 = 0;
    }
    long long v15 = &v14[2 * v11];
    long long v16 = &v14[2 * v13];
    bzero(v15, 2 * a2);
    uint64_t v17 = &v15[2 * a2];
    while (v7 != v8)
    {
      __int16 v18 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v15 - 1) = v18;
      v15 -= 2;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void sub_100057D30()
{
}

void sub_100057D48(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_100057DA4(exception, a1);
}

void sub_100057D90(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_100057DA4(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  return result;
}

void *sub_100057DD8(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    sub_100057E0C();
  }
  return operator new(2 * a2);
}

void sub_100057E0C()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

id sub_100057F2C()
{
  +[WCM_Logging logLevel:0, @"WCMBSP:%s", "_RegulatoryDomainUpdateCallback" message];
  id v0 = [[+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton") bspMonitor];

  return [v0 handleRDCountryCodeChangedEvent];
}

void sub_100059510(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10005B30C;
  block[3] = &unk_10020E6C8;
  void block[4] = a1;
  dispatch_async([+[WCM_Server singleton](WCM_Server, "singleton") getQueue], block);
}

id sub_100059598(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, @"WCMBSP:%s powerState=0x%x", "-[WCM_BSPMonitorIOS handleWiFiStatusUpdateEvent:]_block_invoke", *(unsigned __int8 *)(a1 + 40));
  [*(id *)(a1 + 32) printStatus:"Before WiFiStatusUpdate"];
  *(unsigned char *)(*(void *)(a1 + 32) + 8) = *(unsigned char *)(a1 + 40);
  unint64_t v2 = *(_DWORD **)(a1 + 32);
  int v3 = v2[41];
  [v2 updateBSPState];
  switch(v3)
  {
    case 0:
      if (*(unsigned char *)(a1 + 40))
      {
        [*(id *)(a1 + 32) sendGetRegulatoryInfoToWiFi];
        [*(id *)(a1 + 32) sendGetNanPhsStateToWiFi];
        [*(id *)(a1 + 32) sendGetBandSwitchStatusToWiFi];
        [*(id *)(a1 + 32) sendGetChannelQualityInfoToWiFi];
        [*(id *)(a1 + 32) sendBTStatusToWiFi];
      }
      break;
    case 1:
      if (!*(unsigned char *)(a1 + 40)) {
        [*(id *)(a1 + 32) initWiFiStatus];
      }
      break;
    case 2:
      if (*(unsigned char *)(a1 + 40))
      {
        [*(id *)(a1 + 32) sendGetRegulatoryInfoToWiFi];
        [*(id *)(a1 + 32) sendGetNanPhsStateToWiFi];
        [*(id *)(a1 + 32) sendGetBandSwitchStatusToWiFi];
        [*(id *)(a1 + 32) sendGetChannelQualityInfoToWiFi];
        [*(id *)(a1 + 32) sendBTStatusToWiFi];
        goto LABEL_12;
      }
      break;
    case 3:
      if (!*(unsigned char *)(a1 + 40))
      {
        [*(id *)(a1 + 32) initWiFiStatus];
        [*(id *)(a1 + 32) sendWiFiStatusToBT];
        [*(id *)(a1 + 32) updateFrequencyBandForBT];
      }
      break;
    case 4:
      if (!*(unsigned char *)(a1 + 40))
      {
        [*(id *)(a1 + 32) initWiFiStatus];
LABEL_12:
        [*(id *)(a1 + 32) sendWiFiStatusToBT];
      }
      break;
    default:
      break;
  }
  uint64_t v4 = *(void **)(a1 + 32);

  return [v4 printStatus:"After WiFiStatusUpdate"];
}

id sub_1000597A4(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, @"WCMBSP:%s band=0x%x", "-[WCM_BSPMonitorIOS handleWiFiFrequencyBandForBTEvent:]_block_invoke", *(unsigned int *)(a1 + 40));
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v2 + 8)) {
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, @"WCMBSP:%s unexpected event, mBSPState=%d", "-[WCM_BSPMonitorIOS handleWiFiFrequencyBandForBTEvent:]_block_invoke", *(unsigned int *)(v2 + 164));
  }
  [(id)v2 printStatus:"Before WiFiFrequencyBandForBT"];
  *(_DWORD *)(*(void *)(a1 + 32) + 32) = *(_DWORD *)(a1 + 40);
  +[NSDate timeIntervalSinceReferenceDate];
  *(void *)(*(void *)(a1 + 32) + 40) = v3;
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v4 + 128) && *(_DWORD *)(v4 + 164) != 4)
  {
    [(id)v4 sendSetFrequencyBandToBT:*(unsigned int *)(v4 + 32)];
    uint64_t v4 = *(void *)(a1 + 32);
  }

  return [(id)v4 printStatus:"After WiFiFrequencyBandForBT"];
}

id sub_100059940(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, @"WCMBSP:%s band=0x%x, quality=0x%x", "-[WCM_BSPMonitorIOS handleWiFiChannelQualityEvent:quality:]_block_invoke", *(unsigned int *)(a1 + 48), *(void *)(a1 + 40));
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v2 + 8)) {
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, @"WCMBSP:%s unexpected event, mBSPState=%d", "-[WCM_BSPMonitorIOS handleWiFiChannelQualityEvent:quality:]_block_invoke", *(unsigned int *)(v2 + 164));
  }
  [(id)v2 printStatus:"Before WiFiChannelQuality"];
  int v3 = *(_DWORD *)(a1 + 48);
  switch(v3)
  {
    case 16:
      uint64_t v7 = *(void *)(a1 + 40);
      *(_DWORD *)(*(void *)(a1 + 32) + 96) = 16;
      *(void *)(*(void *)(a1 + 32) + 104) = v7;
      +[NSDate timeIntervalSinceReferenceDate];
      *(void *)(*(void *)(a1 + 32) + 112) = v8;
      break;
    case 2:
      uint64_t v9 = *(void *)(a1 + 40);
      *(_DWORD *)(*(void *)(a1 + 32) + 72) = 2;
      *(void *)(*(void *)(a1 + 32) + 80) = v9;
      +[NSDate timeIntervalSinceReferenceDate];
      *(void *)(*(void *)(a1 + 32) + 88) = v10;
      break;
    case 1:
      uint64_t v4 = *(void *)(a1 + 40);
      *(_DWORD *)(*(void *)(a1 + 32) + 48) = 1;
      *(void *)(*(void *)(a1 + 32) + 56) = v4;
      +[NSDate timeIntervalSinceReferenceDate];
      *(void *)(*(void *)(a1 + 32) + 64) = v5;
      break;
    default:
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, @"WCMBSP:%s unknown band=0x%x, quality=0x%x", "-[WCM_BSPMonitorIOS handleWiFiChannelQualityEvent:quality:]_block_invoke", *(unsigned int *)(a1 + 48), *(void *)(a1 + 40));
      break;
  }
  uint64_t v11 = *(unsigned char **)(a1 + 32);
  if (v11[128])
  {
    [v11 sendChannelQualityToBT:*(unsigned int *)(a1 + 48) quality:*(void *)(a1 + 40)];
    uint64_t v11 = *(unsigned char **)(a1 + 32);
  }

  return [v11 printStatus:"After WiFiChannelQuality"];
}

id sub_100059B88(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, @"WCMBSP:%s regulatoryInfo=0x%x", "-[WCM_BSPMonitorIOS handleWiFiRegulatoryInfoEvent:]_block_invoke", *(void *)(a1 + 40));
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v2 + 8)) {
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, @"WCMBSP:%s unexpected event, mBSPState=%d", "-[WCM_BSPMonitorIOS handleWiFiRegulatoryInfoEvent:]_block_invoke", *(unsigned int *)(v2 + 164));
  }
  [(id)v2 printStatus:"Before WiFiRegulatoryInfo"];
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3) {
    *(_DWORD *)(*(void *)(a1 + 32) + 24) = v3;
  }
  [*(id *)(a1 + 32) updateBSPState];
  [*(id *)(a1 + 32) updateFrequencyBandForBT];
  uint64_t v4 = *(void **)(a1 + 32);

  return [v4 printStatus:"After WiFiRegulatoryInfo"];
}

id sub_100059CF0(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 40);
  if (v2 >= 4)
  {
    if (v2 == 4) {
      int v3 = "ASSOCIATED_6G";
    }
    else {
      int v3 = "INVALID_STATE!!!";
    }
  }
  else
  {
    int v3 = off_10020E6E8[v2];
  }
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, @"WCMBSP:%s wifiState=%s, wifiChannel=%u, isNanPhs=%u", "-[WCM_BSPMonitorIOS handleWiFiStateEvent:wifiChannel:isNanPhs:]_block_invoke", v3, *(unsigned int *)(a1 + 44), *(unsigned __int8 *)(a1 + 48));
  [*(id *)(a1 + 32) printStatus:"Before WiFiStateEvent"];
  unsigned int v4 = *(_DWORD *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 48);
  if (v4 > 1 || *(unsigned __int8 *)(v5 + 20) == v6)
  {
    *(_DWORD *)(v5 + 12) = v4;
    *(_DWORD *)(*(void *)(a1 + 32) + 16) = *(_DWORD *)(a1 + 44);
    *(unsigned char *)(*(void *)(a1 + 32) + 20) = v6;
    [*(id *)(a1 + 32) updateFrequencyBandForBT];
  }
  else
  {
    uint64_t v7 = "ENABLED";
    if (v4 != 1) {
      uint64_t v7 = "INVALID_STATE!!!";
    }
    if (v4) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = "DISABLED";
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, @"WCMBSP:%s ignoring late update wifiState=%s, wifiChannel=%u, isNanPhs=%u", "-[WCM_BSPMonitorIOS handleWiFiStateEvent:wifiChannel:isNanPhs:]_block_invoke", v8, *(unsigned int *)(a1 + 44), v6);
  }
  uint64_t v9 = *(void **)(a1 + 32);

  return [v9 printStatus:"After WiFiStateEvent"];
}

id sub_100059ED0(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, @"WCMBSP:%s", "-[WCM_BSPMonitorIOS handleWiFiCountryCodeChangedEvent]_block_invoke");
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 sendGetRegulatoryInfoToWiFi];
}

void sub_100059FE8(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    dispatch_time_t v3 = dispatch_time(0, 1000000 * a1);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10005B31C;
    block[3] = &unk_10020E6C8;
    void block[4] = a2;
    dispatch_after(v3, (dispatch_queue_t)[+[WCM_Server singleton](WCM_Server, "singleton") getQueue], block);
  }
  else
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    void v4[2] = sub_10005B32C;
    v4[3] = &unk_10020E6C8;
    v4[4] = a2;
    dispatch_async([+[WCM_Server singleton](WCM_Server, "singleton") getQueue], v4);
  }
}

id sub_10005A0F8(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, @"WCMBSP:%s", "-[WCM_BSPMonitorIOS handleBandSwitchStatusUpdatedEvent]_block_invoke");
  [*(id *)(a1 + 32) sendGetBandSwitchStatusToWiFi];
  id result = +[NSDate timeIntervalSinceReferenceDate];
  *(void *)(*(void *)(a1 + 32) + 184) = v3;
  return result;
}

id sub_10005A220(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, @"WCMBSP:%s", "-[WCM_BSPMonitorIOS handleChannelQualityInfoUpdatedEvent]_block_invoke");
  [*(id *)(a1 + 32) sendGetChannelQualityInfoToWiFi];
  id result = +[NSDate timeIntervalSinceReferenceDate];
  *(void *)(*(void *)(a1 + 32) + 192) = v3;
  return result;
}

id sub_10005A308(uint64_t a1)
{
  id result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, @"WCMBSP:%s coexMode=%d, btSubband=0x%x, successCount=%llu, failCount=%llu", "-[WCM_BSPMonitorIOS handleBandSwitchStatusEvent:btSubband:successCount:failCount:]_block_invoke", *(unsigned __int8 *)(a1 + 60), *(unsigned int *)(a1 + 56), *(void *)(a1 + 40), *(void *)(a1 + 48));
  *(unsigned char *)(*(void *)(a1 + 32) + 120) = *(unsigned char *)(a1 + 60);
  *(_DWORD *)(*(void *)(a1 + 32) + 124) = *(_DWORD *)(a1 + 56);
  return result;
}

void sub_10005A54C(uint64_t a1)
{
  +[NSDate timeIntervalSinceReferenceDate];
  double v3 = v2;
  [*(id *)(a1 + 32) updateChannelQualityInfo:*(void *)(a1 + 32) + 48 bandCode:0 chqInfoDict:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) updateChannelQualityInfo:*(void *)(a1 + 32) + 72 bandCode:1 chqInfoDict:*(void *)(a1 + 40) ts:v3];
  [*(id *)(a1 + 32) updateChannelQualityInfo:*(void *)(a1 + 32) + 96 bandCode:4 chqInfoDict:*(void *)(a1 + 40) ts:v3];
  unsigned int v4 = *(const void **)(a1 + 40);

  CFRelease(v4);
}

id sub_10005A654(uint64_t a1)
{
  id result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, @"WCMBSP:%s reasonCode=0x%x, btSubband=0x%x", "-[WCM_BSPMonitorIOS handleCoexModeFailEvent:btSubband:]_block_invoke", *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44));
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
    long long v14 = *(unsigned int **)(a1 + 32);
    uint64_t v15 = v14[6];
    uint64_t v16 = v14[40];
    id v8 = [v14 getTimeToTSTForULLAMode:v14[34]];
    uint64_t v9 = v14;
    uint64_t v10 = 0;
    uint64_t v11 = v15;
    uint64_t v12 = v16;
    uint64_t v13 = 1;
  }
  else
  {
    if (v3 != 1) {
      return result;
    }
    if (*(_DWORD *)(a1 + 44) == 2) {
      uint64_t v4 = 16;
    }
    else {
      uint64_t v4 = 2;
    }
    [*(id *)(a1 + 32) sendSetFrequencyBandToBT:v4 forced:1];
    uint64_t v5 = *(unsigned int **)(a1 + 32);
    uint64_t v6 = v5[6];
    uint64_t v7 = v5[40];
    id v8 = [v5 getTimeToTSTForULLAMode:v5[34]];
    uint64_t v9 = v5;
    uint64_t v10 = 1;
    uint64_t v11 = v6;
    uint64_t v12 = v7;
    uint64_t v13 = 0;
  }

  return [v9 sendSetCoexModeToWiFi:v10 wifiSupportedBands:v11 btCurrentBand:v12 btSupportedBands:19 setTimeToTSTOnly:v13 timeToTST:v8];
}

id sub_10005A824(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, @"WCMBSP:%s reasonCode=0x%x, btTargetBand=0x%x", "-[WCM_BSPMonitorIOS handleBandSwitchRejectEvent:btTargetBand:]_block_invoke", *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44));
  double v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  uint64_t v4 = *(unsigned int *)(a1 + 44);

  return [v2 sendBandSwitchRejectToBT:v3 targetBand:v4];
}

id sub_10005A8FC(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, @"WCMBSP:%s", "-[WCM_BSPMonitorIOS requestBTStatus]_block_invoke");
  double v2 = *(void **)(a1 + 32);

  return [v2 sendBTStatusRequestToBT];
}

id sub_10005A9C8(uint64_t a1)
{
  +[NSDate timeIntervalSinceReferenceDate];
  double v3 = v2;
  [*(id *)(a1 + 32) printStatus:"Show Status"];
  return +[WCM_Logging logLevel:2, @"coexMode=%d, btSubband=0x%x, Chq_2_4G=0x%x,%llums, Chq_5G_Low=0x%x,%llums, Chq_5g_High=0x%x,%llums", *(unsigned __int8 *)(*(void *)(a1 + 32) + 120), *(unsigned int *)(*(void *)(a1 + 32) + 124), *(void *)(*(void *)(a1 + 32) + 56), (unint64_t)((v3 - *(double *)(*(void *)(a1 + 32) + 64)) * 1000.0), *(void *)(*(void *)(a1 + 32) + 80), (unint64_t)((v3 - *(double *)(*(void *)(a1 + 32) + 88)) * 1000.0), *(void *)(*(void *)(a1 + 32) + 104), (unint64_t)((v3 - *(double *)(*(void *)(a1 + 32) + 112)) * 1000.0) message];
}

id sub_10005AB7C(uint64_t a1)
{
  double v2 = *(_DWORD **)(a1 + 32);
  int v4 = v2[33];
  uint64_t v3 = v2[34];
  uint64_t v6 = *(unsigned int *)(a1 + 40);
  uint64_t v5 = *(unsigned int *)(a1 + 44);
  BOOL v7 = v2[41] == 4 && v3 == v5;
  int v8 = !v7;
  uint64_t v9 = *(unsigned __int8 *)(a1 + 48);
  if (v7)
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, @"WCMBSP:%s powerState=0x%x, band=0x%x, ullaMode=%d", "-[WCM_BSPMonitorIOS handleBTStatusUpdateEvent:frequencyBand:ullaMode:]_block_invoke", v9, v6, v3);
    [*(id *)(a1 + 32) printStatus:"Before BTStatusUpdate" withLogLevel:3];
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, @"WCMBSP:%s powerState=0x%x, band=0x%x, ullaMode=%d", "-[WCM_BSPMonitorIOS handleBTStatusUpdateEvent:frequencyBand:ullaMode:]_block_invoke", v9, v6, v5);
    [*(id *)(a1 + 32) printStatus:"Before BTStatusUpdate"];
  }
  [*(id *)(a1 + 32) checkBTRegulatoryInfo];
  int v10 = *(_DWORD *)(*(void *)(a1 + 32) + 136);
  if (v10)
  {
    int v11 = *(_DWORD *)(a1 + 44);
    if (v11) {
      BOOL v12 = v10 == v11;
    }
    else {
      BOOL v12 = 1;
    }
    LOBYTE(v10) = !v12;
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 156) = v10;
  uint64_t v13 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v13 + 156))
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, @"WCMBSP:%s ullaModeTransitioned=%d", "-[WCM_BSPMonitorIOS handleBTStatusUpdateEvent:frequencyBand:ullaMode:]_block_invoke", 1);
    uint64_t v13 = *(void *)(a1 + 32);
  }
  *(unsigned char *)(v13 + 128) = *(unsigned char *)(a1 + 48);
  *(_DWORD *)(*(void *)(a1 + 32) + 132) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(*(void *)(a1 + 32) + 136) = *(_DWORD *)(a1 + 44);
  long long v14 = *(_DWORD **)(a1 + 32);
  int v15 = v14[41];
  [v14 updateBSPState];
  switch(v15)
  {
    case 0:
      if (*(unsigned char *)(a1 + 48)) {
        [*(id *)(a1 + 32) sendWiFiStatusToBT];
      }
      break;
    case 1:
      if (*(unsigned char *)(a1 + 48))
      {
        [*(id *)(a1 + 32) sendWiFiStatusToBT];
        goto LABEL_28;
      }
      break;
    case 3:
    case 4:
      if (!*(unsigned char *)(a1 + 48) || v4 != v6 || v3 != v5) {
LABEL_28:
      }
        [*(id *)(a1 + 32) sendBTStatusToWiFi];
      break;
    default:
      break;
  }
  [*(id *)(a1 + 32) updateFrequencyBandForBT];
  uint64_t v16 = *(void **)(a1 + 32);
  if (v8)
  {
    return [v16 printStatus:"After BTStatusUpdate"];
  }
  else
  {
    return [v16 printStatus:"After BTStatusUpdate" withLogLevel:3];
  }
}

id sub_10005AE48(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, @"WCMBSP:%s currentBand=0x%x, targetBand=0x%x", "-[WCM_BSPMonitorIOS handleBTBandSwitchRequestEvent:targetBand:]_block_invoke", *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44));
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v2 + 128)) {
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, @"WCMBSP:%s unexpected event, mBSPState=%d", "-[WCM_BSPMonitorIOS handleBTBandSwitchRequestEvent:targetBand:]_block_invoke", *(unsigned int *)(v2 + 164));
  }
  [(id)v2 printStatus:"Before BTBandSwitchRequest"];
  id v3 = [*(id *)(a1 + 32) selectBandWithPreferredBands:*(unsigned int *)(a1 + 44)];
  id v4 = (id)*(unsigned int *)(a1 + 44);
  uint64_t v5 = *(_DWORD **)(a1 + 32);
  if (v3 != v4)
  {
LABEL_9:
    [v5 sendBandSwitchRejectToBT:1 targetBand:v4];
    goto LABEL_10;
  }
  uint64_t v6 = *(unsigned int *)(a1 + 40);
  if (v5[41] != 4)
  {
    if (v6 != 64)
    {
      [v5 sendSetFrequencyBandToBT:v3];
      goto LABEL_10;
    }
    id v4 = v3;
    goto LABEL_9;
  }
  [v5 sendBandSwitchRequestToWiFi:v6 targetBand:v3];
LABEL_10:
  int v8 = *(void **)(a1 + 32);

  return [v8 printStatus:"After BTBandSwitchRequest"];
}

id sub_10005AFF8(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, @"WCMBSP:%s countryCode=%@, allowedBands=0x%x", "-[WCM_BSPMonitorIOS handleBTRegulatoryInfoEvent:allowedBands:]_block_invoke", *(void *)(a1 + 32), *(unsigned int *)(a1 + 48));
  [*(id *)(a1 + 40) printStatus:"Before BTRegulatoryInfoEvent"];
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2
    && [v2 length]
    && (([*(id *)(a1 + 32) hasPrefix:@"CC:"] & 1) != 0
     || ([*(id *)(a1 + 32) hasPrefix:@"RC:"] & 1) != 0
     || [*(id *)(a1 + 32) hasPrefix:@"LKC:"]))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    id v4 = *(void **)(v3 + 144);
    if (v4)
    {
      id v5 = [v4 length];
      uint64_t v3 = *(void *)(a1 + 40);
      if (v5)
      {
        if (([*(id *)(v3 + 144) hasPrefix:@"CC:"] & 1) != 0
          || ([*(id *)(*(void *)(a1 + 40) + 144) hasPrefix:@"RC:"] & 1) != 0
          || ([*(id *)(*(void *)(a1 + 40) + 144) hasPrefix:@"LKC:"] & 1) != 0)
        {
          unsigned int v6 = [*(id *)(*(void *)(a1 + 40) + 144) isEqualToString:*(void *)(a1 + 32)];
          uint64_t v3 = *(void *)(a1 + 40);
          if (v6 && *(_DWORD *)(v3 + 152) == *(_DWORD *)(a1 + 48)) {
            goto LABEL_23;
          }
        }
        else
        {
          uint64_t v3 = *(void *)(a1 + 40);
        }
      }
    }
    uint64_t v9 = *(void **)(v3 + 144);
    if (v9)
    {

      uint64_t v3 = *(void *)(a1 + 40);
    }
    uint64_t v10 = v3 + 128;
    if (*(_DWORD *)(v10 + 4) != -1) {
      *(_DWORD *)(v10 + 4) = 0;
    }
    *(void *)(*(void *)(a1 + 40) + 144) = +[NSString stringWithString:*(void *)(a1 + 32)];
    *(_DWORD *)(*(void *)(a1 + 40) + 152) = *(_DWORD *)(a1 + 48);
    [*(id *)(a1 + 40) updateBSPState];
    [*(id *)(a1 + 40) updateFrequencyBandForBT];
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 40);
    int v8 = *(void **)(v7 + 144);
    if (v8)
    {

      *(void *)(*(void *)(a1 + 40) + 144) = 0;
      uint64_t v7 = *(void *)(a1 + 40);
    }
    *(_DWORD *)(v7 + 152) = 0;
  }
LABEL_23:
  [*(id *)(a1 + 40) checkBTRegulatoryInfo];
  int v11 = *(void **)(a1 + 40);

  return [v11 printStatus:"After BTRegulatoryInfoEvent"];
}

id sub_10005B284(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, @"WCMBSP:%s", "-[WCM_BSPMonitorIOS handleRDCountryCodeChangedEvent]_block_invoke");
  [*(id *)(a1 + 32) printStatus:"Before RDCountryCodeChangedEvent"];
  [*(id *)(a1 + 32) readRDCountryCode];
  [*(id *)(a1 + 32) checkBTRegulatoryInfo];
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 printStatus:"After RDCountryCodeChangedEvent"];
}

uint64_t sub_10005B30C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10005B31C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10005B32C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10005F050(int a1)
{
  if (a1) {
    return 2 * (a1 == 1);
  }
  else {
    return 1;
  }
}

void sub_10005F498()
{
  if (*(char *)(v0 - 105) < 0) {
    operator delete(*(void **)(v0 - 128));
  }
  if (*(char *)(v0 - 81) < 0) {
    operator delete(*(void **)(v0 - 104));
  }
  operator delete();
}

id sub_10005F4EC(uint64_t a1)
{
  return [*(id *)(a1 + 32) started];
}

id sub_10005F4F4(uint64_t a1)
{
  return [*(id *)(a1 + 32) stopped];
}

id sub_10005F4FC(uint64_t a1)
{
  return [*(id *)(a1 + 32) errored];
}

void sub_10005F504(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  uint64_t v4 = a2[2];
  void v5[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  [v2 handleDataSystemStatusInd:v5];
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v5);
}

void sub_10005F55C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10005F570(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  uint64_t v4 = a2[2];
  void v5[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  [v2 handleBandwidthEstimationInd:v5];
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v5);
}

void sub_10005F5C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

id sub_10005F6EC(uint64_t a1)
{
  return [*(id *)(a1 + 32) setQMIClientStatus:*(unsigned __int8 *)(*(void *)(a1 + 40) + 24)];
}

void *sub_10005F7B4(void *result, uint64_t a2)
{
  if (*(unsigned char *)a2)
  {
    uint64_t v2 = *(unsigned int **)(a2 + 8);
    if (*(unsigned int **)(a2 + 16) == v2) {
      sub_10006116C();
    }
    uint64_t v3 = *(void *)(result[4] + 32);
    uint64_t v4 = sub_1000838DC(*v2);
    uint64_t v5 = *v2;
    unsigned int v6 = sub_100083900(v2[1]);
    return +[WCM_Logging logLevel:22, @"QMI.DSD Data System status sim %d: Technology: %s (0x%x), rat value: %s (0x%x), service option mask: %s (0x%lx)", v3, v4, v5, v6, v2[1], sub_100083A70(*((const mach_header_64 **)v2 + 1)), *((void *)v2 + 1) message];
  }
  return result;
}

void sub_10005FCD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a66, 8);
  _Block_object_dispose((const void *)(v66 - 232), 8);
  _Block_object_dispose((const void *)(v66 - 200), 8);
  _Block_object_dispose((const void *)(v66 - 168), 8);
  _Block_object_dispose((const void *)(v66 - 136), 8);
  _Unwind_Resume(a1);
}

id sub_10005FD18(void *a1, _DWORD *a2)
{
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
  *(_DWORD *)(*(void *)(a1[5] + 8) + 24) = *a2;
  return +[WCM_Logging logLevel:22, @"QMI.DSD.%u 5G TAC %u", *(unsigned __int8 *)(*(void *)(a1[6] + 8) + 24), *(unsigned int *)(*(void *)(a1[5] + 8) + 24) message];
}

id sub_10005FD88(uint64_t a1, unsigned int *a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = a2[1];
  +[WCM_Logging logLevel:22, @"QMI.DSD.%u RAT Info: %s, MCC %u, MNC %u, TAC %u, cell_id %llu", *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24), sub_10008419C(*a2), a2[2], a2[3], *((unsigned __int16 *)a2 + 8), *((void *)a2 + 3) message];
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = *((unsigned __int16 *)a2 + 8);
    +[WCM_Logging logLevel:22, @"QMI.DSD.%u using non-5g TAC %u", *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24), *(unsigned int *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) message];
  }
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *((void *)a2 + 3);
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
  {
    if (*(void *)(v4 + 48) == v5) {
      goto LABEL_9;
    }
    uint64_t v6 = 48;
  }
  else
  {
    if (*(void *)(v4 + 40) == v5) {
      goto LABEL_9;
    }
    uint64_t v6 = 40;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = 1;
  *(void *)(*(void *)(a1 + 32) + v6) = v5;
LABEL_9:
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24))
  {
    uint64_t v7 = +[NSString stringWithFormat:@"%u.%u.%u.%llu", a2[2], a2[3], *(unsigned int *)(*(void *)(*(void *)(a1 + 72) + 8) + 24), *((void *)a2 + 3)];
    int v8 = +[NSString stringWithFormat:@"%u.%u", a2[2], a2[3]];
    +[WCM_Logging logLevel:22, @"QMI.DSD.%u GCI: %@", *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24), v7 message];
    [*(id *)(a1 + 40) updateGlobalCellID:*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) gci:v7 cellprefix:-[NSString length](v8, "length")];
  }
  unint64_t v9 = *a2;
  if (v9 >= 8) {
    char v10 = 0;
  }
  else {
    char v10 = 0x101000101010000uLL >> (8 * v9);
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = v10;
  int v11 = *a2 - 2;
  char v12 = 1;
  uint64_t v13 = 1;
  switch(v11)
  {
    case 0:
    case 4:
    case 5:
      uint64_t v13 = 3;
      break;
    case 1:
      break;
    case 2:
      uint64_t v13 = 2;
      break;
    case 3:
      uint64_t v13 = 4;
      break;
    default:
      char v12 = 0;
      uint64_t v13 = 0;
      break;
  }
  id result = +[WCM_Logging logLevel:22, @"updateCurrentRatInfo %d, Cell Changed %d, nrCellType: %d", *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24), *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 80) + 8) + 24), v13 message];
  if ((v12 & 1) != 0 || *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24))
  {
    +[WCM_Logging logLevel:22, @"Callling updateCurrentRatInfo %d, Cell Changed %d, nrCellType: %d", *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24), *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 80) + 8) + 24), v13 message];
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)) {
      uint64_t v15 = 2 * (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) == 1);
    }
    else {
      uint64_t v15 = 1;
    }
    [*(id *)(a1 + 40) updateCurrentRatInfo:v15 currentNRCell:v13];
    uint64_t v16 = *(void **)(a1 + 48);
    return [v16 evaluateWiFiVersusCell];
  }
  return result;
}

id sub_1000600E4(uint64_t a1, unsigned int *a2)
{
  +[WCM_Logging logLevel:22, @"QMI.DSD.%u Configured Uplink Throughput: %ukbps", *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), *a2 message];
  +[WCM_Logging logLevel:22, @"QMI.DSD.%u Configured Downlink Throughput: %ukbps", *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), a2[1] message];
  uint64_t v4 = *(void **)(a1 + 32);
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
    uint64_t v5 = 2 * (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) == 1);
  }
  else {
    uint64_t v5 = 1;
  }
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];

  return [v4 updateConfiguredMaxBW:v5 dlbw:v6 ulbw:v7];
}

id sub_1000601A0(uint64_t a1, unsigned int *a2)
{
  +[WCM_Logging logLevel:22, @"QMI.DSD.%u Downlink Allowed Rate: %ukbps", *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), *a2 message];
  +[WCM_Logging logLevel:22, @"QMI.DSD.%u Downlink Confidence Level: %u", *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), *((unsigned __int8 *)a2 + 4) message];
  +[WCM_Logging logLevel:22, @"QMI.DSD.%u Downlink Split LTE: %u%", *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), *((unsigned __int8 *)a2 + 5) message];
  +[WCM_Logging logLevel:22, @"QMI.DSD.%u Downlink Split 5G: %u%", *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), *((unsigned __int8 *)a2 + 6) message];
  [*(id *)(a1 + 32) updateDownlinkEstimatedBW:(*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) + 1) bw:*a2 conf:*((unsigned __int8 *)a2 + 4) lte:*((unsigned __int8 *)a2 + 5) nr:*((unsigned __int8 *)a2 + 6)];
  [*(id *)(a1 + 40) forceActiveModeEval:1];
  [*(id *)(a1 + 40) evaluateWiFiVersusCell];
  uint64_t v4 = *(void **)(a1 + 40);

  return [v4 forceActiveModeEval:0];
}

id sub_1000602D0(uint64_t a1, unsigned int *a2)
{
  +[WCM_Logging logLevel:22, @"QMI.DSD.%u Uplink Allowed Rate: %ukbps", *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), *a2 message];
  +[WCM_Logging logLevel:22, @"QMI.DSD.%u Uplink Confidence Level: %u", *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), *((unsigned __int8 *)a2 + 4) message];
  +[WCM_Logging logLevel:22, @"QMI.DSD.%u Uplink Queue Size: %u%", *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), *((unsigned __int8 *)a2 + 5) message];
  [*(id *)(a1 + 32) updateUplinkEstimatedBW:(*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) + 1) bw:*a2 conf:*((unsigned __int8 *)a2 + 4) queue:*((unsigned __int8 *)a2 + 5)];
  [*(id *)(a1 + 40) forceActiveModeEval:1];
  [*(id *)(a1 + 40) evaluateWiFiVersusCell];
  uint64_t v4 = *(void **)(a1 + 40);

  return [v4 forceActiveModeEval:0];
}

id sub_1000603D4(uint64_t a1, unsigned __int8 *a2)
{
  +[WCM_Logging logLevel:22, @"QMI.DSD.%u Max UE Rank: %u", *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), *a2 message];
  +[WCM_Logging logLevel:22, @"QMI.DSD.%u Max Network MIMO Layer: %u", *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), a2[1] message];
  +[WCM_Logging logLevel:22, @"QMI.DSD.%u Max Scheduled MIMO Layer: %u%", *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), a2[2] message];
  +[WCM_Logging logLevel:22, @"QMI.DSD.%u Max Downlink Modulation Scheme: %s", *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), sub_1000841C0(*((_DWORD *)a2 + 1)) message];
  +[WCM_Logging logLevel:22, @"QMI.DSD.%u Max Uplink Modulation Scheme: %s", *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), sub_1000841C0(*((_DWORD *)a2 + 2)) message];
  +[WCM_Logging logLevel:22, @"QMI.DSD.%u Total Downlink MIMO Layers: %u", *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), a2[12] message];
  +[WCM_Logging logLevel:22, @"QMI.DSD.%u Total Num of Component Carriers: %u", *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), a2[13] message];
  +[WCM_Logging logLevel:22, @"QMI.DSD.%u Downlink Bandwidth: %umHz", *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), *((unsigned int *)a2 + 4) message];
  +[WCM_Logging logLevel:22, @"QMI.DSD.%u Uplink Bandwidth %umHz", *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), *((unsigned int *)a2 + 5) message];
  +[WCM_Logging logLevel:22, @"QMI.DSD.%u 5G Neighbor Cell RAT: %s", *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), sub_1000841E4(*((_DWORD *)a2 + 6)) message];
  +[WCM_Logging logLevel:22, @"QMI.DSD.%u RSRP: %d", *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), *((__int16 *)a2 + 14) message];
  +[WCM_Logging logLevel:22, @"QMI.DSD.%u SINR 10xDB: %u", *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), a2[30] message];
  unsigned int v4 = *((_DWORD *)a2 + 4);
  unsigned int v5 = [*(id *)(a1 + 32) getWRMCellOutrankWifiBWThreshold];
  int v6 = 0;
  int v7 = 0;
  char v8 = 1;
  uint64_t v9 = 1;
  switch(*((_DWORD *)a2 + 6))
  {
    case 2:
      int v7 = 0;
      uint64_t v9 = 3;
      int v6 = 1;
      break;
    case 3:
      break;
    case 4:
      int v6 = 0;
      int v7 = 0;
      uint64_t v9 = 2;
      break;
    case 5:
      int v6 = 0;
      int v7 = 0;
      uint64_t v9 = 4;
      break;
    default:
      char v8 = 0;
      int v6 = 0;
      uint64_t v9 = 0;
      int v7 = 1;
      break;
  }
  +[WCM_Logging logLevel:22, @"updateConnectedStateSummary %d, Cell Changed %d, nrCellType: %d", *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24), v9 message];
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
  if ((v8 & 1) != 0 || *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
  {
    +[WCM_Logging logLevel:22, @"Calling updateConnectedStateSummary %d, Cell Changed %d, nrCellType: %d", *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24), v9 message];
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
      uint64_t v11 = 2 * (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) == 1);
    }
    else {
      uint64_t v11 = 1;
    }
    [*(id *)(a1 + 32) updateConnectedStateSummary:v11 neighberNRCell:v9 highrateIndicator:v4 >= v5];
    [*(id *)(a1 + 40) evaluateWiFiVersusCell];
    uint64_t v10 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
  }
  if (((v6 | v7) & 1) != 0 || v10)
  {
    BOOL v12 = v4 >= v5;
    +[WCM_Logging logLevel:22, @"Calling updateHighRateLikely %d, Cell Changed %d, nrCellType: %d", *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), v10, v9 message];
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
      uint64_t v13 = 2 * (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) == 1);
    }
    else {
      uint64_t v13 = 1;
    }
    [*(id *)(a1 + 32) updateHighRateLikely:v13 highrateIndicator:v12];
  }
  id v14 = +[WRM_BWEvalManager WRM_BWEvalManagerSingleton];
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
  {
    uint64_t v15 = *((unsigned int *)a2 + 4);
    uint64_t v16 = a2[2];
    uint64_t v17 = *((unsigned int *)a2 + 1);
    return [v14 updateNRQSHMetrics:v15 :v16 :v17];
  }
  else
  {
    [v14 updateQSHMetrics:a2[13] :*((unsigned int *)a2 + 4) :a2[12] :a2[2]];
    uint64_t v19 = *(void **)(a1 + 32);
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
      uint64_t v20 = 2 * (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) == 1);
    }
    else {
      uint64_t v20 = 1;
    }
    uint64_t v21 = *((unsigned int *)a2 + 4);
    return [v19 updateLTEBandwidth:v20 LTEBW:v21];
  }
}

id sub_100060884(uint64_t a1, unsigned __int8 *a2)
{
  [*(id *)(a1 + 32) updateDataStallState:*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) + 1 stall:*a2];
  if (*a2) {
    unsigned int v4 = "true";
  }
  else {
    unsigned int v4 = "false";
  }
  +[WCM_Logging logLevel:22, @"QMI.DSD.%u isCongested: %s", *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), v4 message];
  unsigned int v5 = *(void **)(a1 + 40);

  return [v5 evaluateWiFiVersusCell];
}

void sub_100060A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void sub_100060A54(id a1, const void *a2)
{
  if (*((_DWORD *)a2 + 1))
  {
    +[WCM_Logging logLevel:22, @"QMI.DSD dsd::RegisterIndication::Response failed: %s", qmi::asString() message];
  }
  else
  {
    +[WCM_Logging logLevel:22 message:@"QMI.DSD dsd::RegisterIndication::Response success"];
  }
}

uint64_t sub_100060AD4(uint64_t a1)
{
  if (*(void *)(a1 + 8)) {
    qmi::Client::send();
  }
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

void sub_100060C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  sub_100060AD4((uint64_t)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_100060CC8(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

id sub_100060CD4(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 4)) {
    return +[WCM_Logging logLevel:22, @"QMI.DSD bindQMIClientToSlotType failed: %s", qmi::asString() message];
  }
  +[WCM_Logging logLevel:22 message:@"QMI.DSD bindQMIClientToSlotType success"];
  unsigned int v4 = *(void **)(a1 + 32);

  return [v4 sendRegisterIndicationRequest];
}

void *sub_100060D60(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_100060E14();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    int v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    int v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void sub_100060E14()
{
}

void sub_100060E2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_100060E90(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_100060E7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_100060E90(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_100060F88(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      size_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_100060F44((uint64_t)a2);
  }
}

void sub_100060F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100060F44(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x26u);
  return a1;
}

void sub_100060F74(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_100060F88(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  size_t v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x26u);
  return a1;
}

void sub_100060FB8(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_100060FCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_100061030(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_10006101C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_100061030(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_100061128(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      size_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1000610E4((uint64_t)a2);
  }
}

void sub_1000610C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000610E4(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x5551u);
  return a1;
}

void sub_100061114(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_100061128(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  size_t v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x5551u);
  return a1;
}

void sub_100061158(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10006116C()
{
}

void sub_100061184(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1000611E0(exception, a1);
}

void sub_1000611CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_1000611E0(std::logic_error *a1, const char *a2)
{
  id result = std::logic_error::logic_error(a1, a2);
  return result;
}

uint64_t sub_100061214(qmi::MessageBase *a1, uint64_t a2, unint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    int v9 = v7;
    if (sub_1000612B8((uint64_t)a1, (tlv *)result, v7, a3))
    {
      return 1;
    }
    else
    {
      uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))qmi::MessageBase::sParsingErrorHandler;
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

BOOL sub_1000612B8(uint64_t a1, tlv *a2, int a3, unint64_t a4)
{
  uint64_t v10 = a2;
  sub_1000A55D0(&v10, a3, a4, (uint64_t)v7);
  size_t v5 = v10;
  if (v10) {
    (*(void (**)(void))(*(void *)a4 + 16))();
  }
  if (__p)
  {
    int v9 = __p;
    operator delete(__p);
  }
  return v5 != 0;
}

void sub_100061328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100061344(qmi::MessageBase *a1, uint64_t a2, unint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    int v9 = v7;
    if (sub_1000613E8((uint64_t)a1, (tlv *)result, v7, a3))
    {
      return 1;
    }
    else
    {
      uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))qmi::MessageBase::sParsingErrorHandler;
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

BOOL sub_1000613E8(uint64_t a1, tlv *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = a2;
  sub_1000A5A54(&v7, a3, a3, a4);
  size_t v5 = v7;
  if (v7) {
    (*(void (**)(void))(*(void *)a4 + 16))();
  }
  return v5 != 0;
}

uint64_t sub_100061448(qmi::MessageBase *a1, uint64_t a2, unint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    int v9 = v7;
    if (sub_1000614EC((uint64_t)a1, result, v7, a3))
    {
      return 1;
    }
    else
    {
      uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))qmi::MessageBase::sParsingErrorHandler;
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

BOOL sub_1000614EC(uint64_t a1, uint64_t a2, int a3, unint64_t a4)
{
  uint64_t v8 = a2;
  sub_1000A4DEC(&v8, a3, a4, (uint64_t)v7);
  uint64_t v5 = v8;
  if (v8) {
    (*(void (**)(void))(*(void *)a4 + 16))();
  }
  return v5 != 0;
}

uint64_t sub_10006154C(qmi::MessageBase *a1, uint64_t a2, void *a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    int v9 = v7;
    if (sub_1000615F0((uint64_t)a1, (tlv *)result, v7, a3))
    {
      return 1;
    }
    else
    {
      uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))qmi::MessageBase::sParsingErrorHandler;
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

BOOL sub_1000615F0(uint64_t a1, tlv *a2, uint64_t a3, void *a4)
{
  uint64_t v7 = a2;
  sub_1000A4E98(&v7, a3, a3, (unint64_t)a4);
  uint64_t v5 = v7;
  if (v7) {
    (*(void (**)(void))(*a4 + 16))(*a4);
  }
  return v5 != 0;
}

uint64_t sub_100061650(qmi::MessageBase *a1, uint64_t a2, void *a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    int v9 = v7;
    if (sub_1000616F4((uint64_t)a1, result, v7, a3))
    {
      return 1;
    }
    else
    {
      uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))qmi::MessageBase::sParsingErrorHandler;
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

BOOL sub_1000616F4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = a2;
  sub_1000A4FD4(&v7, a3, a3, (unint64_t)a4);
  uint64_t v5 = v7;
  if (v7) {
    (*(void (**)(void))(*a4 + 16))(*a4);
  }
  return v5 != 0;
}

uint64_t sub_100061754(qmi::MessageBase *a1, uint64_t a2, void *a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    int v9 = v7;
    if (sub_1000617F8((uint64_t)a1, result, v7, a3))
    {
      return 1;
    }
    else
    {
      uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))qmi::MessageBase::sParsingErrorHandler;
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

BOOL sub_1000617F8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = a2;
  sub_1000A50FC(&v7, a3, a3, (unint64_t)a4);
  uint64_t v5 = v7;
  if (v7) {
    (*(void (**)(void))(*a4 + 16))(*a4);
  }
  return v5 != 0;
}

uint64_t sub_100061858(qmi::MessageBase *a1, uint64_t a2, unint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    int v9 = v7;
    if (sub_1000618FC((uint64_t)a1, result, v7, a3))
    {
      return 1;
    }
    else
    {
      uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))qmi::MessageBase::sParsingErrorHandler;
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

BOOL sub_1000618FC(uint64_t a1, uint64_t a2, int a3, unint64_t a4)
{
  uint64_t v8 = a2;
  sub_1000A533C(&v8, a3, a4, (uint64_t)v7);
  uint64_t v5 = v8;
  if (v8) {
    (*(void (**)(void))(*(void *)a4 + 16))();
  }
  return v5 != 0;
}

uint64_t sub_10006195C(qmi::MessageBase *a1, uint64_t a2, unint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    int v9 = v7;
    if (sub_100061A00((uint64_t)a1, (tlv *)result, v7, a3))
    {
      return 1;
    }
    else
    {
      uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))qmi::MessageBase::sParsingErrorHandler;
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

BOOL sub_100061A00(uint64_t a1, tlv *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = a2;
  sub_1000A53E0(&v7, a3, a3, a4);
  uint64_t v5 = v7;
  if (v7) {
    (*(void (**)(void))(*(void *)a4 + 16))();
  }
  return v5 != 0;
}

char *sub_100061A60(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_100061B10();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_100061B10()
{
}

void sub_100061C44()
{
}

uint64_t sub_100061C58()
{
  return sub_100056B9C();
}

unsigned char **sub_100061C60(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  size_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = sub_100056BA4((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *size_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_100061CBC()
{
}

void *sub_100061D18(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_100057E0C();
  }
  return operator new(8 * a2);
}

void sub_100061D50(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_100061DB4(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_100061DA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_100061DB4(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_100061EAC(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_100061E68((uint64_t)a2);
  }
}

void sub_100061E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100061E68(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x38u);
  return a1;
}

void sub_100061E98(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_100061EAC(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  size_t v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x38u);
  return a1;
}

void sub_100061EDC(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_100061EF0(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_100061FA0();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_100061FA0()
{
}

void sub_1000620D4()
{
}

uint64_t sub_1000620E8()
{
  return sub_100056E78();
}

_DWORD **sub_1000620F0(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  size_t v4 = (_DWORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = sub_1000A467C((_DWORD **)a2, (_DWORD *)(a1 + 12));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)size_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void sub_10006214C()
{
}

void sub_1000621B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_100062214(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_100062200(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_100062214(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_10006230C(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1000622C8((uint64_t)a2);
  }
}

void sub_1000622AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000622C8(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x27u);
  return a1;
}

void sub_1000622F8(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_10006230C(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  size_t v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x27u);
  return a1;
}

void sub_10006233C(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_100062500(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    id v2 = objc_begin_catch(exception_object);
    +[WCM_Logging logLevel:22 message:@"DataStoreManager: persistentContainer not initiated."];

    objc_end_catch();
    JUMPOUT(0x10006240CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_100062560(id a1, NSPersistentStoreDescription *a2, NSError *a3)
{
  if (a3)
  {
    size_t v4 = a2;
    id v7 = [(NSError *)a3 description];
    uint64_t v5 = [(NSPersistentStoreDescription *)v4 URL];

    int v6 = [v5 absoluteString];
    +[WCM_Logging logLevel:22, @"DataStoreManager: persistentContainer not created %@ %@", v7, v6 message];
  }
}

int64_t sub_100063CD8(id a1, FreqRangeInfo *a2, FreqRangeInfo *a3)
{
  size_t v4 = a3;
  unint64_t v5 = [(FreqRangeInfo *)a2 FreqStart];
  unint64_t v6 = [(FreqRangeInfo *)v4 FreqStart];

  if (v5 > v6) {
    return 1;
  }
  else {
    return -1;
  }
}

int64_t sub_100063D30(id a1, FreqRangeInfo *a2, FreqRangeInfo *a3)
{
  size_t v4 = a3;
  unint64_t v5 = a2;
  unsigned int v6 = [(FreqRangeInfo *)v5 Priority];
  if (v6 == [(FreqRangeInfo *)v4 Priority])
  {
    id v7 = [(FreqRangeInfo *)v5 FreqStart];

    if (v7 > (id)[(FreqRangeInfo *)v4 FreqStart]) {
      int64_t v8 = 1;
    }
    else {
      int64_t v8 = -1;
    }
  }
  else
  {
    unsigned int v9 = [(FreqRangeInfo *)v5 Priority];

    if (v9 < [(FreqRangeInfo *)v4 Priority]) {
      int64_t v8 = -1;
    }
    else {
      int64_t v8 = 1;
    }
  }

  return v8;
}

id sub_100064230(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) sacCreateRawFreqList:*(void *)(a1 + 40) bufferSize:64 buffer:v2];
  if (result) {
    return (id)TelephonyBasebandRemoveFreqListExt();
  }
  return result;
}

id sub_1000642B0(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) sacCreateRawFreqList:*(void *)(a1 + 40) bufferSize:64 buffer:v2];
  if (result) {
    return (id)TelephonyBasebandRemoveFreqListExt();
  }
  return result;
}

id sub_100064330(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) sacCreateRawFreqList:*(void *)(a1 + 40) bufferSize:64 buffer:v2];
  if (result) {
    return (id)TelephonyBasebandAddFreqListExt();
  }
  return result;
}

id sub_1000647B4(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) sacCreateRawFreqList:*(void *)(a1 + 40) bufferSize:64 buffer:v2];
  if (result) {
    return (id)TelephonyBasebandRemoveFreqListExt();
  }
  return result;
}

id sub_100064834(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) sacCreateRawFreqList:*(void *)(a1 + 40) bufferSize:64 buffer:v2];
  if (result) {
    return (id)TelephonyBasebandAddFreqListExt();
  }
  return result;
}

void sub_1000678C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

id sub_1000678F4(uint64_t a1)
{
  return [*(id *)(a1 + 32) clientStarted];
}

id sub_1000678FC(uint64_t a1)
{
  return [*(id *)(a1 + 32) clientStopped];
}

void sub_100067B18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100067B4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) IBINetRegistrationInfoIndCbHandle:a2 size:a3];
}

id sub_100067B5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) IBINetRadioSignalIndCbHandle:a2 size:a3];
}

id sub_100067B6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) IBICallPsBandwidthEstimationIndHandle:a2 size:a3];
}

void sub_100067B7C(id a1)
{
  id v1 = +[WRM_HandoverManager WRM_HandoverManagerSingleton];
  [v1 postWRMStateToBB];
}

void sub_100067BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100067D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  AriSdk::ARI_IBICallPsStartBandwidthEstimationReq_SDK::~ARI_IBICallPsStartBandwidthEstimationReq_SDK((AriSdk::ARI_IBICallPsStartBandwidthEstimationReq_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100067D30(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  AriSdk::ARI_IBICallPsStartBandwidthEstimationRspCb_SDK::ARI_IBICallPsStartBandwidthEstimationRspCb_SDK((AriSdk::ARI_IBICallPsStartBandwidthEstimationRspCb_SDK *)v5, a2, a3);
  if (ice::isARIResponseValid((ice *)v5, (const AriSdk::MsgBase *)0xD228000, v3))
  {
    if (AriSdk::ARI_IBICallPsStartBandwidthEstimationRspCb_SDK::unpack((AriSdk::ARI_IBICallPsStartBandwidthEstimationRspCb_SDK *)v5)) {
      CFStringRef v4 = @"ICE ERROR: Unpack IBICallPsStartBandwidthEstimationRspCb";
    }
    else {
      CFStringRef v4 = @"ICE Rsp OK: IBICallPsStartBandwidthEstimationRspCb";
    }
    +[WCM_Logging logLevel:22 message:v4];
  }
  else
  {
    +[WCM_Logging logLevel:22 message:@"ICE ERROR: Invalid IBICallPsStartBandwidthEstimationRspCb"];
  }
  AriSdk::ARI_IBICallPsStartBandwidthEstimationRspCb_SDK::~ARI_IBICallPsStartBandwidthEstimationRspCb_SDK((AriSdk::ARI_IBICallPsStartBandwidthEstimationRspCb_SDK *)v5);
}

void sub_100067DC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  AriSdk::ARI_IBICallPsStartBandwidthEstimationRspCb_SDK::~ARI_IBICallPsStartBandwidthEstimationRspCb_SDK((AriSdk::ARI_IBICallPsStartBandwidthEstimationRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100067EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  AriSdk::ARI_IBICallPsStopBandwidthEstimationReq_SDK::~ARI_IBICallPsStopBandwidthEstimationReq_SDK((AriSdk::ARI_IBICallPsStopBandwidthEstimationReq_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100067EE0(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  AriSdk::ARI_IBICallPsStopBandwidthEstimationRspCb_SDK::ARI_IBICallPsStopBandwidthEstimationRspCb_SDK((AriSdk::ARI_IBICallPsStopBandwidthEstimationRspCb_SDK *)v5, a2, a3);
  if (ice::isARIResponseValid((ice *)v5, (const AriSdk::MsgBase *)0xD230000, v3))
  {
    if (AriSdk::ARI_IBICallPsStopBandwidthEstimationRspCb_SDK::unpack((AriSdk::ARI_IBICallPsStopBandwidthEstimationRspCb_SDK *)v5)) {
      CFStringRef v4 = @"ICE ERROR: Unpack IBICallPsStopBandwidthEstimationRspCb";
    }
    else {
      CFStringRef v4 = @"ICE Rsp OK: IBICallPsStopBandwidthEstimationRspCb";
    }
    +[WCM_Logging logLevel:22 message:v4];
  }
  else
  {
    +[WCM_Logging logLevel:22 message:@"ICE ERROR: Invalid IBICallPsStopBandwidthEstimationRspCb"];
  }
  AriSdk::ARI_IBICallPsStopBandwidthEstimationRspCb_SDK::~ARI_IBICallPsStopBandwidthEstimationRspCb_SDK((AriSdk::ARI_IBICallPsStopBandwidthEstimationRspCb_SDK *)v5);
}

void sub_100067F74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  AriSdk::ARI_IBICallPsStopBandwidthEstimationRspCb_SDK::~ARI_IBICallPsStopBandwidthEstimationRspCb_SDK((AriSdk::ARI_IBICallPsStopBandwidthEstimationRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100068318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  AriSdk::ARI_IBINetRadioSignalIndCb_SDK::~ARI_IBINetRadioSignalIndCb_SDK((AriSdk::ARI_IBINetRadioSignalIndCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100068A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27,char a28)
{
  AriSdk::ARI_IBICallPsBandwidthEstimationInd_SDK::~ARI_IBICallPsBandwidthEstimationInd_SDK((AriSdk::ARI_IBICallPsBandwidthEstimationInd_SDK *)&a28);
  _Unwind_Resume(a1);
}

void *sub_100068B9C@<X0>(id *a1@<X1>, OS_dispatch_object *a2@<X2>, void *a3@<X8>)
{
  unsigned int v6 = operator new(0x28uLL);
  id result = sub_100068C00(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_100068BEC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100068C00(void *a1, id *a2, OS_dispatch_object *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10020D8B8;
  sub_100068C74((uint64_t)&v5, a1 + 24, a2, a3);
  return a1;
}

void sub_100068C60(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100068C74(uint64_t a1, int a2, id *a3, OS_dispatch_object *a4)
{
  id v8 = *a3;
  v6.fObj.fObj = a4;
  sub_1000D54C8(a2, (int)&v8, v6);
  id v7 = v8;
  id v8 = 0;
}

void sub_100068CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_100068EEC(uint64_t a1)
{
  [+[NSDate date] timeIntervalSince1970];
  double v3 = v2;
  if (v2 - *(double *)&qword_10027D028 < 330.0)
  {
    CFStringRef v4 = @"CellularThroughput: Cannot start download test since timeDifferenceFromLastTestScheduled < 5.5 min";
LABEL_6:
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, v4, v9, *(void *)&v10, v11);
    goto LABEL_7;
  }
  +[WCM_Logging logLevel:22, @"CellularThroughput: RAT: %d", *(unsigned int *)(a1 + 48) message];
  if (*(_DWORD *)(a1 + 48) != 1) {
    goto LABEL_7;
  }
  +[WCM_Logging logLevel:22, @"CellularThroughput lastScheduledTestTime before starting test: %0.2f", qword_10027D028 message];
  +[WCM_Logging logLevel:22, @"CellularThroughput timeDifferenceFromLastTestScheduled on RAT %d: %0.2f", *(unsigned int *)(a1 + 48), v3 - *(double *)&qword_10027D028 message];
  char v5 = *(double **)(a1 + 32);
  if (v3 - *(double *)&qword_10027D028 < v5[1])
  {
    double v10 = v3 - *(double *)&qword_10027D028;
    uint64_t v11 = *((void *)v5 + 1);
    uint64_t v9 = *(unsigned int *)(a1 + 48);
    CFStringRef v4 = @"CellularThroughput: Cannot start download test since timeDifferenceFromLastTestScheduled on RAT %d is %0.2f < %0.2f";
    goto LABEL_6;
  }
  if (objc_msgSend(v5, "ifNoActiveVoiceCall", v3 - *(double *)&qword_10027D028))
  {
    *(void *)(*(void *)(a1 + 32) + 16) = objc_alloc_init(WRM_SpeedTestConfigIOS);
    id v8 = *(void **)(*(void *)(a1 + 32) + 16);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1000690E0;
    v12[3] = &unk_10020EB98;
    *(double *)&v12[5] = v3;
    v12[4] = *(void *)(a1 + 40);
    [v8 startDownloadTest:v12];

    return;
  }
LABEL_7:
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    id v7 = *(void (**)(void))(v6 + 16);
    v7();
  }
}

uint64_t sub_1000690E0(uint64_t a1, void *a2)
{
  if ([a2 isEqualToString:@"YES"])
  {
    qword_10027D028 = *(void *)(a1 + 40);
    +[WCM_Logging logLevel:22, @"CellularThroughput lastScheduledTestTime for Cellular RAT 1 after starting test: %0.2f", qword_10027D028 message];
    uint64_t result = *(void *)(a1 + 32);
    if (!result) {
      return result;
    }
    CFStringRef v4 = *(uint64_t (**)(void))(result + 16);
  }
  else
  {
    uint64_t result = *(void *)(a1 + 32);
    if (!result) {
      return result;
    }
    CFStringRef v4 = *(uint64_t (**)(void))(result + 16);
  }

  return v4();
}

id sub_100069224(id result)
{
  if (!qword_10027D038)
  {
    v1.receiver = (id)*((void *)result + 4);
    v1.super_class = (Class)&OBJC_METACLASS___WRM_FT_HandoverManager;
    uint64_t result = [objc_msgSendSuper2(&v1, "allocWithZone:", 0) init];
    qword_10027D038 = (uint64_t)result;
  }
  return result;
}

void sub_10006930C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100069388(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10006941C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100069B0C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id *sub_100069F00(id *result)
{
  objc_super v1 = result;
  id v2 = result[6];
  switch((unint64_t)v2)
  {
    case 1uLL:
      +[WCM_Logging logLevel:29, @"FT Handover Manager: Receivd WiFi controller event controller %p", result[4] message];
      double v3 = (void *)*((void *)v1[5] + 4);
      if (v3)
      {

        *((void *)v1[5] + 4) = 0;
      }
      id v4 = v1[4];
      if (v4)
      {
        id v5 = v4;
        char v6 = 0;
        *((void *)v1[5] + 4) = v5;
      }
      else
      {
        char v6 = 1;
      }
      byte_10027D040 = v6;
      goto LABEL_33;
    case 2uLL:
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xDuLL:
      return result;
    case 4uLL:
      +[WCM_Logging logLevel:27, @"VoIP LinkEval: Receivd BT controller event controller %p", result[4] message];
      id v8 = (void *)*((void *)v1[5] + 5);
      if (v8) {

      }
      *((void *)v1[5] + 5) = v1[4];
      goto LABEL_33;
    case 7uLL:
      if (result[4])
      {
        [result[5] addiRatClient:];
        CFStringRef v7 = @"FT Handover Manager:Added iRAT Client (WRMCommCenter) to FT Handover Manager ";
        goto LABEL_19;
      }
      +[WCM_Logging logLevel:29 message:@"FT Handover Manager:remove Client (WRMCommCenter) from VoIP link evaluator"];
      id v9 = v1[5];
      uint64_t v10 = 1;
      goto LABEL_32;
    case 0xBuLL:
      +[WCM_Logging logLevel:29, @"IDS LinkEval Mgr: Receivd WRMIdsClient controller event controller %p", result[4] message];
      if (v1[4])
      {
        [v1[5] addiRatClient:];
        CFStringRef v7 = @"updateControllerSession:Added Client (WRMIdsClient) to IDS LinkEval Manager ";
        goto LABEL_19;
      }
      +[WCM_Logging logLevel:29 message:@"updateControllerSession:remove Client (WRMIdsClient) from IDS LinkEval Manager "];
      id v9 = v1[5];
      uint64_t v10 = 4;
      goto LABEL_32;
    case 0xCuLL:
      +[WCM_Logging logLevel:29, @"IDS LinkEval Mgr: Receivd WRMIdsTool controller event controller %p", result[4] message];
      if (v1[4])
      {
        [v1[5] addiRatClient:];
        CFStringRef v7 = @"updateControllerSession:Added Client (WRMIdsTool) to IDS LinkEval Manager ";
        goto LABEL_19;
      }
      +[WCM_Logging logLevel:29 message:@"updateControllerSession:remove Client (WRMIdsTool) from IDS LinkEval Manager "];
      id v9 = v1[5];
      uint64_t v10 = 5;
      goto LABEL_32;
    case 0xEuLL:
      if (result[4])
      {
        [result[5] addiRatClient:];
        [[+[WRM_MetricsService getSingleton](WRM_MetricsService, "getSingleton") initAWDService];
        +[WCM_Logging logLevel:29 message:@"FT Handover Manager:Added iRAT Client (WRMFaceTimeCalling) to FT Handover Manager "];
        [v1[5] toggleFastLQMReport:1];
        *((unsigned char *)v1[5] + 178) = 0;
      }
      else
      {
        +[WCM_Logging logLevel:29 message:@"FT Handover Manager:remove iRAT Client (WRMFaceTimeCalling) from FT Handover Manager "];
        [v1[5] deleteiRATClient:7];
        byte_10027D044 = 0;
        if ([*((id *)v1[5] + 7) mobilityStateAwarenessEnabled]) {
          [*((id *)v1[5] + 8) stopAllAlarms];
        }
        [*((id *)v1[5] + 7) revertFaceTimeThToAzul];
        [v1[5] toggleFastLQMReport:0];
      }
      [objc_msgSend(v1[5], "getAVConferenceController") resetRTPMetrics];
      [v1[5] resetActiveCallEvaluationMetrics];
      goto LABEL_33;
    default:
      if (v2 != (id)22) {
        return result;
      }
      +[WCM_Logging logLevel:29, @"Recevied Subscribe Message from SIRI: %p", result[4] message];
      if (v1[4])
      {
        [v1[5] addiRatClient:];
        CFStringRef v7 = @"updateControllerSession:Added Client (WRMSiri) to VoIP link evaluator ";
LABEL_19:
        +[WCM_Logging logLevel:29 message:v7];
      }
      else
      {
        +[WCM_Logging logLevel:29 message:@"updateControllerSession:remove Client (WRMSiri) from VoIP link evaluator"];
        id v9 = v1[5];
        uint64_t v10 = 14;
LABEL_32:
        [v9 deleteiRATClient:v10];
      }
LABEL_33:
      id v11 = v1[5];
      uint64_t v12 = (uint64_t)v1[6];
      return (id *)[v11 handleControllerAvailability:v12];
  }
}

void sub_10006B5E0(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  id v3 = [*(id *)(*(void *)(a1 + 32) + 32) wifiService];
  unsigned int v4 = [v3 isAssociated];
  if ([*(id *)(*(void *)(a1 + 32) + 40) isBTMetricsValid])
  {
    xpc_dictionary_set_uint64(v2, "kWRMProximityBtRssi", (uint64_t)[*(id *)(*(void *)(a1 + 32) + 40) getMovingAvgBTRssi]);
    [*(id *)(*(void *)(a1 + 32) + 40) getBtTxPer];
    xpc_dictionary_set_uint64(v2, "kWRMProximityBtRetransmissionRateRx", (unint64_t)(v5 * 100.0));
    [*(id *)(*(void *)(a1 + 32) + 40) getBtRxPer];
    xpc_dictionary_set_uint64(v2, "kWRMProximityBtRetransmissionRateRx", (unint64_t)(v6 * 100.0));
    uint64_t v7 = 100 * (void)[*(id *)(*(void *)(a1 + 32) + 40) getBtActivePhy];
  }
  else
  {
    xpc_dictionary_set_uint64(v2, "kWRMProximityBtRssi", 0);
    xpc_dictionary_set_uint64(v2, "kWRMProximityBtRetransmissionRateRx", 0);
    xpc_dictionary_set_uint64(v2, "kWRMProximityBtRetransmissionRateRx", 0);
    uint64_t v7 = 0;
  }
  xpc_dictionary_set_uint64(v2, "kWRMProximityBtTech", v7);
  if (v4)
  {
    xpc_dictionary_set_int64(v2, "kWRMProximityWifiRssi", (int64_t)[v3 getRSSI]);
    xpc_dictionary_set_int64(v2, "kWRMProximityWifiSnr", (int64_t)[v3 getSNR]);
    [v3 getBeaconPer];
    xpc_dictionary_set_int64(v2, "kWRMProximityWifiBeaconPer", (uint64_t)(v8 * 100.0));
    xpc_dictionary_set_int64(v2, "kWRMProximityWifiNwType", [v3 getPointOfInterest]);
    xpc_dictionary_set_int64(v2, "kWRMProximityWifiLSMBeRecommendation", (int)[v3 getBEDecision]);
    xpc_dictionary_set_int64(v2, "kWRMProximityWifiExpectedThroughputVIBE", (int)[v3 getTxThroughputVI]);
    xpc_dictionary_set_int64(v2, "kWRMProximityWifiPacketLifetimeVIBE", (int)[v3 getLifeTimeVI]);
    int64_t v9 = (int)[v3 getTxLossRateVI];
  }
  else
  {
    xpc_dictionary_set_int64(v2, "kWRMProximityWifiRssi", -600);
    xpc_dictionary_set_int64(v2, "kWRMProximityWifiSnr", -600);
    xpc_dictionary_set_int64(v2, "kWRMProximityWifiBeaconPer", 0);
    xpc_dictionary_set_int64(v2, "kWRMProximityWifiNwType", 3);
    xpc_dictionary_set_int64(v2, "kWRMProximityWifiLSMBeRecommendation", -1);
    xpc_dictionary_set_int64(v2, "kWRMProximityWifiExpectedThroughputVIBE", 0);
    xpc_dictionary_set_int64(v2, "kWRMProximityWifiPacketLifetimeVIBE", 0);
    int64_t v9 = 0;
  }
  xpc_dictionary_set_int64(v2, "kWRMProximityWifiPacketLossRateVIBE", v9);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v10 = *(void **)(*(void *)(a1 + 32) + 104);
  id v11 = [v10 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v16;
    do
    {
      uint64_t v14 = 0;
      do
      {
        if (*(void *)v16 != v13) {
          objc_enumerationMutation(v10);
        }
        [*(id *)(*((void *)&v15 + 1) + 8 * (void)v14) sendMessage:1308 withArgs:v2];
        uint64_t v14 = (char *)v14 + 1;
      }
      while (v12 != v14);
      id v12 = [v10 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v12);
  }
  xpc_release(v2);
}

id sub_10006DE38(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 40);
  xpc_object_t v2 = *(void **)(a1 + 32);
  if (!v1)
  {
    id result = [v2 setLQMReportInterval:0];
    goto LABEL_5;
  }
  id result = [v2 setLQMReportInterval:1];
  if (result) {
LABEL_5:
  }
    byte_10027D043 = v1 != 0;
  return result;
}

void sub_10006E68C(uint64_t a1)
{
  if (objc_loadWeak((id *)(a1 + 48)))
  {
    +[WCM_Logging logLevel:29, @"handleCallNotification callType=%d,disconnectedReason=%d", *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 88) + 156), *(unsigned int *)(a1 + 56) message];
    [*(id *)(a1 + 40) feedAWDMetricsWiFiStats];
    [*(id *)(a1 + 40) feedAWDMetricsCellularStatsWithUUID:*(void *)(a1 + 32)];

    unsigned int v2 = *(_DWORD *)(a1 + 56);
    if (v2 <= 0x17 && ((1 << v2) & 0x8A6000) != 0)
    {
      id v3 = [*(id *)(*(void *)(a1 + 40) + 80) getAWDService];
      uint64_t v4 = 1;
    }
    else
    {
      id v3 = [*(id *)(*(void *)(a1 + 40) + 80) getAWDService];
      uint64_t v4 = 0;
    }
    [v3 submitMetricsTelephonyOrFtCallEnd:v4];
  }
  else
  {
    double v5 = *(void **)(a1 + 32);
  }
}

uint64_t sub_10006E91C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

id sub_10006EEF8(uint64_t a1)
{
  +[WCM_Logging logLevel:28 message:@"Submit Music Streaming AWD Metrics"];
  [*(id *)(a1 + 32) feedAWDRadioStats];
  id result = [[objc_msgSend(*(id *)(*(void *)(a1 + 32) + 232), "getAWDService") submitMericStreaming];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 240) + 381) = 0;
  return result;
}

void sub_10006F84C(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  id v3 = [[+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton") getWiFiService];
  if ([v3 isWiFiPrimaryInterface])
  {
    id v4 = [[+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton") getSymptomsService];
    xpc_dictionary_set_double(v2, "wghtRSSI", (double)(int)[v3 getWghtAverageRSSI]);
    xpc_dictionary_set_double(v2, "wghtSNR", (double)(int)[v3 getWghtAverageSNR]);
    xpc_dictionary_set_double(v2, "wghtPhyRate", (double)[v3 getWghtAverageRXPhyRate]);
    [v4 getTCPMinRTT];
    xpc_dictionary_set_double(v2, "tcpRTT", v5 * 1000.0);
    xpc_dictionary_set_uint64(v2, "chType", [v3 getChannelType]);
    xpc_dictionary_set_BOOL(v2, "isCaptive", (BOOL)[v3 isWiFiNetworkCaptive]);
    xpc_dictionary_set_uint64(v2, "CCA", (uint64_t)[v3 getCCA]);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, @"%s: WiFi not primary NAN", "-[WRM_BWEvalManager(privateFunctions) handleWiFiMetricsRequest:]_block_invoke");
    xpc_dictionary_set_double(v2, "wghtRSSI", NAN);
    xpc_dictionary_set_double(v2, "wghtSNR", NAN);
    xpc_dictionary_set_double(v2, "wghtPhyRate", NAN);
    xpc_dictionary_set_double(v2, "tcpRTT", NAN);
    xpc_dictionary_set_uint64(v2, "chType", v6);
    xpc_dictionary_set_BOOL(v2, "isCaptive", 1);
    xpc_dictionary_set_double(v2, "CCA", NAN);
  }
  uint64_t v7 = xpc_copy_description(v2);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, @"%s: XPC args - %p %s", "-[WRM_BWEvalManager(privateFunctions) handleWiFiMetricsRequest:]_block_invoke", v2, v7);
  free(v7);
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  double v8 = *(void **)(*(void *)(a1 + 32) + 264);
  id v9 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v15;
    do
    {
      for (uint64_t i = 0; i != v10; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v11) {
          objc_enumerationMutation(v8);
        }
        uint64_t v13 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, @"Sending back XPC object for client: %@", [v13 description]);
        [v13 sendMessage:2100 withArgs:v2];
      }
      id v10 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v10);
  }
  xpc_release(v2);
}

void sub_10006FC6C(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  id v3 = +[WRM_SCService WRM_SCServiceControllerSingleton];
  if (MGGetBoolAnswer())
  {
    uint64_t v4 = (int)[v3 getCellularDataLQM];
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, @"%s: Not a cellular device. Returning 0", "-[WRM_BWEvalManager(privateFunctions) handleCellularDataMetricsRequest:]_block_invoke");
    uint64_t v4 = 0;
  }
  xpc_dictionary_set_uint64(v2, "cellularDataLQM", v4);
  double v5 = xpc_copy_description(v2);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, @"%s: XPC args - %p %s", "-[WRM_BWEvalManager(privateFunctions) handleCellularDataMetricsRequest:]_block_invoke", v2, v5);
  free(v5);
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v6 = *(void **)(*(void *)(a1 + 32) + 264);
  id v7 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v13 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, @"Sending back XPC object for client: %@", [v11 description]);
        [v11 sendMessage:2001 withArgs:v2];
      }
      id v8 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v8);
  }
  xpc_release(v2);
}

void sub_10006FF3C(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  id v3 = +[WRM_EnhancedCTService wrm_EnhancedCTServiceSingleton];
  [v3 setActiveSlot:[v3 getUserDataPreferredSlot]];
  if (MGGetBoolAnswer())
  {
    [v3 getNrRSRP];
    xpc_dictionary_set_double(v2, "nrRSRP", v4);
    [v3 getNrRSRQ];
    xpc_dictionary_set_double(v2, "nrRSRQ", v5);
    [v3 getNrSNR];
    double v7 = v6;
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, @"%s: Not a cellular device. Returning NAN", "-[WRM_BWEvalManager(privateFunctions) handleNrPhyMetricsRequest:]_block_invoke");
    double v7 = NAN;
    xpc_dictionary_set_double(v2, "nrRSRP", NAN);
    xpc_dictionary_set_double(v2, "nrRSRQ", NAN);
  }
  xpc_dictionary_set_double(v2, "nrSNR", v7);
  id v8 = xpc_copy_description(v2);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, @"%s: XPC args - %p %s", "-[WRM_BWEvalManager(privateFunctions) handleNrPhyMetricsRequest:]_block_invoke", v2, v8);
  free(v8);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v9 = *(void **)(*(void *)(a1 + 32) + 264);
  id v10 = [v9 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v11; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v16 != v12) {
          objc_enumerationMutation(v9);
        }
        long long v14 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, @"Sending back XPC object for client: %@", [v14 description]);
        [v14 sendMessage:2000 withArgs:v2];
      }
      id v11 = [v9 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v11);
  }
  xpc_release(v2);
}

id sub_100070F20(uint64_t a1)
{
  return [*(id *)(a1 + 32) processSessionStatusUpdate:*(void *)(a1 + 40)];
}

id sub_100070F2C(uint64_t a1)
{
  +[WCM_Logging logLevel:28 message:@"Submit Music Streaming AWD Metrics"];
  id result = [[objc_msgSend(*(id *)(*(void *)(a1 + 32) + 232), "getAWDService") submitMericStreaming];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 240) + 381) = 0;
  byte_10027CE7C = 0;
  return result;
}

void sub_10007187C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000718F8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000719B4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100071B24(id result)
{
  if (!qword_10027D058)
  {
    id v1 = result;
    +[WCM_Logging logLevel:28 message:@"Allocating WRM_BWEvalManagerSingleton"];
    v2.receiver = (id)*((void *)v1 + 4);
    v2.super_class = (Class)&OBJC_METACLASS___WRM_BWEvalManager;
    id result = [[[objc_msgSendSuper2(&v2, "allocWithZone:", 0) init];
    qword_10027D058 = (uint64_t)result;
  }
  return result;
}

void *sub_100071EFC(void *result)
{
  id v1 = result;
  uint64_t v2 = result[6];
  if (v2 <= 19)
  {
    if (v2 == 1)
    {
      +[WCM_Logging logLevel:28, @"IMG Video Mgr: Receivd WiFi controller event controller %p", result[4] message];
      double v4 = *(void **)(v1[5] + 24);
      if (v4) {

      }
      double v5 = (void *)v1[4];
      if (v5) {
        *(void *)(v1[5] + 24) = v5;
      }
      else {
        *(void *)(v1[5] + 24) = 0;
      }
      goto LABEL_27;
    }
    if (v2 != 13) {
      return result;
    }
    +[WCM_Logging logLevel:28, @"IMG Video Mgr: Receivd WRMIMGVideo controller event controller %p", result[4] message];
    *(void *)(v1[5] + 112) = 0;
    *(unsigned char *)(v1[5] + 72) = 0;
    *(void *)(v1[5] + 120) = 36000;
    if (v1[4])
    {
      [v1[5] addiRatClient:];
      CFStringRef v3 = @"updateControllerSession:Added Client (WRMIMGVideo) to IMG BW  Manager ";
      goto LABEL_15;
    }
    +[WCM_Logging logLevel:24 message:@"updateControllerSession:remove Client (WRMIMGVideo) from IMG Video Manager "];
    double v6 = (void *)v1[5];
    uint64_t v7 = 6;
LABEL_25:
    [v6 deleteiRATClient:v7];
    goto LABEL_27;
  }
  if (v2 == 20)
  {
    +[WCM_Logging logLevel:28, @"IMG Video Mgr: Receivd WRMIMGVideoTest controller event controller %p", result[4] message];
    if (v1[4])
    {
      [v1[5] addiRatClient:];
      CFStringRef v3 = @"updateControllerSession:Added Client (WRMIMGVideoTest) to IMG BW  Manager ";
      goto LABEL_15;
    }
    +[WCM_Logging logLevel:24 message:@"updateControllerSession:remove Client (WRMIMGVideoTest) from IMG Video Manager "];
    double v6 = (void *)v1[5];
    uint64_t v7 = 12;
    goto LABEL_25;
  }
  if (v2 == 34)
  {
    +[WCM_Logging logLevel:28, @"Received WRMCoreMediaStreaming controller event controller %p", result[4] message];
    if (v1[4])
    {
      [v1[5] addiRatClient:];
      CFStringRef v3 = @"updateControllerSession:Added Client (WRMCoreMediaStreaming) to BW Eval Manager Controller";
      goto LABEL_15;
    }
    +[WCM_Logging logLevel:24 message:@"updateControllerSession: Remove Client (WRMCoreMediaStreaming)"];
    double v6 = (void *)v1[5];
    uint64_t v7 = 22;
    goto LABEL_25;
  }
  if (v2 != 33) {
    return result;
  }
  +[WCM_Logging logLevel:28, @"Received Baseband Metrics controller event controller %p", result[4] message];
  if (!v1[4])
  {
    +[WCM_Logging logLevel:24 message:@"updateControllerSession: Remove Client (WRMNPT)"];
    double v6 = (void *)v1[5];
    uint64_t v7 = 21;
    goto LABEL_25;
  }
  [v1[5] addiRatClient:];
  CFStringRef v3 = @"updateControllerSession:Added Client (WRMNPT) to BB Eval Manager Controller";
LABEL_15:
  +[WCM_Logging logLevel:28 message:v3];
LABEL_27:
  id v8 = (void *)v1[5];
  uint64_t v9 = v1[6];

  return [v8 handleControllerAvailability:v9];
}

id sub_1000721E8(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleSessionNotification:*(void *)(a1 + 40)];
}

void sub_100072318(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100072CD0()
{
  uint64_t v3 = 0;
  double v4 = &v3;
  uint64_t v5 = 0x3052000000;
  double v6 = sub_1000744F4;
  uint64_t v7 = sub_100074504;
  uint64_t v0 = qword_10027D060;
  uint64_t v8 = qword_10027D060;
  if (!qword_10027D060)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_100074510;
    v2[3] = &unk_10020DAF8;
    v2[4] = &v3;
    sub_100074510((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_100072DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007333C()
{
  uint64_t v3 = 0;
  double v4 = &v3;
  uint64_t v5 = 0x3052000000;
  double v6 = sub_1000744F4;
  uint64_t v7 = sub_100074504;
  uint64_t v0 = qword_10027D070;
  uint64_t v8 = qword_10027D070;
  if (!qword_10027D070)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_1000746D0;
    v2[3] = &unk_10020DAF8;
    v2[4] = &v3;
    sub_1000746D0((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_100073414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000744F4(uint64_t a1, uint64_t a2)
{
}

void sub_100074504(uint64_t a1)
{
}

Class sub_100074510(uint64_t a1)
{
  sub_100074568();
  Class result = objc_getClass("MLModel");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    sub_10013A790();
  }
  qword_10027D060 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

void sub_100074568()
{
  v0[0] = 0;
  if (!qword_10027D068)
  {
    v0[1] = _NSConcreteStackBlock;
    v0[2] = (void *)3221225472;
    v0[3] = sub_10007465C;
    v0[4] = &unk_10020DB30;
    v0[5] = v0;
    long long v1 = off_10020ED78;
    uint64_t v2 = 0;
    qword_10027D068 = _sl_dlopen();
  }
  if (!qword_10027D068) {
    sub_10013A7F8(v0);
  }
  if (v0[0]) {
    free(v0[0]);
  }
}

uint64_t sub_10007465C()
{
  uint64_t result = _sl_dlopen();
  qword_10027D068 = result;
  return result;
}

Class sub_1000746D0(uint64_t a1)
{
  sub_100074568();
  Class result = objc_getClass("MLDictionaryFeatureProvider");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    sub_10013A860();
  }
  qword_10027D070 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

id sub_10007483C(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  qword_10027D078 = (uint64_t)v1;

  return [v1 resetIDSMetrics];
}

id sub_100076918(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, @"%s:handleBTLQMEval called", "-[WRM_IDSLinkEvalManager(privateFunctions) handleBTLQMEval:]_block_invoke");
  [*(id *)(a1 + 32) updateBTLQMScore];
  *(unsigned char *)(*(void *)(a1 + 32) + 68) = 1;
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 postBluetoothLQMScore:1];
}

id sub_100076C3C(uint64_t a1)
{
  xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 32), "kMessageArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(*(xpc_object_t *)(a1 + 32), "kClientType");
  if ((uint64 - 1) >= 0x15)
  {
    double v4 = "UNKNOWN_WRM_CLIENT_TYPE!!!";
    if (uint64 == 22) {
      double v4 = "ClientCoreMediaStreaming";
    }
  }
  else
  {
    double v4 = off_10020EFA8[(int)uint64 - 1];
  }
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, @"%s Message received from client %d(%s) ", "-[WRM_IDSLinkEvalManager(privateFunctions) handleTerminusLinkPrefSubscribe:]_block_invoke", uint64, v4);
  id v5 = [*(id *)(a1 + 40) getiRATProximityClientFromList:uint64];
  id result = xpc_dictionary_get_value(value, "kWRMSubscriptionType");
  if (result)
  {
    id result = (id)xpc_dictionary_get_uint64(value, "kWRMSubscriptionType");
    BOOL v7 = result != 0;
  }
  else
  {
    BOOL v7 = 0;
  }
  if ((uint64 - 19) >= 0xFFFFFFFA && !v7)
  {
    [v5 setRxClientType:uint64];
    if (xpc_dictionary_get_value(value, "kWRMProximityGetProximityLinkRecommendation")) {
      [objc_msgSend(v5, "mTerminusContext") setMForceUpdateNeeded:xpc_dictionary_get_BOOL(value, "kWRMProximityGetProximityLinkRecommendation")];
    }
    if (xpc_dictionary_get_value(value, "kWRMProximityLinkRecommendationSubscriptionValid")) {
      [objc_msgSend(v5, "mTerminusContext") setMClientSubscriptionValid:xpc_dictionary_get_BOOL(value, "kWRMProximityLinkRecommendationSubscriptionValid")];
    }
    if (xpc_dictionary_get_value(value, "kWRMProximityLinkRecommendationIsRetry")) {
      [objc_msgSend(v5, "mTerminusContext") setMIsRetry:xpc_dictionary_get_BOOL(value, "kWRMProximityLinkRecommendationIsRetry")];
    }
    [objc_msgSend(v5, "mTerminusContext") setMTerminusIsRegistered:1];
    [v5 setRxClientType:uint64];
    if (uint64 == 14) {
      [objc_msgSend(v5, "mTerminusContext") setMAppLinkPreference:2];
    }
    uint64_t v8 = *(void **)(a1 + 40);
    return [v8 evaluateBTWiFiLinkForTerminus];
  }
  return result;
}

id sub_1000771C4(uint64_t a1)
{
  xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 32), "kMessageArgs");
  LODWORD(v3) = xpc_dictionary_get_uint64(value, "kWRMProximityLinkRecommendationType");
  BOOL v4 = xpc_dictionary_get_BOOL(value, "kWRMProximityAppLinkPreferenceActive");
  if (v3 >= 3)
  {
    id v5 = "INVALID_AppLinkPreferenceType!!!";
    if (v3 == 3) {
      id v5 = "Cellular";
    }
  }
  else
  {
    id v5 = off_10020EED8[(int)v3];
  }
  double v6 = "No";
  if (v4) {
    double v6 = "Yes";
  }
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, @"%s: Terminus appLinkPrefType %s, Preference is active %s", "-[WRM_IDSLinkEvalManager(privateFunctions) handleTerminusSubscribeStatusUpdate:]_block_invoke", v5, v6);
  +[WCM_Logging logLevel:27 message:@"Terminus Link Eval Manager: handleTerminusSubscribeStatusUpdate."];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v7 = [*(id *)(a1 + 40) miRATProximityClientContexts];
  id v8 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v15;
    if (v4) {
      uint64_t v3 = v3;
    }
    else {
      uint64_t v3 = 0;
    }
    do
    {
      for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        if (v12 && [*(id *)(*((void *)&v14 + 1) + 8 * i) mTerminusContext]) {
          [objc_msgSend(v12, "mTerminusContext") setMAppLinkPreference:v3];
        }
      }
      id v9 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v9);
  }
  return [*(id *)(a1 + 40) evaluateBTWiFiLinkForTerminus];
}

id sub_100078380(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) miRATProximityClientContexts];
  uint64_t v3 = *(void *)(a1 + 40);

  return [v2 addObject:v3];
}

id sub_1000784BC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) getiRATProximityClientFromList:*(unsigned int *)(a1 + 40)];
  if (v2)
  {
    id v3 = v2;
    BOOL v4 = *(void **)(a1 + 32);
    return [v4 removeProximityiRatClient:v3];
  }
  else
  {
    int v5 = *(_DWORD *)(a1 + 40);
    if ((v5 - 1) >= 0x15)
    {
      if (v5 == 22) {
        double v6 = "ClientCoreMediaStreaming";
      }
      else {
        double v6 = "UNKNOWN_WRM_CLIENT_TYPE!!!";
      }
    }
    else
    {
      double v6 = off_10020EFA8[v5 - 1];
    }
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, @"%s Proximity iRAT client context not found for %s!!", "-[WRM_IDSLinkEvalManager(privateFunctions) deleteProximityiRATClient:]_block_invoke", v6);
  }
}

void sub_1000785D8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100078654(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000786E8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100078980(id result)
{
  if (!qword_10027D090)
  {
    v1.receiver = (id)*((void *)result + 4);
    v1.super_class = (Class)&OBJC_METACLASS___WRM_IDSLinkEvalManager;
    id result = [[[objc_msgSendSuper2(&v1, "allocWithZone:", 0) init];
    qword_10027D090 = (uint64_t)result;
  }
  return result;
}

void *sub_100078CF8(void *result)
{
  objc_super v1 = result;
  uint64_t v2 = result[6];
  switch(v2)
  {
    case 11:
      +[WCM_Logging logLevel:27, @"IDS LinkEval Mgr: Receivd WRMIdsClient controller event controller %p", result[4] message];
      if (v1[4])
      {
        [v1[5] addiRatClient:];
        CFStringRef v3 = @"updateControllerSession:Added Client (WRMIdsClient) to IDS LinkEval Manager ";
        goto LABEL_24;
      }
      +[WCM_Logging logLevel:27 message:@"updateControllerSession:remove Client (WRMIdsClient) from IDS LinkEval Manager "];
      double v6 = (void *)v1[5];
      uint64_t v7 = 4;
      goto LABEL_30;
    case 12:
      +[WCM_Logging logLevel:27, @"IDS LinkEval Mgr: Receivd WRMIdsTool controller event controller %p", result[4] message];
      if (v1[4])
      {
        [v1[5] addiRatClient:];
        CFStringRef v3 = @"updateControllerSession:Added Client (WRMIdsTool) to IDS LinkEval Manager ";
        goto LABEL_24;
      }
      +[WCM_Logging logLevel:24 message:@"updateControllerSession:remove Client (WRMIdsTool) from IDS LinkEval Manager "];
      double v6 = (void *)v1[5];
      uint64_t v7 = 5;
LABEL_30:
      [v6 deleteiRATClient:v7];
      goto LABEL_38;
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 20:
    case 21:
    case 22:
    case 27:
      return result;
    case 19:
      +[WCM_Logging logLevel:27, @"Proximity LinkEval Mgr: Receivd WRMTerminus controller event controller %p ", result[4] message];
      if (v1[4])
      {
        [v1[5] addProximityiRatClient:];
        CFStringRef v3 = @"Proximity LinkEval Mgr: Initializing Terminus Context";
        goto LABEL_24;
      }
      +[WCM_Logging logLevel:27 message:@"updateControllerSession:remove context for (WRMTerminus) from Proximity LinkEval Manager "];
      id v8 = (void *)v1[5];
      uint64_t v9 = 13;
      goto LABEL_37;
    case 23:
      +[WCM_Logging logLevel:27, @"Proximity LinkEval Mgr: Received WRMWebkit controller event controller %p ", result[4] message];
      if (v1[4])
      {
        [v1[5] addProximityiRatClient:];
        CFStringRef v3 = @"Proximity LinkEval Mgr: Initializing Webkit Context";
        goto LABEL_24;
      }
      +[WCM_Logging logLevel:27 message:@"updateControllerSession:remove context for (WRMWebkit) from Proximity LinkEval Manager "];
      id v8 = (void *)v1[5];
      uint64_t v9 = 15;
      goto LABEL_37;
    case 24:
      +[WCM_Logging logLevel:27, @"Proximity LinkEval Mgr: Received WRMWebkitMail controller event controller %p ", result[4] message];
      if (v1[4])
      {
        [v1[5] addProximityiRatClient:];
        CFStringRef v3 = @"Proximity LinkEval Mgr: Initializing WebkitMail Context";
        goto LABEL_24;
      }
      +[WCM_Logging logLevel:27 message:@"updateControllerSession:remove context for (WRMWebkitMail) from Proximity LinkEval Manager "];
      id v8 = (void *)v1[5];
      uint64_t v9 = 16;
      goto LABEL_37;
    case 25:
      +[WCM_Logging logLevel:27, @"Proximity LinkEval Mgr: Received WRMWebkitNotification controller event controller %p ", result[4] message];
      if (v1[4])
      {
        [v1[5] addProximityiRatClient:];
        CFStringRef v3 = @"Proximity LinkEval Mgr: Initializing WRMWebkitNotification Context";
        goto LABEL_24;
      }
      +[WCM_Logging logLevel:27 message:@"updateControllerSession:remove context for (WRMWebkitNotification) from Proximity LinkEval Manager "];
      id v8 = (void *)v1[5];
      uint64_t v9 = 17;
      goto LABEL_37;
    case 26:
      +[WCM_Logging logLevel:27, @"Proximity LinkEval Mgr: Received WRMWirelessStress controller event controller %p ", result[4] message];
      if (v1[4])
      {
        [v1[5] addProximityiRatClient:];
        CFStringRef v3 = @"Proximity LinkEval Mgr: Initializing WRMWirelessStress Context";
        goto LABEL_24;
      }
      +[WCM_Logging logLevel:27 message:@"updateControllerSession:remove context for (WRMWirelessStress) from Proximity LinkEval Manager "];
      id v8 = (void *)v1[5];
      uint64_t v9 = 18;
      goto LABEL_37;
    case 28:
      +[WCM_Logging logLevel:27, @"Proximity LinkEval Mgr: Received WRMCoreDuet controller event controller %p ", result[4] message];
      if (v1[4])
      {
        [v1[5] addProximityiRatClient:];
        CFStringRef v3 = @"Proximity LinkEval Mgr: Initializing WRMCoreDuet Context";
LABEL_24:
        +[WCM_Logging logLevel:27 message:v3];
      }
      else
      {
        +[WCM_Logging logLevel:27 message:@"updateControllerSession:remove context for (WRMCoreDuet) from Proximity LinkEval Manager "];
        id v8 = (void *)v1[5];
        uint64_t v9 = 19;
LABEL_37:
        [v8 deleteProximityiRATClient:v9];
      }
      goto LABEL_38;
    default:
      if (v2 == 1)
      {
        +[WCM_Logging logLevel:27, @"IDS LinkEval Mgr: Receivd WiFi controller event controller %p", result[4] message];
        int v5 = *(void **)(v1[5] + 24);
        if (v5) {

        }
        *(void *)(v1[5] + 24) = (id)v1[4];
      }
      else
      {
        if (v2 != 4) {
          return result;
        }
        +[WCM_Logging logLevel:27, @"IDS LinkEval Mgr: Receivd BT controller event controller %p", result[4] message];
        BOOL v4 = *(void **)(v1[5] + 32);
        if (v4) {

        }
        *(void *)(v1[5] + 32) = (id)v1[4];
      }
LABEL_38:
      uint64_t v10 = (void *)v1[5];
      uint64_t v11 = v1[6];
      return [v10 handleControllerAvailability:v11];
  }
}

id sub_1000791D4(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleSessionNotification:*(void *)(a1 + 40)];
}

void sub_100079360(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000794F8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100079894(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) isMarconiDevice];
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v3 = [*(id *)(a1 + 32) miRATProximityClientContexts];
  id v4 = [v3 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v22;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v22 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v21 + 1) + 8 * (void)v7);
        if (objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "getSubscriptionType") == (id)1)
        {
          +[WCM_Logging logLevel:27 message:@"Do not evaluate, WiFi versus BT because subscription is for WiFi versus Cellular"];
          goto LABEL_45;
        }
        if (v2)
        {
          if (objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "mForceUpdateNeeded")) {
            goto LABEL_16;
          }
          id v9 = [*(id *)(a1 + 32) canWiFiRadioMeetTerminusRequirementsForCompanionLink:v8];
          unsigned int v10 = [objc_msgSend(v8, "mTerminusContext") mCompanionWifiLinkIsRecommended];
          if (v9)
          {
            if (v10)
            {
LABEL_16:
              id v11 = [*(id *)(a1 + 32) canWiFiRadioMeetTerminusRequirements:v8];
              unsigned int v12 = [objc_msgSend(v8, "mTerminusContext") mDirectWifiLinkIsRecommended];
              if (v11)
              {
                if (v12)
                {
LABEL_21:
                  unsigned int v13 = [*(id *)(a1 + 32) getBTLQMScore];
                  [*(id *)(a1 + 32) updateBTLQMScore];
                  *(unsigned char *)(*(void *)(a1 + 32) + 68) = v13 != [*(id *)(a1 + 32) getBTLQMScore];
                  id v14 = [*(id *)(a1 + 32) canBTMeetTerminusRequirement];
                  unsigned int v15 = [v8 mTerminusContext].mBtLinkIsRecommended;
                  if (v14)
                  {
                    if ((v15 & 1) != 0
                      || ([*(id *)(a1 + 32) isPingPongAvoidanceTimerSatisfied:v8] & 1) == 0
                      && !objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "mForceUpdateNeeded"))
                    {
                      goto LABEL_30;
                    }
                  }
                  else if (!v15 {
                         || ([*(id *)(a1 + 32) isPingPongAvoidanceTimerSatisfied:v8] & 1) == 0
                  }
                         && (objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "mForceUpdateNeeded") & 1) == 0)
                  {
                    goto LABEL_30;
                  }
                  [objc_msgSend(v8, "mTerminusContext") setMBtLinkIsRecommended:v14];
                  [objc_msgSend(v8, "mTerminusContext") setMBtLinkRecommendationUpdateNeeded:1];
LABEL_30:
                  if ([*(id *)(*(void *)(a1 + 32) + 32) isBTMetricsValid])
                  {
                    [objc_msgSend(v8, "mTerminusContext") setBtMovingAvgRSSI:objc_msgSend(*(id *)(*(void *)(a1 + 32) + 32), "getMovingAvgBTRssi")];
                    [*(id *)(*(void *)(a1 + 32) + 32) getBtTxPer];
                    [objc_msgSend(v8, "mTerminusContext") setBtRetransmissionRateTx:(uint64_t)(v16 * 100.0)];
                    [*(id *)(*(void *)(a1 + 32) + 32) getBtRxPer];
                    [objc_msgSend(v8, "mTerminusContext") setBtRetransmissionRateRx:(uint64_t)(v17 * 100.0)];
                    [objc_msgSend(v8, "mTerminusContext") setBtTech:[objc_msgSend(*(id *)(*(void *)(a1 + 32) + 32), "getBtActivePhy")]];
                  }
                  if (objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "mIsRetry"))
                  {
                    [objc_msgSend(v8, "mTerminusContext") setMDirectWifiLinkIsRecommended:0];
                    [objc_msgSend(v8, "mTerminusContext") setMDirectWifiLinkRecommendationUpdateNeeded:1];
                  }
                  if (objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "mForceUpdateNeeded")
                    && (objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "mBtLinkIsRecommended") & 1) == 0
                    && (objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "mDirectWifiLinkIsRecommended") & 1) == 0
                    && [*(id *)(a1 + 32) canWiFiRadioMeetMinRequirements])
                  {
                    +[WCM_Logging logLevel:27 message:@"Go ahead and recommend Direct Wifi since BT is very weak and Wifi is acceptable, but not great"];
                    [objc_msgSend(v8, "mTerminusContext") setMDirectWifiLinkIsRecommended:1];
                    [objc_msgSend(v8, "mTerminusContext") setMDirectWifiLinkRecommendationUpdateNeeded:1];
                  }
                  goto LABEL_39;
                }
              }
              else if (!v12)
              {
                goto LABEL_21;
              }
              [objc_msgSend(v8, "mTerminusContext") setMDirectWifiLinkIsRecommended:v11];
              [objc_msgSend(v8, "mTerminusContext") setMDirectWifiLinkRecommendationUpdateNeeded:1];
              goto LABEL_21;
            }
          }
          else if (!v10)
          {
            goto LABEL_16;
          }
          [objc_msgSend(v8, "mTerminusContext") setMCompanionWifiLinkIsRecommended:v9];
          [objc_msgSend(v8, "mTerminusContext") setMCompanionWifiLinkRecommendationUpdateNeeded:1];
          goto LABEL_16;
        }
        +[WCM_Logging logLevel:27 message:@"Go ahead and recommend all links as TRUE on non marconi watch"];
        [objc_msgSend(v8, "mTerminusContext") setMBtLinkIsRecommended:1];
        [objc_msgSend(v8, "mTerminusContext") setMDirectWifiLinkIsRecommended:1];
        [objc_msgSend(v8, "mTerminusContext") setMCompanionWifiLinkIsRecommended:1];
LABEL_39:
        BOOL v18 = (objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "mBtLinkRecommendationUpdateNeeded") & 1) != 0
           || (objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "mCompanionWifiLinkRecommendationUpdateNeeded") & 1) != 0|| (objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "mDirectWifiLinkRecommendationUpdateNeeded") & 1) != 0|| objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "mForceUpdateNeeded");
        [objc_msgSend(v8, "mTerminusContext") setLinkPreferenceNotificationRequired:v18];
        [v8 handleLinkPreferenceNotificationTerminus];
LABEL_45:
        uint64_t v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v19 = [v3 countByEnumeratingWithState:&v21 objects:v25 count:16];
      id v5 = v19;
    }
    while (v19);
  }
  return [*(id *)(a1 + 32) postBluetoothLQMScore:0];
}

void sub_10007A048(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10007A8EC(uint64_t a1)
{
  *(_DWORD *)(*(void *)(a1 + 32) + 72) = *(_DWORD *)(*(void *)(a1 + 32) + 76);
  if (![*(id *)(a1 + 32) homeKitReportingTimer]) {
    [*(id *)(a1 + 32) setHomeKitReportingTimer:+[NSTimer scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:](NSTimer, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", *(void *)(a1 + 32), "timerHandler:", 0, 1, *(double *)(a1 + 40))];
  }
  id result = [*(id *)(a1 + 32) homeKitReportingTimer];
  if (result)
  {
    id v3 = +[NSRunLoop currentRunLoop];
    id v4 = [*(id *)(a1 + 32) homeKitReportingTimer];
    return [(NSRunLoop *)v3 addTimer:v4 forMode:NSDefaultRunLoopMode];
  }
  return result;
}

void sub_10007B4F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007B70C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007B824(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007BE88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007BF94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007C1C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10007C318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10007C404(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007C4AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007C4BC(void *a1)
{
  xpc_object_t object = a1;
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_string)
  {
    +[WCM_Logging logLevel:0, @"parse_xpc_msg(str) = %s", xpc_string_get_string_ptr(object) message];
    goto LABEL_17;
  }
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_double)
  {
    +[WCM_Logging logLevel:0, @"parse_xpc_msg(double) = %f", xpc_double_get_value(object) message];
    goto LABEL_17;
  }
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_int64)
  {
    uint64_t value = xpc_int64_get_value(object);
    CFStringRef v3 = @"parse_xpc_msg(int64) = 0x%llx";
LABEL_16:
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 0, v3, value);
    goto LABEL_17;
  }
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_uint64)
  {
    uint64_t value = xpc_uint64_get_value(object);
    CFStringRef v3 = @"parse_xpc_msg(uint64) = 0x%llx";
    goto LABEL_16;
  }
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_BOOL)
  {
    +[WCM_Logging logLevel:0, @"parse_xpc_msg(BOOL) = 0x%x", xpc_BOOL_get_value(object) message];
  }
  else if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_data)
  {
    size_t length = xpc_data_get_length(object);
    bytes_ptr = (unsigned __int8 *)xpc_data_get_bytes_ptr(object);
    uint64_t v6 = malloc_type_malloc((2 * length) | 1, 0x100004077774924uLL);
    uint64_t v7 = v6;
    *((unsigned char *)v6 + 2 * length) = 0;
    if (length)
    {
      id v8 = (char *)v6;
      do
      {
        int v9 = *bytes_ptr++;
        sprintf(v8, "%02x", v9);
        v8 += 2;
        --length;
      }
      while (length);
    }
    +[WCM_Logging logLevel:0, @"parse_xpc_msg(data..) = 0x%s", v7 message];
    free(v7);
  }
  else if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_array)
  {
    size_t count = xpc_array_get_count(object);
    syslog(6, "uint64_t value = ");
    if (count)
    {
      for (size_t i = 0; i != count; ++i)
      {
        unsigned int v12 = __stderrp;
        unsigned __int8 uint64 = xpc_array_get_uint64(object, i);
        fprintf(v12, "%02X", uint64);
      }
    }
    fputc(10, __stderrp);
  }
  else
  {
    if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_null) {
      CFStringRef v1 = @"parse_xpc_msg- Rcvd XPC_type of NULL Type";
    }
    else {
      CFStringRef v1 = @"parse_xpc_msg- Rcvd XPC_type not handled";
    }
    +[WCM_Logging logLevel:0 message:v1];
  }
LABEL_17:
}

void sub_10007C7C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100082AF4(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 76);
  return result;
}

id sub_100082B90(uint64_t a1)
{
  id result = +[WCM_Logging logLevel:24, @"setLowPowerModePeriodicWakeUpNotificationSubscribed to %d", *(unsigned __int8 *)(a1 + 40) message];
  *(unsigned char *)(*(void *)(a1 + 32) + 76) = *(unsigned char *)(a1 + 40);
  return result;
}

uint64_t sub_100082C90(uint64_t a1)
{
  qword_10027D0A0 = (uint64_t)objc_alloc_init(*(Class *)(a1 + 32));

  return _objc_release_x1();
}

void sub_100082E78(uint64_t a1, void *a2)
{
  id v3 = a2;
  +[WCM_Logging logLevel:24, @"BTBeacon Controller::CBDiscovery: Device found or updated: %@", v3 message];
  [*(id *)(a1 + 32) onBleBeaconReceived:v3];
}

void sub_100082EE4(id a1, CBDevice *a2)
{
}

id sub_100082F1C(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return +[WCM_Logging logLevel:24, @"BTBeacon Controller::CBDiscovery: Error: %@", a2 message];
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 16) = 1;

  return +[WCM_Logging logLevel:24 message:@"BTBeacon Controller::CBDiscovery: Activated Successfully"];
}

void sub_100083888(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const char *sub_1000838DC(unsigned int a1)
{
  if (a1 > 2) {
    return "???";
  }
  else {
    return off_10020F2B0[a1];
  }
}

const char *sub_100083900(int a1)
{
  if (a1 <= 99)
  {
    id result = "kEX_NULL_BEARER";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        id result = "kEX_3GPP_WCDMA";
        break;
      case 2:
        id result = "kEX_3GPP_GERAN";
        break;
      case 3:
        id result = "kEX_3GPP_LTE";
        break;
      case 4:
        id result = "kEX_3GPP_TDSCDMA";
        break;
      case 5:
        id result = "kEX_3GPP_WLAN";
        break;
      case 6:
        id result = "kEX_3GPP_5G";
        break;
      default:
        return "???";
    }
  }
  else if (a1 > 199)
  {
    switch(a1)
    {
      case 200:
        return "kEX_3GPP2_MAX";
      case 201:
        return "kEX_WLAN";
      case 300:
        return "kEX_WLAN_MAX";
      default:
        return "???";
    }
  }
  else
  {
    switch(a1)
    {
      case 'd':
        id result = "kEX_3GPP_MAX";
        break;
      case 'e':
        id result = "kEX_3GPP2_1X";
        break;
      case 'f':
        id result = "kEX_3GPP2_HRPD";
        break;
      case 'g':
        id result = "kEX_3GPP2_EHRPD";
        break;
      case 'h':
        id result = "kEX_3GPP2_WLAN";
        break;
      default:
        return "???";
    }
  }
  return result;
}

const char *sub_100083A70(const mach_header_64 *a1)
{
  if ((uint64_t)a1 >= 0x20000)
  {
    if ((uint64_t)a1 <= 0xFFFFFFFFLL)
    {
      if ((uint64_t)a1 <= 0x7FFFFFF)
      {
        if ((uint64_t)a1 > 0x1FFFFFF)
        {
          if (a1 == (const mach_header_64 *)0x2000000) {
            return "k3GPP2_1X_IS2000";
          }
          if (a1 == (const mach_header_64 *)0x4000000) {
            return "k3GPP2_1X_IS2000_REL_A";
          }
        }
        else
        {
          if (a1 == (const mach_header_64 *)0x20000) {
            return "k3GPP_LTE_CA_UL";
          }
          if (a1 == (const mach_header_64 *)0x1000000) {
            return "k3GPP2_1X_IS95";
          }
        }
      }
      else if ((uint64_t)a1 <= 0x1FFFFFFF)
      {
        if (a1 == (const mach_header_64 *)0x8000000) {
          return "k3GPP2_HDR_REV0_DPA";
        }
        if (a1 == (const mach_header_64 *)0x10000000) {
          return "k3GPP2_HDR_REVA_DPA";
        }
      }
      else
      {
        if (a1 == (const mach_header_64 *)0x20000000) {
          return "k3GPP2_HDR_REVB_DPA";
        }
        if (a1 == (const mach_header_64 *)0x40000000) {
          return "k3GPP2_HDR_REVA_MPA";
        }
        if (a1 == (const mach_header_64 *)0x80000000) {
          return "k3GPP2_HDR_REVB_MPA";
        }
      }
    }
    else if ((uint64_t)a1 > 0xFFFFFFFFFFLL)
    {
      if ((uint64_t)a1 <= 0x3FFFFFFFFFFLL)
      {
        if (a1 == (const mach_header_64 *)0x10000000000) {
          return "k3GPP_5G_TDD";
        }
        if (a1 == (const mach_header_64 *)0x20000000000) {
          return "k3GPP_5G_SUB6";
        }
      }
      else
      {
        if (a1 == (const mach_header_64 *)0x40000000000) {
          return "k3GPP_5G_MMWAVE";
        }
        if (a1 == (const mach_header_64 *)0x80000000000) {
          return "k3GPP_5G_NSA";
        }
        if (a1 == (const mach_header_64 *)0x100000000000) {
          return "k3GPP_5G_SA";
        }
      }
    }
    else if ((uint64_t)a1 <= 0x3FFFFFFFFLL)
    {
      if (a1 == &_mh_execute_header) {
        return "k3GPP2_HDR_REVA_EMPA";
      }
      if (a1 == (const mach_header_64 *)0x200000000) {
        return "k3GPP2_HDR_REVB_EMPA";
      }
    }
    else
    {
      if (a1 == (const mach_header_64 *)0x400000000) {
        return "k3GPP2_HDR_REVB_MMPA";
      }
      if (a1 == (const mach_header_64 *)0x800000000) {
        return "k3GPP2_HDR_EVDO_FMC";
      }
      if (a1 == (const mach_header_64 *)0x1000000000) {
        return "k3GPP2_1X_CS";
      }
    }
    return "<unknown mask, probably a composite mask>";
  }
  if ((uint64_t)a1 > 255)
  {
    if ((uint64_t)a1 <= 4095)
    {
      if ((uint64_t)a1 > 1023)
      {
        if (a1 == (const mach_header_64 *)1024) {
          return "k3GPP_S2B";
        }
        if (a1 == (const mach_header_64 *)2048) {
          return "k3GPP_LTE_LIMITED";
        }
      }
      else
      {
        if (a1 == (const mach_header_64 *)256) {
          return "k3GPP_EDGE";
        }
        if (a1 == (const mach_header_64 *)512) {
          return "k3GPP_GSM";
        }
      }
    }
    else if ((uint64_t)a1 < 0x4000)
    {
      if (a1 == (const mach_header_64 *)4096) {
        return "k3GPP_LTE_FDD";
      }
      if (a1 == (const mach_header_64 *)0x2000) {
        return "k3GPP_LTE_TDD";
      }
    }
    else
    {
      if (a1 == (const mach_header_64 *)0x4000) {
        return "k3GPP_TDSCDMA";
      }
      if (a1 == (const mach_header_64 *)0x8000) {
        return "k3GPP_DC_HSUPA";
      }
      if (a1 == (const mach_header_64 *)0x10000) {
        return "k3GPP_LTE_CA_DL";
      }
    }
    return "<unknown mask, probably a composite mask>";
  }
  if ((uint64_t)a1 > 15)
  {
    if ((uint64_t)a1 > 63)
    {
      if (a1 == (const mach_header_64 *)64) {
        return "k3GPP_HSPA";
      }
      if (a1 == (const mach_header_64 *)128) {
        return "k3GPP_GPRS";
      }
    }
    else
    {
      if (a1 == (const mach_header_64 *)16) {
        return "k3GPP_DC_HSDPAPLUS";
      }
      if (a1 == (const mach_header_64 *)32) {
        return "k3GPP_64_QAM";
      }
    }
    return "<unknown mask, probably a composite mask>";
  }
  CFStringRef v1 = "kUnspecified";
  switch((unint64_t)a1)
  {
    case 0uLL:
      return v1;
    case 1uLL:
      CFStringRef v1 = "k3GPP_WCDMA";
      break;
    case 2uLL:
      CFStringRef v1 = "k3GPP_HSDPA";
      break;
    case 4uLL:
      CFStringRef v1 = "k3GPP_HSUPA";
      break;
    case 8uLL:
      CFStringRef v1 = "k3GPP_HSDPAPLUS";
      break;
    default:
      return "<unknown mask, probably a composite mask>";
  }
  return v1;
}

const char *sub_100083E58(int a1)
{
  if ((a1 - 1) > 2) {
    return "???";
  }
  else {
    return off_10020F2C8[a1 - 1];
  }
}

const char *sub_100083E80(int a1)
{
  CFStringRef v1 = "???";
  if (a1 == 1) {
    CFStringRef v1 = "kTemporary";
  }
  if (a1) {
    return v1;
  }
  else {
    return "kPermanent";
  }
}

const char *sub_100083EAC(unsigned int a1)
{
  if (a1 > 2) {
    return "???";
  }
  else {
    return off_10020F2E0[a1];
  }
}

const char *sub_100083ED0(uint64_t a1)
{
  id result = "kUnspecified";
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      id result = "k3GPP5gBasic";
      break;
    case 2:
      id result = "k3GPP5gUltraWideBand";
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      goto LABEL_5;
    case 4:
      id result = "k3GPP5gSib2PlmnR15";
      break;
    case 8:
      id result = "k3GPPSib2UpperLayer";
      break;
    default:
      if (a1 == 16) {
        id result = "k3GPPRestrictDecodedChannelNumberRegister";
      }
      else {
LABEL_5:
      }
        id result = "???";
      break;
  }
  return result;
}

const char *sub_100083F78(uint64_t a1)
{
  if (a1 > 31)
  {
    if (a1 > 255)
    {
      switch(a1)
      {
        case 256:
          return "kInitialAttach";
        case 512:
          return "kEmergency";
        case 2048:
          return "kMissionCriticalSrv";
      }
    }
    else
    {
      switch(a1)
      {
        case 32:
          return "kHighPriorityData";
        case 64:
          return "kOverTheAirAdmin";
        case 128:
          return "kCarrierBrandedSrv";
      }
    }
    return "???";
  }
  else
  {
    id result = "kUnSpecified";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        id result = "kDefaultInternet";
        break;
      case 2:
        id result = "kIMS";
        break;
      case 3:
      case 5:
      case 6:
      case 7:
        return "???";
      case 4:
        id result = "kMMS";
        break;
      case 8:
        id result = "kDialUpNetwork";
        break;
      default:
        if (a1 != 16) {
          return "???";
        }
        id result = "kSupl";
        break;
    }
  }
  return result;
}

const char *sub_1000840A8(uint64_t a1)
{
  if (a1 > 15)
  {
    if (a1 > 63)
    {
      if (a1 == 64) {
        return "kCircuitSwitchedOnly";
      }
      if (a1 == 128) {
        return "kAttachPending";
      }
    }
    else
    {
      if (a1 == 16) {
        return "kVoiceOnOtherSubscription";
      }
      if (a1 == 32) {
        return "kSingleRadioVoiceCallContinuity";
      }
    }
    return "???";
  }
  else
  {
    id result = "kUnspecified";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        id result = "kCircuitSwitchedFallBack";
        break;
      case 2:
        id result = "kOutOfService";
        break;
      case 4:
        id result = "kLimitedService";
        break;
      case 8:
        id result = "kVoiceOnSameSubscription";
        break;
      default:
        return "???";
    }
  }
  return result;
}

const char *sub_10008419C(unsigned int a1)
{
  if (a1 > 7) {
    return "???";
  }
  else {
    return off_10020F2F8[a1];
  }
}

const char *sub_1000841C0(unsigned int a1)
{
  if (a1 > 5) {
    return "???";
  }
  else {
    return off_10020F338[a1];
  }
}

const char *sub_1000841E4(unsigned int a1)
{
  if (a1 > 5) {
    return "???";
  }
  else {
    return off_10020F368[a1];
  }
}

id sub_100084260()
{
  id result = (id)MKBGetDeviceLockState();
  if (result != 3)
  {
    BOOL v1 = sub_10008455C();
    byte_10027CB60 = v1;
    +[WCM_Logging logLevel:24, @"Received handleDeviceLockChangedNotification event,unlock:%d", v1 message];
    int v2 = byte_10027CB60;
    id v3 = +[WRM_HandoverManager WRM_HandoverManagerSingleton];
    if (v2) {
      uint64_t v4 = 2;
    }
    else {
      uint64_t v4 = 1;
    }
    return [v3 postBBNotification:v4 :0];
  }
  return result;
}

id sub_1000843E8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) notifyScreenStatePassCodeNotEnabled:a2];
}

BOOL sub_10008455C()
{
  return MKBGetDeviceLockState() == 3 || MKBGetDeviceLockState() - 3 < 0xFFFFFFFE;
}

uint64_t start()
{
  id v1 = +[WCM_Server singleton];
  if (objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "iRATSupported"))
  {
    +[WRM_HandoverManager WRM_HandoverManagerSingleton];
    +[WCM_Logging reloadiRATSettingsFromPreferences];
  }
  [v1 startService];
  [+[NSRunLoop currentRunLoop] run];
  return 0;
}

id sub_100085A74(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  qword_10027D0B0 = (uint64_t)v1;

  return [v1 registerForCellularDataLQM];
}

id sub_100085EB4(const __SCDynamicStore *a1)
{
  +[WCM_Logging logLevel:22 message:@"updateCellularDataLQM called"];
  id v2 = [[+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton") getSCService];
  unsigned int valuePtr = [v2 getCellularDataLQM];
  id v3 = (const void *)kSCEntNetLinkQuality;
  CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(kCFAllocatorDefault, kSCDynamicStoreDomainState, @"pdp_ip0", kSCEntNetLinkQuality);
  CFDictionaryRef v5 = (const __CFDictionary *)SCDynamicStoreCopyValue(a1, NetworkInterfaceEntity);
  CFDictionaryRef v6 = v5;
  if (v5)
  {
    CFTypeID v7 = CFGetTypeID(v5);
    if (v7 == CFDictionaryGetTypeID())
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v6, v3);
      if (Value)
      {
        CFNumberRef v9 = Value;
        CFTypeID v10 = CFGetTypeID(Value);
        if (v10 == CFNumberGetTypeID()) {
          CFNumberGetValue(v9, kCFNumberIntType, &valuePtr);
        }
      }
    }
  }
  if (NetworkInterfaceEntity) {
    CFRelease(NetworkInterfaceEntity);
  }
  if (v6) {
    CFRelease(v6);
  }
  [v2 setCellularDataLQM:valuePtr];
  return +[WCM_Logging logLevel:22, @"Rcvd Data LQM from updateCellularDataLQM: %d", valuePtr message];
}

void sub_100086170(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000861DC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10008635C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100086460(uint64_t a1, char a2, void *a3)
{
  +[WCM_Logging logLevel:22 message:@"Inside radioPreferencesChanged"];
  id v5 = [[+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton") getSCService];
  if ((a2 & 2) == 0)
  {
    CFStringRef v6 = @"return radioPreferencesChanged:no preference changed";
LABEL_3:
    +[WCM_Logging logLevel:22 message:v6];
    return;
  }
  CFTypeID v7 = v5;
  if ([a3 isEqualToString:@"AirplaneMode"])
  {
    [v7 getAirPlaneMode];
    [[+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton") getCTService] resetMovAverageOfSignalBar];
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"radioPreferencesChanged: AirplaneMode is %d", [v7 isAirPlaneModeEnabled]);
    id v8 = (const __SCPreferences *)[v7 getAPMHandle];
  }
  else
  {
    if (![a3 isEqualToString:@"TelephonyState"])
    {
      if ([a3 isEqualToString:@"WiFi"])
      {
        [v7 getWiFiMode];
        SCPreferencesSynchronize((SCPreferencesRef)[v7 getWiFiHandle]);
        dispatch_time_t v9 = dispatch_time(0, 3000000000);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_100086954;
        block[3] = &unk_10020D980;
        void block[4] = v7;
        dispatch_after(v9, (dispatch_queue_t)[+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton") getQueue], block);
        return;
      }
      CFStringRef v6 = @"Notification recevied for unsupported preference";
      goto LABEL_3;
    }
    [v7 getTelephonyMode];
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"radioPreferencesChanged: Telephony Mode is %d", [v7 isTelephonyEnabled]);
    id v8 = (const __SCPreferences *)[v7 getTelephonyHandle];
  }

  SCPreferencesSynchronize(v8);
}

id sub_1000868DC(uint64_t a1)
{
  [+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton") toggleSAState:[*(id *)(a1 + 32) isWiFiPrimary]];
  id result = [*(id *)(a1 + 32) isWiFiUsingCarPlay];
  *(unsigned char *)(*(void *)(a1 + 32) + 59) = (_BYTE)result;
  return result;
}

id sub_100086954(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) isWiFiPrimary];
  [WCM_Logging logLevel:22 message:@"radioPreferencesChanged: WiFi Mode changed, wifiState: %d, WiFi primary: %d", [*(id *)(a1 + 32) isWiFiEnabled], objc_msgSend(*(id *)(a1 + 32), "isWiFiPrimary")];
  id v3 = +[WRM_HandoverManager WRM_HandoverManagerSingleton];

  return [v3 toggleSAState:v2];
}

id sub_100086BC8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) handleEvent:a2];
}

id sub_100086C48(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleXPCEvent:*(void *)(a1 + 40)];
}

void sub_100086F7C(uint64_t a1, uint64_t a2)
{
}

void sub_100086F8C(uint64_t a1)
{
}

id sub_100086F98(uint64_t a1)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v2 = *(void **)(*(void *)(a1 + 32) + 16);
  id result = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (result)
  {
    id v4 = result;
    uint64_t v5 = *(void *)v9;
    while (2)
    {
      CFStringRef v6 = 0;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        CFTypeID v7 = *(void **)(*((void *)&v8 + 1) + 8 * (void)v6);
        id result = [v7 getProcessId];
        if (result == *(_DWORD *)(a1 + 48))
        {
          *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = v7;
          return result;
        }
        CFStringRef v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id result = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
      id v4 = result;
      if (result) {
        continue;
      }
      break;
    }
  }
  return result;
}

id sub_100087618(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) handleAWDLRealTimeMode:a2];
}

void sub_100087E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  long long v21 = v19;

  _Unwind_Resume(a1);
}

void sub_100087EF8(uint64_t a1)
{
  id v2 = +[NSFetchRequest fetchRequestWithEntityName:@"CellStationProperties"];
  if (v2)
  {
    id v3 = +[NSPredicate predicateWithFormat:@"%K == %@", @"gci", *(void *)(a1 + 32)];
    [v2 setPredicate:v3];

    [v2 setResultType:4];
    [v2 setFetchLimit:1];
    id v4 = [[*(id *)(a1 + 40) private_queue_context];
    id v13 = 0;
    uint64_t v5 = [v4 executeFetchRequest:v2 error:&v13];
    id v6 = v13;

    +[WCM_Logging logLevel:22 message:@"CellStationManager: Created fetch request"];
    CFTypeID v7 = [v5 firstObject];
    id v8 = [v7 BOOLValue];

    if (v8) {
      CFStringRef v9 = @"CellStationManager: The given cellID %@ is FR2 Capable";
    }
    else {
      CFStringRef v9 = @"CellStationManager: The given cellID %@ is not FR2 Capable";
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, v9, *(void *)(a1 + 32));
    long long v10 = [[*(id *)(a1 + 40) private_queue_context];
    [v10 reset];

    uint64_t v11 = *(void *)(a1 + 48);
    if (v11) {
      (*(void (**)(uint64_t, id))(v11 + 16))(v11, v8);
    }
  }
  else
  {
    +[WCM_Logging logLevel:22 message:@"CellStationManager: Error creating fetch request"];
    uint64_t v12 = *(void *)(a1 + 48);
    if (v12) {
      (*(void (**)(uint64_t, void))(v12 + 16))(v12, 0);
    }
  }
}

void sub_1000880B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000882DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000883D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL sub_1000883EC(uint64_t a1)
{
  return a1 == 2;
}

const char *sub_1000883F8(unint64_t a1)
{
  if (a1 > 2) {
    return "CTSubscriptionSlotUnknown";
  }
  else {
    return (&off_10020F4C8)[a1];
  }
}

const char *sub_10008841C(int a1)
{
  int v1 = a1 - 1;
  id result = "IBI_RAT_GSM";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      id result = "IBI_RAT_UMTS";
      break;
    case 2:
      id result = "IBI_RAT_LTE";
      break;
    case 3:
      id result = "IBI_RAT_CDMA_1x";
      break;
    case 4:
      id result = "IBI_RAT_CDMA_EVDO";
      break;
    case 5:
      id result = "IBI_RAT_HYBRID_1xEVDO";
      break;
    case 6:
      id result = "IBI_RAT_SRLTE_1xLTE";
      break;
    case 7:
      id result = "IBI_RAT_NR";
      break;
    default:
      if ("IBI_RAT_GSM" == 0x7FFFFFFF) {
        id result = "IBIRat_ARM41_INT_ENFORCE";
      }
      else {
        id result = "IBI_RAT_NOT_AVAILABLE";
      }
      break;
  }
  return result;
}

uint64_t sub_1000884E4(double a1, double a2, double a3)
{
  return ((int)((a1 + a2) / a3 + 1.0) & ~((int)((a1 + a2) / a3 + 1.0) >> 31));
}

uint64_t sub_100088504(double a1)
{
  if (((int)(a1 + 110.0 + 1.0) & ~((int)(a1 + 110.0 + 1.0) >> 31)) >= 0x3Fu) {
    return 63;
  }
  else {
    return ((int)(a1 + 110.0 + 1.0) & ~((int)(a1 + 110.0 + 1.0) >> 31));
  }
}

uint64_t sub_100088534(double a1)
{
  if (((int)(a1 + 120.0 + 1.0) & ~((int)(a1 + 120.0 + 1.0) >> 31)) >= 0x60u) {
    return 96;
  }
  else {
    return ((int)(a1 + 120.0 + 1.0) & ~((int)(a1 + 120.0 + 1.0) >> 31));
  }
}

uint64_t sub_100088564(double a1)
{
  if (((int)(a1 + 24.0 + a1 + 24.0 + 1.0) & ~((int)(a1 + 24.0 + a1 + 24.0 + 1.0) >> 31)) >= 0x31u) {
    return 49;
  }
  else {
    return ((int)(a1 + 24.0 + a1 + 24.0 + 1.0) & ~((int)(a1 + 24.0 + a1 + 24.0 + 1.0) >> 31));
  }
}

uint64_t sub_100088594(double a1)
{
  if (((int)(a1 + 31.0 + a1 + 31.0 + 1.0) & ~((int)(a1 + 31.0 + a1 + 31.0 + 1.0) >> 31)) >= 0x3Eu) {
    return 62;
  }
  else {
    return ((int)(a1 + 31.0 + a1 + 31.0 + 1.0) & ~((int)(a1 + 31.0 + a1 + 31.0 + 1.0) >> 31));
  }
}

uint64_t sub_1000885C4(double a1)
{
  if (((int)(a1 + 19.5 + a1 + 19.5 + 1.0) & ~((int)(a1 + 19.5 + a1 + 19.5 + 1.0) >> 31)) >= 0x22u) {
    return 34;
  }
  else {
    return ((int)(a1 + 19.5 + a1 + 19.5 + 1.0) & ~((int)(a1 + 19.5 + a1 + 19.5 + 1.0) >> 31));
  }
}

uint64_t sub_1000885F8(double a1)
{
  if (((int)(a1 + 140.0 + 1.0) & ~((int)(a1 + 140.0 + 1.0) >> 31)) >= 0x61u) {
    return 97;
  }
  else {
    return ((int)(a1 + 140.0 + 1.0) & ~((int)(a1 + 140.0 + 1.0) >> 31));
  }
}

uint64_t sub_100088628(double a1)
{
  int v1 = (int)(a1 + a1);
  if (v1 >= 100) {
    int v1 = 100;
  }
  if (v1 <= -100) {
    return 4294967196;
  }
  else {
    return v1;
  }
}

uint64_t sub_10008864C(double a1)
{
  if (((int)(a1 + 10.0 + a1 + 10.0 + 1.0) & ~((int)(a1 + 10.0 + a1 + 10.0 + 1.0) >> 31)) >= 0x3Cu) {
    return 60;
  }
  else {
    return ((int)(a1 + 10.0 + a1 + 10.0 + 1.0) & ~((int)(a1 + 10.0 + a1 + 10.0 + 1.0) >> 31));
  }
}

double sub_10008867C(int a1, double a2, double a3)
{
  return -(a2 - (double)(a1 - 1) * a3);
}

double sub_10008868C(int a1)
{
  return (double)(a1 - 111);
}

double sub_100088698(int a1)
{
  return (double)(a1 - 121);
}

double sub_1000886A4(int a1)
{
  return (double)(a1 - 1) * 0.5 + -24.0;
}

double sub_1000886BC(int a1)
{
  return (double)(a1 - 1) * 0.5 + -31.0;
}

double sub_1000886D4(int a1)
{
  return (double)(a1 - 1) * 0.5 + -19.5;
}

double sub_1000886F0(int a1)
{
  return (double)(a1 - 141);
}

double sub_1000886FC(int a1)
{
  return (double)a1 * 0.5;
}

double sub_10008870C(int a1)
{
  return (double)(a1 - 1) * 0.5 + -10.0;
}

uint64_t sub_100088724(double a1, double a2)
{
  unsigned int v2 = (int)(a1 / a2);
  if (v2 <= 1) {
    return 1;
  }
  else {
    return v2;
  }
}

uint64_t sub_100088738(double a1)
{
  if ((int)a1 <= 1) {
    return 1;
  }
  else {
    return (int)a1;
  }
}

uint64_t sub_100088748(double a1)
{
  unsigned int v1 = (int)(a1 + a1);
  if (v1 <= 1) {
    return 1;
  }
  else {
    return v1;
  }
}

uint64_t sub_10008875C(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 **)(a1 + 72);
  if (v1)
  {
    LODWORD(v1) = *v1;
    if (v1 == 99 || (unsigned int v2 = *(_DWORD **)(a1 + 88)) != 0 && *v2 < (int)v1)
    {
      int v3 = 0;
      LODWORD(v1) = 0;
    }
    else
    {
      int v3 = 1;
    }
  }
  else
  {
    int v3 = 0;
  }
  return v1 | (v3 << 8);
}

uint64_t sub_1000887A4(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 **)(a1 + 80);
  if (v1)
  {
    LODWORD(v1) = *v1;
    if (v1 == 99 || (unsigned int v2 = *(_DWORD **)(a1 + 96)) != 0 && *v2 < (int)v1)
    {
      int v3 = 0;
      LODWORD(v1) = 0;
    }
    else
    {
      int v3 = 1;
    }
  }
  else
  {
    int v3 = 0;
  }
  return v1 | (v3 << 8);
}

const char *sub_1000887EC(unsigned int a1)
{
  if (a1 > 8) {
    return "Invalid RAT";
  }
  else {
    return (&off_10020F4E0)[a1];
  }
}

double sub_100088810(int a1, int a2)
{
  double result = 0.0;
  switch(a2)
  {
    case 1:
    case 4:
    case 5:
      int v3 = a1 - 111;
      goto LABEL_5;
    case 2:
      int v3 = a1 - 121;
      goto LABEL_5;
    case 3:
    case 8:
      int v3 = a1 - 141;
LABEL_5:
      double result = (double)v3;
      break;
    default:
      return result;
  }
  return result;
}

const char *sub_10008887C(unsigned int a1)
{
  if (a1 > 8) {
    return "Invalid RAT";
  }
  else {
    return (&off_10020F528)[a1];
  }
}

double sub_1000888A0(int a1, int a2)
{
  switch(a2)
  {
    case 2:
      double v2 = (double)(a1 - 1);
      double v3 = -24.0;
      goto LABEL_6;
    case 3:
    case 8:
      double v2 = (double)(a1 - 1);
      double v3 = -19.5;
      goto LABEL_6;
    case 4:
      double v2 = (double)(a1 - 1);
      double v3 = -31.0;
      goto LABEL_6;
    case 5:
      double v2 = (double)(a1 - 1);
      double v3 = -10.0;
LABEL_6:
      double result = v3 + v2 * 0.5;
      break;
    default:
      double result = 0.0;
      break;
  }
  return result;
}

unsigned char *sub_10008893C(unsigned char *a1, char a2)
{
  *a1 = a2;
  return a1 + 1;
}

char *sub_100088944(tlv *a1, const unsigned __int8 *a2, _DWORD *a3, unint64_t a4)
{
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

_DWORD *sub_10008897C(_DWORD *a1, int a2)
{
  *a1 = a2;
  return a1 + 1;
}

uint64_t sub_100088984(uint64_t a1, const unsigned __int8 *a2, _DWORD *a3, unint64_t a4)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4, a4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4, v7);
  a3[1] = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

_DWORD *sub_1000889E0(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

uint64_t sub_1000889F8(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = *a1;
  id v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)4, a4);
  unsigned int v7 = *(_DWORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 4), v6, (const unsigned __int8 *)4, v8);
  uint64_t v9 = *((unsigned int *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 8);
  return (v9 << 32) | v7;
}

void sub_100088A68(void *a1)
{
  __cxa_begin_catch(a1);
  *unsigned int v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100088A50);
}

_DWORD **sub_100088A7C(_DWORD **result, _DWORD *a2)
{
  double v2 = *result;
  *double v2 = *a2;
  v2[1] = a2[1];
  *double result = v2 + 2;
  return result;
}

char *sub_100088A9C(tlv *a1, const unsigned __int8 *a2, void *a3, unint64_t a4)
{
  *a3 = *(void *)a1;
  return (char *)a1 + 8;
}

void *sub_100088AD4(void *a1, void *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t sub_100088AE0(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)8, a4);
  uint64_t result = *(void *)v5;
  *a1 = (tlv *)((char *)v5 + 8);
  return result;
}

void sub_100088B1C(void *a1)
{
  __cxa_begin_catch(a1);
  *unsigned int v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100088B10);
}

void **sub_100088B30(void **result, void *a2)
{
  double v2 = *result;
  *double v2 = *a2;
  *uint64_t result = v2 + 1;
  return result;
}

uint64_t sub_100088B44(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = *a1;
  id v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1, a4);
  int v7 = *(unsigned __int8 *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 1), v6, (const unsigned __int8 *)1, v8);
  int v9 = *((unsigned __int8 *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 2);
  return v7 | (v9 << 8);
}

void sub_100088BAC(void *a1)
{
  __cxa_begin_catch(a1);
  *unsigned int v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100088B98);
}

uint64_t sub_100088BC0(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = *a1;
  id v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1, a4);
  int v7 = *(unsigned __int8 *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 1), v6, (const unsigned __int8 *)1, v8);
  int v9 = *((unsigned __int8 *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 2);
  return v7 | (v9 << 8);
}

void sub_100088C28(void *a1)
{
  __cxa_begin_catch(a1);
  *unsigned int v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100088C14);
}

uint64_t sub_100088C3C(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = *a1;
  id v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1, a4);
  int v7 = *(unsigned __int8 *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 1), v6, (const unsigned __int8 *)1, v8);
  int v9 = *((unsigned __int8 *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 2);
  return v7 | (v9 << 8);
}

void sub_100088CA4(void *a1)
{
  __cxa_begin_catch(a1);
  *unsigned int v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100088C90);
}

uint64_t sub_100088CB8(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = *a1;
  id v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1, a4);
  int v7 = *(unsigned __int8 *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 1), v6, (const unsigned __int8 *)1, v8);
  int v9 = *((unsigned __int8 *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 2);
  return v7 | (v9 << 8);
}

void sub_100088D20(void *a1)
{
  __cxa_begin_catch(a1);
  *unsigned int v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100088D0CLL);
}

uint64_t sub_100088D34(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = *a1;
  id v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1, a4);
  int v7 = *(unsigned __int8 *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 1), v6, (const unsigned __int8 *)1, v8);
  int v9 = *((unsigned __int8 *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 2);
  return v7 | (v9 << 8);
}

void sub_100088D9C(void *a1)
{
  __cxa_begin_catch(a1);
  *unsigned int v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100088D88);
}

uint64_t sub_100088DB0(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = *a1;
  id v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1, a4);
  unsigned int v7 = *(unsigned __int8 *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 1), v6, (const unsigned __int8 *)2, v8);
  int v9 = *(unsigned __int16 *)((char *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 3);
  return (v9 << 16) | v7;
}

void sub_100088E1C(void *a1)
{
  __cxa_begin_catch(a1);
  *unsigned int v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100088E08);
}

uint64_t sub_100088E30(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = *a1;
  id v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1, a4);
  int v7 = *(unsigned __int8 *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 1), v6, (const unsigned __int8 *)1, v8);
  int v9 = *((unsigned __int8 *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 2);
  return v7 | (v9 << 8);
}

void sub_100088E98(void *a1)
{
  __cxa_begin_catch(a1);
  *unsigned int v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100088E84);
}

uint64_t sub_100088EAC(uint64_t a1, const unsigned __int8 *a2, unsigned char *a3, unint64_t a4)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1, a4);
  *a3 = *(unsigned char *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)1, v7);
  uint64_t result = a1 + 2;
  a3[1] = *(unsigned char *)(a1 + 1);
  return result;
}

uint64_t sub_100088F08(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = *a1;
  id v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1, a4);
  int v7 = *(unsigned __int8 *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 1), v6, (const unsigned __int8 *)1, v8);
  int v9 = *((unsigned __int8 *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 2);
  return v7 | (v9 << 8);
}

void sub_100088F70(void *a1)
{
  __cxa_begin_catch(a1);
  *unsigned int v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100088F5CLL);
}

uint64_t sub_100088F84(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = *a1;
  id v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1, a4);
  int v7 = *(unsigned __int8 *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 1), v6, (const unsigned __int8 *)1, v8);
  int v9 = *((unsigned __int8 *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 2);
  return v7 | (v9 << 8);
}

void sub_100088FEC(void *a1)
{
  __cxa_begin_catch(a1);
  *unsigned int v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100088FD8);
}

uint64_t sub_100089000(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  uint64_t result = *(unsigned __int8 *)v5;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_10008903C(void *a1)
{
  __cxa_begin_catch(a1);
  *unsigned int v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100089030);
}

uint64_t sub_100089050(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = *a1;
  id v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1, a4);
  int v7 = *(unsigned __int8 *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 1), v6, (const unsigned __int8 *)1, v8);
  int v9 = *((unsigned __int8 *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 2);
  return v7 | (v9 << 8);
}

void sub_1000890B8(void *a1)
{
  __cxa_begin_catch(a1);
  *unsigned int v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000890A4);
}

uint64_t sub_1000890CC(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  uint64_t result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_100089108(void *a1)
{
  __cxa_begin_catch(a1);
  *unsigned int v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000890FCLL);
}

uint64_t sub_10008911C(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  uint64_t result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_100089158(void *a1)
{
  __cxa_begin_catch(a1);
  *unsigned int v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10008914CLL);
}

char *sub_10008916C(tlv *a1, const unsigned __int8 *a2, BOOL *a3, unint64_t a4)
{
  *a3 = *(unsigned char *)a1 != 0;
  return (char *)a1 + 1;
}

BOOL sub_1000891AC(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  BOOL result = *(unsigned __int8 *)v5 != 0;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_1000891F0(void *a1)
{
  __cxa_begin_catch(a1);
  *unsigned int v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000891E4);
}

BOOL sub_100089204(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  BOOL result = *(unsigned __int8 *)v5 != 0;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_100089248(void *a1)
{
  __cxa_begin_catch(a1);
  *unsigned int v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10008923CLL);
}

BOOL sub_10008925C(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  BOOL result = *(unsigned __int8 *)v5 != 0;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_1000892A0(void *a1)
{
  __cxa_begin_catch(a1);
  *unsigned int v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100089294);
}

BOOL sub_1000892B4(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  BOOL result = *(unsigned __int8 *)v5 != 0;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_1000892F8(void *a1)
{
  __cxa_begin_catch(a1);
  *unsigned int v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000892ECLL);
}

uint64_t sub_10008930C(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  uint64_t result = *(unsigned __int8 *)v5;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_100089348(void *a1)
{
  __cxa_begin_catch(a1);
  *unsigned int v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10008933CLL);
}

uint64_t sub_10008935C(uint64_t a1, const unsigned __int8 *a2, unsigned char *a3, unint64_t a4)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1, a4);
  *a3 = *(unsigned char *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)1, v7);
  a3[1] = *(unsigned char *)(a1 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)1, v8);
  a3[2] = *(unsigned char *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 3), a2, (const unsigned __int8 *)1, v9);
  a3[3] = *(unsigned char *)(a1 + 3);
  return a1 + 4;
}

unsigned char *sub_1000893E8(unsigned char *a1, unsigned char *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1 + 4;
}

uint64_t sub_100089414(uint64_t *a1, int a2, uint64_t a3, unint64_t a4)
{
  unsigned int v5 = 0;
  *a1 = sub_10008935C(*a1, (const unsigned __int8 *)(*a1 + a2), &v5, a4);
  return v5;
}

void sub_100089458(void *a1)
{
  __cxa_begin_catch(a1);
  *unsigned int v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100089444);
}

unsigned char **sub_100089468(unsigned char **result, unsigned char *a2)
{
  double v2 = *result;
  *double v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  v2[3] = a2[3];
  *uint64_t result = v2 + 4;
  return result;
}

uint64_t sub_100089498(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  unsigned int v5 = *a1;
  id v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1, a4);
  int v7 = *(unsigned __int8 *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 1), v6, (const unsigned __int8 *)1, v8);
  int v9 = *((unsigned __int8 *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 2);
  return v7 | (v9 << 8);
}

void sub_100089500(void *a1)
{
  __cxa_begin_catch(a1);
  *unsigned int v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000894ECLL);
}

uint64_t sub_100089514(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  unsigned int v5 = *a1;
  id v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1, a4);
  unsigned int v7 = *(unsigned __int8 *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 1), v6, (const unsigned __int8 *)2, v8);
  int v9 = *(unsigned __int16 *)((char *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 3);
  return (v9 << 16) | v7;
}

void sub_100089580(void *a1)
{
  __cxa_begin_catch(a1);
  *unsigned int v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10008956CLL);
}

uint64_t sub_100089594(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  unsigned int v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  uint64_t result = *(unsigned __int8 *)v5;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_1000895D0(void *a1)
{
  __cxa_begin_catch(a1);
  *unsigned int v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000895C4);
}

uint64_t sub_1000895E4(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  unsigned int v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  uint64_t result = *(unsigned __int8 *)v5;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_100089620(void *a1)
{
  __cxa_begin_catch(a1);
  *unsigned int v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100089614);
}

uint64_t sub_100089634(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  unsigned int v5 = *a1;
  id v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)2, a4);
  unsigned int v7 = *(unsigned __int16 *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 2), v6, (const unsigned __int8 *)2, v8);
  int v9 = *((unsigned __int16 *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 4);
  return (v9 << 16) | v7;
}

void sub_1000896A0(void *a1)
{
  __cxa_begin_catch(a1);
  *unsigned int v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10008968CLL);
}

BOOL sub_1000896B4(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  unsigned int v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  BOOL result = *(unsigned __int8 *)v5 != 0;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_1000896F8(void *a1)
{
  __cxa_begin_catch(a1);
  *unsigned int v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000896ECLL);
}

BOOL sub_10008970C(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  unsigned int v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  BOOL result = *(unsigned __int8 *)v5 != 0;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_100089750(void *a1)
{
  __cxa_begin_catch(a1);
  *unsigned int v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100089744);
}

uint64_t sub_100089764(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  unsigned int v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  uint64_t result = *(unsigned __int8 *)v5;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_1000897A0(void *a1)
{
  __cxa_begin_catch(a1);
  *unsigned int v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100089794);
}

uint64_t sub_1000897B4(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  unsigned int v5 = *a1;
  id v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)2, a4);
  unsigned int v7 = *(unsigned __int16 *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 2), v6, (const unsigned __int8 *)2, v8);
  int v9 = *((unsigned __int16 *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 4);
  return (v9 << 16) | v7;
}

void sub_100089820(void *a1)
{
  __cxa_begin_catch(a1);
  *unsigned int v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10008980CLL);
}

BOOL sub_100089834(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  unsigned int v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  BOOL result = *(unsigned __int8 *)v5 != 0;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_100089878(void *a1)
{
  __cxa_begin_catch(a1);
  *unsigned int v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10008986CLL);
}

uint64_t sub_10008988C(uint64_t a1, const unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4, a4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4, v7);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)4, v8);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)4, v9);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 12);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 16), a2, (const unsigned __int8 *)1, v10);
  uint64_t result = a1 + 17;
  *(unsigned char *)(a3 + 16) = *(unsigned char *)(a1 + 16) != 0;
  return result;
}

uint64_t sub_100089938(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1 + 17;
}

uint64_t sub_10008996C()
{
  return 17;
}

uint64_t sub_100089974@<X0>(uint64_t *a1@<X0>, int a2@<W1>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t result = sub_10008988C(*a1, (const unsigned __int8 *)(*a1 + a2), a4, a3);
  *a1 = result;
  return result;
}

void sub_1000899B0(void *a1)
{
  __cxa_begin_catch(a1);
  *unsigned int v1 = 0;
  __cxa_end_catch();
}

uint64_t sub_1000899D4()
{
  return 20;
}

uint64_t *sub_1000899DC(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(_DWORD *)uint64_t v2 = *(_DWORD *)a2;
  *(_DWORD *)(v2 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(v2 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v2 + 12) = *(_DWORD *)(a2 + 12);
  *(unsigned char *)(v2 + 16) = *(unsigned char *)(a2 + 16);
  *uint64_t result = v2 + 17;
  return result;
}

uint64_t sub_100089A14@<X0>(uint64_t *a1@<X0>, int a2@<W1>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t result = sub_10008988C(*a1, (const unsigned __int8 *)(*a1 + a2), a4, a3);
  *a1 = result;
  return result;
}

void sub_100089A50(void *a1)
{
  __cxa_begin_catch(a1);
  *unsigned int v1 = 0;
  __cxa_end_catch();
}

uint64_t sub_100089A74@<X0>(uint64_t *a1@<X0>, int a2@<W1>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t result = sub_10008988C(*a1, (const unsigned __int8 *)(*a1 + a2), a4, a3);
  *a1 = result;
  return result;
}

void sub_100089AB0(void *a1)
{
  __cxa_begin_catch(a1);
  *unsigned int v1 = 0;
  __cxa_end_catch();
}

uint64_t sub_100089AD4@<X0>(uint64_t *a1@<X0>, int a2@<W1>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t result = sub_10008988C(*a1, (const unsigned __int8 *)(*a1 + a2), a4, a3);
  *a1 = result;
  return result;
}

void sub_100089B10(void *a1)
{
  __cxa_begin_catch(a1);
  *unsigned int v1 = 0;
  __cxa_end_catch();
}

BOOL sub_100089B34(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  unsigned int v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  BOOL result = *(unsigned __int8 *)v5 != 0;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_100089B78(void *a1)
{
  __cxa_begin_catch(a1);
  *unsigned int v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100089B6CLL);
}

BOOL sub_100089B8C(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  unsigned int v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  BOOL result = *(unsigned __int8 *)v5 != 0;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_100089BD0(void *a1)
{
  __cxa_begin_catch(a1);
  *unsigned int v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100089BC4);
}

uint64_t sub_100089BE4(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  unsigned int v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  uint64_t result = *(unsigned __int8 *)v5;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_100089C20(void *a1)
{
  __cxa_begin_catch(a1);
  *unsigned int v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100089C14);
}

uint64_t sub_100089C34(uint64_t a1, const unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1, a4);
  *(unsigned char *)a3 = *(unsigned char *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)1, v7);
  *(unsigned char *)(a3 + 1) = *(unsigned char *)(a1 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)1, v8);
  *(unsigned char *)(a3 + 2) = *(unsigned char *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 3), a2, (const unsigned __int8 *)1, v9);
  *(unsigned char *)(a3 + 3) = *(unsigned char *)(a1 + 3);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)1, v10);
  *(unsigned char *)(a3 + 4) = *(unsigned char *)(a1 + 4) != 0;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 5), a2, (const unsigned __int8 *)4, v11);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 5);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 9), a2, (const unsigned __int8 *)4, v12);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 9);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 13), a2, (const unsigned __int8 *)4, v13);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(a1 + 13);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 17), a2, (const unsigned __int8 *)4, v14);
  *(_DWORD *)(a3 + 20) = *(_DWORD *)(a1 + 17);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 21), a2, (const unsigned __int8 *)4, v15);
  *(_DWORD *)(a3 + 24) = *(_DWORD *)(a1 + 21);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 25), a2, (const unsigned __int8 *)4, v16);
  *(_DWORD *)(a3 + 28) = *(_DWORD *)(a1 + 25);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 29), a2, (const unsigned __int8 *)4, v17);
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(a1 + 29);
  return a1 + 33;
}

uint64_t sub_100089D88(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3) = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(_DWORD *)(a1 + 5) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 9) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 13) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 17) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 21) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 25) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 29) = *(_DWORD *)(a2 + 32);
  return a1 + 33;
}

uint64_t sub_100089DF0()
{
  return 33;
}

uint64_t sub_100089DF8@<X0>(uint64_t *a1@<X0>, int a2@<W1>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  *(unsigned char *)(a4 + 4) = 0;
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 32) = 0;
  uint64_t result = sub_100089C34(*a1, (const unsigned __int8 *)(*a1 + a2), a4, a3);
  *a1 = result;
  return result;
}

void sub_100089E40(void *a1)
{
  __cxa_begin_catch(a1);
  *unsigned int v1 = 0;
  __cxa_end_catch();
}

uint64_t sub_100089E64()
{
  return 36;
}

uint64_t sub_100089E6C(uint64_t *a1, uint64_t a2)
{
  uint64_t result = sub_100089D88(*a1, a2);
  *a1 = result;
  return result;
}

void sub_100089EDC(id a1)
{
  qword_10027D0C8 = objc_alloc_init(WRM_MotionControllerIOS);
}

id sub_100089F94(uint64_t a1)
{
  id result = objc_alloc_init(*(Class *)(a1 + 32));
  qword_10027D0D8 = (uint64_t)result;
  return result;
}

id sub_10008A23C(uint64_t a1)
{
  if (+[CMActivityAlarm activityAlarmAvailable])
  {
    uint64_t v2 = *(_DWORD **)(a1 + 32);
    if (!v2[8])
    {
      id result = [v2 waitForStaticState:(int)v2[11]];
      *(_DWORD *)(*(void *)(a1 + 32) + 32) = 1;
      return result;
    }
    CFStringRef v3 = @"Alarm:Activity alarm already running \n";
  }
  else
  {
    CFStringRef v3 = @"Alarm: Motion activity not supported on the platform \n";
  }

  return +[WCM_Logging logLevel:21 message:v3];
}

void sub_10008A3D0(uint64_t a1)
{
  if (+[CMActivityAlarm activityAlarmAvailable])
  {
    uint64_t v2 = *(void *)(a1 + 32);
    CFStringRef v3 = *(void **)(v2 + 48);
    if (v3)
    {
      [v3 invalidate];

      *(void *)(*(void *)(a1 + 32) + 48) = 0;
      uint64_t v2 = *(void *)(a1 + 32);
    }
    id v4 = *(void **)(v2 + 56);
    if (v4)
    {
      [v4 invalidate];

      *(void *)(*(void *)(a1 + 32) + 56) = 0;
      uint64_t v2 = *(void *)(a1 + 32);
    }
    unsigned int v5 = *(void **)(v2 + 64);
    if (v5)
    {
      [v5 invalidate];

      *(void *)(*(void *)(a1 + 32) + 64) = 0;
      uint64_t v2 = *(void *)(a1 + 32);
    }
    id v6 = *(void **)(v2 + 72);
    if (v6)
    {
      [v6 invalidate];

      *(void *)(*(void *)(a1 + 32) + 72) = 0;
      uint64_t v2 = *(void *)(a1 + 32);
    }
    unint64_t v7 = *(void **)(v2 + 80);
    if (v7)
    {
      [v7 invalidate];

      *(void *)(*(void *)(a1 + 32) + 80) = 0;
      uint64_t v2 = *(void *)(a1 + 32);
    }
    *(_DWORD *)(v2 + 36) = 5;
    *(_DWORD *)(*(void *)(a1 + 32) + 40) = 5;
    *(_DWORD *)(*(void *)(a1 + 32) + 32) = 0;
  }
}

id sub_10008A6DC(uint64_t a1)
{
  +[WCM_Logging logLevel:18 message:@"Alarm Acitivity: Static alarm fired"];
  +[WCM_Logging logLevel:18 message:@"Alarm: waitForStaticState: updating mobility state to stationary"];
  *(_DWORD *)(*(void *)(a1 + 32) + 36) = 0;
  [*(id *)(a1 + 32) notifyHandoverManager:*(unsigned int *)(*(void *)(a1 + 32) + 36)];
  uint64_t v2 = *(unsigned int **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = v2[9];

  return [v2 waitForActivityState:v3 :v4];
}

id sub_10008A834(uint64_t a1)
{
  +[WCM_Logging logLevel:18 message:@"Alarm Acitivity: mPedestrianAfterStatic alarm fired"];
  +[WCM_Logging logLevel:18 message:@"Alarm: waitForPedestrianState: updating mobility state to Walking"];
  *(_DWORD *)(*(void *)(a1 + 32) + 36) = 4;
  [*(id *)(a1 + 32) notifyHandoverManager:*(unsigned int *)(*(void *)(a1 + 32) + 36)];
  uint64_t v2 = *(unsigned int **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = v2[9];

  return [v2 waitForActivityState:v3 :v4];
}

id sub_10008A990(uint64_t a1)
{
  +[WCM_Logging logLevel:18 message:@"Alarm Acitivity: Walking alarm fired"];
  +[WCM_Logging logLevel:18 message:@"Alarm: waitForWalkingState: updating mobility state to Walking"];
  *(_DWORD *)(*(void *)(a1 + 32) + 36) = 1;
  [*(id *)(a1 + 32) notifyHandoverManager:*(unsigned int *)(*(void *)(a1 + 32) + 36)];
  uint64_t v2 = *(unsigned int **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = v2[9];

  return [v2 waitForActivityState:v3 :v4];
}

id sub_10008AAEC(uint64_t a1)
{
  +[WCM_Logging logLevel:18 message:@"Alarm Acitivity: Running alarm fired"];
  +[WCM_Logging logLevel:18 message:@"Alarm: waitForRunningState: updating mobility state to Running"];
  *(_DWORD *)(*(void *)(a1 + 32) + 36) = 2;
  [*(id *)(a1 + 32) notifyHandoverManager:*(unsigned int *)(*(void *)(a1 + 32) + 36)];
  uint64_t v2 = *(unsigned int **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = v2[9];

  return [v2 waitForActivityState:v3 :v4];
}

id sub_10008AC48(uint64_t a1)
{
  +[WCM_Logging logLevel:18 message:@"Alarm Acitivity: Driving alarm fired"];
  +[WCM_Logging logLevel:18 message:@"Alarm: waitForDrivingState: updating mobility state to Driving"];
  *(_DWORD *)(*(void *)(a1 + 32) + 36) = 3;
  [*(id *)(a1 + 32) notifyHandoverManager:*(unsigned int *)(*(void *)(a1 + 32) + 36)];
  uint64_t v2 = *(unsigned int **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = v2[9];

  return [v2 waitForActivityState:v3 :v4];
}

double sub_10008B274(double a1, double a2, double a3)
{
  if (a1 >= a3) {
    return a3;
  }
  else {
    return a1;
  }
}

BOOL sub_10008B298(double *a1, double a2, double a3, double a4, double a5)
{
  if (a2 >= a4) {
    double v5 = a2;
  }
  else {
    double v5 = a4;
  }
  double v6 = a2 + a3;
  if (v6 >= a4 + a5) {
    double v6 = a4 + a5;
  }
  if (a1 && v5 < v6)
  {
    *a1 = v5;
    a1[1] = v6 - v5;
  }
  return v5 < v6;
}

BOOL sub_10008B2D0(double *a1, double a2, double a3, double a4, double a5)
{
  double v5 = a2 + a2;
  double v6 = a2 + a3 + a2 + a3 - (a2 + a2);
  if (v5 >= a4) {
    double v7 = v5;
  }
  else {
    double v7 = a4;
  }
  double v8 = a4 + a5;
  if (v5 + v6 < v8) {
    double v8 = v5 + v6;
  }
  if (a1 && v7 < v8)
  {
    *a1 = v5;
    a1[1] = v6;
  }
  return v7 < v8;
}

BOOL sub_10008B314(double *a1, double a2, double a3, double a4, double a5)
{
  double v5 = a2 * 3.0;
  double v6 = (a2 + a3) * 3.0 - a2 * 3.0;
  if (v5 >= a4) {
    double v7 = v5;
  }
  else {
    double v7 = a4;
  }
  double v8 = a4 + a5;
  if (v5 + v6 < v8) {
    double v8 = v5 + v6;
  }
  if (a1 && v7 < v8)
  {
    *a1 = v5;
    a1[1] = v6;
  }
  return v7 < v8;
}

BOOL sub_10008B35C(double *a1, double a2, double a3, double a4, double a5)
{
  double v5 = a2 * 0.5;
  double v6 = (a2 + a3) * 0.5 - a2 * 0.5;
  if (v5 >= a4) {
    double v7 = v5;
  }
  else {
    double v7 = a4;
  }
  double v8 = a4 + a5;
  if (v5 + v6 < v8) {
    double v8 = v5 + v6;
  }
  if (a1 && v7 < v8)
  {
    *a1 = v5;
    a1[1] = v6;
  }
  return v7 < v8;
}

BOOL sub_10008B3A4(double *a1, double a2, double a3, double a4, double a5)
{
  double v5 = a2 / 3.0;
  double v6 = (a2 + a3) / 3.0 - a2 / 3.0;
  if (v5 >= a4) {
    double v7 = v5;
  }
  else {
    double v7 = a4;
  }
  double v8 = a4 + a5;
  if (v5 + v6 < v8) {
    double v8 = v5 + v6;
  }
  if (a1 && v7 < v8)
  {
    *a1 = v5;
    a1[1] = v6;
  }
  return v7 < v8;
}

uint64_t sub_10008B3EC(double *a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  if (a2 + a3 * 0.5 <= a4 + a5 * 0.5)
  {
    double v7 = a2 + a3;
    double v8 = a4 + a5;
    double v9 = a4;
    a4 = a2;
  }
  else
  {
    double v7 = a4 + a5;
    double v8 = a2 + a3;
    double v9 = a2;
  }
  double v10 = v9 + a4;
  double v11 = v8 + v7 - (v9 + a4);
  if (v9 + a4 >= a6) {
    double v12 = v9 + a4;
  }
  else {
    double v12 = a6;
  }
  double v13 = v10 + v11;
  double v14 = a6 + a7;
  if (v10 + v11 >= v14) {
    double v13 = v14;
  }
  if (v12 >= v13)
  {
    double v10 = v9 - v7;
    double v11 = v8 - a4 - (v9 - v7);
    if (v9 - v7 >= a6) {
      double v15 = v9 - v7;
    }
    else {
      double v15 = a6;
    }
    double v16 = v10 + v11;
    if (v10 + v11 >= v14) {
      double v16 = v14;
    }
    if (v15 >= v16) {
      return 0;
    }
  }
  if (a1)
  {
    *a1 = v10;
    a1[1] = v11;
  }
  return 1;
}

uint64_t sub_10008B494(double *a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  if (a2 + a3 * 0.5 <= a4 + a5 * 0.5)
  {
    double v7 = a2 + a3;
    double v8 = a4 + a5;
    double v9 = a4;
    a4 = a2;
  }
  else
  {
    double v7 = a4 + a5;
    double v8 = a2 + a3;
    double v9 = a2;
  }
  double v10 = -(v7 - v9 * 2.0);
  double v11 = -(a4 - v8 * 2.0) - v10;
  if (v10 >= a6) {
    double v12 = -(v7 - v9 * 2.0);
  }
  else {
    double v12 = a6;
  }
  double v13 = v11 - (v7 - v9 * 2.0);
  double v14 = a6 + a7;
  if (v13 >= v14) {
    double v13 = v14;
  }
  if (v12 >= v13)
  {
    double v10 = -(v8 - a4 * 2.0);
    double v11 = -(v9 - v7 * 2.0) - v10;
    if (v10 >= a6) {
      double v15 = -(v8 - a4 * 2.0);
    }
    else {
      double v15 = a6;
    }
    double v16 = v11 - (v8 - a4 * 2.0);
    if (v16 >= v14) {
      double v16 = v14;
    }
    if (v15 >= v16)
    {
      double v10 = v9 + -v7 * 2.0;
      double v11 = v8 + -a4 * 2.0 - v10;
      if (v10 >= a6) {
        double v17 = v9 + -v7 * 2.0;
      }
      else {
        double v17 = a6;
      }
      double v18 = v10 + v11;
      if (v10 + v11 >= v14) {
        double v18 = v14;
      }
      if (v17 >= v18) {
        return 0;
      }
    }
  }
  if (a1)
  {
    *a1 = v10;
    a1[1] = v11;
  }
  return 1;
}

uint64_t sub_10008B574(double *a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  if (a2 + a3 * 0.5 <= a4 + a5 * 0.5)
  {
    double v7 = a2 + a3;
    double v8 = a4 + a5;
    double v9 = a4;
    a4 = a2;
  }
  else
  {
    double v7 = a4 + a5;
    double v8 = a2 + a3;
    double v9 = a2;
  }
  double v10 = -(v7 - v9 * 4.0);
  double v11 = -(a4 - v8 * 4.0) - v10;
  if (v10 >= a6) {
    double v12 = -(v7 - v9 * 4.0);
  }
  else {
    double v12 = a6;
  }
  double v13 = v11 - (v7 - v9 * 4.0);
  double v14 = a6 + a7;
  if (v13 >= v14) {
    double v13 = v14;
  }
  if (v12 >= v13)
  {
    double v10 = -(v8 - a4 * 4.0);
    double v11 = -(v9 - v7 * 4.0) - v10;
    if (v10 >= a6) {
      double v15 = -(v8 - a4 * 4.0);
    }
    else {
      double v15 = a6;
    }
    double v16 = v10 + v11;
    if (v10 + v11 >= v14) {
      double v16 = v14;
    }
    if (v15 >= v16) {
      return 0;
    }
  }
  if (a1)
  {
    *a1 = v10;
    a1[1] = v11;
  }
  return 1;
}

double sub_10008B620(double a1, double a2, double a3)
{
  if (a1 != 0.0)
  {
    if (a3 == 0.0)
    {
      return a1;
    }
    else if (a1 < a3)
    {
      return a1;
    }
  }
  return a3;
}

BOOL sub_10008B664(double *a1, double *a2, double a3, double a4, double a5, double a6)
{
  double v6 = a3 + a3;
  double v7 = a3 + a4 + a3 + a4 - (a3 + a3);
  if (a3 + a3 >= a5) {
    double v8 = a3 + a3;
  }
  else {
    double v8 = a5;
  }
  double v9 = v6 + v7;
  double v10 = a5 + a6;
  if (v9 >= v10) {
    double v9 = v10;
  }
  if (v8 < v9)
  {
    double v11 = v9 - v8;
    if (a1)
    {
      *a1 = v8 * 0.5;
      a1[1] = v11 * 0.5;
    }
    if (a2)
    {
      *a2 = v8;
      a2[1] = v11;
    }
  }
  return v8 < v9;
}

BOOL sub_10008B6C0(double *a1, double *a2, double a3, double a4, double a5, double a6)
{
  double v6 = a3 * 3.0;
  double v7 = (a3 + a4) * 3.0 - a3 * 3.0;
  if (a3 * 3.0 >= a5) {
    double v8 = a3 * 3.0;
  }
  else {
    double v8 = a5;
  }
  double v9 = v6 + v7;
  double v10 = a5 + a6;
  if (v9 >= v10) {
    double v9 = v10;
  }
  if (v8 < v9)
  {
    double v11 = v9 - v8;
    if (a1)
    {
      *a1 = v8 / 3.0;
      a1[1] = v11 / 3.0;
    }
    if (a2)
    {
      *a2 = v8;
      a2[1] = v11;
    }
  }
  return v8 < v9;
}

BOOL sub_10008B720(double *a1, double *a2, double a3, double a4, double a5, double a6)
{
  double v6 = a3 * 0.5;
  double v7 = (a3 + a4) * 0.5 - a3 * 0.5;
  if (a3 * 0.5 >= a5) {
    double v8 = a3 * 0.5;
  }
  else {
    double v8 = a5;
  }
  double v9 = v6 + v7;
  double v10 = a5 + a6;
  if (v9 >= v10) {
    double v9 = v10;
  }
  if (v8 < v9)
  {
    double v11 = v9 - v8;
    if (a1)
    {
      *a1 = v8 + v8;
      a1[1] = v11 + v11;
    }
    if (a2)
    {
      *a2 = v8;
      a2[1] = v11;
    }
  }
  return v8 < v9;
}

BOOL sub_10008B77C(double *a1, double *a2, double a3, double a4, double a5, double a6)
{
  double v6 = a3 / 3.0;
  double v7 = (a3 + a4) / 3.0 - a3 / 3.0;
  if (a3 / 3.0 >= a5) {
    double v8 = a3 / 3.0;
  }
  else {
    double v8 = a5;
  }
  double v9 = v6 + v7;
  double v10 = a5 + a6;
  if (v9 >= v10) {
    double v9 = v10;
  }
  if (v8 < v9)
  {
    double v11 = v9 - v8;
    if (a1)
    {
      *a1 = v8 * 3.0;
      a1[1] = v11 * 3.0;
    }
    if (a2)
    {
      *a2 = v8;
      a2[1] = v11;
    }
  }
  return v8 < v9;
}

BOOL sub_10008B7DC(double *a1, double *a2, double *a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  double v9 = a4 + a5 * 0.5;
  double v10 = a6 + a7 * 0.5;
  if (v9 > v10)
  {
    double v11 = a6 + a7;
    double v12 = a4 + a5;
    double v13 = a4;
  }
  else
  {
    double v11 = a4 + a5;
    double v12 = a6 + a7;
    double v13 = a6;
    a6 = a4;
  }
  if (v13 - v11 >= a8) {
    double v14 = v13 - v11;
  }
  else {
    double v14 = a8;
  }
  double v15 = v13 - v11 + v12 - a6 - (v13 - v11);
  double v16 = a8 + a9;
  if (v15 >= v16) {
    double v15 = v16;
  }
  double v17 = 0.0;
  double v18 = 0.0;
  double v19 = 0.0;
  double v20 = 0.0;
  if (v14 < v15)
  {
    double v21 = v14 + v15 - v14;
    if (a3)
    {
      *a3 = v14;
      a3[1] = v15 - v14;
    }
    double v19 = a6 + v14;
    if (a6 + v14 < v13) {
      double v19 = v13;
    }
    double v22 = v11 + v21;
    if (v11 + v21 > v12) {
      double v22 = v12;
    }
    if (v19 < v22)
    {
      double v20 = v22 - v19;
    }
    else
    {
      double v19 = 0.0;
      double v20 = 0.0;
    }
    double v23 = v13 - v21;
    if (v23 >= a6) {
      double v17 = v23;
    }
    else {
      double v17 = a6;
    }
    double v24 = v12 - v14;
    if (v12 - v14 > v11) {
      double v24 = v11;
    }
    if (v17 >= v24) {
      double v17 = 0.0;
    }
    else {
      double v18 = v24 - v17;
    }
  }
  if (v9 > v10)
  {
    if (a1)
    {
      *a1 = v19;
      a1[1] = v20;
    }
    double v19 = v17;
    double v20 = v18;
  }
  else if (a1)
  {
    *a1 = v17;
    a1[1] = v18;
  }
  if (a2)
  {
    *a2 = v19;
    a2[1] = v20;
  }
  return v14 < v15;
}

BOOL sub_10008B8F0(double *a1, double *a2, double *a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  double v12 = a6;
  double v38 = a6 + a7 * 0.5;
  double v39 = a4 + a5 * 0.5;
  if (v39 > v38)
  {
    double v13 = a6 + a7;
    double v14 = a4 + a5;
    a6 = a4;
  }
  else
  {
    double v13 = a4 + a5;
    double v14 = a6 + a7;
    double v12 = a4;
  }
  double v44 = 0.0;
  double v45 = 0.0;
  if (a6 + v12 >= a8) {
    double v15 = a6 + v12;
  }
  else {
    double v15 = a8;
  }
  if (a6 + v12 + v14 + v13 - (a6 + v12) >= a8 + a9) {
    double v16 = a8 + a9;
  }
  else {
    double v16 = a6 + v12 + v14 + v13 - (a6 + v12);
  }
  double v17 = 0.0;
  double v18 = 0.0;
  double v19 = 0.0;
  double v20 = 0.0;
  double v21 = 0.0;
  double v22 = 0.0;
  if (v15 < v16)
  {
    double v20 = v16 - v15;
    double v23 = v15 + v16 - v15;
    double v24 = v15 - v14;
    if (v15 - v14 < v12) {
      double v24 = v12;
    }
    double v25 = v23 - a6;
    if (v23 - a6 > v13) {
      double v25 = v13;
    }
    if (v24 >= v25) {
      double v21 = 0.0;
    }
    else {
      double v21 = v25 - v24;
    }
    if (v24 >= v25) {
      double v22 = 0.0;
    }
    else {
      double v22 = v24;
    }
    if (v15 - v13 >= a6) {
      double v17 = v15 - v13;
    }
    else {
      double v17 = a6;
    }
    double v26 = v23 - v12;
    if (v26 > v14) {
      double v26 = v14;
    }
    if (v17 >= v26) {
      double v17 = 0.0;
    }
    else {
      double v18 = v26 - v17;
    }
    double v19 = v15;
  }
  double v42 = 0.0;
  double v43 = 0.0;
  double v40 = 0.0;
  double v41 = 0.0;
  sub_10008B7DC(&v42, &v40, &v44, v12, v13 - v12, a6, v14 - a6, a8, a9);
  double v28 = v42;
  double v27 = v43;
  if (v22 != 0.0)
  {
    if (v42 == 0.0)
    {
      double v27 = v21;
      double v28 = v22;
    }
    else
    {
      double v29 = v42 + v43;
      if (v22 < v42) {
        double v28 = v22;
      }
      if (v21 + v22 >= v29) {
        double v29 = v21 + v22;
      }
      double v27 = v29 - v28;
    }
  }
  double v30 = v40;
  double v31 = v41;
  if (v17 != 0.0)
  {
    if (v17 >= v40) {
      double v32 = v40;
    }
    else {
      double v32 = v17;
    }
    double v33 = v40 + v41;
    if (v17 + v18 >= v40 + v41) {
      double v33 = v17 + v18;
    }
    double v31 = v33 - v32;
    if (v40 == 0.0)
    {
      double v31 = v18;
      double v30 = v17;
    }
    else
    {
      double v30 = v32;
    }
  }
  if (a3)
  {
    double v35 = v44;
    double v34 = v45;
    if (v19 != 0.0)
    {
      if (v44 == 0.0)
      {
        double v34 = v20;
        double v35 = v19;
      }
      else
      {
        double v36 = v44 + v45;
        if (v19 < v44) {
          double v35 = v19;
        }
        if (v19 + v20 >= v36) {
          double v36 = v19 + v20;
        }
        double v34 = v36 - v35;
      }
    }
    *a3 = v35;
    a3[1] = v34;
  }
  if (v39 > v38)
  {
    if (a1)
    {
      *a1 = v30;
      a1[1] = v31;
    }
    double v30 = v28;
    double v31 = v27;
  }
  else if (a1)
  {
    *a1 = v28;
    a1[1] = v27;
  }
  if (a2)
  {
    *a2 = v30;
    a2[1] = v31;
  }
  return v15 < v16;
}

BOOL sub_10008BB44(double *a1, double *a2, double *a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  double v13 = a6;
  double v14 = a4 + a5 * 0.5;
  double v15 = a6 + a7 * 0.5;
  if (v14 > v15)
  {
    double v16 = a6 + a7;
    double v17 = a4 + a5;
    double v18 = a4;
  }
  else
  {
    double v16 = a4 + a5;
    double v17 = a6 + a7;
    double v18 = a6;
    double v13 = a4;
  }
  double v61 = 0.0;
  double v62 = 0.0;
  double v59 = 0.0;
  double v60 = 0.0;
  double v57 = 0.0;
  double v58 = 0.0;
  double v55 = 0.0;
  double v56 = 0.0;
  double v53 = 0.0;
  double v54 = 0.0;
  double v51 = 0.0;
  double v52 = 0.0;
  double v19 = 2.0;
  double v20 = -(v16 - v18 * 2.0);
  if (v20 >= a8) {
    double v21 = -(v16 - v18 * 2.0);
  }
  else {
    double v21 = a8;
  }
  double v22 = -(v13 - v17 * 2.0) - v20 - (v16 - v18 * 2.0);
  double v23 = a8 + a9;
  if (v22 >= a8 + a9) {
    double v22 = a8 + a9;
  }
  BOOL v24 = v21 < v22;
  double v25 = 0.0;
  double v26 = 0.0;
  if (v21 < v22)
  {
    double v50 = v17;
    double v27 = a9;
    double v28 = v14;
    double v29 = v15;
    sub_10008B7DC(&v61, &v59, &v53, v13, v16 - v13, v18 + v18, v17 + v17 - (v18 + v18), a8, a9);
    double v19 = 2.0;
    double v17 = v50;
    a9 = v27;
    double v15 = v29;
    double v14 = v28;
    double v26 = v59 * 0.5;
    double v25 = v60 * 0.5;
  }
  double v30 = -(v17 - v13 * v19);
  if (v30 >= a8) {
    double v31 = -(v17 - v13 * v19);
  }
  else {
    double v31 = a8;
  }
  double v32 = -(v18 - v16 * v19) - v30 - (v17 - v13 * v19);
  if (v32 >= v23) {
    double v32 = v23;
  }
  if (v31 >= v32)
  {
    double v36 = v61;
    double v37 = 0.0;
    if (v61 == 0.0) {
      double v36 = 0.0;
    }
    else {
      double v37 = v62;
    }
  }
  else
  {
    double v33 = a8;
    double v34 = v14;
    double v35 = v15;
    sub_10008B7DC(&v57, &v55, &v51, v13 + v13, v16 + v16 - (v13 + v13), v18, v17 - v18, v33, a9);
    double v15 = v35;
    double v14 = v34;
    double v36 = v57 * 0.5;
    double v37 = v58 * 0.5;
    double v38 = v62;
    if (v61 >= v57 * 0.5) {
      double v39 = v57 * 0.5;
    }
    else {
      double v39 = v61;
    }
    double v40 = v61 + v62;
    if (v61 + v62 < v36 + v37) {
      double v40 = v36 + v37;
    }
    double v41 = v40 - v39;
    if (v36 == 0.0) {
      double v39 = v61;
    }
    else {
      double v38 = v41;
    }
    BOOL v24 = 1;
    if (v61 != 0.0)
    {
      double v37 = v38;
      double v36 = v39;
    }
  }
  double v42 = v55;
  double v43 = v56;
  if (v26 != 0.0)
  {
    if (v26 >= v55) {
      double v44 = v55;
    }
    else {
      double v44 = v26;
    }
    double v45 = v55 + v56;
    if (v26 + v25 >= v55 + v56) {
      double v45 = v26 + v25;
    }
    double v43 = v45 - v44;
    if (v55 == 0.0)
    {
      double v43 = v25;
      double v42 = v26;
    }
    else
    {
      double v42 = v44;
    }
  }
  if (a3)
  {
    double v46 = v52;
    double v47 = v51;
    if (v53 != 0.0)
    {
      if (v51 == 0.0)
      {
        double v46 = v54;
        double v47 = v53;
      }
      else
      {
        double v48 = v51 + v52;
        if (v53 < v51) {
          double v47 = v53;
        }
        if (v53 + v54 >= v48) {
          double v48 = v53 + v54;
        }
        double v46 = v48 - v47;
      }
    }
    *a3 = v47;
    a3[1] = v46;
  }
  if (v14 > v15)
  {
    if (a1)
    {
      *a1 = v42;
      a1[1] = v43;
    }
    double v42 = v36;
    double v43 = v37;
  }
  else if (a1)
  {
    *a1 = v36;
    a1[1] = v37;
  }
  if (a2)
  {
    *a2 = v42;
    a2[1] = v43;
  }
  return v24;
}

BOOL sub_10008BE1C(double *a1, double *a2, double *a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  double v13 = a6;
  double v14 = a4 + a5 * 0.5;
  double v15 = a6 + a7 * 0.5;
  if (v14 > v15)
  {
    double v16 = a6 + a7;
    double v17 = a4 + a5;
    double v18 = a4;
  }
  else
  {
    double v16 = a4 + a5;
    double v17 = a6 + a7;
    double v18 = a6;
    double v13 = a4;
  }
  double v62 = 0.0;
  double v63 = 0.0;
  double v60 = 0.0;
  double v61 = 0.0;
  double v58 = 0.0;
  double v59 = 0.0;
  double v56 = 0.0;
  double v57 = 0.0;
  double v54 = 0.0;
  double v55 = 0.0;
  double v52 = 0.0;
  double v53 = 0.0;
  double v19 = -(v16 - v18 * 4.0);
  if (v19 >= a8) {
    double v20 = -(v16 - v18 * 4.0);
  }
  else {
    double v20 = a8;
  }
  double v21 = -(v13 - v17 * 4.0) - v19 - (v16 - v18 * 4.0);
  double v22 = a8 + a9;
  if (v21 >= a8 + a9) {
    double v21 = a8 + a9;
  }
  BOOL v23 = v20 < v21;
  double v24 = 0.0;
  double v25 = 0.0;
  if (v20 < v21)
  {
    double v50 = v16;
    double v51 = v17;
    double v26 = a9;
    double v27 = v14;
    double v28 = v15;
    sub_10008B7DC(&v62, &v60, &v54, v13, v16 - v13, v18 * 4.0, v17 * 4.0 - v18 * 4.0, a8, a9);
    double v16 = v50;
    double v17 = v51;
    a9 = v26;
    double v15 = v28;
    double v14 = v27;
    double v25 = v60 * 0.25;
    double v24 = v61 * 0.25;
  }
  double v29 = -(v17 - v13 * 4.0);
  if (v29 >= a8) {
    double v30 = -(v17 - v13 * 4.0);
  }
  else {
    double v30 = a8;
  }
  double v31 = -(v18 - v16 * 4.0) - v29 - (v17 - v13 * 4.0);
  if (v31 >= v22) {
    double v31 = v22;
  }
  if (v30 >= v31)
  {
    double v36 = v62;
    double v37 = 0.0;
    if (v62 == 0.0) {
      double v36 = 0.0;
    }
    else {
      double v37 = v63;
    }
  }
  else
  {
    double v32 = v16 * 4.0 - v13 * 4.0;
    double v33 = a8;
    double v34 = v14;
    double v35 = v15;
    sub_10008B7DC(&v58, &v56, &v52, v13 * 4.0, v32, v18, v17 - v18, v33, a9);
    double v15 = v35;
    double v14 = v34;
    double v36 = v58 * 0.25;
    double v37 = v59 * 0.25;
    double v38 = v63;
    if (v62 >= v58 * 0.25) {
      double v39 = v58 * 0.25;
    }
    else {
      double v39 = v62;
    }
    double v40 = v62 + v63;
    if (v62 + v63 < v36 + v37) {
      double v40 = v36 + v37;
    }
    double v41 = v40 - v39;
    if (v36 == 0.0) {
      double v39 = v62;
    }
    else {
      double v38 = v41;
    }
    BOOL v23 = 1;
    if (v62 != 0.0)
    {
      double v37 = v38;
      double v36 = v39;
    }
  }
  double v42 = v56;
  double v43 = v57;
  if (v25 != 0.0)
  {
    if (v25 >= v56) {
      double v44 = v56;
    }
    else {
      double v44 = v25;
    }
    double v45 = v56 + v57;
    if (v25 + v24 >= v56 + v57) {
      double v45 = v25 + v24;
    }
    double v43 = v45 - v44;
    if (v56 == 0.0)
    {
      double v43 = v24;
      double v42 = v25;
    }
    else
    {
      double v42 = v44;
    }
  }
  if (a3)
  {
    double v46 = v53;
    double v47 = v52;
    if (v54 != 0.0)
    {
      if (v52 == 0.0)
      {
        double v46 = v55;
        double v47 = v54;
      }
      else
      {
        double v48 = v52 + v53;
        if (v54 < v52) {
          double v47 = v54;
        }
        if (v54 + v55 >= v48) {
          double v48 = v54 + v55;
        }
        double v46 = v48 - v47;
      }
    }
    *a3 = v47;
    a3[1] = v46;
  }
  if (v14 > v15)
  {
    if (a1)
    {
      *a1 = v42;
      a1[1] = v43;
    }
    double v42 = v36;
    double v43 = v37;
  }
  else if (a1)
  {
    *a1 = v36;
    a1[1] = v37;
  }
  if (a2)
  {
    *a2 = v42;
    a2[1] = v43;
  }
  return v23;
}

uint64_t sub_10008C0F4(uint64_t a1, int a2)
{
  if (a2 == 40) {
    unsigned int v4 = 2;
  }
  else {
    unsigned int v4 = 1;
  }
  if (a2 == 80) {
    unsigned int v4 = 3;
  }
  if (a2 == 160) {
    uint64_t v5 = 4;
  }
  else {
    uint64_t v5 = v4;
  }
  if (a1 < 0xE) {
    return a1;
  }
  uint64_t v7 = 0;
  while (dword_1001E9BF8[v7] != a1)
  {
    v7 += 5;
    if (v7 == 230) {
      return a1;
    }
  }
  uint64_t v6 = dword_1001E9BF8[v5 + v7];
  if (v6 == 1) {
    return a1;
  }
  if (!v6)
  {
    +[WCM_Logging logLevel:5, @"Wrong combination wifiChannel(%d), bw (%d)", a1, v5, v2, v3 message];
    return 0;
  }
  return v6;
}

double sub_10008C1B8(uint64_t a1)
{
  if (a1 >= 0xE)
  {
    uint64_t v2 = 0;
    double v1 = 0.0;
    do
    {
      if (word_1001E9F90[v2] == a1) {
        double v1 = (double)word_1001E9F90[v2 + 1];
      }
      v2 += 3;
    }
    while (v2 != 138);
  }
  else
  {
    double v1 = (double)(5 * a1 + 2407);
  }
  if (v1 == 0.0) {
    +[WCM_Logging logLevel:5, @"cannot get center frequency for wifiChannel(%d)", a1 message];
  }
  return v1;
}

double sub_10008C254(uint64_t a1, int a2, uint64_t a3)
{
  if (a2 == 40) {
    unsigned int v5 = 2;
  }
  else {
    unsigned int v5 = 1;
  }
  if (a2 == 80) {
    unsigned int v5 = 3;
  }
  if (a2 == 160) {
    uint64_t v6 = 4;
  }
  else {
    uint64_t v6 = v5;
  }
  if (a3 == 4)
  {
    if (!objc_msgSend(&off_10024E020, "containsObject:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1)))
    {
      +[WCM_Logging logLevel:0, @"wifiChannel index (%d) is not part of new wifiBand index (%d)", a1, 4 message];
      goto LABEL_30;
    }
    uint64_t v9 = 0;
    double v10 = &word_1001EA19E[v6];
    double v7 = 0.0;
    do
    {
      if (word_1001EA19E[v9] == a1)
      {
        double v7 = (double)v10[v9];
        if (!v10[v9]) {
          +[WCM_Logging logLevel:0, @"wifiChannel index (%d) does not support bandwidth with index (%d), in band idx (%d)", a1, v6, 4 message];
        }
      }
      v9 += 5;
    }
    while (v9 != 295);
  }
  else
  {
    if (a3 != 3)
    {
      if (a3 == 2)
      {
        if (objc_msgSend(&off_10024DFF0, "containsObject:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1)))
        {
          double v7 = (double)(5 * a1 + 2407);
          goto LABEL_33;
        }
        +[WCM_Logging logLevel:0, @"wifiChannel index (%d) is not part of 2.4GHz wifiBand index(%d)", a1, 2 message];
      }
      else
      {
        +[WCM_Logging logLevel:0, @"wifiBand input is invald (%d)", a3, v13 message];
      }
LABEL_30:
      double v7 = 0.0;
LABEL_34:
      +[WCM_Logging logLevel:4, @"Zero centerFreq identified because either channel index/bandwidth mismatch, or invalid channel band index. Print: wifiChannel=(%d), bandwidth index =(%d), band idx =(%d) ", a1, v6, a3 message];
      return v7;
    }
    if (!objc_msgSend(&off_10024E008, "containsObject:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1)))
    {
      +[WCM_Logging logLevel:0, @"wifiChannel index (%d) is not part of 5GHz wifiBand index (%d)", a1, 3 message];
      goto LABEL_30;
    }
    uint64_t v8 = 0;
    while (word_1001EA0A4[v8] != a1)
    {
      v8 += 5;
      if (v8 == 125) {
        goto LABEL_30;
      }
    }
    int v11 = (unsigned __int16)word_1001EA0A4[v6 + v8];
    double v7 = (double)(__int16)v11;
    if (!v11) {
      +[WCM_Logging logLevel:0, @"wifiChannel index (%d) does not support bandwidth with index (%d), in band idx (%d)", a1, v6, 3 message];
    }
  }
LABEL_33:
  if (v7 == 0.0) {
    goto LABEL_34;
  }
  return v7;
}

double sub_10008C4CC(uint64_t a1)
{
  double result = 20.0;
  if (a1 >= 0xE)
  {
    uint64_t v2 = 0;
    while (word_1001E9F90[v2] != a1)
    {
      v2 += 3;
      if (v2 == 138)
      {
        +[WCM_Logging logLevel:5, @"cannot get bandwidth for wifiChannel(%d)", 20.0, a1 message];
        return 0.0;
      }
    }
    return (double)word_1001E9F90[v2 + 2];
  }
  return result;
}

double sub_10008C550(uint64_t a1)
{
  if (a1 >= 0xE)
  {
    uint64_t v3 = 0;
    while (word_1001E9F90[v3] != a1)
    {
      v3 += 3;
      if (v3 == 138)
      {
        double v2 = 0.0;
        double v1 = 0.0;
        goto LABEL_9;
      }
    }
    unsigned int v4 = &word_1001E9F90[v3];
    double v1 = (double)v4[1];
    double v2 = (double)v4[2];
  }
  else
  {
    double v1 = (double)(5 * a1 + 2407);
    double v2 = 20.0;
  }
  if (v1 == 0.0) {
LABEL_9:
  }
    +[WCM_Logging logLevel:5, @"cannot get frequency/bandwidth for wifiChannel(%d)", a1 message];
  return v1 + v2 * -0.5;
}

id sub_10008C60C(_DWORD *a1, double a2, double a3)
{
  id v6 = +[NSMutableArray array];
  double v7 = a2 + a3;
  if (a2 + a3 <= 5000.0)
  {
    int v14 = 0;
    double v15 = a2 + a3 * 0.5;
    double v16 = -1.0;
    int v17 = 2412;
    uint64_t v18 = 1;
    do
    {
      double v19 = (double)v17;
      double v20 = (double)v17 + -10.0;
      if (v20 >= a2) {
        double v21 = (double)v17 + -10.0;
      }
      else {
        double v21 = a2;
      }
      double v22 = v20 + 20.0;
      if (v22 >= v7) {
        double v22 = v7;
      }
      if (v21 < v22)
      {
        [v6 addObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v18)];
        if (v18 <= 0xB && ((1 << v18) & 0x842) != 0)
        {
          double v23 = v15 - v19;
          if (v15 - v19 < 0.0) {
            double v23 = -(v15 - v19);
          }
          if (v23 > v16)
          {
            double v16 = v23;
            int v14 = v18;
          }
        }
      }
      uint64_t v18 = (v18 + 1);
      v17 += 5;
    }
    while (v17 != 2477);
  }
  else
  {
    for (uint64_t i = 0; i != 138; i += 3)
    {
      int v9 = word_1001E9F90[i + 1];
      double v10 = (double)word_1001E9F90[i + 2];
      double v11 = (double)v9 + v10 * -0.5;
      if (v11 >= a2) {
        double v12 = (double)v9 + v10 * -0.5;
      }
      else {
        double v12 = a2;
      }
      double v13 = v11 + v10;
      if (v13 >= v7) {
        double v13 = a2 + a3;
      }
      if (v12 < v13) {
        [v6 addObject:[NSNumber numberWithInt:word_1001E9F90[i]]];
      }
    }
    int v14 = 0;
  }
  if (a1) {
    *a1 = v14;
  }
  return v6;
}

id sub_10008C7C0(double a1, double a2)
{
  id v4 = +[NSMutableArray array];
  uint64_t v5 = 0;
  double v6 = a1 + a2;
  do
  {
    int v7 = word_1001EA19E[v5 + 1];
    double v8 = (double)v7 + -10.0;
    if (v8 >= a1) {
      double v9 = (double)v7 + -10.0;
    }
    else {
      double v9 = a1;
    }
    double v10 = v8 + 20.0;
    if (v10 >= v6) {
      double v10 = v6;
    }
    if (v9 < v10) {
      [v4 addObject:[NSNumber numberWithInt:word_1001EA19E[v5]]];
    }
    v5 += 5;
  }
  while (v5 != 295);
  return v4;
}

BOOL sub_10008C87C(void *a1)
{
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v2 = [a1 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v2)
  {
    id v3 = v2;
    int v4 = 0;
    uint64_t v5 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v3; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(a1);
        }
        int v7 = *(void **)(*((void *)&v9 + 1) + 8 * i);
        if ([v7 intValue] == 1
          || [v7 intValue] == 6
          || [v7 intValue] == 11)
        {
          ++v4;
        }
      }
      id v3 = [a1 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v3);
  }
  else
  {
    int v4 = 0;
  }
  return v4 > 2;
}

id sub_10008C9A8(double a1, double a2)
{
  if (a1 >= 2401.5001) {
    double v2 = a1;
  }
  else {
    double v2 = 2401.5001;
  }
  double v3 = fmin(a1 + a2, 2480.4999);
  if (v2 >= v3) {
    return &__NSArray0__struct;
  }
  double v4 = v3 - v2;
  id v5 = +[NSMutableArray array];
  int v6 = llround(v2);
  int v7 = llround(v2 + v4);
  if (v6 - 2402 <= v7 - 2402)
  {
    int v8 = v6 - 1;
    do
    {
      [v5 addObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (v8 - 2401))]];
      ++v8;
    }
    while (v7 != v8);
  }
  return v5;
}

id sub_10008CA68(double a1, double a2, double a3, double a4)
{
  double v5 = a3 + -0.5 + 0.0001;
  double v6 = a4 + 0.5 + -0.0001 - v5;
  if (a1 >= v5) {
    double v7 = a1;
  }
  else {
    double v7 = v5;
  }
  double v8 = a1 + a2;
  if (v8 >= v5 + v6) {
    double v8 = v5 + v6;
  }
  if (v7 >= v8) {
    return &__NSArray0__struct;
  }
  double v9 = v8 - v7;
  id v10 = +[NSMutableArray array];
  uint64_t v11 = (int)((double)(int)llround(v7) - a3);
  int v12 = (int)((double)(int)llround(v7 + v9) - a3);
  if ((int)v11 <= v12)
  {
    int v13 = v12 + 1;
    do
    {
      [v10 addObject:[NSNumber numberWithInt:v11]];
      uint64_t v11 = (v11 + 1);
    }
    while (v13 != v11);
  }
  return v10;
}

id sub_10008CB68(uint64_t a1, uint64_t a2)
{
  if ((int)a2 > 13 || (int)a1 > 13 || (int)a2 < (int)a1)
  {
    +[WCM_Logging logLevel:1, @"invalid channelBegin(%d) channelEnd(%d)", a1, a2 message];
    return &__NSArray0__struct;
  }
  else
  {
    id v4 = sub_10008C9A8((double)(5 * (int)a1 + 2397), (double)(5 * (int)a2 + 2417) - (double)(5 * (int)a1 + 2397));
    id v5 = v4;
    if (a1 == 1 || a2 == 13)
    {
      id v5 = [v4 mutableCopy];
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_10008CC9C;
      v7[3] = &unk_10020F5D8;
      BOOL v8 = a1 == 1;
      [v5 sortUsingComparator:v7];
    }
    else
    {
      +[WCM_Logging logLevel:1, @"abnormal WiFi blocklist channel configuration for OOB channelBegin(%d) channelEnd(%d)", a1, a2 message];
    }
  }
  return v5;
}

uint64_t sub_10008CC9C(uint64_t a1, void *a2, void *a3)
{
  signed int v5 = [a2 intValue];
  signed int v6 = [a3 intValue];
  uint64_t v7 = -1;
  if (*(unsigned char *)(a1 + 32)) {
    uint64_t v7 = 1;
  }
  uint64_t v8 = 1;
  if (*(unsigned char *)(a1 + 32)) {
    uint64_t v8 = -1;
  }
  if (v5 <= v6) {
    return v8;
  }
  else {
    return v7;
  }
}

NSMutableArray *sub_10008CCFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  id v4 = +[NSMutableArray arrayWithCapacity:(int)a2 - (int)a1 + 1];
  if (v3)
  {
    if (a2 == 78)
    {
      if ((int)v3 <= 78)
      {
        LODWORD(v5) = 79;
        do
        {
          uint64_t v5 = (v5 - 1);
          [(NSMutableArray *)v4 addObject:+[NSNumber numberWithInt:v5]];
        }
        while ((int)v5 > (int)v3);
      }
      return v4;
    }
    +[WCM_Logging logLevel:1, @"abnormal BT blocklist channel configuration for OOB channelBegin(%d) channelEnd(%d)", v3, a2 message];
  }
  if ((int)a2 >= (int)v3)
  {
    int v6 = a2 + 1;
    do
    {
      [(NSMutableArray *)v4 addObject:+[NSNumber numberWithInt:v3]];
      uint64_t v3 = (v3 + 1);
    }
    while (v6 != v3);
  }
  return v4;
}

NSMutableData *sub_10008CDE4(void *a1)
{
  double v2 = +[NSMutableData dataWithCapacity:10];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v3 = [a1 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      int v6 = 0;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(a1);
        }
        uint64_t v7 = *(void **)(*((void *)&v10 + 1) + 8 * (void)v6);
        unsigned __int8 v9 = 0;
        unsigned __int8 v9 = [v7 unsignedCharValue];
        [(NSMutableData *)v2 appendBytes:&v9 length:1];
        int v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [a1 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }
  return v2;
}

uint64_t sub_10008CEF8(void *a1, int a2)
{
  if (!a2) {
    return 79 - [a1 count];
  }
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v3 = [a1 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (!v3) {
    return 76;
  }
  id v4 = v3;
  uint64_t v5 = *(void *)v12;
  uint64_t v6 = 76;
  do
  {
    for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v12 != v5) {
        objc_enumerationMutation(a1);
      }
      unsigned int v8 = [*(id *)(*((void *)&v11 + 1) + 8 * i) intValue];
      if (v8) {
        BOOL v9 = v8 == 24;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9 && v8 != 78) {
        uint64_t v6 = (v6 - 1);
      }
    }
    id v4 = [a1 countByEnumeratingWithState:&v11 objects:v15 count:16];
  }
  while (v4);
  return v6;
}

NSMutableArray *sub_10008D478(int a1, unsigned int a2, unsigned int a3)
{
  if (a2 <= a3 && (a2 - 1) <= 0xE8u && (a3 - 1) <= 0xE8u && a1)
  {
    id v5 = +[NSMutableArray array];
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    id v6 = [&off_10024E158 countByEnumeratingWithState:&v17 objects:v21 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v18;
      do
      {
        for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v18 != v8) {
            objc_enumerationMutation(&off_10024E158);
          }
          long long v10 = *(void **)(*((void *)&v17 + 1) + 8 * i);
          if ((int)[v10 intValue] >= (int)a2 && (int)objc_msgSend(v10, "intValue") <= (int)a3) {
            [v5 addObject:v10];
          }
        }
        id v7 = [&off_10024E158 countByEnumeratingWithState:&v17 objects:v21 count:16];
      }
      while (v7);
    }
    return (NSMutableArray *)v5;
  }
  if (a2 > a3 || (a2 - 1) > 0xCu || (a3 - 1) > 0xCu)
  {
    id v5 = 0;
    if (a2 <= a3 && (a2 - 32) <= 0x8Du && (a3 - 32) <= 0x8Du)
    {
      id v5 = +[NSMutableArray array];
      long long v17 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      id v12 = [&off_10024E170 countByEnumeratingWithState:&v17 objects:v21 count:16];
      if (v12)
      {
        id v13 = v12;
        uint64_t v14 = *(void *)v18;
        do
        {
          for (j = 0; j != v13; j = (char *)j + 1)
          {
            if (*(void *)v18 != v14) {
              objc_enumerationMutation(&off_10024E170);
            }
            double v16 = *(void **)(*((void *)&v17 + 1) + 8 * (void)j);
            if ((int)[v16 intValue] >= (int)a2 && (int)objc_msgSend(v16, "intValue") <= (int)a3) {
              [v5 addObject:v16];
            }
          }
          id v13 = [&off_10024E170 countByEnumeratingWithState:&v17 objects:v21 count:16];
        }
        while (v13);
      }
    }
    return (NSMutableArray *)v5;
  }

  return sub_10009560C(a2, a3);
}

const char *sub_100093674(unsigned int a1)
{
  if (a1 <= 4) {
    return off_10020F960[a1];
  }
  else {
    return "<ISSUE_PRIORITY_INVALID>";
  }
}

int64_t sub_100093B48(id a1, id a2, id a3)
{
  int v4 = [a2 intValue];
  if (v4 > (int)[a3 intValue]) {
    return 1;
  }
  else {
    return -1;
  }
}

int64_t sub_100093B88(id a1, id a2, id a3)
{
  int v4 = [a2 intValue];
  if (v4 > (int)[a3 intValue]) {
    return 1;
  }
  else {
    return -1;
  }
}

int64_t sub_100093FA0(id a1, id a2, id a3)
{
  int v4 = [a2 intValue];
  if (v4 > (int)[a3 intValue]) {
    return 1;
  }
  else {
    return -1;
  }
}

int64_t sub_10009452C(id a1, id a2, id a3)
{
  int v4 = [a2 intValue];
  if (v4 > (int)[a3 intValue]) {
    return 1;
  }
  else {
    return -1;
  }
}

int64_t sub_10009456C(id a1, id a2, id a3)
{
  int v4 = [a2 intValue];
  if (v4 > (int)[a3 intValue]) {
    return 1;
  }
  else {
    return -1;
  }
}

int64_t sub_1000945AC(id a1, id a2, id a3)
{
  int v4 = [a2 intValue];
  if (v4 > (int)[a3 intValue]) {
    return 1;
  }
  else {
    return -1;
  }
}

int64_t sub_1000945EC(id a1, id a2, id a3)
{
  int v4 = [a2 intValue];
  if (v4 > (int)[a3 intValue]) {
    return 1;
  }
  else {
    return -1;
  }
}

int64_t sub_10009462C(id a1, id a2, id a3)
{
  int v4 = [a2 intValue];
  if (v4 > (int)[a3 intValue]) {
    return 1;
  }
  else {
    return -1;
  }
}

int64_t sub_10009466C(id a1, id a2, id a3)
{
  int v4 = [a2 intValue];
  if (v4 > (int)[a3 intValue]) {
    return 1;
  }
  else {
    return -1;
  }
}

int64_t sub_100094D04(id a1, NSNumber *a2, NSNumber *a3)
{
  return [(NSNumber *)a2 compare:a3];
}

id sub_100094D0C(uint64_t a1, uint64_t a2, void *a3)
{
  id result = [a3 isEqual:&__kCFBooleanTrue];
  if (result)
  {
    id v7 = *(void **)(a1 + 32);
    return [v7 setObject:a3 forKeyedSubscript:a2];
  }
  return result;
}

id sub_100094D7C(uint64_t a1, uint64_t a2, void *a3)
{
  id result = [a3 isEqual:&__kCFBooleanTrue];
  if (result)
  {
    id v7 = *(void **)(a1 + 32);
    return [v7 setObject:a3 forKeyedSubscript:a2];
  }
  return result;
}

const char *sub_1000955E8(unsigned int a1)
{
  if (a1 <= 3) {
    return off_10020FA00[a1];
  }
  else {
    return "<ANTENNA_COMBINATION_INVALID>";
  }
}

NSMutableArray *sub_10009560C(unsigned int a1, unsigned int a2)
{
  unsigned int v3 = a1;
  int v4 = +[NSMutableArray arrayWithCapacity:a2 - (unint64_t)a1 + 1];
  if (v3 <= a2)
  {
    do
      [(NSMutableArray *)v4 addObject:+[NSNumber numberWithInt:v3++]];
    while (a2 >= v3);
  }
  return v4;
}

NSData *sub_100095D24(uint64_t a1, uint64_t a2)
{
  int v4 = +[NSBundle bundleWithPath:@"/System/Library/PrivateFrameworks/WirelessCoexManager.framework"];
  if (v4)
  {
    id v5 = [(NSBundle *)v4 URLForResource:a1 withExtension:a2];
    if (v5)
    {
      id result = [+[NSFileManager defaultManager] contentsAtPath:[(NSURL *)v5 path]];
      if (result) {
        return result;
      }
      CFStringRef v7 = @"No contents for resource '%@.%@'";
    }
    else
    {
      CFStringRef v7 = @"No resource found for '%@.%@'";
    }
  }
  else
  {
    CFStringRef v7 = @"Bundle not found for resource '%@.%@'";
  }
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 18, v7, a1, a2);
  return 0;
}

void sub_1000960C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100096210(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = WRM_MotionController;
  +[WCM_Logging logLevel:22 message:@"CellularThroughput: Download task starting"];
  id v7 = [a2 fileSize];
  [a2 speed];
  double v9 = v8;
  [*(id *)(*(void *)(a1 + 32) + 16) stopMetadataCollection];
  *(unsigned char *)(*(void *)(a1 + 32) + 8) = 0;
  if (a3)
  {
    uint64_t v10 = *(void *)(a1 + 40);
    if (v10) {
      (*(void (**)(uint64_t, const __CFString *))(v10 + 16))(v10, @"NO");
    }
    +[WCM_Logging logLevel:22 message:@"CellularThroughput: Download task errored out"];
  }
  else
  {
    +[WCM_Logging logLevel:22, @"CellularThroughput: Download task completed, downloaded %u bytes in %f seconds, throughput %f Mbps", v7, (double)(8 * (int)v7) / (v9 * 1000000.0), *(void *)&v9 message];
    uint64_t v11 = *(void *)(a1 + 40);
    if (v11) {
      (*(void (**)(uint64_t, const __CFString *))(v11 + 16))(v11, @"YES");
    }
    id v12 = +[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", [*(id *)(*(void *)(a1 + 32) + 16) getDataForCoreAnalytics]);
    if (v12)
    {
      *(void *)(*(void *)(a1 + 32) + 24) = +[WRM_BWEvalManager WRM_BWEvalManagerSingleton];
      id v13 = [*(id *)(*(void *)(a1 + 32) + 24) getSpeedTestMetrics];
      long long v29 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      id v14 = [v13 countByEnumeratingWithState:&v29 objects:v34 count:16];
      if (v14)
      {
        id v15 = v14;
        uint64_t v16 = *(void *)v30;
        do
        {
          for (uint64_t i = 0; i != v15; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v30 != v16) {
              objc_enumerationMutation(v13);
            }
            uint64_t v18 = *(void *)(*((void *)&v29 + 1) + 8 * i);
            id v19 = [v13 objectForKey:v18];
            NSLog(@"CellularThroughput metrics from BWEstimator: key=%@ value=%@", v18, v19);
            -[NSMutableDictionary setObject:forKey:](v12, "setObject:forKey:", v19, [&off_100254AB0 objectForKey:v18]);
          }
          id v15 = [v13 countByEnumeratingWithState:&v29 objects:v34 count:16];
        }
        while (v15);
      }
      NSLog(@"CellularThroughput flattenedDictionary dictionary count: %lu", [(NSMutableDictionary *)v12 count]);
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      id v20 = [(NSMutableDictionary *)v12 countByEnumeratingWithState:&v25 objects:v33 count:16];
      id v6 = WRM_MotionController;
      if (v20)
      {
        id v21 = v20;
        uint64_t v22 = *(void *)v26;
        do
        {
          for (j = 0; j != v21; j = (char *)j + 1)
          {
            if (*(void *)v26 != v22) {
              objc_enumerationMutation(v12);
            }
            NSLog(@"CellularThroughput flattenedDictionary dictionary from speed test: key=%@ value=%@", *(void *)(*((void *)&v25 + 1) + 8 * (void)j), [(NSMutableDictionary *)v12 valueForKey:*(void *)(*((void *)&v25 + 1) + 8 * (void)j)]);
          }
          id v21 = [(NSMutableDictionary *)v12 countByEnumeratingWithState:&v25 objects:v33 count:16];
        }
        while (v21);
      }
    }
    else
    {
      +[WCM_Logging logLevel:22 message:@"CellularThroughput: Unable to save to CoreAnalytics: flattenedDictionary dictonary returned from NPTKit is empty"];
      uint64_t v24 = *(void *)(a1 + 40);
      if (v24) {
        (*(void (**)(uint64_t, const __CFString *))(v24 + 16))(v24, @"NO");
      }
    }
    AnalyticsSendEventLazy();
    [&v6[50] logLevel:22 message:@"CellularThroughput: save results to CoreAnalytics"];
    [(NSMutableDictionary *)v12 removeAllObjects];
  }
}

NSDictionary *sub_100096608(uint64_t a1)
{
  return +[NSDictionary dictionaryWithDictionary:*(void *)(a1 + 32)];
}

uint64_t sub_10009666C()
{
  if (!qword_10027D0E8) {
    qword_10027D0E8 = _sl_dlopen();
  }
  return qword_10027D0E8;
}

uint64_t sub_10009673C()
{
  uint64_t result = _sl_dlopen();
  qword_10027D0E8 = result;
  return result;
}

void sub_1000967B0(uint64_t a1, uint64_t a2)
{
}

void sub_1000967C0(uint64_t a1)
{
}

Class sub_1000967CC(uint64_t a1)
{
  sub_100096824();
  Class result = objc_getClass("NPTPerformanceTestConfiguration");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    sub_10013A8C8();
  }
  qword_10027D0F0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

void sub_100096824()
{
  uint64_t v0 = 0;
  if (!sub_10009666C()) {
    sub_10013A930(&v0);
  }
}

Class sub_100096868(uint64_t a1)
{
  sub_100096824();
  Class result = objc_getClass("NPTPerformanceTest");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    sub_10013A998();
  }
  qword_10027D0F8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

id sub_100096B54(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) handleAADeviceFound:a2];
}

id sub_100096B60(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) handleAADeviceLost:a2];
}

id sub_100096B6C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    +[WCM_Logging logLevel:2, @"BTController initial AudioAccessoryDevice Error: %@", a2 message];
    [*(id *)(*(void *)(a1 + 32) + 20) invalidate];

    *(void *)(*(void *)(a1 + 32) + 20) = 0;
    *(void *)(*(void *)(a1 + 32) + 20) = objc_alloc_init((Class)AADeviceManager);
    [*(id *)(*(void *)(a1 + 32) + 20) setDispatchQueue:*(void *)(*(void *)(a1 + 32) + 28)];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100096D7C;
    v9[3] = &unk_10020FA90;
    uint64_t v10 = *(void *)(a1 + 32);
    [*(id *)(v10 + 20) setDeviceFoundHandler:v9];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100096D88;
    v7[3] = &unk_10020FA90;
    uint64_t v8 = *(void *)(a1 + 32);
    [*(id *)(v8 + 20) setDeviceLostHandler:v7];
    id result = +[WCM_Logging logLevel:2 message:@"BTController initial activation was unsuccessful"];
    if (dword_10027CBC8 == -1)
    {
      uint64_t v4 = *(void *)(a1 + 32);
      id v5 = *(NSObject **)(v4 + 28);
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_100096D94;
      handler[3] = &unk_10020DFA8;
      void handler[4] = v4;
      return (id)notify_register_dispatch("com.apple.AudioAccessory.daemonStarted", &dword_10027CBC8, v5, handler);
    }
  }
  else
  {
    return +[WCM_Logging logLevel:2 message:@"BTController initial AudioAccessoryDevice Activated Successfully"];
  }
  return result;
}

id sub_100096D7C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) handleAADeviceFound:a2];
}

id sub_100096D88(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) handleAADeviceLost:a2];
}

id sub_100096D94(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 20) activateWithCompletion:&stru_10020FAD0];
}

void sub_100096DB0(id a1, NSError *a2)
{
  if (a2)
  {
    +[WCM_Logging logLevel:2, @"BTController Register AudioAccessoryDevice Error: %@", a2 message];
  }
  else
  {
    +[WCM_Logging logLevel:2 message:@"BTController Register AudioAccessoryDevice Activated Successfully"];
  }
}

NSDictionary *sub_1000994E0(void *a1)
{
  uint64_t v2 = a1[5];
  v5[0] = a1[4];
  v4[0] = @"deviceEnumeration";
  v4[1] = @"duration";
  v5[1] = +[NSNumber numberWithUnsignedLongLong:v2];
  void v4[2] = @"percentIn2G";
  void v5[2] = +[NSNumber numberWithUnsignedLongLong:a1[6]];
  return +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:3];
}

NSDictionary *sub_100099800(void *a1)
{
  uint64_t v2 = a1[5];
  v5[0] = a1[4];
  v4[0] = @"profileName";
  v4[1] = @"durationMinutes";
  v5[1] = +[NSNumber numberWithUnsignedLongLong:v2];
  void v4[2] = @"btDurPercent";
  void v5[2] = +[NSNumber numberWithUnsignedLongLong:a1[6]];
  void v4[3] = @"hybridPercent";
  void v5[3] = +[NSNumber numberWithUnsignedLongLong:a1[7]];
  v4[4] = @"parallelPercent";
  void v5[4] = +[NSNumber numberWithUnsignedLongLong:a1[8]];
  void v4[5] = @"btDurAirPercent";
  v5[5] = +[NSNumber numberWithUnsignedLongLong:a1[9]];
  v4[6] = @"wlrssiCoexAvg";
  v5[6] = +[NSNumber numberWithLongLong:a1[10]];
  v4[7] = @"btrssiCoexAvg";
  v5[7] = +[NSNumber numberWithLongLong:a1[11]];
  return +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:8];
}

xpc_object_t sub_10009D464(uint64_t a1)
{
  xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 32), "kMessageArgs");
  if (value)
  {
    unsigned int v3 = value;
    id v4 = [[+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton") getiRATConfigController];
    if (xpc_dictionary_get_value(v3, "kWCMBTMetricsReport_Active_PHY"))
    {
      uint64_t uint64 = xpc_dictionary_get_uint64(v3, "kWCMBTMetricsReport_Active_PHY");
    }
    else
    {
      [*(id *)(a1 + 40) setMActivePhyValid:0];
      [*(id *)(a1 + 40) setMActivePhy:0];
      uint64_t uint64 = 0;
    }
    [*(id *)(a1 + 40) mActivePhy];
    [*(id *)(a1 + 40) setMActivePhy:uint64];
    [*(id *)(a1 + 40) setMActivePhyValid:1];
    [*(id *)(a1 + 40) setMNumberofSamples:((char *)[*(id *)(a1 + 40) mNumberofSamples]) + 1];
    if ([*(id *)(a1 + 40) mActivePhy] == (id)2)
    {
      if (xpc_dictionary_get_value(v3, "kWCMBTMetricsReport_Classic_RSSI"))
      {
        [*(id *)(a1 + 40) setMClassicRssi:128 - (xpc_dictionary_get_uint64(v3, "kWCMBTMetricsReport_Classic_RSSI") & 0x7F)];
        [*(id *)(a1 + 40) mMovingAvgRSSI];
        double v8 = v7;
        id v9 = [*(id *)(a1 + 40) mClassicRssi];
        if (v8 == 128.0)
        {
          double v10 = (double)(unint64_t)v9;
LABEL_19:
          [*(id *)(a1 + 40) setMMovingAvgRSSI:v10];
          goto LABEL_20;
        }
        if (v9 != (id)128)
        {
          double v15 = (double)((unint64_t)[v4 dataBtMovingAvgAlphaDenum] - 1);
          [*(id *)(a1 + 40) mMovingAvgRSSI];
          double v17 = (double)(unint64_t)[*(id *)(a1 + 40) mClassicRssi] + v15 * v16;
          double v10 = v17 / (double)(uint64_t)[v4 dataBtMovingAvgAlphaDenum];
          goto LABEL_19;
        }
      }
      else
      {
        [*(id *)(a1 + 40) setMClassicRssi:128];
      }
LABEL_20:
      if (xpc_dictionary_get_value(v3, "kWCMBTMetricsReportClassicSuccessfulTxCount"))
      {
        uint64_t v18 = xpc_dictionary_get_uint64(v3, "kWCMBTMetricsReportClassicSuccessfulTxCount");
        [*(id *)(a1 + 40) setMClassicSuccessfulTxCount:v18];
        [*(id *)(a1 + 40) setMMovingAvgSuccessfulTxCount:((v18+ (void)objc_msgSend(*(id *)(a1 + 40), "mMovingAvgSuccessfulTxCount")* ((uint64_t)objc_msgSend(v4, "dataBtMovingAvgAlphaDenum") - 1))/ (unint64_t)objc_msgSend(v4, "dataBtMovingAvgAlphaDenum"))];
      }
      else
      {
        [*(id *)(a1 + 40) setMClassicSuccessfulTxCount:0];
      }
      if (xpc_dictionary_get_value(v3, "kWCMBTMetricsReportClassicReTxCount"))
      {
        uint64_t v19 = xpc_dictionary_get_uint64(v3, "kWCMBTMetricsReportClassicReTxCount");
        [*(id *)(a1 + 40) setMClassicReTxCount:v19];
        [*(id *)(a1 + 40) setMMovingAvgReTxCount:((v19+ (void)objc_msgSend(*(id *)(a1 + 40), "mMovingAvgReTxCount")* ((uint64_t)objc_msgSend(v4, "dataBtMovingAvgAlphaDenum") - 1))/ (unint64_t)objc_msgSend(v4, "dataBtMovingAvgAlphaDenum"))];
      }
      else
      {
        [*(id *)(a1 + 40) setMClassicReTxCount:0];
      }
      if (xpc_dictionary_get_value(v3, "kWCMBTMetricsReportClassicSuccessfulRxCount"))
      {
        uint64_t v20 = xpc_dictionary_get_uint64(v3, "kWCMBTMetricsReportClassicSuccessfulRxCount");
        [*(id *)(a1 + 40) setMClassicSuccessfulRxCount:v20];
        [*(id *)(a1 + 40) setMMovingAvgSuccessfulRxCount:((v20+ (void)objc_msgSend(*(id *)(a1 + 40), "mMovingAvgSuccessfulRxCount")* ((uint64_t)objc_msgSend(v4, "dataBtMovingAvgAlphaDenum") - 1))/ (unint64_t)objc_msgSend(v4, "dataBtMovingAvgAlphaDenum"))];
      }
      else
      {
        [*(id *)(a1 + 40) setMClassicSuccessfulRxCount:0];
      }
      if (xpc_dictionary_get_value(v3, "kWCMBTMetricsReportClassicRxErrorCount"))
      {
        uint64_t v21 = xpc_dictionary_get_uint64(v3, "kWCMBTMetricsReportClassicRxErrorCount");
        [*(id *)(a1 + 40) setMClassicRxErrorCount:v21];
        [*(id *)(a1 + 40) setMMovingAvgRxErrorCount:((v21+ (void)objc_msgSend(*(id *)(a1 + 40), "mMovingAvgRxErrorCount")* ((uint64_t)objc_msgSend(v4, "dataBtMovingAvgAlphaDenum") - 1))/ (unint64_t)objc_msgSend(v4, "dataBtMovingAvgAlphaDenum"))];
      }
      else
      {
        [*(id *)(a1 + 40) setMClassicRxErrorCount:0];
      }
      if (xpc_dictionary_get_value(v3, "kWCMBTMetricsReportClassicCoexDenialCount"))
      {
        uint64_t v22 = xpc_dictionary_get_uint64(v3, "kWCMBTMetricsReportClassicCoexDenialCount");
        double v23 = *(void **)(a1 + 40);
      }
      else
      {
        double v23 = *(void **)(a1 + 40);
        uint64_t v22 = 0;
      }
      [v23 setMClassicCoexDenialCount:v22];
      goto LABEL_56;
    }
    if ([*(id *)(a1 + 40) mActivePhy] != (id)1)
    {
LABEL_56:
      if (xpc_dictionary_get_value(v3, "kWCMBTMetricsReport_NonMagnetUtilization")) {
        [*(id *)(a1 + 40) setMNonMagnetUtilization:xpc_dictionary_get_double(v3, "kWCMBTMetricsReport_NonMagnetUtilization")];
      }
      if (xpc_dictionary_get_value(v3, "kWCMBTMetricsReport_MagnetReportReason"))
      {
        [*(id *)(a1 + 40) setMMetricsReportReason:xpc_dictionary_get_uint64(v3, "kWCMBTMetricsReport_MagnetReportReason")];
        if ([*(id *)(a1 + 40) mMetricsReportReason])
        {
          if ([*(id *)(a1 + 40) mMetricsReportReason] == (id)1)
          {
            double v33 = "Classic disconnected";
          }
          else
          {
            id v34 = [*(id *)(a1 + 40) mMetricsReportReason];
            double v33 = "INVALID!!!";
            if (v34 == (id)2) {
              double v33 = "LE disconnected";
            }
          }
        }
        else
        {
          double v33 = "Periodic interval";
        }
        +[WCM_Logging logLevel:2, @"Metric report reason is %s", v33 message];
      }
      xpc_object_t result = xpc_dictionary_get_value(v3, "kWCMBTMetricsReport_flushCount");
      if (result)
      {
        uint64_t v35 = xpc_dictionary_get_uint64(v3, "kWCMBTMetricsReport_flushCount");
        double v36 = *(void **)(a1 + 40);
        return [v36 setMFlushCount:v35];
      }
      return result;
    }
    if (xpc_dictionary_get_value(v3, "kWCMBTMetricsReport_LE_RSSI"))
    {
      [*(id *)(a1 + 40) setMLeRssi:128 - (xpc_dictionary_get_uint64(v3, "kWCMBTMetricsReport_LE_RSSI") & 0x7F)];
      [*(id *)(a1 + 40) mMovingAvgRSSI];
      double v12 = v11;
      id v13 = [*(id *)(a1 + 40) mLeRssi];
      if (v12 == 128.0)
      {
        double v14 = (double)(unint64_t)v13;
LABEL_39:
        [*(id *)(a1 + 40) setMMovingAvgRSSI:v14];
        goto LABEL_40;
      }
      if (v13 != (id)128)
      {
        double v24 = (double)((unint64_t)[v4 dataBtMovingAvgAlphaDenum] - 1);
        [*(id *)(a1 + 40) mMovingAvgRSSI];
        double v26 = (double)(unint64_t)[*(id *)(a1 + 40) mLeRssi] + v24 * v25;
        double v14 = v26 / (double)(uint64_t)[v4 dataBtMovingAvgAlphaDenum];
        goto LABEL_39;
      }
    }
    else
    {
      [*(id *)(a1 + 40) setMLeRssi:128];
    }
LABEL_40:
    if (xpc_dictionary_get_value(v3, "kWCMBTMetricsReportLeSuccessfulTxCount"))
    {
      uint64_t v27 = xpc_dictionary_get_uint64(v3, "kWCMBTMetricsReportLeSuccessfulTxCount");
      [*(id *)(a1 + 40) setMLeSuccessfulTxCount:v27];
      [*(id *)(a1 + 40) setMMovingAvgSuccessfulTxCount:((v27 + [*(id *)(a1 + 40) mMovingAvgSuccessfulTxCount] * ((uint64_t)objc_msgSend(v4, "dataBtMovingAvgAlphaDenum") - 1)) / (unint64_t)objc_msgSend(v4, "dataBtMovingAvgAlphaDenum"))];
    }
    else
    {
      [*(id *)(a1 + 40) setMLeSuccessfulTxCount:0];
    }
    if (xpc_dictionary_get_value(v3, "kWCMBTMetricsReportLeReTxCount"))
    {
      uint64_t v28 = xpc_dictionary_get_uint64(v3, "kWCMBTMetricsReportLeReTxCount");
      [*(id *)(a1 + 40) setMLeReTxCount:v28];
      [*(id *)(a1 + 40) setMMovingAvgReTxCount:((v28+ (void)objc_msgSend(*(id *)(a1 + 40), "mMovingAvgReTxCount")* ((uint64_t)objc_msgSend(v4, "dataBtMovingAvgAlphaDenum") - 1))/ (unint64_t)objc_msgSend(v4, "dataBtMovingAvgAlphaDenum"))];
    }
    else
    {
      [*(id *)(a1 + 40) setMLeReTxCount:0];
    }
    if (xpc_dictionary_get_value(v3, "kWCMBTMetricsReportLeSuccessfulRxCount"))
    {
      uint64_t v29 = xpc_dictionary_get_uint64(v3, "kWCMBTMetricsReportLeSuccessfulRxCount");
      [*(id *)(a1 + 40) setMLeSuccessfulRxCount:v29];
      [*(id *)(a1 + 40) setMMovingAvgSuccessfulRxCount:((v29+ (void)objc_msgSend(*(id *)(a1 + 40), "mMovingAvgSuccessfulRxCount")* ((uint64_t)objc_msgSend(v4, "dataBtMovingAvgAlphaDenum") - 1))/ (unint64_t)objc_msgSend(v4, "dataBtMovingAvgAlphaDenum"))];
    }
    else
    {
      [*(id *)(a1 + 40) setMLeSuccessfulRxCount:0];
    }
    if (xpc_dictionary_get_value(v3, "kWCMBTMetricsReportLeRxErrorCount"))
    {
      uint64_t v30 = xpc_dictionary_get_uint64(v3, "kWCMBTMetricsReportLeRxErrorCount");
      [*(id *)(a1 + 40) setMLeRxErrorCount:v30];
      [*(id *)(a1 + 40) setMMovingAvgRxErrorCount:((v30+ (void)objc_msgSend(*(id *)(a1 + 40), "mMovingAvgRxErrorCount")* ((uint64_t)objc_msgSend(v4, "dataBtMovingAvgAlphaDenum") - 1))/ (unint64_t)objc_msgSend(v4, "dataBtMovingAvgAlphaDenum"))];
    }
    else
    {
      [*(id *)(a1 + 40) setMLeRxErrorCount:0];
    }
    if (xpc_dictionary_get_value(v3, "kWCMBTMetricsReportLeCoexDenialCount"))
    {
      uint64_t v31 = xpc_dictionary_get_uint64(v3, "kWCMBTMetricsReportLeCoexDenialCount");
      long long v32 = *(void **)(a1 + 40);
    }
    else
    {
      long long v32 = *(void **)(a1 + 40);
      uint64_t v31 = 0;
    }
    [v32 setMLeCoexDenialCount:v31];
    goto LABEL_56;
  }

  return +[WCM_Logging logLevel:0 message:@"handleBTMetricsRpt: Error Getting BT metrics!!!"];
}

id sub_10009DCF4(uint64_t a1)
{
  xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 32), "kMessageArgs");
  if (value)
  {
    unsigned int v3 = value;
    if (xpc_dictionary_get_value(value, "kWCMBTPhyReport_LE_PHY_RATE")) {
      [*(id *)(a1 + 40) setMBtPhyRate:xpc_dictionary_get_uint64(v3, "kWCMBTPhyReport_LE_PHY_RATE")];
    }
    if (xpc_dictionary_get_value(v3, "kWCMBTPhyReport_CLASSIC_PHY_RATE")) {
      [*(id *)(a1 + 40) setMBtPhyRate:xpc_dictionary_get_uint64(v3, "kWCMBTPhyReport_CLASSIC_PHY_RATE")];
    }
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, @"BTMetrics: BtPhyRate %llu", [*(id *)(a1 + 40) mBtPhyRate]);
  }
  else
  {
    return +[WCM_Logging logLevel:0 message:@"handleBTPhyRpt: Error Getting Args"];
  }
}

void sub_10009FD68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10009FD88(uint64_t a1, void *a2)
{
  id v3 = a2;
  WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 40));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    id v6 = WeakRetained[4];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10009FE7C;
    block[3] = &unk_10020FD18;
    id v8 = v3;
    id v9 = v5;
    id v10 = *(id *)(a1 + 32);
    dispatch_async(v6, block);
  }
  else
  {
    +[WCM_Logging logLevel:24 message:@"ProximityLinkEval: ClientCBDeviceHandler: strongSelf does not exist"];
  }
}

void sub_10009FE7C(uint64_t a1)
{
  +[WCM_Logging logLevel:24, @"ProximityLinkEval: ClientCBDeviceHandler: callback, initialized for CBDevice %@", *(void *)(a1 + 32) message];
  id v2 = [*(id *)(*(void *)(a1 + 40) + 40) getRSSI];
  if (v2 != -1)
  {
    id v3 = v2;
    if (!*(void *)(*(void *)(a1 + 40) + 16))
    {
      +[WCM_Logging logLevel:24 message:@"ProximityLinkEval: ClientCBDeviceHandler: initializing mRSSIDict"];
      uint64_t v4 = +[NSMutableDictionary dictionary];
      uint64_t v5 = *(void *)(a1 + 48);
      id v6 = *(void **)(v5 + 16);
      *(void *)(v5 + 16) = v4;
    }
    id v17 = +[NSMutableDictionary dictionary];
    double v7 = +[NSNumber numberWithInt:v3];
    [v17 setObject:v7 forKey:@"btRssi"];

    id v8 = [*(id *)(a1 + 32) model];
    [v17 setObject:v8 forKey:@"model"];

    id v9 = *(void **)(*(void *)(a1 + 40) + 16);
    id v10 = [*(id *)(a1 + 32) idsDeviceID];
    [v9 setObject:v17 forKey:v10];

    double v11 = [*(id *)(a1 + 32) idsDeviceID];
    double v12 = [*(id *)(a1 + 32) model];
    +[WCM_Logging logLevel:24, @"ProximityLinkEval: ClientCBDeviceHandler: RSSI Stats collected: DeviceID %@, Model %@, btRssi %d", v11, v12, v3 message];

    id v13 = [*(id *)(a1 + 32) model];
    double v14 = [v13 lowercaseString];
    LODWORD(v9) = [v14 containsString:@"iphone"];

    if (v9)
    {
      double v15 = *(void **)(*(void *)(a1 + 40) + 48);
      double v16 = [*(id *)(a1 + 32) idsDeviceID];
      [v15 addObject:v16];
    }
  }
}

id sub_1000A0278(uint64_t a1)
{
  v21[0] = @"btRssi";
  uint64_t v2 = [[*(id *)(a1 + 32) valueForKey:];
  if (v2)
  {
    CFStringRef v3 = [*(id *)(a1 + 32) valueForKey:@"btRssi"];
  }
  else
  {
    CFStringRef v3 = @"UNKNOWN";
  }
  uint64_t v19 = (__CFString *)v3;
  v22[0] = v3;
  v22[1] = @"WiFi";
  v21[1] = @"linkType";
  v21[2] = @"phoneBatteryLife";
  uint64_t v4 = [*(id *)(a1 + 32) valueForKey:@"batteryLife"];
  if (v4)
  {
    CFStringRef v5 = [*(id *)(a1 + 32) valueForKey:@"batteryLife"];
  }
  else
  {
    CFStringRef v5 = @"UNKNOWN";
  }
  uint64_t v18 = (__CFString *)v5;
  v22[2] = v5;
  v21[3] = @"signalBar";
  id v6 = [*(id *)(a1 + 32) valueForKey:@"signalStrength"];
  if (v6)
  {
    double v7 = [*(id *)(a1 + 32) valueForKey:@"signalStrength"];
  }
  else
  {
    double v7 = @"UNKNOWN";
  }
  v22[3] = v7;
  v21[4] = @"ratType";
  id v8 = [*(id *)(a1 + 32) valueForKey:@"networkType"];
  uint64_t v20 = (void *)v2;
  if (v8)
  {
    id v9 = *(void **)(a1 + 40);
    id v17 = [*(id *)(a1 + 32) valueForKey:@"networkType"];
    [v9 nameForNetworkType:];
    id v10 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v10 = @"UNKNOWN_RADIO";
  }
  v22[4] = v10;
  v21[5] = @"wifiRssi";
  double v11 = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 40) + 56)];
  v22[5] = v11;
  void v21[6] = @"wifiSnr";
  double v12 = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 40) + 60)];
  v22[6] = v12;
  v21[7] = @"cca";
  id v13 = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 40) + 64)];
  v22[7] = v13;
  v21[8] = @"devicePointOfInterest";
  double v14 = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 40) + 68)];
  v22[8] = v14;
  double v15 = +[NSDictionary dictionaryWithObjects:v22 forKeys:v21 count:9];

  if (v8)
  {
  }
  if (v6) {

  }
  if (v4) {
  if (v20)
  }

  return v15;
}

void sub_1000A0AC0(uint64_t a1)
{
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    id obj = *(id *)(a1 + 32);
    id v25 = [obj countByEnumeratingWithState:&v27 objects:v31 count:16];
    if (v25)
    {
      uint64_t v24 = *(void *)v28;
      do
      {
        for (uint64_t i = 0; i != v25; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v28 != v24) {
            objc_enumerationMutation(obj);
          }
          CFStringRef v3 = *(void **)(*((void *)&v27 + 1) + 8 * i);
          uint64_t v4 = +[NSMutableDictionary dictionary];
          CFStringRef v5 = [v3 deviceName];
          [v4 setObject:v5 forKey:@"deviceName"];

          id v6 = [v3 model];
          [v4 setObject:v6 forKey:@"model"];

          double v7 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v3 networkType]);
          [v4 setObject:v7 forKey:@"networkType"];

          id v8 = [v3 batteryLife];
          [v4 setObject:v8 forKey:@"batteryLife"];

          id v9 = [v3 signalStrength];
          [v4 setObject:v9 forKey:@"signalStrength"];

          id v10 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v3 group]);
          [v4 setObject:v10 forKey:@"group"];

          double v11 = (void *)WeakRetained[3];
          double v12 = [v3 deviceIdentifier];
          [v11 setObject:v4 forKey:v12];

          id v13 = [v3 deviceIdentifier];
          double v14 = [v3 deviceName];
          double v15 = [v3 model];
          unsigned int v16 = [v3 networkType];
          id v17 = [v3 batteryLife];
          uint64_t v18 = [v3 signalStrength];
          +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, @"ProximityLinkEval: session: PHS Stats collected: deviceID %@, deviceName %@, model %@, networkType %d, batteryLife %@, signalStrength %@, group %ld", v13, v14, v15, v16, v17, v18, [v3 group]);

          uint64_t v19 = [v3 model];
          uint64_t v20 = [v19 lowercaseString];
          LODWORD(v13) = [v20 containsString:@"iphone"];

          if (v13)
          {
            uint64_t v21 = (void *)WeakRetained[6];
            uint64_t v22 = [v3 deviceIdentifier];
            [v21 addObject:v22];
          }
        }
        id v25 = [obj countByEnumeratingWithState:&v27 objects:v31 count:16];
      }
      while (v25);
    }
  }
  else
  {
    +[WCM_Logging logLevel:24 message:@"ProximityLinkEval: session: strongSelf does not exist"];
  }
}

void sub_1000A0FF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A1120(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A1264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A1514(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A16D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1000A1710(uint64_t a1)
{
  +[WCM_Logging logLevel:22 message:@"DataStoreManager: Writing to data store"];
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) persistentContainer];
  CFStringRef v3 = [v2 viewContext];
  uint64_t v4 = +[NSEntityDescription insertNewObjectForEntityForName:@"CoreDataStore" inManagedObjectContext:v3];

  CFStringRef v5 = [*(id *)(a1 + 40) objectForKey:@"cellID"];

  if (v5)
  {
    id v6 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"cellID"];
    [v4 setCellID:v6];
  }
  double v7 = [*(id *)(a1 + 40) objectForKey:@"bssid"];

  if (v7)
  {
    id v8 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"bssid"];
    [v4 setBssid:v8];
  }
  id v9 = [*(id *)(a1 + 40) objectForKey:@"cell_backhaul"];

  if (v9)
  {
    id v10 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"cell_backhaul"];
    [v4 setCell_backhaul:[v10 intValue]];
  }
  double v11 = [*(id *)(a1 + 40) objectForKey:@"wifi_backhaul"];

  if (v11)
  {
    double v12 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"wifi_backhaul"];
    [v4 setWifi_backhaul:(int)[v12 intValue]];
  }
  id v13 = [*(id *)(a1 + 40) objectForKey:@"tcpRTT"];

  if (v13)
  {
    double v14 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"tcpRTT"];
    [v4 setTcpRTT:[v14 intValue]];
  }
  double v15 = [*(id *)(*(void *)(a1 + 32) + 8) persistentContainer];
  unsigned int v16 = [v15 viewContext];
  id v19 = 0;
  [v16 save:&v19];
  id v17 = v19;

  +[WCM_Logging logLevel:22 message:@"DataStoreManager: Write: No Error saving context"];
  uint64_t v18 = *(void *)(a1 + 48);
  if (v18) {
    (*(void (**)(uint64_t, uint64_t))(v18 + 16))(v18, 1);
  }
}

void sub_1000A19A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A1C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1000A1C70(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  CFStringRef v3 = [*(id *)(a1 + 40) objectForKeyedSubscript:*(void *)(a1 + 48)];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_1000A2128;
  v18[3] = &unk_10020FE28;
  id v19 = *(id *)(a1 + 56);
  [v2 fetchObjectsForCellID:v3 completionHandler:v18];

  uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 24);
  if (v4)
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"DataStoreManager: number of fecthed objects: %lu", [v4 count]);
    if (![*(id *)(*(void *)(a1 + 32) + 24) count])
    {
      +[WCM_Logging logLevel:22 message:@"DataStoreManager: The given cellID not found to update. Writing this record to the data store."];
      [*(id *)(a1 + 32) write:*(void *)(a1 + 40) completionHandler:*(void *)(a1 + 56)];
      goto LABEL_13;
    }
    if ([*(id *)(*(void *)(a1 + 32) + 24) count] == (id)1)
    {
      CFStringRef v5 = [*(id *)(*(void *)(a1 + 32) + 24) objectAtIndex:0];
      id v13 = [v5 valueForKey:@"cellID"];
      double v14 = [v5 valueForKey:@"bssid"];
      double v15 = [v5 valueForKey:@"cell_backhaul"];
      unsigned int v16 = [v5 valueForKey:@"wifi_backhaul"];
      id v17 = [v5 valueForKey:@"tcpRTT"];
      +[WCM_Logging logLevel:message:](WCM_Logging, @"DataStoreManager: the current record for given cellID is %@, %@, %d, %d, %d", v13, v14, [v15 intValue], objc_msgSend(v16, "intValue"), objc_msgSend(v17, "intValue"));
      v20[0] = @"cellID";
      id v6 = [v5 valueForKey:@"cellID"];
      v21[0] = v6;
      v20[1] = @"bssid";
      double v7 = [v5 valueForKey:@"bssid"];
      v21[1] = v7;
      v20[2] = @"cell_backhaul";
      id v8 = [v5 valueForKey:@"cell_backhaul"];
      v21[2] = v8;
      v20[3] = @"wifi_backhaul";
      id v9 = [v5 valueForKey:@"wifi_backhaul"];
      v21[3] = v9;
      v20[4] = @"tcpRTT";
      id v10 = [v5 valueForKey:];
      v21[4] = v10;
      double v11 = +[NSDictionary dictionaryWithObjects:v21 forKeys:v20 count:5];

      if ([v11 isEqualToDictionary:*(void *)(a1 + 40)])
      {
        +[WCM_Logging logLevel:22 message:@"DataStoreManager: Update: No change in field values"];
      }
      else
      {
        +[WCM_Logging logLevel:22 message:@"DataStoreManager: Update record for given bssid"];
        [*(id *)(a1 + 32) write:*(void *)(a1 + 40) completionHandler:*(void *)(a1 + 56)];
      }

      goto LABEL_13;
    }
    +[WCM_Logging logLevel:22 message:@"DataStoreManager: Update: Number of records > 1 for given bssid to update"];
  }
  else
  {
    +[WCM_Logging logLevel:22 message:@"DataStoreManager: No Records found to update"];
  }
  uint64_t v12 = *(void *)(a1 + 56);
  if (v12) {
    (*(void (**)(uint64_t, void))(v12 + 16))(v12, 0);
  }
LABEL_13:
}

void sub_1000A2050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000A2128(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
  {
    xpc_object_t result = *(void *)(result + 32);
    if (result) {
      return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
    }
  }
  return result;
}

void sub_1000A225C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1000A2298(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_1000A26A0;
  v20[3] = &unk_10020FE78;
  v20[4] = v2;
  id v21 = *(id *)(a1 + 48);
  [v2 fetchObjectsForCellID:v3 completionHandler:v20];
  if ([*(id *)(*(void *)(a1 + 32) + 24) count])
  {
    if ([*(id *)(*(void *)(a1 + 32) + 24) count] == (id)1)
    {
      +[WCM_Logging logLevel:22, @"DataStoreManager: Record for given cellID %@ found", *(void *)(a1 + 40) message];
      uint64_t v4 = [*(id *)(*(void *)(a1 + 32) + 24) lastObject];
      CFStringRef v5 = [v4 valueForKey:@"cellID"];
      id v6 = [v4 valueForKey:@"bssid"];
      double v7 = [v4 valueForKey:@"cell_backhaul"];
      id v8 = [v7 intValue];
      id v9 = [v4 valueForKey:@"wifi_backhaul"];
      id v10 = [v9 intValue];
      double v11 = [v4 valueForKey:@"tcpRTT"];
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, @"DataStoreManager: the current record for given cellID is %@, %@, %d, %d, %d", v5, v6, v8, v10, [v11 intValue]);

      uint64_t v12 = *(void *)(a1 + 48);
      if (v12)
      {
        v22[0] = @"cellID";
        id v13 = [v4 valueForKey:];
        v23[0] = v13;
        v22[1] = @"bssid";
        double v14 = [v4 valueForKey:];
        v23[1] = v14;
        v22[2] = @"cell_backhaul";
        double v15 = [v4 valueForKey:x0];
        v23[2] = v15;
        v22[3] = @"wifi_backhaul";
        unsigned int v16 = [v4 valueForKey:];
        v23[3] = v16;
        v22[4] = @"tcpRTT";
        id v17 = [v4 valueForKey:];
        v23[4] = v17;
        uint64_t v18 = +[NSDictionary dictionaryWithObjects:v23 forKeys:v22 count:5];
        (*(void (**)(uint64_t, void *))(v12 + 16))(v12, v18);
      }
      goto LABEL_10;
    }
    +[WCM_Logging logLevel:22, @"DataStoreManager: Number of records > 1 for given cellID %@", *(void *)(a1 + 40) message];
  }
  else
  {
    +[WCM_Logging logLevel:22, @"DataStoreManager: The given cellID %@ not found", *(void *)(a1 + 40) message];
  }
  uint64_t v19 = *(void *)(a1 + 48);
  if (v19) {
    (*(void (**)(uint64_t, void))(v19 + 16))(v19, 0);
  }
LABEL_10:
}

void sub_1000A25EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000A26A0(uint64_t result, int a2)
{
  if (!a2 || !*(void *)(*(void *)(result + 32) + 24))
  {
    xpc_object_t result = *(void *)(result + 40);
    if (result) {
      return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
    }
  }
  return result;
}

void sub_1000A27C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NSDictionary *sub_1000A30D4(uint64_t a1)
{
  v3[0] = @"btConnectionCount";
  v4[0] = +[NSNumber numberWithUnsignedInteger:*(void *)(*(void *)(a1 + 32) + 8)];
  v3[1] = @"A2DPMaxDeviceCount";
  v4[1] = +[NSNumber numberWithUnsignedInteger:*(void *)(*(void *)(a1 + 32) + 16)];
  v3[2] = @"ESCOMaxDeviceCount";
  void v4[2] = +[NSNumber numberWithUnsignedInteger:*(void *)(*(void *)(a1 + 32) + 24)];
  v3[3] = @"LEAMaxDeviceCount";
  void v4[3] = +[NSNumber numberWithUnsignedInteger:*(void *)(*(void *)(a1 + 32) + 56)];
  void v3[4] = @"LEMaxDeviceCount";
  v4[4] = +[NSNumber numberWithUnsignedInteger:*(void *)(*(void *)(a1 + 32) + 48)];
  v3[5] = @"SCOMaxDeviceCount";
  void v4[5] = +[NSNumber numberWithUnsignedInteger:*(void *)(*(void *)(a1 + 32) + 32)];
  v3[6] = @"HIDMaxDeviceCount";
  v4[6] = +[NSNumber numberWithUnsignedInteger:*(void *)(*(void *)(a1 + 32) + 40)];
  v3[7] = @"LLAMaxDeviceCount";
  v4[7] = +[NSNumber numberWithUnsignedInteger:*(void *)(*(void *)(a1 + 32) + 64)];
  v3[8] = @"hasBtConnection";
  void v4[8] = +[NSNumber numberWithBool:*(void *)(*(void *)(a1 + 32) + 8) != 0];
  void v3[9] = @"hasA2DPDevice";
  void v4[9] = +[NSNumber numberWithBool:*(void *)(*(void *)(a1 + 32) + 16) != 0];
  v3[10] = @"hasESCODevice";
  v4[10] = +[NSNumber numberWithBool:*(void *)(*(void *)(a1 + 32) + 24) != 0];
  v3[11] = @"hasLEADevice";
  v4[11] = +[NSNumber numberWithBool:*(void *)(*(void *)(a1 + 32) + 56) != 0];
  v3[12] = @"hasLEDevice";
  v4[12] = +[NSNumber numberWithBool:*(void *)(*(void *)(a1 + 32) + 48) != 0];
  v3[13] = @"hasSCODevice";
  v4[13] = +[NSNumber numberWithBool:*(void *)(*(void *)(a1 + 32) + 32) != 0];
  v3[14] = @"hasHIDDevice";
  v4[14] = +[NSNumber numberWithBool:*(void *)(*(void *)(a1 + 32) + 40) != 0];
  v3[15] = @"hasLLADevice";
  v4[15] = +[NSNumber numberWithBool:*(void *)(*(void *)(a1 + 32) + 64) != 0];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:16];
}

id sub_1000A368C()
{
  uint64_t v4 = 0;
  CFStringRef v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_10027D118;
  uint64_t v7 = qword_10027D118;
  if (!qword_10027D118)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000A4230;
    v3[3] = &unk_10020DAF8;
    void v3[4] = &v4;
    sub_1000A4230((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_1000A3758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000A3BAC()
{
  uint64_t v4 = 0;
  CFStringRef v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_10027D128;
  uint64_t v7 = qword_10027D128;
  if (!qword_10027D128)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000A43F0;
    v3[3] = &unk_10020DAF8;
    void v3[4] = &v4;
    sub_1000A43F0((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_1000A3C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000A3E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000A4204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_1000A4230(uint64_t a1)
{
  sub_1000A4288();
  Class result = objc_getClass("MLFeatureValue");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_10013AA48();
  }
  qword_10027D118 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1000A4288()
{
  v0[0] = 0;
  if (!qword_10027D120)
  {
    v0[1] = _NSConcreteStackBlock;
    v0[2] = (void *)3221225472;
    v0[3] = sub_1000A437C;
    v0[4] = &unk_10020DB30;
    v0[5] = v0;
    long long v1 = off_10020FE98;
    uint64_t v2 = 0;
    qword_10027D120 = _sl_dlopen();
  }
  if (!qword_10027D120) {
    sub_10013AAC4(v0);
  }
  if (v0[0]) {
    free(v0[0]);
  }
}

uint64_t sub_1000A437C()
{
  uint64_t result = _sl_dlopen();
  qword_10027D120 = result;
  return result;
}

Class sub_1000A43F0(uint64_t a1)
{
  sub_1000A4288();
  Class result = objc_getClass("MLModel");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_10013AB44();
  }
  qword_10027D128 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1000A4448(uint64_t a1)
{
  sub_1000A4288();
  Class result = objc_getClass("MLPredictionOptions");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_10013ABC0();
  }
  qword_10027D130 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1000A44A0(uint64_t a1)
{
  sub_1000A4288();
  Class result = objc_getClass("MLArrayBatchProvider");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_10013AC3C();
  }
  qword_10027D138 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1000A44F8(void *a1, uint64_t a2)
{
  *a1 = a2;
  return a1 + 1;
}

uint64_t sub_1000A4500(uint64_t a1, const unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4, a4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4, v7);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)8, v8);
  uint64_t result = a1 + 16;
  *(void *)(a3 + 8) = *(void *)(a1 + 8);
  return result;
}

uint64_t sub_1000A4574(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  return a1 + 16;
}

uint64_t sub_1000A4594()
{
  return 16;
}

uint64_t sub_1000A459C(uint64_t *a1, int a2, uint64_t a3, unint64_t a4)
{
  v5[0] = 0;
  v5[1] = 0;
  *a1 = sub_1000A4500(*a1, (const unsigned __int8 *)(*a1 + a2), (uint64_t)v5, a4);
  return v5[0];
}

void sub_1000A45E0(void *a1)
{
  __cxa_begin_catch(a1);
  *long long v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000A45CCLL);
}

uint64_t sub_1000A45F0()
{
  return 19;
}

uint64_t *sub_1000A45F8(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(_DWORD *)uint64_t v2 = *(_DWORD *)a2;
  *(_DWORD *)(v2 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(v2 + 8) = *(void *)(a2 + 8);
  *uint64_t result = v2 + 16;
  return result;
}

_DWORD *sub_1000A4620(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t sub_1000A462C(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  CFStringRef v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4, a4);
  uint64_t result = *(unsigned int *)v5;
  *a1 = (tlv *)((char *)v5 + 4);
  return result;
}

void sub_1000A4668(void *a1)
{
  __cxa_begin_catch(a1);
  *long long v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000A465CLL);
}

_DWORD **sub_1000A467C(_DWORD **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  *uint64_t result = v2 + 1;
  return result;
}

uint64_t sub_1000A4690(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  CFStringRef v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4, a4);
  uint64_t result = *(unsigned int *)v5;
  *a1 = (tlv *)((char *)v5 + 4);
  return result;
}

void sub_1000A46CC(void *a1)
{
  __cxa_begin_catch(a1);
  *long long v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000A46C0);
}

std::string::value_type *sub_1000A46E0(tlv *a1, const unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a1;
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1, a4);
  unsigned int v7 = *(unsigned __int8 *)v6;
  uint64_t v6 = (tlv *)((char *)v6 + 1);
  tlv::throwIfNotEnoughBytes(v6, a2, (const unsigned __int8 *)v7, v8);
  id v9 = (char *)v6 + v7;
  sub_1000A5AA4((std::string *)a3, (std::string::value_type *)v6, v9, v7);
  tlv::throwIfNotEnoughBytes((tlv *)v9, a2, (const unsigned __int8 *)8, v10);
  *(void *)(a3 + 24) = *(void *)v9;
  tlv::throwIfNotEnoughBytes((tlv *)(v9 + 8), a2, (const unsigned __int8 *)4, v11);
  *(_DWORD *)(a3 + 32) = *((_DWORD *)v9 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(v9 + 12), a2, (const unsigned __int8 *)4, v12);
  *(_DWORD *)(a3 + 36) = *((_DWORD *)v9 + 3);
  tlv::throwIfNotEnoughBytes((tlv *)(v9 + 16), a2, (const unsigned __int8 *)8, v13);
  *(void *)(a3 + 40) = *((void *)v9 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(v9 + 24), a2, (const unsigned __int8 *)8, v14);
  *(void *)(a3 + 48) = *((void *)v9 + 3);
  tlv::throwIfNotEnoughBytes((tlv *)(v9 + 32), a2, (const unsigned __int8 *)1, v15);
  uint64_t result = v9 + 33;
  *(unsigned char *)(a3 + 56) = v9[32] != 0;
  return result;
}

unsigned char *sub_1000A47E8(unsigned char *a1, unsigned char *a2)
{
  uint64_t v2 = a2;
  LOBYTE(v3) = a2[23];
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *((void *)a2 + 1);
  }
  *a1 = v3;
  uint64_t v4 = a1 + 1;
  size_t v5 = *((void *)a2 + 1);
  if ((char)a2[23] >= 0)
  {
    size_t v6 = a2[23];
  }
  else
  {
    a2 = *(unsigned char **)a2;
    size_t v6 = v5;
  }
  memcpy(a1 + 1, a2, v6);
  uint64_t v7 = v2[23];
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *((void *)v2 + 1);
  }
  unint64_t v8 = &v4[v7];
  *(void *)unint64_t v8 = *((void *)v2 + 3);
  *((_DWORD *)v8 + 2) = *((_DWORD *)v2 + 8);
  *((_DWORD *)v8 + 3) = *((_DWORD *)v2 + 9);
  *((void *)v8 + 2) = *((void *)v2 + 5);
  *((void *)v8 + 3) = *((void *)v2 + 6);
  uint64_t result = v8 + 33;
  v8[32] = v2[56];
  return result;
}

uint64_t sub_1000A4890(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *(void *)(a1 + 8);
  }
  return v1 + 34;
}

std::string::value_type *sub_1000A48AC@<X0>(tlv **a1@<X0>, int a2@<W1>, unint64_t a3@<X3>, _OWORD *a4@<X8>)
{
  *(_OWORD *)((char *)a4 + 41) = 0u;
  a4[1] = 0u;
  a4[2] = 0u;
  *a4 = 0u;
  uint64_t result = sub_1000A46E0(*a1, (const unsigned __int8 *)*a1 + a2, (uint64_t)a4, a3);
  *a1 = (tlv *)result;
  return result;
}

void sub_1000A48F4(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000A48E8);
}

void sub_1000A4904(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000A4920(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *(void *)(a1 + 8);
  }
  return v1 + 37;
}

unsigned char *sub_1000A493C(unsigned char **a1, unsigned char *a2)
{
  uint64_t result = sub_1000A47E8(*a1, a2);
  *a1 = result;
  return result;
}

std::string::value_type *sub_1000A4968(tlv *a1, const unsigned __int8 *a2, uint64_t *a3, unint64_t a4)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1, a4);
  unsigned int v8 = *(unsigned __int8 *)a1;
  uint64_t v7 = (char *)a1 + 1;
  sub_1000A5C18(a3, v8);
  uint64_t v10 = *a3;
  uint64_t v11 = a3[1];
  while (1)
  {
    uint64_t result = v7;
    if (v10 == v11) {
      break;
    }
    uint64_t v7 = sub_1000A46E0((tlv *)v7, a2, v10, v9);
    v10 += 64;
  }
  return result;
}

unsigned char *sub_1000A49D4(unsigned char *a1, _DWORD *a2)
{
  *a1 = (a2[2] - *a2) >> 6;
  uint64_t result = a1 + 1;
  uint64_t v3 = *(unsigned char **)a2;
  uint64_t v4 = (unsigned char *)*((void *)a2 + 1);
  while (v3 != v4)
  {
    uint64_t result = sub_1000A47E8(result, v3);
    v3 += 64;
  }
  return result;
}

uint64_t sub_1000A4A20(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 1;
  }
  uint64_t v3 = 0;
  do
  {
    uint64_t v4 = *(unsigned __int8 *)(v1 + 23);
    if ((v4 & 0x80u) != 0) {
      uint64_t v4 = *(void *)(v1 + 8);
    }
    v3 += v4 + 34;
    v1 += 64;
  }
  while (v1 != v2);
  return v3 + 1;
}

std::string::value_type *sub_1000A4A68@<X0>(tlv **a1@<X0>, int a2@<W1>, unint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t result = sub_1000A4968(*a1, (const unsigned __int8 *)*a1 + a2, a4, a3);
  *a1 = (tlv *)result;
  return result;
}

void sub_1000A4AB0(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000A4AA0);
}

void sub_1000A4AC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000A5B74((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A4AD8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 4;
  }
  uint64_t v3 = 0;
  do
  {
    uint64_t v4 = *(unsigned __int8 *)(v1 + 23);
    if ((v4 & 0x80u) != 0) {
      uint64_t v4 = *(void *)(v1 + 8);
    }
    v3 += v4 + 34;
    v1 += 64;
  }
  while (v1 != v2);
  return v3 + 4;
}

unsigned char *sub_1000A4B20(unsigned char **a1, _DWORD *a2)
{
  uint64_t result = sub_1000A49D4(*a1, a2);
  *a1 = result;
  return result;
}

uint64_t sub_1000A4B4C(uint64_t a1, const unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4, a4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4, v7);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)8, v8);
  *(void *)(a3 + 8) = *(void *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 16), a2, (const unsigned __int8 *)8, v9);
  uint64_t result = a1 + 24;
  *(void *)(a3 + 16) = *(void *)(a1 + 16);
  return result;
}

uint64_t sub_1000A4BD8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1 + 24;
}

uint64_t sub_1000A4C00()
{
  return 24;
}

uint64_t sub_1000A4C08@<X0>(uint64_t *a1@<X0>, int a2@<W1>, unint64_t a3@<X3>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t result = sub_1000A4B4C(*a1, (const unsigned __int8 *)(*a1 + a2), (uint64_t)a4, a3);
  *a1 = result;
  return result;
}

void sub_1000A4C44(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
}

uint64_t sub_1000A4C68()
{
  return 27;
}

uint64_t *sub_1000A4C70(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(_DWORD *)uint64_t v2 = *(_DWORD *)a2;
  *(_DWORD *)(v2 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(v2 + 8) = *(void *)(a2 + 8);
  *(void *)(v2 + 16) = *(void *)(a2 + 16);
  *uint64_t result = v2 + 24;
  return result;
}

uint64_t sub_1000A4CA0(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  size_t v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)8, a4);
  uint64_t result = *(void *)v5;
  *a1 = (tlv *)((char *)v5 + 8);
  return result;
}

void sub_1000A4CDC(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000A4CD0);
}

uint64_t sub_1000A4CF0(uint64_t a1, const unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4, a4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4, v7);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)4, v8);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)4, v9);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 12);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 16), a2, (const unsigned __int8 *)2, v10);
  *(_WORD *)(a3 + 16) = *(_WORD *)(a1 + 16);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 18), a2, (const unsigned __int8 *)8, v11);
  *(void *)(a3 + 24) = *(void *)(a1 + 18);
  return a1 + 26;
}

uint64_t sub_1000A4DAC(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 18) = *(void *)(a2 + 24);
  return a1 + 26;
}

uint64_t sub_1000A4DE4()
{
  return 26;
}

uint64_t sub_1000A4DEC@<X0>(uint64_t *a1@<X0>, int a2@<W1>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 24) = 0;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_WORD *)(a4 + 16) = 0;
  uint64_t result = sub_1000A4CF0(*a1, (const unsigned __int8 *)(*a1 + a2), a4, a3);
  *a1 = result;
  return result;
}

void sub_1000A4E2C(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
}

uint64_t sub_1000A4E50()
{
  return 29;
}

uint64_t *sub_1000A4E58(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(_DWORD *)uint64_t v2 = *(_DWORD *)a2;
  *(_DWORD *)(v2 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(v2 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v2 + 12) = *(_DWORD *)(a2 + 12);
  *(_WORD *)(v2 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(v2 + 18) = *(void *)(a2 + 24);
  *uint64_t result = v2 + 26;
  return result;
}

uint64_t sub_1000A4E98(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  size_t v5 = *a1;
  size_t v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)4, a4);
  unsigned int v7 = *(_DWORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 4), v6, (const unsigned __int8 *)4, v8);
  uint64_t v9 = *((unsigned int *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 8);
  return (v9 << 32) | v7;
}

void sub_1000A4F08(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000A4EF0);
}

uint64_t sub_1000A4F1C(uint64_t a1, const unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4, a4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)1, v7);
  *(unsigned char *)(a3 + 4) = *(unsigned char *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 5), a2, (const unsigned __int8 *)1, v8);
  *(unsigned char *)(a3 + 5) = *(unsigned char *)(a1 + 5);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 6), a2, (const unsigned __int8 *)1, v9);
  *(unsigned char *)(a3 + 6) = *(unsigned char *)(a1 + 6);
  return a1 + 7;
}

uint64_t sub_1000A4FA8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a1 + 5) = *(unsigned char *)(a2 + 5);
  *(unsigned char *)(a1 + 6) = *(unsigned char *)(a2 + 6);
  return a1 + 7;
}

uint64_t sub_1000A4FD4(uint64_t *a1, int a2, uint64_t a3, unint64_t a4)
{
  *(_DWORD *)((char *)&v5 + 3) = 0;
  LODWORD(v5) = 0;
  *a1 = sub_1000A4F1C(*a1, (const unsigned __int8 *)(*a1 + a2), (uint64_t)&v5, a4);
  return v5;
}

void sub_1000A501C(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000A5008);
}

uint64_t sub_1000A502C()
{
  return 10;
}

uint64_t *sub_1000A5034(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(_DWORD *)uint64_t v2 = *(_DWORD *)a2;
  *(unsigned char *)(v2 + 4) = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(v2 + 5) = *(unsigned char *)(a2 + 5);
  *(unsigned char *)(v2 + 6) = *(unsigned char *)(a2 + 6);
  *uint64_t result = v2 + 7;
  return result;
}

uint64_t sub_1000A5064(uint64_t a1, const unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4, a4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)1, v7);
  *(unsigned char *)(a3 + 4) = *(unsigned char *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 5), a2, (const unsigned __int8 *)1, v8);
  *(unsigned char *)(a3 + 5) = *(unsigned char *)(a1 + 5);
  return a1 + 6;
}

uint64_t sub_1000A50D8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a1 + 5) = *(unsigned char *)(a2 + 5);
  return a1 + 6;
}

uint64_t sub_1000A50FC(uint64_t *a1, int a2, uint64_t a3, unint64_t a4)
{
  LODWORD(v5) = 0;
  WORD2(v5) = 0;
  *a1 = sub_1000A5064(*a1, (const unsigned __int8 *)(*a1 + a2), (uint64_t)&v5, a4);
  return v5;
}

void sub_1000A5144(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000A5130);
}

uint64_t *sub_1000A5154(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(_DWORD *)uint64_t v2 = *(_DWORD *)a2;
  *(unsigned char *)(v2 + 4) = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(v2 + 5) = *(unsigned char *)(a2 + 5);
  *uint64_t result = v2 + 6;
  return result;
}

uint64_t sub_1000A517C(uint64_t a1, const unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1, a4);
  *(unsigned char *)a3 = *(unsigned char *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)1, v7);
  *(unsigned char *)(a3 + 1) = *(unsigned char *)(a1 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)1, v8);
  *(unsigned char *)(a3 + 2) = *(unsigned char *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 3), a2, (const unsigned __int8 *)4, v9);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 3);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 7), a2, (const unsigned __int8 *)4, v10);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 7);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 11), a2, (const unsigned __int8 *)1, v11);
  *(unsigned char *)(a3 + 12) = *(unsigned char *)(a1 + 11);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)1, v12);
  *(unsigned char *)(a3 + 13) = *(unsigned char *)(a1 + 12);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 13), a2, (const unsigned __int8 *)4, v13);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(a1 + 13);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 17), a2, (const unsigned __int8 *)4, v14);
  *(_DWORD *)(a3 + 20) = *(_DWORD *)(a1 + 17);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 21), a2, (const unsigned __int8 *)4, v15);
  *(_DWORD *)(a3 + 24) = *(_DWORD *)(a1 + 21);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 25), a2, (const unsigned __int8 *)2, v16);
  *(_WORD *)(a3 + 28) = *(_WORD *)(a1 + 25);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 27), a2, (const unsigned __int8 *)1, v17);
  *(unsigned char *)(a3 + 30) = *(unsigned char *)(a1 + 27);
  return a1 + 28;
}

uint64_t sub_1000A52C8(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(_DWORD *)(a1 + 3) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 7) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 11) = *(unsigned char *)(a2 + 12);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 13);
  *(_DWORD *)(a1 + 13) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 17) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 21) = *(_DWORD *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 28);
  *(unsigned char *)(a1 + 27) = *(unsigned char *)(a2 + 30);
  return a1 + 28;
}

uint64_t sub_1000A5334()
{
  return 28;
}

uint64_t sub_1000A533C@<X0>(uint64_t *a1@<X0>, int a2@<W1>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  *(_WORD *)a4 = 0;
  *(unsigned char *)(a4 + 2) = 0;
  *(void *)(a4 + 4) = 0;
  *(_WORD *)(a4 + 12) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 23) = 0;
  uint64_t result = sub_1000A517C(*a1, (const unsigned __int8 *)(*a1 + a2), a4, a3);
  *a1 = result;
  return result;
}

void sub_1000A5388(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
}

uint64_t sub_1000A53AC()
{
  return 31;
}

uint64_t sub_1000A53B4(uint64_t *a1, uint64_t a2)
{
  uint64_t result = sub_1000A52C8(*a1, a2);
  *a1 = result;
  return result;
}

BOOL sub_1000A53E0(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  BOOL result = *(unsigned __int8 *)v5 != 0;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_1000A5424(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000A5418);
}

unint64_t sub_1000A5438(tlv *a1, const unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1, a4);
  char v9 = *(unsigned char *)a1;
  unint64_t v8 = (unint64_t)a1 + 1;
  *(unsigned char *)a3 = v9;
  for (i = (char **)(a3 + 8); v8 < (unint64_t)a2; unint64_t v8 = sub_1000A4500(v8, a2, (uint64_t)(v13 - 2), v7))
  {
    unint64_t v12 = *(void **)(a3 + 16);
    unint64_t v11 = *(void *)(a3 + 24);
    if ((unint64_t)v12 >= v11)
    {
      uint64_t v14 = ((char *)v12 - *i) >> 4;
      unint64_t v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 60) {
        sub_100057D30();
      }
      uint64_t v16 = v11 - (void)*i;
      if (v16 >> 3 > v15) {
        unint64_t v15 = v16 >> 3;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17) {
        uint64_t v18 = (char *)sub_1000A6028(a3 + 24, v17);
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v19 = &v18[16 * v14];
      *(void *)uint64_t v19 = 0;
      *((void *)v19 + 1) = 0;
      id v21 = *(char **)(a3 + 8);
      uint64_t v20 = *(char **)(a3 + 16);
      uint64_t v22 = v19;
      if (v20 != v21)
      {
        do
        {
          *((_OWORD *)v22 - 1) = *((_OWORD *)v20 - 1);
          v22 -= 16;
          v20 -= 16;
        }
        while (v20 != v21);
        uint64_t v20 = *i;
      }
      unint64_t v13 = v19 + 16;
      *(void *)(a3 + 8) = v22;
      *(void *)(a3 + 16) = v19 + 16;
      *(void *)(a3 + 24) = &v18[16 * v17];
      if (v20) {
        operator delete(v20);
      }
    }
    else
    {
      *unint64_t v12 = 0;
      v12[1] = 0;
      unint64_t v13 = v12 + 2;
    }
    *(void *)(a3 + 16) = v13;
  }
  return v8;
}

unsigned char *sub_1000A557C(unsigned char *a1, uint64_t a2)
{
  *a1 = *(unsigned char *)a2;
  BOOL result = a1 + 1;
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  while (v3 != v4)
  {
    *(_DWORD *)BOOL result = *(_DWORD *)v3;
    *((_DWORD *)result + 1) = *(_DWORD *)(v3 + 4);
    *((void *)result + 1) = *(void *)(v3 + 8);
    result += 16;
    v3 += 16;
  }
  return result;
}

unint64_t sub_1000A55B8(uint64_t a1)
{
  if (*(void *)(a1 + 16) == *(void *)(a1 + 8)) {
    return 1;
  }
  else {
    return (*(void *)(a1 + 16) - *(void *)(a1 + 8)) & 0xFFFFFFFFFFFFFFF0 | 1;
  }
}

unint64_t sub_1000A55D0@<X0>(tlv **a1@<X0>, int a2@<W1>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  *(unsigned char *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0;
  unint64_t result = sub_1000A5438(*a1, (const unsigned __int8 *)*a1 + a2, a4, a3);
  *a1 = (tlv *)result;
  return result;
}

void sub_1000A5620(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000A5610);
}

void sub_1000A5630(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1000A564C(uint64_t a1)
{
  if (*(void *)(a1 + 16) == *(void *)(a1 + 8)) {
    return 4;
  }
  else {
    return (*(void *)(a1 + 16) - *(void *)(a1 + 8)) & 0xFFFFFFFFFFFFFFF0 | 4;
  }
}

unsigned char **sub_1000A5668(unsigned char **result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *(unsigned char *)a2;
  uint64_t v3 = v2 + 1;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  while (v4 != v5)
  {
    *(_DWORD *)uint64_t v3 = *(_DWORD *)v4;
    *((_DWORD *)v3 + 1) = *(_DWORD *)(v4 + 4);
    *((void *)v3 + 1) = *(void *)(v4 + 8);
    v3 += 16;
    v4 += 16;
  }
  *unint64_t result = v3;
  return result;
}

BOOL sub_1000A56AC(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  BOOL result = *(unsigned __int8 *)v5 != 0;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_1000A56F0(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000A56E4);
}

BOOL sub_1000A5704(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  BOOL result = *(unsigned __int8 *)v5 != 0;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_1000A5748(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000A573CLL);
}

BOOL sub_1000A575C(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  BOOL result = *(unsigned __int8 *)v5 != 0;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_1000A57A0(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000A5794);
}

char *sub_1000A57B4(tlv *a1, const unsigned __int8 *a2, _DWORD *a3, unint64_t a4)
{
  *a3 = *(unsigned __int8 *)a1;
  return (char *)a1 + 1;
}

unsigned char *sub_1000A57EC(unsigned char *a1, _DWORD *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t sub_1000A57F8(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  uint64_t result = *(unsigned __int8 *)v5;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_1000A5834(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000A5828);
}

unsigned char **sub_1000A5848(unsigned char **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *a2;
  *uint64_t result = v2 + 1;
  return result;
}

uint64_t sub_1000A585C(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4, a4);
  uint64_t result = *(unsigned int *)v5;
  *a1 = (tlv *)((char *)v5 + 4);
  return result;
}

void sub_1000A5898(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000A588CLL);
}

uint64_t sub_1000A58AC(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4, a4);
  uint64_t result = *(unsigned int *)v5;
  *a1 = (tlv *)((char *)v5 + 4);
  return result;
}

void sub_1000A58E8(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000A58DCLL);
}

uint64_t sub_1000A58FC(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4, a4);
  uint64_t result = *(unsigned int *)v5;
  *a1 = (tlv *)((char *)v5 + 4);
  return result;
}

void sub_1000A5938(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000A592CLL);
}

BOOL sub_1000A594C(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  BOOL result = *(unsigned __int8 *)v5 != 0;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_1000A5990(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000A5984);
}

BOOL sub_1000A59A4(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  BOOL result = *(unsigned __int8 *)v5 != 0;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_1000A59E8(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000A59DCLL);
}

BOOL sub_1000A59FC(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  BOOL result = *(unsigned __int8 *)v5 != 0;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_1000A5A40(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000A5A34);
}

uint64_t sub_1000A5A54(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4, a4);
  uint64_t result = *(unsigned int *)v5;
  *a1 = (tlv *)((char *)v5 + 4);
  return result;
}

void sub_1000A5A90(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000A5A84);
}

void sub_1000A5AA4(std::string *this, std::string::value_type *a2, std::string::value_type *a3, std::string::size_type a4)
{
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    unint64_t v8 = this;
    if (a4 <= 0x16) {
      goto LABEL_11;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v10 = 22;
    goto LABEL_6;
  }
  unint64_t v11 = this->__r_.__value_.__r.__words[2];
  std::string::size_type v10 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v10 < a4)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
LABEL_6:
    std::string::__grow_by(this, v10, a4 - v10, size, 0, size, 0);
    this->__r_.__value_.__l.__size_ = 0;
    LOBYTE(v12) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    goto LABEL_8;
  }
  unint64_t v12 = HIBYTE(v11);
LABEL_8:
  unint64_t v8 = this;
  if ((v12 & 0x80) != 0) {
    unint64_t v8 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
LABEL_11:
  while (a2 != a3)
  {
    std::string::value_type v13 = *a2++;
    v8->__r_.__value_.__s.__data_[0] = v13;
    unint64_t v8 = (std::string *)((char *)v8 + 1);
  }
  v8->__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    this->__r_.__value_.__l.__size_ = a4;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = a4 & 0x7F;
  }
}

void sub_1000A5B74(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_1000A5BC8((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_1000A5BC8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 64)
  {
    if (*(char *)(i - 41) < 0) {
      operator delete(*(void **)(i - 64));
    }
  }
  a1[1] = v2;
}

void sub_1000A5C18(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = (v3 - *a1) >> 6;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + (a2 << 6);
      while (v3 != v6)
      {
        if (*(char *)(v3 - 41) < 0) {
          operator delete(*(void **)(v3 - 64));
        }
        v3 -= 64;
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    sub_1000A5CAC(a1, v5);
  }
}

void sub_1000A5CAC(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 6)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), a2 << 6);
      v7 += a2 << 6;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 6);
    if (v9 >> 58) {
      sub_100057D30();
    }
    uint64_t v10 = v8 >> 6;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 5 > v9) {
      unint64_t v9 = v11 >> 5;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      std::string::value_type v13 = (char *)sub_1000A5E28(v4, v12);
    }
    else {
      std::string::value_type v13 = 0;
    }
    uint64_t v14 = v13;
    unint64_t v15 = &v13[64 * v10];
    unint64_t v17 = &v13[64 * v12];
    bzero(v15, a2 << 6);
    uint64_t v16 = &v15[64 * a2];
    sub_1000A5DB0(a1, &v14);
    sub_1000A5F98((uint64_t)&v14);
  }
}

void sub_1000A5D9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000A5F98((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A5DB0(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1000A5E60((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1000A5E28(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58) {
    sub_100057E0C();
  }
  return operator new(a2 << 6);
}

uint64_t sub_1000A5E60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 64);
      *(void *)(v9 - 48) = *(void *)(a3 - 48);
      *(_OWORD *)(v9 - 64) = v10;
      *(void *)(a3 - 56) = 0;
      *(void *)(a3 - 48) = 0;
      *(void *)(a3 - 64) = 0;
      long long v11 = *(_OWORD *)(a3 - 40);
      long long v12 = *(_OWORD *)(a3 - 24);
      *(unsigned char *)(v9 - 8) = *(unsigned char *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v12;
      *(_OWORD *)(v9 - 40) = v11;
      v9 -= 64;
      v7 -= 64;
      a3 -= 64;
    }
    while (a3 != a5);
    *((void *)&v17 + 1) = v9;
  }
  char v15 = 1;
  sub_1000A5F18((uint64_t)v14);
  return a6;
}

uint64_t sub_1000A5F18(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1000A5F50(a1);
  }
  return a1;
}

void sub_1000A5F50(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 64;
  }
}

uint64_t sub_1000A5F98(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1000A5FD0(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 8;
      *(void *)(a1 + 16) = v2 - 8;
      if (*((char *)v2 - 41) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void *sub_1000A6028(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_100057E0C();
  }
  return operator new(16 * a2);
}

void sub_1000A63F0()
{
  if (*(char *)(v0 - 73) < 0) {
    operator delete(*(void **)(v0 - 96));
  }
  if (*(char *)(v0 - 49) < 0) {
    operator delete(*(void **)(v0 - 72));
  }
  operator delete();
}

id sub_1000A6444(uint64_t a1)
{
  return [*(id *)(a1 + 32) started];
}

id sub_1000A644C(uint64_t a1)
{
  return [*(id *)(a1 + 32) stopped];
}

id sub_1000A6454(uint64_t a1)
{
  return [*(id *)(a1 + 32) errored];
}

id sub_1000A6558(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) setQMIClientStatus:*(unsigned __int8 *)(*(void *)(a1 + 40) + 24)];
  if (*(void *)(*(void *)(a1 + 40) + 32) == 1)
  {
    id v3 = +[WRM_HandoverManager WRM_HandoverManagerSingleton];
    return [v3 postWRMStateToBB];
  }
  return result;
}

id sub_1000A6684(uint64_t a1)
{
  return [*(id *)(a1 + 32) setQMIClientStatus:*(unsigned __int8 *)(*(void *)(a1 + 40) + 24)];
}

void sub_1000A6838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_100060AD4((uint64_t)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

id sub_1000A6864(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 4);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v2) {
    return +[WCM_Logging logLevel:16, @"QMI.NAS.%d: failed to set NAS Indication Register. Error %d %s", *(unsigned int *)(v3 + 32), v2, qmi::asString() message];
  }
  else {
    return +[WCM_Logging logLevel:22, @"QMI.NAS.%d: set NAS Indication Register successful.", *(unsigned int *)(v3 + 32), v5, v6 message];
  }
}

void sub_1000A6A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_100060AD4((uint64_t)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

id sub_1000A6A50(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 4);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v2) {
    return +[WCM_Logging logLevel:16, @"QMI.NAS.%d: nas::SisNrAvailable::Response Error %d %s", *(unsigned int *)(v3 + 32), v2, qmi::asString() message];
  }
  else {
    return +[WCM_Logging logLevel:22, @"QMI.NAS.%d: nas::SisNrAvailable::Response successful.", *(unsigned int *)(v3 + 32), v5, v6 message];
  }
}

void sub_1000A6CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_100060AD4((uint64_t)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1000A6CE4(uint64_t a1, char **a2)
{
  uint64_t v4 = a2 + 2;
  uint64_t v3 = a2[2];
  uint64_t v5 = a2[1];
  if (v5 >= v3)
  {
    uint64_t v7 = *a2;
    uint64_t v8 = v5 - *a2;
    if (v8 <= -3) {
      goto LABEL_36;
    }
    uint64_t v9 = v8 >> 1;
    unint64_t v10 = v3 - v7;
    if (v10 <= (v8 >> 1) + 1) {
      unint64_t v11 = v9 + 1;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v10 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v12 = v11;
    }
    if (v12)
    {
      uint64_t v13 = (char *)sub_100057DD8((uint64_t)v4, v12);
      uint64_t v7 = *a2;
      uint64_t v5 = a2[1];
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[2 * v9];
    uint64_t v3 = &v13[2 * v12];
    *(_WORD *)uint64_t v14 = -1000;
    uint64_t v6 = v14 + 2;
    while (v5 != v7)
    {
      __int16 v15 = *((_WORD *)v5 - 1);
      v5 -= 2;
      *((_WORD *)v14 - 1) = v15;
      v14 -= 2;
    }
    *a2 = v14;
    a2[1] = v6;
    a2[2] = v3;
    if (v7)
    {
      operator delete(v7);
      uint64_t v3 = *v4;
    }
  }
  else
  {
    *(_WORD *)uint64_t v5 = -1000;
    uint64_t v6 = v5 + 2;
  }
  a2[1] = v6;
  if (v6 < v3)
  {
    *(_WORD *)uint64_t v6 = -150;
    long long v16 = v6 + 2;
    goto LABEL_35;
  }
  long long v17 = *a2;
  uint64_t v18 = v6 - *a2;
  if (v18 <= -3) {
LABEL_36:
  }
    sub_100057D30();
  uint64_t v19 = v18 >> 1;
  unint64_t v20 = v3 - v17;
  if (v20 <= (v18 >> 1) + 1) {
    unint64_t v21 = v19 + 1;
  }
  else {
    unint64_t v21 = v20;
  }
  if (v20 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v22 = v21;
  }
  if (v22)
  {
    double v23 = (char *)sub_100057DD8((uint64_t)v4, v22);
    long long v17 = *a2;
    uint64_t v6 = a2[1];
  }
  else
  {
    double v23 = 0;
  }
  uint64_t v24 = &v23[2 * v19];
  id v25 = &v23[2 * v22];
  *(_WORD *)uint64_t v24 = -150;
  long long v16 = v24 + 2;
  while (v6 != v17)
  {
    __int16 v26 = *((_WORD *)v6 - 1);
    v6 -= 2;
    *((_WORD *)v24 - 1) = v26;
    v24 -= 2;
  }
  *a2 = v24;
  a2[1] = v16;
  a2[2] = v25;
  if (v17) {
    operator delete(v17);
  }
LABEL_35:
  a2[1] = v16;
}

void sub_1000A6E6C(uint64_t a1, char **a2)
{
  uint64_t v4 = a2 + 2;
  uint64_t v3 = a2[2];
  uint64_t v5 = a2[1];
  if (v5 >= v3)
  {
    uint64_t v7 = *a2;
    uint64_t v8 = v5 - *a2;
    if (v8 <= -3) {
      goto LABEL_70;
    }
    uint64_t v9 = v8 >> 1;
    unint64_t v10 = v3 - v7;
    if (v10 <= (v8 >> 1) + 1) {
      unint64_t v11 = v9 + 1;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v10 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v12 = v11;
    }
    if (v12)
    {
      uint64_t v13 = (char *)sub_100057DD8((uint64_t)v4, v12);
      uint64_t v7 = *a2;
      uint64_t v5 = a2[1];
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[2 * v9];
    uint64_t v3 = &v13[2 * v12];
    *(_WORD *)uint64_t v14 = 0;
    uint64_t v6 = v14 + 2;
    while (v5 != v7)
    {
      __int16 v15 = *((_WORD *)v5 - 1);
      v5 -= 2;
      *((_WORD *)v14 - 1) = v15;
      v14 -= 2;
    }
    *a2 = v14;
    a2[1] = v6;
    a2[2] = v3;
    if (v7)
    {
      operator delete(v7);
      uint64_t v3 = *v4;
    }
  }
  else
  {
    *(_WORD *)uint64_t v5 = 0;
    uint64_t v6 = v5 + 2;
  }
  a2[1] = v6;
  if (v6 >= v3)
  {
    long long v17 = *a2;
    uint64_t v18 = v6 - *a2;
    if (v18 <= -3) {
      goto LABEL_70;
    }
    uint64_t v19 = v18 >> 1;
    unint64_t v20 = v3 - v17;
    if (v20 <= (v18 >> 1) + 1) {
      unint64_t v21 = v19 + 1;
    }
    else {
      unint64_t v21 = v20;
    }
    if (v20 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v22 = v21;
    }
    if (v22)
    {
      double v23 = (char *)sub_100057DD8((uint64_t)v4, v22);
      long long v17 = *a2;
      uint64_t v6 = a2[1];
    }
    else
    {
      double v23 = 0;
    }
    uint64_t v24 = &v23[2 * v19];
    uint64_t v3 = &v23[2 * v22];
    *(_WORD *)uint64_t v24 = 50;
    long long v16 = v24 + 2;
    while (v6 != v17)
    {
      __int16 v25 = *((_WORD *)v6 - 1);
      v6 -= 2;
      *((_WORD *)v24 - 1) = v25;
      v24 -= 2;
    }
    *a2 = v24;
    a2[1] = v16;
    a2[2] = v3;
    if (v17)
    {
      operator delete(v17);
      uint64_t v3 = *v4;
    }
  }
  else
  {
    *(_WORD *)uint64_t v6 = 50;
    long long v16 = v6 + 2;
  }
  a2[1] = v16;
  if (v16 >= v3)
  {
    long long v27 = *a2;
    uint64_t v28 = v16 - *a2;
    if (v28 <= -3) {
      goto LABEL_70;
    }
    uint64_t v29 = v28 >> 1;
    unint64_t v30 = v3 - v27;
    if (v30 <= (v28 >> 1) + 1) {
      unint64_t v31 = v29 + 1;
    }
    else {
      unint64_t v31 = v30;
    }
    if (v30 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v32 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v32 = v31;
    }
    if (v32)
    {
      double v33 = (char *)sub_100057DD8((uint64_t)v4, v32);
      long long v27 = *a2;
      long long v16 = a2[1];
    }
    else
    {
      double v33 = 0;
    }
    id v34 = &v33[2 * v29];
    uint64_t v3 = &v33[2 * v32];
    *(_WORD *)id v34 = 100;
    __int16 v26 = v34 + 2;
    while (v16 != v27)
    {
      __int16 v35 = *((_WORD *)v16 - 1);
      v16 -= 2;
      *((_WORD *)v34 - 1) = v35;
      v34 -= 2;
    }
    *a2 = v34;
    a2[1] = v26;
    a2[2] = v3;
    if (v27)
    {
      operator delete(v27);
      uint64_t v3 = *v4;
    }
  }
  else
  {
    *(_WORD *)long long v16 = 100;
    __int16 v26 = v16 + 2;
  }
  a2[1] = v26;
  if (v26 < v3)
  {
    *(_WORD *)__int16 v26 = 250;
    double v36 = v26 + 2;
    goto LABEL_69;
  }
  double v37 = *a2;
  uint64_t v38 = v26 - *a2;
  if (v38 <= -3) {
LABEL_70:
  }
    sub_100057D30();
  uint64_t v39 = v38 >> 1;
  unint64_t v40 = v3 - v37;
  if (v40 <= (v38 >> 1) + 1) {
    unint64_t v41 = v39 + 1;
  }
  else {
    unint64_t v41 = v40;
  }
  if (v40 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v42 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v42 = v41;
  }
  if (v42)
  {
    double v43 = (char *)sub_100057DD8((uint64_t)v4, v42);
    double v37 = *a2;
    __int16 v26 = a2[1];
  }
  else
  {
    double v43 = 0;
  }
  double v44 = &v43[2 * v39];
  double v45 = &v43[2 * v42];
  *(_WORD *)double v44 = 250;
  double v36 = v44 + 2;
  while (v26 != v37)
  {
    __int16 v46 = *((_WORD *)v26 - 1);
    v26 -= 2;
    *((_WORD *)v44 - 1) = v46;
    v44 -= 2;
  }
  *a2 = v44;
  a2[1] = v36;
  a2[2] = v45;
  if (v37) {
    operator delete(v37);
  }
LABEL_69:
  a2[1] = v36;
}

void sub_1000A713C(uint64_t a1, char **a2)
{
  uint64_t v4 = a2 + 2;
  uint64_t v3 = a2[2];
  uint64_t v5 = a2[1];
  if (v5 >= v3)
  {
    uint64_t v7 = *a2;
    uint64_t v8 = v5 - *a2;
    if (v8 <= -3) {
      goto LABEL_70;
    }
    uint64_t v9 = v8 >> 1;
    unint64_t v10 = v3 - v7;
    if (v10 <= (v8 >> 1) + 1) {
      unint64_t v11 = v9 + 1;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v10 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v12 = v11;
    }
    if (v12)
    {
      uint64_t v13 = (char *)sub_100057DD8((uint64_t)v4, v12);
      uint64_t v7 = *a2;
      uint64_t v5 = a2[1];
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[2 * v9];
    uint64_t v3 = &v13[2 * v12];
    *(_WORD *)uint64_t v14 = -185;
    uint64_t v6 = v14 + 2;
    while (v5 != v7)
    {
      __int16 v15 = *((_WORD *)v5 - 1);
      v5 -= 2;
      *((_WORD *)v14 - 1) = v15;
      v14 -= 2;
    }
    *a2 = v14;
    a2[1] = v6;
    a2[2] = v3;
    if (v7)
    {
      operator delete(v7);
      uint64_t v3 = *v4;
    }
  }
  else
  {
    *(_WORD *)uint64_t v5 = -185;
    uint64_t v6 = v5 + 2;
  }
  a2[1] = v6;
  if (v6 >= v3)
  {
    long long v17 = *a2;
    uint64_t v18 = v6 - *a2;
    if (v18 <= -3) {
      goto LABEL_70;
    }
    uint64_t v19 = v18 >> 1;
    unint64_t v20 = v3 - v17;
    if (v20 <= (v18 >> 1) + 1) {
      unint64_t v21 = v19 + 1;
    }
    else {
      unint64_t v21 = v20;
    }
    if (v20 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v22 = v21;
    }
    if (v22)
    {
      double v23 = (char *)sub_100057DD8((uint64_t)v4, v22);
      long long v17 = *a2;
      uint64_t v6 = a2[1];
    }
    else
    {
      double v23 = 0;
    }
    uint64_t v24 = &v23[2 * v19];
    uint64_t v3 = &v23[2 * v22];
    *(_WORD *)uint64_t v24 = -160;
    long long v16 = v24 + 2;
    while (v6 != v17)
    {
      __int16 v25 = *((_WORD *)v6 - 1);
      v6 -= 2;
      *((_WORD *)v24 - 1) = v25;
      v24 -= 2;
    }
    *a2 = v24;
    a2[1] = v16;
    a2[2] = v3;
    if (v17)
    {
      operator delete(v17);
      uint64_t v3 = *v4;
    }
  }
  else
  {
    *(_WORD *)uint64_t v6 = -160;
    long long v16 = v6 + 2;
  }
  a2[1] = v16;
  if (v16 >= v3)
  {
    long long v27 = *a2;
    uint64_t v28 = v16 - *a2;
    if (v28 <= -3) {
      goto LABEL_70;
    }
    uint64_t v29 = v28 >> 1;
    unint64_t v30 = v3 - v27;
    if (v30 <= (v28 >> 1) + 1) {
      unint64_t v31 = v29 + 1;
    }
    else {
      unint64_t v31 = v30;
    }
    if (v30 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v32 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v32 = v31;
    }
    if (v32)
    {
      double v33 = (char *)sub_100057DD8((uint64_t)v4, v32);
      long long v27 = *a2;
      long long v16 = a2[1];
    }
    else
    {
      double v33 = 0;
    }
    id v34 = &v33[2 * v29];
    uint64_t v3 = &v33[2 * v32];
    *(_WORD *)id v34 = -150;
    __int16 v26 = v34 + 2;
    while (v16 != v27)
    {
      __int16 v35 = *((_WORD *)v16 - 1);
      v16 -= 2;
      *((_WORD *)v34 - 1) = v35;
      v34 -= 2;
    }
    *a2 = v34;
    a2[1] = v26;
    a2[2] = v3;
    if (v27)
    {
      operator delete(v27);
      uint64_t v3 = *v4;
    }
  }
  else
  {
    *(_WORD *)long long v16 = -150;
    __int16 v26 = v16 + 2;
  }
  a2[1] = v26;
  if (v26 < v3)
  {
    *(_WORD *)__int16 v26 = -50;
    double v36 = v26 + 2;
    goto LABEL_69;
  }
  double v37 = *a2;
  uint64_t v38 = v26 - *a2;
  if (v38 <= -3) {
LABEL_70:
  }
    sub_100057D30();
  uint64_t v39 = v38 >> 1;
  unint64_t v40 = v3 - v37;
  if (v40 <= (v38 >> 1) + 1) {
    unint64_t v41 = v39 + 1;
  }
  else {
    unint64_t v41 = v40;
  }
  if (v40 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v42 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v42 = v41;
  }
  if (v42)
  {
    double v43 = (char *)sub_100057DD8((uint64_t)v4, v42);
    double v37 = *a2;
    __int16 v26 = a2[1];
  }
  else
  {
    double v43 = 0;
  }
  double v44 = &v43[2 * v39];
  double v45 = &v43[2 * v42];
  *(_WORD *)double v44 = -50;
  double v36 = v44 + 2;
  while (v26 != v37)
  {
    __int16 v46 = *((_WORD *)v26 - 1);
    v26 -= 2;
    *((_WORD *)v44 - 1) = v46;
    v44 -= 2;
  }
  *a2 = v44;
  a2[1] = v36;
  a2[2] = v45;
  if (v37) {
    operator delete(v37);
  }
LABEL_69:
  a2[1] = v36;
}

void sub_1000A7414(uint64_t a1, char **a2)
{
  uint64_t v4 = a2 + 2;
  uint64_t v3 = a2[2];
  uint64_t v5 = a2[1];
  if (v5 >= v3)
  {
    uint64_t v7 = *a2;
    uint64_t v8 = v5 - *a2;
    if (v8 <= -3) {
      goto LABEL_172;
    }
    uint64_t v9 = v8 >> 1;
    unint64_t v10 = v3 - v7;
    if (v10 <= (v8 >> 1) + 1) {
      unint64_t v11 = v9 + 1;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v10 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v12 = v11;
    }
    if (v12)
    {
      uint64_t v13 = (char *)sub_100057DD8((uint64_t)v4, v12);
      uint64_t v7 = *a2;
      uint64_t v5 = a2[1];
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[2 * v9];
    uint64_t v3 = &v13[2 * v12];
    *(_WORD *)uint64_t v14 = -1300;
    uint64_t v6 = v14 + 2;
    while (v5 != v7)
    {
      __int16 v15 = *((_WORD *)v5 - 1);
      v5 -= 2;
      *((_WORD *)v14 - 1) = v15;
      v14 -= 2;
    }
    *a2 = v14;
    a2[1] = v6;
    a2[2] = v3;
    if (v7)
    {
      operator delete(v7);
      uint64_t v3 = *v4;
    }
  }
  else
  {
    *(_WORD *)uint64_t v5 = -1300;
    uint64_t v6 = v5 + 2;
  }
  a2[1] = v6;
  if (v6 >= v3)
  {
    long long v17 = *a2;
    uint64_t v18 = v6 - *a2;
    if (v18 <= -3) {
      goto LABEL_172;
    }
    uint64_t v19 = v18 >> 1;
    unint64_t v20 = v3 - v17;
    if (v20 <= (v18 >> 1) + 1) {
      unint64_t v21 = v19 + 1;
    }
    else {
      unint64_t v21 = v20;
    }
    if (v20 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v22 = v21;
    }
    if (v22)
    {
      double v23 = (char *)sub_100057DD8((uint64_t)v4, v22);
      long long v17 = *a2;
      uint64_t v6 = a2[1];
    }
    else
    {
      double v23 = 0;
    }
    uint64_t v24 = &v23[2 * v19];
    uint64_t v3 = &v23[2 * v22];
    *(_WORD *)uint64_t v24 = -1190;
    long long v16 = v24 + 2;
    while (v6 != v17)
    {
      __int16 v25 = *((_WORD *)v6 - 1);
      v6 -= 2;
      *((_WORD *)v24 - 1) = v25;
      v24 -= 2;
    }
    *a2 = v24;
    a2[1] = v16;
    a2[2] = v3;
    if (v17)
    {
      operator delete(v17);
      uint64_t v3 = *v4;
    }
  }
  else
  {
    *(_WORD *)uint64_t v6 = -1190;
    long long v16 = v6 + 2;
  }
  a2[1] = v16;
  if (v16 >= v3)
  {
    long long v27 = *a2;
    uint64_t v28 = v16 - *a2;
    if (v28 <= -3) {
      goto LABEL_172;
    }
    uint64_t v29 = v28 >> 1;
    unint64_t v30 = v3 - v27;
    if (v30 <= (v28 >> 1) + 1) {
      unint64_t v31 = v29 + 1;
    }
    else {
      unint64_t v31 = v30;
    }
    if (v30 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v32 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v32 = v31;
    }
    if (v32)
    {
      double v33 = (char *)sub_100057DD8((uint64_t)v4, v32);
      long long v27 = *a2;
      long long v16 = a2[1];
    }
    else
    {
      double v33 = 0;
    }
    id v34 = &v33[2 * v29];
    uint64_t v3 = &v33[2 * v32];
    *(_WORD *)id v34 = -1180;
    __int16 v26 = v34 + 2;
    while (v16 != v27)
    {
      __int16 v35 = *((_WORD *)v16 - 1);
      v16 -= 2;
      *((_WORD *)v34 - 1) = v35;
      v34 -= 2;
    }
    *a2 = v34;
    a2[1] = v26;
    a2[2] = v3;
    if (v27)
    {
      operator delete(v27);
      uint64_t v3 = *v4;
    }
  }
  else
  {
    *(_WORD *)long long v16 = -1180;
    __int16 v26 = v16 + 2;
  }
  a2[1] = v26;
  if (v26 >= v3)
  {
    double v37 = *a2;
    uint64_t v38 = v26 - *a2;
    if (v38 <= -3) {
      goto LABEL_172;
    }
    uint64_t v39 = v38 >> 1;
    unint64_t v40 = v3 - v37;
    if (v40 <= (v38 >> 1) + 1) {
      unint64_t v41 = v39 + 1;
    }
    else {
      unint64_t v41 = v40;
    }
    if (v40 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v42 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v42 = v41;
    }
    if (v42)
    {
      double v43 = (char *)sub_100057DD8((uint64_t)v4, v42);
      double v37 = *a2;
      __int16 v26 = a2[1];
    }
    else
    {
      double v43 = 0;
    }
    double v44 = &v43[2 * v39];
    uint64_t v3 = &v43[2 * v42];
    *(_WORD *)double v44 = -1160;
    double v36 = v44 + 2;
    while (v26 != v37)
    {
      __int16 v45 = *((_WORD *)v26 - 1);
      v26 -= 2;
      *((_WORD *)v44 - 1) = v45;
      v44 -= 2;
    }
    *a2 = v44;
    a2[1] = v36;
    a2[2] = v3;
    if (v37)
    {
      operator delete(v37);
      uint64_t v3 = *v4;
    }
  }
  else
  {
    *(_WORD *)__int16 v26 = -1160;
    double v36 = v26 + 2;
  }
  a2[1] = v36;
  if (v36 >= v3)
  {
    double v47 = *a2;
    uint64_t v48 = v36 - *a2;
    if (v48 <= -3) {
      goto LABEL_172;
    }
    uint64_t v49 = v48 >> 1;
    unint64_t v50 = v3 - v47;
    if (v50 <= (v48 >> 1) + 1) {
      unint64_t v51 = v49 + 1;
    }
    else {
      unint64_t v51 = v50;
    }
    if (v50 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v52 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v52 = v51;
    }
    if (v52)
    {
      double v53 = (char *)sub_100057DD8((uint64_t)v4, v52);
      double v47 = *a2;
      double v36 = a2[1];
    }
    else
    {
      double v53 = 0;
    }
    double v54 = &v53[2 * v49];
    uint64_t v3 = &v53[2 * v52];
    *(_WORD *)double v54 = -1110;
    __int16 v46 = v54 + 2;
    while (v36 != v47)
    {
      __int16 v55 = *((_WORD *)v36 - 1);
      v36 -= 2;
      *((_WORD *)v54 - 1) = v55;
      v54 -= 2;
    }
    *a2 = v54;
    a2[1] = v46;
    a2[2] = v3;
    if (v47)
    {
      operator delete(v47);
      uint64_t v3 = *v4;
    }
  }
  else
  {
    *(_WORD *)double v36 = -1110;
    __int16 v46 = v36 + 2;
  }
  a2[1] = v46;
  if (v46 >= v3)
  {
    double v57 = *a2;
    uint64_t v58 = v46 - *a2;
    if (v58 <= -3) {
      goto LABEL_172;
    }
    uint64_t v59 = v58 >> 1;
    unint64_t v60 = v3 - v57;
    if (v60 <= (v58 >> 1) + 1) {
      unint64_t v61 = v59 + 1;
    }
    else {
      unint64_t v61 = v60;
    }
    if (v60 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v62 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v62 = v61;
    }
    if (v62)
    {
      double v63 = (char *)sub_100057DD8((uint64_t)v4, v62);
      double v57 = *a2;
      __int16 v46 = a2[1];
    }
    else
    {
      double v63 = 0;
    }
    char v64 = &v63[2 * v59];
    uint64_t v3 = &v63[2 * v62];
    *(_WORD *)char v64 = -1100;
    double v56 = v64 + 2;
    while (v46 != v57)
    {
      __int16 v65 = *((_WORD *)v46 - 1);
      v46 -= 2;
      *((_WORD *)v64 - 1) = v65;
      v64 -= 2;
    }
    *a2 = v64;
    a2[1] = v56;
    a2[2] = v3;
    if (v57)
    {
      operator delete(v57);
      uint64_t v3 = *v4;
    }
  }
  else
  {
    *(_WORD *)__int16 v46 = -1100;
    double v56 = v46 + 2;
  }
  a2[1] = v56;
  if (v56 >= v3)
  {
    uint64_t v67 = *a2;
    uint64_t v68 = v56 - *a2;
    if (v68 <= -3) {
      goto LABEL_172;
    }
    uint64_t v69 = v68 >> 1;
    unint64_t v70 = v3 - v67;
    if (v70 <= (v68 >> 1) + 1) {
      unint64_t v71 = v69 + 1;
    }
    else {
      unint64_t v71 = v70;
    }
    if (v70 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v72 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v72 = v71;
    }
    if (v72)
    {
      char v73 = (char *)sub_100057DD8((uint64_t)v4, v72);
      uint64_t v67 = *a2;
      double v56 = a2[1];
    }
    else
    {
      char v73 = 0;
    }
    uint64_t v74 = &v73[2 * v69];
    uint64_t v3 = &v73[2 * v72];
    *(_WORD *)uint64_t v74 = -1000;
    uint64_t v66 = v74 + 2;
    while (v56 != v67)
    {
      __int16 v75 = *((_WORD *)v56 - 1);
      v56 -= 2;
      *((_WORD *)v74 - 1) = v75;
      v74 -= 2;
    }
    *a2 = v74;
    a2[1] = v66;
    a2[2] = v3;
    if (v67)
    {
      operator delete(v67);
      uint64_t v3 = *v4;
    }
  }
  else
  {
    *(_WORD *)double v56 = -1000;
    uint64_t v66 = v56 + 2;
  }
  a2[1] = v66;
  if (v66 >= v3)
  {
    v77 = *a2;
    uint64_t v78 = v66 - *a2;
    if (v78 <= -3) {
      goto LABEL_172;
    }
    uint64_t v79 = v78 >> 1;
    unint64_t v80 = v3 - v77;
    if (v80 <= (v78 >> 1) + 1) {
      unint64_t v81 = v79 + 1;
    }
    else {
      unint64_t v81 = v80;
    }
    if (v80 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v82 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v82 = v81;
    }
    if (v82)
    {
      v83 = (char *)sub_100057DD8((uint64_t)v4, v82);
      v77 = *a2;
      uint64_t v66 = a2[1];
    }
    else
    {
      v83 = 0;
    }
    v84 = &v83[2 * v79];
    uint64_t v3 = &v83[2 * v82];
    *(_WORD *)v84 = -900;
    uint64_t v76 = v84 + 2;
    while (v66 != v77)
    {
      __int16 v85 = *((_WORD *)v66 - 1);
      v66 -= 2;
      *((_WORD *)v84 - 1) = v85;
      v84 -= 2;
    }
    *a2 = v84;
    a2[1] = v76;
    a2[2] = v3;
    if (v77)
    {
      operator delete(v77);
      uint64_t v3 = *v4;
    }
  }
  else
  {
    *(_WORD *)uint64_t v66 = -900;
    uint64_t v76 = v66 + 2;
  }
  a2[1] = v76;
  if (v76 >= v3)
  {
    v87 = *a2;
    uint64_t v88 = v76 - *a2;
    if (v88 <= -3) {
      goto LABEL_172;
    }
    uint64_t v89 = v88 >> 1;
    unint64_t v90 = v3 - v87;
    if (v90 <= (v88 >> 1) + 1) {
      unint64_t v91 = v89 + 1;
    }
    else {
      unint64_t v91 = v90;
    }
    if (v90 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v92 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v92 = v91;
    }
    if (v92)
    {
      v93 = (char *)sub_100057DD8((uint64_t)v4, v92);
      v87 = *a2;
      uint64_t v76 = a2[1];
    }
    else
    {
      v93 = 0;
    }
    v94 = &v93[2 * v89];
    uint64_t v3 = &v93[2 * v92];
    *(_WORD *)v94 = -850;
    v86 = v94 + 2;
    while (v76 != v87)
    {
      __int16 v95 = *((_WORD *)v76 - 1);
      v76 -= 2;
      *((_WORD *)v94 - 1) = v95;
      v94 -= 2;
    }
    *a2 = v94;
    a2[1] = v86;
    a2[2] = v3;
    if (v87)
    {
      operator delete(v87);
      uint64_t v3 = *v4;
    }
  }
  else
  {
    *(_WORD *)uint64_t v76 = -850;
    v86 = v76 + 2;
  }
  a2[1] = v86;
  if (v86 < v3)
  {
    *(_WORD *)v86 = -800;
    v96 = v86 + 2;
    goto LABEL_171;
  }
  v97 = *a2;
  uint64_t v98 = v86 - *a2;
  if (v98 <= -3) {
LABEL_172:
  }
    sub_100057D30();
  uint64_t v99 = v98 >> 1;
  unint64_t v100 = v3 - v97;
  if (v100 <= (v98 >> 1) + 1) {
    unint64_t v101 = v99 + 1;
  }
  else {
    unint64_t v101 = v100;
  }
  if (v100 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v102 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v102 = v101;
  }
  if (v102)
  {
    v103 = (char *)sub_100057DD8((uint64_t)v4, v102);
    v97 = *a2;
    v86 = a2[1];
  }
  else
  {
    v103 = 0;
  }
  v104 = &v103[2 * v99];
  v105 = &v103[2 * v102];
  *(_WORD *)v104 = -800;
  v96 = v104 + 2;
  while (v86 != v97)
  {
    __int16 v106 = *((_WORD *)v86 - 1);
    v86 -= 2;
    *((_WORD *)v104 - 1) = v106;
    v104 -= 2;
  }
  *a2 = v104;
  a2[1] = v96;
  a2[2] = v105;
  if (v97) {
    operator delete(v97);
  }
LABEL_171:
  a2[1] = v96;
}

void sub_1000A7ADC(uint64_t a1, char **a2)
{
  uint64_t v4 = a2 + 2;
  uint64_t v3 = a2[2];
  uint64_t v5 = a2[1];
  if (v5 >= v3)
  {
    uint64_t v7 = *a2;
    uint64_t v8 = v5 - *a2;
    if (v8 <= -3) {
      goto LABEL_104;
    }
    uint64_t v9 = v8 >> 1;
    unint64_t v10 = v3 - v7;
    if (v10 <= (v8 >> 1) + 1) {
      unint64_t v11 = v9 + 1;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v10 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v12 = v11;
    }
    if (v12)
    {
      uint64_t v13 = (char *)sub_100057DD8((uint64_t)v4, v12);
      uint64_t v7 = *a2;
      uint64_t v5 = a2[1];
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[2 * v9];
    uint64_t v3 = &v13[2 * v12];
    *(_WORD *)uint64_t v14 = 250;
    uint64_t v6 = v14 + 2;
    while (v5 != v7)
    {
      __int16 v15 = *((_WORD *)v5 - 1);
      v5 -= 2;
      *((_WORD *)v14 - 1) = v15;
      v14 -= 2;
    }
    *a2 = v14;
    a2[1] = v6;
    a2[2] = v3;
    if (v7)
    {
      operator delete(v7);
      uint64_t v3 = *v4;
    }
  }
  else
  {
    *(_WORD *)uint64_t v5 = 250;
    uint64_t v6 = v5 + 2;
  }
  a2[1] = v6;
  if (v6 >= v3)
  {
    long long v17 = *a2;
    uint64_t v18 = v6 - *a2;
    if (v18 <= -3) {
      goto LABEL_104;
    }
    uint64_t v19 = v18 >> 1;
    unint64_t v20 = v3 - v17;
    if (v20 <= (v18 >> 1) + 1) {
      unint64_t v21 = v19 + 1;
    }
    else {
      unint64_t v21 = v20;
    }
    if (v20 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v22 = v21;
    }
    if (v22)
    {
      double v23 = (char *)sub_100057DD8((uint64_t)v4, v22);
      long long v17 = *a2;
      uint64_t v6 = a2[1];
    }
    else
    {
      double v23 = 0;
    }
    uint64_t v24 = &v23[2 * v19];
    uint64_t v3 = &v23[2 * v22];
    *(_WORD *)uint64_t v24 = 200;
    long long v16 = v24 + 2;
    while (v6 != v17)
    {
      __int16 v25 = *((_WORD *)v6 - 1);
      v6 -= 2;
      *((_WORD *)v24 - 1) = v25;
      v24 -= 2;
    }
    *a2 = v24;
    a2[1] = v16;
    a2[2] = v3;
    if (v17)
    {
      operator delete(v17);
      uint64_t v3 = *v4;
    }
  }
  else
  {
    *(_WORD *)uint64_t v6 = 200;
    long long v16 = v6 + 2;
  }
  a2[1] = v16;
  if (v16 >= v3)
  {
    long long v27 = *a2;
    uint64_t v28 = v16 - *a2;
    if (v28 <= -3) {
      goto LABEL_104;
    }
    uint64_t v29 = v28 >> 1;
    unint64_t v30 = v3 - v27;
    if (v30 <= (v28 >> 1) + 1) {
      unint64_t v31 = v29 + 1;
    }
    else {
      unint64_t v31 = v30;
    }
    if (v30 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v32 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v32 = v31;
    }
    if (v32)
    {
      double v33 = (char *)sub_100057DD8((uint64_t)v4, v32);
      long long v27 = *a2;
      long long v16 = a2[1];
    }
    else
    {
      double v33 = 0;
    }
    id v34 = &v33[2 * v29];
    uint64_t v3 = &v33[2 * v32];
    *(_WORD *)id v34 = 150;
    __int16 v26 = v34 + 2;
    while (v16 != v27)
    {
      __int16 v35 = *((_WORD *)v16 - 1);
      v16 -= 2;
      *((_WORD *)v34 - 1) = v35;
      v34 -= 2;
    }
    *a2 = v34;
    a2[1] = v26;
    a2[2] = v3;
    if (v27)
    {
      operator delete(v27);
      uint64_t v3 = *v4;
    }
  }
  else
  {
    *(_WORD *)long long v16 = 150;
    __int16 v26 = v16 + 2;
  }
  a2[1] = v26;
  if (v26 >= v3)
  {
    double v37 = *a2;
    uint64_t v38 = v26 - *a2;
    if (v38 <= -3) {
      goto LABEL_104;
    }
    uint64_t v39 = v38 >> 1;
    unint64_t v40 = v3 - v37;
    if (v40 <= (v38 >> 1) + 1) {
      unint64_t v41 = v39 + 1;
    }
    else {
      unint64_t v41 = v40;
    }
    if (v40 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v42 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v42 = v41;
    }
    if (v42)
    {
      double v43 = (char *)sub_100057DD8((uint64_t)v4, v42);
      double v37 = *a2;
      __int16 v26 = a2[1];
    }
    else
    {
      double v43 = 0;
    }
    double v44 = &v43[2 * v39];
    uint64_t v3 = &v43[2 * v42];
    *(_WORD *)double v44 = 100;
    double v36 = v44 + 2;
    while (v26 != v37)
    {
      __int16 v45 = *((_WORD *)v26 - 1);
      v26 -= 2;
      *((_WORD *)v44 - 1) = v45;
      v44 -= 2;
    }
    *a2 = v44;
    a2[1] = v36;
    a2[2] = v3;
    if (v37)
    {
      operator delete(v37);
      uint64_t v3 = *v4;
    }
  }
  else
  {
    *(_WORD *)__int16 v26 = 100;
    double v36 = v26 + 2;
  }
  a2[1] = v36;
  if (v36 >= v3)
  {
    double v47 = *a2;
    uint64_t v48 = v36 - *a2;
    if (v48 <= -3) {
      goto LABEL_104;
    }
    uint64_t v49 = v48 >> 1;
    unint64_t v50 = v3 - v47;
    if (v50 <= (v48 >> 1) + 1) {
      unint64_t v51 = v49 + 1;
    }
    else {
      unint64_t v51 = v50;
    }
    if (v50 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v52 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v52 = v51;
    }
    if (v52)
    {
      double v53 = (char *)sub_100057DD8((uint64_t)v4, v52);
      double v47 = *a2;
      double v36 = a2[1];
    }
    else
    {
      double v53 = 0;
    }
    double v54 = &v53[2 * v49];
    uint64_t v3 = &v53[2 * v52];
    *(_WORD *)double v54 = 28;
    __int16 v46 = v54 + 2;
    while (v36 != v47)
    {
      __int16 v55 = *((_WORD *)v36 - 1);
      v36 -= 2;
      *((_WORD *)v54 - 1) = v55;
      v54 -= 2;
    }
    *a2 = v54;
    a2[1] = v46;
    a2[2] = v3;
    if (v47)
    {
      operator delete(v47);
      uint64_t v3 = *v4;
    }
  }
  else
  {
    *(_WORD *)double v36 = 28;
    __int16 v46 = v36 + 2;
  }
  a2[1] = v46;
  if (v46 < v3)
  {
    *(_WORD *)__int16 v46 = 24;
    double v56 = v46 + 2;
    goto LABEL_103;
  }
  double v57 = *a2;
  uint64_t v58 = v46 - *a2;
  if (v58 <= -3) {
LABEL_104:
  }
    sub_100057D30();
  uint64_t v59 = v58 >> 1;
  unint64_t v60 = v3 - v57;
  if (v60 <= (v58 >> 1) + 1) {
    unint64_t v61 = v59 + 1;
  }
  else {
    unint64_t v61 = v60;
  }
  if (v60 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v62 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v62 = v61;
  }
  if (v62)
  {
    double v63 = (char *)sub_100057DD8((uint64_t)v4, v62);
    double v57 = *a2;
    __int16 v46 = a2[1];
  }
  else
  {
    double v63 = 0;
  }
  char v64 = &v63[2 * v59];
  __int16 v65 = &v63[2 * v62];
  *(_WORD *)char v64 = 24;
  double v56 = v64 + 2;
  while (v46 != v57)
  {
    __int16 v66 = *((_WORD *)v46 - 1);
    v46 -= 2;
    *((_WORD *)v64 - 1) = v66;
    v64 -= 2;
  }
  *a2 = v64;
  a2[1] = v56;
  a2[2] = v65;
  if (v57) {
    operator delete(v57);
  }
LABEL_103:
  a2[1] = v56;
}

id sub_1000A7F04(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 4);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v2) {
    return +[WCM_Logging logLevel:16, @"QMI.NAS.%d: failed to set NAS Config Info2. Error %d %s", *(unsigned int *)(v3 + 32), v2, qmi::asString() message];
  }
  else {
    return +[WCM_Logging logLevel:22, @"QMI.NAS.%d: set NAS Config Info2 successful.", *(unsigned int *)(v3 + 32), v5, v6 message];
  }
}

uint64_t sub_1000A811C(uint64_t a1, qmi::MessageBase *a2)
{
  id v4 = [*(id *)(a1 + 32) getUserDataPreferredSlot];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1000A83AC;
  v16[3] = &unk_10020FEB8;
  int8x16_t v17 = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
  uint64_t v18 = v16;
  int v5 = sub_1000AEA48(a2, 20, &v18);
  if ((v5 & 1) == 0) {
    +[WCM_Logging logLevel:22, @"QMI.NAS.%d: received indication w/o LTE sig info.", *(void *)(*(void *)(a1 + 40) + 32) message];
  }
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1000A84A8;
  void v14[3] = &unk_10020FEE0;
  int8x16_t v15 = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
  uint64_t v18 = v14;
  int v6 = sub_1000AEB54(a2, 23, (unint64_t)&v18);
  if ((v6 & 1) == 0) {
    +[WCM_Logging logLevel:22, @"QMI.NAS.%d: received indication w/o New sig info.", *(void *)(*(void *)(a1 + 40) + 32) message];
  }
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1000A8580;
  v12[3] = &unk_10020FF08;
  int8x16_t v13 = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
  uint64_t v18 = v12;
  int v7 = sub_1000AEC58(a2, 24, (unint64_t)&v18);
  if ((v7 & 1) == 0) {
    +[WCM_Logging logLevel:22, @"QMI.NAS.%d: received indication w/o New_EXT sig info.", *(void *)(*(void *)(a1 + 40) + 32) message];
  }
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000A8628;
  v9[3] = &unk_10020FF30;
  int8x16_t v10 = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
  id v11 = v4;
  uint64_t v18 = v9;
  uint64_t result = sub_1000AED5C(a2, 19, (unint64_t)&v18);
  if ((result & 1) == 0) {
    uint64_t result = (uint64_t)+[WCM_Logging logLevel:22, @"QMI.NAS.%d: received indication w/o WCMDA sig info.", *(void *)(*(void *)(a1 + 40) + 32) message];
  }
  if ((v5 | v6 | v7) == 1) {
    return (uint64_t)[*(id *)(a1 + 32) evaluateCbrsInDualSimMode:0];
  }
  return result;
}

id sub_1000A83AC(uint64_t a1, char *a2)
{
  +[WCM_Logging logLevel:22, @"QMI.NAS.%d: received LTE SigInfo rssi %d snr %d rsrq %d rsrp %d", *(void *)(*(void *)(a1 + 32) + 32), *a2, (int)(((26215 * *((__int16 *)a2 + 2)) >> 18) + ((26215 * *((__int16 *)a2 + 2)) >> 31)), a2[1], *((__int16 *)a2 + 1) message];
  double v4 = (double)*((__int16 *)a2 + 2) / 10.0;
  double v5 = (double)a2[1];
  double v6 = (double)*((__int16 *)a2 + 1);
  [*(id *)(a1 + 40) setServingCellRSSI:*(void *)(*(void *)(a1 + 32) + 32) forSim:(double)*a2];
  [*(id *)(a1 + 40) setServingCellRSRP:*(void *)(*(void *)(a1 + 32) + 32) forSim:v6];
  [*(id *)(a1 + 40) setServingCellRSRQ:*(void *)(*(void *)(a1 + 32) + 32) forSim:v5];
  int v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 32);

  return [v7 setServingCellSNR:v8 forSim:v4];
}

id sub_1000A84A8(uint64_t a1, __int16 *a2)
{
  id result = +[WCM_Logging logLevel:22, @"QMI.NAS.%d: received New SigInfo snr %d rsrp %d", *(void *)(*(void *)(a1 + 32) + 32), (int)(((26215 * a2[1]) >> 18) + ((26215 * a2[1]) >> 31)), *a2 message];
  int v5 = (unsigned __int16)*a2;
  if (v5 != 0x8000)
  {
    double v6 = (double)a2[1] / 10.0;
    [*(id *)(a1 + 40) setNrRSRP:*(void *)(*(void *)(a1 + 32) + 32) forSim:(double)(__int16)v5];
    int v7 = *(void **)(a1 + 40);
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 32);
    return [v7 setNrSNR:v8 forSim:v6];
  }
  return result;
}

id sub_1000A8580(uint64_t a1, __int16 *a2)
{
  id result = +[WCM_Logging logLevel:22, @"QMI.NAS.%d: received New_EXT SigInfo rsrq %d", *(void *)(*(void *)(a1 + 32) + 32), *a2 message];
  int v5 = (unsigned __int16)*a2;
  if (v5 != 0x8000)
  {
    [*(id *)(a1 + 40) setNrRSRQ:*(void *)(*(void *)(a1 + 32) + 32) forSim:(double)(__int16)v5];
    double v6 = *(void **)(a1 + 40);
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 32);
    [v6 getNrRSRQ];
    return +[WCM_Logging logLevel:22, @"QMI.NAS.%d: rsrq %.2f", v7, v8 message];
  }
  return result;
}

id sub_1000A8628(uint64_t a1, char *a2)
{
  +[WCM_Logging logLevel:22, @"QMI.NAS.%d: received WCDMA SigInfo rssi %d ECIO %d", *(void *)(*(void *)(a1 + 32) + 32), *a2, -((__int16)(*((_WORD *)a2 + 1) + (*((_WORD *)a2 + 1) >> 15)) >> 1) message];
  id result = [*(id *)(a1 + 40) setActiveSlot:*(void *)(a1 + 48)];
  if (*a2)
  {
    double v5 = (double)*((__int16 *)a2 + 1) * -0.5;
    double v6 = v5 + (double)*a2;
    [*(id *)(a1 + 40) setServingCellRSSI:*(void *)(*(void *)(a1 + 32) + 32)];
    [*(id *)(a1 + 40) setServingCellECIO:*(void *)(*(void *)(a1 + 32) + 32) forSim:v5];
    uint64_t v7 = *(void **)(a1 + 40);
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 32);
    return [v7 setServingCellRSCP:v8 forSim:v6];
  }
  return result;
}

uint64_t sub_1000A87D8(uint64_t a1, qmi::MessageBase *a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000A8854;
  v3[3] = &unk_10020FF90;
  void v3[4] = *(void *)(a1 + 32);
  double v4 = v3;
  return sub_1000AF000(a2, 1, (unint64_t)&v4);
}

id sub_1000A8854(uint64_t a1, unsigned __int8 *a2)
{
  return +[WCM_Logging logLevel:22, @"QMI.NAS.%d: nas::SisNrAvailable::Indication %s", *(void *)(*(void *)(a1 + 32) + 32), sub_1000537FC(*a2) message];
}

void sub_1000A8930(id a1, const void *a2)
{
  v7[0] = 0;
  v7[1] = v7;
  v7[2] = 0x2020000000;
  v7[3] = 0;
  v5[0] = 0;
  v5[1] = v5;
  void v5[2] = 0x2020000000;
  char v6 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000A8A54;
  v3[3] = &unk_10020FFD8;
  void v3[5] = v5;
  v3[6] = v7;
  void v3[4] = +[WRM_EnhancedCTService wrm_EnhancedCTServiceSingleton];
  double v4 = v3;
  if ((sub_1000AF2A4((qmi::MessageBase *)a2, 1, (unint64_t)&v4) & 1) == 0) {
    +[WCM_Logging logLevel:22 message:@"QMI: received vlqm indication w/o enhancedVlqm."];
  }
  _Block_object_dispose(v5, 8);
  _Block_object_dispose(v7, 8);
}

void sub_1000A8A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

id sub_1000A8A54(void *a1, unsigned __int8 *a2)
{
  unsigned __int8 v4 = a2[1] + 1;
  uint64_t v5 = *a2;
  char v6 = sub_1000536A0(a2[2]);
  uint64_t v7 = sub_1000536DC(a2[3]);
  +[WCM_Logging logLevel:22, @"QMI.NAS.%u: received Enhanced VoiceLQM version%u, linkQuality=%s, reason=%s, IMSPreferred=%d, totalAudioErasures=%u, totalAudioPlaybacks=%u, voiceCodec=%s, SINR=%fdB, RSRP=%ddBm", v4, v5, v6, v7, a2[4], *((unsigned int *)a2 + 2), *((unsigned int *)a2 + 3), sub_10005379C(*((_DWORD *)a2 + 4)), (float)*((int *)a2 + 5) * 0.2 + -20.0, *((unsigned int *)a2 + 6) message];
  int v9 = a2[2];
  if (v9 == 50) {
    char v10 = 50;
  }
  else {
    char v10 = 100;
  }
  if (v9 == 10) {
    char v11 = 10;
  }
  else {
    char v11 = v10;
  }
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = v11;
  LODWORD(v8) = *((_DWORD *)a2 + 3);
  *(double *)(*(void *)(a1[6] + 8) + 24) = (double)(100 * *((_DWORD *)a2 + 2))
                                               / ((double)v8 + 0.000001);
  uint64_t v12 = a2[1];
  int8x16_t v13 = (void *)a1[4];
  uint64_t v14 = *(unsigned __int8 *)(*(void *)(a1[5] + 8) + 24);
  uint64_t v15 = a2[4];
  double v16 = *(double *)(*(void *)(a1[6] + 8) + 24);
  double v17 = (double)*((int *)a2 + 6);

  return [v13 processVoiceLqmQMI:v12 VLQM:v14 IMSPreference:v15 AudioErasure:v16 RSRP:v17];
}

void sub_1000A8D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  sub_100060AD4((uint64_t)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A8D64(uint64_t result, BOOL *a2)
{
  *a2 = *(void *)(result + 32) != 1;
  return result;
}

id sub_1000A8D78(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(a2 + 4)) {
    return +[WCM_Logging logLevel:22, @"QMI.NAS.%d: bindQMIClientToSlotType failed: %s", *(unsigned int *)(v2 + 32), qmi::asString() message];
  }
  else {
    return +[WCM_Logging logLevel:22, @"QMI.NAS.%d: bindQMIClientToSlotType success", *(unsigned int *)(v2 + 32), v4 message];
  }
}

void sub_1000A8F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void sub_1000A8F48(id a1, const void *a2)
{
  uint64_t v2 = *((unsigned int *)a2 + 1);
  if (v2) {
    +[WCM_Logging logLevel:16, @"QMI: failed to query SINR. Error %d %s", v2, qmi::asString() message];
  }

  +[WCM_Logging logLevel:22 message:@"QMI: query SINR successful."];
}

void sub_1000A9170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

id sub_1000A919C(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 40);
  *a2 = v2;
  uint64_t v3 = *(unsigned __int8 *)(a1 + 41);
  a2[1] = v3;
  uint64_t v4 = *(unsigned __int8 *)(a1 + 42);
  a2[2] = v4;
  uint64_t v5 = *(unsigned __int8 *)(a1 + 43);
  a2[3] = v5;
  return +[WCM_Logging logLevel:22, @"QMI.NAS.%d: VoIP app: %d, Call State: %d, CallType: %d, telephonyCall: %d ", *(void *)(*(void *)(a1 + 32) + 32), v2, v3, v4, v5 message];
}

id sub_1000A9208(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a2 + 4);
  if (v3) {
    +[WCM_Logging logLevel:16, @"QMI.NAS.%d: failed to send VoIP message. Error %d %s", *(void *)(*(void *)(a1 + 32) + 32), v3, qmi::asString() message];
  }
  return +[WCM_Logging logLevel:22, @"QMI.NAS.%d: Send VoIP message.", *(void *)(*(void *)(a1 + 32) + 32) message];
}

void sub_1000A9430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

id sub_1000A945C(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 40);
  *a2 = v2;
  uint64_t v3 = *(unsigned __int8 *)(a1 + 41);
  a2[1] = v3;
  return +[WCM_Logging logLevel:22, @"QMI.NAS.%d: Screen unlock status %d, Screen Status: %d ", *(void *)(*(void *)(a1 + 32) + 32), v2, v3 message];
}

id sub_1000A94B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a2 + 4);
  if (v3) {
    +[WCM_Logging logLevel:16, @"QMI.NAS.%d: failed to send lock status message. Error %d %s", *(void *)(*(void *)(a1 + 32) + 32), v3, qmi::asString() message];
  }
  return +[WCM_Logging logLevel:22, @"QMI.NAS.%d: Send SDM lock/unlock message.", *(void *)(*(void *)(a1 + 32) + 32) message];
}

void sub_1000A96DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

id sub_1000A9708(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 42);
  *(unsigned char *)a2 = v2;
  uint64_t v3 = *(unsigned __int16 *)(a1 + 40);
  *(_WORD *)(a2 + 2) = v3;
  return +[WCM_Logging logLevel:22, @"QMI.NAS.%d: notifyAVStatus state: %d, BW: %d", *(void *)(*(void *)(a1 + 32) + 32), v2, v3 message];
}

id sub_1000A9760(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a2 + 4);
  if (v3) {
    +[WCM_Logging logLevel:16, @"QMI.NAS.%d: failed to send AV status message. Error %d %s", *(void *)(*(void *)(a1 + 32) + 32), v3, qmi::asString() message];
  }
  return +[WCM_Logging logLevel:22, @"QMI.NAS.%d: Send AVStatus message state.", *(void *)(*(void *)(a1 + 32) + 32) message];
}

void sub_1000A9974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_100060AD4((uint64_t)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v7 - 120));
  _Unwind_Resume(a1);
}

id sub_1000A99A0(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 40);
  *a2 = v2;
  return +[WCM_Logging logLevel:22, @"QMI.NAS.%d: notifyFTDupelicationState state: %d ", *(void *)(*(void *)(a1 + 32) + 32), v2 message];
}

id sub_1000A99EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a2 + 4);
  if (v3) {
    +[WCM_Logging logLevel:16, @"QMI.NAS.%d: failed to send Dupe status message. Error %d %s", *(void *)(*(void *)(a1 + 32) + 32), v3, qmi::asString() message];
  }
  return +[WCM_Logging logLevel:22, @"QMI.NAS.%d: Send FTDDupeState message state.", *(void *)(*(void *)(a1 + 32) + 32) message];
}

void sub_1000A9C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_100060AD4((uint64_t)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v7 - 120));
  _Unwind_Resume(a1);
}

id sub_1000A9C2C(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 40);
  *a2 = v2;
  return +[WCM_Logging logLevel:22, @"QMI.NAS.%d: notifyStreamingEBHState state: %d ", *(void *)(*(void *)(a1 + 32) + 32), v2 message];
}

id sub_1000A9C78(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a2 + 4);
  if (v3) {
    +[WCM_Logging logLevel:16, @"QMI.NAS.%d: failed to send EBH status message. Error %d %s", *(void *)(*(void *)(a1 + 32) + 32), v3, qmi::asString() message];
  }
  return +[WCM_Logging logLevel:22, @"QMI.NAS.%d: Send fEBH message state.", *(void *)(*(void *)(a1 + 32) + 32) message];
}

void sub_1000A9F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_100060AD4((uint64_t)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v7 - 136));
  _Unwind_Resume(a1);
}

id sub_1000A9F64(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 40);
  *a2 = v2;
  return +[WCM_Logging logLevel:22, @"QMI.NAS.%d: setBBSAState disabled : %d ", *(void *)(*(void *)(a1 + 32) + 32), v2 message];
}

id sub_1000A9FB0(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 40);
  *a2 = v2;
  return +[WCM_Logging logLevel:22, @"QMI.NAS.%d: setBBSAState slot mask: %d", *(void *)(*(void *)(a1 + 32) + 32), v2 message];
}

id sub_1000A9FFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a2 + 4);
  if (v3) {
    +[WCM_Logging logLevel:16, @"QMI.NAS.%d: failed to send setBBSAState message. Error %d %s", *(void *)(*(void *)(a1 + 32) + 32), v3, qmi::asString() message];
  }
  return +[WCM_Logging logLevel:22, @"QMI.NAS.%d: Send setBBSAState message state.", *(void *)(*(void *)(a1 + 32) + 32) message];
}

void sub_1000AA2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_100060AD4((uint64_t)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000AA2EC(uint64_t a1, qmi::MessageBase *a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000AA368;
  v3[3] = &unk_100210158;
  void v3[4] = *(void *)(a1 + 32);
  uint64_t v4 = v3;
  return sub_1000B2228(a2, 16, (unint64_t)&v4);
}

id sub_1000AA368(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = *a2;
  +[WCM_Logging logLevel:22, @"QMI.NAS.%d: WrmSdmLocationDbInfoRegister::Indication locationDbRequired=%u", *(void *)(*(void *)(a1 + 32) + 32), v3 message];
  id v4 = +[WRM_EnhancedCTService wrm_EnhancedCTServiceSingleton];
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 32);

  return [v4 updateWrmSdmLocationDbInfoRegister:v3 forSim:v5];
}

void sub_1000AA3E0(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2020000000;
  int v19 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  int v15 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  uint64_t v11 = 0;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000AA5D0;
  v6[3] = &unk_100210180;
  v6[4] = &v16;
  void v6[5] = &v12;
  uint64_t v7 = v6;
  sub_1000B24CC(a2, 16, &v7);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1000AA5F4;
  void v5[3] = &unk_1002101A8;
  void v5[4] = &v8;
  uint64_t v7 = v5;
  sub_1000B25D0(a2, 17, &v7);
  +[WCM_Logging logLevel:22, @"QMI.NAS.%d: received WrmSdmLocationDbInfoFetch ind mcc=%u, mnc=%u, cellID=%llu", *(void *)(*(void *)(a1 + 32) + 32), *((unsigned int *)v17 + 6), *((unsigned int *)v13 + 6), v9[3] message];
  id v4 = +[WRM_EnhancedCTService wrm_EnhancedCTServiceSingleton];
  [v4 fetchWrmSdmLocationDbInfoWithMcc:*((unsigned int *)v17 + 6) Mnc:*((unsigned int *)v13 + 6) CellId:v9[3] ForSim:*(void *)(*(void *)(a1 + 32) + 32)];
  _Block_object_dispose(&v8, 8);
  _Block_object_dispose(&v12, 8);
  _Block_object_dispose(&v16, 8);
}

void sub_1000AA598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 112), 8);
  _Block_object_dispose((const void *)(v17 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000AA5D0(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8) + 24) = a2[1];
  return result;
}

uint64_t sub_1000AA5F4(uint64_t result, void *a2)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  return result;
}

id sub_1000AA608(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = a2[1];
  if (v2) {
    return +[WCM_Logging logLevel:16, @"QMI.NAS.%d: WrmSdmLocationDbInfoRegister::Response Error %d %s", *(void *)(*(void *)(a1 + 32) + 32), v2, qmi::asString() message];
  }
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_1000AA6D4;
  void v4[3] = &unk_1002101D0;
  v4[4] = *(void *)(a1 + 32);
  uint64_t v5 = v4;
  return (id)sub_1000B2874((qmi::MessageBase *)a2, 16, (unint64_t)&v5);
}

id sub_1000AA6D4(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = *a2;
  +[WCM_Logging logLevel:22, @"QMI.NAS.%d: WrmSdmLocationDbInfoRegister::Response locationDbRequired = %d", *(void *)(*(void *)(a1 + 32) + 32), v3 message];
  id v4 = +[WRM_EnhancedCTService wrm_EnhancedCTServiceSingleton];
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 32);

  return [v4 updateWrmSdmLocationDbInfoRegister:v3 forSim:v5];
}

void sub_1000AA7D4(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      uint64_t v1 = *(void **)(a1 + 32);
      uint64_t v2 = (uint64_t)(v1 + 9);
      if (v1[10] == v1[9]) {
        goto LABEL_12;
      }
      +[WCM_Logging logLevel:22, @"QMI.NAS.%d: setWrmSdmLocationDbPushOneEntryForCellType LTE entry exceeds max limit", v1[4] message];
      break;
    case 3:
      uint64_t v3 = *(void **)(a1 + 32);
      uint64_t v2 = (uint64_t)(v3 + 15);
      if (v3[16] == v3[15]) {
        goto LABEL_12;
      }
      +[WCM_Logging logLevel:22, @"QMI.NAS.%d: setWrmSdmLocationDbPushOneEntryForCellType SA entry exceeds max limit", v3[4] message];
      break;
    case 4:
      id v4 = *(void **)(a1 + 32);
      uint64_t v2 = (uint64_t)(v4 + 12);
      if (v4[13] == v4[12]) {
        goto LABEL_12;
      }
      +[WCM_Logging logLevel:22, @"QMI.NAS.%d: setWrmSdmLocationDbPushOneEntryForCellType LTENSA entry exceeds max limit", v4[4] message];
      break;
    case 5:
      uint64_t v5 = *(void **)(a1 + 32);
      uint64_t v2 = (uint64_t)(v5 + 18);
      if (v5[19] == v5[18])
      {
LABEL_12:
        sub_1000AA960(v2, (_DWORD *)(a1 + 44), (char *)(a1 + 60), (int *)(a1 + 48), (int *)(a1 + 52), (int *)(a1 + 56));
      }
      else
      {
        +[WCM_Logging logLevel:22, @"QMI.NAS.%d: setWrmSdmLocationDbPushOneEntryForCellType SADC entry exceeds max limit", v5[4] message];
      }
      break;
    default:
      +[WCM_Logging logLevel:22, @"QMI.NAS.%d: setLocationDbInfoPushOneEntryForCellType ERROR: invalid CellType, has to be CellTypeLTE, CellType5GSA, or CellType5GNSA", *(void *)(*(void *)(a1 + 32) + 32) message];
      break;
  }
}

void sub_1000AA960(uint64_t a1, _DWORD *a2, char *a3, int *a4, int *a5, int *a6)
{
  uint64_t v13 = *(_DWORD **)(a1 + 8);
  unint64_t v12 = *(void *)(a1 + 16);
  if ((unint64_t)v13 >= v12)
  {
    int v19 = *(_DWORD **)a1;
    unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v13 - *(void *)a1) >> 2);
    unint64_t v21 = v20 + 1;
    if (v20 + 1 > 0xCCCCCCCCCCCCCCCLL) {
      sub_100057D30();
    }
    unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - (void)v19) >> 2);
    if (2 * v22 > v21) {
      unint64_t v21 = 2 * v22;
    }
    if (v22 >= 0x666666666666666) {
      unint64_t v23 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v23 = v21;
    }
    if (v23 > 0xCCCCCCCCCCCCCCCLL) {
      sub_100057E0C();
    }
    uint64_t v24 = 5 * v23;
    __int16 v25 = (char *)operator new(20 * v23);
    __int16 v26 = &v25[20 * v20];
    char v27 = *a3;
    int v28 = *a4;
    int v29 = *a5;
    int v30 = *a6;
    *(_DWORD *)__int16 v26 = *a2;
    v26[4] = v27;
    *((_DWORD *)v26 + 2) = v28;
    *((_DWORD *)v26 + 3) = v29;
    *((_DWORD *)v26 + 4) = v30;
    uint64_t v18 = v26 + 20;
    if (v13 == v19)
    {
      uint64_t v32 = &v25[20 * v20];
    }
    else
    {
      do
      {
        long long v31 = *(_OWORD *)(v13 - 5);
        uint64_t v32 = v26 - 20;
        *((_DWORD *)v26 - 1) = *(v13 - 1);
        *(_OWORD *)(v26 - 20) = v31;
        v13 -= 5;
        v26 -= 20;
      }
      while (v13 != v19);
    }
    *(void *)a1 = v32;
    *(void *)(a1 + 8) = v18;
    *(void *)(a1 + 16) = &v25[4 * v24];
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    char v14 = *a3;
    int v15 = *a4;
    int v16 = *a5;
    int v17 = *a6;
    *uint64_t v13 = *a2;
    *((unsigned char *)v13 + 4) = v14;
    v13[2] = v15;
    v13[3] = v16;
    v13[4] = v17;
    uint64_t v18 = (char *)(v13 + 5);
  }
  *(void *)(a1 + 8) = v18;
}

void sub_1000AAB5C(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 48) = *(unsigned char *)(a1 + 56);
  *(_DWORD *)(*(void *)(a1 + 32) + 52) = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(*(void *)(a1 + 32) + 56) = *(_DWORD *)(a1 + 52);
  *(void *)(*(void *)(a1 + 32) + 64) = *(void *)(a1 + 40);
  uint64_t v2 = qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v44, 0x556Bu);
  v43[0] = _NSConcreteStackBlock;
  v43[1] = 3221225472;
  v43[2] = sub_1000AB08C;
  v43[3] = &unk_1002101F8;
  v43[4] = *(void *)(a1 + 32);
  uint64_t v3 = sub_1000B2B18(v2, 16);
  sub_1000AB08C((uint64_t)v43, v3);
  v42[0] = _NSConcreteStackBlock;
  v42[1] = 3221225472;
  v42[2] = sub_1000AB09C;
  v42[3] = &unk_100210220;
  v42[4] = *(void *)(a1 + 32);
  id v4 = sub_1000B2DD0((uint64_t)v44, 17);
  sub_1000AB09C((uint64_t)v42, v4);
  v41[0] = _NSConcreteStackBlock;
  v41[1] = 3221225472;
  v41[2] = sub_1000AB0B8;
  v41[3] = &unk_100210248;
  v41[4] = *(void *)(a1 + 32);
  uint64_t v5 = sub_1000B3094((uint64_t)v44, 18);
  sub_1000AB0B8((uint64_t)v41, v5);
  uint64_t v7 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v7 + 48))
  {
    unint64_t v9 = *(void *)(v7 + 72);
    unint64_t v8 = *(void *)(v7 + 80);
    unint64_t v10 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - v9) >> 2));
    if (v8 == v9) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = v10;
    }
    sub_1000B3354(v8, v8, v9, v9, v11, 1);
    uint64_t v12 = *(void *)(a1 + 32);
    unint64_t v14 = *(void *)(v12 + 96);
    unint64_t v13 = *(void *)(v12 + 104);
    unint64_t v15 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v13 - v14) >> 2));
    if (v13 == v14) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = v15;
    }
    sub_1000B3354(v13, v13, v14, v14, v16, 1);
    uint64_t v17 = *(void *)(a1 + 32);
    unint64_t v19 = *(void *)(v17 + 120);
    unint64_t v18 = *(void *)(v17 + 128);
    unint64_t v20 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v19) >> 2));
    if (v18 == v19) {
      uint64_t v21 = 0;
    }
    else {
      uint64_t v21 = v20;
    }
    sub_1000B3354(v18, v18, v19, v19, v21, 1);
    uint64_t v22 = *(void *)(a1 + 32);
    unint64_t v24 = *(void *)(v22 + 144);
    unint64_t v23 = *(void *)(v22 + 152);
    unint64_t v25 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v23 - v24) >> 2));
    if (v23 == v24) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = v25;
    }
    sub_1000B3354(v23, v23, v24, v24, v26, 1);
    uint64_t v7 = *(void *)(a1 + 32);
    if (*(void *)(v7 + 72) != *(void *)(v7 + 80))
    {
      v40[0] = _NSConcreteStackBlock;
      v40[1] = 3221225472;
      v40[2] = sub_1000AB0C8;
      v40[3] = &unk_100210270;
      v40[4] = v7;
      char v27 = sub_1000B4230((uint64_t)v44, 19);
      sub_1000AB0C8((uint64_t)v40, (uint64_t)v27);
      uint64_t v7 = *(void *)(a1 + 32);
    }
    if (*(void *)(v7 + 96) != *(void *)(v7 + 104))
    {
      v39[0] = _NSConcreteStackBlock;
      v39[1] = 3221225472;
      v39[2] = sub_1000AB11C;
      v39[3] = &unk_100210298;
      v39[4] = v7;
      int v28 = sub_1000B4500((uint64_t)v44, 20);
      sub_1000AB11C((uint64_t)v39, (uint64_t)v28);
      uint64_t v7 = *(void *)(a1 + 32);
    }
    if (*(void *)(v7 + 120) != *(void *)(v7 + 128))
    {
      v38[0] = _NSConcreteStackBlock;
      v38[1] = 3221225472;
      v38[2] = sub_1000AB170;
      v38[3] = &unk_1002102C0;
      v38[4] = v7;
      int v29 = sub_1000B47D0((uint64_t)v44, 21);
      sub_1000AB170((uint64_t)v38, (uint64_t)v29);
      uint64_t v7 = *(void *)(a1 + 32);
    }
    if (*(void *)(v7 + 144) != *(void *)(v7 + 152))
    {
      v37[0] = _NSConcreteStackBlock;
      v37[1] = 3221225472;
      v37[2] = sub_1000AB1C4;
      v37[3] = &unk_1002102E8;
      v37[4] = v7;
      int v30 = sub_1000B4AA0((uint64_t)v44, 22);
      sub_1000AB1C4((uint64_t)v37, (uint64_t)v30);
      uint64_t v7 = *(void *)(a1 + 32);
    }
  }
  v32[5] = *(void *)(v7 + 16);
  uint64_t v33 = QMIServiceMsg::create((QMIServiceMsg *)v44, v6);
  int v34 = 25000;
  uint64_t v35 = 0;
  double v36 = 0;
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472;
  v32[2] = sub_1000AB218;
  v32[3] = &unk_10020E778;
  v32[4] = *(void *)(a1 + 32);
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1000B4D70;
  aBlock[3] = &unk_10020E918;
  aBlock[4] = v32;
  long long v31 = _Block_copy(aBlock);
  double v36 = v31;
  if (v33)
  {
    qmi::Client::send();
    long long v31 = v36;
  }
  if (v31) {
    _Block_release(v31);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v44);
}

void sub_1000AB060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_100060AD4((uint64_t)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v6 - 120));
  _Unwind_Resume(a1);
}

uint64_t sub_1000AB08C(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(*(void *)(result + 32) + 48);
  return result;
}

uint64_t sub_1000AB09C(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(*(void *)(result + 32) + 52);
  a2[1] = *(_DWORD *)(*(void *)(result + 32) + 56);
  return result;
}

uint64_t sub_1000AB0B8(uint64_t result, void *a2)
{
  *a2 = *(void *)(*(void *)(result + 32) + 64);
  return result;
}

uint64_t sub_1000AB0C8(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = *(_DWORD *)(*(void *)(*(void *)(result + 32) + 72) + 8);
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(*(void *)(*(void *)(result + 32) + 72) + 12);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(*(void *)(*(void *)(result + 32) + 72) + 16);
  *(_DWORD *)(a2 + 12) = **(_DWORD **)(*(void *)(result + 32) + 72);
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(*(void *)(*(void *)(result + 32) + 72) + 4);
  return result;
}

uint64_t sub_1000AB11C(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = *(_DWORD *)(*(void *)(*(void *)(result + 32) + 96) + 8);
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(*(void *)(*(void *)(result + 32) + 96) + 12);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(*(void *)(*(void *)(result + 32) + 96) + 16);
  *(_DWORD *)(a2 + 12) = **(_DWORD **)(*(void *)(result + 32) + 96);
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(*(void *)(*(void *)(result + 32) + 96) + 4);
  return result;
}

uint64_t sub_1000AB170(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = *(_DWORD *)(*(void *)(*(void *)(result + 32) + 120) + 8);
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(*(void *)(*(void *)(result + 32) + 120) + 12);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(*(void *)(*(void *)(result + 32) + 120) + 16);
  *(_DWORD *)(a2 + 12) = **(_DWORD **)(*(void *)(result + 32) + 120);
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(*(void *)(*(void *)(result + 32) + 120) + 4);
  return result;
}

uint64_t sub_1000AB1C4(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = *(_DWORD *)(*(void *)(*(void *)(result + 32) + 144) + 8);
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(*(void *)(*(void *)(result + 32) + 144) + 12);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(*(void *)(*(void *)(result + 32) + 144) + 16);
  *(_DWORD *)(a2 + 12) = **(_DWORD **)(*(void *)(result + 32) + 144);
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(*(void *)(*(void *)(result + 32) + 144) + 4);
  return result;
}

id sub_1000AB218(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a2 + 4);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v3) {
    id result = +[WCM_Logging logLevel:16, @"QMI.NAS.%d: WrmSdmLocationDbInfo::Response Error %d %s", *(unsigned int *)(v4 + 32), v3, qmi::asString() message];
  }
  else {
    id result = +[WCM_Logging logLevel:22, @"QMI.NAS.%d: WrmSdmLocationDbInfo::Response Successful", *(unsigned int *)(v4 + 32), v6, v7 message];
  }
  *(void *)(*(void *)(a1 + 32) + 80) = *(void *)(*(void *)(a1 + 32) + 72);
  *(void *)(*(void *)(a1 + 32) + 104) = *(void *)(*(void *)(a1 + 32) + 96);
  *(void *)(*(void *)(a1 + 32) + 128) = *(void *)(*(void *)(a1 + 32) + 120);
  *(void *)(*(void *)(a1 + 32) + 152) = *(void *)(*(void *)(a1 + 32) + 144);
  return result;
}

char *sub_1000AB364(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1000AB414();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1000AB414()
{
}

void sub_1000AB548()
{
}

uint64_t sub_1000AB55C()
{
  return sub_100056B9C();
}

unsigned char **sub_1000AB564(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  id result = sub_100056BA4((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000AB5C0()
{
}

char *sub_1000AB61C(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1000AB6CC();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1000AB6CC()
{
}

void sub_1000AB800()
{
}

uint64_t sub_1000AB814()
{
  return sub_100056B9C();
}

unsigned char **sub_1000AB81C(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  id result = sub_100056BA4((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000AB878()
{
}

char *sub_1000AB8D4(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1000AB984();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1000AB984()
{
}

void sub_1000ABAB8()
{
}

uint64_t sub_1000ABACC()
{
  return sub_100056B9C();
}

unsigned char **sub_1000ABAD4(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  id result = sub_100056BA4((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000ABB30()
{
}

char *sub_1000ABB8C(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1000ABC3C();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1000ABC3C()
{
}

void sub_1000ABD70()
{
}

uint64_t sub_1000ABD84()
{
  return sub_100056B9C();
}

unsigned char **sub_1000ABD8C(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  id result = sub_100056BA4((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000ABDE8()
{
}

void sub_1000ABE44(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1000ABEA8(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1000ABE94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1000ABEA8(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_1000ABFA0(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1000ABF5C((uint64_t)a2);
  }
}

void sub_1000ABF40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000ABF5C(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 3u);
  return a1;
}

void sub_1000ABF8C(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_1000ABFA0(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 3u);
  return a1;
}

void sub_1000ABFD0(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_1000ABFE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1000AC048(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1000AC034(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1000AC048(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_1000AC140(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1000AC0FC((uint64_t)a2);
  }
}

void sub_1000AC0E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000AC0FC(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x5570u);
  return a1;
}

void sub_1000AC12C(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_1000AC140(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x5570u);
  return a1;
}

void sub_1000AC170(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_1000AC184(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1000AC234();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 16;
}

void sub_1000AC234()
{
}

void *sub_1000AC368(void *a1)
{
  *a1 = off_100210498;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1000AC3B8(void *a1)
{
  *a1 = off_100210498;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  operator delete();
}

uint64_t sub_1000AC428(uint64_t a1)
{
  return sub_100057338((void *)(a1 + 16));
}

unsigned char **sub_1000AC430(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  id result = sub_100057354((unsigned char **)a2, (_DWORD *)(a1 + 16));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000AC48C()
{
}

void sub_1000AC508()
{
}

void *sub_1000AC52C(void *result, const void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    id result = sub_1000AC5A8(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      id result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1000AC58C(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1000AC5A8(void *a1, uint64_t a2)
{
  if (a2 < 0) {
    sub_100057D30();
  }
  id result = (char *)sub_100057DD8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

char *sub_1000AC5E8(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1000AC698();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 16;
}

void sub_1000AC698()
{
}

void *sub_1000AC7CC(void *a1)
{
  *a1 = off_1002104E8;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1000AC81C(void *a1)
{
  *a1 = off_1002104E8;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  operator delete();
}

uint64_t sub_1000AC88C(uint64_t a1)
{
  return sub_100057338((void *)(a1 + 16));
}

unsigned char **sub_1000AC894(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  id result = sub_100057354((unsigned char **)a2, (_DWORD *)(a1 + 16));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000AC8F0()
{
}

void sub_1000AC96C()
{
}

char *sub_1000AC990(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1000ACA40();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 16;
}

void sub_1000ACA40()
{
}

void *sub_1000ACB74(void *a1)
{
  *a1 = off_100210538;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1000ACBC4(void *a1)
{
  *a1 = off_100210538;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  operator delete();
}

uint64_t sub_1000ACC34(uint64_t a1)
{
  return sub_100057338((void *)(a1 + 16));
}

unsigned char **sub_1000ACC3C(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  id result = sub_100057354((unsigned char **)a2, (_DWORD *)(a1 + 16));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000ACC98()
{
}

void sub_1000ACD14()
{
}

char *sub_1000ACD38(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1000ACDE8();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 16;
}

void sub_1000ACDE8()
{
}

void *sub_1000ACF1C(void *a1)
{
  *a1 = off_100210588;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1000ACF6C(void *a1)
{
  *a1 = off_100210588;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  operator delete();
}

uint64_t sub_1000ACFDC(uint64_t a1)
{
  return sub_100057338((void *)(a1 + 16));
}

unsigned char **sub_1000ACFE4(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  id result = sub_100057354((unsigned char **)a2, (_DWORD *)(a1 + 16));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000AD040()
{
}

void sub_1000AD0BC()
{
}

char *sub_1000AD0E0(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1000AD190();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 16;
}

void sub_1000AD190()
{
}

void *sub_1000AD2C4(void *a1)
{
  *a1 = off_1002105D8;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1000AD314(void *a1)
{
  *a1 = off_1002105D8;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  operator delete();
}

uint64_t sub_1000AD384(uint64_t a1)
{
  return sub_100057338((void *)(a1 + 16));
}

unsigned char **sub_1000AD38C(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  id result = sub_100057354((unsigned char **)a2, (_DWORD *)(a1 + 16));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000AD3E8()
{
}

void sub_1000AD464()
{
}

char *sub_1000AD488(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1000AD538();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 16;
}

void sub_1000AD538()
{
}

void *sub_1000AD66C(void *a1)
{
  *a1 = off_100210628;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1000AD6BC(void *a1)
{
  *a1 = off_100210628;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  operator delete();
}

uint64_t sub_1000AD72C(uint64_t a1)
{
  return sub_100057338((void *)(a1 + 16));
}

unsigned char **sub_1000AD734(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  id result = sub_100057354((unsigned char **)a2, (_DWORD *)(a1 + 16));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000AD790()
{
}

void sub_1000AD80C()
{
}

char *sub_1000AD830(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1000AD8E0();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 16;
}

void sub_1000AD8E0()
{
}

void *sub_1000ADA14(void *a1)
{
  *a1 = off_100210678;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1000ADA64(void *a1)
{
  *a1 = off_100210678;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  operator delete();
}

uint64_t sub_1000ADAD4(uint64_t a1)
{
  return sub_100057338((void *)(a1 + 16));
}

unsigned char **sub_1000ADADC(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  id result = sub_100057354((unsigned char **)a2, (_DWORD *)(a1 + 16));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000ADB38()
{
}

void sub_1000ADBB4()
{
}

char *sub_1000ADBD8(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1000ADC88();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 16;
}

void sub_1000ADC88()
{
}

void *sub_1000ADDBC(void *a1)
{
  *a1 = off_1002106C8;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1000ADE0C(void *a1)
{
  *a1 = off_1002106C8;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  operator delete();
}

uint64_t sub_1000ADE7C(uint64_t a1)
{
  return sub_100057338((void *)(a1 + 16));
}

unsigned char **sub_1000ADE84(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  id result = sub_100057354((unsigned char **)a2, (_DWORD *)(a1 + 16));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000ADEE0()
{
}

void sub_1000ADF5C()
{
}

char *sub_1000ADF80(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1000AE030();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 16;
}

void sub_1000AE030()
{
}

void *sub_1000AE164(void *a1)
{
  *a1 = off_100210718;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1000AE1B4(void *a1)
{
  *a1 = off_100210718;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  operator delete();
}

uint64_t sub_1000AE224(uint64_t a1)
{
  return sub_100057338((void *)(a1 + 16));
}

unsigned char **sub_1000AE22C(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  id result = sub_100057354((unsigned char **)a2, (_DWORD *)(a1 + 16));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000AE288()
{
}

void sub_1000AE304()
{
}

char *sub_1000AE328(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1000AE3D8();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1000AE3D8()
{
}

void sub_1000AE50C()
{
}

uint64_t sub_1000AE520()
{
  return sub_100056EFC();
}

unsigned char **sub_1000AE528(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  id result = sub_10005787C((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000AE584()
{
}

char *sub_1000AE5E8(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1000AE698();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1000AE698()
{
}

void sub_1000AE7CC()
{
}

uint64_t sub_1000AE7E0()
{
  return sub_100056EFC();
}

unsigned char **sub_1000AE7E8(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  id result = sub_10005787C((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000AE844()
{
}

void sub_1000AE8A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1000AE90C(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1000AE8F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1000AE90C(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_1000AEA04(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1000AE9C0((uint64_t)a2);
  }
}

void sub_1000AE9A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000AE9C0(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x6Cu);
  return a1;
}

void sub_1000AE9F0(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_1000AEA04(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x6Cu);
  return a1;
}

void sub_1000AEA34(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000AEA48(qmi::MessageBase *a1, uint64_t a2, void *a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    int v9 = v7;
    if (sub_1000AEAEC((uint64_t)a1, result, v7, a3))
    {
      return 1;
    }
    else
    {
      unint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))qmi::MessageBase::sParsingErrorHandler;
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

BOOL sub_1000AEAEC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = a2;
  sub_100056CEC(&v7, a3, a3, (unint64_t)a4);
  uint64_t v5 = v7;
  if (v7) {
    (*(void (**)(void))(*a4 + 16))(*a4);
  }
  return v5 != 0;
}

uint64_t sub_1000AEB54(qmi::MessageBase *a1, uint64_t a2, unint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    int v9 = v7;
    if (sub_1000AEBF8((uint64_t)a1, (tlv *)result, v7, a3))
    {
      return 1;
    }
    else
    {
      unint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))qmi::MessageBase::sParsingErrorHandler;
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

BOOL sub_1000AEBF8(uint64_t a1, tlv *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = a2;
  sub_100056DF8(&v7, a3, a3, a4);
  uint64_t v5 = v7;
  if (v7) {
    (*(void (**)(void))(*(void *)a4 + 16))();
  }
  return v5 != 0;
}

uint64_t sub_1000AEC58(qmi::MessageBase *a1, uint64_t a2, unint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    int v9 = v7;
    if (sub_1000AECFC((uint64_t)a1, (tlv *)result, v7, a3))
    {
      return 1;
    }
    else
    {
      unint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))qmi::MessageBase::sParsingErrorHandler;
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

BOOL sub_1000AECFC(uint64_t a1, tlv *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = a2;
  sub_100056EAC(&v7, a3, a3, a4);
  uint64_t v5 = v7;
  if (v7) {
    (*(void (**)(void))(*(void *)a4 + 16))();
  }
  return v5 != 0;
}

uint64_t sub_1000AED5C(qmi::MessageBase *a1, uint64_t a2, unint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    int v9 = v7;
    if (sub_1000AEE00((uint64_t)a1, (tlv *)result, v7, a3))
    {
      return 1;
    }
    else
    {
      unint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))qmi::MessageBase::sParsingErrorHandler;
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

BOOL sub_1000AEE00(uint64_t a1, tlv *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = a2;
  sub_100056BB8(&v7, a3, a3, a4);
  uint64_t v5 = v7;
  if (v7) {
    (*(void (**)(void))(*(void *)a4 + 16))();
  }
  return v5 != 0;
}

void sub_1000AEE60(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1000AEEC4(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1000AEEB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1000AEEC4(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_1000AEFBC(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1000AEF78((uint64_t)a2);
  }
}

void sub_1000AEF5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000AEF78(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x51u);
  return a1;
}

void sub_1000AEFA8(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_1000AEFBC(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x51u);
  return a1;
}

void sub_1000AEFEC(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000AF000(qmi::MessageBase *a1, uint64_t a2, unint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    int v9 = v7;
    if (sub_1000AF0A4((uint64_t)a1, (tlv *)result, v7, a3))
    {
      return 1;
    }
    else
    {
      unint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))qmi::MessageBase::sParsingErrorHandler;
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

BOOL sub_1000AF0A4(uint64_t a1, tlv *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = a2;
  sub_100089BE4(&v7, a3, a3, a4);
  uint64_t v5 = v7;
  if (v7) {
    (*(void (**)(void))(*(void *)a4 + 16))();
  }
  return v5 != 0;
}

void sub_1000AF104(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1000AF168(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1000AF154(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1000AF168(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_1000AF260(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1000AF21C((uint64_t)a2);
  }
}

void sub_1000AF200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000AF21C(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x5570u);
  return a1;
}

void sub_1000AF24C(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_1000AF260(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x5570u);
  return a1;
}

void sub_1000AF290(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000AF2A4(qmi::MessageBase *a1, uint64_t a2, unint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    int v9 = v7;
    if (sub_1000AF348((uint64_t)a1, result, v7, a3))
    {
      return 1;
    }
    else
    {
      unint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))qmi::MessageBase::sParsingErrorHandler;
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

BOOL sub_1000AF348(uint64_t a1, uint64_t a2, int a3, unint64_t a4)
{
  uint64_t v8 = a2;
  sub_100089DF8(&v8, a3, a4, (uint64_t)v7);
  uint64_t v5 = v8;
  if (v8) {
    (*(void (**)(void))(*(void *)a4 + 16))();
  }
  return v5 != 0;
}

void sub_1000AF3A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1000AF40C(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1000AF3F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1000AF40C(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_1000AF504(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1000AF4C0((uint64_t)a2);
  }
}

void sub_1000AF4A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000AF4C0(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x5571u);
  return a1;
}

void sub_1000AF4F0(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_1000AF504(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x5571u);
  return a1;
}

void sub_1000AF534(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_1000AF548(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1000AF5F8();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1000AF5F8()
{
}

void sub_1000AF72C()
{
}

uint64_t sub_1000AF740()
{
  return sub_100056B9C();
}

unsigned char **sub_1000AF748(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = sub_100056BA4((unsigned char **)a2, (unsigned char *)(a1 + 9));
  int v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000AF7A4()
{
}

void sub_1000AF800(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1000AF864(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1000AF850(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1000AF864(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_1000AF95C(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1000AF918((uint64_t)a2);
  }
}

void sub_1000AF8FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000AF918(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x45u);
  return a1;
}

void sub_1000AF948(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_1000AF95C(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x45u);
  return a1;
}

void sub_1000AF98C(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_1000AF9A0(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1000AFA50();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1000AFA50()
{
}

void sub_1000AFB84()
{
}

uint64_t sub_1000AFB98()
{
  return sub_100056EFC();
}

unsigned char **sub_1000AFBA0(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = sub_10005787C((unsigned char **)a2, (unsigned char *)(a1 + 9));
  int v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000AFBFC()
{
}

char *sub_1000AFC60(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1000AFD10();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1000AFD10()
{
}

void sub_1000AFE44()
{
}

uint64_t sub_1000AFE58()
{
  return sub_100056EFC();
}

unsigned char **sub_1000AFE60(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = sub_10005787C((unsigned char **)a2, (unsigned char *)(a1 + 9));
  int v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000AFEBC()
{
}

char *sub_1000AFF20(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1000AFFD0();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1000AFFD0()
{
}

void sub_1000B0104()
{
}

uint64_t sub_1000B0118()
{
  return sub_100056EFC();
}

unsigned char **sub_1000B0120(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = sub_10005787C((unsigned char **)a2, (unsigned char *)(a1 + 9));
  int v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000B017C()
{
}

char *sub_1000B01E0(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1000B0290();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1000B0290()
{
}

void sub_1000B03C4()
{
}

uint64_t sub_1000B03D8()
{
  return sub_100056EFC();
}

unsigned char **sub_1000B03E0(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = sub_10005787C((unsigned char **)a2, (unsigned char *)(a1 + 9));
  int v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000B043C()
{
}

char *sub_1000B04A0(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1000B0550();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 10;
}

void sub_1000B0550()
{
}

void sub_1000B0688()
{
}

uint64_t sub_1000B069C()
{
  return sub_100056980();
}

uint64_t *sub_1000B06A4(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = sub_100056988(a2, a1 + 10);
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void sub_1000B0700()
{
}

char *sub_1000B0764(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1000B0814();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1000B0814()
{
}

void sub_1000B0948()
{
}

uint64_t sub_1000B095C()
{
  return sub_100056EFC();
}

unsigned char **sub_1000B0964(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = sub_10005787C((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000B09C0()
{
}

void sub_1000B0A24(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1000B0A88(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1000B0A74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1000B0A88(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_1000B0B80(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1000B0B3C((uint64_t)a2);
  }
}

void sub_1000B0B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000B0B3C(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 2u);
  return a1;
}

void sub_1000B0B6C(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_1000B0B80(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 2u);
  return a1;
}

void sub_1000B0BB0(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_1000B0BC4(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1000B0C74();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1000B0C74()
{
}

void sub_1000B0DA8()
{
}

uint64_t sub_1000B0DBC()
{
  return sub_100056E78();
}

unsigned char **sub_1000B0DC4(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = sub_100089468((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000B0E20()
{
}

void sub_1000B0E84(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1000B0EE8(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1000B0ED4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1000B0EE8(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_1000B0FE0(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1000B0F9C((uint64_t)a2);
  }
}

void sub_1000B0F80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000B0F9C(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x5568u);
  return a1;
}

void sub_1000B0FCC(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_1000B0FE0(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x5568u);
  return a1;
}

void sub_1000B1010(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_1000B1024(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1000B10D4();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1000B10D4()
{
}

void sub_1000B1208()
{
}

uint64_t sub_1000B121C()
{
  return sub_100056EFC();
}

unsigned char **sub_1000B1224(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = sub_10005787C((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000B1280()
{
}

char *sub_1000B12E4(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1000B1394();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 10;
}

void sub_1000B1394()
{
}

void sub_1000B14CC()
{
}

uint64_t sub_1000B14E0()
{
  return sub_100056980();
}

uint64_t *sub_1000B14E8(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = sub_100056988(a2, a1 + 10);
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void sub_1000B1544()
{
}

char *sub_1000B15A8(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1000B1658();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1000B1658()
{
}

void sub_1000B178C()
{
}

uint64_t sub_1000B17A0()
{
  return sub_100056B9C();
}

unsigned char **sub_1000B17A8(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = sub_100056BA4((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000B1804()
{
}

char *sub_1000B1860(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1000B1910();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1000B1910()
{
}

void sub_1000B1A44()
{
}

uint64_t sub_1000B1A58()
{
  return sub_100056B9C();
}

unsigned char **sub_1000B1A60(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = sub_100056BA4((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000B1ABC()
{
}

char *sub_1000B1B18(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1000B1BC8();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1000B1BC8()
{
}

void sub_1000B1CFC()
{
}

uint64_t sub_1000B1D10()
{
  return sub_100056B9C();
}

unsigned char **sub_1000B1D18(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = sub_100056BA4((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000B1D74()
{
}

char *sub_1000B1DD0(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1000B1E80();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1000B1E80()
{
}

void sub_1000B1FB4()
{
}

uint64_t sub_1000B1FC8()
{
  return sub_100056B9C();
}

unsigned char **sub_1000B1FD0(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = sub_100056BA4((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000B202C()
{
}

void sub_1000B2088(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1000B20EC(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1000B20D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1000B20EC(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_1000B21E4(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1000B21A0((uint64_t)a2);
  }
}

void sub_1000B2184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000B21A0(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x556Au);
  return a1;
}

void sub_1000B21D0(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_1000B21E4(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x556Au);
  return a1;
}

void sub_1000B2214(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B2228(qmi::MessageBase *a1, uint64_t a2, unint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    int v9 = v7;
    if (sub_1000B22CC((uint64_t)a1, (tlv *)result, v7, a3))
    {
      return 1;
    }
    else
    {
      unint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))qmi::MessageBase::sParsingErrorHandler;
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

BOOL sub_1000B22CC(uint64_t a1, tlv *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = a2;
  sub_100089B34(&v7, a3, a3, a4);
  uint64_t v5 = v7;
  if (v7) {
    (*(void (**)(void))(*(void *)a4 + 16))();
  }
  return v5 != 0;
}

void sub_1000B232C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1000B2390(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1000B237C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1000B2390(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_1000B2488(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1000B2444((uint64_t)a2);
  }
}

void sub_1000B2428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000B2444(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x556Cu);
  return a1;
}

void sub_1000B2474(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_1000B2488(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x556Cu);
  return a1;
}

void sub_1000B24B8(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B24CC(qmi::MessageBase *a1, uint64_t a2, void *a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    int v9 = v7;
    if (sub_1000B2570((uint64_t)a1, (tlv *)result, v7, a3))
    {
      return 1;
    }
    else
    {
      unint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))qmi::MessageBase::sParsingErrorHandler;
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

BOOL sub_1000B2570(uint64_t a1, tlv *a2, uint64_t a3, void *a4)
{
  uint64_t v7 = a2;
  sub_1000889F8(&v7, a3, a3, (unint64_t)a4);
  uint64_t v5 = v7;
  if (v7) {
    (*(void (**)(void))(*a4 + 16))(*a4);
  }
  return v5 != 0;
}

uint64_t sub_1000B25D0(qmi::MessageBase *a1, uint64_t a2, void *a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    int v9 = v7;
    if (sub_1000B2674((uint64_t)a1, (tlv *)result, v7, a3))
    {
      return 1;
    }
    else
    {
      unint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))qmi::MessageBase::sParsingErrorHandler;
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

BOOL sub_1000B2674(uint64_t a1, tlv *a2, uint64_t a3, void *a4)
{
  uint64_t v7 = a2;
  sub_100088AE0(&v7, a3, a3, (unint64_t)a4);
  uint64_t v5 = v7;
  if (v7) {
    (*(void (**)(void))(*a4 + 16))(*a4);
  }
  return v5 != 0;
}

void sub_1000B26D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1000B2738(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1000B2724(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1000B2738(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_1000B2830(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1000B27EC((uint64_t)a2);
  }
}

void sub_1000B27D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000B27EC(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x556Du);
  return a1;
}

void sub_1000B281C(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_1000B2830(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x556Du);
  return a1;
}

void sub_1000B2860(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B2874(qmi::MessageBase *a1, uint64_t a2, unint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    int v9 = v7;
    if (sub_1000B2918((uint64_t)a1, (tlv *)result, v7, a3))
    {
      return 1;
    }
    else
    {
      unint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))qmi::MessageBase::sParsingErrorHandler;
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

BOOL sub_1000B2918(uint64_t a1, tlv *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = a2;
  sub_100089B8C(&v7, a3, a3, a4);
  uint64_t v5 = v7;
  if (v7) {
    (*(void (**)(void))(*(void *)a4 + 16))();
  }
  return v5 != 0;
}

void sub_1000B2978(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1000B29DC(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1000B29C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1000B29DC(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_1000B2AD4(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1000B2A90((uint64_t)a2);
  }
}

void sub_1000B2A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000B2A90(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x556Cu);
  return a1;
}

void sub_1000B2AC0(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_1000B2AD4(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x556Cu);
  return a1;
}

void sub_1000B2B04(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_1000B2B18(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1000B2BC8();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1000B2BC8()
{
}

void sub_1000B2CFC()
{
}

uint64_t sub_1000B2D10()
{
  return sub_100056B9C();
}

unsigned char **sub_1000B2D18(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = sub_100056BA4((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000B2D74()
{
}

char *sub_1000B2DD0(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1000B2E80();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1000B2E80()
{
}

void sub_1000B2FB8()
{
}

uint64_t sub_1000B2FCC()
{
  return sub_100056AC8();
}

_DWORD **sub_1000B2FD4(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_DWORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = sub_100088A7C((_DWORD **)a2, (_DWORD *)(a1 + 12));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000B3030()
{
}

char *sub_1000B3094(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1000B3144();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 16;
}

void sub_1000B3144()
{
}

void sub_1000B3278()
{
}

uint64_t sub_1000B328C()
{
  return sub_100056AC8();
}

void **sub_1000B3294(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (void *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = sub_100088B30((void **)a2, (void *)(a1 + 16));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000B32F0()
{
}

void sub_1000B3354(uint64_t a1, unint64_t i, uint64_t a3, unint64_t a4, uint64_t a5, char a6)
{
  do
  {
    unint64_t v12 = i;
    while (2)
    {
      while (2)
      {
        uint64_t v13 = a1;
        for (uint64_t i = v12; ; uint64_t i = (unint64_t)v23)
        {
          uint64_t v14 = i - a4;
          unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(i - a4) >> 2);
          if (v7 || !v6)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(_DWORD *)(a4 + 16) < *(_DWORD *)(i - 4))
                {
                  int v109 = *(_DWORD *)(i - 4);
                  long long v98 = *(_OWORD *)(i - 20);
                  long long v49 = *(_OWORD *)a4;
                  *(_DWORD *)(i - 4) = *(_DWORD *)(a4 + 16);
                  *(_OWORD *)(i - 20) = v49;
                  *(_OWORD *)a4 = v98;
                  *(_DWORD *)(a4 + 16) = v109;
                }
                break;
              case 3uLL:
                sub_1000B3C74(a1, i, i - 20, i - 20, a3, a4 + 20);
                break;
              case 4uLL:
                sub_1000B4050(a1, i, i - 20, i - 20, i - 40, i - 40, a3, a4 + 20);
                break;
              case 5uLL:
                unint64_t v50 = (long long *)(i - 20);
                unint64_t v51 = (long long *)(i - 40);
                uint64_t v52 = (long long *)(i - 60);
                sub_1000B4050(a1, i, i - 20, i - 20, i - 40, i - 40, i - 60, i - 60);
                if (*(_DWORD *)(a4 + 16) < *(_DWORD *)(i - 64))
                {
                  unint64_t v53 = i - 80;
                  int v110 = *(_DWORD *)(i - 64);
                  long long v99 = *(_OWORD *)(i - 80);
                  long long v54 = *(_OWORD *)a4;
                  *(_DWORD *)(v53 + 16) = *(_DWORD *)(a4 + 16);
                  *(_OWORD *)unint64_t v53 = v54;
                  *(_OWORD *)a4 = v99;
                  *(_DWORD *)(a4 + 16) = v110;
                  if (*(_DWORD *)(i - 64) < *(_DWORD *)(i - 44))
                  {
                    int v111 = *(_DWORD *)(i - 44);
                    long long v100 = *v52;
                    *uint64_t v52 = *(_OWORD *)v53;
                    *(_DWORD *)(i - 44) = *(_DWORD *)(i - 64);
                    *(_DWORD *)(i - 64) = v111;
                    *(_OWORD *)unint64_t v53 = v100;
                    if (*(_DWORD *)(i - 44) < *(_DWORD *)(i - 24))
                    {
                      int v112 = *(_DWORD *)(i - 24);
                      long long v101 = *v51;
                      *unint64_t v51 = *v52;
                      *(_DWORD *)(i - 24) = *(_DWORD *)(i - 44);
                      *(_DWORD *)(i - 44) = v112;
                      *uint64_t v52 = v101;
                      if (*(_DWORD *)(i - 24) < *(_DWORD *)(i - 4))
                      {
                        int v113 = *(_DWORD *)(i - 4);
                        long long v102 = *v50;
                        *unint64_t v50 = *v51;
                        *(_DWORD *)(i - 4) = *(_DWORD *)(i - 24);
                        *(_DWORD *)(i - 24) = v113;
                        *unint64_t v51 = v102;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v14 <= 479)
          {
            unint64_t v55 = i - 20;
            BOOL v57 = i == a4 || v55 == a4;
            if (a6)
            {
              if (!v57)
              {
                uint64_t v58 = 0;
                do
                {
                  unsigned int v59 = *(_DWORD *)(v55 - 4);
                  unsigned int v60 = *(_DWORD *)(v55 + 16);
                  v55 -= 20;
                  if (v59 < v60)
                  {
                    long long v103 = *(_OWORD *)v55;
                    uint64_t v61 = v58;
                    do
                    {
                      uint64_t v62 = i + v61;
                      *(_OWORD *)(v62 - 40) = *(_OWORD *)(i + v61 - 20);
                      *(_DWORD *)(v62 - 24) = *(_DWORD *)(i + v61 - 4);
                      if (!v61) {
                        break;
                      }
                      v61 += 20;
                    }
                    while (v59 < *(_DWORD *)(v62 + 16));
                    *(_OWORD *)(v62 - 20) = v103;
                    *(_DWORD *)(v62 - 4) = v59;
                  }
                  v58 -= 20;
                }
                while (v55 != a4);
              }
            }
            else if (!v57)
            {
              unint64_t v85 = i - 40;
              do
              {
                unsigned int v86 = *(_DWORD *)(v55 - 4);
                unsigned int v87 = *(_DWORD *)(v55 + 16);
                v55 -= 20;
                if (v86 < v87)
                {
                  long long v105 = *(_OWORD *)v55;
                  unint64_t v88 = v85;
                  do
                  {
                    *(_OWORD *)unint64_t v88 = *(_OWORD *)(v88 + 20);
                    *(_DWORD *)(v88 + 16) = *(_DWORD *)(v88 + 36);
                    unsigned int v89 = *(_DWORD *)(v88 + 56);
                    v88 += 20;
                  }
                  while (v86 < v89);
                  *(_OWORD *)unint64_t v88 = v105;
                  *(_DWORD *)(v88 + 16) = v86;
                }
                v85 -= 20;
              }
              while (v55 != a4);
            }
            return;
          }
          if (!a5)
          {
            if (i != a4)
            {
              unint64_t v63 = (v15 - 2) >> 1;
              unint64_t v64 = v63 + 1;
              uint64_t v65 = i - 20 * v63;
              do
              {
                sub_1000B4128(a1, i, v15, v65, v65);
                v65 += 20;
                --v64;
              }
              while (v64);
              int64_t v66 = v14 / 0x14uLL;
              do
              {
                uint64_t v67 = 0;
                int v114 = *(_DWORD *)(i - 4);
                long long v104 = *(_OWORD *)(i - 20);
                unint64_t v68 = i;
                do
                {
                  unint64_t v69 = v68 + 20 * ~v67;
                  uint64_t v70 = (2 * v67) | 1;
                  uint64_t v71 = 2 * v67 + 2;
                  if (v71 < v66)
                  {
                    unsigned int v72 = *(_DWORD *)(v69 - 4);
                    unsigned int v73 = *(_DWORD *)(v69 - 24);
                    BOOL v74 = v72 >= v73;
                    uint64_t v75 = v72 >= v73 ? 0 : -1;
                    v69 += 20 * v75;
                    if (!v74) {
                      uint64_t v70 = v71;
                    }
                  }
                  long long v76 = *(_OWORD *)(v69 - 20);
                  *(_DWORD *)(v68 - 4) = *(_DWORD *)(v69 - 4);
                  *(_OWORD *)(v68 - 20) = v76;
                  unint64_t v68 = v69;
                  uint64_t v67 = v70;
                }
                while (v70 <= (uint64_t)((unint64_t)(v66 - 2) >> 1));
                v77 = (long long *)(v69 - 20);
                if (v69 == a4 + 20)
                {
                  *(_DWORD *)(v69 - 4) = v114;
                  long long *v77 = v104;
                }
                else
                {
                  long long v78 = *(_OWORD *)a4;
                  *(_DWORD *)(v69 - 4) = *(_DWORD *)(a4 + 16);
                  long long *v77 = v78;
                  *(_DWORD *)(a4 + 16) = v114;
                  *(_OWORD *)a4 = v104;
                  if ((uint64_t)(i - (void)v77) >= 21)
                  {
                    unint64_t v79 = ((i - (unint64_t)v77) / 0x14 - 2) >> 1;
                    unint64_t v80 = i - 20 * v79;
                    unsigned int v81 = *(_DWORD *)(v69 - 4);
                    if (*(_DWORD *)(v80 - 4) < v81)
                    {
                      long long v94 = *v77;
                      do
                      {
                        unint64_t v82 = v69;
                        unint64_t v69 = v80;
                        long long v83 = *(_OWORD *)(v80 - 20);
                        *(_DWORD *)(v82 - 4) = *(_DWORD *)(v80 - 4);
                        *(_OWORD *)(v82 - 20) = v83;
                        if (!v79) {
                          break;
                        }
                        unint64_t v79 = (v79 - 1) >> 1;
                        unint64_t v80 = i - 20 * v79;
                      }
                      while (*(_DWORD *)(v80 - 4) < v81);
                      *(_OWORD *)(v69 - 20) = v94;
                      *(_DWORD *)(v69 - 4) = v81;
                    }
                  }
                }
                a4 += 20;
              }
              while (v66-- > 2);
            }
            return;
          }
          unint64_t v16 = v15 >> 1;
          uint64_t v17 = i - 20 * (v15 >> 1);
          if (v15 >= 0x81)
          {
            sub_1000B3C74(a1, i, i - 20 * (v15 >> 1), i - 20 * (v15 >> 1), a4 + 20, a4 + 20);
            uint64_t v18 = i - 20 * v16 + 20;
            sub_1000B3C74(i - 20, i - 20, v18, v18, a4 + 40, a4 + 40);
            uint64_t v19 = i + 20 * ~v16;
            sub_1000B3C74(i - 40, i - 40, v19, v19, a4 + 60, a4 + 60);
            sub_1000B3C74(v18, v18, v17, v17, v19, v19);
            int v106 = *(_DWORD *)(i - 4);
            long long v95 = *(_OWORD *)(i - 20);
            int v20 = *(_DWORD *)(v17 - 4);
            *(_OWORD *)(i - 20) = *(_OWORD *)(v17 - 20);
            *(_DWORD *)(i - 4) = v20;
            *(_DWORD *)(v17 - 4) = v106;
            *(_OWORD *)(v17 - 20) = v95;
          }
          else
          {
            sub_1000B3C74(i - 20 * (v15 >> 1), i - 20 * (v15 >> 1), a1, i, a4 + 20, a4 + 20);
          }
          --a5;
          if ((a6 & 1) != 0 || *(_DWORD *)(i + 16) < *(_DWORD *)(i - 4)) {
            break;
          }
          long long v92 = *(_OWORD *)(i - 20);
          unsigned int v21 = *(_DWORD *)(i - 4);
          if (v21 < *(_DWORD *)(a4 + 16))
          {
            unint64_t v22 = i;
            do
            {
              unint64_t v23 = (_DWORD *)(v22 - 20);
              unsigned int v24 = *(_DWORD *)(v22 - 24);
              v22 -= 20;
            }
            while (v21 >= v24);
          }
          else
          {
            unint64_t v25 = (unsigned int *)(i - 24);
            do
            {
              unint64_t v23 = v25 + 1;
              if ((unint64_t)(v25 + 1) <= a4) {
                break;
              }
              unsigned int v26 = *v25;
              v25 -= 5;
            }
            while (v21 >= v26);
          }
          unint64_t v27 = a4;
          if ((unint64_t)v23 > a4)
          {
            unint64_t v28 = a4;
            do
            {
              unint64_t v27 = v28 + 20;
              unsigned int v29 = *(_DWORD *)(v28 + 16);
              v28 += 20;
            }
            while (v21 < v29);
          }
          while (v27 < (unint64_t)v23)
          {
            int v107 = *(v23 - 1);
            long long v96 = *(_OWORD *)(v23 - 5);
            long long v30 = *(_OWORD *)(v27 - 20);
            *(v23 - 1) = *(_DWORD *)(v27 - 4);
            *(_OWORD *)(v23 - 5) = v30;
            *(_DWORD *)(v27 - 4) = v107;
            *(_OWORD *)(v27 - 20) = v96;
            do
            {
              unsigned int v31 = *(v23 - 6);
              v23 -= 5;
            }
            while (v21 >= v31);
            do
            {
              unsigned int v32 = *(_DWORD *)(v27 + 16);
              v27 += 20;
            }
            while (v21 < v32);
          }
          BOOL v6 = (unint64_t)(v23 + 5) >= i;
          BOOL v7 = v23 + 5 == (_DWORD *)i;
          if (v23 + 5 != (_DWORD *)i)
          {
            long long v33 = *(_OWORD *)v23;
            *(_DWORD *)(i - 4) = v23[4];
            *(_OWORD *)(i - 20) = v33;
          }
          a6 = 0;
          *(_OWORD *)unint64_t v23 = v92;
          v23[4] = v21;
        }
        uint64_t v34 = 0;
        long long v93 = *(_OWORD *)(i - 20);
        unsigned int v35 = *(_DWORD *)(i - 4);
        do
        {
          unsigned int v36 = *(_DWORD *)(i + v34 - 24);
          v34 -= 20;
        }
        while (v36 < v35);
        unint64_t v37 = i + v34;
        unint64_t v38 = a4;
        if (v34 == -20)
        {
          unint64_t v41 = a4;
          while (v41 < v37)
          {
            unint64_t v39 = v41 + 20;
            unsigned int v42 = *(_DWORD *)(v41 + 16);
            v41 += 20;
            if (v42 < v35) {
              goto LABEL_39;
            }
          }
          unint64_t v39 = v41;
        }
        else
        {
          do
          {
            unint64_t v39 = v38 + 20;
            unsigned int v40 = *(_DWORD *)(v38 + 16);
            v38 += 20;
          }
          while (v40 >= v35);
        }
LABEL_39:
        unint64_t v12 = v37;
        if (v39 < v37)
        {
          unint64_t v43 = v39;
          do
          {
            int v108 = *(_DWORD *)(v12 - 4);
            long long v97 = *(_OWORD *)(v12 - 20);
            long long v44 = *(_OWORD *)(v43 - 20);
            *(_DWORD *)(v12 - 4) = *(_DWORD *)(v43 - 4);
            *(_OWORD *)(v12 - 20) = v44;
            *(_DWORD *)(v43 - 4) = v108;
            *(_OWORD *)(v43 - 20) = v97;
            do
            {
              unsigned int v45 = *(_DWORD *)(v12 - 24);
              v12 -= 20;
            }
            while (v45 < v35);
            do
            {
              unsigned int v46 = *(_DWORD *)(v43 + 16);
              v43 += 20;
            }
            while (v46 >= v35);
          }
          while (v43 < v12);
        }
        if (v12 + 20 != i)
        {
          long long v47 = *(_OWORD *)v12;
          *(_DWORD *)(i - 4) = *(_DWORD *)(v12 + 16);
          *(_OWORD *)(i - 20) = v47;
        }
        *(_OWORD *)unint64_t v12 = v93;
        *(_DWORD *)(v12 + 16) = v35;
        if (v39 < v37)
        {
LABEL_50:
          sub_1000B3354(v13, i, v12 + 20, v12 + 20, a5, a6 & 1);
          a6 = 0;
          a1 = v12 + 20;
          continue;
        }
        break;
      }
      char v48 = sub_1000B3D7C(a1, i, v12 + 20, v12 + 20);
      if (!sub_1000B3D7C(v12, v12, a3, a4))
      {
        a1 = v12 + 20;
        if (v48) {
          continue;
        }
        goto LABEL_50;
      }
      break;
    }
    a3 = v12 + 20;
    a4 = v12 + 20;
  }
  while ((v48 & 1) == 0);
}

__n128 sub_1000B3C74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  BOOL v6 = (__n128 *)(a4 - 20);
  BOOL v7 = (__n128 *)(a2 - 20);
  unsigned int v8 = *(_DWORD *)(a4 - 4);
  if (v8 >= *(_DWORD *)(a2 - 4))
  {
    if (*(_DWORD *)(a6 - 4) < v8)
    {
      int v13 = *(_DWORD *)(a4 - 4);
      __n128 result = *v6;
      int v14 = *(_DWORD *)(a6 - 4);
      *BOOL v6 = *(__n128 *)(a6 - 20);
      *(_DWORD *)(a4 - 4) = v14;
      *(__n128 *)(a6 - 20) = result;
      *(_DWORD *)(a6 - 4) = v13;
      if (*(_DWORD *)(a4 - 4) < *(_DWORD *)(a2 - 4))
      {
        int v15 = *(_DWORD *)(a2 - 4);
        __n128 result = *v7;
        int v16 = *(_DWORD *)(a4 - 4);
        *BOOL v7 = *v6;
        *(_DWORD *)(a2 - 4) = v16;
        *BOOL v6 = result;
        *(_DWORD *)(a4 - 4) = v15;
      }
    }
  }
  else
  {
    int v9 = (__n128 *)(a6 - 20);
    if (*(_DWORD *)(a6 - 4) >= v8)
    {
      int v17 = *(_DWORD *)(a2 - 4);
      __n128 result = *v7;
      int v18 = *(_DWORD *)(a4 - 4);
      *BOOL v7 = *v6;
      *(_DWORD *)(a2 - 4) = v18;
      *BOOL v6 = result;
      *(_DWORD *)(a4 - 4) = v17;
      if (*(_DWORD *)(a6 - 4) < *(_DWORD *)(a4 - 4))
      {
        int v19 = *(_DWORD *)(a4 - 4);
        __n128 result = *v6;
        int v20 = *(_DWORD *)(a6 - 4);
        *BOOL v6 = *v9;
        *(_DWORD *)(a4 - 4) = v20;
        *int v9 = result;
        *(_DWORD *)(a6 - 4) = v19;
      }
    }
    else
    {
      int v10 = *(_DWORD *)(a2 - 4);
      __n128 result = *v7;
      int v12 = *(_DWORD *)(a6 - 4);
      *BOOL v7 = *v9;
      *(_DWORD *)(a2 - 4) = v12;
      *int v9 = result;
      *(_DWORD *)(a6 - 4) = v10;
    }
  }
  return result;
}

uint64_t sub_1000B3D7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v6 = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * ((a2 - a4) >> 2))
  {
    case 0uLL:
    case 1uLL:
      return v6 & 1;
    case 2uLL:
      if (*(_DWORD *)(a4 + 16) < *(_DWORD *)(a2 - 4))
      {
        int v7 = *(_DWORD *)(a2 - 4);
        long long v8 = *(_OWORD *)(a2 - 20);
        int v9 = *(_DWORD *)(a4 + 16);
        *(_OWORD *)(a2 - 20) = *(_OWORD *)a4;
        *(_DWORD *)(a2 - 4) = v9;
        *(_OWORD *)a4 = v8;
        *(_DWORD *)(a4 + 16) = v7;
      }
      goto LABEL_22;
    case 3uLL:
      sub_1000B3C74(a1, a2, a2 - 20, a2 - 20, a3, a4 + 20);
      goto LABEL_22;
    case 4uLL:
      sub_1000B4050(a1, a2, a2 - 20, a2 - 20, a2 - 40, a2 - 40, a3, a4 + 20);
      goto LABEL_22;
    case 5uLL:
      int v20 = (long long *)(a2 - 20);
      unsigned int v21 = (long long *)(a2 - 40);
      unint64_t v22 = (long long *)(a2 - 60);
      sub_1000B4050(a1, a2, a2 - 20, a2 - 20, a2 - 40, a2 - 40, a2 - 60, a2 - 60);
      if (*(_DWORD *)(a4 + 16) < *(_DWORD *)(a2 - 64))
      {
        uint64_t v23 = a2 - 80;
        int v24 = *(_DWORD *)(a2 - 64);
        long long v25 = *(_OWORD *)(a2 - 80);
        int v26 = *(_DWORD *)(a4 + 16);
        *(_OWORD *)uint64_t v23 = *(_OWORD *)a4;
        *(_DWORD *)(v23 + 16) = v26;
        *(_OWORD *)a4 = v25;
        *(_DWORD *)(a4 + 16) = v24;
        if (*(_DWORD *)(a2 - 64) < *(_DWORD *)(a2 - 44))
        {
          int v27 = *(_DWORD *)(a2 - 44);
          long long v28 = *v22;
          *unint64_t v22 = *(_OWORD *)v23;
          *(_DWORD *)(a2 - 44) = *(_DWORD *)(a2 - 64);
          *(_OWORD *)uint64_t v23 = v28;
          *(_DWORD *)(a2 - 64) = v27;
          if (*(_DWORD *)(a2 - 44) < *(_DWORD *)(a2 - 24))
          {
            int v29 = *(_DWORD *)(a2 - 24);
            long long v30 = *v21;
            *unsigned int v21 = *v22;
            *(_DWORD *)(a2 - 24) = *(_DWORD *)(a2 - 44);
            *unint64_t v22 = v30;
            *(_DWORD *)(a2 - 44) = v29;
            if (*(_DWORD *)(a2 - 24) < *(_DWORD *)(a2 - 4))
            {
              int v31 = *(_DWORD *)(a2 - 4);
              long long v32 = *v20;
              *int v20 = *v21;
              *(_DWORD *)(a2 - 4) = *(_DWORD *)(a2 - 24);
              *unsigned int v21 = v32;
              *(_DWORD *)(a2 - 24) = v31;
            }
          }
        }
      }
LABEL_22:
      char v6 = 1;
      return v6 & 1;
    default:
      uint64_t v10 = a2 - 40;
      sub_1000B3C74(a1, a2, a2 - 20, a2 - 20, a2 - 40, a2 - 40);
      uint64_t v12 = a2 - 60;
      if (a2 - 60 == a4) {
        goto LABEL_15;
      }
      uint64_t v11 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    int v14 = (long long *)(v12 - 20);
    unsigned int v15 = *(_DWORD *)(v12 - 4);
    if (v15 < *(_DWORD *)(v10 - 4))
    {
      long long v34 = *v14;
      uint64_t v16 = v11;
      while (1)
      {
        uint64_t v17 = a2 + v16;
        *(_OWORD *)(v17 - 80) = *(_OWORD *)(a2 + v16 - 60);
        *(_DWORD *)(v17 - 64) = *(_DWORD *)(a2 + v16 - 44);
        if (v16 == 40) {
          break;
        }
        v16 += 20;
        if (v15 >= *(_DWORD *)(v17 - 24))
        {
          uint64_t v18 = a2 + v16 - 60;
          goto LABEL_13;
        }
      }
      uint64_t v18 = a2;
LABEL_13:
      *(_OWORD *)(v17 - 60) = v34;
      *(_DWORD *)(v18 - 4) = v15;
      if (++v13 == 8) {
        break;
      }
    }
    v11 -= 20;
    uint64_t v10 = v12;
    v12 -= 20;
    if (v14 == (long long *)a4)
    {
LABEL_15:
      char v19 = 1;
      goto LABEL_25;
    }
  }
  char v19 = 0;
  LOBYTE(v11) = v14 == (long long *)a4;
LABEL_25:
  char v6 = v19 | v11;
  return v6 & 1;
}

__n128 sub_1000B4050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  result.n128_u64[0] = sub_1000B3C74(a1, a2, a3, a4, a5, a6).n128_u64[0];
  if (*(_DWORD *)(a8 - 4) < *(_DWORD *)(a6 - 4))
  {
    uint64_t v13 = a6 - 20;
    int v14 = *(_DWORD *)(a6 - 4);
    __n128 result = *(__n128 *)(a6 - 20);
    int v15 = *(_DWORD *)(a8 - 4);
    *(_OWORD *)uint64_t v13 = *(_OWORD *)(a8 - 20);
    *(_DWORD *)(v13 + 16) = v15;
    *(__n128 *)(a8 - 20) = result;
    *(_DWORD *)(a8 - 4) = v14;
    if (*(_DWORD *)(a6 - 4) < *(_DWORD *)(a4 - 4))
    {
      uint64_t v16 = a4 - 20;
      int v17 = *(_DWORD *)(a4 - 4);
      __n128 result = *(__n128 *)(a4 - 20);
      int v18 = *(_DWORD *)(a6 - 4);
      *(_OWORD *)uint64_t v16 = *(_OWORD *)v13;
      *(_DWORD *)(v16 + 16) = v18;
      *(__n128 *)uint64_t v13 = result;
      *(_DWORD *)(a6 - 4) = v17;
      if (*(_DWORD *)(a4 - 4) < *(_DWORD *)(a2 - 4))
      {
        int v19 = *(_DWORD *)(a2 - 4);
        __n128 result = *(__n128 *)(a2 - 20);
        int v20 = *(_DWORD *)(a4 - 4);
        *(_OWORD *)(a2 - 20) = *(_OWORD *)v16;
        *(_DWORD *)(a2 - 4) = v20;
        *(__n128 *)uint64_t v16 = result;
        *(_DWORD *)(a4 - 4) = v19;
      }
    }
  }
  return result;
}

__n128 sub_1000B4128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((a2 - a5) >> 2)))
    {
      int64_t v6 = (0x999999999999999ALL * ((a2 - a5) >> 2)) | 1;
      uint64_t v7 = a2 - 20 * v6;
      if ((uint64_t)(0x999999999999999ALL * ((a2 - a5) >> 2) + 2) < a3)
      {
        unsigned int v8 = *(_DWORD *)(v7 - 4);
        unsigned int v9 = *(_DWORD *)(v7 - 24);
        BOOL v10 = v8 >= v9;
        uint64_t v11 = v8 >= v9 ? 0 : -1;
        v7 += 20 * v11;
        if (!v10) {
          int64_t v6 = 0x999999999999999ALL * ((a2 - a5) >> 2) + 2;
        }
      }
      unsigned int v12 = *(_DWORD *)(a5 - 4);
      if (*(_DWORD *)(v7 - 4) >= v12)
      {
        __n128 v22 = *(__n128 *)(a5 - 20);
        do
        {
          uint64_t v13 = a5;
          a5 = v7;
          long long v14 = *(_OWORD *)(v7 - 20);
          *(_DWORD *)(v13 - 4) = *(_DWORD *)(v7 - 4);
          *(_OWORD *)(v13 - 20) = v14;
          if (v5 < v6) {
            break;
          }
          uint64_t v15 = (2 * v6) | 1;
          uint64_t v7 = a2 - 20 * v15;
          uint64_t v16 = 2 * v6 + 2;
          if (v16 < a3)
          {
            unsigned int v17 = *(_DWORD *)(v7 - 4);
            unsigned int v18 = *(_DWORD *)(v7 - 24);
            BOOL v19 = v17 >= v18;
            if (v17 >= v18) {
              uint64_t v20 = 0;
            }
            else {
              uint64_t v20 = -1;
            }
            v7 += 20 * v20;
            if (!v19) {
              uint64_t v15 = v16;
            }
          }
          int64_t v6 = v15;
        }
        while (*(_DWORD *)(v7 - 4) >= v12);
        __n128 result = v22;
        *(__n128 *)(a5 - 20) = v22;
        *(_DWORD *)(a5 - 4) = v12;
      }
    }
  }
  return result;
}

char *sub_1000B4230(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1000B42E0();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1000B42E0()
{
}

void sub_1000B441C()
{
}

uint64_t sub_1000B4430()
{
  return sub_1000899D4();
}

uint64_t *sub_1000B4438(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  __n128 result = sub_1000899DC(a2, a1 + 12);
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void sub_1000B4494()
{
}

char *sub_1000B4500(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1000B45B0();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1000B45B0()
{
}

void sub_1000B46EC()
{
}

uint64_t sub_1000B4700()
{
  return sub_1000899D4();
}

uint64_t *sub_1000B4708(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  __n128 result = sub_1000899DC(a2, a1 + 12);
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void sub_1000B4764()
{
}

char *sub_1000B47D0(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1000B4880();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1000B4880()
{
}

void sub_1000B49BC()
{
}

uint64_t sub_1000B49D0()
{
  return sub_1000899D4();
}

uint64_t *sub_1000B49D8(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  __n128 result = sub_1000899DC(a2, a1 + 12);
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void sub_1000B4A34()
{
}

char *sub_1000B4AA0(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1000B4B50();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1000B4B50()
{
}

void sub_1000B4C8C()
{
}

uint64_t sub_1000B4CA0()
{
  return sub_1000899D4();
}

uint64_t *sub_1000B4CA8(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  __n128 result = sub_1000899DC(a2, a1 + 12);
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void sub_1000B4D04()
{
}

void sub_1000B4D70(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1000B4DD4(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1000B4DC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1000B4DD4(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_1000B4ECC(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1000B4E88((uint64_t)a2);
  }
}

void sub_1000B4E6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000B4E88(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x556Bu);
  return a1;
}

void sub_1000B4EB8(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_1000B4ECC(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x556Bu);
  return a1;
}

void sub_1000B4EFC(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_1000B5014(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

uint64_t sub_1000B5030(uint64_t a1)
{
  +[WCM_Logging logLevel:2 message:@"Initialize WCM_AriCoexCommandDriver... "];
  qword_10027D140 = (uint64_t)objc_alloc_init(*(Class *)(a1 + 32));

  return _objc_release_x1();
}

void sub_1000B51F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000B5284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000B5338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000BC590(uint64_t a1, char *a2)
{
  if (!strncasecmp(a2, "kWCMCellularNetworkConfiguration_TTDUL_DL", 0x2AuLL))
  {
    +[WCM_Logging logLevel:4, @"SUB%ld: %s key found", *(void *)(a1 + 32), "kWCMCellularNetworkConfiguration_TTDUL_DL" message];
    *(unsigned char *)(*(void *)(a1 + 40) + 104) = 1;
  }
  return 1;
}

const char *sub_1000C24C0(unsigned int a1)
{
  if (a1 <= 5)
  {
    uint64_t v1 = &(&off_100210F40)[a1];
    return *v1;
  }
  if (((1 << a1) & 0x3FFF0000) != 0)
  {
    uint64_t v1 = &(&off_100210F70)[a1 - 16];
    return *v1;
  }
  return "LogUnknown";
}

void sub_1000C28C4(id a1, int a2)
{
  +[WCM_Logging reloadLogSettingsFromPreferences];

  +[WCM_Logging reloadiRATSettingsFromPreferences];
}

void sub_1000C30FC(uint64_t a1)
{
  [*(id *)(a1 + 32) logToFile:*(void *)(a1 + 40)];
  uint64_t v2 = *(void **)(a1 + 40);
}

id sub_1000C6468(id result)
{
  if (!qword_10027D248)
  {
    id v1 = result;
    +[WCM_Logging logLevel:24 message:@"Inside WRM_HandoverManagerSingleton with commCenter recovery"];
    v2.receiver = (id)*((void *)v1 + 4);
    v2.super_class = (Class)&OBJC_METACLASS___WRM_HandoverManager;
    __n128 result = [objc_msgSendSuper2(&v2, "allocWithZone:", 0) init];
    qword_10027D248 = (uint64_t)result;
  }
  return result;
}

void sub_1000C656C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000C65E8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000C667C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000C67AC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id *sub_1000C7200(id *result)
{
  id v1 = result;
  id v2 = result[6];
  switch((unint64_t)v2)
  {
    case 7uLL:
      if (result[4])
      {
        [result[5] addiRatClient:];
        [+[WRM_MetricsService getSingleton](WRM_MetricsService) initAWDService];
        +[WCM_Logging logLevel:24 message:@"Handover Manager:Added iRAT Client (WRMCommCenter) to Handover Manager "];
      }
      else
      {
        +[WCM_Logging logLevel:24 message:@"Handover Manager:remove iRAT Client (WRMCommCenter) from Handover Manager "];
        [v1[5] deleteiRATClient:1];
        if (([v1[5] doesIRATClientSubscriptionContextExist] & 1) == 0
          && [*((id *)v1[5] + 8) mobilityStateAwarenessEnabled])
        {
          [*((id *)v1[5] + 9) stopAllAlarms];
        }
      }
      [v1[5] registerForCTNotifications];
      [v1[5] registerForSCNotifications];
      goto LABEL_48;
    case 8uLL:
      if (result[4])
      {
        [result[5] addiRatClient:];
        CFStringRef v3 = @"Handover Manager:Added iRAT Client (WRMNetworkd) to Handover Manager ";
        goto LABEL_29;
      }
      +[WCM_Logging logLevel:24 message:@"Handover Manager:remove iRAT Client (WRMNetworkd) from Handover Manager "];
      id v9 = v1[5];
      uint64_t v10 = 3;
      goto LABEL_47;
    case 9uLL:
      +[WCM_Logging logLevel:24, @"Handover Manager: Receivd WiFiCalling controller event controller %p", result[4] message];
      uint64_t v4 = (void *)*((void *)v1[5] + 6);
      if (v4)
      {

        *((void *)v1[5] + 6) = 0;
      }
      id v5 = v1[4];
      if (v5) {
        *((void *)v1[5] + 6) = v5;
      }
      goto LABEL_48;
    case 0xAuLL:
      +[WCM_Logging logLevel:24, @"Handover Manager: Receivd WRMIPTelephony controller event controller %p", result[4] message];
      int64_t v6 = (void *)*((void *)v1[5] + 14);
      if (v6)
      {

        *((void *)v1[5] + 14) = 0;
      }
      id v7 = v1[4];
      if (v7) {
        *((void *)v1[5] + 14) = v7;
      }
      goto LABEL_48;
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
      return result;
    case 0xFuLL:
      if (result[4])
      {
        [result[5] addiRatClient:];
        CFStringRef v3 = @"Handover Manager:Added iRAT Client (WRMCallKitTelephony) to Handover Manager ";
        goto LABEL_29;
      }
      +[WCM_Logging logLevel:24 message:@"Handover Manager:remove iRAT Client (WRMCallKitTelephony) from Handover Manager "];
      id v9 = v1[5];
      uint64_t v10 = 8;
      goto LABEL_47;
    case 0x10uLL:
      if (result[4])
      {
        [result[5] addiRatClient:];
        CFStringRef v3 = @"Handover Manager:Added iRAT Client (WRMLocationd) to Handover Manager ";
        goto LABEL_29;
      }
      +[WCM_Logging logLevel:24 message:@"Handover Manager:remove iRAT Client (WRMLocationd) from Handover Manager "];
      id v9 = v1[5];
      uint64_t v10 = 9;
      goto LABEL_47;
    case 0x11uLL:
      if (result[4])
      {
        [result[5] addiRatClient:];
        CFStringRef v3 = @"Handover Manager:Added iRAT Client (WRMCarousel) to Handover Manager ";
        goto LABEL_29;
      }
      +[WCM_Logging logLevel:24 message:@"Handover Manager:remove iRAT Client (WRMCarousel) from Handover Manager "];
      id v9 = v1[5];
      uint64_t v10 = 10;
      goto LABEL_47;
    case 0x15uLL:
      if (result[4])
      {
        [result[5] addiRatClient:];
        CFStringRef v3 = @"Handover Manager:Added iRAT Client (WRMCommCenter1) to Handover Manager ";
        goto LABEL_29;
      }
      +[WCM_Logging logLevel:24 message:@"Handover Manager:remove iRAT Client (WRMCommCenter1) from Handover Manager "];
      id v9 = v1[5];
      uint64_t v10 = 2;
      goto LABEL_47;
    case 0x1AuLL:
      if (result[4])
      {
        [result[5] addiRatClient:];
        CFStringRef v3 = @"Handover Manager:Added iRAT Client (WRMWirelessStress) to Handover Manager ";
        goto LABEL_29;
      }
      +[WCM_Logging logLevel:24 message:@"Handover Manager:remove iRAT Client (WRMWirelessStress) from Handover Manager "];
      id v9 = v1[5];
      uint64_t v10 = 18;
      goto LABEL_47;
    default:
      if (v2 == (id)1)
      {
        +[WCM_Logging logLevel:24, @"Handover Manager: Receivd WiFi controller event controller %p", result[4] message];
        unsigned int v8 = (void *)*((void *)v1[5] + 5);
        if (v8)
        {

          *((void *)v1[5] + 5) = 0;
        }
        if (v1[4])
        {
          if ([*((id *)v1[5] + 8) symtompsMetricsEnabled]) {
            [v1[5] createSymptomsService];
          }
          *((void *)v1[5] + 5) = v1[4];
          byte_10027CF2C = 0;
        }
        else
        {
          byte_10027CF2C = 1;
        }
      }
      else
      {
        if (v2 != (id)32) {
          return result;
        }
        if (result[4])
        {
          [result[5] addiRatClient:];
          CFStringRef v3 = @"Handover Manager:Added iRAT Client (WRMJTRN) to Handover Manager ";
LABEL_29:
          +[WCM_Logging logLevel:24 message:v3];
        }
        else
        {
          +[WCM_Logging logLevel:24 message:@"Handover Manager:remove iRAT Client (WRMJTRN) from Handover Manager "];
          id v9 = v1[5];
          uint64_t v10 = 20;
LABEL_47:
          [v9 deleteiRATClient:v10];
        }
      }
LABEL_48:
      id v11 = v1[5];
      id v12 = v1[6];
      return (id *)[v11 handleControllerAvailability:v12];
  }
}

id sub_1000C76AC(uint64_t a1)
{
  return [*(id *)(a1 + 32) triggerHarvestDataEval];
}

id sub_1000C7DDC(uint64_t a1)
{
  unsigned __int8 v2 = [*(id *)(*(void *)(a1 + 32) + 16) isWiFiCallingSupportedSlot1];
  id result = [*(id *)(*(void *)(a1 + 32) + 16) isWiFiCallingSupportedSlot2];
  if ((v2 & 1) != 0 || result)
  {
    +[WCM_Logging logLevel:26, @"triggerEnableSA %d, wifi Call state: %d", *(unsigned __int8 *)(a1 + 40), byte_10027CF25 message];
    uint64_t v4 = *(void **)(a1 + 32);
    BOOL v5 = (!*(unsigned char *)(a1 + 40) || byte_10027CF25) && byte_10027CD00 != 0;
    return [v4 notifyBBUsingMappedSlotInfo:v5];
  }
  return result;
}

id sub_1000C7EA0(uint64_t a1)
{
  unsigned int v1 = [*(id *)(*(void *)(a1 + 32) + 40) isAssociated];
  return +[WCM_Logging logLevel:24, @"Evaluate link: WiFi link not associated. Associated:%d mLinkDown:%d", v1, byte_10027CF2C message];
}

id sub_1000C7F7C(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 160) count];
  if (!v2)
  {
    CFStringRef v5 = @"switchPrivateNwDataSim: No iRAT client available.";
    goto LABEL_17;
  }
  +[WCM_Logging logLevel:24, @"switchPrivateNwDataSim: Total number of iRAT clients %zu.", v2 message];
  [*(id *)(*(void *)(a1 + 32) + 184) timeIntervalSinceNow];
  uint64_t v4 = *(void *)&v3;
  if (qword_10027CF18 == *(void *)(a1 + 40)
    && dword_10027CD08 == *(_DWORD *)(a1 + 48)
    && dword_10027CF20 == *(_DWORD *)(a1 + 52)
    && *(double *)&qword_10027D250 - v3 < 30.0)
  {
    CFStringRef v5 = @"switchPrivateNwDataSim: Min. time interval not reached. Suppress the same recommendation";
LABEL_17:
    return +[WCM_Logging logLevel:24 message:v5];
  }
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  int64_t v6 = *(void **)(*(void *)(a1 + 32) + 160);
  id result = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (result)
  {
    id v8 = result;
    uint64_t v9 = *(void *)v14;
    while (2)
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v14 != v9) {
          objc_enumerationMutation(v6);
        }
        id v11 = *(void **)(*((void *)&v13 + 1) + 8 * (void)v10);
        if ([v11 getMyClientType] == 1)
        {
          id result = [v11 sendPrivateNwVsMacroRecommendation:*(void *)(a1 + 40) currentSlotQuality:*(unsigned int *)(a1 + 48) anyCallState:*(unsigned int *)(a1 + 52)];
          qword_10027D250 = v4;
          qword_10027CF18 = *(void *)(a1 + 40);
          int v12 = *(_DWORD *)(a1 + 52);
          dword_10027CD08 = *(_DWORD *)(a1 + 48);
          dword_10027CF20 = v12;
          if (qword_10027CF18)
          {
            [*(id *)(a1 + 32) submitMetricsCBRSWithDataSimRecommendation:1 forSimSlot:];
            return [+[WRM_EnhancedCTService wrm_EnhancedCTServiceSingleton](WRM_EnhancedCTService, "wrm_EnhancedCTServiceSingleton") resetCbrsCAMetricSentOnSimSlot:*(void *)(a1 + 40)];
          }
          return result;
        }
        uint64_t v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      id result = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
      id v8 = result;
      if (result) {
        continue;
      }
      break;
    }
  }
  return result;
}

void *sub_1000C826C(void *result)
{
  if (result[5])
  {
    unsigned int v1 = result;
    id v2 = +[WRM_EnhancedCTService wrm_EnhancedCTServiceSingleton];
    id v3 = [v2 getCellularDataLQM:v1[5]];
    id v4 = [v2 getDataStallState:v1[5]];
    id v5 = [*(id *)(v1[4] + 120) getAWDService];
    if (*((unsigned char *)v1 + 48)) {
      uint64_t v6 = v1[5];
    }
    else {
      uint64_t v6 = 0;
    }
    return [v5 submitMetricsCBRSForSim:v6 dataLQM:v3 congested:v4];
  }
  return result;
}

void sub_1000C86A8()
{
  if (qword_10027CF08)
  {
    CFRunLoopRef Main = CFRunLoopGetMain();
    CFRunLoopRemoveSource(Main, (CFRunLoopSourceRef)qword_10027CF08, kCFRunLoopDefaultMode);
  }
  if (qword_10027CF00)
  {
    CFRelease((CFTypeRef)qword_10027CF00);
    qword_10027CF00 = 0;
  }
  if (qword_10027CF08)
  {
    CFRelease((CFTypeRef)qword_10027CF08);
    qword_10027CF08 = 0;
  }
}

id sub_1000C8A98(uint64_t a1)
{
  return [*(id *)(a1 + 32) toggleSAState:0];
}

id sub_1000C8AA4(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isRecentDevice];
  if (result)
  {
    id v3 = *(void **)(a1 + 32);
    return [v3 evaluateWiFiVersusCell];
  }
  return result;
}

id sub_1000C95D0(uint64_t a1)
{
  +[WCM_Logging logLevel:24 message:@"SIP stalled debouncing timer expired:resetIMSMetrics"];
  id v2 = *(void **)(*(void *)(a1 + 32) + 56);

  return [v2 resetIMSMetrics];
}

id sub_1000C97E4(uint64_t a1)
{
  +[WCM_Logging logLevel:24 message:@"SIP debouncing timer expired:resetIMSMetrics"];
  id v2 = *(void **)(*(void *)(a1 + 32) + 56);

  return [v2 resetIMSMetrics];
}

id sub_1000C9A04(uint64_t a1)
{
  +[WCM_Logging logLevel:24 message:@"DPD debouncing timer expired:resetIMSMetrics"];
  id v2 = *(void **)(*(void *)(a1 + 32) + 56);

  return [v2 resetIMSMetrics];
}

id sub_1000C9FC0(uint64_t a1)
{
  qword_10027CEE0 = *(void *)(a1 + 40);
  uint64_t v2 = 1;
  do
  {
    id v3 = [*(id *)(a1 + 32) getiRATClientFromList:v2];
    if (v3)
    {
      id result = +[WCM_Logging logLevel:24, @"setiRATPolicy client %u found, UI iRATPolicy=%lu, mIRATPolicyCT=%u, mIRATPolicyCT1=%u", v2, *(void *)(a1 + 40), dword_10027CEE8, dword_10027CEEC message];
      uint64_t v5 = *(void *)(a1 + 40);
      if ((unint64_t)(v5 - 1) <= 2)
      {
        unint64_t v6 = (unint64_t)[*(id *)(a1 + 32) convertToHOAlgorithmType:];
LABEL_5:
        id result = [v3 setHandoverAlgorithmType:v6];
        goto LABEL_8;
      }
      if (!v5)
      {
        if (v2 == 1) {
          unint64_t v6 = dword_10027CEE8;
        }
        else {
          unint64_t v6 = dword_10027CEEC;
        }
        goto LABEL_5;
      }
    }
    else
    {
      id result = +[WCM_Logging logLevel:24, @"setiRATPolicy client %u not found", v2 message];
    }
LABEL_8:
    uint64_t v2 = (v2 + 1);
  }
  while (v2 != 3);
  return result;
}

id sub_1000CA238(uint64_t a1)
{
  id result = (id)MGGetBoolAnswer();
  if (result)
  {
    id v3 = +[WRM_HandoverManager WRM_HandoverManagerSingleton];
    return [v3 setHOAlertUI:a1];
  }
  return result;
}

id sub_1000CA294(uint64_t a1)
{
  id result = (id)MGGetBoolAnswer();
  if (result)
  {
    id v3 = +[WRM_HandoverManager WRM_HandoverManagerSingleton];
    return [v3 setiRATPolicy:a1];
  }
  return result;
}

id sub_1000CAD70(uint64_t a1)
{
  unsigned int v1 = *(id **)(a1 + 32);
  id v2 = [v1[3] isWiFiPrimary];

  return [v1 toggleSAState:v2];
}

uint64_t sub_1000CB9C8()
{
  uint64_t v3 = 0;
  id v4 = &v3;
  uint64_t v5 = 0x3052000000;
  unint64_t v6 = sub_1000CC388;
  id v7 = sub_1000CC398;
  uint64_t v0 = qword_10027D258;
  uint64_t v8 = qword_10027D258;
  if (!qword_10027D258)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_1000CC3A4;
    v2[3] = &unk_10020DAF8;
    v2[4] = &v3;
    sub_1000CC3A4((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1000CBAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CBE18()
{
  uint64_t v3 = 0;
  id v4 = &v3;
  uint64_t v5 = 0x3052000000;
  unint64_t v6 = sub_1000CC388;
  id v7 = sub_1000CC398;
  uint64_t v0 = qword_10027D268;
  uint64_t v8 = qword_10027D268;
  if (!qword_10027D268)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_1000CC564;
    v2[3] = &unk_10020DAF8;
    v2[4] = &v3;
    sub_1000CC564((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1000CBEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000CC080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000CC368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000CC388(uint64_t a1, uint64_t a2)
{
}

void sub_1000CC398(uint64_t a1)
{
}

Class sub_1000CC3A4(uint64_t a1)
{
  sub_1000CC3FC();
  Class result = objc_getClass("MLFeatureValue");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    sub_10013AD78();
  }
  qword_10027D258 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

void sub_1000CC3FC()
{
  v0[0] = 0;
  if (!qword_10027D260)
  {
    v0[1] = _NSConcreteStackBlock;
    v0[2] = (void *)3221225472;
    v0[3] = sub_1000CC4F0;
    v0[4] = &unk_10020DB30;
    v0[5] = v0;
    long long v1 = off_100211400;
    uint64_t v2 = 0;
    qword_10027D260 = _sl_dlopen();
  }
  if (!qword_10027D260) {
    sub_10013ADE0(v0);
  }
  if (v0[0]) {
    free(v0[0]);
  }
}

uint64_t sub_1000CC4F0()
{
  uint64_t result = _sl_dlopen();
  qword_10027D260 = result;
  return result;
}

Class sub_1000CC564(uint64_t a1)
{
  sub_1000CC3FC();
  Class result = objc_getClass("MLModel");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    sub_10013AE48();
  }
  qword_10027D268 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

Class sub_1000CC5BC(uint64_t a1)
{
  sub_1000CC3FC();
  Class result = objc_getClass("MLPredictionOptions");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    sub_10013AEB0();
  }
  qword_10027D270 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

Class sub_1000CC614(uint64_t a1)
{
  sub_1000CC3FC();
  Class result = objc_getClass("MLArrayBatchProvider");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    sub_10013AF18();
  }
  qword_10027D278 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

void sub_1000CC66C()
{
  +[WCM_Logging logLevel:1 message:@"Received locationd bandstatus notifcation callback"];

  sub_1000D5318();
}

id sub_1000CD1F8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) wifiController];
  if ([*(id *)(a1 + 32) audioBuiltInReceiver]) {
    unsigned int v3 = [v2 headTxPowerCapdBm];
  }
  else {
    unsigned int v3 = [v2 bodyTxPowerCapdBm];
  }
  uint64_t v4 = v3;
  id v5 = [*(id *)(a1 + 32) cellularController];
  uint64_t v6 = [v2 channelCenterFreqMHz];
  uint64_t v7 = [v2 channelBandwidthMHz];

  return [v5 updateWiFiStatusCenterFreq:v6 bandwidth:v7 txPower:v4];
}

id sub_1000CD458(uint64_t a1)
{
  [objc_msgSend(*(id *)(a1 + 32), "cellularController") updateWCI2CoexPolicy:[objc_msgSend(*(id *)(a1 + 32), "cellularWCI2CoexPolicyBitmap")]];
  [*(id *)(a1 + 32) configureWifiAntennaSelectionForCoex];
  [*(id *)(a1 + 32) updateCellTxPowerLimit];
  unsigned int v2 = [[objc_msgSend(*(id *)(a1 + 32), "activeCoexFeatures") containsObject:@"BTDiversityAFHMap"];
  unsigned int v3 = [*(id *)(a1 + 32) gpsRadioActive];
  uint64_t v4 = *(void **)(a1 + 32);
  if (v2)
  {
    id v5 = [v4 btController];
    uint64_t v6 = *(void **)(a1 + 32);
    if (v3)
    {
      id v7 = [v6 btDiversityChannelMapOnGpsRadioActiveForC0B0];
      id v8 = [*(id *)(a1 + 32) btDiversityChannelMapOnGpsRadioActiveForC0B1];
      id v9 = [*(id *)(a1 + 32) btDiversityChannelMapOnGpsRadioActiveForC1B0];
      id v10 = [*(id *)(a1 + 32) btDiversityChannelMapOnGpsRadioActiveForC1B1];
    }
    else
    {
      id v7 = [v6 btDiversityChannelMapForC0B0];
      id v8 = [*(id *)(a1 + 32) btDiversityChannelMapForC0B1];
      id v9 = [*(id *)(a1 + 32) btDiversityChannelMapForC1B0];
      id v10 = [*(id *)(a1 + 32) btDiversityChannelMapForC1B1];
    }
    return [v5 updateDiversityAFHMapForC0B0:v7 C0B1:v8 C1B0:v9 C1B1:v10];
  }
  else
  {
    if (v3) {
      id v11 = [v4 btPreferredChannelMapOnGpsRadioActive];
    }
    else {
      id v11 = [v4 btPreferredChannelMap];
    }
    id v13 = v11;
    if (objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "activeCoexFeatures"), "containsObject:", @"hpcellularstatemonitorsupport"))
    {
      +[WCM_Logging logLevel:message:](WCM_Logging, @"HPCellular (updateGPSRadioActiveState): Bool flag self.hpCellNeed2SetBTAFH = (%d), Fixed AFH self.btPreferredChannelMapHPCellularActive = (%@).", [*(id *)(a1 + 32) hpCellNeed2SetBTAFH], objc_msgSend(*(id *)(a1 + 32), "btPreferredChannelMapHPCellularActive"));
      if ([*(id *)(a1 + 32) hpCellNeed2SetBTAFH]) {
        id v13 = [*(id *)(a1 + 32) btPreferredChannelMapHPCellularActive];
      }
    }
    id v14 = [*(id *)(a1 + 32) btController];
    return [v14 updatePreferredAFHMap:v13];
  }
}

void sub_1000CD99C(uint64_t a1)
{
  +[WCM_Logging logLevel:2 message:@"SAC Coex Manager received GNSS frequency update"];
  [*(id *)(*(void *)(a1 + 32) + 184) sacRemoveAllGnssFreq];
  if ([*(id *)(a1 + 40) count])
  {
    id v2 = objc_alloc_init((Class)NSMutableArray);
    id v3 = objc_alloc_init((Class)NSMutableArray);
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    uint64_t v4 = *(void **)(a1 + 40);
    id v5 = [v4 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v15;
      do
      {
        for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v15 != v7) {
            objc_enumerationMutation(v4);
          }
          id v9 = *(void **)(*((void *)&v14 + 1) + 8 * i);
          long long v12 = 0u;
          long long v13 = 0u;
          [v9 getValue:&v12];
          id v10 = [[FreqRangeInfo alloc] initWithFreq:(unint64_t)(*((double *)&v12 + 1) * 1000000.0) Bw:(unint64_t)(*(double *)&v13 * 1000000.0)];
          if (v12 == 2) {
            id v11 = v3;
          }
          else {
            id v11 = v2;
          }
          [v11 addObject:v10];
        }
        id v6 = [v4 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }
      while (v6);
    }
    +[WCM_Logging logLevel:2 message:@"SAC Coex Manager add new GNSS frequency to SAC"];
    [*(id *)(*(void *)(a1 + 32) + 184) sacUpdateGnssFreqInfo:v2 L5Freq:v3];
    [*(id *)(*(void *)(a1 + 32) + 184) sacReportGnssVictimFreqListOnTargetSac:1 action:1];
    if ([WCM_PolicyManager singleton].activeCoexFeatures.containsObject(@"SacPolicyJasperSupport"))[*(id *)(*(void *)(a1 + 32) + 184) sacReportGnssVictimFreqListOnTargetSac:2 action:1]; {
  }
    }
}

void sub_1000CE30C(uint64_t a1)
{
  if (objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "activeCoexFeatures"), "containsObject:", @"CellularNeedWiFiStatus")&& objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "activeCoexFeatures"), "containsObject:", @"WiFiOffFreqUpdate")&& !objc_msgSend(*(id *)(a1 + 32), "wifiController")&& *(void *)(a1 + 40) == 1)
  {
    +[WCM_Logging logLevel:3 message:@"DLDebug_ wifiController is NULL. Need to pass Freq of 0"];
    [objc_msgSend(*(id *)(a1 + 32), "cellularController") updateWiFiStatusCenterFreq:0 bandwidth:0 txPower:0];
  }
  id v2 = *(_DWORD **)(a1 + 32);
  if (v2[15]
    && objc_msgSend(objc_msgSend(v2, "activeCoexFeatures"), "containsObject:", @"CTSacDriverNeedWiFiFreq")&& !objc_msgSend(*(id *)(a1 + 32), "wifiController")&& *(void *)(a1 + 40) == 1)
  {
    [*(id *)(a1 + 32) updateCTSacDriverRemoveAllFromWifiClient];
  }
  if (objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "activeCoexFeatures"), "containsObject:", @"CoexBBUnifiedSensorInfoSupport")&& *(void *)(a1 + 40) == 1)
  {
    [objc_msgSend(*(id *)(a1 + 32), "cellularController") sendBBCoexSensorMessage:1 band:0 usecase:0];
  }
  id v3 = *(void **)(a1 + 32);
  if (v3[23]
    && objc_msgSend(objc_msgSend(v3, "activeCoexFeatures"), "containsObject:", @"SacPolicySupport")
    && ![*(id *)(a1 + 32) wifiController]
    && *(void *)(a1 + 40) == 1)
  {
    uint64_t v4 = [*(id *)(*(void *)(a1 + 32) + 184) getQueue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000CE4C0;
    block[3] = &unk_10020D980;
    void block[4] = *(void *)(a1 + 32);
    dispatch_async(v4, block);
  }
}

id sub_1000CE4C0(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 184) isTestMode];
  if ((result & 1) == 0)
  {
    id v3 = *(void **)(*(void *)(a1 + 32) + 184);
    return [v3 sacRemoveAllWifiFreq];
  }
  return result;
}

int64_t sub_1000CECDC(id a1, id a2, id a3)
{
  int v4 = [a2 intValue];
  if (v4 > (int)[a3 intValue]) {
    return 1;
  }
  else {
    return -1;
  }
}

id sub_1000D430C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) dataLqmState];
  id v3 = [*(id *)(a1 + 32) cellularController];
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, @"BB20: updateLqmState:1 dataLQMLqmState = %d, rrc_state %d, slot %ld cell_active slot %llu self.lqm %d", *(unsigned int *)(a1 + 48), *(unsigned __int8 *)(a1 + 52), *(void *)(a1 + 40), [v3 getActiveSlot], (int)v2);
  uint64_t v4 = *(void *)(a1 + 40) - 1;
  id result = [v3 getActiveSlot];
  if ((id)v4 == result && *(_DWORD *)(a1 + 48) != v2)
  {
    +[WCM_Logging logLevel:3, @"BB20: updateLqmState:1 updating lqm with %d %d", *(unsigned int *)(a1 + 48), v2 message];
    [*(id *)(a1 + 32) setDataLqmState:*(char *)(a1 + 48)];
    [*(id *)(a1 + 32) setCTRrcState:*(unsigned __int8 *)(a1 + 52)];
    id v6 = +[WCM_PolicyManager singleton];
    return [v6 updateControllerState:105];
  }
  return result;
}

void sub_1000D4668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id obj)
{
}

NSDictionary *sub_1000D468C(uint64_t a1)
{
  v3[0] = @"IssueBand";
  v4[0] = [*(id *)(a1 + 32) objectForKeyedSubscript:];
  v3[1] = @"IssueType";
  v4[1] = [*(id *)(a1 + 32) objectForKeyedSubscript:];
  v3[2] = @"IsCoexBand";
  void v4[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:") intValue] != 0);
  v3[3] = @"HasAntConstraint";
  void v4[3] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:") intValue] != 0);
  void v3[4] = @"IssueCount";
  v4[4] = [NSNumber numberWithInt:[objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", @"count") intValue]];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:5];
}

id sub_1000D4854(uint64_t a1)
{
  +[NSDate timeIntervalSinceReferenceDate];
  double v3 = v2;
  id v4 = [[+[WCM_CoreAnalyticsService singleton](WCM_CoreAnalyticsService, "singleton") mBTConnectedDevicesHandler];
  uint64_t v5 = *(unsigned int *)(a1 + 32);
  uint64_t v6 = *(unsigned int *)(a1 + 36);

  return [v4 updateBTCoexWiFiState:v5 wifiChannel:v6 at:v3];
}

id sub_1000D49E8(void *a1)
{
  +[NSDate timeIntervalSinceReferenceDate];
  return [WCM_CoreAnalyticsService singleton].mBTConnectedDevicesHandler.updateBTCoexConnectedDevices:&v4 at:v2];
}

id sub_1000D4B38(uint64_t a1)
{
  uint64_t v2 = (uint64_t)[[(id *)(a1 + 32) wifiController] getWiFiBTActiveProfileFor2G];
  unsigned __int8 v3 = [objc_msgSend(*(id *)(a1 + 32), "btController") powerState];
  +[NSDate timeIntervalSinceReferenceDate];
  double v5 = v4;
  if (v2 == 4)
  {
    int v6 = *(_DWORD *)(*(void *)(a1 + 32) + 52);
    if (v6) {
      uint64_t v2 = (v6 + 10);
    }
    else {
      uint64_t v2 = 4;
    }
  }
  id v7 = [[+[WCM_CoreAnalyticsService singleton](WCM_CoreAnalyticsService, "singleton") mBTConnectedDevicesHandler];
  LOBYTE(v10) = v3;
  LOWORD(v9) = *(_WORD *)(a1 + 64);
  return [v7 updateBTCoexStats_tddCnt:*(unsigned int *)(a1 + 40) hybridCnt:*(unsigned int *)(a1 + 44) btDurMs:*(unsigned int *)(a1 + 48) totDurMs:*(unsigned int *)(a1 + 52) parallelCnt:*(unsigned int *)(a1 + 56) btDurAirMs:*(unsigned int *)(a1 + 60) wlrssiCoex:v5 btrssiCoex:v9 activeProfileFor2G:v2 btPowerState:v10 at:v11];
}

void sub_1000D5318()
{
  uint64_t v0 = (void *)CLCopyGnssBandsInUse();
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, @"_getGpsBandInfo - bandInfo count %d", [v0 count]);
  id v1 = v0;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000D53D4;
  block[3] = &unk_10020D980;
  void block[4] = v0;
  dispatch_async([+[WCM_Server singleton](WCM_Server, "singleton") getQueue], block);
  CFRelease(v0);
}

void sub_1000D53D4(uint64_t a1)
{
  [+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton") updateGPSBandsInfo:CLUpdate:*(void *)(a1 + 32), 1];
  uint64_t v2 = *(void **)(a1 + 32);
}

void *sub_1000D5420(void *a1, NSObject **a2, queue a3)
{
  *a1 = 0;
  a1[1] = 0;
  double v5 = *a2;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  v6.fObj.fObj = a3.fObj.fObj;
  ice::Client::create((uint64_t *)&v11, (ice::Client *)&object, v6, (const char *)a3.fObj.fObj);
  long long v7 = v11;
  long long v11 = 0uLL;
  id v8 = (std::__shared_weak_count *)a1[1];
  *(_OWORD *)a1 = v7;
  if (v8)
  {
    sub_1000357EC(v8);
    if (*((void *)&v11 + 1)) {
      sub_1000357EC(*((std::__shared_weak_count **)&v11 + 1));
    }
  }
  if (object) {
    dispatch_release(object);
  }
  return a1;
}

void sub_1000D54A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  long long v12 = *(std::__shared_weak_count **)(v10 + 8);
  if (v12) {
    sub_1000357EC(v12);
  }
  _Unwind_Resume(exception_object);
}

ice::Client *sub_1000D54CC(ice::Client **a1)
{
  id result = *a1;
  if (result) {
    return (ice::Client *)ice::Client::start(result);
  }
  return result;
}

void sub_1000D54DC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3;
  uint64_t v3 = *a1;
  if (v3) {
    sub_1000D550C(v3, a2, &v4);
  }
}

void sub_1000D550C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1000D57B0(*a3, &aBlock);
  uint64_t v3 = aBlock;
  if (aBlock) {
    uint64_t v3 = _Block_copy(aBlock);
  }
  uint64_t v4 = v3;
  ice::Client::regEventHandlerInternal();
  if (v4) {
    _Block_release(v4);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_1000D5588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, void *a10)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a10) {
    _Block_release(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000D55B4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3;
  uint64_t v3 = *a1;
  if (v3) {
    sub_1000D55E4(v3, a2, &v4);
  }
}

void sub_1000D55E4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1000D5858(*a3, &v4);
  aBlocuint64_t k = v4;
  uint64_t v4 = 0;
  ice::Client::regIndicationInternal();
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v4) {
    _Block_release(v4);
  }
}

void sub_1000D5654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, void *a10)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a10) {
    _Block_release(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000D5680(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v3 = *a1;
  if (v3)
  {
    sub_1000D56BC(v3, a2, &v5);
    ice::SendMsgBaseProxy::~SendMsgBaseProxy((ice::SendMsgBaseProxy *)&v4);
  }
}

void sub_1000D56BC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1000D5858(*a3, &v7);
  sub_100052D68(&v5, (void *)(a1 + 8));
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  if (v6) {
    sub_1000357EC(v6);
  }
  aBlocuint64_t k = v7;
  long long v7 = 0;
  ice::SendMsgBaseProxy::callback();
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v7) {
    _Block_release(v7);
  }
}

void sub_1000D5760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, uint64_t a10, uint64_t a11, void *a12)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  ice::SendMsgBaseProxy::~SendMsgBaseProxy(v12);
  if (a12) {
    _Block_release(a12);
  }
  _Unwind_Resume(a1);
}

void *sub_1000D57B0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 0x40000000;
  aBlock[2] = sub_1000D5830;
  aBlock[3] = &unk_1002116A0;
  aBlock[4] = a1;
  id result = _Block_copy(aBlock);
  *a2 = result;
  return result;
}

uint64_t sub_1000D5830(uint64_t a1)
{
  return 0;
}

void *sub_1000D5858@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 0x40000000;
  aBlock[2] = sub_1000D58D8;
  aBlock[3] = &unk_1002116C8;
  aBlock[4] = a1;
  id result = _Block_copy(aBlock);
  *a2 = result;
  return result;
}

uint64_t sub_1000D58D8(uint64_t a1)
{
  return 0;
}

id sub_1000D5D50(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(*(void *)(a1 + 32) + 16);
  if (v2 < 0x2A && ((0x3EEEFFFFFFFuLL >> v2) & 1) != 0)
  {
    uint64_t v3 = (&off_100211838)[v2];
  }
  else if (v2 == 42)
  {
    uint64_t v3 = "WRMSOS";
  }
  else
  {
    uint64_t v3 = "INVALID_PROC_ID!!!";
  }
  +[WCM_Logging logLevel:2, @"Delete session with processId(%s)", v3 message];
  id v4 = +[WCM_Server singleton];
  uint64_t v5 = *(void *)(a1 + 32);

  return [v4 removeSessionFromList:v5];
}

void sub_1000D5E8C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 8))
  {
    unsigned int v3 = *(_DWORD *)(v1 + 16);
    if (v3 < 0x2A && ((0x3EEEFFFFFFFuLL >> v3) & 1) != 0)
    {
      id v4 = (&off_100211838)[v3];
    }
    else if (v3 == 42)
    {
      id v4 = "WRMSOS";
    }
    else
    {
      id v4 = "INVALID_PROC_ID!!!";
    }
    +[WCM_Logging logLevel:19, @"WCM_Session: sending message to %s", v4 message];
    +[WCM_Logging logLevel:22, @"Sending Message :%@", *(void *)(a1 + 40) message];
    uint64_t v5 = *(void **)(a1 + 40);
    queue v6 = *(_xpc_connection_s **)(*(void *)(a1 + 32) + 8);
    xpc_connection_send_message(v6, v5);
  }
}

id sub_1000D7488(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  qword_10027D308 = (uint64_t)v1;

  return [v1 configureCTNotificationCallBacks];
}

void sub_1000D76D8(const __CFData *a1, int a2)
{
  *(_WORD *)buffer = 0;
  *(_WORD *)long long v7 = 0;
  UInt8 v6 = 0;
  v9.location = 0;
  v9.size_t length = 1;
  CFDataGetBytes(a1, v9, &buffer[1]);
  if (a2 == 16 && buffer[1] - 1 <= 1)
  {
    v10.location = 1;
    v10.size_t length = 1;
    CFDataGetBytes(a1, v10, buffer);
    if (buffer[0])
    {
      int v4 = 1;
      v11.location = 2;
      v11.size_t length = 1;
      CFDataGetBytes(a1, v11, &v7[1]);
      if (v7[1] > 9u) {
        goto LABEL_7;
      }
      +[WCM_Logging logLevel:22, @"Discarding invalid data LQM %d", v7[1] message];
    }
    int v4 = 0;
LABEL_7:
    if ((buffer[0] & 2) != 0)
    {
      v12.location = 3;
      v12.size_t length = 1;
      CFDataGetBytes(a1, v12, v7);
      if ((buffer[0] & 4) == 0)
      {
LABEL_9:
        if (!v4) {
          return;
        }
        goto LABEL_10;
      }
    }
    else if ((buffer[0] & 4) == 0)
    {
      goto LABEL_9;
    }
    v13.location = 4;
    v13.size_t length = 1;
    CFDataGetBytes(a1, v13, &v6);
    if (!v4) {
      return;
    }
LABEL_10:
    id v5 = +[WRM_SCService WRM_SCServiceControllerSingleton];
    [v5 setCellularDataLQM:(char)v7[1]];
    +[WCM_Logging logLevel:22, @"Received eLQM notification from BB, Version: %d, LQM: %d, RRC state: %d, Cell interface state: %d, stateChangeBitmask %d", buffer[1], (char)v7[1], v7[0], v6, buffer[0] message];
  }
}

uint64_t sub_1000D782C(const __CFData *a1, UInt8 *a2, UInt8 *a3)
{
  id v6 = [[+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton") getCTService];
  +[WCM_Logging logLevel:22 message:@"WRM_CTService:processVoiceLQMBlob:Voice LQM notification received"];
  if (a1)
  {
    +[WCM_Logging logLevel:22 message:@"WRM_CTService:Calling CFDataGetLength"];
    unsigned __int8 Length = CFDataGetLength(a1);
    +[WCM_Logging logLevel:22, @"WRM_CTService:Calling CFDataGetLength, Blob size: %d", Length message];
    if (!Length) {
      return 0;
    }
    UInt8 buffer = 0;
    +[WCM_Logging logLevel:22, @"WRM_CTService:Voice LQM notification received, Blob size: %d", Length message];
    v36.location = 0;
    v36.size_t length = 1;
    CFDataGetBytes(a1, v36, &buffer);
    if (buffer <= 0xDFu)
    {
      switch(buffer)
      {
        case 1u:
          uint64_t v12 = 1;
          v37.location = 1;
          v37.size_t length = 1;
          CFDataGetBytes(a1, v37, a2);
          v38.location = 2;
          v38.size_t length = 1;
          CFDataGetBytes(a1, v38, a3);
          +[WCM_Logging logLevel:22, @"BLOB Size: %d, Voice LQM BLOB Version: %d, VoiceLQM: %d, ReasonCode: %d", Length, buffer, *a2, *a3 message];
          return v12;
        case 2u:
          v39.location = 1;
          v39.size_t length = 1;
          CFDataGetBytes(a1, v39, a2);
          v40.location = 2;
          v40.size_t length = 1;
          CFDataGetBytes(a1, v40, a3);
          +[WCM_Logging logLevel:22, @"Init BLOB Size: %d, Version: %d, VoiceLQM: %d", Length, buffer, *a2 message];
          BytePtr = CFDataGetBytePtr(a1);
          +[WCM_Logging logLevel:22, @"IMS preference: %d, CodecType: %d, Total Erasures: %u, Total PlayBacks:%u", BytePtr[3], *((unsigned int *)BytePtr + 3), *((unsigned int *)BytePtr + 1), *((unsigned int *)BytePtr + 2) message];
          [v6 setIMSPreference:BytePtr[3] != 0];
          if ([v6 getServingCellType] == 1)
          {
            [v6 setServingCellRSRP:(double)*((int *)BytePtr + 5)];
            [v6 setServingCellSNR:(double)*((int *)BytePtr + 4)];
            +[WCM_Logging logLevel:22, @"RSRP: %f, SINR: %f", *((unsigned int *)BytePtr + 5), *((unsigned int *)BytePtr + 4) message];
          }
          [v6 updateAudioQuality:*(void *)(BytePtr + 4), *((unsigned int *)BytePtr + 3)];
          return 1;
        case 3u:
          +[WCM_Logging logLevel:22, @"Init BLOB Size: %d, Version: %d", Length, 3 message];
          long long v14 = CFDataGetBytePtr(a1);
          long long v15 = v14;
          if (v14[3])
          {
            *a2 = v14[1];
            uint64_t v16 = v14[2];
            *a3 = v16;
            +[WCM_Logging logLevel:22, @"Version: %d, VoiceLQM: %d, ReasonCode: %d", buffer, *a2, v16 message];
          }
          else
          {
            +[WCM_Logging logLevel:22, @"Ignore LQM report is not valid", v27, v29, v30 message];
          }
          unsigned int v23 = [v6 getServingCellType];
          int v24 = *(_DWORD *)(v15 + 11);
          if (v23 == 1)
          {
            [v6 setServingCellRSRP:(double)v24];
            [v6 setServingCellSNR:(double)*(int *)(v15 + 7)];
            CFStringRef v25 = @"RSRP: %llf, SINR: %llf";
          }
          else
          {
            [v6 setServingCellRSCP:(double)(*(_DWORD *)(v15 + 7) + v24)];
            [v6 setServingCellECIO:(double)*(int *)(v15 + 7)];
            CFStringRef v25 = @"RSSI: %llf, SINR: %llf";
          }
          +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, v25, (double)*(int *)(v15 + 11), (double)*(int *)(v15 + 7));
          +[WCM_Logging logLevel:22, @"BB Long Session Status: %d, BB High Power Status: %d, True Limited Service: %d", v15[4], v15[5], v15[6] message];
          [v6 updateBBLongSessionState:v15[4]];
          unsigned int v9 = [v6 isBBHighPowerState];
          [v6 updateBBHighPowerState:v15[5] != 0];
          [v6 updateBBLimitedServiceState:v15[6] != 0];
          int v22 = v15[5];
          goto LABEL_39;
      }
    }
    else if (buffer > 0xEFu)
    {
      if (buffer == 240)
      {
        +[WCM_Logging logLevel:22, @"Init BLOB Size: %d, Version: %d", Length, 240 message];
        unsigned int v21 = CFDataGetBytePtr(a1);
        *a2 = v21[1];
        +[WCM_Logging logLevel:22, @" Version %d, Voice LQM: %d, PDCP TX SDU Count: %d, PDCP TX discard count: %d, RLC RX PDU count: %d, RLC RX missing pdu count: %d, LQE: %d ", *v21, v21[1], *(unsigned int *)(v21 + 2), *(unsigned int *)(v21 + 6), *(unsigned int *)(v21 + 10), *(unsigned int *)(v21 + 14), *(unsigned int *)(v21 + 18) message];
        +[WCM_Logging logLevel:22, @"Meas Serving cell type : %d, SNR: %d, RSSI:%d, RSRP: %f, RSRQ: %f ", *(unsigned int *)(v21 + 22), *((char *)v21 + 26), *(__int16 *)(v21 + 27), *(float *)(v21 + 29), *(float *)(v21 + 33) message];
        +[WCM_Logging logLevel:22, @"Voice LQM BLOB Version: %d, VoiceLQM: %d, ", buffer, *a2 message];
        [v6 setServingCellRSSI:(double)*(__int16 *)(v21 + 27)];
        [v6 setServingCellRSRP:*(float *)(v21 + 29)];
        [v6 setServingCellSNR:(double)*((char *)v21 + 26)];
        [v6 setServingCellRSRQ:*(float *)(v21 + 33)];
        return 1;
      }
      if (buffer == 241)
      {
        +[WCM_Logging logLevel:22, @"Init BLOB Size: %d, Version: %d", Length, 241 message];
        long long v17 = CFDataGetBytePtr(a1);
        *a2 = v17[1];
        +[WCM_Logging logLevel:22, @" Version %d, Voice LQM: %d, PDCP TX SDU Count: %d, PDCP TX discard count: %d, RLC RX PDU count: %d, RLC RX missing pdu count: %d, LQE: %d ", *v17, v17[1], *(unsigned int *)(v17 + 2), *(unsigned int *)(v17 + 6), *(unsigned int *)(v17 + 10), *(unsigned int *)(v17 + 14), *(unsigned int *)(v17 + 18) message];
        +[WCM_Logging logLevel:22, @"Meas Serving cell type : %d, SNR: %d, RSSI:%d, RSRP: %f, RSRQ: %f ", *(unsigned int *)(v17 + 22), *((char *)v17 + 64), *((__int16 *)v17 + 13), *((float *)v17 + 7), *((float *)v17 + 8) message];
        +[WCM_Logging logLevel:22, @"CodecType: %d, Total Erasures: %d, Total PlayBacks:%d, Audio Erasure Speech:%d,Audio Erasure Silence: %d", *((unsigned int *)v17 + 13), *((unsigned int *)v17 + 11), *((unsigned int *)v17 + 12), *((unsigned int *)v17 + 14), *((unsigned int *)v17 + 15) message];
        +[WCM_Logging logLevel:22, @"IMS preference : %d, WCDMA RSCP: %d, WCDMA ECIO:%d", *(unsigned int *)(v17 + 65), *((unsigned int *)v17 + 10), *((unsigned int *)v17 + 9) message];
        +[WCM_Logging logLevel:22, @"Voice LQM BLOB Version: %d, VoiceLQM: %d, ", buffer, *a2 message];
        +[WCM_Logging logLevel:22, @"Voice LQM BLOB Cell load valid: %d, est cell load: %d, ", *(unsigned int *)(v17 + 69), *((char *)v17 + 73) message];
        [v6 setServingCellRSSI:(double)*((__int16 *)v17 + 13)];
        [v6 setServingCellRSRP:*((float *)v17 + 7)];
        [v6 setServingCellSNR:(double)*((char *)v17 + 64)];
        [v6 setServingCellRSRQ:*((float *)v17 + 8)];
        [v6 setIMSPreference:*(_DWORD *)(v17 + 65) != 0];
        [v6 setServingCellRSCP:(double)*((int *)v17 + 10)];
        [v6 setServingCellECIO:(double)*((int *)v17 + 9)];
        long long v33 = *(_OWORD *)(v17 + 44);
        int v34 = *((_DWORD *)v17 + 15);
        [v6 updateAudioQualityKaroo:&v33];
        return 1;
      }
    }
    else
    {
      if (buffer == 224)
      {
        +[WCM_Logging logLevel:22, @"Init BLOB Size: %d, Version: %d", Length, 224 message];
        unsigned int v18 = CFDataGetBytePtr(a1);
        *a2 = v18[1];
        +[WCM_Logging logLevel:22, @"Version %d, Voice LQM: %d, PDCP TX SDU Count: %d, PDCP TX discard count: %d, RLC RX PDU count: %d, RLC RX missing pdu count: %d, LQE: %d ", *v18, v18[1], *(unsigned int *)(v18 + 2), *(unsigned int *)(v18 + 6), *(unsigned int *)(v18 + 10), *(unsigned int *)(v18 + 14), *(unsigned int *)(v18 + 18) message];
        +[WCM_Logging logLevel:22, @"Meas Serving cell type : %d, SNR: %d, RSSI:%d, RSRP: %f, RSRQ: %f ", *(unsigned int *)(v18 + 22), *((char *)v18 + 80), *((__int16 *)v18 + 13), *((float *)v18 + 7), *((float *)v18 + 8) message];
        +[WCM_Logging logLevel:22, @"CodecType: %d, Total Erasures: %d, Total PlayBacks:%d, Audio Erasure Speech:%d,Audio Erasure Silence: %d", *((unsigned int *)v18 + 13), *((unsigned int *)v18 + 11), *((unsigned int *)v18 + 12), *((unsigned int *)v18 + 14), *((unsigned int *)v18 + 15) message];
        +[WCM_Logging logLevel:22, @"IMS preference : %d, WCDMA ECIO: %d, WCDMA RSCP:%d", *((unsigned int *)v18 + 16), *((unsigned int *)v18 + 10), *((unsigned int *)v18 + 9) message];
        +[WCM_Logging logLevel:22, @"Voice LQM BLOB Version: %d, VoiceLQM: %d, ", buffer, *a2 message];
        [v6 setServingCellRSSI:(double)*((__int16 *)v18 + 13)];
        [v6 setServingCellRSRP:*((float *)v18 + 7)];
        [v6 setServingCellSNR:(double)*((char *)v18 + 80)];
        [v6 setServingCellRSRQ:*((float *)v18 + 8)];
        [v6 setIMSPreference:*((_DWORD *)v18 + 16) != 0];
        [v6 setServingCellRSCP:(double)*((int *)v18 + 10)];
        [v6 setServingCellECIO:(double)*((int *)v18 + 9)];
        long long v31 = *(_OWORD *)(v18 + 44);
        int v32 = *((_DWORD *)v18 + 15);
        [v6 updateAudioQualityKaroo:&v31];
        +[WCM_Logging logLevel:22, @"BB Long Session Status: %d, BB High Power Status: %d, True Limited Service: %d,BB in HPLMN: %d", v18[81], *((unsigned int *)v18 + 17), *((unsigned int *)v18 + 18), *((unsigned int *)v18 + 19) message];
        [v6 updateBBLongSessionState:v18[81]];
        unsigned int v9 = [v6 isBBHighPowerState];
        [v6 updateBBHighPowerState:*((_DWORD *)v18 + 17) != 0];
        if (*((_DWORD *)v18 + 18)) {
          BOOL v19 = *((_DWORD *)v18 + 19) == 0;
        }
        else {
          BOOL v19 = 0;
        }
        [v6 updateBBLimitedServiceState:v19];
        int v22 = *((_DWORD *)v18 + 17);
        goto LABEL_39;
      }
      if (buffer == 225)
      {
        +[WCM_Logging logLevel:22, @"Init BLOB Size: %d, Version: %d", Length, 225 message];
        id v8 = CFDataGetBytePtr(a1);
        *a2 = v8[1];
        [v6 setServingCellRSSI:(double)*((__int16 *)v8 + 28)];
        [v6 setServingCellRSRP:(double)*((int *)v8 + 6)];
        [v6 setServingCellSNR:(double)*((char *)v8 + 58)];
        [v6 setServingCellRSRQ:(double)*((int *)v8 + 7)];
        [v6 setIMSPreference:*((_DWORD *)v8 + 10) != 0];
        +[WCM_Logging logLevel:22, @"BB Long Session Status: %d, BB High Power Status: %d, True Limited Service: %d,BB in HPLMN: %d", v8[59], *((unsigned int *)v8 + 11), *((unsigned int *)v8 + 12), *((unsigned int *)v8 + 13) message];
        [v6 updateBBLongSessionState:v8[59]];
        unsigned int v9 = [v6 isBBHighPowerState];
        [v6 updateBBHighPowerState:*((_DWORD *)v8 + 11) != 0];
        if (*((_DWORD *)v8 + 12)) {
          BOOL v10 = *((_DWORD *)v8 + 13) == 0;
        }
        else {
          BOOL v10 = 0;
        }
        [v6 updateBBLimitedServiceState:v10];
        int v22 = *((_DWORD *)v8 + 11);
LABEL_39:
        if (((v9 ^ (v22 != 0)) & 1) == 0) {
          +[WCM_Logging logLevel:22, @"Baseband_hi_power_state did not change, Prev Value: %d, Current Value:%d", v9, v22 != 0 message];
        }
        return 1;
      }
    }
    CFStringRef v11 = @"processVoiceLQMBlob: LQM version is not supported";
  }
  else
  {
    CFStringRef v11 = @"processVoiceLQMBlob: LQM BLOB is empty";
  }
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, v11, v26, v28);
  return 1;
}

void sub_1000D8674(id a1, BOOL a2, int a3)
{
  uint64_t v3 = *(void *)&a3;
  +[WCM_Logging logLevel:22, @"voiceLQMHandler: Rcvd Voice LQM from CT: %d", *(void *)&a3 message];
  id v4 = [[WRM_HandoverManager WRM_HandoverManagerSingleton] getCTService];
  uint64_t v5 = (uint64_t)[v4 getCurrentSignalBars];
  if (v3 == 10 && v5 >= 3)
  {
    +[WCM_Logging logLevel:22, @"voiceLQMHandler: Ignoring Rcvd Voice LQM from CT: %d", 10 message];
  }
  else
  {
    +[WCM_Logging logLevel:22, @"voiceLQMHandler: Rcvd Voice LQM from CT: %d", v3 message];
    [v4 setLteVoiceLQM:v3];
  }
}

id sub_1000D874C(const __CFDictionary *a1, void *a2)
{
  int valuePtr = 0;
  if (a1)
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, kCTIndicatorsGradedSignalStrength);
    if (Value && (CFNumberRef v4 = Value, v5 = CFGetTypeID(Value), v5 == CFNumberGetTypeID()))
    {
      int v6 = CFNumberGetValue(v4, kCFNumberSInt32Type, &valuePtr);
      int v7 = valuePtr;
      if (v6)
      {
        +[WCM_Logging logLevel:22, @"getFilteredSignalStrength: bars=%li", valuePtr, v10 message];
        return [a2 setCurrentSignalBars:valuePtr];
      }
    }
    else
    {
      int v7 = 0;
    }
    +[WCM_Logging logLevel:22, @"getFilteredSignalStrength: Notification error -> bars=%li", v7, v10 message];
    return [a2 setCurrentSignalBars:valuePtr];
  }
  unint64_t SignalStrength = _CTServerConnectionGetSignalStrength();
  if (SignalStrength) {
    +[WCM_Logging logLevel:22, @"_CTServerConnectionGetSignalStrength error %d domain %d", HIDWORD(SignalStrength), SignalStrength message];
  }
  else {
    +[WCM_Logging logLevel:22, @"_CTServerConnectionGetSignalStrength: Queried -> bars=%li", valuePtr, v10 message];
  }
  return [a2 setCurrentSignalBars:valuePtr];
}

void sub_1000D8A70()
{
  CFTypeRef cf = 0;
  if (!_CTServerConnectionGetSupportedEnhancedLinkQualityMetric())
  {
    id v0 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:4];
    +[WCM_Logging logLevel:22 message:@"configureEnhancedDataLQM"];
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    void v5[2] = sub_1000D921C;
    void v5[3] = &unk_10020F780;
    void v5[4] = v0;
    [(id)cf enumerateKeysAndObjectsUsingBlock:v5];
    unint64_t v1 = _CTServerConnectionRegisterSupportedEnhancedLinkQualityMetric();
    CFRelease(cf);
    if (v1)
    {
      +[WCM_Logging logLevel:22, @"eLQM: Failed to request supported metrics from Baseband, error = (%d, %d)", v1, HIDWORD(v1) message];
    }
    else
    {
      unint64_t v2 = _CTServerConnectionRegisterForNotification();
      if (v2) {
        +[WCM_Logging logLevel:22, @"eLQM: Failed to register with Baseband for eLQM notifications, error = (%d, %d)", v2, HIDWORD(v2) message];
      }
      else {
        +[WCM_Logging logLevel:22, @"configureEnhancedDataLQM: registered for eLQM notification", v3, v4 message];
      }
    }
  }
}

void sub_1000D91EC(id a1)
{
  id v1 = +[WRM_HandoverManager WRM_HandoverManagerSingleton];

  [v1 evaluateHandover];
}

id sub_1000D921C(uint64_t a1, uint64_t a2, void *a3)
{
  id result = [a3 BOOLValue];
  if (result)
  {
    int v6 = *(void **)(a1 + 32);
    return [v6 setObject:&off_10023D158 forKey:a2];
  }
  return result;
}

id sub_1000D9878(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 60) = [*(id *)(a1 + 32) getWiFiServiceSingletone];
  [*(id *)(*(void *)(a1 + 32) + 60) initializeiRATMetrics];
  [*(id *)(*(void *)(a1 + 32) + 60) setDelegate:];
  unint64_t v2 = *(void **)(*(void *)(a1 + 32) + 60);

  return [v2 registerWiFiCallbacks];
}

id sub_1000D9994(uint64_t a1)
{
  [objc_msgSend(*(id *)(a1 + 32), "wifiService") unregisterWiFiCallbacks];
  id v2 = [*(id *)(a1 + 32) wifiService];

  return [v2 setDelegate:0];
}

id sub_1000DA110(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 40);
  id v3 = [*(id *)(a1 + 32) wifiService];
  if (v2) {
    [v3 enableLQMUpdate];
  }
  else {
    [v3 disableLQMUpdate];
  }
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v4 = "YES";
  }
  else {
    uint64_t v4 = "NO";
  }
  return +[WCM_Logging logLevel:3, @"toggleWiFiLQMIfNeeded %s", v4 message];
}

id sub_1000DA270(uint64_t a1)
{
  [+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton") wifiController] handlePowerState:*(unsigned __int8 *)(a1 + 32);
  id v1 = +[WCM_PolicyManager singleton];

  return [v1 updateControllerState:103];
}

id sub_1000DA354(uint64_t a1)
{
  +[WCM_Logging logLevel:2, @"WiFiController base class CarPlayState state:(%d), reason:(%d)", *(unsigned __int8 *)(a1 + 36), *(unsigned int *)(a1 + 32) message];
  if (objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "wifiController"))
  {
    +[WCM_Logging logLevel:2 message:@"WiFiController calling policy via internal xpc"];
    id v1 = +[WCM_PolicyManager singleton];
    return [v1 updateControllerState:514];
  }
  else
  {
    return +[WCM_Logging logLevel:2 message:@"WiFiController is null"];
  }
}

id sub_1000DA4A0(uint64_t a1)
{
  +[WCM_Logging logLevel:2, @"WiFiController least congested Wifi channel:(%d), number:(%d)", *(unsigned int *)(a1 + 32), *(unsigned int *)(a1 + 36) message];
  if (objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "wifiController"))
  {
    +[WCM_Logging logLevel:2 message:@"WiFiController calling policy via internal xpc for least congested channel"];
    id v1 = +[WCM_PolicyManager singleton];
    return [v1 updateControllerState:104];
  }
  else
  {
    return +[WCM_Logging logLevel:2 message:@"WiFiController is null"];
  }
}

id sub_1000DA688(uint64_t a1)
{
  id result = [[+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton") wifiController];
  if (result)
  {
    id v3 = result;
    unsigned int v4 = [result wifiState];
    id v5 = [v3 wifiChannel];
    unsigned int v6 = [v3 hostAP];
    id v7 = [[+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton") platformManager];
    if (v4)
    {
      if (v4 >= 4)
      {
        id v8 = "INVALID_STATE!!!";
        if (v4 == 4) {
          id v8 = "ASSOCIATED_6G";
        }
      }
      else
      {
        id v8 = off_100211AE8[v4 - 1];
      }
    }
    else
    {
      id v8 = "DISABLED";
    }
    uint64_t v9 = *(int *)(a1 + 32);
    if (v9 >= 4)
    {
      if (v9 == 4) {
        uint64_t v10 = "ASSOCIATED_6G";
      }
      else {
        uint64_t v10 = "INVALID_STATE!!!";
      }
    }
    else
    {
      uint64_t v10 = off_100211B00[v9];
    }
    id result = +[WCM_Logging logLevel:5, @"WiFiS: updateWiFiState: wifiState(%s -> %s) wifiChannel(%d -> %d), hostAP(%d -> %d), centerFreqMHz(%d), bandwidthMHz(%d)", v8, v10, v5, *(unsigned int *)(a1 + 36), v6, *(unsigned __int8 *)(a1 + 48), *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44) message];
    uint64_t v11 = *(unsigned int *)(a1 + 32);
    if (__PAIR64__(v5, v4) != *(void *)(a1 + 32) || *(unsigned __int8 *)(a1 + 48) != v6)
    {
      if (!v4 && v11)
      {
        [objc_msgSend(v3, "wifiService") setRxProtectMode:objc_msgSend(v7, "wcmWiFiRxProtectMode")];
        [objc_msgSend(v3, "wifiService") setTxOnIndication:objc_msgSend(v7, "wcmWiFiTxOnIndication")];
        [objc_msgSend(v3, "wifiService") setScanJoinRxProtectDuration:objc_msgSend(v7, "wcmWiFiScanJoinProtectDuration")];
        [v3 updateMWSSignalingConfig];
        uint64_t v11 = *(unsigned int *)(a1 + 32);
      }
      [v3 setWifiState:v11];
      [v3 setWifiChannel:*(unsigned int *)(a1 + 36)];
      [v3 setHostAP:*(unsigned __int8 *)(a1 + 48)];
      [WCM_Logging logLevel:4 message:@"centerFreq(%d -> %d) bandwidth(%d -> %d)", [v3 channelCenterFreqMHz], *(unsigned int *)(a1 + 40), objc_msgSend(v3, "channelBandwidthMHz"), *(unsigned int *)(a1 + 44)];
      [v3 setChannelCenterFreqMHz:*(unsigned int *)(a1 + 40)];
      [v3 setChannelBandwidthMHz:*(unsigned int *)(a1 + 44)];
      [v3 setReportedChannelCenterFreqMHz:[v3 channelCenterFreqMHz]];
      if (objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "activeCoexFeatures"), "containsObject:", @"Wifi5gChannelMapping")&& (objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "activeCoexFeatures"), "containsObject:", @"WiFiEnhCoexSupport") & 1) == 0&& objc_msgSend(v3, "wifiChannel"))
      {
        uint64_t v12 = sub_10008C0F4([v3 wifiChannel], [v3 channelBandwidthMHz]);
        [v3 setChannelCenterFreqMHz:sub_10008C1B8(v12)];
        +[WCM_Logging logLevel:message:](WCM_Logging, @"Modified WIFI params: NEW centerFreq(%d -> %d) NEW: bandwidth(%d -> %d)", *(unsigned int *)(a1 + 40), [v3 channelCenterFreqMHz], *(unsigned int *)(a1 + 44), objc_msgSend(v3, "channelBandwidthMHz"));
      }
      [+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton") updateControllerState:100];
      [+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton") updateControllerState:1000];
      [+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton") updateControllerState:2200];
      [+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton") updateControllerState:108];
      [+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton") handleBTCoexWiFiStateEvent:wifiChannel:*(unsigned int *)(a1 + 32), *(unsigned int *)(a1 + 36)];
      [+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton") handleWiFiStateEvent:*(unsigned int *)(a1 + 32) wifiChannel:*(unsigned int *)(a1 + 36) isNanPhs:0];
      id result = [[[+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton") activeCoexFeatures] containsObject:@"WiFiFigaroCoex"];
      if (result && *(_DWORD *)(a1 + 32) <= 1u)
      {
        id v13 = +[WCM_PolicyManager singleton];
        return [v13 handleLow5GRate:0];
      }
    }
  }
  return result;
}

id sub_1000DAADC(uint64_t a1)
{
  id result = [[+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton") wifiController];
  if (result)
  {
    id v3 = result;
    [result hostAP5GHzActive];
    int v4 = *(unsigned __int8 *)(a1 + 32);
    id result = [v3 hostAP5GHzActive];
    if (v4 != result)
    {
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, @"WiFiS: hostAP5GHzState changed (%d -> %d)", [v3 hostAP5GHzActive], *(unsigned __int8 *)(a1 + 32));
      [v3 setHostAP5GHzActive:*(unsigned __int8 *)(a1 + 32)];
      id v5 = +[WCM_PolicyManager singleton];
      uint64_t v6 = *(unsigned __int8 *)(a1 + 32);
      return [v5 handle5GHzHostAPStateEvent:v6];
    }
  }
  return result;
}

void sub_1000DAC24(id a1)
{
  id v1 = +[WCM_PolicyManager singleton];

  [v1 handleErrorReport:2];
}

uint64_t sub_1000DAF94(uint64_t a1, uint64_t a2, xpc_object_t object)
{
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_int64) {
    [*(id *)(a1 + 32) setObject:[NSNumber numberWithLongLong:xpc_int64_get_value(object)] forKey:[NSString stringWithUTF8String:a2]];
  }
  return 1;
}

void sub_1000DB2DC(uint64_t a1)
{
  +[WCM_Logging logLevel:22 message:@"LocationController: create CLLocatoinManager"];
  id v8 = +[NSBundle bundleWithPath:@"/System/Library/LocationBundles/WRMLinkSelection.bundle"];
  id v2 = [objc_alloc((Class)CLLocationManager) initWithEffectiveBundle:v8 delegate:*(void *)(a1 + 32) onQueue:*(void *)(*(void *)(a1 + 32) + 8)];
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(void **)(v3 + 16);
  *(void *)(v3 + 16) = v2;

  [*(id *)(*(void *)(a1 + 32) + 16) setDesiredAccuracy:*(double *)(a1 + 40)];
  [*(id *)(*(void *)(a1 + 32) + 16) setDistanceFilter:*(double *)(a1 + 48)];
  id v5 = +[CLLocationManager authorizationStatusForBundle:v8];
  if ((v5 - 3) > 1)
  {
    id v7 = v5;
    CFStringRef v6 = @"LocationController: bundle is NOT authorized %d";
  }
  else
  {
    CFStringRef v6 = @"LocationController: bundle is authorized";
  }
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, v6, v7);
}

void *sub_1000DB454(void *result)
{
  uint64_t v1 = result[4];
  if (*(void *)(v1 + 16))
  {
    if (*(unsigned char *)(v1 + 24))
    {
      return +[WCM_Logging logLevel:22 message:@"LocationController: already monitoring"];
    }
    else
    {
      id v2 = result;
      *(unsigned char *)(v1 + 24) = 1;
      [*(id *)(result[4] + 16) startUpdatingLocation];
      +[WCM_Logging logLevel:22 message:@"LocationController: startMonitoring"];
      uint64_t v3 = (void *)v2[4];
      return [v3 updateLocationAuthorized_sync];
    }
  }
  return result;
}

id sub_1000DB578(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 24) = 0;
  id result = *(id *)(*(void *)(a1 + 32) + 16);
  if (result)
  {
    [result stopUpdatingLocation];
    return +[WCM_Logging logLevel:22 message:@"LocationController: stopMonitoring"];
  }
  return result;
}

void sub_1000DCAC8(id a1)
{
  qword_10027D330 = objc_alloc_init(WCM_WiFiServiceIOS);
}

id sub_1000E04DC(uint64_t a1, uint64_t a2, void *a3)
{
  +[WCM_Logging logLevel:3, @"WiFiS: callbackWiFiManagerClientWowStateChanged: isEnabled(%d)", a2 message];

  return [a3 setWoWState:a2];
}

id sub_1000E0540(uint64_t a1, uint64_t a2, void *a3)
{
  id result = +[WCM_Logging logLevel:2, @"WiFiS: callbackWiFiManagerClientDeviceAttachment device(%p)", a2 message];
  if (a2)
  {
    return [a3 setWiFiDevice:a2];
  }
  return result;
}

void sub_1000E09B0(uint64_t a1)
{
  +[WCM_Logging logLevel:3, @"WiFiS: setting PHS blocklist channels %@", *(void *)(a1 + 32) message];
  id v2 = +[NSMutableArray array];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v9 objects:v15 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v9 + 1) + 8 * i);
        CFStringRef v13 = @"MWS_Channel_Number";
        uint64_t v14 = v8;
        [v2 addObject:+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v14, &v13, 1)];
      }
      id v5 = [v3 countByEnumeratingWithState:&v9 objects:v15 count:16];
    }
    while (v5);
  }
  [*(id *)(a1 + 40) sendMessage:@"MWS_Blacklisted_Channels" withValue:v2];
}

void sub_1000E0BA8(uint64_t a1)
{
  +[WCM_Logging logLevel:3, @"WiFiS: setting WCI2 enabled channels %@", *(void *)(a1 + 32) message];
  id v2 = +[NSMutableArray array];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v9 objects:v15 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v9 + 1) + 8 * i);
        CFStringRef v13 = @"MWS_Channel_Number";
        uint64_t v14 = v8;
        [v2 addObject:[+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v14, &v13, 1)];
      }
      id v5 = [v3 countByEnumeratingWithState:&v9 objects:v15 count:16];
    }
    while (v5);
  }
  [*(id *)(a1 + 40) sendMessage:@"MWS_Coex_Enabled_Channels" withValue:v2];
}

void sub_1000E0DA0(uint64_t a1)
{
  +[WCM_Logging logLevel:3, @"WCI2_V2 WiFiS: setting WCI2V2 enabled channels %@", *(void *)(a1 + 32) message];
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  id v2 = [&off_10024E668 countByEnumeratingWithState:&v56 objects:v65 count:16];
  if (v2)
  {
    id v3 = v2;
    char v4 = 0;
    unsigned __int16 v5 = 0;
    uint64_t v6 = *(void *)v57;
    do
    {
      id v7 = 0;
      char v8 = v4;
      do
      {
        if (*(void *)v57 != v6) {
          objc_enumerationMutation(&off_10024E668);
        }
        unsigned int v9 = [*(id *)(a1 + 32) containsObject:*(void *)(*((void *)&v56 + 1) + 8 * (void)v7)];
        int v10 = 1 << v8;
        if (!v9) {
          LOWORD(v10) = 0;
        }
        v5 |= v10;
        ++v8;
        id v7 = (char *)v7 + 1;
      }
      while (v3 != v7);
      v4 += (char)v3;
      id v3 = [&off_10024E668 countByEnumeratingWithState:&v56 objects:v65 count:16];
    }
    while (v3);
    unsigned int v43 = v5;
  }
  else
  {
    unsigned int v43 = 0;
  }
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  id v11 = [&off_10024E680 countByEnumeratingWithState:&v52 objects:v64 count:16];
  if (v11)
  {
    id v12 = v11;
    char v13 = 0;
    unsigned __int16 v14 = 0;
    uint64_t v15 = *(void *)v53;
    do
    {
      uint64_t v16 = 0;
      char v17 = v13;
      do
      {
        if (*(void *)v53 != v15) {
          objc_enumerationMutation(&off_10024E680);
        }
        unsigned int v18 = [*(id *)(a1 + 32) containsObject:*(void *)(*((void *)&v52 + 1) + 8 * (void)v16)];
        int v19 = 1 << v17;
        if (!v18) {
          LOWORD(v19) = 0;
        }
        v14 |= v19;
        ++v17;
        uint64_t v16 = (char *)v16 + 1;
      }
      while (v12 != v16);
      v13 += (char)v12;
      id v12 = [&off_10024E680 countByEnumeratingWithState:&v52 objects:v64 count:16];
    }
    while (v12);
    uint64_t v20 = v14;
  }
  else
  {
    uint64_t v20 = 0;
  }
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  id v21 = [&off_10024E698 countByEnumeratingWithState:&v48 objects:v63 count:16];
  if (v21)
  {
    id v22 = v21;
    char v23 = 0;
    unsigned __int16 v24 = 0;
    uint64_t v25 = *(void *)v49;
    do
    {
      uint64_t v26 = 0;
      char v27 = v23;
      do
      {
        if (*(void *)v49 != v25) {
          objc_enumerationMutation(&off_10024E698);
        }
        unsigned int v28 = [*(id *)(a1 + 32) containsObject:*(void *)(*((void *)&v48 + 1) + 8 * (void)v26)];
        int v29 = 1 << v27;
        if (!v28) {
          LOWORD(v29) = 0;
        }
        v24 |= v29;
        ++v27;
        uint64_t v26 = (char *)v26 + 1;
      }
      while (v22 != v26);
      v23 += (char)v22;
      id v22 = [&off_10024E698 countByEnumeratingWithState:&v48 objects:v63 count:16];
    }
    while (v22);
    uint64_t v30 = v24;
  }
  else
  {
    uint64_t v30 = 0;
  }
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  id v31 = [&off_10024E6B0 countByEnumeratingWithState:&v44 objects:v62 count:16];
  if (v31)
  {
    id v32 = v31;
    unsigned int v42 = v20;
    char v33 = 0;
    unsigned __int16 v34 = 0;
    uint64_t v35 = *(void *)v45;
    do
    {
      CFRange v36 = 0;
      char v37 = v33;
      do
      {
        if (*(void *)v45 != v35) {
          objc_enumerationMutation(&off_10024E6B0);
        }
        unsigned int v38 = [*(id *)(a1 + 32) containsObject:*(void *)(*((void *)&v44 + 1) + 8 * (void)v36)];
        int v39 = 1 << v37;
        if (!v38) {
          LOWORD(v39) = 0;
        }
        v34 |= v39;
        ++v37;
        CFRange v36 = (char *)v36 + 1;
      }
      while (v32 != v36);
      v33 += (char)v32;
      id v32 = [&off_10024E6B0 countByEnumeratingWithState:&v44 objects:v62 count:16];
    }
    while (v32);
    uint64_t v40 = v34;
    uint64_t v20 = v42;
  }
  else
  {
    uint64_t v40 = 0;
  }
  v60[0] = @"IO80211InterfaceMwsCoex2GBitmapV2";
  v61[0] = +[NSNumber numberWithInt:v43];
  v60[1] = @"IO80211InterfaceMwsCoex5GBitmapLowV2";
  v61[1] = +[NSNumber numberWithInt:v20];
  v60[2] = @"IO80211InterfaceMwsCoex5GBitmapMidV2";
  v61[2] = +[NSNumber numberWithInt:v30];
  v60[3] = @"IO80211InterfaceMwsCoex5GBitmapHiV2";
  v61[3] = +[NSNumber numberWithInt:v40];
  unint64_t v41 = +[NSDictionary dictionaryWithObjects:v61 forKeys:v60 count:4];
  +[WCM_Logging logLevel:1, @"DLDebug_ WCI2V2_IOVAR: setting APPLE80211KEY_MWS_COEX_BITMAP_V2 %@", v41 message];
  [*(id *)(a1 + 40) sendMessage:@"IO80211InterfaceMwsCoexBitmapV2" withValue:v41];
}

void sub_1000E12B4(id *a1)
{
  +[WCM_Logging logLevel:3, @"WCI2_WiFiEnh WiFiS: setting WCI2V2 enabled channels 2G5G part channels %@, Enh part channels %@", a1[4], a1[5] message];
  long long v127 = 0u;
  long long v128 = 0u;
  long long v125 = 0u;
  long long v126 = 0u;
  id v2 = [&off_10024E6C8 countByEnumeratingWithState:&v125 objects:v139 count:16];
  if (v2)
  {
    id v3 = v2;
    char v4 = 0;
    unsigned __int16 v5 = 0;
    uint64_t v6 = *(void *)v126;
    do
    {
      id v7 = 0;
      char v8 = v4;
      do
      {
        if (*(void *)v126 != v6) {
          objc_enumerationMutation(&off_10024E6C8);
        }
        unsigned int v9 = [a1[4] containsObject:*(void *)(*((void *)&v125 + 1) + 8 * (void)v7)];
        int v10 = 1 << v8;
        if (!v9) {
          LOWORD(v10) = 0;
        }
        v5 |= v10;
        ++v8;
        id v7 = (char *)v7 + 1;
      }
      while (v3 != v7);
      v4 += (char)v3;
      id v3 = [&off_10024E6C8 countByEnumeratingWithState:&v125 objects:v139 count:16];
    }
    while (v3);
  }
  else
  {
    unsigned __int16 v5 = 0;
  }
  long long v123 = 0u;
  long long v124 = 0u;
  long long v121 = 0u;
  long long v122 = 0u;
  id v11 = [&off_10024E6E0 countByEnumeratingWithState:&v121 objects:v138 count:16];
  if (v11)
  {
    id v12 = v11;
    char v13 = 0;
    unsigned __int16 v14 = 0;
    uint64_t v15 = *(void *)v122;
    do
    {
      uint64_t v16 = 0;
      char v17 = v13;
      do
      {
        if (*(void *)v122 != v15) {
          objc_enumerationMutation(&off_10024E6E0);
        }
        unsigned int v18 = [a1[4] containsObject:*(void *)(*((void *)&v121 + 1) + 8 * (void)v16)];
        int v19 = 1 << v17;
        if (!v18) {
          LOWORD(v19) = 0;
        }
        v14 |= v19;
        ++v17;
        uint64_t v16 = (char *)v16 + 1;
      }
      while (v12 != v16);
      v13 += (char)v12;
      id v12 = [&off_10024E6E0 countByEnumeratingWithState:&v121 objects:v138 count:16];
    }
    while (v12);
    unsigned int v92 = v14;
  }
  else
  {
    unsigned int v92 = 0;
  }
  long long v119 = 0u;
  long long v120 = 0u;
  long long v117 = 0u;
  long long v118 = 0u;
  id v20 = [&off_10024E6F8 countByEnumeratingWithState:&v117 objects:v137 count:16];
  if (v20)
  {
    id v21 = v20;
    char v22 = 0;
    unsigned __int16 v23 = 0;
    uint64_t v24 = *(void *)v118;
    do
    {
      uint64_t v25 = 0;
      char v26 = v22;
      do
      {
        if (*(void *)v118 != v24) {
          objc_enumerationMutation(&off_10024E6F8);
        }
        unsigned int v27 = [a1[4] containsObject:*(void *)(*((void *)&v117 + 1) + 8 * (void)v25)];
        int v28 = 1 << v26;
        if (!v27) {
          LOWORD(v28) = 0;
        }
        v23 |= v28;
        ++v26;
        uint64_t v25 = (char *)v25 + 1;
      }
      while (v21 != v25);
      v22 += (char)v21;
      id v21 = [&off_10024E6F8 countByEnumeratingWithState:&v117 objects:v137 count:16];
    }
    while (v21);
    unsigned int v91 = v23;
  }
  else
  {
    unsigned int v91 = 0;
  }
  long long v115 = 0u;
  long long v116 = 0u;
  long long v113 = 0u;
  long long v114 = 0u;
  id v29 = [&off_10024E710 countByEnumeratingWithState:&v113 objects:v136 count:16];
  if (v29)
  {
    id v30 = v29;
    char v31 = 0;
    unsigned __int16 v32 = 0;
    uint64_t v33 = *(void *)v114;
    do
    {
      unsigned __int16 v34 = 0;
      char v35 = v31;
      do
      {
        if (*(void *)v114 != v33) {
          objc_enumerationMutation(&off_10024E710);
        }
        unsigned int v36 = [a1[4] containsObject:*(void *)(*((void *)&v113 + 1) + 8 * (void)v34)];
        int v37 = 1 << v35;
        if (!v36) {
          LOWORD(v37) = 0;
        }
        v32 |= v37;
        ++v35;
        unsigned __int16 v34 = (char *)v34 + 1;
      }
      while (v30 != v34);
      v31 += (char)v30;
      id v30 = [&off_10024E710 countByEnumeratingWithState:&v113 objects:v136 count:16];
    }
    while (v30);
    unsigned int v90 = v32;
  }
  else
  {
    unsigned int v90 = 0;
  }
  long long v111 = 0u;
  long long v112 = 0u;
  long long v109 = 0u;
  long long v110 = 0u;
  id v38 = [&off_10024E728 countByEnumeratingWithState:&v109 objects:v135 count:16];
  if (v38)
  {
    id v39 = v38;
    char v40 = 0;
    unsigned __int16 v41 = 0;
    uint64_t v42 = *(void *)v110;
    do
    {
      unsigned int v43 = 0;
      char v44 = v40;
      do
      {
        if (*(void *)v110 != v42) {
          objc_enumerationMutation(&off_10024E728);
        }
        unsigned int v45 = [a1[5] containsObject:*(void *)(*((void *)&v109 + 1) + 8 * (void)v43)];
        int v46 = 1 << v44;
        if (!v45) {
          LOWORD(v46) = 0;
        }
        v41 |= v46;
        ++v44;
        unsigned int v43 = (char *)v43 + 1;
      }
      while (v39 != v43);
      v40 += (char)v39;
      id v39 = [&off_10024E728 countByEnumeratingWithState:&v109 objects:v135 count:16];
    }
    while (v39);
    unsigned int v89 = v41;
  }
  else
  {
    unsigned int v89 = 0;
  }
  long long v107 = 0u;
  long long v108 = 0u;
  long long v105 = 0u;
  long long v106 = 0u;
  id v47 = [&off_10024E740 countByEnumeratingWithState:&v105 objects:v134 count:16];
  if (v47)
  {
    id v48 = v47;
    char v49 = 0;
    unsigned __int16 v50 = 0;
    uint64_t v51 = *(void *)v106;
    do
    {
      long long v52 = 0;
      char v53 = v49;
      do
      {
        if (*(void *)v106 != v51) {
          objc_enumerationMutation(&off_10024E740);
        }
        unsigned int v54 = [a1[5] containsObject:*(void *)(*((void *)&v105 + 1) + 8 * (void)v52)];
        int v55 = 1 << v53;
        if (!v54) {
          LOWORD(v55) = 0;
        }
        v50 |= v55;
        ++v53;
        long long v52 = (char *)v52 + 1;
      }
      while (v48 != v52);
      v49 += (char)v48;
      id v48 = [&off_10024E740 countByEnumeratingWithState:&v105 objects:v134 count:16];
    }
    while (v48);
    unsigned int v88 = v50;
  }
  else
  {
    unsigned int v88 = 0;
  }
  long long v103 = 0u;
  long long v104 = 0u;
  long long v101 = 0u;
  long long v102 = 0u;
  id v56 = [&off_10024E758 countByEnumeratingWithState:&v101 objects:v133 count:16];
  if (v56)
  {
    id v57 = v56;
    char v58 = 0;
    unsigned __int16 v59 = 0;
    uint64_t v60 = *(void *)v102;
    do
    {
      uint64_t v61 = 0;
      char v62 = v58;
      do
      {
        if (*(void *)v102 != v60) {
          objc_enumerationMutation(&off_10024E758);
        }
        unsigned int v63 = [a1[5] containsObject:*(void *)(*((void *)&v101 + 1) + 8 * (void)v61)];
        int v64 = 1 << v62;
        if (!v63) {
          LOWORD(v64) = 0;
        }
        v59 |= v64;
        ++v62;
        uint64_t v61 = (char *)v61 + 1;
      }
      while (v57 != v61);
      v58 += (char)v57;
      id v57 = [&off_10024E758 countByEnumeratingWithState:&v101 objects:v133 count:16];
    }
    while (v57);
    unsigned int v87 = v59;
  }
  else
  {
    unsigned int v87 = 0;
  }
  long long v99 = 0u;
  long long v100 = 0u;
  long long v97 = 0u;
  long long v98 = 0u;
  id v65 = [&off_10024E770 countByEnumeratingWithState:&v97 objects:v132 count:16];
  if (v65)
  {
    id v66 = v65;
    char v67 = 0;
    unsigned __int16 v68 = 0;
    uint64_t v69 = *(void *)v98;
    do
    {
      uint64_t v70 = 0;
      char v71 = v67;
      do
      {
        if (*(void *)v98 != v69) {
          objc_enumerationMutation(&off_10024E770);
        }
        unsigned int v72 = [a1[5] containsObject:*(void *)(*((void *)&v97 + 1) + 8 * (void)v70)];
        int v73 = 1 << v71;
        if (!v72) {
          LOWORD(v73) = 0;
        }
        v68 |= v73;
        ++v71;
        uint64_t v70 = (char *)v70 + 1;
      }
      while (v66 != v70);
      v67 += (char)v66;
      id v66 = [&off_10024E770 countByEnumeratingWithState:&v97 objects:v132 count:16];
    }
    while (v66);
    uint64_t v74 = v68;
  }
  else
  {
    uint64_t v74 = 0;
  }
  long long v95 = 0u;
  long long v96 = 0u;
  long long v93 = 0u;
  long long v94 = 0u;
  id v75 = [&off_10024E788 countByEnumeratingWithState:&v93 objects:v131 count:16];
  if (v75)
  {
    id v76 = v75;
    unsigned int v86 = v74;
    char v77 = 0;
    unsigned __int16 v78 = 0;
    uint64_t v79 = *(void *)v94;
    do
    {
      unint64_t v80 = 0;
      char v81 = v77;
      do
      {
        if (*(void *)v94 != v79) {
          objc_enumerationMutation(&off_10024E788);
        }
        unsigned int v82 = [a1[5] containsObject:*(void *)(*((void *)&v93 + 1) + 8 * (void)v80)];
        int v83 = 1 << v81;
        if (!v82) {
          LOWORD(v83) = 0;
        }
        v78 |= v83;
        ++v81;
        unint64_t v80 = (char *)v80 + 1;
      }
      while (v76 != v80);
      v77 += (char)v76;
      id v76 = [&off_10024E788 countByEnumeratingWithState:&v93 objects:v131 count:16];
    }
    while (v76);
    uint64_t v84 = v78;
    uint64_t v74 = v86;
  }
  else
  {
    uint64_t v84 = 0;
  }
  if (objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "activeCoexFeatures"), "containsObject:", @"WiFiEnhCoexSupport"))
  {
    v129[0] = @"MWS2GBITMAPWiFiEnh";
    v130[0] = +[NSNumber numberWithInt:v5];
    v129[1] = @"MWS5GBITMAPLOWWiFiEnh";
    v130[1] = +[NSNumber numberWithInt:v92];
    v129[2] = @"MWS5GBITMAPMIDWiFiEnh";
    v130[2] = +[NSNumber numberWithInt:v91];
    v129[3] = @"MWS5GBITMAPHIWiFiEnh";
    v130[3] = +[NSNumber numberWithInt:v90];
    v129[4] = @"MWSU5LowBITMAPWiFiEnh";
    v130[4] = +[NSNumber numberWithInt:v89];
    v129[5] = @"MWSU5HighBITMAPWiFiEnh";
    v130[5] = +[NSNumber numberWithInt:v88];
    v129[6] = @"MWSU6BITMAPWiFiEnh";
    v130[6] = +[NSNumber numberWithInt:v87];
    v129[7] = @"MWSU7BITMAPWiFiEnh";
    v130[7] = +[NSNumber numberWithInt:v74];
    v129[8] = @"MWSU8BITMAPWiFiEnh";
    v130[8] = +[NSNumber numberWithInt:v84];
    unint64_t v85 = +[NSDictionary dictionaryWithObjects:v130 forKeys:v129 count:9];
    +[WCM_Logging logLevel:4, @"WCI2_WiFiEnh_IOVAR: setting mwsCoexBitmapWiFiEnh %@", v85 message];
    [a1[6] sendMessage:@"MWSCOEXBITMAPWiFiEnh" withValue:v85];
  }
}

void sub_1000E1C4C(uint64_t a1)
{
  +[WCM_Logging logLevel:3, @"DLDebug_ WiFi_Type7_IOVAR WiFiS: WiFi_Type7: setting Type7 MSG enabled channels %@", *(void *)(a1 + 32) message];
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  id v2 = [&off_10024E7A0 countByEnumeratingWithState:&v43 objects:v51 count:16];
  if (v2)
  {
    id v3 = v2;
    char v4 = 0;
    unsigned __int16 v5 = 0;
    uint64_t v6 = *(void *)v44;
    do
    {
      id v7 = 0;
      char v8 = v4;
      do
      {
        if (*(void *)v44 != v6) {
          objc_enumerationMutation(&off_10024E7A0);
        }
        unsigned int v9 = [*(id *)(a1 + 32) containsObject:*(void *)(*((void *)&v43 + 1) + 8 * (void)v7)];
        int v10 = 1 << v8;
        if (!v9) {
          LOWORD(v10) = 0;
        }
        v5 |= v10;
        ++v8;
        id v7 = (char *)v7 + 1;
      }
      while (v3 != v7);
      v4 += (char)v3;
      id v3 = [&off_10024E7A0 countByEnumeratingWithState:&v43 objects:v51 count:16];
    }
    while (v3);
    uint64_t v11 = v5;
  }
  else
  {
    uint64_t v11 = 0;
  }
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  id v12 = [&off_10024E7B8 countByEnumeratingWithState:&v39 objects:v50 count:16];
  if (v12)
  {
    id v13 = v12;
    char v14 = 0;
    unsigned __int16 v15 = 0;
    uint64_t v16 = *(void *)v40;
    do
    {
      char v17 = 0;
      char v18 = v14;
      do
      {
        if (*(void *)v40 != v16) {
          objc_enumerationMutation(&off_10024E7B8);
        }
        unsigned int v19 = [*(id *)(a1 + 32) containsObject:*(void *)(*((void *)&v39 + 1) + 8 * (void)v17)];
        int v20 = 1 << v18;
        if (!v19) {
          LOWORD(v20) = 0;
        }
        v15 |= v20;
        ++v18;
        char v17 = (char *)v17 + 1;
      }
      while (v13 != v17);
      v14 += (char)v13;
      id v13 = [&off_10024E7B8 countByEnumeratingWithState:&v39 objects:v50 count:16];
    }
    while (v13);
    uint64_t v21 = v15;
  }
  else
  {
    uint64_t v21 = 0;
  }
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id v22 = [&off_10024E7D0 countByEnumeratingWithState:&v35 objects:v49 count:16];
  if (v22)
  {
    id v23 = v22;
    unsigned int v34 = v11;
    char v24 = 0;
    unsigned __int16 v25 = 0;
    uint64_t v26 = *(void *)v36;
    do
    {
      unsigned int v27 = 0;
      char v28 = v24;
      do
      {
        if (*(void *)v36 != v26) {
          objc_enumerationMutation(&off_10024E7D0);
        }
        unsigned int v29 = [*(id *)(a1 + 32) containsObject:*(void *)(*((void *)&v35 + 1) + 8 * (void)v27)];
        int v30 = 1 << v28;
        if (!v29) {
          LOWORD(v30) = 0;
        }
        v25 |= v30;
        ++v28;
        unsigned int v27 = (char *)v27 + 1;
      }
      while (v23 != v27);
      v24 += (char)v23;
      id v23 = [&off_10024E7D0 countByEnumeratingWithState:&v35 objects:v49 count:16];
    }
    while (v23);
    uint64_t v31 = v25;
    uint64_t v11 = v34;
  }
  else
  {
    uint64_t v31 = 0;
  }
  v47[0] = @"IO80211InterfaceMwsNGCCoex5GHzBitmapLow";
  v48[0] = +[NSNumber numberWithInt:v11];
  v47[1] = @"IO80211InterfaceMwsNGCCoex5GHzBitmapMid";
  v48[1] = +[NSNumber numberWithInt:v21];
  v47[2] = @"IO80211InterfaceMwsNGCCoex5GHzBitmapHi";
  xpc_object_t v48[2] = +[NSNumber numberWithInt:v31];
  unsigned __int16 v32 = +[NSDictionary dictionaryWithObjects:v48 forKeys:v47 count:3];
  +[WCM_Logging logLevel:1, @"DLDebug_ WiFi_Type7_IOVAR: WiFiS: WiFi_Type7: setting APPLE80211KEY_MWS_NGC_COEX_BITMAP %@", v32 message];
  [*(id *)(a1 + 40) sendMessage:@"IO80211InterfaceMwsNGCCoexBitmap" withValue:v32];
  uint64_t v33 = +[NSNumber numberWithShort:250];
  [*(id *)(a1 + 40) sendMessage:@"MWS_NGC_TIMER_GRANULARITY" withValue:v33];
  +[WCM_Logging logLevel:3, @"DLDebug_ WiFi_Type7_IOVAR: WiFiS: WiFi_Type7: setting Type7 MSG timerGranularity %@", v33 message];
}

void sub_1000E20A4(uint64_t a1)
{
  +[WCM_Logging logLevel:4, @"2GWiFi_Type7_IOVAR input to setChannelsToEnableType7MSG2GWiFi: setting Type7 MSG enabled channels %@", *(void *)(a1 + 32) message];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v2 = [&off_10024E7E8 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v2)
  {
    id v3 = v2;
    char v4 = 0;
    unsigned __int16 v5 = 0;
    uint64_t v6 = *(void *)v14;
    do
    {
      id v7 = 0;
      char v8 = v4;
      do
      {
        if (*(void *)v14 != v6) {
          objc_enumerationMutation(&off_10024E7E8);
        }
        unsigned int v9 = [*(id *)(a1 + 32) containsObject:*(void *)(*((void *)&v13 + 1) + 8 * (void)v7)];
        int v10 = 1 << v8;
        if (!v9) {
          LOWORD(v10) = 0;
        }
        v5 |= v10;
        ++v8;
        id v7 = (char *)v7 + 1;
      }
      while (v3 != v7);
      v4 += (char)v3;
      id v3 = [&off_10024E7E8 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v3);
    uint64_t v11 = v5;
  }
  else
  {
    uint64_t v11 = 0;
  }
  id v12 = +[NSNumber numberWithInt:v11];
  [*(id *)(a1 + 40) sendMessage:@"IO80211MWS2GWiFiType7Bitmap" withValue:v12];
  +[WCM_Logging logLevel:3, @"DLDebug_ WCI2V2_IOVAR: setting APPLE80211KEY_MWS_TYPE7_2GWiFi_BITMAP %@", v12 message];
}

void sub_1000E22DC(id *a1)
{
  +[WCM_Logging logLevel:3, @"WiFiType7_WiFiEnh WiFiS: setting WiFiType7_WiFiEnh enabled channels 2G5G part channels %@, Enh part channels %@", a1[4], a1[5] message];
  long long v127 = 0u;
  long long v128 = 0u;
  long long v125 = 0u;
  long long v126 = 0u;
  id v2 = [&off_10024E800 countByEnumeratingWithState:&v125 objects:v139 count:16];
  if (v2)
  {
    id v3 = v2;
    char v4 = 0;
    unsigned __int16 v5 = 0;
    uint64_t v6 = *(void *)v126;
    do
    {
      id v7 = 0;
      char v8 = v4;
      do
      {
        if (*(void *)v126 != v6) {
          objc_enumerationMutation(&off_10024E800);
        }
        unsigned int v9 = [a1[4] containsObject:*(void *)(*((void *)&v125 + 1) + 8 * (void)v7)];
        int v10 = 1 << v8;
        if (!v9) {
          LOWORD(v10) = 0;
        }
        v5 |= v10;
        ++v8;
        id v7 = (char *)v7 + 1;
      }
      while (v3 != v7);
      v4 += (char)v3;
      id v3 = [&off_10024E800 countByEnumeratingWithState:&v125 objects:v139 count:16];
    }
    while (v3);
  }
  else
  {
    unsigned __int16 v5 = 0;
  }
  long long v123 = 0u;
  long long v124 = 0u;
  long long v121 = 0u;
  long long v122 = 0u;
  id v11 = [&off_10024E818 countByEnumeratingWithState:&v121 objects:v138 count:16];
  if (v11)
  {
    id v12 = v11;
    char v13 = 0;
    unsigned __int16 v14 = 0;
    uint64_t v15 = *(void *)v122;
    do
    {
      long long v16 = 0;
      char v17 = v13;
      do
      {
        if (*(void *)v122 != v15) {
          objc_enumerationMutation(&off_10024E818);
        }
        unsigned int v18 = [a1[4] containsObject:*(void *)(*((void *)&v121 + 1) + 8 * (void)v16)];
        int v19 = 1 << v17;
        if (!v18) {
          LOWORD(v19) = 0;
        }
        v14 |= v19;
        ++v17;
        long long v16 = (char *)v16 + 1;
      }
      while (v12 != v16);
      v13 += (char)v12;
      id v12 = [&off_10024E818 countByEnumeratingWithState:&v121 objects:v138 count:16];
    }
    while (v12);
    unsigned int v92 = v14;
  }
  else
  {
    unsigned int v92 = 0;
  }
  long long v119 = 0u;
  long long v120 = 0u;
  long long v117 = 0u;
  long long v118 = 0u;
  id v20 = [&off_10024E830 countByEnumeratingWithState:&v117 objects:v137 count:16];
  if (v20)
  {
    id v21 = v20;
    char v22 = 0;
    unsigned __int16 v23 = 0;
    uint64_t v24 = *(void *)v118;
    do
    {
      unsigned __int16 v25 = 0;
      char v26 = v22;
      do
      {
        if (*(void *)v118 != v24) {
          objc_enumerationMutation(&off_10024E830);
        }
        unsigned int v27 = [a1[4] containsObject:*(void *)(*((void *)&v117 + 1) + 8 * (void)v25)];
        int v28 = 1 << v26;
        if (!v27) {
          LOWORD(v28) = 0;
        }
        v23 |= v28;
        ++v26;
        unsigned __int16 v25 = (char *)v25 + 1;
      }
      while (v21 != v25);
      v22 += (char)v21;
      id v21 = [&off_10024E830 countByEnumeratingWithState:&v117 objects:v137 count:16];
    }
    while (v21);
    unsigned int v91 = v23;
  }
  else
  {
    unsigned int v91 = 0;
  }
  long long v115 = 0u;
  long long v116 = 0u;
  long long v113 = 0u;
  long long v114 = 0u;
  id v29 = [&off_10024E848 countByEnumeratingWithState:&v113 objects:v136 count:16];
  if (v29)
  {
    id v30 = v29;
    char v31 = 0;
    unsigned __int16 v32 = 0;
    uint64_t v33 = *(void *)v114;
    do
    {
      unsigned int v34 = 0;
      char v35 = v31;
      do
      {
        if (*(void *)v114 != v33) {
          objc_enumerationMutation(&off_10024E848);
        }
        unsigned int v36 = [a1[4] containsObject:*(void *)(*((void *)&v113 + 1) + 8 * (void)v34)];
        int v37 = 1 << v35;
        if (!v36) {
          LOWORD(v37) = 0;
        }
        v32 |= v37;
        ++v35;
        unsigned int v34 = (char *)v34 + 1;
      }
      while (v30 != v34);
      v31 += (char)v30;
      id v30 = [&off_10024E848 countByEnumeratingWithState:&v113 objects:v136 count:16];
    }
    while (v30);
    unsigned int v90 = v32;
  }
  else
  {
    unsigned int v90 = 0;
  }
  long long v111 = 0u;
  long long v112 = 0u;
  long long v109 = 0u;
  long long v110 = 0u;
  id v38 = [&off_10024E860 countByEnumeratingWithState:&v109 objects:v135 count:16];
  if (v38)
  {
    id v39 = v38;
    char v40 = 0;
    unsigned __int16 v41 = 0;
    uint64_t v42 = *(void *)v110;
    do
    {
      long long v43 = 0;
      char v44 = v40;
      do
      {
        if (*(void *)v110 != v42) {
          objc_enumerationMutation(&off_10024E860);
        }
        unsigned int v45 = [a1[5] containsObject:*(void *)(*((void *)&v109 + 1) + 8 * (void)v43)];
        int v46 = 1 << v44;
        if (!v45) {
          LOWORD(v46) = 0;
        }
        v41 |= v46;
        ++v44;
        long long v43 = (char *)v43 + 1;
      }
      while (v39 != v43);
      v40 += (char)v39;
      id v39 = [&off_10024E860 countByEnumeratingWithState:&v109 objects:v135 count:16];
    }
    while (v39);
    unsigned int v89 = v41;
  }
  else
  {
    unsigned int v89 = 0;
  }
  long long v107 = 0u;
  long long v108 = 0u;
  long long v105 = 0u;
  long long v106 = 0u;
  id v47 = [&off_10024E878 countByEnumeratingWithState:&v105 objects:v134 count:16];
  if (v47)
  {
    id v48 = v47;
    char v49 = 0;
    unsigned __int16 v50 = 0;
    uint64_t v51 = *(void *)v106;
    do
    {
      long long v52 = 0;
      char v53 = v49;
      do
      {
        if (*(void *)v106 != v51) {
          objc_enumerationMutation(&off_10024E878);
        }
        unsigned int v54 = [a1[5] containsObject:*(void *)(*((void *)&v105 + 1) + 8 * (void)v52)];
        int v55 = 1 << v53;
        if (!v54) {
          LOWORD(v55) = 0;
        }
        v50 |= v55;
        ++v53;
        long long v52 = (char *)v52 + 1;
      }
      while (v48 != v52);
      v49 += (char)v48;
      id v48 = [&off_10024E878 countByEnumeratingWithState:&v105 objects:v134 count:16];
    }
    while (v48);
    unsigned int v88 = v50;
  }
  else
  {
    unsigned int v88 = 0;
  }
  long long v103 = 0u;
  long long v104 = 0u;
  long long v101 = 0u;
  long long v102 = 0u;
  id v56 = [&off_10024E890 countByEnumeratingWithState:&v101 objects:v133 count:16];
  if (v56)
  {
    id v57 = v56;
    char v58 = 0;
    unsigned __int16 v59 = 0;
    uint64_t v60 = *(void *)v102;
    do
    {
      uint64_t v61 = 0;
      char v62 = v58;
      do
      {
        if (*(void *)v102 != v60) {
          objc_enumerationMutation(&off_10024E890);
        }
        unsigned int v63 = [a1[5] containsObject:*(void *)(*((void *)&v101 + 1) + 8 * (void)v61)];
        int v64 = 1 << v62;
        if (!v63) {
          LOWORD(v64) = 0;
        }
        v59 |= v64;
        ++v62;
        uint64_t v61 = (char *)v61 + 1;
      }
      while (v57 != v61);
      v58 += (char)v57;
      id v57 = [&off_10024E890 countByEnumeratingWithState:&v101 objects:v133 count:16];
    }
    while (v57);
    unsigned int v87 = v59;
  }
  else
  {
    unsigned int v87 = 0;
  }
  long long v99 = 0u;
  long long v100 = 0u;
  long long v97 = 0u;
  long long v98 = 0u;
  id v65 = [&off_10024E8A8 countByEnumeratingWithState:&v97 objects:v132 count:16];
  if (v65)
  {
    id v66 = v65;
    char v67 = 0;
    unsigned __int16 v68 = 0;
    uint64_t v69 = *(void *)v98;
    do
    {
      uint64_t v70 = 0;
      char v71 = v67;
      do
      {
        if (*(void *)v98 != v69) {
          objc_enumerationMutation(&off_10024E8A8);
        }
        unsigned int v72 = [a1[5] containsObject:*(void *)(*((void *)&v97 + 1) + 8 * (void)v70)];
        int v73 = 1 << v71;
        if (!v72) {
          LOWORD(v73) = 0;
        }
        v68 |= v73;
        ++v71;
        uint64_t v70 = (char *)v70 + 1;
      }
      while (v66 != v70);
      v67 += (char)v66;
      id v66 = [&off_10024E8A8 countByEnumeratingWithState:&v97 objects:v132 count:16];
    }
    while (v66);
    uint64_t v74 = v68;
  }
  else
  {
    uint64_t v74 = 0;
  }
  long long v95 = 0u;
  long long v96 = 0u;
  long long v93 = 0u;
  long long v94 = 0u;
  id v75 = [&off_10024E8C0 countByEnumeratingWithState:&v93 objects:v131 count:16];
  if (v75)
  {
    id v76 = v75;
    unsigned int v86 = v74;
    char v77 = 0;
    unsigned __int16 v78 = 0;
    uint64_t v79 = *(void *)v94;
    do
    {
      unint64_t v80 = 0;
      char v81 = v77;
      do
      {
        if (*(void *)v94 != v79) {
          objc_enumerationMutation(&off_10024E8C0);
        }
        unsigned int v82 = [a1[5] containsObject:*(void *)(*((void *)&v93 + 1) + 8 * (void)v80)];
        int v83 = 1 << v81;
        if (!v82) {
          LOWORD(v83) = 0;
        }
        v78 |= v83;
        ++v81;
        unint64_t v80 = (char *)v80 + 1;
      }
      while (v76 != v80);
      v77 += (char)v76;
      id v76 = [&off_10024E8C0 countByEnumeratingWithState:&v93 objects:v131 count:16];
    }
    while (v76);
    uint64_t v84 = v78;
    uint64_t v74 = v86;
  }
  else
  {
    uint64_t v84 = 0;
  }
  if (objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "activeCoexFeatures"), "containsObject:", @"WiFiEnhCoexSupport"))
  {
    v129[0] = @"MWSType72GBITMAPWiFiEnh";
    v130[0] = +[NSNumber numberWithInt:v5];
    v129[1] = @"MWSType75GBITMAPLOWWiFiEnh";
    v130[1] = +[NSNumber numberWithInt:v92];
    v129[2] = @"MWSType75GBITMAPMIDWiFiEnh";
    v130[2] = +[NSNumber numberWithInt:v91];
    v129[3] = @"MWSType75GBITMAPHIWiFiEnh";
    v130[3] = +[NSNumber numberWithInt:v90];
    v129[4] = @"MWSType7U5LowBITMAPWiFiEnh";
    v130[4] = +[NSNumber numberWithInt:v89];
    v129[5] = @"MWSType7U5HighBITMAPWiFiEnh";
    v130[5] = +[NSNumber numberWithInt:v88];
    v129[6] = @"MWSType7U6BITMAPWiFiEnh";
    v130[6] = +[NSNumber numberWithInt:v87];
    v129[7] = @"MWSType7U7BITMAPWiFiEnh";
    v130[7] = +[NSNumber numberWithInt:v74];
    v129[8] = @"MWSType7U8BITMAPWiFiEnh";
    v130[8] = +[NSNumber numberWithInt:v84];
    unint64_t v85 = +[NSDictionary dictionaryWithObjects:v130 forKeys:v129 count:9];
    +[WCM_Logging logLevel:4, @"WiFiType7_WiFiEnh IOVAR: setting mwsWiFiType7BitmapWiFiEnh %@", v85 message];
    [a1[6] sendMessage:@"MWSType7BITMAPWiFiEnh" withValue:v85];
  }
}

void sub_1000E2C74(uint64_t a1)
{
  +[WCM_Logging logLevel:3, @"WiFiS: setting OCL disabled channels %@", *(void *)(a1 + 32) message];
  id v2 = +[NSMutableArray array];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v3 = *(void **)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v9 objects:v17 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v9 + 1) + 8 * i);
        CFStringRef v15 = @"MWS_Channel_Number";
        uint64_t v16 = v8;
        [v2 addObject:+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v16, &v15, 1)];
      }
      id v5 = [v3 countByEnumeratingWithState:&v9 objects:v17 count:16];
    }
    while (v5);
  }
  CFStringRef v13 = @"MWS_OCL_DISABLE_CHANNELS";
  id v14 = v2;
  [*(id *)(a1 + 40) sendMessage:@"MWS_OCL_PARAMS" withValue:[+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v14, &v13, 1)]];
}

void sub_1000E2EA0(id *a1)
{
  +[WCM_Logging logLevel:4, @"OCL_WiFiEnh WiFiS: setting OCL_WiFiEnh 2G5G part channels %@, Enh part channels %@", a1[4], a1[5] message];
  long long v127 = 0u;
  long long v128 = 0u;
  long long v125 = 0u;
  long long v126 = 0u;
  id v2 = [&off_10024E8D8 countByEnumeratingWithState:&v125 objects:v139 count:16];
  if (v2)
  {
    id v3 = v2;
    char v4 = 0;
    unsigned __int16 v5 = 0;
    uint64_t v6 = *(void *)v126;
    do
    {
      id v7 = 0;
      char v8 = v4;
      do
      {
        if (*(void *)v126 != v6) {
          objc_enumerationMutation(&off_10024E8D8);
        }
        unsigned int v9 = [a1[4] containsObject:*(void *)(*((void *)&v125 + 1) + 8 * (void)v7)];
        int v10 = 1 << v8;
        if (v9) {
          LOWORD(v10) = 0;
        }
        v5 |= v10;
        ++v8;
        id v7 = (char *)v7 + 1;
      }
      while (v3 != v7);
      v4 += (char)v3;
      id v3 = [&off_10024E8D8 countByEnumeratingWithState:&v125 objects:v139 count:16];
    }
    while (v3);
  }
  else
  {
    unsigned __int16 v5 = 0;
  }
  long long v123 = 0u;
  long long v124 = 0u;
  long long v121 = 0u;
  long long v122 = 0u;
  id v11 = [&off_10024E8F0 countByEnumeratingWithState:&v121 objects:v138 count:16];
  if (v11)
  {
    id v12 = v11;
    char v13 = 0;
    unsigned __int16 v14 = 0;
    uint64_t v15 = *(void *)v122;
    do
    {
      uint64_t v16 = 0;
      char v17 = v13;
      do
      {
        if (*(void *)v122 != v15) {
          objc_enumerationMutation(&off_10024E8F0);
        }
        unsigned int v18 = [a1[4] containsObject:*(void *)(*((void *)&v121 + 1) + 8 * (void)v16)];
        int v19 = 1 << v17;
        if (v18) {
          LOWORD(v19) = 0;
        }
        v14 |= v19;
        ++v17;
        uint64_t v16 = (char *)v16 + 1;
      }
      while (v12 != v16);
      v13 += (char)v12;
      id v12 = [&off_10024E8F0 countByEnumeratingWithState:&v121 objects:v138 count:16];
    }
    while (v12);
    unsigned int v92 = v14;
  }
  else
  {
    unsigned int v92 = 0;
  }
  long long v119 = 0u;
  long long v120 = 0u;
  long long v117 = 0u;
  long long v118 = 0u;
  id v20 = [&off_10024E908 countByEnumeratingWithState:&v117 objects:v137 count:16];
  if (v20)
  {
    id v21 = v20;
    char v22 = 0;
    unsigned __int16 v23 = 0;
    uint64_t v24 = *(void *)v118;
    do
    {
      unsigned __int16 v25 = 0;
      char v26 = v22;
      do
      {
        if (*(void *)v118 != v24) {
          objc_enumerationMutation(&off_10024E908);
        }
        unsigned int v27 = [a1[4] containsObject:*(void *)(*((void *)&v117 + 1) + 8 * (void)v25)];
        int v28 = 1 << v26;
        if (v27) {
          LOWORD(v28) = 0;
        }
        v23 |= v28;
        ++v26;
        unsigned __int16 v25 = (char *)v25 + 1;
      }
      while (v21 != v25);
      v22 += (char)v21;
      id v21 = [&off_10024E908 countByEnumeratingWithState:&v117 objects:v137 count:16];
    }
    while (v21);
    unsigned int v91 = v23;
  }
  else
  {
    unsigned int v91 = 0;
  }
  long long v115 = 0u;
  long long v116 = 0u;
  long long v113 = 0u;
  long long v114 = 0u;
  id v29 = [&off_10024E920 countByEnumeratingWithState:&v113 objects:v136 count:16];
  if (v29)
  {
    id v30 = v29;
    char v31 = 0;
    unsigned __int16 v32 = 0;
    uint64_t v33 = *(void *)v114;
    do
    {
      unsigned int v34 = 0;
      char v35 = v31;
      do
      {
        if (*(void *)v114 != v33) {
          objc_enumerationMutation(&off_10024E920);
        }
        unsigned int v36 = [a1[4] containsObject:*(void *)(*((void *)&v113 + 1) + 8 * (void)v34)];
        int v37 = 1 << v35;
        if (v36) {
          LOWORD(v37) = 0;
        }
        v32 |= v37;
        ++v35;
        unsigned int v34 = (char *)v34 + 1;
      }
      while (v30 != v34);
      v31 += (char)v30;
      id v30 = [&off_10024E920 countByEnumeratingWithState:&v113 objects:v136 count:16];
    }
    while (v30);
    unsigned int v90 = v32;
  }
  else
  {
    unsigned int v90 = 0;
  }
  long long v111 = 0u;
  long long v112 = 0u;
  long long v109 = 0u;
  long long v110 = 0u;
  id v38 = [&off_10024E938 countByEnumeratingWithState:&v109 objects:v135 count:16];
  if (v38)
  {
    id v39 = v38;
    char v40 = 0;
    unsigned __int16 v41 = 0;
    uint64_t v42 = *(void *)v110;
    do
    {
      long long v43 = 0;
      char v44 = v40;
      do
      {
        if (*(void *)v110 != v42) {
          objc_enumerationMutation(&off_10024E938);
        }
        unsigned int v45 = [a1[5] containsObject:*(void *)(*((void *)&v109 + 1) + 8 * (void)v43)];
        int v46 = 1 << v44;
        if (v45) {
          LOWORD(v46) = 0;
        }
        v41 |= v46;
        ++v44;
        long long v43 = (char *)v43 + 1;
      }
      while (v39 != v43);
      v40 += (char)v39;
      id v39 = [&off_10024E938 countByEnumeratingWithState:&v109 objects:v135 count:16];
    }
    while (v39);
    unsigned int v89 = v41;
  }
  else
  {
    unsigned int v89 = 0;
  }
  long long v107 = 0u;
  long long v108 = 0u;
  long long v105 = 0u;
  long long v106 = 0u;
  id v47 = [&off_10024E950 countByEnumeratingWithState:&v105 objects:v134 count:16];
  if (v47)
  {
    id v48 = v47;
    char v49 = 0;
    unsigned __int16 v50 = 0;
    uint64_t v51 = *(void *)v106;
    do
    {
      long long v52 = 0;
      char v53 = v49;
      do
      {
        if (*(void *)v106 != v51) {
          objc_enumerationMutation(&off_10024E950);
        }
        unsigned int v54 = [a1[5] containsObject:*(void *)(*((void *)&v105 + 1) + 8 * (void)v52)];
        int v55 = 1 << v53;
        if (v54) {
          LOWORD(v55) = 0;
        }
        v50 |= v55;
        ++v53;
        long long v52 = (char *)v52 + 1;
      }
      while (v48 != v52);
      v49 += (char)v48;
      id v48 = [&off_10024E950 countByEnumeratingWithState:&v105 objects:v134 count:16];
    }
    while (v48);
    unsigned int v88 = v50;
  }
  else
  {
    unsigned int v88 = 0;
  }
  long long v103 = 0u;
  long long v104 = 0u;
  long long v101 = 0u;
  long long v102 = 0u;
  id v56 = [&off_10024E968 countByEnumeratingWithState:&v101 objects:v133 count:16];
  if (v56)
  {
    id v57 = v56;
    char v58 = 0;
    unsigned __int16 v59 = 0;
    uint64_t v60 = *(void *)v102;
    do
    {
      uint64_t v61 = 0;
      char v62 = v58;
      do
      {
        if (*(void *)v102 != v60) {
          objc_enumerationMutation(&off_10024E968);
        }
        unsigned int v63 = [a1[5] containsObject:*(void *)(*((void *)&v101 + 1) + 8 * (void)v61)];
        int v64 = 1 << v62;
        if (v63) {
          LOWORD(v64) = 0;
        }
        v59 |= v64;
        ++v62;
        uint64_t v61 = (char *)v61 + 1;
      }
      while (v57 != v61);
      v58 += (char)v57;
      id v57 = [&off_10024E968 countByEnumeratingWithState:&v101 objects:v133 count:16];
    }
    while (v57);
    unsigned int v87 = v59;
  }
  else
  {
    unsigned int v87 = 0;
  }
  long long v99 = 0u;
  long long v100 = 0u;
  long long v97 = 0u;
  long long v98 = 0u;
  id v65 = [&off_10024E980 countByEnumeratingWithState:&v97 objects:v132 count:16];
  if (v65)
  {
    id v66 = v65;
    char v67 = 0;
    unsigned __int16 v68 = 0;
    uint64_t v69 = *(void *)v98;
    do
    {
      uint64_t v70 = 0;
      char v71 = v67;
      do
      {
        if (*(void *)v98 != v69) {
          objc_enumerationMutation(&off_10024E980);
        }
        unsigned int v72 = [a1[5] containsObject:*(void *)(*((void *)&v97 + 1) + 8 * (void)v70)];
        int v73 = 1 << v71;
        if (v72) {
          LOWORD(v73) = 0;
        }
        v68 |= v73;
        ++v71;
        uint64_t v70 = (char *)v70 + 1;
      }
      while (v66 != v70);
      v67 += (char)v66;
      id v66 = [&off_10024E980 countByEnumeratingWithState:&v97 objects:v132 count:16];
    }
    while (v66);
    uint64_t v74 = v68;
  }
  else
  {
    uint64_t v74 = 0;
  }
  long long v95 = 0u;
  long long v96 = 0u;
  long long v93 = 0u;
  long long v94 = 0u;
  id v75 = [&off_10024E998 countByEnumeratingWithState:&v93 objects:v131 count:16];
  if (v75)
  {
    id v76 = v75;
    unsigned int v86 = v74;
    char v77 = 0;
    unsigned __int16 v78 = 0;
    uint64_t v79 = *(void *)v94;
    do
    {
      unint64_t v80 = 0;
      char v81 = v77;
      do
      {
        if (*(void *)v94 != v79) {
          objc_enumerationMutation(&off_10024E998);
        }
        unsigned int v82 = [a1[5] containsObject:*(void *)(*((void *)&v93 + 1) + 8 * (void)v80)];
        int v83 = 1 << v81;
        if (v82) {
          LOWORD(v83) = 0;
        }
        v78 |= v83;
        ++v81;
        unint64_t v80 = (char *)v80 + 1;
      }
      while (v76 != v80);
      v77 += (char)v76;
      id v76 = [&off_10024E998 countByEnumeratingWithState:&v93 objects:v131 count:16];
    }
    while (v76);
    uint64_t v84 = v78;
    uint64_t v74 = v86;
  }
  else
  {
    uint64_t v84 = 0;
  }
  if (objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "activeCoexFeatures"), "containsObject:", @"WiFiEnhCoexSupport"))
  {
    v129[0] = @"MWSOCL2GBITMAPWiFiEnh";
    v130[0] = +[NSNumber numberWithInt:v5];
    v129[1] = @"MWSOCL5GBITMAPLOWWiFiEnh";
    v130[1] = +[NSNumber numberWithInt:v92];
    v129[2] = @"MWSOCL5GBITMAPMIDWiFiEnh";
    v130[2] = +[NSNumber numberWithInt:v91];
    v129[3] = @"MWSOCL5GBITMAPHIWiFiEnh";
    v130[3] = +[NSNumber numberWithInt:v90];
    v129[4] = @"MWSOCLU5LowBITMAPWiFiEnh";
    v130[4] = +[NSNumber numberWithInt:v89];
    v129[5] = @"MWSOCLU5HighBITMAPWiFiEnh";
    v130[5] = +[NSNumber numberWithInt:v88];
    v129[6] = @"MWSOCLU6BITMAPWiFiEnh";
    v130[6] = +[NSNumber numberWithInt:v87];
    v129[7] = @"MWSOCLU7BITMAPWiFiEnh";
    v130[7] = +[NSNumber numberWithInt:v74];
    v129[8] = @"MWSOCLU8BITMAPWiFiEnh";
    v130[8] = +[NSNumber numberWithInt:v84];
    unint64_t v85 = +[NSDictionary dictionaryWithObjects:v130 forKeys:v129 count:9];
    +[WCM_Logging logLevel:4, @"OCL_WiFiEnh_IOVAR: setting mwsDisableOCLBitmapWiFiEnh %@", v85 message];
    [a1[6] sendMessage:@"MWSOCLBITMAPWiFiEnh" withValue:v85];
  }
}

void sub_1000E3838(uint64_t a1)
{
  +[WCM_Logging logLevel:3, @"WiFiS: setting rxPriThreshold %@", *(void *)(a1 + 32) message];
  [*(id *)(a1 + 40) sendMessage:@"MWS_WLAN_RX_PRI_THRESHOLD" withValue:*(void *)(a1 + 32)];
  id v2 = *(void **)(a1 + 32);
}

void sub_1000E392C(uint64_t a1)
{
  +[WCM_Logging logLevel:3, @"WiFiS: setting WiFi MWS Channel Parameters %@", *(void *)(a1 + 32) message];
  [*(id *)(a1 + 40) sendMessage:@"MWS_Aggressor_ChannelParameters" withValue:*(void *)(a1 + 32)];
  id v2 = *(void **)(a1 + 32);
}

void sub_1000E3A20(uint64_t a1)
{
  if (objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "platformManager"), "wcmWiFiSupportFrameConfig"))
  {
    +[WCM_Logging logLevel:3, @"WiFiS: setting WiFi MWS Frame Config %@", *(void *)(a1 + 32) message];
    [*(id *)(a1 + 40) sendMessage:@"MWS_Aggressor_FrameConfig" withValue:*(void *)(a1 + 32)];
  }
  id v2 = *(void **)(a1 + 32);
}

void sub_1000E3B2C(uint64_t a1)
{
  if (objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "platformManager"), "wcmWiFiSupportWciSignalingConfig"))
  {
    +[WCM_Logging logLevel:3, @"WiFiS: setting WiFi MWS Signaling Config %@", *(void *)(a1 + 32) message];
    [*(id *)(a1 + 40) sendMessage:@"MWS_WCI_Signaling_Config" withValue:*(void *)(a1 + 32)];
  }
  id v2 = *(void **)(a1 + 32);
}

void sub_1000E3C38(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, @"WiFiS: setting WiFi Rx Antenna Preference 0x%X", [*(id *)(a1 + 32) intValue]);
  [*(id *)(a1 + 40) sendMessage:@"MWS_SWDIV_RX_POLICY" withValue:*(void *)(a1 + 32)];
  id v2 = *(void **)(a1 + 32);
}

void sub_1000E3D34(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, @"WiFiS: setting WiFi Tx Antenna Preference 0x%X", [*(id *)(a1 + 32) intValue]);
  [*(id *)(a1 + 40) sendMessage:@"MWS_SWDIV_TX_POLICY" withValue:*(void *)(a1 + 32)];
  id v2 = *(void **)(a1 + 32);
}

void sub_1000E3E30(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, @"WiFiS: setting WiFi Antenna Cell Policy 0x%X", [*(id *)(a1 + 32) intValue]);
  [*(id *)(a1 + 40) sendMessage:@"MWS_SWDIV_CELL_POLICY" withValue:*(void *)(a1 + 32)];
  id v2 = *(void **)(a1 + 32);
}

void sub_1000E3F2C(uint64_t a1)
{
  +[WCM_Logging logLevel:3, @"WiFiS: setting WiFi Antenna Selection %@", *(void *)(a1 + 32) message];
  [*(id *)(a1 + 40) sendMessage:@"MWS_ANTENNA_SELECTION" withValue:*(void *)(a1 + 32)];
  id v2 = *(void **)(a1 + 32);
}

void sub_1000E4020(uint64_t a1)
{
  +[WCM_Logging logLevel:1, @"WiFiS: setting WiFi V2 Antenna Selection %@", *(void *)(a1 + 32) message];
  [*(id *)(a1 + 40) sendMessage:@"MWS_ANTENNA_SELECTION_V2" withValue:*(void *)(a1 + 32)];
  id v2 = *(void **)(a1 + 32);
}

void sub_1000E4114(uint64_t a1)
{
  +[WCM_Logging logLevel:1, @"WiFiEnh: setting WiFi Enh Antenna Selection %@", *(void *)(a1 + 32) message];
  if ([WCM_PolicyManager singleton].activeCoexFeatures.containsObject(@"WiFiEnhCoexSupport"))[*(id *)(a1 + 40) sendMessage:@"MWS_ANTENNA_SELECTION_Enh" withValue:*(void *)(a1 + 32)]; {
  id v2 = *(void **)(a1 + 32);
  }
}

void sub_1000E423C(id *a1)
{
  +[WCM_Logging logLevel:3 message:@"WiFiS: setting WiFi Scan Freq Protection Channels"];
  long long v113 = 0u;
  long long v114 = 0u;
  long long v111 = 0u;
  long long v112 = 0u;
  id obj = a1[4];
  unsigned __int16 v78 = a1;
  id v74 = [obj countByEnumeratingWithState:&v111 objects:v130 count:16];
  if (v74)
  {
    uint64_t v77 = 0;
    int v76 = 0;
    unsigned __int16 v2 = 0;
    unsigned __int16 v3 = 0;
    unsigned __int16 v4 = 0;
    id v5 = *(id *)v112;
    uint64_t v6 = 1;
    id v70 = *(id *)v112;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(id *)v112 != v5) {
          objc_enumerationMutation(obj);
        }
        uint64_t v79 = v7;
        char v8 = *(void **)(*((void *)&v111 + 1) + 8 * v7);
        v128[0] = @"MWS_SCAN_FREQ_INDEX";
        unsigned int v9 = +[NSNumber numberWithInt:v6];
        v128[1] = @"MWS_SCAN_FREQ_CHANNELS";
        v129[0] = v9;
        v129[1] = v8;
        uint64_t v10 = v6;
        id v11 = +[NSDictionary dictionaryWithObjects:v129 forKeys:v128 count:2];
        +[WCM_Logging logLevel:1, @"WiFiS: setting MWS_SCAN_FREQ Protection: %@", v11 message];
        [a1[5] sendMessage:@"MWS_SCAN_FREQ" withValue:v11];
        unsigned int v81 = v10;
        if (objc_msgSend(a1[6], "containsObject:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v10)))
        {
          long long v109 = 0u;
          long long v110 = 0u;
          long long v107 = 0u;
          long long v108 = 0u;
          id v12 = [&off_10024E9B0 countByEnumeratingWithState:&v107 objects:v127 count:16];
          if (v12)
          {
            id v13 = v12;
            uint64_t v14 = *(void *)v108;
            int v15 = v76;
            do
            {
              uint64_t v16 = 0;
              int v17 = v15;
              do
              {
                if (*(void *)v108 != v14) {
                  objc_enumerationMutation(&off_10024E9B0);
                }
                unsigned int v18 = [v8 containsObject:*(void *)(*((void *)&v107 + 1) + 8 * (void)v16)];
                int v19 = 1 << v15;
                if (!v18) {
                  LOWORD(v19) = 0;
                }
                v4 |= v19;
                LOBYTE(v15) = v15 + 1;
                uint64_t v16 = (char *)v16 + 1;
              }
              while (v13 != v16);
              int v15 = v17 + v13;
              id v13 = [&off_10024E9B0 countByEnumeratingWithState:&v107 objects:v127 count:16];
            }
            while (v13);
          }
          else
          {
            int v15 = v76;
          }
          int v76 = v15;
          long long v105 = 0u;
          long long v106 = 0u;
          long long v103 = 0u;
          long long v104 = 0u;
          id v21 = [&off_10024E9C8 countByEnumeratingWithState:&v103 objects:v126 count:16];
          if (v21)
          {
            id v22 = v21;
            uint64_t v23 = *(void *)v104;
            int v24 = v77;
            do
            {
              unsigned __int16 v25 = 0;
              char v26 = v24;
              do
              {
                if (*(void *)v104 != v23) {
                  objc_enumerationMutation(&off_10024E9C8);
                }
                unsigned int v27 = [v8 containsObject:*(void *)(*((void *)&v103 + 1) + 8 * (void)v25)];
                int v28 = 1 << v26;
                if (!v27) {
                  LOWORD(v28) = 0;
                }
                v3 |= v28;
                ++v26;
                unsigned __int16 v25 = (char *)v25 + 1;
              }
              while (v22 != v25);
              v24 += (int)v22;
              id v22 = [&off_10024E9C8 countByEnumeratingWithState:&v103 objects:v126 count:16];
            }
            while (v22);
          }
          else
          {
            int v24 = v77;
          }
          LODWORD(v77) = v24;
          long long v101 = 0u;
          long long v102 = 0u;
          long long v99 = 0u;
          long long v100 = 0u;
          id v29 = [&off_10024E9E0 countByEnumeratingWithState:&v99 objects:v125 count:16];
          if (v29)
          {
            id v30 = v29;
            uint64_t v31 = *(void *)v100;
            int v32 = HIDWORD(v77);
            do
            {
              uint64_t v33 = 0;
              int v34 = v32;
              do
              {
                if (*(void *)v100 != v31) {
                  objc_enumerationMutation(&off_10024E9E0);
                }
                unsigned int v35 = [v8 containsObject:*(void *)(*((void *)&v99 + 1) + 8 * (void)v33)];
                int v36 = 1 << v32;
                if (!v35) {
                  LOWORD(v36) = 0;
                }
                v2 |= v36;
                LOBYTE(v32) = v32 + 1;
                uint64_t v33 = (char *)v33 + 1;
              }
              while (v30 != v33);
              int v32 = v34 + v30;
              id v30 = [&off_10024E9E0 countByEnumeratingWithState:&v99 objects:v125 count:16];
            }
            while (v30);
          }
          else
          {
            int v32 = HIDWORD(v77);
          }
          HIDWORD(v77) = v32;
          v123[0] = @"MWS_SCAN_FREQ_INDEX_Enh";
          int v20 = v81;
          v124[0] = +[NSNumber numberWithInt:v81];
          v123[1] = @"MWSType4Blanking5GBITMAPLOWWiFiEnh";
          v124[1] = +[NSNumber numberWithInt:v4];
          v123[2] = @"MWSType4Blanking5GBITMAPMIDWiFiEnh";
          v124[2] = +[NSNumber numberWithInt:v3];
          v123[3] = @"MWSType4Blanking5GBITMAPHIWiFiEnh";
          v124[3] = +[NSNumber numberWithInt:v2];
          int v37 = +[NSDictionary dictionaryWithObjects:v124 forKeys:v123 count:4];
          +[WCM_Logging logLevel:1, @"WiFiS: setting MWS_SCAN_FREQ_MODE Protection for SUB0: %@", v37 message];
          a1 = v78;
          [v78[5] sendMessage:@"MWS_SCAN_FREQ_MODE_Enh" withValue:v37];
          id v5 = v70;
        }
        else
        {
          int v20 = v10;
        }
        uint64_t v6 = (v20 + 1);
        uint64_t v7 = v79 + 1;
      }
      while ((id)(v79 + 1) != v74);
      id v74 = [obj countByEnumeratingWithState:&v111 objects:v130 count:16];
    }
    while (v74);
  }
  else
  {
    uint64_t v77 = 0;
    int v76 = 0;
    unsigned __int16 v2 = 0;
    unsigned __int16 v3 = 0;
    unsigned __int16 v4 = 0;
  }
  if (objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "activeCoexFeatures"), "containsObject:", @"LTEDualSubCoexSupport"))
  {
    long long v97 = 0u;
    long long v98 = 0u;
    long long v95 = 0u;
    long long v96 = 0u;
    id v71 = a1[4];
    id v38 = [v71 countByEnumeratingWithState:&v95 objects:v122 count:16];
    if (v38)
    {
      uint64_t v39 = 17;
      uint64_t v80 = *(void *)v96;
      do
      {
        id v40 = 0;
        id v82 = v38;
        do
        {
          if (*(void *)v96 != v80) {
            objc_enumerationMutation(v71);
          }
          unsigned __int16 v41 = *(void **)(*((void *)&v95 + 1) + 8 * (void)v40);
          v120[0] = @"MWS_SCAN_FREQ_INDEX";
          uint64_t v42 = +[NSNumber numberWithInt:v39];
          v120[1] = @"MWS_SCAN_FREQ_CHANNELS";
          v121[0] = v42;
          v121[1] = v41;
          long long v43 = +[NSDictionary dictionaryWithObjects:v121 forKeys:v120 count:2];
          +[WCM_Logging logLevel:1, @"WiFiS: setting MWS_SCAN_FREQ Protection for SUB1: %@", v43 message];
          [v78[5] sendMessage:@"MWS_SCAN_FREQ" withValue:v43];
          if (objc_msgSend(v78[6], "containsObject:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (v39 - 16))))
          {
            id obja = v40;
            unsigned int v75 = v39;
            long long v93 = 0u;
            long long v94 = 0u;
            long long v91 = 0u;
            long long v92 = 0u;
            id v44 = [&off_10024E9F8 countByEnumeratingWithState:&v91 objects:v119 count:16];
            if (v44)
            {
              id v45 = v44;
              uint64_t v46 = *(void *)v92;
              int v47 = v76;
              do
              {
                id v48 = 0;
                int v49 = v47;
                do
                {
                  if (*(void *)v92 != v46) {
                    objc_enumerationMutation(&off_10024E9F8);
                  }
                  unsigned int v50 = [v41 containsObject:*(void *)(*((void *)&v91 + 1) + 8 * (void)v48)];
                  int v51 = 1 << v47;
                  if (!v50) {
                    LOWORD(v51) = 0;
                  }
                  v4 |= v51;
                  LOBYTE(v47) = v47 + 1;
                  id v48 = (char *)v48 + 1;
                }
                while (v45 != v48);
                int v47 = v49 + v45;
                id v45 = [&off_10024E9F8 countByEnumeratingWithState:&v91 objects:v119 count:16];
              }
              while (v45);
            }
            else
            {
              int v47 = v76;
            }
            int v76 = v47;
            long long v89 = 0u;
            long long v90 = 0u;
            long long v87 = 0u;
            long long v88 = 0u;
            id v53 = [&off_10024EA10 countByEnumeratingWithState:&v87 objects:v118 count:16];
            if (v53)
            {
              id v54 = v53;
              uint64_t v55 = *(void *)v88;
              int v56 = v77;
              do
              {
                id v57 = 0;
                int v58 = v56;
                do
                {
                  if (*(void *)v88 != v55) {
                    objc_enumerationMutation(&off_10024EA10);
                  }
                  unsigned int v59 = [v41 containsObject:*(void *)(*((void *)&v87 + 1) + 8 * (void)v57)];
                  int v60 = 1 << v56;
                  if (!v59) {
                    LOWORD(v60) = 0;
                  }
                  v3 |= v60;
                  LOBYTE(v56) = v56 + 1;
                  id v57 = (char *)v57 + 1;
                }
                while (v54 != v57);
                int v56 = v58 + v54;
                id v54 = [&off_10024EA10 countByEnumeratingWithState:&v87 objects:v118 count:16];
              }
              while (v54);
            }
            else
            {
              int v56 = v77;
            }
            LODWORD(v77) = v56;
            long long v85 = 0u;
            long long v86 = 0u;
            long long v83 = 0u;
            long long v84 = 0u;
            id v61 = [&off_10024EA28 countByEnumeratingWithState:&v83 objects:v117 count:16];
            if (v61)
            {
              id v62 = v61;
              uint64_t v63 = *(void *)v84;
              int v64 = HIDWORD(v77);
              do
              {
                id v65 = 0;
                int v66 = v64;
                do
                {
                  if (*(void *)v84 != v63) {
                    objc_enumerationMutation(&off_10024EA28);
                  }
                  unsigned int v67 = [v41 containsObject:*(void *)(*((void *)&v83 + 1) + 8 * (void)v65)];
                  int v68 = 1 << v64;
                  if (!v67) {
                    LOWORD(v68) = 0;
                  }
                  v2 |= v68;
                  LOBYTE(v64) = v64 + 1;
                  id v65 = (char *)v65 + 1;
                }
                while (v62 != v65);
                int v64 = v66 + v62;
                id v62 = [&off_10024EA28 countByEnumeratingWithState:&v83 objects:v117 count:16];
              }
              while (v62);
            }
            else
            {
              int v64 = HIDWORD(v77);
            }
            HIDWORD(v77) = v64;
            v115[0] = @"MWS_SCAN_FREQ_INDEX_Enh";
            LODWORD(v39) = v75;
            v116[0] = +[NSNumber numberWithInt:v75];
            v115[1] = @"MWSType4Blanking5GBITMAPLOWWiFiEnh";
            v116[1] = +[NSNumber numberWithInt:v4];
            v115[2] = @"MWSType4Blanking5GBITMAPMIDWiFiEnh";
            v116[2] = +[NSNumber numberWithInt:v3];
            v115[3] = @"MWSType4Blanking5GBITMAPHIWiFiEnh";
            v116[3] = +[NSNumber numberWithInt:v2];
            uint64_t v69 = +[NSDictionary dictionaryWithObjects:v116 forKeys:v115 count:4];
            +[WCM_Logging logLevel:1, @"WiFiS: setting MWS_SCAN_FREQ_MODE Protection for SUB1: %@", v69 message];
            a1 = v78;
            [v78[5] sendMessage:@"MWS_SCAN_FREQ_MODE_Enh" withValue:v69];
            id v52 = v82;
            id v40 = obja;
          }
          else
          {
            id v52 = v82;
            a1 = v78;
          }
          uint64_t v39 = (v39 + 1);
          id v40 = (char *)v40 + 1;
        }
        while (v40 != v52);
        id v38 = [v71 countByEnumeratingWithState:&v95 objects:v122 count:16];
      }
      while (v38);
    }
  }
}

void sub_1000E4C6C(id *a1)
{
  +[WCM_Logging logLevel:3 message:@"WiFiEnh: setting WiFi Channels for Cellular Scan Freq Protection."];
  id v2 = a1[4];
  v167 = a1;
  if (v2 && a1[5])
  {
    int v3 = [v2 count];
    unsigned int v4 = v3;
    if (v3 < 1)
    {
      int v84 = 0;
    }
    else
    {
      uint64_t v5 = 0;
      int v164 = v3;
      uint64_t v165 = v3;
      uint64_t v6 = 1;
      do
      {
        id v7 = [a1[4] objectAtIndexedSubscript:v5];
        id v190 = [a1[5] objectAtIndexedSubscript:v5];
        unsigned int v170 = v6;
        unsigned int v188 = [a1[6] containsObject:+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v6)];
        long long v260 = 0u;
        long long v261 = 0u;
        long long v262 = 0u;
        long long v263 = 0u;
        id v8 = [&off_10024EA40 countByEnumeratingWithState:&v260 objects:v289 count:16];
        if (v8)
        {
          id v9 = v8;
          char v10 = 0;
          unsigned __int16 v11 = 0;
          uint64_t v12 = *(void *)v261;
          do
          {
            id v13 = 0;
            char v14 = v10;
            do
            {
              if (*(void *)v261 != v12) {
                objc_enumerationMutation(&off_10024EA40);
              }
              unsigned int v15 = [v7 containsObject:*(void *)(*((void *)&v260 + 1) + 8 * (void)v13)];
              int v16 = 1 << v14;
              if (!v15) {
                LOWORD(v16) = 0;
              }
              v11 |= v16;
              ++v14;
              id v13 = (char *)v13 + 1;
            }
            while (v9 != v13);
            v10 += (char)v9;
            id v9 = [&off_10024EA40 countByEnumeratingWithState:&v260 objects:v289 count:16];
          }
          while (v9);
        }
        else
        {
          unsigned __int16 v11 = 0;
        }
        long long v259 = 0u;
        long long v258 = 0u;
        long long v257 = 0u;
        long long v256 = 0u;
        id v17 = [&off_10024EA58 countByEnumeratingWithState:&v256 objects:v288 count:16];
        if (v17)
        {
          id v18 = v17;
          unsigned __int16 v180 = 0;
          char v19 = 0;
          int v186 = 0;
          uint64_t v20 = *(void *)v257;
          do
          {
            id v21 = 0;
            char v22 = v19;
            do
            {
              if (*(void *)v257 != v20) {
                objc_enumerationMutation(&off_10024EA58);
              }
              if ([v7 containsObject:*(void *)(*((void *)&v256 + 1) + 8 * (void)v21)])
              {
                int v23 = 1 << v22;
                v186 |= 1 << v22;
                if (!v188) {
                  LOWORD(v23) = 0;
                }
                v180 |= v23;
              }
              ++v22;
              id v21 = (char *)v21 + 1;
            }
            while (v18 != v21);
            v19 += (char)v18;
            id v18 = [&off_10024EA58 countByEnumeratingWithState:&v256 objects:v288 count:16];
          }
          while (v18);
        }
        else
        {
          unsigned __int16 v180 = 0;
          LOWORD(v186) = 0;
        }
        long long v255 = 0u;
        long long v254 = 0u;
        long long v253 = 0u;
        long long v252 = 0u;
        id v24 = [&off_10024EA70 countByEnumeratingWithState:&v252 objects:v287 count:16];
        if (v24)
        {
          id v25 = v24;
          unsigned __int16 v178 = 0;
          char v26 = 0;
          int v184 = 0;
          uint64_t v27 = *(void *)v253;
          do
          {
            int v28 = 0;
            char v29 = v26;
            do
            {
              if (*(void *)v253 != v27) {
                objc_enumerationMutation(&off_10024EA70);
              }
              if ([v7 containsObject:*(void *)(*((void *)&v252 + 1) + 8 * (void)v28)])
              {
                int v30 = 1 << v29;
                v184 |= 1 << v29;
                if (!v188) {
                  LOWORD(v30) = 0;
                }
                v178 |= v30;
              }
              ++v29;
              int v28 = (char *)v28 + 1;
            }
            while (v25 != v28);
            v26 += (char)v25;
            id v25 = [&off_10024EA70 countByEnumeratingWithState:&v252 objects:v287 count:16];
          }
          while (v25);
        }
        else
        {
          unsigned __int16 v178 = 0;
          LOWORD(v184) = 0;
        }
        long long v251 = 0u;
        long long v249 = 0u;
        long long v250 = 0u;
        long long v248 = 0u;
        id v31 = [&off_10024EA88 countByEnumeratingWithState:&v248 objects:v286 count:16];
        if (v31)
        {
          id v32 = v31;
          unsigned __int16 v33 = 0;
          char v34 = 0;
          int v182 = 0;
          uint64_t v35 = *(void *)v249;
          do
          {
            int v36 = 0;
            char v37 = v34;
            do
            {
              if (*(void *)v249 != v35) {
                objc_enumerationMutation(&off_10024EA88);
              }
              if ([v7 containsObject:*(void *)(*((void *)&v248 + 1) + 8 * (void)v36)])
              {
                int v38 = 1 << v37;
                v182 |= 1 << v37;
                if (!v188) {
                  LOWORD(v38) = 0;
                }
                v33 |= v38;
              }
              ++v37;
              int v36 = (char *)v36 + 1;
            }
            while (v32 != v36);
            v34 += (char)v32;
            id v32 = [&off_10024EA88 countByEnumeratingWithState:&v248 objects:v286 count:16];
          }
          while (v32);
        }
        else
        {
          unsigned __int16 v33 = 0;
          LOWORD(v182) = 0;
        }
        unsigned __int16 v168 = v33;
        long long v246 = 0u;
        long long v247 = 0u;
        long long v244 = 0u;
        long long v245 = 0u;
        id v39 = [&off_10024EAA0 countByEnumeratingWithState:&v244 objects:v285 count:16];
        if (v39)
        {
          id v40 = v39;
          char v41 = 0;
          unsigned __int16 v42 = 0;
          uint64_t v43 = *(void *)v245;
          do
          {
            id v44 = 0;
            char v45 = v41;
            do
            {
              if (*(void *)v245 != v43) {
                objc_enumerationMutation(&off_10024EAA0);
              }
              unsigned int v46 = [v190 containsObject:*(void *)(*((void *)&v244 + 1) + 8 * (void)v44)];
              int v47 = 1 << v45;
              if (!v46) {
                LOWORD(v47) = 0;
              }
              v42 |= v47;
              ++v45;
              id v44 = (char *)v44 + 1;
            }
            while (v40 != v44);
            v41 += (char)v40;
            id v40 = [&off_10024EAA0 countByEnumeratingWithState:&v244 objects:v285 count:16];
          }
          while (v40);
        }
        else
        {
          unsigned __int16 v42 = 0;
        }
        long long v242 = 0u;
        long long v243 = 0u;
        long long v240 = 0u;
        long long v241 = 0u;
        id v48 = [&off_10024EAB8 countByEnumeratingWithState:&v240 objects:v284 count:16];
        if (v48)
        {
          id v49 = v48;
          char v50 = 0;
          unsigned __int16 v51 = 0;
          uint64_t v52 = *(void *)v241;
          do
          {
            id v53 = 0;
            char v54 = v50;
            do
            {
              if (*(void *)v241 != v52) {
                objc_enumerationMutation(&off_10024EAB8);
              }
              unsigned int v55 = [v190 containsObject:*(void *)(*((void *)&v240 + 1) + 8 * (void)v53)];
              int v56 = 1 << v54;
              if (!v55) {
                LOWORD(v56) = 0;
              }
              v51 |= v56;
              ++v54;
              id v53 = (char *)v53 + 1;
            }
            while (v49 != v53);
            v50 += (char)v49;
            id v49 = [&off_10024EAB8 countByEnumeratingWithState:&v240 objects:v284 count:16];
          }
          while (v49);
        }
        else
        {
          unsigned __int16 v51 = 0;
        }
        long long v238 = 0u;
        long long v239 = 0u;
        long long v236 = 0u;
        long long v237 = 0u;
        id v57 = [&off_10024EAD0 countByEnumeratingWithState:&v236 objects:v283 count:16];
        if (v57)
        {
          id v58 = v57;
          char v59 = 0;
          unsigned __int16 v60 = 0;
          uint64_t v61 = *(void *)v237;
          do
          {
            id v62 = 0;
            char v63 = v59;
            do
            {
              if (*(void *)v237 != v61) {
                objc_enumerationMutation(&off_10024EAD0);
              }
              unsigned int v64 = [v190 containsObject:*(void *)(*((void *)&v236 + 1) + 8 * (void)v62)];
              int v65 = 1 << v63;
              if (!v64) {
                LOWORD(v65) = 0;
              }
              v60 |= v65;
              ++v63;
              id v62 = (char *)v62 + 1;
            }
            while (v58 != v62);
            v59 += (char)v58;
            id v58 = [&off_10024EAD0 countByEnumeratingWithState:&v236 objects:v283 count:16];
          }
          while (v58);
        }
        else
        {
          unsigned __int16 v60 = 0;
        }
        long long v234 = 0u;
        long long v235 = 0u;
        long long v232 = 0u;
        long long v233 = 0u;
        id v66 = [&off_10024EAE8 countByEnumeratingWithState:&v232 objects:v282 count:16];
        uint64_t v172 = v5;
        if (v66)
        {
          id v67 = v66;
          int v68 = 0;
          unsigned __int16 v69 = 0;
          uint64_t v70 = *(void *)v233;
          do
          {
            id v71 = 0;
            int v175 = v68;
            do
            {
              if (*(void *)v233 != v70) {
                objc_enumerationMutation(&off_10024EAE8);
              }
              unsigned int v72 = [v190 containsObject:*(void *)(*((void *)&v232 + 1) + 8 * (void)v71)];
              int v73 = 1 << v68;
              if (!v72) {
                LOWORD(v73) = 0;
              }
              v69 |= v73;
              LOBYTE(v68) = v68 + 1;
              id v71 = (char *)v71 + 1;
            }
            while (v67 != v71);
            int v68 = v175 + v67;
            id v67 = [&off_10024EAE8 countByEnumeratingWithState:&v232 objects:v282 count:16];
          }
          while (v67);
        }
        else
        {
          unsigned __int16 v69 = 0;
        }
        long long v230 = 0u;
        long long v231 = 0u;
        long long v228 = 0u;
        long long v229 = 0u;
        id v74 = [&off_10024EB00 countByEnumeratingWithState:&v228 objects:v281 count:16];
        if (v74)
        {
          id v75 = v74;
          int v76 = 0;
          unsigned __int16 v77 = 0;
          uint64_t v78 = *(void *)v229;
          do
          {
            uint64_t v79 = 0;
            int v176 = v76;
            do
            {
              if (*(void *)v229 != v78) {
                objc_enumerationMutation(&off_10024EB00);
              }
              unsigned int v80 = [v190 containsObject:*(void *)(*((void *)&v228 + 1) + 8 * (void)v79)];
              int v81 = 1 << v76;
              if (!v80) {
                LOWORD(v81) = 0;
              }
              v77 |= v81;
              LOBYTE(v76) = v76 + 1;
              uint64_t v79 = (char *)v79 + 1;
            }
            while (v75 != v79);
            int v76 = v176 + v75;
            id v75 = [&off_10024EB00 countByEnumeratingWithState:&v228 objects:v281 count:16];
          }
          while (v75);
        }
        else
        {
          unsigned __int16 v77 = 0;
        }
        v279[0] = @"MWS_SCAN_FREQ_INDEX_Enh";
        v280[0] = +[NSNumber numberWithInt:v170];
        v279[1] = @"MWSType4Blanking2GBITMAPWiFiEnh";
        v280[1] = +[NSNumber numberWithInt:v11];
        v279[2] = @"MWSType4Blanking5GBITMAPLOWWiFiEnh";
        v280[2] = +[NSNumber numberWithInt:(unsigned __int16)v186];
        v279[3] = @"MWSType4Blanking5GBITMAPMIDWiFiEnh";
        v280[3] = +[NSNumber numberWithInt:(unsigned __int16)v184];
        v279[4] = @"MWSType4Blanking5GBITMAPHIWiFiEnh";
        v280[4] = +[NSNumber numberWithInt:(unsigned __int16)v182];
        v279[5] = @"MWSType4BlankingU5LowBITMAPWiFiEnh";
        v280[5] = +[NSNumber numberWithInt:v42];
        v279[6] = @"MWSType4BlankingU5HighBITMAPWiFiEnh";
        v280[6] = +[NSNumber numberWithInt:v51];
        v279[7] = @"MWSType4BlankingU6BITMAPWiFiEnh";
        v280[7] = +[NSNumber numberWithInt:v60];
        v279[8] = @"MWSType4BlankingU7BITMAPWiFiEnh";
        v280[8] = +[NSNumber numberWithInt:v69];
        v279[9] = @"MWSType4BlankingU8BITMAPWiFiEnh";
        v280[9] = +[NSNumber numberWithInt:v77];
        id v82 = +[NSDictionary dictionaryWithObjects:v280 forKeys:v279 count:10];
        +[WCM_Logging logLevel:2, @"Type4Blanking_WiFiEnh_IOVAR: setting mwsType4BlankingBitmapWiFiEnh %@", v82 message];
        a1 = v167;
        [v167[7] sendMessage:@"MWS_SCAN_FREQ_Enh" withValue:v82];
        if (v188)
        {
          v277[0] = @"MWS_SCAN_FREQ_INDEX_Enh";
          v278[0] = +[NSNumber numberWithInt:v170];
          v277[1] = @"MWSType4Blanking5GBITMAPLOWWiFiEnh";
          v278[1] = +[NSNumber numberWithInt:v180];
          v277[2] = @"MWSType4Blanking5GBITMAPMIDWiFiEnh";
          v278[2] = +[NSNumber numberWithInt:v178];
          v277[3] = @"MWSType4Blanking5GBITMAPHIWiFiEnh";
          v278[3] = +[NSNumber numberWithInt:v168];
          long long v83 = +[NSDictionary dictionaryWithObjects:v278 forKeys:v277 count:4];
          +[WCM_Logging logLevel:2, @"Type4Blanking_Mode_WiFiEnh_IOVAR for SUB0: setting mwsType4BlankingBitmapWiFiEnhConfig %@", v83 message];
          [v167[7] sendMessage:@"MWS_SCAN_FREQ_MODE_Enh" withValue:v83];
        }
        uint64_t v6 = v170 + 1;
        uint64_t v5 = v172 + 1;
      }
      while (v172 + 1 != v165);
      int v84 = 1;
      unsigned int v4 = v164;
    }
  }
  else
  {
    int v84 = 0;
    unsigned int v4 = 0;
  }
  if ([+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton").activeCoexFeatures containsObject:@"LTEDualSubCoexSupport"])BOOL v85 = v84 == 0; {
  else
  }
    BOOL v85 = 1;
  if (!v85)
  {
    uint64_t v86 = 0;
    uint64_t v166 = v4;
    int v87 = 17;
    do
    {
      id v88 = [a1[4] objectAtIndexedSubscript:v86];
      id v191 = [a1[5] objectAtIndexedSubscript:v86];
      unsigned int v189 = [a1[6] containsObject:+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (v87 - 16))];
      long long v224 = 0u;
      long long v225 = 0u;
      long long v226 = 0u;
      long long v227 = 0u;
      id v89 = [&off_10024EB18 countByEnumeratingWithState:&v224 objects:v276 count:16];
      if (v89)
      {
        id v90 = v89;
        char v91 = 0;
        unsigned __int16 v92 = 0;
        uint64_t v93 = *(void *)v225;
        do
        {
          long long v94 = 0;
          char v95 = v91;
          do
          {
            if (*(void *)v225 != v93) {
              objc_enumerationMutation(&off_10024EB18);
            }
            unsigned int v96 = [v88 containsObject:*(void *)(*((void *)&v224 + 1) + 8 * (void)v94)];
            int v97 = 1 << v95;
            if (!v96) {
              LOWORD(v97) = 0;
            }
            v92 |= v97;
            ++v95;
            long long v94 = (char *)v94 + 1;
          }
          while (v90 != v94);
          v91 += (char)v90;
          id v90 = [&off_10024EB18 countByEnumeratingWithState:&v224 objects:v276 count:16];
        }
        while (v90);
      }
      else
      {
        unsigned __int16 v92 = 0;
      }
      long long v222 = 0u;
      long long v223 = 0u;
      long long v220 = 0u;
      long long v221 = 0u;
      id v98 = [&off_10024EB30 countByEnumeratingWithState:&v220 objects:v275 count:16];
      if (v98)
      {
        id v99 = v98;
        unsigned __int16 v181 = 0;
        char v100 = 0;
        int v187 = 0;
        uint64_t v101 = *(void *)v221;
        do
        {
          long long v102 = 0;
          char v103 = v100;
          do
          {
            if (*(void *)v221 != v101) {
              objc_enumerationMutation(&off_10024EB30);
            }
            if ([v88 containsObject:*(void *)(*((void *)&v220 + 1) + 8 * (void)v102)])
            {
              int v104 = 1 << v103;
              v187 |= 1 << v103;
              if (!v189) {
                LOWORD(v104) = 0;
              }
              v181 |= v104;
            }
            ++v103;
            long long v102 = (char *)v102 + 1;
          }
          while (v99 != v102);
          v100 += (char)v99;
          id v99 = [&off_10024EB30 countByEnumeratingWithState:&v220 objects:v275 count:16];
        }
        while (v99);
      }
      else
      {
        unsigned __int16 v181 = 0;
        LOWORD(v187) = 0;
      }
      long long v218 = 0u;
      long long v219 = 0u;
      long long v216 = 0u;
      long long v217 = 0u;
      id v105 = [&off_10024EB48 countByEnumeratingWithState:&v216 objects:v274 count:16];
      if (v105)
      {
        id v106 = v105;
        unsigned __int16 v179 = 0;
        char v107 = 0;
        int v185 = 0;
        uint64_t v108 = *(void *)v217;
        do
        {
          long long v109 = 0;
          char v110 = v107;
          do
          {
            if (*(void *)v217 != v108) {
              objc_enumerationMutation(&off_10024EB48);
            }
            if ([v88 containsObject:*(void *)(*((void *)&v216 + 1) + 8 * (void)v109)])
            {
              int v111 = 1 << v110;
              v185 |= 1 << v110;
              if (!v189) {
                LOWORD(v111) = 0;
              }
              v179 |= v111;
            }
            ++v110;
            long long v109 = (char *)v109 + 1;
          }
          while (v106 != v109);
          v107 += (char)v106;
          id v106 = [&off_10024EB48 countByEnumeratingWithState:&v216 objects:v274 count:16];
        }
        while (v106);
      }
      else
      {
        unsigned __int16 v179 = 0;
        LOWORD(v185) = 0;
      }
      long long v214 = 0u;
      long long v215 = 0u;
      long long v212 = 0u;
      long long v213 = 0u;
      id v112 = [&off_10024EB60 countByEnumeratingWithState:&v212 objects:v273 count:16];
      if (v112)
      {
        id v113 = v112;
        unsigned __int16 v177 = 0;
        char v114 = 0;
        int v183 = 0;
        uint64_t v115 = *(void *)v213;
        do
        {
          long long v116 = 0;
          char v117 = v114;
          do
          {
            if (*(void *)v213 != v115) {
              objc_enumerationMutation(&off_10024EB60);
            }
            if ([v88 containsObject:*(void *)(*((void *)&v212 + 1) + 8 * (void)v116)])
            {
              int v118 = 1 << v117;
              v183 |= 1 << v117;
              if (!v189) {
                LOWORD(v118) = 0;
              }
              v177 |= v118;
            }
            ++v117;
            long long v116 = (char *)v116 + 1;
          }
          while (v113 != v116);
          v114 += (char)v113;
          id v113 = [&off_10024EB60 countByEnumeratingWithState:&v212 objects:v273 count:16];
        }
        while (v113);
      }
      else
      {
        unsigned __int16 v177 = 0;
        LOWORD(v183) = 0;
      }
      long long v210 = 0u;
      long long v211 = 0u;
      long long v208 = 0u;
      long long v209 = 0u;
      id v119 = [&off_10024EB78 countByEnumeratingWithState:&v208 objects:v272 count:16];
      if (v119)
      {
        id v120 = v119;
        char v121 = 0;
        unsigned __int16 v122 = 0;
        uint64_t v123 = *(void *)v209;
        do
        {
          long long v124 = 0;
          char v125 = v121;
          do
          {
            if (*(void *)v209 != v123) {
              objc_enumerationMutation(&off_10024EB78);
            }
            unsigned int v126 = [v191 containsObject:*(void *)(*((void *)&v208 + 1) + 8 * (void)v124)];
            int v127 = 1 << v125;
            if (!v126) {
              LOWORD(v127) = 0;
            }
            v122 |= v127;
            ++v125;
            long long v124 = (char *)v124 + 1;
          }
          while (v120 != v124);
          v121 += (char)v120;
          id v120 = [&off_10024EB78 countByEnumeratingWithState:&v208 objects:v272 count:16];
        }
        while (v120);
      }
      else
      {
        unsigned __int16 v122 = 0;
      }
      long long v206 = 0u;
      long long v207 = 0u;
      long long v204 = 0u;
      long long v205 = 0u;
      id v128 = [&off_10024EB90 countByEnumeratingWithState:&v204 objects:v271 count:16];
      if (v128)
      {
        id v129 = v128;
        char v130 = 0;
        unsigned __int16 v131 = 0;
        uint64_t v132 = *(void *)v205;
        do
        {
          v133 = 0;
          char v134 = v130;
          do
          {
            if (*(void *)v205 != v132) {
              objc_enumerationMutation(&off_10024EB90);
            }
            unsigned int v135 = [v191 containsObject:*(void *)(*((void *)&v204 + 1) + 8 * (void)v133)];
            int v136 = 1 << v134;
            if (!v135) {
              LOWORD(v136) = 0;
            }
            v131 |= v136;
            ++v134;
            v133 = (char *)v133 + 1;
          }
          while (v129 != v133);
          v130 += (char)v129;
          id v129 = [&off_10024EB90 countByEnumeratingWithState:&v204 objects:v271 count:16];
        }
        while (v129);
      }
      else
      {
        unsigned __int16 v131 = 0;
      }
      unsigned int v169 = v87;
      long long v202 = 0u;
      long long v203 = 0u;
      long long v200 = 0u;
      long long v201 = 0u;
      id v137 = [&off_10024EBA8 countByEnumeratingWithState:&v200 objects:v270 count:16];
      if (v137)
      {
        id v138 = v137;
        char v139 = 0;
        unsigned __int16 v140 = 0;
        uint64_t v141 = *(void *)v201;
        do
        {
          v142 = 0;
          char v143 = v139;
          do
          {
            if (*(void *)v201 != v141) {
              objc_enumerationMutation(&off_10024EBA8);
            }
            unsigned int v144 = [v191 containsObject:*(void *)(*((void *)&v200 + 1) + 8 * (void)v142)];
            int v145 = 1 << v143;
            if (!v144) {
              LOWORD(v145) = 0;
            }
            v140 |= v145;
            ++v143;
            v142 = (char *)v142 + 1;
          }
          while (v138 != v142);
          v139 += (char)v138;
          id v138 = [&off_10024EBA8 countByEnumeratingWithState:&v200 objects:v270 count:16];
        }
        while (v138);
      }
      else
      {
        unsigned __int16 v140 = 0;
      }
      long long v198 = 0u;
      long long v199 = 0u;
      long long v196 = 0u;
      long long v197 = 0u;
      id v146 = [&off_10024EBC0 countByEnumeratingWithState:&v196 objects:v269 count:16];
      uint64_t v171 = v86;
      if (v146)
      {
        id v147 = v146;
        int v148 = 0;
        unsigned __int16 v149 = 0;
        uint64_t v150 = *(void *)v197;
        do
        {
          v151 = 0;
          int v173 = v148;
          do
          {
            if (*(void *)v197 != v150) {
              objc_enumerationMutation(&off_10024EBC0);
            }
            unsigned int v152 = [v191 containsObject:*(void *)(*((void *)&v196 + 1) + 8 * (void)v151)];
            int v153 = 1 << v148;
            if (!v152) {
              LOWORD(v153) = 0;
            }
            v149 |= v153;
            LOBYTE(v148) = v148 + 1;
            v151 = (char *)v151 + 1;
          }
          while (v147 != v151);
          int v148 = v173 + v147;
          id v147 = [&off_10024EBC0 countByEnumeratingWithState:&v196 objects:v269 count:16];
        }
        while (v147);
      }
      else
      {
        unsigned __int16 v149 = 0;
      }
      long long v194 = 0u;
      long long v195 = 0u;
      long long v192 = 0u;
      long long v193 = 0u;
      id v154 = [&off_10024EBD8 countByEnumeratingWithState:&v192 objects:v268 count:16];
      if (v154)
      {
        id v155 = v154;
        int v156 = 0;
        unsigned __int16 v157 = 0;
        uint64_t v158 = *(void *)v193;
        do
        {
          v159 = 0;
          int v174 = v156;
          do
          {
            if (*(void *)v193 != v158) {
              objc_enumerationMutation(&off_10024EBD8);
            }
            unsigned int v160 = [v191 containsObject:*(void *)(*((void *)&v192 + 1) + 8 * (void)v159)];
            int v161 = 1 << v156;
            if (!v160) {
              LOWORD(v161) = 0;
            }
            v157 |= v161;
            LOBYTE(v156) = v156 + 1;
            v159 = (char *)v159 + 1;
          }
          while (v155 != v159);
          int v156 = v174 + v155;
          id v155 = [&off_10024EBD8 countByEnumeratingWithState:&v192 objects:v268 count:16];
        }
        while (v155);
      }
      else
      {
        unsigned __int16 v157 = 0;
      }
      a1 = v167;
      if (objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "activeCoexFeatures"), "containsObject:", @"WiFiEnhCoexSupport"))
      {
        v266[0] = @"MWS_SCAN_FREQ_INDEX_Enh";
        v267[0] = +[NSNumber numberWithInt:v169];
        v266[1] = @"MWSType4Blanking2GBITMAPWiFiEnh";
        v267[1] = +[NSNumber numberWithInt:v92];
        v266[2] = @"MWSType4Blanking5GBITMAPLOWWiFiEnh";
        v267[2] = +[NSNumber numberWithInt:(unsigned __int16)v187];
        v266[3] = @"MWSType4Blanking5GBITMAPMIDWiFiEnh";
        v267[3] = +[NSNumber numberWithInt:(unsigned __int16)v185];
        v266[4] = @"MWSType4Blanking5GBITMAPHIWiFiEnh";
        v267[4] = +[NSNumber numberWithInt:(unsigned __int16)v183];
        v266[5] = @"MWSType4BlankingU5LowBITMAPWiFiEnh";
        v267[5] = +[NSNumber numberWithInt:v122];
        v266[6] = @"MWSType4BlankingU5HighBITMAPWiFiEnh";
        v267[6] = +[NSNumber numberWithInt:v131];
        v266[7] = @"MWSType4BlankingU6BITMAPWiFiEnh";
        v267[7] = +[NSNumber numberWithInt:v140];
        v266[8] = @"MWSType4BlankingU7BITMAPWiFiEnh";
        v267[8] = +[NSNumber numberWithInt:v149];
        v266[9] = @"MWSType4BlankingU8BITMAPWiFiEnh";
        v267[9] = +[NSNumber numberWithInt:v157];
        v162 = +[NSDictionary dictionaryWithObjects:v267 forKeys:v266 count:10];
        +[WCM_Logging logLevel:4, @"Type4Blanking_WiFiEnh_IOVAR for SUB1: setting mwsType4BlankingBitmapWiFiEnh %@", v162 message];
        [v167[7] sendMessage:@"MWS_SCAN_FREQ_Enh" withValue:v162];
        if (v189)
        {
          v264[0] = @"MWS_SCAN_FREQ_INDEX_Enh";
          v265[0] = +[NSNumber numberWithInt:v169];
          v264[1] = @"MWSType4Blanking5GBITMAPLOWWiFiEnh";
          v265[1] = +[NSNumber numberWithInt:v181];
          v264[2] = @"MWSType4Blanking5GBITMAPMIDWiFiEnh";
          v265[2] = +[NSNumber numberWithInt:v179];
          v264[3] = @"MWSType4Blanking5GBITMAPHIWiFiEnh";
          v265[3] = +[NSNumber numberWithInt:v177];
          v163 = +[NSDictionary dictionaryWithObjects:v265 forKeys:v264 count:4];
          +[WCM_Logging logLevel:4, @"Type4Blanking_Mode_WiFiEnh_IOVAR for SUB1: setting mwsType4BlankingBitmapWiFiEnhMode %@", v163 message];
          [v167[7] sendMessage:@"MWS_SCAN_FREQ_MODE_Enh" withValue:v163];
        }
      }
      int v87 = v169 + 1;
      uint64_t v86 = v171 + 1;
    }
    while (v171 + 1 != v166);
  }
}

id sub_1000E6224(uint64_t a1)
{
  +[WCM_Logging logLevel:4, @"WiFiS: setting setting condition id %d for the following range of channels %d %d in band 2g: %d 5g: %d 6g: %d", *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44), *(unsigned int *)(a1 + 48), *(unsigned __int8 *)(a1 + 52), *(unsigned __int8 *)(a1 + 53), *(unsigned __int8 *)(a1 + 54) message];
  id v2 = +[NSMutableArray array];
  if (*(unsigned char *)(a1 + 52))
  {
    long long v161 = 0u;
    long long v162 = 0u;
    long long v159 = 0u;
    long long v160 = 0u;
    id v3 = [&off_10024ECE0 countByEnumeratingWithState:&v159 objects:v178 count:16];
    if (v3)
    {
      id v4 = v3;
      uint64_t v5 = *(void *)v160;
      do
      {
        for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v160 != v5) {
            objc_enumerationMutation(&off_10024ECE0);
          }
          id v7 = *(void **)(*((void *)&v159 + 1) + 8 * i);
          if ([v7 unsignedIntValue] >= *(_DWORD *)(a1 + 44)
            && [v7 unsignedIntValue] <= *(_DWORD *)(a1 + 48))
          {
            [v2 addObject:v7];
          }
        }
        id v4 = [&off_10024ECE0 countByEnumeratingWithState:&v159 objects:v178 count:16];
      }
      while (v4);
    }
    long long v157 = 0u;
    long long v158 = 0u;
    long long v155 = 0u;
    long long v156 = 0u;
    unint64_t v8 = (unint64_t)[&off_10024ECF8 countByEnumeratingWithState:&v155 objects:v177 count:16];
    if (v8)
    {
      char v9 = 0;
      unsigned __int16 v10 = 0;
      uint64_t v11 = *(void *)v156;
      do
      {
        uint64_t v12 = 0;
        char v13 = v9;
        do
        {
          if (*(void *)v156 != v11) {
            objc_enumerationMutation(&off_10024ECF8);
          }
          unsigned int v14 = [v2 containsObject:*(void *)(*((void *)&v155 + 1) + 8 * (void)v12)];
          int v15 = 1 << v13;
          if (!v14) {
            LOWORD(v15) = 0;
          }
          v10 |= v15;
          ++v13;
          uint64_t v12 = (char *)v12 + 1;
        }
        while ((void *)v8 != v12);
        v9 += v8;
        unint64_t v8 = (unint64_t)[&off_10024ECF8 countByEnumeratingWithState:&v155 objects:v177 count:16];
      }
      while (v8);
      unsigned __int16 v16 = 0;
      unsigned __int16 v17 = 0;
      unsigned __int16 v18 = 0;
      uint64_t v100 = 0;
      unsigned __int16 v19 = 0;
      unsigned __int16 v20 = 0;
      unint64_t v8 = v10;
LABEL_102:
      uint64_t v39 = 0;
      goto LABEL_103;
    }
    uint64_t v39 = 0;
    unsigned __int16 v16 = 0;
    unsigned __int16 v17 = 0;
    unsigned __int16 v18 = 0;
    LOWORD(v100) = 0;
    goto LABEL_51;
  }
  if (*(unsigned char *)(a1 + 53))
  {
    long long v153 = 0u;
    long long v154 = 0u;
    long long v151 = 0u;
    long long v152 = 0u;
    id v21 = [&off_10024EC38 countByEnumeratingWithState:&v151 objects:v176 count:16];
    if (v21)
    {
      id v22 = v21;
      uint64_t v23 = *(void *)v152;
      do
      {
        for (j = 0; j != v22; j = (char *)j + 1)
        {
          if (*(void *)v152 != v23) {
            objc_enumerationMutation(&off_10024EC38);
          }
          id v25 = *(void **)(*((void *)&v151 + 1) + 8 * (void)j);
          long long v147 = 0u;
          long long v148 = 0u;
          long long v149 = 0u;
          long long v150 = 0u;
          id v26 = [v25 countByEnumeratingWithState:&v147 objects:v175 count:16];
          if (v26)
          {
            id v27 = v26;
            uint64_t v28 = *(void *)v148;
            do
            {
              for (uint64_t k = 0; k != v27; uint64_t k = (char *)k + 1)
              {
                if (*(void *)v148 != v28) {
                  objc_enumerationMutation(v25);
                }
                int v30 = *(void **)(*((void *)&v147 + 1) + 8 * (void)k);
                if ([v30 unsignedIntValue] >= *(_DWORD *)(a1 + 44)
                  && [v30 unsignedIntValue] <= *(_DWORD *)(a1 + 48))
                {
                  [v2 addObject:v30];
                }
              }
              id v27 = [v25 countByEnumeratingWithState:&v147 objects:v175 count:16];
            }
            while (v27);
          }
        }
        id v22 = [&off_10024EC38 countByEnumeratingWithState:&v151 objects:v176 count:16];
      }
      while (v22);
    }
    long long v145 = 0u;
    long long v146 = 0u;
    long long v143 = 0u;
    long long v144 = 0u;
    id v31 = [&off_10024ED10 countByEnumeratingWithState:&v143 objects:v174 count:16];
    if (v31)
    {
      id v32 = v31;
      char v33 = 0;
      unsigned __int16 v20 = 0;
      uint64_t v34 = *(void *)v144;
      do
      {
        uint64_t v35 = 0;
        char v36 = v33;
        do
        {
          if (*(void *)v144 != v34) {
            objc_enumerationMutation(&off_10024ED10);
          }
          unsigned int v37 = [v2 containsObject:*(void *)(*((void *)&v143 + 1) + 8 * (void)v35)];
          int v38 = 1 << v36;
          if (!v37) {
            LOWORD(v38) = 0;
          }
          v20 |= v38;
          ++v36;
          uint64_t v35 = (char *)v35 + 1;
        }
        while (v32 != v35);
        v33 += (char)v32;
        id v32 = [&off_10024ED10 countByEnumeratingWithState:&v143 objects:v174 count:16];
      }
      while (v32);
    }
    else
    {
      unsigned __int16 v20 = 0;
    }
    long long v141 = 0u;
    long long v142 = 0u;
    long long v139 = 0u;
    long long v140 = 0u;
    id v59 = [&off_10024ED28 countByEnumeratingWithState:&v139 objects:v173 count:16];
    if (v59)
    {
      id v60 = v59;
      int v61 = 0;
      unsigned __int16 v19 = 0;
      uint64_t v62 = *(void *)v140;
      do
      {
        char v63 = 0;
        int v101 = v61;
        do
        {
          if (*(void *)v140 != v62) {
            objc_enumerationMutation(&off_10024ED28);
          }
          unsigned int v64 = [v2 containsObject:*(void *)(*((void *)&v139 + 1) + 8 * (void)v63)];
          int v65 = 1 << v61;
          if (!v64) {
            LOWORD(v65) = 0;
          }
          v19 |= v65;
          LOBYTE(v61) = v61 + 1;
          char v63 = (char *)v63 + 1;
        }
        while (v60 != v63);
        int v61 = v101 + v60;
        id v60 = [&off_10024ED28 countByEnumeratingWithState:&v139 objects:v173 count:16];
      }
      while (v60);
    }
    else
    {
      unsigned __int16 v19 = 0;
    }
    long long v137 = 0u;
    long long v138 = 0u;
    long long v135 = 0u;
    long long v136 = 0u;
    unint64_t v8 = (unint64_t)[&off_10024ED40 countByEnumeratingWithState:&v135 objects:v172 count:16];
    if (!v8)
    {
      uint64_t v39 = 0;
      unsigned __int16 v16 = 0;
      unsigned __int16 v17 = 0;
      unsigned __int16 v18 = 0;
      uint64_t v100 = 0;
      goto LABEL_103;
    }
    int v66 = 0;
    unsigned __int16 v67 = 0;
    uint64_t v68 = *(void *)v136;
    do
    {
      unsigned __int16 v69 = 0;
      int v102 = v66;
      do
      {
        if (*(void *)v136 != v68) {
          objc_enumerationMutation(&off_10024ED40);
        }
        unsigned int v70 = [v2 containsObject:*(void *)(*((void *)&v135 + 1) + 8 * (void)v69)];
        int v71 = 1 << v66;
        if (!v70) {
          LOWORD(v71) = 0;
        }
        v67 |= v71;
        LOBYTE(v66) = v66 + 1;
        unsigned __int16 v69 = (char *)v69 + 1;
      }
      while ((void *)v8 != v69);
      int v66 = v102 + v8;
      unint64_t v8 = (unint64_t)[&off_10024ED40 countByEnumeratingWithState:&v135 objects:v172 count:16];
    }
    while (v8);
    unsigned __int16 v16 = 0;
    unsigned __int16 v17 = 0;
    unsigned __int16 v18 = 0;
    LOWORD(v100) = 0;
    HIDWORD(v100) = v67;
    goto LABEL_102;
  }
  if (!*(unsigned char *)(a1 + 54))
  {
    uint64_t v39 = 0;
    unsigned __int16 v16 = 0;
    unsigned __int16 v17 = 0;
    unsigned __int16 v18 = 0;
    uint64_t v100 = 0;
    unsigned __int16 v19 = 0;
    unsigned __int16 v20 = 0;
    unint64_t v8 = 0;
    goto LABEL_103;
  }
  long long v133 = 0u;
  long long v134 = 0u;
  long long v131 = 0u;
  long long v132 = 0u;
  id v40 = [&off_10024ECC8 countByEnumeratingWithState:&v131 objects:v171 count:16];
  if (v40)
  {
    id v41 = v40;
    uint64_t v42 = *(void *)v132;
    do
    {
      for (m = 0; m != v41; m = (char *)m + 1)
      {
        if (*(void *)v132 != v42) {
          objc_enumerationMutation(&off_10024ECC8);
        }
        id v44 = *(void **)(*((void *)&v131 + 1) + 8 * (void)m);
        long long v127 = 0u;
        long long v128 = 0u;
        long long v129 = 0u;
        long long v130 = 0u;
        id v45 = [v44 countByEnumeratingWithState:&v127 objects:v170 count:16];
        if (v45)
        {
          id v46 = v45;
          uint64_t v47 = *(void *)v128;
          do
          {
            for (n = 0; n != v46; n = (char *)n + 1)
            {
              if (*(void *)v128 != v47) {
                objc_enumerationMutation(v44);
              }
              id v49 = *(void **)(*((void *)&v127 + 1) + 8 * (void)n);
              if ([v49 unsignedIntValue] >= *(_DWORD *)(a1 + 44)
                && [v49 unsignedIntValue] <= *(_DWORD *)(a1 + 48))
              {
                [v2 addObject:v49];
              }
            }
            id v46 = [v44 countByEnumeratingWithState:&v127 objects:v170 count:16];
          }
          while (v46);
        }
      }
      id v41 = [&off_10024ECC8 countByEnumeratingWithState:&v131 objects:v171 count:16];
    }
    while (v41);
  }
  long long v125 = 0u;
  long long v126 = 0u;
  long long v123 = 0u;
  long long v124 = 0u;
  id v50 = [&off_10024ED58 countByEnumeratingWithState:&v123 objects:v169 count:16];
  if (v50)
  {
    id v51 = v50;
    char v52 = 0;
    __int16 v53 = 0;
    uint64_t v54 = *(void *)v124;
    do
    {
      unsigned int v55 = 0;
      char v56 = v52;
      do
      {
        if (*(void *)v124 != v54) {
          objc_enumerationMutation(&off_10024ED58);
        }
        unsigned int v57 = [v2 containsObject:*(void *)(*((void *)&v123 + 1) + 8 * (void)v55)];
        int v58 = 1 << v56;
        if (!v57) {
          LOWORD(v58) = 0;
        }
        v53 |= v58;
        ++v56;
        unsigned int v55 = (char *)v55 + 1;
      }
      while (v51 != v55);
      v52 += (char)v51;
      id v51 = [&off_10024ED58 countByEnumeratingWithState:&v123 objects:v169 count:16];
    }
    while (v51);
  }
  else
  {
    __int16 v53 = 0;
  }
  long long v121 = 0u;
  long long v122 = 0u;
  long long v119 = 0u;
  long long v120 = 0u;
  id v74 = [&off_10024ED70 countByEnumeratingWithState:&v119 objects:v168 count:16];
  if (v74)
  {
    id v75 = v74;
    int v76 = 0;
    unsigned __int16 v18 = 0;
    uint64_t v77 = *(void *)v120;
    do
    {
      uint64_t v78 = 0;
      int v103 = v76;
      do
      {
        if (*(void *)v120 != v77) {
          objc_enumerationMutation(&off_10024ED70);
        }
        unsigned int v79 = [v2 containsObject:*(void *)(*((void *)&v119 + 1) + 8 * (void)v78)];
        int v80 = 1 << v76;
        if (!v79) {
          LOWORD(v80) = 0;
        }
        v18 |= v80;
        LOBYTE(v76) = v76 + 1;
        uint64_t v78 = (char *)v78 + 1;
      }
      while (v75 != v78);
      int v76 = v103 + v75;
      id v75 = [&off_10024ED70 countByEnumeratingWithState:&v119 objects:v168 count:16];
    }
    while (v75);
  }
  else
  {
    unsigned __int16 v18 = 0;
  }
  long long v117 = 0u;
  long long v118 = 0u;
  long long v115 = 0u;
  long long v116 = 0u;
  id v81 = [&off_10024ED88 countByEnumeratingWithState:&v115 objects:v167 count:16];
  if (v81)
  {
    id v82 = v81;
    int v83 = 0;
    unsigned __int16 v17 = 0;
    uint64_t v84 = *(void *)v116;
    do
    {
      BOOL v85 = 0;
      int v104 = v83;
      do
      {
        if (*(void *)v116 != v84) {
          objc_enumerationMutation(&off_10024ED88);
        }
        unsigned int v86 = [v2 containsObject:*(void *)(*((void *)&v115 + 1) + 8 * (void)v85)];
        int v87 = 1 << v83;
        if (!v86) {
          LOWORD(v87) = 0;
        }
        v17 |= v87;
        LOBYTE(v83) = v83 + 1;
        BOOL v85 = (char *)v85 + 1;
      }
      while (v82 != v85);
      int v83 = v104 + v82;
      id v82 = [&off_10024ED88 countByEnumeratingWithState:&v115 objects:v167 count:16];
    }
    while (v82);
  }
  else
  {
    unsigned __int16 v17 = 0;
  }
  long long v113 = 0u;
  long long v114 = 0u;
  long long v111 = 0u;
  long long v112 = 0u;
  id v88 = [&off_10024EDA0 countByEnumeratingWithState:&v111 objects:v166 count:16];
  if (v88)
  {
    id v89 = v88;
    int v90 = 0;
    unsigned __int16 v16 = 0;
    uint64_t v91 = *(void *)v112;
    do
    {
      unsigned __int16 v92 = 0;
      int v105 = v90;
      do
      {
        if (*(void *)v112 != v91) {
          objc_enumerationMutation(&off_10024EDA0);
        }
        unsigned int v93 = [v2 containsObject:*(void *)(*((void *)&v111 + 1) + 8 * (void)v92)];
        int v94 = 1 << v90;
        if (!v93) {
          LOWORD(v94) = 0;
        }
        v16 |= v94;
        LOBYTE(v90) = v90 + 1;
        unsigned __int16 v92 = (char *)v92 + 1;
      }
      while (v89 != v92);
      int v90 = v105 + v89;
      id v89 = [&off_10024EDA0 countByEnumeratingWithState:&v111 objects:v166 count:16];
    }
    while (v89);
  }
  else
  {
    unsigned __int16 v16 = 0;
  }
  LOWORD(v100) = v53;
  long long v109 = 0u;
  long long v110 = 0u;
  long long v107 = 0u;
  long long v108 = 0u;
  unint64_t v8 = (unint64_t)[&off_10024EDB8 countByEnumeratingWithState:&v107 objects:v165 count:16];
  if (!v8)
  {
    uint64_t v39 = 0;
LABEL_51:
    HIDWORD(v100) = 0;
    unsigned __int16 v19 = 0;
    unsigned __int16 v20 = 0;
    goto LABEL_103;
  }
  int v95 = 0;
  LOWORD(v39) = 0;
  uint64_t v96 = *(void *)v108;
  do
  {
    int v97 = 0;
    int v106 = v95;
    do
    {
      if (*(void *)v108 != v96) {
        objc_enumerationMutation(&off_10024EDB8);
      }
      unsigned int v98 = [v2 containsObject:*(void *)(*((void *)&v107 + 1) + 8 * (void)v97)];
      int v99 = 1 << v95;
      if (!v98) {
        LOWORD(v99) = 0;
      }
      LOWORD(v39) = v99 | v39;
      LOBYTE(v95) = v95 + 1;
      int v97 = (char *)v97 + 1;
    }
    while ((void *)v8 != v97);
    int v95 = v106 + v8;
    unint64_t v8 = (unint64_t)[&off_10024EDB8 countByEnumeratingWithState:&v107 objects:v165 count:16];
  }
  while (v8);
  HIDWORD(v100) = 0;
  unsigned __int16 v19 = 0;
  unsigned __int16 v20 = 0;
  uint64_t v39 = (unsigned __int16)v39;
LABEL_103:
  v163[0] = @"MWS_CONDITION_ID_Value";
  v164[0] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 40)];
  v163[1] = @"MWS2GBITMAPWiFiEnh";
  v164[1] = +[NSNumber numberWithInt:v8];
  v163[2] = @"MWS5GBITMAPLOWWiFiEnh";
  v164[2] = +[NSNumber numberWithInt:v20];
  v163[3] = @"MWS5GBITMAPMIDWiFiEnh";
  v164[3] = +[NSNumber numberWithInt:v19];
  v163[4] = @"MWS5GBITMAPHIWiFiEnh";
  v164[4] = +[NSNumber numberWithInt:HIDWORD(v100)];
  v163[5] = @"MWSU5LowBITMAPWiFiEnh";
  v164[5] = +[NSNumber numberWithInt:(unsigned __int16)v100];
  v163[6] = @"MWSU5HighBITMAPWiFiEnh";
  v164[6] = +[NSNumber numberWithInt:v18];
  v163[7] = @"MWSU6BITMAPWiFiEnh";
  v164[7] = +[NSNumber numberWithInt:v17];
  v163[8] = @"MWSU7BITMAPWiFiEnh";
  v164[8] = +[NSNumber numberWithInt:v16];
  v163[9] = @"MWSU8BITMAPWiFiEnh";
  v164[9] = +[NSNumber numberWithInt:v39];
  unsigned int v72 = +[NSDictionary dictionaryWithObjects:v164 forKeys:v163 count:10];
  +[WCM_Logging logLevel:4, @"Condtionid IOVAR: setting Condtionid %@", v72 message];
  return [*(id *)(a1 + 32) sendMessage:@"MWS_CONDITION_ID_BITMAP_Enh" withValue:v72];
}

id sub_1000E6F94(uint64_t a1)
{
  +[WCM_Logging logLevel:3, @"WiFiS: rFEM LPM mode setting for bands 2g: %d 5g: %d 6g: %d", *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 41), *(unsigned __int8 *)(a1 + 42) message];
  if (*(unsigned char *)(a1 + 40) && [&off_10024EDD0 count])
  {
    int v2 = 0;
    int v3 = 0;
    do
    {
      v3 |= 1 << v2;
      int v4 = v2 + 1;
      id v5 = [&off_10024EDD0 count];
      int v2 = v4;
    }
    while ((unint64_t)v5 > (unsigned __int16)v4);
  }
  else
  {
    LOWORD(v3) = 0;
  }
  if (!*(unsigned char *)(a1 + 41))
  {
    LOWORD(v7) = 0;
    LOWORD(v10) = 0;
LABEL_23:
    unsigned int v43 = 0;
    goto LABEL_24;
  }
  if ([&off_10024EDE8 count])
  {
    int v6 = 0;
    int v7 = 0;
    do
    {
      v7 |= 1 << v6;
      int v8 = v6 + 1;
      id v9 = [&off_10024EDE8 count];
      int v6 = v8;
    }
    while ((unint64_t)v9 > (unsigned __int16)v8);
  }
  else
  {
    LOWORD(v7) = 0;
  }
  if ([&off_10024EE00 count])
  {
    int v11 = 0;
    int v10 = 0;
    do
    {
      v10 |= 1 << v11;
      int v12 = v11 + 1;
      id v13 = [&off_10024EE00 count];
      int v11 = v12;
    }
    while ((unint64_t)v13 > (unsigned __int16)v12);
  }
  else
  {
    LOWORD(v10) = 0;
  }
  if (![&off_10024EE18 count]) {
    goto LABEL_23;
  }
  int v14 = 0;
  int v15 = 0;
  do
  {
    v15 |= 1 << v14;
    int v16 = v14 + 1;
    id v17 = [&off_10024EE18 count];
    int v14 = v16;
  }
  while ((unint64_t)v17 > (unsigned __int16)v16);
  unsigned int v43 = (unsigned __int16)v15;
LABEL_24:
  unsigned __int16 v44 = v3;
  if (!*(unsigned char *)(a1 + 42))
  {
    LOWORD(v19) = 0;
    LOWORD(v22) = 0;
    LOWORD(v23) = 0;
    LOWORD(v24) = 0;
LABEL_50:
    uint64_t v38 = 0;
    goto LABEL_51;
  }
  if ([&off_10024EE30 count])
  {
    int v18 = 0;
    int v19 = 0;
    do
    {
      v19 |= 1 << v18;
      int v20 = v18 + 1;
      id v21 = [&off_10024EE30 count];
      int v18 = v20;
    }
    while ((unint64_t)v21 > (unsigned __int16)v20);
  }
  else
  {
    LOWORD(v19) = 0;
  }
  if ([&off_10024EE48 count])
  {
    int v25 = 0;
    int v22 = 0;
    do
    {
      v22 |= 1 << v25;
      int v26 = v25 + 1;
      id v27 = [&off_10024EE48 count];
      int v25 = v26;
    }
    while ((unint64_t)v27 > (unsigned __int16)v26);
  }
  else
  {
    LOWORD(v22) = 0;
  }
  if ([&off_10024EE60 count])
  {
    int v28 = 0;
    int v23 = 0;
    do
    {
      v23 |= 1 << v28;
      int v29 = v28 + 1;
      id v30 = [&off_10024EE60 count];
      int v28 = v29;
    }
    while ((unint64_t)v30 > (unsigned __int16)v29);
  }
  else
  {
    LOWORD(v23) = 0;
  }
  if ([&off_10024EE78 count])
  {
    int v31 = 0;
    int v24 = 0;
    do
    {
      v24 |= 1 << v31;
      int v32 = v31 + 1;
      id v33 = [&off_10024EE78 count];
      int v31 = v32;
    }
    while ((unint64_t)v33 > (unsigned __int16)v32);
  }
  else
  {
    LOWORD(v24) = 0;
  }
  if (![&off_10024EE90 count]) {
    goto LABEL_50;
  }
  uint64_t v42 = a1;
  int v34 = 0;
  int v35 = 0;
  do
  {
    v35 |= 1 << v34;
    int v36 = v34 + 1;
    id v37 = [&off_10024EE90 count];
    int v34 = v36;
  }
  while ((unint64_t)v37 > (unsigned __int16)v36);
  uint64_t v38 = (unsigned __int16)v35;
  a1 = v42;
LABEL_51:
  id v39 = +[NSMutableDictionary dictionary];
  if (*(unsigned char *)(a1 + 40)) {
    [v39 setObject:[NSNumber numberWithInt:v44] forKey:@"MWS2GBITMAPWiFiEnh"];
  }
  if (*(unsigned char *)(a1 + 41))
  {
    [v39 setObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (unsigned __int16)v7) forKey:@"MWSU5LowBITMAPWiFiEnh"];
    [v39 setObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (unsigned __int16)v10) forKey:@"MWS5GBITMAPMIDWiFiEnh"];
    [v39 setObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v43)] forKey:@"MWS5GBITMAPHIWiFiEnh"];
  }
  if (*(unsigned char *)(a1 + 42))
  {
    [v39 setObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (unsigned __int16)v19) forKey:@"MWSU5LowBITMAPWiFiEnh"];
    [v39 setObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (unsigned __int16)v22)] forKey:@"MWSU5HighBITMAPWiFiEnh"];
    [v39 setObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (unsigned __int16)v23) forKey:@"MWSU6BITMAPWiFiEnh"];
    [v39 setObject:[NSNumber numberWithInt:v24] forKey:@"MWSU7BITMAPWiFiEnh"];
    [v39 setObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v38)] forKey:@"MWSU8BITMAPWiFiEnh"];
  }
  if (*(unsigned char *)(a1 + 43))
  {
    [v39 setObject:[NSNumber numberWithInt:v44] forKey:@"MWS2GBITMAPWiFiEnh"];
    [v39 setObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (unsigned __int16)v7)] forKey:@"MWSU5LowBITMAPWiFiEnh"];
    [v39 setObject:[NSNumber numberWithInt:v10] forKey:@"MWS5GBITMAPMIDWiFiEnh"];
    [v39 setObject:[NSNumber numberWithInt:v43] forKey:@"MWS5GBITMAPHIWiFiEnh"];
    [v39 setObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (unsigned __int16)v19) forKey:@"MWSU5LowBITMAPWiFiEnh"];
    [v39 setObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (unsigned __int16)v22)] forKey:@"MWSU5HighBITMAPWiFiEnh"];
    [v39 setObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (unsigned __int16)v23) forKey:@"MWSU6BITMAPWiFiEnh"];
    [v39 setObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (unsigned __int16)v24) forKey:@"MWSU7BITMAPWiFiEnh"];
    [v39 setObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v38)] forKey:@"MWSU8BITMAPWiFiEnh"];
  }
  +[WCM_Logging logLevel:4, @"WiFiS: setting enabled channels for rFEM mode %@", v39 message];
  id v40 = *(void **)(a1 + 32);

  return [v40 sendMessage:@"MWS_RFEM_CONFIG_Enh" withValue:v39];
}

id sub_1000E763C(uint64_t a1)
{
  +[WCM_Logging logLevel:3 message:@"WiFiS: WIFI Assoc Protection setting for all bands"];
  int v1 = 0;
  if ([&off_10024EEA8 count])
  {
    int v2 = 0;
    do
    {
      v1 |= 1 << v2;
      int v3 = v2 + 1;
      id v4 = [&off_10024EEA8 count];
      int v2 = v3;
    }
    while ((unint64_t)v4 > (unsigned __int16)v3);
  }
  if ([&off_10024EEC0 count])
  {
    int v5 = 0;
    int v6 = 0;
    do
    {
      v6 |= 1 << v5;
      int v7 = v5 + 1;
      id v8 = [&off_10024EEC0 count];
      int v5 = v7;
    }
    while ((unint64_t)v8 > (unsigned __int16)v7);
    unsigned int v51 = (unsigned __int16)v6;
  }
  else
  {
    unsigned int v51 = 0;
  }
  if ([&off_10024EED8 count])
  {
    int v9 = 0;
    int v10 = 0;
    do
    {
      v10 |= 1 << v9;
      int v11 = v9 + 1;
      id v12 = [&off_10024EED8 count];
      int v9 = v11;
    }
    while ((unint64_t)v12 > (unsigned __int16)v11);
    uint64_t v13 = (unsigned __int16)v10;
  }
  else
  {
    uint64_t v13 = 0;
  }
  if ([&off_10024EEF0 count])
  {
    int v14 = 0;
    int v15 = 0;
    do
    {
      v15 |= 1 << v14;
      int v16 = v14 + 1;
      id v17 = [&off_10024EEF0 count];
      int v14 = v16;
    }
    while ((unint64_t)v17 > (unsigned __int16)v16);
    uint64_t v18 = (unsigned __int16)v15;
  }
  else
  {
    uint64_t v18 = 0;
  }
  if ([&off_10024EF08 count])
  {
    int v19 = 0;
    int v20 = 0;
    do
    {
      v20 |= 1 << v19;
      int v21 = v19 + 1;
      id v22 = [&off_10024EF08 count];
      int v19 = v21;
    }
    while ((unint64_t)v22 > (unsigned __int16)v21);
    uint64_t v23 = (unsigned __int16)v20;
  }
  else
  {
    uint64_t v23 = 0;
  }
  if ([&off_10024EF20 count])
  {
    int v24 = 0;
    int v25 = 0;
    do
    {
      v25 |= 1 << v24;
      int v26 = v24 + 1;
      id v27 = [&off_10024EF20 count];
      int v24 = v26;
    }
    while ((unint64_t)v27 > (unsigned __int16)v26);
    uint64_t v28 = (unsigned __int16)v25;
  }
  else
  {
    uint64_t v28 = 0;
  }
  if ([&off_10024EF38 count])
  {
    int v29 = 0;
    int v30 = 0;
    do
    {
      v30 |= 1 << v29;
      int v31 = v29 + 1;
      id v32 = [&off_10024EF38 count];
      int v29 = v31;
    }
    while ((unint64_t)v32 > (unsigned __int16)v31);
    uint64_t v33 = (unsigned __int16)v30;
  }
  else
  {
    uint64_t v33 = 0;
  }
  if ([&off_10024EF50 count])
  {
    int v34 = 0;
    int v35 = 0;
    do
    {
      v35 |= 1 << v34;
      int v36 = v34 + 1;
      id v37 = [&off_10024EF50 count];
      int v34 = v36;
    }
    while ((unint64_t)v37 > (unsigned __int16)v36);
    uint64_t v38 = (unsigned __int16)v35;
  }
  else
  {
    uint64_t v38 = 0;
  }
  if ([&off_10024EF68 count])
  {
    uint64_t v39 = v33;
    uint64_t v40 = v28;
    uint64_t v41 = v23;
    uint64_t v42 = v18;
    uint64_t v43 = v13;
    int v44 = 0;
    int v45 = 0;
    do
    {
      v45 |= 1 << v44;
      int v46 = v44 + 1;
      id v47 = [&off_10024EF68 count];
      int v44 = v46;
    }
    while ((unint64_t)v47 > (unsigned __int16)v46);
    uint64_t v48 = (unsigned __int16)v45;
    uint64_t v13 = v43;
    uint64_t v18 = v42;
    uint64_t v23 = v41;
    uint64_t v28 = v40;
    uint64_t v33 = v39;
    uint64_t v38 = v38;
  }
  else
  {
    uint64_t v48 = 0;
  }
  v53[0] = @"MWS2GBITMAPWiFiEnh";
  v54[0] = +[NSNumber numberWithInt:(unsigned __int16)v1];
  v53[1] = @"MWS5GBITMAPLOWWiFiEnh";
  v54[1] = +[NSNumber numberWithInt:v51];
  v53[2] = @"MWS5GBITMAPMIDWiFiEnh";
  v54[2] = +[NSNumber numberWithInt:v13];
  v53[3] = @"MWS5GBITMAPHIWiFiEnh";
  v54[3] = +[NSNumber numberWithInt:v18];
  v53[4] = @"MWSU5LowBITMAPWiFiEnh";
  v54[4] = +[NSNumber numberWithInt:v23];
  v53[5] = @"MWSU5HighBITMAPWiFiEnh";
  v54[5] = +[NSNumber numberWithInt:v28];
  v53[6] = @"MWSU6BITMAPWiFiEnh";
  v54[6] = +[NSNumber numberWithInt:v33];
  v53[7] = @"MWSU7BITMAPWiFiEnh";
  v54[7] = +[NSNumber numberWithInt:v38];
  v53[8] = @"MWSU8BITMAPWiFiEnh";
  v54[8] = +[NSNumber numberWithInt:v48];
  id v49 = +[NSDictionary dictionaryWithObjects:v54 forKeys:v53 count:9];
  +[WCM_Logging logLevel:4, @"WiFiS: setting enabled channels for Assoc Protection mode %@", v49 message];
  return [*(id *)(a1 + 32) sendMessage:@"MWS_ASSOC_PROTECTION_BITMAP_Enh" withValue:v49];
}

void sub_1000E7B98(uint64_t a1)
{
  +[WCM_Logging logLevel:3, @"WiFiS: setting max duration for cellular scan protection %@", *(void *)(a1 + 32) message];
  [*(id *)(a1 + 40) sendMessage:@"MWS_SET_TYPE4_MAX_DURATION" withValue:*(void *)(a1 + 32)];
  int v2 = *(void **)(a1 + 32);
}

void sub_1000E7C8C(uint64_t a1)
{
  +[WCM_Logging logLevel:3, @"WiFiS: setting LTE-WiFi TDD Mode Channels %@", *(void *)(a1 + 32) message];
  if ([+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton").activeCoexFeatures containsObject:@"EnhancedConnectivityHwSupport"])CFStringRef v2 = @"MWS_TIME_SHARING_Enh"; {
  else
  }
    CFStringRef v2 = @"MWS_SET_LTE_TDD_MODE";
  [*(id *)(a1 + 40) sendMessage:v2 withValue:*(void *)(a1 + 32)];
  int v3 = *(void **)(a1 + 32);
}

void sub_1000E7DB8(uint64_t a1)
{
  +[WCM_Logging logLevel:3, @"WiFiS: setting WiFi Rx protect mode %@", *(void *)(a1 + 32) message];
  [*(id *)(a1 + 40) sendMessage:@"MWS_WLANRX_PROT" withValue:*(void *)(a1 + 32)];
  CFStringRef v2 = *(void **)(a1 + 32);
}

void sub_1000E7ECC(id *a1)
{
  +[WCM_Logging logLevel:3, @"WiFiS: setting WiFi Rx protect auto-mode weight %@ thresh %@", a1[4], a1[5] message];
  v2[0] = @"MWS_AUTOPROT_PARAMS_WEIGHT";
  v2[1] = @"MWS_AUTOPROT_PARAMS_THRESH";
  long long v3 = *((_OWORD *)a1 + 2);
  [a1[6] sendMessage:@"MWS_AUTOPROT_PARAMS" withValue:[+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v3, v2, 2)];
}

void sub_1000E8028(uint64_t a1)
{
  +[WCM_Logging logLevel:3, @"WiFiS: setting WiFi Tx indication over WCI2 %@", *(void *)(a1 + 32) message];
  [*(id *)(a1 + 40) sendMessage:@"MWS_WCI2_TXIND" withValue:*(void *)(a1 + 32)];
  CFStringRef v2 = *(void **)(a1 + 32);
}

void sub_1000E811C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    +[WCM_Logging logLevel:3, @"WiFiS: setting WiFi scan and join Rx protect duration %@ ", v1 message];
    [*(id *)(a1 + 40) sendMessage:@"MWS_SCANJOIN_PROT" withValue:*(void *)(a1 + 32)];
    long long v3 = *(void **)(a1 + 32);
  }
  else
  {
    long long v3 = 0;
  }
}

void sub_1000E8224(uint64_t a1)
{
  +[WCM_Logging logLevel:3, @"WiFiS: setting Cellular Frequency Config %@", *(void *)(a1 + 32) message];
  [*(id *)(a1 + 40) sendMessage:@"MWS_CELLULAR_FREQ_CONFIG" withValue:*(void *)(a1 + 32)];
  CFStringRef v2 = *(void **)(a1 + 32);
}

void sub_1000E8320(uint64_t a1)
{
  +[WCM_Logging logLevel:3, @"WiFiS: Enabling 2g Wifi Envelope Indication %@", *(void *)(a1 + 32) message];
  [*(id *)(a1 + 40) sendMessage:@"MWS_WCI2_TX_ENVELOPE_IND_2G" withValue:*(void *)(a1 + 32)];
  CFStringRef v2 = *(void **)(a1 + 32);
}

void sub_1000E841C(uint64_t a1)
{
  +[WCM_Logging logLevel:3, @"WiFiS: 2g Wifi Envelope Indication Timer %@", *(void *)(a1 + 32) message];
  [*(id *)(a1 + 40) sendMessage:@"MWS_TX_ENVELOPE_IDLE_TIMER" withValue:*(void *)(a1 + 32)];
  CFStringRef v2 = *(void **)(a1 + 32);
}

void sub_1000E8510(uint64_t a1)
{
  +[WCM_Logging logLevel:3, @"WiFiS: Enabling Agc Coex  Wifi %@", *(void *)(a1 + 32) message];
  [*(id *)(a1 + 40) sendMessage:@"MWS_COEX_CONFIG" withValue:*(void *)(a1 + 32)];
  CFStringRef v2 = *(void **)(a1 + 32);
}

id sub_1000E85F0(uint64_t a1)
{
  if ([WCM_PolicyManager singleton].activeCoexFeatures.containsObject(@"BB20LAAType5IndDisabled"))CFStringRef v2 = @"DLDebug_ WiFiS: Extended Type0 MSG Indication for 5GHz WiFi Tx is  for LAA Coex Config for New BB20 Platforms."; {
  else
  }
    CFStringRef v2 = @"WiFiS: LAA Coex Config -- enabling TX Indication";
  +[WCM_Logging logLevel:3 message:v2];
  long long v3 = *(void **)(a1 + 32);

  return [v3 sendMessage:@"MWS_WCI2_TXIND_5G" withValue:&off_10023D350];
}

void sub_1000E870C(uint64_t a1)
{
  +[WCM_Logging logLevel:3, @"WiFiS: LAA Coex Config setting WiFi Tx duration thresh %@", *(void *)(a1 + 32) message];
  [*(id *)(a1 + 40) sendMessage:@"MWS_WCI2_TXDUR_THRESH" withValue:*(void *)(a1 + 32)];
  CFStringRef v2 = *(void **)(a1 + 32);
}

void sub_1000E8808(uint64_t a1)
{
  +[WCM_Logging logLevel:3, @"WiFiS: LAA Coex Config setting WiFi scan throttle mask %@", *(void *)(a1 + 32) message];
  [*(id *)(a1 + 40) sendMessage:@"MWS_ACTIVE_SCAN_THROTTLE" withValue:*(void *)(a1 + 32)];
  CFStringRef v2 = *(void **)(a1 + 32);
}

void sub_1000E8904(uint64_t a1)
{
  +[WCM_Logging logLevel:3, @"WiFiS: LAA Coex Config setting WiFi active dwell time %@", *(void *)(a1 + 32) message];
  [*(id *)(a1 + 40) sendMessage:@"MWS_ACTIVE_DWELL_TIME" withValue:*(void *)(a1 + 32)];
  CFStringRef v2 = *(void **)(a1 + 32);
}

id sub_1000E8BB0(uint64_t a1)
{
  +[WCM_Logging logLevel:2, @"WiFiS: Update WiFi/BT ULOFDMA disable (%d)", *(unsigned __int8 *)(a1 + 40) message];
  CFStringRef v2 = *(void **)(a1 + 32);
  if (*(unsigned char *)(a1 + 40)) {
    long long v3 = &off_10023D350;
  }
  else {
    long long v3 = &off_10023D338;
  }

  return [v2 sendMessage:@"MWS_BT_COEX_ULOFDMA_DISABLE" withValue:v3];
}

id sub_1000E8CA8(uint64_t a1)
{
  +[WCM_Logging logLevel:2, @"WiFiS: Update WiFi/RCU1 ULOFDMA disable (%d)", *(unsigned __int8 *)(a1 + 40) message];
  CFStringRef v2 = *(void **)(a1 + 32);
  if (*(unsigned char *)(a1 + 40)) {
    long long v3 = &off_10023D350;
  }
  else {
    long long v3 = &off_10023D338;
  }

  return [v2 sendMessage:@"MWS_RC1_COEX_ULOFDMA_DISABLE" withValue:v3];
}

id sub_1000E8DA0(uint64_t a1)
{
  +[WCM_Logging logLevel:2, @"WiFiS: Update WiFi/RCU2 ULOFDMA disable (%d)", *(unsigned __int8 *)(a1 + 40) message];
  CFStringRef v2 = *(void **)(a1 + 32);
  if (*(unsigned char *)(a1 + 40)) {
    long long v3 = &off_10023D350;
  }
  else {
    long long v3 = &off_10023D338;
  }

  return [v2 sendMessage:@"MWS_RC2_COEX_ULOFDMA_DISABLE" withValue:v3];
}

void sub_1000E8EE0(uint64_t a1)
{
  +[WCM_Logging logLevel:2 message:@"WiFiS: Update WiFi RCU1 mode and chan"];
  v2[0] = @"MWS_RC1_COEX_MODE_CHANGED";
  v3[0] = +[NSNumber numberWithInt:*(unsigned __int8 *)(a1 + 56)];
  v2[1] = @"MWS_RC1_COEX_CHANNEL_CHANGED";
  v3[1] = +[NSNumber numberWithInt:*(unsigned __int8 *)(a1 + 57)];
  void v2[2] = @"MWS_RC1_COEX_MODE";
  v2[3] = @"MWS_RC1_COEX_CHANNEL";
  long long v4 = *(_OWORD *)(a1 + 32);
  [*(id *)(a1 + 48) sendMessage:@"MWS_RC1_COEX_PARAM_INFO" withValue:[+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v3, v2, 4)];
}

void sub_1000E91C4(uint64_t a1)
{
  +[WCM_Logging logLevel:2, @"WiFiS: Set WiFi RCU2 Coex mode (%@)", *(void *)(a1 + 32) message];
  [*(id *)(a1 + 40) sendMessage:@"MWS_RC2_COEX_MODE" withValue:*(void *)(a1 + 32)];
  CFStringRef v2 = *(void **)(a1 + 32);
}

void sub_1000E92C0(uint64_t a1)
{
  +[WCM_Logging logLevel:2, @"WiFiS: Set WiFi RCU2 PM Protection mode (%@)", *(void *)(a1 + 32) message];
  [*(id *)(a1 + 40) sendMessage:@"MWS_RC2_PM_PROTECTION_MODE" withValue:*(void *)(a1 + 32)];
  CFStringRef v2 = *(void **)(a1 + 32);
}

void sub_1000E93BC(uint64_t a1)
{
  +[WCM_Logging logLevel:2, @"WiFiS: Set WiFi RCU2 params %@", *(void *)(a1 + 32) message];
  [*(id *)(a1 + 40) sendMessage:@"MWS_RC2_WIFI_TIMING_PARAM_INFO" withValue:[+[NSMutableDictionary dictionaryWithObjects:forKeys:](NSMutableDictionary, "dictionaryWithObjects:forKeys:", *(void *)(a1 + 32), +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", @"MWS_RC2_GPIO_PROCESSING_DELAY", @"MWS_RC2_COEX_GRANT_DURATION", @"MWS_RC2_COEX_GRANT_INTERVAL", 0))];
  CFStringRef v2 = *(void **)(a1 + 32);
}

id sub_1000E94E4(uint64_t a1)
{
  +[WCM_Logging logLevel:2, @"WiFiS: Update WiFi eSCO status (%d)", *(unsigned int *)(a1 + 40) message];
  CFStringRef v2 = *(void **)(a1 + 32);
  long long v3 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 40)];

  return [v2 sendMessage:@"MWS_BT_ESCO_TRAFFIC_INDICATION" withValue:v3];
}

id sub_1000E95D8(uint64_t a1)
{
  +[WCM_Logging logLevel:2, @"WiFiS: Update WiFi A2DP status (%d)", *(unsigned int *)(a1 + 40) message];
  CFStringRef v2 = *(void **)(a1 + 32);
  long long v3 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 40)];

  return [v2 sendMessage:@"MWS_BT_A2DP_TRAFFIC_INDICATION" withValue:v3];
}

id sub_1000E96CC(uint64_t a1)
{
  +[WCM_Logging logLevel:2, @"WiFiS: Update WiFi A2DP LLA status (%d)", *(unsigned int *)(a1 + 40) message];
  CFStringRef v2 = *(void **)(a1 + 32);
  long long v3 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 40)];

  return [v2 sendMessage:@"MWS_BT_A2DP_LLA_TRAFFIC_INDICATION" withValue:v3];
}

void sub_1000E97D8(uint64_t a1)
{
  +[WCM_Logging logLevel:2 message:@"WiFiS: Update BT Connection Report"];
  v2[0] = @"MWS_BT_CONNECTION_REPORT_2G_AoS_UNI";
  v3[0] = [*(id *)(a1 + 32) objectForKeyedSubscript:@"2GAoSUni"];
  v2[1] = @"MWS_BT_CONNECTION_REPORT_2G_AoS_BI";
  v3[1] = [*(id *)(a1 + 32) objectForKeyedSubscript:@"2GAoSBi"];
  void v2[2] = @"MWS_BT_CONNECTION_REPORT_5G_AoS_UNI";
  void v3[2] = [*(id *)(a1 + 32) objectForKeyedSubscript:@"5GAoSUni"];
  v2[3] = @"MWS_BT_CONNECTION_REPORT_5G_AoS_BI";
  v3[3] = [*(id *)(a1 + 32) objectForKeyedSubscript:@"5GAoSBi"];
  void v2[4] = @"MWS_BT_CONNECTION_REPORT_ACL_A2DP";
  void v3[4] = [*(id *)(a1 + 32) objectForKeyedSubscript:@"ACL-A2DP"];
  void v2[5] = @"MWS_BT_CONNECTION_REPORT_ESCO";
  void v3[5] = [*(id *)(a1 + 32) objectForKeyedSubscript:@"ESCO"];
  v2[6] = @"MWS_BT_CONNECTION_REPORT_HID";
  v3[6] = [*(id *)(a1 + 32) objectForKeyedSubscript:@"HID"];
  [*(id *)(a1 + 40) sendMessage:@"MWS_BT_CONNECTION_REPORT" withValue:[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v3, v2, 7)];
}

void sub_1000E9A08(uint64_t a1)
{
  +[WCM_Logging logLevel:2, @"WiFiS: Set WiFi RCU2 coex params  %@", *(void *)(a1 + 32) message];
  [*(id *)(a1 + 40) sendMessage:@"MWS_RC2_WIFI_TIMING_PARAM_INFO" withValue:[+[NSMutableDictionary dictionaryWithObjects:forKeys:](NSMutableDictionary, "dictionaryWithObjects:forKeys:", *(void *)(a1 + 32), +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", @"MWS_RC2_COEX_MODE", @"MWS_RC2_COEX_GRANT_DURATION", @"MWS_RC2_COEX_GRANT_INTERVAL", @"MWS_RC2_COEX_CHANNEL", 0))]];
  CFStringRef v2 = *(void **)(a1 + 32);
}

id sub_1000EA1AC(uint64_t a1, const __CFDictionary *a2, uint64_t a3)
{
  id result = +[WCM_Logging logLevel:2, @"WiFiS: callbackWiFiDeviceClientDeviceAvailable %@", a2 message];
  if (!a2) {
    return result;
  }
  CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(a2, @"DRIVER_AVAILABLE");
  if (Value)
  {
    int v7 = CFBooleanGetValue(Value);
    *(unsigned char *)(a3 + 528) = v7 != 0;
    [*(id *)(a3 + 8) updatePowerState:];
    if (v7)
    {
      *(unsigned char *)(a3 + 529) = 1;
      +[WCM_Logging logLevel:2 message:@"WiFiS: callbackWiFiDeviceClientDeviceAvailable mWiFiDeviceReset to TRUE"];
      return [(id)a3 checkWiFiState];
    }
  }
  else
  {
    *(unsigned char *)(a3 + 528) = 0;
    [*(id *)(a3 + 8) updatePowerState:0];
  }
  id v8 = [[+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton") wifiController];

  return [v8 clearDownloadCoexProfilesState];
}

id sub_1000EA2EC(uint64_t a1, uint64_t a2, void *a3)
{
  +[WCM_Logging logLevel:3, @"WiFiS: callbackWiFiDeviceClientExtendedLink %@", a2 message];

  return [a3 processWifiDeviceExtendedLinkEvent:a2];
}

id sub_1000EA34C(uint64_t a1, const __CFDictionary *a2, void *a3)
{
  +[WCM_Logging logLevel:2, @"WiFiS: callbackWiFiDeviceClientHostApStateChanged %@", a2 message];
  uint64_t valuePtr = 0;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a2, @"CHANNEL");
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberSInt32Type, (char *)&valuePtr + 4);
    +[WCM_Logging logLevel:2, @"channel = %d", HIDWORD(valuePtr) message];
  }
  CFNumberRef v6 = (const __CFNumber *)CFDictionaryGetValue(a2, @"HostApEnabled");
  if (v6)
  {
    CFNumberGetValue(v6, kCFNumberSInt32Type, &valuePtr);
    +[WCM_Logging logLevel:2, @"hostAPMode = %d", valuePtr message];
    BOOL v7 = valuePtr != 0;
  }
  else
  {
    BOOL v7 = 0;
  }
  return [a3 updateHostAPState:v7 channel:HIDWORD(valuePtr)];
}

id sub_1000EA438(uint64_t a1, uint64_t a2, void *a3)
{
  id result = +[WCM_Logging logLevel:3, @"WiFiS: callbackWiFiDeviceClientBssidChange (%p)", a2 message];
  if (a2)
  {
    [a3 checkWiFiState];
    return [a3 notifyWiFiStateChange:1];
  }
  return result;
}

id sub_1000EA4B4(uint64_t a1, const __CFDictionary *a2, void *a3)
{
  +[WCM_Logging logLevel:2, @"WiFiS: callbackWiFiDeviceClientBTScanIntervalRelaxCallback %@", a2 message];
  unsigned int valuePtr = 4;
  if (a2)
  {
    CFNumberRef number = 0;
    xpc_object_t value = 0;
    BOOL v5 = 0;
    if (CFDictionaryGetValueIfPresent(a2, @"BT_SCAN_INTERVAL_RELAX_ENABLE", (const void **)&value) && value) {
      BOOL v5 = CFEqual(value, kCFBooleanTrue) != 0;
    }
    int ValueIfPresent = CFDictionaryGetValueIfPresent(a2, @"BT_SCAN_INTERVAL_RELAX_REASON", (const void **)&number);
    uint64_t v7 = 4;
    if (ValueIfPresent)
    {
      if (number)
      {
        CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
        uint64_t v7 = valuePtr;
      }
    }
    +[WCM_Logging logLevel:2, @"WiFiS: BT Scan Interval Relax event: enable %d, reason %d\n", v5, v7 message];
    return [a3 dispatchCarplayInfotoBT:v5 reason:valuePtr];
  }
  else
  {
    return +[WCM_Logging logLevel:2 message:@"BT Scan Interval Relax dictionary is null"];
  }
}

void sub_1000EA5F0(int a1, CFDictionaryRef theDict)
{
  xpc_object_t value = 0;
  unsigned int valuePtr = 0;
  unsigned int v8 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  __int16 v5 = 0;
  if (theDict)
  {
    if (CFDictionaryGetValueIfPresent(theDict, @"BTC_STATS_TDD_CNT", (const void **)&value) && value) {
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr);
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"BTC_STATS_HYBRID_CNT", (const void **)&value) && value) {
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &v8);
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"BTC_STATS_BT_DUR_MS", (const void **)&value) && value) {
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, (char *)&v7 + 4);
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"BTC_STATS_TOT_DUR_MS", (const void **)&value) && value) {
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &v7);
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"BTC_STATS_PARALLEL_CNT", (const void **)&value) && value) {
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, (char *)&v6 + 4);
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"BTC_STATS_BT_DUR_AIR_MS", (const void **)&value) && value) {
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &v6);
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"BTC_STATS_WLRSSI_COEX", (const void **)&value) && value) {
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt8Type, (char *)&v5 + 1);
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"BTC_STATS_BTRSSI_COEX", (const void **)&value))
    {
      if (value) {
        CFNumberGetValue((CFNumberRef)value, kCFNumberSInt8Type, &v5);
      }
    }
    id v3 = +[WCM_PolicyManager singleton];
    LOBYTE(v4) = HIBYTE(v5);
    BYTE1(v4) = v5;
    [v3 handleBTCoexStatsEvent_tddCnt:valuePtr hybridCnt:v8 btDurMs:HIDWORD(v7) totDurMs:v7 btDurAirMs:HIDWORD(v6) wlrssiCoex:v6 btrssiCoex:v4];
  }
}

CFDictionaryRef sub_1000EA7C0(uint64_t a1, const __CFDictionary *a2)
{
  if (!a2) {
    return (const __CFDictionary *)+[WCM_Logging logLevel:1, @"%s: empty dict", "callbackBSPEventCallback" message];
  }
  +[WCM_Logging logLevel:3, @"%s: %@", "callbackBSPEventCallback", a2 message];
  uint64_t valuePtr = 0;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a2, @"BSP_EventType");
  if (!Value) {
    return (const __CFDictionary *)+[WCM_Logging logLevel:1, @"%s: no eventType", "callbackBSPEventCallback" message];
  }
  CFNumberGetValue(Value, kCFNumberLongLongType, &valuePtr);
  int v4 = valuePtr;
  CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(a2, @"BSP_EventParams");
  if (!result) {
    return (const __CFDictionary *)+[WCM_Logging logLevel:1, @"%s: no eventParams", "callbackBSPEventCallback" message];
  }
  CFDictionaryRef v6 = result;
  switch(v4)
  {
    case 1:
      CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, @"BSP_PowerState");
      if (result)
      {
        CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
        return (const __CFDictionary *)[+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton") handleWiFiStatusUpdateEvent:valuePtr != 0];
      }
      return result;
    case 3:
      CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, @"BSP_RegulatoryInfo");
      if (result)
      {
        CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
        return (const __CFDictionary *)[+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton") handleWiFiRegulatoryInfoEvent:valuePtr];
      }
      return result;
    case 4:
      CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, @"BSP_FrequencyBand");
      if (result)
      {
        CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
        return (const __CFDictionary *)[+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton") handleWiFiFrequencyBandForBTEvent:valuePtr];
      }
      return result;
    case 5:
      CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, @"BSP_FrequencyBand");
      if (result)
      {
        CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
        uint64_t v7 = valuePtr;
        CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(v6, @"BSP_ChannelQuality");
        if (result)
        {
          CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
          return (const __CFDictionary *)[+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton") handleWiFiChannelQualityEvent:v7 quality:valuePtr];
        }
      }
      return result;
    case 6:
      CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, @"BSP_PowerState");
      if (result)
      {
        CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
        uint64_t v8 = valuePtr;
        CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(v6, @"BSP_FrequencyBand");
        if (result)
        {
          CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
          uint64_t v9 = valuePtr;
          CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(v6, @"BSP_ULLAMode");
          if (result)
          {
            CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
            return (const __CFDictionary *)[+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton") handleBTStatusUpdateEvent:v8 != 0 frequencyBand:v9 ullaMode:valuePtr];
          }
        }
      }
      return result;
    case 7:
      CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, @"BSP_CurrentBand");
      if (result)
      {
        CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
        uint64_t v10 = valuePtr;
        CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(v6, @"BSP_TargetBand");
        if (result)
        {
          CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
          return (const __CFDictionary *)[+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton") handleBTBandSwitchRequestEvent:v10 targetBand:valuePtr];
        }
      }
      return result;
    case 8:
      return (const __CFDictionary *)[[[WCM_PolicyManager singleton] bspMonitor] requestBTStatus];
    case 9:
      return (const __CFDictionary *)[[[WCM_PolicyManager singleton] bspMonitor] handleShowUCMStatusEvent];
    case 10:
      return (const __CFDictionary *)[[[WCM_PolicyManager singleton] bspMonitor] handleWiFiCountryCodeChangedEvent];
    case 11:
      return (const __CFDictionary *)[+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton") handleBandSwitchStatusUpdatedEvent];
    case 12:
      CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, @"BSP_CoexMode");
      if (result)
      {
        CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
        uint64_t v11 = valuePtr;
        CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(v6, @"BSP_BTSubband");
        if (result)
        {
          CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
          uint64_t v12 = valuePtr;
          CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(v6, @"BSP_SuccessCount");
          if (result)
          {
            CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
            uint64_t v13 = valuePtr;
            CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(v6, @"BSP_FailCount");
            if (result)
            {
              CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
              return (const __CFDictionary *)[+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton") handleBandSwitchStatusEvent:v11 != 0 btSubband:v12 successCount:v13 failCount:valuePtr];
            }
          }
        }
      }
      return result;
    case 13:
      return (const __CFDictionary *)[[[WCM_PolicyManager singleton] bspMonitor] handleChannelQualityInfoUpdatedEvent];
    case 14:
      return (const __CFDictionary *)[+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton") handleChannelQualityInfoEvent:result];
    case 15:
      CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, @"BSP_ReasonCode");
      if (result)
      {
        CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
        uint64_t v14 = valuePtr;
        CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(v6, @"BSP_BTSubband");
        if (result)
        {
          CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
          return (const __CFDictionary *)[+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton") handleCoexModeFailEvent:v14 btSubband:valuePtr];
        }
      }
      return result;
    case 16:
      CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, @"BSP_ReasonCode");
      if (result)
      {
        CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
        uint64_t v15 = valuePtr;
        CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(v6, @"BSP_TargetBand");
        if (result)
        {
          CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
          return (const __CFDictionary *)[+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton") handleBandSwitchRejectEvent:v15 btTargetBand:valuePtr];
        }
      }
      return result;
    case 17:
      CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, @"BSP_CountryCode");
      if (result)
      {
        CFDictionaryRef v16 = result;
        CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(v6, @"BSP_AllowedBands");
        if (result)
        {
          CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
          return (const __CFDictionary *)[+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton") handleBTRegulatoryInfoEvent:allowedBands:v16 valuePtr];
        }
      }
      return result;
    case 20:
      CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, @"BSP_NanPhs_isLinkDown");
      if (!result) {
        return result;
      }
      if (CFBooleanGetValue(result))
      {
        uint64_t v17 = 0;
        goto LABEL_48;
      }
      CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(v6, @"BSP_NanPhs_Channel");
      if (result)
      {
        CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
        uint64_t v17 = valuePtr;
        CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(v6, @"BSP_NanPhs_Band");
        if (result)
        {
          CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
          switch(valuePtr)
          {
            case 1:
              uint64_t v18 = 2;
              return (const __CFDictionary *)[+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton") handleWiFiStateEvent:v18 wifiChannel:v17 isNanPhs:1];
            case 3:
              uint64_t v18 = 4;
              return (const __CFDictionary *)[+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton") handleWiFiStateEvent:v18 wifiChannel:v17 isNanPhs:1];
            case 2:
              uint64_t v18 = 3;
              return (const __CFDictionary *)[+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton") handleWiFiStateEvent:v18 wifiChannel:v17 isNanPhs:1];
          }
LABEL_48:
          uint64_t v18 = 0;
          return (const __CFDictionary *)[+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton") handleWiFiStateEvent:v18 wifiChannel:v17 isNanPhs:1];
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

CFDictionaryRef sub_1000EAE80(uint64_t a1, const __CFDictionary *a2, void *a3)
{
  if (!a2) {
    return (const __CFDictionary *)+[WCM_Logging logLevel:1, @"%s: empty dict", "callbackUCMEventCallback" message];
  }
  +[WCM_Logging logLevel:2, @"%s: %@", "callbackUCMEventCallback", a2 message];
  uint64_t valuePtr = 0;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a2, @"UCM_EventType");
  if (!Value) {
    return (const __CFDictionary *)+[WCM_Logging logLevel:1, @"%s: no eventType", "callbackUCMEventCallback" message];
  }
  CFNumberGetValue(Value, kCFNumberLongLongType, &valuePtr);
  uint64_t v6 = valuePtr;
  CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(a2, @"UCM_EventParams");
  if (!result) {
    return (const __CFDictionary *)+[WCM_Logging logLevel:1, @"%s: no eventParams", "callbackUCMEventCallback" message];
  }
  if (v6 == 1)
  {
    CFDictionaryRef v8 = result;
    CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, @"UCM_CopresenceEn");
    if (result)
    {
      CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
      uint64_t v9 = valuePtr;
      CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(v8, @"MWS_LE_NORM_SCAN_GRANT_DUR");
      if (result)
      {
        CFDictionaryRef result = (const __CFDictionary *)CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
        if (a3) {
          return (const __CFDictionary *)[a3 forceCopresence:v9 != 0 scanGrantDuration:valuePtr];
        }
      }
    }
  }
  return result;
}

void sub_1000EBD34(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = 0;
  int v19 = &v18;
  uint64_t v20 = 0x2020000000;
  int v21 = 1;
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2020000000;
  int v17 = 0;
  v12[0] = 0;
  v12[1] = v12;
  v12[2] = 0x2020000000;
  int v13 = 0;
  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x2020000000;
  int v11 = 0;
  +[WCM_Logging logLevel:2, @"WiFiS: callbackWiFiDeviceClientScanCallback %d", a3 message];
  if (!a4)
  {
    +[WCM_Logging logLevel:2, @"WiFiS: callback context is missing %d", a3 message];
    +[WCM_Logging logLevel:2 message:@"WiFiS: callback context is NULL"];
  }
  uint64_t v7 = *(void **)(a4 + 24);
  if (!v7) {
    +[WCM_Logging logLevel:2 message:@"WiFiS: callback wifiService is NULL"];
  }
  if (a2)
  {
    id v8 = objc_alloc_init((Class)NSMutableDictionary);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1000ED554;
    v9[3] = &unk_100211C38;
    void v9[4] = v8;
    v9[5] = v12;
    v9[6] = v10;
    v9[7] = &v18;
    v9[8] = &v14;
    [a2 enumerateObjectsUsingBlock:v9];
    +[WCM_Logging logLevel:2, @"WiFiS: Sending least congested channel: %d, count %d\n", *((unsigned int *)v15 + 6), *((unsigned int *)v19 + 6) message];
    [v7 dispatchContentionFreeWiFiNetworkToRC2:*((unsigned int *)v15 + 6) count:*((unsigned int *)v19 + 6)];
    CFRunLoopStop(*(CFRunLoopRef *)(a4 + 16));
  }
  else
  {
    +[WCM_Logging logLevel:2 message:@"WiFiS: callback scanResults are NULL"];
    *((_DWORD *)v15 + 6) = 13;
    *((_DWORD *)v19 + 6) = 1;
  }
  _Block_object_dispose(v10, 8);
  _Block_object_dispose(v12, 8);
  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(&v18, 8);
}

void sub_1000EBF58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Block_object_dispose((const void *)(v13 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000EC1FC(uint64_t result)
{
  if (*(void *)(*(void *)(result + 32) + 504)) {
    return _WiFiManagerClientWiFiCallHandoverNotification(*(void *)(*(void *)(result + 32) + 504), *(unsigned __int8 *)(result + 40));
  }
  return result;
}

id sub_1000EC3B8(uint64_t a1)
{
  +[WCM_Logging logLevel:2, @"WiFiS: Update External Connection (%d)", *(unsigned int *)(a1 + 40) message];
  CFStringRef v2 = *(void **)(a1 + 32);
  if (*(_DWORD *)(a1 + 40)) {
    id v3 = &off_10023D338;
  }
  else {
    id v3 = &off_10023D350;
  }

  return [v2 sendMessage:@"MWS_SET_WIFI_BT_AIRTIME_POLICY" withValue:v3];
}

id sub_1000EC62C(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, @"%s (%d, 0x%x, %d)", "-[WCM_WiFiServiceIOS bspUpdateBTStatus_powerState:frequencyBand:ullaMode:]_block_invoke", *(unsigned __int8 *)(a1 + 48), *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44));
  v7[0] = @"BSP_PowerState";
  v8[0] = +[NSNumber numberWithUnsignedLongLong:*(unsigned __int8 *)(a1 + 48)];
  v7[1] = @"BSP_FrequencyBand";
  v8[1] = +[NSNumber numberWithUnsignedLongLong:*(int *)(a1 + 40)];
  UInt8 v7[2] = @"BSP_ULLAMode";
  v8[2] = +[NSNumber numberWithUnsignedLongLong:*(unsigned int *)(a1 + 44)];
  CFStringRef v2 = +[NSDictionary dictionaryWithObjects:v8 forKeys:v7 count:3];
  v5[0] = @"BSP_CommandType";
  v5[1] = @"BSP_CommandParams";
  v6[0] = +[NSNumber numberWithUnsignedLongLong:5];
  v6[1] = v2;
  id v3 = +[NSDictionary dictionaryWithObjects:v6 forKeys:v5 count:2];
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, @"%s: %@", "-[WCM_WiFiServiceIOS bspUpdateBTStatus_powerState:frequencyBand:ullaMode:]_block_invoke", v3);
  return [*(id *)(a1 + 32) sendMessage:@"BSP_Command" withValue:v3];
}

id sub_1000EC818(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, @"%s (0x%x, 0x%x)", "-[WCM_WiFiServiceIOS bspBandSwitchRequest:targetBand:]_block_invoke", *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44));
  v9[0] = @"BSP_CommandType";
  v9[1] = @"BSP_CommandParams";
  v10[0] = +[NSNumber numberWithUnsignedLongLong:4];
  v7[0] = @"BSP_SIB_CmdType";
  v7[1] = @"BSP_SIB_CmdParams";
  v8[0] = +[NSNumber numberWithUnsignedLongLong:2];
  v5[0] = @"BSP_CurrentBand";
  CFStringRef v2 = +[NSNumber numberWithUnsignedLongLong:*(int *)(a1 + 40)];
  v5[1] = @"BSP_TargetBand";
  v6[0] = v2;
  v6[1] = +[NSNumber numberWithUnsignedLongLong:*(int *)(a1 + 44)];
  v8[1] = +[NSDictionary dictionaryWithObjects:v6 forKeys:v5 count:2];
  v10[1] = +[NSDictionary dictionaryWithObjects:v8 forKeys:v7 count:2];
  id v3 = +[NSDictionary dictionaryWithObjects:v10 forKeys:v9 count:2];
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, @"%s: %@", "-[WCM_WiFiServiceIOS bspBandSwitchRequest:targetBand:]_block_invoke", v3);
  return [*(id *)(a1 + 32) sendMessage:@"BSP_Command" withValue:v3];
}

id sub_1000ECA0C(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, @"%s", "-[WCM_WiFiServiceIOS bspStatusRequest]_block_invoke");
  CFStringRef v7 = @"dummy";
  id v8 = +[NSNumber numberWithUnsignedLongLong:0];
  CFStringRef v2 = +[NSDictionary dictionaryWithObjects:&v8 forKeys:&v7 count:1];
  v5[0] = @"BSP_CommandType";
  v5[1] = @"BSP_CommandParams";
  v6[0] = +[NSNumber numberWithUnsignedLongLong:7];
  v6[1] = v2;
  id v3 = +[NSDictionary dictionaryWithObjects:v6 forKeys:v5 count:2];
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, @"%s: %@", "-[WCM_WiFiServiceIOS bspStatusRequest]_block_invoke", v3);
  return [*(id *)(a1 + 32) sendMessage:@"BSP_Command" withValue:v3];
}

id sub_1000ECBB0(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, @"%s", "-[WCM_WiFiServiceIOS bspRegulatoryInfoRequest]_block_invoke");
  CFStringRef v7 = @"dummy";
  id v8 = +[NSNumber numberWithUnsignedLongLong:0];
  CFStringRef v2 = +[NSDictionary dictionaryWithObjects:&v8 forKeys:&v7 count:1];
  v5[0] = @"BSP_CommandType";
  v5[1] = @"BSP_CommandParams";
  v6[0] = +[NSNumber numberWithUnsignedLongLong:2];
  v6[1] = v2;
  id v3 = +[NSDictionary dictionaryWithObjects:v6 forKeys:v5 count:2];
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, @"%s: %@", "-[WCM_WiFiServiceIOS bspRegulatoryInfoRequest]_block_invoke", v3);
  return [*(id *)(a1 + 32) sendMessage:@"BSP_Command" withValue:v3];
}

id sub_1000ECD54(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, @"%s", "-[WCM_WiFiServiceIOS bspNanPhsStateRequest]_block_invoke");
  CFStringRef v7 = @"dummy";
  id v8 = +[NSNumber numberWithUnsignedLongLong:0];
  CFStringRef v2 = +[NSDictionary dictionaryWithObjects:&v8 forKeys:&v7 count:1];
  v5[0] = @"BSP_CommandType";
  v5[1] = @"BSP_CommandParams";
  v6[0] = +[NSNumber numberWithUnsignedLongLong:3];
  v6[1] = v2;
  id v3 = +[NSDictionary dictionaryWithObjects:v6 forKeys:v5 count:2];
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, @"%s: %@", "-[WCM_WiFiServiceIOS bspNanPhsStateRequest]_block_invoke", v3);
  return [*(id *)(a1 + 32) sendMessage:@"BSP_Command" withValue:v3];
}

id sub_1000ECF08(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, @"%s (0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x)", "-[WCM_WiFiServiceIOS bspSetCoexMode:wifiSupportedBands:btCurrentBand:btSupportedBands:setTimeToTSTOnly:timeToTST:]_block_invoke", *(unsigned __int8 *)(a1 + 56), *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44), *(unsigned int *)(a1 + 48), *(unsigned __int8 *)(a1 + 57), *(unsigned int *)(a1 + 52));
  v8[0] = @"BSP_CommandType";
  v8[1] = @"BSP_CommandParams";
  v9[0] = +[NSNumber numberWithUnsignedLongLong:4];
  v6[0] = @"BSP_SIB_CmdType";
  v6[1] = @"BSP_SIB_CmdParams";
  v7[0] = +[NSNumber numberWithUnsignedLongLong:0];
  v4[0] = @"BSP_SIB_Enable";
  v5[0] = +[NSNumber numberWithUnsignedLongLong:*(unsigned __int8 *)(a1 + 56)];
  v4[1] = @"BSP_SIB_WiFiSupportedBands";
  v5[1] = +[NSNumber numberWithUnsignedLongLong:*(int *)(a1 + 40)];
  void v4[2] = @"BSP_SIB_BTCurrentBand";
  void v5[2] = +[NSNumber numberWithUnsignedLongLong:*(int *)(a1 + 44)];
  void v4[3] = @"BSP_SIB_BTSupportedBands";
  void v5[3] = +[NSNumber numberWithUnsignedLongLong:*(int *)(a1 + 48)];
  v4[4] = @"BSP_SIB_SetTimeToTSTOnly";
  void v5[4] = +[NSNumber numberWithUnsignedLongLong:*(unsigned __int8 *)(a1 + 57)];
  void v4[5] = @"BSP_SIB_TimeToTST";
  void v5[5] = +[NSNumber numberWithUnsignedLongLong:*(unsigned int *)(a1 + 52)];
  v7[1] = +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:6];
  v9[1] = +[NSDictionary dictionaryWithObjects:v7 forKeys:v6 count:2];
  CFStringRef v2 = +[NSDictionary dictionaryWithObjects:v9 forKeys:v8 count:2];
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, @"%s: %@", "-[WCM_WiFiServiceIOS bspSetCoexMode:wifiSupportedBands:btCurrentBand:btSupportedBands:setTimeToTSTOnly:timeToTST:]_block_invoke", v2);
  return [*(id *)(a1 + 32) sendMessage:@"BSP_Command" withValue:v2];
}

id sub_1000ED18C(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, @"%s", "-[WCM_WiFiServiceIOS bspGetBandSwitchStatus]_block_invoke");
  v8[0] = @"BSP_CommandType";
  v9[0] = +[NSNumber numberWithUnsignedLongLong:4];
  v8[1] = @"BSP_CommandParams";
  v6[0] = @"BSP_SIB_CmdType";
  v6[1] = @"BSP_SIB_CmdParams";
  v7[0] = +[NSNumber numberWithUnsignedLongLong:4];
  CFStringRef v4 = @"dummy";
  __int16 v5 = +[NSNumber numberWithUnsignedLongLong:0];
  v7[1] = +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];
  v9[1] = +[NSDictionary dictionaryWithObjects:v7 forKeys:v6 count:2];
  CFStringRef v2 = +[NSDictionary dictionaryWithObjects:v9 forKeys:v8 count:2];
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, @"%s: %@", "-[WCM_WiFiServiceIOS bspGetBandSwitchStatus]_block_invoke", v2);
  return [*(id *)(a1 + 32) sendMessage:@"BSP_Command" withValue:v2];
}

id sub_1000ED364(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, @"%s", "-[WCM_WiFiServiceIOS bspGetChannelQualityInfo]_block_invoke");
  v8[0] = @"BSP_CommandType";
  v9[0] = +[NSNumber numberWithUnsignedLongLong:4];
  v8[1] = @"BSP_CommandParams";
  v6[0] = @"BSP_SIB_CmdType";
  v6[1] = @"BSP_SIB_CmdParams";
  v7[0] = +[NSNumber numberWithUnsignedLongLong:5];
  CFStringRef v4 = @"dummy";
  __int16 v5 = +[NSNumber numberWithUnsignedLongLong:0];
  v7[1] = +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];
  v9[1] = +[NSDictionary dictionaryWithObjects:v7 forKeys:v6 count:2];
  CFStringRef v2 = +[NSDictionary dictionaryWithObjects:v9 forKeys:v8 count:2];
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, @"%s: %@", "-[WCM_WiFiServiceIOS bspGetChannelQualityInfo]_block_invoke", v2);
  return [*(id *)(a1 + 32) sendMessage:@"BSP_Command" withValue:v2];
}

id sub_1000ED554(uint64_t a1)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = WiFiNetworkGetIntProperty();
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [objc_msgSend(*(id *)(a1 + 32), "objectForKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))) intValue];
  [*(id *)(a1 + 32) setObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (*(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) + 1))] forKey:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))]];
  id result = [[*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) objectForKey:[NSNumber numberWithInt:*(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)]] intValue];
  if (result <= *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
  {
    id result = [[objc_msgSend(*(id *)(a1 + 32), "objectForKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))) intValue];
    *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = result;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8)
                                                                            + 24);
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
  return result;
}

id sub_1000FF88C(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmBTMaxNumberOfChannelsToAvoidForCellOOB:&off_10023DE60];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiCellCoexIssueTable:objc_alloc_init(WCM_WiFiCellCoexIssueBandTable)];
  [objc_msgSend(a1, "wcmWiFiCellCoexIssueTable") configureBy:&unk_1001EB280];
  [a1 setWcmCellularCoexB7ULRange:2500.0, 10.1];
  [a1 setWcmCellularCoexB7DLRange:2620.0, 10.1];
  [a1 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [a1 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [a1 setWcmCellularCoexB41A1Range:2496.0, 10.1];
  [a1 setWcmCellularCoexB41A2Range:2506.1, 20.0];
  [a1 setWcmCellularScanProtectionCellFrequencies:&off_10024F298];

  return [a1 setWcmCellularScanProtectionWiFiChannels:&off_10024F2C8];
}

id sub_1000FF9D4(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmBTMaxNumberOfChannelsToAvoidForCellOOB:&off_10023DE60];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiCellCoexIssueTable:objc_alloc_init(WCM_WiFiCellCoexIssueBandTable)];
  [objc_msgSend(a1, "wcmWiFiCellCoexIssueTable") configureBy:&unk_1001EB910];
  [a1 setWcmCellularCoexB7ULRange:2500.0, 10.1];
  [a1 setWcmCellularCoexB7DLRange:2620.0, 10.1];
  [a1 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [a1 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [a1 setWcmCellularCoexB41A1Range:2496.0, 10.1];
  [a1 setWcmCellularCoexB41A2Range:2506.1, 15.0];
  [a1 setWcmCellularScanProtectionCellFrequencies:&off_10024F328];

  return [a1 setWcmCellularScanProtectionWiFiChannels:&off_10024F388];
}

id sub_1000FFB1C(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmBTMaxNumberOfChannelsToAvoidForCellOOB:&off_10023DE60];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiCellCoexIssueTable:objc_alloc_init(WCM_WiFiCellCoexIssueBandTable)];
  [objc_msgSend(a1, "wcmWiFiCellCoexIssueTable") configureBy:&unk_1001EBD70];
  [a1 setWcmCellularCoexB7ULRange:2500.0, 10.1];
  [a1 setWcmCellularCoexB7DLRange:2620.0, 10.1];
  [a1 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [a1 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [a1 setWcmCellularCoexB41A1Range:2496.0, 10.1];
  [a1 setWcmCellularCoexB41A2Range:2506.1, 20.0];
  [a1 setWcmCellularScanProtectionCellFrequencies:&off_10024F3B8];

  return [a1 setWcmCellularScanProtectionWiFiChannels:&off_10024F3E8];
}

id sub_1000FFC64(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmBTMaxNumberOfChannelsToAvoidForCellOOB:&off_10023DE60];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiCellCoexIssueTable:objc_alloc_init(WCM_WiFiCellCoexIssueBandTable)];
  [objc_msgSend(a1, "wcmWiFiCellCoexIssueTable") configureBy:&unk_1001EC320];
  [a1 setWcmCellularCoexB7ULRange:2500.0, 10.1];
  [a1 setWcmCellularCoexB7DLRange:2620.0, 10.1];
  [a1 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [a1 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [a1 setWcmCellularCoexB41A1Range:2496.0, 10.1];
  [a1 setWcmCellularCoexB41A2Range:2506.1, 20.0];
  [a1 setWcmCellularScanProtectionCellFrequencies:&off_10024F418];

  return [a1 setWcmCellularScanProtectionWiFiChannels:&off_10024F448];
}

id sub_1000FFDAC(void *a1)
{
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileDefault:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DD58, @"UCM_DESENSE_LEVEL", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_10023DD58,
          @"UCM_DESENSE_LEVEL",
          &off_10023DD88,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileLight:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_LEVEL", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_10023DCC8,
          @"UCM_DESENSE_LEVEL",
          &off_10023DF38,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavyHFP:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DF50, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF68, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF80,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DF98,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF68,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_LEVEL", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_10023DCC8,
          @"UCM_DESENSE_LEVEL",
          &off_10023DF38,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavyA2DP:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DFB0,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DF80,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF68,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_LEVEL", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_10023DCC8,
          @"UCM_DESENSE_LEVEL",
          &off_10023DF38,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  uint64_t v1 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DEF0,
         @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
         &off_10023DF08,
         @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
         &off_10023DEC0,
         @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
         &off_10023DF08,
         @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
         &off_10023DEC0,
         @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
         &off_10023DED8,
         @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
         &off_10023DED8,
         @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
         &off_10023DD58,
         @"UCM_HYBRID_ANT_CORE_CONFIG",
         +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DD58, @"UCM_DESENSE_LEVEL", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
             &off_10023DD58,
             @"UCM_DESENSE_LEVEL",
             &off_10023DD88,
             @"UCM_ACK_PWR_STRONG_RSSI",
             &off_10023DD88,
             @"UCM_ACK_PWR_WEAK_RSSI",
             &off_10023DD88,
             @"UCM_TX_PWR_STRONG_RSSI",
             &off_10023DD88,
             @"UCM_TX_PWR_WEAK_RSSI",
             0),
           0),
         @"UCM_CHAIN_ATTR",
         0);

  return [a1 setWcmWiFiBTCoexProfileTDD:v1];
}

id sub_1001006D4(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:-60];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-40];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-40];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-50];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-50];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:6790];
  [a1 setWcmWCI2MWSInactivityAssertJitter:192];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:500];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023DFC8];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  id v42 = a1;
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex003_WiFiEnh_v1.5", @"plist") options:2 format:&v74 error:&v75];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  uint64_t v41 = (uint64_t)&v41;
  __chkstk_darwin(v4, v5, v6);
  int v44 = (char *)&v41 - v7 * (unint64_t)v8;
  uint64_t v9 = &v44[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v9 = 211;
  *(_OWORD *)(v9 + 4) = 0u;
  *(_OWORD *)(v9 + 20) = 0u;
  *(_OWORD *)(v9 + 36) = 0u;
  *(_OWORD *)(v9 + 52) = 0u;
  *(_OWORD *)(v9 + 68) = 0u;
  *(_OWORD *)(v9 + 84) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  unsigned __int16 v10 = (unsigned __int16)[v2 count];
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v43 = 112 * v10;
    do
    {
      __int16 v72 = 0;
      char v73 = 0;
      v71[0] = 0;
      *(_DWORD *)((char *)v71 + 3) = 0;
      LODWORD(v70) = [[[v2 objectAtIndex:v12] objectForKey:@"issueBand"] intValue];
      unsigned int v69 = [[[v2 objectAtIndex:v12] objectForKey:@"issueType"] intValue];
      unsigned int v68 = [[[v2 objectAtIndex:v12] objectForKey:@"isWiFiDesense"] BOOLValue];
      unsigned int v67 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v66 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v65 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v64 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v63 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v62 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v61 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v60 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap111"] intValue];
      unsigned int v59 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v58 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v57 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v56 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v55 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v54 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v53 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v52 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap111"] intValue];
      uint64_t v51 = (int)[v2 objectAtIndex:v12 objectForKey:@"cellTxPowerLimit"] intValue];
      double v13 = (double)(int)[v2 objectAtIndex:v12][@"cellFrequencyLimitForOOB"][@"intValue"];
      double v14 = (double)(int)[v2 objectAtIndex:v12][@"cellBandwidthLimitForOOB"][@"intValue"];
      unsigned int v50 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiFirstChannelToAvoidForCellOOB"] intValue];
      unsigned int v49 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiLastChannelToAvoidForCellOOB"] intValue];
      unsigned int v48 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiFirstChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v47 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiLastChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v46 = [[[v2 objectAtIndex:v12] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned int v45 = [[[v2 objectAtIndex:v12] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned __int8 v15 = [[[v2 objectAtIndex:v12] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned __int8 v16 = [[[v2 objectAtIndex:v12] objectForKey:@"ulcaPriority"] intValue];
      unsigned __int8 v17 = [[[v2 objectAtIndex:v12] objectForKey:@"ulcaPriority_WiFi"] intValue];
      unsigned __int8 v18 = [[[v2 objectAtIndex:v12] objectForKey:@"ulcaPriority_BT"] intValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v12] objectForKey:@"CellAntBlk"] intValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiFirstChannelToDisableOCLCellOOB"] intValue];
      unsigned __int8 v21 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiLastChannelToDisableOCLCellOOB"] intValue];
      unsigned int v22 = [[[v2 objectAtIndex:v12++] objectForKey:@"isWifiEnhBand"] intValue];
      uint64_t v23 = &v44[v11];
      unsigned int v24 = v69;
      *(_DWORD *)uint64_t v23 = v70;
      *((_DWORD *)v23 + 1) = v24;
      v23[8] = v68;
      char v25 = v66;
      v23[13] = v67;
      *(_DWORD *)(v23 + 9) = 0;
      v23[14] = v25;
      v23[15] = v65;
      v23[16] = v64;
      v23[17] = v63;
      v23[18] = v62;
      v23[19] = v61;
      v23[20] = v60;
      v23[21] = v59;
      v23[22] = v58;
      v23[23] = v57;
      v23[24] = v56;
      v23[25] = v55;
      v23[26] = v54;
      v23[27] = v53;
      v23[28] = v52;
      *(_WORD *)(v23 + 29) = v72;
      v23[31] = v73;
      *((void *)v23 + 4) = v51;
      *((double *)v23 + 5) = v13;
      *((double *)v23 + 6) = v14;
      v23[56] = v50;
      v23[57] = v49;
      v23[58] = v48;
      v23[59] = v47;
      unsigned int v26 = v46;
      *((_DWORD *)v23 + 15) = 0;
      *((_DWORD *)v23 + 16) = v26;
      *(void *)(v23 + 68) = 0;
      *((_WORD *)v23 + 38) = 0;
      v23[78] = v45;
      v23[79] = v15;
      *((void *)v23 + 10) = 0;
      v23[88] = 0;
      v23[89] = v16;
      v23[90] = v17;
      v23[91] = v18;
      v23[92] = 0;
      v23[93] = v19;
      v23[94] = v20;
      v23[95] = v21;
      v23[96] = v22 != 0;
      *(void *)(v23 + 97) = 0;
      *((_DWORD *)v23 + 27) = *(_DWORD *)((char *)v71 + 3);
      v11 += 112;
      *(_DWORD *)(v23 + 105) = v71[0];
    }
    while (v43 != v11);
  }
  id v27 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v28 = v42;
  [v42 setWcmWiFiCellCoexIssueTable:v27];
  id v29 = [v28 wcmWiFiCellCoexIssueTable];
  [v29 configureBy:v44];
  [v28 setWcmCellularCoexB7ULRange:2500.0, 10.1];
  [v28 setWcmCellularCoexB7DLRange:2620.0, 10.1];
  [v28 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v28 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v28 setWcmCellularCoexB41A1Range:2496.0, 10.1];
  [v28 setWcmCellularCoexB41A2Range:2506.1, 20.0];
  [v28 setWcmCellularScanProtectionCellFrequencies:&off_10024F4D8];
  [v28 setWcmCellularScanProtectionWiFiChannels:&off_10024F568];
  [v28 setWcmCellularWCI2ModeControllerLTERBThreshold:[NSNumber numberWithInt:41]];
  [v28 setWcmCellularWCI2ModeLTEHarqnackratioThreshold:[NSNumber numberWithInt:10]];
  [v28 setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable:[NSNumber numberWithBool:1]];
  id v70 = NSDictionary;
  int v30 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DD58, @"UCM_DESENSE_LEVEL", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_10023DD58,
            @"UCM_DESENSE_LEVEL",
            &off_10023DD88,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  id v31 = objc_msgSend(v70, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DEF0,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DF08,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DEC0,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DF08,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEC0,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v30,
          @"UCM_CHAIN_ATTR",
          0);
  id v32 = v42;
  [v42 setWcmWiFiBTCoexProfileDefault:v31];
  id v70 = NSDictionary;
  uint64_t v33 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_LEVEL", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_10023DCC8,
            @"UCM_DESENSE_LEVEL",
            &off_10023DF38,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DF38,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  objc_msgSend(v32, "setWcmWiFiBTCoexProfileLight:", objc_msgSend(v70, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      v33,
      @"UCM_CHAIN_ATTR",
      0));
  id v70 = NSDictionary;
  int v34 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_LEVEL", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_10023DCC8,
            @"UCM_DESENSE_LEVEL",
            &off_10023DF38,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DF38,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  id v35 = objc_msgSend(v70, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DF50, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF68, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DF80, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DF98,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DF50,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DF68,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DEC0,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v34,
          @"UCM_CHAIN_ATTR",
          0);
  [v42 setWcmWiFiBTCoexProfileHeavyHFP:v35];
  id v70 = NSDictionary;
  int v36 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_LEVEL", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_10023DCC8,
            @"UCM_DESENSE_LEVEL",
            &off_10023DF38,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DF38,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  id v37 = objc_msgSend(v70, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DFB0, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DF80,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DF50,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DF68,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DEC0,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v36,
          @"UCM_CHAIN_ATTR",
          0);
  [v42 setWcmWiFiBTCoexProfileHeavyA2DP:v37];
  id v70 = NSDictionary;
  uint64_t v38 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DD58, @"UCM_DESENSE_LEVEL", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_10023DD58,
            @"UCM_DESENSE_LEVEL",
            &off_10023DD88,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  id v39 = objc_msgSend(v70, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DEF0,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DF08,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DEC0,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DF08,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEC0,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v38,
          @"UCM_CHAIN_ATTR",
          0);
  return [v42 setWcmWiFiBTCoexProfileTDD:v39];
}

id sub_100101A84(void *a1)
{
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileDefault:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DD58, @"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          &off_10023DD58,
          @"UCM_DESENSE_STRONG_RSSI",
          &off_10023DD58,
          @"UCM_DESENSE_WEAK_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileLight:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DCC8, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DED8, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DEF0, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DFB0,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF80,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          &off_10023DCC8,
          @"UCM_DESENSE_STRONG_RSSI",
          &off_10023DC68,
          @"UCM_DESENSE_WEAK_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  uint64_t v1 = &off_10023DC68;
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavyHFP:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", v1, @"UCM_MODE_STRONG_WL_BT", v1, @"UCM_MODE_WEAK_WL", v1, @"UCM_MODE_WEAK_BT", v1, @"UCM_MODE_WEAK_WL_BT", &off_10023DEF0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF50, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF80,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DF98,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          &off_10023DCC8,
          @"UCM_DESENSE_STRONG_RSSI",
          &off_10023DC68,
          @"UCM_DESENSE_WEAK_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavyA2DP:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", v1, @"UCM_MODE_STRONG_WL_BT", v1, @"UCM_MODE_WEAK_WL", v1, @"UCM_MODE_WEAK_BT", v1, @"UCM_MODE_WEAK_WL_BT", &off_10023DF50, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF68, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DFB0,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DF80,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF68,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DF68,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          &off_10023DCC8,
          @"UCM_DESENSE_STRONG_RSSI",
          &off_10023DC68,
          @"UCM_DESENSE_WEAK_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  id v2 = &off_10023DD88;
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileTDD:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DD58, @"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          @"UCM_DESENSE_STRONG_RSSI",
          &off_10023DD58,
          @"UCM_DESENSE_WEAK_RSSI",
          v2,
          @"UCM_ACK_PWR_STRONG_RSSI",
          v2,
          @"UCM_ACK_PWR_WEAK_RSSI",
          v2,
          @"UCM_TX_PWR_STRONG_RSSI",
          v2,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  unsigned __int16 v3 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DD58, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DD58, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DD58, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DD58,
         @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
         &off_10023DD58,
         @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
         &off_10023DD58,
         @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
         &off_10023DD58,
         @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
         &off_10023DD58,
         @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
         &off_10023DD58,
         @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
         &off_10023DD58,
         @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
         &off_10023DD58,
         @"UCM_HYBRID_ANT_CORE_CONFIG",
         +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DD58, @"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", v2, @"UCM_ACK_PWR_STRONG_RSSI", v2, @"UCM_ACK_PWR_WEAK_RSSI", v2, @"UCM_TX_PWR_STRONG_RSSI", v2, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
             NSDictionary,
             "dictionaryWithObjectsAndKeys:",
             @"UCM_DESENSE_STRONG_RSSI",
             &off_10023DD58,
             @"UCM_DESENSE_WEAK_RSSI",
             v2,
             @"UCM_ACK_PWR_STRONG_RSSI",
             v2,
             @"UCM_ACK_PWR_WEAK_RSSI",
             v2,
             @"UCM_TX_PWR_STRONG_RSSI",
             v2,
             @"UCM_TX_PWR_WEAK_RSSI",
             0),
           0),
         @"UCM_CHAIN_ATTR",
         0);

  return [a1 setWcmWiFiBTCoexProfileDefault5G:v3];
}

id sub_1001025A4(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:-60];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-40];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-40];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-50];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-50];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:6790];
  [a1 setWcmWCI2MWSInactivityAssertJitter:192];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:500];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023E2B0];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  id v57 = a1;
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  uint64_t v96 = 0;
  uint64_t v97 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex045_V7WiFiEnh", @"plist") options:2 format:&v96 error:&v97];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  v55[1] = v55;
  __chkstk_darwin(v4, v5, v6);
  unsigned int v56 = (char *)v55 - v7 * (unint64_t)v8;
  uint64_t v9 = &v56[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v9 = 211;
  *(_OWORD *)(v9 + 4) = 0u;
  *(_OWORD *)(v9 + 20) = 0u;
  *(_OWORD *)(v9 + 36) = 0u;
  *(_OWORD *)(v9 + 52) = 0u;
  *(_OWORD *)(v9 + 68) = 0u;
  *(_OWORD *)(v9 + 84) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  unsigned __int16 v10 = (unsigned __int16)[v2 count];
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = v56 + 56;
    uint64_t v58 = v10;
    do
    {
      __int16 v94 = 0;
      char v95 = 0;
      v93[0] = 0;
      *(_DWORD *)((char *)v93 + 3) = 0;
      LODWORD(v92) = [[[v2 objectAtIndex:v11] objectForKey:@"issueBand"] intValue];
      LODWORD(v91) = [[[v2 objectAtIndex:v11] objectForKey:@"issueType"] intValue];
      unsigned int v90 = [[[v2 objectAtIndex:v11] objectForKey:@"isWiFiDesense"] BOOLValue];
      unsigned int v89 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v88 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v87 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v86 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v85 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v84 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v83 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v82 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap111"] intValue];
      unsigned int v81 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v80 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v79 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v78 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v77 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v76 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v75 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v74 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap111"] intValue];
      uint64_t v73 = [(int)[v2 objectAtIndex:v11] objectForKey:@"cellTxPowerLimit"] intValue];
      double v13 = (double)(int)[v2 objectAtIndex:v11][@"cellFrequencyLimitForOOB"][@"intValue"];
      double v14 = (double)[(int)[v2 objectAtIndex:v11] objectForKey:@"cellBandwidthLimitForOOB"];
      unsigned int v72 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToAvoidForCellOOB"] intValue];
      unsigned int v71 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToAvoidForCellOOB"] intValue];
      unsigned int v70 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v69 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v68 = [[[v2 objectAtIndex:v11] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned int v67 = [[[v2 objectAtIndex:v11] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned int v66 = [[[v2 objectAtIndex:v11] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned int v65 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority"] intValue];
      unsigned int v64 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority_WiFi"] intValue];
      unsigned int v63 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority_BT"] intValue];
      unsigned int v62 = [[[v2 objectAtIndex:v11] objectForKey:@"CellAntBlk"] intValue];
      unsigned int v61 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToDisableOCLCellOOB"] intValue];
      unsigned int v60 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToDisableOCLCellOOB"] intValue];
      BOOL v59 = [[[v2 objectAtIndex:v11] objectForKey:@"isWifiEnhBand"] intValue] != 0;
      unsigned __int8 v15 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToAvoidForCellOOBPHS"] intValue];
      unsigned __int8 v16 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToAvoidForCellOOBPHS"] intValue];
      unsigned __int8 v17 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii1Enabled"] boolValue];
      unsigned __int8 v18 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii3Enabled"] boolValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5aEnabled"] BOOLValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5bEnabled"] BOOLValue];
      unsigned __int8 v21 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5cEnabled"] boolValue];
      unsigned __int8 v22 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5dEnabled"] BOOLValue];
      int v23 = (int)v91;
      *((_DWORD *)v12 - 14) = v92;
      *((_DWORD *)v12 - 13) = v23;
      *(v12 - 48) = v90;
      *(v12 - 43) = v89;
      *(v12 - 42) = v88;
      *(v12 - 41) = v87;
      *(v12 - 40) = v86;
      *(v12 - 39) = v85;
      *(v12 - 38) = v84;
      *(v12 - 37) = v83;
      *(v12 - 36) = v82;
      *(_DWORD *)(v12 - 47) = 0;
      *(v12 - 35) = v81;
      *(v12 - 34) = v80;
      *(v12 - 33) = v79;
      *(v12 - 32) = v78;
      *(v12 - 31) = v77;
      *(v12 - 30) = v76;
      *(v12 - 29) = v75;
      *(v12 - 28) = v74;
      *(_WORD *)(v12 - 27) = v94;
      *(v12 - 25) = v95;
      *((void *)v12 - 3) = v73;
      *((double *)v12 - 2) = v13;
      *((double *)v12 - 1) = v14;
      *uint64_t v12 = v72;
      v12[1] = v71;
      v12[2] = v70;
      void v12[3] = v69;
      unsigned int v24 = v68;
      *((_DWORD *)v12 + 1) = 0;
      *((_DWORD *)v12 + 2) = v24;
      *(void *)(v12 + 12) = 0;
      *((_WORD *)v12 + 10) = 0;
      v12[22] = v67;
      v12[23] = v66;
      *((void *)v12 + 3) = 0;
      v12[32] = 0;
      v12[33] = v65;
      v12[34] = v64;
      v12[35] = v63;
      v12[36] = 0;
      v12[37] = v62;
      v12[38] = v61;
      v12[39] = v60;
      v12[40] = v59;
      v12[41] = v15;
      v12[42] = v16;
      v12[43] = v17;
      v12[44] = v18;
      v12[45] = v19;
      v12[46] = v20;
      v12[47] = v21;
      v12[48] = v22;
      int v25 = v93[0];
      ++v11;
      *((_DWORD *)v12 + 13) = *(_DWORD *)((char *)v93 + 3);
      uint64_t v26 = v58;
      *(_DWORD *)(v12 + 49) = v25;
      v12 += 112;
    }
    while (v26 != v11);
  }
  id v27 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v28 = v57;
  [v57 setWcmWiFiCellCoexIssueTable:v27];
  id v29 = [v28 wcmWiFiCellCoexIssueTable];
  [v29 configureBy:v56];
  [v28 setWcmCellRc1CoexIssueTable:0];
  [v28 setWcmCellularCoexB7ULRange:2500.0, 10.1];
  [v28 setWcmCellularCoexB7DLRange:2620.0, 10.1];
  [v28 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v28 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v28 setWcmCellularCoexB41A1Range:2496.0, 10.1];
  [v28 setWcmCellularCoexB41A2Range:2506.1, 20.0];
  [v28 setWcmCellularScanProtectionCellFrequencies:&off_10024F5C8];
  if (_os_feature_enabled_impl()) {
    int v30 = &off_10024F628;
  }
  else {
    int v30 = &off_10024F688;
  }
  [v28 setWcmCellularScanProtectionCellFrequenciesforBT:v30];
  [v28 setWcmCellularScanProtectionWiFiChannels:&off_10024F6E8];
  [v28 setWcmCellularScanProtectionWiFiChannelsWiFiEnh:&off_10024F748];
  [v28 setWcmCellularWCI2ModeControllerLTERBThreshold:[NSNumber numberWithInt:41]];
  [v28 setWcmCellularWCI2ModeLTEHarqnackratioThreshold:[NSNumber numberWithInt:10]];
  [v28 setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable:[NSNumber numberWithBool:1]];
  id v91 = NSArray;
  id v92 = NSDictionary;
  id v31 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DD58, @"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v32 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DD58, @"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v33 = [v91 arrayWithObjects:v31, v32];
  id v34 = objc_msgSend(v92, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DEF0,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DF08,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DEC0,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DF08,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEC0,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v33,
          @"UCM_CHAIN_ATTR",
          0);
  [v57 setWcmWiFiBTCoexProfileDefault:v34];
  id v91 = NSArray;
  id v92 = NSDictionary;
  id v35 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  int v36 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v37 = [v91 arrayWithObjects:v35, v36];
  id v38 = objc_msgSend(v92, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DCC8, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DED8, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DEF0, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DEF0,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DFB0,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DF80,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v37,
          @"UCM_CHAIN_ATTR",
          0);
  [v57 setWcmWiFiBTCoexProfileLight:v38];
  id v91 = NSArray;
  id v92 = NSDictionary;
  id v39 = &off_10023DC68;
  uint64_t v40 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  uint64_t v41 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v42 = [v91 arrayWithObjects:v40, v41];
  id v43 = objc_msgSend(v92, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", v39, @"UCM_MODE_STRONG_WL_BT", v39, @"UCM_MODE_WEAK_WL", v39, @"UCM_MODE_WEAK_BT", v39, @"UCM_MODE_WEAK_WL_BT", &off_10023DEF0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF50, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DF80, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DF98,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DF50,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DF50,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v42,
          @"UCM_CHAIN_ATTR",
          0);
  [v57 setWcmWiFiBTCoexProfileHeavyHFP:v43];
  id v91 = NSArray;
  id v92 = NSDictionary;
  int v44 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  unsigned int v45 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v46 = [v91 arrayWithObjects:v44, v45, nil];
  id v47 = objc_msgSend(v92, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", v39, @"UCM_MODE_STRONG_WL_BT", v39, @"UCM_MODE_WEAK_WL", v39, @"UCM_MODE_WEAK_BT", v39, @"UCM_MODE_WEAK_WL_BT", &off_10023DF50, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF68, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DFB0, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DF80,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DF50,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DF68,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DF50,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DF68,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v46,
          @"UCM_CHAIN_ATTR",
          0);
  id v48 = v57;
  [v57 setWcmWiFiBTCoexProfileHeavyA2DP:v47];
  id v91 = NSArray;
  id v92 = NSDictionary;
  unsigned int v49 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DD58, @"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  unsigned int v50 = +[NSDictionary dictionaryWithObjectsAndKeys:@"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v51 = [v91 arrayWithObjects:v49, v50];
  objc_msgSend(v48, "setWcmWiFiBTCoexProfileTDD:", objc_msgSend(v92, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      v51,
      @"UCM_CHAIN_ATTR",
      0));
  id v92 = NSDictionary;
  unsigned int v52 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DD58, @"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
            NSDictionary,
            "dictionaryWithObjectsAndKeys:",
            @"UCM_DESENSE_STRONG_RSSI",
            &off_10023DD58,
            @"UCM_DESENSE_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  id v53 = objc_msgSend(v92, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DD58, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DD58, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DD58, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DD58,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v52,
          @"UCM_CHAIN_ATTR",
          0);
  return [v57 setWcmWiFiBTCoexProfileDefault5G:v53];
}

id sub_100103D48(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmBTMaxNumberOfChannelsToAvoidForCellOOB:&off_10023DE60];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiCellCoexIssueTable:objc_alloc_init(WCM_WiFiCellCoexIssueBandTable)];
  [objc_msgSend(a1, "wcmWiFiCellCoexIssueTable") configureBy:&unk_1001ECA90];
  [a1 setWcmCellularCoexB7ULRange:2500.0, 10.1];
  [a1 setWcmCellularCoexB7DLRange:2620.0, 10.1];
  [a1 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [a1 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [a1 setWcmCellularCoexB41A1Range:2496.0, 10.1];
  [a1 setWcmCellularCoexB41A2Range:2506.1, 20.0];
  [a1 setWcmCellularScanProtectionCellFrequencies:&off_10024F778];

  return [a1 setWcmCellularScanProtectionWiFiChannels:&off_10024F7A8];
}

id sub_100103E90(void *a1)
{
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileDefault:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DD58, @"UCM_DESENSE_LEVEL", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_10023DD58,
          @"UCM_DESENSE_LEVEL",
          &off_10023DF38,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileLight:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DED8, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DEF0, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DFB0,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF80,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_LEVEL", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_10023DCC8,
          @"UCM_DESENSE_LEVEL",
          &off_10023DF38,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavyHFP:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEF0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF50, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF80,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DF98,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_LEVEL", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_10023DCC8,
          @"UCM_DESENSE_LEVEL",
          &off_10023DF38,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavyA2DP:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DF50, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF68, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DFB0,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DF80,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF68,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DF68,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_LEVEL", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_10023DCC8,
          @"UCM_DESENSE_LEVEL",
          &off_10023DF38,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  uint64_t v1 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DEF0,
         @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
         &off_10023DF08,
         @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
         &off_10023DEC0,
         @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
         &off_10023DF08,
         @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
         &off_10023DEC0,
         @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
         &off_10023DED8,
         @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
         &off_10023DED8,
         @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
         &off_10023DD58,
         @"UCM_HYBRID_ANT_CORE_CONFIG",
         +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DD58, @"UCM_DESENSE_LEVEL", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
             &off_10023DD58,
             @"UCM_DESENSE_LEVEL",
             &off_10023DD88,
             @"UCM_ACK_PWR_STRONG_RSSI",
             &off_10023DD88,
             @"UCM_ACK_PWR_WEAK_RSSI",
             &off_10023DD88,
             @"UCM_TX_PWR_STRONG_RSSI",
             &off_10023DD88,
             @"UCM_TX_PWR_WEAK_RSSI",
             0),
           0),
         @"UCM_CHAIN_ATTR",
         0);

  return [a1 setWcmWiFiBTCoexProfileTDD:v1];
}

id sub_100104790(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:1750];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-150];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-150];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-250];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-250];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:0];
  [a1 setWcmWCI2MWSInactivityAssertJitter:4];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:0];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023E2B0];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  [a1 setWcmWiFiCellCoexIssueTable:objc_alloc_init(WCM_WiFiCellCoexIssueBandTable)];
  [objc_msgSend(a1, "wcmWiFiCellCoexIssueTable") configureBy:&unk_1001ED200];
  [a1 setWcmCellularCoexB7ULRange:2500.0, 10.1];
  [a1 setWcmCellularCoexB7DLRange:2620.0, 10.1];
  [a1 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [a1 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [a1 setWcmCellularCoexB41A1Range:2496.0, 10.1];
  [a1 setWcmCellularCoexB41A2Range:2506.1, 20.0];
  [a1 setWcmCellularScanProtectionCellFrequencies:&off_10024F7F0];
  [a1 setWcmCellularScanProtectionWiFiChannels:&off_10024F838];
  [a1 setWcmCellularWCI2ModeControllerLTERBThreshold:+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 41)];
  [a1 setWcmCellularWCI2ModeLTEHarqnackratioThreshold:[NSNumber numberWithInt:10]];
  [a1 setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable:[NSNumber numberWithBool:1]];
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileDefault:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DD58, @"UCM_DESENSE_LEVEL", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_10023DD58,
          @"UCM_DESENSE_LEVEL",
          &off_10023DF38,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileLight:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DED8, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DEF0, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DFB0,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF80,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_LEVEL", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_10023DCC8,
          @"UCM_DESENSE_LEVEL",
          &off_10023DF38,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavyHFP:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEF0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF50, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF80,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DF98,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_LEVEL", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_10023DCC8,
          @"UCM_DESENSE_LEVEL",
          &off_10023DF38,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavyA2DP:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DF50, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF68, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DFB0,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DF80,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF68,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DF68,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_LEVEL", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_10023DCC8,
          @"UCM_DESENSE_LEVEL",
          &off_10023DF38,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  id v2 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DEF0,
         @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
         &off_10023DF08,
         @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
         &off_10023DEC0,
         @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
         &off_10023DF08,
         @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
         &off_10023DEC0,
         @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
         &off_10023DED8,
         @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
         &off_10023DED8,
         @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
         &off_10023DD58,
         @"UCM_HYBRID_ANT_CORE_CONFIG",
         +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DD58, @"UCM_DESENSE_LEVEL", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
             &off_10023DD58,
             @"UCM_DESENSE_LEVEL",
             &off_10023DD88,
             @"UCM_ACK_PWR_STRONG_RSSI",
             &off_10023DD88,
             @"UCM_ACK_PWR_WEAK_RSSI",
             &off_10023DD88,
             @"UCM_TX_PWR_STRONG_RSSI",
             &off_10023DD88,
             @"UCM_TX_PWR_WEAK_RSSI",
             0),
           0),
         @"UCM_CHAIN_ATTR",
         0);

  return [a1 setWcmWiFiBTCoexProfileTDD:v2];
}

id sub_10010536C(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:-60];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-40];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-40];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-50];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-50];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:6790];
  [a1 setWcmWCI2MWSInactivityAssertJitter:192];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:500];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023DFC8];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  id v40 = a1;
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex004_WiFiEnh_v1", @"plist") options:2 format:&v72 error:&v73];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  v39[1] = v39;
  __chkstk_darwin(v4, v5, v6);
  id v42 = (char *)v39 - v7 * (unint64_t)v8;
  uint64_t v9 = &v42[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v9 = 211;
  *(_OWORD *)(v9 + 4) = 0u;
  *(_OWORD *)(v9 + 20) = 0u;
  *(_OWORD *)(v9 + 36) = 0u;
  *(_OWORD *)(v9 + 52) = 0u;
  *(_OWORD *)(v9 + 68) = 0u;
  *(_OWORD *)(v9 + 84) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  unsigned __int16 v10 = (unsigned __int16)[v2 count];
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v41 = 112 * v10;
    do
    {
      __int16 v70 = 0;
      char v71 = 0;
      v69[0] = 0;
      *(_DWORD *)((char *)v69 + 3) = 0;
      LODWORD(v68) = [[[v2 objectAtIndex:v12] objectForKey:@"issueBand"] intValue];
      LODWORD(v67) = [[[v2 objectAtIndex:v12] objectForKey:@"issueType"] intValue];
      unsigned int v66 = [[[v2 objectAtIndex:v12] objectForKey:@"isWiFiDesense"] BOOLValue];
      unsigned int v65 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v64 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v63 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v62 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v61 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v60 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v59 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v58 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap111"] intValue];
      unsigned int v57 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v56 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v55 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v54 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v53 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v52 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v51 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v50 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap111"] intValue];
      uint64_t v49 = [(int)[v2 objectAtIndex:v12] objectForKey:@"cellTxPowerLimit"] intValue];
      double v13 = (double)(int)[v2 objectAtIndex:v12][@"cellFrequencyLimitForOOB"][@"intValue"];
      double v14 = (double)(int)[v2 objectAtIndex:v12][@"cellBandwidthLimitForOOB"][@"intValue"];
      unsigned int v48 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiFirstChannelToAvoidForCellOOB"] intValue];
      unsigned int v47 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiLastChannelToAvoidForCellOOB"] intValue];
      unsigned int v46 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiFirstChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v45 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiLastChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v44 = [[[v2 objectAtIndex:v12] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned int v43 = [[[v2 objectAtIndex:v12] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned __int8 v15 = [[[v2 objectAtIndex:v12] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned __int8 v16 = [[[v2 objectAtIndex:v12] objectForKey:@"ulcaPriority"] intValue];
      unsigned __int8 v17 = [[[v2 objectAtIndex:v12] objectForKey:@"ulcaPriority_WiFi"] intValue];
      unsigned __int8 v18 = [[[v2 objectAtIndex:v12] objectForKey:@"ulcaPriority_BT"] intValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v12] objectForKey:@"CellAntBlk"] intValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiFirstChannelToDisableOCLCellOOB"] intValue];
      unsigned __int8 v21 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiLastChannelToDisableOCLCellOOB"] intValue];
      unsigned int v22 = [[[v2 objectAtIndex:v12++] objectForKey:@"isWifiEnhBand"] intValue];
      int v23 = &v42[v11];
      int v24 = (int)v67;
      *(_DWORD *)int v23 = v68;
      *((_DWORD *)v23 + 1) = v24;
      v23[8] = v66;
      char v25 = v64;
      v23[13] = v65;
      *(_DWORD *)(v23 + 9) = 0;
      v23[14] = v25;
      v23[15] = v63;
      v23[16] = v62;
      v23[17] = v61;
      v23[18] = v60;
      v23[19] = v59;
      v23[20] = v58;
      v23[21] = v57;
      v23[22] = v56;
      v23[23] = v55;
      v23[24] = v54;
      v23[25] = v53;
      v23[26] = v52;
      v23[27] = v51;
      v23[28] = v50;
      *(_WORD *)(v23 + 29) = v70;
      v23[31] = v71;
      *((void *)v23 + 4) = v49;
      *((double *)v23 + 5) = v13;
      *((double *)v23 + 6) = v14;
      v23[56] = v48;
      v23[57] = v47;
      v23[58] = v46;
      v23[59] = v45;
      unsigned int v26 = v44;
      *((_DWORD *)v23 + 15) = 0;
      *((_DWORD *)v23 + 16) = v26;
      *(void *)(v23 + 68) = 0;
      *((_WORD *)v23 + 38) = 0;
      v23[78] = v43;
      v23[79] = v15;
      *((void *)v23 + 10) = 0;
      v23[88] = 0;
      v23[89] = v16;
      v23[90] = v17;
      v23[91] = v18;
      v23[92] = 0;
      v23[93] = v19;
      v23[94] = v20;
      v23[95] = v21;
      v23[96] = v22 != 0;
      *(void *)(v23 + 97) = 0;
      *((_DWORD *)v23 + 27) = *(_DWORD *)((char *)v69 + 3);
      v11 += 112;
      *(_DWORD *)(v23 + 105) = v69[0];
    }
    while (v41 != v11);
  }
  id v27 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v28 = v40;
  [v40 setWcmWiFiCellCoexIssueTable:v27];
  id v29 = [v28 wcmWiFiCellCoexIssueTable];
  [v29 configureBy:v42];
  [v28 setWcmCellularCoexB7ULRange:2500.0, 10.1];
  [v28 setWcmCellularCoexB7DLRange:2620.0, 10.1];
  [v28 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v28 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v28 setWcmCellularCoexB41A1Range:2496.0, 10.1];
  [v28 setWcmCellularCoexB41A2Range:2506.1, 20.0];
  [v28 setWcmCellularScanProtectionCellFrequencies:&off_10024F8C8];
  [v28 setWcmCellularScanProtectionWiFiChannels:&off_10024F958];
  [v28 setWcmCellularWCI2ModeControllerLTERBThreshold:[NSNumber numberWithInt:41]];
  [v28 setWcmCellularWCI2ModeLTEHarqnackratioThreshold:[NSNumber numberWithInt:10]];
  [v28 setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable:[NSNumber numberWithBool:1]];
  id v67 = NSArray;
  id v68 = NSDictionary;
  int v30 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DD58, @"UCM_DESENSE_LEVEL", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v31 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DD58, @"UCM_DESENSE_LEVEL", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v32 = [v67 arrayWithObjects:v30, v31, nil];
  objc_msgSend(v28, "setWcmWiFiBTCoexProfileDefault:", objc_msgSend(v68, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      v32,
      @"UCM_CHAIN_ATTR",
      0));
  id v68 = NSDictionary;
  id v33 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_LEVEL", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_10023DCC8,
            @"UCM_DESENSE_LEVEL",
            &off_10023DF38,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DF38,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  objc_msgSend(v28, "setWcmWiFiBTCoexProfileLight:", objc_msgSend(v68, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DED8, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DEF0, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DFB0,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF80,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      v33,
      @"UCM_CHAIN_ATTR",
      0));
  id v68 = NSDictionary;
  id v34 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_LEVEL", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_10023DCC8,
            @"UCM_DESENSE_LEVEL",
            &off_10023DF38,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DF38,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  objc_msgSend(v28, "setWcmWiFiBTCoexProfileHeavyHFP:", objc_msgSend(v68, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEF0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF50, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF80,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DF98,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      v34,
      @"UCM_CHAIN_ATTR",
      0));
  id v68 = NSDictionary;
  id v35 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_LEVEL", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_10023DCC8,
            @"UCM_DESENSE_LEVEL",
            &off_10023DF38,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DF38,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  objc_msgSend(v28, "setWcmWiFiBTCoexProfileHeavyA2DP:", objc_msgSend(v68, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DF50, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF68, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DFB0,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DF80,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF68,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DF68,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      v35,
      @"UCM_CHAIN_ATTR",
      0));
  id v68 = NSDictionary;
  int v36 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DD58, @"UCM_DESENSE_LEVEL", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_10023DD58,
            @"UCM_DESENSE_LEVEL",
            &off_10023DD88,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  id v37 = objc_msgSend(v68, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DEF0,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DF08,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DEC0,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DF08,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEC0,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v36,
          @"UCM_CHAIN_ATTR",
          0);
  return [v40 setWcmWiFiBTCoexProfileTDD:v37];
}

id sub_100106728(void *a1)
{
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileDefault:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC68, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DED8, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DEF0, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC68, @"UCM_DESENSE_LEVEL", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_10023DC68,
          @"UCM_DESENSE_LEVEL",
          &off_10023DD88,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileLight:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC68, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DFB0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF80, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC68, @"UCM_DESENSE_LEVEL", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_10023DC68,
          @"UCM_DESENSE_LEVEL",
          &off_10023DF20,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavyHFP:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC68, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DF50, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF68, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023E310,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023E328,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF68,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DF68,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC68, @"UCM_DESENSE_LEVEL", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_10023DC68,
          @"UCM_DESENSE_LEVEL",
          &off_10023DF20,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavyA2DP:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC68, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DF50, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF68, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023E310,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023E328,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF68,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DF68,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC68, @"UCM_DESENSE_LEVEL", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_10023DC68,
          @"UCM_DESENSE_LEVEL",
          &off_10023DF20,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  uint64_t v1 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC68, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DED8, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DEF0, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DEF0,
         @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
         &off_10023DED8,
         @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
         &off_10023DEF0,
         @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
         &off_10023DED8,
         @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
         &off_10023DEF0,
         @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
         &off_10023DED8,
         @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
         &off_10023DED8,
         @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
         +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC68, @"UCM_DESENSE_LEVEL", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
             &off_10023DC68,
             @"UCM_DESENSE_LEVEL",
             &off_10023DD88,
             @"UCM_ACK_PWR_STRONG_RSSI",
             &off_10023DD88,
             @"UCM_ACK_PWR_WEAK_RSSI",
             &off_10023DD88,
             @"UCM_TX_PWR_STRONG_RSSI",
             &off_10023DD88,
             @"UCM_TX_PWR_WEAK_RSSI",
             0),
           0),
         @"UCM_CHAIN_ATTR",
         0);

  return [a1 setWcmWiFiBTCoexProfileTDD:v1];
}

id sub_100106F0C(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023E2B0];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  [a1 setWcmWiFiCellCoexIssueTable:objc_alloc_init(WCM_WiFiCellCoexIssueBandTable)];
  [objc_msgSend(a1, "wcmWiFiCellCoexIssueTable") configureBy:&unk_1001EE1C0];
  [a1 setWcmCellularCoexB7ULRange:2500.0, 10.1];
  [a1 setWcmCellularCoexB7DLRange:2620.0, 10.1];
  [a1 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [a1 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [a1 setWcmCellularCoexB41A1Range:2496.0, 10.1];
  [a1 setWcmCellularCoexB41A2Range:2506.1, 20.0];
  [a1 setWcmCellularScanProtectionCellFrequencies:&off_10024F9A0];
  [a1 setWcmCellularScanProtectionWiFiChannels:&off_10024F9E8];
  [a1 setWcmCellularWCI2ModeControllerLTERBThreshold:[NSNumber numberWithInt:41]];
  [a1 setWcmCellularWCI2ModeLTEHarqnackratioThreshold:[NSNumber numberWithInt:10]];
  id v2 = +[NSNumber numberWithBool:1];

  return [a1 setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable:v2];
}

id sub_100107100(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:1750];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-150];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-150];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-250];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-250];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:0];
  [a1 setWcmWCI2MWSInactivityAssertJitter:4];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:0];
  [a1 setWcmWiFiCellCoexIssueTable:objc_alloc_init(WCM_WiFiCellCoexIssueBandTable)];
  [objc_msgSend(a1, "wcmWiFiCellCoexIssueTable") configureBy:&unk_1001EE930];
  [a1 setWcmCellularCoexB7ULRange:2500.0, 10.1];
  [a1 setWcmCellularCoexB7DLRange:2620.0, 10.1];
  [a1 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [a1 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [a1 setWcmCellularCoexB41A1Range:2496.0, 10.1];
  [a1 setWcmCellularCoexB41A2Range:2506.1, 20.0];
  [a1 setWcmCellularScanProtectionCellFrequencies:&off_10024FA30];
  [a1 setWcmCellularScanProtectionWiFiChannels:&off_10024FA78];
  [a1 setWcmCellularWCI2ModeControllerLTERBThreshold:[NSNumber numberWithInt:41]];
  [a1 setWcmCellularWCI2ModeLTEHarqnackratioThreshold:[NSNumber numberWithInt:10]];
  [a1 setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable:[NSNumber numberWithBool:1]];
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileDefault:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC68, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DED8, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DEF0, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC68, @"UCM_DESENSE_LEVEL", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_10023DC68,
          @"UCM_DESENSE_LEVEL",
          &off_10023DD88,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  id v2 = &off_10023DC68;
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileLight:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", v2, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", v2, @"UCM_MODE_WEAK_WL", v2, @"UCM_MODE_WEAK_BT", v2, @"UCM_MODE_WEAK_WL_BT", &off_10023DFB0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF80, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC68, @"UCM_DESENSE_LEVEL", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_10023DC68,
          @"UCM_DESENSE_LEVEL",
          &off_10023DF20,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavyHFP:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", v2, @"UCM_VERSION", v2, @"UCM_MODE_STRONG_WL_BT", v2, @"UCM_MODE_WEAK_WL", v2, @"UCM_MODE_WEAK_BT", v2, @"UCM_MODE_WEAK_WL_BT", &off_10023DF50, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF68, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023E310,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023E328,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF68,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DF68,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC68, @"UCM_DESENSE_LEVEL", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_10023DC68,
          @"UCM_DESENSE_LEVEL",
          &off_10023DF20,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavyA2DP:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", v2, @"UCM_VERSION", v2, @"UCM_MODE_STRONG_WL_BT", v2, @"UCM_MODE_WEAK_WL", v2, @"UCM_MODE_WEAK_BT", v2, @"UCM_MODE_WEAK_WL_BT", &off_10023DF50, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF68, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023E310,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023E328,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF68,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DF68,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC68, @"UCM_DESENSE_LEVEL", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_10023DC68,
          @"UCM_DESENSE_LEVEL",
          &off_10023DF20,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  unsigned __int16 v3 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC68, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DED8, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DEF0, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DEF0,
         @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
         &off_10023DED8,
         @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
         &off_10023DEF0,
         @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
         &off_10023DED8,
         @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
         &off_10023DEF0,
         @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
         &off_10023DED8,
         @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
         &off_10023DED8,
         @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
         +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC68, @"UCM_DESENSE_LEVEL", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
             &off_10023DC68,
             @"UCM_DESENSE_LEVEL",
             &off_10023DD88,
             @"UCM_ACK_PWR_STRONG_RSSI",
             &off_10023DD88,
             @"UCM_ACK_PWR_WEAK_RSSI",
             &off_10023DD88,
             @"UCM_TX_PWR_STRONG_RSSI",
             &off_10023DD88,
             @"UCM_TX_PWR_WEAK_RSSI",
             0),
           0),
         @"UCM_CHAIN_ATTR",
         0);

  return [a1 setWcmWiFiBTCoexProfileTDD:v3];
}

id sub_100107B68(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:1750];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-150];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-150];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-250];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-250];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:0];
  [a1 setWcmWCI2MWSInactivityAssertJitter:4];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  id v44 = a1;
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:0];
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex005_v1.2_NewEnum_v4Macro", @"plist") options:2 format:&v63 error:&v64];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  v42[1] = v42;
  __chkstk_darwin(v4, v5, v6);
  unsigned int v43 = (char *)v42 - v7 * (unint64_t)v8;
  uint64_t v9 = &v43[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v9 = 211;
  *(_OWORD *)(v9 + 4) = 0u;
  *(_OWORD *)(v9 + 20) = 0u;
  *(_OWORD *)(v9 + 36) = 0u;
  *(_OWORD *)(v9 + 52) = 0u;
  *(_OWORD *)(v9 + 68) = 0u;
  *(_OWORD *)(v9 + 84) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  if (v3)
  {
    uint64_t v10 = 0;
    uint64_t v11 = v43 + 56;
    uint64_t v45 = v3;
    do
    {
      memset(v62, 0, 7);
      LODWORD(v61) = [[[v2 objectAtIndex:v10] objectForKey:@"issueBand"] intValue];
      LODWORD(v60) = [[[v2 objectAtIndex:v10] objectForKey:@"issueType"] intValue];
      unsigned int v59 = [[[v2 objectAtIndex:v10] objectForKey:@"isWiFiDesense"] boolValue];
      unsigned int v58 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellLAT"] intValue];
      unsigned int v57 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellUAT"] intValue];
      unsigned int v56 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellLAT"] intValue];
      unsigned int v55 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellUAT"] intValue];
      uint64_t v54 = [(int)[v2 objectAtIndex:v10] objectForKey:@"cellTxPowerLimit"] intValue];
      double v12 = (double)(int)[v2 objectAtIndex:v10][@"cellFrequencyLimitForOOB"][@"intValue"];
      double v13 = (double)[(int)[v2 objectAtIndex:v10] objectForKey:@"cellBandwidthLimitForOOB"];
      unsigned int v53 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiFirstChannelToAvoidForCellOOB"] intValue];
      unsigned int v52 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiLastChannelToAvoidForCellOOB"] intValue];
      unsigned int v51 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiFirstChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v50 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiLastChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v49 = [[[v2 objectAtIndex:v10] objectForKey:@"btDiversityBlocklistTypeForC0B0"] intValue];
      unsigned int v48 = [[[v2 objectAtIndex:v10] objectForKey:@"btDiversityBlocklistTypeForC0B1"] intValue];
      unsigned int v47 = [[[v2 objectAtIndex:v10] objectForKey:@"btDiversityBlocklistTypeForC1B0"] intValue];
      unsigned int v46 = [[[v2 objectAtIndex:v10] objectForKey:@"btDiversityBlocklistTypeForC1B1"] intValue];
      unsigned __int8 v14 = [[[v2 objectAtIndex:v10] objectForKey:@"btFirstChannelToAvoidForC0B0"] intValue];
      unsigned __int8 v15 = [[[v2 objectAtIndex:v10] objectForKey:@"btLastChannelToAvoidForC0B0"] intValue];
      unsigned __int8 v16 = [[[v2 objectAtIndex:v10] objectForKey:@"btFirstChannelToAvoidForC0B1"] intValue];
      unsigned __int8 v17 = [[[v2 objectAtIndex:v10] objectForKey:@"btLastChannelToAvoidForC0B1"] intValue];
      unsigned __int8 v18 = [[[v2 objectAtIndex:v10] objectForKey:@"btFirstChannelToAvoidForC1B0"] intValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v10] objectForKey:@"btLastChannelToAvoidForC1B0"] intValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v10] objectForKey:@"btFirstChannelToAvoidForC1B1"] intValue];
      unsigned __int8 v21 = [[[v2 objectAtIndex:v10] objectForKey:@"btLastChannelToAvoidForC1B1"] intValue];
      uint64_t v22 = v45;
      int v23 = (int)v60;
      *((_DWORD *)v11 - 14) = v61;
      *((_DWORD *)v11 - 13) = v23;
      *(v11 - 48) = v59;
      *(v11 - 47) = v58;
      *(v11 - 46) = v57;
      *(v11 - 45) = v56;
      *(v11 - 44) = v55;
      *(void *)(v11 - 35) = 0;
      *(void *)(v11 - 43) = 0;
      *((_DWORD *)v11 - 7) = 0;
      *((void *)v11 - 3) = v54;
      *((double *)v11 - 2) = v12;
      *((double *)v11 - 1) = v13;
      *uint64_t v11 = v53;
      v11[1] = v52;
      v11[2] = v51;
      v11[3] = v50;
      unsigned int v24 = v48;
      *((_DWORD *)v11 + 1) = v49;
      *((_DWORD *)v11 + 2) = v24;
      unsigned int v25 = v46;
      *((_DWORD *)v11 + 3) = v47;
      *((_DWORD *)v11 + 4) = v25;
      v11[20] = v14;
      v11[21] = v15;
      v11[22] = v16;
      v11[23] = v17;
      v11[24] = v18;
      v11[25] = v19;
      v11[26] = v20;
      v11[27] = v21;
      *(void *)(v11 + 36) = 0;
      *(void *)(v11 + 28) = 0;
      *(void *)(v11 + 41) = 0;
      *((_DWORD *)v11 + 13) = *(_DWORD *)((char *)v62 + 3);
      ++v10;
      *(_DWORD *)(v11 + 49) = v62[0];
      v11 += 112;
    }
    while (v22 != v10);
  }
  unsigned int v26 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v27 = v44;
  [v44 setWcmWiFiCellCoexIssueTable:v26];
  id v28 = [v27 wcmWiFiCellCoexIssueTable];
  [v28 configureBy:v43];
  [v27 setWcmCellularCoexB7ULRange:2500.0, 10.1];
  [v27 setWcmCellularCoexB7DLRange:2620.0, 10.1];
  [v27 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v27 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v27 setWcmCellularCoexB41A1Range:2496.0, 10.1];
  [v27 setWcmCellularCoexB41A2Range:2506.1, 20.0];
  [v27 setWcmCellularScanProtectionCellFrequencies:&off_10024FAC0];
  [v27 setWcmCellularScanProtectionWiFiChannels:&off_10024FB08];
  [v27 setWcmCellularWCI2ModeControllerLTERBThreshold:[NSNumber numberWithInt:41]];
  [v27 setWcmCellularWCI2ModeLTEHarqnackratioThreshold:[NSNumber numberWithInt:10]];
  [v27 setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable:[NSNumber numberWithBool:1]];
  id v61 = NSDictionary;
  id v29 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC68, @"UCM_DESENSE_LEVEL", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_10023DC68,
            @"UCM_DESENSE_LEVEL",
            &off_10023DD88,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  id v30 = objc_msgSend(v61, "dictionaryWithObjectsAndKeys:", &off_10023DC68, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DED8, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DEF0, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DEF0,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          v29,
          @"UCM_CHAIN_ATTR",
          0);
  id v31 = v44;
  [v44 setWcmWiFiBTCoexProfileDefault:v30];
  id v60 = NSArray;
  id v61 = NSDictionary;
  id v32 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DC68, @"UCM_DESENSE_LEVEL", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v33 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DC68, @"UCM_DESENSE_LEVEL", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v34 = [v60 arrayWithObjects:v32, v33];
  objc_msgSend(v31, "setWcmWiFiBTCoexProfileLight:", objc_msgSend(v61, "dictionaryWithObjectsAndKeys:", &off_10023DC68, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DFB0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF80, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      v34,
      @"UCM_CHAIN_ATTR",
      0));
  id v61 = NSDictionary;
  id v35 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC68, @"UCM_DESENSE_LEVEL", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_10023DC68,
            @"UCM_DESENSE_LEVEL",
            &off_10023DF20,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  id v36 = objc_msgSend(v61, "dictionaryWithObjectsAndKeys:", &off_10023DC68, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DF50, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF68, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023E310, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023E328,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DF50,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DF68,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DF50,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DF68,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          v35,
          @"UCM_CHAIN_ATTR",
          0);
  [v44 setWcmWiFiBTCoexProfileHeavyHFP:v36];
  id v61 = NSDictionary;
  id v37 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC68, @"UCM_DESENSE_LEVEL", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_10023DC68,
            @"UCM_DESENSE_LEVEL",
            &off_10023DF20,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  id v38 = objc_msgSend(v61, "dictionaryWithObjectsAndKeys:", &off_10023DC68, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DF50, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF68, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023E310, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023E328,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DF50,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DF68,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DF50,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DF68,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          v37,
          @"UCM_CHAIN_ATTR",
          0);
  [v44 setWcmWiFiBTCoexProfileHeavyA2DP:v38];
  id v61 = NSDictionary;
  id v39 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC68, @"UCM_DESENSE_LEVEL", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_10023DC68,
            @"UCM_DESENSE_LEVEL",
            &off_10023DD88,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  id v40 = objc_msgSend(v61, "dictionaryWithObjectsAndKeys:", &off_10023DC68, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DED8, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DEF0, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DEF0,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          v39,
          @"UCM_CHAIN_ATTR",
          0);
  return [v44 setWcmWiFiBTCoexProfileTDD:v40];
}

id sub_100108BD4(void *a1)
{
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileDefault:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DD58, @"UCM_DESENSE_LEVEL", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_10023DD58,
          @"UCM_DESENSE_LEVEL",
          &off_10023DD88,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileLight:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DED8, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DEF0, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DFB0,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF80,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_LEVEL", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_10023DCC8,
          @"UCM_DESENSE_LEVEL",
          &off_10023DF38,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavyHFP:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEF0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF50, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF80,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DF98,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_LEVEL", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_10023DCC8,
          @"UCM_DESENSE_LEVEL",
          &off_10023DF38,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavyA2DP:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DF50, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF68, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DFB0,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DF80,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF68,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DF68,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_LEVEL", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_10023DCC8,
          @"UCM_DESENSE_LEVEL",
          &off_10023DF38,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  uint64_t v1 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DEF0,
         @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
         &off_10023DF08,
         @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
         &off_10023DEC0,
         @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
         &off_10023DF08,
         @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
         &off_10023DEC0,
         @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
         &off_10023DED8,
         @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
         &off_10023DED8,
         @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
         &off_10023DD58,
         @"UCM_HYBRID_ANT_CORE_CONFIG",
         +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DD58, @"UCM_DESENSE_LEVEL", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
             &off_10023DD58,
             @"UCM_DESENSE_LEVEL",
             &off_10023DD88,
             @"UCM_ACK_PWR_STRONG_RSSI",
             &off_10023DD88,
             @"UCM_ACK_PWR_WEAK_RSSI",
             &off_10023DD88,
             @"UCM_TX_PWR_STRONG_RSSI",
             &off_10023DD88,
             @"UCM_TX_PWR_WEAK_RSSI",
             0),
           0),
         @"UCM_CHAIN_ATTR",
         0);

  return [a1 setWcmWiFiBTCoexProfileTDD:v1];
}

id sub_1001094C0(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:-60];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-40];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-40];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-50];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-50];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:6790];
  [a1 setWcmWCI2MWSInactivityAssertJitter:192];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:500];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023DFC8];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  id v41 = a1;
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex017_V6WiFiEnh", @"plist") options:2 format:&v73 error:&v74];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  v40[1] = v40;
  __chkstk_darwin(v4, v5, v6);
  unsigned int v43 = (char *)v40 - v7 * (unint64_t)v8;
  uint64_t v9 = &v43[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v9 = 211;
  *(_OWORD *)(v9 + 4) = 0u;
  *(_OWORD *)(v9 + 20) = 0u;
  *(_OWORD *)(v9 + 36) = 0u;
  *(_OWORD *)(v9 + 52) = 0u;
  *(_OWORD *)(v9 + 68) = 0u;
  *(_OWORD *)(v9 + 84) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  unsigned __int16 v10 = (unsigned __int16)[v2 count];
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v42 = 112 * v10;
    do
    {
      __int16 v71 = 0;
      char v72 = 0;
      v70[0] = 0;
      *(_DWORD *)((char *)v70 + 3) = 0;
      LODWORD(v69) = [[[v2 objectAtIndex:v12] objectForKey:@"issueBand"] intValue];
      LODWORD(v68) = [[[v2 objectAtIndex:v12] objectForKey:@"issueType"] intValue];
      unsigned int v67 = [[[v2 objectAtIndex:v12] objectForKey:@"isWiFiDesense"] BOOLValue];
      unsigned int v66 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v65 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v64 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v63 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v62 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v61 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v60 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v59 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap111"] intValue];
      unsigned int v58 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v57 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v56 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v55 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v54 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v53 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v52 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v51 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap111"] intValue];
      uint64_t v50 = (int)[v2 objectAtIndex:v12 objectForKey:@"cellTxPowerLimit" intValue];
      double v13 = (double)(int)[v2 objectAtIndex:v12][@"cellFrequencyLimitForOOB"][@"intValue"];
      double v14 = (double)(int)[v2 objectAtIndex:v12][@"cellBandwidthLimitForOOB"][@"intValue"];
      unsigned int v49 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiFirstChannelToAvoidForCellOOB"] intValue];
      unsigned int v48 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiLastChannelToAvoidForCellOOB"] intValue];
      unsigned int v47 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiFirstChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v46 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiLastChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v45 = [[[v2 objectAtIndex:v12] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned int v44 = [[[v2 objectAtIndex:v12] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned __int8 v15 = [[[v2 objectAtIndex:v12] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned __int8 v16 = [[[v2 objectAtIndex:v12] objectForKey:@"ulcaPriority"] intValue];
      unsigned __int8 v17 = [[[v2 objectAtIndex:v12] objectForKey:@"ulcaPriority_WiFi"] intValue];
      unsigned __int8 v18 = [[[v2 objectAtIndex:v12] objectForKey:@"ulcaPriority_BT"] intValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v12] objectForKey:@"CellAntBlk"] intValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiFirstChannelToDisableOCLCellOOB"] intValue];
      unsigned __int8 v21 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiLastChannelToDisableOCLCellOOB"] intValue];
      unsigned int v22 = [[[v2 objectAtIndex:v12++] objectForKey:@"isWifiEnhBand"] intValue];
      int v23 = &v43[v11];
      int v24 = (int)v68;
      *(_DWORD *)int v23 = v69;
      *((_DWORD *)v23 + 1) = v24;
      v23[8] = v67;
      char v25 = v65;
      v23[13] = v66;
      *(_DWORD *)(v23 + 9) = 0;
      v23[14] = v25;
      v23[15] = v64;
      v23[16] = v63;
      v23[17] = v62;
      v23[18] = v61;
      v23[19] = v60;
      v23[20] = v59;
      v23[21] = v58;
      v23[22] = v57;
      v23[23] = v56;
      v23[24] = v55;
      v23[25] = v54;
      v23[26] = v53;
      v23[27] = v52;
      v23[28] = v51;
      *(_WORD *)(v23 + 29) = v71;
      v23[31] = v72;
      *((void *)v23 + 4) = v50;
      *((double *)v23 + 5) = v13;
      *((double *)v23 + 6) = v14;
      v23[56] = v49;
      v23[57] = v48;
      v23[58] = v47;
      v23[59] = v46;
      unsigned int v26 = v45;
      *((_DWORD *)v23 + 15) = 0;
      *((_DWORD *)v23 + 16) = v26;
      *(void *)(v23 + 68) = 0;
      *((_WORD *)v23 + 38) = 0;
      v23[78] = v44;
      v23[79] = v15;
      *((void *)v23 + 10) = 0;
      v23[88] = 0;
      v23[89] = v16;
      v23[90] = v17;
      v23[91] = v18;
      v23[92] = 0;
      v23[93] = v19;
      v23[94] = v20;
      v23[95] = v21;
      v23[96] = v22 != 0;
      *(void *)(v23 + 97) = 0;
      *((_DWORD *)v23 + 27) = *(_DWORD *)((char *)v70 + 3);
      v11 += 112;
      *(_DWORD *)(v23 + 105) = v70[0];
    }
    while (v42 != v11);
  }
  id v27 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v28 = v41;
  [v41 setWcmWiFiCellCoexIssueTable:v27];
  id v29 = [v28 wcmWiFiCellCoexIssueTable];
  [v29 configureBy:v43];
  [v28 setWcmCellularCoexB7ULRange:2500.0, 10.1];
  [v28 setWcmCellularCoexB7DLRange:2620.0, 10.1];
  [v28 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v28 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v28 setWcmCellularCoexB41A1Range:2496.0, 10.1];
  [v28 setWcmCellularCoexB41A2Range:2506.1, 20.0];
  [v28 setWcmCellularScanProtectionCellFrequencies:&off_10024FB38];
  [v28 setWcmCellularScanProtectionCellFrequenciesforBT:&off_10024FB68];
  [v28 setWcmCellularScanProtectionWiFiChannels:&off_10024FB98];
  [v28 setWcmCellularWCI2ModeControllerLTERBThreshold:[NSNumber numberWithInt:41]];
  [v28 setWcmCellularWCI2ModeLTEHarqnackratioThreshold:[NSNumber numberWithInt:10]];
  [v28 setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable:[NSNumber numberWithBool:1]];
  id v68 = NSArray;
  id v69 = NSDictionary;
  id v30 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DD58, @"UCM_DESENSE_LEVEL", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v31 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DD58, @"UCM_DESENSE_LEVEL", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v32 = [v68 arrayWithObjects:v30, v31, nil];
  objc_msgSend(v28, "setWcmWiFiBTCoexProfileDefault:", objc_msgSend(v69, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      v32,
      @"UCM_CHAIN_ATTR",
      0));
  id v69 = NSDictionary;
  id v33 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_LEVEL", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_10023DCC8,
            @"UCM_DESENSE_LEVEL",
            &off_10023DF38,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DF38,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  objc_msgSend(v28, "setWcmWiFiBTCoexProfileLight:", objc_msgSend(v69, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DED8, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DEF0, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DFB0,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF80,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      v33,
      @"UCM_CHAIN_ATTR",
      0));
  id v69 = NSDictionary;
  id v34 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_LEVEL", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_10023DCC8,
            @"UCM_DESENSE_LEVEL",
            &off_10023DF38,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DF38,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  objc_msgSend(v28, "setWcmWiFiBTCoexProfileHeavyHFP:", objc_msgSend(v69, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEF0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF50, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF80,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DF98,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      v34,
      @"UCM_CHAIN_ATTR",
      0));
  id v69 = NSDictionary;
  id v35 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_LEVEL", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_10023DCC8,
            @"UCM_DESENSE_LEVEL",
            &off_10023DF38,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DF38,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  objc_msgSend(v28, "setWcmWiFiBTCoexProfileHeavyA2DP:", objc_msgSend(v69, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DF50, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF68, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DFB0,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DF80,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF68,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DF68,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      v35,
      @"UCM_CHAIN_ATTR",
      0));
  id v68 = NSArray;
  id v69 = NSDictionary;
  id v36 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DD58, @"UCM_DESENSE_LEVEL", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v37 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DD58, @"UCM_DESENSE_LEVEL", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v38 = [v68 arrayWithObjects:v36, v37];
  return objc_msgSend(v28, "setWcmWiFiBTCoexProfileTDD:", objc_msgSend(v69, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
             &off_10023DED8,
             @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
             &off_10023DEF0,
             @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
             &off_10023DF08,
             @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
             &off_10023DEC0,
             @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
             &off_10023DF08,
             @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
             &off_10023DEC0,
             @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
             &off_10023DED8,
             @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
             &off_10023DED8,
             @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
             &off_10023DD58,
             @"UCM_HYBRID_ANT_CORE_CONFIG",
             v38,
             @"UCM_CHAIN_ATTR",
             0));
}

id sub_10010A84C(void *a1)
{
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileDefault:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DD58, @"UCM_MODE_WEAK_WL", &off_10023DD58, @"UCM_MODE_WEAK_BT", &off_10023DD58, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023E340, @"UCM_DESENSE_STRONG_RSSI", &off_10023E340, @"UCM_DESENSE_WEAK_RSSI", &off_10023DE60, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DE60, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DE60, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DE60, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          &off_10023E340,
          @"UCM_DESENSE_STRONG_RSSI",
          &off_10023E340,
          @"UCM_DESENSE_WEAK_RSSI",
          &off_10023DE60,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DE60,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DE60,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DE60,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileLight:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DD58, @"UCM_MODE_WEAK_WL", &off_10023DD58, @"UCM_MODE_WEAK_BT", &off_10023DD58, @"UCM_MODE_WEAK_WL_BT", &off_10023DED8, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DEF0, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023E310,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023E328,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DD40, @"UCM_DESENSE_STRONG_RSSI", &off_10023E340, @"UCM_DESENSE_WEAK_RSSI", &off_10023E340, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023E340, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DE60, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DE60, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          &off_10023DD40,
          @"UCM_DESENSE_STRONG_RSSI",
          &off_10023E340,
          @"UCM_DESENSE_WEAK_RSSI",
          &off_10023DC38,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DE60,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DE60,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DE60,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavyHFP:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DD58, @"UCM_MODE_WEAK_WL", &off_10023DD58, @"UCM_MODE_WEAK_BT", &off_10023DD58, @"UCM_MODE_WEAK_WL_BT", &off_10023DEF0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF50, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF80,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DF98,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023E310,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023E328,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DD40, @"UCM_DESENSE_STRONG_RSSI", &off_10023E340, @"UCM_DESENSE_WEAK_RSSI", &off_10023E340, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023E340, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DE60, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DE60, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          &off_10023DD40,
          @"UCM_DESENSE_STRONG_RSSI",
          &off_10023E340,
          @"UCM_DESENSE_WEAK_RSSI",
          &off_10023DC38,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DE60,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DE60,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DE60,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavyA2DP:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DD58, @"UCM_MODE_STRONG_WL_BT", &off_10023DD58, @"UCM_MODE_WEAK_WL", &off_10023DD58, @"UCM_MODE_WEAK_BT", &off_10023DD58, @"UCM_MODE_WEAK_WL_BT", &off_10023DF50, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF68, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DFB0,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DF80,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF68,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DF68,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", @"UCM_DESENSE_STRONG_RSSI", &off_10023E340, @"UCM_DESENSE_WEAK_RSSI", &off_10023DE60, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DE60, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DE60, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DE60, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          @"UCM_DESENSE_STRONG_RSSI",
          &off_10023E340,
          @"UCM_DESENSE_WEAK_RSSI",
          &off_10023DE60,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DE60,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DE60,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DE60,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  uint64_t v1 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DD58, @"UCM_MODE_STRONG_WL_BT", &off_10023DD58, @"UCM_MODE_WEAK_WL", &off_10023DD58, @"UCM_MODE_WEAK_BT", &off_10023DD58, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DEF0,
         @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
         &off_10023DF08,
         @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
         &off_10023DEC0,
         @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
         &off_10023DF08,
         @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
         &off_10023DEC0,
         @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
         &off_10023DED8,
         @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
         &off_10023DED8,
         @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
         &off_10023DD58,
         @"UCM_HYBRID_ANT_CORE_CONFIG",
         +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023E340, @"UCM_DESENSE_STRONG_RSSI", &off_10023E340, @"UCM_DESENSE_WEAK_RSSI", &off_10023DE60, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DE60, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DE60, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DE60, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
             NSDictionary,
             "dictionaryWithObjectsAndKeys:",
             &off_10023E340,
             @"UCM_DESENSE_STRONG_RSSI",
             &off_10023E340,
             @"UCM_DESENSE_WEAK_RSSI",
             &off_10023DE60,
             @"UCM_ACK_PWR_STRONG_RSSI",
             &off_10023DE60,
             @"UCM_ACK_PWR_WEAK_RSSI",
             &off_10023DE60,
             @"UCM_TX_PWR_STRONG_RSSI",
             &off_10023DE60,
             @"UCM_TX_PWR_WEAK_RSSI",
             0),
           0),
         @"UCM_CHAIN_ATTR",
         0);

  return [a1 setWcmWiFiBTCoexProfileTDD:v1];
}

id sub_10010B188(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023E2B0];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  [a1 setWcmWiFiCellCoexIssueTable:objc_alloc_init(WCM_WiFiCellCoexIssueBandTable)];
  [objc_msgSend(a1, "wcmWiFiCellCoexIssueTable") configureBy:&unk_1001EF0A0];
  [a1 setWcmCellularCoexB7ULRange:2500.0, 10.1];
  [a1 setWcmCellularCoexB7DLRange:2620.0, 10.1];
  [a1 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [a1 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [a1 setWcmCellularCoexB41A1Range:2496.0, 10.1];
  [a1 setWcmCellularCoexB41A2Range:2506.1, 20.0];
  [a1 setWcmCellularScanProtectionCellFrequencies:&off_10024FBE0];
  [a1 setWcmCellularScanProtectionWiFiChannels:&off_10024FC28];
  [a1 setWcmCellularWCI2ModeControllerLTERBThreshold:[NSNumber numberWithInt:41]];
  [a1 setWcmCellularWCI2ModeLTEHarqnackratioThreshold:[NSNumber numberWithInt:10]];
  id v2 = +[NSNumber numberWithBool:1];

  return [a1 setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable:v2];
}

id sub_10010B3B8(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023E2B0];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  [a1 setWcmWiFiCellCoexIssueTable:objc_alloc_init(WCM_WiFiCellCoexIssueBandTable)];
  [objc_msgSend(a1, "wcmWiFiCellCoexIssueTable") configureBy:&unk_1001F0060];
  [a1 setWcmCellularCoexB7ULRange:2500.0, 10.1];
  [a1 setWcmCellularCoexB7DLRange:2620.0, 10.1];
  [a1 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [a1 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [a1 setWcmCellularCoexB41A1Range:2496.0, 10.1];
  [a1 setWcmCellularCoexB41A2Range:2506.1, 20.0];
  [a1 setWcmCellularScanProtectionCellFrequencies:&off_10024FC70];
  [a1 setWcmCellularScanProtectionWiFiChannels:&off_10024FCB8];
  [a1 setWcmCellularWCI2ModeControllerLTERBThreshold:[NSNumber numberWithInt:41]];
  [a1 setWcmCellularWCI2ModeLTEHarqnackratioThreshold:[NSNumber numberWithInt:10]];
  id v2 = +[NSNumber numberWithBool:1];

  return [a1 setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable:v2];
}

id sub_10010B5E8(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:1750];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-150];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-150];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-250];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-250];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:0];
  [a1 setWcmWCI2MWSInactivityAssertJitter:4];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:0];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023E2B0];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  [a1 setWcmWiFiCellCoexIssueTable:objc_alloc_init(WCM_WiFiCellCoexIssueBandTable)];
  [objc_msgSend(a1, "wcmWiFiCellCoexIssueTable") configureBy:&unk_1001F1020];
  [a1 setWcmCellularCoexB7ULRange:2500.0, 10.1];
  [a1 setWcmCellularCoexB7DLRange:2620.0, 10.1];
  [a1 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [a1 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [a1 setWcmCellularCoexB41A1Range:2496.0, 10.1];
  [a1 setWcmCellularCoexB41A2Range:2506.1, 20.0];
  [a1 setWcmCellularScanProtectionCellFrequencies:&off_10024FD00];
  [a1 setWcmCellularScanProtectionWiFiChannels:&off_10024FD48];
  [a1 setWcmCellularWCI2ModeControllerLTERBThreshold:[NSNumber numberWithInt:41]];
  [a1 setWcmCellularWCI2ModeLTEHarqnackratioThreshold:[NSNumber numberWithInt:10]];
  id v2 = +[NSNumber numberWithBool:1];

  return [a1 setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable:v2];
}

id sub_10010B8E4(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:1750];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-150];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-150];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-250];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-250];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:0];
  [a1 setWcmWCI2MWSInactivityAssertJitter:4];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:0];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023E2B0];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  [a1 setWcmWiFiCellCoexIssueTable:objc_alloc_init(WCM_WiFiCellCoexIssueBandTable)];
  [objc_msgSend(a1, "wcmWiFiCellCoexIssueTable") configureBy:&unk_1001F1FE0];
  [a1 setWcmCellularCoexB7ULRange:2500.0, 10.1];
  [a1 setWcmCellularCoexB7DLRange:2620.0, 10.1];
  [a1 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [a1 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [a1 setWcmCellularCoexB41A1Range:2496.0, 10.1];
  [a1 setWcmCellularCoexB41A2Range:2506.1, 20.0];
  [a1 setWcmCellularScanProtectionCellFrequencies:&off_10024FD90];
  [a1 setWcmCellularScanProtectionWiFiChannels:&off_10024FDD8];
  [a1 setWcmCellularWCI2ModeControllerLTERBThreshold:[NSNumber numberWithInt:41]];
  [a1 setWcmCellularWCI2ModeLTEHarqnackratioThreshold:+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10)];
  id v2 = +[NSNumber numberWithBool:1];

  return [a1 setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable:v2];
}

id sub_10010BBE0(void *a1)
{
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileDefault:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DCC8, @"UCM_MODE_WEAK_WL", &off_10023DCC8, @"UCM_MODE_WEAK_BT", &off_10023DCC8, @"UCM_MODE_WEAK_WL_BT", &off_10023DED8, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DEF0, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023E358, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          &off_10023DCC8,
          @"UCM_DESENSE_STRONG_RSSI",
          &off_10023DC68,
          @"UCM_DESENSE_WEAK_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DF38,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DF38,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  uint64_t v1 = &off_10023DCC8;
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileLight:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", v1, @"UCM_MODE_STRONG_WL_BT", v1, @"UCM_MODE_WEAK_WL", v1, @"UCM_MODE_WEAK_BT", v1, @"UCM_MODE_WEAK_WL_BT", &off_10023DED8, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DEF0, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023E358, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          &off_10023DCC8,
          @"UCM_DESENSE_STRONG_RSSI",
          &off_10023DC68,
          @"UCM_DESENSE_WEAK_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DF38,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DF38,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavy:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", v1, @"UCM_MODE_STRONG_WL_BT", v1, @"UCM_MODE_WEAK_WL", v1, @"UCM_MODE_WEAK_BT", v1, @"UCM_MODE_WEAK_WL_BT", &off_10023DED8, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DEF0, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023E358, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          &off_10023DCC8,
          @"UCM_DESENSE_STRONG_RSSI",
          &off_10023DC68,
          @"UCM_DESENSE_WEAK_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DF38,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DF38,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  id v2 = &off_10023DCC8;
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHPPHeavy:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DCE0, @"UCM_MODE_STRONG_WL_BT", v2, @"UCM_MODE_WEAK_WL", &off_10023DCE0, @"UCM_MODE_WEAK_BT", v2, @"UCM_MODE_WEAK_WL_BT", &off_10023DED8, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DEF0, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023E358, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023E358, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          &off_10023DCC8,
          @"UCM_DESENSE_STRONG_RSSI",
          &off_10023DC68,
          @"UCM_DESENSE_WEAK_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DF38,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DF38,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHPP:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DCE0, @"UCM_MODE_STRONG_WL_BT", v2, @"UCM_MODE_WEAK_WL", &off_10023DCE0, @"UCM_MODE_WEAK_BT", v2, @"UCM_MODE_WEAK_WL_BT", &off_10023DED8, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DEF0, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023E358, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023E358, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          &off_10023DCC8,
          @"UCM_DESENSE_STRONG_RSSI",
          &off_10023DC68,
          @"UCM_DESENSE_WEAK_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DF38,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DF38,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  unsigned __int16 v3 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DED8, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DEF0, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DEF0,
         @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
         &off_10023DED8,
         @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
         &off_10023DEF0,
         @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
         &off_10023DED8,
         @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
         &off_10023DEF0,
         @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
         &off_10023DED8,
         @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
         &off_10023DED8,
         @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
         &off_10023DD58,
         @"UCM_HYBRID_ANT_CORE_CONFIG",
         +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DD58, @"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
             NSDictionary,
             "dictionaryWithObjectsAndKeys:",
             @"UCM_DESENSE_STRONG_RSSI",
             &off_10023DD58,
             @"UCM_DESENSE_WEAK_RSSI",
             &off_10023DD88,
             @"UCM_ACK_PWR_STRONG_RSSI",
             &off_10023DD88,
             @"UCM_ACK_PWR_WEAK_RSSI",
             &off_10023DD88,
             @"UCM_TX_PWR_STRONG_RSSI",
             &off_10023DD88,
             @"UCM_TX_PWR_WEAK_RSSI",
             0),
           0),
         @"UCM_CHAIN_ATTR",
         0);

  return [a1 setWcmWiFiBTCoexProfileTDD:v3];
}

id sub_10010C6CC(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:-60];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-40];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-40];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-50];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-50];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:6790];
  [a1 setWcmWCI2MWSInactivityAssertJitter:192];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:500];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023E2B0];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  id v38 = a1;
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex001_v1.1_NewEnum_v4Macro", @"plist") options:2 format:&v66 error:&v67];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  uint64_t v36 = (uint64_t)&v36;
  __chkstk_darwin(v4, v5, v6);
  id v37 = (char *)&v36 - v7 * (unint64_t)v8;
  uint64_t v9 = &v37[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v9 = 211;
  *(_OWORD *)(v9 + 4) = 0u;
  *(_OWORD *)(v9 + 20) = 0u;
  *(_OWORD *)(v9 + 36) = 0u;
  *(_OWORD *)(v9 + 52) = 0u;
  *(_OWORD *)(v9 + 68) = 0u;
  *(_OWORD *)(v9 + 84) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  if (v3)
  {
    uint64_t v10 = 0;
    uint64_t v11 = v37 + 56;
    uint64_t v39 = v3;
    do
    {
      __int16 v64 = 0;
      char v65 = 0;
      v63[0] = 0;
      *(_DWORD *)((char *)v63 + 3) = 0;
      LODWORD(v62) = [[[v2 objectAtIndex:v10] objectForKey:@"issueBand"] intValue];
      LODWORD(v61) = [[[v2 objectAtIndex:v10] objectForKey:@"issueType"] intValue];
      unsigned int v60 = [[[v2 objectAtIndex:v10] objectForKey:@"isWiFiDesense"] BOOLValue];
      unsigned int v59 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v58 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v57 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v56 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v55 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v54 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v53 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v52 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap111"] intValue];
      unsigned int v51 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v50 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v49 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v48 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v47 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v46 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v45 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v44 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap111"] intValue];
      uint64_t v43 = [(int)[v2 objectAtIndex:v10] objectForKey:@"cellTxPowerLimit"] intValue];
      double v12 = (double)(int)[v2 objectAtIndex:v10][@"cellFrequencyLimitForOOB"][@"intValue"];
      double v13 = (double)[(int)[v2 objectAtIndex:v10] objectForKey:@"cellBandwidthLimitForOOB"];
      unsigned int v42 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiFirstChannelToAvoidForCellOOB"] intValue];
      unsigned int v41 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiLastChannelToAvoidForCellOOB"] intValue];
      unsigned int v40 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiFirstChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned __int8 v14 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiLastChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v15 = [[[v2 objectAtIndex:v10] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned __int8 v16 = [[[v2 objectAtIndex:v10] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned __int8 v17 = [[[v2 objectAtIndex:v10] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned __int8 v18 = [[[v2 objectAtIndex:v10] objectForKey:@"ulcaPriority"] intValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v10] objectForKey:@"ulcaPriority_WiFi"] intValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v10] objectForKey:@"ulcaPriority_BT"] intValue];
      unsigned __int8 v21 = [[[v2 objectAtIndex:v10] objectForKey:@"CellAntBlk"] intValue];
      uint64_t v22 = v39;
      int v23 = (int)v61;
      *((_DWORD *)v11 - 14) = v62;
      *((_DWORD *)v11 - 13) = v23;
      *(v11 - 48) = v60;
      *(v11 - 43) = v59;
      *(v11 - 42) = v58;
      *(v11 - 41) = v57;
      *(v11 - 40) = v56;
      *(v11 - 39) = v55;
      *(v11 - 38) = v54;
      *(v11 - 37) = v53;
      *(v11 - 36) = v52;
      *(v11 - 35) = v51;
      *(v11 - 34) = v50;
      *(v11 - 33) = v49;
      *(v11 - 32) = v48;
      *(v11 - 31) = v47;
      *(v11 - 30) = v46;
      *(v11 - 29) = v45;
      *(v11 - 28) = v44;
      *(_WORD *)(v11 - 27) = v64;
      *(v11 - 25) = v65;
      *((void *)v11 - 3) = v43;
      *uint64_t v11 = v42;
      v11[1] = v41;
      v11[2] = v40;
      v11[3] = v14;
      *((_DWORD *)v11 + 1) = 0;
      *((_DWORD *)v11 + 2) = v15;
      v11[22] = v16;
      v11[23] = v17;
      v11[33] = v18;
      v11[34] = v19;
      v11[35] = v20;
      v11[37] = v21;
      *((_DWORD *)v11 + 13) = *(_DWORD *)((char *)v63 + 3);
      *(_DWORD *)(v11 + 49) = v63[0];
      *(_DWORD *)(v11 - 47) = 0;
      *((double *)v11 - 2) = v12;
      *((double *)v11 - 1) = v13;
      *(void *)(v11 + 12) = 0;
      *((_WORD *)v11 + 10) = 0;
      *((void *)v11 + 3) = 0;
      v11[32] = 0;
      v11[36] = 0;
      ++v10;
      *(void *)(v11 + 38) = 0;
      *(_DWORD *)(v11 + 45) = 0;
      v11 += 112;
    }
    while (v22 != v10);
  }
  int v24 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v25 = v38;
  [v38 setWcmWiFiCellCoexIssueTable:v24];
  id v26 = [v25 wcmWiFiCellCoexIssueTable];
  [v26 configureBy:v37];
  [v25 setWcmCellularCoexB7ULRange:2500.0, 10.1];
  [v25 setWcmCellularCoexB7DLRange:2620.0, 10.1];
  [v25 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v25 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v25 setWcmCellularCoexB41A1Range:2496.0, 10.1];
  [v25 setWcmCellularCoexB41A2Range:2506.1, 20.0];
  [v25 setWcmCellularScanProtectionCellFrequencies:&off_10024FE68];
  [v25 setWcmCellularScanProtectionWiFiChannels:&off_10024FEF8];
  [v25 setWcmCellularWCI2ModeControllerLTERBThreshold:[NSNumber numberWithInt:41]];
  [v25 setWcmCellularWCI2ModeLTEHarqnackratioThreshold:[NSNumber numberWithInt:10]];
  [v25 setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable:[NSNumber numberWithBool:1]];
  id v61 = NSArray;
  id v62 = NSDictionary;
  id v27 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DD58, @"UCM_DESENSE_LEVEL", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v28 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DD58, @"UCM_DESENSE_LEVEL", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v29 = [v61 arrayWithObjects:v27, v28];
  objc_msgSend(v25, "setWcmWiFiBTCoexProfileDefault:", objc_msgSend(v62, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      v29,
      @"UCM_CHAIN_ATTR",
      0));
  id v62 = NSDictionary;
  id v30 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_LEVEL", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_10023DCC8,
            @"UCM_DESENSE_LEVEL",
            &off_10023DF38,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DF38,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  objc_msgSend(v25, "setWcmWiFiBTCoexProfileLight:", objc_msgSend(v62, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DED8, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DEF0, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DFB0,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF80,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      v30,
      @"UCM_CHAIN_ATTR",
      0));
  id v62 = NSDictionary;
  id v31 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_LEVEL", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_10023DCC8,
            @"UCM_DESENSE_LEVEL",
            &off_10023DF38,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DF38,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  objc_msgSend(v25, "setWcmWiFiBTCoexProfileHeavyHFP:", objc_msgSend(v62, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEF0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF50, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF80,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DF98,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      v31,
      @"UCM_CHAIN_ATTR",
      0));
  id v62 = NSDictionary;
  id v32 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_LEVEL", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_10023DCC8,
            @"UCM_DESENSE_LEVEL",
            &off_10023DF38,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DF38,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  objc_msgSend(v25, "setWcmWiFiBTCoexProfileHeavyA2DP:", objc_msgSend(v62, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DF50, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF68, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DFB0,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DF80,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF68,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DF68,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      v32,
      @"UCM_CHAIN_ATTR",
      0));
  id v62 = NSDictionary;
  id v33 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DD58, @"UCM_DESENSE_LEVEL", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_10023DD58,
            @"UCM_DESENSE_LEVEL",
            &off_10023DD88,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  id v34 = objc_msgSend(v62, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DEF0,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DF08,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DEC0,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DF08,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEC0,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v33,
          @"UCM_CHAIN_ATTR",
          0);
  return [v38 setWcmWiFiBTCoexProfileTDD:v34];
}

id sub_10010D9E8(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:-60];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-40];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-40];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-50];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-50];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:6790];
  [a1 setWcmWCI2MWSInactivityAssertJitter:192];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:500];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023E2B0];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  id v38 = a1;
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex001_v1.1_NewEnum_v4Macro", @"plist") options:2 format:&v66 error:&v67];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  uint64_t v36 = (uint64_t)&v36;
  __chkstk_darwin(v4, v5, v6);
  id v37 = (char *)&v36 - v7 * (unint64_t)v8;
  uint64_t v9 = &v37[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v9 = 211;
  *(_OWORD *)(v9 + 4) = 0u;
  *(_OWORD *)(v9 + 20) = 0u;
  *(_OWORD *)(v9 + 36) = 0u;
  *(_OWORD *)(v9 + 52) = 0u;
  *(_OWORD *)(v9 + 68) = 0u;
  *(_OWORD *)(v9 + 84) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  if (v3)
  {
    uint64_t v10 = 0;
    uint64_t v11 = v37 + 56;
    uint64_t v39 = v3;
    do
    {
      __int16 v64 = 0;
      char v65 = 0;
      v63[0] = 0;
      *(_DWORD *)((char *)v63 + 3) = 0;
      LODWORD(v62) = [[[v2 objectAtIndex:v10] objectForKey:@"issueBand"] intValue];
      LODWORD(v61) = [[[v2 objectAtIndex:v10] objectForKey:@"issueType"] intValue];
      unsigned int v60 = [[[v2 objectAtIndex:v10] objectForKey:@"isWiFiDesense"] BOOLValue];
      unsigned int v59 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v58 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v57 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v56 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v55 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v54 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v53 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v52 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap111"] intValue];
      unsigned int v51 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v50 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v49 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v48 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v47 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v46 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v45 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v44 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap111"] intValue];
      uint64_t v43 = [(int)[v2 objectAtIndex:v10] objectForKey:@"cellTxPowerLimit"] intValue];
      double v12 = (double)(int)[v2 objectAtIndex:v10][@"cellFrequencyLimitForOOB"][@"intValue"];
      double v13 = (double)(int)[v2 objectAtIndex:v10][@"cellBandwidthLimitForOOB"][@"intValue"];
      unsigned int v42 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiFirstChannelToAvoidForCellOOB"] intValue];
      unsigned int v41 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiLastChannelToAvoidForCellOOB"] intValue];
      unsigned int v40 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiFirstChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned __int8 v14 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiLastChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v15 = [[[v2 objectAtIndex:v10] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned __int8 v16 = [[[v2 objectAtIndex:v10] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned __int8 v17 = [[[v2 objectAtIndex:v10] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned __int8 v18 = [[[v2 objectAtIndex:v10] objectForKey:@"ulcaPriority"] intValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v10] objectForKey:@"ulcaPriority_WiFi"] intValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v10] objectForKey:@"ulcaPriority_BT"] intValue];
      unsigned __int8 v21 = [[[v2 objectAtIndex:v10] objectForKey:@"CellAntBlk"] intValue];
      uint64_t v22 = v39;
      int v23 = (int)v61;
      *((_DWORD *)v11 - 14) = v62;
      *((_DWORD *)v11 - 13) = v23;
      *(v11 - 48) = v60;
      *(v11 - 43) = v59;
      *(v11 - 42) = v58;
      *(v11 - 41) = v57;
      *(v11 - 40) = v56;
      *(v11 - 39) = v55;
      *(v11 - 38) = v54;
      *(v11 - 37) = v53;
      *(v11 - 36) = v52;
      *(v11 - 35) = v51;
      *(v11 - 34) = v50;
      *(v11 - 33) = v49;
      *(v11 - 32) = v48;
      *(v11 - 31) = v47;
      *(v11 - 30) = v46;
      *(v11 - 29) = v45;
      *(v11 - 28) = v44;
      *(_WORD *)(v11 - 27) = v64;
      *(v11 - 25) = v65;
      *((void *)v11 - 3) = v43;
      *uint64_t v11 = v42;
      v11[1] = v41;
      v11[2] = v40;
      v11[3] = v14;
      *((_DWORD *)v11 + 1) = 0;
      *((_DWORD *)v11 + 2) = v15;
      v11[22] = v16;
      v11[23] = v17;
      v11[33] = v18;
      v11[34] = v19;
      v11[35] = v20;
      v11[37] = v21;
      *((_DWORD *)v11 + 13) = *(_DWORD *)((char *)v63 + 3);
      *(_DWORD *)(v11 + 49) = v63[0];
      *(_DWORD *)(v11 - 47) = 0;
      *((double *)v11 - 2) = v12;
      *((double *)v11 - 1) = v13;
      *(void *)(v11 + 12) = 0;
      *((_WORD *)v11 + 10) = 0;
      *((void *)v11 + 3) = 0;
      v11[32] = 0;
      v11[36] = 0;
      ++v10;
      *(void *)(v11 + 38) = 0;
      *(_DWORD *)(v11 + 45) = 0;
      v11 += 112;
    }
    while (v22 != v10);
  }
  int v24 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v25 = v38;
  [v38 setWcmWiFiCellCoexIssueTable:v24];
  id v26 = [v25 wcmWiFiCellCoexIssueTable];
  [v26 configureBy:v37];
  [v25 setWcmCellularCoexB7ULRange:2500.0, 10.1];
  [v25 setWcmCellularCoexB7DLRange:2620.0, 10.1];
  [v25 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v25 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v25 setWcmCellularCoexB41A1Range:2496.0, 10.1];
  [v25 setWcmCellularCoexB41A2Range:2506.1, 20.0];
  [v25 setWcmCellularScanProtectionCellFrequencies:&off_10024FF88];
  [v25 setWcmCellularScanProtectionWiFiChannels:&off_100250018];
  [v25 setWcmCellularWCI2ModeControllerLTERBThreshold:[NSNumber numberWithInt:41]];
  [v25 setWcmCellularWCI2ModeLTEHarqnackratioThreshold:[NSNumber numberWithInt:10]];
  [v25 setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable:[NSNumber numberWithBool:1]];
  id v61 = NSArray;
  id v62 = NSDictionary;
  id v27 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DD58, @"UCM_DESENSE_LEVEL", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v28 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DD58, @"UCM_DESENSE_LEVEL", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v29 = [v61 arrayWithObjects:v27, v28];
  objc_msgSend(v25, "setWcmWiFiBTCoexProfileDefault:", objc_msgSend(v62, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      v29,
      @"UCM_CHAIN_ATTR",
      0));
  id v62 = NSDictionary;
  id v30 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_LEVEL", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_10023DCC8,
            @"UCM_DESENSE_LEVEL",
            &off_10023DF38,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DF38,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  objc_msgSend(v25, "setWcmWiFiBTCoexProfileLight:", objc_msgSend(v62, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DED8, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DEF0, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DFB0,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF80,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      v30,
      @"UCM_CHAIN_ATTR",
      0));
  id v62 = NSDictionary;
  id v31 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_LEVEL", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_10023DCC8,
            @"UCM_DESENSE_LEVEL",
            &off_10023DF38,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DF38,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  objc_msgSend(v25, "setWcmWiFiBTCoexProfileHeavyHFP:", objc_msgSend(v62, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEF0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF50, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF80,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DF98,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      v31,
      @"UCM_CHAIN_ATTR",
      0));
  id v62 = NSDictionary;
  id v32 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_LEVEL", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_10023DCC8,
            @"UCM_DESENSE_LEVEL",
            &off_10023DF38,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DF38,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  objc_msgSend(v25, "setWcmWiFiBTCoexProfileHeavyA2DP:", objc_msgSend(v62, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DF50, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF68, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DFB0,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DF80,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF68,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DF68,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      v32,
      @"UCM_CHAIN_ATTR",
      0));
  id v62 = NSDictionary;
  id v33 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DD58, @"UCM_DESENSE_LEVEL", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_10023DD58,
            @"UCM_DESENSE_LEVEL",
            &off_10023DD88,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  id v34 = objc_msgSend(v62, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DEF0,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DF08,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DEC0,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DF08,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEC0,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v33,
          @"UCM_CHAIN_ATTR",
          0);
  return [v38 setWcmWiFiBTCoexProfileTDD:v34];
}

id sub_10010ED04(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:-60];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-40];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-40];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-50];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-50];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:6790];
  [a1 setWcmWCI2MWSInactivityAssertJitter:192];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:500];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023E2B0];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  id v38 = a1;
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex002_v1_NewEnum_v4Macro", @"plist") options:2 format:&v66 error:&v67];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  uint64_t v36 = (uint64_t)&v36;
  __chkstk_darwin(v4, v5, v6);
  id v37 = (char *)&v36 - v7 * (unint64_t)v8;
  uint64_t v9 = &v37[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v9 = 211;
  *(_OWORD *)(v9 + 4) = 0u;
  *(_OWORD *)(v9 + 20) = 0u;
  *(_OWORD *)(v9 + 36) = 0u;
  *(_OWORD *)(v9 + 52) = 0u;
  *(_OWORD *)(v9 + 68) = 0u;
  *(_OWORD *)(v9 + 84) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  if (v3)
  {
    uint64_t v10 = 0;
    uint64_t v11 = v37 + 56;
    uint64_t v39 = v3;
    do
    {
      __int16 v64 = 0;
      char v65 = 0;
      v63[0] = 0;
      *(_DWORD *)((char *)v63 + 3) = 0;
      LODWORD(v62) = [[[v2 objectAtIndex:v10] objectForKey:@"issueBand"] intValue];
      LODWORD(v61) = [[[v2 objectAtIndex:v10] objectForKey:@"issueType"] intValue];
      unsigned int v60 = [[[v2 objectAtIndex:v10] objectForKey:@"isWiFiDesense"] boolValue];
      unsigned int v59 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v58 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v57 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v56 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v55 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v54 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v53 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v52 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap111"] intValue];
      unsigned int v51 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v50 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v49 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v48 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v47 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v46 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v45 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v44 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap111"] intValue];
      uint64_t v43 = [(int)[v2 objectAtIndex:v10] objectForKey:@"cellTxPowerLimit"] intValue];
      double v12 = (double)(int)[v2 objectAtIndex:v10][@"cellFrequencyLimitForOOB"][@"intValue"];
      double v13 = (double)(int)[v2 objectAtIndex:v10][@"cellBandwidthLimitForOOB"][@"intValue"];
      unsigned int v42 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiFirstChannelToAvoidForCellOOB"] intValue];
      unsigned int v41 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiLastChannelToAvoidForCellOOB"] intValue];
      unsigned int v40 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiFirstChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned __int8 v14 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiLastChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v15 = [[[v2 objectAtIndex:v10] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned __int8 v16 = [[[v2 objectAtIndex:v10] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned __int8 v17 = [[[v2 objectAtIndex:v10] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned __int8 v18 = [[[v2 objectAtIndex:v10] objectForKey:@"ulcaPriority"] intValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v10] objectForKey:@"ulcaPriority_WiFi"] intValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v10] objectForKey:@"ulcaPriority_BT"] intValue];
      unsigned __int8 v21 = [[[v2 objectAtIndex:v10] objectForKey:@"CellAntBlk"] intValue];
      uint64_t v22 = v39;
      int v23 = (int)v61;
      *((_DWORD *)v11 - 14) = v62;
      *((_DWORD *)v11 - 13) = v23;
      *(v11 - 48) = v60;
      *(v11 - 43) = v59;
      *(v11 - 42) = v58;
      *(v11 - 41) = v57;
      *(v11 - 40) = v56;
      *(v11 - 39) = v55;
      *(v11 - 38) = v54;
      *(v11 - 37) = v53;
      *(v11 - 36) = v52;
      *(v11 - 35) = v51;
      *(v11 - 34) = v50;
      *(v11 - 33) = v49;
      *(v11 - 32) = v48;
      *(v11 - 31) = v47;
      *(v11 - 30) = v46;
      *(v11 - 29) = v45;
      *(v11 - 28) = v44;
      *(_WORD *)(v11 - 27) = v64;
      *(v11 - 25) = v65;
      *((void *)v11 - 3) = v43;
      *uint64_t v11 = v42;
      v11[1] = v41;
      v11[2] = v40;
      v11[3] = v14;
      *((_DWORD *)v11 + 1) = 0;
      *((_DWORD *)v11 + 2) = v15;
      v11[22] = v16;
      v11[23] = v17;
      v11[33] = v18;
      v11[34] = v19;
      v11[35] = v20;
      v11[37] = v21;
      *((_DWORD *)v11 + 13) = *(_DWORD *)((char *)v63 + 3);
      *(_DWORD *)(v11 + 49) = v63[0];
      *(_DWORD *)(v11 - 47) = 0;
      *((double *)v11 - 2) = v12;
      *((double *)v11 - 1) = v13;
      *(void *)(v11 + 12) = 0;
      *((_WORD *)v11 + 10) = 0;
      *((void *)v11 + 3) = 0;
      v11[32] = 0;
      v11[36] = 0;
      ++v10;
      *(void *)(v11 + 38) = 0;
      *(_DWORD *)(v11 + 45) = 0;
      v11 += 112;
    }
    while (v22 != v10);
  }
  int v24 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v25 = v38;
  [v38 setWcmWiFiCellCoexIssueTable:v24];
  id v26 = [v25 wcmWiFiCellCoexIssueTable];
  [v26 configureBy:v37];
  [v25 setWcmCellularCoexB7ULRange:2500.0, 10.1];
  [v25 setWcmCellularCoexB7DLRange:2620.0, 10.1];
  [v25 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v25 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v25 setWcmCellularCoexB41A1Range:2496.0, 10.1];
  [v25 setWcmCellularCoexB41A2Range:2506.1, 20.0];
  [v25 setWcmCellularScanProtectionCellFrequencies:&off_1002500A8];
  [v25 setWcmCellularScanProtectionWiFiChannels:&off_100250138];
  [v25 setWcmCellularWCI2ModeControllerLTERBThreshold:[NSNumber numberWithInt:41]];
  [v25 setWcmCellularWCI2ModeLTEHarqnackratioThreshold:[NSNumber numberWithInt:10]];
  [v25 setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable:[NSNumber numberWithBool:1]];
  id v61 = NSArray;
  id v62 = NSDictionary;
  id v27 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DD58, @"UCM_DESENSE_LEVEL", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v28 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DD58, @"UCM_DESENSE_LEVEL", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v29 = [v61 arrayWithObjects:v27, v28];
  objc_msgSend(v25, "setWcmWiFiBTCoexProfileDefault:", objc_msgSend(v62, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      v29,
      @"UCM_CHAIN_ATTR",
      0));
  id v62 = NSDictionary;
  id v30 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_LEVEL", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_10023DCC8,
            @"UCM_DESENSE_LEVEL",
            &off_10023DF38,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DF38,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  objc_msgSend(v25, "setWcmWiFiBTCoexProfileLight:", objc_msgSend(v62, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DED8, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DEF0, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DFB0,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF80,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      v30,
      @"UCM_CHAIN_ATTR",
      0));
  id v62 = NSDictionary;
  id v31 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_LEVEL", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_10023DCC8,
            @"UCM_DESENSE_LEVEL",
            &off_10023DF38,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DF38,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  objc_msgSend(v25, "setWcmWiFiBTCoexProfileHeavyHFP:", objc_msgSend(v62, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEF0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF50, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF80,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DF98,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      v31,
      @"UCM_CHAIN_ATTR",
      0));
  id v62 = NSDictionary;
  id v32 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_LEVEL", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_10023DCC8,
            @"UCM_DESENSE_LEVEL",
            &off_10023DF38,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DF38,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  objc_msgSend(v25, "setWcmWiFiBTCoexProfileHeavyA2DP:", objc_msgSend(v62, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DF50, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF68, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DFB0,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DF80,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF68,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DF68,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      v32,
      @"UCM_CHAIN_ATTR",
      0));
  id v62 = NSDictionary;
  id v33 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DD58, @"UCM_DESENSE_LEVEL", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_10023DD58,
            @"UCM_DESENSE_LEVEL",
            &off_10023DD88,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  id v34 = objc_msgSend(v62, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DEF0,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DF08,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DEC0,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DF08,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEC0,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v33,
          @"UCM_CHAIN_ATTR",
          0);
  return [v38 setWcmWiFiBTCoexProfileTDD:v34];
}

id sub_100110020(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:-60];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-40];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-40];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-50];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-50];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:6790];
  [a1 setWcmWCI2MWSInactivityAssertJitter:192];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:500];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023E2B0];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  id v38 = a1;
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex002_v1_NewEnum_v4Macro", @"plist") options:2 format:&v66 error:&v67];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  uint64_t v36 = (uint64_t)&v36;
  __chkstk_darwin(v4, v5, v6);
  id v37 = (char *)&v36 - v7 * (unint64_t)v8;
  uint64_t v9 = &v37[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v9 = 211;
  *(_OWORD *)(v9 + 4) = 0u;
  *(_OWORD *)(v9 + 20) = 0u;
  *(_OWORD *)(v9 + 36) = 0u;
  *(_OWORD *)(v9 + 52) = 0u;
  *(_OWORD *)(v9 + 68) = 0u;
  *(_OWORD *)(v9 + 84) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  if (v3)
  {
    uint64_t v10 = 0;
    uint64_t v11 = v37 + 56;
    uint64_t v39 = v3;
    do
    {
      __int16 v64 = 0;
      char v65 = 0;
      v63[0] = 0;
      *(_DWORD *)((char *)v63 + 3) = 0;
      LODWORD(v62) = [[[v2 objectAtIndex:v10] objectForKey:@"issueBand"] intValue];
      LODWORD(v61) = [[[v2 objectAtIndex:v10] objectForKey:@"issueType"] intValue];
      unsigned int v60 = [[[v2 objectAtIndex:v10] objectForKey:@"isWiFiDesense"] BOOLValue];
      unsigned int v59 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v58 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v57 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v56 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v55 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v54 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v53 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v52 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap111"] intValue];
      unsigned int v51 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v50 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v49 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v48 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v47 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v46 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v45 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v44 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap111"] intValue];
      uint64_t v43 = [(int)[v2 objectAtIndex:v10] objectForKey:@"cellTxPowerLimit"] intValue];
      double v12 = (double)(int)[v2 objectAtIndex:v10][@"cellFrequencyLimitForOOB"][@"intValue"];
      double v13 = (double)(int)[v2 objectAtIndex:v10][@"cellBandwidthLimitForOOB"][@"intValue"];
      unsigned int v42 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiFirstChannelToAvoidForCellOOB"] intValue];
      unsigned int v41 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiLastChannelToAvoidForCellOOB"] intValue];
      unsigned int v40 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiFirstChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned __int8 v14 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiLastChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v15 = [[[v2 objectAtIndex:v10] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned __int8 v16 = [[[v2 objectAtIndex:v10] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned __int8 v17 = [[[v2 objectAtIndex:v10] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned __int8 v18 = [[[v2 objectAtIndex:v10] objectForKey:@"ulcaPriority"] intValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v10] objectForKey:@"ulcaPriority_WiFi"] intValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v10] objectForKey:@"ulcaPriority_BT"] intValue];
      unsigned __int8 v21 = [[[v2 objectAtIndex:v10] objectForKey:@"CellAntBlk"] intValue];
      uint64_t v22 = v39;
      int v23 = (int)v61;
      *((_DWORD *)v11 - 14) = v62;
      *((_DWORD *)v11 - 13) = v23;
      *(v11 - 48) = v60;
      *(v11 - 43) = v59;
      *(v11 - 42) = v58;
      *(v11 - 41) = v57;
      *(v11 - 40) = v56;
      *(v11 - 39) = v55;
      *(v11 - 38) = v54;
      *(v11 - 37) = v53;
      *(v11 - 36) = v52;
      *(v11 - 35) = v51;
      *(v11 - 34) = v50;
      *(v11 - 33) = v49;
      *(v11 - 32) = v48;
      *(v11 - 31) = v47;
      *(v11 - 30) = v46;
      *(v11 - 29) = v45;
      *(v11 - 28) = v44;
      *(_WORD *)(v11 - 27) = v64;
      *(v11 - 25) = v65;
      *((void *)v11 - 3) = v43;
      *uint64_t v11 = v42;
      v11[1] = v41;
      v11[2] = v40;
      v11[3] = v14;
      *((_DWORD *)v11 + 1) = 0;
      *((_DWORD *)v11 + 2) = v15;
      v11[22] = v16;
      v11[23] = v17;
      v11[33] = v18;
      v11[34] = v19;
      v11[35] = v20;
      v11[37] = v21;
      *((_DWORD *)v11 + 13) = *(_DWORD *)((char *)v63 + 3);
      *(_DWORD *)(v11 + 49) = v63[0];
      *(_DWORD *)(v11 - 47) = 0;
      *((double *)v11 - 2) = v12;
      *((double *)v11 - 1) = v13;
      *(void *)(v11 + 12) = 0;
      *((_WORD *)v11 + 10) = 0;
      *((void *)v11 + 3) = 0;
      v11[32] = 0;
      v11[36] = 0;
      ++v10;
      *(void *)(v11 + 38) = 0;
      *(_DWORD *)(v11 + 45) = 0;
      v11 += 112;
    }
    while (v22 != v10);
  }
  int v24 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v25 = v38;
  [v38 setWcmWiFiCellCoexIssueTable:v24];
  id v26 = [v25 wcmWiFiCellCoexIssueTable];
  [v26 configureBy:v37];
  [v25 setWcmCellularCoexB7ULRange:2500.0, 10.1];
  [v25 setWcmCellularCoexB7DLRange:2620.0, 10.1];
  [v25 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v25 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v25 setWcmCellularCoexB41A1Range:2496.0, 10.1];
  [v25 setWcmCellularCoexB41A2Range:2506.1, 20.0];
  [v25 setWcmCellularScanProtectionCellFrequencies:&off_1002501C8];
  [v25 setWcmCellularScanProtectionWiFiChannels:&off_100250258];
  [v25 setWcmCellularWCI2ModeControllerLTERBThreshold:[NSNumber numberWithInt:41]];
  [v25 setWcmCellularWCI2ModeLTEHarqnackratioThreshold:+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10)];
  [v25 setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable:[NSNumber numberWithBool:1]];
  id v61 = NSArray;
  id v62 = NSDictionary;
  id v27 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DD58, @"UCM_DESENSE_LEVEL", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v28 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DD58, @"UCM_DESENSE_LEVEL", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v29 = [v61 arrayWithObjects:v27, v28];
  objc_msgSend(v25, "setWcmWiFiBTCoexProfileDefault:", objc_msgSend(v62, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      v29,
      @"UCM_CHAIN_ATTR",
      0));
  id v62 = NSDictionary;
  id v30 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_LEVEL", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_10023DCC8,
            @"UCM_DESENSE_LEVEL",
            &off_10023DF38,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DF38,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  objc_msgSend(v25, "setWcmWiFiBTCoexProfileLight:", objc_msgSend(v62, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DED8, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DEF0, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DFB0,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF80,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      v30,
      @"UCM_CHAIN_ATTR",
      0));
  id v62 = NSDictionary;
  id v31 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_LEVEL", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_10023DCC8,
            @"UCM_DESENSE_LEVEL",
            &off_10023DF38,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DF38,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  objc_msgSend(v25, "setWcmWiFiBTCoexProfileHeavyHFP:", objc_msgSend(v62, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEF0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF50, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF80,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DF98,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      v31,
      @"UCM_CHAIN_ATTR",
      0));
  id v62 = NSDictionary;
  id v32 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_LEVEL", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_10023DCC8,
            @"UCM_DESENSE_LEVEL",
            &off_10023DF38,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DF38,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  objc_msgSend(v25, "setWcmWiFiBTCoexProfileHeavyA2DP:", objc_msgSend(v62, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DF50, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF68, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DFB0,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DF80,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF68,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DF68,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      v32,
      @"UCM_CHAIN_ATTR",
      0));
  id v62 = NSDictionary;
  id v33 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DD58, @"UCM_DESENSE_LEVEL", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_10023DD58,
            @"UCM_DESENSE_LEVEL",
            &off_10023DD88,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  id v34 = objc_msgSend(v62, "dictionaryWithObjectsAndKeys:", &off_10023DC80, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DEF0,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DF08,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DEC0,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DF08,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEC0,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v33,
          @"UCM_CHAIN_ATTR",
          0);
  return [v38 setWcmWiFiBTCoexProfileTDD:v34];
}

id sub_10011133C(void *a1)
{
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileDefault:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DD58, @"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          &off_10023DD58,
          @"UCM_DESENSE_STRONG_RSSI",
          &off_10023DD58,
          @"UCM_DESENSE_WEAK_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileLight:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DED8, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DEF0, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DFB0,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF80,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          &off_10023DCC8,
          @"UCM_DESENSE_STRONG_RSSI",
          &off_10023DC68,
          @"UCM_DESENSE_WEAK_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavyHFP:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEF0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF50, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF80,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DF98,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          &off_10023DCC8,
          @"UCM_DESENSE_STRONG_RSSI",
          &off_10023DC68,
          @"UCM_DESENSE_WEAK_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavyA2DP:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DF50, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF68, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DFB0,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DF80,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF68,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DF68,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          &off_10023DCC8,
          @"UCM_DESENSE_STRONG_RSSI",
          &off_10023DC68,
          @"UCM_DESENSE_WEAK_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileTDD:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DD58, @"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          @"UCM_DESENSE_STRONG_RSSI",
          &off_10023DD58,
          @"UCM_DESENSE_WEAK_RSSI",
          &off_10023DD88,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  uint64_t v1 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DD58, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DD58, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DD58, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DD58,
         @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
         &off_10023DD58,
         @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
         &off_10023DD58,
         @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
         &off_10023DD58,
         @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
         &off_10023DD58,
         @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
         &off_10023DD58,
         @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
         &off_10023DD58,
         @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
         &off_10023DD58,
         @"UCM_HYBRID_ANT_CORE_CONFIG",
         +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DD58, @"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
             NSDictionary,
             "dictionaryWithObjectsAndKeys:",
             @"UCM_DESENSE_STRONG_RSSI",
             &off_10023DD58,
             @"UCM_DESENSE_WEAK_RSSI",
             &off_10023DD88,
             @"UCM_ACK_PWR_STRONG_RSSI",
             &off_10023DD88,
             @"UCM_ACK_PWR_WEAK_RSSI",
             &off_10023DD88,
             @"UCM_TX_PWR_STRONG_RSSI",
             &off_10023DD88,
             @"UCM_TX_PWR_WEAK_RSSI",
             0),
           0),
         @"UCM_CHAIN_ATTR",
         0);

  return [a1 setWcmWiFiBTCoexProfileDefault5G:v1];
}

id sub_100111E24(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:-60];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-40];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-40];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-50];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-50];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:6790];
  [a1 setWcmWCI2MWSInactivityAssertJitter:192];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:500];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023E2B0];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  id v51 = a1;
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex018_V7WiFiEnh", @"plist") options:2 format:&v90 error:&v91];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  v49[1] = v49;
  __chkstk_darwin(v4, v5, v6);
  unsigned int v50 = (char *)v49 - v7 * (unint64_t)v8;
  uint64_t v9 = &v50[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v9 = 211;
  *(_OWORD *)(v9 + 4) = 0u;
  *(_OWORD *)(v9 + 20) = 0u;
  *(_OWORD *)(v9 + 36) = 0u;
  *(_OWORD *)(v9 + 52) = 0u;
  *(_OWORD *)(v9 + 68) = 0u;
  *(_OWORD *)(v9 + 84) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  unsigned __int16 v10 = (unsigned __int16)[v2 count];
  if (v10)
  {
    uint64_t v11 = 0;
    double v12 = v50 + 56;
    uint64_t v52 = v10;
    do
    {
      __int16 v88 = 0;
      char v89 = 0;
      v87[0] = 0;
      *(_DWORD *)((char *)v87 + 3) = 0;
      LODWORD(v86) = [[[v2 objectAtIndex:v11] objectForKey:@"issueBand"] intValue];
      LODWORD(v85) = [[[v2 objectAtIndex:v11] objectForKey:@"issueType"] intValue];
      unsigned int v84 = [[[v2 objectAtIndex:v11] objectForKey:@"isWiFiDesense"] BOOLValue];
      unsigned int v83 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v82 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v81 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v80 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v79 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v78 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v77 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v76 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap111"] intValue];
      unsigned int v75 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v74 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v73 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v72 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v71 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v70 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v69 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v68 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap111"] intValue];
      uint64_t v67 = [(int)[v2 objectAtIndex:v11] objectForKey:@"cellTxPowerLimit"] intValue];
      double v13 = (double)(int)[v2 objectAtIndex:v11][@"cellFrequencyLimitForOOB"][@"intValue"];
      double v14 = (double)(int)[v2 objectAtIndex:v11][@"cellBandwidthLimitForOOB"][@"intValue"];
      unsigned int v66 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToAvoidForCellOOB"] intValue];
      unsigned int v65 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToAvoidForCellOOB"] intValue];
      unsigned int v64 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v63 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v62 = [[[v2 objectAtIndex:v11] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned int v61 = [[[v2 objectAtIndex:v11] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned int v60 = [[[v2 objectAtIndex:v11] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned int v59 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority"] intValue];
      unsigned int v58 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority_WiFi"] intValue];
      unsigned int v57 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority_BT"] intValue];
      unsigned int v56 = [[[v2 objectAtIndex:v11] objectForKey:@"CellAntBlk"] intValue];
      unsigned int v55 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToDisableOCLCellOOB"] intValue];
      unsigned int v54 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToDisableOCLCellOOB"] intValue];
      BOOL v53 = [[[v2 objectAtIndex:v11] objectForKey:@"isWifiEnhBand"] intValue] != 0;
      unsigned __int8 v15 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToAvoidForCellOOBPHS"] intValue];
      unsigned __int8 v16 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToAvoidForCellOOBPHS"] intValue];
      unsigned __int8 v17 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii1Enabled"] BOOLValue];
      unsigned __int8 v18 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii3Enabled"] BOOLValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5aEnabled"] boolValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5bEnabled"] BOOLValue];
      unsigned __int8 v21 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5cEnabled"] BOOLValue];
      unsigned __int8 v22 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5dEnabled"] BOOLValue];
      int v23 = (int)v85;
      *((_DWORD *)v12 - 14) = v86;
      *((_DWORD *)v12 - 13) = v23;
      *(v12 - 48) = v84;
      *(v12 - 43) = v83;
      *(v12 - 42) = v82;
      *(v12 - 41) = v81;
      *(v12 - 40) = v80;
      *(v12 - 39) = v79;
      *(v12 - 38) = v78;
      *(v12 - 37) = v77;
      *(v12 - 36) = v76;
      *(_DWORD *)(v12 - 47) = 0;
      *(v12 - 35) = v75;
      *(v12 - 34) = v74;
      *(v12 - 33) = v73;
      *(v12 - 32) = v72;
      *(v12 - 31) = v71;
      *(v12 - 30) = v70;
      *(v12 - 29) = v69;
      *(v12 - 28) = v68;
      *(_WORD *)(v12 - 27) = v88;
      *(v12 - 25) = v89;
      *((void *)v12 - 3) = v67;
      *((double *)v12 - 2) = v13;
      *((double *)v12 - 1) = v14;
      *double v12 = v66;
      v12[1] = v65;
      v12[2] = v64;
      void v12[3] = v63;
      unsigned int v24 = v62;
      *((_DWORD *)v12 + 1) = 0;
      *((_DWORD *)v12 + 2) = v24;
      *(void *)(v12 + 12) = 0;
      *((_WORD *)v12 + 10) = 0;
      v12[22] = v61;
      v12[23] = v60;
      *((void *)v12 + 3) = 0;
      v12[32] = 0;
      v12[33] = v59;
      v12[34] = v58;
      v12[35] = v57;
      v12[36] = 0;
      v12[37] = v56;
      v12[38] = v55;
      v12[39] = v54;
      v12[40] = v53;
      v12[41] = v15;
      v12[42] = v16;
      v12[43] = v17;
      v12[44] = v18;
      v12[45] = v19;
      v12[46] = v20;
      v12[47] = v21;
      v12[48] = v22;
      int v25 = v87[0];
      ++v11;
      *((_DWORD *)v12 + 13) = *(_DWORD *)((char *)v87 + 3);
      uint64_t v26 = v52;
      *(_DWORD *)(v12 + 49) = v25;
      v12 += 112;
    }
    while (v26 != v11);
  }
  id v27 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v28 = v51;
  [v51 setWcmWiFiCellCoexIssueTable:v27];
  id v29 = [v28 wcmWiFiCellCoexIssueTable];
  [v29 configureBy:v50];
  [v28 setWcmCellularCoexB7ULRange:2500.0, 10.1];
  [v28 setWcmCellularCoexB7DLRange:2620.0, 10.1];
  [v28 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v28 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v28 setWcmCellularCoexB41A1Range:2496.0, 10.1];
  [v28 setWcmCellularCoexB41A2Range:2506.1, 20.0];
  [v28 setWcmCellularScanProtectionCellFrequencies:&off_100250288];
  [v28 setWcmCellularScanProtectionCellFrequenciesforBT:&off_1002502B8];
  [v28 setWcmCellularScanProtectionWiFiChannels:&off_1002502E8];
  [v28 setWcmCellularScanProtectionWiFiChannelsWiFiEnh:&off_100250318];
  [v28 setWcmCellularWCI2ModeControllerLTERBThreshold:+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 41)];
  [v28 setWcmCellularWCI2ModeLTEHarqnackratioThreshold:[NSNumber numberWithInt:10]];
  [v28 setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable:[NSNumber numberWithBool:1]];
  id v86 = NSDictionary;
  id v30 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", @"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary,
            "dictionaryWithObjectsAndKeys:",
            @"UCM_DESENSE_STRONG_RSSI",
            &off_10023DD58,
            @"UCM_DESENSE_WEAK_RSSI",
            &off_10023DF38,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DF38,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  id v31 = objc_msgSend(v86, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DEF0,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DF08,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DEC0,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DF08,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEC0,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v30,
          @"UCM_CHAIN_ATTR",
          0);
  [v51 setWcmWiFiBTCoexProfileDefault:v31];
  id v85 = NSArray;
  id v86 = NSDictionary;
  id v32 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v33 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v34 = [v85 arrayWithObjects:v32, v33, nil];
  id v35 = objc_msgSend(v86, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DED8, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DEF0, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DEF0,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DFB0,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DF80,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v34,
          @"UCM_CHAIN_ATTR",
          0);
  [v51 setWcmWiFiBTCoexProfileLight:v35];
  id v85 = NSArray;
  id v86 = NSDictionary;
  uint64_t v36 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v37 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v38 = [v85 arrayWithObjects:v36, v37];
  id v39 = objc_msgSend(v86, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEF0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF50, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DF80, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DF98,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DF50,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DF50,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v38,
          @"UCM_CHAIN_ATTR",
          0);
  [v51 setWcmWiFiBTCoexProfileHeavyHFP:v39];
  id v85 = NSArray;
  id v86 = NSDictionary;
  unsigned int v40 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  unsigned int v41 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v42 = [v85 arrayWithObjects:v40, v41];
  id v43 = objc_msgSend(v86, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DF50, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF68, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DFB0, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DF80,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DF50,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DF68,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DF50,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DF68,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v42,
          @"UCM_CHAIN_ATTR",
          0);
  [v51 setWcmWiFiBTCoexProfileHeavyA2DP:v43];
  id v86 = NSDictionary;
  unsigned int v44 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DD58, @"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
            NSDictionary,
            "dictionaryWithObjectsAndKeys:",
            @"UCM_DESENSE_STRONG_RSSI",
            &off_10023DD58,
            @"UCM_DESENSE_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  id v45 = objc_msgSend(v86, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DEF0,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DF08,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DEC0,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DF08,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEC0,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v44,
          @"UCM_CHAIN_ATTR",
          0);
  [v51 setWcmWiFiBTCoexProfileTDD:v45];
  id v86 = NSDictionary;
  unsigned int v46 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DD58, @"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
            NSDictionary,
            "dictionaryWithObjectsAndKeys:",
            @"UCM_DESENSE_STRONG_RSSI",
            &off_10023DD58,
            @"UCM_DESENSE_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  id v47 = objc_msgSend(v86, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DD58, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DD58, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DD58, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DD58,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v46,
          @"UCM_CHAIN_ATTR",
          0);
  return [v51 setWcmWiFiBTCoexProfileDefault5G:v47];
}

id sub_100113574(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:-60];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-40];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-40];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-50];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-50];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:6790];
  [a1 setWcmWCI2MWSInactivityAssertJitter:192];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:500];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023E2B0];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  id v51 = a1;
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex018_V7WiFiEnh", @"plist") options:2 format:&v90 error:&v91];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  v49[1] = v49;
  __chkstk_darwin(v4, v5, v6);
  unsigned int v50 = (char *)v49 - v7 * (unint64_t)v8;
  uint64_t v9 = &v50[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v9 = 211;
  *(_OWORD *)(v9 + 4) = 0u;
  *(_OWORD *)(v9 + 20) = 0u;
  *(_OWORD *)(v9 + 36) = 0u;
  *(_OWORD *)(v9 + 52) = 0u;
  *(_OWORD *)(v9 + 68) = 0u;
  *(_OWORD *)(v9 + 84) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  unsigned __int16 v10 = (unsigned __int16)[v2 count];
  if (v10)
  {
    uint64_t v11 = 0;
    double v12 = v50 + 56;
    uint64_t v52 = v10;
    do
    {
      __int16 v88 = 0;
      char v89 = 0;
      v87[0] = 0;
      *(_DWORD *)((char *)v87 + 3) = 0;
      LODWORD(v86) = [[[v2 objectAtIndex:v11] objectForKey:@"issueBand"] intValue];
      LODWORD(v85) = [[[v2 objectAtIndex:v11] objectForKey:@"issueType"] intValue];
      unsigned int v84 = [[[v2 objectAtIndex:v11] objectForKey:@"isWiFiDesense"] BOOLValue];
      unsigned int v83 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v82 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v81 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v80 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v79 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v78 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v77 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v76 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap111"] intValue];
      unsigned int v75 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v74 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v73 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v72 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v71 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v70 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v69 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v68 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap111"] intValue];
      uint64_t v67 = (int)[v2 objectAtIndex:v11][@"cellTxPowerLimit"][@"intValue"];
      double v13 = (double)(int)[v2 objectAtIndex:v11][@"cellFrequencyLimitForOOB"][@"intValue"];
      double v14 = (double)(int)[v2 objectAtIndex:v11][@"cellBandwidthLimitForOOB"][@"intValue"];
      unsigned int v66 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToAvoidForCellOOB"] intValue];
      unsigned int v65 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToAvoidForCellOOB"] intValue];
      unsigned int v64 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v63 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v62 = [[[v2 objectAtIndex:v11] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned int v61 = [[[v2 objectAtIndex:v11] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned int v60 = [[[v2 objectAtIndex:v11] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned int v59 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority"] intValue];
      unsigned int v58 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority_WiFi"] intValue];
      unsigned int v57 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority_BT"] intValue];
      unsigned int v56 = [[[v2 objectAtIndex:v11] objectForKey:@"CellAntBlk"] intValue];
      unsigned int v55 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToDisableOCLCellOOB"] intValue];
      unsigned int v54 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToDisableOCLCellOOB"] intValue];
      BOOL v53 = [[[v2 objectAtIndex:v11] objectForKey:@"isWifiEnhBand"] intValue] != 0;
      unsigned __int8 v15 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToAvoidForCellOOBPHS"] intValue];
      unsigned __int8 v16 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToAvoidForCellOOBPHS"] intValue];
      unsigned __int8 v17 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii1Enabled"] BOOLValue];
      unsigned __int8 v18 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii3Enabled"] BOOLValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5aEnabled"] boolValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5bEnabled"] boolValue];
      unsigned __int8 v21 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5cEnabled"] BOOLValue];
      unsigned __int8 v22 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5dEnabled"] BOOLValue];
      int v23 = (int)v85;
      *((_DWORD *)v12 - 14) = v86;
      *((_DWORD *)v12 - 13) = v23;
      *(v12 - 48) = v84;
      *(v12 - 43) = v83;
      *(v12 - 42) = v82;
      *(v12 - 41) = v81;
      *(v12 - 40) = v80;
      *(v12 - 39) = v79;
      *(v12 - 38) = v78;
      *(v12 - 37) = v77;
      *(v12 - 36) = v76;
      *(_DWORD *)(v12 - 47) = 0;
      *(v12 - 35) = v75;
      *(v12 - 34) = v74;
      *(v12 - 33) = v73;
      *(v12 - 32) = v72;
      *(v12 - 31) = v71;
      *(v12 - 30) = v70;
      *(v12 - 29) = v69;
      *(v12 - 28) = v68;
      *(_WORD *)(v12 - 27) = v88;
      *(v12 - 25) = v89;
      *((void *)v12 - 3) = v67;
      *((double *)v12 - 2) = v13;
      *((double *)v12 - 1) = v14;
      *double v12 = v66;
      v12[1] = v65;
      v12[2] = v64;
      void v12[3] = v63;
      unsigned int v24 = v62;
      *((_DWORD *)v12 + 1) = 0;
      *((_DWORD *)v12 + 2) = v24;
      *(void *)(v12 + 12) = 0;
      *((_WORD *)v12 + 10) = 0;
      v12[22] = v61;
      v12[23] = v60;
      *((void *)v12 + 3) = 0;
      v12[32] = 0;
      v12[33] = v59;
      v12[34] = v58;
      v12[35] = v57;
      v12[36] = 0;
      v12[37] = v56;
      v12[38] = v55;
      v12[39] = v54;
      v12[40] = v53;
      v12[41] = v15;
      v12[42] = v16;
      v12[43] = v17;
      v12[44] = v18;
      v12[45] = v19;
      v12[46] = v20;
      v12[47] = v21;
      v12[48] = v22;
      int v25 = v87[0];
      ++v11;
      *((_DWORD *)v12 + 13) = *(_DWORD *)((char *)v87 + 3);
      uint64_t v26 = v52;
      *(_DWORD *)(v12 + 49) = v25;
      v12 += 112;
    }
    while (v26 != v11);
  }
  id v27 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v28 = v51;
  [v51 setWcmWiFiCellCoexIssueTable:v27];
  id v29 = [v28 wcmWiFiCellCoexIssueTable];
  [v29 configureBy:v50];
  [v28 setWcmCellularCoexB7ULRange:2500.0, 10.1];
  [v28 setWcmCellularCoexB7DLRange:2620.0, 10.1];
  [v28 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v28 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v28 setWcmCellularCoexB41A1Range:2496.0, 10.1];
  [v28 setWcmCellularCoexB41A2Range:2506.1, 20.0];
  [v28 setWcmCellularScanProtectionCellFrequencies:&off_100250348];
  [v28 setWcmCellularScanProtectionCellFrequenciesforBT:&off_100250378];
  [v28 setWcmCellularScanProtectionWiFiChannels:&off_1002503A8];
  [v28 setWcmCellularScanProtectionWiFiChannelsWiFiEnh:&off_1002503D8];
  [v28 setWcmCellularWCI2ModeControllerLTERBThreshold:[NSNumber numberWithInt:41]];
  [v28 setWcmCellularWCI2ModeLTEHarqnackratioThreshold:[NSNumber numberWithInt:10]];
  [v28 setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable:[NSNumber numberWithBool:1]];
  id v86 = NSDictionary;
  id v30 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", @"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary,
            "dictionaryWithObjectsAndKeys:",
            @"UCM_DESENSE_STRONG_RSSI",
            &off_10023DD58,
            @"UCM_DESENSE_WEAK_RSSI",
            &off_10023DF38,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DF38,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  id v31 = objc_msgSend(v86, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DEF0,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DF08,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DEC0,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DF08,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEC0,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v30,
          @"UCM_CHAIN_ATTR",
          0);
  [v51 setWcmWiFiBTCoexProfileDefault:v31];
  id v85 = NSArray;
  id v86 = NSDictionary;
  id v32 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v33 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v34 = [v85 arrayWithObjects:v32, v33];
  id v35 = objc_msgSend(v86, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DED8, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DEF0, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DEF0,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DFB0,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DF80,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v34,
          @"UCM_CHAIN_ATTR",
          0);
  [v51 setWcmWiFiBTCoexProfileLight:v35];
  id v85 = NSArray;
  id v86 = NSDictionary;
  uint64_t v36 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v37 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v38 = [v85 arrayWithObjects:v36, v37];
  id v39 = objc_msgSend(v86, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEF0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF50, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DF80, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DF98,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DF50,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DF50,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v38,
          @"UCM_CHAIN_ATTR",
          0);
  [v51 setWcmWiFiBTCoexProfileHeavyHFP:v39];
  id v85 = NSArray;
  id v86 = NSDictionary;
  unsigned int v40 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  unsigned int v41 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v42 = [v85 arrayWithObjects:v40, v41];
  id v43 = objc_msgSend(v86, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DF50, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF68, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DFB0, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DF80,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DF50,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DF68,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DF50,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DF68,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v42,
          @"UCM_CHAIN_ATTR",
          0);
  [v51 setWcmWiFiBTCoexProfileHeavyA2DP:v43];
  id v86 = NSDictionary;
  unsigned int v44 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DD58, @"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
            NSDictionary,
            "dictionaryWithObjectsAndKeys:",
            @"UCM_DESENSE_STRONG_RSSI",
            &off_10023DD58,
            @"UCM_DESENSE_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  id v45 = objc_msgSend(v86, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DEF0,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DF08,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DEC0,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DF08,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEC0,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v44,
          @"UCM_CHAIN_ATTR",
          0);
  [v51 setWcmWiFiBTCoexProfileTDD:v45];
  id v86 = NSDictionary;
  unsigned int v46 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DD58, @"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
            NSDictionary,
            "dictionaryWithObjectsAndKeys:",
            @"UCM_DESENSE_STRONG_RSSI",
            &off_10023DD58,
            @"UCM_DESENSE_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  id v47 = objc_msgSend(v86, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DD58, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DD58, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DD58, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DD58,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v46,
          @"UCM_CHAIN_ATTR",
          0);
  return [v51 setWcmWiFiBTCoexProfileDefault5G:v47];
}

id sub_100114CC4(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:-60];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-40];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-40];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-50];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-50];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:6790];
  [a1 setWcmWCI2MWSInactivityAssertJitter:192];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:500];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023E2B0];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  id v51 = a1;
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex020_V7WiFiEnh", @"plist") options:2 format:&v90 error:&v91];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  v49[1] = v49;
  __chkstk_darwin(v4, v5, v6);
  unsigned int v50 = (char *)v49 - v7 * (unint64_t)v8;
  uint64_t v9 = &v50[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v9 = 211;
  *(_OWORD *)(v9 + 4) = 0u;
  *(_OWORD *)(v9 + 20) = 0u;
  *(_OWORD *)(v9 + 36) = 0u;
  *(_OWORD *)(v9 + 52) = 0u;
  *(_OWORD *)(v9 + 68) = 0u;
  *(_OWORD *)(v9 + 84) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  unsigned __int16 v10 = (unsigned __int16)[v2 count];
  if (v10)
  {
    uint64_t v11 = 0;
    double v12 = v50 + 56;
    uint64_t v52 = v10;
    do
    {
      __int16 v88 = 0;
      char v89 = 0;
      v87[0] = 0;
      *(_DWORD *)((char *)v87 + 3) = 0;
      LODWORD(v86) = [[[v2 objectAtIndex:v11] objectForKey:@"issueBand"] intValue];
      LODWORD(v85) = [[[v2 objectAtIndex:v11] objectForKey:@"issueType"] intValue];
      unsigned int v84 = [[[v2 objectAtIndex:v11] objectForKey:@"isWiFiDesense"] BOOLValue];
      unsigned int v83 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v82 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v81 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v80 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v79 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v78 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v77 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v76 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap111"] intValue];
      unsigned int v75 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v74 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v73 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v72 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v71 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v70 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v69 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v68 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap111"] intValue];
      uint64_t v67 = [[[v2 objectAtIndex:v11] objectForKey:@"cellTxPowerLimit"] intValue];
      double v13 = (double)[(int)[v2 objectAtIndex:v11] objectForKey:@"cellFrequencyLimitForOOB"]];
      double v14 = (double)(int)[v2 objectAtIndex:v11][@"cellBandwidthLimitForOOB"][@"intValue"];
      unsigned int v66 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToAvoidForCellOOB"] intValue];
      unsigned int v65 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToAvoidForCellOOB"] intValue];
      unsigned int v64 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v63 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v62 = [[[v2 objectAtIndex:v11] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned int v61 = [[[v2 objectAtIndex:v11] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned int v60 = [[[v2 objectAtIndex:v11] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned int v59 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority"] intValue];
      unsigned int v58 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority_WiFi"] intValue];
      unsigned int v57 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority_BT"] intValue];
      unsigned int v56 = [[[v2 objectAtIndex:v11] objectForKey:@"CellAntBlk"] intValue];
      unsigned int v55 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToDisableOCLCellOOB"] intValue];
      unsigned int v54 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToDisableOCLCellOOB"] intValue];
      BOOL v53 = [[[v2 objectAtIndex:v11] objectForKey:@"isWifiEnhBand"] intValue] != 0;
      unsigned __int8 v15 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToAvoidForCellOOBPHS"] intValue];
      unsigned __int8 v16 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToAvoidForCellOOBPHS"] intValue];
      unsigned __int8 v17 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii1Enabled"] boolValue];
      unsigned __int8 v18 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii3Enabled"] boolValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5aEnabled"] BOOLValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5bEnabled"] boolValue];
      unsigned __int8 v21 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5cEnabled"] BOOLValue];
      unsigned __int8 v22 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5dEnabled"] BOOLValue];
      int v23 = (int)v85;
      *((_DWORD *)v12 - 14) = v86;
      *((_DWORD *)v12 - 13) = v23;
      *(v12 - 48) = v84;
      *(v12 - 43) = v83;
      *(v12 - 42) = v82;
      *(v12 - 41) = v81;
      *(v12 - 40) = v80;
      *(v12 - 39) = v79;
      *(v12 - 38) = v78;
      *(v12 - 37) = v77;
      *(v12 - 36) = v76;
      *(_DWORD *)(v12 - 47) = 0;
      *(v12 - 35) = v75;
      *(v12 - 34) = v74;
      *(v12 - 33) = v73;
      *(v12 - 32) = v72;
      *(v12 - 31) = v71;
      *(v12 - 30) = v70;
      *(v12 - 29) = v69;
      *(v12 - 28) = v68;
      *(_WORD *)(v12 - 27) = v88;
      *(v12 - 25) = v89;
      *((void *)v12 - 3) = v67;
      *((double *)v12 - 2) = v13;
      *((double *)v12 - 1) = v14;
      *double v12 = v66;
      v12[1] = v65;
      v12[2] = v64;
      void v12[3] = v63;
      unsigned int v24 = v62;
      *((_DWORD *)v12 + 1) = 0;
      *((_DWORD *)v12 + 2) = v24;
      *(void *)(v12 + 12) = 0;
      *((_WORD *)v12 + 10) = 0;
      v12[22] = v61;
      v12[23] = v60;
      *((void *)v12 + 3) = 0;
      v12[32] = 0;
      v12[33] = v59;
      v12[34] = v58;
      v12[35] = v57;
      v12[36] = 0;
      v12[37] = v56;
      v12[38] = v55;
      v12[39] = v54;
      v12[40] = v53;
      v12[41] = v15;
      v12[42] = v16;
      v12[43] = v17;
      v12[44] = v18;
      v12[45] = v19;
      v12[46] = v20;
      v12[47] = v21;
      v12[48] = v22;
      int v25 = v87[0];
      ++v11;
      *((_DWORD *)v12 + 13) = *(_DWORD *)((char *)v87 + 3);
      uint64_t v26 = v52;
      *(_DWORD *)(v12 + 49) = v25;
      v12 += 112;
    }
    while (v26 != v11);
  }
  id v27 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v28 = v51;
  [v51 setWcmWiFiCellCoexIssueTable:v27];
  id v29 = [v28 wcmWiFiCellCoexIssueTable];
  [v29 configureBy:v50];
  [v28 setWcmCellularCoexB7ULRange:2500.0, 10.1];
  [v28 setWcmCellularCoexB7DLRange:2620.0, 10.1];
  [v28 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v28 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v28 setWcmCellularCoexB41A1Range:2496.0, 10.1];
  [v28 setWcmCellularCoexB41A2Range:2506.1, 20.0];
  [v28 setWcmCellularScanProtectionCellFrequencies:&off_100250408];
  [v28 setWcmCellularScanProtectionCellFrequenciesforBT:&off_100250438];
  [v28 setWcmCellularScanProtectionWiFiChannels:&off_100250468];
  [v28 setWcmCellularScanProtectionWiFiChannelsWiFiEnh:&off_100250498];
  [v28 setWcmCellularWCI2ModeControllerLTERBThreshold:[NSNumber numberWithInt:41]];
  [v28 setWcmCellularWCI2ModeLTEHarqnackratioThreshold:[NSNumber numberWithInt:10]];
  [v28 setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable:[NSNumber numberWithBool:1]];
  id v86 = NSDictionary;
  id v30 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", @"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary,
            "dictionaryWithObjectsAndKeys:",
            @"UCM_DESENSE_STRONG_RSSI",
            &off_10023DD58,
            @"UCM_DESENSE_WEAK_RSSI",
            &off_10023DF38,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DF38,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  id v31 = objc_msgSend(v86, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DEF0,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DF08,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DEC0,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DF08,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEC0,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v30,
          @"UCM_CHAIN_ATTR",
          0);
  [v51 setWcmWiFiBTCoexProfileDefault:v31];
  id v85 = NSArray;
  id v86 = NSDictionary;
  id v32 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v33 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v34 = [v85 arrayWithObjects:v32, v33];
  id v35 = objc_msgSend(v86, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DED8, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DEF0, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DEF0,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DFB0,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DF80,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v34,
          @"UCM_CHAIN_ATTR",
          0);
  [v51 setWcmWiFiBTCoexProfileLight:v35];
  id v85 = NSArray;
  id v86 = NSDictionary;
  uint64_t v36 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v37 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v38 = [v85 arrayWithObjects:v36, v37, nil];
  id v39 = objc_msgSend(v86, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEF0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF50, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DF80, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DF98,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DF50,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DF50,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v38,
          @"UCM_CHAIN_ATTR",
          0);
  [v51 setWcmWiFiBTCoexProfileHeavyHFP:v39];
  id v85 = NSArray;
  id v86 = NSDictionary;
  unsigned int v40 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  unsigned int v41 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v42 = [v85 arrayWithObjects:v40, v41];
  id v43 = objc_msgSend(v86, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DF50, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF68, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DFB0, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DF80,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DF50,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DF68,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DF50,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DF68,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v42,
          @"UCM_CHAIN_ATTR",
          0);
  [v51 setWcmWiFiBTCoexProfileHeavyA2DP:v43];
  id v86 = NSDictionary;
  unsigned int v44 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DD58, @"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
            NSDictionary,
            "dictionaryWithObjectsAndKeys:",
            @"UCM_DESENSE_STRONG_RSSI",
            &off_10023DD58,
            @"UCM_DESENSE_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  id v45 = objc_msgSend(v86, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DEF0,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DF08,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DEC0,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DF08,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEC0,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v44,
          @"UCM_CHAIN_ATTR",
          0);
  [v51 setWcmWiFiBTCoexProfileTDD:v45];
  id v86 = NSDictionary;
  unsigned int v46 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DD58, @"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
            NSDictionary,
            "dictionaryWithObjectsAndKeys:",
            @"UCM_DESENSE_STRONG_RSSI",
            &off_10023DD58,
            @"UCM_DESENSE_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  id v47 = objc_msgSend(v86, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DD58, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DD58, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DD58, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DD58,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v46,
          @"UCM_CHAIN_ATTR",
          0);
  return [v51 setWcmWiFiBTCoexProfileDefault5G:v47];
}

id sub_100116414(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:-60];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-40];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-40];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-50];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-50];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:6790];
  [a1 setWcmWCI2MWSInactivityAssertJitter:192];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:500];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023E2B0];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  id v51 = a1;
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex020_V7WiFiEnh", @"plist") options:2 format:&v90 error:&v91];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  v49[1] = v49;
  __chkstk_darwin(v4, v5, v6);
  unsigned int v50 = (char *)v49 - v7 * (unint64_t)v8;
  uint64_t v9 = &v50[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v9 = 211;
  *(_OWORD *)(v9 + 4) = 0u;
  *(_OWORD *)(v9 + 20) = 0u;
  *(_OWORD *)(v9 + 36) = 0u;
  *(_OWORD *)(v9 + 52) = 0u;
  *(_OWORD *)(v9 + 68) = 0u;
  *(_OWORD *)(v9 + 84) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  unsigned __int16 v10 = (unsigned __int16)[v2 count];
  if (v10)
  {
    uint64_t v11 = 0;
    double v12 = v50 + 56;
    uint64_t v52 = v10;
    do
    {
      __int16 v88 = 0;
      char v89 = 0;
      v87[0] = 0;
      *(_DWORD *)((char *)v87 + 3) = 0;
      LODWORD(v86) = [[[v2 objectAtIndex:v11] objectForKey:@"issueBand"] intValue];
      LODWORD(v85) = [[[v2 objectAtIndex:v11] objectForKey:@"issueType"] intValue];
      unsigned int v84 = [[[v2 objectAtIndex:v11] objectForKey:@"isWiFiDesense"] boolValue];
      unsigned int v83 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v82 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v81 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v80 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v79 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v78 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v77 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v76 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap111"] intValue];
      unsigned int v75 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v74 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v73 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v72 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v71 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v70 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v69 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v68 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap111"] intValue];
      uint64_t v67 = [(int)[v2 objectAtIndex:v11] objectForKey:@"cellTxPowerLimit"] intValue];
      double v13 = (double)(int)[v2 objectAtIndex:v11][@"cellFrequencyLimitForOOB"][@"intValue"];
      double v14 = (double)(int)[v2 objectAtIndex:v11][@"cellBandwidthLimitForOOB"][@"intValue"];
      unsigned int v66 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToAvoidForCellOOB"] intValue];
      unsigned int v65 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToAvoidForCellOOB"] intValue];
      unsigned int v64 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v63 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v62 = [[[v2 objectAtIndex:v11] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned int v61 = [[[v2 objectAtIndex:v11] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned int v60 = [[[v2 objectAtIndex:v11] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned int v59 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority"] intValue];
      unsigned int v58 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority_WiFi"] intValue];
      unsigned int v57 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority_BT"] intValue];
      unsigned int v56 = [[[v2 objectAtIndex:v11] objectForKey:@"CellAntBlk"] intValue];
      unsigned int v55 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToDisableOCLCellOOB"] intValue];
      unsigned int v54 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToDisableOCLCellOOB"] intValue];
      BOOL v53 = [[[v2 objectAtIndex:v11] objectForKey:@"isWifiEnhBand"] intValue] != 0;
      unsigned __int8 v15 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToAvoidForCellOOBPHS"] intValue];
      unsigned __int8 v16 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToAvoidForCellOOBPHS"] intValue];
      unsigned __int8 v17 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii1Enabled"] BOOLValue];
      unsigned __int8 v18 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii3Enabled"] boolValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5aEnabled"] boolValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5bEnabled"] boolValue];
      unsigned __int8 v21 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5cEnabled"] boolValue];
      unsigned __int8 v22 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5dEnabled"] BOOLValue];
      int v23 = (int)v85;
      *((_DWORD *)v12 - 14) = v86;
      *((_DWORD *)v12 - 13) = v23;
      *(v12 - 48) = v84;
      *(v12 - 43) = v83;
      *(v12 - 42) = v82;
      *(v12 - 41) = v81;
      *(v12 - 40) = v80;
      *(v12 - 39) = v79;
      *(v12 - 38) = v78;
      *(v12 - 37) = v77;
      *(v12 - 36) = v76;
      *(_DWORD *)(v12 - 47) = 0;
      *(v12 - 35) = v75;
      *(v12 - 34) = v74;
      *(v12 - 33) = v73;
      *(v12 - 32) = v72;
      *(v12 - 31) = v71;
      *(v12 - 30) = v70;
      *(v12 - 29) = v69;
      *(v12 - 28) = v68;
      *(_WORD *)(v12 - 27) = v88;
      *(v12 - 25) = v89;
      *((void *)v12 - 3) = v67;
      *((double *)v12 - 2) = v13;
      *((double *)v12 - 1) = v14;
      *double v12 = v66;
      v12[1] = v65;
      v12[2] = v64;
      void v12[3] = v63;
      unsigned int v24 = v62;
      *((_DWORD *)v12 + 1) = 0;
      *((_DWORD *)v12 + 2) = v24;
      *(void *)(v12 + 12) = 0;
      *((_WORD *)v12 + 10) = 0;
      v12[22] = v61;
      v12[23] = v60;
      *((void *)v12 + 3) = 0;
      v12[32] = 0;
      v12[33] = v59;
      v12[34] = v58;
      v12[35] = v57;
      v12[36] = 0;
      v12[37] = v56;
      v12[38] = v55;
      v12[39] = v54;
      v12[40] = v53;
      v12[41] = v15;
      v12[42] = v16;
      v12[43] = v17;
      v12[44] = v18;
      v12[45] = v19;
      v12[46] = v20;
      v12[47] = v21;
      v12[48] = v22;
      int v25 = v87[0];
      ++v11;
      *((_DWORD *)v12 + 13) = *(_DWORD *)((char *)v87 + 3);
      uint64_t v26 = v52;
      *(_DWORD *)(v12 + 49) = v25;
      v12 += 112;
    }
    while (v26 != v11);
  }
  id v27 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v28 = v51;
  [v51 setWcmWiFiCellCoexIssueTable:v27];
  id v29 = [v28 wcmWiFiCellCoexIssueTable];
  [v29 configureBy:v50];
  [v28 setWcmCellularCoexB7ULRange:2500.0, 10.1];
  [v28 setWcmCellularCoexB7DLRange:2620.0, 10.1];
  [v28 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v28 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v28 setWcmCellularCoexB41A1Range:2496.0, 10.1];
  [v28 setWcmCellularCoexB41A2Range:2506.1, 20.0];
  [v28 setWcmCellularScanProtectionCellFrequencies:&off_1002504C8];
  [v28 setWcmCellularScanProtectionCellFrequenciesforBT:&off_1002504F8];
  [v28 setWcmCellularScanProtectionWiFiChannels:&off_100250528];
  [v28 setWcmCellularScanProtectionWiFiChannelsWiFiEnh:&off_100250558];
  [v28 setWcmCellularWCI2ModeControllerLTERBThreshold:[NSNumber numberWithInt:41]];
  [v28 setWcmCellularWCI2ModeLTEHarqnackratioThreshold:[NSNumber numberWithInt:10]];
  [v28 setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable:[NSNumber numberWithBool:1]];
  id v86 = NSDictionary;
  id v30 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", @"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary,
            "dictionaryWithObjectsAndKeys:",
            @"UCM_DESENSE_STRONG_RSSI",
            &off_10023DD58,
            @"UCM_DESENSE_WEAK_RSSI",
            &off_10023DF38,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DF38,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  id v31 = objc_msgSend(v86, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DEF0,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DF08,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DEC0,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DF08,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEC0,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v30,
          @"UCM_CHAIN_ATTR",
          0);
  [v51 setWcmWiFiBTCoexProfileDefault:v31];
  id v85 = NSArray;
  id v86 = NSDictionary;
  id v32 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v33 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v34 = [v85 arrayWithObjects:v32, v33];
  id v35 = objc_msgSend(v86, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DED8, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DEF0, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DEF0,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DFB0,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DF80,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v34,
          @"UCM_CHAIN_ATTR",
          0);
  [v51 setWcmWiFiBTCoexProfileLight:v35];
  id v85 = NSArray;
  id v86 = NSDictionary;
  uint64_t v36 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v37 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v38 = [v85 arrayWithObjects:v36, v37];
  id v39 = objc_msgSend(v86, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEF0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF50, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DF80, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DF98,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DF50,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DF50,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v38,
          @"UCM_CHAIN_ATTR",
          0);
  [v51 setWcmWiFiBTCoexProfileHeavyHFP:v39];
  id v85 = NSArray;
  id v86 = NSDictionary;
  unsigned int v40 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  unsigned int v41 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v42 = [v85 arrayWithObjects:v40, v41];
  id v43 = objc_msgSend(v86, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DF50, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF68, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DFB0, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DF80,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DF50,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DF68,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DF50,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DF68,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v42,
          @"UCM_CHAIN_ATTR",
          0);
  [v51 setWcmWiFiBTCoexProfileHeavyA2DP:v43];
  id v86 = NSDictionary;
  unsigned int v44 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DD58, @"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
            NSDictionary,
            "dictionaryWithObjectsAndKeys:",
            @"UCM_DESENSE_STRONG_RSSI",
            &off_10023DD58,
            @"UCM_DESENSE_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  id v45 = objc_msgSend(v86, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DEF0,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DF08,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DEC0,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DF08,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEC0,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v44,
          @"UCM_CHAIN_ATTR",
          0);
  [v51 setWcmWiFiBTCoexProfileTDD:v45];
  id v86 = NSDictionary;
  unsigned int v46 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DD58, @"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
            NSDictionary,
            "dictionaryWithObjectsAndKeys:",
            @"UCM_DESENSE_STRONG_RSSI",
            &off_10023DD58,
            @"UCM_DESENSE_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_ACK_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_ACK_PWR_WEAK_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_STRONG_RSSI",
            &off_10023DD88,
            @"UCM_TX_PWR_WEAK_RSSI",
            0),
          0);
  id v47 = objc_msgSend(v86, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DD58, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DD58, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DD58, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DD58,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v46,
          @"UCM_CHAIN_ATTR",
          0);
  return [v51 setWcmWiFiBTCoexProfileDefault5G:v47];
}

id sub_100117B64(void *a1)
{
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileDefault:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DD58, @"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          &off_10023DD58,
          @"UCM_DESENSE_STRONG_RSSI",
          &off_10023DD58,
          @"UCM_DESENSE_WEAK_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileLight:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DED8, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DEF0, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DFB0,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF80,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          &off_10023DCC8,
          @"UCM_DESENSE_STRONG_RSSI",
          &off_10023DC68,
          @"UCM_DESENSE_WEAK_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavyHFP:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEF0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF50, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF80,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DF98,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          &off_10023DCC8,
          @"UCM_DESENSE_STRONG_RSSI",
          &off_10023DC68,
          @"UCM_DESENSE_WEAK_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavyA2DP:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DF50, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF68, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DFB0,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DF80,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DF68,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF50,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DF68,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          &off_10023DCC8,
          @"UCM_DESENSE_STRONG_RSSI",
          &off_10023DC68,
          @"UCM_DESENSE_WEAK_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DF38,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileTDD:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DD58, @"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          @"UCM_DESENSE_STRONG_RSSI",
          &off_10023DD58,
          @"UCM_DESENSE_WEAK_RSSI",
          &off_10023DD88,
          @"UCM_ACK_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_ACK_PWR_WEAK_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_STRONG_RSSI",
          &off_10023DD88,
          @"UCM_TX_PWR_WEAK_RSSI",
          0),
        0),
      @"UCM_CHAIN_ATTR",
      0));
  uint64_t v1 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DD58, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DD58, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DD58, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DD58,
         @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
         &off_10023DD58,
         @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
         &off_10023DD58,
         @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
         &off_10023DD58,
         @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
         &off_10023DD58,
         @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
         &off_10023DD58,
         @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
         &off_10023DD58,
         @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
         &off_10023DD58,
         @"UCM_HYBRID_ANT_CORE_CONFIG",
         +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10023DD58, @"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
             NSDictionary,
             "dictionaryWithObjectsAndKeys:",
             @"UCM_DESENSE_STRONG_RSSI",
             &off_10023DD58,
             @"UCM_DESENSE_WEAK_RSSI",
             &off_10023DD88,
             @"UCM_ACK_PWR_STRONG_RSSI",
             &off_10023DD88,
             @"UCM_ACK_PWR_WEAK_RSSI",
             &off_10023DD88,
             @"UCM_TX_PWR_STRONG_RSSI",
             &off_10023DD88,
             @"UCM_TX_PWR_WEAK_RSSI",
             0),
           0),
         @"UCM_CHAIN_ATTR",
         0);

  return [a1 setWcmWiFiBTCoexProfileDefault5G:v1];
}

id sub_10011866C(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:-60];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-40];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-40];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-50];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-50];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:6790];
  [a1 setWcmWCI2MWSInactivityAssertJitter:192];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:500];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023E2B0];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  id v56 = a1;
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  uint64_t v95 = 0;
  uint64_t v96 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex039_V7WiFiEnh", @"plist") options:2 format:&v95 error:&v96];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  v54[1] = v54;
  __chkstk_darwin(v4, v5, v6);
  unsigned int v55 = (char *)v54 - v7 * (unint64_t)v8;
  uint64_t v9 = &v55[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v9 = 211;
  *(_OWORD *)(v9 + 4) = 0u;
  *(_OWORD *)(v9 + 20) = 0u;
  *(_OWORD *)(v9 + 36) = 0u;
  *(_OWORD *)(v9 + 52) = 0u;
  *(_OWORD *)(v9 + 68) = 0u;
  *(_OWORD *)(v9 + 84) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  unsigned __int16 v10 = (unsigned __int16)[v2 count];
  if (v10)
  {
    uint64_t v11 = 0;
    double v12 = v55 + 56;
    uint64_t v57 = v10;
    do
    {
      __int16 v93 = 0;
      char v94 = 0;
      v92[0] = 0;
      *(_DWORD *)((char *)v92 + 3) = 0;
      LODWORD(v91) = [[[v2 objectAtIndex:v11] objectForKey:@"issueBand"] intValue];
      LODWORD(v90) = [[[v2 objectAtIndex:v11] objectForKey:@"issueType"] intValue];
      unsigned int v89 = [[[v2 objectAtIndex:v11] objectForKey:@"isWiFiDesense"] boolValue];
      unsigned int v88 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v87 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v86 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v85 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v84 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v83 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v82 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v81 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap111"] intValue];
      unsigned int v80 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v79 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v78 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v77 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v76 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v75 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v74 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v73 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap111"] intValue];
      uint64_t v72 = [(int)[v2 objectAtIndex:v11] objectForKey:@"cellTxPowerLimit"] intValue];
      double v13 = (double)(int)[v2 objectAtIndex:v11][@"cellFrequencyLimitForOOB"][@"intValue"];
      double v14 = (double)(int)[v2 objectAtIndex:v11][@"cellBandwidthLimitForOOB"][@"intValue"];
      unsigned int v71 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToAvoidForCellOOB"] intValue];
      unsigned int v70 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToAvoidForCellOOB"] intValue];
      unsigned int v69 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v68 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v67 = [[[v2 objectAtIndex:v11] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned int v66 = [[[v2 objectAtIndex:v11] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned int v65 = [[[v2 objectAtIndex:v11] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned int v64 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority"] intValue];
      unsigned int v63 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority_WiFi"] intValue];
      unsigned int v62 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority_BT"] intValue];
      unsigned int v61 = [[[v2 objectAtIndex:v11] objectForKey:@"CellAntBlk"] intValue];
      unsigned int v60 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToDisableOCLCellOOB"] intValue];
      unsigned int v59 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToDisableOCLCellOOB"] intValue];
      BOOL v58 = [[[v2 objectAtIndex:v11] objectForKey:@"isWifiEnhBand"] intValue] != 0;
      unsigned __int8 v15 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToAvoidForCellOOBPHS"] intValue];
      unsigned __int8 v16 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToAvoidForCellOOBPHS"] intValue];
      unsigned __int8 v17 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii1Enabled"] boolValue];
      unsigned __int8 v18 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii3Enabled"] BOOLValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5aEnabled"] boolValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5bEnabled"] BOOLValue];
      unsigned __int8 v21 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5cEnabled"] boolValue];
      unsigned __int8 v22 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5dEnabled"] BOOLValue];
      int v23 = (int)v90;
      *((_DWORD *)v12 - 14) = v91;
      *((_DWORD *)v12 - 13) = v23;
      *(v12 - 48) = v89;
      *(v12 - 43) = v88;
      *(v12 - 42) = v87;
      *(v12 - 41) = v86;
      *(v12 - 40) = v85;
      *(v12 - 39) = v84;
      *(v12 - 38) = v83;
      *(v12 - 37) = v82;
      *(v12 - 36) = v81;
      *(_DWORD *)(v12 - 47) = 0;
      *(v12 - 35) = v80;
      *(v12 - 34) = v79;
      *(v12 - 33) = v78;
      *(v12 - 32) = v77;
      *(v12 - 31) = v76;
      *(v12 - 30) = v75;
      *(v12 - 29) = v74;
      *(v12 - 28) = v73;
      *(_WORD *)(v12 - 27) = v93;
      *(v12 - 25) = v94;
      *((void *)v12 - 3) = v72;
      *((double *)v12 - 2) = v13;
      *((double *)v12 - 1) = v14;
      *double v12 = v71;
      v12[1] = v70;
      v12[2] = v69;
      void v12[3] = v68;
      unsigned int v24 = v67;
      *((_DWORD *)v12 + 1) = 0;
      *((_DWORD *)v12 + 2) = v24;
      *(void *)(v12 + 12) = 0;
      *((_WORD *)v12 + 10) = 0;
      v12[22] = v66;
      v12[23] = v65;
      *((void *)v12 + 3) = 0;
      v12[32] = 0;
      v12[33] = v64;
      v12[34] = v63;
      v12[35] = v62;
      v12[36] = 0;
      v12[37] = v61;
      v12[38] = v60;
      v12[39] = v59;
      v12[40] = v58;
      v12[41] = v15;
      v12[42] = v16;
      v12[43] = v17;
      v12[44] = v18;
      v12[45] = v19;
      v12[46] = v20;
      v12[47] = v21;
      v12[48] = v22;
      int v25 = v92[0];
      ++v11;
      *((_DWORD *)v12 + 13) = *(_DWORD *)((char *)v92 + 3);
      uint64_t v26 = v57;
      *(_DWORD *)(v12 + 49) = v25;
      v12 += 112;
    }
    while (v26 != v11);
  }
  id v27 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v28 = v56;
  [v56 setWcmWiFiCellCoexIssueTable:v27];
  id v29 = [v28 wcmWiFiCellCoexIssueTable];
  [v29 configureBy:v55];
  [v28 setWcmCellRc1CoexIssueTable:0];
  [v28 setWcmCellularCoexB7DLRange:2620.0, 40.0];
  [v28 setWcmCellularCoexB7ULRange:2500.0, 40.0];
  [v28 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v28 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v28 setWcmCellularCoexB41A1Range:2496.0, 20.0];
  [v28 setWcmCellularCoexB41A2Range:2516.0, 29.0];
  [v28 setWcmCellularScanProtectionCellFrequencies:&off_1002505D0];
  if (_os_feature_enabled_impl()) {
    id v30 = &off_100250648;
  }
  else {
    id v30 = &off_1002506C0;
  }
  [v28 setWcmCellularScanProtectionCellFrequenciesforBT:v30];
  [v28 setWcmCellularScanProtectionWiFiChannels:&off_100250738];
  [v28 setWcmCellularScanProtectionWiFiChannelsWiFiEnh:&off_1002507B0];
  [v28 setWcmWiFiScanThrottlingChannelIndices:&off_1002507C8];
  [v28 setWcmGen9rFemDefaultMode2gWiFiCellularbands:[NSDictionary dictionaryWithObjectsAndKeys:off_1002507E0, @"LTE", 0]];
  [v28 setWcmGen9rFemDefaultMode5gWiFiCellularbands:[NSDictionary dictionaryWithObjectsAndKeys:&off_1002507F8, @"LTE", 0]];
  id v90 = NSArray;
  id v91 = NSDictionary;
  id v31 = +[NSDictionary dictionaryWithObjectsAndKeys:@"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v32 = +[NSDictionary dictionaryWithObjectsAndKeys:@"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v33 = [v90 arrayWithObjects:v31, v32];
  objc_msgSend(v28, "setWcmWiFiBTCoexProfileDefault:", objc_msgSend(v91, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      v33,
      @"UCM_CHAIN_ATTR",
      0));
  id v90 = NSArray;
  id v91 = NSDictionary;
  id v34 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v35 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v36 = [v90 arrayWithObjects:v34, v35];
  id v37 = objc_msgSend(v91, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DED8, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DEF0, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DEF0,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DFB0,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DF80,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v36,
          @"UCM_CHAIN_ATTR",
          0);
  [v56 setWcmWiFiBTCoexProfileLight:v37];
  id v90 = NSArray;
  id v91 = NSDictionary;
  id v38 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v39 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v40 = [v90 arrayWithObjects:v38, v39];
  id v41 = objc_msgSend(v91, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEF0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF50, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DF80, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DF98,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DF50,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DF50,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v40,
          @"UCM_CHAIN_ATTR",
          0);
  [v56 setWcmWiFiBTCoexProfileHeavyHFP:v41];
  id v90 = NSArray;
  id v91 = NSDictionary;
  id v42 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v43 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v44 = [v90 arrayWithObjects:v42, v43];
  id v45 = objc_msgSend(v91, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DF50, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF68, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DFB0, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DF80,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DF50,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DF68,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DF50,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DF68,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v44,
          @"UCM_CHAIN_ATTR",
          0);
  id v46 = v56;
  [v56 setWcmWiFiBTCoexProfileHeavyA2DP:v45];
  id v90 = NSArray;
  id v91 = NSDictionary;
  id v47 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DD58, @"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  unsigned int v48 = +[NSDictionary dictionaryWithObjectsAndKeys:@"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v49 = [v90 arrayWithObjects:v47, v48];
  objc_msgSend(v46, "setWcmWiFiBTCoexProfileTDD:", objc_msgSend(v91, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      v49,
      @"UCM_CHAIN_ATTR",
      0));
  id v90 = NSArray;
  id v91 = NSDictionary;
  unsigned int v50 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DD58, @"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v51 = +[NSDictionary dictionaryWithObjectsAndKeys:@"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v52 = [v90 arrayWithObjects:v50, v51, nil];
  return objc_msgSend(v46, "setWcmWiFiBTCoexProfileDefault5G:", objc_msgSend(v91, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DD58, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DD58, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
             &off_10023DD58,
             @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
             &off_10023DD58,
             @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
             &off_10023DD58,
             @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
             &off_10023DD58,
             @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
             &off_10023DD58,
             @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
             &off_10023DD58,
             @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
             &off_10023DD58,
             @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
             &off_10023DD58,
             @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
             &off_10023DD58,
             @"UCM_HYBRID_ANT_CORE_CONFIG",
             v52,
             @"UCM_CHAIN_ATTR",
             0));
}

id sub_100119E24(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:-60];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-40];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-40];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-50];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-50];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:6790];
  [a1 setWcmWCI2MWSInactivityAssertJitter:192];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:500];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023E2B0];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  id v56 = a1;
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  uint64_t v95 = 0;
  uint64_t v96 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex040_V7WiFiEnh", @"plist") options:2 format:&v95 error:&v96];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  v54[1] = v54;
  __chkstk_darwin(v4, v5, v6);
  unsigned int v55 = (char *)v54 - v7 * (unint64_t)v8;
  uint64_t v9 = &v55[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v9 = 211;
  *(_OWORD *)(v9 + 4) = 0u;
  *(_OWORD *)(v9 + 20) = 0u;
  *(_OWORD *)(v9 + 36) = 0u;
  *(_OWORD *)(v9 + 52) = 0u;
  *(_OWORD *)(v9 + 68) = 0u;
  *(_OWORD *)(v9 + 84) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  unsigned __int16 v10 = (unsigned __int16)[v2 count];
  if (v10)
  {
    uint64_t v11 = 0;
    double v12 = v55 + 56;
    uint64_t v57 = v10;
    do
    {
      __int16 v93 = 0;
      char v94 = 0;
      v92[0] = 0;
      *(_DWORD *)((char *)v92 + 3) = 0;
      LODWORD(v91) = [[[v2 objectAtIndex:v11] objectForKey:@"issueBand"] intValue];
      LODWORD(v90) = [[[v2 objectAtIndex:v11] objectForKey:@"issueType"] intValue];
      unsigned int v89 = [[[v2 objectAtIndex:v11] objectForKey:@"isWiFiDesense"] BOOLValue];
      unsigned int v88 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v87 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v86 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v85 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v84 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v83 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v82 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v81 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap111"] intValue];
      unsigned int v80 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v79 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v78 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v77 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v76 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v75 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v74 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v73 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap111"] intValue];
      uint64_t v72 = [[[v2 objectAtIndex:v11] objectForKey:@"cellTxPowerLimit"] intValue];
      double v13 = (double)(int)[v2 objectAtIndex:v11][@"cellFrequencyLimitForOOB"][@"intValue"];
      double v14 = (double)[(int)[v2 objectAtIndex:v11] objectForKey:@"cellBandwidthLimitForOOB"];
      unsigned int v71 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToAvoidForCellOOB"] intValue];
      unsigned int v70 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToAvoidForCellOOB"] intValue];
      unsigned int v69 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v68 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v67 = [[[v2 objectAtIndex:v11] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned int v66 = [[[v2 objectAtIndex:v11] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned int v65 = [[[v2 objectAtIndex:v11] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned int v64 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority"] intValue];
      unsigned int v63 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority_WiFi"] intValue];
      unsigned int v62 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority_BT"] intValue];
      unsigned int v61 = [[[v2 objectAtIndex:v11] objectForKey:@"CellAntBlk"] intValue];
      unsigned int v60 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToDisableOCLCellOOB"] intValue];
      unsigned int v59 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToDisableOCLCellOOB"] intValue];
      BOOL v58 = [[[v2 objectAtIndex:v11] objectForKey:@"isWifiEnhBand"] intValue] != 0;
      unsigned __int8 v15 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToAvoidForCellOOBPHS"] intValue];
      unsigned __int8 v16 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToAvoidForCellOOBPHS"] intValue];
      unsigned __int8 v17 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii1Enabled"] BOOLValue];
      unsigned __int8 v18 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii3Enabled"] BOOLValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5aEnabled"] BOOLValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5bEnabled"] BOOLValue];
      unsigned __int8 v21 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5cEnabled"] boolValue];
      unsigned __int8 v22 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5dEnabled"] BOOLValue];
      int v23 = (int)v90;
      *((_DWORD *)v12 - 14) = v91;
      *((_DWORD *)v12 - 13) = v23;
      *(v12 - 48) = v89;
      *(v12 - 43) = v88;
      *(v12 - 42) = v87;
      *(v12 - 41) = v86;
      *(v12 - 40) = v85;
      *(v12 - 39) = v84;
      *(v12 - 38) = v83;
      *(v12 - 37) = v82;
      *(v12 - 36) = v81;
      *(_DWORD *)(v12 - 47) = 0;
      *(v12 - 35) = v80;
      *(v12 - 34) = v79;
      *(v12 - 33) = v78;
      *(v12 - 32) = v77;
      *(v12 - 31) = v76;
      *(v12 - 30) = v75;
      *(v12 - 29) = v74;
      *(v12 - 28) = v73;
      *(_WORD *)(v12 - 27) = v93;
      *(v12 - 25) = v94;
      *((void *)v12 - 3) = v72;
      *((double *)v12 - 2) = v13;
      *((double *)v12 - 1) = v14;
      *double v12 = v71;
      v12[1] = v70;
      v12[2] = v69;
      void v12[3] = v68;
      unsigned int v24 = v67;
      *((_DWORD *)v12 + 1) = 0;
      *((_DWORD *)v12 + 2) = v24;
      *(void *)(v12 + 12) = 0;
      *((_WORD *)v12 + 10) = 0;
      v12[22] = v66;
      v12[23] = v65;
      *((void *)v12 + 3) = 0;
      v12[32] = 0;
      v12[33] = v64;
      v12[34] = v63;
      v12[35] = v62;
      v12[36] = 0;
      v12[37] = v61;
      v12[38] = v60;
      v12[39] = v59;
      v12[40] = v58;
      v12[41] = v15;
      v12[42] = v16;
      v12[43] = v17;
      v12[44] = v18;
      v12[45] = v19;
      v12[46] = v20;
      v12[47] = v21;
      v12[48] = v22;
      int v25 = v92[0];
      ++v11;
      *((_DWORD *)v12 + 13) = *(_DWORD *)((char *)v92 + 3);
      uint64_t v26 = v57;
      *(_DWORD *)(v12 + 49) = v25;
      v12 += 112;
    }
    while (v26 != v11);
  }
  id v27 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v28 = v56;
  [v56 setWcmWiFiCellCoexIssueTable:v27];
  id v29 = [v28 wcmWiFiCellCoexIssueTable];
  [v29 configureBy:v55];
  [v28 setWcmCellRc1CoexIssueTable:0];
  [v28 setWcmCellularCoexB7DLRange:2620.0, 40.0];
  [v28 setWcmCellularCoexB7ULRange:2500.0, 40.0];
  [v28 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v28 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v28 setWcmCellularCoexB41A1Range:2496.0, 20.0];
  [v28 setWcmCellularCoexB41A2Range:2516.0, 29.0];
  [v28 setWcmCellularScanProtectionCellFrequencies:&off_100250870];
  if (_os_feature_enabled_impl()) {
    id v30 = &off_1002508E8;
  }
  else {
    id v30 = &off_100250960;
  }
  [v28 setWcmCellularScanProtectionCellFrequenciesforBT:v30];
  [v28 setWcmCellularScanProtectionWiFiChannels:&off_1002509D8];
  [v28 setWcmCellularScanProtectionWiFiChannelsWiFiEnh:&off_100250A50];
  [v28 setWcmWiFiScanThrottlingChannelIndices:&off_100250A68];
  [v28 setWcmGen9rFemDefaultMode2gWiFiCellularbands:[NSDictionary dictionaryWithObjectsAndKeys:&off_100250A80, @"LTE", 0]];
  [v28 setWcmGen9rFemDefaultMode5gWiFiCellularbands:[NSDictionary dictionaryWithObjectsAndKeys:&off_100250A98, @"LTE", 0]];
  id v90 = NSArray;
  id v91 = NSDictionary;
  id v31 = +[NSDictionary dictionaryWithObjectsAndKeys:@"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v32 = +[NSDictionary dictionaryWithObjectsAndKeys:@"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v33 = [v90 arrayWithObjects:v31, v32, nil];
  objc_msgSend(v28, "setWcmWiFiBTCoexProfileDefault:", objc_msgSend(v91, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      v33,
      @"UCM_CHAIN_ATTR",
      0));
  id v90 = NSArray;
  id v91 = NSDictionary;
  id v34 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v35 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v36 = [v90 arrayWithObjects:v34, v35, nil];
  id v37 = objc_msgSend(v91, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DED8, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DEF0, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DEF0,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DFB0,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DF80,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v36,
          @"UCM_CHAIN_ATTR",
          0);
  [v56 setWcmWiFiBTCoexProfileLight:v37];
  id v90 = NSArray;
  id v91 = NSDictionary;
  id v38 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v39 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v40 = [v90 arrayWithObjects:v38, v39];
  id v41 = objc_msgSend(v91, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEF0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF50, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DF80, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DF98,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DF50,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DF50,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v40,
          @"UCM_CHAIN_ATTR",
          0);
  [v56 setWcmWiFiBTCoexProfileHeavyHFP:v41];
  id v90 = NSArray;
  id v91 = NSDictionary;
  id v42 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v43 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v44 = [v90 arrayWithObjects:v42, v43];
  id v45 = objc_msgSend(v91, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DF50, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF68, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DFB0, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DF80,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DF50,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DF68,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DF50,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DF68,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v44,
          @"UCM_CHAIN_ATTR",
          0);
  id v46 = v56;
  [v56 setWcmWiFiBTCoexProfileHeavyA2DP:v45];
  id v90 = NSArray;
  id v91 = NSDictionary;
  id v47 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DD58, @"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  unsigned int v48 = +[NSDictionary dictionaryWithObjectsAndKeys:@"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v49 = [v90 arrayWithObjects:v47, v48];
  objc_msgSend(v46, "setWcmWiFiBTCoexProfileTDD:", objc_msgSend(v91, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      v49,
      @"UCM_CHAIN_ATTR",
      0));
  id v90 = NSArray;
  id v91 = NSDictionary;
  unsigned int v50 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DD58, @"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v51 = +[NSDictionary dictionaryWithObjectsAndKeys:@"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v52 = [v90 arrayWithObjects:v50, v51];
  return objc_msgSend(v46, "setWcmWiFiBTCoexProfileDefault5G:", objc_msgSend(v91, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DD58, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DD58, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
             &off_10023DD58,
             @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
             &off_10023DD58,
             @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
             &off_10023DD58,
             @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
             &off_10023DD58,
             @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
             &off_10023DD58,
             @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
             &off_10023DD58,
             @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
             &off_10023DD58,
             @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
             &off_10023DD58,
             @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
             &off_10023DD58,
             @"UCM_HYBRID_ANT_CORE_CONFIG",
             v52,
             @"UCM_CHAIN_ATTR",
             0));
}

id sub_10011B5DC(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:-60];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-40];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-40];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-50];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-50];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:6790];
  [a1 setWcmWCI2MWSInactivityAssertJitter:192];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:500];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023E2B0];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  id v56 = a1;
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  uint64_t v95 = 0;
  uint64_t v96 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex035_V7WiFiEnh", @"plist") options:2 format:&v95 error:&v96];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  v54[1] = v54;
  __chkstk_darwin(v4, v5, v6);
  unsigned int v55 = (char *)v54 - v7 * (unint64_t)v8;
  uint64_t v9 = &v55[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v9 = 211;
  *(_OWORD *)(v9 + 4) = 0u;
  *(_OWORD *)(v9 + 20) = 0u;
  *(_OWORD *)(v9 + 36) = 0u;
  *(_OWORD *)(v9 + 52) = 0u;
  *(_OWORD *)(v9 + 68) = 0u;
  *(_OWORD *)(v9 + 84) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  unsigned __int16 v10 = (unsigned __int16)[v2 count];
  if (v10)
  {
    uint64_t v11 = 0;
    double v12 = v55 + 56;
    uint64_t v57 = v10;
    do
    {
      __int16 v93 = 0;
      char v94 = 0;
      v92[0] = 0;
      *(_DWORD *)((char *)v92 + 3) = 0;
      LODWORD(v91) = [[[v2 objectAtIndex:v11] objectForKey:@"issueBand"] intValue];
      LODWORD(v90) = [[[v2 objectAtIndex:v11] objectForKey:@"issueType"] intValue];
      unsigned int v89 = [[[v2 objectAtIndex:v11] objectForKey:@"isWiFiDesense"] boolValue];
      unsigned int v88 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v87 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v86 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v85 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v84 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v83 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v82 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v81 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap111"] intValue];
      unsigned int v80 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v79 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v78 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v77 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v76 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v75 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v74 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v73 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap111"] intValue];
      uint64_t v72 = [(int)[v2 objectAtIndex:v11] objectForKey:@"cellTxPowerLimit"] intValue];
      double v13 = (double)(int)[v2 objectAtIndex:v11][@"cellFrequencyLimitForOOB"][@"intValue"];
      double v14 = (double)(int)[v2 objectAtIndex:v11][@"cellBandwidthLimitForOOB"][@"intValue"];
      unsigned int v71 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToAvoidForCellOOB"] intValue];
      unsigned int v70 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToAvoidForCellOOB"] intValue];
      unsigned int v69 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v68 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v67 = [[[v2 objectAtIndex:v11] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned int v66 = [[[v2 objectAtIndex:v11] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned int v65 = [[[v2 objectAtIndex:v11] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned int v64 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority"] intValue];
      unsigned int v63 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority_WiFi"] intValue];
      unsigned int v62 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority_BT"] intValue];
      unsigned int v61 = [[[v2 objectAtIndex:v11] objectForKey:@"CellAntBlk"] intValue];
      unsigned int v60 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToDisableOCLCellOOB"] intValue];
      unsigned int v59 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToDisableOCLCellOOB"] intValue];
      BOOL v58 = [[[v2 objectAtIndex:v11] objectForKey:@"isWifiEnhBand"] intValue] != 0;
      unsigned __int8 v15 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToAvoidForCellOOBPHS"] intValue];
      unsigned __int8 v16 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToAvoidForCellOOBPHS"] intValue];
      unsigned __int8 v17 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii1Enabled"] BOOLValue];
      unsigned __int8 v18 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii3Enabled"] BOOLValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5aEnabled"] BOOLValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5bEnabled"] BOOLValue];
      unsigned __int8 v21 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5cEnabled"] BOOLValue];
      unsigned __int8 v22 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5dEnabled"] boolValue];
      int v23 = (int)v90;
      *((_DWORD *)v12 - 14) = v91;
      *((_DWORD *)v12 - 13) = v23;
      *(v12 - 48) = v89;
      *(v12 - 43) = v88;
      *(v12 - 42) = v87;
      *(v12 - 41) = v86;
      *(v12 - 40) = v85;
      *(v12 - 39) = v84;
      *(v12 - 38) = v83;
      *(v12 - 37) = v82;
      *(v12 - 36) = v81;
      *(_DWORD *)(v12 - 47) = 0;
      *(v12 - 35) = v80;
      *(v12 - 34) = v79;
      *(v12 - 33) = v78;
      *(v12 - 32) = v77;
      *(v12 - 31) = v76;
      *(v12 - 30) = v75;
      *(v12 - 29) = v74;
      *(v12 - 28) = v73;
      *(_WORD *)(v12 - 27) = v93;
      *(v12 - 25) = v94;
      *((void *)v12 - 3) = v72;
      *((double *)v12 - 2) = v13;
      *((double *)v12 - 1) = v14;
      *double v12 = v71;
      v12[1] = v70;
      v12[2] = v69;
      void v12[3] = v68;
      unsigned int v24 = v67;
      *((_DWORD *)v12 + 1) = 0;
      *((_DWORD *)v12 + 2) = v24;
      *(void *)(v12 + 12) = 0;
      *((_WORD *)v12 + 10) = 0;
      v12[22] = v66;
      v12[23] = v65;
      *((void *)v12 + 3) = 0;
      v12[32] = 0;
      v12[33] = v64;
      v12[34] = v63;
      v12[35] = v62;
      v12[36] = 0;
      v12[37] = v61;
      v12[38] = v60;
      v12[39] = v59;
      v12[40] = v58;
      v12[41] = v15;
      v12[42] = v16;
      v12[43] = v17;
      v12[44] = v18;
      v12[45] = v19;
      v12[46] = v20;
      v12[47] = v21;
      v12[48] = v22;
      int v25 = v92[0];
      ++v11;
      *((_DWORD *)v12 + 13) = *(_DWORD *)((char *)v92 + 3);
      uint64_t v26 = v57;
      *(_DWORD *)(v12 + 49) = v25;
      v12 += 112;
    }
    while (v26 != v11);
  }
  id v27 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v28 = v56;
  [v56 setWcmWiFiCellCoexIssueTable:v27];
  id v29 = [v28 wcmWiFiCellCoexIssueTable];
  [v29 configureBy:v55];
  [v28 setWcmCellRc1CoexIssueTable:0];
  [v28 setWcmCellularCoexB7DLRange:2620.0, 40.0];
  [v28 setWcmCellularCoexB7ULRange:2500.0, 40.0];
  [v28 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v28 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v28 setWcmCellularCoexB41A1Range:2496.0, 20.0];
  [v28 setWcmCellularCoexB41A2Range:2516.0, 29.0];
  [v28 setWcmCellularScanProtectionCellFrequencies:&off_100250B10];
  if (_os_feature_enabled_impl()) {
    id v30 = &off_100250B88;
  }
  else {
    id v30 = &off_100250C00;
  }
  [v28 setWcmCellularScanProtectionCellFrequenciesforBT:v30];
  [v28 setWcmCellularScanProtectionWiFiChannels:&off_100250C78];
  [v28 setWcmCellularScanProtectionWiFiChannelsWiFiEnh:&off_100250CF0];
  [v28 setWcmWiFiScanThrottlingChannelIndices:&off_100250D08];
  [v28 setWcmGen9rFemDefaultMode2gWiFiCellularbands:[NSDictionary dictionaryWithObjectsAndKeys:&off_100250D20, @"LTE", 0]];
  [v28 setWcmGen9rFemDefaultMode5gWiFiCellularbands:[NSDictionary dictionaryWithObjectsAndKeys:&off_100250D38, @"LTE", 0]];
  id v90 = NSArray;
  id v91 = NSDictionary;
  id v31 = +[NSDictionary dictionaryWithObjectsAndKeys:@"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v32 = +[NSDictionary dictionaryWithObjectsAndKeys:@"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v33 = [v90 arrayWithObjects:v31, v32];
  objc_msgSend(v28, "setWcmWiFiBTCoexProfileDefault:", objc_msgSend(v91, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      v33,
      @"UCM_CHAIN_ATTR",
      0));
  id v90 = NSArray;
  id v91 = NSDictionary;
  id v34 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v35 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v36 = [v90 arrayWithObjects:v34, v35, nil];
  id v37 = objc_msgSend(v91, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DED8, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DEF0, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DEF0,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DFB0,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DF80,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v36,
          @"UCM_CHAIN_ATTR",
          0);
  [v56 setWcmWiFiBTCoexProfileLight:v37];
  id v90 = NSArray;
  id v91 = NSDictionary;
  id v38 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v39 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v40 = [v90 arrayWithObjects:v38, v39];
  id v41 = objc_msgSend(v91, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEF0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF50, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DF80, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DF98,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DF50,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DF50,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v40,
          @"UCM_CHAIN_ATTR",
          0);
  [v56 setWcmWiFiBTCoexProfileHeavyHFP:v41];
  id v90 = NSArray;
  id v91 = NSDictionary;
  id v42 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v43 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v44 = [v90 arrayWithObjects:v42, v43];
  id v45 = objc_msgSend(v91, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DF50, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF68, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DFB0, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DF80,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DF50,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DF68,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DF50,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DF68,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v44,
          @"UCM_CHAIN_ATTR",
          0);
  id v46 = v56;
  [v56 setWcmWiFiBTCoexProfileHeavyA2DP:v45];
  id v90 = NSArray;
  id v91 = NSDictionary;
  id v47 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DD58, @"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  unsigned int v48 = +[NSDictionary dictionaryWithObjectsAndKeys:@"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v49 = [v90 arrayWithObjects:v47, v48];
  objc_msgSend(v46, "setWcmWiFiBTCoexProfileTDD:", objc_msgSend(v91, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      v49,
      @"UCM_CHAIN_ATTR",
      0));
  id v90 = NSArray;
  id v91 = NSDictionary;
  unsigned int v50 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DD58, @"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v51 = +[NSDictionary dictionaryWithObjectsAndKeys:@"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v52 = [v90 arrayWithObjects:v50, v51];
  return objc_msgSend(v46, "setWcmWiFiBTCoexProfileDefault5G:", objc_msgSend(v91, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DD58, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DD58, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
             &off_10023DD58,
             @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
             &off_10023DD58,
             @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
             &off_10023DD58,
             @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
             &off_10023DD58,
             @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
             &off_10023DD58,
             @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
             &off_10023DD58,
             @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
             &off_10023DD58,
             @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
             &off_10023DD58,
             @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
             &off_10023DD58,
             @"UCM_HYBRID_ANT_CORE_CONFIG",
             v52,
             @"UCM_CHAIN_ATTR",
             0));
}

id sub_10011CD94(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:-60];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-40];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-40];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-50];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-50];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:6790];
  [a1 setWcmWCI2MWSInactivityAssertJitter:192];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:500];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023E2B0];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  id v56 = a1;
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  uint64_t v95 = 0;
  uint64_t v96 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex036_V7WiFiEnh", @"plist") options:2 format:&v95 error:&v96];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  v54[1] = v54;
  __chkstk_darwin(v4, v5, v6);
  unsigned int v55 = (char *)v54 - v7 * (unint64_t)v8;
  uint64_t v9 = &v55[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v9 = 211;
  *(_OWORD *)(v9 + 4) = 0u;
  *(_OWORD *)(v9 + 20) = 0u;
  *(_OWORD *)(v9 + 36) = 0u;
  *(_OWORD *)(v9 + 52) = 0u;
  *(_OWORD *)(v9 + 68) = 0u;
  *(_OWORD *)(v9 + 84) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  unsigned __int16 v10 = (unsigned __int16)[v2 count];
  if (v10)
  {
    uint64_t v11 = 0;
    double v12 = v55 + 56;
    uint64_t v57 = v10;
    do
    {
      __int16 v93 = 0;
      char v94 = 0;
      v92[0] = 0;
      *(_DWORD *)((char *)v92 + 3) = 0;
      LODWORD(v91) = [[[v2 objectAtIndex:v11] objectForKey:@"issueBand"] intValue];
      LODWORD(v90) = [[[v2 objectAtIndex:v11] objectForKey:@"issueType"] intValue];
      unsigned int v89 = [[[v2 objectAtIndex:v11] objectForKey:@"isWiFiDesense"] BOOLValue];
      unsigned int v88 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v87 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v86 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v85 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v84 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v83 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v82 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v81 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap111"] intValue];
      unsigned int v80 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v79 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v78 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v77 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v76 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v75 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v74 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v73 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap111"] intValue];
      uint64_t v72 = [(int)[v2 objectAtIndex:v11] objectForKey:@"cellTxPowerLimit"] intValue];
      double v13 = (double)(int)[v2 objectAtIndex:v11][@"cellFrequencyLimitForOOB"][@"intValue"];
      double v14 = (double)[(int)[v2 objectAtIndex:v11] objectForKey:@"cellBandwidthLimitForOOB"];
      unsigned int v71 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToAvoidForCellOOB"] intValue];
      unsigned int v70 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToAvoidForCellOOB"] intValue];
      unsigned int v69 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v68 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v67 = [[[v2 objectAtIndex:v11] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned int v66 = [[[v2 objectAtIndex:v11] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned int v65 = [[[v2 objectAtIndex:v11] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned int v64 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority"] intValue];
      unsigned int v63 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority_WiFi"] intValue];
      unsigned int v62 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority_BT"] intValue];
      unsigned int v61 = [[[v2 objectAtIndex:v11] objectForKey:@"CellAntBlk"] intValue];
      unsigned int v60 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToDisableOCLCellOOB"] intValue];
      unsigned int v59 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToDisableOCLCellOOB"] intValue];
      BOOL v58 = [[[v2 objectAtIndex:v11] objectForKey:@"isWifiEnhBand"] intValue] != 0;
      unsigned __int8 v15 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToAvoidForCellOOBPHS"] intValue];
      unsigned __int8 v16 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToAvoidForCellOOBPHS"] intValue];
      unsigned __int8 v17 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii1Enabled"] boolValue];
      unsigned __int8 v18 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii3Enabled"] BOOLValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5aEnabled"] BOOLValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5bEnabled"] boolValue];
      unsigned __int8 v21 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5cEnabled"] BOOLValue];
      unsigned __int8 v22 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5dEnabled"] BOOLValue];
      int v23 = (int)v90;
      *((_DWORD *)v12 - 14) = v91;
      *((_DWORD *)v12 - 13) = v23;
      *(v12 - 48) = v89;
      *(v12 - 43) = v88;
      *(v12 - 42) = v87;
      *(v12 - 41) = v86;
      *(v12 - 40) = v85;
      *(v12 - 39) = v84;
      *(v12 - 38) = v83;
      *(v12 - 37) = v82;
      *(v12 - 36) = v81;
      *(_DWORD *)(v12 - 47) = 0;
      *(v12 - 35) = v80;
      *(v12 - 34) = v79;
      *(v12 - 33) = v78;
      *(v12 - 32) = v77;
      *(v12 - 31) = v76;
      *(v12 - 30) = v75;
      *(v12 - 29) = v74;
      *(v12 - 28) = v73;
      *(_WORD *)(v12 - 27) = v93;
      *(v12 - 25) = v94;
      *((void *)v12 - 3) = v72;
      *((double *)v12 - 2) = v13;
      *((double *)v12 - 1) = v14;
      *double v12 = v71;
      v12[1] = v70;
      v12[2] = v69;
      void v12[3] = v68;
      unsigned int v24 = v67;
      *((_DWORD *)v12 + 1) = 0;
      *((_DWORD *)v12 + 2) = v24;
      *(void *)(v12 + 12) = 0;
      *((_WORD *)v12 + 10) = 0;
      v12[22] = v66;
      v12[23] = v65;
      *((void *)v12 + 3) = 0;
      v12[32] = 0;
      v12[33] = v64;
      v12[34] = v63;
      v12[35] = v62;
      v12[36] = 0;
      v12[37] = v61;
      v12[38] = v60;
      v12[39] = v59;
      v12[40] = v58;
      v12[41] = v15;
      v12[42] = v16;
      v12[43] = v17;
      v12[44] = v18;
      v12[45] = v19;
      v12[46] = v20;
      v12[47] = v21;
      v12[48] = v22;
      int v25 = v92[0];
      ++v11;
      *((_DWORD *)v12 + 13) = *(_DWORD *)((char *)v92 + 3);
      uint64_t v26 = v57;
      *(_DWORD *)(v12 + 49) = v25;
      v12 += 112;
    }
    while (v26 != v11);
  }
  id v27 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v28 = v56;
  [v56 setWcmWiFiCellCoexIssueTable:v27];
  id v29 = [v28 wcmWiFiCellCoexIssueTable];
  [v29 configureBy:v55];
  [v28 setWcmCellRc1CoexIssueTable:0];
  [v28 setWcmCellularCoexB7DLRange:2620.0, 40.0];
  [v28 setWcmCellularCoexB7ULRange:2500.0, 40.0];
  [v28 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v28 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v28 setWcmCellularCoexB41A1Range:2496.0, 20.0];
  [v28 setWcmCellularCoexB41A2Range:2516.0, 29.0];
  [v28 setWcmCellularScanProtectionCellFrequencies:&off_100250DB0];
  if (_os_feature_enabled_impl()) {
    id v30 = &off_100250E28;
  }
  else {
    id v30 = &off_100250EA0;
  }
  [v28 setWcmCellularScanProtectionCellFrequenciesforBT:v30];
  [v28 setWcmCellularScanProtectionWiFiChannels:&off_100250F18];
  [v28 setWcmCellularScanProtectionWiFiChannelsWiFiEnh:&off_100250F90];
  [v28 setWcmWiFiScanThrottlingChannelIndices:&off_100250FA8];
  [v28 setWcmGen9rFemDefaultMode2gWiFiCellularbands:+[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100250FC0, @"LTE", 0)];
  [v28 setWcmGen9rFemDefaultMode5gWiFiCellularbands:[NSDictionary dictionaryWithObjectsAndKeys:&off_100250FD8, @"LTE", 0]];
  id v90 = NSArray;
  id v91 = NSDictionary;
  id v31 = +[NSDictionary dictionaryWithObjectsAndKeys:@"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v32 = +[NSDictionary dictionaryWithObjectsAndKeys:@"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v33 = [v90 arrayWithObjects:v31, v32, nil];
  objc_msgSend(v28, "setWcmWiFiBTCoexProfileDefault:", objc_msgSend(v91, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      v33,
      @"UCM_CHAIN_ATTR",
      0));
  id v90 = NSArray;
  id v91 = NSDictionary;
  id v34 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v35 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v36 = [v90 arrayWithObjects:v34, v35, nil];
  id v37 = objc_msgSend(v91, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DED8, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DEF0, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DEF0,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DFB0,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DF80,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DED8,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v36,
          @"UCM_CHAIN_ATTR",
          0);
  [v56 setWcmWiFiBTCoexProfileLight:v37];
  id v90 = NSArray;
  id v91 = NSDictionary;
  id v38 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v39 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v40 = [v90 arrayWithObjects:v38, v39];
  id v41 = objc_msgSend(v91, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DCC8, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEF0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF50, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DF80, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DF98,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DF50,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DF50,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v40,
          @"UCM_CHAIN_ATTR",
          0);
  [v56 setWcmWiFiBTCoexProfileHeavyHFP:v41];
  id v90 = NSArray;
  id v91 = NSDictionary;
  id v42 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF20, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v43 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DCC8, @"UCM_DESENSE_STRONG_RSSI", &off_10023DC68, @"UCM_DESENSE_WEAK_RSSI", &off_10023DF38, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DF38, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v44 = [v90 arrayWithObjects:v42, v43];
  id v45 = objc_msgSend(v91, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DF50, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DF68, @"UCM_MODE_WL_LO_HI_RSSI_THRESH", &off_10023DFB0, @"UCM_MODE_BT_HI_LO_RSSI_THRESH", &off_10023DF80,
          @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
          &off_10023DF50,
          @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
          &off_10023DF68,
          @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
          &off_10023DF50,
          @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DF68,
          @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
          &off_10023DEF0,
          @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
          &off_10023DD58,
          @"UCM_HYBRID_ANT_CORE_CONFIG",
          v44,
          @"UCM_CHAIN_ATTR",
          0);
  id v46 = v56;
  [v56 setWcmWiFiBTCoexProfileHeavyA2DP:v45];
  id v90 = NSArray;
  id v91 = NSDictionary;
  id v47 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DD58, @"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  unsigned int v48 = +[NSDictionary dictionaryWithObjectsAndKeys:@"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v49 = [v90 arrayWithObjects:v47, v48];
  objc_msgSend(v46, "setWcmWiFiBTCoexProfileTDD:", objc_msgSend(v91, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DEC0, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DED8, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
      &off_10023DEF0,
      @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
      &off_10023DF08,
      @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DEC0,
      @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
      &off_10023DED8,
      @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
      &off_10023DD58,
      @"UCM_HYBRID_ANT_CORE_CONFIG",
      v49,
      @"UCM_CHAIN_ATTR",
      0));
  id v90 = NSArray;
  id v91 = NSDictionary;
  unsigned int v50 = +[NSDictionary dictionaryWithObjectsAndKeys:&off_10023DD58, @"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v51 = +[NSDictionary dictionaryWithObjectsAndKeys:@"UCM_DESENSE_STRONG_RSSI", &off_10023DD58, @"UCM_DESENSE_WEAK_RSSI", &off_10023DD88, @"UCM_ACK_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_ACK_PWR_WEAK_RSSI", &off_10023DD88, @"UCM_TX_PWR_STRONG_RSSI", &off_10023DD88, @"UCM_TX_PWR_WEAK_RSSI", 0];
  id v52 = [v90 arrayWithObjects:v50, v51];
  return objc_msgSend(v46, "setWcmWiFiBTCoexProfileDefault5G:", objc_msgSend(v91, "dictionaryWithObjectsAndKeys:", &off_10023DC98, @"UCM_VERSION", &off_10023DC68, @"UCM_MODE_STRONG_WL_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL", &off_10023DC68, @"UCM_MODE_WEAK_BT", &off_10023DC68, @"UCM_MODE_WEAK_WL_BT", &off_10023DD58, @"UCM_MODE_WL_HI_LO_RSSI_THRESH", &off_10023DD58, @"UCM_MODE_WL_LO_HI_RSSI_THRESH",
             &off_10023DD58,
             @"UCM_MODE_BT_HI_LO_RSSI_THRESH",
             &off_10023DD58,
             @"UCM_MODE_BT_LO_HI_RSSI_THRESH",
             &off_10023DD58,
             @"UCM_DESENSE_WL_HI_LO_RSSI_THRESH",
             &off_10023DD58,
             @"UCM_DESENSE_WL_LO_HI_RSSI_THRESH",
             &off_10023DD58,
             @"UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH",
             &off_10023DD58,
             @"UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH",
             &off_10023DD58,
             @"UCM_TX_PWR_WL_HI_LO_RSSI_THRESH",
             &off_10023DD58,
             @"UCM_TX_PWR_WL_LO_HI_RSSI_THRESH",
             &off_10023DD58,
             @"UCM_HYBRID_ANT_CORE_CONFIG",
             v52,
             @"UCM_CHAIN_ATTR",
             0));
}

id sub_10011E54C(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:1750];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-150];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-150];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-250];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-250];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:0];
  [a1 setWcmWCI2MWSInactivityAssertJitter:4];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:0];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023E2B0];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  [a1 setWcmWiFiCellCoexIssueTable:objc_alloc_init(WCM_WiFiCellCoexIssueBandTable)];
  [objc_msgSend(a1, "wcmWiFiCellCoexIssueTable") configureBy:&unk_1001F2FA0];
  [a1 setWcmCellularCoexB7DLRange:2620.0, 40.0];
  [a1 setWcmCellularCoexB7ULRange:2500.0, 40.0];
  [a1 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [a1 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [a1 setWcmCellularCoexB41A1Range:2496.0, 20.0];
  [a1 setWcmCellularCoexB41A2Range:2516.0, 29.0];
  [a1 setWcmCellularScanProtectionCellFrequencies:&off_100251050];

  return [a1 setWcmCellularScanProtectionWiFiChannels:&off_1002510C8];
}

id sub_10011E7FC(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:1750];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-150];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-150];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-250];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-250];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:0];
  [a1 setWcmWCI2MWSInactivityAssertJitter:4];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:0];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023E2B0];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  [a1 setWcmWiFiCellCoexIssueTable:objc_alloc_init(WCM_WiFiCellCoexIssueBandTable)];
  [objc_msgSend(a1, "wcmWiFiCellCoexIssueTable") configureBy:&unk_1001F42E0];
  [a1 setWcmCellularCoexB7DLRange:2620.0, 40.0];
  [a1 setWcmCellularCoexB7ULRange:2500.0, 40.0];
  [a1 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [a1 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [a1 setWcmCellularCoexB41A1Range:2496.0, 20.0];
  [a1 setWcmCellularCoexB41A2Range:2516.0, 29.0];
  [a1 setWcmCellularScanProtectionCellFrequencies:&off_100251140];

  return [a1 setWcmCellularScanProtectionWiFiChannels:&off_1002511B8];
}

id sub_10011EAAC(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:1750];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-150];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-150];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-250];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-250];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:0];
  [a1 setWcmWCI2MWSInactivityAssertJitter:4];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:0];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023E2B0];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  [a1 setWcmWiFiCellCoexIssueTable:objc_alloc_init(WCM_WiFiCellCoexIssueBandTable)];
  [objc_msgSend(a1, "wcmWiFiCellCoexIssueTable") configureBy:&unk_1001F5620];
  [a1 setWcmCellularCoexB7DLRange:2620.0, 40.0];
  [a1 setWcmCellularCoexB7ULRange:2500.0, 40.0];
  [a1 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [a1 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [a1 setWcmCellularCoexB41A1Range:2496.0, 20.0];
  [a1 setWcmCellularCoexB41A2Range:2516.0, 174.0];
  [a1 setWcmCellularScanProtectionCellFrequencies:&off_100251230];

  return [a1 setWcmCellularScanProtectionWiFiChannels:&off_1002512A8];
}

id sub_10011ED60(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:1750];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-150];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-150];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-250];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-250];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:0];
  [a1 setWcmWCI2MWSInactivityAssertJitter:4];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:0];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023E2B0];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  [a1 setWcmWiFiCellCoexIssueTable:objc_alloc_init(WCM_WiFiCellCoexIssueBandTable)];
  [objc_msgSend(a1, "wcmWiFiCellCoexIssueTable") configureBy:&unk_1001F6880];
  [a1 setWcmCellularCoexB7DLRange:2620.0, 40.0];
  [a1 setWcmCellularCoexB7ULRange:2500.0, 40.0];
  [a1 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [a1 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [a1 setWcmCellularCoexB41A1Range:2496.0, 20.0];
  [a1 setWcmCellularCoexB41A2Range:2516.0, 174.0];
  [a1 setWcmCellularScanProtectionCellFrequencies:&off_100251320];

  return [a1 setWcmCellularScanProtectionWiFiChannels:&off_100251398];
}

id sub_10011F014(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:1750];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-150];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-150];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-250];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-250];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:0];
  [a1 setWcmWCI2MWSInactivityAssertJitter:4];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:0];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023E2B0];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  [a1 setWcmWiFiCellCoexIssueTable:objc_alloc_init(WCM_WiFiCellCoexIssueBandTable)];
  [objc_msgSend(a1, "wcmWiFiCellCoexIssueTable") configureBy:&unk_1001F7AE0];
  [a1 setWcmCellularCoexB7DLRange:2620.0, 40.0];
  [a1 setWcmCellularCoexB7ULRange:2500.0, 40.0];
  [a1 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [a1 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [a1 setWcmCellularCoexB41A1Range:2496.0, 20.0];
  [a1 setWcmCellularCoexB41A2Range:2516.0, 174.0];
  [a1 setWcmCellularScanProtectionCellFrequencies:&off_100251410];

  return [a1 setWcmCellularScanProtectionWiFiChannels:&off_100251488];
}

id sub_10011F2C8(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:1750];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-150];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-150];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-250];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-250];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:0];
  [a1 setWcmWCI2MWSInactivityAssertJitter:4];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:0];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023E2B0];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  [a1 setWcmWiFiCellCoexIssueTable:objc_alloc_init(WCM_WiFiCellCoexIssueBandTable)];
  [objc_msgSend(a1, "wcmWiFiCellCoexIssueTable") configureBy:&unk_1001F8E20];
  [a1 setWcmCellularCoexB7DLRange:2620.0, 40.0];
  [a1 setWcmCellularCoexB7ULRange:2500.0, 40.0];
  [a1 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [a1 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [a1 setWcmCellularCoexB41A1Range:2496.0, 20.0];
  [a1 setWcmCellularCoexB41A2Range:2516.0, 174.0];
  [a1 setWcmCellularScanProtectionCellFrequencies:&off_100251500];

  return [a1 setWcmCellularScanProtectionWiFiChannels:&off_100251578];
}

id sub_10011F57C(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:-60];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-40];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-40];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-50];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-50];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:6790];
  [a1 setWcmWCI2MWSInactivityAssertJitter:192];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:500];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023E850];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  [a1 setWcmWiFiCellCoexIssueTable:objc_alloc_init(WCM_WiFiCellCoexIssueBandTable)];
  [objc_msgSend(a1, "wcmWiFiCellCoexIssueTable") configureBy:&unk_1001FA160];
  [a1 setWcmCellularCoexB7DLRange:2620.0, 40.0];
  [a1 setWcmCellularCoexB7ULRange:2500.0, 40.0];
  [a1 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [a1 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [a1 setWcmCellularCoexB41A1Range:2496.0, 20.0];
  [a1 setWcmCellularCoexB41A2Range:2516.0, 174.0];
  [a1 setWcmCellularScanProtectionCellFrequencies:&off_100251608];

  return [a1 setWcmCellularScanProtectionWiFiChannels:&off_100251698];
}

id sub_10011F830(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:-60];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-40];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-40];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-50];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-50];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:6790];
  [a1 setWcmWCI2MWSInactivityAssertJitter:192];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:500];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023E850];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  [a1 setWcmWiFiCellCoexIssueTable:objc_alloc_init(WCM_WiFiCellCoexIssueBandTable)];
  [objc_msgSend(a1, "wcmWiFiCellCoexIssueTable") configureBy:&unk_1001FB4A0];
  [a1 setWcmCellularCoexB7DLRange:2620.0, 40.0];
  [a1 setWcmCellularCoexB7ULRange:2500.0, 40.0];
  [a1 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [a1 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [a1 setWcmCellularCoexB41A1Range:2496.0, 20.0];
  [a1 setWcmCellularCoexB41A2Range:2516.0, 174.0];
  [a1 setWcmCellularScanProtectionCellFrequencies:&off_100251728];

  return [a1 setWcmCellularScanProtectionWiFiChannels:&off_1002517B8];
}

id sub_10011FAE4(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:-60];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-40];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-40];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-50];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-50];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:6790];
  [a1 setWcmWCI2MWSInactivityAssertJitter:192];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:500];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023E850];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  [a1 setWcmWiFiCellCoexIssueTable:objc_alloc_init(WCM_WiFiCellCoexIssueBandTable)];
  [objc_msgSend(a1, "wcmWiFiCellCoexIssueTable") configureBy:&unk_1001FC7E0];
  [a1 setWcmCellularCoexB7DLRange:2620.0, 40.0];
  [a1 setWcmCellularCoexB7ULRange:2500.0, 40.0];
  [a1 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [a1 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [a1 setWcmCellularCoexB41A1Range:2496.0, 20.0];
  [a1 setWcmCellularCoexB41A2Range:2516.0, 174.0];
  [a1 setWcmCellularScanProtectionCellFrequencies:&off_100251848];

  return [a1 setWcmCellularScanProtectionWiFiChannels:&off_1002518D8];
}

id sub_10011FD98(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:-60];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-40];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-40];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-50];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-50];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:6790];
  [a1 setWcmWCI2MWSInactivityAssertJitter:192];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:500];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023E850];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  [a1 setWcmWiFiCellCoexIssueTable:objc_alloc_init(WCM_WiFiCellCoexIssueBandTable)];
  [objc_msgSend(a1, "wcmWiFiCellCoexIssueTable") configureBy:&unk_1001FDB20];
  [a1 setWcmCellularCoexB7DLRange:2620.0, 40.0];
  [a1 setWcmCellularCoexB7ULRange:2500.0, 40.0];
  [a1 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [a1 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [a1 setWcmCellularCoexB41A1Range:2496.0, 20.0];
  [a1 setWcmCellularCoexB41A2Range:2516.0, 174.0];
  [a1 setWcmCellularScanProtectionCellFrequencies:&off_100251968];

  return [a1 setWcmCellularScanProtectionWiFiChannels:&off_1002519F8];
}

id sub_10012004C(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:-60];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-40];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-40];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-50];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-50];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:6790];
  [a1 setWcmWCI2MWSInactivityAssertJitter:192];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:500];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023DFC8];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex008_v1.1_NewEnum_v4Macro", @"plist") options:2 format:&v58 error:&v59];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  id v29 = a1;
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  uint64_t v28 = (uint64_t)&v28;
  __chkstk_darwin(v4, v5, v6);
  id v30 = (char *)&v28 - v7 * (unint64_t)v8;
  uint64_t v9 = &v30[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v9 = 211;
  *(_OWORD *)(v9 + 4) = 0u;
  *(_OWORD *)(v9 + 20) = 0u;
  *(_OWORD *)(v9 + 36) = 0u;
  *(_OWORD *)(v9 + 52) = 0u;
  *(_OWORD *)(v9 + 68) = 0u;
  *(_OWORD *)(v9 + 84) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  if (v3)
  {
    uint64_t v10 = 0;
    uint64_t v11 = v30 + 56;
    uint64_t v31 = v3;
    do
    {
      __int16 v56 = 0;
      char v57 = 0;
      v55[0] = 0;
      *(_DWORD *)((char *)v55 + 3) = 0;
      unsigned int v54 = [[[v2 objectAtIndex:v10] objectForKey:@"issueBand"] intValue];
      unsigned int v53 = [[[v2 objectAtIndex:v10] objectForKey:@"issueType"] intValue];
      unsigned int v52 = [[[v2 objectAtIndex:v10] objectForKey:@"isWiFiDesense"] BOOLValue];
      unsigned int v51 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v50 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v49 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v48 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v47 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v46 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v45 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v44 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap111"] intValue];
      unsigned int v43 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v42 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v41 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v40 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v39 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v38 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v37 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v36 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap111"] intValue];
      uint64_t v35 = (int)[v2 objectAtIndex:v10][@"cellTxPowerLimit"][@"intValue"];
      double v12 = (double)(int)[v2 objectAtIndex:v10][@"cellFrequencyLimitForOOB"][@"intValue"];
      double v13 = (double)(int)[v2 objectAtIndex:v10][@"cellBandwidthLimitForOOB"][@"intValue"];
      unsigned int v34 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiFirstChannelToAvoidForCellOOB"] intValue];
      unsigned int v33 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiLastChannelToAvoidForCellOOB"] intValue];
      unsigned int v32 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiFirstChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned __int8 v14 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiLastChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v15 = [[[v2 objectAtIndex:v10] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned __int8 v16 = [[[v2 objectAtIndex:v10] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned __int8 v17 = [[[v2 objectAtIndex:v10] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned __int8 v18 = [[[v2 objectAtIndex:v10] objectForKey:@"ulcaPriority"] intValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v10] objectForKey:@"ulcaPriority_WiFi"] intValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v10] objectForKey:@"ulcaPriority_BT"] intValue];
      unsigned __int8 v21 = [[[v2 objectAtIndex:v10] objectForKey:@"CellAntBlk"] intValue];
      uint64_t v22 = v31;
      unsigned int v23 = v53;
      *((_DWORD *)v11 - 14) = v54;
      *((_DWORD *)v11 - 13) = v23;
      *(v11 - 48) = v52;
      *(v11 - 43) = v51;
      *(v11 - 42) = v50;
      *(v11 - 41) = v49;
      *(v11 - 40) = v48;
      *(v11 - 39) = v47;
      *(v11 - 38) = v46;
      *(v11 - 37) = v45;
      *(v11 - 36) = v44;
      *(v11 - 35) = v43;
      *(v11 - 34) = v42;
      *(v11 - 33) = v41;
      *(v11 - 32) = v40;
      *(v11 - 31) = v39;
      *(v11 - 30) = v38;
      *(v11 - 29) = v37;
      *(v11 - 28) = v36;
      *(_WORD *)(v11 - 27) = v56;
      *(v11 - 25) = v57;
      *((void *)v11 - 3) = v35;
      *uint64_t v11 = v34;
      v11[1] = v33;
      v11[2] = v32;
      v11[3] = v14;
      *((_DWORD *)v11 + 1) = 0;
      *((_DWORD *)v11 + 2) = v15;
      v11[22] = v16;
      v11[23] = v17;
      v11[33] = v18;
      v11[34] = v19;
      v11[35] = v20;
      v11[37] = v21;
      *((_DWORD *)v11 + 13) = *(_DWORD *)((char *)v55 + 3);
      *(_DWORD *)(v11 + 49) = v55[0];
      *(_DWORD *)(v11 - 47) = 0;
      *((double *)v11 - 2) = v12;
      *((double *)v11 - 1) = v13;
      *(void *)(v11 + 12) = 0;
      *((_WORD *)v11 + 10) = 0;
      *((void *)v11 + 3) = 0;
      v11[32] = 0;
      v11[36] = 0;
      ++v10;
      *(void *)(v11 + 38) = 0;
      *(_DWORD *)(v11 + 45) = 0;
      v11 += 112;
    }
    while (v22 != v10);
  }
  unsigned int v24 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v25 = v29;
  [v29 setWcmWiFiCellCoexIssueTable:v24];
  id v26 = [v25 wcmWiFiCellCoexIssueTable];
  [v26 configureBy:v30];
  [v25 setWcmCellularCoexB7DLRange:2620.0, 40.0];
  [v25 setWcmCellularCoexB7ULRange:2500.0, 40.0];
  [v25 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v25 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v25 setWcmCellularCoexB41A1Range:2496.0, 20.0];
  [v25 setWcmCellularCoexB41A2Range:2516.0, 29.0];
  [v25 setWcmCellularScanProtectionCellFrequencies:&off_100251AA0];
  [v25 setWcmCellularScanProtectionCellFrequenciesforBT:&off_100251B48];
  return [v25 setWcmCellularScanProtectionWiFiChannels:&off_100251BF0];
}

id sub_1001209D0(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:-60];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-40];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-40];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-50];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-50];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:6790];
  [a1 setWcmWCI2MWSInactivityAssertJitter:192];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:500];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023DFC8];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex009_v1.2_NewEnum_v4Macro", @"plist") options:2 format:&v58 error:&v59];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  id v29 = a1;
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  uint64_t v28 = (uint64_t)&v28;
  __chkstk_darwin(v4, v5, v6);
  id v30 = (char *)&v28 - v7 * (unint64_t)v8;
  uint64_t v9 = &v30[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v9 = 211;
  *(_OWORD *)(v9 + 4) = 0u;
  *(_OWORD *)(v9 + 20) = 0u;
  *(_OWORD *)(v9 + 36) = 0u;
  *(_OWORD *)(v9 + 52) = 0u;
  *(_OWORD *)(v9 + 68) = 0u;
  *(_OWORD *)(v9 + 84) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  if (v3)
  {
    uint64_t v10 = 0;
    uint64_t v11 = v30 + 56;
    uint64_t v31 = v3;
    do
    {
      __int16 v56 = 0;
      char v57 = 0;
      v55[0] = 0;
      *(_DWORD *)((char *)v55 + 3) = 0;
      unsigned int v54 = [[[v2 objectAtIndex:v10] objectForKey:@"issueBand"] intValue];
      unsigned int v53 = [[[v2 objectAtIndex:v10] objectForKey:@"issueType"] intValue];
      unsigned int v52 = [[[v2 objectAtIndex:v10] objectForKey:@"isWiFiDesense"] boolValue];
      unsigned int v51 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v50 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v49 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v48 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v47 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v46 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v45 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v44 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap111"] intValue];
      unsigned int v43 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v42 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v41 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v40 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v39 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v38 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v37 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v36 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap111"] intValue];
      uint64_t v35 = [[[v2 objectAtIndex:v10] objectForKey:@"cellTxPowerLimit"] intValue];
      double v12 = (double)(int)[v2 objectAtIndex:v10][@"cellFrequencyLimitForOOB"][@"intValue"];
      double v13 = (double)[(int)[v2 objectAtIndex:v10] objectForKey:@"cellBandwidthLimitForOOB"];
      unsigned int v34 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiFirstChannelToAvoidForCellOOB"] intValue];
      unsigned int v33 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiLastChannelToAvoidForCellOOB"] intValue];
      unsigned int v32 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiFirstChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned __int8 v14 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiLastChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v15 = [[[v2 objectAtIndex:v10] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned __int8 v16 = [[[v2 objectAtIndex:v10] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned __int8 v17 = [[[v2 objectAtIndex:v10] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned __int8 v18 = [[[v2 objectAtIndex:v10] objectForKey:@"ulcaPriority"] intValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v10] objectForKey:@"ulcaPriority_WiFi"] intValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v10] objectForKey:@"ulcaPriority_BT"] intValue];
      unsigned __int8 v21 = [[[v2 objectAtIndex:v10] objectForKey:@"CellAntBlk"] intValue];
      uint64_t v22 = v31;
      unsigned int v23 = v53;
      *((_DWORD *)v11 - 14) = v54;
      *((_DWORD *)v11 - 13) = v23;
      *(v11 - 48) = v52;
      *(v11 - 43) = v51;
      *(v11 - 42) = v50;
      *(v11 - 41) = v49;
      *(v11 - 40) = v48;
      *(v11 - 39) = v47;
      *(v11 - 38) = v46;
      *(v11 - 37) = v45;
      *(v11 - 36) = v44;
      *(v11 - 35) = v43;
      *(v11 - 34) = v42;
      *(v11 - 33) = v41;
      *(v11 - 32) = v40;
      *(v11 - 31) = v39;
      *(v11 - 30) = v38;
      *(v11 - 29) = v37;
      *(v11 - 28) = v36;
      *(_WORD *)(v11 - 27) = v56;
      *(v11 - 25) = v57;
      *((void *)v11 - 3) = v35;
      *uint64_t v11 = v34;
      v11[1] = v33;
      v11[2] = v32;
      v11[3] = v14;
      *((_DWORD *)v11 + 1) = 0;
      *((_DWORD *)v11 + 2) = v15;
      v11[22] = v16;
      v11[23] = v17;
      v11[33] = v18;
      v11[34] = v19;
      v11[35] = v20;
      v11[37] = v21;
      *((_DWORD *)v11 + 13) = *(_DWORD *)((char *)v55 + 3);
      *(_DWORD *)(v11 + 49) = v55[0];
      *(_DWORD *)(v11 - 47) = 0;
      *((double *)v11 - 2) = v12;
      *((double *)v11 - 1) = v13;
      *(void *)(v11 + 12) = 0;
      *((_WORD *)v11 + 10) = 0;
      *((void *)v11 + 3) = 0;
      v11[32] = 0;
      v11[36] = 0;
      ++v10;
      *(void *)(v11 + 38) = 0;
      *(_DWORD *)(v11 + 45) = 0;
      v11 += 112;
    }
    while (v22 != v10);
  }
  unsigned int v24 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v25 = v29;
  [v29 setWcmWiFiCellCoexIssueTable:v24];
  id v26 = [v25 wcmWiFiCellCoexIssueTable];
  [v26 configureBy:v30];
  [v25 setWcmCellularCoexB7DLRange:2620.0, 40.0];
  [v25 setWcmCellularCoexB7ULRange:2500.0, 40.0];
  [v25 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v25 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v25 setWcmCellularCoexB41A1Range:2496.0, 20.0];
  [v25 setWcmCellularCoexB41A2Range:2516.0, 29.0];
  [v25 setWcmCellularScanProtectionCellFrequencies:&off_100251C98];
  [v25 setWcmCellularScanProtectionCellFrequenciesforBT:&off_100251D40];
  return [v25 setWcmCellularScanProtectionWiFiChannels:&off_100251DE8];
}

id sub_100121354(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:-60];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-40];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-40];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-50];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-50];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:6790];
  [a1 setWcmWCI2MWSInactivityAssertJitter:192];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:500];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023DFC8];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex006_v1.1_NewEnum_v4Macro", @"plist") options:2 format:&v58 error:&v59];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  id v29 = a1;
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  uint64_t v28 = (uint64_t)&v28;
  __chkstk_darwin(v4, v5, v6);
  id v30 = (char *)&v28 - v7 * (unint64_t)v8;
  uint64_t v9 = &v30[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v9 = 211;
  *(_OWORD *)(v9 + 4) = 0u;
  *(_OWORD *)(v9 + 20) = 0u;
  *(_OWORD *)(v9 + 36) = 0u;
  *(_OWORD *)(v9 + 52) = 0u;
  *(_OWORD *)(v9 + 68) = 0u;
  *(_OWORD *)(v9 + 84) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  if (v3)
  {
    uint64_t v10 = 0;
    uint64_t v11 = v30 + 56;
    uint64_t v31 = v3;
    do
    {
      __int16 v56 = 0;
      char v57 = 0;
      v55[0] = 0;
      *(_DWORD *)((char *)v55 + 3) = 0;
      unsigned int v54 = [[[v2 objectAtIndex:v10] objectForKey:@"issueBand"] intValue];
      unsigned int v53 = [[[v2 objectAtIndex:v10] objectForKey:@"issueType"] intValue];
      unsigned int v52 = [[[v2 objectAtIndex:v10] objectForKey:@"isWiFiDesense"] BOOLValue];
      unsigned int v51 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v50 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v49 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v48 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v47 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v46 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v45 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v44 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap111"] intValue];
      unsigned int v43 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v42 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v41 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v40 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v39 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v38 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v37 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v36 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap111"] intValue];
      uint64_t v35 = [(int)[v2 objectAtIndex:v10] objectForKey:@"cellTxPowerLimit"] intValue];
      double v12 = (double)(int)[v2 objectAtIndex:v10][@"cellFrequencyLimitForOOB"][@"intValue"];
      double v13 = (double)(int)[v2 objectAtIndex:v10][@"cellBandwidthLimitForOOB"][@"intValue"];
      unsigned int v34 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiFirstChannelToAvoidForCellOOB"] intValue];
      unsigned int v33 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiLastChannelToAvoidForCellOOB"] intValue];
      unsigned int v32 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiFirstChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned __int8 v14 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiLastChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v15 = [[[v2 objectAtIndex:v10] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned __int8 v16 = [[[v2 objectAtIndex:v10] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned __int8 v17 = [[[v2 objectAtIndex:v10] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned __int8 v18 = [[[v2 objectAtIndex:v10] objectForKey:@"ulcaPriority"] intValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v10] objectForKey:@"ulcaPriority_WiFi"] intValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v10] objectForKey:@"ulcaPriority_BT"] intValue];
      unsigned __int8 v21 = [[[v2 objectAtIndex:v10] objectForKey:@"CellAntBlk"] intValue];
      uint64_t v22 = v31;
      unsigned int v23 = v53;
      *((_DWORD *)v11 - 14) = v54;
      *((_DWORD *)v11 - 13) = v23;
      *(v11 - 48) = v52;
      *(v11 - 43) = v51;
      *(v11 - 42) = v50;
      *(v11 - 41) = v49;
      *(v11 - 40) = v48;
      *(v11 - 39) = v47;
      *(v11 - 38) = v46;
      *(v11 - 37) = v45;
      *(v11 - 36) = v44;
      *(v11 - 35) = v43;
      *(v11 - 34) = v42;
      *(v11 - 33) = v41;
      *(v11 - 32) = v40;
      *(v11 - 31) = v39;
      *(v11 - 30) = v38;
      *(v11 - 29) = v37;
      *(v11 - 28) = v36;
      *(_WORD *)(v11 - 27) = v56;
      *(v11 - 25) = v57;
      *((void *)v11 - 3) = v35;
      *uint64_t v11 = v34;
      v11[1] = v33;
      v11[2] = v32;
      v11[3] = v14;
      *((_DWORD *)v11 + 1) = 0;
      *((_DWORD *)v11 + 2) = v15;
      v11[22] = v16;
      v11[23] = v17;
      v11[33] = v18;
      v11[34] = v19;
      v11[35] = v20;
      v11[37] = v21;
      *((_DWORD *)v11 + 13) = *(_DWORD *)((char *)v55 + 3);
      *(_DWORD *)(v11 + 49) = v55[0];
      *(_DWORD *)(v11 - 47) = 0;
      *((double *)v11 - 2) = v12;
      *((double *)v11 - 1) = v13;
      *(void *)(v11 + 12) = 0;
      *((_WORD *)v11 + 10) = 0;
      *((void *)v11 + 3) = 0;
      v11[32] = 0;
      v11[36] = 0;
      ++v10;
      *(void *)(v11 + 38) = 0;
      *(_DWORD *)(v11 + 45) = 0;
      v11 += 112;
    }
    while (v22 != v10);
  }
  unsigned int v24 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v25 = v29;
  [v29 setWcmWiFiCellCoexIssueTable:v24];
  id v26 = [v25 wcmWiFiCellCoexIssueTable];
  [v26 configureBy:v30];
  [v25 setWcmCellularCoexB7DLRange:2620.0, 40.0];
  [v25 setWcmCellularCoexB7ULRange:2500.0, 40.0];
  [v25 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v25 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v25 setWcmCellularCoexB41A1Range:2496.0, 20.0];
  [v25 setWcmCellularCoexB41A2Range:2516.0, 29.0];
  [v25 setWcmCellularScanProtectionCellFrequencies:&off_100251E90];
  [v25 setWcmCellularScanProtectionCellFrequenciesforBT:&off_100251F38];
  return [v25 setWcmCellularScanProtectionWiFiChannels:&off_100251FE0];
}

id sub_100121CD8(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:-60];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-40];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-40];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-50];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-50];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:6790];
  [a1 setWcmWCI2MWSInactivityAssertJitter:192];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:500];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023DFC8];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex007_v1.1_NewEnum_v4Macro", @"plist") options:2 format:&v58 error:&v59];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  id v29 = a1;
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  uint64_t v28 = (uint64_t)&v28;
  __chkstk_darwin(v4, v5, v6);
  id v30 = (char *)&v28 - v7 * (unint64_t)v8;
  uint64_t v9 = &v30[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v9 = 211;
  *(_OWORD *)(v9 + 4) = 0u;
  *(_OWORD *)(v9 + 20) = 0u;
  *(_OWORD *)(v9 + 36) = 0u;
  *(_OWORD *)(v9 + 52) = 0u;
  *(_OWORD *)(v9 + 68) = 0u;
  *(_OWORD *)(v9 + 84) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  if (v3)
  {
    uint64_t v10 = 0;
    uint64_t v11 = v30 + 56;
    uint64_t v31 = v3;
    do
    {
      __int16 v56 = 0;
      char v57 = 0;
      v55[0] = 0;
      *(_DWORD *)((char *)v55 + 3) = 0;
      unsigned int v54 = [[[v2 objectAtIndex:v10] objectForKey:@"issueBand"] intValue];
      unsigned int v53 = [[[v2 objectAtIndex:v10] objectForKey:@"issueType"] intValue];
      unsigned int v52 = [[[v2 objectAtIndex:v10] objectForKey:@"isWiFiDesense"] BOOLValue];
      unsigned int v51 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v50 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v49 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v48 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v47 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v46 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v45 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v44 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap111"] intValue];
      unsigned int v43 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v42 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v41 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v40 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v39 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v38 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v37 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v36 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap111"] intValue];
      uint64_t v35 = [(int)[v2 objectAtIndex:v10] objectForKey:@"cellTxPowerLimit"] intValue];
      double v12 = (double)(int)[v2 objectAtIndex:v10][@"cellFrequencyLimitForOOB"][@"intValue"];
      double v13 = (double)(int)[v2 objectAtIndex:v10][@"cellBandwidthLimitForOOB"][@"intValue"];
      unsigned int v34 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiFirstChannelToAvoidForCellOOB"] intValue];
      unsigned int v33 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiLastChannelToAvoidForCellOOB"] intValue];
      unsigned int v32 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiFirstChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned __int8 v14 = [[[v2 objectAtIndex:v10] objectForKey:@"wifiLastChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v15 = [[[v2 objectAtIndex:v10] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned __int8 v16 = [[[v2 objectAtIndex:v10] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned __int8 v17 = [[[v2 objectAtIndex:v10] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned __int8 v18 = [[[v2 objectAtIndex:v10] objectForKey:@"ulcaPriority"] intValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v10] objectForKey:@"ulcaPriority_WiFi"] intValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v10] objectForKey:@"ulcaPriority_BT"] intValue];
      unsigned __int8 v21 = [[[v2 objectAtIndex:v10] objectForKey:@"CellAntBlk"] intValue];
      uint64_t v22 = v31;
      unsigned int v23 = v53;
      *((_DWORD *)v11 - 14) = v54;
      *((_DWORD *)v11 - 13) = v23;
      *(v11 - 48) = v52;
      *(v11 - 43) = v51;
      *(v11 - 42) = v50;
      *(v11 - 41) = v49;
      *(v11 - 40) = v48;
      *(v11 - 39) = v47;
      *(v11 - 38) = v46;
      *(v11 - 37) = v45;
      *(v11 - 36) = v44;
      *(v11 - 35) = v43;
      *(v11 - 34) = v42;
      *(v11 - 33) = v41;
      *(v11 - 32) = v40;
      *(v11 - 31) = v39;
      *(v11 - 30) = v38;
      *(v11 - 29) = v37;
      *(v11 - 28) = v36;
      *(_WORD *)(v11 - 27) = v56;
      *(v11 - 25) = v57;
      *((void *)v11 - 3) = v35;
      *uint64_t v11 = v34;
      v11[1] = v33;
      v11[2] = v32;
      v11[3] = v14;
      *((_DWORD *)v11 + 1) = 0;
      *((_DWORD *)v11 + 2) = v15;
      v11[22] = v16;
      v11[23] = v17;
      v11[33] = v18;
      v11[34] = v19;
      v11[35] = v20;
      v11[37] = v21;
      *((_DWORD *)v11 + 13) = *(_DWORD *)((char *)v55 + 3);
      *(_DWORD *)(v11 + 49) = v55[0];
      *(_DWORD *)(v11 - 47) = 0;
      *((double *)v11 - 2) = v12;
      *((double *)v11 - 1) = v13;
      *(void *)(v11 + 12) = 0;
      *((_WORD *)v11 + 10) = 0;
      *((void *)v11 + 3) = 0;
      v11[32] = 0;
      v11[36] = 0;
      ++v10;
      *(void *)(v11 + 38) = 0;
      *(_DWORD *)(v11 + 45) = 0;
      v11 += 112;
    }
    while (v22 != v10);
  }
  unsigned int v24 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v25 = v29;
  [v29 setWcmWiFiCellCoexIssueTable:v24];
  id v26 = [v25 wcmWiFiCellCoexIssueTable];
  [v26 configureBy:v30];
  [v25 setWcmCellularCoexB7DLRange:2620.0, 40.0];
  [v25 setWcmCellularCoexB7ULRange:2500.0, 40.0];
  [v25 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v25 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v25 setWcmCellularCoexB41A1Range:2496.0, 20.0];
  [v25 setWcmCellularCoexB41A2Range:2516.0, 29.0];
  [v25 setWcmCellularScanProtectionCellFrequencies:&off_100252088];
  [v25 setWcmCellularScanProtectionCellFrequenciesforBT:&off_100252130];
  return [v25 setWcmCellularScanProtectionWiFiChannels:&off_1002521D8];
}

id sub_10012265C(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:-60];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-40];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-40];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-50];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-50];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:6790];
  [a1 setWcmWCI2MWSInactivityAssertJitter:192];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:500];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023DFC8];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex012_WiFiEnh_v1", @"plist") options:2 format:&v64 error:&v65];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  id v32 = a1;
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  v31[1] = v31;
  __chkstk_darwin(v4, v5, v6);
  unsigned int v34 = (char *)v31 - v7 * (unint64_t)v8;
  uint64_t v9 = &v34[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v9 = 211;
  *(_OWORD *)(v9 + 4) = 0u;
  *(_OWORD *)(v9 + 20) = 0u;
  *(_OWORD *)(v9 + 36) = 0u;
  *(_OWORD *)(v9 + 52) = 0u;
  *(_OWORD *)(v9 + 68) = 0u;
  *(_OWORD *)(v9 + 84) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  unsigned __int16 v10 = (unsigned __int16)[v2 count];
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v33 = 112 * v10;
    do
    {
      __int16 v62 = 0;
      char v63 = 0;
      v61[0] = 0;
      *(_DWORD *)((char *)v61 + 3) = 0;
      unsigned int v60 = [[[v2 objectAtIndex:v12] objectForKey:@"issueBand"] intValue];
      unsigned int v59 = [[[v2 objectAtIndex:v12] objectForKey:@"issueType"] intValue];
      unsigned int v58 = [[[v2 objectAtIndex:v12] objectForKey:@"isWiFiDesense"] BOOLValue];
      unsigned int v57 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v56 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v55 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v54 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v53 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v52 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v51 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v50 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap111"] intValue];
      unsigned int v49 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v48 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v47 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v46 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v45 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v44 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v43 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v42 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap111"] intValue];
      uint64_t v41 = [(int)[v2 objectAtIndex:v12] objectForKey:@"cellTxPowerLimit"] intValue];
      double v13 = (double)[(int)[v2 objectAtIndex:v12] objectForKey:@"cellFrequencyLimitForOOB"];
      double v14 = (double)(int)[v2 objectAtIndex:v12][@"cellBandwidthLimitForOOB"][@"intValue"];
      unsigned int v40 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiFirstChannelToAvoidForCellOOB"] intValue];
      unsigned int v39 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiLastChannelToAvoidForCellOOB"] intValue];
      unsigned int v38 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiFirstChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v37 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiLastChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v36 = [[[v2 objectAtIndex:v12] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned int v35 = [[[v2 objectAtIndex:v12] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned __int8 v15 = [[[v2 objectAtIndex:v12] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned __int8 v16 = [[[v2 objectAtIndex:v12] objectForKey:@"ulcaPriority"] intValue];
      unsigned __int8 v17 = [[[v2 objectAtIndex:v12] objectForKey:@"ulcaPriority_WiFi"] intValue];
      unsigned __int8 v18 = [[[v2 objectAtIndex:v12] objectForKey:@"ulcaPriority_BT"] intValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v12] objectForKey:@"CellAntBlk"] intValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiFirstChannelToDisableOCLCellOOB"] intValue];
      unsigned __int8 v21 = [[[v2 objectAtIndex:v12] objectForKey:@"wifiLastChannelToDisableOCLCellOOB"] intValue];
      unsigned int v22 = [[[v2 objectAtIndex:v12++] objectForKey:@"isWifiEnhBand"] intValue];
      unsigned int v23 = &v34[v11];
      unsigned int v24 = v59;
      *(_DWORD *)unsigned int v23 = v60;
      *((_DWORD *)v23 + 1) = v24;
      v23[8] = v58;
      char v25 = v56;
      v23[13] = v57;
      *(_DWORD *)(v23 + 9) = 0;
      v23[14] = v25;
      v23[15] = v55;
      v23[16] = v54;
      v23[17] = v53;
      v23[18] = v52;
      v23[19] = v51;
      v23[20] = v50;
      v23[21] = v49;
      v23[22] = v48;
      v23[23] = v47;
      v23[24] = v46;
      v23[25] = v45;
      v23[26] = v44;
      v23[27] = v43;
      v23[28] = v42;
      *(_WORD *)(v23 + 29) = v62;
      v23[31] = v63;
      *((void *)v23 + 4) = v41;
      *((double *)v23 + 5) = v13;
      *((double *)v23 + 6) = v14;
      v23[56] = v40;
      v23[57] = v39;
      v23[58] = v38;
      v23[59] = v37;
      unsigned int v26 = v36;
      *((_DWORD *)v23 + 15) = 0;
      *((_DWORD *)v23 + 16) = v26;
      *(void *)(v23 + 68) = 0;
      *((_WORD *)v23 + 38) = 0;
      v23[78] = v35;
      v23[79] = v15;
      *((void *)v23 + 10) = 0;
      v23[88] = 0;
      v23[89] = v16;
      v23[90] = v17;
      v23[91] = v18;
      v23[92] = 0;
      v23[93] = v19;
      v23[94] = v20;
      v23[95] = v21;
      v23[96] = v22 != 0;
      *(void *)(v23 + 97) = 0;
      *((_DWORD *)v23 + 27) = *(_DWORD *)((char *)v61 + 3);
      v11 += 112;
      *(_DWORD *)(v23 + 105) = v61[0];
    }
    while (v33 != v11);
  }
  id v27 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v28 = v32;
  [v32 setWcmWiFiCellCoexIssueTable:v27];
  id v29 = [v28 wcmWiFiCellCoexIssueTable];
  [v29 configureBy:v34];
  [v28 setWcmCellularCoexB7DLRange:2620.0, 40.0];
  [v28 setWcmCellularCoexB7ULRange:2500.0, 40.0];
  [v28 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v28 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v28 setWcmCellularCoexB41A1Range:2496.0, 20.0];
  [v28 setWcmCellularCoexB41A2Range:2516.0, 29.0];
  [v28 setWcmCellularScanProtectionCellFrequencies:&off_100252280];
  [v28 setWcmCellularScanProtectionCellFrequenciesforBT:&off_100252328];
  return [v28 setWcmCellularScanProtectionWiFiChannels:&off_1002523D0];
}

id sub_100123078(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:-60];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-40];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-40];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-50];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-50];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:6790];
  [a1 setWcmWCI2MWSInactivityAssertJitter:192];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:500];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023DFC8];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex015_V6WiFiEnh", @"plist") options:2 format:&v65 error:&v66];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  id v31 = a1;
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  uint64_t v30 = (uint64_t)&v30;
  __chkstk_darwin(v4, v5, v6);
  id v32 = (char *)&v30 - v7 * (unint64_t)v8;
  uint64_t v9 = &v32[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v9 = 211;
  *(_OWORD *)(v9 + 4) = 0u;
  *(_OWORD *)(v9 + 20) = 0u;
  *(_OWORD *)(v9 + 36) = 0u;
  *(_OWORD *)(v9 + 52) = 0u;
  *(_OWORD *)(v9 + 68) = 0u;
  *(_OWORD *)(v9 + 84) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  unsigned __int16 v10 = (unsigned __int16)[v2 count];
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = v32 + 56;
    uint64_t v33 = v10;
    do
    {
      __int16 v63 = 0;
      char v64 = 0;
      v62[0] = 0;
      *(_DWORD *)((char *)v62 + 3) = 0;
      unsigned int v61 = [[[v2 objectAtIndex:v11] objectForKey:@"issueBand"] intValue];
      unsigned int v60 = [[[v2 objectAtIndex:v11] objectForKey:@"issueType"] intValue];
      unsigned int v59 = [[[v2 objectAtIndex:v11] objectForKey:@"isWiFiDesense"] BOOLValue];
      unsigned int v58 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v57 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v56 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v55 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v54 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v53 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v52 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v51 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap111"] intValue];
      unsigned int v50 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v49 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v48 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v47 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v46 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v45 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v44 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v43 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap111"] intValue];
      uint64_t v42 = (int)[v2 objectAtIndex:v11][@"cellTxPowerLimit"][@"intValue"];
      double v13 = (double)(int)[v2 objectAtIndex:v11][@"cellFrequencyLimitForOOB"][@"intValue"];
      double v14 = (double)(int)[v2 objectAtIndex:v11][@"cellBandwidthLimitForOOB"][@"intValue"];
      unsigned int v41 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToAvoidForCellOOB"] intValue];
      unsigned int v40 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToAvoidForCellOOB"] intValue];
      unsigned int v39 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v38 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v37 = [[[v2 objectAtIndex:v11] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned int v36 = [[[v2 objectAtIndex:v11] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned int v35 = [[[v2 objectAtIndex:v11] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned int v34 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority"] intValue];
      unsigned __int8 v15 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority_WiFi"] intValue];
      unsigned __int8 v16 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority_BT"] intValue];
      unsigned __int8 v17 = [[[v2 objectAtIndex:v11] objectForKey:@"CellAntBlk"] intValue];
      unsigned __int8 v18 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToDisableOCLCellOOB"] intValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToDisableOCLCellOOB"] intValue];
      BOOL v20 = [[[v2 objectAtIndex:v11] objectForKey:@"isWifiEnhBand"] intValue] != 0;
      unsigned __int8 v21 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToAvoidForCellOOBPHS"] intValue];
      unsigned __int8 v22 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToAvoidForCellOOBPHS"] intValue];
      uint64_t v23 = v33;
      unsigned int v24 = v60;
      *((_DWORD *)v12 - 14) = v61;
      *((_DWORD *)v12 - 13) = v24;
      *(v12 - 48) = v59;
      *(v12 - 43) = v58;
      *(v12 - 42) = v57;
      *(_DWORD *)(v12 - 47) = 0;
      *(v12 - 41) = v56;
      *(v12 - 40) = v55;
      *(v12 - 39) = v54;
      *(v12 - 38) = v53;
      *(v12 - 37) = v52;
      *(v12 - 36) = v51;
      *(v12 - 35) = v50;
      *(v12 - 34) = v49;
      *(v12 - 33) = v48;
      *(v12 - 32) = v47;
      *(v12 - 31) = v46;
      *(v12 - 30) = v45;
      *(v12 - 29) = v44;
      *(v12 - 28) = v43;
      *(_WORD *)(v12 - 27) = v63;
      *(v12 - 25) = v64;
      *((void *)v12 - 3) = v42;
      *((double *)v12 - 2) = v13;
      *((double *)v12 - 1) = v14;
      *uint64_t v12 = v41;
      v12[1] = v40;
      v12[2] = v39;
      void v12[3] = v38;
      unsigned int v25 = v37;
      *((_DWORD *)v12 + 1) = 0;
      *((_DWORD *)v12 + 2) = v25;
      *(void *)(v12 + 12) = 0;
      *((_WORD *)v12 + 10) = 0;
      v12[22] = v36;
      v12[23] = v35;
      *((void *)v12 + 3) = 0;
      v12[32] = 0;
      v12[33] = v34;
      v12[34] = v15;
      v12[35] = v16;
      v12[36] = 0;
      v12[37] = v17;
      v12[38] = v18;
      v12[39] = v19;
      v12[40] = v20;
      v12[41] = v21;
      v12[42] = v22;
      *(_WORD *)(v12 + 47) = 0;
      *(_DWORD *)(v12 + 43) = 0;
      *((_DWORD *)v12 + 13) = *(_DWORD *)((char *)v62 + 3);
      ++v11;
      *(_DWORD *)(v12 + 49) = v62[0];
      v12 += 112;
    }
    while (v23 != v11);
  }
  unsigned int v26 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v27 = v31;
  [v31 setWcmWiFiCellCoexIssueTable:v26];
  id v28 = [v27 wcmWiFiCellCoexIssueTable];
  [v28 configureBy:v32];
  [v27 setWcmCellularCoexB7DLRange:2620.0, 40.0];
  [v27 setWcmCellularCoexB7ULRange:2500.0, 40.0];
  [v27 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v27 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v27 setWcmCellularCoexB41A1Range:2496.0, 20.0];
  [v27 setWcmCellularCoexB41A2Range:2516.0, 29.0];
  [v27 setWcmCellularScanProtectionCellFrequencies:&off_100252418];
  [v27 setWcmCellularScanProtectionCellFrequenciesforBT:&off_100252460];
  return [v27 setWcmCellularScanProtectionWiFiChannels:&off_1002524A8];
}

id sub_100123AE8(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:-60];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-40];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-40];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-50];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-50];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:6790];
  [a1 setWcmWCI2MWSInactivityAssertJitter:192];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:500];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023DFC8];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex016_V6WiFiEnh", @"plist") options:2 format:&v65 error:&v66];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  id v31 = a1;
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  uint64_t v30 = (uint64_t)&v30;
  __chkstk_darwin(v4, v5, v6);
  id v32 = (char *)&v30 - v7 * (unint64_t)v8;
  uint64_t v9 = &v32[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v9 = 211;
  *(_OWORD *)(v9 + 4) = 0u;
  *(_OWORD *)(v9 + 20) = 0u;
  *(_OWORD *)(v9 + 36) = 0u;
  *(_OWORD *)(v9 + 52) = 0u;
  *(_OWORD *)(v9 + 68) = 0u;
  *(_OWORD *)(v9 + 84) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  unsigned __int16 v10 = (unsigned __int16)[v2 count];
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = v32 + 56;
    uint64_t v33 = v10;
    do
    {
      __int16 v63 = 0;
      char v64 = 0;
      v62[0] = 0;
      *(_DWORD *)((char *)v62 + 3) = 0;
      unsigned int v61 = [[[v2 objectAtIndex:v11] objectForKey:@"issueBand"] intValue];
      unsigned int v60 = [[[v2 objectAtIndex:v11] objectForKey:@"issueType"] intValue];
      unsigned int v59 = [[[v2 objectAtIndex:v11] objectForKey:@"isWiFiDesense"] BOOLValue];
      unsigned int v58 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v57 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v56 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v55 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v54 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v53 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v52 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v51 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap111"] intValue];
      unsigned int v50 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v49 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v48 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v47 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v46 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v45 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v44 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v43 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap111"] intValue];
      uint64_t v42 = [(int)[v2 objectAtIndex:v11] objectForKey:@"cellTxPowerLimit"] intValue];
      double v13 = (double)(int)[v2 objectAtIndex:v11][@"cellFrequencyLimitForOOB"][@"intValue"];
      double v14 = (double)(int)[v2 objectAtIndex:v11][@"cellBandwidthLimitForOOB"][@"intValue"];
      unsigned int v41 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToAvoidForCellOOB"] intValue];
      unsigned int v40 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToAvoidForCellOOB"] intValue];
      unsigned int v39 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v38 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v37 = [[[v2 objectAtIndex:v11] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned int v36 = [[[v2 objectAtIndex:v11] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned int v35 = [[[v2 objectAtIndex:v11] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned int v34 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority"] intValue];
      unsigned __int8 v15 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority_WiFi"] intValue];
      unsigned __int8 v16 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority_BT"] intValue];
      unsigned __int8 v17 = [[[v2 objectAtIndex:v11] objectForKey:@"CellAntBlk"] intValue];
      unsigned __int8 v18 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToDisableOCLCellOOB"] intValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToDisableOCLCellOOB"] intValue];
      BOOL v20 = [[[v2 objectAtIndex:v11] objectForKey:@"isWifiEnhBand"] intValue] != 0;
      unsigned __int8 v21 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToAvoidForCellOOBPHS"] intValue];
      unsigned __int8 v22 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToAvoidForCellOOBPHS"] intValue];
      uint64_t v23 = v33;
      unsigned int v24 = v60;
      *((_DWORD *)v12 - 14) = v61;
      *((_DWORD *)v12 - 13) = v24;
      *(v12 - 48) = v59;
      *(v12 - 43) = v58;
      *(v12 - 42) = v57;
      *(_DWORD *)(v12 - 47) = 0;
      *(v12 - 41) = v56;
      *(v12 - 40) = v55;
      *(v12 - 39) = v54;
      *(v12 - 38) = v53;
      *(v12 - 37) = v52;
      *(v12 - 36) = v51;
      *(v12 - 35) = v50;
      *(v12 - 34) = v49;
      *(v12 - 33) = v48;
      *(v12 - 32) = v47;
      *(v12 - 31) = v46;
      *(v12 - 30) = v45;
      *(v12 - 29) = v44;
      *(v12 - 28) = v43;
      *(_WORD *)(v12 - 27) = v63;
      *(v12 - 25) = v64;
      *((void *)v12 - 3) = v42;
      *((double *)v12 - 2) = v13;
      *((double *)v12 - 1) = v14;
      *uint64_t v12 = v41;
      v12[1] = v40;
      v12[2] = v39;
      void v12[3] = v38;
      unsigned int v25 = v37;
      *((_DWORD *)v12 + 1) = 0;
      *((_DWORD *)v12 + 2) = v25;
      *(void *)(v12 + 12) = 0;
      *((_WORD *)v12 + 10) = 0;
      v12[22] = v36;
      v12[23] = v35;
      *((void *)v12 + 3) = 0;
      v12[32] = 0;
      v12[33] = v34;
      v12[34] = v15;
      v12[35] = v16;
      v12[36] = 0;
      v12[37] = v17;
      v12[38] = v18;
      v12[39] = v19;
      v12[40] = v20;
      v12[41] = v21;
      v12[42] = v22;
      *(_WORD *)(v12 + 47) = 0;
      *(_DWORD *)(v12 + 43) = 0;
      *((_DWORD *)v12 + 13) = *(_DWORD *)((char *)v62 + 3);
      ++v11;
      *(_DWORD *)(v12 + 49) = v62[0];
      v12 += 112;
    }
    while (v23 != v11);
  }
  unsigned int v26 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v27 = v31;
  [v31 setWcmWiFiCellCoexIssueTable:v26];
  id v28 = [v27 wcmWiFiCellCoexIssueTable];
  [v28 configureBy:v32];
  [v27 setWcmCellularCoexB7DLRange:2620.0, 40.0];
  [v27 setWcmCellularCoexB7ULRange:2500.0, 40.0];
  [v27 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v27 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v27 setWcmCellularCoexB41A1Range:2496.0, 20.0];
  [v27 setWcmCellularCoexB41A2Range:2516.0, 29.0];
  [v27 setWcmCellularScanProtectionCellFrequencies:&off_1002524F0];
  [v27 setWcmCellularScanProtectionCellFrequenciesforBT:&off_100252538];
  return [v27 setWcmCellularScanProtectionWiFiChannels:&off_100252580];
}

id sub_100124558(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:-60];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-40];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-40];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-50];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-50];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:6790];
  [a1 setWcmWCI2MWSInactivityAssertJitter:192];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:500];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023DFC8];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex014_V6WiFiEnh", @"plist") options:2 format:&v65 error:&v66];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  id v31 = a1;
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  uint64_t v30 = (uint64_t)&v30;
  __chkstk_darwin(v4, v5, v6);
  id v32 = (char *)&v30 - v7 * (unint64_t)v8;
  uint64_t v9 = &v32[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v9 = 211;
  *(_OWORD *)(v9 + 4) = 0u;
  *(_OWORD *)(v9 + 20) = 0u;
  *(_OWORD *)(v9 + 36) = 0u;
  *(_OWORD *)(v9 + 52) = 0u;
  *(_OWORD *)(v9 + 68) = 0u;
  *(_OWORD *)(v9 + 84) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  unsigned __int16 v10 = (unsigned __int16)[v2 count];
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = v32 + 56;
    uint64_t v33 = v10;
    do
    {
      __int16 v63 = 0;
      char v64 = 0;
      v62[0] = 0;
      *(_DWORD *)((char *)v62 + 3) = 0;
      unsigned int v61 = [[[v2 objectAtIndex:v11] objectForKey:@"issueBand"] intValue];
      unsigned int v60 = [[[v2 objectAtIndex:v11] objectForKey:@"issueType"] intValue];
      unsigned int v59 = [[[v2 objectAtIndex:v11] objectForKey:@"isWiFiDesense"] BOOLValue];
      unsigned int v58 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v57 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v56 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v55 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v54 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v53 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v52 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v51 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap111"] intValue];
      unsigned int v50 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v49 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v48 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v47 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v46 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v45 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v44 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v43 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap111"] intValue];
      uint64_t v42 = [[[v2 objectAtIndex:v11] objectForKey:@"cellTxPowerLimit"] intValue];
      double v13 = (double)(int)[v2 objectAtIndex:v11][@"cellFrequencyLimitForOOB"][@"intValue"];
      double v14 = (double)(int)[v2 objectAtIndex:v11][@"cellBandwidthLimitForOOB"][@"intValue"];
      unsigned int v41 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToAvoidForCellOOB"] intValue];
      unsigned int v40 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToAvoidForCellOOB"] intValue];
      unsigned int v39 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v38 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v37 = [[[v2 objectAtIndex:v11] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned int v36 = [[[v2 objectAtIndex:v11] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned int v35 = [[[v2 objectAtIndex:v11] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned int v34 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority"] intValue];
      unsigned __int8 v15 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority_WiFi"] intValue];
      unsigned __int8 v16 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority_BT"] intValue];
      unsigned __int8 v17 = [[[v2 objectAtIndex:v11] objectForKey:@"CellAntBlk"] intValue];
      unsigned __int8 v18 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToDisableOCLCellOOB"] intValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToDisableOCLCellOOB"] intValue];
      BOOL v20 = [[[v2 objectAtIndex:v11] objectForKey:@"isWifiEnhBand"] intValue] != 0;
      unsigned __int8 v21 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToAvoidForCellOOBPHS"] intValue];
      unsigned __int8 v22 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToAvoidForCellOOBPHS"] intValue];
      uint64_t v23 = v33;
      unsigned int v24 = v60;
      *((_DWORD *)v12 - 14) = v61;
      *((_DWORD *)v12 - 13) = v24;
      *(v12 - 48) = v59;
      *(v12 - 43) = v58;
      *(v12 - 42) = v57;
      *(_DWORD *)(v12 - 47) = 0;
      *(v12 - 41) = v56;
      *(v12 - 40) = v55;
      *(v12 - 39) = v54;
      *(v12 - 38) = v53;
      *(v12 - 37) = v52;
      *(v12 - 36) = v51;
      *(v12 - 35) = v50;
      *(v12 - 34) = v49;
      *(v12 - 33) = v48;
      *(v12 - 32) = v47;
      *(v12 - 31) = v46;
      *(v12 - 30) = v45;
      *(v12 - 29) = v44;
      *(v12 - 28) = v43;
      *(_WORD *)(v12 - 27) = v63;
      *(v12 - 25) = v64;
      *((void *)v12 - 3) = v42;
      *((double *)v12 - 2) = v13;
      *((double *)v12 - 1) = v14;
      *uint64_t v12 = v41;
      v12[1] = v40;
      v12[2] = v39;
      void v12[3] = v38;
      unsigned int v25 = v37;
      *((_DWORD *)v12 + 1) = 0;
      *((_DWORD *)v12 + 2) = v25;
      *(void *)(v12 + 12) = 0;
      *((_WORD *)v12 + 10) = 0;
      v12[22] = v36;
      v12[23] = v35;
      *((void *)v12 + 3) = 0;
      v12[32] = 0;
      v12[33] = v34;
      v12[34] = v15;
      v12[35] = v16;
      v12[36] = 0;
      v12[37] = v17;
      v12[38] = v18;
      v12[39] = v19;
      v12[40] = v20;
      v12[41] = v21;
      v12[42] = v22;
      *(_WORD *)(v12 + 47) = 0;
      *(_DWORD *)(v12 + 43) = 0;
      *((_DWORD *)v12 + 13) = *(_DWORD *)((char *)v62 + 3);
      ++v11;
      *(_DWORD *)(v12 + 49) = v62[0];
      v12 += 112;
    }
    while (v23 != v11);
  }
  unsigned int v26 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v27 = v31;
  [v31 setWcmWiFiCellCoexIssueTable:v26];
  id v28 = [v27 wcmWiFiCellCoexIssueTable];
  [v28 configureBy:v32];
  [v27 setWcmCellularCoexB7DLRange:2620.0, 40.0];
  [v27 setWcmCellularCoexB7ULRange:2500.0, 40.0];
  [v27 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v27 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v27 setWcmCellularCoexB41A1Range:2496.0, 20.0];
  [v27 setWcmCellularCoexB41A2Range:2516.0, 29.0];
  [v27 setWcmCellularScanProtectionCellFrequencies:&off_1002525C8];
  [v27 setWcmCellularScanProtectionCellFrequenciesforBT:&off_100252610];
  return [v27 setWcmCellularScanProtectionWiFiChannels:&off_100252658];
}

id sub_100124FC8(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:-60];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-40];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-40];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-50];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-50];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:6790];
  [a1 setWcmWCI2MWSInactivityAssertJitter:192];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:500];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023DFC8];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex013_V6WiFiEnh", @"plist") options:2 format:&v65 error:&v66];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  id v31 = a1;
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  uint64_t v30 = (uint64_t)&v30;
  __chkstk_darwin(v4, v5, v6);
  id v32 = (char *)&v30 - v7 * (unint64_t)v8;
  uint64_t v9 = &v32[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v9 = 211;
  *(_OWORD *)(v9 + 4) = 0u;
  *(_OWORD *)(v9 + 20) = 0u;
  *(_OWORD *)(v9 + 36) = 0u;
  *(_OWORD *)(v9 + 52) = 0u;
  *(_OWORD *)(v9 + 68) = 0u;
  *(_OWORD *)(v9 + 84) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  unsigned __int16 v10 = (unsigned __int16)[v2 count];
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = v32 + 56;
    uint64_t v33 = v10;
    do
    {
      __int16 v63 = 0;
      char v64 = 0;
      v62[0] = 0;
      *(_DWORD *)((char *)v62 + 3) = 0;
      unsigned int v61 = [[[v2 objectAtIndex:v11] objectForKey:@"issueBand"] intValue];
      unsigned int v60 = [[[v2 objectAtIndex:v11] objectForKey:@"issueType"] intValue];
      unsigned int v59 = [[[v2 objectAtIndex:v11] objectForKey:@"isWiFiDesense"] BOOLValue];
      unsigned int v58 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v57 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v56 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v55 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v54 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v53 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v52 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v51 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap111"] intValue];
      unsigned int v50 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v49 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v48 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v47 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v46 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v45 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v44 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v43 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap111"] intValue];
      uint64_t v42 = [[[v2 objectAtIndex:v11] objectForKey:@"cellTxPowerLimit"] intValue];
      double v13 = (double)(int)[v2 objectAtIndex:v11][@"cellFrequencyLimitForOOB"][@"intValue"];
      double v14 = (double)(int)[v2 objectAtIndex:v11][@"cellBandwidthLimitForOOB"][@"intValue"];
      unsigned int v41 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToAvoidForCellOOB"] intValue];
      unsigned int v40 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToAvoidForCellOOB"] intValue];
      unsigned int v39 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v38 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v37 = [[[v2 objectAtIndex:v11] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned int v36 = [[[v2 objectAtIndex:v11] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned int v35 = [[[v2 objectAtIndex:v11] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned int v34 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority"] intValue];
      unsigned __int8 v15 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority_WiFi"] intValue];
      unsigned __int8 v16 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority_BT"] intValue];
      unsigned __int8 v17 = [[[v2 objectAtIndex:v11] objectForKey:@"CellAntBlk"] intValue];
      unsigned __int8 v18 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToDisableOCLCellOOB"] intValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToDisableOCLCellOOB"] intValue];
      BOOL v20 = [[[v2 objectAtIndex:v11] objectForKey:@"isWifiEnhBand"] intValue] != 0;
      unsigned __int8 v21 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToAvoidForCellOOBPHS"] intValue];
      unsigned __int8 v22 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToAvoidForCellOOBPHS"] intValue];
      uint64_t v23 = v33;
      unsigned int v24 = v60;
      *((_DWORD *)v12 - 14) = v61;
      *((_DWORD *)v12 - 13) = v24;
      *(v12 - 48) = v59;
      *(v12 - 43) = v58;
      *(v12 - 42) = v57;
      *(_DWORD *)(v12 - 47) = 0;
      *(v12 - 41) = v56;
      *(v12 - 40) = v55;
      *(v12 - 39) = v54;
      *(v12 - 38) = v53;
      *(v12 - 37) = v52;
      *(v12 - 36) = v51;
      *(v12 - 35) = v50;
      *(v12 - 34) = v49;
      *(v12 - 33) = v48;
      *(v12 - 32) = v47;
      *(v12 - 31) = v46;
      *(v12 - 30) = v45;
      *(v12 - 29) = v44;
      *(v12 - 28) = v43;
      *(_WORD *)(v12 - 27) = v63;
      *(v12 - 25) = v64;
      *((void *)v12 - 3) = v42;
      *((double *)v12 - 2) = v13;
      *((double *)v12 - 1) = v14;
      *uint64_t v12 = v41;
      v12[1] = v40;
      v12[2] = v39;
      void v12[3] = v38;
      unsigned int v25 = v37;
      *((_DWORD *)v12 + 1) = 0;
      *((_DWORD *)v12 + 2) = v25;
      *(void *)(v12 + 12) = 0;
      *((_WORD *)v12 + 10) = 0;
      v12[22] = v36;
      v12[23] = v35;
      *((void *)v12 + 3) = 0;
      v12[32] = 0;
      v12[33] = v34;
      v12[34] = v15;
      v12[35] = v16;
      v12[36] = 0;
      v12[37] = v17;
      v12[38] = v18;
      v12[39] = v19;
      v12[40] = v20;
      v12[41] = v21;
      v12[42] = v22;
      *(_WORD *)(v12 + 47) = 0;
      *(_DWORD *)(v12 + 43) = 0;
      *((_DWORD *)v12 + 13) = *(_DWORD *)((char *)v62 + 3);
      ++v11;
      *(_DWORD *)(v12 + 49) = v62[0];
      v12 += 112;
    }
    while (v23 != v11);
  }
  unsigned int v26 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v27 = v31;
  [v31 setWcmWiFiCellCoexIssueTable:v26];
  id v28 = [v27 wcmWiFiCellCoexIssueTable];
  [v28 configureBy:v32];
  [v27 setWcmCellularCoexB7DLRange:2620.0, 40.0];
  [v27 setWcmCellularCoexB7ULRange:2500.0, 40.0];
  [v27 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v27 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v27 setWcmCellularCoexB41A1Range:2496.0, 20.0];
  [v27 setWcmCellularCoexB41A2Range:2516.0, 29.0];
  [v27 setWcmCellularScanProtectionCellFrequencies:&off_1002526A0];
  [v27 setWcmCellularScanProtectionCellFrequenciesforBT:&off_1002526E8];
  return [v27 setWcmCellularScanProtectionWiFiChannels:&off_100252730];
}

id sub_100125A38(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:-60];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-40];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-40];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-50];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-50];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:6790];
  [a1 setWcmWCI2MWSInactivityAssertJitter:192];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:500];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023DFC8];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex033_V7WiFiEnh", @"plist") options:2 format:&v73 error:&v74];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  id v33 = a1;
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  v32[1] = v32;
  __chkstk_darwin(v4, v5, v6);
  unsigned int v34 = (char *)v32 - v7 * (unint64_t)v8;
  uint64_t v9 = &v34[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v9 = 211;
  *(_OWORD *)(v9 + 4) = 0u;
  *(_OWORD *)(v9 + 20) = 0u;
  *(_OWORD *)(v9 + 36) = 0u;
  *(_OWORD *)(v9 + 52) = 0u;
  *(_OWORD *)(v9 + 68) = 0u;
  *(_OWORD *)(v9 + 84) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  unsigned __int16 v10 = (unsigned __int16)[v2 count];
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = v34 + 56;
    uint64_t v35 = v10;
    do
    {
      __int16 v71 = 0;
      char v72 = 0;
      v70[0] = 0;
      *(_DWORD *)((char *)v70 + 3) = 0;
      unsigned int v69 = [[[v2 objectAtIndex:v11] objectForKey:@"issueBand"] intValue];
      unsigned int v68 = [[[v2 objectAtIndex:v11] objectForKey:@"issueType"] intValue];
      unsigned int v67 = [[[v2 objectAtIndex:v11] objectForKey:@"isWiFiDesense"] BOOLValue];
      unsigned int v66 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v65 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v64 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v63 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v62 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v61 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v60 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v59 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap111"] intValue];
      unsigned int v58 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v57 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v56 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v55 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v54 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v53 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v52 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v51 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap111"] intValue];
      uint64_t v50 = (int)[v2 objectAtIndex:v11][@"cellTxPowerLimit"][@"intValue"];
      double v13 = (double)(int)[[[v2 objectAtIndex:v11] objectForKey:@"cellFrequencyLimitForOOB"] intValue];
      double v14 = (double)(int)[v2 objectAtIndex:v11][@"cellBandwidthLimitForOOB"][@"intValue"];
      unsigned int v49 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToAvoidForCellOOB"] intValue];
      unsigned int v48 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToAvoidForCellOOB"] intValue];
      unsigned int v47 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v46 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v45 = [[[v2 objectAtIndex:v11] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned int v44 = [[[v2 objectAtIndex:v11] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned int v43 = [[[v2 objectAtIndex:v11] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned int v42 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority"] intValue];
      unsigned int v41 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority_WiFi"] intValue];
      unsigned int v40 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority_BT"] intValue];
      unsigned int v39 = [[[v2 objectAtIndex:v11] objectForKey:@"CellAntBlk"] intValue];
      unsigned int v38 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToDisableOCLCellOOB"] intValue];
      unsigned int v37 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToDisableOCLCellOOB"] intValue];
      BOOL v36 = [[[v2 objectAtIndex:v11] objectForKey:@"isWifiEnhBand"] intValue] != 0;
      unsigned __int8 v15 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToAvoidForCellOOBPHS"] intValue];
      unsigned __int8 v16 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToAvoidForCellOOBPHS"] intValue];
      unsigned __int8 v17 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii1Enabled"] BOOLValue];
      unsigned __int8 v18 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii3Enabled"] BOOLValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5aEnabled"] BOOLValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5bEnabled"] BOOLValue];
      unsigned __int8 v21 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5cEnabled"] BOOLValue];
      unsigned __int8 v22 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5dEnabled"] BOOLValue];
      unsigned int v23 = v68;
      *((_DWORD *)v12 - 14) = v69;
      *((_DWORD *)v12 - 13) = v23;
      *(v12 - 48) = v67;
      *(v12 - 43) = v66;
      *(v12 - 42) = v65;
      *(v12 - 41) = v64;
      *(v12 - 40) = v63;
      *(v12 - 39) = v62;
      *(v12 - 38) = v61;
      *(v12 - 37) = v60;
      *(v12 - 36) = v59;
      *(_DWORD *)(v12 - 47) = 0;
      *(v12 - 35) = v58;
      *(v12 - 34) = v57;
      *(v12 - 33) = v56;
      *(v12 - 32) = v55;
      *(v12 - 31) = v54;
      *(v12 - 30) = v53;
      *(v12 - 29) = v52;
      *(v12 - 28) = v51;
      *(_WORD *)(v12 - 27) = v71;
      *(v12 - 25) = v72;
      *((void *)v12 - 3) = v50;
      *((double *)v12 - 2) = v13;
      *((double *)v12 - 1) = v14;
      *uint64_t v12 = v49;
      v12[1] = v48;
      v12[2] = v47;
      void v12[3] = v46;
      unsigned int v24 = v45;
      *((_DWORD *)v12 + 1) = 0;
      *((_DWORD *)v12 + 2) = v24;
      *(void *)(v12 + 12) = 0;
      *((_WORD *)v12 + 10) = 0;
      v12[22] = v44;
      v12[23] = v43;
      *((void *)v12 + 3) = 0;
      v12[32] = 0;
      v12[33] = v42;
      v12[34] = v41;
      v12[35] = v40;
      v12[36] = 0;
      v12[37] = v39;
      v12[38] = v38;
      v12[39] = v37;
      v12[40] = v36;
      v12[41] = v15;
      v12[42] = v16;
      v12[43] = v17;
      v12[44] = v18;
      v12[45] = v19;
      v12[46] = v20;
      v12[47] = v21;
      v12[48] = v22;
      int v25 = v70[0];
      ++v11;
      *((_DWORD *)v12 + 13) = *(_DWORD *)((char *)v70 + 3);
      uint64_t v26 = v35;
      *(_DWORD *)(v12 + 49) = v25;
      v12 += 112;
    }
    while (v26 != v11);
  }
  id v27 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v28 = v33;
  [v33 setWcmWiFiCellCoexIssueTable:v27];
  id v29 = [v28 wcmWiFiCellCoexIssueTable];
  [v29 configureBy:v34];
  [v28 setWcmCellRc1CoexIssueTable:[-[WCM_CellularRc1CoexIssueTable initFromPlist:]([WCM_CellularRc1CoexIssueTable alloc], "initFromPlist:", @"CoEx-Table-CellRC1-Coex002")];
  [v28 setWcmCellularCoexB7DLRange:2620.0, 40.0];
  [v28 setWcmCellularCoexB7ULRange:2500.0, 40.0];
  [v28 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v28 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v28 setWcmCellularCoexB41A1Range:2496.0, 20.0];
  [v28 setWcmCellularCoexB41A2Range:2516.0, 29.0];
  [v28 setWcmCellularScanProtectionCellFrequencies:&off_1002527A8];
  if (_os_feature_enabled_impl()) {
    uint64_t v30 = &off_100252820;
  }
  else {
    uint64_t v30 = &off_100252898;
  }
  [v28 setWcmCellularScanProtectionCellFrequenciesforBT:v30];
  [v28 setWcmCellularScanProtectionWiFiChannels:&off_100252910];
  [v28 setWcmCellularScanProtectionWiFiChannelsWiFiEnh:&off_100252988];
  [v28 setWcmWiFiScanThrottlingChannelIndices:&off_1002529A0];
  [v28 setWcmGen9rFemDefaultMode2gWiFiCellularbands:[NSDictionary dictionaryWithObjectsAndKeys:&off_1002529B8, @"LTE", &off_1002529D0, @"NR", 0]];
  return [v28 setWcmGen9rFemDefaultMode5gWiFiCellularbands:+[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002529E8, @"LTE", 0)];
}

id sub_100126698(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:-60];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-40];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-40];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-50];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-50];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:6790];
  [a1 setWcmWCI2MWSInactivityAssertJitter:192];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:500];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023DFC8];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex034_V7WiFiEnh", @"plist") options:2 format:&v73 error:&v74];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  id v33 = a1;
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  v32[1] = v32;
  __chkstk_darwin(v4, v5, v6);
  unsigned int v34 = (char *)v32 - v7 * (unint64_t)v8;
  uint64_t v9 = &v34[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v9 = 211;
  *(_OWORD *)(v9 + 4) = 0u;
  *(_OWORD *)(v9 + 20) = 0u;
  *(_OWORD *)(v9 + 36) = 0u;
  *(_OWORD *)(v9 + 52) = 0u;
  *(_OWORD *)(v9 + 68) = 0u;
  *(_OWORD *)(v9 + 84) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  unsigned __int16 v10 = (unsigned __int16)[v2 count];
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = v34 + 56;
    uint64_t v35 = v10;
    do
    {
      __int16 v71 = 0;
      char v72 = 0;
      v70[0] = 0;
      *(_DWORD *)((char *)v70 + 3) = 0;
      unsigned int v69 = [[[v2 objectAtIndex:v11] objectForKey:@"issueBand"] intValue];
      unsigned int v68 = [[[v2 objectAtIndex:v11] objectForKey:@"issueType"] intValue];
      unsigned int v67 = [[[v2 objectAtIndex:v11] objectForKey:@"isWiFiDesense"] BOOLValue];
      unsigned int v66 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v65 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v64 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v63 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v62 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v61 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v60 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v59 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap111"] intValue];
      unsigned int v58 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v57 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v56 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v55 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v54 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v53 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v52 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v51 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap111"] intValue];
      uint64_t v50 = (int)[v2 objectAtIndex:v11][@"cellTxPowerLimit"][@"intValue"];
      double v13 = (double)(int)[v2 objectAtIndex:v11][@"cellFrequencyLimitForOOB"][@"intValue"];
      double v14 = (double)(int)[v2 objectAtIndex:v11][@"cellBandwidthLimitForOOB"][@"intValue"];
      unsigned int v49 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToAvoidForCellOOB"] intValue];
      unsigned int v48 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToAvoidForCellOOB"] intValue];
      unsigned int v47 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v46 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v45 = [[[v2 objectAtIndex:v11] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned int v44 = [[[v2 objectAtIndex:v11] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned int v43 = [[[v2 objectAtIndex:v11] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned int v42 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority"] intValue];
      unsigned int v41 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority_WiFi"] intValue];
      unsigned int v40 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority_BT"] intValue];
      unsigned int v39 = [[[v2 objectAtIndex:v11] objectForKey:@"CellAntBlk"] intValue];
      unsigned int v38 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToDisableOCLCellOOB"] intValue];
      unsigned int v37 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToDisableOCLCellOOB"] intValue];
      BOOL v36 = [[[v2 objectAtIndex:v11] objectForKey:@"isWifiEnhBand"] intValue] != 0;
      unsigned __int8 v15 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToAvoidForCellOOBPHS"] intValue];
      unsigned __int8 v16 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToAvoidForCellOOBPHS"] intValue];
      unsigned __int8 v17 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii1Enabled"] BOOLValue];
      unsigned __int8 v18 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii3Enabled"] BOOLValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5aEnabled"] BOOLValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5bEnabled"] BOOLValue];
      unsigned __int8 v21 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5cEnabled"] BOOLValue];
      unsigned __int8 v22 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5dEnabled"] BOOLValue];
      unsigned int v23 = v68;
      *((_DWORD *)v12 - 14) = v69;
      *((_DWORD *)v12 - 13) = v23;
      *(v12 - 48) = v67;
      *(v12 - 43) = v66;
      *(v12 - 42) = v65;
      *(v12 - 41) = v64;
      *(v12 - 40) = v63;
      *(v12 - 39) = v62;
      *(v12 - 38) = v61;
      *(v12 - 37) = v60;
      *(v12 - 36) = v59;
      *(_DWORD *)(v12 - 47) = 0;
      *(v12 - 35) = v58;
      *(v12 - 34) = v57;
      *(v12 - 33) = v56;
      *(v12 - 32) = v55;
      *(v12 - 31) = v54;
      *(v12 - 30) = v53;
      *(v12 - 29) = v52;
      *(v12 - 28) = v51;
      *(_WORD *)(v12 - 27) = v71;
      *(v12 - 25) = v72;
      *((void *)v12 - 3) = v50;
      *((double *)v12 - 2) = v13;
      *((double *)v12 - 1) = v14;
      *uint64_t v12 = v49;
      v12[1] = v48;
      v12[2] = v47;
      void v12[3] = v46;
      unsigned int v24 = v45;
      *((_DWORD *)v12 + 1) = 0;
      *((_DWORD *)v12 + 2) = v24;
      *(void *)(v12 + 12) = 0;
      *((_WORD *)v12 + 10) = 0;
      v12[22] = v44;
      v12[23] = v43;
      *((void *)v12 + 3) = 0;
      v12[32] = 0;
      v12[33] = v42;
      v12[34] = v41;
      v12[35] = v40;
      v12[36] = 0;
      v12[37] = v39;
      v12[38] = v38;
      v12[39] = v37;
      v12[40] = v36;
      v12[41] = v15;
      v12[42] = v16;
      v12[43] = v17;
      v12[44] = v18;
      v12[45] = v19;
      v12[46] = v20;
      v12[47] = v21;
      v12[48] = v22;
      int v25 = v70[0];
      ++v11;
      *((_DWORD *)v12 + 13) = *(_DWORD *)((char *)v70 + 3);
      uint64_t v26 = v35;
      *(_DWORD *)(v12 + 49) = v25;
      v12 += 112;
    }
    while (v26 != v11);
  }
  id v27 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v28 = v33;
  [v33 setWcmWiFiCellCoexIssueTable:v27];
  id v29 = [v28 wcmWiFiCellCoexIssueTable];
  [v29 configureBy:v34];
  [v28 setWcmCellRc1CoexIssueTable:[[WCM_CellularRc1CoexIssueTable alloc] initFromPlist:@"CoEx-Table-CellRC1-Coex004"]];
  [v28 setWcmCellularCoexB7DLRange:2620.0, 40.0];
  [v28 setWcmCellularCoexB7ULRange:2500.0, 40.0];
  [v28 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v28 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v28 setWcmCellularCoexB41A1Range:2496.0, 20.0];
  [v28 setWcmCellularCoexB41A2Range:2516.0, 29.0];
  [v28 setWcmCellularScanProtectionCellFrequencies:&off_100252A60];
  if (_os_feature_enabled_impl()) {
    uint64_t v30 = &off_100252AD8;
  }
  else {
    uint64_t v30 = &off_100252B50;
  }
  [v28 setWcmCellularScanProtectionCellFrequenciesforBT:v30];
  [v28 setWcmCellularScanProtectionWiFiChannels:&off_100252BC8];
  [v28 setWcmCellularScanProtectionWiFiChannelsWiFiEnh:&off_100252C40];
  [v28 setWcmWiFiScanThrottlingChannelIndices:&off_100252C58];
  [v28 setWcmGen9rFemDefaultMode2gWiFiCellularbands:[NSDictionary dictionaryWithObjectsAndKeys:&off_100252C70, @"LTE", &off_100252C88, @"NR", 0]];
  return [v28 setWcmGen9rFemDefaultMode5gWiFiCellularbands:+[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100252CA0, @"LTE", 0)];
}

id sub_1001272F8(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:-60];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-40];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-40];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-50];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-50];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:6790];
  [a1 setWcmWCI2MWSInactivityAssertJitter:192];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:500];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023DFC8];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex032_V7WiFiEnh", @"plist") options:2 format:&v72 error:&v73];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  id v32 = a1;
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  v31[1] = v31;
  __chkstk_darwin(v4, v5, v6);
  id v33 = (char *)v31 - v7 * (unint64_t)v8;
  uint64_t v9 = &v33[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v9 = 211;
  *(_OWORD *)(v9 + 4) = 0u;
  *(_OWORD *)(v9 + 20) = 0u;
  *(_OWORD *)(v9 + 36) = 0u;
  *(_OWORD *)(v9 + 52) = 0u;
  *(_OWORD *)(v9 + 68) = 0u;
  *(_OWORD *)(v9 + 84) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  unsigned __int16 v10 = (unsigned __int16)[v2 count];
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = v33 + 56;
    uint64_t v34 = v10;
    do
    {
      __int16 v70 = 0;
      char v71 = 0;
      v69[0] = 0;
      *(_DWORD *)((char *)v69 + 3) = 0;
      unsigned int v68 = [[[v2 objectAtIndex:v11] objectForKey:@"issueBand"] intValue];
      unsigned int v67 = [[[v2 objectAtIndex:v11] objectForKey:@"issueType"] intValue];
      unsigned int v66 = [[[v2 objectAtIndex:v11] objectForKey:@"isWiFiDesense"] BOOLValue];
      unsigned int v65 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v64 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v63 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v62 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v61 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v60 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v59 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v58 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap111"] intValue];
      unsigned int v57 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v56 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v55 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v54 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v53 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v52 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v51 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v50 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap111"] intValue];
      uint64_t v49 = [(int)[v2 objectAtIndex:v11] objectForKey:@"cellTxPowerLimit"] intValue];
      double v13 = (double)(int)[v2 objectAtIndex:v11][@"cellFrequencyLimitForOOB"][@"intValue"];
      double v14 = (double)(int)[v2 objectAtIndex:v11][@"cellBandwidthLimitForOOB"][@"intValue"];
      unsigned int v48 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToAvoidForCellOOB"] intValue];
      unsigned int v47 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToAvoidForCellOOB"] intValue];
      unsigned int v46 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v45 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v44 = [[[v2 objectAtIndex:v11] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned int v43 = [[[v2 objectAtIndex:v11] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned int v42 = [[[v2 objectAtIndex:v11] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned int v41 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority"] intValue];
      unsigned int v40 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority_WiFi"] intValue];
      unsigned int v39 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority_BT"] intValue];
      unsigned int v38 = [[[v2 objectAtIndex:v11] objectForKey:@"CellAntBlk"] intValue];
      unsigned int v37 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToDisableOCLCellOOB"] intValue];
      unsigned int v36 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToDisableOCLCellOOB"] intValue];
      BOOL v35 = [[[v2 objectAtIndex:v11] objectForKey:@"isWifiEnhBand"] intValue] != 0;
      unsigned __int8 v15 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToAvoidForCellOOBPHS"] intValue];
      unsigned __int8 v16 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToAvoidForCellOOBPHS"] intValue];
      unsigned __int8 v17 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii1Enabled"] BOOLValue];
      unsigned __int8 v18 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii3Enabled"] boolValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5aEnabled"] boolValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5bEnabled"] boolValue];
      unsigned __int8 v21 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5cEnabled"] BOOLValue];
      unsigned __int8 v22 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5dEnabled"] BOOLValue];
      unsigned int v23 = v67;
      *((_DWORD *)v12 - 14) = v68;
      *((_DWORD *)v12 - 13) = v23;
      *(v12 - 48) = v66;
      *(v12 - 43) = v65;
      *(v12 - 42) = v64;
      *(v12 - 41) = v63;
      *(v12 - 40) = v62;
      *(v12 - 39) = v61;
      *(v12 - 38) = v60;
      *(v12 - 37) = v59;
      *(v12 - 36) = v58;
      *(_DWORD *)(v12 - 47) = 0;
      *(v12 - 35) = v57;
      *(v12 - 34) = v56;
      *(v12 - 33) = v55;
      *(v12 - 32) = v54;
      *(v12 - 31) = v53;
      *(v12 - 30) = v52;
      *(v12 - 29) = v51;
      *(v12 - 28) = v50;
      *(_WORD *)(v12 - 27) = v70;
      *(v12 - 25) = v71;
      *((void *)v12 - 3) = v49;
      *((double *)v12 - 2) = v13;
      *((double *)v12 - 1) = v14;
      *uint64_t v12 = v48;
      v12[1] = v47;
      v12[2] = v46;
      void v12[3] = v45;
      unsigned int v24 = v44;
      *((_DWORD *)v12 + 1) = 0;
      *((_DWORD *)v12 + 2) = v24;
      *(void *)(v12 + 12) = 0;
      *((_WORD *)v12 + 10) = 0;
      v12[22] = v43;
      v12[23] = v42;
      *((void *)v12 + 3) = 0;
      v12[32] = 0;
      v12[33] = v41;
      v12[34] = v40;
      v12[35] = v39;
      v12[36] = 0;
      v12[37] = v38;
      v12[38] = v37;
      v12[39] = v36;
      v12[40] = v35;
      v12[41] = v15;
      v12[42] = v16;
      v12[43] = v17;
      v12[44] = v18;
      v12[45] = v19;
      v12[46] = v20;
      v12[47] = v21;
      v12[48] = v22;
      int v25 = v69[0];
      ++v11;
      *((_DWORD *)v12 + 13) = *(_DWORD *)((char *)v69 + 3);
      uint64_t v26 = v34;
      *(_DWORD *)(v12 + 49) = v25;
      v12 += 112;
    }
    while (v26 != v11);
  }
  id v27 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v28 = v32;
  [v32 setWcmWiFiCellCoexIssueTable:v27];
  id v29 = [v28 wcmWiFiCellCoexIssueTable];
  [v29 configureBy:v33];
  [v28 setWcmCellRc1CoexIssueTable:[[WCM_CellularRc1CoexIssueTable alloc] initFromPlist:@"CoEx-Table-CellRC1-Coex006"]];
  [v28 setWcmCellularCoexB7DLRange:2620.0, 40.0];
  [v28 setWcmCellularCoexB7ULRange:2500.0, 40.0];
  [v28 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v28 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v28 setWcmCellularCoexB41A1Range:2496.0, 20.0];
  [v28 setWcmCellularCoexB41A2Range:2516.0, 29.0];
  [v28 setWcmCellularScanProtectionCellFrequencies:&off_100252D18];
  [v28 setWcmCellularScanProtectionCellFrequenciesforBT:&off_100252D90];
  [v28 setWcmCellularScanProtectionWiFiChannels:&off_100252E08];
  return [v28 setWcmWiFiScanThrottlingChannelIndices:&off_100252E20];
}

id sub_100127EB8(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:-60];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-40];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-40];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-50];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-50];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:6790];
  [a1 setWcmWCI2MWSInactivityAssertJitter:192];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:500];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023DFC8];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex031_V7WiFiEnh", @"plist") options:2 format:&v72 error:&v73];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  id v32 = a1;
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  v31[1] = v31;
  __chkstk_darwin(v4, v5, v6);
  id v33 = (char *)v31 - v7 * (unint64_t)v8;
  uint64_t v9 = &v33[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v9 = 211;
  *(_OWORD *)(v9 + 4) = 0u;
  *(_OWORD *)(v9 + 20) = 0u;
  *(_OWORD *)(v9 + 36) = 0u;
  *(_OWORD *)(v9 + 52) = 0u;
  *(_OWORD *)(v9 + 68) = 0u;
  *(_OWORD *)(v9 + 84) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  unsigned __int16 v10 = (unsigned __int16)[v2 count];
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = v33 + 56;
    uint64_t v34 = v10;
    do
    {
      __int16 v70 = 0;
      char v71 = 0;
      v69[0] = 0;
      *(_DWORD *)((char *)v69 + 3) = 0;
      unsigned int v68 = [[[v2 objectAtIndex:v11] objectForKey:@"issueBand"] intValue];
      unsigned int v67 = [[[v2 objectAtIndex:v11] objectForKey:@"issueType"] intValue];
      unsigned int v66 = [[[v2 objectAtIndex:v11] objectForKey:@"isWiFiDesense"] BOOLValue];
      unsigned int v65 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v64 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v63 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v62 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v61 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v60 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v59 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v58 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap111"] intValue];
      unsigned int v57 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v56 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v55 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v54 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v53 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v52 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v51 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v50 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap111"] intValue];
      uint64_t v49 = [(int)[v2 objectAtIndex:v11] objectForKey:@"cellTxPowerLimit"] intValue];
      double v13 = (double)(int)[v2 objectAtIndex:v11][@"cellFrequencyLimitForOOB"][@"intValue"];
      double v14 = (double)[(int)[v2 objectAtIndex:v11] objectForKey:@"cellBandwidthLimitForOOB"];
      unsigned int v48 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToAvoidForCellOOB"] intValue];
      unsigned int v47 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToAvoidForCellOOB"] intValue];
      unsigned int v46 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v45 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v44 = [[[v2 objectAtIndex:v11] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned int v43 = [[[v2 objectAtIndex:v11] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned int v42 = [[[v2 objectAtIndex:v11] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned int v41 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority"] intValue];
      unsigned int v40 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority_WiFi"] intValue];
      unsigned int v39 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority_BT"] intValue];
      unsigned int v38 = [[[v2 objectAtIndex:v11] objectForKey:@"CellAntBlk"] intValue];
      unsigned int v37 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToDisableOCLCellOOB"] intValue];
      unsigned int v36 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToDisableOCLCellOOB"] intValue];
      BOOL v35 = [[[v2 objectAtIndex:v11] objectForKey:@"isWifiEnhBand"] intValue] != 0;
      unsigned __int8 v15 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToAvoidForCellOOBPHS"] intValue];
      unsigned __int8 v16 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToAvoidForCellOOBPHS"] intValue];
      unsigned __int8 v17 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii1Enabled"] BOOLValue];
      unsigned __int8 v18 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii3Enabled"] BOOLValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5aEnabled"] boolValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5bEnabled"] BOOLValue];
      unsigned __int8 v21 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5cEnabled"] boolValue];
      unsigned __int8 v22 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5dEnabled"] BOOLValue];
      unsigned int v23 = v67;
      *((_DWORD *)v12 - 14) = v68;
      *((_DWORD *)v12 - 13) = v23;
      *(v12 - 48) = v66;
      *(v12 - 43) = v65;
      *(v12 - 42) = v64;
      *(v12 - 41) = v63;
      *(v12 - 40) = v62;
      *(v12 - 39) = v61;
      *(v12 - 38) = v60;
      *(v12 - 37) = v59;
      *(v12 - 36) = v58;
      *(_DWORD *)(v12 - 47) = 0;
      *(v12 - 35) = v57;
      *(v12 - 34) = v56;
      *(v12 - 33) = v55;
      *(v12 - 32) = v54;
      *(v12 - 31) = v53;
      *(v12 - 30) = v52;
      *(v12 - 29) = v51;
      *(v12 - 28) = v50;
      *(_WORD *)(v12 - 27) = v70;
      *(v12 - 25) = v71;
      *((void *)v12 - 3) = v49;
      *((double *)v12 - 2) = v13;
      *((double *)v12 - 1) = v14;
      *uint64_t v12 = v48;
      v12[1] = v47;
      v12[2] = v46;
      void v12[3] = v45;
      unsigned int v24 = v44;
      *((_DWORD *)v12 + 1) = 0;
      *((_DWORD *)v12 + 2) = v24;
      *(void *)(v12 + 12) = 0;
      *((_WORD *)v12 + 10) = 0;
      v12[22] = v43;
      v12[23] = v42;
      *((void *)v12 + 3) = 0;
      v12[32] = 0;
      v12[33] = v41;
      v12[34] = v40;
      v12[35] = v39;
      v12[36] = 0;
      v12[37] = v38;
      v12[38] = v37;
      v12[39] = v36;
      v12[40] = v35;
      v12[41] = v15;
      v12[42] = v16;
      v12[43] = v17;
      v12[44] = v18;
      v12[45] = v19;
      v12[46] = v20;
      v12[47] = v21;
      v12[48] = v22;
      int v25 = v69[0];
      ++v11;
      *((_DWORD *)v12 + 13) = *(_DWORD *)((char *)v69 + 3);
      uint64_t v26 = v34;
      *(_DWORD *)(v12 + 49) = v25;
      v12 += 112;
    }
    while (v26 != v11);
  }
  id v27 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v28 = v32;
  [v32 setWcmWiFiCellCoexIssueTable:v27];
  id v29 = [v28 wcmWiFiCellCoexIssueTable];
  [v29 configureBy:v33];
  [v28 setWcmCellRc1CoexIssueTable:[[WCM_CellularRc1CoexIssueTable alloc] initFromPlist:@"CoEx-Table-CellRC1-Coex005"]];
  [v28 setWcmCellularCoexB7DLRange:2620.0, 40.0];
  [v28 setWcmCellularCoexB7ULRange:2500.0, 40.0];
  [v28 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v28 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v28 setWcmCellularCoexB41A1Range:2496.0, 20.0];
  [v28 setWcmCellularCoexB41A2Range:2516.0, 29.0];
  [v28 setWcmCellularScanProtectionCellFrequencies:&off_100252E98];
  [v28 setWcmCellularScanProtectionCellFrequenciesforBT:&off_100252EF8];
  [v28 setWcmCellularScanProtectionWiFiChannels:&off_100252F70];
  return [v28 setWcmWiFiScanThrottlingChannelIndices:&off_100252F88];
}

id sub_100128A78(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:-60];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-40];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-40];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-50];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-50];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:6790];
  [a1 setWcmWCI2MWSInactivityAssertJitter:192];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:500];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023DFC8];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex041_V7WiFiEnh", @"plist") options:2 format:&v73 error:&v74];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  id v33 = a1;
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  v32[1] = v32;
  __chkstk_darwin(v4, v5, v6);
  uint64_t v34 = (char *)v32 - v7 * (unint64_t)v8;
  uint64_t v9 = &v34[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v9 = 211;
  *(_OWORD *)(v9 + 4) = 0u;
  *(_OWORD *)(v9 + 20) = 0u;
  *(_OWORD *)(v9 + 36) = 0u;
  *(_OWORD *)(v9 + 52) = 0u;
  *(_OWORD *)(v9 + 68) = 0u;
  *(_OWORD *)(v9 + 84) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  unsigned __int16 v10 = (unsigned __int16)[v2 count];
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = v34 + 56;
    uint64_t v35 = v10;
    do
    {
      __int16 v71 = 0;
      char v72 = 0;
      v70[0] = 0;
      *(_DWORD *)((char *)v70 + 3) = 0;
      unsigned int v69 = [[[v2 objectAtIndex:v11] objectForKey:@"issueBand"] intValue];
      unsigned int v68 = [[[v2 objectAtIndex:v11] objectForKey:@"issueType"] intValue];
      unsigned int v67 = [[[v2 objectAtIndex:v11] objectForKey:@"isWiFiDesense"] BOOLValue];
      unsigned int v66 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v65 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v64 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v63 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v62 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v61 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v60 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v59 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap111"] intValue];
      unsigned int v58 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v57 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v56 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v55 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v54 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v53 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v52 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v51 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap111"] intValue];
      uint64_t v50 = (int)[v2 objectAtIndex:v11][@"cellTxPowerLimit"][@"intValue"];
      double v13 = (double)(int)[v2 objectAtIndex:v11][@"cellFrequencyLimitForOOB"][@"intValue"];
      double v14 = (double)(int)[v2 objectAtIndex:v11][@"cellBandwidthLimitForOOB"][@"intValue"];
      unsigned int v49 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToAvoidForCellOOB"] intValue];
      unsigned int v48 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToAvoidForCellOOB"] intValue];
      unsigned int v47 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v46 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v45 = [[[v2 objectAtIndex:v11] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned int v44 = [[[v2 objectAtIndex:v11] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned int v43 = [[[v2 objectAtIndex:v11] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned int v42 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority"] intValue];
      unsigned int v41 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority_WiFi"] intValue];
      unsigned int v40 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority_BT"] intValue];
      unsigned int v39 = [[[v2 objectAtIndex:v11] objectForKey:@"CellAntBlk"] intValue];
      unsigned int v38 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToDisableOCLCellOOB"] intValue];
      unsigned int v37 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToDisableOCLCellOOB"] intValue];
      BOOL v36 = [[[v2 objectAtIndex:v11] objectForKey:@"isWifiEnhBand"] intValue] != 0;
      unsigned __int8 v15 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToAvoidForCellOOBPHS"] intValue];
      unsigned __int8 v16 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToAvoidForCellOOBPHS"] intValue];
      unsigned __int8 v17 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii1Enabled"] BOOLValue];
      unsigned __int8 v18 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii3Enabled"] boolValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5aEnabled"] boolValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5bEnabled"] boolValue];
      unsigned __int8 v21 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5cEnabled"] boolValue];
      unsigned __int8 v22 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5dEnabled"] BOOLValue];
      unsigned int v23 = v68;
      *((_DWORD *)v12 - 14) = v69;
      *((_DWORD *)v12 - 13) = v23;
      *(v12 - 48) = v67;
      *(v12 - 43) = v66;
      *(v12 - 42) = v65;
      *(v12 - 41) = v64;
      *(v12 - 40) = v63;
      *(v12 - 39) = v62;
      *(v12 - 38) = v61;
      *(v12 - 37) = v60;
      *(v12 - 36) = v59;
      *(_DWORD *)(v12 - 47) = 0;
      *(v12 - 35) = v58;
      *(v12 - 34) = v57;
      *(v12 - 33) = v56;
      *(v12 - 32) = v55;
      *(v12 - 31) = v54;
      *(v12 - 30) = v53;
      *(v12 - 29) = v52;
      *(v12 - 28) = v51;
      *(_WORD *)(v12 - 27) = v71;
      *(v12 - 25) = v72;
      *((void *)v12 - 3) = v50;
      *((double *)v12 - 2) = v13;
      *((double *)v12 - 1) = v14;
      *uint64_t v12 = v49;
      v12[1] = v48;
      v12[2] = v47;
      void v12[3] = v46;
      unsigned int v24 = v45;
      *((_DWORD *)v12 + 1) = 0;
      *((_DWORD *)v12 + 2) = v24;
      *(void *)(v12 + 12) = 0;
      *((_WORD *)v12 + 10) = 0;
      v12[22] = v44;
      v12[23] = v43;
      *((void *)v12 + 3) = 0;
      v12[32] = 0;
      v12[33] = v42;
      v12[34] = v41;
      v12[35] = v40;
      v12[36] = 0;
      v12[37] = v39;
      v12[38] = v38;
      v12[39] = v37;
      v12[40] = v36;
      v12[41] = v15;
      v12[42] = v16;
      v12[43] = v17;
      v12[44] = v18;
      v12[45] = v19;
      v12[46] = v20;
      v12[47] = v21;
      v12[48] = v22;
      int v25 = v70[0];
      ++v11;
      *((_DWORD *)v12 + 13) = *(_DWORD *)((char *)v70 + 3);
      uint64_t v26 = v35;
      *(_DWORD *)(v12 + 49) = v25;
      v12 += 112;
    }
    while (v26 != v11);
  }
  id v27 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v28 = v33;
  [v33 setWcmWiFiCellCoexIssueTable:v27];
  id v29 = [v28 wcmWiFiCellCoexIssueTable];
  [v29 configureBy:v34];
  [v28 setWcmCellRc1CoexIssueTable:-[WCM_CellularRc1CoexIssueTable initFromPlist:]([WCM_CellularRc1CoexIssueTable alloc], "initFromPlist:", @"CoEx-Table-CellRC1-Coex002")];
  [v28 setWcmCellularCoexB7DLRange:2620.0, 40.0];
  [v28 setWcmCellularCoexB7ULRange:2500.0, 40.0];
  [v28 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v28 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v28 setWcmCellularCoexB41A1Range:2496.0, 20.0];
  [v28 setWcmCellularCoexB41A2Range:2516.0, 29.0];
  [v28 setWcmCellularScanProtectionCellFrequencies:&off_100252FE8];
  if (_os_feature_enabled_impl()) {
    uint64_t v30 = &off_100253048;
  }
  else {
    uint64_t v30 = &off_1002530A8;
  }
  [v28 setWcmCellularScanProtectionCellFrequenciesforBT:v30];
  [v28 setWcmCellularScanProtectionWiFiChannels:&off_100253108];
  [v28 setWcmCellularScanProtectionWiFiChannelsWiFiEnh:&off_100253168];
  [v28 setWcmWiFiScanThrottlingChannelIndices:0];
  return [v28 setWcmGen9rFemDefaultMode2gWiFiCellularbands:+[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100253180, @"LTE", &off_100253198, @"NR", 0)];
}

id sub_1001296B0(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:-60];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-40];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-40];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-50];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-50];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:6790];
  [a1 setWcmWCI2MWSInactivityAssertJitter:192];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:500];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023DFC8];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex042_V7WiFiEnh", @"plist") options:2 format:&v73 error:&v74];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  id v33 = a1;
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  v32[1] = v32;
  __chkstk_darwin(v4, v5, v6);
  uint64_t v34 = (char *)v32 - v7 * (unint64_t)v8;
  uint64_t v9 = &v34[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v9 = 211;
  *(_OWORD *)(v9 + 4) = 0u;
  *(_OWORD *)(v9 + 20) = 0u;
  *(_OWORD *)(v9 + 36) = 0u;
  *(_OWORD *)(v9 + 52) = 0u;
  *(_OWORD *)(v9 + 68) = 0u;
  *(_OWORD *)(v9 + 84) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  unsigned __int16 v10 = (unsigned __int16)[v2 count];
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = v34 + 56;
    uint64_t v35 = v10;
    do
    {
      __int16 v71 = 0;
      char v72 = 0;
      v70[0] = 0;
      *(_DWORD *)((char *)v70 + 3) = 0;
      unsigned int v69 = [[[v2 objectAtIndex:v11] objectForKey:@"issueBand"] intValue];
      unsigned int v68 = [[[v2 objectAtIndex:v11] objectForKey:@"issueType"] intValue];
      unsigned int v67 = [[[v2 objectAtIndex:v11] objectForKey:@"isWiFiDesense"] BOOLValue];
      unsigned int v66 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v65 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v64 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v63 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v62 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v61 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v60 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v59 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap111"] intValue];
      unsigned int v58 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v57 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v56 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v55 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v54 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v53 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v52 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v51 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap111"] intValue];
      uint64_t v50 = [[[v2 objectAtIndex:v11] objectForKey:@"cellTxPowerLimit"] intValue];
      double v13 = (double)(int)[v2 objectAtIndex:v11][@"cellFrequencyLimitForOOB"][@"intValue"];
      double v14 = (double)(int)[v2 objectAtIndex:v11][@"cellBandwidthLimitForOOB"][@"intValue"];
      unsigned int v49 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToAvoidForCellOOB"] intValue];
      unsigned int v48 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToAvoidForCellOOB"] intValue];
      unsigned int v47 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v46 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v45 = [[[v2 objectAtIndex:v11] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned int v44 = [[[v2 objectAtIndex:v11] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned int v43 = [[[v2 objectAtIndex:v11] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned int v42 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority"] intValue];
      unsigned int v41 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority_WiFi"] intValue];
      unsigned int v40 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority_BT"] intValue];
      unsigned int v39 = [[[v2 objectAtIndex:v11] objectForKey:@"CellAntBlk"] intValue];
      unsigned int v38 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToDisableOCLCellOOB"] intValue];
      unsigned int v37 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToDisableOCLCellOOB"] intValue];
      BOOL v36 = [[[v2 objectAtIndex:v11] objectForKey:@"isWifiEnhBand"] intValue] != 0;
      unsigned __int8 v15 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToAvoidForCellOOBPHS"] intValue];
      unsigned __int8 v16 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToAvoidForCellOOBPHS"] intValue];
      unsigned __int8 v17 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii1Enabled"] BOOLValue];
      unsigned __int8 v18 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii3Enabled"] boolValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5aEnabled"] BOOLValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5bEnabled"] boolValue];
      unsigned __int8 v21 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5cEnabled"] boolValue];
      unsigned __int8 v22 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5dEnabled"] boolValue];
      unsigned int v23 = v68;
      *((_DWORD *)v12 - 14) = v69;
      *((_DWORD *)v12 - 13) = v23;
      *(v12 - 48) = v67;
      *(v12 - 43) = v66;
      *(v12 - 42) = v65;
      *(v12 - 41) = v64;
      *(v12 - 40) = v63;
      *(v12 - 39) = v62;
      *(v12 - 38) = v61;
      *(v12 - 37) = v60;
      *(v12 - 36) = v59;
      *(_DWORD *)(v12 - 47) = 0;
      *(v12 - 35) = v58;
      *(v12 - 34) = v57;
      *(v12 - 33) = v56;
      *(v12 - 32) = v55;
      *(v12 - 31) = v54;
      *(v12 - 30) = v53;
      *(v12 - 29) = v52;
      *(v12 - 28) = v51;
      *(_WORD *)(v12 - 27) = v71;
      *(v12 - 25) = v72;
      *((void *)v12 - 3) = v50;
      *((double *)v12 - 2) = v13;
      *((double *)v12 - 1) = v14;
      *uint64_t v12 = v49;
      v12[1] = v48;
      v12[2] = v47;
      void v12[3] = v46;
      unsigned int v24 = v45;
      *((_DWORD *)v12 + 1) = 0;
      *((_DWORD *)v12 + 2) = v24;
      *(void *)(v12 + 12) = 0;
      *((_WORD *)v12 + 10) = 0;
      v12[22] = v44;
      v12[23] = v43;
      *((void *)v12 + 3) = 0;
      v12[32] = 0;
      v12[33] = v42;
      v12[34] = v41;
      v12[35] = v40;
      v12[36] = 0;
      v12[37] = v39;
      v12[38] = v38;
      v12[39] = v37;
      v12[40] = v36;
      v12[41] = v15;
      v12[42] = v16;
      v12[43] = v17;
      v12[44] = v18;
      v12[45] = v19;
      v12[46] = v20;
      v12[47] = v21;
      v12[48] = v22;
      int v25 = v70[0];
      ++v11;
      *((_DWORD *)v12 + 13) = *(_DWORD *)((char *)v70 + 3);
      uint64_t v26 = v35;
      *(_DWORD *)(v12 + 49) = v25;
      v12 += 112;
    }
    while (v26 != v11);
  }
  id v27 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v28 = v33;
  [v33 setWcmWiFiCellCoexIssueTable:v27];
  id v29 = [v28 wcmWiFiCellCoexIssueTable];
  [v29 configureBy:v34];
  [v28 setWcmCellRc1CoexIssueTable:[[WCM_CellularRc1CoexIssueTable alloc] initFromPlist:@"CoEx-Table-CellRC1-Coex004"]];
  [v28 setWcmCellularCoexB7DLRange:2620.0, 40.0];
  [v28 setWcmCellularCoexB7ULRange:2500.0, 40.0];
  [v28 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v28 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v28 setWcmCellularCoexB41A1Range:2496.0, 20.0];
  [v28 setWcmCellularCoexB41A2Range:2516.0, 29.0];
  [v28 setWcmCellularScanProtectionCellFrequencies:&off_1002531F8];
  if (_os_feature_enabled_impl()) {
    uint64_t v30 = &off_100253258;
  }
  else {
    uint64_t v30 = &off_1002532B8;
  }
  [v28 setWcmCellularScanProtectionCellFrequenciesforBT:v30];
  [v28 setWcmCellularScanProtectionWiFiChannels:&off_100253318];
  [v28 setWcmCellularScanProtectionWiFiChannelsWiFiEnh:&off_100253378];
  [v28 setWcmWiFiScanThrottlingChannelIndices:0];
  return [v28 setWcmGen9rFemDefaultMode2gWiFiCellularbands:+[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100253390, @"LTE", &off_1002533A8, @"NR", 0)];
}

id sub_10012A2E8(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:-60];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-40];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-40];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-50];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-50];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:6790];
  [a1 setWcmWCI2MWSInactivityAssertJitter:192];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:500];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023DFC8];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex044_V7WiFiEnh", @"plist") options:2 format:&v73 error:&v74];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  id v33 = a1;
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  v32[1] = v32;
  __chkstk_darwin(v4, v5, v6);
  uint64_t v34 = (char *)v32 - v7 * (unint64_t)v8;
  uint64_t v9 = &v34[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v9 = 211;
  *(_OWORD *)(v9 + 4) = 0u;
  *(_OWORD *)(v9 + 20) = 0u;
  *(_OWORD *)(v9 + 36) = 0u;
  *(_OWORD *)(v9 + 52) = 0u;
  *(_OWORD *)(v9 + 68) = 0u;
  *(_OWORD *)(v9 + 84) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  unsigned __int16 v10 = (unsigned __int16)[v2 count];
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = v34 + 56;
    uint64_t v35 = v10;
    do
    {
      __int16 v71 = 0;
      char v72 = 0;
      v70[0] = 0;
      *(_DWORD *)((char *)v70 + 3) = 0;
      unsigned int v69 = [[[v2 objectAtIndex:v11] objectForKey:@"issueBand"] intValue];
      unsigned int v68 = [[[v2 objectAtIndex:v11] objectForKey:@"issueType"] intValue];
      unsigned int v67 = [[[v2 objectAtIndex:v11] objectForKey:@"isWiFiDesense"] boolValue];
      unsigned int v66 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v65 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v64 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v63 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v62 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v61 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v60 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v59 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap111"] intValue];
      unsigned int v58 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v57 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v56 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v55 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v54 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v53 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v52 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v51 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap111"] intValue];
      uint64_t v50 = [[[v2 objectAtIndex:v11] objectForKey:@"cellTxPowerLimit"] intValue];
      double v13 = (double)(int)[[[v2 objectAtIndex:v11] objectForKey:@"cellFrequencyLimitForOOB"] intValue];
      double v14 = (double)(int)[v2 objectAtIndex:v11][@"cellBandwidthLimitForOOB"][@"intValue"];
      unsigned int v49 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToAvoidForCellOOB"] intValue];
      unsigned int v48 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToAvoidForCellOOB"] intValue];
      unsigned int v47 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v46 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v45 = [[[v2 objectAtIndex:v11] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned int v44 = [[[v2 objectAtIndex:v11] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned int v43 = [[[v2 objectAtIndex:v11] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned int v42 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority"] intValue];
      unsigned int v41 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority_WiFi"] intValue];
      unsigned int v40 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority_BT"] intValue];
      unsigned int v39 = [[[v2 objectAtIndex:v11] objectForKey:@"CellAntBlk"] intValue];
      unsigned int v38 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToDisableOCLCellOOB"] intValue];
      unsigned int v37 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToDisableOCLCellOOB"] intValue];
      BOOL v36 = [[[v2 objectAtIndex:v11] objectForKey:@"isWifiEnhBand"] intValue] != 0;
      unsigned __int8 v15 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToAvoidForCellOOBPHS"] intValue];
      unsigned __int8 v16 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToAvoidForCellOOBPHS"] intValue];
      unsigned __int8 v17 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii1Enabled"] BOOLValue];
      unsigned __int8 v18 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii3Enabled"] BOOLValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5aEnabled"] BOOLValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5bEnabled"] boolValue];
      unsigned __int8 v21 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5cEnabled"] BOOLValue];
      unsigned __int8 v22 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5dEnabled"] BOOLValue];
      unsigned int v23 = v68;
      *((_DWORD *)v12 - 14) = v69;
      *((_DWORD *)v12 - 13) = v23;
      *(v12 - 48) = v67;
      *(v12 - 43) = v66;
      *(v12 - 42) = v65;
      *(v12 - 41) = v64;
      *(v12 - 40) = v63;
      *(v12 - 39) = v62;
      *(v12 - 38) = v61;
      *(v12 - 37) = v60;
      *(v12 - 36) = v59;
      *(_DWORD *)(v12 - 47) = 0;
      *(v12 - 35) = v58;
      *(v12 - 34) = v57;
      *(v12 - 33) = v56;
      *(v12 - 32) = v55;
      *(v12 - 31) = v54;
      *(v12 - 30) = v53;
      *(v12 - 29) = v52;
      *(v12 - 28) = v51;
      *(_WORD *)(v12 - 27) = v71;
      *(v12 - 25) = v72;
      *((void *)v12 - 3) = v50;
      *((double *)v12 - 2) = v13;
      *((double *)v12 - 1) = v14;
      *uint64_t v12 = v49;
      v12[1] = v48;
      v12[2] = v47;
      void v12[3] = v46;
      unsigned int v24 = v45;
      *((_DWORD *)v12 + 1) = 0;
      *((_DWORD *)v12 + 2) = v24;
      *(void *)(v12 + 12) = 0;
      *((_WORD *)v12 + 10) = 0;
      v12[22] = v44;
      v12[23] = v43;
      *((void *)v12 + 3) = 0;
      v12[32] = 0;
      v12[33] = v42;
      v12[34] = v41;
      v12[35] = v40;
      v12[36] = 0;
      v12[37] = v39;
      v12[38] = v38;
      v12[39] = v37;
      v12[40] = v36;
      v12[41] = v15;
      v12[42] = v16;
      v12[43] = v17;
      v12[44] = v18;
      v12[45] = v19;
      v12[46] = v20;
      v12[47] = v21;
      v12[48] = v22;
      int v25 = v70[0];
      ++v11;
      *((_DWORD *)v12 + 13) = *(_DWORD *)((char *)v70 + 3);
      uint64_t v26 = v35;
      *(_DWORD *)(v12 + 49) = v25;
      v12 += 112;
    }
    while (v26 != v11);
  }
  id v27 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v28 = v33;
  [v33 setWcmWiFiCellCoexIssueTable:v27];
  id v29 = [v28 wcmWiFiCellCoexIssueTable];
  [v29 configureBy:v34];
  [v28 setWcmCellRc1CoexIssueTable:[[WCM_CellularRc1CoexIssueTable alloc] initFromPlist:@"CoEx-Table-CellRC1-Coex006"]];
  [v28 setWcmCellularCoexB7DLRange:2620.0, 40.0];
  [v28 setWcmCellularCoexB7ULRange:2500.0, 40.0];
  [v28 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v28 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v28 setWcmCellularCoexB41A1Range:2496.0, 20.0];
  [v28 setWcmCellularCoexB41A2Range:2516.0, 29.0];
  [v28 setWcmCellularScanProtectionCellFrequencies:&off_100253408];
  if (_os_feature_enabled_impl()) {
    uint64_t v30 = &off_100253468;
  }
  else {
    uint64_t v30 = &off_1002534C8;
  }
  [v28 setWcmCellularScanProtectionCellFrequenciesforBT:v30];
  [v28 setWcmCellularScanProtectionWiFiChannels:&off_100253528];
  [v28 setWcmCellularScanProtectionWiFiChannelsWiFiEnh:&off_100253588];
  [v28 setWcmWiFiScanThrottlingChannelIndices:0];
  return [v28 setWcmGen9rFemDefaultMode2gWiFiCellularbands:+[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002535A0, @"LTE", &off_1002535B8, @"NR", 0)];
}

id sub_10012AF20(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:-60];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-40];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-40];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-50];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-50];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:6790];
  [a1 setWcmWCI2MWSInactivityAssertJitter:192];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:500];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023DFC8];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex043_V7WiFiEnh", @"plist") options:2 format:&v73 error:&v74];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  id v33 = a1;
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  v32[1] = v32;
  __chkstk_darwin(v4, v5, v6);
  uint64_t v34 = (char *)v32 - v7 * (unint64_t)v8;
  uint64_t v9 = &v34[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v9 = 211;
  *(_OWORD *)(v9 + 4) = 0u;
  *(_OWORD *)(v9 + 20) = 0u;
  *(_OWORD *)(v9 + 36) = 0u;
  *(_OWORD *)(v9 + 52) = 0u;
  *(_OWORD *)(v9 + 68) = 0u;
  *(_OWORD *)(v9 + 84) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  unsigned __int16 v10 = (unsigned __int16)[v2 count];
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = v34 + 56;
    uint64_t v35 = v10;
    do
    {
      __int16 v71 = 0;
      char v72 = 0;
      v70[0] = 0;
      *(_DWORD *)((char *)v70 + 3) = 0;
      unsigned int v69 = [[[v2 objectAtIndex:v11] objectForKey:@"issueBand"] intValue];
      unsigned int v68 = [[[v2 objectAtIndex:v11] objectForKey:@"issueType"] intValue];
      unsigned int v67 = [[[v2 objectAtIndex:v11] objectForKey:@"isWiFiDesense"] BOOLValue];
      unsigned int v66 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v65 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v64 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v63 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v62 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v61 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v60 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v59 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiUlAntennaBitmapOnCellAntBitmap111"] intValue];
      unsigned int v58 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap000"] intValue];
      unsigned int v57 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap001"] intValue];
      unsigned int v56 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap010"] intValue];
      unsigned int v55 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap011"] intValue];
      unsigned int v54 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap100"] intValue];
      unsigned int v53 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap101"] intValue];
      unsigned int v52 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap110"] intValue];
      unsigned int v51 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiDlAntennaBitmapOnCellAntBitmap111"] intValue];
      uint64_t v50 = (int)[v2 objectAtIndex:v11 objectForKey:@"cellTxPowerLimit"] intValue];
      double v13 = (double)(int)[[[v2 objectAtIndex:v11] objectForKey:@"cellFrequencyLimitForOOB"] intValue];
      double v14 = (double)(int)[v2 objectAtIndex:v11][@"cellBandwidthLimitForOOB"][@"intValue"];
      unsigned int v49 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToAvoidForCellOOB"] intValue];
      unsigned int v48 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToAvoidForCellOOB"] intValue];
      unsigned int v47 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v46 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToDoAntennaSelectionForCellOOB"] intValue];
      unsigned int v45 = [[[v2 objectAtIndex:v11] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned int v44 = [[[v2 objectAtIndex:v11] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned int v43 = [[[v2 objectAtIndex:v11] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned int v42 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority"] intValue];
      unsigned int v41 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority_WiFi"] intValue];
      unsigned int v40 = [[[v2 objectAtIndex:v11] objectForKey:@"ulcaPriority_BT"] intValue];
      unsigned int v39 = [[[v2 objectAtIndex:v11] objectForKey:@"CellAntBlk"] intValue];
      unsigned int v38 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToDisableOCLCellOOB"] intValue];
      unsigned int v37 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToDisableOCLCellOOB"] intValue];
      BOOL v36 = [[[v2 objectAtIndex:v11] objectForKey:@"isWifiEnhBand"] intValue] != 0;
      unsigned __int8 v15 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiFirstChannelToAvoidForCellOOBPHS"] intValue];
      unsigned __int8 v16 = [[[v2 objectAtIndex:v11] objectForKey:@"wifiLastChannelToAvoidForCellOOBPHS"] intValue];
      unsigned __int8 v17 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii1Enabled"] BOOLValue];
      unsigned __int8 v18 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii3Enabled"] BOOLValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5aEnabled"] BOOLValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5bEnabled"] boolValue];
      unsigned __int8 v21 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5cEnabled"] BOOLValue];
      unsigned __int8 v22 = [[[v2 objectAtIndex:v11] objectForKey:@"hfbtAntBlkBandUnii5dEnabled"] BOOLValue];
      unsigned int v23 = v68;
      *((_DWORD *)v12 - 14) = v69;
      *((_DWORD *)v12 - 13) = v23;
      *(v12 - 48) = v67;
      *(v12 - 43) = v66;
      *(v12 - 42) = v65;
      *(v12 - 41) = v64;
      *(v12 - 40) = v63;
      *(v12 - 39) = v62;
      *(v12 - 38) = v61;
      *(v12 - 37) = v60;
      *(v12 - 36) = v59;
      *(_DWORD *)(v12 - 47) = 0;
      *(v12 - 35) = v58;
      *(v12 - 34) = v57;
      *(v12 - 33) = v56;
      *(v12 - 32) = v55;
      *(v12 - 31) = v54;
      *(v12 - 30) = v53;
      *(v12 - 29) = v52;
      *(v12 - 28) = v51;
      *(_WORD *)(v12 - 27) = v71;
      *(v12 - 25) = v72;
      *((void *)v12 - 3) = v50;
      *((double *)v12 - 2) = v13;
      *((double *)v12 - 1) = v14;
      *uint64_t v12 = v49;
      v12[1] = v48;
      v12[2] = v47;
      void v12[3] = v46;
      unsigned int v24 = v45;
      *((_DWORD *)v12 + 1) = 0;
      *((_DWORD *)v12 + 2) = v24;
      *(void *)(v12 + 12) = 0;
      *((_WORD *)v12 + 10) = 0;
      v12[22] = v44;
      v12[23] = v43;
      *((void *)v12 + 3) = 0;
      v12[32] = 0;
      v12[33] = v42;
      v12[34] = v41;
      v12[35] = v40;
      v12[36] = 0;
      v12[37] = v39;
      v12[38] = v38;
      v12[39] = v37;
      v12[40] = v36;
      v12[41] = v15;
      v12[42] = v16;
      v12[43] = v17;
      v12[44] = v18;
      v12[45] = v19;
      v12[46] = v20;
      v12[47] = v21;
      v12[48] = v22;
      int v25 = v70[0];
      ++v11;
      *((_DWORD *)v12 + 13) = *(_DWORD *)((char *)v70 + 3);
      uint64_t v26 = v35;
      *(_DWORD *)(v12 + 49) = v25;
      v12 += 112;
    }
    while (v26 != v11);
  }
  id v27 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v28 = v33;
  [v33 setWcmWiFiCellCoexIssueTable:v27];
  id v29 = [v28 wcmWiFiCellCoexIssueTable];
  [v29 configureBy:v34];
  [v28 setWcmCellRc1CoexIssueTable:-[WCM_CellularRc1CoexIssueTable initFromPlist:]([WCM_CellularRc1CoexIssueTable alloc], "initFromPlist:", @"CoEx-Table-CellRC1-Coex005")];
  [v28 setWcmCellularCoexB7DLRange:2620.0, 40.0];
  [v28 setWcmCellularCoexB7ULRange:2500.0, 40.0];
  [v28 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v28 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v28 setWcmCellularCoexB41A1Range:2496.0, 20.0];
  [v28 setWcmCellularCoexB41A2Range:2516.0, 29.0];
  [v28 setWcmCellularScanProtectionCellFrequencies:&off_100253618];
  if (_os_feature_enabled_impl()) {
    uint64_t v30 = &off_100253678;
  }
  else {
    uint64_t v30 = &off_1002536D8;
  }
  [v28 setWcmCellularScanProtectionCellFrequenciesforBT:v30];
  [v28 setWcmCellularScanProtectionWiFiChannels:&off_100253738];
  [v28 setWcmCellularScanProtectionWiFiChannelsWiFiEnh:&off_100253798];
  [v28 setWcmWiFiScanThrottlingChannelIndices:0];
  return [v28 setWcmGen9rFemDefaultMode2gWiFiCellularbands:+[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002537B0, @"LTE", &off_1002537C8, @"NR", 0)];
}

id sub_10012BB58(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiCellCoexIssueTable:objc_alloc_init(WCM_WiFiCellCoexIssueBandTable)];
  [objc_msgSend(a1, "wcmWiFiCellCoexIssueTable") configureBy:&unk_1001FEE60];
  [a1 setWcmCellularCoexB7DLRange:2620.0, 40.0];
  [a1 setWcmCellularCoexB7ULRange:2500.0, 40.0];
  [a1 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [a1 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [a1 setWcmCellularCoexB41A1Range:2496.0, 20.0];
  [a1 setWcmCellularCoexB41A2Range:2516.0, 29.0];
  [a1 setWcmCellularScanProtectionCellFrequencies:&off_100253828];

  return [a1 setWcmCellularScanProtectionWiFiChannels:&off_100253888];
}

id sub_10012BC64(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWCI2FrameSyncAssertOffset:1750];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-150];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-150];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-250];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-250];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:0];
  [a1 setWcmWCI2MWSInactivityAssertJitter:4];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:0];
  +[WCM_Logging logLevel:3 message:@"DLDebug_ Applying K Parameters"];
  [a1 setWcmWiFiCellCoexIssueTable:objc_alloc_init(WCM_WiFiCellCoexIssueBandTable)];
  [objc_msgSend(a1, "wcmWiFiCellCoexIssueTable") configureBy:&unk_1001FEED0];
  [a1 setWcmCellularCoexB7DLRange:2620.0, 20.0];
  [a1 setWcmCellularCoexB7ULRange:2500.0, 20.0];
  [a1 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [a1 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [a1 setWcmCellularCoexB41A1Range:2496.0, 10.0];
  [a1 setWcmCellularCoexB41A2Range:2506.0, 59.0];
  [a1 setWcmCellularScanProtectionCellFrequencies:&off_1002538E8];
  [a1 setWcmCellularScanProtectionWiFiChannels:&off_100253948];
  [a1 setWcmCellularScanProtectionWiFiMaxDuration:&off_10023E0A0];
  [a1 setWcmCellularWCI2ModePolicy:[NSNumber numberWithUnsignedLong:8]];
  [a1 setWcmCellularWCI2ModePowerThreshold:[NSNumber numberWithInt:4294967288]];
  [a1 setWcmCellularWCI2ModeRBThresholdHigh:[NSNumber numberWithInt:0]];
  [a1 setWcmCellularWCI2ModeRBThresholdLow:[NSNumber numberWithInt:0]];
  [a1 setWcmCellularWCI2ModeLTETxDenial:[NSNumber numberWithInt:10]];
  [a1 setWcmCellularWCI2ModeMaxAllowedFrameDenials:[NSNumber numberWithInt:40]];
  id v2 = +[NSNumber numberWithInt:200];

  return [a1 setWcmCellularWCI2ModeFrameDenialWindow:v2];
}

id sub_10012BF04(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWCI2FrameSyncAssertOffset:1750];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-150];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-150];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-250];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-250];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:0];
  [a1 setWcmWCI2MWSInactivityAssertJitter:4];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:0];
  +[WCM_Logging logLevel:3 message:@"DLDebug_ Applying K Parameters"];
  [a1 setWcmWiFiCellCoexIssueTable:objc_alloc_init(WCM_WiFiCellCoexIssueBandTable)];
  [objc_msgSend(a1, "wcmWiFiCellCoexIssueTable") configureBy:&unk_1001FF800];
  [a1 setWcmCellularCoexB7DLRange:2620.0, 20.0];
  [a1 setWcmCellularCoexB7ULRange:2500.0, 20.0];
  [a1 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [a1 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [a1 setWcmCellularCoexB41A1Range:2496.0, 10.0];
  [a1 setWcmCellularCoexB41A2Range:2506.0, 59.0];
  [a1 setWcmCellularScanProtectionCellFrequencies:&off_1002539A8];
  [a1 setWcmCellularScanProtectionWiFiChannels:&off_100253A08];
  [a1 setWcmCellularScanProtectionWiFiMaxDuration:&off_10023E0A0];
  [a1 setWcmCellularWCI2ModePolicy:[NSNumber numberWithUnsignedLong:8]];
  [a1 setWcmCellularWCI2ModePowerThreshold:[NSNumber numberWithInt:4294967288]];
  [a1 setWcmCellularWCI2ModeRBThresholdHigh:[NSNumber numberWithInt:0]];
  [a1 setWcmCellularWCI2ModeRBThresholdLow:[NSNumber numberWithInt:0]];
  [a1 setWcmCellularWCI2ModeLTETxDenial:[NSNumber numberWithInt:10]];
  [a1 setWcmCellularWCI2ModeMaxAllowedFrameDenials:[NSNumber numberWithInt:40]];
  id v2 = +[NSNumber numberWithInt:200];

  return [a1 setWcmCellularWCI2ModeFrameDenialWindow:v2];
}

id sub_10012C1A4(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWCI2FrameSyncAssertOffset:1750];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-150];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-150];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-250];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-250];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:0];
  [a1 setWcmWCI2MWSInactivityAssertJitter:4];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:0];
  +[WCM_Logging logLevel:3 message:@"DLDebug_ Applying K Parameters"];
  [a1 setWcmWiFiCellCoexIssueTable:objc_alloc_init(WCM_WiFiCellCoexIssueBandTable)];
  [objc_msgSend(a1, "wcmWiFiCellCoexIssueTable") configureBy:&unk_100200130];
  [a1 setWcmCellularCoexB7DLRange:2620.0, 20.0];
  [a1 setWcmCellularCoexB7ULRange:2500.0, 20.0];
  [a1 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [a1 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [a1 setWcmCellularCoexB41A1Range:2496.0, 10.0];
  [a1 setWcmCellularCoexB41A2Range:2506.0, 59.0];
  [a1 setWcmCellularScanProtectionCellFrequencies:&off_100253A68];
  [a1 setWcmCellularScanProtectionWiFiChannels:&off_100253AC8];
  [a1 setWcmCellularScanProtectionWiFiMaxDuration:&off_10023E0A0];
  [a1 setWcmCellularWCI2ModePolicy:[NSNumber numberWithUnsignedLong:8]];
  [a1 setWcmCellularWCI2ModePowerThreshold:[NSNumber numberWithInt:4294967288]];
  [a1 setWcmCellularWCI2ModeRBThresholdHigh:[NSNumber numberWithInt:0]];
  [a1 setWcmCellularWCI2ModeRBThresholdLow:[NSNumber numberWithInt:0]];
  [a1 setWcmCellularWCI2ModeLTETxDenial:+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10)];
  [a1 setWcmCellularWCI2ModeMaxAllowedFrameDenials:[NSNumber numberWithInt:40]];
  id v2 = +[NSNumber numberWithInt:200];

  return [a1 setWcmCellularWCI2ModeFrameDenialWindow:v2];
}

id sub_10012C444(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWCI2FrameSyncAssertOffset:1750];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-150];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-150];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-250];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-250];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:0];
  [a1 setWcmWCI2MWSInactivityAssertJitter:4];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:0];
  +[WCM_Logging logLevel:3 message:@"DLDebug_ Applying K Parameters"];
  [a1 setWcmWiFiCellCoexIssueTable:objc_alloc_init(WCM_WiFiCellCoexIssueBandTable)];
  [objc_msgSend(a1, "wcmWiFiCellCoexIssueTable") configureBy:&unk_100200AD0];
  [a1 setWcmCellularCoexB7DLRange:2620.0, 20.0];
  [a1 setWcmCellularCoexB7ULRange:2500.0, 20.0];
  [a1 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [a1 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [a1 setWcmCellularCoexB41A1Range:2496.0, 10.0];
  [a1 setWcmCellularCoexB41A2Range:2506.0, 59.0];
  [a1 setWcmCellularScanProtectionCellFrequencies:&off_100253B28];
  [a1 setWcmCellularScanProtectionWiFiChannels:&off_100253B88];
  [a1 setWcmCellularScanProtectionWiFiMaxDuration:&off_10023E0A0];
  [a1 setWcmCellularWCI2ModePolicy:[NSNumber numberWithUnsignedLong:8]];
  [a1 setWcmCellularWCI2ModePowerThreshold:[NSNumber numberWithInt:4294967288]];
  [a1 setWcmCellularWCI2ModeRBThresholdHigh:[NSNumber numberWithInt:0]];
  [a1 setWcmCellularWCI2ModeRBThresholdLow:[NSNumber numberWithInt:0]];
  [a1 setWcmCellularWCI2ModeLTETxDenial:[NSNumber numberWithInt:10]];
  [a1 setWcmCellularWCI2ModeMaxAllowedFrameDenials:[NSNumber numberWithInt:40]];
  id v2 = +[NSNumber numberWithInt:200];

  return [a1 setWcmCellularWCI2ModeFrameDenialWindow:v2];
}

id sub_10012C6E4(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWCI2FrameSyncAssertOffset:1750];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-150];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-150];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-250];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-250];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:0];
  [a1 setWcmWCI2MWSInactivityAssertJitter:4];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:0];
  +[WCM_Logging logLevel:3 message:@"DLDebug_ Applying K Parameters"];
  [a1 setWcmWiFiCellCoexIssueTable:objc_alloc_init(WCM_WiFiCellCoexIssueBandTable)];
  [objc_msgSend(a1, "wcmWiFiCellCoexIssueTable") configureBy:&unk_100201470];
  [a1 setWcmCellularCoexB7DLRange:2620.0, 20.0];
  [a1 setWcmCellularCoexB7ULRange:2500.0, 20.0];
  [a1 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [a1 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [a1 setWcmCellularCoexB41A1Range:2496.0, 10.0];
  [a1 setWcmCellularCoexB41A2Range:2506.0, 59.0];
  [a1 setWcmCellularScanProtectionCellFrequencies:&off_100253BE8];
  [a1 setWcmCellularScanProtectionWiFiChannels:&off_100253C48];
  [a1 setWcmCellularScanProtectionWiFiMaxDuration:&off_10023E0A0];
  [a1 setWcmCellularWCI2ModePolicy:[NSNumber numberWithUnsignedLong:8]];
  [a1 setWcmCellularWCI2ModePowerThreshold:[NSNumber numberWithInt:4294967288]];
  [a1 setWcmCellularWCI2ModeRBThresholdHigh:[NSNumber numberWithInt:0]];
  [a1 setWcmCellularWCI2ModeRBThresholdLow:[NSNumber numberWithInt:0]];
  [a1 setWcmCellularWCI2ModeLTETxDenial:[NSNumber numberWithInt:10]];
  [a1 setWcmCellularWCI2ModeMaxAllowedFrameDenials:+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 40)];
  id v2 = +[NSNumber numberWithInt:200];

  return [a1 setWcmCellularWCI2ModeFrameDenialWindow:v2];
}

id sub_10012C984(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWCI2FrameSyncAssertOffset:1750];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-150];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-150];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-250];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-250];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:0];
  [a1 setWcmWCI2MWSInactivityAssertJitter:4];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:0];
  +[WCM_Logging logLevel:3 message:@"DLDebug_ Applying K Parameters"];
  [a1 setWcmWiFiCellCoexIssueTable:objc_alloc_init(WCM_WiFiCellCoexIssueBandTable)];
  [objc_msgSend(a1, "wcmWiFiCellCoexIssueTable") configureBy:&unk_100201E10];
  [a1 setWcmCellularCoexB7DLRange:2620.0, 20.0];
  [a1 setWcmCellularCoexB7ULRange:2500.0, 20.0];
  [a1 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [a1 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [a1 setWcmCellularCoexB41A1Range:2496.0, 10.0];
  [a1 setWcmCellularCoexB41A2Range:2506.0, 59.0];
  [a1 setWcmCellularScanProtectionCellFrequencies:&off_100253CA8];
  [a1 setWcmCellularScanProtectionWiFiChannels:&off_100253D08];
  [a1 setWcmCellularScanProtectionWiFiMaxDuration:&off_10023E0A0];
  [a1 setWcmCellularWCI2ModePolicy:[NSNumber numberWithUnsignedLong:8]];
  [a1 setWcmCellularWCI2ModePowerThreshold:[NSNumber numberWithInt:4294967288]];
  [a1 setWcmCellularWCI2ModeRBThresholdHigh:[NSNumber numberWithInt:0]];
  [a1 setWcmCellularWCI2ModeRBThresholdLow:[NSNumber numberWithInt:0]];
  [a1 setWcmCellularWCI2ModeLTETxDenial:[NSNumber numberWithInt:10]];
  [a1 setWcmCellularWCI2ModeMaxAllowedFrameDenials:[NSNumber numberWithInt:40]];
  id v2 = +[NSNumber numberWithInt:200];

  return [a1 setWcmCellularWCI2ModeFrameDenialWindow:v2];
}

id sub_10012CC24(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWCI2FrameSyncAssertOffset:1750];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-150];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-150];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-250];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-250];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:0];
  [a1 setWcmWCI2MWSInactivityAssertJitter:4];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:0];
  +[WCM_Logging logLevel:3 message:@"DLDebug_ Applying K Parameters"];
  [a1 setWcmWiFiCellCoexIssueTable:objc_alloc_init(WCM_WiFiCellCoexIssueBandTable)];
  [objc_msgSend(a1, "wcmWiFiCellCoexIssueTable") configureBy:&unk_1002027B0];
  [a1 setWcmCellRc1CoexIssueTable:[[WCM_CellularRc1CoexIssueTable alloc] initFromPlist:@"CoEx-Table-CellRC1-Coex003"]];
  [a1 setWcmCellularCoexB7DLRange:2620.0, 20.0];
  [a1 setWcmCellularCoexB7ULRange:2500.0, 20.0];
  [a1 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [a1 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [a1 setWcmCellularCoexB41A1Range:2496.0, 10.0];
  [a1 setWcmCellularCoexB41A2Range:2506.0, 59.0];
  [a1 setWcmCellularScanProtectionCellFrequencies:&off_100253D68];
  [a1 setWcmCellularScanProtectionWiFiChannels:&off_100253DC8];
  [a1 setWcmCellularScanProtectionWiFiMaxDuration:&off_10023E0A0];
  [a1 setWcmCellularWCI2ModePolicy:[NSNumber numberWithUnsignedLong:8]];
  [a1 setWcmCellularWCI2ModePowerThreshold:[NSNumber numberWithInt:4294967288]];
  [a1 setWcmCellularWCI2ModeRBThresholdHigh:[NSNumber numberWithInt:0]];
  [a1 setWcmCellularWCI2ModeRBThresholdLow:[NSNumber numberWithInt:0]];
  [a1 setWcmCellularWCI2ModeLTETxDenial:[NSNumber numberWithInt:10]];
  [a1 setWcmCellularWCI2ModeMaxAllowedFrameDenials:+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 40)];
  id v2 = +[NSNumber numberWithInt:200];

  return [a1 setWcmCellularWCI2ModeFrameDenialWindow:v2];
}

id sub_10012CEE8(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWCI2FrameSyncAssertOffset:1750];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-150];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-150];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-250];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-250];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:0];
  [a1 setWcmWCI2MWSInactivityAssertJitter:4];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:0];
  +[WCM_Logging logLevel:3 message:@"DLDebug_ Applying K Parameters"];
  [a1 setWcmWiFiCellCoexIssueTable:objc_alloc_init(WCM_WiFiCellCoexIssueBandTable)];
  [objc_msgSend(a1, "wcmWiFiCellCoexIssueTable") configureBy:&unk_100203AF0];
  [a1 setWcmCellRc1CoexIssueTable:[[WCM_CellularRc1CoexIssueTable alloc] initFromPlist:@"CoEx-Table-CellRC1-Coex003"]];
  [a1 setWcmCellularCoexB7DLRange:2620.0, 20.0];
  [a1 setWcmCellularCoexB7ULRange:2500.0, 20.0];
  [a1 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [a1 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [a1 setWcmCellularCoexB41A1Range:2496.0, 10.0];
  [a1 setWcmCellularCoexB41A2Range:2506.0, 59.0];
  [a1 setWcmCellularScanProtectionCellFrequencies:&off_100253E28];
  [a1 setWcmCellularScanProtectionWiFiChannels:&off_100253E88];
  [a1 setWcmCellularScanProtectionWiFiMaxDuration:&off_10023E0A0];
  [a1 setWcmCellularWCI2ModePolicy:+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", 8)];
  [a1 setWcmCellularWCI2ModePowerThreshold:[NSNumber numberWithInt:4294967288]];
  [a1 setWcmCellularWCI2ModeRBThresholdHigh:[NSNumber numberWithInt:0]];
  [a1 setWcmCellularWCI2ModeRBThresholdLow:[NSNumber numberWithInt:0]];
  [a1 setWcmCellularWCI2ModeLTETxDenial:[NSNumber numberWithInt:10]];
  [a1 setWcmCellularWCI2ModeMaxAllowedFrameDenials:[NSNumber numberWithInt:40]];
  id v2 = +[NSNumber numberWithInt:200];

  return [a1 setWcmCellularWCI2ModeFrameDenialWindow:v2];
}

id sub_10012D1AC(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWCI2FrameSyncAssertOffset:1750];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-150];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-150];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-250];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-250];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:0];
  [a1 setWcmWCI2MWSInactivityAssertJitter:4];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:0];
  +[WCM_Logging logLevel:3 message:@"DLDebug_ Applying K Parameters"];
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex010_v1_NewEnum_watchV5WiFiMacro", @"plist") options:2 format:&v36 error:&v37];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  id v31 = a1;
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  uint64_t v30 = (uint64_t)&v30;
  __chkstk_darwin(v4, v5, v6);
  uint64_t v9 = (char *)&v30 - v7 * (unint64_t)v8;
  uint64_t v10 = v3;
  id v33 = v9;
  uint64_t v11 = &v9[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v11 = 211;
  *(_OWORD *)(v11 + 4) = 0u;
  *(_OWORD *)(v11 + 20) = 0u;
  *(_OWORD *)(v11 + 36) = 0u;
  *(_OWORD *)(v11 + 52) = 0u;
  *(_OWORD *)(v11 + 68) = 0u;
  *(_OWORD *)(v11 + 84) = 0u;
  *((_OWORD *)v11 + 6) = 0u;
  if (v3)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v32 = 112 * v10;
    do
    {
      unsigned int v35 = [[[v2 objectAtIndex:v13] objectForKey:@"issueBand"] intValue];
      unsigned int v34 = [[[v2 objectAtIndex:v13] objectForKey:@"issueType"] intValue];
      unsigned __int8 v14 = [[[v2 objectAtIndex:v13] objectForKey:@"isWiFiDesense"] BOOLValue];
      uint64_t v15 = [(int)[v2 objectAtIndex:v13] objectForKey:@"cellTxPowerLimit"] intValue];
      double v16 = (double)(int)[v2 objectAtIndex:v13][@"cellFrequencyLimitForOOB"][@"intValue"];
      double v17 = (double)(int)[v2 objectAtIndex:v13][@"cellBandwidthLimitForOOB"][@"intValue"];
      unsigned int v18 = [[[v2 objectAtIndex:v13] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v13] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v13] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned int v21 = [[[v2 objectAtIndex:v13] objectForKey:@"antennaFilterPathSelection"] intValue];
      unsigned __int8 v22 = [[[v2 objectAtIndex:v13] objectForKey:@"wifiBtAgcCoexMode"] intValue];
      unsigned __int8 v23 = [[[v2 objectAtIndex:v13] objectForKey:@"btAgcCoexMode"] intValue];
      unsigned int v24 = &v33[v12];
      unsigned int v25 = v34;
      *(_DWORD *)unsigned int v24 = v35;
      *((_DWORD *)v24 + 1) = v25;
      v24[8] = v14;
      *(void *)(v24 + 17) = 0;
      *(void *)(v24 + 9) = 0;
      *((void *)v24 + 3) = 0;
      *((void *)v24 + 4) = v15;
      *((double *)v24 + 5) = v16;
      *((double *)v24 + 6) = v17;
      *((void *)v24 + 7) = 0;
      *((_DWORD *)v24 + 16) = v18;
      *(void *)(v24 + 68) = 0;
      *((_WORD *)v24 + 38) = 0;
      v24[78] = v19;
      v24[79] = v20;
      *((_DWORD *)v24 + 20) = 0;
      *((_DWORD *)v24 + 21) = v21;
      v24[88] = v22;
      *(_WORD *)(v24 + 89) = 0;
      v24[91] = 0;
      v24[92] = v23;
      *(void *)(v24 + 101) = 0;
      *(void *)(v24 + 93) = 0;
      ++v13;
      v12 += 112;
      *((_DWORD *)v24 + 27) = 0;
    }
    while (v32 != v12);
  }
  uint64_t v26 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v27 = v31;
  [v31 setWcmWiFiCellCoexIssueTable:v26];
  id v28 = [v27 wcmWiFiCellCoexIssueTable];
  [v28 configureBy:v33];
  [v27 setWcmCellRc1CoexIssueTable:[[WCM_CellularRc1CoexIssueTable alloc] initFromPlist:@"CoEx-Table-CellRC1-Coex003"]];
  [v27 setWcmCellularCoexB7DLRange:2620.0, 20.0];
  [v27 setWcmCellularCoexB7ULRange:2500.0, 20.0];
  [v27 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v27 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v27 setWcmCellularCoexB41A1Range:2496.0, 10.0];
  [v27 setWcmCellularCoexB41A2Range:2506.0, 59.0];
  [v27 setWcmCellularScanProtectionCellFrequencies:&off_100253EE8];
  [v27 setWcmCellularScanProtectionWiFiChannels:&off_100253F48];
  [v27 setWcmCellularScanProtectionWiFiMaxDuration:&off_10023E0A0];
  [v27 setWcmCellularWCI2ModePolicy:[NSNumber numberWithUnsignedLong:8]];
  [v27 setWcmCellularWCI2ModePowerThreshold:[NSNumber numberWithInt:4294967288]];
  [v27 setWcmCellularWCI2ModeRBThresholdHigh:[NSNumber numberWithInt:0]];
  [v27 setWcmCellularWCI2ModeRBThresholdLow:[NSNumber numberWithInt:0]];
  [v27 setWcmCellularWCI2ModeLTETxDenial:[NSNumber numberWithInt:10]];
  [v27 setWcmCellularWCI2ModeMaxAllowedFrameDenials:[NSNumber numberWithInt:40]];
  return [v27 setWcmCellularWCI2ModeFrameDenialWindow:[NSNumber numberWithInt:200]];
}

id sub_10012D7C8(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWCI2FrameSyncAssertOffset:1750];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-150];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-150];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-250];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-250];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:0];
  [a1 setWcmWCI2MWSInactivityAssertJitter:4];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:0];
  +[WCM_Logging logLevel:3 message:@"DLDebug_ Applying K Parameters"];
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex010_v1_NewEnum_watchV5WiFiMacro", @"plist") options:2 format:&v36 error:&v37];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  id v31 = a1;
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  uint64_t v30 = (uint64_t)&v30;
  __chkstk_darwin(v4, v5, v6);
  uint64_t v9 = (char *)&v30 - v7 * (unint64_t)v8;
  uint64_t v10 = v3;
  id v33 = v9;
  uint64_t v11 = &v9[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v11 = 211;
  *(_OWORD *)(v11 + 4) = 0u;
  *(_OWORD *)(v11 + 20) = 0u;
  *(_OWORD *)(v11 + 36) = 0u;
  *(_OWORD *)(v11 + 52) = 0u;
  *(_OWORD *)(v11 + 68) = 0u;
  *(_OWORD *)(v11 + 84) = 0u;
  *((_OWORD *)v11 + 6) = 0u;
  if (v3)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v32 = 112 * v10;
    do
    {
      unsigned int v35 = [[[v2 objectAtIndex:v13] objectForKey:@"issueBand"] intValue];
      unsigned int v34 = [[[v2 objectAtIndex:v13] objectForKey:@"issueType"] intValue];
      unsigned __int8 v14 = [[[v2 objectAtIndex:v13] objectForKey:@"isWiFiDesense"] boolValue];
      uint64_t v15 = [(int)[v2 objectAtIndex:v13] objectForKey:@"cellTxPowerLimit"] intValue];
      double v16 = (double)(int)[v2 objectAtIndex:v13][@"cellFrequencyLimitForOOB"][@"intValue"];
      double v17 = (double)(int)[v2 objectAtIndex:v13][@"cellBandwidthLimitForOOB"][@"intValue"];
      unsigned int v18 = [[[v2 objectAtIndex:v13] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v13] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v13] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned int v21 = [[[v2 objectAtIndex:v13] objectForKey:@"antennaFilterPathSelection"] intValue];
      unsigned __int8 v22 = [[[v2 objectAtIndex:v13] objectForKey:@"wifiBtAgcCoexMode"] intValue];
      unsigned __int8 v23 = [[[v2 objectAtIndex:v13] objectForKey:@"btAgcCoexMode"] intValue];
      unsigned int v24 = &v33[v12];
      unsigned int v25 = v34;
      *(_DWORD *)unsigned int v24 = v35;
      *((_DWORD *)v24 + 1) = v25;
      v24[8] = v14;
      *(void *)(v24 + 17) = 0;
      *(void *)(v24 + 9) = 0;
      *((void *)v24 + 3) = 0;
      *((void *)v24 + 4) = v15;
      *((double *)v24 + 5) = v16;
      *((double *)v24 + 6) = v17;
      *((void *)v24 + 7) = 0;
      *((_DWORD *)v24 + 16) = v18;
      *(void *)(v24 + 68) = 0;
      *((_WORD *)v24 + 38) = 0;
      v24[78] = v19;
      v24[79] = v20;
      *((_DWORD *)v24 + 20) = 0;
      *((_DWORD *)v24 + 21) = v21;
      v24[88] = v22;
      *(_WORD *)(v24 + 89) = 0;
      v24[91] = 0;
      v24[92] = v23;
      *(void *)(v24 + 101) = 0;
      *(void *)(v24 + 93) = 0;
      ++v13;
      v12 += 112;
      *((_DWORD *)v24 + 27) = 0;
    }
    while (v32 != v12);
  }
  uint64_t v26 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v27 = v31;
  [v31 setWcmWiFiCellCoexIssueTable:v26];
  id v28 = [v27 wcmWiFiCellCoexIssueTable];
  [v28 configureBy:v33];
  [v27 setWcmCellRc1CoexIssueTable:[[WCM_CellularRc1CoexIssueTable alloc] initFromPlist:@"CoEx-Table-CellRC1-Coex003"]];
  [v27 setWcmCellularCoexB7DLRange:2620.0, 20.0];
  [v27 setWcmCellularCoexB7ULRange:2500.0, 20.0];
  [v27 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v27 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v27 setWcmCellularCoexB41A1Range:2496.0, 10.0];
  [v27 setWcmCellularCoexB41A2Range:2506.0, 59.0];
  [v27 setWcmCellularScanProtectionCellFrequencies:&off_100253FA8];
  [v27 setWcmCellularScanProtectionWiFiChannels:&off_100254008];
  [v27 setWcmCellularScanProtectionWiFiMaxDuration:&off_10023E0A0];
  [v27 setWcmCellularWCI2ModePolicy:[NSNumber numberWithUnsignedLong:8]];
  [v27 setWcmCellularWCI2ModePowerThreshold:[NSNumber numberWithInt:4294967288]];
  [v27 setWcmCellularWCI2ModeRBThresholdHigh:[NSNumber numberWithInt:0]];
  [v27 setWcmCellularWCI2ModeRBThresholdLow:[NSNumber numberWithInt:0]];
  [v27 setWcmCellularWCI2ModeLTETxDenial:[NSNumber numberWithInt:10]];
  [v27 setWcmCellularWCI2ModeMaxAllowedFrameDenials:[NSNumber numberWithInt:40]];
  return [v27 setWcmCellularWCI2ModeFrameDenialWindow:[NSNumber numberWithInt:200]];
}

id sub_10012DDE4(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWCI2FrameSyncAssertOffset:1750];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-150];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-150];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-250];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-250];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:0];
  [a1 setWcmWCI2MWSInactivityAssertJitter:4];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:0];
  +[WCM_Logging logLevel:3 message:@"DLDebug_ Applying K Parameters"];
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex019_watchV4Macro_v1.1", @"plist") options:2 format:&v36 error:&v37];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  id v31 = a1;
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  uint64_t v30 = (uint64_t)&v30;
  __chkstk_darwin(v4, v5, v6);
  uint64_t v9 = (char *)&v30 - v7 * (unint64_t)v8;
  uint64_t v10 = v3;
  id v33 = v9;
  uint64_t v11 = &v9[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v11 = 211;
  *(_OWORD *)(v11 + 4) = 0u;
  *(_OWORD *)(v11 + 20) = 0u;
  *(_OWORD *)(v11 + 36) = 0u;
  *(_OWORD *)(v11 + 52) = 0u;
  *(_OWORD *)(v11 + 68) = 0u;
  *(_OWORD *)(v11 + 84) = 0u;
  *((_OWORD *)v11 + 6) = 0u;
  if (v3)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v32 = 112 * v10;
    do
    {
      unsigned int v35 = [[[v2 objectAtIndex:v13] objectForKey:@"issueBand"] intValue];
      unsigned int v34 = [[[v2 objectAtIndex:v13] objectForKey:@"issueType"] intValue];
      unsigned __int8 v14 = [[[v2 objectAtIndex:v13] objectForKey:@"isWiFiDesense"] BOOLValue];
      uint64_t v15 = [(int)[v2 objectAtIndex:v13] objectForKey:@"cellTxPowerLimit"] intValue];
      double v16 = (double)[(int)[v2 objectAtIndex:v13] objectForKey:@"cellFrequencyLimitForOOB"];
      double v17 = (double)(int)[v2 objectAtIndex:v13][@"cellBandwidthLimitForOOB"][@"intValue"];
      unsigned int v18 = [[[v2 objectAtIndex:v13] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v13] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v13] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned int v21 = [[[v2 objectAtIndex:v13] objectForKey:@"antennaFilterPathSelection"] intValue];
      unsigned __int8 v22 = [[[v2 objectAtIndex:v13] objectForKey:@"wifiBtAgcCoexMode"] intValue];
      unsigned __int8 v23 = [[[v2 objectAtIndex:v13] objectForKey:@"btAgcCoexMode"] intValue];
      unsigned int v24 = &v33[v12];
      unsigned int v25 = v34;
      *(_DWORD *)unsigned int v24 = v35;
      *((_DWORD *)v24 + 1) = v25;
      v24[8] = v14;
      *(void *)(v24 + 17) = 0;
      *(void *)(v24 + 9) = 0;
      *((void *)v24 + 3) = 0;
      *((void *)v24 + 4) = v15;
      *((double *)v24 + 5) = v16;
      *((double *)v24 + 6) = v17;
      *((void *)v24 + 7) = 0;
      *((_DWORD *)v24 + 16) = v18;
      *(void *)(v24 + 68) = 0;
      *((_WORD *)v24 + 38) = 0;
      v24[78] = v19;
      v24[79] = v20;
      *((_DWORD *)v24 + 20) = 0;
      *((_DWORD *)v24 + 21) = v21;
      v24[88] = v22;
      *(_WORD *)(v24 + 89) = 0;
      v24[91] = 0;
      v24[92] = v23;
      *(void *)(v24 + 101) = 0;
      *(void *)(v24 + 93) = 0;
      ++v13;
      v12 += 112;
      *((_DWORD *)v24 + 27) = 0;
    }
    while (v32 != v12);
  }
  uint64_t v26 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v27 = v31;
  [v31 setWcmWiFiCellCoexIssueTable:v26];
  id v28 = [v27 wcmWiFiCellCoexIssueTable];
  [v28 configureBy:v33];
  [v27 setWcmCellularCoexB7DLRange:2620.0, 20.0];
  [v27 setWcmCellularCoexB7ULRange:2500.0, 20.0];
  [v27 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v27 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v27 setWcmCellularCoexB41A1Range:2496.0, 10.0];
  [v27 setWcmCellularCoexB41A2Range:2506.0, 59.0];
  [v27 setWcmCellularScanProtectionCellFrequencies:&off_100254068];
  [v27 setWcmCellularScanProtectionWiFiChannels:&off_1002540C8];
  [v27 setWcmCellularScanProtectionWiFiMaxDuration:&off_10023E0A0];
  [v27 setWcmCellularWCI2ModePolicy:[NSNumber numberWithUnsignedLong:8]];
  [v27 setWcmCellularWCI2ModePowerThreshold:[NSNumber numberWithInt:4294967288]];
  [v27 setWcmCellularWCI2ModeRBThresholdHigh:[NSNumber numberWithInt:0]];
  [v27 setWcmCellularWCI2ModeRBThresholdLow:[NSNumber numberWithInt:0]];
  [v27 setWcmCellularWCI2ModeLTETxDenial:[NSNumber numberWithInt:10]];
  [v27 setWcmCellularWCI2ModeMaxAllowedFrameDenials:[NSNumber numberWithInt:40]];
  return [v27 setWcmCellularWCI2ModeFrameDenialWindow:[NSNumber numberWithInt:200]];
}

id sub_10012E3DC(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWCI2FrameSyncAssertOffset:1750];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-150];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-150];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-250];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-250];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:0];
  [a1 setWcmWCI2MWSInactivityAssertJitter:4];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:0];
  +[WCM_Logging logLevel:3 message:@"DLDebug_ Applying K Parameters"];
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex019_watchV4Macro_v1.1", @"plist") options:2 format:&v36 error:&v37];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  id v31 = a1;
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  uint64_t v30 = (uint64_t)&v30;
  __chkstk_darwin(v4, v5, v6);
  uint64_t v9 = (char *)&v30 - v7 * (unint64_t)v8;
  uint64_t v10 = v3;
  id v33 = v9;
  uint64_t v11 = &v9[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v11 = 211;
  *(_OWORD *)(v11 + 4) = 0u;
  *(_OWORD *)(v11 + 20) = 0u;
  *(_OWORD *)(v11 + 36) = 0u;
  *(_OWORD *)(v11 + 52) = 0u;
  *(_OWORD *)(v11 + 68) = 0u;
  *(_OWORD *)(v11 + 84) = 0u;
  *((_OWORD *)v11 + 6) = 0u;
  if (v3)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v32 = 112 * v10;
    do
    {
      unsigned int v35 = [[[v2 objectAtIndex:v13] objectForKey:@"issueBand"] intValue];
      unsigned int v34 = [[[v2 objectAtIndex:v13] objectForKey:@"issueType"] intValue];
      unsigned __int8 v14 = [[[v2 objectAtIndex:v13] objectForKey:@"isWiFiDesense"] BOOLValue];
      uint64_t v15 = [[[v2 objectAtIndex:v13] objectForKey:@"cellTxPowerLimit"] intValue];
      double v16 = (double)(int)[v2 objectAtIndex:v13][@"cellFrequencyLimitForOOB"][@"intValue"];
      double v17 = (double)(int)[v2 objectAtIndex:v13][@"cellBandwidthLimitForOOB"][@"intValue"];
      unsigned int v18 = [[[v2 objectAtIndex:v13] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v13] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v13] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned int v21 = [[[v2 objectAtIndex:v13] objectForKey:@"antennaFilterPathSelection"] intValue];
      unsigned __int8 v22 = [[[v2 objectAtIndex:v13] objectForKey:@"wifiBtAgcCoexMode"] intValue];
      unsigned __int8 v23 = [[[v2 objectAtIndex:v13] objectForKey:@"btAgcCoexMode"] intValue];
      unsigned int v24 = &v33[v12];
      unsigned int v25 = v34;
      *(_DWORD *)unsigned int v24 = v35;
      *((_DWORD *)v24 + 1) = v25;
      v24[8] = v14;
      *(void *)(v24 + 17) = 0;
      *(void *)(v24 + 9) = 0;
      *((void *)v24 + 3) = 0;
      *((void *)v24 + 4) = v15;
      *((double *)v24 + 5) = v16;
      *((double *)v24 + 6) = v17;
      *((void *)v24 + 7) = 0;
      *((_DWORD *)v24 + 16) = v18;
      *(void *)(v24 + 68) = 0;
      *((_WORD *)v24 + 38) = 0;
      v24[78] = v19;
      v24[79] = v20;
      *((_DWORD *)v24 + 20) = 0;
      *((_DWORD *)v24 + 21) = v21;
      v24[88] = v22;
      *(_WORD *)(v24 + 89) = 0;
      v24[91] = 0;
      v24[92] = v23;
      *(void *)(v24 + 101) = 0;
      *(void *)(v24 + 93) = 0;
      ++v13;
      v12 += 112;
      *((_DWORD *)v24 + 27) = 0;
    }
    while (v32 != v12);
  }
  uint64_t v26 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v27 = v31;
  [v31 setWcmWiFiCellCoexIssueTable:v26];
  id v28 = [v27 wcmWiFiCellCoexIssueTable];
  [v28 configureBy:v33];
  [v27 setWcmCellularCoexB7DLRange:2620.0, 20.0];
  [v27 setWcmCellularCoexB7ULRange:2500.0, 20.0];
  [v27 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v27 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v27 setWcmCellularCoexB41A1Range:2496.0, 10.0];
  [v27 setWcmCellularCoexB41A2Range:2506.0, 59.0];
  [v27 setWcmCellularScanProtectionCellFrequencies:&off_100254128];
  [v27 setWcmCellularScanProtectionWiFiChannels:&off_100254188];
  [v27 setWcmCellularScanProtectionWiFiMaxDuration:&off_10023E0A0];
  [v27 setWcmCellularWCI2ModePolicy:[NSNumber numberWithUnsignedLong:8]];
  [v27 setWcmCellularWCI2ModePowerThreshold:[NSNumber numberWithInt:4294967288]];
  [v27 setWcmCellularWCI2ModeRBThresholdHigh:[NSNumber numberWithInt:0]];
  [v27 setWcmCellularWCI2ModeRBThresholdLow:[NSNumber numberWithInt:0]];
  [v27 setWcmCellularWCI2ModeLTETxDenial:[NSNumber numberWithInt:10]];
  [v27 setWcmCellularWCI2ModeMaxAllowedFrameDenials:[NSNumber numberWithInt:40]];
  return [v27 setWcmCellularWCI2ModeFrameDenialWindow:[NSNumber numberWithInt:200]];
}

id sub_10012E9D4(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWCI2FrameSyncAssertOffset:1750];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-150];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-150];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-250];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-250];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:0];
  [a1 setWcmWCI2MWSInactivityAssertJitter:4];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:0];
  +[WCM_Logging logLevel:3 message:@"DLDebug_ Applying K Parameters"];
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex020_watchV4Macro_v1.2", @"plist") options:2 format:&v36 error:&v37];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  id v31 = a1;
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  uint64_t v30 = (uint64_t)&v30;
  __chkstk_darwin(v4, v5, v6);
  uint64_t v9 = (char *)&v30 - v7 * (unint64_t)v8;
  uint64_t v10 = v3;
  id v33 = v9;
  uint64_t v11 = &v9[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v11 = 211;
  *(_OWORD *)(v11 + 4) = 0u;
  *(_OWORD *)(v11 + 20) = 0u;
  *(_OWORD *)(v11 + 36) = 0u;
  *(_OWORD *)(v11 + 52) = 0u;
  *(_OWORD *)(v11 + 68) = 0u;
  *(_OWORD *)(v11 + 84) = 0u;
  *((_OWORD *)v11 + 6) = 0u;
  if (v3)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v32 = 112 * v10;
    do
    {
      unsigned int v35 = [[[v2 objectAtIndex:v13] objectForKey:@"issueBand"] intValue];
      unsigned int v34 = [[[v2 objectAtIndex:v13] objectForKey:@"issueType"] intValue];
      unsigned __int8 v14 = [[[v2 objectAtIndex:v13] objectForKey:@"isWiFiDesense"] boolValue];
      uint64_t v15 = [[[v2 objectAtIndex:v13] objectForKey:@"cellTxPowerLimit"] intValue];
      double v16 = (double)[(int)[v2 objectAtIndex:v13] objectForKey:@"cellFrequencyLimitForOOB"];
      double v17 = (double)(int)[v2 objectAtIndex:v13][@"cellBandwidthLimitForOOB"][@"intValue"];
      unsigned int v18 = [[[v2 objectAtIndex:v13] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v13] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v13] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned int v21 = [[[v2 objectAtIndex:v13] objectForKey:@"antennaFilterPathSelection"] intValue];
      unsigned __int8 v22 = [[[v2 objectAtIndex:v13] objectForKey:@"wifiBtAgcCoexMode"] intValue];
      unsigned __int8 v23 = [[[v2 objectAtIndex:v13] objectForKey:@"btAgcCoexMode"] intValue];
      unsigned int v24 = &v33[v12];
      unsigned int v25 = v34;
      *(_DWORD *)unsigned int v24 = v35;
      *((_DWORD *)v24 + 1) = v25;
      v24[8] = v14;
      *(void *)(v24 + 17) = 0;
      *(void *)(v24 + 9) = 0;
      *((void *)v24 + 3) = 0;
      *((void *)v24 + 4) = v15;
      *((double *)v24 + 5) = v16;
      *((double *)v24 + 6) = v17;
      *((void *)v24 + 7) = 0;
      *((_DWORD *)v24 + 16) = v18;
      *(void *)(v24 + 68) = 0;
      *((_WORD *)v24 + 38) = 0;
      v24[78] = v19;
      v24[79] = v20;
      *((_DWORD *)v24 + 20) = 0;
      *((_DWORD *)v24 + 21) = v21;
      v24[88] = v22;
      *(_WORD *)(v24 + 89) = 0;
      v24[91] = 0;
      v24[92] = v23;
      *(void *)(v24 + 101) = 0;
      *(void *)(v24 + 93) = 0;
      ++v13;
      v12 += 112;
      *((_DWORD *)v24 + 27) = 0;
    }
    while (v32 != v12);
  }
  uint64_t v26 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v27 = v31;
  [v31 setWcmWiFiCellCoexIssueTable:v26];
  id v28 = [v27 wcmWiFiCellCoexIssueTable];
  [v28 configureBy:v33];
  [v27 setWcmCellRc1CoexIssueTable:-[WCM_CellularRc1CoexIssueTable initFromPlist:]([WCM_CellularRc1CoexIssueTable alloc], "initFromPlist:", @"CoEx-Table-CellRC1-Coex003")];
  [v27 setWcmCellularCoexB7DLRange:2620.0, 20.0];
  [v27 setWcmCellularCoexB7ULRange:2500.0, 20.0];
  [v27 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v27 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v27 setWcmCellularCoexB41A1Range:2496.0, 10.0];
  [v27 setWcmCellularCoexB41A2Range:2506.0, 59.0];
  [v27 setWcmCellularScanProtectionCellFrequencies:&off_1002541E8];
  [v27 setWcmCellularScanProtectionWiFiChannels:&off_100254248];
  [v27 setWcmCellularScanProtectionWiFiMaxDuration:&off_10023E0A0];
  [v27 setWcmCellularWCI2ModePolicy:[NSNumber numberWithUnsignedLong:8]];
  [v27 setWcmCellularWCI2ModePowerThreshold:[NSNumber numberWithInt:4294967288]];
  [v27 setWcmCellularWCI2ModeRBThresholdHigh:[NSNumber numberWithInt:0]];
  [v27 setWcmCellularWCI2ModeRBThresholdLow:[NSNumber numberWithInt:0]];
  [v27 setWcmCellularWCI2ModeLTETxDenial:[NSNumber numberWithInt:10]];
  [v27 setWcmCellularWCI2ModeMaxAllowedFrameDenials:[NSNumber numberWithInt:40]];
  return [v27 setWcmCellularWCI2ModeFrameDenialWindow:[NSNumber numberWithInt:200]];
}

id sub_10012EFF0(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWCI2FrameSyncAssertOffset:1750];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-150];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-150];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-250];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-250];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:0];
  [a1 setWcmWCI2MWSInactivityAssertJitter:4];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:0];
  +[WCM_Logging logLevel:3 message:@"DLDebug_ Applying K Parameters"];
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex020_watchV4Macro_v1.2", @"plist") options:2 format:&v36 error:&v37];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  id v31 = a1;
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  uint64_t v30 = (uint64_t)&v30;
  __chkstk_darwin(v4, v5, v6);
  uint64_t v9 = (char *)&v30 - v7 * (unint64_t)v8;
  uint64_t v10 = v3;
  id v33 = v9;
  uint64_t v11 = &v9[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v11 = 211;
  *(_OWORD *)(v11 + 4) = 0u;
  *(_OWORD *)(v11 + 20) = 0u;
  *(_OWORD *)(v11 + 36) = 0u;
  *(_OWORD *)(v11 + 52) = 0u;
  *(_OWORD *)(v11 + 68) = 0u;
  *(_OWORD *)(v11 + 84) = 0u;
  *((_OWORD *)v11 + 6) = 0u;
  if (v3)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v32 = 112 * v10;
    do
    {
      unsigned int v35 = [[[v2 objectAtIndex:v13] objectForKey:@"issueBand"] intValue];
      unsigned int v34 = [[[v2 objectAtIndex:v13] objectForKey:@"issueType"] intValue];
      unsigned __int8 v14 = [[[v2 objectAtIndex:v13] objectForKey:@"isWiFiDesense"] BOOLValue];
      uint64_t v15 = [(int)[v2 objectAtIndex:v13] objectForKey:@"cellTxPowerLimit"] intValue];
      double v16 = (double)(int)[v2 objectAtIndex:v13][@"cellFrequencyLimitForOOB"][@"intValue"];
      double v17 = (double)(int)[v2 objectAtIndex:v13][@"cellBandwidthLimitForOOB"][@"intValue"];
      unsigned int v18 = [[[v2 objectAtIndex:v13] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v13] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v13] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned int v21 = [[[v2 objectAtIndex:v13] objectForKey:@"antennaFilterPathSelection"] intValue];
      unsigned __int8 v22 = [[[v2 objectAtIndex:v13] objectForKey:@"wifiBtAgcCoexMode"] intValue];
      unsigned __int8 v23 = [[[v2 objectAtIndex:v13] objectForKey:@"btAgcCoexMode"] intValue];
      unsigned int v24 = &v33[v12];
      unsigned int v25 = v34;
      *(_DWORD *)unsigned int v24 = v35;
      *((_DWORD *)v24 + 1) = v25;
      v24[8] = v14;
      *(void *)(v24 + 17) = 0;
      *(void *)(v24 + 9) = 0;
      *((void *)v24 + 3) = 0;
      *((void *)v24 + 4) = v15;
      *((double *)v24 + 5) = v16;
      *((double *)v24 + 6) = v17;
      *((void *)v24 + 7) = 0;
      *((_DWORD *)v24 + 16) = v18;
      *(void *)(v24 + 68) = 0;
      *((_WORD *)v24 + 38) = 0;
      v24[78] = v19;
      v24[79] = v20;
      *((_DWORD *)v24 + 20) = 0;
      *((_DWORD *)v24 + 21) = v21;
      v24[88] = v22;
      *(_WORD *)(v24 + 89) = 0;
      v24[91] = 0;
      v24[92] = v23;
      *(void *)(v24 + 101) = 0;
      *(void *)(v24 + 93) = 0;
      ++v13;
      v12 += 112;
      *((_DWORD *)v24 + 27) = 0;
    }
    while (v32 != v12);
  }
  uint64_t v26 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v27 = v31;
  [v31 setWcmWiFiCellCoexIssueTable:v26];
  id v28 = [v27 wcmWiFiCellCoexIssueTable];
  [v28 configureBy:v33];
  [v27 setWcmCellRc1CoexIssueTable:[[WCM_CellularRc1CoexIssueTable alloc] initFromPlist:@"CoEx-Table-CellRC1-Coex003"]];
  [v27 setWcmCellularCoexB7DLRange:2620.0, 20.0];
  [v27 setWcmCellularCoexB7ULRange:2500.0, 20.0];
  [v27 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v27 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v27 setWcmCellularCoexB41A1Range:2496.0, 10.0];
  [v27 setWcmCellularCoexB41A2Range:2506.0, 59.0];
  [v27 setWcmCellularScanProtectionCellFrequencies:&off_1002542A8];
  [v27 setWcmCellularScanProtectionWiFiChannels:&off_100254308];
  [v27 setWcmCellularScanProtectionWiFiMaxDuration:&off_10023E0A0];
  [v27 setWcmCellularWCI2ModePolicy:[NSNumber numberWithUnsignedLong:8]];
  [v27 setWcmCellularWCI2ModePowerThreshold:[NSNumber numberWithInt:4294967288]];
  [v27 setWcmCellularWCI2ModeRBThresholdHigh:[NSNumber numberWithInt:0]];
  [v27 setWcmCellularWCI2ModeRBThresholdLow:[NSNumber numberWithInt:0]];
  [v27 setWcmCellularWCI2ModeLTETxDenial:[NSNumber numberWithInt:10]];
  [v27 setWcmCellularWCI2ModeMaxAllowedFrameDenials:[NSNumber numberWithInt:40]];
  return [v27 setWcmCellularWCI2ModeFrameDenialWindow:[NSNumber numberWithInt:200]];
}

id sub_10012F60C(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWCI2FrameSyncAssertOffset:1750];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-150];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-150];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-250];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-250];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:0];
  [a1 setWcmWCI2MWSInactivityAssertJitter:4];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:0];
  +[WCM_Logging logLevel:3 message:@"DLDebug_ Applying K Parameters"];
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex021_watchV4Macro_v1.1", @"plist") options:2 format:&v36 error:&v37];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  id v31 = a1;
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  uint64_t v30 = (uint64_t)&v30;
  __chkstk_darwin(v4, v5, v6);
  uint64_t v9 = (char *)&v30 - v7 * (unint64_t)v8;
  uint64_t v10 = v3;
  id v33 = v9;
  uint64_t v11 = &v9[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v11 = 211;
  *(_OWORD *)(v11 + 4) = 0u;
  *(_OWORD *)(v11 + 20) = 0u;
  *(_OWORD *)(v11 + 36) = 0u;
  *(_OWORD *)(v11 + 52) = 0u;
  *(_OWORD *)(v11 + 68) = 0u;
  *(_OWORD *)(v11 + 84) = 0u;
  *((_OWORD *)v11 + 6) = 0u;
  if (v3)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v32 = 112 * v10;
    do
    {
      unsigned int v35 = [[[v2 objectAtIndex:v13] objectForKey:@"issueBand"] intValue];
      unsigned int v34 = [[[v2 objectAtIndex:v13] objectForKey:@"issueType"] intValue];
      unsigned __int8 v14 = [[[v2 objectAtIndex:v13] objectForKey:@"isWiFiDesense"] BOOLValue];
      uint64_t v15 = [(int)[v2 objectAtIndex:v13] objectForKey:@"cellTxPowerLimit"] intValue];
      double v16 = (double)(int)[v2 objectAtIndex:v13][@"cellFrequencyLimitForOOB"][@"intValue"];
      double v17 = (double)(int)[v2 objectAtIndex:v13][@"cellBandwidthLimitForOOB"][@"intValue"];
      unsigned int v18 = [[[v2 objectAtIndex:v13] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v13] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v13] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned int v21 = [[[v2 objectAtIndex:v13] objectForKey:@"antennaFilterPathSelection"] intValue];
      unsigned __int8 v22 = [[[v2 objectAtIndex:v13] objectForKey:@"wifiBtAgcCoexMode"] intValue];
      unsigned __int8 v23 = [[[v2 objectAtIndex:v13] objectForKey:@"btAgcCoexMode"] intValue];
      unsigned int v24 = &v33[v12];
      unsigned int v25 = v34;
      *(_DWORD *)unsigned int v24 = v35;
      *((_DWORD *)v24 + 1) = v25;
      v24[8] = v14;
      *(void *)(v24 + 17) = 0;
      *(void *)(v24 + 9) = 0;
      *((void *)v24 + 3) = 0;
      *((void *)v24 + 4) = v15;
      *((double *)v24 + 5) = v16;
      *((double *)v24 + 6) = v17;
      *((void *)v24 + 7) = 0;
      *((_DWORD *)v24 + 16) = v18;
      *(void *)(v24 + 68) = 0;
      *((_WORD *)v24 + 38) = 0;
      v24[78] = v19;
      v24[79] = v20;
      *((_DWORD *)v24 + 20) = 0;
      *((_DWORD *)v24 + 21) = v21;
      v24[88] = v22;
      *(_WORD *)(v24 + 89) = 0;
      v24[91] = 0;
      v24[92] = v23;
      *(void *)(v24 + 101) = 0;
      *(void *)(v24 + 93) = 0;
      ++v13;
      v12 += 112;
      *((_DWORD *)v24 + 27) = 0;
    }
    while (v32 != v12);
  }
  uint64_t v26 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v27 = v31;
  [v31 setWcmWiFiCellCoexIssueTable:v26];
  id v28 = [v27 wcmWiFiCellCoexIssueTable];
  [v28 configureBy:v33];
  [v27 setWcmCellRc1CoexIssueTable:[-[WCM_CellularRc1CoexIssueTable initFromPlist:]([WCM_CellularRc1CoexIssueTable alloc], "initFromPlist:", @"CoEx-Table-CellRC1-Coex003")];
  [v27 setWcmCellularCoexB7DLRange:2620.0, 20.0];
  [v27 setWcmCellularCoexB7ULRange:2500.0, 20.0];
  [v27 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v27 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v27 setWcmCellularCoexB41A1Range:2496.0, 10.0];
  [v27 setWcmCellularCoexB41A2Range:2506.0, 59.0];
  [v27 setWcmCellularScanProtectionCellFrequencies:&off_100254368];
  [v27 setWcmCellularScanProtectionWiFiChannels:&off_1002543C8];
  [v27 setWcmCellularScanProtectionWiFiMaxDuration:&off_10023E0A0];
  [v27 setWcmCellularWCI2ModePolicy:[NSNumber numberWithUnsignedLong:8]];
  [v27 setWcmCellularWCI2ModePowerThreshold:[NSNumber numberWithInt:4294967288]];
  [v27 setWcmCellularWCI2ModeRBThresholdHigh:[NSNumber numberWithInt:0]];
  [v27 setWcmCellularWCI2ModeRBThresholdLow:[NSNumber numberWithInt:0]];
  [v27 setWcmCellularWCI2ModeLTETxDenial:[NSNumber numberWithInt:10]];
  [v27 setWcmCellularWCI2ModeMaxAllowedFrameDenials:+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 40)];
  return [v27 setWcmCellularWCI2ModeFrameDenialWindow:[NSNumber numberWithInt:200]];
}

id sub_10012FC28(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWCI2FrameSyncAssertOffset:1750];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-150];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-150];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-250];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-250];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:0];
  [a1 setWcmWCI2MWSInactivityAssertJitter:4];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:0];
  +[WCM_Logging logLevel:3 message:@"DLDebug_ Applying K Parameters"];
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex028_watchV4Macro", @"plist") options:2 format:&v36 error:&v37];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  id v31 = a1;
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  uint64_t v30 = (uint64_t)&v30;
  __chkstk_darwin(v4, v5, v6);
  uint64_t v9 = (char *)&v30 - v7 * (unint64_t)v8;
  uint64_t v10 = v3;
  id v33 = v9;
  uint64_t v11 = &v9[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v11 = 211;
  *(_OWORD *)(v11 + 4) = 0u;
  *(_OWORD *)(v11 + 20) = 0u;
  *(_OWORD *)(v11 + 36) = 0u;
  *(_OWORD *)(v11 + 52) = 0u;
  *(_OWORD *)(v11 + 68) = 0u;
  *(_OWORD *)(v11 + 84) = 0u;
  *((_OWORD *)v11 + 6) = 0u;
  if (v3)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v32 = 112 * v10;
    do
    {
      unsigned int v35 = [[[v2 objectAtIndex:v13] objectForKey:@"issueBand"] intValue];
      unsigned int v34 = [[[v2 objectAtIndex:v13] objectForKey:@"issueType"] intValue];
      unsigned __int8 v14 = [[[v2 objectAtIndex:v13] objectForKey:@"isWiFiDesense"] BOOLValue];
      uint64_t v15 = [[[v2 objectAtIndex:v13] objectForKey:@"cellTxPowerLimit"] intValue];
      double v16 = (double)[(int)[v2 objectAtIndex:v13] objectForKey:@"cellFrequencyLimitForOOB"] intValue];
      double v17 = (double)[(int)[v2 objectAtIndex:v13] objectForKey:@"cellBandwidthLimitForOOB"] intValue];
      unsigned int v18 = [[[v2 objectAtIndex:v13] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v13] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v13] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned int v21 = [[[v2 objectAtIndex:v13] objectForKey:@"antennaFilterPathSelection"] intValue];
      unsigned __int8 v22 = [[[v2 objectAtIndex:v13] objectForKey:@"wifiBtAgcCoexMode"] intValue];
      unsigned __int8 v23 = [[[v2 objectAtIndex:v13] objectForKey:@"btAgcCoexMode"] intValue];
      unsigned int v24 = &v33[v12];
      unsigned int v25 = v34;
      *(_DWORD *)unsigned int v24 = v35;
      *((_DWORD *)v24 + 1) = v25;
      v24[8] = v14;
      *(void *)(v24 + 17) = 0;
      *(void *)(v24 + 9) = 0;
      *((void *)v24 + 3) = 0;
      *((void *)v24 + 4) = v15;
      *((double *)v24 + 5) = v16;
      *((double *)v24 + 6) = v17;
      *((void *)v24 + 7) = 0;
      *((_DWORD *)v24 + 16) = v18;
      *(void *)(v24 + 68) = 0;
      *((_WORD *)v24 + 38) = 0;
      v24[78] = v19;
      v24[79] = v20;
      *((_DWORD *)v24 + 20) = 0;
      *((_DWORD *)v24 + 21) = v21;
      v24[88] = v22;
      *(_WORD *)(v24 + 89) = 0;
      v24[91] = 0;
      v24[92] = v23;
      *(void *)(v24 + 101) = 0;
      *(void *)(v24 + 93) = 0;
      ++v13;
      v12 += 112;
      *((_DWORD *)v24 + 27) = 0;
    }
    while (v32 != v12);
  }
  uint64_t v26 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v27 = v31;
  [v31 setWcmWiFiCellCoexIssueTable:v26];
  id v28 = [v27 wcmWiFiCellCoexIssueTable];
  [v28 configureBy:v33];
  [v27 setWcmCellRc1CoexIssueTable:[-[WCM_CellularRc1CoexIssueTable initFromPlist:]([WCM_CellularRc1CoexIssueTable alloc], "initFromPlist:", @"CoEx-Table-CellRC1-Coex001")];
  [v27 setWcmCellularCoexB7DLRange:2620.0, 20.0];
  [v27 setWcmCellularCoexB7ULRange:2500.0, 20.0];
  [v27 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v27 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v27 setWcmCellularCoexB41A1Range:2496.0, 10.0];
  [v27 setWcmCellularCoexB41A2Range:2506.0, 59.0];
  [v27 setWcmCellularScanProtectionCellFrequencies:&off_100254428];
  [v27 setWcmCellularScanProtectionWiFiChannels:&off_100254488];
  [v27 setWcmCellularScanProtectionWiFiMaxDuration:&off_10023E0A0];
  [v27 setWcmCellularWCI2ModePolicy:[NSNumber numberWithUnsignedLong:8]];
  [v27 setWcmCellularWCI2ModePowerThreshold:[NSNumber numberWithInt:4294967288]];
  [v27 setWcmCellularWCI2ModeRBThresholdHigh:[NSNumber numberWithInt:0]];
  [v27 setWcmCellularWCI2ModeRBThresholdLow:[NSNumber numberWithInt:0]];
  [v27 setWcmCellularWCI2ModeLTETxDenial:[NSNumber numberWithInt:10]];
  [v27 setWcmCellularWCI2ModeMaxAllowedFrameDenials:+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 40)];
  return [v27 setWcmCellularWCI2ModeFrameDenialWindow:[NSNumber numberWithInt:200]];
}

id sub_100130244(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWCI2FrameSyncAssertOffset:1750];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-150];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-150];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-250];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-250];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:0];
  [a1 setWcmWCI2MWSInactivityAssertJitter:4];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:0];
  +[WCM_Logging logLevel:3 message:@"DLDebug_ Applying K Parameters"];
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex028_watchV4Macro", @"plist") options:2 format:&v36 error:&v37];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  id v31 = a1;
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  uint64_t v30 = (uint64_t)&v30;
  __chkstk_darwin(v4, v5, v6);
  uint64_t v9 = (char *)&v30 - v7 * (unint64_t)v8;
  uint64_t v10 = v3;
  id v33 = v9;
  uint64_t v11 = &v9[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v11 = 211;
  *(_OWORD *)(v11 + 4) = 0u;
  *(_OWORD *)(v11 + 20) = 0u;
  *(_OWORD *)(v11 + 36) = 0u;
  *(_OWORD *)(v11 + 52) = 0u;
  *(_OWORD *)(v11 + 68) = 0u;
  *(_OWORD *)(v11 + 84) = 0u;
  *((_OWORD *)v11 + 6) = 0u;
  if (v3)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v32 = 112 * v10;
    do
    {
      unsigned int v35 = [[[v2 objectAtIndex:v13] objectForKey:@"issueBand"] intValue];
      unsigned int v34 = [[[v2 objectAtIndex:v13] objectForKey:@"issueType"] intValue];
      unsigned __int8 v14 = [[[v2 objectAtIndex:v13] objectForKey:@"isWiFiDesense"] boolValue];
      uint64_t v15 = [(int)[v2 objectAtIndex:v13] objectForKey:@"cellTxPowerLimit"] intValue];
      double v16 = (double)(int)[v2 objectAtIndex:v13][@"cellFrequencyLimitForOOB"][@"intValue"];
      double v17 = (double)(int)[v2 objectAtIndex:v13][@"cellBandwidthLimitForOOB"][@"intValue"];
      unsigned int v18 = [[[v2 objectAtIndex:v13] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v13] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v13] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned int v21 = [[[v2 objectAtIndex:v13] objectForKey:@"antennaFilterPathSelection"] intValue];
      unsigned __int8 v22 = [[[v2 objectAtIndex:v13] objectForKey:@"wifiBtAgcCoexMode"] intValue];
      unsigned __int8 v23 = [[[v2 objectAtIndex:v13] objectForKey:@"btAgcCoexMode"] intValue];
      unsigned int v24 = &v33[v12];
      unsigned int v25 = v34;
      *(_DWORD *)unsigned int v24 = v35;
      *((_DWORD *)v24 + 1) = v25;
      v24[8] = v14;
      *(void *)(v24 + 17) = 0;
      *(void *)(v24 + 9) = 0;
      *((void *)v24 + 3) = 0;
      *((void *)v24 + 4) = v15;
      *((double *)v24 + 5) = v16;
      *((double *)v24 + 6) = v17;
      *((void *)v24 + 7) = 0;
      *((_DWORD *)v24 + 16) = v18;
      *(void *)(v24 + 68) = 0;
      *((_WORD *)v24 + 38) = 0;
      v24[78] = v19;
      v24[79] = v20;
      *((_DWORD *)v24 + 20) = 0;
      *((_DWORD *)v24 + 21) = v21;
      v24[88] = v22;
      *(_WORD *)(v24 + 89) = 0;
      v24[91] = 0;
      v24[92] = v23;
      *(void *)(v24 + 101) = 0;
      *(void *)(v24 + 93) = 0;
      ++v13;
      v12 += 112;
      *((_DWORD *)v24 + 27) = 0;
    }
    while (v32 != v12);
  }
  uint64_t v26 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v27 = v31;
  [v31 setWcmWiFiCellCoexIssueTable:v26];
  id v28 = [v27 wcmWiFiCellCoexIssueTable];
  [v28 configureBy:v33];
  [v27 setWcmCellRc1CoexIssueTable:-[WCM_CellularRc1CoexIssueTable initFromPlist:]([WCM_CellularRc1CoexIssueTable alloc], "initFromPlist:", @"CoEx-Table-CellRC1-Coex001")];
  [v27 setWcmCellularCoexB7DLRange:2620.0, 20.0];
  [v27 setWcmCellularCoexB7ULRange:2500.0, 20.0];
  [v27 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v27 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v27 setWcmCellularCoexB41A1Range:2496.0, 10.0];
  [v27 setWcmCellularCoexB41A2Range:2506.0, 59.0];
  [v27 setWcmCellularScanProtectionCellFrequencies:&off_1002544E8];
  [v27 setWcmCellularScanProtectionWiFiChannels:&off_100254548];
  [v27 setWcmCellularScanProtectionWiFiMaxDuration:&off_10023E0A0];
  [v27 setWcmCellularWCI2ModePolicy:[NSNumber numberWithUnsignedLong:8]];
  [v27 setWcmCellularWCI2ModePowerThreshold:[NSNumber numberWithInt:4294967288]];
  [v27 setWcmCellularWCI2ModeRBThresholdHigh:[NSNumber numberWithInt:0]];
  [v27 setWcmCellularWCI2ModeRBThresholdLow:[NSNumber numberWithInt:0]];
  [v27 setWcmCellularWCI2ModeLTETxDenial:[NSNumber numberWithInt:10]];
  [v27 setWcmCellularWCI2ModeMaxAllowedFrameDenials:[NSNumber numberWithInt:40]];
  return [v27 setWcmCellularWCI2ModeFrameDenialWindow:[NSNumber numberWithInt:200]];
}

id sub_100130860(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWCI2FrameSyncAssertOffset:1750];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-150];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-150];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-250];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-250];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:0];
  [a1 setWcmWCI2MWSInactivityAssertJitter:4];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:0];
  +[WCM_Logging logLevel:3 message:@"DLDebug_ Applying K Parameters"];
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex047_watchV4Macro", @"plist") options:2 format:&v36 error:&v37];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  id v31 = a1;
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  uint64_t v30 = (uint64_t)&v30;
  __chkstk_darwin(v4, v5, v6);
  uint64_t v9 = (char *)&v30 - v7 * (unint64_t)v8;
  uint64_t v10 = v3;
  id v33 = v9;
  uint64_t v11 = &v9[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v11 = 211;
  *(_OWORD *)(v11 + 4) = 0u;
  *(_OWORD *)(v11 + 20) = 0u;
  *(_OWORD *)(v11 + 36) = 0u;
  *(_OWORD *)(v11 + 52) = 0u;
  *(_OWORD *)(v11 + 68) = 0u;
  *(_OWORD *)(v11 + 84) = 0u;
  *((_OWORD *)v11 + 6) = 0u;
  if (v3)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v32 = 112 * v10;
    do
    {
      unsigned int v35 = [[[v2 objectAtIndex:v13] objectForKey:@"issueBand"] intValue];
      unsigned int v34 = [[[v2 objectAtIndex:v13] objectForKey:@"issueType"] intValue];
      unsigned __int8 v14 = [[[v2 objectAtIndex:v13] objectForKey:@"isWiFiDesense"] BOOLValue];
      uint64_t v15 = [[[v2 objectAtIndex:v13] objectForKey:@"cellTxPowerLimit"] intValue];
      double v16 = (double)(int)[v2 objectAtIndex:v13][@"cellFrequencyLimitForOOB"][@"intValue"];
      double v17 = (double)(int)[v2 objectAtIndex:v13][@"cellBandwidthLimitForOOB"][@"intValue"];
      unsigned int v18 = [[[v2 objectAtIndex:v13] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v13] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v13] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned int v21 = [[[v2 objectAtIndex:v13] objectForKey:@"antennaFilterPathSelection"] intValue];
      unsigned __int8 v22 = [[[v2 objectAtIndex:v13] objectForKey:@"wifiBtAgcCoexMode"] intValue];
      unsigned __int8 v23 = [[[v2 objectAtIndex:v13] objectForKey:@"btAgcCoexMode"] intValue];
      unsigned int v24 = &v33[v12];
      unsigned int v25 = v34;
      *(_DWORD *)unsigned int v24 = v35;
      *((_DWORD *)v24 + 1) = v25;
      v24[8] = v14;
      *(void *)(v24 + 17) = 0;
      *(void *)(v24 + 9) = 0;
      *((void *)v24 + 3) = 0;
      *((void *)v24 + 4) = v15;
      *((double *)v24 + 5) = v16;
      *((double *)v24 + 6) = v17;
      *((void *)v24 + 7) = 0;
      *((_DWORD *)v24 + 16) = v18;
      *(void *)(v24 + 68) = 0;
      *((_WORD *)v24 + 38) = 0;
      v24[78] = v19;
      v24[79] = v20;
      *((_DWORD *)v24 + 20) = 0;
      *((_DWORD *)v24 + 21) = v21;
      v24[88] = v22;
      *(_WORD *)(v24 + 89) = 0;
      v24[91] = 0;
      v24[92] = v23;
      *(void *)(v24 + 101) = 0;
      *(void *)(v24 + 93) = 0;
      ++v13;
      v12 += 112;
      *((_DWORD *)v24 + 27) = 0;
    }
    while (v32 != v12);
  }
  uint64_t v26 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v27 = v31;
  [v31 setWcmWiFiCellCoexIssueTable:v26];
  id v28 = [v27 wcmWiFiCellCoexIssueTable];
  [v28 configureBy:v33];
  [v27 setWcmCellRc1CoexIssueTable:[[WCM_CellularRc1CoexIssueTable alloc] initFromPlist:@"CoEx-Table-CellRC1-Coex001"]];
  [v27 setWcmCellularCoexB7DLRange:2620.0, 20.0];
  [v27 setWcmCellularCoexB7ULRange:2500.0, 20.0];
  [v27 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v27 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v27 setWcmCellularCoexB41A1Range:2496.0, 10.0];
  [v27 setWcmCellularCoexB41A2Range:2506.0, 59.0];
  [v27 setWcmCellularScanProtectionCellFrequencies:&off_1002545A8];
  [v27 setWcmCellularScanProtectionWiFiChannels:&off_100254608];
  [v27 setWcmCellularScanProtectionWiFiMaxDuration:&off_10023E0A0];
  [v27 setWcmCellularWCI2ModePolicy:[NSNumber numberWithUnsignedLong:8]];
  [v27 setWcmCellularWCI2ModePowerThreshold:[NSNumber numberWithInt:4294967288]];
  [v27 setWcmCellularWCI2ModeRBThresholdHigh:[NSNumber numberWithInt:0]];
  [v27 setWcmCellularWCI2ModeRBThresholdLow:[NSNumber numberWithInt:0]];
  [v27 setWcmCellularWCI2ModeLTETxDenial:[NSNumber numberWithInt:10]];
  [v27 setWcmCellularWCI2ModeMaxAllowedFrameDenials:[NSNumber numberWithInt:40]];
  return [v27 setWcmCellularWCI2ModeFrameDenialWindow:[NSNumber numberWithInt:200]];
}

id sub_100130E7C(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWCI2FrameSyncAssertOffset:1750];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-150];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-150];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-250];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-250];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:0];
  [a1 setWcmWCI2MWSInactivityAssertJitter:4];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:0];
  +[WCM_Logging logLevel:3 message:@"DLDebug_ Applying K Parameters"];
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex047_watchV4Macro", @"plist") options:2 format:&v36 error:&v37];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  id v31 = a1;
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  uint64_t v30 = (uint64_t)&v30;
  __chkstk_darwin(v4, v5, v6);
  uint64_t v9 = (char *)&v30 - v7 * (unint64_t)v8;
  uint64_t v10 = v3;
  id v33 = v9;
  uint64_t v11 = &v9[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v11 = 211;
  *(_OWORD *)(v11 + 4) = 0u;
  *(_OWORD *)(v11 + 20) = 0u;
  *(_OWORD *)(v11 + 36) = 0u;
  *(_OWORD *)(v11 + 52) = 0u;
  *(_OWORD *)(v11 + 68) = 0u;
  *(_OWORD *)(v11 + 84) = 0u;
  *((_OWORD *)v11 + 6) = 0u;
  if (v3)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v32 = 112 * v10;
    do
    {
      unsigned int v35 = [[[v2 objectAtIndex:v13] objectForKey:@"issueBand"] intValue];
      unsigned int v34 = [[[v2 objectAtIndex:v13] objectForKey:@"issueType"] intValue];
      unsigned __int8 v14 = [[[v2 objectAtIndex:v13] objectForKey:@"isWiFiDesense"] BOOLValue];
      uint64_t v15 = [(int)[v2 objectAtIndex:v13] objectForKey:@"cellTxPowerLimit"] intValue];
      double v16 = (double)(int)[v2 objectAtIndex:v13][@"cellFrequencyLimitForOOB"][@"intValue"];
      double v17 = (double)(int)[v2 objectAtIndex:v13][@"cellBandwidthLimitForOOB"][@"intValue"];
      unsigned int v18 = [[[v2 objectAtIndex:v13] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v13] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v13] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned int v21 = [[[v2 objectAtIndex:v13] objectForKey:@"antennaFilterPathSelection"] intValue];
      unsigned __int8 v22 = [[[v2 objectAtIndex:v13] objectForKey:@"wifiBtAgcCoexMode"] intValue];
      unsigned __int8 v23 = [[[v2 objectAtIndex:v13] objectForKey:@"btAgcCoexMode"] intValue];
      unsigned int v24 = &v33[v12];
      unsigned int v25 = v34;
      *(_DWORD *)unsigned int v24 = v35;
      *((_DWORD *)v24 + 1) = v25;
      v24[8] = v14;
      *(void *)(v24 + 17) = 0;
      *(void *)(v24 + 9) = 0;
      *((void *)v24 + 3) = 0;
      *((void *)v24 + 4) = v15;
      *((double *)v24 + 5) = v16;
      *((double *)v24 + 6) = v17;
      *((void *)v24 + 7) = 0;
      *((_DWORD *)v24 + 16) = v18;
      *(void *)(v24 + 68) = 0;
      *((_WORD *)v24 + 38) = 0;
      v24[78] = v19;
      v24[79] = v20;
      *((_DWORD *)v24 + 20) = 0;
      *((_DWORD *)v24 + 21) = v21;
      v24[88] = v22;
      *(_WORD *)(v24 + 89) = 0;
      v24[91] = 0;
      v24[92] = v23;
      *(void *)(v24 + 101) = 0;
      *(void *)(v24 + 93) = 0;
      ++v13;
      v12 += 112;
      *((_DWORD *)v24 + 27) = 0;
    }
    while (v32 != v12);
  }
  uint64_t v26 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v27 = v31;
  [v31 setWcmWiFiCellCoexIssueTable:v26];
  id v28 = [v27 wcmWiFiCellCoexIssueTable];
  [v28 configureBy:v33];
  [v27 setWcmCellRc1CoexIssueTable:[-[WCM_CellularRc1CoexIssueTable initFromPlist:]([WCM_CellularRc1CoexIssueTable alloc], "initFromPlist:", @"CoEx-Table-CellRC1-Coex001")];
  [v27 setWcmCellularCoexB7DLRange:2620.0, 20.0];
  [v27 setWcmCellularCoexB7ULRange:2500.0, 20.0];
  [v27 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v27 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v27 setWcmCellularCoexB41A1Range:2496.0, 10.0];
  [v27 setWcmCellularCoexB41A2Range:2506.0, 59.0];
  [v27 setWcmCellularScanProtectionCellFrequencies:&off_100254668];
  [v27 setWcmCellularScanProtectionWiFiChannels:&off_1002546C8];
  [v27 setWcmCellularScanProtectionWiFiMaxDuration:&off_10023E0A0];
  [v27 setWcmCellularWCI2ModePolicy:[NSNumber numberWithUnsignedLong:8]];
  [v27 setWcmCellularWCI2ModePowerThreshold:[NSNumber numberWithInt:4294967288]];
  [v27 setWcmCellularWCI2ModeRBThresholdHigh:[NSNumber numberWithInt:0]];
  [v27 setWcmCellularWCI2ModeRBThresholdLow:[NSNumber numberWithInt:0]];
  [v27 setWcmCellularWCI2ModeLTETxDenial:[NSNumber numberWithInt:10]];
  [v27 setWcmCellularWCI2ModeMaxAllowedFrameDenials:[NSNumber numberWithInt:40]];
  return [v27 setWcmCellularWCI2ModeFrameDenialWindow:[NSNumber numberWithInt:200]];
}

id sub_100131498(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWCI2FrameSyncAssertOffset:1750];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-150];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-150];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-250];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-250];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:0];
  [a1 setWcmWCI2MWSInactivityAssertJitter:4];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:0];
  +[WCM_Logging logLevel:3 message:@"DLDebug_ Applying K Parameters"];
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex030_watchV4Macro", @"plist") options:2 format:&v36 error:&v37];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  id v31 = a1;
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  uint64_t v30 = (uint64_t)&v30;
  __chkstk_darwin(v4, v5, v6);
  uint64_t v9 = (char *)&v30 - v7 * (unint64_t)v8;
  uint64_t v10 = v3;
  id v33 = v9;
  uint64_t v11 = &v9[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v11 = 211;
  *(_OWORD *)(v11 + 4) = 0u;
  *(_OWORD *)(v11 + 20) = 0u;
  *(_OWORD *)(v11 + 36) = 0u;
  *(_OWORD *)(v11 + 52) = 0u;
  *(_OWORD *)(v11 + 68) = 0u;
  *(_OWORD *)(v11 + 84) = 0u;
  *((_OWORD *)v11 + 6) = 0u;
  if (v3)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v32 = 112 * v10;
    do
    {
      unsigned int v35 = [[[v2 objectAtIndex:v13] objectForKey:@"issueBand"] intValue];
      unsigned int v34 = [[[v2 objectAtIndex:v13] objectForKey:@"issueType"] intValue];
      unsigned __int8 v14 = [[[v2 objectAtIndex:v13] objectForKey:@"isWiFiDesense"] BOOLValue];
      uint64_t v15 = [(int)[v2 objectAtIndex:v13] objectForKey:@"cellTxPowerLimit"] intValue];
      double v16 = (double)(int)[v2 objectAtIndex:v13][@"cellFrequencyLimitForOOB"][@"intValue"];
      double v17 = (double)(int)[v2 objectAtIndex:v13][@"cellBandwidthLimitForOOB"][@"intValue"];
      unsigned int v18 = [[[v2 objectAtIndex:v13] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v13] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v13] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned int v21 = [[[v2 objectAtIndex:v13] objectForKey:@"antennaFilterPathSelection"] intValue];
      unsigned __int8 v22 = [[[v2 objectAtIndex:v13] objectForKey:@"wifiBtAgcCoexMode"] intValue];
      unsigned __int8 v23 = [[[v2 objectAtIndex:v13] objectForKey:@"btAgcCoexMode"] intValue];
      unsigned int v24 = &v33[v12];
      unsigned int v25 = v34;
      *(_DWORD *)unsigned int v24 = v35;
      *((_DWORD *)v24 + 1) = v25;
      v24[8] = v14;
      *(void *)(v24 + 17) = 0;
      *(void *)(v24 + 9) = 0;
      *((void *)v24 + 3) = 0;
      *((void *)v24 + 4) = v15;
      *((double *)v24 + 5) = v16;
      *((double *)v24 + 6) = v17;
      *((void *)v24 + 7) = 0;
      *((_DWORD *)v24 + 16) = v18;
      *(void *)(v24 + 68) = 0;
      *((_WORD *)v24 + 38) = 0;
      v24[78] = v19;
      v24[79] = v20;
      *((_DWORD *)v24 + 20) = 0;
      *((_DWORD *)v24 + 21) = v21;
      v24[88] = v22;
      *(_WORD *)(v24 + 89) = 0;
      v24[91] = 0;
      v24[92] = v23;
      *(void *)(v24 + 101) = 0;
      *(void *)(v24 + 93) = 0;
      ++v13;
      v12 += 112;
      *((_DWORD *)v24 + 27) = 0;
    }
    while (v32 != v12);
  }
  uint64_t v26 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v27 = v31;
  [v31 setWcmWiFiCellCoexIssueTable:v26];
  id v28 = [v27 wcmWiFiCellCoexIssueTable];
  [v28 configureBy:v33];
  [v27 setWcmCellRc1CoexIssueTable:[[WCM_CellularRc1CoexIssueTable alloc] initFromPlist:@"CoEx-Table-CellRC1-Coex001"]];
  [v27 setWcmCellularCoexB7DLRange:2620.0, 20.0];
  [v27 setWcmCellularCoexB7ULRange:2500.0, 20.0];
  [v27 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v27 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v27 setWcmCellularCoexB41A1Range:2496.0, 10.0];
  [v27 setWcmCellularCoexB41A2Range:2506.0, 59.0];
  [v27 setWcmCellularScanProtectionCellFrequencies:&off_100254728];
  [v27 setWcmCellularScanProtectionWiFiChannels:&off_100254788];
  [v27 setWcmCellularScanProtectionWiFiMaxDuration:&off_10023E0A0];
  [v27 setWcmCellularWCI2ModePolicy:[NSNumber numberWithUnsignedLong:8]];
  [v27 setWcmCellularWCI2ModePowerThreshold:[NSNumber numberWithInt:4294967288]];
  [v27 setWcmCellularWCI2ModeRBThresholdHigh:[NSNumber numberWithInt:0]];
  [v27 setWcmCellularWCI2ModeRBThresholdLow:[NSNumber numberWithInt:0]];
  [v27 setWcmCellularWCI2ModeLTETxDenial:[NSNumber numberWithInt:10]];
  [v27 setWcmCellularWCI2ModeMaxAllowedFrameDenials:+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 40)];
  return [v27 setWcmCellularWCI2ModeFrameDenialWindow:+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 200)];
}

id sub_100131AB4(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWCI2FrameSyncAssertOffset:1750];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-150];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-150];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-250];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-250];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:0];
  [a1 setWcmWCI2MWSInactivityAssertJitter:4];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:0];
  +[WCM_Logging logLevel:3 message:@"DLDebug_ Applying K Parameters"];
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  id v2 = +[NSPropertyListSerialization propertyListWithData:sub_100095D24(@"CoEx-Table-CellCoex030_watchV4Macro", @"plist") options:2 format:&v36 error:&v37];
  if (!v2) {
    return +[WCM_Logging logLevel:1 message:@"DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"];
  }
  id v31 = a1;
  +[WCM_Logging logLevel:4 message:@"DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"];
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  id v4 = +[WCM_Logging logLevel:4, @"DLDebug_ PlistConversion_ numofRow=%d", v3 message];
  uint64_t v30 = (uint64_t)&v30;
  __chkstk_darwin(v4, v5, v6);
  uint64_t v9 = (char *)&v30 - v7 * (unint64_t)v8;
  uint64_t v10 = v3;
  id v33 = v9;
  uint64_t v11 = &v9[v3 * (unint64_t)v8];
  *(_DWORD *)uint64_t v11 = 211;
  *(_OWORD *)(v11 + 4) = 0u;
  *(_OWORD *)(v11 + 20) = 0u;
  *(_OWORD *)(v11 + 36) = 0u;
  *(_OWORD *)(v11 + 52) = 0u;
  *(_OWORD *)(v11 + 68) = 0u;
  *(_OWORD *)(v11 + 84) = 0u;
  *((_OWORD *)v11 + 6) = 0u;
  if (v3)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v32 = 112 * v10;
    do
    {
      unsigned int v35 = [[[v2 objectAtIndex:v13] objectForKey:@"issueBand"] intValue];
      unsigned int v34 = [[[v2 objectAtIndex:v13] objectForKey:@"issueType"] intValue];
      unsigned __int8 v14 = [[[v2 objectAtIndex:v13] objectForKey:@"isWiFiDesense"] BOOLValue];
      uint64_t v15 = [(int)[v2 objectAtIndex:v13][@"cellTxPowerLimit"] intValue];
      double v16 = (double)(int)[v2 objectAtIndex:v13][@"cellFrequencyLimitForOOB"][@"intValue"];
      double v17 = (double)(int)[v2 objectAtIndex:v13][@"cellBandwidthLimitForOOB"][@"intValue"];
      unsigned int v18 = [[[v2 objectAtIndex:v13] objectForKey:@"btDiversityBlocklistType"] intValue];
      unsigned __int8 v19 = [[[v2 objectAtIndex:v13] objectForKey:@"btFirstChannelToAvoid"] intValue];
      unsigned __int8 v20 = [[[v2 objectAtIndex:v13] objectForKey:@"btLastChannelToAvoid"] intValue];
      unsigned int v21 = [[[v2 objectAtIndex:v13] objectForKey:@"antennaFilterPathSelection"] intValue];
      unsigned __int8 v22 = [[[v2 objectAtIndex:v13] objectForKey:@"wifiBtAgcCoexMode"] intValue];
      unsigned __int8 v23 = [[[v2 objectAtIndex:v13] objectForKey:@"btAgcCoexMode"] intValue];
      unsigned int v24 = &v33[v12];
      unsigned int v25 = v34;
      *(_DWORD *)unsigned int v24 = v35;
      *((_DWORD *)v24 + 1) = v25;
      v24[8] = v14;
      *(void *)(v24 + 17) = 0;
      *(void *)(v24 + 9) = 0;
      *((void *)v24 + 3) = 0;
      *((void *)v24 + 4) = v15;
      *((double *)v24 + 5) = v16;
      *((double *)v24 + 6) = v17;
      *((void *)v24 + 7) = 0;
      *((_DWORD *)v24 + 16) = v18;
      *(void *)(v24 + 68) = 0;
      *((_WORD *)v24 + 38) = 0;
      v24[78] = v19;
      v24[79] = v20;
      *((_DWORD *)v24 + 20) = 0;
      *((_DWORD *)v24 + 21) = v21;
      v24[88] = v22;
      *(_WORD *)(v24 + 89) = 0;
      v24[91] = 0;
      v24[92] = v23;
      *(void *)(v24 + 101) = 0;
      *(void *)(v24 + 93) = 0;
      ++v13;
      v12 += 112;
      *((_DWORD *)v24 + 27) = 0;
    }
    while (v32 != v12);
  }
  uint64_t v26 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  id v27 = v31;
  [v31 setWcmWiFiCellCoexIssueTable:v26];
  id v28 = [v27 wcmWiFiCellCoexIssueTable];
  [v28 configureBy:v33];
  [v27 setWcmCellRc1CoexIssueTable:[-[WCM_CellularRc1CoexIssueTable initFromPlist:]([WCM_CellularRc1CoexIssueTable alloc], "initFromPlist:", @"CoEx-Table-CellRC1-Coex001")];
  [v27 setWcmCellularCoexB7DLRange:2620.0, 20.0];
  [v27 setWcmCellularCoexB7ULRange:2500.0, 20.0];
  [v27 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [v27 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [v27 setWcmCellularCoexB41A1Range:2496.0, 10.0];
  [v27 setWcmCellularCoexB41A2Range:2506.0, 59.0];
  [v27 setWcmCellularScanProtectionCellFrequencies:&off_1002547E8];
  [v27 setWcmCellularScanProtectionWiFiChannels:&off_100254848];
  [v27 setWcmCellularScanProtectionWiFiMaxDuration:&off_10023E0A0];
  [v27 setWcmCellularWCI2ModePolicy:+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", 8)];
  [v27 setWcmCellularWCI2ModePowerThreshold:[NSNumber numberWithInt:4294967288]];
  [v27 setWcmCellularWCI2ModeRBThresholdHigh:[NSNumber numberWithInt:0]];
  [v27 setWcmCellularWCI2ModeRBThresholdLow:[NSNumber numberWithInt:0]];
  [v27 setWcmCellularWCI2ModeLTETxDenial:[NSNumber numberWithInt:10]];
  [v27 setWcmCellularWCI2ModeMaxAllowedFrameDenials:[NSNumber numberWithInt:40]];
  return [v27 setWcmCellularWCI2ModeFrameDenialWindow:[NSNumber numberWithInt:200]];
}

id sub_1001320D0(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWCI2FrameSyncAssertOffset:1750];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-150];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-150];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-250];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-250];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:0];
  [a1 setWcmWCI2MWSInactivityAssertJitter:4];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:0];
  [a1 setWcmWiFiCellCoexIssueTable:objc_alloc_init(WCM_WiFiCellCoexIssueBandTable)];
  [objc_msgSend(a1, "wcmWiFiCellCoexIssueTable") configureBy:&unk_100204E30];
  [a1 setWcmCellularCoexB7DLRange:2620.0, 40.0];
  [a1 setWcmCellularCoexB7ULRange:2500.0, 40.0];
  [a1 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [a1 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [a1 setWcmCellularCoexB41A1Range:2496.0, 20.0];
  [a1 setWcmCellularCoexB41A2Range:2516.0, 29.0];
  [a1 setWcmCellularScanProtectionCellFrequencies:&off_1002548A8];

  return [a1 setWcmCellularScanProtectionWiFiChannels:&off_100254908];
}

id sub_1001322F0(void *a1)
{
  [a1 setWcmBTSupportTDDFrameConfig:1];
  [a1 setWcmWiFiSupportFrameConfig:1];
  [a1 setWcmWiFiSupportWciSignalingConfig:1];
  [a1 setWcmWiFiRxProtectMode:&off_10023DD58];
  [a1 setWcmWiFiTxOnIndication:&off_10023DC68];
  [a1 setWcmWiFiScanJoinProtectDuration:&off_10023DD58];
  [a1 setWcmWiFiEnvelopeIndicationTimer:&off_10023DCC8];
  [a1 setWcmWiFiEnvelopeOnIndication:&off_10023DC68];
  [a1 setWcmWCI2FrameSyncAssertOffset:1750];
  [a1 setWcmWCI2FrameSyncAssertJitter:3];
  [a1 setWcmWCI2MWSRxAssertOffset:-150];
  [a1 setWcmWCI2MWSRxAssertJitter:4];
  [a1 setWcmWCI2MWSRxDeAssertOffset:-150];
  [a1 setWcmWCI2MWSRxDeAssertJitter:4];
  [a1 setWcmWCI2MWSTxAssertOffset:-250];
  [a1 setWcmWCI2MWSTxAssertJitter:4];
  [a1 setWcmWCI2MWSTxDeAssertOffset:-250];
  [a1 setWcmWCI2MWSTxDeAssertJitter:4];
  [a1 setWcmWCI2MWSPatternAssertOffset:0];
  [a1 setWcmWCI2MWSPatternAssertJitter:0];
  [a1 setWcmWCI2MWSInactivityAssertOffset:0];
  [a1 setWcmWCI2MWSInactivityAssertJitter:4];
  [a1 setWcmWCI2MWSScanFrequencyAssertOffset:0];
  [a1 setWcmWCI2MWSScanFrequencyAssertJitter:0];
  [a1 setWcmWCI2MWSPriorityAssertOffsetRequest:0];
  [a1 setWcmCellularLAACoexProtectCQIPeriod:100];
  [a1 setWcmCellularLAACoexThresholdIn:20];
  [a1 setWcmCellularLAACoexThresholdOut:10];
  [a1 setWcmCellularLAACoexDeactTimer:500];
  [a1 setWcmCellularLAACoexDeactStopTimer:500];
  [a1 setWcmWiFiWCI2TxDurationThresh:&off_10023E2B0];
  [a1 setWcmWiFiActiveScanThrottleMask:&off_10023DD58];
  [a1 setWcmWiFiActiveDwellTime:&off_10023DFE0];
  [a1 setWcmWiFiCellCoexIssueTable:objc_alloc_init(WCM_WiFiCellCoexIssueBandTable)];
  [objc_msgSend(a1, "wcmWiFiCellCoexIssueTable") configureBy:&unk_100206170];
  [a1 setWcmCellularCoexB7DLRange:2620.0, 40.0];
  [a1 setWcmCellularCoexB7ULRange:2500.0, 40.0];
  [a1 setWcmCellularCoexB40ARange:2340.0, 30.1];
  [a1 setWcmCellularCoexB40BRange:2370.1, 30.0];
  [a1 setWcmCellularCoexB41A1Range:2496.0, 20.0];
  [a1 setWcmCellularCoexB41A2Range:2516.0, 174.0];
  [a1 setWcmCellularScanProtectionCellFrequencies:&off_100254980];

  return [a1 setWcmCellularScanProtectionWiFiChannels:&off_1002549F8];
}

id sub_100132E48(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleNetworkdRestart];
}

id sub_100132FD4(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  int v4 = *(_DWORD *)(a1 + 40);
  uint64_t v5 = "WRM_NETWORK_TYPE_INVALID!!!";
  if (v4 == 1) {
    uint64_t v5 = "CELLULAR";
  }
  if (v4) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = "WIFI";
  }
  if a2 < 7 && ((0x7Du >> a2))
  {
    unsigned int v7 = off_100211DD0[(int)a2];
  }
  else
  {
    unsigned int v7 = "SF_ADVICE_INVALID_VALUE!!!";
    if (a2 == 7) {
      unsigned int v7 = "kNetworkAdvisoryDefiniteUse";
    }
  }
  id result = +[WCM_Logging logLevel:24, @"iRAT: Symptom Framework returns a network advice for %s: %d (%s)", v6, a2, v7 message];
  int v9 = *(_DWORD *)(a1 + 40);
  if (!v9)
  {
    uint64_t v10 = 8;
    goto LABEL_16;
  }
  if (v9 == 1)
  {
    uint64_t v10 = 12;
LABEL_16:
    *(_DWORD *)(*(void *)(a1 + 32) + v10) = v2;
  }
  ++*(void *)(*(void *)(a1 + 32) + 200);
  return result;
}

id sub_10013322C(uint64_t a1, void *a2, void *a3)
{
  *(void *)(*(void *)(a1 + 32) + 24) = [a2 copy];
  id v6 = a3;
  [*(id *)(a1 + 32) getAgeOfMetricCurrInstant];
  *(double *)(*(void *)(a1 + 32) + 184) = fmax(v7, 0.0);
  int v8 = *(_DWORD *)(a1 + 40);
  int v9 = "WRM_NETWORK_TYPE_INVALID!!!";
  if (v8 == 1) {
    int v9 = "CELLULAR";
  }
  if (v8) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = "WIFI";
  }
  +[WCM_Logging logLevel:20, @"iRAT: Symptom Framework returns full score for INSTANT %s (age %.2lfsec): data: %@ error: %@", v10, *(void *)(*(void *)(a1 + 32) + 184), a2, a3 message];

  [*(id *)(a1 + 32) getWifiNetMetricCurrInstant:1];
  uint64_t v12 = v11;
  [*(id *)(a1 + 32) getWifiNetMetricCurrInstant:2];
  uint64_t v14 = v13;
  [*(id *)(a1 + 32) getWifiNetMetricCurrInstant:3];
  uint64_t v16 = v15;
  [*(id *)(a1 + 32) getWifiNetMetricCurrInstant:4];
  uint64_t v18 = v17;
  [*(id *)(a1 + 32) getWifiNetMetricCurrInstant:5];
  uint64_t v20 = v19;
  [*(id *)(a1 + 32) getWifiNetMetricCurrInstant:6];
  uint64_t v22 = v21;
  [*(id *)(a1 + 32) getWifiNetMetricCurrInstant:7];
  uint64_t v24 = v23;
  [*(id *)(a1 + 32) getWifiNetMetricCurrInstant:8];
  +[WCM_Logging logLevel:24, @"iRAT: Symptom Metrics for INSTANT: connFail %.2f faultyStay %.2f lowqStay %.2f txRetry %.2f rxDup %.2f minRTT %lf avgRTT %.2f varRTT %.2f", v12, v14, v16, v18, v20, v22, v24, v25 message];
  [*(id *)(a1 + 32) getWifiNetMetricCurrInstant:6];
  *(void *)(*(void *)(a1 + 32) + 88) = v26;
  [*(id *)(a1 + 32) getWifiNetMetricCurrInstant:7];
  *(void *)(*(void *)(a1 + 32) + 96) = v27;
  [*(id *)(a1 + 32) getWifiNetMetricCurrInstant:8];
  *(void *)(*(void *)(a1 + 32) + 104) = v28;
  *(void *)(*(void *)(a1 + 32) + 56) = *(void *)(*(void *)(a1 + 32) + 72);
  *(void *)(*(void *)(a1 + 32) + 64) = *(void *)(*(void *)(a1 + 32) + 80);
  *(void *)(*(void *)(a1 + 32) + 128) = *(void *)(*(void *)(a1 + 32) + 136);
  [*(id *)(a1 + 32) getWifiNetMetricCurrInstant:5];
  *(void *)(*(void *)(a1 + 32) + 112) = v29;
  [*(id *)(a1 + 32) getWifiNetMetricCurrInstant:4];
  *(void *)(*(void *)(a1 + 32) + 120) = v30;
  *(void *)(*(void *)(a1 + 32) + 152) = *(void *)(*(void *)(a1 + 32) + 144);
  [*(id *)(a1 + 32) getWifiNetMetricCurrInstant:9];
  if (v31 >= 0.0) {
    *(double *)(*(void *)(a1 + 32) + 72) = v31;
  }
  else {
    +[WCM_Logging logLevel:20 message:@"iRAT: Symptom Framework: Unable to  receive NETWORK_SYMPTOM_CONN_ATTEMPT"];
  }
  [*(id *)(a1 + 32) getWifiNetMetricCurrInstant:10];
  if (v32 >= 0.0) {
    *(double *)(*(void *)(a1 + 32) + 80) = v32;
  }
  else {
    +[WCM_Logging logLevel:20 message:@"iRAT: Symptom Framework: Unable to receive NETWORK_SYMPTOM_CONN_SUCC"];
  }
  [*(id *)(a1 + 32) getWifiNetMetricCurrInstant:11];
  if (v33 >= 0.0) {
    *(double *)(*(void *)(a1 + 32) + 136) = v33;
  }
  else {
    +[WCM_Logging logLevel:20 message:@"iRAT: Symptom Framework: Unable to receive NETWORK_SYMPTOM_INPUT_PKTS"];
  }
  [*(id *)(a1 + 32) getWifiNetMetricCurrInstant:13];
  if (v34 >= 0.0) {
    *(double *)(*(void *)(a1 + 32) + 144) = v34;
  }
  else {
    +[WCM_Logging logLevel:20 message:@"iRAT: Symptom Framework: Unable to receive NETWORK_SYMPTOM_WIFI_IN_BYTES"];
  }
  unsigned int v35 = *(void **)(a1 + 32);
  id result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, @"iRAT: Symptom Metrics for INSTANT: PreConnAttempt %.2f Current Conn Attempt %.2f PrevConnSuccess %.2f CurrentConnSucc %.2f PrevInputPkts %.2f CurrentPacketsIn %lf CurrentBytesIn %lf BackHaulStatus %d", v35[7], v35[9], v35[8], v35[10], v35[16], v35[17], v35[19], [v35 evaluateBackHaulLink]);
  ++*(void *)(*(void *)(a1 + 32) + 216);
  return result;
}

id sub_1001336D4()
{
  return +[WCM_Logging logLevel:24, @"iRAT: Receieved TCP Connection fallback event status: %d", tcp_fallback_watcher_fallback_inuse() message];
}

void sub_1001337C8(id a1, id a2, id a3, BOOL *a4)
{
  if ((objc_msgSend(a3, "isEqual:", +[NSNull null](NSNull, "null", a3, a4)) & 1) == 0)
  {
    id v5 = [[objc_msgSend(a3, "objectForKeyedSubscript:", kPerformanceFlowRemoteID) UTF8String];
    [objc_msgSend(a3, "objectForKeyedSubscript:", kPerformanceFlowConnSuccesses) doubleValue];
    uint64_t v7 = v6;
    [objc_msgSend(a3, "objectForKeyedSubscript:", kPerformanceFlowConnAttempts) doubleValue];
    uint64_t v9 = v8;
    [objc_msgSend(a3, "objectForKeyedSubscript:", kPerformanceFlowOverallTime) doubleValue];
    uint64_t v11 = v10;
    [objc_msgSend(a3, "objectForKeyedSubscript:", kPerformanceFlowTimesThresholded) doubleValue];
    uint64_t v13 = v12;
    [objc_msgSend(a3, "objectForKeyedSubscript:", kPerformanceFlowTxPackets) doubleValue];
    uint64_t v15 = v14;
    [objc_msgSend(a3, "objectForKeyedSubscript:", kPerformanceFlowTxReTxPackets) doubleValue];
    uint64_t v17 = v16;
    [objc_msgSend(a3, "objectForKeyedSubscript:", kPerformanceFlowTxFailPackets) doubleValue];
    uint64_t v19 = v18;
    [objc_msgSend(a3, "objectForKeyedSubscript:", kPerformanceFlowAvgUsecsEstabTime) doubleValue];
    +[WCM_Logging logLevel:20, @"iRAT: Symptom Metrics for IKEv2: Tunnel ID:%-20.18s Flow:%16.0f, ConnSucc:%16.0f, ConnAttempt:%16.0f, OverallStat(s):%16.0f, Thresholded:%16.0f, TxPackets:%16.0f, ReTxPackets:%16.0f, FailPackets:%16.0f", v5, v7, v9, v11, v13, v15, v17, v19, v20 message];
  }
}

id sub_100133B7C(uint64_t a1, uint64_t a2)
{
  id result = [*(id *)(a1 + 32) displayIKEMetrics:a2];
  ++*(void *)(*(void *)(a1 + 32) + 216);
  return result;
}

void sub_100133BC8(id a1, id a2, id a3, BOOL *a4)
{
  if ((objc_msgSend(a3, "isEqual:", +[NSNull null](NSNull, "null", a3, a4)) & 1) == 0)
  {
    id v6 = [a2 UTF8String];
    [objc_msgSend(a3, "objectForKeyedSubscript:", kPerformanceFlowTxPackets) doubleValue];
    uint64_t v8 = v7;
    uint64_t v9 = kPerformanceFlowTxReTxPackets;
    [objc_msgSend(a3, "objectForKeyedSubscript:", kPerformanceFlowTxReTxPackets) doubleValue];
    uint64_t v11 = v10;
    [objc_msgSend(a3, "objectForKeyedSubscript:", v9) doubleValue];
    uint64_t v13 = v12;
    [objc_msgSend(a3, "objectForKeyedSubscript:", kPerformanceFlowTxFailPackets) doubleValue];
    uint64_t v15 = v14;
    [objc_msgSend(a3, "objectForKeyedSubscript:", kPerformanceFlowTxReTxInterval) doubleValue];
    +[WCM_Logging logLevel:20, @"iRAT: Symptom Metrics for IKEv2: Key String:%-20.18s FlowTxPackets:%16.0f,FlowTxReTxPackets:%16.0f, :%16.0f, OverallStat(s):%16.0f, Thresholded:%16.0f, TxPackets:%16.0f, ReTxPackets:%16.0f, FailPackets:%16.0f", v6, v8, v11, v13, v15, v16 message];
  }
}

id sub_100133DD4(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) displayWatchpointHit:a2];
  unsigned __int16 v3 = *(void **)(a1 + 32);

  return [v3 notifyIRATManager:150];
}

void sub_100134074(id a1, NSDictionary *a2)
{
  id v2 = [(NSDictionary *)a2 objectForKeyedSubscript:kSymptomDiagnosticReplySuccess];

  [v2 BOOLValue];
}

uint64_t sub_10013650C()
{
  uint64_t v3 = 0;
  int v4 = &v3;
  uint64_t v5 = 0x3052000000;
  id v6 = sub_100139B64;
  uint64_t v7 = sub_100139B74;
  uint64_t v0 = qword_10027D358;
  uint64_t v8 = qword_10027D358;
  if (!qword_10027D358)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    void v2[2] = sub_100139B80;
    v2[3] = &unk_10020DAF8;
    void v2[4] = &v3;
    sub_100139B80((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1001365E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001365FC()
{
  uint64_t v3 = 0;
  int v4 = &v3;
  uint64_t v5 = 0x3052000000;
  id v6 = sub_100139B64;
  uint64_t v7 = sub_100139B74;
  uint64_t v0 = qword_10027D368;
  uint64_t v8 = qword_10027D368;
  if (!qword_10027D368)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    void v2[2] = sub_100139D40;
    v2[3] = &unk_10020DAF8;
    void v2[4] = &v3;
    sub_100139D40((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1001366D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001366EC()
{
  uint64_t v3 = 0;
  int v4 = &v3;
  uint64_t v5 = 0x3052000000;
  id v6 = sub_100139B64;
  uint64_t v7 = sub_100139B74;
  uint64_t v0 = qword_10027D370;
  uint64_t v8 = qword_10027D370;
  if (!qword_10027D370)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    void v2[2] = sub_100139D98;
    v2[3] = &unk_10020DAF8;
    void v2[4] = &v3;
    sub_100139D98((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1001367C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001367DC()
{
  uint64_t v3 = 0;
  int v4 = &v3;
  uint64_t v5 = 0x3052000000;
  id v6 = sub_100139B64;
  uint64_t v7 = sub_100139B74;
  uint64_t v0 = qword_10027D378;
  uint64_t v8 = qword_10027D378;
  if (!qword_10027D378)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    void v2[2] = sub_100139DF0;
    v2[3] = &unk_10020DAF8;
    void v2[4] = &v3;
    sub_100139DF0((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1001368B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

NSDictionary *sub_100136CB4(uint64_t a1)
{
  v5[0] = @"counter";
  v6[0] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 8)];
  v5[1] = @"wifiRssi";
  v6[1] = +[NSNumber numberWithLongLong:*(void *)(*(void *)(a1 + 32) + 16)];
  void v5[2] = @"wifiSNR";
  void v6[2] = +[NSNumber numberWithLongLong:*(void *)(*(void *)(a1 + 32) + 24)];
  void v5[3] = @"bssLoad";
  v6[3] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 36)];
  void v5[4] = @"cca";
  v6[4] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 32)];
  void v5[5] = @"qbssLoad";
  void v6[5] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 36)];
  void v5[6] = @"stationCount";
  void v6[6] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 60)];
  v5[7] = @"wifiEstimatedBandwitdh";
  v6[7] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 64)];
  void v5[8] = @"wifiRxPhyRate";
  v6[8] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 40)];
  v5[9] = @"wifiTxPhyRate";
  v6[9] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 52)];
  v5[10] = @"wifiTxPER";
  v6[10] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 48)];
  v5[11] = @"wifiRxRetry";
  v6[11] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 44)];
  v5[12] = @"captiveNetworks";
  v6[12] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 32) + 56)];
  v5[13] = @"dataLQM";
  v6[13] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 120)];
  v5[14] = @"voiceLQM";
  v6[14] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 124)];
  v5[15] = @"signalBar";
  v6[15] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 112)];
  v5[16] = @"cellRsrp";
  v6[16] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 128)];
  v5[17] = @"cellRsrq";
  v6[17] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 132)];
  v5[18] = @"cellSnr";
  v6[18] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 136)];
  v5[19] = @"facetimeAction";
  v6[19] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 88)];
  v5[20] = @"facetimePacketLoss";
  v6[20] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 92)];
  v5[21] = @"facetimeTimeDelay";
  v6[21] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 96)];
  v5[22] = @"iRATRecommendation";
  uint64_t v2 = *(void *)(a1 + 32);
  v6[22] = *(void *)(v2 + 72);
  v5[23] = @"iRATRecommendationReason";
  v6[23] = *(void *)(v2 + 80);
  v5[24] = @"ratType";
  CFStringRef v3 = *(const __CFString **)(v2 + 104);
  if (!v3) {
    CFStringRef v3 = @"INVALID_RAT";
  }
  v6[24] = v3;
  v5[25] = @"alertedMode";
  v6[25] = +[NSNumber numberWithBool:*(unsigned __int8 *)(v2 + 140)];
  v5[26] = @"cellMode";
  v6[26] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 32) + 141)];
  v5[27] = @"isPCDetected";
  v6[27] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 32) + 142)];
  v5[28] = @"isStallDetected";
  v6[28] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 32) + 143)];
  v5[29] = @"audioErasure";
  v6[29] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 144)];
  v5[30] = @"videoErasure";
  v6[30] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 148)];
  return +[NSDictionary dictionaryWithObjects:v6 forKeys:v5 count:31];
}

NSDictionary *sub_100137228(uint64_t a1)
{
  v8[0] = @"ccAssertion";
  v9[0] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 16)];
  v8[1] = @"enableCMAS";
  v9[1] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 20)];
  void v8[2] = @"enableTelephony";
  void v9[2] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 24)];
  void v8[3] = @"isTriggeredByProximityChange";
  v9[3] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 28)];
  v8[4] = @"newLinkState";
  void v9[4] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 32)];
  v8[5] = @"oldLinkState";
  v9[5] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 36)];
  void v8[6] = @"siriApp";
  v9[6] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 40)];
  v8[7] = @"wifiProximity";
  v9[7] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 44)];
  v8[8] = @"btRssi";
  v9[8] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 48)];
  v8[9] = @"wifiRssi";
  void v9[9] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 52)];
  v8[10] = @"bundleID";
  uint64_t v2 = *(void *)(a1 + 32);
  CFStringRef v3 = *(const __CFString **)(v2 + 8);
  if (!v3) {
    CFStringRef v3 = &stru_100226328;
  }
  v9[10] = v3;
  v8[11] = @"mModeState";
  v9[11] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v2 + 56)];
  v8[12] = @"mModeStateDuration";
  v9[12] = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 40)];
  v8[13] = @"prevMModeState";
  int v4 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 48)];
  CFStringRef v5 = @"EventTrigger";
  if (*(unsigned char *)(a1 + 52)) {
    CFStringRef v5 = @"Query";
  }
  v9[13] = v4;
  v9[14] = v5;
  v8[14] = @"triggerType";
  v8[15] = @"HighPowerMode";
  if (*(unsigned char *)(*(void *)(a1 + 32) + 60)) {
    CFStringRef v6 = @"On";
  }
  else {
    CFStringRef v6 = @"Off";
  }
  v9[15] = v6;
  return +[NSDictionary dictionaryWithObjects:v9 forKeys:v8 count:16];
}

NSDictionary *sub_100137598(uint64_t a1)
{
  v6[0] = @"wifiRssi";
  v7[0] = +[NSNumber numberWithLongLong:*(void *)(*(void *)(a1 + 32) + 80)];
  v6[1] = @"callStatus";
  v7[1] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 8)];
  void v6[2] = @"dataLinkPref";
  void v7[2] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 12)];
  v6[3] = @"voiceLinkPref";
  void v7[3] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 16)];
  v6[4] = @"appType";
  uint64_t v2 = *(void *)(a1 + 32);
  void v7[4] = *(void *)(v2 + 24);
  void v6[5] = @"motionState";
  v7[5] = +[NSNumber numberWithInt:*(unsigned int *)(v2 + 32)];
  void v6[6] = @"cellRSRP";
  v7[6] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 36)];
  v6[7] = @"cellSINR";
  v7[7] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 40)];
  v6[8] = @"dataAppStatus";
  unsigned char v7[8] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 48)];
  v6[9] = @"dataLQM";
  v7[9] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 52)];
  v6[10] = @"voiceLQM";
  v7[10] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 56)];
  v6[11] = @"ratType";
  uint64_t v3 = *(void *)(a1 + 32);
  CFStringRef v4 = *(const __CFString **)(v3 + 64);
  if (!v4) {
    CFStringRef v4 = @"INVALID_RAT";
  }
  v7[11] = v4;
  v6[12] = @"serviceType";
  v7[12] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v3 + 72)];
  v6[13] = @"wifiSNR";
  v7[13] = +[NSNumber numberWithLongLong:*(void *)(*(void *)(a1 + 32) + 88)];
  v6[14] = @"bcnPer";
  v7[14] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 96)];
  v6[15] = @"cca";
  v7[15] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 100)];
  v6[16] = @"qbssLoad";
  v7[16] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 104)];
  v6[17] = @"stationCount";
  v7[17] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 108)];
  v6[18] = @"wifiRxPhyRate";
  v7[18] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 116)];
  v6[19] = @"wifiRxRetry";
  v7[19] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 120)];
  v6[20] = @"wifiTxPER";
  v7[20] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 124)];
  v6[21] = @"wifiTxPhyRate";
  v7[21] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 128)];
  v6[22] = @"captiveNetworks";
  v7[22] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 32) + 132)];
  v6[23] = @"decisionVIBE";
  v7[23] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 140)];
  v6[24] = @"decisionVO";
  v7[24] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 144)];
  v6[25] = @"expectedThroughputVIBE";
  v7[25] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 148)];
  v6[26] = @"lqmScoreWifi";
  v7[26] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 156)];
  v6[27] = @"packetLifetimeVIBE";
  v7[27] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 160)];
  v6[28] = @"pkgLifeTimeVO";
  v7[28] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 164)];
  v6[29] = @"pktLossRateVO";
  v7[29] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 168)];
  return +[NSDictionary dictionaryWithObjects:v7 forKeys:v6 count:30];
}

NSDictionary *sub_100137AEC(uint64_t a1)
{
  v9[0] = @"bSSLoad";
  v11[0] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 40)];
  v9[1] = @"lTERSRP";
  v11[1] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 40) + 4)];
  void v9[2] = @"lTEVoiceLQM";
  v11[2] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 40) + 44)];
  v9[3] = @"captiveNetwork";
  v11[3] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 40) + 24)];
  void v9[4] = @"signalBar";
  v11[4] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 56)];
  v9[5] = @"lTEDataLQM";
  v11[5] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 40) + 48)];
  v9[6] = @"latteNominalJitterBufferSize";
  v11[6] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 60)];
  v9[7] = @"latteRTPPacketLoss";
  v11[7] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 68)];
  v9[8] = @"latteErasures";
  v11[8] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 72)];
  void v9[9] = @"latteDejitterBufferUnderflow";
  uint64_t v2 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 64)];
  uint64_t v3 = *(unsigned int **)(a1 + 40);
  CFStringRef v4 = (const __CFString *)*((void *)v3 + 11);
  if (!v4) {
    CFStringRef v4 = @"Unknown";
  }
  v11[9] = v2;
  v11[10] = v4;
  v9[10] = @"wRMRecommendedRAT";
  v9[11] = @"wiFiRSSI";
  v11[11] = +[NSNumber numberWithInt:*v3];
  v9[12] = @"wiFiRxRetry";
  v11[12] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 28)];
  v9[13] = @"wiFiSINR";
  v11[13] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 12)];
  v9[14] = @"wiFiTxPER";
  v11[14] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 8)];
  v9[15] = @"hOCapability";
  v11[15] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 40) + 76)];
  void v9[16] = @"iWLANStatus";
  v11[16] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 40) + 96)];
  v9[17] = @"wOWEnabled";
  v11[17] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 40) + 25)];
  v9[18] = @"currentCellularAvailabilityStatus";
  if (*(unsigned char *)(a1 + 48))
  {
    CFStringRef v5 = (const __CFString *)[*(id *)(a1 + 32) getCurrentCellularAvailabilityStatus];
    int v6 = *(unsigned __int8 *)(a1 + 48);
    CFStringRef v12 = v5;
    CFStringRef v10 = @"lastDonatedCellularAvailabilityStatus";
    if (v6) {
      CFStringRef v7 = (const __CFString *)[*(id *)(a1 + 32) getPreviousCellularAvailabilityStatus];
    }
    else {
      CFStringRef v7 = @"Not Applicable";
    }
  }
  else
  {
    CFStringRef v7 = @"Not Applicable";
    CFStringRef v12 = @"Not Applicable";
    CFStringRef v10 = @"lastDonatedCellularAvailabilityStatus";
  }
  CFStringRef v13 = v7;
  return +[NSDictionary dictionaryWithObjects:v11 forKeys:v9 count:20];
}

void sub_1001385C4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

NSDictionary *sub_1001385EC(uint64_t a1)
{
  v7[0] = @"counter";
  v8[0] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 8)];
  v7[1] = @"numStall";
  v8[1] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 368)];
  void v7[2] = @"isEnd";
  void v8[2] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 32) + 377)];
  void v7[3] = @"lPM";
  void v8[3] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 32) + 378)];
  void v7[4] = @"offline";
  v8[4] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 32) + 379)];
  v7[5] = @"online";
  v8[5] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 32) + 380)];
  v7[6] = @"event";
  void v8[6] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 12)];
  v7[7] = @"bufferInterval";
  v8[7] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 16)];
  unsigned char v7[8] = @"lqmScoreWifi";
  v8[8] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 84)];
  v7[9] = @"decisionVIBE";
  v8[9] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 88)];
  v7[10] = @"decisionVO";
  v8[10] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 92)];
  v7[11] = @"goodDecisionsCounterVO";
  v8[11] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 96)];
  v7[12] = @"badDecisionsCounterVO";
  v8[12] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 100)];
  v7[13] = @"goodDecisionsCounterVIBE";
  v8[13] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 104)];
  v7[14] = @"badDecisionsCounterVIBE";
  v8[14] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 108)];
  v7[15] = @"invalidDecisionsCounterVIBE";
  v8[15] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 112)];
  v7[16] = @"invalidDecisionsCounterVO";
  void v8[16] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 112)];
  v7[17] = @"txber";
  v8[17] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 152)];
  v7[18] = @"rxRetry";
  v8[18] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 156)];
  v7[19] = @"weightedAveragePhyrateRx";
  v8[19] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 136)];
  v7[20] = @"weightedAveragePhyrateTx";
  v8[20] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 140)];
  v7[21] = @"weightedAverageRssi";
  v8[21] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 144)];
  v7[22] = @"weightedAverageSnr";
  v8[22] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 148)];
  v7[23] = @"devicePointOfInterest";
  v8[23] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 160)];
  v7[24] = @"wrmRecommendedRAT";
  v8[24] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 204)];
  v7[25] = @"wifiModelConfidenceLevel";
  v8[25] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 208)];
  v7[26] = @"wifiModelVersion";
  v8[26] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 212)];
  v7[27] = @"mlPredictedWiFiBW";
  v8[27] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 216)];
  v7[28] = @"mlPredictedCellBW";
  v8[28] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 220)];
  v7[29] = @"expectedThroughputVIBE";
  v8[29] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 116)];
  void v7[30] = @"expectedThroughputVO";
  v8[30] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 120)];
  v7[31] = @"packetLifetimeVIBE";
  v8[31] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 124)];
  unsigned char v7[32] = @"pkgLifeTimeVO";
  v8[32] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 128)];
  v7[33] = @"pktLossRateVO";
  v8[33] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 132)];
  v7[34] = @"cellRsrp";
  v8[34] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 164)];
  v7[35] = @"cellSinr";
  v8[35] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 168)];
  unsigned char v7[36] = @"lqmScorecellular";
  v8[36] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 172)];
  v7[37] = @"ratType";
  uint64_t v2 = *(void *)(a1 + 32);
  CFStringRef v3 = *(const __CFString **)(v2 + 184);
  if (!v3) {
    CFStringRef v3 = @"INVALID_RAT";
  }
  v8[37] = v3;
  v7[38] = @"rrcState";
  v8[38] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v2 + 176)];
  v7[39] = @"cellLteRSRQ";
  v8[39] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 304)];
  v7[40] = @"cellARFCN";
  v8[40] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 308)];
  v7[41] = @"cellBandInfo";
  v8[41] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 316)];
  v7[42] = @"cellChannelBW";
  v8[42] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 320)];
  v7[43] = @"cellEstimatedBW";
  v8[43] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 312)];
  v7[44] = @"cellModelConfidenceLevel";
  v8[44] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 364)];
  v7[45] = @"cellNrRSRP";
  v8[45] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 292)];
  v7[46] = @"cellNrRSRQ";
  v8[46] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 296)];
  v7[47] = @"cellNrSNR";
  v8[47] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 300)];
  v7[48] = @"btWiFiCoexState";
  v8[48] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 240)];
  v7[49] = @"wifinumberOfSpatialStreams";
  v8[49] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 256)];
  v7[50] = @"wifiguardinterval";
  v8[50] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 260)];
  v7[51] = @"wifimcsindex";
  v8[51] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 264)];
  v7[52] = @"wifilowDataMode";
  v8[52] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 248)];
  v7[53] = @"wifichannel";
  v8[53] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 252)];
  v7[54] = @"isWfiCaptive";
  v8[54] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 244)];
  v7[55] = @"maxDLCAConfigured";
  v8[55] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 336)];
  v7[56] = @"totalConfiguredBw";
  v8[56] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 340)];
  v7[57] = @"nrConfiguredBw";
  v8[57] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 344)];
  v7[58] = @"nrTotalScheduledMimoLayers";
  v8[58] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 348)];
  v7[59] = @"totalConfiguredMimoLayers";
  v8[59] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 352)];
  v7[60] = @"lteMaxScheduledMimoLayersInACell";
  v8[60] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 356)];
  v7[61] = @"nrMaxDlModulation";
  v8[61] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 360)];
  v7[62] = @"lqmScoreBT";
  v8[62] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 192)];
  v7[63] = @"rxRetransmissionRate";
  v8[63] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 196)];
  v7[64] = @"txRetransmissionRate";
  v8[64] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 200)];
  v7[65] = @"actualHighBandwidth";
  v8[65] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 20)];
  v7[66] = @"actualLowBandwidth";
  v8[66] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 24)];
  v7[67] = @"pActualLowBandwidth";
  v8[67] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 28)];
  v7[68] = @"maxOfActualLowBandwidth";
  v8[68] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 32)];
  v7[69] = @"deviation";
  v8[69] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 36)];
  v7[70] = @"estimatedHighBandwidth";
  v8[70] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 40)];
  v7[71] = @"estimatedLowBandwidth";
  v8[71] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 44)];
  v7[72] = @"movingAvgHighBandwidth";
  v8[72] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 48)];
  v7[73] = @"cmDataSentCount";
  v8[73] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 56)];
  v7[74] = @"cmDataSentDuration";
  v8[74] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 60)];
  v7[75] = @"wifChannelBW";
  v8[75] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 228)];
  v7[76] = @"wifChannelType";
  v8[76] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 232)];
  v7[77] = @"wifiCapability";
  v8[77] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 236)];
  v7[78] = @"tcpRTTAvg";
  v8[78] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 268)];
  v7[79] = @"tcpRTTvar";
  v8[79] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 276)];
  v7[80] = @"ratioDupeBytes";
  v8[80] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 280)];
  v7[81] = @"ratioOOBBytes";
  v8[81] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 284)];
  v7[82] = @"cellNsaEnabled";
  v8[82] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 32) + 288)];
  v7[83] = @"isFR1";
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v4 + 288))
  {
    CFStringRef v5 = +[NSNumber numberWithBool:*(unsigned __int8 *)(v4 + 289)];
    uint64_t v4 = *(void *)(a1 + 32);
  }
  else
  {
    CFStringRef v5 = (NSNumber *)&__kCFBooleanFalse;
  }
  v8[83] = v5;
  v7[84] = @"movingAvgLowBandwidth";
  v8[84] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v4 + 52)];
  v7[85] = @"wifiRssi";
  v8[85] = +[NSNumber numberWithLongLong:*(void *)(*(void *)(a1 + 32) + 64)];
  v7[86] = @"phyRate";
  v8[86] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 72)];
  v7[87] = @"cca";
  v8[87] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 76)];
  v7[88] = @"qbssLoad";
  v8[88] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 80)];
  v7[89] = @"videoStreamingStallTime";
  v8[89] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 372)];
  return +[NSDictionary dictionaryWithObjects:v8 forKeys:v7 count:90];
}

NSDictionary *sub_1001392A0(uint64_t a1)
{
  v5[0] = @"cellDataLQM";
  v6[0] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 8)];
  v5[1] = @"cellDlBw";
  v6[1] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 12)];
  void v5[2] = @"cellEstimatedBw";
  void v6[2] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 16)];
  void v5[3] = @"cellEstimatedLoad";
  v6[3] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 20)];
  void v5[4] = @"cellLteEstimatedThroughput";
  v6[4] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 24)];
  void v5[5] = @"cellLteRSRP";
  void v6[5] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 28)];
  void v5[6] = @"cellLteRSRQ";
  void v6[6] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 32)];
  v5[7] = @"cellLteSNR";
  v6[7] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 36)];
  void v5[8] = @"cellMaxDlCaNumConfigured";
  v6[8] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 40)];
  v5[9] = @"cellMaxUlCaNumConfigured";
  v6[9] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 44)];
  v5[10] = @"cellNrEstimatedThroughput";
  v6[10] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 48)];
  v5[11] = @"cellNrFR2active";
  v6[11] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 52)];
  v5[12] = @"cellNrRSRP";
  v6[12] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 56)];
  v5[13] = @"cellNrRSRQ";
  v6[13] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 60)];
  v5[14] = @"cellNrSNR";
  v6[14] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 64)];
  v5[15] = @"cellNsaEnabled";
  v6[15] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 68)];
  v5[16] = @"cellRatType";
  uint64_t v2 = *(void *)(a1 + 32);
  CFStringRef v3 = *(const __CFString **)(v2 + 72);
  if (!v3) {
    CFStringRef v3 = @"INVALID_RAT";
  }
  v6[16] = v3;
  v5[17] = @"cellUlBw";
  v6[17] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v2 + 84)];
  v5[18] = @"recommendedlink";
  v6[18] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 88)];
  v5[19] = @"wifPoi";
  v6[19] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 92)];
  v5[20] = @"wifiCca";
  v6[20] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 96)];
  v5[21] = @"wifiEstThoughtput";
  v6[21] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 100)];
  v5[22] = @"wifiQbssLoad";
  v6[22] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 104)];
  v5[23] = @"wifiRssi";
  v6[23] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 108)];
  v5[24] = @"wifiRxRetry";
  v6[24] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 112)];
  v5[25] = @"wifiSnr";
  v6[25] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 116)];
  v5[26] = @"wifiStationCount";
  v6[26] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 120)];
  v5[27] = @"wifiTxPER";
  v6[27] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 124)];
  v5[28] = @"wifiWghtAVGRXPHYRATE";
  v6[28] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 128)];
  v5[29] = @"wifiWghtAVGSNR";
  v6[29] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 132)];
  v5[30] = @"wifiWghtAVGTXPHYRATE";
  void v6[30] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 136)];
  void v5[31] = @"wifiWgtAVGRSSI";
  void v6[31] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 140)];
  v5[32] = @"wifiWifiEstThoughtputConfidence";
  v6[32] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 144)];
  v5[33] = @"fr2DBRecommendation";
  v6[33] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 32) + 149)];
  v5[34] = @"locationDBFR1Count";
  v6[34] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 152)];
  v5[35] = @"locationDBFR2Count";
  v6[35] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 156)];
  v5[36] = @"highThermalTemperatureNotification";
  v6[36] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 32) + 160)];
  v5[37] = @"wiFiPredictedThroughput";
  v6[37] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 164)];
  v5[38] = @"wRMRecommendationReason";
  v6[38] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 168)];
  v5[39] = @"wifiRecommendationScore";
  v6[39] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 172)];
  v5[40] = @"wifiRecommendationConfidence";
  v6[40] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 176)];
  v5[41] = @"cellularRecommendationScore";
  v6[41] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 180)];
  v5[42] = @"cellularRecommendationConfidence";
  v6[42] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 184)];
  v5[43] = @"radioCoverage";
  v6[43] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 188)];
  v5[44] = @"radioFrequency";
  v6[44] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 192)];
  v5[45] = @"triggerReason";
  v6[45] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 196)];
  v5[46] = @"applicationCategory";
  v6[46] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 200)];
  v5[47] = @"cellTotalMimoLayers";
  v6[47] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 204)];
  v5[48] = @"totalNrBandwidth";
  v6[48] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 208)];
  v5[49] = @"cellRrcState";
  v6[49] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 80)];
  return +[NSDictionary dictionaryWithObjects:v6 forKeys:v5 count:50];
}

NSDictionary *sub_100139AA0(uint64_t a1)
{
  v3[0] = @"recommendedDataSim";
  v4[0] = +[NSNumber numberWithInteger:*(void *)(a1 + 40)];
  v3[1] = @"dataLQM";
  v4[1] = [*(id *)(a1 + 32) convetDataLqmToString:*(unsigned int *)(a1 + 48)];
  void v3[2] = @"dataCongested";
  void v4[2] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 52)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:3];
}

void sub_100139B64(uint64_t a1, uint64_t a2)
{
}

void sub_100139B74(uint64_t a1)
{
}

Class sub_100139B80(uint64_t a1)
{
  sub_100139BD8();
  Class result = objc_getClass("GEOCellConnectionQuality");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    sub_10013AFE8();
  }
  qword_10027D358 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

void sub_100139BD8()
{
  v0[0] = 0;
  if (!qword_10027D360)
  {
    v0[1] = _NSConcreteStackBlock;
    v0[2] = (void *)3221225472;
    v0[3] = sub_100139CCC;
    v0[4] = &unk_10020DB30;
    v0[5] = v0;
    long long v1 = off_100211F80;
    uint64_t v2 = 0;
    qword_10027D360 = _sl_dlopen();
  }
  if (!qword_10027D360) {
    sub_10013B050(v0);
  }
  if (v0[0]) {
    free(v0[0]);
  }
}

uint64_t sub_100139CCC()
{
  uint64_t result = _sl_dlopen();
  qword_10027D360 = result;
  return result;
}

Class sub_100139D40(uint64_t a1)
{
  sub_100139BD8();
  Class result = objc_getClass("GEOLatLng");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    sub_10013B0B8();
  }
  qword_10027D368 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

Class sub_100139D98(uint64_t a1)
{
  sub_100139BD8();
  Class result = objc_getClass("GEOLocation");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    sub_10013B120();
  }
  qword_10027D370 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

Class sub_100139DF0(uint64_t a1)
{
  sub_100139BD8();
  Class result = objc_getClass("GEOAPNetworkSelectionHarvestReporter");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    sub_10013B188();
  }
  qword_10027D378 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

Class sub_100139E48(uint64_t a1)
{
  v3[0] = 0;
  if (!qword_10027D388)
  {
    v3[1] = _NSConcreteStackBlock;
    void v3[2] = (void *)3221225472;
    void v3[3] = sub_100139F74;
    void v3[4] = &unk_10020DB30;
    void v3[5] = v3;
    long long v4 = off_100211F98;
    uint64_t v5 = 0;
    qword_10027D388 = _sl_dlopen();
  }
  if (!qword_10027D388) {
    sub_10013B1F0(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("PPUtils");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    sub_10013B258();
  }
  qword_10027D380 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t sub_100139F74()
{
  uint64_t result = _sl_dlopen();
  qword_10027D388 = result;
  return result;
}

Class sub_100139FE8(uint64_t a1)
{
  sub_10013A040();
  Class result = objc_getClass("BMDeviceConnectivityContext");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    sub_10013B2C0();
  }
  qword_10027D390 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t sub_10013A040()
{
  v2[0] = 0;
  if (!qword_10027D398)
  {
    v2[1] = _NSConcreteStackBlock;
    void v2[2] = (void *)3221225472;
    v2[3] = sub_10013A138;
    void v2[4] = &unk_10020DB30;
    void v2[5] = v2;
    long long v3 = off_100211FB0;
    uint64_t v4 = 0;
    qword_10027D398 = _sl_dlopen();
  }
  uint64_t v0 = qword_10027D398;
  if (!qword_10027D398) {
    sub_10013B328(v2);
  }
  if (v2[0]) {
    free(v2[0]);
  }
  return v0;
}

uint64_t sub_10013A138()
{
  uint64_t result = _sl_dlopen();
  qword_10027D398 = result;
  return result;
}

void *sub_10013A1AC(uint64_t a1)
{
  uint64_t v2 = (void *)sub_10013A040();
  uint64_t result = dlsym(v2, "__BMRootLibrary");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_10027D3A0 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_10013A318(void *a1)
{
}

void sub_10013A380()
{
}

void sub_10013A3E8()
{
}

void sub_10013A450()
{
}

void sub_10013A4B8(void *a1)
{
}

void sub_10013A520()
{
}

void sub_10013A588(void *a1)
{
}

void sub_10013A5F0()
{
}

void sub_10013A658()
{
}

void sub_10013A6C0(void *a1)
{
}

void sub_10013A728()
{
}

void sub_10013A790()
{
}

void sub_10013A7F8(void *a1)
{
}

void sub_10013A860()
{
}

void sub_10013A8C8()
{
}

void sub_10013A930(void *a1)
{
}

void sub_10013A998()
{
}

void sub_10013AA00()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Could not load CellularThroughputPrediction.mlmodelc in the bundle resource", v0, 2u);
}

void sub_10013AA48()
{
  uint64_t v0 = +[NSAssertionHandler currentHandler];
  long long v1 = +[NSString stringWithUTF8String:"Class getMLFeatureValueClass(void)_block_invoke"];
  [v0 handleFailureInFunction:v1 file:@"CellularThroughputPrediction.m" lineNumber:23 description:@"Unable to find class %s", "MLFeatureValue"];

  __break(1u);
}

void sub_10013AAC4(void *a1)
{
  uint64_t v2 = +[NSAssertionHandler currentHandler];
  long long v3 = +[NSString stringWithUTF8String:"void *CoreMLLibrary(void)"];
  [v2 handleFailureInFunction:v3 file:@"CellularThroughputPrediction.m" lineNumber:15 description:@"%s", *a1];

  __break(1u);
}

void sub_10013AB44()
{
  uint64_t v0 = +[NSAssertionHandler currentHandler];
  long long v1 = +[NSString stringWithUTF8String:"Class getMLModelClass(void)_block_invoke"];
  [v0 handleFailureInFunction:v1 file:@"CellularThroughputPrediction.m" lineNumber:20 description:@"Unable to find class %s", "MLModel"];

  __break(1u);
}

void sub_10013ABC0()
{
  uint64_t v0 = +[NSAssertionHandler currentHandler];
  long long v1 = +[NSString stringWithUTF8String:"Class getMLPredictionOptionsClass(void)_block_invoke"];
  [v0 handleFailureInFunction:v1 file:@"CellularThroughputPrediction.m" lineNumber:26 description:@"Unable to find class %s", "MLPredictionOptions"];

  __break(1u);
}

void sub_10013AC3C()
{
  uint64_t v0 = +[NSAssertionHandler currentHandler];
  long long v1 = +[NSString stringWithUTF8String:"Class getMLArrayBatchProviderClass(void)_block_invoke"];
  [v0 handleFailureInFunction:v1 file:@"CellularThroughputPrediction.m" lineNumber:17 description:@"Unable to find class %s", "MLArrayBatchProvider"];

  __break(1u);
}

void sub_10013ACB8(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "%@", (uint8_t *)&v2, 0xCu);
}

void sub_10013AD30()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Could not load iRATBW.mlmodelc in the bundle resource", v0, 2u);
}

void sub_10013AD78()
{
}

void sub_10013ADE0(void *a1)
{
}

void sub_10013AE48()
{
}

void sub_10013AEB0()
{
}

void sub_10013AF18()
{
}

void sub_10013AF80()
{
}

void sub_10013AFE8()
{
}

void sub_10013B050(void *a1)
{
}

void sub_10013B0B8()
{
}

void sub_10013B120()
{
}

void sub_10013B188()
{
}

void sub_10013B1F0(void *a1)
{
}

void sub_10013B258()
{
}

void sub_10013B2C0()
{
}

void sub_10013B328(void *a1)
{
}

uint64_t ADClientAddValueForScalarKey()
{
  return _ADClientAddValueForScalarKey();
}

uint64_t ADClientIsEnabled()
{
  return _ADClientIsEnabled();
}

uint64_t ADMonotonicTimeGetCurrent()
{
  return _ADMonotonicTimeGetCurrent();
}

uint64_t ADPushTimeIntervalForDistributionKeySinceStartTime()
{
  return _ADPushTimeIntervalForDistributionKeySinceStartTime();
}

uint64_t AnalyticsSendEventLazy()
{
  return _AnalyticsSendEventLazy();
}

uint64_t Apple80211ErrToStr()
{
  return _Apple80211ErrToStr();
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return _CFArrayCreateMutable(allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return _CFArrayGetCount(theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return _CFArrayGetValueAtIndex(theArray, idx);
}

CFBitVectorRef CFBitVectorCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex numBits)
{
  return _CFBitVectorCreate(allocator, bytes, numBits);
}

CFMutableBitVectorRef CFBitVectorCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return _CFBitVectorCreateMutable(allocator, capacity);
}

CFMutableBitVectorRef CFBitVectorCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFBitVectorRef bv)
{
  return _CFBitVectorCreateMutableCopy(allocator, capacity, bv);
}

CFBit CFBitVectorGetBitAtIndex(CFBitVectorRef bv, CFIndex idx)
{
  return _CFBitVectorGetBitAtIndex(bv, idx);
}

void CFBitVectorGetBits(CFBitVectorRef bv, CFRange range, UInt8 *bytes)
{
}

void CFBitVectorSetAllBits(CFMutableBitVectorRef bv, CFBit value)
{
}

void CFBitVectorSetBitAtIndex(CFMutableBitVectorRef bv, CFIndex idx, CFBit value)
{
}

void CFBitVectorSetCount(CFMutableBitVectorRef bv, CFIndex count)
{
}

CFTypeID CFBooleanGetTypeID(void)
{
  return _CFBooleanGetTypeID();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return _CFBooleanGetValue(BOOLean);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return _CFDataGetBytePtr(theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return _CFDataGetLength(theData);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return _CFDictionaryCreate(allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return _CFDictionaryCreateCopy(allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return _CFDictionaryCreateMutable(allocator, capacity, keyCallBacks, valueCallBacks);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return _CFDictionaryGetTypeID();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return _CFDictionaryGetValue(theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return _CFDictionaryGetValueIfPresent(theDict, key, value);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return _CFEqual(cf1, cf2);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return _CFGetTypeID(cf);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return _CFNotificationCenterGetDarwinNotifyCenter();
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
}

CFTypeID CFNumberGetTypeID(void)
{
  return _CFNumberGetTypeID();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return _CFNumberGetValue(number, theType, valuePtr);
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return _CFPreferencesAppSynchronize(applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return _CFPreferencesCopyAppValue(key, applicationID);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return _CFRetain(cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return _CFRunLoopGetCurrent();
}

CFRunLoopRef CFRunLoopGetMain(void)
{
  return _CFRunLoopGetMain();
}

Boolean CFRunLoopIsWaiting(CFRunLoopRef rl)
{
  return _CFRunLoopIsWaiting(rl);
}

void CFRunLoopPerformBlock(CFRunLoopRef rl, CFTypeRef mode, void *block)
{
}

void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

CFRunLoopRunResult CFRunLoopRunInMode(CFRunLoopMode mode, CFTimeInterval seconds, Boolean returnAfterSourceHandled)
{
  return _CFRunLoopRunInMode(mode, seconds, returnAfterSourceHandled);
}

void CFRunLoopStop(CFRunLoopRef rl)
{
}

void CFRunLoopWakeUp(CFRunLoopRef rl)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return _CFStringCompare(theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return _CFStringCreateWithCString(alloc, cStr, encoding);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return _CFStringCreateWithFormat(alloc, formatOptions, format);
}

CFTypeID CFStringGetTypeID(void)
{
  return _CFStringGetTypeID();
}

CFUserNotificationRef CFUserNotificationCreate(CFAllocatorRef allocator, CFTimeInterval timeout, CFOptionFlags flags, SInt32 *error, CFDictionaryRef dictionary)
{
  return _CFUserNotificationCreate(allocator, timeout, flags, error, dictionary);
}

CFRunLoopSourceRef CFUserNotificationCreateRunLoopSource(CFAllocatorRef allocator, CFUserNotificationRef userNotification, CFUserNotificationCallBack callout, CFIndex order)
{
  return _CFUserNotificationCreateRunLoopSource(allocator, userNotification, callout, order);
}

uint64_t CLCopyGnssBandsInUse()
{
  return _CLCopyGnssBandsInUse();
}

uint64_t CLCopyTechnologiesInUse()
{
  return _CLCopyTechnologiesInUse();
}

uint64_t CTCallGetStatus()
{
  return _CTCallGetStatus();
}

uint64_t CTSubscriptionSlotAsString()
{
  return _CTSubscriptionSlotAsString();
}

uint64_t IDSCopyIDForDevice()
{
  return _IDSCopyIDForDevice();
}

uint64_t MGCopyAnswer()
{
  return _MGCopyAnswer();
}

uint64_t MGGetBoolAnswer()
{
  return _MGGetBoolAnswer();
}

uint64_t MGGetProductType()
{
  return _MGGetProductType();
}

uint64_t MKBGetDeviceLockState()
{
  return _MKBGetDeviceLockState();
}

Class NSClassFromString(NSString *aClassName)
{
  return _NSClassFromString(aClassName);
}

void NSLog(NSString *format, ...)
{
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  return _NSSearchPathForDirectoriesInDomains(directory, domainMask, expandTilde);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return _NSSelectorFromString(aSelectorName);
}

NSString *NSTemporaryDirectory(void)
{
  return _NSTemporaryDirectory();
}

uint64_t PBDataWriterWriteBOOLField()
{
  return _PBDataWriterWriteBOOLField();
}

uint64_t PBDataWriterWriteInt32Field()
{
  return _PBDataWriterWriteInt32Field();
}

uint64_t PBDataWriterWriteSint32Field()
{
  return _PBDataWriterWriteSint32Field();
}

uint64_t PBDataWriterWriteStringField()
{
  return _PBDataWriterWriteStringField();
}

uint64_t PBDataWriterWriteSubmessage()
{
  return _PBDataWriterWriteSubmessage();
}

uint64_t PBDataWriterWriteUint32Field()
{
  return _PBDataWriterWriteUint32Field();
}

uint64_t PBReaderPlaceMark()
{
  return _PBReaderPlaceMark();
}

uint64_t PBReaderReadString()
{
  return _PBReaderReadString();
}

uint64_t PBReaderRecallMark()
{
  return _PBReaderRecallMark();
}

uint64_t PBReaderSkipValueWithTag()
{
  return _PBReaderSkipValueWithTag();
}

CFPropertyListRef SCDynamicStoreCopyValue(SCDynamicStoreRef store, CFStringRef key)
{
  return _SCDynamicStoreCopyValue(store, key);
}

SCDynamicStoreRef SCDynamicStoreCreate(CFAllocatorRef allocator, CFStringRef name, SCDynamicStoreCallBack callout, SCDynamicStoreContext *context)
{
  return _SCDynamicStoreCreate(allocator, name, callout, context);
}

CFStringRef SCDynamicStoreKeyCreateNetworkInterfaceEntity(CFAllocatorRef allocator, CFStringRef domain, CFStringRef ifname, CFStringRef entity)
{
  return _SCDynamicStoreKeyCreateNetworkInterfaceEntity(allocator, domain, ifname, entity);
}

Boolean SCDynamicStoreSetDispatchQueue(SCDynamicStoreRef store, dispatch_queue_t queue)
{
  return _SCDynamicStoreSetDispatchQueue(store, queue);
}

Boolean SCDynamicStoreSetNotificationKeys(SCDynamicStoreRef store, CFArrayRef keys, CFArrayRef patterns)
{
  return _SCDynamicStoreSetNotificationKeys(store, keys, patterns);
}

int SCError(void)
{
  return _SCError();
}

const char *__cdecl SCErrorString(int status)
{
  return _SCErrorString(status);
}

SCPreferencesRef SCPreferencesCreateWithAuthorization(CFAllocatorRef allocator, CFStringRef name, CFStringRef prefsID, AuthorizationRef authorization)
{
  return _SCPreferencesCreateWithAuthorization(allocator, name, prefsID, authorization);
}

CFPropertyListRef SCPreferencesGetValue(SCPreferencesRef prefs, CFStringRef key)
{
  return _SCPreferencesGetValue(prefs, key);
}

Boolean SCPreferencesSetCallback(SCPreferencesRef prefs, SCPreferencesCallBack callout, SCPreferencesContext *context)
{
  return _SCPreferencesSetCallback(prefs, callout, context);
}

Boolean SCPreferencesSetDispatchQueue(SCPreferencesRef prefs, dispatch_queue_t queue)
{
  return _SCPreferencesSetDispatchQueue(prefs, queue);
}

void SCPreferencesSynchronize(SCPreferencesRef prefs)
{
}

uint64_t TelephonyBasebandAddFreqListExt()
{
  return _TelephonyBasebandAddFreqListExt();
}

uint64_t TelephonyBasebandCreateController()
{
  return _TelephonyBasebandCreateController();
}

uint64_t TelephonyBasebandRemoveFreqListExt()
{
  return _TelephonyBasebandRemoveFreqListExt();
}

uint64_t WiFiDeviceClientCopyCurrentNetwork()
{
  return _WiFiDeviceClientCopyCurrentNetwork();
}

uint64_t WiFiDeviceClientCopyHostedNetworks()
{
  return _WiFiDeviceClientCopyHostedNetworks();
}

uint64_t WiFiDeviceClientDisassociate()
{
  return _WiFiDeviceClientDisassociate();
}

uint64_t WiFiDeviceClientGetPower()
{
  return _WiFiDeviceClientGetPower();
}

uint64_t WiFiDeviceClientRegisterBSPEventCallback()
{
  return _WiFiDeviceClientRegisterBSPEventCallback();
}

uint64_t WiFiDeviceClientRegisterBTCoexStatsCallback()
{
  return _WiFiDeviceClientRegisterBTCoexStatsCallback();
}

uint64_t WiFiDeviceClientRegisterBTScanIntervalRelaxCallback()
{
  return _WiFiDeviceClientRegisterBTScanIntervalRelaxCallback();
}

uint64_t WiFiDeviceClientRegisterBgScanSuspendResumeCallback()
{
  return _WiFiDeviceClientRegisterBgScanSuspendResumeCallback();
}

uint64_t WiFiDeviceClientRegisterBssidChangeCallback()
{
  return _WiFiDeviceClientRegisterBssidChangeCallback();
}

uint64_t WiFiDeviceClientRegisterCatsUpdateCallback()
{
  return _WiFiDeviceClientRegisterCatsUpdateCallback();
}

uint64_t WiFiDeviceClientRegisterDeviceAvailableCallback()
{
  return _WiFiDeviceClientRegisterDeviceAvailableCallback();
}

uint64_t WiFiDeviceClientRegisterExtendedLinkCallback()
{
  return _WiFiDeviceClientRegisterExtendedLinkCallback();
}

uint64_t WiFiDeviceClientRegisterHostApStateChangedCallback()
{
  return _WiFiDeviceClientRegisterHostApStateChangedCallback();
}

uint64_t WiFiDeviceClientRegisterLQMCallback()
{
  return _WiFiDeviceClientRegisterLQMCallback();
}

uint64_t WiFiDeviceClientRegisterResumeScanCallback()
{
  return _WiFiDeviceClientRegisterResumeScanCallback();
}

uint64_t WiFiDeviceClientRegisterScanUpdateCallback()
{
  return _WiFiDeviceClientRegisterScanUpdateCallback();
}

uint64_t WiFiDeviceClientRegisterUCMEventCallback()
{
  return _WiFiDeviceClientRegisterUCMEventCallback();
}

uint64_t WiFiDeviceClientRegisterWeightAvgLQMCallback()
{
  return _WiFiDeviceClientRegisterWeightAvgLQMCallback();
}

uint64_t WiFiDeviceClientScanAsync()
{
  return _WiFiDeviceClientScanAsync();
}

uint64_t WiFiDeviceClientSetLQMEventInterval()
{
  return _WiFiDeviceClientSetLQMEventInterval();
}

uint64_t WiFiGetNetworkChannel()
{
  return _WiFiGetNetworkChannel();
}

uint64_t WiFiManagerClientCopyDevices()
{
  return _WiFiManagerClientCopyDevices();
}

uint64_t WiFiManagerClientCreate()
{
  return _WiFiManagerClientCreate();
}

uint64_t WiFiManagerClientGetDevice()
{
  return _WiFiManagerClientGetDevice();
}

uint64_t WiFiManagerClientRegisterDeviceAttachmentCallback()
{
  return _WiFiManagerClientRegisterDeviceAttachmentCallback();
}

uint64_t WiFiManagerClientRegisterWowStateChangedCallback()
{
  return _WiFiManagerClientRegisterWowStateChangedCallback();
}

uint64_t WiFiManagerClientScheduleWithRunLoop()
{
  return _WiFiManagerClientScheduleWithRunLoop();
}

uint64_t WiFiManagerClientTemporarilyDisableNetwork()
{
  return _WiFiManagerClientTemporarilyDisableNetwork();
}

uint64_t WiFiManagerClientUnscheduleFromRunLoop()
{
  return _WiFiManagerClientUnscheduleFromRunLoop();
}

uint64_t WiFiNetworkGetChannel()
{
  return _WiFiNetworkGetChannel();
}

uint64_t WiFiNetworkGetChannelWidthInMHz()
{
  return _WiFiNetworkGetChannelWidthInMHz();
}

uint64_t WiFiNetworkGetIntProperty()
{
  return _WiFiNetworkGetIntProperty();
}

uint64_t WiFiNetworkGetOperatingBand()
{
  return _WiFiNetworkGetOperatingBand();
}

uint64_t WiFiNetworkGetPhyMode()
{
  return _WiFiNetworkGetPhyMode();
}

uint64_t WiFiNetworkGetProperty()
{
  return _WiFiNetworkGetProperty();
}

uint64_t WiFiNetworkGetSSID()
{
  return _WiFiNetworkGetSSID();
}

uint64_t WiFiNetworkIsCaptive()
{
  return _WiFiNetworkIsCaptive();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CTServerConnectionAddVictimFreq()
{
  return __CTServerConnectionAddVictimFreq();
}

uint64_t _CTServerConnectionClearVictimFreq()
{
  return __CTServerConnectionClearVictimFreq();
}

uint64_t _CTServerConnectionCreate()
{
  return __CTServerConnectionCreate();
}

uint64_t _CTServerConnectionCreateAndLaunchWithIdentifier()
{
  return __CTServerConnectionCreateAndLaunchWithIdentifier();
}

uint64_t _CTServerConnectionCreateOnTargetQueue()
{
  return __CTServerConnectionCreateOnTargetQueue();
}

uint64_t _CTServerConnectionGetCapabilityStatusExtended()
{
  return __CTServerConnectionGetCapabilityStatusExtended();
}

uint64_t _CTServerConnectionGetCellularDataIsEnabled()
{
  return __CTServerConnectionGetCellularDataIsEnabled();
}

uint64_t _CTServerConnectionGetCommCenterInitializationState()
{
  return __CTServerConnectionGetCommCenterInitializationState();
}

uint64_t _CTServerConnectionGetEnhancedVoiceLinkQualityMetric()
{
  return __CTServerConnectionGetEnhancedVoiceLinkQualityMetric();
}

uint64_t _CTServerConnectionGetRadioAccessTechnology()
{
  return __CTServerConnectionGetRadioAccessTechnology();
}

uint64_t _CTServerConnectionGetRegistrationStatus()
{
  return __CTServerConnectionGetRegistrationStatus();
}

uint64_t _CTServerConnectionGetSignalStrength()
{
  return __CTServerConnectionGetSignalStrength();
}

uint64_t _CTServerConnectionGetSupportedEnhancedLinkQualityMetric()
{
  return __CTServerConnectionGetSupportedEnhancedLinkQualityMetric();
}

uint64_t _CTServerConnectionGetVoiceLinkQualityMetric()
{
  return __CTServerConnectionGetVoiceLinkQualityMetric();
}

uint64_t _CTServerConnectionIsDataAttached()
{
  return __CTServerConnectionIsDataAttached();
}

uint64_t _CTServerConnectionRegisterForNotification()
{
  return __CTServerConnectionRegisterForNotification();
}

uint64_t _CTServerConnectionRegisterSupportedEnhancedLinkQualityMetric()
{
  return __CTServerConnectionRegisterSupportedEnhancedLinkQualityMetric();
}

uint64_t _CTServerConnectionRemoveVictimFreq()
{
  return __CTServerConnectionRemoveVictimFreq();
}

uint64_t _CTServerConnectionSendBarrier()
{
  return __CTServerConnectionSendBarrier();
}

uint64_t _CTServerConnectionSetTargetQueue()
{
  return __CTServerConnectionSetTargetQueue();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t asString()
{
  return asString();
}

uint64_t QMIServiceMsg::create(QMIServiceMsg *a1, const qmi::MutableMessageBase *a2)
{
  return QMIServiceMsg::create(a1, a2);
}

uint64_t ctu::iokit::Controller::setFaceIDCallback()
{
  return ctu::iokit::Controller::setFaceIDCallback();
}

uint64_t ctu::iokit::Controller::setupCameraService(ctu::iokit::Controller *this)
{
  return ctu::iokit::Controller::setupCameraService(this);
}

uint64_t ctu::iokit::Controller::setAccessoryCallback()
{
  return ctu::iokit::Controller::setAccessoryCallback();
}

uint64_t ctu::iokit::Controller::setFrontCameraCallback()
{
  return ctu::iokit::Controller::setFrontCameraCallback();
}

uint64_t ctu::iokit::Controller::setBackTeleCameraCallback()
{
  return ctu::iokit::Controller::setBackTeleCameraCallback();
}

uint64_t ctu::iokit::Controller::setBackSuperWideCameraCallback()
{
  return ctu::iokit::Controller::setBackSuperWideCameraCallback();
}

uint64_t ctu::iokit::Controller::create()
{
  return ctu::iokit::Controller::create();
}

uint64_t ice::SendMsgBaseProxy::SendMsgBaseProxy()
{
  return ice::SendMsgBaseProxy::SendMsgBaseProxy();
}

void ice::SendMsgBaseProxy::~SendMsgBaseProxy(ice::SendMsgBaseProxy *this)
{
}

uint64_t ice::isARIResponseValid(ice *a1, const AriSdk::MsgBase *a2, unsigned int a3)
{
  return ice::isARIResponseValid(a1, a2, a3);
}

uint64_t ice::Client::regIndicationInternal()
{
  return ice::Client::regIndicationInternal();
}

uint64_t ice::Client::regEventHandlerInternal()
{
  return ice::Client::regEventHandlerInternal();
}

uint64_t ice::Client::create(ice::Client *this, queue a2, const char *a3)
{
  return ice::Client::create(this, a2.fObj.fObj, a3);
}

uint64_t qmi::MessageBase::validateMsgId(qmi::MessageBase *this, unsigned __int16 a2)
{
  return qmi::MessageBase::validateMsgId(this, a2);
}

uint64_t qmi::MessageBase::MessageBase(qmi::MessageBase *this, const void *a2, unint64_t a3)
{
  return qmi::MessageBase::MessageBase(this, a2, a3);
}

uint64_t qmi::MessageBase::MessageBase()
{
  return qmi::MessageBase::MessageBase();
}

void qmi::MessageBase::~MessageBase(qmi::MessageBase *this)
{
}

uint64_t qmi::ResponseBase::ResponseBase(qmi::ResponseBase *this, const void *a2, unint64_t a3)
{
  return qmi::ResponseBase::ResponseBase(this, a2, a3);
}

uint64_t qmi::MutableMessageBase::MutableMessageBase(qmi::MutableMessageBase *this, unsigned __int16 a2)
{
  return qmi::MutableMessageBase::MutableMessageBase(this, a2);
}

void qmi::MutableMessageBase::~MutableMessageBase(qmi::MutableMessageBase *this)
{
}

uint64_t qmi::Client::create()
{
  return qmi::Client::create();
}

uint64_t qmi::Client::release(qmi::Client *this)
{
  return qmi::Client::release(this);
}

uint64_t qmi::asString()
{
  return qmi::asString();
}

uint64_t tlv::throwIfNotEnoughBytes(tlv *this, const unsigned __int8 *a2, const unsigned __int8 *a3, unint64_t a4)
{
  return tlv::throwIfNotEnoughBytes(this, a2, a3, a4);
}

uint64_t AriSdk::ARI_UtaIdcConfigEventReq_SDK::ARI_UtaIdcConfigEventReq_SDK(AriSdk::ARI_UtaIdcConfigEventReq_SDK *this)
{
  return AriSdk::ARI_UtaIdcConfigEventReq_SDK::ARI_UtaIdcConfigEventReq_SDK(this);
}

void AriSdk::ARI_UtaIdcConfigEventReq_SDK::~ARI_UtaIdcConfigEventReq_SDK(AriSdk::ARI_UtaIdcConfigEventReq_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcSetLaaConfigReq_SDK::ARI_UtaIdcSetLaaConfigReq_SDK(AriSdk::ARI_UtaIdcSetLaaConfigReq_SDK *this)
{
  return AriSdk::ARI_UtaIdcSetLaaConfigReq_SDK::ARI_UtaIdcSetLaaConfigReq_SDK(this);
}

void AriSdk::ARI_UtaIdcSetLaaConfigReq_SDK::~ARI_UtaIdcSetLaaConfigReq_SDK(AriSdk::ARI_UtaIdcSetLaaConfigReq_SDK *this)
{
}

uint64_t AriSdk::ARI_IBINetRadioSignalIndCb_SDK::unpack(AriSdk::ARI_IBINetRadioSignalIndCb_SDK *this)
{
  return AriSdk::ARI_IBINetRadioSignalIndCb_SDK::unpack(this);
}

uint64_t AriSdk::ARI_IBINetRadioSignalIndCb_SDK::ARI_IBINetRadioSignalIndCb_SDK(AriSdk::ARI_IBINetRadioSignalIndCb_SDK *this, const unsigned __int8 *a2, unsigned int a3)
{
  return AriSdk::ARI_IBINetRadioSignalIndCb_SDK::ARI_IBINetRadioSignalIndCb_SDK(this, a2, a3);
}

void AriSdk::ARI_IBINetRadioSignalIndCb_SDK::~ARI_IBINetRadioSignalIndCb_SDK(AriSdk::ARI_IBINetRadioSignalIndCb_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcConfigEventRspCb_SDK::unpack(AriSdk::ARI_UtaIdcConfigEventRspCb_SDK *this)
{
  return AriSdk::ARI_UtaIdcConfigEventRspCb_SDK::unpack(this);
}

uint64_t AriSdk::ARI_UtaIdcConfigEventRspCb_SDK::ARI_UtaIdcConfigEventRspCb_SDK(AriSdk::ARI_UtaIdcConfigEventRspCb_SDK *this, const unsigned __int8 *a2, unsigned int a3)
{
  return AriSdk::ARI_UtaIdcConfigEventRspCb_SDK::ARI_UtaIdcConfigEventRspCb_SDK(this, a2, a3);
}

void AriSdk::ARI_UtaIdcConfigEventRspCb_SDK::~ARI_UtaIdcConfigEventRspCb_SDK(AriSdk::ARI_UtaIdcConfigEventRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcGetCellConfigReq_SDK::ARI_UtaIdcGetCellConfigReq_SDK(AriSdk::ARI_UtaIdcGetCellConfigReq_SDK *this)
{
  return AriSdk::ARI_UtaIdcGetCellConfigReq_SDK::ARI_UtaIdcGetCellConfigReq_SDK(this);
}

void AriSdk::ARI_UtaIdcGetCellConfigReq_SDK::~ARI_UtaIdcGetCellConfigReq_SDK(AriSdk::ARI_UtaIdcGetCellConfigReq_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcGetLaaMeasInfoReq_SDK::ARI_UtaIdcGetLaaMeasInfoReq_SDK(AriSdk::ARI_UtaIdcGetLaaMeasInfoReq_SDK *this)
{
  return AriSdk::ARI_UtaIdcGetLaaMeasInfoReq_SDK::ARI_UtaIdcGetLaaMeasInfoReq_SDK(this);
}

void AriSdk::ARI_UtaIdcGetLaaMeasInfoReq_SDK::~ARI_UtaIdcGetLaaMeasInfoReq_SDK(AriSdk::ARI_UtaIdcGetLaaMeasInfoReq_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcSetLaaConfigRspCb_SDK::unpack(AriSdk::ARI_UtaIdcSetLaaConfigRspCb_SDK *this)
{
  return AriSdk::ARI_UtaIdcSetLaaConfigRspCb_SDK::unpack(this);
}

uint64_t AriSdk::ARI_UtaIdcSetLaaConfigRspCb_SDK::ARI_UtaIdcSetLaaConfigRspCb_SDK(AriSdk::ARI_UtaIdcSetLaaConfigRspCb_SDK *this, const unsigned __int8 *a2, unsigned int a3)
{
  return AriSdk::ARI_UtaIdcSetLaaConfigRspCb_SDK::ARI_UtaIdcSetLaaConfigRspCb_SDK(this, a2, a3);
}

void AriSdk::ARI_UtaIdcSetLaaConfigRspCb_SDK::~ARI_UtaIdcSetLaaConfigRspCb_SDK(AriSdk::ARI_UtaIdcSetLaaConfigRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcGetCellConfigRspCb_SDK::unpack(AriSdk::ARI_UtaIdcGetCellConfigRspCb_SDK *this)
{
  return AriSdk::ARI_UtaIdcGetCellConfigRspCb_SDK::unpack(this);
}

uint64_t AriSdk::ARI_UtaIdcGetCellConfigRspCb_SDK::ARI_UtaIdcGetCellConfigRspCb_SDK(AriSdk::ARI_UtaIdcGetCellConfigRspCb_SDK *this, const unsigned __int8 *a2, unsigned int a3)
{
  return AriSdk::ARI_UtaIdcGetCellConfigRspCb_SDK::ARI_UtaIdcGetCellConfigRspCb_SDK(this, a2, a3);
}

void AriSdk::ARI_UtaIdcGetCellConfigRspCb_SDK::~ARI_UtaIdcGetCellConfigRspCb_SDK(AriSdk::ARI_UtaIdcGetCellConfigRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcRTSetScanFreqReqV2_SDK::ARI_UtaIdcRTSetScanFreqReqV2_SDK(AriSdk::ARI_UtaIdcRTSetScanFreqReqV2_SDK *this)
{
  return AriSdk::ARI_UtaIdcRTSetScanFreqReqV2_SDK::ARI_UtaIdcRTSetScanFreqReqV2_SDK(this);
}

void AriSdk::ARI_UtaIdcRTSetScanFreqReqV2_SDK::~ARI_UtaIdcRTSetScanFreqReqV2_SDK(AriSdk::ARI_UtaIdcRTSetScanFreqReqV2_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcConfigTxActParamReq_SDK::ARI_UtaIdcConfigTxActParamReq_SDK(AriSdk::ARI_UtaIdcConfigTxActParamReq_SDK *this)
{
  return AriSdk::ARI_UtaIdcConfigTxActParamReq_SDK::ARI_UtaIdcConfigTxActParamReq_SDK(this);
}

void AriSdk::ARI_UtaIdcConfigTxActParamReq_SDK::~ARI_UtaIdcConfigTxActParamReq_SDK(AriSdk::ARI_UtaIdcConfigTxActParamReq_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcGetLaaMeasInfoRspCb_SDK::unpack(AriSdk::ARI_UtaIdcGetLaaMeasInfoRspCb_SDK *this)
{
  return AriSdk::ARI_UtaIdcGetLaaMeasInfoRspCb_SDK::unpack(this);
}

uint64_t AriSdk::ARI_UtaIdcGetLaaMeasInfoRspCb_SDK::ARI_UtaIdcGetLaaMeasInfoRspCb_SDK(AriSdk::ARI_UtaIdcGetLaaMeasInfoRspCb_SDK *this, const unsigned __int8 *a2, unsigned int a3)
{
  return AriSdk::ARI_UtaIdcGetLaaMeasInfoRspCb_SDK::ARI_UtaIdcGetLaaMeasInfoRspCb_SDK(this, a2, a3);
}

void AriSdk::ARI_UtaIdcGetLaaMeasInfoRspCb_SDK::~ARI_UtaIdcGetLaaMeasInfoRspCb_SDK(AriSdk::ARI_UtaIdcGetLaaMeasInfoRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK::ARI_IBIMsAccCurrentFreqInfoReq_SDK(AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK *this)
{
  return AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK::ARI_IBIMsAccCurrentFreqInfoReq_SDK(this);
}

void AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK::~ARI_IBIMsAccCurrentFreqInfoReq_SDK(AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcCellConfigEventIndCb_SDK::unpack(AriSdk::ARI_UtaIdcCellConfigEventIndCb_SDK *this)
{
  return AriSdk::ARI_UtaIdcCellConfigEventIndCb_SDK::unpack(this);
}

uint64_t AriSdk::ARI_UtaIdcCellConfigEventIndCb_SDK::ARI_UtaIdcCellConfigEventIndCb_SDK(AriSdk::ARI_UtaIdcCellConfigEventIndCb_SDK *this, const unsigned __int8 *a2, unsigned int a3)
{
  return AriSdk::ARI_UtaIdcCellConfigEventIndCb_SDK::ARI_UtaIdcCellConfigEventIndCb_SDK(this, a2, a3);
}

void AriSdk::ARI_UtaIdcCellConfigEventIndCb_SDK::~ARI_UtaIdcCellConfigEventIndCb_SDK(AriSdk::ARI_UtaIdcCellConfigEventIndCb_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcConfigMiscParamReqV2_SDK::ARI_UtaIdcConfigMiscParamReqV2_SDK(AriSdk::ARI_UtaIdcConfigMiscParamReqV2_SDK *this)
{
  return AriSdk::ARI_UtaIdcConfigMiscParamReqV2_SDK::ARI_UtaIdcConfigMiscParamReqV2_SDK(this);
}

void AriSdk::ARI_UtaIdcConfigMiscParamReqV2_SDK::~ARI_UtaIdcConfigMiscParamReqV2_SDK(AriSdk::ARI_UtaIdcConfigMiscParamReqV2_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcRTSetScanFreqRspCbV2_SDK::unpack(AriSdk::ARI_UtaIdcRTSetScanFreqRspCbV2_SDK *this)
{
  return AriSdk::ARI_UtaIdcRTSetScanFreqRspCbV2_SDK::unpack(this);
}

uint64_t AriSdk::ARI_UtaIdcRTSetScanFreqRspCbV2_SDK::ARI_UtaIdcRTSetScanFreqRspCbV2_SDK(AriSdk::ARI_UtaIdcRTSetScanFreqRspCbV2_SDK *this, const unsigned __int8 *a2, unsigned int a3)
{
  return AriSdk::ARI_UtaIdcRTSetScanFreqRspCbV2_SDK::ARI_UtaIdcRTSetScanFreqRspCbV2_SDK(this, a2, a3);
}

void AriSdk::ARI_UtaIdcRTSetScanFreqRspCbV2_SDK::~ARI_UtaIdcRTSetScanFreqRspCbV2_SDK(AriSdk::ARI_UtaIdcRTSetScanFreqRspCbV2_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcSetCameraStatusReqV2_SDK::ARI_UtaIdcSetCameraStatusReqV2_SDK(AriSdk::ARI_UtaIdcSetCameraStatusReqV2_SDK *this)
{
  return AriSdk::ARI_UtaIdcSetCameraStatusReqV2_SDK::ARI_UtaIdcSetCameraStatusReqV2_SDK(this);
}

void AriSdk::ARI_UtaIdcSetCameraStatusReqV2_SDK::~ARI_UtaIdcSetCameraStatusReqV2_SDK(AriSdk::ARI_UtaIdcSetCameraStatusReqV2_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcConfigTxActParamRspCb_SDK::unpack(AriSdk::ARI_UtaIdcConfigTxActParamRspCb_SDK *this)
{
  return AriSdk::ARI_UtaIdcConfigTxActParamRspCb_SDK::unpack(this);
}

uint64_t AriSdk::ARI_UtaIdcConfigTxActParamRspCb_SDK::ARI_UtaIdcConfigTxActParamRspCb_SDK(AriSdk::ARI_UtaIdcConfigTxActParamRspCb_SDK *this, const unsigned __int8 *a2, unsigned int a3)
{
  return AriSdk::ARI_UtaIdcConfigTxActParamRspCb_SDK::ARI_UtaIdcConfigTxActParamRspCb_SDK(this, a2, a3);
}

void AriSdk::ARI_UtaIdcConfigTxActParamRspCb_SDK::~ARI_UtaIdcConfigTxActParamRspCb_SDK(AriSdk::ARI_UtaIdcConfigTxActParamRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK::unpack(AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK *this)
{
  return AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK::unpack(this);
}

uint64_t AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK(AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK *this, const unsigned __int8 *a2, unsigned int a3)
{
  return AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK(this, a2, a3);
}

void AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK::~ARI_IBIMsAccCurrentFreqInfoIndCb_SDK(AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK *this)
{
}

uint64_t AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::unpack(AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *this)
{
  return AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::unpack(this);
}

uint64_t AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK(AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *this, const unsigned __int8 *a2, unsigned int a3)
{
  return AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK(this, a2, a3);
}

void AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::~ARI_IBIMsAccCurrentFreqInfoRspCb_SDK(AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcConfigMiscParamRspCbV2_SDK::unpack(AriSdk::ARI_UtaIdcConfigMiscParamRspCbV2_SDK *this)
{
  return AriSdk::ARI_UtaIdcConfigMiscParamRspCbV2_SDK::unpack(this);
}

uint64_t AriSdk::ARI_UtaIdcConfigMiscParamRspCbV2_SDK::ARI_UtaIdcConfigMiscParamRspCbV2_SDK(AriSdk::ARI_UtaIdcConfigMiscParamRspCbV2_SDK *this, const unsigned __int8 *a2, unsigned int a3)
{
  return AriSdk::ARI_UtaIdcConfigMiscParamRspCbV2_SDK::ARI_UtaIdcConfigMiscParamRspCbV2_SDK(this, a2, a3);
}

void AriSdk::ARI_UtaIdcConfigMiscParamRspCbV2_SDK::~ARI_UtaIdcConfigMiscParamRspCbV2_SDK(AriSdk::ARI_UtaIdcConfigMiscParamRspCbV2_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::unpack(AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *this)
{
  return AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::unpack(this);
}

uint64_t AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::ARI_UtaIdcSetCameraStatusRspCbV2_SDK(AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *this, const unsigned __int8 *a2, unsigned int a3)
{
  return AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::ARI_UtaIdcSetCameraStatusRspCbV2_SDK(this, a2, a3);
}

void AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::~ARI_UtaIdcSetCameraStatusRspCbV2_SDK(AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcSetTunerVoterConfigReq_SDK::ARI_UtaIdcSetTunerVoterConfigReq_SDK(AriSdk::ARI_UtaIdcSetTunerVoterConfigReq_SDK *this)
{
  return AriSdk::ARI_UtaIdcSetTunerVoterConfigReq_SDK::ARI_UtaIdcSetTunerVoterConfigReq_SDK(this);
}

void AriSdk::ARI_UtaIdcSetTunerVoterConfigReq_SDK::~ARI_UtaIdcSetTunerVoterConfigReq_SDK(AriSdk::ARI_UtaIdcSetTunerVoterConfigReq_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcSetTxBlankingConfigReq_SDK::ARI_UtaIdcSetTxBlankingConfigReq_SDK(AriSdk::ARI_UtaIdcSetTxBlankingConfigReq_SDK *this)
{
  return AriSdk::ARI_UtaIdcSetTxBlankingConfigReq_SDK::ARI_UtaIdcSetTxBlankingConfigReq_SDK(this);
}

void AriSdk::ARI_UtaIdcSetTxBlankingConfigReq_SDK::~ARI_UtaIdcSetTxBlankingConfigReq_SDK(AriSdk::ARI_UtaIdcSetTxBlankingConfigReq_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxReqV3_SDK::ARI_UtaIdcSetRTFeatureSpmiRxReqV3_SDK(AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxReqV3_SDK *this)
{
  return AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxReqV3_SDK::ARI_UtaIdcSetRTFeatureSpmiRxReqV3_SDK(this);
}

void AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxReqV3_SDK::~ARI_UtaIdcSetRTFeatureSpmiRxReqV3_SDK(AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxReqV3_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxReqV3_SDK::ARI_UtaIdcSetRTFeatureSpmiTxReqV3_SDK(AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxReqV3_SDK *this)
{
  return AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxReqV3_SDK::ARI_UtaIdcSetRTFeatureSpmiTxReqV3_SDK(this);
}

void AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxReqV3_SDK::~ARI_UtaIdcSetRTFeatureSpmiTxReqV3_SDK(AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxReqV3_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcSetTimeSharingConfigReq_SDK::ARI_UtaIdcSetTimeSharingConfigReq_SDK(AriSdk::ARI_UtaIdcSetTimeSharingConfigReq_SDK *this)
{
  return AriSdk::ARI_UtaIdcSetTimeSharingConfigReq_SDK::ARI_UtaIdcSetTimeSharingConfigReq_SDK(this);
}

void AriSdk::ARI_UtaIdcSetTimeSharingConfigReq_SDK::~ARI_UtaIdcSetTimeSharingConfigReq_SDK(AriSdk::ARI_UtaIdcSetTimeSharingConfigReq_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcSetTxAntMappingTableReq_SDK::ARI_UtaIdcSetTxAntMappingTableReq_SDK(AriSdk::ARI_UtaIdcSetTxAntMappingTableReq_SDK *this)
{
  return AriSdk::ARI_UtaIdcSetTxAntMappingTableReq_SDK::ARI_UtaIdcSetTxAntMappingTableReq_SDK(this);
}

void AriSdk::ARI_UtaIdcSetTxAntMappingTableReq_SDK::~ARI_UtaIdcSetTxAntMappingTableReq_SDK(AriSdk::ARI_UtaIdcSetTxAntMappingTableReq_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK::unpack(AriSdk::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK *this)
{
  return AriSdk::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK::unpack(this);
}

uint64_t AriSdk::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK(AriSdk::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK *this, const unsigned __int8 *a2, unsigned int a3)
{
  return AriSdk::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK(this, a2, a3);
}

void AriSdk::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK::~ARI_UtaIdcSetTunerVoterConfigRspCb_SDK(AriSdk::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcSetTxBlankingConfigRspCb_SDK::unpack(AriSdk::ARI_UtaIdcSetTxBlankingConfigRspCb_SDK *this)
{
  return AriSdk::ARI_UtaIdcSetTxBlankingConfigRspCb_SDK::unpack(this);
}

uint64_t AriSdk::ARI_UtaIdcSetTxBlankingConfigRspCb_SDK::ARI_UtaIdcSetTxBlankingConfigRspCb_SDK(AriSdk::ARI_UtaIdcSetTxBlankingConfigRspCb_SDK *this, const unsigned __int8 *a2, unsigned int a3)
{
  return AriSdk::ARI_UtaIdcSetTxBlankingConfigRspCb_SDK::ARI_UtaIdcSetTxBlankingConfigRspCb_SDK(this, a2, a3);
}

void AriSdk::ARI_UtaIdcSetTxBlankingConfigRspCb_SDK::~ARI_UtaIdcSetTxBlankingConfigRspCb_SDK(AriSdk::ARI_UtaIdcSetTxBlankingConfigRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_IBICallPsBandwidthEstimationInd_SDK::unpack(AriSdk::ARI_IBICallPsBandwidthEstimationInd_SDK *this)
{
  return AriSdk::ARI_IBICallPsBandwidthEstimationInd_SDK::unpack(this);
}

uint64_t AriSdk::ARI_IBICallPsBandwidthEstimationInd_SDK::ARI_IBICallPsBandwidthEstimationInd_SDK(AriSdk::ARI_IBICallPsBandwidthEstimationInd_SDK *this, const unsigned __int8 *a2, unsigned int a3)
{
  return AriSdk::ARI_IBICallPsBandwidthEstimationInd_SDK::ARI_IBICallPsBandwidthEstimationInd_SDK(this, a2, a3);
}

void AriSdk::ARI_IBICallPsBandwidthEstimationInd_SDK::~ARI_IBICallPsBandwidthEstimationInd_SDK(AriSdk::ARI_IBICallPsBandwidthEstimationInd_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK::unpack(AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK *this)
{
  return AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK::unpack(this);
}

uint64_t AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK(AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK *this, const unsigned __int8 *a2, unsigned int a3)
{
  return AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK(this, a2, a3);
}

void AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK::~ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK(AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK::unpack(AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK *this)
{
  return AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK::unpack(this);
}

uint64_t AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK(AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK *this, const unsigned __int8 *a2, unsigned int a3)
{
  return AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK(this, a2, a3);
}

void AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK::~ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK(AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcSetTimeSharingConfigRspCb_SDK::unpack(AriSdk::ARI_UtaIdcSetTimeSharingConfigRspCb_SDK *this)
{
  return AriSdk::ARI_UtaIdcSetTimeSharingConfigRspCb_SDK::unpack(this);
}

uint64_t AriSdk::ARI_UtaIdcSetTimeSharingConfigRspCb_SDK::ARI_UtaIdcSetTimeSharingConfigRspCb_SDK(AriSdk::ARI_UtaIdcSetTimeSharingConfigRspCb_SDK *this, const unsigned __int8 *a2, unsigned int a3)
{
  return AriSdk::ARI_UtaIdcSetTimeSharingConfigRspCb_SDK::ARI_UtaIdcSetTimeSharingConfigRspCb_SDK(this, a2, a3);
}

void AriSdk::ARI_UtaIdcSetTimeSharingConfigRspCb_SDK::~ARI_UtaIdcSetTimeSharingConfigRspCb_SDK(AriSdk::ARI_UtaIdcSetTimeSharingConfigRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcSetTxAntMappingTableRspCb_SDK::unpack(AriSdk::ARI_UtaIdcSetTxAntMappingTableRspCb_SDK *this)
{
  return AriSdk::ARI_UtaIdcSetTxAntMappingTableRspCb_SDK::unpack(this);
}

uint64_t AriSdk::ARI_UtaIdcSetTxAntMappingTableRspCb_SDK::ARI_UtaIdcSetTxAntMappingTableRspCb_SDK(AriSdk::ARI_UtaIdcSetTxAntMappingTableRspCb_SDK *this, const unsigned __int8 *a2, unsigned int a3)
{
  return AriSdk::ARI_UtaIdcSetTxAntMappingTableRspCb_SDK::ARI_UtaIdcSetTxAntMappingTableRspCb_SDK(this, a2, a3);
}

void AriSdk::ARI_UtaIdcSetTxAntMappingTableRspCb_SDK::~ARI_UtaIdcSetTxAntMappingTableRspCb_SDK(AriSdk::ARI_UtaIdcSetTxAntMappingTableRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcSetTxPowerLimitingConfigReq_SDK::ARI_UtaIdcSetTxPowerLimitingConfigReq_SDK(AriSdk::ARI_UtaIdcSetTxPowerLimitingConfigReq_SDK *this)
{
  return AriSdk::ARI_UtaIdcSetTxPowerLimitingConfigReq_SDK::ARI_UtaIdcSetTxPowerLimitingConfigReq_SDK(this);
}

void AriSdk::ARI_UtaIdcSetTxPowerLimitingConfigReq_SDK::~ARI_UtaIdcSetTxPowerLimitingConfigReq_SDK(AriSdk::ARI_UtaIdcSetTxPowerLimitingConfigReq_SDK *this)
{
}

uint64_t AriSdk::ARI_IBICallPsStopBandwidthEstimationReq_SDK::ARI_IBICallPsStopBandwidthEstimationReq_SDK(AriSdk::ARI_IBICallPsStopBandwidthEstimationReq_SDK *this)
{
  return AriSdk::ARI_IBICallPsStopBandwidthEstimationReq_SDK::ARI_IBICallPsStopBandwidthEstimationReq_SDK(this);
}

void AriSdk::ARI_IBICallPsStopBandwidthEstimationReq_SDK::~ARI_IBICallPsStopBandwidthEstimationReq_SDK(AriSdk::ARI_IBICallPsStopBandwidthEstimationReq_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcSetCnvAntBlockPwrLmtConfigReq_SDK::ARI_UtaIdcSetCnvAntBlockPwrLmtConfigReq_SDK(AriSdk::ARI_UtaIdcSetCnvAntBlockPwrLmtConfigReq_SDK *this)
{
  return AriSdk::ARI_UtaIdcSetCnvAntBlockPwrLmtConfigReq_SDK::ARI_UtaIdcSetCnvAntBlockPwrLmtConfigReq_SDK(this);
}

void AriSdk::ARI_UtaIdcSetCnvAntBlockPwrLmtConfigReq_SDK::~ARI_UtaIdcSetCnvAntBlockPwrLmtConfigReq_SDK(AriSdk::ARI_UtaIdcSetCnvAntBlockPwrLmtConfigReq_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcSetCriticalCarrierConfigReqV2_SDK::ARI_UtaIdcSetCriticalCarrierConfigReqV2_SDK(AriSdk::ARI_UtaIdcSetCriticalCarrierConfigReqV2_SDK *this)
{
  return AriSdk::ARI_UtaIdcSetCriticalCarrierConfigReqV2_SDK::ARI_UtaIdcSetCriticalCarrierConfigReqV2_SDK(this);
}

void AriSdk::ARI_UtaIdcSetCriticalCarrierConfigReqV2_SDK::~ARI_UtaIdcSetCriticalCarrierConfigReqV2_SDK(AriSdk::ARI_UtaIdcSetCriticalCarrierConfigReqV2_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcSetTxPowerLimitingConfigRspCb_SDK::unpack(AriSdk::ARI_UtaIdcSetTxPowerLimitingConfigRspCb_SDK *this)
{
  return AriSdk::ARI_UtaIdcSetTxPowerLimitingConfigRspCb_SDK::unpack(this);
}

uint64_t AriSdk::ARI_UtaIdcSetTxPowerLimitingConfigRspCb_SDK::ARI_UtaIdcSetTxPowerLimitingConfigRspCb_SDK(AriSdk::ARI_UtaIdcSetTxPowerLimitingConfigRspCb_SDK *this, const unsigned __int8 *a2, unsigned int a3)
{
  return AriSdk::ARI_UtaIdcSetTxPowerLimitingConfigRspCb_SDK::ARI_UtaIdcSetTxPowerLimitingConfigRspCb_SDK(this, a2, a3);
}

void AriSdk::ARI_UtaIdcSetTxPowerLimitingConfigRspCb_SDK::~ARI_UtaIdcSetTxPowerLimitingConfigRspCb_SDK(AriSdk::ARI_UtaIdcSetTxPowerLimitingConfigRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_IBICallPsStartBandwidthEstimationReq_SDK::ARI_IBICallPsStartBandwidthEstimationReq_SDK(AriSdk::ARI_IBICallPsStartBandwidthEstimationReq_SDK *this)
{
  return AriSdk::ARI_IBICallPsStartBandwidthEstimationReq_SDK::ARI_IBICallPsStartBandwidthEstimationReq_SDK(this);
}

void AriSdk::ARI_IBICallPsStartBandwidthEstimationReq_SDK::~ARI_IBICallPsStartBandwidthEstimationReq_SDK(AriSdk::ARI_IBICallPsStartBandwidthEstimationReq_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcSetTunerArbitrationConfigReqV2_SDK::ARI_UtaIdcSetTunerArbitrationConfigReqV2_SDK(AriSdk::ARI_UtaIdcSetTunerArbitrationConfigReqV2_SDK *this)
{
  return AriSdk::ARI_UtaIdcSetTunerArbitrationConfigReqV2_SDK::ARI_UtaIdcSetTunerArbitrationConfigReqV2_SDK(this);
}

void AriSdk::ARI_UtaIdcSetTunerArbitrationConfigReqV2_SDK::~ARI_UtaIdcSetTunerArbitrationConfigReqV2_SDK(AriSdk::ARI_UtaIdcSetTunerArbitrationConfigReqV2_SDK *this)
{
}

uint64_t AriSdk::ARI_IBICallPsStopBandwidthEstimationRspCb_SDK::unpack(AriSdk::ARI_IBICallPsStopBandwidthEstimationRspCb_SDK *this)
{
  return AriSdk::ARI_IBICallPsStopBandwidthEstimationRspCb_SDK::unpack(this);
}

uint64_t AriSdk::ARI_IBICallPsStopBandwidthEstimationRspCb_SDK::ARI_IBICallPsStopBandwidthEstimationRspCb_SDK(AriSdk::ARI_IBICallPsStopBandwidthEstimationRspCb_SDK *this, const unsigned __int8 *a2, unsigned int a3)
{
  return AriSdk::ARI_IBICallPsStopBandwidthEstimationRspCb_SDK::ARI_IBICallPsStopBandwidthEstimationRspCb_SDK(this, a2, a3);
}

void AriSdk::ARI_IBICallPsStopBandwidthEstimationRspCb_SDK::~ARI_IBICallPsStopBandwidthEstimationRspCb_SDK(AriSdk::ARI_IBICallPsStopBandwidthEstimationRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigReqV3_SDK::ARI_UtaIdcSetCamAntBlockPwrLmtConfigReqV3_SDK(AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigReqV3_SDK *this)
{
  return AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigReqV3_SDK::ARI_UtaIdcSetCamAntBlockPwrLmtConfigReqV3_SDK(this);
}

void AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigReqV3_SDK::~ARI_UtaIdcSetCamAntBlockPwrLmtConfigReqV3_SDK(AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigReqV3_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcSetCnvAntBlockPwrLmtConfigRspCb_SDK::unpack(AriSdk::ARI_UtaIdcSetCnvAntBlockPwrLmtConfigRspCb_SDK *this)
{
  return AriSdk::ARI_UtaIdcSetCnvAntBlockPwrLmtConfigRspCb_SDK::unpack(this);
}

uint64_t AriSdk::ARI_UtaIdcSetCnvAntBlockPwrLmtConfigRspCb_SDK::ARI_UtaIdcSetCnvAntBlockPwrLmtConfigRspCb_SDK(AriSdk::ARI_UtaIdcSetCnvAntBlockPwrLmtConfigRspCb_SDK *this, const unsigned __int8 *a2, unsigned int a3)
{
  return AriSdk::ARI_UtaIdcSetCnvAntBlockPwrLmtConfigRspCb_SDK::ARI_UtaIdcSetCnvAntBlockPwrLmtConfigRspCb_SDK(this, a2, a3);
}

void AriSdk::ARI_UtaIdcSetCnvAntBlockPwrLmtConfigRspCb_SDK::~ARI_UtaIdcSetCnvAntBlockPwrLmtConfigRspCb_SDK(AriSdk::ARI_UtaIdcSetCnvAntBlockPwrLmtConfigRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcSetCriticalCarrierConfigRspCbV2_SDK::unpack(AriSdk::ARI_UtaIdcSetCriticalCarrierConfigRspCbV2_SDK *this)
{
  return AriSdk::ARI_UtaIdcSetCriticalCarrierConfigRspCbV2_SDK::unpack(this);
}

uint64_t AriSdk::ARI_UtaIdcSetCriticalCarrierConfigRspCbV2_SDK::ARI_UtaIdcSetCriticalCarrierConfigRspCbV2_SDK(AriSdk::ARI_UtaIdcSetCriticalCarrierConfigRspCbV2_SDK *this, const unsigned __int8 *a2, unsigned int a3)
{
  return AriSdk::ARI_UtaIdcSetCriticalCarrierConfigRspCbV2_SDK::ARI_UtaIdcSetCriticalCarrierConfigRspCbV2_SDK(this, a2, a3);
}

void AriSdk::ARI_UtaIdcSetCriticalCarrierConfigRspCbV2_SDK::~ARI_UtaIdcSetCriticalCarrierConfigRspCbV2_SDK(AriSdk::ARI_UtaIdcSetCriticalCarrierConfigRspCbV2_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcSetUwbAntBlockPwrLmtConfigReqV2_SDK::ARI_UtaIdcSetUwbAntBlockPwrLmtConfigReqV2_SDK(AriSdk::ARI_UtaIdcSetUwbAntBlockPwrLmtConfigReqV2_SDK *this)
{
  return AriSdk::ARI_UtaIdcSetUwbAntBlockPwrLmtConfigReqV2_SDK::ARI_UtaIdcSetUwbAntBlockPwrLmtConfigReqV2_SDK(this);
}

void AriSdk::ARI_UtaIdcSetUwbAntBlockPwrLmtConfigReqV2_SDK::~ARI_UtaIdcSetUwbAntBlockPwrLmtConfigReqV2_SDK(AriSdk::ARI_UtaIdcSetUwbAntBlockPwrLmtConfigReqV2_SDK *this)
{
}

uint64_t AriSdk::ARI_IBICallPsStartBandwidthEstimationRspCb_SDK::unpack(AriSdk::ARI_IBICallPsStartBandwidthEstimationRspCb_SDK *this)
{
  return AriSdk::ARI_IBICallPsStartBandwidthEstimationRspCb_SDK::unpack(this);
}

uint64_t AriSdk::ARI_IBICallPsStartBandwidthEstimationRspCb_SDK::ARI_IBICallPsStartBandwidthEstimationRspCb_SDK(AriSdk::ARI_IBICallPsStartBandwidthEstimationRspCb_SDK *this, const unsigned __int8 *a2, unsigned int a3)
{
  return AriSdk::ARI_IBICallPsStartBandwidthEstimationRspCb_SDK::ARI_IBICallPsStartBandwidthEstimationRspCb_SDK(this, a2, a3);
}

void AriSdk::ARI_IBICallPsStartBandwidthEstimationRspCb_SDK::~ARI_IBICallPsStartBandwidthEstimationRspCb_SDK(AriSdk::ARI_IBICallPsStartBandwidthEstimationRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK::unpack(AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK *this)
{
  return AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK::unpack(this);
}

uint64_t AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK(AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK *this, const unsigned __int8 *a2, unsigned int a3)
{
  return AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK(this, a2, a3);
}

void AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK::~ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK(AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV3_SDK::unpack(AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV3_SDK *this)
{
  return AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV3_SDK::unpack(this);
}

uint64_t AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV3_SDK::ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV3_SDK(AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV3_SDK *this, const unsigned __int8 *a2, unsigned int a3)
{
  return AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV3_SDK::ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV3_SDK(this, a2, a3);
}

void AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV3_SDK::~ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV3_SDK(AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV3_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigReq_SDK::ARI_UtaIdcSetCellImdGnssMitigationConfigReq_SDK(AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigReq_SDK *this)
{
  return AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigReq_SDK::ARI_UtaIdcSetCellImdGnssMitigationConfigReq_SDK(this);
}

void AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigReq_SDK::~ARI_UtaIdcSetCellImdGnssMitigationConfigReq_SDK(AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigReq_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcSetUwbAntBlockPwrLmtConfigRspCbV2_SDK::unpack(AriSdk::ARI_UtaIdcSetUwbAntBlockPwrLmtConfigRspCbV2_SDK *this)
{
  return AriSdk::ARI_UtaIdcSetUwbAntBlockPwrLmtConfigRspCbV2_SDK::unpack(this);
}

uint64_t AriSdk::ARI_UtaIdcSetUwbAntBlockPwrLmtConfigRspCbV2_SDK::ARI_UtaIdcSetUwbAntBlockPwrLmtConfigRspCbV2_SDK(AriSdk::ARI_UtaIdcSetUwbAntBlockPwrLmtConfigRspCbV2_SDK *this, const unsigned __int8 *a2, unsigned int a3)
{
  return AriSdk::ARI_UtaIdcSetUwbAntBlockPwrLmtConfigRspCbV2_SDK::ARI_UtaIdcSetUwbAntBlockPwrLmtConfigRspCbV2_SDK(this, a2, a3);
}

void AriSdk::ARI_UtaIdcSetUwbAntBlockPwrLmtConfigRspCbV2_SDK::~ARI_UtaIdcSetUwbAntBlockPwrLmtConfigRspCbV2_SDK(AriSdk::ARI_UtaIdcSetUwbAntBlockPwrLmtConfigRspCbV2_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK::unpack(AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK *this)
{
  return AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK::unpack(this);
}

uint64_t AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK(AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK *this, const unsigned __int8 *a2, unsigned int a3)
{
  return AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK(this, a2, a3);
}

void AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK::~ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK(AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcSetUwbRtActivityMitigationConfigReqV2_SDK::ARI_UtaIdcSetUwbRtActivityMitigationConfigReqV2_SDK(AriSdk::ARI_UtaIdcSetUwbRtActivityMitigationConfigReqV2_SDK *this)
{
  return AriSdk::ARI_UtaIdcSetUwbRtActivityMitigationConfigReqV2_SDK::ARI_UtaIdcSetUwbRtActivityMitigationConfigReqV2_SDK(this);
}

void AriSdk::ARI_UtaIdcSetUwbRtActivityMitigationConfigReqV2_SDK::~ARI_UtaIdcSetUwbRtActivityMitigationConfigReqV2_SDK(AriSdk::ARI_UtaIdcSetUwbRtActivityMitigationConfigReqV2_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigReq_SDK::ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigReq_SDK(AriSdk::ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigReq_SDK *this)
{
  return AriSdk::ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigReq_SDK::ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigReq_SDK(this);
}

void AriSdk::ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigReq_SDK::~ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigReq_SDK(AriSdk::ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigReq_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcSetUwbRtActivityMitigationConfigRspCbV2_SDK::unpack(AriSdk::ARI_UtaIdcSetUwbRtActivityMitigationConfigRspCbV2_SDK *this)
{
  return AriSdk::ARI_UtaIdcSetUwbRtActivityMitigationConfigRspCbV2_SDK::unpack(this);
}

uint64_t AriSdk::ARI_UtaIdcSetUwbRtActivityMitigationConfigRspCbV2_SDK::ARI_UtaIdcSetUwbRtActivityMitigationConfigRspCbV2_SDK(AriSdk::ARI_UtaIdcSetUwbRtActivityMitigationConfigRspCbV2_SDK *this, const unsigned __int8 *a2, unsigned int a3)
{
  return AriSdk::ARI_UtaIdcSetUwbRtActivityMitigationConfigRspCbV2_SDK::ARI_UtaIdcSetUwbRtActivityMitigationConfigRspCbV2_SDK(this, a2, a3);
}

void AriSdk::ARI_UtaIdcSetUwbRtActivityMitigationConfigRspCbV2_SDK::~ARI_UtaIdcSetUwbRtActivityMitigationConfigRspCbV2_SDK(AriSdk::ARI_UtaIdcSetUwbRtActivityMitigationConfigRspCbV2_SDK *this)
{
}

uint64_t AriSdk::ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigRspCb_SDK::unpack(AriSdk::ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigRspCb_SDK *this)
{
  return AriSdk::ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigRspCb_SDK::unpack(this);
}

uint64_t AriSdk::ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigRspCb_SDK::ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigRspCb_SDK(AriSdk::ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigRspCb_SDK *this, const unsigned __int8 *a2, unsigned int a3)
{
  return AriSdk::ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigRspCb_SDK::ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigRspCb_SDK(this, a2, a3);
}

void AriSdk::ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigRspCb_SDK::~ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigRspCb_SDK(AriSdk::ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigRspCb_SDK *this)
{
}

uint64_t QMIServiceMsg::getNewError(QMIServiceMsg *this)
{
  return QMIServiceMsg::getNewError(this);
}

uint64_t QMIServiceMsg::serialize(QMIServiceMsg *this)
{
  return QMIServiceMsg::serialize(this);
}

uint64_t qmi::MessageBase::findTlvValue(qmi::MessageBase *this)
{
  return qmi::MessageBase::findTlvValue(this);
}

uint64_t qmi::Client::setHandler()
{
  return qmi::Client::setHandler();
}

{
  return qmi::Client::setHandler();
}

{
  return qmi::Client::setHandler();
}

uint64_t qmi::Client::setIndHandler()
{
  return qmi::Client::setIndHandler();
}

uint64_t qmi::Client::send()
{
  return qmi::Client::send();
}

uint64_t qmi::Client::start(qmi::Client *this)
{
  return qmi::Client::start(this);
}

uint64_t AriSdk::MsgBase::getGMID(AriSdk::MsgBase *this)
{
  return AriSdk::MsgBase::getGMID(this);
}

uint64_t ice::SendMsgBaseProxy::callback()
{
  return ice::SendMsgBaseProxy::callback();
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return std::logic_error::logic_error(this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return std::bad_array_new_length::bad_array_new_length(this);
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return std::__shared_weak_count::lock(this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

void std::terminate(void)
{
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return ___cxa_allocate_exception(thrown_size);
}

void __cxa_bad_cast(void)
{
}

void *__cxa_begin_catch(void *a1)
{
  return ___cxa_begin_catch(a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)___dynamic_cast(lpsrc, lpstype, lpdtype, s2d);
}

uint64_t _os_feature_enabled_impl()
{
  return __os_feature_enabled_impl();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _set_user_dir_suffix()
{
  return __set_user_dir_suffix();
}

uint64_t _sl_dlopen()
{
  return __sl_dlopen();
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return _arc4random_uniform(__upper_bound);
}

void bzero(void *a1, size_t a2)
{
}

int close(int a1)
{
  return _close(a1);
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return _dispatch_get_global_queue(identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return _dispatch_group_create();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return _dispatch_group_wait(group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return _dispatch_queue_attr_make_with_qos_class(attr, qos_class, relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return _dispatch_queue_create(label, attr);
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

void dispatch_retain(dispatch_object_t object)
{
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return _dispatch_source_create(type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return _dispatch_time(when, delta);
}

dispatch_time_t dispatch_walltime(const timespec *when, int64_t delta)
{
  return _dispatch_walltime(when, delta);
}

char *dlerror(void)
{
  return _dlerror();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return _dlopen(__path, __mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return _dlsym(__handle, __symbol);
}

void exit(int a1)
{
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return _fprintf(a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return _fputc(a1, a2);
}

void free(void *a1)
{
}

pid_t getpid(void)
{
  return _getpid();
}

const char *getprogname(void)
{
  return _getprogname();
}

int gettimeofday(timeval *a1, void *a2)
{
  return _gettimeofday(a1, a2);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_malloc(size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return _memcmp(__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

uint32_t notify_cancel(int token)
{
  return _notify_cancel(token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return _notify_get_state(token, state64);
}

uint32_t notify_post(const char *name)
{
  return _notify_post(name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return _notify_register_check(name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return _notify_register_dispatch(name, out_token, queue, handler);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return _notify_set_state(token, state64);
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

id objc_autorelease(id a1)
{
  return _objc_autorelease(a1);
}

{
}

{
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

id objc_begin_catch(void *exc_buf)
{
  return _objc_begin_catch(exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_throw(id exception)
{
}

Class objc_getClass(const char *name)
{
  return _objc_getClass(name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return _objc_getProperty(self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return _objc_initWeak(location, val);
}

id objc_loadWeak(id *location)
{
  return _objc_loadWeak(location);
}

id objc_loadWeakRetained(id *location)
{
  return _objc_loadWeakRetained(location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return [super a2];
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_isKindOfClass()
{
  return _objc_opt_isKindOfClass();
}

uint64_t objc_opt_new()
{
  return _objc_opt_new();
}

uint64_t objc_opt_respondsToSelector()
{
  return _objc_opt_respondsToSelector();
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

int objc_sync_enter(id obj)
{
  return _objc_sync_enter(obj);
}

int objc_sync_exit(id obj)
{
  return _objc_sync_exit(obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return _objc_unsafeClaimAutoreleasedReturnValue(a1);
}

int open(const char *a1, int a2, ...)
{
  return _open(a1, a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return _os_log_create(subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

int sprintf(char *a1, const char *a2, ...)
{
  return _sprintf(a1, a2);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return _sscanf(a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return _strcmp(__s1, __s2);
}

size_t strlen(const char *__s)
{
  return _strlen(__s);
}

int strncasecmp(const char *a1, const char *a2, size_t a3)
{
  return _strncasecmp(a1, a2, a3);
}

uint64_t symptom_create()
{
  return _symptom_create();
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return _sysctl(a1, a2, a3, a4, a5, a6);
}

void syslog(int a1, const char *a2, ...)
{
}

uint64_t tcp_connection_fallback_watcher_create()
{
  return _tcp_connection_fallback_watcher_create();
}

uint64_t tcp_fallback_watcher_fallback_inuse()
{
  return _tcp_fallback_watcher_fallback_inuse();
}

void xpc_array_append_value(xpc_object_t xarray, xpc_object_t value)
{
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return _xpc_array_create(objects, count);
}

size_t xpc_array_get_count(xpc_object_t xarray)
{
  return _xpc_array_get_count(xarray);
}

int64_t xpc_array_get_int64(xpc_object_t xarray, size_t index)
{
  return _xpc_array_get_int64(xarray, index);
}

uint64_t xpc_array_get_uint64(xpc_object_t xarray, size_t index)
{
  return _xpc_array_get_uint64(xarray, index);
}

xpc_object_t xpc_array_get_value(xpc_object_t xarray, size_t index)
{
  return _xpc_array_get_value(xarray, index);
}

xpc_object_t xpc_BOOL_create(BOOL value)
{
  return _xpc_BOOL_create(value);
}

BOOL xpc_BOOL_get_value(xpc_object_t xBOOL)
{
  return _xpc_BOOL_get_value(xBOOL);
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return _xpc_connection_create_mach_service(name, targetq, flags);
}

void xpc_connection_resume(xpc_connection_t connection)
{
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
}

xpc_object_t xpc_copy(xpc_object_t object)
{
  return _xpc_copy(object);
}

char *__cdecl xpc_copy_description(xpc_object_t object)
{
  return _xpc_copy_description(object);
}

xpc_object_t xpc_data_create(const void *bytes, size_t length)
{
  return _xpc_data_create(bytes, length);
}

size_t xpc_data_get_bytes(xpc_object_t xdata, void *buffer, size_t off, size_t length)
{
  return _xpc_data_get_bytes(xdata, buffer, off, length);
}

const void *__cdecl xpc_data_get_bytes_ptr(xpc_object_t xdata)
{
  return _xpc_data_get_bytes_ptr(xdata);
}

size_t xpc_data_get_length(xpc_object_t xdata)
{
  return _xpc_data_get_length(xdata);
}

BOOL xpc_dictionary_apply(xpc_object_t xdict, xpc_dictionary_applier_t applier)
{
  return _xpc_dictionary_apply(xdict, applier);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return _xpc_dictionary_create(keys, values, count);
}

xpc_object_t xpc_dictionary_create_reply(xpc_object_t original)
{
  return _xpc_dictionary_create_reply(original);
}

xpc_object_t xpc_dictionary_get_array(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_array(xdict, key);
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_BOOL(xdict, key);
}

size_t xpc_dictionary_get_count(xpc_object_t xdict)
{
  return _xpc_dictionary_get_count(xdict);
}

const void *__cdecl xpc_dictionary_get_data(xpc_object_t xdict, const char *key, size_t *length)
{
  return _xpc_dictionary_get_data(xdict, key, length);
}

xpc_object_t xpc_dictionary_get_dictionary(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_dictionary(xdict, key);
}

double xpc_dictionary_get_double(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_double(xdict, key);
}

int64_t xpc_dictionary_get_int64(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_int64(xdict, key);
}

xpc_connection_t xpc_dictionary_get_remote_connection(xpc_object_t xdict)
{
  return _xpc_dictionary_get_remote_connection(xdict);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_string(xdict, key);
}

uint64_t xpc_dictionary_get_uint64(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_uint64(xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_value(xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
}

void xpc_dictionary_set_double(xpc_object_t xdict, const char *key, double value)
{
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

void xpc_dictionary_set_uint64(xpc_object_t xdict, const char *key, uint64_t value)
{
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

double xpc_double_get_value(xpc_object_t xdouble)
{
  return _xpc_double_get_value(xdouble);
}

BOOL xpc_equal(xpc_object_t object1, xpc_object_t object2)
{
  return _xpc_equal(object1, object2);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return _xpc_get_type(object);
}

xpc_object_t xpc_int64_create(int64_t value)
{
  return _xpc_int64_create(value);
}

int64_t xpc_int64_get_value(xpc_object_t xint)
{
  return _xpc_int64_get_value(xint);
}

void xpc_release(xpc_object_t object)
{
}

xpc_object_t xpc_retain(xpc_object_t object)
{
  return _xpc_retain(object);
}

const char *__cdecl xpc_string_get_string_ptr(xpc_object_t xstring)
{
  return _xpc_string_get_string_ptr(xstring);
}

xpc_object_t xpc_uint64_create(uint64_t value)
{
  return _xpc_uint64_create(value);
}

uint64_t xpc_uint64_get_value(xpc_object_t xuint)
{
  return _xpc_uint64_get_value(xuint);
}

id objc_msgSend_AoSDeviceID(void *a1, const char *a2, ...)
{
  return [a1 AoSDeviceID];
}

id objc_msgSend_BLEActiveScanPwrLmtAssrInt(void *a1, const char *a2, ...)
{
  return [a1 BLEActiveScanPwrLmtAssrInt];
}

id objc_msgSend_CC1CarrierId(void *a1, const char *a2, ...)
{
  return [a1 CC1CarrierId];
}

id objc_msgSend_CC1Tech(void *a1, const char *a2, ...)
{
  return [a1 CC1Tech];
}

id objc_msgSend_CC2CarrierId(void *a1, const char *a2, ...)
{
  return [a1 CC2CarrierId];
}

id objc_msgSend_CC2Tech(void *a1, const char *a2, ...)
{
  return [a1 CC2Tech];
}

id objc_msgSend_CTClient(void *a1, const char *a2, ...)
{
  return [a1 CTClient];
}

id objc_msgSend_CTClientInitDone(void *a1, const char *a2, ...)
{
  return [a1 CTClientInitDone];
}

id objc_msgSend_CellAntBlockingList(void *a1, const char *a2, ...)
{
  return [a1 CellAntBlockingList];
}

id objc_msgSend_CellularAvailabilityStatus(void *a1, const char *a2, ...)
{
  return [a1 CellularAvailabilityStatus];
}

id objc_msgSend_CompanionBTRssi(void *a1, const char *a2, ...)
{
  return [a1 CompanionBTRssi];
}

id objc_msgSend_CompanionBTVersusWiFiRecommendation(void *a1, const char *a2, ...)
{
  return [a1 CompanionBTVersusWiFiRecommendation];
}

id objc_msgSend_CompanionInternetConnectionAvailable(void *a1, const char *a2, ...)
{
  return [a1 CompanionInternetConnectionAvailable];
}

id objc_msgSend_CompanionWIFIRssi(void *a1, const char *a2, ...)
{
  return [a1 CompanionWIFIRssi];
}

id objc_msgSend_CompanionWifiStatus(void *a1, const char *a2, ...)
{
  return [a1 CompanionWifiStatus];
}

id objc_msgSend_ConnectedDevices(void *a1, const char *a2, ...)
{
  return [a1 ConnectedDevices];
}

id objc_msgSend_ConnectivityContext(void *a1, const char *a2, ...)
{
  return [a1 ConnectivityContext];
}

id objc_msgSend_DataLqmIsValid(void *a1, const char *a2, ...)
{
  return [a1 DataLqmIsValid];
}

id objc_msgSend_DataLqmValue(void *a1, const char *a2, ...)
{
  return [a1 DataLqmValue];
}

id objc_msgSend_Device(void *a1, const char *a2, ...)
{
  return [a1 Device];
}

id objc_msgSend_FreqEnd(void *a1, const char *a2, ...)
{
  return [a1 FreqEnd];
}

id objc_msgSend_FreqStart(void *a1, const char *a2, ...)
{
  return [a1 FreqStart];
}

id objc_msgSend_HFBTAntBlkEnableBands(void *a1, const char *a2, ...)
{
  return [a1 HFBTAntBlkEnableBands];
}

id objc_msgSend_HandleThreadStart(void *a1, const char *a2, ...)
{
  return [a1 HandleThreadStart];
}

id objc_msgSend_HandleThreadStop(void *a1, const char *a2, ...)
{
  return [a1 HandleThreadStop];
}

id objc_msgSend_InitService(void *a1, const char *a2, ...)
{
  return [a1 InitService];
}

id objc_msgSend_IsIDSInitDone(void *a1, const char *a2, ...)
{
  return [a1 IsIDSInitDone];
}

id objc_msgSend_MCSIndex(void *a1, const char *a2, ...)
{
  return [a1 MCSIndex];
}

id objc_msgSend_PHYMode(void *a1, const char *a2, ...)
{
  return [a1 PHYMode];
}

id objc_msgSend_PrevAudioErasurePercent(void *a1, const char *a2, ...)
{
  return [a1 PrevAudioErasurePercent];
}

id objc_msgSend_PrevAudioQualityWasGood(void *a1, const char *a2, ...)
{
  return [a1 PrevAudioQualityWasGood];
}

id objc_msgSend_Priority(void *a1, const char *a2, ...)
{
  return [a1 Priority];
}

id objc_msgSend_RCU2Init(void *a1, const char *a2, ...)
{
  return [a1 RCU2Init];
}

id objc_msgSend_Rc1AntBitmap(void *a1, const char *a2, ...)
{
  return [a1 Rc1AntBitmap];
}

id objc_msgSend_Rc1IssueChannel(void *a1, const char *a2, ...)
{
  return [a1 Rc1IssueChannel];
}

id objc_msgSend_Rc1PriorityBitmap(void *a1, const char *a2, ...)
{
  return [a1 Rc1PriorityBitmap];
}

id objc_msgSend_ServiceInitDone(void *a1, const char *a2, ...)
{
  return [a1 ServiceInitDone];
}

id objc_msgSend_ULLAModeTransition(void *a1, const char *a2, ...)
{
  return [a1 ULLAModeTransition];
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return [a1 URL];
}

id objc_msgSend_URLOfModelInThisBundle(void *a1, const char *a2, ...)
{
  return [a1 URLOfModelInThisBundle];
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return [a1 UTF8String];
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return [a1 UUIDString];
}

id objc_msgSend_Uuid(void *a1, const char *a2, ...)
{
  return [a1 Uuid];
}

id objc_msgSend_VoiceLqmIsValid(void *a1, const char *a2, ...)
{
  return [a1 VoiceLqmIsValid];
}

id objc_msgSend_VoiceLqmReasonCode(void *a1, const char *a2, ...)
{
  return [a1 VoiceLqmReasonCode];
}

id objc_msgSend_VoiceLqmValue(void *a1, const char *a2, ...)
{
  return [a1 VoiceLqmValue];
}

id objc_msgSend_Wireless(void *a1, const char *a2, ...)
{
  return [a1 Wireless];
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return [a1 absoluteString];
}

id objc_msgSend_accessoryReconnect(void *a1, const char *a2, ...)
{
  return [a1 accessoryReconnect];
}

id objc_msgSend_activate(void *a1, const char *a2, ...)
{
  return [a1 activate];
}

id objc_msgSend_activeCoexFeatures(void *a1, const char *a2, ...)
{
  return [a1 activeCoexFeatures];
}

id objc_msgSend_activeConfig(void *a1, const char *a2, ...)
{
  return [a1 activeConfig];
}

id objc_msgSend_activeProfileFor2G(void *a1, const char *a2, ...)
{
  return [a1 activeProfileFor2G];
}

id objc_msgSend_activeProfileFor5G(void *a1, const char *a2, ...)
{
  return [a1 activeProfileFor5G];
}

id objc_msgSend_activeSlot(void *a1, const char *a2, ...)
{
  return [a1 activeSlot];
}

id objc_msgSend_activeSubId(void *a1, const char *a2, ...)
{
  return [a1 activeSubId];
}

id objc_msgSend_activityAlarmAvailable(void *a1, const char *a2, ...)
{
  return [a1 activityAlarmAvailable];
}

id objc_msgSend_airplayController(void *a1, const char *a2, ...)
{
  return [a1 airplayController];
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return [a1 allObjects];
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return [a1 allValues];
}

id objc_msgSend_allowedServices(void *a1, const char *a2, ...)
{
  return [a1 allowedServices];
}

id objc_msgSend_altitude(void *a1, const char *a2, ...)
{
  return [a1 altitude];
}

id objc_msgSend_antennaConfig(void *a1, const char *a2, ...)
{
  return [a1 antennaConfig];
}

id objc_msgSend_antennaSelection(void *a1, const char *a2, ...)
{
  return [a1 antennaSelection];
}

id objc_msgSend_antennaSelectionEnh2G(void *a1, const char *a2, ...)
{
  return [a1 antennaSelectionEnh2G];
}

id objc_msgSend_antennaSelectionEnh5G(void *a1, const char *a2, ...)
{
  return [a1 antennaSelectionEnh5G];
}

id objc_msgSend_antennaSelectionEnh6G(void *a1, const char *a2, ...)
{
  return [a1 antennaSelectionEnh6G];
}

id objc_msgSend_anyObject(void *a1, const char *a2, ...)
{
  return [a1 anyObject];
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return [a1 array];
}

id objc_msgSend_attached(void *a1, const char *a2, ...)
{
  return [a1 attached];
}

id objc_msgSend_audioBuiltInReceiver(void *a1, const char *a2, ...)
{
  return [a1 audioBuiltInReceiver];
}

id objc_msgSend_audioPacketExpected(void *a1, const char *a2, ...)
{
  return [a1 audioPacketExpected];
}

id objc_msgSend_audioType(void *a1, const char *a2, ...)
{
  return [a1 audioType];
}

id objc_msgSend_averagedNominalJitterBufferDelay(void *a1, const char *a2, ...)
{
  return [a1 averagedNominalJitterBufferDelay];
}

id objc_msgSend_avgRxPktLoss(void *a1, const char *a2, ...)
{
  return [a1 avgRxPktLoss];
}

id objc_msgSend_bHPCellSetBTAFH(void *a1, const char *a2, ...)
{
  return [a1 bHPCellSetBTAFH];
}

id objc_msgSend_bandInfoType(void *a1, const char *a2, ...)
{
  return [a1 bandInfoType];
}

id objc_msgSend_bars(void *a1, const char *a2, ...)
{
  return [a1 bars];
}

id objc_msgSend_baseBandEnabledProtectionTimer(void *a1, const char *a2, ...)
{
  return [a1 baseBandEnabledProtectionTimer];
}

id objc_msgSend_basebandController(void *a1, const char *a2, ...)
{
  return [a1 basebandController];
}

id objc_msgSend_batteryLife(void *a1, const char *a2, ...)
{
  return [a1 batteryLife];
}

id objc_msgSend_beaconPER(void *a1, const char *a2, ...)
{
  return [a1 beaconPER];
}

id objc_msgSend_beginMonitoring(void *a1, const char *a2, ...)
{
  return [a1 beginMonitoring];
}

id objc_msgSend_bleRSSI(void *a1, const char *a2, ...)
{
  return [a1 bleRSSI];
}

id objc_msgSend_bluetoothCoexistenceMode(void *a1, const char *a2, ...)
{
  return [a1 bluetoothCoexistenceMode];
}

id objc_msgSend_bodyTxPowerCapdBm(void *a1, const char *a2, ...)
{
  return [a1 bodyTxPowerCapdBm];
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return [a1 BOOLValue];
}

id objc_msgSend_bspMonitor(void *a1, const char *a2, ...)
{
  return [a1 bspMonitor];
}

id objc_msgSend_btAgcCoexModeEnable(void *a1, const char *a2, ...)
{
  return [a1 btAgcCoexModeEnable];
}

id objc_msgSend_btAntBlockDuration(void *a1, const char *a2, ...)
{
  return [a1 btAntBlockDuration];
}

id objc_msgSend_btChannelsToAvoidForC0B1(void *a1, const char *a2, ...)
{
  return [a1 btChannelsToAvoidForC0B1];
}

id objc_msgSend_btClkAlgnFlag(void *a1, const char *a2, ...)
{
  return [a1 btClkAlgnFlag];
}

id objc_msgSend_btConnections(void *a1, const char *a2, ...)
{
  return [a1 btConnections];
}

id objc_msgSend_btController(void *a1, const char *a2, ...)
{
  return [a1 btController];
}

id objc_msgSend_btDiversityBlocklistTypeForC0B1(void *a1, const char *a2, ...)
{
  return [a1 btDiversityBlocklistTypeForC0B1];
}

id objc_msgSend_btDiversityChannelMapForC0B0(void *a1, const char *a2, ...)
{
  return [a1 btDiversityChannelMapForC0B0];
}

id objc_msgSend_btDiversityChannelMapForC0B1(void *a1, const char *a2, ...)
{
  return [a1 btDiversityChannelMapForC0B1];
}

id objc_msgSend_btDiversityChannelMapForC1B0(void *a1, const char *a2, ...)
{
  return [a1 btDiversityChannelMapForC1B0];
}

id objc_msgSend_btDiversityChannelMapForC1B1(void *a1, const char *a2, ...)
{
  return [a1 btDiversityChannelMapForC1B1];
}

id objc_msgSend_btDiversityChannelMapOnGpsRadioActiveForC0B0(void *a1, const char *a2, ...)
{
  return [a1 btDiversityChannelMapOnGpsRadioActiveForC0B0];
}

id objc_msgSend_btDiversityChannelMapOnGpsRadioActiveForC0B1(void *a1, const char *a2, ...)
{
  return [a1 btDiversityChannelMapOnGpsRadioActiveForC0B1];
}

id objc_msgSend_btDiversityChannelMapOnGpsRadioActiveForC1B0(void *a1, const char *a2, ...)
{
  return [a1 btDiversityChannelMapOnGpsRadioActiveForC1B0];
}

id objc_msgSend_btDiversityChannelMapOnGpsRadioActiveForC1B1(void *a1, const char *a2, ...)
{
  return [a1 btDiversityChannelMapOnGpsRadioActiveForC1B1];
}

id objc_msgSend_btMetricsEnabled(void *a1, const char *a2, ...)
{
  return [a1 btMetricsEnabled];
}

id objc_msgSend_btMovingAvgRSSI(void *a1, const char *a2, ...)
{
  return [a1 btMovingAvgRSSI];
}

id objc_msgSend_btPreferred5GChannelMap(void *a1, const char *a2, ...)
{
  return [a1 btPreferred5GChannelMap];
}

id objc_msgSend_btPreferredChannelMap(void *a1, const char *a2, ...)
{
  return [a1 btPreferredChannelMap];
}

id objc_msgSend_btPreferredChannelMapHPCellularActive(void *a1, const char *a2, ...)
{
  return [a1 btPreferredChannelMapHPCellularActive];
}

id objc_msgSend_btPreferredChannelMapOnGpsRadioActive(void *a1, const char *a2, ...)
{
  return [a1 btPreferredChannelMapOnGpsRadioActive];
}

id objc_msgSend_btPreferredRole(void *a1, const char *a2, ...)
{
  return [a1 btPreferredRole];
}

id objc_msgSend_btRetransmissionRateRx(void *a1, const char *a2, ...)
{
  return [a1 btRetransmissionRateRx];
}

id objc_msgSend_btRetransmissionRateTx(void *a1, const char *a2, ...)
{
  return [a1 btRetransmissionRateTx];
}

id objc_msgSend_btTech(void *a1, const char *a2, ...)
{
  return [a1 btTech];
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return [a1 bundleIdentifier];
}

id objc_msgSend_bw(void *a1, const char *a2, ...)
{
  return [a1 bw];
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return [a1 bytes];
}

id objc_msgSend_cachedULBandwidth(void *a1, const char *a2, ...)
{
  return [a1 cachedULBandwidth];
}

id objc_msgSend_cachedULCenterFreq(void *a1, const char *a2, ...)
{
  return [a1 cachedULCenterFreq];
}

id objc_msgSend_calculateNBDynamicPolicy(void *a1, const char *a2, ...)
{
  return [a1 calculateNBDynamicPolicy];
}

id objc_msgSend_calculatePhyRate(void *a1, const char *a2, ...)
{
  return [a1 calculatePhyRate];
}

id objc_msgSend_callActiveState(void *a1, const char *a2, ...)
{
  return [a1 callActiveState];
}

id objc_msgSend_callIdPrimaryLatteCall(void *a1, const char *a2, ...)
{
  return [a1 callIdPrimaryLatteCall];
}

id objc_msgSend_callType(void *a1, const char *a2, ...)
{
  return [a1 callType];
}

id objc_msgSend_calls(void *a1, const char *a2, ...)
{
  return [a1 calls];
}

id objc_msgSend_cameraState(void *a1, const char *a2, ...)
{
  return [a1 cameraState];
}

id objc_msgSend_canBTMeetTerminusRequirement(void *a1, const char *a2, ...)
{
  return [a1 canBTMeetTerminusRequirement];
}

id objc_msgSend_canCellularMeetApplicationRequirementsAppTypeData(void *a1, const char *a2, ...)
{
  return [a1 canCellularMeetApplicationRequirementsAppTypeData];
}

id objc_msgSend_canWiFiRadioMeetMinRequirements(void *a1, const char *a2, ...)
{
  return [a1 canWiFiRadioMeetMinRequirements];
}

id objc_msgSend_cancelAllNetworking(void *a1, const char *a2, ...)
{
  return [a1 cancelAllNetworking];
}

id objc_msgSend_catsAppBitmap(void *a1, const char *a2, ...)
{
  return [a1 catsAppBitmap];
}

id objc_msgSend_catsAppPriority(void *a1, const char *a2, ...)
{
  return [a1 catsAppPriority];
}

id objc_msgSend_cbrsCoreAnalyticsMetricsSent(void *a1, const char *a2, ...)
{
  return [a1 cbrsCoreAnalyticsMetricsSent];
}

id objc_msgSend_cbrsEnterRsrpMin(void *a1, const char *a2, ...)
{
  return [a1 cbrsEnterRsrpMin];
}

id objc_msgSend_cbrsEnterRsrpOffset(void *a1, const char *a2, ...)
{
  return [a1 cbrsEnterRsrpOffset];
}

id objc_msgSend_cbrsEnterRsrqMin(void *a1, const char *a2, ...)
{
  return [a1 cbrsEnterRsrqMin];
}

id objc_msgSend_cbrsEnterRsrqOffset(void *a1, const char *a2, ...)
{
  return [a1 cbrsEnterRsrqOffset];
}

id objc_msgSend_cbrsExitRsrpMin(void *a1, const char *a2, ...)
{
  return [a1 cbrsExitRsrpMin];
}

id objc_msgSend_cbrsExitRsrpOffset(void *a1, const char *a2, ...)
{
  return [a1 cbrsExitRsrpOffset];
}

id objc_msgSend_cbrsExitRsrqMin(void *a1, const char *a2, ...)
{
  return [a1 cbrsExitRsrqMin];
}

id objc_msgSend_cbrsExitRsrqOffset(void *a1, const char *a2, ...)
{
  return [a1 cbrsExitRsrqOffset];
}

id objc_msgSend_cdrxTDDEnabledChannels(void *a1, const char *a2, ...)
{
  return [a1 cdrxTDDEnabledChannels];
}

id objc_msgSend_cellARFCN(void *a1, const char *a2, ...)
{
  return [a1 cellARFCN];
}

id objc_msgSend_cellAgressorAntBitmap(void *a1, const char *a2, ...)
{
  return [a1 cellAgressorAntBitmap];
}

id objc_msgSend_cellAntBlkEnableIdx(void *a1, const char *a2, ...)
{
  return [a1 cellAntBlkEnableIdx];
}

id objc_msgSend_cellAntBlkEnableIdx2(void *a1, const char *a2, ...)
{
  return [a1 cellAntBlkEnableIdx2];
}

id objc_msgSend_cellBand(void *a1, const char *a2, ...)
{
  return [a1 cellBand];
}

id objc_msgSend_cellBandInfo(void *a1, const char *a2, ...)
{
  return [a1 cellBandInfo];
}

id objc_msgSend_cellBandwidth(void *a1, const char *a2, ...)
{
  return [a1 cellBandwidth];
}

id objc_msgSend_cellBandwidthLimitForOOB(void *a1, const char *a2, ...)
{
  return [a1 cellBandwidthLimitForOOB];
}

id objc_msgSend_cellFrequencyLimitForOOB(void *a1, const char *a2, ...)
{
  return [a1 cellFrequencyLimitForOOB];
}

id objc_msgSend_cellID(void *a1, const char *a2, ...)
{
  return [a1 cellID];
}

id objc_msgSend_cellTxPowerLimit(void *a1, const char *a2, ...)
{
  return [a1 cellTxPowerLimit];
}

id objc_msgSend_cellularAvailabilityStatusQueue(void *a1, const char *a2, ...)
{
  return [a1 cellularAvailabilityStatusQueue];
}

id objc_msgSend_cellularCoexBand(void *a1, const char *a2, ...)
{
  return [a1 cellularCoexBand];
}

id objc_msgSend_cellularController(void *a1, const char *a2, ...)
{
  return [a1 cellularController];
}

id objc_msgSend_cellularDataEnabled(void *a1, const char *a2, ...)
{
  return [a1 cellularDataEnabled];
}

id objc_msgSend_cellularDataPossible(void *a1, const char *a2, ...)
{
  return [a1 cellularDataPossible];
}

id objc_msgSend_cellularMetricsEnabled(void *a1, const char *a2, ...)
{
  return [a1 cellularMetricsEnabled];
}

id objc_msgSend_cellularRc1PolicyManager(void *a1, const char *a2, ...)
{
  return [a1 cellularRc1PolicyManager];
}

id objc_msgSend_cellularStickinessThreaholdActive(void *a1, const char *a2, ...)
{
  return [a1 cellularStickinessThreaholdActive];
}

id objc_msgSend_cellularStickinessThreaholdIdle(void *a1, const char *a2, ...)
{
  return [a1 cellularStickinessThreaholdIdle];
}

id objc_msgSend_cellularStickinessThreaholdStationary(void *a1, const char *a2, ...)
{
  return [a1 cellularStickinessThreaholdStationary];
}

id objc_msgSend_cellularStickinessThreaholdStationaryActive(void *a1, const char *a2, ...)
{
  return [a1 cellularStickinessThreaholdStationaryActive];
}

id objc_msgSend_cellularULBandwidth(void *a1, const char *a2, ...)
{
  return [a1 cellularULBandwidth];
}

id objc_msgSend_cellularULBandwidth2(void *a1, const char *a2, ...)
{
  return [a1 cellularULBandwidth2];
}

id objc_msgSend_cellularULCenterFreq(void *a1, const char *a2, ...)
{
  return [a1 cellularULCenterFreq];
}

id objc_msgSend_cellularULCenterFreq2(void *a1, const char *a2, ...)
{
  return [a1 cellularULCenterFreq2];
}

id objc_msgSend_cellularWCI2CoexPolicyBitmap(void *a1, const char *a2, ...)
{
  return [a1 cellularWCI2CoexPolicyBitmap];
}

id objc_msgSend_centerFreq(void *a1, const char *a2, ...)
{
  return [a1 centerFreq];
}

id objc_msgSend_channel(void *a1, const char *a2, ...)
{
  return [a1 channel];
}

id objc_msgSend_channelBandwidthMHz(void *a1, const char *a2, ...)
{
  return [a1 channelBandwidthMHz];
}

id objc_msgSend_channelCenterFreqMHz(void *a1, const char *a2, ...)
{
  return [a1 channelCenterFreqMHz];
}

id objc_msgSend_channelsBlocklisted(void *a1, const char *a2, ...)
{
  return [a1 channelsBlocklisted];
}

id objc_msgSend_channelsDisableOCL2Gand5G(void *a1, const char *a2, ...)
{
  return [a1 channelsDisableOCL2Gand5G];
}

id objc_msgSend_channelsDisableOCLWiFiEnh(void *a1, const char *a2, ...)
{
  return [a1 channelsDisableOCLWiFiEnh];
}

id objc_msgSend_channelsOCLDisabled(void *a1, const char *a2, ...)
{
  return [a1 channelsOCLDisabled];
}

id objc_msgSend_channelsToEnableType7MSG(void *a1, const char *a2, ...)
{
  return [a1 channelsToEnableType7MSG];
}

id objc_msgSend_channelsToEnableType7MSG2GWiFi(void *a1, const char *a2, ...)
{
  return [a1 channelsToEnableType7MSG2GWiFi];
}

id objc_msgSend_channelsWCI2Enabled(void *a1, const char *a2, ...)
{
  return [a1 channelsWCI2Enabled];
}

id objc_msgSend_channelsWCI2Enabled2Gand5G(void *a1, const char *a2, ...)
{
  return [a1 channelsWCI2Enabled2Gand5G];
}

id objc_msgSend_channelsWCI2EnabledV2(void *a1, const char *a2, ...)
{
  return [a1 channelsWCI2EnabledV2];
}

id objc_msgSend_channelsWCI2EnabledWiFiEnh(void *a1, const char *a2, ...)
{
  return [a1 channelsWCI2EnabledWiFiEnh];
}

id objc_msgSend_channelsWiFiType7MSG2Gand5G(void *a1, const char *a2, ...)
{
  return [a1 channelsWiFiType7MSG2Gand5G];
}

id objc_msgSend_channelsWiFiType7MSGWiFiEnh(void *a1, const char *a2, ...)
{
  return [a1 channelsWiFiType7MSGWiFiEnh];
}

id objc_msgSend_checkAndScheduleSpeedTest(void *a1, const char *a2, ...)
{
  return [a1 checkAndScheduleSpeedTest];
}

id objc_msgSend_checkBTRegulatoryInfo(void *a1, const char *a2, ...)
{
  return [a1 checkBTRegulatoryInfo];
}

id objc_msgSend_checkModelFileExists(void *a1, const char *a2, ...)
{
  return [a1 checkModelFileExists];
}

id objc_msgSend_checkStoreFileExists(void *a1, const char *a2, ...)
{
  return [a1 checkStoreFileExists];
}

id objc_msgSend_checkWiFiState(void *a1, const char *a2, ...)
{
  return [a1 checkWiFiState];
}

id objc_msgSend_clamshellState(void *a1, const char *a2, ...)
{
  return [a1 clamshellState];
}

id objc_msgSend_clearAoSDeviceCounts(void *a1, const char *a2, ...)
{
  return [a1 clearAoSDeviceCounts];
}

id objc_msgSend_clientCBDeviceHandler(void *a1, const char *a2, ...)
{
  return [a1 clientCBDeviceHandler];
}

id objc_msgSend_clientLocationAuthorized(void *a1, const char *a2, ...)
{
  return [a1 clientLocationAuthorized];
}

id objc_msgSend_clientLocationHandler(void *a1, const char *a2, ...)
{
  return [a1 clientLocationHandler];
}

id objc_msgSend_clkAlgnTDDFreqCheck(void *a1, const char *a2, ...)
{
  return [a1 clkAlgnTDDFreqCheck];
}

id objc_msgSend_closeFile(void *a1, const char *a2, ...)
{
  return [a1 closeFile];
}

id objc_msgSend_coexSupported(void *a1, const char *a2, ...)
{
  return [a1 coexSupported];
}

id objc_msgSend_combinedRegistrationStatus(void *a1, const char *a2, ...)
{
  return [a1 combinedRegistrationStatus];
}

id objc_msgSend_commCenterAppDebouncingTimer(void *a1, const char *a2, ...)
{
  return [a1 commCenterAppDebouncingTimer];
}

id objc_msgSend_commCenterBTlpmThreasholdBTProximity(void *a1, const char *a2, ...)
{
  return [a1 commCenterBTlpmThreasholdBTProximity];
}

id objc_msgSend_commCenterBreadCrumProcTimer(void *a1, const char *a2, ...)
{
  return [a1 commCenterBreadCrumProcTimer];
}

id objc_msgSend_commCenterPeriodicBreadCrumTimer(void *a1, const char *a2, ...)
{
  return [a1 commCenterPeriodicBreadCrumTimer];
}

id objc_msgSend_commCenterStickinessThreasholdNotinWiFiProximity(void *a1, const char *a2, ...)
{
  return [a1 commCenterStickinessThreasholdNotinWiFiProximity];
}

id objc_msgSend_commCenterStickinessThreasholdWiFiProximity(void *a1, const char *a2, ...)
{
  return [a1 commCenterStickinessThreasholdWiFiProximity];
}

id objc_msgSend_commCenterThumperStickinessThreasholdNotinBTProximity(void *a1, const char *a2, ...)
{
  return [a1 commCenterThumperStickinessThreasholdNotinBTProximity];
}

id objc_msgSend_configureAccReportMode(void *a1, const char *a2, ...)
{
  return [a1 configureAccReportMode];
}

id objc_msgSend_configureAirplaneNotification(void *a1, const char *a2, ...)
{
  return [a1 configureAirplaneNotification];
}

id objc_msgSend_configureBTAntennaSelection(void *a1, const char *a2, ...)
{
  return [a1 configureBTAntennaSelection];
}

id objc_msgSend_configureFaceTimeRTPMetricsReporting(void *a1, const char *a2, ...)
{
  return [a1 configureFaceTimeRTPMetricsReporting];
}

id objc_msgSend_configureForLTECDRXWiFiTimeSharing(void *a1, const char *a2, ...)
{
  return [a1 configureForLTECDRXWiFiTimeSharing];
}

id objc_msgSend_configureIDSMetricsReporting(void *a1, const char *a2, ...)
{
  return [a1 configureIDSMetricsReporting];
}

id objc_msgSend_configureRTPMetricsReporting(void *a1, const char *a2, ...)
{
  return [a1 configureRTPMetricsReporting];
}

id objc_msgSend_configureSupportedPlatform(void *a1, const char *a2, ...)
{
  return [a1 configureSupportedPlatform];
}

id objc_msgSend_configureTelephonyNotification(void *a1, const char *a2, ...)
{
  return [a1 configureTelephonyNotification];
}

id objc_msgSend_configureWiFiChannelMap(void *a1, const char *a2, ...)
{
  return [a1 configureWiFiChannelMap];
}

id objc_msgSend_configureWiFiNotification(void *a1, const char *a2, ...)
{
  return [a1 configureWiFiNotification];
}

id objc_msgSend_configureWifiAntennaSelectionForCoex(void *a1, const char *a2, ...)
{
  return [a1 configureWifiAntennaSelectionForCoex];
}

id objc_msgSend_configuredMaxDLBW(void *a1, const char *a2, ...)
{
  return [a1 configuredMaxDLBW];
}

id objc_msgSend_configuredMaxULBW(void *a1, const char *a2, ...)
{
  return [a1 configuredMaxULBW];
}

id objc_msgSend_connectBaseband(void *a1, const char *a2, ...)
{
  return [a1 connectBaseband];
}

id objc_msgSend_connectedAccessories(void *a1, const char *a2, ...)
{
  return [a1 connectedAccessories];
}

id objc_msgSend_connectionID(void *a1, const char *a2, ...)
{
  return [a1 connectionID];
}

id objc_msgSend_constructXpcMessage(void *a1, const char *a2, ...)
{
  return [a1 constructXpcMessage];
}

id objc_msgSend_controllerTxPowerLimit(void *a1, const char *a2, ...)
{
  return [a1 controllerTxPowerLimit];
}

id objc_msgSend_coordinate(void *a1, const char *a2, ...)
{
  return [a1 coordinate];
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return [a1 copy];
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return [a1 count];
}

id objc_msgSend_countryCode(void *a1, const char *a2, ...)
{
  return [a1 countryCode];
}

id objc_msgSend_create(void *a1, const char *a2, ...)
{
  return [a1 create];
}

id objc_msgSend_createFaceIDpowerTablefromPlist(void *a1, const char *a2, ...)
{
  return [a1 createFaceIDpowerTablefromPlist];
}

id objc_msgSend_createHardcodedFcamClientMappings(void *a1, const char *a2, ...)
{
  return [a1 createHardcodedFcamClientMappings];
}

id objc_msgSend_createHardcodedFidClientMappings(void *a1, const char *a2, ...)
{
  return [a1 createHardcodedFidClientMappings];
}

id objc_msgSend_createHardcodedJpgRegClientMappings(void *a1, const char *a2, ...)
{
  return [a1 createHardcodedJpgRegClientMappings];
}

id objc_msgSend_createHardcodedRc1ClientMappings(void *a1, const char *a2, ...)
{
  return [a1 createHardcodedRc1ClientMappings];
}

id objc_msgSend_createHardcodedWifiClientMappings(void *a1, const char *a2, ...)
{
  return [a1 createHardcodedWifiClientMappings];
}

id objc_msgSend_createIBIClient(void *a1, const char *a2, ...)
{
  return [a1 createIBIClient];
}

id objc_msgSend_createMLModel(void *a1, const char *a2, ...)
{
  return [a1 createMLModel];
}

id objc_msgSend_createNetworkSymptomsFeed(void *a1, const char *a2, ...)
{
  return [a1 createNetworkSymptomsFeed];
}

id objc_msgSend_createQMIClient(void *a1, const char *a2, ...)
{
  return [a1 createQMIClient];
}

id objc_msgSend_createSymptomsService(void *a1, const char *a2, ...)
{
  return [a1 createSymptomsService];
}

id objc_msgSend_createWrmSdmLocationManager(void *a1, const char *a2, ...)
{
  return [a1 createWrmSdmLocationManager];
}

id objc_msgSend_ctServiceType(void *a1, const char *a2, ...)
{
  return [a1 ctServiceType];
}

id objc_msgSend_cumRxPktLoss(void *a1, const char *a2, ...)
{
  return [a1 cumRxPktLoss];
}

id objc_msgSend_cumulativeNominalJitterBufferDelay(void *a1, const char *a2, ...)
{
  return [a1 cumulativeNominalJitterBufferDelay];
}

id objc_msgSend_currCBRSCellFound(void *a1, const char *a2, ...)
{
  return [a1 currCBRSCellFound];
}

id objc_msgSend_currNRCellFound(void *a1, const char *a2, ...)
{
  return [a1 currNRCellFound];
}

id objc_msgSend_currentBitRate(void *a1, const char *a2, ...)
{
  return [a1 currentBitRate];
}

id objc_msgSend_currentCallTargetBitRate(void *a1, const char *a2, ...)
{
  return [a1 currentCallTargetBitRate];
}

id objc_msgSend_currentEstimates(void *a1, const char *a2, ...)
{
  return [a1 currentEstimates];
}

id objc_msgSend_currentHandler(void *a1, const char *a2, ...)
{
  return [a1 currentHandler];
}

id objc_msgSend_currentHarvestedCellTypeFR2Capable(void *a1, const char *a2, ...)
{
  return [a1 currentHarvestedCellTypeFR2Capable];
}

id objc_msgSend_currentKnownNetworkProfile(void *a1, const char *a2, ...)
{
  return [a1 currentKnownNetworkProfile];
}

id objc_msgSend_currentNRCellType(void *a1, const char *a2, ...)
{
  return [a1 currentNRCellType];
}

id objc_msgSend_currentRunLoop(void *a1, const char *a2, ...)
{
  return [a1 currentRunLoop];
}

id objc_msgSend_currentThread(void *a1, const char *a2, ...)
{
  return [a1 currentThread];
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return [a1 data];
}

id objc_msgSend_dataAttachedWithCellularNetwork(void *a1, const char *a2, ...)
{
  return [a1 dataAttachedWithCellularNetwork];
}

id objc_msgSend_dataBW(void *a1, const char *a2, ...)
{
  return [a1 dataBW];
}

id objc_msgSend_dataBearerTechnology(void *a1, const char *a2, ...)
{
  return [a1 dataBearerTechnology];
}

id objc_msgSend_dataBtMovingAvgAlphaDenum(void *a1, const char *a2, ...)
{
  return [a1 dataBtMovingAvgAlphaDenum];
}

id objc_msgSend_dataBtStickinessTimeThreshMs(void *a1, const char *a2, ...)
{
  return [a1 dataBtStickinessTimeThreshMs];
}

id objc_msgSend_dataEnabled(void *a1, const char *a2, ...)
{
  return [a1 dataEnabled];
}

id objc_msgSend_dataIndicator(void *a1, const char *a2, ...)
{
  return [a1 dataIndicator];
}

id objc_msgSend_dataLqmState(void *a1, const char *a2, ...)
{
  return [a1 dataLqmState];
}

id objc_msgSend_dataMinBtRssiTh0(void *a1, const char *a2, ...)
{
  return [a1 dataMinBtRssiTh0];
}

id objc_msgSend_dataMinBtRssiTh1(void *a1, const char *a2, ...)
{
  return [a1 dataMinBtRssiTh1];
}

id objc_msgSend_dataMinWifiBeaconPerTh0(void *a1, const char *a2, ...)
{
  return [a1 dataMinWifiBeaconPerTh0];
}

id objc_msgSend_dataMinWifiRssiTh0(void *a1, const char *a2, ...)
{
  return [a1 dataMinWifiRssiTh0];
}

id objc_msgSend_dataMinWifiRssiTh1(void *a1, const char *a2, ...)
{
  return [a1 dataMinWifiRssiTh1];
}

id objc_msgSend_dataMinWifiSnrTh0(void *a1, const char *a2, ...)
{
  return [a1 dataMinWifiSnrTh0];
}

id objc_msgSend_dataMinWifiSnrTh1(void *a1, const char *a2, ...)
{
  return [a1 dataMinWifiSnrTh1];
}

id objc_msgSend_dataModeLTE(void *a1, const char *a2, ...)
{
  return [a1 dataModeLTE];
}

id objc_msgSend_dataPreferredSlot(void *a1, const char *a2, ...)
{
  return [a1 dataPreferredSlot];
}

id objc_msgSend_dataPreferredSlotOnCBRS(void *a1, const char *a2, ...)
{
  return [a1 dataPreferredSlotOnCBRS];
}

id objc_msgSend_dataWifiMinBeaconCount(void *a1, const char *a2, ...)
{
  return [a1 dataWifiMinBeaconCount];
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return [a1 date];
}

id objc_msgSend_deactivateMobilityContexts(void *a1, const char *a2, ...)
{
  return [a1 deactivateMobilityContexts];
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return [a1 defaultCenter];
}

id objc_msgSend_defaultConfigurationCellular(void *a1, const char *a2, ...)
{
  return [a1 defaultConfigurationCellular];
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return [a1 defaultManager];
}

id objc_msgSend_deltaVideoErasure(void *a1, const char *a2, ...)
{
  return [a1 deltaVideoErasure];
}

id objc_msgSend_deploymentId(void *a1, const char *a2, ...)
{
  return [a1 deploymentId];
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return [a1 description];
}

id objc_msgSend_detectedFR1CellBW(void *a1, const char *a2, ...)
{
  return [a1 detectedFR1CellBW];
}

id objc_msgSend_detectedFR1CellCountLocDB(void *a1, const char *a2, ...)
{
  return [a1 detectedFR1CellCountLocDB];
}

id objc_msgSend_detectedFR2CellCountLocDB(void *a1, const char *a2, ...)
{
  return [a1 detectedFR2CellCountLocDB];
}

id objc_msgSend_determineifSABWCriteriaMet(void *a1, const char *a2, ...)
{
  return [a1 determineifSABWCriteriaMet];
}

id objc_msgSend_deviceFlags(void *a1, const char *a2, ...)
{
  return [a1 deviceFlags];
}

id objc_msgSend_deviceICheapFR2Coverage(void *a1, const char *a2, ...)
{
  return [a1 deviceICheapFR2Coverage];
}

id objc_msgSend_deviceICheapFR2CoverageSync(void *a1, const char *a2, ...)
{
  return [a1 deviceICheapFR2CoverageSync];
}

id objc_msgSend_deviceIdentifier(void *a1, const char *a2, ...)
{
  return [a1 deviceIdentifier];
}

id objc_msgSend_deviceInRoaming(void *a1, const char *a2, ...)
{
  return [a1 deviceInRoaming];
}

id objc_msgSend_deviceName(void *a1, const char *a2, ...)
{
  return [a1 deviceName];
}

id objc_msgSend_devices(void *a1, const char *a2, ...)
{
  return [a1 devices];
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return [a1 dictionary];
}

id objc_msgSend_dictionaryRepresentation(void *a1, const char *a2, ...)
{
  return [a1 dictionaryRepresentation];
}

id objc_msgSend_didWiFiDeviceReset(void *a1, const char *a2, ...)
{
  return [a1 didWiFiDeviceReset];
}

id objc_msgSend_disableICEClient(void *a1, const char *a2, ...)
{
  return [a1 disableICEClient];
}

id objc_msgSend_disableLQMUpdate(void *a1, const char *a2, ...)
{
  return [a1 disableLQMUpdate];
}

id objc_msgSend_disableQMIClient(void *a1, const char *a2, ...)
{
  return [a1 disableQMIClient];
}

id objc_msgSend_disconnectedReason(void *a1, const char *a2, ...)
{
  return [a1 disconnectedReason];
}

id objc_msgSend_displayAppBundleIdentifier(void *a1, const char *a2, ...)
{
  return [a1 displayAppBundleIdentifier];
}

id objc_msgSend_distantFuture(void *a1, const char *a2, ...)
{
  return [a1 distantFuture];
}

id objc_msgSend_distantPast(void *a1, const char *a2, ...)
{
  return [a1 distantPast];
}

id objc_msgSend_dlBandwidth(void *a1, const char *a2, ...)
{
  return [a1 dlBandwidth];
}

id objc_msgSend_dlBandwidth2(void *a1, const char *a2, ...)
{
  return [a1 dlBandwidth2];
}

id objc_msgSend_dlCPConfig(void *a1, const char *a2, ...)
{
  return [a1 dlCPConfig];
}

id objc_msgSend_dlCenterFreq(void *a1, const char *a2, ...)
{
  return [a1 dlCenterFreq];
}

id objc_msgSend_dlCenterFreq2(void *a1, const char *a2, ...)
{
  return [a1 dlCenterFreq2];
}

id objc_msgSend_doesIRATClientSubscriptionContextExist(void *a1, const char *a2, ...)
{
  return [a1 doesIRATClientSubscriptionContextExist];
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return [a1 doubleValue];
}

id objc_msgSend_downloadSize(void *a1, const char *a2, ...)
{
  return [a1 downloadSize];
}

id objc_msgSend_downloadWiFiBTCoexProfiles(void *a1, const char *a2, ...)
{
  return [a1 downloadWiFiBTCoexProfiles];
}

id objc_msgSend_dpdFailureDetected(void *a1, const char *a2, ...)
{
  return [a1 dpdFailureDetected];
}

id objc_msgSend_dumpiRATCellToWifi(void *a1, const char *a2, ...)
{
  return [a1 dumpiRATCellToWifi];
}

id objc_msgSend_dumpiRATWifiToCell(void *a1, const char *a2, ...)
{
  return [a1 dumpiRATWifiToCell];
}

id objc_msgSend_dynamicAntBlkingBand(void *a1, const char *a2, ...)
{
  return [a1 dynamicAntBlkingBand];
}

id objc_msgSend_dynamicCellAntBlkEnableIdx1(void *a1, const char *a2, ...)
{
  return [a1 dynamicCellAntBlkEnableIdx1];
}

id objc_msgSend_dynamicCellAntBlkEnableIdx2(void *a1, const char *a2, ...)
{
  return [a1 dynamicCellAntBlkEnableIdx2];
}

id objc_msgSend_eaConnection(void *a1, const char *a2, ...)
{
  return [a1 eaConnection];
}

id objc_msgSend_enableLQMUpdate(void *a1, const char *a2, ...)
{
  return [a1 enableLQMUpdate];
}

id objc_msgSend_enableWifiChannelAvoidance(void *a1, const char *a2, ...)
{
  return [a1 enableWifiChannelAvoidance];
}

id objc_msgSend_enableWifiLaaCoexMode(void *a1, const char *a2, ...)
{
  return [a1 enableWifiLaaCoexMode];
}

id objc_msgSend_enableiRATManager(void *a1, const char *a2, ...)
{
  return [a1 enableiRATManager];
}

id objc_msgSend_endMonitoring(void *a1, const char *a2, ...)
{
  return [a1 endMonitoring];
}

id objc_msgSend_enhancedLinkQuality(void *a1, const char *a2, ...)
{
  return [a1 enhancedLinkQuality];
}

id objc_msgSend_enterTestMode(void *a1, const char *a2, ...)
{
  return [a1 enterTestMode];
}

id objc_msgSend_erasuresInSpeech(void *a1, const char *a2, ...)
{
  return [a1 erasuresInSpeech];
}

id objc_msgSend_estimatedBWDL(void *a1, const char *a2, ...)
{
  return [a1 estimatedBWDL];
}

id objc_msgSend_estimatedBWDLConf(void *a1, const char *a2, ...)
{
  return [a1 estimatedBWDLConf];
}

id objc_msgSend_estimatedBWUL(void *a1, const char *a2, ...)
{
  return [a1 estimatedBWUL];
}

id objc_msgSend_estimatedBWULConf(void *a1, const char *a2, ...)
{
  return [a1 estimatedBWULConf];
}

id objc_msgSend_evalExitForceOutranking(void *a1, const char *a2, ...)
{
  return [a1 evalExitForceOutranking];
}

id objc_msgSend_evalSAStateSlice(void *a1, const char *a2, ...)
{
  return [a1 evalSAStateSlice];
}

id objc_msgSend_evaluateActiveCallQuality(void *a1, const char *a2, ...)
{
  return [a1 evaluateActiveCallQuality];
}

id objc_msgSend_evaluateBTWiFiLink(void *a1, const char *a2, ...)
{
  return [a1 evaluateBTWiFiLink];
}

id objc_msgSend_evaluateBTWiFiLinkForTerminus(void *a1, const char *a2, ...)
{
  return [a1 evaluateBTWiFiLinkForTerminus];
}

id objc_msgSend_evaluateBackHaulLink(void *a1, const char *a2, ...)
{
  return [a1 evaluateBackHaulLink];
}

id objc_msgSend_evaluateCbrsInSingleSimMode(void *a1, const char *a2, ...)
{
  return [a1 evaluateCbrsInSingleSimMode];
}

id objc_msgSend_evaluateDLThroughput(void *a1, const char *a2, ...)
{
  return [a1 evaluateDLThroughput];
}

id objc_msgSend_evaluateGen9rFemConfig(void *a1, const char *a2, ...)
{
  return [a1 evaluateGen9rFemConfig];
}

id objc_msgSend_evaluateHandover(void *a1, const char *a2, ...)
{
  return [a1 evaluateHandover];
}

id objc_msgSend_evaluateULCARestrictions(void *a1, const char *a2, ...)
{
  return [a1 evaluateULCARestrictions];
}

id objc_msgSend_evaluateULThroughput(void *a1, const char *a2, ...)
{
  return [a1 evaluateULThroughput];
}

id objc_msgSend_evaluateWiFiLink(void *a1, const char *a2, ...)
{
  return [a1 evaluateWiFiLink];
}

id objc_msgSend_evaluateWiFiVersusCell(void *a1, const char *a2, ...)
{
  return [a1 evaluateWiFiVersusCell];
}

id objc_msgSend_existingContexts(void *a1, const char *a2, ...)
{
  return [a1 existingContexts];
}

id objc_msgSend_existingSessions(void *a1, const char *a2, ...)
{
  return [a1 existingSessions];
}

id objc_msgSend_exitSaDepriotizationEval(void *a1, const char *a2, ...)
{
  return [a1 exitSaDepriotizationEval];
}

id objc_msgSend_exitTestMode(void *a1, const char *a2, ...)
{
  return [a1 exitTestMode];
}

id objc_msgSend_expectedThroughputVIBE(void *a1, const char *a2, ...)
{
  return [a1 expectedThroughputVIBE];
}

id objc_msgSend_experimentId(void *a1, const char *a2, ...)
{
  return [a1 experimentId];
}

id objc_msgSend_extAccessory(void *a1, const char *a2, ...)
{
  return [a1 extAccessory];
}

id objc_msgSend_faceTimeAleratedModeCCATh0(void *a1, const char *a2, ...)
{
  return [a1 faceTimeAleratedModeCCATh0];
}

id objc_msgSend_faceTimeAleratedModeCCATh1(void *a1, const char *a2, ...)
{
  return [a1 faceTimeAleratedModeCCATh1];
}

id objc_msgSend_faceTimeAleratedModeRssiTh0(void *a1, const char *a2, ...)
{
  return [a1 faceTimeAleratedModeRssiTh0];
}

id objc_msgSend_faceTimeAleratedModeRssiTh1(void *a1, const char *a2, ...)
{
  return [a1 faceTimeAleratedModeRssiTh1];
}

id objc_msgSend_faceTimeAleratedModeStationCount(void *a1, const char *a2, ...)
{
  return [a1 faceTimeAleratedModeStationCount];
}

id objc_msgSend_faceTimeAleratedModeTxPer0(void *a1, const char *a2, ...)
{
  return [a1 faceTimeAleratedModeTxPer0];
}

id objc_msgSend_faceTimeAleratedModeTxPer1(void *a1, const char *a2, ...)
{
  return [a1 faceTimeAleratedModeTxPer1];
}

id objc_msgSend_faceTimeAleratedModeVideoErasures(void *a1, const char *a2, ...)
{
  return [a1 faceTimeAleratedModeVideoErasures];
}

id objc_msgSend_faceTimeCellularStickinessThreaholdActive(void *a1, const char *a2, ...)
{
  return [a1 faceTimeCellularStickinessThreaholdActive];
}

id objc_msgSend_faceTimeEnhancedVideoMetricsEnabled(void *a1, const char *a2, ...)
{
  return [a1 faceTimeEnhancedVideoMetricsEnabled];
}

id objc_msgSend_faceTimeHandoverAvgRxPktLossThreshold(void *a1, const char *a2, ...)
{
  return [a1 faceTimeHandoverAvgRxPktLossThreshold];
}

id objc_msgSend_faceTimeHandoverRxPktLossThreshold(void *a1, const char *a2, ...)
{
  return [a1 faceTimeHandoverRxPktLossThreshold];
}

id objc_msgSend_faceTimeMinActiveWiFiAvgTxPktLossRateTh(void *a1, const char *a2, ...)
{
  return [a1 faceTimeMinActiveWiFiAvgTxPktLossRateTh];
}

id objc_msgSend_faceTimeMinActiveWiFiRssiTh0(void *a1, const char *a2, ...)
{
  return [a1 faceTimeMinActiveWiFiRssiTh0];
}

id objc_msgSend_faceTimeMinActiveWiFiRssiTh1(void *a1, const char *a2, ...)
{
  return [a1 faceTimeMinActiveWiFiRssiTh1];
}

id objc_msgSend_faceTimeMovingAverageWindow(void *a1, const char *a2, ...)
{
  return [a1 faceTimeMovingAverageWindow];
}

id objc_msgSend_faceTimeVideoPacketLoss(void *a1, const char *a2, ...)
{
  return [a1 faceTimeVideoPacketLoss];
}

id objc_msgSend_fastChargingHystersisTimer(void *a1, const char *a2, ...)
{
  return [a1 fastChargingHystersisTimer];
}

id objc_msgSend_feedAWDCallEndStats(void *a1, const char *a2, ...)
{
  return [a1 feedAWDCallEndStats];
}

id objc_msgSend_feedAWDCoreWiFiMetrics(void *a1, const char *a2, ...)
{
  return [a1 feedAWDCoreWiFiMetrics];
}

id objc_msgSend_feedAWDMetricsCellularStats(void *a1, const char *a2, ...)
{
  return [a1 feedAWDMetricsCellularStats];
}

id objc_msgSend_feedAWDMetricsWiFiStats(void *a1, const char *a2, ...)
{
  return [a1 feedAWDMetricsWiFiStats];
}

id objc_msgSend_feedAWDRadioStats(void *a1, const char *a2, ...)
{
  return [a1 feedAWDRadioStats];
}

id objc_msgSend_fetchWRMdebugPlistForceRTG(void *a1, const char *a2, ...)
{
  return [a1 fetchWRMdebugPlistForceRTG];
}

id objc_msgSend_fetchWRMdebugPlistForceTDD(void *a1, const char *a2, ...)
{
  return [a1 fetchWRMdebugPlistForceTDD];
}

id objc_msgSend_fileSize(void *a1, const char *a2, ...)
{
  return [a1 fileSize];
}

id objc_msgSend_fileValue(void *a1, const char *a2, ...)
{
  return [a1 fileValue];
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return [a1 firstObject];
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return [a1 floatValue];
}

id objc_msgSend_forceWiFiBTCoexToTDD(void *a1, const char *a2, ...)
{
  return [a1 forceWiFiBTCoexToTDD];
}

id objc_msgSend_frameConfiguration(void *a1, const char *a2, ...)
{
  return [a1 frameConfiguration];
}

id objc_msgSend_frequencyBand(void *a1, const char *a2, ...)
{
  return [a1 frequencyBand];
}

id objc_msgSend_ftController(void *a1, const char *a2, ...)
{
  return [a1 ftController];
}

id objc_msgSend_genre(void *a1, const char *a2, ...)
{
  return [a1 genre];
}

id objc_msgSend_genreIdentifier(void *a1, const char *a2, ...)
{
  return [a1 genreIdentifier];
}

id objc_msgSend_get2GHzSub15msAudioDevicesConnected(void *a1, const char *a2, ...)
{
  return [a1 get2GHzSub15msAudioDevicesConnected];
}

id objc_msgSend_get2GHzSub15msNonSCOConnected(void *a1, const char *a2, ...)
{
  return [a1 get2GHzSub15msNonSCOConnected];
}

id objc_msgSend_getAPMHandle(void *a1, const char *a2, ...)
{
  return [a1 getAPMHandle];
}

id objc_msgSend_getAVConferenceController(void *a1, const char *a2, ...)
{
  return [a1 getAVConferenceController];
}

id objc_msgSend_getAWDService(void *a1, const char *a2, ...)
{
  return [a1 getAWDService];
}

id objc_msgSend_getActiveSlot(void *a1, const char *a2, ...)
{
  return [a1 getActiveSlot];
}

id objc_msgSend_getActiveULCAConfig(void *a1, const char *a2, ...)
{
  return [a1 getActiveULCAConfig];
}

id objc_msgSend_getAddress(void *a1, const char *a2, ...)
{
  return [a1 getAddress];
}

id objc_msgSend_getAdjustedBeaconPer(void *a1, const char *a2, ...)
{
  return [a1 getAdjustedBeaconPer];
}

id objc_msgSend_getAgeOfMetricCurrInstant(void *a1, const char *a2, ...)
{
  return [a1 getAgeOfMetricCurrInstant];
}

id objc_msgSend_getAirPlaneMode(void *a1, const char *a2, ...)
{
  return [a1 getAirPlaneMode];
}

id objc_msgSend_getAllDevicesWithArchivedDevices(void *a1, const char *a2, ...)
{
  return [a1 getAllDevicesWithArchivedDevices];
}

id objc_msgSend_getAntBlockConfigGnssImdClient(void *a1, const char *a2, ...)
{
  return [a1 getAntBlockConfigGnssImdClient];
}

id objc_msgSend_getAnticipiatedTxPer(void *a1, const char *a2, ...)
{
  return [a1 getAnticipiatedTxPer];
}

id objc_msgSend_getAnticipiatedTxPerValid(void *a1, const char *a2, ...)
{
  return [a1 getAnticipiatedTxPerValid];
}

id objc_msgSend_getAny2GHzBTDevicesConnected(void *a1, const char *a2, ...)
{
  return [a1 getAny2GHzBTDevicesConnected];
}

id objc_msgSend_getAny5GHzBTDevicesConnected(void *a1, const char *a2, ...)
{
  return [a1 getAny5GHzBTDevicesConnected];
}

id objc_msgSend_getAnyAoSLinkActive(void *a1, const char *a2, ...)
{
  return [a1 getAnyAoSLinkActive];
}

id objc_msgSend_getApplicationType(void *a1, const char *a2, ...)
{
  return [a1 getApplicationType];
}

id objc_msgSend_getAvgRxPDUSize(void *a1, const char *a2, ...)
{
  return [a1 getAvgRxPDUSize];
}

id objc_msgSend_getAvgRxPDUSizeMovAvg(void *a1, const char *a2, ...)
{
  return [a1 getAvgRxPDUSizeMovAvg];
}

id objc_msgSend_getAvgTxPDUSize(void *a1, const char *a2, ...)
{
  return [a1 getAvgTxPDUSize];
}

id objc_msgSend_getAvgTxPDUSizeMovAvg(void *a1, const char *a2, ...)
{
  return [a1 getAvgTxPDUSizeMovAvg];
}

id objc_msgSend_getBEDecision(void *a1, const char *a2, ...)
{
  return [a1 getBEDecision];
}

id objc_msgSend_getBTLQMScore(void *a1, const char *a2, ...)
{
  return [a1 getBTLQMScore];
}

id objc_msgSend_getBTRole(void *a1, const char *a2, ...)
{
  return [a1 getBTRole];
}

id objc_msgSend_getBTState(void *a1, const char *a2, ...)
{
  return [a1 getBTState];
}

id objc_msgSend_getBadVideoCounter(void *a1, const char *a2, ...)
{
  return [a1 getBadVideoCounter];
}

id objc_msgSend_getBadVoiceCounter(void *a1, const char *a2, ...)
{
  return [a1 getBadVoiceCounter];
}

id objc_msgSend_getBand40BUlBw(void *a1, const char *a2, ...)
{
  return [a1 getBand40BUlBw];
}

id objc_msgSend_getBand40BUlCenterFreq(void *a1, const char *a2, ...)
{
  return [a1 getBand40BUlCenterFreq];
}

id objc_msgSend_getBand41A1UlBw(void *a1, const char *a2, ...)
{
  return [a1 getBand41A1UlBw];
}

id objc_msgSend_getBand41A1UlCenterFreq(void *a1, const char *a2, ...)
{
  return [a1 getBand41A1UlCenterFreq];
}

id objc_msgSend_getBand41A2UlBw(void *a1, const char *a2, ...)
{
  return [a1 getBand41A2UlBw];
}

id objc_msgSend_getBand41A2UlCenterFreq(void *a1, const char *a2, ...)
{
  return [a1 getBand41A2UlCenterFreq];
}

id objc_msgSend_getBandInfoDataSlot(void *a1, const char *a2, ...)
{
  return [a1 getBandInfoDataSlot];
}

id objc_msgSend_getBandWidthDataSlot(void *a1, const char *a2, ...)
{
  return [a1 getBandWidthDataSlot];
}

id objc_msgSend_getBandwidth(void *a1, const char *a2, ...)
{
  return [a1 getBandwidth];
}

id objc_msgSend_getBeaconPer(void *a1, const char *a2, ...)
{
  return [a1 getBeaconPer];
}

id objc_msgSend_getBtActivePhy(void *a1, const char *a2, ...)
{
  return [a1 getBtActivePhy];
}

id objc_msgSend_getBtBlockedAntennaForPencilCoexByPlatform(void *a1, const char *a2, ...)
{
  return [a1 getBtBlockedAntennaForPencilCoexByPlatform];
}

id objc_msgSend_getBtRxPer(void *a1, const char *a2, ...)
{
  return [a1 getBtRxPer];
}

id objc_msgSend_getBtTxPer(void *a1, const char *a2, ...)
{
  return [a1 getBtTxPer];
}

id objc_msgSend_getBufferedAppType(void *a1, const char *a2, ...)
{
  return [a1 getBufferedAppType];
}

id objc_msgSend_getBufferedLinkType(void *a1, const char *a2, ...)
{
  return [a1 getBufferedLinkType];
}

id objc_msgSend_getCCA(void *a1, const char *a2, ...)
{
  return [a1 getCCA];
}

id objc_msgSend_getCTConnectionReference(void *a1, const char *a2, ...)
{
  return [a1 getCTConnectionReference];
}

id objc_msgSend_getCTDataIndictor(void *a1, const char *a2, ...)
{
  return [a1 getCTDataIndictor];
}

id objc_msgSend_getCTService(void *a1, const char *a2, ...)
{
  return [a1 getCTService];
}

id objc_msgSend_getCalculatedAvailableRxPhyBandwidth(void *a1, const char *a2, ...)
{
  return [a1 getCalculatedAvailableRxPhyBandwidth];
}

id objc_msgSend_getCalculatedAvailableTxPhyBandwidth(void *a1, const char *a2, ...)
{
  return [a1 getCalculatedAvailableTxPhyBandwidth];
}

id objc_msgSend_getCallState(void *a1, const char *a2, ...)
{
  return [a1 getCallState];
}

id objc_msgSend_getCarPlayScanRelaxReason(void *a1, const char *a2, ...)
{
  return [a1 getCarPlayScanRelaxReason];
}

id objc_msgSend_getCellConfiguredBandwidthThreshold(void *a1, const char *a2, ...)
{
  return [a1 getCellConfiguredBandwidthThreshold];
}

id objc_msgSend_getCellularDataLQM(void *a1, const char *a2, ...)
{
  return [a1 getCellularDataLQM];
}

id objc_msgSend_getChannel(void *a1, const char *a2, ...)
{
  return [a1 getChannel];
}

id objc_msgSend_getChannelActivity(void *a1, const char *a2, ...)
{
  return [a1 getChannelActivity];
}

id objc_msgSend_getChannelType(void *a1, const char *a2, ...)
{
  return [a1 getChannelType];
}

id objc_msgSend_getChannelUtlization(void *a1, const char *a2, ...)
{
  return [a1 getChannelUtlization];
}

id objc_msgSend_getClientQueue(void *a1, const char *a2, ...)
{
  return [a1 getClientQueue];
}

id objc_msgSend_getCombinedUplinkFreqRange(void *a1, const char *a2, ...)
{
  return [a1 getCombinedUplinkFreqRange];
}

id objc_msgSend_getConfiguredMaxBW(void *a1, const char *a2, ...)
{
  return [a1 getConfiguredMaxBW];
}

id objc_msgSend_getConnectedLinkType(void *a1, const char *a2, ...)
{
  return [a1 getConnectedLinkType];
}

id objc_msgSend_getConnectedStationCount(void *a1, const char *a2, ...)
{
  return [a1 getConnectedStationCount];
}

id objc_msgSend_getConnection(void *a1, const char *a2, ...)
{
  return [a1 getConnection];
}

id objc_msgSend_getController(void *a1, const char *a2, ...)
{
  return [a1 getController];
}

id objc_msgSend_getCumulativeFwTxPer(void *a1, const char *a2, ...)
{
  return [a1 getCumulativeFwTxPer];
}

id objc_msgSend_getCumulativeTxPer(void *a1, const char *a2, ...)
{
  return [a1 getCumulativeTxPer];
}

id objc_msgSend_getCurrentAudioErasure(void *a1, const char *a2, ...)
{
  return [a1 getCurrentAudioErasure];
}

id objc_msgSend_getCurrentCellularAvailabilityStatus(void *a1, const char *a2, ...)
{
  return [a1 getCurrentCellularAvailabilityStatus];
}

id objc_msgSend_getCurrentEnhancedCTMetrics(void *a1, const char *a2, ...)
{
  return [a1 getCurrentEnhancedCTMetrics];
}

id objc_msgSend_getCurrentMovAvgSignalBars(void *a1, const char *a2, ...)
{
  return [a1 getCurrentMovAvgSignalBars];
}

id objc_msgSend_getCurrentNRStatusDataSlot(void *a1, const char *a2, ...)
{
  return [a1 getCurrentNRStatusDataSlot];
}

id objc_msgSend_getCurrentSignalBars(void *a1, const char *a2, ...)
{
  return [a1 getCurrentSignalBars];
}

id objc_msgSend_getDataForCoreAnalytics(void *a1, const char *a2, ...)
{
  return [a1 getDataForCoreAnalytics];
}

id objc_msgSend_getDataSlotLoad(void *a1, const char *a2, ...)
{
  return [a1 getDataSlotLoad];
}

id objc_msgSend_getDate(void *a1, const char *a2, ...)
{
  return [a1 getDate];
}

id objc_msgSend_getDeltaTimeSinceLastCellularRecommendation(void *a1, const char *a2, ...)
{
  return [a1 getDeltaTimeSinceLastCellularRecommendation];
}

id objc_msgSend_getDuration(void *a1, const char *a2, ...)
{
  return [a1 getDuration];
}

id objc_msgSend_getDurationInWiFi2G(void *a1, const char *a2, ...)
{
  return [a1 getDurationInWiFi2G];
}

id objc_msgSend_getEnumerationString(void *a1, const char *a2, ...)
{
  return [a1 getEnumerationString];
}

id objc_msgSend_getEstimatedAvailableRxPhyBandwidth(void *a1, const char *a2, ...)
{
  return [a1 getEstimatedAvailableRxPhyBandwidth];
}

id objc_msgSend_getFR2Status(void *a1, const char *a2, ...)
{
  return [a1 getFR2Status];
}

id objc_msgSend_getFTState(void *a1, const char *a2, ...)
{
  return [a1 getFTState];
}

id objc_msgSend_getFaceIDPlatformPlistName(void *a1, const char *a2, ...)
{
  return [a1 getFaceIDPlatformPlistName];
}

id objc_msgSend_getFaceTimeCallConfig(void *a1, const char *a2, ...)
{
  return [a1 getFaceTimeCallConfig];
}

id objc_msgSend_getFwTxPer(void *a1, const char *a2, ...)
{
  return [a1 getFwTxPer];
}

id objc_msgSend_getGoodVideoCounter(void *a1, const char *a2, ...)
{
  return [a1 getGoodVideoCounter];
}

id objc_msgSend_getGoodVoiceCounter(void *a1, const char *a2, ...)
{
  return [a1 getGoodVoiceCounter];
}

id objc_msgSend_getHandoverContexts(void *a1, const char *a2, ...)
{
  return [a1 getHandoverContexts];
}

id objc_msgSend_getHandoverReasonType(void *a1, const char *a2, ...)
{
  return [a1 getHandoverReasonType];
}

id objc_msgSend_getIWLANServiceType(void *a1, const char *a2, ...)
{
  return [a1 getIWLANServiceType];
}

id objc_msgSend_getIbiClient(void *a1, const char *a2, ...)
{
  return [a1 getIbiClient];
}

id objc_msgSend_getInitialIPStats(void *a1, const char *a2, ...)
{
  return [a1 getInitialIPStats];
}

id objc_msgSend_getInternetInterfaceName(void *a1, const char *a2, ...)
{
  return [a1 getInternetInterfaceName];
}

id objc_msgSend_getInvalidCounter(void *a1, const char *a2, ...)
{
  return [a1 getInvalidCounter];
}

id objc_msgSend_getLPMState(void *a1, const char *a2, ...)
{
  return [a1 getLPMState];
}

id objc_msgSend_getLTECoexMetrics(void *a1, const char *a2, ...)
{
  return [a1 getLTECoexMetrics];
}

id objc_msgSend_getLastKnownLatitude(void *a1, const char *a2, ...)
{
  return [a1 getLastKnownLatitude];
}

id objc_msgSend_getLastKnownLocationTimestamp(void *a1, const char *a2, ...)
{
  return [a1 getLastKnownLocationTimestamp];
}

id objc_msgSend_getLastKnownLongitude(void *a1, const char *a2, ...)
{
  return [a1 getLastKnownLongitude];
}

id objc_msgSend_getLeConnDuration(void *a1, const char *a2, ...)
{
  return [a1 getLeConnDuration];
}

id objc_msgSend_getLeConnDutyCycle(void *a1, const char *a2, ...)
{
  return [a1 getLeConnDutyCycle];
}

id objc_msgSend_getLeConnReason(void *a1, const char *a2, ...)
{
  return [a1 getLeConnReason];
}

id objc_msgSend_getLeDiscoveryScanState(void *a1, const char *a2, ...)
{
  return [a1 getLeDiscoveryScanState];
}

id objc_msgSend_getLeDiscoveryScanUseCase(void *a1, const char *a2, ...)
{
  return [a1 getLeDiscoveryScanUseCase];
}

id objc_msgSend_getLeastCongestedWifiParam(void *a1, const char *a2, ...)
{
  return [a1 getLeastCongestedWifiParam];
}

id objc_msgSend_getLifeTimeVI(void *a1, const char *a2, ...)
{
  return [a1 getLifeTimeVI];
}

id objc_msgSend_getLifeTimeVO(void *a1, const char *a2, ...)
{
  return [a1 getLifeTimeVO];
}

id objc_msgSend_getLocationDBFR1Count(void *a1, const char *a2, ...)
{
  return [a1 getLocationDBFR1Count];
}

id objc_msgSend_getLocationDBFR2Count(void *a1, const char *a2, ...)
{
  return [a1 getLocationDBFR2Count];
}

id objc_msgSend_getLogToFile(void *a1, const char *a2, ...)
{
  return [a1 getLogToFile];
}

id objc_msgSend_getLteVoiceLQM(void *a1, const char *a2, ...)
{
  return [a1 getLteVoiceLQM];
}

id objc_msgSend_getMLPredictedCellBW(void *a1, const char *a2, ...)
{
  return [a1 getMLPredictedCellBW];
}

id objc_msgSend_getMLPredictedWiFiBW(void *a1, const char *a2, ...)
{
  return [a1 getMLPredictedWiFiBW];
}

id objc_msgSend_getMappedApplicationType(void *a1, const char *a2, ...)
{
  return [a1 getMappedApplicationType];
}

id objc_msgSend_getMaxEvalBW(void *a1, const char *a2, ...)
{
  return [a1 getMaxEvalBW];
}

id objc_msgSend_getMaxMovEvalBW(void *a1, const char *a2, ...)
{
  return [a1 getMaxMovEvalBW];
}

id objc_msgSend_getMeasureBWDataSlot(void *a1, const char *a2, ...)
{
  return [a1 getMeasureBWDataSlot];
}

id objc_msgSend_getMinEvalBW(void *a1, const char *a2, ...)
{
  return [a1 getMinEvalBW];
}

id objc_msgSend_getMinMovEvalBW(void *a1, const char *a2, ...)
{
  return [a1 getMinMovEvalBW];
}

id objc_msgSend_getMobilityState(void *a1, const char *a2, ...)
{
  return [a1 getMobilityState];
}

id objc_msgSend_getMotionController(void *a1, const char *a2, ...)
{
  return [a1 getMotionController];
}

id objc_msgSend_getMovingAverageTxPer(void *a1, const char *a2, ...)
{
  return [a1 getMovingAverageTxPer];
}

id objc_msgSend_getMovingAvgBTRssi(void *a1, const char *a2, ...)
{
  return [a1 getMovingAvgBTRssi];
}

id objc_msgSend_getMovingAvgOfRxRetryPercent(void *a1, const char *a2, ...)
{
  return [a1 getMovingAvgOfRxRetryPercent];
}

id objc_msgSend_getMyClientType(void *a1, const char *a2, ...)
{
  return [a1 getMyClientType];
}

id objc_msgSend_getNrRSRP(void *a1, const char *a2, ...)
{
  return [a1 getNrRSRP];
}

id objc_msgSend_getNrRSRQ(void *a1, const char *a2, ...)
{
  return [a1 getNrRSRQ];
}

id objc_msgSend_getNrSNR(void *a1, const char *a2, ...)
{
  return [a1 getNrSNR];
}

id objc_msgSend_getNum2GHzAclA2DPDevices(void *a1, const char *a2, ...)
{
  return [a1 getNum2GHzAclA2DPDevices];
}

id objc_msgSend_getNumberOfBTGameCtrlDev(void *a1, const char *a2, ...)
{
  return [a1 getNumberOfBTGameCtrlDev];
}

id objc_msgSend_getNumberOfSpatialStreamOnAccessPoint(void *a1, const char *a2, ...)
{
  return [a1 getNumberOfSpatialStreamOnAccessPoint];
}

id objc_msgSend_getP2pRCU2CoexEventStatus(void *a1, const char *a2, ...)
{
  return [a1 getP2pRCU2CoexEventStatus];
}

id objc_msgSend_getPhyMode(void *a1, const char *a2, ...)
{
  return [a1 getPhyMode];
}

id objc_msgSend_getPingPongAvoidanceTimerMultiplier(void *a1, const char *a2, ...)
{
  return [a1 getPingPongAvoidanceTimerMultiplier];
}

id objc_msgSend_getPlatformCidPlistName(void *a1, const char *a2, ...)
{
  return [a1 getPlatformCidPlistName];
}

id objc_msgSend_getPlatformPlistName(void *a1, const char *a2, ...)
{
  return [a1 getPlatformPlistName];
}

id objc_msgSend_getPointOfInterest(void *a1, const char *a2, ...)
{
  return [a1 getPointOfInterest];
}

id objc_msgSend_getPreviousCellularAvailabilityStatus(void *a1, const char *a2, ...)
{
  return [a1 getPreviousCellularAvailabilityStatus];
}

id objc_msgSend_getProcessId(void *a1, const char *a2, ...)
{
  return [a1 getProcessId];
}

id objc_msgSend_getQueue(void *a1, const char *a2, ...)
{
  return [a1 getQueue];
}

id objc_msgSend_getRC2BTTimingParam(void *a1, const char *a2, ...)
{
  return [a1 getRC2BTTimingParam];
}

id objc_msgSend_getRC2CoexMode(void *a1, const char *a2, ...)
{
  return [a1 getRC2CoexMode];
}

id objc_msgSend_getRC2PMProtectionMode(void *a1, const char *a2, ...)
{
  return [a1 getRC2PMProtectionMode];
}

id objc_msgSend_getRC2WiFiTimingParam(void *a1, const char *a2, ...)
{
  return [a1 getRC2WiFiTimingParam];
}

id objc_msgSend_getRCU2Status(void *a1, const char *a2, ...)
{
  return [a1 getRCU2Status];
}

id objc_msgSend_getRRCState(void *a1, const char *a2, ...)
{
  return [a1 getRRCState];
}

id objc_msgSend_getRSSI(void *a1, const char *a2, ...)
{
  return [a1 getRSSI];
}

id objc_msgSend_getRSSIHysteresis(void *a1, const char *a2, ...)
{
  return [a1 getRSSIHysteresis];
}

id objc_msgSend_getRTT(void *a1, const char *a2, ...)
{
  return [a1 getRTT];
}

id objc_msgSend_getRTTMovAvg(void *a1, const char *a2, ...)
{
  return [a1 getRTTMovAvg];
}

id objc_msgSend_getRadioCoverage(void *a1, const char *a2, ...)
{
  return [a1 getRadioCoverage];
}

id objc_msgSend_getRadioFrequency(void *a1, const char *a2, ...)
{
  return [a1 getRadioFrequency];
}

id objc_msgSend_getRecommenedLinkType(void *a1, const char *a2, ...)
{
  return [a1 getRecommenedLinkType];
}

id objc_msgSend_getRole(void *a1, const char *a2, ...)
{
  return [a1 getRole];
}

id objc_msgSend_getRxDupeRatio(void *a1, const char *a2, ...)
{
  return [a1 getRxDupeRatio];
}

id objc_msgSend_getRxPacket(void *a1, const char *a2, ...)
{
  return [a1 getRxPacket];
}

id objc_msgSend_getRxPhyRate(void *a1, const char *a2, ...)
{
  return [a1 getRxPhyRate];
}

id objc_msgSend_getRxRatio(void *a1, const char *a2, ...)
{
  return [a1 getRxRatio];
}

id objc_msgSend_getRxRetryPercent(void *a1, const char *a2, ...)
{
  return [a1 getRxRetryPercent];
}

id objc_msgSend_getRxRetryRatio(void *a1, const char *a2, ...)
{
  return [a1 getRxRetryRatio];
}

id objc_msgSend_getSCService(void *a1, const char *a2, ...)
{
  return [a1 getSCService];
}

id objc_msgSend_getSNR(void *a1, const char *a2, ...)
{
  return [a1 getSNR];
}

id objc_msgSend_getSNRHysteresis(void *a1, const char *a2, ...)
{
  return [a1 getSNRHysteresis];
}

id objc_msgSend_getServiceCount(void *a1, const char *a2, ...)
{
  return [a1 getServiceCount];
}

id objc_msgSend_getServingCellECIO(void *a1, const char *a2, ...)
{
  return [a1 getServingCellECIO];
}

id objc_msgSend_getServingCellFilteredMeasurements(void *a1, const char *a2, ...)
{
  return [a1 getServingCellFilteredMeasurements];
}

id objc_msgSend_getServingCellRSCP(void *a1, const char *a2, ...)
{
  return [a1 getServingCellRSCP];
}

id objc_msgSend_getServingCellRSRP(void *a1, const char *a2, ...)
{
  return [a1 getServingCellRSRP];
}

id objc_msgSend_getServingCellRSRQ(void *a1, const char *a2, ...)
{
  return [a1 getServingCellRSRQ];
}

id objc_msgSend_getServingCellSNR(void *a1, const char *a2, ...)
{
  return [a1 getServingCellSNR];
}

id objc_msgSend_getServingCellType(void *a1, const char *a2, ...)
{
  return [a1 getServingCellType];
}

id objc_msgSend_getSingleton(void *a1, const char *a2, ...)
{
  return [a1 getSingleton];
}

id objc_msgSend_getSpeedTestMetrics(void *a1, const char *a2, ...)
{
  return [a1 getSpeedTestMetrics];
}

id objc_msgSend_getStaleContextFromList(void *a1, const char *a2, ...)
{
  return [a1 getStaleContextFromList];
}

id objc_msgSend_getStandaloneLinkPreferenceMetrics(void *a1, const char *a2, ...)
{
  return [a1 getStandaloneLinkPreferenceMetrics];
}

id objc_msgSend_getState(void *a1, const char *a2, ...)
{
  return [a1 getState];
}

id objc_msgSend_getStationCountWithPendingData(void *a1, const char *a2, ...)
{
  return [a1 getStationCountWithPendingData];
}

id objc_msgSend_getSubscriptionType(void *a1, const char *a2, ...)
{
  return [a1 getSubscriptionType];
}

id objc_msgSend_getSymptomsService(void *a1, const char *a2, ...)
{
  return [a1 getSymptomsService];
}

id objc_msgSend_getTCPAvgRTT(void *a1, const char *a2, ...)
{
  return [a1 getTCPAvgRTT];
}

id objc_msgSend_getTCPMinRTT(void *a1, const char *a2, ...)
{
  return [a1 getTCPMinRTT];
}

id objc_msgSend_getTCPRttVar(void *a1, const char *a2, ...)
{
  return [a1 getTCPRttVar];
}

id objc_msgSend_getTelephonyHandle(void *a1, const char *a2, ...)
{
  return [a1 getTelephonyHandle];
}

id objc_msgSend_getTelephonyMode(void *a1, const char *a2, ...)
{
  return [a1 getTelephonyMode];
}

id objc_msgSend_getTimeStamp(void *a1, const char *a2, ...)
{
  return [a1 getTimeStamp];
}

id objc_msgSend_getTxFail(void *a1, const char *a2, ...)
{
  return [a1 getTxFail];
}

id objc_msgSend_getTxLossRateVI(void *a1, const char *a2, ...)
{
  return [a1 getTxLossRateVI];
}

id objc_msgSend_getTxLossRateVO(void *a1, const char *a2, ...)
{
  return [a1 getTxLossRateVO];
}

id objc_msgSend_getTxPer(void *a1, const char *a2, ...)
{
  return [a1 getTxPer];
}

id objc_msgSend_getTxPerAnticipatedMovAvg(void *a1, const char *a2, ...)
{
  return [a1 getTxPerAnticipatedMovAvg];
}

id objc_msgSend_getTxPerAnticipatedMovAvgValid(void *a1, const char *a2, ...)
{
  return [a1 getTxPerAnticipatedMovAvgValid];
}

id objc_msgSend_getTxPerMovAvg(void *a1, const char *a2, ...)
{
  return [a1 getTxPerMovAvg];
}

id objc_msgSend_getTxPerValid(void *a1, const char *a2, ...)
{
  return [a1 getTxPerValid];
}

id objc_msgSend_getTxPhyRate(void *a1, const char *a2, ...)
{
  return [a1 getTxPhyRate];
}

id objc_msgSend_getTxRetryPercent(void *a1, const char *a2, ...)
{
  return [a1 getTxRetryPercent];
}

id objc_msgSend_getTxThroughputVI(void *a1, const char *a2, ...)
{
  return [a1 getTxThroughputVI];
}

id objc_msgSend_getTxThroughputVO(void *a1, const char *a2, ...)
{
  return [a1 getTxThroughputVO];
}

id objc_msgSend_getUARFCNDataSlot(void *a1, const char *a2, ...)
{
  return [a1 getUARFCNDataSlot];
}

id objc_msgSend_getUserDataPreferredSlot(void *a1, const char *a2, ...)
{
  return [a1 getUserDataPreferredSlot];
}

id objc_msgSend_getVoiceDecision(void *a1, const char *a2, ...)
{
  return [a1 getVoiceDecision];
}

id objc_msgSend_getWRM5GVersusWiFiLinkPreferenceMetrics(void *a1, const char *a2, ...)
{
  return [a1 getWRM5GVersusWiFiLinkPreferenceMetrics];
}

id objc_msgSend_getWRMCellOutrankWifiBWThreshold(void *a1, const char *a2, ...)
{
  return [a1 getWRMCellOutrankWifiBWThreshold];
}

id objc_msgSend_getWRMFaceTimeHandover(void *a1, const char *a2, ...)
{
  return [a1 getWRMFaceTimeHandover];
}

id objc_msgSend_getWRMProximity(void *a1, const char *a2, ...)
{
  return [a1 getWRMProximity];
}

id objc_msgSend_getWRMStreaming(void *a1, const char *a2, ...)
{
  return [a1 getWRMStreaming];
}

id objc_msgSend_getWRMWiFiCallingEnd(void *a1, const char *a2, ...)
{
  return [a1 getWRMWiFiCallingEnd];
}

id objc_msgSend_getWatchAssociated(void *a1, const char *a2, ...)
{
  return [a1 getWatchAssociated];
}

id objc_msgSend_getWghtAverageMetricsValid(void *a1, const char *a2, ...)
{
  return [a1 getWghtAverageMetricsValid];
}

id objc_msgSend_getWghtAverageRSSI(void *a1, const char *a2, ...)
{
  return [a1 getWghtAverageRSSI];
}

id objc_msgSend_getWghtAverageRXPhyRate(void *a1, const char *a2, ...)
{
  return [a1 getWghtAverageRXPhyRate];
}

id objc_msgSend_getWghtAverageSNR(void *a1, const char *a2, ...)
{
  return [a1 getWghtAverageSNR];
}

id objc_msgSend_getWghtAverageTXPhyRate(void *a1, const char *a2, ...)
{
  return [a1 getWghtAverageTXPhyRate];
}

id objc_msgSend_getWiFiBTActiveProfileFor2G(void *a1, const char *a2, ...)
{
  return [a1 getWiFiBTActiveProfileFor2G];
}

id objc_msgSend_getWiFiBTSharedAntennaDisabledStatus(void *a1, const char *a2, ...)
{
  return [a1 getWiFiBTSharedAntennaDisabledStatus];
}

id objc_msgSend_getWiFiBW(void *a1, const char *a2, ...)
{
  return [a1 getWiFiBW];
}

id objc_msgSend_getWiFiCallingController(void *a1, const char *a2, ...)
{
  return [a1 getWiFiCallingController];
}

id objc_msgSend_getWiFiCallingMetrics(void *a1, const char *a2, ...)
{
  return [a1 getWiFiCallingMetrics];
}

id objc_msgSend_getWiFiController(void *a1, const char *a2, ...)
{
  return [a1 getWiFiController];
}

id objc_msgSend_getWiFiHandle(void *a1, const char *a2, ...)
{
  return [a1 getWiFiHandle];
}

id objc_msgSend_getWiFiMode(void *a1, const char *a2, ...)
{
  return [a1 getWiFiMode];
}

id objc_msgSend_getWiFiNRStatusDataSlot(void *a1, const char *a2, ...)
{
  return [a1 getWiFiNRStatusDataSlot];
}

id objc_msgSend_getWiFiService(void *a1, const char *a2, ...)
{
  return [a1 getWiFiService];
}

id objc_msgSend_getWiFiServiceSingletone(void *a1, const char *a2, ...)
{
  return [a1 getWiFiServiceSingletone];
}

id objc_msgSend_getWifiAntennaBitmapForPencilCoexByPlatform(void *a1, const char *a2, ...)
{
  return [a1 getWifiAntennaBitmapForPencilCoexByPlatform];
}

id objc_msgSend_getiRATConfigController(void *a1, const char *a2, ...)
{
  return [a1 getiRATConfigController];
}

id objc_msgSend_getiRATMetricHORecordCache(void *a1, const char *a2, ...)
{
  return [a1 getiRATMetricHORecordCache];
}

id objc_msgSend_getprevRxPhyRate(void *a1, const char *a2, ...)
{
  return [a1 getprevRxPhyRate];
}

id objc_msgSend_gpsBandInfoList(void *a1, const char *a2, ...)
{
  return [a1 gpsBandInfoList];
}

id objc_msgSend_gpsRadioActive(void *a1, const char *a2, ...)
{
  return [a1 gpsRadioActive];
}

id objc_msgSend_group(void *a1, const char *a2, ...)
{
  return [a1 group];
}

id objc_msgSend_guardInterval(void *a1, const char *a2, ...)
{
  return [a1 guardInterval];
}

id objc_msgSend_handleBandSwitchStatusUpdatedEvent(void *a1, const char *a2, ...)
{
  return [a1 handleBandSwitchStatusUpdatedEvent];
}

id objc_msgSend_handleCTConfig(void *a1, const char *a2, ...)
{
  return [a1 handleCTConfig];
}

id objc_msgSend_handleCellularNetworkUpdate(void *a1, const char *a2, ...)
{
  return [a1 handleCellularNetworkUpdate];
}

id objc_msgSend_handleChannelQualityInfoUpdatedEvent(void *a1, const char *a2, ...)
{
  return [a1 handleChannelQualityInfoUpdatedEvent];
}

id objc_msgSend_handleFTCall(void *a1, const char *a2, ...)
{
  return [a1 handleFTCall];
}

id objc_msgSend_handleHPCellularSessionEnd(void *a1, const char *a2, ...)
{
  return [a1 handleHPCellularSessionEnd];
}

id objc_msgSend_handleHPCellularSessionStart(void *a1, const char *a2, ...)
{
  return [a1 handleHPCellularSessionStart];
}

id objc_msgSend_handleLinkPreferenceNotificationTerminus(void *a1, const char *a2, ...)
{
  return [a1 handleLinkPreferenceNotificationTerminus];
}

id objc_msgSend_handleShowUCMStatusEvent(void *a1, const char *a2, ...)
{
  return [a1 handleShowUCMStatusEvent];
}

id objc_msgSend_handleWiFiBTCoexChange(void *a1, const char *a2, ...)
{
  return [a1 handleWiFiBTCoexChange];
}

id objc_msgSend_handleWiFiBTULOFDMAChange(void *a1, const char *a2, ...)
{
  return [a1 handleWiFiBTULOFDMAChange];
}

id objc_msgSend_handleWiFiConfigChange(void *a1, const char *a2, ...)
{
  return [a1 handleWiFiConfigChange];
}

id objc_msgSend_handleWiFiCountryCodeChangedEvent(void *a1, const char *a2, ...)
{
  return [a1 handleWiFiCountryCodeChangedEvent];
}

id objc_msgSend_handleWiFiRCU1Change(void *a1, const char *a2, ...)
{
  return [a1 handleWiFiRCU1Change];
}

id objc_msgSend_handleWiFiRCU1PowerOff(void *a1, const char *a2, ...)
{
  return [a1 handleWiFiRCU1PowerOff];
}

id objc_msgSend_handleWiFiRCU2PowerOff(void *a1, const char *a2, ...)
{
  return [a1 handleWiFiRCU2PowerOff];
}

id objc_msgSend_handoverAlgorithmSettingDynamic(void *a1, const char *a2, ...)
{
  return [a1 handoverAlgorithmSettingDynamic];
}

id objc_msgSend_handoverAlgorithmType(void *a1, const char *a2, ...)
{
  return [a1 handoverAlgorithmType];
}

id objc_msgSend_handoverAvgIdleRxPktLossThreshold(void *a1, const char *a2, ...)
{
  return [a1 handoverAvgIdleRxPktLossThreshold];
}

id objc_msgSend_handoverAvgRxPktLossThreshold(void *a1, const char *a2, ...)
{
  return [a1 handoverAvgRxPktLossThreshold];
}

id objc_msgSend_handoverEvaluationRequired(void *a1, const char *a2, ...)
{
  return [a1 handoverEvaluationRequired];
}

id objc_msgSend_handoverNominalJitterBufferThreshold(void *a1, const char *a2, ...)
{
  return [a1 handoverNominalJitterBufferThreshold];
}

id objc_msgSend_handoverRTThreshold(void *a1, const char *a2, ...)
{
  return [a1 handoverRTThreshold];
}

id objc_msgSend_handoverRxJitterThreshold(void *a1, const char *a2, ...)
{
  return [a1 handoverRxJitterThreshold];
}

id objc_msgSend_handoverRxPktLossThreshold(void *a1, const char *a2, ...)
{
  return [a1 handoverRxPktLossThreshold];
}

id objc_msgSend_handoverTxPktLossThreshold(void *a1, const char *a2, ...)
{
  return [a1 handoverTxPktLossThreshold];
}

id objc_msgSend_hasConnected(void *a1, const char *a2, ...)
{
  return [a1 hasConnected];
}

id objc_msgSend_hasEnded(void *a1, const char *a2, ...)
{
  return [a1 hasEnded];
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return [a1 hash];
}

id objc_msgSend_headTxPowerCapdBm(void *a1, const char *a2, ...)
{
  return [a1 headTxPowerCapdBm];
}

id objc_msgSend_highDataRateObserved(void *a1, const char *a2, ...)
{
  return [a1 highDataRateObserved];
}

id objc_msgSend_historicalAgeOfConnectedLinkInDays(void *a1, const char *a2, ...)
{
  return [a1 historicalAgeOfConnectedLinkInDays];
}

id objc_msgSend_homeKitReportingTimer(void *a1, const char *a2, ...)
{
  return [a1 homeKitReportingTimer];
}

id objc_msgSend_horizontalAccuracy(void *a1, const char *a2, ...)
{
  return [a1 horizontalAccuracy];
}

id objc_msgSend_hostAP(void *a1, const char *a2, ...)
{
  return [a1 hostAP];
}

id objc_msgSend_hostAP5GHzActive(void *a1, const char *a2, ...)
{
  return [a1 hostAP5GHzActive];
}

id objc_msgSend_hpCellNeed2SetBTAFH(void *a1, const char *a2, ...)
{
  return [a1 hpCellNeed2SetBTAFH];
}

id objc_msgSend_hpCellularMonitor(void *a1, const char *a2, ...)
{
  return [a1 hpCellularMonitor];
}

id objc_msgSend_iRATSupported(void *a1, const char *a2, ...)
{
  return [a1 iRATSupported];
}

id objc_msgSend_iTunesMetadata(void *a1, const char *a2, ...)
{
  return [a1 iTunesMetadata];
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return [a1 identifier];
}

id objc_msgSend_idsAvgWiFiMinPerTh1(void *a1, const char *a2, ...)
{
  return [a1 idsAvgWiFiMinPerTh1];
}

id objc_msgSend_idsBTMinPerTh1(void *a1, const char *a2, ...)
{
  return [a1 idsBTMinPerTh1];
}

id objc_msgSend_idsBTMinRttTh1(void *a1, const char *a2, ...)
{
  return [a1 idsBTMinRttTh1];
}

id objc_msgSend_idsDeviceID(void *a1, const char *a2, ...)
{
  return [a1 idsDeviceID];
}

id objc_msgSend_idsMetricsEnabled(void *a1, const char *a2, ...)
{
  return [a1 idsMetricsEnabled];
}

id objc_msgSend_idsMinAvgWiFiTxPktLossRateTh0(void *a1, const char *a2, ...)
{
  return [a1 idsMinAvgWiFiTxPktLossRateTh0];
}

id objc_msgSend_idsMinAvgWiFiTxPktLossRateTh1(void *a1, const char *a2, ...)
{
  return [a1 idsMinAvgWiFiTxPktLossRateTh1];
}

id objc_msgSend_idsMinWiFiEffectivePhyRateTh0(void *a1, const char *a2, ...)
{
  return [a1 idsMinWiFiEffectivePhyRateTh0];
}

id objc_msgSend_idsMinWiFiEffectivePhyRateTh1(void *a1, const char *a2, ...)
{
  return [a1 idsMinWiFiEffectivePhyRateTh1];
}

id objc_msgSend_idsMinWiFiRssiTh0(void *a1, const char *a2, ...)
{
  return [a1 idsMinWiFiRssiTh0];
}

id objc_msgSend_idsMinWiFiRssiTh1(void *a1, const char *a2, ...)
{
  return [a1 idsMinWiFiRssiTh1];
}

id objc_msgSend_idsMinWiFiSnrTh0(void *a1, const char *a2, ...)
{
  return [a1 idsMinWiFiSnrTh0];
}

id objc_msgSend_idsMinWiFiSnrTh1(void *a1, const char *a2, ...)
{
  return [a1 idsMinWiFiSnrTh1];
}

id objc_msgSend_idsMinWiFiThroughputTh0(void *a1, const char *a2, ...)
{
  return [a1 idsMinWiFiThroughputTh0];
}

id objc_msgSend_idsMinWiFiThroughputTh1(void *a1, const char *a2, ...)
{
  return [a1 idsMinWiFiThroughputTh1];
}

id objc_msgSend_idsMovAvgWiFiMinPerTh1(void *a1, const char *a2, ...)
{
  return [a1 idsMovAvgWiFiMinPerTh1];
}

id objc_msgSend_idsPeriodicReportInterval(void *a1, const char *a2, ...)
{
  return [a1 idsPeriodicReportInterval];
}

id objc_msgSend_idsWiFiMinPerTh1(void *a1, const char *a2, ...)
{
  return [a1 idsWiFiMinPerTh1];
}

id objc_msgSend_idsWiFiMinRttTh1(void *a1, const char *a2, ...)
{
  return [a1 idsWiFiMinRttTh1];
}

id objc_msgSend_ifAutomatedDeviceGroup(void *a1, const char *a2, ...)
{
  return [a1 ifAutomatedDeviceGroup];
}

id objc_msgSend_ifInternalDevice(void *a1, const char *a2, ...)
{
  return [a1 ifInternalDevice];
}

id objc_msgSend_ifLimitSpeedTest(void *a1, const char *a2, ...)
{
  return [a1 ifLimitSpeedTest];
}

id objc_msgSend_ifNoActiveVoiceCall(void *a1, const char *a2, ...)
{
  return [a1 ifNoActiveVoiceCall];
}

id objc_msgSend_imsVoiceOverPSSupported(void *a1, const char *a2, ...)
{
  return [a1 imsVoiceOverPSSupported];
}

id objc_msgSend_inCallUIBundleIdentifier(void *a1, const char *a2, ...)
{
  return [a1 inCallUIBundleIdentifier];
}

id objc_msgSend_index(void *a1, const char *a2, ...)
{
  return [a1 index];
}

id objc_msgSend_indicator(void *a1, const char *a2, ...)
{
  return [a1 indicator];
}

id objc_msgSend_infoDictionary(void *a1, const char *a2, ...)
{
  return [a1 infoDictionary];
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return [a1 init];
}

id objc_msgSend_init5GVersusWiFiLinkPrefMetrics(void *a1, const char *a2, ...)
{
  return [a1 init5GVersusWiFiLinkPrefMetrics];
}

id objc_msgSend_initAWDService(void *a1, const char *a2, ...)
{
  return [a1 initAWDService];
}

id objc_msgSend_initBTStatus(void *a1, const char *a2, ...)
{
  return [a1 initBTStatus];
}

id objc_msgSend_initCallNotifications(void *a1, const char *a2, ...)
{
  return [a1 initCallNotifications];
}

id objc_msgSend_initCellStationManager(void *a1, const char *a2, ...)
{
  return [a1 initCellStationManager];
}

id objc_msgSend_initCellularProductExperimentsManager(void *a1, const char *a2, ...)
{
  return [a1 initCellularProductExperimentsManager];
}

id objc_msgSend_initCoreTelephonyClient(void *a1, const char *a2, ...)
{
  return [a1 initCoreTelephonyClient];
}

id objc_msgSend_initFaceTimeHandoverMetrics(void *a1, const char *a2, ...)
{
  return [a1 initFaceTimeHandoverMetrics];
}

id objc_msgSend_initHandoverReasonCode(void *a1, const char *a2, ...)
{
  return [a1 initHandoverReasonCode];
}

id objc_msgSend_initLTECoexMetrics(void *a1, const char *a2, ...)
{
  return [a1 initLTECoexMetrics];
}

id objc_msgSend_initLocationController(void *a1, const char *a2, ...)
{
  return [a1 initLocationController];
}

id objc_msgSend_initMovAverageOfSignalBar(void *a1, const char *a2, ...)
{
  return [a1 initMovAverageOfSignalBar];
}

id objc_msgSend_initNewClient(void *a1, const char *a2, ...)
{
  return [a1 initNewClient];
}

id objc_msgSend_initPlatformPolicies(void *a1, const char *a2, ...)
{
  return [a1 initPlatformPolicies];
}

id objc_msgSend_initSOSWaypointThreshold(void *a1, const char *a2, ...)
{
  return [a1 initSOSWaypointThreshold];
}

id objc_msgSend_initSettingsFromPreferences(void *a1, const char *a2, ...)
{
  return [a1 initSettingsFromPreferences];
}

id objc_msgSend_initSfPboffParams(void *a1, const char *a2, ...)
{
  return [a1 initSfPboffParams];
}

id objc_msgSend_initStandaloneLinkPrefMetrics(void *a1, const char *a2, ...)
{
  return [a1 initStandaloneLinkPrefMetrics];
}

id objc_msgSend_initStreamingMetrics(void *a1, const char *a2, ...)
{
  return [a1 initStreamingMetrics];
}

id objc_msgSend_initWiFiCallingMetrics(void *a1, const char *a2, ...)
{
  return [a1 initWiFiCallingMetrics];
}

id objc_msgSend_initWiFiCellDataEval(void *a1, const char *a2, ...)
{
  return [a1 initWiFiCellDataEval];
}

id objc_msgSend_initWiFiStatus(void *a1, const char *a2, ...)
{
  return [a1 initWiFiStatus];
}

id objc_msgSend_initiRATMetrics(void *a1, const char *a2, ...)
{
  return [a1 initiRATMetrics];
}

id objc_msgSend_initializeiRATMetrics(void *a1, const char *a2, ...)
{
  return [a1 initializeiRATMetrics];
}

id objc_msgSend_insertions(void *a1, const char *a2, ...)
{
  return [a1 insertions];
}

id objc_msgSend_instance(void *a1, const char *a2, ...)
{
  return [a1 instance];
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return [a1 intValue];
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return [a1 integerValue];
}

id objc_msgSend_interfaceName(void *a1, const char *a2, ...)
{
  return [a1 interfaceName];
}

id objc_msgSend_interfaceType(void *a1, const char *a2, ...)
{
  return [a1 interfaceType];
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return [a1 invalidate];
}

id objc_msgSend_invalidateAudioQualityMetrics(void *a1, const char *a2, ...)
{
  return [a1 invalidateAudioQualityMetrics];
}

id objc_msgSend_isAWDLInProgress(void *a1, const char *a2, ...)
{
  return [a1 isAWDLInProgress];
}

id objc_msgSend_isActiveClientFaceTime(void *a1, const char *a2, ...)
{
  return [a1 isActiveClientFaceTime];
}

id objc_msgSend_isActiveHandoverSupported(void *a1, const char *a2, ...)
{
  return [a1 isActiveHandoverSupported];
}

id objc_msgSend_isAirPlaneModeEnabled(void *a1, const char *a2, ...)
{
  return [a1 isAirPlaneModeEnabled];
}

id objc_msgSend_isAssociated(void *a1, const char *a2, ...)
{
  return [a1 isAssociated];
}

id objc_msgSend_isAudioQualityGood(void *a1, const char *a2, ...)
{
  return [a1 isAudioQualityGood];
}

id objc_msgSend_isAutoUnlockRangingInProgress(void *a1, const char *a2, ...)
{
  return [a1 isAutoUnlockRangingInProgress];
}

id objc_msgSend_isBBHighPowerState(void *a1, const char *a2, ...)
{
  return [a1 isBBHighPowerState];
}

id objc_msgSend_isBTMetricsValid(void *a1, const char *a2, ...)
{
  return [a1 isBTMetricsValid];
}

id objc_msgSend_isBackSuperWideCameraSupported(void *a1, const char *a2, ...)
{
  return [a1 isBackSuperWideCameraSupported];
}

id objc_msgSend_isBackTeleCameraSupported(void *a1, const char *a2, ...)
{
  return [a1 isBackTeleCameraSupported];
}

id objc_msgSend_isBackhaulGood(void *a1, const char *a2, ...)
{
  return [a1 isBackhaulGood];
}

id objc_msgSend_isBeaconPerValid(void *a1, const char *a2, ...)
{
  return [a1 isBeaconPerValid];
}

id objc_msgSend_isBeaconSchedValid(void *a1, const char *a2, ...)
{
  return [a1 isBeaconSchedValid];
}

id objc_msgSend_isBtAntennaDesensed(void *a1, const char *a2, ...)
{
  return [a1 isBtAntennaDesensed];
}

id objc_msgSend_isCallActive(void *a1, const char *a2, ...)
{
  return [a1 isCallActive];
}

id objc_msgSend_isCallInConference(void *a1, const char *a2, ...)
{
  return [a1 isCallInConference];
}

id objc_msgSend_isCallOnHold(void *a1, const char *a2, ...)
{
  return [a1 isCallOnHold];
}

id objc_msgSend_isCarPlay(void *a1, const char *a2, ...)
{
  return [a1 isCarPlay];
}

id objc_msgSend_isCarPlaySessionInProgress(void *a1, const char *a2, ...)
{
  return [a1 isCarPlaySessionInProgress];
}

id objc_msgSend_isCellularEntryCriteriaMetForFaceTimeCallCurrentLinkWiFi(void *a1, const char *a2, ...)
{
  return [a1 isCellularEntryCriteriaMetForFaceTimeCallCurrentLinkWiFi];
}

id objc_msgSend_isCellularEntryCriteriaMetForIMSThumpCallCurrentLinkWiFi(void *a1, const char *a2, ...)
{
  return [a1 isCellularEntryCriteriaMetForIMSThumpCallCurrentLinkWiFi];
}

id objc_msgSend_isCellularEntryCriteriaMetForVoiceCallCurrentLinkNone(void *a1, const char *a2, ...)
{
  return [a1 isCellularEntryCriteriaMetForVoiceCallCurrentLinkNone];
}

id objc_msgSend_isCellularExitCriteriaMetForFaceTimeCallCurrentLinkCellular(void *a1, const char *a2, ...)
{
  return [a1 isCellularExitCriteriaMetForFaceTimeCallCurrentLinkCellular];
}

id objc_msgSend_isCellularExitCriteriaMetForIMSThumpCallCurrentLinkCellular(void *a1, const char *a2, ...)
{
  return [a1 isCellularExitCriteriaMetForIMSThumpCallCurrentLinkCellular];
}

id objc_msgSend_isCellularExitCriteriaMetForVoiceCallCallCurrentLinkUMTS(void *a1, const char *a2, ...)
{
  return [a1 isCellularExitCriteriaMetForVoiceCallCallCurrentLinkUMTS];
}

id objc_msgSend_isCellularOnGPSIMDBand(void *a1, const char *a2, ...)
{
  return [a1 isCellularOnGPSIMDBand];
}

id objc_msgSend_isCellularOnIMD3CellBand(void *a1, const char *a2, ...)
{
  return [a1 isCellularOnIMD3CellBand];
}

id objc_msgSend_isCellularOnWiFi3FoBand(void *a1, const char *a2, ...)
{
  return [a1 isCellularOnWiFi3FoBand];
}

id objc_msgSend_isCoreMediaStreamingActive(void *a1, const char *a2, ...)
{
  return [a1 isCoreMediaStreamingActive];
}

id objc_msgSend_isCumulativeFwTxPerValid(void *a1, const char *a2, ...)
{
  return [a1 isCumulativeFwTxPerValid];
}

id objc_msgSend_isCumulativeTxPerValid(void *a1, const char *a2, ...)
{
  return [a1 isCumulativeTxPerValid];
}

id objc_msgSend_isDataAttached(void *a1, const char *a2, ...)
{
  return [a1 isDataAttached];
}

id objc_msgSend_isDataEnabled(void *a1, const char *a2, ...)
{
  return [a1 isDataEnabled];
}

id objc_msgSend_isDataLQMValid(void *a1, const char *a2, ...)
{
  return [a1 isDataLQMValid];
}

id objc_msgSend_isDataPreferredSlotCBRS(void *a1, const char *a2, ...)
{
  return [a1 isDataPreferredSlotCBRS];
}

id objc_msgSend_isDeviceConnectedOverNonLTERadio(void *a1, const char *a2, ...)
{
  return [a1 isDeviceConnectedOverNonLTERadio];
}

id objc_msgSend_isDeviceRegistered(void *a1, const char *a2, ...)
{
  return [a1 isDeviceRegistered];
}

id objc_msgSend_isDeviceUsingFR2Radio(void *a1, const char *a2, ...)
{
  return [a1 isDeviceUsingFR2Radio];
}

id objc_msgSend_isEnhancedCTServiceNeeded(void *a1, const char *a2, ...)
{
  return [a1 isEnhancedCTServiceNeeded];
}

id objc_msgSend_isEnhancedSisSupported(void *a1, const char *a2, ...)
{
  return [a1 isEnhancedSisSupported];
}

id objc_msgSend_isEnsembleInProgress(void *a1, const char *a2, ...)
{
  return [a1 isEnsembleInProgress];
}

id objc_msgSend_isExpensive(void *a1, const char *a2, ...)
{
  return [a1 isExpensive];
}

id objc_msgSend_isFR2Radio(void *a1, const char *a2, ...)
{
  return [a1 isFR2Radio];
}

id objc_msgSend_isFaceIdSupported(void *a1, const char *a2, ...)
{
  return [a1 isFaceIdSupported];
}

id objc_msgSend_isFaceTimeProvider(void *a1, const char *a2, ...)
{
  return [a1 isFaceTimeProvider];
}

id objc_msgSend_isFrontCameraSupported(void *a1, const char *a2, ...)
{
  return [a1 isFrontCameraSupported];
}

id objc_msgSend_isFwTxPerValid(void *a1, const char *a2, ...)
{
  return [a1 isFwTxPerValid];
}

id objc_msgSend_isIMSPreferenceEnabled(void *a1, const char *a2, ...)
{
  return [a1 isIMSPreferenceEnabled];
}

id objc_msgSend_isIMSTransportQualityGood(void *a1, const char *a2, ...)
{
  return [a1 isIMSTransportQualityGood];
}

id objc_msgSend_isIbiSdmSupported(void *a1, const char *a2, ...)
{
  return [a1 isIbiSdmSupported];
}

id objc_msgSend_isInCoexBand7LowerEdge(void *a1, const char *a2, ...)
{
  return [a1 isInCoexBand7LowerEdge];
}

id objc_msgSend_isInHpSession(void *a1, const char *a2, ...)
{
  return [a1 isInHpSession];
}

id objc_msgSend_isLSMWiFiQualityGood(void *a1, const char *a2, ...)
{
  return [a1 isLSMWiFiQualityGood];
}

id objc_msgSend_isLocallyPaired(void *a1, const char *a2, ...)
{
  return [a1 isLocallyPaired];
}

id objc_msgSend_isLowPowerModePeriodicWakeUpNotificationSubscribed(void *a1, const char *a2, ...)
{
  return [a1 isLowPowerModePeriodicWakeUpNotificationSubscribed];
}

id objc_msgSend_isLteEntryCriteriaMetCurrentLinkNone(void *a1, const char *a2, ...)
{
  return [a1 isLteEntryCriteriaMetCurrentLinkNone];
}

id objc_msgSend_isMarconiDevice(void *a1, const char *a2, ...)
{
  return [a1 isMarconiDevice];
}

id objc_msgSend_isMovingAverageTxPerValid(void *a1, const char *a2, ...)
{
  return [a1 isMovingAverageTxPerValid];
}

id objc_msgSend_isNrEntryCriteriaMetCurrentLinkNone(void *a1, const char *a2, ...)
{
  return [a1 isNrEntryCriteriaMetCurrentLinkNone];
}

id objc_msgSend_isOnHold(void *a1, const char *a2, ...)
{
  return [a1 isOnHold];
}

id objc_msgSend_isOutgoing(void *a1, const char *a2, ...)
{
  return [a1 isOutgoing];
}

id objc_msgSend_isPencilIndicationSupported(void *a1, const char *a2, ...)
{
  return [a1 isPencilIndicationSupported];
}

id objc_msgSend_isPrivateNetworkModeEnabled(void *a1, const char *a2, ...)
{
  return [a1 isPrivateNetworkModeEnabled];
}

id objc_msgSend_isPrivateNetworkPreferredOverWifi(void *a1, const char *a2, ...)
{
  return [a1 isPrivateNetworkPreferredOverWifi];
}

id objc_msgSend_isPrivateNetworkSim(void *a1, const char *a2, ...)
{
  return [a1 isPrivateNetworkSim];
}

id objc_msgSend_isQBSSLoadValid(void *a1, const char *a2, ...)
{
  return [a1 isQBSSLoadValid];
}

id objc_msgSend_isQmiSdmSupported(void *a1, const char *a2, ...)
{
  return [a1 isQmiSdmSupported];
}

id objc_msgSend_isRecentDevice(void *a1, const char *a2, ...)
{
  return [a1 isRecentDevice];
}

id objc_msgSend_isRemoteWiFiGood(void *a1, const char *a2, ...)
{
  return [a1 isRemoteWiFiGood];
}

id objc_msgSend_isRetryValid(void *a1, const char *a2, ...)
{
  return [a1 isRetryValid];
}

id objc_msgSend_isRoaming(void *a1, const char *a2, ...)
{
  return [a1 isRoaming];
}

id objc_msgSend_isRowSKUB(void *a1, const char *a2, ...)
{
  return [a1 isRowSKUB];
}

id objc_msgSend_isRowSKUS(void *a1, const char *a2, ...)
{
  return [a1 isRowSKUS];
}

id objc_msgSend_isRxRatioValid(void *a1, const char *a2, ...)
{
  return [a1 isRxRatioValid];
}

id objc_msgSend_isSideCarInProgress(void *a1, const char *a2, ...)
{
  return [a1 isSideCarInProgress];
}

id objc_msgSend_isSimPresent(void *a1, const char *a2, ...)
{
  return [a1 isSimPresent];
}

id objc_msgSend_isSisSupportedOnICE(void *a1, const char *a2, ...)
{
  return [a1 isSisSupportedOnICE];
}

id objc_msgSend_isSlowWiFi(void *a1, const char *a2, ...)
{
  return [a1 isSlowWiFi];
}

id objc_msgSend_isSmartDataModeEnabled(void *a1, const char *a2, ...)
{
  return [a1 isSmartDataModeEnabled];
}

id objc_msgSend_isSrvccHandoverInProgress(void *a1, const char *a2, ...)
{
  return [a1 isSrvccHandoverInProgress];
}

id objc_msgSend_isStatusUpdateMsgBuffered(void *a1, const char *a2, ...)
{
  return [a1 isStatusUpdateMsgBuffered];
}

id objc_msgSend_isStreamingAppForeground(void *a1, const char *a2, ...)
{
  return [a1 isStreamingAppForeground];
}

id objc_msgSend_isSuppressSOSOnlyWithLimitedServiceEnabled(void *a1, const char *a2, ...)
{
  return [a1 isSuppressSOSOnlyWithLimitedServiceEnabled];
}

id objc_msgSend_isTelephonyEnabled(void *a1, const char *a2, ...)
{
  return [a1 isTelephonyEnabled];
}

id objc_msgSend_isTelephonyProvider(void *a1, const char *a2, ...)
{
  return [a1 isTelephonyProvider];
}

id objc_msgSend_isTestMode(void *a1, const char *a2, ...)
{
  return [a1 isTestMode];
}

id objc_msgSend_isTimerActive(void *a1, const char *a2, ...)
{
  return [a1 isTimerActive];
}

id objc_msgSend_isTxPerValid(void *a1, const char *a2, ...)
{
  return [a1 isTxPerValid];
}

id objc_msgSend_isValid(void *a1, const char *a2, ...)
{
  return [a1 isValid];
}

id objc_msgSend_isVideo(void *a1, const char *a2, ...)
{
  return [a1 isVideo];
}

id objc_msgSend_isVoIPCallActive(void *a1, const char *a2, ...)
{
  return [a1 isVoIPCallActive];
}

id objc_msgSend_isVoLTESupported(void *a1, const char *a2, ...)
{
  return [a1 isVoLTESupported];
}

id objc_msgSend_isVoiceLQMValid(void *a1, const char *a2, ...)
{
  return [a1 isVoiceLQMValid];
}

id objc_msgSend_isVolteSupported(void *a1, const char *a2, ...)
{
  return [a1 isVolteSupported];
}

id objc_msgSend_isWatchAssociated(void *a1, const char *a2, ...)
{
  return [a1 isWatchAssociated];
}

id objc_msgSend_isWiFiAppEntryCriteriaMet(void *a1, const char *a2, ...)
{
  return [a1 isWiFiAppEntryCriteriaMet];
}

id objc_msgSend_isWiFiCallingSupported(void *a1, const char *a2, ...)
{
  return [a1 isWiFiCallingSupported];
}

id objc_msgSend_isWiFiCallingSupportedAnySlot(void *a1, const char *a2, ...)
{
  return [a1 isWiFiCallingSupportedAnySlot];
}

id objc_msgSend_isWiFiCallingSupportedSlot1(void *a1, const char *a2, ...)
{
  return [a1 isWiFiCallingSupportedSlot1];
}

id objc_msgSend_isWiFiCallingSupportedSlot2(void *a1, const char *a2, ...)
{
  return [a1 isWiFiCallingSupportedSlot2];
}

id objc_msgSend_isWiFiConnected(void *a1, const char *a2, ...)
{
  return [a1 isWiFiConnected];
}

id objc_msgSend_isWiFiConnectedToCarPlay(void *a1, const char *a2, ...)
{
  return [a1 isWiFiConnectedToCarPlay];
}

id objc_msgSend_isWiFiEnabled(void *a1, const char *a2, ...)
{
  return [a1 isWiFiEnabled];
}

id objc_msgSend_isWiFiLinkEvaluationDesired(void *a1, const char *a2, ...)
{
  return [a1 isWiFiLinkEvaluationDesired];
}

id objc_msgSend_isWiFiNetworkCaptive(void *a1, const char *a2, ...)
{
  return [a1 isWiFiNetworkCaptive];
}

id objc_msgSend_isWiFiPrimary(void *a1, const char *a2, ...)
{
  return [a1 isWiFiPrimary];
}

id objc_msgSend_isWiFiPrimaryInterface(void *a1, const char *a2, ...)
{
  return [a1 isWiFiPrimaryInterface];
}

id objc_msgSend_isWiFiQualityGoodForProximityMode(void *a1, const char *a2, ...)
{
  return [a1 isWiFiQualityGoodForProximityMode];
}

id objc_msgSend_isWiFiStreamingExitCriteriaMet(void *a1, const char *a2, ...)
{
  return [a1 isWiFiStreamingExitCriteriaMet];
}

id objc_msgSend_isWiFiUsingCarPlay(void *a1, const char *a2, ...)
{
  return [a1 isWiFiUsingCarPlay];
}

id objc_msgSend_isWoWEnabled(void *a1, const char *a2, ...)
{
  return [a1 isWoWEnabled];
}

id objc_msgSend_issueType(void *a1, const char *a2, ...)
{
  return [a1 issueType];
}

id objc_msgSend_lastKnownEstimates(void *a1, const char *a2, ...)
{
  return [a1 lastKnownEstimates];
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return [a1 lastObject];
}

id objc_msgSend_lat(void *a1, const char *a2, ...)
{
  return [a1 lat];
}

id objc_msgSend_legacyInfo(void *a1, const char *a2, ...)
{
  return [a1 legacyInfo];
}

id objc_msgSend_legacyWiFiBlocklistChannelsFor3FoWiFi(void *a1, const char *a2, ...)
{
  return [a1 legacyWiFiBlocklistChannelsFor3FoWiFi];
}

id objc_msgSend_legacyWiFiChannelsToAvoidFor3FoWiFi(void *a1, const char *a2, ...)
{
  return [a1 legacyWiFiChannelsToAvoidFor3FoWiFi];
}

id objc_msgSend_legacyWiFiChannelsToAvoidForIMD2GPS(void *a1, const char *a2, ...)
{
  return [a1 legacyWiFiChannelsToAvoidForIMD2GPS];
}

id objc_msgSend_legacyWiFiChannelsToAvoidForIMD3Cell(void *a1, const char *a2, ...)
{
  return [a1 legacyWiFiChannelsToAvoidForIMD3Cell];
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return [a1 length];
}

id objc_msgSend_linkPreferenceNotificationRequired(void *a1, const char *a2, ...)
{
  return [a1 linkPreferenceNotificationRequired];
}

id objc_msgSend_linkQuality(void *a1, const char *a2, ...)
{
  return [a1 linkQuality];
}

id objc_msgSend_lng(void *a1, const char *a2, ...)
{
  return [a1 lng];
}

id objc_msgSend_loadCoexConfigurablePolicy(void *a1, const char *a2, ...)
{
  return [a1 loadCoexConfigurablePolicy];
}

id objc_msgSend_loadDefaultsParam(void *a1, const char *a2, ...)
{
  return [a1 loadDefaultsParam];
}

id objc_msgSend_loadiRATConfigurablePolicy(void *a1, const char *a2, ...)
{
  return [a1 loadiRATConfigurablePolicy];
}

id objc_msgSend_loads(void *a1, const char *a2, ...)
{
  return [a1 loads];
}

id objc_msgSend_locDbRequired(void *a1, const char *a2, ...)
{
  return [a1 locDbRequired];
}

id objc_msgSend_localSenderIdentityUUID(void *a1, const char *a2, ...)
{
  return [a1 localSenderIdentityUUID];
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return [a1 localizedDescription];
}

id objc_msgSend_location(void *a1, const char *a2, ...)
{
  return [a1 location];
}

id objc_msgSend_lockObjectWifiAntselPolicyStats(void *a1, const char *a2, ...)
{
  return [a1 lockObjectWifiAntselPolicyStats];
}

id objc_msgSend_logPrint(void *a1, const char *a2, ...)
{
  return [a1 logPrint];
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return [a1 longLongValue];
}

id objc_msgSend_lowercaseString(void *a1, const char *a2, ...)
{
  return [a1 lowercaseString];
}

id objc_msgSend_lsmRecommendationBe(void *a1, const char *a2, ...)
{
  return [a1 lsmRecommendationBe];
}

id objc_msgSend_lteCDRXTDDMode(void *a1, const char *a2, ...)
{
  return [a1 lteCDRXTDDMode];
}

id objc_msgSend_mActivePhy(void *a1, const char *a2, ...)
{
  return [a1 mActivePhy];
}

id objc_msgSend_mAirplayCriticalityPercentage(void *a1, const char *a2, ...)
{
  return [a1 mAirplayCriticalityPercentage];
}

id objc_msgSend_mAirplayDuration(void *a1, const char *a2, ...)
{
  return [a1 mAirplayDuration];
}

id objc_msgSend_mAirplayIsCritical(void *a1, const char *a2, ...)
{
  return [a1 mAirplayIsCritical];
}

id objc_msgSend_mApp(void *a1, const char *a2, ...)
{
  return [a1 mApp];
}

id objc_msgSend_mAwdlEnabled(void *a1, const char *a2, ...)
{
  return [a1 mAwdlEnabled];
}

id objc_msgSend_mBTConnectedDevicesHandler(void *a1, const char *a2, ...)
{
  return [a1 mBTConnectedDevicesHandler];
}

id objc_msgSend_mBandPolicy(void *a1, const char *a2, ...)
{
  return [a1 mBandPolicy];
}

id objc_msgSend_mBtLinkIsRecommended(void *a1, const char *a2, ...)
{
  return [a1 mBtLinkIsRecommended];
}

id objc_msgSend_mBtLinkRecommendationUpdateNeeded(void *a1, const char *a2, ...)
{
  return [a1 mBtLinkRecommendationUpdateNeeded];
}

id objc_msgSend_mBtPhyRate(void *a1, const char *a2, ...)
{
  return [a1 mBtPhyRate];
}

id objc_msgSend_mCTService(void *a1, const char *a2, ...)
{
  return [a1 mCTService];
}

id objc_msgSend_mCacheCellularReportedFullList(void *a1, const char *a2, ...)
{
  return [a1 mCacheCellularReportedFullList];
}

id objc_msgSend_mCacheCellularReportedReducedList(void *a1, const char *a2, ...)
{
  return [a1 mCacheCellularReportedReducedList];
}

id objc_msgSend_mCacheGnssReportedFullList(void *a1, const char *a2, ...)
{
  return [a1 mCacheGnssReportedFullList];
}

id objc_msgSend_mCacheGnssReportedReducedList(void *a1, const char *a2, ...)
{
  return [a1 mCacheGnssReportedReducedList];
}

id objc_msgSend_mCacheWifiReportedFullList(void *a1, const char *a2, ...)
{
  return [a1 mCacheWifiReportedFullList];
}

id objc_msgSend_mCacheWifiReportedReducedList(void *a1, const char *a2, ...)
{
  return [a1 mCacheWifiReportedReducedList];
}

id objc_msgSend_mCarPlayBTScanRelaxReason(void *a1, const char *a2, ...)
{
  return [a1 mCarPlayBTScanRelaxReason];
}

id objc_msgSend_mCarPlaySessionInProgress(void *a1, const char *a2, ...)
{
  return [a1 mCarPlaySessionInProgress];
}

id objc_msgSend_mCellAggressor1(void *a1, const char *a2, ...)
{
  return [a1 mCellAggressor1];
}

id objc_msgSend_mCellAggressor2(void *a1, const char *a2, ...)
{
  return [a1 mCellAggressor2];
}

id objc_msgSend_mCellularAntBitmap(void *a1, const char *a2, ...)
{
  return [a1 mCellularAntBitmap];
}

id objc_msgSend_mCellularBand(void *a1, const char *a2, ...)
{
  return [a1 mCellularBand];
}

id objc_msgSend_mCellularBandwidthKHz(void *a1, const char *a2, ...)
{
  return [a1 mCellularBandwidthKHz];
}

id objc_msgSend_mCellularCoexTech(void *a1, const char *a2, ...)
{
  return [a1 mCellularCoexTech];
}

id objc_msgSend_mCellularFreqInclusionList(void *a1, const char *a2, ...)
{
  return [a1 mCellularFreqInclusionList];
}

id objc_msgSend_mCellularFreqSet(void *a1, const char *a2, ...)
{
  return [a1 mCellularFreqSet];
}

id objc_msgSend_mCellularFrequencyKHz(void *a1, const char *a2, ...)
{
  return [a1 mCellularFrequencyKHz];
}

id objc_msgSend_mCellularHoppingFreq(void *a1, const char *a2, ...)
{
  return [a1 mCellularHoppingFreq];
}

id objc_msgSend_mCellularNeighborFreqList(void *a1, const char *a2, ...)
{
  return [a1 mCellularNeighborFreqList];
}

id objc_msgSend_mCellularPccFreq(void *a1, const char *a2, ...)
{
  return [a1 mCellularPccFreq];
}

id objc_msgSend_mCellularRPLMNFreqList(void *a1, const char *a2, ...)
{
  return [a1 mCellularRPLMNFreqList];
}

id objc_msgSend_mCellularSccFreqList(void *a1, const char *a2, ...)
{
  return [a1 mCellularSccFreqList];
}

id objc_msgSend_mCellularSearchFreqList(void *a1, const char *a2, ...)
{
  return [a1 mCellularSearchFreqList];
}

id objc_msgSend_mCellularTxPowerCap(void *a1, const char *a2, ...)
{
  return [a1 mCellularTxPowerCap];
}

id objc_msgSend_mClassicRssi(void *a1, const char *a2, ...)
{
  return [a1 mClassicRssi];
}

id objc_msgSend_mCompanionWifiLinkIsRecommended(void *a1, const char *a2, ...)
{
  return [a1 mCompanionWifiLinkIsRecommended];
}

id objc_msgSend_mCompanionWifiLinkRecommendationUpdateNeeded(void *a1, const char *a2, ...)
{
  return [a1 mCompanionWifiLinkRecommendationUpdateNeeded];
}

id objc_msgSend_mConditionId(void *a1, const char *a2, ...)
{
  return [a1 mConditionId];
}

id objc_msgSend_mDenyVoiceProtect(void *a1, const char *a2, ...)
{
  return [a1 mDenyVoiceProtect];
}

id objc_msgSend_mDirectWifiLinkIsRecommended(void *a1, const char *a2, ...)
{
  return [a1 mDirectWifiLinkIsRecommended];
}

id objc_msgSend_mDirectWifiLinkRecommendationUpdateNeeded(void *a1, const char *a2, ...)
{
  return [a1 mDirectWifiLinkRecommendationUpdateNeeded];
}

id objc_msgSend_mEnable(void *a1, const char *a2, ...)
{
  return [a1 mEnable];
}

id objc_msgSend_mEurekaConfig(void *a1, const char *a2, ...)
{
  return [a1 mEurekaConfig];
}

id objc_msgSend_mForceUpdateNeeded(void *a1, const char *a2, ...)
{
  return [a1 mForceUpdateNeeded];
}

id objc_msgSend_mGnssL1FreqList(void *a1, const char *a2, ...)
{
  return [a1 mGnssL1FreqList];
}

id objc_msgSend_mGnssL5FreqList(void *a1, const char *a2, ...)
{
  return [a1 mGnssL5FreqList];
}

id objc_msgSend_mGnssL5TunerAllowed(void *a1, const char *a2, ...)
{
  return [a1 mGnssL5TunerAllowed];
}

id objc_msgSend_mImdType(void *a1, const char *a2, ...)
{
  return [a1 mImdType];
}

id objc_msgSend_mIsRetry(void *a1, const char *a2, ...)
{
  return [a1 mIsRetry];
}

id objc_msgSend_mL5TunerLqmThreshold(void *a1, const char *a2, ...)
{
  return [a1 mL5TunerLqmThreshold];
}

id objc_msgSend_mLeRssi(void *a1, const char *a2, ...)
{
  return [a1 mLeRssi];
}

id objc_msgSend_mLeastCongestedChannel(void *a1, const char *a2, ...)
{
  return [a1 mLeastCongestedChannel];
}

id objc_msgSend_mLeastCongestedChannelCount(void *a1, const char *a2, ...)
{
  return [a1 mLeastCongestedChannelCount];
}

id objc_msgSend_mLocalDeliveryCumulativeMessageDelivered(void *a1, const char *a2, ...)
{
  return [a1 mLocalDeliveryCumulativeMessageDelivered];
}

id objc_msgSend_mLocalDeliveryCumulativeMessageSent(void *a1, const char *a2, ...)
{
  return [a1 mLocalDeliveryCumulativeMessageSent];
}

id objc_msgSend_mLocalDeliveryMessageDelivered(void *a1, const char *a2, ...)
{
  return [a1 mLocalDeliveryMessageDelivered];
}

id objc_msgSend_mLocalDeliveryMessageDeliveredDeliveryError(void *a1, const char *a2, ...)
{
  return [a1 mLocalDeliveryMessageDeliveredDeliveryError];
}

id objc_msgSend_mLocalDeliveryMessageDeliveredDeliveryErrorMovAvg(void *a1, const char *a2, ...)
{
  return [a1 mLocalDeliveryMessageDeliveredDeliveryErrorMovAvg];
}

id objc_msgSend_mLocalDeliveryMessageDeliveredMessageSize(void *a1, const char *a2, ...)
{
  return [a1 mLocalDeliveryMessageDeliveredMessageSize];
}

id objc_msgSend_mLocalDeliveryMessageDeliveredMessageSizeMovAvg(void *a1, const char *a2, ...)
{
  return [a1 mLocalDeliveryMessageDeliveredMessageSizeMovAvg];
}

id objc_msgSend_mLocalDeliveryMessageDeliveredMovAvg(void *a1, const char *a2, ...)
{
  return [a1 mLocalDeliveryMessageDeliveredMovAvg];
}

id objc_msgSend_mLocalDeliveryMessageDeliveredRTT(void *a1, const char *a2, ...)
{
  return [a1 mLocalDeliveryMessageDeliveredRTT];
}

id objc_msgSend_mLocalDeliveryMessageDeliveredRTTMovAvg(void *a1, const char *a2, ...)
{
  return [a1 mLocalDeliveryMessageDeliveredRTTMovAvg];
}

id objc_msgSend_mLocalDeliveryMessageReceived(void *a1, const char *a2, ...)
{
  return [a1 mLocalDeliveryMessageReceived];
}

id objc_msgSend_mLocalDeliveryMessageReceivedMessageSize(void *a1, const char *a2, ...)
{
  return [a1 mLocalDeliveryMessageReceivedMessageSize];
}

id objc_msgSend_mLocalDeliveryMessageReceivedMessageSizeMovAvg(void *a1, const char *a2, ...)
{
  return [a1 mLocalDeliveryMessageReceivedMessageSizeMovAvg];
}

id objc_msgSend_mLocalDeliveryMessageReceivedMovAvg(void *a1, const char *a2, ...)
{
  return [a1 mLocalDeliveryMessageReceivedMovAvg];
}

id objc_msgSend_mLocalDeliveryMessageSent(void *a1, const char *a2, ...)
{
  return [a1 mLocalDeliveryMessageSent];
}

id objc_msgSend_mLocalDeliveryMessageSentMovAvg(void *a1, const char *a2, ...)
{
  return [a1 mLocalDeliveryMessageSentMovAvg];
}

id objc_msgSend_mLqmThreshold(void *a1, const char *a2, ...)
{
  return [a1 mLqmThreshold];
}

id objc_msgSend_mMavCiConfig(void *a1, const char *a2, ...)
{
  return [a1 mMavCiConfig];
}

id objc_msgSend_mMavFaceIdPtConfig(void *a1, const char *a2, ...)
{
  return [a1 mMavFaceIdPtConfig];
}

id objc_msgSend_mMavPtConfig(void *a1, const char *a2, ...)
{
  return [a1 mMavPtConfig];
}

id objc_msgSend_mMavSfPboffConfig(void *a1, const char *a2, ...)
{
  return [a1 mMavSfPboffConfig];
}

id objc_msgSend_mMetricsConsiderationPeriod(void *a1, const char *a2, ...)
{
  return [a1 mMetricsConsiderationPeriod];
}

id objc_msgSend_mMetricsReportReason(void *a1, const char *a2, ...)
{
  return [a1 mMetricsReportReason];
}

id objc_msgSend_mMitigationRequired(void *a1, const char *a2, ...)
{
  return [a1 mMitigationRequired];
}

id objc_msgSend_mMitigationTimer(void *a1, const char *a2, ...)
{
  return [a1 mMitigationTimer];
}

id objc_msgSend_mMitigationType(void *a1, const char *a2, ...)
{
  return [a1 mMitigationType];
}

id objc_msgSend_mMovingAvgRSSI(void *a1, const char *a2, ...)
{
  return [a1 mMovingAvgRSSI];
}

id objc_msgSend_mMovingAvgReTxCount(void *a1, const char *a2, ...)
{
  return [a1 mMovingAvgReTxCount];
}

id objc_msgSend_mMovingAvgRxErrorCount(void *a1, const char *a2, ...)
{
  return [a1 mMovingAvgRxErrorCount];
}

id objc_msgSend_mMovingAvgSuccessfulRxCount(void *a1, const char *a2, ...)
{
  return [a1 mMovingAvgSuccessfulRxCount];
}

id objc_msgSend_mMovingAvgSuccessfulTxCount(void *a1, const char *a2, ...)
{
  return [a1 mMovingAvgSuccessfulTxCount];
}

id objc_msgSend_mNanEnabled(void *a1, const char *a2, ...)
{
  return [a1 mNanEnabled];
}

id objc_msgSend_mNumberofSamples(void *a1, const char *a2, ...)
{
  return [a1 mNumberofSamples];
}

id objc_msgSend_mParallelMitigationAllowed(void *a1, const char *a2, ...)
{
  return [a1 mParallelMitigationAllowed];
}

id objc_msgSend_mPolicy(void *a1, const char *a2, ...)
{
  return [a1 mPolicy];
}

id objc_msgSend_mPriorityClass(void *a1, const char *a2, ...)
{
  return [a1 mPriorityClass];
}

id objc_msgSend_mProtectGnssLowPriority(void *a1, const char *a2, ...)
{
  return [a1 mProtectGnssLowPriority];
}

id objc_msgSend_mRCU15GHzInUse(void *a1, const char *a2, ...)
{
  return [a1 mRCU15GHzInUse];
}

id objc_msgSend_mRCU1ChannelNum(void *a1, const char *a2, ...)
{
  return [a1 mRCU1ChannelNum];
}

id objc_msgSend_mRCU1CurrentMode(void *a1, const char *a2, ...)
{
  return [a1 mRCU1CurrentMode];
}

id objc_msgSend_mRCU1CycleLength(void *a1, const char *a2, ...)
{
  return [a1 mRCU1CycleLength];
}

id objc_msgSend_mRCU1FrameFormat(void *a1, const char *a2, ...)
{
  return [a1 mRCU1FrameFormat];
}

id objc_msgSend_mRCU1NbBandMask(void *a1, const char *a2, ...)
{
  return [a1 mRCU1NbBandMask];
}

id objc_msgSend_mRCU1NumberOfCycles(void *a1, const char *a2, ...)
{
  return [a1 mRCU1NumberOfCycles];
}

id objc_msgSend_mRCU1OnDuration(void *a1, const char *a2, ...)
{
  return [a1 mRCU1OnDuration];
}

id objc_msgSend_mRCU1PowerOn(void *a1, const char *a2, ...)
{
  return [a1 mRCU1PowerOn];
}

id objc_msgSend_mRCU1UseCaseNum(void *a1, const char *a2, ...)
{
  return [a1 mRCU1UseCaseNum];
}

id objc_msgSend_mRCU2ChannelActivity(void *a1, const char *a2, ...)
{
  return [a1 mRCU2ChannelActivity];
}

id objc_msgSend_mRCU2ChannelNum(void *a1, const char *a2, ...)
{
  return [a1 mRCU2ChannelNum];
}

id objc_msgSend_mRCU2PowerOn(void *a1, const char *a2, ...)
{
  return [a1 mRCU2PowerOn];
}

id objc_msgSend_mRealTimeAwdlTrafficEnabled(void *a1, const char *a2, ...)
{
  return [a1 mRealTimeAwdlTrafficEnabled];
}

id objc_msgSend_mReason(void *a1, const char *a2, ...)
{
  return [a1 mReason];
}

id objc_msgSend_mReportDuration(void *a1, const char *a2, ...)
{
  return [a1 mReportDuration];
}

id objc_msgSend_mStreamingReportBytesReceived(void *a1, const char *a2, ...)
{
  return [a1 mStreamingReportBytesReceived];
}

id objc_msgSend_mStreamingReportBytesSent(void *a1, const char *a2, ...)
{
  return [a1 mStreamingReportBytesSent];
}

id objc_msgSend_mTerminusContext(void *a1, const char *a2, ...)
{
  return [a1 mTerminusContext];
}

id objc_msgSend_mTerminusIsRegistered(void *a1, const char *a2, ...)
{
  return [a1 mTerminusIsRegistered];
}

id objc_msgSend_mType(void *a1, const char *a2, ...)
{
  return [a1 mType];
}

id objc_msgSend_mUsbRate(void *a1, const char *a2, ...)
{
  return [a1 mUsbRate];
}

id objc_msgSend_mUwbAntBitmap(void *a1, const char *a2, ...)
{
  return [a1 mUwbAntBitmap];
}

id objc_msgSend_mUwbChannel(void *a1, const char *a2, ...)
{
  return [a1 mUwbChannel];
}

id objc_msgSend_mWifiFreqList(void *a1, const char *a2, ...)
{
  return [a1 mWifiFreqList];
}

id objc_msgSend_mainBundle(void *a1, const char *a2, ...)
{
  return [a1 mainBundle];
}

id objc_msgSend_mainThread(void *a1, const char *a2, ...)
{
  return [a1 mainThread];
}

id objc_msgSend_manageServiceConnection(void *a1, const char *a2, ...)
{
  return [a1 manageServiceConnection];
}

id objc_msgSend_manageServiceDisconnection(void *a1, const char *a2, ...)
{
  return [a1 manageServiceDisconnection];
}

id objc_msgSend_manufacturer(void *a1, const char *a2, ...)
{
  return [a1 manufacturer];
}

id objc_msgSend_mavAntPolicy(void *a1, const char *a2, ...)
{
  return [a1 mavAntPolicy];
}

id objc_msgSend_mcc(void *a1, const char *a2, ...)
{
  return [a1 mcc];
}

id objc_msgSend_mediaStallDetected(void *a1, const char *a2, ...)
{
  return [a1 mediaStallDetected];
}

id objc_msgSend_metricType(void *a1, const char *a2, ...)
{
  return [a1 metricType];
}

id objc_msgSend_metrics(void *a1, const char *a2, ...)
{
  return [a1 metrics];
}

id objc_msgSend_miRATProximityClientContexts(void *a1, const char *a2, ...)
{
  return [a1 miRATProximityClientContexts];
}

id objc_msgSend_minActiveWiFiAvgTxPktLossRateTh(void *a1, const char *a2, ...)
{
  return [a1 minActiveWiFiAvgTxPktLossRateTh];
}

id objc_msgSend_minActiveWiFiCcaTh0(void *a1, const char *a2, ...)
{
  return [a1 minActiveWiFiCcaTh0];
}

id objc_msgSend_minActiveWiFiCcaTh1(void *a1, const char *a2, ...)
{
  return [a1 minActiveWiFiCcaTh1];
}

id objc_msgSend_minActiveWiFiRssiTh0(void *a1, const char *a2, ...)
{
  return [a1 minActiveWiFiRssiTh0];
}

id objc_msgSend_minActiveWiFiRssiTh1(void *a1, const char *a2, ...)
{
  return [a1 minActiveWiFiRssiTh1];
}

id objc_msgSend_minActiveWiFiSnrTh0(void *a1, const char *a2, ...)
{
  return [a1 minActiveWiFiSnrTh0];
}

id objc_msgSend_minActiveWiFiSnrTh1(void *a1, const char *a2, ...)
{
  return [a1 minActiveWiFiSnrTh1];
}

id objc_msgSend_minActiveWiFiTxPktLossRateTh0(void *a1, const char *a2, ...)
{
  return [a1 minActiveWiFiTxPktLossRateTh0];
}

id objc_msgSend_minActiveWiFiTxPktLossRateTh1(void *a1, const char *a2, ...)
{
  return [a1 minActiveWiFiTxPktLossRateTh1];
}

id objc_msgSend_minIdleWiFiCcaTh0(void *a1, const char *a2, ...)
{
  return [a1 minIdleWiFiCcaTh0];
}

id objc_msgSend_minIdleWiFiCcaTh1(void *a1, const char *a2, ...)
{
  return [a1 minIdleWiFiCcaTh1];
}

id objc_msgSend_minIdleWiFiFwTxPktLossRateTh0(void *a1, const char *a2, ...)
{
  return [a1 minIdleWiFiFwTxPktLossRateTh0];
}

id objc_msgSend_minIdleWiFiFwTxPktLossRateTh1(void *a1, const char *a2, ...)
{
  return [a1 minIdleWiFiFwTxPktLossRateTh1];
}

id objc_msgSend_minIdleWiFiRssiTh0(void *a1, const char *a2, ...)
{
  return [a1 minIdleWiFiRssiTh0];
}

id objc_msgSend_minIdleWiFiRssiTh1(void *a1, const char *a2, ...)
{
  return [a1 minIdleWiFiRssiTh1];
}

id objc_msgSend_minIdleWiFiSnrTh0(void *a1, const char *a2, ...)
{
  return [a1 minIdleWiFiSnrTh0];
}

id objc_msgSend_minIdleWiFiSnrTh1(void *a1, const char *a2, ...)
{
  return [a1 minIdleWiFiSnrTh1];
}

id objc_msgSend_minIdleWiFiTxPktLossRateTh0(void *a1, const char *a2, ...)
{
  return [a1 minIdleWiFiTxPktLossRateTh0];
}

id objc_msgSend_minIdleWiFiTxPktLossRateTh1(void *a1, const char *a2, ...)
{
  return [a1 minIdleWiFiTxPktLossRateTh1];
}

id objc_msgSend_minMovSigBarTh0(void *a1, const char *a2, ...)
{
  return [a1 minMovSigBarTh0];
}

id objc_msgSend_minSigBarTh0(void *a1, const char *a2, ...)
{
  return [a1 minSigBarTh0];
}

id objc_msgSend_minSigBarTh1(void *a1, const char *a2, ...)
{
  return [a1 minSigBarTh1];
}

id objc_msgSend_minSigBarTh2(void *a1, const char *a2, ...)
{
  return [a1 minSigBarTh2];
}

id objc_msgSend_minWiFiBeaconPerTh0(void *a1, const char *a2, ...)
{
  return [a1 minWiFiBeaconPerTh0];
}

id objc_msgSend_minWiFiBeaconPerTh1(void *a1, const char *a2, ...)
{
  return [a1 minWiFiBeaconPerTh1];
}

id objc_msgSend_mitigationType(void *a1, const char *a2, ...)
{
  return [a1 mitigationType];
}

id objc_msgSend_mnc(void *a1, const char *a2, ...)
{
  return [a1 mnc];
}

id objc_msgSend_mobilityContextStale(void *a1, const char *a2, ...)
{
  return [a1 mobilityContextStale];
}

id objc_msgSend_mobilityStateAwarenessEnabled(void *a1, const char *a2, ...)
{
  return [a1 mobilityStateAwarenessEnabled];
}

id objc_msgSend_model(void *a1, const char *a2, ...)
{
  return [a1 model];
}

id objc_msgSend_modelIdentifier(void *a1, const char *a2, ...)
{
  return [a1 modelIdentifier];
}

id objc_msgSend_modelNumber(void *a1, const char *a2, ...)
{
  return [a1 modelNumber];
}

id objc_msgSend_modelURL(void *a1, const char *a2, ...)
{
  return [a1 modelURL];
}

id objc_msgSend_monitorTransportMetrics(void *a1, const char *a2, ...)
{
  return [a1 monitorTransportMetrics];
}

id objc_msgSend_movAvgIdleRxPktLoss(void *a1, const char *a2, ...)
{
  return [a1 movAvgIdleRxPktLoss];
}

id objc_msgSend_movAvgNominalJitterBufferDelay(void *a1, const char *a2, ...)
{
  return [a1 movAvgNominalJitterBufferDelay];
}

id objc_msgSend_movAvgRxPktLoss(void *a1, const char *a2, ...)
{
  return [a1 movAvgRxPktLoss];
}

id objc_msgSend_movingAverageSignalBars(void *a1, const char *a2, ...)
{
  return [a1 movingAverageSignalBars];
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return [a1 mutableCopy];
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return [a1 name];
}

id objc_msgSend_nbChannelToAvoidEnd(void *a1, const char *a2, ...)
{
  return [a1 nbChannelToAvoidEnd];
}

id objc_msgSend_nbChannelToAvoidStart(void *a1, const char *a2, ...)
{
  return [a1 nbChannelToAvoidStart];
}

id objc_msgSend_needWiFiLQM(void *a1, const char *a2, ...)
{
  return [a1 needWiFiLQM];
}

id objc_msgSend_neighberCellType(void *a1, const char *a2, ...)
{
  return [a1 neighberCellType];
}

id objc_msgSend_networkType(void *a1, const char *a2, ...)
{
  return [a1 networkType];
}

id objc_msgSend_newRadioCoverage(void *a1, const char *a2, ...)
{
  return [a1 newRadioCoverage];
}

id objc_msgSend_newRadioMmWaveDataBearer(void *a1, const char *a2, ...)
{
  return [a1 newRadioMmWaveDataBearer];
}

id objc_msgSend_newRadioNsaCoverage(void *a1, const char *a2, ...)
{
  return [a1 newRadioNsaCoverage];
}

id objc_msgSend_newRadioSaCoverage(void *a1, const char *a2, ...)
{
  return [a1 newRadioSaCoverage];
}

id objc_msgSend_newRadioSub6DataBearer(void *a1, const char *a2, ...)
{
  return [a1 newRadioSub6DataBearer];
}

id objc_msgSend_nominalJitterBufferDelay(void *a1, const char *a2, ...)
{
  return [a1 nominalJitterBufferDelay];
}

id objc_msgSend_nonCbrsEnterRsrpMin(void *a1, const char *a2, ...)
{
  return [a1 nonCbrsEnterRsrpMin];
}

id objc_msgSend_nonCbrsEnterRsrqMin(void *a1, const char *a2, ...)
{
  return [a1 nonCbrsEnterRsrqMin];
}

id objc_msgSend_nonCbrsExitRsrpMin(void *a1, const char *a2, ...)
{
  return [a1 nonCbrsExitRsrpMin];
}

id objc_msgSend_nonCbrsExitRsrqMin(void *a1, const char *a2, ...)
{
  return [a1 nonCbrsExitRsrqMin];
}

id objc_msgSend_notifyRecommendations(void *a1, const char *a2, ...)
{
  return [a1 notifyRecommendations];
}

id objc_msgSend_notifyRegisteredClientsForExperimentEnd(void *a1, const char *a2, ...)
{
  return [a1 notifyRegisteredClientsForExperimentEnd];
}

id objc_msgSend_notifylowPowerModePeriodicWakeUp(void *a1, const char *a2, ...)
{
  return [a1 notifylowPowerModePeriodicWakeUp];
}

id objc_msgSend_nrCellRSRP(void *a1, const char *a2, ...)
{
  return [a1 nrCellRSRP];
}

id objc_msgSend_nrCellRSRQ(void *a1, const char *a2, ...)
{
  return [a1 nrCellRSRQ];
}

id objc_msgSend_nrCellSNR(void *a1, const char *a2, ...)
{
  return [a1 nrCellSNR];
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return [a1 null];
}

id objc_msgSend_num2GHzAoSBiAudioDevice(void *a1, const char *a2, ...)
{
  return [a1 num2GHzAoSBiAudioDevice];
}

id objc_msgSend_num2GHzAoSUniAudioDevice(void *a1, const char *a2, ...)
{
  return [a1 num2GHzAoSUniAudioDevice];
}

id objc_msgSend_num5GHzAoSBiAudioDevice(void *a1, const char *a2, ...)
{
  return [a1 num5GHzAoSBiAudioDevice];
}

id objc_msgSend_num5GHzAoSUniAudioDevice(void *a1, const char *a2, ...)
{
  return [a1 num5GHzAoSUniAudioDevice];
}

id objc_msgSend_numConnections(void *a1, const char *a2, ...)
{
  return [a1 numConnections];
}

id objc_msgSend_numGameCtrlDev10ms(void *a1, const char *a2, ...)
{
  return [a1 numGameCtrlDev10ms];
}

id objc_msgSend_numGameCtrlDev75ms(void *a1, const char *a2, ...)
{
  return [a1 numGameCtrlDev75ms];
}

id objc_msgSend_numHIDDevice(void *a1, const char *a2, ...)
{
  return [a1 numHIDDevice];
}

id objc_msgSend_numLEADevice(void *a1, const char *a2, ...)
{
  return [a1 numLEADevice];
}

id objc_msgSend_numLEDevice(void *a1, const char *a2, ...)
{
  return [a1 numLEDevice];
}

id objc_msgSend_numLLADevice(void *a1, const char *a2, ...)
{
  return [a1 numLLADevice];
}

id objc_msgSend_numSCODevice(void *a1, const char *a2, ...)
{
  return [a1 numSCODevice];
}

id objc_msgSend_numberOfSpatialStreams(void *a1, const char *a2, ...)
{
  return [a1 numberOfSpatialStreams];
}

id objc_msgSend_numberofSubscriptions(void *a1, const char *a2, ...)
{
  return [a1 numberofSubscriptions];
}

id objc_msgSend_numeSCODevice(void *a1, const char *a2, ...)
{
  return [a1 numeSCODevice];
}

id objc_msgSend_nwType(void *a1, const char *a2, ...)
{
  return [a1 nwType];
}

id objc_msgSend_object(void *a1, const char *a2, ...)
{
  return [a1 object];
}

id objc_msgSend_p2pAssistanceEnabled(void *a1, const char *a2, ...)
{
  return [a1 p2pAssistanceEnabled];
}

id objc_msgSend_p2pAwdlController(void *a1, const char *a2, ...)
{
  return [a1 p2pAwdlController];
}

id objc_msgSend_p2pNanController(void *a1, const char *a2, ...)
{
  return [a1 p2pNanController];
}

id objc_msgSend_packetLifetimeVIBE(void *a1, const char *a2, ...)
{
  return [a1 packetLifetimeVIBE];
}

id objc_msgSend_packetLossRateVIBE(void *a1, const char *a2, ...)
{
  return [a1 packetLossRateVIBE];
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return [a1 path];
}

id objc_msgSend_pencilState(void *a1, const char *a2, ...)
{
  return [a1 pencilState];
}

id objc_msgSend_periodicReportInterval(void *a1, const char *a2, ...)
{
  return [a1 periodicReportInterval];
}

id objc_msgSend_persistentContainer(void *a1, const char *a2, ...)
{
  return [a1 persistentContainer];
}

id objc_msgSend_pingPongAvoidanceThresholdRunning(void *a1, const char *a2, ...)
{
  return [a1 pingPongAvoidanceThresholdRunning];
}

id objc_msgSend_pingPongAvoidanceThresholdStationary(void *a1, const char *a2, ...)
{
  return [a1 pingPongAvoidanceThresholdStationary];
}

id objc_msgSend_pingPongAvoidanceThresholdWalking(void *a1, const char *a2, ...)
{
  return [a1 pingPongAvoidanceThresholdWalking];
}

id objc_msgSend_platformManager(void *a1, const char *a2, ...)
{
  return [a1 platformManager];
}

id objc_msgSend_poorConnectionDetected(void *a1, const char *a2, ...)
{
  return [a1 poorConnectionDetected];
}

id objc_msgSend_postWRMStateToBB(void *a1, const char *a2, ...)
{
  return [a1 postWRMStateToBB];
}

id objc_msgSend_powerState(void *a1, const char *a2, ...)
{
  return [a1 powerState];
}

id objc_msgSend_prevNR41RFEnabled(void *a1, const char *a2, ...)
{
  return [a1 prevNR41RFEnabled];
}

id objc_msgSend_prevNR7xRFEnabled(void *a1, const char *a2, ...)
{
  return [a1 prevNR7xRFEnabled];
}

id objc_msgSend_prevULFrequencyUpdate(void *a1, const char *a2, ...)
{
  return [a1 prevULFrequencyUpdate];
}

id objc_msgSend_previousStartTime(void *a1, const char *a2, ...)
{
  return [a1 previousStartTime];
}

id objc_msgSend_primaryAudioPacketLossRate(void *a1, const char *a2, ...)
{
  return [a1 primaryAudioPacketLossRate];
}

id objc_msgSend_primaryAudioPacketReceived(void *a1, const char *a2, ...)
{
  return [a1 primaryAudioPacketReceived];
}

id objc_msgSend_primaryVideoPacketLossRate(void *a1, const char *a2, ...)
{
  return [a1 primaryVideoPacketLossRate];
}

id objc_msgSend_primaryVideoPacketReceived(void *a1, const char *a2, ...)
{
  return [a1 primaryVideoPacketReceived];
}

id objc_msgSend_printBTConnInfo(void *a1, const char *a2, ...)
{
  return [a1 printBTConnInfo];
}

id objc_msgSend_printBTConnections(void *a1, const char *a2, ...)
{
  return [a1 printBTConnections];
}

id objc_msgSend_printPlatformConfig(void *a1, const char *a2, ...)
{
  return [a1 printPlatformConfig];
}

id objc_msgSend_printiRATConfig(void *a1, const char *a2, ...)
{
  return [a1 printiRATConfig];
}

id objc_msgSend_processDynamicAntennaBlocking(void *a1, const char *a2, ...)
{
  return [a1 processDynamicAntennaBlocking];
}

id objc_msgSend_provider(void *a1, const char *a2, ...)
{
  return [a1 provider];
}

id objc_msgSend_providerContext(void *a1, const char *a2, ...)
{
  return [a1 providerContext];
}

id objc_msgSend_providerIdentifier(void *a1, const char *a2, ...)
{
  return [a1 providerIdentifier];
}

id objc_msgSend_purgeStaleMobilityContexts(void *a1, const char *a2, ...)
{
  return [a1 purgeStaleMobilityContexts];
}

id objc_msgSend_qmiClientEnabled(void *a1, const char *a2, ...)
{
  return [a1 qmiClientEnabled];
}

id objc_msgSend_queryHPCellularInitialState(void *a1, const char *a2, ...)
{
  return [a1 queryHPCellularInitialState];
}

id objc_msgSend_queue(void *a1, const char *a2, ...)
{
  return [a1 queue];
}

id objc_msgSend_radioCoverage(void *a1, const char *a2, ...)
{
  return [a1 radioCoverage];
}

id objc_msgSend_radioFrequency(void *a1, const char *a2, ...)
{
  return [a1 radioFrequency];
}

id objc_msgSend_radioTechnology(void *a1, const char *a2, ...)
{
  return [a1 radioTechnology];
}

id objc_msgSend_rbThreshold(void *a1, const char *a2, ...)
{
  return [a1 rbThreshold];
}

id objc_msgSend_rc1duration(void *a1, const char *a2, ...)
{
  return [a1 rc1duration];
}

id objc_msgSend_rc1priority(void *a1, const char *a2, ...)
{
  return [a1 rc1priority];
}

id objc_msgSend_rcu1Controller(void *a1, const char *a2, ...)
{
  return [a1 rcu1Controller];
}

id objc_msgSend_rcu2Controller(void *a1, const char *a2, ...)
{
  return [a1 rcu2Controller];
}

id objc_msgSend_readAntBlockPowerLimitPolicyPlist(void *a1, const char *a2, ...)
{
  return [a1 readAntBlockPowerLimitPolicyPlist];
}

id objc_msgSend_readRDCountryCode(void *a1, const char *a2, ...)
{
  return [a1 readRDCountryCode];
}

id objc_msgSend_reason(void *a1, const char *a2, ...)
{
  return [a1 reason];
}

id objc_msgSend_refresh(void *a1, const char *a2, ...)
{
  return [a1 refresh];
}

id objc_msgSend_registerForCTNotifications(void *a1, const char *a2, ...)
{
  return [a1 registerForCTNotifications];
}

id objc_msgSend_registerForLocalNotifications(void *a1, const char *a2, ...)
{
  return [a1 registerForLocalNotifications];
}

id objc_msgSend_registerForSCNotifications(void *a1, const char *a2, ...)
{
  return [a1 registerForSCNotifications];
}

id objc_msgSend_registerIOkitStateEvent(void *a1, const char *a2, ...)
{
  return [a1 registerIOkitStateEvent];
}

id objc_msgSend_registerQmiIndHandler(void *a1, const char *a2, ...)
{
  return [a1 registerQmiIndHandler];
}

id objc_msgSend_registerSFOutrankDecisionNotification(void *a1, const char *a2, ...)
{
  return [a1 registerSFOutrankDecisionNotification];
}

id objc_msgSend_registerSFRestartNotification(void *a1, const char *a2, ...)
{
  return [a1 registerSFRestartNotification];
}

id objc_msgSend_registerThermalTimeToThrottleNotification(void *a1, const char *a2, ...)
{
  return [a1 registerThermalTimeToThrottleNotification];
}

id objc_msgSend_registerWebkitStreamingNotification(void *a1, const char *a2, ...)
{
  return [a1 registerWebkitStreamingNotification];
}

id objc_msgSend_registeredWithCellularNetwork(void *a1, const char *a2, ...)
{
  return [a1 registeredWithCellularNetwork];
}

id objc_msgSend_registrationDisplayStatus(void *a1, const char *a2, ...)
{
  return [a1 registrationDisplayStatus];
}

id objc_msgSend_reloadAriDriverSettingsFromPreferences(void *a1, const char *a2, ...)
{
  return [a1 reloadAriDriverSettingsFromPreferences];
}

id objc_msgSend_reloadCellularSpeedTestSettingsFromPreferences(void *a1, const char *a2, ...)
{
  return [a1 reloadCellularSpeedTestSettingsFromPreferences];
}

id objc_msgSend_reloadLogSettingsFromPreferences(void *a1, const char *a2, ...)
{
  return [a1 reloadLogSettingsFromPreferences];
}

id objc_msgSend_reloadiRATSettingsFromPreferences(void *a1, const char *a2, ...)
{
  return [a1 reloadiRATSettingsFromPreferences];
}

id objc_msgSend_removals(void *a1, const char *a2, ...)
{
  return [a1 removals];
}

id objc_msgSend_removeAllFreq(void *a1, const char *a2, ...)
{
  return [a1 removeAllFreq];
}

id objc_msgSend_removeAllMobilityContextsFromList(void *a1, const char *a2, ...)
{
  return [a1 removeAllMobilityContextsFromList];
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return [a1 removeAllObjects];
}

id objc_msgSend_replayCachedEvent(void *a1, const char *a2, ...)
{
  return [a1 replayCachedEvent];
}

id objc_msgSend_reportWiFiError(void *a1, const char *a2, ...)
{
  return [a1 reportWiFiError];
}

id objc_msgSend_reportedChannelCenterFreqMHz(void *a1, const char *a2, ...)
{
  return [a1 reportedChannelCenterFreqMHz];
}

id objc_msgSend_requestBTStatus(void *a1, const char *a2, ...)
{
  return [a1 requestBTStatus];
}

id objc_msgSend_reset(void *a1, const char *a2, ...)
{
  return [a1 reset];
}

id objc_msgSend_reset5GVersusWiFiMetrics(void *a1, const char *a2, ...)
{
  return [a1 reset5GVersusWiFiMetrics];
}

id objc_msgSend_resetActiveCallEvaluationMetrics(void *a1, const char *a2, ...)
{
  return [a1 resetActiveCallEvaluationMetrics];
}

id objc_msgSend_resetBTCoexStatsMetrics(void *a1, const char *a2, ...)
{
  return [a1 resetBTCoexStatsMetrics];
}

id objc_msgSend_resetBtMetrics(void *a1, const char *a2, ...)
{
  return [a1 resetBtMetrics];
}

id objc_msgSend_resetCumulativeCounters(void *a1, const char *a2, ...)
{
  return [a1 resetCumulativeCounters];
}

id objc_msgSend_resetCumulativeIdsMetrics(void *a1, const char *a2, ...)
{
  return [a1 resetCumulativeIdsMetrics];
}

id objc_msgSend_resetCumulativeRTPMetrics(void *a1, const char *a2, ...)
{
  return [a1 resetCumulativeRTPMetrics];
}

id objc_msgSend_resetFaceTimeHandover(void *a1, const char *a2, ...)
{
  return [a1 resetFaceTimeHandover];
}

id objc_msgSend_resetHPCellularCoexStatsMetrics(void *a1, const char *a2, ...)
{
  return [a1 resetHPCellularCoexStatsMetrics];
}

id objc_msgSend_resetIDSMetrics(void *a1, const char *a2, ...)
{
  return [a1 resetIDSMetrics];
}

id objc_msgSend_resetIMSMetrics(void *a1, const char *a2, ...)
{
  return [a1 resetIMSMetrics];
}

id objc_msgSend_resetMovAverageOfSignalBar(void *a1, const char *a2, ...)
{
  return [a1 resetMovAverageOfSignalBar];
}

id objc_msgSend_resetPeriodicRTPStats(void *a1, const char *a2, ...)
{
  return [a1 resetPeriodicRTPStats];
}

id objc_msgSend_resetRTPMetrics(void *a1, const char *a2, ...)
{
  return [a1 resetRTPMetrics];
}

id objc_msgSend_resetStandaloneLinkPreferenceMetrics(void *a1, const char *a2, ...)
{
  return [a1 resetStandaloneLinkPreferenceMetrics];
}

id objc_msgSend_resetStreaming(void *a1, const char *a2, ...)
{
  return [a1 resetStreaming];
}

id objc_msgSend_resetWghtAverageMetricsFlag(void *a1, const char *a2, ...)
{
  return [a1 resetWghtAverageMetricsFlag];
}

id objc_msgSend_resetWiFiBWEstimationState(void *a1, const char *a2, ...)
{
  return [a1 resetWiFiBWEstimationState];
}

id objc_msgSend_resetWiFiCallingEnd(void *a1, const char *a2, ...)
{
  return [a1 resetWiFiCallingEnd];
}

id objc_msgSend_resumeExternalConnection(void *a1, const char *a2, ...)
{
  return [a1 resumeExternalConnection];
}

id objc_msgSend_reverseObjectEnumerator(void *a1, const char *a2, ...)
{
  return [a1 reverseObjectEnumerator];
}

id objc_msgSend_revertFaceTimeThToAzul(void *a1, const char *a2, ...)
{
  return [a1 revertFaceTimeThToAzul];
}

id objc_msgSend_rrcState(void *a1, const char *a2, ...)
{
  return [a1 rrcState];
}

id objc_msgSend_rssiHysterisisRunning(void *a1, const char *a2, ...)
{
  return [a1 rssiHysterisisRunning];
}

id objc_msgSend_rssiHysterisisWalking(void *a1, const char *a2, ...)
{
  return [a1 rssiHysterisisWalking];
}

id objc_msgSend_rtpMetricsEnabled(void *a1, const char *a2, ...)
{
  return [a1 rtpMetricsEnabled];
}

id objc_msgSend_rtpMetricsReportingStarted(void *a1, const char *a2, ...)
{
  return [a1 rtpMetricsReportingStarted];
}

id objc_msgSend_run(void *a1, const char *a2, ...)
{
  return [a1 run];
}

id objc_msgSend_rxPktLoss(void *a1, const char *a2, ...)
{
  return [a1 rxPktLoss];
}

id objc_msgSend_rxPriThreshold(void *a1, const char *a2, ...)
{
  return [a1 rxPriThreshold];
}

id objc_msgSend_rxRtpMetricsSampleCount(void *a1, const char *a2, ...)
{
  return [a1 rxRtpMetricsSampleCount];
}

id objc_msgSend_rxSpeechPktLoss(void *a1, const char *a2, ...)
{
  return [a1 rxSpeechPktLoss];
}

id objc_msgSend_sacManager(void *a1, const char *a2, ...)
{
  return [a1 sacManager];
}

id objc_msgSend_sacRemoveAllGnssFreq(void *a1, const char *a2, ...)
{
  return [a1 sacRemoveAllGnssFreq];
}

id objc_msgSend_sacRemoveAllWifiFreq(void *a1, const char *a2, ...)
{
  return [a1 sacRemoveAllWifiFreq];
}

id objc_msgSend_sacWifiFrequency(void *a1, const char *a2, ...)
{
  return [a1 sacWifiFrequency];
}

id objc_msgSend_seekToEndOfFile(void *a1, const char *a2, ...)
{
  return [a1 seekToEndOfFile];
}

id objc_msgSend_sendBTStatusToWiFi(void *a1, const char *a2, ...)
{
  return [a1 sendBTStatusToWiFi];
}

id objc_msgSend_sendFaceIDPowerTables(void *a1, const char *a2, ...)
{
  return [a1 sendFaceIDPowerTables];
}

id objc_msgSend_sendGetBandSwitchStatusToWiFi(void *a1, const char *a2, ...)
{
  return [a1 sendGetBandSwitchStatusToWiFi];
}

id objc_msgSend_sendGetChannelQualityInfoToWiFi(void *a1, const char *a2, ...)
{
  return [a1 sendGetChannelQualityInfoToWiFi];
}

id objc_msgSend_sendGetNanPhsStateToWiFi(void *a1, const char *a2, ...)
{
  return [a1 sendGetNanPhsStateToWiFi];
}

id objc_msgSend_sendGetRegulatoryInfoToWiFi(void *a1, const char *a2, ...)
{
  return [a1 sendGetRegulatoryInfoToWiFi];
}

id objc_msgSend_sendMavConfigitems(void *a1, const char *a2, ...)
{
  return [a1 sendMavConfigitems];
}

id objc_msgSend_sendNasConfigSigInfo2Request(void *a1, const char *a2, ...)
{
  return [a1 sendNasConfigSigInfo2Request];
}

id objc_msgSend_sendNasIndicationRegister(void *a1, const char *a2, ...)
{
  return [a1 sendNasIndicationRegister];
}

id objc_msgSend_sendRCU2UpdateMessage(void *a1, const char *a2, ...)
{
  return [a1 sendRCU2UpdateMessage];
}

id objc_msgSend_sendWiFiStatusToBT(void *a1, const char *a2, ...)
{
  return [a1 sendWiFiStatusToBT];
}

id objc_msgSend_servCellECIO(void *a1, const char *a2, ...)
{
  return [a1 servCellECIO];
}

id objc_msgSend_servCellRSCP(void *a1, const char *a2, ...)
{
  return [a1 servCellRSCP];
}

id objc_msgSend_servCellRSRP(void *a1, const char *a2, ...)
{
  return [a1 servCellRSRP];
}

id objc_msgSend_servCellRSRQ(void *a1, const char *a2, ...)
{
  return [a1 servCellRSRQ];
}

id objc_msgSend_servCellRSSI(void *a1, const char *a2, ...)
{
  return [a1 servCellRSSI];
}

id objc_msgSend_servCellRadioTechnologyType(void *a1, const char *a2, ...)
{
  return [a1 servCellRadioTechnologyType];
}

id objc_msgSend_servCellSINR(void *a1, const char *a2, ...)
{
  return [a1 servCellSINR];
}

id objc_msgSend_servCellSNR(void *a1, const char *a2, ...)
{
  return [a1 servCellSNR];
}

id objc_msgSend_serverQueue(void *a1, const char *a2, ...)
{
  return [a1 serverQueue];
}

id objc_msgSend_service(void *a1, const char *a2, ...)
{
  return [a1 service];
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return [a1 set];
}

id objc_msgSend_setAllCriticalCarriers(void *a1, const char *a2, ...)
{
  return [a1 setAllCriticalCarriers];
}

id objc_msgSend_setAllPolicies(void *a1, const char *a2, ...)
{
  return [a1 setAllPolicies];
}

id objc_msgSend_setAntBlockingParams(void *a1, const char *a2, ...)
{
  return [a1 setAntBlockingParams];
}

id objc_msgSend_setChannelsToEnableAssocProtectionModeWiFiEnh(void *a1, const char *a2, ...)
{
  return [a1 setChannelsToEnableAssocProtectionModeWiFiEnh];
}

id objc_msgSend_setClientAntBlockingParams(void *a1, const char *a2, ...)
{
  return [a1 setClientAntBlockingParams];
}

id objc_msgSend_setClientAntBlockingParams22(void *a1, const char *a2, ...)
{
  return [a1 setClientAntBlockingParams22];
}

id objc_msgSend_setCoexOSFeatureFlag(void *a1, const char *a2, ...)
{
  return [a1 setCoexOSFeatureFlag];
}

id objc_msgSend_setCoexPlatformFeatureFlag(void *a1, const char *a2, ...)
{
  return [a1 setCoexPlatformFeatureFlag];
}

id objc_msgSend_setDefaultEvent(void *a1, const char *a2, ...)
{
  return [a1 setDefaultEvent];
}

id objc_msgSend_setHandlerLocationDbInfo(void *a1, const char *a2, ...)
{
  return [a1 setHandlerLocationDbInfo];
}

id objc_msgSend_setHandlerNasSigInfoInd(void *a1, const char *a2, ...)
{
  return [a1 setHandlerNasSigInfoInd];
}

id objc_msgSend_setHandlerNasVoiceLqmInd(void *a1, const char *a2, ...)
{
  return [a1 setHandlerNasVoiceLqmInd];
}

id objc_msgSend_setHandlerSisNrAvailableInfoInd(void *a1, const char *a2, ...)
{
  return [a1 setHandlerSisNrAvailableInfoInd];
}

id objc_msgSend_setLAACoexConfigEnableTxInd(void *a1, const char *a2, ...)
{
  return [a1 setLAACoexConfigEnableTxInd];
}

id objc_msgSend_setLogSettingsToPreferences(void *a1, const char *a2, ...)
{
  return [a1 setLogSettingsToPreferences];
}

id objc_msgSend_setNetworkConfigOfInterest(void *a1, const char *a2, ...)
{
  return [a1 setNetworkConfigOfInterest];
}

id objc_msgSend_setPlatform(void *a1, const char *a2, ...)
{
  return [a1 setPlatform];
}

id objc_msgSend_setSpmiFeature(void *a1, const char *a2, ...)
{
  return [a1 setSpmiFeature];
}

id objc_msgSend_setTxAntMapInHouseBB25A(void *a1, const char *a2, ...)
{
  return [a1 setTxAntMapInHouseBB25A];
}

id objc_msgSend_setWci2TxAntMap(void *a1, const char *a2, ...)
{
  return [a1 setWci2TxAntMap];
}

id objc_msgSend_setWci2TxAntMapBB21(void *a1, const char *a2, ...)
{
  return [a1 setWci2TxAntMapBB21];
}

id objc_msgSend_setWci2TxAntMapBB22(void *a1, const char *a2, ...)
{
  return [a1 setWci2TxAntMapBB22];
}

id objc_msgSend_setWiFiLinkUP(void *a1, const char *a2, ...)
{
  return [a1 setWiFiLinkUP];
}

id objc_msgSend_sharedAccessoryManager(void *a1, const char *a2, ...)
{
  return [a1 sharedAccessoryManager];
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return [a1 sharedInstance];
}

id objc_msgSend_shouldScheduleSpeedTests(void *a1, const char *a2, ...)
{
  return [a1 shouldScheduleSpeedTests];
}

id objc_msgSend_sidPacketsReceived(void *a1, const char *a2, ...)
{
  return [a1 sidPacketsReceived];
}

id objc_msgSend_signalStrength(void *a1, const char *a2, ...)
{
  return [a1 signalStrength];
}

id objc_msgSend_singleton(void *a1, const char *a2, ...)
{
  return [a1 singleton];
}

id objc_msgSend_sipTimeOutDetected(void *a1, const char *a2, ...)
{
  return [a1 sipTimeOutDetected];
}

id objc_msgSend_slotID(void *a1, const char *a2, ...)
{
  return [a1 slotID];
}

id objc_msgSend_snrHysterisisRunning(void *a1, const char *a2, ...)
{
  return [a1 snrHysterisisRunning];
}

id objc_msgSend_snrHysterisisWalking(void *a1, const char *a2, ...)
{
  return [a1 snrHysterisisWalking];
}

id objc_msgSend_sosWaypointRSRPTh(void *a1, const char *a2, ...)
{
  return [a1 sosWaypointRSRPTh];
}

id objc_msgSend_source(void *a1, const char *a2, ...)
{
  return [a1 source];
}

id objc_msgSend_speed(void *a1, const char *a2, ...)
{
  return [a1 speed];
}

id objc_msgSend_stallDetected(void *a1, const char *a2, ...)
{
  return [a1 stallDetected];
}

id objc_msgSend_start(void *a1, const char *a2, ...)
{
  return [a1 start];
}

id objc_msgSend_startHomeKitTimer(void *a1, const char *a2, ...)
{
  return [a1 startHomeKitTimer];
}

id objc_msgSend_startMonitoring(void *a1, const char *a2, ...)
{
  return [a1 startMonitoring];
}

id objc_msgSend_startMonitoringAlarms(void *a1, const char *a2, ...)
{
  return [a1 startMonitoringAlarms];
}

id objc_msgSend_startService(void *a1, const char *a2, ...)
{
  return [a1 startService];
}

id objc_msgSend_startUpdatingLocation(void *a1, const char *a2, ...)
{
  return [a1 startUpdatingLocation];
}

id objc_msgSend_status(void *a1, const char *a2, ...)
{
  return [a1 status];
}

id objc_msgSend_stop(void *a1, const char *a2, ...)
{
  return [a1 stop];
}

id objc_msgSend_stopAllAlarms(void *a1, const char *a2, ...)
{
  return [a1 stopAllAlarms];
}

id objc_msgSend_stopHomeKitTimer(void *a1, const char *a2, ...)
{
  return [a1 stopHomeKitTimer];
}

id objc_msgSend_stopMetadataCollection(void *a1, const char *a2, ...)
{
  return [a1 stopMetadataCollection];
}

id objc_msgSend_stopMonitoring(void *a1, const char *a2, ...)
{
  return [a1 stopMonitoring];
}

id objc_msgSend_stopMonitoringAlarms(void *a1, const char *a2, ...)
{
  return [a1 stopMonitoringAlarms];
}

id objc_msgSend_stopPendingAlarms(void *a1, const char *a2, ...)
{
  return [a1 stopPendingAlarms];
}

id objc_msgSend_stopPeriodicTask(void *a1, const char *a2, ...)
{
  return [a1 stopPeriodicTask];
}

id objc_msgSend_stopUpdatingLocation(void *a1, const char *a2, ...)
{
  return [a1 stopUpdatingLocation];
}

id objc_msgSend_storeURL(void *a1, const char *a2, ...)
{
  return [a1 storeURL];
}

id objc_msgSend_streamStateAoS(void *a1, const char *a2, ...)
{
  return [a1 streamStateAoS];
}

id objc_msgSend_stringValue(void *a1, const char *a2, ...)
{
  return [a1 stringValue];
}

id objc_msgSend_subSelector(void *a1, const char *a2, ...)
{
  return [a1 subSelector];
}

id objc_msgSend_subframeFormat(void *a1, const char *a2, ...)
{
  return [a1 subframeFormat];
}

id objc_msgSend_submitAWDMetricsforNetworkConfiguration(void *a1, const char *a2, ...)
{
  return [a1 submitAWDMetricsforNetworkConfiguration];
}

id objc_msgSend_submitDataLinkPreferenceaMetrics(void *a1, const char *a2, ...)
{
  return [a1 submitDataLinkPreferenceaMetrics];
}

id objc_msgSend_submitMeric5GVersusWiFiLinkMetrics(void *a1, const char *a2, ...)
{
  return [a1 submitMeric5GVersusWiFiLinkMetrics];
}

id objc_msgSend_submitMericStreaming(void *a1, const char *a2, ...)
{
  return [a1 submitMericStreaming];
}

id objc_msgSend_submitMetrics(void *a1, const char *a2, ...)
{
  return [a1 submitMetrics];
}

id objc_msgSend_submitMetricsFaceTimeHandover(void *a1, const char *a2, ...)
{
  return [a1 submitMetricsFaceTimeHandover];
}

id objc_msgSend_submitWiFiVersusCellAWDMetrics(void *a1, const char *a2, ...)
{
  return [a1 submitWiFiVersusCellAWDMetrics];
}

id objc_msgSend_submitWifiAntselPolicyStats(void *a1, const char *a2, ...)
{
  return [a1 submitWifiAntselPolicyStats];
}

id objc_msgSend_subscribeAppStateChangeEvent(void *a1, const char *a2, ...)
{
  return [a1 subscribeAppStateChangeEvent];
}

id objc_msgSend_subscribeForDeviceLockStateInfo(void *a1, const char *a2, ...)
{
  return [a1 subscribeForDeviceLockStateInfo];
}

id objc_msgSend_subscribeForScreenStateInfo(void *a1, const char *a2, ...)
{
  return [a1 subscribeForScreenStateInfo];
}

id objc_msgSend_subscribeToTrial(void *a1, const char *a2, ...)
{
  return [a1 subscribeToTrial];
}

id objc_msgSend_subscriptions(void *a1, const char *a2, ...)
{
  return [a1 subscriptions];
}

id objc_msgSend_suspendExternalConnection(void *a1, const char *a2, ...)
{
  return [a1 suspendExternalConnection];
}

id objc_msgSend_symtompsMetricsEnabled(void *a1, const char *a2, ...)
{
  return [a1 symtompsMetricsEnabled];
}

id objc_msgSend_tcpActiveConnSuccessThreshold(void *a1, const char *a2, ...)
{
  return [a1 tcpActiveConnSuccessThreshold];
}

id objc_msgSend_tcpIdleConnSuccessThreshold(void *a1, const char *a2, ...)
{
  return [a1 tcpIdleConnSuccessThreshold];
}

id objc_msgSend_tcpJitterThreshold(void *a1, const char *a2, ...)
{
  return [a1 tcpJitterThreshold];
}

id objc_msgSend_tcpRttThreshold(void *a1, const char *a2, ...)
{
  return [a1 tcpRttThreshold];
}

id objc_msgSend_tddBand(void *a1, const char *a2, ...)
{
  return [a1 tddBand];
}

id objc_msgSend_tddULDLConfig(void *a1, const char *a2, ...)
{
  return [a1 tddULDLConfig];
}

id objc_msgSend_threadCOEXStatus(void *a1, const char *a2, ...)
{
  return [a1 threadCOEXStatus];
}

id objc_msgSend_threadClient(void *a1, const char *a2, ...)
{
  return [a1 threadClient];
}

id objc_msgSend_timeIntervalSince1970(void *a1, const char *a2, ...)
{
  return [a1 timeIntervalSince1970];
}

id objc_msgSend_timeIntervalSinceNow(void *a1, const char *a2, ...)
{
  return [a1 timeIntervalSinceNow];
}

id objc_msgSend_timeIntervalSinceReferenceDate(void *a1, const char *a2, ...)
{
  return [a1 timeIntervalSinceReferenceDate];
}

id objc_msgSend_timestamp(void *a1, const char *a2, ...)
{
  return [a1 timestamp];
}

id objc_msgSend_totalAudioPacketLossRate(void *a1, const char *a2, ...)
{
  return [a1 totalAudioPacketLossRate];
}

id objc_msgSend_totalAudioPacketReceived(void *a1, const char *a2, ...)
{
  return [a1 totalAudioPacketReceived];
}

id objc_msgSend_totalErasures(void *a1, const char *a2, ...)
{
  return [a1 totalErasures];
}

id objc_msgSend_totalPlayBacks(void *a1, const char *a2, ...)
{
  return [a1 totalPlayBacks];
}

id objc_msgSend_totalVideoErasure(void *a1, const char *a2, ...)
{
  return [a1 totalVideoErasure];
}

id objc_msgSend_totalVideoPacketLossRate(void *a1, const char *a2, ...)
{
  return [a1 totalVideoPacketLossRate];
}

id objc_msgSend_totalVideoPacketReceived(void *a1, const char *a2, ...)
{
  return [a1 totalVideoPacketReceived];
}

id objc_msgSend_transportMetricsRateLimitingThreshold(void *a1, const char *a2, ...)
{
  return [a1 transportMetricsRateLimitingThreshold];
}

id objc_msgSend_transportType(void *a1, const char *a2, ...)
{
  return [a1 transportType];
}

id objc_msgSend_treatmentId(void *a1, const char *a2, ...)
{
  return [a1 treatmentId];
}

id objc_msgSend_triggerBWEval(void *a1, const char *a2, ...)
{
  return [a1 triggerBWEval];
}

id objc_msgSend_triggerHarvestDataEval(void *a1, const char *a2, ...)
{
  return [a1 triggerHarvestDataEval];
}

id objc_msgSend_triggerHarvestedCellEval(void *a1, const char *a2, ...)
{
  return [a1 triggerHarvestedCellEval];
}

id objc_msgSend_ulBandwidth(void *a1, const char *a2, ...)
{
  return [a1 ulBandwidth];
}

id objc_msgSend_ulBandwidth2(void *a1, const char *a2, ...)
{
  return [a1 ulBandwidth2];
}

id objc_msgSend_ulBandwidthCellVictim(void *a1, const char *a2, ...)
{
  return [a1 ulBandwidthCellVictim];
}

id objc_msgSend_ulBandwidthWiFiVictim(void *a1, const char *a2, ...)
{
  return [a1 ulBandwidthWiFiVictim];
}

id objc_msgSend_ulCPConfig(void *a1, const char *a2, ...)
{
  return [a1 ulCPConfig];
}

id objc_msgSend_ulCenterFreq(void *a1, const char *a2, ...)
{
  return [a1 ulCenterFreq];
}

id objc_msgSend_ulCenterFreq2(void *a1, const char *a2, ...)
{
  return [a1 ulCenterFreq2];
}

id objc_msgSend_ulCenterFreqCellVictim(void *a1, const char *a2, ...)
{
  return [a1 ulCenterFreqCellVictim];
}

id objc_msgSend_ulCenterFreqWiFiVictim(void *a1, const char *a2, ...)
{
  return [a1 ulCenterFreqWiFiVictim];
}

id objc_msgSend_ulcaPriority(void *a1, const char *a2, ...)
{
  return [a1 ulcaPriority];
}

id objc_msgSend_ulcaPriorityCCWiFi(void *a1, const char *a2, ...)
{
  return [a1 ulcaPriorityCCWiFi];
}

id objc_msgSend_unSubscribeAppStateChangeEvent(void *a1, const char *a2, ...)
{
  return [a1 unSubscribeAppStateChangeEvent];
}

id objc_msgSend_unSubscribeForDeviceLockStateInfo(void *a1, const char *a2, ...)
{
  return [a1 unSubscribeForDeviceLockStateInfo];
}

id objc_msgSend_unSubscribeForScreenStateInfo(void *a1, const char *a2, ...)
{
  return [a1 unSubscribeForScreenStateInfo];
}

id objc_msgSend_uniqueIDOverride(void *a1, const char *a2, ...)
{
  return [a1 uniqueIDOverride];
}

id objc_msgSend_unregisterForLocalNotifications(void *a1, const char *a2, ...)
{
  return [a1 unregisterForLocalNotifications];
}

id objc_msgSend_unregisterWiFiCallbacks(void *a1, const char *a2, ...)
{
  return [a1 unregisterWiFiCallbacks];
}

id objc_msgSend_unsignedCharValue(void *a1, const char *a2, ...)
{
  return [a1 unsignedCharValue];
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return [a1 unsignedIntValue];
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return [a1 unsignedLongLongValue];
}

id objc_msgSend_unsignedLongValue(void *a1, const char *a2, ...)
{
  return [a1 unsignedLongValue];
}

id objc_msgSend_updateActiveHandoverStatus(void *a1, const char *a2, ...)
{
  return [a1 updateActiveHandoverStatus];
}

id objc_msgSend_updateBBState(void *a1, const char *a2, ...)
{
  return [a1 updateBBState];
}

id objc_msgSend_updateBSPState(void *a1, const char *a2, ...)
{
  return [a1 updateBSPState];
}

id objc_msgSend_updateBTLQMScore(void *a1, const char *a2, ...)
{
  return [a1 updateBTLQMScore];
}

id objc_msgSend_updateBTRCU2TimingArray(void *a1, const char *a2, ...)
{
  return [a1 updateBTRCU2TimingArray];
}

id objc_msgSend_updateBasebandPowerState(void *a1, const char *a2, ...)
{
  return [a1 updateBasebandPowerState];
}

id objc_msgSend_updateCTSacDriverRemoveAllFromWifiClient(void *a1, const char *a2, ...)
{
  return [a1 updateCTSacDriverRemoveAllFromWifiClient];
}

id objc_msgSend_updateCTSacDriverWifiInfo(void *a1, const char *a2, ...)
{
  return [a1 updateCTSacDriverWifiInfo];
}

id objc_msgSend_updateCellTxPowerLimit(void *a1, const char *a2, ...)
{
  return [a1 updateCellTxPowerLimit];
}

id objc_msgSend_updateCellularMetricsMovAverage(void *a1, const char *a2, ...)
{
  return [a1 updateCellularMetricsMovAverage];
}

id objc_msgSend_updateCellularR1CoexBandStatus(void *a1, const char *a2, ...)
{
  return [a1 updateCellularR1CoexBandStatus];
}

id objc_msgSend_updateDevicePairingState(void *a1, const char *a2, ...)
{
  return [a1 updateDevicePairingState];
}

id objc_msgSend_updateFrequencyBandForBT(void *a1, const char *a2, ...)
{
  return [a1 updateFrequencyBandForBT];
}

id objc_msgSend_updateFwTxPer(void *a1, const char *a2, ...)
{
  return [a1 updateFwTxPer];
}

id objc_msgSend_updateGen9rFemConfiguration(void *a1, const char *a2, ...)
{
  return [a1 updateGen9rFemConfiguration];
}

id objc_msgSend_updateGpsbandsInfoForBB(void *a1, const char *a2, ...)
{
  return [a1 updateGpsbandsInfoForBB];
}

id objc_msgSend_updateGpsbandsInfoForBBv2(void *a1, const char *a2, ...)
{
  return [a1 updateGpsbandsInfoForBBv2];
}

id objc_msgSend_updateHPCellularMetric(void *a1, const char *a2, ...)
{
  return [a1 updateHPCellularMetric];
}

id objc_msgSend_updateLQMReceived(void *a1, const char *a2, ...)
{
  return [a1 updateLQMReceived];
}

id objc_msgSend_updateMWSSignalingConfig(void *a1, const char *a2, ...)
{
  return [a1 updateMWSSignalingConfig];
}

id objc_msgSend_updatePencilCoexActivationCondition(void *a1, const char *a2, ...)
{
  return [a1 updatePencilCoexActivationCondition];
}

id objc_msgSend_updatePowerOnGen9rFemConfiguration(void *a1, const char *a2, ...)
{
  return [a1 updatePowerOnGen9rFemConfiguration];
}

id objc_msgSend_updatePrevTimeStamp(void *a1, const char *a2, ...)
{
  return [a1 updatePrevTimeStamp];
}

id objc_msgSend_updateRxBeaconPer(void *a1, const char *a2, ...)
{
  return [a1 updateRxBeaconPer];
}

id objc_msgSend_updateRxRatio(void *a1, const char *a2, ...)
{
  return [a1 updateRxRatio];
}

id objc_msgSend_updateSlotInfoCTServie(void *a1, const char *a2, ...)
{
  return [a1 updateSlotInfoCTServie];
}

id objc_msgSend_updateTreatment(void *a1, const char *a2, ...)
{
  return [a1 updateTreatment];
}

id objc_msgSend_updateTxPer(void *a1, const char *a2, ...)
{
  return [a1 updateTxPer];
}

id objc_msgSend_updateWiFiBTConnectionReport(void *a1, const char *a2, ...)
{
  return [a1 updateWiFiBTConnectionReport];
}

id objc_msgSend_updateWiFiChannelForConditionalMitigation(void *a1, const char *a2, ...)
{
  return [a1 updateWiFiChannelForConditionalMitigation];
}

id objc_msgSend_updateWiFiCoexState(void *a1, const char *a2, ...)
{
  return [a1 updateWiFiCoexState];
}

id objc_msgSend_updateWiFiRCU1ModeChange(void *a1, const char *a2, ...)
{
  return [a1 updateWiFiRCU1ModeChange];
}

id objc_msgSend_updateWiFiRCU1Status(void *a1, const char *a2, ...)
{
  return [a1 updateWiFiRCU1Status];
}

id objc_msgSend_updateWiFiRCU1ULOFDMAStatus(void *a1, const char *a2, ...)
{
  return [a1 updateWiFiRCU1ULOFDMAStatus];
}

id objc_msgSend_updateWiFiRCU2CoexMode(void *a1, const char *a2, ...)
{
  return [a1 updateWiFiRCU2CoexMode];
}

id objc_msgSend_updateWiFiRCU2CoexParams(void *a1, const char *a2, ...)
{
  return [a1 updateWiFiRCU2CoexParams];
}

id objc_msgSend_updateWiFiRCU2PMProtectionMode(void *a1, const char *a2, ...)
{
  return [a1 updateWiFiRCU2PMProtectionMode];
}

id objc_msgSend_updateWiFiRCU2TimingArray(void *a1, const char *a2, ...)
{
  return [a1 updateWiFiRCU2TimingArray];
}

id objc_msgSend_updateWifiEnvelopeParams(void *a1, const char *a2, ...)
{
  return [a1 updateWifiEnvelopeParams];
}

id objc_msgSend_updateWifiOCLChannelList(void *a1, const char *a2, ...)
{
  return [a1 updateWifiOCLChannelList];
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return [a1 userInfo];
}

id objc_msgSend_uuid(void *a1, const char *a2, ...)
{
  return [a1 uuid];
}

id objc_msgSend_videoErasureSupported(void *a1, const char *a2, ...)
{
  return [a1 videoErasureSupported];
}

id objc_msgSend_videoPacketExpected(void *a1, const char *a2, ...)
{
  return [a1 videoPacketExpected];
}

id objc_msgSend_viewContext(void *a1, const char *a2, ...)
{
  return [a1 viewContext];
}

id objc_msgSend_watchAntPref(void *a1, const char *a2, ...)
{
  return [a1 watchAntPref];
}

id objc_msgSend_watchAntPrefBand(void *a1, const char *a2, ...)
{
  return [a1 watchAntPrefBand];
}

id objc_msgSend_watchCellularAntPref(void *a1, const char *a2, ...)
{
  return [a1 watchCellularAntPref];
}

id objc_msgSend_wci2CoexPolicyBitmap(void *a1, const char *a2, ...)
{
  return [a1 wci2CoexPolicyBitmap];
}

id objc_msgSend_wci2TxPowerLimit(void *a1, const char *a2, ...)
{
  return [a1 wci2TxPowerLimit];
}

id objc_msgSend_wcmBTAFHMapDefault(void *a1, const char *a2, ...)
{
  return [a1 wcmBTAFHMapDefault];
}

id objc_msgSend_wcmBTAntBlockDuration(void *a1, const char *a2, ...)
{
  return [a1 wcmBTAntBlockDuration];
}

id objc_msgSend_wcmBTAntBlockEnableBandsDefault(void *a1, const char *a2, ...)
{
  return [a1 wcmBTAntBlockEnableBandsDefault];
}

id objc_msgSend_wcmBTAntennaConfig(void *a1, const char *a2, ...)
{
  return [a1 wcmBTAntennaConfig];
}

id objc_msgSend_wcmBTAntennaConfigNonCoex(void *a1, const char *a2, ...)
{
  return [a1 wcmBTAntennaConfigNonCoex];
}

id objc_msgSend_wcmBTB40AAFHMap(void *a1, const char *a2, ...)
{
  return [a1 wcmBTB40AAFHMap];
}

id objc_msgSend_wcmBTB40BAFHMap(void *a1, const char *a2, ...)
{
  return [a1 wcmBTB40BAFHMap];
}

id objc_msgSend_wcmBTB41A1AFHMap(void *a1, const char *a2, ...)
{
  return [a1 wcmBTB41A1AFHMap];
}

id objc_msgSend_wcmBTB41A2AFHMap(void *a1, const char *a2, ...)
{
  return [a1 wcmBTB41A2AFHMap];
}

id objc_msgSend_wcmBTB7AFHMap(void *a1, const char *a2, ...)
{
  return [a1 wcmBTB7AFHMap];
}

id objc_msgSend_wcmBTDefaultAntenna(void *a1, const char *a2, ...)
{
  return [a1 wcmBTDefaultAntenna];
}

id objc_msgSend_wcmBTDefaultAntennaNonCoex(void *a1, const char *a2, ...)
{
  return [a1 wcmBTDefaultAntennaNonCoex];
}

id objc_msgSend_wcmBTMaxNumberOfChannelsToAvoidForCellOOB(void *a1, const char *a2, ...)
{
  return [a1 wcmBTMaxNumberOfChannelsToAvoidForCellOOB];
}

id objc_msgSend_wcmBTPreferredRole(void *a1, const char *a2, ...)
{
  return [a1 wcmBTPreferredRole];
}

id objc_msgSend_wcmBTSupportTDDFrameConfig(void *a1, const char *a2, ...)
{
  return [a1 wcmBTSupportTDDFrameConfig];
}

id objc_msgSend_wcmBTWCI2ModeRecvMsgBitmap(void *a1, const char *a2, ...)
{
  return [a1 wcmBTWCI2ModeRecvMsgBitmap];
}

id objc_msgSend_wcmBTWCI2ModeSendMsgBitmap(void *a1, const char *a2, ...)
{
  return [a1 wcmBTWCI2ModeSendMsgBitmap];
}

id objc_msgSend_wcmCellRc1CoexIssueTable(void *a1, const char *a2, ...)
{
  return [a1 wcmCellRc1CoexIssueTable];
}

id objc_msgSend_wcmCellularCCSetToBB(void *a1, const char *a2, ...)
{
  return [a1 wcmCellularCCSetToBB];
}

id objc_msgSend_wcmCellularCoexB40ARange(void *a1, const char *a2, ...)
{
  return [a1 wcmCellularCoexB40ARange];
}

id objc_msgSend_wcmCellularCoexB40BRange(void *a1, const char *a2, ...)
{
  return [a1 wcmCellularCoexB40BRange];
}

id objc_msgSend_wcmCellularCoexB41A1Range(void *a1, const char *a2, ...)
{
  return [a1 wcmCellularCoexB41A1Range];
}

id objc_msgSend_wcmCellularCoexB41A2Range(void *a1, const char *a2, ...)
{
  return [a1 wcmCellularCoexB41A2Range];
}

id objc_msgSend_wcmCellularCoexB7DLRange(void *a1, const char *a2, ...)
{
  return [a1 wcmCellularCoexB7DLRange];
}

id objc_msgSend_wcmCellularCoexB7ULRange(void *a1, const char *a2, ...)
{
  return [a1 wcmCellularCoexB7ULRange];
}

id objc_msgSend_wcmCellularCoexBand(void *a1, const char *a2, ...)
{
  return [a1 wcmCellularCoexBand];
}

id objc_msgSend_wcmCellularLAACoexDeactStopTimer(void *a1, const char *a2, ...)
{
  return [a1 wcmCellularLAACoexDeactStopTimer];
}

id objc_msgSend_wcmCellularLAACoexDeactTimer(void *a1, const char *a2, ...)
{
  return [a1 wcmCellularLAACoexDeactTimer];
}

id objc_msgSend_wcmCellularLAACoexProtectCQIPeriod(void *a1, const char *a2, ...)
{
  return [a1 wcmCellularLAACoexProtectCQIPeriod];
}

id objc_msgSend_wcmCellularLAACoexThresholdIn(void *a1, const char *a2, ...)
{
  return [a1 wcmCellularLAACoexThresholdIn];
}

id objc_msgSend_wcmCellularLAACoexThresholdOut(void *a1, const char *a2, ...)
{
  return [a1 wcmCellularLAACoexThresholdOut];
}

id objc_msgSend_wcmCellularScanProtectionCellFrequencies(void *a1, const char *a2, ...)
{
  return [a1 wcmCellularScanProtectionCellFrequencies];
}

id objc_msgSend_wcmCellularScanProtectionCellFrequenciesforBT(void *a1, const char *a2, ...)
{
  return [a1 wcmCellularScanProtectionCellFrequenciesforBT];
}

id objc_msgSend_wcmCellularScanProtectionWiFiChannels(void *a1, const char *a2, ...)
{
  return [a1 wcmCellularScanProtectionWiFiChannels];
}

id objc_msgSend_wcmCellularScanProtectionWiFiChannelsWiFiEnh(void *a1, const char *a2, ...)
{
  return [a1 wcmCellularScanProtectionWiFiChannelsWiFiEnh];
}

id objc_msgSend_wcmCellularScanProtectionWiFiMaxDuration(void *a1, const char *a2, ...)
{
  return [a1 wcmCellularScanProtectionWiFiMaxDuration];
}

id objc_msgSend_wcmCellularWCI2ModeAPTTable(void *a1, const char *a2, ...)
{
  return [a1 wcmCellularWCI2ModeAPTTable];
}

id objc_msgSend_wcmCellularWCI2ModeControllerLTEPowerLimitingEnable(void *a1, const char *a2, ...)
{
  return [a1 wcmCellularWCI2ModeControllerLTEPowerLimitingEnable];
}

id objc_msgSend_wcmCellularWCI2ModeControllerLTERBThreshold(void *a1, const char *a2, ...)
{
  return [a1 wcmCellularWCI2ModeControllerLTERBThreshold];
}

id objc_msgSend_wcmCellularWCI2ModeControllerTxPowerLimitTO(void *a1, const char *a2, ...)
{
  return [a1 wcmCellularWCI2ModeControllerTxPowerLimitTO];
}

id objc_msgSend_wcmCellularWCI2ModeFrameDenialWindow(void *a1, const char *a2, ...)
{
  return [a1 wcmCellularWCI2ModeFrameDenialWindow];
}

id objc_msgSend_wcmCellularWCI2ModeLTEHarqnackratioThreshold(void *a1, const char *a2, ...)
{
  return [a1 wcmCellularWCI2ModeLTEHarqnackratioThreshold];
}

id objc_msgSend_wcmCellularWCI2ModeLTEMaxTxPowerHigh(void *a1, const char *a2, ...)
{
  return [a1 wcmCellularWCI2ModeLTEMaxTxPowerHigh];
}

id objc_msgSend_wcmCellularWCI2ModeLTEMaxTxPowerLow(void *a1, const char *a2, ...)
{
  return [a1 wcmCellularWCI2ModeLTEMaxTxPowerLow];
}

id objc_msgSend_wcmCellularWCI2ModeLTETxDenial(void *a1, const char *a2, ...)
{
  return [a1 wcmCellularWCI2ModeLTETxDenial];
}

id objc_msgSend_wcmCellularWCI2ModeLinkPathLossThreshold(void *a1, const char *a2, ...)
{
  return [a1 wcmCellularWCI2ModeLinkPathLossThreshold];
}

id objc_msgSend_wcmCellularWCI2ModeMaxAllowedFrameDenials(void *a1, const char *a2, ...)
{
  return [a1 wcmCellularWCI2ModeMaxAllowedFrameDenials];
}

id objc_msgSend_wcmCellularWCI2ModePolicy(void *a1, const char *a2, ...)
{
  return [a1 wcmCellularWCI2ModePolicy];
}

id objc_msgSend_wcmCellularWCI2ModePowerThreshold(void *a1, const char *a2, ...)
{
  return [a1 wcmCellularWCI2ModePowerThreshold];
}

id objc_msgSend_wcmCellularWCI2ModeRBFilerAlpha(void *a1, const char *a2, ...)
{
  return [a1 wcmCellularWCI2ModeRBFilerAlpha];
}

id objc_msgSend_wcmCellularWCI2ModeRBThresholdAdvTx(void *a1, const char *a2, ...)
{
  return [a1 wcmCellularWCI2ModeRBThresholdAdvTx];
}

id objc_msgSend_wcmCellularWCI2ModeRBThresholdHigh(void *a1, const char *a2, ...)
{
  return [a1 wcmCellularWCI2ModeRBThresholdHigh];
}

id objc_msgSend_wcmCellularWCI2ModeRBThresholdLow(void *a1, const char *a2, ...)
{
  return [a1 wcmCellularWCI2ModeRBThresholdLow];
}

id objc_msgSend_wcmCellularWCI2ModeTxPowerThresholdAdvTx(void *a1, const char *a2, ...)
{
  return [a1 wcmCellularWCI2ModeTxPowerThresholdAdvTx];
}

id objc_msgSend_wcmCellularWCI2ModeWCI2PowerLimitTO(void *a1, const char *a2, ...)
{
  return [a1 wcmCellularWCI2ModeWCI2PowerLimitTO];
}

id objc_msgSend_wcmCellularWCI2PlatformPolicyBitmap(void *a1, const char *a2, ...)
{
  return [a1 wcmCellularWCI2PlatformPolicyBitmap];
}

id objc_msgSend_wcmCoexFeatures(void *a1, const char *a2, ...)
{
  return [a1 wcmCoexFeatures];
}

id objc_msgSend_wcmGen9rFemDefaultMode2gWiFiCellularbands(void *a1, const char *a2, ...)
{
  return [a1 wcmGen9rFemDefaultMode2gWiFiCellularbands];
}

id objc_msgSend_wcmGen9rFemDefaultMode5gWiFiCellularbands(void *a1, const char *a2, ...)
{
  return [a1 wcmGen9rFemDefaultMode5gWiFiCellularbands];
}

id objc_msgSend_wcmGen9rFemLpmMode2g(void *a1, const char *a2, ...)
{
  return [a1 wcmGen9rFemLpmMode2g];
}

id objc_msgSend_wcmGen9rFemLpmMode5g(void *a1, const char *a2, ...)
{
  return [a1 wcmGen9rFemLpmMode5g];
}

id objc_msgSend_wcmHFBTChannelMapDefault(void *a1, const char *a2, ...)
{
  return [a1 wcmHFBTChannelMapDefault];
}

id objc_msgSend_wcmHPCellularBTAFHMapFixed(void *a1, const char *a2, ...)
{
  return [a1 wcmHPCellularBTAFHMapFixed];
}

id objc_msgSend_wcmWCI2FrameSyncAssertJitter(void *a1, const char *a2, ...)
{
  return [a1 wcmWCI2FrameSyncAssertJitter];
}

id objc_msgSend_wcmWCI2FrameSyncAssertOffset(void *a1, const char *a2, ...)
{
  return [a1 wcmWCI2FrameSyncAssertOffset];
}

id objc_msgSend_wcmWCI2MWSInactivityAssertJitter(void *a1, const char *a2, ...)
{
  return [a1 wcmWCI2MWSInactivityAssertJitter];
}

id objc_msgSend_wcmWCI2MWSInactivityAssertOffset(void *a1, const char *a2, ...)
{
  return [a1 wcmWCI2MWSInactivityAssertOffset];
}

id objc_msgSend_wcmWCI2MWSPatternAssertJitter(void *a1, const char *a2, ...)
{
  return [a1 wcmWCI2MWSPatternAssertJitter];
}

id objc_msgSend_wcmWCI2MWSPatternAssertOffset(void *a1, const char *a2, ...)
{
  return [a1 wcmWCI2MWSPatternAssertOffset];
}

id objc_msgSend_wcmWCI2MWSPriorityAssertOffsetRequest(void *a1, const char *a2, ...)
{
  return [a1 wcmWCI2MWSPriorityAssertOffsetRequest];
}

id objc_msgSend_wcmWCI2MWSRxAssertJitter(void *a1, const char *a2, ...)
{
  return [a1 wcmWCI2MWSRxAssertJitter];
}

id objc_msgSend_wcmWCI2MWSRxAssertOffset(void *a1, const char *a2, ...)
{
  return [a1 wcmWCI2MWSRxAssertOffset];
}

id objc_msgSend_wcmWCI2MWSRxDeAssertJitter(void *a1, const char *a2, ...)
{
  return [a1 wcmWCI2MWSRxDeAssertJitter];
}

id objc_msgSend_wcmWCI2MWSRxDeAssertOffset(void *a1, const char *a2, ...)
{
  return [a1 wcmWCI2MWSRxDeAssertOffset];
}

id objc_msgSend_wcmWCI2MWSScanFrequencyAssertJitter(void *a1, const char *a2, ...)
{
  return [a1 wcmWCI2MWSScanFrequencyAssertJitter];
}

id objc_msgSend_wcmWCI2MWSScanFrequencyAssertOffset(void *a1, const char *a2, ...)
{
  return [a1 wcmWCI2MWSScanFrequencyAssertOffset];
}

id objc_msgSend_wcmWCI2MWSTxAssertJitter(void *a1, const char *a2, ...)
{
  return [a1 wcmWCI2MWSTxAssertJitter];
}

id objc_msgSend_wcmWCI2MWSTxAssertOffset(void *a1, const char *a2, ...)
{
  return [a1 wcmWCI2MWSTxAssertOffset];
}

id objc_msgSend_wcmWCI2MWSTxDeAssertJitter(void *a1, const char *a2, ...)
{
  return [a1 wcmWCI2MWSTxDeAssertJitter];
}

id objc_msgSend_wcmWCI2MWSTxDeAssertOffset(void *a1, const char *a2, ...)
{
  return [a1 wcmWCI2MWSTxDeAssertOffset];
}

id objc_msgSend_wcmWiFiActiveDwellTime(void *a1, const char *a2, ...)
{
  return [a1 wcmWiFiActiveDwellTime];
}

id objc_msgSend_wcmWiFiActiveScanThrottleMask(void *a1, const char *a2, ...)
{
  return [a1 wcmWiFiActiveScanThrottleMask];
}

id objc_msgSend_wcmWiFiAntennaCellPolicy(void *a1, const char *a2, ...)
{
  return [a1 wcmWiFiAntennaCellPolicy];
}

id objc_msgSend_wcmWiFiAntennaCellPolicyDefault(void *a1, const char *a2, ...)
{
  return [a1 wcmWiFiAntennaCellPolicyDefault];
}

id objc_msgSend_wcmWiFiAntennaConfig(void *a1, const char *a2, ...)
{
  return [a1 wcmWiFiAntennaConfig];
}

id objc_msgSend_wcmWiFiAntennaConfigDefault(void *a1, const char *a2, ...)
{
  return [a1 wcmWiFiAntennaConfigDefault];
}

id objc_msgSend_wcmWiFiB40ABlocklistChannels(void *a1, const char *a2, ...)
{
  return [a1 wcmWiFiB40ABlocklistChannels];
}

id objc_msgSend_wcmWiFiB40AWCI2EnabledChannels(void *a1, const char *a2, ...)
{
  return [a1 wcmWiFiB40AWCI2EnabledChannels];
}

id objc_msgSend_wcmWiFiB40BBlocklistChannels(void *a1, const char *a2, ...)
{
  return [a1 wcmWiFiB40BBlocklistChannels];
}

id objc_msgSend_wcmWiFiB40BWCI2EnabledChannels(void *a1, const char *a2, ...)
{
  return [a1 wcmWiFiB40BWCI2EnabledChannels];
}

id objc_msgSend_wcmWiFiB41A1BlocklistChannels(void *a1, const char *a2, ...)
{
  return [a1 wcmWiFiB41A1BlocklistChannels];
}

id objc_msgSend_wcmWiFiB41A1WCI2EnabledChannels(void *a1, const char *a2, ...)
{
  return [a1 wcmWiFiB41A1WCI2EnabledChannels];
}

id objc_msgSend_wcmWiFiB41A2BlocklistChannels(void *a1, const char *a2, ...)
{
  return [a1 wcmWiFiB41A2BlocklistChannels];
}

id objc_msgSend_wcmWiFiB41A2WCI2EnabledChannels(void *a1, const char *a2, ...)
{
  return [a1 wcmWiFiB41A2WCI2EnabledChannels];
}

id objc_msgSend_wcmWiFiB7BlocklistChannels(void *a1, const char *a2, ...)
{
  return [a1 wcmWiFiB7BlocklistChannels];
}

id objc_msgSend_wcmWiFiB7WCI2EnabledChannels(void *a1, const char *a2, ...)
{
  return [a1 wcmWiFiB7WCI2EnabledChannels];
}

id objc_msgSend_wcmWiFiBTCoexProfileDefault(void *a1, const char *a2, ...)
{
  return [a1 wcmWiFiBTCoexProfileDefault];
}

id objc_msgSend_wcmWiFiBTCoexProfileDefault5G(void *a1, const char *a2, ...)
{
  return [a1 wcmWiFiBTCoexProfileDefault5G];
}

id objc_msgSend_wcmWiFiBTCoexProfileHeavyA2DP(void *a1, const char *a2, ...)
{
  return [a1 wcmWiFiBTCoexProfileHeavyA2DP];
}

id objc_msgSend_wcmWiFiBTCoexProfileHeavyHFP(void *a1, const char *a2, ...)
{
  return [a1 wcmWiFiBTCoexProfileHeavyHFP];
}

id objc_msgSend_wcmWiFiBTCoexProfileLight(void *a1, const char *a2, ...)
{
  return [a1 wcmWiFiBTCoexProfileLight];
}

id objc_msgSend_wcmWiFiBTCoexProfileTDD(void *a1, const char *a2, ...)
{
  return [a1 wcmWiFiBTCoexProfileTDD];
}

id objc_msgSend_wcmWiFiCellCoexIssueTable(void *a1, const char *a2, ...)
{
  return [a1 wcmWiFiCellCoexIssueTable];
}

id objc_msgSend_wcmWiFiEnvelopeIndicationTimer(void *a1, const char *a2, ...)
{
  return [a1 wcmWiFiEnvelopeIndicationTimer];
}

id objc_msgSend_wcmWiFiEnvelopeOnIndication(void *a1, const char *a2, ...)
{
  return [a1 wcmWiFiEnvelopeOnIndication];
}

id objc_msgSend_wcmWiFiPriThresholdHigh(void *a1, const char *a2, ...)
{
  return [a1 wcmWiFiPriThresholdHigh];
}

id objc_msgSend_wcmWiFiPriThresholdLow(void *a1, const char *a2, ...)
{
  return [a1 wcmWiFiPriThresholdLow];
}

id objc_msgSend_wcmWiFiPriThresholdMed(void *a1, const char *a2, ...)
{
  return [a1 wcmWiFiPriThresholdMed];
}

id objc_msgSend_wcmWiFiRxProtectMode(void *a1, const char *a2, ...)
{
  return [a1 wcmWiFiRxProtectMode];
}

id objc_msgSend_wcmWiFiScanJoinProtectDuration(void *a1, const char *a2, ...)
{
  return [a1 wcmWiFiScanJoinProtectDuration];
}

id objc_msgSend_wcmWiFiScanThrottlingChannelIndices(void *a1, const char *a2, ...)
{
  return [a1 wcmWiFiScanThrottlingChannelIndices];
}

id objc_msgSend_wcmWiFiSupportFrameConfig(void *a1, const char *a2, ...)
{
  return [a1 wcmWiFiSupportFrameConfig];
}

id objc_msgSend_wcmWiFiSupportWciSignalingConfig(void *a1, const char *a2, ...)
{
  return [a1 wcmWiFiSupportWciSignalingConfig];
}

id objc_msgSend_wcmWiFiTxOnIndication(void *a1, const char *a2, ...)
{
  return [a1 wcmWiFiTxOnIndication];
}

id objc_msgSend_wcmWiFiWCI2TxDurationThresh(void *a1, const char *a2, ...)
{
  return [a1 wcmWiFiWCI2TxDurationThresh];
}

id objc_msgSend_wifi2G5GChannelsToEnableType7MSG(void *a1, const char *a2, ...)
{
  return [a1 wifi2G5GChannelsToEnableType7MSG];
}

id objc_msgSend_wifi2GHzChannelsToEnableType7MSGCombined(void *a1, const char *a2, ...)
{
  return [a1 wifi2GHzChannelsToEnableType7MSGCombined];
}

id objc_msgSend_wifi2GHzLTEB7IMD3ChannelsEnableType7(void *a1, const char *a2, ...)
{
  return [a1 wifi2GHzLTEB7IMD3ChannelsEnableType7];
}

id objc_msgSend_wifi5GHzChannelsToEnableType7MSG(void *a1, const char *a2, ...)
{
  return [a1 wifi5GHzChannelsToEnableType7MSG];
}

id objc_msgSend_wifi5GHzChannelsToEnableType7MSGCombined(void *a1, const char *a2, ...)
{
  return [a1 wifi5GHzChannelsToEnableType7MSGCombined];
}

id objc_msgSend_wifiAgcCoexModeLevel(void *a1, const char *a2, ...)
{
  return [a1 wifiAgcCoexModeLevel];
}

id objc_msgSend_wifiAgcModeEnable(void *a1, const char *a2, ...)
{
  return [a1 wifiAgcModeEnable];
}

id objc_msgSend_wifiAntselPolicyStatsArray(void *a1, const char *a2, ...)
{
  return [a1 wifiAntselPolicyStatsArray];
}

id objc_msgSend_wifiBTCoexProfilesDownloaded(void *a1, const char *a2, ...)
{
  return [a1 wifiBTCoexProfilesDownloaded];
}

id objc_msgSend_wifiBandwidthMHz(void *a1, const char *a2, ...)
{
  return [a1 wifiBandwidthMHz];
}

id objc_msgSend_wifiBtAgcCoexModeEnable(void *a1, const char *a2, ...)
{
  return [a1 wifiBtAgcCoexModeEnable];
}

id objc_msgSend_wifiCBRSCellFound(void *a1, const char *a2, ...)
{
  return [a1 wifiCBRSCellFound];
}

id objc_msgSend_wifiCenterFreqMHz(void *a1, const char *a2, ...)
{
  return [a1 wifiCenterFreqMHz];
}

id objc_msgSend_wifiChannel(void *a1, const char *a2, ...)
{
  return [a1 wifiChannel];
}

id objc_msgSend_wifiChannelsToApplyCellAntBlocking(void *a1, const char *a2, ...)
{
  return [a1 wifiChannelsToApplyCellAntBlocking];
}

id objc_msgSend_wifiChannelsToBlocklist(void *a1, const char *a2, ...)
{
  return [a1 wifiChannelsToBlocklist];
}

id objc_msgSend_wifiChannelsToDisableOCL(void *a1, const char *a2, ...)
{
  return [a1 wifiChannelsToDisableOCL];
}

id objc_msgSend_wifiChannelsToDisableOCL2G5G(void *a1, const char *a2, ...)
{
  return [a1 wifiChannelsToDisableOCL2G5G];
}

id objc_msgSend_wifiChannelsToDisableOCLEnh(void *a1, const char *a2, ...)
{
  return [a1 wifiChannelsToDisableOCLEnh];
}

id objc_msgSend_wifiChannelsToEnableLTEMBType7(void *a1, const char *a2, ...)
{
  return [a1 wifiChannelsToEnableLTEMBType7];
}

id objc_msgSend_wifiChannelsToEnableWCI2(void *a1, const char *a2, ...)
{
  return [a1 wifiChannelsToEnableWCI2];
}

id objc_msgSend_wifiChannelsToEnableWCI2Gand5G(void *a1, const char *a2, ...)
{
  return [a1 wifiChannelsToEnableWCI2Gand5G];
}

id objc_msgSend_wifiChannelsToEnableWCI2V2(void *a1, const char *a2, ...)
{
  return [a1 wifiChannelsToEnableWCI2V2];
}

id objc_msgSend_wifiChannelsToEnableWCI2WiFiEnh(void *a1, const char *a2, ...)
{
  return [a1 wifiChannelsToEnableWCI2WiFiEnh];
}

id objc_msgSend_wifiController(void *a1, const char *a2, ...)
{
  return [a1 wifiController];
}

id objc_msgSend_wifiDlAntennaBitmapOnCellAntBitmap000(void *a1, const char *a2, ...)
{
  return [a1 wifiDlAntennaBitmapOnCellAntBitmap000];
}

id objc_msgSend_wifiDlAntennaBitmapOnCellAntBitmap001(void *a1, const char *a2, ...)
{
  return [a1 wifiDlAntennaBitmapOnCellAntBitmap001];
}

id objc_msgSend_wifiDlAntennaBitmapOnCellAntBitmap010(void *a1, const char *a2, ...)
{
  return [a1 wifiDlAntennaBitmapOnCellAntBitmap010];
}

id objc_msgSend_wifiDlAntennaBitmapOnCellAntBitmap011(void *a1, const char *a2, ...)
{
  return [a1 wifiDlAntennaBitmapOnCellAntBitmap011];
}

id objc_msgSend_wifiDlAntennaBitmapOnCellAntBitmap100(void *a1, const char *a2, ...)
{
  return [a1 wifiDlAntennaBitmapOnCellAntBitmap100];
}

id objc_msgSend_wifiDlAntennaBitmapOnCellAntBitmap101(void *a1, const char *a2, ...)
{
  return [a1 wifiDlAntennaBitmapOnCellAntBitmap101];
}

id objc_msgSend_wifiDlAntennaBitmapOnCellAntBitmap110(void *a1, const char *a2, ...)
{
  return [a1 wifiDlAntennaBitmapOnCellAntBitmap110];
}

id objc_msgSend_wifiDlAntennaBitmapOnCellAntBitmap111(void *a1, const char *a2, ...)
{
  return [a1 wifiDlAntennaBitmapOnCellAntBitmap111];
}

id objc_msgSend_wifiDlAntennaBitmapOnCellLAT(void *a1, const char *a2, ...)
{
  return [a1 wifiDlAntennaBitmapOnCellLAT];
}

id objc_msgSend_wifiDlAntennaBitmapOnCellUAT(void *a1, const char *a2, ...)
{
  return [a1 wifiDlAntennaBitmapOnCellUAT];
}

id objc_msgSend_wifiEnhChannelsToEnableType7MSG(void *a1, const char *a2, ...)
{
  return [a1 wifiEnhChannelsToEnableType7MSG];
}

id objc_msgSend_wifiMetricsEnabled(void *a1, const char *a2, ...)
{
  return [a1 wifiMetricsEnabled];
}

id objc_msgSend_wifiNRCellFound(void *a1, const char *a2, ...)
{
  return [a1 wifiNRCellFound];
}

id objc_msgSend_wifiRSSI(void *a1, const char *a2, ...)
{
  return [a1 wifiRSSI];
}

id objc_msgSend_wifiRxPriThreshold(void *a1, const char *a2, ...)
{
  return [a1 wifiRxPriThreshold];
}

id objc_msgSend_wifiSNR(void *a1, const char *a2, ...)
{
  return [a1 wifiSNR];
}

id objc_msgSend_wifiService(void *a1, const char *a2, ...)
{
  return [a1 wifiService];
}

id objc_msgSend_wifiState(void *a1, const char *a2, ...)
{
  return [a1 wifiState];
}

id objc_msgSend_wifiTxPowerdBm(void *a1, const char *a2, ...)
{
  return [a1 wifiTxPowerdBm];
}

id objc_msgSend_wifiUlAntennaBitmapOnCellAntBitmap000(void *a1, const char *a2, ...)
{
  return [a1 wifiUlAntennaBitmapOnCellAntBitmap000];
}

id objc_msgSend_wifiUlAntennaBitmapOnCellAntBitmap001(void *a1, const char *a2, ...)
{
  return [a1 wifiUlAntennaBitmapOnCellAntBitmap001];
}

id objc_msgSend_wifiUlAntennaBitmapOnCellAntBitmap010(void *a1, const char *a2, ...)
{
  return [a1 wifiUlAntennaBitmapOnCellAntBitmap010];
}

id objc_msgSend_wifiUlAntennaBitmapOnCellAntBitmap011(void *a1, const char *a2, ...)
{
  return [a1 wifiUlAntennaBitmapOnCellAntBitmap011];
}

id objc_msgSend_wifiUlAntennaBitmapOnCellAntBitmap100(void *a1, const char *a2, ...)
{
  return [a1 wifiUlAntennaBitmapOnCellAntBitmap100];
}

id objc_msgSend_wifiUlAntennaBitmapOnCellAntBitmap101(void *a1, const char *a2, ...)
{
  return [a1 wifiUlAntennaBitmapOnCellAntBitmap101];
}

id objc_msgSend_wifiUlAntennaBitmapOnCellAntBitmap110(void *a1, const char *a2, ...)
{
  return [a1 wifiUlAntennaBitmapOnCellAntBitmap110];
}

id objc_msgSend_wifiUlAntennaBitmapOnCellAntBitmap111(void *a1, const char *a2, ...)
{
  return [a1 wifiUlAntennaBitmapOnCellAntBitmap111];
}

id objc_msgSend_wifiUlAntennaBitmapOnCellLAT(void *a1, const char *a2, ...)
{
  return [a1 wifiUlAntennaBitmapOnCellLAT];
}

id objc_msgSend_wifiUlAntennaBitmapOnCellUAT(void *a1, const char *a2, ...)
{
  return [a1 wifiUlAntennaBitmapOnCellUAT];
}

id objc_msgSend_willLeaveBSPActiveState(void *a1, const char *a2, ...)
{
  return [a1 willLeaveBSPActiveState];
}

id objc_msgSend_wrmPlatformId(void *a1, const char *a2, ...)
{
  return [a1 wrmPlatformId];
}

id objc_msgSend_wrmSku(void *a1, const char *a2, ...)
{
  return [a1 wrmSku];
}

id objc_msgSend_wrm_IDSP2PControllerSingleton(void *a1, const char *a2, ...)
{
  return [a1 wrm_IDSP2PControllerSingleton];
}